OBJECT Report 5199 Update Contact Classification
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Update Contact Classification;
               ESP=Actualizar clasific. contacto];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   Date := WORKDATE;
                 END;

    OnPreReport=BEGIN
                  Window.OPEN(
                    Text000 +
                    Text001 +
                    Text002);
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table5087;
        DataItemTableView=SORTING(Code);
        OnAfterGetRecord=BEGIN
                           Window.UPDATE(1,Code);
                           IF NoOfProfiles = 0 THEN
                             NoOfProfiles := COUNTAPPROX;
                           ProfileCount := ProfileCount + 1;
                           Window.UPDATE(2,ROUND(10000*ProfileCount/NoOfProfiles,1));
                           NoOfQuestions := 0;
                         END;

        ReqFilterFields=Code,Description,Business Relation Code;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table5088;
        DataItemTableView=SORTING(Profile Questionnaire Code,Line No.)
                          WHERE(Type=CONST(Question),
                                Auto Contact Classification=CONST(Yes),
                                Contact Class. Field=FILTER(<>Rating));
        OnPreDataItem=BEGIN
                        NoOfQuestions := 0;
                        QuestionCount := 0;
                      END;

        OnAfterGetRecord=BEGIN
                           Window.UPDATE(3,"Line No.");
                           IF NoOfQuestions = 0 THEN
                             NoOfQuestions := COUNTAPPROX;
                           QuestionCount := QuestionCount + 1;
                           Window.UPDATE(4,ROUND(10000*QuestionCount/NoOfQuestions,1));
                           RecCount := 0;

                           ContactValue.DELETEALL;

                           IF (FORMAT("Starting Date Formula") = '') OR (FORMAT("Ending Date Formula") = '') THEN
                             ERROR(
                               STRSUBSTNO(Text005,FIELDCAPTION("Starting Date Formula"),FIELDCAPTION("Ending Date Formula")) +
                               STRSUBSTNO(Text006,"Profile Questionnaire Header".Code,"Profile Questionnaire Line".Description) +
                               Text007);

                           IF ("Classification Method" = "Classification Method"::" ") THEN
                             ERROR(
                               STRSUBSTNO(Text008,FIELDCAPTION("Classification Method")) +
                               STRSUBSTNO(Text006,"Profile Questionnaire Header".Code,"Profile Questionnaire Line".Description) +
                               Text007);

                           AnswersExists("Profile Questionnaire Line",'',TRUE);
                           TotalValue := 0;

                           CASE TRUE OF
                             "Customer Class. Field" <> "Customer Class. Field"::" ": FindCustomerValues("Profile Questionnaire Line");
                             "Vendor Class. Field" <> "Vendor Class. Field"::" ": FindVendorValues("Profile Questionnaire Line");
                             "Contact Class. Field" <> "Contact Class. Field"::" ": FindContactValues("Profile Questionnaire Line");
                           END;

                           MarkContactByMethod("Profile Questionnaire Line",'');
                         END;

        DataItemLink=Profile Questionnaire Code=FIELD(Code);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        OnAfterGetRecord=BEGIN
                           UpdateRating('');
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=3410;
    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;0    ;1650 ;440  ;CaptionML=[ENU=Date;
                                                              ESP=Fecha];
                                                   SourceExpr=Date }
      { 2   ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=1 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Date;
                             ESP=Fecha];
                  SourceExpr=Date }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Profile Questionnaire #1######## @2@@@@@@@@@@@@@\\;ESP=Cuestionario perfil #1######## @2@@@@@@@@@@@@@\\';
      Text001@1001 : TextConst 'ENU=Question Line No.     #3######## @4@@@@@@@@@@@@@\;ESP=N§ l¡n. pregunta     #3######## @4@@@@@@@@@@@@@\';
      Text002@1002 : TextConst 'ENU=Finding Values        #5######## @6@@@@@@@@@@@@@\;ESP=Buscando valores        #5######## @6@@@@@@@@@@@@@\';
      Text003@1003 : TextConst 'ENU=results in a date before the result of the %2;ESP=resultados en una fecha anterior que el resultado del %2';
      ContactValue@1004 : TEMPORARY Record 5101;
      Date@1006 : Date;
      Window@1007 : Dialog;
      NoOfProfiles@1008 : Integer;
      ProfileCount@1009 : Integer;
      NoOfQuestions@1010 : Integer;
      QuestionCount@1011 : Integer;
      NoOfRecs@1012 : Integer;
      RecCount@1013 : Integer;
      TotalValue@1014 : Decimal;
      Text004@1015 : TextConst 'ENU=Two or more questions are causing the rating calculation to loop.;ESP=Dos o m s preguntas est n causando un bucle en el c lculo de clasificaci¢n.';
      Text005@1016 : TextConst 'ENU=You must specify %1 and %2;ESP=Debe especificar %1 y %2';
      Text006@1017 : TextConst 'ENU=in Profile Questionnaire %1, question %2.;ESP=en Cuestionario perfil %1, pregunta %2.';
      Text007@1018 : TextConst 'ENU=\To find additional errors please run the Test Rapport;ESP=\Para encontrar errores adicionales, ejecute el Informe Test';
      Text008@1019 : TextConst 'ENU="You must specify %1 ";ESP="Debe especificar %1 "';

    PROCEDURE AnswersExists@1(VAR ProfileQuestionnaireLine@1001 : Record 5088;UpdateContNo@1003 : Code[20];Delete@1004 : Boolean) : Boolean;
    VAR
      ContProfileAnswer@1000 : Record 5089;
      ProfileQuestnLine2@1002 : Record 5088;
    BEGIN
      ContProfileAnswer.SETCURRENTKEY("Profile Questionnaire Code","Line No.");
      ContProfileAnswer.SETRANGE("Profile Questionnaire Code",ProfileQuestionnaireLine."Profile Questionnaire Code");

      ProfileQuestnLine2.RESET;
      ProfileQuestnLine2 := ProfileQuestionnaireLine;
      ProfileQuestnLine2.SETRANGE(Type,ProfileQuestnLine2.Type::Question);
      ProfileQuestnLine2.SETRANGE("Profile Questionnaire Code",ProfileQuestionnaireLine."Profile Questionnaire Code");
      IF ProfileQuestnLine2.NEXT <> 0 THEN
        ContProfileAnswer.SETRANGE("Line No.",ProfileQuestionnaireLine."Line No.",ProfileQuestnLine2."Line No.")
      ELSE
        ContProfileAnswer.SETFILTER("Line No.",'%1..',ProfileQuestionnaireLine."Line No.");
      IF UpdateContNo <> '' THEN BEGIN
        ContProfileAnswer.SETRANGE("Contact No.",UpdateContNo);
        ContProfileAnswer.SETCURRENTKEY("Contact No.","Profile Questionnaire Code","Line No.");
      END;

      IF Delete THEN
        ContProfileAnswer.DELETEALL
      ELSE
        EXIT(NOT ContProfileAnswer.ISEMPTY);
    END;

    PROCEDURE FindCustomerValues@2(ProfileQuestionnaireLine@1009 : Record 5088);
    VAR
      Cust@1000 : Record 18;
      CustLedgEntry@1001 : Record 21;
      CustLedgEntry2@1010 : Record 21;
      ValueEntry@1002 : Record 5802;
      CustContactNo@1003 : Code[20];
      NoOfInvoices@1004 : Integer;
      DaysOverdue@1005 : Integer;
      NoOfYears@1006 : Decimal;
      FromDate@1007 : Date;
      ToDate@1008 : Date;
    BEGIN
      NoOfRecs := Cust.COUNTAPPROX;
      IF Cust.FIND('-') THEN
        REPEAT
          RecCount := RecCount + 1;
          Window.UPDATE(5,Cust."No.");
          Window.UPDATE(6,ROUND(10000*RecCount/NoOfRecs,1));
          CustContactNo := ContactNo(ProfileQuestionnaireLine,DATABASE::Customer,Cust."No.");
          IF CustContactNo <> '' THEN BEGIN
            Cust.RESET;
            FromDate := CALCDATE(ProfileQuestionnaireLine."Starting Date Formula",Date);
            ToDate := CALCDATE(ProfileQuestionnaireLine."Ending Date Formula",Date);
            IF ToDate < FromDate THEN
              ProfileQuestionnaireLine.FIELDERROR("Ending Date Formula",
              STRSUBSTNO(Text003,
              ProfileQuestionnaireLine.FIELDCAPTION("Ending Date Formula"),
              ProfileQuestionnaireLine.FIELDCAPTION("Starting Date Formula")));
            Cust.SETRANGE("Date Filter",FromDate,ToDate);
            CASE ProfileQuestionnaireLine."Customer Class. Field" OF
              ProfileQuestionnaireLine."Customer Class. Field"::"Sales (LCY)":
                BEGIN
                  Cust.CALCFIELDS("Sales (LCY)");
                  InsertContactValue(ProfileQuestionnaireLine,CustContactNo,Cust."Sales (LCY)",0D,0);
                END;
              ProfileQuestionnaireLine."Customer Class. Field"::"Profit (LCY)":
                BEGIN
                  Cust.CALCFIELDS("Profit (LCY)");
                  InsertContactValue(ProfileQuestionnaireLine,CustContactNo,Cust."Profit (LCY)",0D,0);
                END;
              ProfileQuestionnaireLine."Customer Class. Field"::"Sales Frequency (Invoices/Year)":
                BEGIN
                  CustLedgEntry.SETCURRENTKEY("Document Type","Customer No.","Posting Date");
                  CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
                  CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
                  CustLedgEntry.SETFILTER("Posting Date",Cust.GETFILTER("Date Filter"));
                  NoOfInvoices := CustLedgEntry.COUNT;
                  NoOfYears := (ToDate - FromDate + 1) / 365;
                  InsertContactValue(ProfileQuestionnaireLine,CustContactNo,NoOfInvoices/NoOfYears,0D,0);
                END;
              ProfileQuestionnaireLine."Customer Class. Field"::"Avg. Invoice Amount (LCY)":
                BEGIN
                  CustLedgEntry.SETCURRENTKEY("Document Type","Customer No.","Posting Date");
                  CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
                  CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
                  CustLedgEntry.SETFILTER("Posting Date",Cust.GETFILTER("Date Filter"));
                  NoOfInvoices := CustLedgEntry.COUNT;
                  IF NoOfInvoices <> 0 THEN BEGIN
                    CustLedgEntry.CALCSUMS("Sales (LCY)");
                    InsertContactValue(ProfileQuestionnaireLine,CustContactNo,CustLedgEntry."Sales (LCY)"/NoOfInvoices,0D,0);
                  END ELSE
                    InsertContactValue(ProfileQuestionnaireLine,CustContactNo,0,0D,0);
                END;
              ProfileQuestionnaireLine."Customer Class. Field"::"Discount (%)":
                BEGIN
                  CustLedgEntry.SETCURRENTKEY("Document Type","Customer No.","Posting Date");
                  CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
                  CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
                  CustLedgEntry.SETFILTER("Posting Date",Cust.GETFILTER("Date Filter"));
                  IF CustLedgEntry.FIND('-') THEN BEGIN
                    CustLedgEntry.CALCSUMS("Sales (LCY)");
                    ValueEntry.SETCURRENTKEY("Source Type","Source No.","Item No.","Posting Date");
                    ValueEntry.SETRANGE("Source Type",ValueEntry."Source Type"::Customer);
                    ValueEntry.SETRANGE("Source No.",Cust."No.");
                    ValueEntry.SETFILTER("Posting Date",Cust.GETFILTER("Date Filter"));
                    ValueEntry.CALCSUMS("Discount Amount");
                    ValueEntry."Discount Amount" := -ValueEntry."Discount Amount";
                    IF (CustLedgEntry."Sales (LCY)"+ValueEntry."Discount Amount") <> 0 THEN
                      InsertContactValue(
                        ProfileQuestionnaireLine,CustContactNo,
                        100*ValueEntry."Discount Amount"/
                        (CustLedgEntry."Sales (LCY)"+ValueEntry."Discount Amount"),0D,0)
                    ELSE
                      InsertContactValue(ProfileQuestionnaireLine,CustContactNo,0,0D,0);
                  END ELSE
                    InsertContactValue(ProfileQuestionnaireLine,CustContactNo,0,0D,0);
                END;
              ProfileQuestionnaireLine."Customer Class. Field"::"Avg. Overdue (Day)":
                BEGIN
                  CustLedgEntry.SETCURRENTKEY("Document Type","Customer No.","Posting Date");
                  CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
                  CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
                  CustLedgEntry.SETFILTER("Posting Date",Cust.GETFILTER("Date Filter"));
                  CustLedgEntry.SETRANGE(Open,FALSE);
                  NoOfInvoices := CustLedgEntry.COUNT;
                  IF NoOfInvoices <> 0 THEN BEGIN
                    DaysOverdue := 0;
                    CustLedgEntry.FIND('-');
                    REPEAT
                      IF CustLedgEntry."Closed at Date" > CustLedgEntry."Due Date" THEN
                        DaysOverdue := DaysOverdue + (CustLedgEntry."Closed at Date" - CustLedgEntry."Due Date")
                      ELSE IF CustLedgEntry."Closed at Date" = 0D THEN BEGIN
                        CustLedgEntry2.RESET;
                        CustLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
                        CustLedgEntry2.SETRANGE("Document Type",CustLedgEntry2."Document Type"::Payment);
                        CustLedgEntry2.SETRANGE("Closed by Entry No.",CustLedgEntry."Entry No.");
                        IF CustLedgEntry2.FIND('-') AND
                          (CustLedgEntry2."Closed at Date" > CustLedgEntry."Due Date")
                        THEN
                          DaysOverdue := DaysOverdue + (CustLedgEntry2."Closed at Date" - CustLedgEntry."Due Date");
                      END;
                    UNTIL CustLedgEntry.NEXT = 0;
                    InsertContactValue(ProfileQuestionnaireLine,CustContactNo,DaysOverdue/NoOfInvoices,0D,0);
                  END ELSE
                    InsertContactValue(ProfileQuestionnaireLine,CustContactNo,0,0D,0);
                END;
            END;
          END;
        UNTIL Cust.NEXT = 0
    END;

    PROCEDURE FindVendorValues@13(ProfileQuestionnaireLine@1009 : Record 5088);
    VAR
      Vend@1000 : Record 23;
      VendLedgEntry@1001 : Record 25;
      VendLedgEntry2@1010 : Record 25;
      ValueEntry@1002 : Record 5802;
      VendContactNo@1003 : Code[20];
      NoOfInvoices@1004 : Integer;
      DaysOverdue@1005 : Integer;
      NoOfYears@1006 : Decimal;
      FromDate@1007 : Date;
      ToDate@1008 : Date;
    BEGIN
      NoOfRecs := Vend.COUNTAPPROX;
      IF Vend.FIND('-') THEN
        REPEAT
          RecCount := RecCount + 1;
          Window.UPDATE(5,Vend."No.");
          Window.UPDATE(6,ROUND(10000*RecCount/NoOfRecs,1));
          VendContactNo := ContactNo(ProfileQuestionnaireLine,DATABASE::Vendor,Vend."No.");
          IF VendContactNo <> '' THEN BEGIN
            Vend.RESET;
            FromDate := CALCDATE(ProfileQuestionnaireLine."Starting Date Formula",Date);
            ToDate := CALCDATE(ProfileQuestionnaireLine."Ending Date Formula",Date);
            IF ToDate < FromDate THEN
              ProfileQuestionnaireLine.FIELDERROR("Ending Date Formula",
              STRSUBSTNO(Text003,
              ProfileQuestionnaireLine.FIELDCAPTION("Ending Date Formula"),
              ProfileQuestionnaireLine.FIELDCAPTION("Starting Date Formula")));
            Vend.SETRANGE("Date Filter",FromDate,ToDate);
            CASE ProfileQuestionnaireLine."Vendor Class. Field" OF
              ProfileQuestionnaireLine."Vendor Class. Field"::"Purchase (LCY)":
                BEGIN
                  Vend.CALCFIELDS("Purchases (LCY)");
                  Vend."Purchases (LCY)" := - Vend."Purchases (LCY)";
                  InsertContactValue(ProfileQuestionnaireLine,VendContactNo,Vend."Purchases (LCY)",0D,0);
                END;
              ProfileQuestionnaireLine."Vendor Class. Field"::"Purchase Frequency (Invoices/Year)":
                BEGIN
                  VendLedgEntry.SETCURRENTKEY("Document Type","Vendor No.","Posting Date");
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
                  VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
                  VendLedgEntry.SETFILTER("Posting Date",Vend.GETFILTER("Date Filter"));
                  NoOfInvoices := VendLedgEntry.COUNT;
                  NoOfYears := (ToDate - FromDate + 1) / 365;
                  InsertContactValue(ProfileQuestionnaireLine,VendContactNo,NoOfInvoices/NoOfYears,0D,0);
                END;
              ProfileQuestionnaireLine."Vendor Class. Field"::"Avg. Ticket Size (LCY)":
                BEGIN
                  VendLedgEntry.SETCURRENTKEY("Document Type","Vendor No.","Posting Date");
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
                  VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
                  VendLedgEntry.SETFILTER("Posting Date",Vend.GETFILTER("Date Filter"));
                  NoOfInvoices := VendLedgEntry.COUNT;
                  IF NoOfInvoices <> 0 THEN BEGIN
                    VendLedgEntry.CALCSUMS("Purchase (LCY)");
                    VendLedgEntry."Purchase (LCY)" := - VendLedgEntry."Purchase (LCY)";
                    InsertContactValue(ProfileQuestionnaireLine,VendContactNo,VendLedgEntry."Purchase (LCY)"/NoOfInvoices,0D,0);
                  END ELSE
                    InsertContactValue(ProfileQuestionnaireLine,VendContactNo,0,0D,0);
                END;
              ProfileQuestionnaireLine."Vendor Class. Field"::"Discount (%)":
                BEGIN
                  VendLedgEntry.SETCURRENTKEY("Document Type","Vendor No.","Posting Date");
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
                  VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
                  VendLedgEntry.SETFILTER("Posting Date",Vend.GETFILTER("Date Filter"));
                  IF VendLedgEntry.FIND('-') THEN BEGIN
                    VendLedgEntry.CALCSUMS("Purchase (LCY)");
                    VendLedgEntry."Purchase (LCY)" := - VendLedgEntry."Purchase (LCY)";
                    ValueEntry.SETCURRENTKEY("Source Type","Source No.","Item No.","Posting Date");
                    ValueEntry.SETRANGE("Source Type",ValueEntry."Source Type"::Vendor);
                    ValueEntry.SETRANGE("Source No.",Vend."No.");
                    ValueEntry.SETFILTER("Posting Date",Vend.GETFILTER("Date Filter"));
                    ValueEntry.CALCSUMS("Discount Amount");
                    IF (VendLedgEntry."Purchase (LCY)"+ValueEntry."Discount Amount") <> 0 THEN
                      InsertContactValue(
                        ProfileQuestionnaireLine,VendContactNo,
                        100*ValueEntry."Discount Amount"/
                        (VendLedgEntry."Purchase (LCY)"+ValueEntry."Discount Amount"),0D,0)
                    ELSE
                      InsertContactValue(ProfileQuestionnaireLine,VendContactNo,0,0D,0);
                  END ELSE
                    InsertContactValue(ProfileQuestionnaireLine,VendContactNo,0,0D,0);
                END;
              ProfileQuestionnaireLine."Vendor Class. Field"::"Avg. Overdue (Day)":
                BEGIN
                  VendLedgEntry.SETCURRENTKEY("Document Type","Vendor No.","Posting Date");
                  VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
                  VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
                  VendLedgEntry.SETFILTER("Posting Date",Vend.GETFILTER("Date Filter"));
                  VendLedgEntry.SETRANGE(Open,FALSE);
                  NoOfInvoices := VendLedgEntry.COUNT;
                  IF NoOfInvoices <> 0 THEN BEGIN
                    DaysOverdue := 0;
                    VendLedgEntry.FIND('-');
                    REPEAT
                      IF VendLedgEntry."Closed at Date" > VendLedgEntry."Due Date" THEN
                        DaysOverdue := DaysOverdue + (VendLedgEntry."Closed at Date" - VendLedgEntry."Due Date")
                      ELSE IF VendLedgEntry."Closed at Date" = 0D THEN BEGIN
                        VendLedgEntry2.RESET;
                        VendLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
                        VendLedgEntry2.SETRANGE("Document Type",VendLedgEntry2."Document Type"::Payment);
                        VendLedgEntry2.SETRANGE("Closed by Entry No.",VendLedgEntry."Entry No.");
                        IF VendLedgEntry2.FIND('-') AND
                          (VendLedgEntry2."Closed at Date" > VendLedgEntry."Due Date")
                        THEN
                          DaysOverdue := DaysOverdue + (VendLedgEntry2."Closed at Date" - VendLedgEntry."Due Date");
                      END;
                    UNTIL VendLedgEntry.NEXT = 0;
                    InsertContactValue(ProfileQuestionnaireLine,VendContactNo,DaysOverdue/NoOfInvoices,0D,0);
                  END ELSE
                    InsertContactValue(ProfileQuestionnaireLine,VendContactNo,0,0D,0);
                END;
            END;
          END;
        UNTIL Vend.NEXT = 0
    END;

    PROCEDURE FindContactValues@9(ProfileQuestionnaireLine@1007 : Record 5088);
    VAR
      Cont@1000 : Record 5050;
      ContNo@1001 : Code[20];
      NoOfYears@1002 : Decimal;
      WonCount@1003 : Integer;
      LostCount@1004 : Integer;
      FromDate@1005 : Date;
      ToDate@1006 : Date;
    BEGIN
      NoOfRecs := Cont.COUNTAPPROX;
      IF Cont.FIND('-') THEN
        REPEAT
          RecCount := RecCount + 1;
          Window.UPDATE(5,Cont."No.");
          Window.UPDATE(6,ROUND(10000*RecCount/NoOfRecs,1));
          ContNo := ContactNo(ProfileQuestionnaireLine,DATABASE::Contact,Cont."No.");
          IF ContNo <> '' THEN BEGIN
            Cont.RESET;
            FromDate := CALCDATE(ProfileQuestionnaireLine."Starting Date Formula",Date);
            ToDate := CALCDATE(ProfileQuestionnaireLine."Ending Date Formula",Date);
            IF ToDate < FromDate THEN
              ProfileQuestionnaireLine.FIELDERROR("Ending Date Formula",
              STRSUBSTNO(Text003,
              ProfileQuestionnaireLine.FIELDCAPTION("Ending Date Formula"),
              ProfileQuestionnaireLine.FIELDCAPTION("Starting Date Formula")));
            Cont.SETRANGE("Date Filter",FromDate,ToDate);
            CASE ProfileQuestionnaireLine."Contact Class. Field" OF
              ProfileQuestionnaireLine."Contact Class. Field"::"Interaction Quantity":
                BEGIN
                  Cont.CALCFIELDS("No. of Interactions");
                  InsertContactValue(ProfileQuestionnaireLine,Cont."No.",Cont."No. of Interactions",0D,0);
                END;
              ProfileQuestionnaireLine."Contact Class. Field"::"Interaction Frequency (No./Year)":
                BEGIN
                  Cont.CALCFIELDS("No. of Interactions");
                  NoOfYears := (ToDate - FromDate + 1) / 365;
                  InsertContactValue(ProfileQuestionnaireLine,Cont."No.",Cont."No. of Interactions" / NoOfYears,0D,0);
                END;
             ProfileQuestionnaireLine."Contact Class. Field"::"Avg. Interaction Cost (LCY)":
                BEGIN
                  Cont.CALCFIELDS("No. of Interactions","Cost (LCY)");
                  IF Cont."No. of Interactions" <> 0 THEN
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",Cont."Cost (LCY)" / Cont."No. of Interactions",0D,0)
                  ELSE
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",0,0D,0);
                END;
              ProfileQuestionnaireLine."Contact Class. Field"::"Avg. Interaction Duration (Min.)":
                BEGIN
                  Cont.CALCFIELDS("No. of Interactions","Duration (Min.)");
                  IF Cont."No. of Interactions" <> 0 THEN
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",Cont."Duration (Min.)" / Cont."No. of Interactions",0D,0)
                  ELSE
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",0,0D,0);
                END;
              ProfileQuestionnaireLine."Contact Class. Field"::"Opportunity Won (%)":
                BEGIN
                  Cont.SETRANGE("Action Taken Filter",Cont."Action Taken Filter"::Won);
                  Cont.CALCFIELDS(Cont."No. of Opportunities");
                  WonCount := Cont."No. of Opportunities";
                  Cont.SETRANGE("Action Taken Filter",Cont."Action Taken Filter"::Lost);
                  Cont.CALCFIELDS(Cont."No. of Opportunities");
                  LostCount := Cont."No. of Opportunities";
                  IF (LostCount+WonCount) <> 0 THEN
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",100 * WonCount / (LostCount + WonCount),0D,0)
                  ELSE
                    InsertContactValue(ProfileQuestionnaireLine,Cont."No.",0,0D,0);
                END;
            END;
          END;
        UNTIL Cont.NEXT = 0
    END;

    PROCEDURE ContactNo@11(ProfileQuestionnaireLine@1005 : Record 5088;TableID@1001 : Integer;No@1002 : Code[20]) ContactNo@1000 : Code[20];
    VAR
      ContBusRel@1003 : Record 5054;
      Cont@1004 : Record 5050;
      ProfileQuestnHeader@1006 : Record 5087;
    BEGIN
      ProfileQuestnHeader.GET(ProfileQuestionnaireLine."Profile Questionnaire Code");
      IF TableID = DATABASE::Contact THEN
        ContactNo := No
      ELSE BEGIN
        WITH ContBusRel DO BEGIN
          RESET;
          SETCURRENTKEY("Link to Table","No.");
          CASE TableID OF
            DATABASE::Customer:
              SETRANGE("Link to Table","Link to Table"::Customer);
            DATABASE::Vendor:
              SETRANGE("Link to Table","Link to Table"::Vendor);
          END;
          SETRANGE("No.",No);
          IF FIND('-') THEN
            ContactNo := "Contact No."
          ELSE
            EXIT('');
        END;
      END;

      Cont.GET(ContactNo);
      IF (ProfileQuestnHeader."Contact Type" = ProfileQuestnHeader."Contact Type"::Companies) AND
         (Cont.Type <> Cont.Type::Company)
      THEN
        EXIT('');

      IF ProfileQuestnHeader."Business Relation Code" = '' THEN
        EXIT(ContactNo);

      ContBusRel.RESET;
      IF TableID = DATABASE::Contact THEN
        ContBusRel.SETRANGE("Contact No.",Cont."Company No.")
      ELSE
        ContBusRel.SETRANGE("Contact No.",ContactNo);
      ContBusRel.SETRANGE("Business Relation Code",ProfileQuestnHeader."Business Relation Code");
      IF ContBusRel.FIND('-') THEN
        EXIT(ContactNo);
      ContactNo := '';
    END;

    PROCEDURE InsertContactValue@12(ProfileQuestionnaireLine@1002 : Record 5088;ContactNo@1000 : Code[20];Value@1001 : Decimal;UpdateDate@1003 : Date;QuestionsAnsweredPrc@1004 : Decimal);
    BEGIN
      ContactValue.INIT;
      ContactValue."Contact No." := ContactNo;
      IF ProfileQuestionnaireLine."Classification Method" = ProfileQuestionnaireLine."Classification Method"::"Defined Value" THEN
        ContactValue.Value := ROUND(Value,1/POWER(10,ProfileQuestionnaireLine."No. of Decimals"))
      ELSE
        ContactValue.Value := Value;
      ContactValue."Last Date Updated" := UpdateDate;
      ContactValue."Questions Answered (%)" := QuestionsAnsweredPrc;
      ContactValue.INSERT;
      TotalValue := TotalValue + ContactValue.Value;
    END;

    PROCEDURE MarkByDefinedValue@5(ProfileQuestnLineQuestion@1001 : Record 5088;ProfileQuestnLineAnswer@1000 : Record 5088);
    BEGIN
      ContactValue.RESET;
      IF ContactValue.FIND('-') THEN
        REPEAT
          IF InRange(ContactValue.Value,ProfileQuestnLineAnswer."From Value",ProfileQuestnLineAnswer."To Value") THEN
            MarkContact(
              ProfileQuestnLineQuestion,ProfileQuestnLineAnswer,ContactValue."Contact No.",
              ContactValue."Last Date Updated",ContactValue."Questions Answered (%)")
        UNTIL ContactValue.NEXT = 0;
    END;

    PROCEDURE MarkByPercentageOfValue@6(ProfileQuestnLineQuestion@1002 : Record 5088;ProfileQuestnLineAnswer@1003 : Record 5088);
    VAR
      AccAmount@1000 : Decimal;
      Prc@1001 : Decimal;
    BEGIN
      ContactValue.RESET;
      ContactValue.SETCURRENTKEY(Value);

      IF (ProfileQuestnLineQuestion."Sorting Method" = ProfileQuestnLineQuestion."Sorting Method"::" ") THEN
        ERROR(
          STRSUBSTNO(Text008,ProfileQuestnLineQuestion.FIELDCAPTION("Sorting Method")) +
          STRSUBSTNO(Text006,ProfileQuestnLineQuestion."Profile Questionnaire Code",
                     ProfileQuestnLineQuestion.Description) +
          Text007);

      CASE ProfileQuestnLineQuestion."Sorting Method" OF
        ProfileQuestnLineQuestion."Sorting Method"::Descending: ContactValue.ASCENDING(FALSE);
        ProfileQuestnLineQuestion."Sorting Method"::Ascending: ContactValue.ASCENDING(TRUE);
      END;

      IF ContactValue.FIND('-') THEN BEGIN
        AccAmount := 0;
        REPEAT
          AccAmount := AccAmount + ContactValue.Value;
          IF TotalValue <> 0 THEN
            Prc := ROUND(100 * AccAmount / TotalValue,1 / POWER(10,ProfileQuestnLineQuestion."No. of Decimals"))
          ELSE
            Prc := 0;
          IF InRange(Prc,ProfileQuestnLineAnswer."From Value",ProfileQuestnLineAnswer."To Value") THEN
            MarkContact(
              ProfileQuestnLineQuestion,ProfileQuestnLineAnswer,ContactValue."Contact No.",
              ContactValue."Last Date Updated",ContactValue."Questions Answered (%)");
        UNTIL ContactValue.NEXT = 0
      END;
    END;

    PROCEDURE MarkByPercentageOfContacts@7(ProfileQuestnLineQuestion@1004 : Record 5088;ProfileQuestnLineAnswer@1003 : Record 5088);
    VAR
      ContactValueCount@1000 : Integer;
      RecNo@1001 : Integer;
      Prc@1002 : Decimal;
    BEGIN
      ContactValue.RESET;
      ContactValue.SETCURRENTKEY(Value);

      IF (ProfileQuestnLineQuestion."Sorting Method" = ProfileQuestnLineQuestion."Sorting Method"::" ") THEN
        ERROR(
          STRSUBSTNO(Text008,ProfileQuestnLineQuestion.FIELDCAPTION("Sorting Method")) +
          STRSUBSTNO(Text006,ProfileQuestnLineQuestion."Profile Questionnaire Code",
                     ProfileQuestnLineQuestion.Description) +
          Text007);

      CASE ProfileQuestnLineQuestion."Sorting Method" OF
        ProfileQuestnLineQuestion."Sorting Method"::Descending: ContactValue.ASCENDING(FALSE);
        ProfileQuestnLineQuestion."Sorting Method"::Ascending: ContactValue.ASCENDING(TRUE);
      END;

      IF ContactValue.FIND('-') THEN BEGIN
        ContactValueCount := ContactValue.COUNT;
        RecNo := 0;
        REPEAT
          RecNo := RecNo + 1;
          Prc := ROUND(100 * RecNo / ContactValueCount,1 / POWER(10,ProfileQuestnLineQuestion."No. of Decimals"));
          IF InRange(Prc,ProfileQuestnLineAnswer."From Value",ProfileQuestnLineAnswer."To Value") THEN
            MarkContact(
              ProfileQuestnLineQuestion,ProfileQuestnLineAnswer,ContactValue."Contact No.",
              ContactValue."Last Date Updated",ContactValue."Questions Answered (%)")
        UNTIL ContactValue.NEXT = 0
      END;
    END;

    PROCEDURE InRange@3(Value@1000 : Decimal;FromValue@1001 : Decimal;ToValue@1002 : Decimal) : Boolean;
    BEGIN
      IF (FromValue <> 0) AND (ToValue <> 0) AND (Value >= FromValue) AND (Value <= ToValue) THEN
        EXIT(TRUE)
      ELSE
        IF (FromValue <> 0) AND (ToValue = 0) AND (Value >= FromValue) THEN
          EXIT(TRUE)
        ELSE
          IF (FromValue = 0) AND (ToValue <> 0) AND (Value <= ToValue) THEN
            EXIT(TRUE);
    END;

    PROCEDURE MarkContact@10(ProfileQuestnLineQuestion@1006 : Record 5088;ProfileQuestnLineAnswer@1004 : Record 5088;VAR ContNo@1000 : Code[20];UpdateDate@1007 : Date;QuestionsAnsweredPrc@1008 : Decimal);
    VAR
      Cont@1001 : Record 5050;
      ContPers@1002 : Record 5050;
      ContProfileAnswer@1003 : Record 5089;
      ProfileQuestnHeader2@1005 : Record 5087;
    BEGIN
      ProfileQuestnHeader2.GET(ProfileQuestnLineQuestion."Profile Questionnaire Code");

      Cont.GET(ContNo);
      IF (Cont.Type = Cont.Type::Company) AND
        (ProfileQuestnLineQuestion."Contact Class. Field" = ProfileQuestnLineQuestion."Contact Class. Field"::" ") AND
        (ProfileQuestnHeader2."Contact Type" <> ProfileQuestnHeader2."Contact Type"::Companies)
      THEN BEGIN
        ContPers.RESET;
        ContPers.SETCURRENTKEY("Company No.");
        ContPers.SETRANGE("Company No.",Cont."No.");
        ContPers.SETRANGE(Type,Cont.Type::Person);
        IF ContPers.FIND('-') THEN
          REPEAT
            MarkContact(ProfileQuestnLineQuestion,ProfileQuestnLineAnswer,ContPers."No.",UpdateDate,QuestionsAnsweredPrc);
          UNTIL ContPers.NEXT = 0
      END;

      IF (ProfileQuestnHeader2."Contact Type" = ProfileQuestnHeader2."Contact Type"::People) AND
        (Cont.Type <> Cont.Type::Person)
      THEN
        EXIT;
      IF (ProfileQuestnHeader2."Contact Type" = ProfileQuestnHeader2."Contact Type"::Companies) AND
        (Cont.Type <> Cont.Type::Company)
      THEN
        EXIT;

      ContProfileAnswer.INIT;
      ContProfileAnswer."Contact No." := Cont."No.";
      ContProfileAnswer."Profile Questionnaire Code" := ProfileQuestnLineAnswer."Profile Questionnaire Code";
      ContProfileAnswer."Line No." := ProfileQuestnLineAnswer."Line No.";
      ContProfileAnswer."Contact Company No." := Cont."Company No.";
      ContProfileAnswer."Profile Questionnaire Priority" := ProfileQuestnHeader2.Priority;
      ContProfileAnswer."Answer Priority" := ProfileQuestnLineAnswer.Priority;
      ContProfileAnswer."Questions Answered (%)" := QuestionsAnsweredPrc;
      IF UpdateDate = 0D THEN
        ContProfileAnswer."Last Date Updated" := TODAY
      ELSE
        ContProfileAnswer."Last Date Updated" := UpdateDate;
      ContProfileAnswer.INSERT;
    END;

    PROCEDURE UpdateRating@4(UpdateContNo@1012 : Code[20]);
    VAR
      ProfileQuestnLine@1000 : Record 5088;
      ProfileQuestnLine2@1001 : Record 5088;
      Rating@1005 : Record 5111;
      RatingQuestion@1004 : Record 5111;
      Cont@1007 : Record 5050;
      Leaf@1006 : Boolean;
      Changed@1003 : Boolean;
      ContNo@1008 : Code[20];
      FromDate@1010 : Date;
      ToDate@1009 : Date;
      NoOfRatingLines@1002 : Integer;
      RatingLineNo@1011 : Integer;
      Points@1015 : Integer;
      UpdateDate@1013 : Date;
      QuestionsAnsweredPrc@1014 : Decimal;
    BEGIN
      // Mark all non-calculated rating questions
      ProfileQuestnLine.RESET;
      ProfileQuestnLine.SETRANGE("Contact Class. Field",ProfileQuestnLine."Contact Class. Field"::Rating);
      ProfileQuestnLine.SETRANGE("Profile Questionnaire Code","Profile Questionnaire Header".Code);
      IF NOT ProfileQuestnLine.FIND('-') THEN
        EXIT;
      REPEAT
        ProfileQuestnLine.MARK(TRUE);
        NoOfRatingLines := NoOfRatingLines + 1;
      UNTIL ProfileQuestnLine.NEXT = 0;
      ProfileQuestnLine.MARKEDONLY(TRUE);

      //Calculate Ratings
      REPEAT
        Changed := FALSE;
        IF ProfileQuestnLine.FIND('-') THEN
          REPEAT
            Leaf := TRUE;
            Rating.SETRANGE("Profile Questionnaire Code",ProfileQuestnLine."Profile Questionnaire Code");
            Rating.SETRANGE("Profile Questionnaire Line No.",ProfileQuestnLine."Line No.");
            IF Rating.FIND('-') THEN
              REPEAT
                ProfileQuestnLine2.GET(Rating."Rating Profile Quest. Code",Rating."Rating Profile Quest. Line No.");
                RatingQuestion.SETRANGE("Profile Questionnaire Code",Rating."Rating Profile Quest. Code");
                RatingQuestion.SETRANGE("Profile Questionnaire Line No.",ProfileQuestnLine2.FindQuestionLine);
                IF RatingQuestion.FIND('-') THEN BEGIN
                  ProfileQuestnLine2 := ProfileQuestnLine;
                  ProfileQuestnLine.GET(
                    RatingQuestion."Profile Questionnaire Code",RatingQuestion."Profile Questionnaire Line No.");
                  IF ProfileQuestnLine.MARK THEN
                    Leaf := FALSE;
                  ProfileQuestnLine := ProfileQuestnLine2;
                END;
              UNTIL (Rating.NEXT = 0) OR (NOT Leaf);

            //Calculate Rating
            IF Leaf THEN BEGIN
              IF UpdateContNo = '' THEN BEGIN
                RatingLineNo := RatingLineNo + 1;
                Window.UPDATE(1,ProfileQuestnLine."Profile Questionnaire Code");
                Window.UPDATE(3,ProfileQuestnLine."Line No.");
                Window.UPDATE(4,ROUND(10000*RatingLineNo/NoOfRatingLines,1));
                NoOfRecs := Cont.COUNTAPPROX;
                RecCount := 0;
                TotalValue := 0;
              END;
              ContactValue.DELETEALL;
              AnswersExists(ProfileQuestnLine,UpdateContNo,TRUE);
              IF UpdateContNo <> '' THEN
                Cont.SETRANGE("No.",UpdateContNo);
              IF Cont.FIND('-') THEN
                REPEAT
                  IF UpdateContNo = '' THEN BEGIN
                    RecCount := RecCount + 1;
                    Window.UPDATE(5,Cont."No.");
                    Window.UPDATE(6,ROUND(10000*RecCount/NoOfRecs,1));
                  END;
                  ContNo := ContactNo(ProfileQuestnLine,DATABASE::Contact,Cont."No.");
                  IF ContNo <> '' THEN BEGIN
                    Points := FindContactRatingValue(ProfileQuestnLine,Cont,UpdateDate,QuestionsAnsweredPrc);
                    IF QuestionsAnsweredPrc >= ProfileQuestnLine."Min. % Questions Answered" THEN
                      InsertContactValue(ProfileQuestnLine,Cont."No.",Points,UpdateDate,QuestionsAnsweredPrc);
                  END;
                UNTIL Cont.NEXT = 0;
              MarkContactByMethod(ProfileQuestnLine,UpdateContNo);
              ProfileQuestnLine.MARK(FALSE);
              Changed := TRUE;
            END;
          UNTIL ProfileQuestnLine.NEXT = 0;
      UNTIL Changed = FALSE;

      IF ProfileQuestnLine.FIND('-') THEN
        ERROR(Text004);
    END;

    PROCEDURE FindContactRatingValue@14(ProfileQuestnLine@1000 : Record 5088;Cont@1001 : Record 5050;VAR UpdateDate@1005 : Date;VAR QuestionsAnsweredPrc@1008 : Decimal) Value@1004 : Decimal;
    VAR
      Rating@1002 : Record 5111;
      ContProfileAnswer@1003 : Record 5089;
      ProfileQuestionnaireLine@1009 : Record 5088;
      TempProfileQuestnLine@1006 : TEMPORARY Record 5088;
      NoOfAnsweredQuestions@1007 : Integer;
    BEGIN
      UpdateDate := TODAY;
      Rating.SETRANGE("Profile Questionnaire Code",ProfileQuestnLine."Profile Questionnaire Code");
      Rating.SETRANGE("Profile Questionnaire Line No.",ProfileQuestnLine."Line No.");
      IF Rating.FIND('-') THEN
        REPEAT
          ProfileQuestionnaireLine.GET(Rating."Rating Profile Quest. Code",Rating."Rating Profile Quest. Line No.");
          ProfileQuestionnaireLine.GET(ProfileQuestionnaireLine."Profile Questionnaire Code",ProfileQuestionnaireLine.FindQuestionLine);
          IF NOT TempProfileQuestnLine.GET(
            ProfileQuestionnaireLine."Profile Questionnaire Code",ProfileQuestionnaireLine."Line No.")
          THEN BEGIN
            TempProfileQuestnLine.INIT;
            TempProfileQuestnLine."Profile Questionnaire Code" := ProfileQuestionnaireLine."Profile Questionnaire Code";
            TempProfileQuestnLine."Line No." := ProfileQuestionnaireLine."Line No.";
            TempProfileQuestnLine.INSERT;
            IF AnswersExists(ProfileQuestionnaireLine,Cont."No.",FALSE) THEN
              NoOfAnsweredQuestions := NoOfAnsweredQuestions + 1;
          END;

          IF ContProfileAnswer.GET(
            Cont."No.",Rating."Rating Profile Quest. Code",Rating."Rating Profile Quest. Line No.")
          THEN BEGIN
            Value := Value + Rating.Points;
            IF ContProfileAnswer."Last Date Updated" < UpdateDate THEN
              UpdateDate := ContProfileAnswer."Last Date Updated";
          END;
        UNTIL Rating.NEXT = 0;

      IF TempProfileQuestnLine.COUNT <> 0 THEN
        QuestionsAnsweredPrc := NoOfAnsweredQuestions / TempProfileQuestnLine.COUNT * 100
      ELSE
        QuestionsAnsweredPrc := 0;
    END;

    PROCEDURE MarkContactByMethod@16(ProfileQuestnLine@1000 : Record 5088;UpdateContNo@1002 : Code[20]);
    VAR
      ProfileQuestnLine2@1001 : Record 5088;
    BEGIN
      ProfileQuestnLine2.RESET;
      ProfileQuestnLine2 := ProfileQuestnLine;
      ProfileQuestnLine2.SETRANGE("Profile Questionnaire Code",ProfileQuestnLine."Profile Questionnaire Code");
      IF
        (ProfileQuestnLine2.FIND('>')) AND
        (ProfileQuestnLine2.Type = ProfileQuestnLine2.Type::Answer)
      THEN
        REPEAT
          IF UpdateContNo = '' THEN
            Window.UPDATE(3,ProfileQuestnLine2."Line No.");
          CASE ProfileQuestnLine."Classification Method" OF
            ProfileQuestnLine."Classification Method"::"Defined Value":
              MarkByDefinedValue(ProfileQuestnLine,ProfileQuestnLine2);
            ProfileQuestnLine."Classification Method"::"Percentage of Value":
              MarkByPercentageOfValue(ProfileQuestnLine,ProfileQuestnLine2);
            ProfileQuestnLine."Classification Method"::"Percentage of Contacts":
              MarkByPercentageOfContacts(ProfileQuestnLine,ProfileQuestnLine2);
          END;
        UNTIL (ProfileQuestnLine2.NEXT = 0) OR
              (ProfileQuestnLine2.Type = ProfileQuestnLine2.Type::Question);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
