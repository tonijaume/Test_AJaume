OBJECT Report 6031 Update Contract Prices
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Update Contract Prices;
               ESP=Actualizar precios contrato];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   UpdateToDate := WORKDATE;
                 END;

    OnPreReport=BEGIN
                  ServContractFilters := "Service Contract Header".GETFILTERS;
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table5965;
        DataItemTableView=SORTING(Next Price Update Date)
                          WHERE(Contract Type=CONST(Contract),
                                Status=CONST(Signed),
                                Change Status=CONST(Locked));
        OnPreDataItem=BEGIN
                        IF PerformUpd = PerformUpd::"Print Only" THEN BEGIN
                          CLEAR(ContractPriceUpdateTest);
                          ContractPriceUpdateTest.InitVariables(PriceUpdPct,UpdateToDate);
                          ContractPriceUpdateTest.SETTABLEVIEW("Service Contract Header");
                          ContractPriceUpdateTest.RUNMODAL;
                          CurrReport.BREAK;
                        END;

                        TotOldAnnualAmount := 0;
                        TotNewAmount := 0;
                        TotSignedAmount := 0;
                        IF PriceUpdPct = 0 THEN
                          ERROR(Text000);

                        IF PriceUpdPct > 10 THEN
                          IF NOT CONFIRM(Text001) THEN
                            ERROR(Text002);

                        IF UpdateToDate = 0D THEN
                          ERROR(Text003);

                        SETFILTER("Next Price Update Date",'<>%1&<=%2',0D,UpdateToDate);

                        Currency.InitRoundingPrecision;
                        ServMgtSetup.GET;
                      END;

        OnAfterGetRecord=BEGIN
                           ServContract.GET("Contract Type","Contract No.");
                           ServContract.SuspendStatusCheck(TRUE);
                           UpdateServContract := TRUE;

                           OldAnnualAmount := "Annual Amount";
                           OldUpdateDate := "Next Price Update Date";

                           "Last Price Update %" := PriceUpdPct;
                           CALCFIELDS("Calcd. Annual Amount");
                           IF FORMAT("Price Update Period") = '' THEN BEGIN
                             UpdateServContract := FALSE;
                           END;

                           TotOldAnnualAmount := TotOldAnnualAmount + OldAnnualAmount;
                           TotSignedAmount := TotSignedAmount + "Calcd. Annual Amount";

                           TotContractLinesAmount := 0;
                           ServContractLine.RESET;
                           ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
                           ServContractLine.SETRANGE("Contract No.","Contract No.");
                           IF GETFILTER("Item Filter") <> '' THEN
                             ServContractLine.SETFILTER("Item No.",GETFILTER("Item Filter"));
                           IF ServContractLine.FIND('-') THEN
                             REPEAT
                               ServContractLine2 := ServContractLine;
                               ServContractLine.SuspendStatusCheck(TRUE);
                               IF UpdateServContract THEN BEGIN
                                 ServContractLine.VALIDATE(
                                   "Line Value",
                                   ROUND(
                                     ServContractLine."Line Value" + (ServContractLine."Line Value" * PriceUpdPct / 100),
                                     Currency."Amount Rounding Precision"));
                                 IF ServMgtSetup."Register Contract Changes" THEN
                                   ServContractLine.LogContractLineChanges(ServContractLine2);
                                 ServContractLine.MODIFY(TRUE);
                               END;
                               TotContractLinesAmount := TotContractLinesAmount + ServContractLine."Line Amount";
                             UNTIL ServContractLine.NEXT = 0;

                           IF UpdateServContract THEN BEGIN
                             ServContract."Last Price Update Date" := WORKDATE;
                             ServContract."Next Price Update Date" := CALCDATE(ServContract."Price Update Period",ServContract."Next Price Update Date");
                             ServContract."Last Price Update %" := PriceUpdPct;
                             ContractGainLossEntry.AddEntry(
                               5,
                               ServContract."Contract Type",
                               ServContract."Contract No.",
                               TotContractLinesAmount - ServContract."Annual Amount",'');

                             ServContract."Annual Amount" := TotContractLinesAmount;
                             ServContract."Amount per Period" :=
                               ROUND(ServContract."Annual Amount" / ReturnNoOfPer(ServContract."Invoice Period"),
                               Currency."Amount Rounding Precision");
                             IF OldAnnualAmount <> ServContract."Annual Amount" THEN
                               ServContract."Print Increase Text" := TRUE;
                             ServContract.MODIFY;
                             IF ServMgtSetup."Register Contract Changes" THEN
                               ServContract.UpdContractChangeLog("Service Contract Header");
                             TotNewAmount := TotNewAmount + ServContract."Annual Amount";
                           END;
                         END;

        ReqFilterFields=Contract No.,Item Filter;
        CalcFields=Name,Calcd. Annual Amount;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=7260;
      Height=2200;
    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;0    ;1650 ;423  ;HorzAlign=Left;
                                                   SourceExpr=UpdateToDate }
      { 2   ;Label        ;0    ;0    ;3300 ;423  ;ParentControl=1;
                                                   CaptionML=[ENU=Update to Date;
                                                              ESP=Actualiza hasta fecha] }
      { 9   ;TextBox      ;3410 ;550  ;1650 ;440  ;Name=Price Update %;
                                                   CaptionML=[ENU=Price Update %;
                                                              ESP=% Actualiz. precio];
                                                   DecimalPlaces=0:5;
                                                   SourceExpr=PriceUpdPct }
      { 10  ;Label        ;0    ;550  ;3300 ;440  ;ParentControl=9 }
      { 3   ;OptionButton ;3410 ;1210 ;3410 ;440  ;CaptionML=[ENU=Update Contract Prices;
                                                              ESP=Actualizar precios contrato];
                                                   SourceExpr=PerformUpd;
                                                   OptionValue=Update Contract Prices }
      { 6   ;OptionButton ;3410 ;1760 ;3410 ;440  ;CaptionML=[ENU=Print Only;
                                                              ESP=S¢lo imprimir];
                                                   SourceExpr=PerformUpd;
                                                   OptionValue=Print Only }
      { 7   ;Label        ;0    ;1210 ;3300 ;440  ;CaptionML=[ENU=Action;
                                                              ESP=Acci¢n] }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Update to Date;
                             ESP=Actualiza hasta fecha];
                  SourceExpr=UpdateToDate }

      { 9   ;2   ;Field     ;
                  Name=Price Update %;
                  CaptionML=[ENU=Price Update %;
                             ESP=% Actualiz. precio];
                  DecimalPlaces=0:5;
                  SourceExpr=PriceUpdPct }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Action;
                             ESP=Acci¢n];
                  OptionCaptionML=[ENU=Update Contract Prices,Print Only;
                                   ESP=Actualizar precios contrato,S¢lo imprimir];
                  SourceExpr=PerformUpd }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must fill in the Price Update % field.;ESP=Debe rellenar el campo % Actualiz. precio.';
      Text001@1001 : TextConst 'ENU=The price update % is unusually large.\\Confirm that this is the correct percentage.;ESP=La actualiz. precio es muy alta.\\¨Confirma que ‚ste es el porcentaje correcto?';
      Text002@1002 : TextConst 'ENU=The program has stopped the batch job at your request.;ESP=El programa ha parado el proceso bajo su petici¢n.';
      Text003@1003 : TextConst 'ENU=You must fill in the Update to Date field.;ESP=Debe rellenar el campo Actualiz. hasta fecha.';
      ServContract@1006 : Record 5965;
      ServContractLine@1007 : Record 5964;
      ContractPriceUpdateTest@1021 : Report 5985;
      ContractGainLossEntry@1004 : Record 5969;
      ServContractLine2@1022 : Record 5964;
      Currency@1008 : Record 4;
      ServMgtSetup@1005 : Record 5911;
      ServContractFilters@1010 : Text[250];
      OldAnnualAmount@1009 : Decimal;
      TotOldAnnualAmount@1012 : Decimal;
      TotNewAmount@1013 : Decimal;
      TotSignedAmount@1015 : Decimal;
      TotContractLinesAmount@1011 : Decimal;
      OldUpdateDate@1016 : Date;
      PriceUpdPct@1017 : Decimal;
      UpdateToDate@1018 : Date;
      PerformUpd@1019 : 'Update Contract Prices,Print Only';
      UpdateServContract@1020 : Boolean;
      NewAnnualAmount@1014 : Decimal;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
