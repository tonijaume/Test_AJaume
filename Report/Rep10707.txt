OBJECT Report 10707 Make 347 Declaration
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVES6.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Make 347 Declaration;
               ESP=Crear Modelo 347];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CompanyInfo.GET;
                   VATRegNo := COPYSTR(DELCHR(CompanyInfo."VAT Registration No.",'=','.-/'),1,9);
                   WHILE STRLEN(VATRegNo) < 9 DO
                     VATRegNo := '0' + VATRegNo;
                 END;

    OnPreReport=BEGIN
                  IF FiscalYear = '' THEN
                    ERROR(Text1100014);
                  IF MinAmount = 0 THEN
                    ERROR(Text1100015);
                  IF ContactName = '' THEN
                    ERROR(Text1100016);
                  IF ContactTelephone = '' THEN
                    ERROR(Text1100017);
                  IF DeclarationNum = '' THEN
                    ERROR(Text1100018);
                  IF CountryCode = '' THEN
                    ERROR(Text1100019);
                  IF ReplacementDeclaration AND (PreDeclarationNum = '') THEN
                    ERROR(Text1100021);
                  IF FilterString = '' THEN
                    GetFilterStringFromColumnGLAcc;
                  IF CheckExcludedGLAccount AND (FilterString <> '') THEN
                    ERROR(Text1100022);

                  CLEAR(OutFile);

                  // CLEAR(FILE);
                  OutFile.TEXTMODE := TRUE;
                  OutFile.WRITEMODE := TRUE;
                  IF ISSERVICETIER THEN BEGIN
                    FileName := RBMgt.EnvironFileName('','');
                    ToFile := 'MOD347.txt';
                  END ELSE
                    IF FileName = '' THEN
                      ERROR(Text1100020);
                  IF NOT ISSERVICETIER THEN
                    OutFile.QUERYREPLACE(TRUE);
                  OutFile.CREATE(FileName);
                  EmptyVATRegNo := FALSE;
                END;

    OnPostReport=BEGIN
                     // CreateFileHeader(TotalNotIn347Amt);
                   //END;

                   IF TotalAmount <> 0 THEN BEGIN
                     IF EmptyVATRegNo THEN BEGIN
                       IF CONFIRM(STRSUBSTNO(Text1100031,Customer.TABLECAPTION,Vendor.TABLECAPTION,
                         Customer.FIELDCAPTION("VAT Registration No.")),FALSE) THEN BEGIN
                         OutFile.SEEK(0);
                         CreateFileHeader();
                         OutFile.CLOSE();
                         IF ISSERVICETIER THEN BEGIN
                           IF DOWNLOAD(FileName,'','',Text1100026,ToFile) THEN
                             MESSAGE(Text1100023,ToFile);
                         END ELSE
                           MESSAGE(Text1100023,ToFile);
                       END ELSE BEGIN
                         OutFile.CLOSE;
                         ERASE(FileName);
                         MESSAGE(Text1100032);
                       END;
                     END ELSE BEGIN
                       OutFile.SEEK(0);
                       CreateFileHeader();
                       OutFile.CLOSE();
                       IF ISSERVICETIER THEN BEGIN
                           IF DOWNLOAD(FileName,'','',Text1100026,ToFile) THEN
                             MESSAGE(Text1100023,ToFile);
                       END ELSE
                         MESSAGE(Text1100023,ToFile);
                     END;
                   END ELSE BEGIN
                     OutFile.CLOSE;
                     ERASE(FileName);
                     MESSAGE(Text1100024);
                   END;
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          ORDER(Ascending)
                          WHERE(Number=CONST(1));
        OnAfterGetRecord=BEGIN
                           EVALUATE(NumFiscalYear,FiscalYear);
                           IF NumFiscalYear = 0 THEN
                             ERROR(Text1100030);
                           FromDate := DMY2DATE(1,1,NumFiscalYear);
                           ToDate := DMY2DATE(31,12,NumFiscalYear);
                           NotIn347Amt := 0;

                           OutFile.WRITE(PADSTR('',500,' '));
                         END;

      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table18;
        DataItemTableView=SORTING(VAT Registration No.);
        OnPreDataItem=BEGIN
                        NoOfAccounts := RetrieveGLAccount(FilterString);

                        CurrReport.CREATETOTALS(SalesAmt);

                        SETRANGE("Date Filter",FromDate,ToDate);
                        SETFILTER("Country/Region Code",'<> %1','');
                        PrevVATRegNo := Customer."VAT Registration No.";
                      END;

        OnAfterGetRecord=VAR
                           GLEntry3@1100000 : Record 17;
                           GLEntry4@1100001 : Record 17;
                         BEGIN
                           // IF (PrevVATRegNo = '') THEN
                           //   PrevVATRegNo := "VAT Registration No.";

                           // Name347 := PADSTR(Name,40,' ');
                           // Name347 := CONVERTSTR(UPPERCASE(Name347),'µ∑ê‘÷ﬁ‡„ÈÎ•ö()"&Ô',Text1100003);
                           // PostCode347 := PADSTR(StatementNo("Post Code"),5,' ');
                           // END;

                           VATRegNo347 := COPYSTR(DELCHR("VAT Registration No.",'=','.-/'),1,9);
                           IF Customer."Country/Region Code" = CountryCode THEN
                             WHILE STRLEN(VATRegNo347) < 9 DO
                               VATRegNo347 := '0' + VATRegNo347
                           ELSE
                             VATRegNo347 := '         ';
                           Name347 := PADSTR(FormatTextName(Name),40,' ');

                           GetCountyCode(TRUE);

                           PaymentRecdCash := 0;
                           IF FilterString <> '' THEN BEGIN
                             GLEntry3.RESET;
                             GLEntry3.SETCURRENTKEY("Document Date","Document Type","Source Type","Source No.");
                             GLEntry3.SETRANGE("Document Date",FromDate,ToDate);
                             GLEntry3.SETRANGE("Document Type",GLEntry3."Document Type"::Payment);
                             GLEntry3.SETRANGE("Source Type",GLEntry3."Source Type"::Customer);
                             GLEntry3.SETRANGE("Source No.",Customer."No.");
                             IF GLEntry3.FINDSET THEN
                               REPEAT
                                 IF (GLEntry3."Bal. Account Type" = GLEntry3."Bal. Account Type"::Customer) THEN
                                   FOR k := 1 TO NoOfAccounts DO BEGIN
                                     IF GLEntry3."G/L Account No." = FilterArray[k] THEN
                                       PaymentRecdCash := PaymentRecdCash + GLEntry3.Amount;
                                   END
                                 ELSE BEGIN
                                   GLEntry4.RESET;
                                   GLEntry4.SETCURRENTKEY("Transaction No.");
                                   GLEntry4.SETRANGE("Transaction No.",GLEntry3."Transaction No.");
                                   IF GLEntry4.FINDSET THEN
                                     REPEAT
                                       FOR k := 1 TO NoOfAccounts DO BEGIN
                                         IF GLEntry4."G/L Account No." = FilterArray[k] THEN
                                           IF GLEntry4."Bal. Account No." = '' THEN
                                             PaymentRecdCash := PaymentRecdCash + ABS(GLEntry3.Amount);
                                       END;
                                     UNTIL GLEntry4.NEXT = 0;
                                 END;
                               UNTIL GLEntry3.NEXT = 0;
                           END;
                         END;

        GroupTotalFields=VAT Registration No.;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table21;
        DataItemTableView=SORTING(Document Type,Customer No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date,Currency Code);
        OnPreDataItem=BEGIN
                        "Cust. Ledger Entry".SETRANGE("Document Type","Cust. Ledger Entry"."Document Type"::Invoice,"Document Type"::"Credit Memo");
                        AmtSameVATRegNo := 0;
                      END;

        OnAfterGetRecord=VAR
                           VATEntry@1100000 : Record 254;
                           SalesInvHeader@1100005 : Record 112;
                           SalesinvLine@1100004 : Record 113;
                           ShipToAddress@1100003 : Record 222;
                           SalesCrMemoHeader@1100002 : Record 114;
                           SalesCrMemoLine@1100001 : Record 115;
                         BEGIN
                           NoTaxVATFound := FALSE;
                           FromJournal := FALSE;

                           VATEntry.RESET;
                           VATEntry.SETCURRENTKEY(Type,"Document Date","Document No.","Country/Region Code");
                           VATEntry.SETRANGE(Type,VATEntry.Type::Sale);
                           VATEntry.SETRANGE("Document Date","Document Date");
                           VATEntry.SETRANGE("Document No.","Document No.");
                           VATEntry.SETRANGE("Country/Region Code",CountryCode);

                           IF NOT VATEntry.FINDFIRST THEN BEGIN
                             CASE "Document Type" OF
                               "Document Type"::Invoice:
                                 BEGIN
                                   SalesInvHeader.RESET;
                                   IF SalesInvHeader.GET("Document No.") THEN BEGIN
                                     IF SalesInvHeader."Ship-to Code" <> '' THEN BEGIN
                                       ShipToAddress.GET("Customer No.",SalesInvHeader."Ship-to Code");
                                       IF ShipToAddress."Country/Region Code" <> CountryCode THEN
                                         CurrReport.SKIP;
                                     END;
                                     SalesinvLine.RESET;
                                     SalesinvLine.SETRANGE("Document No.","Document No.");
                                     IF SalesinvLine.FINDSET THEN
                                       REPEAT
                                         IF SalesinvLine."VAT Calculation Type" = SalesinvLine."VAT Calculation Type"::"No Taxable VAT" THEN
                                           NoTaxVATFound := TRUE;
                                       UNTIL SalesinvLine.NEXT = 0;
                                   END ELSE BEGIN
                                     IF Customer."Country/Region Code" = CountryCode THEN
                                       FromJournal := TRUE;
                                   END;
                                 END;
                               "Document Type"::"Credit Memo":
                                 BEGIN
                                   SalesCrMemoHeader.RESET;
                                   IF SalesCrMemoHeader.GET("Document No.") THEN BEGIN
                                     IF SalesCrMemoHeader."Ship-to Code" <> '' THEN BEGIN
                                       ShipToAddress.GET("Customer No.",SalesCrMemoHeader."Ship-to Code");
                                       IF ShipToAddress."Country/Region Code" <> CountryCode THEN
                                         CurrReport.SKIP;
                                     END;
                                     SalesCrMemoLine.RESET;
                                     SalesCrMemoLine.SETRANGE("Document No.","Document No.");
                                     IF SalesCrMemoLine.FINDSET THEN
                                       REPEAT
                                         IF SalesCrMemoLine."VAT Calculation Type" = SalesCrMemoLine."VAT Calculation Type"::"No Taxable VAT" THEN
                                           NoTaxVATFound := TRUE;
                                       UNTIL SalesCrMemoLine.NEXT = 0;
                                   END ELSE BEGIN
                                     IF Customer."Country/Region Code" = CountryCode THEN
                                       FromJournal := TRUE;
                                   END;
                                 END;
                             END;

                             IF NOT NoTaxVATFound AND NOT FromJournal THEN
                               CurrReport.SKIP;
                           END;

                           IF (VATEntry."VAT Registration No." <> '') OR NoTaxVATFound OR FromJournal THEN BEGIN
                             CALCFIELDS("Amount (LCY)");
                             SalesAmt := SalesAmt + "Amount (LCY)"
                           END ELSE
                             EmptyVATRegNo := TRUE;
                         END;

        OnPostDataItem=VAR
                         CashAmtText@1100000 : Text[15];
                       BEGIN
                         AmtSameVATRegNo := CheckSameVATRegNo(TRUE);

                         IF (Customer."VAT Registration No." <> PrevVATRegNo) THEN BEGIN

                           IF Customer."VAT Registration No." <> '' THEN BEGIN
                             TotalNotIn347Amt := TotalNotIn347Amt + NotIn347Amt;

                             SalesAmt := SalesAmt + NotIn347Amt + AmtSameVATRegNo;
                             IF SalesAmt >= MinAmount THEN BEGIN
                               IF PostCode347 = '     ' THEN
                                 ERROR(Text1100006,Customer."No.");
                               CLEAR(OutText);
                               AmountText := AmtEuro(SalesAmt);
                               IF PaymentRecdCash >= MinAmountCash THEN
                                 CashAmtText := AmtEuro(PaymentRecdCash)
                               ELSE
                                 CashAmtText := PADSTR('',15,'0');
                               OutText :=
                                 '2347' + FiscalYear + UPPERCASE(VATRegNo) + UPPERCASE(VATRegNo347) + PADSTR('',9,' ') + UPPERCASE(Name347) + Text1100002 +
                                 CountyCode + CVCountryCode + PADSTR('',1,' ') + Text1100008 + CONVERTSTR(AmountText,' ','0') + PADSTR('',2,' ') +
                                 CashAmtText + PADSTR('',15,'0') + PADSTR('',371,' ');

                               OutFile.WRITE(OutText);

                               TotalAmount := TotalAmount + SalesAmt;
                               Acum := Acum + 1;
                             END;
                             NotIn347Amt := 0;
                           END;

                           PrevVATRegNo := Customer."VAT Registration No.";
                         END;
                       END;

        CalcFields=Amount;
        DataItemLink=Customer No.=FIELD(No.),
                     Document Date=FIELD(Date Filter);
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table17;
        DataItemTableView=SORTING(Document No.,Posting Date)
                          WHERE(Gen. Posting Type=CONST(Sale));
        DataItemVarName=GLEntry1;
        PrintOnlyIfDetail=Yes;
        OnAfterGetRecord=BEGIN
                           GLAccount.GET(GLEntry1."G/L Account No.");
                           IF GLAccount."Ignore in 347 Report" THEN
                             NotIn347Amt := NotIn347Amt + Amount + "VAT Amount";
                         END;

        OnPostDataItem=VAR
                         CashAmtText@1100000 : Text[15];
                       BEGIN
                       END;

        DataItemLink=Document No.=FIELD(Document No.),
                     Posting Date=FIELD(Posting Date);
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table23;
        DataItemTableView=SORTING(VAT Registration No.);
        OnPreDataItem=BEGIN
                        CurrReport.CREATETOTALS(PurchasesAmt);
                        SETRANGE("Date Filter",FromDate,ToDate);
                        SETFILTER("Country/Region Code",'<> %1','');
                        PrevVATRegNo := Vendor."VAT Registration No."
                      END;

        OnAfterGetRecord=BEGIN
                           // IF (PrevVATRegNo = '') THEN
                           //   PrevVATRegNo := "VAT Registration No.";

                           VATRegNo347 := COPYSTR(DELCHR("VAT Registration No.",'=','.-/'),1,9);
                           IF Vendor."Country/Region Code" = CountryCode THEN
                             WHILE STRLEN(VATRegNo347) < 9 DO
                               VATRegNo347 := '0' + VATRegNo347
                           ELSE
                             VATRegNo347 := '         ';
                           Name347 := PADSTR(FormatTextName(Name),40,' ');

                           GetCountyCode(FALSE);
                           // Name347 := PADSTR(Name,40,' ');
                           // Name347 := CONVERTSTR(UPPERCASE(Name347),'µ∑ê‘÷ﬁ‡„ÈÎ•ö()"&Ô',Text1100003);
                           // PostCode347 := PADSTR(StatementNo("Post Code"),5,' ');
                           // END;
                         END;

        GroupTotalFields=VAT Registration No.;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table25;
        DataItemTableView=SORTING(Document Type,Vendor No.,Global Dimension 1 Code,Global Dimension 2 Code,Posting Date,Currency Code);
        OnPreDataItem=BEGIN
                        "Vendor Ledger Entry".SETRANGE("Document Type","Vendor Ledger Entry"."Document Type"::Invoice,"Document Type"::"Credit Memo");
                        AmtSameVATRegNo := 0;
                      END;

        OnAfterGetRecord=VAR
                           VATEntry@1100000 : Record 254;
                           PurchInvHeader@1100005 : Record 122;
                           PurchInvLine@1100004 : Record 123;
                           OrderAddress@1100003 : Record 224;
                           PurchCrMemoHeader@1100002 : Record 124;
                           PurchCrMemoLine@1100001 : Record 125;
                         BEGIN
                           NoTaxVATFound := FALSE;
                           FromJournal := FALSE;

                           VATEntry.RESET;
                           VATEntry.SETCURRENTKEY(Type,"Document Date","Document No.","Country/Region Code");
                           VATEntry.SETRANGE(Type,VATEntry.Type::Purchase);
                           VATEntry.SETRANGE("Document Date","Document Date");
                           VATEntry.SETRANGE("Document No.","Document No.");
                           VATEntry.SETRANGE("Country/Region Code",CountryCode);

                           IF NOT VATEntry.FINDFIRST THEN BEGIN
                             CASE "Document Type" OF
                               "Document Type"::Invoice:
                                 BEGIN
                                   PurchInvHeader.RESET;
                                   IF PurchInvHeader.GET("Document No.") THEN BEGIN
                                     IF PurchInvHeader."Order Address Code" <> '' THEN BEGIN
                                       OrderAddress.GET("Vendor No.",PurchInvHeader."Order Address Code");
                                       IF OrderAddress."Country/Region Code" <> CountryCode THEN
                                         CurrReport.SKIP;
                                     END;
                                     PurchInvLine.RESET;
                                     PurchInvLine.SETRANGE("Document No.","Document No.");
                                     IF PurchInvLine.FINDSET THEN
                                       REPEAT
                                         IF PurchInvLine."VAT Calculation Type" = PurchInvLine."VAT Calculation Type"::"No Taxable VAT" THEN
                                           NoTaxVATFound := TRUE;
                                       UNTIL PurchInvLine.NEXT = 0;
                                   END ELSE BEGIN
                                     IF Vendor."Country/Region Code" = CountryCode THEN
                                       FromJournal := TRUE;
                                   END;
                                 END;
                               "Document Type"::"Credit Memo":
                                 BEGIN
                                   PurchCrMemoHeader.RESET;
                                   IF PurchCrMemoHeader.GET("Document No.") THEN BEGIN
                                     IF PurchCrMemoHeader."Order Address Code" <> '' THEN BEGIN
                                       OrderAddress.GET("Vendor No.",PurchCrMemoHeader."Order Address Code");
                                       IF OrderAddress."Country/Region Code" <> CountryCode THEN
                                         CurrReport.SKIP;
                                     END;
                                     PurchCrMemoLine.RESET;
                                     PurchCrMemoLine.SETRANGE("Document No.","Document No.");
                                     IF PurchCrMemoLine.FINDSET THEN
                                       REPEAT
                                         IF PurchCrMemoLine."VAT Calculation Type" = PurchCrMemoLine."VAT Calculation Type"::"No Taxable VAT" THEN
                                           NoTaxVATFound := TRUE;
                                       UNTIL PurchCrMemoLine.NEXT = 0;
                                   END ELSE BEGIN
                                     IF Vendor."Country/Region Code" = CountryCode THEN
                                       FromJournal := TRUE;
                                   END;
                                 END;
                             END;

                             IF NOT NoTaxVATFound AND NOT FromJournal THEN
                               CurrReport.SKIP;
                           END;

                           IF (VATEntry."VAT Registration No." <> '') OR NoTaxVATFound OR FromJournal THEN BEGIN
                             CALCFIELDS("Amount (LCY)");
                             PurchasesAmt := PurchasesAmt - "Amount (LCY)"
                           END ELSE
                             EmptyVATRegNo := TRUE;
                         END;

        OnPostDataItem=BEGIN
                         AmtSameVATRegNo := CheckSameVATRegNo(FALSE);

                         IF (Vendor."VAT Registration No." <> PrevVATRegNo) THEN BEGIN

                           IF Vendor."VAT Registration No." <> '' THEN BEGIN
                             TotalNotIn347Amt := TotalNotIn347Amt + NotIn347Amt + AmtSameVATRegNo;

                             PurchasesAmt := PurchasesAmt - NotIn347Amt;
                             IF PurchasesAmt >= MinAmount THEN BEGIN
                               IF PostCode347 = '     ' THEN
                                 ERROR(Text1100009,Vendor."No.");
                                CLEAR(OutText);
                                AmountText := AmtEuro(PurchasesAmt);
                                OutText :=
                                  '2347' + FiscalYear + UPPERCASE(VATRegNo) + UPPERCASE(VATRegNo347) + PADSTR('',9,' ') + UPPERCASE(Name347) + Text1100002
                         +
                                  CountyCode + CVCountryCode + PADSTR('',1,' ') + Text1100011 + CONVERTSTR(AmountText,' ','0') + PADSTR('',2,' ') +
                                 PADSTR('',15,'0') + PADSTR('',15,'0') + PADSTR('',371,' ');

                                OutFile.WRITE(OutText);

                                TotalAmount := TotalAmount + PurchasesAmt;
                                Acum := Acum + 1;
                             END;
                             NotIn347Amt := 0;
                           END;

                           PrevVATRegNo := Vendor."VAT Registration No.";
                         END;
                       END;

        CalcFields=Amount;
        DataItemLink=Vendor No.=FIELD(No.),
                     Document Date=FIELD(Date Filter);
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table17;
        DataItemTableView=SORTING(Document No.,Posting Date)
                          WHERE(Gen. Posting Type=CONST(Purchase));
        DataItemVarName=GLEntry2;
        PrintOnlyIfDetail=Yes;
        OnAfterGetRecord=BEGIN
                           GLAccount.GET(GLEntry2."G/L Account No.");
                           IF GLAccount."Ignore in 347 Report" THEN
                             NotIn347Amt := NotIn347Amt + Amount + "VAT Amount";
                         END;

        DataItemLink=Document No.=FIELD(Document No.),
                     Posting Date=FIELD(Posting Date);
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=8800;
      Height=6600;
      SaveValues=Yes;
      OnInit=BEGIN
               IF FiscalYear = '' THEN
                 FiscalYear := '0000';
               DeclarationNum := '3470000000000';
             END;

      OnOpenForm=BEGIN
                   IF MinAmount = 0 THEN
                     MinAmount := 3005.06;
                   IF MinAmountCash = 0 THEN
                     MinAmountCash := 6000;
                   IF FileName = '' THEN
                     FileName := Text1100012;
                   IF CountryCode = '' THEN
                     CountryCode := Text1100013;
                   IF ReplacementDeclaration THEN
                     RequestOptionsForm.PreDeclarationNum.EDITABLE := TRUE
                   ELSE
                     RequestOptionsForm.PreDeclarationNum.EDITABLE := FALSE;

                   RequestOptionsForm.FileNameControl.VISIBLE := NOT ISSERVICETIER;
                 END;

    }
    CONTROLS
    {
      { 1100003;Label     ;0    ;550  ;3300 ;440  ;ParentControl=1100002;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Min. Amount;
                                                              ESP=Importe m°n.] }
      { 1100023;Label     ;0    ;6050 ;3300 ;440  ;ParentControl=1100022;
                                                   InPage=-1;
                                                   CaptionML=[ENU=File Name;
                                                              ESP=Nombre archivo] }
      { 1100002;TextBox   ;3410 ;550  ;2750 ;440  ;InPage=-1;
                                                   SourceExpr=MinAmount }
      { 1100022;TextBox   ;3410 ;6050 ;5170 ;440  ;Name=FileNameControl;
                                                   SourceExpr=FileName;
                                                   OnAssistEdit=BEGIN
                                                                  FileName := CommonDialogMgt.OpenFile(Text1100025,FileName,1,Text1100026,1);
                                                                END;
                                                                 }
      { 1100011;Label     ;0    ;2750 ;3300 ;440  ;ParentControl=1100010;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Telephone Number;
                                                              ESP=N£mero de telÇfono] }
      { 1100010;TextBox   ;3410 ;2750 ;1650 ;440  ;InPage=-1;
                                                   Numeric=Yes;
                                                   SourceExpr=ContactTelephone;
                                                   OnValidate=BEGIN
                                                                IF (STRLEN(ContactTelephone) <> MAXSTRLEN(ContactTelephone)) OR (STRPOS(ContactTelephone, ' ') <> 0) THEN
                                                                  ERROR(Text1100027,MAXSTRLEN(ContactTelephone));
                                                              END;
                                                               }
      { 1100014;TextBox   ;3410 ;3850 ;1650 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ESP=C¢d. pa°s/regi¢n];
                                                   SourceExpr=CountryCode;
                                                   TableRelation=Country/Region;
                                                   OnLookup=BEGIN
                                                              IF FORM.RUNMODAL(10,Country) = ACTION::LookupOK THEN
                                                                CountryCode := Country.Code;
                                                            END;
                                                             }
      { 1100015;Label     ;0    ;3850 ;3300 ;440  ;ParentControl=1100014;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ESP=C¢d. pa°s/regi¢n] }
      { 1100004;TextBox   ;3410 ;1100 ;1700 ;440  ;InPage=-1;
                                                   SourceExpr=MinAmountCash }
      { 1100005;Label     ;0    ;1100 ;3300 ;440  ;Name=Min. Amount in Cash;
                                                   ParentControl=1100004;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Min. Amount in Cash;
                                                              ESP=Importe m°n. en efectivo] }
      { 1100000;TextBox   ;3410 ;0    ;1700 ;440  ;InPage=-1;
                                                   Numeric=Yes;
                                                   SourceExpr=FiscalYear;
                                                   OnValidate=BEGIN
                                                                IF STRLEN(FiscalYear) <> MAXSTRLEN(FiscalYear) THEN
                                                                  ERROR(Text1100029,MAXSTRLEN(FiscalYear));
                                                              END;
                                                               }
      { 1100001;Label     ;0    ;0    ;3300 ;440  ;Name=Fiscal Year;
                                                   ParentControl=1100000;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Fiscal Year;
                                                              ESP=Ejercicio] }
      { 1100008;TextBox   ;3410 ;2200 ;1650 ;440  ;InPage=-1;
                                                   SourceExpr=ContactName }
      { 1100009;Label     ;0    ;2200 ;3300 ;440  ;ParentControl=1100008;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Contact Name;
                                                              ESP=Nombre contacto] }
      { 1100013;Label     ;0    ;3300 ;3300 ;440  ;ParentControl=1100012;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Declaration Number;
                                                              ESP=Nß modelo] }
      { 1100012;TextBox   ;3410 ;3300 ;1650 ;440  ;InPage=-1;
                                                   Numeric=Yes;
                                                   SourceExpr=DeclarationNum }
      { 1100016;TextBox   ;3410 ;4400 ;1650 ;440  ;InPage=-1;
                                                   OptionString=Telematic,CD-R;
                                                   SourceExpr=DeclarationMediaType }
      { 1100017;Label     ;0    ;4400 ;3300 ;440  ;ParentControl=1100016;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Declaration Media Type;
                                                              ESP=Tipo de medio modelo] }
      { 1100020;TextBox   ;3410 ;5500 ;1700 ;440  ;Name=PreDeclarationNum;
                                                   InPage=-1;
                                                   Numeric=Yes;
                                                   SourceExpr=PreDeclarationNum;
                                                   OnValidate=BEGIN
                                                                IF (STRLEN(PreDeclarationNum) <> MAXSTRLEN(PreDeclarationNum)) OR (STRPOS(PreDeclarationNum, ' ') <> 0) THEN
                                                                  ERROR(Text1100028,MAXSTRLEN(PreDeclarationNum));
                                                              END;
                                                               }
      { 1100018;CheckBox  ;3410 ;4950 ;440  ;440  ;InPage=-1;
                                                   ShowCaption=No;
                                                   SourceExpr=ReplacementDeclaration;
                                                   OnPush=BEGIN
                                                            IF ReplacementDeclaration THEN
                                                              RequestOptionsForm.PreDeclarationNum.EDITABLE := TRUE
                                                            ELSE
                                                              RequestOptionsForm.PreDeclarationNum.EDITABLE := FALSE;
                                                          END;
                                                           }
      { 1100019;Label     ;0    ;4950 ;3300 ;440  ;ParentControl=1100018;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Replacement Declaration;
                                                              ESP=Modelo de sustituci¢n] }
      { 1100021;Label     ;220  ;5500 ;3080 ;440  ;ParentControl=1100020;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Previous Declaration Number;
                                                              ESP=N£mero de modelo anterior] }
      { 1100007;Label     ;0    ;1650 ;3300 ;440  ;ParentControl=1100006;
                                                   InPage=-1;
                                                   CaptionML=[ENU=GL Acc. for Payments in Cash;
                                                              ESP=Cuenta para pagos en efectivo] }
      { 1100006;TextBox   ;3410 ;1650 ;5170 ;440  ;Editable=No;
                                                   InPage=-1;
                                                   BackTransparent=Yes;
                                                   PermanentAssist=Yes;
                                                   SourceExpr=ColumnGLAcc;
                                                   OnAssistEdit=VAR
                                                                  GLAccSelectionBuf@1100000 : Record 10726;
                                                                BEGIN
                                                                  GLAccSelectionBuf.SetGLAccSelectionMultiple(ColumnGLAcc, FilterString);
                                                                END;
                                                                 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               PreDeclarationNumEditable := TRUE;
               FileNameControlVisible := TRUE;
               IF FiscalYear = '' THEN
                 FiscalYear := '0000';
               DeclarationNum := '3470000000000';
             END;

      OnOpenPage=BEGIN
                   IF MinAmount = 0 THEN
                     MinAmount := 3005.06;
                   IF MinAmountCash = 0 THEN
                     MinAmountCash := 6000;
                   IF FileName = '' THEN
                     FileName := Text1100012;
                   IF CountryCode = '' THEN
                     CountryCode := Text1100013;
                   IF ReplacementDeclaration THEN
                     PreDeclarationNumEditable := TRUE
                   ELSE
                     PreDeclarationNumEditable := FALSE;

                   FileNameControlVisible := NOT ISSERVICETIER;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1100000;2;Field     ;
                  CaptionML=[ENU=Fiscal Year;
                             ESP=Ejercicio];
                  Numeric=Yes;
                  SourceExpr=FiscalYear;
                  OnValidate=BEGIN
                               IF STRLEN(FiscalYear) <> MAXSTRLEN(FiscalYear) THEN
                                 ERROR(Text1100029,MAXSTRLEN(FiscalYear));
                             END;
                              }

      { 1100002;2;Field     ;
                  CaptionML=[ENU=Min. Amount;
                             ESP=Importe m°n.];
                  SourceExpr=MinAmount }

      { 1100004;2;Field     ;
                  CaptionML=[ENU=Min. Amount in Cash;
                             ESP=Importe m°n. en efectivo];
                  SourceExpr=MinAmountCash }

      { 1100006;2;Field     ;
                  CaptionML=[ENU=GL Acc. for Payments in Cash;
                             ESP=Cuenta para pagos en efectivo];
                  SourceExpr=ColumnGLAcc;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 GLAccSelectionBuf@1100000 : Record 10726;
                               BEGIN
                                 GLAccSelectionBuf.SetGLAccSelectionMultiple(ColumnGLAcc, FilterString);
                               END;
                                }

      { 1100008;2;Field     ;
                  CaptionML=[ENU=Contact Name;
                             ESP=Nombre contacto];
                  SourceExpr=ContactName }

      { 1100010;2;Field     ;
                  CaptionML=[ENU=Telephone Number;
                             ESP=N£mero de telÇfono];
                  Numeric=Yes;
                  SourceExpr=ContactTelephone;
                  OnValidate=BEGIN
                               IF (STRLEN(ContactTelephone) <> MAXSTRLEN(ContactTelephone)) OR (STRPOS(ContactTelephone, ' ') <> 0) THEN
                                 ERROR(Text1100027,MAXSTRLEN(ContactTelephone));
                             END;
                              }

      { 1100012;2;Field     ;
                  CaptionML=[ENU=Declaration Number;
                             ESP=Nß modelo];
                  Numeric=Yes;
                  SourceExpr=DeclarationNum }

      { 1100014;2;Field     ;
                  CaptionML=[ENU=Country/Region Code;
                             ESP=C¢d. pa°s/regi¢n];
                  SourceExpr=CountryCode;
                  TableRelation=Country/Region;
                  OnLookup=BEGIN
                             IF FORM.RUNMODAL(10,Country) = ACTION::LookupOK THEN
                               CountryCode := Country.Code;
                           END;
                            }

      { 1100016;2;Field     ;
                  CaptionML=[ENU=Declaration Media Type;
                             ESP=Tipo de medio modelo];
                  SourceExpr=DeclarationMediaType }

      { 1100018;2;Field     ;
                  CaptionML=[ENU=Replacement Declaration;
                             ESP=Modelo de sustituci¢n];
                  SourceExpr=ReplacementDeclaration;
                  OnValidate=BEGIN
                               ReplacementDeclarationOnPush;
                             END;
                              }

      { 1100020;2;Field     ;
                  Name=PreDeclarationNum;
                  CaptionML=[ENU=Previous Declaration Number;
                             ESP=N£mero de modelo anterior];
                  Numeric=Yes;
                  SourceExpr=PreDeclarationNum;
                  Editable=PreDeclarationNumEditable;
                  OnValidate=BEGIN
                               IF (STRLEN(PreDeclarationNum) <> MAXSTRLEN(PreDeclarationNum)) OR (STRPOS(PreDeclarationNum, ' ') <> 0) THEN
                                 ERROR(Text1100028,MAXSTRLEN(PreDeclarationNum));
                             END;
                              }

      { 1100022;2;Field     ;
                  Name=FileNameControl;
                  CaptionML=[ENU=File Name;
                             ESP=Nombre archivo];
                  SourceExpr=FileName;
                  Visible=FileNameControlVisible;
                  OnAssistEdit=BEGIN
                                 FileName := CommonDialogMgt.OpenFile(Text1100025,FileName,1,Text1100026,1);
                               END;
                                }

    }
  }
  CODE
  {
    VAR
      CompanyInfo@1100074 : Record 79;
      Country@1100073 : Record 9;
      GLAccount@1100072 : Record 15;
      Cust@1100071 : Record 18;
      Vend@1100070 : Record 23;
      CommonDialogMgt@1100069 : Codeunit 412;
      OutFile@1100068 : File;
      LocalCurrencyCode@1100067 : 'EUR,ESP';
      DeclarationMediaType@1100066 : 'Telematic,CD-R';
      AmountText@1100065 : Text[15];
      ContactName@1100064 : Text[40];
      ColumnGLAcc@1100063 : Text[250];
      FilterString@1100062 : Text[250];
      DeclarationNum@1100061 : Text[13];
      PreDeclarationNum@1100060 : Text[13];
      DeclrationMT@1100059 : Text[1];
      ReplacementDecText@1100058 : Text[1];
      VATRegNo@1100055 : Text[9];
      Name347@1100054 : Text[40];
      VATRegNo347@1100039 : Text[9];
      PostCode347@1100038 : Text[5];
      StreetNo@1100037 : Text[5];
      Character@1100036 : Text[1];
      CountyCode@1100035 : Text[5];
      OutText@1100034 : Text[500];
      ContactNameCompany@1100033 : Text[30];
      ContactSurName1Company@1100032 : Text[30];
      ContactSurName2Company@1100031 : Text[30];
      ContactTelephone@1100030 : Text[9];
      OldVatRegNo@1100029 : Text[20];
      FileName@1100028 : Text[1024];
      FilterArray@1100027 : ARRAY [50] OF Text[30];
      CVCountryCode@1100086 : Text[2];
      LengthFile@1100092 : Integer;
      PostCode@1100026 : Code[20];
      CountryCode@1100025 : Code[10];
      FiscalYear@1100024 : Code[4];
      i@1100023 : Integer;
      Position@1100022 : Integer;
      Acum@1100021 : Integer;
      NumFiscalYear@1100020 : Integer;
      NoOfAccounts@1100019 : Integer;
      k@1100018 : Integer;
      ReplacementDeclaration@1100017 : Boolean;
      IsDigit@1100016 : Boolean;
      Found@1100015 : Boolean;
      EmptyVATRegNo@1100014 : Boolean;
      NoTaxVATFound@1100090 : Boolean;
      FromJournal@1100002 : Boolean;
      NotIn347Amt@1100013 : Decimal;
      TotalNotIn347Amt@1100012 : Decimal;
      Amount349@1100011 : Decimal;
      VATAmt@1100010 : Decimal;
      TotalAmount@1100009 : Decimal;
      TotalPaymentRecdCash@1100008 : Decimal;
      PaymentRecdCash@1100007 : Decimal;
      MinAmountCash@1100006 : Decimal;
      MinAmount@1100005 : Decimal;
      SalesAmt@1100004 : Decimal;
      PurchasesAmt@1100003 : Decimal;
      AmtSameVATRegNo@1100093 : Decimal;
      FromDate@1100001 : Date;
      ToDate@1100000 : Date;
      RBMgt@1100056 : Codeunit 419;
      ToFile@1100057 : Text[1024];
      PrevVATRegNo@1102601000 : Text[30];
      Text1100002@1100089 : TextConst 'ENU=D;ESP=D';
      Text1100004@1100087 : TextConst 'ENU=<Integer>;ESP=<Integer>';
      Text1100006@1100085 : TextConst 'ENU=Postal Code is missing in customer''s card %1;ESP=Falta el c¢digo postal en la ficha del cliente %1';
      Text1100008@1100084 : TextConst 'ENU=B;ESP=B';
      Text1100009@1100083 : TextConst 'ENU=Postal Code is missing in vendor''s card %1;ESP=Falta el c¢digo postal en la ficha del proveedor %1';
      Text1100011@1100082 : TextConst 'ENU=A;ESP=A';
      Text1100012@1100081 : TextConst 'ENU=C:\347\MOD347.TXT;ESP=C:\347\MOD347.TXT';
      Text1100013@1100080 : TextConst 'ENU=ES;ESP=ES';
      Text1100014@1100079 : TextConst 'ENU=Fiscal Year must be entered.;ESP=Debe introducirse el ejercicio.';
      Text1100015@1100078 : TextConst 'ENU=Minimum Amount must be entered.;ESP=Debe introducirse el importe m°nimo.';
      Text1100016@1100077 : TextConst 'ENU=Contact Name must be entered.;ESP=Debe introducirse nombre contacto';
      Text1100017@1100076 : TextConst 'ENU=Telephone Number must be entered.;ESP=Debe introducirse el n£mero de telÇfono.';
      Text1100018@1100075 : TextConst 'ENU=Declaration Number must be entered.;ESP=Debe introducirse n£mero de modelo.';
      Text1100019@1100053 : TextConst 'ENU=Country Code must be entered.;ESP=Country Code must be entered.';
      Text1100020@1100052 : TextConst 'ENU=File Name must be entered.;ESP=File Name must be entered.';
      Text1100021@1100051 : TextConst 'ENU="Please specify the Previous Declaration No. if this is a replacement declaration. ";ESP="Especifique el n£mero de modelo anterior, si es una declaraci¢n de sustituci¢n. "';
      Text1100022@1100050 : TextConst 'ENU=At least one of the GL Accounts selected for payments in cash is setup to be ignored in 347 report.;ESP=Al menos una de las cuentas seleccionadas para pagos en efectivo est† configurada para omitirse en el informe 347.';
      Text1100023@1100049 : TextConst 'ENU=347 Declaration has been exported successfully under %1.;ESP=347 Declaration has been exported successfully under %1.';
      Text1100024@1100048 : TextConst 'ENU=No records were found to be included in the declaration. The process has been aborted. No file will be created.;ESP=No se han encontrado registros para incluir en la declaraci¢n. Se ha cancelado el proceso. No se crear† el archivo.';
      Text1100025@1100047 : TextConst 'ENU="Path to Export 347 file. ";ESP="Ruta para exportar el archivo 347. "';
      Text1100026@1100046 : TextConst 'ENU=Txt Files|*.txt|All Files|*.*'';ESP=Txt Files|*.txt|All Files|*.*''';
      Text1100027@1100045 : TextConst 'ENU=Telephone Number must be %1 digits without spaces or special characters.;ESP=El Nß de telÇfono debe tener %1 d°gitos sin espacios o caracteres especiales.';
      Text1100028@1100044 : TextConst 'ENU=Previous Declaration Number must be %1 digits without spaces or special characters.;ESP=Previous Declaration Number must be %1 digits without spaces or special characters.';
      Text1100029@1100043 : TextConst 'ENU=Fiscal Year must be %1 digits without spaces or digital characters.;ESP=Fiscal Year must be %1 digits without spaces or digital characters.';
      Text1100030@1100042 : TextConst 'ENU=Incorrect Fiscal Year.;ESP=Incorrect Fiscal Year.';
      Text1100031@1100041 : TextConst 'ENU=At least one %1/%2 does not have any value in the %3 field. \Only Customers/Vendors with a value for %3 will be included in the file. \Do you still want to create the 347 Declaration file?;ESP=Al menos un %1/%2 no tiene valores asignados en el campo %3. \S¢lo se incluir†n en el archivo los clientes/proveedores con un valor en %3.  \®A£n desea crear el archivo del Modelo 347?';
      Text1100032@1100040 : TextConst 'ENU=The process has been aborted. No file will be generated.;ESP=El proceso se ha cancelado. No se crear† ning£n archivo.';
      FileNameControlVisible@19024830 : Boolean INDATASET;
      PreDeclarationNumEditable@19052910 : Boolean INDATASET;

    PROCEDURE StatementNo@1100000(FullText@1100001 : Text[30]) NumberR@1100000 : Text[5];
    BEGIN
      Character := '';
      Position := 0;
      Found := FALSE;
      NumberR := '';

      REPEAT
        Position := Position + 1;
        Character := COPYSTR(FullText,Position,1);
        Found := Character IN ['0'..'9'];
      UNTIL Found OR (Position >= STRLEN(FullText));

      IF NOT Found THEN
        EXIT(NumberR);

      i := 1;
      IsDigit := FALSE;
      REPEAT
        IsDigit := COPYSTR(FullText,Position,1) IN ['0'..'9'];
        IF IsDigit THEN BEGIN
          NumberR := NumberR + COPYSTR(FullText,Position,1);
          FullText := DELSTR(FullText,Position,1);
          i := i + 1 ;
        END;
      UNTIL (i > 5) OR NOT IsDigit;

      EXIT(NumberR);
    END;

    PROCEDURE AmtEuro@1100001(Amount@1100000 : Decimal) : Text[15];
    VAR
      AmtText@1100001 : Text[15];
    BEGIN
      // AmtText := CONVERTSTR(FORMAT(Amount),' ','0');
      // IF STRPOS(AmtText,',') = 0 THEN
      //   AmtText := AmtText + '00'
      // ELSE
      // BEGIN
      //   IF STRLEN(COPYSTR(AmtText,STRPOS(AmtText,','),STRLEN(AmtText))) = 2 THEN
      //     AmtText := AmtText + '0';
      //   AmtText := DELCHR(AmtText,'=',',');
      // END;
      // IF STRPOS(AmtText,'.') = 0 THEN
      //   AmtText := AmtText
      // ELSE
      //   AmtText := DELCHR(AmtText,'=','.');

      Amount := Amount * 100;
      AmtText := CONVERTSTR(FORMAT(Amount),' ','0');
      AmtText := DELCHR(AmtText,'=','.,');

      WHILE STRLEN(AmtText) < 15 DO
        AmtText := '0' + AmtText;
      EXIT(AmtText);
    END;

    PROCEDURE CreateFileHeader@1100002();
    BEGIN
      CLEAR(OutText);



      // IF ContactTelephone <> '' THEN
      //   OutText := OutText + UPPERCASE(PADSTR(ContactTelephone,9,'0'))
      // ELSE
      //   OutText := OutText + PADSTR('',9,'0');
      // IF ContactNameCompany <> '' THEN


      // ELSE
      //   OutText := OutText + PADSTR('',40,' ');

      // IF LocalCurrencyCode = LocalCurrencyCode::EUR THEN
      //   OutText := OutText + '348' + PADSTR('',10,'0') + PADSTR('',2,' ') + PADSTR('',13,'0')
      // ELSE
      //   OutText := OutText + '347' + PADSTR('',10,'0') + PADSTR('',2,' ') + PADSTR('',13,'0');




      // IF LocalCurrencyCode = LocalCurrencyCode::EUR THEN
      //   AmountText := AmtEuro(TotalAmount)
      // ELSE
      //   AmountText := FORMAT(TotalAmount,15,Text1100004);


      OutText :=
        '1347' + FiscalYear + VATRegNo +
         PADSTR(FormatTextName(CompanyInfo.Name),40,' ');

      IF DeclarationMediaType = DeclarationMediaType :: Telematic THEN
        DeclrationMT := 'T'
      ELSE IF DeclarationMediaType = DeclarationMediaType :: "CD-R" THEN
        DeclrationMT := 'C';

      IF ReplacementDeclaration THEN
        ReplacementDecText := 'S'
      ELSE BEGIN
        ReplacementDecText := ' ';
        PreDeclarationNum := '0000000000000';
      END;

      OutText := OutText + DeclrationMT;
      OutText := OutText + ContactTelephone;
      OutText := OutText + PADSTR(FormatTextName(ContactName),40,' ');

      OutText := OutText + PADSTR(DeclarationNum,13,'0');

      AmountText := AmtEuro(TotalAmount);

      OutText :=
         OutText + PADSTR('',1,' ') + ReplacementDecText + PreDeclarationNum +
         CONVERTSTR(FORMAT(Acum,9,Text1100004),' ','0') + CONVERTSTR(AmountText,' ','0') +
         PADSTR('',9,'0') + PADSTR('',15,'0') + PADSTR('',317,' ');

      OutFile.WRITE(OutText);
    END;

    PROCEDURE GetFilterStringFromColumnGLAcc@1100003();
    VAR
      GLAccCode@1100000 : Text[250];
      Position@1100001 : Integer;
    BEGIN
      GLAccCode := ColumnGLAcc;
      REPEAT
        Position := STRPOS(GLAccCode,';');
        IF GLAccCode <> '' THEN BEGIN
          IF Position <> 0 THEN BEGIN
            FilterString := FilterString + COPYSTR(GLAccCode,1,Position - 1);
            GLAccCode := COPYSTR(GLAccCode,Position + 1);
          END ELSE BEGIN
            FilterString := FilterString + COPYSTR(GLAccCode,1);
            GLAccCode := '';
          END;
          IF GLAccCode <> '' THEN
            FilterString := FilterString + '|';
        END;
      UNTIL GLAccCode = '';
    END;

    PROCEDURE CheckExcludedGLAccount@1100004() : Boolean;
    VAR
      GLAcc@1100000 : Record 15;
    BEGIN
      GLAcc.RESET;
      GLAcc.SETFILTER("No.",FilterString);
      GLAcc.SETRANGE("Ignore in 347 Report",TRUE);
      IF GLAcc.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE RetrieveGLAccount@1100005(StringFilter@1100000 : Text[250]) NoOfAcc : Integer;
    VAR
      CommaPos@1100001 : Integer;
      j@1100002 : Integer;
    BEGIN
      CommaPos := 1;
      j := 1;
      WHILE CommaPos <> 0 DO BEGIN
        CommaPos := STRPOS(StringFilter, '|');
        IF CommaPos = 0 THEN BEGIN
          FilterArray[j] := StringFilter;
        END ELSE BEGIN
          FilterArray[j] := COPYSTR(StringFilter,1, CommaPos-1);
          StringFilter := DELSTR(StringFilter, 1, CommaPos);
        END;
        j += 1;
      END;
      NoOfAcc := j - 1;
    END;

    PROCEDURE FormatTextName@1100007(NameString@1100000 : Text[50]) Result@1100001 : Text[50];
    VAR
      TempString@1100002 : Text[50];
      TempString1@1100003 : Text[1];
    BEGIN
      CLEAR(Result);

      TempString := CONVERTSTR(UPPERCASE(NameString),'∑µ∂«é‘ê“”ﬁ÷◊ÿ„‡‚ÂôÎÈÍöÌù•Äß¶','AAAAAEEEEIIIIOOOOOUUUUYO—«  ');
      IF (STRLEN(TempString) > 0) THEN
        REPEAT
          TempString1 := COPYSTR(TempString,1,1);
          IF TempString1 IN ['A'..'Z','0'..'9','—','«'] THEN
            Result := Result + TempString1
          ELSE
            Result := Result + ' ';
          TempString := DELSTR(TempString,1,1);
        UNTIL STRLEN(TempString) = 0;

      EXIT(Result);
    END;

    PROCEDURE GetCountyCode@1100011(IsCustomer@1100001 : Boolean);
    VAR
      PostCode@1100000 : Record 225;
    BEGIN
      CVCountryCode := PADSTR('',2,' ');
      IF IsCustomer THEN BEGIN
        PostCode347 := PADSTR(StatementNo(Customer."Post Code"),5,' ');
        IF Customer."Country/Region Code" <> CountryCode THEN BEGIN
          CVCountryCode := COPYSTR(Customer."Country/Region Code",1,2);
          CountyCode := '99';
        END ELSE BEGIN
          IF PostCode.GET(Customer."Post Code",Customer.City) AND (PostCode."County Code" <> '') THEN
            CountyCode := PostCode."County Code"
          ELSE
            CountyCode := COPYSTR(PostCode347,1,2);
        END;
      END ELSE BEGIN
        PostCode347 := PADSTR(StatementNo(Vendor."Post Code"),5,' ');
        IF Vendor."Country/Region Code" <> CountryCode THEN BEGIN
          CVCountryCode := COPYSTR(Vendor."Country/Region Code",1,2);
          CountyCode := '99';
        END ELSE BEGIN
          IF PostCode.GET(Vendor."Post Code",Vendor.City) AND (PostCode."County Code" <> '') THEN
            CountyCode := PostCode."County Code"
          ELSE
            CountyCode := COPYSTR(PostCode347,1,2);
        END;
      END;
    END;

    PROCEDURE CheckSameVATRegNo@1100006(IsCustomer@1100001 : Boolean) Amt : Decimal;
    VAR
      VATEntry3@1100000 : Record 254;
    BEGIN
      VATEntry3.SETCURRENTKEY(Type,"Country/Region Code","VAT Registration No.");
      VATEntry3.SETRANGE(Type,VATEntry3.Type::Sale);
      VATEntry3.SETRANGE("Country/Region Code",CountryCode);
      IF IsCustomer THEN BEGIN
        VATEntry3.SETRANGE("VAT Registration No.",Customer."VAT Registration No.");
        VATEntry3.SETFILTER("Bill-to/Pay-to No.",'<>%1', Customer."No.");
      END ELSE BEGIN
        VATEntry3.SETRANGE("VAT Registration No.",Vendor."VAT Registration No.");
        VATEntry3.SETFILTER("Bill-to/Pay-to No.",'<>%1', Vendor."No.");
      END;
      VATEntry3.SETRANGE("Posting Date",FromDate,ToDate);
      IF VATEntry3.FINDFIRST THEN
        REPEAT
          Amt := ABS(Amt + VATEntry3.Base + VATEntry3.Amount);
        UNTIL VATEntry3.NEXT = 0;
      EXIT(Amt);
    END;

    LOCAL PROCEDURE ReplacementDeclarationOnPush@19071419();
    BEGIN
      IF ReplacementDeclaration THEN
        PreDeclarationNumEditable := TRUE
      ELSE
        PreDeclarationNumEditable := FALSE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
