OBJECT Report 1496 Suggest Bank Acc. Recon. Lines
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Bank Acc. Recon. Lines;
               ESP=Proponer l¡neas conciliaci¢n];
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table270;
        DataItemTableView=SORTING(No.);
        OnPreDataItem=BEGIN
                        IF EndDate = 0D THEN
                          ERROR(Text000);

                        BankAccReconLine.SETRANGE("Bank Account No.",BankAccRecon."Bank Account No.");
                        BankAccReconLine.SETRANGE("Statement No.",BankAccRecon."Statement No.");
                        IF NOT BankAccReconLine.FIND('+') THEN BEGIN
                          BankAccReconLine."Bank Account No." := BankAccRecon."Bank Account No.";
                          BankAccReconLine."Statement No." := BankAccRecon."Statement No.";
                          BankAccReconLine."Statement Line No." := 0;
                        END;

                        SETRANGE("No.",BankAccRecon."Bank Account No.");
                      END;

        OnAfterGetRecord=BEGIN
                           BankAccLedgEntry.RESET;
                           BankAccLedgEntry.SETCURRENTKEY("Bank Account No.","Posting Date");
                           BankAccLedgEntry.SETRANGE("Bank Account No.","No.");
                           BankAccLedgEntry.SETRANGE("Posting Date",StartDate,EndDate);
                           BankAccLedgEntry.SETRANGE(Open,TRUE);
                           BankAccLedgEntry.SETRANGE("Statement Status",BankAccLedgEntry."Statement Status"::Open);
                           EOFBankAccLedgEntries := NOT BankAccLedgEntry.FIND('-');

                           IF IncludeChecks THEN BEGIN
                             CheckLedgEntry.RESET;
                             CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Check Date");
                             CheckLedgEntry.SETRANGE("Bank Account No.","No.");
                             CheckLedgEntry.SETRANGE("Check Date",StartDate,EndDate);
                             CheckLedgEntry.SETFILTER(
                               "Entry Status",'%1|%2',CheckLedgEntry."Entry Status"::Posted,
                               CheckLedgEntry."Entry Status"::"Financially Voided");
                             CheckLedgEntry.SETRANGE(Open,TRUE);
                             CheckLedgEntry.SETRANGE("Statement Status",BankAccLedgEntry."Statement Status"::Open);
                             EOFCheckLedgEntries := NOT CheckLedgEntry.FIND('-');
                           END;

                           WHILE (NOT EOFBankAccLedgEntries) OR (IncludeChecks AND (NOT EOFCheckLedgEntries)) DO BEGIN
                             CASE TRUE OF
                               NOT IncludeChecks:
                                 BEGIN
                                   EnterBankAccLine(BankAccLedgEntry);
                                   EOFBankAccLedgEntries := BankAccLedgEntry.NEXT = 0;
                                 END;
                               (NOT EOFBankAccLedgEntries) AND (NOT EOFCheckLedgEntries) AND
                               (BankAccLedgEntry."Posting Date" <= CheckLedgEntry."Check Date"):
                                 BEGIN
                                   CheckLedgEntry2.RESET;
                                   CheckLedgEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
                                   CheckLedgEntry2.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
                                   CheckLedgEntry2.SETRANGE(Open,TRUE);
                                   IF NOT CheckLedgEntry2.FIND('-') THEN
                                     EnterBankAccLine(BankAccLedgEntry);
                                   EOFBankAccLedgEntries := BankAccLedgEntry.NEXT = 0;
                                 END;
                               (NOT EOFBankAccLedgEntries) AND (NOT EOFCheckLedgEntries) AND
                               (BankAccLedgEntry."Posting Date" > CheckLedgEntry."Check Date"):
                                 BEGIN
                                   EnterCheckLine(CheckLedgEntry);
                                   EOFCheckLedgEntries := CheckLedgEntry.NEXT = 0;
                                 END;
                               (NOT EOFBankAccLedgEntries) AND (EOFCheckLedgEntries):
                                 BEGIN
                                   CheckLedgEntry2.RESET;
                                   CheckLedgEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
                                   CheckLedgEntry2.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
                                   CheckLedgEntry2.SETRANGE(Open,TRUE);
                                   IF NOT CheckLedgEntry2.FIND('-') THEN
                                     EnterBankAccLine(BankAccLedgEntry);
                                   EOFBankAccLedgEntries := BankAccLedgEntry.NEXT = 0;
                                 END;
                               (EOFBankAccLedgEntries) AND (NOT EOFCheckLedgEntries):
                                 BEGIN
                                   EnterCheckLine(CheckLedgEntry);
                                   EOFCheckLedgEntries := CheckLedgEntry.NEXT = 0;
                                 END;
                             END;
                           END;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=5060;
      Height=2200;
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;550  ;1650 ;440  ;CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial];
                                                   SourceExpr=StartDate }
      { 2   ;Label        ;220  ;550  ;3080 ;440  ;ParentControl=1 }
      { 3   ;TextBox      ;3410 ;1100 ;1650 ;440  ;CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha final];
                                                   SourceExpr=EndDate }
      { 4   ;Label        ;220  ;1100 ;3080 ;440  ;ParentControl=3 }
      { 5   ;Label        ;0    ;0    ;3300 ;440  ;LeaderDots=No;
                                                   CaptionML=[ENU=Statement Period;
                                                              ESP=Periodo extracto] }
      { 8   ;CheckBox     ;3410 ;1760 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Include Checks;
                                                              ESP=Incluye cheques];
                                                   SourceExpr=IncludeChecks }
      { 9   ;Label        ;0    ;1760 ;3300 ;440  ;ParentControl=8 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 5   ;2   ;Group     ;
                  CaptionML=[ENU=Statement Period;
                             ESP=Periodo extracto] }

      { 1   ;3   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             ESP=Fecha inicial];
                  SourceExpr=StartDate }

      { 3   ;3   ;Field     ;
                  CaptionML=[ENU=Ending Date;
                             ESP=Fecha final];
                  SourceExpr=EndDate }

      { 8   ;2   ;Field     ;
                  CaptionML=[ENU=Include Checks;
                             ESP=Incluye cheques];
                  SourceExpr=IncludeChecks }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Please enter the Ending Date.;ESP=Introduzca la fecha final.';
      BankAccLedgEntry@1001 : Record 271;
      CheckLedgEntry@1002 : Record 272;
      CheckLedgEntry2@1003 : Record 272;
      BankAccRecon@1004 : Record 273;
      BankAccReconLine@1005 : Record 274;
      BankAccSetStmtNo@1006 : Codeunit 375;
      CheckSetStmtNo@1007 : Codeunit 376;
      StartDate@1008 : Date;
      EndDate@1009 : Date;
      IncludeChecks@1010 : Boolean;
      EOFBankAccLedgEntries@1011 : Boolean;
      EOFCheckLedgEntries@1012 : Boolean;

    PROCEDURE SetStmt@1(VAR BankAccRecon2@1000 : Record 273);
    BEGIN
      BankAccRecon := BankAccRecon2;
      EndDate := BankAccRecon."Statement Date";
    END;

    LOCAL PROCEDURE EnterBankAccLine@2(VAR BankAccLedgEntry2@1000 : Record 271);
    BEGIN
      BankAccReconLine.INIT;
      BankAccReconLine."Statement Line No." := BankAccReconLine."Statement Line No." + 10000;
      BankAccReconLine."Transaction Date" := BankAccLedgEntry2."Posting Date";
      BankAccReconLine.Description := BankAccLedgEntry2.Description;
      BankAccReconLine."Document No." := BankAccLedgEntry2."Document No.";
      BankAccReconLine."Statement Amount" := BankAccLedgEntry2."Remaining Amount";
      BankAccReconLine."Applied Amount" := BankAccReconLine."Statement Amount";
      BankAccReconLine.Type := BankAccReconLine.Type::"Bank Account Ledger Entry";
      BankAccReconLine."Applied Entries" := 1;
      BankAccSetStmtNo.SetReconNo(BankAccLedgEntry2,BankAccReconLine);
      BankAccReconLine.INSERT;
    END;

    LOCAL PROCEDURE EnterCheckLine@3(VAR CheckLedgEntry3@1000 : Record 272);
    BEGIN
      BankAccReconLine.INIT;
      BankAccReconLine."Statement Line No." := BankAccReconLine."Statement Line No." + 10000;
      BankAccReconLine."Transaction Date" := CheckLedgEntry3."Check Date";
      BankAccReconLine.Description := CheckLedgEntry3.Description;
      BankAccReconLine."Statement Amount" := -CheckLedgEntry3.Amount;
      BankAccReconLine."Applied Amount" := BankAccReconLine."Statement Amount";
      BankAccReconLine.Type := BankAccReconLine.Type::"Check Ledger Entry";
      BankAccReconLine."Check No." := CheckLedgEntry3."Check No.";
      BankAccReconLine."Applied Entries" := 1;
      CheckSetStmtNo.SetReconNo(CheckLedgEntry3,BankAccReconLine);
      BankAccReconLine.INSERT;
    END;

    PROCEDURE InitializeRequest@4(NewStartDate@1000 : Date;NewEndDate@1001 : Date;NewIncludeChecks@1002 : Boolean);
    BEGIN
      StartDate := NewStartDate;
      EndDate := NewEndDate;
      IncludeChecks := NewIncludeChecks;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
