OBJECT Report 188 Create Reminders
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Reminders;
               ESP=Crear recordatorios];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   OverdueEntriesOnly := TRUE;
                 END;

    OnPreReport=BEGIN
                  CustLedgEntry.COPY(CustLedgEntry2);
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table18;
        DataItemTableView=SORTING(No.);
        OnPreDataItem=VAR
                        SalesSetup@1000 : Record 311;
                      BEGIN
                        IF ReminderHeaderReq."Document Date" = 0D THEN
                          ERROR(Text000,ReminderHeaderReq.FIELDCAPTION("Document Date"));
                        Customer.FILTERGROUP := 2;
                        SETFILTER("Reminder Terms Code",'<>%1','');
                        Customer.FILTERGROUP := 0;
                        NoOfRecords := COUNT;
                        SalesSetup.GET;
                        SalesSetup.TESTFIELD("Reminder Nos.");
                        IF NoOfRecords = 1 THEN
                          Window.OPEN(Text001)
                        ELSE BEGIN
                          Window.OPEN(Text002);
                          OldTime := TIME;
                        END;
                        ReminderHeaderReq."Use Header Level" := "Use Header Level";
                      END;

        OnAfterGetRecord=BEGIN
                           RecordNo := RecordNo + 1;
                           CLEAR(MakeReminder);
                           MakeReminder.Set(Customer,CustLedgEntry,ReminderHeaderReq,OverdueEntriesOnly,IncludeEntriesOnHold);
                           IF NoOfRecords = 1 THEN BEGIN
                             MakeReminder.Code;
                             Customer.MARK := FALSE;
                           END ELSE BEGIN
                             NewTime := TIME;
                             IF (NewTime - OldTime > 100) OR (NewTime < OldTime) THEN BEGIN
                               NewProgress := ROUND(RecordNo / NoOfRecords * 100,1);
                               IF NewProgress <> OldProgress THEN BEGIN
                                 Window.UPDATE(1,NewProgress * 100);
                                 OldProgress := NewProgress;
                               END;
                               OldTime := TIME;
                             END;
                             Customer.MARK := NOT MakeReminder.RUN;
                           END;
                         END;

        OnPostDataItem=BEGIN
                         Window.CLOSE;
                         Customer.MARKEDONLY := TRUE;
                         COMMIT;
                         IF Customer.FIND('-') THEN
                           IF CONFIRM(
                               Text003 +
                               Text004,
                               TRUE)
                           THEN
                             FORM.RUNMODAL(0,Customer);
                       END;

        ReqFilterFields=No.;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table21;
        DataItemTableView=SORTING(Customer No.);
        DataItemVarName=CustLedgEntry2;
        OnPreDataItem=BEGIN
                        CurrReport.BREAK;
                      END;

        ReqFilterFields=Document Type;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=5060;
      Height=3410;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   IF ReminderHeaderReq."Document Date" = 0D THEN BEGIN
                     ReminderHeaderReq."Document Date" := WORKDATE;
                     ReminderHeaderReq."Posting Date" := WORKDATE;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;550  ;1650 ;440  ;CaptionML=[ENU=Document Date;
                                                              ESP=Fecha emisi¢n documento];
                                                   SourceExpr=ReminderHeaderReq."Document Date" }
      { 2   ;Label        ;0    ;550  ;3300 ;440  ;ParentControl=1 }
      { 3   ;TextBox      ;3410 ;0    ;1650 ;440  ;CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro];
                                                   SourceExpr=ReminderHeaderReq."Posting Date" }
      { 4   ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=3 }
      { 5   ;CheckBox     ;3410 ;1540 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Only Entries with Overdue Amounts;
                                                              ESP=S¢lo movs. con importes vencidos];
                                                   SourceExpr=OverdueEntriesOnly }
      { 6   ;Label        ;0    ;1100 ;3300 ;880  ;ParentControl=5;
                                                   VertAlign=Bottom;
                                                   MultiLine=Yes }
      { 7   ;CheckBox     ;3410 ;2860 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Use Header Level;
                                                              ESP=Usar nivel recordatorio];
                                                   SourceExpr="Use Header Level" }
      { 8   ;Label        ;0    ;2860 ;3300 ;440  ;ParentControl=7 }
      { 1102601000;Label  ;0    ;2200 ;3300 ;440  ;CaptionML=[ENU=Include Entries On Hold;
                                                              ESP=Incluir movimientos en espera] }
      { 1102601001;CheckBox;3410;2200 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Only Entries with Overdue Amounts;
                                                              ESP=S¢lo movs. con importes vencidos];
                                                   SourceExpr=IncludeEntriesOnHold }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF ReminderHeaderReq."Document Date" = 0D THEN BEGIN
                     ReminderHeaderReq."Document Date" := WORKDATE;
                     ReminderHeaderReq."Posting Date" := WORKDATE;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Posting Date;
                             ESP=Fecha registro];
                  SourceExpr=ReminderHeaderReq."Posting Date" }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Document Date;
                             ESP=Fecha emisi¢n documento];
                  SourceExpr=ReminderHeaderReq."Document Date" }

      { 5   ;2   ;Field     ;
                  CaptionML=[ENU=Only Entries with Overdue Amounts;
                             ESP=S¢lo movs. con importes vencidos];
                  SourceExpr=OverdueEntriesOnly;
                  MultiLine=Yes }

      { 1102601001;2;Field  ;
                  CaptionML=[ENU=Include Entries On Hold;
                             ESP=Incluir movimientos en espera];
                  SourceExpr=IncludeEntriesOnHold }

      { 7   ;2   ;Field     ;
                  CaptionML=[ENU=Use Header Level;
                             ESP=Usar nivel recordatorio];
                  SourceExpr="Use Header Level" }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be specified.;ESP=Se debe indicar %1.';
      Text001@1001 : TextConst 'ENU=Making reminders...;ESP=Realizando recordatorios...';
      Text002@1002 : TextConst 'ENU=Making reminders @1@@@@@@@@@@@@@;ESP=Realizando recordatorios @1@@@@@@@@@@@@@';
      Text003@1003 : TextConst 'ENU=It was not possible to create reminders for some of the selected customers.\\;ESP=No se han realizado recordatorios para algunos de los clientes seleccionados.\\';
      Text004@1004 : TextConst 'ENU=Do you want to see these customers?;ESP=¨Confirma que desea ver dichos clientes?';
      CustLedgEntry@1005 : Record 21;
      ReminderHeaderReq@1006 : Record 295;
      MakeReminder@1007 : Codeunit 392;
      Window@1008 : Dialog;
      NoOfRecords@1009 : Integer;
      RecordNo@1010 : Integer;
      NewProgress@1011 : Integer;
      OldProgress@1012 : Integer;
      NewTime@1013 : Time;
      OldTime@1014 : Time;
      OverdueEntriesOnly@1015 : Boolean;
      "Use Header Level"@1016 : Boolean;
      IncludeEntriesOnHold@1102601000 : Boolean;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
