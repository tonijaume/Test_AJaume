OBJECT Report 99001023 Get Action Messages
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Get Action Messages;
               ESP=Traer mensajes acci¢n];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  Window.OPEN(
                    '#1##########################\\' +
                    Text000);
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table27;
        DataItemTableView=SORTING(Low-Level Code)
                          WHERE(Order Tracking Policy=CONST(Tracking & Action Msg.));
        OnPreDataItem=BEGIN
                        Item.COPYFILTER("Variant Filter",ActionMessageEntry."Variant Code");
                        Item.COPYFILTER("Location Filter",ActionMessageEntry."Location Code");
                        Item.COPYFILTER("Bin Filter",ActionMessageEntry."Bin Code");

                        ReqLineExtern.SETCURRENTKEY(Type,"No.","Variant Code","Location Code");
                        ReqLineExtern.SETRANGE(Type,ReqLineExtern.Type::Item);
                        Item.COPYFILTER("Variant Filter",ReqLineExtern."Variant Code");
                        Item.COPYFILTER("Location Filter",ReqLineExtern."Location Code");

                        ActionMessageEntry.SETCURRENTKEY("Source Type","Source Subtype","Source ID","Source Batch Name",
                          "Source Prod. Order Line","Source Ref. No.");
                        ActionMessageEntry2.SETCURRENTKEY("Reservation Entry");

                        TempItemInOtherWksh.DELETEALL;
                        TempActionMsgEntry.DELETEALL;
                        TempReqLineList.DELETEALL;
                        TempPlanningCompList.DELETEALL;

                        ManufacturingSetup.GET;
                      END;

        OnAfterGetRecord=BEGIN
                           Window.UPDATE(1,Text001);
                           Window.UPDATE(2,"No.");

                           IF Item."Order Tracking Policy" <> Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
                             CurrReport.SKIP;
                           ReqLineExtern.SETRANGE(Type,ReqLineExtern.Type::Item);
                           ReqLineExtern.SETRANGE("No.",Item."No.");
                           IF ReqLineExtern.FIND('-') THEN BEGIN
                             TempItemInOtherWksh := Item;
                             TempItemInOtherWksh.INSERT;
                             CurrReport.SKIP;
                           END;

                           ActionMessageEntry.SETRANGE("Item No.",Item."No.");
                           IF ActionMessageEntry.FIND('-') THEN
                             REPEAT
                               ActionMessageEntry.SETRANGE("Source Type",ActionMessageEntry."Source Type");
                               ActionMessageEntry.SETRANGE("Source Subtype",ActionMessageEntry."Source Subtype");
                               ActionMessageEntry.SETRANGE("Source ID",ActionMessageEntry."Source ID");
                               ActionMessageEntry.SETRANGE("Source Batch Name",ActionMessageEntry."Source Batch Name");
                               ActionMessageEntry.SETRANGE("Source Prod. Order Line",ActionMessageEntry."Source Prod. Order Line");
                               ActionMessageEntry.SETRANGE("Source Ref. No.",ActionMessageEntry."Source Ref. No.");
                               ActionMessageEntry.SETRANGE("Location Code",ActionMessageEntry."Location Code");
                               ActionMessageEntry.SETRANGE("Bin Code",ActionMessageEntry."Bin Code");
                               ActionMessageEntry.SETRANGE("Variant Code",ActionMessageEntry."Variant Code");
                               IF ActionMessageEntry."Source ID" = '' THEN BEGIN
                                 TempNewActionMsgEntry.DELETEALL;
                                 REPEAT
                                   TrkgReservEntry.GET(ActionMessageEntry."Reservation Entry",FALSE);
                                   IF TempNewActionMsgEntry.GET(
                                        TrkgReservEntry."Shipment Date" - 01011900D) THEN BEGIN // Generate Entry No. in date order.
                                     TempNewActionMsgEntry.Quantity += ActionMessageEntry.Quantity;
                                     TempNewActionMsgEntry.MODIFY;
                                   END ELSE BEGIN
                                     TempNewActionMsgEntry := ActionMessageEntry;
                                     TempNewActionMsgEntry."Entry No." := TrkgReservEntry."Shipment Date" - 01011900D;
                                     TempNewActionMsgEntry."New Date" := TrkgReservEntry."Shipment Date";
                                     TempNewActionMsgEntry.INSERT;
                                   END;
                                 UNTIL ActionMessageEntry.NEXT = 0;

                                 TempNewActionMsgEntry.FIND('-');
                                 REPEAT
                                   TempActionMsgEntry := TempNewActionMsgEntry;
                                   NextEntryNo := NextEntryNo + 1;
                                   TempActionMsgEntry."Entry No." := NextEntryNo;
                                   TempActionMsgEntry.INSERT;
                                 UNTIL TempNewActionMsgEntry.NEXT = 0;
                               END ELSE BEGIN
                                 IF ActionMessageEntry.FIND('+') THEN
                                   UpdateActionMsgList(ActionMessageEntry."Source Type",ActionMessageEntry."Source Subtype",
                                     ActionMessageEntry."Source ID",ActionMessageEntry."Source Batch Name",
                                     ActionMessageEntry."Source Prod. Order Line",ActionMessageEntry."Source Ref. No.",
                                     ActionMessageEntry."Location Code",ActionMessageEntry."Bin Code",
                                     ActionMessageEntry."Variant Code",ActionMessageEntry."Item No.",0D);
                               END;
                               ActionMessageEntry.SETRANGE("Source Type");
                               ActionMessageEntry.SETRANGE("Source Subtype");
                               ActionMessageEntry.SETRANGE("Source ID");
                               ActionMessageEntry.SETRANGE("Source Batch Name");
                               ActionMessageEntry.SETRANGE("Source Prod. Order Line");
                               ActionMessageEntry.SETRANGE("Source Ref. No.");
                               ActionMessageEntry.SETRANGE("Location Code");
                               ActionMessageEntry.SETRANGE("Bin Code");
                               ActionMessageEntry.SETRANGE("Variant Code");
                             UNTIL ActionMessageEntry.NEXT = 0;
                         END;

        OnPostDataItem=BEGIN
                         IF TempItemInOtherWksh.FIND('-') THEN BEGIN
                           Window.CLOSE;
                           IF CONFIRM(Text002 +
                                Text003 +
                                Text004)
                           THEN
                             FORM.RUNMODAL(0,TempItemInOtherWksh);
                           IF NOT CONFIRM(Text005) THEN
                             ERROR(Text006);
                           Window.OPEN(
                             '#1##########################\\' +
                             Text000);
                         END;

                         Window.UPDATE(1,Text007);

                         TempActionMsgEntry.RESET;
                         PlanningLinesInserted := FALSE;
                         IF NOT TempActionMsgEntry.FIND('-') THEN
                           ERROR(Text008);

                         REPEAT
                           GetActionMessages(TempActionMsgEntry);
                         UNTIL TempActionMsgEntry.NEXT = 0;

                         IF NOT PlanningLinesInserted THEN
                           ERROR(Text008);

                         // Dynamic tracking is run for the handled Planning Lines:
                         IF TempReqLineList.FIND('-') THEN
                           REPEAT
                             ReservMgt.SetReqLine(TempReqLineList);
                             ReservMgt.AutoTrack(TempReqLineList."Net Quantity (Base)");
                           UNTIL TempReqLineList.NEXT = 0;

                         // Dynamic tracking is run for the handled Planning Components:
                         IF TempPlanningCompList.FIND('-') THEN
                           REPEAT
                             ReservMgt.SetPlanningComponent(TempPlanningCompList);
                             ReservMgt.AutoTrack(TempPlanningCompList."Net Quantity (Base)");
                           UNTIL TempPlanningCompList.NEXT = 0;
                       END;

        ReqFilterFields=No.,Search Description;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=4620;
      SaveValues=Yes;
    }
    CONTROLS
    {
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Item No.  #2##################;ESP=Prod. n§  #2##################';
      Text001@1001 : TextConst 'ENU=Building action message list...;ESP=Creando lista mensajes acci¢n...';
      Text002@1002 : TextConst 'ENU=Some items within the filter settings are already in existing planning lines.\;ESP=Algunos productos del filtro ya se encuentran en las l¡neas de planif. exist.\';
      Text003@1003 : TextConst 'ENU=The program will not process any action messages that are related to these items.\\;ESP=El programa no procesar  ning£n mensaje de acci¢n relacionado con este art¡culo.\\';
      Text004@1004 : TextConst 'ENU=Do you want to see a list of these unprocessed items?;ESP=¨Confirma que desea ver una lista de estos productos no procesados?';
      Text005@1005 : TextConst 'ENU=Do you want to continue?;ESP=¨Confirma que desea continuar?';
      Text006@1006 : TextConst 'ENU=The process has been cancelled.;ESP=El proceso ha sido cancelado.';
      Text007@1007 : TextConst 'ENU=Processing action messages...;ESP=Procesando mensajes acci¢n...';
      Text008@1008 : TextConst 'ENU=No action messages exist.;ESP=No hay mensajes acci¢n.';
      Text009@1009 : TextConst 'ENU=GetActionMessages: Illegal Action Message relation.;ESP=TraerMensajesAcc: Relaci¢n incorrecta mens. acci¢n.';
      ReqLineExtern@1010 : Record 246;
      TrkgReservEntry@1011 : Record 337;
      TempItemInOtherWksh@1012 : TEMPORARY Record 27;
      TempActionMsgEntry@1013 : TEMPORARY Record 99000849;
      TempNewActionMsgEntry@1014 : TEMPORARY Record 99000849;
      ActionMessageEntry@1015 : Record 99000849;
      ActionMessageEntry2@1016 : Record 99000849;
      ManufacturingSetup@1017 : Record 99000765;
      TempPlanningCompList@1018 : TEMPORARY Record 99000829;
      TempReqLineList@1019 : TEMPORARY Record 246;
      SKU@1020 : Record 5700;
      InvtProfileOffsetting@1021 : Codeunit 99000854;
      ReservMgt@1022 : Codeunit 99000845;
      GetPlanningParameters@1023 : Codeunit 99000855;
      Window@1024 : Dialog;
      NextEntryNo@1025 : Integer;
      CurrTemplateName@1026 : Code[10];
      CurrWorksheetName@1027 : Code[10];
      PlanningLinesInserted@1028 : Boolean;

    PROCEDURE SetTemplAndWorksheet@2(TemplateName@1000 : Code[10];WorksheetName@1001 : Code[10]);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
    END;

    PROCEDURE UpdateActionMsgList@1(ForType@1000 : Integer;ForSubtype@1001 : Integer;ForID@1002 : Code[20];ForBatchName@1003 : Code[10];ForProdOrderLine@1004 : Integer;ForRefNo@1005 : Integer;ForLocation@1006 : Code[10];ForBin@1007 : Code[10];ForVariant@1008 : Code[10];ForItem@1009 : Code[20];OrderDate@1010 : Date);
    BEGIN
      TempActionMsgEntry.SETRANGE("Source Type",ForType);
      TempActionMsgEntry.SETRANGE("Source Subtype",ForSubtype);
      TempActionMsgEntry.SETRANGE("Source ID",ForID);
      TempActionMsgEntry.SETRANGE("Source Batch Name",ForBatchName);
      TempActionMsgEntry.SETRANGE("Source Prod. Order Line",ForProdOrderLine);
      TempActionMsgEntry.SETRANGE("Source Ref. No.",ForRefNo);
      TempActionMsgEntry.SETRANGE("Location Code",ForLocation);
      TempActionMsgEntry.SETRANGE("Bin Code",ForBin);
      TempActionMsgEntry.SETRANGE("Variant Code",ForVariant);
      TempActionMsgEntry.SETRANGE("Item No.",ForItem);
      TempActionMsgEntry.SETRANGE("New Date",OrderDate);

      IF TempActionMsgEntry.FIND('-') THEN
        EXIT;

      TempActionMsgEntry."Source Type" := ForType;
      TempActionMsgEntry."Source Subtype" := ForSubtype;
      TempActionMsgEntry."Source ID" := ForID;
      TempActionMsgEntry."Source Batch Name" := ForBatchName;
      TempActionMsgEntry."Source Prod. Order Line" := ForProdOrderLine;
      TempActionMsgEntry."Source Ref. No." := ForRefNo;
      TempActionMsgEntry."Location Code" := ForLocation;
      TempActionMsgEntry."Bin Code" := ForBin;
      TempActionMsgEntry."Variant Code" := ForVariant;
      TempActionMsgEntry."Item No." := ForItem;
      TempActionMsgEntry."New Date" := OrderDate;

      NextEntryNo := NextEntryNo + 1;

      TempActionMsgEntry."Entry No." := NextEntryNo;
      TempActionMsgEntry.INSERT;
    END;

    PROCEDURE GetActionMessages@10(ActionMsgEntry@1000 : Record 99000849);
    VAR
      ProdOrderLine@1001 : Record 5406;
      PurchOrderLine@1002 : Record 39;
      ReqLine@1003 : Record 246;
      TransLine@1004 : Record 5741;
      InsertNew@1005 : Boolean;
    BEGIN
      IF ActionMsgEntry."Source ID" = '' THEN BEGIN // Not related to existing order.
        ActionMessageEntry := ActionMsgEntry;
      END ELSE BEGIN
        ActionMessageEntry.SETRANGE("Source Type",ActionMsgEntry."Source Type");
        ActionMessageEntry.SETRANGE("Source Subtype",ActionMsgEntry."Source Subtype");
        ActionMessageEntry.SETRANGE("Source ID",ActionMsgEntry."Source ID");
        ActionMessageEntry.SETRANGE("Source Batch Name",ActionMsgEntry."Source Batch Name");
        ActionMessageEntry.SETRANGE("Source Prod. Order Line",ActionMsgEntry."Source Prod. Order Line");
        ActionMessageEntry.SETRANGE("Source Ref. No.",ActionMsgEntry."Source Ref. No.");
        ActionMessageEntry.SETRANGE("Location Code",ActionMsgEntry."Location Code");
        ActionMessageEntry.SETRANGE("Bin Code",ActionMsgEntry."Bin Code");
        ActionMessageEntry.SETRANGE("Variant Code",ActionMsgEntry."Variant Code");
        ActionMessageEntry.SETRANGE("Item No.",ActionMsgEntry."Item No.");
        IF NOT ActionMessageEntry.FIND('-') THEN
          EXIT;
      END;

      WITH ActionMessageEntry DO BEGIN
        GetPlanningParameters.AtSKU(SKU,"Item No.","Variant Code","Location Code");
        InsertNew := FALSE;
        ReqLine."Worksheet Template Name" := CurrTemplateName;
        ReqLine."Journal Batch Name" := CurrWorksheetName;

        ReqLine."Line No." += 10000;
        WHILE NOT ReqLine.INSERT DO
          ReqLine."Line No." += 10000;
        CASE "Source Type" OF
          DATABASE::"Prod. Order Line":
            BEGIN
              IF ProdOrderLine.GET("Source Subtype","Source ID","Source Prod. Order Line") THEN
                ReqLine.GetProdOrderLine(ProdOrderLine)
              ELSE BEGIN
                ReqLine.TransferFromActionMessage(ActionMessageEntry);
                InsertNew := TRUE;
              END;
            END;
          DATABASE::"Purchase Line":
            BEGIN
              IF PurchOrderLine.GET("Source Subtype","Source ID","Source Ref. No.") THEN
                ReqLine.GetPurchOrderLine(PurchOrderLine)
              ELSE BEGIN
                ReqLine.TransferFromActionMessage(ActionMessageEntry);
                InsertNew := TRUE;
              END;
            END;
          DATABASE::"Transfer Line":
            BEGIN
              IF TransLine.GET("Source ID","Source Ref. No.") THEN
                ReqLine.GetTransLine(TransLine)
              ELSE BEGIN
                ReqLine.TransferFromActionMessage(ActionMessageEntry);
                InsertNew := TRUE;
              END;
            END;
          ELSE
            ERROR(Text009)
        END;

        Window.UPDATE(2,ReqLine."No.");

        IF ActionMsgEntry."Source ID" = '' THEN BEGIN
          Quantity := ActionMsgEntry.Quantity;
          Type := Type::New;
          ReqLine."Due Date" := ActionMsgEntry."New Date";
          ReqLine."Ending Date" := ReqLine."Due Date" - 1;
        END ELSE
          SumUp(ActionMessageEntry);

        IF Quantity < 0 THEN
          IF SKU."Lot Size" > 0 THEN
            IF ManufacturingSetup."Dampener (% of Lot Size)" > 0 THEN
              IF ManufacturingSetup."Dampener (% of Lot Size)" * SKU."Lot Size" / 100 >= ABS(Quantity) THEN
                Quantity := 0;
        IF (Quantity = 0) AND ("New Date" = 0D) THEN
          EXIT;
        ReqLine."Original Quantity" := ReqLine.Quantity;
        ReqLine."Quantity (Base)" += Quantity;
        ReqLine.Quantity := ROUND(ReqLine."Quantity (Base)" / ReqLine."Qty. per Unit of Measure",0.00001);
        ReqLine."Remaining Quantity" := ReqLine.Quantity - ReqLine."Finished Quantity";
        ReqLine."Remaining Qty. (Base)" :=
          ROUND(ReqLine."Remaining Quantity" / ReqLine."Qty. per Unit of Measure",0.00001);

        IF InsertNew THEN
          Type := Type::New;
        IF "New Date" <> 0D THEN BEGIN
          IF Type <> Type::New THEN
            ReqLine."Original Due Date" := ReqLine."Due Date";
          ReqLine."Due Date" := "New Date";
          ReqLine."Starting Date" := 0D;

          IF BoundToComponent THEN BEGIN
            ReqLine."Ending Date" := ComponentDueDate;
            ReqLine."Ending Time" := ComponentDueTime;
          END ELSE BEGIN
            ReqLine."Ending Date" := 0D;
          END;
        END;

        IF ReqLine.Quantity = 0 THEN BEGIN
          ReqLine."Action Message" := ReqLine."Action Message"::Cancel;
        END ELSE BEGIN
          ReqLine."Action Message" := Type;
        END;

        ReqLine."Planning Line Origin" := ReqLine."Planning Line Origin"::"Action Message";
        ReqLine."Accept Action Message" := TRUE;
        ReqLine.MODIFY;
        IF ReqLine."Starting Date" = 0D THEN
          ReqLine."Starting Date" := ReqLine."Due Date";
        IF ReqLine."Ending Date" = 0D THEN
          ReqLine."Ending Date" := ReqLine."Due Date" - 1;
        ReqLine.BlockDynamicTracking(TRUE);
        InvtProfileOffsetting.GetRouting(ReqLine,1);
        InvtProfileOffsetting.GetComponents(ReqLine,1,FALSE);
        IF ReqLine."Original Due Date" <> 0D THEN
          IF NOT (ReqLine."Action Message" IN [ReqLine."Action Message"::Reschedule,
                                               ReqLine."Action Message"::"Resched. & Chg. Qty."])
          THEN
            ReqLine."Original Due Date" := 0D;
        IF ReqLine."Original Quantity" = ReqLine.Quantity THEN BEGIN
          IF ReqLine."Action Message" = ReqLine."Action Message"::"Resched. & Chg. Qty." THEN
            ReqLine."Action Message" := ReqLine."Action Message"::Reschedule;
        END;
        ReqLine.VALIDATE(Quantity);
        IF ReqLine."Action Message" = ReqLine."Action Message"::Reschedule THEN
          ReqLine."Original Quantity" := 0;
        ReqLine.MODIFY;
        CLEAR(ReqLineExtern);

        // Retrieve temporary list of Planning Components handled:
        InvtProfileOffsetting.GetPlanningCompList(TempPlanningCompList);

        // Save inserted Planning Line in temporary list:
        TempReqLineList := ReqLine;
        TempReqLineList.INSERT;

        PlanningLinesInserted := TRUE;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
