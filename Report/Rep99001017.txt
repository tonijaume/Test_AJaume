OBJECT Report 99001017 Calculate Plan - Plan. Wksh.
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Calculate Plan - Plan. Wksh.;
               ESP=Calcular plan - Hoja planif.];
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table27;
        DataItemTableView=SORTING(Low-Level Code);
        OnPreDataItem=BEGIN
                        OpenWindow;
                        CLEAR(CalcItemPlan);
                        CalcItemPlan.SetTemplAndWorksheet(CurrTemplateName,CurrWorksheetName,NetChange);
                        CalcItemPlan.SetParm(UseForecast,ExcludeForecastBefore,Item);
                        CalcItemPlan.Initialize(FromDate,ToDate,MPS,MRP);

                        SetAtStartPosition := TRUE;

                        ReqLine.SETRANGE("Worksheet Template Name",CurrTemplateName);
                        ReqLine.SETRANGE("Journal Batch Name",CurrWorksheetName);
                        PlanningErrorLog.SETRANGE("Worksheet Template Name",CurrTemplateName);
                        PlanningErrorLog.SETRANGE("Journal Batch Name",CurrWorksheetName);
                        IF PlanningErrorLog.FIND('-') AND ReqLine.FIND('-') THEN
                          SetAtStartPosition := NOT CONFIRM(Text009 + Text010);

                        PlanningErrorLog.DELETEALL;
                        CLEARLASTERROR;

                        COMMIT;
                      END;

        OnAfterGetRecord=VAR
                           ErrorText@1000 : Text[1000];
                         BEGIN
                           UpdateWindow;

                           IF NOT SetAtStartPosition THEN BEGIN
                             SetAtStartPosition := TRUE;
                             Item.GET(PlanningErrorLog."Item No.");
                             Item.FIND('=<>');
                           END;

                           IF NoPlanningResiliency THEN BEGIN
                             CalcItemPlan.RUN(Item);
                             CounterOK := CounterOK + 1;
                           END ELSE BEGIN
                             CalcItemPlan.SetResiliencyOn;
                             IF CalcItemPlan.RUN(Item) THEN
                               CounterOK := CounterOK + 1
                             ELSE
                               IF NOT CalcItemPlan.GetResiliencyError(PlanningErrorLog) THEN BEGIN
                                 ErrorText := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(ErrorText));
                                 IF ErrorText = '' THEN
                                   ErrorText := Text011
                                 ELSE
                                   CLEARLASTERROR;
                                 PlanningErrorLog.SetJnlBatch(CurrTemplateName,CurrWorksheetName,"No.");
                                 PlanningErrorLog.SetError(
                                   STRSUBSTNO(ErrorText,Item.TABLECAPTION,Item."No."),0,GETPOSITION);
                               END;
                           END;

                           COMMIT;
                         END;

        OnPostDataItem=BEGIN
                         CalcItemPlan.Finalize;
                         CloseWindow;
                       END;

        ReqFilterFields=No.,Search Description,Location Filter;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=5390;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   MfgSetup.GET;
                   UseForecast := MfgSetup."Current Production Forecast";
                   IF MfgSetup."Combined MPS/MRP Calculation" THEN BEGIN
                     MPS := TRUE;
                     MRP := TRUE;
                   END ELSE
                     MRP := NOT MPS;
                 END;

    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;1760 ;1650 ;440  ;CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial];
                                                   SourceExpr=FromDate }
      { 2   ;Label        ;0    ;1760 ;3300 ;440  ;ParentControl=1 }
      { 3   ;TextBox      ;3410 ;2310 ;1650 ;440  ;CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha final];
                                                   SourceExpr=ToDate }
      { 4   ;Label        ;0    ;2310 ;3300 ;440  ;ParentControl=3 }
      { 10  ;Label        ;0    ;0    ;3300 ;440  ;LeaderDots=No;
                                                   CaptionML=[ENU=Calculate;
                                                              ESP=Calcular] }
      { 11  ;CheckBox     ;3410 ;550  ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=MPS;
                                                              ESP=MPS];
                                                   SourceExpr=MPS;
                                                   OnValidate=BEGIN
                                                                IF NOT MfgSetup."Combined MPS/MRP Calculation" THEN
                                                                  MRP := NOT MPS
                                                                ELSE
                                                                  IF NOT MPS THEN MRP := TRUE;
                                                              END;
                                                               }
      { 12  ;CheckBox     ;3410 ;1100 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=MRP;
                                                              ESP=MRP];
                                                   SourceExpr=MRP;
                                                   OnValidate=BEGIN
                                                                IF NOT MfgSetup."Combined MPS/MRP Calculation" THEN
                                                                  MPS := NOT MRP
                                                                ELSE
                                                                  IF NOT MRP THEN MPS := TRUE;
                                                              END;
                                                               }
      { 13  ;Label        ;220  ;550  ;3080 ;440  ;ParentControl=11 }
      { 14  ;Label        ;220  ;1100 ;3080 ;440  ;ParentControl=12 }
      { 16  ;CheckBox     ;3410 ;2860 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Stop and Show First Error;
                                                              ESP=Parar y mostrar primer error];
                                                   SourceExpr=NoPlanningResiliency }
      { 17  ;Label        ;0    ;2860 ;3300 ;440  ;ParentControl=16 }
      { 5   ;TextBox      ;3410 ;3520 ;2750 ;440  ;CaptionML=[ENU=Use Forecast;
                                                              ESP=Previsi¢n de uso];
                                                   SourceExpr=UseForecast;
                                                   TableRelation="Production Forecast Name".Name }
      { 6   ;Label        ;0    ;3520 ;3300 ;440  ;ParentControl=5 }
      { 7   ;TextBox      ;3410 ;4070 ;1650 ;440  ;CaptionML=[ENU=Exclude Forecast Before;
                                                              ESP=No incluir en la previsi¢n fechas anteriores al];
                                                   SourceExpr=ExcludeForecastBefore }
      { 8   ;Label        ;0    ;4070 ;3300 ;440  ;ParentControl=7 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   MfgSetup.GET;
                   UseForecast := MfgSetup."Current Production Forecast";
                   IF MfgSetup."Combined MPS/MRP Calculation" THEN BEGIN
                     MPS := TRUE;
                     MRP := TRUE;
                   END ELSE
                     MRP := NOT MPS;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 10  ;2   ;Group     ;
                  CaptionML=[ENU=Calculate;
                             ESP=Calcular] }

      { 11  ;3   ;Field     ;
                  CaptionML=[ENU=MPS;
                             ESP=MPS];
                  SourceExpr=MPS;
                  OnValidate=BEGIN
                               IF NOT MfgSetup."Combined MPS/MRP Calculation" THEN
                                 MRP := NOT MPS
                               ELSE
                                 IF NOT MPS THEN MRP := TRUE;
                             END;
                              }

      { 12  ;3   ;Field     ;
                  CaptionML=[ENU=MRP;
                             ESP=MRP];
                  SourceExpr=MRP;
                  OnValidate=BEGIN
                               IF NOT MfgSetup."Combined MPS/MRP Calculation" THEN
                                 MPS := NOT MRP
                               ELSE
                                 IF NOT MRP THEN MPS := TRUE;
                             END;
                              }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             ESP=Fecha inicial];
                  SourceExpr=FromDate }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Ending Date;
                             ESP=Fecha final];
                  SourceExpr=ToDate }

      { 16  ;2   ;Field     ;
                  CaptionML=[ENU=Stop and Show First Error;
                             ESP=Parar y mostrar primer error];
                  SourceExpr=NoPlanningResiliency }

      { 5   ;2   ;Field     ;
                  CaptionML=[ENU=Use Forecast;
                             ESP=Previsi¢n de uso];
                  SourceExpr=UseForecast;
                  TableRelation="Production Forecast Name".Name }

      { 7   ;2   ;Field     ;
                  CaptionML=[ENU=Exclude Forecast Before;
                             ESP=No incluir en la previsi¢n fechas anteriores al];
                  SourceExpr=ExcludeForecastBefore }

    }
  }
  CODE
  {
    VAR
      MfgSetup@1004 : Record 99000765;
      PlanningErrorLog@1018 : Record 5430;
      ReqLine@1021 : Record 246;
      CalcItemPlan@1005 : Codeunit 5431;
      Window@1006 : Dialog;
      Counter@1023 : Integer;
      CounterOK@1017 : Integer;
      NoOfRecords@1012 : Integer;
      NetChange@1009 : Boolean;
      MPS@1003 : Boolean;
      MRP@1002 : Boolean;
      NoPlanningResiliency@1022 : Boolean;
      SetAtStartPosition@1001 : Boolean;
      FromDate@1011 : Date;
      ToDate@1010 : Date;
      ExcludeForecastBefore@1015 : Date;
      Text005@1014 : TextConst 'ENU=Calculating the plan...\\;ESP=Calculando el plan...\\';
      Text006@1025 : TextConst 'ENU=Progress;ESP=Progreso';
      Text007@1024 : TextConst 'ENU=Not all items were planned. A total of %1 items were not planned.;ESP=No se planificaron todos los productos. Faltan %1 productos.';
      Text008@1020 : TextConst 'ENU=There is nothing to plan.;ESP=No hay nada que planificar.';
      CurrTemplateName@1008 : Code[10];
      CurrWorksheetName@1007 : Code[10];
      UseForecast@1013 : Code[10];
      Text009@1016 : TextConst 'ENU=The last time this batch was run, errors were encountered.\;ESP=La £ltima vez que se ejecut¢ este proceso se detectaron errores.\';
      Text010@1019 : TextConst 'ENU=Do you want the batch to continue from where it left off?;ESP=¨Desea continuar el proceso desde donde se interrumpi¢?';
      Text011@1000 : TextConst 'ENU=An unidentified error occurred while planning %1 %2. Recalculate the plan with the option "Stop and Show Error".;ESP=Error no identificado al planificar %1 %2. Vuelva a calcular el plan con la opci¢n "Parar y mostrar error".';

    PROCEDURE SetTemplAndWorksheet@2(TemplateName@1000 : Code[10];WorksheetName@1001 : Code[10];Regenerative@1002 : Boolean);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
      NetChange := NOT Regenerative;
    END;

    PROCEDURE InitializeRequest@3(NewFromDate@1001 : Date;NewToDate@1000 : Date);
    BEGIN
      FromDate := NewFromDate;
      ToDate := NewToDate;

      MfgSetup.GET;
      IF MfgSetup."Combined MPS/MRP Calculation" THEN BEGIN
        MPS := TRUE;
        MRP := TRUE;
      END ELSE
        MRP := NOT MPS;
    END;

    PROCEDURE OpenWindow@5();
    VAR
      Indentation@1000 : Integer;
    BEGIN
      Counter := 0;
      CounterOK := 0;
      NoOfRecords := Item.COUNTAPPROX;
      Indentation := STRLEN(Text006);
      IF STRLEN(Item.FIELDCAPTION("Low-Level Code")) > Indentation THEN
        Indentation := STRLEN(Item.FIELDCAPTION("Low-Level Code"));
      IF STRLEN(Item.FIELDCAPTION("No.")) > Indentation THEN
        Indentation := STRLEN(Item.FIELDCAPTION("No."));

      Window.OPEN(
        Text005 +
        PADSTR(Text006,Indentation) + ' @1@@@@@@@@@@@@@\' +
        PADSTR(Item.FIELDCAPTION("Low-Level Code"),Indentation) + ' #2######\' +
        PADSTR(Item.FIELDCAPTION("No."),Indentation) + ' #3##########');
    END;

    PROCEDURE UpdateWindow@6();
    BEGIN
      Counter := Counter + 1;
      Window.UPDATE(1,ROUND(Counter / NoOfRecords * 10000,1));
      Window.UPDATE(2,Item."Low-Level Code");
      Window.UPDATE(3,Item."No.");
    END;

    PROCEDURE CloseWindow@1();
    BEGIN
      Window.CLOSE;

      IF Counter = 0 THEN
        MESSAGE(Text008);
      IF Counter > CounterOK THEN BEGIN
        MESSAGE(Text007,Counter - CounterOK);
        IF PlanningErrorLog.FIND('-') THEN
          FORM.RUNMODAL(0,PlanningErrorLog);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
