OBJECT Report 189 Suggest Reminder Lines
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Reminder Lines;
               ESP=Proponer l¡neas recordatorio];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CustLedgEntry.COPY(CustLedgEntry2)
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table295;
        DataItemTableView=SORTING(No.);
        ReqFilterHeadingML=[ENU=Reminder;
                            ESP=Recordatorio];
        OnPreDataItem=BEGIN
                        NoOfRecords := COUNT;
                        IF NoOfRecords = 1 THEN
                          Window.OPEN(Text000)
                        ELSE BEGIN
                          Window.OPEN(Text001);
                          OldTime := TIME;
                        END;
                      END;

        OnAfterGetRecord=BEGIN
                           RecordNo := RecordNo + 1;
                           CLEAR(MakeReminder);
                           MakeReminder.SuggestLines("Reminder Header",CustLedgEntry,OverdueEntriesOnly,IncludeEntriesOnHold);
                           IF NoOfRecords = 1 THEN BEGIN
                             MakeReminder.Code;
                             "Reminder Header".MARK := FALSE;
                           END ELSE BEGIN
                             NewTime := TIME;
                             IF (NewTime - OldTime > 100) OR (NewTime < OldTime) THEN BEGIN
                               NewProgress := ROUND(RecordNo / NoOfRecords * 100,1);
                               IF NewProgress <> OldProgress THEN BEGIN
                                 Window.UPDATE(1,NewProgress * 100);
                                 OldProgress := NewProgress;
                               END;
                               OldTime := TIME;
                             END;
                             "Reminder Header".MARK := NOT MakeReminder.RUN;
                           END;
                         END;

        OnPostDataItem=BEGIN
                         COMMIT;
                         Window.CLOSE;
                         "Reminder Header".MARKEDONLY := TRUE;
                         IF "Reminder Header".FIND('-') THEN
                           IF CONFIRM(
                               Text002 +
                               Text003,
                               TRUE)
                           THEN
                             FORM.RUNMODAL(0,"Reminder Header");
                       END;

        ReqFilterFields=No.;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table21;
        DataItemTableView=SORTING(Customer No.);
        DataItemVarName=CustLedgEntry2;
        OnPreDataItem=BEGIN
                        CurrReport.BREAK;
                      END;

        ReqFilterFields=Document Type;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=3850;
      Height=1540;
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1   ;CheckBox     ;3410 ;440  ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Only Entries with Overdue Amounts;
                                                              ESP=S¢lo movs. con importes vencidos];
                                                   SourceExpr=OverdueEntriesOnly }
      { 2   ;Label        ;0    ;0    ;3300 ;880  ;ParentControl=1;
                                                   VertAlign=Bottom;
                                                   MultiLine=Yes }
      { 1102601000;CheckBox;3410;990  ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Only Entries with Overdue Amounts;
                                                              ESP=S¢lo movs. con importes vencidos];
                                                   SourceExpr=IncludeEntriesOnHold }
      { 1102601001;Label  ;0    ;990  ;3300 ;440  ;CaptionML=[ENU=Include Entries On Hold;
                                                              ESP=Incluir movimientos en espera] }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Only Entries with Overdue Amounts;
                             ESP=S¢lo movs. con importes vencidos];
                  SourceExpr=OverdueEntriesOnly;
                  MultiLine=Yes }

      { 1102601000;2;Field  ;
                  CaptionML=[ENU=Include Entries On Hold;
                             ESP=Incluir movimientos en espera];
                  SourceExpr=IncludeEntriesOnHold }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Suggesting lines...;ESP=Proponiendo l¡neas...';
      Text001@1001 : TextConst 'ENU=Suggesting lines @1@@@@@@@@@@@@@;ESP=Proponiendo l¡neas @1@@@@@@@@@@@@@';
      Text002@1002 : TextConst 'ENU=It was not possible to process some of the selected reminders.\\;ESP=No se ha podido procesar alguno de los recordatorios seleccionados.\\';
      Text003@1003 : TextConst 'ENU=Do you want to see these reminders?;ESP=¨Confirma que desea ver dichos recordatorios?';
      CustLedgEntry@1004 : Record 21;
      MakeReminder@1005 : Codeunit 392;
      Window@1006 : Dialog;
      NoOfRecords@1007 : Integer;
      RecordNo@1008 : Integer;
      NewProgress@1009 : Integer;
      OldProgress@1010 : Integer;
      NewTime@1011 : Time;
      OldTime@1012 : Time;
      OverdueEntriesOnly@1013 : Boolean;
      IncludeEntriesOnHold@1102601000 : Boolean;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
