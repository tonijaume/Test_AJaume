OBJECT Report 7010346 Planing Servicios INVISA
{
  OBJECT-PROPERTIES
  {
    Date=06/05/13;
    Time=11:16:49;
    Version List=TRANSFER,INV;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   rPar.FIND('-');
                   rPar.TESTFIELD("Codigo Entradas");
                   rPar.TESTFIELD("Codigo Salidas");
                   //rPar.TESTFIELD("Tiempo entre partes");
                 END;

    OnPostReport=BEGIN
                   Traspasar;
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table7010360;
        DataItemTableView=SORTING(Cod Conductor,Fecha,Tipo Vehiculo);
        OnPreDataItem=BEGIN
                        IF GETFILTER(Parte.Fecha)='' THEN
                          ERROR(Text0005);

                        rTemp.RESET;
                        IF rTemp.FIND('-') THEN
                          rTemp.DELETEALL;

                        rTFechas.RESET;
                        IF rTFechas.FIND('-') THEN
                          rTFechas.DELETEALL;

                        rTempVeh.RESET;
                        IF rTempVeh.FIND('-') THEN
                          rTempVeh.DELETEALL;

                        rTempCond.RESET;
                        IF rTempCond.FIND('-') THEN
                          rTempCond.DELETEALL;

                        // AJS 16.05.2005
                        // Se incluye la posibilidad de que se muestren los partes sin asignar en combinacion con el filtro por tipo de
                        // vehiculo

                        IF wNoAsignados AND (GETFILTER(Parte."Tipo Vehiculo") <> '') THEN
                          Parte.SETFILTER("Tipo Vehiculo", '%1|%2', GETFILTER(Parte."Tipo Vehiculo"), '');

                        window.OPEN('@1@@@@@@@@');
                        wwTotal := COUNTAPPROX;
                        wwCont:=0;
                      END;

        OnAfterGetRecord=BEGIN

                           wwCont+=1;
                           window.UPDATE(1,ROUND(wwCont/wwTotal*10000,1));

                           rTemp := Parte;
                           rTemp."Hora inicio" :=0T;

                           // Buscamos Cual va a ser la hora a condiderar
                           // Si es Entrada la hora del primer vuelo, si es salida o excursion la 1 hora recogida
                           IF Parte."Codigo Servicio" = rPar."Codigo Entradas" THEN BEGIN
                             rSerPar.RESET;
                             rSerPar.SETCURRENTKEY("N§ Parte","Hora Vuelo");
                             rSerPar.SETRANGE("N§ Parte","N§ Parte");
                             IF NOT rSerPar.FIND('-') THEN
                               CurrReport.SKIP;
                             rSerPar.SETFILTER("Hora Vuelo",'<>%1',0T);

                             // AJS 16.05.2005
                             // Hay que recorrer todos los servicios partes porque hay que tener en cuenta que puede haber recogidas de las
                             // 11 de la noche y recogidas de las 12
                             //IF rSerPar.FIND('-') THEN
                             //  rTemp."Hora inicio" := rSerPar."Hora Vuelo";

                             IF rSerPar.FIND('-') THEN BEGIN
                               REPEAT
                                 IF rTemp."Hora inicio" = 0T THEN BEGIN
                                   rTemp."Hora inicio"    := rSerPar."Hora Vuelo";
                                   // rTemp."Origen/Destino" := rSerPar."Punto recogida";
                                 END
                                 ELSE BEGIN
                                   IF (rSerPar."Hora Vuelo" - rTemp."Hora inicio" ) > 43200000 THEN BEGIN
                                     rTemp."Hora inicio"    := rSerPar."Hora Vuelo";
                                     // rTemp."Origen/Destino" := rSerPar."Punto recogida";
                                   END;
                                 END;
                               UNTIL rSerPar.NEXT = 0;
                             END;
                           END
                           ELSE BEGIN
                             rSerPar.RESET;
                             rSerPar.SETCURRENTKEY("N§ Parte","Hora recogida",Letra);
                             rSerPar.SETRANGE("N§ Parte","N§ Parte");
                             IF NOT rSerPar.FIND('-') THEN
                               CurrReport.SKIP;
                             rSerPar.SETFILTER("Hora recogida",'<>%1',0T);

                             // AJS 16.05.2005
                             // Hay que recorrer todos los servicios partes porque hay que tener en cuenta que puede haber recogidas de las
                             // 11 de la noche y recogidas de las 12
                             //IF rSerPar.FIND('-') THEN
                             //  rTemp."Hora inicio" := rSerPar."Hora recogida";
                             // AJF 07/11/08
                             // Si es un parte de recogida usamos la hora de inicio del parte, ya que las horas de recogida de las lineas estan en blanco.
                             IF "Origen creacion" = "Origen creacion"::"Recogida Automatica" THEN BEGIN
                               rTemp."Hora inicio" := "Hora inicio";
                             END;

                             IF rSerPar.FIND('-') THEN BEGIN
                               REPEAT
                                 IF rTemp."Hora inicio" = 0T THEN BEGIN
                                   rTemp."Hora inicio" := rSerPar."Hora recogida";
                                   // rTemp."Origen/Destino" := rSerPar."Punto recogida";
                                 END
                                 ELSE BEGIN
                                   IF (rSerPar."Hora recogida" - rTemp."Hora inicio") > 43200000 THEN BEGIN
                                     rTemp."Hora inicio" := rSerPar."Hora recogida";
                                     // rTemp."Origen/Destino" := rSerPar."Punto recogida";
                                   END;
                                 END;
                               UNTIL rSerPar.NEXT = 0;
                             END;
                           END;

                           // Nos aseguramos que los datos que tenemos en Adultos y Ni¤os soporte son los correctos
                           CALCFIELDS("Adultos transportados","Ni¤os transportados");

                           //-$001Parte."Adultos trans. soporte" := "Adultos transportados";
                           //-$001Parte."Ni¤os trans. soporte"   := "Ni¤os transportados";

                           rTemp."Adultos trans. soporte" := "Adultos transportados"; //+$001
                           rTemp."Ni¤os trans. soporte"   := "Ni¤os transportados";   //+$001

                           // Si no tiene hora de inicio le ponemos por defecto las 00:00
                           IF rTemp."Hora inicio"=0T THEN
                             rTemp."Hora inicio":= 000000T;

                           rTemp.INSERT;

                           // Temporal de fechas
                           rTFechas.SETRANGE("Period Start", Parte.Fecha);
                           IF NOT rTFechas.FIND('-') THEN BEGIN
                             rTFechas."Period Start" := Parte.Fecha;
                             rTFechas.INSERT;
                           END;

                           // Temporal de Vehiculos
                           IF NOT rTempVeh.GET("N§ Vehiculo") THEN BEGIN
                             rTempVeh.INIT;
                             rTempVeh.Matricula := "N§ Vehiculo";
                             rTempVeh.INSERT;
                           END;

                           // Temporal de conductores

                           IF NOT rTempCond.GET("Cod Conductor") THEN BEGIN
                             rTempCond.INIT;
                             rTempCond.Conductor := "Cod Conductor";
                             rTempCond.INSERT;
                           END;
                         END;

        ReqFilterFields=Fecha,Cod Conductor,Tipo Vehiculo;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=5500;
      Height=880;
    }
    CONTROLS
    {
      { 1103350000;Label  ;220  ;220  ;4400 ;440  ;ParentControl=1103350002 }
      { 1103350002;CheckBox;4730;220  ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=ESP=Mostrar partes no asignados;
                                                   SourceExpr=wNoAsignados }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      rPar@1100244000 : Record 7010311;
      rTempVeh@1100244001 : TEMPORARY Record 7010346;
      rTempCond@1100244002 : TEMPORARY Record 7010327;
      rTemp@1100244003 : TEMPORARY Record 7010360;
      rTFechas@1100244004 : TEMPORARY Record 2000000007;
      rSerPar@1100244005 : Record 7010359;
      xlApp@1100244006 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      xlLibro@1100244007 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      xlHoja@1100244008 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlLibros@1100244009 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{000208DB-0000-0000-C000-000000000046}:Unknown Automation Server.Workbooks";
      window@1100244010 : Dialog;
      Text0001@1100244011 : TextConst 'ESP=Planning.xls';
      Text0002@1100244012 : TextConst 'ESP=PLANNING DE SERVICIOS';
      Text0003@1100244013 : TextConst 'ESP=Empresa:';
      Text0004@1100244014 : TextConst 'ESP=Fecha Servicios:';
      wwTotal@1100244015 : Integer;
      wwCont@1100244016 : Integer;
      Text0005@1100244017 : TextConst 'ESP=Debe de Introducir un filtro de fecha';
      Text0006@1100244018 : TextConst 'ESP="Conductores: "';
      Text0007@1100244019 : TextConst 'ESP="Tipo Vehiculo :  "';
      Text0008@1100244020 : TextConst 'ESP=TODOS';
      Text0009@1100244021 : TextConst 'ESP="Fecha : "';
      Text0010@1100244022 : TextConst 'ESP="Usuario : "';
      Text0011@1100244023 : TextConst 'ESP=Traspasando a Excel';
      wNoAsignados@1103350000 : Boolean;

    PROCEDURE Traspasar@17();
    VAR
      lrInfEmp@1100244000 : Record 79;
      lrConduct@1100244001 : Record 7010327;
      lrParte@1100244002 : Record 7010360;
      lrTipoSer@1100244003 : Record 7010319;
      lwArchivoExcel@1100244004 : Text[250];
      lxBordes@1100244005 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020855-0000-0000-C000-000000000046}:Unknown Automation Server.Borders";
      lxFont@1100244006 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{0002084D-0000-0000-C000-000000000046}:Unknown Automation Server.Font";
      lxInterior@1100244007 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020870-0000-0000-C000-000000000046}:Unknown Automation Server.Interior";
      lxRango@1100244008 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      lxLibros@1100244009 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{000208DB-0000-0000-C000-000000000046}:Unknown Automation Server.Workbooks";
      lwWindow@1100244010 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window";
      lwPageSetup@1100244011 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{000208B4-0000-0000-C000-000000000046}:Unknown Automation Server.PageSetup";
      wLin@1100244012 : Integer;
      wCol@1100244013 : Integer;
      lwOrigen@1100244014 : Text[30];
      lwHoraInicio@1100244015 : Time;
      lwHora@1100244016 : Time;
      lwHora2@1100244017 : Time;
      lwCont@1100244018 : Integer;
      lwCont2@1100244019 : Integer;
      lwColsIF@1100244020 : ARRAY [2] OF Code[10];
      lwCeldas@1100244021 : Code[30];
      lwTipo@1100244022 : 'S,E,X';
      lwText@1100244023 : Text[250];
      lwText2@1100244024 : Text[250];
      lwNCC@1100244025 : Integer;
      lwNCCmax@1100244026 : Integer;
      lwColor@1100244027 : Integer;
      Salt1@1100244028 : TextConst 'ESP=';
      lwPrimera@1100244029 : Boolean;
      lwNum@1100244030 : Integer;
      SALT2@1100244031 : TextConst 'ESP=
    ';
      lwSalt@1100244032 : Char;
      lwHoraRef@1103350000 : Time;
    BEGIN
      // Traspasar
      // Pasa al Excel la informacion contenida en el temporal

      lwSalt :=13; // Salto de linea

      window.OPEN(Text0011);

      lrInfEmp.RESET;
      lrInfEmp.GET;

      rPar.TESTFIELD("Ruta Plantilla Informes");

      lwOrigen :='A1';
      lwArchivoExcel:= rPar."Ruta Plantilla Informes";
      IF lwArchivoExcel[STRLEN(lwArchivoExcel)] <> '\' THEN
        lwArchivoExcel += '\';

      lwArchivoExcel += Text0001;

      IF EXISTS(lwArchivoExcel) THEN
        ERASE(lwArchivoExcel);

      IF NOT CREATE(xlApp) THEN
        EXIT;


      xlLibro := xlApp.Workbooks.Add;



      // Borramos todas las hojas
      FOR lwCont:= xlLibro.Worksheets.Count DOWNTO 2  DO BEGIN
        xlHoja := xlLibro.Worksheets.Item(lwCont);
        xlHoja.Delete;
      END;


      //xlHoja := xlLibro.Worksheets.Item(1);
      //xlLibro.Windows.DisplayGridlines:= false;


      //xlHoja.Range(lwOrigen).Offset(wLin+1,34)


      // Inicia la impresion;

      rTFechas.RESET;
      rTemp.RESET;
      rTemp.SETCURRENTKEY("Cod Conductor",Fecha,"Dia siguiente","Hora inicio");
      IF rTFechas.FIND('-') THEN BEGIN
        lwPrimera:= TRUE;
        REPEAT
          IF lwPrimera THEN
            xlHoja := xlLibro.Worksheets.Item(1)
          ELSE
            xlHoja := xlLibro.Worksheets.Add;

          lwPrimera := FALSE;
          lwText := FORMAT(rTFechas."Period Start",0,'<Day,2>.<Month,2>.<Year,2>');
          xlHoja.Name := lwText;
          xlHoja.Activate;
          lwText := Text0002; // Planning vehiculos;
          xlHoja.Range(lwOrigen).Value := lwText;
          xlHoja.Range(lwOrigen).Font.Bold := TRUE;
          xlHoja.Range(lwOrigen).Font.Size := 12;
          lwText := Text0003 + lrInfEmp.Name;
          xlHoja.Range(lwOrigen).Offset(1,0).Value := lwText;
          lwText := Text0004;
          lwText += FORMAT(rTFechas."Period Start",0,'<Day,2>/<Month,2>/<Year,2>');
          lxRango:=xlHoja.Range(lwOrigen).Offset(3,0);
          lxRango.Value := lwText;
          lxRango.Characters(1,STRLEN(Text0004)).Font.Bold:= TRUE;

          lwText := Text0009;
          lwText += FORMAT(TODAY,0,'<Day,2>/<Month,2>/<Year,2>');
          xlHoja.Range(lwOrigen).Offset(2,19).Value := lwText;
          lwText := Text0010 + USERID;
          lxRango:= xlHoja.Range(lwOrigen).Offset(3,19);
          lxRango.Value := lwText;
          lxRango.Characters(1,STRLEN(Text0009)).Font.Bold:= TRUE;

          lwText:= Parte.GETFILTER(Conductor);
          IF lwText='' THEN
            lwText := Text0008;  // Conductores
          lwText := Text0006 + lwText;
          lxRango:= xlHoja.Range(lwOrigen).Offset(1,5);
          lxRango.Value := lwText;
          lxRango.Characters(1,STRLEN(Text0006)).Font.Bold:= TRUE;


          lwText:= Parte.GETFILTER("Tipo Vehiculo");
          IF lwText='' THEN
            lwText := Text0008; // Tipos Vehiculo
          lwText := Text0007 + lwText;
          lxRango:= xlHoja.Range(lwOrigen).Offset(2,5);
          lxRango.Value := lwText;
          lxRango.Characters(1,STRLEN(Text0007)).Font.Bold:= TRUE;

          // Dibuja los recuadros iniciales  de horas
          lwHoraInicio := 040000T;
          wLin :=4;
          FOR lwCont:=0 TO 23 DO BEGIN
            lxRango:= xlHoja.Range(lwOrigen).Offset(wLin,lwCont);
            // xlHoja.Range(lwOrigen).Offset(wLin,lwCont).BorderAround        := 2; // Dibuja una linea punteada
            lxRango.Borders.Item(1).Weight := 2;
            lxRango.Borders.Item(2).Weight := 2;
            lxRango.Borders.Item(3).Weight := 2;
            lxRango.Borders.Item(4).Weight := 2;
            lxRango.HorizontalAlignment := 3;
            lxRango.Font.Bold           := TRUE;
            lxRango.Font.Size           := 10;
            lxRango.ColumnWidth         := 7.5;
            lwHora := lwHoraInicio + (3600000 * lwCont);
            lwText:= FORMAT(lwHora,0,'<Hour,2>:<Minutes,2>');
            lxRango.Value := lwText;
          END;

          rTemp.SETRANGE(Fecha,rTFechas."Period Start");
          rTempVeh.RESET;
          rTempCond.RESET;
          IF rTempVeh.FIND('-') THEN BEGIN
            REPEAT
              rTemp.SETRANGE("N§ Vehiculo", rTempVeh.Matricula); // En el temporal Veh hemos puesto el N§vehiculo en la matricula
              IF rTempCond.FIND('-') THEN BEGIN
                REPEAT
                  rTemp.SETRANGE("Cod Conductor",rTempCond.Conductor);
                  IF rTemp.FIND('-') THEN BEGIN

                    IF NOT lrConduct.GET(rTempCond.Conductor) THEN
                      CLEAR(lrConduct);

                    wLin+=1;
                    // Dibuja la barra Gris
                    lwCeldas := STRSUBSTNO('%1:%2', xlHoja.Range(lwOrigen).Offset(wLin,0).Address,
                                 xlHoja.Range(lwOrigen).Offset(wLin,23).Address);
                    lxRango:= xlHoja.Range(lwCeldas);
                    xlHoja.Range(lwOrigen).Offset(wLin,0).Borders.Item(1).Weight := 2;
                    xlHoja.Range(lwOrigen).Offset(wLin,23).Borders.Item(2).Weight := 2;
                    lxRango.Borders.Item(3).Weight := 2;
                    lxRango.Borders.Item(4).Weight := 2;
                    lxRango.Interior.Color:= 12632256; // GRIS
                    lwText := STRSUBSTNO('%1 - %2 %3 -Horario:%4',
                                         rTempVeh.Matricula,
                                         lrConduct.Nombre,
                                         lrConduct.Apellidos,
                                         BuscaHorario(rTemp));
                    xlHoja.Range(lwOrigen).Offset(wLin,0).Font.Size:=8;
                    xlHoja.Range(lwOrigen).Offset(wLin,0).Font.Bold:=TRUE;
                    xlHoja.Range(lwOrigen).Offset(wLin,0).Value := lwText;

                    lwNCCmax:=0;
                    FOR lwCont:=0 TO 23 DO BEGIN
                      lwNCC:=0;
                      lwHora := lwHoraInicio + (3600000 * lwCont);
                      lwHora2:= lwHora + 3599999;

                      rTemp.SETFILTER("Hora inicio",'>=%1&<%2',lwHora,lwHora2);
                      IF rTemp.FIND('-') THEN BEGIN
                        REPEAT
                          lwNCC +=1;
                          IF lwNCC > lwNCCmax THEN BEGIN
                            FOR lwCont2:=0 TO 23 DO BEGIN
                              lxRango:= xlHoja.Range(lwOrigen).Offset(wLin+lwNCC,lwCont2);
                              lxRango.Borders.Item(1).Weight := 2;
                              lxRango.Borders.Item(2).Weight := 2;
                            END;
                            lwNCCmax :=lwNCC;
                          END;
                          lxRango:= xlHoja.Range(lwOrigen).Offset(wLin+lwNCC,lwCont);
                          CASE rTemp."Codigo Servicio" OF
                            rPar."Codigo Salidas"  : BEGIN
                                                       lwTipo:=lwTipo::S;
                                                       lwColor := 255; // Rojo
                                                     END;
                            rPar."Codigo Entradas" : BEGIN
                                                       lwTipo:=lwTipo::E;
                                                       lwColor := 16711680; // Azul
                                                     END;
                            ELSE BEGIN
                                   lwTipo:=lwTipo::X;
                                   lwColor := 0; // Negro
                                 END;
                          END;

                          CLEAR(lwHoraRef);

                          // AJF 07/11/08
                          // Si no encuentra lineas de parte puede quedar texto del servicio anterior
                          // en la variable lwText2.
                          lwText2 := '';

                          rSerPar.RESET;
                          rSerPar.SETCURRENTKEY("N§ Parte","Hora recogida",Letra);
                          rSerPar.SETRANGE("N§ Parte",rTemp."N§ Parte");
                          IF rTemp."Origen creacion" <> rTemp."Origen creacion"::"Recogida Automatica" THEN
                            rSerPar.SETFILTER("Hora recogida",'<>%1',0T);
                          CASE lwTipo OF
                            lwTipo::S : BEGIN
                              IF rSerPar.FIND('-') THEN BEGIN
                                lwText2:= TextoPuntoR(rSerPar."Punto recogida") + ' ';
                              END;
                            END;
                            lwTipo::E : BEGIN
                              IF NOT rSerPar.FIND('+') THEN
                                rSerPar.SETRANGE("Hora recogida");
                              IF rSerPar.FIND('+') THEN BEGIN
                                lwText2:= TextoPuntoR(rSerPar."Punto recogida") + ' ';
                              END;
                            END;
                            lwTipo::X : BEGIN
                              IF rSerPar.FIND('-') THEN BEGIN
                                lwText2:=  TextoPuntoR(rSerPar."Punto recogida") + ' ';
                              END;
                              lwText2+=  TextoCodigoServ(rTemp."Codigo Servicio") + ' ';
                            END;
                          END;

                          lwHoraRef := rTemp."Hora inicio";

                          lxRango.Font.Color:= lwColor;
                          lxRango.Font.Size:=6;
                          lxRango.WrapText := TRUE;
                          lxRango.VerticalAlignment:= -4160; // Alineacion superior

                          lrTipoSer.RESET;
                          IF NOT lrTipoSer.GET(rTemp."Tipo Servicio") THEN
                            EXIT;
                          CLEAR(lwNum);
                          IF rTemp."Origen/Destino"= lrTipoSer."Pto Origen x Defecto" THEN
                            lwNum := 1
                          ELSE
                          CASE lwTipo OF
                            lwTipo::E: lwNum := 2;
                            lwTipo::S: lwNum := 4;
                          END;

                          lwText:=rTemp."N§ Parte";

                          // F-(Fin)->salidas I-(Inicio) Entrada 1 Aeorpuerto y 2 o 4 puerto
                          CASE lwTipo OF
                            lwTipo::E: lwText += STRSUBSTNO(' I-%1',lwNum);
                            lwTipo::S: lwText += STRSUBSTNO(' F-%1',lwNum);
                          END;

                          // lwText+= FORMAT(lwSalt); // Salto de linea
                          lwText+= STRSUBSTNO(' %1-%2 ',lwTipo,FORMAT(lwHoraRef,0,'<Hour,2>:<Minutes,2>'));
                          lwText+= STRSUBSTNO(' P-%1 ',rTemp."Adultos trans. soporte" + rTemp."Ni¤os trans. soporte");
                          // lwText+= FORMAT(lwSalt); // Salto de linea
                          lwText += lwText2;
                          lxRango.Value:=lwText;


                        UNTIL rTemp.NEXT=0;
                      END;
                    END;
                    wLin += lwNCCmax;
                  END;
                  rTemp.SETRANGE("Hora inicio");
                UNTIL rTempCond.NEXT=0;
              END;
            UNTIL rTempVeh.NEXT=0;
          END;

          // Le ponemos las "tapas de abajo al £ltimo";
          lwCeldas := STRSUBSTNO('%1:%2', xlHoja.Range(lwOrigen).Offset(wLin,0).Address,
                             xlHoja.Range(lwOrigen).Offset(wLin,23).Address);
          lxRango:= xlHoja.Range(lwCeldas);
          lxRango.Borders.Item(4).Weight := 2;


          // Configuramos la impresion
          lwPageSetup                   := xlHoja.PageSetup;
          lwPageSetup.PrintTitleRows    :='$1:$5'; // Se repite la cabecera
          lwPageSetup.PrintTitleColumns := '';

          lwPageSetup.LeftMargin := 0;
          lwPageSetup.RightMargin:= 0;

          // AJS 22.11.2005
          // Este informe no va a ser A3
          //lwPageSetup.PaperSize:=   8; // A3

          lwPageSetup.Orientation    := 2; // Apaisado
          lwPageSetup.CenterFooter   := 'P gina &P';

          lwPageSetup.Zoom           := FALSE;
          lwPageSetup.FitToPagesWide := 1;
          lwPageSetup.FitToPagesTall := 1;

        UNTIL rTFechas.NEXT = 0;
      END;


      xlLibro.Saved(TRUE);
      //xlLibro.Save;
      xlApp.Visible(TRUE);
      xlApp.Windows.Item(1).Activate;

      xlLibro.SaveAs(lwArchivoExcel);

      //xlLibro.Activate;
      //xlLibro.Close;

      window.CLOSE;
      CLEARALL;
    END;

    PROCEDURE BuscaHorario@24(VAR prTemp@1100244000 : TEMPORARY Record 7010360) : Text[250];
    VAR
      lrTemp2@1100244001 : TEMPORARY Record 7010360;
      lText@1100244002 : Text[250];
      lwHora@1100244003 : ARRAY [2] OF Time;
      lwTiempoEntrePartes@1100244004 : Decimal;
    BEGIN
      // BuscaHorario
      // Devuelve una cadena con el horario previsto;

      // Fijamos a pi¤on la diferencia de tiempo en horas que debe de pasar para considerar una ruptura entre horas
      lwTiempoEntrePartes :=0.5; // media hora

      CLEAR(lText);
      CLEAR(lwHora);
      lrTemp2:=prTemp;
      IF prTemp.FIND('-') THEN BEGIN
        REPEAT
          IF lwHora[1]<>0T THEN BEGIN
            // Si hay mas de una hora entre el final de un parte y el inicio del siguiente consideramos un salto
            IF prTemp."Hora inicio" - lwHora[2] >= 3600000 * lwTiempoEntrePartes THEN BEGIN
              IF lText <>'' THEN
                lText += ' / ';
              lText += STRSUBSTNO ('%1-%2',FORMAT(lwHora[1],0,'<Hour,2>:<Minutes,2>'),FORMAT(lwHora[2],0,'<Hour,2>:<Minutes,2>'));
              lwHora[1]:=0T;
              lwHora[2]:=0T;
            END;
          END;

          IF lwHora[1]=0T THEN
            lwHora[1]:= prTemp."Hora inicio";
          IF lwHora[2] < prTemp."Hora final" THEN
            lwHora[2]:= prTemp."Hora final";
          IF (lwHora[2]=0T) AND (lwHora[1]<>0T) THEN
            lwHora[2] := lwHora[1] + 1800000; // Media Hora
        UNTIL prTemp.NEXT=0;

        IF lwHora[1]<>0T THEN BEGIN
          IF lText <> '' THEN
            lText +=  ' / ';
          lText += STRSUBSTNO ('%1-%2',FORMAT(lwHora[1],0,'<Hour,2>:<Minutes,2>'),FORMAT(lwHora[2],0,'<Hour,2>:<Minutes,2>'));
        END;

        // Dejamos el registro tal y como estaba
        prTemp:= lrTemp2;
      END;

      EXIT(lText);
    END;

    PROCEDURE TextoPuntoR@2(pwCod@1100244000 : Code[10]) : Text[30];
    VAR
      lrPunt@1100244001 : Record 7010315;
    BEGIN
      // TextoPuntoR
      // Devuelve el texto del punto de recogida

      lrPunt.RESET;
      IF NOT lrPunt.GET(pwCod) THEN
        CLEAR(lrPunt);

      EXIT(lrPunt.Descripci¢n)
    END;

    PROCEDURE TextoCodigoServ@5(pwCod@1100244000 : Code[10]) : Text[30];
    VAR
      lrCodSer@1100244001 : Record 7010320;
    BEGIN
      // TextoCodigoServ
      // Devuelve el texto del codigo de servicio

      lrCodSer.RESET;
      IF NOT lrCodSer.GET(pwCod) THEN
        CLEAR(lrCodSer);

      EXIT(lrCodSer.Descripcion);
    END;

    BEGIN
    {
      $001 AJS 06052013 Corrijo la actualizacion de los paxes transportados
    }
    END.
  }
  RDLDATA
  {
  }
}
