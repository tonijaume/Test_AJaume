OBJECT Report 5852 Suggest Work/Mach Ctr Std Cost
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Work/Mach Ctr Std Cost;
               ESP=Sugerir coste est nd. c. trab./m q.];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  StdCostWkshName@1002 : Record 5840;
                BEGIN
                  IF ToStdCostWkshName = '' THEN
                    ERROR(STRSUBSTNO(Text004));
                  StdCostWkshName.GET(ToStdCostWkshName);

                  ToStdCostWksh.LOCKTABLE
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table99000754;
        OnPreDataItem=BEGIN
                        WindowUpdateTime := TIME;
                        Window.OPEN(Text007 + Text008);
                      END;

        OnAfterGetRecord=BEGIN
                           InsertStdCostWksh(1,"No.");
                           IF TIME - WindowUpdateTime >= 750 THEN BEGIN
                             Window.UPDATE(1,"No.");
                             WindowUpdateTime := TIME;
                           END;
                         END;

        OnPostDataItem=BEGIN
                         Window.CLOSE;
                       END;

        ReqFilterFields=No.;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table99000758;
        OnPreDataItem=BEGIN
                        WindowUpdateTime := TIME;
                        Window.OPEN(Text007 + Text009);
                      END;

        OnAfterGetRecord=BEGIN
                           InsertStdCostWksh(2,"No.");
                           IF TIME - WindowUpdateTime >= 750 THEN BEGIN
                             Window.UPDATE(1,"No.");
                             WindowUpdateTime := TIME;
                           END;
                         END;

        OnPostDataItem=BEGIN
                         Window.CLOSE;
                       END;

        ReqFilterFields=No.;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=6050;
      Height=5500;
      SaveValues=Yes;
      OnOpenForm=VAR
                   i@1000 : Integer;
                 BEGIN
                   FOR i := 1 TO ARRAYLEN(AmtAdjustFactor) DO
                     IF AmtAdjustFactor[i] = 0 THEN
                       AmtAdjustFactor[i] := 1;
                 END;

    }
    CONTROLS
    {
      { 3   ;TextBox      ;3080 ;4290 ;2750 ;440  ;ParentControl=11;
                                                   InFrame=Yes;
                                                   CaptionML=[ENU=Adjustment Factor;
                                                              ESP=Factor ajuste];
                                                   DecimalPlaces=0:5;
                                                   NotBlank=Yes;
                                                   SourceExpr=AmtAdjustFactor[3];
                                                   MinValue=0 }
      { 15  ;Label        ;220  ;4290 ;2750 ;440  ;ParentControl=3;
                                                   LeaderDots=No }
      { 4   ;TextBox      ;3080 ;4840 ;2750 ;440  ;ParentControl=11;
                                                   InFrame=Yes;
                                                   CaptionML=[ENU=Rounding Method;
                                                              ESP=M‚todo redondeo];
                                                   SourceExpr=RoundingMethod[3];
                                                   TableRelation="Rounding Method" }
      { 16  ;Label        ;220  ;4840 ;2750 ;440  ;ParentControl=4;
                                                   LeaderDots=No }
      { 1   ;TextBox      ;3080 ;2420 ;2750 ;440  ;ParentControl=10;
                                                   InFrame=Yes;
                                                   CaptionML=[ENU=Adjustment Factor;
                                                              ESP=Factor ajuste];
                                                   DecimalPlaces=0:5;
                                                   NotBlank=Yes;
                                                   SourceExpr=AmtAdjustFactor[2];
                                                   MinValue=0 }
      { 12  ;Label        ;220  ;2420 ;2750 ;440  ;ParentControl=1;
                                                   LeaderDots=No }
      { 2   ;TextBox      ;3080 ;2970 ;2750 ;440  ;ParentControl=10;
                                                   InFrame=Yes;
                                                   CaptionML=[ENU=Rounding Method;
                                                              ESP=M‚todo redondeo];
                                                   SourceExpr=RoundingMethod[2];
                                                   TableRelation="Rounding Method" }
      { 13  ;Label        ;220  ;2970 ;2750 ;440  ;ParentControl=2;
                                                   LeaderDots=No }
      { 18  ;TextBox      ;3080 ;550  ;2750 ;440  ;ParentControl=8;
                                                   InFrame=Yes;
                                                   CaptionML=[ENU=Adjustment Factor;
                                                              ESP=Factor ajuste];
                                                   DecimalPlaces=0:5;
                                                   NotBlank=Yes;
                                                   SourceExpr=AmtAdjustFactor[1];
                                                   MinValue=0 }
      { 19  ;Label        ;220  ;550  ;2750 ;440  ;ParentControl=18;
                                                   LeaderDots=No }
      { 14  ;TextBox      ;3080 ;1100 ;2750 ;440  ;ParentControl=8;
                                                   InFrame=Yes;
                                                   CaptionML=[ENU=Rounding Method;
                                                              ESP=M‚todo redondeo];
                                                   SourceExpr=RoundingMethod[1];
                                                   TableRelation="Rounding Method" }
      { 17  ;Label        ;220  ;1100 ;2750 ;440  ;ParentControl=14;
                                                   LeaderDots=No }
      { 8   ;Frame        ;0    ;0    ;6050 ;1760 ;TopLineOnly=Yes;
                                                   CaptionML=[ENU=Standard Cost;
                                                              ESP=Coste est ndar] }
      { 10  ;Frame        ;0    ;1870 ;6050 ;1760 ;TopLineOnly=Yes;
                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ESP=% Coste indirecto] }
      { 11  ;Frame        ;0    ;3740 ;6050 ;1760 ;TopLineOnly=Yes;
                                                   CaptionML=[ENU=Overhead Rate;
                                                              ESP=Tasa costes generales] }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=VAR
                   i@1000 : Integer;
                 BEGIN
                   FOR i := 1 TO ARRAYLEN(AmtAdjustFactor) DO
                     IF AmtAdjustFactor[i] = 0 THEN
                       AmtAdjustFactor[i] := 1;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 8   ;2   ;Group     ;
                  CaptionML=[ENU=Standard Cost;
                             ESP=Coste est ndar] }

      { 18  ;3   ;Field     ;
                  CaptionML=[ENU=Adjustment Factor;
                             ESP=Factor ajuste];
                  DecimalPlaces=0:5;
                  NotBlank=Yes;
                  SourceExpr=AmtAdjustFactor[1];
                  MinValue=0 }

      { 14  ;3   ;Field     ;
                  CaptionML=[ENU=Rounding Method;
                             ESP=M‚todo redondeo];
                  SourceExpr=RoundingMethod[1];
                  TableRelation="Rounding Method" }

      { 10  ;2   ;Group     ;
                  CaptionML=[ENU=Indirect Cost %;
                             ESP=% Coste indirecto] }

      { 1   ;3   ;Field     ;
                  CaptionML=[ENU=Adjustment Factor;
                             ESP=Factor ajuste];
                  DecimalPlaces=0:5;
                  NotBlank=Yes;
                  SourceExpr=AmtAdjustFactor[2];
                  MinValue=0 }

      { 2   ;3   ;Field     ;
                  CaptionML=[ENU=Rounding Method;
                             ESP=M‚todo redondeo];
                  SourceExpr=RoundingMethod[2];
                  TableRelation="Rounding Method" }

      { 11  ;2   ;Group     ;
                  CaptionML=[ENU=Overhead Rate;
                             ESP=Tasa costes generales] }

      { 3   ;3   ;Field     ;
                  CaptionML=[ENU=Adjustment Factor;
                             ESP=Factor ajuste];
                  DecimalPlaces=0:5;
                  NotBlank=Yes;
                  SourceExpr=AmtAdjustFactor[3];
                  MinValue=0 }

      { 4   ;3   ;Field     ;
                  CaptionML=[ENU=Rounding Method;
                             ESP=M‚todo redondeo];
                  SourceExpr=RoundingMethod[3];
                  TableRelation="Rounding Method" }

    }
  }
  CODE
  {
    VAR
      Text004@1003 : TextConst 'ENU=You must specify a worksheet name to copy to.;ESP=Debe indicar un nombre hoja trabajo en la que copiar.';
      Text007@1006 : TextConst 'ENU=Copying worksheet...\\;ESP=Copiando hoja de trab....\\';
      Text008@1007 : TextConst 'ENU=Work Center No. #1####################\;ESP=N§ centro trabajo #1####################\';
      Text009@1004 : TextConst 'ENU=Machine Center No. #1####################\;ESP=N§ centro m quina. #1####################\';
      FromStdCostWksh@1013 : Record 5841;
      ToStdCostWksh@1010 : Record 5841;
      ToStdCostWkshName@1026 : Code[10];
      RoundingMethod@1015 : ARRAY [3] OF Code[10];
      AmtAdjustFactor@1031 : ARRAY [3] OF Decimal;
      Window@1011 : Dialog;
      WindowUpdateTime@1002 : Time;

    LOCAL PROCEDURE InsertStdCostWksh@4(Type2@1001 : Option;No2@1000 : Code[20]);
    BEGIN
      WITH ToStdCostWksh DO BEGIN
        INIT;
        VALIDATE("Standard Cost Worksheet Name",ToStdCostWkshName);
        VALIDATE(Type,Type2);
        VALIDATE("No.",No2);

        VALIDATE(
          "New Standard Cost",
          RoundAndAdjustAmt("Standard Cost",RoundingMethod[1],AmtAdjustFactor[1]));
        VALIDATE(
          "New Indirect Cost %",
          RoundAndAdjustAmt("Indirect Cost %",RoundingMethod[2],AmtAdjustFactor[2]));
        VALIDATE(
          "New Overhead Rate",
          RoundAndAdjustAmt("Overhead Rate",RoundingMethod[3],AmtAdjustFactor[3]));

        IF NOT INSERT(TRUE) THEN
          MODIFY(TRUE);
      END;
    END;

    PROCEDURE RoundAndAdjustAmt@8(Amt@1000 : Decimal;RoundingMethodCode@1001 : Code[10];AmtAdjustFactor@1005 : Decimal) : Decimal;
    VAR
      RoundingMethod@1002 : Record 42;
      Sign@1004 : Decimal;
    BEGIN
      IF Amt = 0 THEN
        EXIT(Amt);

      Amt :=  ROUND(Amt * AmtAdjustFactor,0.00001);

      IF RoundingMethodCode <> '' THEN
        WITH RoundingMethod DO BEGIN
          IF Amt >= 0 THEN
            Sign := 1
          ELSE
            Sign := -1;

          SETRANGE(Code,RoundingMethodCode);
          Code := RoundingMethodCode;
          "Minimum Amount" := ABS(Amt);
          IF FIND('=<') THEN BEGIN
            Amt := Amt + Sign * "Amount Added Before";
            IF Precision > 0 THEN BEGIN
              Amt := Sign * ROUND(ABS(Amt),Precision,COPYSTR('=><',Type+1,1));
            END;
            Amt := Amt + Sign * "Amount Added After";
          END;
        END;

      EXIT(Amt);
    END;

    PROCEDURE SetCopyToWksh@3(ToStdCostWkshName2@1001 : Code[10]);
    BEGIN
      ToStdCostWkshName := ToStdCostWkshName2;
    END;

    PROCEDURE Initialize@1(ToStdCostWkshName2@1004 : Code[10];AmtAdjustFactor1@1007 : Decimal;AmtAdjustFactor2@1000 : Decimal;AmtAdjustFactor3@1001 : Decimal;RoundingMethod1@1008 : Code[10];RoundingMethod2@1002 : Code[10];RoundingMethod3@1003 : Code[10]);
    BEGIN
      ToStdCostWkshName := ToStdCostWkshName2;
      AmtAdjustFactor[1] := AmtAdjustFactor1;
      AmtAdjustFactor[2] := AmtAdjustFactor2;
      AmtAdjustFactor[3] := AmtAdjustFactor3;
      RoundingMethod[1] := RoundingMethod1;
      RoundingMethod[2] := RoundingMethod2;
      RoundingMethod[3] := RoundingMethod3;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
