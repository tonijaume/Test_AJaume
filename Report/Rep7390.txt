OBJECT Report 7390 Whse. Calculate Inventory
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Whse. Calculate Inventory;
               ESP=Calcular existencias alm.];
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table7302;
        DataItemTableView=SORTING(Location Code,Bin Code,Item No.,Variant Code,Unit of Measure Code);
        OnPreDataItem=VAR
                        WhseJnlTemplate@1000 : Record 7309;
                        WhseJnlBatch@1001 : Record 7310;
                      BEGIN
                        IF RegisteringDate = 0D THEN
                          ERROR(Text001,WhseJnlLine.FIELDCAPTION("Registering Date"));

                        SETRANGE("Location Code",WhseJnlLine."Location Code");

                        WhseJnlTemplate.GET(WhseJnlLine."Journal Template Name");
                        WhseJnlBatch.GET(
                          WhseJnlLine."Journal Template Name",
                          WhseJnlLine."Journal Batch Name",WhseJnlLine."Location Code");
                        IF NextDocNo = '' THEN BEGIN
                          IF WhseJnlBatch."No. Series" <> '' THEN BEGIN
                            WhseJnlLine.SETRANGE("Journal Template Name",WhseJnlLine."Journal Template Name");
                            WhseJnlLine.SETRANGE("Journal Batch Name",WhseJnlLine."Journal Batch Name");
                            WhseJnlLine.SETRANGE("Location Code",WhseJnlLine."Location Code");
                            IF NOT WhseJnlLine.FIND('-') THEN
                              NextDocNo :=
                                NoSeriesMgt.GetNextNo(WhseJnlBatch."No. Series",RegisteringDate,FALSE);
                            WhseJnlLine.INIT;
                          END;
                          IF NextDocNo = '' THEN
                            ERROR(Text001,WhseJnlLine.FIELDCAPTION("Whse. Document No."));
                        END;

                        NextLineNo := 0;

                        IF NOT HideValidationDialog THEN
                          Window.OPEN(Text002,"Bin Content"."Bin Code");
                      END;

        OnAfterGetRecord=BEGIN
                           IF SkipCycleSKU("Location Code","Item No.","Variant Code") THEN
                             CurrReport.SKIP;

                           IF NOT HideValidationDialog THEN
                             Window.UPDATE;
                           CALCFIELDS("Quantity (Base)");
                           IF ("Quantity (Base)" <> 0) OR ZeroQty THEN
                             InsertWhseJnlLine;
                         END;

        OnPostDataItem=BEGIN
                         IF NOT HideValidationDialog THEN
                           Window.CLOSE;
                       END;

        ReqFilterFields=Zone Code,Bin Code,Item No.,Variant Code,Unit of Measure Code,Bin Type Code,Warehouse Class Code;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=8910;
      Height=1760;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   IF RegisteringDate = 0D THEN
                     RegisteringDate := WORKDATE;
                   ValidateRegisteringDate;
                 END;

    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;0    ;1650 ;440  ;CaptionML=[ENU=Registering Date;
                                                              ESP=Fecha registro];
                                                   SourceExpr=RegisteringDate;
                                                   OnValidate=BEGIN
                                                                ValidateRegisteringDate;
                                                              END;
                                                               }
      { 2   ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=1 }
      { 9   ;TextBox      ;3410 ;660  ;2750 ;440  ;CaptionML=[ENU=Whse. Document No.;
                                                              ESP=N§ documento almac‚n];
                                                   SourceExpr=NextDocNo }
      { 10  ;Label        ;0    ;660  ;3300 ;440  ;ParentControl=9 }
      { 11  ;CheckBox     ;3410 ;1320 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Items Not on Inventory;
                                                              ESP=Incluir prods. sin exist.];
                                                   SourceExpr=ZeroQty }
      { 12  ;Label        ;0    ;1320 ;3300 ;440  ;ParentControl=11 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF RegisteringDate = 0D THEN
                     RegisteringDate := WORKDATE;
                   ValidateRegisteringDate;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Registering Date;
                             ESP=Fecha registro];
                  SourceExpr=RegisteringDate;
                  OnValidate=BEGIN
                               ValidateRegisteringDate;
                             END;
                              }

      { 9   ;2   ;Field     ;
                  CaptionML=[ENU=Whse. Document No.;
                             ESP=N§ documento almac‚n];
                  SourceExpr=NextDocNo }

      { 11  ;2   ;Field     ;
                  CaptionML=[ENU=Items Not on Inventory;
                             ESP=Incluir prods. sin exist.];
                  SourceExpr=ZeroQty }

    }
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Please enter the %1.;ESP=Por favor, introduzca el %1.';
      Text002@1002 : TextConst 'ENU=Processing bins    #1##########;ESP=Procesando ubic.    #1##########';
      WhseJnlBatch@1004 : Record 7310;
      WhseJnlLine@1005 : Record 7311;
      SourceCodeSetup@1003 : Record 242;
      Location@1006 : Record 14;
      Bin@1000 : Record 7354;
      NoSeriesMgt@1017 : Codeunit 396;
      Window@1019 : Dialog;
      RegisteringDate@1020 : Date;
      CycleSourceType@1008 : ' ,Item,SKU';
      PhysInvtCountCode@1009 : Code[10];
      NextDocNo@1021 : Code[20];
      NextLineNo@1023 : Integer;
      ZeroQty@1026 : Boolean;
      HideValidationDialog@1007 : Boolean;

    PROCEDURE SetWhseJnlLine@1(VAR NewWhseJnlLine@1000 : Record 7311);
    BEGIN
      WhseJnlLine := NewWhseJnlLine;
    END;

    LOCAL PROCEDURE ValidateRegisteringDate@4();
    BEGIN
      WhseJnlBatch.GET(
        WhseJnlLine."Journal Template Name",
        WhseJnlLine."Journal Batch Name",WhseJnlLine."Location Code");
      IF WhseJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo :=
          NoSeriesMgt.GetNextNo(WhseJnlBatch."No. Series",RegisteringDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    PROCEDURE InsertWhseJnlLine@6();
    VAR
      WhseEntry@1000 : Record 7312;
      ItemUOM@1004 : Record 5404;
      ItemTrackingMgt@1003 : Codeunit 6500;
      ExpDate@1001 : Date;
      EntriesExist@1002 : Boolean;
    BEGIN
      WITH WhseJnlLine DO BEGIN
        IF NextLineNo = 0 THEN BEGIN
          LOCKTABLE;
          SETRANGE("Journal Template Name","Journal Template Name");
          SETRANGE("Journal Batch Name","Journal Batch Name");
          SETRANGE("Location Code","Location Code");
          IF FIND('+') THEN
            NextLineNo := "Line No.";

          SourceCodeSetup.GET;
        END;

        GetLocation("Bin Content"."Location Code");

        WhseEntry.SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Variant Code",
          "Unit of Measure Code","Lot No.","Serial No.","Entry Type");
        WhseEntry.SETRANGE("Item No.","Bin Content"."Item No.");
        WhseEntry.SETRANGE("Bin Code","Bin Content"."Bin Code");
        WhseEntry.SETRANGE("Location Code","Bin Content"."Location Code");
        WhseEntry.SETRANGE("Variant Code","Bin Content"."Variant Code");
        WhseEntry.SETRANGE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        IF WhseEntry.FIND('-') THEN;
        REPEAT
          WhseEntry.SETRANGE("Lot No.",WhseEntry."Lot No.");
          WhseEntry.SETRANGE("Serial No.",WhseEntry."Serial No.");
          WhseEntry.CALCSUMS("Qty. (Base)");
          IF (WhseEntry."Qty. (Base)" <> 0) OR ZeroQty THEN BEGIN
            ItemUOM.GET("Bin Content"."Item No.","Bin Content"."Unit of Measure Code");
            NextLineNo := NextLineNo + 10000;
            INIT;
            "Line No." := NextLineNo;
            VALIDATE("Registering Date",RegisteringDate);
            VALIDATE("Entry Type","Entry Type"::"Positive Adjmt.");
            VALIDATE("Whse. Document No.",NextDocNo);
            VALIDATE("Item No.","Bin Content"."Item No.");
            VALIDATE("Variant Code","Bin Content"."Variant Code");
            VALIDATE("Location Code","Bin Content"."Location Code");
            "From Bin Code" := Location."Adjustment Bin Code";
            "From Zone Code" := Bin."Zone Code";
            "From Bin Type Code" := Bin."Bin Type Code";
            VALIDATE("To Zone Code","Bin Content"."Zone Code");
            VALIDATE("To Bin Code","Bin Content"."Bin Code");
            VALIDATE("Zone Code","Bin Content"."Zone Code");
            VALIDATE("Bin Code","Bin Content"."Bin Code");
            VALIDATE("Source Code",SourceCodeSetup."Whse. Phys. Invt. Journal");
            VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
            "Serial No." := WhseEntry."Serial No.";
            "Lot No." := WhseEntry."Lot No.";
            "Warranty Date" := WhseEntry."Warranty Date";
            ExpDate := ItemTrackingMgt.ExistingExpirationDate("Item No.","Variant Code","Lot No.","Serial No.",FALSE,EntriesExist);
            IF EntriesExist THEN
              "Expiration Date" := ExpDate
            ELSE
              "Expiration Date" := WhseEntry."Expiration Date";
            "Phys. Inventory" := TRUE;

            "Qty. (Calculated)" := ROUND(WhseEntry."Qty. (Base)" / ItemUOM."Qty. per Unit of Measure",0.00001);
            "Qty. (Calculated) (Base)" := WhseEntry."Qty. (Base)";

            VALIDATE("Qty. (Phys. Inventory)","Qty. (Calculated)");
            VALIDATE("Qty. (Phys. Inventory) (Base)",WhseEntry."Qty. (Base)");

            IF Location."Use ADCS" THEN
              VALIDATE("Qty. (Phys. Inventory)",0);
            "Registering No. Series" := WhseJnlBatch."Registering No. Series";
            WhseJnlLine."Whse. Document Type" :=
              WhseJnlLine."Whse. Document Type"::"Whse. Phys. Inventory";
            "Phys Invt Counting Period Code" := PhysInvtCountCode;
            "Phys Invt Counting Period Type" := CycleSourceType;
            INSERT(TRUE);
          END;
          IF WhseEntry.FIND('+') THEN;
          WhseEntry.SETRANGE("Lot No.");
          WhseEntry.SETRANGE("Serial No.");
        UNTIL WhseEntry.NEXT = 0;
      END;
    END;

    PROCEDURE InitializeRequest@2(NewRegisteringDate@1000 : Date;WhseDocNo@1001 : Code[20];ItemsNotOnInvt@1002 : Boolean);
    BEGIN
      RegisteringDate := NewRegisteringDate;
      NextDocNo := WhseDocNo;
      ZeroQty := ItemsNotOnInvt;
    END;

    PROCEDURE InitializePhysInvtCount@7381(PhysInvtCountCode2@1000 : Code[10];CycleSourceType2@1001 : ' ,Item,SKU');
    BEGIN
      PhysInvtCountCode := PhysInvtCountCode2;
      CycleSourceType := CycleSourceType2;
    END;

    PROCEDURE SetHideValidationDialog@7380(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE SkipCycleSKU@7382(LocationCode@1000 : Code[10];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10]) : Boolean;
    VAR
      SKU@1001 : Record 5700;
    BEGIN
      IF CycleSourceType = CycleSourceType::Item THEN
        IF SKU.READPERMISSION THEN
          IF SKU.GET(LocationCode,ItemNo,VariantCode) THEN
            EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE GetLocation@3(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN BEGIN
        Location.GET(LocationCode);
        Location.TESTFIELD("Adjustment Bin Code");
        Bin.GET(Location.Code,Location."Adjustment Bin Code");
        Bin.TESTFIELD("Zone Code");
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
