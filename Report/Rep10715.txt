OBJECT Report 10715 Telematic VAT Declaration
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVES6.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Telematic VAT Declaration;
               ESP=Declaraci¢n telem tica IVA];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  VATDeclLinFilt := "VAT Declaration Line".GETFILTERS;
                  IF PeriodSelected = PeriodSelected::"Previous and within the period" THEN
                    Header := Text1100000
                  ELSE
                    Header := Text1100001 + "VAT Declaration Line".GETFILTER("Date Filter");
                END;

    OnPostReport=BEGIN
                   TransferenceFormat.RESET;
                   TransferenceFormat.FIND('-');
                   REPEAT
                     IF (TransferenceFormat.Value = '') AND (TransferenceFormat.Type = TransferenceFormat.Type::Numerical) THEN
                       LoadValue(TransferenceFormat,0);
                   UNTIL TransferenceFormat.NEXT = 0;

                   TransferenceFormat.SETRANGE(Type,TransferenceFormat.Type::Ask);
                   FORM.RUNMODAL(10704,TransferenceFormat);
                   TransferenceFormat.RESET;
                   TransferenceFormat.FIND('-');
                   REPEAT
                     IF TransferenceFormat.Type = TransferenceFormat.Type::Currency THEN BEGIN
                       TransferenceFormat.Value := Text1100003;
                       TransferenceFormat.MODIFY
                     END;
                   UNTIL TransferenceFormat.NEXT = 0;
                   TransferenceFormat.MODIFY;
                   FileGeneration(TransferenceFormat);
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table257;
        DataItemTableView=SORTING(Statement Template Name,Name);
        NewPagePerRecord=Yes;
        OnPreDataItem=BEGIN
                        GLSetup.GET;
                        SETRANGE("Statement Template Name","VAT Declaration Line"."Statement Template Name");
                        SETRANGE(Name,"VAT Declaration Line"."Statement Name");
                      END;

        OnAfterGetRecord=BEGIN
                           CurrReport.PAGENO := 1;
                           IF "Template Type" <> "Template Type"::"One Column Report" THEN
                             ERROR(Text1100004,VATDeclarationName.FIELDCAPTION(VATDeclarationName."Template Type"),
                               "Template Type"::"One Column Report");
                         END;

      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table256;
        DataItemTableView=SORTING(Statement Template Name,Statement Name)
                          WHERE(Print=CONST(Yes));
        DataItemVarName=VAT Declaration Line;
        OnPreDataItem=BEGIN
                        TransferenceFormat.DELETEALL;
                        TemplateTransfFormat.SETRANGE("VAT Statement Name","VAT Statement Name".Name);
                        TemplateTransfFormat.FIND('-');
                        REPEAT
                          TransferenceFormat := TemplateTransfFormat;
                          IF TransferenceFormat.Box = '' THEN
                            TransferenceFormat.Box := '**';
                          TransferenceFormat.INSERT;
                        UNTIL TemplateTransfFormat.NEXT = 0;
                      END;

        OnAfterGetRecord=BEGIN
                           VATDeclarationName.SETRANGE(Name,"VAT Declaration Line"."Statement Name");
                           IF NOT VATDeclarationName.FIND('-') THEN
                             ERROR(Text1100005);

                           CalcTotLine("VAT Declaration Line",TotalAmount,0);
                           IF IntegerPrinted THEN
                             TotalAmount := ROUND(TotalAmount,1,'<');
                           IF "Print with" = "Print with"::"Opposite Sign" THEN
                             TotalAmount := -TotalAmount;

                           IF Box <> '' THEN BEGIN
                             TransferenceFormat.SETRANGE(Box,Box);
                             IF TransferenceFormat.FIND('-') THEN
                               REPEAT
                                 IF "VAT Declaration Line".Type = "VAT Declaration Line".Type::Description THEN
                                   EVALUATE(TotalAmount,"VAT Declaration Line".Description);
                                 LoadValue(TransferenceFormat,TotalAmount);
                               UNTIL(TransferenceFormat.NEXT = 0);
                           END;
                         END;

        ReqFilterFields=Date Filter;
        DataItemLink=Statement Template Name=FIELD(Statement Template Name),
                     Statement Name=FIELD(Name);
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=7260;
      Height=4070;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   RequestOptionsForm.FileNameControl.VISIBLE := NOT ISSERVICETIER;
                 END;

      OnActivateForm=BEGIN
                       OutFile := Text1100006 + "VAT Declaration Line"."Statement Name" + Text1100007
                     END;

    }
    CONTROLS
    {
      { 1   ;OptionButton ;3410 ;0    ;3850 ;440  ;CaptionML=[ENU=Open;
                                                              ESP=Abrir];
                                                   SourceExpr=Selection;
                                                   OptionValue=Opened }
      { 21  ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=1;
                                                   CaptionML=[ENU=VAT entries included;
                                                              ESP=Movs. IVA incluidos] }
      { 2   ;OptionButton ;3410 ;550  ;3850 ;440  ;CaptionML=[ENU=Closed;
                                                              ESP=Cerrado];
                                                   SourceExpr=Selection;
                                                   OptionValue=Closed }
      { 3   ;OptionButton ;3410 ;1100 ;3850 ;440  ;CaptionML=[ENU=Open and Closed;
                                                              ESP=Pendientes y cerrados];
                                                   SourceExpr=Selection;
                                                   OptionValue=Opened and Closed }
      { 4   ;OptionButton ;3410 ;1760 ;3850 ;440  ;CaptionML=[ENU=Within Period;
                                                              ESP=Comprendidos en el periodo];
                                                   SourceExpr=PeriodSelected;
                                                   OptionValue=Within the period }
      { 24  ;Label        ;0    ;1760 ;3300 ;440  ;ParentControl=4;
                                                   CaptionML=[ENU=VAT entries included;
                                                              ESP=Movs. IVA incluidos] }
      { 5   ;OptionButton ;3410 ;2310 ;3850 ;440  ;CaptionML=[ENU=Before and Within Period;
                                                              ESP=Anteriores y comprendidos en el periodo];
                                                   SourceExpr=PeriodSelected;
                                                   OptionValue=Previous and within the period }
      { 8   ;CheckBox     ;3410 ;2970 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Additional Currency;
                                                              ESP=Divisa adicional];
                                                   SourceExpr=PrintAmtInAddCurr }
      { 9   ;Label        ;0    ;2970 ;3300 ;440  ;ParentControl=8 }
      { 10  ;TextBox      ;3410 ;3630 ;3850 ;440  ;Name=FileNameControl;
                                                   AssistEdit=No;
                                                   CaptionML=[ENU=File;
                                                              ESP=Archivo];
                                                   SourceExpr=OutFile }
      { 11  ;Label        ;0    ;3630 ;3300 ;440  ;ParentControl=10 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               FileNameControlVisible := TRUE;
             END;

      OnOpenPage=BEGIN
                   FileNameControlVisible := NOT ISSERVICETIER;
                     OnActivateForm;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=VAT entries included;
                             ESP=Movs. IVA incluidos];
                  OptionCaptionML=[ENU=Open,Closed,Open and Closed;
                                   ESP=Pendiente,Cerrado,Pendiente y cerrado];
                  SourceExpr=Selection }

      { 4   ;2   ;Field     ;
                  CaptionML=[ENU=VAT entries included;
                             ESP=Movs. IVA incluidos];
                  OptionCaptionML=[ENU=Before and Within Period,Within Period;
                                   ESP=Anteriores y comprendidos en el periodo,Comprendidos en el periodo];
                  SourceExpr=PeriodSelected }

      { 8   ;2   ;Field     ;
                  CaptionML=[ENU=Additional Currency;
                             ESP=Divisa adicional];
                  SourceExpr=PrintAmtInAddCurr }

      { 10  ;2   ;Field     ;
                  Name=FileNameControl;
                  AssistEdit=No;
                  CaptionML=[ENU=File;
                             ESP=Archivo];
                  SourceExpr=OutFile;
                  Visible=FileNameControlVisible }

    }
  }
  CODE
  {
    VAR
      Text1100000@1100045 : TextConst 'ENU=Previous and within the period VAT entries;ESP=Movs. IVA anteriores y comprendidos en el periodo';
      Text1100001@1100046 : TextConst 'ENU="Period: ";ESP="Periodo: "';
      Text1100003@1100048 : TextConst 'ENU=E;ESP=E';
      Text1100004@1100049 : TextConst 'ENU=VAT declaration must be %1 %2.;ESP=Declaraci¢n IVA debe ser %1 %2.';
      Text1100005@1100050 : TextConst 'ENU=The declaration does not exist;ESP=La declaraci¢n no existe';
      Text1100006@1100051 : TextConst 'ENU=C:\;ESP=C:\';
      Text1100007@1100052 : TextConst 'ENU=.txt;ESP=.txt';
      Text1100008@1100053 : TextConst 'ENU=Transference format line N§ %1 must be integer;ESP=El formato transfrencia l¡nea n§ %1 debe ser entero';
      Text1100009@1100054 : TextConst 'ENU=N;ESP=N';
      Text1100010@1100055 : TextConst 'ENU=<Precision,;ESP=<Precision,';
      Text1100011@1100056 : TextConst 'ENU=><Integer><Decimal>;ESP=><Integer><Decimal>';
      Text1100012@1100057 : TextConst 'ENU=<Integer>;ESP=<Integer>';
      Text1100013@1100058 : TextConst 'ENU=><Decimal>;ESP=><Decimal>';
      Text1100014@1100059 : TextConst 'ENU=The File Could not be created;ESP=No se ha podido crear el archivo';
      GLAccount@1100000 : Record 15;
      VATEntry@1100001 : Record 254;
      VATPostSetup@1100002 : Record 325;
      VATDeclarationName@1100003 : Record 257;
      GLSetup@1100004 : Record 98;
      TransferenceFormat@1100029 : TEMPORARY Record 10705;
      TemplateTransfFormat@1100030 : Record 10705;
      Selection@1100005 : 'Opened,Closed,Opened and Closed';
      PeriodSelected@1100006 : 'Previous and within the period,Within the period';
      IntegerPrinted@1100007 : Boolean;
      VATDeclLinFilt@1100008 : Text[250];
      Header@1100009 : Text[50];
      Amount@1100010 : Decimal;
      Base@1100011 : Decimal;
      VATAmount@1100013 : Decimal;
      VATAmountAC@1100060 : Decimal;
      TotalAmount@1100014 : Decimal;
      TotalBase@1100015 : Decimal;
      TotalECAmount@1100016 : Decimal;
      TotalVATAmount@1100017 : Decimal;
      RowNo@1100018 : ARRAY [6] OF Code[10];
      TextError@1100019 : Text[80];
      i@1100020 : Integer;
      VATPercentage@1100021 : Decimal;
      ECPercentage@1100022 : Decimal;
      PrintAmtInAddCurr@1100024 : Boolean;
      Negative@1100028 : Code[1];
      Counter@1100031 : Integer;
      Position@1100032 : Integer;
      FieldValue@1100033 : Text[30];
      Acum@1100034 : Integer;
      post@1100035 : Integer;
      Decimal1@1100037 : Text[30];
      Decimal2@1100038 : Text[30];
      CM@1100039 : ARRAY [5000] OF Text[1];
      Filled@1100040 : Char;
      String@1100041 : Text[250];
      StringLen@1100042 : Integer;
      j@1100043 : Integer;
      OutFile@1100044 : Text[30];
      RBMgt@1100012 : Codeunit 419;
      FromFile@1100023 : Text[1024];
      ToFile@1100025 : Text[1024];
      FileNameControlVisible@19024830 : Boolean INDATASET;

    PROCEDURE CalcTotLine@6(VATStatementLine2@1100000 : Record 256;VAR TotalAmount@1100001 : Decimal;Level@1100002 : Integer) : Boolean;
    BEGIN
      IF Level = 0 THEN
        TotalAmount := 0;
      CASE VATStatementLine2.Type OF
        VATStatementLine2.Type::"Account Totaling":
          BEGIN
            GLAccount.SETFILTER("No.",VATStatementLine2."Account Totaling");
            "VAT Declaration Line".COPYFILTER("Date Filter",GLAccount."Date Filter");
            Amount := 0;
            IF GLAccount.FIND('-') AND (VATStatementLine2."Account Totaling" <> '') THEN
              REPEAT
                GLAccount.CALCFIELDS("Net Change","Additional-Currency Net Change");
                Amount := ConditionalAdd(Amount,GLAccount."Net Change",GLAccount."Additional-Currency Net Change");
              UNTIL GLAccount.NEXT = 0;
            CalcTotAmount(VATStatementLine2,TotalAmount);
          END;
        VATStatementLine2.Type::"VAT Entry Totaling":
          BEGIN
            VATEntry.RESET;
            IF VATEntry.SETCURRENTKEY(
                 Type,Closed,"VAT Bus. Posting Group","VAT Prod. Posting Group","Posting Date")
            THEN BEGIN
              VATEntry.SETRANGE("VAT Bus. Posting Group",VATStatementLine2."VAT Bus. Posting Group");
              VATEntry.SETRANGE("VAT Prod. Posting Group",VATStatementLine2."VAT Prod. Posting Group");
            END ELSE BEGIN
              VATEntry.SETCURRENTKEY(
                Type,Closed,"Tax Jurisdiction Code","Use Tax","Posting Date");
              VATEntry.SETRANGE("Tax Jurisdiction Code",VATStatementLine2."Tax Jurisdiction Code");
              VATEntry.SETRANGE("Use Tax",VATStatementLine2."Use Tax");
            END;
            VATEntry.SETRANGE(Type,VATStatementLine2."Gen. Posting Type");
            IF "VAT Declaration Line".GETFILTER("Date Filter") <> '' THEN
              IF PeriodSelected = PeriodSelected::"Previous and within the period" THEN
                VATEntry.SETRANGE("Posting Date",0D,"VAT Declaration Line".GETRANGEMAX("Date Filter"))
              ELSE
                "VAT Declaration Line".COPYFILTER("Date Filter",VATEntry."Posting Date");
            CASE Selection OF
              Selection::Opened:
                VATEntry.SETRANGE(Closed,FALSE);
              Selection::Closed:
                VATEntry.SETRANGE(Closed,TRUE);
              ELSE
                VATEntry.SETRANGE(Closed);
            END;
            IF VATEntry.FIND('-') THEN;
            CASE VATStatementLine2."Amount Type" OF
              VATStatementLine2."Amount Type"::Amount:
                BEGIN
                  VATEntry.CALCSUMS(Amount,"Additional-Currency Amount");
                  IF VATPostSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group") THEN BEGIN
                    IF VATPostSetup."VAT+EC %" <> 0 THEN BEGIN
                      VATAmount := (VATEntry.Amount / VATPostSetup."VAT+EC %") * VATEntry."VAT %";
                      VATAmountAC := (VATEntry."Additional-Currency Amount" / VATPostSetup."VAT+EC %") * VATEntry."VAT %";
                    END;
                    Amount := ConditionalAdd(0,VATAmount,VATAmountAC);
                  END;
                END;
              VATStatementLine2."Amount Type"::Base:
                BEGIN
                  VATEntry.CALCSUMS(Base,"Additional-Currency Base");
                  Amount := ConditionalAdd(0,VATEntry.Base,VATEntry."Additional-Currency Base");
                END;
              VATStatementLine2."Amount Type"::"Unrealized Amount":
                BEGIN
                  VATEntry.CALCSUMS("Unrealized Amount","Add.-Currency Unrealized Amt.");
                  Amount := ConditionalAdd(0,VATEntry."Unrealized Amount",VATEntry."Add.-Currency Unrealized Amt.");
                END;
              VATStatementLine2."Amount Type"::"Unrealized Base":
                BEGIN
                  VATEntry.CALCSUMS("Unrealized Base","Add.-Currency Unrealized Base");
                  Amount := ConditionalAdd(0,VATEntry."Unrealized Base",VATEntry."Add.-Currency Unrealized Base");
                END;
              VATStatementLine2."Amount Type"::"Amount+Base":
                BEGIN
                  VATEntry.CALCSUMS(Amount,Base,"Additional-Currency Amount","Additional-Currency Base");
                  Amount := ConditionalAdd(0,VATEntry.Amount,VATEntry."Additional-Currency Amount");
                  Base := ConditionalAdd(0,VATEntry.Base,VATEntry."Additional-Currency Base");
                END;
            END;
            CalcTotAmount(VATStatementLine2,TotalAmount);
          END;
        VATStatementLine2.Type::"Row Totaling":
          BEGIN
            IF Level >= ARRAYLEN(RowNo) THEN
              EXIT(FALSE);
            Level := Level + 1;
            RowNo[Level] := VATStatementLine2."Row No.";

            IF VATStatementLine2."Row Totaling" = '' THEN
              EXIT(TRUE);
            VATStatementLine2.SETRANGE("Statement Template Name",VATStatementLine2."Statement Template Name");
            VATStatementLine2.SETRANGE("Statement Name",VATStatementLine2."Statement Name");
            VATStatementLine2.SETFILTER("Row No.",VATStatementLine2."Row Totaling");
            IF VATStatementLine2.FIND('-') THEN
              REPEAT
                IF NOT CalcTotLine(VATStatementLine2,TotalAmount,Level) THEN BEGIN
                  IF Level > 1 THEN
                    EXIT(FALSE);
                  FOR i := 1 TO ARRAYLEN(RowNo) DO
                    TextError := TextError + RowNo[i] + ' => ';
                  TextError := TextError + '...';
                  VATStatementLine2.FIELDERROR("Row No.",TextError);
                END;
              UNTIL VATStatementLine2.NEXT = 0;
          END;
        VATStatementLine2.Type::Description:
          ;
        VATStatementLine2.Type::"EC Entry Totaling":
          BEGIN
            VATEntry.RESET;
            IF VATEntry.SETCURRENTKEY(
                 Type,Closed,"VAT Bus. Posting Group","VAT Prod. Posting Group","Posting Date")
            THEN BEGIN
              VATEntry.SETRANGE("VAT Bus. Posting Group",VATStatementLine2."VAT Bus. Posting Group");
              VATEntry.SETRANGE("VAT Prod. Posting Group",VATStatementLine2."VAT Prod. Posting Group");
            END ELSE BEGIN
              VATEntry.SETCURRENTKEY(
                Type,Closed,"Tax Jurisdiction Code","Use Tax","Posting Date");
              VATEntry.SETRANGE("Tax Jurisdiction Code",VATStatementLine2."Tax Jurisdiction Code");
              VATEntry.SETRANGE("Use Tax",VATStatementLine2."Use Tax");
            END;
            VATEntry.SETRANGE(Type,VATStatementLine2."Gen. Posting Type");
            IF "VAT Declaration Line".GETFILTER("Date Filter") <> '' THEN
              IF PeriodSelected = PeriodSelected::"Previous and within the period" THEN
                VATEntry.SETRANGE("Posting Date",0D,"VAT Declaration Line".GETRANGEMAX("Date Filter"))
              ELSE
                "VAT Declaration Line".COPYFILTER("Date Filter",VATEntry."Posting Date");
            CASE Selection OF
              Selection::Opened:
                VATEntry.SETRANGE(Closed,FALSE);
              Selection::Closed:
                VATEntry.SETRANGE(Closed,TRUE);
              ELSE
                VATEntry.SETRANGE(Closed);
            END;
            IF VATEntry.FIND('-') THEN;
            CASE VATStatementLine2."Amount Type" OF
              VATStatementLine2."Amount Type"::Amount:
                BEGIN
                  VATEntry.CALCSUMS(Amount,"Additional-Currency Amount");
                  IF VATPostSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group") THEN BEGIN
                    IF VATPostSetup."VAT+EC %" <> 0 THEN BEGIN
                      VATAmount := (VATEntry.Amount / VATPostSetup."VAT+EC %") * VATEntry."EC %";
                      VATAmountAC := (VATEntry."Additional-Currency Amount" / VATPostSetup."VAT+EC %") * VATEntry."EC %";
                    END;
                    Amount := ConditionalAdd(0,VATAmount,VATAmountAC);
                  END;
                END;
              VATStatementLine2."Amount Type"::Base:
                BEGIN
                  VATEntry.CALCSUMS(Base,"Additional-Currency Base");
                  Amount := ConditionalAdd(0,VATEntry.Base,VATEntry."Additional-Currency Base");
                END;
              VATStatementLine2."Amount Type"::"Unrealized Amount":
                BEGIN
                  VATEntry.CALCSUMS("Unrealized Amount","Add.-Currency Unrealized Amt.");
                  Amount := ConditionalAdd(0,VATEntry."Unrealized Amount",VATEntry."Add.-Currency Unrealized Amt.");
                END;
              VATStatementLine2."Amount Type"::"Unrealized Base":
                BEGIN
                  VATEntry.CALCSUMS("Unrealized Base","Add.-Currency Unrealized Base");
                  Amount := ConditionalAdd(0,VATEntry."Unrealized Base",VATEntry."Add.-Currency Unrealized Base");
                END;
              VATStatementLine2."Amount Type"::"Amount+Base":
                BEGIN
                  VATEntry.CALCSUMS(Amount,Base,"Additional-Currency Amount","Additional-Currency Base");
                  Amount := ConditionalAdd(0,VATEntry.Amount,VATEntry."Additional-Currency Amount");
                  Base := ConditionalAdd(0,VATEntry.Base,VATEntry."Additional-Currency Base");
                END;
            END;
            CalcTotAmount(VATStatementLine2,TotalAmount);
          END;

      END;


      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CalcTotAmount@19(VATStatementLine2@1100000 : Record 256;VAR TotalAmount@1100001 : Decimal);
    BEGIN
      IF VATStatementLine2."Calculate with" = 1 THEN BEGIN
        Amount := -Amount;
        Base := -Base;
      END;
      TotalAmount := TotalAmount + Amount;
      TotalBase := TotalBase + Base;

      VATPostSetup.GET(VATStatementLine2."VAT Bus. Posting Group",VATStatementLine2."VAT Prod. Posting Group");
      VATPercentage := VATPostSetup."VAT %";
      ECPercentage := VATPostSetup."EC %";
      VATAmount := Amount;
      IF VATPostSetup."VAT+EC %" <> 0 THEN
        VATAmount := VATAmount / VATPostSetup."VAT+EC %" * VATPercentage;
      TotalVATAmount := TotalVATAmount + VATAmount;
      TotalECAmount := TotalAmount - TotalVATAmount;
    END;

    PROCEDURE InitializeSettings@7(VAR NewVATDeclName@1100000 : Record 257;VAR NewVATDDeclLineName@1100001 : Record 256;NewSelection@1100002 : 'Opened,Closed,Opened and Closed ';NewPeriodSelection@1100003 : 'Previous and within the period,Within the period ';NewPrintedInteger@1100004 : Boolean);
    BEGIN
      "VAT Statement Name".COPY(NewVATDeclName);
      "VAT Declaration Line".COPY(NewVATDDeclLineName);
      Selection := NewSelection;
      PeriodSelected := NewPeriodSelection;
      IntegerPrinted := NewPrintedInteger;
    END;

    PROCEDURE ConditionalAdd@4(Amount@1100000 : Decimal;AmtInAddCurr@1100001 : Decimal;SumAmtInAddCurr@1100002 : Decimal) : Decimal;
    BEGIN
      IF PrintAmtInAddCurr THEN
        EXIT(Amount + SumAmtInAddCurr)
      ELSE
        EXIT(Amount + AmtInAddCurr);
    END;

    PROCEDURE LoadValue@1(VAR TransFormat@1100000 : Record 10705;Amt@1100001 : Decimal);
    BEGIN
      IF TransFormat.Type <> TransFormat.Type::Numerical THEN
        ERROR(Text1100008,TransFormat."No.");

      IF Amt < 0 THEN BEGIN
        Negative := Text1100009;
        Amt := -Amt;
      END ELSE
        Negative := '';

      CASE TransFormat.Subtype OF
        TransFormat.Subtype::"Integer and Decimal Part":
          BEGIN
            TransFormat.Value := Negative + FORMAT(Amt,TransFormat.Length - STRLEN(Negative),Text1100010 + '2' + Text1100011);
            TransFormat.Value := CONVERTSTR(DELCHR(TransFormat.Value,'=',',.'),' ','0');
            TransFormat.Value := PADSTR('',TransFormat.Length - STRLEN(TransFormat.Value),'0') + TransFormat.Value;
          END;
        TransFormat.Subtype::"Integer Part":
          BEGIN
            TransFormat.Value := Negative + FORMAT(Amt,TransFormat.Length - STRLEN(Negative),Text1100012);
            TransFormat.Value := CONVERTSTR(CONVERTSTR(TransFormat.Value,',','.'),' ','0');
          END;
        TransFormat.Subtype::"Decimal Part":
          BEGIN
            TransFormat.Value := FORMAT(Amt,TransFormat.Length + 1,Text1100010 + FORMAT(TransFormat.Length,1) + Text1100013);
            TransFormat.Value := CONVERTSTR(DELCHR(TransFormat.Value,'=','.,'),' ','0');
            TransFormat.Value := PADSTR('',TransFormat.Length - STRLEN(TransFormat.Value),'0') + TransFormat.Value;
          END;
      END;
      TransFormat.MODIFY;
    END;

    PROCEDURE FileGeneration@3(VAR TransFormat@1100000 : Record 10705);
    VAR
      File@1100001 : File;
    BEGIN
      TransFormat.FIND('+');
      CLEAR(File);
      File.WRITEMODE(TRUE);
      File.TEXTMODE(FALSE);
      IF NOT ISSERVICETIER THEN BEGIN
        IF NOT File.CREATE(OutFile) THEN
          ERROR(Text1100014);
      END ELSE BEGIN
        FromFile := RBMgt.EnvironFileName('','');
        ToFile := "VAT Declaration Line"."Statement Name" + Text1100007;
        File.CREATE(FromFile);
      END;

      FOR i := 1 TO 5000 DO CM[i] := ' ';
      Acum := 0;
      TransFormat.FIND('-');
      REPEAT
        IF (TransFormat.Position + TransFormat.Length) > Acum THEN BEGIN
          post := TransFormat."No.";
          Acum := TransFormat.Position + TransFormat.Length;
        END;
      UNTIL TransFormat.NEXT = 0 ;
      Acum := Acum - 1;
      Filled := ' ';
      FOR i := 1 TO Acum DO File.WRITE(Filled);

      TransFormat.FIND('-');
      REPEAT
        Position := TransFormat.Position;
        Counter := TransFormat.Length - STRLEN(TransFormat.Value);
        FieldValue := TransFormat.Value;
        CASE TransFormat.Type OF
          TransFormat.Type::Alphanumerical:
            BEGIN
              FOR i := 1 TO TransFormat.Length DO BEGIN
                IF i > STRLEN(FieldValue) THEN
                  CM[Position] := ' '
                ELSE
                  CM[Position] := COPYSTR(FieldValue,i,1);
                Position := Position + 1;
              END;
            END;
          TransFormat.Type::Numerical:
            BEGIN
              WHILE Counter > 0 DO BEGIN
                Counter := Counter - 1;
                CM[Position] := '0';
                Position := Position + 1;
              END;
              IF TransFormat.Subtype = TransFormat.Subtype::"Integer and Decimal Part" THEN BEGIN
                IF STRPOS(FieldValue,'.') <> 0 THEN BEGIN
                  Decimal1 := DELSTR(FieldValue,1,STRLEN(FieldValue)-1);
                  Decimal2 := DELSTR(FieldValue,1,STRLEN(FieldValue)-2);
                  Decimal2 := DELSTR(Decimal2,2,1);
                  FieldValue := DELSTR(FieldValue,15,3);
                  FieldValue := '0' + FieldValue;
                  FieldValue := FieldValue + Decimal2 + Decimal1;
                END;
              END;
              FOR i := 1 TO STRLEN(FieldValue) DO BEGIN
                CM[Position] := COPYSTR(FieldValue,i,1);
                Position := Position + 1;
              END;
            END;
          TransFormat.Type::Fix:
            BEGIN
              FOR i := 1 TO TransFormat.Length DO BEGIN
                CM[Position] := COPYSTR(FieldValue,i,1);
                Position := Position + 1;
              END;
            END;
          TransFormat.Type::Ask:
            BEGIN
              FOR i := 1 TO TransFormat.Length DO BEGIN
                IF i > STRLEN(FieldValue) THEN
                  CM[Position] := ' '
                ELSE
                  CM[Position] := COPYSTR(FieldValue,i,1);
                Position := Position + 1;
              END;
            END;
          TransFormat.Type::Currency:
            BEGIN
              FOR i := 1 TO TransFormat.Length DO BEGIN
                CM[Position] := COPYSTR(FieldValue,i,1);
                Position := Position + 1;
              END;
            END;
        END;
      UNTIL TransFormat.NEXT = 0 ;
      TransFormat.FIND('-');

      StringLen := Acum - 1;
      i := 0;
      REPEAT
        String := '';
        File.SEEK(i * 250);
        IF StringLen > 250 THEN BEGIN
          FOR j := 1 TO 250  DO BEGIN
            String := String + CM[250 * i + j];
          END;
          File.WRITE(String);
          StringLen := StringLen - 250;
        END ELSE BEGIN
          FOR j := 1 TO StringLen DO
            String := String + CM[250 * i + j];
          File.WRITE(COPYSTR(String,1,STRLEN(String)));
          StringLen := 0;
        END;
        i := i + 1;
      UNTIL StringLen = 0;
      File.CLOSE;
      IF ISSERVICETIER THEN
        DOWNLOAD(FromFile,'',Text1100006,'',ToFile);
    END;

    PROCEDURE CurrentAsign@2(VATStatementLine@1100000 : Record 256);
    BEGIN
      "VAT Declaration Line" := VATStatementLine;
    END;

    LOCAL PROCEDURE OnActivateForm@19002417();
    BEGIN
      OutFile := Text1100006 + "VAT Declaration Line"."Statement Name" + Text1100007
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
