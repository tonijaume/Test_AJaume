OBJECT Report 99001015 Calculate Subcontracts
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Calculate Subcontracts;
               ESP=Calcular subcontratos];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   OrderDate := WORKDATE;
                   MfgSetup.GET;
                 END;

    OnPreReport=BEGIN
                  ReqWkshTmpl.GET(ReqLine."Worksheet Template Name");
                  ReqWkShName.GET(ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name");
                  ReqLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
                  ReqLine.SETRANGE("Journal Batch Name",ReqLine."Journal Batch Name");
                  ReqLine.LOCKTABLE;

                  IF ReqLine.FIND('+') THEN
                    ReqLine.INIT;
                  Window.OPEN(Text000 + Text001);
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table99000754;
        DataItemTableView=SORTING(No.);
        OnPreDataItem=BEGIN
                        ReqLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
                        ReqLine.SETRANGE("Journal Batch Name",ReqLine."Journal Batch Name");
                        ReqLine.DELETEALL;
                      END;

        OnAfterGetRecord=BEGIN
                           IF "Subcontractor No." = '' THEN
                             CurrReport.SKIP;

                           Window.UPDATE(1,"No.");
                         END;

        ReqFilterFields=No.,Subcontractor No.;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table5409;
        DataItemTableView=SORTING(Type,No.)
                          WHERE(Status=CONST(Released),
                                Type=CONST(Work Center),
                                Routing Status=FILTER(<Finished));
        OnAfterGetRecord=BEGIN
                           Window.UPDATE(2,"Prod. Order No.");

                           ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing No.","Routing Reference No.");
                           ProdOrderLine.SETRANGE(Status,Status);
                           ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
                           ProdOrderLine.SETRANGE("Routing No.","Routing No.");
                           ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
                           IF ProdOrderLine.FIND('-') THEN
                             REPEAT
                               BaseQtyToPurch :=
                                 CostCalcMgt.CalcQtyAdjdForRoutingScrap(
                                   CostCalcMgt.CalcQtyAdjdForBOMScrap(
                                     ProdOrderLine."Quantity (Base)",ProdOrderLine."Scrap %"),
                                   "Scrap Factor % (Accumulated)","Fixed Scrap Qty. (Accum.)") -
                                 (CostCalcMgt.CalcOutputQtyBaseOnPurchOrder(ProdOrderLine,"Prod. Order Routing Line") +
                                  CostCalcMgt.CalcActOutputQtyBase(ProdOrderLine,"Prod. Order Routing Line"));
                               QtyToPurch := ROUND(BaseQtyToPurch / ProdOrderLine."Qty. per Unit of Measure",0.00001);
                               IF QtyToPurch > 0 THEN
                                 InsertReqWkshLine;
                             UNTIL ProdOrderLine.NEXT = 0;
                         END;

        ReqFilterFields=Prod. Order No.,Starting Date;
        DataItemLink=No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=5060;
      Height=440;
    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;0    ;1650 ;440  ;CaptionML=[ENU=Order Date;
                                                              ESP=Fecha pedido];
                                                   SourceExpr=OrderDate }
      { 2   ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=1 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Order Date;
                             ESP=Fecha pedido];
                  SourceExpr=OrderDate }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Processing Work Centers   #1##########\;ESP=Proces. centros trabajo   #1##########\';
      Text001@1001 : TextConst 'ENU="Processing Orders         #2########## ";ESP="Procesando ¢rdenes        #2########## "';
      MfgSetup@1002 : Record 99000765;
      ReqWkshTmpl@1003 : Record 244;
      ReqWkShName@1004 : Record 245;
      ReqLine@1005 : Record 246;
      ProdOrderLine@1006 : Record 5406;
      GLSetup@1013 : Record 98;
      PurchLine@1014 : Record 39;
      CostCalcMgt@1007 : Codeunit 5836;
      Window@1008 : Dialog;
      OrderDate@1009 : Date;
      BaseQtyToPurch@1010 : Decimal;
      QtyToPurch@1011 : Decimal;
      GLSetupRead@1012 : Boolean;

    PROCEDURE SetWkShLine@1(NewReqLine@1000 : Record 246);
    BEGIN
      ReqLine := NewReqLine;
    END;

    LOCAL PROCEDURE InsertReqWkshLine@3();
    BEGIN
      ProdOrderLine.CALCFIELDS("Total Exp. Oper. Output (Qty.)");

      WITH ReqLine DO BEGIN
        SetSubcontracting(TRUE);
        BlockDynamicTracking(TRUE);

        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE(Type,Type::Item);
        VALIDATE("No.",ProdOrderLine."Item No.");
        VALIDATE("Variant Code",ProdOrderLine."Variant Code");
        VALIDATE("Unit of Measure Code",ProdOrderLine."Unit of Measure Code");
        VALIDATE(Quantity,QtyToPurch);
        GetGLSetup;
        IF Quantity <> 0 THEN BEGIN
          IF "Work Center"."Unit Cost Calculation" = "Work Center"."Unit Cost Calculation"::Units THEN
            VALIDATE(
              "Direct Unit Cost",
              ROUND(
                "Prod. Order Routing Line"."Direct Unit Cost" *
                ProdOrderLine."Qty. per Unit of Measure",
                GLSetup."Unit-Amount Rounding Precision"))
          ELSE
            VALIDATE(
              "Direct Unit Cost",
              ROUND(
                ("Prod. Order Routing Line"."Expected Operation Cost Amt." -
                 "Prod. Order Routing Line"."Expected Capacity Ovhd. Cost") /
                ProdOrderLine."Total Exp. Oper. Output (Qty.)",
                GLSetup."Unit-Amount Rounding Precision"));
        END ELSE
          VALIDATE("Direct Unit Cost",0);
        "Qty. per Unit of Measure" := 0;
        "Quantity (Base)" := 0;
        "Prod. Order No." := ProdOrderLine."Prod. Order No.";
        "Prod. Order Line No." := ProdOrderLine."Line No.";
        "Due Date" := "Prod. Order Routing Line"."Ending Date";
        "Requester ID" := USERID;
        "Location Code" := ProdOrderLine."Location Code";
        "Bin Code" := ProdOrderLine."Bin Code";
        "Order Date" := OrderDate;
        "Routing Reference No." := "Prod. Order Routing Line"."Routing Reference No.";
        "Routing No." := "Prod. Order Routing Line"."Routing No.";
        "Operation No." := "Prod. Order Routing Line"."Operation No.";
        "Work Center No." := "Prod. Order Routing Line"."Work Center No.";
        VALIDATE("Vendor No.","Work Center"."Subcontractor No.");
        Description := "Prod. Order Routing Line".Description;

        // If purchase order already exist we will change this if possible
        PurchLine.RESET;
        PurchLine.SETCURRENTKEY("Document Type",Type,"Prod. Order No.","Prod. Order Line No.","Routing No.","Operation No.");
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
        PurchLine.SETRANGE(Type,PurchLine.Type::Item);
        PurchLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        PurchLine.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
        PurchLine.SETRANGE("Routing No.","Prod. Order Routing Line"."Routing No.");
        PurchLine.SETRANGE("Operation No.","Prod. Order Routing Line"."Operation No.");
        PurchLine.SETRANGE("Planning Flexibility",PurchLine."Planning Flexibility"::Unlimited);
        PurchLine.SETRANGE("Quantity Received",0);
        IF PurchLine.FIND('-') THEN BEGIN
          VALIDATE(Quantity,Quantity + PurchLine."Outstanding Quantity");
          "Quantity (Base)" := 0;
          "Replenishment System" := "Replenishment System"::Purchase;
          "Ref. Order No." := PurchLine."Document No.";
          "Ref. Order Type" := "Ref. Order Type"::Purchase;
          "Ref. Line No." := PurchLine."Line No.";
          IF PurchLine."Expected Receipt Date" = "Due Date" THEN
            "Action Message" := "Action Message"::"Change Qty."
          ELSE
            "Action Message" := "Action Message"::"Resched. & Chg. Qty.";
          "Accept Action Message" := TRUE;
        END ELSE BEGIN
          "Ref. Order No." := ProdOrderLine."Prod. Order No.";
          "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
          "Ref. Order Status" := ProdOrderLine.Status;
          "Ref. Line No." := ProdOrderLine."Line No.";
          "Action Message" := "Action Message"::New;
          "Accept Action Message" := TRUE;
        END;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
