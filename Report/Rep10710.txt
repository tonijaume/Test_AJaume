OBJECT Report 10710 Make 349 Declaration
{
  OBJECT-PROPERTIES
  {
    Date=31/10/11;
    Time=12:00:00;
    Version List=NAVES6.00.01,PS47880,RegF285416;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Make 349 Declaration;
               ESP=Modelo 349];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CompanyInfo.GET;
                   VatRegNo := COPYSTR(DELCHR(CompanyInfo."VAT Registration No.",'=','.-/'),1,9);
                   NoOperations := 0;
                   NoOfRectShips := 0;
                   NoOfRectReciv := 0;
                   OperationCode[Idx::E] := 'E';
                   OperationCode[Idx::M] := 'M';
                   OperationCode[Idx::H] := 'H';
                 END;

    OnPreReport=VAR
                  RBMgt@1100000 : Codeunit 419;
                  TempString@1100001 : Text[9];
                  TempString1@1100002 : Text[1];
                BEGIN
                  IF FiscalYear = '' THEN
                    ERROR(Text1100000);
                  IF ContactName = '' THEN
                    ERROR(Text1100001);
                  IF ContactTelephone = '' THEN
                    ERROR(Text1100002);
                  TempString := ContactTelephone;
                  IF STRLEN(TempString) > 0 THEN
                    REPEAT
                      TempString1 := COPYSTR(TempString,1,1);
                      IF NOT (TempString1 IN ['0'..'9']) THEN
                        ERROR(Text1100012);
                      TempString := DELSTR(TempString,1,1);
                    UNTIL STRLEN(TempString) = 0;
                  IF DeclarationNum = '' THEN
                    ERROR(Text1100003);
                  IF CountryCode = '' THEN
                    ERROR(Text1100004);

                  IF ISSERVICETIER THEN
                    FileName := RBMgt.EnvironFileName('','txt');

                  CLEAR(OutFile);
                  OutFile.TEXTMODE := TRUE;
                  OutFile.WRITEMODE := TRUE;
                  IF OutFile.OPEN(FileName) THEN BEGIN
                    IF NOT CONFIRM(Text1100014,FALSE) THEN
                      ERROR(Text1100011)
                    ELSE
                      OutFile.CREATE(FileName);
                  END ELSE
                    OutFile.CREATE(FileName);
                  OutFile.CREATEOUTSTREAM(OutStr);
                  IF ColumnGPPG = '' THEN
                    MESSAGE(Text1100005)
                  ELSE
                    IF FilterString = '' THEN
                      GetFilterStringFromColumnGPPG;
                  GetCompInfShipToCountryRegCode(CompInfShipToCountryRegCode);
                  GetCompanyCountryRegCode(ReqFormCountryRegCode);
                  CheckIfEULocations(AllLocationsAreEU);
                  CVWarning349.Initialize(FiscalYear,FORMAT(Period));
                  EmptyVATRegNo := FALSE;
                END;

    OnPostReport=VAR
                   PeriodInt@1100000 : Integer;
                 BEGIN
                   IF TotalAmtShip < 0 THEN
                     TotalAmtShip := -TotalAmtShip;
                   TextOpAmount := FormatTextAmt(TotalAmtShip + TotalAmtReciv);
                   TextCorreAmount := FormatTextAmt(TotalCorreAmt);

                   CASE DeclarationMediaType OF
                     DeclarationMediaType::Telematic: DeclarationMT := 'T';
                     DeclarationMediaType::"Physical support": DeclarationMT := 'C';
                   END;
                   IF ISSERVICETIER AND (STRLEN(FORMAT(Period)) <> 2)THEN BEGIN
                     PeriodInt := Period;
                     PeriodText := FORMAT(PeriodInt,2,'<Integer,2><Filler Character,0>');
                   END ELSE
                     PeriodText := FORMAT(Period);

                   IF PeriodFreqChange THEN
                     PeriodChangeText := 'X'
                   ELSE
                     PeriodChangeText := ' ';
                   IF (TextOpAmount <> PADSTR('',15,'0')) OR (TextCorreAmount <> PADSTR('',15,'0')) OR (NoOfCorrections <> 0) THEN BEGIN
                     Txt :=
                       '1' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') +
                       PADSTR(CONVERTSTR(UPPERCASE(CompanyInfo.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') + DeclarationMT +
                       CONVERTSTR(FORMAT(ContactTelephone,9),' ','0') +
                       PADSTR(CONVERTSTR(UPPERCASE(ContactName),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                       DeclarationNum +
                       '  ' + PADSTR('',13,'0') + PeriodText +
                       CONVERTSTR(FORMAT(NoOperations,9),' ','0') + CONVERTSTR(TextOpAmount,' ','0') +
                       CONVERTSTR(FORMAT(NoOfCorrections,9),' ','0') + CONVERTSTR(TextCorreAmount,' ','0') +
                       PeriodChangeText + PADSTR('',314,' ');

                     OutFile.SEEK(0);
                     OutStr.WRITETEXT(Txt);
                     OutFile.CLOSE;
                     IF NOT ISSERVICETIER THEN
                       MESSAGE(Text1100010,FileName);
                   END ELSE BEGIN
                     OutFile.CLOSE;
                     ERASE(FileName);
                     MESSAGE(Text1100013);
                   END;

                   CustVendWarning349.RESET;
                   CustVendWarning349.DELETEALL;

                   IF ISSERVICETIER THEN BEGIN
                     ToFile := Text1100016 + '.txt';
                     IF NOT DOWNLOAD(FileName,Text1100006,'',Text1100017,ToFile) THEN
                       EXIT;
                     MESSAGE(Text1100010,ToFile);
                   END;
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        OnAfterGetRecord=VAR
                           Periodstr@1100000 : Integer;
                         BEGIN
                           IF NOT EVALUATE(NumFiscalYear,FiscalYear) THEN
                             ERROR(Text1100000);
                           FiscalYear2 := COPYSTR(FiscalYear,3,2);

                           CASE TRUE OF
                             Period IN [1..12]:
                               BEGIN
                                 FromDate := DMY2DATE(1,Period,NumFiscalYear);
                                 ToDate := CALCDATE('<+CM>',FromDate);
                                 IF PeriodFreqChange THEN
                                   FromDate := DMY2DATE(1,(Period - 1),NumFiscalYear);
                               END;
                             Period IN [Period::"1T",Period::"2T",Period::"3T",Period::"4T"]:
                               BEGIN
                                 EVALUATE(NumPeriod,DELCHR(FORMAT(Period) , '=', 'T'));
                                 FromDate := DMY2DATE(1,(NumPeriod * 3) - 2,NumFiscalYear);
                                 ToDate := CALCDATE('<+CQ>',FromDate);
                               END;
                             Period = Period::"0A":
                               BEGIN
                                 FromDate := DMY2DATE(1,1,NumFiscalYear);
                                 ToDate := CALCDATE('<+CY>',FromDate);
                               END;
                             ELSE
                               ERROR(Text1100000);
                           END;
                         END;

        OnPostDataItem=BEGIN
                         Txt := PADSTR('',500,' ');
                         OutFile.WRITE(Txt);
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=15600;
            SectionHeight=423;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table18;
        DataItemTableView=SORTING(VAT Registration No.);
        DataItemVarName=CustomerWarnings;
        PrintOnlyIfDetail=No;
        OnPreDataItem=BEGIN
                        PreVATRegNo := '';
                      END;

        OnAfterGetRecord=VAR
                           PeriodInt@1100000 : Integer;
                         BEGIN
                           WHILE (CustomerWarnings."VAT Registration No." = PreVATRegNo) AND (PreVATRegNo <> '') DO
                             IF CustomerWarnings.NEXT = 0 THEN
                               EXIT;
                           PreVATRegNo := CustomerWarnings."VAT Registration No.";

                           Customer2.RESET;
                           Customer2.SETRANGE("VAT Registration No.","VAT Registration No.");
                           IF Customer2.FIND('-') THEN
                           BEGIN
                             REPEAT
                               VATCredSales.RESET;
                               VATCredSales.SETRANGE(Type,VATCredSales.Type::Sale);
                               VATCredSales.SETRANGE("Document Type",VATCredSales."Document Type"::"Credit Memo");
                               VATCredSales.SETRANGE("Bill-to/Pay-to No.",Customer2."No.");
                               VATCredSales.SETRANGE("Posting Date",FromDate,ToDate);
                               VATCredSales.SETFILTER("Gen. Prod. Posting Group",FilterString);
                               IF VATCredSales.FIND('-') THEN BEGIN
                                 REPEAT
                                   IF IncludeIn349(VATCredSales,AmountToIncludein349,LocationDiffCountryCode) THEN BEGIN
                                     IF (VATCredSales."Country/Region Code" <> CountryCode) OR
                                       ((VATCredSales."Country/Region Code" = CountryCode) AND LocationDiffCountryCode) THEN BEGIN
                                       CustEntries.SETRANGE("Document Type",VATCredSales."Document Type");
                                       CustEntries.SETRANGE("Document No.",VATCredSales."Document No.");
                                       CustEntries.SETRANGE("Customer No.",VATCredSales."Bill-to/Pay-to No.");
                                       CustEntries.SETRANGE("Customer No.",Customer2."No.");
                                       CustEntries.FIND('-');
                                       IF ((CustEntries."Applies-to Doc. Type" = 2) OR
                                         (CustEntries."Applies-to Doc. Type" = 5)) AND
                                         (CustEntries."Closed by Entry No." <> 0) AND
                                         CustEntries2.GET(CustEntries."Closed by Entry No.")
                                       THEN
                                         RectFiscalYear := FORMAT(DATE2DMY(CustEntries2."Posting Date",3))
                                       ELSE
                                         RectFiscalYear := FORMAT(DATE2DMY(CustEntries."Posting Date",3));

                                         IF ISSERVICETIER AND (STRLEN(FORMAT(Period)) <> 2)THEN BEGIN
                                           PeriodInt := Period;
                                           RectPeriod := FORMAT(PeriodInt,2,'<Integer,2><Filler Character,0>');
                                         END ELSE
                                           RectPeriod := FORMAT(Period);

                                         IF CustVendWarning349.FINDFIRST THEN
                                           CustVendWarning349.FINDLAST;
                                         CustVendWarning349.INIT;
                                         CustVendWarning349."Entry No." := CustVendWarning349."Entry No." + 1;
                                         CustVendWarning349.Type := CustVendWarning349.Type::Sale;
                                         CustVendWarning349."Customer/Vendor No." := Customer2."No.";
                                         CustVendWarning349."Customer/Vendor Name" := Customer2.Name;
                                         CustVendWarning349."Posting Date" := VATCredSales."Posting Date";
                                         CustVendWarning349."Document No." := VATCredSales."Document No.";
                                         CustVendWarning349."EU 3-Party Trade" := VATCredSales."EU 3-Party Trade";
                                         CustVendWarning349."EU Service" := VATCredSales."EU Service";
                                         CustVendWarning349."Original Declaration FY" := RectFiscalYear;
                                         CustVendWarning349."Original Declaration Period" := RectPeriod;
                                         CustVendWarning349."VAT Entry No." := VATCredSales."Entry No.";
                                         CustVendWarning349."Delivery Operation Code" := VATCredSales."Delivery Operation Code";
                                         IF VATCredSales.Base >= 0 THEN
                                           CustVendWarning349.Sign := '-'
                                         ELSE
                                           CustVendWarning349.Sign := '+';
                                         CustVendWarning349.INSERT;
                                     END;
                                   END;
                                 UNTIL VATCredSales.NEXT = 0;
                               END;
                             UNTIL Customer2.NEXT = 0;

                             COMMIT;
                           END;
                         END;

        GroupTotalFields=VAT Registration No.;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=GroupFooter;
            SectionWidth=15600;
            SectionHeight=423;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table23;
        DataItemTableView=SORTING(VAT Registration No.);
        DataItemVarName=VendorWarnings;
        PrintOnlyIfDetail=No;
        OnPreDataItem=BEGIN
                        PreVATRegNo := '';
                      END;

        OnAfterGetRecord=VAR
                           PeriodInt@1100000 : Integer;
                         BEGIN
                           WHILE (VendorWarnings."VAT Registration No." = PreVATRegNo) AND (PreVATRegNo <> '') DO
                             IF VendorWarnings.NEXT = 0 THEN
                               EXIT;
                           PreVATRegNo := VendorWarnings."VAT Registration No.";

                           Vendor2.RESET;
                           Vendor2.SETRANGE("VAT Registration No.","VAT Registration No.");
                           IF Vendor2.FIND('-') THEN
                           BEGIN
                             REPEAT
                               VATCredPurch.RESET;
                               VATCredPurch.SETRANGE(Type,VATCredPurch.Type::Purchase);
                               VATCredPurch.SETRANGE("Document Type",VATCredPurch."Document Type"::"Credit Memo");
                               VATCredPurch.SETRANGE("Bill-to/Pay-to No.",Vendor2."No.");
                               VATCredPurch.SETRANGE("Posting Date",FromDate,ToDate);
                               VATCredPurch.SETFILTER("Gen. Prod. Posting Group",FilterString);
                               IF VATCredPurch.FIND('-') THEN BEGIN
                                 REPEAT
                                   IF IncludeIn349(VATCredPurch,AmountToIncludein349,LocationDiffCountryCode) THEN BEGIN
                                     IF (VATCredPurch."Country/Region Code" <> CountryCode) OR
                                       ((VATCredPurch."Country/Region Code" = CountryCode) AND LocationDiffCountryCode) THEN BEGIN
                                       VendEntries.SETRANGE("Document Type",VATCredPurch."Document Type");
                                       VendEntries.SETRANGE("Document No.",VATCredPurch."Document No.");
                                       VendEntries.SETRANGE("Vendor No.",VATCredPurch."Bill-to/Pay-to No.");
                                       VendEntries.SETRANGE("Vendor No.",Vendor2."No.");
                                       VendEntries.FIND('-');
                                       IF ((VendEntries."Applies-to Doc. Type" = 2) OR
                                         (VendEntries."Applies-to Doc. Type" = 5)) AND
                                         (VendEntries."Closed by Entry No." <> 0) AND
                                         VendEntries2.GET(VendEntries."Closed by Entry No.")
                                       THEN
                                         RectFiscalYear := FORMAT(DATE2DMY(VendEntries2."Posting Date",3))
                                       ELSE
                                         RectFiscalYear := FORMAT(DATE2DMY(VendEntries."Posting Date",3));

                                         IF ISSERVICETIER AND (STRLEN(FORMAT(Period)) <> 2)THEN BEGIN
                                           PeriodInt := Period;
                                           RectPeriod := FORMAT(PeriodInt,2,'<Integer,2><Filler Character,0>');
                                         END ELSE
                                           RectPeriod := FORMAT(Period);

                                         IF CustVendWarning349.FINDFIRST THEN
                                           CustVendWarning349.FINDLAST;
                                         CustVendWarning349.INIT;
                                         CustVendWarning349."Entry No." := CustVendWarning349."Entry No." + 1;
                                         CustVendWarning349.Type := CustVendWarning349.Type::Purchase;
                                         CustVendWarning349."Customer/Vendor No." := Vendor2."No.";
                                         CustVendWarning349."Customer/Vendor Name" := Vendor2.Name;
                                         CustVendWarning349."Posting Date" := VATCredPurch."Posting Date";
                                         CustVendWarning349."Document No." := VATCredPurch."Document No.";
                                         CustVendWarning349."EU 3-Party Trade" := VATCredPurch."EU 3-Party Trade";
                                         CustVendWarning349."EU Service" := VATCredPurch."EU Service";
                                         CustVendWarning349."Original Declaration FY" := RectFiscalYear;
                                         CustVendWarning349."Original Declaration Period" := RectPeriod;
                                         IF VATCredPurch.Base >= 0 THEN
                                           CustVendWarning349.Sign := '-'
                                         ELSE
                                           CustVendWarning349.Sign := '+';
                                         CustVendWarning349.INSERT;
                                     END;
                                   END;
                                 UNTIL VATCredPurch.NEXT = 0;
                               END;
                             UNTIL Vendor2.NEXT = 0;

                             COMMIT;
                           END;
                         END;

        OnPostDataItem=BEGIN
                         IF CustVendWarning349.FINDFIRST THEN BEGIN
                           IF NOT CONFIRM(Text1100008,FALSE)
                           THEN
                             MESSAGE(Text1100009)
                           ELSE BEGIN
                             CVWarning349.SETRECORD(CustVendWarning349);
                             IF (CVWarning349.RUNMODAL IN [ACTION::Cancel,ACTION::OK,ACTION::Close]) AND CVWarning349.Cancelled THEN BEGIN
                               CustVendWarning349.RESET;
                               CustVendWarning349.DELETEALL;
                               COMMIT;
                               ERROR(Text1100011);
                             END;
                           END;
                         END;
                       END;

        GroupTotalFields=VAT Registration No.;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=GroupFooter;
            SectionWidth=15600;
            SectionHeight=423;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table9;
        DataItemTableView=SORTING(EU Country/Region Code);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=15600;
            SectionHeight=423;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table18;
        DataItemTableView=SORTING(VAT Registration No.);
        PrintOnlyIfDetail=No;
        OnPreDataItem=BEGIN
                        PreVATRegNo := '';
                      END;

        OnAfterGetRecord=VAR
                           VATEntry@1100001 : Record 254;
                           Amount@1100000 : ARRAY [3] OF Decimal;
                           AccPrevDeclAmount@1100005 : ARRAY [3] OF Decimal;
                           AccOrigDeclAmount@1100004 : ARRAY [3] OF Decimal;
                           i@1100002 : Integer;
                         BEGIN
                           WHILE (Customer."VAT Registration No." = PreVATRegNo) AND (PreVATRegNo <> '') DO
                             IF Customer.NEXT = 0 THEN
                               EXIT;
                           PreVATRegNo := Customer."VAT Registration No.";

                           CustVendCountry.GET("Country/Region Code");
                           CustVendVatRegNo := COPYSTR("VAT Registration No.",1,CustVendCountry."VAT Registration No. digits");
                           AmountEUService := 0;
                           OpTriang := ' ';
                           AmountOpTri := 0;
                           NormalAmount := 0;
                           CLEAR(Amount);
                           CLEAR(AccPrevDeclAmount);
                           CLEAR(AccOrigDeclAmount);
                           RectAmount := 0;
                           PrevDeclAmount := 0;
                           AccumPrevDeclAmount := 0;
                           AccumOrigDeclAmount := 0;
                           AccumPrevDeclAmountEUService := 0;
                           AccumOrigDeclAmountEUService := 0;
                           AccumPrevDeclAmountTri := 0;
                           AccumOrigDeclAmountTri := 0;

                           Customer2.RESET;
                           Customer2.SETRANGE("VAT Registration No.","VAT Registration No.");
                           IF Customer2.FIND('-') THEN
                           BEGIN
                             REPEAT
                               VATInvSales.RESET;
                               VATInvSales.SETRANGE(Type,VATInvSales.Type::Sale);
                               VATInvSales.SETRANGE("Document Type",VATInvSales."Document Type"::Invoice);
                               VATInvSales.SETRANGE("Bill-to/Pay-to No.",Customer2."No.");
                               VATInvSales.SETRANGE("Posting Date",FromDate,ToDate);
                               VATInvSales.SETRANGE("EU Service",FALSE);
                               VATInvSales.SETRANGE("EU 3-Party Trade",TRUE);
                               VATInvSales.SETFILTER("Gen. Prod. Posting Group",FilterString);
                               IF VATInvSales.FIND('-') THEN BEGIN
                                 REPEAT
                                   IF IncludeIn349(VATInvSales,AmountToIncludein349,LocationDiffCountryCode) THEN BEGIN
                                     IF (VATInvSales."Country/Region Code" <> CountryCode) OR
                                       ((VATInvSales."Country/Region Code" = CountryCode) AND LocationDiffCountryCode) THEN BEGIN
                                       IF "VAT Registration No." <> '' THEN BEGIN
                                         IF AmountToIncludein349 <> 0 THEN BEGIN
                                           OpTriang := 'X';
                                           AmountOpTri := AmountOpTri + AmountToIncludein349
                                         END ELSE BEGIN
                                           OpTriang := 'X';
                                           AmountOpTri := AmountOpTri + VATInvSales.Base;
                                         END;
                                       END ELSE
                                         EmptyVATRegNo := TRUE;
                                     END;
                                   END;
                                 UNTIL VATInvSales.NEXT = 0;
                               END;
                               VATInvSales.RESET;
                               VATInvSales.SETRANGE(VATInvSales.Type,VATInvSales.Type::Sale);
                               VATInvSales.SETRANGE(VATInvSales."Document Type",VATInvSales."Document Type"::Invoice);
                               VATInvSales.SETRANGE(VATInvSales."Bill-to/Pay-to No.",Customer2."No.");
                               VATInvSales.SETRANGE(VATInvSales."Posting Date",FromDate,ToDate);
                               VATInvSales.SETRANGE("EU Service",FALSE);
                               VATInvSales.SETRANGE(VATInvSales."EU 3-Party Trade",FALSE);
                               VATInvSales.SETFILTER(VATInvSales."Gen. Prod. Posting Group", FilterString);
                               IF VATInvSales.FIND('-') THEN BEGIN
                                 REPEAT
                                   IF IncludeIn349(VATInvSales,AmountToIncludein349,LocationDiffCountryCode) THEN BEGIN
                                     IF (VATInvSales."Country/Region Code" <> CountryCode) OR
                                       ((VATInvSales."Country/Region Code" = CountryCode) AND LocationDiffCountryCode) THEN BEGIN
                                       IF "VAT Registration No." <> '' THEN BEGIN
                                         SummarizeBaseAmount(VATInvSales,AmountToIncludein349,Amount);
                                       END ELSE
                                         EmptyVATRegNo := TRUE;
                                     END;
                                   END;
                                 UNTIL VATInvSales.NEXT = 0;
                               END;

                               VATInvSales.RESET;
                               VATInvSales.SETRANGE(Type,VATInvSales.Type::Sale);
                               VATInvSales.SETRANGE("Document Type",VATInvSales."Document Type"::Invoice);
                               VATInvSales.SETRANGE("Bill-to/Pay-to No.",Customer2."No.");
                               VATInvSales.SETRANGE("Posting Date",FromDate,ToDate);
                               VATInvSales.SETRANGE("EU Service",TRUE);
                               VATInvSales.SETFILTER("Gen. Prod. Posting Group", FilterString);
                               IF VATInvSales.FIND('-') THEN BEGIN
                                 REPEAT
                                     IF IncludeIn349(VATInvSales,AmountToIncludein349,LocationDiffCountryCode) THEN BEGIN
                                       IF (VATInvSales."Country/Region Code" <> CountryCode) OR
                                         ((VATInvSales."Country/Region Code" = CountryCode) AND LocationDiffCountryCode) THEN BEGIN
                                         IF "VAT Registration No." <> '' THEN BEGIN
                                           IF AmountToIncludein349 <> 0 THEN
                                             AmountEUService := AmountEUService + AmountToIncludein349
                                           ELSE
                                             AmountEUService := AmountEUService + VATInvSales.Base;
                                         END ELSE
                                           EmptyVATRegNo := TRUE;
                                       END;
                                     END;
                                 UNTIL VATInvSales.NEXT = 0;
                               END;

                               CorrIncludedForNormalAmount := FALSE;
                               CorrIncludedForOpTriAmount := FALSE;
                               CorrIncludedForEUServiceAmount := FALSE;

                                 CustVendWarning349.RESET;
                                 CustVendWarning349.SETRANGE(Type,CustVendWarning349.Type::Sale);
                                 CustVendWarning349.SETRANGE("Customer/Vendor No.",Customer2."No.");
                                 CustVendWarning349.SETRANGE("Posting Date",FromDate,ToDate);
                                 CustVendWarning349.SETRANGE("Include Correction",TRUE);
                                 IF CustVendWarning349.FINDFIRST THEN BEGIN
                                   REPEAT
                                     IF ((CustVendWarning349."Original Declaration FY" <> FiscalYear) OR
                                       (CustVendWarning349."Original Declaration Period" <> FORMAT(Period)))
                                     THEN BEGIN
                                       TotalCorreAmt := TotalCorreAmt + CustVendWarning349."Original Declared Amount";
                                       NoOfCorrections := NoOfCorrections + 1;

                                       AccumPrevDeclAmount := 0;
                                       AccumOrigDeclAmount := 0;
                                       AccumPrevDeclAmountEUService := 0;
                                       AccumOrigDeclAmountEUService := 0;
                                       AccumPrevDeclAmountTri := 0;
                                       AccumOrigDeclAmountTri := 0;
                                       CLEAR(AccPrevDeclAmount);
                                       CLEAR(AccOrigDeclAmount);

                                       CustVendWarning349_2 := CustVendWarning349;
                                       CustVendWarning349_2.COPY(CustVendWarning349);
                                       CustVendWarning349_2.SETRANGE("Original Declaration FY",CustVendWarning349."Original Declaration FY");
                                       CustVendWarning349_2.SETRANGE("Original Declaration Period",CustVendWarning349."Original Declaration Period");
                                       CustVendWarning349_2.SETRANGE(Exported,FALSE);
                                       CustVendWarning349_2.SETRANGE("EU Service",FALSE);
                                       CustVendWarning349_2.SETRANGE("EU 3-Party Trade",FALSE);
                                       AlreadyExported := FALSE;

                                       IF CustVendWarning349_2.FINDFIRST THEN BEGIN
                                         VATEntry.GET(CustVendWarning349_2."VAT Entry No.");
                                         IF CustVendWarning349_2.COUNT > 1 THEN BEGIN
                                           REPEAT
                                             IF "VAT Registration No." <> '' THEN BEGIN
                                               VATEntry.GET(CustVendWarning349_2."VAT Entry No.");
                                               MapDeliveryOperationCode(VATEntry."Delivery Operation Code");
                                               AccPrevDeclAmount[VATEntry."Delivery Operation Code"] := CustVendWarning349_2."Previous Declared Amount";
                                               SummarizeBaseAmount(VATEntry,CustVendWarning349_2."Original Declared Amount",AccOrigDeclAmount);
                                               CustVendWarning349_2.Exported := TRUE;
                                               CustVendWarning349_2.MODIFY;
                                             END;
                                           UNTIL CustVendWarning349_2.NEXT = 0;
                                         END ELSE BEGIN
                                           IF "VAT Registration No." <> '' THEN BEGIN
                                             SummarizeBaseAmount(VATEntry,ABS(CustVendWarning349."Previous Declared Amount"),AccPrevDeclAmount);
                                             SummarizeBaseAmount(VATEntry,CustVendWarning349."Original Declared Amount",AccOrigDeclAmount);
                                           END;
                                         END;
                                       END ELSE
                                         AlreadyExported := TRUE;

                                       ThirdPartyAlreadyExported := FALSE;
                                       EUServiceAlreadyExported := FALSE;

                                       CustVendWarning349_2.RESET;
                                       CustVendWarning349_2.COPY(CustVendWarning349);
                                       CustVendWarning349_2.SETRANGE("Original Declaration FY",CustVendWarning349."Original Declaration FY");
                                       CustVendWarning349_2.SETRANGE("Original Declaration Period",CustVendWarning349."Original Declaration Period");
                                       CustVendWarning349_2.SETRANGE(Exported,FALSE);
                                       CustVendWarning349_2.SETRANGE("EU Service",TRUE);
                                       IF CustVendWarning349_2.FINDSET THEN
                                         IF CustVendWarning349_2.COUNT > 1 THEN BEGIN
                                           IF "VAT Registration No." <> '' THEN
                                             AccumPrevDeclAmountEUService :=
                                               AccumPrevDeclAmountEUService + ABS(CustVendWarning349_2."Previous Declared Amount");
                                           REPEAT
                                             IF "VAT Registration No." <> '' THEN BEGIN
                                               AccumOrigDeclAmountEUService :=
                                                 AccumOrigDeclAmountEUService + CustVendWarning349_2."Original Declared Amount";
                                               CustVendWarning349_2.Exported := TRUE;
                                               CustVendWarning349_2.MODIFY;
                                             END;
                                           UNTIL CustVendWarning349_2.NEXT = 0;
                                         END ELSE BEGIN
                                           IF "VAT Registration No." <> '' THEN BEGIN
                                             AccumPrevDeclAmountEUService := ABS(CustVendWarning349."Previous Declared Amount");
                                             AccumOrigDeclAmountEUService := CustVendWarning349."Original Declared Amount";
                                           END;
                                         END
                                       ELSE
                                         EUServiceAlreadyExported := TRUE;

                                       CustVendWarning349_2.RESET;
                                       CustVendWarning349_2.COPY(CustVendWarning349);
                                       CustVendWarning349_2.SETRANGE("Original Declaration FY",CustVendWarning349."Original Declaration FY");
                                       CustVendWarning349_2.SETRANGE("Original Declaration Period",CustVendWarning349."Original Declaration Period");
                                       CustVendWarning349_2.SETRANGE(Exported,FALSE);
                                       CustVendWarning349_2.SETRANGE("EU Service",FALSE);
                                       CustVendWarning349_2.SETRANGE("EU 3-Party Trade",TRUE);
                                       IF CustVendWarning349_2.FINDSET THEN
                                         IF CustVendWarning349_2.COUNT > 1 THEN BEGIN
                                           IF "VAT Registration No." <> '' THEN
                                             AccumPrevDeclAmountTri :=
                                               AccumPrevDeclAmountTri + ABS(CustVendWarning349_2."Previous Declared Amount");
                                           REPEAT
                                             IF "VAT Registration No." <> '' THEN BEGIN
                                               AccumOrigDeclAmountTri := AccumOrigDeclAmountTri + CustVendWarning349_2."Original Declared Amount";
                                               CustVendWarning349_2.Exported := TRUE;
                                               CustVendWarning349_2.MODIFY;
                                             END;
                                           UNTIL CustVendWarning349_2.NEXT = 0;
                                         END ELSE BEGIN
                                           IF "VAT Registration No." <> '' THEN BEGIN
                                             AccumPrevDeclAmountTri := ABS(CustVendWarning349."Previous Declared Amount");
                                             AccumOrigDeclAmountTri := CustVendWarning349."Original Declared Amount";
                                           END;
                                         END
                                       ELSE
                                         ThirdPartyAlreadyExported := TRUE;

                                       OpTriang := ' ';
                                       IF VATCredSales."EU 3-Party Trade" THEN
                                         OpTriang := 'X';
                                       Sign := CustVendWarning349.Sign;


                                       IF NOT (AlreadyExported AND EUServiceAlreadyExported AND ThirdPartyAlreadyExported) THEN BEGIN
                                         IF "VAT Registration No." <> '' THEN BEGIN
                                           CustVendCountry.GET(Customer2."Country/Region Code");
                                           IF CustVendWarning349."EU Service" THEN BEGIN
                                             TextAmount := COPYSTR(FormatTextAmt(AccumPrevDeclAmountEUService),3,13);
                                             TextAmount2 := COPYSTR(FormatTextAmt(AccumOrigDeclAmountEUService),3,13);

                                           Txt :=
                                             '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                             FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                             PADSTR(CONVERTSTR(UPPERCASE(Customer2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                             'S' + PADSTR('',13,' ') + CustVendWarning349."Original Declaration FY" +
                                             CustVendWarning349."Original Declaration Period" + TextAmount2 + TextAmount +
                                             PADSTR('',322,' ');
                                           OutFile.WRITE(Txt);
                                           END ELSE
                                           IF CustVendWarning349."EU 3-Party Trade" THEN BEGIN
                                             TextAmount := COPYSTR(FormatTextAmt(AccumPrevDeclAmountTri),3,13);
                                             TextAmount2 := COPYSTR(FormatTextAmt(AccumOrigDeclAmountTri),3,13);

                                           Txt :=
                                             '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                             FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                             PADSTR(CONVERTSTR(UPPERCASE(Customer2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                             'T' + PADSTR('',13,' ') + CustVendWarning349."Original Declaration FY" +
                                             CustVendWarning349."Original Declaration Period" + TextAmount2 + TextAmount +
                                             PADSTR('',322,' ');
                                           OutFile.WRITE(Txt);
                                           END ELSE BEGIN
                                             FOR i := 1 TO 3 DO
                                               IF (AccPrevDeclAmount[i] <> 0) AND (AccOrigDeclAmount[i] <> 0) THEN BEGIN
                                                 TextAmount := COPYSTR(FormatTextAmt(AccPrevDeclAmount[i]),3,13);
                                                 TextAmount2 := COPYSTR(FormatTextAmt(AccOrigDeclAmount[i]),3,13);

                                                 Txt :=
                                                   '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                                   FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                                   PADSTR(CONVERTSTR(UPPERCASE(Customer2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                                   OperationCode[i] + PADSTR('',13,' ') + CustVendWarning349."Original Declaration FY" +
                                                   CustVendWarning349."Original Declaration Period" + TextAmount2 + TextAmount +
                                                   PADSTR('',322,' ');
                                                 OutFile.WRITE(Txt);
                                               END;
                                           END;
                                         END ELSE
                                           EmptyVATRegNo := TRUE;
                                       END;
                                     END ELSE BEGIN
                                       IF "VAT Registration No." <> '' THEN BEGIN
                                         IF CustVendWarning349."EU Service" THEN BEGIN
                                           AmountEUService := AmountEUService + CustVendWarning349."Original Declared Amount";
                                           CorrIncludedForEUServiceAmount := TRUE;
                                         END ELSE BEGIN
                                           IF CustVendWarning349."EU 3-Party Trade" THEN BEGIN
                                             AmountOpTri := AmountOpTri + CustVendWarning349."Original Declared Amount";
                                             CorrIncludedForOpTriAmount := TRUE;
                                           END ELSE BEGIN
                                             VATEntry.GET(CustVendWarning349."VAT Entry No.");
                                             SummarizeBaseAmount(VATEntry,CustVendWarning349."Original Declared Amount",Amount);
                                             CorrIncludedForNormalAmount := TRUE;
                                           END;
                                         END;
                                       END;
                                     END;
                                     IF RectPeriod = 'O' THEN
                                       RectPeriod := '0';
                                   UNTIL CustVendWarning349.NEXT = 0;
                                 END;
                             UNTIL Customer2.NEXT = 0;

                             IF "VAT Registration No." <> '' THEN BEGIN
                               FOR i := 1 TO 3 DO
                                 IF Amount[i] <> 0 THEN BEGIN
                                  TextAmount := COPYSTR(FormatTextAmt(Amount[i]),3,13);
                                  CustVendCountry.GET(Customer2."Country/Region Code");
                                  Txt :=
                                    '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                    FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                    PADSTR(CONVERTSTR(UPPERCASE(Customer2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                    OperationCode[i] + CONVERTSTR(TextAmount,' ','0') + PADSTR('',354,' ');
                                  NoOperations := NoOperations + 1;
                                  TotalAmtShip := TotalAmtShip + Amount[i];
                                  OutFile.WRITE(Txt);
                                 END;
                               IF AmountOpTri < 0 THEN
                                 AmountOpTri := -AmountOpTri;
                               IF CorrIncludedForOpTriAmount OR (AmountOpTri <> 0) THEN BEGIN
                                 TextAmount := COPYSTR(FormatTextAmt(AmountOpTri),3,13);
                                 CustVendCountry.GET(Customer2."Country/Region Code");
                                 Txt :=
                                   '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                   FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                   PADSTR(CONVERTSTR(UPPERCASE(Customer2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                   'T' + CONVERTSTR(TextAmount,' ','0') + PADSTR('',354,' ');
                                 NoOperations := NoOperations + 1;
                                 TotalAmtShip := TotalAmtShip + AmountOpTri;
                                 OutFile.WRITE(Txt);
                               END;
                               IF AmountEUService < 0 THEN
                                 AmountEUService := -AmountEUService;
                               IF CorrIncludedForEUServiceAmount OR (AmountEUService <> 0) THEN BEGIN
                                 TextAmount := COPYSTR(FormatTextAmt(AmountEUService),3,13);
                                 CustVendCountry.GET(Customer2."Country/Region Code");
                                 Txt :=
                                   '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                   FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                   PADSTR(CONVERTSTR(UPPERCASE(Customer2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                   'S' + CONVERTSTR(TextAmount,' ','0') + PADSTR('',354,' ');
                                 NoOperations := NoOperations + 1;
                                 TotalAmtShip := TotalAmtShip + AmountEUService;
                                 OutFile.WRITE(Txt);
                               END;
                             END;
                           END;
                         END;

        GroupTotalFields=VAT Registration No.;
        DataItemLink=Country/Region Code=FIELD(Code);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=15600;
            SectionHeight=423;
          }
          CONTROLS
          {
          }
           }
        { PROPERTIES
          {
            SectionType=GroupFooter;
            SectionWidth=15600;
            SectionHeight=423;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table23;
        DataItemTableView=SORTING(VAT Registration No.);
        PrintOnlyIfDetail=No;
        OnPreDataItem=BEGIN
                        PreVATRegNo := '';
                      END;

        OnAfterGetRecord=BEGIN
                           WHILE (Vendor."VAT Registration No." = PreVATRegNo) AND (PreVATRegNo <> '') DO
                             IF Vendor.NEXT = 0 THEN
                               EXIT;
                           PreVATRegNo := Vendor."VAT Registration No.";

                           CustVendCountry.GET("Country/Region Code");
                           CustVendVatRegNo := COPYSTR("VAT Registration No.",1,CustVendCountry."VAT Registration No. digits");
                           AmountEUService := 0;
                           OpTriang := ' ';
                           AmountOpTri := 0;
                           NormalAmount := 0;
                           RectAmount := 0;
                           PrevDeclAmount := 0;
                           AccumPrevDeclAmount := 0;
                           AccumOrigDeclAmount := 0;
                           AccumPrevDeclAmountEUService := 0;
                           AccumOrigDeclAmountEUService := 0;
                           AccumPrevDeclAmountTri := 0;
                           AccumOrigDeclAmountTri := 0;

                           Vendor2.RESET;
                           Vendor2.SETRANGE("VAT Registration No.","VAT Registration No.");
                           IF Vendor2.FIND('-') THEN
                           BEGIN
                             REPEAT
                               VATInvPurch.RESET;
                               VATInvPurch.SETRANGE(Type,VATInvPurch.Type::Purchase);
                               VATInvPurch.SETRANGE("Document Type",VATInvPurch."Document Type"::Invoice);
                               VATInvPurch.SETRANGE("Bill-to/Pay-to No.",Vendor2."No.");
                               VATInvPurch.SETRANGE("Posting Date",FromDate,ToDate);
                               VATInvPurch.SETRANGE("EU Service",FALSE);
                               VATInvPurch.SETRANGE("EU 3-Party Trade",TRUE);
                               VATInvPurch.SETFILTER("Gen. Prod. Posting Group",FilterString);
                               IF VATInvPurch.FIND('-') THEN BEGIN
                                 REPEAT
                                   IF IncludeIn349(VATInvPurch,AmountToIncludein349,LocationDiffCountryCode) THEN BEGIN
                                     IF (VATInvPurch."Country/Region Code" <> CountryCode) OR
                                       ((VATInvPurch."Country/Region Code" = CountryCode) AND LocationDiffCountryCode) THEN BEGIN
                                       IF "VAT Registration No." <> '' THEN BEGIN
                                         IF AmountToIncludein349 <> 0 THEN BEGIN
                                           OpTriang := 'X';
                                           AmountOpTri := AmountOpTri + AmountToIncludein349;
                                         END ELSE BEGIN
                                           OpTriang := 'X';
                                           AmountOpTri := AmountOpTri + VATInvPurch.Base;
                                         END;
                                       END ELSE
                                         EmptyVATRegNo := TRUE;
                                     END;
                                   END;
                                 UNTIL VATInvPurch.NEXT = 0;
                               END;
                               VATInvPurch.RESET;
                               VATInvPurch.SETRANGE(Type,VATInvPurch.Type::Purchase);
                               VATInvPurch.SETRANGE("Document Type",VATInvPurch."Document Type"::Invoice);
                               VATInvPurch.SETRANGE("Bill-to/Pay-to No.",Vendor2."No.");
                               VATInvPurch.SETRANGE("Posting Date",FromDate,ToDate);
                               VATInvPurch.SETRANGE("EU Service",FALSE);
                               VATInvPurch.SETRANGE("EU 3-Party Trade",FALSE);
                               VATInvPurch.SETFILTER("Gen. Prod. Posting Group",FilterString);
                               IF VATInvPurch.FIND('-') THEN BEGIN
                                 REPEAT
                                   IF IncludeIn349(VATInvPurch,AmountToIncludein349,LocationDiffCountryCode) THEN BEGIN
                                     IF (VATInvPurch."Country/Region Code" <> CountryCode) OR
                                       ((VATInvPurch."Country/Region Code" = CountryCode) AND LocationDiffCountryCode) THEN BEGIN
                                       IF "VAT Registration No." <> '' THEN BEGIN
                                         IF AmountToIncludein349 <> 0 THEN
                                           NormalAmount := NormalAmount + AmountToIncludein349
                                         ELSE
                                           NormalAmount := NormalAmount + VATInvPurch.Base;
                                       END ELSE
                                         EmptyVATRegNo := TRUE;
                                     END;
                                   END;
                                 UNTIL VATInvPurch.NEXT = 0;
                               END;

                               VATInvPurch.RESET;
                               VATInvPurch.SETRANGE(Type,VATInvPurch.Type::Purchase);
                               VATInvPurch.SETRANGE("Document Type",VATInvPurch."Document Type"::Invoice);
                               VATInvPurch.SETRANGE("Bill-to/Pay-to No.",Vendor2."No.");
                               VATInvPurch.SETRANGE("Posting Date",FromDate,ToDate);
                               VATInvPurch.SETRANGE("EU Service",TRUE);
                               VATInvPurch.SETFILTER("Gen. Prod. Posting Group", FilterString);
                               IF VATInvPurch.FIND('-') THEN BEGIN
                                 REPEAT
                                     IF IncludeIn349(VATInvPurch,AmountToIncludein349,LocationDiffCountryCode) THEN BEGIN
                                       IF (VATInvPurch."Country/Region Code" <> CountryCode) OR
                                         ((VATInvPurch."Country/Region Code" = CountryCode) AND LocationDiffCountryCode) THEN BEGIN
                                         IF "VAT Registration No." <> '' THEN BEGIN
                                           IF AmountToIncludein349 <> 0 THEN
                                             AmountEUService := AmountEUService + AmountToIncludein349
                                           ELSE
                                             AmountEUService := AmountEUService + VATInvPurch.Base;
                                         END ELSE
                                           EmptyVATRegNo := TRUE;
                                       END;
                                     END;
                                 UNTIL VATInvPurch.NEXT = 0;
                               END;

                               CorrIncludedForNormalAmount := FALSE;
                               CorrIncludedForOpTriAmount := FALSE;
                               CorrIncludedForEUServiceAmount := FALSE;

                               CustVendWarning349.RESET;
                               CustVendWarning349.SETRANGE(Type,CustVendWarning349.Type::Purchase);
                               CustVendWarning349.SETRANGE("Customer/Vendor No.",Vendor2."No.");
                               CustVendWarning349.SETRANGE("Posting Date",FromDate,ToDate);
                               CustVendWarning349.SETRANGE("Include Correction",TRUE);
                               IF CustVendWarning349.FINDFIRST THEN BEGIN
                                 REPEAT
                                   IF ((CustVendWarning349."Original Declaration FY" <> FiscalYear) OR
                                     (CustVendWarning349."Original Declaration Period" <> FORMAT(Period)))
                                   THEN BEGIN
                                     TotalCorreAmt := TotalCorreAmt + CustVendWarning349."Original Declared Amount";
                                     NoOfCorrections := NoOfCorrections + 1;

                                     AccumPrevDeclAmount := 0;
                                     AccumOrigDeclAmount := 0;
                                     AccumPrevDeclAmountEUService := 0;
                                     AccumOrigDeclAmountEUService := 0;
                                     AccumPrevDeclAmountTri := 0;
                                     AccumOrigDeclAmountTri := 0;

                                     CustVendWarning349_2 := CustVendWarning349;
                                     CustVendWarning349_2.COPY(CustVendWarning349);
                                     CustVendWarning349_2.SETRANGE("Original Declaration FY",CustVendWarning349."Original Declaration FY");
                                     CustVendWarning349_2.SETRANGE("Original Declaration Period",CustVendWarning349."Original Declaration Period");
                                     CustVendWarning349_2.SETRANGE(Exported,FALSE);
                                     CustVendWarning349_2.SETRANGE("EU Service",FALSE);
                                     CustVendWarning349_2.SETRANGE("EU 3-Party Trade",FALSE);
                                     AlreadyExported := FALSE;

                                     IF CustVendWarning349_2.FINDFIRST THEN BEGIN
                                       IF CustVendWarning349_2.COUNT > 1 THEN BEGIN
                                         IF "VAT Registration No." <> '' THEN
                                           AccumPrevDeclAmount := AccumPrevDeclAmount + ABS(CustVendWarning349_2."Previous Declared Amount");
                                         REPEAT
                                           IF "VAT Registration No." <> '' THEN BEGIN
                                             AccumOrigDeclAmount := AccumOrigDeclAmount + CustVendWarning349_2."Original Declared Amount";
                                             CustVendWarning349_2.Exported := TRUE;
                                             CustVendWarning349_2.MODIFY;
                                           END;
                                         UNTIL CustVendWarning349_2.NEXT = 0;
                                       END ELSE BEGIN
                                         IF "VAT Registration No." <> '' THEN BEGIN
                                           AccumPrevDeclAmount := ABS(CustVendWarning349_2."Previous Declared Amount");
                                           AccumOrigDeclAmount := CustVendWarning349."Original Declared Amount";
                                         END;
                                       END;
                                     END ELSE
                                       AlreadyExported := TRUE;

                                     ThirdPartyAlreadyExported := FALSE;
                                     EUServiceAlreadyExported := FALSE;

                                     CustVendWarning349_2.RESET;
                                     CustVendWarning349_2.COPY(CustVendWarning349);
                                     CustVendWarning349_2.SETRANGE("Original Declaration FY",CustVendWarning349."Original Declaration FY");
                                     CustVendWarning349_2.SETRANGE("Original Declaration Period",CustVendWarning349."Original Declaration Period");
                                     CustVendWarning349_2.SETRANGE(Exported,FALSE);
                                     CustVendWarning349_2.SETRANGE("EU Service",TRUE);
                                     IF CustVendWarning349_2.FINDSET THEN
                                       IF CustVendWarning349_2.COUNT > 1 THEN BEGIN
                                         IF "VAT Registration No." <> '' THEN
                                           AccumPrevDeclAmountEUService :=
                                             AccumPrevDeclAmountEUService + ABS(CustVendWarning349_2."Previous Declared Amount");
                                         REPEAT
                                           IF "VAT Registration No." <> '' THEN BEGIN
                                             AccumOrigDeclAmountEUService := AccumOrigDeclAmountEUService + CustVendWarning349_2."Original Declared Amount";
                                             CustVendWarning349_2.Exported := TRUE;
                                             CustVendWarning349_2.MODIFY;
                                           END;
                                         UNTIL CustVendWarning349_2.NEXT = 0;
                                       END ELSE BEGIN
                                         IF "VAT Registration No." <> '' THEN BEGIN
                                           AccumPrevDeclAmountEUService := ABS(CustVendWarning349."Previous Declared Amount");
                                           AccumOrigDeclAmountEUService := CustVendWarning349."Original Declared Amount";
                                         END;
                                       END
                                     ELSE
                                       EUServiceAlreadyExported := TRUE;

                                     CustVendWarning349_2.RESET;
                                     CustVendWarning349_2.COPY(CustVendWarning349);
                                     CustVendWarning349_2.SETRANGE("Original Declaration FY",CustVendWarning349."Original Declaration FY");
                                     CustVendWarning349_2.SETRANGE("Original Declaration Period",CustVendWarning349."Original Declaration Period");
                                     CustVendWarning349_2.SETRANGE(Exported,FALSE);
                                     CustVendWarning349_2.SETRANGE("EU Service",FALSE);
                                     CustVendWarning349_2.SETRANGE("EU 3-Party Trade",TRUE);
                                     IF CustVendWarning349_2.FINDSET THEN
                                       IF CustVendWarning349_2.COUNT > 1 THEN BEGIN
                                         IF "VAT Registration No." <> '' THEN
                                           AccumPrevDeclAmountTri :=
                                             AccumPrevDeclAmountTri + ABS(CustVendWarning349_2."Previous Declared Amount");
                                         REPEAT
                                           IF "VAT Registration No." <> '' THEN BEGIN
                                             AccumOrigDeclAmountTri := AccumOrigDeclAmountTri + CustVendWarning349_2."Original Declared Amount";
                                             CustVendWarning349_2.Exported := TRUE;
                                             CustVendWarning349_2.MODIFY;
                                           END;
                                         UNTIL CustVendWarning349_2.NEXT = 0;
                                       END ELSE BEGIN
                                         IF "VAT Registration No." <> '' THEN BEGIN
                                           AccumPrevDeclAmountTri := ABS(CustVendWarning349."Previous Declared Amount");
                                           AccumOrigDeclAmountTri := CustVendWarning349."Original Declared Amount";
                                         END;
                                       END
                                     ELSE
                                       ThirdPartyAlreadyExported := TRUE;

                                     OpTriang := ' ';
                                     IF VATCredPurch."EU 3-Party Trade" THEN
                                       OpTriang := 'X';
                                     Sign := CustVendWarning349.Sign;


                                     IF NOT (AlreadyExported AND EUServiceAlreadyExported AND ThirdPartyAlreadyExported) THEN BEGIN
                                       IF "VAT Registration No." <> '' THEN BEGIN
                                         CustVendCountry.GET(Vendor2."Country/Region Code");
                                         IF CustVendWarning349."EU Service" THEN BEGIN
                                           TextAmount := COPYSTR(FormatTextAmt(AccumPrevDeclAmountEUService),3,13);
                                           TextAmount2 := COPYSTR(FormatTextAmt(AccumOrigDeclAmountEUService),3,13);

                                           Txt :=
                                             '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                             FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                             PADSTR(CONVERTSTR(UPPERCASE(Vendor2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                             'I' + PADSTR('',13,' ') + CustVendWarning349."Original Declaration FY" +
                                             CustVendWarning349."Original Declaration Period" + TextAmount2 + TextAmount +
                                             PADSTR('',322,' ');
                                           OutFile.WRITE(Txt);
                                         END ELSE
                                           IF CustVendWarning349."EU 3-Party Trade" THEN BEGIN
                                             TextAmount := COPYSTR(FormatTextAmt(AccumPrevDeclAmountTri),3,13);
                                             TextAmount2 := COPYSTR(FormatTextAmt(AccumOrigDeclAmountTri),3,13);

                                             Txt :=
                                               '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                               FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                               PADSTR(CONVERTSTR(UPPERCASE(Vendor2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                               'T' + PADSTR('',13,' ') + CustVendWarning349."Original Declaration FY" +
                                               CustVendWarning349."Original Declaration Period" + TextAmount2 + TextAmount +
                                               PADSTR('',322,' ');
                                             OutFile.WRITE(Txt);
                                           END ELSE BEGIN
                                             TextAmount := COPYSTR(FormatTextAmt(AccumPrevDeclAmount),3,13);
                                             TextAmount2 := COPYSTR(FormatTextAmt(AccumOrigDeclAmount),3,13);

                                             Txt :=
                                               '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                               FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                               PADSTR(CONVERTSTR(UPPERCASE(Vendor2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                               'A' + PADSTR('',13,' ') + CustVendWarning349."Original Declaration FY" +
                                               CustVendWarning349."Original Declaration Period" + TextAmount2 + TextAmount +
                                               PADSTR('',322,' ');
                                             OutFile.WRITE(Txt);
                                           END;
                                       END ELSE
                                         EmptyVATRegNo := TRUE;
                                     END;
                                   END ELSE BEGIN
                                     IF "VAT Registration No." <> '' THEN BEGIN
                                       IF CustVendWarning349."EU Service" THEN BEGIN
                                         AmountEUService := AmountEUService - CustVendWarning349."Original Declared Amount";
                                         CorrIncludedForEUServiceAmount := TRUE;
                                       END ELSE BEGIN
                                         IF CustVendWarning349."EU 3-Party Trade" THEN BEGIN
                                           AmountOpTri := AmountOpTri - CustVendWarning349."Original Declared Amount";
                                           CorrIncludedForOpTriAmount := TRUE;
                                         END ELSE BEGIN
                                           NormalAmount := NormalAmount - CustVendWarning349."Original Declared Amount";
                                           CorrIncludedForNormalAmount := TRUE;
                                         END;
                                       END;
                                     END;
                                   END;
                                   IF RectPeriod = 'O' THEN
                                     RectPeriod := '0';
                                 UNTIL CustVendWarning349.NEXT = 0;
                               END;
                             UNTIL Vendor2.NEXT = 0;

                             IF "VAT Registration No." <> '' THEN BEGIN
                               IF NormalAmount < 0 THEN
                                 NormalAmount := -NormalAmount;
                               IF CorrIncludedForNormalAmount OR (NormalAmount <> 0) THEN BEGIN
                                 TextAmount := COPYSTR(FormatTextAmt(NormalAmount),3,13);
                                 CustVendCountry.GET(Vendor2."Country/Region Code");
                                 Txt :=
                                   '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                   FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                   PADSTR(CONVERTSTR(UPPERCASE(Vendor2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                   'A' + CONVERTSTR(TextAmount,' ','0') + PADSTR('',354,' ');
                                 NoOperations := NoOperations + 1;
                                 TotalAmtReciv := TotalAmtReciv + NormalAmount;
                                 OutFile.WRITE(Txt);
                               END;
                               IF AmountOpTri < 0 THEN
                                 AmountOpTri := -AmountOpTri;
                               IF CorrIncludedForOpTriAmount OR (AmountOpTri <> 0) THEN BEGIN
                                 TextAmount := COPYSTR(FormatTextAmt(AmountOpTri),3,13);
                                 CustVendCountry.GET(Vendor2."Country/Region Code");
                                 Txt :=
                                   '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                   FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                   PADSTR(CONVERTSTR(UPPERCASE(Vendor2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                   'T' + CONVERTSTR(TextAmount,' ','0') + PADSTR('',354,' ');
                                 NoOperations := NoOperations + 1;
                                 TotalAmtReciv := TotalAmtReciv + AmountOpTri;
                                 OutFile.WRITE(Txt);
                               END;
                             END;
                             IF AmountEUService < 0 THEN
                               AmountEUService := -AmountEUService;
                             IF CorrIncludedForEUServiceAmount OR (AmountEUService <> 0) THEN BEGIN
                               TextAmount := COPYSTR(FormatTextAmt(AmountEUService),3,13);
                               CustVendCountry.GET(Customer2."Country/Region Code");
                               Txt :=
                                 '2' + '349' + FiscalYear + PADSTR(VatRegNo,9,' ') + PADSTR('',58,' ') +
                                 FORMAT(CustVendCountry."EU Country/Region Code",2) + FORMAT(CustVendVatRegNo,15) +
                                 PADSTR(CONVERTSTR(UPPERCASE(Vendor2.Name),'µ∑ê‘÷ﬁ‡„ÈÎ•öÄ()"&Ô','AAEEIIOOUU—U«     '),40,' ') +
                                 'I' + CONVERTSTR(TextAmount,' ','0') + PADSTR('',354,' ');
                               NoOperations := NoOperations + 1;
                               TotalAmtReciv := TotalAmtReciv + AmountEUService;
                               OutFile.WRITE(Txt);
                             END;
                           END;
                         END;

        GroupTotalFields=VAT Registration No.;
        DataItemLink=Country/Region Code=FIELD(Code);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=15600;
            SectionHeight=423;
          }
          CONTROLS
          {
          }
           }
        { PROPERTIES
          {
            SectionType=GroupFooter;
            SectionWidth=15600;
            SectionHeight=423;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        DataItemVarName=Integer4;
        OnPreDataItem=BEGIN
                        IF EmptyVATRegNo THEN BEGIN
                          IF NOT CONFIRM(STRSUBSTNO(Text1100015,Customer.TABLECAPTION,Vendor.TABLECAPTION,
                            Customer.FIELDCAPTION("VAT Registration No.")),FALSE) THEN BEGIN
                            CustVendWarning349.RESET;
                            CustVendWarning349.DELETEALL;
                            COMMIT;
                            OutFile.CLOSE;
                            ERASE(FileName);
                            ERROR(Text1100011);
                          END;
                        END;
                      END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=15600;
            SectionHeight=423;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=10230;
      Height=6600;
      SaveValues=Yes;
      OnInit=BEGIN
               IF FiscalYear = '' THEN
                 FiscalYear := '0000';
               DeclarationNum := '3490000000000';
               CountryCode := '';
             END;

      OnOpenForm=BEGIN
                   RequestOptionsForm.FileNameControl.VISIBLE := NOT ISSERVICETIER;
                   UpdateRequestForm;
                 END;

    }
    CONTROLS
    {
      { 1100010;Label     ;0    ;0    ;3300 ;440  ;Name=Operations EU;
                                                   LeaderDots=No;
                                                   CaptionML=[ENU=Operations EU;
                                                              ESP=Operaciones UE] }
      { 1100011;TextBox   ;3630 ;550  ;1650 ;440  ;CaptionML=[ENU=Fiscal Year;
                                                              ESP=Ejercicio];
                                                   Numeric=Yes;
                                                   SourceExpr=FiscalYear }
      { 1100012;Label     ;220  ;550  ;3180 ;440  ;ParentControl=1100011 }
      { 1100013;TextBox   ;3630 ;1100 ;1650 ;440  ;CaptionML=[ENU=Period;
                                                              ESP=Periodo];
                                                   OptionCaptionML=[ENU=Annual,January,February,March,April,May,June,July,August,September,October,November,December,1st Quarter,2nd Quarter,3rd Quarter,4th Quarter;
                                                                    ESP=Anual,Enero,Febrero,Marzo,Abril,Mayo,Junio,Julio,Agosto,Septiembre,Octubre,Noviembre,Diciembre,1er trimestre,2o trimestre,3er trimestre,4o trimestre];
                                                   OptionString=0A,01,02,03,04,05,06,07,08,09,10,11,12,1T,2T,3T,4T;
                                                   SourceExpr=Period;
                                                   OnValidate=BEGIN
                                                                PeriodFreqChange := FALSE;
                                                                UpdateRequestForm;
                                                              END;
                                                               }
      { 1100014;Label     ;220  ;1100 ;3190 ;440  ;ParentControl=1100013 }
      { 1   ;TextBox      ;3630 ;5830 ;5390 ;440  ;Name=FileNameControl;
                                                   SourceExpr=FileName;
                                                   OnAssistEdit=VAR
                                                                  CommonDialogMgt@1100000 : Codeunit 412;
                                                                BEGIN
                                                                  FileName := CommonDialogMgt.OpenFile(Text1100006,FileName,1,Text1100017,1);
                                                                END;
                                                                 }
      { 21  ;Label        ;110  ;5830 ;3190 ;440  ;ParentControl=1;
                                                   CaptionML=[ENU=File Name;
                                                              ESP=Nombre archivo] }
      { 1100021;TextBox   ;3630 ;4180 ;1540 ;440  ;CaptionML=[ENU=Period;
                                                              ESP=Periodo];
                                                   SourceExpr=CountryCode;
                                                   TableRelation=Country/Region;
                                                   OnLookup=BEGIN
                                                              IF FORM.RUNMODAL(10,"Country/Region") = ACTION::LookupOK THEN
                                                                CountryCode := "Country/Region".Code;
                                                            END;
                                                             }
      { 1100019;TextBox   ;3630 ;3630 ;2310 ;440  ;Numeric=Yes;
                                                   SourceExpr=DeclarationNum;
                                                   OnValidate=BEGIN
                                                                IF STRLEN(DeclarationNum) <> 13 THEN
                                                                  ERROR(Text1100007);
                                                              END;
                                                               }
      { 1100020;Label     ;110  ;3630 ;3190 ;440  ;ParentControl=1100019;
                                                   CaptionML=[ENU=Declaration Number;
                                                              ESP=Nß modelo] }
      { 1100022;Label     ;110  ;4180 ;3190 ;440  ;ParentControl=1100021;
                                                   CaptionML=[ENU=Company Country/Region;
                                                              ESP=Pa°s/regi¢n empresa] }
      { 1100017;TextBox   ;3630 ;3080 ;1540 ;440  ;CaptionML=[ENU=Period;
                                                              ESP=Periodo];
                                                   Numeric=Yes;
                                                   SourceExpr=ContactTelephone;
                                                   OnValidate=BEGIN
                                                                IF STRLEN(ContactTelephone) < 9 THEN
                                                                  ERROR(Text1100012);
                                                              END;
                                                               }
      { 1100018;Label     ;110  ;3080 ;3190 ;440  ;ParentControl=1100017;
                                                   CaptionML=[ENU=Telephone Number;
                                                              ESP=N£mero de telÇfono] }
      { 1100015;TextBox   ;3630 ;2530 ;6270 ;440  ;CaptionML=[ENU=Period;
                                                              ESP=Periodo];
                                                   SourceExpr=ContactName }
      { 1100016;Label     ;110  ;2530 ;3190 ;440  ;ParentControl=1100015;
                                                   CaptionML=[ENU=Contact Name;
                                                              ESP=Nombre contacto] }
      { 1100001;TextBox   ;3630 ;4730 ;1590 ;440  ;CaptionML=[ENU=Declaration Media Type;
                                                              ESP=Tipo de medio modelo];
                                                   OptionCaptionML=[ENU=Physical support,Telematic;
                                                                    ESP=Soporte f°sico,Telem†tico];
                                                   OptionString=Physical support,Telematic;
                                                   SourceExpr=DeclarationMediaType }
      { 1100002;Label     ;110  ;4730 ;3300 ;440  ;ParentControl=1100001 }
      { 1100003;Label     ;110  ;5280 ;3190 ;440  ;ParentControl=1100004 }
      { 1100004;TextBox   ;3630 ;5280 ;5390 ;440  ;Editable=No;
                                                   PermanentAssist=Yes;
                                                   CaptionML=[ENU=Excluded Gen. Product Posting Groups;
                                                              ESP=Grupos contables productos excluidos];
                                                   SourceExpr=ColumnGPPG;
                                                   OnAssistEdit=VAR
                                                                  GPPGSelectionBuf@1100000 : Record 10730;
                                                                BEGIN
                                                                  GPPGSelectionBuf.SetGPPGSelectionMultiple(ColumnGPPG,FilterString);
                                                                END;
                                                                 }
      { 1100000;CheckBox  ;3630 ;1760 ;440  ;440  ;Name=PeriodFrequencyChange;
                                                   ShowCaption=No;
                                                   CaptionML=[ENU=Period Frequency Change;
                                                              ESP=Cambio frecuencia periodo];
                                                   SourceExpr=PeriodFreqChange }
      { 1100005;Label     ;220  ;1760 ;3190 ;440  ;ParentControl=1100000 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               PeriodFrequencyChangeEnable := TRUE;
               FileNameControlVisible := TRUE;
               IF FiscalYear = '' THEN
                 FiscalYear := '0000';
               DeclarationNum := '3490000000000';
               CountryCode := '';
             END;

      OnOpenPage=BEGIN
                   FileNameControlVisible := NOT ISSERVICETIER;
                   UpdateRequestForm;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1100010;2;Group     ;
                  CaptionML=[ENU=Operations EU;
                             ESP=Operaciones UE] }

      { 1100011;3;Field     ;
                  CaptionML=[ENU=Fiscal Year;
                             ESP=Ejercicio];
                  Numeric=Yes;
                  SourceExpr=FiscalYear }

      { 1100013;3;Field     ;
                  CaptionML=[ENU=Period;
                             ESP=Periodo];
                  OptionCaptionML=[ENU=Annual,January,February,March,April,May,June,July,August,September,October,November,December,1st Quarter,2nd Quarter,3rd Quarter,4th Quarter;
                                   ESP=Anual,Enero,Febrero,Marzo,Abril,Mayo,Junio,Julio,Agosto,Septiembre,Octubre,Noviembre,Diciembre,1er trimestre,2o trimestre,3er trimestre,4o trimestre];
                  SourceExpr=Period;
                  OnValidate=BEGIN
                               PeriodFreqChange := FALSE;
                               UpdateRequestForm;
                             END;
                              }

      { 1100000;3;Field     ;
                  Name=PeriodFrequencyChange;
                  CaptionML=[ENU=Period Frequency Change;
                             ESP=Cambio frecuencia periodo];
                  SourceExpr=PeriodFreqChange;
                  Enabled=PeriodFrequencyChangeEnable }

      { 1100015;2;Field     ;
                  CaptionML=[ENU=Contact Name;
                             ESP=Nombre contacto];
                  SourceExpr=ContactName }

      { 1100017;2;Field     ;
                  CaptionML=[ENU=Telephone Number;
                             ESP=N£mero de telÇfono];
                  Numeric=Yes;
                  SourceExpr=ContactTelephone;
                  OnValidate=BEGIN
                               IF STRLEN(ContactTelephone) < 9 THEN
                                 ERROR(Text1100012);
                             END;
                              }

      { 1100019;2;Field     ;
                  CaptionML=[ENU=Declaration Number;
                             ESP=Nß modelo];
                  Numeric=Yes;
                  SourceExpr=DeclarationNum;
                  OnValidate=BEGIN
                               IF STRLEN(DeclarationNum) <> 13 THEN
                                 ERROR(Text1100007);
                             END;
                              }

      { 1100021;2;Field     ;
                  CaptionML=[ENU=Company Country/Region;
                             ESP=Pa°s/regi¢n empresa];
                  SourceExpr=CountryCode;
                  TableRelation=Country/Region;
                  OnLookup=BEGIN
                             IF FORM.RUNMODAL(10,"Country/Region") = ACTION::LookupOK THEN
                               CountryCode := "Country/Region".Code;
                           END;
                            }

      { 1100001;2;Field     ;
                  CaptionML=[ENU=Declaration Media Type;
                             ESP=Tipo de medio modelo];
                  OptionCaptionML=[ENU=Physical support,Telematic;
                                   ESP=Soporte f°sico,Telem†tico];
                  SourceExpr=DeclarationMediaType }

      { 1100004;2;Field     ;
                  CaptionML=[ENU=Excluded Gen. Product Posting Groups;
                             ESP=Grupos contables productos excluidos];
                  SourceExpr=ColumnGPPG;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 GPPGSelectionBuf@1100000 : Record 10730;
                               BEGIN
                                 GPPGSelectionBuf.SetGPPGSelectionMultiple(ColumnGPPG,FilterString);
                               END;
                                }

      { 1   ;2   ;Field     ;
                  Name=FileNameControl;
                  CaptionML=[ENU=File Name;
                             ESP=Nombre archivo];
                  SourceExpr=FileName;
                  Visible=FileNameControlVisible;
                  OnAssistEdit=VAR
                                 CommonDialogMgt@1100000 : Codeunit 412;
                               BEGIN
                                 FileName := CommonDialogMgt.OpenFile(Text1100006,FileName,1,Text1100017,1);
                               END;
                                }

    }
  }
  CODE
  {
    VAR
      Text1100000@1100045 : TextConst 'ENU=Incorrect Fiscal Year.;ESP=Ejercicio incorrecto.';
      Text1100001@1100111 : TextConst 'ENU=Contact name must be entered.;ESP=Debe introducirse nombre contacto';
      Text1100002@1100112 : TextConst 'ENU=Contact telephone must be entered.;ESP=Debe introducirse telÇfono contacto';
      Text1100003@1100113 : TextConst 'ENU=Receipt number must be entered.;ESP=Debe introducirse n£mero albar†n';
      CompanyInfo@1100203 : Record 79;
      CustEntries@1100206 : Record 21;
      CustEntries2@1100207 : Record 21;
      VendEntries@1100208 : Record 25;
      CustVendCountry@1100209 : Record 9;
      VendEntries2@1100210 : Record 25;
      VATInvSales@1100211 : Record 254;
      VATCredSales@1100212 : Record 254;
      VATInvPurch@1100213 : Record 254;
      VATCredPurch@1100214 : Record 254;
      Customer2@1100215 : Record 18;
      Vendor2@1100216 : Record 23;
      CustVendWarning349@1100001 : Record 10732;
      CustVendWarning349_2@1100000 : Record 10732;
      OutFile@1100052 : File;
      CVWarning349@1100006 : Form 10736;
      FiscalYear@1100025 : Code[4];
      RectFiscalYear@1100024 : Code[4];
      FiscalYear2@1100016 : Code[2];
      RectPeriod@1100010 : Code[2];
      ContactTelephone@1100009 : Code[9];
      CountryCode@1100007 : Code[10];
      OperationCode@1100081 : ARRAY [3] OF Code[1];
      NormalAmount@1100033 : Decimal;
      NoOfCorrections@1100032 : Decimal;
      TotalAmtShip@1100031 : Decimal;
      TotalAmtReciv@1100030 : Decimal;
      AmountOpTri@1100029 : Decimal;
      TotalCorreAmt@1100028 : Decimal;
      PrevDeclAmount@1100027 : Decimal;
      RectAmount@1100026 : Decimal;
      AccumPrevDeclAmount@1100023 : Decimal;
      AccumOrigDeclAmount@1100015 : Decimal;
      AmountToIncludein349@1100014 : Decimal;
      Txt@1100046 : Text[500];
      VatRegNo@1100044 : Text[9];
      FileName@1100043 : Text[250];
      OpTriang@1100042 : Text[1];
      Sign@1100041 : Text[1];
      CustVendVatRegNo@1100040 : Text[20];
      ContactName@1100039 : Text[40];
      TextAmount@1100038 : Text[13];
      TextAmount2@1100037 : Text[13];
      TextOpAmount@1100036 : Text[15];
      TextCorreAmount@1100035 : Text[15];
      DeclarationNum@1100034 : Text[13];
      ColumnGPPG@1100019 : Text[1024];
      FilterString@1100008 : Text[1024];
      DeclarationMT@1100002 : Text[1];
      PreVATRegNo@1100059 : Text[20];
      ToFile@1100060 : Text[1024];
      NumFiscalYear@1100050 : Integer;
      NoOfRectShips@1100049 : Integer;
      NoOfRectReciv@1100048 : Integer;
      NoOperations@1100047 : Integer;
      Period@1100051 : '0A,01,02,03,04,05,06,07,08,09,10,11,12,1T,2T,3T,4T';
      DeclarationMediaType@1100004 : 'Physical support,Telematic';
      FromDate@1100226 : Date;
      ToDate@1100227 : Date;
      Text1100004@1100259 : TextConst 'ENU=Company Country/Region must be entered.;ESP=Debe introducirse el Pa°s/regi¢n empresa';
      Text1100005@1100122 : TextConst 'ENU=Please be aware that this file will contain all EU Customer/Vendors posted entries if you don''t fill "Excluding Gen. Prod. Posting Groups" field.;ESP=Tenga en cuenta que si no ha completado el campo "Excluir Gr. contables producto", este archivo contendr† todos los movimientos registrados de clientes/proveedores de la UE.';
      Text1100006@1100003 : TextConst 'ENU=Path to export 349 file.;ESP=Ruta para exportar el archivo 349.';
      Text1100007@1100005 : TextConst 'ENU=Lenght should be 13 digits for Declaration Number.;ESP=La longitud del Nß de modelo deber°a ser de 13 d°gitos.';
      Text1100008@1100011 : TextConst 'ENU=One or more Credit Memos were found for the specified period. \You can select the ones that require a correction entry in current declaration and specify the correction amount for them. \Would you like to specify these corrections?;ESP=Se han encontrado varios Abonos para el periodo especificado. \Puede seleccionar los que requieran una correcci¢n de movs. en el modelo actual y especificar su importe de correcci¢n. \®Desea especificar las correcciones?';
      Text1100009@1100012 : TextConst 'ENU=No correction will be included in this declaration.;ESP=No se incluir† ninguna correcci¢n en este modelo.';
      Text1100010@1100013 : TextConst 'ENU=349 Declaration has been exported successfully under %1.;ESP=El modelo 349 se ha exportado correctamente bajo %1.';
      AlreadyExported@1100017 : Boolean;
      Text1100011@1100018 : TextConst 'ENU=The process has been aborted. No file will be generated.;ESP=El proceso se ha cancelado. No se crear† ning£n archivo.';
      CompInfShipToCountryRegCode@1100020 : Boolean;
      ReqFormCountryRegCode@1100021 : Boolean;
      AllLocationsAreEU@1100022 : Boolean;
      Text1100012@1100053 : TextConst 'ENU=Telephone Number must be 9 digits without spaces or special characters.;ESP=El Nß de telÇfono debe tener 9 d°gitos sin espacios o caracteres especiales.';
      Text1100013@1100054 : TextConst 'ENU=The report is empty. File generation has been cancelled.;ESP=El informe est† vac°o. Se ha cancelado la creaci¢n del archivo.';
      Text1100014@1100055 : TextConst 'ENU=The file already exists, do you want to replace it?;ESP=El archivo ya existe, ®desea reemplazarlo?';
      Text1100015@1100056 : TextConst 'ENU=At least one %1/%2 does not have any value in the %3 field. \Only Customers/Vendors with a value for %3 will be included in the file. \Do you still want to create the 349 Declaration file?;ESP=Al menos un %1/%2 no contiene un valor en el campo %3. \S¢lo se incluir†n en el archivo Clientes/Proveedores con un valor para %3. \®Todav°a desea crear el archivo del modelo 349?';
      EmptyVATRegNo@1100057 : Boolean;
      LocationDiffCountryCode@1100058 : Boolean;
      Text1100016@1100061 : TextConst 'ENU=Default;ESP=GenÇrico';
      Text1100017@1100062 : TextConst 'ENU=Txt Files|*.txt|All Files|*.*'';ESP=Archivos Txt|*.txt|Todos los archivos|*.*''';
      OutStr@1100063 : OutStream;
      PeriodText@1100064 : Text[2];
      IsProcess@1100066 : Boolean;
      LastTransactionNo@1100067 : Integer;
      PeriodFreqChange@1100065 : Boolean;
      PeriodChangeText@1100068 : Text[1];
      AmountEUService@1100069 : Decimal;
      NumPeriod@1100071 : Integer;
      AccumPrevDeclAmountEUService@1100079 : Decimal;
      AccumPrevDeclAmountTri@1100070 : Decimal;
      AccumOrigDeclAmountEUService@1100072 : Decimal;
      AccumOrigDeclAmountTri@1100073 : Decimal;
      CorrIncludedForNormalAmount@1100074 : Boolean;
      CorrIncludedForOpTriAmount@1100075 : Boolean;
      CorrIncludedForEUServiceAmount@1100076 : Boolean;
      EUServiceAlreadyExported@1100077 : Boolean;
      ThirdPartyAlreadyExported@1100078 : Boolean;
      FileNameControlVisible@19024830 : Boolean INDATASET;
      PeriodFrequencyChangeEnable@19073723 : Boolean INDATASET;
      Idx@1100080 : ',E,M,H';

    PROCEDURE FormatTextAmt@1100101(Amount@1100100 : Decimal) : Text[15];
    VAR
      TextAmt@1100101 : Text[15];
    BEGIN
      TextAmt := FORMAT(Amount,0,'<Precision,2:2><Integer><Decimals>');
      TextAmt := DELCHR(TextAmt,'=','.,');
      WHILE STRLEN(TextAmt) < 15 DO
        TextAmt := '0' + TextAmt;
      EXIT(TextAmt);
    END;

    PROCEDURE IncludeIn349@1100042(VATEntry@1100000 : Record 254;VAR AmountIn349@1100004 : Decimal;VAR LocationDifferentCountryCode@1100005 : Boolean) : Boolean;
    VAR
      EUCountryInLocCodeHeader@1100003 : Boolean;
      EUCountryInLocCodeLines@1100002 : Boolean;
      VATEntryEUCountryRegCode@1100001 : Boolean;
    BEGIN
      AmountIn349 := 0;
      VATEntryEUCountryRegCode := FindEUCountryRegionCode(VATEntry."Country/Region Code");
      IF VATEntryEUCountryRegCode THEN BEGIN
        IF CompInfShipToCountryRegCode THEN BEGIN
          IF AllLocationsAreEU THEN
            EXIT(TRUE)
          ELSE BEGIN
            GetPostedCountryLocCode(VATEntry."Document No.",VATEntry,AmountIn349,CompInfShipToCountryRegCode,
              EUCountryInLocCodeHeader,EUCountryInLocCodeLines,LocationDifferentCountryCode,VATEntry."VAT Prod. Posting Group");
            IF EUCountryInLocCodeHeader OR EUCountryInLocCodeLines THEN
              EXIT(TRUE);
          END;
        END ELSE BEGIN
          GetPostedCountryLocCode(VATEntry."Document No.",VATEntry,AmountIn349,CompInfShipToCountryRegCode,
            EUCountryInLocCodeHeader,EUCountryInLocCodeLines,LocationDifferentCountryCode,VATEntry."VAT Prod. Posting Group");
          IF EUCountryInLocCodeHeader OR EUCountryInLocCodeLines THEN
            EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE FindEUCountryRegionCode@1100000(CountryCode@1100000 : Code[10]) : Boolean;
    VAR
      Country@1100001 : Record 9;
    BEGIN
      IF Country.GET(CountryCode) THEN
        IF Country."EU Country/Region Code" <> '' THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetCompInfShipToCountryRegCode@1100002(VAR CInfoShipToCountryRegCode@1100001 : Boolean);
    VAR
      CompanyInfo@1100000 : Record 79;
    BEGIN
      CompanyInfo.GET;
      CInfoShipToCountryRegCode := FindEUCountryRegionCode(CompanyInfo."Ship-to Country/Region Code");
    END;

    PROCEDURE GetCompanyCountryRegCode@1100007(VAR EUCountryRegCode@1100000 : Boolean);
    BEGIN
      EUCountryRegCode := FindEUCountryRegionCode(CountryCode);
    END;

    PROCEDURE GetPostedCountryLocCode@1100009(DocNo@1100000 : Code[20];VATEntry@1100012 : Record 254;VAR AmountToIncludeIn349@1100008 : Decimal;CompInforShipToCountryCode@1100009 : Boolean;VAR EUCountryHeaderLocationCode@1100010 : Boolean;VAR EUCountryLinesLocationCode@1100013 : Boolean;VAR LocationDifferentCountryCode@1100020 : Boolean;VATPPG@1100021 : Code[10]);
    VAR
      SourceCodeSetup@1100011 : Record 242;
      SalesInvHeader@1100001 : Record 112;
      SalesInvLines@1100002 : Record 113;
      ServiceInvHeader@1100003 : Record 5992;
      ServiceInvLines@1100004 : Record 5993;
      PurchInvHeader@1100005 : Record 122;
      PurchInvLines@1100006 : Record 123;
      Location@1100007 : Record 14;
      SalesCrMemoHeader@1100014 : Record 114;
      SalesCrMemoLine@1100015 : Record 115;
      ServiceCrMemoHeader@1100019 : Record 5994;
      ServiceCrMemoLine@1100018 : Record 5995;
      PurchCrMemoHdr@1100016 : Record 124;
      PurchCrMemoLine@1100017 : Record 125;
    BEGIN
      EUCountryHeaderLocationCode := FALSE;
      EUCountryLinesLocationCode := FALSE;
      LocationDifferentCountryCode := FALSE;
      AmountToIncludeIn349 := 0;
      CASE VATEntry.Type OF
        VATEntry.Type::Sale:
          BEGIN
            CASE VATEntry."Document Type" OF
              VATEntry."Document Type"::Invoice:
                BEGIN
                  SourceCodeSetup.GET;
                  IF VATEntry."Source Code" = SourceCodeSetup.Sales THEN BEGIN
                    IF SalesInvHeader.GET(DocNo) THEN BEGIN
                      IF SalesInvHeader."Location Code" <> '' THEN BEGIN
                        IF Location.GET(SalesInvHeader."Location Code") THEN BEGIN
                          EUCountryHeaderLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                          IF EUCountryHeaderLocationCode AND
                            (GetCountryfromLocation(SalesInvHeader."Location Code") <> CountryCode) THEN
                            LocationDifferentCountryCode := TRUE;
                        END;
                      END ELSE BEGIN
                        SalesInvLines.SETRANGE("Document No.",DocNo);
                        SalesInvLines.SETRANGE("Gen. Prod. Posting Group",VATEntry."Gen. Prod. Posting Group");
                        SalesInvLines.SETRANGE("VAT Prod. Posting Group",VATPPG);
                        IF SalesInvLines.FINDFIRST THEN
                          REPEAT
                            IF SalesInvLines."Location Code" <> '' THEN BEGIN
                              IF Location.GET(SalesInvLines."Location Code") THEN
                                EUCountryLinesLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                              IF EUCountryLinesLocationCode THEN BEGIN
                                AmountToIncludeIn349 := AmountToIncludeIn349 + SalesInvLines."Line Amount";
                                IF GetCountryfromLocation(SalesInvLines."Location Code") <> CountryCode THEN
                                  LocationDifferentCountryCode := TRUE;
                              END;
                            END ELSE
                              IF CompInforShipToCountryCode THEN BEGIN
                                EUCountryLinesLocationCode := TRUE;
                                AmountToIncludeIn349 := AmountToIncludeIn349 + SalesInvLines."Line Amount";
                              END;
                          UNTIL SalesInvLines.NEXT = 0;
                      END;
                    END;
                  END ELSE BEGIN
                    IF ServiceInvHeader.GET(DocNo) THEN BEGIN
                      IF ServiceInvHeader."Location Code" <> '' THEN BEGIN
                        IF Location.GET(ServiceInvHeader."Location Code") THEN BEGIN
                          EUCountryHeaderLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                          IF EUCountryHeaderLocationCode AND
                            (GetCountryfromLocation(ServiceInvHeader."Location Code") <> CountryCode) THEN
                            LocationDifferentCountryCode := TRUE;
                        END;
                      END ELSE BEGIN
                        ServiceInvLines.SETRANGE("Document No.",DocNo);
                        ServiceInvLines.SETRANGE("Gen. Prod. Posting Group",VATEntry."Gen. Prod. Posting Group");
                        ServiceInvLines.SETRANGE("VAT Prod. Posting Group",VATPPG);
                        IF ServiceInvLines.FINDFIRST THEN
                          REPEAT
                            IF ServiceInvLines."Location Code" <> '' THEN BEGIN
                              IF Location.GET(ServiceInvLines."Location Code") THEN
                                EUCountryLinesLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                              IF EUCountryLinesLocationCode THEN BEGIN
                                AmountToIncludeIn349 := AmountToIncludeIn349 + ServiceInvLines."Line Amount";
                                IF GetCountryfromLocation(ServiceInvLines."Location Code") <> CountryCode THEN
                                  LocationDifferentCountryCode := TRUE;
                              END;
                            END ELSE
                              IF CompInforShipToCountryCode THEN BEGIN
                                EUCountryLinesLocationCode := TRUE;
                                AmountToIncludeIn349 := AmountToIncludeIn349 + ServiceInvLines."Line Amount";
                              END;
                          UNTIL ServiceInvLines.NEXT = 0;
                      END;
                    END;
                  END;
                  AmountToIncludeIn349 := - AmountToIncludeIn349;
                END;
              VATEntry."Document Type"::"Credit Memo":
                BEGIN
                  SourceCodeSetup.GET;
                  IF VATEntry."Source Code" = SourceCodeSetup.Sales THEN BEGIN
                    IF SalesCrMemoHeader.GET(DocNo) THEN BEGIN
                      IF SalesCrMemoHeader."Location Code" <> '' THEN BEGIN
                        IF Location.GET(SalesCrMemoHeader."Location Code") THEN BEGIN
                          EUCountryHeaderLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                          IF EUCountryHeaderLocationCode AND
                            (GetCountryfromLocation(SalesCrMemoHeader."Location Code") <> CountryCode) THEN
                            LocationDifferentCountryCode := TRUE;
                        END;
                      END ELSE BEGIN
                        SalesCrMemoLine.SETRANGE("Document No.",DocNo);
                        SalesCrMemoLine.SETRANGE("Gen. Prod. Posting Group",VATEntry."Gen. Prod. Posting Group");
                        SalesCrMemoLine.SETRANGE("VAT Prod. Posting Group",VATPPG);
                        IF SalesCrMemoLine.FINDFIRST THEN
                          REPEAT
                            IF SalesCrMemoLine."Location Code" <> '' THEN BEGIN
                              IF Location.GET(SalesCrMemoLine."Location Code") THEN BEGIN
                                EUCountryLinesLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                                IF EUCountryLinesLocationCode AND
                                  (GetCountryfromLocation(SalesCrMemoLine."Location Code") <> CountryCode) THEN
                                  LocationDifferentCountryCode := TRUE;
                              END;
                            END ELSE
                              IF CompInforShipToCountryCode THEN
                                EUCountryLinesLocationCode := TRUE;
                          UNTIL SalesCrMemoLine.NEXT = 0;
                      END;
                    END;
                  END ELSE BEGIN
                    IF ServiceCrMemoHeader.GET(DocNo) THEN BEGIN
                      IF ServiceCrMemoHeader."Location Code" <> '' THEN BEGIN
                        IF Location.GET(ServiceCrMemoHeader."Location Code") THEN BEGIN
                          EUCountryHeaderLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                          IF EUCountryHeaderLocationCode AND
                            (GetCountryfromLocation(ServiceCrMemoHeader."Location Code") <> CountryCode) THEN
                            LocationDifferentCountryCode := TRUE;
                        END;
                      END ELSE BEGIN
                        ServiceCrMemoLine.SETRANGE("Document No.",DocNo);
                        ServiceCrMemoLine.SETRANGE("Gen. Prod. Posting Group",VATEntry."Gen. Prod. Posting Group");
                        ServiceCrMemoLine.SETRANGE("VAT Prod. Posting Group",VATPPG);
                        IF ServiceCrMemoLine.FINDFIRST THEN
                          REPEAT
                            IF ServiceCrMemoLine."Location Code" <> '' THEN BEGIN
                              IF Location.GET(ServiceCrMemoLine."Location Code") THEN BEGIN
                                EUCountryLinesLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                                IF EUCountryLinesLocationCode AND
                                  (GetCountryfromLocation(ServiceCrMemoLine."Location Code") <> CountryCode) THEN
                                  LocationDifferentCountryCode := TRUE;
                              END;
                            END ELSE
                              IF CompInforShipToCountryCode THEN
                                EUCountryLinesLocationCode := TRUE;
                          UNTIL ServiceCrMemoLine.NEXT = 0;
                      END;
                    END;
                  END;
                END;
              END;
          END;
        VATEntry.Type::Purchase:
          BEGIN
            CASE VATEntry."Document Type" OF
              VATEntry."Document Type"::Invoice:
                BEGIN
                  IF PurchInvHeader.GET(DocNo) THEN BEGIN
                    IF PurchInvHeader."Location Code" <> '' THEN BEGIN
                      IF Location.GET(PurchInvHeader."Location Code") THEN BEGIN
                        EUCountryHeaderLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                        IF EUCountryHeaderLocationCode AND
                          (GetCountryfromLocation(PurchInvHeader."Location Code") <> CountryCode) THEN
                          LocationDifferentCountryCode := TRUE;
                      END;
                    END ELSE BEGIN
                      PurchInvLines.SETRANGE("Document No.",DocNo);
                      PurchInvLines.SETRANGE("Gen. Prod. Posting Group",VATEntry."Gen. Prod. Posting Group");
                      PurchInvLines.SETRANGE("VAT Prod. Posting Group",VATPPG);
                      IF PurchInvLines.FINDFIRST THEN
                        REPEAT
                          IF PurchInvLines."Location Code" <> '' THEN BEGIN
                            IF Location.GET(PurchInvLines."Location Code") THEN
                              EUCountryLinesLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                            IF EUCountryLinesLocationCode THEN BEGIN
                              AmountToIncludeIn349 := AmountToIncludeIn349 + PurchInvLines."Line Amount";
                              IF GetCountryfromLocation(PurchInvLines."Location Code") <> CountryCode THEN
                                LocationDifferentCountryCode := TRUE;
                            END;
                          END ELSE
                            IF CompInforShipToCountryCode THEN BEGIN
                              EUCountryLinesLocationCode := TRUE;
                              AmountToIncludeIn349 := AmountToIncludeIn349 + PurchInvLines."Line Amount";
                            END;
                        UNTIL PurchInvLines.NEXT = 0;
                    END;
                  END;
                END;
              VATEntry."Document Type"::"Credit Memo":
                BEGIN
                  IF PurchCrMemoHdr.GET(DocNo) THEN BEGIN
                    IF PurchCrMemoHdr."Location Code" <> '' THEN BEGIN
                      IF Location.GET(PurchCrMemoHdr."Location Code") THEN BEGIN
                        EUCountryHeaderLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                        IF EUCountryHeaderLocationCode AND
                          (GetCountryfromLocation(PurchCrMemoHdr."Location Code") <> CountryCode) THEN
                          LocationDifferentCountryCode := TRUE;
                      END;
                    END ELSE BEGIN
                      PurchCrMemoLine.SETRANGE("Document No.",DocNo);
                      PurchCrMemoLine.SETRANGE("Gen. Prod. Posting Group",VATEntry."Gen. Prod. Posting Group");
                      PurchCrMemoLine.SETRANGE("VAT Prod. Posting Group",VATPPG);
                      IF PurchCrMemoLine.FINDFIRST THEN
                        REPEAT
                          IF PurchCrMemoLine."Location Code" <> '' THEN BEGIN
                            IF Location.GET(PurchCrMemoLine."Location Code") THEN BEGIN
                              EUCountryLinesLocationCode := FindEUCountryRegionCode(Location."Country/Region Code");
                              IF EUCountryLinesLocationCode AND
                                (GetCountryfromLocation(PurchCrMemoLine."Location Code") <> CountryCode) THEN
                                LocationDifferentCountryCode := TRUE;
                            END;
                          END ELSE
                            IF CompInforShipToCountryCode THEN
                              EUCountryLinesLocationCode := TRUE;
                        UNTIL PurchCrMemoLine.NEXT = 0;
                    END;
                  END;
                END;
            END;
         END;
      END;
    END;

    PROCEDURE CheckIfEULocations@1100001(VAR EULocations@1100002 : Boolean);
    VAR
      Location@1100003 : Record 14;
      EULoc@1100000 : Boolean;
    BEGIN
      EULocations := TRUE;
      IF Location.FINDFIRST THEN
        REPEAT
          EULoc := FindEUCountryRegionCode(Location."Country/Region Code");
          IF NOT EULoc THEN
            EULocations := FALSE;
        UNTIL Location.NEXT = 0;
    END;

    PROCEDURE GetFilterStringFromColumnGPPG@1100003();
    VAR
      GPPGCode@1100000 : Text[1024];
      Position@1100001 : Integer;
    BEGIN
      GPPGCode := ColumnGPPG;
      REPEAT
        Position := STRPOS(GPPGCode,';');
        IF GPPGCode <> '' THEN BEGIN
          IF Position <> 0 THEN BEGIN
            FilterString := FilterString + '<>' + COPYSTR(GPPGCode,1,Position - 1);
            GPPGCode := COPYSTR(GPPGCode,Position + 1);
          END ELSE BEGIN
            FilterString := FilterString + '<>' + COPYSTR(GPPGCode,1);
            GPPGCode := '';
          END;
          IF GPPGCode <> '' THEN
            FilterString := FilterString + '&';
        END;
      UNTIL GPPGCode = '';
    END;

    PROCEDURE GetCountryfromLocation@1100004(VAR Code@1100000 : Code[10]) : Code[10];
    VAR
      Location@1100001 : Record 14;
    BEGIN
      Location.GET(Code);
      EXIT(Location."Country/Region Code");
    END;

    PROCEDURE UpdateRequestForm@1100005();
    BEGIN
      IF ISSERVICETIER THEN BEGIN
        PageUpdateRequestForm;
        EXIT;
      END;
      RequestOptionsForm.PeriodFrequencyChange.ENABLED := Period IN [Period::"02",Period::"05",Period::"08",Period::"11"];
    END;

    LOCAL PROCEDURE PageUpdateRequestForm@19031953();
    BEGIN
      PeriodFrequencyChangeEnable := Period IN [Period::"02",Period::"05",Period::"08",Period::"11"];
    END;

    LOCAL PROCEDURE SummarizeBaseAmount@1100006(VATEntry@1100000 : Record 254;AmountToIncludein349@1100001 : Decimal;VAR Amount@1100002 : ARRAY [3] OF Decimal);
    VAR
      IncAmount@1100003 : Decimal;
    BEGIN
      IF AmountToIncludein349 <> 0 THEN
        IncAmount := AmountToIncludein349
      ELSE
        IncAmount := VATEntry.Base;

      MapDeliveryOperationCode(VATEntry."Delivery Operation Code");
      Amount[VATEntry."Delivery Operation Code"] += IncAmount;
    END;

    LOCAL PROCEDURE MapDeliveryOperationCode@1100012(VAR DeliveryOperationCode@1100001 : ' ,E,M,H');
    BEGIN
      IF DeliveryOperationCode = DeliveryOperationCode::" " THEN
        DeliveryOperationCode := DeliveryOperationCode::E;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
