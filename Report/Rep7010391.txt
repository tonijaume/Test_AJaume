OBJECT Report 7010391 Produccion x Conductor
{
  OBJECT-PROPERTIES
  {
    Date=04/10/10;
    Time=16:11:33;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    CaptionML=ESP=Produccion x Conductor;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN

                   rPar.FINDFIRST;
                   //Actualizamos la selecci¢n de Vehiculos.
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table7010327;
        DataItemTableView=SORTING(Conductor)
                          WHERE(Bloqueado=CONST(No),
                                No Imprimir estadisticas=CONST(No));
        DataItemVarName=Cdtr;
        OnPreDataItem=VAR
                        lwPrimeraFecha@1100253000 : Date;
                        lwUltimaFecha@1100253004 : Date;
                        lrSelCliTo@1100253001 : Record 7010324;
                      BEGIN

                        IF wFiltroFecha='' THEN
                          ERROR(Text0012);

                        IF vGaraje <> '' THEN
                          SETRANGE(Garaje, vGaraje);

                        IF lwPrimeraFecha <> 0D THEN
                          SETFILTER("Fecha Antiguedad",'<=%1',lwUltimaFecha);

                        IF wCond <> '' THEN
                          SETRANGE(Conductor, wCond);

                        CLEAR(wContC);
                        wTotalC := COUNT;

                        // Limpiamos el temporal de excel
                        CLEAR(rExcel);
                        IF rExcel.FINDFIRST THEN
                          rExcel.DELETEALL;

                        // Si hay una selecci¢n de Cliente/TTOO creamos un temporal para que sea m s rapida
                        IF vSelecTTOO=vSelecTTOO::"Seg£n Selecci¢n" THEN BEGIN
                          CLEAR(lrSelCliTo);
                          lrSelCliTo.SETRANGE(Usuario  , USERID);
                          lrSelCliTo.SETRANGE(Selecci¢n, TRUE);
                          IF lrSelCliTo.FINDSET THEN BEGIN
                            REPEAT
                              rTempCLITOSel.INIT;
                              rTempCLITOSel.Cliente := lrSelCliTo.Cliente;
                              rTempCLITOSel.TTOO    := lrSelCliTo.TTOO;
                              rTempCLITOSel.INSERT;
                            UNTIL lrSelCliTo.NEXT=0;
                          END;
                        END;

                        wVentana.OPEN(Text0014);
                        wFil:=1;
                        wCol:=1;

                        rExcel.INIT;
                        rExcel.VALIDATE("Row No."      , wFil);
                        rExcel.VALIDATE("Column No."   , wCol);
                        rExcel."Cell Value as Text"   := Text0013;
                        rExcel."Texto Alineacion Horizontal" :=2; // Izquierda
                        rExcel.Bold  := TRUE;
                        rExcel.Width := 5;
                        rExcel.INSERT;

                        wFil+=1;
                        wCol :=2;
                        rExcel.INIT;
                        rExcel.VALIDATE("Row No."      , wFil);
                        rExcel.VALIDATE("Column No."   , wCol);
                        rExcel.Bold  := FALSE;
                        rExcel."Cell Value as Text"   := Text0015 + wFiltroFecha;
                        rExcel.Width := 5;
                        rExcel.INSERT;

                        IF NOT wDesglClient THEN BEGIN
                          wFil+=2;
                          CreaCab(4);
                        END;
                      END;

        OnAfterGetRecord=BEGIN

                           wVentana.UPDATE(2, STRSUBSTNO('%1 %2', Conductor, Cdtr."Nombre Abreviado"));

                           // Creamos un temporal Cliente/TTOO  y TTOOxParte
                           CLEAR(rTempCLITO);
                           CLEAR(wContT); // Contador para temporales


                           // Borramos los temporales
                           CLEAR(rTempCLITO);
                           rTempCLITO.DELETEALL;
                           CLEAR(rTempTOPar);
                           rTempTOPar.DELETEALL;

                           Calcula(Cdtr.Conductor);

                           // Si esta marcado vSoloConActividad
                           IF vSoloConActividad THEN BEGIN
                             CLEAR(rTempCLITO);
                             IF NOT rTempCLITO.FINDFIRST THEN
                               CurrReport.SKIP;
                           END;

                           wContC +=1;
                           wVentana.UPDATE(1,ROUND(wContC/wTotalC*10000,1));

                           // Pasamos a excel
                           PasarCond(Cdtr);
                         END;

        OnPostDataItem=BEGIN
                         IF NOT wDesglClient THEN BEGIN
                           wFilAnt:=6;
                           CreaTotal(4);
                         END;

                         wVentana.CLOSE;

                         rExcel.CreateBook;
                         rExcel.CreateSheet(Text50000,Text0013,COMPANYNAME,USERID,FALSE,FALSE,'');
                         rExcel.GiveUserControl;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=14520;
      Height=4070;
      OnOpenForm=BEGIN
                   cVeh.ActualizarSeleccionVehiculos();
                   cFunEst.Actualiza_Clientes_Usuario;
                   cFunEst.Actualizar_Temporal_Clientes;
                 END;

    }
    CONTROLS
    {
      { 1103350000;CheckBox;4620;3300 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=ESP=Solo con actividad;
                                                   NextControl=4;
                                                   SourceExpr=vSoloConActividad }
      { 1103350001;Label  ;220  ;3300 ;4290 ;440  ;ParentControl=1103350000;
                                                   MultiLine=Yes;
                                                   ToolTipML=ESP=Si se marca s¢lo se considerar n los clientes que han solicitado alg£n servicio. }
      { 1103350002;CommandButton;8580;2200;440;440;Name=SelecTTOO;
                                                   HorzGlue=Left;
                                                   VertGlue=Top;
                                                   Visible=No;
                                                   CaptionML=ESP=...;
                                                   ToolTipML=ESP=Seleccionar Vehiculos;
                                                   OnPush=VAR
                                                            rSel@1103350001 : Record 7010324;
                                                            fSel@1103350002 : Form 7010431;
                                                          BEGIN

                                                            rSel.RESET;
                                                            rSel.INIT;
                                                            rSel.SETCURRENTKEY(Usuario,Cliente,TTOO);
                                                            rSel.FILTERGROUP(2);
                                                            rSel.SETRANGE(Usuario,USERID);
                                                            rSel.FILTERGROUP(0);

                                                            CLEAR(fSel);
                                                            fSel.SETTABLEVIEW(rSel);
                                                            fSel.RUN;
                                                            CLEAR(fSel);
                                                            rSel.RESET;
                                                          END;
                                                           }
      { 1103350003;TextBox;4620 ;2200 ;3740 ;440  ;Name=SelCliTo1;
                                                   Enabled=No;
                                                   BackTransparent=No;
                                                   SourceExpr=vSelecTTOO;
                                                   OnValidate=BEGIN
                                                                IF vSelecTTOO=vSelecTTOO::"Todos los Clientes" THEN
                                                                  RequestOptionsForm.SelecTTOO.VISIBLE:=FALSE
                                                                ELSE
                                                                  RequestOptionsForm.SelecTTOO.VISIBLE:=TRUE;
                                                              END;
                                                               }
      { 1103350004;Label  ;220  ;2200 ;4290 ;440  ;ParentControl=1103350003;
                                                   CaptionML=ESP=Selecci¢n Clientes/TTOO }
      { 1103350005;Label  ;220  ;220  ;4290 ;440  ;ParentControl=1103350006;
                                                   MultiLine=Yes;
                                                   ToolTipML=ESP=Si se marca s¢lo se considerar n los vehiculos que han tenido actividad }
      { 1103350006;TextBox;4620 ;220  ;2310 ;440  ;Name=FltGaraje;
                                                   CaptionML=ESP=Garaje;
                                                   NextControl=21;
                                                   SourceExpr=vGaraje;
                                                   TableRelation=Garaje.Garaje;
                                                   OnValidate=VAR
                                                                cfunbas@1103350001 : Codeunit 7010310;
                                                              BEGIN
                                                              END;
                                                               }
      { 1103350010;TextBox;4620 ;2750 ;3740 ;440  ;Name=ff11;
                                                   CaptionML=ESP=Rango Fechas;
                                                   SourceExpr=wFiltroFecha;
                                                   OnValidate=VAR
                                                                lcGestApl@1103350001 : Codeunit 1;
                                                              BEGIN
                                                                FormatoFiltro(wFiltroFecha);
                                                              END;
                                                               }
      { 1103350012;Label  ;220  ;2750 ;4290 ;440  ;ParentControl=1103350010 }
      { 1100253000;CheckBox;4620;770  ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=ESP=Desglosar por Cliente/TTOO;
                                                   SourceExpr=wDesglClient;
                                                   OnValidate=BEGIN
                                                                RequestOptionsForm.SelCliTo1.ENABLED(wDesglClient);
                                                                IF NOT wDesglClient THEN BEGIN
                                                                  CLEAR(vSelecTTOO);
                                                                  RequestOptionsForm.SelecTTOO.VISIBLE(FALSE);
                                                                END;
                                                              END;
                                                               }
      { 1100253001;Label  ;220  ;770  ;4290 ;440  ;ParentControl=1100253000 }
      { 1100253002;TextBox;4620 ;1650 ;3740 ;440  ;CaptionML=ESP=Conductor;
                                                   SourceExpr=wCond;
                                                   TableRelation=Conductor }
      { 1100253003;Label  ;220  ;1650 ;4290 ;440  ;ParentControl=1100253002 }
      { 1100253004;TextBox;8580 ;1650 ;5720 ;440  ;SourceExpr=NombreCond(wCond) }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      Text50000@1103355000 : TextConst 'ESP=Lineas';
      Text50001@1103355001 : TextConst 'ESP="=SUMA(%1:%2)"';
      rPar@1103350005 : Record 7010311;
      rTempVeh@1103350003 : TEMPORARY Record 7010346;
      rTempCLITO@1103350026 : TEMPORARY Record 7010313;
      rTempCLITOSel@1100253014 : TEMPORARY Record 7010313;
      rTempTOPar@1100253010 : TEMPORARY Record 7010365;
      rExcel@1103350008 : TEMPORARY Record 7035385;
      rTOpar@1100253009 : Record 7010365;
      cVeh@1100253003 : Codeunit 7010317;
      cFunEst@1100253006 : Codeunit 7010312;
      vSelecTTOO@1103350015 : 'Todos los Clientes,Seg£n Selecci¢n';
      vSoloConActividad@1103350013 : Boolean;
      vDesglosePax@1103350010 : Boolean;
      wFiltroFecha@1103350009 : Text[250];
      Text0001@1103350018 : TextConst 'ESP=%1 No es un filtro v lido';
      Text0002@1103350017 : TextConst 'ESP=%1 no puede ser superior a %2';
      vGaraje@1103350001 : Code[10];
      wSelVeh@1103350002 : Boolean;
      Text0003@1103350004 : TextConst 'ESP=No se ha seleccionado ning£n Conductor';
      wTotalC@1103350006 : Integer;
      wContC@1103350007 : Integer;
      wFil@1103350011 : Integer;
      wCol@1103350012 : Integer;
      Text0004@1103350014 : TextConst 'ESP="   %1  - %2"';
      Text0005@1103350019 : TextConst 'ESP=PRODUCCION';
      Text0006@1103350020 : TextConst 'ESP=PAX FACT.';
      Text0007@1103350021 : TextConst 'ESP=N§ VIAJES';
      Text0008@1103350022 : TextConst 'ESP=ENTRADAS';
      Text0009@1103350023 : TextConst 'ESP=SALIDAS';
      Text0010@1103350024 : TextConst 'ESP=EXCURSIONES';
      Text0011@1103350027 : TextConst 'ESP=No se ha seleccionado ning£n Cliente-Touroperador';
      Text0012@1103350028 : TextConst 'ESP=Establezca un filtro de fechas';
      Text0013@1103350029 : TextConst 'ESP=Producci¢n por Conductor';
      wFilAnt@1100253004 : Integer;
      wVentana@1103350030 : Dialog;
      Text0014@1103350031 : TextConst 'ESP=@1@@@@@@@@@@@@@@@@@@@@@\Conductor #2#############\@3@@@@@@@@@@@@@@@@@@@@@';
      Text0015@1100253000 : TextConst 'ESP=Periodo :';
      wTipSer@1100253001 : ',ENTRADAS,SALIDAS,EXCURSION,TOTAL';
      wDesglClient@1100253002 : Boolean;
      Text0016@1100253005 : TextConst 'ESP=TOTAL';
      wCond@1100253007 : Code[10];
      wContT@1100253011 : Integer;
      wTipoDato@1100253012 : ',PRODUCCION,N§ VIAJES,PAX FACT';
      Text0017@1100253013 : TextConst 'ESP=TODOS';

    PROCEDURE FormatoFiltro@7(VAR TextFiltroFech@1103350000 : Text[250]);
    VAR
      wFecha1@1103350001 : Date;
      wFecha2@1103350002 : Date;
      PosicionCadena@1103350003 : Integer;
      i@1103350004 : Integer;
      lcGestApl@1103350005 : Codeunit 1;
      Text1@1103350006 : Text[250];
      Text2@1103350007 : Text[250];
    BEGIN
      lcGestApl.MakeDateFilter(TextFiltroFech);

      PosicionCadena := STRPOS(TextFiltroFech,'..');

      IF PosicionCadena = 0 THEN BEGIN
        IF EVALUATE(wFecha1,TextFiltroFech) THEN
          TextFiltroFech := FORMAT(wFecha1)
        ELSE
          ERROR(Text0001,TextFiltroFech);
      END
      ELSE
      BEGIN
        Text1 := COPYSTR(TextFiltroFech,1,PosicionCadena - 1);
        Text2 := COPYSTR(TextFiltroFech,PosicionCadena + 2, STRLEN(TextFiltroFech));
        IF (EVALUATE(wFecha1,Text1)) AND (EVALUATE(wFecha2,Text2))   THEN BEGIN
          TextFiltroFech := FORMAT(wFecha1)+'..'+FORMAT(wFecha2);
          IF wFecha1 > wFecha2 THEN
            ERROR(Text0002,wFecha1,wFecha2);
        END
        ELSE
          ERROR(Text0001,TextFiltroFech);

      END;
    END;

    PROCEDURE PrimeraFecha@1100253003(VAR TextFiltroFech@1103350000 : Text[250]) : Date;
    VAR
      wFecha1@1103350001 : Date;
      wFecha2@1103350002 : Date;
      PosicionCadena@1103350003 : Integer;
      i@1103350004 : Integer;
      lcGestApl@1103350005 : Codeunit 1;
      Text1@1103350006 : Text[250];
      Text2@1103350007 : Text[250];
    BEGIN
      // PrimeraFecha
      // Devuelve la primera fecha del rango de fechas

      lcGestApl.MakeDateFilter(TextFiltroFech);

      PosicionCadena := STRPOS(TextFiltroFech,'..');

      IF PosicionCadena = 0 THEN BEGIN
        EVALUATE(wFecha1,TextFiltroFech)
      END
      ELSE
      BEGIN
        Text1 := COPYSTR(TextFiltroFech,1,PosicionCadena - 1);
        IF NOT (EVALUATE(wFecha1,Text1)) THEN
          CLEAR(wFecha1);
      END;
      EXIT(wFecha1);
    END;

    PROCEDURE UltimaFecha@1100253011(VAR TextFiltroFech@1103350000 : Text[250]) : Date;
    VAR
      wFecha1@1103350001 : Date;
      wFecha2@1103350002 : Date;
      PosicionCadena@1103350003 : Integer;
      i@1103350004 : Integer;
      lcGestApl@1103350005 : Codeunit 1;
      Text1@1103350006 : Text[250];
      Text2@1103350007 : Text[250];
    BEGIN
      // UltimaFecha
      // Devuelve la ultima fecha del rango de fechas

      lcGestApl.MakeDateFilter(TextFiltroFech);

      PosicionCadena := STRPOS(TextFiltroFech,'..');

      IF PosicionCadena = 0 THEN BEGIN
        EVALUATE(wFecha1,TextFiltroFech)
      END
      ELSE
      BEGIN
        Text1 := COPYSTR(TextFiltroFech, PosicionCadena + 2);
        IF NOT (EVALUATE(wFecha1,Text1)) THEN
          CLEAR(wFecha1);
      END;
      EXIT(wFecha1);
    END;

    PROCEDURE PasarCond@1103350000(prCond@1103350000 : Record 7010327);
    VAR
      lwCont@1103350001 : Integer;
      lwCont2@1103350005 : Integer;
      lwPriCol@1103350003 : Integer;
      lwCliAnt@1103350004 : Code[20];
      lwOk@1100253000 : Boolean;
      lwDato@1100253001 : Decimal;
      lwDatoS@1100253002 : ARRAY [3] OF Decimal;
      lwTotal@1100253003 : ARRAY [3] OF Decimal;
    BEGIN
      // PasarCond
      // Envia al excel el Conductor pasado como parametro
      // Para el calculo tenemos que acceder a las tablas de Touroperador x Parte y Coste - Ingreso

      lwPriCol:=4; // Margen izquierdo de la informacion
      WITH prCond DO BEGIN
        IF wDesglClient THEN
          wFil +=2
        ELSE
          wFil +=1;
        wCol:= 1;
        rExcel.INIT;
        rExcel.VALIDATE("Row No."      , wFil);
        rExcel.VALIDATE("Column No."   , wCol);
        rExcel."Cell Value as Text"   := STRSUBSTNO(Text0004, prCond.Conductor , NombreCond(prCond.Conductor));
        rExcel."Texto Alineacion Horizontal" :=2; // Izquierda
        IF wDesglClient THEN BEGIN
          rExcel."Fusionar hasta celda" := rExcel.DevuelveCelda(wFil,wCol+14);
          rExcel.VALIDATE(Bordes         , 2);
          rExcel.Bold  := TRUE;
          wFil +=2;
        END;
        rExcel.INSERT;

        IF wDesglClient THEN
          CreaCab(lwPriCol);

        CLEAR(rTOpar);

        // Lineas de datos
        rTempCLITO.RESET;
        CLEAR(wFilAnt); // Indica la primera fila de un TTOO
        IF rTempCLITO.FINDSET THEN BEGIN
          CLEAR(lwCliAnt);
          REPEAT
            IF lwCliAnt <> rTempCLITO.Cliente THEN BEGIN // Si hay cambio de cliente
              // Comprobamos que para este cliente hay movimiento
              CreaTotal(lwPriCol);
              wFil +=2;
              wCol:= 2;
              rExcel.INIT;
              rExcel.VALIDATE("Row No."      , wFil);
              rExcel.VALIDATE("Column No."   , wCol);
              rExcel."Cell Value as Text" := rTempCLITO.Direcci¢n;
              rExcel.INSERT;
              lwCliAnt := rTempCLITO.Cliente;
              wFilAnt  := wFil +1;
            END;

            IF wDesglClient THEN //TTOO
              wFil +=1;
            wCol:= 3;
            rExcel.INIT;
            rExcel.VALIDATE("Row No."      , wFil);
            rExcel.VALIDATE("Column No."   , wCol);
            rExcel."Borde Abaj":= 1;
            rExcel."Cell Value as Text" := rTempCLITO.Poblacion;
            rExcel.Width := 30;
            rExcel.INSERT;

            // DATOS
            wCol:=lwPriCol;
            rExcel.INIT;
            rExcel.VALIDATE("Row No."      , wFil);

            CLEAR(rTempTOPar);
            rTempTOPar.SETRANGE("Cliente operativo"     , rTempCLITO.Cliente);
            rTempTOPar.SETRANGE(Touroperador, rTempCLITO.TTOO);
            CLEAR(lwTotal);
            FOR wTipSer:=1 TO 4 DO BEGIN // Tipo de servicio
              rTempTOPar.SETRANGE("Tipo Servicio", FORMAT(wTipSer));
              FOR wTipoDato:=1 TO 3 DO BEGIN // Tipo de Informacion
                IF wTipSer = wTipSer::TOTAL THEN
                  lwDato := lwTotal[wTipoDato] // Acumula Totales
                ELSE BEGIN
                  IF NOT rTempTOPar.FINDFIRST THEN
                    rTempTOPar.INIT;

                  CASE wTipoDato OF
                    wTipoDato::PRODUCCION      : lwDato := rTempTOPar."Importe Touroperador";
                    wTipoDato::"N§ VIAJES"     : lwDato := rTempTOPar."N§ Viajes";
                    wTipoDato::"PAX FACT"      : lwDato := rTempTOPar."Pax Transportados";
                  END;
                  lwTotal[wTipoDato] += lwDato;
                END;
                rExcel.VALIDATE("Column No."   , wCol + (wTipSer-1) + ((wTipoDato-1)*4));
                rExcel."Cell Value as Text" := FORMAT(lwDato);
                rExcel.INSERT;
              END;
            END;
          UNTIL rTempCLITO.NEXT=0;
          IF wDesglClient THEN
            CreaTotal(lwPriCol);
        END;

      END;
    END;

    PROCEDURE CreaCab@1100253000(pwPriCol@1100253000 : Integer);
    VAR
      lwCont@1100253001 : Integer;
    BEGIN
      // CreaCab
      // Crea Una Cabecera

      // Crea Los encabezamientos
      wCol:=pwPriCol;

      rExcel.INIT;
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel.VALIDATE(Bordes         , 2);
      rExcel."Texto Alineacion Horizontal" :=3; // Centro

      FOR wTipoDato:=1 TO 3 DO BEGIN // Tipo de Informacion
        rExcel."Cell Value as Text" := FORMAT(wTipoDato);
        rExcel.VALIDATE("Column No."   , wCol);
        rExcel."Fusionar hasta celda" := rExcel.DevuelveCelda(wFil,wCol+3);
        rExcel.INSERT;
        wCol+=4;
      END;

      // Tipos de Servicio
      wFil +=1;
      wCol:=pwPriCol;
      rExcel.INIT;
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel.VALIDATE(Bordes         , 2);
      rExcel."Texto Alineacion Horizontal" :=3; // Centro
      FOR lwCont:=1 TO 3 DO BEGIN // Tipo de Informacion
        FOR wTipSer:=1 TO 4 DO BEGIN
          rExcel.VALIDATE("Column No." , wCol);
          rExcel."Cell Value as Text" := FORMAT(wTipSer);
          rExcel.INSERT;
          wCol+= 1;
        END;
      END;
    END;

    PROCEDURE CreaTotal@1100253005(pwPriCol@1100253000 : Integer);
    VAR
      lwCont@1100253001 : Integer;
      lwCont2@1100253002 : Integer;
    BEGIN
      // CreaTotal
      // Crea Un Total


      IF wFilAnt=0 THEN
        EXIT;

      wFil +=1;
      rExcel.INIT;
      rExcel.VALIDATE("Row No."      , wFil);

      wCol:=3;
      rExcel.VALIDATE("Column No." , wCol);
      rExcel."Cell Value as Text" :=Text0016;
      rExcel.Bold:= TRUE;
      rExcel.INSERT;

      wCol:=pwPriCol;

      // Tipos de Servicio
      wCol:=pwPriCol;
      rExcel.INIT;
      rExcel.VALIDATE("Row No."      , wFil);
      FOR lwCont:=1 TO 3 DO BEGIN // Tipo de Informacion
        FOR wTipSer:=1 TO 4 DO BEGIN
          rExcel.VALIDATE("Column No." , wCol);
          rExcel."Cell Value as Text" := STRSUBSTNO(Text50001,rExcel.DevuelveCelda(wFilAnt           ,rExcel."Column No."),
                                                                   rExcel.DevuelveCelda(rExcel."Row No."-1,rExcel."Column No."));
          rExcel.INSERT;
          wCol+= 1;
        END;
      END;
    END;

    PROCEDURE NombreCliente@1100253001(pwCod@1100253000 : Code[20]) : Text[100];
    VAR
      lrCli@1100253001 : Record 18;
    BEGIN
      // NombreCliente

      IF lrCli.GET(pwCod) THEN
         EXIT(lrCli.Name)
      ELSE
         EXIT(pwCod);
    END;

    PROCEDURE NombreTTOO@1100253002(pwCod@1100253000 : Code[10]) : Text[100];
    VAR
      lrTTOO@1100253001 : Record 7010312;
    BEGIN

      IF lrTTOO.GET(pwCod) THEN
        EXIT(lrTTOO.Nombre)
      ELSE
        EXIT(pwCod);
    END;

    PROCEDURE NombreCond@1100253016(pwCod@1100253000 : Code[10]) : Text[100];
    VAR
      lrCond@1100253001 : Record 7010327;
    BEGIN
      // NombreCond

      IF pwCod='' THEN
        EXIT(Text0017);
      IF lrCond.GET(pwCod) THEN
        EXIT(STRSUBSTNO('%1, %2',lrCond.Apellidos, lrCond.Nombre))
      ELSE
        EXIT(pwCod);
    END;

    PROCEDURE Calcula@1100253006(pwCond@1100253004 : Code[10]);
    VAR
      lrToPar@1100253000 : Record 7010365;
      lrPart@1100253001 : Record 7010360;
      lwDatos@1100253002 : ARRAY [3] OF Decimal;
      lwCli@1100253003 : Code[10];
      lwTTOO@1100253005 : Code[10];
      lwCont@1100253006 : Integer;
      lwTotal@1100253007 : Integer;
      lwSel@1100253008 : Boolean;
    BEGIN
      // Calcula
      // Devuelve los calculos de Pax transportado, Viajes e Ingreso seg£n los datos pasados como parametros
      // Este dato no podemos sacarlo de campos calculados ya que no tenemos ning£n filtro que cubra todos los campos + Vehiculo
      // Para evitar introducir m s filtros optamos por calcularlo manualmente
      // El parametros pwDatos tiene tres dimensiones : 1: Importe, 2:Viajes, 3:Pax Facturado

      CLEAR(lrToPar);
      CLEAR(lrPart);
      CLEAR(lwDatos);
      lrPart.SETCURRENTKEY(Confirmado,"Cod Conductor","Fecha facturacion","Tipo Servicio",Garaje);
      lrPart.SETRANGE(Confirmado          , TRUE);
      lrPart.SETRANGE("Cod Conductor"     , pwCond);
      lrPart.SETFILTER("Fecha facturacion", wFiltroFecha);

      IF lrPart.FINDSET THEN BEGIN
        CLEAR(lwCont);
        lwTotal := lrPart.COUNT;
        REPEAT
          CASE lrPart."Codigo Servicio" OF
            rPar."Codigo Entradas" : wTipSer := wTipSer::ENTRADAS;
            rPar."Codigo Salidas"  : wTipSer := wTipSer::SALIDAS;
            ELSE                     wTipSer := wTipSer::EXCURSION;
          END;

          lrToPar.SETRANGE("N§ Parte", lrPart."N§ Parte");
          IF lrToPar.FINDSET THEN BEGIN
            REPEAT
              lwSel := vSelecTTOO = vSelecTTOO::"Todos los Clientes";
              IF NOT lwSel THEN
                lwSel := rTempCLITOSel.GET(lrToPar."Cliente operativo", lrToPar.Touroperador);

              IF lwSel THEN BEGIN
                CLEAR(lwDatos);
                lwDatos[1] := lrToPar.TotalIngresoDL; // Importe
                lwDatos[2] := 1;   // Viajes
                lwDatos[3] := lrToPar."Adultos facturados" + lrToPar."Ni¤os facturados"; // Pax Factuado
                IF wDesglClient THEN BEGIN
                  lwCli  := lrToPar."Cliente operativo";
                  lwTTOO := lrToPar.Touroperador;
                END
                ELSE BEGIN
                  lwCli  := '';
                  lwTTOO := '';
                END;
                InsertaTemp(pwCond ,lwCli ,lwTTOO ,lwDatos)
              END;
            UNTIL lrToPar.NEXT=0;
          END;
          lwCont +=1;
          wVentana.UPDATE(3,ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrPart.NEXT=0;
      END;
    END;

    PROCEDURE InsertaTemp@1100253014(pwCond@1100253003 : Code[10];pwCliente@1100253000 : Code[10];pwTTOO@1100253001 : Code[10];pwDatos@1100253002 : ARRAY [3] OF Decimal);
    BEGIN
      // InsertaTemp
      // Se inserta un registro temporal de Cliente/TTOO
      // La variable pwDatos tiene tres dimensiones : 1: Importe, 2:Viajes, 3:Pax Facturado

      CLEAR(rTempTOPar); //  Se crea un temporal de Touroperador x Parte
      rTempTOPar.SETRANGE(Touroperador   , pwTTOO);
      rTempTOPar.SETRANGE("Cliente operativo"        , pwCliente);
      rTempTOPar.SETRANGE("Tipo Servicio", FORMAT(wTipSer));
      IF NOT rTempTOPar.FINDFIRST THEN BEGIN
        wContT += 1;  // Contador para la clave primaria
        rTempTOPar."N§ Parte"             := FORMAT(wContT);
        rTempTOPar.Touroperador           := pwTTOO;
        rTempTOPar."Cliente operativo"                := pwCliente;
        rTempTOPar."Tipo Servicio"        := FORMAT(wTipSer);
        rTempTOPar.INSERT;
      END;
      rTempTOPar."Importe Touroperador" += pwDatos[1];
      rTempTOPar."N§ Viajes"            += pwDatos[2];
      rTempTOPar."Pax Transportados"    += pwDatos[3];
      rTempTOPar.MODIFY;

      rTempCLITO.Cliente := pwCliente;
      rTempCLITO.TTOO    := pwTTOO;
      IF NOT rTempCLITO.FIND THEN BEGIN
        rTempCLITO.Direcci¢n := NombreCliente(rTempCLITO.Cliente);
        rTempCLITO.Poblacion := NombreTTOO(rTempCLITO.TTOO);
        rTempCLITO.INSERT;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
