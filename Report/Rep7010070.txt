OBJECT Report 7010070 Serv. Transfer x Vuelo EXCEL
{
  OBJECT-PROPERTIES
  {
    Date=22/06/15;
    Time=18:14:56;
    Modified=Yes;
    Version List=AIC2009,CNT;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Transfer services x flight;
               ESP=Servicios Transfer por Vuelo];
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number);
        MaxIteration=1;
        OnPreDataItem=BEGIN

                        IF (wFecha=0D) THEN
                          ERROR(Text003);

                        RellenaTemporales;
                        TraspasaAExcel;
                        cExcel.Mostrar;
                      END;

      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=13090;
      Height=1760;
      CaptionML=[ENU=Transfer services x flight;
                 ESP=Servicios Transfer por Vuelo];
    }
    CONTROLS
    {
      { 1100253000;TextBox;3630 ;220  ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Date;
                                                              ESP=Fecha];
                                                   SourceExpr=wFecha }
      { 1100253002;Label  ;220  ;220  ;3300 ;440  ;ParentControl=1100253000;
                                                   InPage=-1 }
      { 1100253001;TextBox;3630 ;880  ;1700 ;440  ;InPage=-1;
                                                   CaptionML=ESP=IATA;
                                                   SourceExpr=wIATA;
                                                   TableRelation=Aeropuerto }
      { 1100253003;Label  ;220  ;880  ;3300 ;440  ;ParentControl=1100253001 }
      { 1100253004;TextBox;5500 ;880  ;7370 ;440  ;SourceExpr=cFunNom.nom_aeropuerto(wIATA) }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      wFecha@1100253001 : Date;
      Text001@1100253011 : TextConst 'ESP=Date';
      Text003@1100253003 : TextConst 'ENU=Must Fill the Date field;ESP=Debe de rellenar una fecha';
      rTmpAgrp@1100253004 : TEMPORARY Record 7010251;
      rTempRes@1100253005 : TEMPORARY Record 7010251;
      rBuff@1100253010 : TEMPORARY Record 7009785;
      wVuelta@1100253006 : 'Llegada,Salida';
      wIATA@1100253002 : Code[10];
      cFunNom@1100253007 : Codeunit 7009702;
      cExcel@1100253000 : Codeunit 7009755;
      wFil@1100253008 : Integer;
      wCol@1100253009 : Integer;
      Text004@1100253012 : TextConst 'ESP=Departure Time';
      Text005@1100253013 : TextConst 'ESP=Arrival Time';
      Text006@1100253014 : TextConst 'ESP=DEPARTURES';
      Text007@1100253015 : TextConst 'ESP=ARRIVALS';
      Text008@1100253024 : TextConst 'ESP="Build Temp "';
      Text009@1100253025 : TextConst 'ENU=Transfer to Excel;ESP="Pasando a  Excel "';
      Text010@1100253016 : TextConst 'ESP=Pick up Time';
      Text011@1100253017 : TextConst 'ESP=Hotel';
      Text012@1100253018 : TextConst 'ESP=No.Pax';
      Text013@1100253019 : TextConst 'ESP=Bus Company';
      Text014@1100253020 : TextConst 'ESP=Bus Capacity';
      Text015@1100253021 : TextConst 'ESP=Transfer Rep.';
      Text016@1100253022 : TextConst 'ESP=Bus Number';
      wVent@1100253023 : Dialog;
      Text020@1100253026 : TextConst 'ESP=Flight Number';
      Text030@1100253027 : TextConst 'ESP=Departures';
      Text031@1100253028 : TextConst 'ESP=Air Only';
      Text032@1100253029 : TextConst 'ESP=Total Departures';
      Text040@1100253030 : TextConst 'ESP=Arrivals';
      Text041@1100253031 : TextConst 'ESP=Total Arrivals';
      Text050@1100253032 : TextConst 'ESP="Prepared by: "';

    PROCEDURE RellenaTemporales@1100253003();
    VAR
      lrRes@1100253000 : Record 7009744;
      lwIdAg@1100253001 : Integer;
      lwId@1100253002 : Integer;
      lwTotal@1100253003 : Integer;
      lwCont@1100253004 : Integer;
      lwVuel@1100253005 : Code[10];
    BEGIN
      // RellenaTemporales

      CLEAR(rTmpAgrp);
      rTmpAgrp.DELETEALL;
      CLEAR(rTempRes);
      rTempRes.DELETEALL;

      CLEAR(lwId);
      CLEAR(lwIdAg);

      // Llegadas
      CLEAR(lrRes);
      lrRes.SETCURRENTKEY("Fecha entrada",TourOperador,Nombre);
      lrRes.SETRANGE("Fecha entrada"     , wFecha);
      lrRes.SETFILTER("Agrupacion entrada", '<>%1', 0);
      lrRes.SETRANGE(Entrada, 1); // +$003
      IF wIATA <> '' THEN
        lrRes.SETRANGE("IATA origen entrada" , wIATA);
      IF lrRes.FINDSET THEN BEGIN
        wVent.OPEN(Text008 + Text007 + ' @1@@@@@@@@@@@@@@@@');
        lwTotal := lrRes.COUNT;
        CLEAR(lwCont);
        REPEAT
          lwVuel := lrRes."Compa¤ia entrada" + lrRes."Vuelo entrada";
          //-$002lrRes.CALCFIELDS(Personas);
          CLEAR(rTempRes);
          rTempRes.SETRANGE(Int02  , lrRes."Agrupacion entrada");
          rTempRes.SETRANGE(Code01 , lrRes."Hotel entrada");
          rTempRes.SETRANGE(Code02 , lwVuel);
          IF NOT rTempRes.FINDFIRST THEN BEGIN
            CLEAR(rTempRes);
            lwId += 1;
            rTempRes.Id     := lwId;
            rTempRes.Int02  := lrRes."Agrupacion entrada";
            rTempRes.Code01 := lrRes."Hotel entrada";
            rTempRes.Code02 := lwVuel;
            rTempRes.INSERT;
          END;
          rTempRes.Dec01 += lrRes."N§ Personas"; //+$002

          InsertaAgrp(lrRes."Agrupacion entrada", lwIdAg,
                      lwVuel, rTempRes.Time01,HoraVuelo(lrRes,0));

          rTempRes.Int01  := rTmpAgrp.Id;
          rTempRes.MODIFY;
          lwCont +=1;
          wVent.UPDATE(1, ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrRes.NEXT=0;
        wVent.CLOSE;
      END;

      // Salidas
      CLEAR(lrRes);
      lrRes.SETCURRENTKEY("Fecha salida",TourOperador,Nombre);
      lrRes.SETRANGE("Fecha salida", wFecha);
      lrRes.SETFILTER("Agrupacion salida", '<>%1', 0);
      lrRes.SETRANGE(Salida, 1); // +$003
      IF wIATA <> '' THEN
        lrRes.SETRANGE(lrRes."IATA destino salida" , wIATA);
      IF lrRes.FINDSET THEN BEGIN
        wVent.OPEN(Text008 + Text006 + ' @1@@@@@@@@@@@@@@@@');
        lwTotal := lrRes.COUNT;
        CLEAR(lwCont);
        REPEAT
          lwVuel := lrRes."Compa¤ia salida" + lrRes."Vuelo salida";
          //-$002lrRes.CALCFIELDS(Personas);
          CLEAR(rTempRes);
          rTempRes.SETRANGE(Int02  , lrRes."Agrupacion salida");
          rTempRes.SETRANGE(Code01 , lrRes."Hotel salida");
          rTempRes.SETRANGE(Code02 , lwVuel);
          IF NOT rTempRes.FINDFIRST THEN BEGIN
            CLEAR(rTempRes);
            lwId += 1;
            rTempRes.Id := lwId;
            rTempRes.Int02  := lrRes."Agrupacion salida";
            rTempRes.Code01 := lrRes."Hotel salida";
            rTempRes.Time01 := HoraRecogida(lrRes,1);
            rTempRes.Code02 := lwVuel;
            rTempRes.INSERT;
          END;
          rTempRes.Dec01  += lrRes.o_Personas; //+$002

          InsertaAgrp(lrRes."Agrupacion salida", lwIdAg,
                      lwVuel, rTempRes.Time01, HoraVuelo(lrRes,1));
          rTempRes.Int01  := rTmpAgrp.Id;
          rTempRes.MODIFY;
          lwCont +=1;
          wVent.UPDATE(1, ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrRes.NEXT=0;
        wVent.CLOSE;
      END;
    END;

    PROCEDURE InsertaAgrp@1100253004(pwNAgrp@1100253000 : Integer;VAR pwId@1100253002 : Integer;pwVuelo@1100253003 : Code[20];pw1Hora@1100253004 : Time;pwHoraVuelo@1100253006 : Time);
    VAR
      lrAgr@1100253001 : Record 7009796;
      lrGuiaAgrp@1100253005 : Record 7009905;
    BEGIN
      // InsertaAgrp

      // En realiad creamos tantas combinaciones de agrupacion/Vuelo como sean necesarias
      IF pwNAgrp <> 0 THEN BEGIN
        CLEAR(rTmpAgrp);
        rTmpAgrp.SETRANGE(Int02  , pwNAgrp);
        rTmpAgrp.SETRANGE(Code01 , pwVuelo);
        IF NOT rTmpAgrp.FINDFIRST THEN BEGIN
          IF lrAgr.GET(pwNAgrp) THEN BEGIN
            pwId        +=1;
            rTmpAgrp.Id     := pwId;
            rTmpAgrp.Int01  := lrAgr."Tipo transfer";
            rTmpAgrp.Int02  := pwNAgrp;
            rTmpAgrp.Int03  := lrAgr."Capacidad Vehiculo";
            rTmpAgrp.Time01 := pwHoraVuelo;
            rTmpAgrp.Time02 := pw1Hora; // Primera hora recogia
            rTmpAgrp.Code01 := pwVuelo;
            rTmpAgrp.Code02 := lrAgr.Transportista;
            CLEAR(lrGuiaAgrp);
            lrGuiaAgrp.SETRANGE("Num.Agrupacion", lrAgr."N§ Agrupacion");
            IF lrGuiaAgrp.FINDFIRST THEN
              rTmpAgrp.Code03 := lrGuiaAgrp."Cod.Guia";
            rTmpAgrp.Code04  := lrAgr."Numero Bus";
            rTmpAgrp.INSERT;
          END;
        END;
        // Buscamos la primera hora de recogida
        IF (pw1Hora <> 0T) THEN BEGIN
          IF (rTmpAgrp.Time02=0T) OR (pw1Hora < rTmpAgrp.Time02) THEN
            rTmpAgrp.Time02 := pw1Hora;
        END;
        rTmpAgrp.MODIFY;
      END;
    END;

    PROCEDURE HoraRecogida@1100253000(prRes@1100253001 : Record 7009744;pwTipoTrans@1100253002 : 'Entrada,Salida') : Time;
    VAR
      lrHoraRecAg@1100253000 : Record 7009800;
      lrPrev@1100253004 : Record 7010246;
      lwHora@1100253003 : Time;
    BEGIN
      // HoraRecogida

      CLEAR(lwHora);

      CLEAR(lrHoraRecAg);
      lrHoraRecAg.SETRANGE("Tipo transfer" , pwTipoTrans);

      CASE pwTipoTrans OF
        pwTipoTrans::Entrada : BEGIN
          lrHoraRecAg.SETRANGE("N§ Agrupacion" , prRes."Agrupacion entrada");
          lrHoraRecAg.SETRANGE(Fecha           , prRes."Fecha entrada");
          lrHoraRecAg.SETRANGE(Hotel           , prRes."Hotel entrada");
          lrHoraRecAg.SETRANGE(Compa¤ia        , prRes."Compa¤ia entrada");
          lrHoraRecAg.SETRANGE(Vuelo           , prRes."Vuelo entrada");
          lrHoraRecAg.SETRANGE(IATA            , prRes."IATA origen entrada");
        END;
        pwTipoTrans::Salida : BEGIN
          lrHoraRecAg.SETRANGE("N§ Agrupacion" , prRes."Agrupacion salida");
          lrHoraRecAg.SETRANGE(Fecha           , prRes."Fecha salida");
          lrHoraRecAg.SETRANGE(Hotel           , prRes."Hotel salida");
          lrHoraRecAg.SETRANGE(Compa¤ia        , prRes."Compa¤ia salida");
          lrHoraRecAg.SETRANGE(Vuelo           , prRes."Vuelo salida");
          lrHoraRecAg.SETRANGE(IATA            , prRes."IATA destino salida");
        END;
      END;

      IF lrHoraRecAg.FINDFIRST THEN
        lwHora := lrHoraRecAg."Hora recogida";

      // Si no est  la hora la buscamos de la previsi¢n
      IF lwHora = 0T THEN BEGIN
        CLEAR(lrPrev);
        lrPrev.SETCURRENTKEY(Fecha,Compa¤ia,Vuelo,Hotel);
        CASE pwTipoTrans OF
          pwTipoTrans::Entrada : BEGIN
            lrPrev.SETRANGE(Fecha           , prRes."Fecha entrada");
            lrPrev.SETRANGE(Hotel           , prRes."Hotel entrada");
            lrPrev.SETRANGE(Compa¤ia        , prRes."Compa¤ia entrada");
            lrPrev.SETRANGE(Vuelo           , prRes."Vuelo entrada");
            lrPrev.SETRANGE(IATA            , prRes."IATA origen entrada");
          END;
          pwTipoTrans::Salida : BEGIN
            lrPrev.SETRANGE(Fecha           , prRes."Fecha salida");
            lrPrev.SETRANGE(Hotel           , prRes."Hotel salida");
            lrPrev.SETRANGE(Compa¤ia        , prRes."Compa¤ia salida");
            lrPrev.SETRANGE(Vuelo           , prRes."Vuelo salida");
            lrPrev.SETRANGE(IATA            , prRes."IATA destino salida");
          END;
        END;
        IF lrPrev.FINDFIRST THEN
          lwHora := lrPrev."Hora recogida";
      END;

      //+$001 <
      //. Si no esta la hora la buscamos en la prevision de temporada
      IF lwHora = 0T THEN BEGIN
        CLEAR(lrPrev);
        lrPrev.SETCURRENTKEY(Fecha,Compa¤ia,Vuelo,Hotel);
        CASE pwTipoTrans OF
          pwTipoTrans::Entrada : BEGIN
            lrPrev.SETRANGE(Hotel           , prRes."Hotel entrada");
            lrPrev.SETRANGE(Compa¤ia        , prRes."Compa¤ia entrada");
            lrPrev.SETRANGE(Vuelo           , prRes."Vuelo entrada");
            lrPrev.SETRANGE(IATA            , prRes."IATA origen entrada");
          END;
          pwTipoTrans::Salida : BEGIN
            lrPrev.SETRANGE(Hotel           , prRes."Hotel salida");
            lrPrev.SETRANGE(Compa¤ia        , prRes."Compa¤ia salida");
            lrPrev.SETRANGE(Vuelo           , prRes."Vuelo salida");
            lrPrev.SETRANGE(IATA            , prRes."IATA destino salida");
          END;
        END;
        lrPrev.SETRANGE("Prevision temporada", TRUE);
        IF lrPrev.FINDFIRST THEN
          lwHora := lrPrev."Hora recogida";
      END;
      //+$001 >


      EXIT(lwHora);
    END;

    PROCEDURE HoraVuelo@1100253038(prRes@1100253002 : Record 7009744;pwTipoTrans@1100253001 : 'Entrada,Salida') : Time;
    VAR
      lrVuelo@1100253000 : Record 7009754;
      lwHora@1100253003 : Time;
    BEGIN
      // HoraVuelo

      CLEAR(lwHora);
      CLEAR(lrVuelo);
      CASE pwTipoTrans OF
        pwTipoTrans::Entrada: BEGIN
          lrVuelo.SETRANGE(Fecha   ,  prRes."Fecha entrada");
          lrVuelo.SETRANGE(Compa¤ia,  prRes."Compa¤ia entrada");
          lrVuelo.SETRANGE(Vuelo   ,  prRes."Vuelo entrada");
          lrVuelo.SETRANGE(Origen  ,  prRes."IATA origen entrada");
          IF lrVuelo.FINDFIRST THEN
            lwHora := lrVuelo."Hora Entrada";
        END;
        pwTipoTrans::Salida: BEGIN
          lrVuelo.SETRANGE(Fecha   ,  prRes."Fecha salida");
          lrVuelo.SETRANGE(Compa¤ia,  prRes."Compa¤ia salida");
          lrVuelo.SETRANGE(Vuelo   ,  prRes."Vuelo salida");
          lrVuelo.SETRANGE(Origen  ,  prRes."IATA origen salida");
          IF lrVuelo.FINDFIRST THEN
            lwHora := lrVuelo."Hora Salida";
        END;
      END;
      EXIT(lwHora);
    END;

    PROCEDURE TraspasaAExcel@1100253016();
    VAR
      lwText@1100253000 : Text[250];
      lwVuelta@1100253001 : 'Llegada,Salida';
      lwVueloAnt@1100253002 : Code[10];
      lwFilAnt@1100253003 : Integer;
      lwTotalPax@1100253004 : Decimal;
      lwTotalPax2@1100253007 : Decimal;
      lwTotal@1100253005 : Integer;
      lwCont@1100253006 : Integer;
      lwN@1100253008 : Integer;
      lwEndFil@1100253009 : Integer;
    BEGIN
      // TraspasaAExcel

      wFil := 5;
      wCol := 1;

      CLEAR(lwEndFil);

      cExcel.Nuevo;
      // cExcel.BorraHojas;

      CLEAR(rBuff);
      CLEAR(lwText);
      IF wIATA <> '' THEN BEGIN
        lwText := STRSUBSTNO('%1 - %2', wIATA, cFunNom.nom_aeropuerto(wIATA));
        rBuff."Tama¤o Fuente" := 16;
        rBuff.Bold := TRUE;
        InsertaLin(0,0, lwText);
        cExcel.AltoFila(30);
      END;

      CLEAR(rBuff);
      lwText := STRSUBSTNO('%1:%2 %3', Text001, FORMAT(wFecha, 0, '<Weekday Text>'), wFecha);
      InsertaLin(2,0, lwText);

      CLEAR(rTmpAgrp);
      rTmpAgrp.SETCURRENTKEY(Int01,Time01,Code01,Time02);
      lwFilAnt := wFil;
      FOR lwVuelta := lwVuelta::Llegada TO lwVuelta::Salida DO BEGIN
        CLEAR(lwTotalPax2);
        wFil := lwFilAnt;
        CLEAR(lwVueloAnt);
        rTmpAgrp.SETRANGE(Int01, lwVuelta);
        IF rTmpAgrp.FINDSET THEN BEGIN
          wVent.OPEN(STRSUBSTNO('%1 %2 %3',Text009, lwVuelta, '@1@@@@@@@@@@@@@@@@'));
          lwTotal := rTmpAgrp.COUNT;
          CLEAR(lwCont);
          REPEAT
            IF lwVueloAnt <> rTmpAgrp.Code01 THEN BEGIN
              wCol := ColIni(lwVuelta);
              rBuff."Texto Alineacion Horizontal" :=2; // Izquierda
              rBuff.Bold   := FALSE;
              rBuff.Bordes :=0;
              lwText := STRSUBSTNO('%1: %2', Text020, rTmpAgrp.Code01);
              InsertaLin(2,0, lwText);
              CASE lwVuelta OF
                lwVuelta::Llegada : lwText := Text005;
                lwVuelta::Salida : lwText := Text004;
              END;
              wCol := ColIni(lwVuelta);
              lwText := STRSUBSTNO('%1: %2', lwText, FormatoHora(rTmpAgrp.Time01));
              InsertaLin(1,0, lwText);
              // Cabecera
              SetCabecera(lwVuelta);
              wFil +=1;
              // SetBordes(lwVuelta);
              lwVueloAnt := rTmpAgrp.Code01;
            END;
            rBuff.Bold   := FALSE;
            CLEAR(lwTotalPax);
            wCol := ColIni(lwVuelta);
            CLEAR(rTempRes);
            rTempRes.SETCURRENTKEY(Int01,Time01,Code01,Time02);
            rTempRes.SETRANGE(Int01, rTmpAgrp.Id);
            IF rTempRes.FINDSET THEN BEGIN
              rBuff.Bordes :=2;
              REPEAT
                wCol := ColIni(lwVuelta);
                wFil +=1;
                IF lwVuelta= lwVuelta::Salida THEN BEGIN
                  rBuff."Texto Alineacion Horizontal" :=3; // Centro
                  InsertaLin(0,0, FormatoHora(rTempRes.Time01));
                  wCol +=1;
                END;
                rBuff."Texto Alineacion Horizontal" :=2; // Izquierda
                InsertaLin(0,0, NomHotel(rTempRes.Code01));
                rBuff."Texto Alineacion Horizontal" :=3; // Centro
                InsertaLin(0,1, FORMAT(rTempRes.Dec01));
                InsertaLin(0,1, NomTransp(rTmpAgrp.Code02));
                InsertaLin(0,1, FORMAT(rTmpAgrp.Int03));
                InsertaLin(0,1, rTmpAgrp.Code03);
                IF lwVuelta= lwVuelta::Llegada THEN
                  InsertaLin(0,1,rTmpAgrp.Code04);
                lwTotalPax  += rTempRes.Dec01;
                lwTotalPax2 += rTempRes.Dec01;
              UNTIL rTempRes.NEXT=0;
            END;
            rBuff.Bordes :=0;
            rBuff.Bold   := TRUE;
            wCol := ColIni(lwVuelta);
            InsertaLin(1,2, FORMAT(lwTotalPax));

            lwCont +=1;
            wVent.UPDATE(1, ROUND(lwCont/lwTotal*10000,1));
          UNTIL rTmpAgrp.NEXT=0;
          wVent.CLOSE;

          // Totales
          wFil +=2;
          FOR lwN := 1 TO 3 DO BEGIN
            CLEAR(lwText);
            CASE lwVuelta OF
              lwVuelta::Llegada : BEGIN
                CASE lwN OF
                  1 : lwText := Text040;
                  2 : lwText := Text031;
                  3 : lwText := Text012;
                END;
                wCol := ColIni(lwVuelta) + 1;
              END;
              lwVuelta::Salida : BEGIN
                CASE lwN OF
                  1 : lwText := Text030;
                  2 : lwText := Text031;
                  3 : lwText := Text032;
                END;
                wCol := ColIni(lwVuelta) + 1;
              END;
            END;
            rBuff."Texto Alineacion Horizontal" :=4; // Derecha
            InsertaLin(1,0, lwText);
            cExcel.Celda(wFil,wCol+1);
            cExcel.Bordes(1,2,0);
            rBuff."Texto Alineacion Horizontal" :=3; // Centro
            CASE lwN OF
              1 : InsertaLin(0,1, FORMAT(lwTotalPax2));
            END;
          END;
        END;
        IF wFil > lwEndFil THEN
          lwEndFil := wFil;
      END;

      wFil := lwEndFil;
      wCol := ColIni(lwVuelta) +1;
      CLEAR(rBuff);
      InsertaLin(2,0, Text050 + NomUsuario);

      SetAnchoColumna;
      cExcel.AjustaImpresionHoja('','','',0,2,0,0);
    END;

    PROCEDURE InsertaLin@1100253002(pwIncFil@1100253000 : Integer;pwInCol@1100253001 : Integer;pwText@1100253002 : Text[250]);
    BEGIN
      // InsertaLin

      IF pwIncFil <> 0 THEN
        wFil += pwIncFil;
      IF pwInCol <> 0 THEN
        wCol += pwInCol;

      cExcel.Celda(wFil, wCol);
      IF rBuff.Bordes <> 0 THEN
        cExcel.Bordes(1, rBuff.Bordes, 0);

      IF rBuff.Height <> 0 THEN
        cExcel.AltoFila(rBuff.Height);
      IF rBuff.WrapText THEN
        cExcel.AjustarTexto;
      cExcel.Negrita(rBuff.Bold);

      //Alineacion Horizontal =  2: izquierda 3 Centro  4 Derecha
      cExcel.FormatoTexto('',0,0,rBuff."Tama¤o Fuente",rBuff."Texto Alineacion Horizontal",
                          rBuff."Texto Alineacion Vertical");
      cExcel.Valor(pwText);
    END;

    PROCEDURE ColIni@1100253028(pwTipo@1100253000 : 'Llegada,Salida') : Integer;
    VAR
      lwCol@1100253001 : Integer;
    BEGIN
      // ColIni
      // Devuelve la columna de Incio

      CLEAR(lwCol);
      CASE pwTipo OF
        pwTipo::Llegada : lwCol := 8;
        pwTipo::Salida  : lwCol := 1;
      END;
      EXIT(lwCol);
    END;

    PROCEDURE SetCabecera@1100253044(pwTipo@1100253000 : 'Llegada,Salida');
    BEGIN
      // SetCabecera

      // Inserta la Cabecera del vuelo
      rBuff.Bordes := 2;
      rBuff."Texto Alineacion Horizontal" :=3; // Centro
      rBuff.Height          := 25;
      rBuff."Tama¤o Fuente" := 16;
      rBuff.WrapText := TRUE;
      rBuff.Bold     := TRUE;
      wFil +=1;
      wCol := ColIni(pwTipo);
      cExcel.Rango(wFil,wCol,wFil,wCol+5);
      cExcel.Bordes(1,2,0);
      cExcel.CombinarCeldas;
      CASE pwTipo OF
          pwTipo::Llegada : BEGIN
                          InsertaLin(0,0, Text007);
                          rBuff.Height := 30;
                          rBuff."Tama¤o Fuente" := 0;
                          InsertaLin(1,0, Text011);
                          InsertaLin(0,1, Text012);
                          InsertaLin(0,1, Text013);
                          InsertaLin(0,1, Text014);
                          InsertaLin(0,1, Text015);
                          InsertaLin(0,1, Text016);
                        END;
          pwTipo::Salida : BEGIN
                          InsertaLin(0,0, Text006);
                          rBuff.Height := 30;
                          rBuff."Tama¤o Fuente" := 0;
                          InsertaLin(1,0, Text010);
                          InsertaLin(0,1, Text011);
                          InsertaLin(0,1, Text012);
                          InsertaLin(0,1, Text013);
                          InsertaLin(0,1, Text014);
                          InsertaLin(0,1, Text015);
                        END;
      END;

      rBuff.Height := 0;
      rBuff.WrapText := FALSE;
      rBuff.Bold     := FALSE;
    END;

    PROCEDURE SetBordes@1100253047(pwTipo@1100253000 : 'Llegada,Salida');
    BEGIN
      // SetBordes

      wCol := ColIni(pwTipo);
      cExcel.Rango(wFil,wCol,wFil,wCol+5);
      cExcel.Bordes(1,2,0);
    END;

    PROCEDURE NomHotel@1100253001(pwCode@1100253000 : Code[20]) : Text[30];
    VAR
      lwText@1100253001 : Text[30];
    BEGIN
      // NomHotel

      lwText := cFunNom.nom_hotel(pwCode);
      IF lwText='' THEN
        lwText := pwCode;
      EXIT(lwText);
    END;

    PROCEDURE NomTransp@1100253008(pwCode@1100253000 : Code[20]) : Text[30];
    VAR
      lwText@1100253001 : Text[30];
    BEGIN
      // NomTransp

      lwText := cFunNom.nom_transportista(pwCode);
      IF lwText='' THEN
        lwText := pwCode;
      EXIT(lwText);
    END;

    PROCEDURE NomUsuario@1100253005() : Text[30];
    VAR
      lwText@1100253000 : Text[30];
      lrUser@1100253001 : Record 2000000002;
    BEGIN
      // NomUsuario

      CLEAR(lwText);
      IF lrUser.GET(USERID) THEN
        lwText := lrUser.Name;
      IF lwText='' THEN
        lwText := USERID;

      EXIT(lwText);
    END;

    PROCEDURE FormatoHora@1100253006(pwHora@1100253000 : Time) : Text[30];
    VAR
      lwText@1100253001 : Text[30];
    BEGIN
      // FormatoHora

      lwText := FORMAT(pwHora, 0, '<Hours24,2>:<Minutes,2>');
      IF lwText='' THEN
        lwText := '-';
      EXIT(lwText);
    END;

    PROCEDURE SetAnchoColumna@1100253007();
    VAR
      lwCnt@1100253000 : Integer;
      lwWidth@1100253001 : Integer;
    BEGIN
      // SetAnchoColumna

      FOR lwCnt := 1 TO 13 DO BEGIN
        CLEAR(lwWidth);
        CASE lwCnt OF
          1,3,5,9,11    : lwWidth := 7;
          2,8           : lwWidth := 30;
          4,6,10,12,13  : lwWidth := 15;
          7             : lwWidth := 1;
        END;
        cExcel.Celda(1,lwCnt);
        cExcel.AnchoColumna(lwWidth);
      END;
    END;

    BEGIN
    {
      $001 AJS 27022013 Modifico la funcion HoraRecogida para que busque en la prevision de temporada

      $002 AJS 14042014 La cuenta de personas no se hace sobre elementos transportar transfer

      $003 ARM 22062015 CNT-CAR-14122 a¤adido filtro campo Entrada = 1, Salida = 1
    }
    END.
  }
  RDLDATA
  {
  }
}
