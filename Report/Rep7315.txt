OBJECT Report 7315 Calculate Whse. Adjustment
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Calculate Whse. Adjustment;
               ESP=Calcular ajuste almac‚n];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ByLocation := TRUE;
                   ByBin := FALSE;
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table27;
        DataItemTableView=SORTING(No.);
        OnPreDataItem=VAR
                        ItemJnlTemplate@1000 : Record 82;
                        ItemJnlBatch@1001 : Record 233;
                      BEGIN
                        IF PostingDate = 0D THEN
                          ERROR(Text000);

                        ItemJnlTemplate.GET(ItemJnlLine."Journal Template Name");
                        ItemJnlBatch.GET(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
                        IF NextDocNo = '' THEN BEGIN
                          IF ItemJnlBatch."No. Series" <> '' THEN BEGIN
                            ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlLine."Journal Template Name");
                            ItemJnlLine.SETRANGE("Journal Batch Name",ItemJnlLine."Journal Batch Name");
                            IF NOT ItemJnlLine.FIND('-') THEN
                              NextDocNo := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",PostingDate,FALSE);
                            ItemJnlLine.INIT;
                          END;
                          IF NextDocNo = '' THEN
                            ERROR(Text001);
                        END;

                        NextLineNo := 0;

                        IF NOT HideValidationDialog THEN
                          Window.OPEN(Text002,Item."No.");

                        IF GETFILTER("Location Filter") <> '' THEN
                          ByLocation:=TRUE;
                      END;

        OnAfterGetRecord=BEGIN
                           IF NOT HideValidationDialog THEN
                             Window.UPDATE;
                         END;

        OnPostDataItem=BEGIN
                         IF NOT HideValidationDialog THEN
                           Window.CLOSE;
                       END;

        ReqFilterFields=No.,Location Filter,Variant Filter;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        OnPreDataItem=BEGIN
                        CLEAR(Location);
                        WhseEntry.RESET;
                        WhseEntry.SETCURRENTKEY("Item No.","Bin Code","Location Code","Variant Code");
                        WhseEntry.SETRANGE("Item No.",Item."No.");
                        Item.COPYFILTER("Variant Filter",WhseEntry."Variant Code");

                        IF NOT WhseEntry.FIND('-') THEN
                          CurrReport.BREAK;

                        AdjmtBinQuantityBuffer.RESET;
                        AdjmtBinQuantityBuffer.DELETEALL;
                      END;

        OnAfterGetRecord=BEGIN
                           WITH AdjmtBinQuantityBuffer DO BEGIN
                             Location.RESET;
                             Item.COPYFILTER("Location Filter",Location.Code);
                             Location.SETRANGE("Directed Put-away and Pick",TRUE);
                             IF Location.FINDSET THEN
                               REPEAT
                                 WhseEntry.SETRANGE("Location Code",Location.Code);
                                 WhseEntry.SETRANGE("Bin Code",Location."Adjustment Bin Code");
                                 IF WhseEntry.FINDSET THEN
                                   REPEAT
                                     IF WhseEntry."Qty. (Base)" <> 0 THEN BEGIN
                                       RESET;
                                       SETRANGE("Item No.",WhseEntry."Item No.");
                                       SETRANGE("Variant Code",WhseEntry."Variant Code");
                                       SETRANGE("Location Code",WhseEntry."Location Code");
                                       SETRANGE("Bin Code",WhseEntry."Bin Code");
                                       SETRANGE("Unit of Measure Code",WhseEntry."Unit of Measure Code");
                                       IF WhseEntry."Lot No." <> '' THEN
                                         SETRANGE("Lot No.",WhseEntry."Lot No.");
                                       IF WhseEntry."Serial No." <> '' THEN
                                         SETRANGE("Serial No.",WhseEntry."Serial No.");
                                       IF FINDSET THEN BEGIN
                                         "Qty. to Handle (Base)" := "Qty. to Handle (Base)" + WhseEntry."Qty. (Base)";
                                         MODIFY;
                                       END ELSE BEGIN
                                         INIT;
                                         "Item No." := WhseEntry."Item No.";
                                         "Variant Code" := WhseEntry."Variant Code";
                                         "Location Code" := WhseEntry."Location Code";
                                         "Bin Code" := WhseEntry."Bin Code";
                                         "Unit of Measure Code" := WhseEntry."Unit of Measure Code";
                                         "Base Unit of Measure" := Item."Base Unit of Measure";
                                         "Lot No." := WhseEntry."Lot No.";
                                         "Serial No." := WhseEntry."Serial No.";
                                         "Qty. to Handle (Base)" := WhseEntry."Qty. (Base)";
                                         "Qty. Outstanding (Base)" := WhseEntry."Qty. (Base)";
                                         INSERT;
                                       END;
                                     END;
                                   UNTIL WhseEntry.NEXT = 0;
                               UNTIL Location.NEXT = 0;
                           END;
                         END;

        OnPostDataItem=VAR
                         ItemUOM@1001 : Record 5404;
                         QtyInUOM@1000 : Decimal;
                       BEGIN
                         WITH AdjmtBinQuantityBuffer DO BEGIN
                           RESET;
                           IF FINDSET THEN
                             REPEAT
                               IF "Location Code" <> '' THEN
                                 SETRANGE("Location Code","Location Code");
                               SETRANGE("Variant Code","Variant Code");
                               SETRANGE("Unit of Measure Code","Unit of Measure Code");

                               WhseQtyBase := 0;
                               SETFILTER("Qty. to Handle (Base)",'>0');
                               IF FINDSET THEN BEGIN
                                 REPEAT
                                   WhseQtyBase := WhseQtyBase - "Qty. to Handle (Base)";
                                 UNTIL NEXT = 0
                               END;

                               ItemUOM.GET("Item No.","Unit of Measure Code");
                               QtyInUOM := ROUND(WhseQtyBase / ItemUOM."Qty. per Unit of Measure",0.00001);
                               IF (QtyInUOM <> 0) AND FINDFIRST THEN
                                 InsertItemJnlLine(
                                   "Item No.","Variant Code","Location Code",
                                   QtyInUOM,WhseQtyBase,"Unit of Measure Code",1);

                               WhseQtyBase := 0;
                               SETFILTER("Qty. to Handle (Base)",'<0');
                               IF FINDSET THEN
                                 REPEAT
                                   WhseQtyBase := WhseQtyBase - "Qty. to Handle (Base)";
                                 UNTIL NEXT = 0;
                               QtyInUOM := ROUND(WhseQtyBase / ItemUOM."Qty. per Unit of Measure",0.00001);
                               IF (QtyInUOM <> 0) AND FINDFIRST THEN
                                 InsertItemJnlLine(
                                   "Item No.","Variant Code","Location Code",
                                   QtyInUOM,WhseQtyBase,"Unit of Measure Code",0);

                               WhseQtyBase := 0;
                               SETRANGE("Qty. to Handle (Base)");
                               IF FINDSET THEN
                                 REPEAT
                                   WhseQtyBase := WhseQtyBase - "Qty. to Handle (Base)";
                                 UNTIL NEXT = 0;
                               QtyInUOM := ROUND(WhseQtyBase / ItemUOM."Qty. per Unit of Measure",0.00001);
                               IF ((QtyInUOM = 0) AND (WhseQtyBase < 0)) AND FINDFIRST THEN
                                 InsertItemJnlLine(
                                   "Item No.","Variant Code","Location Code",
                                   WhseQtyBase,WhseQtyBase,"Base Unit of Measure",1);

                               FINDLAST;
                               SETRANGE("Location Code");
                               SETRANGE("Variant Code");
                               SETRANGE("Unit of Measure Code");
                             UNTIL NEXT = 0;
                           RESET;
                           DELETEALL;
                         END;
                       END;

      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=6160;
      Height=1100;
      CaptionML=[ENU=Calculate Inventory;
                 ESP=Calcular inventario f¡sico];
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   IF PostingDate = 0D THEN
                     PostingDate := WORKDATE;
                   ValidatePostingDate;
                 END;

    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;0    ;1650 ;440  ;CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro];
                                                   SourceExpr=PostingDate;
                                                   OnValidate=BEGIN
                                                                ValidatePostingDate;
                                                              END;
                                                               }
      { 2   ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=1 }
      { 9   ;TextBox      ;3410 ;660  ;2750 ;440  ;CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento];
                                                   SourceExpr=NextDocNo }
      { 10  ;Label        ;0    ;660  ;3300 ;440  ;ParentControl=9 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      CaptionML=[ENU=Calculate Inventory;
                 ESP=Calcular inventario f¡sico];
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF PostingDate = 0D THEN
                     PostingDate := WORKDATE;
                   ValidatePostingDate;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Posting Date;
                             ESP=Fecha registro];
                  SourceExpr=PostingDate;
                  OnValidate=BEGIN
                               ValidatePostingDate;
                             END;
                              }

      { 9   ;2   ;Field     ;
                  CaptionML=[ENU=Document No.;
                             ESP=N§ documento];
                  SourceExpr=NextDocNo }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Please enter the posting date.;ESP=Introduzca la fecha registro.';
      Text001@1001 : TextConst 'ENU=Please enter the document no.;ESP=Introduzca el n§ documento';
      Text002@1002 : TextConst 'ENU=Processing items    #1##########;ESP=Procesando prods.   #1##########';
      ItemJnlBatch@1004 : Record 233;
      ItemJnlLine@1005 : Record 83;
      WhseEntry@1006 : Record 7312;
      Location@1031 : Record 14;
      SourceCodeSetup@1008 : Record 242;
      AdjmtBinQuantityBuffer@1003 : TEMPORARY Record 7330;
      NoSeriesMgt@1017 : Codeunit 396;
      Window@1019 : Dialog;
      PostingDate@1020 : Date;
      CycleSourceType@1030 : ' ,Item,SKU';
      PhysInvtCycleCode@1029 : Code[10];
      NextDocNo@1021 : Code[20];
      WhseQtyBase@1007 : Decimal;
      NextLineNo@1023 : Integer;
      ByLocation@1024 : Boolean;
      ByBin@1025 : Boolean;
      ZeroQty@1026 : Boolean;
      HideValidationDialog@1028 : Boolean;

    PROCEDURE SetItemJnlLine@1(VAR NewItemJnlLine@1000 : Record 83);
    BEGIN
      ItemJnlLine := NewItemJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@4();
    BEGIN
      ItemJnlBatch.GET(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
      IF ItemJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    LOCAL PROCEDURE InsertItemJnlLine@6(ItemNo@1000 : Code[20];VariantCode2@1001 : Code[10];LocationCode2@1003 : Code[10];Quantity2@1002 : Decimal;QuantityBase2@1005 : Decimal;UOM2@1009 : Code[10];EntryType2@1011 : 'Negative Adjmt.,Positive Adjmt.');
    VAR
      Location@1008 : Record 14;
      WhseEntry2@1012 : Record 7312;
      WhseEntry3@1015 : Record 7312;
      ReservEntry@1007 : Record 337;
      CreateReservEntry@1004 : Codeunit 99000830;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF NextLineNo = 0 THEN BEGIN
          LOCKTABLE;
          SETRANGE("Journal Template Name","Journal Template Name");
          SETRANGE("Journal Batch Name","Journal Batch Name");
          IF FIND('+') THEN
            NextLineNo := "Line No.";

          SourceCodeSetup.GET;
        END;
        NextLineNo := NextLineNo + 10000;

        IF QuantityBase2 <> 0 THEN BEGIN
          INIT;
          "Line No." := NextLineNo;
          VALIDATE("Posting Date",PostingDate);
          IF QuantityBase2 > 0 THEN
            VALIDATE("Entry Type","Entry Type"::"Positive Adjmt.")
          ELSE BEGIN
            VALIDATE("Entry Type","Entry Type"::"Negative Adjmt.");
            Quantity2 := -Quantity2;
            QuantityBase2 := -QuantityBase2;
          END;
          VALIDATE("Document No.",NextDocNo);
          VALIDATE("Item No.",ItemNo);
          VALIDATE("Variant Code",VariantCode2);
          VALIDATE("Location Code",LocationCode2);
          VALIDATE("Source Code",SourceCodeSetup."Item Journal");
          VALIDATE("Unit of Measure Code",UOM2);
          IF LocationCode2 <> '' THEN
            Location.GET(LocationCode2);
          "Posting No. Series" :=ItemJnlBatch."Posting No. Series";

          VALIDATE(Quantity,Quantity2);
          "Quantity (Base)" := QuantityBase2;
          "Invoiced Qty. (Base)" := QuantityBase2;
          INSERT(TRUE);

          IF Location.Code <> '' THEN
            IF Location."Directed Put-away and Pick" THEN BEGIN
              WhseEntry2.SETCURRENTKEY(
                "Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code",
                "Lot No.","Serial No.","Entry Type");
              WhseEntry2.SETRANGE("Item No.","Item No.");
              WhseEntry2.SETRANGE("Bin Code",Location."Adjustment Bin Code");
              WhseEntry2.SETRANGE("Location Code","Location Code");
              WhseEntry2.SETRANGE("Variant Code","Variant Code");
              WhseEntry2.SETRANGE("Unit of Measure Code",UOM2);
              WhseEntry2.SETFILTER("Entry Type",'%1|%2',EntryType2,WhseEntry2."Entry Type"::Movement);
              IF WhseEntry2.FIND('-') THEN
                REPEAT
                  WhseEntry2.SETRANGE("Lot No.",WhseEntry2."Lot No.");
                  WhseEntry2.SETRANGE("Serial No.",WhseEntry2."Serial No.");
                  WhseEntry2.CALCSUMS("Qty. (Base)");

                  WhseEntry3.SETCURRENTKEY(
                    "Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code",
                    "Lot No.","Serial No.","Entry Type");
                  WhseEntry3.COPYFILTERS(WhseEntry2);
                  CASE EntryType2 OF
                    EntryType2::"Positive Adjmt.":
                      WhseEntry3.SETRANGE("Entry Type",WhseEntry3."Entry Type"::"Negative Adjmt.");
                    EntryType2::"Negative Adjmt.":
                      WhseEntry3.SETRANGE("Entry Type",WhseEntry3."Entry Type"::"Positive Adjmt.");
                  END;
                  WhseEntry3.CALCSUMS("Qty. (Base)");
                  IF ABS(WhseEntry3."Qty. (Base)") > ABS(WhseEntry2."Qty. (Base)") THEN
                    WhseEntry2."Qty. (Base)" := 0
                  ELSE
                    WhseEntry2."Qty. (Base)" := WhseEntry2."Qty. (Base)" + WhseEntry3."Qty. (Base)";

                  IF WhseEntry2."Qty. (Base)" <> 0 THEN BEGIN
                    CreateReservEntry.CreateReservEntryFor(
                      DATABASE::"Item Journal Line",
                      "Entry Type",
                      "Journal Template Name",
                      "Journal Batch Name",
                      "Prod. Order Line No.",
                      "Line No.",
                      "Qty. per Unit of Measure",
                      ABS(WhseEntry2."Qty. (Base)"),
                      WhseEntry2."Serial No.",
                      WhseEntry2."Lot No.");
                    IF WhseEntry2."Qty. (Base)" < 0 THEN             //Only Date on positive adjustments
                      CreateReservEntry.SetDates(WhseEntry2."Warranty Date",WhseEntry2."Expiration Date");
                    CreateReservEntry.CreateEntry(
                      "Item No.",
                      "Variant Code",
                      "Location Code",
                      Description,
                      0D,
                      0D,
                      0,
                      ReservEntry."Reservation Status"::Prospect);
                  END;
                  WhseEntry2.FIND('+');
                  WhseEntry2.SETRANGE("Lot No.");
                  WhseEntry2.SETRANGE("Serial No.");
                UNTIL WhseEntry2.NEXT = 0;
            END;
        END;
      END;
    END;

    PROCEDURE InitializeRequest@2(NewPostingDate@1000 : Date;DocNo@1001 : Code[20];ItemsNotOnInvt@1002 : Boolean;ByLocation2@1003 : Boolean;ByBin2@1004 : Boolean);
    BEGIN
      PostingDate := NewPostingDate;
      NextDocNo := DocNo;
      ZeroQty := ItemsNotOnInvt;
      ByLocation := ByLocation2;
      ByBin := ByBin2;
    END;

    PROCEDURE SetHideValidationDialog@7380(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE InitializePhysInvtCycle@7381(PhysInvtCycleCode2@1000 : Code[10];CycleSourceType2@1001 : ' ,Item,SKU');
    BEGIN
      PhysInvtCycleCode := PhysInvtCycleCode2;
      CycleSourceType := CycleSourceType2;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
