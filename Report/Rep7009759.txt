OBJECT Report 7009759 Ajusta Dif. Validacion Bono
{
  OBJECT-PROPERTIES
  {
    Date=04/10/13;
    Time=13:10:34;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Adjustmen Dif. Voucher Validation;
               ESP=Ajusta Dif. Validacion Bono];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  wDiarioGeneral := rPar.GetLibroDiarioGeneral;

                  rPar.CreaSeccionUsuario;
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table7010013;
        DataItemTableView=SORTING(Delegacion,Hotel,Fecha llegada);
        DataItemVarName=RegBono;
        OnPreDataItem=BEGIN
                        IF RegBono.GETFILTER(Delegacion)= ''  THEN
                          ERROR(Text000);

                        IF RegBono.GETRANGEMIN(Delegacion) <> RegBono.GETRANGEMAX(Delegacion) THEN
                          ERROR(Text001);

                        IF RegBono.GETFILTER("Fecha llegada")= ''  THEN
                          ERROR(Text002);

                        wFinalCierreAnterior := GETRANGEMIN("Fecha llegada");
                        wFinalCierreAnterior := CALCDATE(Text003, wFinalCierreAnterior);

                        IF NOT CONFIRM(Text004) THEN
                          CurrReport.QUIT;

                        CLEAR(w_ult_asiento);
                        CLEAR(wRegularizados);
                        CLEAR(w_ult_orden);

                        // Revisamos si los cierres se hacen respetando la secuencia de fechas

                        RevisarSecuenciaFechas;

                        wTotal := COUNT;
                        CLEAR(wCont);
                        wVentana.OPEN(Text005);
                      END;

        OnAfterGetRecord=VAR
                           lwDif@1103355000 : Decimal;
                         BEGIN
                           lwDif := 0;
                           IF "Importe coste" > "Importe ya validado" THEN BEGIN
                             lwDif := "Importe coste" - "Importe ya validado";
                             wRegularizados +=1;
                             RegularizaBono(RegBono, lwDif);

                           END;

                           // Acumulamos el ahorro en el hotel

                           IF NOT rHotelTEMP.GET(Hotel) THEN BEGIN
                             CLEAR(rHotelTEMP);
                             rHotelTEMP.Hotel := Hotel;
                             rHotelTEMP.INSERT;
                           END;

                           rHotelTEMP."Ahorro Hotel Payment" += lwDif;
                           rHotelTEMP.MODIFY;

                           wCont += 1;
                           wVentana.UPDATE(1, ROUND(wCont / wTotal * 10000, 1));
                         END;

        OnPostDataItem=BEGIN
                         wVentana.CLOSE;

                         // Pasamos los valores de hotel de la variable temporal a la variable real de hotel

                         IF rHotelTEMP.FIND('-') THEN BEGIN
                           REPEAT
                             rHotel.GET(rHotelTEMP.Hotel);
                             rHotel."Ahorro Hotel Payment" += rHotelTEMP."Ahorro Hotel Payment";
                             rHotel."Ultimo cierre bonos" := GETRANGEMAX("Fecha llegada");
                             rHotel.MODIFY;
                           UNTIL rHotelTEMP.NEXT = 0;
                         END;

                         IF wTotal = 0 THEN
                           MESSAGE(Text006)
                         ELSE
                           MESSAGE(Text007,wTotal ,wRegularizados);
                       END;

        ReqFilterFields=Delegacion,Fecha llegada,Hotel;
        CalcFields=Importe coste,Importe ya validado;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=3410;
      CaptionML=[ENU=Adjustmen Dif. Voucher Validation;
                 ESP=Ajusta Dif. Validacion Bono];
    }
    CONTROLS
    {
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      Text000@1103355010 : TextConst 'ENU=Must fill the filter of local office field;ESP=Debe Rellenarse el filtro del campo Delegaci¢n';
      Text001@1103355011 : TextConst 'ENU=Must filter local office by one value;ESP=Delegaci¢n Debe de filtrase por un £nico valor';
      Text002@1103355012 : TextConst 'ENU=Must fill the filter of arrival date field;ESP=Debe Rellenarse el filtro del campo Fecha Llegada';
      Text003@1103355013 : TextConst 'ENU=<-1D>;ESP=<-1D>';
      Text004@1103355014 : TextConst 'ENU=This process adjusts the differences of vouchers validation.\Continue?;ESP=Este proceso regulariza las diferencias de validaci¢n de bonos.\¨Desea Continuar?';
      Text005@1103355015 : TextConst 'ENU=Processing @1@@@@@@@@@@@@@;ESP=Procesando @1@@@@@@@@@@@@@';
      Text006@1103355016 : TextConst 'ENU=Any Registration was found;ESP=No se encontr¢ ning£n registro.';
      Text007@1103355017 : TextConst 'ENU="Total registrations :=%1\Adjustments := %2";ESP="Total Registros := %1\Regularizados := %2."';
      Text008@1103355018 : TextConst 'ENU=ADJUSTMENT;ESP=AJUSTE';
      Text009@1103355019 : TextConst 'ENU=Accounts configuration were not found TO-Local Office %1-%2;ESP=No se encuentra Configuraci¢n Ctas. TO-Delegacion %1-%2';
      Text010@1103355020 : TextConst 'ENU=Local office parameters folder does not exist;ESP=No existe el fichero de parametros de la delegacion.';
      Text011@1103355021 : TextConst 'ENU=Accounting diary:;ESP=Diario contabilizacion:';
      Text012@1103355022 : TextConst 'ENU=Adjustment %1 Voucher:%2;ESP=Ajuste %1 Bono:%2';
      Text013@1103355023 : TextConst 'ENU=Reviewing sequence of dates @1@@@@@@@@@@@@@;ESP=Revisando secuencia de fechas @1@@@@@@@@@@@@@';
      Text014@1103355024 : TextConst 'ENU=<+1D>;ESP=<+1D>';
      Text015@1103355025 : TextConst 'ENU=Closure dates must be consecutive;ESP=Las fechas de cierre deben ser consecutivas.';
      rPar@1103355000 : Record 7009700;
      rHotel@1103355001 : Record 7009724;
      rHotelTEMP@1103355002 : TEMPORARY Record 7009724;
      wTotal@1103355003 : Decimal;
      wCont@1103355004 : Decimal;
      wVentana@1103355005 : Dialog;
      w_ult_asiento@1103355006 : Integer;
      w_ult_orden@1103355007 : Integer;
      wRegularizados@1103355008 : Integer;
      wFinalCierreAnterior@1103355009 : Date;
      wDiarioGeneral@1100217000 : Code[10];

    PROCEDURE RegularizaBono@15(VAR prBono@1103355000 : Record 7010013;pwImporte@1103355001 : Decimal);
    VAR
      lrProv@1103355002 : Record 23;
      lrHotel@1103355003 : Record 7009724;
      lrContC@1103355004 : Record 7009723;
      lrVal@1103355005 : Record 7010022;
      lrGrContP@1103355006 : Record 93;
      lrConfCtaDel@1103355007 : Record 7009705;
      lrCab@1103355008 : Record 232;
      lwCta@1103355009 : ARRAY [2] OF Code[20];
      lrLin@1103355010 : Record 81;
      w_nombre_diario@1103355011 : Code[20];
      lrBono@1103355012 : Record 7010013;
    BEGIN
      // RegularizaBono

      IF pwImporte = 0 THEN
        EXIT;

      // Creamos el registro Validaci¢n Bono correspondiente para que el campo calcula en Bono cuadre
      CLEAR(lrVal);
      lrVal.Delegacion            := prBono.Delegacion;
      lrVal.TourOperador          := prBono.TourOperador;
      lrVal.Bono                  := prBono.Bono;
      lrVal."N§ Reserva"          := prBono."N§ Reserva";
      lrVal."N§ Secuencia"        := prBono."N§ Secuencia";
      lrVal."C¢d. divisa"         := prBono."C¢d. divisa";
      lrVal."Hotel Factura"       := prBono.Hotel;
      lrVal."N§ Factura"          := Text008;
      lrVal."Importe validacion"  := pwImporte;
      lrVal."Importe agencia"     := prBono."Importe coste";
      lrVal."Fecha factura"       := TODAY;
      lrVal.INSERT;

      lrBono:= prBono;
      lrBono.Validado := TRUE;
      lrBono.MODIFY;

      // AJS 12.02.2008
      // Se anula todo lo relacionado con la contabilizacion porque no lo necesitan ION GOICOECHEA Dixit

      {**

      CLEAR(lrProv);
      CLEAR(lrHotel);
      CLEAR(lrContC);

      lrHotel.GET(prBono.Hotel);
      lrContC.GET(prBono.Delegacion,prBono."N§ Contrato");
      CASE lrContC."Tipo de Contrato" OF
        lrContC."Tipo de Contrato"::"Interm. con Hotel Payment",
        lrContC."Tipo de Contrato"::"Interm. con proforma" : lrProv.GET(lrHotel."Proveedor Intermediacion");

        lrContC."Tipo de Contrato"::"En nombre propio" : lrProv.GET(lrHotel."Proveedor Cuenta Propia");
      END;

      lrGrContP.GET(lrProv."Vendor Posting Group");
      IF NOT BuscaCtasDel(prBono.Delegacion,prBono.TourOperador,lrConfCtaDel) THEN
        ERROR(Text009,prBono.Delegacion,prBono.TourOperador);

      CLEAR(lwCta);
      CASE lrContC."Tipo de Contrato" OF
        lrContC."Tipo de Contrato"::"Interm. con Hotel Payment", lrContC."Tipo de Contrato"::"Interm. con proforma" : BEGIN
          lrGrContP.TESTFIELD("Cta. FPR hotel intermediacion");
          lrConfCtaDel.TESTFIELD("Cta. dif. intermediacio");
          lwCta[1]:= lrGrContP."Cta. FPR hotel intermediacion";
          lwCta[2]:= lrConfCtaDel."Cta. dif. intermediacio";
        END;

        lrContC."Tipo de Contrato"::"En nombre propio" : BEGIN
          lrGrContP.TESTFIELD("Cta. FPR hotel cuenta propia");
          lrConfCtaDel.TESTFIELD("Cta. dif. cuenta propia");
          lwCta[1]:= lrGrContP."Cta. FPR hotel cuenta propia";
          lwCta[2]:= lrConfCtaDel."Cta. dif. cuenta propia";
        END;
      END;

      IF w_ult_orden = 0 THEN BEGIN // Busca el £ltimo numero de orden
        CLEAR(lrLin);
        lrLin.SETRANGE("Journal Template Name", wDiarioGeneral);
        lrLin.SETRANGE("Journal Batch Name"   , USERID);
        IF lrLin.FINDLAST THEN
          w_ult_orden := lrLin."Line No."
        ELSE
          w_ult_orden := 0;
      END;

      w_ult_orden := w_ult_orden + 10000;

      IF w_ult_asiento = 0 THEN BEGIN // Busca el £ltimo numero de asiento
        lrLin.SETCURRENTKEY("Journal Template Name",
                            "Journal Batch Name",
                            "Posting Date",
                            "Transaction No.");
        IF lrLin.FINDLAST THEN
          w_ult_asiento := lrLin."Transaction No."
        ELSE
          w_ult_asiento := 0;
      END;

      w_ult_asiento := w_ult_asiento + 1;

      // Se introducen las lineas de diario

      lrLin.INIT;
      lrLin."Journal Template Name" := wDiarioGeneral;
      lrLin."Journal Batch Name"    := USERID;
      lrLin."Line No."              := w_ult_orden;

      lrLin.VALIDATE("Posting Date"             , TODAY);
      lrLin.VALIDATE("Account Type"             , lrLin."Account Type"::"G/L Account");
      lrLin.VALIDATE("Account No."              , lwCta[1]);
      lrLin.VALIDATE("Document No."             , lrVal."N§ Factura");
      lrLin.VALIDATE("Transaction No."          , w_ult_asiento);
      lrLin.VALIDATE("Currency Code"            , prBono."C¢d. divisa");
      lrLin.VALIDATE("Shortcut Dimension 1 Code", prBono.Delegacion);
      lrLin.VALIDATE(Amount                     , pwImporte);
      lrLin.VALIDATE("Shortcut Dimension 2 Code", prBono.TourOperador);

      lrLin.Description := STRSUBSTNO(Text012, prBono.TourOperador, prBono.Bono);

      lrLin.VALIDATE("Bal. Account Type"     , lrLin."Bal. Account Type"::"G/L Account");
      lrLin.VALIDATE("Bal. Account No."      , lwCta[2]);

      lrLin.VALIDATE("Gen. Posting Type"        , 0);
      lrLin.VALIDATE("VAT Bus. Posting Group"   , '');
      lrLin.VALIDATE("VAT Prod. Posting Group"  , '');
      lrLin.VALIDATE("Gen. Bus. Posting Group"  , '');
      lrLin.VALIDATE("Gen. Prod. Posting Group" , '');

      lrLin.VALIDATE("Bal. Gen. Posting Type"       , 0);
      lrLin.VALIDATE("Bal. VAT Bus. Posting Group"  , '');
      lrLin.VALIDATE("Bal. VAT Prod. Posting Group" , '');
      lrLin.VALIDATE("Bal. Gen. Bus. Posting Group" , '');
      lrLin.VALIDATE("Bal. Gen. Prod. Posting Group", '');
      lrLin.VALIDATE("System-Created Entry"         , TRUE); //+$002
      lrLin.INSERT(TRUE);

      *****}
    END;

    PROCEDURE BuscaCtasDel@1(pwDel@1103355000 : Code[10];pwTTOO@1103355001 : Code[10];VAR prConfCtaDel@1103355002 : Record 7009705) : Boolean;
    VAR
      lwOk@1103355003 : Boolean;
    BEGIN
      // BuscaCtasDel

      CLEAR(prConfCtaDel);
      lwOk := prConfCtaDel.GET(pwDel, pwTTOO);
      IF NOT lwOk THEN
        lwOk := prConfCtaDel.GET(pwDel, '');
      EXIT(lwOk);
    END;

    PROCEDURE RevisarSecuenciaFechas@3();
    VAR
      lrBono@1103355000 : Record 7010013;
      lrBono2@1103355001 : Record 7010013;
      lwHotelAnt@1103355002 : Code[20];
      lwFechaDesde@1103355003 : Date;
      lwFechaHasta@1103355004 : Date;
    BEGIN
      // RevisarSecuenciaFechas

      lrBono.COPY(RegBono);
      IF lrBono.FINDSET THEN BEGIN
        wVentana.OPEN(Text013);
        wTotal     := lrBono.COUNT;
        wCont      := 0;
        lwHotelAnt := '';
        REPEAT
          wCont += 1;
          wVentana.UPDATE(1, ROUND(wCont / wTotal * 10000, 1));

          IF lrBono.Hotel <> lwHotelAnt THEN BEGIN
            rHotel.GET(lrBono.Hotel);
            IF (rHotel."Ultimo cierre bonos" <> 0D) AND (rHotel."Ultimo cierre bonos" <> wFinalCierreAnterior) THEN BEGIN

              // Hay que comprobar si hay bonos entre el ultimo cierre del hotel y este cierre

              lwFechaDesde := CALCDATE(Text014, rHotel."Ultimo cierre bonos");
              lwFechaHasta := wFinalCierreAnterior;

              lrBono2.COPY(lrBono);
              lrBono2.SETRANGE(Hotel, rHotel.Hotel);
              lrBono2.SETRANGE("Fecha llegada", lwFechaDesde, lwFechaHasta);
              IF lrBono2.FIND('-') THEN
                ERROR(Text015);
            END;
            lwHotelAnt := lrBono.Hotel;
          END;
        UNTIL lrBono.NEXT = 0;
        wVentana.CLOSE;
      END;
    END;

    BEGIN
    {
      Este report genera una funci¢n que detecta los bonos con diferencias de validaci¢n, genera una l¡nea de Validaci¢n Bono
      y contabiliza la diferencia

      ## AJS 12.02.2008

        - Se comenta el codigo que contabilizaba la diferencia

      ## AJF 29/06/09

        .- (09/00319) cambio c¢digos de hotel de code10 a code20.

      $001 AJS 05092012 En OnPreReport incluyo las funciones que buscan el libro diario general y crean la seccion del usuario

      $002 AJS 04102013 Marco el asiento como "Asiento Automatico" para que el usuario no lo pueda borrar
    }
    END.
  }
  RDLDATA
  {
  }
}
