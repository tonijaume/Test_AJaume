OBJECT Report 8000 Notify About Upcoming Delivery
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Notify About Upcoming Delivery;
               ESP=Notificar pr¢ximas entregas];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  NotificationWorksheetLine.GET(
                    "Notification Worksheet Line".GETRANGEMAX("Batch Name"),
                    "Notification Worksheet Line".GETRANGEMAX("Notification Code"));

                  CalculateDateRange;
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table38;
        DataItemTableView=WHERE(Document Type=CONST(Order),
                                Status=CONST(Released));
        OnPreDataItem=BEGIN
                        CalculateDateRange;
                        IF FromDate > ToDate THEN BEGIN
                          MESSAGE(Text001,FromDate,ToDate);
                          CurrReport.QUIT;
                        END;

                        BNManagement.DeleteNotificationLines(NotificationWorksheetLine,FALSE);
                      END;

        OnAfterGetRecord=BEGIN
                           NeedToSelect := FALSE;
                         END;

        OnPostDataItem=BEGIN
                         MESSAGE(Text000,InsertedLineCount);
                       END;

        ReqFilterFields=No.,Buy-from Vendor No.,Purchaser Code;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table39;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.)
                          WHERE(Document Type=CONST(Order));
        OnAfterGetRecord=BEGIN
                           IF ("Promised Receipt Date" >= FromDate) AND ("Promised Receipt Date" <= ToDate) THEN
                             NeedToSelect := TRUE;
                         END;

        OnPostDataItem=BEGIN
                         IF NeedToSelect THEN BEGIN
                           RecRef.GETTABLE("Purchase Header");
                           WITH NotificationLine DO BEGIN
                             LastNo := 0;
                             SETRANGE("Notification Batch Name",NotificationWorksheetLine."Batch Name");
                             SETRANGE("Notification Code",NotificationWorksheetLine."Notification Code");
                             LOCKTABLE;
                             IF FIND('+') THEN
                               LastNo := "Line No.";
                             INIT;
                             "Notification Batch Name" := NotificationWorksheetLine."Batch Name";
                             "Notification Code" := NotificationWorksheetLine."Notification Code";
                             "Line No." := LastNo + 1;
                             "Record ID" := RecRef.RECORDID;
                             "Search Record ID" := FORMAT("Record ID");
                             Description := STRSUBSTNO(Text002,"Purchase Header"."No.","Purchase Header"."Buy-from Vendor No.");
                             INSERT;
                             InsertedLineCount := InsertedLineCount + 1;
                           END;
                         END;
                       END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Buy-from Vendor No.=FIELD(Buy-from Vendor No.),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table8003;
        DataItemTableView=SORTING(Batch Name,Notification Code);
        OnPreDataItem=BEGIN
                        CurrReport.BREAK;
                      END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=4400;
      Height=1760;
      SaveValues=Yes;
      OnDeactivateForm=BEGIN
                         CalculateDateRange;
                         IF FromDate > ToDate THEN BEGIN
                           MESSAGE(Text001,FromDate,ToDate);
                           CurrReport.QUIT;
                         END;
                       END;

    }
    CONTROLS
    {
      { 2   ;Label        ;0    ;0    ;2310 ;440  ;CaptionML=[ENU=Receipt Expected;
                                                              ESP=Llegada esperada] }
      { 5   ;TextBox      ;2860 ;660  ;1540 ;440  ;CaptionML=[ENU=From;
                                                              ESP=Desde];
                                                   SourceExpr=FromDF;
                                                   OnValidate=BEGIN
                                                                CalculateDateRange;
                                                                IF (FORMAT(FromDF) <> '') AND (FORMAT(ToDF) <> '') AND (FromDate > ToDate) THEN
                                                                  ERROR(Text001,FromDate,ToDate);
                                                              END;
                                                               }
      { 6   ;Label        ;330  ;660  ;2530 ;440  ;ParentControl=5 }
      { 7   ;Label        ;330  ;1320 ;2530 ;440  ;ParentControl=8 }
      { 8   ;TextBox      ;2860 ;1320 ;1540 ;440  ;CaptionML=[ENU=To;
                                                              ESP=Hasta];
                                                   DateFormula=No;
                                                   SourceExpr=ToDF;
                                                   OnValidate=BEGIN
                                                                CalculateDateRange;
                                                                IF (FORMAT(FromDF) <> '') AND (FORMAT(ToDF) <> '') AND (FromDate > ToDate) THEN
                                                                  ERROR(Text001,FromDate,ToDate);
                                                              END;
                                                               }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 2   ;2   ;Group     ;
                  CaptionML=[ENU=Receipt Expected;
                             ESP=Llegada esperada] }

      { 5   ;3   ;Field     ;
                  CaptionML=[ENU=From;
                             ESP=Desde];
                  SourceExpr=FromDF;
                  OnValidate=BEGIN
                               CalculateDateRange;
                               IF (FORMAT(FromDF) <> '') AND (FORMAT(ToDF) <> '') AND (FromDate > ToDate) THEN
                                 ERROR(Text001,FromDate,ToDate);
                             END;
                              }

      { 8   ;3   ;Field     ;
                  CaptionML=[ENU=To;
                             ESP=Hasta];
                  DateFormula=No;
                  SourceExpr=ToDF;
                  OnValidate=BEGIN
                               CalculateDateRange;
                               IF (FORMAT(FromDF) <> '') AND (FORMAT(ToDF) <> '') AND (FromDate > ToDate) THEN
                                 ERROR(Text001,FromDate,ToDate);
                             END;
                              }

    }
  }
  CODE
  {
    VAR
      NotificationLine@1005 : Record 8004;
      NotificationWorksheetLine@1004 : Record 8003;
      BNManagement@1012 : Codeunit 8000;
      RecRef@1007 : RecordRef;
      FromDate@1000 : Date;
      ToDate@1001 : Date;
      FromDF@1002 : DateFormula;
      ToDF@1003 : DateFormula;
      LastNo@1006 : Integer;
      Text000@1008 : TextConst 'ENU=%1 lines were found for this notification.;ESP=L¡neas encontradas en la notificaci¢n: %1.';
      Text001@1010 : TextConst 'ENU=The starting date %1 cannot be later than the ending date %2. Please, verify the contents of the Receipt Expected From and Receipt Expected To fields.;ESP=La fecha inicial (%1) no puede ser posterior a la fecha final (%2). Compruebe los valores de los campos Desde y Hasta de la secci¢n Llegada esperada.';
      Text002@1011 : TextConst 'ENU=Purchase order %1  from vendor %2.;ESP=Orden de compra %1 del proveedor %2.';
      InsertedLineCount@1013 : Integer;
      NeedToSelect@1009 : Boolean;

    LOCAL PROCEDURE CalculateDateRange@6();
    BEGIN
      FromDate := CALCDATE(FromDF);
      ToDate := CALCDATE(ToDF);
    END;

    LOCAL PROCEDURE OnDeactivateForm@19063942();
    BEGIN
      CalculateDateRange;
      IF FromDate > ToDate THEN BEGIN
        MESSAGE(Text001,FromDate,ToDate);
        CurrReport.QUIT;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
