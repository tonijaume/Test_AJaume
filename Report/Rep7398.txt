OBJECT Report 7398 Date Compress Whse. Entries
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 87=rimd,
                TableData 7312=rimd,
                TableData 7313=rimd;
    CaptionML=[ENU=Date Compress Whse. Entries;
               ESP=Compr. por fechas movs. almac‚n];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  WhseEntryFilter := COPYSTR("Warehouse Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table7312;
        DataItemTableView=SORTING(Item No.,Bin Code,Location Code,Variant Code,Unit of Measure Code,Lot No.,Serial No.,Entry Type);
        OnPreDataItem=BEGIN
                        IF NOT HideDialog THEN
                          IF NOT CONFIRM(
                            Text000 +
                            Text001 +
                            Text002,FALSE)
                          THEN
                            CurrReport.BREAK;

                        IF EntrdDateComprReg."Ending Date" = 0D THEN
                          ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                        Window.OPEN(
                          Text004 +
                          Text005 +
                          Text006 +
                          Text007);

                        SourceCodeSetup.GET;
                        SourceCodeSetup.TESTFIELD("Compress Whse. Entries");

                        NewWhseEntry.LOCKTABLE;
                        WhseReg.LOCKTABLE;
                        DateComprReg.LOCKTABLE;

                        IF WhseEntry2.FIND('+') THEN;
                        LastEntryNo := WhseEntry2."Entry No.";
                        SETRANGE("Entry No.",0,LastEntryNo);
                        SETRANGE("Registering Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                        InitRegisters;

                        RetainSerialNo := RetainNo(FIELDNO("Serial No."));
                        RetainLotNo := RetainNo(FIELDNO("Lot No."));
                      END;

        OnAfterGetRecord=BEGIN
                           WhseEntry2 := "Warehouse Entry";
                           WITH WhseEntry2 DO BEGIN
                             SETCURRENTKEY(
                               "Item No.","Bin Code","Location Code","Variant Code",
                               "Unit of Measure Code","Lot No.","Serial No.");
                             COPYFILTERS("Warehouse Entry");
                             SETRANGE("Item No.","Item No.");
                             SETRANGE("Bin Code","Bin Code");
                             SETRANGE("Location Code","Location Code");
                             SETRANGE("Variant Code","Variant Code");
                             SETRANGE("Unit of Measure Code","Unit of Measure Code");
                             SETFILTER(
                               "Registering Date",
                               DateComprMgt.GetDateFilter("Registering Date",EntrdDateComprReg,FALSE));

                             IF (NOT RetainSerialNo) OR (NOT RetainLotNo) THEN
                               UpdateITWhseEntries;

                             SETRANGE("Serial No.","Serial No.");
                             SETRANGE("Lot No.","Lot No.");
                             SETRANGE("Warranty Date","Warranty Date");
                             SETRANGE("Expiration Date","Expiration Date");

                             CalcCompressWhseEntry;

                             NewWhseEntry.INIT;
                             NewWhseEntry."Location Code" := "Location Code";
                             NewWhseEntry."Bin Code" := "Bin Code";
                             NewWhseEntry."Item No." := "Item No.";
                             NewWhseEntry.Description := Text008;
                             NewWhseEntry."Variant Code" := "Variant Code";
                             NewWhseEntry."Unit of Measure Code" := "Unit of Measure Code";
                             GetBin("Location Code","Bin Code");
                             NewWhseEntry."Zone Code" := Bin."Zone Code";
                             NewWhseEntry."Bin Type Code" := Bin."Bin Type Code";
                             NewWhseEntry."Registering Date" := GETRANGEMIN("Registering Date");
                             NewWhseEntry."Serial No." := "Serial No.";
                             NewWhseEntry."Lot No." := "Lot No.";
                             NewWhseEntry."Warranty Date" := "Warranty Date";
                             NewWhseEntry."Expiration Date" := "Expiration Date";

                             Window.UPDATE(1,NewWhseEntry."Registering Date");
                             Window.UPDATE(2,DateComprReg."No. of New Records");

                             REPEAT
                               DELETE;
                               DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
                               Window.UPDATE(3,DateComprReg."No. Records Deleted");
                             UNTIL NOT FIND('-');

                             IF PosQtyBaseonBin > 0 THEN BEGIN
                               InsertNewEntry(
                                 NewWhseEntry,PosQtyonBin,PosQtyBaseonBin,
                                 PosCubage,PosWeight,NewWhseEntry."Entry Type"::"Positive Adjmt.");
                               DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
                             END;

                             IF NegQtyBaseonBin < 0 THEN BEGIN
                               InsertNewEntry(
                                 NewWhseEntry,NegQtyonBin,NegQtyBaseonBin,
                                 NegCubage,NegWeight,NewWhseEntry."Entry Type"::"Negative Adjmt.");
                               DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
                             END;
                           END;

                           IF DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 THEN BEGIN
                             NoOfDeleted := DateComprReg."No. Records Deleted";
                             InsertRegisters(WhseReg,DateComprReg);
                           END;
                         END;

        OnPostDataItem=BEGIN
                         IF DateComprReg."No. Records Deleted" > NoOfDeleted THEN
                           InsertRegisters(WhseReg,DateComprReg);
                       END;

        ReqFilterFields=Item No.,Bin Code,Location Code,Zone Code;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=7260;
      Height=2750;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   IF EntrdDateComprReg."Ending Date" = 0D THEN
                     EntrdDateComprReg."Ending Date" := TODAY;

                   WITH "Warehouse Entry" DO BEGIN
                     InsertField(FIELDNO("Serial No."),FIELDCAPTION("Serial No."));
                     InsertField(FIELDNO("Lot No."),FIELDCAPTION("Lot No."));
                   END;
                 END;

    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;0    ;1650 ;440  ;CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial];
                                                   SourceExpr=EntrdDateComprReg."Starting Date" }
      { 21  ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=1 }
      { 2   ;TextBox      ;3410 ;550  ;1650 ;440  ;CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha final];
                                                   SourceExpr=EntrdDateComprReg."Ending Date" }
      { 22  ;Label        ;0    ;550  ;3300 ;440  ;ParentControl=2 }
      { 3   ;TextBox      ;3410 ;1100 ;2750 ;440  ;CaptionML=[ENU=Period Length;
                                                              ESP=Longitud periodo];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Period;
                                                                    ESP=D¡a,Semana,Mes,Trimestre,A¤o,Periodo];
                                                   OptionString=Day,Week,Month,Quarter,Year,Period;
                                                   SourceExpr=EntrdDateComprReg."Period Length" }
      { 23  ;Label        ;0    ;1100 ;3300 ;440  ;ParentControl=3 }
      { 4   ;CheckBox     ;3410 ;1760 ;3850 ;440  ;CaptionML=[ENU=Serial No.;
                                                              ESP=N§ serie];
                                                   SourceExpr=Retain[1] }
      { 24  ;Label        ;0    ;1760 ;3300 ;440  ;ParentControl=4;
                                                   CaptionML=[ENU=Retain Field Contents;
                                                              ESP=Guardar contenido campo] }
      { 5   ;CheckBox     ;3410 ;2310 ;3850 ;440  ;CaptionML=[ENU=Lot No.;
                                                              ESP=N§ lote];
                                                   SourceExpr=Retain[2] }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF EntrdDateComprReg."Ending Date" = 0D THEN
                     EntrdDateComprReg."Ending Date" := TODAY;

                   WITH "Warehouse Entry" DO BEGIN
                     InsertField(FIELDNO("Serial No."),FIELDCAPTION("Serial No."));
                     InsertField(FIELDNO("Lot No."),FIELDCAPTION("Lot No."));
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             ESP=Fecha inicial];
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Ending Date;
                             ESP=Fecha final];
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Period Length;
                             ESP=Longitud periodo];
                  OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Period;
                                   ESP=D¡a,Semana,Mes,Trimestre,A¤o,Periodo];
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 1907651001;2;Group  ;
                  CaptionML=[ENU=Retain Field Contents;
                             ESP=Guardar contenido campo] }

      { 4   ;3   ;Field     ;
                  CaptionML=[ENU=Serial No.;
                             ESP=N§ serie];
                  SourceExpr=Retain[1] }

      { 5   ;3   ;Field     ;
                  CaptionML=[ENU=Lot No.;
                             ESP=N§ lote];
                  SourceExpr=Retain[2] }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="This batch job deletes entries. ";ESP="Este proceso borra movimientos. "';
      Text001@1001 : TextConst 'ENU=Therefore, it is important that you make a backup of the database before you run the batch job.\\;ESP=Es muy importante realizar una copia de seguridad de la base de datos antes de ejecutar este proceso.\\';
      Text002@1002 : TextConst 'ENU=Do you want to date compress the entries?;ESP=¨Confirma que desea comprimir los movimientos?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.;ESP=Se debe indicar %1.';
      Text004@1004 : TextConst 'ENU=Date compressing warehouse entries...\\;ESP=Comprimiendo por fecha movs. almac‚n...\\';
      Text005@1005 : TextConst 'ENU=Date                 #1######\\;ESP=Fecha                #1######\\';
      Text006@1006 : TextConst 'ENU=No. of new entries   #2######\;ESP=N§ de nuevos movs.   #2######\';
      Text007@1007 : TextConst 'ENU=No. of entries del.  #3######;ESP=N§ movs. borrados    #3######';
      SourceCodeSetup@1008 : Record 242;
      DateComprReg@1009 : Record 87;
      EntrdDateComprReg@1010 : Record 87;
      WhseReg@1011 : Record 7313;
      NewWhseEntry@1012 : Record 7312;
      WhseEntry2@1013 : Record 7312;
      Bin@1025 : Record 7354;
      DateComprMgt@1014 : Codeunit 356;
      Window@1015 : Dialog;
      WhseEntryFilter@1016 : Text[250];
      PosQtyonBin@1031 : Decimal;
      PosQtyBaseonBin@1030 : Decimal;
      NegQtyonBin@1029 : Decimal;
      NegQtyBaseonBin@1028 : Decimal;
      PosWeight@1032 : Decimal;
      NegWeight@1033 : Decimal;
      PosCubage@1034 : Decimal;
      NegCubage@1035 : Decimal;
      NoOfFields@1017 : Integer;
      Retain@1018 : ARRAY [2] OF Boolean;
      FieldNumber@1019 : ARRAY [10] OF Integer;
      FieldNameArray@1020 : ARRAY [10] OF Text[100];
      LastEntryNo@1021 : Integer;
      NoOfDeleted@1022 : Integer;
      i@1024 : Integer;
      WhseRegExists@1023 : Boolean;
      RetainSerialNo@1026 : Boolean;
      RetainLotNo@1027 : Boolean;
      Text008@1038 : TextConst 'ENU=Date Compressed;ESP=Comprimido por fechas';
      HideDialog@1036 : Boolean;

    LOCAL PROCEDURE InitRegisters@4();
    BEGIN
      IF WhseReg.FIND('+') THEN;
      WhseReg.INIT;
      WhseReg."No." := WhseReg."No." + 1;
      WhseReg."Creation Date" := TODAY;
      WhseReg."Source Code" := SourceCodeSetup."Compress Whse. Entries";
      WhseReg."User ID" := USERID;
      WhseReg."From Entry No." := LastEntryNo + 1;

      IF DateComprReg.FIND('+') THEN;
      DateComprReg.INIT;
      DateComprReg."No." := DateComprReg."No." + 1;
      DateComprReg."Table ID" := DATABASE::"Warehouse Entry";
      DateComprReg."Creation Date" := TODAY;
      DateComprReg."Starting Date" := EntrdDateComprReg."Starting Date";
      DateComprReg."Ending Date" := EntrdDateComprReg."Ending Date";
      DateComprReg."Period Length" := EntrdDateComprReg."Period Length";
      FOR i := 1 TO NoOfFields DO
        IF Retain[i] THEN
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);
      DateComprReg.Filter := WhseEntryFilter;
      DateComprReg."Register No." := WhseReg."No.";
      DateComprReg."Source Code" := SourceCodeSetup."Compress Whse. Entries";
      DateComprReg."User ID" := USERID;

      WhseRegExists := FALSE;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR WhseReg@1000 : Record 7313;VAR DateComprReg@1001 : Record 87);
    BEGIN
      WhseReg."To Entry No." := NewWhseEntry."Entry No.";

      IF WhseRegExists THEN BEGIN
        WhseReg.MODIFY;
        DateComprReg.MODIFY;
      END ELSE BEGIN
        WhseReg.INSERT;
        DateComprReg.INSERT;
        WhseRegExists := TRUE;
      END;
      COMMIT;

      NewWhseEntry.LOCKTABLE;
      WhseReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      WhseEntry2.RESET;

      IF WhseEntry2.FIND('+') THEN;
      IF LastEntryNo <> WhseEntry2."Entry No." THEN BEGIN
        LastEntryNo := WhseEntry2."Entry No.";
        InitRegisters;
      END;
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      EXIT(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      FOR i := 1 TO NoOfFields DO
        IF Number = FieldNumber[i] THEN
          EXIT(i);
    END;

    LOCAL PROCEDURE GetBin@5(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      IF (LocationCode <> '') AND (BinCode <> '') THEN BEGIN
        IF (Bin."Location Code" <> LocationCode) OR (Bin.Code <> BinCode) THEN
          IF NOT Bin.GET(LocationCode,BinCode) THEN
            Bin.INIT;
      END ELSE
        Bin.INIT;
    END;

    PROCEDURE CalcCompressWhseEntry@8();
    VAR
      LocalWhseEntry@1002 : Record 7312;
    BEGIN
      PosQtyonBin := 0;
      PosQtyBaseonBin := 0;
      PosWeight := 0;
      PosCubage := 0;
      NegQtyonBin := 0;
      NegQtyBaseonBin := 0;
      NegWeight := 0;
      NegCubage := 0;
      LocalWhseEntry.COPY(WhseEntry2);
      IF LocalWhseEntry.FIND('-') THEN
        REPEAT
          IF LocalWhseEntry."Qty. (Base)" < 0 THEN BEGIN
            NegQtyonBin := NegQtyonBin + LocalWhseEntry.Quantity;
            NegQtyBaseonBin := NegQtyBaseonBin + LocalWhseEntry."Qty. (Base)";
            NegWeight := NegWeight + LocalWhseEntry.Weight;
            NegCubage := NegCubage + LocalWhseEntry.Cubage;
          END ELSE BEGIN
            PosQtyonBin := PosQtyonBin + LocalWhseEntry.Quantity;
            PosQtyBaseonBin := PosQtyBaseonBin + LocalWhseEntry."Qty. (Base)";
            PosWeight := PosWeight + LocalWhseEntry.Weight;
            PosCubage := PosCubage + LocalWhseEntry.Cubage;
          END;
        UNTIL LocalWhseEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateITWhseEntries@7();
    VAR
      LocalWhseEntry@1000 : Record 7312;
      LocalWhseEntry2@1001 : Record 7312;
      ItemTrackingMgt@1003 : Codeunit 6500;
      QtyonBin@1002 : Decimal;
      SNRequired@1004 : Boolean;
      LNRequired@1005 : Boolean;
    BEGIN
      ItemTrackingMgt.CheckWhseItemTrkgSetup(WhseEntry2."Item No.",SNRequired,LNRequired,FALSE);

      LocalWhseEntry.COPY(WhseEntry2);
      WITH LocalWhseEntry DO BEGIN
        IF RetainSerialNo OR RetainLotNo THEN BEGIN
          IF SNRequired OR LNRequired THEN BEGIN
            SETFILTER("Warranty Date",'<>%1',0D);
            SETFILTER("Expiration Date",'<>%1',0D);
            IF NOT FIND('-') THEN BEGIN
              SETRANGE("Warranty Date");
              SETRANGE("Expiration Date");
            END;
          END;
        END ELSE BEGIN
          SETRANGE("Warranty Date",WhseEntry2."Warranty Date");
          SETRANGE("Expiration Date",WhseEntry2."Expiration Date");
        END;

        IF NOT RetainSerialNo THEN BEGIN
          IF SNRequired THEN
            SETFILTER("Serial No.",'<>''''');
        END ELSE
          SETRANGE("Serial No.",WhseEntry2."Serial No.");
        IF NOT RetainLotNo THEN BEGIN
          IF LNRequired THEN
            SETFILTER("Lot No.",'<>''''');
        END ELSE
          SETRANGE("Lot No.",WhseEntry2."Lot No.");
        IF FIND('-') THEN
          REPEAT
            QtyonBin := 0;
            LocalWhseEntry2.COPY(LocalWhseEntry);

            IF NOT RetainSerialNo AND SNRequired THEN
              LocalWhseEntry2.SETRANGE("Serial No.","Serial No.");

            IF NOT RetainLotNo AND LNRequired THEN
              LocalWhseEntry2.SETRANGE("Lot No.","Lot No.");

            IF (NOT RetainSerialNo AND SNRequired) OR
               (NOT RetainLotNo AND LNRequired)
            THEN BEGIN
              LocalWhseEntry2.SETRANGE("Warranty Date","Warranty Date");
              LocalWhseEntry2.SETRANGE("Expiration Date","Expiration Date");
            END;

            IF LocalWhseEntry2.FIND('-') THEN
              REPEAT
                QtyonBin := QtyonBin + LocalWhseEntry2."Qty. (Base)";
              UNTIL LocalWhseEntry2.NEXT = 0;

            IF QtyonBin <= 0 THEN BEGIN
              IF LocalWhseEntry2.FIND('-') THEN
                REPEAT
                  IF NOT RetainSerialNo AND SNRequired THEN
                    LocalWhseEntry2."Serial No." := '';
                  IF NOT RetainLotNo AND LNRequired THEN
                    LocalWhseEntry2."Lot No." := '';
                  IF (NOT RetainSerialNo AND SNRequired) OR
                     (NOT RetainLotNo AND LNRequired)
                  THEN BEGIN
                    LocalWhseEntry2."Warranty Date" := 0D;
                    LocalWhseEntry2."Expiration Date" := 0D;
                  END;
                  LocalWhseEntry2.MODIFY;
                UNTIL LocalWhseEntry2.NEXT = 0;


              IF (NOT RetainSerialNo AND SNRequired) OR
                 (NOT RetainLotNo AND LNRequired)
              THEN BEGIN
                WhseEntry2."Warranty Date" := 0D;
                WhseEntry2."Expiration Date" := 0D;
              END;
              IF NOT RetainSerialNo THEN
                WhseEntry2."Serial No." := '';
              IF NOT RetainLotNo THEN
                WhseEntry2."Lot No." := '';
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE InsertNewEntry@9(VAR WhseEntry@1000 : Record 7312;Qty@1001 : Decimal;QtyBase@1002 : Decimal;Cubage@1004 : Decimal;Weight@1003 : Decimal;EntryType@1005 : Option);
    BEGIN
      LastEntryNo := LastEntryNo + 1;
      WhseEntry."Entry No." := LastEntryNo;
      WhseEntry.Quantity := Qty;
      WhseEntry."Qty. (Base)" := QtyBase;
      WhseEntry.Cubage := Cubage;
      WhseEntry.Weight := Weight;
      WhseEntry."Entry Type" := EntryType;
      WhseEntry.INSERT;
    END;

    PROCEDURE InitializeReport@11(EntrdDateComprReg2@1000 : Record 87;SerialNo@1001 : Boolean;LotNo@1002 : Boolean);
    BEGIN
      EntrdDateComprReg.COPY(EntrdDateComprReg2);
      WITH WhseEntry2 DO BEGIN
        InsertField(FIELDNO("Serial No."),FIELDCAPTION("Serial No."));
        InsertField(FIELDNO("Lot No."),FIELDCAPTION("Lot No."));
      END;
      Retain[1] := SerialNo;
      Retain[2] := LotNo;
    END;

    PROCEDURE SetHideDialog@10(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
