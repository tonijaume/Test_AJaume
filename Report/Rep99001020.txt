OBJECT Report 99001020 Carry Out Action Msg. - Plan.
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Carry Out Action Msg. - Plan.;
               ESP=Ejecutar mensajes acci¢n-Plan.];
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table246;
        ReqFilterHeadingML=[ENU=Planning Line;
                            ESP=Planif. l¡nea];
        OnPreDataItem=BEGIN
                        LOCKTABLE;

                        SetReqLineFilters;
                        IF NOT "Requisition Line".FIND('-') THEN
                          ERROR(Text000);

                        IF PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh" THEN
                          CheckCopyToWksh(ReqWkshTemp,ReqWksh);
                        IF TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh" THEN
                          CheckCopyToWksh(TransWkshTemp,TransWkshName);
                        IF ProdOrderChoice = ProdOrderChoice::"Copy to Req. Wksh" THEN
                          CheckCopyToWksh(ProdWkshTempl,ProdWkshName);

                        Window.OPEN(Text012);
                        CheckPreconditions;
                        CounterTotal := COUNT;
                      END;

        OnAfterGetRecord=BEGIN
                           WindowUpdate;

                           IF NOT "Accept Action Message" THEN CurrReport.SKIP;
                           LOCKTABLE;

                           COMMIT;
                           CASE "Ref. Order Type" OF
                             "Ref. Order Type"::"Prod. Order":
                               IF ProdOrderChoice <> ProdOrderChoice::" " THEN
                                 CarryOutActions(2,ProdOrderChoice,ProdWkshTempl,ProdWkshName);
                             "Ref. Order Type"::Purchase:
                               IF PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh" THEN
                                 CarryOutActions(0,PurchOrderChoice,ReqWkshTemp,ReqWksh);
                             "Ref. Order Type"::Transfer:
                               IF TransOrderChoice <> TransOrderChoice::" " THEN
                                 CarryOutActions(1,TransOrderChoice,TransWkshTemp,TransWkshName);
                             ELSE
                               CurrReport.SKIP;
                           END;
                           COMMIT;
                         END;

        OnPostDataItem=BEGIN
                         Window.CLOSE;

                         IF PurchOrderChoice IN [PurchOrderChoice::"Make Purch. Orders",
                                                 PurchOrderChoice::"Make Purch. Orders & Print"]
                         THEN BEGIN
                           SETRANGE("Ref. Order Type","Ref. Order Type"::Purchase);
                           SETRANGE("Accept Action Message",TRUE);
                           IF FIND('-') THEN BEGIN
                             PurchOrderHeader."Order Date" := WORKDATE;
                             PurchOrderHeader."Posting Date" := WORKDATE;
                             PurchOrderHeader."Expected Receipt Date" := WORKDATE;

                             EndOrderDate := WORKDATE;

                             PrintOrders := (PurchOrderChoice = PurchOrderChoice::"Make Purch. Orders & Print");

                             CLEAR(ReqWkshMakeOrders);
                             ReqWkshMakeOrders.Set(PurchOrderHeader,EndOrderDate,PrintOrders);
                             IF NOT NoPlanningResiliency THEN
                               ReqWkshMakeOrders.SetPlanningResiliency;
                             ReqWkshMakeOrders.CarryOutBatchAction("Requisition Line");
                             CounterFailed := CounterFailed + ReqWkshMakeOrders.GetFailedCounter;
                           END;
                         END;

                         IF ReserveforPlannedProd THEN
                           MESSAGE(Text010);

                         IF CounterFailed > 0 THEN
                           MESSAGE(Text013 + Text014,CounterFailed);
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=5720;
      Height=5830;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   RequestOptionsForm.ReqTemp.ENABLED(PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh");
                   RequestOptionsForm.ReqName.ENABLED(PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh");
                   RequestOptionsForm.TransTemp.ENABLED(TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh");
                   RequestOptionsForm.TransName.ENABLED(TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh");
                 END;

    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;0    ;2310 ;440  ;CaptionML=[ENU=Production Order;
                                                              ESP=Orden producci¢n];
                                                   OptionCaptionML=[ENU=" ,Planned,Firm Planned,Firm Planned & Print";
                                                                    ESP=" ,Planificada,Planif. en firme,Planif. firme e impr."];
                                                   SourceExpr=ProdOrderChoice }
      { 2   ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=1;
                                                   CaptionML=[ENU=Production Order;
                                                              ESP=Orden producci¢n] }
      { 3   ;Label        ;0    ;660  ;3300 ;440  ;ParentControl=5;
                                                   CaptionML=[ENU=Purchase Order;
                                                              ESP=Pedido compra] }
      { 4   ;Label        ;0    ;3080 ;3300 ;440  ;ParentControl=6;
                                                   CaptionML=[ENU=Transfer Order;
                                                              ESP=Ped. transfer.] }
      { 5   ;TextBox      ;3410 ;660  ;2310 ;440  ;CaptionML=[ENU=Purchase Order;
                                                              ESP=Pedido compra];
                                                   OptionCaptionML=[ENU=" ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh";
                                                                    ESP=" ,Crear ped. compra,Crear ped. compra e imprimir,Copiar a hoja deman."];
                                                   SourceExpr=PurchOrderChoice;
                                                   OnValidate=BEGIN
                                                                RequestOptionsForm.ReqTemp.ENABLED(PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh");
                                                                RequestOptionsForm.ReqName.ENABLED(PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh");
                                                              END;
                                                               }
      { 6   ;TextBox      ;3410 ;3080 ;2310 ;440  ;CaptionML=[ENU=Transfer Order;
                                                              ESP=Ped. transfer.];
                                                   OptionCaptionML=[ENU=" ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh";
                                                                    ESP=" ,Crear ped. transf.,Crear ped. transf. e impr.,Copiar a hoja dem."];
                                                   SourceExpr=TransOrderChoice;
                                                   OnValidate=BEGIN
                                                                RequestOptionsForm.TransTemp.ENABLED(TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh");
                                                                RequestOptionsForm.TransName.ENABLED(TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh");
                                                              END;
                                                               }
      { 7   ;Label        ;0    ;1320 ;3300 ;440  ;CaptionML=[ENU=Copy to Req. Worksheet;
                                                              ESP=Copiar a Hoja demanda] }
      { 8   ;Label        ;220  ;1870 ;3300 ;440  ;ParentControl=11;
                                                   CaptionML=[ENU=Template Name;
                                                              ESP=Nombre libro] }
      { 9   ;Label        ;220  ;2420 ;3300 ;440  ;ParentControl=12;
                                                   CaptionML=[ENU=Worksheet Name;
                                                              ESP=Nombre hoja] }
      { 11  ;TextBox      ;3630 ;1870 ;2090 ;440  ;Name=ReqTemp;
                                                   CaptionML=[ENU=Template Name;
                                                              ESP=Nombre libro];
                                                   SourceExpr=ReqWkshTemp;
                                                   TableRelation="Req. Wksh. Template";
                                                   OnValidate=BEGIN
                                                                ReqWksh := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF FORM.RUNMODAL(FORM::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK THEN BEGIN
                                                                Text := ReqWkshTmpl.Name;
                                                                EXIT(TRUE);
                                                              END ELSE
                                                                EXIT(FALSE);
                                                            END;
                                                             }
      { 12  ;TextBox      ;3630 ;2420 ;2090 ;440  ;Name=ReqName;
                                                   CaptionML=[ENU=Worksheet Name;
                                                              ESP=Nombre hoja];
                                                   SourceExpr=ReqWksh;
                                                   TableRelation="Requisition Wksh. Name".Name;
                                                   OnLookup=BEGIN
                                                              ReqWkshName.SETFILTER("Worksheet Template Name",ReqWkshTemp);
                                                              IF FORM.RUNMODAL(FORM::"Req. Wksh. Names",ReqWkshName) = ACTION::LookupOK THEN BEGIN
                                                                Text := ReqWkshName.Name;
                                                                EXIT(TRUE);
                                                              END ELSE
                                                                EXIT(FALSE);
                                                            END;
                                                             }
      { 13  ;Label        ;0    ;3740 ;3300 ;440  ;CaptionML=[ENU=Copy to Req. Worksheet;
                                                              ESP=Copiar a Hoja demanda] }
      { 10  ;Label        ;220  ;4290 ;3300 ;440  ;ParentControl=15;
                                                   CaptionML=[ENU=Template Name;
                                                              ESP=Nombre libro] }
      { 14  ;Label        ;220  ;4840 ;3300 ;440  ;ParentControl=16;
                                                   CaptionML=[ENU=Worksheet Name;
                                                              ESP=Nombre hoja] }
      { 15  ;TextBox      ;3630 ;4290 ;2090 ;440  ;Name=TransTemp;
                                                   CaptionML=[ENU=Template Name;
                                                              ESP=Nombre libro];
                                                   SourceExpr=TransWkshTemp;
                                                   TableRelation="Req. Wksh. Template";
                                                   OnValidate=BEGIN
                                                                TransWkshName := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF FORM.RUNMODAL(FORM::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK THEN BEGIN
                                                                Text := ReqWkshTmpl.Name;
                                                                EXIT(TRUE);
                                                              END ELSE
                                                                EXIT(FALSE);
                                                            END;
                                                             }
      { 16  ;TextBox      ;3630 ;4840 ;2090 ;440  ;Name=TransName;
                                                   CaptionML=[ENU=Worksheet Name;
                                                              ESP=Nombre hoja];
                                                   SourceExpr=TransWkshName;
                                                   TableRelation="Requisition Wksh. Name".Name;
                                                   OnLookup=BEGIN
                                                              ReqWkshName.SETFILTER("Worksheet Template Name",TransWkshTemp);
                                                              IF FORM.RUNMODAL(FORM::"Req. Wksh. Names",ReqWkshName) = ACTION::LookupOK THEN BEGIN
                                                                Text := ReqWkshName.Name;
                                                                EXIT(TRUE);
                                                              END ELSE
                                                                EXIT(FALSE);
                                                            END;
                                                             }
      { 17  ;CheckBox     ;3410 ;5390 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Stop and Show First Error;
                                                              ESP=Parar y mostrar primer error];
                                                   SourceExpr=NoPlanningResiliency }
      { 18  ;Label        ;0    ;5390 ;3300 ;440  ;ParentControl=17 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               TransNameEnable := TRUE;
               TransTempEnable := TRUE;
               ReqNameEnable := TRUE;
               ReqTempEnable := TRUE;
             END;

      OnOpenPage=BEGIN
                   ReqTempEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                   ReqNameEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                   TransTempEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                   TransNameEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Production Order;
                             ESP=Orden producci¢n];
                  OptionCaptionML=[ENU=" ,Planned,Firm Planned,Firm Planned & Print";
                                   ESP=" ,Planificada,Planif. en firme,Planif. firme e impr."];
                  SourceExpr=ProdOrderChoice }

      { 5   ;2   ;Field     ;
                  CaptionML=[ENU=Purchase Order;
                             ESP=Pedido compra];
                  OptionCaptionML=[ENU=" ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh";
                                   ESP=" ,Crear ped. compra,Crear ped. compra e imprimir,Copiar a hoja deman."];
                  SourceExpr=PurchOrderChoice;
                  OnValidate=BEGIN
                               ReqTempEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                               ReqNameEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                             END;
                              }

      { 7   ;2   ;Group     ;
                  CaptionML=[ENU=Copy to Req. Worksheet;
                             ESP=Copiar a Hoja demanda] }

      { 11  ;3   ;Field     ;
                  Name=ReqTemp;
                  CaptionML=[ENU=Template Name;
                             ESP=Nombre libro];
                  SourceExpr=ReqWkshTemp;
                  TableRelation="Req. Wksh. Template";
                  Enabled=ReqTempEnable;
                  OnValidate=BEGIN
                               ReqWksh := '';
                             END;

                  OnLookup=BEGIN
                             IF FORM.RUNMODAL(FORM::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshTmpl.Name;
                               EXIT(TRUE);
                             END ELSE
                               EXIT(FALSE);
                           END;
                            }

      { 12  ;3   ;Field     ;
                  Name=ReqName;
                  CaptionML=[ENU=Worksheet Name;
                             ESP=Nombre hoja];
                  SourceExpr=ReqWksh;
                  TableRelation="Requisition Wksh. Name".Name;
                  Enabled=ReqNameEnable;
                  OnLookup=BEGIN
                             ReqWkshName.SETFILTER("Worksheet Template Name",ReqWkshTemp);
                             IF FORM.RUNMODAL(FORM::"Req. Wksh. Names",ReqWkshName) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshName.Name;
                               EXIT(TRUE);
                             END ELSE
                               EXIT(FALSE);
                           END;
                            }

      { 6   ;2   ;Field     ;
                  CaptionML=[ENU=Transfer Order;
                             ESP=Ped. transfer.];
                  OptionCaptionML=[ENU=" ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh";
                                   ESP=" ,Crear ped. transf.,Crear ped. transf. e impr.,Copiar a hoja dem."];
                  SourceExpr=TransOrderChoice;
                  OnValidate=BEGIN
                               TransTempEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                               TransNameEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                             END;
                              }

      { 13  ;2   ;Group     ;
                  CaptionML=[ENU=Copy to Req. Worksheet;
                             ESP=Copiar a Hoja demanda] }

      { 15  ;3   ;Field     ;
                  Name=TransTemp;
                  CaptionML=[ENU=Template Name;
                             ESP=Nombre libro];
                  SourceExpr=TransWkshTemp;
                  TableRelation="Req. Wksh. Template";
                  Enabled=TransTempEnable;
                  OnValidate=BEGIN
                               TransWkshName := '';
                             END;

                  OnLookup=BEGIN
                             IF FORM.RUNMODAL(FORM::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshTmpl.Name;
                               EXIT(TRUE);
                             END ELSE
                               EXIT(FALSE);
                           END;
                            }

      { 16  ;3   ;Field     ;
                  Name=TransName;
                  CaptionML=[ENU=Worksheet Name;
                             ESP=Nombre hoja];
                  SourceExpr=TransWkshName;
                  TableRelation="Requisition Wksh. Name".Name;
                  Enabled=TransNameEnable;
                  OnLookup=BEGIN
                             ReqWkshName.SETFILTER("Worksheet Template Name",TransWkshTemp);
                             IF FORM.RUNMODAL(FORM::"Req. Wksh. Names",ReqWkshName) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshName.Name;
                               EXIT(TRUE);
                             END ELSE
                               EXIT(FALSE);
                           END;
                            }

      { 17  ;2   ;Field     ;
                  CaptionML=[ENU=Stop and Show First Error;
                             ESP=Parar y mostrar primer error];
                  SourceExpr=NoPlanningResiliency }

    }
  }
  CODE
  {
    VAR
      Text000@1029 : TextConst 'ENU=There are no planning lines to make orders for.;ESP=No hay l¡neas de programaci¢n para crear pedidos.';
      Text007@1000 : TextConst 'ENU="This template and worksheet are currently active. ";ESP="Esta plantilla y hoja est n activas. "';
      Text008@1001 : TextConst 'ENU=You must select a different template name or worksheet name to copy to.;ESP=Debe seleccionar un nombre de plantilla u hoja diferente donde copiar.';
      PurchOrderHeader@1017 : Record 38;
      ReqWkshTmpl@1002 : Record 244;
      ReqWkshName@1003 : Record 245;
      ReqLineFilters@1026 : Record 246;
      CarryOutAction@1005 : Codeunit 99000813;
      ReqWkshMakeOrders@1018 : Codeunit 333;
      Window@1035 : Dialog;
      ReqWkshTemp@1007 : Code[10];
      ReqWksh@1008 : Code[10];
      TransWkshTemp@1009 : Code[10];
      TransWkshName@1010 : Code[10];
      ProdWkshTempl@1028 : Code[10];
      ProdWkshName@1027 : Code[10];
      CurrReqWkshTemp@1015 : Code[10];
      CurrReqWkshName@1014 : Code[10];
      ProdOrderChoice@1011 : ' ,Planned,Firm Planned,Firm Planned & Print,Copy to Req. Wksh';
      PurchOrderChoice@1012 : ' ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh';
      TransOrderChoice@1013 : ' ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh';
      Text009@1016 : TextConst 'ENU=You must select a worksheet to copy to;ESP=Debe seleccionar la hoja donde copiar';
      PrintOrders@1019 : Boolean;
      ReserveforPlannedProd@1033 : Boolean;
      NoPlanningResiliency@1031 : Boolean;
      Text010@1030 : TextConst 'ENU=Components were not reserved for orders with status Planned.;ESP=No se reservaron componentes para los pedidos con estado Planificada.';
      Text011@1032 : TextConst 'ENU=You must make order for both line %1 and %2 because they are associated.;ESP=Las l¡neas %1 y %2 est n asociadas. Debe crear pedidos para ambas.';
      Text012@1034 : TextConst 'ENU=Carrying Out Actions  #1########## @2@@@@@@@@@@@@@;ESP=Ejecutando acciones  #1########## @2@@@@@@@@@@@@@';
      Counter@1036 : Integer;
      CounterTotal@1037 : Integer;
      CounterFailed@1038 : Integer;
      Text013@1039 : TextConst 'ENU=Not all Requistion Lines were carried out.\;ESP=No se ejecutaron todas las l¡neas de solicitud.\';
      Text014@1040 : TextConst 'ENU=A total of %1 lines were not carried out due to errors encountered.;ESP=No se ejecutaron %1 l¡neas por los errores detectados.';
      EndOrderDate@1022 : Date;
      ReqTempEnable@19040225 : Boolean INDATASET;
      ReqNameEnable@19051726 : Boolean INDATASET;
      TransTempEnable@19079481 : Boolean INDATASET;
      TransNameEnable@19074510 : Boolean INDATASET;

    PROCEDURE CarryOutActions@20(SourceType@1004 : 'Purchase,Transfer,Production';Choice@1002 : Option;WkshTempl@1001 : Code[10];WkshName@1000 : Code[10]) : Boolean;
    BEGIN
      IF NoPlanningResiliency THEN BEGIN
        CarryOutAction.SetTryParameters(SourceType,Choice,WkshTempl,WkshName);
        CarryOutAction.RUN("Requisition Line");
      END ELSE
        IF NOT CarryOutAction.TryCarryOutAction(SourceType,"Requisition Line",Choice,WkshTempl,WkshName) THEN
          CounterFailed := CounterFailed + 1;
    END;

    PROCEDURE SetReqWkshLine@1(VAR CurrentReqLine@1000 : Record 246);
    BEGIN
      CurrReqWkshTemp := CurrentReqLine."Worksheet Template Name";
      CurrReqWkshName := CurrentReqLine."Journal Batch Name";
      ReqLineFilters.COPY(CurrentReqLine);
    END;

    PROCEDURE SetDemandOrder@3(VAR ReqLine@1005 : Record 246;MfgUserTempl@1000 : Record 5525);
    BEGIN
      SetReqWkshLine(ReqLine);

      InitializeRequest(
        MfgUserTempl."Create Production Order",
        MfgUserTempl."Create Purchase Order",
        MfgUserTempl."Create Transfer Order");

      ReqWkshTemp := MfgUserTempl."Purchase Req. Wksh. Template";
      ReqWksh := MfgUserTempl."Purchase Wksh. Name";
      ProdWkshTempl := MfgUserTempl."Prod. Req. Wksh. Template";
      ProdWkshName := MfgUserTempl."Prod. Wksh. Name";
      TransWkshTemp := MfgUserTempl."Transfer Req. Wksh. Template";
      TransWkshName := MfgUserTempl."Transfer Wksh. Name";

      WITH ReqLineFilters DO
        CASE MfgUserTempl."Make Orders" OF
          MfgUserTempl."Make Orders"::"the Active Line":
            BEGIN
              ReqLineFilters := ReqLine;
              SETRECFILTER;
            END;
          MfgUserTempl."Make Orders"::"the Active Order":
            BEGIN
              SETCURRENTKEY(
                "User ID","Demand Type","Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
              COPYFILTERS(ReqLine);
              SETRANGE("Demand Type",ReqLine."Demand Type");
              SETRANGE("Demand Subtype",ReqLine."Demand Subtype");
              SETRANGE("Demand Order No.",ReqLine."Demand Order No.");
            END;
          MfgUserTempl."Make Orders"::"All Lines":
            COPY(ReqLine);
        END;
    END;

    PROCEDURE InitializeRequest@2(NewProdOrderChoice@1002 : Option;NewPurchOrderChoice@1001 : Option;NewTransOrderChoice@1000 : Option);
    BEGIN
      ProdOrderChoice := NewProdOrderChoice;
      PurchOrderChoice := NewPurchOrderChoice;
      TransOrderChoice := NewTransOrderChoice;
    END;

    PROCEDURE SetReqLineFilters@5();
    BEGIN
      WITH "Requisition Line" DO BEGIN
        IF ReqLineFilters.GETFILTERS <> '' THEN
          COPY(ReqLineFilters);
        SETRANGE("Worksheet Template Name",CurrReqWkshTemp);
        SETRANGE("Journal Batch Name",CurrReqWkshName);
        SETRANGE(Type,Type::Item);
        SETFILTER("Action Message",'<>%1',"Action Message"::" ");
      END;
    END;

    PROCEDURE CheckCopyToWksh@4(ToReqWkshTempl@1000 : Code[10];ToReqWkshName@1001 : Code[10]);
    VAR
      ReqLine@1002 : Record 246;
    BEGIN
      IF (ToReqWkshTempl <> '') AND
         (CurrReqWkshTemp = ToReqWkshTempl) AND
         (CurrReqWkshName = ToReqWkshName)
      THEN
        ERROR(Text007 + Text008);

      IF (ToReqWkshTempl = '') OR (ToReqWkshName = '') THEN
        ERROR(Text009);

      WITH ReqLine DO BEGIN
        IF "Requisition Line"."Planning Line Origin" = "Planning Line Origin"::"Order Planning" THEN
          EXIT;

        SETRANGE("Worksheet Template Name",ToReqWkshTempl);
        SETRANGE("Journal Batch Name",ToReqWkshName);
        DELETEALL(TRUE);
      END;
    END;

    PROCEDURE CheckPreconditions@6();
    BEGIN
      WITH "Requisition Line" DO
        REPEAT
          CheckLine;
        UNTIL NEXT = 0;
    END;

    PROCEDURE CheckLine@7();
    VAR
      SalesLine@1000 : Record 37;
      ProdOrderComp@1001 : Record 5407;
      ReqLine2@1003 : Record 246;
      JnlLineDim@1002 : Record 356;
      TempJnlLineDim@1005 : TEMPORARY Record 356;
      DimMgt@1004 : Codeunit 408;
    BEGIN
      WITH "Requisition Line" DO BEGIN

        IF NOT (PurchOrderChoice IN [PurchOrderChoice::"Make Purch. Orders",
                                     PurchOrderChoice::"Make Purch. Orders & Print"])
        THEN BEGIN
          JnlLineDim.SETRANGE("Table ID",DATABASE::"Requisition Line");
          JnlLineDim.SETRANGE("Journal Template Name","Worksheet Template Name");
          JnlLineDim.SETRANGE("Journal Batch Name","Journal Batch Name");
          JnlLineDim.SETRANGE("Journal Line No.","Line No.");
          JnlLineDim.SETRANGE("Allocation Line No.",0);
          DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDim,TempJnlLineDim);
        END;

        IF "Planning Line Origin" <> "Planning Line Origin"::"Order Planning" THEN
          EXIT;

        CheckAssociations("Requisition Line");

        IF "Planning Level" > 0 THEN
          EXIT;

        IF "Replenishment System" <> "Replenishment System"::"Prod. Order" THEN
          TESTFIELD("Supply From");

        IF "Demand Type" = DATABASE::"Sales Line" THEN BEGIN
          SalesLine.GET("Demand Subtype","Demand Order No.","Demand Line No.");
          SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
          IF NOT (("Demand Date" = WORKDATE) AND (SalesLine."Shipment Date" IN [0D,WORKDATE])) THEN
            TESTFIELD("Demand Date",SalesLine."Shipment Date");
          TESTFIELD("No.",SalesLine."No.");
          TESTFIELD("Qty. per UOM (Demand)",SalesLine."Qty. per Unit of Measure");
          TESTFIELD("Variant Code",SalesLine."Variant Code");
          TESTFIELD("Location Code",SalesLine."Location Code");
          SalesLine.CALCFIELDS("Reserved Qty. (Base)");
          TESTFIELD(
            "Demand Quantity (Base)",
            -SalesLine.SignedXX(SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)"))
        END;

        IF "Demand Type" = DATABASE::"Prod. Order Component" THEN BEGIN
          ProdOrderComp.GET("Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
          TESTFIELD("No.",ProdOrderComp."Item No.");
          IF NOT (("Demand Date" = WORKDATE) AND (ProdOrderComp."Due Date" IN [0D,WORKDATE])) THEN
            TESTFIELD("Demand Date",ProdOrderComp."Due Date");
          TESTFIELD("Qty. per UOM (Demand)",ProdOrderComp."Qty. per Unit of Measure");
          TESTFIELD("Variant Code",ProdOrderComp."Variant Code");
          TESTFIELD("Location Code",ProdOrderComp."Location Code");
          ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
          TESTFIELD(
            "Demand Quantity (Base)",
            ProdOrderComp."Remaining Qty. (Base)" - ProdOrderComp."Reserved Qty. (Base)");
          IF (ProdOrderChoice = ProdOrderChoice::Planned) AND Reserve THEN
            ReserveforPlannedProd := TRUE;
        END;

        ReqLine2.SETCURRENTKEY(
          "User ID","Demand Type","Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
        ReqLine2.SETFILTER("User ID",'<>%1',USERID);
        ReqLine2.SETRANGE("Demand Type","Demand Type");
        ReqLine2.SETRANGE("Demand Subtype","Demand Subtype");
        ReqLine2.SETRANGE("Demand Order No.","Demand Order No.");
        ReqLine2.SETRANGE("Demand Line No.","Demand Line No.");
        ReqLine2.SETRANGE("Demand Ref. No.","Demand Ref. No.");
        ReqLine2.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE CheckAssociations@8(VAR ReqLine@1000 : Record 246);
    VAR
      ReqLine2@1002 : Record 246;
      ReqLine3@1001 : Record 246;
    BEGIN
      WITH ReqLine DO BEGIN
        ReqLine3.COPY(ReqLine);
        ReqLine2 := ReqLine;

        IF ReqLine2."Planning Level" > 0 THEN
          WHILE (ReqLine2.NEXT(-1) <> 0) AND (ReqLine2."Planning Level" > 0) DO;

        REPEAT
          ReqLine3 := ReqLine2;
          IF NOT ReqLine3.FIND THEN
            ERROR(Text011,"Line No.",ReqLine2."Line No.");
        UNTIL (ReqLine2.NEXT = 0) OR (ReqLine2."Planning Level" = 0)
      END;
    END;

    PROCEDURE WindowUpdate@9();
    BEGIN
      Counter := Counter + 1;
      Window.UPDATE(1,"Requisition Line"."No.");
      Window.UPDATE(2,ROUND(Counter / CounterTotal * 10000,1));
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
