OBJECT Report 7010073 old_Supplier Service Order
{
  OBJECT-PROPERTIES
  {
    Date=11/10/14;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009,CNT;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Supplier Service Order;
               ESP=Supplier Service Order];
    OnInitReport=BEGIN
                   CLEAR(rInfEmp);
                   rInfEmp.FINDFIRST;
                   rInfEmp.CALCFIELDS(Picture);
                   wHoraImp := TIME;
                 END;

    OnPreReport=BEGIN

                  IF wFechaHasta = 0D THEN
                    wFechaHasta := wFechaDesde;
                  wTextoFecha := STRSUBSTNO(Text020, wFechaDesde, wFechaHasta);

                  IF (wFechaDesde =0D) OR (wFechaHasta=0D) THEN
                    ERROR(Text021);

                  IF (wFechaDesde > wFechaHasta) THEN
                    ERROR(Text022);
                END;

    Orientation=Landscape;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number);
        DataItemVarName=Iserv;
        OnPreDataItem=BEGIN
                        CreaTemp;

                        CLEAR(rTemp);
                        rTemp[1].SETCURRENTKEY(Code01,Date01,Time01,Int01);
                        rTemp[1].SETRANGE(Int03, 0); // Por Salidas o llegadas no agrupadas
                        wFirst01 := TRUE;
                      END;

        OnAfterGetRecord=VAR
                           lwOK1@1100253000 : Boolean;
                         BEGIN

                           IF wFirst01 THEN
                             lwOK1 := rTemp[1].FINDSET
                           ELSE
                             lwOK1 := rTemp[1].NEXT<>0;

                           IF NOT lwOK1 THEN
                             CurrReport.BREAK;

                           rAgrp.GET(rTemp[1].Int02);

                           // Gestion de nueva pagina por proveedor
                           IF wFirst01 THEN
                             wCodSupl := rTemp[1].Code01;
                           wFirst01 := FALSE;
                           IF wCodSupl <> rTemp[1].Code01 THEN BEGIN
                             CurrReport.NEWPAGE;
                             CLEAR(wTotalImporte);
                           END;
                           wCodSupl := rTemp[1].Code01;

                           // Miramos si tenemos que ense¤ar el total o no
                           rTemp[2].COPY(rTemp[1]);
                           wShowTotal := (rTemp[2].NEXT=0) OR (wCodSupl <> rTemp[2].Code01);
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            PrintOnEveryPage=Yes;
            SectionWidth=25350;
            SectionHeight=2961;
          }
          CONTROLS
          {
            { 1100253000;Label  ;6300 ;0    ;12150;423  ;HorzAlign=Center;
                                                         FontSize=9;
                                                         FontBold=Yes;
                                                         CaptionML=[ENU=ORDERS FOR SERVICES SUPPLIER;
                                                                    ESP=ORDENES DE SERVICIOS PARA SUPLIDOR] }
            { 1100253001;TextBox;0    ;2115 ;1350 ;423  ;HorzAlign=Left;
                                                         FontSize=9;
                                                         FontBold=Yes;
                                                         SourceExpr=Text001 }
            { 1100253002;TextBox;1500 ;2115 ;2250 ;423  ;HorzAlign=Left;
                                                         FontSize=9;
                                                         FontBold=Yes;
                                                         SourceExpr=Text002 }
            { 1100253003;TextBox;3900 ;2115 ;6600 ;423  ;HorzAlign=Left;
                                                         FontSize=9;
                                                         FontBold=Yes;
                                                         SourceExpr=Text003 }
            { 1100253004;TextBox;10650;2115 ;1800 ;423  ;HorzAlign=Center;
                                                         FontSize=9;
                                                         FontBold=Yes;
                                                         SourceExpr=Text004 }
            { 1100253005;TextBox;12600;2115 ;1800 ;423  ;HorzAlign=Center;
                                                         FontSize=9;
                                                         FontBold=Yes;
                                                         SourceExpr=Text005 }
            { 1100253006;TextBox;14550;2115 ;2400 ;423  ;HorzAlign=Right;
                                                         FontSize=9;
                                                         FontBold=Yes;
                                                         SourceExpr=Text006 }
            { 1100253007;TextBox;17100;2115 ;7200 ;423  ;HorzAlign=Left;
                                                         FontSize=9;
                                                         FontBold=Yes;
                                                         SourceExpr=Text007 }
            { 1100253009;Shape  ;0    ;2538 ;25350;423  ;ShapeStyle=HorzLine }
            { 1100253016;PictureBox;0 ;0    ;6150 ;2115 ;SourceExpr=rInfEmp.Picture }
            { 1100253019;TextBox;6300 ;423  ;12150;423  ;HorzAlign=Center;
                                                         FontSize=8;
                                                         SourceExpr=wTextoFecha }
            { 1100253018;TextBox;8250 ;1269 ;10200;423  ;HorzAlign=Center;
                                                         SourceExpr=STRSUBSTNO('%1 - %2', rTemp[1].Code01  ,NombreProv) }
            { 1100253020;Label  ;6300 ;1269 ;1950 ;423  ;HorzAlign=Left;
                                                         CaptionML=[ENU=Supplier:;
                                                                    ESP=Proveedor:] }
            { 1100253025;TextBox;22800;423  ;1950 ;423  ;CaptionML=[ENU=Printed:;
                                                                    ESP=Impreso el:];
                                                         SourceExpr=TODAY }
            { 1100253026;Label  ;20700;423  ;1950 ;423  ;ParentControl=1100253025;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100253027;Label  ;20700;846  ;1950 ;423  ;ParentControl=1100253028;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100253028;TextBox;22800;846  ;1950 ;423  ;CaptionML=[ENU=Time:;
                                                                    ESP=Hora:];
                                                         SourceExpr=wHoraImp }
          }
           }
        { PROPERTIES
          {
            SectionType=Footer;
            PrintOnEveryPage=Yes;
            PlaceInBottom=Yes;
            SectionWidth=25350;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100253021;TextBox;0    ;0    ;3150 ;423  ;HorzAlign=Right;
                                                         SourceExpr=FORMAT(TODAY,0,4) }
            { 1100253022;TextBox;24900;0    ;450  ;423  ;CaptionML=ESP=P g.;
                                                         SourceExpr=CurrReport.PAGENO }
            { 1100253023;Label  ;24150;0    ;750  ;423  ;ParentControl=1100253022 }
            { 1100253024;TextBox;7650 ;0    ;9750 ;423  ;HorzAlign=Center;
                                                         SourceExpr=USERID }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=FILTER(1..2));
        DataItemVarName=IVuelta;
        OnAfterGetRecord=BEGIN
                           // Busca el enlace
                           CASE IVuelta.Number OF
                             2: BEGIN
                                  CLEAR(rTemp[2]);
                                  rTemp[2].SETRANGE(Int03, rTemp[1].Id);
                                  IF NOT rTemp[2].FINDFIRST THEN
                                    CurrReport.BREAK;
                                  rAgrp.GET(rTemp[2].Int02);
                                END;
                           END;

                           CASE rAgrp."Tipo transfer" OF
                             rAgrp."Tipo transfer"::Entrada : BEGIN
                               rAgrp.CALCFIELDS("Personas entrada");
                               wPax := rAgrp."Personas entrada";
                             END;
                             rAgrp."Tipo transfer"::Salida : BEGIN
                               rAgrp.CALCFIELDS("Personas salida");
                               wPax := rAgrp."Personas salida";
                             END;
                           END;

                           wTextoServ := STRSUBSTNO('%1 %2 VIA', NomServ , IVuelta.Number);
                           wImporte := cCalc.CalcOtrosAgrupacion2(rAgrp,wTipoProv);
                           wTotalImporte += wImporte;
                           GestCom(50);
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=25350;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100253010;TextBox;0    ;0    ;1350 ;423  ;HorzAlign=Left;
                                                         SourceExpr=rAgrp.Fecha }
            { 1100253011;TextBox;1500 ;0    ;2250 ;423  ;HorzAlign=Left;
                                                         SourceExpr=rAgrp."N§ Agrupacion" }
            { 1100253012;TextBox;17100;0    ;7200 ;423  ;HorzAlign=Left;
                                                         SourceExpr=wObsTXT[1] }
            { 1100253008;TextBox;3900 ;0    ;6600 ;423  ;HorzAlign=Left;
                                                         SourceExpr=wTextoServ }
            { 1100253014;TextBox;10650;0    ;1800 ;423  ;HorzAlign=Center;
                                                         SourceExpr=rAgrp."Capacidad Vehiculo" }
            { 1100253015;TextBox;12600;0    ;1800 ;423  ;HorzAlign=Center;
                                                         DecimalPlaces=0:1;
                                                         SourceExpr=wPax }
            { 1100253017;TextBox;14550;0    ;2400 ;423  ;HorzAlign=Right;
                                                         SourceExpr=wImporte }
          }
           }
        { PROPERTIES
          {
            SectionType=Footer;
            SectionWidth=25350;
            SectionHeight=846;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(wShowTotal);
                         END;

          }
          CONTROLS
          {
            { 1100253031;Shape  ;14550;0    ;2400 ;423  ;ShapeStyle=HorzLine }
            { 1100253032;TextBox;14550;423  ;2400 ;423  ;HorzAlign=Right;
                                                         FontBold=Yes;
                                                         SourceExpr=wTotalImporte }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=FILTER(2..10));
        DataItemVarName=IObsv;
        OnAfterGetRecord=BEGIN
                           IF wObsTXT[IObsv.Number]='' THEN
                             CurrReport.BREAK;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=25350;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100253013;TextBox;17100;0    ;7200 ;423  ;HorzAlign=Left;
                                                         SourceExpr=wObsTXT[IObsv.Number] }
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=14850;
      Height=3410;
      CaptionML=[ENU=Interface cancellations List;
                 ESP=Lista Bajas interfase];
    }
    CONTROLS
    {
      { 1100253000;TextBox;3630 ;220  ;2970 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Period;
                                                              ESP=Periodo];
                                                   SourceExpr=wFechaDesde }
      { 1100253001;Label  ;220  ;220  ;3300 ;440  ;ParentControl=1100253000 }
      { 1100253002;TextBox;7150 ;220  ;2970 ;440  ;InPage=-1;
                                                   SourceExpr=wFechaHasta }
      { 1100253003;Label  ;6600 ;220  ;550  ;440  ;HorzAlign=Center;
                                                   LeaderDots=No;
                                                   CaptionML=ESP=... }
      { 1100253004;TextBox;3630 ;770  ;2970 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Provider Code;
                                                              ESP=Tipo Proveedor];
                                                   SourceExpr=wTipoProv;
                                                   OnValidate=BEGIN
                                                                CLEAR(wFiltCodProv);
                                                              END;
                                                               }
      { 1100253005;Label  ;220  ;770  ;3300 ;440  ;ParentControl=1100253004 }
      { 1100253008;TextBox;3630 ;1320 ;2970 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Provider Code;
                                                              ESP=Codigo Proveedor];
                                                   SourceExpr=wFiltCodProv;
                                                   OnValidate=VAR
                                                                lrMal@1100253001 : Record 7009900;
                                                                lrGuiaT@1100253000 : Record 7009904;
                                                              BEGIN
                                                                IF wFiltCodProv ='' THEN
                                                                  EXIT;

                                                                CASE wTipoProv OF
                                                                  wTipoProv::Maleteros        : lrMal.GET(wFiltCodProv);
                                                                  wTipoProv::"Guias Transfer" : lrGuiaT.GET(wFiltCodProv);
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              lrMal@1100253001 : Record 7009900;
                                                              lrGuiaT@1100253000 : Record 7009904;
                                                            BEGIN

                                                              CASE wTipoProv OF
                                                                wTipoProv::Maleteros : BEGIN
                                                                                   IF FORM.RUNMODAL(0,lrMal) = ACTION::LookupOK THEN
                                                                                     wFiltCodProv := lrMal.Codigo;
                                                                                 END;
                                                                wTipoProv::"Guias Transfer" : BEGIN
                                                                                   IF FORM.RUNMODAL(0,lrGuiaT) = ACTION::LookupOK THEN
                                                                                     wFiltCodProv := lrGuiaT.Codigo;
                                                                                 END;
                                                              END;
                                                            END;
                                                             }
      { 1100253009;Label  ;220  ;1320 ;3300 ;440  ;ParentControl=1100253008 }
      { 1100253010;TextBox;6820 ;1320 ;7590 ;440  ;InPage=-1;
                                                   SourceExpr=NombreProv }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      rAgrp@1100253020 : Record 7009796;
      rInfEmp@1100253000 : Record 79;
      wFechaDesde@1100253001 : Date;
      wFechaHasta@1100253002 : Date;
      wTextoFecha@1100253003 : Text[250];
      Text001@1100253004 : TextConst 'ENU=Date;ESP=Fecha';
      Text002@1100253006 : TextConst 'ENU=#Serv;ESP=#Serv';
      Text003@1100253007 : TextConst 'ENU=Requested Service;ESP=Servicio Solicitado';
      Text004@1100253008 : TextConst 'ENU=Capacity;ESP=Capacidad';
      Text005@1100253009 : TextConst 'ENU=PAX;ESP=PAX';
      Text006@1100253010 : TextConst 'ENU=AMOUNT;ESP=IMPORTE';
      Text007@1100253011 : TextConst 'ENU=COMMETNS;ESP=OBSERVACIONES';
      Text020@1100253012 : TextConst 'ENU=From %1 to %2;ESP=Del %1 al %2';
      wTipoProv@1100253013 : 'Maleteros,Guias Transfer';
      wFiltCodProv@1100253014 : Code[20];
      Text021@1100253015 : TextConst 'ENU=Must fill the date period;ESP=Debe de rellenar el periodo de fechas';
      Text022@1100253016 : TextConst 'ENU=From Date Can not be later than Date To;ESP=Fecha Desde No puede ser posterior a Fecha Hasta';
      wCodSupl@1100253022 : Code[20];
      wPax@1100253024 : Decimal;
      wImporte@1100253025 : Decimal;
      wTotalImporte@1100253031 : Decimal;
      wHoraImp@1100253028 : Time;
      rTempAgr@1100253017 : TEMPORARY Record 7009796;
      rTemp@1100253018 : ARRAY [2] OF TEMPORARY Record 7010251;
      cCalc@1100253026 : Codeunit 7009769;
      cFunNom@1100253027 : Codeunit 7009702;
      wId@1100253019 : Integer;
      wFirst01@1100253021 : Boolean;
      wObsTXT@1100253023 : ARRAY [10] OF Text[250];
      wTextoServ@1100253005 : Text[250];
      wVent@1100253029 : Dialog;
      Text023@1100253030 : TextConst 'ENU="Building Temporary ";ESP=Creando Temporal';
      wShowTotal@1100253032 : Boolean;

    PROCEDURE NombreProv@1100253013() : Text[30];
    VAR
      lwNom@1100253000 : Text[30];
      lrMal@1100253002 : Record 7009900;
      lrGuiaT@1100253001 : Record 7009904;
    BEGIN
      // NombreProv

      CLEAR(lwNom);
      IF wFiltCodProv = '' THEN
        EXIT;
      CASE wTipoProv OF
        wTipoProv::Maleteros : BEGIN
                           IF lrMal.GET(wFiltCodProv) THEN
                              lwNom := lrMal.Nombre;
                         END;
        wTipoProv::"Guias Transfer" : BEGIN
                           IF lrGuiaT.GET(wFiltCodProv) THEN
                              lwNom := lrGuiaT.Nombre;
                         END;
      END;

      EXIT(lwNom);
    END;

    PROCEDURE CreaTemp@1100253003();
    VAR
      lrAgrp@1100253000 : Record 7009796;
      lrMalAgrp@1100253001 : Record 7009903;
      lrGuiaArp@1100253002 : Record 7009905;
      lwCnt@1100253003 : Integer;
      lwTotal@1100253004 : Integer;
    BEGIN
      // CreaTemp

      CLEAR(rTemp);
      rTemp[1].DELETEALL;
      CLEAR(wId);

      CASE wTipoProv OF
        wTipoProv::Maleteros : BEGIN
                                 CLEAR(lrMalAgrp);
                                 lrMalAgrp.SETCURRENTKEY("Fecha Agrupacion","Cod. Maletero");
                                 lrMalAgrp.SETRANGE("Fecha Agrupacion", wFechaDesde, wFechaHasta);
                                 IF wFiltCodProv <> '' THEN
                                   lrMalAgrp.SETRANGE("Cod. Maletero", wFiltCodProv);
                                 IF lrMalAgrp.FINDSET THEN BEGIN
                                   wVent.OPEN(Text023 + ' @1@@@@@@@@@');
                                   lwTotal := lrMalAgrp.COUNT;
                                   CLEAR(lwCnt);
                                   REPEAT
                                     InsertaTempAgrp(lrMalAgrp."Num Agrupacion", lrMalAgrp."Cod. Maletero");
                                     lwCnt +=1;
                                     wVent.UPDATE(1, ROUND(lwCnt/lwTotal*10000,1));
                                   UNTIL lrMalAgrp.NEXT=0;
                                   wVent.CLOSE;
                                 END;
                               END;
        wTipoProv::"Guias Transfer" : BEGIN
                                 CLEAR(lrGuiaArp);
                                 lrGuiaArp.SETCURRENTKEY("Fecha Agrupacion");
                                 lrGuiaArp.SETRANGE("Fecha Agrupacion", wFechaDesde, wFechaHasta);
                                 IF wFiltCodProv <> '' THEN
                                   lrGuiaArp.SETRANGE("Cod.Guia", wFiltCodProv);
                                 IF lrGuiaArp.FINDSET THEN BEGIN
                                   wVent.OPEN(Text023 + ' @1@@@@@@@@@');
                                   lwTotal := lrGuiaArp.COUNT;
                                   CLEAR(lwCnt);
                                   REPEAT
                                     InsertaTempAgrp(lrGuiaArp."Num.Agrupacion", lrGuiaArp."Cod.Guia");
                                     lwCnt +=1;
                                     wVent.UPDATE(1, ROUND(lwCnt/lwTotal*10000,1));
                                   UNTIL lrGuiaArp.NEXT=0;
                                   wVent.CLOSE;
                                 END;
                               END;
      END;

      Agrupa;
    END;

    PROCEDURE InsertaTempAgrp@1100253009(pwNoAgrp@1100253000 : Integer;pwCodProv@1100253002 : Code[20]);
    VAR
      lrAgrp@1100253001 : Record 7009796;
      lrVuelos@1100253004 : Record 7009797;
    BEGIN
      // InsertaTempAgrp

      IF pwNoAgrp=0 THEN
        EXIT;

      lrAgrp.GET(pwNoAgrp);
      wId +=1;
      rTemp[1].Id := wId;
      rTemp[1].Code01 := pwCodProv;
      rTemp[1].Int02  := lrAgrp."N§ Agrupacion";
      rTemp[1].Dec01  := lrAgrp."Capacidad Vehiculo";
      // Estos datos son para poder agrupar las vias
      rTemp[1].Code02 := lrAgrp.Transportista;
      rTemp[1].Code03 := lrAgrp."Numero Bus";
      rTemp[1].Date01 := lrAgrp.Fecha;
      rTemp[1].Int01 := - lrAgrp."Tipo transfer"; // Para que salgan antes las salidas se pone en negativo

      CLEAR(lrVuelos);
      lrVuelos.SETRANGE("N§ Agrupacion", lrAgrp."N§ Agrupacion");
      IF lrVuelos.FINDSET THEN BEGIN
        REPEAT
          BuscaHoraVuelo(lrAgrp."Tipo transfer", lrVuelos);
        UNTIL lrVuelos.NEXT=0;
      END;

      CASE lrAgrp."Tipo transfer" OF
        lrAgrp."Tipo transfer"::Entrada : BEGIN
          lrAgrp.CALCFIELDS("Personas entrada");
          rTemp[1].Dec03 := lrAgrp."Personas entrada";
        END;
        lrAgrp."Tipo transfer"::Salida : BEGIN
          lrAgrp.CALCFIELDS("Personas salida");
          rTemp[1].Dec03 := lrAgrp."Personas salida";
        END;
      END;

      rTemp[1].INSERT;
    END;

    PROCEDURE BuscaHoraVuelo@1100253001(pwTipoTrans@1100253000 : 'Entrada,Salida';prVuelo@1100253003 : Record 7009797);
    VAR
      lwHora@1100253001 : Time;
    BEGIN
      // BuscaHoraVuelo

      CLEAR(lwHora);
      lwHora := prVuelo.Hora;
      CASE pwTipoTrans OF
        pwTipoTrans::Entrada : BEGIN
                                 IF lwHora <> 0T THEN BEGIN
                                   IF (lwHora < rTemp[1].Time01) OR (rTemp[1].Time01=0T) THEN
                                     rTemp[1].Time01 := lwHora
                                 END;
                               END;
        pwTipoTrans::Salida : BEGIN
                                IF lwHora > rTemp[1].Time01 THEN
                                  rTemp[1].Time01 := lwHora
                              END;
      END
    END;

    PROCEDURE Agrupa@1100253005();
    BEGIN
      // Agrupa
      // Agrupa las agrupaciones para enlazas las dos vias por el campo  Id - Int03

      CLEAR(rTemp);
      rTemp[1].SETRANGE(Int01 , -1); // Salidas
      IF rTemp[1].FINDFIRST THEN BEGIN
        REPEAT
          rTemp[2].SETRANGE(Code02, rTemp[1].Code02); // Transportista
          rTemp[2].SETRANGE(Code03, rTemp[1].Code03); // Numero de bus
          rTemp[2].SETRANGE(Date01, rTemp[1].Date01); // Fecha
          rTemp[2].SETRANGE(Int01 , 0);   // Entradas
          rTemp[2].SETRANGE(Int03 , 0);  // No agrupadas
          IF rTemp[2].FINDSET THEN BEGIN
            REPEAT
              IF (rTemp[1].Time01 <> 0T) AND (rTemp[2].Time01 <> 0T) THEN BEGIN
                // Si la diferencia es menor a dos horas
                IF ABS(rTemp[2].Time01 - rTemp[1].Time01) < 7200000 THEN BEGIN
                  rTemp[2].Int03 := rTemp[1].Id;
                  rTemp[2].MODIFY;
                END;
              END;
            UNTIL rTemp[2].NEXT=0;
          END;
        UNTIL rTemp[1].NEXT=0;
      END;
    END;

    PROCEDURE GestCom@1100253008(pwLong@1100253001 : Integer);
    VAR
      lrComAg@1100253000 : Record 7009813;
      lwPal@1100253003 : Text[250];
      lwText2@1100253007 : Text[250];
      lwCh@1100253004 : Char;
      lwCnt@1100253005 : Integer;
      lwN@1100253002 : Integer;
      lwTotal@1100253008 : Integer;
      lwNlIn@1100253009 : Integer;
      lwOk@1100253006 : Boolean;
    BEGIN
      // GestCom
      // Gestiona los comentarios de la agrupaci¢n y los colaba en un array de texto

      CLEAR(wObsTXT);
      IF rAgrp."N§ Agrupacion"=0 THEN
        EXIT;

      lwCnt := 1;
      CLEAR(lrComAg);
      lrComAg.SETRANGE(Agrupacion, rAgrp."N§ Agrupacion");
      IF lrComAg.FINDSET THEN BEGIN
        lwTotal := lrComAg.COUNT;
        REPEAT
          IF (lwPal<>'') THEN
            lwPal += ' ';
          FOR lwN := 1 TO STRLEN(lrComAg.Comentario) DO BEGIN
            lwCh := lrComAg.Comentario[lwN];
            lwPal += FORMAT(lwCh);
            IF (lwCh IN [' ',',','.',';','-','_',':' ]) OR (STRLEN(lwPal)=pwLong) THEN BEGIN
              REPEAT
                lwOk := STRLEN(wObsTXT[lwCnt]) + STRLEN(lwPal) <= pwLong;
                IF NOT lwOk THEN
                  lwCnt += 1;
                IF lwCnt > 10 THEN
                  EXIT;
              UNTIL lwOk;
              wObsTXT[lwCnt] += lwPal;
              CLEAR(lwPal);
            END;
          END;
        UNTIL lrComAg.NEXT=0;

        IF lwPal <> '' THEN BEGIN
          REPEAT
            lwOk := STRLEN(wObsTXT[lwCnt]) + STRLEN(lwPal) <= pwLong;
            IF NOT lwOk THEN
              lwCnt += 1;
            IF lwCnt > 10 THEN
              EXIT;
          UNTIL lwOk;
          wObsTXT[lwCnt] += lwPal;
        END;
      END;
    END;

    PROCEDURE NomServ@1100253023() : Text[250];
    VAR
      lwText@1100253000 : Text[250];
      lrRes@1100253001 : Record 7009744;
    BEGIN
      // NomServ

      CLEAR(lwText);

      CLEAR(lrRes);
      CASE rAgrp."Tipo transfer" OF
        rAgrp."Tipo transfer"::Entrada : BEGIN
                                       lrRes.SETCURRENTKEY("Agrupacion entrada");
                                       lrRes.SETRANGE("Agrupacion entrada", rAgrp."N§ Agrupacion");
                                     END;
        rAgrp."Tipo transfer"::Salida : BEGIN
                                       lrRes.SETCURRENTKEY("Agrupacion salida");
                                       lrRes.SETRANGE("Agrupacion salida", rAgrp."N§ Agrupacion");
                                     END;
      END;
      lrRes.SETFILTER(Producto, '<>%1' , '');
      IF lrRes.FINDFIRST THEN BEGIN
        lwText := cFunNom.nom_producto(lrRes.Producto);
        IF lwText='' THEN
          lwText := lrRes.Producto;
        lwText := STRSUBSTNO('%1 (%2)', lwText, rAgrp.Zona);
      END;

      EXIT(lwText);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
