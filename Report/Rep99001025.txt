OBJECT Report 99001025 Refresh Production Order
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    TransactionType=Update;
    CaptionML=[ENU=Refresh Production Order;
               ESP=Actualizar orden producci¢n];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   Direction := Direction::Backward;
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table5405;
        DataItemTableView=SORTING(Status,No.);
        OnPreDataItem=BEGIN
                        Window.OPEN(
                          Text000 +
                          Text001 +
                          Text002);
                      END;

        OnAfterGetRecord=VAR
                           Item@1004 : Record 27;
                           ProdOrderLine@1000 : Record 5406;
                           ProdOrderRtngLine@1001 : Record 5409;
                           ProdOrderComp@1002 : Record 5407;
                           Family@1005 : Record 99000773;
                           ProdOrderStatusMgt@1003 : Codeunit 5407;
                           RoutingNo@1006 : Code[20];
                         BEGIN
                           IF "Production Order".Status = "Production Order".Status::Finished THEN
                             CurrReport.SKIP;
                           IF Direction = Direction::Backward THEN
                             TESTFIELD("Due Date");

                           Window.UPDATE(1,Status);
                           Window.UPDATE(2,"No.");

                           RoutingNo := "Routing No.";
                           CASE "Source Type" OF
                             "Source Type"::Item:
                               IF Item.GET("Source No.") THEN
                                 RoutingNo := Item."Routing No.";
                             "Source Type"::Family:
                               IF Family.GET("Source No.") THEN
                                 RoutingNo := Family."Routing No.";
                           END;
                           IF RoutingNo <> "Routing No." THEN BEGIN
                             "Routing No." := RoutingNo;
                             MODIFY;
                           END;

                           ProdOrderLine.LOCKTABLE;

                           CheckReservationExist;

                           IF CalcLines THEN
                             CreateProdOrderLines.Copy("Production Order",Direction,'')
                           ELSE BEGIN
                             ProdOrderLine.SETRANGE(Status,Status);
                             ProdOrderLine.SETRANGE("Prod. Order No.","No.");
                             IF CalcRoutings OR CalcComponents THEN BEGIN
                               IF ProdOrderLine.FIND('-') THEN
                                 REPEAT
                                   IF CalcRoutings THEN BEGIN
                                     ProdOrderRtngLine.SETRANGE(Status,Status);
                                     ProdOrderRtngLine.SETRANGE("Prod. Order No.","No.");
                                     ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
                                     ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
                                     ProdOrderRtngLine.DELETEALL(TRUE);
                                   END;
                                   IF CalcComponents THEN BEGIN
                                     ProdOrderComp.SETRANGE(Status,Status);
                                     ProdOrderComp.SETRANGE("Prod. Order No.","No.");
                                     ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
                                     ProdOrderComp.DELETEALL(TRUE);
                                   END;
                                 UNTIL ProdOrderLine.NEXT = 0;
                               IF ProdOrderLine.FIND('-') THEN
                                 REPEAT
                                   ProdOrderLine."Due Date" := "Due Date";
                                   CalcProdOrder.Calculate(ProdOrderLine,Direction,CalcRoutings,CalcComponents,FALSE);
                                 UNTIL ProdOrderLine.NEXT = 0;
                             END;
                           END;
                           IF (Direction = Direction::Backward) AND
                              ("Source Type" = "Source Type"::Family)
                           THEN BEGIN
                             SetUpdateEndDate;
                             VALIDATE("Due Date","Due Date");
                           END;

                           IF Status = Status::Released THEN BEGIN
                             ProdOrderStatusMgt.FlushProdOrder("Production Order","Production Order".Status,WORKDATE);
                             WhseProdRelease.Release("Production Order");
                             IF CreateInbRqst THEN
                               WhseOutputProdRelease.Release("Production Order");
                           END;
                         END;

        ReqFilterFields=Status,No.;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=4070;
      Height=4950;
      OnInit=BEGIN
               CalcLines := TRUE;
               CalcRoutings := TRUE;
               CalcComponents := TRUE;
             END;

    }
    CONTROLS
    {
      { 5   ;Label        ;0    ;0    ;3520 ;440  ;LeaderDots=Yes;
                                                   CaptionML=[ENU=Scheduling direction;
                                                              ESP=Direcci¢n programaci¢n] }
      { 6   ;OptionButton ;220  ;550  ;1760 ;440  ;BitmapPos=Left;
                                                   CaptionML=[ENU=Forward;
                                                              ESP=Adelante];
                                                   SourceExpr=Direction;
                                                   OptionValue=Forward }
      { 7   ;OptionButton ;220  ;1100 ;1760 ;440  ;BitmapPos=Left;
                                                   CaptionML=[ENU=Back;
                                                              ESP=Atr s];
                                                   SourceExpr=Direction;
                                                   OptionValue=Backward }
      { 3   ;Label        ;0    ;1650 ;3300 ;440  ;LeaderDots=No;
                                                   CaptionML=[ENU=Calculate;
                                                              ESP=Calcular] }
      { 4   ;CheckBox     ;3630 ;2200 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Lines;
                                                              ESP=L¡neas];
                                                   SourceExpr=CalcLines;
                                                   OnValidate=BEGIN
                                                                IF CalcLines THEN BEGIN
                                                                  CalcRoutings := TRUE;
                                                                  CalcComponents := TRUE;
                                                                END;
                                                              END;
                                                               }
      { 11  ;Label        ;220  ;2200 ;3300 ;440  ;ParentControl=4;
                                                   LeaderDots=Yes }
      { 12  ;Label        ;220  ;2750 ;3300 ;440  ;ParentControl=13;
                                                   LeaderDots=Yes }
      { 13  ;CheckBox     ;3630 ;2750 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Routings;
                                                              ESP=Rutas];
                                                   SourceExpr=CalcRoutings;
                                                   OnValidate=BEGIN
                                                                IF NOT CalcRoutings THEN
                                                                  IF CalcLines THEN
                                                                    ERROR(Text003);
                                                              END;
                                                               }
      { 14  ;Label        ;220  ;3300 ;3300 ;440  ;ParentControl=15;
                                                   LeaderDots=Yes }
      { 15  ;CheckBox     ;3630 ;3300 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Component Need;
                                                              ESP=Nec. componente];
                                                   SourceExpr=CalcComponents;
                                                   OnValidate=BEGIN
                                                                IF NOT CalcComponents THEN
                                                                  IF CalcLines THEN
                                                                    ERROR(Text004);
                                                              END;
                                                               }
      { 2   ;Label        ;0    ;3960 ;3300 ;440  ;LeaderDots=No;
                                                   CaptionML=[ENU=Warehouse;
                                                              ESP=Almac‚n] }
      { 17  ;Label        ;220  ;4510 ;3300 ;440  ;ParentControl=18;
                                                   LeaderDots=Yes }
      { 18  ;CheckBox     ;3630 ;4510 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Create Inbound Request;
                                                              ESP=Crear petici¢n de entrada];
                                                   SourceExpr=CreateInbRqst }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               CalcLines := TRUE;
               CalcRoutings := TRUE;
               CalcComponents := TRUE;
             END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 6   ;2   ;Field     ;
                  CaptionML=[ENU=Scheduling direction;
                             ESP=Direcci¢n programaci¢n];
                  OptionCaptionML=[ENU=Forward,Back;
                                   ESP=Adelante,Atr s];
                  SourceExpr=Direction }

      { 3   ;2   ;Group     ;
                  CaptionML=[ENU=Calculate;
                             ESP=Calcular] }

      { 4   ;3   ;Field     ;
                  CaptionML=[ENU=Lines;
                             ESP=L¡neas];
                  SourceExpr=CalcLines;
                  OnValidate=BEGIN
                               IF CalcLines THEN BEGIN
                                 CalcRoutings := TRUE;
                                 CalcComponents := TRUE;
                               END;
                             END;
                              }

      { 13  ;3   ;Field     ;
                  CaptionML=[ENU=Routings;
                             ESP=Rutas];
                  SourceExpr=CalcRoutings;
                  OnValidate=BEGIN
                               IF NOT CalcRoutings THEN
                                 IF CalcLines THEN
                                   ERROR(Text003);
                             END;
                              }

      { 15  ;3   ;Field     ;
                  CaptionML=[ENU=Component Need;
                             ESP=Nec. componente];
                  SourceExpr=CalcComponents;
                  OnValidate=BEGIN
                               IF NOT CalcComponents THEN
                                 IF CalcLines THEN
                                   ERROR(Text004);
                             END;
                              }

      { 2   ;2   ;Group     ;
                  CaptionML=[ENU=Warehouse;
                             ESP=Almac‚n] }

      { 18  ;3   ;Field     ;
                  CaptionML=[ENU=Create Inbound Request;
                             ESP=Crear petici¢n de entrada];
                  SourceExpr=CreateInbRqst }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Refreshing Production Orders...\\;ESP=Actualizando ¢rds. producci¢n...\\';
      Text001@1001 : TextConst 'ENU=Status         #1##########\;ESP=Estado         #1##########\';
      Text002@1002 : TextConst 'ENU=No.            #2##########;ESP=N§             #2##########';
      Text003@1003 : TextConst 'ENU=Routings must be calculated, when lines are calculated.;ESP=Cuando las l¡neas se calculan, se deben calcular las rutas.';
      Text004@1004 : TextConst 'ENU=Component Need must be calculated, when lines are calculated.;ESP=Necesidades de componentes deben calcularse cuando se cal. las l¡n.';
      CalcProdOrder@1005 : Codeunit 99000773;
      CreateProdOrderLines@1006 : Codeunit 99000787;
      WhseProdRelease@1007 : Codeunit 5774;
      WhseOutputProdRelease@1015 : Codeunit 7325;
      Window@1008 : Dialog;
      Direction@1009 : 'Forward,Backward';
      CalcLines@1010 : Boolean;
      CalcRoutings@1011 : Boolean;
      CalcComponents@1012 : Boolean;
      CreateInbRqst@1013 : Boolean;

    PROCEDURE CheckReservationExist@2();
    VAR
      ProdOrderLine2@1002 : Record 5406;
      ProdOrderComp2@1000 : Record 5407;
      ReservEntry@1003 : Record 337;
    BEGIN
      // Not allowed to refresh if reservations exist
      IF (NOT CalcLines) OR (NOT CalcComponents) THEN
        EXIT;
      ReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype","Source Batch Name");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);

      ProdOrderLine2.SETRANGE(Status,"Production Order".Status);
      ProdOrderLine2.SETRANGE("Prod. Order No.","Production Order"."No.");
      IF ProdOrderLine2.FIND('-') THEN
        REPEAT
          IF CalcLines THEN BEGIN
            ProdOrderLine2.CALCFIELDS("Reserved Qty. (Base)");
            IF ProdOrderLine2."Reserved Qty. (Base)" <> 0 THEN BEGIN
              ReservEntry.SETRANGE("Source ID",ProdOrderLine2."Prod. Order No.");
              ReservEntry.SETRANGE("Source Ref. No.",0);
              ReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
              ReservEntry.SETRANGE("Source Subtype",ProdOrderLine2.Status);
              ReservEntry.SETRANGE("Source Prod. Order Line",ProdOrderLine2."Line No.");
              IF ReservEntry.FIND('-') THEN BEGIN
                ReservEntry.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive);
                IF NOT ((ReservEntry."Source Type" = DATABASE::"Prod. Order Component") AND
                        (ReservEntry."Source ID" = ProdOrderLine2."Prod. Order No.") AND
                        (ReservEntry."Source Subtype" = ProdOrderLine2.Status))
                THEN
                  ProdOrderLine2.TESTFIELD("Reserved Qty. (Base)",0);
              END;
            END;
          END;

          IF CalcLines OR CalcComponents THEN BEGIN
            ProdOrderComp2.SETRANGE(Status,ProdOrderLine2.Status);
            ProdOrderComp2.SETRANGE("Prod. Order No.",ProdOrderLine2."Prod. Order No.");
            ProdOrderComp2.SETRANGE("Prod. Order Line No.",ProdOrderLine2."Line No.");
            IF ProdOrderComp2.FIND('-') THEN
              REPEAT
                ProdOrderComp2.CALCFIELDS("Reserved Qty. (Base)");
                IF ProdOrderComp2."Reserved Qty. (Base)" <> 0 THEN BEGIN
                  ReservEntry.SETRANGE("Source ID",ProdOrderComp2."Prod. Order No.");
                  ReservEntry.SETRANGE("Source Ref. No.",ProdOrderComp2."Line No.");
                  ReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
                  ReservEntry.SETRANGE("Source Subtype",ProdOrderComp2.Status);
                  ReservEntry.SETRANGE("Source Prod. Order Line",ProdOrderComp2."Prod. Order Line No.");
                  IF ReservEntry.FIND('-') THEN BEGIN
                    ReservEntry.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive);
                    IF NOT ((ReservEntry."Source Type" = DATABASE::"Prod. Order Line") AND
                            (ReservEntry."Source ID" = ProdOrderComp2."Prod. Order No.") AND
                            (ReservEntry."Source Subtype" = ProdOrderComp2.Status))
                    THEN
                      ProdOrderComp2.TESTFIELD("Reserved Qty. (Base)",0);
                  END;
                END;
              UNTIL ProdOrderComp2.NEXT = 0;
          END;
        UNTIL ProdOrderLine2.NEXT = 0;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
