OBJECT Report 6036 Create Contract Service Orders
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Contract Service Orders;
               ESP=Crear pedidos serv. contrato];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ServMgtSetup.GET;
                   IF ServMgtSetup."Last Contract Service Date" <> 0D THEN
                     StartDate := ServMgtSetup."Last Contract Service Date" + 1;
                 END;

    OnPostReport=BEGIN
                   IF CreateServOrders = CreateServOrders::"Create Service Order" THEN BEGIN
                     ServMgtSetup.GET;
                     ServMgtSetup."Last Contract Service Date" := EndDate;
                     ServMgtSetup.MODIFY;

                     IF NOT HideDialog THEN
                       IF ServOrderCreated > 1 THEN
                         MESSAGE(Text000,ServOrderCreated)
                       ELSE
                         MESSAGE(Text001,ServOrderCreated)
                   END;
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table5965;
        DataItemTableView=WHERE(Contract Type=CONST(Contract),
                                Change Status=CONST(Locked),
                                Status=CONST(Signed));
        OnPreDataItem=BEGIN
                        IF CreateServOrders = CreateServOrders::"Print Only" THEN BEGIN
                          CLEAR(ContrServOrdersTest);
                          ContrServOrdersTest.InitVariables(StartDate,EndDate);
                          ContrServOrdersTest.SETTABLEVIEW("Service Contract Header");
                          ContrServOrdersTest.RUNMODAL;
                          CurrReport.BREAK;
                        END;
                      END;

        ReqFilterFields=Contract No.;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table5964;
        DataItemTableView=SORTING(Contract Type,Contract No.,Line No.)
                          ORDER(Ascending)
                          WHERE(Service Period=FILTER(<>''));
        OnPreDataItem=BEGIN
                        IF EndDate = 0D THEN
                          ERROR(Text002);
                        IF EndDate < StartDate THEN
                          ERROR(Text003);

                        IF StartDate <> 0D THEN BEGIN
                          IF EndDate - StartDate + 1 > ServMgtSetup."Contract Serv. Ord.  Max. Days" THEN
                            ERROR(
                              Text004,
                              ServMgtSetup.TABLECAPTION);
                        END;

                        "Service Contract Line".SETRANGE("Next Planned Service Date",StartDate,EndDate);
                      END;

        OnAfterGetRecord=BEGIN
                           IF "Contract Expiration Date" <> 0D THEN BEGIN
                             IF "Contract Expiration Date" <= "Next Planned Service Date" THEN
                               CurrReport.SKIP;
                           END ELSE
                             IF ("Service Contract Header"."Expiration Date" <> 0D) AND
                                ("Service Contract Header"."Expiration Date" <= "Next Planned Service Date")
                             THEN
                               CurrReport.SKIP;

                           Cust.GET("Service Contract Header"."Bill-to Customer No.");
                           IF Cust.Blocked = Cust.Blocked::All THEN
                             CurrReport.SKIP;

                           ServHeader.SETCURRENTKEY("Contract No.",Status,"Posting Date");
                           ServHeader.SETRANGE("Document Type",ServHeader."Document Type"::Order);
                           ServHeader.SETRANGE("Contract No.","Service Contract Line"."Contract No.");
                           ServHeader.SETRANGE(Status,ServHeader.Status::Pending);

                           ServOrderExist := ServHeader.FIND('-');
                           IF ServOrderExist THEN BEGIN
                             ServItemLine.SETCURRENTKEY("Document Type","Document No.","Service Item No.");
                             ServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
                             ServItemLine.SETRANGE("Document No.",ServHeader."No.");
                             ServItemLine.SETRANGE("Contract No.","Service Contract Line"."Contract No.");
                             ServItemLine.SETRANGE("Contract Line No.","Service Contract Line"."Line No.");
                             IF ServItemLine.FIND('-') THEN
                               CurrReport.SKIP;
                           END;
                           CreateOrAddToServOrder;
                         END;

        DataItemLink=Contract Type=FIELD(Contract Type),
                     Contract No.=FIELD(Contract No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=6710;
      Height=2200;
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;550  ;1650 ;440  ;CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha final];
                                                   SourceExpr=EndDate;
                                                   OnValidate=BEGIN
                                                                IF EndDate < StartDate THEN
                                                                  ERROR(Text003);
                                                              END;
                                                               }
      { 4   ;Label        ;0    ;550  ;3300 ;440  ;ParentControl=1 }
      { 5   ;TextBox      ;3410 ;0    ;1650 ;440  ;CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial];
                                                   SourceExpr=StartDate }
      { 6   ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=5 }
      { 7   ;Label        ;0    ;1210 ;3300 ;440  ;CaptionML=[ENU=Action;
                                                              ESP=Acci¢n] }
      { 8   ;OptionButton ;3410 ;1210 ;3300 ;440  ;CaptionML=[ENU=Create Service Order;
                                                              ESP=Crear pedido servicio];
                                                   SourceExpr=CreateServOrders;
                                                   OptionValue=Create Service Order }
      { 9   ;OptionButton ;3410 ;1760 ;3300 ;440  ;CaptionML=[ENU=Print Only;
                                                              ESP=S¢lo imprimir];
                                                   SourceExpr=CreateServOrders;
                                                   OptionValue=Print Only }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 5   ;2   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             ESP=Fecha inicial];
                  SourceExpr=StartDate }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Ending Date;
                             ESP=Fecha final];
                  SourceExpr=EndDate;
                  OnValidate=BEGIN
                               IF EndDate < StartDate THEN
                                 ERROR(Text003);
                             END;
                              }

      { 8   ;2   ;Field     ;
                  CaptionML=[ENU=Action;
                             ESP=Acci¢n];
                  OptionCaptionML=[ENU=Create Service Order,Print Only;
                                   ESP=Crear pedido servicio,S¢lo imprimir];
                  SourceExpr=CreateServOrders }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 service orders were created.;ESP=Se han creado %1 pedidos servicio.';
      Text001@1001 : TextConst 'ENU=%1 service order was created.;ESP=Se ha creado %1 ped. servicio.';
      Text002@1002 : TextConst 'ENU=You must fill in the ending date field.;ESP=Debe rellenar el campo Fecha fin.';
      Text003@1003 : TextConst 'ENU=The starting date is after the ending date.;ESP=La fecha incio es posterior a la fecha fin.';
      Text004@1004 : TextConst 'ENU=The date range you have entered is a longer period than is allowed in the %1 table.;ESP=El rango de fechas introducido es un periodo mayor al permitido en la tabla %1.';
      ServMgtSetup@1006 : Record 5911;
      ServHeader@1007 : Record 5900;
      ServItemLine@1008 : Record 5901;
      Cust@1010 : Record 18;
      ServItem@1021 : Record 5940;
      RepairStatus@1022 : Record 5927;
      ContrServOrdersTest@1005 : Report 5988;
      ServContractMgt@1013 : Codeunit 5940;
      DimMgt@1017 : Codeunit 408;
      ServOrderCreated@1011 : Integer;
      RecordNo@1012 : Integer;
      StartDate@1014 : Date;
      EndDate@1015 : Date;
      CreateServOrders@1016 : 'Create Service Order,Print Only';
      ServOrderExist@1018 : Boolean;
      HideDialog@1023 : Boolean;

    PROCEDURE CreateOrAddToServOrder@2();
    BEGIN
      CLEAR(ServHeader);
      ServHeader.SETCURRENTKEY("Contract No.",Status,"Posting Date");
      ServHeader.SETRANGE("Document Type",ServHeader."Document Type"::Order);
      ServHeader.SETRANGE("Contract No.","Service Contract Header"."Contract No.");
      ServHeader.SETRANGE(Status,ServHeader.Status::Pending);
      IF NOT ServHeader.FIND('-') THEN BEGIN
        CLEAR(ServHeader);
        ServHeader.INIT;
        ServHeader."Document Type" := ServHeader."Document Type"::Order;
        ServHeader.INSERT(TRUE);
        ServHeader.SetHideValidationDialog(TRUE);
        ServHeader."Contract No." := "Service Contract Header"."Contract No.";
        ServHeader.VALIDATE("Order Date","Service Contract Line"."Next Planned Service Date");
        ServHeader.VALIDATE("Customer No.","Service Contract Header"."Customer No.");
        ServHeader.VALIDATE("Bill-to Customer No.","Service Contract Header"."Bill-to Customer No.");
        ServHeader."Default Response Time (Hours)" := "Service Contract Header"."Response Time (Hours)";
        ServHeader.VALIDATE("Ship-to Code","Service Contract Header"."Ship-to Code");
        ServHeader."Service Order Type" := "Service Contract Header"."Service Order Type";
        ServHeader.VALIDATE("Currency Code","Service Contract Header"."Currency Code");
        ServHeader."Salesperson Code" := "Service Contract Header"."Salesperson Code";
        ServHeader."Max. Labor Unit Price" := "Service Contract Header"."Max. Labor Unit Price";
        ServHeader."Your Reference" := "Service Contract Header"."Your Reference";
        ServHeader."Service Zone Code" := "Service Contract Header"."Service Zone Code";
        ServHeader."Shortcut Dimension 1 Code" := "Service Contract Header"."Shortcut Dimension 1 Code";
        ServHeader."Shortcut Dimension 2 Code" := "Service Contract Header"."Shortcut Dimension 2 Code";
        ServHeader.MODIFY(TRUE);

        DimMgt.DeleteDocDim(
          DATABASE::"Service Header",
          ServHeader."Document Type",
          ServHeader."No.",0);
        ServContractMgt.CopyContractDimToDocDim(
          "Service Contract Header",DATABASE::"Service Header",
          ServHeader."Document Type",
          ServHeader."No.",0);

        ServOrderCreated := ServOrderCreated + 1;
      END;

      RecordNo := 0;
      CLEAR(ServItemLine);
      ServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
      ServItemLine.SETRANGE("Document No.",ServHeader."No.");
      IF ServItemLine.FIND('+') THEN
        RecordNo := ServItemLine."Line No."
      ELSE
        RecordNo := 0;
      CLEAR(ServItemLine);
      ServItemLine.SETCURRENTKEY("Document Type","Document No.","Service Item No.");
      ServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
      ServItemLine.SETRANGE("Document No.",ServHeader."No.");
      ServItemLine.SETRANGE("Contract No.","Service Contract Line"."Contract No.");
      ServItemLine.SETRANGE("Contract Line No.","Service Contract Line"."Line No.");
      IF NOT ServItemLine.FIND('-') THEN BEGIN
        RecordNo := RecordNo + 10000;
        ServItemLine.INIT;
        ServItemLine.SetHideDialogBox(TRUE);
        ServItemLine."Document No." := ServHeader."No.";
        ServItemLine."Document Type" := ServHeader."Document Type";
        RepairStatus.RESET;
        RepairStatus.Initial := TRUE;
        ServItemLine."Repair Status Code" := RepairStatus.ReturnStatusCode(RepairStatus);
        ServItemLine."Line No." := RecordNo;
        IF "Service Contract Line"."Service Item No." <> '' THEN BEGIN
          ServItem.GET("Service Contract Line"."Service Item No.");
          ServItemLine.VALIDATE("Service Item No.",ServItem."No.");
          ServItemLine."Location of Service Item" := ServItem."Location of Service Item";
          ServItemLine.Priority := ServItem.Priority;
        END ELSE
          ServItemLine.Description := "Service Contract Line".Description;
        ServItemLine."Serial No." := "Service Contract Line"."Serial No.";
        ServItemLine."Item No." := "Service Contract Line"."Item No.";
        ServItemLine."Variant Code" := "Service Contract Line"."Variant Code";
        ServItemLine."Contract No." := "Service Contract Line"."Contract No.";
        ServItemLine."Contract Line No." := "Service Contract Line"."Line No.";
        ServItemLine.UpdateResponseTimeHours;
        ServItemLine.INSERT(TRUE);
      END;
    END;

    PROCEDURE SetHideDialog@3(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
