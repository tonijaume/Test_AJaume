OBJECT Report 10718 XML VAT Declaration
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVES6.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=XML VAT Declaration;
               ESP=Declaraci¢n IVA en XML];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  RBMgt@1100000 : Codeunit 419;
                BEGIN
                  IF ISSERVICETIER THEN
                    FileName := RBMgt.EnvironFileName('','xml');
                END;

    OnPostReport=BEGIN
                   TransferenceFormatXMLTemp.RESET;
                   TransferenceFormatXMLTemp.SETRANGE("VAT Statement Name",VATDeclarationName.Name);
                   TransferenceFormatXMLTemp.SETRANGE(Ask,TRUE);
                   IF TransferenceFormatXMLTemp.FIND('-') THEN BEGIN
                     FORM.RUNMODAL(10710,TransferenceFormatXMLTemp);
                     TransferenceFormatXMLTemp.MODIFY;
                     TransferenceFormatXMLTemp.SETRANGE(Ask);
                   END;

                   FileGeneration;

                   IF ISSERVICETIER THEN BEGIN
                     ToFile := "VAT Declaration Line"."Statement Name" + '.xml';
                     IF NOT DOWNLOAD(FileName,Text1100002,'',Text1100004,ToFile) THEN
                       EXIT;
                   END;
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table257;
        DataItemTableView=SORTING(Statement Template Name,Name);
        NewPagePerRecord=Yes;
        OnPreDataItem=BEGIN
                        SETRANGE("Statement Template Name","VAT Declaration Line"."Statement Template Name");
                        SETRANGE(Name,"VAT Declaration Line"."Statement Name");
                      END;

        OnAfterGetRecord=BEGIN
                           IF "Template Type" <> "Template Type"::"One Column Report" THEN
                            ERROR(Text1100000,VATDeclarationName.FIELDCAPTION("Template Type"),"Template Type"::"One Column Report");

                           CREATE(XMLDoc);
                           AppendProcessingInstruction(XMLDoc,'xml','version="1.0" encoding="ISO-8859-9"');
                         END;

      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table256;
        DataItemTableView=SORTING(Statement Template Name,Statement Name)
                          WHERE(Print=CONST(Yes));
        DataItemVarName=VAT Declaration Line;
        OnPreDataItem=BEGIN
                        TransferenceFormatXMLTemp.DELETEALL;
                        TransferenceFormatXML.SETRANGE("VAT Statement Name","VAT Statement Name".Name);
                        TransferenceFormatXML.FIND('-');
                        REPEAT
                          TransferenceFormatXMLTemp := TransferenceFormatXML;
                          TransferenceFormatXMLTemp.INSERT;
                        UNTIL TransferenceFormatXML.NEXT = 0;
                      END;

        OnAfterGetRecord=BEGIN
                           VATDeclarationName.SETRANGE(Name,"VAT Declaration Line"."Statement Name");
                           IF NOT VATDeclarationName.FIND('-') THEN
                             ERROR(Text1100001);

                           CalcTotLine("VAT Declaration Line",TotalAmount,0);
                           IF IntegerPrinted THEN
                             TotalAmount := ROUND(TotalAmount,1,'<');
                           IF "Print with" = "Print with"::"Opposite Sign" THEN
                             TotalAmount := -TotalAmount;

                           IF Box <> '' THEN BEGIN
                             TransferenceFormatXMLTemp.SETRANGE(Box,Box);
                             IF TransferenceFormatXMLTemp.FIND('-') THEN
                               REPEAT
                                 IF "VAT Declaration Line".Type = "VAT Declaration Line".Type::Description THEN
                                   EVALUATE(TotalAmount,"VAT Declaration Line".Description);
                                 LoadValue(TransferenceFormatXMLTemp,TotalAmount);
                                 TransferenceFormatXMLTemp.MODIFY;
                               UNTIL TransferenceFormatXMLTemp.NEXT = 0;
                           END;
                         END;

        ReqFilterFields=Date Filter;
        DataItemLink=Statement Template Name=FIELD(Statement Template Name),
                     Statement Name=FIELD(Name);
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=8910;
      Height=4290;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   RequestOptionsForm.FileNameControl.VISIBLE := NOT ISSERVICETIER;
                 END;

    }
    CONTROLS
    {
      { 1100000;OptionButton;3410;0   ;3850 ;440  ;CaptionML=[ENU=Open;
                                                              ESP=Abiertos];
                                                   SourceExpr=Selection;
                                                   OptionValue=Opened }
      { 1100001;Label     ;0    ;0    ;3300 ;440  ;ParentControl=1100000;
                                                   CaptionML=[ENU=VAT entries included;
                                                              ESP=Movs. IVA incluidos] }
      { 1100002;OptionButton;3410;550 ;3850 ;440  ;CaptionML=[ENU=Closed;
                                                              ESP=Cerrados];
                                                   SourceExpr=Selection;
                                                   OptionValue=Closed }
      { 1100003;OptionButton;3410;1100;3850 ;440  ;CaptionML=[ENU=Open and Closed;
                                                              ESP=Pendientes y cerrados];
                                                   SourceExpr=Selection;
                                                   OptionValue=Opened and Closed }
      { 1100004;OptionButton;3410;1760;3850 ;440  ;CaptionML=[ENU=Within Period;
                                                              ESP=Comprendidos en el periodo];
                                                   SourceExpr=PeriodSelected;
                                                   OptionValue=Within the period }
      { 1100005;Label     ;0    ;1760 ;3300 ;440  ;ParentControl=1100004;
                                                   CaptionML=[ENU=VAT entries included;
                                                              ESP=Movs. IVA incluidos] }
      { 1100006;OptionButton;3410;2310;3850 ;440  ;CaptionML=[ENU=Before and Within Period;
                                                              ESP=Anteriores y comprendidos en el periodo];
                                                   SourceExpr=PeriodSelected;
                                                   OptionValue=Previous and within the period }
      { 1100007;CheckBox  ;3410 ;2970 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Additional Currency;
                                                              ESP=Divisa adicional];
                                                   SourceExpr=PrintAmtInAddCurr }
      { 1100008;Label     ;0    ;2970 ;3300 ;440  ;ParentControl=1100007 }
      { 1100009;TextBox   ;3410 ;3630 ;3850 ;440  ;Name=FileNameControl;
                                                   CaptionML=[ENU=File Name;
                                                              ESP=Nombre archivo];
                                                   SourceExpr=FileName;
                                                   OnAssistEdit=VAR
                                                                  Action@1100003 : 'Open,Save';
                                                                  CommonDialogMgt@1100000 : Codeunit 412;
                                                                  DefaultFileType@1100002 : ' ,Text,Excel,Word,Custom';
                                                                BEGIN
                                                                  FileName := "VAT Declaration Line"."Statement Name" + '.xml';
                                                                  FileName := CommonDialogMgt.OpenFile(Text1100002,FileName,DefaultFileType::Custom,'*.xml|*.xml',Action::Open);
                                                                END;
                                                                 }
      { 1100010;Label     ;0    ;3630 ;3300 ;440  ;ParentControl=1100009 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               FileNameControlVisible := TRUE;
             END;

      OnOpenPage=BEGIN
                   FileNameControlVisible := NOT ISSERVICETIER;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1100000;2;Field     ;
                  CaptionML=[ENU=VAT entries included;
                             ESP=Movs. IVA incluidos];
                  OptionCaptionML=[ENU=Open,Closed,Open and Closed;
                                   ESP=Pendiente,Cerrado,Pendiente y cerrado];
                  SourceExpr=Selection }

      { 1100004;2;Field     ;
                  CaptionML=[ENU=VAT entries included;
                             ESP=Movs. IVA incluidos];
                  OptionCaptionML=[ENU=Before and Within Period,Within Period;
                                   ESP=Anteriores y comprendidos en el periodo,Comprendidos en el periodo];
                  SourceExpr=PeriodSelected }

      { 1100007;2;Field     ;
                  CaptionML=[ENU=Additional Currency;
                             ESP=Divisa adicional];
                  SourceExpr=PrintAmtInAddCurr }

      { 1100009;2;Field     ;
                  Name=FileNameControl;
                  CaptionML=[ENU=File Name;
                             ESP=Nombre archivo];
                  SourceExpr=FileName;
                  Visible=FileNameControlVisible;
                  OnAssistEdit=VAR
                                 Action@1100003 : 'Open,Save';
                                 CommonDialogMgt@1100000 : Codeunit 412;
                                 DefaultFileType@1100002 : ' ,Text,Excel,Word,Custom';
                               BEGIN
                                 FileName := "VAT Declaration Line"."Statement Name" + '.xml';
                                 FileName := CommonDialogMgt.OpenFile(Text1100002,FileName,DefaultFileType::Custom,'*.xml|*.xml',Action::Open);
                               END;
                                }

    }
  }
  CODE
  {
    VAR
      Text1100000@1100040 : TextConst 'ENU=VAT declaration must be %1 %2.;ESP=Declaraci¢n IVA debe ser %1 %2.';
      Text1100001@1100041 : TextConst 'ENU=The declaration does not exist;ESP=La declaraci¢n no existe';
      Text1100002@1100042 : TextConst 'ENU=Path XML VAT Declaration;ESP=Ruta acceso Declaraci¢n IVA XML';
      TransferenceFormatXML@1100010 : Record 10710;
      TransferenceFormatXMLTemp@1100011 : TEMPORARY Record 10710;
      GLAccount@1100012 : Record 15;
      VATEntry@1100013 : Record 254;
      VATPostSetup@1100014 : Record 325;
      VATDeclarationName@1100015 : Record 257;
      XMLDoc@1100017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      RowNo@1100018 : ARRAY [6] OF Code[10];
      Amount@1100019 : Decimal;
      Base@1100020 : Decimal;
      VATAmount@1100021 : Decimal;
      VATAmountAC@1100022 : Decimal;
      TotalAmount@1100023 : Decimal;
      TotalBase@1100024 : Decimal;
      TotalECAmount@1100025 : Decimal;
      TotalVATAmount@1100026 : Decimal;
      VATPercentage@1100027 : Decimal;
      ECPercentage@1100028 : Decimal;
      Selection@1100029 : 'Opened,Closed,Opened and Closed';
      PeriodSelected@1100030 : 'Previous and within the period,Within the period';
      FileName@1100033 : Text[250];
      TextError@1100034 : Text[80];
      ToFile@1100002 : Text[1024];
      i@1100035 : Integer;
      PrintAmtInAddCurr@1100036 : Boolean;
      IntegerPrinted@1100037 : Boolean;
      Text1100003@1100001 : TextConst 'ENU=Default;ESP=Genrico';
      Text1100004@1100000 : TextConst 'ENU=Xml Files (.xml)|*.xml|All Files|*.*'';ESP=Archivos Xml (.xml)|*.xml|Todos los archivos|*.*''';
      FileNameControlVisible@19024830 : Boolean INDATASET;

    PROCEDURE CalcTotLine@1100000(VATStatementLine2@1100000 : Record 256;VAR TotalAmount@1100001 : Decimal;Level@1100002 : Integer) : Boolean;
    BEGIN
      IF Level = 0 THEN
        TotalAmount := 0;
      CASE VATStatementLine2.Type OF
        VATStatementLine2.Type::"Account Totaling":
          BEGIN
            GLAccount.SETFILTER("No.",VATStatementLine2."Account Totaling");
            "VAT Declaration Line".COPYFILTER("Date Filter",GLAccount."Date Filter");
            Amount := 0;
            IF GLAccount.FIND('-') AND (VATStatementLine2."Account Totaling" <> '') THEN
              REPEAT
                GLAccount.CALCFIELDS("Net Change","Additional-Currency Net Change");
                Amount := ConditionalAdd(Amount,GLAccount."Net Change",GLAccount."Additional-Currency Net Change");
              UNTIL GLAccount.NEXT = 0;
            CalcTotAmount(VATStatementLine2,TotalAmount);
          END;
        VATStatementLine2.Type::"VAT Entry Totaling":
          BEGIN
            VATEntry.RESET;
            IF VATEntry.SETCURRENTKEY(
                 Type,Closed,"VAT Bus. Posting Group","VAT Prod. Posting Group","Posting Date")
            THEN BEGIN
              VATEntry.SETRANGE("VAT Bus. Posting Group",VATStatementLine2."VAT Bus. Posting Group");
              VATEntry.SETRANGE("VAT Prod. Posting Group",VATStatementLine2."VAT Prod. Posting Group");
            END ELSE BEGIN
              VATEntry.SETCURRENTKEY(
                Type,Closed,"Tax Jurisdiction Code","Use Tax","Posting Date");
              VATEntry.SETRANGE("Tax Jurisdiction Code",VATStatementLine2."Tax Jurisdiction Code");
              VATEntry.SETRANGE("Use Tax",VATStatementLine2."Use Tax");
            END;
            VATEntry.SETRANGE(Type,VATStatementLine2."Gen. Posting Type");
            IF "VAT Declaration Line".GETFILTER("Date Filter") <> '' THEN
              IF PeriodSelected = PeriodSelected::"Previous and within the period" THEN
                VATEntry.SETRANGE("Posting Date",0D,"VAT Declaration Line".GETRANGEMAX("Date Filter"))
              ELSE
                "VAT Declaration Line".COPYFILTER("Date Filter",VATEntry."Posting Date");
            CASE Selection OF
              Selection::Opened:
                VATEntry.SETRANGE(Closed,FALSE);
              Selection::Closed:
                VATEntry.SETRANGE(Closed,TRUE);
              ELSE
                VATEntry.SETRANGE(Closed);
            END;
            IF VATEntry.FIND('-') THEN;
            CASE VATStatementLine2."Amount Type" OF
              VATStatementLine2."Amount Type"::Amount:
                BEGIN
                  VATEntry.CALCSUMS(Amount,"Additional-Currency Amount");
                  IF VATPostSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group") THEN BEGIN
                    IF VATPostSetup."VAT+EC %" <> 0 THEN BEGIN
                      VATAmount := (VATEntry.Amount / VATPostSetup."VAT+EC %") * VATEntry."VAT %";
                      VATAmountAC := (VATEntry."Additional-Currency Amount" / VATPostSetup."VAT+EC %") * VATEntry."VAT %";
                    END;
                    Amount := ConditionalAdd(0,VATAmount,VATAmountAC);
                  END;
                END;
              VATStatementLine2."Amount Type"::Base:
                BEGIN
                  VATEntry.CALCSUMS(Base,"Additional-Currency Base");
                  Amount := ConditionalAdd(0,VATEntry.Base,VATEntry."Additional-Currency Base");
                END;
              VATStatementLine2."Amount Type"::"Unrealized Amount":
                BEGIN
                  VATEntry.CALCSUMS("Unrealized Amount","Add.-Currency Unrealized Amt.");
                  Amount := ConditionalAdd(0,VATEntry."Unrealized Amount",VATEntry."Add.-Currency Unrealized Amt.");
                END;
              VATStatementLine2."Amount Type"::"Unrealized Base":
                BEGIN
                  VATEntry.CALCSUMS("Unrealized Base","Add.-Currency Unrealized Base");
                  Amount := ConditionalAdd(0,VATEntry."Unrealized Base",VATEntry."Add.-Currency Unrealized Base");
                END;
              VATStatementLine2."Amount Type"::"Amount+Base":
                BEGIN
                  VATEntry.CALCSUMS(Amount,Base,"Additional-Currency Amount","Additional-Currency Base");
                  Amount := ConditionalAdd(0,VATEntry.Amount,VATEntry."Additional-Currency Amount");
                  Base := ConditionalAdd(0,VATEntry.Base,VATEntry."Additional-Currency Base");
                END;
            END;
            CalcTotAmount(VATStatementLine2,TotalAmount);
          END;
        VATStatementLine2.Type::"Row Totaling":
          BEGIN
            IF Level >= ARRAYLEN(RowNo) THEN
              EXIT(FALSE);
            Level := Level + 1;
            RowNo[Level] := VATStatementLine2."Row No.";

            IF VATStatementLine2."Row Totaling" = '' THEN
              EXIT(TRUE);
            VATStatementLine2.SETRANGE("Statement Template Name",VATStatementLine2."Statement Template Name");
            VATStatementLine2.SETRANGE("Statement Name",VATStatementLine2."Statement Name");
            VATStatementLine2.SETFILTER("Row No.",VATStatementLine2."Row Totaling");
            IF VATStatementLine2.FIND('-') THEN
              REPEAT
                IF NOT CalcTotLine(VATStatementLine2,TotalAmount,Level) THEN BEGIN
                  IF Level > 1 THEN
                    EXIT(FALSE);
                  FOR i := 1 TO ARRAYLEN(RowNo) DO
                    TextError := TextError + RowNo[i] + ' => ';
                  TextError := TextError + '...';
                  VATStatementLine2.FIELDERROR("Row No.",TextError);
                END;
              UNTIL VATStatementLine2.NEXT = 0;
          END;
        VATStatementLine2.Type::Description:
          ;
        VATStatementLine2.Type::"EC Entry Totaling":
          BEGIN
            VATEntry.RESET;
            IF VATEntry.SETCURRENTKEY(
                 Type,Closed,"VAT Bus. Posting Group","VAT Prod. Posting Group","Posting Date")
            THEN BEGIN
              VATEntry.SETRANGE("VAT Bus. Posting Group",VATStatementLine2."VAT Bus. Posting Group");
              VATEntry.SETRANGE("VAT Prod. Posting Group",VATStatementLine2."VAT Prod. Posting Group");
            END ELSE BEGIN
              VATEntry.SETCURRENTKEY(
                Type,Closed,"Tax Jurisdiction Code","Use Tax","Posting Date");
              VATEntry.SETRANGE("Tax Jurisdiction Code",VATStatementLine2."Tax Jurisdiction Code");
              VATEntry.SETRANGE("Use Tax",VATStatementLine2."Use Tax");
            END;
            VATEntry.SETRANGE(Type,VATStatementLine2."Gen. Posting Type");
            IF "VAT Declaration Line".GETFILTER("Date Filter") <> '' THEN
              IF PeriodSelected = PeriodSelected::"Previous and within the period" THEN
                VATEntry.SETRANGE("Posting Date",0D,"VAT Declaration Line".GETRANGEMAX("Date Filter"))
              ELSE
                "VAT Declaration Line".COPYFILTER("Date Filter",VATEntry."Posting Date");
            CASE Selection OF
              Selection::Opened:
                VATEntry.SETRANGE(Closed,FALSE);
              Selection::Closed:
                VATEntry.SETRANGE(Closed,TRUE);
              ELSE
                VATEntry.SETRANGE(Closed);
            END;
            IF VATEntry.FIND('-') THEN;
            CASE VATStatementLine2."Amount Type" OF
              VATStatementLine2."Amount Type"::Amount:
                BEGIN
                  VATEntry.CALCSUMS(Amount,"Additional-Currency Amount");
                  IF VATPostSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group") THEN BEGIN
                    IF VATPostSetup."VAT+EC %" <> 0 THEN BEGIN
                      VATAmount := (VATEntry.Amount / VATPostSetup."VAT+EC %") * VATEntry."EC %";
                      VATAmountAC := (VATEntry."Additional-Currency Amount" / VATPostSetup."VAT+EC %") * VATEntry."EC %";
                    END;
                    Amount := ConditionalAdd(0,VATAmount,VATAmountAC);
                  END;
                END;
              VATStatementLine2."Amount Type"::Base:
                BEGIN
                  VATEntry.CALCSUMS(Base,"Additional-Currency Base");
                  Amount := ConditionalAdd(0,VATEntry.Base,VATEntry."Additional-Currency Base");
                END;
              VATStatementLine2."Amount Type"::"Unrealized Amount":
                BEGIN
                  VATEntry.CALCSUMS("Unrealized Amount","Add.-Currency Unrealized Amt.");
                  Amount := ConditionalAdd(0,VATEntry."Unrealized Amount",VATEntry."Add.-Currency Unrealized Amt.");
                END;
              VATStatementLine2."Amount Type"::"Unrealized Base":
                BEGIN
                  VATEntry.CALCSUMS("Unrealized Base","Add.-Currency Unrealized Base");
                  Amount := ConditionalAdd(0,VATEntry."Unrealized Base",VATEntry."Add.-Currency Unrealized Base");
                END;
              VATStatementLine2."Amount Type"::"Amount+Base":
                BEGIN
                 VATEntry.CALCSUMS(Amount,Base,"Additional-Currency Amount","Additional-Currency Base");
                 Amount := ConditionalAdd(0,VATEntry.Amount,VATEntry."Additional-Currency Amount");
                 Base := ConditionalAdd(0,VATEntry.Base,VATEntry."Additional-Currency Base");
               END;
            END;
            CalcTotAmount(VATStatementLine2,TotalAmount);
          END;

      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CalcTotAmount@1100001(VATStatementLine2@1100000 : Record 256;VAR TotalAmount@1100001 : Decimal);
    BEGIN
      IF VATStatementLine2."Calculate with" = 1 THEN BEGIN
        Amount := -Amount;
        Base := -Base;
      END;
      TotalAmount := TotalAmount + Amount;
      TotalBase := TotalBase + Base;

      VATPostSetup.GET(VATStatementLine2."VAT Bus. Posting Group",VATStatementLine2."VAT Prod. Posting Group");
      VATPercentage := VATPostSetup."VAT %";
      ECPercentage := VATPostSetup."EC %";
      VATAmount := Amount;
      IF VATPostSetup."VAT+EC %" <> 0 THEN
        VATAmount := VATAmount / VATPostSetup."VAT+EC %" * VATPercentage;
      TotalVATAmount := TotalVATAmount + VATAmount;
      TotalECAmount := TotalAmount - TotalVATAmount;
    END;

    PROCEDURE InitializeSettings@1100002(VAR NewVATDeclName@1100000 : Record 257;VAR NewVATDDeclLineName@1100001 : Record 256;NewSelection@1100002 : 'Opened,Closed,Opened and Closed ';NewPeriodSelection@1100003 : 'Previous and within the period,Within the period ';NewPrintedInteger@1100004 : Boolean);
    BEGIN
      "VAT Statement Name".COPY(NewVATDeclName);
      "VAT Declaration Line".COPY(NewVATDDeclLineName);
      Selection := NewSelection;
      PeriodSelected := NewPeriodSelection;
      IntegerPrinted := NewPrintedInteger;
    END;

    PROCEDURE ConditionalAdd@1100003(Amount@1100000 : Decimal;AmtInAddCurr@1100001 : Decimal;SumAmtInAddCurr@1100002 : Decimal) : Decimal;
    BEGIN
      IF PrintAmtInAddCurr THEN
        EXIT(Amount + SumAmtInAddCurr)
      ELSE
        EXIT(Amount + AmtInAddCurr);
    END;

    PROCEDURE LoadValue@1100004(VAR TransFormatXML@1100000 : Record 10710;VAR Amt@1100001 : Decimal);
    BEGIN
      IF Amt < 0 THEN
        Amt := -Amt;

      CASE TransFormatXML."Value Type" OF
        TransFormatXML."Value Type"::"Integer and Decimal Part" :
          TransFormatXML.Value := CONVERTSTR(DELCHR(FORMAT(Amt,0,'<Precision,2><Integer><Decimal>'),'=','.'),',','.');
        TransFormatXML."Value Type"::"Integer Part" :
          TransFormatXML.Value := FORMAT(Amt,0,'<Integer>');
        TransFormatXML."Value Type"::"Decimal Part" :
          TransFormatXML.Value := '0' + CONVERTSTR(FORMAT(Amt,0,'<Precision,2><Decimal>'),',','.');
      END;
      TransFormatXML.MODIFY;
    END;

    PROCEDURE FileGeneration@1100005();
    BEGIN
      IF TransferenceFormatXML.FIND('-') THEN BEGIN
        TransferenceFormatXML.TESTFIELD("Line Type",TransferenceFormatXML."Line Type"::Element);
        AppendVATDeclarationLine(XMLDoc,TransferenceFormatXML);
      END;

      XMLDoc.save(FileName);
    END;

    PROCEDURE CurrentAsign@1100006(VATStatementLine@1100000 : Record 256);
    BEGIN
      "VAT Declaration Line" := VATStatementLine;
    END;

    PROCEDURE AppendProcessingInstruction@1100007(Parent@1100000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";Target@1100001 : Text[80];Data@1100002 : Text[250]);
    VAR
      ProcessingInstruction@1100003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF89-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMProcessingInstruction";
    BEGIN
      ProcessingInstruction := XMLDoc.createProcessingInstruction(Target,Data);
      Parent.appendChild(ProcessingInstruction);
    END;

    PROCEDURE AppendVATDeclarationLine@1100008(Parent@1100000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";AEATTransferenceFormatXML@1100001 : Record 10710);
    VAR
      NewNode@1100002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      TransferenceFormatXMLTemp.GET(AEATTransferenceFormatXML."VAT Statement Name",AEATTransferenceFormatXML."No.");
      IF NOT TransferenceFormatXMLTemp."Exists Amount" OR (TransferenceFormatXMLTemp."Exists Amount" AND
        ((TransferenceFormatXMLTemp.Value <> '') OR (TransferenceFormatXMLTemp.Box <> ''))) THEN
        CASE AEATTransferenceFormatXML."Line Type" OF
          AEATTransferenceFormatXML."Line Type"::Element:
            BEGIN
              AppendElement(Parent, TransferenceFormatXMLTemp.Description, TransferenceFormatXMLTemp.Value, NewNode);

              AEATTransferenceFormatXML.RESET;
              AEATTransferenceFormatXML.SETCURRENTKEY("VAT Statement Name","Parent Line No.");
              AEATTransferenceFormatXML.SETRANGE("VAT Statement Name", AEATTransferenceFormatXML."VAT Statement Name");
              AEATTransferenceFormatXML.SETRANGE("Parent Line No.", AEATTransferenceFormatXML."No.");

              IF AEATTransferenceFormatXML.FIND('-') THEN
                REPEAT
                  AppendVATDeclarationLine(NewNode,AEATTransferenceFormatXML);
                UNTIL AEATTransferenceFormatXML.NEXT = 0;
            END;
          AEATTransferenceFormatXML."Line Type"::Attribute:
            BEGIN
              AppendAttribute(Parent,AEATTransferenceFormatXML.Description,AEATTransferenceFormatXML.Value);
            END;
        END;
    END;

    PROCEDURE AppendElement@1100009(Parent@1100000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";Name@1100001 : Text[80];Value@1100002 : Text[250];VAR Element@1100003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMElement");
    BEGIN
      Element := XMLDoc.createElement(Name);
      IF Value <> '' THEN
        Element.text := Value;
      Parent.appendChild(Element);
    END;

    PROCEDURE AppendAttribute@1100010(Parent@1100000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMElement";Name@1100001 : Text[80];Value@1100002 : Text[250]);
    BEGIN
      Parent.setAttribute(Name,Value);
    END;

    EVENT XMLDoc@1100017::ondataavailable@198();
    BEGIN
    END;

    EVENT XMLDoc@1100017::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
