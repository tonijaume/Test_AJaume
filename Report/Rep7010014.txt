OBJECT Report 7010014 Prevision Coste Maleteros
{
  OBJECT-PROPERTIES
  {
    Date=05/03/13;
    Time=16:32:16;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Porters Cost Forecast;
               ESP=Prevision Coste Maleteros];
    OnInitReport=BEGIN
                   rEmpresa.FINDFIRST;

                   rParA.FINDFIRST;

                   rParPer.FINDFIRST;
                   rParPer.TESTFIELD("Codigo Adulto");
                   rParPer.TESTFIELD("Codigo Ni¤o");
                   rParPer.TESTFIELD("Codigo Infant");
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table7009900;
        DataItemTableView=SORTING(Codigo);
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        IF (wFechaDesde = 0D) OR (wFechaHasta = 0D) THEN
                          ERROR(Text007);
                      END;

        ReqFilterFields=Codigo;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            PrintOnEveryPage=Yes;
            SectionWidth=18150;
            SectionHeight=846;
          }
          CONTROLS
          {
            { 1100253000;TextBox;0    ;0    ;5400 ;423  ;FontSize=8;
                                                         FontBold=Yes;
                                                         SourceExpr=rEmpresa.Name }
            { 1100253001;Shape  ;0    ;423  ;18150;423  ;ShapeStyle=HorzLine }
            { 1100253002;Label  ;11400;0    ;6750 ;423  ;HorzAlign=Right;
                                                         FontSize=8;
                                                         FontBold=Yes;
                                                         CaptionML=[ENU=Porters Cost Forecast;
                                                                    ESP=Prevision Coste Maleteros] }
          }
           }
        { PROPERTIES
          {
            SectionType=Header;
            PrintOnEveryPage=Yes;
            SectionWidth=18150;
            SectionHeight=846;
          }
          CONTROLS
          {
            { 1100253007;TextBox;0    ;423  ;18150;423  ;SourceExpr=GETFILTERS }
            { 1100253009;TextBox;0    ;0    ;5400 ;423  ;SourceExpr=STRSUBSTNO('%1..%2', wFechaDesde, wFechaHasta) }
          }
           }
        { PROPERTIES
          {
            SectionType=Header;
            PrintOnEveryPage=Yes;
            SectionWidth=18150;
            SectionHeight=1269;
          }
          CONTROLS
          {
            { 1100253016;Label  ;0    ;0    ;1200 ;846  ;ParentControl=1100253015;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100253018;Label  ;1350 ;0    ;1200 ;846  ;ParentControl=1100253017;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100253022;Label  ;4500 ;0    ;3750 ;846  ;ParentControl=1100253021;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100253024;Label  ;8400 ;0    ;3450 ;846  ;ParentControl=1100253023;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100253026;Label  ;12000;0    ;1800 ;846  ;ParentControl=1100253025;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100253027;Shape  ;0    ;846  ;18150;423  ;ShapeStyle=HorzLine }
            { 1100253010;Label  ;13950;0    ;1200 ;846  ;ParentControl=1100253008;
                                                         HorzAlign=Center;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes;
                                                         CaptionML=[ENU=Adults;
                                                                    ESP=Adultos] }
            { 1100253019;Label  ;15300;0    ;1200 ;846  ;ParentControl=1100253014;
                                                         HorzAlign=Center;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes;
                                                         CaptionML=[ENU=Childs;
                                                                    ESP=Ni¤os] }
            { 1100253029;Label  ;16650;0    ;1500 ;846  ;ParentControl=1100253028;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100217001;Label  ;2700 ;0    ;1650 ;846  ;ParentControl=1100217000;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18150;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100253011;TextBox;0    ;0    ;1800 ;423  ;HorzAlign=Left;
                                                         FontSize=8;
                                                         FontBold=Yes;
                                                         SourceExpr=Codigo }
            { 1100253013;TextBox;1950 ;0    ;8400 ;423  ;HorzAlign=Left;
                                                         FontSize=8;
                                                         FontBold=Yes;
                                                         SourceExpr=Nombre }
          }
           }
        { PROPERTIES
          {
            SectionType=Footer;
            PrintOnEveryPage=Yes;
            PlaceInBottom=Yes;
            SectionWidth=18150;
            SectionHeight=846;
          }
          CONTROLS
          {
            { 1100253003;TextBox;5400 ;423  ;7200 ;423  ;HorzAlign=Center;
                                                         SourceExpr=FORMAT(TODAY,0,4) + ' / ' + FORMAT(TIME,0,0) + ' / ' + USERID }
            { 1100253004;Shape  ;0    ;0    ;18150;423  ;ShapeStyle=HorzLine }
            { 1100253005;TextBox;0    ;423  ;3600 ;423  ;HorzAlign=Left;
                                                         SourceExpr=Text006 + FORMAT(CurrReport.PAGENO) }
            { 1100253006;TextBox;14550;423  ;3600 ;423  ;HorzAlign=Right;
                                                         SourceExpr=fNoms.nom_delegacion(rParA.Delegacion) }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table7009903;
        DataItemTableView=SORTING(Fecha Agrupacion,Cod. Maletero);
        OnPreDataItem=BEGIN
                        CurrReport.CREATETOTALS(wAdultos,wNi¤os,wImporte);

                        SETFILTER("Fecha Agrupacion", '%1..%2', wFechaDesde, wFechaHasta);
                      END;

        DataItemLink=Cod. Maletero=FIELD(Codigo);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Footer;
            SectionWidth=18150;
            SectionHeight=846;
          }
          CONTROLS
          {
            { 1100253031;TextBox;13950;0    ;1200 ;423  ;HorzAlign=Center;
                                                         FontBold=Yes;
                                                         DecimalPlaces=0:2;
                                                         SourceExpr=wAdultos[1] }
            { 1100253036;TextBox;15300;0    ;1200 ;423  ;HorzAlign=Center;
                                                         FontBold=Yes;
                                                         DecimalPlaces=0:2;
                                                         SourceExpr=wNi¤os[1] }
            { 1100253038;TextBox;16650;0    ;1500 ;423  ;HorzAlign=Right;
                                                         FontBold=Yes;
                                                         CaptionML=ESP=Importe;
                                                         SourceExpr=wImporte }
            { 1100253040;Label  ;11400;0    ;2400 ;423  ;HorzAlign=Right;
                                                         FontBold=Yes;
                                                         CaptionML=ESP=Total: }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table7009796;
        DataItemTableView=SORTING(N§ Agrupacion)
                          WHERE(Estado=CONST(Confirmado));
        OnAfterGetRecord=VAR
                           lrResTrn@1100253000 : Record 7009744;
                           lrTarf@1100253001 : Record 7009901;
                           lrPrec@1100253002 : Record 7009902;
                           lwEnc@1100253004 : Boolean;
                           lwPax@1100253005 : Decimal;
                         BEGIN

                           // wAdultos y wNi¤os tienen dos dimensiones: La primera corresponde a los transportados y la segunda a los aplicados/facturados
                           CLEAR(wAdultos);
                           CLEAR(wNi¤os);
                           CLEAR(wImporte);
                           CLEAR(lwPax);

                           // Buscamos las tarifa
                           CLEAR(lrTarf);
                           lrTarf.SETRANGE("Tipo Tarifa", lrTarf."Tipo Tarifa"::Maletero);
                           lrTarf.SETFILTER("Fecha Inicial", '<=%1', Agrupacion.Fecha);
                           lrTarf.SETFILTER("Fecha Final"  , '>=%1', Agrupacion.Fecha);
                           lwEnc := lrTarf.FINDFIRST;

                           // Buscamos el precio en la tarifa
                           IF lwEnc THEN BEGIN
                             lrPrec.BuscaPrecio(lrTarf.ID, Agrupacion, _ZonaMasAlejada(Agrupacion), "Maletero Traslados".Codigo, lrPrec);

                             //Agrupacion.CALCFIELDS("Personas entrada", "Personas salida");
                             //lwPax := "Personas entrada" + "Personas salida";

                             //CLEAR(lrPrec);
                             //lrPrec.SETRANGE ("ID Tarifa"    , lrTarf.ID);
                             //lrPrec.SETRANGE ("Tipo Servicio", "Tipo precio coste");
                             //lrPrec.SETFILTER("Rango desde"  , '<=%1', lwPax);
                             //lrPrec.SETFILTER("Rango Hasta"  , '>=%1', lwPax);
                             //lrPrec.SETRANGE (Zona           , _ZonaMasAlejada(Agrupacion)); //+$001
                             //lrPrec.SETRANGE (Aeropuerto     , "Origen/Destino transfer"); //+$003
                             //lwEnc := lrPrec.FINDFIRST;
                             //IF NOT lwEnc THEN BEGIN
                             //  lrPrec.SETRANGE("Rango Hasta", 0);
                             //  lwEnc := lrPrec.FINDFIRST;
                             //END;
                           END;

                           CLEAR(lrResTrn);
                           lrResTrn.SETCURRENTKEY(Delegacion, "Agrupacion entrada", "Agrupacion salida", Bono);
                           CASE Agrupacion."Tipo transfer" OF
                             Agrupacion."Tipo transfer"::Entrada: lrResTrn.SETRANGE("Agrupacion entrada", "N§ Agrupacion");
                             Agrupacion."Tipo transfer"::Salida : lrResTrn.SETRANGE("Agrupacion salida" , "N§ Agrupacion");
                           END;
                           IF lrResTrn.FINDSET THEN BEGIN
                             REPEAT
                               CASE lrResTrn."Tipo Persona" OF
                                 rParPer."Codigo Adulto" :
                                 BEGIN
                                   wAdultos[1] += 1;
                                   IF lwEnc THEN
                                     wAdultos[2] += 1;
                                 END;

                                 rParPer."Codigo Ni¤o" :
                                 BEGIN
                                   wNi¤os[1] += 1;

                                   IF lwEnc THEN BEGIN
                                     IF (lrTarf."Limite Edad Ni¤os" <> 0) THEN BEGIN
                                       lrResTrn.TESTFIELD(Edad);
                                       IF lrResTrn.Edad > lrTarf."Limite Edad Ni¤os" THEN
                                         wAdultos[2] += 1
                                       ELSE
                                         wNi¤os[2] += 1;
                                     END
                                     ELSE
                                       wNi¤os[2] += 1;
                                   END;
                                 END;
                               END;
                             UNTIL lrResTrn.NEXT = 0;
                           END;

                           IF lrTarf."Tipo aplicacion" = lrTarf."Tipo aplicacion"::Pax THEN
                             wImporte := (wAdultos[2] * lrPrec."Precio Adultos") + (wNi¤os[2] * lrPrec."Precio Ni¤os")
                           ELSE
                             wImporte := lrPrec."Precio Servicio";
                         END;

        DataItemLink=N§ Agrupacion=FIELD(Num Agrupacion);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18150;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100253015;TextBox;0    ;0    ;1200 ;423  ;SourceExpr=Fecha }
            { 1100253017;TextBox;1350 ;0    ;1200 ;423  ;SourceExpr="Tipo transfer" }
            { 1100253023;TextBox;8400 ;0    ;3450 ;423  ;SourceExpr=Vuelos }
            { 1100253025;TextBox;12000;0    ;1800 ;423  ;SourceExpr=Transportista }
            { 1100253021;TextBox;4500 ;0    ;3750 ;423  ;SourceExpr=Zonas }
            { 1100253008;TextBox;13950;0    ;1200 ;423  ;HorzAlign=Center;
                                                         DecimalPlaces=0:2;
                                                         SourceExpr=wAdultos[1] }
            { 1100253014;TextBox;15300;0    ;1200 ;423  ;HorzAlign=Center;
                                                         DecimalPlaces=0:2;
                                                         SourceExpr=wNi¤os[1] }
            { 1100253028;TextBox;16650;0    ;1500 ;423  ;HorzAlign=Right;
                                                         CaptionML=ESP=Importe;
                                                         SourceExpr=wImporte }
            { 1100217000;TextBox;2700 ;0    ;1650 ;423  ;SourceExpr="Tipo servicio transportista" }
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=3410;
    }
    CONTROLS
    {
      { 1100253000;TextBox;3630 ;220  ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=From Date;
                                                              ESP=Fecha Desde];
                                                   SourceExpr=wFechaDesde;
                                                   OnValidate=BEGIN
                                                                ControlFechas;
                                                                IF DATE2DMY(wFechaDesde,1) = 1 THEN BEGIN
                                                                  wFechaHasta := CALCDATE('+<1M>-<1D>',wFechaDesde);
                                                                END;
                                                              END;
                                                               }
      { 1100253001;Label  ;220  ;220  ;3300 ;440  ;ParentControl=1100253000 }
      { 1100253002;TextBox;3630 ;880  ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=To Date;
                                                              ESP=Fecha Hasta];
                                                   SourceExpr=wFechaHasta;
                                                   OnValidate=BEGIN
                                                                ControlFechas;
                                                              END;
                                                               }
      { 1100253003;Label  ;220  ;880  ;3300 ;440  ;ParentControl=1100253002 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      wFechaDesde@1100253000 : Date;
      wFechaHasta@1100253001 : Date;
      Text001@1100253002 : TextConst 'ENU=From Date Can not be later than  To Date;ESP=Fecha Desde No puede ser posterior a Fecha Hasta';
      rEmpresa@1100253003 : Record 79;
      rParA@1100253006 : Record 7009700;
      rParPer@1100253010 : Record 7009701;
      fNoms@1100253004 : Codeunit 7009702;
      Text006@1100253005 : TextConst 'ENU=Page;ESP="P gina  "';
      wAdultos@1100253007 : ARRAY [2] OF Decimal;
      wNi¤os@1100253008 : ARRAY [2] OF Decimal;
      wImporte@1100253009 : Decimal;
      Text007@1100253011 : TextConst 'ENU=Must Set a Range of Dates;ESP=Debe de definir un rango de fechas';

    PROCEDURE ControlFechas@1100253001();
    BEGIN

      // ControlFechas
      IF (wFechaDesde > wFechaHasta) AND (wFechaHasta <> 0D) THEN
        ERROR(Text001);
    END;

    LOCAL PROCEDURE _ZonaMasAlejada@1100217000(prAgrup@1100217000 : Record 7009796) : Code[10];
    VAR
      lrZonaAgr@1100217001 : Record 7009799;
    BEGIN
      // _ZonaMasAlejada

      lrZonaAgr.RESET;
      lrZonaAgr.SETCURRENTKEY("Orden zona");
      lrZonaAgr.SETRANGE("N§ Agrupacion", prAgrup."N§ Agrupacion");
      lrZonaAgr.SETRANGE("Tipo zona"    , lrZonaAgr."Tipo zona"::Servicio);
      IF prAgrup."Tipo transfer" = prAgrup."Tipo transfer"::Entrada THEN
      BEGIN
        IF lrZonaAgr.FINDLAST THEN
          EXIT(lrZonaAgr.Zona);
      END
      ELSE
      BEGIN
        IF lrZonaAgr.FINDFIRST THEN
          EXIT(lrZonaAgr.Zona);
      END;
    END;

    BEGIN
    {
      $001 AJS 10092012 Buscar la zona mas alejada de la agrupacion para utilizar al buscar los precios

      $002 AJS 08102012 Trabajar con el campo Tipo precio coste en lugar de Tipo precio ingreso

      $003 AJS 25022013 Trabajar con el campo Aeropuerto para los precios

      $004 AJS 26022013 Paso la funcion de buscar precio a la tabla de precios

      $005 AJS 05032013 Modifico la funcion _ZonaMasAlejada para que siempre lo haga en orden de entrada
    }
    END.
  }
  RDLDATA
  {
  }
}
