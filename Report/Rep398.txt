OBJECT Report 398 Date Compress Vendor Ledger
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd,
                TableData 25=rimd,
                TableData 45=rimd,
                TableData 87=rimd,
                TableData 355=imd,
                TableData 380=rimd;
    CaptionML=[ENU=Date Compress Vendor Ledger;
               ESP=Comprimir fechas movs. prov.];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(
                    3,REPORT::"Date Compress Vendor Ledger",'',RetainDimText,Text010);
                  VendLedgEntryFilter := COPYSTR("Vendor Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table25;
        DataItemTableView=SORTING(Vendor No.,Posting Date)
                          WHERE(Open=CONST(No));
        OnPreDataItem=VAR
                        GLSetup@1000 : Record 98;
                      BEGIN
                        IF NOT
                           CONFIRM(
                             Text000 +
                             Text001 +
                             Text002,FALSE)
                        THEN
                          CurrReport.BREAK;

                        IF EntrdDateComprReg."Ending Date" = 0D THEN
                          ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                        Window.OPEN(
                          Text004 +
                          Text005 +
                          Text006 +
                          Text007 +
                          Text008);

                        SourceCodeSetup.GET;
                        SourceCodeSetup.TESTFIELD("Compress Vend. Ledger");

                        SelectedDim.GetSelectedDim(
                          USERID,3,REPORT::"Date Compress Vendor Ledger",'',TempSelectedDim);
                        GLSetup.GET;
                        Retain[4] :=
                          TempSelectedDim.GET(
                            USERID,3,REPORT::"Date Compress Vendor Ledger",'',GLSetup."Global Dimension 1 Code");
                        Retain[5] :=
                          TempSelectedDim.GET(
                            USERID,3,REPORT::"Date Compress Vendor Ledger",'',GLSetup."Global Dimension 2 Code");

                        GLentry.LOCKTABLE;
                        NewDtldVendLedgEntry.LOCKTABLE;
                        NewVendLedgEntry.LOCKTABLE;
                        GLReg.LOCKTABLE;
                        DateComprReg.LOCKTABLE;

                        IF GLentry.FIND('+') THEN;
                        LastEntryNo := GLentry."Entry No.";
                        NextTransactionNo := GLentry."Transaction No." + 1;
                        IF NewDtldVendLedgEntry.FIND('+') THEN;
                        LastDtldEntryNo := NewDtldVendLedgEntry."Entry No.";
                        SETRANGE("Entry No.",0,LastEntryNo);
                        SETRANGE("Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                        InitRegisters;
                      END;

        OnAfterGetRecord=BEGIN
                           VendLedgEntry2 := "Vendor Ledger Entry";
                           WITH VendLedgEntry2 DO BEGIN
                             IF NOT CompressDetails("Vendor Ledger Entry") THEN
                               CurrReport.SKIP;
                             SETCURRENTKEY("Vendor No.","Posting Date");
                             COPYFILTERS("Vendor Ledger Entry");
                             SETRANGE("Vendor No.","Vendor No.");
                             SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,TRUE));
                             SETRANGE("Vendor Posting Group","Vendor Posting Group");
                             SETRANGE("Currency Code","Currency Code");
                             SETRANGE("Document Type","Document Type");

                             IF RetainNo(FIELDNO("Document No.")) THEN
                               SETRANGE("Document No.","Document No.");
                             IF RetainNo(FIELDNO("Buy-from Vendor No.")) THEN
                               SETRANGE("Buy-from Vendor No.","Buy-from Vendor No.");
                             IF RetainNo(FIELDNO("Purchaser Code")) THEN
                               SETRANGE("Purchaser Code","Purchaser Code");
                             IF RetainNo(FIELDNO("Global Dimension 1 Code")) THEN
                               SETRANGE("Global Dimension 1 Code","Global Dimension 1 Code");
                             IF RetainNo(FIELDNO("Global Dimension 2 Code")) THEN
                               SETRANGE("Global Dimension 2 Code","Global Dimension 2 Code");

                             CALCFIELDS(Amount);
                             IF Amount >= 0 THEN
                               SummarizePositive := TRUE
                             ELSE
                               SummarizePositive := FALSE;

                             InitNewEntry(NewVendLedgEntry);

                             DimBufMgt.CollectDimEntryNo(
                               TempSelectedDim,DATABASE::"Vendor Ledger Entry","Entry No.",
                               0,FALSE,DimEntryNo);
                               ComprDimEntryNo := DimEntryNo;
                               SummarizeEntry(NewVendLedgEntry,VendLedgEntry2);
                             WHILE NEXT <> 0 DO BEGIN
                               CALCFIELDS(Amount);
                               IF ((Amount >= 0) AND SummarizePositive) OR
                                  ((Amount < 0) AND (NOT SummarizePositive))
                               THEN
                                 IF CompressDetails(VendLedgEntry2) THEN BEGIN
                                   DimBufMgt.CollectDimEntryNo(
                                     TempSelectedDim,DATABASE::"Vendor Ledger Entry","Entry No.",
                                     ComprDimEntryNo,TRUE,DimEntryNo);
                                   IF DimEntryNo = ComprDimEntryNo THEN
                                     SummarizeEntry(NewVendLedgEntry,VendLedgEntry2);
                                 END;
                               END;

                               InsertNewEntry(NewVendLedgEntry,ComprDimEntryNo);

                               ComprCollectedEntries;
                           END;

                           IF DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 THEN BEGIN
                             NoOfDeleted := DateComprReg."No. Records Deleted";
                             InsertRegisters(GLReg,DateComprReg);
                           END;
                         END;

        OnPostDataItem=BEGIN
                         IF DateComprReg."No. Records Deleted" > NoOfDeleted THEN
                           InsertRegisters(GLReg,DateComprReg);
                       END;

        ReqFilterFields=Vendor No.,Vendor Posting Group,Currency Code;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=8910;
      Height=4400;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   IF EntrdDateComprReg."Ending Date" = 0D THEN
                     EntrdDateComprReg."Ending Date" := TODAY;
                   IF EntrdVendLedgEntry.Description = '' THEN
                     EntrdVendLedgEntry.Description := Text009;

                   WITH "Vendor Ledger Entry" DO BEGIN
                     InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
                     InsertField(FIELDNO("Buy-from Vendor No."),FIELDCAPTION("Buy-from Vendor No."));
                     InsertField(FIELDNO("Purchaser Code"),FIELDCAPTION("Purchaser Code"));
                     InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
                     InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
                   END;

                   RetainDimText := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Date Compress Vendor Ledger",'');
                 END;

    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;0    ;1650 ;440  ;CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial];
                                                   SourceExpr=EntrdDateComprReg."Starting Date" }
      { 21  ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=1 }
      { 2   ;TextBox      ;3410 ;550  ;1650 ;440  ;CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha final];
                                                   SourceExpr=EntrdDateComprReg."Ending Date" }
      { 22  ;Label        ;0    ;550  ;3300 ;440  ;ParentControl=2 }
      { 3   ;TextBox      ;3410 ;1100 ;2750 ;440  ;CaptionML=[ENU=Period Length;
                                                              ESP=Longitud periodo];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Period;
                                                                    ESP=D¡a,Semana,Mes,Trimestre,A¤o,Periodo];
                                                   OptionString=Day,Week,Month,Quarter,Year,Period;
                                                   SourceExpr=EntrdDateComprReg."Period Length" }
      { 23  ;Label        ;0    ;1100 ;3300 ;440  ;ParentControl=3 }
      { 4   ;TextBox      ;3410 ;1650 ;5500 ;440  ;CaptionML=[ENU=Posting Description;
                                                              ESP=Texto de registro];
                                                   SourceExpr=EntrdVendLedgEntry.Description }
      { 24  ;Label        ;0    ;1650 ;3300 ;440  ;ParentControl=4 }
      { 5   ;CheckBox     ;3410 ;2310 ;3850 ;440  ;CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento];
                                                   SourceExpr=Retain[1] }
      { 25  ;Label        ;0    ;2310 ;3300 ;440  ;ParentControl=5;
                                                   CaptionML=[ENU=Retain Field Contents;
                                                              ESP=Guardar contenido campo] }
      { 6   ;CheckBox     ;3410 ;2860 ;3850 ;440  ;CaptionML=[ENU=Buy-from Vendor No.;
                                                              ESP=Compra a-N§ proveedor];
                                                   SourceExpr=Retain[2] }
      { 7   ;CheckBox     ;3410 ;3410 ;3850 ;440  ;CaptionML=[ENU=Purchaser Code;
                                                              ESP=C¢d. comprador];
                                                   SourceExpr=Retain[3] }
      { 8   ;TextBox      ;3410 ;3960 ;5500 ;440  ;Editable=No;
                                                   Focusable=Yes;
                                                   PermanentAssist=Yes;
                                                   CaptionML=[ENU=Retain Dimensions;
                                                              ESP=Retener dimensiones];
                                                   SourceExpr=RetainDimText;
                                                   OnAssistEdit=BEGIN
                                                                  DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress Vendor Ledger",RetainDimText);
                                                                END;
                                                                 }
      { 9   ;Label        ;0    ;3960 ;3300 ;440  ;ParentControl=8 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF EntrdDateComprReg."Ending Date" = 0D THEN
                     EntrdDateComprReg."Ending Date" := TODAY;
                   IF EntrdVendLedgEntry.Description = '' THEN
                     EntrdVendLedgEntry.Description := Text009;

                   WITH "Vendor Ledger Entry" DO BEGIN
                     InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
                     InsertField(FIELDNO("Buy-from Vendor No."),FIELDCAPTION("Buy-from Vendor No."));
                     InsertField(FIELDNO("Purchaser Code"),FIELDCAPTION("Purchaser Code"));
                     InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
                     InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
                   END;

                   RetainDimText := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Date Compress Vendor Ledger",'');
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             ESP=Fecha inicial];
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Ending Date;
                             ESP=Fecha final];
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Period Length;
                             ESP=Longitud periodo];
                  OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Period;
                                   ESP=D¡a,Semana,Mes,Trimestre,A¤o,Periodo];
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 4   ;2   ;Field     ;
                  CaptionML=[ENU=Posting Description;
                             ESP=Texto de registro];
                  SourceExpr=EntrdVendLedgEntry.Description }

      { 1907651001;2;Group  ;
                  CaptionML=[ENU=Retain Field Contents;
                             ESP=Guardar contenido campo] }

      { 5   ;3   ;Field     ;
                  CaptionML=[ENU=Document No.;
                             ESP=N§ documento];
                  SourceExpr=Retain[1] }

      { 6   ;3   ;Field     ;
                  CaptionML=[ENU=Buy-from Vendor No.;
                             ESP=Compra a-N§ proveedor];
                  SourceExpr=Retain[2] }

      { 7   ;3   ;Field     ;
                  CaptionML=[ENU=Purchaser Code;
                             ESP=C¢d. comprador];
                  SourceExpr=Retain[3] }

      { 8   ;2   ;Field     ;
                  CaptionML=[ENU=Retain Dimensions;
                             ESP=Retener dimensiones];
                  SourceExpr=RetainDimText;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress Vendor Ledger",RetainDimText);
                               END;
                                }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="This batch job deletes entries. ";ESP="Este proceso borra movimientos. "';
      Text001@1001 : TextConst 'ENU=Therefore, it is important that you make a backup of the database before you run the batch job.\\;ESP=Es muy importante realizar una copia de seguridad de la base de datos antes de ejecutar este proceso.\\';
      Text002@1002 : TextConst 'ENU=Do you want to date compress the entries?;ESP=¨Confirma que desea comprimir los movimientos?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.;ESP=Se debe indicar %1.';
      Text004@1004 : TextConst 'ENU=Date compressing vendor ledger entries...\\;ESP=Comprimiendo por fechas movs. proveedores...\\';
      Text005@1005 : TextConst 'ENU=Vendor No.           #1##########\;ESP=N§ proveedor         #1##########\';
      Text006@1006 : TextConst 'ENU=Date                 #2######\\;ESP=Fecha                #2######\\';
      Text007@1007 : TextConst 'ENU=No. of new entries   #3######\;ESP=Nuevo n§ movs.       #3######\';
      Text008@1008 : TextConst 'ENU=No. of entries del.  #4######;ESP=N§ movs. borrados    #4######';
      Text009@1009 : TextConst 'ENU=Date Compressed;ESP=Comprimido por fechas';
      Text010@1010 : TextConst 'ENU=Retain Dimensions;ESP=Retener dimensiones';
      SourceCodeSetup@1011 : Record 242;
      DateComprReg@1012 : Record 87;
      EntrdDateComprReg@1013 : Record 87;
      GLReg@1014 : Record 45;
      EntrdVendLedgEntry@1015 : Record 25;
      NewVendLedgEntry@1016 : Record 25;
      VendLedgEntry2@1017 : Record 25;
      NewDtldVendLedgEntry@1018 : Record 380;
      DtldVendLedgEntryBuffer@1019 : TEMPORARY Record 380;
      GLentry@1020 : Record 17;
      SelectedDim@1021 : Record 369;
      TempSelectedDim@1022 : TEMPORARY Record 369;
      DimSelectionBuf@1023 : Record 368;
      DateComprMgt@1024 : Codeunit 356;
      DimBufMgt@1025 : Codeunit 411;
      DimMgt@1026 : Codeunit 408;
      Window@1027 : Dialog;
      VendLedgEntryFilter@1028 : Text[250];
      NoOfFields@1029 : Integer;
      Retain@1030 : ARRAY [10] OF Boolean;
      FieldNumber@1031 : ARRAY [10] OF Integer;
      FieldNameArray@1032 : ARRAY [10] OF Text[100];
      LastEntryNo@1033 : Integer;
      NextTransactionNo@1034 : Integer;
      NoOfDeleted@1035 : Integer;
      LastDtldEntryNo@1036 : Integer;
      LastTmpDtldEntryNo@1037 : Integer;
      GLRegExists@1038 : Boolean;
      i@1039 : Integer;
      ComprDimEntryNo@1040 : Integer;
      DimEntryNo@1041 : Integer;
      RetainDimText@1042 : Text[250];
      SummarizePositive@1043 : Boolean;

    LOCAL PROCEDURE InitRegisters@4();
    BEGIN
      IF GLReg.FIND('+') THEN;
      GLReg.INIT;
      GLReg."No." := GLReg."No." + 1;
      GLReg."Creation Date" := TODAY;
      GLReg."Source Code" := SourceCodeSetup."Compress Vend. Ledger";
      GLReg."User ID" := USERID;
      GLReg."From Entry No." := LastEntryNo + 1;

      IF DateComprReg.FIND('+') THEN;
      DateComprReg.INIT;
      DateComprReg."No." := DateComprReg."No." + 1;
      DateComprReg."Table ID" := DATABASE::"Vendor Ledger Entry";
      DateComprReg."Creation Date" := TODAY;
      DateComprReg."Starting Date" := EntrdDateComprReg."Starting Date";
      DateComprReg."Ending Date" := EntrdDateComprReg."Ending Date";
      DateComprReg."Period Length" := EntrdDateComprReg."Period Length";
      FOR i := 1 TO NoOfFields DO
        IF Retain[i] THEN
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);
      DateComprReg.Filter := VendLedgEntryFilter;
      DateComprReg."Register No." := GLReg."No.";
      DateComprReg."Source Code" := SourceCodeSetup."Compress Vend. Ledger";
      DateComprReg."User ID" := USERID;

      GLRegExists := FALSE;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR GLReg@1000 : Record 45;VAR DateComprReg@1001 : Record 87);
    BEGIN
      GLentry.INIT;
      LastEntryNo := LastEntryNo + 1;
      GLentry."Entry No." := LastEntryNo;
      GLentry."Posting Date" := TODAY;
      GLentry.Description := EntrdVendLedgEntry.Description;
      GLentry."Source Code" := SourceCodeSetup."Compress Vend. Ledger";
      GLentry."System-Created Entry" := TRUE;
      GLentry."User ID" := USERID;
      GLentry."Transaction No." := NextTransactionNo;
      GLentry.INSERT;
      GLentry.CONSISTENT(GLentry.Amount = 0);
      GLReg."To Entry No." := GLentry."Entry No.";

      IF GLRegExists THEN BEGIN
        GLReg.MODIFY;
        DateComprReg.MODIFY;
      END ELSE BEGIN
        GLReg.INSERT;
        DateComprReg.INSERT;
        GLRegExists := TRUE;
      END;
      COMMIT;

      GLentry.LOCKTABLE;
      NewDtldVendLedgEntry.LOCKTABLE;
      NewVendLedgEntry.LOCKTABLE;
      GLReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      IF GLentry.FIND('+') THEN;
      IF NewVendLedgEntry.FIND('+') THEN;
      IF (LastEntryNo <> GLentry."Entry No.") OR
         (LastEntryNo <> NewVendLedgEntry."Entry No." + 1)
      THEN BEGIN
        LastEntryNo := GLentry."Entry No.";
        NextTransactionNo := GLentry."Transaction No." + 1;
        InitRegisters;
      END;
      IF NewDtldVendLedgEntry.FIND('+') THEN;
      LastDtldEntryNo := NewDtldVendLedgEntry."Entry No.";
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      EXIT(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      FOR i := 1 TO NoOfFields DO
        IF Number = FieldNumber[i] THEN
          EXIT(i);
    END;

    PROCEDURE SummarizeEntry@5(VAR NewVendLedgEntry@1000 : Record 25;VendLedgEntry@1001 : Record 25);
    VAR
      LedgEntryDim@1002 : Record 355;
      DtldVendLedgEntry@1003 : Record 380;
    BEGIN
      WITH VendLedgEntry DO BEGIN
        NewVendLedgEntry."Purchase (LCY)" := NewVendLedgEntry."Purchase (LCY)" + "Purchase (LCY)";
        NewVendLedgEntry."Inv. Discount (LCY)" := NewVendLedgEntry."Inv. Discount (LCY)" + "Inv. Discount (LCY)";
        NewVendLedgEntry."Original Pmt. Disc. Possible" :=
          NewVendLedgEntry."Original Pmt. Disc. Possible" + "Original Pmt. Disc. Possible";
        NewVendLedgEntry."Remaining Pmt. Disc. Possible" :=
          NewVendLedgEntry."Remaining Pmt. Disc. Possible" + "Remaining Pmt. Disc. Possible";
        NewVendLedgEntry."Closed by Amount (LCY)" :=
          NewVendLedgEntry."Closed by Amount (LCY)" + "Closed by Amount (LCY)";

        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.","Entry No.");
        IF DtldVendLedgEntry.FIND('-') THEN BEGIN
          REPEAT
            SummarizeDtldEntry(DtldVendLedgEntry,NewVendLedgEntry);
          UNTIL DtldVendLedgEntry.NEXT = 0;
          DtldVendLedgEntry.DELETEALL;
        END;

        DELETE;
        LedgEntryDim.RESET;
        LedgEntryDim.SETRANGE("Table ID",DATABASE::"Vendor Ledger Entry");
        LedgEntryDim.SETRANGE("Entry No.","Entry No.");
        LedgEntryDim.DELETEALL;
        DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
        Window.UPDATE(4,DateComprReg."No. Records Deleted");
      END;
    END;

    PROCEDURE ComprCollectedEntries@12();
    VAR
      VendLedgEntry@1000 : Record 25;
      OldDimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
      VendLedgEntryNo@1003 : Integer;
    BEGIN
      OldDimEntryNo := 0;
      IF DimBufMgt.FindFirstDimEntryNo(DimEntryNo,VendLedgEntryNo) THEN BEGIN
        InitNewEntry(NewVendLedgEntry);
        REPEAT
          VendLedgEntry.GET(VendLedgEntryNo);
          SummarizeEntry(NewVendLedgEntry,VendLedgEntry);
          OldDimEntryNo := DimEntryNo;
          Found := DimBufMgt.NextDimEntryNo(DimEntryNo,VendLedgEntryNo);
          IF (OldDimEntryNo <> DimEntryNo) OR NOT Found THEN BEGIN
            InsertNewEntry(NewVendLedgEntry,OldDimEntryNo);
            IF Found THEN
              InitNewEntry(NewVendLedgEntry);
          END;
          OldDimEntryNo := DimEntryNo;
        UNTIL NOT Found;
      END;
      DimBufMgt.DeleteAllDimEntryNo;
    END;

    PROCEDURE InitNewEntry@7(VAR NewVendLedgEntry@1000 : Record 25);
    BEGIN
      LastEntryNo := LastEntryNo + 1;

      WITH VendLedgEntry2 DO BEGIN
        NewVendLedgEntry.INIT;
        NewVendLedgEntry."Entry No." := LastEntryNo;
        NewVendLedgEntry."Vendor No." := "Vendor No.";
        NewVendLedgEntry."Posting Date" := GETRANGEMIN("Posting Date");
        NewVendLedgEntry.Description := EntrdVendLedgEntry.Description;
        NewVendLedgEntry."Vendor Posting Group" := "Vendor Posting Group";
        NewVendLedgEntry."Currency Code" := "Currency Code";
        NewVendLedgEntry."Document Type" := "Document Type";
        NewVendLedgEntry."Source Code" := SourceCodeSetup."Compress Vend. Ledger";
        NewVendLedgEntry."User ID" := USERID;
        NewVendLedgEntry."Transaction No." := NextTransactionNo;

        IF RetainNo(FIELDNO("Document No.")) THEN
          NewVendLedgEntry."Document No." := "Document No.";
        IF RetainNo(FIELDNO("Buy-from Vendor No.")) THEN
          NewVendLedgEntry."Buy-from Vendor No." := "Buy-from Vendor No.";
        IF RetainNo(FIELDNO("Purchaser Code")) THEN
          NewVendLedgEntry."Purchaser Code" := "Purchaser Code";
        IF RetainNo(FIELDNO("Global Dimension 1 Code")) THEN
          NewVendLedgEntry."Global Dimension 1 Code" := "Global Dimension 1 Code";
        IF RetainNo(FIELDNO("Global Dimension 2 Code")) THEN
          NewVendLedgEntry."Global Dimension 2 Code" := "Global Dimension 2 Code";

        Window.UPDATE(1,NewVendLedgEntry."Vendor No.");
        Window.UPDATE(2,NewVendLedgEntry."Posting Date");
        DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
        Window.UPDATE(3,DateComprReg."No. of New Records");
      END;
    END;

    PROCEDURE InsertNewEntry@23(VAR NewVendLedgEntry@1000 : Record 25;DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record 360;
    BEGIN
      NewVendLedgEntry.INSERT;
      InsertDtldEntries;

      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.MoveDimBufToLedgEntryDim(
        TempDimBuf,DATABASE::"Vendor Ledger Entry",NewVendLedgEntry."Entry No.");
    END;

    PROCEDURE CompressDetails@8(VendLedgEntry@1000 : Record 25) : Boolean;
    VAR
      DtldVendLedgEntry@1001 : Record 380;
    BEGIN
      DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.","Posting Date");
      DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
      IF EntrdDateComprReg."Starting Date" <> 0D THEN
        DtldVendLedgEntry.SETFILTER(
          "Posting Date",
          STRSUBSTNO(
            '..%1|%2..',
            CALCDATE('<-1D>',EntrdDateComprReg."Starting Date"),
            CALCDATE('<+1D>',EntrdDateComprReg."Ending Date")))
      ELSE
        DtldVendLedgEntry.SETFILTER(
          "Posting Date",
          STRSUBSTNO(
            '%1..',
            CALCDATE('<+1D>',EntrdDateComprReg."Ending Date")));

      EXIT(NOT DtldVendLedgEntry.FIND('+'));
    END;

    PROCEDURE SummarizeDtldEntry@9(VAR DtldVendLedgEntry@1000 : Record 380;VAR NewVendLedgEntry@1001 : Record 25);
    VAR
      NewEntry@1003 : Boolean;
      PostingDate@1004 : Date;
    BEGIN
      DtldVendLedgEntryBuffer.SETFILTER(
        "Posting Date",
        DateComprMgt.GetDateFilter(DtldVendLedgEntry."Posting Date", EntrdDateComprReg,TRUE));
      PostingDate :=DtldVendLedgEntryBuffer.GETRANGEMIN("Posting Date");
      DtldVendLedgEntryBuffer.SETRANGE(DtldVendLedgEntryBuffer."Posting Date",PostingDate);
      DtldVendLedgEntryBuffer.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type");
      IF RetainNo("Vendor Ledger Entry".FIELDNO("Document No.")) THEN
        DtldVendLedgEntryBuffer.SETRANGE("Document No.","Vendor Ledger Entry"."Document No.");
      IF RetainNo("Vendor Ledger Entry".FIELDNO("Buy-from Vendor No.")) THEN
        DtldVendLedgEntryBuffer.SETRANGE("Vendor No.","Vendor Ledger Entry"."Buy-from Vendor No.");
      IF RetainNo("Vendor Ledger Entry".FIELDNO("Global Dimension 1 Code")) THEN
        DtldVendLedgEntryBuffer.SETRANGE("Initial Entry Global Dim. 1","Vendor Ledger Entry"."Global Dimension 1 Code");
      IF RetainNo("Vendor Ledger Entry".FIELDNO("Global Dimension 2 Code")) THEN
        DtldVendLedgEntryBuffer.SETRANGE("Initial Entry Global Dim. 2","Vendor Ledger Entry"."Global Dimension 2 Code");

      IF NOT DtldVendLedgEntryBuffer.FIND('-') THEN BEGIN
        DtldVendLedgEntryBuffer.RESET;
        CLEAR(DtldVendLedgEntryBuffer);

        LastTmpDtldEntryNo := LastTmpDtldEntryNo + 1;
        DtldVendLedgEntryBuffer."Entry No." := LastTmpDtldEntryNo;
        DtldVendLedgEntryBuffer."Posting Date" := PostingDate;
        DtldVendLedgEntryBuffer."Document Type" := NewVendLedgEntry."Document Type";
        DtldVendLedgEntryBuffer."Initial Document Type" := NewVendLedgEntry."Document Type";
        DtldVendLedgEntryBuffer."Document No." := NewVendLedgEntry."Document No.";
        DtldVendLedgEntryBuffer."Entry Type" := DtldVendLedgEntry."Entry Type";
        DtldVendLedgEntryBuffer."Vendor Ledger Entry No." := NewVendLedgEntry."Entry No.";
        DtldVendLedgEntryBuffer."Vendor No." := NewVendLedgEntry."Vendor No.";
        DtldVendLedgEntryBuffer."Currency Code" := NewVendLedgEntry."Currency Code";
        DtldVendLedgEntryBuffer."User ID" := NewVendLedgEntry."User ID";
        DtldVendLedgEntryBuffer."Source Code" := NewVendLedgEntry."Source Code";
        DtldVendLedgEntryBuffer."Transaction No." := NewVendLedgEntry."Transaction No.";
        DtldVendLedgEntryBuffer."Journal Batch Name" := NewVendLedgEntry."Journal Batch Name";
        DtldVendLedgEntryBuffer."Reason Code" := NewVendLedgEntry."Reason Code";
        DtldVendLedgEntryBuffer."Initial Entry Due Date" := NewVendLedgEntry."Due Date";
        DtldVendLedgEntryBuffer."Initial Entry Global Dim. 1" := NewVendLedgEntry."Global Dimension 1 Code";
        DtldVendLedgEntryBuffer."Initial Entry Global Dim. 2" := NewVendLedgEntry."Global Dimension 2 Code";

        NewEntry := TRUE;
      END;

      DtldVendLedgEntryBuffer.Amount :=
        DtldVendLedgEntryBuffer.Amount + DtldVendLedgEntry.Amount;
      DtldVendLedgEntryBuffer."Amount (LCY)" :=
        DtldVendLedgEntryBuffer."Amount (LCY)" + DtldVendLedgEntry."Amount (LCY)";
      DtldVendLedgEntryBuffer."Debit Amount" :=
        DtldVendLedgEntryBuffer."Debit Amount" + DtldVendLedgEntry."Debit Amount";
      DtldVendLedgEntryBuffer."Credit Amount" :=
        DtldVendLedgEntryBuffer."Credit Amount" + DtldVendLedgEntry."Credit Amount";
      DtldVendLedgEntryBuffer."Debit Amount (LCY)" :=
        DtldVendLedgEntryBuffer."Debit Amount (LCY)" + DtldVendLedgEntry."Debit Amount (LCY)";
      DtldVendLedgEntryBuffer."Credit Amount (LCY)" :=
        DtldVendLedgEntryBuffer."Credit Amount (LCY)" + DtldVendLedgEntry."Credit Amount (LCY)";

      IF NewEntry THEN
        DtldVendLedgEntryBuffer.INSERT
      ELSE
        DtldVendLedgEntryBuffer.MODIFY;
    END;

    PROCEDURE InsertDtldEntries@20();
    BEGIN
      DtldVendLedgEntryBuffer.RESET;
      IF DtldVendLedgEntryBuffer.FIND('-') THEN
        REPEAT
          IF ((DtldVendLedgEntryBuffer.Amount <> 0) OR
              (DtldVendLedgEntryBuffer."Amount (LCY)" <> 0) OR
              (DtldVendLedgEntryBuffer."Debit Amount" <> 0) OR
              (DtldVendLedgEntryBuffer."Credit Amount" <> 0) OR
              (DtldVendLedgEntryBuffer."Debit Amount (LCY)" <> 0) OR
              (DtldVendLedgEntryBuffer."Credit Amount (LCY)" <> 0))
          THEN BEGIN
            LastDtldEntryNo := LastDtldEntryNo + 1;

            NewDtldVendLedgEntry := DtldVendLedgEntryBuffer;
            NewDtldVendLedgEntry."Entry No." := LastDtldEntryNo;
            NewDtldVendLedgEntry.INSERT;
          END;
        UNTIL DtldVendLedgEntryBuffer.NEXT = 0;
      DtldVendLedgEntryBuffer.DELETEALL;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
