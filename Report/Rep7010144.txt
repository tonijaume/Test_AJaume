OBJECT Report 7010144 Monitor venta de excursiones
{
  OBJECT-PROPERTIES
  {
    Date=27/07/15;
    Time=11:12:36;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Excursions - Sales monitor;
               ESP=Monitor venta de excursiones];
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table7010162;
        DataItemTableView=SORTING(Guia Venta,Fecha Venta,N§ Ticket);
        DataItemVarName=diReserva;
        OnPreDataItem=BEGIN
                        rPar.FINDFIRST;
                        rCompany.GET(COMPANYNAME);
                        rDelegacion.FINDFIRST;
                        rCompanyInformation.FINDFIRST;

                        //. Hay que filtrar, obligatoriamente por fecha de excursion o fecha de venta
                        IF diReserva.GETFILTER("Fecha Excursion") = '' THEN
                          IF diReserva.GETFILTER("Fecha Venta") = '' THEN
                            ERROR(Text001)
                          ELSE
                          BEGIN
                            wFechaDesde := GETRANGEMIN("Fecha Venta");
                            wFechaHasta := GETRANGEMAX("Fecha Venta");

                            wTipoFechas := wTipoFechas::Venta;
                          END
                        ELSE
                        BEGIN
                          wFechaDesde := GETRANGEMIN("Fecha Excursion");
                          wFechaHasta := GETRANGEMAX("Fecha Excursion");

                          wTipoFechas := wTipoFechas::Servicio;

                          diReserva.SETCURRENTKEY("Guia Venta", "Fecha Excursion");
                        END;

                        //. Generamos la cabecera del informe

                        cExcel.Nuevo;
                        wLinea  := 0;

                        SETRANGE (Anulada        , FALSE);
                        SETRANGE (Reembolsada    , FALSE);
                        SETFILTER("Hotel Cliente", '<>%1', '');
                        SETFILTER(Producto       , '<>%1', '');
                        SETFILTER(TourOperador   , '<>%1', '');

                        wDialog.OPEN(Text074);
                        wTotal  := COUNT;
                        wActual := 0;

                        _CabeceraMonitor(wFechaDesde, wFechaHasta);
                      END;

        OnAfterGetRecord=VAR
                           lrTouroperador@1000000009 : Record 7009717;
                           lrGuiaVenta@1000000008 : Record 7010241;
                           lrHotel@1000000007 : Record 7009724;
                           lrZonaFisica@1000000005 : Record 7009713;
                           lrExcursion@1000000004 : Record 7009710;
                           lrContTO@1000000003 : Record 7010142;
                           lwCosteConfirmado@1000000001 : Decimal;
                           lwCosteValidado@1000000000 : Decimal;
                         BEGIN
                           wActual += 1;
                           wDialog.UPDATE(1, ROUND(wActual / wTotal * 10000, 1));

                           IF NOT lrTouroperador.GET(TourOperador) THEN
                             CLEAR(lrTouroperador);
                           IF NOT lrGuiaVenta.GET("Guia Venta") THEN
                             CLEAR(lrGuiaVenta);
                           IF NOT lrExcursion.GET(Producto) THEN
                             CLEAR(lrExcursion);
                           IF NOT lrHotel.GET("Hotel Cliente") THEN
                             CLEAR(lrHotel);
                           IF NOT lrZonaFisica.GET(lrHotel."Zona Fisica") THEN
                             CLEAR(lrZonaFisica);

                           lrContTO.RESET;
                           lrContTO.SETRANGE (Delegacion             , Delegacion);
                           lrContTO.SETRANGE ("Tipo Contrato"        , lrContTO."Tipo Contrato"::TourOperador);
                           IF rPar."Busca tarifa por fecha venta" THEN
                           BEGIN
                             lrContTO.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha Venta");
                             lrContTO.SETFILTER("Fecha final contrato" , '>=%1', "Fecha Venta");
                           END
                           ELSE
                           BEGIN
                             lrContTO.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha Excursion");
                             lrContTO.SETFILTER("Fecha final contrato" , '>=%1', "Fecha Excursion");
                           END;
                           lrContTO.SETRANGE (TourOperador    , TourOperador);
                           lrContTO.SETRANGE (Confirmado      , TRUE);
                           lrContTO.SETRANGE (Comercializadora, FALSE);
                           IF NOT lrContTO.FINDFIRST THEN
                             CLEAR(lrContTO);

                           lwCosteConfirmado := 0;
                           lwCosteValidado   := 0;
                           _CosteConfirmadoReserva(diReserva, lrExcursion."Coste x ticket", lwCosteConfirmado, lwCosteValidado);

                           wLinea += 1;
                           cExcel.ValorCelda2(wLinea, 1, "N§ Ticket");
                           cExcel.ValorCelda2(wLinea, 2, FORMAT("Fecha Venta"));
                           cExcel.ValorCelda2(wLinea, 3, TourOperador);
                           cExcel.ValorCelda2(wLinea, 4, lrTouroperador.Nombre);
                           cExcel.ValorCelda2(wLinea, 5, lrTouroperador.Mercado);
                           cExcel.ValorCelda2(wLinea, 6, "Guia Venta");
                           cExcel.ValorCelda2(wLinea, 7, lrGuiaVenta.Nombre);
                           cExcel.ValorCelda2(wLinea, 8, Producto);
                           cExcel.ValorCelda2(wLinea, 9, lrExcursion.Descripcion);
                           cExcel.ValorCelda2(wLinea, 10, FORMAT("Fecha Excursion"));
                           cExcel.ValorCelda2(wLinea, 11, Idioma);
                           cExcel.ValorCelda2(wLinea, 12, FORMAT(Adultos));
                           cExcel.ValorCelda2(wLinea, 13, FORMAT(Ni¤os));
                           cExcel.ValorCelda2(wLinea, 14, "Hotel Cliente");
                           cExcel.ValorCelda2(wLinea, 15, lrHotel.Nombre);
                           cExcel.ValorCelda2(wLinea, 16, lrHotel."Zona Fisica");
                           cExcel.ValorCelda2(wLinea, 17, FORMAT("Ingreso reserva"));
                           cExcel.ValorCelda2(wLinea, 18, FORMAT("Ingreso reserva neto"));
                           cExcel.ValorCelda2(wLinea, 19, FORMAT("Venta - Invitados Adultos"));
                           cExcel.ValorCelda2(wLinea, 20, FORMAT("Venta - Invitados ni¤os"));
                           cExcel.ValorCelda2(wLinea, 21, FORMAT("Coste Reserva"));
                           cExcel.ValorCelda2(wLinea, 22, FORMAT(-"Comision Touroperador"));
                           cExcel.ValorCelda2(wLinea, 23, FORMAT(lrContTO."Aplica comision en factura"));
                           cExcel.ValorCelda2(wLinea, 24, FORMAT(lrGuiaVenta."Trabaja a credito"));
                           cExcel.ValorCelda2(wLinea, 25, FORMAT("Comision Guia Venta"));
                           cExcel.ValorCelda2(wLinea, 26, _NombreProveedor(Producto));
                           cExcel.ValorCelda2(wLinea, 27, Oficina);
                           cExcel.ValorCelda2(wLinea, 28, "Num. Factura");
                           cExcel.ValorCelda2(wLinea, 30, rCompanyInformation."Country/Region Code");
                           cExcel.ValorCelda2(wLinea, 31, lrZonaFisica.Descripcion);
                           cExcel.ValorCelda2(wLinea, 32, FORMAT(lwCosteConfirmado));
                           cExcel.ValorCelda2(wLinea, 33, FORMAT(lwCosteValidado));
                           cExcel.ValorCelda2(wLinea, 34, FORMAT("Fecha Liquidacion GV"));
                           cExcel.ValorCelda2(wLinea, 35, FORMAT(_GetFechaRegistroFra("Num. Factura")));
                           cExcel.ValorCelda2(wLinea, 36, "Canal venta"); //+$002
                         END;

        ReqFilterFields=Fecha Excursion,Fecha Venta;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=0;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table7010266;
        DataItemTableView=SORTING(Delegacion,Num Reserva,ID Reembolso);
        DataItemVarName=diReembolso;
        OnPreDataItem=BEGIN
                        SETRANGE("Fecha Reembolso", wFechaDesde, wFechaHasta);

                        wDialog.OPEN(Text074);
                        wTotal  := COUNT;
                        wActual := 0;
                      END;

        OnAfterGetRecord=VAR
                           lrReserva@1000000004 : Record 7010162;
                           lrTouroperador@1000000002 : Record 7009717;
                           lrGuiaVenta@1000000001 : Record 7010241;
                           lrHotel@1000000000 : Record 7009724;
                           lrZonaFisica@1000000003 : Record 7009713;
                           lrExcursion@1000000005 : Record 7009710;
                           lrContTO@1000000006 : Record 7010142;
                         BEGIN
                           wActual += 1;
                           wDialog.UPDATE(1, ROUND(wActual / wTotal * 10000, 1));

                           lrReserva.GET(diReembolso.Delegacion, diReembolso."Num Reserva");

                           IF NOT lrTouroperador.GET(lrReserva.TourOperador) THEN
                             CLEAR(lrTouroperador);
                           IF NOT lrGuiaVenta.GET("Guia Venta") THEN
                             CLEAR(lrGuiaVenta);
                           IF NOT lrExcursion.GET(lrReserva.Producto) THEN
                             CLEAR(lrExcursion);
                           IF NOT lrHotel.GET(lrReserva."Hotel Cliente") THEN
                             CLEAR(lrHotel);
                           IF NOT lrZonaFisica.GET(lrHotel."Zona Fisica") THEN
                             CLEAR(lrZonaFisica);

                           lrContTO.RESET;
                           lrContTO.SETRANGE (Delegacion             , lrReserva.Delegacion);
                           lrContTO.SETRANGE ("Tipo Contrato"        , lrContTO."Tipo Contrato"::TourOperador);
                           IF rPar."Busca tarifa por fecha venta" THEN
                           BEGIN
                             lrContTO.SETFILTER("Fecha inicio contrato", '<=%1', lrReserva."Fecha Venta");
                             lrContTO.SETFILTER("Fecha final contrato" , '>=%1', lrReserva."Fecha Venta");
                           END
                           ELSE
                           BEGIN
                             lrContTO.SETFILTER("Fecha inicio contrato", '<=%1', lrReserva."Fecha Excursion");
                             lrContTO.SETFILTER("Fecha final contrato" , '>=%1', lrReserva."Fecha Excursion");
                           END;
                           lrContTO.SETRANGE (TourOperador           , lrReserva.TourOperador);
                           lrContTO.SETRANGE (Confirmado             , TRUE);
                           IF NOT lrContTO.FINDFIRST THEN
                             CLEAR(lrContTO);

                           wLinea += 1;
                           cExcel.ValorCelda2(wLinea, 1, lrReserva."N§ Ticket");
                           cExcel.ValorCelda2(wLinea, 2, FORMAT("Fecha Reembolso"));
                           cExcel.ValorCelda2(wLinea, 3, lrReserva.TourOperador);
                           cExcel.ValorCelda2(wLinea, 4, lrTouroperador.Nombre);
                           cExcel.ValorCelda2(wLinea, 5, lrTouroperador.Mercado);
                           cExcel.ValorCelda2(wLinea, 6, lrReserva."Guia Venta");
                           cExcel.ValorCelda2(wLinea, 7, lrGuiaVenta.Nombre);
                           cExcel.ValorCelda2(wLinea, 8, lrReserva.Producto);
                           cExcel.ValorCelda2(wLinea, 9, lrExcursion.Descripcion);
                           cExcel.ValorCelda2(wLinea, 10, FORMAT(lrReserva."Fecha Excursion"));
                           cExcel.ValorCelda2(wLinea, 11, lrReserva.Idioma);
                           cExcel.ValorCelda2(wLinea, 12, FORMAT(-"Adultos Reembolsados"));
                           cExcel.ValorCelda2(wLinea, 13, FORMAT(-"Ni¤os Reembolsados"));
                           cExcel.ValorCelda2(wLinea, 14, lrReserva."Hotel Cliente");
                           cExcel.ValorCelda2(wLinea, 15, lrHotel.Nombre);
                           cExcel.ValorCelda2(wLinea, 16, lrHotel."Zona Fisica");

                           CALCFIELDS("Importe Reembolsado", "Importe reembolsado neto");
                           cExcel.ValorCelda2(wLinea, 17, FORMAT(-ROUND("Importe Reembolsado")));
                           cExcel.ValorCelda2(wLinea, 18, FORMAT(-ROUND("Importe reembolsado neto")));
                           cExcel.ValorCelda2(wLinea, 23, FORMAT(lrContTO."Aplica comision en factura"));
                           cExcel.ValorCelda2(wLinea, 24, FORMAT(lrGuiaVenta."Trabaja a credito"));
                           cExcel.ValorCelda2(wLinea, 26, _NombreProveedor(lrReserva.Producto));
                           cExcel.ValorCelda2(wLinea, 27, lrReserva.Oficina);
                           cExcel.ValorCelda2(wLinea, 29, "Num. abono reembolso");
                           cExcel.ValorCelda2(wLinea, 30, rCompanyInformation."Country/Region Code");
                           cExcel.ValorCelda2(wLinea, 31, lrZonaFisica.Descripcion);
                           cExcel.ValorCelda2(wLinea, 34, FORMAT("Fecha Liquidacion GV"));
                           cExcel.ValorCelda2(wLinea, 36, lrReserva."Canal venta"); //+$002
                         END;

        OnPostDataItem=BEGIN
                         cExcel.Mostrar;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=0;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=3410;
    }
    CONTROLS
    {
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      wLinea@1000000007 : Integer;
      wTotal@1000000006 : Integer;
      wActual@1000000005 : Integer;
      rPar@1000000004 : Record 7009700;
      rDelegacion@1000000003 : Record 7009718;
      rExchange@1000000002 : Record 330;
      rCompany@1000000001 : Record 2000000006;
      rCompanyInformation@1000000066 : Record 79;
      cExcel@1000000000 : Codeunit 7009755;
      Text001@1000000008 : TextConst 'ENU=You must specify a date filter.;ESP=Debe espeficar un periodo de fechas.';
      Text004@1000000062 : TextConst 'ENU=Sale Date;ESP=Fecha venta';
      Text005@1000000061 : TextConst 'ENU=Touroperator;ESP=Touroperador';
      Text006@1000000060 : TextConst 'ENU=Touroperator Name;ESP=Nombre Touroperador';
      Text007@1000000059 : TextConst 'ENU=Ticket;ESP=Ticket';
      Text008@1000000058 : TextConst 'ENU=Sale Person;ESP=Representante';
      Text009@1000000057 : TextConst 'ENU=Sale Guide name;ESP=Nombre guia venta';
      Text010@1000000056 : TextConst 'ENU=Excursion;ESP=Excursion';
      Text011@1000000055 : TextConst 'ENU=Excursion Name;ESP=Nombre excursion';
      Text012@1000000054 : TextConst 'ENU=Service date;ESP=Fecha Excursion';
      Text013@1000000053 : TextConst 'ENU=Language;ESP=Idioma';
      Text014@1000000052 : TextConst 'ENU=Market;ESP=Mercado';
      Text015@1000000051 : TextConst 'ENU=Adults;ESP=Adultos';
      Text016@1000000050 : TextConst 'ENU=Childs;ESP=Ni¤os';
      Text017@1000000049 : TextConst 'ENU=Hotel;ESP=Hotel';
      Text018@1000000048 : TextConst 'ENU=Hotel name;ESP=Nombre hotel';
      Text019@1000000047 : TextConst 'ENU=Hotel zone;ESP=Zona hotel';
      Text020@1000000046 : TextConst 'ENU=Adult price;ESP=Precio adulto';
      Text021@1000000045 : TextConst 'ENU=Child price;ESP=Precio ni¤o';
      Text022@1000000044 : TextConst 'ENU=Reservation income;ESP=Ingreso reserva';
      Text023@1000000043 : TextConst 'ENU=Net reservation income;ESP=Ingreso reserva neto';
      Text024@1000000042 : TextConst 'ENU=Free adults;ESP=Adultos invitados';
      Text025@1000000041 : TextConst 'ENU=Free childs;ESP=Ni¤os invitados';
      Text026@1000000040 : TextConst 'ENU=Liquidated Sale guide;ESP=Liquidado Guia venta';
      Text027@1000000039 : TextConst 'ENU=Liquidation No.;ESP=Num. Liquidacion';
      Text028@1000000038 : TextConst 'ENU=Liquidation Date;ESP=Fecha liquidacion';
      Text029@1000000037 : TextConst 'ENU=Refund;ESP=Reembolsada';
      Text030@1000000036 : TextConst 'ENU=Liquidation refund;ESP=Liquidacion reembolso';
      Text031@1000000035 : TextConst 'ENU=Refund liquidation date;ESP=Fecha liquidacion reembolso';
      Text032@1000000034 : TextConst 'ENU=Net cost;ESP=Coste neto';
      Text033@1000000033 : TextConst 'ENU=Touroperator commission;ESP=Comision Touroperador';
      Text034@1000000032 : TextConst 'ENU=Commission discount over invoice;ESP=Comision descuenta en factura';
      Text035@1000000031 : TextConst 'ENU=Credit Sale;ESP=Venta a credito';
      Text036@1000000030 : TextConst 'ENU=Sale Person commission;ESP=Comision Representante';
      Text037@1000000029 : TextConst 'ENU=Vendor name;ESP=Nombre proveedor';
      Text038@1000000028 : TextConst 'ENU=Sale office;ESP=Oficina de venta';
      Text039@1000000027 : TextConst 'ENU=Invoice No.;ESP=Factura venta';
      Text040@1000000026 : TextConst 'ENU=Credit memo Refund;ESP=Abono reembolso';
      Text041@1000000025 : TextConst 'ENU=Refund date;ESP=Fecha Reembolso';
      Text042@1000000024 : TextConst 'ENU=Sale country;ESP=Pais venta';
      Text043@1000000023 : TextConst 'ENU=Zone name;ESP=Nombre zona';
      Text044@1000000022 : TextConst 'ENU=Preparing data #1############################;ESP=Preparando datos de #1############################';
      Text045@1000000021 : TextConst 'ENU=Refund amount;ESP=Importe Reembolsado';
      Text046@1000000020 : TextConst 'ENU=Company;ESP=Compa¤ia';
      Text047@1000000019 : TextConst 'ENU=Confirmed cost;ESP=Coste confirmado';
      Text060@1000000018 : TextConst 'ENU=Validated cost;ESP=Coste Validado';
      Text069@1000000017 : TextConst 'ENU=Liquidation date;ESP=Fecha liquidacion';
      Text070@1000000016 : TextConst 'ENU=Invoice Posting date;ESP=Fecha registro factura';
      Text073@1000000015 : TextConst 'ENU=Maximum 15 days allowed;ESP=Se permite un m ximo de 15 dias.';
      Text074@1000000014 : TextConst 'ENU=Creating excursion sales monitor @1@@@@@@@@@@@@@;ESP=Generando monitor de venta de excursiones @1@@@@@@@@@@@@@';
      Text075@1000000013 : TextConst 'ENU=EXCURSIONS - SALE MONITOR;ESP=EXCURSIONES - MONITOR DE VENTAS';
      Text076@1000000012 : TextConst 'ENU=Created by;ESP=Creado por';
      Text077@1000000011 : TextConst 'ENU=Created day;ESP=Creado dia';
      Text078@1000000010 : TextConst 'ENU=Period;ESP=Periodo';
      Text079@1000000009 : TextConst 'ENU=Sale channel;ESP=Canal venta';
      wDialog@1000000063 : Dialog;
      wFechaDesde@1000000064 : Date;
      wFechaHasta@1000000065 : Date;
      wTipoFechas@1000000067 : 'Venta,Servicio';

    LOCAL PROCEDURE _CabeceraMonitor@1000000005(pwFechaDesde@1000000000 : Date;pwFechaHasta@1000000001 : Date);
    BEGIN
      // _CabeceraMonitor

      wLinea += 1;
      cExcel.ValorCelda(1, 1, rDelegacion.Nombre, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(1, 15, Text075, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(1, 35, Text076, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(1, 36, USERID, FALSE, FALSE, FALSE);

      wLinea += 1;
      cExcel.ValorCelda(2, 1, Text078, TRUE, FALSE, FALSE);
      IF wTipoFechas = wTipoFechas::Venta THEN
        cExcel.ValorCelda(2, 2, Text004, TRUE, FALSE, FALSE)
      ELSE
        cExcel.ValorCelda(2, 2, Text012, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(2, 3, FORMAT(pwFechaDesde), FALSE, FALSE, FALSE);
      cExcel.ValorCelda(2, 4, FORMAT(pwFechaHasta), FALSE, FALSE, FALSE);

      cExcel.ValorCelda(2, 35, Text077, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(2, 36, FORMAT(CURRENTDATETIME), FALSE, FALSE, FALSE);

      wLinea += 2;

      cExcel.ValorCelda(4, 1, Text007, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 2, Text004, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 3, Text005, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 4, Text006, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 5, Text014, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 6, Text008, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 7, Text009, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 8, Text010, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 9, Text011, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 10, Text012, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 11, Text013, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 12, Text015, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 13, Text016, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 14, Text017, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 15, Text018, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 16, Text019, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 17, Text022, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 18, Text023, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 19, Text024, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 20, Text025, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 21, Text032, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 22, Text033, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 23, Text034, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 24, Text035, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 25, Text036, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 26, Text037, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 27, Text038, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 28, Text039, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 29, Text040, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 30, Text042, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 31, Text043, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 32, Text047, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 33, Text060, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 34, Text069, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 35, Text070, TRUE, FALSE, FALSE);
      cExcel.ValorCelda(4, 36, Text079, TRUE, FALSE, FALSE); //+$002
    END;

    LOCAL PROCEDURE _CosteConfirmadoReserva@1000000003(prReserva@1000000000 : Record 7010162;pwCosteTicket@1000000004 : Boolean;VAR pwImporteConfirmado@1000000001 : Decimal;VAR pwImporteValidado@1000000002 : Decimal);
    VAR
      lrCoste@1000000003 : Record 7010166;
      lrPrestacion@1000000005 : Record 7010170;
      lwDivisa@1000000006 : Code[10];
      lwCosteProveedor@1000000007 : Decimal;
      lwValidadoProveedor@1000000008 : Decimal;
    BEGIN
      // _CosteConfirmadoReserva

      lrPrestacion.RESET;
      lrPrestacion.SETRANGE(Delegacion   , prReserva.Delegacion);
      lrPrestacion.SETRANGE("N§ Servicio", prReserva."N§ Servicio");
      IF lrPrestacion.FINDSET THEN
      BEGIN
        REPEAT
          lwCosteProveedor    := 0;
          lwValidadoProveedor := 0;

          lrCoste.RESET;
          lrCoste.SETCURRENTKEY(Delegacion, "N§ Servicio", Prestacion, "Num. Ticket");
          lrCoste.SETRANGE(Delegacion   , prReserva.Delegacion);
          lrCoste.SETRANGE("N§ Servicio", prReserva."N§ Servicio");
          IF pwCosteTicket THEN
            lrCoste.SETRANGE("Num. Ticket", prReserva."N§ Ticket");
          lrCoste.SETRANGE(Prestacion   , lrPrestacion."Orden Prestacion");
          IF lrCoste.FINDFIRST THEN
          BEGIN
            lrCoste.CALCSUMS(lrCoste."Importe sin Impuesto");
            lwCosteProveedor := lrCoste."Importe sin Impuesto";
            lwDivisa         := lrCoste."Cod. divisa";

            lrCoste.SETFILTER("N§ Factura", '<>%1', '');
            IF lrCoste.FINDFIRST THEN
            BEGIN
              lrCoste.CALCSUMS(lrCoste."Importe sin Impuesto");
              lwValidadoProveedor := lrCoste."Importe sin Impuesto";
            END;

            //. Hago esta comparacion para evitar convertir la divisa US3 en la divisa de venta ya que ambas son dolares
            IF COPYSTR(lwDivisa, 1, 2) <> COPYSTR(rPar."Divisa venta excursiones", 1, 2) THEN
            BEGIN
              lwCosteProveedor := rExchange.ExchangeAmtFCYToFCY(prReserva."Fecha Venta", lwDivisa, rPar."Divisa venta excursiones",
                                                                lwCosteProveedor);
              lwCosteProveedor := ROUND(lwCosteProveedor);

              lwValidadoProveedor := rExchange.ExchangeAmtFCYToFCY(prReserva."Fecha Venta", lwDivisa, rPar."Divisa venta excursiones",
                                                                   lwValidadoProveedor);
              lwValidadoProveedor := ROUND(lwValidadoProveedor);
            END;
          END;

          pwImporteConfirmado += lwCosteProveedor;
          pwImporteValidado   += lwValidadoProveedor;
        UNTIL lrPrestacion.NEXT = 0;
      END;

      //. Si el coste no es por ticket vamos a prorratear
      IF (NOT pwCosteTicket) AND (pwImporteConfirmado <> 0) THEN
      BEGIN
        pwImporteConfirmado := ROUND(pwImporteConfirmado / lrCoste."Personas servicio" * prReserva."N§ Personas");
        pwImporteValidado   := ROUND(pwImporteValidado / lrCoste."Personas servicio" * prReserva."N§ Personas");
      END;
    END;

    LOCAL PROCEDURE _NombreProveedor@1100217008(pwExcursion@1100217000 : Code[10]) : Text[250];
    VAR
      lrVendor@1100217001 : Record 23;
      lrExc@1100217002 : Record 7009710;
      lrPrestCont@1100217003 : Record 7010141;
      lrCont@1100217004 : Record 7010142;
    BEGIN
      lrExc.CHANGECOMPANY(rCompany.Name);
      IF NOT lrExc.GET(pwExcursion) THEN
        EXIT('');

      IF lrExc."Transporte organizado agencia" THEN
        EXIT('IN HOUSE');

      lrPrestCont.RESET;
      lrPrestCont.CHANGECOMPANY(rCompany.Name);
      lrPrestCont.SETRANGE("Codigo Producto", pwExcursion);
      IF lrPrestCont.FINDSET THEN
      BEGIN
        lrCont.CHANGECOMPANY(rCompany.Name);
        lrCont.SETRANGE("N§ Contrato compra", lrPrestCont.Contrato);
        lrCont.SETRANGE("Tipo Contrato"     , lrPrestCont."Tipo Contrato");
        IF lrCont.FINDFIRST THEN
        BEGIN
          lrVendor.CHANGECOMPANY(rCompany.Name);
          IF lrVendor.GET(lrCont.Proveedor) THEN
            EXIT(lrVendor.Name);
        END;
      END;
    END;

    PROCEDURE _GetFechaRegistroFra@1100217016(pwFactura@1100217000 : Code[20]) : Date;
    VAR
      lrCabVenta@1100217001 : Record 36;
      lrHistFra@1100217002 : Record 112;
    BEGIN
      // _GetFechaRegistroFra

      lrHistFra.CHANGECOMPANY(rCompany.Name);
      IF lrHistFra.GET(pwFactura) THEN
        EXIT(lrHistFra."Posting Date")
      ELSE
      BEGIN
        lrCabVenta.CHANGECOMPANY(rCompany.Name);
        IF lrCabVenta.GET(lrCabVenta."Document Type"::Invoice, pwFactura) THEN
          EXIT(lrCabVenta."Posting Date");
      END;
    END;

    BEGIN
    {
      $001 AJS 27072015 Convierto la codeunit 7010176 en este report para dar m s flexibilidad a la hora de filtrar
    }
    END.
  }
  RDLDATA
  {
  }
}
