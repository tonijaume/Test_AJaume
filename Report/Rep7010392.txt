OBJECT Report 7010392 Estd. Cliente Plazas/Servicio
{
  OBJECT-PROPERTIES
  {
    Date=23/01/15;
    Time=13:02:39;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    CaptionML=ESP=Estd. Cliente Plazas/Servicio;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN

                   CLEAR(rExcel);
                   rExcel.DELETEALL;
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table18;
        DataItemTableView=SORTING(No.);
        OnPreDataItem=BEGIN
                        IF wCliente='' THEN
                          ERROR(Text00001);

                        IF (wFechas[1]=0D) OR (wFechas[2]=0D) THEN
                          ERROR(Text00005);

                        GET(wCliente);
                        SETRANGE("No.",wCliente);

                        CLEAR(wCol);
                        CLEAR(wFil);


                        rExcel.CreateBook;
                        rExcel.BorraSheets; // Borramos las hojas existentes
                      END;

        OnAfterGetRecord=BEGIN

                           PasaCliente(Customer);
                         END;

        OnPostDataItem=VAR
                         lwCont@1100253000 : Integer;
                         lwNom@1100253001 : Text[250];
                       BEGIN
                         // Configura las distintas hojas

                         FOR lwCont :=1 TO 3 DO BEGIN
                           CASE lwCont OF
                             1: lwNom := Text00003;
                             2: lwNom := Text00011;
                             3: lwNom := Text00012;
                           END;
                           IF rExcel.BuscaHoja(lwNom) THEN BEGIN
                             rExcel.AjustaImpresionHoja('','1:5','',0,2,1,10, lwNom);
                           END;
                         END;

                         rExcel.GiveUserControl;
                       END;

      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=14960;
      Height=3410;
    }
    CONTROLS
    {
      { 1100253000;TextBox;3630 ;220  ;3520 ;440  ;CaptionML=ESP=Cliente;
                                                   SourceExpr=wCliente;
                                                   TableRelation=Customer }
      { 1100253001;Label  ;220  ;220  ;3300 ;440  ;ParentControl=1100253000 }
      { 1100253002;TextBox;7260 ;220  ;7480 ;440  ;SourceExpr=NombreCliente(wCliente) }
      { 1100253003;TextBox;3630 ;880  ;1760 ;440  ;CaptionML=ESP=Fechas;
                                                   NextControl=1100253005;
                                                   SourceExpr=wFechas[1];
                                                   OnValidate=BEGIN

                                                                IF (wFechas[1] > wFechas[2]) AND (wFechas[2] <> 0D) THEN
                                                                  ERROR(Text00004);
                                                              END;
                                                               }
      { 1100253004;Label  ;220  ;880  ;3300 ;440  ;ParentControl=1100253003 }
      { 1100253005;TextBox;5500 ;880  ;1760 ;440  ;SourceExpr=wFechas[2];
                                                   OnValidate=BEGIN
                                                                IF (wFechas[1] > wFechas[2]) AND (wFechas[2] <> 0D) THEN
                                                                  ERROR(Text00004);
                                                              END;
                                                               }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      rExcel@1100253000 : TEMPORARY Record 7035385;
      wCliente@1100253001 : Code[20];
      Text00001@1100253002 : TextConst 'ESP=Debe de seleccionar un cliente';
      Text00002@1100253003 : TextConst 'ESP=Estadistica Cliente';
      wCol@1100253004 : Integer;
      wFil@1100253005 : Integer;
      Text00003@1100253006 : TextConst 'ESP=General';
      wFechas@1100253007 : ARRAY [2] OF Date;
      Text00004@1100253008 : TextConst 'ESP=Fecha Inicio no puede ser posterior a Fecha Fin';
      Text00005@1100253009 : TextConst 'ESP=Debe de definirse un rango de fechas';
      rTemp@1100253010 : TEMPORARY Record 7010427;
      rRangos@1100253012 : TEMPORARY Record 7010430;
      wVentana@1100253011 : Dialog;
      Text00006@1100253013 : TextConst 'ESP=No se ha encontrado contrato para %1 %2';
      Text00007@1100253014 : TextConst 'ESP=#1###################\@2@@@@@@@@@@@@@@@@@@@';
      Text00008@1100253015 : TextConst 'ESP=Crendo Temporal (Rangos)';
      Text00009@1100253016 : TextConst 'ESP=Crendo Temporal (Datos)';
      wCont@1100253017 : Integer;
      wTotal@1100253018 : Integer;
      Text00010@1100253019 : TextConst 'ESP=TOTAL';
      Text00011@1100253020 : TextConst 'ESP=Touroperador';
      Text00012@1100253021 : TextConst 'ESP=Rangos por Servicio';

    PROCEDURE NombreCliente@1100253004(pwCod@1100253001 : Code[20]) : Text[50];
    VAR
      lrCli@1100253000 : Record 18;
    BEGIN
      // NombreCliente
      // Devuelve el nombre del cliente

      IF lrCli.GET(pwCod) THEN
        EXIT(lrCli.Name);
    END;

    PROCEDURE PasaCliente@1100253002(prCli@1100253000 : Record 18);
    BEGIN
      // PasaCliente

      wVentana.OPEN(Text00007);
      CreaTemporal(prCli);

      HojaRANGO(prCli);
      HojaTTOO(prCli);
      HojaGeneral(prCli);

      wVentana.CLOSE;
    END;

    PROCEDURE HojaGeneral@1100253001(prCli@1100253000 : Record 18);
    VAR
      lrTemp2@1100253007 : TEMPORARY Record 7010427;
      lwCont@1100253001 : Integer;
      lwTipos@1100253002 : 'CLIENTE,TOUROPERADOR,TIPO SERVICIO,CODIGO SERVICIO';
      lwTitulos@1100253003 : ', ,INGRESO,INGRESO FACTURADO,SERVICIOS,ADULTOS,NI¥OS,PASAJE,OCUPACION MEDIA,ADULTOS INVITADOS,NI¥OS INVITADOS';
      lwTexto@1100253004 : Text[30];
      lwFilAnt@1100253006 : Integer;
    BEGIN
      // HojaGeneral

      { Redefinimos el significado del campo "Tipo registro" Seg£n las nuevas necesidades:
        0: Cliente;
        1: Touroperador;
        2: Tipo Servicio Cliente
        3: Codigo Servicio Cliente
        4: Codigo Servicio TTOO
        5: Plazas por Tipo Servicio Fijo TTOO
        6: Plazas por Codigo Servicio TTOO
      }


      IF rExcel.FINDFIRST THEN
        rExcel.DELETEALL;

      wCol :=1;
      wFil :=1;
      rExcel.INIT;
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := UPPERCASE(Text00002);
      rExcel."Texto Alineacion Horizontal" :=2; // Izquierda
      rExcel.Bold                   := TRUE;
      rExcel.INSERT;

      wFil +=2;  // Cliente
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel."Cell Value as Text"   := prCli."No.";
      rExcel.INSERT;

      wCol +=1;
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := prCli.Name;
      rExcel.INSERT;

      wFil +=1;   // Fechas
      wCol :=1;
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := FORMAT(wFechas[1]);
      rExcel.INSERT;

      wCol +=1;
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := FORMAT(wFechas[2]);
      rExcel.INSERT;

      FOR lwTipos:= 0 TO 3 DO BEGIN
        rTemp.RESET;
        rTemp.SETCURRENTKEY(Usuario,Orden,"Tipo registro",Codigo);
        rTemp.SETRANGE("Tipo registro", lwTipos);
        IF rTemp.FINDSET THEN BEGIN
          wFil +=2;
          rExcel.VALIDATE("Row No."      , wFil);

          // Linea de titulos
          FOR lwTitulos:= 0 TO 10 DO BEGIN
            rExcel.VALIDATE("Column No."   , lwTitulos + 1);
            IF lwTitulos = 0 THEN
              rExcel."Cell Value as Text"   := FORMAT(lwTipos)
            ELSE
              rExcel."Cell Value as Text"   := FORMAT(lwTitulos);
            rExcel.Bold                   := TRUE;
            CLEAR(rExcel."Texto Alineacion Horizontal");
            IF lwTitulos > 1 THEN
              rExcel."Texto Alineacion Horizontal":=4;
            rExcel.INSERT;
          END;

          lwFilAnt := wFil +1;
          rExcel.Bold                   := FALSE;


          // Lineas de datos
          CLEAR(lrTemp2); // Aqui guardamos los totales
          REPEAT
            SumaTemp(rTemp, lrTemp2);
            wFil +=1;
            rExcel.VALIDATE("Row No."      , wFil);
            FOR lwTitulos:= 0 TO 10 DO BEGIN
              rExcel.VALIDATE("Column No."   , lwTitulos + 1);
              CLEAR(rExcel."Texto Alineacion Horizontal");
              IF lwTitulos > 1 THEN
                rExcel."Texto Alineacion Horizontal":=4;
              rExcel."Cell Value as Text" := GetDato(lwTitulos, rTemp);
              rExcel.INSERT;
            END;
          UNTIL rTemp.NEXT=0;

          // Ahora incluimos una linea de Total
          wFil +=1;
          rExcel.VALIDATE("Row No."      , wFil);
          rExcel.Bold                   := TRUE;
          FOR lwTitulos:=0 TO 10 DO BEGIN
            rExcel.VALIDATE("Column No."   , lwTitulos + 1);
            CASE lwTitulos OF
              0 : lwTexto:= Text00010;
              1 : lwTexto:='';
              ELSE lwTexto :=  GetDato(lwTitulos, lrTemp2);
            END;
            rExcel."Cell Value as Text"   :=lwTexto;
            CLEAR(rExcel."Texto Alineacion Horizontal");
            IF lwTitulos > 1 THEN
              rExcel."Texto Alineacion Horizontal":=4;
            rExcel.INSERT;
          END;
        END;
      END;

      rExcel.CreateSheet(Text00003,Text00002,COMPANYNAME,USERID,TRUE,TRUE,Text00003);
    END;

    PROCEDURE HojaTTOO@1100253006(prCli@1100253000 : Record 18);
    VAR
      lrTemp2@1100253007 : TEMPORARY Record 7010427;
      lrTempAnt@1100253008 : TEMPORARY Record 7010427;
      lwCont@1100253001 : Integer;
      lwTipos@1100253002 : ',TTOO,RANGO,CODIGO SERVICIO';
      lwTipo@1100253005 : Integer;
      lwTitulos@1100253003 : ',CLIENTE,TTOO,RANGO,CODIGO SERVICIO,DESCRIPCION,INGRESO,SERVICIOS,ADULTOS,NI¥OS,PASAJE,PASAGE EFECTIVO,INGRESOS POR SERVICIO,INGRESOS POR PASAGE EFECTIVO,PASAGE EFECTIVO POR SERVICIO';
      lwTexto@1100253004 : Text[30];
      lwFilAnt@1100253006 : Integer;
    BEGIN
      // HojaTTOO

      { Redefinimos el significado del campo "Tipo registro" Seg£n las nuevas necesidades:
        0: Cliente;
        1: Touroperador;
        2: Tipo Servicio Cliente
        3: Codigo Servicio Cliente
        4: Codigo Servicio TTOO
        5: Plazas por Tipo Servicio Fijo TTOO
        6: Plazas por Codigo Servicio TTOO
      }

      IF rExcel.FINDFIRST THEN
        rExcel.DELETEALL;

      wCol :=1;
      wFil :=1;
      rExcel.INIT;
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := UPPERCASE(Text00002);
      rExcel."Texto Alineacion Horizontal" :=2; // Izquierda
      rExcel.Bold                   := TRUE;
      rExcel.INSERT;

      wFil +=2;  // Cliente
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel."Cell Value as Text"   := prCli."No.";
      rExcel.INSERT;

      wCol +=1;
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := prCli.Name;
      rExcel.INSERT;

      wFil +=1;   // Fechas
      wCol :=1;
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := FORMAT(wFechas[1]);
      rExcel.INSERT;

      wCol +=1;
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := FORMAT(wFechas[2]);
      rExcel.INSERT;


      FOR lwTipos:= 1 TO 3 DO BEGIN
        CASE lwTipos OF
          1: lwTipo := 1;
          2: lwTipo := 5;
          3: lwTipo := 4;
        END;

        rTemp.RESET;
        rTemp.SETCURRENTKEY(Usuario,Orden,"Tipo registro",Codigo);
        rTemp.SETRANGE("Tipo registro", lwTipo);
        IF rTemp.FINDSET THEN BEGIN
          wFil +=2;
          rExcel.VALIDATE("Row No."      , wFil);
          rExcel.VALIDATE(Bordes         ,2);
          // Linea de titulos
          FOR lwTitulos:= 1 TO 14 DO BEGIN
            rExcel.VALIDATE("Column No."   , lwTitulos);
            IF lwTitulos = 0 THEN
              rExcel."Cell Value as Text"   := FORMAT(lwTipos)
            ELSE
              rExcel."Cell Value as Text"   := FORMAT(lwTitulos);
            rExcel.Bold                   := TRUE;
            CLEAR(rExcel."Texto Alineacion Horizontal");
            IF lwTitulos > 5 THEN
              rExcel."Texto Alineacion Horizontal":=4;
            rExcel.INSERT;
          END;

          lwFilAnt := wFil +1; // Primero fila
          rExcel.Bold                   := FALSE;

          // Lineas de datos
          CLEAR(lrTemp2);   // Aqui guardamos los totales
          CLEAR(lrTempAnt); // Registro Anterior
          REPEAT
            SumaTemp(rTemp, lrTemp2);
            wFil +=1;
            rExcel.VALIDATE("Row No."      , wFil);
            FOR lwTitulos:= 1 TO 14 DO BEGIN
              rExcel.VALIDATE("Column No."   , lwTitulos);
              CLEAR(rExcel."Texto Alineacion Horizontal");
              IF lwTitulos > 5 THEN
                rExcel."Texto Alineacion Horizontal":=4;
              rExcel."Cell Value as Text" := GetDato2(lwTitulos,lwTipo,rTemp, lrTempAnt);
              rExcel."Borde Sup" := 2;
              rExcel."Borde Abaj":= 2;
              CASE lwTitulos OF
                1: BEGIN
                     IF lwFilAnt <> wFil THEN // Primera fila
                       rExcel."Borde Sup" :=0;
                     rExcel."Borde Abaj":=0;
                   END;
                2: BEGIN
                     IF rTemp.Usuario = lrTempAnt.Usuario THEN  // Cambio de TTOO
                       rExcel."Borde Sup" := 0;
                     rExcel."Borde Abaj":= 0;
                   END;
              END;
              rExcel.INSERT;
            END;
            lrTempAnt := rTemp;
          UNTIL rTemp.NEXT=0;

          // Ahora incluimos una linea de Total
          wFil +=1;
          rExcel.VALIDATE("Row No."      , wFil);
          rExcel.Bold                   := TRUE;
          CLEAR(lrTempAnt);
          FOR lwTitulos:=1 TO 14 DO BEGIN
            rExcel.VALIDATE("Column No."   , lwTitulos);
            CASE lwTitulos OF
              1 : BEGIN
                    rExcel."Fusionar hasta celda" := rExcel.DevuelveCelda(wFil, lwTitulos+4);
                    lwTexto:= Text00010;
                  END;
              2..5: BEGIN
                    lwTexto:= '';
                    rExcel."Fusionar hasta celda" := '';
                  END;
              ELSE lwTexto :=  GetDato2(lwTitulos, lwTipo, lrTemp2, lrTempAnt);
            END;
            rExcel."Cell Value as Text"   :=lwTexto;
            CLEAR(rExcel."Texto Alineacion Horizontal");
            IF lwTitulos > 5 THEN
              rExcel."Texto Alineacion Horizontal":=4;
            rExcel.INSERT;
          END;
        END;
      END;

      rExcel.CreateSheet(Text00011,Text00002,COMPANYNAME,USERID,TRUE,TRUE,Text00011);
    END;

    PROCEDURE HojaRANGO@1100253008(prCli@1100253000 : Record 18);
    VAR
      lrTemp2@1100253007 : TEMPORARY Record 7010427;
      lrTempAnt@1100253008 : TEMPORARY Record 7010427;
      lwCont@1100253001 : Integer;
      lwTitulos@1100253003 : ',CLIENTE,TTOO,RANGO,CODIGO SERVICIO,DESCRIPCION,INGRESO,SERVICIOS,ADULTOS,NI¥OS,PASAJE,PASAGE EFECTIVO,INGRESOS POR SERVICIO,INGRESOS POR PASAGE EFECTIVO,PASAGE EFECTIVO POR SERVICIO';
      lwTexto@1100253004 : Text[30];
      lwFilAnt@1100253006 : Integer;
    BEGIN
      // HojaRANGO

      { Redefinimos el significado del campo "Tipo registro" Seg£n las nuevas necesidades:
        0: Cliente;
        1: Touroperador;
        2: Tipo Servicio Cliente
        3: Codigo Servicio Cliente
        4: Codigo Servicio TTOO
        5: Plazas por Tipo Servicio Fijo TTOO
        6: Plazas por Codigo Servicio TTOO
      }

      IF rExcel.FINDFIRST THEN
        rExcel.DELETEALL;

      wCol :=1;
      wFil :=1;
      rExcel.INIT;
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := UPPERCASE(Text00002);
      rExcel."Texto Alineacion Horizontal" :=2; // Izquierda
      rExcel.Bold                   := TRUE;
      rExcel.INSERT;

      wFil +=2;  // Cliente
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel."Cell Value as Text"   := prCli."No.";
      rExcel.INSERT;

      wCol +=1;
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := prCli.Name;
      rExcel.INSERT;

      wFil +=1;   // Fechas
      wCol :=1;
      rExcel.VALIDATE("Row No."      , wFil);
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := FORMAT(wFechas[1]);
      rExcel.INSERT;

      wCol +=1;
      rExcel.VALIDATE("Column No."   , wCol);
      rExcel."Cell Value as Text"   := FORMAT(wFechas[2]);
      rExcel.INSERT;

      rTemp.RESET;
      rTemp.SETCURRENTKEY(Usuario,Orden,"Tipo registro",Codigo);
      rTemp.SETRANGE("Tipo registro", 6);
      IF rTemp.FINDSET THEN BEGIN
        wFil +=2;
        rExcel.VALIDATE("Row No."      , wFil);
        rExcel.VALIDATE(Bordes         ,2);
        // Linea de titulos
        FOR lwTitulos:= 1 TO 14 DO BEGIN
          rExcel.VALIDATE("Column No."   , lwTitulos);
          rExcel."Cell Value as Text"   := FORMAT(lwTitulos);
          rExcel.Bold                   := TRUE;
          CLEAR(rExcel."Texto Alineacion Horizontal");
          IF lwTitulos > 5 THEN
            rExcel."Texto Alineacion Horizontal":=4;
          rExcel.INSERT;
        END;

        lwFilAnt := wFil +1; // Primero fila
        rExcel.Bold                   := FALSE;

        // Lineas de datos
        CLEAR(lrTemp2);   // Aqui guardamos los totales
        CLEAR(lrTempAnt); // Registro Anterior
        REPEAT
          SumaTemp(rTemp, lrTemp2);
          wFil +=1;
          rExcel.VALIDATE("Row No."      , wFil);
          FOR lwTitulos:= 1 TO 14 DO BEGIN
            rExcel.VALIDATE("Column No."   , lwTitulos);
            CLEAR(rExcel."Texto Alineacion Horizontal");
            IF lwTitulos > 5 THEN
              rExcel."Texto Alineacion Horizontal":=4;
            rExcel."Cell Value as Text" := GetDato2(lwTitulos, 6 ,rTemp, lrTempAnt);
            rExcel."Borde Sup" := 2;
            rExcel."Borde Abaj":= 2;
            CASE lwTitulos OF
              1: BEGIN
                   IF lwFilAnt <> wFil THEN // Primera fila
                     rExcel."Borde Sup" :=0;
                   rExcel."Borde Abaj":=0;
                 END;
              2: BEGIN
                   IF rTemp.Usuario = lrTempAnt.Usuario THEN  // Cambio de TTOO
                     rExcel."Borde Sup" := 0;
                   rExcel."Borde Abaj":= 0;
                 END;
              END;
            rExcel.INSERT;
          END;
          lrTempAnt := rTemp;
        UNTIL rTemp.NEXT=0;

        // Ahora incluimos una linea de Total
        wFil +=1;
        rExcel.VALIDATE("Row No."      , wFil);
        rExcel.Bold                   := TRUE;
        CLEAR(lrTempAnt);
        FOR lwTitulos:=1 TO 14 DO BEGIN
          rExcel.VALIDATE("Column No."   , lwTitulos);
          CASE lwTitulos OF
            1 : BEGIN
                  rExcel."Fusionar hasta celda" := rExcel.DevuelveCelda(wFil, lwTitulos+4);
                  lwTexto:= Text00010;
                END;
            2..5: BEGIN
                  lwTexto:= '';
                  rExcel."Fusionar hasta celda" := '';
                END;
            ELSE lwTexto :=  GetDato2(lwTitulos, 6, lrTemp2, lrTempAnt);
          END;
          rExcel."Cell Value as Text"   :=lwTexto;
          CLEAR(rExcel."Texto Alineacion Horizontal");
          IF lwTitulos > 5 THEN
            rExcel."Texto Alineacion Horizontal":=4;
          rExcel.INSERT;
        END;
      END;

      rExcel.CreateSheet(Text00012,Text00002,COMPANYNAME,USERID,TRUE,FALSE,Text00012);
    END;

    PROCEDURE CreaTemporal@1100253009(prCli@1100253002 : Record 18);
    VAR
      lrToPar@1100253005 : Record 7010365;
      lrTipSer@1100253006 : Record 7010319;
      lwCont@1100253000 : Integer;
      lwCod@1100253003 : Code[20];
      lwId@1100253004 : Integer;
    BEGIN
      // CreaTemporal
      // Crea el temporal de datos

      CLEAR(lwId);
      CLEAR(lrTipSer);
      BuscaRangos(prCli);

      wVentana.UPDATE(1, Text00009);
      CLEAR(rTemp);
      IF rTemp.FINDFIRST THEN
        rTemp.DELETEALL;

      // Creamos 6 tipos de registro distintos seg£n la aplicacion

      { Redefinimos el significado del campo "Tipo registro" Seg£n las nuevas necesidades:
        0: Cliente;
        1: Touroperador;
        2: Tipo Servicio Cliente
        3: Codigo Servicio Cliente
        4: Codigo Servicio TTOO
        5: Plazas por Tipo Servicio Fijo TTOO
        6: Plazas por Codigo Servicio TTOO
      }
      // Consideraremos el campo Usuario como el Touroperador

      // Primera vuelta por Touroperador x parte para rellenar campos de Viajes y Paxes
      CLEAR(lrToPar);
      lrToPar.SETCURRENTKEY(Confirmado,"Cliente estadistico",Touroperador,"Fecha Facturacion");
      lrToPar.SETRANGE("Cliente estadistico"            , prCli."No.");
      lrToPar.SETRANGE(Confirmado         , TRUE);
      lrToPar.SETRANGE("Fecha Facturacion", wFechas[1], wFechas[2]);
      IF lrToPar.FINDSET THEN BEGIN
        wTotal := lrToPar.COUNT;
        CLEAR(wCont);
        REPEAT
          lrTipSer.GET(lrToPar."Tipo Servicio");
          // Buscamos el rango
          CLEAR(rRangos);
          rRangos.SETCURRENTKEY(Cliente,TTOO,"Tipo Servicio Fijo","Plazas Desde","Plazas Hasta");
          rRangos.SETRANGE(Cliente, lrToPar."Cliente estadistico");
          rRangos.SETRANGE(TTOO   , lrToPar.Touroperador);
          rRangos.SETRANGE("Tipo Servicio Fijo"   , lrTipSer."Tipo fijo");
          rRangos.SETFILTER("Plazas Desde", '<=%1', lrToPar."Pax Transportados");
          rRangos.SETFILTER("Plazas Hasta", '>=%1', lrToPar."Pax Transportados");
          IF NOT rRangos.FINDFIRST THEN
            CLEAR(rRangos);

          FOR lwCont:=0 TO 6 DO BEGIN
            CASE lwCont OF
              0  : lwCod := lrToPar."Cliente estadistico";
              1  : lwCod := lrToPar.Touroperador;
              2  : lwCod := lrToPar."Tipo Servicio";
              3,4: lwCod := lrToPar."Codigo Servicio";
              5  : lwCod := STRSUBSTNO('%1 # %2', rRangos."A¤adir a Texto Registro", lrTipSer."Tipo fijo");
              6  : lwCod := STRSUBSTNO('%1 # %2', rRangos."A¤adir a Texto Registro", lrToPar."Codigo Servicio");
            END;

            CLEAR(rTemp);
            rTemp.SETCURRENTKEY(Usuario,Orden,"Tipo registro",Codigo);
            rTemp.SETRANGE("Tipo registro", lwCont);
            rTemp.SETRANGE(Codigo         , lwCod);
            IF lwCont IN [4..6] THEN // Tipos que son por TTOO
              rTemp.SETRANGE(Usuario        , lrToPar.Touroperador);

            IF NOT rTemp.FINDFIRST THEN BEGIN
              lwId +=1;
              rTemp.INIT;
              rTemp.Id              := lwId;
              rTemp."Tipo registro" := lwCont;
              rTemp.Codigo          := lwCod;
              rTemp."Filtro Fecha"  := GetDescripcion(lwCod, lwCont);
              IF lwCont IN [1,4,5,6] THEN // Los tipos que van por touroperador
                rTemp.Usuario       := lrToPar.Touroperador;
              rTemp.Orden           := rRangos."Plazas Desde";
              IF lwCont=5 THEN
                rTemp.Orden := (rRangos."Tipo Servicio Fijo"*10000) + rTemp.Orden;
              rTemp.INSERT;
            END;

            rTemp.Servicios           += 1;
            rTemp.Pasaje              += lrToPar."Adultos transportados" + lrToPar."Ni¤os transportados";
            rTemp.Adultos             += lrToPar."Adultos transportados";
            rTemp.Ni¤os               += lrToPar."Ni¤os transportados";
            rTemp."Adultos invitados" += lrToPar."Adultos invitados ingreso";
            rTemp."Ni¤os invitados"   += lrToPar."Ni¤os invitados ingreso";

            lrToPar.SETRANGE("Filtro Num Factura");

            rTemp.Ingreso += lrToPar.TotalIngresoDL;

            // Utilizamos el campo Coste para guardar el Ingreso Facturado
            lrToPar.SETFILTER("Filtro Num Factura",'<>%1','');
            rTemp.Coste   += lrToPar.TotalIngresoDL;

            rTemp.MODIFY;
          END;
          wCont += 1;
          wVentana.UPDATE(2, ROUND(wCont/wTotal*10000,1));
        UNTIL lrToPar.NEXT=0;
      END;
    END;

    PROCEDURE BuscaRangos@1100253000(prCli@1100253000 : Record 18);
    VAR
      lrCon@1100253001 : Record 7010403;
      lrClitTo@1100253002 : Record 7010313;
      lrPre@1100253003 : Record 7010405;
      lwId@1100253004 : Integer;
      lwNoCon@1100253005 : Code[10];
    BEGIN
      // BuscaRangos
      // Crea un temporal con el rango de plazas del contrato de venta para el cliente

      wVentana.UPDATE(1, Text00008);

      CLEAR(lwId);
      CLEAR(rRangos);
      IF rRangos.FINDFIRST THEN
        rRangos.DELETEALL;

      CLEAR(lrClitTo);
      lrClitTo.SETRANGE(Cliente, prCli."No.");
      IF lrClitTo.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrCon);
          lrCon.SETCURRENTKEY(Cliente, Touroperador, "Fecha inicio contrato", "Fecha final contrato");
          lrCon.SETRANGE (Cliente                , lrClitTo.Cliente);
          lrCon.SETRANGE (Touroperador           , lrClitTo.TTOO);
          lrCon.SETFILTER("Fecha inicio contrato", '<=%1', wFechas[1]);
          lrCon.SETFILTER("Fecha final contrato" , '>=%1', wFechas[2]);
          lrCon.SETRANGE (Confirmado             , TRUE);
          IF NOT lrCon.FINDFIRST THEN BEGIN
            lrCon.SETRANGE("Fecha inicio contrato");
            lrCon.SETRANGE("Fecha final contrato");
            lrCon.ASCENDING(FALSE);
          END;
          IF lrCon.FINDFIRST THEN BEGIN
            CLEAR(lwNoCon);
            IF lrCon."Basado en contrato n§" = '' THEN
              lwNoCon := lrCon."N§ Contrato"
            ELSE
              lwNoCon := lrCon."Basado en contrato n§";
            CLEAR(lrPre);
            lrPre.SETRANGE(Garaje       , lrCon.Garaje);
            lrPre.SETRANGE("N§ Contrato", lwNoCon);
            lrPre.SETRANGE("Tipo precio", lrPre."Tipo precio"::"Precio Base");
            IF lrPre.FINDSET THEN BEGIN
              REPEAT
                IF (lrPre."Rango desde" <> 0) AND (lrPre."Rango hasta" <> 0) THEN BEGIN
                  rRangos.SETCURRENTKEY(Cliente,TTOO,"Tipo Servicio Fijo","Plazas Desde","Plazas Hasta");
                  rRangos.SETRANGE(Cliente             , lrClitTo.Cliente);
                  rRangos.SETRANGE(TTOO                , lrClitTo.TTOO);
                  rRangos.SETRANGE("Tipo Servicio Fijo", lrPre."Tipo Servicio fijo");
                  rRangos.SETRANGE("Plazas Desde"      , lrPre."Rango desde");
                  rRangos.SETRANGE("Plazas Hasta"      , lrPre."Rango hasta");
                  IF NOT rRangos.FINDFIRST THEN BEGIN
                    rRangos.INIT;
                    lwId +=1;
                    rRangos.No := lwId;
                    rRangos.Cliente                   := lrClitTo.Cliente;
                    rRangos.TTOO                      := lrClitTo.TTOO;
                    rRangos."Tipo Servicio Fijo"      := lrPre."Tipo Servicio fijo";
                    rRangos."Plazas Desde"            := lrPre."Rango desde";
                    rRangos."Plazas Hasta"            := lrPre."Rango hasta";
                    rRangos."A¤adir a Texto Registro" := STRSUBSTNO('%1..%2', lrPre."Rango desde",lrPre."Rango hasta");
                    rRangos.INSERT;
                  END;
                END;
              UNTIL lrPre.NEXT=0;
            END;
          END;

          //-$001ELSE
          //-$001  ERROR(Text00006, lrClitTo.Cliente,lrClitTo.TTOO);
        UNTIL lrClitTo.NEXT=0;
      END;
    END;

    PROCEDURE GetDescripcion@1100253003(pwCodigo@1100253000 : Code[20];pwTipo@1100253001 : Integer) : Text[30];
    VAR
      lwText@1100253002 : Text[30];
      lrCli@1100253003 : Record 18;
      lrTo@1100253004 : Record 7010312;
      lrTip@1100253005 : Record 7010319;
      lrCod@1100253006 : Record 7010320;
      lwPos@1100253007 : Integer;
    BEGIN
      // GetDescripcion
      // Devuelve la descripci¢n seg£n el tipo

      { Redefinimos el significado del campo "Tipo registro" Seg£n las nuevas necesidades:
        0: Cliente;
        1: Touroperador;
        2: Tipo Servicio Cliente
        3: Codigo Servicio Cliente
        4: Codigo Servicio TTOO
        5: Plazas por Tipo Servicio Fijo TTOO
        6: Plazas por Codigo Servicio TTOO
      }

      IF pwTipo IN [5,6] THEN BEGIN  // Le quitamos los rangos de plazas
        lwPos    := STRPOS(pwCodigo,'#');
        pwCodigo := COPYSTR(pwCodigo, lwPos+1);
      END;

      CLEAR(lwText);
      CASE pwTipo OF
        0: BEGIN  // Cliente
             CLEAR(lrCli);
             IF lrCli.GET(pwCodigo) THEN
               lwText := COPYSTR(lrCli.Name,1,MAXSTRLEN(lwText));
           END;
        1: BEGIN  // Touroperador
             CLEAR(lrTo);
             IF lrTo.GET(pwCodigo) THEN
               lwText := COPYSTR(lrTo.Nombre,1,MAXSTRLEN(lwText));
           END;
        2: BEGIN // Tipo Servicio
             CLEAR(lrTip);
             IF lrTip.GET(pwCodigo) THEN
               lwText := lrTip.Descripcion;
           END;
        3,4,6: BEGIN // Codigo Servicio
             CLEAR(lrCod);
             IF lrCod.GET(pwCodigo) THEN
               lwText := lrCod.Descripcion;
           END;
        5: lwText := pwCodigo;
      END;

      EXIT(lwText);
    END;

    PROCEDURE SumaTemp@1100253005(VAR rOrigen@1100253000 : TEMPORARY Record 7010427;VAR rDestino@1100253001 : TEMPORARY Record 7010427);
    BEGIN
      // SumaTemp
      // Suma los campos de Origen a Destino

      rDestino.Ingreso             += rOrigen.Ingreso;
      rDestino.Coste               += rOrigen.Coste;
      rDestino.Servicios           += rOrigen.Servicios;
      rDestino.Pasaje              += rOrigen.Pasaje;
      rDestino.Adultos             += rOrigen.Adultos;
      rDestino.Ni¤os               += rOrigen.Ni¤os;
      rDestino."Adultos invitados" += rOrigen."Adultos invitados";
      rDestino."Ni¤os invitados"   += rOrigen."Ni¤os invitados";
    END;

    PROCEDURE GetDato@1100253007(pwTipo@1100253001 : Integer;VAR prTemp@1100253002 : TEMPORARY Record 7010427) : Text[30];
    VAR
      lwTexto@1100253000 : Text[30];
      lwOcupM@1100253003 : Integer;
    BEGIN
      // GetDato

      CLEAR(lwOcupM); // Calculamos la ocupacion media
      IF prTemp.Pasaje <> 0 THEN
        lwOcupM := prTemp.Pasaje DIV prTemp.Pasaje;

      CASE pwTipo OF
        0 : lwTexto := prTemp.Codigo;
        1 : lwTexto := prTemp."Filtro Fecha";
        2 : lwTexto := FORMAT(prTemp.Ingreso);
        3 : lwTexto := FORMAT(prTemp.Coste);
        4 : lwTexto := FORMAT(prTemp.Servicios);
        5 : lwTexto := FORMAT(prTemp.Adultos);
        6 : lwTexto := FORMAT(prTemp.Ni¤os);
        7 : lwTexto := FORMAT(prTemp.Pasaje);
        8 : lwTexto := FORMAT(lwOcupM);
        9 : lwTexto := FORMAT(prTemp."Adultos invitados");
        10: lwTexto := FORMAT(prTemp."Ni¤os invitados");
      END;

      EXIT(lwTexto);
    END;

    PROCEDURE GetDato2@1100253011(pwTipo@1100253001 : Integer;pwGrupo@1100253005 : Integer;VAR prTemp@1100253002 : TEMPORARY Record 7010427;VAR prTempAnt@1100253006 : TEMPORARY Record 7010427) : Text[30];
    VAR
      lwTexto@1100253000 : Text[50];
      lwPaseF@1100253003 : Integer;
      lwPos@1100253004 : Integer;
    BEGIN
      // GetDato2

      CASE pwTipo OF
        1 : BEGIN
              IF prTempAnt.Id = 0 THEN  // Solo al primero de cada tanda
                lwTexto := Customer.Name;
            END;
        2 : BEGIN
              IF prTempAnt.Usuario <> prTemp.Usuario THEN // Solo el primero de cada tanda de Touroperador
                lwTexto := GetDescripcion(prTemp.Usuario ,1);
            END;
        3 : BEGIN
              lwPos   := STRPOS(prTemp.Codigo,'#');
              IF lwPos <> 0 THEN
                lwTexto := COPYSTR(prTemp.Codigo,1,lwPos-1);
            END;
        4 : BEGIN
              CASE pwGrupo OF
                5,6: BEGIN
                   lwPos   := STRPOS(prTemp.Codigo,'#');
                   IF lwPos <> 0 THEN
                     lwTexto := COPYSTR(prTemp.Codigo,lwPos+1);
                 END;
                4: lwTexto := prTemp.Codigo;
              END;
            END;
        5 : BEGIN
              CASE pwGrupo OF
                6: BEGIN
                     lwPos   := STRPOS(prTemp.Codigo,'#');
                     IF lwPos <> 0 THEN
                       lwTexto := GetDescripcion(COPYSTR(prTemp.Codigo,lwPos+1),3);
                   END;
                4: lwTexto := GetDescripcion(COPYSTR(prTemp.Codigo,1,10),3);
              END;
            END;
        6 : lwTexto := FORMAT(prTemp.Ingreso);
        7 : lwTexto := FORMAT(prTemp.Servicios);
        8 : lwTexto := FORMAT(prTemp.Adultos);
        9 : lwTexto := FORMAT(prTemp.Ni¤os);
        10: lwTexto := FORMAT(prTemp.Pasaje);
        11 : lwTexto:= FORMAT(prTemp.Adultos + (prTemp.Ni¤os DIV 2));
        12 : IF prTemp.Servicios <> 0 THEN
               lwTexto := FORMAT(ROUND(prTemp.Ingreso / prTemp.Servicios));
        13: BEGIN
             lwPaseF := prTemp.Adultos + (prTemp.Ni¤os DIV 2);
             IF lwPaseF <> 0 THEN
               lwTexto := FORMAT(ROUND(prTemp.Ingreso / lwPaseF));
            END;
        14: BEGIN
              lwPaseF := prTemp.Adultos + (prTemp.Ni¤os DIV 2);
              IF prTemp.Servicios <> 0 THEN
                lwTexto := FORMAT(ROUND(lwPaseF / prTemp.Servicios));
            END;
      END;

      EXIT(lwTexto);
    END;

    BEGIN
    {
      $001 AJS 20032013 Eliminar el mensaje de error que se muestras cuando no existe contrato

      $002 AJS 11102013 Modifico la funcion nom_cliente para que retorne Text(50)
    }
    END.
  }
  RDLDATA
  {
  }
}
