OBJECT Report 7010182 Chequeo coste ingreso excur
{
  OBJECT-PROPERTIES
  {
    Date=18/04/15;
    Time=[ 9:20:02];
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Control Excur income cost;
               ESP=Chequeo coste ingreso excur];
    ProcessingOnly=Yes;
    Orientation=Landscape;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table7010166;
        DataItemTableView=SORTING(Delegacion,TourOperador,Fecha);
        OnPreDataItem=BEGIN
                        rPar.FINDFIRST;

                        w_totingnofacturado := 0;
                        w_totingfacturado   := 0;

                        wTotIngresoNoFacDiv := 0; //+$006
                        wTotIngresoFacDiv   := 0; //+$006

                        w_totcosvalidado := 0;
                        w_totcosgenerado := 0;
                        w_totcosnogenerado := 0;
                        w_totcosmanual := 0;

                        w_filtrofechas := GETFILTER(Fecha);
                        wFechaDesde    := GETRANGEMIN(Fecha); //+$005
                        wFechaHasta    := GETRANGEMAX(Fecha); //+$005

                        rCI.COPY("Coste Excursiones");
                        rCI.FINDLAST;

                        SETFILTER(Concepto, '%1|%2|%3', 'EXAC', 'EXCC', 'EXGO');

                        cExcel.Nuevo;
                        cExcel.ValorCelda(2, 1, COMPANYNAME, TRUE, FALSE, FALSE);
                        cExcel.Rango(2, 1, 2, 4);
                        cExcel.CombinarSinCentrar;
                        cExcel.ValorCelda(2, 7, Text005, TRUE, FALSE, FALSE);
                        cExcel.Rango(2, 7, 2, 10);
                        cExcel.CombinarSinCentrar;
                        cExcel.FormatoTexto('', 0, 0, 0, 4, 0);
                        cExcel.ValorCelda(3, 1, cNom.nom_delegacion(rPar.Delegacion), TRUE, FALSE, FALSE);
                        cExcel.Rango(3, 1, 3, 4);
                        cExcel.CombinarSinCentrar;
                        wLinea := 4;

                        // Cabecera
                        wLinea += 1;
                        cExcel.ValorCelda(wLinea, 1, Text006, TRUE, FALSE, FALSE);
                        cExcel.ValorCelda2(wLinea, 2, w_filtrofechas);

                        wLinea += 2;
                        cExcel.ValorCelda(wLinea, 2, Text007, TRUE, FALSE, FALSE);
                        cExcel.Rango(wLinea, 2, wLinea, 3);
                        cExcel.CombinarCeldas;
                        cExcel.ValorCelda(wLinea, 4, Text008, TRUE, FALSE, FALSE);
                        cExcel.Rango(wLinea, 4, wLinea, 5);
                        cExcel.CombinarCeldas;
                        cExcel.LineaDerecha(cExcel.LineaFina);
                        cExcel.ValorCelda(wLinea, 6, Text009, TRUE, FALSE, FALSE);
                        cExcel.Rango(wLinea, 6, wLinea, 9);
                        cExcel.CombinarCeldas;

                        wLinea += 1;
                        cExcel.ValorCelda(wLinea, 1, UPPERCASE("Coste Excursiones".TourOperador),TRUE,FALSE,FALSE);
                        cExcel.ValorCelda(wLinea, 2, Text010, TRUE, FALSE, FALSE);
                        cExcel.ValorCelda(wLinea, 3, Text011, TRUE, FALSE, FALSE);
                        cExcel.ValorCelda(wLinea, 4, Text010, TRUE, FALSE, FALSE);
                        cExcel.ValorCelda(wLinea, 5, Text011, TRUE, FALSE, FALSE);
                        cExcel.Rango(wLinea, 5, wLinea, 5);
                        cExcel.LineaDerecha(cExcel.LineaFina);
                        cExcel.ValorCelda(wLinea, 6, Text012, TRUE, FALSE, FALSE);
                        cExcel.ValorCelda(wLinea, 7, Text013, TRUE, FALSE, FALSE);
                        cExcel.ValorCelda(wLinea, 8, Text014, TRUE, FALSE, FALSE);
                        cExcel.ValorCelda(wLinea, 9, Text015, TRUE, FALSE, FALSE);
                        cExcel.ValorCelda(wLinea, 10, Text016, TRUE, FALSE, FALSE);
                      END;

        OnAfterGetRecord=VAR
                           lwSuma@1100217000 : Boolean;
                         BEGIN
                           IF w_touroperador <> TourOperador THEN
                           BEGIN
                             w_ingnofacturado := 0;
                             w_ingfacturado   := 0;

                             wIngresoNoFacDiv := 0;
                             wIngresoFacDiv   := 0;

                             w_cosvalidado    := 0;
                             w_cosgenerado    := 0;
                             w_cosnogenerado  := 0;
                             w_cosmanual      := 0;

                             w_touroperador := TourOperador;

                             rRsv.RESET;
                             rRsv.SETCURRENTKEY(TourOperador, "Fecha Excursion", Producto, "Zona Servicio");
                             rRsv.SETRANGE (TourOperador     , TourOperador);
                             rRsv.SETFILTER("Fecha Excursion", w_filtrofechas);
                             rRsv.SETFILTER(Producto     , '<>%1', '');

                             //-$005rRsv.SETRANGE (Reembolsada      , FALSE);
                             //-$006rRsv.SETRANGE (Confirmada       , TRUE);

                             rRsv.SETRANGE (Anulada          , FALSE);
                             IF rRsv.FINDSET THEN
                             BEGIN
                               REPEAT
                                 lwSuma := TRUE;
                                 IF rRsv.Reembolsada THEN
                                 BEGIN
                                   IF (rRsv."Fecha anulaci¢n/Reembolso" >= wFechaDesde) OR
                                      (rRsv."Fecha anulaci¢n/Reembolso" <= wFechaHasta) THEN
                                     lwSuma := FALSE;
                                 END;

                                 IF lwSuma THEN
                                 BEGIN
                                   w_ingresoreserva := rTipoCambio.ExchangeAmtFCYToFCY(rRsv."Fecha cambio",
                                                                                       rRsv.Divisa,
                                                                                       '',
                                                                                       ImporteReservaNeto);
                                   wIngresoReservaDiv := ImporteReservaNeto; //+$006

                                   //$004 <
                                   cFunExc.GetContratoTouroperador(rRsv, rCont);
                                   IF rCont."Aplica comision en factura" THEN
                                   BEGIN
                                     //. Sumamos porque esta en negativo en el campo
                                     w_ingresoreserva += rTipoCambio.ExchangeAmtFCYToFCY(rRsv."Fecha cambio",
                                                                                         rRsv.Divisa,
                                                                                         '',
                                                                                         rRsv."Comision Touroperador");
                                     wIngresoReservaDiv += rRsv."Comision Touroperador"; //+$006
                                   END;
                                   //$004 <

                                   IF rRsv."Num. Factura" = '' THEN
                                   BEGIN
                                     w_ingnofacturado    += w_ingresoreserva;
                                     w_totingnofacturado += w_ingresoreserva;

                                     wIngresoNoFacDiv    += wIngresoReservaDiv; //+$006
                                     wTotIngresoNoFacDiv += wIngresoReservaDiv; //+$006
                                   END
                                   ELSE
                                   BEGIN
                                     w_ingfacturado    += w_ingresoreserva;
                                     w_totingfacturado += w_ingresoreserva;

                                     wIngresoFacDiv    += wIngresoReservaDiv; //+$006
                                     wTotIngresoFacDiv += wIngresoReservaDiv; //+$006
                                   END;
                                 END;
                               UNTIL rRsv.NEXT = 0;
                             END;
                           END;

                           IF (rPar."No generar FPR G.O. excursion") AND (Concepto = 'EXGO') THEN
                             CurrReport.SKIP;

                           IF "N§ Factura" <> '' THEN BEGIN
                             //-001w_cosvalidado := w_cosvalidado + "Importe con Impuesto";
                             //-001w_totcosvalidado := w_totcosvalidado + "Importe con Impuesto";
                             w_cosvalidado := w_cosvalidado + "Importe sin impuestos (DL)";       //+001
                             w_totcosvalidado := w_totcosvalidado + "Importe sin impuestos (DL)"; //+001

                           END;
                           IF NOT "Pendiente FPR" THEN BEGIN
                             //-001w_cosgenerado := w_cosgenerado + "Importe con Impuesto";
                             //-001w_totcosgenerado := w_totcosgenerado + "Importe con Impuesto";
                             w_cosgenerado := w_cosgenerado + "Importe sin impuestos (DL)";       //+001
                             w_totcosgenerado := w_totcosgenerado + "Importe sin impuestos (DL)"; //+001
                           END
                           ELSE BEGIN
                             //-001w_cosnogenerado := w_cosnogenerado + "Importe con Impuesto";
                             //-001w_totcosnogenerado := w_totcosnogenerado + "Importe con Impuesto";
                             w_cosnogenerado := w_cosnogenerado + "Importe sin impuestos (DL)";       //+001
                             w_totcosnogenerado := w_totcosnogenerado + "Importe sin impuestos (DL)"; //+001

                           END;
                           IF "Tipo Elemento" = "Tipo Elemento"::Manual THEN BEGIN
                             //-001w_cosmanual := w_cosmanual + "Importe con Impuesto";
                             //-001w_totcosmanual := w_totcosmanual + "Importe con Impuesto";
                             w_cosmanual := w_cosmanual + "Importe sin impuestos (DL)";       //+001
                             w_totcosmanual := w_totcosmanual + "Importe sin impuestos (DL)"; //+001
                           END;
                         END;

        OnPostDataItem=BEGIN
                         cExcel.JustificarHoja;
                         cExcel.Mostrar;
                       END;

        ReqFilterFields=Fecha;
        GroupTotalFields=TourOperador;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            PrintOnEveryPage=Yes;
            SectionWidth=20400;
            SectionHeight=0;
          }
          CONTROLS
          {
          }
           }
        { PROPERTIES
          {
            SectionType=Header;
            PrintOnEveryPage=Yes;
            SectionWidth=20400;
            SectionHeight=0;
          }
          CONTROLS
          {
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=20400;
            SectionHeight=0;
          }
          CONTROLS
          {
          }
           }
        { PROPERTIES
          {
            SectionType=GroupFooter;
            SectionWidth=20400;
            SectionHeight=0;
            OnPostSection=VAR
                            w_benefttoo@1000000000 : Decimal;
                            w_coste@1000000001 : Decimal;
                          BEGIN
                            w_coste := -1 * (w_cosgenerado + w_cosnogenerado + w_cosmanual);
                            IF w_ingnofacturado + w_ingfacturado <> 0 THEN
                              w_benefttoo := ROUND(( (w_ingnofacturado + w_ingfacturado) - w_coste) /
                                                        (w_ingnofacturado + w_ingfacturado) * 100)
                            ELSE
                              w_benefttoo := 0;


                            wLinea += 1;
                            cExcel.ValorCelda2(wLinea, 1, FORMAT("Coste Excursiones".TourOperador));
                            cExcel.ValorCelda2(wLinea, 2, FORMAT(w_ingfacturado));
                            cExcel.ValorCelda2(wLinea, 3, FORMAT(w_ingnofacturado));
                            cExcel.ValorCelda2(wLinea, 4, FORMAT(wIngresoFacDiv));
                            cExcel.ValorCelda2(wLinea, 5, FORMAT(wIngresoNoFacDiv));
                            cExcel.Rango(wLinea, 5, wLinea, 5);
                            cExcel.LineaDerecha(cExcel.LineaFina);
                            cExcel.ValorCelda2(wLinea, 6, FORMAT(w_cosvalidado));
                            cExcel.ValorCelda2(wLinea, 7, FORMAT(w_cosgenerado));
                            cExcel.ValorCelda2(wLinea, 8, FORMAT(w_cosnogenerado));
                            cExcel.ValorCelda2(wLinea, 9, FORMAT(w_cosmanual));
                            cExcel.ValorCelda2(wLinea, 10, FORMAT(w_benefttoo));
                          END;

          }
          CONTROLS
          {
          }
           }
        { PROPERTIES
          {
            SectionType=GroupFooter;
            SectionWidth=20400;
            SectionHeight=0;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((Delegacion = rCI.Delegacion) AND ("N§ Servicio" = rCI."N§ Servicio") AND
                                                 ("Orden Linea" = rCI."Orden Linea"));

                           w_ingresosTotales   := w_totingnofacturado + w_totingfacturado;
                           wIngresosTotalesDiv := wTotIngresoNoFacDiv + wTotIngresoFacDiv; //+$006

                           w_costesCalculados   := -1 * (w_totcosgenerado + w_totcosnogenerado);

                           IF w_ingresosTotales <> 0 THEN
                             w_beneficio := ROUND((w_ingresosTotales - w_costesCalculados) / w_ingresosTotales * 100)
                           ELSE
                             w_beneficio := 0;

                           //+$008 <
                           wCostesTotales := -1 * (w_totcosgenerado + w_totcosnogenerado + w_totcosmanual);
                           IF w_ingresosTotales <> 0 THEN
                             wBeneficioTotal := ROUND((w_ingresosTotales - wCostesTotales) / w_ingresosTotales * 100)
                           ELSE
                             wBeneficioTotal := 0;
                           //+$008 >
                         END;

          }
          CONTROLS
          {
          }
           }
        { PROPERTIES
          {
            SectionType=Footer;
            PrintOnEveryPage=Yes;
            PlaceInBottom=Yes;
            SectionWidth=20400;
            SectionHeight=0;
            OnPreSection=BEGIN
                           wLinea += 1;
                           cExcel.Rango(wLinea, 2, wLinea, 10);
                           cExcel.LineaArriba(cExcel.LineaFina);

                           cExcel.ValorCelda2(wLinea, 2, FORMAT(w_totingfacturado));
                           cExcel.ValorCelda2(wLinea, 3, FORMAT(w_totingnofacturado));
                           cExcel.ValorCelda2(wLinea, 4, FORMAT(wTotIngresoFacDiv));
                           cExcel.ValorCelda2(wLinea, 5, FORMAT(wTotIngresoNoFacDiv));
                           cExcel.Rango(wLinea, 5, wLinea, 5);
                           cExcel.LineaDerecha(cExcel.LineaFina);
                           cExcel.ValorCelda2(wLinea, 6, FORMAT(w_totcosvalidado));
                           cExcel.ValorCelda2(wLinea, 7, FORMAT(w_totcosgenerado));
                           cExcel.ValorCelda2(wLinea, 8, FORMAT(w_totcosnogenerado));
                           cExcel.ValorCelda2(wLinea, 9, FORMAT(w_totcosmanual));

                           wLinea += 2;
                           cExcel.ValorCelda(wLinea, 2, Text017, TRUE, FALSE, FALSE);
                           cExcel.ValorCelda2(wLinea, 3, FORMAT(w_ingresosTotales));
                           cExcel.ValorCelda2(wLinea, 4, FORMAT(wIngresosTotalesDiv));
                           cExcel.ValorCelda(wLinea, 5, Text018, TRUE, FALSE, FALSE);
                           cExcel.Rango(wLinea, 5, wLinea, 6);
                           cExcel.CombinarSinCentrar;
                           cExcel.ValorCelda2(wLinea, 7, FORMAT(w_costesCalculados));
                           cExcel.ValorCelda(wLinea, 8, Text019, TRUE, FALSE, FALSE);
                           cExcel.ValorCelda2(wLinea, 9, FORMAT(w_beneficio));

                           wLinea += 2;
                           cExcel.ValorCelda(wLinea, 5, Text020, TRUE, FALSE, FALSE);
                           cExcel.Rango(wLinea, 5, wLinea, 6);
                           cExcel.CombinarSinCentrar;
                           cExcel.ValorCelda2(wLinea, 7, FORMAT(wCostesTotales));
                           cExcel.ValorCelda(wLinea, 8, Text021, TRUE, FALSE, FALSE);
                           cExcel.ValorCelda2(wLinea, 9, FORMAT(wBeneficioTotal));
                         END;

          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=3410;
      CaptionML=[ENU=Control Excur income cost;
                 ESP=Chequeo coste ingreso excur];
    }
    CONTROLS
    {
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      Text000@1103355017 : TextConst 'ENU=EXCI;ESP=EXCI';
      Text001@1103355018 : TextConst 'ENU=EXGV;ESP=EXGV';
      Text002@1103355019 : TextConst 'ENU=EXTO;ESP=EXTO';
      Text003@1103355020 : TextConst 'ENU=EXGO;ESP=EXGO';
      Text004@1103355021 : TextConst 'ENU=page;ESP=P gina';
      rPar@1103355000 : Record 7009700;
      rCI@1103355001 : Record 7010166;
      rRsv@1100253003 : Record 7010162;
      rTipoCambio@1100253005 : Record 330;
      rCont@1100217002 : Record 7010142;
      cNom@1103355002 : Codeunit 7009702;
      cFunExc@1100217003 : Codeunit 7010141;
      cExcel@1000000002 : Codeunit 7009755;
      w_ingnofacturado@1103355003 : Decimal;
      w_ingfacturado@1103355004 : Decimal;
      w_cosvalidado@1103355005 : Decimal;
      w_cosgenerado@1103355006 : Decimal;
      w_cosnogenerado@1103355007 : Decimal;
      w_cosmanual@1103355008 : Decimal;
      w_totingnofacturado@1103355009 : Decimal;
      w_totingfacturado@1103355010 : Decimal;
      w_totcosvalidado@1103355011 : Decimal;
      w_totcosgenerado@1103355012 : Decimal;
      w_totcosnogenerado@1103355013 : Decimal;
      w_totcosmanual@1103355014 : Decimal;
      w_ingresosTotales@1100253002 : Decimal;
      w_costesCalculados@1100253001 : Decimal;
      w_beneficio@1100253000 : Decimal;
      w_ingresoreserva@1100253004 : Decimal;
      w_comisionTO@1100217000 : Decimal;
      w_reembolso@1100217001 : Decimal;
      w_filtrofechas@1103355015 : Text[250];
      w_touroperador@1103355016 : Code[10];
      wFechaDesde@1100217004 : Date;
      wFechaHasta@1100217005 : Date;
      wIngresoReservaDiv@1100217006 : Decimal;
      wIngresoNoFacDiv@1100217007 : Decimal;
      wIngresoFacDiv@1100217008 : Decimal;
      wTotIngresoNoFacDiv@1100217009 : Decimal;
      wTotIngresoFacDiv@1100217010 : Decimal;
      wIngresosTotalesDiv@1100217011 : Decimal;
      wCostesTotales@1000000000 : Decimal;
      wBeneficioTotal@1000000001 : Decimal;
      wLinea@1000000003 : Integer;
      Text005@1000000004 : TextConst 'ENU=Check Excursions cost income;ESP=Chequeo coste ingreso Excursiones';
      Text006@1000000005 : TextConst 'ENU=Services dates;ESP=Fechas de servicio';
      Text007@1000000006 : TextConst 'ENU=Incomes Local Currency;ESP=Ingresos Divisa Local';
      Text008@1000000007 : TextConst 'ENU=Incomes Rate Currency;ESP=Ingresos Divisa Tarifa';
      Text009@1000000008 : TextConst 'ENU=Costs;ESP=Costes';
      Text010@1000000009 : TextConst 'ENU=Invoiced;ESP=Facturado';
      Text011@1000000010 : TextConst 'ENU=Remaining;ESP=Pendiente';
      Text012@1000000011 : TextConst 'ENU=Validated;ESP=Validado';
      Text013@1000000012 : TextConst 'ENU=Generated;ESP=Generado';
      Text014@1000000013 : TextConst 'ENU=Not Generated;ESP=No Generado';
      Text015@1000000014 : TextConst 'ENU=Manual Ajustment;ESP=Ajuste Manual';
      Text016@1000000015 : TextConst 'ENU=Profit %;ESP=% Beneficio';
      Text017@1000000016 : TextConst 'ESP=Ingresos';
      Text018@1000000017 : TextConst 'ESP=Costes calculados';
      Text019@1000000018 : TextConst 'ESP=Beneficio';
      Text020@1000000019 : TextConst 'ESP=Costes totales';
      Text021@1000000020 : TextConst 'ESP=Beneficio final';

    PROCEDURE ImporteReservaNeto@1100217001() : Decimal;
    VAR
      lrDetEco@1100217006 : Record 7010245;
    BEGIN
      // ImporteReservaNeto

      IF lrDetEco.GET(rRsv.Delegacion, rRsv."N§ Reserva") THEN //+$007
        EXIT(lrDetEco."Ingreso reserva neto");
    END;

    BEGIN
    {
      $001 AJF 05072011 (GOC-OC-11016) Se modifica la acumulaci¢n de importes para que funcione
                        siempre en divisa local.

      $002 AJS 10102011 Se modifica la acumulaci¢n de importes para que tome siempre los importe
                        sin impuestos

      $003 AJS 22052012 El importe del ingreso se recoge directamente de las reservas

      $004 AJS 14112012 La comision del touoperador se descuenta del ingreso en funcion del contrato de comisiones
                        del touroperador

      $005 AJS 20032014 Cambio el modo en que se tratan los reembolsos para tener en cuenta el mes en que se reembolsan

      $006 AJS 20032014 Mostrar el ingreso en la divisa de las tarifas

      $007 AJS 30082014 Corregir un error cuando una reserva no tiene rellenada la tabla de datos economicos.

      $008 AJS 18122014 Agregamos un nuevo total que incluye los costes manuales

      $009 ARM 14012015 CNT-LP-14014 A¤adir beneficio por TTOO y pasar informe a excel

      $010 AJS 18042015 Cambio en el sentido del campo Aplicar comision touroperador
    }
    END.
  }
  RDLDATA
  {
  }
}
