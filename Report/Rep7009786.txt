OBJECT Report 7009786 Operaciones transfer - Mexico
{
  OBJECT-PROPERTIES
  {
    Date=10/04/14;
    Time=14:05:33;
    Modified=Yes;
    Version List=AIC2009,CNT;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Transfer operations - Mexico (EXCEL);
               ESP=Operaciones transfer - Mexico (EXCEL)];
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        OnPreDataItem=VAR
                        lrVuelo@1100217000 : Record 7009754;
                      BEGIN
                        IF wFecha = 0D THEN
                          ERROR(Text001);

                        //. Primero buscamos si existe algun vuelo para los filtros
                        lrVuelo.RESET;
                        lrVuelo.SETRANGE(Fecha, wFecha);
                        IF wTouroperador <> '' THEN
                          lrVuelo.SETRANGE(TourOperador, wTouroperador);
                        IF lrVuelo.ISEMPTY THEN
                          ERROR(Text002, wFecha, wTouroperador);

                        //. Limpiamos variables globales
                        _IniciarVariables;
                      END;

        OnAfterGetRecord=BEGIN
                           _ProcesarVuelos;

                           _GenerarExcel;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=0;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=3410;
      OnOpenForm=BEGIN
                   wFecha := TODAY + 1;
                 END;

    }
    CONTROLS
    {
      { 1100217000;TextBox;3630 ;220  ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Day;
                                                              ESP=Dia];
                                                   SourceExpr=wFecha }
      { 1100217001;Label  ;220  ;220  ;3300 ;440  ;ParentControl=1100217000 }
      { 1100217002;TextBox;3630 ;770  ;2200 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Carrier;
                                                              ESP=Transportista];
                                                   SourceExpr=wTransportista;
                                                   TableRelation="Transportista transfer" }
      { 1100217003;Label  ;220  ;770  ;3300 ;440  ;ParentControl=1100217002 }
      { 1100217004;TextBox;3630 ;1320 ;2200 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Touroperator;
                                                              ESP=Touroperador];
                                                   SourceExpr=wTouroperador;
                                                   TableRelation=TourOperador }
      { 1100217005;Label  ;220  ;1320 ;3300 ;440  ;ParentControl=1100217004 }
      { 1100217006;TextBox;3630 ;1870 ;2200 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Airport;
                                                              ESP=Aeropuerto];
                                                   SourceExpr=wAeropuerto;
                                                   TableRelation=Aeropuerto }
      { 1100217007;Label  ;220  ;1870 ;3300 ;440  ;ParentControl=1100217006 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      wFecha@1100217000 : Date;
      wTransportista@1100217001 : Code[10];
      wTouroperador@1100217002 : Code[10];
      wAeropuerto@1100217003 : Code[10];
      Text001@1100217004 : TextConst 'ENU=Must specify a workdate.;ESP=Debe introducir una fecha de trabajo.';
      wNumHojaExcel@1100217008 : Integer;
      wIDTemporal@1100217009 : Integer;
      Text002@1100217006 : TextConst 'ENU=There are no flights in day %1 and touroperador %2.;ESP=No hay vuelos para dia %1 y touroperador %2.';
      wLinea@1100217010 : Integer;
      wInicioLineas@1100217026 : Integer;
      wInicioAgrupaciones@1100217027 : Integer;
      rTMPListado@1100217007 : ARRAY [2] OF TEMPORARY Record 7010251;
      rExcel@1100217005 : Record 7009785;
      Text003@1100217011 : TextConst 'ENU=Date;ESP=Fecha';
      Text004@1100217012 : TextConst 'ENU=DEPARTURES;ESP=SALIDAS';
      Text005@1100217013 : TextConst 'ENU=Flight;ESP=Vuelo';
      Text006@1100217014 : TextConst 'ENU=ARRIVALS;ESP=LLEGADAS';
      Text007@1100217015 : TextConst 'ENU=Hour;ESP=Hora';
      Text008@1100217016 : TextConst 'ENU=Hotel;ESP=Hotel';
      Text009@1100217017 : TextConst 'ENU=Pick up;ESP=Pick up';
      Text010@1100217018 : TextConst 'ENU=Pax;ESP=Pax';
      Text011@1100217019 : TextConst 'ENU=Total;ESP=Total';
      Text012@1100217020 : TextConst 'ENU=Carrier;ESP=Transporte';
      Text013@1100217021 : TextConst 'ENU=Cap.;ESP=Cap.';
      Text014@1100217022 : TextConst 'ENU=Order;ESP=Orden';
      Text015@1100217023 : TextConst 'ENU=Guide;ESP=Trasladista';
      Text016@1100217024 : TextConst 'ENU=Porter;ESP=Maletero';
      Text017@1100217025 : TextConst 'ENU=CREATING REPORTS;ESP=CREANDO REPORTE';

    LOCAL PROCEDURE _IniciarVariables@1100217015();
    BEGIN
      // _IniciarVariables

      rTMPListado[1].DELETEALL;
      rTMPListado[2].DELETEALL;

      wNumHojaExcel := 0;
      wIDTemporal   := 0;

      wInicioLineas := 1;
      wInicioAgrupaciones := 6;
    END;

    LOCAL PROCEDURE _ProcesarVuelos@1100217002();
    VAR
      lrVuelo@1100217000 : Record 7009754;
    BEGIN
      // _ProcesarVuelos

      //. Buscamos vuelos de salida
      lrVuelo.RESET;
      lrVuelo.SETRANGE(Fecha, wFecha);
      IF wTouroperador <> '' THEN
        lrVuelo.SETRANGE(TourOperador, wTouroperador);
      lrVuelo.SETRANGE("Entrada/Salida", lrVuelo."Entrada/Salida"::Salida);
      IF wAeropuerto <> '' THEN
        lrVuelo.SETRANGE(Destino, wAeropuerto);
      lrVuelo.SETFILTER("Hora Salida", '<>%1', 0T); //+$002
      IF lrVuelo.FINDSET THEN
      BEGIN
        REPEAT
          IF _ReservaVuelo(lrVuelo) THEN
          BEGIN
            wNumHojaExcel += 1;
            _RellenaVueloSalida(lrVuelo);

            //. Hay que buscar si hay una llegada relacionada
            _RellenaLlegadaRelacionada(lrVuelo);
          END;
        UNTIL lrVuelo.NEXT = 0;
      END;

      //. Buscamos vuelos de llegada
      lrVuelo.SETRANGE(Destino); //+$003
      lrVuelo.SETRANGE("Hora Salida"); //+$003

      lrVuelo.SETRANGE("Entrada/Salida", lrVuelo."Entrada/Salida"::Entrada);
      IF wAeropuerto <> '' THEN
        lrVuelo.SETRANGE(Origen, wAeropuerto);
      lrVuelo.SETFILTER("Hora Entrada", '<>%1', 0T); //+$002
      IF lrVuelo.FINDSET THEN
      BEGIN
        REPEAT
          //. Hay que comprobar que no hayamos procesado esta llegada relacionada con una salida

          rTMPListado[1].RESET;
          rTMPListado[1].SETRANGE(Code01, lrVuelo.Compa¤ia + lrVuelo.Vuelo);
          rTMPListado[1].SETRANGE(Code02, 'LLEGADA');
          IF NOT rTMPListado[1].FINDFIRST THEN
          BEGIN
            IF _ReservaVuelo(lrVuelo) THEN
            BEGIN
              wNumHojaExcel += 1;
              _RellenaVueloLlegada(lrVuelo);
            END;
          END;
        UNTIL lrVuelo.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _RellenaVueloSalida@1100217001(prVuelo@1100217000 : Record 7009754);
    VAR
      lrAgrup@1100217001 : Record 7009796;
      lwTexto@1100217002 : Text[30];
    BEGIN
      // _RellenaVueloSalida

      //. Cabecera del vuelo de salida
      wIDTemporal += 1;

      CLEAR(rTMPListado);
      rTMPListado[1].Id     := wIDTemporal;
      rTMPListado[1].Code01 := prVuelo.Compa¤ia + prVuelo.Vuelo;
      rTMPListado[1].Code02 := 'SALIDA';
      rTMPListado[1].Time01 := prVuelo."Hora Salida";
      rTMPListado[1].Int01  := wNumHojaExcel;
      rTMPListado[1].INSERT(TRUE);

      //. Buscamos las agrupaciones

      lrAgrup.RESET;
      lrAgrup.SETCURRENTKEY(Fecha);
      lrAgrup.SETRANGE(Fecha, wFecha);
      lrAgrup.SETRANGE("Tipo transfer", lrAgrup."Tipo transfer"::Salida);
      IF wTransportista <> '' THEN
        lrAgrup.SETRANGE(Transportista, wTransportista);
      IF wTouroperador <> '' THEN
      BEGIN
        lwTexto := '*' + wTouroperador + '*';
        lrAgrup.SETFILTER(TourOperadores, '%1', lwTexto);
      END;
      lwTexto := '*' + prVuelo.Vuelo + '*';
      lrAgrup.SETFILTER(Vuelos, '%1', lwTexto);
      IF lrAgrup.FINDSET THEN
      BEGIN
        REPEAT
          _RellenaAgrupacionSalida(lrAgrup)
        UNTIL lrAgrup.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _RellenaAgrupacionSalida@1100217008(prAgrup@1100217000 : Record 7009796);
    VAR
      lrHorasAgr@1100217001 : Record 7009800;
      lrHotel@1100217002 : Record 7009724;
    BEGIN
      // _RellenaAgrupacionSalida

      prAgrup.CALCFIELDS("Personas salida");

      lrHorasAgr.RESET;
      lrHorasAgr.SETRANGE("N§ Agrupacion", prAgrup."N§ Agrupacion");
      IF lrHorasAgr.FINDSET THEN
      BEGIN
        REPEAT
          lrHotel.GET(lrHorasAgr.Hotel);

          lrHorasAgr.CALCFIELDS("Personas salida");

          wIDTemporal += 1;

          CLEAR(rTMPListado);
          rTMPListado[1].Id     := wIDTemporal;
          rTMPListado[1].Code02 := 'SALIDA';
          rTMPListado[1].Int01  := wNumHojaExcel;
          rTMPListado[1].Text01 := lrHotel.Nombre;
          rTMPListado[1].Time02 := lrHorasAgr."Hora recogida";
          rTMPListado[1].Int02  := lrHorasAgr."Personas salida";
          rTMPListado[1].Int03  := prAgrup."Personas salida";
          rTMPListado[1].Code03 := prAgrup.Transportista;
          rTMPListado[1].Int04  := prAgrup."Capacidad Vehiculo";
          rTMPListado[1].Int05  := prAgrup."N§ Agrupacion";
          rTMPListado[1].Text02 := _GetTrasladistaAgrupacion(prAgrup."N§ Agrupacion");
          rTMPListado[1].Text03 := _GetMaleteroAgrupacion(prAgrup."N§ Agrupacion");
          rTMPListado[1].INSERT(TRUE);
        UNTIL lrHorasAgr.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _RellenaLlegadaRelacionada@1100217003(prVuelo@1100217000 : Record 7009754);
    VAR
      lwHora@1100217001 : Time;
      lrVuelo@1100217002 : Record 7009754;
    BEGIN
      // _RellenaLlegadaRelacionada

      //. Restamos dos horas a la hora de salida
      lwHora := prVuelo."Hora Salida" - 7200000;

      //. Buscamos si existe algun vuelo de llegada en un margen de dos horas con la salida
      lrVuelo.RESET;
      lrVuelo.SETRANGE(Fecha   , wFecha);
      lrVuelo.SETRANGE(Compa¤ia, prVuelo.Compa¤ia);
      IF wTouroperador <> '' THEN
        lrVuelo.SETRANGE(TourOperador, wTouroperador);
      lrVuelo.SETRANGE("Entrada/Salida", lrVuelo."Entrada/Salida"::Entrada);
      IF wAeropuerto <> '' THEN
        lrVuelo.SETRANGE(Origen, wAeropuerto);
      lrVuelo.SETRANGE("Hora Entrada", lwHora, prVuelo."Hora Salida");
      IF lrVuelo.FINDFIRST THEN
      BEGIN
        //. Comprobamos que no este relacionada con otra salida
        rTMPListado[1].RESET;
        rTMPListado[1].SETRANGE(Code01, lrVuelo.Compa¤ia + lrVuelo.Vuelo);
        rTMPListado[1].SETRANGE(Code02, 'LLEGADA');
        IF NOT rTMPListado[1].FINDFIRST THEN
          _RellenaVueloLlegada(lrVuelo);
      END;
    END;

    LOCAL PROCEDURE _RellenaVueloLlegada@1100217005(prVuelo@1100217000 : Record 7009754);
    VAR
      lrAgrup@1100217002 : Record 7009796;
      lwTexto@1100217001 : Text[30];
    BEGIN
      // _RellenaVueloLlegada

      //. Cabecera del vuelo de llegada
      wIDTemporal += 1;

      CLEAR(rTMPListado);
      rTMPListado[1].Id     := wIDTemporal;
      rTMPListado[1].Code01 := prVuelo.Compa¤ia + prVuelo.Vuelo;
      rTMPListado[1].Code02 := 'LLEGADA';
      rTMPListado[1].Time01 := prVuelo."Hora Entrada";
      rTMPListado[1].Int01  := wNumHojaExcel;
      rTMPListado[1].INSERT(TRUE);

      //. Buscamos las agrupaciones

      lrAgrup.RESET;
      lrAgrup.SETCURRENTKEY(Fecha);
      lrAgrup.SETRANGE(Fecha, wFecha);
      lrAgrup.SETRANGE("Tipo transfer", lrAgrup."Tipo transfer"::Entrada);
      IF wTransportista <> '' THEN
        lrAgrup.SETRANGE(Transportista, wTransportista);
      IF wTouroperador <> '' THEN
      BEGIN
        lwTexto := '*' + wTouroperador + '*';
        lrAgrup.SETFILTER(TourOperadores, '%1', lwTexto);
      END;
      lwTexto := '*' + prVuelo.Vuelo + '*';
      lrAgrup.SETFILTER(Vuelos, '%1', lwTexto);
      IF lrAgrup.FINDSET THEN
      BEGIN
        REPEAT
          _RellenaAgrupacionLlegada(lrAgrup)
        UNTIL lrAgrup.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _RellenaAgrupacionLlegada@1100217007(prAgrup@1100217002 : Record 7009796);
    VAR
      lrHotelAgr@1100217001 : Record 7009798;
      lrHotel@1100217000 : Record 7009724;
    BEGIN
      // _RellenaAgrupacionLlegada

      prAgrup.CALCFIELDS("Personas entrada");

      lrHotelAgr.RESET;
      lrHotelAgr.SETRANGE("N§ Agrupacion", prAgrup."N§ Agrupacion");
      IF lrHotelAgr.FINDSET THEN
      BEGIN
        REPEAT
          lrHotel.GET(lrHotelAgr.Hotel);

          lrHotelAgr.CALCFIELDS("Personas entrada");

          wIDTemporal += 1;

          CLEAR(rTMPListado);
          rTMPListado[1].Id     := wIDTemporal;
          rTMPListado[1].Code02 := 'LLEGADA';
          rTMPListado[1].Int01  := wNumHojaExcel;
          rTMPListado[1].Text01 := lrHotel.Nombre;
          rTMPListado[1].Int02  := lrHotelAgr."Personas entrada";
          rTMPListado[1].Int03  := prAgrup."Personas entrada";
          rTMPListado[1].Code03 := prAgrup.Transportista;
          rTMPListado[1].Int04  := prAgrup."Capacidad Vehiculo";
          rTMPListado[1].Int05  := prAgrup."N§ Agrupacion";
          rTMPListado[1].Text02 := _GetTrasladistaAgrupacion(prAgrup."N§ Agrupacion");
          rTMPListado[1].Text03 := _GetMaleteroAgrupacion(prAgrup."N§ Agrupacion");
          rTMPListado[1].INSERT(TRUE);
        UNTIL lrHotelAgr.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _GetTrasladistaAgrupacion@1100217010(pwAgrupacion@1100217000 : Integer) : Text[250];
    VAR
      lrGuiaAgr@1100217001 : Record 7009905;
      lrGuiaTra@1100217002 : Record 7009904;
    BEGIN
      // _GetTrasladistaAgrupacion

      lrGuiaAgr.RESET;
      lrGuiaAgr.SETRANGE ("Num.Agrupacion", pwAgrupacion);
      IF lrGuiaAgr.FINDFIRST THEN
      BEGIN
        IF lrGuiaTra.GET(lrGuiaAgr."Cod.Guia") THEN
          EXIT(lrGuiaTra.Nombre);
      END;
    END;

    LOCAL PROCEDURE _GetMaleteroAgrupacion@1100217012(pwAgrupacion@1100217000 : Integer) : Text[250];
    VAR
      lrMaletAgr@1100217001 : Record 7009903;
      lrMalet@1100217002 : Record 7009900;
    BEGIN
      // _GetMaleteroAgrupacion

      lrMaletAgr.RESET;
      lrMaletAgr.SETRANGE ("Num Agrupacion", pwAgrupacion);
      IF lrMaletAgr.FINDFIRST THEN
      BEGIN
        IF lrMalet.GET(lrMaletAgr."Cod. Maletero") THEN
          EXIT(lrMalet.Nombre);
      END;
    END;

    LOCAL PROCEDURE _GetNombrePlantilla@1100217000() : Text[250];
    BEGIN
      // _GetNombrePlantilla

      EXIT('C:\Plantillas Atennea\Report7009786.xlsx');
    END;

    LOCAL PROCEDURE _GenerarExcel@1100217004();
    BEGIN
      // _GenerarExcel

      //. Abrimos la plantilla
      rExcel.OpenBook(_GetNombrePlantilla, 'Hoja1');
      rExcel.BorraSheets();

      FOR wIDTemporal := 1 TO wNumHojaExcel DO
      BEGIN
        //. Vaciamos excel buffer
        rExcel.DELETEALL;

        rTMPListado[1].RESET;
        rTMPListado[1].SETRANGE(Int01, wIDTemporal);
        rTMPListado[1].FINDFIRST;

        _NuevaHojaExcel
      END;

      rExcel.GiveUserControl;
    END;

    LOCAL PROCEDURE _NuevaHojaExcel@1100217006();
    VAR
      lrAerop@1100217000 : Record 7009704;
      lwNombreHoja@1100217001 : Text[30];
    BEGIN
      // _NuevaHojaExcel

      IF wAeropuerto <> '' THEN
        lrAerop.GET(wAeropuerto);

      wLinea := wInicioLineas;
      _InsertaCeldaExcel(8, Text003, 0, 0, 0, 0, '', 0);
      _InsertaCeldaExcel(9, FORMAT(wFecha, 0, '<Weekday Text>, <Day>-<Month Text>-<Year>'), 0, 0, 0, 2, STRSUBSTNO('J%1', wLinea), 3);

      wLinea += 1;
      _InsertaCeldaExcel(8, lrAerop.Nombre, 0, 0, 0, 2, STRSUBSTNO('J%1', wLinea), 3);

      wLinea += 2;
      _InsertaCeldaExcel(1, Text004, 2, 2, 2, 2, STRSUBSTNO('I%1', wLinea), 3);
      _InsertaCeldaExcel(11, Text006, 2, 2, 2, 2, STRSUBSTNO('R%1', wLinea), 3);

      rTMPListado[1].SETRANGE(Code02, 'SALIDA');
      IF rTMPListado[1].FINDFIRST THEN
      BEGIN
        lwNombreHoja := rTMPListado[1].Code01;
        _SalidaExcel;
      END;

      rTMPListado[1].SETRANGE(Code02, 'LLEGADA');
      IF rTMPListado[1].FINDFIRST THEN
      BEGIN
        IF lwNombreHoja = '' THEN
          lwNombreHoja := rTMPListado[1].Code01;
        _LlegadaExcel;
      END;

      //. Insertamos una celda en la ultima linea+1, columna M para que el ajustar pagina funcione con todos los datos
      wLinea += 1;
      _InsertaCeldaExcel(18, '', 0, 0, 0, 0, '', 0);

      rExcel.CreateSheet(lwNombreHoja, '', '', USERID, TRUE, (rTMPListado[1].Int01 <> 1), Text017);
    END;

    LOCAL PROCEDURE _SalidaExcel@1100217011();
    VAR
      lwAgrupacion@1100217000 : Integer;
    BEGIN
      // _SalidaExcel

      //. Vuelo
      wLinea := wInicioAgrupaciones;
      _InsertaCeldaExcel(1, Text005, 0, 0, 0, 0, '', 0);
      _InsertaCeldaExcel(2, rTMPListado[1].Code01, 0, 0, 0, 2, '', 3);

      //. Hora
      wLinea += 1;
      _InsertaCeldaExcel(1, Text007, 0, 0, 0, 0, '', 0);
      _InsertaCeldaExcel(2, FORMAT(rTMPListado[1].Time01, 0, '<Hours24,2>:<Minutes,2>'), 0, 0, 0, 2, '', 3);

      //. Cabeceras
      wLinea += 2;
      _InsertaCeldaExcel(1, Text014, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(2, Text008, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(3, Text009, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(4, Text010, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(5, Text011, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(6, Text012, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(7, Text013, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(8, Text015, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(9, Text016, 2, 2, 2, 2, '', 3);

      //. Recorremos las agrupaciones
      lwAgrupacion := 0;

      rTMPListado[1].NEXT;
      REPEAT
        IF lwAgrupacion <> rTMPListado[1].Int05 THEN
        BEGIN
          lwAgrupacion := rTMPListado[1].Int05;
          _AgrupacionSalidaExcel(lwAgrupacion);
          wLinea += 1;
        END;
      UNTIL rTMPListado[1].NEXT = 0;
    END;

    LOCAL PROCEDURE _AgrupacionSalidaExcel@1100217013(pwAgrupacion@1100217000 : Integer);
    VAR
      lwHoteles@1100217001 : Integer;
      lwCombina@1100217002 : Integer;
      lwPrimerHotel@1100217003 : Boolean;
    BEGIN
      // _AgrupacionSalidaExcel

      //rTMPListado.Code01 := Vuelo
      //rTMPListado.Code02 := Llegada/Salida
      //rTMPListado.Time01 := Hora vuelo
      //rTMPListado.Int01  := Hoja Excel
      //rTMPListado.Text01 := lrHotel.Nombre;
      //rTMPListado.Time02 := lrHorasAgr."Hora recogida";
      //rTMPListado.Int02  := lrHorasAgr."Personas salida";
      //rTMPListado.Int03  := prAgrup."Personas salida";
      //rTMPListado.Code03 := prAgrup.Transportista;
      //rTMPListado.Int04  := prAgrup."Capacidad Vehiculo";
      //rTMPListado.Int05  := prAgrup."N§ Agrupacion";
      //rTMPListado.Text02 := _GetTrasladistaAgrupacion(prAgrup."N§ Agrupacion");
      //rTMPListado.Text03 := _GetMaleteroAgrupacion(prAgrup."N§ Agrupacion");


      //. Utilizo rTMPListado[2] para recorrer solo una agrupacion sin afectar al bucle general
      rTMPListado[2].RESET;
      rTMPListado[2].COPYFILTERS(rTMPListado[1]);
      rTMPListado[2].SETRANGE(Int05, pwAgrupacion);
      IF rTMPListado[2].FINDSET THEN
      BEGIN
        lwHoteles     := rTMPListado[2].COUNT;
        lwCombina     := wLinea + lwHoteles;
        lwPrimerHotel := TRUE;
        REPEAT
          wLinea += 1;

          IF lwPrimerHotel THEN
          BEGIN
            lwPrimerHotel := FALSE;
            _InsertaCeldaExcel(1, FORMAT(rTMPListado[2].Int05), 2, 2, 2, 2, STRSUBSTNO('A%1', lwCombina), 3);      //. N§ Agrupacion
            _InsertaCeldaExcel(2, rTMPListado[2].Text01, 2, 2, 2, 2, '', 0);                                       //. Hotel
            _InsertaCeldaExcel(3, FORMAT(rTMPListado[2].Time02, 0, '<Hours24,2>:<Minutes,2>'), 2, 2, 2, 2, '', 3); //. Pick.Up
            _InsertaCeldaExcel(4, FORMAT(rTMPListado[2].Int02), 2, 2, 2, 2, '', 3);                                //. Personas hotel
            _InsertaCeldaExcel(5, FORMAT(rTMPListado[2].Int03), 2, 2, 2, 2, STRSUBSTNO('E%1', lwCombina), 3);      //. Personas agrupacion
            _InsertaCeldaExcel(6, rTMPListado[2].Code03, 2, 2, 2, 2, STRSUBSTNO('F%1', lwCombina), 3);             //. Transportista
            _InsertaCeldaExcel(7, FORMAT(rTMPListado[2].Int04), 2, 2, 2, 2, STRSUBSTNO('G%1', lwCombina), 3);      //. Capacidad
            _InsertaCeldaExcel(8, rTMPListado[2].Text02, 2, 2, 2, 2, STRSUBSTNO('H%1', lwCombina), 3);             //. Trasladista
            _InsertaCeldaExcel(9, rTMPListado[2].Text03, 2, 2, 2, 2, STRSUBSTNO('I%1', lwCombina), 3);             //. Maletero
          END
          ELSE
          BEGIN
            _InsertaCeldaExcel(2, rTMPListado[2].Text01, 2, 2, 2, 2, '', 0);                                       //. Hotel
            _InsertaCeldaExcel(3, FORMAT(rTMPListado[2].Time02, 0, '<Hours24,2>:<Minutes,2>'), 2, 2, 2, 2, '', 3); //. Pick.Up
            _InsertaCeldaExcel(4, FORMAT(rTMPListado[2].Int02), 2, 2, 2, 2, '', 3);                                //. Personas hotel
          END;
        UNTIL rTMPListado[2].NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _LlegadaExcel@1100217014();
    VAR
      lwAgrupacion@1100217000 : Integer;
    BEGIN
      // _LlegadaExcel

      //. Vuelo
      wLinea := wInicioAgrupaciones;
      _InsertaCeldaExcel(11, Text005, 0, 0, 0, 0, '', 0);
      _InsertaCeldaExcel(12, rTMPListado[1].Code01, 0, 0, 0, 2, '', 3);

      //. Hora
      wLinea += 1;
      _InsertaCeldaExcel(11, Text007, 0, 0, 0, 0, '', 0);
      _InsertaCeldaExcel(12, FORMAT(rTMPListado[1].Time01, 0, '<Hours24,2>:<Minutes,2>'), 0, 0, 0, 2, '', 3);

      //. Cabeceras
      wLinea += 2;
      _InsertaCeldaExcel(11, Text014, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(12, Text008, 2, 2, 2, 2, '', 3);
      //_InsertaCeldaExcel(13, Text009, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(13, Text010, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(14, Text011, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(15, Text012, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(16, Text013, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(17, Text015, 2, 2, 2, 2, '', 3);
      _InsertaCeldaExcel(18, Text016, 2, 2, 2, 2, '', 3);

      //. Recorremos las agrupaciones
      lwAgrupacion := 0;

      rTMPListado[1].NEXT;
      REPEAT
        IF lwAgrupacion <> rTMPListado[1].Int05 THEN
        BEGIN
          lwAgrupacion := rTMPListado[1].Int05;
          _AgrupacionLlegadaExcel(lwAgrupacion);
          wLinea += 1;
        END;
      UNTIL rTMPListado[1].NEXT = 0;
    END;

    LOCAL PROCEDURE _AgrupacionLlegadaExcel@1100217016(pwAgrupacion@1100217000 : Integer);
    VAR
      lwHoteles@1100217001 : Integer;
      lwCombina@1100217002 : Integer;
      lwPrimerHotel@1100217003 : Boolean;
    BEGIN
      // _AgrupacionLlegadaExcel

      //rTMPListado.Code01 := Vuelo
      //rTMPListado.Code02 := Llegada/Salida
      //rTMPListado.Time01 := Hora vuelo
      //rTMPListado.Int01  := Hoja Excel
      //rTMPListado.Text01 := lrHotel.Nombre;
      //rTMPListado.Time02 := lrHorasAgr."Hora recogida";
      //rTMPListado.Int02  := lrHorasAgr."Personas salida";
      //rTMPListado.Int03  := prAgrup."Personas salida";
      //rTMPListado.Code03 := prAgrup.Transportista;
      //rTMPListado.Int04  := prAgrup."Capacidad Vehiculo";
      //rTMPListado.Int05  := prAgrup."N§ Agrupacion";
      //rTMPListado.Text02 := _GetTrasladistaAgrupacion(prAgrup."N§ Agrupacion");
      //rTMPListado.Text03 := _GetMaleteroAgrupacion(prAgrup."N§ Agrupacion");


      //. Utilizo rTMPListado[2] para recorrer solo una agrupacion sin afectar al bucle general
      rTMPListado[2].RESET;
      rTMPListado[2].COPYFILTERS(rTMPListado[1]);
      rTMPListado[2].SETRANGE(Int05, pwAgrupacion);
      IF rTMPListado[2].FINDSET THEN
      BEGIN
        lwHoteles     := rTMPListado[2].COUNT;
        lwCombina     := wLinea + lwHoteles;
        lwPrimerHotel := TRUE;
        REPEAT
          wLinea += 1;

          IF lwPrimerHotel THEN
          BEGIN
            lwPrimerHotel := FALSE;
            _InsertaCeldaExcel(11, FORMAT(rTMPListado[2].Int05), 2, 2, 2, 2, STRSUBSTNO('K%1', lwCombina), 3);  //. N§ Agrupacion
            _InsertaCeldaExcel(12, rTMPListado[2].Text01, 2, 2, 2, 2, '', 0);                                   //. Hotel
            _InsertaCeldaExcel(13, FORMAT(rTMPListado[2].Int02), 2, 2, 2, 2, '', 3);                            //. Personas hotel
            _InsertaCeldaExcel(14, FORMAT(rTMPListado[2].Int03), 2, 2, 2, 2, STRSUBSTNO('N%1', lwCombina), 3);  //. Personas agrupacion
            _InsertaCeldaExcel(15, rTMPListado[2].Code03, 2, 2, 2, 2, STRSUBSTNO('O%1', lwCombina), 3);         //. Transportista
            _InsertaCeldaExcel(16, FORMAT(rTMPListado[2].Int04), 2, 2, 2, 2, STRSUBSTNO('P%1', lwCombina), 3);  //. Capacidad
            _InsertaCeldaExcel(17, rTMPListado[2].Text02, 2, 2, 2, 2, STRSUBSTNO('Q%1', lwCombina), 3);         //. Trasladista
            _InsertaCeldaExcel(18, rTMPListado[2].Text03, 2, 2, 2, 2, STRSUBSTNO('R%1', lwCombina), 3);         //. Maletero
          END
          ELSE
          BEGIN
            _InsertaCeldaExcel(12, rTMPListado[2].Text01, 2, 2, 2, 2, '', 0);          //. Hotel
            _InsertaCeldaExcel(13, FORMAT(rTMPListado[2].Int02), 2, 2, 2, 2, '', 3);   //. Personas hotel
          END;
        UNTIL rTMPListado[2].NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _InsertaCeldaExcel@1100217009(pwColumna@1100217000 : Integer;pwValor@1100217001 : Text[250];pwBordeIzq@1100217002 : Integer;pwBordeSup@1100217003 : Integer;pwBordeDer@1100217004 : Integer;pwBordeInf@1100217005 : Integer;pwCombina@1100217006 : Code[10];pwAlinHor@1100217007 : Integer);
    BEGIN
      // _InsertaCeldaExcel

      rExcel.INIT;
      rExcel.VALIDATE("Row No."             , wLinea);
      rExcel.VALIDATE("Column No."          , pwColumna);
      rExcel.VALIDATE("Cell Value as Text"  , pwValor);
      rExcel.VALIDATE("Borde Izq"           , pwBordeIzq);
      rExcel.VALIDATE("Borde Sup"           , pwBordeSup);
      rExcel.VALIDATE("Borde Der"           , pwBordeDer);
      rExcel.VALIDATE("Borde Abaj"          , pwBordeInf);
      rExcel.VALIDATE("Fusionar hasta celda", pwCombina);
      IF pwCombina <> '' THEN
        rExcel.VALIDATE("Texto Alineacion Vertical", -4108); //. Centrar

      rExcel.VALIDATE("Texto Alineacion Horizontal", pwAlinHor);
      rExcel.VALIDATE("Tama¤o Fuente"              , 8);
      rExcel.INSERT;
    END;

    LOCAL PROCEDURE _ReservaVuelo@1100217018(prVuelo@1100217000 : Record 7009754) : Boolean;
    VAR
      lrRsvTra@1100217001 : Record 7009744;
      lrAcumVue@1100217002 : Record 7009794;
    BEGIN
      // _ReservaVuelo

      //+$004 <
      lrAcumVue.RESET;
      lrAcumVue.SETRANGE(Fecha   , prVuelo.Fecha);
      lrAcumVue.SETRANGE(Compa¤ia, prVuelo.Compa¤ia);
      lrAcumVue.SETRANGE(Vuelo   , prVuelo.Vuelo);
      EXIT(NOT lrAcumVue.ISEMPTY);
      //+$004 >

      //-$004lrRsvTra.RESET;
      //-$004IF prVuelo."Entrada/Salida" = prVuelo."Entrada/Salida"::Entrada THEN
      //-$004BEGIN
      //-$004  lrRsvTra.SETRANGE("Fecha entrada"   , prVuelo.Fecha);
      //-$004  lrRsvTra.SETRANGE("Compa¤ia entrada", prVuelo.Compa¤ia);
      //-$004  lrRsvTra.SETRANGE("Vuelo entrada"   , prVuelo.Vuelo);
      //-$004END
      //-$004ELSE
      //-$004BEGIN
      //-$004  lrRsvTra.SETRANGE("Fecha salida"   , prVuelo.Fecha);
      //-$004  lrRsvTra.SETRANGE("Compa¤ia salida", prVuelo.Compa¤ia);
      //-$004  lrRsvTra.SETRANGE("Vuelo salida"   , prVuelo.Vuelo);
      //-$004END;

      //-$004EXIT(NOT lrRsvTra.ISEMPTY);
    END;

    BEGIN
    {
      $001 AJS 27022013 Mostrar el nombre del guia trasladista y el maletero en lugar del codigo

      $002 AJS 03022014 Filtrar solo los vuelos con hora de salida o con hora de llegada

      $003 AJS 10032014 Corrijo error para los dias donde solo hay llegadas

      $004 AJS 10042014 Modifico la funcion _ReservaVuelo para trabajar con acumulado x vuelo en lugar de reserva transfer

      //rTMPListado.Code01 := Vuelo
      //rTMPListado.Code02 := Llegada/Salida
      //rTMPListado.Time01 := Hora vuelo
      //rTMPListado.Int01  := Hoja Excel
      //rTMPListado.Text01 := lrHotel.Nombre;
      //rTMPListado.Time02 := lrHorasAgr."Hora recogida";
      //rTMPListado.Int02  := lrHorasAgr."Personas salida";
      //rTMPListado.Int03  := prAgrup."Personas salida";
      //rTMPListado.Code03 := prAgrup.Transportista;
      //rTMPListado.Int04  := prAgrup."Capacidad Vehiculo";
      //rTMPListado.Int05  := prAgrup."N§ Agrupacion";
      //rTMPListado.Text02 := _GetTrasladistaAgrupacion(prAgrup."N§ Agrupacion");
      //rTMPListado.Text03 := _GetMaleteroAgrupacion(prAgrup."N§ Agrupacion");
    }
    END.
  }
  RDLDATA
  {
  }
}
