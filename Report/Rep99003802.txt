OBJECT Report 99003802 Copy Production Order Document
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy Production Order Document;
               ESP=Copiar documento O.P.];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF ToProdOrder."No." = '' THEN
                    ERROR(Text000);

                  IF (ToProdOrder.Status = StatusType) AND (ToProdOrder."No." = DocNo) THEN
                    ERROR(Text002,FromProdOrder.TABLECAPTION);

                  IF IncludeHeader THEN
                    CopyProdOrder;

                  CopyProdLines;
                END;

  }
  DATAITEMS
  {
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=6160;
      Height=1540;
      OnOpenForm=BEGIN
                   IF DocNo <> '' THEN BEGIN
                     CASE StatusType OF
                       StatusType::Simulated:
                         IF FromProdOrder.GET(FromProdOrder.Status::Simulated,DocNo) THEN;
                       StatusType::Planned:
                         IF FromProdOrder.GET(FromProdOrder.Status::Planned,DocNo) THEN;
                       StatusType::"Firm Planned":
                         IF FromProdOrder.GET(FromProdOrder.Status::"Firm Planned",DocNo) THEN;
                       StatusType::Released:
                         IF FromProdOrder.GET(FromProdOrder.Status::Released,DocNo) THEN;
                     END;
                     IF FromProdOrder."No." = '' THEN
                       DocNo := '';
                   END;
                 END;

    }
    CONTROLS
    {
      { 3   ;TextBox      ;3410 ;0    ;2750 ;440  ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                                    ESP=Simulada,Planificada,Planif. en firme,Lanzada,Terminada];
                                                   SourceExpr=StatusType;
                                                   OnValidate=BEGIN
                                                                DocNo := '';
                                                              END;
                                                               }
      { 23  ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=3 }
      { 8   ;TextBox      ;3410 ;550  ;2750 ;440  ;CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento];
                                                   SourceExpr=DocNo;
                                                   OnLookup=BEGIN
                                                              LookupDocNo;
                                                            END;
                                                             }
      { 9   ;Label        ;0    ;550  ;3300 ;440  ;ParentControl=8 }
      { 1   ;CheckBox     ;3410 ;1100 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Include Header;
                                                              ESP=Incluir cabecera];
                                                   SourceExpr=IncludeHeader }
      { 2   ;Label        ;0    ;1100 ;3300 ;440  ;ParentControl=1 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF DocNo <> '' THEN BEGIN
                     CASE StatusType OF
                       StatusType::Simulated:
                         IF FromProdOrder.GET(FromProdOrder.Status::Simulated,DocNo) THEN;
                       StatusType::Planned:
                         IF FromProdOrder.GET(FromProdOrder.Status::Planned,DocNo) THEN;
                       StatusType::"Firm Planned":
                         IF FromProdOrder.GET(FromProdOrder.Status::"Firm Planned",DocNo) THEN;
                       StatusType::Released:
                         IF FromProdOrder.GET(FromProdOrder.Status::Released,DocNo) THEN;
                     END;
                     IF FromProdOrder."No." = '' THEN
                       DocNo := '';
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Status;
                             ESP=Estado];
                  OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                   ESP=Simulada,Planificada,Planif. en firme,Lanzada,Terminada];
                  SourceExpr=StatusType;
                  OnValidate=BEGIN
                               DocNo := '';
                             END;
                              }

      { 8   ;2   ;Field     ;
                  CaptionML=[ENU=Document No.;
                             ESP=N§ documento];
                  SourceExpr=DocNo;
                  OnLookup=BEGIN
                             LookupDocNo;
                           END;
                            }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Include Header;
                             ESP=Incluir cabecera];
                  SourceExpr=IncludeHeader }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="You must enter a document number. ";ESP="Debe introducir n§ de documento. "';
      Text001@1001 : TextConst 'ENU=You must enter a document number in the Document Number field.;ESP=Debe introducir n§ de documento en el campo N§ documento.';
      ToProdOrder@1002 : Record 5405;
      FromProdOrder@1003 : Record 5405;
      StatusType@1005 : 'Simulated,Planned,Firm Planned,Released,Finished';
      DocNo@1006 : Code[20];
      IncludeHeader@1007 : Boolean;
      Text002@1102601000 : TextConst 'ENU=The %1 cannot be copied onto itself.;ESP=%1 no se puede copiar sobre s¡ mismo.';

    PROCEDURE SetProdOrder@2(VAR NewProdOrder@1000 : Record 5405);
    BEGIN
      ToProdOrder := NewProdOrder;
    END;

    LOCAL PROCEDURE LookupDocNo@3();
    BEGIN
      FromProdOrder.SETRANGE(Status,StatusType);
      FromProdOrder."No." := DocNo;
      IF FORM.RUNMODAL(0,FromProdOrder) = ACTION::LookupOK THEN
        DocNo := FromProdOrder."No.";
    END;

    PROCEDURE CopyProdOrder@7();
    VAR
      FromProdOrder@1000 : Record 5405;
      FromProdDocDim@1001 : Record 358;
      DimMgt@1003 : Codeunit 408;
    BEGIN
      FromProdOrder.SETRANGE(Status,StatusType);
      FromProdOrder.SETRANGE("No.",DocNo);
      IF FromProdOrder.FIND('-') THEN BEGIN
        ToProdOrder.Description := FromProdOrder.Description;
        ToProdOrder."Search Description" := FromProdOrder."Search Description";
        ToProdOrder."Description 2" := FromProdOrder."Description 2";
        ToProdOrder."Creation Date" := FromProdOrder."Creation Date";
        ToProdOrder."Last Date Modified" := FromProdOrder."Last Date Modified";
        ToProdOrder."Source Type" := FromProdOrder."Source Type";
        ToProdOrder."Source No." := FromProdOrder."Source No.";
        ToProdOrder."Routing No." := FromProdOrder."Routing No.";
        ToProdOrder."Inventory Posting Group" := FromProdOrder."Inventory Posting Group";
        ToProdOrder."Gen. Prod. Posting Group" := FromProdOrder."Gen. Prod. Posting Group";
        ToProdOrder."Gen. Bus. Posting Group" := FromProdOrder."Gen. Bus. Posting Group";
        ToProdOrder."Starting Time" := FromProdOrder."Starting Time";
        ToProdOrder."Starting Date" := FromProdOrder."Starting Date";
        ToProdOrder."Ending Time" := FromProdOrder."Ending Time";
        ToProdOrder."Ending Date" := FromProdOrder."Ending Date";
        ToProdOrder."Due Date" := FromProdOrder."Due Date";
        ToProdOrder.Blocked := FromProdOrder.Blocked;
        ToProdOrder."Shortcut Dimension 1 Code" := FromProdOrder."Shortcut Dimension 1 Code";
        ToProdOrder."Shortcut Dimension 2 Code" := FromProdOrder."Shortcut Dimension 2 Code";
        ToProdOrder."Location Code" := FromProdOrder."Location Code";
        ToProdOrder."Bin Code" := FromProdOrder."Bin Code";
        ToProdOrder."Low-Level Code" := FromProdOrder."Low-Level Code";
        ToProdOrder.Quantity := FromProdOrder.Quantity;
        ToProdOrder."Unit Cost" := FromProdOrder."Unit Cost";
        ToProdOrder."Cost Amount" := FromProdOrder."Cost Amount";
        ToProdOrder."Planned Order No." := FromProdOrder."Planned Order No.";
        ToProdOrder."Firm Planned Order No." := FromProdOrder."Firm Planned Order No.";
        ToProdOrder."Simulated Order No." := FromProdOrder."Simulated Order No.";
        ToProdOrder."Work Center Filter" := FromProdOrder."Work Center Filter";
        ToProdOrder."Capacity Type Filter" := FromProdOrder."Capacity Type Filter";
        ToProdOrder."Capacity No. Filter" := FromProdOrder."Capacity No. Filter";
        ToProdOrder."Date Filter" := FromProdOrder."Date Filter";
        ToProdOrder.Comment := FromProdOrder.Comment;
        ToProdOrder.MODIFY;
        FromProdDocDim.SetFilters(DATABASE::"Production Order",
          FromProdOrder.Status,FromProdOrder."No.",0,0);
        DimMgt.MoveProdDocDimToProdDocDim(
          FromProdDocDim,DATABASE::"Production Order",ToProdOrder.Status,ToProdOrder."No.");
      END;
    END;

    PROCEDURE CopyProdLines@4();
    VAR
      FromProdOrderLine@1000 : Record 5406;
      ToProdOrderLine@1001 : Record 5406;
      FromProdDocDim@1002 : Record 358;
      DimMgt@1004 : Codeunit 408;
      LineNo@1005 : Integer;
    BEGIN
      ToProdOrderLine.SETRANGE(Status,ToProdOrder.Status);
      ToProdOrderLine.SETRANGE("Prod. Order No.",ToProdOrder."No.");
      IF ToProdOrderLine.FIND('+') THEN
        LineNo := ToProdOrderLine."Line No." + 10000
      ELSE
        LineNo := 10000;

      FromProdOrderLine.SETRANGE(Status,StatusType);
      FromProdOrderLine.SETRANGE("Prod. Order No.",DocNo);
      IF FromProdOrderLine.FIND('-') THEN
        REPEAT
          ToProdOrderLine."Line No." := LineNo;
          ToProdOrderLine.Status := ToProdOrder.Status;
          ToProdOrderLine."Prod. Order No." := ToProdOrder."No.";
          ToProdOrderLine."Item No." := FromProdOrderLine."Item No.";
          ToProdOrderLine."Variant Code" := FromProdOrderLine."Variant Code";
          ToProdOrderLine.Description := FromProdOrderLine.Description;
          ToProdOrderLine."Description 2" := FromProdOrderLine."Description 2";
          ToProdOrderLine."Location Code" := FromProdOrderLine."Location Code";
          ToProdOrderLine."Shortcut Dimension 1 Code" := FromProdOrderLine."Shortcut Dimension 1 Code";
          ToProdOrderLine."Shortcut Dimension 2 Code" := FromProdOrderLine."Shortcut Dimension 2 Code";
          ToProdOrderLine."Bin Code" := FromProdOrderLine."Bin Code";
          ToProdOrderLine.Quantity := FromProdOrderLine.Quantity;
          ToProdOrderLine."Quantity (Base)" := FromProdOrderLine."Quantity (Base)";
          ToProdOrderLine."Remaining Quantity" := ToProdOrderLine.Quantity;
          ToProdOrderLine."Remaining Qty. (Base)" := ToProdOrderLine."Quantity (Base)";
          IF ToProdOrder."Source Type" = ToProdOrder."Source Type"::Family THEN
            ToProdOrderLine."Routing Reference No." := 0
          ELSE
            ToProdOrderLine."Routing Reference No." := ToProdOrderLine."Line No.";
          ToProdOrderLine."Due Date" := FromProdOrderLine."Due Date";
          ToProdOrderLine."Starting Date" := FromProdOrderLine."Starting Date";
          ToProdOrderLine."Starting Time" := FromProdOrderLine."Starting Time";
          ToProdOrderLine."Ending Date" := FromProdOrderLine."Ending Date";
          ToProdOrderLine."Ending Time" := FromProdOrderLine."Ending Time";
          ToProdOrderLine."Planning Level Code" := FromProdOrderLine."Planning Level Code";
          ToProdOrderLine.Priority := FromProdOrderLine.Priority;
          ToProdOrderLine."Production BOM No." := FromProdOrderLine."Production BOM No.";
          ToProdOrderLine."Routing No." := FromProdOrderLine."Routing No.";
          ToProdOrderLine."Inventory Posting Group" := FromProdOrderLine."Inventory Posting Group";
          ToProdOrderLine."Unit Cost" := FromProdOrderLine."Unit Cost";
          ToProdOrderLine."Cost Amount" := FromProdOrderLine."Cost Amount";
          ToProdOrderLine."Unit of Measure Code" := FromProdOrderLine."Unit of Measure Code";
          ToProdOrderLine."Production BOM Version Code" := FromProdOrderLine."Production BOM Version Code";
          ToProdOrderLine."Routing Version Code" := FromProdOrderLine."Routing Version Code";
          ToProdOrderLine."Routing Type" := FromProdOrderLine."Routing Type";
          ToProdOrderLine."Qty. per Unit of Measure" := FromProdOrderLine."Qty. per Unit of Measure";
          ToProdOrderLine."Capacity Type Filter" := FromProdOrderLine."Capacity Type Filter";
          ToProdOrderLine."Capacity No. Filter" := FromProdOrderLine."Capacity No. Filter";
          ToProdOrderLine."Scrap %" := FromProdOrderLine."Scrap %";
          ToProdOrderLine."Date Filter" := FromProdOrderLine."Date Filter";
          ToProdOrderLine.INSERT;
          FromProdDocDim.SetFilters(DATABASE::"Prod. Order Line",FromProdOrderLine.Status,
            FromProdOrderLine."Prod. Order No.",FromProdOrderLine."Line No.",0);
          DimMgt.MoveProdDocDimToProdDocDim(
            FromProdDocDim,DATABASE::"Prod. Order Line",
            ToProdOrderLine.Status,
            ToProdOrderLine."Prod. Order No.");
          LineNo := LineNo + 10000;
        UNTIL FromProdOrderLine.NEXT = 0
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
