OBJECT Report 10745 Perform VAT Change Tool Conv.
{
  OBJECT-PROPERTIES
  {
    Date=31/05/10;
    Time=11:34:42;
    Modified=Yes;
    Version List=VAT Change Tool,SGB;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Perform VAT Change Tool Conv.;
               ESP=Realizar conv. herramienta modif. IVA];
    OnInitReport=BEGIN
                   IgnoreStatusOnSalesHeader := TRUE;
                   IgnoreStatusOnPurchHeader := TRUE;
                 END;

    OnPreReport=BEGIN
                  SetupExists := GetSetup;
                  GetFilterSettings;
                  GetOtherSettings;

                  ErrorCounter := 0;
                  WarningCounter := 0;
                  ConfirmationCounter := 0;
                  ConfirmationRejectedCounter := 0;

                  ShowDetails := TRUE;

                  // ----------------------------------------------
                  // please specify which steps of checking
                  // should be skipped if neccessary
                  // ----------------------------------------------
                  NoOfCheckSteps := 29;
                  SkipCheck[1] := FALSE;
                  SkipCheck[2] := FALSE;
                  SkipCheck[3] := FALSE;
                  SkipCheck[4] := FALSE;
                  SkipCheck[5] := FALSE;
                  SkipCheck[6] := FALSE;
                  SkipCheck[7] := FALSE;
                  SkipCheck[8] := FALSE;
                  SkipCheck[9] := FALSE;
                  SkipCheck[10] := FALSE;
                  SkipCheck[11] := FALSE;
                  SkipCheck[12] := FALSE;
                  SkipCheck[13] := FALSE;
                  SkipCheck[14] := FALSE;
                  SkipCheck[15] := FALSE;
                  SkipCheck[16] := FALSE;
                  SkipCheck[17] := FALSE;
                  SkipCheck[18] := FALSE;
                  SkipCheck[19] := FALSE;
                  SkipCheck[20] := FALSE;
                  SkipCheck[21] := FALSE;
                  SkipCheck[22] := FALSE;
                  SkipCheck[23] := FALSE;
                  SkipCheck[24] := FALSE;
                  SkipCheck[25] := FALSE;
                  SkipCheck[26] := FALSE;
                  SkipCheck[27] := FALSE;
                  SkipCheck[28] := FALSE;
                  SkipCheck[29] := FALSE;


                  // ----------------------------------------------
                  // please specify which steps of converting
                  // should be skipped if neccessary
                  // ----------------------------------------------
                  NoOfConvertSteps := 23;
                  SkipConvert[1] := FALSE;
                  SkipConvert[2] := FALSE;
                  SkipConvert[3] := FALSE;
                  SkipConvert[4] := FALSE;
                  SkipConvert[5] := FALSE;
                  SkipConvert[6] := FALSE;
                  SkipConvert[7] := FALSE;
                  SkipConvert[8] := FALSE;
                  SkipConvert[9] := FALSE;
                  SkipConvert[10] := FALSE;
                  SkipConvert[11] := FALSE;
                  SkipConvert[12] := FALSE;
                  SkipConvert[13] := FALSE;
                  SkipConvert[14] := FALSE;
                  SkipConvert[15] := FALSE;
                  SkipConvert[16] := FALSE;
                  SkipConvert[17] := FALSE;
                  SkipConvert[18] := FALSE;
                  SkipConvert[19] := FALSE;
                  SkipConvert[20] := FALSE;
                  SkipConvert[21] := FALSE;
                  SkipConvert[22] := FALSE;
                  SkipConvert[23] := FALSE;
                END;

    OnPostReport=BEGIN
                   IF PerformConversion THEN BEGIN
                     IF ErrorCounter > 0 THEN BEGIN
                       IF WarningCounter > 0 THEN
                         MESSAGE(Text1100103 + '\' + Text1100104 + '\\' + Text1100105)
                       ELSE
                         MESSAGE(Text1100106 + '\' + Text1100104 + '\\' + Text1100105);
                     END ELSE
                       IF ConfirmationRejectedCounter > 0 THEN
                         MESSAGE(Text1100102)
                       ELSE BEGIN
                         IF WarningCounter > 0 THEN BEGIN
                           IF NOT CONFIRM(Text1100107 + '\' + Text1100108,FALSE) THEN
                             MESSAGE(Text1100109)
                           ELSE
                             Convert;
                         END ELSE
                           Convert;
                       END;
                   END ELSE BEGIN
                     IF ErrorCounter > 0 THEN BEGIN
                       IF WarningCounter > 0 THEN
                         MESSAGE(Text1100103 + '\' + Text1100105)
                       ELSE
                         MESSAGE(Text1100106 + '\' + Text1100105)
                     END
                   END;
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table15;
        DataItemVarName=GetGLAccountFilters;
        ReqFilterFields=No.;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table27;
        DataItemVarName=GetItemFilters;
        ReqFilterFields=No.;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table156;
        DataItemVarName=GetResourceFilters;
        ReqFilterFields=No.;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        DataItemVarName=PageHeader;
        OnAfterGetRecord=BEGIN
                           ProgressWindow.OPEN('#1##############################################################' +
                                               '\' +
                                               Text1100035 +
                                               '#2#####: #3#################################################' +
                                               '\' +
                                               '@4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');
                           ProgressWindow.UPDATE(1,Text1100034);
                         END;

        OnPostDataItem=BEGIN
                         IF NOT PerformConversion THEN
                           ProgressWindow.CLOSE;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            PrintOnEveryPage=Yes;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100000;Label     ;0    ;0    ;7500 ;423  ;FontSize=8;
                                                         FontBold=Yes;
                                                         CaptionML=[ENU=VAT Rate Change - Conversion Tool;
                                                                    ESP=Herramienta conv. - modif. ¡ndice IVA] }
            { 1100001;TextBox   ;14850;0    ;3150 ;423  ;HorzAlign=Right;
                                                         SourceExpr=FORMAT(TODAY,0,4) }
            { 1100002;TextBox   ;0    ;423  ;7500 ;423  ;SourceExpr=COMPANYNAME }
            { 1100003;TextBox   ;17550;423  ;450  ;423  ;CaptionML=[ENU=Page;
                                                                    ESP=P g.];
                                                         SourceExpr=CurrReport.PAGENO }
            { 1100004;Label     ;16800;423  ;750  ;423  ;ParentControl=1100003 }
            { 1100005;TextBox   ;15750;846  ;2250 ;423  ;HorzAlign=Right;
                                                         SourceExpr=USERID }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=14805;
          }
          CONTROLS
          {
            { 1100006;Shape     ;75   ;0    ;17850;150  ;ShapeStyle=HorzLine }
            { 1100007;Shape     ;0    ;75   ;150  ;14730;ShapeStyle=VertLine }
            { 1100008;Shape     ;17850;75   ;150  ;14730;ShapeStyle=VertLine }
            { 1100009;Label     ;300  ;423  ;1500 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Settings:;
                                                                    ESP=Configuraci¢n:] }
            { 1100010;TextBox   ;600  ;846  ;14700;423  ;SourceExpr=PerformConversionText }
            { 1100011;TextBox   ;600  ;2115 ;5550 ;423  ;SourceExpr=Text1100003 }
            { 1100012;TextBox   ;6300 ;2115 ;9000 ;423  ;SourceExpr=UpdateGLAccountsText }
            { 1100013;TextBox   ;600  ;2538 ;5550 ;423  ;SourceExpr=Text1100004 }
            { 1100014;TextBox   ;6300 ;2538 ;9000 ;423  ;SourceExpr=UpdateItemsText }
            { 1100015;TextBox   ;600  ;3807 ;5550 ;423  ;SourceExpr=Text1100007 }
            { 1100016;TextBox   ;6300 ;3807 ;9000 ;423  ;SourceExpr=UpdateResourcesText }
            { 1100017;TextBox   ;600  ;8037 ;5550 ;423  ;SourceExpr=Text1100017 }
            { 1100018;TextBox   ;6300 ;8037 ;9000 ;423  ;SourceExpr=UpdateSalesDocsText }
            { 1100019;TextBox   ;600  ;8460 ;5550 ;423  ;SourceExpr=Text1100018 }
            { 1100020;TextBox   ;6300 ;8460 ;9000 ;423  ;SourceExpr=UpdatePurchDocsText }
            { 1100021;TextBox   ;600  ;10152;5550 ;423  ;SourceExpr=Text1100022 }
            { 1100022;TextBox   ;6300 ;10152;9000 ;423  ;SourceExpr=UpdateRemindersText }
            { 1100023;TextBox   ;600  ;10575;5550 ;423  ;SourceExpr=Text1100023 }
            { 1100024;TextBox   ;6300 ;10575;9000 ;423  ;SourceExpr=UpdateFinChargeMemosText }
            { 1100025;TextBox   ;600  ;10998;5550 ;423  ;SourceExpr=Text1100024 }
            { 1100026;TextBox   ;6300 ;10998;9000 ;423  ;SourceExpr=UpdateBizTalkPartnerSetupText }
            { 1100027;TextBox   ;600  ;11844;5550 ;423  ;SourceExpr=STRSUBSTNO(Text1100025,GetGLAccountFilters.TABLECAPTION) }
            { 1100028;TextBox   ;6300 ;11844;9000 ;423  ;SourceExpr=FilterOnGLAccounts }
            { 1100029;TextBox   ;600  ;12267;5550 ;423  ;SourceExpr=STRSUBSTNO(Text1100025,GetItemFilters.TABLECAPTION) }
            { 1100030;TextBox   ;6300 ;12267;9000 ;423  ;SourceExpr=FilterOnItems }
            { 1100031;TextBox   ;600  ;12690;5550 ;423  ;SourceExpr=STRSUBSTNO(Text1100025,GetResourceFilters.TABLECAPTION) }
            { 1100032;TextBox   ;6300 ;12690;9000 ;423  ;SourceExpr=FilterOnResources }
            { 1100033;TextBox   ;600  ;13536;14700;423  ;SourceExpr=SuppressWarningsText }
            { 1100034;TextBox   ;600  ;13959;14700;423  ;SourceExpr=SuppressConfirmationsText }
            { 1100035;TextBox   ;600  ;4230 ;5550 ;423  ;SourceExpr=Text1100008 }
            { 1100036;TextBox   ;6300 ;4230 ;9000 ;423  ;SourceExpr=UpdateGenJournalLinesText }
            { 1100037;TextBox   ;600  ;4653 ;5550 ;423  ;SourceExpr=Text1100009 }
            { 1100038;TextBox   ;6300 ;4653 ;9000 ;423  ;SourceExpr=UpdateGenJournalAllocText }
            { 1100039;TextBox   ;6300 ;1692 ;9000 ;423  ;SourceExpr=UpdateGenProdPostGroupsText }
            { 1100040;TextBox   ;600  ;1692 ;5550 ;423  ;SourceExpr=Text1100002 }
            { 1100041;TextBox   ;600  ;2961 ;5550 ;423  ;SourceExpr=Text1100005 }
            { 1100042;TextBox   ;6300 ;2961 ;9000 ;423  ;SourceExpr=UpdateItemCategoriesText }
            { 1100043;TextBox   ;600  ;3384 ;5550 ;423  ;SourceExpr=Text1100006 }
            { 1100044;TextBox   ;6300 ;3384 ;9000 ;423  ;SourceExpr=UpdateItemChargesText }
            { 1100045;TextBox   ;600  ;5499 ;5550 ;423  ;SourceExpr=Text1100011 }
            { 1100046;TextBox   ;6300 ;5499 ;9000 ;423  ;SourceExpr=UpdateResJournalLinesText }
            { 1100047;TextBox   ;600  ;6345 ;5550 ;423  ;SourceExpr=Text1100013 }
            { 1100048;TextBox   ;6300 ;6345 ;9000 ;423  ;SourceExpr=UpdateRequisitionLinesText }
            { 1100049;TextBox   ;600  ;6768 ;5550 ;423  ;SourceExpr=Text1100014 }
            { 1100050;TextBox   ;6300 ;6768 ;9000 ;423  ;SourceExpr=UpdateStandardItemJnlLinesText }
            { 1100051;TextBox   ;600  ;7191 ;5550 ;423  ;SourceExpr=Text1100015 }
            { 1100052;TextBox   ;6300 ;7191 ;9000 ;423  ;SourceExpr=UpdateServiceInvoiceLinesText }
            { 1100053;TextBox   ;600  ;7614 ;5550 ;423  ;SourceExpr=Text1100016 }
            { 1100054;TextBox   ;6300 ;7614 ;9000 ;423  ;SourceExpr=UpdateServPriceAdjDetailsText }
            { 1100055;TextBox   ;600  ;8883 ;5550 ;423  ;SourceExpr=Text1100019 }
            { 1100056;TextBox   ;6300 ;8883 ;9000 ;423  ;SourceExpr=UpdateProductionOrdersText }
            { 1100057;TextBox   ;600  ;9306 ;5550 ;423  ;SourceExpr=Text1100020 }
            { 1100058;TextBox   ;6300 ;9306 ;9000 ;423  ;SourceExpr=UpdateWorkCentersText }
            { 1100059;TextBox   ;600  ;9729 ;5550 ;423  ;SourceExpr=Text1100021 }
            { 1100060;TextBox   ;6300 ;9729 ;9000 ;423  ;SourceExpr=UpdateMachineCentersText }
            { 1100061;TextBox   ;600  ;5076 ;5550 ;423  ;SourceExpr=Text1100010 }
            { 1100062;TextBox   ;6300 ;5076 ;9000 ;423  ;SourceExpr=UpdateStdGenJnlLinesText }
            { 1100424;TextBox   ;6300 ;5922 ;9000 ;423  ;SourceExpr=UpdateJobJournalLinesText }
            { 1100425;TextBox   ;600  ;5922 ;5550 ;423  ;SourceExpr=Text1100012 }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10741;
        DataItemTableView=SORTING(From-VAT Prod. Posting Group);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=846;
          }
          CONTROLS
          {
            { 1100063;TextBox   ;600  ;0    ;15300;423  ;SourceExpr=Text1100032 }
            { 1100064;Label     ;900  ;423  ;3900 ;423  ;ParentControl=1100068;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100065;Label     ;5100 ;423  ;3900 ;423  ;ParentControl=1100069;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100066;Shape     ;0    ;0    ;150  ;846  ;ShapeStyle=VertLine }
            { 1100067;Shape     ;17850;0    ;150  ;846  ;ShapeStyle=VertLine }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100068;TextBox   ;900  ;0    ;3900 ;423  ;SourceExpr="From-VAT Prod. Posting Group" }
            { 1100069;TextBox   ;5100 ;0    ;3900 ;423  ;SourceExpr="To-VAT Prod. Posting Group" }
            { 1100070;Shape     ;17850;0    ;150  ;423  ;ShapeStyle=VertLine }
            { 1100071;Shape     ;0    ;0    ;150  ;423  ;ShapeStyle=VertLine }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10742;
        DataItemTableView=SORTING(From-Gen. Prod. Posting Group);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1269;
          }
          CONTROLS
          {
            { 1100072;TextBox   ;600  ;423  ;15300;423  ;SourceExpr=Text1100033 }
            { 1100073;Label     ;900  ;846  ;3900 ;423  ;ParentControl=1100077;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100074;Label     ;5100 ;846  ;3900 ;423  ;ParentControl=1100078;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100075;Shape     ;17850;0    ;150  ;1269 ;ShapeStyle=VertLine }
            { 1100076;Shape     ;0    ;0    ;150  ;1269 ;ShapeStyle=VertLine }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100077;TextBox   ;900  ;0    ;3900 ;423  ;SourceExpr="From-Gen. Prod. Posting Group" }
            { 1100078;TextBox   ;5100 ;0    ;3900 ;423  ;SourceExpr="To-Gen. Prod. Posting Group" }
            { 1100079;Shape     ;17850;0    ;150  ;423  ;ShapeStyle=VertLine }
            { 1100080;Shape     ;0    ;0    ;150  ;423  ;ShapeStyle=VertLine }
          }
           }
        { PROPERTIES
          {
            SectionType=Footer;
            SectionWidth=18000;
            SectionHeight=846;
          }
          CONTROLS
          {
            { 1100081;Shape     ;75   ;348  ;17850;140  ;ShapeStyle=HorzLine }
            { 1100082;Shape     ;0    ;0    ;150  ;423  ;ShapeStyle=VertLine }
            { 1100083;Shape     ;17850;0    ;150  ;423  ;ShapeStyle=VertLine }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        DataItemVarName=Step 1;
        OnPreDataItem=VAR
                        VATRateRaiseSetup@1100000 : Record 10740;
                      BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 1:
                        //   It'll be checked, whether table 11080  "VAT Rate Raise Setup" is empty or not.
                        // Result:
                        //   Error, when the table 11080 "VAT Rate Raise Setup" is empty
                        // ----------------------------------------------------------------------------------
                        Step := 1;
                        TestPassed := TRUE;
                        Messagetext := STRSUBSTNO(Text1100065,VATRateRaiseSetup.TABLECAPTION);
                        ShowData := FALSE;

                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100036);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           VATRateRaiseSetup@1100000 : Record 10740;
                         BEGIN
                           IF VATRateRaiseSetup.ISEMPTY = TRUE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1269;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(TestPassed = FALSE);
                         END;

          }
          CONTROLS
          {
            { 1100084;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100085;TextBox   ;2850 ;423  ;15150;423  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100086;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        DataItemVarName=Step 2;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 2:
                        //   It'll be checked, whether the tool has already been performed or not.
                        // Result:
                        //   Error, when the tool has already been performed
                        // ----------------------------------------------------------------------------------
                        Step := 2;
                        TestPassed := TRUE;
                        Messagetext := Text1100066;
                        ShowData := FALSE;

                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100037);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=BEGIN
                           IF SetupExists = TRUE THEN
                             IF ToolCompleted = TRUE THEN BEGIN
                               // $001
                               IF NOT CONFIRM(Text50000, FALSE) THEN
                                 TestPassed := FALSE
                               ELSE
                                 TestPassed := TRUE;
                             END ELSE
                               CurrReport.SKIP;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1269;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(TestPassed = FALSE);
                         END;

          }
          CONTROLS
          {
            { 1100087;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100088;TextBox   ;2850 ;423  ;15150;423  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100089;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10741;
        DataItemTableView=SORTING(From-VAT Prod. Posting Group);
        DataItemVarName=Step 3;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 3:
                        //   It'll be checked, whether the VAT Prod. Group stated as "From-VAT Prod. Posting
                        //   Group" is used in table 324 "VAT Product Posting Group" or not.
                        // Result:
                        //   Warning, when the "From-VAT Prod. Posting Group" doesn't exist.
                        // ----------------------------------------------------------------------------------
                        Step := 3;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;

                        IF (SuppressWarnings = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100038);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           VATProductPostingGroup@1100000 : Record 324;
                         BEGIN
                           IF VATProductPostingGroup.GET("From-VAT Prod. Posting Group") = FALSE THEN BEGIN
                             TestPassed := FALSE;
                             Messagetext := STRSUBSTNO(Text1100135,
                                                       VATProductPostingGroup.TABLECAPTION,
                                                       FIELDCAPTION("From-VAT Prod. Posting Group"));
                             ShowData := TRUE;
                             Occurrences := Occurrences + 1;
                           END ELSE
                             ShowData := FALSE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           WarningCounter := WarningCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1269;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences = 1));
                         END;

          }
          CONTROLS
          {
            { 1100090;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Warning;
                                                                    ESP=Advertencia] }
            { 1100091;TextBox   ;2850 ;423  ;15150;423  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100092;Label     ;2850 ;846  ;1500 ;423  ;ParentControl=1100094 }
            { 1100093;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences >= 1));
                         END;

          }
          CONTROLS
          {
            { 1100094;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="From-VAT Prod. Posting Group" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10741;
        DataItemTableView=SORTING(From-VAT Prod. Posting Group);
        DataItemVarName=Step 4;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 4:
                        //   It'll be checked, whether the VAT Prod. Group stated as "To-VAT Prod. Posting
                        //   Group" is used in table 324 "VAT Product Posting Group" or not.
                        // Result:
                        //   Error, when the "To-VAT Prod. Posting Group" doesn't exist.
                        // ----------------------------------------------------------------------------------
                        Step := 4;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;

                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100039);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           VATProductPostingGroup@1100000 : Record 324;
                         BEGIN
                           IF VATProductPostingGroup.GET("To-VAT Prod. Posting Group") = FALSE THEN BEGIN
                             TestPassed := FALSE;
                             Messagetext := STRSUBSTNO(Text1100135,
                                                       VATProductPostingGroup.TABLECAPTION,
                                                       FIELDCAPTION("To-VAT Prod. Posting Group"));
                             ShowData := TRUE;
                             Occurrences := Occurrences + 1;
                           END ELSE
                             ShowData := FALSE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1269;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences = 1));
                         END;

          }
          CONTROLS
          {
            { 1100095;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100096;TextBox   ;2850 ;423  ;15150;423  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100097;Label     ;2850 ;846  ;1500 ;423  ;ParentControl=1100099;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100098;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences >= 1));
                         END;

          }
          CONTROLS
          {
            { 1100099;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="To-VAT Prod. Posting Group" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10741;
        DataItemTableView=SORTING(From-VAT Prod. Posting Group);
        DataItemVarName=Step 5;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 5:
                        //   It'll be checked, whether the VAT Prod. Group stated as "From-VAT Prod. Posting
                        //   Group" is used in table 325 "VAT Posting Setup" or not.
                        // Result:
                        //   Warning, when the "From-VAT Prod. Posting Group" is not in use.
                        // ----------------------------------------------------------------------------------
                        Step := 5;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;

                        IF (SuppressWarnings = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100040);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           VATPostingSetup@1100000 : Record 325;
                         BEGIN
                           VATPostingSetup.SETRANGE("VAT Prod. Posting Group","From-VAT Prod. Posting Group");
                           IF VATPostingSetup.COUNT = 0 THEN BEGIN
                             TestPassed := FALSE;
                             Messagetext := STRSUBSTNO(Text1100135,
                                                       VATPostingSetup.TABLECAPTION,
                                                       FIELDCAPTION("To-VAT Prod. Posting Group"));
                             ShowData := TRUE;
                             Occurrences := Occurrences + 1;
                           END ELSE
                             ShowData := FALSE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           WarningCounter := WarningCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1269;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences = 1));
                         END;

          }
          CONTROLS
          {
            { 1100100;TextBox   ;2850 ;423  ;15150;423  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100101;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Warning;
                                                                    ESP=Advertencia] }
            { 1100102;Label     ;2850 ;846  ;1500 ;423  ;ParentControl=1100104;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100103;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences >= 1));
                         END;

          }
          CONTROLS
          {
            { 1100104;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="From-VAT Prod. Posting Group" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10741;
        DataItemTableView=SORTING(From-VAT Prod. Posting Group);
        DataItemVarName=Step 6;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 6:
                        //   It'll be checked, whether the VAT Prod. Group stated as "To-VAT Prod. Posting
                        //   Group" in table 11081 "VAT Prod. Posting Group Conv." is also stated as
                        //   "From-VAT Prod. Posting Group" in the same table. This might lead to a
                        //   circular reference.
                        // Result:
                        //   Error, when the "To-VAT Prod. Posting Group" is also stated as
                        //   "From-VAT Prod. Posting Group".
                        // ----------------------------------------------------------------------------------
                        Step := 6;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;

                        IF SkipCheck[Step]  = TRUE THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100041);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           VATProdPostingGroupConv@1100000 : Record 10741;
                         BEGIN
                           found := FALSE;
                           IF VATProdPostingGroupConv.GET("To-VAT Prod. Posting Group") = TRUE THEN BEGIN
                             TestPassed := FALSE;
                             Messagetext := STRSUBSTNO(Text1100081 + ' ' + Text1100083 + ' ' + Text1100084,
                                                       FIELDCAPTION("From-VAT Prod. Posting Group"),
                                                       FIELDCAPTION("To-VAT Prod. Posting Group"),
                                                       TABLECAPTION);
                             ShowData := TRUE;
                             Occurrences := Occurrences + 1;
                           END ELSE
                             ShowData := FALSE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=2115;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences = 1));
                         END;

          }
          CONTROLS
          {
            { 1100105;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100106;TextBox   ;2850 ;423  ;15150;1269 ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100107;Label     ;2850 ;1692 ;1500 ;423  ;ParentControl=1100109;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100108;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences >= 1));
                         END;

          }
          CONTROLS
          {
            { 1100109;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="To-VAT Prod. Posting Group" }
            { 1100110;TextBox   ;0    ;0    ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10741;
        DataItemTableView=SORTING(From-VAT Prod. Posting Group);
        DataItemVarName=Step 7;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 7:
                        //   It'll be checked whether the VAT Prod. Group stated as "To-VAT Prod. Posting
                        //   Group" is already in use for G/L Accounts.
                        // Result:
                        //   Confirmation needed, when the "To-VAT Prod. Posting Group" is already in use
                        //   for G/L Accounts within the filter setting.
                        // ----------------------------------------------------------------------------------
                        Step := 7;

                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND (PerformUpdateGLAccounts = PerformUpdateGLAccounts::No) THEN
                          CurrReport.BREAK;
                        IF (SuppressConfirmations = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100042);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           GLAccount@1100000 : Record 15;
                         BEGIN
                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                           Messagetext := STRSUBSTNO(Text1100067,
                                                     FIELDCAPTION("To-VAT Prod. Posting Group"),
                                                     GLAccount.TABLECAPTION);
                         END;

        OnPostDataItem=VAR
                         GLAccount@1100000 : Record 15;
                       BEGIN
                         IF TestPassed = FALSE THEN BEGIN
                           ConfirmationCounter := ConfirmationCounter + 1;
                           IF (SetupExists = FALSE) OR (PerformUpdateGLAccounts <> PerformUpdateGLAccounts::No) THEN
                             IF PerformConversion = TRUE THEN
                               IF ConfirmationRejectedCounter = 0 THEN
                                 IF NOT CONFIRM(Text1100087 + '\' + Text1100086,
                                                TRUE,
                                                GLAccount.TABLECAPTION) THEN
                                   ConfirmationRejectedCounter := ConfirmationRejectedCounter + 1;
                         END;
                       END;

      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table15;
        DataItemTableView=SORTING(No.);
        DataItemVarName=Step 7-1;
        OnPreDataItem=BEGIN
                        IF FilterOnGLAccounts <> '' THEN
                          COPYFILTERS(GetGLAccountFilters);
                        SETRANGE("VAT Prod. Posting Group","Step 7"."To-VAT Prod. Posting Group");
                      END;

        OnAfterGetRecord=BEGIN
                           TestPassed := FALSE;
                           ShowDetailsData := TRUE;
                           Occurrences := Occurrences + 1;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1692;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(ShowHeader = TRUE);
                         END;

            OnPostSection=BEGIN
                            ShowHeader := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100111;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Confirmation Needed;
                                                                    ESP=Se requiere confirmaci¢n] }
            { 1100112;TextBox   ;2850 ;423  ;15150;846  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100113;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100115;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100114;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(ShowData = TRUE);
                         END;

            OnPostSection=BEGIN
                            ShowData := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100115;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Step 7"."To-VAT Prod. Posting Group" }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowDetailsHeader = TRUE) AND (ShowDetails = TRUE));
                         END;

            OnPostSection=BEGIN
                            ShowDetailsHeader := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100116;Label     ;4050 ;0    ;1500 ;423  ;ParentControl=1100118;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100117;Label     ;5700 ;0    ;4500 ;423  ;ParentControl=1100119;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowDetailsData = TRUE) AND (ShowDetails = TRUE));
                         END;

            OnPostSection=BEGIN
                            ShowDetailsData := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100118;TextBox   ;4050 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100119;TextBox   ;5700 ;0    ;4500 ;423  ;SourceExpr=Name }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10741;
        DataItemTableView=SORTING(From-VAT Prod. Posting Group);
        DataItemVarName=Step 8;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 8:
                        //   It'll be checked whether the VAT Prod. Group stated as "To-VAT Prod. Posting
                        //   Group" is already in use for Items.
                        // Result:
                        //   Confirmation needed, when the "To-VAT Prod. Posting Group" is already in use
                        //   for Items within the filter setting.
                        // ----------------------------------------------------------------------------------
                        Step := 8;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND (PerformUpdateItems = PerformUpdateItems::No) THEN
                          CurrReport.BREAK;
                        IF (SuppressConfirmations = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100043);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           Item@1100000 : Record 27;
                         BEGIN
                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                           Messagetext := STRSUBSTNO(Text1100067,
                                                     FIELDCAPTION("To-VAT Prod. Posting Group"),
                                                     Item.TABLECAPTION);
                         END;

        OnPostDataItem=VAR
                         Item@1100000 : Record 27;
                       BEGIN
                         IF TestPassed = FALSE THEN BEGIN
                           ConfirmationCounter := ConfirmationCounter + 1;
                           IF (SetupExists = FALSE) OR (PerformUpdateItems <> PerformUpdateItems::No) THEN
                             IF PerformConversion = TRUE THEN
                               IF ConfirmationRejectedCounter = 0 THEN
                                 IF NOT CONFIRM(Text1100087 + '\' + Text1100086,
                                                TRUE,
                                                Item.TABLECAPTION) THEN
                                   ConfirmationRejectedCounter := ConfirmationRejectedCounter + 1;
                         END;
                       END;

      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table27;
        DataItemTableView=SORTING(No.);
        DataItemVarName=Step 8-1;
        OnPreDataItem=BEGIN
                        IF FilterOnItems <> '' THEN
                          COPYFILTERS(GetItemFilters);
                        SETRANGE("VAT Prod. Posting Group","Step 8"."To-VAT Prod. Posting Group");
                      END;

        OnAfterGetRecord=BEGIN
                           TestPassed := FALSE;
                           ShowDetailsData := TRUE;
                           Occurrences := Occurrences + 1;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1692;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(ShowHeader = TRUE);
                         END;

            OnPostSection=BEGIN
                            ShowHeader := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100120;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Confirmation Needed;
                                                                    ESP=Se requiere confirmaci¢n] }
            { 1100121;TextBox   ;2850 ;423  ;15150;846  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100122;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100124;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100123;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(ShowData = TRUE);
                         END;

            OnPostSection=BEGIN
                            ShowData := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100124;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Step 8"."To-VAT Prod. Posting Group" }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowDetailsHeader = TRUE) AND (ShowDetails = TRUE));
                         END;

            OnPostSection=BEGIN
                            ShowDetailsHeader := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100125;Label     ;4050 ;0    ;1500 ;423  ;ParentControl=1100127;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100126;Label     ;5700 ;0    ;4500 ;423  ;ParentControl=1100128;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowDetailsData = TRUE) AND (ShowDetails = TRUE));
                         END;

            OnPostSection=BEGIN
                            ShowDetailsData := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100127;TextBox   ;4050 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100128;TextBox   ;5850 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10741;
        DataItemTableView=SORTING(From-VAT Prod. Posting Group);
        DataItemVarName=Step 9;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 9:
                        //   It'll be checked whether the VAT Prod. Group stated as "To-VAT Prod. Posting
                        //   Group" is already in use for Resources.
                        // Result:
                        //   Confirmation needed, when the "To-VAT Prod. Posting Group" is already in use
                        //   for resources within the filter setting.
                        // ----------------------------------------------------------------------------------
                        Step := 9;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND (PerformUpdateResources = PerformUpdateResources::No) THEN
                          CurrReport.BREAK;
                        IF (SuppressConfirmations = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100044);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           Resource@1100000 : Record 156;
                         BEGIN
                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                           Messagetext := STRSUBSTNO(Text1100067,
                                                     FIELDCAPTION("To-VAT Prod. Posting Group"),
                                                     Resource.TABLECAPTION);
                         END;

        OnPostDataItem=VAR
                         Resource@1100000 : Record 156;
                       BEGIN
                         IF TestPassed = FALSE THEN BEGIN
                           ConfirmationCounter := ConfirmationCounter + 1;
                           IF (SetupExists = FALSE) OR (PerformUpdateResources <> PerformUpdateResources::No) THEN
                             IF PerformConversion = TRUE THEN
                               IF ConfirmationRejectedCounter = 0 THEN
                                 IF NOT CONFIRM(Text1100087 + '\' + Text1100086,
                                                TRUE,
                                                Resource.TABLECAPTION) THEN
                                   ConfirmationRejectedCounter := ConfirmationRejectedCounter + 1;
                         END;
                       END;

      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table156;
        DataItemTableView=SORTING(No.);
        DataItemVarName=Step 9-1;
        OnPreDataItem=BEGIN
                        IF FilterOnResources <> '' THEN
                          COPYFILTERS(GetResourceFilters);
                        SETRANGE("VAT Prod. Posting Group","Step 9"."To-VAT Prod. Posting Group");
                      END;

        OnAfterGetRecord=BEGIN
                           TestPassed := FALSE;
                           ShowDetailsData := TRUE;
                           Occurrences := Occurrences + 1;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1692;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(ShowHeader = TRUE);
                         END;

            OnPostSection=BEGIN
                            ShowHeader := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100129;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Confirmation Needed;
                                                                    ESP=Se requiere confirmaci¢n] }
            { 1100130;TextBox   ;2850 ;423  ;15150;846  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100131;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100133;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100132;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(ShowData = TRUE);
                         END;

            OnPostSection=BEGIN
                            ShowData := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100133;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Step 9"."To-VAT Prod. Posting Group" }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowDetailsHeader = TRUE) AND (ShowDetails = TRUE));
                         END;

            OnPostSection=BEGIN
                            ShowDetailsHeader := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100134;Label     ;4050 ;0    ;1500 ;423  ;ParentControl=1100136;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100135;Label     ;5700 ;0    ;4500 ;423  ;ParentControl=1100137;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowDetailsData = TRUE) AND (ShowDetails = TRUE));
                         END;

            OnPostSection=BEGIN
                            ShowDetailsData := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100136;TextBox   ;4050 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100137;TextBox   ;5700 ;0    ;4500 ;423  ;SourceExpr=Name }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10742;
        DataItemTableView=SORTING(From-Gen. Prod. Posting Group);
        DataItemVarName=Step 10;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 10:
                        //   It'll be checked, whether the Gen. Prod. Group stated as "From-Gen. Prod.
                        //   Posting Group" is used in table 251 "Gen. Product Posting Group" or not.
                        // Result:
                        //   Warning, when the "From-Gen. Prod. Posting Group" doesn't exist.
                        // ----------------------------------------------------------------------------------
                        Step := 10;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;

                        IF (SuppressWarnings = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100045);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           GenProductPostingGroup@1100000 : Record 251;
                         BEGIN
                           IF GenProductPostingGroup.GET("From-Gen. Prod. Posting Group") = FALSE THEN BEGIN
                             TestPassed := FALSE;
                             Messagetext := STRSUBSTNO(Text1100135,
                                                       GenProductPostingGroup.TABLECAPTION,
                                                       FIELDCAPTION("From-Gen. Prod. Posting Group"));
                             ShowData := TRUE;
                             Occurrences := Occurrences + 1;
                           END ELSE
                             ShowData := FALSE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           WarningCounter := WarningCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1269;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences = 1));
                         END;

          }
          CONTROLS
          {
            { 1100138;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Warning;
                                                                    ESP=Advertencia] }
            { 1100139;TextBox   ;2850 ;423  ;15150;423  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100140;Label     ;2850 ;846  ;1500 ;423  ;ParentControl=1100142;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100141;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences >= 1));
                         END;

          }
          CONTROLS
          {
            { 1100142;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="From-Gen. Prod. Posting Group" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10742;
        DataItemTableView=SORTING(From-Gen. Prod. Posting Group);
        DataItemVarName=Step 11;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 11:
                        //   It'll be checked, whether the Gen. Prod. Group stated as "To-Gen. Prod.
                        //   Posting Group" is used in table 251 "Gen. Product Posting Group" or not.
                        // Result:
                        //   Error, when the "To-Gen. Prod. Posting Group" doesn't exist.
                        // ----------------------------------------------------------------------------------
                        Step := 11;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;

                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100046);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           GenProductPostingGroup@1100000 : Record 251;
                         BEGIN
                           IF GenProductPostingGroup.GET("To-Gen. Prod. Posting Group") = FALSE THEN BEGIN
                             TestPassed := FALSE;
                             Messagetext := STRSUBSTNO(Text1100135,
                                                       GenProductPostingGroup.TABLECAPTION,
                                                       FIELDCAPTION("To-Gen. Prod. Posting Group"));
                             ShowData := TRUE;
                             Occurrences := Occurrences + 1;
                           END;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1269;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences = 1));
                         END;

          }
          CONTROLS
          {
            { 1100143;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100144;TextBox   ;2850 ;423  ;15150;423  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100145;Label     ;2850 ;846  ;1500 ;423  ;ParentControl=1100147;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100146;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences >= 1));
                         END;

          }
          CONTROLS
          {
            { 1100147;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="To-Gen. Prod. Posting Group" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10742;
        DataItemTableView=SORTING(From-Gen. Prod. Posting Group);
        DataItemVarName=Step 12;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 12:
                        //   It'll be checked, whether the Gen. Prod. Group stated as "From-Gen. Prod.
                        //   Posting Group" is used in table 252 "General Posting Setup" or not.
                        // Result:
                        //   Warning, when the "From-Gen. Prod. Posting Group" is not in use.
                        // ----------------------------------------------------------------------------------
                        Step := 12;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;

                        IF (SuppressWarnings = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100047);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           GeneralPostingSetup@1100000 : Record 252;
                         BEGIN
                           GeneralPostingSetup.SETRANGE("Gen. Prod. Posting Group","From-Gen. Prod. Posting Group");
                           IF GeneralPostingSetup.COUNT = 0 THEN BEGIN
                             TestPassed := FALSE;
                             Messagetext := STRSUBSTNO(Text1100135,
                                                       GeneralPostingSetup.TABLECAPTION,
                                                       FIELDCAPTION("To-Gen. Prod. Posting Group"));
                             ShowData := TRUE;
                             Occurrences := Occurrences + 1;
                           END ELSE
                             ShowData := FALSE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           WarningCounter := WarningCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1269;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences = 1));
                         END;

          }
          CONTROLS
          {
            { 1100148;TextBox   ;2850 ;423  ;15150;423  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100149;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Warning;
                                                                    ESP=Advertencia] }
            { 1100150;Label     ;2850 ;846  ;1500 ;423  ;ParentControl=1100152;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100151;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences >= 1));
                         END;

          }
          CONTROLS
          {
            { 1100152;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="From-Gen. Prod. Posting Group" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10742;
        DataItemTableView=SORTING(From-Gen. Prod. Posting Group);
        DataItemVarName=Step 13;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 13:
                        //   It'll be checked, whether the Gen. Prod. Group stated as "To-Gen. Prod. Posting
                        //   Group" in table 11082 "Gen. Prod. Posting Group Conv." is also stated as
                        //   "From-Gen. Prod. Posting Group" in the same table. This might lead to a
                        //   circular reference.
                        // Result:
                        //   Error, when the "To-Gen. Prod. Posting Group" is also stated as
                        //   "From-Gen. Prod. Posting Group".
                        // ----------------------------------------------------------------------------------
                        Step := 13;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;

                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100048);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           GenProdPostingGroupConv@1100000 : Record 10742;
                         BEGIN
                           IF GenProdPostingGroupConv.GET("To-Gen. Prod. Posting Group") = TRUE THEN BEGIN
                             TestPassed := FALSE;
                             Messagetext := STRSUBSTNO(Text1100082 + ' ' + Text1100083 + ' ' + Text1100084,
                                                       FIELDCAPTION("From-Gen. Prod. Posting Group"),
                                                       FIELDCAPTION("To-Gen. Prod. Posting Group"),
                                                       TABLECAPTION);
                             ShowData := TRUE;
                             Occurrences := Occurrences + 1;
                           END ELSE
                             ShowData := FALSE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1692;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences = 1));
                         END;

          }
          CONTROLS
          {
            { 1100153;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100154;TextBox   ;2850 ;423  ;15150;846  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100155;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100157;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100156;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowData = TRUE) AND (Occurrences >= 1));
                         END;

          }
          CONTROLS
          {
            { 1100157;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="From-Gen. Prod. Posting Group" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10742;
        DataItemTableView=SORTING(From-Gen. Prod. Posting Group);
        DataItemVarName=Step 14;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 14:
                        //   It'll be checked whether the Gen. Prod. Group stated as "To-Gen. Prod. Posting
                        //   Group" is already in use for Items.
                        // Result:
                        //   Confirmation needed, when the "To-Gen. Prod. Posting Group" is already in use
                        //   for Items within the filter setting.
                        // ----------------------------------------------------------------------------------
                        Step := 14;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND (PerformUpdateItems = PerformUpdateItems::No) THEN
                          CurrReport.BREAK;
                        IF (SuppressConfirmations = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100049);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           Item@1100000 : Record 27;
                         BEGIN
                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                           Messagetext := STRSUBSTNO(Text1100085,
                                                     FIELDCAPTION("To-Gen. Prod. Posting Group"),
                                                     Item.TABLECAPTION);
                         END;

        OnPostDataItem=VAR
                         Item@1100000 : Record 27;
                       BEGIN
                         IF TestPassed = FALSE THEN BEGIN
                           ConfirmationCounter := ConfirmationCounter + 1;
                           IF (SetupExists = FALSE) OR (PerformUpdateItems <> PerformUpdateItems::No) THEN
                             IF PerformConversion = TRUE THEN
                               IF ConfirmationRejectedCounter = 0 THEN
                                 IF NOT CONFIRM(Text1100088 + '\' + Text1100086,
                                                TRUE,
                                                Item.TABLECAPTION) THEN
                                   ConfirmationRejectedCounter := ConfirmationRejectedCounter + 1;
                         END;
                       END;

      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table27;
        DataItemTableView=SORTING(No.);
        DataItemVarName=Step 14-1;
        OnPreDataItem=BEGIN
                        IF FilterOnItems <> '' THEN
                          COPYFILTERS(GetItemFilters);
                        SETRANGE("Gen. Prod. Posting Group","Step 14"."To-Gen. Prod. Posting Group");
                      END;

        OnAfterGetRecord=BEGIN
                           TestPassed := FALSE;
                           ShowDetailsData := TRUE;
                           Occurrences := Occurrences + 1;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1692;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(ShowHeader = TRUE);
                         END;

            OnPostSection=BEGIN
                            ShowHeader := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100158;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100162;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100159;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Confirmation Needed;
                                                                    ESP=Se requiere confirmaci¢n] }
            { 1100160;TextBox   ;2850 ;423  ;15150;846  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100161;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(ShowData = TRUE);
                         END;

            OnPostSection=BEGIN
                            ShowData := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100162;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Step 14"."To-Gen. Prod. Posting Group" }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowDetailsHeader = TRUE) AND (ShowDetails = TRUE));
                         END;

            OnPostSection=BEGIN
                            ShowDetailsHeader := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100163;Label     ;4050 ;0    ;1500 ;423  ;ParentControl=1100165;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100164;Label     ;5700 ;0    ;4500 ;423  ;ParentControl=1100166;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowDetailsData = TRUE) AND (ShowDetails = TRUE));
                         END;

            OnPostSection=BEGIN
                            ShowDetailsData := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100165;TextBox   ;4050 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100166;TextBox   ;5700 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10742;
        DataItemTableView=SORTING(From-Gen. Prod. Posting Group);
        DataItemVarName=Step 15;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 15:
                        //   It'll be checked whether the Gen. Prod. Group stated as "To-Gen Prod. Posting
                        //   Group" is already in use for Resources.
                        // Result:
                        //   Confirmation needed, when the "To-Gen. Prod. Posting Group" is already in use
                        //   for resources within the filter setting.
                        // ----------------------------------------------------------------------------------
                        Step := 15;
                        TestPassed := TRUE;
                        Messagetext := '';
                        Occurrences := 0;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND (PerformUpdateResources = PerformUpdateResources::No) THEN
                          CurrReport.BREAK;
                        IF (SuppressConfirmations = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100050);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           Resource@1100000 : Record 156;
                         BEGIN
                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                           Messagetext := STRSUBSTNO(Text1100085,
                                                     FIELDCAPTION("To-Gen. Prod. Posting Group"),
                                                     Resource.TABLECAPTION);
                         END;

        OnPostDataItem=VAR
                         Resource@1100000 : Record 156;
                       BEGIN
                         IF TestPassed = FALSE THEN BEGIN
                           ConfirmationCounter := ConfirmationCounter + 1;
                           IF (SetupExists = FALSE) OR (PerformUpdateResources <> PerformUpdateResources::No) THEN
                             IF PerformConversion = TRUE THEN
                               IF ConfirmationRejectedCounter > 0 THEN
                                 IF NOT CONFIRM(Text1100088 + '\' + Text1100086,
                                                TRUE,
                                                Resource.TABLECAPTION) THEN
                                   ConfirmationRejectedCounter := ConfirmationRejectedCounter + 1;
                         END;
                       END;

      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table156;
        DataItemTableView=SORTING(No.);
        DataItemVarName=Step 15-1;
        OnPreDataItem=BEGIN
                        IF FilterOnResources <> '' THEN
                          COPYFILTERS(GetResourceFilters);
                        SETRANGE("Gen. Prod. Posting Group","Step 15"."To-Gen. Prod. Posting Group");
                      END;

        OnAfterGetRecord=BEGIN
                           TestPassed := FALSE;
                           ShowDetailsData := TRUE;
                           Occurrences := Occurrences + 1;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=1692;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(ShowHeader = TRUE);
                         END;

            OnPostSection=BEGIN
                            ShowHeader := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100167;TextBox   ;2850 ;423  ;15150;846  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100168;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100171;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100169;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Confirmation Needed;
                                                                    ESP=Se requiere confirmaci¢n] }
            { 1100170;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(ShowData = TRUE);
                         END;

            OnPostSection=BEGIN
                            ShowData := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100171;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Step 15"."To-Gen. Prod. Posting Group" }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowDetailsHeader = TRUE) AND (ShowDetails = TRUE));
                         END;

            OnPostSection=BEGIN
                            ShowDetailsHeader := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100172;Label     ;4050 ;0    ;1500 ;423  ;ParentControl=1100174;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100173;Label     ;5700 ;0    ;4500 ;423  ;ParentControl=1100175;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT((ShowDetailsData = TRUE) AND (ShowDetails = TRUE));
                         END;

            OnPostSection=BEGIN
                            ShowDetailsData := FALSE;
                          END;

          }
          CONTROLS
          {
            { 1100174;TextBox   ;4050 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100175;TextBox   ;5700 ;0    ;4500 ;423  ;SourceExpr=Name }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table36;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Status=FILTER(<>Open),
                                Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 16;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 16:
                        //   If Sales Lines have to be modified or added, it'll be checked whether the
                        //   Status of the Sales Header is set to 'Open or not.
                        // Result:
                        //   Confirmation needed, when "Ignore Status on Sales Header" on the Report's
                        //   Request Form is set to 'No'
                        // ----------------------------------------------------------------------------------
                        Step := 16;
                        TestPassed := TRUE;
                        Messagetext := Text1100099 + ' ' + Text1100101;
                        Occurrences := 0;

                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::No) THEN
                          CurrReport.BREAK;
                        IF (SuppressConfirmations = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;
                        IF IgnoreStatusOnSalesHeader = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100051);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           SalesHeader2@1100000 : Record 36;
                         BEGIN
                           SalesHeader2.GET("Document Type","No.");
                           IF CanConvertSalesDocument(SalesHeader2,1) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN BEGIN
                           ConfirmationCounter := ConfirmationCounter + 1;
                           IF (SetupExists = FALSE) OR (PerformUpdateSalesDocs <> PerformUpdateSalesDocs::No) THEN
                             IF PerformConversion = TRUE THEN
                               IF ConfirmationRejectedCounter > 0 THEN
                                 IF NOT CONFIRM(Text1100089 + '\' + Text1100091,
                                                TRUE) THEN
                                   ConfirmationRejectedCounter := ConfirmationRejectedCounter + 1;
                         END;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100176;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Warning;
                                                                    ESP=Advertencia] }
            { 1100177;TextBox   ;2850 ;423  ;15150;846  ;FontBold=No;
                                                         MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100178;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100179;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100183;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100180;Label     ;4500 ;1269 ;1500 ;423  ;ParentControl=1100184;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100181;Label     ;6150 ;1269 ;1500 ;423  ;ParentControl=1100185;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100182;Label     ;7800 ;1269 ;4500 ;423  ;ParentControl=1100186;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100183;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100184;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100185;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Sell-to Customer No." }
            { 1100186;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Sell-to Customer Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table36;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 17;
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 17:
                        //   If Sales Lines have to be modified and new lines have to be added, it'll be
                        //   checked, whether there's space for a new line directly underneath the existing
                        //   line or not.
                        // Result:
                        //   Error, when there's no space for a new line directly underneath the existing
                        //   line
                        // ----------------------------------------------------------------------------------
                        Step := 17;
                        TestPassed := TRUE;
                        Messagetext := Text1100068 + ' ' + Text1100070;
                        Occurrences := 0;
                        found := FALSE;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::No) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100052);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           SalesHeader2@1100000 : Record 36;
                         BEGIN
                           IF IgnoreStatusOnSalesHeader = FALSE THEN
                             IF Status <> Status::Open THEN
                               CurrReport.SKIP;

                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;

                           SalesHeader2.GET("Document Type","No.");
                           IF CanConvertSalesDocument(SalesHeader2,2) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100187;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100188;TextBox   ;2850 ;423  ;15150;846  ;FontBold=No;
                                                         MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100189;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100190;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100194;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100191;Label     ;4500 ;1269 ;1500 ;423  ;ParentControl=1100195;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100192;Label     ;6150 ;1269 ;1500 ;423  ;ParentControl=1100196;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100193;Label     ;7800 ;1269 ;4500 ;423  ;ParentControl=1100197;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100194;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100195;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100196;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Sell-to Customer No." }
            { 1100197;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Sell-to Customer Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table37;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.);
        DataItemVarName=Step 17-1;
        OnAfterGetRecord=VAR
                           VATProdPostingGroupConv@1100000 : Record 10741;
                           GenProdPostingGroupConv@1100001 : Record 10742;
                           SalesLine@1100002 : Record 37;
                           NextLineNo@1100003 : Integer;
                         BEGIN
                           SalesLine.GET("Document Type","Document No.","Line No.");
                           found := FALSE;
                           IF ("Outstanding Quantity" > 0) AND ("Quantity Shipped" > 0) THEN BEGIN
                             IF UpdateVATProdPostingGroup = TRUE THEN
                               IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                                 IF GetNextSalesLineNo(SalesLine,NextLineNo) = FALSE THEN
                                   found := TRUE;
                             IF found = FALSE THEN
                               IF UpdateGenProdPostingGroup = TRUE THEN
                                 IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                                   IF GetNextSalesLineNo(SalesLine,NextLineNo) = FALSE THEN
                                     found := TRUE;
                           END;
                         END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100198;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100202;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100199;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100203;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100200;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100204;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100201;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100205;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100202;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100203;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100204;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100205;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table36;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 18;
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 18:
                        //   If Sales Lines have to be modified and new lines have to be added, it'll be
                        //   checked, whether the Sales Line is used in Warehouse.
                        // Result:
                        //   Confirmation needed, when at least one Sales Line is used in Warehouse
                        // ----------------------------------------------------------------------------------
                        Step := 18;
                        TestPassed := TRUE;
                        Occurrences := 0;
                        Messagetext := Text1100071 + ' ' + Text1100073;
                        found := FALSE;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::No) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100053);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           SalesHeader2@1100000 : Record 36;
                         BEGIN
                           IF IgnoreStatusOnSalesHeader = FALSE THEN
                             IF Status <> Status::Open THEN
                               CurrReport.SKIP;

                           SalesHeader2.GET("Document Type","No.");
                           IF CanConvertSalesDocument(SalesHeader2,3) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN BEGIN
                           ConfirmationCounter := ConfirmationCounter + 1;
                           IF (SetupExists = FALSE) OR (PerformUpdatePurchDocs <> PerformUpdatePurchDocs::No) THEN
                             IF PerformConversion = TRUE THEN
                               IF ConfirmationRejectedCounter > 0 THEN
                                 IF NOT CONFIRM(Text1100090 + '\' + Text1100091,TRUE) THEN
                                   ConfirmationRejectedCounter := ConfirmationRejectedCounter + 1;
                         END;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100206;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Confirmation needed;
                                                                    ESP=Se requiere confirmaci¢n] }
            { 1100207;TextBox   ;2850 ;423  ;15150;846  ;FontBold=No;
                                                         MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100208;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100209;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100213;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100210;Label     ;4500 ;1269 ;1500 ;423  ;ParentControl=1100214;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100211;Label     ;6150 ;1269 ;1500 ;423  ;ParentControl=1100215;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100212;Label     ;7800 ;1269 ;4500 ;423  ;ParentControl=1100216;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100213;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100214;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100215;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Sell-to Customer No." }
            { 1100216;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Sell-to Customer Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table37;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.);
        DataItemVarName=Step 18-1;
        OnAfterGetRecord=VAR
                           VATProdPostingGroupConv@1100000 : Record 10741;
                           GenProdPostingGroupConv@1100001 : Record 10742;
                           SalesLine@1100002 : Record 37;
                         BEGIN
                           SalesLine.GET("Document Type","Document No.","Line No.");
                           found := FALSE;
                           IF "Outstanding Quantity" > 0 THEN BEGIN
                             IF UpdateVATProdPostingGroup = TRUE THEN
                               IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                                 IF SalesLineInWarehouse(SalesLine) = TRUE THEN
                                   found := TRUE;
                             IF found = FALSE THEN
                               IF UpdateGenProdPostingGroup = TRUE THEN
                                 IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                                   IF SalesLineInWarehouse(SalesLine) = TRUE THEN
                                     found := TRUE;
                           END;
                         END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100217;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100221;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100218;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100222;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100219;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100223;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100220;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100224;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100221;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100222;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100223;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100224;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table36;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 19;
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 19:
                        //   If Sales Lines have to be modified and Gen. Prod. Posting Group has to be
                        //   changed, it'll be checked whether field 4 "Auto Insert Default" of table 251
                        //   "Gen. Product Posting Group" is set to 'yes'. If this is the case, it'll then
                        //   be checked whether table 325 "VAT Posting Setup" contains a combination of new
                        //   VAT Prod. Posting Group (stated in field 3 "Def. VAT Prod. Posting Group" of
                        //   table 251 "Gen. Product Posting Group") and VAT Bus. Posting Group.
                        // Result:
                        //   Error, when there's no combination of new VAT Prod. Posting Group and VAT Bus.
                        //   Posting Group.
                        // ----------------------------------------------------------------------------------
                        Step := 19;
                        TestPassed := TRUE;
                        Messagetext := Text1100074 + ' ' + Text1100076 + ' ' + Text1100077;
                        Occurrences := 0;
                        found := FALSE;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           ((PerformUpdateSalesDocs = PerformUpdateSalesDocs::No) OR
                            (UpdateGenProdPostingGroup = UpdateGenProdPostingGroup::No)) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100054);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           SalesHeader2@1100000 : Record 36;
                         BEGIN
                           IF IgnoreStatusOnSalesHeader = FALSE THEN
                             IF Status <> Status::Open THEN
                               CurrReport.SKIP;

                           SalesHeader2.GET("Document Type","No.");
                           IF CanConvertSalesDocument(SalesHeader2,4) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;


                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=2115;
          }
          CONTROLS
          {
            { 1100225;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100226;TextBox   ;2850 ;423  ;15150;1269 ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100227;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100228;Label     ;2850 ;1692 ;1500 ;423  ;ParentControl=1100232;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100229;Label     ;4500 ;1692 ;1500 ;423  ;ParentControl=1100233;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100230;Label     ;6150 ;1692 ;1500 ;423  ;ParentControl=1100234;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100231;Label     ;7800 ;1692 ;4500 ;423  ;ParentControl=1100235;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100232;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100233;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100234;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Sell-to Customer No." }
            { 1100235;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Sell-to Customer Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table37;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.);
        DataItemVarName=Step 19-1;
        OnAfterGetRecord=VAR
                           GenProdPostingGroupConv@1100000 : Record 10742;
                           GenProdPostingGroup@1100001 : Record 251;
                           VATPostingSetup@1100002 : Record 325;
                         BEGIN
                           found := FALSE;
                           IF "Outstanding Quantity" > 0 THEN
                             IF UpdateGenProdPostingGroup = TRUE THEN
                               IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                                 IF GenProdPostingGroup.GET(GenProdPostingGroupConv."To-Gen. Prod. Posting Group") THEN
                                   IF GenProdPostingGroup."Auto Insert Default" = TRUE THEN
                                     IF VATPostingSetup.GET("VAT Bus. Posting Group",
                                                            GenProdPostingGroup."Def. VAT Prod. Posting Group") = FALSE THEN
                                       found := TRUE;
                         END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100236;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100240;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100237;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100241;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100238;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100242;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100239;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100243;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100240;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100241;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100242;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100243;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table36;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 20;
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 20:
                        //   If Sales Lines have to be modified and VAT Prod. Posting Group has to be
                        //   changed, it'll be checked whether table 325 "VAT Posting Setup" contains the
                        //   combination of new VAT Prod. Posting Group and VAT Bus. Posting Group.
                        // Result:
                        //   Error, when there's no combination of new VAT Prod. Posting Group and VAT Bus.
                        //   Posting Group.
                        // ----------------------------------------------------------------------------------
                        Step := 20;
                        TestPassed := TRUE;
                        Messagetext := Text1100078 + ' ' + Text1100080;
                        Occurrences := 0;
                        found := FALSE;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           ((PerformUpdateSalesDocs = PerformUpdateSalesDocs::No) OR
                            (UpdateVATProdPostingGroup = UpdateVATProdPostingGroup::No)) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100055);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           SalesHeader2@1100000 : Record 36;
                         BEGIN
                           IF IgnoreStatusOnSalesHeader = FALSE THEN
                             IF Status <> Status::Open THEN
                               CurrReport.SKIP;

                           SalesHeader2.GET("Document Type","No.");
                           IF CanConvertSalesDocument(SalesHeader2,5) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;


                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=2115;
          }
          CONTROLS
          {
            { 1100244;TextBox   ;2850 ;423  ;15150;1269 ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100245;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100246;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100247;Label     ;2850 ;1692 ;1500 ;423  ;ParentControl=1100251;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100248;Label     ;4500 ;1692 ;1500 ;423  ;ParentControl=1100252;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100249;Label     ;6150 ;1692 ;1500 ;423  ;ParentControl=1100253;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100250;Label     ;7800 ;1692 ;4500 ;423  ;ParentControl=1100254;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100251;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100252;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100253;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Sell-to Customer No." }
            { 1100254;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Sell-to Customer Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table37;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.);
        DataItemVarName=Step 20-1;
        OnAfterGetRecord=VAR
                           VATProdPostingGroupConv@1100000 : Record 10741;
                           VATPostingSetup@1100001 : Record 325;
                         BEGIN
                           found := FALSE;
                           IF "Outstanding Quantity" > 0 THEN
                             IF UpdateVATProdPostingGroup = TRUE THEN
                               IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                                 IF VATPostingSetup.GET("VAT Bus. Posting Group",
                                                        VATProdPostingGroupConv."To-VAT Prod. Posting Group") = FALSE THEN
                                   found := TRUE;
                         END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100255;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100259;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100256;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100260;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100257;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100261;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100258;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100262;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100259;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100260;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100261;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100262;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table36;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 21;
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 21:
                        //   If Sales Documents have to be modified, it'll be checked whether there are
                        //   Sales Lines which are associated to a Purchase Document due to a drop shipment
                        //   or a special order.
                        // Result:
                        //   Confirmation need, when there are Sales Lines with drop shipment since Sales
                        //   Documents with drop shipment must be treated manually.
                        // ----------------------------------------------------------------------------------
                        Step := 21;
                        TestPassed := TRUE;
                        Messagetext := Text1100094 + ' ' + Text1100096;
                        Occurrences := 0;
                        found := FALSE;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::No) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100056);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           SalesHeader@1100000 : Record 36;
                         BEGIN
                           IF IgnoreStatusOnSalesHeader = FALSE THEN
                             IF Status <> Status::Open THEN
                               CurrReport.SKIP;


                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;



                           SalesHeader.GET("Document Type","No.");
                           IF CanConvertSalesDocument(SalesHeader,6) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN BEGIN
                           ConfirmationCounter := ConfirmationCounter + 1;
                           IF (SetupExists = FALSE) OR (PerformUpdateSalesDocs <> PerformUpdateSalesDocs::No) THEN
                             IF PerformConversion = TRUE THEN
                               IF ConfirmationRejectedCounter > 0 THEN
                                 IF NOT CONFIRM(Text1100090 + '\' + Text1100091,
                                                TRUE) THEN
                                   ConfirmationRejectedCounter := ConfirmationRejectedCounter + 1;
                         END;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100263;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Confirmation Needed;
                                                                    ESP=Se requiere confirmaci¢n] }
            { 1100264;TextBox   ;2850 ;423  ;15150;846  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100265;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100266;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100270;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100267;Label     ;4500 ;1269 ;1500 ;423  ;ParentControl=1100271;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100268;Label     ;6150 ;1269 ;1500 ;423  ;ParentControl=1100272;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100269;Label     ;7800 ;1269 ;4500 ;423  ;ParentControl=1100273;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100270;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100271;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100272;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Sell-to Customer No." }
            { 1100273;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Sell-to Customer Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table37;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.);
        DataItemVarName=Step 21-1;
        OnAfterGetRecord=VAR
                           VATProdPostingGroupConv@1100000 : Record 10741;
                           GenProdPostingGroupConv@1100001 : Record 10742;
                         BEGIN
                           found := FALSE;
                           IF "Outstanding Quantity" > 0 THEN BEGIN
                             IF UpdateVATProdPostingGroup = TRUE THEN
                               IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                                 IF (("Drop Shipment"  = TRUE) AND ("Purchase Order No." <> '')) OR
                                    (("Special Order" = TRUE) AND ("Special Order Purchase No." <> '')) THEN
                                   found := TRUE;
                             IF found = FALSE THEN
                               IF UpdateGenProdPostingGroup = TRUE THEN
                                 IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                                   IF (("Drop Shipment"  = TRUE) AND ("Purchase Order No." <> '')) OR
                                      (("Special Order" = TRUE) AND ("Special Order Purchase No." <> '')) THEN
                                     found := TRUE;
                           END;
                         END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100274;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100278;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100275;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100279;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100276;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100280;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100277;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100281;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100278;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100279;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100280;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100281;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table38;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Status=FILTER(<>Open),
                                Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 22;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 22:
                        //   If Purchase Lines have to be modified or added, it'll be checked whether the
                        //   Status of the Purchase Header is set to 'Open' or not.
                        // Result:
                        //   Confirmation needed, when "Ignore Status on Purchase Header" on the Report's
                        //   Request Form is set to 'No'
                        // ----------------------------------------------------------------------------------
                        Step := 22;
                        TestPassed := TRUE;
                        Messagetext := Text1100100 + ' ' + Text1100101;
                        Occurrences := 0;

                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::No) THEN
                          CurrReport.BREAK;
                        IF (SuppressWarnings = TRUE) OR (SkipCheck[Step] = TRUE) THEN
                          CurrReport.BREAK;
                        IF IgnoreStatusOnPurchHeader = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100057);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           PurchaseHeader2@1100000 : Record 38;
                         BEGIN
                           PurchaseHeader2.GET("Document Type","No.");
                           IF CanConvertPurchaseDocument(PurchaseHeader2,1) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN BEGIN
                           ConfirmationCounter := ConfirmationCounter + 1;
                           IF (SetupExists = FALSE) OR (PerformUpdatePurchDocs <> PerformUpdatePurchDocs::No) THEN
                             IF PerformConversion = TRUE THEN
                               IF ConfirmationRejectedCounter > 0 THEN
                                 IF NOT CONFIRM(Text1100090 + '\' + Text1100091,
                                                TRUE) THEN
                                   ConfirmationRejectedCounter := ConfirmationRejectedCounter + 1;
                         END;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100282;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Warning;
                                                                    ESP=Advertencia] }
            { 1100283;TextBox   ;2850 ;423  ;15150;846  ;FontBold=No;
                                                         MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100284;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100285;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100289;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100286;Label     ;4500 ;1269 ;1500 ;423  ;ParentControl=1100290;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100287;Label     ;6150 ;1269 ;1500 ;423  ;ParentControl=1100291;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100288;Label     ;7800 ;1269 ;4500 ;423  ;ParentControl=1100292;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100289;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100290;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100291;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Buy-from Vendor No." }
            { 1100292;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Buy-from Vendor Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table38;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 23;
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 23:
                        //   If Purchase Lines have to be modified and new lines have to be added, it'll be
                        //   checked, whether there's space for a new line directly underneath the existing
                        //   line or not.
                        // Result:
                        //   Error, when there's no space for a new line directly underneath the existing
                        //   line
                        // ----------------------------------------------------------------------------------
                        Step := 23;
                        TestPassed := TRUE;
                        Messagetext := Text1100069 + ' ' + Text1100070;
                        Occurrences := 0;
                        found := FALSE;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           ((PerformUpdatePurchDocs = PerformUpdatePurchDocs::No)) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100058);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           PurchaseHeader2@1100000 : Record 38;
                         BEGIN
                           IF IgnoreStatusOnPurchHeader = FALSE THEN
                             IF Status <> Status::Open THEN
                               CurrReport.SKIP;

                           PurchaseHeader2.GET("Document Type","No.");
                           IF CanConvertPurchaseDocument(PurchaseHeader2,2) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;

                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100293;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100294;TextBox   ;2850 ;423  ;15150;846  ;FontBold=No;
                                                         MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100295;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100296;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100300;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100297;Label     ;4500 ;1269 ;1500 ;423  ;ParentControl=1100301;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100298;Label     ;6150 ;1269 ;1500 ;423  ;ParentControl=1100302;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100299;Label     ;7800 ;1269 ;4500 ;423  ;ParentControl=1100303;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100300;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100301;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100302;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Buy-from Vendor No." }
            { 1100303;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Buy-from Vendor Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table39;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.);
        DataItemVarName=Step 23-1;
        OnAfterGetRecord=VAR
                           PurchaseLine@1100000 : Record 39;
                           VATProdPostingGroupConv@1100001 : Record 10741;
                           GenProdPostingGroupConv@1100002 : Record 10742;
                           NextLineNo@1100003 : Integer;
                         BEGIN
                           PurchaseLine.GET("Document Type","Document No.","Line No.");
                           found := FALSE;
                           IF ("Outstanding Quantity" > 0) AND ("Quantity Received" > 0) THEN BEGIN
                             IF UpdateVATProdPostingGroup = TRUE THEN
                               IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                                 IF GetNextPurchaseLineNo(PurchaseLine,NextLineNo) = FALSE THEN
                                   found := TRUE;
                             IF found = FALSE THEN
                               IF UpdateGenProdPostingGroup = TRUE THEN
                                 IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                                   IF GetNextPurchaseLineNo(PurchaseLine,NextLineNo) = FALSE THEN
                                     found := TRUE;
                           END;
                         END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100304;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100308;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100305;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100309;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100306;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100310;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100307;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100311;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100308;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100309;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100310;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100311;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table38;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 24;
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 24:
                        //   If Purchase Lines have to be modified and new lines have to be added, it'll be
                        //   checked, whether the Purchase Line is used in Warehouse.
                        // Result:
                        //   Confirmation needed, when at least one Purchase Line is used in Warehouse
                        // ----------------------------------------------------------------------------------
                        Step := 24;
                        TestPassed := TRUE;
                        Occurrences := 0;
                        Messagetext := Text1100072 + ' ' + Text1100073;
                        found := FALSE;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::No) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100059);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           PurchaseHeader2@1100000 : Record 38;
                         BEGIN
                           IF IgnoreStatusOnPurchHeader = FALSE THEN
                             IF Status <> Status::Open THEN
                               CurrReport.SKIP;

                           PurchaseHeader2.GET("Document Type","No.");
                           IF CanConvertPurchaseDocument(PurchaseHeader2,3) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN BEGIN
                           ConfirmationCounter := ConfirmationCounter + 1;
                           IF (SetupExists = FALSE) OR (PerformUpdatePurchDocs <> PerformUpdatePurchDocs::No) THEN
                             IF PerformConversion = TRUE THEN
                               IF ConfirmationRejectedCounter > 0 THEN
                                 IF NOT CONFIRM(Text1100090 + '\' + Text1100091,TRUE) THEN
                                   ConfirmationRejectedCounter := ConfirmationRejectedCounter + 1;
                         END;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100312;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Confirmation needed;
                                                                    ESP=Se requiere confirmaci¢n] }
            { 1100313;TextBox   ;2850 ;423  ;15150;846  ;FontBold=No;
                                                         MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100314;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100315;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100319;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100316;Label     ;4500 ;1269 ;1500 ;423  ;ParentControl=1100320;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100317;Label     ;6150 ;1269 ;1500 ;423  ;ParentControl=1100321;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100318;Label     ;7800 ;1269 ;4500 ;423  ;ParentControl=1100322;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100319;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100320;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100321;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Buy-from Vendor No." }
            { 1100322;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Buy-from Vendor Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table39;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.);
        DataItemVarName=Step 24-1;
        OnAfterGetRecord=VAR
                           PurchaseLine@1100000 : Record 39;
                           VATProdPostingGroupConv@1100001 : Record 10741;
                           GenProdPostingGroupConv@1100002 : Record 10742;
                         BEGIN
                           PurchaseLine.GET("Document Type","Document No.","Line No.");
                           found := FALSE;
                           IF "Outstanding Quantity" > 0 THEN BEGIN
                             IF UpdateVATProdPostingGroup = TRUE THEN
                               IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                                 IF PurchaseLineInWarehouse(PurchaseLine) = TRUE THEN
                                 found := TRUE;
                             IF found = FALSE THEN
                               IF UpdateGenProdPostingGroup = TRUE THEN
                                 IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                                   IF PurchaseLineInWarehouse(PurchaseLine) = TRUE THEN
                                     found := TRUE;
                           END;
                         END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100323;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100327;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100324;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100328;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100325;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100329;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100326;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100330;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100327;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100328;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100329;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100330;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table38;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 25;
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 25:
                        //   If Purchase Lines have to be modified and Gen. Prod. Posting Group has to be
                        //   changed, it'll be checked whether field 4 "Auto Insert Default" of table 251
                        //   "Gen. Product Posting Group" is set to 'yes'. If this is the case, it'll then
                        //   be checked whether table 325 "VAT Posting Setup" contains a combination of new
                        //   VAT Prod. Posting Group (stated in field 3 "Def. VAT Prod. Posting Group" of
                        //   table 251 "Gen. Product Posting Group") and VAT Bus. Posting Group.
                        // Result:
                        //   Error, when there's no combination of new VAT Prod. Posting Group and VAT Bus.
                        //   Posting Group.
                        // ----------------------------------------------------------------------------------
                        Step := 25;
                        TestPassed := TRUE;
                        Messagetext := Text1100075 + ' ' + Text1100076+ ' ' + Text1100077;
                        Occurrences := 0;
                        found := FALSE;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           ((PerformUpdatePurchDocs = PerformUpdatePurchDocs::No) OR
                            (UpdateGenProdPostingGroup = UpdateGenProdPostingGroup::No)) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100060);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           PurchaseHeader2@1100000 : Record 38;
                         BEGIN
                           IF IgnoreStatusOnPurchHeader = FALSE THEN
                             IF Status <> Status::Open THEN
                               CurrReport.SKIP;

                           PurchaseHeader2.GET("Document Type","No.");
                           IF CanConvertPurchaseDocument(PurchaseHeader2,4) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;


                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=2115;
            KeepWithNext=Yes;
          }
          CONTROLS
          {
            { 1100331;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100332;TextBox   ;2850 ;423  ;15150;1269 ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100333;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100334;Label     ;2850 ;1692 ;1500 ;423  ;ParentControl=1100338;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100335;Label     ;4500 ;1692 ;1500 ;423  ;ParentControl=1100339;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100336;Label     ;6150 ;1692 ;1500 ;423  ;ParentControl=1100340;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100337;Label     ;7800 ;1692 ;4500 ;423  ;ParentControl=1100341;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100338;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100339;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100340;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Buy-from Vendor No." }
            { 1100341;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Buy-from Vendor Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table39;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.);
        DataItemVarName=Step 25-1;
        OnAfterGetRecord=VAR
                           GenProdPostingGroupConv@1100000 : Record 10742;
                           GenProdPostingGroup@1100001 : Record 251;
                           VATPostingSetup@1100002 : Record 325;
                         BEGIN
                           found := FALSE;
                           IF "Outstanding Quantity" > 0 THEN
                             IF UpdateGenProdPostingGroup = TRUE THEN
                               IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                                 IF GenProdPostingGroup.GET(GenProdPostingGroupConv."To-Gen. Prod. Posting Group") THEN
                                   IF GenProdPostingGroup."Auto Insert Default" = TRUE THEN
                                     IF VATPostingSetup.GET("VAT Bus. Posting Group",
                                                            GenProdPostingGroup."Def. VAT Prod. Posting Group") = FALSE THEN
                                     found := TRUE;
                         END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
            KeepWithNext=Yes;
          }
          CONTROLS
          {
            { 1100342;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100346;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100343;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100347;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100344;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100348;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100345;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100349;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100346;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100347;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100348;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100349;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table38;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 26;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 26:
                        //   If Purchase Lines have to be modified and VAT Prod. Posting Group has to be
                        //   changed, it'll be checked whether table 325 "VAT Posting Setup" contains the
                        //   combination of new VAT Prod. Posting Group and VAT Bus. Posting Group.
                        // Result:
                        //   Error, when there's no combination of new VAT Prod. Posting Group and VAT Bus.
                        //   Posting Group.
                        // ----------------------------------------------------------------------------------
                        Step := 26;
                        TestPassed := TRUE;
                        Messagetext := Text1100079 + ' ' + Text1100080;
                        Occurrences := 0;
                        found := FALSE;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           ((PerformUpdatePurchDocs = PerformUpdatePurchDocs::No) OR
                            (UpdateVATProdPostingGroup = UpdateVATProdPostingGroup::No)) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100061);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           PurchaseHeader2@1100000 : Record 38;
                         BEGIN
                           IF IgnoreStatusOnPurchHeader = FALSE THEN
                             IF Status <> Status::Open THEN
                               CurrReport.SKIP;

                           PurchaseHeader2.GET("Document Type","No.");
                           IF CanConvertPurchaseDocument(PurchaseHeader2,5) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;


                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=2115;
          }
          CONTROLS
          {
            { 1100350;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100351;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100352;TextBox   ;2850 ;423  ;15150;1269 ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100353;Label     ;2850 ;1692 ;1500 ;423  ;ParentControl=1100357;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100354;Label     ;4500 ;1692 ;1500 ;423  ;ParentControl=1100358;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100355;Label     ;6150 ;1692 ;1500 ;423  ;ParentControl=1100359;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100356;Label     ;7800 ;1692 ;4500 ;423  ;ParentControl=1100360;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100357;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100358;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100359;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Buy-from Vendor No." }
            { 1100360;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Buy-from Vendor Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table39;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.);
        DataItemVarName=Step 26-1;
        OnAfterGetRecord=VAR
                           VATProdPostingGroupConv@1100000 : Record 10741;
                           VATPostingSetup@1100001 : Record 325;
                         BEGIN
                           found := FALSE;
                           IF "Outstanding Quantity" > 0 THEN
                             IF UpdateVATProdPostingGroup = TRUE THEN
                               IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                                 IF VATPostingSetup.GET("VAT Bus. Posting Group",
                                                        VATProdPostingGroupConv."To-VAT Prod. Posting Group") = FALSE THEN
                                   found := TRUE;
                         END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100361;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100365;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100362;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100366;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100363;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100367;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100364;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100368;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100365;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100366;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100367;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100368;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table38;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=FILTER(<>Credit Memo));
        DataItemVarName=Step 27;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 27:
                        //   If Purchase Documents have to be modified, it'll be checked whether there are
                        //   Purchase Lines which are associated to a Sales Document due to a drop shipment
                        //   or a special order.
                        // Result:
                        //   Confirmation need, when there are Purchase Lines with drop shipment since
                        //   Purchase Documents with drop shipment must be treated manually.
                        // ----------------------------------------------------------------------------------
                        Step := 27;
                        TestPassed := TRUE;
                        Messagetext := Text1100095 + ' ' + Text1100096;
                        Occurrences := 0;
                        found := FALSE;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::No) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        UpdateVATProdPostingGroup := FALSE;
                        UpdateGenProdPostingGroup := FALSE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"VAT Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateVATProdPostingGroup := TRUE;
                        IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"Gen. Prod. Posting Group") OR
                           (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                          UpdateGenProdPostingGroup := TRUE;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100062);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           PurchaseHeader2@1100000 : Record 38;
                         BEGIN
                           IF IgnoreStatusOnPurchHeader = FALSE THEN
                             IF Status <> Status::Open THEN
                               CurrReport.SKIP;

                           PurchaseHeader2.GET("Document Type","No.");
                           IF CanConvertPurchaseDocument(PurchaseHeader2,6) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;


                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100369;Label     ;0    ;423  ;2700 ;423  ;FontBold=Yes;
                                                         CaptionML=[ENU=Confirmation Needed;
                                                                    ESP=Se requiere confirmaci¢n] }
            { 1100370;TextBox   ;2850 ;423  ;15150;846  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100371;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100372;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100376;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100373;Label     ;4500 ;1269 ;1500 ;423  ;ParentControl=1100377;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100374;Label     ;6150 ;1269 ;1500 ;423  ;ParentControl=1100378;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100375;Label     ;7800 ;1269 ;4500 ;423  ;ParentControl=1100379;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100376;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="Document Type" }
            { 1100377;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100378;TextBox   ;6150 ;0    ;1500 ;423  ;SourceExpr="Buy-from Vendor No." }
            { 1100379;TextBox   ;7800 ;0    ;4500 ;423  ;SourceExpr="Buy-from Vendor Name" }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table39;
        DataItemTableView=SORTING(Document Type,Document No.,Line No.);
        DataItemVarName=Step 27-1;
        OnAfterGetRecord=VAR
                           VATProdPostingGroupConv@1100000 : Record 10741;
                           GenProdPostingGroupConv@1100001 : Record 10742;
                         BEGIN
                           found := FALSE;
                           IF "Outstanding Quantity" > 0 THEN BEGIN
                             IF UpdateVATProdPostingGroup = TRUE THEN
                               IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                                 IF (("Drop Shipment"  = TRUE) AND ("Sales Order No." <> '')) OR
                                    (("Special Order" = TRUE) AND ("Special Order Sales No." <> '')) THEN
                                   found := TRUE;
                             IF found = FALSE THEN
                               IF UpdateGenProdPostingGroup = TRUE THEN
                                 IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                                   IF (("Drop Shipment"  = TRUE) AND ("Sales Order No." <> '')) OR
                                      (("Special Order" = TRUE) AND ("Special Order Sales No." <> '')) THEN
                                     found := TRUE;
                           END;
                         END;

        DataItemLink=Document Type=FIELD(Document Type),
                     Document No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100380;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100384;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100381;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100385;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100382;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100386;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100383;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100387;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100384;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100385;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100386;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100387;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table295;
        DataItemTableView=SORTING(No.);
        DataItemVarName=Step 28;
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 28:
                        //   If G/L Accounts and Reminder Lines have to be modified and VAT Prod. Posting
                        //   Group has to be changed, it'll be checked whether table 325 "VAT Posting Setup"
                        //   contains the combination of new VAT Prod. Posting Group and VAT Bus. Posting
                        //   Group.
                        // Result:
                        //   Error, when there's no combination of new VAT Prod. Posting Group and VAT Bus.
                        //   Posting Group.
                        // ----------------------------------------------------------------------------------
                        Step := 28;
                        TestPassed := TRUE;
                        Messagetext := Text1100092 + ' ' + Text1100080;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           ((PerformUpdateReminders = PerformUpdateReminders::No) OR
                             (PerformUpdateGLAccounts = PerformUpdateGLAccounts::No)) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100063);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           ReminderHeader2@1100000 : Record 295;
                         BEGIN
                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;

                           ReminderHeader2.GET("No.");
                           IF CanConvertReminder(ReminderHeader2,1) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100388;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100389;TextBox   ;2850 ;423  ;15150;846  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100390;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100391;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100394;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100392;Label     ;4500 ;1269 ;1500 ;423  ;ParentControl=1100395;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100393;Label     ;6150 ;1269 ;4500 ;423  ;ParentControl=1100396;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100394;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100395;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="Customer No." }
            { 1100396;TextBox   ;6150 ;0    ;4500 ;423  ;SourceExpr=Name }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table296;
        DataItemTableView=SORTING(Reminder No.,Line No.)
                          WHERE(Type=FILTER(G/L Account),
                                No.=FILTER(<>''));
        DataItemVarName=Step 28-1;
        OnAfterGetRecord=VAR
                           ReminderHeader@1100000 : Record 295;
                           VATProdPostingGroupConv@1100001 : Record 10741;
                           VATPostingSetup@1100002 : Record 325;
                         BEGIN
                           found := FALSE;
                           IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN BEGIN
                             ReminderHeader.GET("Reminder No.");
                             IF VATPostingSetup.GET(ReminderHeader."VAT Bus. Posting Group",
                                                    VATProdPostingGroupConv."To-VAT Prod. Posting Group") = FALSE THEN
                               found := TRUE;
                           END;
                         END;

        DataItemLink=Reminder No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100397;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100401;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100398;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100402;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100399;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100403;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100400;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100404;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100401;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100402;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100403;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100404;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table302;
        DataItemTableView=SORTING(No.);
        DataItemVarName=Step 29;
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        // ----------------------------------------------------------------------------------
                        // Step 29:
                        //   If G/L Accounts and Finance Charge memo Lines have to be modified and VAT Prod.
                        //   Posting Group has to be changed, it'll be checked whether table 325 "VAT
                        //   Posting Setup" contains the combination of new VAT Prod. Posting Group and VAT
                        //   Bus. Posting Group.
                        // Result:
                        //   Error, when there's no combination of new VAT Prod. Posting Group and VAT Bus.
                        //   Posting Group.
                        // ----------------------------------------------------------------------------------
                        Step := 29;
                        TestPassed := TRUE;
                        Messagetext := Text1100093 + ' ' + Text1100080;
                        Occurrences := 0;
                        ShowHeader := TRUE;

                        IF (SetupExists = TRUE) AND
                           ((PerformUpdateFinChargeMemos = PerformUpdateFinChargeMemos::No) OR
                             (PerformUpdateGLAccounts = PerformUpdateGLAccounts::No) OR
                            (UpdateVATProdPostingGroup = UpdateVATProdPostingGroup::No)) THEN
                          CurrReport.BREAK;
                        IF SkipCheck[Step] = TRUE THEN
                          CurrReport.BREAK;

                        ProgressWindow.UPDATE(2,Step);
                        ProgressWindow.UPDATE(3,Text1100064);
                        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfCheckSteps);
                      END;

        OnAfterGetRecord=VAR
                           FinanceChargeMemoHeader2@1100000 : Record 302;
                         BEGIN
                           ShowData := TRUE;
                           ShowDetailsHeader := TRUE;

                           FinanceChargeMemoHeader2.GET("No.");
                           IF CanConvertFinChargeMemo(FinanceChargeMemoHeader2,1) = FALSE THEN
                             TestPassed := FALSE
                           ELSE
                             CurrReport.SKIP;
                         END;

        OnPostDataItem=BEGIN
                         IF TestPassed = FALSE THEN
                           ErrorCounter := ErrorCounter + 1;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=1692;
          }
          CONTROLS
          {
            { 1100405;Label     ;0    ;423  ;2700 ;423  ;CaptionML=[ENU=Error;
                                                                    ESP=Error] }
            { 1100406;TextBox   ;2850 ;423  ;15150;846  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
            { 1100407;TextBox   ;0    ;846  ;2700 ;423  ;SourceExpr=STRSUBSTNO('Step: %1',Step) }
            { 1100408;Label     ;2850 ;1269 ;1500 ;423  ;ParentControl=1100411;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100409;Label     ;4500 ;1269 ;1500 ;423  ;ParentControl=1100412;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100410;Label     ;6150 ;1269 ;4500 ;423  ;ParentControl=1100413;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100411;TextBox   ;2850 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100412;TextBox   ;4500 ;0    ;1500 ;423  ;SourceExpr="Customer No." }
            { 1100413;TextBox   ;6150 ;0    ;4500 ;423  ;SourceExpr=Name }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table303;
        DataItemTableView=SORTING(Finance Charge Memo No.,Line No.)
                          WHERE(Type=FILTER(G/L Account),
                                No.=FILTER(<>''));
        DataItemVarName=Step 29-1;
        OnAfterGetRecord=VAR
                           VATProdPostingGroupConv@1100000 : Record 10741;
                           VATPostingSetup@1100001 : Record 325;
                           FinanceChargeMemoHeader@1100002 : Record 302;
                         BEGIN
                           found := FALSE;
                           IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN BEGIN
                             FinanceChargeMemoHeader.GET("Finance Charge Memo No.");
                             IF VATPostingSetup.GET(FinanceChargeMemoHeader."VAT Bus. Posting Group",
                                                    VATProdPostingGroupConv."To-VAT Prod. Posting Group") = FALSE THEN
                               found := TRUE;
                           END;
                         END;

        DataItemLink=Finance Charge Memo No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18000;
            SectionHeight=423;
          }
          CONTROLS
          {
            { 1100414;Label     ;4050 ;0    ;1050 ;423  ;ParentControl=1100418;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100415;Label     ;5250 ;0    ;1500 ;423  ;ParentControl=1100419;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100416;Label     ;6900 ;0    ;1500 ;423  ;ParentControl=1100420;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1100417;Label     ;8550 ;0    ;4500 ;423  ;ParentControl=1100421;
                                                         VertAlign=Bottom;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=423;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(found = TRUE);
                         END;

          }
          CONTROLS
          {
            { 1100418;TextBox   ;4050 ;0    ;1050 ;423  ;SourceExpr="Line No." }
            { 1100419;TextBox   ;5250 ;0    ;1500 ;423  ;SourceExpr=Type }
            { 1100420;TextBox   ;6900 ;0    ;1500 ;423  ;SourceExpr="No." }
            { 1100421;TextBox   ;8550 ;0    ;4500 ;423  ;SourceExpr=Description }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        DataItemVarName=Footer;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=846;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(PerformConversion = FALSE);
                           Messagetext := Text1100134;
                         END;

          }
          CONTROLS
          {
            { 1100422;TextBox   ;0    ;423  ;15150;423  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18000;
            SectionHeight=846;
            OnPreSection=BEGIN
                           IF (PerformConversion = TRUE) AND ((ErrorCounter > 0) OR (ConfirmationRejectedCounter > 0)) THEN
                             CurrReport.SHOWOUTPUT(TRUE)
                           ELSE
                             CurrReport.SHOWOUTPUT(FALSE);
                           Messagetext := Text1100133;
                         END;

          }
          CONTROLS
          {
            { 1100423;TextBox   ;0    ;423  ;15150;423  ;MultiLine=Yes;
                                                         SourceExpr=Messagetext }
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=3850;
      Height=2860;
    }
    CONTROLS
    {
      { 1100000;CheckBox  ;3410 ;2420 ;440  ;440  ;InPage=-1;
                                                   ShowCaption=No;
                                                   SourceExpr=PerformConversion }
      { 1100001;Label     ;0    ;2420 ;3300 ;440  ;ParentControl=1100000;
                                                   CaptionML=[ENU=Perform Conversion;
                                                              ESP=Realizar conversi¢n] }
      { 1100002;CheckBox  ;3410 ;550  ;440  ;440  ;InPage=-1;
                                                   ShowCaption=No;
                                                   CaptionML=[ENU=Suppress Confirmations;
                                                              ESP=Suprimir confirmaciones];
                                                   SourceExpr=SuppressConfirmations }
      { 1100003;Label     ;0    ;550  ;3300 ;440  ;ParentControl=1100002 }
      { 1100004;CheckBox  ;3410 ;0    ;440  ;440  ;InPage=-1;
                                                   ShowCaption=No;
                                                   CaptionML=[ENU=Suppress Warnings;
                                                              ESP=Suprimir avisos];
                                                   SourceExpr=SuppressWarnings }
      { 1100005;Label     ;0    ;0    ;3300 ;440  ;ParentControl=1100004 }
      { 1100006;CheckBox  ;3410 ;1210 ;440  ;440  ;InPage=-1;
                                                   ShowCaption=No;
                                                   CaptionML=[ENU=Ignore Status on Sales Header;
                                                              ESP=Omitir estado en cab. venta];
                                                   SourceExpr=IgnoreStatusOnSalesHeader }
      { 1100007;Label     ;0    ;1210 ;3300 ;440  ;ParentControl=1100006 }
      { 1100008;CheckBox  ;3410 ;1760 ;440  ;440  ;InPage=-1;
                                                   ShowCaption=No;
                                                   CaptionML=[ENU=Ignore Status on Purchase Header;
                                                              ESP=Omitir estado en cab. compra];
                                                   SourceExpr=IgnoreStatusOnPurchHeader }
      { 1100009;Label     ;0    ;1760 ;3300 ;440  ;ParentControl=1100008 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      Text1100000@1100000 : TextConst 'ENU=The Conversion will not be performed;ESP=No se realizar  la conversi¢n';
      Text1100001@1100001 : TextConst 'ENU=The Conversion will be performed;ESP=Se realizar  la conversi¢n';
      Text1100002@1100002 : TextConst 'ENU=Updating Gen. Product Posting Groups:;ESP=Actualizando grupos contables productos:';
      Text1100003@1100003 : TextConst 'ENU=Updating G/L Accounts:;ESP=Actualizando cuentas:';
      Text1100004@1100004 : TextConst 'ENU=Updating Items:;ESP=Actualizando productos:';
      Text1100005@1100005 : TextConst 'ENU=Updating Item Categories:;ESP=Actualizando categor¡as productos:';
      Text1100006@1100006 : TextConst 'ENU=Updating Item Charges:;ESP=Actualizando cargos producto:';
      Text1100007@1100007 : TextConst 'ENU=Updating Resources:;ESP=Actualizando recursos:';
      Text1100008@1100008 : TextConst 'ENU=Updating Gen. Journal Lines:;ESP=Actualizando l¡neas diario general:';
      Text1100009@1100009 : TextConst 'ENU=Updating Gen. Journal Allocations:;ESP=Actualizando asignaci¢n diario general:';
      Text1100010@1100010 : TextConst 'ENU=Updating Standard General Journal Lines:;ESP=Actualizando l¡neas diario general est ndar:';
      Text1100011@1100011 : TextConst 'ENU=Updating Res. Journal Lines:;ESP=Actualizando l¡neas diario recurso:';
      Text1100012@1100012 : TextConst 'ENU=Updating Job Journal Lines:;ESP=Actualizando l¡neas diario proyecto:';
      Text1100013@1100013 : TextConst 'ENU=Updating Requisition Lines:;ESP=Actualizando l¡neas demanda:';
      Text1100014@1100014 : TextConst 'ENU=Updating Standard Item Journal Lines:;ESP=Actualizando l¡neas diario producto est ndar:';
      Text1100015@1100015 : TextConst 'ENU=Updating Service Invoice Lines:;ESP=Actualizando l¡neas factura servicio:';
      Text1100016@1100016 : TextConst 'ENU=Updating Serv. Price Adjustment Details:;ESP=Actualizando detalles ajuste precio servicio:';
      Text1100017@1100017 : TextConst 'ENU=Updating Sales Documents:;ESP=Actualizando documentos de ventas:';
      Text1100018@1100018 : TextConst 'ENU=Updating Purchase Documents:;ESP=Actualizando documentos compra:';
      Text1100019@1100019 : TextConst 'ENU=Updating Production Orders:;ESP=Actualizando ¢rdenes producci¢n:';
      Text1100020@1100020 : TextConst 'ENU=Updating Work Centers:;ESP=Actualizando centros trabajo:';
      Text1100021@1100021 : TextConst 'ENU=Updating Machine Centers:;ESP=Actualizando centros m quina:';
      Text1100022@1100022 : TextConst 'ENU=Updating Reminder Documents:;ESP=Actualizando documentos recordatorio:';
      Text1100023@1100023 : TextConst 'ENU=Updating Finance Charge Memo Documents:;ESP=Actualizando documentos inters:';
      Text1100024@1100024 : TextConst 'ENU=Updating BizTalk Partner Setup:;ESP=Actualizando configuraci¢n socio BizTalk:';
      Text1100025@1100025 : TextConst 'ENU=Filtersetting on %1:;ESP=Configuraci¢n filtro en %1:';
      Text1100026@1100026 : TextConst 'ENU=none;ESP=ninguno';
      Text1100027@1100027 : TextConst 'ENU=n/a;ESP=n/d';
      Text1100028@1100028 : TextConst 'ENU=Warnings will be suppressed;ESP=Se suprimir n los avisos';
      Text1100029@1100029 : TextConst 'ENU=Warnings will be shown;ESP=Se mostrar n los avisos';
      Text1100030@1100030 : TextConst 'ENU=Confirmations will be suppressed;ESP=Se suprimir n las confirmaciones';
      Text1100031@1100031 : TextConst 'ENU=Confirmations will be shown;ESP=Se mostrar n las confirmaciones';
      Text1100032@1100032 : TextConst 'ENU=The following VAT Product Posting Groups are specified to be converted:;ESP=Se especificaron los siguientes grupos registro IVA producto para su conversi¢n:';
      Text1100033@1100033 : TextConst 'ENU=The following Gen. Product Posting Groups are specified to be converted:;ESP=Se especificaron los siguientes grupos contables producto para su conversi¢n:';
      Text1100034@1100034 : TextConst 'ENU=Perform Checking...;ESP=Realizando comprobaci¢n...';
      Text1100035@1100035 : TextConst 'ENU=Step;ESP=Paso';
      Text1100036@1100036 : TextConst 'ENU=Checking whether table 70593  "VAT Rate Raise Setup" is empty or not.;ESP=Comprobando si la tabla 70593  "Config. incremento ¡ndice IVA" est  vac¡a o no.';
      Text1100037@1100037 : TextConst 'ENU=Checking whether the tool has already been performed or not.;ESP=Comprobando si la herramienta ya se ha ejecutado o no.';
      Text1100038@1100038 : TextConst 'ENU=Checking whether the "From-VAT Prod. Posting Group" is used in table 324.;ESP=Comprobando si se usa "Grupo registro IVA prod. origen" en la tabla 324.';
      Text1100039@1100039 : TextConst 'ENU=Checking whether the "To-VAT Prod. Posting Group" is used in table 325.;ESP=Comprobando si se usa "Grupo registro IVA prod. destino" en la tabla 325.';
      Text1100040@1100040 : TextConst 'ENU=Checking whether the "From-VAT Prod. Posting Group" is used in table 325.;ESP=Comprobando si se usa "Grupo registro IVA prod. origen" en la tabla 325.';
      Text1100041@1100041 : TextConst 'ENU=Checking circular references for VAT Prod. Posting Groups.;ESP=Comprobando referencias circulares para grupos registro IVA prod.';
      Text1100042@1100042 : TextConst 'ENU=Checking whether the "To-VAT Prod. Posting Group" is already in use for G/L Accounts.;ESP=Comprobando si "Grupo registro IVA prod. destino" ya se usa para cuentas.';
      Text1100043@1100043 : TextConst 'ENU=Checking whether the "To-VAT Prod. Posting Group" is already in use for Items.;ESP=Comprobando si "Grupo registro IVA prod. destino" ya se usa para productos.';
      Text1100044@1100044 : TextConst 'ENU=Checking whether the "To-VAT Prod. Posting Group" is already in use for Resources.;ESP=Comprobando si "Grupo registro IVA prod. destino" ya se usa para recursos.';
      Text1100045@1100045 : TextConst 'ENU=Checking whether the "From-Gen. Prod. Posting Group" is used in table 251.;ESP=Comprobando si se usa "Grupo contable producto origen" en la tabla 251.';
      Text1100046@1100046 : TextConst 'ENU=Checking whether the "To-Gen. Prod. Posting Group" is used in table 251.;ESP=Comprobando si se usa "Grupo contable producto destino" en la tabla 251.';
      Text1100047@1100047 : TextConst 'ENU=Checking whether the "From-Gen. Prod. Posting Group" is used in table 252.;ESP=Comprobando si se usa "Grupo contable producto origen" en la tabla 252.';
      Text1100048@1100048 : TextConst 'ENU=Checking circular references for Gen. Prod. Posting Groups.;ESP=Comprobando referencias circulares para grupos contables producto.';
      Text1100049@1100049 : TextConst 'ENU=Checking whether the "To-Gen. Prod. Posting Group" is already in use for Items.;ESP=Comprobando si "Grupo contable producto destino" ya se usa para productos.';
      Text1100050@1100050 : TextConst 'ENU=Checking whether the "To-Gen. Prod. Posting Group" is already in use for Resources.;ESP=Comprobando si "Grupo contable producto destino" ya se usa para recursos.';
      Text1100051@1100051 : TextConst 'ENU=Checking whether there are Sales Headers with Status ''released'' in which Sales Lines have to be converted;ESP=Comprobando si hay cabeceras de venta con el estado "lanzada" en las que deben convertirse las l¡neas de ventas';
      Text1100052@1100052 : TextConst 'ENU=Checking whether there''s no space for a new Sales Line directly underneath an existing line.;ESP=Comprobando si no hay espacio para una nueva l¡nea de ventas directamente debajo de una l¡nea existente.';
      Text1100053@1100053 : TextConst 'ENU=Checking whether there''s a Sales Line used in Warehouse.;ESP=Comprobando si hay una l¡nea de ventas que se usa en el almacn.';
      Text1100054@1100054 : TextConst 'ENU=Checking whether there''s a combination of VAT Bus. Posting Group and Def. VAT Prod. Posting Group in table 325;ESP=Comprobando si hay una combinaci¢n de grupo registro IVA neg. y grupo reg. IVA prod. genr. en la tabla 325';
      Text1100055@1100055 : TextConst 'ENU=Checking for a combination of To-VAT prod. Posting Group and existing VAT bus. Posting Group in table 325.;ESP=Comprobando si hay una combinaci¢n de Grupo registro IVA prod. destino y un grupo registro IVA neg. existente en la tabla 325.';
      Text1100056@1100056 : TextConst 'ENU=Checking for Sales Documents with lines for drop shipments.;ESP=Comprobando si hay documentos venta con l¡neas para env¡os directos.';
      Text1100057@1100057 : TextConst 'ENU=Checking whether there are Purchase Headers with Status ''released'' in which Purchase Lines have to be converted;ESP=Comprobando si hay cabeceras de compra con el estado "lanzada" en las que deben convertirse las l¡neas de compra';
      Text1100058@1100058 : TextConst 'ENU=Checking whether there''s no space for a new Purchase Line directly underneath an existing line.;ESP=Comprobando si no hay espacio para una nueva l¡nea de compra directamente debajo de una l¡nea existente.';
      Text1100059@1100059 : TextConst 'ENU=Checking whether there''s a Purchase Line used in Warehouse.;ESP=Comprobando si hay una l¡nea de compra que se usa en el almacn.';
      Text1100060@1100060 : TextConst 'ENU=Checking whether there''s a combination of VAT Bus. Posting Group and Def. VAT Prod. Posting Group in table 325;ESP=Comprobando si hay una combinaci¢n de grupo registro IVA neg. y grupo reg. IVA prod. genr. en la tabla 325';
      Text1100061@1100061 : TextConst 'ENU=Checking for a combination of To-VAT prod. Posting Group and existing VAT bus. Posting Group in table 325.;ESP=Comprobando si hay una combinaci¢n de Grupo registro IVA prod. destino y un grupo registro IVA neg. existente en la tabla 325.';
      Text1100062@1100062 : TextConst 'ENU=Checking for Purchase Documents with lines for drop shipments.;ESP=Comprobando si hay documentos compra con l¡neas para env¡os directos.';
      Text1100063@1100063 : TextConst 'ENU=Checking for a valid combination of VAT Prod. Posting Group and VAT Bus. Posting Group.;ESP=Comprobando si hay una combinaci¢n v lida de grupo registro IVA prod. y grupo registro IVA neg.';
      Text1100064@1100064 : TextConst 'ENU=Checking for a valid combination of VAT Prod. Posting Group and VAT Bus. Posting Group.;ESP=Comprobando si hay una combinaci¢n v lida de grupo registro IVA prod. y grupo registro IVA neg.';
      Text1100065@1100065 : TextConst 'ENU=No %1 specified.;ESP=%1 sin especificar.';
      Text1100066@1100066 : TextConst 'ENU=The conversion has already been performed.;ESP=La conversi¢n ya se realiz¢.';
      Text1100067@1100067 : TextConst 'ENU=The following VAT Prod. Posting Group stated as %1 is already in use for at least one %2. Please confirm.;ESP=El siguiente grupo reg. IVA producto indicado como %1 ya est  en uso para al menos un %2. Confirme, por favor.';
      Text1100068@1100068 : TextConst 'ENU=The following Sales Documents contain lines that have to be split up.;ESP=Los siguientes documentos de ventas contienen l¡neas que deben dividirse.';
      Text1100069@1100069 : TextConst 'ENU=The following Purchase Documents contain lines that have to be split up.;ESP=Los siguientes documentos de compra contienen l¡neas que deben dividirse.';
      Text1100070@1100070 : TextConst 'ENU=This cannot be done automatically since there''s no room underneath the line that has to be split up. Please perform this task manually.;ESP=Esto no se puede realizar autom ticamente, ya que no hay espacio debajo de la l¡nea que debe dividirse. Realice la tarea manualmente.';
      Text1100071@1100071 : TextConst 'ENU=The following Sales Documents contain lines that have to be changed but at least one line is associated to Warehouse.;ESP=Los siguientes documentos de ventas contienen l¡neas que deben modificarse, pero al menos una de ellas est  asociada al almacn.';
      Text1100072@1100072 : TextConst 'ENU=The following Purchase Documents contain lines that have to be changed but at least one line is associated to Warehouse.;ESP=Los siguientes documentos de compra contienen l¡neas que deben modificarse, pero al menos una de ellas est  asociada al almacn.';
      Text1100073@1100073 : TextConst 'ENU=For this reason the lines cannot be converted automatically. Please perform this manually.;ESP=Por este motivo, las l¡neas no pueden convertirse autom ticamente. Realice la tarea manualmente.';
      Text1100074@1100074 : TextConst 'ENU=The following Sales Documents contain lines in which a Gen. Prod. Posting Group is specified that has to be changed.;ESP=Los siguientes documentos de ventas contienen l¡neas en las que se especifica un grupo contable producto que debe modificarse.';
      Text1100075@1100075 : TextConst 'ENU=The following Purchase Documents contain lines in which a Gen. Prod. Posting Group is specified that has to be changed.;ESP=Los siguientes documentos de compra contienen l¡neas en las que se especifica un grupo contable producto que debe modificarse.';
      Text1100076@1100076 : TextConst 'ENU=This cannot be done. The reason for this might be: the field ''Auto Insert Default'' of table ''Gen. Product Posting Group'' is set and the Gen. Prod. Posting Group stated as ''Def. VAT Prod. Posting Group'' does not exist;ESP=Esto no se puede realizar debido a los siguientes motivos posibles: el campo "Inserta genr. aut." de la tabla "Gr. contable producto" se ha establecido y no existe el grupo contable producto que se indica como "Grupo reg. IVA prod. genr.".';
      Text1100077@1100077 : TextConst 'ENU=or there''s no adequate combination of VAT Bus. Posting Group and Def. VAT Prod. Posing Group in table "VAT Posting Setup".;ESP=o bien, no hay combinaci¢n adecuada de grupo registro IVA neg. y grupo reg. IVA prod. genr. en la tabla "Config. grupos registro IVA".';
      Text1100078@1100078 : TextConst 'ENU=The following Sales Documents contain lines in which a VAT. Prod. Posting Group is specified that has to be changed.;ESP=Los siguientes documentos de ventas contienen l¡neas en las que se especifica un grupo registro IVA prod. que debe modificarse.';
      Text1100079@1100079 : TextConst 'ENU=The following Purchase Documents contain lines in which a VAT. Prod. Posting Group is specified that has to be changed.;ESP=Los siguientes documentos de compra contienen l¡neas en las que se especifica un grupo registro IVA prod. que debe modificarse.';
      Text1100080@1100080 : TextConst 'ENU=This cannot be done since there''s no adequate combination of VAT Bus. Posting Group and new VAT Prod. Posing Group in table "VAT Posting Setup".;ESP=Esto no se puede realizar, ya que no hay combinaci¢n adecuada de grupo registro IVA neg. y grupo reg. IVA prod. genr. en la tabla "Config. grupos registro IVA".';
      Text1100081@1100081 : TextConst 'ENU=The following VAT Prod. Posting Groups are stated as %1 as well as %2 at least once in table %3.;ESP=Los siguientes grupos reg. IVA prod. genr. se indican como %1, as¡ como %2 al menos una vez en la tabla %3.';
      Text1100082@1100082 : TextConst 'ENU=The following Prod. Posting Groups are stated as %1 as well as %2 at least once in table %3.;ESP=Los siguientes grupos contables producto se indican como %1, as¡ como %2 al menos una vez en la tabla %3.';
      Text1100083@1100083 : TextConst 'ENU=This might lead to a circular reference that cannot be resolved automatically.;ESP=Esto podr¡a resultar en una referencia circular y no se puede resolver autom ticamente.';
      Text1100084@1100084 : TextConst 'ENU=Please resolve this manually.;ESP=Realice la resoluci¢n manualmente.';
      Text1100085@1100085 : TextConst 'ENU=The following Gen. Prod. Posting Group stated as %1 is already in use for at least one %2. Please confirm.;ESP=El siguiente grupo contable producto indicado como %1 ya est  en uso para al menos un %2. Confirme, por favor.';
      Text1100086@1100086 : TextConst 'ENU=Do you want to continue with the conversion anyhow?;ESP=¨Desea continuar con la conversi¢n de todos modos?';
      Text1100087@1100087 : TextConst 'ENU=There are VAT Prod. Posting Groups that are in use for at least one %1.;ESP=Hay grupos registro IVA prod. que est n en uso para al menos un %1.';
      Text1100088@1100088 : TextConst 'ENU=There are Gen. Prod. Posting Groups that are in use for at least one %1.;ESP=Hay grupos contables producto que est n en uso para al menos un %1.';
      Text1100089@1100089 : TextConst 'ENU=There are Sales Headers with Status ''Released''.;ESP=Ha cabeceras de ventas con el estado "lanzada".';
      Text1100090@1100090 : TextConst 'ENU=There are Purchase Headers with Status ''Released''.;ESP=Ha cabeceras de compra con el estado "lanzada".';
      Text1100091@1100091 : TextConst 'ENU=The Lines of Sales and Purchase Documents with Status ''Released'' won''t be converted. Please set the Status to ''Open'' if you want the Lines to be modified automatically.;ESP=No se convertir n las l¡neas de los documentos de ventas y compra con el estado "lanzada". Establezca el estado en "Abierta" para que las l¡neas se modifiquen autom ticamente.';
      Text1100092@1100092 : TextConst 'ENU=The following Reminders contain lines in which a VAT Prod. Posting Group is specified that has to be changed.;ESP=Los siguientes avisos contienen l¡neas en las que se especifica un grupo registro IVA prod. que debe modificarse.';
      Text1100093@1100093 : TextConst 'ENU=The following Finance Charge Memos contain lines in which a VAT Prod. Posting Group is specified that has to be changed.;ESP=Los siguientes documentos de inters contienen l¡neas en las que se especifica un grupo registro IVA prod. que debe modificarse.';
      Text1100094@1100094 : TextConst 'ENU=The following Sales Documents contain lines which are associated to a Purchase Document due to a drop shipment.;ESP=Los documentos de ventas siguientes contienen l¡neas asociadas con un documento de compra debido a un env¡o directo.';
      Text1100095@1100095 : TextConst 'ENU=The following Purchase Documents contain lines which are associated to a Sales Document due to a drop shipment.;ESP=Los documentos de compra siguientes contienen l¡neas asociadas con un documento de ventas debido a un env¡o directo.';
      Text1100096@1100096 : TextConst 'ENU=Documents that contains such lines cannot be converted automatically. Please perform this manually.;ESP=Los documentos que contienen este tipo de l¡neas no se pueden convertir autom ticamente. Realice la tarea manualmente.';
      Text1100097@1100097 : TextConst 'ENU=There''s no room to split up Sales Line %1 of %2 %3. The Conversion will be canceled.;ESP=No hay espacio para dividir la l¡nea de ventas %1 de %2 %3. Se cancelar  la conversi¢n.';
      Text1100098@1100098 : TextConst 'ENU=There''s no room to split up Purchase Line %1 of %2 %3. The Conversion will be canceled.;ESP=No hay espacio para dividir la l¡nea de compra %1 de %2 %3. Se cancelar  la conversi¢n.';
      Text1100099@1100099 : TextConst 'ENU=The Lines of the following Sales Documents with Status ''Released'' have to be modified. If you did not select "Ignore Status on Sales Header" on the Request Form the Lines of this Document won''t be changed automatically.;ESP=Deben modificarse las l¡neas de los siguientes documentos de ventas con el estado "Lanzada". Si no seleccion¢ la opci¢n "Omitir estado en cab. venta" en el formulario de solicitud, las l¡neas de este documento no se modificar n autom ticamente.';
      Text1100100@1100100 : TextConst 'ENU=The Lines of the following Purchase Documents with Status ''Released'' have to be modified. If you did not select "Ignore Status on Purchase Header" on the Request Form the Lines of this Document won''t be changed automatically.;ESP=Deben modificarse las l¡neas de los siguientes documentos de compra con el estado "Lanzada". Si no seleccion¢ la opci¢n "Omitir estado en cab. compra" en el formulario de solicitud, las l¡neas de este documento no se modificar n autom ticamente.';
      Text1100101@1100101 : TextConst 'ENU=You then have to do this manually.;ESP=Deber  realizarse manualmente.';
      Text1100102@1100102 : TextConst 'ENU=Due to rejected confirmations the conversion was interrupted.;ESP=La conversi¢n se interrumpi¢ debido a confirmaciones rechazadas.';
      Text1100103@1100103 : TextConst 'ENU=Errors and Warnings occured.;ESP=Se produjeron errores y avisos.';
      Text1100104@1100104 : TextConst 'ENU=The conversion was interrupted.;ESP=Se interrumpi¢ la conversi¢n.';
      Text1100105@1100105 : TextConst 'ENU=Please check the report and correct the errors.;ESP=Compruebe el informe y corrija los errores.';
      Text1100106@1100106 : TextConst 'ENU=Errors occured.;ESP=Se produjeron errores.';
      Text1100107@1100107 : TextConst 'ENU=Warnings occured.;ESP=Se produjeron avisos.';
      Text1100108@1100108 : TextConst 'ENU=Do you want to continue with the conversion anyhow?;ESP=¨Desea continuar con la conversi¢n de todos modos?';
      Text1100109@1100109 : TextConst 'ENU=The conversion was interrupted to respect the warning.;ESP=Se ha interrumpido la conversi¢n para respetar el aviso.';
      Text1100110@1100110 : TextConst 'ENU=Perform Conversion...;ESP=Realizar conversi¢n...';
      Text1100111@1100111 : TextConst 'ENU=Updating G/L Accounts;ESP=Actualizando cuentas';
      Text1100112@1100112 : TextConst 'ENU=Updating Items;ESP=Actualizando productos';
      Text1100113@1100113 : TextConst 'ENU=Updating Item Category;ESP=Actualizando categor¡a productos';
      Text1100114@1100114 : TextConst 'ENU=Updating Item Charges;ESP=Actualizando cargos producto';
      Text1100115@1100115 : TextConst 'ENU=Updating Resources;ESP=Actualizando recursos';
      Text1100220@1100220 : TextConst 'ENU=Updating Gen. Journal Lines;ESP=Actualizando l¡neas diario general';
      Text1100221@1100221 : TextConst 'ENU=Updating Gen. Jnl. Allocation;ESP=Actualizando diario gen. distribuci¢n';
      Text1100222@1100222 : TextConst 'ENU=Updating Standard General Journal Line;ESP=Actualizando l¡nea diario general est ndar';
      Text1100223@1100223 : TextConst 'ENU=Updating Res. Journal Line;ESP=Actualizando l¡nea diario recurso';
      Text1100224@1100224 : TextConst 'ENU=Updating Job Journal Line;ESP=Actualizando l¡nea diario proyecto';
      Text1100225@1100225 : TextConst 'ENU=Updating Requisition Line;ESP=Actualizando l¡nea demanda';
      Text1100226@1100226 : TextConst 'ENU=Updating Standard Item Journal Line;ESP=Actualizando l¡nea diario producto est ndar';
      Text1100227@1100227 : TextConst 'ENU=Updating Service Invoice Line;ESP=Actualizando l¡nea factura servicio';
      Text1100228@1100228 : TextConst 'ENU=Updating Serv. Price Adjustment Detail;ESP=Actualizando detalle ajuste precio servicio';
      Text1100229@1100229 : TextConst 'ENU=Updating Production Order;ESP=Actualizando orden producci¢n';
      Text1100230@1100230 : TextConst 'ENU=Updating Work Center;ESP=Actualizando centro trabajo';
      Text1100231@1100231 : TextConst 'ENU=Updating Machine Center;ESP=Actualizando centro m quina';
      Text1100116@1100116 : TextConst 'ENU=Updating Sales Documents;ESP=Actualizando documentos de ventas';
      Text1100117@1100117 : TextConst 'ENU=Updating Dimensions of Sales Document;ESP=Actualizando dimensiones del documentos ventas';
      Text1100118@1100118 : TextConst 'ENU=Updating Reservation Entries of Sales Document;ESP=Actualizando entradas de reserva de documento ventas';
      Text1100119@1100119 : TextConst 'ENU=Updating Item Tracking Lines of Sales Document;ESP=Actualizando l¡neas seguimiento producto del documento ventas';
      Text1100120@1100120 : TextConst 'ENU=Updating Item Charge Assignment (Sale);ESP=Actualizando asignaci¢n cargo prod. (venta)';
      Text1100121@1100121 : TextConst 'ENU=Updating existing Sales Line;ESP=Actualizando l¡nea ventas existente';
      Text1100122@1100122 : TextConst 'ENU=Updating Purchase Documents;ESP=Actualizando documentos compra';
      Text1100123@1100123 : TextConst 'ENU=Updating Dimensions of Purchase Document;ESP=Actualizando dimensiones del documento compra';
      Text1100124@1100124 : TextConst 'ENU=Updating Reservation Entries of Purchase Document;ESP=Actualizando entradas de reserva de documento compra';
      Text1100125@1100125 : TextConst 'ENU=Updating Item Tracking Lines of Purchase Document;ESP=Actualizando l¡neas seguimiento producto del documento compra';
      Text1100126@1100126 : TextConst 'ENU=Updating Item Charge Assignment (Purchase);ESP=Actualizando asignaci¢n cargo prod. (compra)';
      Text1100127@1100127 : TextConst 'ENU=Updating existing Purchase Line;ESP=Actualizando l¡nea compra existente';
      Text1100128@1100128 : TextConst 'ENU=Updating Reminders;ESP=Actualizando recordatorios';
      Text1100129@1100129 : TextConst 'ENU=Updating Finance Charge Memos;ESP=Actualizando docs. inters';
      Text1100130@1100130 : TextConst 'ENU=Updating BizTalk Partner Header Setup;ESP=Actualizando configuraci¢n cabecera socio BizTalk';
      Text1100131@1100131 : TextConst 'ENU=Update Status;ESP=Estado actualizaci¢n';
      Text1100132@1100132 : TextConst 'ENU=Completed successfully.;ESP=Finalizaci¢n correcta.';
      Text1100133@1100133 : TextConst 'ENU=Due to errors or confirmations rejected by the user the conversion was interrupted - nothing has been changed.;ESP="La conversi¢n se interrumpi¢ debido a errores o confirmaciones rechazadas por el usuario; no se ha modificado nada."';
      Text1100134@1100134 : TextConst 'ENU=Due to user decision the conversion wasn''t performed.;ESP=La conversi¢n no se realiz¢ debido a la decisi¢n del usuario.';
      Text1100135@1100135 : TextConst 'ENU=The following %1 does not exist in table %2.;ESP=El siguiente %1 no existe en la tabla %2.';
      SalesHeader@1100136 : Record 36;
      PurchaseHeader@1100137 : Record 38;
      ReminderHeader@1100138 : Record 295;
      FinanceChargeMemoHeader@1100139 : Record 302;
      PerformUpdateGenProdPostGroups@1100140 : 'No,Def. VAT Prod. Posting Group';
      PerformUpdateGLAccounts@1100141 : 'No,VAT Prod. Posting Group';
      PerformUpdateItems@1100142 : 'No,VAT Prod. Posting Group,Gen. Prod. Posting Group,Both';
      PerformUpdateItemCategories@1100143 : 'No,VAT Prod. Posting Group,Gen. Prod. Posting Group,Both';
      PerformUpdateItemCharges@1100144 : 'No,VAT Prod. Posting Group,Gen. Prod. Posting Group,Both';
      PerformUpdateResources@1100145 : 'No,VAT Prod. Posting Group,Gen. Prod. Posting Group,Both';
      PerformUpdateGenJournalLine@1100146 : 'No,VAT Prod. Posting Group';
      PerformUpdateGenJournalAlloc@1100147 : 'No,VAT Prod. Posting Group';
      PerformUpdateStdGenJnlLine@1100148 : 'No,VAT Prod. Posting Group';
      PerformUpdateResJournalLine@1100149 : 'No,Gen. Prod. Posting Group';
      PerformUpdateJobJournalLine@1100150 : 'No,Gen. Prod. Posting Group';
      PerformUpdateRequisitionLine@1100151 : 'No,Gen. Prod. Posting Group';
      PerformUpdateStdItemJnlLine@1100152 : 'No,Gen. Prod. Posting Group';
      PerformUpdateServiceInvLine@1100153 : 'No,VAT Prod. Posting Group,Gen. Prod. Posting Group,Both';
      PerformUpdateServPriceAdjDet@1100154 : 'No,Gen. Prod. Posting Group';
      PerformUpdateSalesDocs@1100155 : 'No,VAT Prod. Posting Group,Gen. Prod. Posting Group,Both';
      PerformUpdatePurchDocs@1100156 : 'No,VAT Prod. Posting Group,Gen. Prod. Posting Group,Both';
      PerformUpdateProductionOrders@1100157 : 'No,Gen. Prod. Posting Group';
      PerformUpdateWorkCenter@1100158 : 'No,Gen. Prod. Posting Group';
      PerformUpdateMachineCenter@1100159 : 'No,Gen. Prod. Posting Group';
      PerformUpdateReminders@1100160 : 'No,VAT Prod. Posting Group';
      PerformUpdateFinChargeMemos@1100161 : 'No,VAT Prod. Posting Group';
      PerformUpdateBizTalkPartSetup@1100162 : 'No,VAT Prod. Posting Group,Gen. Prod. Posting Group,Both';
      Messagetext@1100163 : Text[1024];
      PerformConversionText@1100164 : Text[80];
      UpdateGenProdPostGroupsText@1100165 : Text[80];
      UpdateGLAccountsText@1100166 : Text[80];
      UpdateItemsText@1100167 : Text[80];
      UpdateItemCategoriesText@1100168 : Text[80];
      UpdateItemChargesText@1100169 : Text[80];
      UpdateResourcesText@1100170 : Text[80];
      UpdateGenJournalLinesText@1100171 : Text[80];
      UpdateGenJournalAllocText@1100172 : Text[80];
      UpdateStdGenJnlLinesText@1100173 : Text[80];
      UpdateResJournalLinesText@1100174 : Text[80];
      UpdateJobJournalLinesText@1100175 : Text[80];
      UpdateRequisitionLinesText@1100176 : Text[80];
      UpdateStandardItemJnlLinesText@1100177 : Text[80];
      UpdateServiceInvoiceLinesText@1100178 : Text[80];
      UpdateServPriceAdjDetailsText@1100179 : Text[80];
      UpdateSalesDocsText@1100180 : Text[80];
      UpdatePurchDocsText@1100181 : Text[80];
      UpdateProductionOrdersText@1100182 : Text[80];
      UpdateWorkCentersText@1100183 : Text[80];
      UpdateMachineCentersText@1100184 : Text[80];
      UpdateRemindersText@1100185 : Text[80];
      UpdateFinChargeMemosText@1100186 : Text[80];
      UpdateBizTalkPartnerSetupText@1100187 : Text[80];
      FilterOnGLAccounts@1100188 : Text[80];
      FilterOnItems@1100189 : Text[80];
      FilterOnResources@1100190 : Text[80];
      SuppressWarningsText@1100191 : Text[120];
      SuppressConfirmationsText@1100192 : Text[120];
      Step@1100193 : Integer;
      NoOfCheckSteps@1100194 : Integer;
      NoOfConvertSteps@1100195 : Integer;
      ErrorCounter@1100196 : Integer;
      ConfirmationCounter@1100197 : Integer;
      ConfirmationRejectedCounter@1100198 : Integer;
      WarningCounter@1100199 : Integer;
      Occurrences@1100200 : Integer;
      SetupExists@1100201 : Boolean;
      TestPassed@1100202 : Boolean;
      UpdateVATProdPostingGroup@1100203 : Boolean;
      UpdateGenProdPostingGroup@1100204 : Boolean;
      ToolCompleted@1100205 : Boolean;
      PerformConversion@1100206 : Boolean;
      SuppressWarnings@1100207 : Boolean;
      SuppressConfirmations@1100208 : Boolean;
      IgnoreStatusOnSalesHeader@1100209 : Boolean;
      IgnoreStatusOnPurchHeader@1100210 : Boolean;
      SkipCheck@1100211 : ARRAY [100] OF Boolean;
      SkipConvert@1100212 : ARRAY [100] OF Boolean;
      ShowDetails@1100213 : Boolean;
      ShowHeader@1100214 : Boolean;
      ShowData@1100215 : Boolean;
      ShowDetailsHeader@1100216 : Boolean;
      ShowDetailsData@1100217 : Boolean;
      found@1100218 : Boolean;
      ProgressWindow@1100219 : Dialog;
      Text50000@1100253000 : TextConst 'ESP=Ya se ha ejecutado el proceso, ¨desea volver a ejecutarlo?';

    PROCEDURE GetSetup@1100000() : Boolean;
    VAR
      VATRateRaiseSetup@1100000 : Record 10740;
      ExitValue@1100001 : Boolean;
    BEGIN
      ExitValue := TRUE;
      IF VATRateRaiseSetup.GET = FALSE THEN BEGIN
        VATRateRaiseSetup.INIT;
        VATRateRaiseSetup."Update Gen. Prod. Post. Groups" :=
          VATRateRaiseSetup."Update Gen. Prod. Post. Groups"::"Def. VAT Prod. Posting Group";
        VATRateRaiseSetup."Update G/L Accounts" := VATRateRaiseSetup."Update G/L Accounts"::"VAT Prod. Posting Group";
        VATRateRaiseSetup."Update Items" := VATRateRaiseSetup."Update Items"::Both;
        VATRateRaiseSetup."Update Item Categories" := VATRateRaiseSetup."Update Item Categories"::Both;
        VATRateRaiseSetup."Update Item Charges" := VATRateRaiseSetup."Update Item Charges"::Both;
        VATRateRaiseSetup."Update Resources" := VATRateRaiseSetup."Update Resources"::Both;
        VATRateRaiseSetup."Update Gen. Journal Lines" := VATRateRaiseSetup."Update Gen. Journal Lines"::"VAT Prod. Posting Group";
        VATRateRaiseSetup."Update Gen. Journal Allocation" :=
          VATRateRaiseSetup."Update Gen. Journal Allocation"::"VAT Prod. Posting Group";
        VATRateRaiseSetup."Update Standard Gen. Jnl.Lines" :=
          VATRateRaiseSetup."Update Standard Gen. Jnl.Lines"::"VAT Prod. Posting Group";
        VATRateRaiseSetup."Update Res. Journal Lines" := VATRateRaiseSetup."Update Res. Journal Lines"::"Gen. Prod. Posting Group";
        VATRateRaiseSetup."Update Job Journal Lines" := VATRateRaiseSetup."Update Job Journal Lines"::"Gen. Prod. Posting Group";
        VATRateRaiseSetup."Update Requisition Lines" :=
          VATRateRaiseSetup."Update Requisition Lines"::"Gen. Prod. Posting Group";
        VATRateRaiseSetup."Update Standard Item Jnl.Lines" :=
          VATRateRaiseSetup."Update Standard Item Jnl.Lines"::"Gen. Prod. Posting Group";
        VATRateRaiseSetup."Update Service Invoice Lines" := VATRateRaiseSetup."Update Service Invoice Lines"::Both;
        VATRateRaiseSetup."Update Serv. Price Adj. Detail" :=
          VATRateRaiseSetup."Update Serv. Price Adj. Detail"::"Gen. Prod. Posting Group";
        VATRateRaiseSetup."Update Sales Documents" := VATRateRaiseSetup."Update Sales Documents"::Both;
        VATRateRaiseSetup."Update Purchase Documents" := VATRateRaiseSetup."Update Purchase Documents"::Both;
        VATRateRaiseSetup."Update Production Orders" := VATRateRaiseSetup."Update Production Orders"::"Gen. Prod. Posting Group";
        VATRateRaiseSetup."Update Work Centers" := VATRateRaiseSetup."Update Work Centers"::"Gen. Prod. Posting Group";
        VATRateRaiseSetup."Update Machine Centers" := VATRateRaiseSetup."Update Machine Centers"::"Gen. Prod. Posting Group";
        VATRateRaiseSetup."Update Reminders" := VATRateRaiseSetup."Update Reminders"::"VAT Prod. Posting Group";
        VATRateRaiseSetup."Update Finance Charge Memos" := VATRateRaiseSetup."Update Finance Charge Memos"::"VAT Prod. Posting Group";
        VATRateRaiseSetup."Update BizTalk Partner Setup" := VATRateRaiseSetup."Update BizTalk Partner Setup"::"VAT Prod. Posting Group";
        VATRateRaiseSetup."VAT Rate Change Tool Completed" := FALSE;
        ExitValue := FALSE;
      END;
      PerformUpdateGenProdPostGroups := VATRateRaiseSetup."Update Gen. Prod. Post. Groups";
      PerformUpdateGLAccounts := VATRateRaiseSetup."Update G/L Accounts";
      PerformUpdateItems := VATRateRaiseSetup."Update Items";
      PerformUpdateItemCategories := VATRateRaiseSetup."Update Item Categories";
      PerformUpdateItemCharges := VATRateRaiseSetup."Update Item Charges";
      PerformUpdateResources := VATRateRaiseSetup."Update Resources";
      PerformUpdateGenJournalLine := VATRateRaiseSetup."Update Gen. Journal Lines";
      PerformUpdateGenJournalAlloc := VATRateRaiseSetup."Update Gen. Journal Allocation";
      PerformUpdateStdGenJnlLine := VATRateRaiseSetup."Update Standard Gen. Jnl.Lines";
      PerformUpdateResJournalLine := VATRateRaiseSetup."Update Res. Journal Lines";
      PerformUpdateJobJournalLine := VATRateRaiseSetup."Update Job Journal Lines";
      PerformUpdateRequisitionLine := VATRateRaiseSetup."Update Requisition Lines";
      PerformUpdateStdItemJnlLine := VATRateRaiseSetup."Update Standard Item Jnl.Lines";
      PerformUpdateServiceInvLine := VATRateRaiseSetup."Update Service Invoice Lines";
      PerformUpdateServPriceAdjDet := VATRateRaiseSetup."Update Serv. Price Adj. Detail";
      PerformUpdateSalesDocs := VATRateRaiseSetup."Update Sales Documents";
      PerformUpdatePurchDocs := VATRateRaiseSetup."Update Purchase Documents";
      PerformUpdateProductionOrders := VATRateRaiseSetup."Update Production Orders";
      PerformUpdateWorkCenter := VATRateRaiseSetup."Update Work Centers";
      PerformUpdateMachineCenter := VATRateRaiseSetup."Update Machine Centers";
      PerformUpdateReminders := VATRateRaiseSetup."Update Reminders";
      PerformUpdateFinChargeMemos := VATRateRaiseSetup."Update Finance Charge Memos";
      PerformUpdateBizTalkPartSetup := VATRateRaiseSetup."Update BizTalk Partner Setup";
      ToolCompleted := VATRateRaiseSetup."VAT Rate Change Tool Completed";

      // generate Texts for the Report Header etc.
      UpdateGenProdPostGroupsText := FORMAT(VATRateRaiseSetup."Update Gen. Prod. Post. Groups");

      UpdateGLAccountsText := FORMAT(VATRateRaiseSetup."Update G/L Accounts");

      UpdateItemsText := FORMAT(VATRateRaiseSetup."Update Items");

      IF PerformUpdateItems = PerformUpdateItems::Both THEN BEGIN
        VATRateRaiseSetup."Update Items" := VATRateRaiseSetup."Update Items"::"VAT Prod. Posting Group";
        UpdateItemsText := FORMAT(VATRateRaiseSetup."Update Items") + '/';
        VATRateRaiseSetup."Update Items" := VATRateRaiseSetup."Update Items"::"Gen. Prod. Posting Group";
        UpdateItemsText := UpdateItemsText + FORMAT(VATRateRaiseSetup."Update Items");
        VATRateRaiseSetup."Update Items" := VATRateRaiseSetup."Update Items"::Both;
      END;

      UpdateItemCategoriesText := FORMAT(VATRateRaiseSetup."Update Item Categories");
      IF PerformUpdateItemCategories = PerformUpdateItemCategories::Both THEN BEGIN
        VATRateRaiseSetup."Update Item Categories" := VATRateRaiseSetup."Update Item Categories"::"VAT Prod. Posting Group";
        UpdateItemCategoriesText := FORMAT(VATRateRaiseSetup."Update Item Categories") + '/';
        VATRateRaiseSetup."Update Item Categories" := VATRateRaiseSetup."Update Item Categories"::"Gen. Prod. Posting Group";
        UpdateItemCategoriesText := UpdateItemCategoriesText + FORMAT(VATRateRaiseSetup."Update Item Categories");
        VATRateRaiseSetup."Update Item Categories" := VATRateRaiseSetup."Update Item Categories"::Both;
      END;

      UpdateItemChargesText := FORMAT(VATRateRaiseSetup."Update Item Charges");
      IF PerformUpdateItemCharges = PerformUpdateItemCharges::Both THEN BEGIN
        VATRateRaiseSetup."Update Item Charges" := VATRateRaiseSetup."Update Item Charges"::"VAT Prod. Posting Group";
        UpdateItemChargesText := FORMAT(VATRateRaiseSetup."Update Item Charges") + '/';
        VATRateRaiseSetup."Update Item Charges" := VATRateRaiseSetup."Update Item Charges"::"Gen. Prod. Posting Group";
        UpdateItemChargesText := UpdateItemChargesText + FORMAT(VATRateRaiseSetup."Update Item Charges");
        VATRateRaiseSetup."Update Item Charges" := VATRateRaiseSetup."Update Item Charges"::Both;
      END;

      UpdateResourcesText := FORMAT(VATRateRaiseSetup."Update Resources");
      IF PerformUpdateResources = PerformUpdateResources::Both THEN BEGIN
        VATRateRaiseSetup."Update Resources" := VATRateRaiseSetup."Update Resources"::"VAT Prod. Posting Group";
        UpdateResourcesText :=  FORMAT(VATRateRaiseSetup."Update Resources") + '/';
        VATRateRaiseSetup."Update Resources" := VATRateRaiseSetup."Update Resources"::"Gen. Prod. Posting Group";
        UpdateResourcesText :=  UpdateResourcesText + FORMAT(VATRateRaiseSetup."Update Resources");
        VATRateRaiseSetup."Update Resources" := VATRateRaiseSetup."Update Resources"::Both;
      END;

      UpdateGenJournalLinesText := FORMAT(VATRateRaiseSetup."Update Gen. Journal Lines");

      UpdateGenJournalAllocText := FORMAT(VATRateRaiseSetup."Update Gen. Journal Allocation");

      UpdateStdGenJnlLinesText := FORMAT(VATRateRaiseSetup."Update Standard Gen. Jnl.Lines");

      UpdateResJournalLinesText := FORMAT(VATRateRaiseSetup."Update Res. Journal Lines");

      UpdateJobJournalLinesText := FORMAT(VATRateRaiseSetup."Update Job Journal Lines");

      UpdateRequisitionLinesText := FORMAT(VATRateRaiseSetup."Update Requisition Lines");

      UpdateStandardItemJnlLinesText := FORMAT(VATRateRaiseSetup."Update Standard Item Jnl.Lines");

      UpdateServiceInvoiceLinesText := FORMAT(VATRateRaiseSetup."Update Service Invoice Lines");
      IF PerformUpdateServiceInvLine = PerformUpdateServiceInvLine::Both THEN BEGIN
        VATRateRaiseSetup."Update Service Invoice Lines" := VATRateRaiseSetup."Update Service Invoice Lines"::"VAT Prod. Posting Group";
        UpdateServiceInvoiceLinesText := FORMAT(VATRateRaiseSetup."Update Service Invoice Lines") + '/';
        VATRateRaiseSetup."Update Service Invoice Lines" :=
          VATRateRaiseSetup."Update Service Invoice Lines"::"Gen. Prod. Posting Group";
        UpdateServiceInvoiceLinesText := UpdateServiceInvoiceLinesText + FORMAT(VATRateRaiseSetup."Update Service Invoice Lines");
        VATRateRaiseSetup."Update Service Invoice Lines" := VATRateRaiseSetup."Update Service Invoice Lines"::Both;
      END;

      UpdateServPriceAdjDetailsText := FORMAT(VATRateRaiseSetup."Update Serv. Price Adj. Detail");

      UpdateSalesDocsText := FORMAT(VATRateRaiseSetup."Update Sales Documents");
      IF PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both THEN BEGIN
        VATRateRaiseSetup."Update Sales Documents" := VATRateRaiseSetup."Update Sales Documents"::"VAT Prod. Posting Group";
        UpdateSalesDocsText := FORMAT(VATRateRaiseSetup."Update Sales Documents") + '/';
        VATRateRaiseSetup."Update Sales Documents" := VATRateRaiseSetup."Update Sales Documents"::"Gen. Prod. Posting Group";
        UpdateSalesDocsText := UpdateSalesDocsText + FORMAT(VATRateRaiseSetup."Update Sales Documents");
        VATRateRaiseSetup."Update Sales Documents" := VATRateRaiseSetup."Update Sales Documents"::Both;
      END;

      UpdatePurchDocsText := FORMAT(VATRateRaiseSetup."Update Purchase Documents");
      IF PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both THEN BEGIN
        VATRateRaiseSetup."Update Purchase Documents" := VATRateRaiseSetup."Update Purchase Documents"::"VAT Prod. Posting Group";
        UpdatePurchDocsText := FORMAT(VATRateRaiseSetup."Update Purchase Documents") + '/';
        VATRateRaiseSetup."Update Purchase Documents" := VATRateRaiseSetup."Update Purchase Documents"::"Gen. Prod. Posting Group";
        UpdatePurchDocsText := UpdatePurchDocsText + FORMAT(VATRateRaiseSetup."Update Purchase Documents");
        VATRateRaiseSetup."Update Purchase Documents" := VATRateRaiseSetup."Update Purchase Documents"::Both;
      END;

      UpdateProductionOrdersText := FORMAT(VATRateRaiseSetup."Update Production Orders");

      UpdateWorkCentersText := FORMAT(VATRateRaiseSetup."Update Work Centers");

      UpdateMachineCentersText := FORMAT(VATRateRaiseSetup."Update Machine Centers");

      UpdateRemindersText := FORMAT(VATRateRaiseSetup."Update Reminders");

      UpdateFinChargeMemosText := FORMAT(VATRateRaiseSetup."Update Finance Charge Memos");

      UpdateBizTalkPartnerSetupText := FORMAT(VATRateRaiseSetup."Update BizTalk Partner Setup");
      IF PerformUpdateBizTalkPartSetup = PerformUpdateBizTalkPartSetup::Both THEN BEGIN
        VATRateRaiseSetup."Update BizTalk Partner Setup" := VATRateRaiseSetup."Update BizTalk Partner Setup"::"VAT Prod. Posting Group";
        UpdateBizTalkPartnerSetupText := FORMAT(VATRateRaiseSetup."Update BizTalk Partner Setup") + '/';
        VATRateRaiseSetup."Update BizTalk Partner Setup" := VATRateRaiseSetup."Update BizTalk Partner Setup"::"Gen. Prod. Posting Group"
      ;
        UpdateBizTalkPartnerSetupText := UpdateBizTalkPartnerSetupText + FORMAT(VATRateRaiseSetup."Update BizTalk Partner Setup");
        VATRateRaiseSetup."Update BizTalk Partner Setup" := VATRateRaiseSetup."Update BizTalk Partner Setup"::Both;
      END;

      PerformConversionText := Text1100000;
      IF PerformConversion = TRUE THEN
        PerformConversionText := Text1100001;

      EXIT(ExitValue);
    END;

    PROCEDURE GetFilterSettings@1100001();
    BEGIN
      CLEAR(FilterOnGLAccounts);
      CLEAR(FilterOnItems);
      CLEAR(FilterOnResources);
      // Retrieving filtersettings on G/L Accounts
      IF PerformUpdateGLAccounts <> PerformUpdateGLAccounts::No THEN BEGIN
        IF GetGLAccountFilters.GETFILTERS <> '' THEN
          FilterOnGLAccounts := GetGLAccountFilters.GETFILTERS
        ELSE
          FilterOnGLAccounts := Text1100026;    // none
      END ELSE
        FilterOnGLAccounts := Text1100027;      // n/a

      // Retrieving filtersettings on Items
      IF PerformUpdateItems <> PerformUpdateItems::No THEN BEGIN
        IF GetItemFilters.GETFILTERS <> '' THEN
          FilterOnItems := GetItemFilters.GETFILTERS
        ELSE
          FilterOnItems := Text1100026;   // none
      END ELSE
        FilterOnItems := Text1100027;     // n/a

      // Retrieving filtersettings on Resources
      IF PerformUpdateResources <> PerformUpdateResources::No THEN BEGIN
        IF GetResourceFilters.GETFILTERS <> '' THEN
          FilterOnResources := GetResourceFilters.GETFILTERS
        ELSE
          FilterOnResources := Text1100026;   // none
      END ELSE
        FilterOnResources := Text1100027;     // n/a
    END;

    PROCEDURE GetOtherSettings@1100002();
    BEGIN
      // Suppress Warnings?
      IF SuppressWarnings THEN
        SuppressWarningsText := Text1100028
      ELSE
        SuppressWarningsText := Text1100029;

      // Suppress Confirmations
      IF SuppressConfirmations THEN
        SuppressConfirmationsText := Text1100030
      ELSE
        SuppressConfirmationsText := Text1100031;
    END;

    PROCEDURE GetNextSalesLineNo@1100003(SalesLine@1100000 : Record 37;VAR NextLineNo@1100001 : Integer) : Boolean;
    VAR
      SalesLine2@1100002 : Record 37;
    BEGIN
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLine2 := SalesLine;
      IF SalesLine2.FIND('>') THEN BEGIN
        NextLineNo := SalesLine."Line No." + (SalesLine2."Line No." - SalesLine."Line No.") DIV 2;
      END ELSE
        NextLineNo := SalesLine."Line No." + 10000;
      EXIT(NextLineNo <> SalesLine."Line No.");
    END;

    PROCEDURE SalesLineInWarehouse@1100004(SalesLine@1100000 : Record 37) : Boolean;
    VAR
      WhseValidateSourceLine@1100001 : Codeunit 5777;
      ExitValue@1100002 : Boolean;
    BEGIN
      ExitValue := FALSE;
      WITH SalesLine DO
        ExitValue := WhseValidateSourceLine.WhseLinesExist(DATABASE::"Sales Line",
                                                           "Document Type",
                                                           "Document No.",
                                                           "Line No.",
                                                           0,
                                                           Quantity);
      EXIT(ExitValue);
    END;

    PROCEDURE GetNextPurchaseLineNo@1100005(PurchaseLine@1100000 : Record 39;VAR NextLineNo@1100001 : Integer) : Boolean;
    VAR
      PurchaseLine2@1100002 : Record 39;
    BEGIN
      PurchaseLine2.RESET;
      PurchaseLine2.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchaseLine2.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchaseLine2 := PurchaseLine;
      IF PurchaseLine2.FIND('>') THEN BEGIN
        NextLineNo := PurchaseLine."Line No." + (PurchaseLine2."Line No." - PurchaseLine."Line No.") DIV 2;
      END ELSE
        NextLineNo := PurchaseLine."Line No." + 10000;
      EXIT(NextLineNo <> PurchaseLine."Line No.");
    END;

    PROCEDURE PurchaseLineInWarehouse@1100006(PurchaseLine@1100000 : Record 39) : Boolean;
    VAR
      WhseValidateSourceLine@1100001 : Codeunit 5777;
      ExitValue@1100002 : Boolean;
    BEGIN
      ExitValue := FALSE;
      WITH PurchaseLine DO
        ExitValue := WhseValidateSourceLine.WhseLinesExist(DATABASE::"Purchase Line",
                                                           "Document Type",
                                                           "Document No.",
                                                           "Line No.",
                                                           0,
                                                           Quantity);
      EXIT(ExitValue);
    END;

    PROCEDURE Convert@1100007();
    VAR
      VATRateRaiseSetup@1100000 : Record 10740;
    BEGIN
      Step := 0;
      ProgressWindow.UPDATE(1,Text1100110);
      ProgressWindow.UPDATE(2,'');
      ProgressWindow.UPDATE(3,Step);
      ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);

      // $002
      VATRateRaiseSetup.GET;

      IF VATRateRaiseSetup."Fecha camb. Gr. Cont. Producto" = 0DT THEN
       IF PerformUpdateGenProdPostGroups <> PerformUpdateGenProdPostGroups::No THEN BEGIN
        UpdateGenProdPostingGroups;
        VATRateRaiseSetup."Fecha camb. Gr. Cont. Producto" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Cuentas" = 0DT THEN
       IF PerformUpdateGLAccounts <> PerformUpdateGLAccounts::No THEN BEGIN
        UpdateGLAccounts;
        VATRateRaiseSetup."Fecha Cuentas" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Productos" = 0DT THEN
       IF PerformUpdateItems <> PerformUpdateItems::No THEN BEGIN
        UpdateItems;
        VATRateRaiseSetup."Fecha Productos" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Categorias prod" = 0DT THEN
       IF PerformUpdateItemCategories <> PerformUpdateItemCategories::No THEN BEGIN
        UpdateItemCategories;
        VATRateRaiseSetup."Fecha Categorias prod" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Cargos prod" = 0DT THEN
       IF PerformUpdateItemCharges <> PerformUpdateItemCharges::No THEN BEGIN
        UpdateItemCharges;
        VATRateRaiseSetup."Fecha Cargos prod" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Recursos" = 0DT THEN
       IF PerformUpdateResources <> PerformUpdateResources::No THEN BEGIN
        UpdateResources;
        VATRateRaiseSetup."Fecha Recursos" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Lin Diario General" = 0DT THEN
       IF PerformUpdateGenJournalLine <> PerformUpdateGenJournalLine::No THEN BEGIN
        UpdateGenJournalLine;
        VATRateRaiseSetup."Fecha Lin Diario General" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Asignacion Diario Gen" = 0DT THEN
       IF PerformUpdateGenJournalAlloc <> PerformUpdateGenJournalAlloc::No THEN BEGIN
        UpdateGenJournalAllocation;
        VATRateRaiseSetup."Fecha Asignacion Diario Gen" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Lin Diario Gen Estandar" = 0DT THEN
       IF PerformUpdateStdGenJnlLine <> PerformUpdateStdGenJnlLine::No THEN BEGIN
        UpdateStdGenJournalLine;
        VATRateRaiseSetup."Fecha Lin Diario Gen Estandar" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Lin Diario Recurso" = 0DT THEN
       IF PerformUpdateResJournalLine <> PerformUpdateResJournalLine::No THEN BEGIN
        UpdateResJournalLine;
        VATRateRaiseSetup."Fecha Lin Diario Recurso" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Lin Diario Proyecto" = 0DT THEN
       IF PerformUpdateJobJournalLine <> PerformUpdateJobJournalLine::No THEN BEGIN
        UpdateJobJournalLine;
        VATRateRaiseSetup."Fecha Lin Diario Proyecto" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Lineas Demanda" = 0DT THEN
       IF PerformUpdateRequisitionLine <> PerformUpdateRequisitionLine::No THEN BEGIN
        UpdateRequisitionLine;
        VATRateRaiseSetup."Fecha Lineas Demanda" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Lin Diario Prod Estandar" = 0DT THEN
       IF PerformUpdateStdItemJnlLine <> PerformUpdateStdItemJnlLine::No THEN BEGIN
        UpdateStandardItemJournalLine;
        VATRateRaiseSetup."Fecha Lin Diario Prod Estandar" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Lin Factura Servicio" = 0DT THEN
       IF PerformUpdateServiceInvLine <> PerformUpdateServiceInvLine::No THEN BEGIN
        UpdateServiceInvoiceLine;
        VATRateRaiseSetup."Fecha Lin Factura Servicio" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Documentos Ventas" = 0DT THEN
       IF PerformUpdateSalesDocs <> PerformUpdateSalesDocs::No THEN BEGIN
        UpdateSalesDocuments;
        VATRateRaiseSetup."Fecha Documentos Ventas" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Documentos Compra" = 0DT THEN
       IF PerformUpdatePurchDocs <> PerformUpdatePurchDocs::No THEN BEGIN
        UpdatePurchaseDocuments;
        VATRateRaiseSetup."Fecha Documentos Compra" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Ordenes Producc" = 0DT THEN
       IF PerformUpdateProductionOrders <> PerformUpdateProductionOrders::No THEN BEGIN
        UpdateProductionOrders;
        VATRateRaiseSetup."Fecha Ordenes Producc" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Centros Trabajo" = 0DT THEN
       IF PerformUpdateWorkCenter <> PerformUpdateWorkCenter::No THEN BEGIN
        UpdateWorkCenters;
        VATRateRaiseSetup."Fecha Centros Trabajo" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Centros Maquina" = 0DT THEN
       IF PerformUpdateMachineCenter <> PerformUpdateMachineCenter::No THEN BEGIN
        UpdateMachineCenters;
        VATRateRaiseSetup."Fecha Centros Maquina" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Ajuste Precio Servicio" = 0DT THEN
       IF PerformUpdateServPriceAdjDet <> PerformUpdateServPriceAdjDet::No THEN BEGIN
        UpdateServicePriceAdjDetail;
        VATRateRaiseSetup."Fecha Ajuste Precio Servicio" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Docs Recordatorio" = 0DT THEN
       IF PerformUpdateReminders <> PerformUpdateReminders::No THEN BEGIN
        UpdateReminders;
        VATRateRaiseSetup."Fecha Docs Recordatorio" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Docs Interes" = 0DT THEN
       IF PerformUpdateFinChargeMemos <> PerformUpdateFinChargeMemos::No THEN BEGIN
        UpdateFinChargeMemos;
        VATRateRaiseSetup."Fecha Docs Interes" := CREATEDATETIME(TODAY,TIME);
       END;

      IF VATRateRaiseSetup."Fecha Config Socio BizTalk" = 0DT THEN
       IF PerformUpdateBizTalkPartSetup <> PerformUpdateBizTalkPartSetup::No THEN BEGIN
        UpdateBizTalkPartnerSetup;
        VATRateRaiseSetup."Fecha Config Socio BizTalk" := CREATEDATETIME(TODAY,TIME);
       END;

      VATRateRaiseSetup.MODIFY;


      // updating VAT Rate Raise Setup (11080)
      Step := 23;
      ProgressWindow.UPDATE(2,Step);
      ProgressWindow.UPDATE(3,Text1100131);
      ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);

      {
      VATRateRaiseSetup.GET;
      VATRateRaiseSetup."VAT Rate Change Tool Completed" := TRUE;
      VATRateRaiseSetup.MODIFY;
      }

      ProgressWindow.CLOSE;

      MESSAGE(Text1100132);
    END;

    PROCEDURE UpdateGenProdPostingGroups@1100008();
    VAR
      GenProductPostingGroup@1100000 : Record 251;
      GenProductPostingGroup2@1100001 : Record 251;
      VATProdPostingGroupConv@1100002 : Record 10741;
    BEGIN
      // updating Gen. Prod. Posting Groups (251)
      Step := 1;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100111);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        WITH GenProductPostingGroup DO
          IF FIND('-') THEN REPEAT
            IF VATProdPostingGroupConv.GET("Def. VAT Prod. Posting Group") THEN BEGIN
              GenProductPostingGroup2.GET(Code);
              GenProductPostingGroup2."Def. VAT Prod. Posting Group" := VATProdPostingGroupConv."To-VAT Prod. Posting Group";
              GenProductPostingGroup2.MODIFY;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE UpdateGLAccounts@1100009();
    VAR
      GLAccount@1100000 : Record 15;
      GLAccount2@1100001 : Record 15;
      VATProdPostingGroupConv@1100002 : Record 10741;
    BEGIN
      // updating G/L Accounts (15)
      Step := 2;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100111);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        GLAccount.COPYFILTERS(GetGLAccountFilters);
        WITH GLAccount DO
          IF FIND('-') THEN REPEAT
            IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN BEGIN
              GLAccount2.GET("No.");
              GLAccount2.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
              GLAccount2.MODIFY;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE UpdateItems@1100010();
    VAR
      Item@1100000 : Record 27;
      Item2@1100001 : Record 27;
      VATProdPostingGroupConv@1100006 : Record 10741;
      GenProdPostingGroupConv@1100007 : Record 10742;
      Updated@1100008 : Boolean;
    BEGIN
      // updating Items (27)
      Step := 3;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100112);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        Item.COPYFILTERS(GetItemFilters);
        IF Item.FIND('-') THEN REPEAT
          Updated := FALSE;
          IF (PerformUpdateItems = PerformUpdateItems::"VAT Prod. Posting Group") OR
             (PerformUpdateItems = PerformUpdateItems::Both) THEN
            IF VATProdPostingGroupConv.GET(Item."VAT Prod. Posting Group") THEN BEGIN
              Item2.GET(Item."No.");
              Item2.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
              Updated := TRUE;
            END;
          IF (PerformUpdateItems = PerformUpdateItems::"Gen. Prod. Posting Group") OR
             (PerformUpdateItems = PerformUpdateItems::Both) THEN
            IF GenProdPostingGroupConv.GET(Item."Gen. Prod. Posting Group") THEN BEGIN
              IF Updated = FALSE THEN
                Item2.GET(Item."No.");
              Item2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
              Updated := TRUE;
            END;
          IF Updated = TRUE THEN
            Item2.MODIFY;
        UNTIL Item.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateItemCategories@1100011();
    VAR
      ItemCategory@1100000 : Record 5722;
      ItemCategory2@1100001 : Record 5722;
      VATProdPostingGroupConv@1100002 : Record 10741;
      GenProdPostingGroupConv@1100003 : Record 10742;
      Updated@1100004 : Boolean;
    BEGIN
      // updating Item Categories (5722)
      Step := 4;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100113);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        WITH ItemCategory DO BEGIN
          IF FIND('-') THEN REPEAT
            Updated := FALSE;
            IF (PerformUpdateItemCategories = PerformUpdateItemCategories::"VAT Prod. Posting Group") OR
               (PerformUpdateItemCategories = PerformUpdateItemCategories::Both) THEN
              IF VATProdPostingGroupConv.GET(ItemCategory."Def. VAT Prod. Posting Group") THEN BEGIN
                ItemCategory2.GET(Code);
                ItemCategory2.VALIDATE("Def. VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
                Updated := TRUE;
              END;
            IF (PerformUpdateItemCategories = PerformUpdateItemCategories::"Gen. Prod. Posting Group") OR
               (PerformUpdateItemCategories = PerformUpdateItemCategories::Both) THEN
              IF GenProdPostingGroupConv.GET(ItemCategory."Def. Gen. Prod. Posting Group") THEN BEGIN
                IF Updated = FALSE THEN
                  ItemCategory2.GET(Code);
                ItemCategory2.VALIDATE("Def. Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
                Updated := TRUE;
              END;
            IF Updated = TRUE THEN
              ItemCategory2.MODIFY;
          UNTIL ItemCategory.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateItemCharges@1100012();
    VAR
      ItemCharge@1100000 : Record 5800;
      ItemCharge2@1100001 : Record 5800;
      VATProdPostingGroupConv@1100002 : Record 10741;
      GenProdPostingGroupConv@1100003 : Record 10742;
      Updated@1100004 : Boolean;
    BEGIN
      // updating Item Charges (5800)
      Step := 5;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100110);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        WITH ItemCharge DO BEGIN
          IF FIND('-') THEN REPEAT
            Updated := FALSE;
            IF (PerformUpdateItemCharges = PerformUpdateItemCharges::"VAT Prod. Posting Group") OR
               (PerformUpdateItemCharges = PerformUpdateItemCharges::Both) THEN
              IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN BEGIN
                ItemCharge2.GET("No.");
                ItemCharge2.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
                Updated := TRUE;
              END;
            IF (PerformUpdateItemCharges = PerformUpdateItemCharges::"Gen. Prod. Posting Group") OR
               (PerformUpdateItemCharges = PerformUpdateItemCharges::Both) THEN
              IF GenProdPostingGroupConv.GET(ItemCharge."Gen. Prod. Posting Group") THEN BEGIN
                IF Updated = FALSE THEN
                  ItemCharge2.GET("No.");
                ItemCharge2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
                Updated := TRUE;
              END;
            IF Updated = TRUE THEN
              ItemCharge2.MODIFY;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateResources@1100013();
    VAR
      Resource@1100000 : Record 156;
      Resource2@1100001 : Record 156;
      VATProdPostingGroupConv@1100002 : Record 10741;
      GenProdPostingGroupConv@1100003 : Record 10742;
      updated@1100004 : Boolean;
    BEGIN
      // updating Resources (156)
      Step := 6;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100115);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        Resource.COPYFILTERS(GetResourceFilters);
        WITH Resource DO BEGIN
          IF FIND('-') THEN REPEAT
            updated := FALSE;
            IF (PerformUpdateResources = PerformUpdateResources::"VAT Prod. Posting Group") OR
               (PerformUpdateResources = PerformUpdateResources::Both) THEN
              IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN BEGIN
                Resource2.GET("No.");
                Resource2.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
                updated := TRUE;
              END;
            IF (PerformUpdateResources = PerformUpdateResources::"Gen. Prod. Posting Group") OR
               (PerformUpdateResources = PerformUpdateResources::Both) THEN
              IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN BEGIN
                IF updated = FALSE THEN
                  Resource2.GET("No.");
                Resource2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
                updated := TRUE;
              END;
            IF updated = TRUE THEN
              Resource2.MODIFY;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE UpdateGenJournalLine@1100014();
    VAR
      GenJournalTemplate@1100000 : Record 80;
      GenJournalBatch@1100001 : Record 232;
      GenJournalLine@1100002 : Record 81;
      GenJournalLine2@1100003 : Record 81;
      VATProdPostingGroupConv@1100004 : Record 10741;
    BEGIN
      // updating Gen. Journal Lines (81)
      Step := 7;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100220);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        IF GenJournalTemplate.FIND('-') THEN REPEAT
          GenJournalBatch.RESET;
          GenJournalBatch.SETRANGE("Journal Template Name",GenJournalTemplate.Name);
          IF GenJournalBatch.FIND('-') THEN REPEAT
            WITH GenJournalLine DO BEGIN
              RESET;
              SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
              SETRANGE("Journal Batch Name",GenJournalBatch.Name);
              SETFILTER("Document Type",'<>%1',GenJournalLine."Document Type"::"Credit Memo");
              IF FIND('-') THEN REPEAT
                IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN BEGIN
                  GenJournalLine2.GET("Journal Template Name","Journal Batch Name","Line No.");
                  GenJournalLine2.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
                  GenJournalLine2.MODIFY;
                END;
              UNTIL NEXT = 0;
            END;
          UNTIL GenJournalBatch.NEXT = 0;
        UNTIL GenJournalTemplate.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateGenJournalAllocation@1100015();
    VAR
      GenJournalTemplate@1100000 : Record 80;
      GenJournalBatch@1100001 : Record 232;
      GenJournalAllocation@1100002 : Record 221;
      GenJournalAllocation2@1100003 : Record 221;
      VATProdPostingGroupConv@1100004 : Record 10741;
    BEGIN
      // updating Gen. Jnl. Allocation (221)
      Step := 8;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100221);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        IF GenJournalTemplate.FIND('-') THEN REPEAT
          GenJournalBatch.RESET;
          GenJournalBatch.SETRANGE("Journal Template Name",GenJournalTemplate.Name);
          IF GenJournalBatch.FIND('-') THEN REPEAT
            WITH GenJournalAllocation DO BEGIN
              RESET;
              SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
              SETRANGE("Journal Batch Name",GenJournalBatch.Name);
              IF FIND('-') THEN REPEAT
                IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN BEGIN
                  GenJournalAllocation2.GET("Journal Template Name","Journal Batch Name","Journal Line No.","Line No.");
                  GenJournalAllocation2.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
                  GenJournalAllocation2.MODIFY;
                END;
              UNTIL NEXT = 0;
            END;
          UNTIL GenJournalBatch.NEXT = 0;
        UNTIL GenJournalTemplate.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateStdGenJournalLine@1100016();
    VAR
      GenJournalTemplate@1100000 : Record 80;
      StandardGeneralJournal@1100001 : Record 750;
      StandardGeneralJournalLine@1100002 : Record 751;
      StandardGeneralJournalLine2@1100003 : Record 751;
      VATProdPostingGroupConv@1100004 : Record 10741;
    BEGIN
      // updating Standard General Journal Line (751)
      Step := 9;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100222);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        IF GenJournalTemplate.FIND('-') THEN REPEAT
          StandardGeneralJournal.RESET;
          StandardGeneralJournal.SETRANGE("Journal Template Name",GenJournalTemplate.Name);
          IF StandardGeneralJournal.FIND('-') THEN REPEAT
            WITH StandardGeneralJournalLine DO BEGIN
              RESET;
              SETRANGE("Journal Template Name",StandardGeneralJournal."Journal Template Name");
              SETRANGE("Standard Journal Code",StandardGeneralJournal.Code);
              SETFILTER("Document Type",'<>%1',StandardGeneralJournalLine."Document Type"::"Credit Memo");
              IF FIND('-') THEN REPEAT
                IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN BEGIN
                  StandardGeneralJournalLine2.GET("Journal Template Name","Standard Journal Code","Line No.");
                  StandardGeneralJournalLine2.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
                  StandardGeneralJournalLine2.MODIFY;
                END;
              UNTIL NEXT = 0;
            END;
          UNTIL StandardGeneralJournal.NEXT = 0;
        UNTIL GenJournalTemplate.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateResJournalLine@1100017();
    VAR
      ResJournalTemplate@1100000 : Record 206;
      ResJournalBatch@1100001 : Record 236;
      ResJournalLine@1100002 : Record 207;
      ResJournalLine2@1100003 : Record 207;
      GenProdPostingGroupConv@1100004 : Record 10742;
    BEGIN
      // updating Res. Journal Lines (207)
      Step := 10;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100223);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        IF ResJournalTemplate.FIND('-') THEN REPEAT
          ResJournalBatch.RESET;
          ResJournalBatch.SETRANGE("Journal Template Name",ResJournalTemplate.Name);
          IF ResJournalBatch.FIND('-') THEN REPEAT
            WITH ResJournalLine DO BEGIN
              RESET;
              SETRANGE("Journal Template Name",ResJournalBatch."Journal Template Name");
              SETRANGE("Journal Batch Name",ResJournalBatch.Name);
              IF FIND('-') THEN REPEAT
                IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN BEGIN
                  ResJournalLine2.GET("Journal Template Name","Journal Batch Name","Line No.");
                  ResJournalLine2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
                  ResJournalLine2.MODIFY;
                END;
              UNTIL NEXT = 0;
            END;
          UNTIL ResJournalBatch.NEXT = 0;
        UNTIL ResJournalTemplate.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateJobJournalLine@1100018();
    VAR
      JobJournalTemplate@1100000 : Record 209;
      JobJournalBatch@1100001 : Record 237;
      JobJournalLine@1100002 : Record 210;
      JobJournalLine2@1100003 : Record 210;
      GenProdPostingGroupConv@1100004 : Record 10742;
    BEGIN
      // updating Job Journal Line (210)
      Step := 11;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100224);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        IF JobJournalTemplate.FIND('-') THEN REPEAT
          JobJournalBatch.RESET;
          JobJournalBatch.SETRANGE("Journal Template Name",JobJournalTemplate.Name);
          IF JobJournalBatch.FIND('-') THEN REPEAT
            WITH JobJournalLine DO BEGIN
              RESET;
              SETRANGE("Journal Template Name",JobJournalBatch."Journal Template Name");
              SETRANGE("Journal Batch Name",JobJournalBatch.Name);
              IF FIND('-') THEN REPEAT
                IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN BEGIN
                  JobJournalLine2.GET("Journal Template Name","Journal Batch Name","Line No.");
                  JobJournalLine2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
                  JobJournalLine2.MODIFY;
                END;
              UNTIL NEXT = 0;
            END;
          UNTIL JobJournalBatch.NEXT = 0;
        UNTIL JobJournalTemplate.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateRequisitionLine@1100019();
    VAR
      ReqWkshTemplate@1100000 : Record 244;
      RequisitionWkshName@1100001 : Record 245;
      RequisitionLine@1100002 : Record 246;
      RequisitionLine2@1100003 : Record 246;
      GenProdPostingGroupConv@1100004 : Record 10742;
    BEGIN
      // updating Requisition Line (246)
      Step := 12;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100225);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        IF ReqWkshTemplate.FIND('-') THEN REPEAT
          RequisitionWkshName.RESET;
          RequisitionWkshName.SETRANGE("Worksheet Template Name",ReqWkshTemplate.Name);
          IF RequisitionWkshName.FIND('-') THEN REPEAT
            WITH RequisitionLine DO BEGIN
              RESET;
              SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
              SETRANGE("Journal Batch Name",RequisitionWkshName.Name);
              IF FIND('-') THEN REPEAT
                IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN BEGIN
                  RequisitionLine2.GET("Worksheet Template Name","Journal Batch Name","Line No.");
                  RequisitionLine2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
                  RequisitionLine2.MODIFY;
                END;
              UNTIL NEXT = 0;
            END;
          UNTIL RequisitionWkshName.NEXT = 0;
        UNTIL ReqWkshTemplate.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateStandardItemJournalLine@1100020();
    VAR
      ItemJournalTemplate@1100000 : Record 82;
      StandardItemJournal@1100001 : Record 752;
      StandardItemJournalLine@1100002 : Record 753;
      StandardItemJournalLine2@1100003 : Record 753;
      GenProdPostingGroupConv@1100004 : Record 10742;
    BEGIN
      // updating Standard Item Journal Line (753)
      Step := 13;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100226);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        IF ItemJournalTemplate.FIND('-') THEN REPEAT
          StandardItemJournal.RESET;
          StandardItemJournal.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
          IF StandardItemJournal.FIND('-') THEN REPEAT
            WITH StandardItemJournalLine DO BEGIN
              RESET;
              SETRANGE("Journal Template Name",StandardItemJournal."Journal Template Name");
              SETRANGE("Standard Journal Code",StandardItemJournal.Code);
              IF FIND('-') THEN REPEAT
                IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN BEGIN
                  StandardItemJournalLine2.GET("Journal Template Name","Standard Journal Code","Line No.");
                  StandardItemJournalLine2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
                  StandardItemJournalLine2.MODIFY;
                END;
              UNTIL NEXT = 0;
            END;
          UNTIL StandardItemJournal.NEXT = 0;
        UNTIL ItemJournalTemplate.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateServiceInvoiceLine@1100021();
    VAR
      ServiceInvoiceLine@1100000 : Record 5902;
      ServiceInvoiceLine2@1100001 : Record 5902;
      VATProdPostingGroupConv@1100002 : Record 10741;
      GenProdPostingGroupConv@1100003 : Record 10742;
      updated@1100004 : Boolean;
    BEGIN
      // updating Service Invoice Line (5902)
      Step := 14;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100227);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        WITH ServiceInvoiceLine DO
          IF FIND('-') THEN REPEAT
            updated := FALSE;
            IF (PerformUpdateServiceInvLine = PerformUpdateServiceInvLine::"VAT Prod. Posting Group") OR
               (PerformUpdateServiceInvLine = PerformUpdateServiceInvLine::Both) THEN
               IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN BEGIN
                ServiceInvoiceLine2.GET("Document Type","Document No.","Line No.");
               ServiceInvoiceLine2.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
                updated := TRUE;
              END;
            IF (PerformUpdateServiceInvLine = PerformUpdateServiceInvLine::"Gen. Prod. Posting Group") OR
               (PerformUpdateServiceInvLine = PerformUpdateServiceInvLine::Both) THEN
              IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN BEGIN
                IF updated = FALSE THEN
                  ServiceInvoiceLine2.GET("Document Type","Document No.","Line No.");
                ServiceInvoiceLine2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
                updated := TRUE;
              END;
            IF updated = TRUE THEN
              ServiceInvoiceLine2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE UpdateServicePriceAdjDetail@1100022();
    VAR
      ServicePriceAdjustmentGroup@1100000 : Record 6082;
      ServPriceAdjustmentDetail@1100001 : Record 6083;
      ServPriceAdjustmentDetail2@1100002 : Record 6083;
      GenProdPostingGroupConv@1100003 : Record 10742;
    BEGIN
      // updating Serv. Price Adjustment Detail (6083)
      Step := 15;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100228);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        ServicePriceAdjustmentGroup.RESET;
        IF ServicePriceAdjustmentGroup.FIND('-') THEN REPEAT
          WITH ServPriceAdjustmentDetail DO BEGIN
            RESET;
            SETRANGE("Serv. Price Adjmt. Gr. Code",ServicePriceAdjustmentGroup.Code);
            IF FIND('-') THEN REPEAT
              IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN BEGIN
                ServPriceAdjustmentDetail2.GET("Serv. Price Adjmt. Gr. Code",
                                               Type,
                                               "No.",
                                               "Work Type",
                                               "Gen. Prod. Posting Group");
                ServPriceAdjustmentDetail2.RENAME("Serv. Price Adjmt. Gr. Code",
                                                  Type,
                                                  "No.",
                                                  "Work Type",
                                                  GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
                ServPriceAdjustmentDetail2.MODIFY;
              END;
            UNTIL NEXT = 0;
          END;
        UNTIL ServicePriceAdjustmentGroup.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateSalesDocuments@1100023();
    VAR
      SalesHeader@1100000 : Record 36;
      SalesHeader2@1100001 : Record 36;
      SalesLine@1100002 : Record 37;
      VATProdPostingGroupConv@1100003 : Record 10741;
      GenProdPostingGroupConv@1100004 : Record 10742;
      NewVATProdPostingGroup@1100005 : Code[10];
      NewGenProdPostingGroup@1100006 : Code[10];
      SalesHeaderStatus@1100007 : Integer;
      SalesHeaderStatusChanged@1100008 : Boolean;
    BEGIN
      // updating Sales Documents (36)
      Step := 16;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        SalesHeader.RESET;
        SalesHeader.SETFILTER("Document Type",'<>%1',SalesHeader."Document Type"::"Credit Memo");
        IF SalesHeader.FIND('-') THEN REPEAT
          IF CanConvertSalesDocument(SalesHeader,0) THEN BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesLine.SETRANGE("Document No.",SalesHeader."No.");
            IF SalesLine.FIND('-') THEN REPEAT

              IF (SalesLine."Outstanding Quantity" <> 0) OR (SalesLine.Quantity = 0) THEN BEGIN
                ProgressWindow.UPDATE(2,Step);
                ProgressWindow.UPDATE(3,Text1100116);
                ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
                NewGenProdPostingGroup := '';
                NewVATProdPostingGroup := '';
                IF SalesLine.Type <> SalesLine.Type::"G/L Account" THEN
                  IF (PerformUpdateSalesDocs = PerformUpdateSalesDocs::"Gen. Prod. Posting Group") OR
                     (PerformUpdateSalesDocs = PerformUpdateSalesDocs::Both) THEN
                    IF GenProdPostingGroupConv.GET(SalesLine."Gen. Prod. Posting Group") = TRUE THEN
                      NewGenProdPostingGroup := GenProdPostingGroupConv."To-Gen. Prod. Posting Group";
                IF (PerformUpdateSalesDocs =  PerformUpdateSalesDocs::"VAT Prod. Posting Group") OR
                   (PerformUpdateSalesDocs =  PerformUpdateSalesDocs::Both) THEN
                  IF VATProdPostingGroupConv.GET(SalesLine."VAT Prod. Posting Group") = TRUE THEN
                   NewVATProdPostingGroup := VATProdPostingGroupConv."To-VAT Prod. Posting Group";

                IF (NewVATProdPostingGroup <> '') OR (NewGenProdPostingGroup <> '') THEN BEGIN
                  // setting Status to 'open'
                  SalesHeaderStatusChanged := FALSE;
                  IF SalesHeader.Status <> SalesHeader.Status::Open THEN BEGIN
                    SalesHeaderStatus := SalesHeader.Status;
                    SalesHeader2.GET(SalesHeader."Document Type",SalesHeader."No.");
                    SalesHeader2.Status := SalesHeader2.Status::Open;
                    SalesHeader2.MODIFY;
                    SalesHeaderStatusChanged := TRUE;
                  END;
                  IF SalesLine.Quantity = SalesLine."Outstanding Quantity" THEN
                    UpdateExistingSalesLine(SalesLine,NewVATProdPostingGroup,NewGenProdPostingGroup)
                  ELSE
                    AddNewSalesLine(SalesLine,NewVATProdPostingGroup,NewGenProdPostingGroup);
                  // resetting Status
                  IF SalesHeaderStatusChanged THEN BEGIN
                    SalesHeader2.Status := SalesHeaderStatus;
                    SalesHeader2.MODIFY;
                  END;
                END;
              END;

            UNTIL SalesLine.NEXT = 0;
          END;
        UNTIL SalesHeader.NEXT = 0;
      END;
    END;

    PROCEDURE CanConvertSalesDocument@1100024(SalesHeader@1100000 : Record 36;StepToCheck@1100001 : Integer) : Boolean;
    VAR
      SalesLine@1100002 : Record 37;
      VATProdPostingGroupConv@1100003 : Record 10741;
      GenProdPostingGroupConv@1100004 : Record 10742;
      GenProdPostingGroup@1100005 : Record 251;
      VATPostingSetup@1100006 : Record 325;
      ExitValue@1100007 : Boolean;
      NextLineNo@1100008 : Integer;
    BEGIN
      ExitValue := TRUE;

      // Status on Header
      IF StepToCheck IN [0,1] THEN
        IF (SalesHeader.Status <> SalesHeader.Status::Open) AND (IgnoreStatusOnSalesHeader = FALSE) THEN
          WITH SalesLine DO BEGIN
            RESET;
            SETRANGE("Document Type",SalesHeader."Document Type");
            SETRANGE("Document No.",SalesHeader."No.");
            IF FIND('-') THEN REPEAT
              IF "Outstanding Quantity" > 0 THEN BEGIN
                IF UpdateVATProdPostingGroup = TRUE THEN
                  IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                    ExitValue := FALSE;
                IF ExitValue = TRUE THEN
                  IF UpdateGenProdPostingGroup = TRUE THEN
                    IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                      ExitValue := FALSE;
              END;
            UNTIL (NEXT = 0) OR (ExitValue = FALSE);
          END;

      // available space for a new line
      IF StepToCheck IN [0,2] THEN
        IF ExitValue = TRUE THEN
          IF ((SalesHeader.Status <> SalesHeader.Status::Open) AND (IgnoreStatusOnSalesHeader = TRUE)) OR
             (SalesHeader.Status = SalesHeader.Status::Open) THEN
            WITH SalesLine DO BEGIN
              RESET;
              SETRANGE("Document Type",SalesHeader."Document Type");
              SETRANGE("Document No.",SalesHeader."No.");
              IF FIND('-') THEN REPEAT
                IF ("Outstanding Quantity" > 0) AND ("Quantity Shipped" > 0) THEN BEGIN
                  IF UpdateVATProdPostingGroup = TRUE THEN
                    IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                      IF GetNextSalesLineNo(SalesLine,NextLineNo) = FALSE THEN
                        ExitValue := FALSE;
                  IF ExitValue = TRUE THEN
                    IF UpdateGenProdPostingGroup = TRUE THEN
                      IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                        IF GetNextSalesLineNo(SalesLine,NextLineNo) = FALSE THEN
                          ExitValue := FALSE;
                END;
              UNTIL (NEXT = 0) OR (ExitValue = FALSE);
            END;

      // sales line used in warehouse
      IF StepToCheck IN [0,3] THEN
        IF ExitValue = TRUE THEN
          IF ((SalesHeader.Status <> SalesHeader.Status::Open) AND (IgnoreStatusOnSalesHeader = TRUE)) OR
             (SalesHeader.Status = SalesHeader.Status::Open) THEN
            WITH SalesLine DO BEGIN
              RESET;
              SETRANGE("Document Type",SalesHeader."Document Type");
              SETRANGE("Document No.",SalesHeader."No.");
              IF FIND('-') THEN REPEAT
                IF "Outstanding Quantity" > 0 THEN BEGIN
                  IF UpdateVATProdPostingGroup = TRUE THEN
                    IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                      IF SalesLineInWarehouse(SalesLine) = TRUE THEN
                        ExitValue := FALSE;
                  IF ExitValue = TRUE THEN
                    IF UpdateGenProdPostingGroup = TRUE THEN
                      IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                        IF SalesLineInWarehouse(SalesLine) = TRUE THEN
                          ExitValue := FALSE;
                END;
              UNTIL (NEXT = 0) OR (ExitValue = FALSE);
            END;

      // combination of VAT Bus. Posting Group and Def. VAT Prod. Posting Group in VAT Posting Setup
      IF StepToCheck IN [0,4] THEN
        IF ExitValue = TRUE THEN
          IF ((SalesHeader.Status <> SalesHeader.Status::Open) AND (IgnoreStatusOnSalesHeader = TRUE)) OR
             (SalesHeader.Status = SalesHeader.Status::Open) THEN
            WITH SalesLine DO BEGIN
              RESET;
              SETRANGE("Document Type",SalesHeader."Document Type");
              SETRANGE("Document No.",SalesHeader."No.");
              IF FIND('-') THEN REPEAT
                IF "Outstanding Quantity" > 0 THEN
                  IF UpdateGenProdPostingGroup = TRUE THEN
                    IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                      IF GenProdPostingGroup.GET(GenProdPostingGroupConv."To-Gen. Prod. Posting Group") THEN
                        IF GenProdPostingGroup."Auto Insert Default" = TRUE THEN
                          IF VATPostingSetup.GET("VAT Bus. Posting Group",
                                                 GenProdPostingGroup."Def. VAT Prod. Posting Group") = FALSE THEN
                            ExitValue := FALSE;
              UNTIL (NEXT = 0) OR (ExitValue = FALSE);
            END;

      // combination of new VAT Prod. Posting Group and VAT Bus. Posting Group. in VAT Posting Setup
      IF StepToCheck IN [0,5] THEN
        IF ExitValue = TRUE THEN
          IF ((SalesHeader.Status <> SalesHeader.Status::Open) AND (IgnoreStatusOnSalesHeader = TRUE)) OR
             (SalesHeader.Status = SalesHeader.Status::Open) THEN
            WITH SalesLine DO BEGIN
              RESET;
              SETRANGE("Document Type",SalesHeader."Document Type");
              SETRANGE("Document No.",SalesHeader."No.");
              IF FIND('-') THEN REPEAT
                IF "Outstanding Quantity" > 0 THEN
                  IF UpdateVATProdPostingGroup = TRUE THEN
                    IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                      IF VATPostingSetup.GET("VAT Bus. Posting Group",
                                             VATProdPostingGroupConv."To-VAT Prod. Posting Group") = FALSE THEN
                        ExitValue := FALSE;
            UNTIL (NEXT = 0) OR (ExitValue = FALSE);
          END;

      // Drop Shipment or Special Order
      IF StepToCheck IN [0,6] THEN
        IF ExitValue = TRUE THEN
          WITH SalesLine DO BEGIN
            RESET;
            SETRANGE("Document Type",SalesHeader."Document Type");
            SETRANGE("Document No.",SalesHeader."No.");
            IF FIND('-') THEN REPEAT
              IF "Outstanding Quantity" > 0 THEN BEGIN
                IF UpdateVATProdPostingGroup = TRUE THEN
                  IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                    IF (("Drop Shipment" = TRUE) AND ("Purchase Order No." <> '')) OR
                       (("Special Order" = TRUE) AND ("Special Order Purchase No." <> '')) THEN
                         ExitValue := FALSE;
                IF ExitValue = TRUE THEN
                  IF UpdateGenProdPostingGroup = TRUE THEN
                    IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                      IF (("Drop Shipment" = TRUE) AND ("Purchase Order No." <> '')) OR
                         (("Special Order" = TRUE) AND ("Special Order Purchase No." <> '')) THEN
                           ExitValue := FALSE;
              END;
            UNTIL (NEXT = 0) OR (ExitValue = FALSE);
          END;

      EXIT(ExitValue);
    END;

    PROCEDURE UpdateExistingSalesLine@1100025(SalesLine@1100000 : Record 37;VATProdPostingGroup@1100001 : Code[10];GenProdPostingGroup@1100002 : Code[10]);
    VAR
      OldSalesLine@1100003 : Record 37;
    BEGIN
      // updating Sales Line
      OldSalesLine := SalesLine;

      IF GenProdPostingGroup <> '' THEN
        SalesLine.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
      IF VATProdPostingGroup <> '' THEN
        SalesLine.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      SalesLine.VALIDATE("Unit Price",OldSalesLine."Unit Price");
      SalesLine.MODIFY;
    END;

    PROCEDURE AddNewSalesLine@1100026(SalesLine@1100000 : Record 37;VATProdPostingGroup@1100001 : Code[10];GenProdPostingGroup@1100002 : Code[10]);
    VAR
      NewSalesLine@1100003 : Record 37;
      OldSalesLine@1100004 : Record 37;
      NewDocumentDimension@1100005 : Record 357;
      OldDocumentDimension@1100006 : Record 357;
      OldReservationEntry@1100007 : Record 337;
      NewReservationEntry@1100008 : Record 337;
      OldItemChargeAssignmentSales@1100009 : Record 5809;
      NewItemChargeAssignmentSales@1100010 : Record 5809;
      GLSetup@1100011 : Record 98;
      Currency@1100012 : Record 4;
      NewLineNo@1100013 : Integer;
      QtyRemainder@1100014 : Decimal;
      AmountRemainder@1100015 : Decimal;
      RoundingPrecision@1100016 : Decimal;
      QtyMaxAssignableOld@1100017 : Decimal;
      QtyToAssignOld@1100018 : Decimal;
      QtyToAssignNew@1100019 : Decimal;
      TempSalesLine@1100020 : Record 37;
      TempSalesHeader@1100021 : Record 36;
      TempSalesLine2@1100022 : Record 37;
      TempSalesLine3@1100023 : Record 37;
    BEGIN
      // creating new Sales Line (37)
      IF GetNextSalesLineNo(SalesLine,NewLineNo) THEN BEGIN
        NewSalesLine.INIT;
        NewSalesLine := SalesLine;
        NewSalesLine."Line No." := NewLineNo;
        NewSalesLine."Quantity Shipped" := 0;
        NewSalesLine."Qty. Shipped (Base)" := 0;
        NewSalesLine."Return Qty. Received" := 0;
        NewSalesLine."Return Qty. Received (Base)" := 0;
        NewSalesLine."Quantity Invoiced" := 0;
        NewSalesLine."Qty. Invoiced (Base)" := 0;
        NewSalesLine."Reserved Quantity" := 0;
        NewSalesLine."Reserved Qty. (Base)" := 0;
        NewSalesLine."Qty. to Ship" := 0;
        NewSalesLine."Qty. to Ship (Base)" := 0;
        NewSalesLine."Return Qty. to Receive" := 0;
        NewSalesLine."Return Qty. to Receive (Base)" := 0;
        NewSalesLine."Qty. to Invoice" := 0;
        NewSalesLine."Qty. to Invoice (Base)" := 0;
        NewSalesLine."Qty. Shipped Not Invoiced" := 0;
        NewSalesLine."Return Qty. Rcd. Not Invd." := 0;
        NewSalesLine."Shipped Not Invoiced" := 0;
        NewSalesLine."Return Rcd. Not Invd." := 0;
        NewSalesLine."Qty. Shipped Not Invd. (Base)" := 0;
        NewSalesLine."Ret. Qty. Rcd. Not Invd.(Base)" := 0;
        NewSalesLine."Shipped Not Invoiced (LCY)" := 0;
        NewSalesLine."Return Rcd. Not Invd. (LCY)" := 0;
        IF GenProdPostingGroup <> '' THEN
          NewSalesLine.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
        IF VATProdPostingGroup <> '' THEN
          NewSalesLine.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
        NewSalesLine.VALIDATE(Quantity,SalesLine."Outstanding Quantity");
        NewSalesLine.VALIDATE("Qty. to Ship",SalesLine."Qty. to Ship");
        NewSalesLine.VALIDATE("Return Qty. to Receive",SalesLine."Return Qty. to Receive");
        CASE SalesLine."Document Type" OF
          SalesLine."Document Type"::"Return Order": BEGIN
            IF SalesLine."Qty. to Invoice" > (SalesLine."Return Qty. Received" - SalesLine."Quantity Invoiced") THEN
              NewSalesLine.VALIDATE("Qty. to Invoice",SalesLine."Qty. to Invoice" -
                                                      (SalesLine."Return Qty. Received" - SalesLine."Quantity Invoiced"))
            ELSE
              NewSalesLine.VALIDATE("Qty. to Invoice",0);
          END ELSE BEGIN
            IF SalesLine."Qty. to Invoice" > (SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced") THEN
              NewSalesLine.VALIDATE("Qty. to Invoice",SalesLine."Qty. to Invoice" -
                                                      (SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced"))
            ELSE
              NewSalesLine.VALIDATE("Qty. to Invoice",0);
          END;
        END;

        NewSalesLine.VALIDATE("Unit Price",SalesLine."Unit Price");
        NewSalesLine.VALIDATE("Line Discount %",SalesLine."Line Discount %");
        NewSalesLine.INSERT;
        IF SalesLine."Document Type" = NewSalesLine."Document Type"::"Blanket Order" THEN BEGIN
          TempSalesLine.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
          TempSalesLine.SETRANGE("Blanket Order No.",NewSalesLine."Document No.");
          TempSalesLine.SETFILTER("Blanket Order Line No.",'=%1',SalesLine."Line No.");
          TempSalesLine.SETRANGE(Type,NewSalesLine.Type);
          TempSalesLine.SETRANGE("No.",NewSalesLine."No.");
          CLEAR(TempSalesHeader);
          IF TempSalesLine.FIND('-') THEN REPEAT
            IF (TempSalesHeader."Document Type" <> TempSalesLine."Document Type") OR
               (TempSalesHeader."No." <> TempSalesLine."Document No.") THEN BEGIN
              TempSalesHeader.GET(TempSalesLine."Document Type",TempSalesLine."Document No.");
              TempSalesLine2.RESET;
              TempSalesLine2.SETRANGE("Document Type",TempSalesHeader."Document Type");
              TempSalesLine2.SETRANGE("Document No.",TempSalesHeader."No.");
              TempSalesLine2.SETRANGE("Blanket Order No.",TempSalesLine."Blanket Order No.");
              TempSalesLine2.SETRANGE("Blanket Order Line No.",TempSalesLine."Blanket Order Line No.");
              IF TempSalesLine2.FIND('+') THEN BEGIN
                TempSalesLine3.GET(TempSalesLine2."Document Type",TempSalesLine2."Document No.",TempSalesLine2."Line No.");
                TempSalesLine3."Blanket Order Line No." := NewSalesLine."Line No.";
                TempSalesLine3.MODIFY;
              END;
            END;
          UNTIL TempSalesLine.NEXT = 0;
        END;

      END ELSE
        ERROR(Text1100097);

      // copying Document Dimensions (357)
      IF SkipConvert[Step] = FALSE THEN BEGIN
        OldDocumentDimension.RESET;
        OldDocumentDimension.SETRANGE("Table ID",DATABASE::"Sales Line");
        OldDocumentDimension.SETRANGE("Document Type",SalesLine."Document Type");
        OldDocumentDimension.SETRANGE("Document No.",SalesLine."Document No.");
        OldDocumentDimension.SETRANGE("Line No.",SalesLine."Line No.");
        IF OldDocumentDimension.FIND('-') THEN REPEAT
          ProgressWindow.UPDATE(3,Text1100117);
          NewDocumentDimension.INIT;
          NewDocumentDimension.COPY(OldDocumentDimension);
          NewDocumentDimension."Line No." := NewLineNo;
          NewDocumentDimension.INSERT;
        UNTIL OldDocumentDimension.NEXT = 0;
      END;

      // updating Reservation Entries (337)
      IF SkipConvert[Step] = FALSE THEN BEGIN
        SalesLine.CALCFIELDS("Reserved Quantity");
        IF SalesLine."Reserved Quantity" <> 0 THEN BEGIN
          OldReservationEntry.RESET;
          OldReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
          OldReservationEntry.SETRANGE("Source ID",SalesLine."Document No.");
          OldReservationEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
          OldReservationEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
          OldReservationEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
          OldReservationEntry.SETRANGE("Reservation Status",OldReservationEntry."Reservation Status"::Reservation);
          IF OldReservationEntry.FIND('-') THEN REPEAT
            ProgressWindow.UPDATE(3,Text1100118);
            NewReservationEntry := OldReservationEntry;
            NewReservationEntry."Source Ref. No." := NewLineNo;
            NewReservationEntry.MODIFY;
          UNTIL OldReservationEntry.NEXT = 0;
        END;
      END;

      // updating Item Tracking Lines (337)
      IF SkipConvert[Step] = FALSE THEN BEGIN
        OldReservationEntry.RESET;
        OldReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        OldReservationEntry.SETRANGE("Source ID",SalesLine."Document No.");
        OldReservationEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
        OldReservationEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        OldReservationEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
        OldReservationEntry.SETRANGE("Reservation Status",OldReservationEntry."Reservation Status"::Surplus);
        IF OldReservationEntry.FIND('-') THEN REPEAT
          ProgressWindow.UPDATE(3,Text1100119);
          NewReservationEntry := OldReservationEntry;
          NewReservationEntry."Source Ref. No." := NewLineNo;
          NewReservationEntry.MODIFY;
        UNTIL OldReservationEntry.NEXT = 0;
      END;

      // updating Item Charge Assignment (Sales) (5809)
      IF SkipConvert[Step] = FALSE THEN BEGIN
        SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
        IF (SalesHeader."Currency Code" <> '') THEN BEGIN
          Currency.GET(SalesHeader."Currency Code");
          RoundingPrecision := Currency."Amount Rounding Precision";
        END ELSE BEGIN
          GLSetup.GET;
          RoundingPrecision := GLSetup."Amount Rounding Precision";
        END;
        CASE SalesLine.Type OF
          SalesLine.Type::Item : BEGIN
            OldItemChargeAssignmentSales.RESET;
            OldItemChargeAssignmentSales.SETCURRENTKEY("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
            OldItemChargeAssignmentSales.SETRANGE("Applies-to Doc. Type",SalesLine."Document Type");
            OldItemChargeAssignmentSales.SETRANGE("Applies-to Doc. No.",SalesLine."Document No.");
            OldItemChargeAssignmentSales.SETRANGE("Applies-to Doc. Line No.",SalesLine."Line No.");
            IF OldItemChargeAssignmentSales.FIND('-') THEN REPEAT
              ProgressWindow.UPDATE(3,Text1100120);
              QtyRemainder := OldItemChargeAssignmentSales."Qty. to Assign";
              AmountRemainder := OldItemChargeAssignmentSales."Amount to Assign";
              NewItemChargeAssignmentSales := OldItemChargeAssignmentSales;
              NewItemChargeAssignmentSales."Line No." := GetNextItemChrgAssSaleLineNo(OldItemChargeAssignmentSales);
              NewItemChargeAssignmentSales."Applies-to Doc. Line No." := NewLineNo;
              NewItemChargeAssignmentSales."Qty. to Assign" := ROUND(QtyRemainder /
                                                                     SalesLine.Quantity *
                                                                     SalesLine."Outstanding Quantity",
                                                                     0.00001);
              IF SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced" = 0 THEN
                NewItemChargeAssignmentSales."Qty. to Assign" := QtyRemainder;
              NewItemChargeAssignmentSales."Amount to Assign" := ROUND(NewItemChargeAssignmentSales."Qty. to Assign" *
                                                                       NewItemChargeAssignmentSales."Unit Cost",
                                                                       RoundingPrecision);
              NewItemChargeAssignmentSales.INSERT;
              QtyRemainder := QtyRemainder - NewItemChargeAssignmentSales."Qty. to Assign";
              AmountRemainder := AmountRemainder - NewItemChargeAssignmentSales."Amount to Assign";
              OldItemChargeAssignmentSales."Qty. to Assign" := QtyRemainder;
              OldItemChargeAssignmentSales."Amount to Assign" := AmountRemainder;
              OldItemChargeAssignmentSales.MODIFY;
            UNTIL OldItemChargeAssignmentSales.NEXT = 0;
          END;
          SalesLine.Type::"Charge (Item)" : BEGIN
            OldItemChargeAssignmentSales.RESET;
            OldItemChargeAssignmentSales.SETCURRENTKEY("Document Type","Document No.","Document Line No.");
            OldItemChargeAssignmentSales.SETRANGE("Document Type",SalesLine."Document Type");
            OldItemChargeAssignmentSales.SETRANGE("Document No.",SalesLine."Document No.");
            OldItemChargeAssignmentSales.SETRANGE("Document Line No.",SalesLine."Line No.");
            OldItemChargeAssignmentSales.SETFILTER("Qty. to Assign",'<>%1',0);
            IF OldItemChargeAssignmentSales.FIND('-') THEN REPEAT
              ProgressWindow.UPDATE(3,Text1100120);
              QtyRemainder := OldItemChargeAssignmentSales."Qty. to Assign";
              AmountRemainder := OldItemChargeAssignmentSales."Amount to Assign";
              QtyMaxAssignableOld := SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced";
              QtyToAssignNew := ROUND(QtyRemainder / SalesLine.Quantity * SalesLine."Outstanding Quantity",0.00001);
              QtyToAssignOld := QtyRemainder - QtyToAssignNew;
              IF QtyToAssignOld > QtyMaxAssignableOld THEN
                QtyToAssignOld := QtyMaxAssignableOld;
              QtyToAssignNew := QtyRemainder - QtyToAssignOld;
              NewItemChargeAssignmentSales := OldItemChargeAssignmentSales;
              NewItemChargeAssignmentSales."Document Line No." := NewLineNo;
              NewItemChargeAssignmentSales."Qty. to Assign" := QtyToAssignNew;
              NewItemChargeAssignmentSales."Line No." := GetNextItemChrgAssSaleLineNo(NewItemChargeAssignmentSales);
              NewItemChargeAssignmentSales."Qty. Assigned" := 0;
              NewItemChargeAssignmentSales."Qty. to Assign" := ROUND(QtyRemainder /
                                                                     SalesLine.Quantity *
                                                                     SalesLine."Outstanding Quantity",
                                                                     0.00001);
              NewItemChargeAssignmentSales."Amount to Assign" := ROUND(NewItemChargeAssignmentSales."Qty. to Assign" *
                                                                       NewItemChargeAssignmentSales."Unit Cost",
                                                                       RoundingPrecision);
              NewItemChargeAssignmentSales.INSERT;
              QtyRemainder := QtyRemainder - NewItemChargeAssignmentSales."Qty. to Assign";
              AmountRemainder := AmountRemainder - NewItemChargeAssignmentSales."Amount to Assign";
              OldItemChargeAssignmentSales."Qty. to Assign" := QtyToAssignOld;
              OldItemChargeAssignmentSales."Qty. to Assign" := QtyRemainder;
              OldItemChargeAssignmentSales."Amount to Assign" := AmountRemainder;
              OldItemChargeAssignmentSales.MODIFY;
            UNTIL OldItemChargeAssignmentSales.NEXT = 0;

          END;
        END;
      END;

      // updating old Sales Line (37)
      ProgressWindow.UPDATE(3,Text1100121);
      OldSalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      CASE SalesLine."Document Type" OF
        SalesLine."Document Type"::"Return Order":
        OldSalesLine.VALIDATE(Quantity,SalesLine."Return Qty. Received");
      ELSE
        OldSalesLine.VALIDATE(Quantity,SalesLine."Quantity Shipped");
      END;

      OldSalesLine.VALIDATE("Unit Price",SalesLine."Unit Price");
      OldSalesLine.VALIDATE("Line Discount %",SalesLine."Line Discount %");
      OldSalesLine.VALIDATE("Qty. to Ship",0);
        OldSalesLine.VALIDATE("Return Qty. to Receive",0);
        CASE SalesLine."Document Type" OF
          SalesLine."Document Type"::"Return Order": BEGIN
            IF SalesLine."Qty. to Invoice" > (SalesLine."Return Qty. Received" - SalesLine."Quantity Invoiced") THEN
              OldSalesLine.VALIDATE("Qty. to Invoice",SalesLine."Return Qty. Received" - SalesLine."Quantity Invoiced")
            ELSE
              OldSalesLine.VALIDATE("Qty. to Invoice",SalesLine."Qty. to Invoice");
          END ELSE BEGIN
            IF SalesLine."Qty. to Invoice" > (SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced") THEN
              OldSalesLine.VALIDATE("Qty. to Invoice",SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced")
            ELSE
              OldSalesLine.VALIDATE("Qty. to Invoice",SalesLine."Qty. to Invoice");
          END;
        END;

      OldSalesLine.MODIFY;
    END;

    PROCEDURE GetNextItemChrgAssSaleLineNo@1100027(ItemChargeAssignmentSales@1100000 : Record 5809) : Integer;
    VAR
      ItemChargeAssignmentSales2@1100001 : Record 5809;
      ExitValue@1100002 : Integer;
    BEGIN
      ExitValue := 10000;
      ItemChargeAssignmentSales2.RESET;
      ItemChargeAssignmentSales2.SETCURRENTKEY("Document Type","Document No.","Document Line No.");
      ItemChargeAssignmentSales2.SETRANGE("Document Type",ItemChargeAssignmentSales."Document Type");
      ItemChargeAssignmentSales2.SETRANGE("Document No.",ItemChargeAssignmentSales."Document No.");
      ItemChargeAssignmentSales2.SETRANGE("Document Line No.",ItemChargeAssignmentSales."Document Line No.");
      IF ItemChargeAssignmentSales2.FIND('+') THEN
        ExitValue := ItemChargeAssignmentSales2."Line No." + 10000;
      EXIT(ExitValue);
    END;

    PROCEDURE UpdatePurchaseDocuments@1100028();
    VAR
      PurchaseHeader@1100000 : Record 38;
      PurchaseHeader2@1100001 : Record 38;
      PurchaseLine@1100002 : Record 39;
      VATProdPostingGroupConv@1100003 : Record 10741;
      GenProdPostingGroupConv@1100004 : Record 10742;
      NewVATProdpostingGroup@1100005 : Code[10];
      NewGenProdPostingGroup@1100006 : Code[10];
      PurchaseHeaderStatusChanged@1100007 : Boolean;
      PurchaseHeaderStatus@1100008 : Integer;
    BEGIN
      // updating Purchase Documents (38)
      Step := 17;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        PurchaseHeader.RESET;
        PurchaseHeader.SETFILTER("Document Type",'<>%1',PurchaseHeader."Document Type"::"Credit Memo");
        IF PurchaseHeader.FIND('-') THEN REPEAT
          IF CanConvertPurchaseDocument(PurchaseHeader,0) THEN BEGIN
            PurchaseLine.RESET;
            PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
            PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
            IF PurchaseLine.FIND('-') THEN REPEAT

              IF (PurchaseLine."Outstanding Quantity" <> 0) OR (PurchaseLine.Quantity = 0) THEN BEGIN
                ProgressWindow.UPDATE(2,Step);
                ProgressWindow.UPDATE(3,Text1100122);
                ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
                NewGenProdPostingGroup := '';
                NewVATProdpostingGroup := '';
                IF PurchaseLine.Type <> PurchaseLine.Type::"G/L Account" THEN
                  IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"Gen. Prod. Posting Group") OR
                     (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                    IF GenProdPostingGroupConv.GET(PurchaseLine."Gen. Prod. Posting Group") = TRUE THEN
                      NewGenProdPostingGroup := GenProdPostingGroupConv."To-Gen. Prod. Posting Group";
                IF (PerformUpdatePurchDocs = PerformUpdatePurchDocs::"VAT Prod. Posting Group") OR
                   (PerformUpdatePurchDocs = PerformUpdatePurchDocs::Both) THEN
                  IF VATProdPostingGroupConv.GET(PurchaseLine."VAT Prod. Posting Group") = TRUE THEN
                    NewVATProdpostingGroup := VATProdPostingGroupConv."To-VAT Prod. Posting Group";

                IF (NewVATProdpostingGroup <> '') OR (NewGenProdPostingGroup <> '') THEN BEGIN
                  // setting Status to 'open'
                  PurchaseHeaderStatusChanged := FALSE;
                  IF PurchaseHeader.Status <> PurchaseHeader.Status::Open THEN BEGIN
                    PurchaseHeaderStatus := PurchaseHeader.Status;
                    PurchaseHeader2.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
                    PurchaseHeader2.Status := PurchaseHeader2.Status::Open;
                    PurchaseHeader2.MODIFY;
                    PurchaseHeaderStatusChanged := TRUE;
                  END;
                  IF PurchaseLine.Quantity = PurchaseLine."Outstanding Quantity" THEN
                    UpdateExistingPurchaseLine(PurchaseLine,NewVATProdpostingGroup,NewGenProdPostingGroup)
                  ELSE
                    AddNewPurchaseLine(PurchaseLine,NewVATProdpostingGroup,NewGenProdPostingGroup);
                  // resetting Status
                  IF PurchaseHeaderStatusChanged THEN BEGIN
                    PurchaseHeader2.Status := PurchaseHeaderStatus;
                    PurchaseHeader2.MODIFY;
                  END;
                END;
              END;

            UNTIL PurchaseLine.NEXT = 0;
          END;
        UNTIL PurchaseHeader.NEXT = 0;
      END;
    END;

    PROCEDURE CanConvertPurchaseDocument@1100029(PurchaseHeader@1100000 : Record 38;StepToCheck@1100001 : Integer) : Boolean;
    VAR
      PurchaseLine@1100002 : Record 39;
      VATProdPostingGroupConv@1100003 : Record 10741;
      GenProdPostingGroupConv@1100004 : Record 10742;
      GenProdPostingGroup@1100005 : Record 251;
      VATPostingSetup@1100006 : Record 325;
      NextLineNo@1100007 : Integer;
      ExitValue@1100008 : Boolean;
    BEGIN
      ExitValue := TRUE;

      // Status on Header
      IF StepToCheck IN [0,1] THEN
        IF (PurchaseHeader.Status <> PurchaseHeader.Status::Open) AND (IgnoreStatusOnPurchHeader = FALSE) THEN
          WITH PurchaseLine DO BEGIN
            RESET;
            SETRANGE("Document Type",PurchaseHeader."Document Type");
            SETRANGE("Document No.",PurchaseHeader."No.");
            IF FIND('-') THEN REPEAT
              IF "Outstanding Quantity" > 0 THEN BEGIN
                IF UpdateVATProdPostingGroup = TRUE THEN
                  IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                    ExitValue := FALSE;
                IF ExitValue = TRUE THEN
                  IF UpdateGenProdPostingGroup = TRUE THEN
                    IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                      ExitValue := FALSE;
              END;
            UNTIL (NEXT = 0) OR (ExitValue = FALSE);
          END;

      // available space for a new line
      IF StepToCheck IN [0,2] THEN
        IF ExitValue = TRUE THEN
          IF ((PurchaseHeader.Status <> PurchaseHeader.Status::Open) AND (IgnoreStatusOnPurchHeader = TRUE)) OR
             (PurchaseHeader.Status = PurchaseHeader.Status::Open) THEN
            WITH PurchaseLine DO BEGIN
              RESET;
              SETRANGE("Document Type",PurchaseHeader."Document Type");
              SETRANGE("Document No.",PurchaseHeader."No.");
              IF FIND('-') THEN REPEAT
                IF ("Outstanding Quantity" > 0) AND ("Quantity Received" > 0) THEN BEGIN
                  IF UpdateVATProdPostingGroup = TRUE THEN
                    IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                      IF GetNextPurchaseLineNo(PurchaseLine,NextLineNo) = FALSE THEN
                        ExitValue := FALSE;
                  IF ExitValue = TRUE THEN
                    IF UpdateGenProdPostingGroup = TRUE THEN
                      IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                        IF GetNextPurchaseLineNo(PurchaseLine,NextLineNo) = FALSE THEN
                          ExitValue := FALSE;
                END;
              UNTIL (NEXT = 0) OR (ExitValue = FALSE);
            END;

      // purchase line used in warehouse
      IF StepToCheck IN [0,3] THEN
        IF ExitValue = TRUE THEN
          IF ((PurchaseHeader.Status <> PurchaseHeader.Status::Open) AND (IgnoreStatusOnPurchHeader = TRUE)) OR
             (PurchaseHeader.Status = PurchaseHeader.Status::Open) THEN
            WITH PurchaseLine DO BEGIN
              RESET;
              SETRANGE("Document Type",PurchaseHeader."Document Type");
              SETRANGE("Document No.",PurchaseHeader."No.");
              IF FIND('-') THEN REPEAT
                IF "Outstanding Quantity" > 0 THEN BEGIN
                  IF UpdateVATProdPostingGroup = TRUE THEN
                    IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                      IF PurchaseLineInWarehouse(PurchaseLine) = TRUE THEN
                        ExitValue := FALSE;
                  IF ExitValue = TRUE THEN
                    IF UpdateGenProdPostingGroup = TRUE THEN
                      IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                        IF PurchaseLineInWarehouse(PurchaseLine) = TRUE THEN
                          ExitValue := FALSE;
                END;
              UNTIL (NEXT = 0) OR (ExitValue = FALSE);
            END;

      // combination of VAT Bus. Posting Group and Def. VAT Prod. Posting Group in VAT Posting Setup
      IF StepToCheck IN [0,4] THEN
        IF ExitValue = TRUE THEN
          IF ((PurchaseHeader.Status <> PurchaseHeader.Status::Open) AND (IgnoreStatusOnPurchHeader = TRUE)) OR
             (PurchaseHeader.Status = PurchaseHeader.Status::Open) THEN
            WITH PurchaseLine DO BEGIN
              RESET;
              SETRANGE("Document Type",PurchaseHeader."Document Type");
              SETRANGE("Document No.",PurchaseHeader."No.");
              IF FIND('-') THEN REPEAT
                IF "Outstanding Quantity" > 0 THEN
                  IF UpdateGenProdPostingGroup = TRUE THEN
                    IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                      IF GenProdPostingGroup.GET(GenProdPostingGroupConv."To-Gen. Prod. Posting Group") THEN
                        IF GenProdPostingGroup."Auto Insert Default" = TRUE THEN
                          IF VATPostingSetup.GET("VAT Bus. Posting Group",
                                                 GenProdPostingGroup."Def. VAT Prod. Posting Group") = FALSE THEN
                            ExitValue := FALSE;
              UNTIL (NEXT = 0) OR (ExitValue = FALSE);
            END;

      // combination of new VAT Prod. Posting Group and VAT Bus. Posting Group. in VAT Posting Setup
      IF StepToCheck IN [0,5] THEN
        IF ExitValue = TRUE THEN
          IF ((PurchaseHeader.Status <> PurchaseHeader.Status::Open) AND (IgnoreStatusOnPurchHeader = TRUE)) OR
             (PurchaseHeader.Status = PurchaseHeader.Status::Open) THEN
            WITH PurchaseLine DO BEGIN
              RESET;
              SETRANGE("Document Type",PurchaseHeader."Document Type");
              SETRANGE("Document No.",PurchaseHeader."No.");
              IF FIND('-') THEN REPEAT
                IF "Outstanding Quantity" > 0 THEN
                  IF UpdateVATProdPostingGroup = TRUE THEN
                    IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                      IF VATPostingSetup.GET("VAT Bus. Posting Group",
                                             VATProdPostingGroupConv."To-VAT Prod. Posting Group") = FALSE THEN
                        ExitValue := FALSE;
            UNTIL (NEXT = 0) OR (ExitValue = FALSE);
          END;

      // Drop Shipment or Special Order
      IF StepToCheck IN [0,6] THEN
        IF ExitValue = TRUE THEN
          WITH PurchaseLine DO BEGIN
            RESET;
            SETRANGE("Document Type",PurchaseHeader."Document Type");
            SETRANGE("Document No.",PurchaseHeader."No.");
            IF FIND('-') THEN REPEAT
              IF "Outstanding Quantity" > 0 THEN BEGIN
                IF UpdateVATProdPostingGroup = TRUE THEN
                  IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
                    IF (("Drop Shipment" = TRUE) AND ("Sales Order No." <> '')) OR
                       (("Special Order" = TRUE) AND ("Special Order Sales No." <> '')) THEN
                         ExitValue := FALSE;
                IF ExitValue = TRUE THEN
                  IF UpdateGenProdPostingGroup = TRUE THEN
                    IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN
                      IF (("Drop Shipment" = TRUE) AND ("Sales Order No." <> '')) OR
                         (("Special Order" = TRUE) AND ("Special Order Sales No." <> '')) THEN
                           ExitValue := FALSE;
              END;
            UNTIL (NEXT = 0) OR (ExitValue = FALSE);
          END;

      EXIT(ExitValue);
    END;

    PROCEDURE UpdateExistingPurchaseLine@1100030(PurchaseLine@1100000 : Record 39;VATProdPostingGroup@1100001 : Code[10];GenProdPostingGroup@1100002 : Code[10]);
    VAR
      OldPurchaseLine@1100003 : Record 39;
    BEGIN
      // updating Purchase Line
      OldPurchaseLine := PurchaseLine;
      IF GenProdPostingGroup <> '' THEN
        PurchaseLine.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
      IF VATProdPostingGroup <> '' THEN
        PurchaseLine.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      PurchaseLine.VALIDATE("Direct Unit Cost",OldPurchaseLine."Direct Unit Cost");
      PurchaseLine.MODIFY;
    END;

    PROCEDURE AddNewPurchaseLine@1100031(PurchaseLine@1100000 : Record 39;VATProdPostingGroup@1100001 : Code[10];GenProdPostingGroup@1100002 : Code[10]);
    VAR
      NewPurchaseLine@1100003 : Record 39;
      OldPurchaseLine@1100004 : Record 39;
      NewDocumentDimension@1100005 : Record 357;
      OldDocumentDimension@1100006 : Record 357;
      OldReservationEntry@1100007 : Record 337;
      NewReservationEntry@1100008 : Record 337;
      OldItemChargeAssignmentPurch@1100009 : Record 5805;
      NewItemChargeAssignmentPurch@1100010 : Record 5805;
      GLSetup@1100011 : Record 98;
      Currency@1100012 : Record 4;
      NewLineNo@1100013 : Integer;
      QtyRemainder@1100014 : Decimal;
      AmountRemainder@1100015 : Decimal;
      RoundingPrecision@1100016 : Decimal;
      TempPurchaseLine@1100017 : Record 39;
      QtyMaxAssignableOld@1100018 : Decimal;
      QtyToAssignOld@1100019 : Decimal;
      QtyToAssignNew@1100020 : Decimal;
      TempPurchaseHeader@1100021 : Record 38;
      TempPurchaseLine2@1100022 : Record 39;
      TempPurchaseLine3@1100023 : Record 39;
    BEGIN
      // creating new Purchase Line  (39)
      IF GetNextPurchaseLineNo(PurchaseLine,NewLineNo) THEN BEGIN
        NewPurchaseLine.INIT;
        NewPurchaseLine := PurchaseLine;
        NewPurchaseLine."Line No." := NewLineNo;
        NewPurchaseLine."Quantity Received" := 0;
        NewPurchaseLine."Qty. Received (Base)" := 0;
        NewPurchaseLine."Return Qty. Shipped" := 0;
        NewPurchaseLine."Return Qty. Shipped (Base)" := 0;
        NewPurchaseLine."Quantity Invoiced" := 0;
        NewPurchaseLine."Qty. Invoiced (Base)" := 0;
        NewPurchaseLine."Reserved Quantity" := 0;
        NewPurchaseLine."Reserved Qty. (Base)" := 0;
        NewPurchaseLine."Qty. Rcd. Not Invoiced" := 0;
        NewPurchaseLine."Qty. Rcd. Not Invoiced (Base)" := 0;
        NewPurchaseLine."Return Qty. Shipped Not Invd." := 0;
        NewPurchaseLine."Ret. Qty. Shpd Not Invd.(Base)" := 0;
        NewPurchaseLine."Qty. to Receive" := 0;
        NewPurchaseLine."Qty. to Receive (Base)" := 0;
        NewPurchaseLine."Return Qty. to Ship" := 0;
        NewPurchaseLine."Return Qty. to Ship (Base)" := 0;
        NewPurchaseLine."Qty. to Invoice" := 0;
        NewPurchaseLine."Qty. to Invoice (Base)" := 0;
        NewPurchaseLine."Amt. Rcd. Not Invoiced" := 0;
        NewPurchaseLine."Amt. Rcd. Not Invoiced (LCY)" := 0;
        NewPurchaseLine."Return Shpd. Not Invd." := 0;
        NewPurchaseLine."Return Shpd. Not Invd. (LCY)" := 0;
        IF GenProdPostingGroup <> '' THEN
          NewPurchaseLine.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
        IF VATProdPostingGroup <> '' THEN
          NewPurchaseLine.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
        NewPurchaseLine.VALIDATE(Quantity,PurchaseLine."Outstanding Quantity");
        NewPurchaseLine.VALIDATE("Qty. to Receive",PurchaseLine."Qty. to Receive");
        NewPurchaseLine.VALIDATE("Return Qty. to Ship",PurchaseLine."Return Qty. to Ship");
        CASE PurchaseLine."Document Type" OF
          PurchaseLine."Document Type"::"Return Order" : BEGIN
            IF PurchaseLine."Qty. to Invoice" > (PurchaseLine."Return Qty. Shipped" - PurchaseLine."Quantity Invoiced") THEN
              NewPurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine."Qty. to Invoice" -
                                                         (PurchaseLine."Return Qty. Shipped" - PurchaseLine."Quantity Invoiced"))
            ELSE
              NewPurchaseLine.VALIDATE("Qty. to Invoice",0);
          END ELSE BEGIN
            IF PurchaseLine."Qty. to Invoice" > (PurchaseLine."Quantity Received" - PurchaseLine."Quantity Invoiced") THEN
              NewPurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine."Qty. to Invoice" -
                                                         (PurchaseLine."Quantity Received" - PurchaseLine."Quantity Invoiced"))
            ELSE
              NewPurchaseLine.VALIDATE("Qty. to Invoice",0);
          END;
        END;

        NewPurchaseLine.VALIDATE("Direct Unit Cost",PurchaseLine."Direct Unit Cost");
        NewPurchaseLine.VALIDATE("Line Discount %",PurchaseLine."Line Discount %");

        NewPurchaseLine.INSERT;
        IF PurchaseLine."Document Type" = NewPurchaseLine."Document Type"::"Blanket Order" THEN BEGIN
          TempPurchaseLine.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
          TempPurchaseLine.SETRANGE("Blanket Order No.",NewPurchaseLine."Document No.");
          TempPurchaseLine.SETFILTER("Blanket Order Line No.",'=%1',PurchaseLine."Line No.");
          TempPurchaseLine.SETRANGE(Type,NewPurchaseLine.Type);
          TempPurchaseLine.SETRANGE("No.",NewPurchaseLine."No.");
          CLEAR(TempPurchaseHeader);
          IF TempPurchaseLine.FIND('-') THEN REPEAT
            IF (TempPurchaseHeader."Document Type" <> TempPurchaseLine."Document Type") OR
               (TempPurchaseHeader."No." <> TempPurchaseLine."Document No.") THEN BEGIN
              TempPurchaseHeader.GET(TempPurchaseLine."Document Type",TempPurchaseLine."Document No.");
              TempPurchaseLine2.RESET;
              TempPurchaseLine2.SETRANGE("Document Type",TempPurchaseHeader."Document Type");
              TempPurchaseLine2.SETRANGE("Document No.",TempPurchaseHeader."No.");
              TempPurchaseLine2.SETRANGE("Blanket Order No.",TempPurchaseLine."Blanket Order No.");
              TempPurchaseLine2.SETRANGE("Blanket Order Line No.",TempPurchaseLine."Blanket Order Line No.");
              IF TempPurchaseLine2.FIND('+') THEN BEGIN
                TempPurchaseLine3.GET(TempPurchaseLine2."Document Type",TempPurchaseLine2."Document No.",TempPurchaseLine2."Line No.");
                TempPurchaseLine3."Blanket Order Line No." := NewPurchaseLine."Line No.";
                TempPurchaseLine3.MODIFY;
              END;
            END;
          UNTIL TempPurchaseLine.NEXT = 0;
        END;
      END ELSE
        ERROR(Text1100098);

      // copying Document Dimensions (357)
      IF SkipConvert[Step] = FALSE THEN BEGIN
        OldDocumentDimension.RESET;
        OldDocumentDimension.SETRANGE("Table ID",DATABASE::"Purchase Line");
        OldDocumentDimension.SETRANGE("Document Type",PurchaseLine."Document Type");
        OldDocumentDimension.SETRANGE("Document No.",PurchaseLine."Document No.");
        OldDocumentDimension.SETRANGE("Line No.",PurchaseLine."Line No.");
        IF OldDocumentDimension.FIND('-') THEN REPEAT
          ProgressWindow.UPDATE(3,Text1100123);
          NewDocumentDimension.INIT;
          NewDocumentDimension.COPY(OldDocumentDimension);
          NewDocumentDimension."Line No." := NewLineNo;
          NewDocumentDimension.INSERT;
        UNTIL OldDocumentDimension.NEXT = 0;
      END;

      // updating Reservation Entries (337)
      IF SkipConvert[Step] = FALSE THEN BEGIN
        PurchaseLine.CALCFIELDS("Reserved Quantity");
        IF PurchaseLine."Reserved Quantity" <> 0 THEN BEGIN
          OldReservationEntry.RESET;
          OldReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
          OldReservationEntry.SETRANGE("Source ID",PurchaseLine."Document No.");
          OldReservationEntry.SETRANGE("Source Ref. No.",PurchaseLine."Line No.");
          OldReservationEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
          OldReservationEntry.SETRANGE("Source Subtype",PurchaseLine."Document Type");
          OldReservationEntry.SETRANGE("Reservation Status",OldReservationEntry."Reservation Status"::Reservation);
          IF OldReservationEntry.FIND('-') THEN REPEAT
            ProgressWindow.UPDATE(3,Text1100124);
            NewReservationEntry := OldReservationEntry;
            NewReservationEntry."Source Ref. No." := NewLineNo;
            NewReservationEntry.MODIFY;
          UNTIL OldReservationEntry.NEXT = 0;
        END;
      END;

      // updating Item Tracking Lines (337)
      IF SkipConvert[Step] = FALSE THEN BEGIN
        OldReservationEntry.RESET;
        OldReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        OldReservationEntry.SETRANGE("Source ID",PurchaseLine."Document No.");
        OldReservationEntry.SETRANGE("Source Ref. No.",PurchaseLine."Line No.");
        OldReservationEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
        OldReservationEntry.SETRANGE("Source Subtype",PurchaseLine."Document Type");
        OldReservationEntry.SETRANGE("Reservation Status",OldReservationEntry."Reservation Status"::Surplus);
        IF OldReservationEntry.FIND('-') THEN REPEAT
          ProgressWindow.UPDATE(3,Text1100125);
          NewReservationEntry := OldReservationEntry;
          NewReservationEntry."Source Ref. No." := NewLineNo;
          NewReservationEntry.MODIFY;
        UNTIL OldReservationEntry.NEXT = 0;
      END;

      // updating Item Charge Assignment (Purch) (5805)
      IF SkipConvert[Step] = FALSE THEN BEGIN
        PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
        IF (PurchaseHeader."Currency Code" <> '') THEN BEGIN
          Currency.GET(PurchaseHeader."Currency Code");
          RoundingPrecision := Currency."Amount Rounding Precision";
        END ELSE BEGIN
          GLSetup.GET;
          RoundingPrecision := GLSetup."Amount Rounding Precision";
        END;
        CASE PurchaseLine.Type OF
          PurchaseLine.Type::Item : BEGIN
            OldItemChargeAssignmentPurch.RESET;
            OldItemChargeAssignmentPurch.SETCURRENTKEY("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
            OldItemChargeAssignmentPurch.SETRANGE("Applies-to Doc. Type",PurchaseLine."Document Type");
            OldItemChargeAssignmentPurch.SETRANGE("Applies-to Doc. No.",PurchaseLine."Document No.");
            OldItemChargeAssignmentPurch.SETRANGE("Applies-to Doc. Line No.",PurchaseLine."Line No.");
            IF OldItemChargeAssignmentPurch.FIND('-') THEN REPEAT
              ProgressWindow.UPDATE(3,Text1100126);
              QtyRemainder := OldItemChargeAssignmentPurch."Qty. to Assign";
              AmountRemainder := OldItemChargeAssignmentPurch."Amount to Assign";
              NewItemChargeAssignmentPurch := OldItemChargeAssignmentPurch;
              NewItemChargeAssignmentPurch."Line No." := GetNextItemChrgAssPurchLineNo(OldItemChargeAssignmentPurch);
              NewItemChargeAssignmentPurch."Applies-to Doc. Line No." := NewLineNo;
              NewItemChargeAssignmentPurch."Qty. to Assign" := ROUND(QtyRemainder /
                                                                     PurchaseLine.Quantity *
                                                                     PurchaseLine."Outstanding Quantity",
                                                                     0.00001);
              IF PurchaseLine."Quantity Received" - PurchaseLine."Quantity Invoiced" = 0 THEN
                NewItemChargeAssignmentPurch."Qty. to Assign" := QtyRemainder;
              NewItemChargeAssignmentPurch."Amount to Assign" := ROUND(NewItemChargeAssignmentPurch."Qty. to Assign" *
                                                                       NewItemChargeAssignmentPurch."Unit Cost",
                                                                       RoundingPrecision);
              NewItemChargeAssignmentPurch.INSERT;
              QtyRemainder := QtyRemainder - NewItemChargeAssignmentPurch."Qty. to Assign";
              AmountRemainder := AmountRemainder - NewItemChargeAssignmentPurch."Amount to Assign";
              OldItemChargeAssignmentPurch."Qty. to Assign" := QtyRemainder;
              OldItemChargeAssignmentPurch."Amount to Assign" := AmountRemainder;
              OldItemChargeAssignmentPurch.MODIFY;
            UNTIL OldItemChargeAssignmentPurch.NEXT = 0;
          END;
          PurchaseLine.Type::"Charge (Item)" : BEGIN
            OldItemChargeAssignmentPurch.RESET;
            OldItemChargeAssignmentPurch.SETCURRENTKEY("Document Type","Document No.","Document Line No.");
            OldItemChargeAssignmentPurch.SETRANGE("Document Type",PurchaseLine."Document Type");
            OldItemChargeAssignmentPurch.SETRANGE("Document No.",PurchaseLine."Document No.");
            OldItemChargeAssignmentPurch.SETRANGE("Document Line No.",PurchaseLine."Line No.");
            OldItemChargeAssignmentPurch.SETFILTER("Qty. to Assign",'<>%1',0);

            IF OldItemChargeAssignmentPurch.FIND('-') THEN REPEAT
              ProgressWindow.UPDATE(3,Text1100126);
              QtyRemainder := OldItemChargeAssignmentPurch."Qty. to Assign";
              AmountRemainder := OldItemChargeAssignmentPurch."Amount to Assign";
              QtyMaxAssignableOld := PurchaseLine."Quantity Received" - PurchaseLine."Quantity Invoiced";
              QtyToAssignNew := ROUND(QtyRemainder / PurchaseLine.Quantity * PurchaseLine."Outstanding Quantity",0.00001);
              QtyToAssignOld := QtyRemainder - QtyToAssignNew;
              IF QtyToAssignOld > QtyMaxAssignableOld THEN
                QtyToAssignOld := QtyMaxAssignableOld;
              QtyToAssignNew := QtyRemainder - QtyToAssignOld;

              NewItemChargeAssignmentPurch := OldItemChargeAssignmentPurch;
              NewItemChargeAssignmentPurch."Document Line No." := NewLineNo;
              NewItemChargeAssignmentPurch."Qty. to Assign" := QtyToAssignNew;
              NewItemChargeAssignmentPurch."Line No." := GetNextItemChrgAssPurchLineNo(NewItemChargeAssignmentPurch);
              NewItemChargeAssignmentPurch."Qty. Assigned" := 0;
              NewItemChargeAssignmentPurch."Qty. to Assign" := ROUND(QtyRemainder /
                                                                     PurchaseLine.Quantity *
                                                                     PurchaseLine."Outstanding Quantity",
                                                                     0.00001);
              NewItemChargeAssignmentPurch."Amount to Assign" := ROUND(NewItemChargeAssignmentPurch."Qty. to Assign" *
                                                                       NewItemChargeAssignmentPurch."Unit Cost",
                                                                       RoundingPrecision);
              NewItemChargeAssignmentPurch.INSERT;
              QtyRemainder := QtyRemainder - NewItemChargeAssignmentPurch."Qty. to Assign";
              AmountRemainder := AmountRemainder - NewItemChargeAssignmentPurch."Amount to Assign";
              OldItemChargeAssignmentPurch."Qty. to Assign" := QtyToAssignOld;
              OldItemChargeAssignmentPurch."Qty. to Assign" := QtyRemainder;
              OldItemChargeAssignmentPurch."Amount to Assign" := AmountRemainder;
              OldItemChargeAssignmentPurch.MODIFY;
            UNTIL OldItemChargeAssignmentPurch.NEXT = 0;
          END;
        END;

      END;

      // updating old Purchase Line (39)
      ProgressWindow.UPDATE(3,Text1100127);
      OldPurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      CASE PurchaseLine."Document Type" OF
        PurchaseLine."Document Type"::"Return Order":
          OldPurchaseLine.VALIDATE(Quantity,PurchaseLine."Return Qty. Shipped");
      ELSE
          OldPurchaseLine.VALIDATE(Quantity,PurchaseLine."Quantity Received");
      END;
      OldPurchaseLine.VALIDATE("Direct Unit Cost",PurchaseLine."Direct Unit Cost");
      OldPurchaseLine.VALIDATE("Line Discount %",PurchaseLine."Line Discount %");
      OldPurchaseLine.VALIDATE("Qty. to Receive",0);
        OldPurchaseLine.VALIDATE("Return Qty. to Ship");
        CASE PurchaseLine."Document Type" OF
          PurchaseLine."Document Type"::"Return Order": BEGIN
            IF PurchaseLine."Qty. to Invoice" > (PurchaseLine."Return Qty. Shipped" - PurchaseLine."Quantity Invoiced") THEN
              OldPurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine."Return Qty. Shipped" - PurchaseLine."Quantity Invoiced")
            ELSE
              OldPurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine."Qty. to Invoice");
          END ELSE BEGIN
            IF PurchaseLine."Qty. to Invoice" > (PurchaseLine."Quantity Received" - PurchaseLine."Quantity Invoiced") THEN
              OldPurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine."Quantity Received" - PurchaseLine."Quantity Invoiced")
            ELSE
              OldPurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine."Qty. to Invoice");
          END;
        END;

      OldPurchaseLine.MODIFY;
    END;

    PROCEDURE GetNextItemChrgAssPurchLineNo@1100032(ItemChargeAssignmentPurch@1100000 : Record 5805) : Integer;
    VAR
      ItemChargeAssignmentPurch2@1100001 : Record 5805;
      ExitValue@1100002 : Integer;
    BEGIN
      ExitValue := 10000;
      ItemChargeAssignmentPurch2.RESET;
      ItemChargeAssignmentPurch2.SETCURRENTKEY("Document Type","Document No.","Document Line No.");
      ItemChargeAssignmentPurch2.SETRANGE("Document Type",ItemChargeAssignmentPurch."Document Type");
      ItemChargeAssignmentPurch2.SETRANGE("Document No.",ItemChargeAssignmentPurch."Document No.");
      ItemChargeAssignmentPurch2.SETRANGE("Document Line No.",ItemChargeAssignmentPurch."Document Line No.");
      IF ItemChargeAssignmentPurch2.FIND('+') THEN
        ExitValue := ItemChargeAssignmentPurch2."Line No." + 10000;
      EXIT(ExitValue);
    END;

    PROCEDURE UpdateProductionOrders@1100033();
    VAR
      ProductionOrder@1100000 : Record 5405;
      ProductionOrder2@1100001 : Record 5405;
      GenProdPostingGroupConv@1100002 : Record 10742;
    BEGIN
      // updating Production Orders (5405)
      Step := 18;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100229);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        WITH ProductionOrder DO
          IF FIND('-') THEN REPEAT
            IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN BEGIN
              ProductionOrder2.GET(Status,"No.");
              ProductionOrder2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
              ProductionOrder2.MODIFY;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE UpdateWorkCenters@1100034();
    VAR
      WorkCenter@1100000 : Record 99000754;
      WorkCenter2@1100001 : Record 99000754;
      GenProdPostingGroupConv@1100002 : Record 10742;
    BEGIN
      // updating Work Centers (99000754)
      Step := 19;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100230);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        WITH WorkCenter DO
          IF FIND('-') THEN REPEAT
            IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN BEGIN
              WorkCenter2.GET("No.");
              WorkCenter2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
              WorkCenter2.MODIFY;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE UpdateMachineCenters@1100035();
    VAR
      MachineCenter@1100000 : Record 99000758;
      MachineCenter2@1100001 : Record 99000758;
      GenProdPostingGroupConv@1100002 : Record 10742;
    BEGIN
      // updating Machine Centers (99000758)
      Step := 20;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100231);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        WITH MachineCenter DO
          IF FIND('-') THEN REPEAT
            IF GenProdPostingGroupConv.GET("Gen. Prod. Posting Group") THEN BEGIN
              MachineCenter2.GET("No.");
              MachineCenter2.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
              MachineCenter2.MODIFY;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE UpdateReminders@1100036();
    VAR
      ReminderHeader@1100000 : Record 295;
      ReminderLine@1100001 : Record 296;
      ReminderLine2@1100002 : Record 296;
      VATProdPostingGroupConv@1100003 : Record 10741;
    BEGIN
      // updating Reminders (296)
      Step := 21;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        VATProdPostingGroupConv.RESET;
        ReminderHeader.RESET;
        IF ReminderHeader.FIND('-') THEN REPEAT
          IF CanConvertReminder(ReminderHeader,0) THEN BEGIN
            ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
            ReminderLine.SETRANGE(Type,ReminderLine.Type::"G/L Account");
            ReminderLine.SETFILTER("No.",'<>%1','');
            IF ReminderLine.FIND('-') THEN REPEAT
              ProgressWindow.UPDATE(2,Step);
              ProgressWindow.UPDATE(3,Text1100128);
              //IF (VATProdPostingGroupConv."From-VAT Prod. Posting Group" <> ReminderLine."VAT Prod. Posting Group") THEN
                IF VATProdPostingGroupConv.GET(ReminderLine."VAT Prod. Posting Group") THEN BEGIN
                  ReminderLine2.GET(ReminderLine."Reminder No.",ReminderLine."Line No.");
                  ReminderLine2.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
                  ReminderLine2.MODIFY;
                END;
            UNTIL ReminderLine.NEXT = 0;
          END;
        UNTIL ReminderHeader.NEXT = 0;
      END;
    END;

    PROCEDURE CanConvertReminder@1100037(ReminderHeader@1100000 : Record 295;StepToCheck@1100001 : Integer) : Boolean;
    VAR
      ReminderLine@1100002 : Record 296;
      VATPostingSetup@1100003 : Record 325;
      VATProdPostingGroupConv@1100004 : Record 10741;
      ExitValue@1100005 : Boolean;
    BEGIN
      ExitValue := TRUE;
      IF StepToCheck IN [0,1] THEN
        WITH ReminderLine DO BEGIN
          RESET;
          SETRANGE("Reminder No.",ReminderHeader."No.");
          SETRANGE(Type,ReminderLine.Type::"G/L Account");
          SETFILTER("No.",'<>%1','');
          IF FIND('-') THEN REPEAT
            IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
              IF VATPostingSetup.GET(ReminderHeader."VAT Bus. Posting Group",
                                     VATProdPostingGroupConv."To-VAT Prod. Posting Group") = FALSE THEN
              ExitValue := FALSE;
          UNTIL (NEXT = 0) OR (ExitValue = FALSE);
        END;
      EXIT(ExitValue);
    END;

    PROCEDURE UpdateFinChargeMemos@1100038();
    VAR
      FinanceChargeMemoHeader@1100000 : Record 302;
      FinanceChargeMemoLine@1100001 : Record 303;
      FinanceChargeMemoLine2@1100002 : Record 303;
      VATProdPostingGroupConv@1100003 : Record 10741;
    BEGIN
      // updating Fin. Charge Memos (303)
      Step := 22;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        VATProdPostingGroupConv.RESET;
        FinanceChargeMemoHeader.RESET;
        IF FinanceChargeMemoHeader.FIND('-') THEN REPEAT

          IF CanConvertFinChargeMemo(FinanceChargeMemoHeader,0) THEN BEGIN
            FinanceChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeMemoHeader."No.");
            FinanceChargeMemoLine.SETRANGE(Type,FinanceChargeMemoLine.Type::"G/L Account");
            FinanceChargeMemoLine.SETFILTER("No.",'<>%1','');
            IF FinanceChargeMemoLine.FIND('-') THEN REPEAT

              ProgressWindow.UPDATE(2,Step);
              ProgressWindow.UPDATE(3,Text1100129);
              //IF (VATProdPostingGroupConv."From-VAT Prod. Posting Group" <> FinanceChargeMemoLine."VAT Prod. Posting Group") THEN
                IF VATProdPostingGroupConv.GET(FinanceChargeMemoLine."VAT Prod. Posting Group") THEN BEGIN
                  FinanceChargeMemoLine2.GET(FinanceChargeMemoLine."Finance Charge Memo No.",FinanceChargeMemoLine."Line No.");
                  FinanceChargeMemoLine2.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupConv."To-VAT Prod. Posting Group");
                  FinanceChargeMemoLine2.MODIFY;
                END;
            UNTIL FinanceChargeMemoLine.NEXT = 0;
          END;
        UNTIL FinanceChargeMemoHeader.NEXT = 0;
      END;
    END;

    PROCEDURE CanConvertFinChargeMemo@1100039(FinanceChargeMemoHeader@1100000 : Record 302;StepToCheck@1100001 : Integer) : Boolean;
    VAR
      FinanceChargeMemoLine@1100002 : Record 303;
      VATPostingSetup@1100003 : Record 325;
      VATProdPostingGroupConv@1100004 : Record 10741;
      ExitValue@1100005 : Boolean;
    BEGIN
      ExitValue := TRUE;
      IF StepToCheck IN [0,1] THEN
        WITH FinanceChargeMemoLine DO BEGIN
          RESET;
          SETRANGE("Finance Charge Memo No.",FinanceChargeMemoHeader."No.");
          SETRANGE(Type,FinanceChargeMemoLine.Type::"G/L Account");
          SETFILTER("No.",'<>%1','');
          IF FIND('-') THEN REPEAT
            IF VATProdPostingGroupConv.GET("VAT Prod. Posting Group") THEN
              IF VATPostingSetup.GET(FinanceChargeMemoHeader."VAT Bus. Posting Group",
                                     VATProdPostingGroupConv."To-VAT Prod. Posting Group") = FALSE THEN
              ExitValue := FALSE;
          UNTIL (NEXT = 0) OR (ExitValue = FALSE);
        END;
      EXIT(ExitValue);
    END;

    PROCEDURE UpdateBizTalkPartnerSetup@1100040();
    VAR
      BizTalkPartnerSetupHeader@1100000 : Record 99008513;
      BizTalkPartnerSetupHeader2@1100001 : Record 99008513;
      VATProdPostingGroupConv@1100002 : Record 10741;
      GenProdPostingGroupConv@1100003 : Record 10742;
      updated@1100004 : Boolean;
    BEGIN
      // updating BizTalk Partner Setup Header (99008513)
      Step := 23;
      IF SkipConvert[Step] = FALSE THEN BEGIN
        ProgressWindow.UPDATE(2,Step);
        ProgressWindow.UPDATE(3,Text1100130);
        ProgressWindow.UPDATE(4,Step * 10000 DIV NoOfConvertSteps);
        WITH BizTalkPartnerSetupHeader DO
          IF FIND('-') THEN REPEAT
            updated := FALSE;
            IF (PerformUpdateBizTalkPartSetup = PerformUpdateBizTalkPartSetup::"VAT Prod. Posting Group") OR
               (PerformUpdateBizTalkPartSetup = PerformUpdateBizTalkPartSetup::Both) THEN
              IF VATProdPostingGroupConv.GET("Def. VAT Prod. Posting Group") THEN BEGIN
                BizTalkPartnerSetupHeader2.GET("BizTalk Partner No.");
                BizTalkPartnerSetupHeader2.VALIDATE("Def. VAT Prod. Posting Group",
                                                     VATProdPostingGroupConv."To-VAT Prod. Posting Group");
                updated := TRUE;
              END;
            IF (PerformUpdateBizTalkPartSetup = PerformUpdateBizTalkPartSetup::"Gen. Prod. Posting Group") OR
               (PerformUpdateBizTalkPartSetup = PerformUpdateBizTalkPartSetup::Both) THEN
              IF GenProdPostingGroupConv.GET("Def. Gen. Prod. Posting Group") THEN BEGIN
                IF updated = FALSE THEN
                  BizTalkPartnerSetupHeader2.GET("BizTalk Partner No.");
                BizTalkPartnerSetupHeader2.VALIDATE("Def. Gen. Prod. Posting Group",
                                                    GenProdPostingGroupConv."To-Gen. Prod. Posting Group");
                updated := TRUE;
              END;
            IF updated = TRUE THEN
              BizTalkPartnerSetupHeader2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    {
      $001 310510 MNC Sustituimos error por un confirm, porque el control sera por tabla
      $002 310510 MNC Control por tabla
    }
    END.
  }
  RDLDATA
  {
  }
}
