OBJECT Report 1495 Delete Check Ledger Entries
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 272=rimd,
                TableData 45=rimd,
                TableData 87=rimd;
    CaptionML=[ENU=Delete Check Ledger Entries;
               ESP=Eliminar movs. cheques];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CheckLedgEntryFilter := COPYSTR("Check Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table272;
        DataItemTableView=SORTING(Bank Account No.,Check Date)
                          WHERE(Entry Status=FILTER(<>Printed));
        DataItemVarName=Check Ledger Entry;
        OnPreDataItem=BEGIN
                        IF NOT
                           CONFIRM(
                             Text000 +
                             Text001 +
                             Text002,FALSE)
                        THEN
                          CurrReport.BREAK;

                        IF EntrdDateComprReg."Ending Date" = 0D THEN
                          ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                        Window.OPEN(
                          Text004 +
                          Text005 +
                          Text006);

                        SourceCodeSetup.GET;
                        SourceCodeSetup.TESTFIELD("Compress Check Ledger");

                        CheckLedgEntry2.LOCKTABLE;
                        IF RECORDLEVELLOCKING THEN
                          IF CheckLedgEntry3.FIND('+') THEN;
                        DateComprReg.LOCKTABLE;

                        SETRANGE("Check Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");
                        DateComprMgt.GetDateFilter(EntrdDateComprReg."Ending Date",EntrdDateComprReg,TRUE);

                        InitRegister;
                      END;

        OnAfterGetRecord=BEGIN
                           CheckLedgEntry2 := "Check Ledger Entry";
                           WITH CheckLedgEntry2 DO BEGIN
                             SETCURRENTKEY("Bank Account No.","Check Date");
                             COPYFILTERS("Check Ledger Entry");

                             Window.UPDATE(1,"Bank Account No.");

                             REPEAT
                               DELETE;
                               DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
                               Window.UPDATE(4,DateComprReg."No. Records Deleted");
                             UNTIL NEXT = 0;
                           END;

                           IF DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 THEN BEGIN
                             NoOfDeleted := DateComprReg."No. Records Deleted";
                             InsertRegisters(DateComprReg);
                           END;
                         END;

        OnPostDataItem=BEGIN
                         IF DateComprReg."No. Records Deleted" > NoOfDeleted THEN
                           InsertRegisters(DateComprReg);
                       END;

        ReqFilterFields=Bank Account No.,Bank Payment Type;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=5060;
      Height=990;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   IF EntrdDateComprReg."Ending Date" = 0D THEN
                     EntrdDateComprReg."Ending Date" := TODAY;
                 END;

    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;0    ;1650 ;440  ;CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial];
                                                   SourceExpr=EntrdDateComprReg."Starting Date" }
      { 21  ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=1 }
      { 2   ;TextBox      ;3410 ;550  ;1650 ;440  ;CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha final];
                                                   SourceExpr=EntrdDateComprReg."Ending Date" }
      { 22  ;Label        ;0    ;550  ;3300 ;440  ;ParentControl=2 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF EntrdDateComprReg."Ending Date" = 0D THEN
                     EntrdDateComprReg."Ending Date" := TODAY;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESP=Opciones] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             ESP=Fecha inicial];
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Ending Date;
                             ESP=Fecha final];
                  SourceExpr=EntrdDateComprReg."Ending Date" }

    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="This batch job deletes entries. ";ESP="Este proceso borra movimientos. "';
      Text001@1001 : TextConst 'ENU=Therefore, it is important that you make a backup of the database before you run the batch job.\\;ESP=Es muy importante realizar una copia de seguridad de la base de datos antes de ejecutar este proceso.\\';
      Text002@1002 : TextConst 'ENU=Do you want to date compress the entries?;ESP=¨Confirma que desea comprimir los movimientos?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.;ESP=Se debe indicar %1.';
      Text004@1004 : TextConst 'ENU=Date compressing check ledger entries...\\;ESP=Comprimiendo movs. cheques...\\';
      Text005@1005 : TextConst 'ENU=Bank Account No.       #1##########\;ESP=N§ banco               #1##########\';
      Text006@1006 : TextConst 'ENU=No. of entries deleted #4######;ESP=N§ movs. borrados      #4######';
      Text007@1007 : TextConst 'ENU=All records deleted;ESP=Todos los movs. borrados';
      SourceCodeSetup@1008 : Record 242;
      DateComprReg@1009 : Record 87;
      EntrdDateComprReg@1010 : Record 87;
      CheckLedgEntry2@1011 : Record 272;
      CheckLedgEntry3@1012 : Record 272;
      DateComprMgt@1013 : Codeunit 356;
      Window@1014 : Dialog;
      CheckLedgEntryFilter@1015 : Text[250];
      NoOfDeleted@1016 : Integer;
      RegExists@1017 : Boolean;

    LOCAL PROCEDURE InitRegister@4();
    BEGIN
      IF DateComprReg.FIND('+') THEN;
      DateComprReg.INIT;
      DateComprReg."No." := DateComprReg."No." + 1;
      DateComprReg."Table ID" := DATABASE::"Check Ledger Entry";
      DateComprReg."Creation Date" := TODAY;
      DateComprReg."Starting Date" := EntrdDateComprReg."Starting Date";
      DateComprReg."Ending Date" := EntrdDateComprReg."Ending Date";
      DateComprReg."Period Length" := DateComprReg."Period Length"::Day;
      DateComprReg."Retain Field Contents" := Text007;
      DateComprReg.Filter := CheckLedgEntryFilter;
      DateComprReg."Register No." := 0;
      DateComprReg."Source Code" := SourceCodeSetup."Compress Check Ledger";
      DateComprReg."User ID" := USERID;

      RegExists := FALSE;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(DateComprReg@1000 : Record 87);
    BEGIN

      IF RegExists THEN BEGIN
        DateComprReg.MODIFY;
      END ELSE BEGIN
        DateComprReg.INSERT;
        RegExists := TRUE;
      END;
      COMMIT;

      CheckLedgEntry2.LOCKTABLE;
      IF CheckLedgEntry2.RECORDLEVELLOCKING THEN
        IF CheckLedgEntry3.FIND('+') THEN;
      DateComprReg.LOCKTABLE;

      InitRegister;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}
