OBJECT Table 7152 Item Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    Permissions=TableData 7154=rimd,
                TableData 7156=rimd;
    DataCaptionFields=Analysis Area,Code,Name;
    OnDelete=VAR
               ItemAnalysisViewFilter@1000 : Record 7153;
             BEGIN
               ItemAnalysisViewReset;
               ItemAnalysisViewFilter.SETRANGE("Analysis Area","Analysis Area");
               ItemAnalysisViewFilter.SETRANGE("Analysis View Code",Code);
               ItemAnalysisViewFilter.DELETEALL;
             END;

    CaptionML=[ENU=Item Analysis View;
               ESP=Vista de an lisis de productos];
    LookupFormID=Form7151;
  }
  FIELDS
  {
    { 1   ;   ;Analysis Area       ;Option        ;CaptionML=[ENU=Analysis Area;
                                                              ESP=µrea an lisis];
                                                   OptionCaptionML=[ENU=Sales,Purchase,Inventory;
                                                                    ESP=Ventas,Compra,Inventario];
                                                   OptionString=Sales,Purchase,Inventory }
    { 2   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ESP=C¢digo];
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ESP=Nombre] }
    { 4   ;   ;Last Entry No.      ;Integer       ;CaptionML=[ENU=Last Entry No.;
                                                              ESP=N§ £lt. mov.];
                                                   Editable=No }
    { 5   ;   ;Last Budget Entry No.;Integer      ;CaptionML=[ENU=Last Budget Entry No.;
                                                              ESP=N§ £lt. mov. ppto.];
                                                   Editable=No }
    { 6   ;   ;Last Date Updated   ;Date          ;CaptionML=[ENU=Last Date Updated;
                                                              ESP=élt. fecha actualiz.];
                                                   Editable=No }
    { 7   ;   ;Update on Posting   ;Boolean       ;CaptionML=[ENU=Update on Posting;
                                                              ESP=Actualizar al registrar] }
    { 8   ;   ;Blocked             ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT Blocked AND "Refresh When Unblocked" THEN BEGIN
                                                                  ValidateDelete(FIELDCAPTION(Blocked));
                                                                  ItemAnalysisViewReset;
                                                                  "Refresh When Unblocked" := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Blocked;
                                                              ESP=Bloqueado] }
    { 9   ;   ;Item Filter         ;Code250       ;TableRelation=Item;
                                                   OnValidate=VAR
                                                                ItemAnalysisViewEntry@1000 : Record 7154;
                                                                ItemAnalysisViewBudgetEntry@1001 : Record 7156;
                                                                Item@1002 : Record 27;
                                                              BEGIN
                                                                TESTFIELD(Blocked,FALSE);
                                                                IF ("Last Entry No." <> 0) AND (xRec."Item Filter" = '') AND ("Item Filter" <> '') THEN BEGIN
                                                                  ValidateModify(FIELDCAPTION("Item Filter"));
                                                                  Item.SETFILTER("No.","Item Filter");
                                                                  IF Item.FIND('-') THEN
                                                                    REPEAT
                                                                      Item.MARK := TRUE;
                                                                    UNTIL Item.NEXT = 0;
                                                                  Item.SETRANGE("No.");
                                                                  IF Item.FIND('-') THEN
                                                                    REPEAT
                                                                      IF NOT Item.MARK THEN BEGIN
                                                                        ItemAnalysisViewEntry.SETRANGE("Analysis Area","Analysis Area");
                                                                        ItemAnalysisViewEntry.SETRANGE("Analysis View Code",Code);
                                                                        ItemAnalysisViewEntry.SETRANGE("Item No.",Item."No.");
                                                                        ItemAnalysisViewEntry.DELETEALL;
                                                                        ItemAnalysisViewBudgetEntry.SETRANGE("Analysis Area","Analysis Area");
                                                                        ItemAnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
                                                                        ItemAnalysisViewBudgetEntry.SETRANGE("Item No.",Item."No.");
                                                                        ItemAnalysisViewBudgetEntry.DELETEALL;
                                                                      END;
                                                                    UNTIL Item.NEXT = 0;
                                                                END;
                                                                IF ("Last Entry No." <> 0) AND ("Item Filter" <> xRec."Item Filter") AND (xRec."Item Filter" <> '') THEN BEGIN
                                                                  ValidateDelete(FIELDCAPTION("Item Filter"));
                                                                  ItemAnalysisViewReset;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Item Filter;
                                                              ESP=Filtro producto] }
    { 10  ;   ;Location Filter     ;Code250       ;TableRelation=Location;
                                                   OnValidate=VAR
                                                                Location@1000 : Record 14;
                                                                TempLocation@1003 : TEMPORARY Record 14;
                                                              BEGIN
                                                                TESTFIELD(Blocked,FALSE);
                                                                IF ("Last Entry No." <> 0) AND (xRec."Location Filter" = '') AND
                                                                   ("Location Filter" <> xRec."Location Filter")
                                                                THEN BEGIN
                                                                  ValidateModify(FIELDCAPTION("Location Filter"));
                                                                  IF Location.FIND('-') THEN
                                                                    REPEAT
                                                                      TempLocation := Location;
                                                                      TempLocation.INSERT;
                                                                    UNTIL Location.NEXT = 0;
                                                                  TempLocation.INIT;
                                                                  TempLocation.Code := '';
                                                                  TempLocation.INSERT;
                                                                  TempLocation.SETFILTER(Code,"Location Filter");
                                                                  TempLocation.DELETEALL;
                                                                  TempLocation.SETRANGE(Code);
                                                                  IF TempLocation.FIND('-') THEN
                                                                    REPEAT
                                                                      ItemAnalysisViewEntry.SETRANGE("Analysis Area","Analysis Area");
                                                                      ItemAnalysisViewEntry.SETRANGE("Analysis View Code",Code);
                                                                      ItemAnalysisViewEntry.SETRANGE("Location Code",TempLocation.Code);
                                                                      ItemAnalysisViewEntry.DELETEALL;
                                                                      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis Area","Analysis Area");
                                                                      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
                                                                      ItemAnalysisViewBudgetEntry.SETRANGE("Location Code",TempLocation.Code);
                                                                      ItemAnalysisViewBudgetEntry.DELETEALL;
                                                                    UNTIL TempLocation.NEXT = 0
                                                                END;
                                                                IF ("Last Entry No." <> 0) AND (xRec."Location Filter" <>'') AND
                                                                   ("Location Filter" <> xRec."Location Filter")
                                                                THEN BEGIN
                                                                  ValidateDelete(FIELDCAPTION("Location Filter"));
                                                                  ItemAnalysisViewReset;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Location Filter;
                                                              ESP=Filtro almacn] }
    { 11  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Blocked,FALSE);
                                                                IF ("Last Entry No." <> 0) AND ("Starting Date" <> xRec."Starting Date") THEN BEGIN
                                                                  ValidateDelete(FIELDCAPTION("Starting Date"));
                                                                  ItemAnalysisViewReset;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial] }
    { 12  ;   ;Date Compression    ;Option        ;InitValue=Day;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,FALSE);
                                                                IF ("Last Entry No." <> 0) AND ("Date Compression" <> xRec."Date Compression") THEN BEGIN
                                                                  ValidateDelete(FIELDCAPTION("Date Compression"));
                                                                  ItemAnalysisViewReset;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Date Compression;
                                                              ESP=Compresi¢n por fechas];
                                                   OptionCaptionML=[ENU=None,Day,Week,Month,Quarter,Year,Period;
                                                                    ESP=Ninguno,D¡a,Semana,Mes,Trimestre,A¤o,Periodo];
                                                   OptionString=None,Day,Week,Month,Quarter,Year,Period }
    { 13  ;   ;Dimension 1 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,FALSE);
                                                                IF Dim.CheckIfDimUsed("Dimension 1 Code",20,'',Code,"Analysis Area") THEN
                                                                  ERROR(Text000,Dim.GetCheckDimErr);
                                                                ModifyDim(FIELDCAPTION("Dimension 1 Code"),"Dimension 1 Code",xRec."Dimension 1 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Dimension 1 Code;
                                                              ESP=C¢d. dimensi¢n 1] }
    { 14  ;   ;Dimension 2 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,FALSE);
                                                                IF Dim.CheckIfDimUsed("Dimension 2 Code",21,'',Code,"Analysis Area") THEN
                                                                  ERROR(Text000,Dim.GetCheckDimErr);
                                                                ModifyDim(FIELDCAPTION("Dimension 2 Code"),"Dimension 2 Code",xRec."Dimension 2 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Dimension 2 Code;
                                                              ESP=C¢d. dimensi¢n 2] }
    { 15  ;   ;Dimension 3 Code    ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Blocked,FALSE);
                                                                IF Dim.CheckIfDimUsed("Dimension 3 Code",22,'',Code,"Analysis Area") THEN
                                                                  ERROR(Text000,Dim.GetCheckDimErr);
                                                                ModifyDim(FIELDCAPTION("Dimension 3 Code"),"Dimension 3 Code",xRec."Dimension 3 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Dimension 3 Code;
                                                              ESP=C¢d. dimensi¢n 3] }
    { 17  ;   ;Include Budgets     ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Blocked,FALSE);
                                                                IF ("Last Entry No." <> 0) AND xRec."Include Budgets" AND NOT "Include Budgets" THEN BEGIN
                                                                  ValidateDelete(FIELDCAPTION("Include Budgets"));
                                                                  AnalysisviewBudgetReset;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Include Budgets;
                                                              ESP=Incluir pptos.] }
    { 18  ;   ;Refresh When Unblocked;Boolean     ;CaptionML=[ENU=Refresh When Unblocked;
                                                              ESP=Refrescar cdo. bloqueado] }
  }
  KEYS
  {
    {    ;Analysis Area,Code                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1\You cannot use the same dimension twice in the same analysis view.;ESP=%1\No puede usar la misma dim. dos veces en la misma vista an lisis.';
      Text001@1001 : TextConst 'ENU=The dimension %1 is used in the analysis view %2 %3.;ESP=La dimensi¢n %1 se usa en la vista an lisis %2 %3.';
      Text002@1002 : TextConst 'ENU=" You must therefore retain the dimension to keep consistency between the analysis view and the Item entries.";ESP=" Por tanto, a fin de mantener la coherencia entre la vista de an lisis y los movimientos de los productos, debe conservar la dimensi¢n."';
      Text004@1004 : TextConst 'ENU=All analysis views must be updated with the latest Item entries and Item budget entries.;ESP=Todas las vista de an lisis deben actualizarse con los £ltimos movimientos de productos y del presupuesto de productos.';
      Text005@1005 : TextConst 'ENU=" Both blocked and unblocked analysis views must be updated.";ESP=" Deben actualizarse las vistas an lisis bloqueadas y sin bloquear."';
      Text007@1007 : TextConst 'ENU=" Note, you must remove the checkmark in the blocked field before updating the blocked analysis views.\";ESP=" Nota, debe borrar la marca en el campo bloqueado antes de actualizar las vistas an lisis bloqueadas.\"';
      Text008@1008 : TextConst 'ENU=Currently, %1 analysis views are not updated.;ESP=Vistas an lisis %1 no est n actualizadas.';
      Text009@1009 : TextConst 'ENU=" Do you wish to update these analysis views?";ESP=" ¨Confirma que desea actualizar estas vistas an lisis?"';
      Text010@1010 : TextConst 'ENU=All analysis views must be updated with the latest Item entries.;ESP=Todas las vista de an lisis deben actualizarse con los £ltimos movimientos de productos.';
      Text011@1011 : TextConst 'ENU=If you change the contents of the %1 field, the analysis view entries will be deleted.;ESP=Si cambia los contenidos del campo %1, se borrar n los movs. vista an lisis.';
      Text012@1012 : TextConst 'ENU=\You will have to update again.\\Do you want to enter a new value in the %1 field?;ESP=\Tendr  que actualizar de nuevo.\\¨Quiere introducir un valor nuevo en el campo %1?';
      Text013@1013 : TextConst 'ENU=The update has been interrupted in response to the warning.;ESP=La actualizaci¢n ha sido interrumpida como repuesta a la advertencia.';
      Text014@1014 : TextConst 'ENU=If you change the contents of the %1 field, the analysis view entries will be changed as well.\\;ESP=Si cambia los contenidos del campo %1, cambiar n tambin los movs. vista an lisis.\\';
      Text015@1015 : TextConst 'ENU=Do you want to enter a new value in the %1 field?;ESP=¨Confirma que desea introducir un valor nuevo en el campo %1?';
      ItemAnalysisViewEntry@1016 : Record 7154;
      NewItemAnalysisViewEntry@1017 : Record 7154;
      ItemAnalysisViewBudgetEntry@1018 : Record 7156;
      NewItemAnalysisViewBudgetEntry@1019 : Record 7156;
      Dim@1020 : Record 348;

    PROCEDURE ModifyDim@2(DimFieldName@1000 : Text[100];DimValue@1001 : Code[20];xDimValue@1002 : Code[20]);
    BEGIN
      IF ("Last Entry No." <> 0) AND (DimValue <> xDimValue) THEN BEGIN
        IF DimValue <> '' THEN BEGIN
          ValidateDelete(DimFieldName);
          ItemAnalysisViewReset;
        END;
        IF DimValue = '' THEN BEGIN
          ValidateModify(DimFieldName);
          CASE DimFieldName OF
            FIELDCAPTION("Dimension 1 Code"):
              BEGIN
                ItemAnalysisViewEntry.SETFILTER("Dimension 1 Value Code",'<>%1','');
                ItemAnalysisViewBudgetEntry.SETFILTER("Dimension 1 Value Code",'<>%1','');
              END;
            FIELDCAPTION("Dimension 2 Code"):
              BEGIN
                ItemAnalysisViewEntry.SETFILTER("Dimension 2 Value Code",'<>%1','');
                ItemAnalysisViewBudgetEntry.SETFILTER("Dimension 2 Value Code",'<>%1','');
              END;
            FIELDCAPTION("Dimension 3 Code"):
              BEGIN
                ItemAnalysisViewEntry.SETFILTER("Dimension 3 Value Code",'<>%1','');
                ItemAnalysisViewBudgetEntry.SETFILTER("Dimension 3 Value Code",'<>%1','');
              END;
          END;
          ItemAnalysisViewEntry.SETRANGE("Analysis Area","Analysis Area");
          ItemAnalysisViewEntry.SETRANGE("Analysis View Code",Code);
          ItemAnalysisViewBudgetEntry.SETRANGE("Analysis Area","Analysis Area");
          ItemAnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
          IF ItemAnalysisViewEntry.FIND('-') THEN
            REPEAT
              ItemAnalysisViewEntry.DELETE;
              NewItemAnalysisViewEntry := ItemAnalysisViewEntry;
              CASE DimFieldName OF
                FIELDCAPTION("Dimension 1 Code"):
                  NewItemAnalysisViewEntry."Dimension 1 Value Code" := '';
                FIELDCAPTION("Dimension 2 Code"):
                  NewItemAnalysisViewEntry."Dimension 2 Value Code" := '';
                FIELDCAPTION("Dimension 3 Code"):
                  NewItemAnalysisViewEntry."Dimension 3 Value Code" := '';
              END;
              InsertItemAnalysisViewEntry;
             UNTIL ItemAnalysisViewEntry.NEXT = 0;
          IF ItemAnalysisViewBudgetEntry.FIND('-') THEN
            REPEAT
              ItemAnalysisViewBudgetEntry.DELETE;
              NewItemAnalysisViewBudgetEntry := ItemAnalysisViewBudgetEntry;
              CASE DimFieldName OF
                FIELDCAPTION("Dimension 1 Code"):
                  NewItemAnalysisViewBudgetEntry."Dimension 1 Value Code" := '';
                FIELDCAPTION("Dimension 2 Code"):
                  NewItemAnalysisViewBudgetEntry."Dimension 2 Value Code" := '';
                FIELDCAPTION("Dimension 3 Code"):
                  NewItemAnalysisViewBudgetEntry."Dimension 3 Value Code" := '';
              END;
              InsertAnalysisViewBudgetEntry;
            UNTIL ItemAnalysisViewBudgetEntry.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InsertItemAnalysisViewEntry@1();
    BEGIN
      IF NOT NewItemAnalysisViewEntry.INSERT THEN BEGIN
        NewItemAnalysisViewEntry.FIND;
        NewItemAnalysisViewEntry."Sales Amount (Actual)" :=
          NewItemAnalysisViewEntry."Sales Amount (Actual)" + ItemAnalysisViewEntry."Sales Amount (Actual)";
        NewItemAnalysisViewEntry."Cost Amount (Actual)" :=
          NewItemAnalysisViewEntry."Cost Amount (Actual)" + ItemAnalysisViewEntry."Cost Amount (Actual)";
        NewItemAnalysisViewEntry.Quantity :=
          NewItemAnalysisViewEntry.Quantity + ItemAnalysisViewEntry.Quantity;
        NewItemAnalysisViewEntry."Invoiced Quantity" :=
          NewItemAnalysisViewEntry."Invoiced Quantity" + ItemAnalysisViewEntry."Invoiced Quantity";
        NewItemAnalysisViewEntry.MODIFY;
      END;
    END;

    LOCAL PROCEDURE InsertAnalysisViewBudgetEntry@6();
    BEGIN
      IF NOT NewItemAnalysisViewBudgetEntry.INSERT THEN BEGIN
        NewItemAnalysisViewBudgetEntry.FIND;
        NewItemAnalysisViewBudgetEntry."Sales Amount" :=
          NewItemAnalysisViewBudgetEntry."Sales Amount" + ItemAnalysisViewBudgetEntry."Sales Amount";
        NewItemAnalysisViewBudgetEntry.MODIFY;
      END;
    END;

    PROCEDURE ItemAnalysisViewReset@5();
    VAR
      ItemAnalysisViewEntry@1000 : Record 7154;
    BEGIN
      ItemAnalysisViewEntry.SETRANGE("Analysis Area","Analysis Area");
      ItemAnalysisViewEntry.SETRANGE("Analysis View Code",Code);
      ItemAnalysisViewEntry.DELETEALL;
      "Last Entry No." := 0;
      "Last Date Updated" := 0D;
      AnalysisviewBudgetReset;
    END;

    PROCEDURE CheckDimensionsAreRetained@3(ObjectType@1000 : Integer;ObjectID@1001 : Integer;OnlyIfIncludeBudgets@1002 : Boolean);
    BEGIN
      RESET;
      IF OnlyIfIncludeBudgets THEN
        SETRANGE("Include Budgets",TRUE);
      IF FIND('-') THEN
        REPEAT
          CheckDimIsRetained(ObjectType,ObjectID,"Dimension 1 Code",Code,Name);
          CheckDimIsRetained(ObjectType,ObjectID,"Dimension 2 Code",Code,Name);
          CheckDimIsRetained(ObjectType,ObjectID,"Dimension 3 Code",Code,Name);
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimIsRetained@8(ObjectType@1000 : Integer;ObjectID@1001 : Integer;DimCode@1002 : Code[20];AnalysisViewCode@1003 : Code[10];AnalysisViewName@1004 : Text[50]);
    VAR
      SelectedDim@1005 : Record 369;
    BEGIN
      IF DimCode <> '' THEN
        IF NOT SelectedDim.GET(USERID,ObjectType,ObjectID,'',DimCode) THEN
          ERROR(
            Text001 +
            Text002,
            DimCode,AnalysisViewCode,AnalysisViewName);
    END;

    PROCEDURE CheckViewsAreUpdated@4();
    VAR
      ValueEntry@1000 : Record 5802;
      ItemBudgetEntry@1001 : Record 7134;
      UpdateItemAnalysisView@1002 : Codeunit 7150;
      NoNotUpdated@1003 : Integer;
    BEGIN
      IF ValueEntry.FIND('+') OR ItemBudgetEntry.FIND('+') THEN BEGIN
        NoNotUpdated := 0;
        RESET;
        IF FIND('-') THEN
          REPEAT
            IF ("Last Entry No." < ValueEntry."Entry No.") OR
               "Include Budgets" AND ("Last Budget Entry No." < ItemBudgetEntry."Entry No.")
            THEN
              NoNotUpdated := NoNotUpdated + 1;
          UNTIL NEXT = 0;
        IF NoNotUpdated > 0 THEN
          IF CONFIRM(
              Text004 +
              Text005 +
              Text007 +
              Text008 +
              Text009,TRUE,NoNotUpdated)
          THEN BEGIN
            IF FIND('-') THEN
              REPEAT
                IF Blocked THEN BEGIN
                  "Refresh When Unblocked" := TRUE;
                  "Last Budget Entry No." := 0;
                  MODIFY;
                END ELSE
                  UpdateItemAnalysisView.Update(Rec,2,TRUE);
              UNTIL NEXT = 0;
          END ELSE
            ERROR(Text010);
      END;
    END;

    PROCEDURE UpdateLastEntryNo@7();
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF ValueEntry.FIND('+') THEN BEGIN
        SETRANGE(Blocked,FALSE);
        IF FIND('-') THEN
          REPEAT
            "Last Entry No." := ValueEntry."Entry No.";
            MODIFY;
          UNTIL NEXT = 0;
        SETRANGE(Blocked);
      END;
    END;

    PROCEDURE ValidateDelete@10(FieldName@1000 : Text[100]);
    VAR
      Question@1001 : Text[250];
    BEGIN
      Question := STRSUBSTNO(Text011 + Text012,FieldName);
      IF NOT CONFIRM(Question,TRUE) THEN
        ERROR(Text013);
    END;

    PROCEDURE AnalysisviewBudgetReset@9();
    VAR
      ItemAnalysisViewBudgetEntry@1000 : Record 7156;
    BEGIN
      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis Area","Analysis Area");
      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis View Code",Code);
      ItemAnalysisViewBudgetEntry.DELETEALL;
      "Last Budget Entry No." := 0;
    END;

    PROCEDURE ValidateModify@11(FieldName@1000 : Text[100]);
    VAR
      Question@1001 : Text[250];
    BEGIN
      Question := STRSUBSTNO(Text014 + Text015,FieldName);
      IF NOT CONFIRM(Question,TRUE) THEN
        ERROR(Text013);
    END;

    PROCEDURE CopyAnalysisViewFilters@12(ObjectType@1000 : Integer;ObjectID@1001 : Integer;AnalysisArea@1006 : Integer;AnalysisViewCode@1002 : Code[10]);
    VAR
      AnalysisSelectedDim@1003 : Record 7159;
      Item@1004 : Record 27;
      Location@1005 : Record 14;
    BEGIN
      IF GET(AnalysisArea,AnalysisViewCode) THEN BEGIN
        IF "Item Filter" <> '' THEN BEGIN
          IF AnalysisSelectedDim.GET(
            USERID,ObjectType,ObjectID,AnalysisArea,AnalysisViewCode,Item.TABLECAPTION)
          THEN BEGIN
            IF AnalysisSelectedDim."Dimension Value Filter" = '' THEN BEGIN
              AnalysisSelectedDim."Dimension Value Filter" := "Item Filter";
              AnalysisSelectedDim.MODIFY;
            END;
          END ELSE BEGIN
            AnalysisSelectedDim.INIT;
            AnalysisSelectedDim."User ID" := USERID;
            AnalysisSelectedDim."Object Type" := ObjectType;
            AnalysisSelectedDim."Object ID" := ObjectID;
            AnalysisSelectedDim."Analysis Area" := AnalysisArea;
            AnalysisSelectedDim."Analysis View Code" := AnalysisViewCode;
            AnalysisSelectedDim."Dimension Code" := Item.TABLECAPTION;
            AnalysisSelectedDim."Dimension Value Filter" := "Item Filter";
            AnalysisSelectedDim.INSERT;
          END;
        END;
        IF "Location Filter" <> '' THEN BEGIN
          IF AnalysisSelectedDim.GET(
            USERID,ObjectType,ObjectID,AnalysisArea,AnalysisViewCode,Location.TABLECAPTION)
          THEN BEGIN
            IF AnalysisSelectedDim."Dimension Value Filter" = '' THEN BEGIN
              AnalysisSelectedDim."Dimension Value Filter" := "Location Filter";
              AnalysisSelectedDim.MODIFY;
            END;
          END ELSE BEGIN
            AnalysisSelectedDim.INIT;
            AnalysisSelectedDim."User ID" := USERID;
            AnalysisSelectedDim."Object Type" := ObjectType;
            AnalysisSelectedDim."Object ID" := ObjectID;
            AnalysisSelectedDim."Analysis Area" := AnalysisArea;
            AnalysisSelectedDim."Analysis View Code" := AnalysisViewCode;
            AnalysisSelectedDim."Dimension Code" := Location.TABLECAPTION;
            AnalysisSelectedDim."Dimension Value Filter" := "Location Filter";
            AnalysisSelectedDim.INSERT;
          END;
        END;
      END;
    END;

    BEGIN
    END.
  }
}
