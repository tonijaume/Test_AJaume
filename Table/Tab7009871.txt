OBJECT Table 7009871 Cabecera cotizacion
{
  OBJECT-PROPERTIES
  {
    Date=22/07/14;
    Time=14:00:28;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lrPar@1103355000 : Record 7009700;
               lrCabCot@1103355001 : Record 7009871;
             BEGIN

               Inicializaciones;

               IF lrCabCot.FINDLAST THEN
                 Id := lrCabCot.Id + 1
               ELSE
                 Id := 1;

               SetDatosCreacion;
             END;

    OnModify=BEGIN

               SetDatosModificacion;
             END;

    OnDelete=BEGIN

               EliminarCotizacion;
             END;

    CaptionML=[ENU=Quote Header;
               ESP=Cabecera cotizacion];
  }
  FIELDS
  {
    { 1   ;   ;Id                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ESP=ID] }
    { 2   ;   ;Touroperador Venta  ;Code10        ;TableRelation=TourOperador.TourOperador;
                                                   OnValidate=BEGIN
                                                                //$004-
                                                                rTTOO.RESET;
                                                                rTTOO.GET("Touroperador Venta");
                                                                rTTOO.TESTFIELD(Bloqueado, FALSE);
                                                                //$004+

                                                                IF Rec."Touroperador Venta" <> xRec."Touroperador Venta" THEN
                                                                BEGIN
                                                                  Divisa := _GetDivisaTouroperador; //+$003

                                                                  MarcarRecalcular;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sale touroperator;
                                                              ESP=Touroperador venta] }
    { 3   ;   ;Fecha entrada       ;Date          ;OnValidate=BEGIN

                                                                ComprobarFechas("Fecha entrada", "Fecha salida");
                                                                "Dias Estancia" := DevolverDiasEstancia("Fecha entrada", "Fecha salida");

                                                                IF Rec."Fecha entrada" <> xRec."Fecha entrada" THEN
                                                                  MarcarRecalcular;
                                                              END;

                                                   CaptionML=[ENU=Check-in Date;
                                                              ESP=Fecha entrada] }
    { 4   ;   ;Fecha salida        ;Date          ;OnValidate=BEGIN

                                                                ComprobarFechas("Fecha entrada", "Fecha salida");
                                                                "Dias Estancia" := DevolverDiasEstancia("Fecha entrada", "Fecha salida");

                                                                IF Rec."Fecha salida" <> xRec."Fecha salida" THEN
                                                                  MarcarRecalcular;
                                                              END;

                                                   CaptionML=[ENU=Check-out Date;
                                                              ESP=Fecha salida] }
    { 5   ;   ;Regimen             ;Code10        ;TableRelation=Regimen.Regimen;
                                                   OnValidate=BEGIN

                                                                IF Rec.Regimen <> xRec.Regimen THEN
                                                                  MarcarRecalcular;
                                                              END;

                                                   CaptionML=[ENU=Board;
                                                              ESP=Regimen] }
    { 6   ;   ;Adultos             ;Integer       ;OnValidate=BEGIN

                                                                cCotCom.GenerarPersonas(Rec, xRec);

                                                                IF Rec.Adultos <> xRec.Adultos THEN
                                                                  MarcarRecalcular;
                                                              END;

                                                   CaptionML=[ENU=Adults;
                                                              ESP=Adultos] }
    { 7   ;   ;Ni¤os               ;Integer       ;OnValidate=BEGIN

                                                                cCotCom.GenerarPersonas(Rec, xRec);

                                                                IF Rec.Ni¤os <> xRec.Ni¤os THEN
                                                                  MarcarRecalcular;
                                                              END;

                                                   CaptionML=[ENU=Children;
                                                              ESP=Ni¤os] }
    { 8   ;   ;Infants             ;Integer       ;OnValidate=BEGIN

                                                                cCotCom.GenerarPersonas(Rec, xRec);

                                                                IF Rec.Infants <> xRec.Infants THEN
                                                                  MarcarRecalcular;
                                                              END;

                                                   CaptionML=[ENU=Infants;
                                                              ESP=Infants] }
    { 9   ;   ;Zona                ;Code10        ;TableRelation="Zona fisica"."Zona Fisica";
                                                   CaptionML=[ENU=Location;
                                                              ESP=Zona] }
    { 10  ;   ;Categoria hotel     ;Code10        ;TableRelation="Categoria Hotel".Codigo;
                                                   CaptionML=[ENU=Hotel category;
                                                              ESP=Categoria Hotel] }
    { 11  ;   ;Fecha creacion      ;DateTime      ;CaptionML=[ENU=Creation Date;
                                                              ESP=Fecha creacion] }
    { 12  ;   ;Fecha modificacion  ;DateTime      ;CaptionML=[ENU=Modification Date;
                                                              ESP=Fecha modificacion] }
    { 13  ;   ;Fecha impresion     ;DateTime      ;CaptionML=[ENU=Print date;
                                                              ESP=Fecha impresion] }
    { 14  ;   ;Estado              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Pending,Calculated,Recalculate,Closed,Cancelled;
                                                                    ESP=Pendiente,Calculada,Recalcular,Cerrada,Anulada];
                                                   OptionString=Pendiente,Calculada,Recalcular,Cerrada,Anulada;
                                                   Description=Pendiente,Calculada,Recalcular,Cerrada,Anulada }
    { 15  ;   ;Delegacion          ;Code10        ;CaptionML=[ENU=Local Office;
                                                              ESP=Delegacion] }
    { 16  ;   ;Usuario creacion    ;Code20        ;CaptionML=[ENU=Creation user;
                                                              ESP=Usuario creacion] }
    { 17  ;   ;Usuario modificacion;Code20        ;CaptionML=[ENU=Modification User;
                                                              ESP=Usuario modificacion] }
    { 18  ;   ;Usuario impresion   ;Code20        ;CaptionML=[ENU=User print;
                                                              ESP=Usuario impresion] }
    { 19  ;   ;Touroperador compra ;Code10        ;TableRelation=TourOperador.TourOperador;
                                                   OnValidate=BEGIN
                                                                //$004-
                                                                rTTOO.RESET;
                                                                rTTOO.GET("Touroperador compra");
                                                                rTTOO.TESTFIELD(Bloqueado, FALSE);
                                                                //$004+

                                                                IF Rec."Touroperador compra" <> xRec."Touroperador compra" THEN
                                                                  MarcarRecalcular;
                                                              END;

                                                   CaptionML=[ENU=TourOperador Compra;
                                                              ESP=TourOperador Compra] }
    { 21  ;   ;Divisa              ;Code10        ;TableRelation=Currency.Code;
                                                   OnValidate=BEGIN

                                                                IF Rec.Divisa <> xRec.Divisa THEN
                                                                  MarcarRecalcular;
                                                              END;

                                                   CaptionML=[ENU=Currency;
                                                              ESP=Divisa] }
    { 22  ;   ;Observaciones       ;Text50        ;CaptionML=[ENU=Comments;
                                                              ESP=Observaciones] }
    { 23  ;   ;Dias Estancia       ;Integer       ;OnValidate=BEGIN

                                                                ModificarFechas("Fecha entrada", "Fecha salida", "Dias Estancia");
                                                              END;

                                                   CaptionML=[ENU=Stay days;
                                                              ESP=Dias Estancia];
                                                   Description=Dias estancia entre la fecha de inicio y la de fin. }
    { 24  ;   ;Bono                ;Code10        ;CaptionML=[ENU=Voucher;
                                                              ESP=Bono];
                                                   Description=N§ de bono que se van a reflejar las cabeceras de reserva. }
    { 25  ;   ;N§ Cotizacion       ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ESP=N§ Cotizacion];
                                                   Description=Numeraci¢n a partir de una srie.;
                                                   Editable=No }
    { 26  ;   ;Proforma            ;Code20        ;TableRelation="Cabecera Proforma"."Num. Proforma";
                                                   CaptionML=[ENU=Pro-Forma;
                                                              ESP=Proforma];
                                                   Description=FK Proforma asociada a las reservas de la cotizaci¢n.;
                                                   Editable=No }
    { 27  ;   ;Total ingreso       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Linea calculo cotizacion"."Total Ingreso" WHERE (Id Cotizacion=FIELD(Id)));
                                                   CaptionML=[ENU=Total Income;
                                                              ESP=Total Ingreso];
                                                   Description=FlowField }
    { 28  ;   ;Total coste         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Linea calculo cotizacion"."Total Coste" WHERE (Id Cotizacion=FIELD(Id)));
                                                   CaptionML=[ENU=Total Cost;
                                                              ESP=Total Coste];
                                                   Description=FlowField }
    { 29  ;   ;Pais                ;Code10        ;TableRelation=Country/Region.Code;
                                                   CaptionML=[ENU=Country;
                                                              ESP=Pais];
                                                   Description=Pais para filtrar la tabla de hoteles }
    { 30  ;   ;Fecha venta         ;Date          ;CaptionML=[ENU=Sales date;
                                                              ESP=Fecha venta];
                                                   Description=$002 }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
    {    ;Bono                                    ;KeyGroups=RENUMERING }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      cCotCom@1103355000 : Codeunit 7009913;
      Text001@1103355001 : TextConst 'ENU=Quote is closed;ESP=La cotizacion ya est  cerrada.';
      Text002@1103355002 : TextConst 'ENU=Would you like to cancel the quote %1;ESP=Desea anular la cotizacion %1.';
      Text003@1103355004 : TextConst 'ENU=Check-in date cannot be higher than check-out date;ESP=la fecha de entrada no puede ser mayor que la fecha de salida.';
      Text004@1103355003 : TextConst 'ENU=Firstly must fill in the dates;ESP=Debe rellenar una de las fechas primero.';
      cSeries@1103355005 : Codeunit 396;
      rInfEmp@1103355006 : Record 79;
      Text005@1103355007 : TextConst 'ENU=The %1 %2 is out of range of the quote %3 \%4;ESP=La %1 %2 de est  fuera del rango de la Cotizacion %3 \%4.';
      rTTOO@1000000000 : Record 7009717;

    PROCEDURE SetDatosCreacion@1103355000();
    BEGIN
      // SetDatosCreacion

      "Usuario creacion" := USERID;
      "Fecha creacion"   := CURRENTDATETIME;

      "Fecha venta"      := TODAY; //+$002

      IF Pais = '' THEN BEGIN
        IF rInfEmp.FINDFIRST THEN
          Pais := rInfEmp."Country/Region Code";
      END;
    END;

    PROCEDURE SetDatosModificacion@1103355001();
    BEGIN
      // SetDatosModificacion

      "Usuario modificacion" := USERID;
      "Fecha modificacion"   := CURRENTDATETIME;
    END;

    PROCEDURE SetDatosImpresion@1103355002();
    BEGIN
      // SetDatosImpresion

      "Usuario impresion"    := USERID;
      "Fecha impresion"      := CURRENTDATETIME;
    END;

    PROCEDURE EliminarCotizacion@1103355005();
    VAR
      lrLinCalCot@1103355001 : Record 7009873;
    BEGIN
      // EliminarCotizacion

      // Eliminamos los hoteles y sus lineas asociadas a travs del trigger.
      lrLinCalCot.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrLinCalCot.SETRANGE ("Id cotizacion", Id);
      lrLinCalCot.SETRANGE ("Tipo uso"     , lrLinCalCot."Tipo uso"::Seleccion);
      lrLinCalCot.SETRANGE ("Tipo linea"   , lrLinCalCot."Tipo linea"::Hotel);
      IF lrLinCalCot.FINDSET(TRUE) THEN
        lrLinCalCot.DELETEALL(TRUE);

      // Eliminamos las personas, ya que no est n asociadas a las l¡neas de hotel.
      lrLinCalCot.SETRANGE ("Tipo uso"     , lrLinCalCot."Tipo uso"::Seleccion);
      lrLinCalCot.SETRANGE ("Tipo linea"   , lrLinCalCot."Tipo linea"::Persona);
      IF lrLinCalCot.FINDSET(TRUE) THEN
        lrLinCalCot.DELETEALL(TRUE);
    END;

    PROCEDURE MarcarRecalcular@1103355006();
    BEGIN
      // MarcarRecalcular

      IF Estado = Estado::Calculada THEN
        Estado := Estado::Recalcular;
    END;

    PROCEDURE MarcarAnulada@1103355004();
    VAR
      lrLinCot@1103355000 : Record 7009872;
    BEGIN
      // MarcarAnulada

      IF Estado = Estado::Anulada THEN
        EXIT;

      IF Estado = Estado::Cerrada THEN
        ERROR(Text001);

      IF NOT CONFIRM(Text002, FALSE, Id) THEN
        EXIT;

      Estado := Estado::Anulada;

      lrLinCot.RESET;
      lrLinCot.SETCURRENTKEY("Id Cotizacion");
      lrLinCot.SETRANGE("Id Cotizacion", Id);
      IF lrLinCot.FINDSET(TRUE) THEN BEGIN
        REPEAT
          lrLinCot.BorrarLineasCalculo;
        UNTIL lrLinCot.NEXT = 0;
      END;
    END;

    PROCEDURE ActualizarContratosHoteles@1103355007();
    VAR
      lrHoteles@1103355000 : Record 7009873;
    BEGIN
      // ActualizarContratosHoteles

      lrHoteles.RESET;
      lrHoteles.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHoteles.SETRANGE ("Id cotizacion", Id);
      lrHoteles.SETRANGE ("Tipo uso"     , lrHoteles."Tipo uso"::Seleccion);
      lrHoteles.SETRANGE ("Tipo linea"   , lrHoteles."Tipo linea"::Hotel);
      IF lrHoteles.FINDSET(TRUE) THEN BEGIN
        REPEAT
          cCotCom.BuscarContratosxHotel(lrHoteles);
          lrHoteles.MODIFY;
        UNTIL lrHoteles.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE Inicializaciones@1103355003();
    VAR
      lrPar@1103355000 : Record 7009700;
      lrConfCont@1103355001 : Record 98;
      lrInfEmp@1103355002 : Record 79;
      lrPais@1103355003 : Record 9;
    BEGIN
      // Inicializaciones

      lrPar.FINDFIRST;

      // Resolvemos el n§ de serie para la cabecera.
      lrPar.TESTFIELD("Serie cotizaciones");
      "N§ Cotizacion" := cSeries.GetNextNo(lrPar."Serie cotizaciones", TODAY, TRUE);

      Delegacion            := lrPar.Delegacion;
      "Touroperador compra" := lrPar."TO compra x defecto cotizacion";
      "Touroperador Venta"  := lrPar."TO venta x defecto cotizacion";
      Regimen               := lrPar."Regimen x defecto cotizacion";

      // Usamos la divisa local por defecto.
      //-$001lrConfCont.FINDFIRST;
      //-$001Divisa := lrConfCont."LCY Code";

      //. Buscamos la divisa del cliente
      //+$001
      Divisa := _GetDivisaTouroperador;

      // AJF 15/07/09
      // Actualizamos el pa¡s por defecto con el pais de la empresa.

      lrInfEmp.FINDFIRST;
      Pais := lrInfEmp."Country/Region Code";
    END;

    PROCEDURE MarcarHoteles@1103355008(pwMarca@1103355000 : Boolean);
    VAR
      lrHoteles@1103355001 : Record 7009873;
    BEGIN
      // MarcarHoteles

      lrHoteles.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHoteles.SETRANGE ("Id cotizacion", Id);
      lrHoteles.SETRANGE ("Tipo uso"     , lrHoteles."Tipo uso"::Seleccion);
      lrHoteles.SETRANGE ("Tipo linea"   , lrHoteles."Tipo linea"::Hotel);
      lrHoteles.MODIFYALL(Seleccion, pwMarca);
    END;

    LOCAL PROCEDURE DevolverDiasEstancia@1103355011(pwFechaEntrada@1103355000 : Date;pwFechaSalida@1103355001 : Date) : Integer;
    BEGIN
      // DevolverDiasEstancia

      IF (pwFechaEntrada <> 0D) AND (pwFechaSalida <> 0D) THEN
        EXIT(pwFechaSalida - pwFechaEntrada);
    END;

    LOCAL PROCEDURE ComprobarFechas@1103355009(pwFechaEntrada@1103355000 : Date;pwFechaSalida@1103355001 : Date);
    BEGIN
      // ComprobarFechas

      IF (pwFechaEntrada <> 0D) AND (pwFechaSalida <> 0D) THEN
        IF pwFechaEntrada > pwFechaSalida THEN
          ERROR(Text003);
    END;

    LOCAL PROCEDURE ModificarFechas@1103355010(pwFechaEntrada@1103355000 : Date;pwFechaSalida@1103355001 : Date;pwDias@1103355002 : Integer);
    BEGIN
      // ModificarFechas

      IF (pwFechaEntrada = 0D) AND (pwFechaSalida = 0D) THEN
        ERROR(Text004);

      IF (pwFechaEntrada = 0D) THEN
        "Fecha entrada" := pwFechaSalida - pwDias;

      IF (pwFechaSalida = 0D) THEN
        "Fecha salida" := pwFechaEntrada + pwDias;

      IF (pwFechaSalida <> 0D) AND (pwFechaEntrada <> 0D) THEN
        "Fecha salida" := pwFechaEntrada + pwDias;
    END;

    PROCEDURE CompFechasLineas@1103355012();
    VAR
      lrHotel@1103355000 : Record 7009873;
      lrTranf@1103355002 : Record 7009881;
      lrExc@1103355003 : Record 7009883;
      lwDescrp@1103355001 : Text[250];
    BEGIN
      // CompFechasLineas
      // Comprueba que las lineas de la cotizacion tienen las fechas en el rango de la cabecera JPT 02/09/09

      TESTFIELD("Fecha entrada");
      TESTFIELD("Fecha salida");

      CLEAR(lrHotel);
      lrHotel.SETCURRENTKEY("Id cotizacion","Tipo uso","Tipo linea");
      lrHotel.SETRANGE("Id cotizacion", Id);
      lrHotel.SETFILTER("Tipo linea", '%1|%2', lrHotel."Tipo linea"::Hotel, lrHotel."Tipo linea"::Extra);
      lrHotel.SETRANGE("Tipo uso"  , lrHotel."Tipo uso"::Seleccion);
      IF lrHotel.FINDSET THEN BEGIN
         REPEAT
           lwDescrp := STRSUBSTNO('%1 %2 %3', lrHotel."Tipo linea", lrHotel.Hotel, lrHotel.Extra);
           IF NOT FechaEnRango(lrHotel."Fecha inicio") THEN
             ERROR(Text005, lrHotel.FIELDCAPTION("Fecha inicio"), lrHotel."Fecha inicio", Id, lwDescrp);
           IF NOT FechaEnRango(lrHotel."Fecha fin") THEN
             ERROR(Text005, lrHotel.FIELDCAPTION("Fecha fin"), lrHotel."Fecha fin", Id, lwDescrp);
         UNTIL lrHotel.NEXT=0;
      END;

      CLEAR(lrTranf);
      lrTranf.SETCURRENTKEY("Id Cotizacion");
      lrTranf.SETRANGE("Id Cotizacion", Id);
      IF lrTranf.FINDSET THEN BEGIN
        REPEAT
          lwDescrp := STRSUBSTNO('%1 %2 - %3', lrTranf.TABLECAPTION, lrTranf."Hotel entrada", lrTranf."Hotel salida");
          IF NOT FechaEnRango(lrTranf."Fecha inicio") THEN
            ERROR(Text005, lrTranf.FIELDCAPTION("Fecha inicio"), lrTranf."Fecha inicio", Id, lwDescrp);
          IF NOT FechaEnRango(lrTranf."Fecha fin") THEN
            ERROR(Text005, lrTranf.FIELDCAPTION("Fecha fin"), lrTranf."Fecha fin", Id, lwDescrp);
        UNTIL lrTranf.NEXT=0;
      END;

      CLEAR(lrExc);
      lrExc.SETCURRENTKEY("Id Cotizacion");
      lrExc.SETRANGE("Id Cotizacion", Id);
      IF lrExc.FINDSET THEN BEGIN
        REPEAT
          lwDescrp := STRSUBSTNO('%1 %2 - %3', lrExc.TABLECAPTION, lrExc.Producto, lrExc.Hotel);
          IF NOT FechaEnRango(lrExc.Fecha) THEN
            ERROR(Text005, lrExc.FIELDCAPTION(Fecha), lrExc.Fecha, Id, lwDescrp);
        UNTIL lrExc.NEXT=0;
      END;
    END;

    PROCEDURE FechaEnRango@1103355015(pwFecha@1103355000 : Date) : Boolean;
    BEGIN
      // FechaEnRango

      EXIT((pwFecha >= "Fecha entrada") AND (pwFecha <= "Fecha salida"));
    END;

    PROCEDURE GetDivisaExcursion@1103355013() rvDiv : Code[10];
    VAR
      lrCtasTO@1103355000 : Record 7009705;
      lrPar@1103355001 : Record 7009700;
      lrCust@1103355002 : Record 18;
    BEGIN
      // GetDivisaExcursion.

      CLEAR(lrPar);
      lrPar.FINDFIRST;
      EXIT(lrPar."Divisa venta excursiones");

      //CLEAR(lrCtasTO);
      //lrCtasTO.SETRANGE(Delegacion  , lrPar.Delegacion);
      //lrCtasTO.SETRANGE(TourOperador, "Touroperador Venta");
      //IF lrCtasTO.FINDFIRST THEN BEGIN
      //  IF lrCust.GET(lrCtasTO."Cliente contado excursiones") THEN
      //    EXIT(lrCust."Currency Code");
      //END;
      //EXIT('');
    END;

    LOCAL PROCEDURE _GetDivisaTouroperador@1100217000() : Code[10];
    VAR
      lrCtasTO@1100217002 : Record 7009705;
      lrPar@1100217001 : Record 7009700;
      lrCust@1100217000 : Record 18;
    BEGIN
      // _GetDivisaTouroperador

      CLEAR(lrCtasTO);
      lrCtasTO.GET(Delegacion, "Touroperador Venta");

      IF lrCust.GET(lrCtasTO."Cliente Hotel") THEN
        EXIT(lrCust."Currency Code");

      EXIT('');
    END;

    BEGIN
    {
      ## AJS 23.03.2009

        .- He incluido nuevo campo Observaciones Text50

      ## AJF 15/06/09

        .- (09/00279) A¤adido campo "Pais" para poder filtrar los hoteles por este campo.

      ## AJF 15/07/09

        .- (INC-42371) Cogemos el Pa¡s por defecto de informaci¢n de empresa.

      ## AJF 06/07/10
        .- (INC-50236) A¤adida funci¢n para mostrar la divisa del cliente contado de excursiones
           para el to de venta que consta en la cabecera.

      $001 AJS 30082012 La divisa se toma del cliente relacionado con el touroperador de venta

      $002 AJS 31082012 Nuevo campo "Fecha venta" que se rellena con el dia de creacion

      $003 AJS 11122012 Corregir error para que tome bien la divisa del touroperador de venta

      $004 MNC 22072014 CNT-LP-14054 No se pueden usar TTOO bloqueados
    }
    END.
  }
}
