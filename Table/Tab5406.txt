OBJECT Table 5406 Prod. Order Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    DataCaptionFields=Prod. Order No.;
    OnInsert=BEGIN
               IF Status = Status::Finished THEN
                 ERROR(Text000,Status,TABLECAPTION);

               ReserveProdOrderLine.VerifyQuantity(Rec,xRec);
               DimMgt.InsertProdDocDim(
                 DATABASE::"Prod. Order Line",Status,"Prod. Order No.","Line No.",0,
                 "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
               IF "Routing Reference No." < 0 THEN
                 "Routing Reference No." := "Line No.";
             END;

    OnModify=BEGIN
               IF Status = Status::Finished THEN
                 ERROR(Text000,Status,TABLECAPTION);

               ReserveProdOrderLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               ItemLedgEntry@1000 : Record 32;
               CapLedgEntry@1001 : Record 5832;
             BEGIN
               IF Status = Status::Finished THEN
                 ERROR(Text000,Status,TABLECAPTION);

               IF Status = Status::Released THEN BEGIN
                 ItemLedgEntry.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.");
                 ItemLedgEntry.SETRANGE("Prod. Order No.","Prod. Order No.");
                 ItemLedgEntry.SETRANGE("Prod. Order Line No.","Line No.");
                 IF ItemLedgEntry.FIND('-') THEN
                   ERROR(
                     Text99000000,
                     TABLECAPTION,"Line No.",ItemLedgEntry.TABLECAPTION);

                 CapLedgEntry.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.");
                 CapLedgEntry.SETRANGE("Prod. Order No.","Prod. Order No.");
                 CapLedgEntry.SETRANGE("Prod. Order Line No.","Line No.");
                 IF CapLedgEntry.FIND('-') THEN
                   ERROR(
                     Text99000000,
                     TABLECAPTION,"Line No.",CapLedgEntry.TABLECAPTION);
               END;

               ReserveProdOrderLine.DeleteLine(Rec);

               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);
               WhseValidateSourceLine.ProdOrderLineDelete(Rec);

               DeleteRelations;

               DimMgt.DeleteProdDocDim(
                 DATABASE::"Prod. Order Line",Status,"Prod. Order No.","Line No.",0);
             END;

    OnRename=BEGIN
               ERROR(Text99000001,TABLECAPTION);
             END;

    CaptionML=[ENU=Prod. Order Line;
               ESP=L¡n. orden prod.];
    PasteIsValid=No;
    LookupFormID=Form5406;
    DrillDownFormID=Form5406;
  }
  FIELDS
  {
    { 1   ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                                    ESP=Simulada,Planificada,Planif. en firme,Lanzada,Terminada];
                                                   OptionString=Simulated,Planned,Firm Planned,Released,Finished }
    { 2   ;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=FIELD(Status));
                                                   CaptionML=[ENU=Prod. Order No.;
                                                              ESP=N§ orden producci¢n] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 11  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                ReserveProdOrderLine.VerifyChange(Rec,xRec);
                                                                TESTFIELD("Finished Quantity",0);
                                                                CALCFIELDS("Reserved Quantity");
                                                                TESTFIELD("Reserved Quantity",0);
                                                                WhseValidateSourceLine.ProdOrderLineVerifyChange(Rec,xRec);
                                                                IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                  DeleteRelations;
                                                                  "Variant Code" := '';
                                                                END;
                                                                IF "Item No." = '' THEN
                                                                  INIT
                                                                ELSE BEGIN
                                                                  ProdOrder.GET(Status,"Prod. Order No.");
                                                                  "Starting Date" := ProdOrder."Starting Date";
                                                                  "Starting Time" := ProdOrder."Starting Time";
                                                                  "Ending Date" := ProdOrder."Ending Date";
                                                                  "Ending Time" := ProdOrder."Ending Time";
                                                                  "Due Date" := ProdOrder."Due Date";
                                                                  "Location Code" := ProdOrder."Location Code";
                                                                  "Bin Code" := ProdOrder."Bin Code";
                                                                  IF "Bin Code" = '' THEN
                                                                    GetDefaultBin;

                                                                  GetItem;
                                                                  Item.TESTFIELD("Inventory Posting Group");
                                                                  "Inventory Posting Group" := Item."Inventory Posting Group";

                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                  "Production BOM No." := Item."Production BOM No.";
                                                                  "Routing No." := Item."Routing No.";

                                                                  "Scrap %" := Item."Scrap %";
                                                                  "Unit Cost" := Item."Unit Cost";
                                                                  "Indirect Cost %" := Item."Indirect Cost %";
                                                                  "Overhead Rate" := Item."Overhead Rate";
                                                                  IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                    VALIDATE("Production BOM No.",Item."Production BOM No.");
                                                                    VALIDATE("Routing No.",Item."Routing No.");
                                                                    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                  END;
                                                                  IF ProdOrder."Source Type" = ProdOrder."Source Type"::Family THEN
                                                                    "Routing Reference No." := 0
                                                                  ELSE
                                                                    IF "Line No." = 0 THEN
                                                                      "Routing Reference No." := -10000
                                                                    ELSE
                                                                      "Routing Reference No." := "Line No.";
                                                                END;
                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  VALIDATE(Quantity);
                                                                GetUpdateFromSKU;

                                                                CreateDim(DATABASE::Item,"Item No.");
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto] }
    { 12  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.),
                                                                                            Code=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                ReserveProdOrderLine.VerifyChange(Rec,xRec);
                                                                TESTFIELD("Finished Quantity",0);
                                                                CALCFIELDS("Reserved Quantity");
                                                                TESTFIELD("Reserved Quantity",0);
                                                                WhseValidateSourceLine.ProdOrderLineVerifyChange(Rec,xRec);

                                                                IF "Variant Code" = '' THEN BEGIN
                                                                  VALIDATE("Item No.");
                                                                  EXIT;
                                                                END;
                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                "Description 2" := ItemVariant."Description 2";
                                                                GetUpdateFromSKU;
                                                                GetDefaultBin;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 13  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 14  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2] }
    { 20  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                ReserveProdOrderLine.VerifyChange(Rec,xRec);
                                                                WhseValidateSourceLine.ProdOrderLineVerifyChange(Rec,xRec);
                                                                GetUpdateFromSKU;
                                                                GetDefaultBin;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almacn] }
    { 21  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1];
                                                   CaptionClass='1,2,1' }
    { 22  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2];
                                                   CaptionClass='1,2,2' }
    { 23  ;   ;Bin Code            ;Code20        ;OnValidate=VAR
                                                                WMSManagement@1000 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN
                                                                  IF Quantity < 0 THEN
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","Item No.","Variant Code",'')
                                                                  ELSE
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1000 : Codeunit 7302;
                                                              BinCode@1001 : Code[20];
                                                            BEGIN
                                                              IF Quantity < 0 THEN
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","Item No.","Variant Code",'',"Bin Code")
                                                              ELSE
                                                                BinCode := WMSManagement.BinLookUp("Location Code","Item No.","Variant Code",'');

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n] }
    { 29  ;   ;Cost is Adjusted    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Cost is Adjusted;
                                                              ESP=Coste ajustado];
                                                   Editable=No }
    { 30  ;   ;Allow Online Adjustment;Boolean    ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Online Adjustment;
                                                              ESP=Permitir ajuste online];
                                                   Editable=No }
    { 40  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";
                                                                "Remaining Quantity" := Quantity - "Finished Quantity";
                                                                IF "Remaining Quantity" < 0 THEN
                                                                  "Remaining Quantity" := 0;
                                                                "Remaining Qty. (Base)" := "Remaining Quantity" * "Qty. per Unit of Measure";
                                                                ReserveProdOrderLine.VerifyQuantity(Rec,xRec);
                                                                WhseValidateSourceLine.ProdOrderLineVerifyChange(Rec,xRec);

                                                                ProdOrderComp.SETRANGE(Status,Status);
                                                                ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
                                                                ProdOrderComp.SETRANGE("Prod. Order Line No.","Line No.");
                                                                IF ProdOrderComp.FIND('-') THEN
                                                                  REPEAT
                                                                    IF xRec."Qty. per Unit of Measure" <> 0 THEN
                                                                      ProdOrderComp.VALIDATE(
                                                                        "Quantity per",
                                                                        ProdOrderComp."Quantity per" * "Qty. per Unit of Measure" /
                                                                        xRec."Qty. per Unit of Measure")
                                                                    ELSE
                                                                      ProdOrderComp.VALIDATE("Quantity per","Qty. per Unit of Measure" );
                                                                    ProdOrderComp.MODIFY;
                                                                  UNTIL ProdOrderComp.NEXT = 0;
                                                                IF CurrFieldNo <> 0 THEN
                                                                  VALIDATE("Ending Time");
                                                                "Cost Amount" := ROUND(Quantity * "Unit Cost");
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 41  ;   ;Finished Quantity   ;Decimal       ;CaptionML=[ENU=Finished Quantity;
                                                              ESP=Cantidad terminada];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 42  ;   ;Remaining Quantity  ;Decimal       ;CaptionML=[ENU=Remaining Quantity;
                                                              ESP=Cantidad pendiente];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 45  ;   ;Scrap %             ;Decimal       ;CaptionML=[ENU=Scrap %;
                                                              ESP=% Rechazo];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 47  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                CheckEndingDate(CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento];
                                                   Editable=No }
    { 48  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                IF "Ending Date" < "Starting Date" THEN
                                                                  "Ending Date" := "Starting Date";

                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial] }
    { 49  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                IF ProdOrderLine.GET(Status,"Prod. Order No.","Line No.") THEN BEGIN
                                                                  MODIFY;

                                                                  CalcProdOrder.Recalculate(Rec,0);

                                                                  Rec.GET(Status,"Prod. Order No.","Line No.");
                                                                END;
                                                                IF CurrFieldNo <> 0 THEN
                                                                  VALIDATE("Due Date");

                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ESP=Hora inicial] }
    { 50  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha final] }
    { 51  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                IF ProdOrderLine.GET(Status,"Prod. Order No.","Line No.") THEN BEGIN
                                                                  MODIFY;

                                                                  CalcProdOrder.Recalculate(Rec,1);

                                                                  Rec.GET(Status,"Prod. Order No.","Line No.");
                                                                END;
                                                                IF CurrFieldNo <> 0 THEN
                                                                  VALIDATE("Due Date");

                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Ending Time;
                                                              ESP=Hora final] }
    { 52  ;   ;Planning Level Code ;Integer       ;CaptionML=[ENU=Planning Level Code;
                                                              ESP=C¢d. nivel planif.];
                                                   Editable=No }
    { 53  ;   ;Priority            ;Integer       ;CaptionML=[ENU=Priority;
                                                              ESP=Prioridad] }
    { 60  ;   ;Production BOM No.  ;Code20        ;TableRelation="Production BOM Header".No. WHERE (Status=CONST(Certified));
                                                   OnValidate=BEGIN
                                                                "Production BOM Version Code" := '';
                                                                IF "Production BOM No." = '' THEN
                                                                  EXIT;

                                                                ProdBOMHeader.GET("Production BOM No.");
                                                                ProdBOMHeader.TESTFIELD(Status,ProdBOMHeader.Status::Certified);
                                                                "Production BOM Version Code" := VersionMgt.GetBOMVersion("Production BOM No.","Due Date",TRUE);
                                                                IF "Production BOM Version Code" = '' THEN
                                                                  VALIDATE("Unit of Measure Code",ProdBOMHeader."Unit of Measure Code")
                                                                ELSE
                                                                  VALIDATE("Production BOM Version Code");
                                                              END;

                                                   CaptionML=[ENU=Production BOM No.;
                                                              ESP=N§ L.M. producci¢n] }
    { 61  ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header".No. WHERE (Status=CONST(Certified));
                                                   OnValidate=BEGIN
                                                                "Routing Version Code" := '';

                                                                ProdOrderLine.SETRANGE(Status,Status);
                                                                ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
                                                                ProdOrderLine.SETRANGE("Routing No.",xRec."Routing No.");
                                                                ProdOrderLine.SETFILTER("Line No.",'<>%1',"Line No.");
                                                                IF NOT ProdOrderLine.FIND('-') THEN BEGIN
                                                                  ProdOrderRtngLine.SETRANGE(Status,Status);
                                                                  ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
                                                                  ProdOrderRtngLine.SETRANGE("Routing No.",xRec."Routing No.");
                                                                  ProdOrderRtngLine.DELETEALL(TRUE);
                                                                END;

                                                                IF "Routing No." = '' THEN
                                                                  EXIT;

                                                                RtngHeader.GET("Routing No.");
                                                                RtngHeader.TESTFIELD(Status,RtngHeader.Status::Certified);
                                                                "Routing Version Code" := VersionMgt.GetRtngVersion("Routing No.","Due Date",TRUE);
                                                                IF "Routing Version Code" = '' THEN
                                                                  "Routing Type" := RtngHeader.Type
                                                                ELSE
                                                                  VALIDATE("Routing Version Code");
                                                              END;

                                                   CaptionML=[ENU=Routing No.;
                                                              ESP=N§ ruta] }
    { 62  ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ESP=Grupo contable existencias] }
    { 63  ;   ;Routing Reference No.;Integer      ;CaptionML=[ENU=Routing Reference No.;
                                                              ESP=N§ ruta referencia];
                                                   Editable=No }
    { 65  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");
                                                                GetItem;
                                                                Item.TESTFIELD("Inventory Value Zero",FALSE);
                                                                IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
                                                                  IF CurrFieldNo = FIELDNO("Unit Cost") THEN
                                                                    ERROR(
                                                                      Text99000002,
                                                                      FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");

                                                                  IF GetSKU THEN
                                                                    "Unit Cost" := SKU."Unit Cost" * "Qty. per Unit of Measure"
                                                                  ELSE
                                                                    "Unit Cost" := Item."Unit Cost" * "Qty. per Unit of Measure";
                                                                END;

                                                                "Cost Amount" := ROUND(Quantity * "Unit Cost");
                                                              END;

                                                   CaptionML=[ENU=Unit Cost;
                                                              ESP=Coste unitario];
                                                   AutoFormatType=2 }
    { 67  ;   ;Cost Amount         ;Decimal       ;CaptionML=[ENU=Cost Amount;
                                                              ESP=Importe coste];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 68  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Prod. Order No.),
                                                                                                       Source Ref. No.=CONST(0),
                                                                                                       Source Type=CONST(5406),
                                                                                                       Source Subtype=FIELD(Status),
                                                                                                       Source Batch Name=CONST(),
                                                                                                       Source Prod. Order Line=FIELD(Line No.),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ESP=Cantidad reservada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 70  ;   ;Capacity Type Filter;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Capacity Type Filter;
                                                              ESP=Filtro tipo capacidad];
                                                   OptionCaptionML=[ENU=Work Center,Machine Center;
                                                                    ESP=Centro trabajo,Centro m quina];
                                                   OptionString=Work Center,Machine Center }
    { 71  ;   ;Capacity No. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=IF (Capacity Type Filter=CONST(Work Center)) "Work Center"
                                                                 ELSE IF (Capacity Type Filter=CONST(Machine Center)) "Machine Center";
                                                   CaptionML=[ENU=Capacity No. Filter;
                                                              ESP=Filtro n§ capacidad] }
    { 72  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ESP=Filtro fecha] }
    { 80  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                GetItem;
                                                                GetGLSetup;
                                                                WhseValidateSourceLine.ProdOrderLineVerifyChange(Rec,xRec);
                                                                "Unit Cost" := Item."Unit Cost";

                                                                "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");

                                                                "Unit Cost" :=
                                                                  ROUND(Item."Unit Cost" * "Qty. per Unit of Measure",
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                                "Overhead Rate" :=
                                                                  ROUND(
                                                                    Item."Overhead Rate" * "Qty. per Unit of Measure",
                                                                    GLSetup."Unit-Amount Rounding Precision");

                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida] }
    { 81  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                "Remaining Quantity" := Quantity - "Finished Quantity";

                                                                VALIDATE("Ending Time");

                                                                "Cost Amount" := ROUND(Quantity * "Unit Cost");
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base)];
                                                   DecimalPlaces=0:5 }
    { 82  ;   ;Finished Qty. (Base);Decimal       ;CaptionML=[ENU=Finished Qty. (Base);
                                                              ESP=Cdad. terminada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 83  ;   ;Remaining Qty. (Base);Decimal      ;CaptionML=[ENU=Remaining Qty. (Base);
                                                              ESP=Cdad. pendiente (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 84  ;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Prod. Order No.),
                                                                                                                Source Ref. No.=CONST(0),
                                                                                                                Source Type=CONST(5406),
                                                                                                                Source Subtype=FIELD(Status),
                                                                                                                Source Batch Name=CONST(),
                                                                                                                Source Prod. Order Line=FIELD(Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ESP=Cdad. reservada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 90  ;   ;Expected Operation Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Routing Line"."Expected Operation Cost Amt." WHERE (Status=FIELD(Status),
                                                                                                                                    Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                                                    Routing No.=FIELD(Routing No.),
                                                                                                                                    Routing Reference No.=FIELD(Routing Reference No.)));
                                                   CaptionML=[ENU=Expected Operation Cost Amt.;
                                                              ESP=Coste operaci¢n previsto];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 91  ;   ;Total Exp. Oper. Output (Qty.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Line".Quantity WHERE (Status=FIELD(Status),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                      Routing No.=FIELD(Routing No.),
                                                                                                      Routing Reference No.=FIELD(Routing Reference No.),
                                                                                                      Ending Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Total Exp. Oper. Output (Qty.);
                                                              ESP=Sal. oper. esper. tot. (cdad.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 94  ;   ;Expected Component Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Component"."Cost Amount" WHERE (Status=FIELD(Status),
                                                                                                                Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                                Prod. Order Line No.=FIELD(Line No.),
                                                                                                                Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Expected Component Cost Amt.;
                                                              ESP=Coste componente previsto];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 150 ;   ;Completely Invoiced ;Boolean       ;CaptionML=[ENU=Completely Invoiced;
                                                              ESP=Facturado completamente];
                                                   Editable=No }
    { 151 ;   ;Currency Factor     ;Decimal       ;CaptionML=[ENU=Currency Factor;
                                                              ESP=Factor divisa];
                                                   Editable=No }
    { 152 ;   ;Single-Level Material Cost;Decimal ;CaptionML=[ENU=Single-Level Material Cost;
                                                              ESP=Coste material a un nivel];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 153 ;   ;Single-Level Capacity Cost;Decimal ;CaptionML=[ENU=Single-Level Capacity Cost;
                                                              ESP=Coste capacidad a un nivel];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 154 ;   ;Single-Level Subcontrd. Cost;Decimal;
                                                   CaptionML=[ENU=Single-Level Subcontrd. Cost;
                                                              ESP=Coste subcontrat. a un nivel];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 155 ;   ;Single-Level Cap. Ovhd Cost;Decimal;CaptionML=[ENU=Single-Level Cap. Ovhd Cost;
                                                              ESP=Costes gen. cap. a un nivel];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 156 ;   ;Single-Level Mfg. Ovhd Cost;Decimal;CaptionML=[ENU=Single-Level Mfg. Ovhd Cost;
                                                              ESP=Coste gen. fab. a un nivel];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 198 ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Date-Time;
                                                              ESP=Fecha-hora inicial] }
    { 199 ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=Ending Date-Time;
                                                              ESP=Fecha-hora final] }
    { 5831;   ;Cost Amount (ACY)   ;Decimal       ;CaptionML=[ENU=Cost Amount (ACY);
                                                              ESP=Importe coste (DA)];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5832;   ;Unit Cost (ACY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (ACY);
                                                              ESP=Coste unitario (DA)];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 99000750;;Production BOM Version Code;Code20;TableRelation="Production BOM Version"."Version Code" WHERE (Production BOM No.=FIELD(Production BOM No.));
                                                   OnValidate=BEGIN
                                                                IF "Production BOM Version Code" = '' THEN
                                                                  EXIT;

                                                                ProdBOMVersion.GET("Production BOM No.","Production BOM Version Code");
                                                                ProdBOMVersion.TESTFIELD(Status,ProdBOMVersion.Status::Certified);
                                                                VALIDATE("Unit of Measure Code",ProdBOMVersion."Unit of Measure Code");
                                                              END;

                                                   CaptionML=[ENU=Production BOM Version Code;
                                                              ESP=C¢d. versi¢n L.M. producci¢n] }
    { 99000751;;Routing Version Code;Code20       ;TableRelation="Routing Version"."Version Code" WHERE (Routing No.=FIELD(Routing No.));
                                                   OnValidate=BEGIN
                                                                IF "Routing Version Code" = '' THEN
                                                                  EXIT;

                                                                RtngVersion.GET("Routing No.","Routing Version Code");
                                                                RtngVersion.TESTFIELD(Status,RtngVersion.Status::Certified);
                                                                "Routing Type" := RtngVersion.Type;
                                                              END;

                                                   CaptionML=[ENU=Routing Version Code;
                                                              ESP=C¢digo versi¢n ruta] }
    { 99000752;;Routing Type       ;Option        ;CaptionML=[ENU=Routing Type;
                                                              ESP=Tipo ruta];
                                                   OptionCaptionML=[ENU=Serial,Parallel;
                                                                    ESP=En serie,En paralelo];
                                                   OptionString=Serial,Parallel }
    { 99000753;;Qty. per Unit of Measure;Decimal  ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 99000754;;MPS Order          ;Boolean       ;CaptionML=[ENU=MPS Order;
                                                              ESP=Orden MPS] }
    { 99000755;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                IF "Planning Flexibility" <> xRec."Planning Flexibility" THEN
                                                                  ReserveProdOrderLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=[ENU=Planning Flexibility;
                                                              ESP=Flexib. planificaci¢n];
                                                   OptionCaptionML=[ENU=Unlimited,None;
                                                                    ESP=Ilimitada,Ninguna];
                                                   OptionString=Unlimited,None }
    { 99000764;;Indirect Cost %    ;Decimal       ;CaptionML=[ENU=Indirect Cost %;
                                                              ESP=% Coste indirecto];
                                                   DecimalPlaces=0:5 }
    { 99000765;;Overhead Rate      ;Decimal       ;CaptionML=[ENU=Overhead Rate;
                                                              ESP=Tasa costes generales];
                                                   AutoFormatType=2 }
  }
  KEYS
  {
    {    ;Status,Prod. Order No.,Line No.         ;Clustered=Yes }
    {    ;Prod. Order No.,Line No.,Status          }
    {    ;Status,Item No.,Variant Code,Location Code,Ending Date;
                                                   SumIndexFields=Remaining Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Status,Item No.,Variant Code,Location Code,Starting Date;
                                                   SumIndexFields=Remaining Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Status,Item No.,Variant Code,Location Code,Due Date;
                                                   SumIndexFields=Remaining Qty. (Base);
                                                   MaintainSIFTIndex=No }
    { No ;Status,Item No.,Variant Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Due Date;
                                                   SumIndexFields=Remaining Qty. (Base);
                                                   KeyGroups=Item(Dim);
                                                   MaintainSIFTIndex=No }
    {    ;Status,Prod. Order No.,Item No.          }
    {    ;Status,Prod. Order No.,Routing No.,Routing Reference No.;
                                                   SumIndexFields=Quantity,Finished Quantity;
                                                   MaintainSIFTIndex=No }
    {    ;Status,Prod. Order No.,Planning Level Code }
    { No ;Planning Level Code,Priority             }
    {    ;Item No.,Variant Code,Location Code,Status,Ending Date;
                                                   SumIndexFields=Remaining Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,Variant Code,Location Code,Status,Due Date;
                                                   SumIndexFields=Remaining Qty. (Base);
                                                   MaintainSIFTIndex=No }
    { No ;Status,Completely Invoiced               }
    {    ;Status,Cost is Adjusted,Allow Online Adjustment;
                                                   KeyGroups=Item(Adj) }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1034 : TextConst 'ENU=A %1 %2 cannot be inserted, modified, or deleted.;ESP=Un %1 %2 no se puede insertar, modificar o eliminar.';
      Text99000000@1000 : TextConst 'ENU=You cannot delete %1 %2 because there exists at least one %3 associated with it.;ESP=No puede borrar %1 %2 porque existe al menos %3 asociado a l.';
      Text99000001@1001 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      Text99000002@1002 : TextConst 'ENU=You cannot change %1 when %2 is %3.;ESP=No se puede cambiar %1 cuando %2 es %3.';
      Text99000003@1003 : TextConst 'ENU=Change %1 from %2 to %3?;ESP=¨Desea cambiar %1 de %2 a %3?';
      Item@1004 : Record 27;
      SKU@1021 : Record 5700;
      ItemVariant@1005 : Record 5401;
      ReservEntry@1006 : Record 337;
      ProdBOMHeader@1007 : Record 99000771;
      ProdBOMVersion@1008 : Record 99000779;
      RtngHeader@1009 : Record 99000763;
      RtngVersion@1010 : Record 99000786;
      ProdOrder@1011 : Record 5405;
      ProdOrderLine@1012 : Record 5406;
      ProdOrderComp@1013 : Record 5407;
      ProdOrderRtngLine@1014 : Record 5409;
      GLSetup@1031 : Record 98;
      Location@1022 : Record 14;
      Reservation@1026 : Form 498;
      ItemAvailByDate@1027 : Form 157;
      ItemAvailByVar@1028 : Form 5414;
      ItemAvailByLoc@1029 : Form 492;
      ReservEngineMgt@1016 : Codeunit 99000831;
      ReserveProdOrderLine@1017 : Codeunit 99000837;
      WhseValidateSourceLine@1030 : Codeunit 5777;
      UOMMgt@1018 : Codeunit 5402;
      VersionMgt@1019 : Codeunit 99000756;
      CalcProdOrder@1020 : Codeunit 99000773;
      DimMgt@1023 : Codeunit 408;
      Blocked@1032 : Boolean;
      GLSetupRead@1033 : Boolean;

    PROCEDURE DeleteRelations@1();
    VAR
      WhseOutputProdRelease@1000 : Codeunit 7325;
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing No.","Routing No.");
      ProdOrderLine.SETFILTER("Line No.",'<>%1',"Line No.");
      ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      IF NOT ProdOrderLine.FIND('-') THEN BEGIN
        ProdOrderRtngLine.SETRANGE(Status,Status);
        ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
        ProdOrderRtngLine.SETRANGE("Routing No.","Routing No.");
        ProdOrderRtngLine.SETRANGE("Routing Reference No.","Routing Reference No.");
        ProdOrderRtngLine.DELETEALL(TRUE);
      END;

      ProdOrderComp.RESET;
      ProdOrderComp.SETRANGE(Status,Status);
      ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.","Line No.");
      ProdOrderComp.DELETEALL(TRUE);

      ProdOrderComp.SETRANGE("Prod. Order Line No.");
      ProdOrderComp.SETRANGE("Supplied-by Line No.","Line No.");
      IF ProdOrderComp.FIND('-') THEN
        REPEAT
          ProdOrderComp."Supplied-by Line No." := 0;
          ProdOrderComp.MODIFY;
        UNTIL ProdOrderComp.NEXT = 0;

      WhseOutputProdRelease.DeleteLine(Rec);
    END;

    PROCEDURE ShowReservation@8();
    BEGIN
      TESTFIELD("Item No.");
      CLEAR(Reservation);
      Reservation.SetProdOrderLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD("Item No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        FORM.RUNMODAL(FORM::"Reservation Entries",ReservEntry)
      ELSE
        FORM.RUN(FORM::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE ItemAvailability@22(AvailabilityType@1000 : 'Date,Variant,Location,Bin');
    BEGIN
      TESTFIELD("Item No.");
      Item.RESET;
      GetItem;
      Item.SETRANGE("No.","Item No.");
      Item.SETRANGE("Date Filter",0D,"Due Date");

      CASE AvailabilityType OF
        AvailabilityType::Date:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Location Filter","Location Code");
            CLEAR(ItemAvailByDate);
            ItemAvailByDate.LOOKUPMODE(TRUE);
            ItemAvailByDate.SETRECORD(Item);
            ItemAvailByDate.SETTABLEVIEW(Item);
            IF ItemAvailByDate.RUNMODAL = ACTION::LookupOK THEN
              IF "Due Date" <> ItemAvailByDate.GetLastDate THEN
                IF CONFIRM(
                     Text99000003,TRUE,FIELDCAPTION("Due Date"),
                     "Due Date",ItemAvailByDate.GetLastDate)
                THEN
                  VALIDATE("Due Date",ItemAvailByDate.GetLastDate);
          END;
        AvailabilityType::Variant:
          BEGIN
            CLEAR(ItemAvailByVar);
            ItemAvailByVar.LOOKUPMODE(TRUE);
            ItemAvailByVar.SETRECORD(Item);
            ItemAvailByVar.SETTABLEVIEW(Item);
            IF ItemAvailByVar.RUNMODAL = ACTION::LookupOK THEN
              IF "Variant Code" <> ItemAvailByVar.GetLastVariant THEN
                IF CONFIRM(
                     Text99000003,TRUE,FIELDCAPTION("Variant Code"),"Variant Code",
                     ItemAvailByVar.GetLastVariant)
                THEN
                  VALIDATE("Variant Code",ItemAvailByVar.GetLastVariant);
          END;
        AvailabilityType::Location:
          BEGIN
            CLEAR(ItemAvailByLoc);
            ItemAvailByLoc.LOOKUPMODE(TRUE);
            ItemAvailByLoc.SETRECORD(Item);
            ItemAvailByLoc.SETTABLEVIEW(Item);
            IF ItemAvailByLoc.RUNMODAL = ACTION::LookupOK THEN
              IF "Location Code" <> ItemAvailByLoc.GetLastLocation THEN
                IF CONFIRM(
                     Text99000003,TRUE,FIELDCAPTION("Location Code"),"Location Code",
                     ItemAvailByLoc.GetLastLocation)
                THEN
                  VALIDATE("Location Code",ItemAvailByLoc.GetLastLocation);
          END;
      END;
    END;

    PROCEDURE CheckEndingDate@4(ShowWarning@1000 : Boolean);
    VAR
      CheckDateConflict@1001 : Codeunit 99000815;
    BEGIN
      IF NOT Blocked THEN BEGIN
        CheckDateConflict.ProdOrderLineCheck(Rec,ShowWarning);
        ReserveProdOrderLine.AssignForPlanning(Rec);
      END;
    END;

    PROCEDURE BlockDynamicTracking@17(SetBlock@1000 : Boolean);
    BEGIN
      Blocked := SetBlock;
      ReserveProdOrderLine.Block(Blocked);
      CalcProdOrder.BlockDynamicTracking(Blocked);
    END;

    PROCEDURE CreateDim@6(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetPreviousProdDocDefaultDim(
        DATABASE::"Production Order",Status,"Prod. Order No.",0,0,
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      DimMgt.GetDefaultDim(
        TableID,No,'',
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF "Line No." <> 0 THEN
        DimMgt.UpdateProdDocDefaultDim(
          DATABASE::"Prod. Order Line",
          Status,"Prod. Order No.","Line No.",0,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      ReserveProdOrderLine.CallItemTracking(Rec);
    END;

    PROCEDURE ValidateShortcutDimCode@7(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveProdDocDim(
          DATABASE::"Prod. Order Line",Status,"Prod. Order No.",
          "Line No.",0,FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE LookupShortcutDimCode@9(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveProdDocDim(
          DATABASE::"Prod. Order Line",Status,"Prod. Order No.",
          "Line No.",0,FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@10(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      IF "Line No." <> 0 THEN
        DimMgt.ShowProdDocDim(
          DATABASE::"Prod. Order Line",Status,"Prod. Order No.",
          "Line No.",0,ShortcutDimCode)
      ELSE
        DimMgt.ShowTempDim(ShortcutDimCode);
    END;

    LOCAL PROCEDURE GetItem@5();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE GetSKU@5802() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "Item No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      EXIT(SKU.GET("Location Code","Item No.","Variant Code"));
    END;

    PROCEDURE GetUpdateFromSKU@12();
    BEGIN
      GetItem;
      IF GetSKU THEN
        "Unit Cost" := SKU."Unit Cost"
      ELSE
        "Unit Cost" := Item."Unit Cost";
    END;

    PROCEDURE UpdateDatetime@11();
    BEGIN
      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
    END;

    PROCEDURE ShowDimensions@25();
    VAR
      ProdDocDim@1000 : Record 358;
      DocDimensions@1001 : Form 5416;
    BEGIN
      TESTFIELD("Prod. Order No.");
      TESTFIELD("Line No.");
      ProdDocDim.SETRANGE("Table ID",DATABASE::"Prod. Order Line");
      ProdDocDim.SETRANGE("Document Status",Status);
      ProdDocDim.SETRANGE("Document No.","Prod. Order No.");
      ProdDocDim.SETRANGE("Document Line No.","Line No.");
      ProdDocDim.SETRANGE("Line No.",0);
      DocDimensions.SETTABLEVIEW(ProdDocDim);
      DocDimensions.RUNMODAL;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE GetCurrencyCode@13() : Code[10];
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
    END;

    PROCEDURE RowID1@44() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(
        ItemTrackingMgt.ComposeRowID(DATABASE::"Prod. Order Line",Status,
          "Prod. Order No.",'',"Line No.",0));
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      IF (Quantity * xRec.Quantity > 0) AND
         ("Item No." = xRec."Item No.") AND
         ("Location Code" = xRec."Location Code") AND
         ("Variant Code" = xRec."Variant Code")
      THEN
        EXIT;

      "Bin Code" := '';
      IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
      END;
    END;

    PROCEDURE IsCompletelyInvoiced@24() : Boolean;
    VAR
      ItemLedgEntry@1001 : Record 32;
      CapLedgEntry@1002 : Record 5832;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.");
      ItemLedgEntry.SETRANGE("Prod. Order No.","Prod. Order No.");
      ItemLedgEntry.SETRANGE("Prod. Order Line No.","Line No.");
      IF ItemLedgEntry.FIND('-') THEN
        REPEAT
          IF (ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Consumption) AND
             NOT ItemLedgEntry."Completely Invoiced"
          THEN
            EXIT(FALSE);
        UNTIL ItemLedgEntry.NEXT = 0;

      CapLedgEntry.SETCURRENTKEY("Prod. Order No.");
      CapLedgEntry.SETRANGE("Prod. Order No.","Prod. Order No.");
      IF CapLedgEntry.FIND('-') THEN
        REPEAT
          IF NOT CapLedgEntry."Completely Invoiced" THEN
            EXIT(FALSE);
        UNTIL CapLedgEntry.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE SetStdCost@31(VAR ProdOrderLine@1000 : Record 5406;MfgItem@1001 : Record 27;CurrencyFactor@1002 : Decimal);
    BEGIN
      WITH ProdOrderLine DO BEGIN
        "Indirect Cost %" := MfgItem."Indirect Cost %";
        "Overhead Rate" := MfgItem."Overhead Rate";
        "Single-Level Material Cost" := MfgItem."Single-Level Material Cost";
        "Single-Level Capacity Cost" := MfgItem."Single-Level Capacity Cost";
        "Single-Level Subcontrd. Cost" := MfgItem."Single-Level Subcontrd. Cost";
        "Single-Level Cap. Ovhd Cost" := MfgItem."Single-Level Cap. Ovhd Cost";
        "Single-Level Mfg. Ovhd Cost" := MfgItem."Single-Level Mfg. Ovhd Cost";
        "Currency Factor" := CurrencyFactor;
      END;
    END;

    PROCEDURE FnshdNotInvcdExists@2() : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY(Status,"Completely Invoiced");
      SETRANGE(Status,Status::Finished);
      SETRANGE("Completely Invoiced",FALSE);
      EXIT(FIND('-'));
    END;

    BEGIN
    END.
  }
}
