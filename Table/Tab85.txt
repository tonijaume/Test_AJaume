OBJECT Table 85 Acc. Schedule Line
{
  OBJECT-PROPERTIES
  {
    Date=10/04/15;
    Time=12:33:52;
    Modified=Yes;
    Version List=AIC2009,NAVW16.00,CACEM6.00,NAVES6.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF xRec."Line No." = 0 THEN
                 IF NOT AccSchedName.GET("Schedule Name") THEN BEGIN
                   AccSchedName.INIT;
                   AccSchedName.Name := "Schedule Name";
                   IF AccSchedName.Name = '' THEN
                     AccSchedName.Description := Text000;
                   AccSchedName.INSERT;
                 END;
             END;

    OnModify=BEGIN

               IF "Row No." <> xRec."Row No." THEN BEGIN
                 rPlantillaCeldas.SETRANGE("Nombre esq. cuentas", "Schedule Name");
                 rPlantillaCeldas.SETRANGE("N§ Fila", "Line No.");
                 IF rPlantillaCeldas.FIND('-') THEN
                   REPEAT
                     rPlantillaCol.GET(rPlantillaCeldas."Nombre plantilla columnas", rPlantillaCeldas."N§ Columna");
                     rPlantillaCeldas."Nombre celda" := "Row No." + ':' + rPlantillaCol."Column No.";
                     rPlantillaCeldas.MODIFY;
                   UNTIL rPlantillaCeldas.NEXT = 0;
               END;
             END;

    OnDelete=BEGIN
               // PLB 04/10/2005  //MIG. FH6.0
               rPlantillaCeldas.SETRANGE("Nombre esq. cuentas", "Schedule Name");
               rPlantillaCeldas.SETRANGE("N§ Fila", "Line No.");
               IF rPlantillaCeldas.FIND('-') THEN BEGIN
                 IF NOT CONFIRM(Text7000100, FALSE, rPlantillaCeldas.TABLECAPTION, Rec.TABLECAPTION) THEN
                   ERROR(Text7000101);
                 rPlantillaCeldas.DELETEALL;
               END;
             END;

    CaptionML=[ENU=Acc. Schedule Line;
               ESP=L¡n. esquema cuentas];
  }
  FIELDS
  {
    { 1   ;   ;Schedule Name       ;Code10        ;TableRelation="Acc. Schedule Name";
                                                   CaptionML=[ENU=Schedule Name;
                                                              ESP=Nombre previsi¢n] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 3   ;   ;Row No.             ;Code100       ;CaptionML=[ENU=Row No.;
                                                              ESP=N§ fila] }
    { 4   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 5   ;   ;Totaling            ;Text250       ;TableRelation=IF (Totaling Type=CONST(Posting Accounts)) "G/L Account"
                                                                 ELSE IF (Totaling Type=CONST(Total Accounts)) "G/L Account";
                                                   OnValidate=BEGIN
                                                                CASE "Totaling Type" OF
                                                                  "Totaling Type"::"Posting Accounts","Totaling Type"::"Total Accounts":
                                                                    BEGIN
                                                                      // +$001 <
                                                                      IF AccSchedName."Acc. No. Referred to group Acc" THEN BEGIN
                                                                        GroupGLAcc.SETFILTER("No.",Totaling);
                                                                        GroupGLAcc.CALCFIELDS(Balance);
                                                                      // $001 >
                                                                      END ELSE BEGIN
                                                                        IF AccSchedName."Acc. No. Referred to old Acc." THEN BEGIN
                                                                          HistoricGLAcc.SETFILTER("No.",Totaling);
                                                                          HistoricGLAcc.CALCFIELDS(Balance);
                                                                        END ELSE BEGIN
                                                                          GLAcc.SETFILTER("No.",Totaling);
                                                                          GLAcc.CALCFIELDS(Balance);
                                                                        END;
                                                                      END;
                                                                    END;
                                                                  "Totaling Type"::Formula,"Totaling Type"::"Set Base For Percent":
                                                                    BEGIN
                                                                      Totaling := UPPERCASE(Totaling);
                                                                      CheckFormula(Totaling);
                                                                    END;

                                                                  "Totaling Type"::"Cost Type","Totaling Type"::"Cost Type Total":
                                                                    BEGIN
                                                                      CostType.SETFILTER("No.",Totaling);
                                                                      CostType.CALCFIELDS(Balance);
                                                                    END;

                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Totaling;
                                                              ESP=Sumatorio] }
    { 6   ;   ;Totaling Type       ;Option        ;OnValidate=BEGIN
                                                                VALIDATE(Totaling);
                                                                VALIDATE(Type);
                                                              END;

                                                   CaptionML=[ENU=Totaling Type;
                                                              ESP=Tipo sumatorio];
                                                   OptionCaptionML=[ENU=Posting Accounts,Total Accounts,Formula,,,Set Base For Percent,,,Cost Type,Cost Type Total;
                                                                    ESP=Cuentas auxiliares,Cuentas mayor,F¢rmula,,,Fijar base para porcentaje,,,Tipo coste,Total tipo coste];
                                                   OptionString=Posting Accounts,Total Accounts,Formula,,,Set Base For Percent,,,Cost Type,Cost Type Total }
    { 7   ;   ;New Page            ;Boolean       ;CaptionML=[ENU=New Page;
                                                              ESP=Cambiar p gina] }
    { 11  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ESP=Filtro fecha] }
    { 12  ;   ;Dimension 1 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 1 Filter;
                                                              ESP=Filtro dimensi¢n 1];
                                                   CaptionClass=GetCaptionClass(1) }
    { 13  ;   ;Dimension 2 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 2 Filter;
                                                              ESP=Filtro dimensi¢n 2];
                                                   CaptionClass=GetCaptionClass(2) }
    { 14  ;   ;Budget Filter       ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="G/L Budget Name";
                                                   CaptionML=[ENU=Budget Filter;
                                                              ESP=Filtro presupuesto] }
    { 15  ;   ;Business Unit Filter;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Business Unit";
                                                   CaptionML=[ENU=Business Unit Filter;
                                                              ESP=Filtro empresa] }
    { 16  ;   ;Show                ;Option        ;CaptionML=[ENU=Show;
                                                              ESP=Muestra];
                                                   OptionCaptionML=[ENU=Yes,No,If Any Column Not Zero,When Positive Balance,When Negative Balance;
                                                                    ESP=S¡,No,Si ninguna columna es cero,Con saldo positivo,Con saldo negativo];
                                                   OptionString=Yes,No,If Any Column Not Zero,When Positive Balance,When Negative Balance }
    { 17  ;   ;Dimension 3 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 3 Filter;
                                                              ESP=Filtro dimensi¢n 3];
                                                   CaptionClass=GetCaptionClass(3) }
    { 18  ;   ;Dimension 4 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 4 Filter;
                                                              ESP=Filtro dimensi¢n 4];
                                                   CaptionClass=GetCaptionClass(4) }
    { 19  ;   ;Dimension 1 Totaling;Text80        ;OnValidate=BEGIN
                                                                CASE "Totaling Type" OF
                                                                  "Totaling Type"::"Posting Accounts","Totaling Type"::"Total Accounts":
                                                                    BEGIN
                                                                      IF AccSchedName."Acc. No. Referred to old Acc." THEN BEGIN
                                                                        GLAcc.SETFILTER("No.",Totaling);
                                                                        GLAcc.CALCFIELDS(Balance);
                                                                      END ELSE BEGIN
                                                                        HistoricGLAcc.SETFILTER("No.",Totaling);
                                                                        HistoricGLAcc.CALCFIELDS(Balance);
                                                                      END;
                                                                    END;
                                                                  "Totaling Type"::Formula:
                                                                    BEGIN
                                                                      Totaling := UPPERCASE(Totaling);
                                                                      CheckFormula(Totaling);
                                                                    END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 1 Totaling;
                                                              ESP=Total dimensi¢n 1];
                                                   CaptionClass=GetCaptionClass(5) }
    { 20  ;   ;Dimension 2 Totaling;Text80        ;OnValidate=BEGIN
                                                                CASE "Totaling Type" OF
                                                                  "Totaling Type"::"Posting Accounts","Totaling Type"::"Total Accounts":
                                                                    BEGIN
                                                                      IF AccSchedName."Acc. No. Referred to old Acc." THEN BEGIN
                                                                        GLAcc.SETFILTER("No.",Totaling);
                                                                        GLAcc.CALCFIELDS(Balance);
                                                                      END ELSE BEGIN
                                                                        HistoricGLAcc.SETFILTER("No.",Totaling);
                                                                        HistoricGLAcc.CALCFIELDS(Balance);
                                                                      END;
                                                                    END;
                                                                  "Totaling Type"::Formula:
                                                                    BEGIN
                                                                      Totaling := UPPERCASE(Totaling);
                                                                      CheckFormula(Totaling);
                                                                    END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 2 Totaling;
                                                              ESP=Total dimensi¢n 2];
                                                   CaptionClass=GetCaptionClass(6) }
    { 21  ;   ;Dimension 3 Totaling;Text80        ;OnValidate=BEGIN
                                                                CASE "Totaling Type" OF
                                                                  "Totaling Type"::"Posting Accounts","Totaling Type"::"Total Accounts":
                                                                    BEGIN
                                                                      IF AccSchedName."Acc. No. Referred to old Acc." THEN BEGIN
                                                                        GLAcc.SETFILTER("No.",Totaling);
                                                                        GLAcc.CALCFIELDS(Balance);
                                                                      END ELSE BEGIN
                                                                        HistoricGLAcc.SETFILTER("No.",Totaling);
                                                                        HistoricGLAcc.CALCFIELDS(Balance);
                                                                      END;
                                                                    END;
                                                                  "Totaling Type"::Formula:
                                                                    BEGIN
                                                                      Totaling := UPPERCASE(Totaling);
                                                                      CheckFormula(Totaling);
                                                                    END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 3 Totaling;
                                                              ESP=Total dimensi¢n 3];
                                                   CaptionClass=GetCaptionClass(7) }
    { 22  ;   ;Dimension 4 Totaling;Text80        ;OnValidate=BEGIN
                                                                CASE "Totaling Type" OF
                                                                  "Totaling Type"::"Posting Accounts","Totaling Type"::"Total Accounts":
                                                                    BEGIN
                                                                      IF AccSchedName."Acc. No. Referred to old Acc." THEN BEGIN
                                                                        GLAcc.SETFILTER("No.",Totaling);
                                                                        GLAcc.CALCFIELDS(Balance);
                                                                      END ELSE BEGIN
                                                                        HistoricGLAcc.SETFILTER("No.",Totaling);
                                                                        HistoricGLAcc.CALCFIELDS(Balance);
                                                                      END;
                                                                    END;
                                                                  "Totaling Type"::Formula:
                                                                    BEGIN
                                                                      Totaling := UPPERCASE(Totaling);
                                                                      CheckFormula(Totaling);
                                                                    END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 4 Totaling;
                                                              ESP=Total dimensi¢n 4];
                                                   CaptionClass=GetCaptionClass(8) }
    { 23  ;   ;Bold                ;Boolean       ;CaptionML=[ENU=Bold;
                                                              ESP=Negrita] }
    { 24  ;   ;Italic              ;Boolean       ;CaptionML=[ENU=Italic;
                                                              ESP=It lica] }
    { 25  ;   ;Underline           ;Boolean       ;CaptionML=[ENU=Underline;
                                                              ESP=Subrayar] }
    { 26  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=[ENU=Show Opposite Sign;
                                                              ESP=Muestra signo opuesto] }
    { 27  ;   ;Row Type            ;Option        ;CaptionML=[ENU=Row Type;
                                                              ESP=Tipo fila];
                                                   OptionCaptionML=[ENU=Net Change,Balance at Date,Beginning Balance;
                                                                    ESP=Saldo periodo,Saldo a la fecha,Saldo inicial];
                                                   OptionString=Net Change,Balance at Date,Beginning Balance }
    { 28  ;   ;Amount Type         ;Option        ;CaptionML=[ENU=Amount Type;
                                                              ESP=Tipo importe];
                                                   OptionCaptionML=[ENU=Net Amount,Debit Amount,Credit Amount;
                                                                    ESP=Saldo,Debe,Haber];
                                                   OptionString=Net Amount,Debit Amount,Credit Amount }
    { 10700;  ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF "Totaling Type" IN ["Totaling Type"::"Posting Accounts", "Totaling Type"::"Total Accounts"] THEN
                                                                  "Reverse Sign" := Type IN [Type::Liabilities,Type::Credit];
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionCaptionML=[ENU=" ,Debit,Credit,Assets,Liabilities,Capital";
                                                                    ESP=" ,Debe,Haber,Activo,Pasivo,Patrimonio"];
                                                   OptionString=[ ,Debit,Credit,Assets,Liabilities,Capital] }
    { 10701;  ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              ESP=Indentar];
                                                   MinValue=0;
                                                   BlankNumbers=BlankZero }
    { 10702;  ;Positive Only       ;Boolean       ;CaptionML=[ENU=Positive Only;
                                                              ESP=S¢lo positivo] }
    { 10703;  ;Reverse Sign        ;Boolean       ;CaptionML=[ENU=Reverse Sign;
                                                              ESP=Cambia signo] }
    { 3010551;;Color               ;Option        ;CaptionML=[ENU=Color;
                                                              ESP=Color];
                                                   OptionCaptionML=[ENU=" ,,red,blue,pink";
                                                                    ESP=" ,,rojo,azul,rosa"];
                                                   OptionString=[ ,,red,blue,pink] }
    { 7000102;;Fila excel          ;Integer       ;CaptionML=[ENU=Excel File;
                                                              ESP=Fila excel] }
    { 7000103;;Company             ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Company;
                                                              ESP=Empresa] }
    { 7010450;;Analytic data Code  ;Code10        ;TableRelation="Dato analitico";
                                                   CaptionML=[ENU=Analysis data Code;
                                                              ESP=C¢d. dato anal¡tico];
                                                   Description=SGI-118 }
    { 7010451;;Dim. 1 analytic data Tot.;Text80   ;CaptionML=[ENU=Dim. 1 analytic data Tot.;
                                                              ESP=Total Dim. 1 dato anal¡tico];
                                                   Description=SGI-118 }
    { 7010452;;Dim. 2 analytic data Tot.;Text80   ;CaptionML=[ENU=Dim. 2 analytic data Tot.;
                                                              ESP=Total Dim. 2 dato anal¡tico];
                                                   Description=SGI-118 }
    { 7010453;;Dim. 3 analytic data Tot.;Text80   ;CaptionML=[ENU=Dim. 4 analytic data Tot.;
                                                              ESP=Total Dim. 3 dato anal¡tico];
                                                   Description=SGI-118 }
    { 7010454;;Dim. 4 analytic data Tot.;Text80   ;CaptionML=[ENU=Dim. 4 analytic data Tot.;
                                                              ESP=Total Dim. 4 dato anal¡tico];
                                                   Description=SGI-118 }
    { 7010455;;Dim. 1 analytic data Filt.;Code20  ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dim. 1 analytic data  Filt.;
                                                              ESP=Filtro Dim. 1 dato anal¡tico];
                                                   Description=SGI-118 }
    { 7010456;;Dim. 2 analytic data Filt.;Code20  ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dim. 2 analytic data  Filt.;
                                                              ESP=Filtro Dim. 2 dato anal¡tico];
                                                   Description=SGI-118 }
    { 7010457;;Dim. 3 analytic data Filt.;Code20  ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dim. 4 analytic data  Filt.;
                                                              ESP=Filtro Dim. 3 dato anal¡tico];
                                                   Description=SGI-118 }
    { 7010458;;Dim. 4 analytic data Filt.;Code20  ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dim. 4 analytic data  Filt.;
                                                              ESP=Filtro Dim. 4 dato anal¡tico];
                                                   Description=SGI-118 }
  }
  KEYS
  {
    {    ;Schedule Name,Line No.                  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Default Schedule;ESP=Previsi¢n genr.';
      Text001@1001 : TextConst 'ENU=The parenthesis at position %1 is misplaced.;ESP=El parntesis en la posici¢n %1 es incorrecto.';
      Text002@1002 : TextConst 'ENU=You cannot have two consecutive operators. The error occurred at position %1.;ESP=No se puede tener dos operaciones consecutivas. Revise la posici¢n %1.';
      Text003@1003 : TextConst 'ENU=There is an operand missing after position %1.;ESP=Falta un operando despus de la posici¢n %1.';
      Text004@1004 : TextConst 'ENU=There are more left parentheses than right parentheses.;ESP=Hay m s parntesis de apertura que de cierre.';
      Text005@1005 : TextConst 'ENU=There are more right parentheses than left parentheses.;ESP=Hay m s parntesis de cierre que de apertura.';
      Text006@1006 : TextConst 'ENU=1,6,,Dimension 1 Filter;ESP=1,6,,Filtro dimensi¢n 1';
      Text007@1007 : TextConst 'ENU=1,6,,Dimension 2 Filter;ESP=1,6,,Filtro dimensi¢n 2';
      Text008@1008 : TextConst 'ENU=1,6,,Dimension 3 Filter;ESP=1,6,,Filtro dimensi¢n 3';
      Text009@1009 : TextConst 'ENU=1,6,,Dimension 4 Filter;ESP=1,6,,Filtro dimensi¢n 4';
      Text010@1010 : TextConst 'ENU=,, Totaling;ESP=,, Totales';
      Text011@1011 : TextConst 'ENU=1,5,,Dimension 1 Totaling;ESP=1,5,,Total dimensi¢n 1';
      Text012@1012 : TextConst 'ENU=1,5,,Dimension 2 Totaling;ESP=1,5,,Total dimensi¢n 2';
      Text013@1013 : TextConst 'ENU=1,5,,Dimension 3 Totaling;ESP=1,5,,Total dimensi¢n 3';
      Text014@1014 : TextConst 'ENU=1,5,,Dimension 4 Totaling;ESP=1,5,,Total dimensi¢n 4';
      AccSchedName@1015 : Record 84;
      GLAcc@1016 : Record 15;
      AnalysisView@1017 : Record 363;
      GLSetup@1018 : Record 98;
      HasGLSetup@1019 : Boolean;
      Text015@1020 : TextConst 'ENU=The %1 refers to %2 %3, which does not exist. The field %4 on table %5 has now been deleted.;ESP=El %1 se refiere a %2 %3, que no existe. El campo %4 en la tabla %5 ha sido borrado.';
      HistoricGLAcc@1100000 : Record 10721;
      CostType@1460000 : Record 3010551;
      Text7000100@1103355000 : TextConst 'ENU=There are %1 related to this %2. If you go on with the erasure, these %1 will be deleted. Continue?;ESP=Existen %1 asociadas a esta %2. Si continuar con el borrado se eliminar n dichas %1. ¨Continuar?';
      Text7000101@1103355001 : TextConst 'ENU=Cancellation cancelled by the user;ESP=Anulaci¢n cancelada por el usuario.';
      rPlantillaCeldas@1103355002 : Record 7009728;
      rPlantillaCol@1103355003 : Record 334;
      GroupGLAcc@1000000000 : Record 7009960;

    PROCEDURE LookUpDimFilter@57(DimNo@1000 : Integer;VAR Text@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Form 560;
      CACostCenterList@1460000 : Form 3010581;
      CACostObjectList@1460001 : Form 3010582;
      CACostCenter@1460002 : Record 3010581;
      CACostObject@1460003 : Record 3010582;
    BEGIN
      GetAccSchedSetup;
      CASE DimNo OF
        1: DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 1 Code");
        2: DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 2 Code");
        3: DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 3 Code");
        4: DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 4 Code");
      END;

      IF "Totaling Type" IN ["Totaling Type"::"Cost Type","Totaling Type"::"Cost Type Total"] THEN BEGIN
        IF DimNo = 1 THEN BEGIN
          CACostCenterList.LOOKUPMODE(TRUE);
          CACostCenterList.SETTABLEVIEW(CACostCenter);
          IF CACostCenterList.RUNMODAL = ACTION::LookupOK THEN BEGIN
            CACostCenterList.GETRECORD(CACostCenter);
            Text := Text + CACostCenter.Code;
            EXIT(TRUE);
          END ELSE
            EXIT(FALSE)
        END;
        IF DimNo = 2 THEN BEGIN
          CACostObjectList.LOOKUPMODE(TRUE);
          CACostObjectList.SETTABLEVIEW(CACostObject);
          IF CACostObjectList.RUNMODAL = ACTION::LookupOK THEN BEGIN
            CACostObjectList.GETRECORD(CACostObject);
            Text := Text + CACostObject.Code;
            EXIT(TRUE);
          END ELSE
            EXIT(FALSE)
        END;
      END;

      DimValList.LOOKUPMODE(TRUE);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := Text + DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE)
    END;

    PROCEDURE CheckFormula@1(Formula@1000 : Code[80]);
    VAR
      i@1001 : Integer;
      ParenthesesLevel@1002 : Integer;
      HasOperator@1003 : Boolean;
    BEGIN
      ParenthesesLevel := 0;
      FOR i := 1 TO STRLEN(Formula) DO BEGIN
        IF Formula[i] = '(' THEN
          ParenthesesLevel := ParenthesesLevel + 1
        ELSE
          IF Formula[i] = ')' THEN
            ParenthesesLevel := ParenthesesLevel - 1;
        IF ParenthesesLevel < 0 THEN
          ERROR(Text001,i);
        IF Formula[i] IN ['+','-','*','/','^'] THEN BEGIN
          IF HasOperator THEN
            ERROR(Text002,i)
          ELSE
            HasOperator := TRUE;
          IF i = STRLEN(Formula) THEN
            ERROR(Text003,i)
          ELSE
            IF Formula[i+1] = ')' THEN
              ERROR(Text003,i);
        END ELSE
          HasOperator := FALSE;
      END;
      IF ParenthesesLevel > 0 THEN
        ERROR(Text004)
      ELSE
        IF ParenthesesLevel < 0 THEN
          ERROR(Text005);
    END;

    PROCEDURE GetCaptionClass@7(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      GetAccSchedSetup;
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 1 Code")
            ELSE
              EXIT(Text006);
          END;
        2:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 2 Code")
            ELSE
              EXIT(Text007);
          END;
        3:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 3 Code")
            ELSE
              EXIT(Text008);
          END;
        4:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 4 Code")
            ELSE
              EXIT(Text009);
          END;
        5:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 1 Code" + Text010)
            ELSE
              EXIT(Text011);
          END;
        6:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 2 Code" + Text010)
            ELSE
              EXIT(Text012);
          END;
        7:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 3 Code" + Text010)
            ELSE
              EXIT(Text013);
          END;
        8:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 4 Code" + Text010)
            ELSE
              EXIT(Text014);
          END;
      END;
    END;

    LOCAL PROCEDURE GetAccSchedSetup@2();
    BEGIN
      IF "Schedule Name" <> AccSchedName.Name THEN
        AccSchedName.GET("Schedule Name");
      IF AccSchedName."Analysis View Name" <> '' THEN BEGIN
        IF AccSchedName."Analysis View Name" <> AnalysisView.Code THEN
          IF NOT AnalysisView.GET(AccSchedName."Analysis View Name") THEN BEGIN
            MESSAGE(
              Text015,
              AccSchedName.TABLECAPTION,AnalysisView.TABLECAPTION,AccSchedName."Analysis View Name",
              AccSchedName.FIELDCAPTION("Analysis View Name"),AccSchedName.TABLECAPTION);
            AccSchedName."Analysis View Name" := '';
            AccSchedName.MODIFY;
          END;
      END;

      IF AccSchedName."Analysis View Name" = '' THEN BEGIN
        IF NOT HasGLSetup THEN BEGIN
          GLSetup.GET;
          HasGLSetup := TRUE;
        END;
        CLEAR(AnalysisView);
        AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
        AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
      END;
    END;

    PROCEDURE LookUpEstanciasFilter@1100244000(DimNo@1000 : Integer;VAR Text@1001 : Text[250]) : Boolean;
    BEGIN
    END;

    PROCEDURE LookUpDimAnaDataFilter@1103355000(DimNo@1000 : Integer;VAR Text@1001 : Text[250]) : Boolean;
    VAR
      AnalyticData@1103355000 : Record 7009911;
      DimVal@1002 : Record 7009913;
      DimValList@1003 : Form 7009761;
    BEGIN
      //MIG. FH6.0
      AccSchedName.GET("Schedule Name");
      IF "Analytic data Code" <> '' THEN
        AnalyticData.GET("Analytic data Code")
      ELSE IF AccSchedName."Analytic data Code" <> '' THEN
        AnalyticData.GET(AccSchedName."Analytic data Code")
      ELSE
        EXIT;

      DimVal.SETRANGE("Cod. dato analitico", AnalyticData.Codigo);
      DimVal.SETRANGE(Dimension, DimNo-1);
      DimValList.LOOKUPMODE(TRUE);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := Text + DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE)
      //MIG. FH6.0
    END;

    BEGIN
    {
      MNC 170700 - Modulo SIN1.0 - Para mantener sincronizadas las tablas seleccionadas, en lugar del modulo AE

      // PLB 30/04/2004
      Se ha creado el campo 7000103 Company
      Este campo es para indicar de que empresa se quieren ver los datos para esta l¡nea

      BRM 07/07/04
      A¤adir campos Total Hotel, Total Tipo persona, Total Tipo Habitaci¢n, Total Tipo regimen
                    Filtro Hotel, Filtro Tipo persona, Filtro Tipo Habitaci¢n, Filtro Tipo regimen

      Funci¢n LookUpEstanciasFilter --> Gesti¢n filtros movs. estancias

      $001 ARM 10042015 CNT-OC-15129 Gestion esquemas de cuentas corporativos corporativa
    }
    END.
  }
}
