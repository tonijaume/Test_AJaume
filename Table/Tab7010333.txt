OBJECT Table 7010333 Hist. Incidencia Conductor
{
  OBJECT-PROPERTIES
  {
    Date=16/10/09;
    Time=12:30:41;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=VAR
               rIncid@1100244000 : Record 7010333;
               rCond@1100244001 : Record 7010327;
               lrICD@1100244002 : Record 7010342;
               lrTpInc@1100244003 : Record 7035345;
             BEGIN
               // Aml 090103
               // ya no es obligatorio insertar Fecha hasta.

               //IF "Fecha Hasta" = 0D THEN
               // "Fecha Hasta" := "Fecha Desde";

               rIncid.RESET;
               rIncid.SETCURRENTKEY(ID);
               IF rIncid.FINDLAST THEN
                 ID := rIncid.ID + 1
               ELSE
                 ID := 1;

               //BRM 18/06/04
               //IF lrTpInc.GET(Motivo) THEN
               IF lrTpInc.GET("Cod Motivo") THEN
                 Prioridad := lrTpInc.Prioridad;

               Validaciones(TRUE);

               IF rCond.GET(Conductor) THEN BEGIN
                 Garaje := rCond.Garaje;
                 "Nombre Abreviado" := rCond."Nombre Abreviado";
               END;

               // Crea las l¡neas de la tabla Incidencias Conductor x D¡a

               lrICD.CreaPerido (Rec);

               // JPT 27/07/05 Sincroniza el registro con "Ausencio Empleados" del modulo RRHH
               CLEAR(rCond);
               SincronizaRRHH(FALSE,rCond);
             END;

    OnModify=BEGIN
               Validaciones(FALSE);

               // AJS 23.12.2003
               // Mantener el log exigido por la Ley de proteccion de datos

               MantieneLog;

               // JPT 27/07/05 Sincroniza el registro con "Ausencio Empleados" del modulo RRHH
               CLEAR(rCond);
               SincronizaRRHH(FALSE,rCond);
             END;

    OnDelete=VAR
               lrICD@1100244000 : Record 7010342;
             BEGIN
               // Borra todas las lineas de la tabla Incidencias Conductor x D¡a
               lrICD.BorraPeriodo (Rec);

               // JPT 27/07/05 Sincroniza el registro con "Ausencio Empleados" del modulo RRHH
               CLEAR(rCond);
               SincronizaRRHH(TRUE,rCond);
             END;

    OnRename=BEGIN
               Validaciones(FALSE);
             END;

    CaptionML=ESP=Hist. Incidencia Conductor;
    LookupFormID=Form7010350;
    DrillDownFormID=Form7010350;
  }
  FIELDS
  {
    { 3   ;   ;Fecha Desde         ;Date          ;OnValidate=BEGIN
                                                                ModificaLineasIncidenciaxDia;

                                                                // Aml 090103
                                                                // el campo fecha hasta ya no es obligatorio
                                                                //IF "Fecha Hasta"=0D THEN "Fecha Hasta":= "Fecha Desde";
                                                              END;

                                                   CaptionML=ESP=Fecha Desde;
                                                   NotBlank=Yes;
                                                   Description=PK }
    { 4   ;   ;Fecha Hasta         ;Date          ;OnValidate=BEGIN
                                                                ModificaLineasIncidenciaxDia;

                                                                // Aml 090103
                                                                // el campo fecha hasta ya no es obligatorio
                                                                //IF "Fecha Hasta" = 0D THEN
                                                                //  ERROR(err1)
                                                              END;

                                                   CaptionML=ESP=Fecha Hasta }
    { 5   ;   ;Motivo              ;Option        ;OnValidate=BEGIN
                                                                ModificaLineasIncidenciaxDia;
                                                              END;

                                                   CaptionML=ESP=Motivo;
                                                   OptionCaptionML=ESP="  ,Dia Libre,Vacaciones,Baja,Accidente,Otros,Libre Acumulado,Libre / Defuncion,Medico,Permiso Social,Faltan Coches,No Trabajo,Campa,Libre Debido";
                                                   OptionString=[  ,Dia Libre,Vacaciones,Baja,Accidente,Otros,Libre Acumulado,Libre / Defuncion,Medico,Permiso Social,Faltan Coches,No Trabajo,Campa,Libre Debido] }
    { 6   ;   ;Fecha               ;Date          ;CaptionML=ESP=Fecha;
                                                   Editable=No }
    { 7   ;   ;Hora                ;Time          ;CaptionML=ESP=Hora;
                                                   Editable=No }
    { 8   ;   ;Usuario             ;Code20        ;CaptionML=ESP=Usuario;
                                                   Editable=No }
    { 9   ;   ;Observaciones       ;Text60        ;CaptionML=ESP=Observaciones }
    { 10  ;   ;Conductor           ;Code10        ;TableRelation=Conductor.Conductor;
                                                   CaptionML=ESP=Conductor;
                                                   NotBlank=Yes;
                                                   Description=PK , FK Conductor;
                                                   Editable=Yes }
    { 11  ;   ;Garaje              ;Code10        ;TableRelation=Garaje.Garaje;
                                                   OnValidate=BEGIN
                                                                ModificaLineasIncidenciaxDia
                                                              END;

                                                   CaptionML=ESP=Garaje }
    { 12  ;   ;Nombre Abreviado    ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Conductor."Nombre Abreviado" WHERE (Conductor=FIELD(Conductor)));
                                                   CaptionML=ESP=Nombre Abreviado }
    { 13  ;   ;Parte Accidente     ;Code10        ;TableRelation=Accidente."Parte accidente";
                                                   CaptionML=ESP=Parte Accidente;
                                                   Description=FK Accidente }
    { 14  ;   ;ID                  ;Integer       ;CaptionML=ESP=ID }
    { 15  ;   ;Prioridad           ;Integer       ;CaptionML=ESP=Prioridad }
    { 16  ;   ;Cod Motivo          ;Code10        ;TableRelation="Configuracion Incidencia Cond.".Codigo;
                                                   OnValidate=BEGIN
                                                                //BRM 17/06/04
                                                                ModificaLineasIncidenciaxDia;

                                                                // Importa el campo No imprimir estructura del maestro.
                                                                rConfIC.RESET;
                                                                CLEAR("No imprimir estructura");
                                                                rConfIC.GET("Cod Motivo");
                                                                VALIDATE("No imprimir estructura", rConfIC."No imprimir estructura");
                                                                VALIDATE(Motivo, rConfIC."Motivo incidencia conductor");
                                                              END;

                                                   CaptionML=ESP=Cod Motivo }
    { 18  ;   ;No imprimir estructura;Boolean     ;CaptionML=ESP=No imprimir estructura;
                                                   Editable=No }
    { 50  ;   ;No Ausencia         ;Integer       ;TableRelation="Employee Absence"."Entry No.";
                                                   CaptionML=ESP=No Ausencia;
                                                   Description=TER Sincroniza con la tabla Ausencia Empleados de RRHH }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Conductor,Fecha Desde                    }
    {    ;Parte Accidente,Conductor,Fecha Desde    }
    {    ;Conductor,Garaje,Fecha Desde,Fecha Hasta }
    {    ;Conductor,Prioridad,Fecha Desde,Fecha Hasta }
    {    ;Cod Motivo,Fecha Desde,Fecha Hasta       }
    {    ;Fecha,Usuario,Conductor                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      err1@1100244000 : TextConst 'ESP=El campo ''Fecha Hasta'' no puede quedar vacio.';
      rLog@1100244001 : Record 7010426;
      rConfIC@1100244002 : Record 7035345;
      rPar@1103350000 : Record 7010311;
      Text00001@1103350001 : TextConst 'ESP=¨Desea Eliminar %1 Relacionado?';
      rCond@1103350002 : Record 7010327;

    PROCEDURE Validaciones@1(Insertando@1100244000 : Boolean);
    VAR
      ERROR1@1100244001 : TextConst 'ESP=La fecha desde no puede ser mayor que la fecha hasta';
      ERROR2@1100244002 : TextConst 'ESP=La fecha desde no puede estar en blanco';
      ERROR_SOLAPE@1100244003 : TextConst 'ESP=Se ha detectado un solape con otra incidencia';
      rModulo@1100244004 : Codeunit 7010313;
      rIncid@1100244005 : Record 7010333;
    BEGIN
      //validaciones

      //1.- Que las fechas tengan algo de l¢gica.
      IF (Rec."Fecha Hasta" <> 0D) AND (Rec."Fecha Desde" > Rec."Fecha Hasta") THEN
         ERROR(ERROR1);

      IF "Fecha Desde" = 0D THEN
         ERROR(ERROR2);

      //2.- Validaci¢n de solapamiento horario.
      rIncid.RESET;
      rIncid.SETCURRENTKEY(Conductor);
      rIncid.SETRANGE(Conductor,Conductor);

      // AML 091003 No dejaba introducir incidencias de dias anteriores si se detectaba una incidencia
      // con fecha superior , aunque no se produjera ningun solape en relidad.

      rIncid.SETFILTER("Fecha Desde",'<=%1',"Fecha Desde");
      rIncid.SETFILTER("Fecha Hasta",'>=%1',"Fecha Hasta");

      // Fin aml

      { JPT- Eliminamos el error de solape para permitir tener mas de una incidencia por conductor y dia
      IF rIncid.FINDSET THEN
         REPEAT
            //No haremos la comprobaci¢n si se trata del mismo contrato que estamos modificando.
            IF Insertando OR (rIncid."Fecha Desde" <> xRec."Fecha Desde") THEN
               IF rModulo.InterseccionFechas(Rec."Fecha Desde",Rec."Fecha Hasta",
                                             rIncid."Fecha Desde",rIncid."Fecha Hasta") THEN

                  ERROR(ERROR_SOLAPE);

         UNTIL rIncid.NEXT=0;
      }
      //Grabamos los datos de auditoria.
      Fecha  := TODAY;
      Hora   := TIME;
      Usuario:= USERID;
    END;

    PROCEDURE ModificaLineasIncidenciaxDia@2();
    VAR
      lrICD@1100244000 : Record 7010342;
    BEGIN
      // ModificaLineasIncidenciaxDia
      // Modifica las lineas de la tabla Incidencias Conductor x D¡a, borrandolas todas
      // y volviendolas a crear
      lrICD.BorraPeriodo (xRec);
      lrICD.CreaPerido (Rec);
    END;

    PROCEDURE MantieneLog@3();
    BEGIN
      // MantieneLog
      //
      IF xRec."Fecha Desde" <> "Fecha Desde" THEN
        rLog.InsertaRegistro(ID, FIELDCAPTION("Fecha Desde"), FORMAT(xRec."Fecha Desde"), FORMAT("Fecha Desde") );

      IF xRec."Fecha Hasta" <> "Fecha Hasta" THEN
        rLog.InsertaRegistro(ID, FIELDCAPTION("Fecha Hasta"), FORMAT(xRec."Fecha Hasta"), FORMAT("Fecha Hasta") );

      //BRM 17/06/04
      //IF xRec.Motivo <> Motivo THEN
        //rLog.InsertaRegistro(ID, FIELDCAPTION(Motivo), FORMAT(xRec.Motivo), FORMAT(Motivo) );

      IF xRec."Cod Motivo" <> "Cod Motivo" THEN
        rLog.InsertaRegistro(ID, FIELDCAPTION("Cod Motivo"), FORMAT(xRec."Cod Motivo"), FORMAT("Cod Motivo") );

      IF xRec.Observaciones <> Observaciones THEN
        rLog.InsertaRegistro(ID, FIELDCAPTION(Observaciones), FORMAT(xRec.Observaciones), FORMAT(Observaciones) );

      IF xRec.Conductor <> Conductor THEN
        rLog.InsertaRegistro(ID, FIELDCAPTION(Conductor), FORMAT(xRec.Conductor), FORMAT(Conductor) );

      IF xRec."Parte Accidente" <> "Parte Accidente" THEN
        rLog.InsertaRegistro(ID, FIELDCAPTION("Parte Accidente"), FORMAT(xRec."Parte Accidente"), FORMAT("Parte Accidente") );

      IF xRec.Garaje <> Garaje THEN
        rLog.InsertaRegistro(ID, FIELDCAPTION(Garaje), FORMAT(xRec.Garaje), FORMAT(Garaje) );
    END;

    PROCEDURE DescrInciden@1100244000() : Text[30];
    VAR
      lrCondMot@1100244000 : Record 7035345;
    BEGIN
      // DescrInciden
      // Devuelve la descripcion de la incidencia

      CLEAR(lrCondMot);
      IF lrCondMot.GET("Cod Motivo") THEN
        EXIT(lrCondMot.Descripcion)
      ELSE
        EXIT('');
    END;

    PROCEDURE SincronizaRRHH@1103350000(pwBorra@1103350000 : Boolean;VAR prCond@1103350007 : Record 7010327);
    VAR
      lrAu@1103350001 : Record 5207;
      lrConf@1103350006 : Record 7035345;
      lrCond@1103350002 : Record 7010327;
      lrCom@1103350008 : Record 5208;
      lwOk@1103350003 : Boolean;
      lwTotalDias@1103350004 : Integer;
      lwExiste@1103350005 : Boolean;
      lwSinCom@1103350009 : Boolean;
    BEGIN
      // SincronizaRRHH
      // JPT 27/07/05
      // Sincroniza la incidencia de conductor con la tabla "Ausencia Empleados" del modulo de RRHH
      // Incluyo parametro conductor para poder lanzar la funci¢n desde la ficha de conductores
      // Si no viene de este sitio deber  (podr ) estar en blanco

      // En principio solo para TERRAMAR

      rPar.FINDFIRST;

      IF NOT (rPar."Empresa Real" IN [rPar."Empresa Real"::TER]) THEN
        EXIT;

      lwOk:= TRUE;
      CLEAR(lrCond);
      lrCond := prCond;
      IF lrCond.Conductor='' THEN
        lwOk:= lrCond.GET(Conductor);
      lwOk := lwOk AND (lrCond."Cod. Empleado" <>'');
      lwOk := lwOk AND ("Cod Motivo" <> '');
      CLEAR(lrAu);
      lwExiste := ("No Ausencia" <> 0) AND lrAu.GET("No Ausencia");

      IF NOT lwExiste THEN BEGIN
        IF lwOk AND (NOT pwBorra) THEN BEGIN
          lrAu.INSERT(TRUE);
          "No Ausencia" := lrAu."Entry No.";
          lwExiste := TRUE;
        END;
      END;

      CLEAR(lrConf);
      IF lwExiste AND (NOT pwBorra) THEN BEGIN

        // Nos aseguramos que exista el registro en la tabla  "Causa de Ausencia"
        IF lrConf.GET("Cod Motivo") THEN
          lrConf.SincronizaRRHH;

        IF lrCond."Cod. Empleado" <> '' THEN
          lrAu.VALIDATE("Employee No.", lrCond."Cod. Empleado")
        ELSE
          CLEAR(lrAu."Employee No.");

        lrAu.VALIDATE("From Date"   , "Fecha Desde");
        lrAu.VALIDATE("To Date"     , "Fecha Hasta");
        lrAu.VALIDATE("Cause of Absence Code", "Cod Motivo");
        CLEAR(lwTotalDias);
        IF ("Fecha Desde"<>0D) AND ("Fecha Hasta"<>0D) THEN
          lwTotalDias := "Fecha Hasta" - "Fecha Desde" +1;
        lrAu.VALIDATE(Quantity      , lwTotalDias);
        lrAu.MODIFY(TRUE);

        lwSinCom := Observaciones = '';
        // Introducimos el comentario
        IF NOT lrCom.GET(4,lrCond."Cod. Empleado",lrAu."Entry No.",'',0) THEN BEGIN
          IF NOT lwSinCom THEN BEGIN
            CLEAR(lrCom);
            lrCom."Table Name"    := lrCom."Table Name"::"Employee Absence";
            lrCom."No."           := lrCond."Cod. Empleado";
            lrCom."Table Line No.":= lrAu."Entry No.";
            lrCom."Line No."      :=0;
            lrCom.INSERT;
          END;
        END
        ELSE
          IF lwSinCom THEN
            lrCom.DELETE;

        IF NOT lwSinCom THEN BEGIN
          lrCom.Comment := Observaciones;
          lrCom.MODIFY;
        END;
      END;

      IF lwExiste AND pwBorra THEN
        IF CONFIRM(Text00001,FALSE,lrAu.TABLECAPTION) THEN BEGIN
          lrAu.DELETE(TRUE);


        // Borramos tambien los comentarios
        CLEAR(lrCom);
        lrCom.SETRANGE("Table Name"    , lrCom."Table Name"::"Employee Absence");
        lrCom.SETRANGE("No."           , lrCond."Cod. Empleado");
        lrCom.SETRANGE("Table Line No.", lrAu."Entry No.");
          IF lrCom.FINDFIRST THEN
            lrCom.DELETEALL(TRUE);
        END;
    END;

    BEGIN
    END.
  }
}
