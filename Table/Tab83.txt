OBJECT Table 83 Item Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES6.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               JnlLineDim@1000 : Record 356;
             BEGIN
               JnlLineDim.LOCKTABLE;
               LOCKTABLE;
               ItemJnlTemplate.GET("Journal Template Name");
               ItemJnlBatch.GET("Journal Template Name","Journal Batch Name");

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
               ValidateNewShortcutDimCode(1,"New Shortcut Dimension 1 Code");
               ValidateNewShortcutDimCode(2,"New Shortcut Dimension 2 Code");
               DimMgt.InsertJnlLineDim(
                 DATABASE::"Item Journal Line",
                 "Journal Template Name","Journal Batch Name","Line No.",0,
                 "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

               CheckPlanningAssignment;
             END;

    OnModify=BEGIN
               ReserveItemJnlLine.VerifyChange(Rec,xRec);
               CheckPlanningAssignment;
             END;

    OnDelete=BEGIN
               ReserveItemJnlLine.DeleteLine(Rec);

               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);

               DimMgt.DeleteJnlLineDim(
                 DATABASE::"Item Journal Line",
                 "Journal Template Name","Journal Batch Name","Line No.",0);
             END;

    OnRename=BEGIN
               ReserveItemJnlLine.RenameLine(Rec,xRec);
             END;

    CaptionML=[ENU=Item Journal Line;
               ESP=L¡n. diario producto];
    LookupFormID=Form519;
    DrillDownFormID=Form519;
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Item Journal Template";
                                                   CaptionML=[ENU=Journal Template Name;
                                                              ESP=Nombre libro diario] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 3   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                  "Variant Code" := '';
                                                                  "Bin Code" := '';
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Item No."));
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code")
                                                                  END;
                                                                  IF ("Entry Type" = "Entry Type"::Transfer) AND ("Location Code" = "New Location Code") THEN
                                                                    "New Bin Code" := "Bin Code";
                                                                END;

                                                                IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                IF "Item No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::"Work Center","Work Center No.");
                                                                  EXIT;
                                                                END;

                                                                GetItem;
                                                                Item.TESTFIELD(Blocked,FALSE);
                                                                Description := Item.Description;
                                                                "Inventory Posting Group" := Item."Inventory Posting Group";
                                                                "Item Category Code" := Item."Item Category Code";
                                                                "Product Group Code" := Item."Product Group Code";

                                                                IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
                                                                   ("Item Charge No." <> '')
                                                                THEN BEGIN
                                                                  IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                    TESTFIELD("Partial Revaluation",FALSE);
                                                                    RetrieveCosts;
                                                                    "Indirect Cost %" := 0;
                                                                    "Overhead Rate" := 0;
                                                                    "Inventory Value Per" := "Inventory Value Per"::" ";
                                                                    VALIDATE("Applies-to Entry",0);
                                                                    "Partial Revaluation" := FALSE;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Indirect Cost %" := Item."Indirect Cost %";
                                                                  "Overhead Rate" := Item."Overhead Rate";
                                                                  IF NOT "Phys. Inventory" OR (Item."Costing Method" = Item."Costing Method"::Standard) THEN BEGIN
                                                                    RetrieveCosts;
                                                                    "Unit Cost" := UnitCost;
                                                                  END ELSE
                                                                    UnitCost := "Unit Cost";
                                                                END;

                                                                IF (("Entry Type" = "Entry Type"::Output) AND (WorkCenter."No." = '') AND (MachineCenter."No." = '')) OR
                                                                   ("Entry Type" <> "Entry Type"::Output) OR
                                                                   ("Value Entry Type" = "Value Entry Type"::Revaluation)
                                                                THEN
                                                                  "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";

                                                                CASE "Entry Type" OF
                                                                  "Entry Type"::Purchase,
                                                                  "Entry Type"::Output:
                                                                    PurchPriceCalcMgt.FindItemJnlLinePrice(Rec,FIELDNO("Item No."));
                                                                  "Entry Type"::"Positive Adjmt.",
                                                                  "Entry Type"::"Negative Adjmt.",
                                                                  "Entry Type"::Consumption:
                                                                    "Unit Amount" := UnitCost;
                                                                  "Entry Type"::Sale:
                                                                    SalesPriceCalcMgt.FindItemJnlLinePrice(Rec,FIELDNO("Item No."));
                                                                  "Entry Type"::Transfer:
                                                                    BEGIN
                                                                      "Unit Amount" := 0;
                                                                      "Unit Cost" := 0;
                                                                      Amount := 0;
                                                                    END;
                                                                END;

                                                                CASE "Entry Type" OF
                                                                  "Entry Type"::Purchase:
                                                                    "Unit of Measure Code" := Item."Purch. Unit of Measure";
                                                                  "Entry Type"::Sale:
                                                                    "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                  "Entry Type"::Output:
                                                                    BEGIN
                                                                      Item.TESTFIELD("Inventory Value Zero",FALSE);
                                                                      SetFilterProdOrderLine;
                                                                      ProdOrderLine.SETRANGE("Item No.","Item No.");
                                                                      IF ProdOrderLine.FIND('-') THEN BEGIN
                                                                        "Routing No." := ProdOrderLine."Routing No.";
                                                                        "Source Type" := "Source Type"::Item;
                                                                        "Source No." := ProdOrderLine."Item No.";
                                                                      END ELSE
                                                                        IF ("Value Entry Type" <> "Value Entry Type"::Revaluation) AND
                                                                           (CurrFieldNo <> 0)
                                                                        THEN
                                                                          ERROR(Text031,"Item No.","Prod. Order No.");
                                                                      IF ProdOrderLine.COUNT = 1 THEN BEGIN
                                                                        VALIDATE("Prod. Order Line No.",ProdOrderLine."Line No.");
                                                                        "Routing Reference No." := ProdOrderLine."Routing Reference No.";
                                                                        "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
                                                                        "Location Code" := ProdOrderLine."Location Code";
                                                                        VALIDATE("Variant Code",ProdOrderLine."Variant Code");
                                                                        VALIDATE("Bin Code",ProdOrderLine."Bin Code");
                                                                      END ELSE
                                                                        "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                    END;
                                                                  "Entry Type"::Consumption:
                                                                    BEGIN
                                                                      SetFilterProdOrderComp;
                                                                      ProdOrderComp.SETRANGE("Item No.","Item No.");
                                                                      IF ProdOrderComp.COUNT = 1 THEN BEGIN
                                                                        ProdOrderComp.FIND('-');
                                                                        VALIDATE("Prod. Order Line No.",ProdOrderComp."Prod. Order Line No.");
                                                                        VALIDATE("Prod. Order Comp. Line No.",ProdOrderComp."Line No.");
                                                                        "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
                                                                        "Location Code" := ProdOrderComp."Location Code";
                                                                        VALIDATE("Variant Code",ProdOrderComp."Variant Code");
                                                                        VALIDATE("Bin Code",ProdOrderComp."Bin Code");
                                                                      END ELSE BEGIN
                                                                        "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                        VALIDATE("Prod. Order Comp. Line No.",0);
                                                                      END;
                                                                    END;
                                                                  ELSE
                                                                    "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                END;

                                                                IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN
                                                                  "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                VALIDATE("Unit of Measure Code");

                                                                CheckItemAvailable(FIELDNO("Item No."));

                                                                IF ("Prod. Order No." = '') AND NOT "Phys. Inventory" THEN
                                                                  CreateDim(
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::"Work Center","Work Center No.");

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto] }
    { 4   ;   ;Posting Date        ;Date          ;OnValidate=VAR
                                                                CheckDateConflict@1000 : Codeunit 99000815;
                                                              BEGIN
                                                                VALIDATE("Document Date","Posting Date");
                                                                CheckDateConflict.ItemJnlLineCheck(Rec,CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 5   ;   ;Entry Type          ;Option        ;OnValidate=BEGIN
                                                                IF NOT ("Entry Type" IN ["Entry Type"::"Positive Adjmt.","Entry Type"::"Negative Adjmt."]) THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF CurrFieldNo <> 0 THEN
                                                                  WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Entry Type"));

                                                                CASE "Entry Type" OF
                                                                  "Entry Type"::Purchase:
                                                                    IF UserMgt.GetRespCenter(1,'') <> '' THEN
                                                                      "Location Code" := UserMgt.GetLocation(1,'',UserMgt.GetPurchasesFilter);
                                                                  "Entry Type"::Sale:
                                                                    IF UserMgt.GetRespCenter(0,'') <> '' THEN
                                                                      "Location Code" := UserMgt.GetLocation(0,'',UserMgt.GetSalesFilter);
                                                                END;

                                                                IF xRec."Location Code" = '' THEN
                                                                  IF Location.GET("Location Code") THEN
                                                                    IF  Location."Directed Put-away and Pick" THEN
                                                                      "Location Code" := '';

                                                                IF "Item No." <> '' THEN
                                                                  VALIDATE("Location Code");

                                                                VALIDATE("Item No.");
                                                                IF "Entry Type" <> "Entry Type"::Transfer THEN BEGIN
                                                                  "New Location Code" := '';
                                                                  "New Bin Code" := '';
                                                                END;

                                                                IF "Entry Type" <> "Entry Type"::Output THEN
                                                                  Type := Type::" ";

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Entry Type;
                                                              ESP=Tipo movimiento];
                                                   OptionCaptionML=[ENU=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output;
                                                                    ESP=Compra,Venta,Ajuste positivo,Ajuste negativo,Transferencia,Consumo,Salida desde fab.];
                                                   OptionString=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output }
    { 6   ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Item)) Item;
                                                   CaptionML=[ENU=Source No.;
                                                              ESP=C¢d. procedencia mov.];
                                                   Editable=No }
    { 7   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento] }
    { 8   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 9   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                   ("Item Charge No." = '') AND
                                                                   ("No." = '')
                                                                THEN BEGIN
                                                                  GetUnitAmount(FIELDNO("Location Code"));
                                                                  "Unit Cost" := UnitCost;
                                                                  VALIDATE("Unit Amount");
                                                                  CheckItemAvailable(FIELDNO("Location Code"));
                                                                END;

                                                                IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Location Code"));
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
                                                                  END;
                                                                  IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
                                                                    "New Location Code" := "Location Code";
                                                                    "New Bin Code" := "Bin Code";
                                                                  END;
                                                                END;

                                                                VALIDATE("Unit of Measure Code");

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almacn] }
    { 10  ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ESP=Grupo contable existencias];
                                                   Editable=No }
    { 11  ;   ;Source Posting Group;Code10        ;TableRelation=IF (Source Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Source Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Source Type=CONST(Item)) "Inventory Posting Group";
                                                   CaptionML=[ENU=Source Posting Group;
                                                              ESP=Grupo contable origen];
                                                   Editable=No }
    { 13  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                CallWhseCheck@1000 : Boolean;
                                                              BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                CallWhseCheck :=
                                                                  ("Entry Type" = "Entry Type"::Consumption) OR
                                                                  ("Entry Type" = "Entry Type"::Output) AND
                                                                  LastOutputOperation(Rec);
                                                                IF CallWhseCheck THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                IF CurrFieldNo <> 0 THEN
                                                                  WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION(Quantity));

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF ("Entry Type" = "Entry Type"::Output) AND
                                                                   ("Value Entry Type" <> "Value Entry Type"::Revaluation)
                                                                THEN
                                                                  "Invoiced Quantity" := 0
                                                                ELSE
                                                                  "Invoiced Quantity" := Quantity;
                                                                "Invoiced Qty. (Base)" := CalcBaseQty("Invoiced Quantity");

                                                                GetUnitAmount(FIELDNO(Quantity));
                                                                UpdateAmount;

                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
                                                                  "Qty. (Calculated)" := 0;
                                                                  "Qty. (Phys. Inventory)" := 0;
                                                                  "Last Item Ledger Entry No." := 0;
                                                                END;

                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                IF ABS("Quantity (Base)") < ABS("Reserved Qty. (Base)") THEN
                                                                  ERROR(Text001,FIELDCAPTION("Reserved Qty. (Base)"));

                                                                IF Item."Item Tracking Code" <> '' THEN
                                                                  ReserveItemJnlLine.VerifyQuantity(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5 }
    { 15  ;   ;Invoiced Quantity   ;Decimal       ;CaptionML=[ENU=Invoiced Quantity;
                                                              ESP=Cantidad facturada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 16  ;   ;Unit Amount         ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmount;
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN
                                                                    "Unit Cost" := "Unit Amount"
                                                                  ELSE
                                                                    CASE "Entry Type" OF
                                                                      "Entry Type"::Purchase,
                                                                      "Entry Type"::"Positive Adjmt.":
                                                                        BEGIN
                                                                          IF "Entry Type" = "Entry Type"::"Positive Adjmt." THEN BEGIN
                                                                            GetItem;
                                                                            IF (CurrFieldNo = FIELDNO("Unit Amount")) AND
                                                                               (Item."Costing Method" = Item."Costing Method"::Standard)
                                                                            THEN
                                                                              ERROR(
                                                                                Text002,
                                                                                FIELDCAPTION("Unit Amount"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                          END;

                                                                          ReadGLSetup;
                                                                          IF "Entry Type" = "Entry Type"::Purchase THEN
                                                                            "Unit Cost" := "Unit Amount";
                                                                          IF "Entry Type" = "Entry Type"::"Positive Adjmt." THEN
                                                                            "Unit Cost" :=
                                                                              ROUND(
                                                                                "Unit Amount" * (1 + "Indirect Cost %" / 100),GLSetup."Unit-Amount Rounding Precision") +
                                                                              "Overhead Rate" * "Qty. per Unit of Measure";
                                                                          IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                             ("Item Charge No." = '')
                                                                          THEN
                                                                            VALIDATE("Unit Cost");
                                                                        END;
                                                                      "Entry Type"::"Negative Adjmt.",
                                                                      "Entry Type"::Consumption:
                                                                        BEGIN
                                                                          GetItem;
                                                                          IF (CurrFieldNo = FIELDNO("Unit Amount")) AND
                                                                             (Item."Costing Method" = Item."Costing Method"::Standard)
                                                                          THEN
                                                                            ERROR(
                                                                              Text002,
                                                                              FIELDCAPTION("Unit Amount"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                          "Unit Cost" := "Unit Amount";
                                                                          IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                             ("Item Charge No." = '')
                                                                          THEN
                                                                            VALIDATE("Unit Cost");
                                                                        END;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Unit Amount;
                                                              ESP=Precio unitario];
                                                   AutoFormatType=2 }
    { 17  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");
                                                                RetrieveCosts;
                                                                IF "Entry Type" IN ["Entry Type"::Purchase,"Entry Type"::"Positive Adjmt.","Entry Type"::Consumption] THEN BEGIN
                                                                  IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
                                                                    IF CurrFieldNo = FIELDNO("Unit Cost") THEN
                                                                      ERROR(
                                                                        Text002,
                                                                        FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                    "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                  END;
                                                                END;

                                                                IF ("Item Charge No." = '') AND
                                                                   ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                   (CurrFieldNo = FIELDNO("Unit Cost"))
                                                                THEN BEGIN
                                                                  CASE "Entry Type" OF
                                                                    "Entry Type"::Purchase:
                                                                      "Unit Amount" := "Unit Cost";
                                                                    "Entry Type"::"Positive Adjmt.":
                                                                      BEGIN
                                                                        ReadGLSetup;
                                                                        "Unit Amount" :=
                                                                          ROUND(
                                                                            ("Unit Cost" - "Overhead Rate" * "Qty. per Unit of Measure") / (1 + "Indirect Cost %" / 100),
                                                                            GLSetup."Unit-Amount Rounding Precision")
                                                                      END;
                                                                    "Entry Type"::"Negative Adjmt.",
                                                                    "Entry Type"::Consumption:
                                                                      BEGIN
                                                                        IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                          ERROR(
                                                                            Text002,
                                                                            FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                        "Unit Amount" := "Unit Cost";
                                                                      END;
                                                                  END;
                                                                  UpdateAmount;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Unit Cost;
                                                              ESP=Coste unitario];
                                                   AutoFormatType=2 }
    { 18  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Quantity);
                                                                "Unit Amount" := Amount / Quantity;
                                                                VALIDATE("Unit Amount");
                                                                ReadGLSetup;
                                                                "Unit Amount" := ROUND("Unit Amount",GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ESP=Importe];
                                                   AutoFormatType=1 }
    { 22  ;   ;Discount Amount     ;Decimal       ;CaptionML=[ENU=Discount Amount;
                                                              ESP=Importe dto.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 23  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                IF "Prod. Order No." = '' THEN
                                                                  CreateDim(
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              ESP=C¢d. vendedor/comprador] }
    { 26  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ESP=C¢d. origen];
                                                   Editable=No }
    { 29  ;   ;Applies-to Entry    ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Applies-to Entry" <> 0 THEN BEGIN
                                                                  ItemLedgEntry.GET("Applies-to Entry");

                                                                  IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN BEGIN
                                                                    IF "Inventory Value Per" <> "Inventory Value Per"::" " THEN
                                                                      ERROR(Text006,FIELDCAPTION("Applies-to Entry"));
                                                                    InitRevalJnlLine(ItemLedgEntry);
                                                                    ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  END ELSE BEGIN
                                                                    TESTFIELD(Quantity);
                                                                    IF Signed(Quantity) * ItemLedgEntry.Quantity > 0 THEN BEGIN
                                                                      IF Quantity > 0 THEN
                                                                        FIELDERROR(Quantity,Text030);
                                                                      IF Quantity < 0 THEN
                                                                        FIELDERROR(Quantity,Text029);
                                                                    END;
                                                                    IF NOT ItemLedgEntry.Open THEN
                                                                      MESSAGE(Text032,"Applies-to Entry");

                                                                    IF "Entry Type" = "Entry Type"::Output THEN BEGIN
                                                                      ItemLedgEntry.TESTFIELD("Prod. Order No.","Prod. Order No.");
                                                                      ItemLedgEntry.TESTFIELD("Prod. Order Line No.","Prod. Order Line No.");
                                                                      ItemLedgEntry.TESTFIELD("Entry Type","Entry Type");
                                                                    END;
                                                                  END;

                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  "Variant Code" := ItemLedgEntry."Variant Code";
                                                                END ELSE BEGIN
                                                                  IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN BEGIN
                                                                    VALIDATE("Unit Amount",0);
                                                                    VALIDATE(Quantity,0);
                                                                    "Inventory Value (Calculated)" := 0;
                                                                    "Inventory Value (Revalued)" := 0;
                                                                    "Location Code" := '';
                                                                    "Variant Code" := '';
                                                                    "Bin Code" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Applies-to Entry"));
                                                            END;

                                                   CaptionML=[ENU=Applies-to Entry;
                                                              ESP=Liq. por n§ orden] }
    { 32  ;   ;Item Shpt. Entry No.;Integer       ;CaptionML=[ENU=Item Shpt. Entry No.;
                                                              ESP=N§ orden mov. producto asoc.];
                                                   Editable=No }
    { 34  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1];
                                                   CaptionClass='1,2,1' }
    { 35  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2];
                                                   CaptionClass='1,2,2' }
    { 37  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");
                                                                TESTFIELD("Value Entry Type","Value Entry Type"::"Direct Cost");
                                                                TESTFIELD("Item Charge No.",'');
                                                                IF "Entry Type" IN ["Entry Type"::Sale,"Entry Type"::"Negative Adjmt."] THEN
                                                                  ERROR(
                                                                    Text003,
                                                                    "Entry Type",FIELDCAPTION("Entry Type"),FIELDCAPTION("Indirect Cost %"));

                                                                GetItem;
                                                                IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                  ERROR(
                                                                    Text002,
                                                                    FIELDCAPTION("Indirect Cost %"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");

                                                                IF "Entry Type" <> "Entry Type"::Purchase THEN
                                                                  "Unit Cost" :=
                                                                    ROUND(
                                                                      "Unit Amount" * (1 + "Indirect Cost %" / 100) +
                                                                      "Overhead Rate" * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ESP=% Coste indirecto];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0 }
    { 39  ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              ESP=Tipo procedencia mov.];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Item";
                                                                    ESP=" ,Cliente,Proveedor,Producto"];
                                                   OptionString=[ ,Customer,Vendor,Item];
                                                   Editable=No }
    { 41  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Item Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              ESP=Nombre secci¢n diario] }
    { 42  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ESP=C¢d. auditor¡a] }
    { 43  ;   ;Recurring Method    ;Option        ;CaptionML=[ENU=Recurring Method;
                                                              ESP=Periodicidad];
                                                   OptionCaptionML=[ENU=,Fixed,Variable;
                                                                    ESP=,Fija,Variable];
                                                   OptionString=,Fixed,Variable;
                                                   BlankZero=Yes }
    { 44  ;   ;Expiration Date     ;Date          ;CaptionML=[ENU=Expiration Date;
                                                              ESP=Fecha caducidad] }
    { 45  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=[ENU=Recurring Frequency;
                                                              ESP=Frecuencia repetici¢n] }
    { 46  ;   ;Drop Shipment       ;Boolean       ;CaptionML=[ENU=Drop Shipment;
                                                              ESP=Env¡o directo];
                                                   Editable=No }
    { 47  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ESP=Naturaleza transacci¢n] }
    { 48  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ESP=Modo transporte] }
    { 49  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ESP=C¢d. pa¡s/regi¢n] }
    { 50  ;   ;New Location Code   ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                IF "New Location Code" <> xRec."New Location Code" THEN BEGIN
                                                                  "New Bin Code" := '';
                                                                  IF ("New Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("New Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","New Location Code","New Bin Code")
                                                                  END;
                                                                END;

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=New Location Code;
                                                              ESP=C¢d. almacn destino] }
    { 51  ;   ;New Shortcut Dimension 1 Code;Code20;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                ValidateNewShortcutDimCode(1,"New Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=New Shortcut Dimension 1 Code;
                                                              ESP=Nuevo acc. directo c¢d. dim. 1];
                                                   CaptionClass='1,2,1,' + Text007 }
    { 52  ;   ;New Shortcut Dimension 2 Code;Code20;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                ValidateNewShortcutDimCode(2,"New Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=New Shortcut Dimension 2 Code;
                                                              ESP=Nuevo acc. directo c¢d. dim. 2];
                                                   CaptionClass='1,2,2,' + Text007 }
    { 53  ;   ;Qty. (Calculated)   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. (Phys. Inventory)");
                                                              END;

                                                   CaptionML=[ENU=Qty. (Calculated);
                                                              ESP=Stock calculado];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 54  ;   ;Qty. (Phys. Inventory);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Phys. Inventory",TRUE);

                                                                IF CurrFieldNo <> 0 THEN
                                                                  WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Qty. (Phys. Inventory)"));

                                                                PhysInvtEntered := TRUE;
                                                                Quantity := 0;
                                                                IF "Qty. (Phys. Inventory)" >= "Qty. (Calculated)" THEN BEGIN
                                                                  VALIDATE("Entry Type","Entry Type"::"Positive Adjmt.");
                                                                  VALIDATE(Quantity,"Qty. (Phys. Inventory)" - "Qty. (Calculated)");
                                                                END ELSE BEGIN
                                                                  VALIDATE("Entry Type","Entry Type"::"Negative Adjmt.");
                                                                  VALIDATE(Quantity,"Qty. (Calculated)" - "Qty. (Phys. Inventory)");
                                                                END;
                                                                PhysInvtEntered := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Qty. (Phys. Inventory);
                                                              ESP=Cdad. (stock f¡sico)];
                                                   DecimalPlaces=0:5 }
    { 55  ;   ;Last Item Ledger Entry No.;Integer ;TableRelation="Item Ledger Entry";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Last Item Ledger Entry No.;
                                                              ESP=N§ l¡nea £lt. diario producto];
                                                   Editable=No }
    { 56  ;   ;Phys. Inventory     ;Boolean       ;CaptionML=[ENU=Phys. Inventory;
                                                              ESP=Inventario f¡sico];
                                                   Editable=No }
    { 57  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ESP=Grupo contable negocio] }
    { 58  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ESP=Grupo contable producto] }
    { 59  ;   ;Entry/Exit Point    ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Entry/Exit Point;
                                                              ESP=Puerto/Aeropuerto] }
    { 60  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ESP=Fecha emisi¢n documento] }
    { 62  ;   ;External Document No.;Code20       ;CaptionML=[ENU=External Document No.;
                                                              ESP=N§ documento externo] }
    { 63  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ESP=C¢d. provincia] }
    { 64  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ESP=Especificaci¢n transacci¢n] }
    { 65  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posting No. Series;
                                                              ESP=N§ serie registro] }
    { 68  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Journal Template Name),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(83),
                                                                                                       Source Subtype=FIELD(Entry Type),
                                                                                                       Source Batch Name=FIELD(Journal Batch Name),
                                                                                                       Source Prod. Order Line=CONST(0),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ESP=Cantidad reservada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 72  ;   ;Unit Cost (ACY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (ACY);
                                                              ESP=Coste unitario (DA)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 73  ;   ;Source Currency Code;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Source Currency Code;
                                                              ESP=C¢d. divisa origen];
                                                   Editable=No }
    { 79  ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento];
                                                   OptionCaptionML=[ENU=" ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo";
                                                                    ESP=" ,Albar n venta,Factura venta,Recep. devol. ventas,Abono venta,Albar n compra,Factura compra,Env¡o devoluci¢n compra,Abono compra,Env¡o transfer.,Recep. transfer.,Servicio regis.,Factura ventas,Abono ventas"];
                                                   OptionString=[ ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo] }
    { 80  ;   ;Document Line No.   ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              ESP=N§ l¡n. documento] }
    { 1000;   ;Job No.             ;Code20        ;CaptionML=[ENU=Job No.;
                                                              ESP=N§ proyecto] }
    { 1001;   ;Job Task No.        ;Code20        ;CaptionML=[ENU=Job Task No.;
                                                              ESP=N§ tarea proyecto] }
    { 1002;   ;Job Purchase        ;Boolean       ;CaptionML=[ENU=Job Purchase;
                                                              ESP=Compra proyecto] }
    { 5401;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=CONST(Released));
                                                   OnValidate=BEGIN
                                                                IF "Prod. Order No." = '' THEN BEGIN
                                                                  CreateProdDim(
                                                                    DATABASE::"Production Order","Prod. Order No.",
                                                                    DATABASE::"Prod. Order Line",FORMAT("Prod. Order Line No."),
                                                                    DATABASE::"Prod. Order Component",FORMAT("Prod. Order Comp. Line No."));
                                                                  EXIT;
                                                                END;

                                                                GetMfgSetup;
                                                                IF MfgSetup."Doc. No. Is Prod. Order No." THEN
                                                                  "Document No." := "Prod. Order No.";
                                                                ProdOrder.GET(ProdOrder.Status::Released,"Prod. Order No.");
                                                                ProdOrder.TESTFIELD(Blocked,FALSE);
                                                                Description := ProdOrder.Description;

                                                                "Gen. Bus. Posting Group" := '';
                                                                CASE TRUE OF
                                                                  "Entry Type" = "Entry Type"::Output:
                                                                    BEGIN
                                                                      "Inventory Posting Group" := ProdOrder."Inventory Posting Group";
                                                                      "Gen. Prod. Posting Group" := ProdOrder."Gen. Prod. Posting Group";
                                                                    END;
                                                                  "Entry Type" = "Entry Type"::Consumption:
                                                                    BEGIN
                                                                      SetFilterProdOrderLine;
                                                                      ProdOrderLine.FIND('-');
                                                                      IF ProdOrderLine.COUNT = 1 THEN
                                                                        VALIDATE("Prod. Order Line No.",ProdOrderLine."Line No.");
                                                                    END;
                                                                END;

                                                                IF "Prod. Order No." <> xRec."Prod. Order No." THEN
                                                                  CreateProdDim(
                                                                    DATABASE::"Production Order","Prod. Order No.",
                                                                    DATABASE::"Prod. Order Line",FORMAT("Prod. Order Line No."),
                                                                    DATABASE::"Prod. Order Component",FORMAT("Prod. Order Comp. Line No."));
                                                              END;

                                                   CaptionML=[ENU=Prod. Order No.;
                                                              ESP=N§ orden producci¢n] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                IF "Variant Code" <> xRec."Variant Code" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Variant Code"));
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code")
                                                                  END;
                                                                  IF ("Entry Type" = "Entry Type"::Transfer) AND ("Location Code" = "New Location Code") THEN
                                                                    "New Bin Code" := "Bin Code";
                                                                END;
                                                                IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                   ("Item Charge No." = '')
                                                                THEN BEGIN
                                                                  GetUnitAmount(FIELDNO("Variant Code"));
                                                                  "Unit Cost" := UnitCost;
                                                                  VALIDATE("Unit Amount");
                                                                  VALIDATE("Unit of Measure Code");
                                                                  ReserveItemJnlLine.VerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;

                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Entry Type=FILTER(Purchase|Positive Adjmt.|Output),
                                                                     Quantity=FILTER(>=0)) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                           Item Filter=FIELD(Item No.),
                                                                                                           Variant Filter=FIELD(Variant Code))
                                                                                                           ELSE IF (Entry Type=FILTER(Purchase|Positive Adjmt.|Output),
                                                                                                                    Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                         Item No.=FIELD(Item No.),
                                                                                                                                                                         Variant Code=FIELD(Variant Code))
                                                                                                                                                                         ELSE IF (Entry Type=FILTER(Sale|Negative Adjmt.|Transfer|Consumption),
                                                                                                                                                                                  Quantity=FILTER(>0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                                                       Item No.=FIELD(Item No.),
                                                                                                                                                                                                                                       Variant Code=FIELD(Variant Code))
                                                                                                                                                                                                                                       ELSE IF (Entry Type=FILTER(Sale|Negative Adjmt.|Transfer|Consumption),
                                                                                                                                                                                                                                                Quantity=FILTER(<=0)) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                                                                                                      Item Filter=FIELD(Item No.),
                                                                                                                                                                                                                                                                                      Variant Filter=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                IF "Bin Code" <> xRec."Bin Code" THEN BEGIN
                                                                  TESTFIELD("Location Code");
                                                                  IF "Bin Code" <> '' THEN BEGIN
                                                                    GetBin("Location Code","Bin Code");
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Bin Code"));
                                                                    TESTFIELD("Location Code",Bin."Location Code");
                                                                  END;
                                                                  IF ("Entry Type" = "Entry Type"::Transfer) AND ("Location Code" = "New Location Code") THEN
                                                                    "New Bin Code" := "Bin Code";

                                                                  IF ("Entry Type" = "Entry Type"::Output) AND
                                                                     ("Bin Code" <> '') AND
                                                                     LastOutputOperation(Rec)
                                                                  THEN BEGIN
                                                                    TESTFIELD("Prod. Order No.");
                                                                    ProdOrder.GET(ProdOrder.Status::Released,"Prod. Order No.");
                                                                    IF (ProdOrder."Bin Code" <> '') AND (ProdOrder."Bin Code" <> "Bin Code") THEN
                                                                      IF NOT CONFIRM(
                                                                           Text020,
                                                                           FALSE,
                                                                           FIELDCAPTION("Bin Code"),
                                                                           "Bin Code",
                                                                           ProdOrder."Bin Code",
                                                                           ProdOrder.TABLECAPTION,
                                                                           "Prod. Order No.")
                                                                      THEN
                                                                        ERROR(Text012);
                                                                  END;
                                                                END;

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5406;   ;New Bin Code        ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(New Location Code),
                                                                                 Item Filter=FIELD(Item No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Transfer);
                                                                IF "New Bin Code" <> xRec."New Bin Code" THEN BEGIN
                                                                  TESTFIELD("New Location Code");
                                                                  IF "New Bin Code" <> '' THEN BEGIN
                                                                    GetBin("New Location Code","New Bin Code");
                                                                    GetLocation("New Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF CurrFieldNo <> 0 THEN
                                                                      WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("New Bin Code"));
                                                                    TESTFIELD("New Location Code",Bin."Location Code");
                                                                  END;
                                                                END;

                                                                ReserveItemJnlLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=New Bin Code;
                                                              ESP=Nueva ubicaci¢n] }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                GetItem;
                                                                "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");

                                                                IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                IF CurrFieldNo <> 0 THEN
                                                                  WMSManagement.CheckItemJnlLineFieldChange(Rec,xRec,FIELDCAPTION("Unit of Measure Code"));

                                                                GetUnitAmount(FIELDNO("Unit of Measure Code"));
                                                                IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN
                                                                  TESTFIELD("Qty. per Unit of Measure",1);

                                                                ReadGLSetup;
                                                                "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");

                                                                IF "Entry Type" = "Entry Type"::Consumption THEN BEGIN
                                                                  "Indirect Cost %" := ROUND(Item."Indirect Cost %" * "Qty. per Unit of Measure",1);
                                                                  "Overhead Rate" :=
                                                                    ROUND(Item."Overhead Rate" * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                  "Unit Amount" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                END;

                                                                IF "No." <> '' THEN
                                                                  VALIDATE("Cap. Unit of Measure Code");

                                                                VALIDATE("Unit Amount");

                                                                IF "Entry Type" = "Entry Type"::Output THEN BEGIN
                                                                  VALIDATE("Output Quantity");
                                                                  VALIDATE("Scrap Quantity");
                                                                END ELSE
                                                                  VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida] }
    { 5408;   ;Derived from Blanket Order;Boolean ;CaptionML=[ENU=Derived from Blanket Order;
                                                              ESP=Proviene de ped. abierto];
                                                   Editable=No }
    { 5413;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base)];
                                                   DecimalPlaces=0:5 }
    { 5415;   ;Invoiced Qty. (Base);Decimal       ;CaptionML=[ENU=Invoiced Qty. (Base);
                                                              ESP=Cdad. facturada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5468;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Journal Template Name),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Source Type=CONST(83),
                                                                                                                Source Subtype=FIELD(Entry Type),
                                                                                                                Source Batch Name=FIELD(Journal Batch Name),
                                                                                                                Source Prod. Order Line=CONST(0),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ESP=Cdad. reservada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5560;   ;Level               ;Integer       ;CaptionML=[ENU=Level;
                                                              ESP=Nivel];
                                                   Editable=No }
    { 5561;   ;Flushing Method     ;Option        ;CaptionML=[ENU=Flushing Method;
                                                              ESP=Mtodo de baja];
                                                   OptionCaptionML=[ENU=Manual,Forward,Backward,Pick + Forward,Pick + Backward;
                                                                    ESP=Manual,Adelante,Atr s,Pick + Adelante,Pick + Atr s];
                                                   OptionString=Manual,Forward,Backward,Pick + Forward,Pick + Backward;
                                                   Editable=No }
    { 5562;   ;Changed by User     ;Boolean       ;CaptionML=[ENU=Changed by User;
                                                              ESP=Modificado por el usuario];
                                                   Editable=No }
    { 5700;   ;Cross-Reference No. ;Code20        ;CaptionML=[ENU=Cross-Reference No.;
                                                              ESP=N§ referencia cruzada] }
    { 5701;   ;Originally Ordered No.;Code20      ;TableRelation=Item;
                                                   CaptionML=[ENU=Originally Ordered No.;
                                                              ESP=N§ pedido originalmente] }
    { 5702;   ;Originally Ordered Var. Code;Code10;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Originally Ordered No.));
                                                   CaptionML=[ENU=Originally Ordered Var. Code;
                                                              ESP=C¢d. var. ped. originalmente] }
    { 5703;   ;Out-of-Stock Substitution;Boolean  ;CaptionML=[ENU=Out-of-Stock Substitution;
                                                              ESP=Sustituc. por falta de stock] }
    { 5704;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ESP=C¢d. categor¡a producto] }
    { 5705;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Nonstock;
                                                              ESP=Prod. sin stock] }
    { 5706;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ESP=C¢d. compra] }
    { 5707;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ESP=C¢d. grupo producto] }
    { 5740;   ;Transfer Order No.  ;Code20        ;CaptionML=[ENU=Transfer Order No.;
                                                              ESP=N§ ped. transfer.];
                                                   Editable=No }
    { 5791;   ;Planned Delivery Date;Date         ;CaptionML=[ENU=Planned Delivery Date;
                                                              ESP=Fecha entrega planificada] }
    { 5793;   ;Order Date          ;Date          ;CaptionML=[ENU=Order Date;
                                                              ESP=Fecha pedido] }
    { 5800;   ;Value Entry Type    ;Option        ;CaptionML=[ENU=Value Entry Type;
                                                              ESP=Tipo mov. valor];
                                                   OptionCaptionML=[ENU=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance;
                                                                    ESP=Coste directo,Revalorizaci¢n,Redondeo,Coste indirecto,Desviaci¢n];
                                                   OptionString=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance }
    { 5801;   ;Item Charge No.     ;Code20        ;TableRelation="Item Charge";
                                                   CaptionML=[ENU=Item Charge No.;
                                                              ESP=N§ cargo prod.] }
    { 5802;   ;Inventory Value (Calculated);Decimal;
                                                   OnValidate=BEGIN
                                                                ReadGLSetup;
                                                                "Unit Cost (Calculated)" :=
                                                                  ROUND("Inventory Value (Calculated)" / Quantity,GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Inventory Value (Calculated);
                                                              ESP=Valor inventario (calculado)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5803;   ;Inventory Value (Revalued);Decimal ;OnValidate=VAR
                                                                NewUnitCost@1000 : Decimal;
                                                              BEGIN
                                                                TESTFIELD("Value Entry Type","Value Entry Type"::Revaluation);
                                                                VALIDATE(Amount,"Inventory Value (Revalued)" - "Inventory Value (Calculated)");
                                                                ReadGLSetup;
                                                                IF ("Unit Cost (Revalued)" <> xRec."Unit Cost (Revalued)") OR
                                                                   ("Inventory Value (Revalued)" <> xRec."Inventory Value (Revalued)")
                                                                THEN BEGIN
                                                                  NewUnitCost :=
                                                                    ROUND("Inventory Value (Revalued)" / Quantity,GLSetup."Unit-Amount Rounding Precision");
                                                                  IF (CurrFieldNo = FIELDNO("Unit Cost (Revalued)")) AND
                                                                     (NewUnitCost <> "Unit Cost (Revalued)")
                                                                  THEN
                                                                    IF NOT CONFIRM(Text011,TRUE,"Unit Cost (Revalued)",NewUnitCost) THEN
                                                                      ERROR(Text012);

                                                                  "Unit Cost (Revalued)" := NewUnitCost;
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    ClearSingleAndRolledUpCosts;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Inventory Value (Revalued);
                                                              ESP=Valor existen. (revalorado)];
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 5804;   ;Variance Type       ;Option        ;CaptionML=[ENU=Variance Type;
                                                              ESP=Tipo desviaci¢n];
                                                   OptionCaptionML=[ENU=" ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead";
                                                                    ESP=" ,Compras,Materiales,Capacidad,Gastos gen. capacidad,Gastos gen. fabr."];
                                                   OptionString=[ ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead] }
    { 5805;   ;Inventory Value Per ;Option        ;CaptionML=[ENU=Inventory Value Per;
                                                              ESP=Valor inventario por];
                                                   OptionCaptionML=[ENU=" ,Item,Location,Variant,Location and Variant";
                                                                    ESP=" ,Prod.,Almacn,Variante,Almacn y variante"];
                                                   OptionString=[ ,Item,Location,Variant,Location and Variant];
                                                   Editable=No }
    { 5806;   ;Partial Revaluation ;Boolean       ;CaptionML=[ENU=Partial Revaluation;
                                                              ESP=Revalorizaci¢n parcial];
                                                   Editable=No }
    { 5807;   ;Applies-from Entry  ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemTrackingLines@1001 : Form 6510;
                                                              BEGIN
                                                                IF "Applies-from Entry" <> 0 THEN BEGIN
                                                                  TESTFIELD(Quantity);
                                                                  IF Signed(Quantity) < 0 THEN BEGIN
                                                                    IF Quantity > 0 THEN
                                                                      FIELDERROR(Quantity,Text030);
                                                                    IF Quantity < 0 THEN
                                                                      FIELDERROR(Quantity,Text029);
                                                                  END;
                                                                  ItemLedgEntry.GET("Applies-from Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,FALSE);
                                                                  IF (ItemLedgEntry."Lot No." <> '') OR (ItemLedgEntry."Serial No." <> '') THEN
                                                                    ERROR(Text033,FIELDCAPTION("Applies-from Entry"),ItemTrackingLines.CAPTION);
                                                                  "Unit Cost" := CalcUnitCost(ItemLedgEntry);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Applies-from Entry"));
                                                            END;

                                                   CaptionML=[ENU=Applies-from Entry;
                                                              ESP=Liquidar por mov.];
                                                   MinValue=0 }
    { 5808;   ;Invoice No.         ;Code20        ;CaptionML=[ENU=Invoice No.;
                                                              ESP=N§ factura] }
    { 5809;   ;Unit Cost (Calculated);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Value Entry Type","Value Entry Type"::Revaluation);
                                                              END;

                                                   CaptionML=[ENU=Unit Cost (Calculated);
                                                              ESP=Prec. coste (calculado)];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 5810;   ;Unit Cost (Revalued);Decimal       ;OnValidate=BEGIN
                                                                ReadGLSetup;
                                                                TESTFIELD("Value Entry Type","Value Entry Type"::Revaluation);
                                                                IF "Unit Cost (Revalued)" <> xRec."Unit Cost (Revalued)" THEN
                                                                  VALIDATE(
                                                                    "Inventory Value (Revalued)",
                                                                    ROUND(
                                                                      "Unit Cost (Revalued)" * Quantity,GLSetup."Amount Rounding Precision"));
                                                              END;

                                                   CaptionML=[ENU=Unit Cost (Revalued);
                                                              ESP=Prec. coste (revaluado)];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 5811;   ;Applied Amount      ;Decimal       ;CaptionML=[ENU=Applied Amount;
                                                              ESP=Importe conciliado];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5812;   ;Update Standard Cost;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Inventory Value Per");
                                                                GetItem;
                                                                Item.TESTFIELD("Costing Method",Item."Costing Method"::Standard);
                                                              END;

                                                   CaptionML=[ENU=Update Standard Cost;
                                                              ESP=Actlzr. coste est ndar] }
    { 5813;   ;Amount (ACY)        ;Decimal       ;CaptionML=[ENU=Amount (ACY);
                                                              ESP=Importe (DA)];
                                                   AutoFormatType=1 }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ESP=Correcci¢n] }
    { 5818;   ;Adjustment          ;Boolean       ;CaptionML=[ENU=Adjustment;
                                                              ESP=Ajuste] }
    { 5819;   ;Applies-to Value Entry;Integer     ;CaptionML=[ENU=Applies-to Value Entry;
                                                              ESP=Liq. por mov. valor] }
    { 5820;   ;Invoice-to Source No.;Code20       ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor;
                                                   CaptionML=[ENU=Invoice-to Source No.;
                                                              ESP=Factura a N§ origen] }
    { 5830;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Output);
                                                                VALIDATE("No.",'');
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionCaptionML=[ENU="Work Center,Machine Center, ";
                                                                    ESP="Centro trabajo,Centro m quina, "];
                                                   OptionString=[Work Center,Machine Center, ] }
    { 5831;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Machine Center)) "Machine Center"
                                                                 ELSE IF (Type=CONST(Work Center)) "Work Center";
                                                   OnValidate=VAR
                                                                JnlLineDim@1000 : Record 356;
                                                              BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Output);
                                                                IF "No." = '' THEN BEGIN
                                                                  "Work Center No." := '';
                                                                  VALIDATE("Item No.");
                                                                  CreateDim(
                                                                    DATABASE::"Work Center","Work Center No.",
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code");
                                                                  EXIT;
                                                                END;

                                                                CASE Type OF
                                                                  Type::"Work Center":
                                                                    BEGIN
                                                                      WorkCenter.GET("No.");
                                                                      WorkCenter.TESTFIELD(Blocked,FALSE);
                                                                      "Work Center No." := WorkCenter."No.";
                                                                      Description := WorkCenter.Name;
                                                                      "Gen. Prod. Posting Group" := WorkCenter."Gen. Prod. Posting Group";
                                                                      "Unit Cost Calculation" := WorkCenter."Unit Cost Calculation";
                                                                    END;
                                                                  Type::"Machine Center":
                                                                    BEGIN
                                                                      MachineCenter.GET("No.");
                                                                      MachineCenter.TESTFIELD(Blocked,FALSE);
                                                                      "Work Center No." := MachineCenter."Work Center No.";
                                                                      Description := MachineCenter.Name;
                                                                      WorkCenter.GET("Work Center No.");
                                                                      WorkCenter.TESTFIELD(Blocked,FALSE);
                                                                      "Gen. Prod. Posting Group" := MachineCenter."Gen. Prod. Posting Group";
                                                                      "Unit Cost Calculation" := "Unit Cost Calculation"::Time;
                                                                    END;
                                                                END;

                                                                IF Type <> Type::" " THEN BEGIN
                                                                  "Work Center No." := WorkCenter."No.";
                                                                  VALIDATE("Cap. Unit of Measure Code",WorkCenter."Unit of Measure Code");
                                                                END;

                                                                IF "Work Center No." <> xRec."Work Center No." THEN BEGIN
                                                                  IF "Prod. Order No." <> '' THEN BEGIN
                                                                    JnlLineDim.SETRANGE("Table ID",DATABASE::"Item Journal Line");
                                                                    JnlLineDim.SETRANGE("Journal Template Name","Journal Template Name");
                                                                    JnlLineDim.SETRANGE("Journal Batch Name","Journal Batch Name");
                                                                    JnlLineDim.SETRANGE("Journal Line No.","Line No.");
                                                                    IF JnlLineDim.ISEMPTY THEN
                                                                      DimMgt.MoveTempDimToBuf
                                                                    ELSE
                                                                      DimMgt.MoveJnlLineDimToBuf(JnlLineDim);
                                                                  END;
                                                                  CreateDim(
                                                                    DATABASE::"Work Center","Work Center No.",
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 5838;   ;Operation No.       ;Code10        ;TableRelation="Prod. Order Routing Line"."Operation No." WHERE (Status=CONST(Released),
                                                                                                                   Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                                   Routing No.=FIELD(Routing No.),
                                                                                                                   Routing Reference No.=FIELD(Routing Reference No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Output);
                                                                IF "Operation No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Prod. Order No.");
                                                                TESTFIELD("Item No.");

                                                                GetProdOrderRtngLine;

                                                                Type := ProdOrderRtngLine.Type;
                                                                VALIDATE("No.",ProdOrderRtngLine."No.");
                                                                Description := ProdOrderRtngLine.Description;
                                                              END;

                                                   CaptionML=[ENU=Operation No.;
                                                              ESP=N§ operaci¢n] }
    { 5839;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=[ENU=Work Center No.;
                                                              ESP=N§ centro trabajo];
                                                   Editable=No }
    { 5841;   ;Setup Time          ;Decimal       ;OnValidate=BEGIN
                                                                "Setup Time (Base)" := CalcBaseTime("Setup Time");
                                                              END;

                                                   CaptionML=[ENU=Setup Time;
                                                              ESP=Tiempo preparaci¢n];
                                                   DecimalPlaces=0:5 }
    { 5842;   ;Run Time            ;Decimal       ;OnValidate=BEGIN
                                                                "Run Time (Base)" := CalcBaseTime("Run Time");
                                                              END;

                                                   CaptionML=[ENU=Run Time;
                                                              ESP=Tiempo ejecuci¢n];
                                                   DecimalPlaces=0:5 }
    { 5843;   ;Stop Time           ;Decimal       ;OnValidate=BEGIN
                                                                "Stop Time (Base)" := CalcBaseTime("Stop Time");
                                                              END;

                                                   CaptionML=[ENU=Stop Time;
                                                              ESP=Tiempo paro];
                                                   DecimalPlaces=0:5 }
    { 5846;   ;Output Quantity     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Output);
                                                                IF LastOutputOperation(Rec) THEN
                                                                  WhseValidateSourceLine.ItemLineVerifyChange(Rec,xRec);

                                                                "Output Quantity (Base)" := CalcBaseQty("Output Quantity");

                                                                VALIDATE(Quantity,"Output Quantity");
                                                              END;

                                                   CaptionML=[ENU=Output Quantity;
                                                              ESP=Cantidad salida];
                                                   DecimalPlaces=0:5 }
    { 5847;   ;Scrap Quantity      ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Output);
                                                                "Scrap Quantity (Base)" := CalcBaseQty("Scrap Quantity");
                                                              END;

                                                   CaptionML=[ENU=Scrap Quantity;
                                                              ESP=Cantidad rechazada];
                                                   DecimalPlaces=0:5 }
    { 5849;   ;Concurrent Capacity ;Decimal       ;OnValidate=VAR
                                                                TotalTime@1000 : Integer;
                                                              BEGIN
                                                                TESTFIELD("Entry Type","Entry Type"::Output);
                                                                IF "Concurrent Capacity" = 0 THEN
                                                                  EXIT;

                                                                TESTFIELD("Starting Time");
                                                                TESTFIELD("Ending Time");
                                                                TotalTime := "Ending Time" - "Starting Time";
                                                                IF "Ending Time" < "Starting Time" THEN
                                                                  TotalTime := TotalTime + 86400000;
                                                                TESTFIELD("Work Center No.");
                                                                WorkCenter.GET("Work Center No.");
                                                                VALIDATE("Setup Time",0);
                                                                VALIDATE(
                                                                  "Run Time",
                                                                  ROUND(
                                                                    TotalTime / CalendarMgt.TimeFactor("Cap. Unit of Measure Code") *
                                                                    "Concurrent Capacity",WorkCenter."Calendar Rounding Precision"));
                                                              END;

                                                   CaptionML=[ENU=Concurrent Capacity;
                                                              ESP=Capacidad concurrente];
                                                   DecimalPlaces=0:5 }
    { 5851;   ;Setup Time (Base)   ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Cap. Unit of Measure",1);
                                                                VALIDATE("Setup Time","Setup Time (Base)");
                                                              END;

                                                   CaptionML=[ENU=Setup Time (Base);
                                                              ESP=Conf. hora (Base)];
                                                   DecimalPlaces=0:5 }
    { 5852;   ;Run Time (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Cap. Unit of Measure",1);
                                                                VALIDATE("Run Time","Run Time (Base)");
                                                              END;

                                                   CaptionML=[ENU=Run Time (Base);
                                                              ESP=Tiempo ejecuci¢n (Base)];
                                                   DecimalPlaces=0:5 }
    { 5853;   ;Stop Time (Base)    ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Cap. Unit of Measure",1);
                                                                VALIDATE("Stop Time","Stop Time (Base)");
                                                              END;

                                                   CaptionML=[ENU=Stop Time (Base);
                                                              ESP=Tiempo paro (Base)];
                                                   DecimalPlaces=0:5 }
    { 5856;   ;Output Quantity (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Output Quantity","Output Quantity (Base)");
                                                              END;

                                                   CaptionML=[ENU=Output Quantity (Base);
                                                              ESP=Cantidad salida (Base)];
                                                   DecimalPlaces=0:5 }
    { 5857;   ;Scrap Quantity (Base);Decimal      ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Scrap Quantity","Scrap Quantity (Base)");
                                                              END;

                                                   CaptionML=[ENU=Scrap Quantity (Base);
                                                              ESP=Cantidad rechazada (Base)];
                                                   DecimalPlaces=0:5 }
    { 5858;   ;Cap. Unit of Measure Code;Code10   ;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                "Qty. per Cap. Unit of Measure" :=
                                                                  ROUND(
                                                                    CalendarMgt.QtyperTimeUnitofMeasure(
                                                                      "Work Center No.","Cap. Unit of Measure Code"),
                                                                    0.00001);

                                                                VALIDATE("Setup Time");
                                                                VALIDATE("Run Time");
                                                                VALIDATE("Stop Time");

                                                                IF "Prod. Order No." <> '' THEN BEGIN
                                                                  GetProdOrderRtngLine;
                                                                  "Unit Cost" := ProdOrderRtngLine."Unit Cost per";
                                                                  CostCalcMgt.RoutingCostPerUnit(
                                                                    Type,"No.","Unit Amount","Indirect Cost %","Overhead Rate","Unit Cost","Unit Cost Calculation");
                                                                END;

                                                                ReadGLSetup;
                                                                "Unit Cost" :=
                                                                  ROUND("Unit Cost" * "Qty. per Cap. Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                "Unit Amount" :=
                                                                  ROUND("Unit Amount" * "Qty. per Cap. Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                VALIDATE("Unit Amount");
                                                              END;

                                                   CaptionML=[ENU=Cap. Unit of Measure Code;
                                                              ESP=C¢d. unidad medida cap.] }
    { 5859;   ;Qty. per Cap. Unit of Measure;Decimal;
                                                   CaptionML=[ENU=Qty. per Cap. Unit of Measure;
                                                              ESP=Cdad. por udad. medida capac.];
                                                   DecimalPlaces=0:5 }
    { 5873;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                IF "Ending Time" < "Starting Time" THEN
                                                                  "Ending Time" := "Starting Time";

                                                                VALIDATE("Concurrent Capacity");
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ESP=Hora inicial] }
    { 5874;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                VALIDATE("Concurrent Capacity");
                                                              END;

                                                   CaptionML=[ENU=Ending Time;
                                                              ESP=Hora final] }
    { 5880;   ;Prod. Order Line No.;Integer       ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=CONST(Released),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.));
                                                   OnValidate=BEGIN
                                                                SetFilterProdOrderLine;
                                                                ProdOrderLine.SETRANGE("Line No.","Prod. Order Line No.");
                                                                IF ProdOrderLine.FIND('-') THEN BEGIN
                                                                  "Source Type" := "Source Type"::Item;
                                                                  "Source No." := ProdOrderLine."Item No.";
                                                                  "Prod. Order Line No." := ProdOrderLine."Line No.";
                                                                END;

                                                                IF "Prod. Order Line No." <> xRec."Prod. Order Line No." THEN
                                                                  CreateProdDim(
                                                                    DATABASE::"Production Order","Prod. Order No.",
                                                                    DATABASE::"Prod. Order Line",FORMAT("Prod. Order Line No."),
                                                                    DATABASE::"Prod. Order Component",FORMAT("Prod. Order Comp. Line No."));
                                                              END;

                                                   CaptionML=[ENU=Prod. Order Line No.;
                                                              ESP=N§ l¡n. orden producc.] }
    { 5882;   ;Routing No.         ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=[ENU=Routing No.;
                                                              ESP=N§ ruta];
                                                   Editable=No }
    { 5883;   ;Routing Reference No.;Integer      ;CaptionML=[ENU=Routing Reference No.;
                                                              ESP=N§ ruta referencia] }
    { 5884;   ;Prod. Order Comp. Line No.;Integer ;TableRelation="Prod. Order Component"."Line No." WHERE (Status=CONST(Released),
                                                                                                           Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                           Prod. Order Line No.=FIELD(Prod. Order Line No.));
                                                   OnValidate=BEGIN
                                                                IF "Prod. Order Comp. Line No." <> xRec."Prod. Order Comp. Line No." THEN
                                                                  CreateProdDim(
                                                                    DATABASE::"Production Order","Prod. Order No.",
                                                                    DATABASE::"Prod. Order Line",FORMAT("Prod. Order Line No."),
                                                                    DATABASE::"Prod. Order Component",FORMAT("Prod. Order Comp. Line No."));
                                                              END;

                                                   CaptionML=[ENU=Prod. Order Comp. Line No.;
                                                              ESP=N§ l¡n. comp. orden prod.] }
    { 5885;   ;Finished            ;Boolean       ;CaptionML=[ENU=Finished;
                                                              ESP=Terminada] }
    { 5887;   ;Unit Cost Calculation;Option       ;CaptionML=[ENU=Unit Cost Calculation;
                                                              ESP=C lculo coste unitario];
                                                   OptionCaptionML=[ENU=Time,Units;
                                                                    ESP=Tiempo,Unidades];
                                                   OptionString=Time,Units }
    { 5888;   ;Subcontracting      ;Boolean       ;CaptionML=[ENU=Subcontracting;
                                                              ESP=Subcontrataci¢n] }
    { 5895;   ;Stop Code           ;Code10        ;TableRelation=Stop;
                                                   CaptionML=[ENU=Stop Code;
                                                              ESP=C¢d. paro] }
    { 5896;   ;Scrap Code          ;Code10        ;TableRelation=Scrap;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Machine Center");
                                                              END;

                                                   CaptionML=[ENU=Scrap Code;
                                                              ESP=C¢d. rechazo] }
    { 5898;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   CaptionML=[ENU=Work Center Group Code;
                                                              ESP=C¢d. grupo centro trab.];
                                                   Editable=No }
    { 5899;   ;Work Shift Code     ;Code10        ;TableRelation="Work Shift";
                                                   CaptionML=[ENU=Work Shift Code;
                                                              ESP=C¢d. turno trabajo] }
    { 5900;   ;Service Order No.   ;Code20        ;CaptionML=[ENU=Service Order No.;
                                                              ESP=N§ ped. servicio];
                                                   Editable=No }
    { 6500;   ;Serial No.          ;Code20        ;CaptionML=[ENU=Serial No.;
                                                              ESP=N§ serie];
                                                   Editable=No }
    { 6501;   ;Lot No.             ;Code20        ;CaptionML=[ENU=Lot No.;
                                                              ESP=N§ lote];
                                                   Editable=No }
    { 6502;   ;Warranty Date       ;Date          ;CaptionML=[ENU=Warranty Date;
                                                              ESP=Fecha garant¡a];
                                                   Editable=No }
    { 6503;   ;New Serial No.      ;Code20        ;CaptionML=[ENU=New Serial No.;
                                                              ESP=Nuevo n§ serie];
                                                   Editable=No }
    { 6504;   ;New Lot No.         ;Code20        ;CaptionML=[ENU=New Lot No.;
                                                              ESP=Nuevo n§ lote];
                                                   Editable=No }
    { 6505;   ;New Item Expiration Date;Date      ;CaptionML=[ENU=New Item Expiration Date;
                                                              ESP=Nueva fecha caducidad producto] }
    { 6506;   ;Item Expiration Date;Date          ;CaptionML=[ENU=Item Expiration Date;
                                                              ESP=Fecha caducidad producto];
                                                   Editable=No }
    { 6600;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ESP=C¢d. motivo dev.] }
    { 7380;   ;Phys Invt Counting Period Code;Code10;
                                                   TableRelation="Phys. Invt. Counting Period";
                                                   CaptionML=[ENU=Phys Invt Counting Period Code;
                                                              ESP=C¢d. perio. recuento inv. f¡s.];
                                                   Editable=No }
    { 7381;   ;Phys Invt Counting Period Type;Option;
                                                   CaptionML=[ENU=Phys Invt Counting Period Type;
                                                              ESP=Tipo perio. recuento inv. f¡s.];
                                                   OptionCaptionML=[ENU=" ,Item,SKU";
                                                                    ESP=" ,Producto,UA"];
                                                   OptionString=[ ,Item,SKU];
                                                   Editable=No }
    { 10700;  ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ESP=C¢d. condiciones env¡o] }
    { 10701;  ;Pmt. Discount Amount;Decimal       ;CaptionML=[ENU=Pmt. Discount Amount;
                                                              ESP=Imp. dto. P.P.] }
    { 99000755;;Overhead Rate      ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
                                                                   ("Item Charge No." <> '')
                                                                THEN BEGIN
                                                                  "Overhead Rate" := 0;
                                                                  VALIDATE("Indirect Cost %",0);
                                                                END ELSE
                                                                  VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Overhead Rate;
                                                              ESP=Tasa costes generales];
                                                   DecimalPlaces=0:6 }
    { 99000756;;Single-Level Material Cost;Decimal;CaptionML=[ENU=Single-Level Material Cost;
                                                              ESP=Coste material a un nivel];
                                                   AutoFormatType=1 }
    { 99000757;;Single-Level Capacity Cost;Decimal;CaptionML=[ENU=Single-Level Capacity Cost;
                                                              ESP=Coste capacidad a un nivel];
                                                   AutoFormatType=1 }
    { 99000758;;Single-Level Subcontrd. Cost;Decimal;
                                                   CaptionML=[ENU=Single-Level Subcontrd. Cost;
                                                              ESP=Coste subcontrat. a un nivel];
                                                   AutoFormatType=1 }
    { 99000759;;Single-Level Cap. Ovhd Cost;Decimal;
                                                   CaptionML=[ENU=Single-Level Cap. Ovhd Cost;
                                                              ESP=Costes gen. cap. a un nivel];
                                                   AutoFormatType=1 }
    { 99000760;;Single-Level Mfg. Ovhd Cost;Decimal;
                                                   CaptionML=[ENU=Single-Level Mfg. Ovhd Cost;
                                                              ESP=Coste gen. fab. a un nivel];
                                                   AutoFormatType=1 }
    { 99000761;;Rolled-up Material Cost;Decimal   ;CaptionML=[ENU=Rolled-up Material Cost;
                                                              ESP=Coste material distribuido];
                                                   AutoFormatType=1 }
    { 99000762;;Rolled-up Capacity Cost;Decimal   ;CaptionML=[ENU=Rolled-up Capacity Cost;
                                                              ESP=Coste capacidad distribuida];
                                                   AutoFormatType=1 }
    { 99000763;;Rolled-up Subcontracted Cost;Decimal;
                                                   CaptionML=[ENU=Rolled-up Subcontracted Cost;
                                                              ESP=Coste subcontratado distrib.];
                                                   AutoFormatType=1 }
    { 99000764;;Rolled-up Mfg. Ovhd Cost;Decimal  ;CaptionML=[ENU=Rolled-up Mfg. Ovhd Cost;
                                                              ESP=Costes gen. fabr. distrib.];
                                                   AutoFormatType=1 }
    { 99000765;;Rolled-up Cap. Overhead Cost;Decimal;
                                                   CaptionML=[ENU=Rolled-up Cap. Overhead Cost;
                                                              ESP=Costes gen. de cap. distrib.];
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Line No.;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Entry Type,Item No.,Variant Code,Location Code,Bin Code,Posting Date;
                                                   SumIndexFields=Quantity (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Entry Type,Item No.,Variant Code,New Location Code,New Bin Code,Posting Date;
                                                   SumIndexFields=Quantity (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,Posting Date                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=%1 must be reduced.;ESP=%1 se debe reducir.';
      Text002@1002 : TextConst 'ENU=You cannot change %1 when %2 is %3.;ESP=No se puede cambiar %1 cuando %2 es %3.';
      Text003@1003 : TextConst 'ENU=You cannot change %3 when %2 is %1.;ESP=No se puede cambiar %3 cuando %2 es %1.';
      Text005@1004 : TextConst 'ENU=Change %1 from %2 to %3?;ESP=¨Desea cambiar %1 de %2 a %3?';
      Text006@1005 : TextConst 'ENU=You must not enter %1 in a revaluation sum line.;ESP=No debe introducir %1 en una l¡n. acum. de revaloriz.';
      ItemJnlTemplate@1007 : Record 82;
      ItemJnlBatch@1008 : Record 233;
      ItemJnlLine@1009 : Record 83;
      Item@1010 : Record 27;
      ItemVariant@1012 : Record 5401;
      GLSetup@1014 : Record 98;
      SKU@1015 : Record 5700;
      MfgSetup@1034 : Record 99000765;
      ProdOrder@1038 : Record 5405;
      ProdOrderLine@1037 : Record 5406;
      ProdOrderComp@1011 : Record 5407;
      ProdOrderRtngLine@1036 : Record 5409;
      WorkCenter@1040 : Record 99000754;
      MachineCenter@1039 : Record 99000758;
      Location@1048 : Record 14;
      Bin@1030 : Record 7354;
      Reservation@1016 : Form 498;
      ItemAvailByDate@1017 : Form 157;
      ItemAvailByVar@1018 : Form 5414;
      ItemAvailByLoc@1019 : Form 492;
      ItemCheckAvail@1021 : Codeunit 311;
      ReserveItemJnlLine@1022 : Codeunit 99000835;
      NoSeriesMgt@1023 : Codeunit 396;
      UOMMgt@1024 : Codeunit 5402;
      DimMgt@1027 : Codeunit 408;
      UserMgt@1033 : Codeunit 5700;
      CalendarMgt@1041 : Codeunit 99000755;
      CostCalcMgt@1042 : Codeunit 5836;
      PurchPriceCalcMgt@1020 : Codeunit 7010;
      SalesPriceCalcMgt@1025 : Codeunit 7000;
      WMSManagement@1026 : Codeunit 7302;
      WhseValidateSourceLine@1032 : Codeunit 5777;
      PhysInvtEntered@1028 : Boolean;
      GLSetupRead@1029 : Boolean;
      MfgSetupRead@1035 : Boolean;
      UnitCost@1031 : Decimal;
      Text007@1006 : TextConst 'ENU="New ";ESP="Nuevo "';
      Text011@1044 : TextConst 'ENU=The unit cost cannot be changed to %1. Do you want to change it to %2 instead?;ESP=El coste unitario no se puede cambiar a %1. ¨Quiere cambiarlo a %2?';
      Text012@1045 : TextConst 'ENU=The update has been interrupted to respect the warning.;ESP=Se ha interrumpido la actualizaci¢n para respetar la advertencia.';
      Text020@1013 : TextConst 'ENU=The entered %1 %2 is different from the %1 %3 in %4 %5.\\Do you really want to post the output to %1 %2?;ESP=El valor introducido para %1 %2 es diferente del valor de %1 %3 en %4 %5.\\¨Realmente desea registrar el resultado en %1 %2?';
      Text029@1047 : TextConst 'ENU=must be positive;ESP=debe ser positivo';
      Text030@1046 : TextConst 'ENU=must be negative;ESP=debe ser negativo';
      Text031@1043 : TextConst 'ENU=You can not insert item number %1 because it is not produced on released production order %2.;ESP=No puede insertar el producto n£mero %1, no est  incluido en la orden de producci¢n enviada %2.';
      Text032@1000 : TextConst 'ENU=When posting, the entry %1 will be opened first.;ESP=Al registrar el movimiento, %1 se abrir  primero.';
      Text033@1049 : TextConst 'ENU=If the item carries serial/lot numbers, you must use the %1 field in %2 window.;ESP=Si el producto tiene n£meros de serie o lote, debe usar el campo %1 de la ventana %2.';

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        (Quantity = 0) AND
        ((TimeIsEmpty AND ("Item No." = '')) OR
         ("Value Entry Type" = "Value Entry Type"::Revaluation)));
    END;

    PROCEDURE IsValueEntryForDeletedItem@22() : Boolean;
    BEGIN
      EXIT(
        (("Entry Type" = "Entry Type"::Output) OR ("Value Entry Type" = "Value Entry Type"::Rounding)) AND
        ("Item No." = '') AND ("Item Charge No." = '') AND ("Invoiced Qty. (Base)" <> 0));
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.000001));
    END;

    LOCAL PROCEDURE CalcBaseTime@28(Qty@1000 : Decimal) : Decimal;
    BEGIN
      IF "Run Time" <> 0 THEN
        TESTFIELD("Qty. per Cap. Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Cap. Unit of Measure",0.00001));
    END;

    PROCEDURE UpdateAmount@23();
    BEGIN
      Amount := ROUND(Quantity * "Unit Amount");
    END;

    LOCAL PROCEDURE SelectItemEntry@3(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      ItemJnlLine2@1002 : Record 83;
    BEGIN
      IF ("Entry Type" = "Entry Type"::Output) AND
         ("Value Entry Type" <> "Value Entry Type"::Revaluation) AND
         (CurrentFieldNo = FIELDNO("Applies-to Entry"))
      THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY(
          "Prod. Order No.","Prod. Order Line No.","Entry Type","Prod. Order Comp. Line No.");
        ItemLedgEntry.SETRANGE("Prod. Order No.","Prod. Order No.");
        ItemLedgEntry.SETRANGE("Prod. Order Line No.","Prod. Order Line No.");
        ItemLedgEntry.SETRANGE("Entry Type","Entry Type");
        ItemLedgEntry.SETRANGE("Prod. Order Comp. Line No.",0);
      END ELSE BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
        ItemLedgEntry.SETRANGE("Item No.","Item No.");
        ItemLedgEntry.SETRANGE(Correction,FALSE);
      END;

      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");

      IF CurrentFieldNo = FIELDNO("Applies-to Entry") THEN BEGIN
        ItemLedgEntry.SETRANGE(Positive,(Signed(Quantity) < 0) OR ("Value Entry Type" = "Value Entry Type"::Revaluation));
        IF "Value Entry Type" <> "Value Entry Type"::Revaluation THEN BEGIN
          ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
          ItemLedgEntry.SETRANGE(Open,TRUE);
        END;
      END ELSE
        ItemLedgEntry.SETRANGE(Positive,FALSE);

      IF FORM.RUNMODAL(FORM::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        ItemJnlLine2 := Rec;
        IF CurrentFieldNo = FIELDNO("Applies-to Entry") THEN
          ItemJnlLine2.VALIDATE("Applies-to Entry",ItemLedgEntry."Entry No.")
        ELSE
          ItemJnlLine2.VALIDATE("Applies-from Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := ItemJnlLine2;
      END;
    END;

    LOCAL PROCEDURE CheckItemAvailable@1(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CurrFieldNo = 0) OR (CurrFieldNo <> CalledByFieldNo) THEN // Prevent two checks on quantity
        EXIT;

      IF (CurrFieldNo <> 0) AND ("Item No." <> '') AND (Quantity <> 0) AND
         ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND ("Item Charge No." = '')
      THEN
        ItemCheckAvail.ItemJnlCheckLine(Rec);
    END;

    LOCAL PROCEDURE GetItem@2();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE SetUpNewLine@8(LastItemJnlLine@1000 : Record 83);
    BEGIN
      MfgSetup.GET;
      ItemJnlTemplate.GET("Journal Template Name");
      ItemJnlBatch.GET("Journal Template Name","Journal Batch Name");
      ItemJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF ItemJnlLine.FIND('-') THEN BEGIN
        "Posting Date" := LastItemJnlLine."Posting Date";
        "Document Date" := LastItemJnlLine."Posting Date";
        IF (ItemJnlTemplate.Type IN
            [ItemJnlTemplate.Type::Consumption,ItemJnlTemplate.Type::Output])
        THEN BEGIN
          IF NOT MfgSetup."Doc. No. Is Prod. Order No." THEN
            "Document No." := LastItemJnlLine."Document No."
        END ELSE
          "Document No." := LastItemJnlLine."Document No.";
      END ELSE BEGIN
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        IF ItemJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(ItemJnlBatch."No. Series","Posting Date");
        END;
        IF (ItemJnlTemplate.Type IN
            [ItemJnlTemplate.Type::Consumption,ItemJnlTemplate.Type::Output]) AND
           NOT MfgSetup."Doc. No. Is Prod. Order No."
        THEN
          IF ItemJnlBatch."No. Series" <> '' THEN BEGIN
            CLEAR(NoSeriesMgt);
            "Document No." := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series","Posting Date",FALSE);
          END;
      END;
      "Recurring Method" := LastItemJnlLine."Recurring Method";
      "Entry Type" := LastItemJnlLine."Entry Type";
      "Source Code" := ItemJnlTemplate."Source Code";
      "Reason Code" := ItemJnlBatch."Reason Code";
      "Posting No. Series" := ItemJnlBatch."Posting No. Series";
      IF ItemJnlTemplate.Type = ItemJnlTemplate.Type::Revaluation THEN BEGIN
        "Value Entry Type" := "Value Entry Type"::Revaluation;
        "Entry Type" := "Entry Type"::"Positive Adjmt.";
      END;

      CASE "Entry Type" OF
        "Entry Type"::Purchase:
          "Location Code" := UserMgt.GetLocation(1,'',UserMgt.GetPurchasesFilter);
        "Entry Type"::Sale:
          "Location Code" := UserMgt.GetLocation(0,'',UserMgt.GetSalesFilter);
        "Entry Type"::Output:
          CLEAR(DimMgt);
      END;

      IF Location.GET("Location Code") THEN
        IF  Location."Directed Put-away and Pick" THEN
          "Location Code" := '';
    END;

    PROCEDURE GetUnitAmount@6(CalledByFieldNo@1000 : Integer);
    BEGIN
      RetrieveCosts;
      IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
         ("Item Charge No." <> '')
      THEN
        EXIT;

      CASE "Entry Type" OF
        "Entry Type"::Purchase:
          PurchPriceCalcMgt.FindItemJnlLinePrice(Rec,CalledByFieldNo);
        "Entry Type"::Sale:
          SalesPriceCalcMgt.FindItemJnlLinePrice(Rec,CalledByFieldNo);
        "Entry Type"::"Positive Adjmt.":
          "Unit Amount" :=
            ROUND(
              ((UnitCost - "Overhead Rate") * "Qty. per Unit of Measure") / (1 + "Indirect Cost %" / 100),
              GLSetup."Unit-Amount Rounding Precision");
        "Entry Type"::"Negative Adjmt.":
          IF NOT "Phys. Inventory" THEN
            "Unit Amount" := UnitCost * "Qty. per Unit of Measure"
          ELSE
            UnitCost := "Unit Cost";
        "Entry Type"::Transfer:
          "Unit Amount" := 0;
      END;
    END;

    PROCEDURE ShowReservation@12();
    BEGIN
      CLEAR(Reservation);
      Reservation.SetItemJnlLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE Signed@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Entry Type" OF
        "Entry Type"::Purchase,
        "Entry Type"::"Positive Adjmt.",
        "Entry Type"::Output:
          EXIT(Value);
        "Entry Type"::Sale,
        "Entry Type"::"Negative Adjmt.",
        "Entry Type"::Consumption,
        "Entry Type"::Transfer:
          EXIT(-Value);
      END;
    END;

    PROCEDURE IsInbound@31() : Boolean;
    BEGIN
      EXIT((Signed(Quantity) > 0) OR (Signed("Invoiced Quantity") > 0));
    END;

    PROCEDURE ItemAvailability@10(AvailabilityType@1000 : 'Date,Variant,Location,Bin');
    BEGIN
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      Item.SETRANGE("No.","Item No.");
      Item.SETRANGE("Date Filter",0D,"Posting Date");

      CASE AvailabilityType OF
        AvailabilityType::Date:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Location Filter","Location Code");
            CLEAR(ItemAvailByDate);
            ItemAvailByDate.LOOKUPMODE(TRUE);
            ItemAvailByDate.SETRECORD(Item);
            ItemAvailByDate.SETTABLEVIEW(Item);
            IF ItemAvailByDate.RUNMODAL = ACTION::LookupOK THEN
              IF "Posting Date" <> ItemAvailByDate.GetLastDate THEN
                IF CONFIRM(
                     Text005,TRUE,FIELDCAPTION("Posting Date"),"Posting Date",
                     ItemAvailByDate.GetLastDate)
                THEN BEGIN
                  VALIDATE("Posting Date",ItemAvailByDate.GetLastDate);
                  MODIFY;
                END;
          END;
        AvailabilityType::Variant:
          BEGIN
            CLEAR(ItemAvailByVar);
            ItemAvailByVar.LOOKUPMODE(TRUE);
            ItemAvailByVar.SETRECORD(Item);
            ItemAvailByVar.SETTABLEVIEW(Item);
            IF ItemAvailByVar.RUNMODAL = ACTION::LookupOK THEN
              IF "Variant Code" <> ItemAvailByVar.GetLastVariant THEN
                IF CONFIRM(
                     Text005,TRUE,FIELDCAPTION("Variant Code"),"Variant Code",
                     ItemAvailByVar.GetLastVariant)
                THEN BEGIN
                  VALIDATE("Variant Code",ItemAvailByVar.GetLastVariant);
                  MODIFY;
                END;
          END;
        AvailabilityType::Location:
          BEGIN
            CLEAR(ItemAvailByLoc);
            ItemAvailByLoc.LOOKUPMODE(TRUE);
            ItemAvailByLoc.SETRECORD(Item);
            ItemAvailByLoc.SETTABLEVIEW(Item);
            IF ItemAvailByLoc.RUNMODAL = ACTION::LookupOK THEN
              IF "Location Code" <> ItemAvailByLoc.GetLastLocation THEN
                IF CONFIRM(
                     Text005,TRUE,FIELDCAPTION("Location Code"),"Location Code",
                     ItemAvailByLoc.GetLastLocation)
                THEN BEGIN
                  VALIDATE("Location Code",ItemAvailByLoc.GetLastLocation);
                  MODIFY;
                END;
          END;
      END;
      Item.RESET;
    END;

    PROCEDURE BlockDynamicTracking@17(SetBlock@1000 : Boolean);
    BEGIN
      ReserveItemJnlLine.Block(SetBlock);
    END;

    PROCEDURE OpenItemTrackingLines@6500(IsReclass@1000 : Boolean);
    BEGIN
      ReserveItemJnlLine.CallItemTracking(Rec,IsReclass);
    END;

    PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1007 : Integer;No3@1006 : Code[20]);
    VAR
      TableID@1004 : ARRAY [10] OF Integer;
      No@1005 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetDefaultDim(
        TableID,No,"Source Code",
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
        DimMgt.UpdateDefaultDimNewDimValue;
        "New Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        "New Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
      END;

      IF "Line No." <> 0 THEN
        DimMgt.UpdateJnlLineDefaultDim(
          DATABASE::"Item Journal Line",
          "Journal Template Name","Journal Batch Name","Line No.",0,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE CreateProdDim@25(Type1@1007 : Integer;No1@1006 : Code[20];Type2@1005 : Integer;No2@1004 : Code[20];Type3@1003 : Integer;No3@1002 : Code[20]);
    VAR
      TableID@1001 : ARRAY [10] OF Integer;
      No@1000 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetProdDocDim(
        TableID,No,
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF "Line No." <> 0 THEN
        DimMgt.UpdateJnlLineDefaultDim(
          DATABASE::"Item Journal Line",
          "Journal Template Name","Journal Batch Name","Line No.",0,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE GetDim@30(VAR JnlLineDim@1000 : Record 356);
    BEGIN
      DimMgt.GetJnlLineDefaultDim(JnlLineDim);
    END;

    PROCEDURE ValidateShortcutDimCode@9(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveJnlLineDim(
          DATABASE::"Item Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,FieldNumber,ShortcutDimCode);
        IF MODIFY THEN;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveJnlLineDim(
          DATABASE::"Item Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      IF "Line No." <> 0 THEN
        DimMgt.ShowJnlLineDim(
          DATABASE::"Item Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,ShortcutDimCode)
      ELSE
        DimMgt.ShowTempDim(ShortcutDimCode);
    END;

    PROCEDURE ValidateNewShortcutDimCode@19(FieldNumber@1000 : Integer;VAR NewShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,NewShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveJnlLineNewDim(
          DATABASE::"Item Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,FieldNumber,NewShortcutDimCode);
        IF MODIFY THEN;
      END ELSE
        DimMgt.SaveTempNewDim(FieldNumber,NewShortcutDimCode);
    END;

    PROCEDURE LookupNewShortcutDimCode@21(FieldNumber@1000 : Integer;VAR NewShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,NewShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveJnlLineNewDim(
          DATABASE::"Item Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,FieldNumber,NewShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempNewDim(FieldNumber,NewShortcutDimCode);
    END;

    PROCEDURE ShowNewShortcutDimCode@16(VAR NewShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      IF "Line No." <> 0 THEN
        DimMgt.ShowJnlLineNewDim(
          DATABASE::"Item Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,NewShortcutDimCode)
      ELSE
        DimMgt.ShowTempNewDim(NewShortcutDimCode);
    END;

    LOCAL PROCEDURE InitRevalJnlLine@5800(ItemLedgEntry2@1000 : Record 32);
    VAR
      ItemApplnEntry@1002 : Record 339;
      ValueEntry@1001 : Record 5802;
      CostAmtActual@1003 : Decimal;
    BEGIN
      IF "Value Entry Type" <> "Value Entry Type"::Revaluation THEN
        EXIT;

      ItemLedgEntry2.TESTFIELD("Item No.","Item No.");
      ItemLedgEntry2.TESTFIELD("Completely Invoiced",TRUE);
      ItemLedgEntry2.TESTFIELD(Positive,TRUE);
      ItemApplnEntry.CheckAppliedFromEntryToAdjust(ItemLedgEntry2."Entry No.");

      VALIDATE("Entry Type",ItemLedgEntry2."Entry Type");
      "Posting Date" := ItemLedgEntry2."Posting Date";
      VALIDATE("Unit Amount",0);
      VALIDATE(Quantity,ItemLedgEntry2."Invoiced Quantity");

      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry2."Entry No.");
      ValueEntry.SETFILTER("Entry Type",'<>%1',ValueEntry."Entry Type"::Rounding);
      ValueEntry.FIND('-');
      REPEAT
        IF NOT (ValueEntry."Expected Cost" OR ValueEntry."Partial Revaluation") THEN
          CostAmtActual := CostAmtActual + ValueEntry."Cost Amount (Actual)";
      UNTIL ValueEntry.NEXT = 0;

      VALIDATE("Inventory Value (Calculated)",CostAmtActual);
      VALIDATE("Inventory Value (Revalued)",CostAmtActual);

      "Location Code" := ItemLedgEntry2."Location Code";
      "Variant Code" := ItemLedgEntry2."Variant Code";
      "Applies-to Entry" := ItemLedgEntry2."Entry No.";
    END;

    LOCAL PROCEDURE ReadGLSetup@5801();
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetSKU@5802() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "Item No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","Item No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE RetrieveCosts@5803();
    BEGIN
      IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
         ("Item Charge No." <> '')
      THEN
        EXIT;

      ReadGLSetup;
      GetItem;
      IF GetSKU THEN
        UnitCost := SKU."Unit Cost"
      ELSE
        UnitCost := Item."Unit Cost";

      IF "Entry Type" = "Entry Type"::Transfer THEN
        UnitCost := 0
      ELSE
        IF Item."Costing Method" <> Item."Costing Method"::Standard THEN
          UnitCost := ROUND(UnitCost,GLSetup."Unit-Amount Rounding Precision");
    END;

    LOCAL PROCEDURE CalcUnitCost@5804(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      UnitCost@1002 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
        CALCSUMS("Cost Amount (Expected)","Cost Amount (Actual)");
        UnitCost :=
          ("Cost Amount (Expected)" + "Cost Amount (Actual)") / ItemLedgEntry.Quantity;
      END;
      EXIT(ABS(UnitCost * "Qty. per Unit of Measure"));
    END;

    LOCAL PROCEDURE ClearSingleAndRolledUpCosts@4();
    BEGIN
      "Single-Level Material Cost" := "Unit Cost (Revalued)";
      "Single-Level Capacity Cost" := 0;
      "Single-Level Subcontrd. Cost" := 0;
      "Single-Level Cap. Ovhd Cost" := 0;
      "Single-Level Mfg. Ovhd Cost" := 0;
      "Rolled-up Material Cost" := "Unit Cost (Revalued)";
      "Rolled-up Capacity Cost" := 0;
      "Rolled-up Subcontracted Cost" := 0;
      "Rolled-up Mfg. Ovhd Cost" := 0;
      "Rolled-up Cap. Overhead Cost" := 0;
    END;

    PROCEDURE GetMfgSetup@7();
    BEGIN
      IF NOT MfgSetupRead THEN
        MfgSetup.GET;
      MfgSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetProdOrderRtngLine@27();
    BEGIN
      TESTFIELD("Prod. Order No.");
      TESTFIELD("Operation No.");
      IF ("Prod. Order No." <> ProdOrderRtngLine."Prod. Order No.") OR
         ("Routing Reference No." <> ProdOrderRtngLine."Routing Reference No.") OR
         ("Routing No." <> ProdOrderRtngLine."Routing No.") OR
         ("Operation No." <> ProdOrderRtngLine."Operation No.")
      THEN
        ProdOrderRtngLine.GET(
          ProdOrderRtngLine.Status::Released,
          "Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");
    END;

    PROCEDURE SetFilterProdOrderLine@11();
    BEGIN
      ProdOrderLine.RESET;
      ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Item No.");
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
    END;

    PROCEDURE SetFilterProdOrderComp@32();
    BEGIN
      ProdOrderLine.RESET;
      ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Prod. Order Line No.","Item No.","Line No.");
      ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status::Released);
      ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
    END;

    PROCEDURE OnlyStopTime@24() : Boolean;
    BEGIN
      EXIT(("Setup Time" = 0) AND ("Run Time" = 0) AND ("Stop Time" <> 0));
    END;

    PROCEDURE OutputValuePosting@29() : Boolean;
    BEGIN
      EXIT(TimeIsEmpty AND ("Invoiced Quantity" <> 0) AND NOT Subcontracting);
    END;

    PROCEDURE TimeIsEmpty@26() : Boolean;
    BEGIN
      EXIT(("Setup Time" = 0) AND ("Run Time" = 0) AND ("Stop Time" = 0));
    END;

    PROCEDURE RowID1@44() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(
        ItemTrackingMgt.ComposeRowID(DATABASE::"Item Journal Line","Entry Type",
          "Journal Template Name","Journal Batch Name",0,"Line No."));
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@36(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      IF BinCode = '' THEN
        CLEAR(Bin)
      ELSE
        IF (Bin.Code <> BinCode) OR (Bin."Location Code" <> LocationCode) THEN
          Bin.GET(LocationCode,BinCode);
    END;

    PROCEDURE ItemPosting@33() : Boolean;
    VAR
      ProdOrderRtngLine@1000 : Record 5409;
    BEGIN
      IF ("Entry Type" = "Entry Type"::Output) AND
         ("Output Quantity" <> 0) AND
         ("Operation No." <> '')
      THEN BEGIN
        ProdOrderRtngLine.GET(
          ProdOrderRtngLine.Status::Released,
          "Prod. Order No.",
          "Routing Reference No.",
          "Routing No.",
          "Operation No.");
        EXIT(ProdOrderRtngLine."Next Operation No." = '');
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckPlanningAssignment@34();
    BEGIN
      IF ("Quantity (Base)" <> 0) AND ("Item No." <> '') AND ("Posting Date" <> 0D) AND
         ("Entry Type" IN ["Entry Type"::"Negative Adjmt.","Entry Type"::"Positive Adjmt.","Entry Type"::Transfer])
      THEN BEGIN
        IF ("Entry Type" = "Entry Type"::Transfer) AND ("Location Code" = "New Location Code") THEN
          EXIT;

        ReserveItemJnlLine.AssignForPlanning(Rec);
      END;
    END;

    PROCEDURE LastOutputOperation@35(ItemJnlLine@1000 : Record 83) : Boolean;
    VAR
      ProdOrderRtngLine@1002 : Record 5409;
      ItemJnlPostLine@1001 : Codeunit 22;
      Operation@1003 : Boolean;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF "Operation No." <> '' THEN BEGIN
          TESTFIELD("Routing No.");
          IF NOT ProdOrderRtngLine.GET(
               ProdOrderRtngLine.Status::Released,"Prod. Order No.",
               "Routing Reference No.","Routing No.","Operation No.")
          THEN
            ProdOrderRtngLine.GET(
              ProdOrderRtngLine.Status::Finished,"Prod. Order No.",
              "Routing Reference No.","Routing No.","Operation No.");
          IF Finished THEN
            ProdOrderRtngLine."Routing Status" := ProdOrderRtngLine."Routing Status"::Finished
          ELSE
            ProdOrderRtngLine."Routing Status" := ProdOrderRtngLine."Routing Status"::"In Progress";
          Operation := NOT ItemJnlPostLine.NextOperationExist(ProdOrderRtngLine);
        END ELSE
          Operation := TRUE;
      END;
      EXIT(Operation);
    END;

    PROCEDURE LookupItemNo@37();
    VAR
      ProdOrderLine2@1002 : Record 5406;
      ItemList@1000 : Form 31;
      ProdOrderLineList@1001 : Form 5406;
    BEGIN
      IF "Entry Type" = "Entry Type"::Output THEN BEGIN
        SetFilterProdOrderLine;
        ProdOrderLine2.Status := ProdOrderLine2.Status::Released;
        ProdOrderLine2."Prod. Order No." := "Prod. Order No.";
        ProdOrderLine2."Line No." := "Prod. Order Line No.";
        ProdOrderLine2."Item No." := "Item No.";

        ProdOrderLineList.LOOKUPMODE(TRUE);
        ProdOrderLineList.SETTABLEVIEW(ProdOrderLine);
        ProdOrderLineList.SETRECORD(ProdOrderLine2);

        IF ProdOrderLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ProdOrderLineList.GETRECORD(ProdOrderLine);
          VALIDATE("Item No.",ProdOrderLine."Item No.");
        END;
      END ELSE BEGIN
        ItemList.LOOKUPMODE := TRUE;
        IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ItemList.GETRECORD(Item);
          VALIDATE("Item No.",Item."No.");
        END;
      END;
    END;

    PROCEDURE RecalculateUnitAmount@38();
    VAR
      ItemJnlLine1@1000 : Record 83;
    BEGIN
      GetItem;

      IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
         ("Item Charge No." <> '')
      THEN BEGIN
        "Indirect Cost %" := 0;
        "Overhead Rate" := 0;
      END ELSE BEGIN
        "Indirect Cost %" := Item."Indirect Cost %";
        "Overhead Rate" := Item."Overhead Rate";
      END;

      "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      GetUnitAmount(FIELDNO("Unit of Measure Code"));

      ReadGLSetup;

      UpdateAmount;

      CASE "Entry Type" OF
        "Entry Type"::Purchase:
          BEGIN
            ItemJnlLine1.COPY(Rec);
            PurchPriceCalcMgt.FindItemJnlLinePrice(ItemJnlLine1,FIELDNO("Unit of Measure Code"));
            "Unit Cost" := ROUND(ItemJnlLine1."Unit Amount" * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
          END;
        "Entry Type"::Sale:
          "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
        "Entry Type"::"Positive Adjmt.":
          "Unit Cost" :=
            ROUND(
              "Unit Amount" * (1 + "Indirect Cost %" / 100),GLSetup."Unit-Amount Rounding Precision") +
            "Overhead Rate" * "Qty. per Unit of Measure";
        "Entry Type"::"Negative Adjmt.":
          IF NOT "Phys. Inventory" THEN
            "Unit Cost" := UnitCost * "Qty. per Unit of Measure";
      END;

      IF "Entry Type" IN ["Entry Type"::Purchase,"Entry Type"::"Positive Adjmt."] THEN BEGIN
        IF Item."Costing Method" = Item."Costing Method"::Standard THEN
          "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
      END;
    END;

    PROCEDURE IsReclass@40(ItemJnlLine@1000 : Record 83) : Boolean;
    BEGIN
      IF (ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Transfer) AND
         (ItemJnlLine."Transfer Order No." = '')
      THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE CheckWhse@39(LocationCode@1000 : Code[20];VAR QtyToPost@1002 : Decimal);
    VAR
      Location@1001 : Record 14;
    BEGIN
      Location.GET(LocationCode);
      IF Location."Require Put-away" AND
         (NOT Location."Directed Put-away and Pick") AND
         (NOT Location."Require Receive")
      THEN
        QtyToPost := 0;
    END;

    BEGIN
    END.
  }
}
