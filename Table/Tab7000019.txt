OBJECT Table 7000019 Fee Range
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVES6.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Fee Range;
               ESP=Tramo comisi¢n];
    LookupFormID=Form7000049;
    DrillDownFormID=Form7000049;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              ESP=C¢digo];
                                                   NotBlank=Yes }
    { 2   ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=C¢d. divisa] }
    { 3   ;   ;Type of Fee         ;Option        ;CaptionML=[ENU=Type of Fee;
                                                              ESP=Tipo operaci¢n];
                                                   OptionCaptionML=[ENU="Collection Expenses,Discount Expenses,Discount Interests,Rejection Expenses,Payment Order Expenses,Unrisked Factoring Expenses,Risked Factoring Expenses ";
                                                                    ESP="Gesti¢n cobro,Gesti¢n descuento,Intereses descuento,Gesti¢n impagado,Gesti¢n orden pago,Gesti¢n factoring s/recurso,Gesti¢n factoring c/recurso "];
                                                   OptionString=[Collection Expenses,Discount Expenses,Discount Interests,Rejection Expenses,Payment Order Expenses,Unrisked Factoring Expenses,Risked Factoring Expenses ] }
    { 4   ;   ;From No. of Days    ;Integer       ;OnValidate=BEGIN
                                                                IF "From No. of Days" <> 0 THEN
                                                                  TESTFIELD("Type of Fee","Type of Fee"::"Discount Interests");
                                                              END;

                                                   CaptionML=[ENU=From No. of Days;
                                                              ESP=Desde n§ d¡as];
                                                   MinValue=0 }
    { 5   ;   ;Charge Amount per Doc.;Decimal     ;CaptionML=[ENU=Charge Amount per Doc.;
                                                              ESP=Importe por documento];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 6   ;   ;Charge % per Doc.   ;Decimal       ;CaptionML=[ENU=Charge % per Doc.;
                                                              ESP=% por documento];
                                                   DecimalPlaces=2:6;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 7   ;   ;Minimum Amount      ;Decimal       ;CaptionML=[ENU=Minimum Amount;
                                                              ESP=Importe m¡nimo];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
  }
  KEYS
  {
    {    ;Code,Currency Code,Type of Fee,From No. of Days;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text1100000@1000 : TextConst 'ENU=untitled;ESP=sin t¡tulo';
      Text1100001@1001 : TextConst 'ENU=CollExpenses;ESP=CollExpenses';
      Text1100002@1002 : TextConst 'ENU=Out of Range;ESP=Fuera de alcance';
      Text1100003@1003 : TextConst 'ENU=DiscExpenses;ESP=DiscExpenses';
      Text1100004@1004 : TextConst 'ENU=DiscInterests;ESP=DiscInterests';
      Text1100005@1005 : TextConst 'ENU=RejExpenses;ESP=RejExpenses';
      Text1100006@1006 : TextConst 'ENU=PmtOrdCollExpenses;ESP=PmtOrdCollExpenses';
      Text1100007@1007 : TextConst 'ENU=RiskFactExpenses;ESP=RiskFactExpenses';
      Text1100008@1008 : TextConst 'ENU=UnriskFactExpenses;ESP=UnriskFactExpenses';
      Currency@1100000 : Record 4;
      OperationFee@1100001 : Record 7000010;
      DiscExpenses@1100023 : TEMPORARY Record 7000012;
      CollExpenses@1100020 : TEMPORARY Record 7000012;
      DiscInterests@1100017 : TEMPORARY Record 7000012;
      RejExpenses@1100014 : TEMPORARY Record 7000012;
      PmtOrdCollExpenses@1100011 : TEMPORARY Record 7000012;
      RiskFactExpenses@1100008 : TEMPORARY Record 7000012;
      UnriskFactExpenses@1100005 : TEMPORARY Record 7000012;
      Initialized@1100002 : Boolean;
      TotalDiscExpensesAmt@1100003 : Decimal;
      InitDiscExpensesAmt@1100004 : Decimal;
      TotalCollExpensesAmt@1100006 : Decimal;
      InitCollExpensesAmt@1100007 : Decimal;
      TotalDiscInterestsAmt@1100009 : Decimal;
      InitDiscInterestsAmt@1100010 : Decimal;
      TotalRejExpensesAmt@1100012 : Decimal;
      InitRejExpensesAmt@1100013 : Decimal;
      TotalPmtOrdCollExpensesAmt@1100015 : Decimal;
      InitPmtOrdCollExpensesAmt@1100016 : Decimal;
      TotalRiskFactExpensesAmt@1100018 : Decimal;
      InitRiskFactExpensesAmt@1100019 : Decimal;
      TotalUnriskFactExpensesAmt@1100021 : Decimal;
      InitUnriskFactExpensesAmt@1100022 : Decimal;
      Sum@1100024 : Decimal;
      Factor@1100025 : Decimal;

    PROCEDURE Caption@7() : Text[100];
    VAR
      BankAcc@1100000 : Record 270;
    BEGIN
      IF Code = '' THEN
        EXIT(Text1100000);
      BankAcc.GET(Code);
      EXIT(STRSUBSTNO('%1 %2 %3 %4',BankAcc."No.",BankAcc.Name,"Currency Code","Type of Fee"));
    END;

    LOCAL PROCEDURE InitCurrency@2();
    BEGIN
      IF Initialized THEN
        EXIT;

      IF "Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET("Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
      Initialized := TRUE;
    END;

    PROCEDURE InitCollExpenses@13(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10]);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      TotalCollExpensesAmt := 0;
      IF OperationFee.GET(Code2,CurrencyCode2,"Type of Fee"::"Collection Expenses") THEN
        TotalCollExpensesAmt :=
          ROUND(OperationFee."Charge Amt. per Operation",Currency."Amount Rounding Precision");
      InitCollExpensesAmt := TotalCollExpensesAmt;
      CollExpenses.DELETEALL;
    END;

    PROCEDURE CalcCollExpensesAmt@11(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10];Amount@1100002 : Decimal;EntryNo@1100003 : Integer);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      SETRANGE(Code,Code2);
      SETRANGE("Currency Code",CurrencyCode2);
      SETRANGE("Type of Fee","Type of Fee"::"Collection Expenses");
      IF FIND('=><') THEN BEGIN
        Amount := ROUND(
          "Charge Amount per Doc." + Amount * "Charge % per Doc." / 100,
          Currency."Amount Rounding Precision");
        IF  Amount < "Minimum Amount" THEN
          Amount := "Minimum Amount";
        TotalCollExpensesAmt := TotalCollExpensesAmt + Amount;
      END;
      IF CollExpenses.GET(Text1100001,'',EntryNo) THEN BEGIN
        CollExpenses.Amount := CollExpenses.Amount + Amount;
        CollExpenses.MODIFY;
      END ELSE BEGIN
        CollExpenses.INIT;
        CollExpenses.Account := Text1100001;
        CollExpenses."Entry No." := EntryNo;
      // CollExpenses."Global Dimension 1 Code" := Dep;
      // CollExpenses."Global Dimension 2 Code" := Proj;
        CollExpenses.Amount := Amount;
        CollExpenses.INSERT;
      END;
    END;

    PROCEDURE GetTotalCollExpensesAmt@10() : Decimal;
    BEGIN
      EXIT(TotalCollExpensesAmt);
    END;

    PROCEDURE NoRegsCollExpenses@26() : Integer;
    BEGIN
      CollExpenses.SETRANGE(Account,Text1100001);
      IF CollExpenses.FIND('-') AND (InitCollExpensesAmt <> 0) THEN BEGIN
        Sum := 0;
        REPEAT
          Sum := Sum + CollExpenses.Amount;
        UNTIL CollExpenses.NEXT <= 0;

        IF Sum <> 0 THEN
          Factor := InitCollExpensesAmt / Sum
        ELSE
          Factor := 1;
        CollExpenses.FIND('-');
        REPEAT
          Sum := ROUND(CollExpenses.Amount * Factor,Currency."Amount Rounding Precision");
          CollExpenses.Amount := CollExpenses.Amount + Sum;
          InitCollExpensesAmt := InitCollExpensesAmt - Sum;
          CollExpenses.MODIFY;
        UNTIL CollExpenses.NEXT <= 0;
        IF ROUND(InitCollExpensesAmt,Currency."Amount Rounding Precision") <> 0 THEN BEGIN
          CollExpenses.FIND('+');
          CollExpenses.Amount := CollExpenses.Amount + ROUND(InitCollExpensesAmt,Currency."Amount Rounding Precision");
          InitCollExpensesAmt := 0;
          CollExpenses.MODIFY;
        END;
      END;
      EXIT(CollExpenses.COUNT);
    END;

    PROCEDURE GetCollExpensesAmt@28(VAR value@1100000 : Record 7000012;Register@1100001 : Integer);
    BEGIN
      CollExpenses.SETRANGE(Account,Text1100001);
      CollExpenses.FIND('-');
      IF Register <> CollExpenses.NEXT(Register) THEN ERROR(Text1100002);
      value := CollExpenses;
    END;

    PROCEDURE InitDiscExpenses@9(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10]);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      TotalDiscExpensesAmt := 0;
      IF OperationFee.GET(Code2,CurrencyCode2,"Type of Fee"::"Discount Expenses") THEN
        TotalDiscExpensesAmt :=
          ROUND(OperationFee."Charge Amt. per Operation",Currency."Amount Rounding Precision");

      InitDiscExpensesAmt := TotalDiscExpensesAmt;
      DiscExpenses.DELETEALL;
    END;

    PROCEDURE CalcDiscExpensesAmt@1(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10];Amount@1100002 : Decimal;EntryNo@1100003 : Integer);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      SETRANGE(Code,Code2);
      SETRANGE("Currency Code",CurrencyCode2);
      SETRANGE("Type of Fee","Type of Fee"::"Discount Expenses");
      IF FIND('=><') THEN BEGIN
        Amount := ROUND(
          "Charge Amount per Doc." + Amount * "Charge % per Doc." / 100,
          Currency."Amount Rounding Precision");
        IF Amount < "Minimum Amount" THEN
          Amount := "Minimum Amount";
        TotalDiscExpensesAmt := TotalDiscExpensesAmt + Amount;
      END ELSE
        Amount := 0;

      IF DiscExpenses.GET(Text1100003,'',EntryNo) THEN BEGIN
        DiscExpenses.Amount := DiscExpenses.Amount + Amount;
        DiscExpenses.MODIFY;
      END ELSE BEGIN
        DiscExpenses.INIT;
        DiscExpenses.Account := Text1100003;
        DiscExpenses."Entry No." := EntryNo;
      // DiscExpenses."Global Dimension 1 Code" := Dep;
      // DiscExpenses."Global Dimension 2 Code" := Proj;
        DiscExpenses.Amount := Amount;
        DiscExpenses.INSERT;
      END;
    END;

    PROCEDURE GetTotalDiscExpensesAmt@3() : Decimal;
    BEGIN
      EXIT(TotalDiscExpensesAmt);
    END;

    PROCEDURE NoRegsDiscExpenses@31() : Integer;
    BEGIN
      DiscExpenses.SETRANGE(Account,Text1100003);
      IF DiscExpenses.FIND('-') AND (InitDiscExpensesAmt <> 0) THEN BEGIN
        Sum := 0;
        REPEAT
          Sum := Sum + DiscExpenses.Amount;
        UNTIL DiscExpenses.NEXT <= 0;

        IF Sum <> 0 THEN
          Factor := InitDiscExpensesAmt / Sum
        ELSE
          Factor := 1;
        DiscExpenses.FIND('-');
        REPEAT
          Sum := ROUND(DiscExpenses.Amount * Factor,Currency."Amount Rounding Precision");
          DiscExpenses.Amount := DiscExpenses.Amount + Sum;
          InitDiscExpensesAmt := InitDiscExpensesAmt - Sum;
          DiscExpenses.MODIFY;
        UNTIL DiscExpenses.NEXT <= 0;
        IF ROUND(InitDiscExpensesAmt,Currency."Amount Rounding Precision") <> 0 THEN BEGIN
          DiscExpenses.FIND('+');
          DiscExpenses.Amount := DiscExpenses.Amount + ROUND(InitDiscExpensesAmt,Currency."Amount Rounding Precision");
          InitDiscExpensesAmt := 0;
          DiscExpenses.MODIFY;
        END;
      END;
      EXIT(DiscExpenses.COUNT);
    END;

    PROCEDURE GetDiscExpensesAmt@34(VAR value@1100000 : Record 7000012;Register@1100001 : Integer);
    BEGIN
      DiscExpenses.SETRANGE(Account,Text1100003);
      DiscExpenses.FIND('-');
      IF Register <> DiscExpenses.NEXT(Register) THEN ERROR(Text1100002);
      value := DiscExpenses;
    END;

    PROCEDURE InitDiscInterests@15(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10]);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      TotalDiscInterestsAmt := 0;
      IF OperationFee.GET(Code2,CurrencyCode2,"Type of Fee"::"Discount Interests") THEN
        TotalDiscInterestsAmt :=
          ROUND(OperationFee."Charge Amt. per Operation",Currency."Amount Rounding Precision");

      InitDiscInterestsAmt := TotalDiscInterestsAmt;
      DiscInterests.DELETEALL;
    END;

    PROCEDURE CalcDiscInterestsAmt@6(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10];NoOfDays@1100002 : Integer;Amount@1100003 : Decimal;EntryNo@1100004 : Integer);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      IF NoOfDays <= 0 THEN
        EXIT;
      SETRANGE(Code,Code2);
      SETRANGE("Currency Code",CurrencyCode2);
      SETFILTER("From No. of Days",'<=%1',NoOfDays);
      SETRANGE("Type of Fee","Type of Fee"::"Discount Interests");
      IF FIND('+') THEN BEGIN
        Amount := ROUND(
          "Charge Amount per Doc." + Amount * "Charge % per Doc." * NoOfDays / 36000,
          Currency."Amount Rounding Precision");
        IF Amount < "Minimum Amount" THEN
          Amount := "Minimum Amount";
        TotalDiscInterestsAmt := TotalDiscInterestsAmt + Amount;
      END ELSE
        Amount := 0;

      SETRANGE("Type of Fee");

      IF DiscInterests.GET(Text1100004,'',EntryNo) THEN BEGIN
        DiscInterests.Amount := DiscInterests.Amount + Amount;
        DiscInterests.MODIFY;
      END ELSE BEGIN
        DiscInterests.INIT;
        DiscInterests.Account := Text1100004;
        DiscInterests."Entry No." := EntryNo;
        DiscInterests.Amount := Amount;
        DiscInterests.INSERT;
      END;
    END;

    PROCEDURE GetTotalDiscInterestsAmt@8() : Decimal;
    BEGIN
      EXIT(TotalDiscInterestsAmt);
    END;

    PROCEDURE NoRegsDiscInterests@24() : Integer;
    BEGIN
      DiscInterests.SETRANGE(Account,Text1100004);
      IF DiscInterests.FIND('-') AND (InitDiscInterestsAmt <> 0) THEN BEGIN
        Sum := 0;
        REPEAT
          Sum := Sum + DiscInterests.Amount;
        UNTIL DiscInterests.NEXT <= 0;

        IF Sum <> 0 THEN
          Factor := InitDiscInterestsAmt / Sum
        ELSE
          Factor := 1;
        DiscInterests.FIND('-');
        REPEAT
          Sum := ROUND(DiscInterests.Amount * Factor,Currency."Amount Rounding Precision");
          DiscInterests.Amount := DiscInterests.Amount + Sum;
          InitDiscInterestsAmt := InitDiscInterestsAmt - Sum;
          DiscInterests.MODIFY;
        UNTIL DiscInterests.NEXT <= 0;
        IF ROUND(InitDiscInterestsAmt,Currency."Amount Rounding Precision") <> 0 THEN BEGIN
          DiscInterests.FIND('+');
          DiscInterests.Amount := DiscInterests.Amount + ROUND(InitDiscInterestsAmt,Currency."Amount Rounding Precision");
          InitDiscInterestsAmt := 0;
          DiscInterests.MODIFY;
        END;
      END;
      EXIT(DiscInterests.COUNT);
    END;

    PROCEDURE GetDiscInterestsAmt@25(VAR value@1100000 : Record 7000012;Register@1100001 : Integer);
    BEGIN
      DiscInterests.SETRANGE(Account,Text1100004);
      DiscInterests.FIND('-');
      IF Register <> DiscInterests.NEXT(Register) THEN ERROR(Text1100002);
      value := DiscInterests;
    END;

    PROCEDURE InitRejExpenses@17(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10]);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      TotalRejExpensesAmt := 0;
      IF OperationFee.GET(Code2,CurrencyCode2,"Type of Fee"::"Rejection Expenses") THEN
        TotalRejExpensesAmt :=
          ROUND(OperationFee."Charge Amt. per Operation",Currency."Amount Rounding Precision");

      InitRejExpensesAmt := TotalRejExpensesAmt;
      RejExpenses.DELETEALL;
    END;

    PROCEDURE CalcRejExpensesAmt@5(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10];Amount@1100002 : Decimal;EntryNo@1100003 : Integer);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      SETRANGE(Code,Code2);
      SETRANGE("Currency Code",CurrencyCode2);
      SETRANGE("Type of Fee","Type of Fee"::"Rejection Expenses");
      IF FIND('=><') THEN BEGIN
        Amount := ROUND(
          "Charge Amount per Doc." + Amount * "Charge % per Doc." / 100,
          Currency."Amount Rounding Precision");
        IF Amount < "Minimum Amount" THEN
          Amount := "Minimum Amount";
        TotalRejExpensesAmt := TotalRejExpensesAmt + Amount;
      END;
      SETRANGE("Type of Fee");

      IF RejExpenses.GET(Text1100005,'',EntryNo) THEN BEGIN
        RejExpenses.Amount := RejExpenses.Amount + Amount;
        RejExpenses.MODIFY;
      END ELSE BEGIN
        RejExpenses.INIT;
        RejExpenses.Account := Text1100005;
        RejExpenses."Entry No." := EntryNo;
        RejExpenses.Amount := Amount;
        RejExpenses.INSERT;
      END;
    END;

    PROCEDURE GetTotalRejExpensesAmt@4() : Decimal;
    BEGIN
      EXIT(TotalRejExpensesAmt);
    END;

    PROCEDURE NoRegRejExpenses@29() : Integer;
    BEGIN
      RejExpenses.SETRANGE(Account,Text1100005);
      IF RejExpenses.FIND('-') AND (InitRejExpensesAmt <> 0) THEN BEGIN
        Sum := 0;
        REPEAT
          Sum := Sum + RejExpenses.Amount;
        UNTIL RejExpenses.NEXT <= 0;

        IF Sum <> 0 THEN
          Factor := InitRejExpensesAmt / Sum
        ELSE
          Factor := 1;
        RejExpenses.FIND('-');
        REPEAT
          Sum := ROUND(RejExpenses.Amount * Factor,Currency."Amount Rounding Precision");
          RejExpenses.Amount := RejExpenses.Amount + Sum;
          InitRejExpensesAmt := InitRejExpensesAmt - Sum;
          RejExpenses.MODIFY;
        UNTIL RejExpenses.NEXT <= 0;
        IF ROUND(InitRejExpensesAmt,Currency."Amount Rounding Precision") <> 0 THEN BEGIN
          RejExpenses.FIND('+');
          RejExpenses.Amount := RejExpenses.Amount + ROUND(InitRejExpensesAmt,Currency."Amount Rounding Precision");
          InitRejExpensesAmt := 0;
          RejExpenses.MODIFY;
        END;
      END;
      EXIT(RejExpenses.COUNT);
    END;

    PROCEDURE GetRejExpensesAmt@30(VAR value@1100000 : Record 7000012;Register@1100001 : Integer);
    BEGIN
      RejExpenses.SETRANGE(Account,Text1100005);
      RejExpenses.FIND('-');
      IF Register <> RejExpenses.NEXT(Register) THEN ERROR(Text1100002);
      value := RejExpenses;
    END;

    PROCEDURE InitPmtOrdCollExpenses@18(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10]);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      TotalPmtOrdCollExpensesAmt := 0;
      IF OperationFee.GET(Code2,CurrencyCode2,"Type of Fee"::"Payment Order Expenses") THEN
        TotalPmtOrdCollExpensesAmt :=
          ROUND(OperationFee."Charge Amt. per Operation",Currency."Amount Rounding Precision");

      InitPmtOrdCollExpensesAmt := TotalPmtOrdCollExpensesAmt;
      PmtOrdCollExpenses.DELETEALL;
    END;

    PROCEDURE CalcPmtOrdCollExpensesAmt@20(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10];Amount@1100002 : Decimal;EntryNo@1100003 : Integer);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      SETRANGE(Code,Code2);
      SETRANGE("Currency Code",CurrencyCode2);
      SETRANGE("Type of Fee","Type of Fee"::"Payment Order Expenses");
      IF FIND('=><') THEN BEGIN
        Amount := ROUND(
          "Charge Amount per Doc." + Amount * "Charge % per Doc." / 100,
          Currency."Amount Rounding Precision");
        IF  Amount < "Minimum Amount" THEN
          Amount := "Minimum Amount";
        TotalPmtOrdCollExpensesAmt := TotalPmtOrdCollExpensesAmt + Amount;
      END;

      IF PmtOrdCollExpenses.GET(Text1100006,'',EntryNo) THEN BEGIN
        PmtOrdCollExpenses.Amount := PmtOrdCollExpenses.Amount + Amount;
        PmtOrdCollExpenses.MODIFY;
      END ELSE BEGIN
        PmtOrdCollExpenses.INIT;
        PmtOrdCollExpenses.Account := Text1100006;
        PmtOrdCollExpenses."Entry No." := EntryNo;
        PmtOrdCollExpenses.Amount := Amount;
        PmtOrdCollExpenses.INSERT;
      END;
    END;

    PROCEDURE GetTotalPmtOrdCollExpensesAmt@19() : Decimal;
    BEGIN
      EXIT(TotalPmtOrdCollExpensesAmt);
    END;

    PROCEDURE NoRegPmtOrdCollExpenses@36() : Integer;
    BEGIN
      PmtOrdCollExpenses.SETRANGE(Account,Text1100006);
      IF PmtOrdCollExpenses.FIND('-') AND (InitPmtOrdCollExpensesAmt <> 0) THEN BEGIN
        Sum := 0;
        REPEAT
          Sum := Sum + PmtOrdCollExpenses.Amount;
        UNTIL PmtOrdCollExpenses.NEXT <= 0;

        IF Sum <> 0 THEN
          Factor := InitPmtOrdCollExpensesAmt / Sum
        ELSE
          Factor := 1;
        PmtOrdCollExpenses.FIND('-');
        REPEAT
          Sum := ROUND(PmtOrdCollExpenses.Amount * Factor,Currency."Amount Rounding Precision");
          PmtOrdCollExpenses.Amount := PmtOrdCollExpenses.Amount + Sum;
          InitPmtOrdCollExpensesAmt := InitPmtOrdCollExpensesAmt - Sum;
          PmtOrdCollExpenses.MODIFY;
        UNTIL PmtOrdCollExpenses.NEXT <= 0;
        IF ROUND(InitPmtOrdCollExpensesAmt,Currency."Amount Rounding Precision") <> 0 THEN BEGIN
          PmtOrdCollExpenses.FIND('+');
          PmtOrdCollExpenses.Amount := PmtOrdCollExpenses.Amount +
            ROUND(InitPmtOrdCollExpensesAmt,Currency."Amount Rounding Precision");
          InitPmtOrdCollExpensesAmt := 0;
          PmtOrdCollExpenses.MODIFY;
        END;
      END;
      EXIT(PmtOrdCollExpenses.COUNT);
    END;

    PROCEDURE GetPmtOrdCollExpensesAmt@38(VAR value@1100000 : Record 7000012;Register@1100001 : Integer);
    BEGIN
      PmtOrdCollExpenses.SETRANGE(Account,Text1100006);
      PmtOrdCollExpenses.FIND('-');
      IF Register <> PmtOrdCollExpenses.NEXT(Register) THEN ERROR(Text1100002);
      value := PmtOrdCollExpenses;
    END;

    PROCEDURE InitRiskFactExpenses@16(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10]);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      TotalRiskFactExpensesAmt := 0;
      IF OperationFee.GET(Code2,CurrencyCode2,"Type of Fee"::"Risked Factoring Expenses ") THEN
        TotalRiskFactExpensesAmt :=
          ROUND(OperationFee."Charge Amt. per Operation",Currency."Amount Rounding Precision");

      InitRiskFactExpensesAmt := TotalRiskFactExpensesAmt;
      RiskFactExpenses.DELETEALL;
    END;

    PROCEDURE CalcRiskFactExpensesAmt@14(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10];Amount@1100002 : Decimal;EntryNo@1100003 : Integer);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      SETRANGE(Code,Code2);
      SETRANGE("Currency Code",CurrencyCode2);
      SETRANGE("Type of Fee","Type of Fee"::"Risked Factoring Expenses ");
      IF FIND('=><') THEN BEGIN
        Amount := ROUND(
          "Charge Amount per Doc." + Amount * "Charge % per Doc." / 100,
          Currency."Amount Rounding Precision");
        IF  Amount < "Minimum Amount" THEN
          Amount := "Minimum Amount";
        TotalRiskFactExpensesAmt := TotalRiskFactExpensesAmt + Amount;
      END;

      IF RiskFactExpenses.GET(Text1100007,'',EntryNo) THEN BEGIN
        RiskFactExpenses.Amount := RiskFactExpenses.Amount + Amount;
        RiskFactExpenses.MODIFY;
      END ELSE BEGIN
        RiskFactExpenses.INIT;
        RiskFactExpenses.Account := Text1100007;
        RiskFactExpenses."Entry No." := EntryNo;
        RiskFactExpenses.Amount := Amount;
        RiskFactExpenses.INSERT;
      END;
    END;

    PROCEDURE GetTotalRiskFactExpensesAmt@12() : Decimal;
    BEGIN
      EXIT(TotalRiskFactExpensesAmt);
    END;

    PROCEDURE NoRegRiskFactExpenses@41() : Integer;
    BEGIN
      RiskFactExpenses.SETRANGE(Account,Text1100007);
      IF RiskFactExpenses.FIND('-') AND (InitRiskFactExpensesAmt <> 0) THEN BEGIN
        Sum := 0;
        REPEAT
          Sum := Sum + RiskFactExpenses.Amount;
        UNTIL RiskFactExpenses.NEXT <= 0;

        IF Sum <> 0 THEN
          Factor := InitRiskFactExpensesAmt / Sum
        ELSE
          Factor := 1;
        RiskFactExpenses.FIND('-');
        REPEAT
          Sum := ROUND(RiskFactExpenses.Amount * Factor,Currency."Amount Rounding Precision");
          RiskFactExpenses.Amount := RiskFactExpenses.Amount + Sum;
          InitRiskFactExpensesAmt := InitRiskFactExpensesAmt - Sum;
          RiskFactExpenses.MODIFY;
        UNTIL RiskFactExpenses.NEXT <= 0;
        IF ROUND(InitRiskFactExpensesAmt,Currency."Amount Rounding Precision") <> 0 THEN BEGIN
          RiskFactExpenses.FIND('+');
          RiskFactExpenses.Amount := RiskFactExpenses.Amount + ROUND(InitRiskFactExpensesAmt,Currency."Amount Rounding Precision");
          InitRiskFactExpensesAmt := 0;
          RiskFactExpenses.MODIFY;
        END;
      END;
      EXIT(RiskFactExpenses.COUNT);
    END;

    PROCEDURE GetRiskFactExpenses@42(VAR value@1100000 : Record 7000012;Register@1100001 : Integer);
    BEGIN
      RiskFactExpenses.SETRANGE(Account,Text1100007);
      RiskFactExpenses.FIND('-');
      IF Register <> RiskFactExpenses.NEXT(Register) THEN ERROR(Text1100002);
      value := RiskFactExpenses;
    END;

    PROCEDURE InitUnriskFactExpenses@23(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10]);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      TotalUnriskFactExpensesAmt := 0;
      IF OperationFee.GET(Code2,CurrencyCode2,"Type of Fee"::"Unrisked Factoring Expenses") THEN
        TotalUnriskFactExpensesAmt :=
          ROUND(OperationFee."Charge Amt. per Operation",Currency."Amount Rounding Precision");

      InitUnriskFactExpensesAmt := TotalUnriskFactExpensesAmt;
      UnriskFactExpenses.DELETEALL;
    END;

    PROCEDURE CalcUnriskFactExpensesAmt@22(Code2@1100000 : Code[20];CurrencyCode2@1100001 : Code[10];Amount@1100002 : Decimal;EntryNo@1100003 : Integer);
    BEGIN
      "Currency Code" := CurrencyCode2;
      InitCurrency;
      SETRANGE(Code,Code2);
      SETRANGE("Currency Code",CurrencyCode2);
      SETRANGE("Type of Fee","Type of Fee"::"Unrisked Factoring Expenses");
      IF FIND('=><') THEN BEGIN
        Amount := ROUND(
          "Charge Amount per Doc." + Amount * "Charge % per Doc." / 100,
          Currency."Amount Rounding Precision");
        IF  Amount < "Minimum Amount" THEN
          Amount := "Minimum Amount";
        TotalUnriskFactExpensesAmt := TotalUnriskFactExpensesAmt + Amount;
      END;

      IF UnriskFactExpenses.GET(Text1100008,'',EntryNo) THEN BEGIN
        UnriskFactExpenses.Amount := UnriskFactExpenses.Amount + Amount;
        UnriskFactExpenses.MODIFY;
      END ELSE BEGIN
        UnriskFactExpenses.INIT;
        UnriskFactExpenses.Account := Text1100008;
        UnriskFactExpenses."Entry No." := EntryNo;
        UnriskFactExpenses.Amount := Amount;
        UnriskFactExpenses.INSERT;
      END;
    END;

    PROCEDURE GetTotalUnriskFactExpensesAmt@21() : Decimal;
    BEGIN
      EXIT(TotalUnriskFactExpensesAmt);
    END;

    PROCEDURE NoRegUnriskFactExpenses@46() : Integer;
    BEGIN
      UnriskFactExpenses.SETRANGE(Account,Text1100008);
      IF UnriskFactExpenses.FIND('-') AND (InitUnriskFactExpensesAmt <> 0) THEN BEGIN
        Sum := 0;
        REPEAT
          Sum := Sum + UnriskFactExpenses.Amount;
        UNTIL UnriskFactExpenses.NEXT <= 0;

        IF Sum <> 0 THEN
          Factor := InitUnriskFactExpensesAmt / Sum
        ELSE
          Factor := 1;
        UnriskFactExpenses.FIND('-');
        REPEAT
          Sum := ROUND(UnriskFactExpenses.Amount * Factor,Currency."Amount Rounding Precision");
          UnriskFactExpenses.Amount := UnriskFactExpenses.Amount + Sum;
          InitUnriskFactExpensesAmt := InitUnriskFactExpensesAmt - Sum;
          UnriskFactExpenses.MODIFY;
        UNTIL UnriskFactExpenses.NEXT <= 0;
        IF ROUND(InitUnriskFactExpensesAmt,Currency."Amount Rounding Precision") <> 0 THEN BEGIN
          UnriskFactExpenses.FIND('+');
          UnriskFactExpenses.Amount := UnriskFactExpenses.Amount +
            ROUND(InitUnriskFactExpensesAmt,Currency."Amount Rounding Precision");
          InitUnriskFactExpensesAmt := 0;
          UnriskFactExpenses.MODIFY;
        END;
      END;
      EXIT(UnriskFactExpenses.COUNT);
    END;

    PROCEDURE GetUnriskFactExpenses@48(VAR value@1100000 : Record 7000012;Register@1100001 : Integer);
    BEGIN
      UnriskFactExpenses.SETRANGE(Account,Text1100008);
      UnriskFactExpenses.FIND('-');
      IF Register <> UnriskFactExpenses.NEXT(Register) THEN ERROR(Text1100002);
      value := UnriskFactExpenses;
    END;

    BEGIN
    END.
  }
}
