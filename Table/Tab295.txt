OBJECT Table 295 Reminder Header
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES4.00;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Name;
    OnInsert=VAR
               DocDim@1000 : TEMPORARY Record 357;
             BEGIN
               SalesSetup.GET;
               IF "No." = '' THEN BEGIN
                 SalesSetup.TESTFIELD("Reminder Nos.");
                 SalesSetup.TESTFIELD("Issued Reminder Nos.");
                 NoSeriesMgt.InitSeries(
                   SalesSetup."Reminder Nos.",xRec."No. Series","Posting Date",
                   "No.","No. Series");
               END;
               "Posting Description" := STRSUBSTNO(Text000,"No.");
               IF ("No. Series" <> '') AND
                  (SalesSetup."Reminder Nos." = SalesSetup."Issued Reminder Nos.")
               THEN
                 "Issuing No. Series" := "No. Series"
               ELSE
                 NoSeriesMgt.SetDefaultSeries("Issuing No. Series",SalesSetup."Issued Reminder Nos.");
               IF "Posting Date" = 0D THEN
                 "Posting Date" := WORKDATE;
               "Document Date" := WORKDATE;
               "Due Date" := WORKDATE;
               IF GETFILTER("Customer No.") <> '' THEN
                 IF GETRANGEMIN("Customer No.") = GETRANGEMAX("Customer No.") THEN
                   VALIDATE("Customer No.",GETRANGEMIN("Customer No."));

               DimMgt.InsertDocDim(
                 DATABASE::"Reminder Header",DocDim."Document Type"::" ","No.",0,
                 "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
             END;

    OnDelete=VAR
               DocDim@1000 : TEMPORARY Record 357;
             BEGIN
               ReminderIssue.DeleteHeader(Rec,IssuedReminderHeader);

               ReminderLine.SETRANGE("Reminder No.","No.");
               ReminderLine.DELETEALL;

               ReminderCommentLine.SETRANGE(Type,ReminderCommentLine.Type::Reminder);
               ReminderCommentLine.SETRANGE("No.","No.");
               ReminderCommentLine.DELETEALL;

               DimMgt.DeleteDocDim(DATABASE::"Reminder Header",DocDim."Document Type"::" ","No.",0);

               IF IssuedReminderHeader."No." <> '' THEN BEGIN
                 DELETE;
                 COMMIT;
                 IF CONFIRM(
                      Text001,TRUE,
                      IssuedReminderHeader."No.")
                 THEN BEGIN
                   IssuedReminderHeader.SETRECFILTER;
                   IssuedReminderHeader.PrintRecords(TRUE)
                 END;
               END;
             END;

    CaptionML=[ENU=Reminder Header;
               ESP=Cab. recordatorio];
    LookupFormID=Form436;
    DrillDownFormID=Form436;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(SalesSetup."Reminder Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                                "Posting Description" := STRSUBSTNO(Text000,"No.");
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Customer No.") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Customer No." := xRec."Customer No.";
                                                                    CreateDim(DATABASE::Customer,"Customer No.");
                                                                    EXIT;
                                                                  END;
                                                                IF "Customer No." = '' THEN BEGIN
                                                                  CreateDim(DATABASE::Customer,"Customer No.");
                                                                  EXIT;
                                                                END;
                                                                Cust.GET("Customer No.");
                                                                IF Cust.Blocked = Cust.Blocked::All THEN
                                                                  Cust.CustBlockedErrorMessage(Cust,FALSE);
                                                                Name := Cust.Name;
                                                                "Name 2" := Cust."Name 2";
                                                                Address := Cust.Address;
                                                                "Address 2" := Cust."Address 2";
                                                                "Post Code" := Cust."Post Code";
                                                                City := Cust.City;
                                                                County := Cust.County;
                                                                Contact := Cust.Contact;
                                                                "Country/Region Code" := Cust."Country/Region Code";
                                                                "Language Code" := Cust."Language Code";
                                                                "Currency Code" := Cust."Currency Code";
                                                                "Shortcut Dimension 1 Code" := Cust."Global Dimension 1 Code";
                                                                "Shortcut Dimension 2 Code" := Cust."Global Dimension 2 Code";
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                "Customer Posting Group" := Cust."Customer Posting Group";
                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Cust."Tax Area Code";
                                                                "Tax Liable" := Cust."Tax Liable";
                                                                "Reminder Terms Code" := Cust."Reminder Terms Code";
                                                                "Fin. Charge Terms Code" := Cust."Fin. Charge Terms Code";
                                                                VALIDATE("Reminder Terms Code");

                                                                CreateDim(DATABASE::Customer,"Customer No.");
                                                              END;

                                                   CaptionML=[ENU=Customer No.;
                                                              ESP=N§ cliente] }
    { 3   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ESP=Nombre] }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ESP=Nombre 2] }
    { 5   ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              ESP=Direcci¢n] }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ESP=Direcci¢n 2] }
    { 7   ;   ;Post Code           ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode(City,"Post Code",County,TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ESP=C.P.] }
    { 8   ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity(City,"Post Code",County,TRUE);
                                                            END;

                                                   CaptionML=[ENU=City;
                                                              ESP=Poblaci¢n] }
    { 9   ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ESP=Provincia] }
    { 10  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ESP=C¢d. pa¡s/regi¢n] }
    { 11  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ESP=C¢d. idioma] }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Currency Code") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Currency Code" := xRec."Currency Code";
                                                                    EXIT;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=C¢d. divisa] }
    { 13  ;   ;Contact             ;Text50        ;CaptionML=[ENU=Contact;
                                                              ESP=Contacto] }
    { 14  ;   ;Your Reference      ;Text30        ;CaptionML=[ENU=Your Reference;
                                                              ESP=Su/Ntra. ref.] }
    { 15  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1];
                                                   CaptionClass='1,2,1' }
    { 16  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2];
                                                   CaptionClass='1,2,2' }
    { 17  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ESP=Grupo contable cliente];
                                                   Editable=No }
    { 18  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ESP=Grupo contable negocio];
                                                   Editable=No }
    { 19  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ESP=CIF/NIF] }
    { 20  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ESP=C¢d. auditor¡a] }
    { 21  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 22  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Document Date") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Document Date" := xRec."Document Date";
                                                                     EXIT;
                                                                  END;
                                                                VALIDATE("Reminder Level");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              ESP=Fecha emisi¢n documento] }
    { 23  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento] }
    { 24  ;   ;Reminder Terms Code ;Code10        ;TableRelation="Reminder Terms";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Reminder Terms Code") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Reminder Terms Code" := xRec."Reminder Terms Code";
                                                                    EXIT;
                                                                  END;
                                                                IF "Reminder Terms Code" <> '' THEN BEGIN
                                                                  ReminderTerms.GET("Reminder Terms Code");
                                                                  "Post Interest" := ReminderTerms."Post Interest";
                                                                  "Post Additional Fee" := ReminderTerms."Post Additional Fee";
                                                                  VALIDATE("Reminder Level");
                                                                  VALIDATE("Post Interest");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Reminder Terms Code;
                                                              ESP=C¢d. recordatorio] }
    { 25  ;   ;Fin. Charge Terms Code;Code10      ;TableRelation="Finance Charge Terms";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Fin. Charge Terms Code") THEN
                                                                  IF Undo THEN BEGIN
                                                                    "Fin. Charge Terms Code" := xRec."Fin. Charge Terms Code";
                                                                    EXIT;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Fin. Charge Terms Code;
                                                              ESP=C¢d. inters] }
    { 26  ;   ;Post Interest       ;Boolean       ;CaptionML=[ENU=Post Interest;
                                                              ESP=Registrar inters] }
    { 27  ;   ;Post Additional Fee ;Boolean       ;CaptionML=[ENU=Post Additional Fee;
                                                              ESP=Registrar recargo fijo] }
    { 28  ;   ;Reminder Level      ;Integer       ;TableRelation="Reminder Level".No. WHERE (Reminder Terms Code=FIELD(Reminder Terms Code));
                                                   OnValidate=BEGIN
                                                                IF ("Reminder Level" <> 0) AND ("Reminder Terms Code" <> '') THEN BEGIN
                                                                  ReminderTerms.GET("Reminder Terms Code");
                                                                  ReminderLevel.SETRANGE("Reminder Terms Code","Reminder Terms Code");
                                                                  ReminderLevel.SETRANGE("No.",1,"Reminder Level");
                                                                  IF ReminderLevel.FIND('+') AND ("Document Date" <> 0D) THEN
                                                                    "Due Date" := CALCDATE(ReminderLevel."Due Date Calculation","Document Date");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Reminder Level;
                                                              ESP=Nivel recordatorio] }
    { 29  ;   ;Posting Description ;Text50        ;CaptionML=[ENU=Posting Description;
                                                              ESP=Texto de registro] }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Reminder Comment Line" WHERE (Type=CONST(Reminder),
                                                                                                    No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ESP=Comentario];
                                                   Editable=No }
    { 31  ;   ;Remaining Amount    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line"."Remaining Amount" WHERE (Reminder No.=FIELD(No.)));
                                                   CaptionML=[ENU=Remaining Amount;
                                                              ESP=Importe pendiente];
                                                   DecimalPlaces=2:2;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Interest Amount     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line".Amount WHERE (Reminder No.=FIELD(No.),
                                                                                                 Type=CONST(Customer Ledger Entry)));
                                                   CaptionML=[ENU=Interest Amount;
                                                              ESP=Importe inters];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 33  ;   ;Additional Fee      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line".Amount WHERE (Reminder No.=FIELD(No.),
                                                                                                 Type=CONST(G/L Account)));
                                                   CaptionML=[ENU=Additional Fee;
                                                              ESP=Recargo fijo];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 34  ;   ;VAT Amount          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reminder Line"."VAT Amount" WHERE (Reminder No.=FIELD(No.)));
                                                   CaptionML=[ENU=VAT Amount;
                                                              ESP=Importe IVA];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 37  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ESP=Nos. serie];
                                                   Editable=No }
    { 38  ;   ;Issuing No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Issuing No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Reminder Nos.");
                                                                  SalesSetup.TESTFIELD("Issued Reminder Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Issued Reminder Nos.","Issuing No. Series");
                                                                END;
                                                                TESTFIELD("Issuing No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH ReminderHeader DO BEGIN
                                                                ReminderHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Reminder Nos.");
                                                                SalesSetup.TESTFIELD("Issued Reminder Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Issued Reminder Nos.","Issuing No. Series") THEN
                                                                  VALIDATE("Issuing No. Series");
                                                                  Rec := ReminderHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Issuing No. Series;
                                                              ESP=N§ serie emisi¢n] }
    { 39  ;   ;Issuing No.         ;Code20        ;CaptionML=[ENU=Issuing No.;
                                                              ESP=N§ emisi¢n] }
    { 41  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ESP=C¢d.  rea impuesto] }
    { 42  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ESP=Sujeto a impuesto] }
    { 43  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ESP=Grupo registro IVA neg.] }
    { 44  ;   ;Use Header Level    ;Boolean       ;CaptionML=[ENU=Use Header Level;
                                                              ESP=Usar nivel recordatorio] }
    { 9000;   ;Assigned User ID    ;Code20        ;TableRelation="User Setup";
                                                   CaptionML=[ENU=Assigned User ID;
                                                              ESP=Id. usuario asignado] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Customer No.,Currency Code               }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Customer No.,Name,Due Date           }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reminder %1;ESP=Recordatorio %1';
      Text001@1001 : TextConst 'ENU=Do you want to print reminder %1?;ESP=¨Confirma que desea imprimir el recordatorio %1?';
      Text002@1002 : TextConst 'ENU=This change will cause the existing lines to be deleted for this reminder.\\;ESP=Este cambio provocar  que se borren las l¡neas existentes del recordatorio.\\';
      Text003@1003 : TextConst 'ENU=Do you want to continue?;ESP=¨Confirma que desea continuar?';
      Text004@1004 : TextConst 'ENU=There is not enough space to insert the text.;ESP=No hay espacio suficiente para a¤adir el texto.';
      Text005@1005 : TextConst 'ENU="Deleting this document will cause a gap in the number series for reminders. ";ESP="Si borra el documento, se provocar  una discontinuidad en la numeraci¢n de la serie para recordatorios. "';
      Text006@1006 : TextConst 'ENU=An empty reminder %1 will be created to fill this gap in the number series.\\;ESP=Se crear  un recordatorio en blanco %1 para completar la misma.\\';
      SalesSetup@1007 : Record 311;
      CustPostingGr@1008 : Record 92;
      ReminderTerms@1009 : Record 292;
      ReminderLevel@1010 : Record 293;
      CurrencyForReminderLevel@1011 : Record 329;
      ReminderText@1012 : Record 294;
      FinChrgTerms@1013 : Record 5;
      ReminderHeader@1014 : Record 295;
      ReminderLine@1015 : Record 296;
      ReminderCommentLine@1016 : Record 299;
      Cust@1017 : Record 18;
      PostCode@1018 : Record 225;
      IssuedReminderHeader@1019 : Record 297;
      GenBusPostingGrp@1020 : Record 250;
      CurrExchRate@1021 : Record 330;
      ApplicationManagement@1031 : Codeunit 1;
      NoSeriesMgt@1022 : Codeunit 396;
      TransferExtendedText@1023 : Codeunit 378;
      ReminderIssue@1024 : Codeunit 393;
      DimMgt@1025 : Codeunit 408;
      NextLineNo@1026 : Integer;
      LineSpacing@1027 : Integer;
      ReminderTotal@1028 : Decimal;
      CurrencyForReminderLevelFound@1030 : Boolean;
      Currency@1032 : Record 4;

    PROCEDURE AssistEdit@9(OldReminderHeader@1000 : Record 295) : Boolean;
    BEGIN
      WITH ReminderHeader DO BEGIN
        ReminderHeader := Rec;
        SalesSetup.GET;
        SalesSetup.TESTFIELD("Reminder Nos.");
        SalesSetup.TESTFIELD("Issued Reminder Nos.");
        IF NoSeriesMgt.SelectSeries(SalesSetup."Reminder Nos.",OldReminderHeader."No. Series","No. Series") THEN BEGIN
          SalesSetup.GET;
          SalesSetup.TESTFIELD("Reminder Nos.");
          SalesSetup.TESTFIELD("Issued Reminder Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := ReminderHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE Undo@6() : Boolean;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.","No.");
      IF ReminderLine.FIND('-') THEN BEGIN
        COMMIT;
        IF NOT
           CONFIRM(
             Text002 +
             Text003,
             FALSE)
        THEN
          EXIT(TRUE);
        ReminderLine.DELETEALL;
        MODIFY
      END;
    END;

    PROCEDURE InsertLines@3();
    VAR
      ReminderLine2@1000 : Record 296;
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code","Reminder Terms Code");
      ReminderLevel.SETRANGE("No.",1,"Reminder Level");
      IF ReminderLevel.FINDLAST THEN BEGIN
        IF "Currency Code" <> '' THEN
          CurrencyForReminderLevelFound :=
            CurrencyForReminderLevel.GET(
              ReminderLevel."Reminder Terms Code",ReminderLevel."No.","Currency Code")
        ELSE
          CurrencyForReminderLevelFound := FALSE;
        IF (NOT CurrencyForReminderLevelFound AND (ReminderLevel."Additional Fee (LCY)" <> 0)) OR
           (CurrencyForReminderLevelFound AND (CurrencyForReminderLevel."Additional Fee" <> 0))
        THEN BEGIN
          ReminderLine.RESET;
          ReminderLine.SETRANGE("Reminder No.","No.");
          ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::ReminderLine);
          ReminderLine."Reminder No." := "No.";
          IF ReminderLine.FIND('+') THEN
            NextLineNo := ReminderLine."Line No."
           ELSE
            NextLineNo := 0;
          ReminderLine.SETRANGE("Line Type");
          ReminderLine2 := ReminderLine;
          ReminderLine2.COPYFILTERS(ReminderLine);
          IF ReminderLine2.NEXT <> 0 THEN BEGIN
            LineSpacing := (ReminderLine2."Line No." - ReminderLine."Line No.") DIV 3;
          END ELSE
            LineSpacing := 10000;
          InsertBlankLine(ReminderLine."Line Type"::"Additional Fee");
          NextLineNo := NextLineNo + LineSpacing;
          ReminderLine.INIT;
          ReminderLine."Line No." := NextLineNo;
          ReminderLine.Type := ReminderLine.Type::"G/L Account";
          TESTFIELD("Customer Posting Group");
          CustPostingGr.GET("Customer Posting Group");
          CustPostingGr.TESTFIELD("Additional Fee Account");
          ReminderLine.VALIDATE("No.",CustPostingGr."Additional Fee Account");
          ReminderLine.Description := CurrencyForReminderLevel.FIELDCAPTION("Additional Fee");
          IF "Currency Code" = '' THEN
            ReminderLine.VALIDATE(Amount,ReminderLevel."Additional Fee (LCY)")
          ELSE BEGIN
            IF NOT CurrencyForReminderLevelFound THEN
              CurrencyForReminderLevel."Additional Fee" :=
                CurrExchRate.ExchangeAmtLCYToFCY(
                  "Posting Date","Currency Code",
                  ReminderLevel."Additional Fee (LCY)",
                  CurrExchRate.ExchangeRate("Posting Date","Currency Code"));
            ReminderLine.VALIDATE(Amount,CurrencyForReminderLevel."Additional Fee");
          END;
          ReminderLine."Line Type" := ReminderLine."Line Type"::"Additional Fee";
          ReminderLine.INSERT;
          IF TransferExtendedText.ReminderCheckIfAnyExtText(ReminderLine,FALSE) THEN
            TransferExtendedText.InsertReminderExtText(ReminderLine);
        END;
      END;
      ReminderLine."Line No." := ReminderLine."Line No." + 10000;
      ReminderRounding(Rec);
      InsertBeginTexts(Rec);
      InsertEndTexts(Rec);
      MODIFY;
    END;

    PROCEDURE UpdateLines@13(ReminderHeader@1000 : Record 295;UpdateAdditionalFee@1001 : Boolean);
    BEGIN
      ReminderLine.RESET;
      ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
      ReminderLine.SETRANGE(
        "Line Type",
        ReminderLine."Line Type"::"Beginning Text",
        ReminderLine."Line Type"::"Ending Text");
      ReminderLine.SETRANGE(Type,ReminderLine.Type::" ");
      ReminderLine.SETRANGE("Attached to Line No.",0);
      ReminderLine.DELETEALL(TRUE);

      IF UpdateAdditionalFee THEN BEGIN
        ReminderLine.RESET;
        ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
        ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Additional Fee");
        ReminderLine.DELETEALL;
        InsertLines;
      END ELSE BEGIN
        InsertBeginTexts(ReminderHeader);
        InsertEndTexts(ReminderHeader);
      END;
    END;

    LOCAL PROCEDURE InsertBeginTexts@11(ReminderHeader@1000 : Record 295);
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level");
      IF ReminderLevel.FIND('+') THEN BEGIN
        ReminderText.RESET;
        ReminderText.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
        ReminderText.SETRANGE("Reminder Level",ReminderLevel."No.");
        ReminderText.SETRANGE(Position,ReminderText.Position::Beginning);

        ReminderLine.RESET;
        ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
        ReminderLine."Reminder No." :=ReminderHeader. "No.";
        IF ReminderLine.FIND('-') THEN BEGIN
          LineSpacing := ReminderLine."Line No." DIV (ReminderText.COUNT + 2);
          IF LineSpacing = 0 THEN
            ERROR(Text004);
        END ELSE
          LineSpacing := 10000;
        NextLineNo := 0;
        InsertTextLines(ReminderHeader);
      END;
    END;

    LOCAL PROCEDURE InsertEndTexts@12(ReminderHeader@1000 : Record 295);
    VAR
      ReminderLine2@1001 : Record 296;
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level");
      IF ReminderLevel.FINDLAST THEN BEGIN
        ReminderText.SETRANGE(
          "Reminder Terms Code",ReminderHeader."Reminder Terms Code");
        ReminderText.SETRANGE("Reminder Level",ReminderLevel."No.");
        ReminderText.SETRANGE(Position,ReminderText.Position::Ending);
        ReminderLine.RESET;
        ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
        ReminderLine.SETFILTER("Line Type",'%1|%2',ReminderLine."Line Type"::ReminderLine,ReminderLine."Line Type"::"Additional Fee");
        IF ReminderLine.FINDLAST THEN
          NextLineNo := ReminderLine."Line No."
        ELSE
          NextLineNo := 0;
        ReminderLine.SETRANGE("Line Type");
        ReminderLine2 := ReminderLine;
        ReminderLine2.COPYFILTERS(ReminderLine);
        IF ReminderLine2.NEXT <> 0 THEN BEGIN
          LineSpacing :=
            (ReminderLine2."Line No." - ReminderLine."Line No.") DIV
            (ReminderText.COUNT + 2);
          IF LineSpacing = 0 THEN
            ERROR(Text004);
        END ELSE
          LineSpacing := 10000;
        InsertTextLines(ReminderHeader);
      END;
    END;

    LOCAL PROCEDURE InsertTextLines@4(ReminderHeader@1000 : Record 295);
    VAR
      CompanyInfo@1001 : Record 79;
    BEGIN
      IF ReminderText.FIND('-') THEN BEGIN
        IF ReminderText.Position = ReminderText.Position::Ending THEN
          InsertBlankLine(ReminderLine."Line Type"::"Ending Text");
        IF ReminderHeader."Fin. Charge Terms Code" <> '' THEN
          FinChrgTerms.GET(ReminderHeader."Fin. Charge Terms Code");
        IF NOT ReminderLevel."Calculate Interest" THEN
          FinChrgTerms."Interest Rate" := 0;
        ReminderHeader.CALCFIELDS(
          "Remaining Amount","Interest Amount","Additional Fee","VAT Amount");
        ReminderTotal :=
          ReminderHeader."Remaining Amount" + ReminderHeader."Interest Amount" +
          ReminderHeader."Additional Fee" + ReminderHeader."VAT Amount";
        CompanyInfo.GET;

        REPEAT
          NextLineNo := NextLineNo + LineSpacing;
          ReminderLine.INIT;
          ReminderLine."Line No." := NextLineNo;
          ReminderLine.Type := ReminderLine.Type::" ";
          ReminderLine.Description :=
            COPYSTR(
              STRSUBSTNO(
                ReminderText.Text,
                ReminderHeader."Document Date",
                ReminderHeader."Due Date",
                FinChrgTerms."Interest Rate",
                ReminderHeader."Remaining Amount",
                ReminderHeader."Interest Amount",
                ReminderHeader."Additional Fee",
                FORMAT(ReminderTotal,0,ApplicationManagement.AutoFormatTranslate(1,ReminderHeader."Currency Code")),
                ReminderHeader."Reminder Level",
                ReminderHeader."Currency Code",
                ReminderHeader."Posting Date",
                CompanyInfo.Name),
              1,
              MAXSTRLEN(ReminderLine.Description));
          IF ReminderText.Position = ReminderText.Position::Beginning THEN
            ReminderLine."Line Type" := ReminderLine."Line Type"::"Beginning Text"
          ELSE
            ReminderLine."Line Type" := ReminderLine."Line Type"::"Ending Text";
          ReminderLine.INSERT;
        UNTIL ReminderText.NEXT = 0;
        IF ReminderText.Position = ReminderText.Position::Beginning THEN
          InsertBlankLine(ReminderLine."Line Type"::"Beginning Text");
      END;
    END;

    PROCEDURE InsertBlankLine@5(LineType@1000 : Integer);
    BEGIN
      NextLineNo := NextLineNo + LineSpacing;
      ReminderLine.INIT;
      ReminderLine."Line No." := NextLineNo;
      ReminderLine."Line Type" := LineType;
      ReminderLine.INSERT;
    END;

    PROCEDURE PrintRecords@1();
    VAR
      ReminderHeader@1000 : Record 295;
      ReportSelection@1001 : Record 77;
    BEGIN
      WITH ReminderHeader DO BEGIN
        COPY(Rec);
        FIND('-');
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"Rem.Test");
        ReportSelection.SETFILTER("Report ID",'<>0');
        ReportSelection.ASCENDING := FALSE;
        ReportSelection.FIND('-');
        REPEAT
          REPORT.RUN(ReportSelection."Report ID",TRUE,FALSE,ReminderHeader);
        UNTIL ReportSelection.NEXT = 0;
      END;
    END;

    PROCEDURE FormatAddr@30(VAR AddrLines@1000 : ARRAY [8] OF Text[50]);
    VAR
      Cust@1001 : Record 18;
      FormatAddrCodeunit@1002 : Codeunit 365;
    BEGIN
      Cust.Contact := Contact;
      Cust.Name := Name;
      Cust."Name 2" := "Name 2";
      Cust.Address := Address;
      Cust."Address 2" := "Address 2";
      Cust."Post Code" := "Post Code";
      Cust.City := City;
      Cust.County := County;
      Cust."Country/Region Code" := "Country/Region Code";
      FormatAddrCodeunit.Customer(AddrLines,Cust);
    END;

    PROCEDURE ConfirmDeletion@2() : Boolean;
    BEGIN
      ReminderIssue.TestDeleteHeader(Rec,IssuedReminderHeader);
      IF IssuedReminderHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text005 +
             Text006 +
             Text003,TRUE,
             IssuedReminderHeader."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      DocDim@1002 : TEMPORARY Record 357;
      SourceCodeSetup@1003 : Record 242;
      TableID@1004 : ARRAY [10] OF Integer;
      No@1005 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetDefaultDim(
        TableID,No,SourceCodeSetup.Reminder,
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF "No." <> '' THEN
        DimMgt.UpdateDocDefaultDim(
          DATABASE::"Reminder Header",DocDim."Document Type"::" ","No.",0,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DocDim@1002 : TEMPORARY Record 357;
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF "No." <> '' THEN BEGIN
        DimMgt.SaveDocDim(
          DATABASE::"Reminder Header",DocDim."Document Type"::" ","No.",0,FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    LOCAL PROCEDURE ReminderRounding@7(ReminderHeader@1001 : Record 295);
    VAR
      TotalAmountInclVAT@1004 : Decimal;
      ReminderRoundingAmount@1000 : Decimal;
    BEGIN
      GetCurrency(ReminderHeader);
      IF Currency."Invoice Rounding Precision" = 0 THEN
        EXIT;

      ReminderHeader.CALCFIELDS(
        "Remaining Amount","Interest Amount","Additional Fee","VAT Amount");

      TotalAmountInclVAT := ReminderHeader."Remaining Amount" +
                            ReminderHeader."Interest Amount" +
                            ReminderHeader."Additional Fee" +
                            ReminderHeader."VAT Amount";
      ReminderRoundingAmount :=
        -ROUND(
          TotalAmountInclVAT -
          ROUND(
            TotalAmountInclVAT,
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      IF ReminderRoundingAmount <> 0 THEN BEGIN
        CustPostingGr.GET(ReminderHeader."Customer Posting Group");
        CustPostingGr.TESTFIELD("Invoice Rounding Account");
        WITH ReminderLine DO BEGIN
          INIT;
          VALIDATE(Type,Type::"G/L Account");
          "System-Created Entry" := TRUE;
          VALIDATE("No.",CustPostingGr."Invoice Rounding Account");
          VALIDATE(
            Amount,
            ROUND(
              ReminderRoundingAmount / (1 + ("VAT %" / 100)),
              Currency."Amount Rounding Precision"));
          "VAT Amount" := ReminderRoundingAmount - Amount;
          "Line Type" := "Line Type"::Rounding;
          INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE GetCurrency@17(ReminderHeader@1000 : Record 295);
    BEGIN
      WITH ReminderHeader DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    PROCEDURE UpdateReminderRounding@8(ReminderHeader@1000 : Record 295);
    VAR
      OldLineNo@1001 : Integer;
    BEGIN
      ReminderLine.RESET;
      ReminderLine.SETRANGE("Reminder No.",ReminderHeader."No.");
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::Rounding);
      IF ReminderLine.FINDFIRST THEN
        ReminderLine.DELETE(TRUE);

      ReminderLine.SETRANGE("Line Type");
      ReminderLine.SETFILTER(Type,'<>%1',ReminderLine.Type::" ");
      IF ReminderLine.FINDLAST THEN BEGIN
        OldLineNo := ReminderLine."Line No.";
        ReminderLine.SETRANGE(Type);
        IF ReminderLine.NEXT <> 0 THEN
          ReminderLine."Line No." := OldLineNo + ((ReminderLine."Line No." - OldLineNo) DIV 2)
        ELSE
          ReminderLine."Line No." := OldLineNo + 10000;
      END ELSE
        ReminderLine."Line No." := 10000;

      ReminderRounding(ReminderHeader);
    END;

    BEGIN
    END.
  }
}
