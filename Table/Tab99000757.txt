OBJECT Table 99000757 Calendar Entry
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Calendar Entry;
               ESP=Mov. calendario];
    LookupFormID=Form99000759;
    DrillDownFormID=Form99000759;
  }
  FIELDS
  {
    { 1   ;   ;Capacity Type       ;Option        ;OnValidate=BEGIN
                                                                "No." := '';
                                                                "Work Center No." := '';
                                                                "Work Center Group Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Capacity Type;
                                                              ESP=Tipo capacidad];
                                                   OptionCaptionML=[ENU=Work Center,Machine Center;
                                                                    ESP=Centro trabajo,Centro m quina];
                                                   OptionString=Work Center,Machine Center }
    { 2   ;   ;No.                 ;Code20        ;TableRelation=IF (Capacity Type=CONST(Work Center)) "Work Center"
                                                                 ELSE IF (Capacity Type=CONST(Machine Center)) "Machine Center";
                                                   OnValidate=BEGIN
                                                                IF "No." = '' THEN
                                                                  EXIT;

                                                                CASE "Capacity Type" OF
                                                                  "Capacity Type"::"Work Center":
                                                                    BEGIN
                                                                      WorkCenter.GET("No.");
                                                                      WorkCenter.TESTFIELD("Work Center Group Code");
                                                                      "Work Center No." := WorkCenter."No.";
                                                                      "Work Center Group Code" := WorkCenter."Work Center Group Code";
                                                                      Efficiency := WorkCenter.Efficiency;
                                                                      IF NOT WorkCenter."Consolidated Calendar" THEN
                                                                        Capacity := WorkCenter.Capacity;
                                                                    END;
                                                                  "Capacity Type"::"Machine Center":
                                                                    BEGIN
                                                                      MachineCenter.GET("No.");
                                                                      MachineCenter.TESTFIELD("Work Center No.");
                                                                      WorkCenter.GET(MachineCenter."Work Center No.");
                                                                      WorkCenter.TESTFIELD("Work Center Group Code");
                                                                      "Work Center No." := WorkCenter."No.";
                                                                      "Work Center Group Code" := WorkCenter."Work Center Group Code";
                                                                      Efficiency := MachineCenter.Efficiency;
                                                                      Capacity := MachineCenter.Capacity;
                                                                    END;
                                                                END;
                                                                IF "Ending Time" <> 0T THEN
                                                                  VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§];
                                                   NotBlank=Yes }
    { 4   ;   ;Date                ;Date          ;OnValidate=BEGIN
                                                                CheckRedundancy;
                                                              END;

                                                   CaptionML=[ENU=Date;
                                                              ESP=Fecha];
                                                   NotBlank=Yes }
    { 5   ;   ;Work Shift Code     ;Code10        ;TableRelation="Work Shift";
                                                   OnValidate=BEGIN
                                                                CheckRedundancy;
                                                              END;

                                                   CaptionML=[ENU=Work Shift Code;
                                                              ESP=C¢d. turno trabajo];
                                                   NotBlank=Yes }
    { 6   ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                IF ("Ending Time" = 0T) OR
                                                                   ("Ending Time" < "Starting Time")
                                                                THEN BEGIN
                                                                  CalendarEntry.RESET;
                                                                  CalendarEntry.SETRANGE("Capacity Type","Capacity Type");
                                                                  CalendarEntry.SETRANGE("No.","No.");
                                                                  CalendarEntry.SETRANGE(Date,Date);
                                                                  CalendarEntry.SETRANGE("Starting Time","Starting Time",235959T);
                                                                  IF CalendarEntry.FIND('-') THEN
                                                                    "Ending Time" := CalendarEntry."Starting Time"
                                                                  ELSE
                                                                    "Ending Time" := 235959T;
                                                                END;
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ESP=Hora inicial];
                                                   NotBlank=Yes }
    { 7   ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                IF ("Ending Time" < "Starting Time") AND
                                                                   ("Ending Time" <> 000000T)
                                                                THEN
                                                                  ERROR(Text000,FIELDCAPTION("Ending Time"),FIELDCAPTION("Starting Time"));

                                                                CalculateCapacity;

                                                                CheckRedundancy;

                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Ending Time;
                                                              ESP=Hora final];
                                                   NotBlank=Yes }
    { 8   ;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=[ENU=Work Center No.;
                                                              ESP=N§ centro trabajo];
                                                   Editable=No }
    { 9   ;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   CaptionML=[ENU=Work Center Group Code;
                                                              ESP=C¢d. grupo centro trab.];
                                                   Editable=No }
    { 10  ;   ;Capacity (Total)    ;Decimal       ;CaptionML=[ENU=Capacity (Total);
                                                              ESP=Capacidad (Total)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 11  ;   ;Capacity (Effective);Decimal       ;CaptionML=[ENU=Capacity (Effective);
                                                              ESP=Capacidad (efectiva)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Efficiency          ;Decimal       ;OnValidate=BEGIN
                                                                "Capacity (Effective)" := ROUND("Capacity (Total)" * Efficiency / 100,0.001);
                                                              END;

                                                   CaptionML=[ENU=Efficiency;
                                                              ESP=Eficiencia];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Capacity            ;Decimal       ;OnValidate=BEGIN
                                                                CalculateCapacity;
                                                              END;

                                                   CaptionML=[ENU=Capacity;
                                                              ESP=Capacidad];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 22  ;   ;Absence Efficiency  ;Decimal       ;OnValidate=BEGIN
                                                                "Capacity (Effective)" := ROUND("Capacity (Total)" * Efficiency / 100,0.001);
                                                              END;

                                                   CaptionML=[ENU=Absence Efficiency;
                                                              ESP=Eficiencia ausencia];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 23  ;   ;Absence Capacity    ;Decimal       ;OnValidate=BEGIN
                                                                CalculateCapacity;
                                                              END;

                                                   CaptionML=[ENU=Absence Capacity;
                                                              ESP=Ausencia capacidad];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 24  ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                Date := DT2DATE("Starting Date-Time");
                                                                VALIDATE("Starting Time",DT2TIME("Starting Date-Time"));
                                                              END;

                                                   CaptionML=[ENU=Starting Date-Time;
                                                              ESP=Fecha-hora inicial] }
    { 25  ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                Date := DT2DATE("Ending Date-Time");
                                                                VALIDATE("Ending Time",DT2TIME("Ending Date-Time"));
                                                              END;

                                                   CaptionML=[ENU=Ending Date-Time;
                                                              ESP=Fecha-hora final] }
  }
  KEYS
  {
    {    ;Capacity Type,No.,Date,Starting Time,Ending Time,Work Shift Code;
                                                   SumIndexFields=Capacity (Total),Capacity (Effective);
                                                   Clustered=Yes }
    {    ;Work Center No.,Date,Work Shift Code    ;SumIndexFields=Capacity (Total),Capacity (Effective) }
    {    ;Work Center Group Code,Date,Work Shift Code;
                                                   SumIndexFields=Capacity (Total),Capacity (Effective) }
    {    ;Capacity Type,No.,Starting Date-Time,Ending Date-Time,Absence Capacity }
    {    ;Capacity Type,No.,Ending Date-Time,Starting Date-Time }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be higher than %2.;ESP=%1 debe ser mayor que %2.';
      Text001@1001 : TextConst 'ENU=There is redundancy in %1 within the calendar of %2. From %3 to %4. Conflicting time from %5 to %6.;ESP=Existe redundancia en %1 en el calendario %2. De %3 a %4. Hora de conflicto de %5 a%6.';
      WorkCenter@1002 : Record 99000754;
      MachineCenter@1003 : Record 99000758;
      CalendarEntry@1004 : Record 99000757;
      CalendarMgt@1005 : Codeunit 99000755;

    PROCEDURE CheckRedundancy@1();
    BEGIN
      IF ("Starting Time" = 0T) AND ("Ending Time" = 0T) THEN
        EXIT;

      CalendarEntry.SETRANGE("Capacity Type","Capacity Type");
      CalendarEntry.SETRANGE("No.","No.");
      CalendarEntry.SETRANGE(Date,Date);
      CalendarEntry.SETFILTER("Starting Time",'<%1',"Ending Time");
      CalendarEntry.SETFILTER("Ending Time",'>%1|%2',"Starting Time",000000T);

      IF CalendarEntry.FIND('-') THEN
        REPEAT
          IF (CalendarEntry."Starting Time" <> xRec."Starting Time") OR
             (CalendarEntry."Ending Time" <> xRec."Ending Time") OR
             (CalendarEntry."Work Shift Code" <> xRec."Work Shift Code")
          THEN
            ERROR(
              Text001,
              "Capacity Type",
              "No.",
              "Starting Time",
              "Ending Time",
              CalendarEntry."Starting Time",
              CalendarEntry."Ending Time");
        UNTIL CalendarEntry.NEXT = 0;
    END;

    PROCEDURE CalculateCapacity@2();
    BEGIN
      WorkCenter.GET("Work Center No.");

      IF ("Starting Time" = 0T) AND
         ("Ending Time" = 0T)
      THEN BEGIN
        VALIDATE("Capacity (Total)",0);
        EXIT;
      END;

      "Capacity (Total)" :=
        ROUND(
          ("Ending Time" - "Starting Time") /
          CalendarMgt.TimeFactor(WorkCenter."Unit of Measure Code") *
          (Capacity - "Absence Capacity"),WorkCenter."Calendar Rounding Precision");

      "Capacity (Effective)" := ROUND("Capacity (Total)" * Efficiency / 100,WorkCenter."Calendar Rounding Precision");
    END;

    PROCEDURE Caption@3() : Text[100];
    BEGIN
      IF "Capacity Type" = "Capacity Type"::"Machine Center" THEN BEGIN
        IF NOT MachineCenter.GET(GETFILTER("No.")) THEN
          EXIT('');
        EXIT(
          STRSUBSTNO('%1 %2',
            MachineCenter."No.",MachineCenter.Name));
      END ELSE BEGIN
        IF NOT WorkCenter.GET(GETFILTER("No.")) THEN
          EXIT('');
        EXIT(
          STRSUBSTNO('%1 %2',
            WorkCenter."No.",WorkCenter.Name));
      END;
    END;

    PROCEDURE UpdateDatetime@11();
    BEGIN
      "Starting Date-Time" := CREATEDATETIME(Date,"Starting Time");
      "Ending Date-Time" := CREATEDATETIME(Date,"Ending Time");
    END;

    BEGIN
    END.
  }
}
