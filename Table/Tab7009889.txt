OBJECT Table 7009889 Linea importacion Cont.Comp
{
  OBJECT-PROPERTIES
  {
    Date=23/01/13;
    Time=18:05:50;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=BEGIN

               SetID;
             END;

    CaptionML=[ENU=Purch. Contr. Importation line;
               ESP=Linea importacion Cont.Comp];
    LookupFormID=Form7010026;
    DrillDownFormID=Form7010026;
  }
  FIELDS
  {
    { 1   ;   ;No Importacion      ;Integer       ;CaptionML=[ENU=Importation No.;
                                                              ESP=N§ Importaci¢n] }
    { 2   ;   ;No Lin              ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 3   ;   ;Tipo                ;Option        ;CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionCaptionML=[ENU=Error,Season,Room,Comments,Allotment,Price type,Board rates,Room rates,Person surcharges,Rate offers,Offers,Early Booking,Extras,Age,Release,BoardxRoom;
                                                                    ESP=Error,Temporada,Habitaci¢n,Comentarios,Cupo,Tipos precio,Precios r‚gimen,Precios habitaci¢n,Suplementos persona,Ofertas precio,Ofertas,Early Booking,Extras,Edades,Release,RegimenxHab];
                                                   OptionString=Error,Temporada,Habitacion,Comentarios,Cupo,Tipos precio,Precios regimen,Precios habitacion,Suplementos persona,Ofertas precio,Ofertas,Early Booking,Extras,Edades,Release,RegimenxHab }
    { 4   ;   ;Codigo              ;Code20        ;CaptionML=[ENU=Code;
                                                              ESP=C¢digo] }
    { 5   ;   ;Fecha Desde         ;Date          ;CaptionML=[ENU=Date From;
                                                              ESP=Fecha desde] }
    { 6   ;   ;Fecha Hasta         ;Date          ;CaptionML=[ENU=Date To;
                                                              ESP=Fecha hasta] }
    { 7   ;   ;Descripcion         ;Text250       ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 8   ;   ;Cantidad            ;Integer       ;CaptionML=[ENU=Amount;
                                                              ESP=Cantidad] }
    { 9   ;   ;Cantidad 2          ;Integer       ;CaptionML=[ENU=Amount 2;
                                                              ESP=Cantidad 2] }
    { 10  ;   ;Importe             ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ESP=Importe] }
    { 11  ;   ;Temporada           ;Code1         ;CaptionML=[ENU=Season;
                                                              ESP=Temporada] }
    { 12  ;   ;Tipo Precio         ;Code10        ;CaptionML=[ENU=Price type;
                                                              ESP=Tipo Precio] }
    { 13  ;   ;Linea Error         ;Integer       ;CaptionML=[ENU=Error line;
                                                              ESP=Linea Error];
                                                   Description=Linea a la que hace referencia el error. En caso de 0 hace referencia a la cabecera }
    { 14  ;   ;Errores             ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Linea importacion Cont.Comp" WHERE (Tipo=CONST(Error),
                                                                                                          No Importacion=FIELD(No Importacion),
                                                                                                          Linea Error=FIELD(No Lin)));
                                                   CaptionML=[ENU=Errors;
                                                              ESP=Errores] }
    { 15  ;   ;Rango Edad          ;Code10        ;CaptionML=[ENU=Age range;
                                                              ESP=Rango Edad] }
    { 16  ;   ;Tipo Oferta         ;Code10        ;CaptionML=[ENU=Offer type;
                                                              ESP=Tipo Oferta] }
    { 17  ;   ;Habitacion          ;Code20        ;CaptionML=[ENU=Room;
                                                              ESP=Habitaci¢n] }
    { 18  ;   ;Genera Suplemento   ;Boolean       ;CaptionML=[ENU=Generate suplement;
                                                              ESP=Genera Suplemento] }
    { 19  ;   ;DOW                 ;Text10        ;CaptionML=[ENU=DOW;
                                                              ESP=DOW];
                                                   Description=+001 }
  }
  KEYS
  {
    {    ;No Importacion,No Lin                   ;Clustered=Yes }
    {    ;Linea Error                             ;KeyGroups=RENUMERING }
    {    ;Codigo,Tipo                             ;KeyGroups=RENUMERING }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100253000 : TextConst 'ENU=Conversion for the field %1 with value %2 has not been found;ESP=No se encuentra conversi¢n para el campo %1 con valor %2.';

    PROCEDURE SetID@1100253000();
    VAR
      lrLin@1100253000 : Record 7009889;
    BEGIN
      // SetID

      CLEAR(lrLin);
      lrLin.SETRANGE ("No Importacion", "No Importacion");
      "No Lin" := 1;
      IF lrLin.FINDLAST THEN
        "No Lin" += lrLin."No Lin";
    END;

    PROCEDURE BuscarConv@1100253001(pwTo@1100253000 : Code[20]) rvCode : Code[20];
    VAR
      lrConv@1100253001 : Record 7009887;
      lrCab@1100253002 : Record 7009888;
      lwEnc@1100253003 : Boolean;
      lrParPer@1100253004 : Record 7009701;
    BEGIN
      // BuscarConv.

      CASE Tipo OF

        Tipo::Habitacion, Tipo::Cupo,Tipo::"Suplementos persona" : BEGIN
          CLEAR(lrConv);
          lrConv.SETCURRENTKEY(Tipo, Touroperador, Valor);
          lrConv.SETRANGE (Tipo        , lrConv.Tipo::"Habitacion cupo");
          lrConv.SETRANGE (Touroperador, pwTo);
          lrConv.SETRANGE (Valor       , Codigo);
          lrConv.SETRANGE ("Id Cab"    , "No Importacion");
          lwEnc := lrConv.FINDFIRST;
          IF lwEnc AND (lrConv."Codigo Navision" <> '') THEN
            EXIT(lrConv."Codigo Navision")
          ELSE BEGIN
            // Se usa el mismo c¢digo para la habitaci¢n en navision que el que se usa
            // en el touroperador.
            IF NOT lwEnc THEN BEGIN
              CLEAR(lrConv);
              lrConv.Tipo              := lrConv.Tipo::"Habitacion cupo";
              lrConv.Touroperador      := pwTo;
              lrConv.Valor             := Codigo;
              lrConv."Id Cab"          := "No Importacion";
              lrConv."Codigo Navision" := Codigo;

              lrCab.GET("No Importacion");
              lrConv."Nombre Hotel" := lrCab."Nombre Hotel";

              lrCab.GET("No Importacion");
              // Buscamos si se puede encontrar el c¢digo de habitaci¢n a trav‚s de contratos
              // anteriores.
              lrConv.BuscarConvAnteriores(lrCab);

              lrConv.INSERT(TRUE);
            END
            ELSE BEGIN
              lrConv."Codigo Navision" := lrConv.Valor;
              lrConv.MODIFY;
            END;
            EXIT(lrConv."Codigo Navision");
          END;
        END;

        Tipo::"Tipos precio"        :; //**
        Tipo::"Precios habitacion"  :; //**

        Tipo::"Precios regimen", Tipo::RegimenxHab: BEGIN
          CLEAR(lrConv);
          lrConv.SETCURRENTKEY(Tipo, Touroperador, Valor);
          lrConv.SETRANGE (Tipo        , lrConv.Tipo::Regimen);
          lrConv.SETRANGE (Touroperador, pwTo);
          lrConv.SETRANGE (Valor       , Codigo);
          lwEnc := lrConv.FINDFIRST;
          IF lwEnc AND (lrConv."Codigo Navision" <> '') THEN
            EXIT(lrConv."Codigo Navision")
          ELSE BEGIN
            IF NOT lwEnc THEN BEGIN
              CLEAR(lrConv);
              lrConv.Tipo         := lrConv.Tipo::Regimen;
              lrConv.Touroperador := pwTo;
              lrConv.Valor        := Codigo;
              lrConv.INSERT(TRUE);
            END;
            lrCab.GET("No Importacion");
            lrCab.A¤adirError("No Lin", STRSUBSTNO(Text001, 'Regimen', Codigo));
          END;
        END;

        Tipo::Edades : BEGIN
          CLEAR(lrConv);
          lrConv.SETCURRENTKEY(Tipo, Touroperador, Valor);
          lrConv.SETRANGE (Tipo        , lrConv.Tipo::"Tipo persona");
          lrConv.SETRANGE (Touroperador, pwTo);
          lrConv.SETRANGE (Valor       , Codigo);
          lrConv.SETRANGE ("Id Cab"    , "No Importacion");
          lwEnc := lrConv.FINDFIRST;
          IF lwEnc AND (lrConv."Codigo Navision" <> '') THEN
            EXIT(lrConv."Codigo Navision")
          ELSE BEGIN
            IF NOT lwEnc THEN BEGIN
              // Se rellena automaticamente el tipo de persona: si es 0 se trata como adulto.
              // En caso contrario se trata como ni¤o.
              CLEAR(lrParPer);
              lrParPer.FINDFIRST;
              CLEAR(lrConv);
              lrConv.Tipo         := lrConv.Tipo::"Tipo persona";
              lrConv.Touroperador := pwTo;
              lrConv.Valor        := Codigo;
              lrConv."Id Cab"     := "No Importacion";
              CASE TRUE OF
                Codigo = '0' : lrConv."Codigo Navision" := lrParPer."Codigo Adulto";
                ELSE           lrConv."Codigo Navision" := lrParPer."Codigo Ni¤o";
              END;
              lrConv.INSERT(TRUE);
              EXIT(lrConv."Codigo Navision");
            END;
            lrCab.GET("No Importacion");
            lrCab.A¤adirError("No Lin", STRSUBSTNO(Text001, 'Tipo Persona', Codigo));
          END;
        END;

        Tipo::Extras: BEGIN
          CLEAR(lrConv);
          lrConv.SETCURRENTKEY(Tipo, Touroperador, Valor);
          lrConv.SETRANGE (Tipo        , lrConv.Tipo::Extra);
          lrConv.SETRANGE (Touroperador, pwTo);
          lrConv.SETRANGE (Valor       , Codigo);
          lwEnc := lrConv.FINDFIRST;
          IF lwEnc AND (lrConv."Codigo Navision" <> '') THEN
            EXIT(lrConv."Codigo Navision")
          ELSE BEGIN
            IF NOT lwEnc THEN BEGIN
              CLEAR(lrConv);
              lrConv.Tipo         := lrConv.Tipo::Extra;
              lrConv.Touroperador := pwTo;
              lrConv.Valor        := Codigo;
              lrConv.INSERT(TRUE);
            END;
            lrCab.GET("No Importacion");
            lrCab.A¤adirError("No Lin", STRSUBSTNO(Text001, 'Extra', Codigo));
          END;
        END;
      END;
    END;

    PROCEDURE GetTextoDiasSemana@1100253002() rvText : Text[250];
    VAR
      lwIndex@1100253000 : Integer;
    BEGIN
      // GetTextoDiasSemana.
      //+001
      CASE DOW OF
        'XXXXXXX': EXIT('Toda la semana');
        ''       : EXIT('');
        ELSE BEGIN
          FOR lwIndex := 1 TO 7 DO BEGIN
            IF DOW[lwIndex] = 'X' THEN BEGIN
              CASE lwIndex OF
                1: rvText := rvText + 'Lunes, ';
                2: rvText := rvText + 'Martes, ';
                3: rvText := rvText + 'Mi‚rcoles, ';
                4: rvText := rvText + 'Jueves, ';
                5: rvText := rvText + 'Viernes, ';
                6: rvText := rvText + 'Sabado, ';
                7: rvText := rvText + 'Domingo, ';
              END;
            END;
          END;
          EXIT(DELCHR(rvText, '>', ' ,'));
        END;
      END;
      //-001
    END;

    BEGIN
    {

      $001 AJF 04052011 Nuevo campo DOW y funci¢n GetTextoDiasSemana para indicar los d¡as de las semana en los que se aplican los
                        precios de habitaci¢n.
    }
    END.
  }
}
