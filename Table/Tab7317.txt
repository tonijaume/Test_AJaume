OBJECT Table 7317 Warehouse Receipt Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnDelete=VAR
               WhseRcptHeader@1000 : Record 7316;
               OrderStatus@1001 : Option;
             BEGIN
               IF (Quantity <> "Qty. Outstanding") AND ("Qty. Outstanding" <> 0) THEN
                 IF NOT CONFIRM(Text004,FALSE,TABLECAPTION,"Line No.") THEN
                   ERROR(Text003);

               WhseRcptHeader.GET("No.");
               OrderStatus := WhseRcptHeader.GetHeaderStatus("Line No.");
               IF OrderStatus <> WhseRcptHeader."Document Status" THEN BEGIN
                 WhseRcptHeader.VALIDATE("Document Status",OrderStatus);
                 WhseRcptHeader.MODIFY;
               END;
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Warehouse Receipt Line;
               ESP=L¡n. recepci¢n almac‚n];
    PasteIsValid=No;
    LookupFormID=Form7342;
    DrillDownFormID=Form7342;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ESP=N§];
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea];
                                                   Editable=No }
    { 3   ;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              ESP=Tipo procedencia mov.];
                                                   Editable=No }
    { 4   ;   ;Source Subtype      ;Option        ;CaptionML=[ENU=Source Subtype;
                                                              ESP=Subtipo origen];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    ESP=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 6   ;   ;Source No.          ;Code20        ;CaptionML=[ENU=Source No.;
                                                              ESP=C¢d. procedencia mov.];
                                                   Editable=No }
    { 7   ;   ;Source Line No.     ;Integer       ;CaptionML=[ENU=Source Line No.;
                                                              ESP=N§ l¡n. origen];
                                                   Editable=No }
    { 9   ;   ;Source Document     ;Option        ;CaptionML=[ENU=Source Document;
                                                              ESP=Documento origen];
                                                   OptionCaptionML=[ENU=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer;
                                                                    ESP=,Pedido venta,,,Devoluci¢n venta,Pedido compra,,,Devoluci¢n compra,Transferencia entrada];
                                                   OptionString=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer;
                                                   Editable=No }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n];
                                                   Editable=No }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=[ENU=Shelf No.;
                                                              ESP=N§ estante] }
    { 12  ;   ;Bin Code            ;Code20        ;TableRelation=IF (Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code))
                                                                 ELSE IF (Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                  Zone Code=FIELD(Zone Code));
                                                   OnValidate=BEGIN
                                                                IF xRec."Bin Code" <> "Bin Code" THEN
                                                                  IF "Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF "Bin Code" = Location."Adjustment Bin Code" THEN
                                                                      FIELDERROR(
                                                                        "Bin Code",
                                                                          STRSUBSTNO(
                                                                            Text000,
                                                                            Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                            Location.TABLECAPTION));

                                                                    IF Location."Directed Put-away and Pick" THEN
                                                                      CheckBin(FALSE);
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n] }
    { 13  ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF xRec."Zone Code" <> "Zone Code" THEN BEGIN
                                                                  IF "Zone Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  END;
                                                                  "Bin Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Zone Code;
                                                              ESP=C¢d. zona] }
    { 14  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto];
                                                   Editable=No }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. Outstanding",(Quantity - "Qty. Received"));
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=[ENU=Qty. (Base);
                                                              ESP=Cantidad (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                                VALIDATE("Qty. to Receive","Qty. Outstanding");
                                                              END;

                                                   CaptionML=[ENU=Qty. Outstanding;
                                                              ESP=Cdad. pendiente];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=[ENU=Qty. Outstanding (Base);
                                                              ESP=Cdad. pendiente (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 21  ;   ;Qty. to Receive     ;Decimal       ;OnValidate=VAR
                                                                WMSMgt@1000 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Qty. to Receive" > "Qty. Outstanding" THEN
                                                                  ERROR(
                                                                    Text002,
                                                                    "Qty. Outstanding");

                                                                GetLocation("Location Code");
                                                                IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. to Receive",Cubage,Weight);

                                                                  IF (CurrFieldNo <> 0) AND ("Qty. to Receive" > 0) THEN
                                                                   CheckBin(TRUE);
                                                                END;

                                                                "Qty. to Cross-Dock" := 0;
                                                                "Qty. to Cross-Dock (Base)" := 0;
                                                                "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");

                                                                Item.CheckSerialNoQty("Item No.",FIELDCAPTION("Qty. to Receive (Base)"),"Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive;
                                                              ESP=Cantidad a recibir];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 22  ;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive (Base);
                                                              ESP=Cdad. a recibir (base)];
                                                   DecimalPlaces=0:5 }
    { 23  ;   ;Qty. Received       ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Received (Base)" := CalcBaseQty("Qty. Received");
                                                              END;

                                                   CaptionML=[ENU=Qty. Received;
                                                              ESP=Cdad. recibida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 24  ;   ;Qty. Received (Base);Decimal       ;CaptionML=[ENU=Qty. Received (Base);
                                                              ESP=Cdad. recibida (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 29  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida];
                                                   Editable=No }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante];
                                                   Editable=No }
    { 32  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n];
                                                   Editable=No }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2];
                                                   Editable=No }
    { 34  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=" ,Partially Received,Completely Received";
                                                                    ESP=" ,Recibido parcialmente,Recibido completamente"];
                                                   OptionString=[ ,Partially Received,Completely Received];
                                                   Editable=No }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=[ENU=Sorting Sequence No.;
                                                              ESP=N§ secuencia clasif.];
                                                   Editable=No }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento] }
    { 37  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial] }
    { 38  ;   ;Cubage              ;Decimal       ;CaptionML=[ENU=Cubage;
                                                              ESP=Cubicaje];
                                                   DecimalPlaces=0:5 }
    { 39  ;   ;Weight              ;Decimal       ;CaptionML=[ENU=Weight;
                                                              ESP=Peso];
                                                   DecimalPlaces=0:5 }
    { 48  ;   ;Not upd. by Src. Doc. Post.;Boolean;CaptionML=[ENU=Not upd. by Src. Doc. Post.;
                                                              ESP=No actualiz. por regis. doc.];
                                                   Editable=No }
    { 49  ;   ;Posting from Whse. Ref.;Integer    ;CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ESP=Regis. desde almac. ref.];
                                                   Editable=No }
    { 50  ;   ;Qty. to Cross-Dock  ;Decimal       ;OnValidate=BEGIN
                                                                CrossDockMgt.GetUseCrossDock(UseCrossDock,"Location Code","Item No.");
                                                                IF NOT UseCrossDock THEN
                                                                  ERROR(Text006,Item.TABLECAPTION,Location.TABLECAPTION);
                                                                IF "Qty. to Cross-Dock" > "Qty. to Receive" THEN
                                                                  ERROR(
                                                                    Text005,
                                                                    "Qty. to Receive");

                                                                "Qty. to Cross-Dock (Base)" := CalcBaseQty("Qty. to Cross-Dock");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Cross-Dock;
                                                              ESP=Cdad. a tr nsito directo];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 51  ;   ;Qty. to Cross-Dock (Base);Decimal  ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Cross-Dock","Qty. to Cross-Dock (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Cross-Dock (Base);
                                                              ESP=Cdad. a tr nsito dir. (base)];
                                                   DecimalPlaces=0:5 }
    { 52  ;   ;Cross-Dock Zone Code;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code),
                                                                                  Cross-Dock Bin Zone=CONST(Yes));
                                                   CaptionML=[ENU=Cross-Dock Zone Code;
                                                              ESP=C¢d. zona tr nsito directo] }
    { 53  ;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=IF (Cross-Dock Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                      Cross-Dock Bin=CONST(Yes))
                                                                                                                      ELSE IF (Cross-Dock Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                  Zone Code=FIELD(Cross-Dock Zone Code),
                                                                                                                                                                                  Cross-Dock Bin=CONST(Yes));
                                                   CaptionML=[ENU=Cross-Dock Bin Code;
                                                              ESP=C¢d. ubicac. tr nsito directo] }
  }
  KEYS
  {
    {    ;No.,Line No.                            ;SumIndexFields=Qty. to Receive (Base);
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Source Type,Source Subtype,Source No.,Source Line No.;
                                                   SumIndexFields=Qty. Outstanding (Base);
                                                   MaintainSIFTIndex=No }
    {    ;No.,Source Type,Source Subtype,Source No.,Source Line No.;
                                                   MaintainSQLIndex=No }
    {    ;No.,Sorting Sequence No.                ;MaintainSQLIndex=No }
    {    ;No.,Shelf No.                           ;MaintainSQLIndex=No }
    {    ;No.,Item No.                            ;MaintainSQLIndex=No }
    {    ;No.,Source Document,Source No.          ;MaintainSQLIndex=No }
    {    ;No.,Due Date                            ;MaintainSQLIndex=No }
    {    ;No.,Bin Code                            ;MaintainSQLIndex=No }
    {    ;Item No.,Location Code,Variant Code     ;SumIndexFields=Qty. Outstanding (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Bin Code,Location Code                  ;SumIndexFields=Cubage,Weight;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1002 : Record 14;
      Item@1012 : Record 27;
      Bin@1009 : Record 7354;
      CrossDockMgt@1005 : Codeunit 5780;
      UseCrossDock@1006 : Boolean;
      HideValidationDialog@1000 : Boolean;
      Text000@1003 : TextConst 'ENU=must not be the %1 of the %2;ESP=no debe ser el %1 del %2';
      Text001@1022 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      Text002@1021 : TextConst 'ENU=You cannot handle more than the outstanding %1 units.;ESP=No puede manipular m s de %1 unidades pendientes.';
      Text003@1001 : TextConst 'ENU=Cancelled.;ESP=Cancelado.';
      Text004@1004 : TextConst 'ENU=%1 %2 is not completely received.\Do you really want to delete the %1?;ESP=%1 %2 no se ha recibido completamente.\¨Desea eliminar el %1?';
      Text005@1008 : TextConst 'ENU=You cannot Cross-Dock  more than the %1 units to be received.;ESP=No puede realizar tr ns. directo de m s de %1 unidades a recibir.';
      Text006@1007 : TextConst 'ENU=Cross-Docking is disabled for this %1 and/or %2;ESP=Est  deshabilitado Tr nsito directo para este %1 y/o %2';

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE CalcQty@5(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE AutofillQtyToReceive@10(VAR WhseReceiptLine@1000 : Record 7317);
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            VALIDATE("Qty. to Receive","Qty. Outstanding");
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE DeleteQtyToReceive@11(VAR WhseReceiptLine@1000 : Record 7317);
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            VALIDATE("Qty. to Receive",0);
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE ItemAvailability@12(AvailabilityType@1000 : 'Date,Variant,Location');
    VAR
      ItemAvailByDate@1003 : Form 157;
      ItemAvailByVar@1002 : Form 5414;
      ItemAvailByLoc@1001 : Form 492;
    BEGIN
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      Item.SETRANGE("No.","Item No.");
      Item.SETRANGE("Date Filter",0D,"Due Date");

      CASE AvailabilityType OF
        AvailabilityType::Date:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Location Filter","Location Code");
            Item.SETRANGE("Bin Filter");
            CLEAR(ItemAvailByDate);
            ItemAvailByDate.SETRECORD(Item);
            ItemAvailByDate.SETTABLEVIEW(Item);
            ItemAvailByDate.RUNMODAL;
          END;
        AvailabilityType::Variant:
          BEGIN
            Item.SETRANGE("Location Filter","Location Code");
            Item.SETRANGE("Bin Filter");
            CLEAR(ItemAvailByVar);
            ItemAvailByVar.SETRECORD(Item);
            ItemAvailByVar.SETTABLEVIEW(Item);
            ItemAvailByVar.RUNMODAL;
          END;
        AvailabilityType::Location:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Bin Filter");
            CLEAR(ItemAvailByLoc);
            ItemAvailByLoc.SETRECORD(Item);
            ItemAvailByLoc.SETTABLEVIEW(Item);
            ItemAvailByLoc.RUNMODAL;
          END;
      END;
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE SetHideValidationDialog@8(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE GetLineStatus@1() : Integer;
    BEGIN
      IF "Qty. Outstanding" = 0 THEN
        Status := Status::"Completely Received"
      ELSE
        IF Quantity = "Qty. Outstanding" THEN
          Status := Status::" "
        ELSE
          Status := Status::"Partially Received";

      EXIT(Status);
    END;

    LOCAL PROCEDURE GetLocation@2(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@4(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      GetLocation(LocationCode);
      IF NOT Location."Bin Mandatory" THEN
        CLEAR(Bin)
      ELSE
        IF (Bin."Location Code" <> LocationCode) OR
           (Bin.Code <> BinCode)
        THEN
          Bin.GET(LocationCode,BinCode);
    END;

    PROCEDURE CheckBin@3(CalledFromQtytoReceive@1002 : Boolean);
    VAR
      BinContent@1001 : Record 7302;
      BinType@1000 : Record 7303;
      DeductCubage@1006 : Decimal;
      DeductWeight@1005 : Decimal;
    BEGIN
      IF CalledFromQtytoReceive THEN BEGIN
        DeductCubage :=  xRec.Cubage;
        DeductWeight :=  xRec.Weight;
      END;

      IF BinContent.GET(
        "Location Code","Bin Code",
        "Item No.","Variant Code","Unit of Measure Code")
      THEN BEGIN
        BinContent.CheckIncreaseBinContent(
          "Qty. to Receive",xRec."Qty. to Receive",
          DeductCubage,DeductWeight,Cubage,Weight,FALSE);
        IF NOT CalledFromQtytoReceive THEN BEGIN
          BinContent.TESTFIELD("Bin Type Code");
          BinType.GET(BinContent."Bin Type Code");
          BinType.TESTFIELD(Receive);
          "Zone Code" := BinContent."Zone Code";
        END;
      END ELSE BEGIN
        GetBin("Location Code","Bin Code");
        Bin.CheckIncreaseBin(
          "Bin Code","Item No.","Qty. to Receive",
          DeductCubage,DeductWeight,Cubage,Weight,FALSE);
        IF NOT CalledFromQtytoReceive THEN BEGIN
          Bin.TESTFIELD("Bin Type Code");
          BinType.GET(Bin."Bin Type Code");
          BinType.TESTFIELD(Receive);
          "Zone Code" := Bin."Zone Code";
        END;
      END;
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      PurchaseLine@1000 : Record 39;
      SalesLine@1001 : Record 37;
      TransferLine@1002 : Record 5741;
      ReservePurchLine@1003 : Codeunit 99000834;
      ReserveSalesLine@1004 : Codeunit 99000832;
      ReserveTransferLine@1005 : Codeunit 99000836;
      SecondSourceQtyArray@1007 : ARRAY [3] OF Decimal;
      Direction@1006 : 'Outbound,Inbound';
    BEGIN
      TESTFIELD("No.");
      TESTFIELD("Qty. (Base)");

      GetItem;
      Item.TESTFIELD("Item Tracking Code");

      SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
      SecondSourceQtyArray[2] := "Qty. to Receive (Base)";
      SecondSourceQtyArray[3] := 0;

      CASE "Source Type" OF
        DATABASE::"Purchase Line":
          BEGIN
            IF PurchaseLine.GET("Source Subtype","Source No.","Source Line No.") THEN
              ReservePurchLine.CallItemTracking2(PurchaseLine,SecondSourceQtyArray);
          END;
        DATABASE::"Sales Line":
          BEGIN
            IF SalesLine.GET("Source Subtype","Source No.","Source Line No.") THEN
              ReserveSalesLine.CallItemTracking2(SalesLine,SecondSourceQtyArray);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            Direction := Direction::Inbound;
            IF TransferLine.GET("Source No.","Source Line No.") THEN
              ReserveTransferLine.CallItemTracking2(TransferLine,Direction,SecondSourceQtyArray);
          END
      END;
    END;

    BEGIN
    END.
  }
}
