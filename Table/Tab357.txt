OBJECT Table 357 Document Dimension
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Dimension Value Code");
               GLSetup.GET;
               UpdateLineDim(Rec,FALSE);
               IF "Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
                 UpdateGlobalDimCode(
                   1,"Table ID","Document Type","Document No.","Line No.","Dimension Value Code");
               IF "Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
                 UpdateGlobalDimCode(
                   2,"Table ID","Document Type","Document No.","Line No.","Dimension Value Code");
             END;

    OnModify=BEGIN
               GLSetup.GET;
               UpdateLineDim(Rec,FALSE);
               IF "Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
                 UpdateGlobalDimCode(
                   1,"Table ID","Document Type","Document No.","Line No.","Dimension Value Code");
               IF "Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
                 UpdateGlobalDimCode(
                   2,"Table ID","Document Type","Document No.","Line No.","Dimension Value Code");
             END;

    OnDelete=BEGIN
               GLSetup.GET;
               UpdateLineDim(Rec,TRUE);
               IF "Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
                 UpdateGlobalDimCode(
                   1,"Table ID","Document Type","Document No.","Line No.",'');
               IF "Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
                 UpdateGlobalDimCode(
                   2,"Table ID","Document Type","Document No.","Line No.",'');
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Document Dimension;
               ESP=Dimensi¢n documento];
  }
  FIELDS
  {
    { 1   ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   CaptionML=[ENU=Table ID;
                                                              ESP=Id. tabla];
                                                   NotBlank=Yes }
    { 2   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento];
                                                   OptionCaptionML=[ENU="Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order, ";
                                                                    ESP="Oferta,Pedido,Factura,Abono,Pedido abierto,Devoluci¢n, "];
                                                   OptionString=[Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order, ] }
    { 3   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 5   ;   ;Dimension Code      ;Code20        ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                IF NOT DimMgt.CheckDim("Dimension Code") THEN
                                                                  ERROR(DimMgt.GetDimErr);
                                                              END;

                                                   CaptionML=[ENU=Dimension Code;
                                                              ESP=C¢d. dimensi¢n];
                                                   NotBlank=Yes }
    { 6   ;   ;Dimension Value Code;Code20        ;TableRelation="Dimension Value".Code WHERE (Dimension Code=FIELD(Dimension Code));
                                                   OnValidate=BEGIN
                                                                IF NOT DimMgt.CheckDimValue("Dimension Code","Dimension Value Code") THEN
                                                                  ERROR(DimMgt.GetDimErr);
                                                              END;

                                                   CaptionML=[ENU=Dimension Value Code;
                                                              ESP=C¢d. valor dimensi¢n];
                                                   NotBlank=Yes }
  }
  KEYS
  {
    {    ;Table ID,Document Type,Document No.,Line No.,Dimension Code;
                                                   Clustered=Yes }
    {    ;Dimension Code,Dimension Value Code     ;KeyGroups=Dim(Setup) }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You can not rename a %1.;ESP=No puede renombrar un %1.';
      Text001@1001 : TextConst 'ENU=You have changed a dimension.\\;ESP=Ha cambiado una dimensi¢n.\\';
      Text002@1002 : TextConst 'ENU=Do you want to update the lines?;ESP=¨Confirma que desea actualizar las l¡neas?';
      Text003@1003 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;ESP=Puede que haya cambiado una dim.\\¨Quiere actualizar las l¡neas?';
      GLSetup@1004 : Record 98;
      DimMgt@1005 : Codeunit 408;
      UpdateLine@1006 : 'NotSet,Update,DoNotUpdate';
      Text004@1008 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to the general ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?;ESP=Ha modificado una o varias dimensiones de %1, que ya se ha enviado. Al registrar la l¡nea con la dimensi¢n modificada en la contabilidad, los importes de la cuenta provisional de inventario no cuadrar n cuando se notifiquen por dimensi¢n.\\¨Desea conservar la dimensi¢n modificada?';
      Text005@1009 : TextConst 'ENU=Canceled.;ESP=Cancelado.';
      Text006@1010 : TextConst 'ENU=You may have changed a dimension. Some lines are already shipped. When you post the line with the changed dimension to the general ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to update the lines?;ESP=Es posible que haya modificado una dimensi¢n, pero algunas l¡neas ya se han enviado. Al registrar la l¡nea con la dimensi¢n modificada en la contabilidad, los importes de la cuenta provisional de inventario no cuadrar n cuando se notifiquen por dimensi¢n.\\¨Desea actualizar las l¡neas?';

    PROCEDURE UpdateGlobalDimCode@25(GlobalDimCodeNo@1000 : Integer;"Table ID"@1001 : Integer;"Document Type"@1002 : Option;"Document No."@1003 : Code[20];"Line No."@1004 : Integer;NewDimValue@1005 : Code[20]);
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      PurchHeader@1008 : Record 38;
      PurchLine@1009 : Record 39;
      ReminderHeader@1010 : Record 295;
      FinChrgMemoHeader@1011 : Record 302;
      TransHeader@1012 : Record 5740;
      TransLine@1013 : Record 5741;
      ServHeader@1014 : Record 5900;
      ServLine@1015 : Record 5902;
      ServItemLine@1019 : Record 5901;
      StdSalesLine@1017 : Record 171;
      StdPurchLine@1018 : Record 174;
      StdServLine@1020 : Record 5997;
    BEGIN
      CASE "Table ID" OF
        DATABASE::"Sales Header":
          BEGIN
            IF SalesHeader.GET("Document Type","Document No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  SalesHeader."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  SalesHeader."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              SalesHeader.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Sales Line":
          BEGIN
            IF SalesLine.GET("Document Type","Document No.","Line No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  SalesLine."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  SalesLine."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              SalesLine.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Purchase Header":
          BEGIN
            IF PurchHeader.GET("Document Type","Document No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  PurchHeader."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  PurchHeader."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              PurchHeader.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Purchase Line":
          BEGIN
            IF PurchLine.GET("Document Type","Document No.","Line No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  PurchLine."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  PurchLine."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              PurchLine.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Reminder Header":
          BEGIN
            IF ReminderHeader.GET("Document No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  ReminderHeader."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  ReminderHeader."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              ReminderHeader.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Finance Charge Memo Header":
          BEGIN
            IF FinChrgMemoHeader.GET("Document No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  FinChrgMemoHeader."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  FinChrgMemoHeader."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              FinChrgMemoHeader.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Transfer Header":
          BEGIN
            IF TransHeader.GET("Document No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  TransHeader."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  TransHeader."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              TransHeader.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Transfer Line":
          BEGIN
            IF TransLine.GET("Document No.","Line No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  TransLine."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  TransLine."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              TransLine.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Service Header":
          BEGIN
            IF ServHeader.GET("Document Type","Document No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  ServHeader."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  ServHeader."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              ServHeader.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Service Line":
          BEGIN
            IF ServLine.GET("Document Type","Document No.","Line No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  ServLine."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  ServLine."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              ServLine.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Service Item Line":
          BEGIN
            IF ServItemLine.GET("Document Type","Document No.","Line No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  ServItemLine."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  ServItemLine."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              ServItemLine.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Standard Sales Line":
          BEGIN
            IF StdSalesLine.GET("Document No.","Line No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  StdSalesLine."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  StdSalesLine."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              StdSalesLine.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Standard Purchase Line":
          BEGIN
            IF StdPurchLine.GET("Document No.","Line No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  StdPurchLine."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  StdPurchLine."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              StdPurchLine.MODIFY(TRUE);
            END;
          END;
        DATABASE::"Standard Service Line":
          BEGIN
            IF StdServLine.GET("Document No.","Line No.") THEN BEGIN
              CASE GlobalDimCodeNo OF
                1:
                  StdServLine."Shortcut Dimension 1 Code" := NewDimValue;
                2:
                  StdServLine."Shortcut Dimension 2 Code" := NewDimValue;
              END;
              StdServLine.MODIFY(TRUE);
            END;
          END;
      END;
    END;

    PROCEDURE UpdateLineDim@1(VAR DocDim@1000 : Record 357;FromOnDelete@1001 : Boolean);
    VAR
      NewDocDim@1002 : Record 357;
      SalesLine@1003 : Record 37;
      PurchaseLine@1004 : Record 39;
      TransLine@1005 : Record 5741;
      ServItemLine@1008 : Record 5901;
      ServLine@1006 : Record 5902;
      Question@1007 : Text[250];
      UpdateDim@1009 : Boolean;
    BEGIN
      WITH DocDim DO BEGIN
        IF ("Table ID" = DATABASE::"Sales Header") OR
           ("Table ID" = DATABASE::"Purchase Header") OR
           ("Table ID" = DATABASE::"Transfer Header") OR
           ("Table ID" = DATABASE::"Service Header") OR
           ("Table ID" = DATABASE::"Service Item Line")
        THEN BEGIN
          Question := STRSUBSTNO(Text001 + Text002);
          CASE "Table ID" OF
            DATABASE::"Sales Header":
              NewDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
            DATABASE::"Purchase Header":
              NewDocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
            DATABASE::"Transfer Header":
              NewDocDim.SETRANGE("Table ID",DATABASE::"Transfer Line");
            DATABASE::"Service Header":
              BEGIN
                IF ("Document Type" = ServItemLine."Document Type"::Order) OR
                   ("Document Type" = ServItemLine."Document Type"::Quote)
                THEN
                  NewDocDim.SETRANGE("Table ID",DATABASE::"Service Item Line")
                ELSE
                  NewDocDim.SETRANGE("Table ID",DATABASE::"Service Line");
              END;
            DATABASE::"Service Item Line":
              NewDocDim.SETRANGE("Table ID",DATABASE::"Service Line");
          END;
          NewDocDim.SETRANGE("Document Type","Document Type");
          NewDocDim.SETRANGE("Document No.","Document No.");
          NewDocDim.SETRANGE("Dimension Code","Dimension Code");
          IF FromOnDelete THEN
            IF NOT NewDocDim.FINDFIRST THEN
              EXIT;
          CASE "Table ID" OF
            DATABASE::"Sales Header":
              BEGIN
                SalesLine.SETRANGE("Document Type","Document Type");
                SalesLine.SETRANGE("Document No.","Document No.");
                SalesLine.SETFILTER("No.",'<>%1','');
                IF SalesLine.FINDSET THEN BEGIN
                  IF GUIALLOWED THEN BEGIN
                    IF DIALOG.CONFIRM(Question,TRUE) THEN BEGIN
                      NewDocDim.DELETEALL(TRUE);
                      IF NOT FromOnDelete THEN
                        REPEAT
                          InsertNew(DocDim,DATABASE::"Sales Line",SalesLine."Line No.");
                        UNTIL SalesLine.NEXT = 0;
                    END
                  END ELSE BEGIN
                    NewDocDim.DELETEALL(TRUE);
                    IF NOT FromOnDelete THEN
                      REPEAT
                        InsertNew(DocDim,DATABASE::"Sales Line",SalesLine."Line No.");
                      UNTIL SalesLine.NEXT = 0;
                  END;
                END;
              END;
            DATABASE::"Purchase Header":
              BEGIN
                PurchaseLine.SETRANGE("Document Type","Document Type");
                PurchaseLine.SETRANGE("Document No.","Document No.");
                PurchaseLine.SETFILTER("No.",'<>%1','');
                IF PurchaseLine.FINDSET THEN BEGIN
                  IF GUIALLOWED THEN BEGIN
                    IF DIALOG.CONFIRM(Question,TRUE) THEN BEGIN
                      NewDocDim.DELETEALL(TRUE);
                      IF NOT FromOnDelete THEN
                        REPEAT
                          InsertNew(DocDim,DATABASE::"Purchase Line",PurchaseLine."Line No.");
                        UNTIL PurchaseLine.NEXT = 0;
                    END;
                  END ELSE BEGIN
                    NewDocDim.DELETEALL(TRUE);
                    IF NOT FromOnDelete THEN
                      REPEAT
                        InsertNew(DocDim,DATABASE::"Purchase Line",PurchaseLine."Line No.");
                      UNTIL PurchaseLine.NEXT = 0;
                  END;
                END;
              END;
            DATABASE::"Transfer Header":
              BEGIN
                TransLine.SETRANGE("Document No.","Document No.");
                TransLine.SETRANGE("Derived From Line No.",0);
                IF TransLine.FINDSET THEN BEGIN
                  IF GUIALLOWED THEN BEGIN
                    IF DIALOG.CONFIRM(Question,TRUE) THEN BEGIN
                      NewDocDim.DELETEALL(TRUE);
                      IF NOT FromOnDelete THEN
                        REPEAT
                          InsertNew(DocDim,DATABASE::"Transfer Line",TransLine."Line No.");
                        UNTIL TransLine.NEXT = 0;
                    END;
                  END ELSE BEGIN
                    NewDocDim.DELETEALL(TRUE);
                    IF NOT FromOnDelete THEN
                      REPEAT
                        InsertNew(DocDim,DATABASE::"Transfer Line",TransLine."Line No.");
                      UNTIL TransLine.NEXT = 0;
                  END;
                END;
              END;

            DATABASE::"Service Header":
              BEGIN
                IF ("Document Type" = "Document Type"::Order) OR
                   ("Document Type" = "Document Type"::Quote)
                THEN BEGIN
                  ServItemLine.SETRANGE("Document Type","Document Type");
                  ServItemLine.SETRANGE("Document No.","Document No.");

                  IF ServItemLine.FIND('-') THEN
                    IF GUIALLOWED = FALSE OR (UpdateLine = UpdateLine::Update) THEN
                      UpdateDim := TRUE
                    ELSE
                      IF DIALOG.CONFIRM(Question,TRUE) THEN
                        UpdateDim := TRUE
                      ELSE
                        UpdateDim := FALSE
                  ELSE
                    UpdateDim := FALSE;

                  IF UpdateDim THEN BEGIN
                    GLSetup.GET;
                    REPEAT
                      NewDocDim.SETRANGE("Line No.",ServItemLine."Line No.");
                      IF NewDocDim.FIND('-') THEN BEGIN
                        NewDocDim.SetRecursiveValue(TRUE);
                        NewDocDim.DELETE(TRUE);
                      END;
                    UNTIL ServItemLine.NEXT = 0;

                    IF NOT FromOnDelete THEN BEGIN
                      ServItemLine.FIND('-');
                      REPEAT
                        SetRecursiveValue(TRUE);
                        InsertNew(DocDim,DATABASE::"Service Item Line",ServItemLine."Line No.");
                      UNTIL ServItemLine.NEXT = 0;
                    END;
                  END;

                  ServLine.SETRANGE("Document Type","Document Type");
                  ServLine.SETRANGE("Document No.","Document No.");
                  ServLine.SETRANGE("Service Item Line No.",0);
                  IF ServLine.FIND('-') THEN BEGIN
                    IF UpdateDim THEN BEGIN
                      NewDocDim.SETRANGE("Table ID",DATABASE::"Service Line");
                      REPEAT
                        NewDocDim.SETRANGE("Line No.",ServLine."Line No.");
                        IF NewDocDim.FIND('-') THEN BEGIN
                          NewDocDim.SetRecursiveValue(TRUE);
                          NewDocDim.DELETE(TRUE);
                        END;
                      UNTIL ServItemLine.NEXT = 0;
                      IF NOT FromOnDelete THEN BEGIN
                        ServLine.FINDFIRST;
                        REPEAT
                          SetRecursiveValue(TRUE);
                          InsertNew(DocDim,DATABASE::"Service Line",ServLine."Line No.");
                        UNTIL ServLine.NEXT = 0;
                      END;
                    END;
                  END;

                END ELSE BEGIN
                  ServLine.SETRANGE("Document Type","Document Type");
                  ServLine.SETRANGE("Document No.","Document No.");
                  ServItemLine.SETRANGE("Document Type","Document Type");
                  ServItemLine.SETRANGE("Document No.","Document No.");

                  IF ServLine.FIND('-') OR ServItemLine.FIND('-') THEN
                    IF DIALOG.CONFIRM(Question,TRUE) THEN
                      UpdateDim := TRUE;

                  IF ServLine.FIND('-') THEN BEGIN
                    NewDocDim.SETRANGE("Table ID",DATABASE::"Service Line");
                    IF GUIALLOWED THEN BEGIN
                      IF UpdateDim THEN BEGIN
                        NewDocDim.DELETEALL(TRUE);
                        IF NOT FromOnDelete THEN
                          REPEAT
                            InsertNew(DocDim,DATABASE::"Service Line",ServLine."Line No.");
                          UNTIL ServLine.NEXT = 0;
                      END;
                    END ELSE BEGIN
                      NewDocDim.DELETEALL(TRUE);
                      IF NOT FromOnDelete THEN
                        REPEAT
                          InsertNew(DocDim,DATABASE::"Service Line",ServLine."Line No.");
                        UNTIL ServLine.NEXT = 0;
                    END;
                  END;

                  IF ServItemLine.FIND('-') THEN BEGIN
                    NewDocDim.SETRANGE("Table ID",DATABASE::"Service Item Line");
                    IF GUIALLOWED THEN BEGIN
                      IF UpdateDim THEN BEGIN
                        NewDocDim.DELETEALL(TRUE);
                        IF NOT FromOnDelete THEN
                          REPEAT
                            InsertNew(DocDim,DATABASE::"Service Item Line",ServItemLine."Line No.");
                          UNTIL ServItemLine.NEXT = 0;
                      END;
                    END ELSE BEGIN
                      NewDocDim.DELETEALL(TRUE);
                      IF NOT FromOnDelete THEN
                        REPEAT
                          InsertNew(DocDim,DATABASE::"Service Item Line",ServItemLine."Line No.");
                        UNTIL ServItemLine.NEXT = 0;
                    END;
                  END;
                END;
              END;
            DATABASE::"Service Item Line":
              BEGIN
                IF UpdateLine = UpdateLine::Update THEN
                  SetRecursiveValue(TRUE);
                UpdateServLineDim(DocDim,FromOnDelete);
              END
          END;
        END;
      END;
    END;

    PROCEDURE GetDimensions@3(TableNo@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];DocLineNo@1003 : Integer;VAR TempDocDim@1004 : Record 357);
    VAR
      DocDim@1005 : Record 357;
    BEGIN
      TempDocDim.DELETEALL;

      WITH DocDim DO BEGIN
        RESET;
        SETRANGE("Table ID",TableNo);
        SETRANGE("Document Type",DocType);
        SETRANGE("Document No.",DocNo);
        SETRANGE("Line No.",DocLineNo);
        IF FINDSET THEN
          REPEAT
            TempDocDim := DocDim;
            TempDocDim.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE UpdateAllLineDim@4(TableNo@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];VAR OldDocDimHeader@1003 : Record 357);
    VAR
      DocDimHeader@1004 : Record 357;
      DocDimLine@1005 : Record 357;
      SalesLine@1006 : Record 37;
      PurchaseLine@1007 : Record 39;
      LineTableNo@1009 : Integer;
      ShippedReceived@1008 : Boolean;
    BEGIN
      CASE TableNo OF
        DATABASE::"Sales Header":
          BEGIN
            LineTableNo := DATABASE::"Sales Line";
            SalesLine.SETRANGE("Document Type",DocType);
            SalesLine.SETRANGE("Document No.",DocNo);
            IF NOT SalesLine.FINDFIRST THEN
              EXIT;

            SalesLine.SETRANGE(Type,SalesLine.Type::Item);
            IF SalesLine.FINDSET THEN REPEAT
              IF SalesLine."Shipped Not Invoiced" <> 0 THEN
                ShippedReceived := TRUE;
              IF SalesLine."Return Qty. Rcd. Not Invd." <> 0 THEN
                ShippedReceived := TRUE;
            UNTIL (SalesLine.NEXT = 0) OR ShippedReceived;
            SalesLine.SETRANGE(Type);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            LineTableNo := DATABASE::"Purchase Line";
            PurchaseLine.SETRANGE("Document Type",DocType);
            PurchaseLine.SETRANGE("Document No.",DocNo);
            IF NOT PurchaseLine.FINDFIRST THEN
              EXIT;

            PurchaseLine.SETRANGE(Type,SalesLine.Type::Item);
            IF PurchaseLine.FINDSET THEN REPEAT
              IF PurchaseLine."Qty. Rcd. Not Invoiced" <> 0 THEN
                ShippedReceived := TRUE;
              IF PurchaseLine."Return Qty. Shipped Not Invd." <> 0 THEN
                ShippedReceived := TRUE;
            UNTIL (PurchaseLine.NEXT = 0) OR ShippedReceived;
            PurchaseLine.SETRANGE(Type);
          END;
        DATABASE::"Service Header":
          BEGIN
            UpdateAllServLineDim(TableNo,DocType,DocNo,OldDocDimHeader,0);
            EXIT;
          END;
      END;

      DocDimHeader.SETRANGE("Table ID",TableNo);
      DocDimHeader.SETRANGE("Document Type",DocType);
      DocDimHeader.SETRANGE("Document No.",DocNo);
      DocDimHeader.SETRANGE("Line No.",0);

      DocDimLine.SETRANGE("Document Type",DocType);
      DocDimLine.SETRANGE("Document No.",DocNo);
      DocDimLine.SETFILTER("Line No.",'<>0');

      IF NOT (DocDimHeader.FINDFIRST OR OldDocDimHeader.FINDFIRST) THEN
        EXIT;

      IF UpdateLine <> UpdateLine::Update THEN
        IF GUIALLOWED THEN
          IF ShippedReceived THEN BEGIN
            IF NOT CONFIRM(Text006,TRUE) THEN
              EXIT
          END ELSE
            IF NOT CONFIRM(Text003,TRUE) THEN
              EXIT;

      // Going through all the dimensions on the Header AFTER they have been updated
      WITH DocDimHeader DO
        IF FINDSET THEN
          REPEAT
            IF NOT OldDocDimHeader.GET("Table ID","Document Type","Document No.","Line No.","Dimension Code") OR
               (OldDocDimHeader."Dimension Value Code" <> "Dimension Value Code")
            THEN BEGIN
              DocDimLine.SETRANGE("Dimension Code","Dimension Code");
              CASE TableNo OF
                DATABASE::"Sales Header":
                  BEGIN
                    DocDimLine.SETRANGE("Table ID",LineTableNo);
                    DocDimLine.DELETEALL(TRUE);

                    SalesLine.SETRANGE("Document Type",DocType);
                    SalesLine.SETRANGE("Document No.",DocNo);
                    IF SalesLine.FINDSET THEN
                      REPEAT
                        InsertNew(DocDimHeader,LineTableNo,SalesLine."Line No.");
                      UNTIL SalesLine.NEXT = 0;
                  END;
                DATABASE::"Purchase Header":
                  BEGIN
                    DocDimLine.SETRANGE("Table ID",LineTableNo);
                    DocDimLine.DELETEALL(TRUE);

                    PurchaseLine.SETRANGE("Document Type",DocType);
                    PurchaseLine.SETRANGE("Document No.",DocNo);
                    IF PurchaseLine.FIND('-') THEN
                      REPEAT
                        InsertNew(DocDimHeader,LineTableNo,PurchaseLine."Line No.");
                      UNTIL PurchaseLine.NEXT = 0;
                  END;
              END;
            END;
          UNTIL NEXT = 0;

      // Going through all the dimensions on the Header BEFORE they have been updated
      // If the DimCode were there before but not anymore, all DimLines with the DimCode are deleted
      WITH OldDocDimHeader DO
        IF FIND('-') THEN
          REPEAT
            IF NOT DocDimHeader.GET("Table ID","Document Type","Document No.","Line No.","Dimension Code") THEN BEGIN
              DocDimLine.SETRANGE("Dimension Code","Dimension Code");
              DocDimLine.DELETEALL(TRUE);
            END;
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE InsertNew@7(VAR DocDim@1000 : Record 357;TableNo@1001 : Integer;LineNo@1002 : Integer);
    VAR
      NewDocDim@1003 : Record 357;
    BEGIN
      WITH DocDim DO BEGIN
        NewDocDim."Table ID" := TableNo;
        NewDocDim."Document Type" := "Document Type";
        NewDocDim."Document No." := "Document No.";
        NewDocDim."Line No." := LineNo;
        NewDocDim."Dimension Code" := "Dimension Code";
        NewDocDim."Dimension Value Code" := "Dimension Value Code";
        IF UpdateLine = UpdateLine::Update THEN
          NewDocDim.SetRecursiveValue(TRUE)
        ELSE
          IF UpdateLine = UpdateLine::DoNotUpdate THEN
            NewDocDim.SetRecursiveValue(FALSE);
        NewDocDim.INSERT(TRUE);
      END;
    END;

    PROCEDURE OnDeleteServRec@12();
    BEGIN
      GLSetup.GET;
      UpdateLineDim(Rec,TRUE);
      IF "Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
        UpdateGlobalDimCode(
          1,"Table ID","Document Type","Document No.","Line No.",'');
      IF "Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
        UpdateGlobalDimCode(
          2,"Table ID","Document Type","Document No.","Line No.",'');
    END;

    PROCEDURE UpdateServLineDim@2(VAR DocDim@1000 : Record 357;FromOnDelete@1001 : Boolean);
    VAR
      NewDocDim@1002 : Record 357;
      ServLine@1006 : Record 5902;
      ServItemLine@1003 : Record 5901;
      Question@1007 : Text[250];
      UpdateDim@1005 : Boolean;
    BEGIN
      WITH DocDim DO BEGIN
        IF "Table ID" = DATABASE::"Service Item Line" THEN BEGIN
          Question := STRSUBSTNO(Text001 + Text002);
          NewDocDim.SETRANGE("Table ID",DATABASE::"Service Line");
          NewDocDim.SETRANGE("Document Type","Document Type");
          NewDocDim.SETRANGE("Document No.","Document No.");
          NewDocDim.SETRANGE("Dimension Code","Dimension Code");

          IF FromOnDelete THEN
            IF NOT NewDocDim.FIND('-') THEN
              EXIT;

          ServItemLine.SETRANGE("Document Type","Document Type");
          ServItemLine.SETRANGE("Document No.","Document No.");
          ServItemLine.SETRANGE("Line No.","Line No.");

          IF ServItemLine.FIND('-') THEN BEGIN

            ServLine.SETRANGE("Document Type","Document Type");
            ServLine.SETRANGE("Document No.","Document No.");
            ServLine.SETRANGE("Service Item Line No.",ServItemLine."Line No.");
            IF ServLine.FIND('-') THEN BEGIN
              IF GUIALLOWED = FALSE OR (UpdateLine = UpdateLine::Update) THEN
                UpdateDim := TRUE;

              IF UpdateDim = FALSE THEN
                IF DIALOG.CONFIRM(Question,TRUE) THEN BEGIN
                  SetRecursiveValue(TRUE);
                  UpdateDim := TRUE;
                END ELSE
                  SetRecursiveValue(FALSE);

              IF UpdateDim THEN BEGIN
                ServLine.FIND('-');
                REPEAT
                  NewDocDim.SETRANGE("Line No.",ServLine."Line No.");
                  IF NewDocDim.FIND('-') THEN BEGIN
                    NewDocDim.SetRecursiveValue(TRUE);
                    NewDocDim.DELETEALL(TRUE);
                  END;
                UNTIL ServLine.NEXT = 0;
                IF NOT FromOnDelete THEN BEGIN
                  ServLine.FIND('-');
                  REPEAT
                    SetRecursiveValue(TRUE);
                    InsertNew(DocDim,DATABASE::"Service Line",ServLine."Line No.");
                  UNTIL ServLine.NEXT = 0;
                END;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE SetRecursiveValue@8(Recursive@1000 : Boolean);
    BEGIN
      IF Recursive THEN
        UpdateLine := UpdateLine::Update
      ELSE
        UpdateLine := UpdateLine::DoNotUpdate;
    END;

    PROCEDURE UpdateAllServLineDim@6(TableNo@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];VAR OldDocDimHeader@1003 : Record 357;DocLineNo@1011 : Integer);
    VAR
      DocDimHeader@1004 : Record 357;
      DocDimLine@1005 : Record 357;
      ServLine@1008 : Record 5902;
      ServItemLine@1010 : Record 5901;
    BEGIN
      CASE TableNo OF
        DATABASE::"Service Header":
          BEGIN
            ServLine.SETRANGE("Document Type",DocType);
            ServLine.SETRANGE("Document No.",DocNo);
            ServItemLine.SETRANGE("Document Type",DocType);
            ServItemLine.SETRANGE("Document No.",DocNo);
            IF NOT ServLine.FIND('-') AND NOT ServItemLine.FIND('-') THEN
              EXIT;
          END;
        DATABASE::"Service Item Line":
          BEGIN
            ServItemLine.SETRANGE("Document Type",DocType);
            ServItemLine.SETRANGE("Document No.",DocNo);
            ServItemLine.SETRANGE("Line No.",DocLineNo);
            IF ServItemLine.FINDFIRST THEN;

            ServLine.SETRANGE("Document Type",DocType);
            ServLine.SETRANGE("Document No.",DocNo);
            ServLine.SETRANGE("Service Item Line No.",ServItemLine."Line No.");
            IF NOT ServLine.FIND('-') THEN
              EXIT;

            DocDimLine.SETRANGE("Table ID",DATABASE::"Service Line");
          END;
        ELSE
          EXIT;
      END;

      DocDimHeader.SETRANGE("Table ID",TableNo);
      DocDimHeader.SETRANGE("Document Type",DocType);
      DocDimHeader.SETRANGE("Document No.",DocNo);
      DocDimHeader.SETRANGE("Line No.",DocLineNo);

      DocDimLine.SETRANGE("Document Type",DocType);
      DocDimLine.SETRANGE("Document No.",DocNo);


      IF NOT (DocDimHeader.FIND('-') OR OldDocDimHeader.FIND('-')) THEN
        EXIT;

      IF UpdateLine <> UpdateLine::Update THEN
        IF GUIALLOWED THEN
          IF NOT CONFIRM(Text003,TRUE) THEN
            EXIT;

      // Going through all the dimensions on the Header AFTER they have been updated
      WITH DocDimHeader DO
        IF FIND('-') THEN
          REPEAT
            IF NOT OldDocDimHeader.GET("Table ID","Document Type","Document No.","Line No.","Dimension Code") OR
               (OldDocDimHeader."Dimension Value Code" <> "Dimension Value Code")
            THEN BEGIN
              DocDimLine.SETRANGE("Dimension Code","Dimension Code");
              CASE TableNo OF
                DATABASE::"Service Header":
                  BEGIN
                    DocDimLine.SETFILTER("Line No.",'<>0');
                    DocDimLine.SETRANGE("Table ID",DATABASE::"Service Item Line");
                    IF DocDimLine.FINDSET THEN
                      REPEAT
                        DocDimLine.SetRecursiveValue(TRUE);
                        DocDimLine.DELETE(TRUE);
                      UNTIL DocDimLine.NEXT = 0;

                    DocDimLine.SETRANGE("Table ID",DATABASE::"Service Line");
                    IF DocDimLine.FIND('-') THEN
                      REPEAT
                        DocDimLine.SetRecursiveValue(TRUE);
                        DocDimLine.DELETE(TRUE);
                      UNTIL DocDimLine.NEXT = 0;

                    IF (DocType = ServLine."Document Type"::Order) OR
                       (DocType = ServLine."Document Type"::Quote)
                    THEN BEGIN
                      IF ServItemLine.FIND('-') THEN
                        REPEAT
                          Rec.SetRecursiveValue(TRUE);
                          InsertNew(DocDimHeader,DATABASE::"Service Item Line",ServItemLine."Line No.");
                        UNTIL ServItemLine.NEXT = 0;
                      ServLine.SETRANGE("Service Item Line No.",0);
                      IF ServLine.FIND('-') THEN
                        REPEAT
                          Rec.SetRecursiveValue(TRUE);
                          InsertNew(DocDimHeader,DATABASE::"Service Line",ServLine."Line No.");
                        UNTIL ServLine.NEXT = 0;
                    END ELSE
                      IF ServLine.FIND('-') THEN
                        REPEAT
                          Rec.SetRecursiveValue(TRUE);
                          InsertNew(DocDimHeader,DATABASE::"Service Line",ServLine."Line No.");
                        UNTIL ServLine.NEXT = 0;
                  END;
                DATABASE::"Service Item Line":
                  BEGIN
                    IF ServItemLine.FINDFIRST THEN
                      REPEAT
                        ServLine.SETRANGE("Service Item Line No.",ServItemLine."Line No.");
                        IF ServLine.FIND('-') THEN BEGIN
                          REPEAT
                            DocDimLine.SETRANGE("Line No.",ServLine."Line No.");
                            IF DocDimLine.FIND('-') THEN
                              REPEAT
                                Rec.SetRecursiveValue(TRUE);
                                DocDimLine.DELETE(TRUE);
                              UNTIL DocDimLine.NEXT = 0;
                          UNTIL ServLine.NEXT = 0;

                          ServLine.FIND('-');
                          REPEAT
                            Rec.SetRecursiveValue(TRUE);
                            InsertNew(DocDimHeader,DATABASE::"Service Line",ServLine."Line No.");
                          UNTIL ServLine.NEXT = 0;
                        END;
                      UNTIL ServItemLine.NEXT = 0;
                  END;
              END;
            END;
          UNTIL NEXT = 0;

      // Going through all the dimensions on the Header BEFORE they have been updated
      // If the DimCode were there before but not anymore, all DimLines with the DimCode are deleted
      WITH OldDocDimHeader DO
        IF FINDSET THEN
          REPEAT
            IF NOT DocDimHeader.GET("Table ID","Document Type","Document No.","Line No.","Dimension Code") THEN BEGIN
              DocDimLine.SETRANGE("Dimension Code","Dimension Code");
              DocDimLine.SetRecursiveValue(TRUE);
              DocDimLine.DELETEALL(TRUE);
            END;
          UNTIL NEXT = 0;
    END;

    PROCEDURE VerifyLineDim@5(VAR DocDim@1000 : Record 357);
    VAR
      SalesLine@1001 : Record 37;
      PurchaseLine@1002 : Record 39;
    BEGIN
      CASE "Table ID" OF
        DATABASE::"Sales Line":
          BEGIN
            IF SalesLine.GET(DocDim."Document Type",DocDim."Document No.",DocDim."Line No.") THEN
              IF (SalesLine."Qty. Shipped Not Invoiced" <> 0) OR (SalesLine."Return Rcd. Not Invd." <> 0) THEN
                IF NOT CONFIRM(Text004,TRUE,SalesLine.TABLECAPTION) THEN
                  ERROR(Text005)
          END;
        DATABASE::"Purchase Line":
          BEGIN
            IF PurchaseLine.GET(DocDim."Document Type",DocDim."Document No.",DocDim."Line No.") THEN
              IF (PurchaseLine."Qty. Rcd. Not Invoiced" <> 0) OR (PurchaseLine."Return Qty. Shipped Not Invd." <> 0) THEN

                IF NOT CONFIRM(Text004,TRUE,PurchaseLine.TABLECAPTION) THEN
                  ERROR(Text005)
          END;
      END;
    END;

    BEGIN
    END.
  }
}
