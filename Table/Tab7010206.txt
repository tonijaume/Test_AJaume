OBJECT Table 7010206 Transporte Excursion - Soporte
{
  OBJECT-PROPERTIES
  {
    Date=12/01/15;
    Time=18:02:13;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lrTrSop@1100253000 : Record 7010206;
             BEGIN
               _CheckCosteTicket; //+$002

               CompServ;

               "ID Soporte" := 1;

               CLEAR(lrTrSop);
               lrTrSop.SETRANGE(Delegacion   , Delegacion);
               lrTrSop.SETRANGE("N§ Servicio", "N§ Servicio");
               IF lrTrSop.FINDLAST THEN
                 "ID Soporte" += lrTrSop."ID Soporte";

               "Usuario Creacion" := USERID;
               "Fecha Creacion"   := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               CompServ;

               "Usuario Modificacion" := USERID;
               "Fecha Modificacion"   := CURRENTDATETIME;
             END;

    OnDelete=BEGIN

               CompServ;
               BorraRegistrosRelacionados;
             END;

    LookupFormID=Form7010210;
    DrillDownFormID=Form7010210;
  }
  FIELDS
  {
    { 1   ;   ;Delegacion          ;Code10        ;TableRelation=Delegacion.Codigo;
                                                   CaptionML=[ENU=Delegation;
                                                              ESP=Delegacion];
                                                   NotBlank=Yes }
    { 20  ;   ;N§ Servicio         ;Integer       ;TableRelation="Servicio Excursion"."N§ Servicio" WHERE (Delegacion=FIELD(Delegacion));
                                                   CaptionML=[ENU=Service ID;
                                                              ESP=N§ Servicio];
                                                   NotBlank=Yes }
    { 30  ;   ;ID Soporte          ;Integer       ;CaptionML=[ENU=Support ID;
                                                              ESP=ID Soporte];
                                                   Editable=No }
    { 40  ;   ;Proveedor Transporte;Code20        ;TableRelation=Vendor.No. WHERE (Tipo Proveedor=CONST(T));
                                                   OnValidate=BEGIN
                                                                CompProveedor;
                                                              END;

                                                   CaptionML=[ENU=Transfer Provider;
                                                              ESP=Proveedor Transporte] }
    { 50  ;   ;Direccion           ;Option        ;OnValidate=VAR
                                                                lrPers@1100253001 : Record 7010214;
                                                                lrPers2@1100253002 : Record 7010214;
                                                                lrSop@1100253000 : Record 7010206;
                                                              BEGIN

                                                                // Una reserva solo puede estar una vez por servicio y direcci¢n

                                                                CLEAR(lrSop);
                                                                CLEAR(lrPers);
                                                                lrPers.SETRANGE(Delegacion    , Delegacion);
                                                                lrPers.SETRANGE("N§ Servicio" , "N§ Servicio");
                                                                lrPers.SETRANGE("Id Soporte"  , "ID Soporte");
                                                                IF lrPers.FINDSET THEN BEGIN
                                                                  REPEAT
                                                                    CLEAR(lrPers2);
                                                                    lrPers2.SETRANGE(Delegacion    , Delegacion);
                                                                    lrPers2.SETRANGE("N§ Servicio" , "N§ Servicio");
                                                                    lrPers2.SETRANGE("N§ Reserva"  , lrPers."N§ Reserva");
                                                                    IF lrPers2.FINDSET THEN BEGIN
                                                                      REPEAT
                                                                        IF lrPers.GETPOSITION <> lrPers2.GETPOSITION THEN BEGIN // Que no sea el mismo registro
                                                                          lrSop.GET(lrPers2.Delegacion, lrPers2."N§ Servicio", lrPers2."Id Soporte");
                                                                          IF lrSop.Direccion = Direccion THEN
                                                                            ERROR(Text003, lrPers."N§ Reserva", Direccion, "N§ Servicio");
                                                                        END;
                                                                      UNTIL lrPers.NEXT=0;
                                                                    END;
                                                                  UNTIL lrPers.NEXT=0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Direction;
                                                              ESP=Direcci¢n];
                                                   OptionCaptionML=[ENU=Pick-Up,Return;
                                                                    ESP=Recogida,Retorno];
                                                   OptionString=Recogida,Retorno }
    { 60  ;   ;Tipo Vehiculo       ;Code10        ;TableRelation="Tipo transporte".Codigo;
                                                   CaptionML=[ENU=Vehicle Type;
                                                              ESP=Tipo Vehiculo] }
    { 70  ;   ;Numero Bus          ;Code10        ;CaptionML=[ENU=Bus Number;
                                                              ESP=Numero Bus] }
    { 75  ;   ;Capacidad vehiculo  ;Integer       ;CaptionML=[ENU=Vehicle capacity requested;
                                                              ESP=Capacidad vehiculo solicitada] }
    { 80  ;   ;Punto de Encuentro  ;Text30        ;CaptionML=[ENU=Meeting Point;
                                                              ESP=Punto de Encuentro] }
    { 90  ;   ;Coste               ;Decimal       ;CaptionML=[ENU=Cost;
                                                              ESP=Coste];
                                                   Editable=No }
    { 100 ;   ;Cod. Divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=Cod. Divisa];
                                                   Editable=No }
    { 110 ;   ;Usuario Creacion    ;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU=Creation User;
                                                              ESP=Usuario Creaci¢n];
                                                   Editable=No }
    { 120 ;   ;Fecha Creacion      ;DateTime      ;CaptionML=[ENU=Creation Time;
                                                              ESP=Fecha Creaci¢n];
                                                   Editable=No }
    { 130 ;   ;Usuario Modificacion;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU=Last Modified User;
                                                              ESP=Usuario Modificaci¢n];
                                                   Editable=No }
    { 140 ;   ;Fecha Modificacion  ;DateTime      ;CaptionML=[ENU=Last Modified Time;
                                                              ESP=Fecha Modificaci¢n];
                                                   Editable=No }
    { 150 ;   ;Reservas            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Persona x transporte soporte" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                           N§ Servicio=FIELD(N§ Servicio),
                                                                                                           Id Soporte=FIELD(ID Soporte)));
                                                   CaptionML=[ENU=Reservations;
                                                              ESP=Reservas];
                                                   Editable=No }
    { 160 ;   ;Excursion           ;Code10        ;TableRelation="Producto agencia".Codigo WHERE (Tipo Producto=CONST(Excursion));
                                                   CaptionML=ESP=Excursion;
                                                   Description=FK Producto Agencia;
                                                   Editable=No }
    { 170 ;   ;Guia Transportista  ;Code10        ;TableRelation="Guia transferista".Codigo WHERE (Bloqueado=CONST(No));
                                                   Description=FK Guia Transportista }
    { 180 ;   ;Fecha Servicio      ;Date           }
  }
  KEYS
  {
    {    ;Delegacion,N§ Servicio,ID Soporte       ;Clustered=Yes }
    {    ;Guia Transportista,Fecha Servicio        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100253000 : TextConst 'ENU=Service %1 is in %2  Status;ESP=El servicio %1 est  en estado %2';
      Text003@1100253001 : TextConst 'ENU=Reservation %1 for %2 of service %3 already exists;ESP=Ya existe la reserva %1 para %2 del servicio %3';
      Text004@1100253002 : TextConst 'ENU=There is no contract for %1 in %2;ESP=No existe ning£n contrato para %1 en %2';
      Text005@1100217000 : TextConst 'ENU=Transportation support cannot be made if the calculation is per ticket.;ESP=No se pueden introducir soportes de transporte si el calculo es por ticket.';

    PROCEDURE CompServ@1100253000();
    VAR
      lrServ@1100253000 : Record 7010163;
      lwMod@1100253001 : Boolean;
    BEGIN
      // CompServ
      // Comprobamos que el servicio no est Confirmado o Anulado
      // Adem s se marca como Pendiente de Recalcular

      CLEAR(lrServ);
      IF lrServ.GET(Delegacion, "N§ Servicio") THEN BEGIN
        IF lrServ.Estado IN [lrServ.Estado::Confirmada, lrServ.Estado::Anulada] THEN
          ERROR(Text001, lrServ."N§ Servicio", lrServ.Estado);

        IF NOT lrServ."Pendiente Recalcular" THEN BEGIN
          lrServ."Pendiente Recalcular" := TRUE;
          lrServ.MODIFY;
        END;

        IF lrServ.Excursion <> Excursion THEN BEGIN
          Excursion := lrServ.Excursion;
        END;

        "Fecha Servicio" := lrServ.Fecha;
      END;
    END;

    PROCEDURE BorraRegistrosRelacionados@1100253001();
    VAR
      lrPers@1100253001 : Record 7010214;
      lrZona@1100253000 : Record 7010215;
    BEGIN
      // BorraRegistrosRelacionados

      CLEAR(lrPers);
      lrPers.SETRANGE(Delegacion   , Delegacion);
      lrPers.SETRANGE("N§ Servicio", "N§ Servicio");
      lrPers.SETRANGE("Id Soporte" , "ID Soporte");
      IF NOT lrPers.ISEMPTY THEN
        lrPers.DELETEALL;

      CLEAR(lrZona);
      lrZona.SETRANGE(Delegacion   , Delegacion);
      lrZona.SETRANGE("N§ Servicio", "N§ Servicio");
      lrZona.SETRANGE("ID Soporte" , "ID Soporte");
      IF NOT lrZona.ISEMPTY THEN
        lrZona.DELETEALL;
    END;

    PROCEDURE CompProveedor@1100253002();
    VAR
      lrCntC@1100253000 : Record 7010142;
      lrServ@1100253001 : Record 7010163;
    BEGIN
      // CompProveedor

      // JPT 21/06/12
      IF "Proveedor Transporte"='' THEN
        EXIT;

      // Buscamos el servicio para determinar la fecha
      CLEAR(lrServ);
      lrServ.GET(Delegacion,"N§ Servicio");

      // Nos aseguramos que exist el contrato
      CLEAR(lrCntC);
      lrCntC.SETRANGE("Tipo Contrato"          , lrCntC."Tipo Contrato"::Transportista);
      lrCntC.SETRANGE(Proveedor                , "Proveedor Transporte");
      lrCntC.SETFILTER("Fecha inicio contrato" , '<%1' , lrServ.Fecha);
      lrCntC.SETFILTER("Fecha final contrato"  , '>%1' , lrServ.Fecha);
      IF NOT lrCntC.FINDFIRST THEN
        ERROR(Text004, "Proveedor Transporte", lrServ.Fecha);
    END;

    LOCAL PROCEDURE _CheckCosteTicket@1100217007();
    VAR
      lrSer@1100217000 : Record 7010163;
      lrExc@1100217001 : Record 7009710;
    BEGIN
      lrSer.GET(Delegacion, "N§ Servicio");

      lrExc.GET(lrSer.Excursion);

      IF lrExc."Coste x ticket" THEN
        ERROR(Text005);
    END;

    BEGIN
    {
      JPT 16/05/12 CNT-CAR-12004 / EXC-08 Transport support service

      $001 AJS 10112012 Nuevo campo "Capacidad Vehiculo"

      $002 AJS 17062013 Nueva funcion _CheckCosteTicket para controlar que no se puedan meter costes por servicio
                        en las excursiones que se calculan por ticket

      $003 ARM 12012015 CNT-OC-14058 Nuevo campo Guia Transportista, se a¤ade el campo fecha servicio
    }
    END.
  }
}
