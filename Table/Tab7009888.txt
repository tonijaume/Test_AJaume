OBJECT Table 7009888 Cabecera importacion cont.comp
{
  OBJECT-PROPERTIES
  {
    Date=14/02/13;
    Time=17:44:22;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=BEGIN

               SetDatosImportacion;
             END;

    CaptionML=[ENU=Purch. Contr. Importation header;
               ESP=Cabecera importacion cont.comp];
  }
  FIELDS
  {
    { 1   ;   ;No                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 3   ;   ;Usuario importacion ;Code20        ;CaptionML=[ENU=Importation user;
                                                              ESP=Usuario importaci¢n] }
    { 4   ;   ;Fecha importacion   ;DateTime      ;CaptionML=[ENU=Importation date;
                                                              ESP=Fecha importaci¢n] }
    { 5   ;   ;Estado              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Imported,Transferred,Cancelled,Blocked;
                                                                    ESP=Importado,Transferido,Anulado,Bloqueado];
                                                   OptionString=Importado,Transferido,Anulado,Bloqueado }
    { 6   ;   ;Hotel               ;Code10        ;CaptionML=[ENU=Hotel;
                                                              ESP=Hotel] }
    { 7   ;   ;Touroperador        ;Code20        ;CaptionML=[ENU=TourOperator;
                                                              ESP=TourOperador] }
    { 8   ;   ;Minimo Estancias    ;Integer       ;CaptionML=[ENU=Minimum stays;
                                                              ESP=M¡nimo Estancias] }
    { 9   ;   ;Fecha inicio contrato;Date         ;CaptionML=[ENU=Starting Contract Date;
                                                              ESP=Fecha inicio contrato] }
    { 10  ;   ;Fecha fin contrato  ;Date          ;CaptionML=[ENU=Date end of contract;
                                                              ESP=Fecha fin contrato] }
    { 11  ;   ;Divisa              ;Code10        ;CaptionML=[ENU=Currency;
                                                              ESP=Divisa] }
    { 12  ;   ;Errores Cabecera    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Linea importacion Cont.Comp" WHERE (Tipo=CONST(Error),
                                                                                                          No Importacion=FIELD(No),
                                                                                                          Linea Error=CONST(0)));
                                                   CaptionML=[ENU=Header Errors;
                                                              ESP=Errores Cabecera] }
    { 13  ;   ;Descripcion         ;Text50        ;CaptionML=[ENU=Folder name;
                                                              ESP=Nombre fichero] }
    { 14  ;   ;Errores             ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Linea importacion Cont.Comp" WHERE (Tipo=CONST(Error),
                                                                                                          No Importacion=FIELD(No)));
                                                   CaptionML=[ENU=Errors;
                                                              ESP=Errores] }
    { 15  ;   ;Nombre Hotel        ;Text30        ;CaptionML=[ENU=Hotel Name;
                                                              ESP=Nombre Hotel] }
    { 16  ;   ;Num Contrato        ;Code10        ;TableRelation="Contrato compra hotel"."N§ Contrato compra";
                                                   CaptionML=[ENU=Contract No;
                                                              ESP=Num Contrato] }
    { 17  ;   ;Nombre Fichero      ;Text50        ;CaptionML=[ENU=Folder name;
                                                              ESP=Nombre fichero] }
    { 18  ;   ;Tipo Servicio       ;Option        ;CaptionML=[ENU=Service type;
                                                              ESP=Tipo Servicio];
                                                   OptionCaptionML=[ENU=Hotel,Apartment,Private Home,Tour,Cruise,Activity,Event,Other,Transportation Special,Day Trip,Excursion,Special Service Request,Transportation Pass;
                                                                    ESP=Hotel,Apartment,Private Home,Tour,Cruise,Activity,Event,Other,Transportation Special,Day Trip,Excursion,Special Service Request,Transportation Pass];
                                                   OptionString=Hotel,Apartment,Private Home,Tour,Cruise,Activity,Event,Other,Transportation Special,Day Trip,Excursion,Special Service Request,Transportation Pass }
    { 19  ;   ;Servicio            ;Text10        ;CaptionML=[ENU=Service;
                                                              ESP=Servicio] }
  }
  KEYS
  {
    {    ;No                                      ;Clustered=Yes }
    {    ;Descripcion                             ;KeyGroups=RENUMERING }
    {    ;Nombre Fichero                          ;KeyGroups=RENUMERING }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      wExtObl@1100253000 : ',SRV,PRK,SDT,TRF,CAT,AVB,AOX,AGR,finOption';
      wExt@1100253001 : ',SRV,SDT,TRF,CAT,AVB,PRK,AOX,AGR,ADC,BAP,CHK,EBD,EXG,EXT,MAN,MST,OK,SPO,AVC,SVF,FinOption';
      Text001@1100253002 : TextConst 'ENU=Compulsory file %1.%2. does not exist;ESP=No existe el fichero obligatorio %1.%2.';
      cVarias@1100253003 : Codeunit 7009720;
      wCampSDT@1100253004 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,SEASON_TYPE,SEASON_NAME,DATE_FROM,DATE_TO,FinOpt';
      Text002@1100253005 : TextConst 'ENU=Field %1 has not been indicated or cleared;ESP=No se ha indicado o no se ha podido interpretar el campo %1.';
      Text003@1100253006 : TextConst 'ENU=Date from must be lower or equal than date to;ESP=La fecha desde debe ser menor o igual a la fecha hasta.';
      Text004@1100253007 : TextConst 'ENU=%1 fields were expected for the register. %2 were counted;ESP=Se esperaban %1 campos para el registro. Se han contado %2.';
      wCampSRV1@1100253008 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,ORDER_NR,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,DEFAULT_MINIMUM_STAY_NULL,DEFAULT_MINIMUM_STAY,ARRIVAL_DEPARTURE_ON_EVERY_DAY,SOURCE_SYSTEM,CLASS_OF_ACCOM,HOTEL_CHAIN_ID,NUMBER_BEDS_NULL,NUMBER_BEDS,NUMBER_ROOMS_NULL,NUMBER_ROOMS,NUMBER_FLOORS_NULL,NUMBER_FLOORS,NUMBER_BUILDINGS_NULL,NUMBER_BUILDINGS,REMODEL_DATE,NAME_STATION,DISTANCE_STATION,NAME_AIRPORT,DISTANCE_AIRPORT,LOCATION_DESCRIPTION,SERVICE_DESCRIPTION,PROVIDER_DESCRIPTION,PAM_IBE_DESCRIPTION,SPA_NAME,SPA_CONTACT_NAME,SPA_STREET,SPA_STREET_2,SPA_COUNTRY_CODE,SPA_COUNTRY_ISO_CODE,SPA_POST_CODE,SPA_TOWN,SPA_COUNTRY,SPA_PHONE,SPA_FAX,SPA_E_MAIL_ADDRESS,SPA_TELEX,SPA_SAP_PROVIDER_NR,ST_PR_SUPPLIER_ID,SPR_CODE,FinOpt';
      wCampSRV2@1100253009 : 'SPR_NAME,SPR_CONTACT_NAME,SPR_STREET,SPR_STREET_2,SPR_COUNTRY_CODE,SPR_COUNTRY_ISO_CODE,SPR_POST_CODE,SPR_TOWN,SPR_COUNTRY,SPR_PHONE,SPR_FAX,SPR_E_MAIL_ADDRESS,SPR_TELEX,SPR_SAP_PROVIDER_NR,KEY_NAME,KEY_CONTACT_NAME,KEY_STREET,KEY_STREET_2,KEY_COUNTRY_CODE,KEY_COUNTRY_ISO_CODE,KEY_POST_CODE,KEY_TOWN,KEY_COUNTRY,KEY_PHONE,KEY_FAX,ADV_DIRECTION,ADV__DIRECTION_UTELL,ADV_SPEC_FAX_CONTACT,ADV_NAME,ADV_CONTACT_NAME,ADV_STREET,ADV_STREET_2,ADV_COUNTRY_CODE,ADV_COUNTRY_ISO_CODE,ADV_POST_CODE,ADV_TOWN,ADV_COUNTRY,ADV_PHONE,ADV_FAX,ADV_E_MAIL_ADDRESS,ADV_TELEX,PMT_METHOD,PMT_DIRECTION,BNK_ACCOUNT_NAME,BNK_BANK,BNK_BRANCH_CODE,IBAN,BNK_ACCOUNT_NUMBER,BNK_COUNTRY,BNK_COUNTRY_ISO_CODE,PRC_NAME,FinOpt';
      wCampSRV3@1100253010 : 'PRC_STREET,PRC_STREET_2,PRC_COUNTRY_CODE,PRC_COUNTRY_ISO_CODE,PRC_POST_CODE,PRC_TOWN,PRC_COUNTRY,PRC_PHONE,PRC_FAX,PRC_E_MAIL_ADDRESS,PRC_SAP_PROVIDER_NR,PRC_PROVIDER_VAT_ID,LANGUAGE,HEALTH_RESORT_TAX_ADULTS,HEALTH_RESORT_TAX_CHILDREN,ARRIVAL_EARLIEST_TIME,ARRIVAL_LATEST_TIME,DEPARTURE_EARLIEST_TIME,DEPARTURE_LATEST_TIME,CHRISTMAS_SURCHARGE_NULL,CHRISTMAS_SURCHARGE,CHRISTMAS_REMARK,NEW_YEAR_SURCHARGE_NULL,NEW_YEAR_SURCHARGE,NEW_YEAR_REMARK,EASTER_SURCHARGE_NULL,EASTER_SURCHARGE,EASTER_REMARK,BREAKFAST_NAME,AGE_1_TO_NULL,AGE_1_TO,AGE_2_TO_NULL,AGE_2_TO,AGE_3_TO_NULL,AGE_3_TO,AGE_4_TO_NULL,AGE_4_TO,AGE_5_TO_NULL,AGE_5_TO,AGE_B1_TO_NULL,AGE_B1_TO,AGE_B2_TO_NULL,AGE_B2_TO,AGE_B3_TO_NULL,AGE_B3_TO,FinOpt';
      wCampSRV4@1100253011 : 'AGE_B4_TO_NULL,AGE_B4_TO,AGE_B5_TO_NULL,AGE_B5_TO,ENTERTAINMENT_REMARK,CAR_ARRIVAL_DESCRIPTION,FEATURE_REMARKS,CAT_SEASON_NAME,FIRST_DATE,LAST_DATE,DOC_PRODUCTION_FLAG,RES_SOURCE_ID_1,FIRST_BOOK_DATE_1,RES_SOURCE_ID_2,FIRST_BOOK_DATE_2,RES_SOURCE_ID_3,FIRST_BOOK_DATE_3,RES_SOURCE_ID_4,FIRST_BOOK_DATE_4,RES_SOURCE_ID_5,FIRST_BOOK_DATE_5,RES_SOURCE_ID_6,FIRST_BOOK_DATE_6,RES_SOURCE_ID_7,FIRST_BOOK_DATE_7,RES_SOURCE_ID_8,FIRST_BOOK_DATE_8,RES_SOURCE_ID_9,FIRST_BOOK_DATE_9,TOUR_DURATION_DAYS_NULL,TOUR_DURATION_DAYS,PROCESS_TYPE,PROCESS_SUBTYPE,PROCESS_CRAB,EXT_BOOKING_SOURCE_ID,COUNTRY_IATA_CODE,ADVICE_ADDRESSEE_ID,CRS_SERVICE_ID,CRS_HOTEL_CHAIN_ID,COMM_INCL_CRS_RESV,FinOpt';
      wCampPRK@1100253012 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,PRICE_TYPE,NET_GROSS_TYPE,CURRENCY_CODE,BASIC_MEAL_PLAN,INCLUSIVE_BREAKFAST,PERSON_UNIT_INDICATOR,VENDOR_COMMISSION_NULL,VENDOR_COMMISSION,VAT_CODE,CATEGORY_ID,MIN_OCCUPANCY_NULL,MIN_OCCUPANCY,MAX_OCCUPANCY_NULL,MAX_OCCUPANCY,NUMBER_OF_DAYS_NULL,NUMBER_OF_DAYS,DOW_INDICATOR,PER_STAY_INDICATOR,FinOpt';
      wCampCAT@1100253013 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,CATEGORY_ID,COMBINABLE_WITH_MEAL,DESCRIPTION,PAM_IBE_DESCRIPTION,TAINMENT_DESCRIPTION,DATAMIX_DESCRIPTION,CATEGORY_FEATURES,KITCHEN_FEATURES,MAX_OCCUPANCY_NULL,MAX_OCCUPANCY,MAX_OCCUPANCY_WO_XBED_NULL,MAX_OCCUPANCY_WO_XBED,CHILD_BED_POSSIBLE,CHILD_BED_ADD_TO_MAX_OCC,EXTRABED_POSSIBLE,MIN_FULL_PAYERS_NULL,MIN_FULL_PAYERS,PHYSICAL_CAPACITY_NULL,PHYSICAL_CAPACITY,REMARKS,APARTMENT_SIZE_NULL,APARTMENT_SIZE,MAX_OCC_AGE_1_NULL,MAX_OCC_AGE_1,MAX_OCC_AGE_2_NULL,MAX_OCC_AGE_2,MAX_OCC_AGE_3_NULL,MAX_OCC_AGE_3,MAX_OCC_AGE_4_NULL,MAX_OCC_AGE_4,MAX_OCC_AGE_5_NULL,MAX_OCC_AGE_5,CONDITION_TEXT,HOTEL_SOURCE_ROUTIN,CRS_LOCATION,CORPORATE_RATE,GUARANTEE_CODE,CRS_CATEGORY_ID,COMMISSION_GROUP_CODE,FinOpt';
      wCampMAN@1100253014 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,RELEASE_PERIOD_REMARK,EXTRA_BED_REMARK,FAMILY_PLAN_REMARK,ARRIVAL_DEPARTURE_REMARK,MINIMUM_STAY_REMARK,SPECIAL_OFFER_REMARK,AVAILABILITY_REMARK,PRICE_REMARK,EARLY_BIRD_REMARK,LONG_STAY_REMARK,ADDITIONAL_AGREEMENTS,INTERNAL_REMARK,FinOpt';
      wCampAVB@1100253015 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,CATEGORY_ID,USE_ALLOTMENT_FROM,DATE_FROM,DATE_TO,COUNT_DAY_NIGHT_IND,COUNT_ONLY_START_DAY,DOW_INDICATOR,ALLOTMENT_TYPE,QUANTITY_NULL,QUANTITY,REDUCED_ALLOTMENT_NULL,REDUCED_ALLOTMENT,RELEASE_DAYS_NULL,RELEASE_DAYS,RELEASE_DATE,FinOpt';
      wCampAOX@1100253016 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,PRICE_TYPE,AGE_CATEGORY_NULL,AGE_CATEGORY,ADDON_BREAKFAST_CONT_NULL,ADDON_BREAKFAST_CONT,ADDON_BREAKFAST_BUFF_NULL,ADDON_BREAKFAST_BUFF,ADDON_BREAKFAST_OTHER_NULL,ADDON_BREAKFAST_OTHER,ADDON_HALF_BOARD_NULL,ADDON_HALF_BOARD,ADDON_FULL_BOARD_NULL,ADDON_FULL_BOARD,ADDON_ALL_INCLUSIVE_NULL,ADDON_ALL_INCLUSIVE,ADDON_ROOM_ONLY_NULL,ADDON_ROOM_ONLY,FinOpt';
      wCampTRF@1100253017 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,PRICE_TYPE,CATEGORY_ID,SEASON_ID,MIN_OCCUPANCY_NULL,MIN_OCCUPANCY,MAX_OCCUPANCY_NULL,MAX_OCCUPANCY,NUMBER_OF_DAYS_NULL,NUMBER_OF_DAYS,DOW_INDICATOR,PER_STAY_INDICATOR,MIN_PRICE_NULL,MIN_PRICE,MAX_PRICE_NULL,MAX_PRICE,FinOpt';
      wCampAGR@1100253018 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,REDUCTION_TYPE,REDUCTION_MODE,CATEGORY_ID,SEASON_NAME,DOW_INDICATOR,AGE_CATEGORY_NULL,AGE_CATEGORY,AMOUNT_NULL,AMOUNT,XBED_ALLOTMENT_QUALITY,XBED_ALLOTMENT_QUANTITY_NULL,XBED_ALLOTMENT_QUANTITY,FinOpt';
      wCampSPO@1100253019 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,DATE_FROM,DATE_TO,NUMBER_OF_DAYS_STAY_NULL,NUMBER_OF_DAYS_STAY,NUMBER_OF_DAYS_PAY_NULL,NUMBER_OF_DAYS_PAY,REDUCTION_TYPE,AMOUNT_NULL,AMOUNT,FinOpt';
      wCampEBD@1100253020 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,BOOK_DATE_TO,DAYS_BEF_TRAVEL_NULL,DAYS_BEF_TRAVEL,MIN_DAYS_STAY_NULL,MIN_DAYS_STAY,REDUCTION_MODE,PERSON_UNIT_INDICATOR,LENGTH_OF_USE_BASIS,NO_SPEC_OFFER_COMB,SEASON_USE_TYPE,SEASON_ID,CATEGORY_RESTRICTION,AMOUNT_NULL,AMOUNT,FinOpt';
      wCampEXT@1100253021 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,X_CHARGE_TYPE_CATEGORY,X_CHARGE_TYPE,INCL_PAYED_LOCALLY,CLEARING_UNIT,PRICE_NULL,PRICE,CURRENCY_CODE,FinOpt';
      Text005@1100253022 : TextConst 'ENU=Exchange was not found for the field %1, value: %2.;ESP=No se ha encontrado conversi¢n para el campo %1, valor: %2.';
      Text006@1100253023 : TextConst 'ENU=Ages range %1 has not been found.;ESP=No se ha encontrado el rango de edades %1.';
      Text007@1100253024 : TextConst 'ENU=Season %1 has not been found;ESP=No se ha encontrado temporada %1.';
      Text008@1100253025 : TextConst 'ENU=Room %1 has not been found;ESP=No se ha encontrado la habitaci¢n %1.';
      Text009@1100253026 : TextConst 'ENU=Payment days must be lower than the days of the stay;ESP=Los d¡as de pago han de ser inferiores a los d¡as de estancia.';
      Text010@1100253027 : TextConst 'ENU=Importations in status %1 cannot be checked;ESP=No se pueden comprobar importaciones en estado %1.';
      Text011@1100253028 : TextConst 'ENU=Importation in status %1 cannot be cancelled;ESP=No se pueden anular importaciones en estado %1.';
      Text012@1100253029 : TextConst 'ENU=Only importations on remaining status without error can be transferred;ESP=Solo se pueden Transferir importaciones en estado pendiente sin errores.';
      Text013@1100253030 : TextConst 'ENU=Importing file #1### : @2@@@@@@@;ESP=Importando Fichero #1### : @2@@@@@@@';
      Text014@1100253031 : TextConst 'ENU=Checking file #1### : @2@@@@@@@;ESP=Comprobando Fichero #1### : @2@@@@@@@';
      Text015@1100253032 : TextConst 'ENU=Transferring #1######## : @2@@@@@@@;ESP=Transfiriendo #1######## : @2@@@@@@@';
      wCampAVC@1100253033 : ',ST_PROJECT_ID,ST_SUPPLIER_ID,COMPANY_ID,OBJECT_CODE,SERVICE_TYPE,SERVICE_SUBTYPE,CATEGORY_ID,SEASON_ID,DATE_FROM,DATE_TO,DOW_INDICATOR,RELEASE_DAYS_NULL,RELEASE_DAYS,RELEASE_DATE,FinOpt';
      Text016@1100253034 : TextConst 'ENU=Unable to lock importations in status %1;ESP=No se pueden bloquear importaciones en estado %1.';
      Text017@1100253035 : TextConst 'ENU=Unable to unlock importations in status %1;ESP=No se pueden desbloquear importaciones en estado %1.';
      Text018@1100253036 : TextConst 'ENU=Rates are only applied on determined days. Contract cannot be imported automatically;ESP=El precio solo se aplica a determinados d¡as de la semana. No se puede importar el contrato autom ticamente.';
      Text019@1100253037 : TextConst 'ENU=Would you like to mark this contract as imported again;ESP=Desea volver a marcar este contrato como importado.';
      Text020@1100217000 : TextConst 'ENU=It can only be reversed if the contract has been transferred.;ESP=Solo se puede retroceder si el contrato ha sido transferido.';
      Text021@1100217001 : TextConst 'ENU=You can not go back because there is a contract %1.;ESP=No se puede retroceder porque el existe el contrato %1.';

    PROCEDURE Importar@1100253000();
    VAR
      lwNuevos@1100253000 : Integer;
      lrCab@1100253001 : Record 7009888;
    BEGIN
      // Importar.

      lwNuevos := _ObtenerFicherosContratos;

      // recorremos las nuevas cabeceras de importaci¢n obtenidas.
      CLEAR(lrCab);
      lrCab.SETFILTER(No, '%1..', lwNuevos);
      IF lrCab.FINDSET THEN BEGIN
        REPEAT
          lrCab.CALCFIELDS("Errores Cabecera");
          IF lrCab."Errores Cabecera" = 0 THEN BEGIN
            // Si no faltan ficheros obligatorios se inicia la importaci¢n del detalle.
            _ImportarFicheros(lrCab);
            lrCab.MODIFY;
          END;
        UNTIL lrCab.NEXT = 0;
      END;
    END;

    PROCEDURE Comprobar@1100253009();
    VAR
      lrLin@1100253001 : Record 7009889;
      lwDialog@1100253000 : Dialog;
      lwIndex@1100253002 : Integer;
      lwTot@1100253003 : Integer;
    BEGIN
      // Comprobar.
      //: Comprueba si una importaci¢n tiene errores.

      IF Estado <> Estado::Importado THEN
        ERROR(Text010, Estado);

      IF NOT TestFicherosObligatorios THEN
        EXIT;

      // Se eliminan los registro de errores.
      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo, Tipo);
      lrLin.SETRANGE ("No Importacion", No);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::Error);
      IF NOT lrLin.ISEMPTY THEN
        lrLin.DELETEALL;

      lwTot := 12;
      lwDialog.OPEN(Text014);
      FOR lwIndex := 1 TO lwTot DO BEGIN
        lwDialog.UPDATE(2, ROUND(10000/(lwTot + 1 - lwIndex), 1));
        CASE lwIndex OF
          1 : BEGIN lwDialog.UPDATE(1, 'SRV'); _TestLineaSRV_Servicio        (Rec); END;
          2 : BEGIN lwDialog.UPDATE(1, 'SDT'); _TestLineaSDT_Temporada       (Rec); END;
          3 : BEGIN lwDialog.UPDATE(1, 'CAT'); _TestLineaCAT_Habitacion      (Rec); END;
          4 : BEGIN lwDialog.UPDATE(1, 'AVB'); _TestLineaAVB_Cupo            (Rec); END;
          5 : BEGIN lwDialog.UPDATE(1, 'TRF'); _TestLineaTRF_PrecioHabitacion(Rec); END;
          6 : BEGIN lwDialog.UPDATE(1, 'AVC'); _TestLineaAVC_Release         (Rec); END;
          7 : BEGIN lwDialog.UPDATE(1, 'AGR'); _TestLineaAGR_SuplPersona     (Rec); END;
          8 : BEGIN lwDialog.UPDATE(1, 'SPO'); _TestLineaSPO_OfertasPrecio   (Rec); END;
          9 : BEGIN lwDialog.UPDATE(1, 'EBD'); _TestLineaEBD_EarlyBook       (Rec); END;
          10: BEGIN lwDialog.UPDATE(1, 'EXT'); _TestLineaEXT_Extras          (Rec); END;
          11: BEGIN lwDialog.UPDATE(1, 'MAN'); _TestLineaMAN_Comentarios     (Rec); END;
          12: BEGIN lwDialog.UPDATE(1, 'PRK'); _TestLineaPRK_TipoPrecio      (Rec); END;
          13: BEGIN lwDialog.UPDATE(1, 'AOX'); _TestLineaAOX_PreciosRegimen  (Rec); END;
        END;
      END;
      lwDialog.CLOSE;
    END;

    PROCEDURE Anular@1100253010();
    BEGIN
      // Anular.

      IF Estado <> Estado::Importado THEN
        ERROR(Text011, Estado);

      Estado := Estado::Anulado;
      MODIFY;
    END;

    PROCEDURE Transferir@1100253011();
    VAR
      lrError@1100253000 : Record 7009889;
      lrContr@1100253001 : Record 7009723;
      lrParInt2@1100253002 : Record 7009891;
      lrFile@1100253003 : Record 2000000022;
      lwDstDir@1100253004 : Text[250];
      lwDst@1100253005 : Text[250];
      lwOri@1100253006 : Text[250];
      lwIndex@1100253007 : Integer;
      lwTot@1100253008 : Integer;
      lwDialog@1100253009 : Dialog;
      lrCabs@1100253010 : Record 7009888;
    BEGIN
      // Transferir.

      IF Estado <> Estado::Importado THEN
        ERROR(Text012);

      CLEAR(lrError);
      lrError.SETRANGE ("No Importacion", No);
      lrError.SETRANGE (Tipo, lrError.Tipo::Error);
      IF NOT lrError.ISEMPTY  THEN
        ERROR(Text012);

      lwTot := 10;
      lwDialog.OPEN(Text015);
      FOR lwIndex := 1 TO lwTot DO BEGIN
        lwDialog.UPDATE(2, ROUND(10000/((lwTot + 1) - lwIndex),1));
        CASE lwIndex OF
          1  : BEGIN lwDialog.UPDATE(1, 'Cabecera Contrato')      ; _InsertarContrato     (lrContr); END;
          2  : BEGIN lwDialog.UPDATE(1, 'Conversiones Habitaci¢n'); _InsertarConvHab      (lrContr); END;
          3  : BEGIN lwDialog.UPDATE(1, 'Cupos contrato')         ; _InsertarCupos        (lrContr); END;
          4  : BEGIN lwDialog.UPDATE(1, 'Precios Habitaci¢n')     ; _InsertarPreciosHab   (lrContr); END;
          5  : BEGIN lwDialog.UPDATE(1, 'Precios Rgimen')        ; _InsertarPreciosReg   (lrContr); END;
          6  : BEGIN lwDialog.UPDATE(1, 'Suplementos Persona')    ; _InsertarSuplPersona  (lrContr); END;
          7  : BEGIN lwDialog.UPDATE(1, 'Suplementos Extra')      ; _InsertarExtras       (lrContr); END;
          8  : BEGIN lwDialog.UPDATE(1, 'Ofertas Precio')         ; _InsertarOfertasPrecio(lrContr); END;
          9  : BEGIN lwDialog.UPDATE(1, 'Ofertas Early Booking')  ; _InsertarEarlyBook    (lrContr); END;
          10 : BEGIN lwDialog.UPDATE(1, 'Comentarios Contrato')   ; _InsertarComentarios  (lrContr); END;
        END;
      END;
      lwDialog.CLOSE;

      CLEAR(lrParInt2);
      lrParInt2.FINDFIRST;

      CLEAR(lrCabs);
      lrCabs.SETCURRENTKEY("Nombre Fichero");
      lrCabs.SETRANGE ("Nombre Fichero", "Nombre Fichero");
      lrCabs.SETRANGE (Estado          , lrCabs.Estado::Importado);
      lrCabs.SETFILTER(No              , '<>%1', No);
      IF lrCabs.ISEMPTY THEN BEGIN
        CLEAR(lrFile);
        lrFile.SETRANGE (Path       , lrParInt2."MRW Dir. Impt. Contrato Comp");
        lrFile.SETRANGE ("Is a file", TRUE);
        lrFile.SETFILTER(Name       , "Nombre Fichero" + '.???');
        IF lrFile.FINDSET THEN BEGIN
          lwDstDir := lrParInt2."MRW Dir. IMportados Cont. Comp" + '\' + FORMAT(TODAY, 0, '<Year4>_<month,2>') + '\';
          cVarias.CrearDirectorio(lwDstDir, FALSE);
          REPEAT
            lwOri := lrFile.Path + '\' + lrFile.Name;
            lwDst := lwDstDir + lrFile.Name;
            IF cVarias.CopiarFichero(lwOri, lwDst, TRUE) THEN
              cVarias.EliminarFichero(lwOri, FALSE);
          UNTIL lrFile.NEXT = 0;
        END;
      END;

      Estado         := Estado::Transferido;
      "Num Contrato" := lrContr."N§ Contrato compra";
      MODIFY;
    END;

    PROCEDURE RetrocederTransferido@1100217000();
    VAR
      lrContr@1100217000 : Record 7009723;
    BEGIN
      // RetrocederTransferido

      IF Estado <> Estado::Transferido THEN
        ERROR(Text020);

      lrContr.RESET;
      lrContr.SETRANGE("N§ Contrato compra", "Num Contrato");
      IF lrContr.FINDFIRST THEN
        ERROR(Text021);

      Estado := Estado::Importado;
      MODIFY;
    END;

    PROCEDURE Bloquear@1100253051();
    BEGIN
      // Bloquear.

      IF Estado <> Estado::Importado THEN
        ERROR(Text016, Estado);

      Estado := Estado::Bloqueado;
      MODIFY;
    END;

    PROCEDURE Desbloquear@1100253053();
    BEGIN
      // Desbloquear.

      IF Estado <> Estado::Bloqueado THEN
        ERROR(Text017, Estado);

      Estado := Estado::Importado;
      MODIFY;
    END;

    PROCEDURE BuscarConv@1100253008(pwFieldNo@1100253000 : Integer) rvCod : Code[20];
    VAR
      lrConv@1100253001 : Record 7009887;
      lwEnc@1100253002 : Boolean;
    BEGIN
      // BuscarConv

      CASE TRUE OF

        (pwFieldNo = FIELDNO(Hotel))       : BEGIN
          CLEAR(lrConv);
          lrConv.SETCURRENTKEY(Tipo,Touroperador,Valor);
          lrConv.SETRANGE (Tipo        , lrConv.Tipo::Hotel);
          lrConv.SETRANGE (Touroperador, Touroperador);
          lrConv.SETRANGE (Valor       , Hotel);
          lwEnc := lrConv.FINDFIRST;
          IF lwEnc AND (lrConv."Codigo Navision" <> '') THEN
            EXIT(lrConv."Codigo Navision")
          ELSE BEGIN
            IF NOT lwEnc THEN BEGIN
              CLEAR(lrConv);
              lrConv.Tipo         := lrConv.Tipo::Hotel;
              lrConv.Touroperador := Touroperador;
              lrConv.Valor        := Hotel;
              lrConv.INSERT(TRUE);
            END;
            A¤adirError(0, STRSUBSTNO(Text005, FIELDCAPTION(Hotel), Hotel));
          END;
        END;

        (pwFieldNo = FIELDNO(Touroperador)) : BEGIN
          CLEAR(lrConv);
          lrConv.SETCURRENTKEY(Tipo,Touroperador,Valor);
          lrConv.SETRANGE (Tipo        , lrConv.Tipo::Touroperador);
          lrConv.SETRANGE (Touroperador, '');
          lrConv.SETRANGE (Valor       , Touroperador);
          lwEnc := lrConv.FINDFIRST;
          IF lwEnc AND (lrConv."Codigo Navision" <> '') THEN
            EXIT(lrConv."Codigo Navision")
          ELSE BEGIN
            IF NOT lwEnc THEN BEGIN
              CLEAR(lrConv);
              lrConv.Tipo         := lrConv.Tipo::Touroperador;
              lrConv.Touroperador := '';
              lrConv.Valor        := Touroperador;
              lrConv.INSERT(TRUE);
            END;
            A¤adirError(0, STRSUBSTNO(Text005, FIELDCAPTION(Touroperador), Touroperador));
          END;
        END;

        (pwFieldNo = FIELDNO(Divisa))      : BEGIN
          CLEAR(lrConv);
          lrConv.SETCURRENTKEY(Tipo,Touroperador,Valor);
          lrConv.SETRANGE (Tipo        , lrConv.Tipo::"Codigo divisa");
          lrConv.SETRANGE (Touroperador, Touroperador);
          lrConv.SETRANGE (Valor       , Divisa);
          lwEnc := lrConv.FINDFIRST;
          IF lwEnc AND (lrConv."Codigo Navision" <> '') THEN
            EXIT(lrConv."Codigo Navision")
          ELSE BEGIN
            IF NOT lwEnc THEN BEGIN
              CLEAR(lrConv);
              lrConv.Tipo         := lrConv.Tipo::"Codigo divisa";
              lrConv.Touroperador := Touroperador;
              lrConv.Valor        := Divisa;
              lrConv.INSERT(TRUE);
            END;
            A¤adirError(0, STRSUBSTNO(Text005, FIELDCAPTION(Divisa), Divisa));
          END;
        END;

      END;
    END;

    PROCEDURE A¤adirError@1100253005(pwNumLin@1100253002 : Integer;pwDescripcion@1100253000 : Text[250]);
    VAR
      lrLin@1100253001 : Record 7009889;
    BEGIN
      // A¤adirError
      //: Se a¤ade un error para la importaci¢n actual.

      CLEAR(lrLin);
      lrLin."No Importacion" := No;
      lrLin.Tipo             := lrLin.Tipo::Error;
      lrLin."Linea Error"    := pwNumLin;
      lrLin.Descripcion      := pwDescripcion;
      lrLin.INSERT(TRUE);
    END;

    PROCEDURE SetDatosImportacion@1100253002();
    BEGIN
      // SetDatosImportacion.

      "Usuario importacion" := USERID;
      "Fecha importacion"   := CURRENTDATETIME;
    END;

    PROCEDURE TestFicherosObligatorios@1100253023() rvOk : Boolean;
    VAR
      lrParInt2@1100253000 : Record 7009891;
      lwIndex@1100253001 : Integer;
    BEGIN
      // TestFicherosObligatorios.

      rvOk := TRUE;

      CLEAR(lrParInt2);
      lrParInt2.FINDFIRST;

      FOR lwIndex := 1 TO wExtObl::finOption - 1 DO BEGIN
          wExtObl := lwIndex;
         IF NOT cVarias.EsFichero(cVarias.A¤adiraRuta(lrParInt2."MRW Dir. Impt. Contrato Comp",
                                                      "Nombre Fichero" + '.' + FORMAT(wExtObl)))
         THEN BEGIN
           A¤adirError(0, STRSUBSTNO(Text001, "Nombre Fichero", FORMAT(wExtObl)));
           rvOk:= FALSE;
         END;
      END;
    END;

    PROCEDURE VerContratoImportado@1100253043();
    VAR
      lrContr@1100253000 : Record 7009723;
    BEGIN
      // VerContratoImportado

      IF (Estado <> Estado::Transferido) OR ("Num Contrato" = '') THEN
        EXIT;

      CLEAR(lrContr);
      lrContr.SETRANGE("N§ Contrato compra", "Num Contrato");
      IF lrContr.FINDFIRST THEN
        FORM.RUN(7009735, lrContr);
    END;

    LOCAL PROCEDURE _ObtenerFicherosContratos@1100253001() rvNum : Integer;
    VAR
      lrParInt2@1100253000 : Record 7009891;
      lrFile@1100253003 : Record 2000000022;
      lrCab@1100253004 : Record 7009888;
      lwIndex@1100253006 : Integer;
      lwNum@1100253001 : Integer;
    BEGIN
      // _ObtenerFicherosContratos.
      //: Obtiene los ficheros de importaci¢n de contratos a£n no importados.
      //: devuelve el primer identificador de cabecera que se inserta. en caso de no encontrar nada devuelve 0.

      CLEAR(lrParInt2);
      lrParInt2.FINDFIRST;
      // Comprobamos si el directorio se ha rellenado y este existe.
      lrParInt2.TESTFIELD("MRW Dir. Impt. Contrato Comp");
      cVarias.ExisteDirectorio(lrParInt2."MRW Dir. Impt. Contrato Comp", FALSE, TRUE, FALSE);

      // Comprobamos los distintos contratos nuevos que pueda haber en el directorio de ficheros a importar.
      CLEAR(lrFile);
      lrFile.SETRANGE (Path       , lrParInt2."MRW Dir. Impt. Contrato Comp");
      lrFile.SETFILTER(Name       , '*.SRV');
      lrFile.SETRANGE ("Is a file", TRUE);
      IF lrFile.FINDSET THEN BEGIN
        REPEAT
          lwNum := _PreImportarSRV_Servicio(cVarias.A¤adiraRuta(lrFile.Path, lrFile.Name));
          IF rvNum = 0 THEN
            rvNum := lwNum;
        UNTIL lrFile.NEXT = 0;
      END;

      // Comprobamos que haya todas las extensiones obligatorias.
      CLEAR(lrCab);
      lrCab.SETFILTER (No, '>=%1', rvNum);
      IF lrCab.FINDSET THEN BEGIN
        REPEAT
          lrCab.TestFicherosObligatorios;
        UNTIL lrCab.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _PreImportarSRV_Servicio@1100253048(pwFichero@1100253010 : Text[250]) rvNum : Integer;
    VAR
      lcImp@1100253002 : Codeunit 7009752;
      lrTextBuff@1100253000 : TEMPORARY Record 7009892;
      lwContCampo@1100253004 : Integer;
      lwContinue@1100253001 : Boolean;
      lwNomDesc@1100253003 : Text[250];
      lrCab@1100253005 : Record 7009888;
    BEGIN
      // _PreImportarSRV_Servicio.

      CLEAR(lcImp);
      lcImp.SetNombreFichero(pwFichero);
      lcImp.SetSeparadorCampo(',');         // campos separados por comas.
      lcImp.SetDelimitadorCampo('"', TRUE); // los campos se pueden delimitar opcionalmente por comillas.
      lcImp.AbrirFichero;
      WHILE lcImp.GetRegistro DO BEGIN
        lwContCampo := 0;
        lwContinue := lcImp.GetCampo(lrTextBuff);
        WHILE lwContinue DO BEGIN
          lwContCampo += 1;
          CASE lwContCampo OF
            wCampSRV1::ST_SUPPLIER_ID : BEGIN
              lwNomDesc := cVarias.DevolverBaseFichero(pwFichero) + '_' + lrTextBuff.Text;
              CLEAR(lrCab);
              lrCab.SETCURRENTKEY(Descripcion);
              lrCab.SETFILTER(Descripcion, lwNomDesc);
              lrCab.SETFILTER(Estado          , '<>%1', Estado::Anulado);
              IF NOT lrCab.FINDFIRST THEN BEGIN
                CLEAR(lrCab);
                lrCab."Nombre Fichero" := cVarias.DevolverBaseFichero(pwFichero);
                lrCab.Descripcion      := lwNomDesc;
                lrCab.INSERT(TRUE);
                IF rvNum = 0 THEN
                  rvNum := lrCab.No;
              END;

              lwContinue := FALSE;
            END;
          END;

          IF lwContinue THEN
            lwContinue := lcImp.GetCampo(lrTextBuff);
        END;
      END;
    END;

    LOCAL PROCEDURE _ImportarFicheros@1100253004(VAR prCab@1100253000 : Record 7009888);
    VAR
      lwIndex@1100253001 : Integer;
      lrParInt2@1100253002 : Record 7009891;
      lcImp@1100253003 : Codeunit 7009752;
      lwRuta@1100253004 : Text[250];
      lrTextBuff@1100253005 : TEMPORARY Record 7009892;
      lwContReg@1100253006 : Integer;
      lwContCampo@1100253007 : Integer;
      lrLinTMP@1100253008 : TEMPORARY Record 7009889;
      lwDialog@1100253009 : Dialog;
      lwLinOk@1100253010 : Boolean;
      lwContinue@1100253011 : Boolean;
    BEGIN
      // _ImportarFicheros.

      CLEAR(lrParInt2);
      lrParInt2.FINDFIRST;

      // para cada extensi¢n buscamos el fichero.
      lwDialog.OPEN(Text013);
      FOR lwIndex := 1 TO wExt::FinOption - 1 DO BEGIN

        // Ignoramos los ficheros que no tienen utilidad por ahora para la importaci¢n. En caso de necesitar
        // informaci¢n extra de estos ficheros hay que hacer las funciones correspondientes.
        IF NOT(lwIndex IN [wExt::ADC,wExt::BAP,wExt::CHK,wExt::EXG,wExt::MST,wExt::OK,wExt::SVF]) THEN BEGIN
          wExt := lwIndex;
          lwDialog.UPDATE(1, FORMAT(wExt));
          lwDialog.UPDATE(2, ROUND(lwIndex / (wExt::FinOption - 1) * 10000, 1));
          lwRuta := cVarias.A¤adiraRuta(lrParInt2."MRW Dir. Impt. Contrato Comp",prCab."Nombre Fichero" + '.' + FORMAT(wExt));
          IF cVarias.EsFichero(lwRuta) THEN BEGIN
            CLEAR(lcImp);
            lcImp.SetNombreFichero(lwRuta);
            lcImp.SetSeparadorCampo(',');         // campos separados por comas.
            lcImp.SetDelimitadorCampo('"', TRUE); // los campos se pueden delimitar opcionalmente por comillas.
            lcImp.AbrirFichero;
            lwContReg := 0;
            WHILE lcImp.GetRegistro DO BEGIN
              lwContReg   += 1;
              lwContCampo := 1;
              CLEAR(lrLinTMP);
              lrLinTMP.DELETEALL;
              lrLinTMP."No Importacion" := lwContReg;
              lwContinue := lcImp.GetCampo(lrTextBuff);
              WHILE lwContinue DO BEGIN
                CASE lwIndex OF
                  wExt::SRV: lwLinOk := _ImportarSRV_Servicio        (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::PRK: lwLinOk := _ImportarPRK_TipoPrecio      (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::SDT: lwLinOk := _ImportarSDT_Temporada       (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::CAT: lwLinOk := _ImportarCAT_Habitacion      (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::AVB: lwLinOk := _ImportarAVB_Cupo            (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::AOX: lwLinOk := _ImportarAOX_PreciosRegimen  (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::TRF: lwLinOk := _ImportarTRF_PrecioHabitacion(prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::AVC: lwLinOk := _ImportarAVC_Release         (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::AGR: lwLinOk := _ImportarAGR_SuplPersona     (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::EBD: lwLinOk := _ImportarEBD_EarlyBook       (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::EXT: lwLinOk := _ImportarEXT_Extras          (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::MAN: lwLinOk := _ImportarMAN_Comentarios     (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                  wExt::SPO: lwLinOk := _ImportarSPO_OfertasPrecio   (prCab, lrLinTMP, lrTextBuff, lwContCampo);
                END;
                lwContCampo += 1;
                IF lwLinOk THEN
                  lwContinue := lcImp.GetCampo(lrTextBuff)
                ELSE
                  lwContinue := FALSE;
              END;
              // Se un registro del fichero a base de datos.
              IF lwLinOk THEN BEGIN
                CASE lwIndex OF
                  wExt::SRV: _InsertarSRV_Servicio        (prCab, lrLinTMP);
                  wExt::PRK: _InsertarPRK_TipoPrecio      (prCab, lrLinTMP);
                  wExt::SDT: _InsertarSDT_Temporada       (prCab, lrLinTMP);
                  wExt::CAT: _InsertarCAT_Habitacion      (prCab, lrLinTMP);
                  wExt::AVB: _InsertarAVB_Cupo            (prCab, lrLinTMP);
                  wExt::AOX: _InsertarAOX_PreciosRegimen  (prCab, lrLinTMP);
                  wExt::TRF: _InsertarTRF_PrecioHabitacion(prCab, lrLinTMP);
                  wExt::AVC: _InsertarAVC_Release         (prCab, lrLinTMP);
                  wExt::AGR: _InsertarAGR_SuplPersona     (prCab, lrLinTMP);
                  wExt::EBD: _InsertarEBD_EarlyBook       (prCab, lrLinTMP);
                  wExt::EXT: _InsertarEXT_Extras          (prCab, lrLinTMP);
                  wExt::MAN: _InsertarMAN_Comentarios     (prCab, lrLinTMP);
                  wExt::SPO: _InsertarSPO_OfertasPrecio   (prCab, lrLinTMP);
                END;
              END;
            END;

            // Se testean los registros del fichero importado.
            CASE lwIndex OF
              wExt::SRV: _TestLineaSRV_Servicio        (prCab);
              wExt::PRK: _TestLineaPRK_TipoPrecio      (prCab);
              wExt::SDT: _TestLineaSDT_Temporada       (prCab);
              wExt::CAT: _TestLineaCAT_Habitacion      (prCab);
              wExt::AVB: _TestLineaAVB_Cupo            (prCab);
              wExt::AOX: _TestLineaAOX_PreciosRegimen  (prCab);
              wExt::TRF: _TestLineaTRF_PrecioHabitacion(prCab);
              wExt::AVC: _TestLineaAVC_Release         (prCab);
              wExt::AGR: _TestLineaAGR_SuplPersona     (prCab);
              wExt::EBD: _TestLineaEBD_EarlyBook       (prCab);
              wExt::EXT: _TestLineaEXT_Extras          (prCab);
              wExt::MAN: _TestLineaMAN_Comentarios     (prCab);
              wExt::SPO: _TestLineaSPO_OfertasPrecio   (prCab);
            END;

          END;
        END;
      END;

      lwDialog.CLOSE;
    END;

    LOCAL PROCEDURE _ImportarSDT_Temporada@1100253003(VAR prCab@1100253000 : Record 7009888;VAR prLinTMP@1100253004 : TEMPORARY Record 7009889;VAR prBuff@1100253003 : TEMPORARY Record 7009892;pwNumCamp@1100253001 : Integer) rvOK : Boolean;
    BEGIN
      // _ImportarSDT_Temporada.

      CLEAR(prBuff);
      prBuff.FINDFIRST;
      rvOK := TRUE;
      CASE pwNumCamp OF
        wCampSDT::ST_SUPPLIER_ID: rvOK := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampSDT::SEASON_NAME   : IF NOT EVALUATE(prLinTMP.Codigo       , prBuff.Text) THEN CLEAR(prLinTMP.Codigo);
        // Tipo temporada. 'E' -> Early Bird, 'P' -> precios compra resto
        wCampSDT::SEASON_TYPE   : prLinTMP.Temporada     := prBuff.Text;
        wCampSDT::DATE_FROM     : prLinTMP."Fecha Desde" := _GetFecha(prBuff.Text);
        wCampSDT::DATE_TO       : prLinTMP."Fecha Hasta" := _GetFecha(prBuff.Text);
      END;
    END;

    LOCAL PROCEDURE _InsertarSDT_Temporada@1100253065(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253000 : Record 7009889;
    BEGIN
      // _InsertarSDT_Temporada.

      // Insertamos la l¡nea en real.
      CLEAR(lrLin);
      lrLin := prLinTMP;
      lrLin."No Importacion" := prCab.No;
      lrLin."No Lin"         := 0;
      lrLin.Tipo             := lrLin.Tipo::Temporada;
      lrLin.INSERT(TRUE);
    END;

    LOCAL PROCEDURE _TestLineaSDT_Temporada@1100253018(VAR prCab@1100253000 : Record 7009888);
    VAR
      lrLin@1100253003 : Record 7009889;
    BEGIN
      // _TestLineaSDT_Temporada.
      //:

      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo,Tipo);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::Temporada);
      lrLin.SETRANGE ("No Importacion", prCab.No);
      IF lrLin.FINDSET THEN BEGIN
        REPEAT
          IF lrLin.Codigo = '' THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, 'Nombre temporada'));

          IF lrLin."Fecha Desde" = 0D THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, 'Fecha desde'));

          IF lrLin."Fecha Hasta" = 0D THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, 'Fecha hasta'));

          IF lrLin."Fecha Hasta" < lrLin."Fecha Desde" THEN
            prCab.A¤adirError(lrLin."No Lin", Text003);
        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImportarSRV_Servicio@1100253006(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOK : Boolean;
    VAR
      lwFin1@1100253004 : Integer;
      lwFin2@1100253005 : Integer;
      lwFin3@1100253006 : Integer;
    BEGIN
      // _ImportarSRV_Servicio.

      lwFin1 := wCampSRV1::FinOpt;
      lwFin2 := lwFin1 + wCampSRV2::FinOpt;
      lwFin3 := lwFin2 + wCampSRV3::FinOpt;
      rvOK := TRUE;
      CASE pwNumCamp OF
        wCampSRV1::ST_SUPPLIER_ID       : rvOK := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampSRV1::OBJECT_CODE          :
          IF NOT EVALUATE(prCab.Hotel                  , prBuff.Text) THEN CLEAR(prCab.Hotel);
        wCampSRV1::SERVICE_TYPE         : prCab.Servicio := prBuff.Text;
        wCampSRV1::SERVICE_SUBTYPE      : BEGIN
          prCab.Servicio += '/' + prBuff.Text;
          CASE prCab.Servicio OF
            'AC/A' : prCab."Tipo Servicio" := prCab."Tipo Servicio"::Hotel;
            'AC/H' : prCab."Tipo Servicio" := prCab."Tipo Servicio"::Apartment;
            'AC/P' : prCab."Tipo Servicio" := prCab."Tipo Servicio"::"Private Home";
            'TO/'  : prCab."Tipo Servicio" := prCab."Tipo Servicio"::Tour;
            'SA/CR': prCab."Tipo Servicio" := prCab."Tipo Servicio"::Cruise;
            'OS/A' : prCab."Tipo Servicio" := prCab."Tipo Servicio"::Activity;
            'OS/E' : prCab."Tipo Servicio" := prCab."Tipo Servicio"::"Event";
            'OS/G' : prCab."Tipo Servicio" := prCab."Tipo Servicio"::Other;
            'OS/TS': prCab."Tipo Servicio" := prCab."Tipo Servicio"::"Transportation Special";
            'OS/DT': prCab."Tipo Servicio" := prCab."Tipo Servicio"::"Day Trip";
            'OS/EC': prCab."Tipo Servicio" := prCab."Tipo Servicio"::Excursion;
            'OS/SR': prCab."Tipo Servicio" := prCab."Tipo Servicio"::"Special Service Request";
            'OS/TP': prCab."Tipo Servicio" := prCab."Tipo Servicio"::"Transportation Pass";
          END;
        END;
        wCampSRV1::COMPANY_ID           :
          IF NOT EVALUATE(prCab.Touroperador           , prBuff.Text) THEN CLEAR(prCab.Touroperador);
        wCampSRV1::DEFAULT_MINIMUM_STAY :
          IF NOT EVALUATE(prCab."Minimo Estancias"     , prBuff.Text) THEN CLEAR(prCab."Minimo Estancias");
        wCampSRV1::SPA_NAME             : prCab."Nombre Hotel" := prBuff.Text;

        lwFin3 + wCampSRV4::FIRST_DATE  :
          prCab."Fecha inicio contrato" := _GetFecha(prBuff.Text);
        lwFin3 + wCampSRV4::LAST_DATE   :
          prCab."Fecha fin contrato"    := _GetFecha(prBuff.Text);

        // Periodos de edades.
        lwFin2 + wCampSRV3::AGE_1_TO : BEGIN
          prLinTMP.INIT;
          prLinTMP."No Lin" := 1;
          prLinTMP.Tipo     := prLinTMP.Tipo::Edades;
          prLinTMP.Codigo   := FORMAT(prLinTMP."No Lin");
          IF NOT EVALUATE(prLinTMP."Cantidad 2", prBuff.Text) THEN CLEAR (prLinTMP."Cantidad 2");
          prLinTMP.INSERT;
        END;
        lwFin2 + wCampSRV3::AGE_2_TO : BEGIN
          prLinTMP.INIT;
          prLinTMP."No Lin" := 2;
          prLinTMP.Tipo     := prLinTMP.Tipo::Edades;
          prLinTMP.Codigo   := FORMAT(prLinTMP."No Lin");
          IF NOT EVALUATE(prLinTMP."Cantidad 2", prBuff.Text) THEN CLEAR (prLinTMP."Cantidad 2");
          prLinTMP.INSERT;
        END;
        lwFin2 + wCampSRV3::AGE_3_TO : BEGIN
          prLinTMP.INIT;
          prLinTMP."No Lin" := 3;
          prLinTMP.Tipo     := prLinTMP.Tipo::Edades;
          prLinTMP.Codigo   := FORMAT(prLinTMP."No Lin");
          IF NOT EVALUATE(prLinTMP."Cantidad 2", prBuff.Text) THEN CLEAR (prLinTMP."Cantidad 2");
          prLinTMP.INSERT;
        END;
        lwFin2 + wCampSRV3::AGE_4_TO : BEGIN
          prLinTMP.INIT;
          prLinTMP."No Lin" := 4;
          prLinTMP.Tipo     := prLinTMP.Tipo::Edades;
          prLinTMP.Codigo   := FORMAT(prLinTMP."No Lin");
          IF NOT EVALUATE(prLinTMP."Cantidad 2", prBuff.Text) THEN CLEAR (prLinTMP."Cantidad 2");
          prLinTMP.INSERT;
        END;
        lwFin2 + wCampSRV3::AGE_5_TO : BEGIN
          prLinTMP.INIT;
          prLinTMP."No Lin" := 5;
          prLinTMP.Tipo     := prLinTMP.Tipo::Edades;
          prLinTMP.Codigo   := FORMAT(prLinTMP."No Lin");
          IF NOT EVALUATE(prLinTMP."Cantidad 2", prBuff.Text) THEN CLEAR (prLinTMP."Cantidad 2");
          prLinTMP.INSERT;
        END;

      END;
    END;

    LOCAL PROCEDURE _InsertarSRV_Servicio@1100253075(VAR prCab@1100253000 : Record 7009888;VAR prLinTMP@1100253001 : TEMPORARY Record 7009889);
    VAR
      lwUltEdad@1100253002 : Integer;
      lrLin@1100253003 : Record 7009889;
    BEGIN
      // _InsertarSRV_Servicio.

      // Tratamos los periodos de edades.
      prLinTMP.SETFILTER("Cantidad 2", '<>%1', 0);
      IF prLinTMP.FINDSET THEN BEGIN
        lwUltEdad := 0;
        REPEAT
          CLEAR(lrLin);
          lrLin."No Importacion" := prCab.No;
          lrLin.Tipo             := lrLin.Tipo::Edades;
          lrLin.Codigo           := prLinTMP.Codigo;
          lrLin.Cantidad         := lwUltEdad;
          lrLin."Cantidad 2"     := prLinTMP."Cantidad 2";
          lrLin.INSERT(TRUE);

          lwUltEdad := prLinTMP."Cantidad 2" + 1;

        UNTIL prLinTMP.NEXT = 0;

        // El £ltimo periodo de edades.
        // El control es para que en caso de comprobaci¢n no se intente insertar
        // dos veces la £ltima l¡nea.
        IF lwUltEdad <> 1000 THEN BEGIN
          CLEAR(lrLin);
          lrLin."No Importacion" := prCab.No;
          lrLin.Tipo             := lrLin.Tipo::Edades;
          lrLin.Codigo           := '0';
          lrLin.Cantidad         := lwUltEdad;
          lrLin."Cantidad 2"     := 999;
          lrLin.INSERT(TRUE);
        END;

      END;
    END;

    LOCAL PROCEDURE _TestLineaSRV_Servicio@1100253007(VAR prCab@1100253002 : Record 7009888);
    VAR
      lwFin@1100253003 : Integer;
      lrLin@1100253000 : Record 7009889;
    BEGIN
      // _TestLineaSRV_servicio.

      // Si los campos est n vac¡os no se comprueban las conversiones.

      IF (prCab.Hotel = '') THEN
        prCab.A¤adirError(0, STRSUBSTNO(Text002, prCab.FIELDCAPTION(Hotel)))
      ELSE
        prCab.BuscarConv(FIELDNO(Hotel));

      IF (prCab.Touroperador = '') THEN
        prCab.A¤adirError(0, STRSUBSTNO(Text002, prCab.FIELDCAPTION(Touroperador)))
      ELSE
        prCab.BuscarConv(FIELDNO(Touroperador));

      IF prCab."Fecha inicio contrato" = 0D THEN
        prCab.A¤adirError(0, STRSUBSTNO(Text002, prCab.FIELDCAPTION("Fecha inicio contrato")));

      IF prCab."Fecha fin contrato" = 0D THEN
        prCab.A¤adirError(0, STRSUBSTNO(Text002, prCab.FIELDCAPTION("Fecha fin contrato")));

      IF prCab."Fecha fin contrato" < prCab."Fecha inicio contrato" THEN
        prCab.A¤adirError(0, Text003);

      // Se buscan las conversiones para los c¢digos de tipos de persona.
      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo, Tipo);
      lrLin.SETRANGE ("No Importacion", prCab.No);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::Edades);
      IF lrLin.FINDSET THEN BEGIN
        REPEAT
           lrLin.BuscarConv(prCab.Touroperador);
        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImportarPRK_TipoPrecio@1100253020(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOK : Boolean;
    VAR
      lwFin1@1100253004 : Integer;
      lwFin2@1100253005 : Integer;
      lwFin3@1100253006 : Integer;
    BEGIN
      // _ImportarPRK_TipoPrecio.

      rvOK := TRUE;
      CASE pwNumCamp OF
        wCampPRK::ST_SUPPLIER_ID: rvOK := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        // Solo trasladamos la divisa en caso de que siga sin rellenar.
        wCampPRK::CURRENCY_CODE:
          IF prCab.Divisa = '' THEN
            IF NOT EVALUATE(prCab.Divisa, prBuff.Text) THEN CLEAR(prBuff.Text);
        wCampPRK::CATEGORY_ID        : prLinTMP.Habitacion := prBuff.Text;
        // La informaci¢n de rgimen se guarda en dos car cteres:
        //   1. Rgimen:
        //      N -> Ninguno.
        //      B -> Breakfast.
        //      H -> HalfBoard.
        //      F -> FullBoard.
        //      I -> All Inclusive.
        //   2. Tipo Desayuno:
        //      N -> Ninguno.
        //      C -> Continental.
        //      B -> Buffet.
        //      S -> Special.
        wCampPRK::BASIC_MEAL_PLAN    : prLinTMP.Codigo := prBuff.Text;
        wCampPRK::INCLUSIVE_BREAKFAST: prLinTMP.Codigo := prLinTMP.Codigo + prBuff.Text;
        wCampPRK::MAX_OCCUPANCY      : prLinTMP.Habitacion := prLinTMP.Habitacion + prBuff.Text;

      END;
    END;

    LOCAL PROCEDURE _InsertarPRK_TipoPrecio@1100253052(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253000 : Record 7009889;
      lrHabs@1100253001 : Record 7009889;
    BEGIN
      // _InsertarPRK_TipoPrecio.

      CLEAR(lrHabs);
      lrHabs.SETCURRENTKEY(Codigo, Tipo);
      lrHabs.SETFILTER(Codigo          , prLinTMP.Habitacion);
      lrHabs.SETRANGE (Tipo            , lrHabs.Tipo::Habitacion);
      lrHabs.SETRANGE ("No Importacion", prCab.No);
      IF lrHabs.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrLin);
          lrLin."No Importacion" := prCab.No;
          lrLin."No Lin"         := 0;
          lrLin.Tipo             := lrLin.Tipo::RegimenxHab;
          lrLin.Habitacion       := lrHabs.Codigo;
          CASE prLinTMP.Codigo[1] OF
            'N': lrLin.Codigo := 'ROOM_ONLY';
            'B': BEGIN
              CASE COPYSTR(prLinTMP.Codigo, 2) OF
                'C'   : lrLin.Codigo := 'BREAKFAST_CONT';
                'B'   : lrLin.Codigo := 'BREAKFAST_BUFF';
                'S','': lrLin.Codigo := 'BREAKFAST_OTHER';
              END;
            END;
            'H': lrLin.Codigo := 'HALF_BOARD';
            'F': lrLin.Codigo := 'FULL_BOARD';
            'I': lrLin.Codigo := 'ALL_INCLUSIVE';
          END;
          lrLin.INSERT(TRUE);
        UNTIL lrHabs.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _TestLineaPRK_TipoPrecio@1100253019(VAR prCab@1100253002 : Record 7009888);
    VAR
      lrLin@1100253000 : Record 7009889;
    BEGIN
      // _TestLineaPRK_TipoPrecio.

      // Comprueba que la divisa est rellenada y haya conversi¢n.
      IF (prCab.Divisa = '') THEN
        prCab.A¤adirError(0, STRSUBSTNO(Text002, prCab.FIELDCAPTION(Divisa)))
      ELSE
        prCab.BuscarConv(FIELDNO(Divisa));

      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo, Tipo);
      lrLin.SETRANGE ("No Importacion", prCab.No);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::RegimenxHab);
      IF lrLin.FINDSET THEN BEGIN
        REPEAT
          lrLin.BuscarConv(prCab.Touroperador);
        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImportarTRF_PrecioHabitacion@1100253032(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOk : Boolean;
    BEGIN
      // _ImportarTRF_PrecioHabitacion.

      rvOk := TRUE;
      CASE pwNumCamp OF
        wCampTRF::ST_SUPPLIER_ID: rvOk := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampTRF::CATEGORY_ID   : prLinTMP.Codigo := prBuff.Text;
        wCampTRF::MIN_PRICE     : IF NOT EVALUATE(prLinTMP.Importe, prBuff.Text) THEN CLEAR(prLinTMP.Importe);
        wCampTRF::SEASON_ID     : prLinTMP.Temporada := prBuff.Text;
        wCampTRF::MIN_OCCUPANCY : IF NOT EVALUATE(prLinTMP.Cantidad, prBuff.Text) THEN CLEAR(prLinTMP.Cantidad);
        wCampTRF::MAX_OCCUPANCY : IF NOT EVALUATE(prLinTMP."Cantidad 2", prBuff.Text) THEN
                                    CLEAR(prLinTMP."Cantidad 2")
                                  // Se a¤ade la ocupaci¢n m xima del precio al c¢digo de habitaci¢n para tratar
                                  // los distintos precios dependiendo de la ocupaci¢n.
                                  ELSE
                                    prLinTMP.Codigo := prLinTMP.Codigo + FORMAT(prLinTMP."Cantidad 2");
        wCampTRF::DOW_INDICATOR : prLinTMP.DOW := prBuff.Text; //+001
      END;
    END;

    LOCAL PROCEDURE _InsertarTRF_PrecioHabitacion@1100253082(VAR prCab@1100253001 : Record 7009888;VAR prLinTMP@1100253000 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253002 : Record 7009889;
      lrTemp@1100253003 : Record 7009889;
      lrHab@1100253004 : Record 7009889;
    BEGIN
      // _InsertarTRF_PrecioHabitacion.

      CLEAR(lrTemp);
      lrTemp.SETCURRENTKEY(Codigo, Tipo);
      lrTemp.SETRANGE (Codigo          , prLinTMP.Temporada);
      lrTemp.SETRANGE (Tipo            , lrTemp.Tipo::Temporada);
      lrTemp.SETRANGE ("No Importacion", prCab.No);
      lrTemp.SETRANGE (Temporada       , 'P');
      IF lrTemp.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrLin);
          lrLin := prLinTMP;

          lrLin."No Importacion" := prCab.No;
          lrLin.Tipo             := lrLin.Tipo::"Precios habitacion";
          lrLin."Fecha Desde"    := lrTemp."Fecha Desde";
          lrLin."Fecha Hasta"    := lrTemp."Fecha Hasta";
          lrLin.INSERT(TRUE);

        UNTIL lrTemp.NEXT = 0;
      END
      // Si no hay temporada se inserta la l¡nea para poder asignarle el error.
      ELSE BEGIN
        CLEAR(lrLin);
        lrLin := prLinTMP;
        lrLin."No Importacion" := prCab.No;
        lrLin.Tipo             := lrLin.Tipo::"Precios habitacion";
        lrLin.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE _TestLineaTRF_PrecioHabitacion@1100253031(VAR prCab@1100253002 : Record 7009888);
    VAR
      lrlin@1100253003 : Record 7009889;
      lrHab@1100253004 : Record 7009889;
      lrTemp@1100253005 : Record 7009889;
    BEGIN
      // _TestLineaTRF_PrecioHabitacion.

      CLEAR(lrlin);
      lrlin.SETCURRENTKEY(Codigo, Tipo);
      lrlin.SETRANGE (Tipo            , lrlin.Tipo::"Precios habitacion");
      lrlin.SETRANGE ("No Importacion", prCab.No);
      IF lrlin.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrTemp);
          lrTemp.SETCURRENTKEY(Codigo, Tipo);
          lrTemp.SETRANGE (Codigo          , lrlin.Temporada);
          lrTemp.SETRANGE (Tipo            , lrTemp.Tipo::Temporada);
          lrTemp.SETRANGE ("No Importacion", prCab.No);
          lrTemp.SETRANGE (Temporada       , 'P');
          IF lrTemp.ISEMPTY THEN
            prCab.A¤adirError(lrlin."No Lin", STRSUBSTNO(Text007, lrlin.Temporada));

          // Comprueba que existe el codigo de habitaci¢n en la importaci¢n.
          IF lrlin.Codigo = '' THEN
            prCab.A¤adirError(lrlin."No Lin", STRSUBSTNO(Text002, 'Habitaci¢n'));

          //+001
          IF (lrlin.DOW <> 'XXXXXXX') THEN
            prCab.A¤adirError(lrlin."No Lin", Text018);
          //-001

        UNTIL lrlin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImportarCAT_Habitacion@1100253022(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOk : Boolean;
    BEGIN
      // _ImportarCAT_Habitacion.

      rvOk := TRUE;
      CASE pwNumCamp OF
        wCampCAT::ST_SUPPLIER_ID      : rvOk := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampCAT::CATEGORY_ID         : IF NOT EVALUATE(prLinTMP.Codigo     , prBuff.Text) THEN CLEAR(prLinTMP.Codigo);
        wCampCAT::PAM_IBE_DESCRIPTION : IF NOT EVALUATE(prLinTMP.Descripcion, prBuff.Text) THEN CLEAR(prLinTMP.Descripcion);
        wCampCAT::MIN_FULL_PAYERS     : IF NOT EVALUATE(prLinTMP."Cantidad 2"   , prBuff.Text) THEN CLEAR(prLinTMP."Cantidad 2");
      END;
    END;

    LOCAL PROCEDURE _InsertarCAT_Habitacion@1100253090(VAR prCab@1100253001 : Record 7009888;VAR prLinTMP@1100253000 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253002 : Record 7009889;
      lrPrec@1100253003 : Record 7009889;
      lwPrimero@1100253004 : Boolean;
    BEGIN
      // _InsertarCAT_Habitacion.

      // Para cada habitaci¢n x ocupaci¢n distinta que haya en los precios
      // insertamos un registro.
      CLEAR(lrPrec);
      lrPrec.SETCURRENTKEY(Codigo, Tipo);
      lrPrec.SETFILTER(Codigo          , prLinTMP.Codigo + '?'); // filtro con el caracter extra de ocupaci¢n.
      lrPrec.SETRANGE (Tipo            , lrPrec.Tipo::"Precios habitacion");
      lrPrec.SETRANGE ("No Importacion", prCab.No);
      IF lrPrec.FINDSET THEN BEGIN
        lwPrimero := TRUE;
        REPEAT
          CLEAR(lrLin);
          lrLin.SETCURRENTKEY(Codigo, Tipo);
          lrLin.SETRANGE (Codigo          , lrPrec.Codigo);
          lrLin.SETRANGE (Tipo            , lrLin.Tipo::Habitacion);
          lrLin.SETRANGE ("No Importacion", prCab.No);
          IF NOT lrLin.FINDFIRST THEN BEGIN
            CLEAR(lrLin);
            lrLin := prLinTMP;
            lrLin."No Importacion" := prCab.No;
            lrLin."No Lin"         := 0;
            lrLin.Tipo             := lrLin.Tipo::Habitacion;
            lrLin.Codigo           := lrPrec.Codigo;
            lrLin.Cantidad         := lrPrec."Cantidad 2";
            // a partir del 3 ocupante, se genera un suplemento de persona , siempre que el m¡nimo no sea 3 o m s.
            IF NOT lwPrimero AND (NOT(COPYSTR(lrPrec.Codigo, STRLEN(lrPrec.Codigo)) IN ['1','2'])) THEN
              lrLin."Genera Suplemento" := TRUE;
            lrLin.INSERT(TRUE);
          END;
          lwPrimero := FALSE;
        UNTIL lrPrec.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _TestLineaCAT_Habitacion@1100253021(VAR prCab@1100253002 : Record 7009888);
    VAR
      lrLin@1100253003 : Record 7009889;
      lrPrec@1100253004 : Record 7009889;
    BEGIN
      // _TestLineaCAT_Habitacion.

      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo, Tipo);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::Habitacion);
      lrLin.SETRANGE ("No Importacion", prCab.No);
      IF lrLin.FINDSET THEN BEGIN
        REPEAT
          IF lrLin.Codigo = '' THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, 'Habitaci¢n'))
          ELSE
            lrLin.BuscarConv(prCab.Touroperador);

        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImportarMAN_Comentarios@1100253026(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOk : Boolean;
    VAR
      lwCont@1100253004 : Integer;
    BEGIN
      // _ImportarMAN_Comentarios.

      rvOk := TRUE;
      // Se importan los comentarios separados por l¡neas all¡ donde no quepan enteros.
      CASE pwNumCamp OF
        wCampMAN::ST_SUPPLIER_ID          : rvOk := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampMAN::RELEASE_PERIOD_REMARK   ,
        wCampMAN::EXTRA_BED_REMARK        ,
        wCampMAN::FAMILY_PLAN_REMARK      ,
        wCampMAN::ARRIVAL_DEPARTURE_REMARK,
        wCampMAN::MINIMUM_STAY_REMARK     ,
        wCampMAN::SPECIAL_OFFER_REMARK    ,
        wCampMAN::AVAILABILITY_REMARK     ,
        wCampMAN::PRICE_REMARK            ,
        wCampMAN::EARLY_BIRD_REMARK       ,
        wCampMAN::ADDITIONAL_AGREEMENTS   ,
        wCampMAN::INTERNAL_REMARK         : BEGIN
          // cogemos el contador de la £ltima l¡nea insertada para el registro.
          lwCont := prLinTMP."No Lin";
          IF prBuff.FINDSET THEN BEGIN
            IF NOT(prBuff.Text IN ['',' ']) THEN BEGIN
              // A¤ado el t¡tulo del comentario en la primera l¡nea de los comentarios:
              wCampMAN := pwNumCamp;
              lwCont += 1;
              prLinTMP.INIT;
              prLinTMP."No Lin"    := lwCont;
              prLinTMP.Descripcion := FORMAT(wCampMAN) + ':';
              prLinTMP.Tipo        := prLinTMP.Tipo::Comentarios;
              prLinTMP.INSERT;
              REPEAT
                lwCont += 1;
                prLinTMP.INIT;
                prLinTMP."No Lin"    := lwCont;
                prLinTMP.Descripcion := prBuff.Text;
                prLinTMP.Tipo        := prLinTMP.Tipo::Comentarios;
                prLinTMP.INSERT;
              UNTIL prBuff.NEXT = 0;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE _InsertarMAN_Comentarios@1100253096(VAR prCab@1100253002 : Record 7009888;VAR prLinTMP@1100253001 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253000 : Record 7009889;
    BEGIN
      // _InsertarMAN_Comentarios.

      IF prLinTMP.FINDSET THEN BEGIN
        REPEAT
          lrLin := prLinTMP;
          lrLin."No Importacion" := prCab.No;
          lrLin."No Lin"         := 0;
          lrLin.INSERT(TRUE);
        UNTIL prLinTMP.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _TestLineaMAN_Comentarios@1100253025(VAR prCab@1100253002 : Record 7009888);
    BEGIN
      // _TestLineaMAN_Comentarios.

      // Nada a declarar.
    END;

    LOCAL PROCEDURE _ImportarAVB_Cupo@1100253028(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOk : Boolean;
    BEGIN
      // _ImportarAVB_Cupo.

      rvOk := TRUE;
      CASE pwNumCamp OF
        wCampAVB::ST_SUPPLIER_ID: rvOk := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampAVB::CATEGORY_ID   : IF NOT EVALUATE(prLinTMP.Codigo       , prBuff.Text) THEN CLEAR(prLinTMP.Codigo);
        wCampAVB::QUANTITY      : IF NOT EVALUATE(prLinTMP.Cantidad     , prBuff.Text) THEN CLEAR(prLinTMP.Cantidad);
        wCampAVB::DATE_FROM     : prLinTMP."Fecha Desde" := _GetFecha(prBuff.Text);
        wCampAVB::DATE_TO       : prLinTMP."Fecha Hasta" := _GetFecha(prBuff.Text);
        wCampAVB::ALLOTMENT_TYPE: prLinTMP."Tipo Oferta" := prBuff.Text;
        wCampAVB::RELEASE_DAYS  : IF NOT EVALUATE(prLinTMP."Cantidad 2" , prBuff.Text) THEN CLEAR(prLinTMP."Cantidad 2");
      END;
    END;

    LOCAL PROCEDURE _InsertarAVB_Cupo@1100253101(VAR prCab@1100253001 : Record 7009888;VAR prLinTMP@1100253000 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253003 : Record 7009889;
      lrHabs@1100253002 : Record 7009889;
    BEGIN
      // _InsertarAVB_Cupo.

      // Solo los registros con c¢digo QU tienen importancia. El resto se refieren a:
      // Free Sale (FS)
      // Request (RQ)
      // Not Available (NA).

      //. Ampliamos a los free sale y request

      IF (prLinTMP."Tipo Oferta" = 'QU') OR
         (prLinTMP."Tipo Oferta" = 'FS') OR
         (prLinTMP."Tipo Oferta" = 'RQ') THEN BEGIN
        // Por cada c¢digo b sico de habitaci¢n hay que insertar una l¡nea de cupo
        // con las habitaciones por ocupaci¢n
        CLEAR(lrHabs);
        lrHabs.SETCURRENTKEY(Codigo, Tipo);
        lrHabs.SETFILTER(Codigo          , prLinTMP.Codigo + '?');
        lrHabs.SETRANGE (Tipo            , lrHabs.Tipo::Habitacion);
        lrHabs.SETRANGE ("No Importacion", prCab.No);
        IF lrHabs.FINDSET THEN BEGIN
          REPEAT
            // Insertamos la l¡nea en real.

            CLEAR(lrLin);
            lrLin := prLinTMP;
            lrLin."No Importacion" := prCab.No;
            lrLin."No Lin"         := 0;
            lrLin.Tipo             := lrLin.Tipo::Cupo;
            lrLin.Codigo           := lrHabs.Codigo;
            // Las fechas pueden venir vacias
            // en ese caso se usan las del contrato.
            IF lrLin."Fecha Desde" = 0D THEN
              lrLin."Fecha Desde" := prCab."Fecha inicio contrato";
            IF lrLin."Fecha Hasta" = 0D THEN
              lrLin."Fecha Hasta" := prCab."Fecha fin contrato";
            lrLin.INSERT(TRUE);
          UNTIL lrHabs.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE _TestLineaAVB_Cupo@1100253027(VAR prCab@1100253002 : Record 7009888);
    VAR
      lrLin@1100253003 : Record 7009889;
      lrHabs@1100253004 : Record 7009889;
    BEGIN
      // _TestLineaAVB_Cupo.

      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo,Tipo);
      lrLin.SETRANGE ("No Importacion", prCab.No);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::Cupo);
      IF lrLin.FINDSET THEN BEGIN
        REPEAT

          IF lrLin.Codigo = '' THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, 'Habitaci¢n'))
          ELSE
            lrLin.BuscarConv(prCab.Touroperador);

          IF lrLin."Fecha Hasta" < lrLin."Fecha Desde" THEN
            prCab.A¤adirError(lrLin."No Lin", Text003);

        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImportarAVC_Release@1100253050(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOk : Boolean;
    BEGIN
      // _ImportarAVC_Release.

      rvOk := TRUE;
      CASE pwNumCamp OF
        wCampAVC::ST_SUPPLIER_ID : rvOk := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampAVC::SEASON_ID      : prLinTMP.Temporada := prBuff.Text;
        wCampAVC::CATEGORY_ID    : IF NOT EVALUATE(prLinTMP.Codigo       , prBuff.Text) THEN CLEAR(prLinTMP.Codigo);
        wCampAVC::RELEASE_DAYS   : IF NOT EVALUATE(prLinTMP.Cantidad , prBuff.Text) THEN CLEAR(prLinTMP.Cantidad);
      END;
    END;

    LOCAL PROCEDURE _InsertarAVC_Release@1100253046(VAR prCab@1100253001 : Record 7009888;VAR prLinTMP@1100253000 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253003 : Record 7009889;
      lrHabs@1100253002 : Record 7009889;
      lrTemp@1100253005 : Record 7009889;
      lrRelease@1100253006 : Record 7009889;
    BEGIN
      // _InsertarAVC_Release.

      CLEAR(lrTemp);
      lrTemp.SETCURRENTKEY(Codigo, Tipo);
      lrTemp.SETRANGE (Codigo          , prLinTMP.Temporada);
      lrTemp.SETRANGE (Tipo            , lrTemp.Tipo::Temporada);
      lrTemp.SETRANGE (Temporada       , 'P');
      lrTemp.SETRANGE ("No Importacion", prCab.No);
      IF lrTemp.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrHabs);
          lrHabs.SETCURRENTKEY(Codigo, Tipo);
          IF prLinTMP.Codigo <> '' THEN
            lrHabs.SETFILTER(Codigo          , prLinTMP.Codigo + '?');
          lrHabs.SETRANGE (Tipo            , lrHabs.Tipo::Habitacion);
          lrHabs.SETRANGE ("No Importacion", prCab.No);
          IF lrHabs.FINDSET THEN BEGIN
            REPEAT
              CLEAR(lrRelease);
              lrRelease := prLinTMP;
              lrRelease."No Importacion" := prCab.No;
              lrRelease."No Lin"         := 0;
              lrRelease.Tipo             := lrRelease.Tipo::Release;
              lrRelease.Codigo           := lrHabs.Codigo;
              lrRelease."Fecha Desde"    := lrTemp."Fecha Desde";
              lrRelease."Fecha Hasta"    := lrTemp."Fecha Hasta";
              lrRelease.INSERT(TRUE);
            UNTIL lrHabs.NEXT = 0;
          END;
        UNTIL lrTemp.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _TestLineaAVC_Release@1100253042(VAR prCab@1100253002 : Record 7009888);
    VAR
      lrLin@1100253003 : Record 7009889;
      lrHabs@1100253004 : Record 7009889;
      lrTemp@1100253000 : Record 7009889;
    BEGIN
      // _TestLineaAVC_Release.

      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo,Tipo);
      lrLin.SETRANGE ("No Importacion", prCab.No);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::Release);
      IF lrLin.FINDSET THEN BEGIN
        REPEAT

          CLEAR(lrTemp);
          lrTemp.SETCURRENTKEY(Codigo, Tipo);
          lrTemp.SETRANGE (Codigo          , lrLin.Temporada);
          lrTemp.SETRANGE (Tipo            , lrTemp.Tipo::Temporada);
          lrTemp.SETRANGE ("No Importacion", prCab.No);
          lrTemp.SETRANGE (Temporada       , 'P');
          IF lrTemp.ISEMPTY THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text007, lrLin.Temporada));

          IF lrLin.Codigo <> '' THEN
            lrLin.BuscarConv(prCab.Touroperador);

        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImportarAOX_PreciosRegimen@1100253030(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOk : Boolean;
    BEGIN
      // _ImportarAOX_PreciosRegimen.

      // Se entiende por los ejemplos, que los Addons que contiene '0' no est n indicados, en cambio los que contienen
      // '0.00' son regimenes a precio 0.

      rvOk := TRUE;
      CASE pwNumCamp OF
        wCampAOX::ST_SUPPLIER_ID: rvOk := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampAOX::AGE_CATEGORY          : prLinTMP."Rango Edad" := prBuff.Text;

        wCampAOX::ADDON_BREAKFAST_CONT  ,
        wCampAOX::ADDON_BREAKFAST_BUFF  ,
        wCampAOX::ADDON_BREAKFAST_OTHER ,
        wCampAOX::ADDON_HALF_BOARD      ,
        wCampAOX::ADDON_FULL_BOARD      ,
        wCampAOX::ADDON_ALL_INCLUSIVE   ,
        wCampAOX::ADDON_ROOM_ONLY       : BEGIN
          IF prBuff.Text <> '0' THEN BEGIN
            prLinTMP."No Lin" := prLinTMP."No Lin" + 1;
            wCampAOX := pwNumCamp;
            // El c¢digo corresponde al nombre del campo quitando el prefijo 'ADDON_'
            prLinTMP.Codigo   := COPYSTR(FORMAT(wCampAOX), STRPOS(FORMAT(wCampAOX), '_') + 1);
            // El importe parece venir con los importes separados por puntos, se convierten a comas.
            IF NOT EVALUATE(prLinTMP.Importe, prBuff.Text) THEN CLEAR(prLinTMP.Importe);
            prLinTMP.INSERT;
          END;
        END;

      END;
    END;

    LOCAL PROCEDURE _InsertarAOX_PreciosRegimen@1100253107(VAR prCab@1100253001 : Record 7009888;VAR prLinTMP@1100253000 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253002 : Record 7009889;
    BEGIN
      // _InsertarAOX_PreciosRegimen.

      IF prLinTMP.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrLin);
          lrLin := prLinTMP;
          lrLin."No Importacion" := prCab.No;
          lrLin."No Lin"         := 0;
          lrLin.Tipo             := lrLin.Tipo::"Precios regimen";
          lrLin.INSERT(TRUE);
        UNTIL prLinTMP.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _TestLineaAOX_PreciosRegimen@1100253029(VAR prCab@1100253002 : Record 7009888);
    VAR
      lrLin@1100253003 : Record 7009889;
      lrLin2@1100253004 : Record 7009889;
    BEGIN
      // _TestLineaAOX_PreciosRegimen.

      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo, Tipo);
      lrLin.SETRANGE ("No Importacion", prCab.No);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::"Precios regimen");
      IF lrLin.FINDSET THEN BEGIN
        REPEAT
          // Busca que el rango de edades indicado en los precios de rgimen existan en la importaci¢n.
          CLEAR(lrLin2);
          lrLin2.SETCURRENTKEY(Codigo, Tipo);
          lrLin2.SETRANGE (Codigo          , lrLin."Rango Edad");
          lrLin2.SETRANGE (Tipo            , lrLin2.Tipo::Edades);
          lrLin2.SETRANGE ("No Importacion", prCab.No);
          IF NOT lrLin2.FINDFIRST THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text006, lrLin2."Rango Edad"));

          // Se busca la conversi¢n para el regimen y TTOO.
          lrLin.BuscarConv(prCab.Touroperador);
        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImportarAGR_SuplPersona@1100253034(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOk : Boolean;
    BEGIN
      // _ImportarAGR_SuplPersona.

      rvOk := TRUE;
      CASE pwNumCamp OF
        wCampAGR::ST_SUPPLIER_ID: rvOk := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        // Se reunen los dos c¢digos de suplemento en uno solo.
        // En los ejemplos solo se ha encontrado C y A que traducimos como CHILD y AMOUNT.
        wCampAGR::REDUCTION_TYPE: prLinTMP."Tipo Precio" := prBuff.Text;
        wCampAGR::REDUCTION_MODE: prLinTMP."Tipo Precio" := prLinTMP."Tipo Precio" + prBuff.Text;
        wCampAGR::CATEGORY_ID   : prLinTMP.Codigo        := prBuff.Text;
        wCampAGR::AGE_CATEGORY  : prLinTMP."Rango Edad"  := prBuff.Text;
        wCampAGR::AMOUNT        : IF NOT EVALUATE(prLinTMP.Importe, prBuff.Text) THEN CLEAR(prLinTMP.Importe);
        wCampAGR::SEASON_NAME   : prLinTMP.Temporada     := prBuff.Text;
      END;
    END;

    LOCAL PROCEDURE _InsertarAGR_SuplPersona@1100253110(VAR prCab@1100253001 : Record 7009888;VAR prLinTMP@1100253000 : TEMPORARY Record 7009889);
    VAR
      lrHab@1100253002 : Record 7009889;
      lrLin@1100253003 : Record 7009889;
      lrEdad@1100253004 : Record 7009889;
      lrTemp@1100253005 : Record 7009889;
    BEGIN
      // _InsertarAGR_SuplPersona.
      //:

      CLEAR(lrHab);
      lrHab.SETCURRENTKEY(Codigo, Tipo);
      lrHab.SETRANGE ("No Importacion", prCab.No);
      lrHab.SETFILTER(Codigo          , prLinTMP.Codigo + '?');
      lrHab.SETRANGE (Tipo            , lrHab.Tipo::Habitacion);
      IF lrHab.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrLin);
          lrLin := prLinTMP;
          lrLin."No Importacion" := prCab.No;
          lrLin.Tipo   := lrLin.Tipo::"Suplementos persona";
          lrLin.Codigo := lrHab.Codigo;
          // Indica el n§ de personas de pago m¡nimas para la habitaci¢n
          //
          lrLin.Cantidad := lrHab."Cantidad 2";
          lrLin.INSERT(TRUE);
        UNTIL lrHab.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _TestLineaAGR_SuplPersona@1100253033(VAR prCab@1100253002 : Record 7009888);
    VAR
      lrLin@1100253003 : Record 7009889;
      lrHab@1100253005 : Record 7009889;
      lrTemp@1100253006 : Record 7009889;
      lrEdad@1100253007 : Record 7009889;
    BEGIN
      // _TestLineaAGR_SuplPersona.

      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo, Tipo);
      lrLin.SETRANGE ("No Importacion", prCab.No);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::"Suplementos persona");
      IF lrLin.FINDSET THEN BEGIN
        REPEAT
          IF lrLin.Codigo = '' THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, 'Habitaci¢n'))
          ELSE BEGIN
            CLEAR(lrHab);
            lrHab.SETCURRENTKEY(Codigo, Tipo);
            lrHab.SETRANGE (Codigo          , lrLin.Codigo);
            lrHab.SETRANGE (Tipo            , lrHab.Tipo::Habitacion);
            lrHab.SETRANGE ("No Importacion", prCab.No);
            IF NOT lrHab.FINDFIRST THEN
              prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text008, lrLin.Codigo));
          END;

          IF lrLin.Temporada = '' THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, lrLin.FIELDCAPTION(Temporada)))
          ELSE BEGIN
            CLEAR(lrTemp);
            lrTemp.SETCURRENTKEY(Codigo, Tipo);
            lrTemp.SETRANGE (Codigo          , lrLin.Temporada);
            lrTemp.SETRANGE (Tipo            , lrTemp.Tipo::Temporada);
            lrTemp.SETRANGE (Temporada       , 'P');
            lrTemp.SETRANGE ("No Importacion", prCab.No);
            IF NOT lrTemp.FINDFIRST THEN
              prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text007, lrLin.Temporada));
          END;

          IF lrLin."Rango Edad" = '' THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, lrLin.FIELDCAPTION("Rango Edad")))
          ELSE BEGIN
            CLEAR(lrEdad);
            lrEdad.SETCURRENTKEY(Codigo, Tipo);
            lrEdad.SETRANGE (Codigo          , lrLin."Rango Edad");
            lrEdad.SETRANGE (Tipo            , lrEdad.Tipo::Edades);
            lrEdad.SETRANGE ("No Importacion", prCab.No);
            IF NOT lrEdad.FINDFIRST THEN
              prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text006, lrLin."Rango Edad"));
          END;

        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImportarSPO_OfertasPrecio@1100253036(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOk : Boolean;
    BEGIN
      // _ImportarSPO_OfertasPrecio.

      rvOk := TRUE;
      CASE pwNumCamp OF
        wCampSPO::ST_SUPPLIER_ID      : rvOk := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampSPO::DATE_FROM           : prLinTMP."Fecha Desde" := _GetFecha(prBuff.Text);
        wCampSPO::DATE_TO             : prLinTMP."Fecha Hasta" := _GetFecha(prBuff.Text);
        wCampSPO::NUMBER_OF_DAYS_STAY : IF NOT EVALUATE(prLinTMP.Cantidad     , prBuff.Text) THEN CLEAR(prLinTMP.Cantidad);
        wCampSPO::NUMBER_OF_DAYS_PAY  : IF NOT EVALUATE(prLinTMP."Cantidad 2" , prBuff.Text) THEN CLEAR(prLinTMP."Cantidad 2");
        wCampSPO::REDUCTION_TYPE      : prLinTMP."Tipo Oferta" := prBuff.Text;
        wCampSPO::AMOUNT              : IF NOT EVALUATE(prLinTMP.Importe      , prBuff.Text) THEN CLEAR(prLinTMP.Importe);
      END;
    END;

    LOCAL PROCEDURE _InsertarSPO_OfertasPrecio@1100253126(VAR prCab@1100253002 : Record 7009888;VAR prLinTMP@1100253001 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253003 : Record 7009889;
    BEGIN
      // _InsertarSPO_OfertasPrecio.

      lrLin := prLinTMP;
      lrLin."No Importacion" := prCab.No;
      lrLin.Tipo  := lrLin.Tipo::"Ofertas precio";
      lrLin.INSERT(TRUE);
    END;

    LOCAL PROCEDURE _TestLineaSPO_OfertasPrecio@1100253035(VAR prCab@1100253002 : Record 7009888);
    VAR
      lrLin@1100253003 : Record 7009889;
    BEGIN
      // _TestLineaSPO_OfertasPrecio.

      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo, Tipo);
      lrLin.SETRANGE ("No Importacion", prCab.No);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::"Ofertas precio");
      IF lrLin.FINDSET THEN BEGIN
        REPEAT
          IF (lrLin."Fecha Desde" = 0D) THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, lrLin.FIELDCAPTION("Fecha Desde")));

          IF (lrLin."Fecha Hasta" = 0D) THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, lrLin.FIELDCAPTION("Fecha Hasta")));

          IF (lrLin.Cantidad = 0) THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, 'D¡as estancia'));

          IF lrLin."Tipo Oferta" = '%' THEN BEGIN
            IF lrLin.Importe = 0 THEN
              prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, 'Importe'));
          END
          ELSE BEGIN
            IF (lrLin."Cantidad 2" = 0) THEN
              prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, 'D¡as pago'));
          END;

          IF lrLin."Fecha Hasta" < lrLin."Fecha Desde" THEN
            prCab.A¤adirError(lrLin."No Lin", Text003);

          IF lrLin.Cantidad <= lrLin."Cantidad 2" THEN
            prCab.A¤adirError(lrLin."No Lin", Text009);

        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImportarEBD_EarlyBook@1100253038(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOk : Boolean;
    BEGIN
      // _ImportarEBD_EarlyBook.

      rvOk := TRUE;
      CASE pwNumCamp OF
        wCampEBD::ST_SUPPLIER_ID        : rvOk := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampEBD::BOOK_DATE_TO          : prLinTMP."Fecha Hasta" := _GetFecha(prBuff.Text);
        wCampEBD::SEASON_ID             : prLinTMP.Temporada := prBuff.Text; // Campo nuevo en v1.3.
        wCampEBD::AMOUNT                : IF NOT EVALUATE(prLinTMP.Importe      , prBuff.Text) THEN
                                            CLEAR(prLinTMP.Importe);
        wCampEBD::DAYS_BEF_TRAVEL       : IF NOT EVALUATE(prLinTMP.Cantidad     , prBuff.Text) THEN CLEAR(prLinTMP.Cantidad);
        wCampEBD::MIN_DAYS_STAY         : IF NOT EVALUATE(prLinTMP."Cantidad 2" , prBuff.Text) THEN CLEAR(prLinTMP."Cantidad 2");
        wCampEBD::REDUCTION_MODE        : prLinTMP."Tipo Oferta" := prBuff.Text;
        wCampEBD::PERSON_UNIT_INDICATOR : prLinTMP."Tipo Precio" := prBuff.Text;
        wCampEBD::CATEGORY_RESTRICTION  : prLinTMP.Descripcion   := DELCHR(prBuff.Text,'<>', ' '); // Lista habitaciones
      END;
    END;

    LOCAL PROCEDURE _InsertarEBD_EarlyBook@1100253133(VAR prCab@1100253002 : Record 7009888;VAR prLinTMP@1100253001 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253003 : Record 7009889;
      lwLin@1100253004 : Text[250];
      lwToken@1100253005 : Text[250];
      lrHabs@1100253006 : Record 7009889;
    BEGIN
      // _InsertarEBD_EarlyBook.

      IF DELCHR(prLinTMP.Descripcion, '<>', ' ') <> '' THEN BEGIN
        lwLin := prLinTMP.Descripcion;
        WHILE _GetToken(lwLin, lwToken, ';') DO BEGIN
          CLEAR(lrHabs);
          lrHabs.SETCURRENTKEY(Codigo, Tipo);
          lrHabs.SETRANGE ("No Importacion", No);
          lrHabs.SETRANGE (Tipo            , lrHabs.Tipo::Habitacion);
          lrHabs.SETFILTER(Codigo          , lwToken + '?');
          IF lrHabs.FINDSET THEN BEGIN
            REPEAT
              CLEAR(lrLin);
              lrLin := prLinTMP;
              lrLin."No Importacion" := prCab.No;
              lrLin.Tipo             := lrLin.Tipo::"Early Booking";
              lrLin.Codigo           := lrHabs.Codigo;
              IF lrLin."Fecha Hasta" = 0D THEN
                lrLin."Fecha Hasta" := prCab."Fecha fin contrato";
              lrLin.INSERT(TRUE);
            UNTIL lrHabs.NEXT = 0;
          END;
        END;
      END
      ELSE BEGIN
        CLEAR(lrLin);
        lrLin := prLinTMP;
        lrLin."No Importacion" := prCab.No;
        lrLin.Tipo  := lrLin.Tipo::"Early Booking";
        IF lrLin."Fecha Hasta" = 0D THEN
          lrLin."Fecha Hasta" := prCab."Fecha fin contrato";
        lrLin.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE _TestLineaEBD_EarlyBook@1100253037(VAR prCab@1100253002 : Record 7009888);
    VAR
      lrLin@1100253003 : Record 7009889;
      lwLin@1100253004 : Text[250];
      lwToken@1100253005 : Text[250];
      lrHabs@1100253006 : Record 7009889;
    BEGIN
      // _TestLineaEBD_EarlyBook.

      // No se controla la fecha hasta. En caso de no existir se usa la fecha
      // de fin de contrato.
      //CLEAR(lrLin);
      //lrLin.SETRANGE ("No Importacion", prCab.No);
      //lrLin.SETRANGE (Tipo            , lrLin.Tipo::"Early Booking");
      //IF lrLin.FINDSET THEN BEGIN
      //  REPEAT
      //    IF (lrLin."Fecha Hasta" = 0D) THEN
      //      prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, 'Fecha hasta Booking'));
      //  UNTIL lrLin.NEXT = 0;
      //END;
    END;

    LOCAL PROCEDURE _ImportarEXT_Extras@1100253040(VAR prCab@1100253003 : Record 7009888;VAR prLinTMP@1100253002 : TEMPORARY Record 7009889;VAR prBuff@1100253001 : TEMPORARY Record 7009892;pwNumCamp@1100253000 : Integer) rvOk : Boolean;
    BEGIN
      // _ImportarEXT_Extras.

      rvOk := TRUE;
      CASE pwNumCamp OF
        wCampEXT::ST_SUPPLIER_ID: rvOk := prCab.Descripcion = prCab."Nombre Fichero" + '_' + prBuff.Text;
        wCampEXT::X_CHARGE_TYPE : prLinTMP.Codigo       := prBuff.Text;
        wCampEXT::CLEARING_UNIT : prLinTMP."Tipo Oferta" := prBuff.Text;
        wCampEXT::PRICE         : IF NOT EVALUATE(prLinTMP.Importe, prBuff.Text) THEN CLEAR(prLinTMP.Importe);
      END;
    END;

    LOCAL PROCEDURE _InsertarEXT_Extras@1100253139(VAR prCab@1100253002 : Record 7009888;VAR prLinTMP@1100253001 : TEMPORARY Record 7009889);
    VAR
      lrLin@1100253003 : Record 7009889;
    BEGIN
      // _InsertarExt_Extras.

      lrLin := prLinTMP;
      lrLin."No Importacion" := prCab.No;
      lrLin.Tipo  := lrLin.Tipo::Extras;
      lrLin.INSERT(TRUE);
    END;

    LOCAL PROCEDURE _TestLineaEXT_Extras@1100253039(VAR prCab@1100253002 : Record 7009888);
    VAR
      lrLin@1100253003 : Record 7009889;
    BEGIN
      // _TestLineaExt_Extras.

      CLEAR(lrLin);
      lrLin.SETCURRENTKEY(Codigo, Tipo);
      lrLin.SETRANGE ("No Importacion", prCab.No);
      lrLin.SETRANGE (Tipo            , lrLin.Tipo::Extras);
      IF lrLin.FINDSET THEN BEGIN
        REPEAT
          IF (lrLin.Codigo = '') THEN
            prCab.A¤adirError(lrLin."No Lin", STRSUBSTNO(Text002, lrLin.FIELDCAPTION(Codigo)))
          ELSE
            lrLin.BuscarConv(prCab.Touroperador);
        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _GetFecha@1100253012(VAR pwText@1100253000 : Text[250]) rvFecha : Date;
    BEGIN
      // _GetFecha

      IF NOT EVALUATE(rvFecha, COPYSTR(pwText, 9, 2) + '/' +
                               COPYSTR(pwText, 6, 2) + '/' +
                               COPYSTR(pwText, 1, 4))
      THEN
        EXIT(0D);
    END;

    LOCAL PROCEDURE _GetToken@1100253045(VAR pwLinea@1100253000 : Text[250];VAR pwToken@1100253001 : Text[250];pwSep@1100253002 : Text[30]) rvOk : Boolean;
    VAR
      lwPos@1100253003 : Integer;
    BEGIN
      // _GetToken.
      //: Devuelve el primer token de la l¡nea indicada que viene separada por el separador indicado.
      //: @pwLinea: L¡nea de la que se extrae el token, este se borra de la l¡nea.
      //: @pwToken: Token extra¡do de la l¡nea.
      //: @pwSep: Separador de tokens.
      //: @rvOk: Devuelve TRUE mientras se encuentren Tokens.

      CLEAR(pwToken);
      rvOk := (STRLEN(pwLinea) <> 0);
      IF rvOk THEN BEGIN
        lwPos := STRPOS(pwLinea, pwSep);
        IF lwPos <> 0 THEN BEGIN
          pwToken := COPYSTR(pwLinea, 1        , lwPos - 1);
          pwLinea := COPYSTR(pwLinea, lwPos + 1);
        END
        ELSE BEGIN
          pwToken := pwLinea;
          pwLinea := '';
        END;
      END;
    END;

    LOCAL PROCEDURE _InsertarContrato@1100253016(VAR prContr@1100253000 : Record 7009723);
    VAR
      lrParInt2@1100253001 : Record 7009891;
      lrParInt@1100253002 : Record 7010081;
      lrHotel@1100253003 : Record 7009724;
      lrVendor@1100253004 : Record 23;
    BEGIN
      // _InsertarContrato.

      CLEAR(lrParInt2);
      lrParInt2.FINDFIRST;

      CLEAR(prContr);
      prContr."Fecha firma contrato"      := "Fecha inicio contrato";
      prContr."Fecha inicio contrato"     := "Fecha inicio contrato";
      prContr."Fecha final contrato"      := "Fecha fin contrato";
      prContr.TourOperador                := BuscarConv(FIELDNO(Touroperador));
      prContr.Hotel                       := BuscarConv(FIELDNO(Hotel));
      prContr."Gr. Registro IVA Producto" := lrParInt2."Gr. Reg. IVA Producto MRW";
      prContr."C¢d. divisa"               := BuscarConv(FIELDNO(Divisa));
      prContr."Minimo estancias"          := "Minimo Estancias";

      IF lrHotel.GET(prContr.Hotel) THEN BEGIN
        IF lrVendor.GET(lrHotel."Proveedor Intermediacion") THEN BEGIN
          prContr."Cod. Terminos Pago" := lrVendor."Payment Terms Code";
          prContr."Cod. Formas Pago"   := lrVendor."Payment Method Code";
        END;
      END;

      prContr.INSERT(TRUE);
    END;

    LOCAL PROCEDURE _InsertarConvHab@1100253017(VAR prContr@1100253000 : Record 7009723);
    VAR
      lrLinImp@1100253001 : Record 7009889;
      lrConvHab@1100253002 : Record 7009731;
    BEGIN
      // _InsertarConvHab.

      // Se insertan las conversiones de habitaci¢n desde las l¡neas de importaci¢n
      // de tipo Habitaci¢n.
      CLEAR(lrLinImp);
      lrLinImp.SETCURRENTKEY(Codigo, Tipo);
      lrLinImp.SETRANGE ("No Importacion"   , No);
      lrLinImp.SETRANGE (Tipo               , lrLinImp.Tipo::Habitacion);
      lrLinImp.SETRANGE ("Genera Suplemento", FALSE);
      IF lrLinImp.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrConvHab);
          lrConvHab.Delegacion          := prContr.Delegacion;
          lrConvHab."N§ Contrato"       := prContr."N§ Contrato compra";
          lrConvHab."Tipo contrato"     := lrConvHab."Tipo contrato"::Compra;
          lrConvHab."Habitacion TO"     := lrLinImp.BuscarConv(Touroperador);
          lrConvHab."Habitacion cupo"   := lrLinImp.BuscarConv(Touroperador);
          lrConvHab."Codigo importacion":= lrLinImp.Codigo;
          lrConvHab."Habitacion basica" := COPYSTR(lrConvHab."Habitacion cupo", 1, 2);
          lrConvHab.Descripcion         := lrLinImp.Descripcion;
          IF lrLinImp.Cantidad > 2 THEN
            lrConvHab."Minimo adultos" := 2
          ELSE
            lrConvHab."Minimo adultos" := lrLinImp.Cantidad;
          lrConvHab."Ocupacion Maxima"   := lrLinImp.Cantidad;
          lrConvHab.INSERT(TRUE);
        UNTIL lrLinImp.NEXT = 0;
      END;

      //. Las habitacion que generan suplementos se tienen que crear en conversiones pero siempre contra la
      //. correspondiente habitacion terminada en "2"

      CLEAR(lrLinImp);
      lrLinImp.SETCURRENTKEY(Codigo, Tipo);
      lrLinImp.SETRANGE ("No Importacion"   , No);
      lrLinImp.SETRANGE (Tipo               , lrLinImp.Tipo::Habitacion);
      lrLinImp.SETRANGE ("Genera Suplemento", TRUE);
      IF lrLinImp.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrConvHab);
          lrConvHab.Delegacion          := prContr.Delegacion;
          lrConvHab."N§ Contrato"       := prContr."N§ Contrato compra";
          lrConvHab."Tipo contrato"     := lrConvHab."Tipo contrato"::Compra;
          lrConvHab."Habitacion TO"     := lrLinImp.BuscarConv(Touroperador);

          //. Procesamos el codigo de la habitacion cupo

          lrConvHab."Habitacion cupo"   := _ProcesarCodigoHabitacion(lrLinImp.BuscarConv(Touroperador));

          lrConvHab."Codigo importacion":= lrLinImp.Codigo;
          lrConvHab."Habitacion basica" := COPYSTR(lrConvHab."Habitacion cupo", 1, 2);
          lrConvHab.Descripcion         := lrLinImp.Descripcion;

          IF lrLinImp.Cantidad > 2 THEN
            lrConvHab."Minimo adultos" := 2
          ELSE
            lrConvHab."Minimo adultos" := lrLinImp.Cantidad;

          lrConvHab."Ocupacion Maxima"   := lrLinImp.Cantidad;
          lrConvHab.INSERT(TRUE);
        UNTIL lrLinImp.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _InsertarCupos@1100253013(VAR prContr@1100253000 : Record 7009723);
    VAR
      lrLinImp@1100253002 : Record 7009889;
      lrRelease@1100253004 : Record 7009889;
      lrCupo@1100253001 : Record 7009739;
      lrConvHab@1100253003 : Record 7009731;
      lrConvCont@1100253005 : Record 7009887;
    BEGIN
      // _InsertarCupos.

      CLEAR(lrConvHab);
      lrConvHab.SETRANGE (Delegacion     , prContr.Delegacion);
      lrConvHab.SETRANGE ("N§ Contrato"  , prContr."N§ Contrato compra");
      lrConvHab.SETRANGE ("Tipo contrato", lrConvHab."Tipo contrato"::Compra);
      IF lrConvHab.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrLinImp);
          lrLinImp.SETCURRENTKEY(Codigo, Tipo);
          lrLinImp.SETRANGE ("No Importacion", No);
          lrLinImp.SETRANGE (Tipo            , lrLinImp.Tipo::Cupo);
          lrLinImp.SETRANGE (Codigo          , lrConvHab."Codigo importacion");
          IF lrLinImp.FINDSET THEN BEGIN
            REPEAT
              CLEAR(lrRelease);
              lrRelease.SETCURRENTKEY(Codigo, Tipo);
              lrRelease.SETRANGE ("No Importacion", No);
              lrRelease.SETRANGE (Tipo            , lrRelease.Tipo::Release);
              lrRelease.SETRANGE (Codigo          , lrLinImp.Codigo);
              IF lrRelease.FINDSET THEN BEGIN
                REPEAT
                  //. Podemos tener varios codigos de habitacion TO que conviertan en un codigo interno

                  lrCupo.RESET;
                  lrCupo.SETRANGE(Delegacion          , prContr.Delegacion);
                  lrCupo.SETRANGE("N§ Contrato compra", prContr."N§ Contrato compra");
                  lrCupo.SETRANGE("Habitacion cupo"   , lrConvHab."Habitacion cupo");
                  lrCupo.SETRANGE("Fecha desde"       , lrRelease."Fecha Desde");
                  lrCupo.SETRANGE("Fecha hasta"       , lrRelease."Fecha Hasta");
                  IF NOT lrCupo.FINDFIRST THEN BEGIN
                    CLEAR(lrCupo);
                    lrCupo.Delegacion           := prContr.Delegacion;
                    lrCupo."N§ Contrato compra" := prContr."N§ Contrato compra";
                    lrCupo."Habitacion cupo"    := lrConvHab."Habitacion cupo";
                    lrCupo."Fecha desde"        := lrRelease."Fecha Desde";
                    lrCupo."Fecha hasta"        := lrRelease."Fecha Hasta";

                    //. Solo ponemos cantidad a las habitaciones que se han marcado en la conversion como grupo

                    lrConvCont.SETRANGE(Tipo    , lrConvCont.Tipo::"Habitacion cupo");
                    lrConvCont.SETRANGE("Id Cab", lrLinImp."No Importacion");
                    lrConvCont.SETRANGE(Valor   , lrLinImp.Codigo);
                    lrConvCont.FINDFIRST;

                    IF lrConvCont."Codigo Navision" = lrConvCont."Habitacion grupo Navision" THEN
                      lrCupo.Cupo := lrLinImp.Cantidad
                    ELSE
                      lrCupo.Cupo := 0;

                    lrCupo.Release              := lrRelease.Cantidad;
                    lrCupo."Pax Legal"          := lrConvHab."Minimo adultos";
                    lrCupo."Pax ocupacion"      := lrConvHab."Ocupacion Maxima";
                    lrCupo."Touroperador Venta" := prContr.TourOperador;
                    lrCupo.INSERT(TRUE);
                  END
                  ELSE BEGIN
                    //. Solo ponemos cantidad a las habitaciones que se han marcado en la conversion como grupo

                    lrConvCont.SETRANGE(Tipo    , lrConvCont.Tipo::"Habitacion cupo");
                    lrConvCont.SETRANGE("Id Cab", lrLinImp."No Importacion");
                    lrConvCont.SETRANGE(Valor   , lrLinImp.Codigo);
                    lrConvCont.FINDFIRST;

                    IF lrConvCont."Codigo Navision" = lrConvCont."Habitacion grupo Navision" THEN
                      lrCupo.Cupo += lrLinImp.Cantidad;

                    lrCupo.MODIFY;
                  END;
                UNTIL lrRelease.NEXT = 0;
              END;
            UNTIL lrLinImp.NEXT = 0;
          END
          // En caso de no encontrarse cupo se a¤ade una l¡nea con cupo 0.
          ELSE BEGIN
            CLEAR(lrRelease);
            lrRelease.SETCURRENTKEY(Codigo, Tipo);
            lrRelease.SETRANGE ("No Importacion", No);
            lrRelease.SETRANGE (Tipo            , lrRelease.Tipo::Release);
            lrRelease.SETRANGE (Codigo          , lrConvHab."Codigo importacion");
            IF lrRelease.FINDSET THEN BEGIN
              REPEAT
                CLEAR(lrCupo);
                lrCupo.Delegacion           := prContr.Delegacion;
                lrCupo."N§ Contrato compra" := prContr."N§ Contrato compra";
                lrCupo."Habitacion cupo"    := lrConvHab."Habitacion cupo";
                lrCupo."Fecha desde"        := lrRelease."Fecha Desde";
                lrCupo."Fecha hasta"        := lrRelease."Fecha Hasta";
                lrCupo.Cupo                 := 0;
                lrCupo.Release              := lrRelease.Cantidad;
                lrCupo."Pax Legal"          := lrConvHab."Minimo adultos";
                lrCupo."Pax ocupacion"      := lrConvHab."Ocupacion Maxima";
                lrCupo."Touroperador Venta" := prContr.TourOperador;
                lrCupo.INSERT(TRUE);
              UNTIL lrRelease.NEXT = 0;
            END;
          END;
        UNTIL lrConvHab.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _InsertarComentarios@1100253014(VAR prContr@1100253000 : Record 7009723);
    VAR
      lrLinImp@1100253001 : Record 7009889;
      lrCom@1100253002 : Record 7009784;
      lwNumLin@1100253003 : Integer;
    BEGIN
      // _InsertarComentarios.

      CLEAR(lrLinImp);
      lrLinImp.SETCURRENTKEY(Codigo, Tipo);
      lrLinImp.SETRANGE ("No Importacion", No);
      lrLinImp.SETRANGE (Tipo            , lrLinImp.Tipo::Comentarios);
      IF lrLinImp.FINDSET THEN BEGIN
        REPEAT

          lwNumLin += 10000;

          CLEAR(lrCom);
          lrCom.Delegacion      := prContr.Delegacion;
          lrCom."N§ Contrato"   := prContr."N§ Contrato compra";
          lrCom."Tipo Contrato" := lrCom."Tipo Contrato"::"C Hotel";
          lrCom."N§ Linea"      := lwNumLin;
          lrCom.Comentario           := lrLinImp.Descripcion;
          lrCom.INSERT(TRUE);

        UNTIL lrLinImp.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _InsertarPreciosHab@1100253015(VAR prContr@1100253000 : Record 7009723);
    VAR
      lrLinImp@1100253001 : Record 7009889;
      lrPrecio@1100253002 : Record 7009738;
      lrPrecioBase@1100217000 : Record 7009738;
      lrConvHab@1100253003 : Record 7009731;
      lrPrecAnt@1100253004 : Record 7009889;
      lrHab@1100253009 : Record 7009889;
      lrHab2@1100253010 : Record 7009889;
      lwInt@1100253005 : Integer;
      lwCodHab@1100253006 : Code[20];
      lwImp@1100253007 : Decimal;
      lrParPer@1100253008 : Record 7009701;
    BEGIN
      // _InsertarPreciosHab.

      CLEAR(lrParPer);
      lrParPer.FINDFIRST;

      CLEAR(lrLinImp);
      lrLinImp.SETCURRENTKEY(Codigo, Tipo);
      lrLinImp.SETRANGE ("No Importacion", No);
      lrLinImp.SETRANGE (Tipo            , lrLinImp.Tipo::"Precios habitacion");
      IF lrLinImp.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrHab);
          lrHab.SETCURRENTKEY(Codigo, Tipo);
          lrHab.SETRANGE ("No Importacion", No);
          lrHab.SETRANGE (Tipo            , lrHab.Tipo::Habitacion);
          lrHab.SETRANGE (Codigo          , lrLinImp.Codigo);
          IF lrHab.FINDFIRST THEN BEGIN
            CASE lrHab."Genera Suplemento" OF
              // El precio se inserta como precio de habitaci¢n.
              FALSE : BEGIN
                // Busca la conversi¢n de habitaci¢n.
                CLEAR(lrConvHab);
                lrConvHab.SETRANGE (Delegacion     , prContr.Delegacion);
                lrConvHab.SETRANGE ("N§ Contrato"  , prContr."N§ Contrato compra");
                lrConvHab.SETRANGE ("Tipo contrato", lrConvHab."Tipo contrato"::Compra);
                lrConvHab.SETRANGE ("Codigo importacion", lrLinImp.Codigo);
                IF lrConvHab.FINDFIRST THEN BEGIN
                  CLEAR(lrPrecio);
                  lrPrecio.Delegacion      := prContr.Delegacion;
                  lrPrecio."N§ Contrato"   := prContr."N§ Contrato compra";
                  lrPrecio."Codigo Precio" := lrPrecio."Codigo Precio"::Habitacion;
                  lrPrecio."Tipo Precio"   := lrPrecio."Tipo Precio"::Pax;
                  lrPrecio.Codigo          := lrConvHab."Habitacion cupo";
                  lrPrecio."Fecha desde"   := lrLinImp."Fecha Desde";
                  lrPrecio."Fecha hasta"   := lrLinImp."Fecha Hasta";
                  lrPrecio.Importe         := lrLinImp.Importe;
                  lrPrecio.INSERT(TRUE);
                END;
              END;
              // El precio se inserta como suplemento de adulto.
              TRUE : BEGIN
                IF EVALUATE(lwInt, COPYSTR(lrLinImp.Codigo, STRLEN(lrLinImp.Codigo))) THEN BEGIN
                  lwInt -= 1;
                  lwCodHab := COPYSTR(lrLinImp.Codigo, 1, STRLEN(lrLinImp.Codigo) - 1) + FORMAT(lwInt);
                  CLEAR(lrPrecAnt);
                  lrPrecAnt.SETCURRENTKEY(Codigo, Tipo);
                  lrPrecAnt.SETRANGE ("No Importacion", No);
                  lrPrecAnt.SETRANGE (Tipo            , lrPrecAnt.Tipo::"Precios habitacion");
                  lrPrecAnt.SETRANGE (Codigo          , lwCodHab);
                  lrPrecAnt.SETRANGE ("Fecha Desde"   , lrLinImp."Fecha Desde");
                  lrPrecAnt.SETRANGE ("Fecha Hasta"   , lrLinImp."Fecha Hasta");
                  IF lrPrecAnt.FINDFIRST THEN BEGIN
                    //. Suplementos de tercer adulto son por precio no por porcentaje
                    //lwImp := lrLinImp.Importe * (lwInt + 1) - lrPrecAnt.Importe * lwInt;

                    CLEAR(lrHab2);
                    lrHab2.SETCURRENTKEY(Codigo, Tipo);
                    lrHab2.SETRANGE ("No Importacion"   , No);
                    lrHab2.SETRANGE (Tipo               , lrHab2.Tipo::Habitacion);
                    lrHab2.SETFILTER(Codigo             , COPYSTR(lwCodHab, 1, STRLEN(lwCodHab) - 1) + '?');
                    lrHab2.SETRANGE ("Genera Suplemento", FALSE);
                    IF lrHab2.FINDLAST THEN BEGIN
                      CLEAR(lrConvHab);
                      lrConvHab.SETRANGE (Delegacion     , prContr.Delegacion);
                      lrConvHab.SETRANGE ("N§ Contrato"  , prContr."N§ Contrato compra");
                      lrConvHab.SETRANGE ("Tipo contrato", lrConvHab."Tipo contrato"::Compra);
                      lrConvHab.SETRANGE ("Codigo importacion", lrHab2.Codigo);
                      IF lrConvHab.FINDFIRST THEN BEGIN
                        //-$003 Buscamos el precio de la habitacion sobre la que aplicamos el suplemento

                        lrPrecioBase.RESET;
                        lrPrecioBase.SETRANGE(Delegacion     , prContr.Delegacion);
                        lrPrecioBase.SETRANGE("N§ Contrato"  , prContr."N§ Contrato compra");
                        lrPrecioBase.SETRANGE("Codigo Precio", lrPrecioBase."Codigo Precio"::Habitacion);
                        lrPrecioBase.SETRANGE(Codigo         , lrConvHab."Habitacion cupo");
                        lrPrecioBase.SETRANGE("Fecha desde"  , lrLinImp."Fecha Desde"); //+$007
                        lrPrecioBase.SETRANGE("Fecha hasta"  , lrLinImp."Fecha Hasta"); //+$007
                        IF NOT lrPrecioBase.FINDFIRST THEN
                          CLEAR(lrPrecioBase);

                        CLEAR(lrPrecio);
                        lrPrecio.Delegacion           := prContr.Delegacion;
                        lrPrecio."N§ Contrato"        := prContr."N§ Contrato compra";
                        lrPrecio."Codigo Precio"      := lrPrecio."Codigo Precio"::Suplementos;
                        lrPrecio.Codigo               := lrParPer."Codigo Adulto";
                        lrPrecio."Fecha desde"        := lrLinImp."Fecha Desde";
                        lrPrecio."Fecha hasta"        := lrLinImp."Fecha Hasta";
                        //-$003 No tomamos el precio que viene en el fichero
                        //-$003. lrPrecio.Importe              := lrLinImp.Importe;

                        lrPrecio.Importe              := (3 * lrLinImp.Importe) - (2 * lrPrecioBase.Importe); //+$003

                        lrPrecio."Tipo Precio"        := lrPrecio."Tipo Precio"::Pax;
                        lrPrecio."N§ Persona"         := lwInt + 1;
                        lrPrecio."Tipo Habitacion"    := lrConvHab."Habitacion cupo";
                        lrPrecio."Tipo Fechas"        := lrPrecio."Tipo Fechas"::"Fecha estancia";
                        lrPrecio."Anula a Habitacion" := TRUE;
                        lrPrecio.INSERT(TRUE);
                      END;
                    END;
                  END;
                END;
              END;
            END;
          END;
        UNTIL lrLinImp.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _InsertarPreciosReg@1100253041(VAR prContr@1100253000 : Record 7009723);
    VAR
      lrPreReg@1100253001 : Record 7009889;
      lrEdades@1100253002 : Record 7009889;
      lrPrecio@1100253003 : Record 7009738;
      lrRegxHab@1100253004 : Record 7009889;
      lrTemp@1100253005 : Record 7009889;
      lrHab@1100253006 : Record 7009889;
    BEGIN
      // _InsertarPreciosReg.

      CLEAR(lrRegxHab);
      lrRegxHab.SETCURRENTKEY(Codigo, Tipo);
      lrRegxHab.SETRANGE ("No Importacion", No);
      lrRegxHab.SETRANGE (Tipo            , lrRegxHab.Tipo::RegimenxHab);
      IF lrRegxHab.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrHab);
          lrHab.SETCURRENTKEY(Codigo, Tipo);
          lrHab.SETRANGE ("No Importacion"   , No);
          lrHab.SETRANGE (Tipo               , lrHab.Tipo::Habitacion);
          lrHab.SETRANGE (Codigo             , lrRegxHab.Habitacion);
          lrHab.SETRANGE ("Genera Suplemento", FALSE);
          IF lrHab.FINDFIRST THEN BEGIN

            CLEAR(lrPrecio);
            lrPrecio.Delegacion      := prContr.Delegacion;
            lrPrecio."N§ Contrato"   := prContr."N§ Contrato compra";
            lrPrecio."Codigo Precio" := lrPrecio."Codigo Precio"::Regimen;
            lrPrecio."Tipo Precio"   := lrPrecio."Tipo Precio"::Pax;
            lrPrecio.Codigo          := lrRegxHab.BuscarConv(Touroperador);
            lrPrecio."Tipo Habitacion" := lrHab.BuscarConv(Touroperador);

            lrPrecio."Fecha desde"   := prContr."Fecha inicio contrato";
            lrPrecio."Fecha hasta"   := prContr."Fecha final contrato";

            CLEAR(lrPreReg);
            lrPreReg.SETCURRENTKEY(Codigo, Tipo);
            lrPreReg.SETRANGE ("No Importacion", No);
            lrPreReg.SETRANGE (Tipo            , lrPreReg.Tipo::"Precios regimen");
            lrPreReg.SETRANGE (Codigo          , lrRegxHab.Codigo);
            IF lrPreReg.FINDFIRST THEN BEGIN
              lrPrecio.Importe         := lrPreReg.Importe;
              CLEAR(lrEdades);
              lrEdades.SETCURRENTKEY(Codigo, Tipo);
              lrEdades.SETRANGE ("No Importacion", No);
              lrEdades.SETRANGE (Tipo,  lrEdades.Tipo::Edades);
              lrEdades.SETRANGE (Codigo, lrPreReg."Rango Edad");
              IF lrEdades.FINDFIRST THEN BEGIN
                lrPrecio."Edad desde"    := lrEdades.Cantidad;
                lrPrecio."Edad hasta"    := lrEdades."Cantidad 2";
              END;
            END
            ELSE BEGIN
              lrPrecio."Edad desde"    := 0;
              lrPrecio."Edad hasta"    := 99;
            END;

            lrPrecio.INSERT(TRUE);
          END;
        UNTIL lrRegxHab.NEXT = 0;
      END;

      // Se tiene que poner tambin el resto de precios de regimen que se puedan aplicar
      // Sin especificar habitaci¢n.
      CLEAR(lrPreReg);
      lrPreReg.SETCURRENTKEY(Codigo, Tipo);
      lrPreReg.SETRANGE ("No Importacion", No);
      lrPreReg.SETRANGE (Tipo            , lrPreReg.Tipo::"Precios regimen");
      IF lrPreReg.FINDFIRST THEN BEGIN
        REPEAT
          CLEAR(lrPrecio);
          lrPrecio.Delegacion      := prContr.Delegacion;
          lrPrecio."N§ Contrato"   := prContr."N§ Contrato compra";
          lrPrecio."Codigo Precio" := lrPrecio."Codigo Precio"::Regimen;
          lrPrecio."Tipo Precio"   := lrPrecio."Tipo Precio"::Pax;
          lrPrecio.Codigo          := lrPreReg.BuscarConv(Touroperador);
          lrPrecio."Fecha desde"   := prContr."Fecha inicio contrato";
          lrPrecio."Fecha hasta"   := prContr."Fecha final contrato";
          lrPrecio.Importe         := lrPreReg.Importe;
          CLEAR(lrEdades);
          lrEdades.SETCURRENTKEY(Codigo, Tipo);
          lrEdades.SETRANGE ("No Importacion", No);
          lrEdades.SETRANGE (Tipo,  lrEdades.Tipo::Edades);
          lrEdades.SETRANGE (Codigo, lrPreReg."Rango Edad");
          IF lrEdades.FINDFIRST THEN BEGIN
            lrPrecio."Edad desde"    := lrEdades.Cantidad;
            lrPrecio."Edad hasta"    := lrEdades."Cantidad 2";
          END;
          lrPrecio.INSERT(TRUE);
        UNTIL lrPreReg.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _InsertarSuplPersona@1100253049(VAR prContr@1100253000 : Record 7009723);
    VAR
      lrLinImp@1100253003 : Record 7009889;
      lrEdades@1100253002 : Record 7009889;
      lrPrecio@1100253001 : Record 7009738;
      lrTemp@1100253004 : Record 7009889;
      lrHab@1100253005 : Record 7009889;
      lrPreHab@1100253006 : Record 7009889;
      lrParPer@1100253007 : Record 7009701;
      lwEdadIni@1100253008 : Integer;
      lwEdadFin@1100253009 : Integer;
      lwTipoPersona@1100253010 : Code[10];
      lwVuelta@1100253011 : Integer;
    BEGIN
      // _InsertarSuplPersona.

      CLEAR(lrLinImp);
      lrLinImp.SETCURRENTKEY(Codigo, Tipo);
      lrLinImp.SETRANGE ("No Importacion", No);
      lrLinImp.SETRANGE (Tipo            , lrLinImp.Tipo::"Suplementos persona");
      IF lrLinImp.FINDSET THEN BEGIN
        CLEAR(lrParPer);
        lrParPer.FINDFIRST;
        REPEAT
          CLEAR(lrHab);
          lrHab.SETCURRENTKEY(Codigo, Tipo);
          lrHab.SETRANGE ("No Importacion", No);
          lrHab.SETRANGE (Tipo               ,  lrEdades.Tipo::Habitacion);
          lrHab.SETRANGE (Codigo             , lrLinImp.Codigo);
          lrHab.SETRANGE ("Genera Suplemento", FALSE);
          IF lrHab.FINDFIRST THEN BEGIN
            CLEAR(lrEdades);
            lrEdades.SETCURRENTKEY(Codigo, Tipo);
            lrEdades.SETRANGE ("No Importacion", No);
            lrEdades.SETRANGE (Tipo            ,  lrEdades.Tipo::Edades);
            lrEdades.SETRANGE (Codigo          , lrLinImp."Rango Edad");
            IF lrEdades.FINDFIRST THEN BEGIN
              CLEAR(lrTemp);
              lrTemp.SETCURRENTKEY(Codigo, Tipo);
              lrTemp.SETRANGE ("No Importacion", No);
              lrTemp.SETRANGE (Tipo            , lrEdades.Tipo::Temporada);
              lrTemp.SETRANGE (Codigo          , lrLinImp.Temporada);
              lrTemp.SETRANGE (Temporada       , 'P');
              IF lrTemp.FINDSET THEN BEGIN
                REPEAT
                  // El suplemento se trata siempre como porcentaje sobre el precio de la habitaci¢n.
                  CLEAR(lrPreHab);
                  lrPreHab.SETCURRENTKEY(Codigo, Tipo);
                  lrPreHab.SETRANGE ("No Importacion", No);
                  lrPreHab.SETRANGE (Tipo            , lrPreHab.Tipo::"Precios habitacion");
                  lrPreHab.SETRANGE (Codigo          , lrHab.Codigo);
                  lrPreHab.SETRANGE (Temporada       , lrTemp.Codigo);
                  IF lrPreHab.FINDFIRST THEN BEGIN
                    // En el caso de que el suplemento de persona empiece a edad 0 se generan 2 suplementos;
                    // * Uno como Infant de 0 a 1.
                    // * Uno como Child de 2 a edad hasta (si esta es superior a 1).
                    FOR lwVuelta := 1 TO 2 DO BEGIN

                      lwTipoPersona := lrEdades.BuscarConv(Touroperador);

                      //+$008
                      //. Cuando es un adulto la edad inicial debe ser siempre 18
                      IF lwTipoPersona = lrParPer."Codigo Adulto" THEN
                        lwEdadIni := 18
                      ELSE
                        lwEdadIni     := lrEdades.Cantidad;

                      lwEdadFin     := lrEdades."Cantidad 2";

                      CASE TRUE OF
                        // El rango de edad empieza por m s de 0 se usa el suplemento de persona inicado
                        (lwVuelta = 1) AND (lwEdadIni > 0): lwVuelta := 3; // El for no tiene que dar una segunda vuelta.
                        // El rango coincide con el de Infant se usa el c¢digo de infant por defecto y no hay segunda vuelta.
                        (lwVuelta = 1) AND (lwEdadIni = 0) AND (lwEdadFin = 1) : BEGIN
                          lwTipoPersona := lrParPer."Codigo Infant";
                          lwVuelta := 3; // El for no tiene que dar una segunda vuelta.
                        END;
                        // el caso restante de primera vuelta es en el que se parte el rango de edad.
                        (lwVuelta = 1): BEGIN
                          lwTipoPersona := lrParPer."Codigo Infant";
                          lwEdadFin := 1;
                        END;
                        // Si hay segunda vuelta es para introducir el segundo rango de edad partido de 2 a edad hasta.
                        (lwVuelta = 2) AND (lwEdadIni = 0): BEGIN
                          lwEdadIni := 2;
                        END;
                      END;

                      CLEAR(lrPrecio);
                      lrPrecio.Delegacion            := prContr.Delegacion;
                      lrPrecio."N§ Contrato"         := prContr."N§ Contrato compra";
                      lrPrecio."Codigo Precio"       := lrPrecio."Codigo Precio"::Suplementos;
                      lrPrecio."Tipo Precio"         := lrPrecio."Tipo Precio"::Pax;
                      lrPrecio.Codigo                := lwTipoPersona;
                      lrPrecio."Tipo Habitacion"     := lrLinImp.BuscarConv(Touroperador);
                      lrPrecio."Fecha desde"         := lrTemp."Fecha Desde";
                      lrPrecio."Fecha hasta"         := lrTemp."Fecha Hasta";
                      lrPrecio."Edad desde"          := lwEdadIni;
                      lrPrecio."Edad hasta"          := lwEdadFin;

                      lrPrecio."Aplica a Habitacion" := TRUE;
                      //+$005 <
                      IF lrPrecio."Tipo Habitacion" = lrParPer."Codigo Infant" THEN
                        lrPrecio."Aplica a Regimen"    := TRUE;
                      //+$005 >

                      //+$004 <
                      IF (lrLinImp.Importe = 0) OR (lrLinImp.Importe = -100) THEN
                      BEGIN
                        lrPrecio.Porcentaje := TRUE;
                        lrPrecio.Importe    := -100;
                        lrPrecio."Acumular al total"   := TRUE; //+$006
                      END
                      ELSE
                      BEGIN
                        lrPrecio."Acumular al total" := FALSE; //+$006
                        lrPrecio.Porcentaje := FALSE;
                        lrPrecio.Importe    := lrLinImp.Importe;
                      END;
                      //+$004 >

                      lrPrecio."Tipo Persona acompa¤ante" := lrParPer."Codigo Adulto";
                      // Seg£n Sven el n§ de personas acompa¤antes es siempre 2.
                      //lrPrecio."N§ Personas acompa¤ante"  := lrHab."Cantidad 2";
                      lrPrecio."N§ Personas acompa¤ante"  := 2;
                      // Dejo el n§ de persona a 0 a falta de informaci¢n
                      // se aplicar  a todos los ni¤os.
                      lrPrecio."N§ Persona" := 0;
                      lrPrecio.INSERT(TRUE);
                    END;
                  END;
                UNTIL lrTemp.NEXT = 0;
              END;
            END;
          END;
        UNTIL lrLinImp.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _InsertarOfertasPrecio@1100253024(VAR prContr@1100253004 : Record 7009723);
    VAR
      lrLinImp@1100253003 : Record 7009889;
      lrPrecio@1100253001 : Record 7009738;
      lrParInt2@1100253005 : Record 7009891;
      lrPrecioAnt@1100253000 : Record 7009738;
    BEGIN
      // _InsertarOfertasPrecio.
      //: Noches gratis.

      CLEAR(lrLinImp);
      lrLinImp.SETCURRENTKEY(Codigo, Tipo);
      lrLinImp.SETRANGE ("No Importacion", No);
      lrLinImp.SETRANGE (Tipo            , lrLinImp.Tipo::"Ofertas precio");
      IF lrLinImp.FINDSET THEN BEGIN
        CLEAR(lrParInt2);
        CLEAR(lrPrecioAnt);
        lrParInt2.FINDFIRST;
        REPEAT

          IF (lrPrecioAnt."N§ Contrato" <> '') AND NOT lrPrecioAnt.Porcentaje THEN BEGIN
            IF lrPrecioAnt."Hasta numero estancias" < lrLinImp.Cantidad THEN BEGIN
              lrPrecioAnt."Hasta numero estancias" := lrLinImp.Cantidad - 1;
            END
            ELSE BEGIN
              lrPrecioAnt."Hasta numero estancias" := 99;
            END;
            lrPrecioAnt.MODIFY;
          END;

          CLEAR(lrPrecio);
          lrPrecio.Delegacion               := prContr.Delegacion;
          lrPrecio."N§ Contrato"            := prContr."N§ Contrato compra";
          lrPrecio."Codigo Precio"          := lrPrecio."Codigo Precio"::Ofertas;

          // El c¢digo rellena otros campos del precio.
          lrPrecio.VALIDATE (Codigo, lrParInt2."Codigo Oferta SPO");

          lrPrecio."Fecha desde"            := lrLinImp."Fecha Desde";
          lrPrecio."Fecha hasta"            := lrLinImp."Fecha Hasta";
          lrPrecio."Tipo Fechas"            := lrPrecio."Tipo Fechas"::"Fecha estancia";

          //Oferta de descuento porcentual sobre los dias de estancia (v1.3).
          IF lrLinImp."Tipo Oferta" = '%' THEN BEGIN
            lrPrecio.Porcentaje := TRUE;
            lrPrecio.Importe    := lrPrecio.Importe;
            lrPrecio."A partir de estancias" := lrLinImp.Cantidad;
            lrPrecio.INSERT(TRUE);
          END
          // Oferta de tantos d¡as de estancia = tantos d¡as de pago.
          ELSE BEGIN
           lrPrecio.Porcentaje := FALSE;
           lrPrecio."A partir de estancias"  := lrLinImp.Cantidad;
           lrPrecio."Hasta numero estancias" := lrLinImp.Cantidad;
           lrPrecio."Noches gratis"          := lrLinImp.Cantidad - lrLinImp."Cantidad 2";
           lrPrecio.INSERT(TRUE);
           lrPrecioAnt := lrPrecio;
          END;
        UNTIL lrLinImp.NEXT = 0;

        IF (lrPrecioAnt."N§ Contrato" <> '') AND NOT lrPrecioAnt.Porcentaje THEN BEGIN
          IF lrPrecioAnt."Hasta numero estancias" < lrLinImp.Cantidad THEN BEGIN
            lrPrecioAnt."Hasta numero estancias" := lrLinImp.Cantidad - 1;
          END
          ELSE BEGIN
            lrPrecioAnt."Hasta numero estancias" := 99;
          END;
          lrPrecioAnt.MODIFY;
        END;

      END;
    END;

    LOCAL PROCEDURE _InsertarEarlyBook@1100253044(VAR prContr@1100253000 : Record 7009723);
    VAR
      lrLinImp@1100253003 : Record 7009889;
      lrPrecio@1100253002 : Record 7009738;
      lrParInt2@1100253001 : Record 7009891;
      lrTemp@1100253004 : Record 7009889;
      lrPrecio2@1100253005 : Record 7009738;
      lwLin@1100253006 : Text[250];
      lwToken@1100253007 : Text[250];
      lrHabs@1100253008 : Record 7009889;
    BEGIN
      // _InsertarEarlyBook.

      CLEAR(lrLinImp);
      lrLinImp.SETCURRENTKEY(Codigo, Tipo);
      lrLinImp.SETRANGE ("No Importacion", No);
      lrLinImp.SETRANGE (Tipo            , lrLinImp.Tipo::"Early Booking");
      IF lrLinImp.FINDSET THEN BEGIN
        CLEAR(lrParInt2);
        lrParInt2.FINDFIRST;
        REPEAT

          CLEAR(lrPrecio);
          lrPrecio.Delegacion               := prContr.Delegacion;
          lrPrecio."N§ Contrato"            := prContr."N§ Contrato compra";
          lrPrecio."Codigo Precio"          := lrPrecio."Codigo Precio"::Ofertas;

          lrPrecio.VALIDATE(Codigo, lrParInt2."Codigo Early Booking");

          // Se usa el 1 de enero del a¤o anterior como fecha desde.
          lrPrecio."Fecha desde"            := CALCDATE('<-CY>', CALCDATE('<-1Y>', lrLinImp."Fecha Hasta"));
          lrPrecio."Fecha hasta"            := lrLinImp."Fecha Hasta";
          lrPrecio."Tipo Fechas"            := lrPrecio."Tipo Fechas"::"Fecha venta+estancia";
          lrPrecio."Dias Antes Llegada EBB" := lrLinImp.Cantidad;
          lrPrecio.Importe                  := -lrLinImp.Importe;
          lrPrecio.Porcentaje               := (lrLinImp."Tipo Oferta" = 'P');

          CASE lrLinImp."Tipo Precio" OF
            'P': lrPrecio."Tipo Precio" := lrPrecio."Tipo Precio"::Pax;
            'C': lrPrecio."Tipo Precio" := lrPrecio."Tipo Precio"::Habitaci¢n;
          END;

          lrPrecio."A partir de estancias"  := lrLinImp."Cantidad 2";
          lrPrecio."Hasta numero estancias" := 999;

          // Sin restricci¢n por tipo de habitaci¢n.
          IF lrLinImp.Descripcion = '' THEN BEGIN
            // Si se ha especificado una temporada en el precio se usa esta como segunda fecha,
            // en caso contrario se usa la duraci¢n del contrato.
            IF lrLinImp.Temporada <> '' THEN BEGIN
              CLEAR(lrTemp);
              lrTemp.SETCURRENTKEY(Codigo, Tipo);
              lrTemp.SETRANGE ("No Importacion", No);
              lrTemp.SETRANGE (Tipo            , lrTemp.Tipo::Temporada);
              lrTemp.SETRANGE (Codigo          , lrLinImp.Temporada);
              lrTemp.SETRANGE (Temporada       , 'E');
              IF lrTemp.FINDSET THEN BEGIN
                REPEAT
                  CLEAR(lrPrecio2);
                  lrPrecio2 := lrPrecio;
                  lrPrecio2."2¦ Fecha desde" := lrTemp."Fecha Desde";
                  lrPrecio2."2¦ Fecha hasta" := lrTemp."Fecha Hasta";
                  lrPrecio2.INSERT(TRUE);
                UNTIL lrTemp.NEXT = 0;
              END;
            END
            ELSE BEGIN
              lrPrecio."2¦ Fecha desde" := prContr."Fecha inicio contrato";
              lrPrecio."2¦ Fecha hasta" := prContr."Fecha final contrato";
              lrPrecio.INSERT(TRUE);
            END;
          END
          // El early booking est  restringido a una lista de habitaciones.
          ELSE BEGIN
            lwLin := lrLinImp.Descripcion;
            WHILE _GetToken(lwLin, lwToken, ';') DO BEGIN
              CLEAR(lrHabs);
              lrHabs.SETCURRENTKEY(Codigo, Tipo);
              lrHabs.SETRANGE (Tipo               , lrHabs.Tipo::Habitacion);
              lrHabs.SETRANGE ("No Importacion"   , No);
              lrHabs.SETRANGE (Codigo             , lwToken);
              lrHabs.SETRANGE ("Genera Suplemento", FALSE);
              IF lrHabs.FINDFIRST THEN BEGIN
                IF lrLinImp.Temporada <> '' THEN BEGIN
                  CLEAR(lrTemp);
                  lrTemp.SETCURRENTKEY(Codigo, Tipo);
                  lrTemp.SETRANGE ("No Importacion", No);
                  lrTemp.SETRANGE (Tipo            , lrTemp.Tipo::Temporada);
                  lrTemp.SETRANGE (Codigo          , lrLinImp.Temporada);
                  lrTemp.SETRANGE (Temporada       , 'E');
                  IF lrTemp.FINDSET THEN BEGIN
                    REPEAT
                      CLEAR(lrPrecio2);
                      lrPrecio2 := lrPrecio;
                      lrPrecio2."Tipo Habitacion" := lrHabs.BuscarConv(Touroperador);
                      lrPrecio2."2¦ Fecha desde" := lrTemp."Fecha Desde";
                      lrPrecio2."2¦ Fecha hasta" := lrTemp."Fecha Hasta";
                      lrPrecio2.INSERT(TRUE);
                    UNTIL lrTemp.NEXT = 0;
                  END;
                END
                ELSE BEGIN
                  lrPrecio2 := lrPrecio;
                  lrPrecio2."Tipo Habitacion" := lrHabs.BuscarConv(Touroperador);
                  lrPrecio2."2¦ Fecha desde"  := prContr."Fecha inicio contrato";
                  lrPrecio2."2¦ Fecha hasta"  := prContr."Fecha final contrato";
                  lrPrecio2.INSERT(TRUE);
                END;
              END;
            END;
          END;

        UNTIL lrLinImp.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _InsertarExtras@1100253047(VAR prContr@1100253000 : Record 7009723);
    VAR
      lrLinImp@1100253002 : Record 7009889;
      lrPrecio@1100253001 : Record 7009738;
    BEGIN
      // _InsertarExtras.

      CLEAR(lrLinImp);
      lrLinImp.SETCURRENTKEY(Codigo, Tipo);
      lrLinImp.SETRANGE ("No Importacion", No);
      lrLinImp.SETRANGE (Tipo            , lrLinImp.Tipo::Extras);
      IF lrLinImp.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrPrecio);
          lrPrecio.Delegacion      := prContr.Delegacion;
          lrPrecio."N§ Contrato"   := prContr."N§ Contrato compra";
          lrPrecio."Codigo Precio" := lrPrecio."Codigo Precio"::Extras;
          lrPrecio.Importe         := lrLinImp.Importe;
          lrPrecio.Codigo          := lrLinImp.BuscarConv(Touroperador);
          lrPrecio."Fecha desde"   := prContr."Fecha inicio contrato";
          lrPrecio."Fecha hasta"   := prContr."Fecha final contrato";
          lrPrecio."Tipo Fechas"   := lrPrecio."Tipo Fechas"::"Fecha estancia";
          CASE lrLinImp."Tipo Oferta" OF
            // Por persona y d¡a.
            'P': BEGIN
              lrPrecio."Tipo Precio" := lrPrecio."Tipo Precio"::Pax;
              lrPrecio.Frecuencia    := 1; // Cada d¡a
              lrPrecio.INSERT(TRUE);
            END;
            // Por habitaci¢n.
            'U': BEGIN
              lrPrecio."Tipo Precio" := lrPrecio."Tipo Precio"::Habitaci¢n;
              lrPrecio.Frecuencia    := 0; // Aplicaci¢n £nica.
              lrPrecio.INSERT(TRUE);
            END;
            // Estancia
            'S': BEGIN
              lrPrecio."Tipo Precio" := lrPrecio."Tipo Precio"::Pax;
              lrPrecio.Frecuencia    := 0; // Aplicaci¢n £nica.
              lrPrecio."N§ Persona"  := 1; // Solo sobre la primera persona.
              lrPrecio.INSERT(TRUE);
            END;
          END;
        UNTIL lrLinImp.NEXT = 0;
      END;
    END;

    PROCEDURE PonerEstadoImportado@1100253054(VAR prCab@1100253000 : Record 7009888);
    VAR
      lrResH@1100253001 : Record 7009743;
    BEGIN
      // PonerEstadoImportado

      IF prCab.Estado = prCab.Estado::Importado THEN
        EXIT;

      CLEAR(lrResH);
      lrResH.SETCURRENTKEY(Delegacion, "Contrato compra", Responsable);
      lrResH.SETRANGE("Contrato compra", prCab."Num Contrato");
      lrResH.SETRANGE(Responsable      , TRUE);
      IF NOT lrResH.FINDFIRST THEN BEGIN
        IF CONFIRM(Text019) THEN BEGIN
          prCab.Estado := prCab.Estado::Importado;
          prCab.MODIFY;
        END;
      END;
    END;

    PROCEDURE _ProcesarCodigoHabitacion@1100253055(pwCodigo@1100253000 : Code[10]) : Code[10];
    VAR
      lwAuxCodigo@1100253001 : Code[10];
      lwIndice@1100253002 : Integer;
    BEGIN
      // _ProcesarCodigoHabitacion

      lwIndice := 1;
      WHILE NOT (pwCodigo[lwIndice] IN ['1','2','3','4','5','6','7','8','9','0']) DO BEGIN
        lwAuxCodigo := lwAuxCodigo + FORMAT(pwCodigo[lwIndice]);
        lwIndice += 1;
      END;

      lwAuxCodigo := lwAuxCodigo + '2';
      EXIT(lwAuxCodigo);
    END;

    BEGIN
    {
      $001 AJF 04052011 Se a¤ade el campo de dias de las semana para controlar que ningun precio sea dependiente del d¡a de la semana.
                        En caso de ser dependiente se a¤ade un error a la importaci¢n.

      $002 AJS 21122011 Modifico para no rellenar el campo Cod. Serie de los contratos porque es obsoleto

      $003 AJS 20122012 Los suplementos de tercer adulto se calculan segun una formula de Micheline Gasser

      $004 AJS 20122012 En los suplementos de tipo persona, cuando no son 100% son por importe

      $005 AJS 20122012 En los suplementos de tipo persona, no descuentan del regimen en adultos y ni¤os

      $006 AJS 17012013 En los suplementos de tipo persona cuando son por importe no se acumulan al total

      $007 AJS 17012013 Cuando buscamos el precio base del suplemento tercer adulto hay que buscar en las mismas fechas

      $008 AJS 14022013 Cuando se crear los suplemento por persona, la edad inicial de los adultos debe ser siempre 18
    }
    END.
  }
}
