OBJECT Table 89 BOM Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               JnlLineDim@1000 : Record 356;
             BEGIN
               JnlLineDim.LOCKTABLE;
               LOCKTABLE;
               BOMJnlTemplate.GET("Journal Template Name");
               BOMJnlBatch.GET("Journal Template Name","Journal Batch Name");

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
               DimMgt.InsertJnlLineDim(
                 DATABASE::"BOM Journal Line",
                 "Journal Template Name","Journal Batch Name","Line No.",0,
                 "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
             END;

    OnModify=BEGIN
               ReserveBOMJnlLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=BEGIN
               ReserveBOMJnlLine.DeleteLine(Rec);
               DimMgt.DeleteJnlLineDim(
                 DATABASE::"BOM Journal Line",
                 "Journal Template Name","Journal Batch Name","Line No.",0);
             END;

    OnRename=BEGIN
               ReserveBOMJnlLine.RenameLine(Rec,xRec);
             END;

    CaptionML=[ENU=BOM Journal Line;
               ESP=L¡n. diario L.M.];
    LookupFormID=Form520;
    DrillDownFormID=Form520;
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="BOM Journal Template";
                                                   CaptionML=[ENU=Journal Template Name;
                                                              ESP=Nombre libro diario] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 3   ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Bill of Materials=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                  "Variant Code" := '';
                                                                  "Bin Code" := '';
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code")
                                                                  END;
                                                                END;

                                                                IF "Item No." = '' THEN BEGIN
                                                                  CreateDim(DATABASE::Item,"Item No.");
                                                                  EXIT;
                                                                END;

                                                                Item.GET("Item No.");
                                                                Item.CALCFIELDS("Bill of Materials");
                                                                Item.TESTFIELD("Bill of Materials",TRUE);
                                                                Item.TESTFIELD(Blocked,FALSE);
                                                                Description := Item.Description;
                                                                "Unit Cost" := Item."Unit Cost";
                                                                "Inventory Posting Group" := Item."Inventory Posting Group";
                                                                "Total Cost" := ROUND(Quantity * "Unit Cost");
                                                                VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                CheckItemAvailable(FIELDNO("Item No."));
                                                                ReserveBOMJnlLine.VerifyChange(Rec,xRec);
                                                                CreateDim(DATABASE::Item,"Item No.");
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto] }
    { 4   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Document Date","Posting Date");
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 5   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento] }
    { 6   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 7   ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1];
                                                   CaptionClass='1,2,1' }
    { 8   ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2];
                                                   CaptionClass='1,2,2' }
    { 9   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
                                                                  END;
                                                                END;
                                                                ReserveBOMJnlLine.VerifyChange(Rec,xRec);
                                                                CheckItemAvailable(FIELDNO("Location Code"));
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n] }
    { 10  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                "Total Cost" := ROUND(Quantity * "Unit Cost");
                                                                ReserveBOMJnlLine.VerifyQuantity(Rec,xRec);
                                                                CheckItemAvailable(FIELDNO(Quantity));
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5 }
    { 11  ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ESP=Coste unitario];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 12  ;   ;Total Cost          ;Decimal       ;CaptionML=[ENU=Total Cost;
                                                              ESP=Coste total];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 13  ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ESP=Grupo contable existencias];
                                                   Editable=No }
    { 14  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ESP=C¢d. origen];
                                                   Editable=No }
    { 15  ;   ;Journal Batch Name  ;Code10        ;TableRelation="BOM Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              ESP=Nombre secci¢n diario] }
    { 16  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ESP=C¢d. auditor¡a] }
    { 17  ;   ;Recurring Method    ;Option        ;CaptionML=[ENU=Recurring Method;
                                                              ESP=Periodicidad];
                                                   OptionCaptionML=[ENU=,Fixed,Variable;
                                                                    ESP=,Fija,Variable];
                                                   OptionString=,Fixed,Variable;
                                                   BlankZero=Yes }
    { 18  ;   ;Expiration Date     ;Date          ;CaptionML=[ENU=Expiration Date;
                                                              ESP=Fecha caducidad] }
    { 19  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=[ENU=Recurring Frequency;
                                                              ESP=Frecuencia repetici¢n] }
    { 20  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ESP=Fecha emisi¢n documento] }
    { 21  ;   ;External Document No.;Code20       ;CaptionML=[ENU=External Document No.;
                                                              ESP=N§ documento externo] }
    { 22  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posting No. Series;
                                                              ESP=N§ serie registro] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> xRec."Variant Code" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code")
                                                                  END;
                                                                END;

                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;

                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                ReserveBOMJnlLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(Item No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                IF "Bin Code" <> xRec."Bin Code" THEN BEGIN
                                                                  TESTFIELD("Location Code");
                                                                  IF "Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                    GetBin("Location Code","Bin Code");
                                                                    TESTFIELD("Location Code",Bin."Location Code");
                                                                  END;
                                                                END;

                                                                ReserveBOMJnlLine.VerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                Item.GET("Item No.");
                                                                GetGLSetup;

                                                                "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                "Unit Cost" :=
                                                                  ROUND(Item."Unit Cost" * "Qty. per Unit of Measure",
                                                                    GLSetup."Unit-Amount Rounding Precision");

                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida] }
    { 5410;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base)];
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Line No.;
                                                   Clustered=Yes }
    {    ;Item No.,Variant Code,Location Code,Bin Code,Posting Date;
                                                   SumIndexFields=Quantity (Base);
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1000 : TextConst 'ENU=Change %1 from %2 to %3?;ESP=¨Desea cambiar %1 de %2 a %3?';
      BOMJnlTemplate@1001 : Record 88;
      BOMJnlBatch@1002 : Record 234;
      BOMJnlLine@1003 : Record 89;
      Item@1004 : Record 27;
      Location@1017 : Record 14;
      Bin@1020 : Record 7354;
      BOMComp@1005 : Record 90;
      ItemJnlLine@1006 : Record 83;
      ItemVariant@1007 : Record 5401;
      GLSetup@1016 : Record 98;
      ItemAvailByDate@1008 : Form 157;
      ItemAvailByVar@1009 : Form 5414;
      ItemAvailByLoc@1010 : Form 492;
      ItemCheckAvail@1011 : Codeunit 311;
      NoSeriesMgt@1012 : Codeunit 396;
      UOMMgt@1013 : Codeunit 5402;
      DimMgt@1014 : Codeunit 408;
      ReserveBOMJnlLine@1018 : Codeunit 99000843;
      WMSManagement@1019 : Codeunit 7302;
      GLSetupRead@1015 : Boolean;

    LOCAL PROCEDURE CheckItemAvailable@1(CalledByFieldNo@1001 : Integer);
    VAR
      Item2@1000 : Record 27;
    BEGIN
      IF (CurrFieldNo = 0) OR (CurrFieldNo <> CalledByFieldNo) THEN // Prevent two checks on quantity
        EXIT;

      IF (CurrFieldNo <> 0) AND ("Item No." <> '') AND (Quantity <> 0) THEN BEGIN
        BOMComp.SETRANGE("Parent Item No.","Item No.");
        BOMComp.SETRANGE(Type,BOMComp.Type::Item);
        BOMComp.SETFILTER("No.",'<>%1','');
        IF BOMComp.FIND('-') THEN BEGIN
          Item2.GET(BOMComp."No.");
          ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Negative Adjmt.";
          ItemJnlLine."Location Code" := "Location Code";
          REPEAT
            Item.GET(BOMComp."No.");
            Item.TESTFIELD(Blocked,FALSE);
            ItemJnlLine."Item No." := BOMComp."No.";
            ItemJnlLine."Variant Code" := BOMComp."Variant Code";
            ItemJnlLine."Unit of Measure Code" := BOMComp."Unit of Measure Code";
            ItemJnlLine."Qty. per Unit of Measure" :=
              UOMMgt.GetQtyPerUnitOfMeasure(Item,BOMComp."Unit of Measure Code");
            ItemJnlLine.Quantity := ROUND("Quantity (Base)" * BOMComp."Quantity per",0.00001);
            IF ItemJnlLine.Quantity <> 0 THEN
              ItemCheckAvail.ItemJnlCheckLine(ItemJnlLine);
          UNTIL BOMComp.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(("Item No." = '') AND (Quantity = 0));
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE SetUpNewLine@8(LastBOMJnlLine@1000 : Record 89);
    BEGIN
      BOMJnlTemplate.GET("Journal Template Name");
      BOMJnlBatch.GET("Journal Template Name","Journal Batch Name");
      BOMJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      BOMJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF BOMJnlLine.FIND('-') THEN BEGIN
        "Posting Date" := LastBOMJnlLine."Posting Date";
        "Document Date" := LastBOMJnlLine."Posting Date";
        "Document No." := LastBOMJnlLine."Document No.";
      END ELSE BEGIN
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        IF BOMJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(BOMJnlBatch."No. Series","Posting Date");
        END;
      END;
      "Recurring Method" := LastBOMJnlLine."Recurring Method";
      "Source Code" := BOMJnlTemplate."Source Code";
      "Reason Code" := BOMJnlBatch."Reason Code";
      "Posting No. Series" := BOMJnlBatch."Posting No. Series";
    END;

    PROCEDURE ItemAvailability@4(AvailabilityType@1000 : 'Date,Variant,Location,Bin');
    BEGIN
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      Item.SETRANGE("No.","Item No.");
      Item.SETRANGE("Date Filter",0D,"Posting Date");

      CASE AvailabilityType OF
        AvailabilityType::Date:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Location Filter","Location Code");
            CLEAR(ItemAvailByDate);
            ItemAvailByDate.LOOKUPMODE(TRUE);
            ItemAvailByDate.SETRECORD(Item);
            ItemAvailByDate.SETTABLEVIEW(Item);
            IF ItemAvailByDate.RUNMODAL = ACTION::LookupOK THEN
              IF "Posting Date" <> ItemAvailByDate.GetLastDate THEN
                IF CONFIRM(
                     Text002,TRUE,FIELDCAPTION("Posting Date"),"Posting Date",
                     ItemAvailByDate.GetLastDate)
                THEN BEGIN
                  VALIDATE("Posting Date",ItemAvailByDate.GetLastDate);
                  MODIFY;
                END;
          END;
        AvailabilityType::Variant:
          BEGIN
            CLEAR(ItemAvailByVar);
            ItemAvailByVar.LOOKUPMODE(TRUE);
            ItemAvailByVar.SETRECORD(Item);
            ItemAvailByVar.SETTABLEVIEW(Item);
            IF ItemAvailByVar.RUNMODAL = ACTION::LookupOK THEN
              IF "Variant Code" <> ItemAvailByVar.GetLastVariant THEN
                IF CONFIRM(
                     Text002,TRUE,FIELDCAPTION("Variant Code"),"Variant Code",
                     ItemAvailByVar.GetLastVariant)
                THEN BEGIN
                  VALIDATE("Variant Code",ItemAvailByVar.GetLastVariant);
                  MODIFY;
                END;
          END;
        AvailabilityType::Location:
          BEGIN
            CLEAR(ItemAvailByLoc);
            ItemAvailByLoc.LOOKUPMODE(TRUE);
            ItemAvailByLoc.SETRECORD(Item);
            ItemAvailByLoc.SETTABLEVIEW(Item);
            IF ItemAvailByLoc.RUNMODAL = ACTION::LookupOK THEN
              IF "Location Code" <> ItemAvailByLoc.GetLastLocation THEN
                IF CONFIRM(
                     Text002,TRUE,FIELDCAPTION("Location Code"),"Location Code",
                     ItemAvailByLoc.GetLastLocation)
                THEN BEGIN
                  VALIDATE("Location Code",ItemAvailByLoc.GetLastLocation);
                  MODIFY;
                END;
          END;
      END;
    END;

    PROCEDURE CreateDim@2(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetDefaultDim(
        TableID,No,"Source Code",
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF "Line No." <> 0 THEN
        DimMgt.UpdateJnlLineDefaultDim(
          DATABASE::"BOM Journal Line",
          "Journal Template Name","Journal Batch Name","Line No.",0,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@3(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveJnlLineDim(
          DATABASE::"BOM Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,FieldNumber,ShortcutDimCode);
        IF MODIFY THEN;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE LookupShortcutDimCode@6(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveJnlLineDim(
          DATABASE::"BOM Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@7(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      IF "Line No." <> 0 THEN
        DimMgt.ShowJnlLineDim(
          DATABASE::"BOM Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,ShortcutDimCode)
      ELSE
        DimMgt.ShowTempDim(ShortcutDimCode);
    END;

    LOCAL PROCEDURE GetGLSetup@9();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@36(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      IF BinCode = '' THEN
        CLEAR(Bin)
      ELSE
        IF Bin.Code <> BinCode THEN
          Bin.GET(LocationCode,BinCode);
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      ReserveBOMJnlLine.CallItemTracking(Rec);
    END;

    BEGIN
    END.
  }
}
