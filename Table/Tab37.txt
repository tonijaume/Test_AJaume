OBJECT Table 37 Sales Line
{
  OBJECT-PROPERTIES
  {
    Date=06/05/15;
    Time=[ 6:16:07];
    Modified=Yes;
    Version List=AIC2009,TRF2009,NAVW16.00.01,NAVES6.00.01;
  }
  PROPERTIES
  {
    OnInsert=VAR
               DocDim@1000 : Record 357;
             BEGIN
               TestStatusOpen;
               IF Quantity <> 0 THEN
                 ReserveSalesLine.VerifyQuantity(Rec,xRec);
               DocDim.LOCKTABLE;
               LOCKTABLE;
               SalesHeader."No." := '';

               DimMgt.InsertDocDim(
                 DATABASE::"Sales Line","Document Type","Document No.","Line No.",
                 "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
             END;

    OnModify=BEGIN
               IF ("Document Type" = "Document Type"::"Blanket Order") AND
                  ((Type <> xRec.Type) OR ("No." <> xRec."No."))
               THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF SalesLine2.FINDSET THEN
                   REPEAT
                     SalesLine2.TESTFIELD(Type,Type);
                     SalesLine2.TESTFIELD("No.","No.");
                   UNTIL SalesLine2.NEXT = 0;
               END;

               CheckPermisoAtennea; //+$004

               IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND ItemExists(xRec."No.") THEN
                 ReserveSalesLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               DocDim@1001 : Record 357;
               CapableToPromise@1000 : Codeunit 99000886;
               JobCreateInvoice@1002 : Codeunit 1002;
               SalesCommentLine@1003 : Record 44;
             BEGIN
               TestStatusOpen;
               IF NOT StatusCheckSuspended AND (SalesHeader.Status = SalesHeader.Status::Released) AND
                  (Type IN [Type::"G/L Account",Type::"Charge (Item)",Type::Resource])
               THEN
                 VALIDATE(Quantity,0);
               DocDim.LOCKTABLE;

               IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                 ReserveSalesLine.DeleteLine(Rec);
                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 IF "Shipment No." = '' THEN
                   TESTFIELD("Qty. Shipped Not Invoiced",0);
                 IF "Return Receipt No." = '' THEN
                   TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                 WhseValidateSourceLine.SalesLineDelete(Rec);
               END;

               IF ("Document Type" = "Document Type"::Order) AND (Quantity <> "Quantity Invoiced") THEN
                 TESTFIELD("Prepmt. Amt. Inv.",0);

               CheckAssocPurchOrder('');
               NonstockItemMgt.DelNonStockSales(Rec);

               IF "Document Type" = "Document Type"::"Blanket Order" THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF SalesLine2.FINDFIRST THEN
                   SalesLine2.TESTFIELD("Blanket Order Line No.",0);
               END;

               CheckPermisoAtennea; //+$004

               IF Type = Type::Item THEN
                 DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");

               IF Type = Type::"Charge (Item)" THEN
                 DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");

               CapableToPromise.RemoveReqLines("Document No.","Line No.",0,FALSE);

               SalesLine2.RESET;
               SalesLine2.SETRANGE("Document Type","Document Type");
               SalesLine2.SETRANGE("Document No.","Document No.");
               SalesLine2.SETRANGE("Attached to Line No.","Line No.");
               SalesLine2.DELETEALL(TRUE);
               DimMgt.DeleteDocDim(DATABASE::"Sales Line","Document Type","Document No.","Line No.");
               IF "Job Contract Entry No." <> 0 THEN
                 JobCreateInvoice.DeleteSalesLine(Rec);

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","Document No.");
               SalesCommentLine.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesCommentLine.ISEMPTY THEN
                 SalesCommentLine.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Sales Line;
               ESP=L¡n. venta];
    PasteIsValid=No;
    LookupFormID=Form516;
    DrillDownFormID=Form516;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ESP=Oferta,Pedido,Factura,Abono,Pedido abierto,Devoluci¢n];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ESP=Venta a-N§ cliente];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 5   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                GetSalesHeader;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                  IF xRec.Type IN [Type::Item,Type::"Fixed Asset"] THEN BEGIN
                                                                    IF Quantity <> 0 THEN
                                                                      SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                    DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  END;
                                                                  IF xRec.Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                TempSalesLine := Rec;
                                                                DimMgt.DeleteDocDim(DATABASE::"Sales Line","Document Type","Document No.","Line No.");
                                                                INIT;
                                                                Type := TempSalesLine.Type;
                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";

                                                                IF Type = Type::Item THEN
                                                                  "Allow Item Charge Assignment" := TRUE
                                                                ELSE
                                                                  "Allow Item Charge Assignment" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                                    ESP=" ,Cuenta,Producto,Recurso,Activo fijo,Cargo (prod.)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=VAR
                                                                ICPartner@1000 : Record 413;
                                                                ItemCrossReference@1001 : Record 5717;
                                                                PrepaymentMgt@1002 : Codeunit 441;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckItemAvailable(FIELDNO("No."));

                                                                IF (xRec."No." <> "No.") AND (Quantity <> 0) THEN BEGIN
                                                                  CALCFIELDS("Reserved Qty. (Base)");
                                                                  TESTFIELD("Reserved Qty. (Base)",0);
                                                                  IF Type = Type::Item THEN
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                CheckAssocPurchOrder(FIELDCAPTION("No."));
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                TempSalesLine := Rec;
                                                                INIT;
                                                                Type := TempSalesLine.Type;
                                                                "No." := TempSalesLine."No.";
                                                                IF "No." = '' THEN
                                                                  EXIT;
                                                                IF Type <> Type::" " THEN
                                                                  Quantity := TempSalesLine.Quantity;

                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";
                                                                GetSalesHeader;
                                                                IF SalesHeader."Document Type" = SalesHeader."Document Type"::Quote THEN BEGIN
                                                                  IF (SalesHeader."Sell-to Customer No." = '') AND
                                                                     (SalesHeader."Sell-to Customer Template Code" = '')
                                                                  THEN
                                                                    ERROR(
                                                                      Text031,
                                                                      SalesHeader.FIELDCAPTION("Sell-to Customer No."),
                                                                      SalesHeader.FIELDCAPTION("Sell-to Customer Template Code"));
                                                                  IF (SalesHeader."Bill-to Customer No." = '') AND
                                                                     (SalesHeader."Bill-to Customer Template Code" = '')
                                                                  THEN
                                                                    ERROR(
                                                                      Text031,
                                                                      SalesHeader.FIELDCAPTION("Bill-to Customer No."),
                                                                      SalesHeader.FIELDCAPTION("Bill-to Customer Template Code"));
                                                                END ELSE
                                                                  SalesHeader.TESTFIELD("Sell-to Customer No.");

                                                                "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                                                                "Currency Code" := SalesHeader."Currency Code";
                                                                "Location Code" := SalesHeader."Location Code";
                                                                "Customer Price Group" := SalesHeader."Customer Price Group";
                                                                "Customer Disc. Group" := SalesHeader."Customer Disc. Group";
                                                                "Allow Line Disc." := SalesHeader."Allow Line Disc.";
                                                                "Transaction Type" := SalesHeader."Transaction Type";
                                                                "Transport Method" := SalesHeader."Transport Method";
                                                                "Bill-to Customer No." := SalesHeader."Bill-to Customer No.";
                                                                "Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := SalesHeader."VAT Bus. Posting Group";
                                                                "Exit Point" := SalesHeader."Exit Point";
                                                                Area := SalesHeader.Area;
                                                                "Transaction Specification" := SalesHeader."Transaction Specification";
                                                                "Tax Area Code" := SalesHeader."Tax Area Code";
                                                                "Tax Liable" := SalesHeader."Tax Liable";
                                                                IF NOT "System-Created Entry" AND ("Document Type" = "Document Type"::Order) AND (Type <> Type::" ") THEN
                                                                  "Prepayment %" := SalesHeader."Prepayment %";
                                                                "Prepayment Tax Area Code" := SalesHeader."Tax Area Code";
                                                                "Prepayment Tax Liable" := SalesHeader."Tax Liable";
                                                                "Responsibility Center" := SalesHeader."Responsibility Center";

                                                                "Shipping Agent Code" := SalesHeader."Shipping Agent Code";
                                                                "Shipping Agent Service Code" := SalesHeader."Shipping Agent Service Code";
                                                                "Outbound Whse. Handling Time" := SalesHeader."Outbound Whse. Handling Time";
                                                                "Shipping Time" := SalesHeader."Shipping Time";
                                                                CALCFIELDS("Substitution Available");

                                                                "Promised Delivery Date" := SalesHeader."Promised Delivery Date";
                                                                "Requested Delivery Date" := SalesHeader."Requested Delivery Date";
                                                                "Shipment Date" :=
                                                                  CalendarMgmt.CalcDateBOC(
                                                                    '',
                                                                    SalesHeader."Shipment Date",
                                                                    CalChange."Source Type"::Location,
                                                                    "Location Code",
                                                                    '',
                                                                    CalChange."Source Type"::"Shipping Agent",
                                                                    "Shipping Agent Code",
                                                                    "Shipping Agent Service Code",
                                                                    FALSE);
                                                                UpdateDates;

                                                                CASE Type OF
                                                                  Type::" ":
                                                                    BEGIN
                                                                      StdTxt.GET("No.");
                                                                      Description := StdTxt.Description;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      IF NOT "System-Created Entry" THEN
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      Description := GLAcc.Name;
                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      "Allow Invoice Disc." := NOT GLAcc.InvoiceDiscountAllowed("No.");
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Inventory Posting Group");
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");

                                                                      "Posting Group" := Item."Inventory Posting Group";
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      GetUnitCost;
                                                                      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
                                                                      "Units per Parcel" := Item."Units per Parcel";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      Nonstock := Item."Created From Nonstock Item";
                                                                      "Profit %" := Item."Profit %";
                                                                      "Allow Item Charge Assignment" := TRUE;
                                                                      PrepaymentMgt.SetSalesPrepaymentPct(Rec,SalesHeader."Posting Date");

                                                                      IF SalesHeader."Language Code" <> '' THEN
                                                                        GetItemTranslation;

                                                                      IF Item.Reserve = Item.Reserve::Optional THEN
                                                                        Reserve := SalesHeader.Reserve
                                                                      ELSE
                                                                        Reserve := Item.Reserve;

                                                                      "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      Res.GET("No.");
                                                                      Res.TESTFIELD(Blocked,FALSE);
                                                                      Res.TESTFIELD("Gen. Prod. Posting Group");
                                                                      Description := Res.Name;
                                                                      "Description 2" := Res."Name 2";
                                                                      "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                      "Unit Cost (LCY)" := Res."Unit Cost";
                                                                      "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Res."Tax Group Code";
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      FindResUnitCost;
                                                                    END;
                                                                  Type::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("No.");
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      GetFAPostingGroup;
                                                                      Description := FA.Description;
                                                                      "Description 2" := FA."Description 2";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"Charge (Item)":
                                                                    BEGIN
                                                                      ItemCharge.GET("No.");
                                                                      Description := ItemCharge.Description;
                                                                      "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := ItemCharge."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                END;

                                                                VALIDATE("Prepayment %");

                                                                IF Type <> Type::" " THEN BEGIN
                                                                  IF Type <> Type::"Fixed Asset" THEN
                                                                    VALIDATE("VAT Prod. Posting Group");
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    InitOutstanding;
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      InitQtyToReceive
                                                                    ELSE
                                                                      InitQtyToShip;
                                                                    UpdateWithWarehouseShip;
                                                                  END;
                                                                  UpdateUnitPrice(FIELDNO("No."));
                                                                END;

                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  IF Type = Type::Item THEN
                                                                    IF (Quantity <> 0) AND ItemExists(xRec."No.") THEN BEGIN
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                      WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    END;
                                                                  DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;

                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                                GetItemCrossRef(FIELDNO("No."));

                                                                GetDefaultBin;

                                                                SalesHeader.GET("Document Type","Document No.");
                                                                IF SalesHeader."Bill-to IC Partner Code" <> '' THEN
                                                                  CASE Type OF
                                                                    Type::" ",Type::"Charge (Item)":
                                                                      BEGIN
                                                                        "IC Partner Ref. Type" := Type;
                                                                        "IC Partner Reference" := "No.";
                                                                      END;
                                                                    Type::"G/L Account":
                                                                      BEGIN
                                                                        "IC Partner Ref. Type" := Type;
                                                                        "IC Partner Reference" := GLAcc."Default IC Partner G/L Acc. No";
                                                                      END;

                                                                    Type::Item:
                                                                      BEGIN
                                                                        IF SalesHeader."Sell-to IC Partner Code" <> '' THEN
                                                                          ICPartner.GET(SalesHeader."Sell-to IC Partner Code")
                                                                        ELSE
                                                                          ICPartner.GET(SalesHeader."Bill-to IC Partner Code");
                                                                        CASE ICPartner."Outbound Sales Item No. Type" OF
                                                                          ICPartner."Outbound Sales Item No. Type"::"Common Item No.":
                                                                            VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
                                                                          ICPartner."Outbound Sales Item No. Type"::"Internal No.":
                                                                            BEGIN
                                                                              "IC Partner Ref. Type" := "IC Partner Ref. Type"::Item;
                                                                              "IC Partner Reference" := "No.";
                                                                            END;
                                                                          ICPartner."Outbound Sales Item No. Type"::"Cross Reference":
                                                                            BEGIN
                                                                              VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross Reference");
                                                                              ItemCrossReference.SETRANGE("Cross-Reference Type",
                                                                                ItemCrossReference."Cross-Reference Type"::Customer);
                                                                              ItemCrossReference.SETRANGE("Cross-Reference Type No.",
                                                                                "Sell-to Customer No.");
                                                                              ItemCrossReference.SETRANGE("Item No.","No.");
                                                                              IF ItemCrossReference.FINDFIRST THEN
                                                                                "IC Partner Reference" := ItemCrossReference."Cross-Reference No.";
                                                                            END;
                                                                        END;
                                                                      END;
                                                                    Type::"Fixed Asset":
                                                                      BEGIN
                                                                        "IC Partner Ref. Type" := "IC Partner Ref. Type"::" ";
                                                                        "IC Partner Reference" := '';
                                                                      END;
                                                                    Type::Resource:
                                                                      BEGIN
                                                                        Resource.GET("No.");
                                                                        "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                        "IC Partner Reference" := Resource."IC Partner Purch. G/L Acc. No.";
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Location Code"));

                                                                IF xRec."Location Code" <> "Location Code" THEN BEGIN
                                                                  TESTFIELD("Reserved Quantity",0);
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                END;

                                                                GetSalesHeader;
                                                                "Shipment Date" :=
                                                                  CalendarMgmt.CalcDateBOC(
                                                                    '',
                                                                    SalesHeader."Shipment Date",
                                                                    CalChange."Source Type"::Location,
                                                                    "Location Code",
                                                                    '',
                                                                    CalChange."Source Type"::"Shipping Agent",
                                                                    "Shipping Agent Code",
                                                                    "Shipping Agent Service Code",
                                                                    FALSE);

                                                                IF Reserve <> Reserve::Always THEN
                                                                  CheckItemAvailable(FIELDNO("Location Code"));

                                                                IF NOT "Drop Shipment" THEN BEGIN
                                                                  IF "Location Code" = '' THEN BEGIN
                                                                    IF InvtSetup.GET THEN
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  END ELSE
                                                                    IF Location.GET("Location Code") THEN
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE
                                                                  EVALUATE("Outbound Whse. Handling Time",'<0D>');

                                                                UpdateDates;

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  InitItemAppl(TRUE);
                                                                  "Bin Code" := '';
                                                                  GetDefaultBin;
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    IF NOT "Drop Shipment" THEN
                                                                      UpdateWithWarehouseShip;
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                END;

                                                                IF Type = Type::Item THEN
                                                                  GetUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almacn] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ESP=Grupo contable];
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;OnValidate=VAR
                                                                CheckDateConflict@1000 : Codeunit 99000815;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                IF CurrFieldNo <> 0 THEN
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                IF "Shipment Date" <> 0D THEN BEGIN
                                                                  IF Reserve <> Reserve::Always THEN
                                                                    IF CurrFieldNo IN [
                                                                                       FIELDNO("Planned Shipment Date"),
                                                                                       FIELDNO("Planned Delivery Date"),
                                                                                       FIELDNO("Shipment Date"),
                                                                                       FIELDNO("Shipping Time"),
                                                                                       FIELDNO("Outbound Whse. Handling Time"),
                                                                                       FIELDNO("Requested Delivery Date")]
                                                                    THEN
                                                                      CheckItemAvailable(FIELDNO("Shipment Date"));

                                                                  IF ("Shipment Date" < WORKDATE) AND (Type <> Type::" ") THEN
                                                                    IF NOT (HideValidationDialog OR HasBeenShown) AND GUIALLOWED THEN BEGIN
                                                                      MESSAGE(
                                                                        Text014,
                                                                        FIELDCAPTION("Shipment Date"),"Shipment Date",WORKDATE);
                                                                      HasBeenShown := TRUE;
                                                                    END;
                                                                END;

                                                                IF (xRec."Shipment Date" <> "Shipment Date") AND
                                                                   (Quantity <> 0) AND
                                                                   (Reserve <> Reserve::Never) AND
                                                                   NOT StatusCheckSuspended
                                                                THEN
                                                                  CheckDateConflict.SalesLineCheck(Rec,CurrFieldNo <> 0);

                                                                IF "Shipment Date" <> 0D THEN BEGIN
                                                                  IF NOT PlannedShipmentDateCalculated THEN
                                                                    "Planned Shipment Date" :=
                                                                      CalendarMgmt.CalcDateBOC(
                                                                        FORMAT(
                                                                          "Outbound Whse. Handling Time"),
                                                                        "Shipment Date",
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        TRUE);
                                                                  IF NOT PlannedDeliveryDateCalculated THEN
                                                                    "Planned Delivery Date" :=
                                                                      CalendarMgmt.CalcDateBOC(
                                                                        FORMAT("Shipping Time"),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::Customer,
                                                                        "Sell-to Customer No.",
                                                                        '',
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Shipment Date;
                                                              ESP=Fecha env¡o] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[ENU=Unit of Measure;
                                                              ESP=Unidad medida] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                CheckAssocPurchOrder(FIELDCAPTION(Quantity));

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                  IF (Quantity * "Return Qty. Received" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Return Qty. Received")) AND ("Return Receipt No." = '')) THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received")));
                                                                  IF ("Quantity (Base)" * "Return Qty. Received (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Return Qty. Received (Base)")) AND ("Return Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received (Base)")));
                                                                END ELSE BEGIN
                                                                  IF (Quantity * "Quantity Shipped" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Shipped")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Quantity Shipped")));
                                                                  IF ("Quantity (Base)" * "Qty. Shipped (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Shipped (Base)")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                END;

                                                                IF (Type = Type::"Charge (Item)") AND (CurrFieldNo <> 0) THEN BEGIN
                                                                  IF ((Quantity = 0) AND ("Qty. to Assign" <> 0)) THEN
                                                                    FIELDERROR("Qty. to Assign",STRSUBSTNO(Text009,FIELDCAPTION(Quantity),Quantity));
                                                                  IF (Quantity * "Qty. Assigned" < 0) OR (ABS(Quantity) < ABS("Qty. Assigned")) THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Qty. Assigned")));
                                                                END;

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                  InitOutstanding;
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                    InitQtyToReceive
                                                                  ELSE
                                                                    InitQtyToShip;
                                                                END;
                                                                IF Reserve <> Reserve::Always THEN
                                                                  CheckItemAvailable(FIELDNO(Quantity));
                                                                IF (Quantity * xRec.Quantity < 0) OR (Quantity = 0) THEN
                                                                  InitItemAppl(FALSE);

                                                                IF Type = Type::Item THEN BEGIN
                                                                  UpdateUnitPrice(FIELDNO(Quantity));
                                                                  IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                    ReserveSalesLine.VerifyQuantity(Rec,xRec);
                                                                    IF NOT "Drop Shipment" THEN
                                                                      UpdateWithWarehouseShip;
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    IF ("Quantity (Base)" * xRec."Quantity (Base)" <= 0) AND ("No." <> '') THEN BEGIN
                                                                      GetItem;
                                                                      IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN
                                                                        GetUnitCost;
                                                                    END;
                                                                  END;
                                                                  IF (Quantity = "Quantity Invoiced") AND (CurrFieldNo <> 0) THEN
                                                                    CheckItemChargeAssgnt;
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                END ELSE
                                                                  VALIDATE("Line Discount %");

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                   ((Amount <> 0) OR ("Amount Including VAT" <> 0) OR ("VAT Base Amount" <> 0))
                                                                THEN BEGIN
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                END;
                                                                SetDefaultQuantity;

                                                                IF ("Document Type" = "Document Type"::Invoice) AND ("Prepayment %" <> 0) THEN
                                                                  UpdatePrePaymentAmounts;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ESP=Cantidad pendiente];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Invoice" = MaxQtyToInvoice THEN
                                                                  InitQtyToInvoice
                                                                ELSE
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                IF ("Qty. to Invoice" * Quantity < 0) OR
                                                                   (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice))
                                                                THEN
                                                                  ERROR(
                                                                    Text005,
                                                                    MaxQtyToInvoice);
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase))
                                                                THEN
                                                                  ERROR(
                                                                    Text006,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                "EC Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                CalcPrepaymentToDeduct;
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice;
                                                              ESP=Cdad. a facturar];
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Qty. to Ship" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Qty. to Ship" = "Outstanding Quantity" THEN
                                                                  InitQtyToShip
                                                                ELSE BEGIN
                                                                  "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                                  CheckServItemCreation;
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ("Qty. to Ship" * Quantity < 0) OR
                                                                   (ABS("Qty. to Ship") > ABS("Outstanding Quantity")) OR
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    "Outstanding Quantity");
                                                                IF ("Qty. to Ship (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text008,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Qty. to Ship" < 0) THEN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship;
                                                              ESP=Cantidad a enviar];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=[ENU=Unit Price;
                                                              ESP=Precio venta];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Unit Cost (LCY)" <> xRec."Unit Cost (LCY)" THEN
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Unit Cost (LCY)"));

                                                                IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) AND
                                                                   (Type = Type::Item) AND ("No." <> '') AND ("Quantity (Base)" <> 0)
                                                                THEN BEGIN
                                                                  GetItem;
                                                                  IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN BEGIN
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      ERROR(
                                                                        Text037,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                        Item."Costing Method",FIELDCAPTION(Quantity));
                                                                    ERROR(
                                                                      Text038,
                                                                      FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                      Item."Costing Method",FIELDCAPTION(Quantity));
                                                                  END;
                                                                END;

                                                                GetSalesHeader;
                                                                IF SalesHeader."Currency Code" <> '' THEN BEGIN
                                                                  Currency.TESTFIELD("Unit-Amount Rounding Precision");
                                                                  "Unit Cost" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        GetDate,SalesHeader."Currency Code",
                                                                        "Unit Cost (LCY)",SalesHeader."Currency Factor"),
                                                                      Currency."Unit-Amount Rounding Precision")
                                                                END ELSE
                                                                  "Unit Cost" := "Unit Cost (LCY)";
                                                              END;

                                                   CaptionML=[ENU=Unit Cost (LCY);
                                                              ESP=Coste unitario (DL)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ESP=% IVA];
                                                   DecimalPlaces=0:6;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                "Line Discount Amount" :=
                                                                  ROUND(
                                                                    ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") *
                                                                    "Line Discount %" / 100,Currency."Amount Rounding Precision");
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                "Pmt. Disc. Given Amount" := 0;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Line Discount %;
                                                              ESP=% Descuento l¡nea];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD(Quantity);
                                                                IF ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") <> 0 THEN
                                                                  "Line Discount %" :=
                                                                    ROUND(
                                                                      "Line Discount Amount" / ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") * 100,
                                                                      0.00001)
                                                                ELSE
                                                                  "Line Discount %" := 0;
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                "Pmt. Disc. Given Amount" := 0;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Line Discount Amount;
                                                              ESP=Importe dto. l¡nea];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"No Taxable VAT":
                                                                    BEGIN
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * ("VAT %" + "EC %") / 100,Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF Amount <> 0 THEN
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text009,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        Amount +
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "VAT Base Amount","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      IF "VAT Base Amount" <> 0 THEN
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.000001)
                                                                      ELSE
                                                                      BEGIN
                                                                        "VAT %" := 0;
                                                                        "EC %" := 0;
                                                                      END;
                                                                      "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;

                                                                "Pmt. Disc. Given Amount" := 0;
                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ESP=Importe];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"No Taxable VAT":
                                                                    BEGIN
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - SalesHeader."VAT Base Discount %" / 100) * ("VAT %" + "EC %") / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      Amount :=
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "Amount Including VAT","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      IF Amount <> 0 THEN
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.000001)
                                                                      ELSE
                                                                      BEGIN
                                                                        "VAT %" := 0;
                                                                        "EC %" := 0;
                                                                      END;
                                                                      Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" := Amount;
                                                                    END;
                                                                END;

                                                                "Pmt. Disc. Given Amount" := 0;
                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ESP=Importe IVA incl.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Allow Invoice Disc." <> xRec."Allow Invoice Disc.") AND
                                                                   (NOT "Allow Invoice Disc.")
                                                                THEN BEGIN
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                  "Pmt. Disc. Given Amount" := 0;
                                                                  UpdateAmounts;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ESP=Permitir dto. factura] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ESP=Peso bruto];
                                                   DecimalPlaces=0:6 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ESP=Peso neto];
                                                   DecimalPlaces=0:6 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ESP=Unidades por lote];
                                                   DecimalPlaces=0:6 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ESP=Volumen];
                                                   DecimalPlaces=0:6 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN BEGIN
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD(Quantity);
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                    IF Quantity > 0 THEN
                                                                      FIELDERROR(Quantity,Text030);
                                                                  END ELSE BEGIN
                                                                    IF Quantity < 0 THEN
                                                                      FIELDERROR(Quantity,Text029);
                                                                  END;
                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));

                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  IF NOT ItemLedgEntry.Open THEN MESSAGE(Text042,"Appl.-to Item Entry");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ESP=Liq. por n§ orden producto] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN
                                                                  UpdateUnitPrice(FIELDNO("Customer Price Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Price Group;
                                                              ESP=Grupo precio cliente];
                                                   Editable=No }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ESP=N§ proyecto];
                                                   Editable=No }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Resource THEN BEGIN
                                                                  TestStatusOpen;
                                                                  IF WorkType.GET("Work Type Code") THEN
                                                                    VALIDATE("Unit of Measure Code",WorkType."Unit of Measure Code");
                                                                  UpdateUnitPrice(FIELDNO("Work Type Code"));
                                                                  VALIDATE("Unit Price");
                                                                  FindResUnitCost;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Work Type Code;
                                                              ESP=C¢d. tipo trabajo] }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Outstanding Amount",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Outstanding Amount;
                                                              ESP=Importe pendiente];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;CaptionML=[ENU=Qty. Shipped Not Invoiced;
                                                              ESP=Cantidad enviada no facturada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Shipped Not Invoiced;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Shipped Not Invoiced",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND("Shipped Not Invoiced",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Shipped Not Invoiced;
                                                              ESP=Enviado no facturado];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Shipped    ;Decimal       ;CaptionML=[ENU=Quantity Shipped;
                                                              ESP=Cantidad enviada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ESP=Cantidad facturada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Shipment No.        ;Code20        ;CaptionML=[ENU=Shipment No.;
                                                              ESP=N§ albar n];
                                                   Editable=No }
    { 64  ;   ;Shipment Line No.   ;Integer       ;CaptionML=[ENU=Shipment Line No.;
                                                              ESP=N§ l¡nea albar n];
                                                   Editable=No }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=[ENU=Profit %;
                                                              ESP=% Bf§ bruto];
                                                   DecimalPlaces=0:6;
                                                   Editable=No }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ESP=Factura-a N§ cliente];
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                CalcInvDiscToInvoice;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Inv. Discount Amount;
                                                              ESP=Importe dto. factura];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Purchase Order No.  ;Code20        ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Purchase Order No." <> "Purchase Order No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Purchase Order No.;
                                                              ESP=N§ pedido compra];
                                                   Editable=No }
    { 72  ;   ;Purch. Order Line No.;Integer      ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Purchase Order No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Purch. Order Line No." <> "Purch. Order Line No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Purch. Order Line No.;
                                                              ESP=N§ l¡nea pedido compra];
                                                   Editable=No }
    { 73  ;   ;Drop Shipment       ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Order);
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Job No.",'');

                                                                IF "Drop Shipment" THEN
                                                                  TESTFIELD("Special Order",FALSE);

                                                                CheckAssocPurchOrder(FIELDCAPTION("Drop Shipment"));

                                                                IF "Drop Shipment" THEN
                                                                  "Bin Code" := '';

                                                                IF Reserve <> Reserve::Always THEN
                                                                  CheckItemAvailable(FIELDNO("Drop Shipment"));

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                IF (xRec."Drop Shipment" <> "Drop Shipment") AND (Quantity <> 0) THEN BEGIN
                                                                  IF NOT "Drop Shipment" THEN
                                                                    UpdateWithWarehouseShip
                                                                  ELSE
                                                                    InitQtyToShip;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Drop Shipment;
                                                              ESP=Env¡o directo];
                                                   Editable=Yes }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ESP=Grupo contable negocio] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Job Contract Entry No.",0);
                                                                TestStatusOpen;
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ESP=Grupo contable producto] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ESP=Tipo c lculo IVA];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax,No Taxable VAT;
                                                                    ESP=Normal,Reversi¢n,Total,Impto. venta,No sujeto];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax,No Taxable VAT;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ESP=Naturaleza transacci¢n] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ESP=Modo transporte] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ESP=N§ l¡nea texto adicional];
                                                   Editable=No }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ESP=Puerto/Aerop. carga] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ESP=C¢d. provincia] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ESP=Especificaci¢n transacci¢n] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ESP=C¢d.  rea impuesto] }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ESP=Sujeto a impuesto] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ESP=C¢d. grupo impuesto] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ESP=Grupo registro IVA neg.] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT Difference" := 0;
                                                                "EC Difference" := 0;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "EC %" := VATPostingSetup."EC %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                  BEGIN
                                                                    "VAT %" := 0;
                                                                    "EC %" := 0;
                                                                  END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Sales VAT Account");
                                                                    END;
                                                                END;
                                                                IF SalesHeader."Prices Including VAT" AND (Type IN [Type::Item,Type::Resource]) THEN
                                                                  "Unit Price" :=
                                                                    ROUND(
                                                                      "Unit Price" * ((100 + "VAT %" + "EC %"))/ ((100 + xRec."VAT %" + xRec."EC %")),
                                                                      Currency."Unit-Amount Rounding Precision");
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ESP=Grupo registro IVA prod.] }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=C¢d. divisa];
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=[ENU=Outstanding Amount (LCY);
                                                              ESP=Importe pendiente (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 93  ;   ;Shipped Not Invoiced (LCY);Decimal ;CaptionML=[ENU=Shipped Not Invoiced (LCY);
                                                              ESP=Enviado no facturado (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(37),
                                                                                                        Source Subtype=FIELD(Document Type),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ESP=Cantidad reservada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 96  ;   ;Reserve             ;Option        ;OnValidate=BEGIN
                                                                IF Reserve <> Reserve::Never THEN BEGIN
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                END;
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                IF (Reserve = Reserve::Never) AND ("Reserved Qty. (Base)" > 0) THEN
                                                                  TESTFIELD("Reserved Qty. (Base)",0);

                                                                IF xRec.Reserve = Reserve::Always THEN BEGIN
                                                                  GetItem;
                                                                  IF Item.Reserve = Item.Reserve::Always THEN
                                                                    TESTFIELD(Reserve,Reserve::Always);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Reserve;
                                                              ESP=Reserva];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ESP=Nunca,Opcional,Siempre];
                                                   OptionString=Never,Optional,Always }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF "Blanket Order No." = '' THEN
                                                                  "Blanket Order Line No." := 0
                                                                ELSE
                                                                  VALIDATE("Blanket Order Line No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Quantity Shipped",0);
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ESP=N§ pedido abierto] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF "Blanket Order Line No." <> 0 THEN BEGIN
                                                                  SalesLine2.GET("Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
                                                                  SalesLine2.TESTFIELD(Type,Type);
                                                                  SalesLine2.TESTFIELD("No.","No.");
                                                                  SalesLine2.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                                                                  SalesLine2.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ESP=N§ l¡n. pedido abierto] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ESP=Importe base IVA];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ESP=Coste unitario];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ESP=Asiento autom tico];
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");
                                                                GetSalesHeader;
                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");
                                                                VALIDATE(
                                                                  "Line Discount Amount",ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Amount");
                                                              END;

                                                   CaptionML=[ENU=Line Amount;
                                                              ESP=Importe l¡nea];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ESP=Diferencia  IVA];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=[ENU=Inv. Disc. Amount to Invoice;
                                                              ESP=Importe dto. fact. para facturar];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              ESP=Identific. IVA];
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                IF "IC Partner Ref. Type" <> xRec."IC Partner Ref. Type" THEN
                                                                  "IC Partner Reference" := '';
                                                                IF "IC Partner Ref. Type" = "IC Partner Ref. Type"::"Common Item No." THEN
                                                                  BEGIN
                                                                  IF Item."No." <> "No." THEN
                                                                    Item.GET("No.");
                                                                  "IC Partner Reference" := Item."Common Item No.";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Ref. Type;
                                                              ESP=Tipo referencia socio IC];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.";
                                                                    ESP=" ,Cuenta,Producto,,,Cargo (prod.),Referencia cruzada,N§ producto com£n"];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;OnLookup=VAR
                                                              ICGLAccount@1000 : Record 410;
                                                              ItemCrossReference@1001 : Record 5717;
                                                            BEGIN
                                                              IF "No." <> '' THEN
                                                                CASE "IC Partner Ref. Type" OF
                                                                  "IC Partner Ref. Type"::"G/L Account":
                                                                    BEGIN
                                                                      IF ICGLAccount.GET("IC Partner Reference") THEN;
                                                                      IF FORM.RUNMODAL(FORM::"IC G/L Account List",ICGLAccount) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ICGLAccount."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::Item:
                                                                    BEGIN
                                                                      IF Item.GET("IC Partner Reference") THEN;
                                                                      IF FORM.RUNMODAL(FORM::"Item List",Item) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",Item."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Cross Reference":
                                                                    BEGIN
                                                                      ItemCrossReference.RESET;
                                                                      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                                      ItemCrossReference.SETFILTER(
                                                                        "Cross-Reference Type",'%1|%2',
                                                                        ItemCrossReference."Cross-Reference Type"::Customer,
                                                                        ItemCrossReference."Cross-Reference Type"::" ");
                                                                      ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',"Sell-to Customer No.",'');
                                                                      IF FORM.RUNMODAL(FORM::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemCrossReference."Cross-Reference No.");
                                                                    END;
                                                                END;
                                                            END;

                                                   CaptionML=[ENU=IC Partner Reference;
                                                              ESP=Referencia socio IC] }
    { 109 ;   ;Prepayment %        ;Decimal       ;OnValidate=VAR
                                                                GenPostingSetup@1001 : Record 252;
                                                                GLAcc@1000 : Record 15;
                                                              BEGIN
                                                                IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
                                                                  TESTFIELD("Document Type","Document Type"::Order);
                                                                  TESTFIELD("No.");
                                                                  IF CurrFieldNo = FIELDNO("Prepayment %") THEN
                                                                    IF "System-Created Entry" THEN
                                                                      FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
                                                                  IF "System-Created Entry" THEN
                                                                    "Prepayment %" := 0;
                                                                  GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                                                                  IF GenPostingSetup."Sales Prepayments Account" <> '' THEN BEGIN
                                                                    GLAcc.GET(GenPostingSetup."Sales Prepayments Account");
                                                                    VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
                                                                  END ELSE
                                                                    CLEAR(VATPostingSetup);
                                                                  "Prepayment VAT %" := VATPostingSetup."VAT %";
                                                                  "Prepayment EC %" := VATPostingSetup."EC %";
                                                                  "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
                                                                  "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                  CASE "Prepmt. VAT Calc. Type" OF
                                                                    "VAT Calculation Type"::"Reverse Charge VAT",
                                                                    "VAT Calculation Type"::"Sales Tax":
                                                                      BEGIN
                                                                        "Prepayment VAT %" := 0;
                                                                        "Prepayment EC %" := 0;
                                                                      END;
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      FIELDERROR("Prepmt. VAT Calc. Type",STRSUBSTNO(Text041,"Prepmt. VAT Calc. Type"));
                                                                  END;
                                                                  "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
                                                                END;

                                                                TestStatusOpen;

                                                                IF Type <> Type::" " THEN
                                                                  UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ESP=% prepago];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Line Amount");
                                                                IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text044,"Prepmt. Amt. Inv."));
                                                                IF "Prepmt. Line Amount" > "Line Amount" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text043,"Line Amount"));
                                                                IF "System-Created Entry" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
                                                                IF Quantity <> 0 THEN
                                                                  VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" /
                                                                      ("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity) * 100,0.00001))
                                                                ELSE
                                                                  VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" * 100 / "Line Amount",0.00001));
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Line Amount;
                                                              ESP=Importe l¡nea prepago];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=[ENU=Prepmt. Amt. Inv.;
                                                              ESP=Importe prepago facturado];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=[ENU=Prepmt. Amt. Incl. VAT;
                                                              ESP=Importe prepago incl. IVA];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=[ENU=Prepayment Amount;
                                                              ESP=Importe prepago];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=[ENU=Prepmt. VAT Base Amt.;
                                                              ESP=Importe base IVA prepago];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=[ENU=Prepayment VAT %;
                                                              ESP=% IVA prepago];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   Editable=No }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=[ENU=Prepmt. VAT Calc. Type;
                                                              ESP=Tipo calc. IVA prepago];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ESP=Normal,Reversi¢n,Total,Impto. venta];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 117 ;   ;Prepayment VAT Identifier;Code10   ;CaptionML=[ENU=Prepayment VAT Identifier;
                                                              ESP=Identificador IVA prepago];
                                                   Editable=No }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Area Code;
                                                              ESP=C¢d.  rea impuesto prepago] }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Liable;
                                                              ESP=Sujeto a impuesto prepago] }
    { 120 ;   ;Prepayment Tax Group Code;Code10   ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Group Code;
                                                              ESP=C¢d. grupo impuesto prepago] }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;OnValidate=BEGIN
                                                                IF "Prepmt Amt to Deduct" > "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Prepmt. Amt. Inv." - "Prepmt Amt Deducted"));

                                                                IF "Prepmt Amt to Deduct" > "Qty. to Invoice" * "Prepmt Amt Deducted" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Qty. to Invoice" * "Prepmt Amt Deducted"));
                                                              END;

                                                   CaptionML=[ENU=Prepmt Amt to Deduct;
                                                              ESP=Importe prepago para descontar];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=[ENU=Prepmt Amt Deducted;
                                                              ESP=Importe prepago descontado];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=[ENU=Prepayment Line;
                                                              ESP=L¡nea prepago];
                                                   Editable=No }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=[ENU=Prepmt. Amount Inv. Incl. VAT;
                                                              ESP=Importe prepago fact. incl. IVA];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 129 ;   ;Prepmt. Amount Inv. (LCY);Decimal  ;CaptionML=[ENU=Prepmt. Amount Inv. (LCY);
                                                              ESP=Importe prepago fact. (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::"G/L Account");
                                                                  GetSalesHeader;
                                                                  SalesHeader.TESTFIELD("Sell-to IC Partner Code",'');
                                                                  SalesHeader.TESTFIELD("Bill-to IC Partner Code",'');
                                                                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Code;
                                                              ESP=C¢digo socio IC] }
    { 135 ;   ;Prepayment VAT Difference;Decimal  ;CaptionML=[ENU=Prepayment VAT Difference;
                                                              ESP=Diferencia IVA prepago];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 136 ;   ;Prepmt VAT Diff. to Deduct;Decimal ;CaptionML=[ENU=Prepmt VAT Diff. to Deduct;
                                                              ESP=Diferencia IVA prepago a deducir];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 137 ;   ;Prepmt VAT Diff. Deducted;Decimal  ;CaptionML=[ENU=Prepmt VAT Diff. Deducted;
                                                              ESP=Diferencia IVA prepago deducida];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ESP=N§ tarea proyecto];
                                                   Editable=No }
    { 1002;   ;Job Contract Entry No.;Integer     ;OnValidate=VAR
                                                                JobPlanningLine@1001 : Record 1003;
                                                              BEGIN
                                                                JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
                                                                JobPlanningLine.SETRANGE("Job Contract Entry No.","Job Contract Entry No.");
                                                                JobPlanningLine.FINDFIRST;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,JobPlanningLine."Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Job Contract Entry No.;
                                                              ESP=N§ mov. contrato proyecto];
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Job Contract Entry No.",0);
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD(Type,Type::Item);
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Variant Code"));

                                                                IF xRec."Variant Code" <> "Variant Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');

                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                  InitItemAppl(FALSE);
                                                                END;

                                                                IF Reserve <> Reserve::Always THEN
                                                                  CheckItemAvailable(FIELDNO("Variant Code"));

                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetUnitCost;
                                                                  UpdateUnitPrice(FIELDNO("Variant Code"));
                                                                END;

                                                                IF (xRec."Variant Code" <> "Variant Code") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                GetItemCrossRef(FIELDNO("Variant Code"));
                                                                GetDefaultBin;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 5403;   ;Bin Code            ;Code20        ;OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN
                                                                  IF (("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND (Quantity >= 0)) OR
                                                                     (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND (Quantity < 0))
                                                                  THEN
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')
                                                                  ELSE
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');

                                                                IF "Drop Shipment" THEN
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Bin Code"));

                                                                TESTFIELD("Location Code");

                                                                IF (Type = Type::Item) AND ("Bin Code" <> '') THEN BEGIN
                                                                  TESTFIELD("Drop Shipment",FALSE);
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  CheckWarehouse;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              IF (("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND (Quantity >= 0)) OR
                                                                 (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND (Quantity < 0))
                                                              THEN
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")
                                                              ELSE
                                                                BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5405;   ;Planned             ;Boolean       ;CaptionML=[ENU=Planned;
                                                              ESP=Planificada];
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasureTranslation@1000 : Record 5402;
                                                                ResUnitofMeasure@1001 : Record 205;
                                                              BEGIN
                                                                TESTFIELD("Job Contract Entry No.",0);
                                                                TestStatusOpen;
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                CheckAssocPurchOrder(FIELDCAPTION("Unit of Measure Code"));

                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  IF NOT UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetSalesHeader;
                                                                  IF SalesHeader."Language Code" <> '' THEN BEGIN
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",SalesHeader."Language Code");
                                                                    IF UnitOfMeasureTranslation.FINDFIRST THEN
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  END;
                                                                END;
                                                                GetItemCrossRef(FIELDNO("Unit of Measure Code"));
                                                                CASE Type OF
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      GetUnitCost;
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      IF Reserve <> Reserve::Always THEN
                                                                        CheckItemAvailable(FIELDNO("Unit of Measure Code"));
                                                                      "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                      "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                      "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                      "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                      IF (xRec."Unit of Measure Code" <> "Unit of Measure Code") AND (Quantity <> 0) THEN
                                                                        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                      IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
                                                                        InitItemAppl(FALSE);
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      IF "Unit of Measure Code" = '' THEN BEGIN
                                                                        GetResource;
                                                                        "Unit of Measure Code" := Resource."Base Unit of Measure";
                                                                      END;
                                                                      ResUnitofMeasure.GET("No.","Unit of Measure Code");
                                                                      "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      FindResUnitCost;
                                                                    END;
                                                                  Type::"G/L Account",Type::"Fixed Asset",Type::"Charge (Item)",Type::" ":
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END;
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Job Contract Entry No.",0);
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateUnitPrice(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base)];
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ESP=Cdad. pendiente (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice (Base);
                                                              ESP=Cdad. a facturar (base)];
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship (Base);
                                                              ESP=Cdad. a enviar (base)];
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Shipped Not Invd. (Base);Decimal;
                                                   CaptionML=[ENU=Qty. Shipped Not Invd. (Base);
                                                              ESP=Cdad. enviada no fact. (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5460;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              ESP=Cdad. enviada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ESP=Cdad. facturada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(37),
                                                                                                                 Source Subtype=FIELD(Document Type),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure");
                                                                CALCFIELDS("Reserved Quantity");
                                                                Planned := "Reserved Quantity" = "Outstanding Quantity";
                                                              END;

                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ESP=Cdad. reservada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ESP=A/F Fecha registro] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ESP=C¢d. libro amortizaci¢n] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ESP=A/F Amort. hasta fecha reg.] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ESP=Duplicado en libro amort.] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   CaptionML=[ENU=Use Duplication List;
                                                              ESP=Utilizar lista duplicados] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.");
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ESP=Centro responsabilidad];
                                                   Editable=No }
    { 5701;   ;Out-of-Stock Substitution;Boolean  ;CaptionML=[ENU=Out-of-Stock Substitution;
                                                              ESP=Sustituc. por falta de stock];
                                                   Editable=No }
    { 5702;   ;Substitution Available;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                No.=FIELD(No.),
                                                                                                Substitute Type=CONST(Item)));
                                                   CaptionML=[ENU=Substitution Available;
                                                              ESP=Disponible sustituci¢n];
                                                   Editable=No }
    { 5703;   ;Originally Ordered No.;Code20      ;TableRelation=IF (Type=CONST(Item)) Item;
                                                   CaptionML=[ENU=Originally Ordered No.;
                                                              ESP=N§ pedido originalmente] }
    { 5704;   ;Originally Ordered Var. Code;Code10;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(Originally Ordered No.));
                                                   CaptionML=[ENU=Originally Ordered Var. Code;
                                                              ESP=C¢d. var. ped. originalmente] }
    { 5705;   ;Cross-Reference No. ;Code20        ;OnValidate=VAR
                                                                ReturnedCrossRef@1000 : Record 5717;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                                                                ReturnedCrossRef.INIT;
                                                                IF "Cross-Reference No." <> '' THEN BEGIN
                                                                  DistIntegration.ICRLookupSalesItem(Rec,ReturnedCrossRef);
                                                                  IF "No." <> ReturnedCrossRef."Item No." THEN
                                                                    VALIDATE("No.",ReturnedCrossRef."Item No.");
                                                                  IF ReturnedCrossRef."Variant Code" <> '' THEN
                                                                    VALIDATE("Variant Code",ReturnedCrossRef."Variant Code");

                                                                  IF ReturnedCrossRef."Unit of Measure" <> '' THEN
                                                                    VALIDATE("Unit of Measure Code",ReturnedCrossRef."Unit of Measure");
                                                                END;

                                                                "Unit of Measure (Cross Ref.)" := ReturnedCrossRef."Unit of Measure";
                                                                "Cross-Reference Type" := ReturnedCrossRef."Cross-Reference Type";
                                                                "Cross-Reference Type No." := ReturnedCrossRef."Cross-Reference Type No.";
                                                                "Cross-Reference No." := ReturnedCrossRef."Cross-Reference No.";

                                                                IF ReturnedCrossRef.Description <> '' THEN
                                                                  Description := ReturnedCrossRef.Description;

                                                                UpdateUnitPrice(FIELDNO("Cross-Reference No."));

                                                                IF SalesHeader."Send IC Document" AND (SalesHeader."IC Direction" = SalesHeader."IC Direction"::Outgoing) THEN BEGIN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"Cross Reference";
                                                                  "IC Partner Reference" := "Cross-Reference No.";
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CrossReferenceNoLookUp;
                                                            END;

                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ESP=N§ referencia cruzada] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ESP=Unidad de medida (ref.cruz.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ESP=Tipo referencia cruzada];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ESP=" ,Cliente,Prov.,C¢d. barra"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ESP=N§ tipo referencia cruzada] }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ESP=C¢d. categor¡a producto] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Nonstock;
                                                              ESP=Prod. sin stock];
                                                   Editable=No }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD(Type,Type::Item);
                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                IF PurchasingCode.GET("Purchasing Code") THEN BEGIN
                                                                  "Drop Shipment" := PurchasingCode."Drop Shipment";
                                                                  "Special Order" := PurchasingCode."Special Order";
                                                                  IF "Drop Shipment" OR "Special Order" THEN BEGIN
                                                                    Reserve := Reserve::Never;
                                                                    VALIDATE(Quantity,Quantity);
                                                                    IF "Drop Shipment" THEN BEGIN
                                                                      EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                      EVALUATE("Shipping Time",'<0D>');
                                                                      UpdateDates;
                                                                      "Bin Code" := '';
                                                                    END;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Drop Shipment" := FALSE;
                                                                  "Special Order" := FALSE;

                                                                  GetItem;
                                                                  IF Item.Reserve = Item.Reserve::Optional THEN BEGIN
                                                                    GetSalesHeader;
                                                                    Reserve := SalesHeader.Reserve;
                                                                  END ELSE
                                                                    Reserve := Item.Reserve;
                                                                END;

                                                                IF ("Purchasing Code" <> xRec."Purchasing Code") AND
                                                                   (NOT "Drop Shipment") AND
                                                                   ("Drop Shipment" <> xRec."Drop Shipment")
                                                                THEN BEGIN
                                                                  IF "Location Code" = '' THEN BEGIN
                                                                    IF InvtSetup.GET THEN
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  END ELSE
                                                                    IF Location.GET("Location Code") THEN
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                  IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  ELSE BEGIN
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  END;
                                                                  UpdateDates;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Purchasing Code;
                                                              ESP=C¢d. compra] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ESP=C¢d. grupo producto] }
    { 5713;   ;Special Order       ;Boolean       ;CaptionML=[ENU=Special Order;
                                                              ESP=Pedido especial];
                                                   Editable=No }
    { 5714;   ;Special Order Purchase No.;Code20  ;TableRelation=IF (Special Order=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Special Order Purchase No.;
                                                              ESP=N§ pedido compra especial] }
    { 5715;   ;Special Order Purch. Line No.;Integer;
                                                   TableRelation=IF (Special Order=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Special Order Purchase No.));
                                                   CaptionML=[ENU=Special Order Purch. Line No.;
                                                              ESP=N§ l¡n. ped. compra especial] }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(37),
                                                                                                                              Source Subtype=FIELD(Document Type),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse. Outstanding Qty. (Base);
                                                              ESP=Cdad. pdte. almacn (base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=[ENU=Completely Shipped;
                                                              ESP=Enviado completamente];
                                                   Editable=No }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Requested Delivery Date" <> xRec."Requested Delivery Date") AND
                                                                   ("Promised Delivery Date" <> 0D)
                                                                THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Requested Delivery Date")
                                                                ELSE BEGIN
                                                                  GetSalesHeader;
                                                                  VALIDATE("Shipment Date",SalesHeader."Shipment Date");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Requested Delivery Date;
                                                              ESP=Fecha entrega requerida] }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Promised Delivery Date")
                                                                ELSE
                                                                  VALIDATE("Requested Delivery Date");
                                                              END;

                                                   CaptionML=[ENU=Promised Delivery Date;
                                                              ESP=Fecha entrega prometida] }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateDates;
                                                              END;

                                                   CaptionML=[ENU=Shipping Time;
                                                              ESP=Tiempo env¡o] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateDates;
                                                              END;

                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ESP=Tiempo manip. alm. salida] }
    { 5794;   ;Planned Delivery Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Planned Delivery Date" <> 0D THEN BEGIN
                                                                  PlannedDeliveryDateCalculated := TRUE;

                                                                  IF FORMAT("Shipping Time") <> '' THEN
                                                                    VALIDATE(
                                                                      "Planned Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC2(
                                                                        FORMAT("Shipping Time"),
                                                                        "Planned Delivery Date",
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        CalChange."Source Type"::Customer,
                                                                        "Sell-to Customer No.",
                                                                        '',
                                                                        TRUE))
                                                                  ELSE
                                                                    VALIDATE(
                                                                      "Planned Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC(
                                                                        FORMAT(''),
                                                                        "Planned Delivery Date",
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        CalChange."Source Type"::Customer,
                                                                        "Sell-to Customer No.",
                                                                        '',
                                                                        TRUE));

                                                                  IF "Planned Shipment Date" > "Planned Delivery Date" THEN
                                                                    "Planned Delivery Date" := "Planned Shipment Date";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Planned Delivery Date;
                                                              ESP=Fecha entrega planificada] }
    { 5795;   ;Planned Shipment Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Planned Shipment Date" <> 0D THEN BEGIN
                                                                  PlannedShipmentDateCalculated := TRUE;

                                                                  IF FORMAT("Outbound Whse. Handling Time") <> '' THEN
                                                                    VALIDATE(
                                                                      "Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC2(
                                                                        FORMAT("Outbound Whse. Handling Time"),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        FALSE))
                                                                  ELSE
                                                                    VALIDATE(
                                                                      "Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC(
                                                                        FORMAT(FORMAT('')),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        FALSE));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Planned Shipment Date;
                                                              ESP=Fecha env¡o planificada] }
    { 5796;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ESP=C¢d. transportista] }
    { 5797;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Service Code" <> xRec."Shipping Agent Service Code" THEN
                                                                  EVALUATE("Shipping Time",'<>');

                                                                IF "Drop Shipment" THEN BEGIN
                                                                  EVALUATE("Shipping Time",'<0D>');
                                                                  UpdateDates;
                                                                END ELSE BEGIN
                                                                  IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  ELSE BEGIN
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  END;
                                                                END;

                                                                IF ShippingAgentServices."Shipping Time" <> xRec."Shipping Time" THEN
                                                                  VALIDATE("Shipping Time","Shipping Time");
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ESP=C¢d. servicio transportista] }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                CheckItemChargeAssgnt;
                                                              END;

                                                   CaptionML=[ENU=Allow Item Charge Assignment;
                                                              ESP=Permitir asign. cargos prod.] }
    { 5801;   ;Qty. to Assign      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. to Assign" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(Document No.),
                                                                                                                            Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. to Assign;
                                                              ESP=Cdad. a asignar];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5802;   ;Qty. Assigned       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. Assigned" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(Document No.),
                                                                                                                           Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. Assigned;
                                                              ESP=Cdad. asignada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5803;   ;Return Qty. to Receive;Decimal     ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Return Qty. to Receive" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Return Qty. to Receive" = Quantity - "Return Qty. Received" THEN
                                                                  InitQtyToReceive
                                                                ELSE BEGIN
                                                                  "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ("Return Qty. to Receive" * Quantity < 0) OR
                                                                   (ABS("Return Qty. to Receive") > ABS("Outstanding Quantity")) OR
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text020,
                                                                    "Outstanding Quantity");
                                                                IF ("Return Qty. to Receive (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Return Qty. to Receive (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text021,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Return Qty. to Receive" > 0) THEN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                              END;

                                                   CaptionML=[ENU=Return Qty. to Receive;
                                                              ESP=Cantidad dev. a recibir];
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Receive (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Return Qty. to Receive","Return Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Return Qty. to Receive (Base);
                                                              ESP=Cantidad dev. a recibir (Base)];
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Rcd. Not Invd.;Decimal ;CaptionML=[ENU=Return Qty. Rcd. Not Invd.;
                                                              ESP=Cantidad dev. rec. no fact.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5806;   ;Ret. Qty. Rcd. Not Invd.(Base);Decimal;
                                                   CaptionML=[ENU=Ret. Qty. Rcd. Not Invd.(Base);
                                                              ESP=Cantidad dev. rec. no fact.(Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5807;   ;Return Rcd. Not Invd.;Decimal      ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Return Rcd. Not Invd.",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND("Return Rcd. Not Invd.",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Return Rcd. Not Invd.;
                                                              ESP=Dev. recib. no facturada];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Return Rcd. Not Invd. (LCY);Decimal;CaptionML=[ENU=Return Rcd. Not Invd. (LCY);
                                                              ESP=Dev. recib. no facturada (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Received;Decimal       ;CaptionML=[ENU=Return Qty. Received;
                                                              ESP=Cantidad dev. rec.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5810;   ;Return Qty. Received (Base);Decimal;CaptionML=[ENU=Return Qty. Received (Base);
                                                              ESP=Cantidad  dev. rec. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5811;   ;Appl.-from Item Entry;Integer      ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Appl.-from Item Entry" <> 0 THEN BEGIN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-from Item Entry"));
                                                            END;

                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ESP=Liquid.-de mov. pdto];
                                                   MinValue=0 }
    { 5909;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=BOM Item No.;
                                                              ESP=N§ L.M. pdto.] }
    { 6600;   ;Return Receipt No.  ;Code20        ;CaptionML=[ENU=Return Receipt No.;
                                                              ESP=N§ recep. devol.];
                                                   Editable=No }
    { 6601;   ;Return Receipt Line No.;Integer    ;CaptionML=[ENU=Return Receipt Line No.;
                                                              ESP=N§ l¡n. recep. dev.];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   OnValidate=BEGIN
                                                                IF "Return Reason Code" = '' THEN
                                                                  UpdateUnitPrice(FIELDNO("Return Reason Code"));

                                                                IF ReturnReason.GET("Return Reason Code") THEN BEGIN
                                                                  IF ReturnReason."Default Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",ReturnReason."Default Location Code");
                                                                  IF ReturnReason."Inventory Value Zero" THEN BEGIN
                                                                    VALIDATE("Unit Cost (LCY)",0);
                                                                    VALIDATE("Unit Price",0);
                                                                  END ELSE
                                                                    IF "Unit Price" = 0 THEN
                                                                      UpdateUnitPrice(FIELDNO("Return Reason Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Return Reason Code;
                                                              ESP=C¢d. motivo dev.] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ESP=Permite dto. l¡nea] }
    { 7002;   ;Customer Disc. Group;Code10        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN
                                                                  UpdateUnitPrice(FIELDNO("Customer Disc. Group"))
                                                              END;

                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ESP=Grupo dto. cliente] }
    { 10700;  ;Pmt. Disc. Given Amount;Decimal    ;OnValidate=BEGIN
                                                                TESTFIELD(Quantity);
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Pmt. Disc. Given Amount;
                                                              ESP=Dto. P.P.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 10701;  ;EC %                ;Decimal       ;CaptionML=[ENU=EC %;
                                                              ESP=% RE] }
    { 10702;  ;EC Difference       ;Decimal       ;CaptionML=[ENU=EC Difference;
                                                              ESP=Diferencia RE];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 10703;  ;Prepayment EC %     ;Decimal       ;CaptionML=[ENU=Prepayment EC %;
                                                              ESP=Prepago %RE];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   Editable=No }
    { 50000;  ;Marca               ;Code20        ;CaptionML=ESP=Marca;
                                                   Description=$001 }
    { 50001;  ;Tipo de Clave       ;Code10        ;TableRelation="Maestro de Claves".Clave;
                                                   CaptionML=ESP=Tipo de Clave;
                                                   Description=$001 "Maestro de Claves".Clave }
    { 50002;  ;Personas            ;Integer       ;CaptionML=ESP=Personas;
                                                   Description=$001 }
    { 50003;  ;Dias                ;Integer       ;CaptionML=ESP=Dias;
                                                   Description=$001 }
    { 50005;  ;Importe signo       ;Decimal       ;CaptionML=ESP=Importe signo;
                                                   Description=$001 Campo usado en la contabilizacion }
    { 7000100;;Fecha servicio      ;Date          ;CaptionML=ESP=Fecha servicio;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000101;;Servicio            ;Code10        ;CaptionML=ESP=Servicio;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000102;;Vuelo               ;Code250       ;CaptionML=ESP=Vuelo;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000103;;Letra               ;Code10        ;CaptionML=ESP=Letra;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000104;;Bus                 ;Code10        ;CaptionML=ESP=Bus;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000105;;N§ Parte            ;Code10        ;CaptionML=ESP=N§ Parte;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000106;;Origen              ;Code10        ;CaptionML=ESP=Origen;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000107;;Destino             ;Code10        ;CaptionML=ESP=Destino;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000108;;Paxes               ;Decimal       ;CaptionML=ESP=Paxes;
                                                   DecimalPlaces=0:2;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000109;;Plazas              ;Decimal       ;CaptionML=ESP=Plazas;
                                                   DecimalPlaces=0:2;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000110;;Zona                ;Code10        ;CaptionML=ESP=Zona;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000111;;Hora                ;Time          ;CaptionML=ESP=Hora;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000112;;Importe Impresion   ;Decimal       ;CaptionML=ESP=Importe Impresion;
                                                   Description=Impresion facturas;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 7000113;;Importe Impresion con;Decimal      ;CaptionML=ESP=Importe Impresion con;
                                                   Description=Impresion facturas;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 7000114;;Precio Impresion    ;Decimal       ;CaptionML=ESP=Precio Impresion;
                                                   Description=Impresion facturas;
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 7000115;;Precio Impresion con;Decimal       ;CaptionML=ESP=Precio Impresion con;
                                                   Description=Impresion facturas;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 7000116;;Tipo aplicacion     ;Option        ;CaptionML=ESP=Tipo aplicacion;
                                                   OptionCaptionML=ESP=Vehiculo,Pax;
                                                   OptionString=Vehiculo,Pax;
                                                   Description=Impresion facturas;
                                                   Editable=No }
    { 7000117;;N§ Servicios        ;Decimal       ;CaptionML=ESP=N§ Servicios;
                                                   Description=Impresion facturas }
    { 7000118;;Ni¤os Facturados    ;Decimal       ;CaptionML=ESP=Ni¤os Facturados;
                                                   Description=Impresion facturas }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;SumIndexFields=Amount,Amount Including VAT,Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY);
                                                   Clustered=Yes }
    {    ;Document No.,Line No.,Document Type      }
    {    ;Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   SIFTLevelsToMaintain=[{Document Type,Type},
                                                                         {Document Type,Type,No.},
                                                                         {Document Type,Type,No.,Variant Code},
                                                                         {Document Type,Type,No.,Variant Code,Drop Shipment},
                                                                         {Document Type,Type,No.,Variant Code,Drop Shipment,Location Code},
                                                                         {Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date:Year},
                                                                         {Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date:Month},
                                                                         {Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date:Day},
                                                                         {Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date:Day,Document No.}] }
    {    ;Document Type,Bill-to Customer No.,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY),Return Rcd. Not Invd. (LCY) }
    { No ;Document Type,Type,No.,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Shipment Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   KeyGroups=Item(Dim) }
    {    ;Document Type,Bill-to Customer No.,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY);
                                                   KeyGroups=Cust(Dim) }
    {    ;Document Type,Blanket Order No.,Blanket Order Line No.;
                                                   KeyGroups=SOP(Blank) }
    {    ;Document Type,Document No.,Location Code }
    {    ;Document Type,Shipment No.,Shipment Line No. }
    {    ;Type,No.,Variant Code,Drop Shipment,Location Code,Document Type,Shipment Date;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Sell-to Customer No.       }
    {    ;Job Contract Entry No.                   }
    { No ;Marca                                   ;KeyGroups=INCOMING;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete the order line because it is associated with purchase order %1 line %2.;ESP=No se puede eliminar la l¡nea del pedido porque est  asociada a la l¡nea %2 del pedido de compra %1.';
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      Text002@1002 : TextConst 'ENU=You cannot change %1 because the order line is associated with purchase order %2 line %3.;ESP=No se puede cambiar %1 porque la l¡nea de pedido est  asociada a la l¡nea %3 del pedido de compra %2.';
      Text003@1003 : TextConst 'ENU=must not be less than %1;ESP=No puede ser inferior a %1.';
      Text005@1004 : TextConst 'ENU=You cannot invoice more than %1 units.;ESP=No se pueden facturar m s de %1 unidades.';
      Text006@1005 : TextConst 'ENU=You cannot invoice more than %1 base units.;ESP=No se pueden facturar m s de %1 unidades base.';
      Text007@1006 : TextConst 'ENU=You cannot ship more than %1 units.;ESP=No se pueden enviar m s de %1 unidades.';
      Text008@1007 : TextConst 'ENU=You cannot ship more than %1 base units.;ESP=No se pueden enviar m s de %1 unidades base.';
      Text009@1008 : TextConst 'ENU=" must be 0 when %1 is %2";ESP=" debe ser 0 cuando %1 es %2"';
      Text011@1010 : TextConst 'ENU=Automatic reservation is not possible.\Reserve items manually?;ESP=No se puede reservar autom ticamente.\¨Desea reservar los productos manualmente?';
      Text012@1011 : TextConst 'ENU=Change %1 from %2 to %3?;ESP=¨Desea cambiar %1 de %2 a %3?';
      Text014@1013 : TextConst 'ENU=%1 %2 is before work date %3;ESP=%1 %2 es antes de la fecha trab. %3';
      Text016@1040 : TextConst 'ENU="%1 is required for %2 = %3.";ESP="Se requiere %1 para %2 = %3."';
      Text017@1044 : TextConst 'ENU=\The entered information will be disregarded by warehouse operations.;ESP=\La informaci¢n introducida ser  ignorada por operaciones almacn.';
      Text020@1019 : TextConst 'ENU=You cannot return more than %1 units.;ESP=No puede devolver m s de %1 unidades.';
      Text021@1020 : TextConst 'ENU=You cannot return more than %1 base units.;ESP=No puede dev. m s del %1 unidades base.';
      Text026@1025 : TextConst 'ENU=You cannot change %1 if the item charge has already been posted.;ESP=No puede cambiar %1 si el cargo prod. ya ha sido registrado.';
      CurrExchRate@1030 : Record 330;
      SalesHeader@1031 : Record 36;
      SalesLine2@1032 : Record 37;
      TempSalesLine@1033 : Record 37;
      GLAcc@1035 : Record 15;
      Item@1036 : Record 27;
      Resource@1400 : Record 156;
      Currency@1037 : Record 4;
      ItemTranslation@1038 : Record 30;
      Res@1043 : Record 156;
      ResCost@1045 : Record 202;
      WorkType@1046 : Record 200;
      JobLedgEntry@1047 : Record 169;
      VATPostingSetup@1048 : Record 325;
      StdTxt@1049 : Record 7;
      GenBusPostingGrp@1050 : Record 250;
      GenProdPostingGrp@1051 : Record 251;
      ReservEntry@1052 : Record 337;
      ItemVariant@1053 : Record 5401;
      UnitOfMeasure@1054 : Record 204;
      FA@1056 : Record 5600;
      ShippingAgentServices@1057 : Record 5790;
      NonstockItem@1058 : Record 5718;
      PurchasingCode@1059 : Record 5721;
      SKU@1060 : Record 5700;
      ItemCharge@1061 : Record 5800;
      ItemChargeAssgntSales@1062 : Record 5809;
      InvtSetup@1063 : Record 313;
      Location@1064 : Record 14;
      ReturnReason@1089 : Record 6635;
      JobLedgEntries@1065 : Form 92;
      Reservation@1066 : Form 498;
      ItemAvailByDate@1067 : Form 157;
      ItemAvailByVar@1068 : Form 5414;
      ItemAvailByLoc@1069 : Form 492;
      PriceCalcMgt@1071 : Codeunit 7000;
      ResFindUnitCost@1073 : Codeunit 220;
      CustCheckCreditLimit@1074 : Codeunit 312;
      ItemCheckAvail@1075 : Codeunit 311;
      SalesTaxCalculate@1076 : Codeunit 398;
      ReservMgt@1077 : Codeunit 99000845;
      ReservEngineMgt@1078 : Codeunit 99000831;
      ReserveSalesLine@1079 : Codeunit 99000832;
      UOMMgt@1080 : Codeunit 5402;
      AddOnIntegrMgt@1081 : Codeunit 5403;
      DimMgt@1082 : Codeunit 408;
      ItemSubstitutionMgt@1085 : Codeunit 5701;
      DistIntegration@1086 : Codeunit 5702;
      NonstockItemMgt@1087 : Codeunit 5703;
      WhseValidateSourceLine@1088 : Codeunit 5777;
      TransferExtendedText@1100 : Codeunit 378;
      JobPostLine@1097 : Codeunit 1001;
      FullAutoReservation@1092 : Boolean;
      StatusCheckSuspended@1094 : Boolean;
      HasBeenShown@1018 : Boolean;
      PlannedShipmentDateCalculated@1012 : Boolean;
      PlannedDeliveryDateCalculated@1070 : Boolean;
      Text028@1098 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ESP=No puede cambiar %1 despus de introducir datos en %2.';
      ItemCategory@1099 : Record 5722;
      Text029@1021 : TextConst 'ENU=must be positive;ESP=debe ser positivo';
      Text030@1042 : TextConst 'ENU=must be negative;ESP=debe ser negativo';
      Text031@1093 : TextConst 'ENU=You must either specify %1 or %2.;ESP=Debe especificar %1 o %2.';
      CalendarMgmt@1101 : Codeunit 7600;
      CalChange@1102 : Record 7602;
      Text034@1084 : TextConst 'ENU=The value of %1 field must be a whole number for the item included in the service item group if the %2 field in the Service Item Groups window contains a check mark.;ESP=El valor del campo %1 debe ser un n£mero entero correspondiente al producto incluido en el grupo de productos de servicio si est  activada la casilla de verificaci¢n del campo %2 en la ventana Grupos producto servicio.';
      Text035@1083 : TextConst 'ENU="Warehouse ";ESP="Almacn "';
      Text036@1090 : TextConst 'ENU="Inventory ";ESP="Inventario "';
      HideValidationDialog@1109 : Boolean;
      Text037@1009 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is positive.;ESP=No puede cambiar el %1 cuando la %2 es %3 y la %4 es positiva.';
      Text038@1014 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is negative.;ESP=No puede cambiar el %1 cuando la %2 es %3 y la %4 es negativa.';
      Text039@1034 : TextConst 'ENU=%1 units for %2 %3 have already been returned. Therefore, only %4 units can be returned.;ESP=%1 unidades para el %2 %3 ya se han devuelto. Por lo tanto, s¢lo se pueden devolver %4 unidades.';
      Text040@1039 : TextConst 'ENU=You must use form %1 to enter %2, if item tracking is used.;ESP=Utilice el formulario %1 para insertar %2, si se utiliza el seguimiento de productos.';
      Text041@1026 : TextConst 'ENU=You must cancel the existing approval for this document to be able to change the %1 field.;ESP=Debe cancelar la aprobaci¢n existente para este documento para poder cambiar el campo %1.';
      Text042@1055 : TextConst 'ENU=When posting the Applied to Ledger Entry %1 will be opened first;ESP=Al registrar Liq. por mov. contable, %1 se abrir  primero';
      Text043@1091 : TextConst 'ENU=cannot be %1;ESP=no puede ser %1';
      Text044@1103 : TextConst 'ENU=cannot be less than %1;ESP=no puede ser inferior a %1';
      Text045@1104 : TextConst 'ENU=cannot be more than %1;ESP=no puede ser superior a %1';
      Text046@1105 : TextConst 'ENU=You cannot return more than the %1 units that you have shipped for %2 %3.;ESP=No puede devolver m s de las %1 unidades enviadas para el %2 %3.';
      Text047@1106 : TextConst 'ENU=must be positive when %1 is not 0.;ESP=debe ser positivo cuando %1 no es 0.';
      TrackingBlocked@1107 : Boolean;
      Text048@1108 : TextConst 'ENU=You cannot use item tracking on a %1 created from a %2.;ESP=No puede utilizar el seguimiento de productos en una %1 creada desde un %2.';
      Text049@1139 : TextConst 'ENU=cannot be %1.;ESP=no puede ser %1.';

    PROCEDURE InitOutstanding@16();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        "Outstanding Quantity" := Quantity - "Return Qty. Received";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Return Qty. Received (Base)";
        "Return Qty. Rcd. Not Invd." := "Return Qty. Received" - "Quantity Invoiced";
        "Ret. Qty. Rcd. Not Invd.(Base)" := "Return Qty. Received (Base)" - "Qty. Invoiced (Base)";
      END ELSE BEGIN
        "Outstanding Quantity" := Quantity - "Quantity Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
        "Qty. Shipped Not Invoiced" := "Quantity Shipped" - "Quantity Invoiced";
        "Qty. Shipped Not Invd. (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
      END;
      CALCFIELDS("Reserved Quantity");
      Planned := "Reserved Quantity" = "Outstanding Quantity";
      "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
      InitOutstandingAmount;
    END;

    PROCEDURE InitOutstandingAmount@17();
    VAR
      AmountInclVAT@1000 : Decimal;
    BEGIN
      IF Quantity = 0 THEN BEGIN
        "Outstanding Amount" := 0;
        "Outstanding Amount (LCY)" := 0;
        "Shipped Not Invoiced" := 0;
        "Shipped Not Invoiced (LCY)" := 0;
        "Return Rcd. Not Invd." := 0;
        "Return Rcd. Not Invd. (LCY)" := 0;
      END ELSE BEGIN
        GetSalesHeader;
        IF SalesHeader.Status = SalesHeader.Status::Released THEN
          AmountInclVAT := "Amount Including VAT"
        ELSE
          IF SalesHeader."Prices Including VAT" THEN
            AmountInclVAT := "Line Amount" - "Inv. Discount Amount"
          ELSE
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
              AmountInclVAT :=
                "Line Amount" - "Inv. Discount Amount" +
                ROUND(
                  SalesTaxCalculate.CalculateTax(
                    "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                    "Line Amount" - "Inv. Discount Amount","Quantity (Base)",SalesHeader."Currency Factor"),
                  Currency."Amount Rounding Precision")
            ELSE
              AmountInclVAT :=
                ROUND(
                  ("Line Amount" - "Inv. Discount Amount") *
                  (1 + ("VAT %" + "EC %") / 100 * (1 - SalesHeader."VAT Base Discount %" / 100)),
                  Currency."Amount Rounding Precision");
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          VALIDATE(
            "Return Rcd. Not Invd.",
            ROUND(
              AmountInclVAT * "Return Qty. Rcd. Not Invd." / Quantity,
              Currency."Amount Rounding Precision"))
        ELSE
          VALIDATE(
            "Shipped Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Shipped Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision"));
      END;
    END;

    PROCEDURE InitQtyToShip@15();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";

      CheckServItemCreation;

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToReceive@5803();
    BEGIN
      "Return Qty. to Receive" := "Outstanding Quantity";
      "Return Qty. to Receive (Base)" := "Outstanding Qty. (Base)";

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;
      "EC Difference" := 0;
      CalcInvDiscToInvoice;
      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
        CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE InitItemAppl@40(OnlyApplTo@1000 : Boolean);
    BEGIN
      "Appl.-to Item Entry" := 0;
      IF NOT OnlyApplTo THEN
        "Appl.-from Item Entry" := 0;
    END;

    PROCEDURE MaxQtyToInvoice@18() : Decimal;
    BEGIN
      IF "Prepayment Line" THEN
        EXIT(1);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Received" + "Return Qty. to Receive" - "Quantity Invoiced")
      ELSE
        EXIT("Quantity Shipped" + "Qty. to Ship" - "Quantity Invoiced");
    END;

    PROCEDURE MaxQtyToInvoiceBase@19() : Decimal;
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Received (Base)" + "Return Qty. to Receive (Base)" - "Qty. Invoiced (Base)")
      ELSE
        EXIT("Qty. Shipped (Base)" + "Qty. to Ship (Base)" - "Qty. Invoiced (Base)");
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.000001));
    END;

    LOCAL PROCEDURE SelectItemEntry@8(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      SalesLine3@1002 : Record 37;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.","No.");
      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
        ItemLedgEntry.SETRANGE(Positive,TRUE);
        ItemLedgEntry.SETRANGE(Open,TRUE);
      END ELSE BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
        ItemLedgEntry.SETRANGE(Positive,FALSE);
        ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
      END;
      IF FORM.RUNMODAL(FORM::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        SalesLine3 := Rec;
        IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN
          SalesLine3.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.")
        ELSE
          SalesLine3.VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
        IF Reserve <> Reserve::Always THEN
          CheckItemAvailable(CurrentFieldNo);
        Rec := SalesLine3;
      END;
    END;

    PROCEDURE SetSalesHeader@24(NewSalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader := NewSalesHeader;

      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        SalesHeader.TESTFIELD("Currency Factor");
        Currency.GET(SalesHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetSalesHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document Type" <> SalesHeader."Document Type") OR ("Document No." <> SalesHeader."No.") THEN BEGIN
        SalesHeader.GET("Document Type","Document No.");
        IF SalesHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          SalesHeader.TESTFIELD("Currency Factor");
          Currency.GET(SalesHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;
    END;

    LOCAL PROCEDURE GetItem@9();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Item."No." THEN
        Item.GET("No.");
    END;

    PROCEDURE GetResource@49();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Resource."No." THEN
        Resource.GET("No.");
    END;

    LOCAL PROCEDURE UpdateUnitPrice@2(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      GetSalesHeader;
      TESTFIELD("Qty. per Unit of Measure");

      CASE Type OF
        Type::Item,Type::Resource:
          BEGIN
            PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
            PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,CalledByFieldNo);
          END;
      END;
      VALIDATE("Unit Price");
    END;

    LOCAL PROCEDURE FindResUnitCost@5();
    BEGIN
      ResCost.INIT;
      ResCost.Code := "No.";
      ResCost."Work Type Code" := "Work Type Code";
      ResFindUnitCost.RUN(ResCost);
      VALIDATE("Unit Cost (LCY)",ResCost."Unit Cost" * "Qty. per Unit of Measure");
    END;

    PROCEDURE UpdateAmounts@3();
    BEGIN
      IF CurrFieldNo <> FIELDNO("Allow Invoice Disc.") THEN
        TESTFIELD(Type);
      GetSalesHeader;

      IF "Line Amount" <> xRec."Line Amount" THEN
        "VAT Difference" := 0;
      IF "Line Amount" <> ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount" THEN BEGIN
        "Line Amount" := ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount";
        "VAT Difference" := 0;
        "EC Difference" := 0;
      END;
      IF SalesHeader.Status = SalesHeader.Status::Released THEN
        UpdateVATAmounts;
      IF "Prepayment %" <> 0 THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
        IF "Unit Price" < 0 THEN
          FIELDERROR("Unit Price",STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
      END;
      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN BEGIN
        "Prepayment VAT Difference" := 0;
        IF "Quantity Invoiced" = 0 THEN BEGIN
          "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text049,"Prepmt. Amt. Inv."));
        END ELSE BEGIN
          IF "Prepayment %" <> 0 THEN
            "Prepmt. Line Amount" := "Prepmt. Amt. Inv." +
              ROUND(("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity - "Prepmt. Amt. Inv.") * "Prepayment %" / 100,
                Currency."Amount Rounding Precision")
          ELSE
            "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          IF "Prepmt. Line Amount" > "Line Amount" THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text049,"Prepmt. Line Amount"));
        END;
      END;
      InitOutstandingAmount;
      IF (CurrFieldNo <> 0) AND
         NOT ((Type = Type::Item) AND (CurrFieldNo = FIELDNO("No.")) AND (Quantity <> 0) AND
      // a write transaction may have been started
              ("Qty. per Unit of Measure" <> xRec."Qty. per Unit of Measure")) AND            // ...continued condition
         ("Document Type" <= "Document Type"::Invoice) AND
         (("Outstanding Amount" + "Shipped Not Invoiced") > 0)
      THEN
        CustCheckCreditLimit.SalesLineCheck(Rec);

      IF Type = Type::"Charge (Item)" THEN
        UpdateItemChargeAssgnt;

      // $003
      ActualizaCamposImporte;
    END;

    LOCAL PROCEDURE UpdateVATAmounts@38();
    VAR
      SalesLine2@1000 : Record 37;
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalQuantityBase@1003 : Decimal;
    BEGIN
      SalesLine2.SETRANGE("Document Type","Document Type");
      SalesLine2.SETRANGE("Document No.","Document No.");
      SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      IF "Line Amount" = 0 THEN
        IF xRec."Line Amount" >= 0 THEN
          SalesLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          SalesLine2.SETFILTER(Amount,'<%1',0)
      ELSE
        IF "Line Amount" > 0 THEN
          SalesLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          SalesLine2.SETFILTER(Amount,'<%1',0);
      SalesLine2.SETRANGE("VAT Identifier","VAT Identifier");
      SalesLine2.SETRANGE("Tax Group Code","Tax Group Code");

      IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
        IF "Line No." <> 0 THEN
          IF MODIFY THEN
            IF SalesLine2.FINDLAST THEN BEGIN
              SalesLine2.UpdateAmounts;
              SalesLine2.MODIFY;
            END;
      END ELSE BEGIN
        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        IF ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") OR
           (("VAT Calculation Type" IN
             ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"No Taxable VAT",
             "VAT Calculation Type"::"Reverse Charge VAT"]) AND ("VAT %" <> 0))
        THEN BEGIN
          IF SalesLine2.FINDSET THEN
            REPEAT
              TotalLineAmount := TotalLineAmount + SalesLine2."Line Amount";
              TotalInvDiscAmount := TotalInvDiscAmount + SalesLine2."Inv. Discount Amount";
              TotalAmount := TotalAmount + SalesLine2.Amount;
              TotalAmountInclVAT := TotalAmountInclVAT + SalesLine2."Amount Including VAT";
              TotalQuantityBase := TotalQuantityBase + SalesLine2."Quantity (Base)";
            UNTIL SalesLine2.NEXT = 0;
        END;

        IF SalesHeader."Prices Including VAT" THEN
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT",
            "VAT Calculation Type"::"No Taxable VAT":
              BEGIN
                Amount :=
                  ROUND(
                    (TotalLineAmount - TotalInvDiscAmount + "Line Amount" - "Inv. Discount Amount") / (1 + ("VAT %" + "EC %") / 100),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - SalesHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalLineAmount + "Line Amount" +
                  ROUND(
                    (TotalAmount + Amount) * (SalesHeader."VAT Base Discount %" / 100) * ("VAT %" + "EC %") / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                SalesHeader.TESTFIELD("VAT Base Discount %",0);
                Amount :=
                  SalesTaxCalculate.ReverseCalculateTax(
                    "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                    TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                    SalesHeader."Currency Factor") -
                  TotalAmount;
                IF Amount <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.000001)
                ELSE
                BEGIN
                  "VAT %" := 0;
                  "EC %" := 0;
                END;
                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
              END;
           END
         ELSE
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT",
            "VAT Calculation Type"::"No Taxable VAT":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - SalesHeader."VAT Base Discount %" / 100) * ("VAT %" + "EC %") / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    SalesTaxCalculate.CalculateTax(
                      "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                      (TotalAmount + Amount),(TotalQuantityBase + "Quantity (Base)"),
                      SalesHeader."Currency Factor"),Currency."Amount Rounding Precision") -
                  TotalAmountInclVAT;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.000001)
                ELSE
                BEGIN
                  "VAT %" := 0;
                  "EC %" := 0;
                END;
             END;
         END;
      END;
    END;

    LOCAL PROCEDURE CheckItemAvailable@4(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF "Shipment Date" = 0D THEN BEGIN
        GetSalesHeader;
        IF SalesHeader."Shipment Date" <> 0D THEN
          VALIDATE("Shipment Date",SalesHeader."Shipment Date")
        ELSE
          VALIDATE("Shipment Date",WORKDATE);
      END;

      IF ((CalledByFieldNo = CurrFieldNo) OR (CalledByFieldNo = FIELDNO("Shipment Date"))) AND GUIALLOWED AND
         ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
         (Type = Type::Item) AND ("No." <> '') AND
         ("Outstanding Quantity" > 0) AND
         ("Job Contract Entry No." = 0) AND
         NOT (Nonstock OR "Special Order")
      THEN
        ItemCheckAvail.SalesLineCheck(Rec);
    END;

    PROCEDURE ShowReservation@10();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD(Reserve);
      CLEAR(Reservation);
      Reservation.SetSalesLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReserveSalesLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        FORM.RUNMODAL(FORM::"Reservation Entries",ReservEntry)
      ELSE
        FORM.RUN(FORM::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE AutoReserve@11();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");

      IF ReserveSalesLine.ReservQuantity(Rec) <> 0 THEN BEGIN
        ReservMgt.SetSalesLine(Rec);
        TESTFIELD("Shipment Date");
        ReservMgt.AutoReserve(FullAutoReservation,'',"Shipment Date",ReserveSalesLine.ReservQuantity(Rec));
        FIND;
        IF NOT FullAutoReservation THEN BEGIN
          COMMIT;
          IF CONFIRM(Text011,TRUE) THEN BEGIN
            ShowReservation;
            FIND;
          END;
        END;
      END;
    END;

    PROCEDURE GetDate@22() : Date;
    BEGIN
      IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         (SalesHeader."Posting Date" = 0D)
      THEN
        EXIT(WORKDATE);
      EXIT(SalesHeader."Posting Date");
    END;

    PROCEDURE SignedXX@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice,
        "Document Type"::"Blanket Order":
          EXIT(-Value);
        "Document Type"::"Return Order",
        "Document Type"::"Credit Memo":
          EXIT(Value);
      END;
    END;

    PROCEDURE ItemAvailability@12(AvailabilityType@1000 : 'Date,Variant,Location,Bin');
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      Item.RESET;
      Item.GET("No.");
      Item.SETRANGE("No.","No.");
      Item.SETRANGE("Date Filter",0D,"Shipment Date");

      CASE AvailabilityType OF
        AvailabilityType::Date:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Location Filter","Location Code");
            CLEAR(ItemAvailByDate);
            ItemAvailByDate.LOOKUPMODE(TRUE);
            ItemAvailByDate.SETRECORD(Item);
            ItemAvailByDate.SETTABLEVIEW(Item);
            IF ItemAvailByDate.RUNMODAL = ACTION::LookupOK THEN
              IF "Shipment Date" <> ItemAvailByDate.GetLastDate THEN
                IF CONFIRM(
                     Text012,TRUE,FIELDCAPTION("Shipment Date"),"Shipment Date",
                     ItemAvailByDate.GetLastDate)
                THEN BEGIN
                  IF CurrFieldNo <> 0 THEN
                    xRec := Rec;
                  VALIDATE("Shipment Date",ItemAvailByDate.GetLastDate);
                END;
          END;
        AvailabilityType::Variant:
          BEGIN
            Item.SETRANGE("Location Filter","Location Code");
            CLEAR(ItemAvailByVar);
            ItemAvailByVar.LOOKUPMODE(TRUE);
            ItemAvailByVar.SETRECORD(Item);
            ItemAvailByVar.SETTABLEVIEW(Item);
            IF ItemAvailByVar.RUNMODAL = ACTION::LookupOK THEN
              IF "Variant Code" <> ItemAvailByVar.GetLastVariant THEN
                IF CONFIRM(
                     Text012,TRUE,FIELDCAPTION("Variant Code"),"Variant Code",
                     ItemAvailByVar.GetLastVariant)
                THEN BEGIN
                  IF CurrFieldNo = 0 THEN
                    xRec := Rec;
                  VALIDATE("Variant Code",ItemAvailByVar.GetLastVariant);
                END;
          END;
        AvailabilityType::Location:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            CLEAR(ItemAvailByLoc);
            ItemAvailByLoc.LOOKUPMODE(TRUE);
            ItemAvailByLoc.SETRECORD(Item);
            ItemAvailByLoc.SETTABLEVIEW(Item);
            IF ItemAvailByLoc.RUNMODAL = ACTION::LookupOK THEN
              IF "Location Code" <> ItemAvailByLoc.GetLastLocation THEN
                IF CONFIRM(
                     Text012,TRUE,FIELDCAPTION("Location Code"),"Location Code",
                     ItemAvailByLoc.GetLastLocation)
                THEN BEGIN
                  IF CurrFieldNo = 0 THEN
                    xRec := Rec;
                  VALIDATE("Location Code",ItemAvailByLoc.GetLastLocation);
                END;
          END;
      END;
    END;

    PROCEDURE BlanketOrderLookup@23();
    BEGIN
      SalesLine2.RESET;
      SalesLine2.SETCURRENTKEY("Document Type",Type,"No.");
      SalesLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
      SalesLine2.SETRANGE(Type,Type);
      SalesLine2.SETRANGE("No.","No.");
      SalesLine2.SETRANGE("Bill-to Customer No.","Bill-to Customer No.");
      SalesLine2.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
      IF FORM.RUNMODAL(FORM::"Sales Lines",SalesLine2) = ACTION::LookupOK THEN BEGIN
        SalesLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
        "Blanket Order No." := SalesLine2."Document No.";
        VALIDATE("Blanket Order Line No.",SalesLine2."Line No.");
      END;
    END;

    PROCEDURE ShowDimensions@25();
    VAR
      DocDim@1000 : Record 357;
      DocDimensions@1001 : Form 546;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
      DocDim.SETRANGE("Document Type","Document Type");
      DocDim.SETRANGE("Document No.","Document No.");
      DocDim.SETRANGE("Line No.","Line No.");
      DocDimensions.SETTABLEVIEW(DocDim);
      DocDimensions.RUNMODAL;
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      Job@1000 : Record 167;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD("Quantity (Base)");
      IF "Job Contract Entry No." <> 0 THEN
        ERROR(Text048,TABLECAPTION,Job.TABLECAPTION);
      ReserveSalesLine.CallItemTracking(Rec);
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20]);
    VAR
      SourceCodeSetup@1006 : Record 242;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetPreviousDocDefaultDim(
        DATABASE::"Sales Header","Document Type","Document No.",0,
        DATABASE::Customer,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      DimMgt.GetDefaultDim(
        TableID,No,SourceCodeSetup.Sales,
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF "Line No." <> 0 THEN
        DimMgt.UpdateDocDefaultDim(
          DATABASE::"Sales Line","Document Type","Document No.","Line No.",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveDocDim(
          DATABASE::"Sales Line","Document Type","Document No.",
          "Line No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveDocDim(
          DATABASE::"Sales Line","Document Type","Document No.",
          "Line No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      IF "Line No." <> 0 THEN
        DimMgt.ShowDocDim(
          DATABASE::"Sales Line","Document Type","Document No.",
          "Line No.",ShortcutDimCode)
      ELSE
        DimMgt.ShowTempDim(ShortcutDimCode);
    END;

    PROCEDURE ShowItemSub@30();
    BEGIN
      TestStatusOpen;
      ItemSubstitutionMgt.ItemSubstGet(Rec);
      IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,TRUE) THEN
        TransferExtendedText.InsertSalesExtText(Rec);
    END;

    PROCEDURE ShowNonstock@32();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",'');
      IF FORM.RUNMODAL(FORM::"Nonstock Item List",NonstockItem) = ACTION::LookupOK THEN BEGIN
        NonstockItem.TESTFIELD("Item Category Code");
        ItemCategory.GET(NonstockItem."Item Category Code");
        ItemCategory.TESTFIELD("Def. Gen. Prod. Posting Group");
        ItemCategory.TESTFIELD("Def. Inventory Posting Group");

        "No." := NonstockItem."Entry No.";
        NonstockItemMgt.NonStockSales(Rec);
        VALIDATE("No.","No.");
        VALIDATE("Unit Price",NonstockItem."Unit Price");
      END;
    END;

    LOCAL PROCEDURE GetFAPostingGroup@6();
    VAR
      LocalGLAcc@1000 : Record 15;
      FASetup@1001 : Record 5603;
      FAPostingGr@1002 : Record 5606;
      FADeprBook@1003 : Record 5612;
    BEGIN
      IF (Type <> Type::"Fixed Asset") OR ("No." = '') THEN
        EXIT;
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        IF NOT FADeprBook.GET("No.","Depreciation Book Code") THEN
          "Depreciation Book Code" := '';
        IF "Depreciation Book Code" = '' THEN
          EXIT;
      END;
      FADeprBook.GET("No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      FAPostingGr.TESTFIELD("Acq. Cost Acc. on Disposal");
      LocalGLAcc.GET(FAPostingGr."Acq. Cost Acc. on Disposal");
      LocalGLAcc.CheckGLAcc;
      LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Posting Group" := FADeprBook."FA Posting Group";
      "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
      "Tax Group Code" := LocalGLAcc."Tax Group Code";
      VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Sales Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    VAR
      SalesHeader2@1102601000 : Record 36;
    BEGIN
      IF SalesHeader2.GET("Document Type","Document No.") THEN;
      IF SalesHeader2."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber))
      ELSE
        EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetUnitCost@5808();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      GetItem;
      "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      IF GetSKU THEN
        VALIDATE("Unit Cost (LCY)",SKU."Unit Cost" * "Qty. per Unit of Measure")
      ELSE
        VALIDATE("Unit Cost (LCY)",Item."Unit Cost" * "Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE CalcUnitCost@5809(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      UnitCost@1004 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
        CALCSUMS("Cost Amount (Actual)","Cost Amount (Expected)");
        UnitCost :=
          ("Cost Amount (Expected)" + "Cost Amount (Actual)") / ItemLedgEntry.Quantity;
      END;

      EXIT(ABS(UnitCost * "Qty. per Unit of Measure"));
    END;

    PROCEDURE ShowItemChargeAssgnt@5801();
    VAR
      ItemChargeAssgnts@1000 : Form 5814;
      AssignItemChargeSales@1001 : Codeunit 5807;
    BEGIN
      GET("Document Type","Document No.","Line No.");
      TESTFIELD(Type,Type::"Charge (Item)");
      TESTFIELD("No.");
      TESTFIELD(Quantity);

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Item Charge No.","No.");
      IF NOT ItemChargeAssgntSales.FINDLAST THEN BEGIN
        ItemChargeAssgntSales."Document Type" := "Document Type";
        ItemChargeAssgntSales."Document No." := "Document No.";
        ItemChargeAssgntSales."Document Line No." := "Line No.";
        ItemChargeAssgntSales."Item Charge No." := "No.";
        GetSalesHeader;
        IF ("Inv. Discount Amount" = 0) AND
           ("Line Discount Amount" = 0) AND
           (NOT SalesHeader."Prices Including VAT")
        THEN
          ItemChargeAssgntSales."Unit Cost" := "Unit Price"
        ELSE
          IF SalesHeader."Prices Including VAT" THEN
            ItemChargeAssgntSales."Unit Cost" :=
              ROUND(
                ("Line Amount" - "Inv. Discount Amount") / Quantity / (1 + ("VAT %" + "EC %") / 100),
                Currency."Unit-Amount Rounding Precision")
          ELSE
            ItemChargeAssgntSales."Unit Cost" :=
              ROUND(
                ("Line Amount" - "Inv. Discount Amount") / Quantity,
                Currency."Unit-Amount Rounding Precision");
      END;

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Return Receipt No.")
      ELSE
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Shipment No.");
      CLEAR(AssignItemChargeSales);
      COMMIT;

      ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntSales."Unit Cost");
      ItemChargeAssgnts.RUNMODAL;
      CALCFIELDS("Qty. to Assign");
    END;

    PROCEDURE UpdateItemChargeAssgnt@5807();
    VAR
      ShareOfVAT@1000 : Decimal;
    BEGIN
      CALCFIELDS("Qty. Assigned");
      TESTFIELD("Quantity Invoiced","Qty. Assigned");
      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      IF (CurrFieldNo <> 0) AND (Amount <> xRec.Amount) THEN BEGIN
        ItemChargeAssgntSales.SETFILTER("Qty. Assigned",'<>0');
        IF NOT ItemChargeAssgntSales.ISEMPTY THEN
          ERROR(Text026,
            FIELDCAPTION(Amount));
        ItemChargeAssgntSales.SETRANGE("Qty. Assigned");
      END;

      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        GetSalesHeader;
        REPEAT
          ShareOfVAT := 1;
          IF SalesHeader."Prices Including VAT" THEN
            ShareOfVAT := 1 + ("VAT %" + "EC %") / 100;
          IF ItemChargeAssgntSales."Unit Cost" <> ROUND(
               ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
               Currency."Unit-Amount Rounding Precision")
          THEN BEGIN
            ItemChargeAssgntSales."Unit Cost" := ROUND(
                ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                Currency."Unit-Amount Rounding Precision");
            ItemChargeAssgntSales.VALIDATE("Qty. to Assign");
            ItemChargeAssgntSales.MODIFY;
          END;
        UNTIL ItemChargeAssgntSales.NEXT = 0;
        CALCFIELDS("Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5802(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      ItemChargeAssgntSales.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",DocLineNo);
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteChargeChargeAssgnt@5804(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      IF DocType <> "Document Type"::"Blanket Order" THEN
        IF "Quantity Invoiced" <> 0 THEN BEGIN
          CALCFIELDS("Qty. Assigned");
          TESTFIELD("Qty. Assigned","Quantity Invoiced");
        END;
      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Document No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Document Line No.",DocLineNo);
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL;
    END;

    PROCEDURE CheckItemChargeAssgnt@5800();
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        TESTFIELD("Allow Item Charge Assignment");
        REPEAT
          ItemChargeAssgntSales.TESTFIELD("Qty. to Assign",0);
        UNTIL ItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TestStatusOpen@33();
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;
      GetSalesHeader;
      IF Type IN [Type::Item,Type::"Fixed Asset"] THEN
        SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    END;

    PROCEDURE SuspendStatusCheck@39(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    PROCEDURE UpdateVATOnLines@36(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290);
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      RecRef@1015 : RecordRef;
      xRecRef@1014 : RecordRef;
      ChangeLogMgt@1013 : Codeunit 423;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
      ECDifference@1100000 : Decimal;
    BEGIN
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        LOCKTABLE;
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0);
              IF VATAmountLine.Modified THEN BEGIN
                xRecRef.GETTABLE(SalesLine);
                IF NOT TempVATAmountLineRemainder.GET(
                     "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0)
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;

                IF QtyType = QtyType::General THEN
                  LineAmountToInvoice := "Line Amount"
                ELSE
                  LineAmountToInvoice :=
                    ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");

                IF "Allow Invoice Disc." THEN BEGIN
                  IF VATAmountLine."Inv. Disc. Base Amount" = 0 THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" +
                      VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount";
                    InvDiscAmount :=
                      ROUND(
                        TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                  END;
                  IF QtyType = QtyType::General THEN BEGIN
                    "Inv. Discount Amount" := InvDiscAmount;
                    CalcInvDiscToInvoice;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE
                  InvDiscAmount := 0;

                IF QtyType = QtyType::General THEN
                  IF SalesHeader."Prices Including VAT" THEN BEGIN
                    IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount" = 0) OR
                       ("Line Amount" = 0)
                    THEN BEGIN
                      VATAmount := 0;
                      NewAmountIncludingVAT := 0;
                    END ELSE BEGIN
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") +
                        VATAmountLine."EC Amount" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT+EC" +
                        VATAmountLine."Amount Including VAT+EC" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    END;
                    NewAmount :=
                      ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                      ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                      VATAmount := "Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Given Amount";
                      NewAmount := 0;
                      NewVATBaseAmount := 0;
                    END ELSE BEGIN
                      NewAmount := "Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Given Amount";
                      NewVATBaseAmount :=
                        ROUND(
                          NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision");
                      IF VATAmountLine."VAT+EC Base" = 0 THEN
                        VATAmount := 0
                      ELSE
                        VATAmount :=
                          TempVATAmountLineRemainder."VAT Amount" +
                          VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT+EC Base" +
                          VATAmountLine."EC Amount" * NewAmount / VATAmountLine."VAT+EC Base";
                      END;
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                  END
                ELSE BEGIN
                  IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN
                  BEGIN
                    VATDifference := 0;
                    ECDifference := 0;
                  END
                  ELSE
                  BEGIN
                    VATDifference :=
                      TempVATAmountLineRemainder."VAT Difference" +
                      VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    ECDifference :=
                      TempVATAmountLineRemainder."EC Difference" +
                      VATAmountLine."EC Difference" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                  END;

                  IF LineAmountToInvoice = 0 THEN
                  BEGIN
                    "VAT Difference" := 0;
                    "EC Difference" := 0;
                  END
                  ELSE
                  BEGIN
                    "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
                    "EC Difference" := ROUND(ECDifference,Currency."Amount Rounding Precision");
                  END;
                END;
                IF (QtyType = QtyType::General) AND (SalesHeader.Status = SalesHeader.Status::Released) THEN BEGIN
                  Amount := NewAmount;
                  "Amount Including VAT" := ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                  "VAT Base Amount" := NewVATBaseAmount;
                END;
                InitOutstanding;
                IF Type = Type::"Charge (Item)" THEN
                  UpdateItemChargeAssgnt;
                MODIFY;
                RecRef.GETTABLE(SalesLine);
                ChangeLogMgt.LogModification(RecRef,xRecRef);

                TempVATAmountLineRemainder."Amount Including VAT+EC" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
                TempVATAmountLineRemainder."EC Difference" := ECDifference - "EC Difference";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcVATAmountLines@35(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290);
    VAR
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      Cust@1012 : Record 18;
      CustPostingGroup@1013 : Record 92;
      SalesTaxCalculate@1005 : Codeunit 398;
      QtyToHandle@1006 : Decimal;
      SalesSetup@1008 : Record 311;
      RoundingLineInserted@1010 : Boolean;
      TotalVATAmount@1011 : Decimal;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SalesSetup.GET;
        IF SalesSetup."Invoice Rounding" THEN BEGIN
          Cust.GET(SalesHeader."Bill-to Customer No.");
          CustPostingGroup.GET(Cust."Customer Posting Group");
        END;
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              IF (Type = Type::"G/L Account") AND NOT "Prepayment Line" THEN
                RoundingLineInserted := ("No." = CustPostingGroup."Invoice Rounding Account") OR RoundingLineInserted;
              IF "VAT Calculation Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
              BEGIN
                "VAT %" := 0;
                "EC %" := 0;
              END;
              IF NOT VATAmountLine.GET(
                   "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0)
              THEN BEGIN
                VATAmountLine.INIT;
                VATAmountLine."VAT Identifier" := "VAT Identifier";
                VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                VATAmountLine."Tax Group Code" := "Tax Group Code";
                VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                VATAmountLine."EC %" := VATPostingSetup."EC %";
                VATAmountLine."VAT %" :=  VATPostingSetup."VAT %";
                VATAmountLine.Modified := TRUE;
                VATAmountLine.Positive := "Line Amount" >= 0;
                VATAmountLine.INSERT;
              END;
              CASE QtyType OF
                QtyType::General:
                  BEGIN
                    VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
                    VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + "Line Amount";
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + "Line Amount";
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" + "Inv. Discount Amount";
                    VATAmountLine."Pmt. Disc. Given Amount" :=
                      VATAmountLine."Pmt. Disc. Given Amount" + "Pmt. Disc. Given Amount";
                    VATAmountLine."Line Discount Amount" := VATAmountLine."Line Discount Amount" + "Line Discount Amount";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    VATAmountLine."EC Difference" := VATAmountLine."EC Difference" + "EC Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Invoicing:
                  BEGIN
                    CASE TRUE OF
                      ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
                      (NOT SalesHeader.Ship) AND SalesHeader.Invoice AND (NOT "Prepayment Line"):
                        BEGIN
                          IF "Shipment No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Qty. Shipped Not Invoiced");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Rcd. Not Invd.(Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                      (NOT SalesHeader.Receive) AND SalesHeader.Invoice:
                        BEGIN
                          QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Rcd. Not Invd.");
                          VATAmountLine.Quantity :=
                            VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Rcd. Not Invd.(Base)");
                        END;
                      ELSE
                        BEGIN
                        QtyToHandle := "Qty. to Invoice";
                        VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                      END;
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" +
                      (ROUND(QtyToHandle * "Unit Price" - ("Line Discount Amount" * QtyToHandle / Quantity),
                      Currency."Amount Rounding Precision"));
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" +
                        (ROUND(QtyToHandle * "Unit Price" - ("Line Discount Amount" * QtyToHandle / Quantity),
                        Currency."Amount Rounding Precision"));
                    IF (SalesHeader."Invoice Discount Calculation" <> SalesHeader."Invoice Discount Calculation"::Amount) THEN
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" +
                        ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision")
                    ELSE
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" + "Inv. Disc. Amount to Invoice";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Shipping:
                  BEGIN
                    IF "Document Type" IN
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    THEN BEGIN
                      QtyToHandle := "Return Qty. to Receive";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Return Qty. to Receive (Base)";
                    END ELSE BEGIN
                      QtyToHandle := "Qty. to Ship";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Ship (Base)";
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" +
                      (ROUND(QtyToHandle * "Unit Price" - ("Line Discount Amount" * QtyToHandle / Quantity),
                      Currency."Amount Rounding Precision"));
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" +
                        (ROUND(QtyToHandle * "Unit Price" - ("Line Discount Amount" * QtyToHandle / Quantity),
                        Currency."Amount Rounding Precision"));
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" +
                      ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
                    VATAmountLine."Pmt. Disc. Given Amount" :=
                      VATAmountLine."Pmt. Disc. Given Amount" +
                      ROUND("Pmt. Disc. Given Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
                    VATAmountLine."Line Discount Amount" := VATAmountLine."Line Discount Amount" + "Line Discount Amount";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    VATAmountLine."EC Difference" := VATAmountLine."EC Difference" + "EC Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
              END;
              TotalVATAmount := TotalVATAmount + "Amount Including VAT" - Amount;
            END;
          UNTIL NEXT = 0;
      END;

      WITH VATAmountLine DO
        IF FINDSET THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF SalesHeader."Prices Including VAT" AND NOT ("VAT %" = 0) THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"No taxable VAT":
                  BEGIN
                    "VAT+EC Base" :=
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount" - "Pmt. Disc. Given Amount") /
                        (1 + ("VAT %" + "EC %") / 100),
                        Currency."Amount Rounding Precision") - "VAT Difference";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        ("Line Amount" - "Invoice Discount Amount" - "Pmt. Disc. Given Amount" -
                        "VAT+EC Base" - "VAT Difference") / ("VAT %" + "EC %") * "VAT %" * (1 - SalesHeader."VAT Base Discount %" / 100)
      ,
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "EC Amount" :=
                      "EC Difference" +
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount" - "Pmt. Disc. Given Amount" -
                        "VAT+EC Base") / ("VAT %" + "EC %") * "EC %"  * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT+EC" := "VAT+EC Base" + "VAT Amount" + "EC Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "Invoice Discount Amount" - "VAT+EC Base" - "VAT Difference") *
                        (1 - SalesHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT+EC Base" :=
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount" - "Pmt. Disc. Given Amount"),
                        Currency."Amount Rounding Precision");
                    "VAT Amount" := 0;
                    "EC Amount" := 0;
                    "Amount Including VAT+EC" :=  "VAT+EC Base" ;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT+EC Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT+EC" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT+EC" := "Line Amount" - "Invoice Discount Amount";
                    "VAT+EC Base" :=
                      ROUND(
                        SalesTaxCalculate.ReverseCalculateTax(
                          SalesHeader."Tax Area Code","Tax Group Code",SalesHeader."Tax Liable",
                          SalesHeader."Posting Date","Amount Including VAT+EC",Quantity,SalesHeader."Currency Factor"),
                        Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT+EC" - "VAT+EC Base";
                    IF "VAT+EC Base" = 0 THEN
                    BEGIN
                      "VAT %" := 0;
                      "EC %" := 0;
                    END
                    ELSE
                    BEGIN
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT+EC Base",0.000001);
                      "EC %" := ROUND(100 * "EC Amount" / "VAT+EC Base",0.000001);
                    END;
                  END;
              END;
            END ELSE BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"No taxable VAT",
                "VAT Calculation Type"::"Normal VAT":
                  BEGIN
                    "VAT+EC Base" := "Line Amount" - "Invoice Discount Amount" - "Pmt. Disc. Given Amount";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        "VAT+EC Base" * "VAT %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "EC Amount" :=
                      "EC Difference" +
                      ROUND(
                         "VAT+EC Base" * "EC %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100),
                         Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      "Amount Including VAT+EC" := "Line Amount" - "Invoice Discount Amount" - "Pmt. Disc. Given Amount"
                      + "VAT Amount" + "EC Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        "VAT+EC Base" * "VAT %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Reverse Charge VAT":
                BEGIN
                    "VAT+EC Base" := "Line Amount" - "Invoice Discount Amount" - "Pmt. Disc. Given Amount";
                    "VAT Amount" := 0;
                    "EC Amount" := 0;
                    "Amount Including VAT+EC" :=  "VAT+EC Base" ;
                END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT+EC Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT+EC" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT+EC Base" := "Line Amount" - "Invoice Discount Amount" - "Pmt. Disc. Given Amount";
                    "VAT Amount" :=
                      SalesTaxCalculate.CalculateTax(
                        SalesHeader."Tax Area Code","Tax Group Code",SalesHeader."Tax Liable",
                        SalesHeader."Posting Date","VAT+EC Base",Quantity,SalesHeader."Currency Factor");
                    "Amount Including VAT+EC" := "VAT+EC Base" + "VAT Amount" + "EC Amount";
                  END;
              END;
            END;
            IF RoundingLineInserted THEN
              TotalVATAmount := TotalVATAmount - "VAT Amount";
            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            "Calculated EC Amount" := "EC Amount" - "EC Difference";
            MODIFY;
          UNTIL NEXT = 0;

      IF RoundingLineInserted AND (TotalVATAmount <> 0) THEN
        IF VATAmountLine.GET(SalesLine."VAT Identifier",SalesLine."VAT Calculation Type",
             SalesLine."Tax Group Code",FALSE,SalesLine."Line Amount" >= 0)
        THEN BEGIN
          VATAmountLine."VAT Amount" := VATAmountLine."VAT Amount" + TotalVATAmount;
          VATAmountLine."Amount Including VAT+EC" := VATAmountLine."Amount Including VAT+EC" + TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" := VATAmountLine."Calculated VAT Amount" + TotalVATAmount;
          VATAmountLine.MODIFY;
        END;
    END;

    LOCAL PROCEDURE CalcInvDiscToInvoice@37();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetSalesHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";
      IF Quantity = 0 THEN
        VALIDATE("Inv. Disc. Amount to Invoice",0)
      ELSE
        VALIDATE(
          "Inv. Disc. Amount to Invoice",
          ROUND(
            "Inv. Discount Amount" * "Qty. to Invoice" / Quantity,
            Currency."Amount Rounding Precision"));

      IF OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" THEN BEGIN
        IF SalesHeader.Status = SalesHeader.Status::Released THEN
          "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "VAT Difference" := 0;
        "EC Difference" := 0;
      END;
    END;

    PROCEDURE UpdateWithWarehouseShip@41();
    BEGIN
      IF Type = Type::Item THEN
        CASE TRUE OF
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity >= 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Qty. to Ship",0)
            ELSE
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity < 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Qty. to Ship",0)
            ELSE
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Return Qty. to Receive",0)
            ELSE
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Return Qty. to Receive",0)
            ELSE
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
        END;
    END;

    LOCAL PROCEDURE CheckWarehouse@46();
    VAR
      Location2@1002 : Record 14;
      WhseSetup@1000 : Record 5769;
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1003 : Text[50];
    BEGIN
      GetLocation("Location Code");
      IF "Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE
        Location2 := Location;

      DialogText := Text035;
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         Location2."Directed Put-away and Pick"
      THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0)) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0))
        THEN
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
        ELSE
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"));
      END ELSE BEGIN
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Shipment" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          ELSE BEGIN
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
          END;
        END;

        IF (("Document Type" = "Document Type"::Order) AND (Quantity < 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Receive" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
          ELSE BEGIN
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          END;
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text016 + Text017,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
      END;
    END;

    PROCEDURE UpdateDates@43();
    BEGIN
      IF CurrFieldNo = 0 THEN BEGIN
        PlannedShipmentDateCalculated := FALSE;
        PlannedDeliveryDateCalculated := FALSE;
      END;
      IF "Promised Delivery Date" <> 0D THEN
        VALIDATE("Promised Delivery Date")
      ELSE
        IF "Requested Delivery Date" <> 0D THEN
          VALIDATE("Requested Delivery Date")
        ELSE BEGIN
          VALIDATE("Shipment Date");
          VALIDATE("Planned Delivery Date");
        END;
    END;

    PROCEDURE GetItemTranslation@42();
    BEGIN
      GetSalesHeader;
      IF ItemTranslation.GET("No.","Variant Code",SalesHeader."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      END;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE PriceExists@44() : Boolean;
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        GetSalesHeader;
        EXIT(PriceCalcMgt.SalesLinePriceExists(SalesHeader,Rec,TRUE));
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE LineDiscExists@45() : Boolean;
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        GetSalesHeader;
        EXIT(PriceCalcMgt.SalesLineLineDiscExists(SalesHeader,Rec,TRUE));
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE RowID1@47() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Sales Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    PROCEDURE GetItemCrossRef@48(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF CalledByFieldNo <> 0 THEN
        DistIntegration.EnterSalesItemCrossRef(Rec);
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;

      IF (Quantity * xRec.Quantity > 0) AND
         ("No." = xRec."No.") AND
         ("Location Code" = xRec."Location Code") AND
         ("Variant Code" = xRec."Variant Code")
      THEN
        EXIT;

      "Bin Code" := '';
      IF "Drop Shipment" THEN
        EXIT;

      IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
      END;
    END;

    PROCEDURE CheckAssocPurchOrder@51(TheFieldCaption@1000 : Text[250]);
    BEGIN
      IF TheFieldCaption = '' THEN BEGIN // If sales line is being deleted
        IF "Purch. Order Line No." <> 0 THEN
          ERROR(
            Text000,
            "Purchase Order No.",
            "Purch. Order Line No.");
        IF "Special Order Purch. Line No." <> 0 THEN
          ERROR(
            Text000,
            "Special Order Purchase No.",
            "Special Order Purch. Line No.");
      END;
      IF "Purch. Order Line No." <> 0 THEN
        ERROR(
          Text002,
          TheFieldCaption,
          "Purchase Order No.",
          "Purch. Order Line No.");
      IF "Special Order Purch. Line No." <> 0 THEN
        ERROR(
          Text002,
          TheFieldCaption,
          "Special Order Purchase No.",
          "Special Order Purch. Line No.");
    END;

    PROCEDURE CrossReferenceNoLookUp@53();
    VAR
      ItemCrossReference@1000 : Record 5717;
      ICGLAcc@1001 : Record 410;
    BEGIN
      CASE Type OF
        Type::Item:
          BEGIN
            GetSalesHeader;
            ItemCrossReference.RESET;
            ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
            ItemCrossReference.SETFILTER(
              "Cross-Reference Type",'%1|%2',
              ItemCrossReference."Cross-Reference Type"::Customer,
              ItemCrossReference."Cross-Reference Type"::" ");
            ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',SalesHeader."Sell-to Customer No.",'');
            IF FORM.RUNMODAL(FORM::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN BEGIN
              VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
              PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
              PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,FIELDNO("Cross-Reference No."));
              VALIDATE("Unit Price");
            END;
          END;
        Type::"G/L Account",Type::Resource:
          BEGIN
            GetSalesHeader;
            SalesHeader.TESTFIELD("Sell-to IC Partner Code");
            IF FORM.RUNMODAL(FORM::"IC G/L Account List") = ACTION::LookupOK THEN
              "Cross-Reference No." := ICGLAcc."No.";
          END;
      END;
    END;

    PROCEDURE CheckServItemCreation@52();
    VAR
      ServItemGroup@1000 : Record 5904;
    BEGIN
      IF CurrFieldNo = 0 THEN
        EXIT;
      IF Type <> Type::Item THEN
        EXIT;
      Item.GET("No.");
      IF Item."Service Item Group" = '' THEN
        EXIT;
      IF ServItemGroup.GET(Item."Service Item Group") THEN
        IF ServItemGroup."Create Service Item" THEN
          IF "Qty. to Ship (Base)" <> ROUND("Qty. to Ship (Base)",1) THEN
            ERROR(
              Text034,
              FIELDCAPTION("Qty. to Ship (Base)"),
              ServItemGroup.FIELDCAPTION("Create Service Item"));
    END;

    PROCEDURE ItemExists@54(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      IF Type = Type::Item THEN
        IF NOT Item2.GET(ItemNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE IsShipment@55() : Boolean;
    BEGIN
      EXIT(SignedXX("Quantity (Base)") < 0);
    END;

    LOCAL PROCEDURE GetAbsMin@56(QtyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyHandled) < ABS(QtyToHandle) THEN
        EXIT(QtyHandled)
      ELSE
        EXIT(QtyToHandle);
    END;

    PROCEDURE SetHideValidationDialog@57(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE CheckApplFromItemLedgEntry@157(VAR ItemLedgEntry@1000 : Record 32);
    VAR
      ItemTrackingLines@1003 : Form 6510;
      QtyBase@1001 : Decimal;
      QtyNotReturned@1002 : Decimal;
      QtyReturned@1004 : Decimal;
    BEGIN
      IF "Appl.-from Item Entry" = 0 THEN
        EXIT;

      IF "Shipment No." <> '' THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,Text029);
      END ELSE BEGIN
        IF Quantity > 0 THEN
          FIELDERROR(Quantity,Text030);
      END;

      ItemLedgEntry.GET("Appl.-from Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,FALSE);
      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
      IF (ItemLedgEntry."Lot No." <> '') OR (ItemLedgEntry."Serial No." <> '') THEN
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-from Item Entry"));

      CASE TRUE OF
        CurrFieldNo = Rec.FIELDNO(Quantity):
          QtyBase := "Quantity (Base)";
        "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]:
          QtyBase := "Return Qty. to Receive (Base)"
        ELSE
          QtyBase := "Qty. to Ship (Base)";
      END;

      IF ABS(QtyBase) > -ItemLedgEntry.Quantity THEN
        ERROR(
          Text046,
          -ItemLedgEntry.Quantity,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.");

      IF ABS(QtyBase) > -ItemLedgEntry."Shipped Qty. Not Returned" THEN BEGIN
        IF "Qty. per Unit of Measure" = 0 THEN BEGIN
          QtyNotReturned := ItemLedgEntry."Shipped Qty. Not Returned";
          QtyReturned := ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned";
        END ELSE BEGIN
          QtyNotReturned :=
            ROUND(ItemLedgEntry."Shipped Qty. Not Returned" / "Qty. per Unit of Measure",0.00001);
          QtyReturned :=
            ROUND(
              (ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned") /
              "Qty. per Unit of Measure",0.00001);
        END;
        ERROR(
          Text039,
          -QtyReturned,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.",-QtyNotReturned);
      END;
    END;

    PROCEDURE CalcPrepaymentToDeduct@63();
    BEGIN
      IF (Quantity - "Quantity Invoiced") <> 0 THEN BEGIN
        GetSalesHeader;
        IF SalesHeader."Prices Including VAT" THEN
          "Prepmt Amt to Deduct" :=
            ROUND(
              ROUND(
                ROUND(
                  ROUND("Unit Price" * "Qty. to Invoice",Currency."Amount Rounding Precision") *
                  (1 - ("Line Discount %" / 100)),Currency."Amount Rounding Precision") *
                ("Prepayment %" / 100) / (1 + ("VAT %" / 100)),Currency."Amount Rounding Precision") *
              (1 + ("VAT %" / 100)),Currency."Amount Rounding Precision")
        ELSE
          "Prepmt Amt to Deduct" :=
            ROUND(
              ROUND(
                ROUND("Unit Price" * "Qty. to Invoice",Currency."Amount Rounding Precision") *
                (1 - ("Line Discount %" / 100)),Currency."Amount Rounding Precision") *
              "Prepayment %" / 100 ,Currency."Amount Rounding Precision")
      END ELSE
        "Prepmt Amt to Deduct" := 0
    END;

    PROCEDURE SetHasBeenShown@59();
    BEGIN
      HasBeenShown := TRUE;
    END;

    PROCEDURE TestJobPlanningLine@60();
    BEGIN
      IF "Job Contract Entry No." = 0 THEN
        EXIT;
      JobPostLine.TestSalesLine(Rec);
    END;

    PROCEDURE BlockDynamicTracking@58(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReserveSalesLine.Block(SetBlock);
    END;

    PROCEDURE InitQtyToShip2@7();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";

      CheckServItemCreation;

      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      CalcInvDiscToInvoice;

      CalcPrepaymentToDeduct;
    END;

    PROCEDURE ShowLineComments@61();
    VAR
      SalesCommentLine@1000 : Record 44;
      SalesCommentSheet@1001 : Form 67;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      SalesCommentLine.SETRANGE("Document Type","Document Type");
      SalesCommentLine.SETRANGE("No.","Document No.");
      SalesCommentLine.SETRANGE("Document Line No.","Line No.");
      SalesCommentSheet.SETTABLEVIEW(SalesCommentLine);
      SalesCommentSheet.RUNMODAL;
    END;

    PROCEDURE SetDefaultQuantity@62();
    VAR
      SalesSetup@1000 : Record 311;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank THEN BEGIN
        IF ("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote) THEN BEGIN
          "Qty. to Ship" := 0;
          "Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          "Return Qty. to Receive" := 0;
          "Return Qty. to Receive (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
      END;
    END;

    PROCEDURE UpdatePrePaymentAmounts@64();
    VAR
      ShipmentLine@1000 : Record 111;
      SalesOrderLine@1001 : Record 37;
    BEGIN
      IF NOT ShipmentLine.GET("Shipment No.","Shipment Line No.") THEN BEGIN
        "Prepmt Amt to Deduct" := 0;
        "Prepmt VAT Diff. to Deduct" := 0;
      END ELSE BEGIN
        IF SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,ShipmentLine."Order No.",ShipmentLine."Order Line No.") THEN BEGIN
          "Prepmt Amt to Deduct" :=
            ROUND((SalesOrderLine."Prepmt. Amt. Inv." - SalesOrderLine."Prepmt Amt Deducted") *
                   Quantity / (SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced"),Currency."Amount Rounding Precision");
          "Prepmt VAT Diff. to Deduct" := "Prepayment VAT Difference" - "Prepmt VAT Diff. Deducted";
        END ELSE BEGIN
          "Prepmt Amt to Deduct" := 0;
          "Prepmt VAT Diff. to Deduct" := 0;
        END;
      END;

      GetSalesHeader;
      IF SalesHeader."Prices Including VAT" THEN BEGIN
        "Prepmt. Line Amount" := ROUND("Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),Currency."Amount Rounding Precision");
        "Prepmt. Amt. Incl. VAT" := "Prepmt. Line Amount";
      END ELSE BEGIN
        "Prepmt. Line Amount" := "Prepmt Amt to Deduct";
        "Prepmt. Amt. Incl. VAT" := ROUND("Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),Currency."Amount Rounding Precision"
      );
      END;
      "Prepmt. Amt. Inv." := "Prepmt. Line Amount";
      "Prepayment Amount" := "Prepmt Amt to Deduct";
      "Prepmt. VAT Base Amt." := "Prepmt Amt to Deduct";
      "Prepmt. Amount Inv. Incl. VAT" := "Prepmt. Line Amount";
      "Prepmt Amt Deducted" := 0;
    END;

    PROCEDURE ZeroAmountLine@65(QtyType@1000 : 'General,Invoicing,Shipping') : Boolean;
    BEGIN
      IF Type = Type::" " THEN
        EXIT(TRUE);
      IF Quantity = 0 THEN
        EXIT(TRUE);
      IF ("Unit Price" = 0) OR ("Line Discount %" = 100) THEN
        EXIT(TRUE);
      IF QtyType = QtyType::Invoicing THEN
        IF "Qty. to Invoice" = 0 THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE ActualizaCamposImporte@1100253000();
    BEGIN
      // ActualizaCamposImporte

      // $003 JPT 22/03/12 GOC-LP-12018 Actualizar los campos Importe e Importe IVA Incl. en las facturas de venta y de compra

      IF SalesHeader."Prices Including VAT" THEN BEGIN
        Amount                 := ROUND("Line Amount" / (1 + (("VAT %" + "EC %") / 100)), Currency."Amount Rounding Precision" );
        "Amount Including VAT" := "Line Amount";
      END
      ELSE BEGIN
        Amount                 := "Line Amount";
        "Amount Including VAT" := ROUND("Line Amount" * (1 + (("VAT %" + "EC %") / 100)), Currency."Amount Rounding Precision" );
      END;
    END;

    PROCEDURE CheckPermisoAtennea@1000000000();
    VAR
      lcSeguridad@1000000000 : Codeunit 7009751;
      lrCab@1000000001 : Record 36;
    BEGIN
      // CheckPermisoAtennea

      IF NOT lrCab.GET("Document Type", "Document No.") THEN
        EXIT;

      IF lrCab."Reason Code" <> 'ATENNEA' THEN
        EXIT;

      lcSeguridad.TienePermiso('NAV-MOD-FRA', TRUE);
    END;

    BEGIN
    {
      // INCOMING

      $001 Se han agregado nuevos campos

          50000 Marca         Code20
          50001 Tipo de Clave Code10  "Maestro de Claves".Clave
          50002 Personas      Integer
          50003 Dias          Integer
          50005 Importe signo Decimal Campo usado en la contabilizacion

      $002 Se ha creado nueva clave

          Campos : Marca
          KeyGroups : INCOMING
          MaintainSQLIndex : No

      $003 JPT 22/03/12 GOC-LP-12018 Actualizar los campos Importe e Importe IVA Incl. en las facturas de venta y de compra
           Nueva funci¢n "ActualizaCamposImporte"

      $Z004 AJS 21112014 Integracion Atennea Transfer, nuevos campos "Fecha servicio", Servicio, Vuelo, Letra,
                        Bus, "N§ Parte", Origen, Destino, Paxes, Plazas, Zona, Hora, "Importe Impresion", "Importe Impresion con"
                        "Precio Impresion", "Precio Impresion con", "Tipo aplicacion", "N§ Servicios", "Ni¤os Facturados"
      $004 AJS 25032015 CNT-CAR-14096, Solo usuarios autorizados pueden modificar las facturas que vienen de Atennea
    }
    END.
  }
}
