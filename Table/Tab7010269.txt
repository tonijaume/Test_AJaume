OBJECT Table 7010269 Publicacion ofertas online
{
  OBJECT-PROPERTIES
  {
    Date=23/07/15;
    Time=13:38:58;
    Modified=Yes;
    Version List=AIC2009,CNT-CAR-14073;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD(Excursion);
               Test_Solape;
             END;

    OnModify=BEGIN
               TESTFIELD(Excursion);
               Test_Solape;
             END;

  }
  FIELDS
  {
    { 1   ;   ;Id registro         ;Integer       ;AutoIncrement=Yes }
    { 2   ;   ;TourOperador        ;Code10        ;TableRelation=TourOperador.TourOperador;
                                                   OnValidate=VAR
                                                                rTO@1103355000 : Record 7009717;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=TourOperator;
                                                              ESP=TourOperador];
                                                   Description=FK TourOperador }
    { 3   ;   ;Excursion           ;Code10        ;TableRelation="Producto agencia".Codigo WHERE (Tipo Producto=CONST(Excursion),
                                                                                                  Caducado=CONST(No));
                                                   OnValidate=VAR
                                                                rProducto@1103355000 : Record 7009710;
                                                                rCalendario@1000000000 : Record 7010254;
                                                              BEGIN
                                                                Pedir_Turno;
                                                                Test_Turno;
                                                              END;

                                                   CaptionML=[ENU=Excursion;
                                                              ESP=Excursion];
                                                   NotBlank=Yes;
                                                   Description=FK Producto }
    { 5   ;   ;Turno Excursion     ;Integer       ;TableRelation="Calendario excursion".Turno WHERE (Excursion=FIELD(Excursion));
                                                   OnValidate=VAR
                                                                rCalendario@1000000000 : Record 7010254;
                                                              BEGIN
                                                                rCalendario.RESET;
                                                                rCalendario.SETRANGE(Excursion, Excursion);
                                                                rCalendario.SETRANGE (Turno   , "Turno Excursion");
                                                                rCalendario.FINDFIRST;
                                                                Test_Turno;
                                                              END;

                                                   CaptionML=[ENU=Excursion turn;
                                                              ESP=Turno excursion] }
    { 7   ;   ;Fecha venta desde   ;Date          ;CaptionML=[ENU=Initial sale date;
                                                              ESP=Fecha venta desde];
                                                   NotBlank=Yes }
    { 9   ;   ;Fecha venta hasta   ;Date          ;CaptionML=[ENU=Final sale date;
                                                              ESP=Fecha venta hasta];
                                                   NotBlank=Yes }
    { 11  ;   ;Fecha servicio desde;Date          ;OnValidate=BEGIN
                                                                Test_Turno;
                                                              END;

                                                   CaptionML=[ENU=Initial service date;
                                                              ESP=Fecha servicio desde] }
    { 13  ;   ;Fecha servicio hasta;Date          ;OnValidate=BEGIN
                                                                Test_Turno;
                                                              END;

                                                   CaptionML=[ENU=Final sale date;
                                                              ESP=Fecha servicio hasta] }
    { 15  ;   ;Precio adulto       ;Decimal       ;CaptionML=[ENU=Adult price;
                                                              ESP=Precio adulto] }
    { 17  ;   ;Precio ni¤o         ;Decimal       ;CaptionML=[ENU=Child price;
                                                              ESP=Precio ni¤o] }
    { 19  ;   ;Porcentaje          ;Boolean       ;CaptionML=[ENU=Percentage;
                                                              ESP=Porcentaje] }
  }
  KEYS
  {
    {    ;Id registro                             ;Clustered=Yes }
    {    ;TourOperador,Excursion,Turno Excursion,Fecha servicio desde,Fecha servicio hasta,Fecha venta desde,Fecha venta hasta }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=The selected turn is unavailable for the selected dates.;ESP=El turno indicado no est  disponible para el periodo de fechas seleccionado.';
      Text002@1000000001 : TextConst 'ENU=This record overlaps with another already existing.;ESP=El registro se solapa con otro.';
      Text003@1000000002 : TextConst 'ENU=This offer is outside the publishing dates for the touroperator.;ESP=La oferta introducida no esta dentro del periodo publicado para el touroperador.';
      rPar@1000000003 : Record 7009700;
      rParPer@1000000004 : Record 7009701;

    PROCEDURE Pedir_Turno@1000000002();
    VAR
      rCalendario@1000000000 : Record 7010254;
    BEGIN
      // Pedir_Turno
      IF (Excursion <> '') THEN
      BEGIN
        rCalendario.RESET;
        rCalendario.SETRANGE (Excursion    , Excursion);
        rCalendario.SETFILTER("Fecha final", '>=%1', TODAY);
        IF rCalendario.FINDFIRST THEN
        BEGIN
          IF rCalendario.COUNT = 1 THEN
          BEGIN
            "Turno Excursion" := rCalendario.Turno;
          END
          ELSE
          BEGIN
            IF FORM.RUNMODAL(0,rCalendario) = ACTION::LookupOK THEN
              "Turno Excursion" := rCalendario.Turno;
          END;
        END;
      END;
    END;

    PROCEDURE Test_Turno@1000000000();
    VAR
      rCalendario@1000000000 : Record 7010254;
    BEGIN
      IF (Excursion <> '') AND
         ("Turno Excursion" <> 0) AND
         ("Fecha servicio desde" <> 0D) AND
         ("Fecha servicio hasta" <> 0D) THEN
      BEGIN
        rCalendario.RESET;
        rCalendario.SETRANGE (Excursion     , Excursion);
        rCalendario.SETRANGE (Turno         , "Turno Excursion");
        rCalendario.SETFILTER("Fecha inicio", '<=%1',"Fecha servicio hasta");
        rCalendario.SETFILTER("Fecha final" , '>=%1',"Fecha servicio desde");
        IF NOT rCalendario.FINDFIRST THEN
          ERROR(Text001);
      END;
    END;

    PROCEDURE Test_Solape@1000000003();
    VAR
      rOfe@1000000000 : Record 7010269;
    BEGIN
      // Test_Solape
      IF (Excursion <> '') AND
         ("Fecha servicio desde" <> 0D) AND
         ("Fecha servicio hasta" <> 0D) AND
         ("Fecha venta desde" <> 0D) AND
         ("Fecha venta hasta" <> 0D) THEN
      BEGIN
        rOfe.RESET;
        rOfe.SETCURRENTKEY(TourOperador, Excursion, "Turno Excursion", "Fecha servicio desde", "Fecha servicio hasta",
                           "Fecha venta desde", "Fecha venta hasta");
        rOfe.SETRANGE (TourOperador          , TourOperador);
        rOfe.SETRANGE (Excursion             , Excursion);
        rOfe.SETRANGE ("Turno Excursion"     , "Turno Excursion");
        rOfe.SETFILTER("Fecha venta desde"   , '<=%1', "Fecha venta hasta");
        rOfe.SETFILTER("Fecha venta hasta"   , '>=%1', "Fecha venta desde");
        rOfe.SETFILTER("Fecha servicio desde", '<=%1', "Fecha servicio hasta");
        rOfe.SETFILTER("Fecha servicio desde", '>=%1', "Fecha servicio desde");
        rOfe.SETFILTER("Id registro"         , '<>%1', "Id registro");
        IF rOfe.FINDFIRST THEN
          ERROR(Text002);
      END;
    END;

    PROCEDURE Test_Publicacion@1000000001();
    VAR
      rPub@1000000000 : Record 7010268;
    BEGIN
      IF (Excursion <> '') AND
         ("Fecha venta desde" <> 0D) AND
         ("Fecha venta hasta" <> 0D) THEN
      BEGIN
        rPub.RESET;
        rPub.SETRANGE (TourOperador     , TourOperador);
        rPub.SETRANGE (Excursion        , Excursion);
        rPub.SETRANGE ("Turno Excursion", "Turno Excursion");
        rPub.SETFILTER("Fecha desde"    , '<=%1', "Fecha venta hasta");
        rPub.SETFILTER("Fecha hasta"    , '>=%1', "Fecha venta desde");
        IF NOT rPub.FINDFIRST THEN
          ERROR(Text003);
      END;
    END;

    LOCAL PROCEDURE _CheckSaleDates@1000000004();
    BEGIN
    END;

    LOCAL PROCEDURE _CheckServiceDates@1000000005();
    BEGIN
    END;

    PROCEDURE AdultBasePrice@1000000006() : Decimal;
    VAR
      lrRsv@1000000000 : Record 7010162;
      lrTar@1000000001 : Record 7010147;
      lrPre@1000000002 : Record 7010148;
    BEGIN
      // AdultBasePrice

      //. Rellenamos los campos de reserva excursion y llamamos a la funcion que busca la tarifa

      rPar.FINDFIRST;

      CLEAR(lrRsv);
      lrRsv.Delegacion        := rPar.Delegacion;
      lrRsv.Producto          := Excursion;
      lrRsv."Fecha Excursion" := "Fecha servicio desde";
      lrRsv."Fecha Venta"     := "Fecha venta desde";

      IF NOT lrRsv.busca_tarifa(lrTar) THEN
        EXIT(0);

      //. Buscamos el precio base del adulto

      rParPer.FINDFIRST;

      lrPre.RESET;
      lrPre.SETRANGE(Delegacion   , lrTar.Delegacion);
      lrPre.SETRANGE("Tipo precio", lrPre."Tipo precio"::"Precio Base");
      lrPre.SETRANGE("ID Tarifa"  , lrTar."ID Tarifa");
      lrPre.SETRANGE(Codigo       , rParPer."Codigo Adulto");

      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        lrPre.SETFILTER("Fecha Desde", '<=%1', "Fecha venta desde");
        lrPre.SETFILTER("Fecha Hasta", '>=%1', "Fecha venta desde");
      END
      ELSE
      BEGIN
        lrPre.SETFILTER("Fecha Desde", '<=%1', "Fecha servicio desde");
        lrPre.SETFILTER("Fecha Hasta", '>=%1', "Fecha servicio desde");
      END;

      IF lrPre.FINDFIRST THEN
        EXIT(lrPre.Precio);
    END;

    PROCEDURE ChildBasePrice@1000000007() : Decimal;
    VAR
      lrRsv@1000000002 : Record 7010162;
      lrTar@1000000001 : Record 7010147;
      lrPre@1000000000 : Record 7010148;
    BEGIN
      // ChildBasePrice

      //. Rellenamos los campos de reserva excursion y llamamos a la funcion que busca la tarifa

      rPar.FINDFIRST;

      CLEAR(lrRsv);
      lrRsv.Delegacion        := rPar.Delegacion;
      lrRsv.Producto          := Excursion;
      lrRsv."Fecha Excursion" := "Fecha servicio desde";
      lrRsv."Fecha Venta"     := "Fecha venta desde";

      IF NOT lrRsv.busca_tarifa(lrTar) THEN
        EXIT(0);

      //. Buscamos el precio base del ni¤o

      rParPer.FINDFIRST;

      lrPre.RESET;
      lrPre.SETRANGE(Delegacion   , lrTar.Delegacion);
      lrPre.SETRANGE("Tipo precio", lrPre."Tipo precio"::"Precio Base");
      lrPre.SETRANGE("ID Tarifa"  , lrTar."ID Tarifa");
      lrPre.SETRANGE(Codigo       , rParPer."Codigo Ni¤o");

      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        lrPre.SETFILTER("Fecha Desde", '<=%1', "Fecha venta desde");
        lrPre.SETFILTER("Fecha Hasta", '>=%1', "Fecha venta desde");
      END
      ELSE
      BEGIN
        lrPre.SETFILTER("Fecha Desde", '<=%1', "Fecha servicio desde");
        lrPre.SETFILTER("Fecha Hasta", '>=%1', "Fecha servicio desde");
      END;

      IF lrPre.FINDFIRST THEN
        EXIT(lrPre.Precio);
    END;

    PROCEDURE AdultOfferPrice@1000000012() : Decimal;
    VAR
      lwPrecio@1000000000 : Decimal;
      lwOferta@1000000001 : Decimal;
    BEGIN
      // AdultOfferPrice

      lwPrecio := AdultBasePrice;
      IF Porcentaje THEN
        lwOferta := ROUND(lwPrecio * "Precio adulto" / 100)
      ELSE
        lwOferta := "Precio adulto";

      lwPrecio += lwOferta;

      EXIT(lwPrecio);
    END;

    PROCEDURE ChildOfferPrice@1000000013() : Decimal;
    VAR
      lwPrecio@1000000000 : Decimal;
      lwOferta@1000000001 : Decimal;
    BEGIN
      // ChildOfferPrice

      lwPrecio := ChildBasePrice;
      IF Porcentaje THEN
        lwOferta := ROUND(lwPrecio * "Precio ni¤o" / 100)
      ELSE
        lwOferta := "Precio ni¤o";

      lwPrecio += lwOferta;

      EXIT(lwPrecio);
    END;

    BEGIN
    {
      $001 AJS 16092014 Cambio el signo en la aplicacion de las ofertas

      $002 AJS 29102014 Cambio la ordenacion de los campos de la clave secundaria

      $003 AJS 05022015 Corregir error en utilizacion de clave

      $004 AJS 23072015 Modifico la funcion Pedir_Turno para que solo salgan los turnos que no son historicos
    }
    END.
  }
}
