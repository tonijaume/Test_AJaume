OBJECT Table 7114 Analysis Line
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               AnalysisLineTemplate@1000 : Record 7112;
             BEGIN
               LOCKTABLE;
               AnalysisLineTemplate.GET("Analysis Area","Analysis Line Template Name");
             END;

    CaptionML=[ENU=Analysis Line;
               ESP=L¡nea de an lisis];
    LookupFormID=Form7115;
    DrillDownFormID=Form7115;
  }
  FIELDS
  {
    { 1   ;   ;Analysis Area       ;Option        ;CaptionML=[ENU=Analysis Area;
                                                              ESP=µrea an lisis];
                                                   OptionCaptionML=[ENU=Sales,Purchase,Inventory;
                                                                    ESP=Ventas,Compra,Inventario];
                                                   OptionString=Sales,Purchase,Inventory }
    { 2   ;   ;Analysis Line Template Name;Code10 ;TableRelation="Analysis Line Template".Name WHERE (Analysis Area=FIELD(Analysis Area));
                                                   CaptionML=[ENU=Analysis Line Template Name;
                                                              ESP=L¡nea an lisis: nombre plant.] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 4   ;   ;Row Ref. No.        ;Code10        ;OnValidate=BEGIN
                                                                IF "Row Ref. No." <> xRec."Row Ref. No." THEN
                                                                  SubstRowRefNo(xRec."Row Ref. No.","Row Ref. No.");
                                                              END;

                                                   CaptionML=[ENU=Row Ref. No.;
                                                              ESP=Ref. fila n§] }
    { 5   ;   ;Description         ;Text80        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 6   ;   ;Type                ;Option        ;OnValidate=VAR
                                                                InventorySetup@1000 : Record 313;
                                                                SalesSetup@1001 : Record 311;
                                                              BEGIN
                                                                IF Type <> xRec.Type THEN
                                                                  Range := '';
                                                                VALIDATE(Range);

                                                                CASE Type OF
                                                                  Type::"Item Group":
                                                                    BEGIN
                                                                      InventorySetup.GET;
                                                                      InventorySetup.TESTFIELD("Item Group Dimension Code");
                                                                      "Group Dimension Code" := InventorySetup."Item Group Dimension Code";
                                                                    END;
                                                                  Type::"Customer Group":
                                                                    BEGIN
                                                                      SalesSetup.GET;
                                                                      SalesSetup.TESTFIELD("Customer Group Dimension Code");
                                                                      "Group Dimension Code" := SalesSetup."Customer Group Dimension Code";
                                                                    END;
                                                                  Type::"Sales/Purchase person":
                                                                    BEGIN
                                                                      SalesSetup.GET;
                                                                      SalesSetup.TESTFIELD("Salesperson Dimension Code");
                                                                      "Group Dimension Code" := SalesSetup."Salesperson Dimension Code";
                                                                    END;
                                                                  ELSE
                                                                    "Group Dimension Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionCaptionML=[ENU=Item,Item Group,Customer,Customer Group,Vendor,Sales/Purchase person,Formula;
                                                                    ESP=Producto,Grupo productos,Cliente,Grupo clientes,Proveedor,Vendedor/Comprador,F¢rmula];
                                                   OptionString=Item,Item Group,Customer,Customer Group,Vendor,Sales/Purchase person,Formula }
    { 7   ;   ;Range               ;Text250       ;TableRelation=IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Customer)) Customer
                                                                 ELSE IF (Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Type=CONST(Item Group)) "Dimension Value".Code WHERE (Dimension Code=FIELD(Group Dimension Code))
                                                                 ELSE IF (Type=CONST(Customer Group)) "Dimension Value".Code WHERE (Dimension Code=FIELD(Group Dimension Code))
                                                                 ELSE IF (Type=CONST(Sales/Purchase person)) "Dimension Value".Code WHERE (Dimension Code=FIELD(Group Dimension Code));
                                                   OnValidate=VAR
                                                                Item@1003 : Record 27;
                                                                Cust@1002 : Record 18;
                                                                Vend@1001 : Record 23;
                                                                ItemStatisticBuf@1000 : Record 5821;
                                                              BEGIN
                                                                CASE Type OF
                                                                  Type::Item:
                                                                    Item.SETFILTER("No.",Range);
                                                                  Type::Customer:
                                                                    Cust.SETFILTER("No.",Range);
                                                                  Type::Vendor:
                                                                    Vend.SETFILTER("No.",Range);
                                                                  Type::"Item Group",Type::"Customer Group",Type::"Sales/Purchase person":
                                                                    ItemStatisticBuf.SETFILTER("Dimension 1 Filter",Range);
                                                                  Type::Formula:
                                                                    BEGIN
                                                                      Range := UPPERCASE(Range);
                                                                      CheckFormula(Range);
                                                                    END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Range;
                                                              ESP=Intervalo] }
    { 8   ;   ;New Page            ;Boolean       ;CaptionML=[ENU=New Page;
                                                              ESP=Cambiar p gina] }
    { 9   ;   ;Show                ;Option        ;CaptionML=[ENU=Show;
                                                              ESP=Mostrar];
                                                   OptionCaptionML=[ENU=Yes,No,If Any Column Not Zero;
                                                                    ESP=S¡,No,Si ninguna columna es cero];
                                                   OptionString=Yes,No,If Any Column Not Zero }
    { 10  ;   ;Bold                ;Boolean       ;CaptionML=[ENU=Bold;
                                                              ESP=Negrita] }
    { 11  ;   ;Italic              ;Boolean       ;CaptionML=[ENU=Italic;
                                                              ESP=It lica] }
    { 12  ;   ;Underline           ;Boolean       ;CaptionML=[ENU=Underline;
                                                              ESP=Subrayar] }
    { 13  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=[ENU=Show Opposite Sign;
                                                              ESP=Muestra signo opuesto] }
    { 14  ;   ;Source Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Source Type Filter;
                                                              ESP=Filtro tipo origen];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Item";
                                                                    ESP=" ,Cliente,Proveedor,Producto"];
                                                   OptionString=[ ,Customer,Vendor,Item] }
    { 15  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ESP=Filtro fecha] }
    { 16  ;   ;Item Budget Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Item Budget Name".Name WHERE (Analysis Area=FIELD(Analysis Area));
                                                   CaptionML=[ENU=Item Budget Filter;
                                                              ESP=Filtro ppto. producto] }
    { 17  ;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ESP=Filtro almacn] }
    { 18  ;   ;Dimension 1 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 1 Filter;
                                                              ESP=Filtro dimensi¢n 1];
                                                   CaptionClass=GetCaptionClass(1) }
    { 19  ;   ;Dimension 2 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 2 Filter;
                                                              ESP=Filtro dimensi¢n 2];
                                                   CaptionClass=GetCaptionClass(2) }
    { 20  ;   ;Dimension 3 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 3 Filter;
                                                              ESP=Filtro dimensi¢n 3];
                                                   CaptionClass=GetCaptionClass(3) }
    { 21  ;   ;Dimension 1 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 1 Totaling;
                                                              ESP=Total dimensi¢n 1];
                                                   CaptionClass=GetCaptionClass(4) }
    { 22  ;   ;Dimension 2 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 2 Totaling;
                                                              ESP=Total dimensi¢n 2];
                                                   CaptionClass=GetCaptionClass(5) }
    { 23  ;   ;Dimension 3 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 3 Totaling;
                                                              ESP=Total dimensi¢n 3];
                                                   CaptionClass=GetCaptionClass(6) }
    { 24  ;   ;Source No. Filter   ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=IF (Source Type Filter=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type Filter=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type Filter=CONST(Item)) Item;
                                                   CaptionML=[ENU=Source No. Filter;
                                                              ESP=Filtro n§ origen] }
    { 25  ;   ;Group Dimension Code;Code20        ;TableRelation=Dimension;
                                                   CaptionML=[ENU=Group Dimension Code;
                                                              ESP=C¢digo de dimensi¢n de grupo] }
    { 26  ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              ESP=Indentar];
                                                   MinValue=0 }
  }
  KEYS
  {
    {    ;Analysis Area,Analysis Line Template Name,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=The parenthesis at position %1 is misplaced.;ESP=El parntesis en la posici¢n %1 es incorrecto.';
      Text002@1002 : TextConst 'ENU=You cannot have two consecutive operators. The error occurred at position %1.;ESP=No se puede tener dos operaciones consecutivas. Revise la posici¢n %1.';
      Text003@1003 : TextConst 'ENU=There is an operand missing after position %1.;ESP=Falta un operando despus de la posici¢n %1.';
      Text004@1004 : TextConst 'ENU=There are more left parentheses than right parentheses.;ESP=Hay m s parntesis de apertura que de cierre.';
      Text005@1005 : TextConst 'ENU=There are more right parentheses than left parentheses.;ESP=Hay m s parntesis de cierre que de apertura.';
      Text009@1009 : TextConst 'ENU=1,6,,Dimension %1 Filter;ESP=1,6,,Filtro dimensi¢n %1';
      Text010@1010 : TextConst 'ENU=,, Totaling;ESP=,, Totales';
      Text011@1011 : TextConst 'ENU=1,5,,Dimension %1 Totaling;ESP=1,5,,Total dimensi¢n %1';
      GLSetup@1018 : Record 98;
      ItemAnalysisView@1015 : Record 7152;
      HasGLSetup@1022 : Boolean;

    PROCEDURE CheckFormula@1(Formula@1000 : Code[250]);
    VAR
      i@1001 : Integer;
      ParenthesesLevel@1002 : Integer;
      HasOperator@1003 : Boolean;
    BEGIN
      ParenthesesLevel := 0;
      FOR i := 1 TO STRLEN(Formula) DO BEGIN
        IF Formula[i] = '(' THEN
          ParenthesesLevel := ParenthesesLevel + 1
        ELSE
          IF Formula[i] = ')' THEN
            ParenthesesLevel := ParenthesesLevel - 1;
        IF ParenthesesLevel < 0 THEN
          ERROR(Text001,i);
        IF Formula[i] IN ['+','-','*','/','^'] THEN BEGIN
          IF HasOperator THEN
            ERROR(Text002,i)
          ELSE
            HasOperator := TRUE;
          IF i = STRLEN(Formula) THEN
            ERROR(Text003,i)
          ELSE
            IF Formula[i+1] = ')' THEN
              ERROR(Text003,i);
        END ELSE
          HasOperator := FALSE;
      END;
      IF ParenthesesLevel > 0 THEN
        ERROR(Text004)
      ELSE
        IF ParenthesesLevel < 0 THEN
          ERROR(Text005);
    END;

    PROCEDURE SubstRowRefNo@5(OldRowRefNo@1002 : Code[10];NewRowRefNo@1000 : Code[10]);
    VAR
      FormulaAnalysisLine@1001 : Record 7114;
      OriginalRange@1005 : Text[250];
      NewRange@1004 : Text[250];
      Token@1008 : Text[250];
      TheChar@1009 : Text[1];
      i@1006 : Integer;
      TheLength@1003 : Integer;
    BEGIN
      IF (OldRowRefNo = '') OR (NewRowRefNo = '') THEN
        EXIT;
      FormulaAnalysisLine.SETRANGE("Analysis Area","Analysis Area");
      FormulaAnalysisLine.SETRANGE("Analysis Line Template Name","Analysis Line Template Name");
      FormulaAnalysisLine.SETRANGE(Type,Type::Formula);
      IF NOT FormulaAnalysisLine.FIND('-') THEN
        EXIT;
      REPEAT
        OriginalRange := FormulaAnalysisLine.Range;
        TheLength := STRLEN(FormulaAnalysisLine.Range);
        NewRange := '';

        FOR i := 1 TO TheLength DO BEGIN
          TheChar := COPYSTR(FormulaAnalysisLine.Range,i,1);
          IF TheChar IN ['0'..'9','A'..'Z'] THEN BEGIN
            Token := Token + TheChar;
            IF i = TheLength THEN BEGIN
              IF Token = OldRowRefNo THEN
                NewRange := NewRange + NewRowRefNo
              ELSE
                NewRange := NewRange + Token;
              Token := '';
            END;
          END ELSE BEGIN
            IF Token = OldRowRefNo THEN
              NewRange := NewRange + NewRowRefNo
            ELSE
              NewRange := NewRange + Token;
            NewRange := NewRange + TheChar;
            Token := '';
          END;
        END;
        IF NewRange <> OriginalRange THEN BEGIN
          IF "Line No." = FormulaAnalysisLine."Line No." THEN
            Range := NewRange
          ELSE BEGIN
            FormulaAnalysisLine.Range := NewRange;
            FormulaAnalysisLine.MODIFY;
          END;
        END;
      UNTIL FormulaAnalysisLine.NEXT = 0;
    END;

    PROCEDURE LookupTotalingRange@3(VAR Text@1000 : Text[1024]) : Boolean;
    VAR
      InventorySetup@1007 : Record 313;
      SalesSetup@1006 : Record 311;
      ItemList@1005 : Form 31;
      CustList@1004 : Form 22;
      VendList@1003 : Form 27;
    BEGIN
      CASE Type OF
        Type::Item:
          BEGIN
            ItemList.LOOKUPMODE(TRUE);
            IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              Text := ItemList.GetSelectionFilter;
              EXIT(TRUE);
            END;
          END;
        Type::Customer:
          BEGIN
            CustList.LOOKUPMODE(TRUE);
            IF CustList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              Text := CustList.GetSelectionFilter;
              EXIT(TRUE);
            END;
          END;
        Type::Vendor:
          BEGIN
            VendList.LOOKUPMODE(TRUE);
            IF VendList.RUNMODAL = ACTION::LookupOK THEN BEGIN
              Text := VendList.GetSelectionFilter;
              EXIT(TRUE);
            END;
          END;
        Type::"Item Group":
          BEGIN
            InventorySetup.GET;
            InventorySetup.TESTFIELD("Item Group Dimension Code");
            EXIT(LookupDimTotalingRange(Text,InventorySetup."Item Group Dimension Code"));
          END;
        Type::"Customer Group":
          BEGIN
            SalesSetup.GET;
            SalesSetup.TESTFIELD("Customer Group Dimension Code");
            EXIT(LookupDimTotalingRange(Text,SalesSetup."Customer Group Dimension Code"));
          END;
        Type::"Sales/Purchase person":
          BEGIN
            SalesSetup.GET;
            SalesSetup.TESTFIELD("Salesperson Dimension Code");
            EXIT(LookupDimTotalingRange(Text,SalesSetup."Salesperson Dimension Code"));
          END;
      END;
    END;

    PROCEDURE LookupDimTotalingRange@4(VAR Text@1000 : Text[1024];GroupDimCode@1003 : Code[20]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1001 : Form 560;
    BEGIN
      DimVal.FILTERGROUP := 2;
      DimVal.SETRANGE("Dimension Code",GroupDimCode);
      DimVal.FILTERGROUP := 0;
      DimValList.SETTABLEVIEW(DimVal);
      DimValList.LOOKUPMODE(TRUE);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetCaptionClass@12(DimNo@1000 : Integer) : Text[250];
    BEGIN
      GetItemAnalysisView;

      CASE DimNo OF
        1:
          IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
            EXIT('1,6,' + ItemAnalysisView."Dimension 1 Code");
        2:
          IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
            EXIT('1,6,' + ItemAnalysisView."Dimension 2 Code");
        3:
          IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
            EXIT('1,6,' + ItemAnalysisView."Dimension 3 Code");
        4:
          IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
            EXIT('1,5,' + ItemAnalysisView."Dimension 1 Code" + Text010);
        5:
          IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
            EXIT('1,5,' + ItemAnalysisView."Dimension 2 Code" + Text010);
        6:
          IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
            EXIT('1,5,' + ItemAnalysisView."Dimension 3 Code" + Text010);
      END;
      IF DimNo <= 3 THEN
        EXIT(STRSUBSTNO(Text009,DimNo));
      EXIT(STRSUBSTNO(Text011,DimNo - 3));
    END;

    LOCAL PROCEDURE GetItemAnalysisView@2();
    VAR
      AnalysisLineTemplate@1000 : Record 7112;
    BEGIN
      IF (AnalysisLineTemplate."Analysis Area" = "Analysis Area") AND
         (AnalysisLineTemplate.Name = "Analysis Line Template Name")
      THEN
        EXIT;

      IF AnalysisLineTemplate.GET("Analysis Area","Analysis Line Template Name") THEN
        IF AnalysisLineTemplate."Item Analysis View Code" <> '' THEN
          ItemAnalysisView.GET("Analysis Area",AnalysisLineTemplate."Item Analysis View Code")
        ELSE BEGIN
          CLEAR(ItemAnalysisView);
          IF NOT HasGLSetup THEN
            GLSetup.GET;
          HasGLSetup := TRUE;
          ItemAnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          ItemAnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        END;
    END;

    BEGIN
    END.
  }
}
