OBJECT Table 7010415 Prefactura ingreso
{
  OBJECT-PROPERTIES
  {
    Date=27/11/14;
    Time=15:06:43;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=VAR
               rPar@1100244000 : Record 7010311;
               GestNoSerie@1100244001 : Codeunit 396;
             BEGIN
               rPar.FINDFIRST;
               rPar.TESTFIELD("Serie Prefacturas");
               IF "N§ Prefactura" ='' THEN
                 GestNoSerie.InitSeries(rPar."Serie Prefacturas", rPar."Serie Prefacturas", TODAY,
                                       "N§ Prefactura", rPar."Serie Prefacturas");

               Fecha   := TODAY;
               Hora    := TIME;
               Usuario := USERID;
             END;

    OnDelete=BEGIN
               Desactiva;
               ERROR(err1);
             END;

    CaptionML=ESP=Prefactura ingreso;
    LookupFormID=Form7010477;
    DrillDownFormID=Form7010477;
  }
  FIELDS
  {
    { 1   ;   ;N§ Prefactura       ;Code20        ;CaptionML=ESP=N§ Prefactura;
                                                   Description=PK }
    { 3   ;   ;Cliente             ;Code20        ;TableRelation=Customer;
                                                   CaptionML=ESP=Cliente;
                                                   Description=FK Cliente }
    { 5   ;   ;Touroperador        ;Code10        ;TableRelation=TTOO;
                                                   CaptionML=ESP=Touroperador;
                                                   Description=FK Touroperador }
    { 7   ;   ;Garaje              ;Code10        ;TableRelation=Garaje;
                                                   CaptionML=ESP=Garaje;
                                                   Description=FK Garaje }
    { 9   ;   ;Fecha desde         ;Date          ;CaptionML=ESP=Fecha desde }
    { 11  ;   ;Fecha hasta         ;Date          ;CaptionML=ESP=Fecha hasta }
    { 13  ;   ;Tipos Servicio      ;Code50        ;CaptionML=ESP=Tipos Servicio }
    { 15  ;   ;Tipo facturacion    ;Option        ;CaptionML=ESP=Tipo facturacion;
                                                   OptionCaptionML=ESP=Detallada,Resumida x Zona,Resumida x Fecha - Servicio;
                                                   OptionString=Detallada,Resumida x Zona,Resumida x Fecha - Servicio }
    { 17  ;   ;Facturada           ;Boolean       ;CaptionML=ESP=Facturada }
    { 19  ;   ;Fecha               ;Date          ;CaptionML=ESP=Fecha }
    { 21  ;   ;Hora                ;Time          ;CaptionML=ESP=Hora }
    { 23  ;   ;Usuario             ;Code20        ;TableRelation=User;
                                                   CaptionML=ESP=Usuario;
                                                   Description=FK Usuario }
    { 25  ;   ;N§ Factura          ;Code20        ;CaptionML=ESP=N§ Factura }
    { 27  ;   ;Codigos Servicio    ;Code80        ;CaptionML=ESP=Codigos Servicio }
    { 29  ;   ;Facturar sobre marca;Boolean       ;CaptionML=ESP=Facturar sobre marca }
    { 31  ;   ;Tipo prefactura     ;Option        ;CaptionML=ESP=Tipo prefactura;
                                                   OptionCaptionML=ESP=Sin resumen,Resumen x Codigo,Resumen x Zona,Resumen x Vuelo,Resumen x Dia-Codigo,Resumen x Zona-Detalle,Resumen x Zona Dia-Codigo,Texto alternativo,Resumen x Referencia;
                                                   OptionString=Sin resumen,Resumen x Codigo,Resumen x Zona,Resumen x Vuelo,Resumen x Dia-Codigo,Resumen x Zona-Detalle,Resumen x Zona Dia-Codigo,Texto alternativo,Resumen x Referencia }
    { 33  ;   ;Tipo factura        ;Option        ;CaptionML=ESP=Tipo factura;
                                                   OptionCaptionML=ESP=Sin resumen,Resumen x Codigo,Resumen x Zona,Resumen x Vuelo,Resumen x Dia-Codigo,Resumen x Zona-Detalle,Resumen x Zona Dia-Codigo,Texto alternativo,Resumen x Referencia;
                                                   OptionString=Sin resumen,Resumen x Codigo,Resumen x Zona,Resumen x Vuelo,Resumen x Dia-Codigo,Resumen x Zona-Detalle,Resumen x Zona Dia-Codigo,Texto alternativo,Resumen x Referencia }
    { 35  ;   ;N§ Contrato         ;Code10        ;CaptionML=ESP=N§ Contrato }
    { 37  ;   ;Texto alternativo   ;Text250       ;CaptionML=ESP=Texto alternativo }
    { 38  ;   ;Texto Registro      ;Text90        ;OnValidate=VAR
                                                                lrCabV@1103355000 : Record 36;
                                                              BEGIN
                                                                // Si se modifica el texto de registro se debe modificar tambien la de la factura

                                                                IF lrCabV.GET("Tipo Documento","N§ Factura") THEN BEGIN
                                                                  lrCabV."Posting Description" := "Texto Registro";
                                                                  lrCabV.MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Texto Registro }
    { 39  ;   ;Cod. Divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   CaptionML=ESP=Cod. Divisa;
                                                   Description=FK Divisa }
    { 40  ;   ;Zonas de Precio     ;Code90        ;CaptionML=ESP=Zonas de Precio;
                                                   Description=UEX }
    { 41  ;   ;Tipos Vehiculo      ;Code50        ;CaptionML=ESP=Tipos Vehiculo;
                                                   Description=UEX }
    { 42  ;   ;Desactivada         ;Boolean       ;CaptionML=ESP=Desactivada }
    { 43  ;   ;Fecha Desactivada   ;Date          ;CaptionML=ESP=Fecha Desactivada }
    { 44  ;   ;Hora Desactivada    ;Time          ;CaptionML=ESP=Hora Desactivada }
    { 45  ;   ;Usuario Desactivada ;Code20        ;CaptionML=ESP=Usuario Desactivada }
    { 46  ;   ;Fecha Registro factura;Date        ;OnValidate=VAR
                                                                lrCabV@1100244000 : Record 36;
                                                                lrLinV@1100244001 : Record 37;
                                                                lrTTOOxParte@1100244002 : Record 7010365;
                                                                lrCI@1100244003 : Record 7010414;
                                                                lrPI@1103355000 : Record 7035392;
                                                              BEGIN

                                                                // Si se modifica esta fecha se debe modificar tambien la de la factura

                                                                IF lrCabV.GET("Tipo Documento","N§ Factura") THEN BEGIN

                                                                  // AJS 16.08.2005
                                                                  // Si la factura esta marcada como traspasada no dejaremos cambiar la fecha por posibles problemas con la
                                                                  // contabilidad

                                                                  IF lrCabV.Traspasado THEN
                                                                    ERROR(Text001);

                                                                  lrLinV.RESET;
                                                                  lrLinV.SETRANGE("Document Type", "Tipo Documento");
                                                                  lrLinV.SETRANGE("Document No." , "N§ Factura");
                                                                  IF lrLinV.FINDSET(TRUE) THEN
                                                                    lrLinV.MODIFYALL("Shipment Date","Fecha Registro factura");
                                                                  lrCabV.VALIDATE("Posting Date","Fecha Registro factura");
                                                                END;

                                                                // Modificamos el campo en Touroperador x parte

                                                                lrTTOOxParte.RESET;
                                                                lrTTOOxParte.SETCURRENTKEY("N§ Factura");
                                                                lrTTOOxParte.SETRANGE("N§ Factura" ,"N§ Factura");
                                                                IF lrTTOOxParte.FINDSET(TRUE) THEN
                                                                  lrTTOOxParte.MODIFYALL("Fecha Registro Factura","Fecha Registro factura");

                                                                // AJS 30.06.2004
                                                                // Modificamos el campo en coste-ingreso

                                                                lrCI.RESET;
                                                                lrCI.SETCURRENTKEY("N§ Factura");
                                                                lrCI.SETRANGE("N§ Factura", "N§ Factura");
                                                                IF lrCI.FINDSET(TRUE) THEN
                                                                  lrCI.MODIFYALL("Fecha registro factura", "Fecha Registro factura");

                                                                // Producci¢n ingreso

                                                                lrPI.RESET;
                                                                lrPI.SETCURRENTKEY("N§ Prefactura");
                                                                lrPI.SETRANGE("N§ Prefactura", "N§ Prefactura");
                                                                IF lrPI.FINDSET(TRUE) THEN
                                                                  lrPI.MODIFYALL("Fecha registro factura", "Fecha Registro factura");
                                                              END;

                                                   CaptionML=ESP=Fecha Registro factura }
    { 47  ;   ;Propiedad vehiculos ;Option        ;CaptionML=ESP=Propiedad vehiculos;
                                                   OptionCaptionML=ESP=Todos,Propios,Externos;
                                                   OptionString=Todos,Propios,Externos }
    { 48  ;   ;Rango Plazas Desde  ;Integer       ;CaptionML=ESP=Rango Plazas Desde;
                                                   Editable=No }
    { 49  ;   ;Rango Plazas Hasta  ;Integer       ;CaptionML=ESP=Rango Plazas Hasta }
    { 50  ;   ;Prefactura Impresa  ;Boolean       ;CaptionML=ESP=Prefactura Impresa }
    { 51  ;   ;Factura Impresa     ;Boolean       ;CaptionML=ESP=Factura Impresa }
    { 52  ;   ;Imprimir            ;Option        ;CaptionML=ESP=Imprimir;
                                                   OptionCaptionML=ESP=Prefactura,Factura;
                                                   OptionString=Prefactura,Factura }
    { 53  ;   ;Referencia cliente  ;Code30        ;CaptionML=ESP=Referencia cliente;
                                                   Description=Solo se rellena cuando el usuario ha utilizado la referencia como filtro a la hora de facturar }
    { 54  ;   ;Tipo Documento      ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ESP=Oferta,Pedido,Factura,Abono,Pedido abierto,Devoluci¢n];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 55  ;   ;% Dto               ;Decimal       ;CaptionML=ESP=% Dto;
                                                   MinValue=0;
                                                   Description=Aplica este descuento a cada linea de prefactura }
    { 56  ;   ;Impuesto Incluidos  ;Boolean       ;CaptionML=ESP=Impuesto Incluidos;
                                                   Description=Sirve para traspasar a cab venta y saber como aplicar los dtos. }
    { 57  ;   ;Importe base sin impuestos;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Lineas Prefactura"."Importe sin impuestos" WHERE (N§ Prefactura=FIELD(N§ Prefactura),
                                                                                                                      Tipo=CONST(Base)));
                                                   CaptionML=ESP=Importe base sin impuestos;
                                                   Description=Calculado sobre Lineas Prefactura;
                                                   Editable=No }
    { 59  ;   ;Multiples touroperadores;Boolean   ;CaptionML=ESP=Multiples touroperadores }
    { 61  ;   ;Importe suplemen sin impuestos;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Lineas Prefactura"."Importe sin impuestos" WHERE (N§ Prefactura=FIELD(N§ Prefactura),
                                                                                                                      Tipo=CONST(Suplemento)));
                                                   CaptionML=ESP=Importe suplemen sin impuestos;
                                                   Description=Calculado sobre Lineas Prefactura;
                                                   Editable=No }
    { 62  ;   ;Importe Maletas sin impuestos;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Lineas Prefactura"."Importe sin impuestos" WHERE (N§ Prefactura=FIELD(N§ Prefactura),
                                                                                                                      Tipo=CONST(Maletas)));
                                                   CaptionML=ESP=Importe Maletas sin impuestos;
                                                   Description=Calculado sobre Lineas Prefactura;
                                                   Editable=No }
    { 63  ;   ;Importe extras sin impuestos;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Lineas Prefactura"."Importe sin impuestos" WHERE (N§ Prefactura=FIELD(N§ Prefactura),
                                                                                                                      Tipo=CONST(Extra)));
                                                   CaptionML=ESP=Importe extras sin impuestos;
                                                   Description=Calculado sobre Lineas Prefactura;
                                                   Editable=No }
    { 65  ;   ;Mostrar TTOO linea  ;Boolean       ;CaptionML=ESP=Mostrar TTOO linea }
    { 66  ;   ;Modo Desglose Transportados;Option ;CaptionML=ESP=Modo Desglose Transportados;
                                                   OptionCaptionML=ESP=Sin desglose,Entradas/Salidas,Rango Precio;
                                                   OptionString=Sin desglose,Entradas/Salidas,Rango Precio }
    { 67  ;   ;Zona Trabajo        ;Code10        ;TableRelation="Zona de trabajo".Codigo;
                                                   CaptionML=ESP=Zona Trabajo;
                                                   Editable=No }
    { 69  ;   ;Agrupar lineas x vuelo;Boolean     ;CaptionML=ESP=Agrupar lineas x vuelo;
                                                   Editable=No }
    { 71  ;   ;Base imponible factura;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Lineas Prefactura"."Importe sin impuestos" WHERE (N§ Prefactura=FIELD(N§ Prefactura),
                                                                                                                      Tipo=FILTER(Base|Suplemento|Maletas|Extra)));
                                                   CaptionML=ESP=Base imponible factura;
                                                   Description=Calculado sobre Lineas Prefactura;
                                                   Editable=No }
    { 72  ;   ;N§ factura agencia  ;Code20        ;CaptionML=ESP=N§ factura agencia;
                                                   Description=UEX }
    { 80  ;   ;Imprime Mail        ;Boolean       ;CaptionML=ESP=Imprime Mail;
                                                   Description=Valor temporal que indica si en ese momento imprimimos a PDF para Mail }
    { 100 ;   ;Servicio Regular    ;Integer       ;TableRelation="Servicios Regulares".No.;
                                                   CaptionML=ESP=Servicio Regular;
                                                   Description=FK Servicios Repetitivos }
    { 101 ;   ;Tratada             ;Boolean       ;CaptionML=ESP=Tratada;
                                                   Description=TEMPORAL AJS, VACIAR y QUITAR }
    { 102 ;   ;No Serie Alternativa;Boolean       ;CaptionML=ESP=No Serie Alternativa;
                                                   Description=TRN. Inidica que se ha solicitado un numero de serie alternativa desde contrato venta }
    { 103 ;   ;Mostrar Descuentos  ;Boolean       ;CaptionML=ESP=Mostrar Descuentos;
                                                   Description=Indica si en la impresion deseamos que aparezcan los descuentos }
    { 200 ;   ;Prefactura Rappel   ;Code20        ;TableRelation="Prefactura ingreso"."N§ Prefactura";
                                                   OnValidate=BEGIN
                                                                // Si tiene el numero de la propia prefactura indica que esta prefactura es un rappel
                                                              END;

                                                   CaptionML=ESP=Prefactura Rappel;
                                                   Description=Si se ha realizado un rappel sobre esta factura indica el numero de prefactura }
    { 201 ;   ;Factura abonada     ;Boolean       ;CaptionML=ESP=Factura abonada }
    { 300 ;   ;Cliente Facturacion ;Code20        ;TableRelation=Customer;
                                                   CaptionML=ESP=Cliente Facturacion;
                                                   Description=FK Cliente }
    { 301 ;   ;Nombre Cliente      ;Text50        ;CaptionML=ESP=Nombre Cliente }
    { 302 ;   ;Direccion Cliente   ;Text50        ;CaptionML=ESP=Direccion Cliente }
    { 303 ;   ;Direccion Cliente 2 ;Text50        ;CaptionML=ESP=Direccion Cliente 2 }
    { 304 ;   ;C.P.                ;Code20        ;TableRelation="Post Code";
                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode(Poblacion,"C.P.",Provincia,TRUE);
                                                            END;

                                                   CaptionML=ESP=C.P. }
    { 305 ;   ;Poblacion           ;Text30        ;CaptionML=ESP=Poblacion }
    { 306 ;   ;Provincia           ;Text30        ;CaptionML=ESP=Provincia }
    { 307 ;   ;Pais                ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=ESP=Pais }
    { 308 ;   ;CIF/NIF             ;Text20        ;CaptionML=ESP=CIF/NIF }
    { 309 ;   ;Nombre Cliente 2    ;Text50        ;CaptionML=ESP=Nombre Cliente 2 }
    { 400 ;   ;Grupo Registro IVA Producto;Code10 ;TableRelation="VAT Product Posting Group".Code;
                                                   CaptionML=ESP=Grupo Registro IVA Producto;
                                                   Description=FK Grupo Registro IVA Producto }
  }
  KEYS
  {
    {    ;N§ Prefactura                           ;Clustered=Yes }
    {    ;Fecha,Cliente,Touroperador,Facturada     }
    {    ;N§ Factura,Tipo Documento                }
    {    ;Facturada,Fecha Registro factura         }
    {    ;Fecha desde,Fecha hasta                  }
    { No ;Servicio Regular                         }
    {    ;Fecha,Desactivada                        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text50000@1103355002 : TextConst 'ESP=FACTURAR';
      Text50001@1103355003 : TextConst 'ESP="CIF.: "';
      err1@1100244000 : TextConst 'ESP=No es posible Borrar una Prefactura';
      rPar@1103350000 : Record 7010311;
      Text001@1103350001 : TextConst 'ESP=No se puede modificar la fecha de registro de una factura traspasada a contabilidad.';
      Text002@1100253000 : TextConst 'ESP=No se puede deshacer una prefactura ya facturada.';
      Text003@1100253001 : TextConst 'ESP=Se ha restringido el uso de esta acci¢n. Dirijase a su administrador.';
      Text004@1100253002 : TextConst 'ESP=¨Desea realmente deshacer la prefactura %1?';
      cFunBas@1100253003 : Codeunit 7010310;
      PostCode@1103355000 : Record 225;
      Text005@1103355001 : TextConst 'ESP=¨Est  seguro que desea modificar los datos del cliente en la factura?';

    PROCEDURE nom_cliente@1() : Text[50];
    VAR
      rCli@1100244000 : Record 18;
    BEGIN
      // nom_cliente
      //
      IF NOT rCli.GET(Cliente) THEN
        EXIT('')
      ELSE
        EXIT(rCli.Name);
    END;

    PROCEDURE NomClienteFacturacion@1103355002() : Text[50];
    VAR
      lwText@1103355000 : Text[30];
      lrCliTO@1103355001 : Record 7010313;
      lrCli@1103355002 : Record 18;
    BEGIN
      // NomClienteFacturacion

      CLEAR(lwText);
      IF lrCliTO.GET(Cliente,Touroperador) THEN BEGIN
        IF lrCliTO."Cliente facturacion" <> '' THEN BEGIN
          CLEAR(lrCli);
          IF lrCli.GET(lrCliTO."Cliente facturacion") THEN
            EXIT(lrCli.Name);
        END;
      END;

      // Si no lo encuentra devuelve el nombre del cliente actual
      EXIT(nom_cliente);
    END;

    PROCEDURE nom_touroperador@2() : Text[30];
    VAR
      rTO@1100244000 : Record 7010312;
    BEGIN
      // nom_touroperador
      //
      IF NOT rTO.GET(Touroperador) THEN
        EXIT('')
      ELSE
        EXIT(rTO.Nombre);
    END;

    PROCEDURE Desactiva@7();
    BEGIN
      // Desactiva
      // Marca la presente prefactura como desactivada

      Desactivada           := TRUE;
      "Fecha Desactivada"   := TODAY;
      "Hora Desactivada"    := TIME;
      "Usuario Desactivada" := USERID;
      MODIFY;
    END;

    PROCEDURE BuscaTotalIVA@1100244001(VAR prTempVATAmountLine@1100244010 : TEMPORARY Record 290);
    VAR
      rCabVenta@1100244017 : Record 36;
      SalesLine@1100244001 : Record 37;
      TempSalesLine@1100244000 : TEMPORARY Record 37;
      TotalSalesLine@1100244002 : Record 37;
      TotalSalesLineLCY@1100244003 : Record 37;
      rHtCabVenta@1100244019 : Record 112;
      lrLinPre@1100244020 : Record 7010417;
      lrCliente@1100244022 : Record 18;
      SalesPost@1100244016 : Codeunit 80;
      VATAmount@1100244005 : Decimal;
      VATAmountText@1100244004 : Text[30];
      ProfitLCY@1100244009 : Decimal;
      ProfitPct@1100244008 : Decimal;
      AmountInclVAT@1100244006 : Decimal;
      PmtDiscAmount@1100244007 : Decimal;
      InvDiscAmount@1100244011 : Decimal;
      SalesInvLine@1100244013 : Record 113;
      lrCabAbonoVenta@1100244012 : Record 114;
      SalesCrMemoLine@1100244014 : Record 115;
      lwSigno@1100244015 : Integer;
      lwTipoDoc@1100244018 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      VATPostingSetup@1100244021 : Record 325;
      lwDummy@1103355000 : Decimal;
    BEGIN

      // BuscaTotalIVA

      rPar.FINDFIRST;

      CLEAR(SalesLine);
      CLEAR(TotalSalesLine);
      CLEAR(TotalSalesLineLCY);
      CLEAR(SalesPost);
      CLEAR(lwTipoDoc);
      CLEAR(lrCliente);

      // Si no est  facturada pillamos los datos de las lineas, si no del estandard

      // AJS 31.03.2005
      // Si no encontramos la cabecera de venta calcularemos el IVA de la prefactura

      lwTipoDoc := "Tipo Documento";
      IF rCabVenta.GET(lwTipoDoc,"N§ Factura") THEN BEGIN // Si No esta registrado
        IF rCabVenta."Posting Date" <> "Fecha Registro factura" THEN
          Facturada := FALSE
      END
      ELSE
        Facturada := FALSE;

      IF NOT Facturada THEN
      BEGIN // Si no esta registrada
        lrCliente.GET(Cliente);
        lrCliente.TESTFIELD("VAT Bus. Posting Group");
        prTempVATAmountLine.RESET;
        IF prTempVATAmountLine.FINDSET(TRUE) THEN
          prTempVATAmountLine.DELETEALL;
        lrLinPre.RESET;
        lrLinPre.SETRANGE("N§ Prefactura","N§ Prefactura");

        // AJS 12.06.2008
        // Excluimos las lineas de tipo Localizador

        lrLinPre.SETFILTER(Tipo, '<>%1', lrLinPre.Tipo::Localizador);
        IF lrLinPre.FINDSET THEN BEGIN
          VATPostingSetup.RESET;
          REPEAT
            VATPostingSetup.GET(lrCliente."VAT Bus. Posting Group",lrLinPre."Grupo registro IVA producto");
            prTempVATAmountLine.INIT;
            prTempVATAmountLine."VAT Identifier" := VATPostingSetup."VAT Identifier";
            prTempVATAmountLine."VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
            prTempVATAmountLine."VAT %"  := VATPostingSetup."VAT %";
            prTempVATAmountLine."EC %"   := VATPostingSetup."EC %";
            IF NOT prTempVATAmountLine.FIND THEN
              prTempVATAmountLine.INSERT;
            IF "Impuesto Incluidos" THEN BEGIN
              prTempVATAmountLine."Amount Including VAT+EC" += lrLinPre."Importe con impuestos";
              prTempVATAmountLine."VAT+EC Base" :=prTempVATAmountLine."Amount Including VAT+EC" / (1 + (prTempVATAmountLine."VAT %"/100));
              prTempVATAmountLine."VAT Amount"  := prTempVATAmountLine."Amount Including VAT+EC" - prTempVATAmountLine."VAT+EC Base";
            END
            ELSE BEGIN
              prTempVATAmountLine."VAT+EC Base" += lrLinPre."Importe sin impuestos";
              prTempVATAmountLine."VAT Amount"  := prTempVATAmountLine."VAT+EC Base" * prTempVATAmountLine."VAT %" / 100;
              prTempVATAmountLine."Amount Including VAT+EC" := prTempVATAmountLine."VAT Amount" + prTempVATAmountLine."VAT+EC Base";
            END;
            prTempVATAmountLine."Inv. Disc. Base Amount"    += lrLinPre."Importe Sin IVA Sin Dto";
            // JPT 21/06/05 Descuentos sobre cabecera de factura
            IF (rPar."Empresa Real" IN [rPar."Empresa Real"::TRN, rPar."Empresa Real"::CNT]) AND ("% Dto" <> 0) THEN
            BEGIN
              prTempVATAmountLine."Invoice Discount Amount" := ROUND(prTempVATAmountLine."Inv. Disc. Base Amount" * "% Dto" /100);
              prTempVATAmountLine."VAT+EC Base" := prTempVATAmountLine."Inv. Disc. Base Amount" -
                                                  prTempVATAmountLine."Invoice Discount Amount";
              prTempVATAmountLine."VAT Amount"  := prTempVATAmountLine."VAT+EC Base" * prTempVATAmountLine."VAT %" / 100;
              prTempVATAmountLine."Amount Including VAT+EC" := prTempVATAmountLine."VAT Amount" + prTempVATAmountLine."VAT+EC Base";
            END;
            prTempVATAmountLine.MODIFY;
          UNTIL lrLinPre.NEXT=0;
        END;
        EXIT;
      END;

      lwTipoDoc := "Tipo Documento";

      CLEAR(rCabVenta);

      IF rCabVenta.GET(lwTipoDoc,"N§ Factura") THEN
      BEGIN // Si No esta registrado
        SalesPost.GetSalesLines(rCabVenta,TempSalesLine,0);
        CLEAR(SalesPost);
        // AJF 18/09/08
        // A¤ado una variable para cumplir con los par metros de la funci¢n.
        SalesPost.SumSalesLinesTemp(
          rCabVenta,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,
          VATAmount,VATAmountText,ProfitLCY,ProfitPct, lwDummy);

        SalesLine.CalcVATAmountLines(0, rCabVenta, TempSalesLine, prTempVATAmountLine);
        // Agrupamos para que no salga IVA negativo en lineas separadas
        AgrupaLin(prTempVATAmountLine);

        prTempVATAmountLine.MODIFYALL(Modified,FALSE);

      END
      ELSE
      BEGIN // Si esta registrado
        CASE lwTipoDoc OF
          lwTipoDoc::Invoice: BEGIN // Factura
            CLEAR(rHtCabVenta);
            rHtCabVenta.SETCURRENTKEY("Pre-Assigned No.");
            rHtCabVenta.SETRANGE("Pre-Assigned No.","N§ Factura");
            IF rHtCabVenta.FINDFIRST THEN BEGIN
              SalesInvLine.CalcVATAmountLines(rHtCabVenta,prTempVATAmountLine);
            END;
          END;
          lwTipoDoc::"Credit Memo": BEGIN // Abono
            CLEAR(lrCabAbonoVenta);
            lrCabAbonoVenta.SETCURRENTKEY("Pre-Assigned No.");
            lrCabAbonoVenta.SETRANGE("Pre-Assigned No.","N§ Factura");
            IF lrCabAbonoVenta.FINDFIRST THEN
              SalesCrMemoLine.CalcVATAmountLines(lrCabAbonoVenta,prTempVATAmountLine);
          END;
        END;
      END;

      // Los abonos los pone en negativo
      IF  lwTipoDoc= lwTipoDoc::"Credit Memo" THEN BEGIN
        lwSigno := -1;
        IF prTempVATAmountLine.FINDSET(TRUE) THEN BEGIN
          REPEAT
            prTempVATAmountLine."VAT+EC Base"              := prTempVATAmountLine."VAT+EC Base" * lwSigno;
            prTempVATAmountLine."VAT Amount"               := prTempVATAmountLine."VAT Amount" * lwSigno;
            prTempVATAmountLine."Amount Including VAT+EC"  := prTempVATAmountLine."Amount Including VAT+EC" * lwSigno;
            prTempVATAmountLine."Line Amount"              := prTempVATAmountLine."Line Amount" * lwSigno;
            prTempVATAmountLine."Inv. Disc. Base Amount"   := prTempVATAmountLine."Inv. Disc. Base Amount" * lwSigno;
            prTempVATAmountLine."Invoice Discount Amount"  := prTempVATAmountLine."Invoice Discount Amount" * lwSigno;
            prTempVATAmountLine."Calculated VAT Amount"    := prTempVATAmountLine."Calculated VAT Amount" * lwSigno;
            prTempVATAmountLine."VAT Difference"           := prTempVATAmountLine."VAT Difference" * lwSigno;
            prTempVATAmountLine."EC %"                     := prTempVATAmountLine."EC %" * lwSigno;
            prTempVATAmountLine."EC Amount"                := prTempVATAmountLine."EC Amount" * lwSigno;
            prTempVATAmountLine."Line Discount Amount"     := prTempVATAmountLine."Line Discount Amount" * lwSigno;
            prTempVATAmountLine."Calculated EC Amount"     := prTempVATAmountLine."Calculated EC Amount" * lwSigno;
            prTempVATAmountLine."EC Difference"            := prTempVATAmountLine."EC Difference" * lwSigno;
            prTempVATAmountLine.MODIFY;
          UNTIL prTempVATAmountLine.NEXT=0;
        END;
      END;
    END;

    PROCEDURE BuscaTotalCon@1100244002() : Decimal;
    VAR
      lwTotal@1100244000 : Decimal;
      lrLinPre@1100244001 : Record 7010417;
    BEGIN
      // BuscaTotalCon
      // Devuelve el total del importe con impuesto

      CLEAR(lwTotal);
      lrLinPre.RESET;
      lrLinPre.SETRANGE("N§ Prefactura","N§ Prefactura");
      IF lrLinPre.FINDSET THEN BEGIN
        REPEAT
          lwTotal += lrLinPre."Importe con impuestos";
        UNTIL lrLinPre.NEXT=0;
      END;

      EXIT(lwTotal);
    END;

    PROCEDURE AgrupaLin@1100244000(VAR prTempVATAmountLine@1100244002 : TEMPORARY Record 290);
    VAR
      prTemp2@1100244000 : TEMPORARY Record 290;
    BEGIN
      // AgrupaLin
      // Agrupamos para que no salga IVA negativo en lineas separadas
      // La cosa tiene que hacerse as¡ ya que estamos tratando con temporaris

      prTemp2.RESET;
      IF prTemp2.FINDSET(TRUE) THEN
        prTemp2.DELETEALL;

      IF prTempVATAmountLine.FINDSET THEN BEGIN
        REPEAT
          prTemp2.SETRANGE("VAT Identifier"       , prTempVATAmountLine."VAT Identifier");
          prTemp2.SETRANGE("VAT Calculation Type" , prTempVATAmountLine."VAT Calculation Type");
          prTemp2.SETRANGE("Tax Group Code"       , prTempVATAmountLine."Tax Group Code");
          IF NOT prTemp2.FINDFIRST THEN BEGIN
            prTemp2 := prTempVATAmountLine;
            CLEAR(prTemp2."VAT+EC Base");
            CLEAR(prTemp2."VAT Amount");
            CLEAR(prTemp2."Amount Including VAT+EC");
            CLEAR(prTemp2."Line Amount");
            CLEAR(prTemp2."Inv. Disc. Base Amount");
            CLEAR(prTemp2."Invoice Discount Amount");
            CLEAR(prTemp2.Quantity);
            CLEAR(prTemp2."Calculated VAT Amount");
            CLEAR(prTemp2."VAT Difference");
            CLEAR(prTemp2."EC Amount");
            CLEAR(prTemp2."Pmt. Disc. Given Amount");
            CLEAR(prTemp2."Line Discount Amount");
            CLEAR(prTemp2."Calculated EC Amount");
            CLEAR(prTemp2."EC Difference");
            prTemp2.INSERT;
          END;
          prTemp2."VAT+EC Base"             += prTempVATAmountLine."VAT+EC Base";
          prTemp2."VAT Amount"              += prTempVATAmountLine."VAT Amount";
          prTemp2."Amount Including VAT+EC" += prTempVATAmountLine."Amount Including VAT+EC";
          prTemp2."Line Amount"             += prTempVATAmountLine."Line Amount";
          prTemp2."Inv. Disc. Base Amount"  += prTempVATAmountLine."Inv. Disc. Base Amount";
          prTemp2."Invoice Discount Amount" += prTempVATAmountLine."Invoice Discount Amount";
          prTemp2.Quantity                  += prTempVATAmountLine.Quantity;
          prTemp2."Calculated VAT Amount"   += prTempVATAmountLine."Calculated VAT Amount";
          prTemp2."VAT Difference"          += prTempVATAmountLine."VAT Difference";
          prTemp2."EC Amount"               += prTempVATAmountLine."EC Amount";
          prTemp2."Pmt. Disc. Given Amount" += prTempVATAmountLine."Pmt. Disc. Given Amount";
          prTemp2."Line Discount Amount"    += prTempVATAmountLine."Line Discount Amount";
          prTemp2."Calculated EC Amount"    += prTempVATAmountLine."Calculated EC Amount";
          prTemp2."EC Difference"           += prTempVATAmountLine."EC Difference";
          prTemp2.MODIFY;
        UNTIL prTempVATAmountLine.NEXT=0;
      END;

      // En prTemp2 ya lo tenemos todo agrupado. Ahora solo hay que pasarlo a prTempVATAmountLine

      // Borramos lo anterior
      prTempVATAmountLine.RESET;
      IF prTempVATAmountLine.FINDSET(TRUE) THEN
        prTempVATAmountLine.DELETEALL;

      // Lo pasamos a prTempVATAmountLine;
      prTemp2.RESET;
      IF prTemp2.FINDSET THEN BEGIN
        REPEAT
          prTempVATAmountLine := prTemp2;
          prTempVATAmountLine.Positive:= prTempVATAmountLine."Line Amount">=0;
          prTempVATAmountLine.INSERT;
        UNTIL  prTemp2.NEXT=0;
      END;
    END;

    PROCEDURE CreaRegDto@1103350000();
    VAR
      lrRegDto@1103350000 : Record 19;
      lrConfCont@1103350001 : Record 98;
    BEGIN
      // CreaRegDto
      // JPT 21/06/05
      // Crea un registro de descuento de cliente con el codigo de la prefactura que ser  insertada en la cabecera de compra
      // Esto es para provocar que el descuento no sea a nivel de linea si no de cabecera
      // En principio solo TRN

      IF NOT lrRegDto.GET("N§ Prefactura","Cod. Divisa",0) THEN BEGIN
        lrRegDto.Code             := "N§ Prefactura";
        lrRegDto."Currency Code"  := "Cod. Divisa";
        lrRegDto."Minimum Amount" := 0;
        lrRegDto.INSERT;
      END;

      lrRegDto."Discount %" := "% Dto";
      lrRegDto.MODIFY;

      // Nos aseguramos que la configuraci¢n contabilidad est  debidamente rellenada

      lrConfCont.GET;
      lrConfCont.TESTFIELD("Payment Discount Type", lrConfCont."Payment Discount Type"::"Calc. Pmt. Disc. on Lines");
      lrConfCont.TESTFIELD("Discount Calculation" , lrConfCont."Discount Calculation"::"Line Disc. + Inv. Disc. + Payment Disc.");
    END;

    PROCEDURE DeshacerPrefactura@11(pwConfirmacion@1100253000 : Boolean);
    VAR
      rProdIng@1100244003 : Record 7035392;
      rProdIng2@1100244004 : Record 7035392;
    BEGIN
      // DeshacerPrefactura
      //

      IF cFunBas.TestRestriccion(Text50000) THEN
        ERROR(Text003);

      IF Facturada THEN
        ERROR(Text002);

      IF pwConfirmacion THEN
        IF NOT CONFIRM(Text004,FALSE,"N§ Prefactura") THEN
          EXIT;

      rProdIng.RESET;
      rProdIng.SETCURRENTKEY("N§ Prefactura");
      rProdIng.SETRANGE("N§ Prefactura", "N§ Prefactura");
      IF rProdIng.FINDSET THEN BEGIN
        REPEAT
          rProdIng2 := rProdIng;
          rProdIng2.VALIDATE("N§ Prefactura", '');
          rProdIng2.MODIFY;
        UNTIL rProdIng.NEXT = 0;
      END;

      Desactiva;
    END;

    PROCEDURE GetDatosCliente@1103355000(pwCodCliente@1103355001 : Code[20]);
    VAR
      lrCli@1103355000 : Record 18;
    BEGIN
      // GetDatosCliente
      // Rellena los datos del Cliente pasado como parametro
      // Notese que no se hace Modify

      CLEAR(lrCli);
      IF pwCodCliente <> '' THEN
        lrCli.GET(pwCodCliente);

      "Nombre Cliente"       := lrCli.Name;
      "Nombre Cliente 2"     := lrCli."Name 2";
      "Direccion Cliente"    := lrCli.Address;
      "Direccion Cliente 2"  := lrCli."Address 2";
      "C.P."                 := lrCli."Post Code";
      Poblacion              := lrCli.City;
      Provincia              := lrCli.County;
      Pais                   := lrCli."Country/Region Code";
      "CIF/NIF"              := lrCli."VAT Registration No.";
    END;

    PROCEDURE PasaDatosClienteCabVta@1103355001(VAR prCabVta@1103355000 : Record 36);
    BEGIN
      // PasaDatosClienteCabVta

      prCabVta.VALIDATE("Sell-to Customer Name"  , "Nombre Cliente");
      prCabVta.VALIDATE("Sell-to Customer Name 2", "Nombre Cliente 2");
      prCabVta.VALIDATE("Sell-to Address"        , "Direccion Cliente");
      prCabVta.VALIDATE("Sell-to Address 2"      , "Direccion Cliente 2");

      prCabVta."Sell-to City"       := Poblacion;
      prCabVta."Sell-to Post Code"  := "C.P.";

      prCabVta.VALIDATE("Sell-to County"       , Provincia);
      prCabVta.VALIDATE("Sell-to Country/Region Code" , Pais);
      prCabVta.VALIDATE("VAT Registration No." , "CIF/NIF");
    END;

    PROCEDURE CambiaDatosCliente@1103355009();
    VAR
      lrTempPref@1103355000 : TEMPORARY Record 7010415;
      lfDatCli@1103355001 : Form 7035364;
      lrCabVta@1103355002 : Record 36;
    BEGIN
      // CambiaDatosCliente

      CLEAR(lrTempPref);
      CLEAR(lfDatCli);
      lrTempPref := Rec;
      lrTempPref.INSERT;
      lfDatCli.SetTemp(lrTempPref);
      lfDatCli.SETTABLEVIEW(lrTempPref);
      lfDatCli.SETRECORD(lrTempPref);
      lfDatCli.LOOKUPMODE := TRUE;
      IF lfDatCli.RUNMODAL = ACTION::LookupOK THEN BEGIN
        IF NOT CONFIRM (Text005) THEN
          EXIT;

        lfDatCli.GetTemp(lrTempPref);
        "Nombre Cliente"      := lrTempPref."Nombre Cliente";
        "Nombre Cliente 2"    := lrTempPref."Nombre Cliente 2";
        "Direccion Cliente"   := lrTempPref."Direccion Cliente";
        "Direccion Cliente 2" := lrTempPref."Direccion Cliente 2";
        "C.P."                := lrTempPref."C.P.";
        Poblacion             := lrTempPref.Poblacion;
        Provincia             := lrTempPref.Provincia;
        Pais                  := lrTempPref.Pais;
        "CIF/NIF"             := lrTempPref."CIF/NIF";
        MODIFY;

        IF Facturada THEN BEGIN
          lrCabVta.GET("Tipo Documento","N§ Factura");
          PasaDatosClienteCabVta(lrCabVta);
          lrCabVta.MODIFY;
        END;
      END;
    END;

    PROCEDURE DevuelveDatosCli@1103355003(VAR pwInfCli@1103355000 : ARRAY [10] OF Text[100]);
    BEGIN
      // DevuelveDatosCli

      pwInfCli[1]:= "Nombre Cliente";
      pwInfCli[2]:= "Nombre Cliente 2";
      pwInfCli[3]:= "Direccion Cliente";
      pwInfCli[4]:= "Direccion Cliente 2";
      pwInfCli[5]:=  "C.P." + ', ' + Poblacion;
      pwInfCli[6]:=  Provincia;
      pwInfCli[7]:=  Pais;
      pwInfCli[8]:= Text50001 + "CIF/NIF";

      COMPRESSARRAY(pwInfCli);
    END;

    PROCEDURE ShowPiePagina@1103355004();
    VAR
      lrPie@1103355000 : Record 7035398;
    BEGIN
      // ShowPiePagina

      CLEAR(lrPie);
      lrPie.FILTERGROUP(2);
      lrPie.SETRANGE("Num Prefactura", "N§ Prefactura");
      lrPie.FILTERGROUP(0);
      FORM.RUN(0, lrPie);
    END;

    PROCEDURE GetTempDatosCliente@1103355006(VAR prTempPref@1103355000 : TEMPORARY Record 7010415;pwCliente@1103355003 : Code[20]);
    VAR
      lfDatCli@1103355001 : Form 7035364;
      lrCabVta@1103355002 : Record 36;
    BEGIN
      // GetTempDatosCliente

      // Devuelve un temporal con los datos del Cliente
      CLEAR(lfDatCli);
      prTempPref := Rec;
      lfDatCli.SetCliente(pwCliente);
      lfDatCli.SetTemp(prTempPref);
      lfDatCli.SETTABLEVIEW(prTempPref);
      lfDatCli.SETRECORD(prTempPref);
      lfDatCli.LOOKUPMODE := TRUE;
      IF lfDatCli.RUNMODAL = ACTION::LookupOK THEN BEGIN
        lfDatCli.GetTemp(prTempPref);
      END;
    END;

    PROCEDURE GetDatosDesdePrefactura@1103355005(prCliente@1103355001 : Code[20]);
    VAR
      lfPrefacturas@1103355000 : Form 7010477;
      lrPrefacturas@1103355002 : Record 7010415;
    BEGIN
      // GetDatosDesdePrefactura

      lrPrefacturas.SETCURRENTKEY(Fecha, Cliente, Touroperador, Facturada);
      lrPrefacturas.SETRANGE(Cliente, prCliente);
      lfPrefacturas.SETTABLEVIEW(lrPrefacturas);
      lfPrefacturas.SETRECORD   (lrPrefacturas);
      lfPrefacturas.LOOKUPMODE := TRUE;
      IF lfPrefacturas.RUNMODAL = ACTION::LookupOK THEN BEGIN

        lfPrefacturas.GETRECORD(lrPrefacturas);

        "Nombre Cliente"      := lrPrefacturas."Nombre Cliente";
        "Nombre Cliente 2"    := lrPrefacturas."Nombre Cliente 2";
        "Direccion Cliente"   := lrPrefacturas."Direccion Cliente";
        "Direccion Cliente 2" := lrPrefacturas."Direccion Cliente 2";
        "C.P."                := lrPrefacturas."C.P.";
        Poblacion             := lrPrefacturas.Poblacion;
        Provincia             := lrPrefacturas.Provincia;
        Pais                  := lrPrefacturas.Pais;
        "CIF/NIF"             := lrPrefacturas."CIF/NIF";
        MODIFY;

      END;
    END;

    PROCEDURE Reordena@1103355007();
    VAR
      lrLinPre@1103355000 : Record 7010417;
      lrLinPre2@1103355001 : Record 7010417;
      lrParte@1103355002 : Record 7010360;
      lwNo@1103355003 : Integer;
      lwParteA@1103355004 : Code[10];
      lwOk@1103355005 : Boolean;
      lwFin@1103355006 : Boolean;
    BEGIN
      // Reordena
      // JPT 30/07/09
      // Establecemos el valor del campo Orden en las lineas de prefactura
      // Es el orden en que se van a imprimir
      // Los partes de recogida  deben de estar a continuaci¢n de los de las excursiones

      CLEAR(lrLinPre);
      lrLinPre.SETRANGE("N§ Prefactura", "N§ Prefactura");
      lrLinPre.MODIFYALL(Orden, 0);

      CLEAR(lwNo);

      lrLinPre.SETCURRENTKEY("N§ Prefactura",Fecha,"Codigo Servicio",Hora,Parte,Tipo);

      lrLinPre2.COPY(lrLinPre);
      IF lrLinPre.FINDSET THEN BEGIN
        lwParteA := lrLinPre.Parte;  // Parte Anterior
        REPEAT
          lwOk := lrLinPre.Orden = 0;
          IF lwOk THEN BEGIN
            lwNo +=1;
            lrLinPre.Orden := lwNo;
            lrLinPre.MODIFY;
          END;
          lwFin := lrLinPre.NEXT=0;
          IF lwOk THEN BEGIN
            IF lwParteA <> lrLinPre.Parte  THEN BEGIN // Cambio de num de parte
              IF (lwParteA <> '') AND (lrLinPre."Tipo Servicio Fijo" = lrLinPre."Tipo Servicio Fijo"::Excursion) THEN BEGIN
                IF lrParte.GET(lwParteA) THEN BEGIN
                  IF lrParte."Recogida Generada" <> '' THEN BEGIN
                    lrLinPre2.SETRANGE(Parte, lrParte."Recogida Generada");
                    IF lrLinPre2.FINDSET THEN BEGIN
                      REPEAT
                        lwNo +=1;
                        lrLinPre2.Orden := lwNo;
                        lrLinPre2.MODIFY;
                      UNTIL lrLinPre2.NEXT=0;
                    END;
                  END;
                END;
              END;
            END;
          END;
          lwParteA := lrLinPre.Parte;
        UNTIL lwFin;
      END;
    END;

    PROCEDURE CompOrden@1103355008(pwFuerza@1103355000 : Boolean) : Boolean;
    VAR
      lrLinPre@1103355001 : Record 7010417;
      lwOrd@1103355002 : Boolean;
      lwFin@1103355003 : Boolean;
    BEGIN
      // CompOrden
      // JPT 31/07/09
      // Devuelve true si est  ordenado
      // pwFuerza --> Si encuentra alguna linea de prefactura no ordenada, fuerza a reordenarse

      CLEAR(lrLinPre);
      lrLinPre.SETRANGE("N§ Prefactura", "N§ Prefactura");
      lrLinPre.SETRANGE(Orden , 0);
      lwOrd := NOT lrLinPre.FINDFIRST;
      IF (NOT lwOrd) AND pwFuerza THEN
        Reordena;

      EXIT(lwOrd);
    END;

    PROCEDURE GetBaseImp@1000000000() : Decimal;
    VAR
      lrLin@1000000003 : Record 7010417;
      lrCon@1000000002 : Record 7010403;
      lwImp@1000000001 : Decimal;
      lwOk@1000000000 : Boolean;
    BEGIN
      // GetBaseImp

      CLEAR(lrCon);
      IF NOT lrCon.GET(Garaje, "N§ Contrato") THEN
        EXIT;

      CLEAR(lwImp);
      CLEAR(lrLin);
      lrLin.SETRANGE("N§ Prefactura", "N§ Prefactura");

      // AJF 13/07/09
      // AJF 17/07/09
      lrLin.SETFILTER(Tipo, '%1|%2|%3|%4|%5', lrLin.Tipo::Base, lrLin.Tipo::Suplemento, lrLin.Tipo::Extra,
                      lrLin.Tipo::Maletas, lrLin.Tipo::Zona);

      IF lrLin.FIND('-') THEN BEGIN
      //Si las maletas estaban incluidas en el precio base hay que descontar a la hora de mostrar el total base
        REPEAT
          lwOk := (lrLin.Tipo <> lrLin.Tipo::Maletas) OR (NOT lrCon."Maletas incluidas");
          IF lwOk THEN
            lwImp +=  lrLin."Importe sin impuestos";
        UNTIL lrLin.NEXT=0;
      END;

      EXIT(lwImp);
    END;

    BEGIN
    {
      JPT 31/07/09 Nueva Funci¢n "Reordena" para reordenar las lineas de prefactura para su impresi¢n en virtud del nuevo campo Orden

      $001 AJS 11102013 Modifico la funcion nom_cliente y NomClienteFacturacion para que retornen Text(50)
    }
    END.
  }
}
