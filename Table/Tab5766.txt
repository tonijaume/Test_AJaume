OBJECT Table 5766 Warehouse Activity Header
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               END;

               NoSeriesMgt.SetDefaultSeries("Registering No. Series",GetRegisteringNoSeriesCode);
             END;

    OnDelete=BEGIN
               DeleteWhseActivHeader;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Warehouse Activity Header;
               ESP=Cabecera actividad almac‚n];
    LookupFormID=Form5774;
  }
  FIELDS
  {
    { 1   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionCaptionML=[ENU=" ,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick";
                                                                    ESP=" ,Ubicaci¢n,Pick.,Movim.,Ubic. exist.,Pick. exist."];
                                                   OptionString=[ ,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick] }
    { 2   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 3   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=VAR
                                                                WMSManagement@1102601000 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Location Code" <> '' THEN
                                                                  IF NOT WMSManagement.LocationIsAllowed("Location Code") THEN
                                                                    ERROR(STRSUBSTNO(Text001,USERID) + STRSUBSTNO(' %1 %2.',FIELDCAPTION("Location Code"),"Location Code"));

                                                                GetLocation("Location Code");
                                                                CASE Type OF
                                                                  Type::"Invt. Put-away":
                                                                    IF Location.RequireReceive("Location Code") THEN
                                                                      Location.TESTFIELD("Require Receive",FALSE);
                                                                  Type::"Invt. Pick":
                                                                    IF Location.RequireShipment("Location Code") THEN
                                                                      Location.TESTFIELD("Require Shipment",FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n] }
    { 4   ;   ;Assigned User ID    ;Code20        ;TableRelation="Warehouse Employee" WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF "Assigned User ID" <> '' THEN BEGIN
                                                                  "Assignment Date" := TODAY;
                                                                  "Assignment Time" := TIME;
                                                                END ELSE BEGIN
                                                                  "Assignment Date" := 0D;
                                                                  "Assignment Time" := 0T;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Assigned User ID;
                                                              ESP=Id. usuario asignado] }
    { 5   ;   ;Assignment Date     ;Date          ;CaptionML=[ENU=Assignment Date;
                                                              ESP=Fecha asignaci¢n];
                                                   Editable=No }
    { 6   ;   ;Assignment Time     ;Time          ;CaptionML=[ENU=Assignment Time;
                                                              ESP=Hora asignaci¢n];
                                                   Editable=No }
    { 7   ;   ;Sorting Method      ;Option        ;OnValidate=BEGIN
                                                                IF "Sorting Method" <> xRec."Sorting Method" THEN
                                                                  SortWhseDoc;
                                                              END;

                                                   CaptionML=[ENU=Sorting Method;
                                                              ESP=M‚todo ordenaci¢n];
                                                   OptionCaptionML=[ENU=" ,Item,Document,Shelf or Bin,Due Date,Ship-To,Bin Ranking,Action Type";
                                                                    ESP=" ,Prod.,Doc.,Estant. o ubic.,Fecha vto.,Env¡o-a,Ranking ubic.,Tipo acci¢n"];
                                                   OptionString=[ ,Item,Document,Shelf or Bin,Due Date,Ship-To,Bin Ranking,Action Type] }
    { 9   ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ESP=Nos. serie] }
    { 10  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Warehouse Comment Line" WHERE (Table Name=CONST(Whse. Activity Header),
                                                                                                     Type=FIELD(Type),
                                                                                                     No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ESP=Comentario];
                                                   Editable=No }
    { 12  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ESP=N§ copias impresas];
                                                   Editable=No }
    { 13  ;   ;No. of Lines        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Warehouse Activity Line" WHERE (Activity Type=FIELD(Type),
                                                                                                      No.=FIELD(No.),
                                                                                                      Source Type=FIELD(Source Type Filter),
                                                                                                      Source Subtype=FIELD(Source Subtype Filter),
                                                                                                      Source No.=FIELD(Source No. Filter),
                                                                                                      Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=No. of Lines;
                                                              ESP=N§ l¡neas];
                                                   Editable=No }
    { 14  ;   ;Source Type Filter  ;Integer       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Source Type Filter;
                                                              ESP=Filtro tipo origen] }
    { 15  ;   ;Source Subtype Filter;Option       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Source Subtype Filter;
                                                              ESP=Filtro subtipo origen];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    ESP=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10 }
    { 16  ;   ;Source No. Filter   ;Code250       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Source No. Filter;
                                                              ESP=Filtro n§ origen] }
    { 17  ;   ;Location Filter     ;Code250       ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Location Filter;
                                                              ESP=Filtro almac‚n] }
    { 20  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 61  ;   ;Registering No.     ;Code20        ;CaptionML=[ENU=Registering No.;
                                                              ESP=N§ registro] }
    { 62  ;   ;Last Registering No.;Code20        ;TableRelation=IF (Type=CONST(Put-away)) "Registered Whse. Activity Hdr.".No. WHERE (Type=CONST(Put-away))
                                                                 ELSE IF (Type=CONST(Pick)) "Registered Whse. Activity Hdr.".No. WHERE (Type=CONST(Pick))
                                                                 ELSE IF (Type=CONST(Movement)) "Registered Whse. Activity Hdr.".No. WHERE (Type=CONST(Movement));
                                                   CaptionML=[ENU=Last Registering No.;
                                                              ESP=élt. N§ registro];
                                                   Editable=No }
    { 63  ;   ;Registering No. Series;Code10      ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Registering No. Series" <> '' THEN BEGIN
                                                                  WhseSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetRegisteringNoSeriesCode,"Registering No. Series");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH WhseActivHeader DO BEGIN
                                                                WhseActivHeader := Rec;
                                                                WhseSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetRegisteringNoSeriesCode,"Registering No. Series") THEN
                                                                  VALIDATE("Registering No. Series");
                                                                Rec := WhseActivHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Registering No. Series;
                                                              ESP=N§ serie registro] }
    { 7303;   ;Date of Last Printing;Date         ;CaptionML=[ENU=Date of Last Printing;
                                                              ESP=Fecha £lt. impresi¢n];
                                                   Editable=No }
    { 7304;   ;Time of Last Printing;Time         ;CaptionML=[ENU=Time of Last Printing;
                                                              ESP=Hora £lt. impresi¢n];
                                                   Editable=No }
    { 7305;   ;Breakbulk Filter    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Breakbulk Filter" <> xRec."Breakbulk Filter" THEN
                                                                  SetBreakbulkFilter;
                                                              END;

                                                   CaptionML=[ENU=Breakbulk Filter;
                                                              ESP=Filtro divisi¢n bulto] }
    { 7306;   ;Source No.          ;Code20        ;OnValidate=VAR
                                                                WhseRequest@1002 : Record 5765;
                                                                CreateInvtPutAway@1001 : Codeunit 7321;
                                                                CreateInvtPick@1000 : Codeunit 7322;
                                                              BEGIN
                                                                IF "Source No." <> xRec."Source No." THEN BEGIN
                                                                  IF LineExist THEN
                                                                    ERROR(Text002,FIELDCAPTION("Source No."));
                                                                  IF "Source No." <> '' THEN BEGIN
                                                                    TESTFIELD("Location Code");
                                                                    TESTFIELD("Source Document");
                                                                  END;
                                                                  IF ("Source Type" <> 0) AND ("Source No." <> '') THEN BEGIN
                                                                    IF Type = Type::"Invt. Put-away" THEN BEGIN
                                                                      WhseRequest.GET(
                                                                        WhseRequest.Type::Inbound,"Location Code","Source Type","Source Subtype","Source No.");
                                                                      WhseRequest.TESTFIELD("Document Status",WhseRequest."Document Status"::Released);
                                                                      CreateInvtPutAway.SetWhseRequest(WhseRequest,TRUE);
                                                                      CreateInvtPutAway.RUN(Rec);
                                                                    END;
                                                                    IF Type = Type::"Invt. Pick" THEN BEGIN
                                                                      WhseRequest.GET(
                                                                        WhseRequest.Type::Outbound,"Location Code","Source Type","Source Subtype","Source No.");
                                                                      WhseRequest.TESTFIELD("Document Status",WhseRequest."Document Status"::Released);
                                                                      CreateInvtPick.SetWhseRequest(WhseRequest,TRUE);
                                                                      CreateInvtPick.RUN(Rec);
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Source No.;
                                                              ESP=C¢d. procedencia mov.] }
    { 7307;   ;Source Document     ;Option        ;OnValidate=BEGIN
                                                                IF "Source Document" <> xRec."Source Document" THEN BEGIN
                                                                  IF LineExist THEN
                                                                    ERROR(Text002,FIELDCAPTION("Source Document"));
                                                                  "Source No." := '';
                                                                END;

                                                                CASE "Source Document" OF
                                                                  "Source Document"::"Purchase Order":
                                                                    BEGIN
                                                                      "Source Type" := 39;
                                                                      "Source Subtype" := 1;
                                                                    END;
                                                                  "Source Document"::"Purchase Return Order":
                                                                    BEGIN
                                                                      "Source Type" := 39;
                                                                      "Source Subtype" := 5;
                                                                    END;
                                                                  "Source Document"::"Sales Order":
                                                                    BEGIN
                                                                      "Source Type" := 37;
                                                                      "Source Subtype" := 1;
                                                                    END;
                                                                  "Source Document"::"Sales Return Order":
                                                                    BEGIN
                                                                      "Source Type" := 37;
                                                                      "Source Subtype" := 5;
                                                                    END;
                                                                  "Source Document"::"Outbound Transfer":
                                                                    BEGIN
                                                                      "Source Type" := 5741;
                                                                      "Source Subtype" := 0;
                                                                    END;
                                                                  "Source Document"::"Inbound Transfer":
                                                                    BEGIN
                                                                      "Source Type" := 5741;
                                                                      "Source Subtype" := 1;
                                                                    END;
                                                                  "Source Document"::"Prod. Consumption":
                                                                    BEGIN
                                                                      "Source Type" := 5407;
                                                                      "Source Subtype" := 3;
                                                                    END;
                                                                  "Source Document"::"Prod. Output":
                                                                    BEGIN
                                                                      "Source Type" := 5406;
                                                                      "Source Subtype" := 3;
                                                                    END;
                                                                END;

                                                                IF "Source Document" = 0 THEN BEGIN
                                                                  "Source Type" := 0;
                                                                  "Source Subtype" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Source Document;
                                                              ESP=Documento origen];
                                                   OptionCaptionML=[ENU=" ,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer,Outbound Transfer,Prod. Consumption,Prod. Output";
                                                                    ESP=" ,Pedido venta,,,Devoluci¢n venta,Pedido compra,,,Devoluci¢n compra,Transferencia entrada,Transferencia salida,Consumo prod.,Salida prod."];
                                                   OptionString=[ ,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer,Outbound Transfer,Prod. Consumption,Prod. Output];
                                                   BlankZero=Yes }
    { 7308;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              ESP=Tipo procedencia mov.] }
    { 7309;   ;Source Subtype      ;Option        ;CaptionML=[ENU=Source Subtype;
                                                              ESP=Subtipo origen];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    ESP=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 7310;   ;Destination Type    ;Option        ;CaptionML=[ENU=Destination Type;
                                                              ESP=Tipo destino];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Location,Item,Family,Sales Order";
                                                                    ESP=" ,Cliente,Proveedor,Almac‚n,Producto,Familia,Pedido vtas."];
                                                   OptionString=[ ,Customer,Vendor,Location,Item,Family,Sales Order] }
    { 7311;   ;Destination No.     ;Code20        ;TableRelation=IF (Destination Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Destination Type=CONST(Customer)) Customer
                                                                 ELSE IF (Destination Type=CONST(Location)) Location
                                                                 ELSE IF (Destination Type=CONST(Item)) Item
                                                                 ELSE IF (Destination Type=CONST(Family)) Family
                                                                 ELSE IF (Destination Type=CONST(Sales Order)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Destination No.;
                                                              ESP=N§ destino] }
    { 7312;   ;External Document No.;Code20       ;CaptionML=[ENU=External Document No.;
                                                              ESP=N§ documento externo] }
    { 7313;   ;Expected Receipt Date;Date         ;CaptionML=[ENU=Expected Receipt Date;
                                                              ESP=Fecha recepci¢n esperada] }
    { 7314;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ESP=Fecha env¡o] }
    { 7315;   ;External Document No.2;Code20      ;CaptionML=[ENU=External Document No.2;
                                                              ESP=N§ doc. externo 2] }
  }
  KEYS
  {
    {    ;Type,No.                                ;Clustered=Yes }
    {    ;Location Code                            }
    {    ;Source Document,Source No.,Location Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      Location@1012 : Record 14;
      WhseActivHeader@1006 : Record 5766;
      WhseSetup@1008 : Record 5769;
      InvtSetup@1002 : Record 313;
      NoSeriesMgt@1010 : Codeunit 396;
      Text001@1001 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.;ESP=Primero debe configurar usuario %1 como empleado almac‚n.';
      Text002@1003 : TextConst 'ENU=You cannot change %1 if lines are existing.;ESP=No puede cambiar %1 si las l¡ns. existen.';

    PROCEDURE AssistEdit@8(OldWhseActivHeader@1000 : Record 5766) : Boolean;
    BEGIN
      WITH WhseActivHeader DO BEGIN
        WhseActivHeader := Rec;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldWhseActivHeader."No. Series","No. Series")
        THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := WhseActivHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@7() : Code[10];
    BEGIN
      CASE Type OF
        Type::"Put-away":
          BEGIN
            WhseSetup.GET;
            EXIT(WhseSetup."Whse. Put-away Nos.");
          END;
        Type::Pick:
          BEGIN
            WhseSetup.GET;
            EXIT(WhseSetup."Whse. Pick Nos.");
          END;
        Type::Movement:
          BEGIN
            WhseSetup.GET;
            EXIT(WhseSetup."Whse. Movement Nos.");
          END;
        Type::"Invt. Put-away":
          BEGIN
            InvtSetup.GET;
            EXIT(InvtSetup."Inventory Put-away Nos.");
          END;
        Type::"Invt. Pick":
          BEGIN
            InvtSetup.GET;
            EXIT(InvtSetup."Inventory Pick Nos.");
          END;
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@5() : Boolean;
    BEGIN
      CASE Type OF
        Type::"Put-away":
          BEGIN
            WhseSetup.GET;
            WhseSetup.TESTFIELD("Whse. Put-away Nos.");
          END;
        Type::Pick:
          BEGIN
            WhseSetup.GET;
            WhseSetup.TESTFIELD("Whse. Pick Nos.");
          END;
        Type::Movement:
          BEGIN
            WhseSetup.GET;
            WhseSetup.TESTFIELD("Whse. Movement Nos.");
          END;
        Type::"Invt. Put-away":
          BEGIN
            InvtSetup.GET;
            InvtSetup.TESTFIELD("Inventory Put-away Nos.");
          END;
        Type::"Invt. Pick":
          BEGIN
            InvtSetup.GET;
            InvtSetup.TESTFIELD("Inventory Pick Nos.");
          END;
      END;
    END;

    LOCAL PROCEDURE GetRegisteringNoSeriesCode@9() : Code[10];
    BEGIN
      WhseSetup.GET;
      CASE Type OF
        Type::"Put-away":
          EXIT(WhseSetup."Registered Whse. Put-away Nos.");
        Type::Pick:
          EXIT(WhseSetup."Registered Whse. Pick Nos.");
        Type::Movement:
          EXIT(WhseSetup."Registered Whse. Movement Nos.");
      END;
    END;

    PROCEDURE SortWhseDoc@3();
    VAR
      WhseActivLine2@1001 : Record 5767;
      WhseActivLine3@1002 : Record 5767;
      WhseActivLine4@1003 : Record 5767;
      TempWhseActivLine@1004 : TEMPORARY Record 5767;
      SequenceNo@1000 : Integer;
      SortingOrder@1005 : 'Bin,Shelf';
    BEGIN
      WhseActivLine2.LOCKTABLE;
      WhseActivLine2.SETRANGE("Activity Type",Type);
      WhseActivLine2.SETRANGE("No.","No.");
      CASE "Sorting Method" OF
        "Sorting Method"::Item:
          WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Item No.");
        "Sorting Method"::Document:
          WhseActivLine2.SETCURRENTKEY(
            "Activity Type","No.","Location Code","Source Document","Source No.");
        "Sorting Method"::"Shelf or Bin":
          BEGIN
            GetLocation("Location Code");
            IF Location."Bin Mandatory" THEN BEGIN
              WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Bin Code");
              IF WhseActivLine2.FIND('-') THEN
                IF WhseActivLine2."Activity Type" <> WhseActivLine2."Activity Type" :: Pick
                THEN BEGIN
                  SequenceNo := 10000;
                  WhseActivLine2.SETRANGE("Action Type",WhseActivLine2."Action Type"::Place);
                  WhseActivLine2.SETRANGE("Breakbulk No.",0);
                  IF WhseActivLine2.FIND('-') THEN
                    REPEAT
                      TempWhseActivLine.INIT;
                      TempWhseActivLine.COPY(WhseActivLine2);
                      TempWhseActivLine.INSERT;
                    UNTIL WhseActivLine2.NEXT = 0;
                  TempWhseActivLine.SETRANGE("Breakbulk No.",0);
                  IF TempWhseActivLine.FIND('-') THEN
                    REPEAT
                      WhseActivLine2.SETRANGE("Breakbulk No.",0);
                      WhseActivLine2.SETRANGE(
                        "Action Type",WhseActivLine2."Action Type"::Take);
                      WhseActivLine2.SETRANGE(
                        "Whse. Document Type",TempWhseActivLine."Whse. Document Type");
                      WhseActivLine2.SETRANGE(
                        "Whse. Document No.",TempWhseActivLine."Whse. Document No.");
                      WhseActivLine2.SETRANGE(
                        "Whse. Document Line No.",TempWhseActivLine."Whse. Document Line No.");
                      IF WhseActivLine2.FIND('-') THEN
                        REPEAT
                          SortTakeLines(WhseActivLine2,SequenceNo);
                          WhseActivLine3.GET(
                            TempWhseActivLine."Activity Type",
                            TempWhseActivLine."No.",TempWhseActivLine."Line No.");
                          WhseActivLine3."Sorting Sequence No." := SequenceNo;
                          WhseActivLine3.MODIFY;
                          SequenceNo := SequenceNo + 10000;
                        UNTIL WhseActivLine2.NEXT = 0;
                    UNTIL TempWhseActivLine.NEXT = 0;
                END ELSE BEGIN
                  SortLinesBinShelf(WhseActivLine2,SequenceNo,SortingOrder::Bin);
                  WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Sorting Sequence No.");
                END;
            END ELSE BEGIN
              SortLinesBinShelf(WhseActivLine2,SequenceNo,SortingOrder::Shelf);
              WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Sorting Sequence No.");
            END;
          END;
        "Sorting Method"::"Due Date":
          WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Due Date");
        "Sorting Method"::"Ship-To":
          WhseActivLine2.SETCURRENTKEY(
            "Activity Type","No.","Destination Type","Destination No.");
        "Sorting Method"::"Bin Ranking":
          WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Bin Ranking");
        "Sorting Method"::"Action Type":
          BEGIN
            WhseActivLine2.SETCURRENTKEY("Activity Type","No.","Action Type","Bin Code");
            WhseActivLine2.SETRANGE("Action Type",WhseActivLine2."Action Type"::Take);
            IF WhseActivLine2.FIND('-') THEN BEGIN
              SequenceNo := 10000;
              REPEAT
                WhseActivLine2."Sorting Sequence No." := SequenceNo;
                WhseActivLine2.MODIFY;
                SequenceNo := SequenceNo + 10000;
                IF WhseActivLine2."Breakbulk No." <> 0 THEN BEGIN
                  WhseActivLine3.COPY(WhseActivLine2);
                  WhseActivLine3.SETRANGE("Action Type",WhseActivLine2."Action Type"::Place);
                  WhseActivLine3.SETRANGE("Breakbulk No.",WhseActivLine2."Breakbulk No.");
                  IF WhseActivLine3.FIND('-') THEN
                    REPEAT
                      WhseActivLine3."Sorting Sequence No." := SequenceNo;
                      WhseActivLine3.MODIFY;
                      SequenceNo := SequenceNo + 10000;
                    UNTIL WhseActivLine3.NEXT = 0;
                END;
              UNTIL WhseActivLine2.NEXT = 0;
            END;
            WhseActivLine2.SETRANGE("Action Type",WhseActivLine2."Action Type"::Place);
            WhseActivLine2.SETRANGE("Breakbulk No.",0);
            IF WhseActivLine2.FIND('-') THEN
              REPEAT
                WhseActivLine2."Sorting Sequence No." := SequenceNo;
                WhseActivLine2.MODIFY;
                SequenceNo := SequenceNo + 10000;
              UNTIL WhseActivLine2.NEXT = 0;
          END;
      END;

      IF SequenceNo = 0 THEN BEGIN
        WhseActivLine2.SETRANGE("Breakbulk No.",0);
        IF WhseActivLine2.FIND('-') THEN BEGIN
          SequenceNo := 10000;
          REPEAT
            WhseActivLine3.COPY(WhseActivLine2);
            WhseActivLine3.SETRANGE("Bin Code",WhseActivLine2."Bin Code");
            WhseActivLine3.SETFILTER("Breakbulk No.",'<>0');
            WhseActivLine3.SETRANGE(
              "Whse. Document Type",WhseActivLine2."Whse. Document Type");
            WhseActivLine3.SETRANGE(
              "Whse. Document No.",WhseActivLine2."Whse. Document No.");
            WhseActivLine3.SETRANGE(
              "Whse. Document Line No.",WhseActivLine2."Whse. Document Line No.");
            IF WhseActivLine3.FIND('-') THEN
              REPEAT
                WhseActivLine3."Sorting Sequence No." := SequenceNo;
                WhseActivLine3.MODIFY;
                SequenceNo := SequenceNo + 10000;
              UNTIL WhseActivLine3.NEXT = 0;

            WhseActivLine2."Sorting Sequence No." := SequenceNo;
            WhseActivLine2.MODIFY;
            SequenceNo := SequenceNo + 10000;
          UNTIL WhseActivLine2.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE SortTakeLines@10(VAR NewWhseActivLine2@1000 : Record 5767;VAR NewSequenceNo@1001 : Integer);
    VAR
      WhseActivLine3@1002 : Record 5767;
    BEGIN
      IF NewWhseActivLine2.MARK = FALSE THEN BEGIN
        WhseActivLine3.COPY(NewWhseActivLine2);
        WhseActivLine3.SETRANGE("Bin Code",NewWhseActivLine2."Bin Code");
        WhseActivLine3.SETFILTER("Breakbulk No.",'<>0');
        WhseActivLine3.SETRANGE("Action Type");
        IF WhseActivLine3.FIND('-') THEN
          REPEAT
            WhseActivLine3."Sorting Sequence No." := NewSequenceNo;
            WhseActivLine3.MODIFY;
            NewSequenceNo := NewSequenceNo + 10000;
          UNTIL WhseActivLine3.NEXT = 0;

        NewWhseActivLine2.MARK(TRUE);
        NewWhseActivLine2."Sorting Sequence No." := NewSequenceNo;
        NewWhseActivLine2.MODIFY;
        NewSequenceNo := NewSequenceNo + 10000;
      END;
    END;

    PROCEDURE SortLinesBinShelf@12(VAR WhseActLine@1000 : Record 5767;VAR SeqNo@1001 : Integer;SortOrder@1002 : 'Bin,Shelf');
    VAR
      WhseActLineLocal@1003 : Record 5767;
      TempWhseActLine@1004 : TEMPORARY Record 5767;
      NewSequenceNo@1005 : Integer;
    BEGIN
      TempWhseActLine.DELETEALL;
      SeqNo := 0;
      WhseActLineLocal.COPY(WhseActLine);
      WhseActLineLocal.SETCURRENTKEY("Activity Type","No.","Line No.");
      IF NOT WhseActLineLocal.FINDSET THEN
        EXIT;
      REPEAT
        IF WhseActLineLocal."Action Type" = WhseActLineLocal."Action Type"::Take THEN BEGIN
          TempWhseActLine := WhseActLineLocal;
          TempWhseActLine.INSERT;
        END;
      UNTIL WhseActLineLocal.NEXT = 0;
      CASE SortOrder OF
        1:
          TempWhseActLine.SETCURRENTKEY("Activity Type","No.","Bin Code");
        2:
          TempWhseActLine.SETCURRENTKEY("Activity Type","No.","Shelf No.");
      END;
      IF NOT TempWhseActLine.FIND('-') THEN
        EXIT;
      NewSequenceNo := 0;
      REPEAT
        NewSequenceNo += 10000;
        WhseActLineLocal.GET(TempWhseActLine."Activity Type",TempWhseActLine."No.",TempWhseActLine."Line No.");
        WhseActLineLocal."Sorting Sequence No." := NewSequenceNo;
        WhseActLineLocal.MODIFY;
        NewSequenceNo += 10000;
        IF WhseActLineLocal.NEXT <> 0 THEN
          IF WhseActLineLocal."Action Type" = WhseActLineLocal."Action Type"::Place THEN BEGIN
            WhseActLineLocal."Sorting Sequence No." := NewSequenceNo;
            WhseActLineLocal.MODIFY;
          END;
      UNTIL TempWhseActLine.NEXT = 0;
      SeqNo := NewSequenceNo;
    END;

    LOCAL PROCEDURE SetBreakbulkFilter@6();
    VAR
      WhseActivLine@1000 : Record 5767;
    BEGIN
      WhseActivLine.SETRANGE("Activity Type",Type);
      WhseActivLine.SETRANGE("No.","No.");
      WhseActivLine.SETRANGE("Original Breakbulk",TRUE);
      IF "Breakbulk Filter" THEN
        WhseActivLine.MODIFYALL(Breakbulk,TRUE)
      ELSE
        WhseActivLine.MODIFYALL(Breakbulk,FALSE)
    END;

    PROCEDURE DeleteWhseActivHeader@11();
    VAR
      WhseActivLine2@1000 : Record 5767;
      WhseComment@1001 : Record 5770;
    BEGIN
      WhseActivLine2.SETRANGE("Activity Type",Type);
      WhseActivLine2.SETRANGE("No.","No.");
      IF WhseActivLine2.FIND('-') THEN
        WhseActivLine2.DeleteRelatedWhseActivLines(WhseActivLine2,TRUE);

      WhseComment.SETRANGE("Table Name",WhseComment."Table Name"::"Whse. Activity Header");
      WhseComment.SETRANGE(Type,Type);
      WhseComment.SETRANGE("No.","No.");
      WhseComment.DELETEALL;
    END;

    LOCAL PROCEDURE GetLocation@4(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE LookupActivityHeader@1(VAR CurrentLocationCode@1000 : Code[10];VAR WhseActivHeader@1001 : Record 5766) : Boolean;
    BEGIN
      COMMIT;
      IF USERID <> '' THEN BEGIN
        WhseActivHeader.FILTERGROUP := 2;
        WhseActivHeader.SETRANGE("Location Code");
      END;
      IF FORM.RUNMODAL(0,WhseActivHeader) = ACTION::LookupOK THEN;
      IF USERID <> '' THEN BEGIN
        WhseActivHeader.FILTERGROUP := 2;
        WhseActivHeader.SETRANGE("Location Code",WhseActivHeader."Location Code");
        WhseActivHeader.FILTERGROUP := 0;
      END;
      CurrentLocationCode := WhseActivHeader."Location Code";
    END;

    LOCAL PROCEDURE LineExist@2() : Boolean;
    VAR
      WhseActivLine@1000 : Record 5767;
    BEGIN
      WhseActivLine.SETRANGE("Activity Type",Type);
      WhseActivLine.SETRANGE("No.","No.");
      IF WhseActivLine.FIND('-') THEN
        EXIT(TRUE);
    END;

    PROCEDURE FindFirstAllowedRec@13(Which@1000 : Text[1024]) : Boolean;
    VAR
      WhseActivHeader@1010 : Record 5766;
      WMSManagement@1001 : Codeunit 7302;
    BEGIN
      IF FIND(Which) THEN BEGIN
        WhseActivHeader := Rec;
        WHILE TRUE DO BEGIN
          IF WMSManagement.LocationIsAllowedToView("Location Code") THEN
            EXIT(TRUE);

          IF NEXT(1) = 0 THEN BEGIN
            Rec := WhseActivHeader;
            IF FIND(Which) THEN
              WHILE TRUE DO BEGIN
                IF WMSManagement.LocationIsAllowedToView("Location Code") THEN
                  EXIT(TRUE);

                IF NEXT(-1) = 0 THEN
                  EXIT(FALSE);
              END;
          END;
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FindNextAllowedRec@14(Steps@1000 : Integer) : Integer;
    VAR
      WhseActivHeader@1010 : Record 5766;
      WMSManagement@1001 : Codeunit 7302;
      RealSteps@1003 : Integer;
      NextSteps@1002 : Integer;
    BEGIN
      RealSteps := 0;
      IF Steps <> 0 THEN BEGIN
        WhseActivHeader := Rec;
        REPEAT
          NextSteps := NEXT(Steps / ABS(Steps));
          IF WMSManagement.LocationIsAllowedToView("Location Code") THEN BEGIN
            RealSteps := RealSteps + NextSteps;
            WhseActivHeader := Rec;
          END;
        UNTIL (NextSteps = 0) OR (RealSteps = Steps);
        Rec := WhseActivHeader;
        IF NOT FIND THEN ;
      END;
      EXIT(RealSteps);
    END;

    PROCEDURE ErrorIfUserIsNotWhseEmployee@15();
    VAR
      WhseEmployee@1000 : Record 7301;
    BEGIN
      IF USERID <> '' THEN BEGIN
        WhseEmployee.SETRANGE("User ID",USERID);
        IF NOT WhseEmployee.FIND('-') THEN
          ERROR(Text001,USERID);
      END;
    END;

    BEGIN
    END.
  }
}
