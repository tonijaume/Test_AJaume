OBJECT Table 7009785 Excel Buffer SGB
{
  OBJECT-PROPERTIES
  {
    Date=06/02/14;
    Time=17:02:14;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Excel Internal Buffer SGB;
               ESP=Mem. inter. Excel SGB];
  }
  FIELDS
  {
    { 1   ;   ;Row No.             ;Integer       ;OnValidate=BEGIN
                                                                xlRowID := '';
                                                                IF "Row No." <> 0 THEN
                                                                  xlRowID := FORMAT("Row No.");
                                                              END;

                                                   CaptionML=[ENU=Row No.;
                                                              ESP=N§ fila] }
    { 2   ;   ;xlRowID             ;Text10        ;CaptionML=[ENU=xlRowID;
                                                              ESP=xlRowID] }
    { 3   ;   ;Column No.          ;Integer       ;OnValidate=VAR
                                                                x@1000 : Integer;
                                                                i@1001 : Integer;
                                                                c@1002 : Char;
                                                              BEGIN
                                                                xlColID := '';
                                                                IF "Column No." <> 0 THEN BEGIN
                                                                  x := "Column No." - 1;
                                                                  c := 65 + x MOD 26;
                                                                  xlColID[10] := c;
                                                                  i := 10;
                                                                  WHILE x > 25 DO BEGIN
                                                                    x := x DIV 26;
                                                                    i := i - 1;
                                                                    c := 64 + x MOD 26;
                                                                    xlColID[i] := c;
                                                                  END;
                                                                  FOR x := i TO 10 DO
                                                                    xlColID[1+x-i] := xlColID[x];
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Column No.;
                                                              ESP=N§ columna] }
    { 4   ;   ;xlColID             ;Text10        ;CaptionML=[ENU=xlColID;
                                                              ESP=xlColID] }
    { 5   ;   ;Cell Value as Text  ;Text250       ;CaptionML=[ENU=Cell Value as Text;
                                                              ESP=Valor celda como texto] }
    { 6   ;   ;Comment             ;Text250       ;CaptionML=[ENU=Comment;
                                                              ESP=Comentario] }
    { 7   ;   ;Formula             ;Text250       ;CaptionML=[ENU=Formula;
                                                              ESP=F¢rmula] }
    { 8   ;   ;Bold                ;Boolean       ;CaptionML=[ENU=Bold;
                                                              ESP=Negrita] }
    { 9   ;   ;Italic              ;Boolean       ;CaptionML=[ENU=Italic;
                                                              ESP=It lica] }
    { 10  ;   ;Underline           ;Boolean       ;CaptionML=[ENU=Underline;
                                                              ESP=Subrayar] }
    { 11  ;   ;NumberFormat        ;Text30        ;CaptionML=[ENU=NumberFormat;
                                                              ESP=FormatoN£mero] }
    { 12  ;   ;Formula2            ;Text250       ;CaptionML=[ENU=Formula2;
                                                              ESP=F¢rmula2] }
    { 13  ;   ;Formula3            ;Text250       ;CaptionML=[ENU=Formula3;
                                                              ESP=F¢rmula3] }
    { 14  ;   ;Formula4            ;Text250       ;CaptionML=[ENU=Formula4;
                                                              ESP=F¢rmula4] }
    { 16  ;   ;Color Fuente        ;Integer       ;InitValue=-1;
                                                   CaptionML=[ENU=Font Colour;
                                                              ESP=Color Fuente];
                                                   MinValue=-1 }
    { 17  ;   ;Tama¤o Fuente       ;Integer       ;CaptionML=[ENU=Font Size;
                                                              ESP=Tama¤o Fuente] }
    { 20  ;   ;Texto Alineacion Horizontal;Integer;OnValidate=BEGIN
                                                                //   2: izquierda 3 Centro  4 Derecha
                                                              END;

                                                   CaptionML=[ENU=Horizontal alignment text;
                                                              ESP=Texto Alineacion Horizontal] }
    { 21  ;   ;Texto Alineacion Vertical;Integer  ;CaptionML=[ENU=Vertical alignment text;
                                                              ESP=Texto Alineacion Vertical] }
    { 49  ;   ;Tipo Linea          ;Integer       ;OnValidate=BEGIN
                                                                // 1 Continua
                                                              END;

                                                   CaptionML=[ENU=Line type;
                                                              ESP=Tipo Linea] }
    { 50  ;   ;Borde Izq           ;Integer       ;CaptionML=[ENU=Left edge;
                                                              ESP=Borde Izq];
                                                   MinValue=0 }
    { 51  ;   ;Borde Sup           ;Integer       ;CaptionML=[ENU=Sup. Edge;
                                                              ESP=Borde Sup];
                                                   MinValue=0 }
    { 52  ;   ;Borde Der           ;Integer       ;CaptionML=[ENU=Right edge;
                                                              ESP=Borde Der];
                                                   MinValue=0 }
    { 53  ;   ;Borde Abaj          ;Integer       ;CaptionML=[ENU=Under edge;
                                                              ESP=Borde Abaj];
                                                   MinValue=0 }
    { 54  ;   ;Color Borde Izq     ;Integer       ;InitValue=-1;
                                                   CaptionML=[ENU=Left edge color;
                                                              ESP=Color Borde Izq];
                                                   MinValue=-1 }
    { 55  ;   ;Color Borde Sup     ;Integer       ;InitValue=-1;
                                                   CaptionML=[ENU=Sup. Edge color;
                                                              ESP=Color Borde Sup];
                                                   MinValue=-1 }
    { 56  ;   ;Color Borde Der     ;Integer       ;InitValue=-1;
                                                   CaptionML=[ENU=Right edge color;
                                                              ESP=Color Borde Der];
                                                   MinValue=-1 }
    { 57  ;   ;Color Borde Abaj    ;Integer       ;InitValue=-1;
                                                   CaptionML=[ENU=Under edge color;
                                                              ESP=Color Borde Abaj];
                                                   MinValue=-1 }
    { 58  ;   ;Color Bordes        ;Integer       ;InitValue=-1;
                                                   OnValidate=BEGIN
                                                                "Color Borde Izq" := "Color Bordes";
                                                                "Color Borde Sup" := "Color Bordes";
                                                                "Color Borde Der" := "Color Bordes";
                                                                "Color Borde Abaj":= "Color Bordes";
                                                              END;

                                                   CaptionML=[ENU=Edge colors;
                                                              ESP=Color Bordes];
                                                   MinValue=-1 }
    { 60  ;   ;Bordes              ;Integer       ;OnValidate=BEGIN
                                                                "Borde Izq" := Bordes;
                                                                "Borde Sup" := Bordes;
                                                                "Borde Der" := Bordes;
                                                                "Borde Abaj":= Bordes;
                                                              END;

                                                   CaptionML=[ENU=Edges;
                                                              ESP=Bordes];
                                                   MinValue=0 }
    { 61  ;   ;Color Fondo         ;Integer       ;InitValue=-1;
                                                   CaptionML=[ENU=Background color;
                                                              ESP=Color Fondo];
                                                   MinValue=-1 }
    { 62  ;   ;Width               ;Integer       ;CaptionML=[ENU=Width;
                                                              ESP=Width] }
    { 63  ;   ;Height              ;Integer       ;CaptionML=[ENU=Height;
                                                              ESP=Height] }
    { 64  ;   ;Tipo fuente         ;Text30        ;CaptionML=[ENU=Font type;
                                                              ESP=Tipo fuente] }
    { 65  ;   ;Fusionar hasta celda;Text20        ;CaptionML=[ENU=Merge until cell;
                                                              ESP=Fusionar hasta celda] }
    { 66  ;   ;WrapText            ;Boolean       ;CaptionML=[ENU=WrapText;
                                                              ESP=WrapText] }
    { 70  ;   ;Insertar            ;Option        ;CaptionML=[ENU=Insert;
                                                              ESP=Insertar];
                                                   OptionCaptionML=[ENU=,Newline;
                                                                    ESP=,Salto de Linea];
                                                   OptionString=,Salto de Linea }
  }
  KEYS
  {
    {    ;Row No.,Column No.                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Excel was not found;ESP=No encontr¢ Excel.';
      Text001@1001 : TextConst 'ENU=You must enter a file name.;ESP=Debe introd. nombre fichero';
      Text002@1002 : TextConst 'ENU=You must enter an Excel worksheet name.;ESP=Debe introducir un nombre hoja Excel.';
      Text003@1003 : TextConst 'ENU=The file %1 does not exist.;ESP=El fichero %1 no existe.';
      Text004@1004 : TextConst 'ENU=The Excel worksheet %1 does not exist.;ESP=La hoja Excel  %1 no existe.';
      Text005@1005 : TextConst 'ENU=Creating Excel worksheet...\\;ESP=Creando hoja Excel...\\';
      Text006@1006 : TextConst 'ENU=%1%3%4%3Page %2;ESP=%1%3%4%3P g. %2';
      Text007@1007 : TextConst 'ENU=Reading Excel worksheet...\\;ESP=Leyendo hoja Excel...\\';
      Text008@1008 : TextConst 'ENU=: Filter;ESP=: Filtro';
      Text009@1009 : TextConst 'ENU=" can not be converted into an Excel formula.";ESP=" no se  puede convertir a una f¢rmula Excel."';
      Text010@1010 : TextConst 'ENU=: Operator;ESP=: Operador';
      Text011@1011 : TextConst 'ENU=" is not valid.";ESP=" no es v lido."';
      Text012@1012 : TextConst 'ENU=: Filter containing more than 1 comparison operator can not be converted into an Excel formula.;ESP=: El filtro que contiene m s de 1 operador comparaci¢n no puede convertirse en una f¢rmula Excel.';
      Text013@1013 : TextConst 'ENU=&B;ESP=&B';
      Text014@1014 : TextConst 'ENU=&D;ESP=&D';
      Text015@1015 : TextConst 'ENU=&P;ESP=&P';
      Text016@1016 : TextConst 'ENU=A1;ESP=A1';
      Text017@1017 : TextConst 'ENU=SUMIF;ESP=SUMAR.SI';
      Text018@1018 : TextConst 'ENU=#N/A;ESP=#N/A';
      Text019@1019 : TextConst 'ENU=GLAcc;ESP=CGCta';
      Text020@1020 : TextConst 'ENU=Term;ESP=Periodo';
      Text021@1021 : TextConst 'ENU=Budget;ESP=Presupuesto';
      XlApp@1022 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      XlWorkBook@1023 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      XlWorkSheet@1024 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      XlWorksheets@1025 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{000208D8-0000-0000-C000-000000000046}:Unknown Automation Server._Worksheet";
      XlRange@1026 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Xlnn@1103350000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020870-0000-0000-C000-000000000046}:Unknown Automation Server.Interior";
      FormulaUnitErr@1027 : Text[250];
      Text022@1028 : TextConst 'ENU=Formula is too long.;ESP=F¢rmula es demasiado larga.';
      XlRange2@1103350001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      wDebug@1103350002 : Boolean;

    PROCEDURE CreateBook@1();
    VAR
      Xlsheets@1025 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{000208D7-0000-0000-C000-000000000046}:Unknown Automation Server.Sheets";
      i@1103350001 : Integer;
      EndOfLoop@1103350002 : Integer;
    BEGIN
      IF NOT CREATE(XlApp,TRUE) THEN
        ERROR(Text000);
      // XlApp.Visible(wDebug);
      // XlApp.UserControl(wDebug);
      XlWorkBook := XlApp.Workbooks.Add;

      {
      // primero eliminamos las hojas que se crean por defecto
      EndOfLoop := XlWorkBook.Sheets.Count;
      i := 1;
      WHILE (i <= EndOfLoop) DO BEGIN
        Xlsheets := XlWorkBook.Sheets.Item(i);
        Xlsheets.Delete;

        i += 1;
      END;
      }

      XlWorkSheet  := XlWorkBook.Worksheets.Add;
      XlWorksheets := XlWorkBook.Worksheets.Item(1);
    END;

    PROCEDURE OpenBook@2(FileName@1000 : Text[250];SheetName@1001 : Text[250]);
    VAR
      i@1002 : Integer;
      EndOfLoop@1003 : Integer;
      Found@1004 : Boolean;
    BEGIN
      IF FileName = '' THEN
        ERROR(Text001);

      IF SheetName = '' THEN
        ERROR(Text002);

      IF NOT EXISTS(FileName) THEN
        ERROR(Text003,FileName);

      IF NOT CREATE(XlApp,TRUE) THEN
        ERROR(Text000);

      XlApp.Workbooks._Open(FileName);
      XlWorkBook := XlApp.ActiveWorkbook;
      i := 1;
      EndOfLoop := XlWorkBook.Worksheets.Count;
      WHILE (i <= EndOfLoop) AND (NOT Found) DO BEGIN
        XlWorksheets := XlWorkBook.Worksheets.Item(i);
        IF SheetName = XlWorksheets.Name THEN
          Found := TRUE;
        i := i + 1;
      END;
      IF Found THEN
        XlWorkSheet := XlWorkBook.Worksheets.Item(SheetName)
      ELSE BEGIN
        XlWorkBook.Close(FALSE);
        XlApp.Quit;
        CLEAR(XlApp);
        ERROR(Text004,SheetName);
      END;
    END;

    PROCEDURE CreateSheet@5(SheetName@1000 : Text[250];ReportHeader@1001 : Text[80];CompanyName@1002 : Text[50];UserID2@1003 : Text[30];pwRedimensiona@1103350000 : Boolean;par_CreaHoja@1103350001 : Boolean;par_TextoVentana@1103350002 : Text[30]);
    VAR
      XlEdgeBottom@1004 : Integer;
      XlContinuous@1005 : Integer;
      XlLineStyleNone@1006 : Integer;
      XlLandscape@1007 : Integer;
      xlEdgeTop@1103350012 : Integer;
      xlEdgeRight@1103350014 : Integer;
      xlEdgeLeft@1103350015 : Integer;
      xlDiagonalUp@1103350007 : Integer;
      xlDiagonalDown@1103350008 : Integer;
      CRLF@1008 : Char;
      Window@1009 : Dialog;
      RecNo@1010 : Integer;
      TotalRecNo@1011 : Integer;
      wFusionar@1103350003 : Text[21];
    BEGIN
      // pwRedimensiona indica si queremos que la longitud de las celdas se redimensionen automaticamente
      // par_CreaHoja -> los datos en hojas nuevas
      // par_TextoVentana -> texto para a¤adir a la ventana de progreso

      Window.OPEN(
        par_TextoVentana + '\' +
        Text005 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);

      XlEdgeBottom := 9;
      XlContinuous := 1;
      XlLineStyleNone := -4142;
      XlLandscape := 2;

      // mas variables excel
      xlEdgeLeft := 7;
      xlEdgeTop := 8;
      xlEdgeRight := 10;
      xlDiagonalUp := 6;
      xlDiagonalDown := 5;

      CRLF := 10;
      RecNo := 1;
      TotalRecNo := COUNTAPPROX;
      RecNo := 0;

      IF par_CreaHoja THEN
      BEGIN
        IF NOT BuscaHoja(SheetName) THEN
          XlWorkSheet := XlWorkBook.Worksheets.Add;
      END
      ELSE
        XlWorkSheet := XlWorkBook.Worksheets.Item(1);

      IF FIND('-') THEN
        REPEAT
          RecNo := RecNo + 1;

          Window.UPDATE(1, ROUND(RecNo / TotalRecNo * 10000,1));

          XlRange := XlWorkSheet.Range(xlColID + xlRowID);

          IF "Fusionar hasta celda" <> '' THEN BEGIN
            wFusionar := ':'+"Fusionar hasta celda";
            XlRange := XlWorkSheet.Range(xlColID + xlRowID + wFusionar);
            //WITH XlWorkSheet.Range(xlColID + xlRowID + wFusionar) DO BEGIN
            WITH XlRange DO BEGIN
              Orientation := 0;
              AddIndent := FALSE;
              IndentLevel := 0;
              ShrinkToFit := FALSE;
              MergeCells := TRUE;
            END;
            XlRange := XlWorkSheet.Range(xlColID + xlRowID + wFusionar);
          END
          ELSE
            wFusionar := '';

          IF NumberFormat <> '' THEN
            XlRange.NumberFormat := NumberFormat;

          IF Formula = '' THEN
            XlRange.Value := "Cell Value as Text"
          ELSE
            XlRange.FormulaR1C1 := Formula;

            //XlRange.Formula := GetFormula;
          IF Comment <> '' THEN
            XlRange.AddComment := Comment;

          IF Bold THEN
            XlRange.Font.Bold := Bold;

          IF Italic THEN
            XlRange.Font.Italic := Italic;

          // XlRange.Borders.LineStyle := XlLineStyleNone;
          IF Underline THEN
            XlRange.Borders.Item(XlEdgeBottom).LineStyle := XlContinuous;

          // JPT 13/12/04 Insertamos los bordes
          {
          IF Bordes <> 0 THEN
            XlRange.BorderAround := Bordes;
          }

          IF Height <> 0 THEN
            XlRange.RowHeight := Height;

          // AJS 06.02.2007
          // Me esta dando problemas esta instruccion y la comento de momento
          //XlRange.WrapText := WrapText;

          IF "Borde Izq" <> 0 THEN BEGIN
            XlRange.Borders.Item(xlEdgeLeft).Weight := "Borde Izq";
          END;

          IF "Borde Sup" <> 0 THEN BEGIN
            XlRange.Borders.Item(xlEdgeTop).Weight := "Borde Sup";
          END;

          IF "Borde Der" <> 0 THEN BEGIN
            XlRange.Borders.Item(xlEdgeRight).Weight := "Borde Der";
          END;

          IF "Borde Abaj" <> 0 THEN BEGIN
            XlRange.Borders.Item(XlEdgeBottom).Weight := "Borde Abaj";
          END;

          IF "Color Borde Izq" <> -1 THEN BEGIN
            XlRange.Borders.Item(xlEdgeLeft).Color := "Color Borde Izq";
          END;

          IF "Color Borde Sup" <> -1 THEN BEGIN
            XlRange.Borders.Item(xlEdgeTop).Color := "Color Borde Sup";
          END;

          IF "Color Borde Der" <> -1 THEN BEGIN
            XlRange.Borders.Item(xlEdgeRight).Color := "Color Borde Der";
          END;

          IF "Color Borde Abaj" <> -1 THEN BEGIN
            XlRange.Borders.Item(XlEdgeBottom).Color := "Color Borde Abaj";
          END;

         IF "Color Fondo" <> -1 THEN
           XlRange.Interior.Color := "Color Fondo";

         IF "Color Fuente" <> -1 THEN
           XlRange.Font.Color     := "Color Fuente";

         IF "Tama¤o Fuente" <> 0 THEN
           XlRange.Font.Size := "Tama¤o Fuente";

         IF "Tipo fuente" <> '' THEN
           XlRange.Font.Name := "Tipo fuente";

         IF "Texto Alineacion Horizontal" <> 0 THEN
           XlRange.HorizontalAlignment := "Texto Alineacion Horizontal";

         IF "Texto Alineacion Vertical" <> 0 THEN
           XlRange.VerticalAlignment   := "Texto Alineacion Vertical";

         IF "Tipo Linea" <> 0 THEN
           XlRange.Borders.Item(1).LineStyle := "Tipo Linea";

         IF Width <> 0 THEN
           XlRange.ColumnWidth := Width;

         CASE Insertar OF
           Insertar::"Salto de Linea" : BEGIN
             XlWorkSheet.HPageBreaks.Add(XlRange);
           END;
         END;

        UNTIL NEXT = 0;

      IF pwRedimensiona THEN
        XlWorkSheet.Range(GetExcelReference(5) + ':' + xlColID + xlRowID).Columns.AutoFit;

      Window.CLOSE;


      // JPT 08.11.05 **** ATENCION **** El siguiente codigo tiene que estar al final, Si no se produce una gran relatizaci¢n del proceso
      // amen de otras catastroficas desdichas

      XlWorkSheet.Name := SheetName;

      IF ReportHeader <> '' THEN
        XlWorkSheet.PageSetup.LeftHeader :=
          STRSUBSTNO('%1%2%1%3%4',GetExcelReference(1),ReportHeader,CRLF,CompanyName);
      XlWorkSheet.PageSetup.RightHeader :=
        STRSUBSTNO(Text006,GetExcelReference(2),GetExcelReference(3),CRLF,UserID2);

      XlWorkSheet.PageSetup.Orientation := XlLandscape;
    END;

    PROCEDURE CreateRangeName@9(RangeName@1000 : Text[30];FromColumnNo@1001 : Integer;FromRowNo@1002 : Integer);
    VAR
      TempExcelBuf@1003 : TEMPORARY Record 370;
      ToxlRowID@1004 : Text[10];
    BEGIN
      SETCURRENTKEY("Row No.","Column No.");
      IF FIND('+') THEN
        ToxlRowID := xlRowID;
      TempExcelBuf.VALIDATE("Row No.",FromRowNo);
      TempExcelBuf.VALIDATE("Column No.",FromColumnNo);
      XlWorkSheet.Names.Add(
        RangeName,
        '=' + GetExcelReference(4) + TempExcelBuf.xlColID + GetExcelReference(4) + TempExcelBuf.xlRowID +
        ':' + GetExcelReference(4) + TempExcelBuf.xlColID + GetExcelReference(4) + ToxlRowID);
    END;

    PROCEDURE GiveUserControl@3();
    BEGIN
      XlApp.Visible(TRUE);
      XlApp.UserControl(TRUE);
      CLEAR(XlApp);
    END;

    PROCEDURE ReadSheet@4();
    VAR
      i@1000 : Integer;
      j@1001 : Integer;
      Maxi@1002 : Integer;
      Maxj@1003 : Integer;
      Window@1004 : Dialog;
    BEGIN
      Window.OPEN(
        Text007 +
        '@1@@@@@@@@@@@@@@@@@@@@@@@@\');
      Window.UPDATE(1,0);

      DELETEALL;
      XlRange := XlWorkSheet.Range(GetExcelReference(5)).SpecialCells(11);
      Maxi := XlRange.Row;
      Maxj := XlRange.Column;
      i := 1;
      REPEAT
        j := 1;
        VALIDATE("Row No.",i);
        REPEAT
          VALIDATE("Column No.",j);
          "Cell Value as Text" := DELCHR(FORMAT(XlWorkSheet.Range(xlColID + xlRowID).Value),'<',' ');
          IF "Cell Value as Text" <> '' THEN BEGIN
            INSERT;
          END;
          j := j + 1;
        UNTIL j > Maxj;
        i := i + 1;
        Window.UPDATE(1,ROUND(i / Maxi * 10000,1));
      UNTIL i > Maxi;
      XlWorkBook.Close(FALSE);
      XlApp.Quit;
      CLEAR(XlApp);
      Window.CLOSE;
    END;

    PROCEDURE SelectSheetsName@6(FileName@1000 : Text[250]) : Text[250];
    VAR
      i@1001 : Integer;
      SheetName@1002 : Text[250];
      EndOfLoop@1003 : Integer;
      SheetsList@1004 : Text[250];
      OptionNo@1005 : Integer;
    BEGIN
      IF FileName <> '' THEN BEGIN
        IF NOT EXISTS(FileName) THEN
          ERROR(Text003,FileName);
      END ELSE
        EXIT('');

      IF NOT CREATE(XlApp,TRUE) THEN
        ERROR(Text000);
      XlApp.Workbooks._Open(FileName);
      XlWorkBook := XlApp.ActiveWorkbook;
      i := 1;
      EndOfLoop := XlWorkBook.Worksheets.Count;
      WHILE i <= EndOfLoop DO BEGIN
        XlWorksheets := XlWorkBook.Worksheets.Item(i);
        SheetName := XlWorksheets.Name;
        IF (SheetName <> '') AND (STRLEN(SheetsList) + STRLEN(SheetName) < 250) THEN
          SheetsList := SheetsList + SheetName + ','
        ELSE
          i := EndOfLoop;
        i := i + 1;
      END;
      XlWorkBook.Close(FALSE);
      XlApp.Quit;
      CLEAR(XlApp);
      OptionNo := STRMENU(SheetsList,1);
      IF OptionNo <> 0 THEN
        EXIT(SELECTSTR(OptionNo,SheetsList))
      ELSE
        EXIT('');
    END;

    PROCEDURE FilterToFormula@7(Filter@1001 : Text[250];Ref1@1002 : Text[250];Ref2@1003 : Text[250]) Formula@1000 : Text[250];
    VAR
      FormulaUnit@1004 : ARRAY [250] OF Code[20];
      IsValue@1005 : ARRAY [250] OF Boolean;
      i@1006 : Integer;
      j@1007 : Integer;
      CountComparison@1008 : Integer;
    BEGIN
      i := 1;
      j := 2;
      REPEAT
        IF STRPOS('|&>.<()*/+-?@',COPYSTR(Filter,i,1)) > 0 THEN BEGIN
          IF FormulaUnit[j] <> '' THEN
            j := j + 1;
          FormulaUnit[j] := FormulaUnit[j] + COPYSTR(Filter,i,1);
          IF COPYSTR(Filter,i,2) = '..' THEN BEGIN //Case: X..Y
            FormulaUnit[j] :=  FormulaUnit[j] + '.';
            i := i + 1;
          END;
          IF (STRPOS('><',COPYSTR(Filter,i,1)) > 0) THEN BEGIN
            IF (STRPOS('>=',COPYSTR(Filter,i + 1,1)) > 0) THEN BEGIN //Case: <>X, <=X, >=X
              FormulaUnit[j] := FormulaUnit[j] + COPYSTR(Filter,i + 1,1);
              i := i + 1;
            END;
          END;
          j := j + 1;
        END ELSE BEGIN
          FormulaUnit[j] := FormulaUnit[j] + COPYSTR(Filter,i,1);
          IsValue[j] := TRUE;
        END;
        i := i + 1;
      UNTIL COPYSTR(Filter,i,1) = '';

      j := 1;
      Formula := '=';
      WHILE NextValue(FormulaUnit,IsValue,j) DO BEGIN
        CASE FormulaUnit[j] OF
          '..':
            BEGIN
              CASE TRUE OF
                IsValue[j - 1] AND IsValue[j + 1]:
                  BEGIN
                    IF FormulaUnit[j - 1] > FormulaUnit[j + 1] THEN BEGIN
                      Formula := '';
                      FormulaUnitErr := Filter + Text008 + FormulaUnit[j - 1] + '..' + FormulaUnit[j + 1] +
                        Text009;
                      EXIT;
                    END ELSE BEGIN
                      Formula := Formula + SumIf(Ref1,'>=',FormulaUnit[j - 1],Ref2) + '-' +
                        SumIf(Ref1,'>=',FormulaUnit[j + 1],Ref2);
                      FormulaUnit[j - 1] := '';
                      FormulaUnit[j + 1] := '';
                    END;
                  END;
                IsValue[j - 1] AND NOT IsValue[j + 1] :
                  BEGIN
                    Formula := Formula + SumIf(Ref1,'>=',FormulaUnit[j - 1],Ref2);
                    FormulaUnit[j - 1] := '';
                  END;
                NOT IsValue[j - 1] AND IsValue[j + 1]:
                  BEGIN
                    Formula := Formula + SumIf(Ref1,'<=',FormulaUnit[j + 1],Ref2);
                    FormulaUnit[j + 1] := '';
                  END;
              END;
            END;
          '>':
            BEGIN
              Formula := Formula + SumIf(Ref1,'>',FormulaUnit[j + 1],Ref2);
              CountComparison := CountComparison + 1;
              FormulaUnit[j + 1] := '';
            END;
          '<':
            BEGIN
              Formula := Formula + SumIf(Ref1,'<',FormulaUnit[j + 1],Ref2);
              CountComparison := CountComparison + 1;
              FormulaUnit[j + 1] := '';
            END;
          '>=':
            BEGIN
              Formula := Formula + SumIf(Ref1,'>=',FormulaUnit[j + 1],Ref2);
              CountComparison := CountComparison + 1;
              FormulaUnit[j + 1] := '';
            END;
          '<=':
            BEGIN
              Formula := Formula + SumIf(Ref1,'<=',FormulaUnit[j + 1],Ref2);
              CountComparison := CountComparison + 1;
              FormulaUnit[j + 1] := '';
            END;
          '<>','&','+','-','/','*','?','@':
            BEGIN
              Formula := '';
              FormulaUnitErr := Filter + Text010 + FormulaUnit[j] + Text009;
              EXIT;
            END;
          '|':
            BEGIN
              IF IsValue[j - 1]  AND (FormulaUnit[j - 1] <> '') THEN BEGIN
                Formula := Formula + SumIf(Ref1,'=',FormulaUnit[j - 1],Ref2);
                FormulaUnit[j - 1] := '';
              END;
              Formula := Formula + '+';
            END;
          '(',')':
            BEGIN
              Formula := Formula + FormulaUnit[j];
            END;
          ELSE BEGIN
            Formula := '';
            FormulaUnitErr := Filter + Text010 + FormulaUnit[j] + Text011;
            EXIT;
          END;
        END;
        IF CountComparison > 1 THEN BEGIN
          Formula := '';
          FormulaUnitErr := Filter + Text012;
          EXIT;
        END;
        FormulaUnit[j] := '';
      END;
      IF IsValue[j - 1] AND (FormulaUnit[j - 1] <> '') THEN
        Formula := Formula + SumIf(Ref1,'=',FormulaUnit[j - 1],Ref2);
    END;

    LOCAL PROCEDURE NextValue@8(FormulaUnit@1000 : ARRAY [250] OF Code[20];IsValue@1001 : ARRAY [250] OF Boolean;VAR j@1002 : Integer) : Boolean;
    BEGIN
      REPEAT
        j := j + 1;
      UNTIL NOT IsValue[j];
      IF FormulaUnit[j] <> '' THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE SumIf@15(Ref1@1000 : Text[250];Operator@1001 : Text[250];Value@1002 : Code[20];Ref2@1003 : Text[250]) : Text[250];
    VAR
      Symbol@1004 : Char;
    BEGIN
      Symbol := 34;
      EXIT(
        GetExcelReference(6) + '(' + Ref1 + ';' +
        FORMAT(Symbol) + Operator + '''' + Value + '''' + FORMAT(Symbol) + ';' +
        Ref2 + ')');
    END;

    PROCEDURE GetFormulaUnitErr@21() : Text[250];
    BEGIN
      EXIT(FormulaUnitErr);
    END;

    PROCEDURE GetExcelReference@10(Which@1000 : Integer) : Text[250];
    BEGIN
      CASE Which OF
        1:EXIT(Text013);
          // DO NOT TRANSLATE: &B is the Excel code to turn bold printing on or off for customized Header/Footer.
        2:EXIT(Text014);
          // DO NOT TRANSLATE: &D is the Excel code to print the current date in customized Header/Footer.
        3:EXIT(Text015);
          // DO NOT TRANSLATE: &P is the Excel code to print the page number in customized Header/Footer.
        4:EXIT('$');
          // DO NOT TRANSLATE: $ is the Excel code for absolute reference to cells.
        5:EXIT(Text016);
          // DO NOT TRANSLATE: A1 is the Excel reference of the first cell.
        6:EXIT(Text017);
          // DO NOT TRANSLATE: SUMIF is the name of the Excel function used to summarize values according to some conditions.
        7:EXIT(Text018);
          // DO NOT TRANSLATE: The #N/A Excel error value occurs when a value is not available to a function or formula.
        8:EXIT(Text019);
          // DO NOT TRANSLATE: GLAcc is used to define an Excel range name. You must refer to Excel rules to change this term.
        9:EXIT(Text020);
          // DO NOT TRANSLATE: Period is used to define an Excel range name. You must refer to Excel rules to change this term.
        10:EXIT(Text021);
          // DO NOT TRANSLATE: Budget is used to define an Excel worksheet name. You must refer to Excel rules to change this term.
      END;
    END;

    PROCEDURE ExportBudgetFilterToFormula@11(VAR ExcelBuf@1000 : Record 370) : Boolean;
    VAR
      ExcelBufFormula@1001 : TEMPORARY Record 370;
      FirstRow@1002 : Integer;
      LastRow@1003 : Integer;
      HasFormulaError@1005 : Boolean;
      ThisCellHasFormulaError@1006 : Boolean;
    BEGIN
      ExcelBuf.SETFILTER(Formula,'<>%1','');
      IF ExcelBuf.FIND('-') THEN
        REPEAT
          ExcelBufFormula := ExcelBuf;
          ExcelBufFormula.INSERT;
        UNTIL ExcelBuf.NEXT = 0;
      ExcelBuf.RESET;

      WITH ExcelBufFormula DO
        IF FIND('-') THEN
          REPEAT
            ThisCellHasFormulaError := FALSE;
            ExcelBuf.SETRANGE("Column No.",1);
            ExcelBuf.SETFILTER("Row No.",'<>%1',"Row No.");
            ExcelBuf.SETFILTER("Cell Value as Text",Formula);
            IF ExcelBuf.FIND('-') THEN
              REPEAT
                IF NOT GET(ExcelBuf."Row No.","Column No.") THEN
                  ExcelBuf.MARK(TRUE);
              UNTIL ExcelBuf.NEXT = 0;
            ClearFormula;
            ExcelBuf.SETRANGE("Cell Value as Text");
            ExcelBuf.SETRANGE("Row No.");
            IF ExcelBuf.FIND('-') THEN
              REPEAT
                IF ExcelBuf.MARK THEN BEGIN
                  LastRow := ExcelBuf."Row No.";
                  IF FirstRow = 0 THEN
                    FirstRow := LastRow;
                END ELSE
                  IF FirstRow <> 0 THEN BEGIN
                    IF FirstRow = LastRow THEN
                      ThisCellHasFormulaError := AddToFormula(xlColID + FORMAT(FirstRow))
                    ELSE
                      ThisCellHasFormulaError :=
                        AddToFormula('sum(' + xlColID + FORMAT(FirstRow) + ':' + xlColID + FORMAT(LastRow) + ')');
                    FirstRow := 0;
                    IF ThisCellHasFormulaError THEN BEGIN
                      SetFormula(ExcelBuf.GetExcelReference(7));
                      Comment := ExcelBuf.GetFormulaUnitErr;
                    END;
                  END;
              UNTIL ThisCellHasFormulaError OR (ExcelBuf.NEXT = 0);

            IF NOT ThisCellHasFormulaError AND (FirstRow <> 0) THEN BEGIN
              IF FirstRow = LastRow THEN
                ThisCellHasFormulaError := AddToFormula(xlColID + FORMAT(FirstRow))
              ELSE
                ThisCellHasFormulaError :=
                  AddToFormula('sum(' + xlColID + FORMAT(FirstRow) + ':' + xlColID + FORMAT(LastRow) + ')');
              FirstRow := 0;
              IF ThisCellHasFormulaError THEN BEGIN
                SetFormula(ExcelBuf.GetExcelReference(7));
                Comment := ExcelBuf.GetFormulaUnitErr;
              END;
            END;

            ExcelBuf.RESET;
            ExcelBuf.GET("Row No.","Column No.");
            ExcelBuf.SetFormula(GetFormula);
            ExcelBuf.MODIFY;
            HasFormulaError := HasFormulaError OR ThisCellHasFormulaError;
          UNTIL NEXT = 0;

      EXIT(HasFormulaError);
    END;

    PROCEDURE AddToFormula@12(Text@1001 : Text[30]) : Boolean;
    VAR
      Overflow@1002 : Boolean;
      LongFormula@1000 : Text[1000];
    BEGIN
      LongFormula := GetFormula;
      IF LongFormula = '' THEN
        LongFormula := '=';
      IF LongFormula <> '=' THEN
        IF STRLEN(LongFormula) + 1 > MAXSTRLEN(LongFormula) THEN
          Overflow := TRUE
        ELSE
          LongFormula := LongFormula + '+';
      IF STRLEN(LongFormula) + STRLEN(Text) > MAXSTRLEN(LongFormula) THEN
        Overflow := TRUE
      ELSE
        SetFormula(LongFormula + Text);
      EXIT(Overflow);
    END;

    PROCEDURE GetFormula@13() : Text[1000];
    BEGIN
      EXIT(Formula + Formula2 + Formula3 + Formula4);
    END;

    PROCEDURE SetFormula@22(LongFormula@1000 : Text[1000]);
    BEGIN
      ClearFormula;
      IF LongFormula = '' THEN
        EXIT;

      Formula := COPYSTR(LongFormula,1,MAXSTRLEN(Formula));
      IF STRLEN(LongFormula) > MAXSTRLEN(Formula) THEN
        Formula2 := COPYSTR(LongFormula,MAXSTRLEN(Formula) + 1,MAXSTRLEN(Formula2));
      IF STRLEN(LongFormula) > MAXSTRLEN(Formula) + MAXSTRLEN(Formula2) THEN
        Formula3 := COPYSTR(LongFormula,MAXSTRLEN(Formula) + MAXSTRLEN(Formula2) + 1,MAXSTRLEN(Formula3));
      IF STRLEN(LongFormula) > MAXSTRLEN(Formula) + MAXSTRLEN(Formula2) + MAXSTRLEN(Formula3) THEN
        Formula4 := COPYSTR(LongFormula,MAXSTRLEN(Formula) + MAXSTRLEN(Formula2) + MAXSTRLEN(Formula3) + 1,MAXSTRLEN(Formula4));
    END;

    PROCEDURE ClearFormula@18();
    BEGIN
      Formula := '';
      Formula2 := '';
      Formula3 := '';
      Formula4 := '';
    END;

    PROCEDURE Imprimir@1103350000();
    BEGIN
      XlWorkSheet._PrintOut;
    END;

    PROCEDURE AjustaImpresionHoja@14(par_Area@1103350000 : Text[30];par_Filas@1103350001 : Text[30];par_Columnas@1103350002 : Text[30];par_Zoom@1103350003 : Integer;par_Orientacion@1103350004 : Integer;pwFitToPagesWide@1100253000 : Integer;pwFitToPagesTall@1100253001 : Integer;pwHoja@1100217000 : Text[30]);
    BEGIN
      BuscaHoja(pwHoja);
      WITH XlWorkSheet.PageSetup DO BEGIN
        IF par_Area <> '' THEN
          PrintArea := par_Area; //"$B$4:$U$39"
        IF par_Filas <> '' THEN
          PrintTitleRows := par_Filas; // "$1:$3"
        IF par_Columnas <> '' THEN
          PrintTitleColumns := par_Columnas; // "$A:$B"
        IF par_Zoom <> 0 THEN
          Zoom := par_Zoom //56
        ELSE
          Zoom := FALSE;
        IF par_Orientacion <> 0 THEN
          Orientation := par_Orientacion; // xlLandscape=2, Portrait=1
        IF pwFitToPagesWide <> 0 THEN
          FitToPagesWide := pwFitToPagesWide;
        IF pwFitToPagesTall <> 0 THEN
          FitToPagesTall := pwFitToPagesTall;
      END;
    END;

    PROCEDURE SetDebug@1103350001();
    BEGIN
      // SetDebug
      // Si se llama a esta acci¢n el excel se mostrar  desde el primer momento. Muy util para debeguer.
      wDebug:= TRUE;
    END;

    PROCEDURE DevuelveCelda@1103350002(pwFila@1103350001 : Integer;pwCol@1103350002 : Integer) : Code[10];
    VAR
      lwCelda@1103350000 : Code[10];
      lwExcl2@1103350003 : Record 7009785;
    BEGIN
      // DevuelveCelda
      // Devuelve el codigo de celda dados los numero de fila y columna

      CLEAR(lwExcl2);
      lwExcl2.VALIDATE("Row No."   , pwFila);
      lwExcl2.VALIDATE("Column No.", pwCol);
      EXIT(lwExcl2.xlColID + lwExcl2.xlRowID);
    END;

    PROCEDURE BorraSheets@1100253000();
    VAR
      lwCont@1100253000 : Integer;
    BEGIN
      // BorraSheets
      // borra las hojas existentes. Todas menos una, ya que ha de quedar por lo menos una

      FOR lwCont:= XlWorkBook.Worksheets.Count DOWNTO 2  DO BEGIN
        XlWorkSheet := XlWorkBook.Worksheets.Item(lwCont);
        XlWorkSheet.Delete;
      END;
    END;

    PROCEDURE BuscaHoja@1100253001(pwNombre@1100253000 : Text[250]) : Boolean;
    VAR
      lwTotal@1100217002 : Integer;
      i@1100217001 : Integer;
      lwEnc@1100217000 : Boolean;
    BEGIN
      // BuscaHoja

      CLEAR(lwEnc);
      i := 1;
      lwTotal := XlWorkBook.Worksheets.Count;
      WHILE (i <= lwTotal) AND (NOT lwEnc) DO BEGIN
        XlWorkSheet := XlWorkBook.Worksheets.Item(i);
        IF pwNombre = XlWorkSheet.Name THEN
          lwEnc := TRUE;
        i := i + 1;
      END;

      EXIT(lwEnc);
    END;

    PROCEDURE SetOrientacion@1100217000(par_Orientacion@1100217003 : Integer;pwHoja@1100217000 : Text[30]);
    BEGIN
      // SetOrientacion

      BuscaHoja(pwHoja);
      WITH XlWorkSheet.PageSetup DO BEGIN
        IF par_Orientacion <> 0 THEN
          Orientation := par_Orientacion; // xlLandscape=2, Portrait=1
      END;
    END;

    EVENT XlApp@1022::NewWorkbook@1565(Wb@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1022::SheetSelectionChange@1558(Sh@1100253001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlApp@1022::SheetBeforeDoubleClick@1559(Sh@1100253002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1022::SheetBeforeRightClick@1560(Sh@1100253002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1022::SheetActivate@1561(Sh@1100253000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp@1022::SheetDeactivate@1562(Sh@1100253000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp@1022::SheetCalculate@1563(Sh@1100253000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp@1022::SheetChange@1564(Sh@1100253001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookOpen@1567(Wb@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookActivate@1568(Wb@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookDeactivate@1569(Wb@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookBeforeClose@1570(Wb@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookBeforeSave@1571(Wb@1100253002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1100253001 : Boolean;VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookBeforePrint@1572(Wb@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookNewSheet@1573(Wb@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1100253000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookAddinInstall@1574(Wb@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookAddinUninstall@1575(Wb@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT XlApp@1022::WindowResize@1554(Wb@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlApp@1022::WindowActivate@1556(Wb@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlApp@1022::WindowDeactivate@1557(Wb@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlApp@1022::SheetFollowHyperlink@1854(Sh@1100253001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT XlApp@1022::SheetPivotTableUpdate@2157(Sh@1100253001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookPivotTableCloseConnect@2160(Wb@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookPivotTableOpenConnecti@2161(Wb@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookSync@2289(Wb@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SyncEventType@1100253000 : Integer);
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookBeforeXmlImport@2290(Wb@1100253004 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1100253003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1100253002 : Text[1024];IsRefresh@1100253001 : Boolean;VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookAfterXmlImport@2291(Wb@1100253003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1100253002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1100253001 : Boolean;Result@1100253000 : Integer);
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookBeforeXmlExport@2292(Wb@1100253003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1100253002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1100253001 : Text[1024];VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlApp@1022::WorkbookAfterXmlExport@2293(Wb@1100253003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1100253002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1100253001 : Text[1024];Result@1100253000 : Integer);
    BEGIN
    END;

    EVENT XlWorkBook@1023::Open@1923();
    BEGIN
    END;

    EVENT XlWorkBook@1023::Activate@304();
    BEGIN
    END;

    EVENT XlWorkBook@1023::Deactivate@1530();
    BEGIN
    END;

    EVENT XlWorkBook@1023::BeforeClose@1546(VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlWorkBook@1023::BeforeSave@1547(SaveAsUI@1100253001 : Boolean;VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlWorkBook@1023::BeforePrint@1549(VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlWorkBook@1023::NewSheet@1550(Sh@1100253000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlWorkBook@1023::AddinInstall@1552();
    BEGIN
    END;

    EVENT XlWorkBook@1023::AddinUninstall@1553();
    BEGIN
    END;

    EVENT XlWorkBook@1023::WindowResize@1554(Wn@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlWorkBook@1023::WindowActivate@1556(Wn@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlWorkBook@1023::WindowDeactivate@1557(Wn@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT XlWorkBook@1023::SheetSelectionChange@1558(Sh@1100253001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlWorkBook@1023::SheetBeforeDoubleClick@1559(Sh@1100253002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlWorkBook@1023::SheetBeforeRightClick@1560(Sh@1100253002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlWorkBook@1023::SheetActivate@1561(Sh@1100253000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlWorkBook@1023::SheetDeactivate@1562(Sh@1100253000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlWorkBook@1023::SheetCalculate@1563(Sh@1100253000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT XlWorkBook@1023::SheetChange@1564(Sh@1100253001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlWorkBook@1023::SheetFollowHyperlink@1854(Sh@1100253001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT XlWorkBook@1023::SheetPivotTableUpdate@2157(Sh@1100253001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlWorkBook@1023::PivotTableCloseConnection@2158(Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlWorkBook@1023::PivotTableOpenConnection@2159(Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT XlWorkBook@1023::Sync@2266(SyncEventType@1100253000 : Integer);
    BEGIN
    END;

    EVENT XlWorkBook@1023::BeforeXmlImport@2283(Map@1100253003 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1100253002 : Text[1024];IsRefresh@1100253001 : Boolean;VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlWorkBook@1023::AfterXmlImport@2285(Map@1100253002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1100253001 : Boolean;Result@1100253000 : Integer);
    BEGIN
    END;

    EVENT XlWorkBook@1023::BeforeXmlExport@2287(Map@1100253002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1100253001 : Text[1024];VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlWorkBook@1023::AfterXmlExport@2288(Map@1100253002 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1100253001 : Text[1024];Result@1100253000 : Integer);
    BEGIN
    END;

    EVENT XlWorkSheet@1024::SelectionChange@1543(Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlWorkSheet@1024::BeforeDoubleClick@1537(Target@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlWorkSheet@1024::BeforeRightClick@1534(Target@1100253001 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100253000 : Boolean);
    BEGIN
    END;

    EVENT XlWorkSheet@1024::Activate@304();
    BEGIN
    END;

    EVENT XlWorkSheet@1024::Deactivate@1530();
    BEGIN
    END;

    EVENT XlWorkSheet@1024::Calculate@279();
    BEGIN
    END;

    EVENT XlWorkSheet@1024::Change@1545(Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT XlWorkSheet@1024::FollowHyperlink@1470(Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT XlWorkSheet@1024::PivotTableUpdate@2156(Target@1100253000 : Automation "{00020813-0000-0000-C000-000000000046} 1.5:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    BEGIN
    {
      $001 AJS 06022014 Modifico la funcion CreateSheet para que el parametro de empresa sea de 50 y poder
                        pasar el nombre de la empresa en lugar de solo el codigo
    }
    END.
  }
}
