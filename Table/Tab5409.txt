OBJECT Table 5409 Prod. Order Routing Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 5410=rimd;
    OnInsert=BEGIN
               IF Status = Status::Finished THEN
                 ERROR(Text006,Status,TABLECAPTION);

               IF "Next Operation No." = '' THEN
                 SetNextOperations(Rec);
             END;

    OnModify=BEGIN
               IF Status = Status::Finished THEN
                 ERROR(Text006,Status,TABLECAPTION);
             END;

    OnDelete=VAR
               CapLedgEntry@1000 : Record 5832;
             BEGIN
               IF Status = Status::Finished THEN
                 ERROR(Text006,Status,TABLECAPTION);

               IF Status = Status::Released THEN BEGIN
                 CapLedgEntry.SETCURRENTKEY(
                   "Prod. Order No.","Prod. Order Line No.",
                   "Routing No.","Routing Reference No.","Operation No.");
                 CapLedgEntry.SETRANGE("Prod. Order No.","Prod. Order No.");
                 CapLedgEntry.SETRANGE("Routing Reference No.","Routing Reference No.");
                 CapLedgEntry.SETRANGE("Routing No.","Routing No.");
                 CapLedgEntry.SETRANGE("Operation No.","Operation No.");
                 IF CapLedgEntry.FIND('-') THEN
                   ERROR(
                     Text000,
                     Status,TABLECAPTION,"Operation No.",CapLedgEntry.TABLECAPTION);
               END;

               IF SubcontractPurchOrderExist THEN
                 ERROR(
                   Text000,
                   Status,TABLECAPTION,"Operation No.",PurchLine.TABLECAPTION);

               DeleteRelations;
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Prod. Order Routing Line;
               ESP=L¡nea ruta orden producci¢n];
    LookupFormID=Form99000817;
    DrillDownFormID=Form99000817;
  }
  FIELDS
  {
    { 1   ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=[ENU=Routing No.;
                                                              ESP=N§ ruta] }
    { 3   ;   ;Routing Reference No.;Integer      ;CaptionML=[ENU=Routing Reference No.;
                                                              ESP=N§ ruta referencia];
                                                   Editable=No }
    { 4   ;   ;Operation No.       ;Code10        ;OnValidate=BEGIN
                                                                SetRecalcStatus;

                                                                GetLine;
                                                                "Starting Time" := ProdOrderLine."Starting Time";
                                                                "Ending Time" := ProdOrderLine."Ending Time";
                                                                "Starting Date" := ProdOrderLine."Starting Date";
                                                                "Ending Date" := ProdOrderLine."Ending Date";
                                                              END;

                                                   CaptionML=[ENU=Operation No.;
                                                              ESP=N§ operaci¢n];
                                                   NotBlank=Yes }
    { 5   ;   ;Next Operation No.  ;Code30        ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                                GetLine;
                                                              END;

                                                   CaptionML=[ENU=Next Operation No.;
                                                              ESP=N§ operaci¢n siguiente] }
    { 6   ;   ;Previous Operation No.;Code30      ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=[ENU=Previous Operation No.;
                                                              ESP=N§ operaci¢n anterior] }
    { 7   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                SetRecalcStatus;

                                                                "No." := '';
                                                                "Work Center No." := '';
                                                                "Work Center Group Code" := '';

                                                                ModifyCapNeedEntries;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionCaptionML=[ENU=Work Center,Machine Center;
                                                                    ESP=Centro trabajo,Centro m quina];
                                                   OptionString=Work Center,Machine Center }
    { 8   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Work Center)) "Work Center"
                                                                 ELSE IF (Type=CONST(Machine Center)) "Machine Center";
                                                   OnValidate=BEGIN
                                                                IF ("No." <> xRec."No.") AND (xRec."No." <> '') THEN
                                                                  IF SubcontractPurchOrderExist THEN
                                                                    ERROR(
                                                                      Text007,
                                                                      FIELDCAPTION("No."),PurchLine.TABLECAPTION,Status,TABLECAPTION,"Operation No.");

                                                                SetRecalcStatus;

                                                                IF "No." = '' THEN
                                                                  EXIT;

                                                                CASE Type OF
                                                                  Type::"Work Center":
                                                                    BEGIN
                                                                      WorkCenter.GET("No.");
                                                                      WorkCenter.TESTFIELD(Blocked,FALSE);
                                                                      WorkCenterTransferfields;
                                                                    END;
                                                                  Type::"Machine Center":
                                                                    BEGIN
                                                                      MachineCenter.GET("No.");
                                                                      MachineCenter.TESTFIELD(Blocked,FALSE);
                                                                      MachineCtrTransferfields;
                                                                    END;
                                                                END;
                                                                ModifyCapNeedEntries;

                                                                GetLine;
                                                                IF ProdOrderLine."Routing Type" = ProdOrderLine."Routing Type"::Serial THEN
                                                                  CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 9   ;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=[ENU=Work Center No.;
                                                              ESP=N§ centro trabajo];
                                                   Editable=No }
    { 10  ;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   CaptionML=[ENU=Work Center Group Code;
                                                              ESP=C¢d. grupo centro trab.];
                                                   Editable=No }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 12  ;   ;Setup Time          ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Setup Time;
                                                              ESP=Tiempo preparaci¢n];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 13  ;   ;Run Time            ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Run Time;
                                                              ESP=Tiempo ejecuci¢n];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 14  ;   ;Wait Time           ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Wait Time;
                                                              ESP=Tiempo espera];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 15  ;   ;Move Time           ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Move Time;
                                                              ESP=Tiempo movimiento];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Fixed Scrap Quantity;Decimal       ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=[ENU=Fixed Scrap Quantity;
                                                              ESP=Cdad. rechazo fija];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 17  ;   ;Lot Size            ;Decimal       ;CaptionML=[ENU=Lot Size;
                                                              ESP=Tama¤o lote];
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Scrap Factor %      ;Decimal       ;OnValidate=BEGIN
                                                                SetRecalcStatus;
                                                              END;

                                                   CaptionML=[ENU=Scrap Factor %;
                                                              ESP=% Factor rechazo];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 19  ;   ;Setup Time Unit of Meas. Code;Code10;
                                                   TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Setup Time Unit of Meas. Code;
                                                              ESP=C¢d. ud. medida tiempo prep.] }
    { 20  ;   ;Run Time Unit of Meas. Code;Code10 ;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Run Time Unit of Meas. Code;
                                                              ESP=C¢d. ud. medida tiempo ejec.] }
    { 21  ;   ;Wait Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Wait Time Unit of Meas. Code;
                                                              ESP=C¢d. ud. medida tiempo espera] }
    { 22  ;   ;Move Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Move Time Unit of Meas. Code;
                                                              ESP=C¢d. ud. medida tiempo mov.] }
    { 27  ;   ;Minimum Process Time;Decimal       ;CaptionML=[ENU=Minimum Process Time;
                                                              ESP=Tiempo proceso m¡nimo];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 28  ;   ;Maximum Process Time;Decimal       ;CaptionML=[ENU=Maximum Process Time;
                                                              ESP=Tiempo proceso m ximo];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 30  ;   ;Concurrent Capacities;Decimal      ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Concurrent Capacities;
                                                              ESP=Capacidades concurrentes];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 31  ;   ;Send-Ahead Quantity ;Decimal       ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Send-Ahead Quantity;
                                                              ESP=Cdad. a adelantar];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 34  ;   ;Routing Link Code   ;Code10        ;TableRelation="Routing Link";
                                                   CaptionML=[ENU=Routing Link Code;
                                                              ESP=C¢d. conexi¢n ruta] }
    { 35  ;   ;Standard Task Code  ;Code10        ;TableRelation="Standard Task";
                                                   OnValidate=VAR
                                                                StandardTask@1000 : Record 99000778;
                                                                StdTaskTool@1001 : Record 99000781;
                                                                StdTaskPersonnel@1002 : Record 99000782;
                                                                StdTaskQltyMeasure@1003 : Record 99000784;
                                                                StdTaskComment@1004 : Record 99000783;
                                                              BEGIN
                                                                IF "Standard Task Code" = '' THEN
                                                                  EXIT;

                                                                StandardTask.GET("Standard Task Code");
                                                                Description := StandardTask.Description;

                                                                DeleteRelations;

                                                                StdTaskTool.SETRANGE("Standard Task Code","Standard Task Code");
                                                                IF StdTaskTool.FIND('-') THEN
                                                                  REPEAT
                                                                    ProdOrderRoutTool.Status := Status;
                                                                    ProdOrderRoutTool."Prod. Order No." := "Prod. Order No.";
                                                                    ProdOrderRoutTool."Routing Reference No." := "Routing Reference No.";
                                                                    ProdOrderRoutTool."Routing No." := "Routing No.";
                                                                    ProdOrderRoutTool."Operation No." := "Operation No.";
                                                                    ProdOrderRoutTool."Line No." := StdTaskTool."Line No.";
                                                                    ProdOrderRoutTool."No." := StdTaskTool."No.";
                                                                    ProdOrderRoutTool.Description := StdTaskTool.Description;
                                                                    ProdOrderRoutTool.INSERT;
                                                                  UNTIL StdTaskTool.NEXT = 0;

                                                                StdTaskPersonnel.SETRANGE("Standard Task Code","Standard Task Code");
                                                                IF StdTaskPersonnel.FIND('-') THEN
                                                                  REPEAT
                                                                    ProdOrderRtngPersonnel.Status := Status;
                                                                    ProdOrderRtngPersonnel."Prod. Order No." := "Prod. Order No.";
                                                                    ProdOrderRtngPersonnel."Routing Reference No." := "Routing Reference No.";
                                                                    ProdOrderRtngPersonnel."Routing No." := "Routing No.";
                                                                    ProdOrderRtngPersonnel."Operation No." := "Operation No.";
                                                                    ProdOrderRtngPersonnel."Line No." := StdTaskPersonnel."Line No.";
                                                                    ProdOrderRtngPersonnel."No." := StdTaskPersonnel."No.";
                                                                    ProdOrderRtngPersonnel.Description := StdTaskPersonnel.Description;
                                                                    ProdOrderRtngPersonnel.INSERT;
                                                                  UNTIL StdTaskPersonnel.NEXT = 0;

                                                                StdTaskQltyMeasure.SETRANGE("Standard Task Code","Standard Task Code");
                                                                IF StdTaskQltyMeasure.FIND('-') THEN
                                                                  REPEAT
                                                                    ProdOrderRtngQltyMeas.Status := Status;
                                                                    ProdOrderRtngQltyMeas."Prod. Order No." := "Prod. Order No.";
                                                                    ProdOrderRtngQltyMeas."Routing Reference No." := "Routing Reference No.";
                                                                    ProdOrderRtngQltyMeas."Routing No." := "Routing No.";
                                                                    ProdOrderRtngQltyMeas."Operation No." := "Operation No.";
                                                                    ProdOrderRtngQltyMeas."Line No." := StdTaskQltyMeasure."Line No.";
                                                                    ProdOrderRtngQltyMeas."Qlty Measure Code" := StdTaskQltyMeasure."Qlty Measure Code";
                                                                    ProdOrderRtngQltyMeas.Description := StdTaskQltyMeasure.Description;
                                                                    ProdOrderRtngQltyMeas."Min. Value" := StdTaskQltyMeasure."Min. Value";
                                                                    ProdOrderRtngQltyMeas."Max. Value" := StdTaskQltyMeasure."Max. Value";
                                                                    ProdOrderRtngQltyMeas."Mean Tolerance" := StdTaskQltyMeasure."Mean Tolerance";
                                                                    ProdOrderRtngQltyMeas.INSERT;
                                                                  UNTIL StdTaskQltyMeasure.NEXT = 0;

                                                                StdTaskComment.SETRANGE("Standard Task Code","Standard Task Code");
                                                                IF StdTaskComment.FIND('-') THEN
                                                                  REPEAT
                                                                    ProdOrderRtngComment.Status := Status;
                                                                    ProdOrderRtngComment."Prod. Order No." := "Prod. Order No.";
                                                                    ProdOrderRtngComment."Routing Reference No." := "Routing Reference No.";
                                                                    ProdOrderRtngComment."Routing No." := "Routing No.";
                                                                    ProdOrderRtngComment."Operation No." := "Operation No.";
                                                                    ProdOrderRtngComment."Line No." := StdTaskComment."Line No.";
                                                                    ProdOrderRtngComment.Comment := StdTaskComment.Text;
                                                                    ProdOrderRtngComment.INSERT;
                                                                  UNTIL StdTaskComment.NEXT = 0;
                                                              END;

                                                   CaptionML=[ENU=Standard Task Code;
                                                              ESP=C¢d. tarea est ndar] }
    { 40  ;   ;Unit Cost per       ;Decimal       ;OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                "Direct Unit Cost" :=
                                                                  ROUND(
                                                                    ("Unit Cost per" - "Overhead Rate") /
                                                                    (1 + "Indirect Cost %" / 100),
                                                                    GLSetup."Unit-Amount Rounding Precision");

                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Unit Cost per;
                                                              ESP=Coste unitario por];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 41  ;   ;Recalculate         ;Boolean       ;CaptionML=[ENU=Recalculate;
                                                              ESP=Volver a calcular] }
    { 50  ;   ;Sequence No. (Forward);Integer     ;CaptionML=[ENU=Sequence No. (Forward);
                                                              ESP=N§ secuencia (adelante)];
                                                   Editable=No }
    { 51  ;   ;Sequence No. (Backward);Integer    ;CaptionML=[ENU=Sequence No. (Backward);
                                                              ESP=N§ secuencia (atr s)];
                                                   Editable=No }
    { 52  ;   ;Fixed Scrap Qty. (Accum.);Decimal  ;CaptionML=[ENU=Fixed Scrap Qty. (Accum.);
                                                              ESP=Cdad. rechazo fija (acum.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 53  ;   ;Scrap Factor % (Accumulated);Decimal;
                                                   CaptionML=[ENU=Scrap Factor % (Accumulated);
                                                              ESP=% Factor rechazo (acum.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 55  ;   ;Sequence No. (Actual);Integer      ;CaptionML=[ENU=Sequence No. (Actual);
                                                              ESP=N§ secuencia (real)];
                                                   Editable=No }
    { 56  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Direct Unit Cost;
                                                              ESP=Coste unit. directo];
                                                   DecimalPlaces=2:5 }
    { 57  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                "Unit Cost per" :=
                                                                  ROUND(
                                                                    "Direct Unit Cost" * (1 + "Indirect Cost %" / 100) + "Overhead Rate",
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ESP=% Coste indirecto];
                                                   DecimalPlaces=0:5 }
    { 58  ;   ;Overhead Rate       ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Overhead Rate;
                                                              ESP=Tasa costes generales];
                                                   DecimalPlaces=0:5 }
    { 70  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Forward);
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ESP=Hora inicial] }
    { 71  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial] }
    { 72  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                CalcStartingEndingDates(Direction::Backward);
                                                              END;

                                                   CaptionML=[ENU=Ending Time;
                                                              ESP=Hora final] }
    { 73  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha final] }
    { 74  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                                    ESP=Simulada,Planificada,Planif. en firme,Lanzada,Terminada];
                                                   OptionString=Simulated,Planned,Firm Planned,Released,Finished }
    { 75  ;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=FIELD(Status));
                                                   CaptionML=[ENU=Prod. Order No.;
                                                              ESP=N§ orden producci¢n];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 76  ;   ;Unit Cost Calculation;Option       ;CaptionML=[ENU=Unit Cost Calculation;
                                                              ESP=C lculo coste unitario];
                                                   OptionCaptionML=[ENU=Time,Units;
                                                                    ESP=Tiempo,Unidades];
                                                   OptionString=Time,Units }
    { 77  ;   ;Input Quantity      ;Decimal       ;CaptionML=[ENU=Input Quantity;
                                                              ESP=Cdad. entrada];
                                                   DecimalPlaces=0:5 }
    { 78  ;   ;Critical Path       ;Boolean       ;CaptionML=[ENU=Critical Path;
                                                              ESP=Ruta de acceso cr¡tica];
                                                   Editable=No }
    { 79  ;   ;Routing Status      ;Option        ;CaptionML=[ENU=Routing Status;
                                                              ESP=Estado ruta];
                                                   OptionCaptionML=[ENU=" ,Planned,In Progress,Finished";
                                                                    ESP=" ,Planificada,En curso,Terminada"];
                                                   OptionString=[ ,Planned,In Progress,Finished] }
    { 81  ;   ;Flushing Method     ;Option        ;InitValue=Manual;
                                                   CaptionML=[ENU=Flushing Method;
                                                              ESP=Mtodo de baja];
                                                   OptionCaptionML=[ENU=Manual,Forward,Backward;
                                                                    ESP=Manual,Anticipada,Retroactiva];
                                                   OptionString=Manual,Forward,Backward }
    { 90  ;   ;Expected Operation Cost Amt.;Decimal;
                                                   CaptionML=[ENU=Expected Operation Cost Amt.;
                                                              ESP=Coste operaci¢n previsto];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 91  ;   ;Expected Capacity Need;Decimal     ;FieldClass=Normal;
                                                   CaptionML=[ENU=Expected Capacity Need;
                                                              ESP=Nec. capacidad prevista];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 96  ;   ;Expected Capacity Ovhd. Cost;Decimal;
                                                   CaptionML=[ENU=Expected Capacity Ovhd. Cost;
                                                              ESP=Costes gen. capacidad prev.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 98  ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Date-Time;
                                                              ESP=Fecha-hora inicial] }
    { 99  ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=Ending Date-Time;
                                                              ESP=Fecha-hora final] }
    { 100 ;   ;Schedule Manually   ;Boolean       ;CaptionML=[ENU=Schedule Manually;
                                                              ESP=Prever manualmente] }
  }
  KEYS
  {
    {    ;Status,Prod. Order No.,Routing Reference No.,Routing No.,Operation No.;
                                                   SumIndexFields=Expected Operation Cost Amt.,Expected Capacity Need,Expected Capacity Ovhd. Cost;
                                                   SIFTLevelsToMaintain=[{Status,Prod. Order No.},
                                                                         {Status,Prod. Order No.,Routing Reference No.,Routing No.}];
                                                   Clustered=Yes }
    {    ;Prod. Order No.,Routing Reference No.,Status,Routing No.,Operation No.;
                                                   MaintainSIFTIndex=No }
    {    ;Status,Prod. Order No.,Routing Reference No.,Routing No.,Sequence No. (Forward) }
    {    ;Status,Prod. Order No.,Routing Reference No.,Routing No.,Sequence No. (Backward) }
    {    ;Status,Prod. Order No.,Routing Reference No.,Routing No.,Sequence No. (Actual) }
    {    ;Work Center No.                         ;SumIndexFields=Expected Operation Cost Amt.;
                                                   MaintainSIFTIndex=No }
    {    ;Type,No.,Starting Date                  ;SumIndexFields=Expected Operation Cost Amt.;
                                                   MaintainSIFTIndex=No }
    {    ;Status,Work Center No.                   }
    {    ;Prod. Order No.,Status,Flushing Method   }
    {    ;Starting Date,Starting Time             ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Ending Date,Ending Time                 ;MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 %3, because there exists at least one %4 associated with it.;ESP=No puede borrar %1 %2 %3, porque existe al menos un %4 asociado a l.';
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      Text002@1002 : TextConst 'ENU=This routing line cannot be moved because of critical work centers in previous operations;ESP=Esta l¡nea de ruta no puede moverse debido a los centros de trabajo cr¡ticos en operaciones anteriores';
      Text003@1003 : TextConst 'ENU=This routing line cannot be moved because of critical work centers in next operations;ESP=Esta l¡nea de ruta no puede moverse debido a los centros de trabajo cr¡ticos en operaciones posteriores.';
      WorkCenter@1006 : Record 99000754;
      MachineCenter@1007 : Record 99000758;
      ProdOrderLine@1008 : Record 5406;
      ProdOrderRtngLine@1009 : Record 5409;
      ProdOrderRoutTool@1010 : Record 5411;
      ProdOrderRtngPersonnel@1011 : Record 5412;
      ProdOrderRtngQltyMeas@1012 : Record 5413;
      ProdOrderRtngComment@1013 : Record 5415;
      GLSetup@1005 : Record 98;
      ProdOrderCapNeed@1014 : Record 5410;
      PurchLine@1021 : Record 39;
      CalcProdOrder@1015 : Codeunit 99000773;
      ProdOrderRouteMgt@1016 : Codeunit 99000772;
      Text004@1019 : TextConst 'ENU=Some routing lines are referring to the operation just deleted. The references are\in the fields %1 and %2.\\This may have to be corrected as a routing line referring to a non-existent\operation will lead to serious errors in capacity planning.\\Do you want to see a list of the lines in question?\(Access the columns Next Operation No. and Previous Operation No.);ESP=Algunas l¡n. ruta se refieren a la operaci¢n borrada. Las referencias estan\en los campos %1 y %2.\\Esto quiz s deba corregirse como l¡nea ruta referida a una operaci¢n\ no existente, lo que llevar  a errores serios en la planificaci¢n de la capacidad.\\¨Quiere ver una lista de las l¡neas?\(Acceda a las columnas N§ operaci¢n siguiente y N§ operaci¢n anterior)';
      Text005@1004 : TextConst 'ENU=Routing Lines referring to deleted Operation No. %1;ESP=L¡neas ruta referidas a la operaci¢n borrada n§ %1';
      Text006@1020 : TextConst 'ENU=A %1 %2 can not be inserted, modified, or deleted.;ESP=Un %1 %2 no se puede insertar, modificar o eliminar.';
      Direction@1018 : 'Forward,Backward';
      Text007@1022 : TextConst 'ENU=You cannot change %1, because there is at least one %2 associated with %3 %4 %5.;ESP=No puede cambiar %1. Existe al menos un %2 asociado con %3 %4 %5.';

    PROCEDURE Caption@12() : Text[100];
    VAR
      ProdOrder@1000 : Record 5405;
    BEGIN
      IF GETFILTERS = '' THEN
        EXIT('');

      IF NOT ProdOrder.GET(Status,"Prod. Order No.") THEN
        EXIT('');

      EXIT(
        STRSUBSTNO('%1 %2 %3',
          "Prod. Order No.",ProdOrder.Description,"Routing No."));
    END;

    PROCEDURE GetLine@15();
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing No.","Routing No.");
      ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderLine.FIND('-');
    END;

    PROCEDURE DeleteRelations@3();
    BEGIN
      ProdOrderRoutTool.SETRANGE(Status,Status);
      ProdOrderRoutTool.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRoutTool.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRoutTool.SETRANGE("Routing No.","Routing No.");
      ProdOrderRoutTool.SETRANGE("Operation No.","Operation No.");
      ProdOrderRoutTool.DELETEALL;

      ProdOrderRtngPersonnel.SETRANGE(Status,Status);
      ProdOrderRtngPersonnel.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngPersonnel.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRtngPersonnel.SETRANGE("Routing No.","Routing No.");
      ProdOrderRtngPersonnel.SETRANGE("Operation No.","Operation No.");
      ProdOrderRtngPersonnel.DELETEALL;

      ProdOrderRtngQltyMeas.SETRANGE(Status,Status);
      ProdOrderRtngQltyMeas.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngQltyMeas.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRtngQltyMeas.SETRANGE("Routing No.","Routing No.");
      ProdOrderRtngQltyMeas.SETRANGE("Operation No.","Operation No.");
      ProdOrderRtngQltyMeas.DELETEALL;

      ProdOrderRtngComment.SETRANGE(Status,Status);
      ProdOrderRtngComment.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngComment.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRtngComment.SETRANGE("Routing No.","Routing No.");
      ProdOrderRtngComment.SETRANGE("Operation No.","Operation No.");
      ProdOrderRtngComment.DELETEALL;

      ProdOrderCapNeed.SETRANGE(Status,Status);
      ProdOrderCapNeed.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderCapNeed.SETRANGE("Routing No.","Routing No.");
      ProdOrderCapNeed.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderCapNeed.SETRANGE("Operation No.","Operation No.");
      ProdOrderCapNeed.DELETEALL;
    END;

    PROCEDURE WorkCenterTransferfields@2();
    BEGIN
      "Work Center No." := WorkCenter."No.";
      "Work Center Group Code" := WorkCenter."Work Center Group Code";
      "Setup Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      "Run Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      "Wait Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      "Move Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
      Description := WorkCenter.Name;
      "Flushing Method" := WorkCenter."Flushing Method";
      "Unit Cost per" := WorkCenter."Unit Cost";
      "Direct Unit Cost" := WorkCenter."Direct Unit Cost";
      "Indirect Cost %" := WorkCenter."Indirect Cost %";
      "Overhead Rate" := WorkCenter."Overhead Rate";
      "Unit Cost Calculation" := WorkCenter."Unit Cost Calculation";
    END;

    PROCEDURE MachineCtrTransferfields@1();
    BEGIN
      WorkCenter.GET(MachineCenter."Work Center No.");
      WorkCenterTransferfields;

      Description := MachineCenter.Name;
      "Setup Time" := MachineCenter."Setup Time";
      "Wait Time" := MachineCenter."Wait Time";
      "Move Time" := MachineCenter."Move Time";
      "Fixed Scrap Quantity" := MachineCenter."Fixed Scrap Quantity";
      "Scrap Factor %" := MachineCenter."Scrap %";
      "Minimum Process Time" := MachineCenter."Minimum Process Time";
      "Maximum Process Time" := MachineCenter."Maximum Process Time";
      "Concurrent Capacities" := MachineCenter."Concurrent Capacities";
      "Send-Ahead Quantity" := MachineCenter."Send-Ahead Quantity";
      "Setup Time Unit of Meas. Code" := MachineCenter."Setup Time Unit of Meas. Code";
      "Wait Time Unit of Meas. Code" := MachineCenter."Wait Time Unit of Meas. Code";
      "Move Time Unit of Meas. Code" := MachineCenter."Move Time Unit of Meas. Code";
      "Flushing Method" := MachineCenter."Flushing Method";
      "Unit Cost per" := MachineCenter."Unit Cost";
      "Direct Unit Cost" := MachineCenter."Direct Unit Cost";
      "Indirect Cost %" := MachineCenter."Indirect Cost %";
      "Overhead Rate" := MachineCenter."Overhead Rate";
    END;

    PROCEDURE CalcStartingEndingDates@17(Direction1@1000 : 'Forward,Backward');
    BEGIN
      IF Rec."Routing Status" = "Routing Status"::Finished THEN
        FIELDERROR("Routing Status");

      MODIFY(TRUE);

      ProdOrderRtngLine.GET(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");

      ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction1);
      ProdOrderRtngLine.GET(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");
      ProdOrderRtngLine.SETCURRENTKEY(
        Status,"Prod. Order No.","Routing Reference No.","Routing No.","Sequence No. (Actual)");
      CalcProdOrder.CalculateRoutingFromActual(ProdOrderRtngLine,Direction1,FALSE);

      CalculateRoutingBack;
      CalculateRoutingForward;

      GET(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");
    END;

    PROCEDURE SetRecalcStatus@5();
    BEGIN
      Recalculate := TRUE;
    END;

    PROCEDURE RunTimePer@7() : Decimal;
    BEGIN
      IF "Lot Size" = 0 THEN
        "Lot Size" := 1;

      EXIT("Run Time" / "Lot Size");
    END;

    PROCEDURE CalculateRoutingBack@10();
    VAR
      ProdOrderLine@1000 : Record 5406;
      ProdOrderRtngLine@1001 : Record 5409;
    BEGIN
      IF "Previous Operation No." <> '' THEN BEGIN
        ProdOrderRtngLine.SETRANGE(Status,Status);
        ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
        ProdOrderRtngLine.SETRANGE("Routing Reference No.","Routing Reference No.");
        ProdOrderRtngLine.SETRANGE("Routing No.","Routing No.");
        ProdOrderRtngLine.SETFILTER("Operation No.","Previous Operation No.");
        ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

        IF ProdOrderRtngLine.FIND('-') THEN
          REPEAT
            ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
              "Routing No.","Sequence No. (Actual)");
            WorkCenter.GET(ProdOrderRtngLine."Work Center No.");
            CASE WorkCenter."Simulation Type" OF
              WorkCenter."Simulation Type"::Moves:
                BEGIN
                  ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction::Backward);
                  CalcProdOrder.CalculateRoutingFromActual(ProdOrderRtngLine,Direction::Backward,TRUE);
                END;
              WorkCenter."Simulation Type"::"Moves When Necessary":
                BEGIN
                  IF (ProdOrderRtngLine."Ending Date" > "Starting Date") OR
                     ((ProdOrderRtngLine."Ending Date" = "Starting Date") AND
                      (ProdOrderRtngLine."Ending Time" > "Starting Time"))
                  THEN BEGIN
                    ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction::Backward);
                    CalcProdOrder.CalculateRoutingFromActual(ProdOrderRtngLine,Direction::Backward,TRUE);
                  END;
                END;
              WorkCenter."Simulation Type"::Critical:
                BEGIN
                  IF (ProdOrderRtngLine."Ending Date" > "Starting Date") OR
                     ((ProdOrderRtngLine."Ending Date" = "Starting Date") AND
                      (ProdOrderRtngLine."Ending Time" > "Starting Time"))
                  THEN
                    ERROR(Text002);
                END;
            END;
            ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
              "Routing No.","Operation No.");
          UNTIL ProdOrderRtngLine.NEXT = 0;
      END;

      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderLine.SETRANGE("Routing No.","Routing No.");
      IF ProdOrderLine.FIND('-') THEN
        REPEAT
          CalcProdOrder.CalculateProdOrderDates(ProdOrderLine);
          AdjustComponents(ProdOrderLine);
        UNTIL ProdOrderLine.NEXT = 0;
    END;

    PROCEDURE CalculateRoutingForward@9();
    VAR
      ProdOrderLine@1000 : Record 5406;
      ProdOrderRtngLine@1001 : Record 5409;
    BEGIN
      IF "Next Operation No." <> '' THEN BEGIN
        ProdOrderRtngLine.SETRANGE(Status,Status);
        ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
        ProdOrderRtngLine.SETRANGE("Routing Reference No.","Routing Reference No.");
        ProdOrderRtngLine.SETRANGE("Routing No.","Routing No.");
        ProdOrderRtngLine.SETFILTER("Operation No.","Next Operation No.");
        ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

        IF ProdOrderRtngLine.FIND('-') THEN
          REPEAT
            ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
              "Routing No.","Sequence No. (Actual)");
            WorkCenter.GET(ProdOrderRtngLine."Work Center No.");
            CASE WorkCenter."Simulation Type" OF
              WorkCenter."Simulation Type"::Moves:
                BEGIN
                  ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction::Forward);
                  CalcProdOrder.CalculateRoutingFromActual(ProdOrderRtngLine,Direction::Forward,TRUE);
                END;
              WorkCenter."Simulation Type"::"Moves When Necessary":
                BEGIN
                  IF (ProdOrderRtngLine."Starting Date" < "Ending Date") OR
                     ((ProdOrderRtngLine."Starting Date" = "Ending Date") AND
                      (ProdOrderRtngLine."Starting Time" < "Ending Time"))
                  THEN BEGIN
                    ProdOrderRouteMgt.CalcSequenceFromActual(ProdOrderRtngLine,Direction::Forward);
                    CalcProdOrder.CalculateRoutingFromActual(ProdOrderRtngLine,Direction::Forward,TRUE);
                  END;
                END;
              WorkCenter."Simulation Type"::Critical:
                BEGIN
                  IF (ProdOrderRtngLine."Starting Date" < "Ending Date") OR
                     ((ProdOrderRtngLine."Starting Date" = "Ending Date") AND
                      (ProdOrderRtngLine."Starting Time" < "Ending Time"))
                  THEN
                    ERROR(Text003);
                END;
            END;
            ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
              "Routing No.","Operation No.");
          UNTIL ProdOrderRtngLine.NEXT = 0;
      END;

      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderLine.SETRANGE("Routing No.","Routing No.");
      IF ProdOrderLine.FIND('-') THEN
        REPEAT
          CalcProdOrder.CalculateProdOrderDates(ProdOrderLine);
          AdjustComponents(ProdOrderLine);
        UNTIL ProdOrderLine.NEXT = 0;
      CalcProdOrder.CalculateComponents;
    END;

    PROCEDURE ModifyCapNeedEntries@13();
    BEGIN
      ProdOrderCapNeed.SETRANGE(Status,Status);
      ProdOrderCapNeed.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderCapNeed.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderCapNeed.SETRANGE("Routing No.","Routing No.");
      ProdOrderCapNeed.SETRANGE("Operation No.","Operation No.");
      ProdOrderCapNeed.SETRANGE("Requested Only",FALSE);
      IF ProdOrderCapNeed.FIND('-') THEN
        REPEAT
          ProdOrderCapNeed."No." := "No.";
          ProdOrderCapNeed."Work Center No." := "Work Center No.";
          ProdOrderCapNeed."Work Center Group Code" := "Work Center Group Code";
          ProdOrderCapNeed.MODIFY;
        UNTIL ProdOrderCapNeed.NEXT = 0;
    END;

    PROCEDURE AdjustComponents@14(VAR ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderComp@1001 : Record 5407;
    BEGIN
      ProdOrderComp.SETRANGE(Status,Status);
      ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");

      IF ProdOrderComp.FIND('-') THEN
        REPEAT
          ProdOrderComp.VALIDATE("Routing Link Code");
          ProdOrderComp.MODIFY;
        UNTIL ProdOrderComp.NEXT = 0;
    END;

    PROCEDURE UpdateDatetime@11();
    BEGIN
      "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time");
      "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time");
    END;

    PROCEDURE "CheckPrevious&Next"@18();
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      TempDeletedOrderRtngLine@1002 : TEMPORARY Record 5409;
      TempRemainingOrderRtngLine@1003 : TEMPORARY Record 5409;
      ProdOrderRoutingForm@1006 : Form 99000817;
      ErrorOnNext@1004 : Boolean;
      ErrorOnPrevious@1005 : Boolean;
    BEGIN
      TempDeletedOrderRtngLine := Rec;
      TempDeletedOrderRtngLine.INSERT;

      ProdOrderRtngLine.SETRANGE(Status,Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRtngLine.SETRANGE("Routing No.","Routing No.");
      ProdOrderRtngLine.SETFILTER("Operation No.",'<>%1',"Operation No.");
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          IF ProdOrderRtngLine."Next Operation No." <> '' THEN BEGIN
            TempDeletedOrderRtngLine.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
            ErrorOnNext := TempDeletedOrderRtngLine.FIND('-');
          END ELSE
            ErrorOnNext := FALSE;

          IF ProdOrderRtngLine."Previous Operation No." <> '' THEN BEGIN
            TempDeletedOrderRtngLine.SETFILTER("Operation No.",ProdOrderRtngLine."Previous Operation No.");
            ErrorOnPrevious := TempDeletedOrderRtngLine.FIND('-');
          END ELSE
            ErrorOnPrevious := FALSE;

          IF ErrorOnNext OR ErrorOnPrevious THEN BEGIN
            TempRemainingOrderRtngLine := ProdOrderRtngLine;
            TempRemainingOrderRtngLine.INSERT;
          END
        UNTIL ProdOrderRtngLine.NEXT = 0;

      IF TempRemainingOrderRtngLine.FIND('-') THEN BEGIN
        COMMIT;
        IF NOT CONFIRM(
             STRSUBSTNO(Text004,FIELDCAPTION("Next Operation No."),FIELDCAPTION("Previous Operation No.")),
             TRUE)
        THEN
          EXIT;
        ProdOrderRoutingForm.CAPTION(STRSUBSTNO(Text005,"Operation No."));
        REPEAT
          TempRemainingOrderRtngLine.MARK(TRUE);
        UNTIL TempRemainingOrderRtngLine.NEXT = 0;
        TempRemainingOrderRtngLine.MARKEDONLY(TRUE);
        ProdOrderRoutingForm.SETTABLEVIEW(TempRemainingOrderRtngLine);
        ProdOrderRoutingForm.RUNMODAL;
      END;
    END;

    PROCEDURE SetNextOperations@4(VAR RtngLine@1001 : Record 5409);
    VAR
      RtngLine2@1003 : Record 5409;
    BEGIN
      RtngLine2.SETRANGE(Status,RtngLine.Status);
      RtngLine2.SETRANGE("Prod. Order No.",RtngLine."Prod. Order No.");
      RtngLine2.SETRANGE("Routing Reference No.",RtngLine."Routing Reference No.");
      RtngLine2.SETRANGE("Routing No.",RtngLine."Routing No.");
      RtngLine2.SETFILTER("Operation No.",'>%1',RtngLine."Operation No.");

      IF RtngLine2.FIND('-') THEN
        RtngLine."Next Operation No." := RtngLine2."Operation No."
      ELSE BEGIN
        RtngLine2.SETFILTER("Operation No.",'');
        RtngLine2.SETRANGE("Next Operation No.",'');
        IF RtngLine2.FINDSET(TRUE) THEN BEGIN
          RtngLine2."Next Operation No." := RtngLine."Operation No.";
          RtngLine2.MODIFY;
        END;
      END;
    END;

    PROCEDURE SubcontractPurchOrderExist@6() : Boolean;
    BEGIN
      IF Status <> Status::Released THEN
        EXIT(FALSE);

      ProdOrderLine.RESET;
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderLine.SETRANGE("Routing No.","Routing No.");
      IF ProdOrderLine.FIND('-') THEN
        REPEAT
          PurchLine.SETCURRENTKEY(
            "Document Type",Type,"Prod. Order No.","Prod. Order Line No.","Routing No.","Operation No.");
          PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
          PurchLine.SETRANGE(Type,PurchLine.Type::Item);
          PurchLine.SETRANGE("Prod. Order No.","Prod. Order No.");
          PurchLine.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
          PurchLine.SETRANGE("Operation No.","Operation No.");
          IF NOT PurchLine.ISEMPTY THEN
            EXIT(TRUE);
        UNTIL ProdOrderLine.NEXT = 0;

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}
