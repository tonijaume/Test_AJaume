OBJECT Table 7009902 Precio tarifa adic. transfer
{
  OBJECT-PROPERTIES
  {
    Date=26/02/13;
    Time=16:07:11;
    Modified=Yes;
    Version List=AIC2009,CNT;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lrPrec@1100253000 : Record 7009902;
             BEGIN
               CLEAR(lrPrec);
               lrPrec.SETRANGE("ID Tarifa", "ID Tarifa");
               "ID Precio":= 1;
               IF lrPrec.FINDLAST THEN
                 "ID Precio" += lrPrec."ID Precio";

               _CompRango;

               CompSolap;

               "Usuario Creacion" := USERID;
               "Fecha Creacion"   := CURRENTDATETIME;

               IntroHist(Text004,'','');
             END;

    OnModify=BEGIN
               "Usuario Modificacion" := USERID;
               "Fecha Modificacion"   := CURRENTDATETIME;

               _CompRango;

               CompSolap;

               ModIntroHist;
             END;

    OnDelete=BEGIN
               IntroHist(Text005,'','');
             END;

    CaptionML=[ENU=Additional fee transfer Price;
               ESP=Precio tarifa adic. transfer];
    LookupFormID=Form7009774;
    DrillDownFormID=Form7009774;
  }
  FIELDS
  {
    { 1   ;   ;ID Tarifa           ;Integer       ;CaptionML=[ENU=Tariff ID;
                                                              ESP=ID Tarifa];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 10  ;   ;ID Precio           ;Integer       ;OnValidate=BEGIN
                                                                TESTFIELD("ID Precio");
                                                              END;

                                                   CaptionML=[ENU=Price ID;
                                                              ESP=ID Precio];
                                                   Editable=No }
    { 20  ;   ;Rango desde         ;Integer       ;CaptionML=[ENU=Range From;
                                                              ESP=Rango desde] }
    { 30  ;   ;Rango Hasta         ;Integer       ;CaptionML=[ENU=Range To;
                                                              ESP=Rango Hasta] }
    { 40  ;   ;Precio Adultos      ;Decimal       ;CaptionML=[ENU=Adults Price;
                                                              ESP=Precio Adultos] }
    { 50  ;   ;Precio Ni¤os        ;Decimal       ;CaptionML=[ENU=Childs Price;
                                                              ESP=Precio Ni¤os] }
    { 60  ;   ;Usuario Creacion    ;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU=Creation User;
                                                              ESP=Usuario Creacion];
                                                   Editable=No }
    { 70  ;   ;Fecha Creacion      ;DateTime      ;CaptionML=[ENU=Creation Time;
                                                              ESP=Fecha Creacion];
                                                   Editable=No }
    { 80  ;   ;Usuario Modificacion;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU=Last Modification User;
                                                              ESP=Usuario Modificacion];
                                                   Editable=No }
    { 90  ;   ;Fecha Modificacion  ;DateTime      ;CaptionML=[ENU=Last Modification Time;
                                                              ESP=Fecha Modificacion];
                                                   Editable=No }
    { 110 ;   ;Precio Servicio     ;Decimal       ;CaptionML=[ENU=Service Price;
                                                              ESP=Precio Servicio] }
    { 120 ;   ;Tipo Tarifa         ;Option        ;CaptionML=[ENU=Tariff Type;
                                                              ESP=Tipo Tarifa];
                                                   OptionCaptionML=[ENU=Porter, Transportation Guide, Support;
                                                                    ESP=Maletero,Guia Traslado,Asistencia];
                                                   OptionString=Maletero,Guia Traslado,Asistencia;
                                                   Description=Maletero,Guia Traslado,Asistencia }
    { 130 ;   ;Tipo Servicio       ;Option        ;CaptionML=[ENU=Service Type;
                                                              ESP=Tipo Servicio];
                                                   OptionCaptionML=[ENU=One way,Round trip;
                                                                    ESP=Una Via,Ida y Vuelta];
                                                   OptionString=Una Via,Ida y Vuelta;
                                                   Description=Una Via,Ida y Vuelta }
    { 140 ;   ;Zona                ;Code10        ;TableRelation="Zonas transfer".Zona WHERE (Tipo contrato=CONST(Servicio));
                                                   CaptionML=[ENU=Zone;
                                                              ESP=Zona] }
    { 150 ;   ;Aeropuerto          ;Code10        ;TableRelation=Aeropuerto.Aeropuerto WHERE (Aeropuerto Local=CONST(Yes));
                                                   CaptionML=[ENU=Airport;
                                                              ESP=Aeropuerto];
                                                   Description=Aeropuerto.Aeropuerto }
    { 160 ;   ;Codigo Persona      ;Code10        ;TableRelation=IF (Tipo Tarifa=CONST(Maletero)) "Maletero Traslados".Codigo
                                                                 ELSE IF (Tipo Tarifa=CONST(Guia Traslado)) "Guia transferista".Codigo
                                                                 ELSE IF (Tipo Tarifa=CONST(Asistencia)) "Personal asistencia vuelo".Codigo;
                                                   CaptionML=[ENU=Person code;
                                                              ESP=Codigo Persona];
                                                   Description=IF (Tipo Tarifa=CONST(Maletero)) "Maletero Traslados".Codigo ELSE IF (Tipo Tarifa=CONST(Guia Traslado)) "Guia transferista".Codigo ELSE IF (Tipo Tarifa=CONST(Asistencia)) "Personal asistencia vuelo".Codigo }
  }
  KEYS
  {
    {    ;ID Tarifa,ID Precio                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      rParA@1100253000 : Record 7009700;
      Text001@1100253004 : TextConst 'ENU=%1 could not be greater than %2;ESP=%1 No pude ser superior a %2';
      Text004@1100253002 : TextConst 'ENU=New;ESP=Nuevo';
      Text005@1100253001 : TextConst 'ENU=Deleted;ESP=Borrado';
      Text006@1100253003 : TextConst 'ENU=This record is overlapping with another;ESP=Este registro se est  solapando con otro';

    PROCEDURE ModIntroHist@1100253006();
    VAR
      lwRec@1100253000 : RecordRef;
      lwXRec@1100253001 : RecordRef;
      lwField@1100253002 : FieldRef;
      lwXField@1100253003 : FieldRef;
      lwCnt@1100253004 : Integer;
      lwOK@1100253005 : Boolean;
    BEGIN
      // ModIntroHist

      lwRec.GETTABLE(Rec);
      lwXRec.GETTABLE(xRec);

      FOR lwCnt := 1 TO lwRec.FIELDCOUNT DO BEGIN
        lwField  := lwRec.FIELDINDEX(lwCnt);
        lwXField := lwXRec.FIELDINDEX(lwCnt);
        lwOK := NOT (lwField.NUMBER IN [60,70,80,90]);
        IF lwOK  THEN
          IF lwXField.VALUE <> lwField.VALUE THEN
            IntroHist(lwField.CAPTION, FORMAT(lwXField.VALUE), FORMAT(lwField.VALUE));
      END;
    END;

    PROCEDURE IntroHist@1100253002(pwCampo@1100253000 : Text[30];pwValorAnterior@1100253001 : Text[30];pwNuevoValor@1100253002 : Text[30]);
    VAR
      cPar@1100253003 : Codeunit 7009700;
    BEGIN
      // IntroHist

      IF ("ID Tarifa" = 0) OR ("ID Precio" = 0) THEN
        EXIT;

      cPar.intro_historico_contrato_Lin(_GetDelegation, FORMAT("ID Tarifa"), 14, "ID Precio", pwCampo, pwValorAnterior, pwNuevoValor);
    END;

    PROCEDURE ShowLog@1100253003();
    VAR
      lrHist@1100253000 : Record 7009764;
    BEGIN
      // ShowLog

      CLEAR(lrHist);
      lrHist.FILTERGROUP(2);
      lrHist.SETRANGE(Delegacion       , _GetDelegation);
      lrHist.SETRANGE("N§ Contrato"    , FORMAT("ID Tarifa"));
      lrHist.SETRANGE("No Linea"       , "ID Precio");
      lrHist.SETRANGE(Tipo             , lrHist.Tipo::"Precio Transfer Adicional");
      lrHist.SETRANGE("No Linea"       , "ID Precio");
      lrHist.FILTERGROUP(0);
      FORM.RUN(0, lrHist);
    END;

    LOCAL PROCEDURE _GetDelegation@1100253000() : Code[10];
    VAR
      lrTar@1100253000 : Record 7009901;
      lwDelegacion@1100253001 : Code[10];
    BEGIN
      // _GetDelegation

      CLEAR(lwDelegacion);
      CLEAR(lrTar);
      IF lrTar.GET("ID Tarifa") THEN
        lwDelegacion := lrTar.Delegacion;

      IF lwDelegacion='' THEN BEGIN
        CLEAR(rParA);
        lwDelegacion := rParA.Delegacion;
      END;

      EXIT(lwDelegacion);
    END;

    PROCEDURE CompSolap@1100253001();
    VAR
      lrPrec@1100253000 : Record 7009902;
    BEGIN
      // CompSolap
      // Comprobamos que no se solape ning£n precio en el rango de pax

      CLEAR(lrPrec);
      lrPrec.SETRANGE ("ID Tarifa"     , "ID Tarifa");
      lrPrec.SETFILTER("ID Precio"     , '<>%1', "ID Precio");
      lrPrec.SETFILTER("Rango desde"   , '<=%1', "Rango Hasta");
      lrPrec.SETFILTER("Rango Hasta"   , '>=%1', "Rango desde");
      lrPrec.SETRANGE ("Tipo Servicio" , "Tipo Servicio");
      lrPrec.SETRANGE (Zona            , Zona); //+$001
      lrPrec.SETRANGE (Aeropuerto      , Aeropuerto); //+$002
      lrPrec.SETRANGE ("Codigo Persona", "Codigo Persona"); //+$003
      IF lrPrec.FINDFIRST THEN
        ERROR(Text006);
    END;

    LOCAL PROCEDURE _CompRango@1100253004();
    BEGIN
      // _CompRango

      IF ("Rango desde" > "Rango Hasta") THEN
        ERROR(Text001, FIELDCAPTION("Rango desde"), FIELDCAPTION("Rango Hasta"));
    END;

    PROCEDURE BuscaPrecio@1100217000(pwIDTarifa@1100217005 : Integer;prAgrupacion@1100217000 : Record 7009796;pwZona@1100217003 : Code[10];pwPersona@1100217004 : Code[10];VAR prPrec@1100217006 : Record 7009902) : Boolean;
    VAR
      lrPrec@1100217001 : Record 7009902;
      lwPax@1100217002 : Integer;
    BEGIN
      // BuscaPrecio

      prAgrupacion.CALCFIELDS("Personas entrada", "Personas salida");
      lwPax := prAgrupacion."Personas entrada" + prAgrupacion."Personas salida";

      CLEAR(prPrec);
      prPrec.SETRANGE ("ID Tarifa"     , pwIDTarifa);
      prPrec.SETRANGE ("Tipo Servicio" , prAgrupacion."Tipo servicio transportista");
      prPrec.SETFILTER("Rango desde"   , '<=%1', lwPax);
      prPrec.SETFILTER("Rango Hasta"   , '>=%1', lwPax);
      prPrec.SETRANGE (Zona            , pwZona);
      prPrec.SETRANGE (Aeropuerto      , prAgrupacion."Origen/Destino transfer");
      prPrec.SETRANGE ("Codigo Persona", pwPersona);
      IF NOT prPrec.FINDFIRST THEN
      BEGIN
        prPrec.SETRANGE("Codigo Persona", '');
        EXIT(prPrec.FINDFIRST);
      END;
    END;

    BEGIN
    {
      JPT 02/05/12 CNT-CAR12004-05

      $001 AJS 10092012 Nuevo campo Zona para indicar en los precios

      $002 AJS 25022013 Nuevo campo Aeropuerto para indicar en los precios

      $003 AJS 26022013 Nuevo campo Codigo Persona para indicar precios personalizados en un tarifa
    }
    END.
  }
}
