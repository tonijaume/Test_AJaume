OBJECT Table 7010350 Consumo
{
  OBJECT-PROPERTIES
  {
    Date=16/10/09;
    Time=12:30:41;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=VAR
               rCon@1100244000 : Record 7010350;
             BEGIN
               rCon.RESET; rCon.INIT;
               rCon.SETRANGE(Matricula, Matricula);
               IF rCon.FINDLAST THEN
                 "N§ Reposicion" := rCon."N§ Reposicion" + 100
               ELSE
                 "N§ Reposicion" := 100;
             END;

    OnDelete=VAR
               rCon@1100244000 : Record 7010350;
             BEGIN
               IF Fecha <> 0D THEN BEGIN

                 // ----  AJS 08.11.2001 Si es el ultimo consumo del vehiculo hay que dejar borrar  ----

                 rCon.RESET;
                 rCon.SETCURRENTKEY(Matricula,
                                    Fecha);
                 rCon.SETRANGE (Matricula, Matricula);
                 rCon.SETFILTER(Fecha    , '>%1', Fecha);
                 IF rCon.FINDFIRST THEN
                   ERROR(err3);

                 // ----  FIN AJS 08.11.2001  ----
               END;
             END;

    CaptionML=ESP=Consumo;
    LookupFormID=Form7010381;
    DrillDownFormID=Form7010381;
  }
  FIELDS
  {
    { 1   ;   ;Matricula           ;Code10        ;TableRelation=Vehiculo.Matricula WHERE (Vehiculo propio=CONST(Yes));
                                                   OnValidate=VAR
                                                                rVeh@1100244000 : Record 7010346;
                                                              BEGIN
                                                                rVeh.GET(Matricula);
                                                                Garaje := rVeh.Garaje;
                                                                IF xRec.Matricula <> '' THEN BEGIN
                                                                  comprueba_ultimo_consumo;
                                                                  VALIDATE(Kilometros);
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              rPar@1100244000 : Record 7010311;
                                                              rUsu@1100244001 : Record 7010420;
                                                              rVeh@1100244002 : Record 7010346;
                                                            BEGIN
                                                              rPar.FINDFIRST;
                                                              rUsu.GET(USERID);
                                                              rVeh.RESET; rVeh.INIT;
                                                              rVeh.SETCURRENTKEY(Garaje);
                                                              IF (rUsu."Garaje de trabajo" <> '') AND (rUsu."Garaje de trabajo" <> rPar."Todos los garajes") THEN BEGIN
                                                                rVeh.FILTERGROUP(2);
                                                                rVeh.SETRANGE(Garaje, rUsu."Garaje de trabajo");
                                                                rVeh.FILTERGROUP(0);
                                                              END;
                                                              rVeh.SETRANGE("Vehiculo propio", TRUE);
                                                              IF FORM.RUNMODAL(0, rVeh) = ACTION::LookupOK THEN
                                                                VALIDATE(Matricula, rVeh.Matricula);
                                                            END;

                                                   CaptionML=ESP=Matricula;
                                                   SQL Data Type=Varchar;
                                                   NotBlank=Yes;
                                                   Description=PK, FK Vehiculo }
    { 3   ;   ;N§ Reposicion       ;Integer       ;CaptionML=ESP=N§ Reposicion;
                                                   Description=PK;
                                                   Editable=No }
    { 5   ;   ;Garaje              ;Code10        ;TableRelation=Garaje.Garaje;
                                                   CaptionML=ESP=Garaje;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Garaje;
                                                   Editable=No }
    { 7   ;   ;Fecha               ;Date          ;OnValidate=BEGIN
                                                                comprueba_ultimo_consumo;
                                                                IF Kilometros <> 0 THEN
                                                                  VALIDATE(Kilometros);
                                                              END;

                                                   CaptionML=ESP=Fecha;
                                                   NotBlank=Yes }
    { 9   ;   ;Kilometros          ;Decimal       ;OnValidate=VAR
                                                                rCon@1100244000 : Record 7010350;
                                                              BEGIN

                                                                // ----  AJS 08.11.2001  Invalidar que se entren kilometros si Fecha esta en blanco  ----



                                                                IF (Fecha = 0D) AND (Kilometros <> 0) THEN
                                                                  ERROR(no_km_sin_fecha);

                                                                // ----  FIN AJS 08.11.2001  ----

                                                                // Si se ha producido la rotura del tac¢grafo (empieza el
                                                                // cuentakilometros otra vez de cero),
                                                                // Sumaremos los kilometros que ten¡a antes de la rotura.
                                                                // Tratamiento de la posibilidad de rotura del tac¢grafo.
                                                                //
                                                                comprueba_ultimo_consumo;

                                                                rCon.RESET; rCon.INIT;
                                                                rCon.SETCURRENTKEY(Matricula,
                                                                                   Fecha);
                                                                rCon := Rec;
                                                                rCon.SETRANGE(Matricula, Matricula);
                                                                IF rCon.NEXT(-1) = 0 THEN
                                                                  rCon.INIT;

                                                                IF NOT "Rotura Tac¢grafo" THEN
                                                                  "Kilometros Acumulados"  := rCon."Kilometros Acumulados" + (Kilometros - rCon.Kilometros)
                                                                ELSE
                                                                  "Kilometros Acumulados"  := rCon."Kilometros Acumulados" + Kilometros;

                                                                "Kilometros realizados" := "Kilometros Acumulados" - rCon."Kilometros Acumulados";

                                                                IF "Kilometros realizados" < 0 THEN
                                                                  ERROR(err1);
                                                                IF "Kilometros realizados" <> 0 THEN
                                                                  Consumo := (rCon.Litros / "Kilometros realizados") * 100;
                                                              END;

                                                   CaptionML=ESP=Kilometros }
    { 11  ;   ;Litros              ;Decimal       ;OnValidate=BEGIN
                                                                comprueba_ultimo_consumo;
                                                              END;

                                                   CaptionML=ESP=Litros }
    { 13  ;   ;Kilometros realizados;Decimal      ;CaptionML=ESP=Kilometros realizados;
                                                   Editable=No }
    { 14  ;   ;Rotura Tac¢grafo    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Rotura Tac¢grafo" THEN BEGIN
                                                                  IF NOT CONFIRM (ConfirmTacografo1, FALSE) THEN
                                                                    "Rotura Tac¢grafo" := xRec."Rotura Tac¢grafo";
                                                                END
                                                                ELSE BEGIN
                                                                  IF NOT CONFIRM (ConfirmTacografo2, FALSE) THEN
                                                                    "Rotura Tac¢grafo" := xRec."Rotura Tac¢grafo";

                                                                END;
                                                              END;

                                                   CaptionML=ESP=Rotura Tac¢grafo }
    { 15  ;   ;Kilometros Acumulados;Decimal      ;CaptionML=ESP=Kilometros Acumulados;
                                                   Editable=No }
    { 17  ;   ;Consumo             ;Decimal       ;CaptionML=ESP=Consumo;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Matricula,N§ Reposicion                 ;Clustered=Yes }
    {    ;Garaje                                   }
    {    ;Matricula,Fecha,Garaje                  ;SumIndexFields=Litros,Kilometros realizados }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      err1@1100244000 : TextConst 'ESP=No puede indicar menos kilometros que en el anterior repostaje.';
      err2@1100244001 : TextConst 'ESP=Solo se pueden hacer modificaciones sobre el ultimo consumo.';
      err3@1100244002 : TextConst 'ESP=No se pueden borrar consumos.';
      ConfirmTacografo1@1100244003 : TextConst 'ESP=¨Seguro que quiere marcar la opci¢n "Rotura de Tac¢grafo"?';
      ConfirmTacografo2@1100244004 : TextConst 'ESP=¨Seguro que quiere desmarcar la opci¢n "Rotura de Tac¢grafo"?';
      no_km_sin_fecha@1100244005 : TextConst 'ESP=No se pueden indicar kilometros si no hay fecha.';
      Text50001@1103355000 : TextConst 'ESP=No existe el usuario %1.';

    PROCEDURE comprueba_ultimo_consumo@5();
    VAR
      rCon@1100244000 : Record 7010350;
    BEGIN
      // comprueba_ultimo_consumo
      //
      IF (Matricula = '') OR (Fecha = 0D) THEN
        EXIT;
      rCon.RESET; rCon.INIT;
      rCon.SETCURRENTKEY(Matricula,
                         Fecha);
      rCon.SETRANGE (Matricula      , Matricula);
      rCon.SETFILTER(Fecha          , '>=%1', Fecha);
      rCon.SETFILTER("N§ Reposicion", '<>%1', "N§ Reposicion");
      IF rCon.FINDLAST THEN
        ERROR(err2);
    END;

    PROCEDURE FiltrarGarajeUsuario@1103355000();
    VAR
      lrParGenerales@1103355000 : Record 7010311;
      lrUsuario@1103355001 : Record 7010420;
    BEGIN
      // FiltrarGarajeUsuario.
      // Filtramos los partes por garaje dependiendo de la configuraci¢n del usuario.

      lrParGenerales.FINDFIRST;

      IF NOT lrUsuario.GET(USERID) THEN
        ERROR(Text50001, USERID);

      SETCURRENTKEY(Garaje, Matricula);

      IF (lrUsuario."Garaje de trabajo" <> '') AND (lrUsuario."Garaje de trabajo" <> lrParGenerales."Todos los garajes") THEN BEGIN
        FILTERGROUP(2);
        SETRANGE(Garaje, lrUsuario."Garaje de trabajo");
        FILTERGROUP(0);
      END;
    END;

    BEGIN
    END.
  }
}
