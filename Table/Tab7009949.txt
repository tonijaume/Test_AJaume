OBJECT Table 7009949 Detalle validar factura coste
{
  OBJECT-PROPERTIES
  {
    Date=10/07/15;
    Time=19:55:12;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               _CheckRegistrada;
             END;

    OnModify=BEGIN
               _CheckRegistrada;
             END;

    OnDelete=BEGIN
               _CheckRegistrada;

               _DeleteLine;
             END;

  }
  FIELDS
  {
    { 1   ;   ;Proveedor           ;Code20        ;TableRelation=Vendor.No.;
                                                   CaptionML=[ENU=Supplier;
                                                              ESP=Proveedor];
                                                   Description=Vendor.No. }
    { 3   ;   ;No. Factura proveedor;Code20       ;CaptionML=[ENU=Supplier invoice no.;
                                                              ESP=No. Factura proveedor] }
    { 5   ;   ;Fecha registro      ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 7   ;   ;N§ Servicio / N§ Ticket;Code10     ;CaptionML=[ENU=Service No. / Ticket No.;
                                                              ESP=N§ Servicio / N§ Ticket];
                                                   NotBlank=Yes }
    { 9   ;   ;N§ Confirmacion proveedor;Code20    }
    { 10  ;   ;Fecha               ;Date          ;CaptionML=[ENU=Date;
                                                              ESP=Fecha] }
    { 11  ;   ;Booking Touroperador;Code20        ;CaptionML=[ENU=Touroperator Booking;
                                                              ESP=Booking Touroperador] }
    { 13  ;   ;Excursion           ;Code10        ;TableRelation="Producto agencia".Codigo WHERE (Tipo Producto=CONST(Excursion));
                                                   OnValidate=VAR
                                                                rProducto@1103355000 : Record 7009710;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Excursion;
                                                              ESP=Excursion];
                                                   NotBlank=Yes;
                                                   Description=FK Producto }
    { 15  ;   ;Cantidad            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad] }
    { 17  ;   ;Importe             ;Decimal       ;OnLookup=BEGIN
                                                              ShowDetail;
                                                            END;

                                                   CaptionML=[ENU=Amount;
                                                              ESP=Importe] }
    { 19  ;   ;Cantidad proveedor  ;Decimal       ;OnValidate=BEGIN
                                                                TestTolerancia;
                                                              END;

                                                   CaptionML=[ENU=Vendor Quantity;
                                                              ESP=Cantidad proveedor] }
    { 21  ;   ;Importe proveedor   ;Decimal       ;OnValidate=BEGIN
                                                                TestTolerancia;
                                                              END;

                                                   CaptionML=[ENU=Vendor amount;
                                                              ESP=Importe proveedor] }
    { 25  ;   ;N§ Servicio         ;Integer       ;TableRelation="Servicio Excursion"."N§ Servicio";
                                                   CaptionML=[ENU=Service No.;
                                                              ESP=N§ Servicio];
                                                   Description=FK Servicio Excursion }
    { 26  ;   ;Orden Linea         ;Integer        }
    { 27  ;   ;Coste x ticket      ;Boolean        }
    { 31  ;   ;Reclamar            ;Boolean       ;CaptionML=[ENU=Claim;
                                                              ESP=Reclamar] }
    { 51  ;   ;Agrupacion          ;Integer       ;TableRelation=Agrupacion."N§ Agrupacion";
                                                   CaptionML=[ENU=Service No.;
                                                              ESP=Agrupacion];
                                                   Description=PK, FK Agrupacion }
    { 53  ;   ;Tipo servicio transportista;Option ;CaptionML=[ENU=Provider service type;
                                                              ESP=Tipo servicio transportista];
                                                   OptionCaptionML=[ENU=One way,Roundtrip;
                                                                    ESP=Una via,Doble via];
                                                   OptionString=Una via,Doble via }
    { 55  ;   ;Origen              ;Code10        ;CaptionML=[ENU=Origin;
                                                              ESP=Origen] }
    { 57  ;   ;Destino             ;Code25        ;CaptionML=[ENU=Destination;
                                                              ESP=Destino];
                                                   Editable=No }
    { 59  ;   ;Tipo transfer       ;Option        ;CaptionML=[ENU=Transfer Type;
                                                              ESP=Tipo Transfer];
                                                   OptionCaptionML=[ENU=Arrival,Departure;
                                                                    ESP=Entrada,Salida];
                                                   OptionString=Entrada,Salida;
                                                   Editable=No }
    { 61  ;   ;Tipo Vehiculo       ;Code10        ;TableRelation="Tipo transporte".Codigo;
                                                   CaptionML=[ENU=Vehicle type;
                                                              ESP=Tipo vehiculo];
                                                   Description=FK Tipo Vehiculo;
                                                   Editable=No }
    { 63  ;   ;Vuelos              ;Text200       ;CaptionML=[ENU=Flights;
                                                              ESP=Vuelos];
                                                   Editable=No }
    { 65  ;   ;Pendiente FPR       ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Pending Invoices to be received;
                                                              ESP=Pendiente FPR] }
    { 67  ;   ;Capacidad Vehiculo  ;Integer       ;CaptionML=[ENU=Vehicle capacity;
                                                              ESP=Capacidad Vehiculo];
                                                   MinValue=0;
                                                   MaxValue=100 }
  }
  KEYS
  {
    {    ;Proveedor,No. Factura proveedor,Fecha registro,N§ Servicio / N§ Ticket;
                                                   SumIndexFields=Importe;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=Exceeded the tolerance limit set.;ESP=Sobrepasado el l¡mite de tolerancia configurado.';
      Text002@1000000001 : TextConst 'ENU=You cannot modify a posted invoice;ESP=No se pueden modificar datos de una factura registrada';

    PROCEDURE ShowDetail@1100217001();
    VAR
      lrDet@1100217000 : Record 7010256;
      lfDetalle@1100217001 : Form 7010292;
      lrCabVal@1000000000 : Record 7009948;
      lrCosExc@1000000001 : Record 7010166;
      lfDetCos@1000000002 : Form 7010203;
      lrCosTrf@1000000003 : Record 7009805;
      vInt@1000000004 : Integer;
    BEGIN

      lrCabVal.RESET;
      lrCabVal.GET(Proveedor, "No. Factura proveedor", "Fecha registro");
      IF lrCabVal.Modulo = lrCabVal.Modulo::Excursiones THEN
      BEGIN
        IF "Coste x ticket" THEN
        BEGIN
          lrDet.RESET;
          lrDet.FILTERGROUP(2);
          lrDet.SETRANGE(Delegacion     , lrCabVal.Departamento);
          lrDet.SETRANGE("Num. Servicio", "N§ Servicio");
          lrDet.SETRANGE("ID linea", "Orden Linea");
          lrDet.FILTERGROUP(0);

          CLEAR(lfDetalle);
          lfDetalle.SETTABLEVIEW(lrDet);
          lfDetalle.RUNMODAL;
        END
        ELSE
        BEGIN
          lrCosExc.RESET;
          lrCosExc.FILTERGROUP(2);
          lrCosExc.SETRANGE(lrCosExc.Delegacion, lrCabVal.Departamento);
          lrCosExc.SETRANGE(lrCosExc."N§ Servicio", "N§ Servicio");
          lrCosExc.SETRANGE(lrCosExc."Orden Linea", "Orden Linea");
          lrCosExc.FILTERGROUP(0);

          CLEAR(lfDetCos);
          lfDetCos.SETTABLEVIEW(lrCosExc);
          lfDetCos.RUNMODAL;
        END;
      END
      ELSE
      BEGIN
        lrCosTrf.RESET;
        lrCosTrf.SETCURRENTKEY(Concepto,Fecha,"Proveedor contable",Agrupacion);
        lrCosTrf.SETRANGE(lrCosTrf."Proveedor contable", lrCabVal.Proveedor);
        //lrCosTrf.SETRANGE(lrCosTrf.Fecha,lrCabVal."Fecha desde", lrCabVal."Fecha hasta");
        lrCosTrf.SETRANGE(lrCosTrf.Concepto, 'TRNC');
        lrCosTrf.SETFILTER(lrCosTrf."N§ Factura", '%1', '');
        EVALUATE(vInt, "N§ Servicio / N§ Ticket");
        lrCosTrf.SETRANGE(lrCosTrf.Agrupacion, vInt);
        IF lrCosTrf.FINDFIRST THEN
          FORM.RUNMODAL(7009944,lrCosTrf);
      END;
    END;

    PROCEDURE TestTolerancia@1000000000();
    VAR
      rParAg@1000000000 : Record 7009700;
      vDec@1000000001 : Decimal;
    BEGIN

      rParAg.FINDFIRST;

      vDec := Cantidad * (rParAg."% Tolerancia sobrecoste" / 100);
      IF ("Cantidad proveedor" > (Cantidad + vDec)) THEN
        ERROR(Text001);

      vDec := Importe * (rParAg."% Tolerancia sobrecoste" / 100);
      IF ("Importe proveedor" > (Importe + vDec)) THEN
        ERROR(Text001);
    END;

    LOCAL PROCEDURE _CheckRegistrada@1000000001();
    VAR
      lrCab@1000000000 : Record 7009948;
    BEGIN
      // _CheckRegistrada

      IF NOT lrCab.GET(Proveedor, "No. Factura proveedor", "Fecha registro") THEN
        EXIT;

      IF lrCab.Registrada THEN
        ERROR(Text002);
    END;

    LOCAL PROCEDURE _DeleteLine@1000000002();
    VAR
      lrCabCoste@1000000000 : Record 7009948;
      lcValTrf@1000000001 : Codeunit 7009738;
      lcValExc@1000000002 : Codeunit 7010146;
    BEGIN
      // _DeleteLine

      //. Desmarcar las lineas de coste para que se puedan validar despues

      IF NOT lrCabCoste.GET(Proveedor, "No. Factura proveedor", "Fecha registro") THEN
        EXIT;

      CASE lrCabCoste.Modulo OF
        lrCabCoste.Modulo::Transfer: lcValTrf.DesmarcarCoste(Rec);
        lrCabCoste.Modulo::Excursiones: lcValExc.DesmarcarCoste(lrCabCoste, Rec);
      END;
    END;

    BEGIN
    {
      $001 ARM 16042015 CNT-OC-14068 Cambio para validar costes a travs de cabecera y detalle

      $002 AJS 30062015 Modificaciones para permitir la validacion parcial de servicios

      $003 AJS 10072015 Ampliar el campo "N§ Confirmacion proveedor" a Code20
    }
    END.
  }
}
