OBJECT Table 7010414 Coste-Ingreso
{
  OBJECT-PROPERTIES
  {
    Date=12/11/14;
    Time=12:32:47;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // AJS --> El n§ de linea se obtiene automaticamente.

               rCI.RESET;
               rCI.SETRANGE ("N§ Parte", "N§ Parte");
               rCI.SETFILTER("N§ Linea", '<=%1', 99000000);
               IF rCI.FINDLAST THEN
                 "N§ Linea" := rCI."N§ Linea" + 100
               ELSE
                 "N§ Linea" := 100;
             END;

    OnModify=VAR
               lrTTOOxParte@1100244000 : Record 7010365;
             BEGIN
             END;

    OnDelete=VAR
               lrTTOOxParte@1100244000 : Record 7010365;
             BEGIN
               // JPT 05-04-02  Rellenamos los campos Factura y Prefactura de Touroperador x Parte
               // AJS 09-05-02  Solo hay que hacer este tratamiento en los ingresos

               IF Concepto = Concepto::Ingreso THEN BEGIN
                 rTTOOxParte.RESET;
                 IF rTTOOxParte.GET("N§ Parte", Touroperador) THEN BEGIN
                   rTTOOxParte."N§ Prefactura" := '';
                   rTTOOxParte."N§ Factura"    := '';
                   rTTOOxParte.MODIFY;
                 END;
               END;
             END;

    CaptionML=ESP=Coste-Ingreso;
    LookupFormID=Form7010478;
    DrillDownFormID=Form7010478;
  }
  FIELDS
  {
    { 1   ;   ;N§ Parte            ;Code10        ;TableRelation=Parte."N§ Parte";
                                                   CaptionML=ESP=N§ Parte;
                                                   SQL Data Type=Varchar;
                                                   Description=PK, FK Parte;
                                                   Editable=No }
    { 3   ;   ;N§ Linea            ;Integer       ;CaptionML=ESP=N§ Linea;
                                                   Description=PK;
                                                   Editable=No }
    { 5   ;   ;Garaje              ;Code10        ;CaptionML=ESP=Garaje;
                                                   SQL Data Type=Varchar }
    { 7   ;   ;Fecha               ;Date          ;CaptionML=ESP=Fecha;
                                                   Editable=No }
    { 9   ;   ;Cliente estadistico ;Code20        ;TableRelation=Customer.No.;
                                                   CaptionML=ESP=Cliente estad¡stico;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Cliente;
                                                   Editable=No }
    { 11  ;   ;Codigo servicio     ;Code10        ;TableRelation="Codigo servicio";
                                                   CaptionML=ESP=Codigo servicio;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Codigo servicio;
                                                   Editable=No }
    { 13  ;   ;Tipo servicio       ;Code10        ;TableRelation="Tipo Servicio".Codigo;
                                                   OnValidate=VAR
                                                                lrTipoSer@1100244000 : Record 7010319;
                                                              BEGIN
                                                                lrTipoSer.RESET;
                                                                IF lrTipoSer.GET("Tipo servicio") THEN
                                                                  "Tipo Servicio Fijo" := lrTipoSer."Tipo fijo";
                                                              END;

                                                   CaptionML=ESP=Tipo servicio;
                                                   SQL Data Type=Varchar;
                                                   Editable=No }
    { 14  ;   ;Tipo Servicio Fijo  ;Option        ;CaptionML=ESP=Tipo fijo;
                                                   OptionCaptionML=ESP=Excursion,Traslado;
                                                   OptionString=Excursion,Traslado;
                                                   Editable=No }
    { 15  ;   ;Proveedor           ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ESP=Proveedor;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Proveedor;
                                                   Editable=No }
    { 17  ;   ;Zona Precios        ;Code10        ;CaptionML=ESP=Zona Precios;
                                                   SQL Data Type=Varchar;
                                                   Editable=No }
    { 19  ;   ;Tipo elemento       ;Code10        ;CaptionML=ESP=Tipo elemento;
                                                   SQL Data Type=Varchar;
                                                   Editable=No }
    { 21  ;   ;Tipo Vehiculo       ;Code10        ;CaptionML=ESP=Tipo Vehiculo;
                                                   SQL Data Type=Varchar;
                                                   Editable=No }
    { 23  ;   ;Pax                 ;Decimal       ;CaptionML=ESP=Pax;
                                                   DecimalPlaces=0:2 }
    { 25  ;   ;Pax Real            ;Decimal       ;CaptionML=ESP=Pax Real;
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 27  ;   ;Cod. Divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Divisa" <> '' THEN BEGIN
                                                                  IF Concepto = Concepto::Coste THEN
                                                                    divisa_coste
                                                                  ELSE
                                                                    divisa_ingreso;
                                                                END
                                                                ELSE BEGIN
                                                                  "Importe DL"                  := ROUND(Importe);
                                                                  "Importe sin impuesto DL"     := ROUND("Importe sin impuesto");
                                                                  "Importe con impuesto DL"     := ROUND("Importe con impuesto");
                                                                  "Importe validacion DL"       := ROUND("Importe validacion");
                                                                  "Precio Pax DL"               := ROUND("Precio Pax");
                                                                  "Precio Pax DL sin impuestos" := ROUND("Precio Pax sin impuestos");
                                                                  "Precio Vehiculo DL"          := ROUND("Precio Vehiculo");
                                                                  "Precio Vehiculo DL sin imp"  := ROUND("Precio Vehiculo sin impuestos");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Cod. Divisa;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Divisa }
    { 29  ;   ;Importe             ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Importe;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 31  ;   ;Importe DL          ;Decimal       ;CaptionML=ESP=Importe DL;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 33  ;   ;Importe sin impuesto;Decimal       ;OnValidate=BEGIN
                                                                rPar.FINDFIRST;

                                                                IF Concepto = Concepto::Coste THEN BEGIN
                                                                  rPro.GET(Proveedor);

                                                                  IF NOT rConfIVA.GET (rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END
                                                                ELSE BEGIN
                                                                  rCli.GET("Cliente Operativo");

                                                                  IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END;

                                                                "Importe con impuesto" := ROUND("Importe sin impuesto" * (1 + (rConfIVA."VAT+EC %" / 100)));

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Importe sin impuesto;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 35  ;   ;Importe sin impuesto DL;Decimal    ;CaptionML=ESP=Importe sin impuesto DL;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 37  ;   ;Importe con impuesto;Decimal       ;OnValidate=BEGIN
                                                                rPar.FINDFIRST;

                                                                IF Concepto = Concepto::Coste THEN BEGIN
                                                                  rPro.GET(Proveedor);

                                                                  IF NOT rConfIVA.GET (rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END
                                                                ELSE BEGIN
                                                                  rCli.GET("Cliente Operativo");

                                                                  IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END;

                                                                "Importe sin impuesto" := ROUND("Importe con impuesto" / (1 + (rConfIVA."VAT+EC %" / 100)));

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Importe con impuesto;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 39  ;   ;Importe con impuesto DL;Decimal    ;CaptionML=ESP=Importe con impuesto DL;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 41  ;   ;N§ Prefactura       ;Code20        ;TableRelation="Prefactura ingreso";
                                                   OnValidate=BEGIN
                                                                IF Concepto = Concepto::Ingreso THEN BEGIN

                                                                  // JPT 24/10/06 No queremos que se repitan estas funciones para cada linea.
                                                                  // Creamos un temporary rTempFact para que solo se marque la factura y prefactura la primera vez

                                                                  CLEAR(rTempFact);
                                                                  IF (NOT rTempFact.GET("N§ Parte", Touroperador)) OR ("N§ Prefactura" <> rTempFact."N§ Prefactura") THEN BEGIN

                                                                    IF rTTOOxParte.GET("N§ Parte", Touroperador) THEN BEGIN
                                                                      rTTOOxParte."N§ Prefactura" := "N§ Prefactura";
                                                                      rTTOOxParte.MODIFY;
                                                                    END;

                                                                    // Marcamos el temporal para que no vuelva a realizar la busqueda
                                                                    rTempFact := rTTOOxParte;
                                                                    IF NOT rTempFact.FIND THEN // Si no existe
                                                                      rTempFact.INSERT
                                                                    ELSE BEGIN  // Si existe con otro numero de prefactura
                                                                      rTempFact := rTTOOxParte;
                                                                      rTempFact.MODIFY;
                                                                    END;

                                                                  END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ESP=N§ Prefactura;
                                                   SQL Data Type=Varchar }
    { 43  ;   ;N§ Factura          ;Code20        ;OnValidate=VAR
                                                                lwOk@1103355000 : Boolean;
                                                              BEGIN
                                                                rParte.RESET; rParte.INIT;

                                                                // JPT 24/10/06 No queremos que se repitan estas funciones para cada linea.
                                                                // Creamos un temporary rTempFact para que solo se marque la factura y prefactura la primera vez
                                                                CLEAR(rTempFact);
                                                                rTempFact.SETRANGE("N§ Parte", "N§ Parte");
                                                                IF NOT rTempFact.FINDFIRST THEN BEGIN
                                                                  IF rParte.GET("N§ Parte") THEN BEGIN
                                                                    IF (NOT rParte.Facturado) AND ("N§ Factura" <> '') THEN BEGIN
                                                                      rParte.Facturado := TRUE;
                                                                      rParte.MODIFY;
                                                                    END;
                                                                  END;
                                                                END;


                                                                IF Concepto = Concepto::Ingreso THEN BEGIN
                                                                  CLEAR(rTempFact);

                                                                  IF (NOT rTempFact.GET("N§ Parte", Touroperador)) OR ("N§ Factura" <> rTempFact."N§ Factura") THEN BEGIN
                                                                    rTTOOxParte.RESET;
                                                                    IF rTTOOxParte.GET("N§ Parte", Touroperador) THEN BEGIN
                                                                      rTTOOxParte.VALIDATE("N§ Factura", "N§ Factura");
                                                                      rTTOOxParte.MODIFY;
                                                                    END;

                                                                    // Marcamos el temporal para que no vuelva a realizar la busqueda
                                                                    rTempFact := rTTOOxParte;
                                                                    IF NOT rTempFact.FIND THEN // Si no existe
                                                                      rTempFact.INSERT
                                                                    ELSE BEGIN  // Si existe con otro numero de factura
                                                                      rTempFact := rTTOOxParte;
                                                                      rTempFact.MODIFY;
                                                                    END;
                                                                  END;

                                                                  // AJS 30.06.2004
                                                                  // Rellenar el campo "Fecha registro factura" en coste-ingreso

                                                                  IF rPrefact.GET("N§ Prefactura") THEN
                                                                    "Fecha registro factura" := rPrefact."Fecha Registro factura";
                                                                END;
                                                              END;

                                                   CaptionML=ESP=N§ Factura }
    { 45  ;   ;Importe validacion  ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Importe validacion;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 47  ;   ;Importe validacion DL;Decimal      ;CaptionML=ESP=Importe validacion DL;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 49  ;   ;Pax validacion      ;Decimal       ;CaptionML=ESP=Pax validacion;
                                                   DecimalPlaces=0:2 }
    { 51  ;   ;Importe sin original;Decimal       ;CaptionML=ESP=Importe sin original;
                                                   Description=Utilizado para crear el reparto del coste por touroperador;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 53  ;   ;Importe con original;Decimal       ;CaptionML=ESP=Importe con original;
                                                   Description=Utilizado para crear el reparto del coste por touroperador;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 55  ;   ;Importe validado    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Validacion coste"."Importe Validado" WHERE (N§ Parte=FIELD(N§ Parte),
                                                                                                                N§ Linea=FIELD(N§ Linea)));
                                                   CaptionML=ESP=Importe validado;
                                                   Description=Calculado sobre Validacion coste;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 57  ;   ;Paxes validados     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Validacion coste"."Paxes Validados" WHERE (N§ Parte=FIELD(N§ Parte),
                                                                                                               N§ Linea=FIELD(N§ Linea)));
                                                   CaptionML=ESP=Paxes validados;
                                                   DecimalPlaces=0:2;
                                                   Description=Calculado sobre Validacion coste;
                                                   Editable=No }
    { 59  ;   ;Touroperador        ;Code10        ;TableRelation=TTOO.Codigo;
                                                   CaptionML=ESP=Touroperador;
                                                   Description=FK TTOO;
                                                   Editable=No }
    { 61  ;   ;Precio manual       ;Boolean       ;CaptionML=ESP=Precio manual;
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 63  ;   ;Concepto            ;Option        ;CaptionML=ESP=Concepto;
                                                   OptionCaptionML=ESP=Ingreso,Coste,Produccion;
                                                   OptionString=Ingreso,Coste,Produccion;
                                                   Editable=No }
    { 65  ;   ;Origen/Destino      ;Code10        ;CaptionML=ESP=Origen/Destino;
                                                   Editable=No }
    { 67  ;   ;Precio Pax          ;Decimal       ;OnValidate=BEGIN
                                                                rPar.FINDFIRST;

                                                                IF Concepto = Concepto::Coste THEN BEGIN
                                                                  rPro.GET(Proveedor);

                                                                  IF NOT rConfIVA.GET (rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END
                                                                ELSE BEGIN
                                                                  rCli.GET("Cliente Operativo");

                                                                  IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END;

                                                                "Precio Pax sin impuestos" := ROUND("Precio Pax" / (1 + (rConfIVA."VAT+EC %" / 100)));

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Precio Pax;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 69  ;   ;Precio Pax DL       ;Decimal       ;CaptionML=ESP=Precio Pax DL;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 71  ;   ;Precio Vehiculo     ;Decimal       ;OnValidate=BEGIN
                                                                rPar.FINDFIRST;

                                                                IF Concepto = Concepto::Coste THEN BEGIN
                                                                  rPro.GET(Proveedor);

                                                                  IF NOT rConfIVA.GET (rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END
                                                                ELSE BEGIN
                                                                  rCli.GET("Cliente Operativo");

                                                                  IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END;

                                                                "Precio Vehiculo sin impuestos" := ROUND("Precio Vehiculo" / (1 + (rConfIVA."VAT+EC %" / 100)));

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Precio Vehiculo;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 73  ;   ;Precio Vehiculo DL  ;Decimal       ;CaptionML=ESP=Precio Vehiculo DL;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 75  ;   ;N§ Contrato         ;Code10        ;CaptionML=ESP=N§ Contrato;
                                                   Editable=No }
    { 77  ;   ;Tipo linea          ;Option        ;CaptionML=ESP=Tipo linea;
                                                   OptionCaptionML=ESP=Base,Suplemento,Manual,Extra,Ajuste;
                                                   OptionString=Base,Suplemento,Manual,Extra,Ajuste;
                                                   Editable=No }
    { 79  ;   ;Porcentaje reparto  ;Decimal       ;CaptionML=ESP=Porcentaje reparto;
                                                   Description=No editable;
                                                   Editable=No }
    { 81  ;   ;Marca               ;Code20        ;OnValidate=BEGIN
                                                                AjustaMarca(Rec);
                                                              END;

                                                   CaptionML=ESP=Marca;
                                                   Editable=No }
    { 83  ;   ;Generada prevision  ;Boolean       ;OnValidate=VAR
                                                                rParte@1100244000 : Record 7010360;
                                                              BEGIN
                                                                rParte.RESET;
                                                                IF rParte.GET("N§ Parte") THEN BEGIN
                                                                  rParte.VALIDATE("Generada prevision", "Generada prevision");
                                                                  rParte.MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Generada prevision }
    { 85  ;   ;% IVA               ;Decimal       ;CaptionML=ESP=% IVA;
                                                   Editable=No }
    { 87  ;   ;Vuelos              ;Text30        ;CaptionML=ESP=Vuelos }
    { 88  ;   ;Vehiculo            ;Code10        ;TableRelation=Vehiculo.Matricula;
                                                   CaptionML=ESP=Vehiculo;
                                                   Editable=No }
    { 89  ;   ;Pax Facturados      ;Decimal       ;CaptionML=ESP=Pax Facturados;
                                                   DecimalPlaces=0:2 }
    { 91  ;   ;Pax Transportados   ;Decimal       ;CaptionML=ESP=Pax Transportados;
                                                   DecimalPlaces=0:2 }
    { 93  ;   ;Grupo registro IVA Producto;Code10 ;TableRelation="VAT Product Posting Group".Code;
                                                   CaptionML=ESP=Grupo registro IVA Producto;
                                                   Description="VAT Product Posting Group".Code }
    { 95  ;   ;Hora vuelo          ;Time          ;CaptionML=ESP=Hora vuelo }
    { 97  ;   ;Facturable          ;Boolean       ;CaptionML=ESP=Facturable }
    { 99  ;   ;Linea abono         ;Boolean       ;CaptionML=ESP=Linea abono }
    { 101 ;   ;Precio Pax sin impuestos;Decimal   ;OnValidate=BEGIN
                                                                rPar.FINDFIRST;

                                                                IF Concepto = Concepto::Coste THEN BEGIN
                                                                  rPro.GET(Proveedor);

                                                                  IF NOT rConfIVA.GET (rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END
                                                                ELSE BEGIN
                                                                  rCli.GET("Cliente Operativo");

                                                                  IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END;

                                                                "Precio Pax" := ROUND("Precio Pax sin impuestos" * (1 + (rConfIVA."VAT+EC %" / 100)));

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Precio Pax sin impuestos;
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 103 ;   ;Precio Pax DL sin impuestos;Decimal;CaptionML=ESP=Precio Pax DL sin impuestos;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 105 ;   ;Precio Vehiculo sin impuestos;Decimal;
                                                   OnValidate=BEGIN
                                                                rPar.FINDFIRST;

                                                                IF Concepto = Concepto::Coste THEN BEGIN
                                                                  rPro.GET(Proveedor);

                                                                  IF NOT rConfIVA.GET (rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rPro."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END
                                                                ELSE BEGIN
                                                                  rCli.GET("Cliente Operativo");

                                                                  IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                    ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));
                                                                END;

                                                                "Precio Vehiculo" := ROUND("Precio Vehiculo sin impuestos" * (1 + (rConfIVA."VAT+EC %" / 100)));

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Precio Vehiculo sin impuestos;
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 107 ;   ;Precio Vehiculo DL sin imp;Decimal ;CaptionML=ESP=Precio Vehiculo DL sin imp;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 108 ;   ;Seleccion           ;Boolean       ;CaptionML=ESP=Seleccion }
    { 109 ;   ;N§ Parte fantasma   ;Code10        ;CaptionML=ESP=N§ Parte fantasma;
                                                   Description=N§ de parte falso para las lineas que provienen de salidas valoradas a cero;
                                                   Editable=No }
    { 110 ;   ;Servicio propio     ;Boolean       ;CaptionML=ESP=Servicio propio }
    { 111 ;   ;Zona facturacion    ;Code10        ;CaptionML=ESP=Zona facturacion;
                                                   Editable=No }
    { 113 ;   ;Concepto facturacion;Code30        ;CaptionML=ESP=Concepto facturacion }
    { 114 ;   ;Paxes Servicio      ;Decimal       ;CaptionML=ESP=Paxes Servicio;
                                                   DecimalPlaces=0:0;
                                                   Description=Es el total del transportado en el parte }
    { 115 ;   ;Referencia          ;Text30        ;CaptionML=ESP=Referencia }
    { 116 ;   ;Cod Grupo           ;Code20        ;TableRelation=Grupos."Codigo Grupo";
                                                   CaptionML=ESP=Cod Grupo;
                                                   Description=FK Grupos }
    { 117 ;   ;Fecha registro factura;Date        ;CaptionML=ESP=Fecha registro factura }
    { 118 ;   ;Servicio Regular    ;Integer       ;TableRelation="Servicios Regulares".No.;
                                                   CaptionML=ESP=Servicio Regular;
                                                   Description=FK Servicios Regulares }
    { 119 ;   ;Gratuito            ;Boolean       ;CaptionML=ESP=Gratuito }
    { 120 ;   ;Fecha Confirmacion  ;DateTime      ;CaptionML=ESP=Fecha Confirmacion;
                                                   Description=Indica la fecha y Hora de confirmacion. Necesario para desconfirmar }
    { 130 ;   ;Impuestos Incluidos ;Boolean       ;CaptionML=ESP=Impuestos Incluidos }
    { 131 ;   ;Tarifa horaria      ;Code10        ;TableRelation="Tarifa horaria x contrato".Codigo;
                                                   CaptionML=ESP=Tarifa horaria;
                                                   Description="Tarifa horaria x contrato".Codigo;
                                                   Editable=No }
    { 132 ;   ;Dia festivo         ;Boolean       ;CaptionML=ESP=Dia festivo }
    { 200 ;   ;Cliente Operativo   ;Code20        ;TableRelation=Customer.No.;
                                                   CaptionML=ESP=Cliente Operativo }
  }
  KEYS
  {
    {    ;N§ Parte,N§ Linea                       ;SumIndexFields=Importe sin impuesto DL;
                                                   Clustered=Yes }
    { No ;Generada prevision,Concepto,Garaje,Fecha,Touroperador,Tipo servicio;
                                                   SumIndexFields=Importe sin impuesto DL }
    {    ;Garaje,Fecha,Tipo servicio,Codigo servicio;
                                                   SumIndexFields=Importe sin impuesto DL;
                                                   SIFTLevelsToMaintain=[{Garaje,Fecha:Day},
                                                                         {Garaje,Fecha:Day,Tipo servicio},
                                                                         {Garaje,Fecha:Day,Tipo servicio,Codigo servicio},
                                                                         {Garaje,Fecha:Day,Tipo servicio,Codigo servicio,N§ Parte}] }
    {    ;Cliente Operativo,Touroperador,N§ Prefactura,Facturable,Fecha }
    { No ;N§ Prefactura,Concepto,Garaje,Cliente estadistico,Touroperador,Fecha,N§ Parte,Zona Precios;
                                                   SumIndexFields=Importe sin impuesto DL,Importe sin impuesto }
    { No ;N§ Prefactura,Concepto,Garaje,Cliente estadistico,Touroperador,Codigo servicio,Fecha,N§ Parte,Zona Precios;
                                                   SumIndexFields=Importe sin impuesto DL }
    { No ;N§ Prefactura,Concepto,Garaje,Cliente estadistico,Touroperador,Fecha,Codigo servicio,N§ Parte,Zona Precios;
                                                   SumIndexFields=Importe sin impuesto DL }
    {    ;Vehiculo,Fecha,Tipo linea,Tipo elemento,Tipo servicio,Codigo servicio,Garaje;
                                                   SumIndexFields=Pax Facturados,Importe sin impuesto DL }
    {    ;N§ Parte,Touroperador,Tipo linea,Tipo elemento,N§ Factura,Linea abono;
                                                   SumIndexFields=Importe con impuesto,Importe sin impuesto,Importe sin impuesto DL,Pax Facturados,Pax Transportados;
                                                   SIFTLevelsToMaintain=[{N§ Parte,Touroperador},
                                                                         {N§ Parte,Touroperador,Tipo linea,Tipo elemento,N§ Factura},
                                                                         {N§ Parte,Touroperador,Tipo linea,Tipo elemento,N§ Factura,Linea abono}] }
    {    ;Cliente estadistico,Touroperador,Fecha,Tipo linea,Tipo elemento,Garaje,Tipo servicio,Codigo servicio,Pax Transportados,Zona Precios,Servicio propio;
                                                   SumIndexFields=Pax Facturados,Importe sin impuesto DL,Pax Transportados }
    { No ;N§ Prefactura,Concepto,Garaje,Cliente estadistico,Touroperador,Vuelos,Fecha,N§ Parte,Zona Precios }
    { No ;N§ Parte,Concepto                       ;SumIndexFields=Importe con impuesto DL }
    { No ;Fecha                                    }
    { No ;N§ Prefactura,N§ Factura,Concepto        }
    {    ;N§ Parte,Touroperador,N§ Factura        ;SumIndexFields=Importe sin impuesto DL }
    {    ;Concepto,N§ Factura,Tipo linea          ;SumIndexFields=Importe sin impuesto DL }
    { No ;N§ Parte fantasma                        }
    { No ;Concepto,Marca,Fecha,Tipo servicio,N§ Parte,Tipo linea }
    { No ;Concepto,Garaje,Proveedor,Cliente estadistico,Touroperador,Fecha,Tipo servicio,Codigo servicio,Tipo Vehiculo,Vehiculo,Zona Precios,N§ Factura,Facturable;
                                                   SumIndexFields=Importe sin impuesto DL }
    {    ;N§ Factura                               }
    {    ;Fecha,Cliente estadistico,Touroperador,Facturable,N§ Factura,N§ Prefactura,Fecha registro factura;
                                                   SumIndexFields=Importe sin impuesto DL }
    {    ;Cod Grupo                                }
    {    ;Garaje,Cliente estadistico,Touroperador,Fecha registro factura;
                                                   MaintainSIFTIndex=No }
    {    ;Servicio Regular,Fecha                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100244009 : TextConst 'ESP=Marca';
      rPar@1100244000 : Record 7010311;
      rCI@1100244001 : Record 7010414;
      rTipo@1100244002 : Record 330;
      rConfIVA@1100244003 : Record 325;
      err1@1100244004 : TextConst 'ESP=No existe el proveedor indicado en el parte de trabajo.';
      err2@1100244005 : TextConst 'ESP=No existe el IVA de compra %1-%2.';
      rPro@1100244006 : Record 23;
      rCli@1100244010 : Record 18;
      rParte@1100244007 : Record 7010360;
      rTTOOxParte@1100244008 : Record 7010365;
      rTempFact@1103355000 : TEMPORARY Record 7010365;
      rPrefact@1100244011 : Record 7010415;
      rConV@1100217001 : Record 7010403;
      rConC@1100217000 : Record 7010408;

    PROCEDURE divisa_coste@1();
    VAR
      rConC@1100244000 : Record 7010408;
    BEGIN
      // divisa_coste
      //
      // AJS --> Si el concepto es de coste hay que extraer la fecha de cambio del contrato de compra
      //
      CLEAR(rConC);
      rConC.SETRANGE("N§ Contrato", "N§ Contrato");

      IF rConC.FINDFIRST THEN BEGIN
        IF rConC."Fecha firma contrato" = 0D THEN BEGIN
          "Importe DL"                  := 0;
          "Importe sin impuesto DL"     := 0;
          "Importe con impuesto DL"     := 0;
          "Importe validacion DL"       := 0;
          "Precio Pax DL"               := 0;
          "Precio Pax DL sin impuestos" := 0;
          "Precio Vehiculo DL"          := 0;
          "Precio Vehiculo DL sin imp"  := 0;
        END
        ELSE BEGIN
          "Importe DL" := rTipo.ExchangeAmtFCYToLCY(rConC."Fecha firma contrato", "Cod. Divisa",
                          Importe, rTipo.ExchangeRate(rConC."Fecha firma contrato", "Cod. Divisa"));
          "Importe sin impuesto DL" := rTipo.ExchangeAmtFCYToLCY(rConC."Fecha firma contrato", "Cod. Divisa",
                                       "Importe sin impuesto",
                                       rTipo.ExchangeRate(rConC."Fecha firma contrato", "Cod. Divisa"));
          "Importe con impuesto DL" := rTipo.ExchangeAmtFCYToLCY(rConC."Fecha firma contrato", "Cod. Divisa",
                                       "Importe con impuesto",
                                       rTipo.ExchangeRate(rConC."Fecha firma contrato", "Cod. Divisa"));
          "Importe validacion" := rTipo.ExchangeAmtFCYToLCY(rConC."Fecha firma contrato", "Cod. Divisa",
                                  "Importe validacion", rTipo.ExchangeRate(rConC."Fecha firma contrato",
                                                                         "Cod. Divisa"));
          "Precio Pax DL" := rTipo.ExchangeAmtFCYToLCY(rConC."Fecha firma contrato", "Cod. Divisa",
                             "Precio Pax", rTipo.ExchangeRate(rConC."Fecha firma contrato", "Cod. Divisa"));
          "Precio Pax DL sin impuestos" := rTipo.ExchangeAmtFCYToLCY(rConC."Fecha firma contrato",
                                                                "Cod. Divisa", "Precio Pax sin impuestos",
                                                                rTipo.ExchangeRate(rConC."Fecha firma contrato", "Cod. Divisa"));
          "Precio Vehiculo DL" := rTipo.ExchangeAmtFCYToLCY(rConC."Fecha firma contrato", "Cod. Divisa",
                                  "Precio Vehiculo", rTipo.ExchangeRate(rConC."Fecha firma contrato",
                                                                      "Cod. Divisa"));
          "Precio Vehiculo DL sin imp" := rTipo.ExchangeAmtFCYToLCY(rConC."Fecha firma contrato",
                                                               "Cod. Divisa", "Precio Vehiculo sin impuestos",
                                                               rTipo.ExchangeRate(rConC."Fecha firma contrato", "Cod. Divisa"));
        END;
      END;
    END;

    PROCEDURE divisa_ingreso@2();
    VAR
      rConV@1100244000 : Record 7010403;
    BEGIN
      // divisa_ingreso
      //
      // AJS --> Si el concepto es de ingreso hay que extraer la fecha de cambio del contrato de venta
      //

      CLEAR(rConV);
      rConV.SETRANGE("N§ Contrato", "N§ Contrato");

      IF rConV.FINDFIRST THEN BEGIN
        IF rConV."Fecha firma contrato" = 0D THEN BEGIN
          "Importe DL"                  := 0;
          "Importe sin impuesto DL"     := 0;
          "Importe con impuesto DL"     := 0;
          "Importe validacion DL"       := 0;
          "Precio Pax DL"               := 0;
          "Precio Pax DL sin impuestos" := 0;
          "Precio Vehiculo DL"          := 0;
          "Precio Vehiculo DL sin imp"  := 0;
        END
        ELSE BEGIN
          "Importe DL" := rTipo.ExchangeAmtFCYToLCY(rConV."Fecha firma contrato", "Cod. Divisa",
                          Importe, rTipo.ExchangeRate(rConV."Fecha firma contrato", "Cod. Divisa"));
          "Importe sin impuesto DL" := rTipo.ExchangeAmtFCYToLCY(rConV."Fecha firma contrato", "Cod. Divisa",
                                       "Importe sin impuesto",
                                       rTipo.ExchangeRate(rConV."Fecha firma contrato", "Cod. Divisa"));
          "Importe con impuesto DL" := rTipo.ExchangeAmtFCYToLCY(rConV."Fecha firma contrato", "Cod. Divisa",
                                       "Importe con impuesto",
                                       rTipo.ExchangeRate(rConV."Fecha firma contrato", "Cod. Divisa"));
          "Importe validacion DL" := rTipo.ExchangeAmtFCYToLCY(rConV."Fecha firma contrato", "Cod. Divisa",
                                  "Importe validacion", rTipo.ExchangeRate(rConV."Fecha firma contrato",
                                                                         "Cod. Divisa"));
          "Precio Pax DL" := rTipo.ExchangeAmtFCYToLCY(rConV."Fecha firma contrato", "Cod. Divisa",
                             "Precio Pax", rTipo.ExchangeRate(rConV."Fecha firma contrato", "Cod. Divisa"));
          "Precio Pax DL sin impuestos" := rTipo.ExchangeAmtFCYToLCY(rConV."Fecha firma contrato",
                                                                "Cod. Divisa", "Precio Pax sin impuestos",
                                                                rTipo.ExchangeRate(rConV."Fecha firma contrato", "Cod. Divisa"));
          "Precio Vehiculo DL" := rTipo.ExchangeAmtFCYToLCY(rConV."Fecha firma contrato", "Cod. Divisa",
                                  "Precio Vehiculo", rTipo.ExchangeRate(rConV."Fecha firma contrato",
                                                                      "Cod. Divisa"));
          "Precio Vehiculo DL sin imp" := rTipo.ExchangeAmtFCYToLCY(rConV."Fecha firma contrato",
                                                               "Cod. Divisa", "Precio Vehiculo sin impuestos",
                                                               rTipo.ExchangeRate(rConV."Fecha firma contrato", "Cod. Divisa"));
        END;
      END;
    END;

    PROCEDURE Ajustadivisa_ingreso@1100244000(pwFechaCambio@1100244001 : Date);
    BEGIN
      // Ajustadivisa_ingreso
      //
      // Ajusta los campo a la fecha pasada como parametro
      //

      "Importe DL" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa",
                                   Importe, rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
      "Importe sin impuesto DL" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa",
                                    "Importe sin impuesto",
                                    rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
      "Importe con impuesto DL" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa",
                                   "Importe con impuesto",
                                   rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
      "Importe validacion" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa",
                                   "Importe validacion", rTipo.ExchangeRate(pwFechaCambio,"Cod. Divisa"));
      "Precio Pax DL" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa",
                                   "Precio Pax", rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
      "Precio Pax DL sin impuestos" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio,
                                                                "Cod. Divisa", "Precio Pax sin impuestos",
                                                                rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
      "Precio Vehiculo DL" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa",
                                  "Precio Vehiculo", rTipo.ExchangeRate(pwFechaCambio,"Cod. Divisa"));
      "Precio Vehiculo DL sin imp" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio,
                                                               "Cod. Divisa", "Precio Vehiculo sin impuestos",
                                                               rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
    END;

    PROCEDURE AjustaMarca@3(VAR prCI@1100244000 : Record 7010414);
    VAR
      lrCI2@1100244001 : Record 7010414;
      lwMarca@1100244002 : Boolean;
      lrTP@1100244003 : Record 7010365;
      lrNuevoValor@1100244004 : Code[10];
    BEGIN
      // AjustaMarca

      // JPT -> Esta funci¢n sincroniza el campo Marca de la tabla Coste-Ingreso con el campo Marca
      // de la tabla Touroperador x Parte. De forma que si se marca alguna o se desmarcan todas,
      // repercutir  en la tabla Touroperador x Parte.


      IF prCI.Marca= '' THEN BEGIN
        lrCI2.RESET;
        lrCI2.SETCURRENTKEY("N§ Parte",
                            Touroperador,
                            "Tipo linea",
                            "Tipo elemento");
        lrCI2.SETRANGE("N§ Parte"  , prCI."N§ Parte");
        lrCI2.SETRANGE(Touroperador, prCI.Touroperador);
        lrCI2.SETFILTER(Marca, '<> %1','');
        lrCI2.SETFILTER("N§ Linea", '<> %1', prCI."N§ Linea");
        lwMarca := lrCI2.FINDFIRST;
      END
      ELSE
        lwMarca := TRUE;

      IF lwMarca THEN
        lrNuevoValor:= USERID
      ELSE
        lrNuevoValor:='';

      lrTP.RESET;
      IF lrTP.GET(prCI."N§ Parte",prCI.Touroperador) THEN BEGIN
        IF (lrTP.Marca <> '') XOR lwMarca THEN BEGIN
          lrTP.Marca:= lrNuevoValor;
          lrTP.MODIFY;
        END;
      END;
    END;

    PROCEDURE MarcaTodo@4(pValor@1100244000 : Code[10];VAR prCI@1100244001 : Record 7010414);
    VAR
      lrCI@1100244002 : Record 7010414;
      lrCI2@1100244003 : Record 7010414;
    BEGIN
      // MarcaTodo
      // Esta Funci¢n valida el campo marca de todos los registros actuales con el code pValor
      // pasado como parametro. Sustituye al Modifyall porque valida el campo Marca de todos los registros
      lrCI.RESET;
      lrCI.COPY(prCI);
      IF lrCI.FINDSET(TRUE) THEN BEGIN
        REPEAT
          lrCI2 := lrCI;
          lrCI2.VALIDATE (Marca , pValor);
          lrCI2.MODIFY;
        UNTIL lrCI.NEXT=0;
      END;
    END;

    PROCEDURE PasarProduccion@1103355000(pwBorrar@1103355000 : Boolean);
    VAR
      lrPI@1103355001 : Record 7035392;
      lrCI@1103355002 : Record 7010414;
      lrHist@1103355003 : Record 7035352;
    BEGIN
      // PasarProduccion
      // Retrocede la linea de Ingreso Facturado a Producci¢n
      // pwBorra indica si tenemos que borrar tambien la linea actual

      lrCI.COPY(Rec);

      CLEAR(lrPI);
      lrPI.TRANSFERFIELDS(lrCI);
      lrPI."N§ Prefactura" :='';
      lrPI."N§ Factura"    :='';
      lrPI.INSERT(TRUE);

      // AJF 23/09/08
      // Traspasamos el historial de cambios manuales.

      lrHist.RESET;
      lrHist.MoverHistCIaProd(lrCI,lrPI);

      IF pwBorrar THEN BEGIN
        VALIDATE("N§ Prefactura",''); // Esto es para que se marque en TTOOxParte
        VALIDATE("N§ Factura"   ,'');
        lrCI.DELETE;
      END;
    END;

    PROCEDURE LimpiaTemp@1103355009();
    BEGIN
      // LimpiaTemp
      // rTempFact es un temporary que guarda el numero de parte y ttoo facturado o prefacturado

      CLEAR(rTempFact);
      rTempFact.DELETEALL;
    END;

    PROCEDURE LookUpHistorico@1103355001();
    VAR
      lrHistorico@1103355000 : Record 7035352;
      lfHistorico@1103355001 : Form 7010311;
    BEGIN
      // LookUpHistorico
      IF "N§ Parte" = '' THEN
        EXIT;

      lrHistorico.SETCURRENTKEY("N§ parte", Concepto, "N§ Linea");
      lrHistorico.SETRANGE("N§ parte", "N§ Parte");
      lrHistorico.SETRANGE("N§ Linea", "N§ Linea");
      lrHistorico.SETRANGE(Concepto  , lrHistorico.Concepto::Ingreso);

      IF NOT lrHistorico.ISEMPTY THEN BEGIN
        lfHistorico.SETRECORD   (lrHistorico);
        lfHistorico.SETTABLEVIEW(lrHistorico);
        lfHistorico.RUNMODAL;
      END;
    END;

    PROCEDURE GetImpIncl@1100217000() : Boolean;
    VAR
      lwInc@1100217000 : Boolean;
    BEGIN
      // GetImpIncl
      // Devuelve true si en el contrato los precios son con IVA incluido

      CLEAR(lwInc);

      CASE Concepto OF
        Concepto::Ingreso : BEGIN
          CLEAR(rConV);
          rConV.SETRANGE("N§ Contrato", "N§ Contrato");
          rConV.FIND('-');
          lwInc := rConV."Impuestos incluidos";
        END;
        Concepto::Coste : BEGIN
          CLEAR(rConC);
          rConC.SETRANGE("N§ Contrato", "N§ Contrato");
          rConC.FIND('-');
          lwInc := rConC."Impuestos incluidos";
        END;
      END;

      EXIT(lwInc);
    END;

    PROCEDURE SetImportes@1100217002();
    VAR
      lwGrpRegIVANeg@1100217000 : Code[10];
    BEGIN
      // SetImportes

      IF Concepto = Concepto::Coste THEN BEGIN
        rPro.GET(Proveedor);
        lwGrpRegIVANeg := rPro."VAT Bus. Posting Group";
      END
      ELSE BEGIN
        rCli.GET("Cliente Operativo"); // AJF 24/08/10
        lwGrpRegIVANeg := rCli."VAT Bus. Posting Group";
      END;

      rConfIVA.GET (lwGrpRegIVANeg, "Grupo registro IVA Producto");

      IF GetImpIncl THEN BEGIN
        "Precio Vehiculo sin impuestos" := ROUND("Precio Vehiculo" / (1 + (rConfIVA."VAT+EC %" / 100)));
        "Precio Pax sin impuestos"      := ROUND("Precio Pax" / (1 + (rConfIVA."VAT+EC %" / 100)));
        "Importe con impuesto"          := Importe;
        "Importe sin impuesto"          := ROUND(Importe / (1 + (rConfIVA."VAT+EC %" / 100)));
      END
      ELSE BEGIN
        "Precio Vehiculo"      := ROUND("Precio Vehiculo sin impuestos" * (1 + (rConfIVA."VAT+EC %" / 100)));
        "Precio Pax"           := ROUND("Precio Pax sin impuestos" * (1 + (rConfIVA."VAT+EC %" / 100)));
        "Importe con impuesto" := ROUND(Importe * (1 + (rConfIVA."VAT+EC %" / 100)));
        "Importe sin impuesto" := Importe;
      END;
      "% IVA" := rConfIVA."VAT+EC %";

      VALIDATE("Cod. Divisa");
    END;

    BEGIN
    {
      ## AJS 23.06.2008, TNU08002

        - He cambiado el nombre del campo Zona trabajo por Zona facturacion

        - He cambiado el FIND('-') + ASCENDING(FALSE) por un FINDLAST

      ## AJS 07.06.2010

        .- Establezco la TableRelation para el campo Grupo registro IVA Producto
    }
    END.
  }
}
