OBJECT Table 7035397 Vuelos x Linea
{
  OBJECT-PROPERTIES
  {
    Date=16/10/09;
    Time=12:30:50;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CLEAR(rVuelLin);
               rVuelLin.ASCENDING(FALSE);
               rVuelLin.SETRANGE(Tipo, Tipo);
               IF rVuelLin.FINDFIRST THEN
                 Num := rVuelLin.Num +1
               ELSE
                 Num := 1;

               Actualiza;
             END;

    OnModify=BEGIN
               Actualiza;
             END;

    OnDelete=BEGIN
               Vuelo:='';
               Actualiza;
             END;

    OnRename=BEGIN
               ERROR(Text0001);
             END;

    CaptionML=ESP=Vuelos x Linea;
    LookupFormID=Form7010521;
    DrillDownFormID=Form7010521;
  }
  FIELDS
  {
    { 1   ;   ;N§ Linea            ;Integer       ;CaptionML=ESP=N§ Linea;
                                                   NotBlank=Yes;
                                                   Description=PK }
    { 3   ;   ;N§ Servicio         ;Code20        ;TableRelation=IF (Tipo=CONST(Servicio)) Servicio."N§ Servicio"
                                                                 ELSE IF (Tipo=CONST(Grupo)) Grupos."Codigo Grupo";
                                                   CaptionML=ESP=N§ Servicio;
                                                   SQL Data Type=Varchar;
                                                   NotBlank=Yes;
                                                   Description=Servicio, Grupos...;
                                                   Editable=No }
    { 4   ;   ;Vuelo               ;Code10        ;TableRelation=IF (Tipo=CONST(Servicio)) "Vuelo x Parte"."Referencia Vuelo" WHERE (N§Parte=FIELD(Parte));
                                                   OnValidate=BEGIN
                                                                CompDupl; // Comprueba la duplicidad de vuelos

                                                                IF Tipo =  Tipo::Servicio THEN BEGIN
                                                                  IF Vuelo <> '' THEN BEGIN
                                                                    IF BuscaVueloParte THEN BEGIN
                                                                      Fecha    := rVuelPar."Fecha Llegada Vuelo";
                                                                      Hora     := rVuelPar.Hora;
                                                                      VALIDATE("E/S" , rVuelPar."E/S");
                                                                      Terminal := rVuelPar.Terminal;
                                                                      IATA     := rVuelPar.IATA;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ESP=Vuelo;
                                                   NotBlank=Yes }
    { 5   ;   ;Tipo                ;Option        ;CaptionML=ESP=Tipo;
                                                   OptionCaptionML=ESP=Servicio,Grupo;
                                                   OptionString=Servicio,Grupo }
    { 6   ;   ;Num                 ;Integer       ;CaptionML=ESP=Num;
                                                   MinValue=1 }
    { 20  ;   ;Parte               ;Code10        ;TableRelation=Parte."N§ Parte";
                                                   CaptionML=ESP=Parte }
    { 21  ;   ;TTOO                ;Code10        ;TableRelation=TTOO.Codigo;
                                                   CaptionML=ESP=TTOO }
    { 22  ;   ;Fecha               ;Date          ;CaptionML=ESP=Fecha }
    { 23  ;   ;Hora                ;Time          ;CaptionML=ESP=Hora }
    { 24  ;   ;E/S                 ;Option        ;OnValidate=VAR
                                                                lrCodSer@1103355000 : Record 7010320;
                                                                lrTipSer@1103355001 : Record 7010319;
                                                              BEGIN
                                                                // Comprobamos la coherencia con el codigo de servicio


                                                                IF "E/S" = "E/S"::"0" THEN
                                                                  EXIT;

                                                                IF Tipo =  Tipo::Servicio THEN BEGIN
                                                                  CLEAR(rSerPar);
                                                                  rSerPar.GET("N§ Servicio","N§ Linea");
                                                                  rSerPar.TESTFIELD("Codigo Servicio");
                                                                  rSerPar.TESTFIELD("Tipo Servicio");

                                                                  lrTipSer.GET(rSerPar."Tipo Servicio");
                                                                  IF lrTipSer."Tipo fijo" <> lrTipSer."Tipo fijo"::Traslado THEN
                                                                    ERROR(Text0003, lrTipSer.Codigo, lrTipSer."Tipo fijo");

                                                                  { JPT 12/02/07 El tipo de orden puede no ser el mismo que el del parte TER
                                                                  lrCodSer.GET(rSerPar."Codigo Servicio");
                                                                  IF lrCodSer."Tipo orden" <> ("E/S" - 1 ) THEN
                                                                    ERROR(Text0002, lrCodSer.Codigo, lrCodSer."Tipo orden");
                                                                  }
                                                                END;
                                                              END;

                                                   CaptionML=ESP=E/S;
                                                   OptionCaptionML=ESP=,Entrada,Salida;
                                                   OptionString=,Entrada,Salida;
                                                   NotBlank=Yes;
                                                   BlankZero=Yes }
    { 25  ;   ;Terminal            ;Code1         ;CaptionML=ESP=Terminal }
    { 26  ;   ;IATA                ;Code10        ;CaptionML=ESP=IATA }
  }
  KEYS
  {
    {    ;Tipo,Num                                ;Clustered=Yes }
    {    ;N§ Servicio,N§ Linea,Vuelo               }
    {    ;N§ Servicio,N§ Linea,Fecha,Hora          }
    {    ;Parte,Vuelo                              }
    {    ;Fecha,Hora                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      rSerPar@1103355000 : Record 7010359;
      rVuelPar@1103355001 : Record 7035335;
      rVuelLin@1103355002 : Record 7035397;
      Text0001@1103355003 : TextConst 'ESP=No es posible renombrar este registro';
      Text0002@1103355004 : TextConst 'ESP=El codigo de servicio %1 es de %2';
      Text0003@1103355005 : TextConst 'ESP=El tipo de servicio %1 es de %2';
      Text0004@1103355006 : TextConst 'ESP=El vuelo %1 Ya existe';
      rItiGR@1103355007 : Record 7035381;

    PROCEDURE Actualiza@1103355000();
    VAR
      lwVuelos@1103355000 : Text[150];
    BEGIN
      // Actualiza

      // Concatenamos los vuelos de la linea
      CLEAR(lwVuelos);
      CLEAR(rVuelLin);
      rVuelLin.SETCURRENTKEY("N§ Servicio", "N§ Linea");
      rVuelLin.SETRANGE(Tipo         , Tipo);
      rVuelLin.SETRANGE("N§ Servicio", "N§ Servicio");
      rVuelLin.SETRANGE("N§ Linea"   , "N§ Linea");
      rVuelLin.SETFILTER(Num ,'<>%1', Num);
      IF rVuelLin.FINDSET THEN BEGIN
        REPEAT
          lwVuelos += rVuelLin.Vuelo + ',';
        UNTIL rVuelLin.NEXT=0;
        IF Vuelo <> '' THEN
          lwVuelos += Vuelo + ',';
      END;


      CASE Tipo OF
        Tipo::Servicio : BEGIN
          IF rSerPar.GET("N§ Servicio","N§ Linea") THEN BEGIN
            Parte := rSerPar."N§ Parte";
            TTOO       := rSerPar.Touroperador;
          END
          ELSE
            EXIT;

          IF Vuelo <> '' THEN BEGIN
            IF NOT BuscaVueloParte THEN BEGIN
              CLEAR(rVuelPar);
              rVuelPar."N§Parte"            := Parte;
              rVuelPar."Referencia Vuelo"   := Vuelo;
              rVuelPar."Codigo Touroperador":= TTOO;
              rVuelPar."Fecha Traslado"     := Fecha;
              rVuelPar.INSERT;
            END;
            rVuelPar."Fecha Llegada Vuelo"  := Fecha;
            rVuelPar.Hora                   := Hora;
            rVuelPar.IATA                   := IATA;
            rVuelPar.Terminal               := Terminal;
            rVuelPar."E/S"                  := "E/S";
            rVuelPar.MODIFY;

            // Modificamos tambien todas las linea del mismo vuelo
            CLEAR(rVuelLin);
            rVuelLin.SETCURRENTKEY(Parte , Vuelo);
            rVuelLin.SETRANGE(Parte, Parte);
            rVuelLin.SETRANGE(Vuelo     , Vuelo);
            rVuelLin.SETRANGE(Tipo      , rVuelLin.Tipo::Servicio);
            rVuelLin.SETFILTER(Num ,'<>%1', Num);
            IF rVuelLin.FINDSET(TRUE) THEN BEGIN
              REPEAT
                rVuelLin.Fecha    := Fecha;
                rVuelLin.Hora     := Hora;
                rVuelLin."E/S"    := "E/S";
                rVuelLin.Terminal := Terminal;
                rVuelLin.IATA     := IATA;
                rVuelLin.MODIFY;
              UNTIL rVuelLin.NEXT=0;
            END;

            IF lwVuelos <> '' THEN BEGIN
              rSerPar.VALIDATE(Vuelo, lwVuelos);
              rSerPar.MODIFY;
            END;
          END;
        END;

        rVuelLin.Tipo::Grupo: BEGIN
          IF lwVuelos <> '' THEN BEGIN
            CLEAR(rItiGR);
            rItiGR.GET("N§ Servicio","N§ Linea");
            rItiGR.VALIDATE(Vuelos, lwVuelos);
            rItiGR.MODIFY
          END;
        END;
      END;
    END;

    PROCEDURE BuscaVueloParte@1103355001() : Boolean;
    VAR
      lwOk@1103355000 : Boolean;
    BEGIN
      // BuscaVueloParte

      CLEAR(rVuelPar);
      lwOk := rVuelPar.GET(Parte,Vuelo,TTOO);
      IF NOT lwOk THEN BEGIN
        rVuelPar.SETRANGE("N§Parte"          , Parte);
        rVuelPar.SETRANGE("Referencia Vuelo" , Vuelo);
        lwOk := rVuelPar.FINDFIRST;
      END;

      EXIT(lwOk);
    END;

    PROCEDURE CompDupl@1103355017();
    BEGIN
      // CompDupl
      // Se Comprueba la coherencia y la duplicidad

      IF Vuelo ='' THEN
        EXIT;

      CLEAR(rVuelLin);

      SETCURRENTKEY("N§ Servicio","N§ Linea",Vuelo);
      rVuelLin.SETRANGE("N§ Servicio", "N§ Servicio");
      rVuelLin.SETRANGE("N§ Linea"   , "N§ Linea");
      rVuelLin.SETRANGE(Vuelo , Vuelo);
      rVuelLin.SETFILTER(Num,  '<>%1', Num);
      IF rVuelLin.FINDFIRST THEN
        ERROR(Text0004, Vuelo)
    END;

    BEGIN
    END.
  }
}
