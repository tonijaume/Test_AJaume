OBJECT Table 336 Tracking Specification
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               TESTFIELD("Quantity Handled (Base)",0);
               TESTFIELD("Quantity Invoiced (Base)",0);
             END;

    CaptionML=[ENU=Tracking Specification;
               ESP=Especificaci¢n seguimiento];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ESP=N§ mov.] }
    { 2   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto] }
    { 3   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n] }
    { 4   ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Quantity (Base)" * "Quantity Handled (Base)" < 0) OR
                                                                   ((ABS("Quantity (Base)") < ABS("Quantity Handled (Base)")))
                                                                THEN
                                                                  FIELDERROR("Quantity (Base)",STRSUBSTNO(Text002,FIELDCAPTION("Quantity Handled (Base)")));

                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                CheckSerialNoQty;
                                                                InitQtyToShip;
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base)];
                                                   DecimalPlaces=0:5 }
    { 7   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 8   ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              ESP=Fecha creaci¢n] }
    { 10  ;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              ESP=Tipo procedencia mov.] }
    { 11  ;   ;Source Subtype      ;Option        ;CaptionML=[ENU=Source Subtype;
                                                              ESP=Subtipo origen];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    ESP=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10 }
    { 12  ;   ;Source ID           ;Code20        ;CaptionML=[ENU=Source ID;
                                                              ESP=Id. origen] }
    { 13  ;   ;Source Batch Name   ;Code10        ;CaptionML=[ENU=Source Batch Name;
                                                              ESP=Nombre secci¢n origen] }
    { 14  ;   ;Source Prod. Order Line;Integer    ;CaptionML=[ENU=Source Prod. Order Line;
                                                              ESP=L¡nea O.P. origen] }
    { 15  ;   ;Source Ref. No.     ;Integer       ;CaptionML=[ENU=Source Ref. No.;
                                                              ESP=N§ ref. origen] }
    { 16  ;   ;Appl.-to Item Entry ;Integer       ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ESP=Liq. por n§ orden producto] }
    { 17  ;   ;Transfer Item Entry No.;Integer    ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Transfer Item Entry No.;
                                                              ESP=N§ mov. prod. transferencia] }
    { 24  ;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                IF "Serial No." <> xRec."Serial No." THEN BEGIN
                                                                  TESTFIELD("Quantity Handled (Base)",0);
                                                                  IF IsReclass THEN
                                                                    "New Serial No." := "Serial No.";
                                                                  WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                  IF NOT SkipSerialNoQtyValidation THEN
                                                                    CheckSerialNoQty;
                                                                  InitExpirationDate;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Serial No.;
                                                              ESP=N§ serie] }
    { 28  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              ESP=Positivo] }
    { 29  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 40  ;   ;Warranty Date       ;Date          ;CaptionML=[ENU=Warranty Date;
                                                              ESP=Fecha garant¡a] }
    { 41  ;   ;Expiration Date     ;Date          ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                IF "Buffer Status2" = "Buffer Status2"::"ExpDate blocked" THEN BEGIN
                                                                  "Expiration Date" := xRec."Expiration Date";
                                                                  MESSAGE(Text004);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Expiration Date;
                                                              ESP=Fecha caducidad] }
    { 50  ;   ;Qty. to Handle (Base);Decimal      ;OnValidate=BEGIN
                                                                IF ("Qty. to Handle (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Handle (Base)") > ABS("Quantity (Base)")
                                                                   - "Quantity Handled (Base)")
                                                                THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    "Quantity (Base)" - "Quantity Handled (Base)");

                                                                InitQtyToInvoice;
                                                                "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Handle (Base);
                                                              ESP=Cdad. a manipular (base)];
                                                   DecimalPlaces=0:5 }
    { 51  ;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Invoice (Base)") > ABS("Qty. to Handle (Base)"
                                                                   + "Quantity Handled (Base)" - "Quantity Invoiced (Base)"))
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    "Qty. to Handle (Base)" + "Quantity Handled (Base)"- "Quantity Invoiced (Base)");
                                                                "Qty. to Invoice" := CalcQty("Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice (Base);
                                                              ESP=Cdad. a facturar (base)];
                                                   DecimalPlaces=0:5 }
    { 52  ;   ;Quantity Handled (Base);Decimal    ;CaptionML=[ENU=Quantity Handled (Base);
                                                              ESP=Cdad. manipulada (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 53  ;   ;Quantity Invoiced (Base);Decimal   ;CaptionML=[ENU=Quantity Invoiced (Base);
                                                              ESP=Cdad. facturada (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 60  ;   ;Qty. to Handle      ;Decimal       ;CaptionML=[ENU=Qty. to Handle;
                                                              ESP=Cdad.a manipular];
                                                   DecimalPlaces=0:5 }
    { 61  ;   ;Qty. to Invoice     ;Decimal       ;CaptionML=[ENU=Qty. to Invoice;
                                                              ESP=Cdad. a facturar];
                                                   DecimalPlaces=0:5 }
    { 70  ;   ;Buffer Status       ;Option        ;CaptionML=[ENU=Buffer Status;
                                                              ESP=Estado mem. int.];
                                                   OptionCaptionML=[ENU=" ,MODIFY,INSERT";
                                                                    ESP=" ,MODIFICAR,INSERTAR"];
                                                   OptionString=[ ,MODIFY,INSERT];
                                                   Editable=No }
    { 71  ;   ;Buffer Status2      ;Option        ;CaptionML=[ENU=Buffer Status2;
                                                              ESP=Estado mem. int.2];
                                                   OptionCaptionML=[ENU=,ExpDate blocked;
                                                                    ESP=,FechaFinalizaci¢n bloqueada];
                                                   OptionString=,ExpDate blocked;
                                                   Editable=No }
    { 72  ;   ;Buffer Value1       ;Decimal       ;CaptionML=[ENU=Buffer Value1;
                                                              ESP=Mem. interna1];
                                                   Editable=No }
    { 73  ;   ;Buffer Value2       ;Decimal       ;CaptionML=[ENU=Buffer Value2;
                                                              ESP=Mem. interna2];
                                                   Editable=No }
    { 74  ;   ;Buffer Value3       ;Decimal       ;CaptionML=[ENU=Buffer Value3;
                                                              ESP=Mem. interna3];
                                                   Editable=No }
    { 75  ;   ;Buffer Value4       ;Decimal       ;CaptionML=[ENU=Buffer Value4;
                                                              ESP=Mem. interna4];
                                                   Editable=No }
    { 76  ;   ;Buffer Value5       ;Decimal       ;CaptionML=[ENU=Buffer Value5;
                                                              ESP=Mem. interna5];
                                                   Editable=No }
    { 80  ;   ;New Serial No.      ;Code20        ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=New Serial No.;
                                                              ESP=Nuevo n§ serie] }
    { 81  ;   ;New Lot No.         ;Code20        ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=New Lot No.;
                                                              ESP=Nuevo n§ lote] }
    { 5400;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                IF "Lot No." <> xRec."Lot No." THEN BEGIN
                                                                  TESTFIELD("Quantity Handled (Base)",0);
                                                                  IF IsReclass THEN
                                                                    "New Lot No." := "Lot No.";
                                                                  WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                  InitExpirationDate;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Lot No.;
                                                              ESP=N§ lote] }
    { 5401;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 5402;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n] }
    { 5811;   ;Appl.-from Item Entry;Integer      ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Appl.-from Item Entry" = 0 THEN
                                                                  EXIT;

                                                                CASE "Source Type" OF
                                                                  DATABASE::"Sales Line":
                                                                    IF (("Source Subtype" IN [3,5]) AND ("Quantity (Base)" < 0)) OR
                                                                       (("Source Subtype" IN [1,2]) AND ("Quantity (Base)" > 0)) //sale
                                                                    THEN
                                                                      FIELDERROR("Quantity (Base)");
                                                                  DATABASE::"Item Journal Line":
                                                                    IF (("Source Subtype" IN [0,2,6]) AND ("Quantity (Base)" < 0)) OR
                                                                       (("Source Subtype" IN [1,3,4,5]) AND ("Quantity (Base)" > 0))
                                                                    THEN
                                                                      FIELDERROR("Quantity (Base)");
                                                                  DATABASE::"Service Line":
                                                                    IF (("Source Subtype" IN [3]) AND ("Quantity (Base)" < 0)) OR
                                                                       (("Source Subtype" IN [1,2]) AND ("Quantity (Base)" > 0))
                                                                    THEN
                                                                      FIELDERROR("Quantity (Base)");
                                                                  ELSE
                                                                    FIELDERROR("Source Subtype");
                                                                END;

                                                                IF ("Serial No." = '') AND ("Lot No." = '') THEN BEGIN
                                                                  TESTFIELD("Serial No.");
                                                                  TESTFIELD("Lot No.");
                                                                END;
                                                                ItemLedgEntry.GET("Appl.-from Item Entry");
                                                                ItemLedgEntry.SETRANGE("Item No.","Item No.");
                                                                ItemLedgEntry.TESTFIELD(Positive,FALSE);
                                                                IF ItemLedgEntry."Shipped Qty. Not Returned" + ABS("Qty. to Handle (Base)") > 0 THEN
                                                                  ItemLedgEntry.FIELDERROR("Shipped Qty. Not Returned");
                                                                ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
                                                                ItemLedgEntry.TESTFIELD("Serial No.","Serial No.");
                                                                ItemLedgEntry.TESTFIELD("Lot No.","Lot No.");
                                                              END;

                                                   OnLookup=VAR
                                                              ItemLedgEntry@1000 : Record 32;
                                                            BEGIN
                                                              ItemLedgEntry.SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");
                                                              ItemLedgEntry.SETRANGE("Item No.","Item No.");
                                                              ItemLedgEntry.SETRANGE(Positive,FALSE);
                                                              IF "Location Code" <> '' THEN
                                                                ItemLedgEntry.SETRANGE("Location Code","Location Code");
                                                              ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
                                                              ItemLedgEntry.SETRANGE("Serial No.","Serial No.");
                                                              ItemLedgEntry.SETRANGE("Lot No.","Lot No.");
                                                              ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
                                                              IF FORM.RUNMODAL(FORM::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN
                                                                VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
                                                            END;

                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ESP=Liquid.-de mov. pdto];
                                                   MinValue=0 }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ESP=Correcci¢n] }
    { 6505;   ;New Expiration Date ;Date          ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=New Expiration Date;
                                                              ESP=Nueva fecha caducidad] }
    { 7300;   ;Quantity actual Handled (Base);Decimal;
                                                   CaptionML=[ENU=Quantity actual Handled (Base);
                                                              ESP=Cdad. actual manipulada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Source ID,Source Type,Source Subtype,Source Batch Name,Source Prod. Order Line,Source Ref. No.;
                                                   SumIndexFields=Qty. to Handle (Base),Qty. to Invoice (Base),Quantity Handled (Base),Quantity Invoiced (Base);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Lot No.,Serial No.                       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1003 : TextConst 'ENU=You cannot invoice more than %1 units.;ESP=No se pueden facturar m s de %1 unidades.';
      Text001@1001 : TextConst 'ENU=You cannot handle more than %1 units.;ESP=No puede manipular m s de %1 unidades.';
      Text002@1000 : TextConst 'ENU=must not be less than %1;ESP=No puede ser inferior a %1.';
      Text003@1002 : TextConst 'ENU=%1 must be -1, 0 or 1 when %2 is stated.;ESP=%1 debe ser -1, 0 o 1 cuendo est  seleccionado %2.';
      Text004@1004 : TextConst 'ENU=Expiration date has been established by existing entries and cannot be changed.;ESP=La fecha caducidad se estableci¢ con los movimientos existentes y no se puede cambiar.';
      WMSManagement@1005 : Codeunit 7302;
      Text005@1006 : TextConst 'ENU=%1 in %2 for %3 %4, %5: %6, %7: %8 is currently %9. It must be %10.;ESP=%1 en %2 para %3 %4, %5: %6, %7: %8 es actualmente %9. Debe ser %10.';
      SkipSerialNoQtyValidation@1202 : Boolean;

    PROCEDURE InitQtyToShip@15();
    BEGIN
      "Qty. to Handle (Base)" := "Quantity (Base)" - "Quantity Handled (Base)";
      "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice (Base)" := "Quantity Handled (Base)" + "Qty. to Handle (Base)" - "Quantity Invoiced (Base)";
      "Qty. to Invoice" := CalcQty("Qty. to Invoice (Base)");
    END;

    PROCEDURE CheckSerialNoQty@1();
    BEGIN
      IF "Serial No." <> '' THEN
        IF NOT ("Quantity (Base)" IN [-1,0,1]) THEN
          ERROR(Text003,FIELDCAPTION("Quantity (Base)"),FIELDCAPTION("Serial No."));
    END;

    PROCEDURE CopyPointerFilters@3(VAR ReservEntry@1000 : Record 337);
    BEGIN
      ReservEntry.COPYFILTER("Source Type","Source Type");
      ReservEntry.COPYFILTER("Source Subtype","Source Subtype");
      ReservEntry.COPYFILTER("Source ID","Source ID");
      ReservEntry.COPYFILTER("Source Batch Name","Source Batch Name");
      ReservEntry.COPYFILTER("Source Prod. Order Line","Source Prod. Order Line");
      ReservEntry.COPYFILTER("Source Ref. No.","Source Ref. No.");
    END;

    PROCEDURE CalcQty@14(BaseQty@1000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      EXIT(ROUND(BaseQty/"Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE InitExpirationDate@2();
    VAR
      ItemTrackingMgt@1001 : Codeunit 6500;
      ExpDate@1000 : Date;
      EntriesExist@1002 : Boolean;
    BEGIN
      IF ("Serial No." = xRec."Serial No.") AND ("Lot No." = xRec."Lot No.") THEN
        EXIT;

      "Expiration Date" := 0D;

      ExpDate := ItemTrackingMgt.ExistingExpirationDate("Item No.","Variant Code","Lot No.","Serial No.",FALSE,EntriesExist);
      IF EntriesExist THEN BEGIN
        "Expiration Date" := ExpDate;
        "Buffer Status2" := "Buffer Status2"::"ExpDate blocked";
      END ELSE
        "Buffer Status2" := 0;

      IF IsReclass THEN BEGIN
        "New Expiration Date":= "Expiration Date";
        "Warranty Date" := ItemTrackingMgt.ExistingWarrantyDate("Item No.","Variant Code","Lot No.","Serial No.",EntriesExist);
      END;
    END;

    PROCEDURE IsReclass@4() : Boolean;
    BEGIN
      EXIT(("Source Type"= DATABASE::"Item Journal Line") AND ("Source Subtype" = 4));
    END;

    PROCEDURE TestFieldError@5(FieldCaptionText@1000 : Text[80];CurrFieldValue@1001 : Decimal;CompareValue@1002 : Decimal);
    BEGIN
      IF CurrFieldValue = CompareValue THEN
        EXIT;

      ERROR(Text005,
            FieldCaptionText,
            TABLECAPTION,
            FIELDCAPTION("Item No."),
            "Item No.",
            FIELDCAPTION("Serial No."),
            "Serial No.",
            FIELDCAPTION("Lot No."),
            "Lot No.",
            CurrFieldValue,
            CompareValue);
    END;

    PROCEDURE SetSkipSerialNoQtyValidation@7(NewVal@1000 : Boolean);
    BEGIN
      SkipSerialNoQtyValidation := NewVal;
    END;

    BEGIN
    END.
  }
}
