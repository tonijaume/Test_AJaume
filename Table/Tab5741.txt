OBJECT Table 5741 Transfer Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnInsert=VAR
               TransLine2@1000 : Record 5741;
             BEGIN
               TestStatusOpen;
               TransLine2.RESET;
               TransLine2.SETFILTER("Document No.",TransHeader."No.");
               IF TransLine2.FIND('+') THEN
                 "Line No." := TransLine2."Line No." + 10000;
               ReserveTransferLine.VerifyQuantity(Rec,xRec);
               DocDim.LOCKTABLE;
               DimMgt.InsertDocDim(
                 DATABASE::"Transfer Line",DocDim."Document Type"::" ","Document No.","Line No.",
                 "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
             END;

    OnModify=BEGIN
               ReserveTransferLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               ItemChargeAssgntPurch@1000 : Record 5805;
             BEGIN
               TestStatusOpen;

               TESTFIELD("Quantity Shipped","Quantity Received");
               TESTFIELD("Qty. Shipped (Base)","Qty. Received (Base)");
               CALCFIELDS("Reserved Qty. Inbnd. (Base)","Reserved Qty. Outbnd. (Base)");
               TESTFIELD("Reserved Qty. Inbnd. (Base)",0);
               TESTFIELD("Reserved Qty. Outbnd. (Base)",0);

               DocDim.LOCKTABLE;

               ReserveTransferLine.DeleteLine(Rec);
               WhseValidateSourceLine.TransLineDelete(Rec);

               ItemChargeAssgntPurch.SETCURRENTKEY(
                 "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",ItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
               ItemChargeAssgntPurch.DELETEALL(TRUE);

               DimMgt.DeleteDocDim(DATABASE::"Transfer Line",DocDim."Document Type"::" ","Document No.","Line No.");
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Transfer Line;
               ESP=L¡n. transferencia];
    PasteIsValid=No;
    LookupFormID=Form5749;
    DrillDownFormID=Form5749;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 3   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=VAR
                                                                TempTransferLine@1000 : TEMPORARY Record 5741;
                                                              BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                CALCFIELDS("Reserved Qty. Inbnd. (Base)");
                                                                TESTFIELD("Reserved Qty. Inbnd. (Base)",0);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);

                                                                TempTransferLine := Rec;
                                                                INIT;
                                                                "Item No." := TempTransferLine."Item No.";
                                                                IF "Item No." = '' THEN
                                                                  EXIT;

                                                                GetTransHeader;
                                                                GetItem;
                                                                GetDefaultBin("Transfer-from Code","Transfer-to Code");

                                                                Item.TESTFIELD(Blocked,FALSE);

                                                                VALIDATE(Description,Item.Description);
                                                                VALIDATE("Gen. Prod. Posting Group",Item."Gen. Prod. Posting Group");
                                                                VALIDATE("Inventory Posting Group",Item."Inventory Posting Group");
                                                                VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                VALIDATE("Gross Weight",Item."Gross Weight");
                                                                VALIDATE("Net Weight",Item."Net Weight");
                                                                VALIDATE("Unit Volume",Item."Unit Volume");
                                                                VALIDATE("Units per Parcel",Item."Units per Parcel");
                                                                VALIDATE("Description 2",Item."Description 2");
                                                                VALIDATE(Quantity,xRec.Quantity);
                                                                "Item Category Code" :=  Item."Item Category Code";
                                                                "Product Group Code" :=  Item."Product Group Code";

                                                                CreateDim(DATABASE::Item,"Item No.");
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto] }
    { 4   ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                IF Quantity <> 0 THEN
                                                                  TESTFIELD("Item No.");
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF ((Quantity * "Quantity Shipped") < 0) OR
                                                                   ((ABS(Quantity) < ABS("Quantity Shipped")))
                                                                THEN
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text002,FIELDCAPTION("Quantity Shipped")));
                                                                IF (("Quantity (Base)" * "Qty. Shipped (Base)") < 0) OR
                                                                   ((ABS("Quantity (Base)") < ABS("Qty. Received (Base)")))
                                                                THEN
                                                                  FIELDERROR("Quantity (Base)",STRSUBSTNO(Text002,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToShip;
                                                                InitQtyToReceive;
                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                ReserveTransferLine.VerifyQuantity(Rec,xRec);

                                                                UpdateWithWarehouseShipReceive;

                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5   ;   ;Unit of Measure     ;Text10        ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              ESP=Unidad medida] }
    { 6   ;   ;Qty. to Ship        ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Qty. to Ship" <> 0)
                                                                THEN
                                                                  CheckWarehouse("Transfer-from Code",FALSE);

                                                                IF ("Qty. to Ship" > "Outstanding Quantity") THEN
                                                                  IF "Outstanding Quantity" > 0 THEN
                                                                    ERROR(
                                                                      Text005,
                                                                      "Outstanding Quantity")
                                                                  ELSE
                                                                    ERROR(Text006);
                                                                "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship;
                                                              ESP=Cantidad a enviar];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7   ;   ;Qty. to Receive     ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Qty. to Receive" <> 0)
                                                                THEN
                                                                  CheckWarehouse("Transfer-to Code",TRUE);

                                                                IF ("Qty. to Receive" > "Qty. in Transit") THEN
                                                                  IF "Qty. in Transit" > 0 THEN
                                                                    ERROR(
                                                                      Text008,
                                                                      "Qty. in Transit")
                                                                  ELSE
                                                                    ERROR(Text009);
                                                                "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive;
                                                              ESP=Cantidad a recibir];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 8   ;   ;Quantity Shipped    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Shipped (Base)" := CalcBaseQty("Quantity Shipped");
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToShip;
                                                                InitQtyToReceive;
                                                              END;

                                                   CaptionML=[ENU=Quantity Shipped;
                                                              ESP=Cantidad enviada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 9   ;   ;Quantity Received   ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Received (Base)" := CalcBaseQty("Quantity Received");
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToReceive;
                                                              END;

                                                   CaptionML=[ENU=Quantity Received;
                                                              ESP=Cantidad recibida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 10  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Open,Released;
                                                                    ESP=Abierto,Lanzado];
                                                   OptionString=Open,Released;
                                                   Editable=No }
    { 11  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1];
                                                   CaptionClass='1,2,1' }
    { 12  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2];
                                                   CaptionClass='1,2,2' }
    { 13  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 14  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ESP=Grupo contable producto] }
    { 15  ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ESP=Grupo contable existencias] }
    { 16  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 17  ;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ESP=Cdad. pendiente (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 18  ;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship (Base);
                                                              ESP=Cdad. a enviar (base)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 19  ;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              ESP=Cdad. enviada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive (Base);
                                                              ESP=Cdad. a recibir (base)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Qty. Received (Base);Decimal       ;CaptionML=[ENU=Qty. Received (Base);
                                                              ESP=Cdad. recibida (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 22  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 23  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                UnitOfMeasure@1000 : Record 204;
                                                                UOMMgt@1001 : Codeunit 5402;
                                                              BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Qty. Received (Base)",0);
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  IF NOT UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                END;
                                                                GetItem;
                                                                VALIDATE("Qty. per Unit of Measure",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"));
                                                                "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida] }
    { 24  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ESP=Cantidad pendiente];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 25  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ESP=Peso bruto];
                                                   DecimalPlaces=0:5 }
    { 26  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ESP=Peso neto];
                                                   DecimalPlaces=0:5 }
    { 27  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ESP=Volumen];
                                                   DecimalPlaces=0:5 }
    { 30  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record 5401;
                                                              BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);

                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;

                                                                GetDefaultBin("Transfer-from Code","Transfer-to Code");
                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                "Description 2" := ItemVariant."Description 2";

                                                                CheckItemAvailable(FIELDNO("Variant Code"));
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 31  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ESP=Unidades por lote];
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2] }
    { 33  ;   ;In-Transit Code     ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                              END;

                                                   CaptionML=[ENU=In-Transit Code;
                                                              ESP=C¢d. en tr nsito];
                                                   Editable=No }
    { 34  ;   ;Qty. in Transit     ;Decimal       ;CaptionML=[ENU=Qty. in Transit;
                                                              ESP=Cdad. en tr nsito];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 35  ;   ;Qty. in Transit (Base);Decimal     ;CaptionML=[ENU=Qty. in Transit (Base);
                                                              ESP=Cdad. en tr nsito (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 36  ;   ;Transfer-from Code  ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                IF "Transfer-from Code" <> xRec."Transfer-from Code" THEN BEGIN
                                                                  "Transfer-from Bin Code" := '';
                                                                  GetDefaultBin("Transfer-from Code",'');
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Transfer-from Code"));
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                UpdateWithWarehouseShipReceive;
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Transfer-from Code;
                                                              ESP=Transfer. desde-c¢d.];
                                                   Editable=No }
    { 37  ;   ;Transfer-to Code    ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                IF "Transfer-to Code" <> xRec."Transfer-to Code" THEN BEGIN
                                                                  "Transfer-To Bin Code" := '';
                                                                  GetDefaultBin('',"Transfer-to Code");
                                                                END;

                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                UpdateWithWarehouseShipReceive;
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Transfer-to Code;
                                                              ESP=Transfer. a-c¢d.];
                                                   Editable=No }
    { 38  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code", "Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipment Date"));
                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.TransferLineCheck(Rec,CurrFieldNo <> 0,0);
                                                              END;

                                                   CaptionML=[ENU=Shipment Date;
                                                              ESP=Fecha env¡o] }
    { 39  ;   ;Receipt Date        ;Date          ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcShipmentDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code", "Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipment Date"));
                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.TransferLineCheck(Rec,CurrFieldNo <> 0,1);
                                                              END;

                                                   CaptionML=[ENU=Receipt Date;
                                                              ESP=Fecha recepci¢n] }
    { 40  ;   ;Derived From Line No.;Integer      ;TableRelation="Transfer Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Derived From Line No.;
                                                              ESP=Proviene de n§ l¡nea] }
    { 41  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ESP=C¢d. transportista] }
    { 42  ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.GetShippingTime(
                                                                  "Transfer-from Code","Transfer-to Code",
                                                                  "Shipping Agent Code","Shipping Agent Service Code",
                                                                  "Shipping Time");
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code", "Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipping Agent Service Code"));
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ESP=C¢d. servicio transportista] }
    { 50  ;   ;Reserved Quantity Inbnd.;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(5741),
                                                                                                       Source Subtype=CONST(1),
                                                                                                       Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Inbnd.;
                                                              ESP=Cdad. reservada entrada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 51  ;   ;Reserved Quantity Outbnd.;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(5741),
                                                                                                        Source Subtype=CONST(0),
                                                                                                        Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Outbnd.;
                                                              ESP=Cdad. reservada salida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 52  ;   ;Reserved Qty. Inbnd. (Base);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Source Type=CONST(5741),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Inbnd. (Base);
                                                              ESP=Cdad. reservada entrada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 53  ;   ;Reserved Qty. Outbnd. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(5741),
                                                                                                                 Source Subtype=CONST(0),
                                                                                                                 Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Outbnd. (Base);
                                                              ESP=Cdad. reservada salida (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 54  ;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code", "Shipping Agent Service Code");
                                                              END;

                                                   CaptionML=[ENU=Shipping Time;
                                                              ESP=Tiempo env¡o] }
    { 55  ;   ;Reserved Quantity Shipped;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FILTER(<>0),
                                                                                                       Source Type=CONST(5741),
                                                                                                       Source Subtype=CONST(1),
                                                                                                       Source Prod. Order Line=FIELD(Line No.),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Shipped;
                                                              ESP=Env¡o de cantidad reservada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 56  ;   ;Reserved Qty. Shipped (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FILTER(<>0),
                                                                                                                Source Type=CONST(5741),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Source Prod. Order Line=FIELD(Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Shipped (Base);
                                                              ESP=Env¡o cdad. reservada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5704;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ESP=C¢d. categor¡a producto] }
    { 5707;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ESP=C¢d. grupo producto] }
    { 5750;   ;Whse. Inbnd. Otsdg. Qty (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(5741),
                                                                                                                             Source Subtype=CONST(1),
                                                                                                                             Source No.=FIELD(Document No.),
                                                                                                                             Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse. Inbnd. Otsdg. Qty (Base);
                                                              ESP=Cdad. pdte. entrada alm.(base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5751;   ;Whse Outbnd. Otsdg. Qty (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(5741),
                                                                                                                              Source Subtype=CONST(0),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse Outbnd. Otsdg. Qty (Base);
                                                              ESP=Cdad. pdte. salida alm. (base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=[ENU=Completely Shipped;
                                                              ESP=Enviado completamente];
                                                   Editable=No }
    { 5753;   ;Completely Received ;Boolean       ;CaptionML=[ENU=Completely Received;
                                                              ESP=Recibido completamente];
                                                   Editable=No }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code", "Shipping Agent Service Code");
                                                              END;

                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ESP=Tiempo manip. alm. salida] }
    { 5794;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code", "Shipping Agent Service Code");
                                                              END;

                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ESP=Tiempo manip. alm. entrada] }
    { 7300;   ;Transfer-from Bin Code;Code20      ;TableRelation="Bin Content"."Bin Code" WHERE (Location Code=FIELD(Transfer-from Code),
                                                                                                 Item No.=FIELD(Item No.),
                                                                                                 Variant Code=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                IF "Transfer-from Bin Code" <> xRec."Transfer-from Bin Code" THEN BEGIN
                                                                  TESTFIELD("Transfer-from Code");
                                                                  IF "Transfer-from Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Transfer-from Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                    GetBin("Transfer-from Code","Transfer-from Bin Code");
                                                                    TESTFIELD("Transfer-from Code",Bin."Location Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Transfer-from Bin Code;
                                                              ESP=Transfer.desde-c¢d. ubic.] }
    { 7301;   ;Transfer-To Bin Code;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Transfer-to Code),
                                                                                 Item Filter=FIELD(Item No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                IF "Transfer-To Bin Code" <> xRec."Transfer-To Bin Code" THEN BEGIN
                                                                  TESTFIELD("Transfer-to Code");
                                                                  IF "Transfer-To Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Transfer-to Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                    GetBin("Transfer-to Code","Transfer-To Bin Code");
                                                                    TESTFIELD("Transfer-to Code",Bin."Location Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Transfer-To Bin Code;
                                                              ESP=Transfer.a-c¢d. ubic.] }
    { 99000755;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                IF "Planning Flexibility" <> xRec."Planning Flexibility" THEN
                                                                  ReserveTransferLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=[ENU=Planning Flexibility;
                                                              ESP=Flexib. planificaci¢n];
                                                   OptionCaptionML=[ENU=Unlimited,None;
                                                                    ESP=Ilimitada,Ninguna];
                                                   OptionString=Unlimited,None }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Transfer-to Code,Status,Derived From Line No.,Item No.,Variant Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Receipt Date,In-Transit Code;
                                                   SumIndexFields=Qty. in Transit (Base),Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Transfer-from Code,Status,Derived From Line No.,Item No.,Variant Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Shipment Date,In-Transit Code;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Item No.                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      Text002@1002 : TextConst 'ENU=must not be less than %1;ESP=No puede ser inferior a %1.';
      Text003@1003 : TextConst 'ENU="Warehouse %1 is required for %2 = %3.";ESP="Se requiere almacn %1 para %2 = %3."';
      Text004@1004 : TextConst 'ENU=\The entered information will be disregarded by warehouse operations.;ESP=\La informaci¢n introducida ser  ignorada por operaciones almacn.';
      Text005@1005 : TextConst 'ENU=You cannot ship more than %1 units.;ESP=No se pueden enviar m s de %1 unidades.';
      Text006@1006 : TextConst 'ENU=All items have been shipped.;ESP=Todos los prod. enviados.';
      Text008@1008 : TextConst 'ENU=You cannot receive more than %1 units.;ESP=No se pueden recibir m s de %1 unidades.';
      Text009@1009 : TextConst 'ENU=No items are currently in transit.;ESP=No hay productos en tr nsito.';
      Text010@1010 : TextConst 'ENU=Change %1 from %2 to %3?;ESP=¨Desea cambiar %1 de %2 a %3?';
      Text011@1011 : TextConst 'ENU=Outbound,Inbound;ESP=Salida,Entrada';
      TransferRoute@1012 : Record 5742;
      Item@1013 : Record 27;
      TransHeader@1014 : Record 5740;
      Location@1016 : Record 14;
      DocDim@1023 : Record 357;
      Bin@1000 : Record 7354;
      Reservation@1018 : Form 498;
      DimMgt@1019 : Codeunit 408;
      WhseValidateSourceLine@1022 : Codeunit 5777;
      ReserveTransferLine@1024 : Codeunit 99000836;
      CheckDateConflict@1025 : Codeunit 99000815;
      WMSManagement@1015 : Codeunit 7302;
      TrackingBlocked@1007 : Boolean;

    LOCAL PROCEDURE InitOutstandingQty@16();
    BEGIN
      "Outstanding Quantity" := Quantity - "Quantity Shipped";
      "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
      "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
    END;

    LOCAL PROCEDURE InitQtyToShip@15();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    END;

    LOCAL PROCEDURE InitQtyToReceive@2();
    BEGIN
      "Qty. to Receive" := "Qty. in Transit";
      "Qty. to Receive (Base)" := "Qty. in Transit (Base)";
    END;

    LOCAL PROCEDURE InitQtyInTransit@4();
    BEGIN
      "Qty. in Transit" := "Quantity Shipped" - "Quantity Received";
      "Qty. in Transit (Base)" := "Qty. Shipped (Base)" - "Qty. Received (Base)";
      "Completely Received" := ("Quantity Shipped" <> 0) AND ("Qty. in Transit" = 0);
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetTransHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document No." <> TransHeader."No.") THEN
        TransHeader.GET("Document No.");

      TransHeader.TESTFIELD("Shipment Date");
      TransHeader.TESTFIELD("Receipt Date");
      TransHeader.TESTFIELD("Transfer-from Code");
      TransHeader.TESTFIELD("Transfer-to Code");
      TransHeader.TESTFIELD("In-Transit Code");
      "In-Transit Code" := TransHeader."In-Transit Code";
      "Transfer-from Code" := TransHeader."Transfer-from Code";
      "Transfer-to Code" := TransHeader."Transfer-to Code";
      "Shipment Date" := TransHeader."Shipment Date";
      "Receipt Date" := TransHeader."Receipt Date";
      "Shipping Agent Code" := TransHeader."Shipping Agent Code";
      "Shipping Agent Service Code" := TransHeader."Shipping Agent Service Code";
      "Shipping Time" := TransHeader."Shipping Time";
      "Outbound Whse. Handling Time" := TransHeader."Outbound Whse. Handling Time";
      "Inbound Whse. Handling Time" := TransHeader."Inbound Whse. Handling Time";
      Status := TransHeader.Status;
    END;

    LOCAL PROCEDURE GetItem@9();
    BEGIN
      TESTFIELD("Item No.");
      IF "Item No." <> Item."No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE BlockDynamicTracking@23(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReserveTransferLine.Block(SetBlock);
    END;

    PROCEDURE ShowDimensions@25();
    VAR
      DocDim@1000 : Record 357;
      DocDimensions@1001 : Form 546;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      DocDim.SETRANGE("Table ID",DATABASE::"Transfer Line");
      DocDim.SETRANGE("Document Type",DocDim."Document Type"::" ");
      DocDim.SETRANGE("Document No.","Document No.");
      DocDim.SETRANGE("Line No.","Line No.");
      DocDimensions.SETTABLEVIEW(DocDim);
      DocDimensions.RUNMODAL;
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1002 : Record 242;
      TableID@1003 : ARRAY [10] OF Integer;
      No@1004 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetPreviousDocDefaultDim(
        DATABASE::"Transfer Header",DocDim."Document Type"::" ","Document No.",0,
        DATABASE::Item,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      DimMgt.GetDefaultDim(
        TableID,No,SourceCodeSetup.Transfer,
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF "Line No." <> 0 THEN
        DimMgt.UpdateDocDefaultDim(
          DATABASE::"Transfer Line",DocDim."Document Type"::" ","Document No.","Line No.",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveDocDim(
          DATABASE::"Transfer Line",DocDim."Document Type"::" ","Document No.",
          "Line No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveDocDim(
          DATABASE::"Transfer Line",DocDim."Document Type"::" ","Document No.",
          "Line No.",FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      IF "Line No." <> 0 THEN
        DimMgt.ShowDocDim(
          DATABASE::"Transfer Line",DocDim."Document Type"::" ","Document No.",
          "Line No.",ShortcutDimCode)
      ELSE
        DimMgt.ShowTempDim(ShortcutDimCode);
    END;

    LOCAL PROCEDURE CheckItemAvailable@3(CalledByFieldNo@1000 : Integer);
    VAR
      ItemCheckAvail@1001 : Codeunit 311;
    BEGIN
      IF (CurrFieldNo <> 0) AND
         (CurrFieldNo = CalledByFieldNo) AND
         ("Item No." <> '')  AND
         ("Outstanding Quantity" > 0)
      THEN
        ItemCheckAvail.TransferLineCheck(Rec);
    END;

    PROCEDURE ItemAvailability@12(AvailabilityType@1000 : 'Date,Variant,Location');
    VAR
      ItemAvailByDate@1001 : Form 157;
      ItemAvailByVar@1002 : Form 5414;
      ItemAvailByLoc@1003 : Form 492;
    BEGIN
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      Item.SETRANGE("No.","Item No.");
      Item.SETRANGE("Date Filter",0D,"Shipment Date");

      CASE AvailabilityType OF
        AvailabilityType::Date:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Location Filter","Transfer-from Code");
            CLEAR(ItemAvailByDate);
            ItemAvailByDate.LOOKUPMODE(FALSE);
            ItemAvailByDate.SETRECORD(Item);
            ItemAvailByDate.SETTABLEVIEW(Item);
            IF ItemAvailByDate.RUNMODAL = ACTION::LookupOK THEN
              IF "Shipment Date" <> ItemAvailByDate.GetLastDate THEN
                IF CONFIRM(
                     Text010,TRUE,FIELDCAPTION("Shipment Date"),"Shipment Date",
                     ItemAvailByDate.GetLastDate)
                THEN
                  VALIDATE("Shipment Date",ItemAvailByDate.GetLastDate);
          END;
        AvailabilityType::Variant:
          BEGIN
            Item.SETRANGE("Location Filter","Transfer-from Code");
            CLEAR(ItemAvailByVar);
            ItemAvailByVar.LOOKUPMODE(FALSE);
            ItemAvailByVar.SETRECORD(Item);
            ItemAvailByVar.SETTABLEVIEW(Item);
            IF ItemAvailByVar.RUNMODAL = ACTION::LookupOK THEN
              IF "Variant Code" <> ItemAvailByVar.GetLastVariant THEN
                IF CONFIRM(
                     Text010,TRUE,FIELDCAPTION("Variant Code"),"Variant Code",
                     ItemAvailByVar.GetLastVariant)
                THEN
                  VALIDATE("Variant Code",ItemAvailByVar.GetLastVariant);
          END;
        AvailabilityType::Location:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            CLEAR(ItemAvailByLoc);
            ItemAvailByLoc.LOOKUPMODE(FALSE);
            ItemAvailByLoc.SETRECORD(Item);
            ItemAvailByLoc.SETTABLEVIEW(Item);
            IF ItemAvailByLoc.RUNMODAL = ACTION::LookupOK THEN
              IF "Transfer-from Code" <> ItemAvailByLoc.GetLastLocation THEN
                IF CONFIRM(
                     Text010,TRUE,FIELDCAPTION("Transfer-from Code"),"Transfer-from Code",
                     ItemAvailByLoc.GetLastLocation)
                THEN
                  VALIDATE("Transfer-from Code",ItemAvailByLoc.GetLastLocation);
          END;
      END;
    END;

    PROCEDURE OpenItemTrackingLines@6500(Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Quantity (Base)");

      ReserveTransferLine.CallItemTracking(Rec,Direction);
    END;

    LOCAL PROCEDURE TestStatusOpen@37();
    BEGIN
      TESTFIELD("Document No.");
      IF (TransHeader."No." <> "Document No.") THEN
        TransHeader.GET("Document No.");
      TransHeader.TESTFIELD(Status,TransHeader.Status::Open);
    END;

    PROCEDURE ShowReservation@10();
    VAR
      OptionNumber@1000 : Integer;
    BEGIN
      TESTFIELD("Item No.");
      CLEAR(Reservation);
      OptionNumber := STRMENU(Text011);
      IF OptionNumber > 0 THEN BEGIN
        Reservation.SetTransLine(Rec,OptionNumber - 1);
        Reservation.RUNMODAL;
      END;
    END;

    PROCEDURE UpdateWithWarehouseShipReceive@41();
    BEGIN
      IF Location.RequireShipment("Transfer-from Code") THEN
        VALIDATE("Qty. to Ship",0)
      ELSE
        VALIDATE("Qty. to Ship","Outstanding Quantity");

      IF Location.RequireReceive("Transfer-to Code") THEN
        VALIDATE("Qty. to Receive",0)
      ELSE
        VALIDATE("Qty. to Receive","Qty. in Transit");
    END;

    LOCAL PROCEDURE CheckWarehouse@47(LocationCode@1003 : Code[10];Receive@1004 : Boolean);
    VAR
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1000 : Text[50];
    BEGIN
      GetLocation(LocationCode);
      IF Location."Directed Put-away and Pick" THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF Receive THEN
          DialogText := Location.GetRequirementText(Location.FIELDNO("Require Receive"))
        ELSE
          DialogText := Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
      END ELSE BEGIN
        IF Receive AND (Location."Require Receive" OR Location."Require Put-away") THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
            DATABASE::"Transfer Line",
            1,
            "Document No.",
            "Line No.",
            0,
            Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location."Require Receive" THEN
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Receive"))
          ELSE
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Put-away"));
        END;

        IF NOT Receive AND (Location."Require Shipment" OR Location."Require Pick") THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
            DATABASE::"Transfer Line",
            0,
            "Document No.",
            "Line No.",
            0,
            Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location."Require Shipment" THEN
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Shipment"))
          ELSE
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Pick"));
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text003 + Text004,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text003,DialogText,FIELDCAPTION("Line No."),"Line No.");
      END;
    END;

    LOCAL PROCEDURE GetLocation@44(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@36(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      IF BinCode = '' THEN
        CLEAR(Bin)
      ELSE
        IF Bin.Code <> BinCode THEN
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE GetDefaultBin@5(FromLocationCode@1000 : Code[10];ToLocationCode@1001 : Code[10]);
    BEGIN
      IF (FromLocationCode <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation(FromLocationCode);
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          WMSManagement.GetDefaultBin("Item No.","Variant Code",FromLocationCode,"Transfer-from Bin Code");
      END;

      IF (ToLocationCode <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation(ToLocationCode);
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          WMSManagement.GetDefaultBin("Item No.","Variant Code",ToLocationCode,"Transfer-To Bin Code");
      END;
    END;

    BEGIN
    END.
  }
}
