OBJECT Table 7010265 Cupo excursion
{
  OBJECT-PROPERTIES
  {
    Date=18/02/15;
    Time=17:25:39;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               _CheckCaducada;

               _CheckDates(0); //. Crear

               _CheckSolape;

               IF _CheckFueraCupo THEN
                 ERROR(Text003);
             END;

    OnModify=BEGIN
               _CheckCaducada;

               _CheckDates(1); //. Modificar

               _CheckSolape;

               IF _CheckFueraCupo THEN
                 ERROR(Text003);
             END;

    OnDelete=BEGIN
               _CheckCaducada;

               _CheckDates(2); //. Borrar
             END;

    CaptionML=[ENU=Excursion allotment;
               ESP=Cupo excursion];
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              ESP=ID] }
    { 3   ;   ;Excursion           ;Code10        ;TableRelation="Producto agencia".Codigo WHERE (Tipo Producto=CONST(Excursion));
                                                   CaptionML=[ENU=Excursion;
                                                              ESP=Excursion];
                                                   NotBlank=Yes;
                                                   Description="Producto agencia".Codigo WHERE (Tipo Producto=CONST(Excursion)) }
    { 5   ;   ;Turno               ;Integer       ;OnValidate=BEGIN
                                                                IF Turno = 0 THEN
                                                                BEGIN
                                                                  IF _CheckTieneTurnos THEN
                                                                    ERROR(Text004);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Turn;
                                                              ESP=Turno];
                                                   MinValue=0 }
    { 7   ;   ;Touroperador        ;Code10        ;TableRelation=TourOperador.TourOperador;
                                                   CaptionML=[ENU=Touroperator;
                                                              ESP=Touroperador];
                                                   NotBlank=Yes }
    { 9   ;   ;Fecha desde         ;Date          ;CaptionML=[ENU=From date;
                                                              ESP=Fecha desde];
                                                   NotBlank=Yes }
    { 11  ;   ;Fecha hasta         ;Date          ;CaptionML=[ENU=To date;
                                                              ESP=Fecha hasta];
                                                   NotBlank=Yes }
    { 13  ;   ;Cupo                ;Decimal       ;OnValidate=BEGIN
                                                                IF _CheckTieneTurnos AND (Turno = 0) THEN
                                                                  ERROR(Text004);
                                                              END;

                                                   CaptionML=[ENU=Allotment;
                                                              ESP=Cupo];
                                                   DecimalPlaces=0:0;
                                                   MinValue=0 }
    { 15  ;   ;Release             ;Integer       ;MinValue=0 }
    { 17  ;   ;Idioma              ;Code10        ;TableRelation=Language.Code;
                                                   CaptionML=[ENU=Language;
                                                              ESP=Idioma] }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Excursion,Turno,Touroperador,Fecha desde,Fecha hasta,Idioma }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100217000 : TextConst 'ENU=Wrong period.;ESP=Periodo incorrecto.';
      Text002@1100217001 : TextConst 'ENU=You cannot modify a past period.;ESP="No se pueden modificar un periodo pasado. "';
      Text003@1100217002 : TextConst 'ENU=The allotment is less than the quantity in reservations.;ESP=El cupo es inferior a la cantidad en reservas.';
      Text004@1100217003 : TextConst 'ENU=This excursion has more than a turn, you must specify a turn in the allotment.;ESP=Esta excursion mas de un turno, debe especificar un turno en el cupo.';
      Text005@1100217004 : TextConst 'ENU=The conditions of this allotment overlap with others already existing.;ESP=Las condiciones de este cupo se solapan con otras ya introducidas.';
      Text006@1000000000 : TextConst 'ENU=The allotment is not enough to cover the reservations for day %1;ESP=El cupo no es suficiente para cubrir las reservas de dia %1';
      Text007@1000000001 : TextConst 'ENU=The specified period is outside the allotment period.;ESP=El periodo especificado esta fuera del periodo del cupo.';

    LOCAL PROCEDURE _CheckDates@1100217007(pwOrigen@1000000000 : 'Crear,Modificar,Borrar');
    BEGIN
      // _CheckDates

      //. Funcion controlar que las fechas son coherentes

      IF ("Fecha desde" = 0D) OR
         ("Fecha hasta" = 0D) THEN
        EXIT;

      IF "Fecha desde" > "Fecha hasta" THEN
        ERROR(Text001);

      IF pwOrigen <> pwOrigen::Crear THEN
        IF "Fecha desde" < TODAY THEN
          ERROR(Text002);
    END;

    LOCAL PROCEDURE _CheckFueraCupo@1100217000() : Boolean;
    VAR
      lrExc@1100217000 : Record 7009710;
      lwDia@1100217001 : Date;
    BEGIN
      // _CheckFueraCupo

      //. Funcion para controlar si la modificacion del registro hace que haya reservas fuera de cupo

      IF ("Fecha desde" = 0D) OR
         ("Fecha hasta" = 0D) OR
         (Excursion = '') OR
         (Touroperador = '') THEN
        EXIT;

      //. Vamos a utilizar una funcion de la tabla producto agencia

      FOR lwDia := "Fecha desde" TO "Fecha hasta" DO
      BEGIN
        IF Cupo < lrExc.GetPersonasRsvServicio(Excursion, Turno, Touroperador, lwDia, lwDia) THEN
          EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE _CheckTieneTurnos@1100217005() : Boolean;
    VAR
      lrCalendExc@1100217000 : Record 7010254;
    BEGIN
      // _CheckTieneTurnos

      lrCalendExc.RESET;
      lrCalendExc.SETRANGE(Excursion, Excursion);
      EXIT(lrCalendExc.COUNT > 1);
    END;

    LOCAL PROCEDURE _CheckCaducada@1100217001();
    VAR
      lrExc@1100217000 : Record 7009710;
    BEGIN
      // _CheckCaducada

      lrExc.GET(Excursion);
      lrExc.TESTFIELD(Caducado, FALSE);
    END;

    LOCAL PROCEDURE _CheckSolape@1100217002();
    VAR
      lrCupo@1100217000 : Record 7010265;
      lrExcursion@1000000000 : Record 7009710;
      lwDia@1000000001 : Date;
      lwCantidad@1000000002 : Decimal;
    BEGIN
      // _CheckSolape

      //. Funcion para controlar si la modificacion del registro hace que haya reservas fuera de cupo

      IF ("Fecha desde" = 0D) OR
         ("Fecha hasta" = 0D) OR
         (Excursion = '') THEN
        EXIT;

      IF _CheckTieneTurnos THEN
        IF Turno = 0 THEN
          EXIT;

      //. Comprobamos que no se solape con otro periodo ya existente

      lrCupo.RESET;
      lrCupo.SETRANGE (Excursion    , Excursion);
      lrCupo.SETRANGE (Turno        , Turno);
      lrCupo.SETRANGE (Touroperador , Touroperador);
      lrCupo.SETFILTER("Fecha desde", '<=%1', "Fecha hasta");
      lrCupo.SETFILTER("Fecha hasta", '>=%1', "Fecha desde");
      lrCupo.SETRANGE (lrCupo.Idioma, Idioma); // +$004
      lrCupo.SETFILTER(ID           , '<>%1', ID);
      IF NOT lrCupo.ISEMPTY THEN
        ERROR(Text005);

      FOR lwDia := "Fecha desde" TO "Fecha hasta" DO
      BEGIN
        IF lrExcursion.CheckVentaVehiculo(Excursion) THEN
        BEGIN
          lwCantidad := lrExcursion.GetVehiculosRsvServicio(Excursion, Turno, Touroperador, lwDia, lwDia);
          IF lwCantidad > Cupo THEN
            ERROR(Text006, lwDia);
        END
        ELSE
        BEGIN
          lwCantidad := lrExcursion.GetPersonasRsvServicio(Excursion, Turno, Touroperador, lwDia, lwDia);
          IF lwCantidad > Cupo THEN
            ERROR(Text006, lwDia);
        END;
      END;
    END;

    PROCEDURE DividirPeriodo@1000000000();
    VAR
      lfPeriodo@1000000000 : Form 7010250;
      lrCondicion@1000000001 : Record 7010243;
      lrCupo@1000000002 : Record 7010265;
    BEGIN
      // DividirPeriodo

      //. Abrir una ficha para que se pueda introducir el periodo de fechas
      lrCondicion.RESET;
      IF NOT lrCondicion.GET(USERID) THEN
      BEGIN
        lrCondicion.INIT;
        lrCondicion.Usuario := USERID;
        lrCondicion.INSERT;
      END
      ELSE
      BEGIN
        lrCondicion.INIT;
        lrCondicion.MODIFY;
      END;

      COMMIT;

      CLEAR(lfPeriodo);
      lfPeriodo.LOOKUPMODE(TRUE);
      lfPeriodo.SETRECORD(lrCondicion);
      IF lfPeriodo.RUNMODAL <> ACTION::LookupOK THEN
        EXIT;

      //. Recuperar la informaci¢n introducida

      lfPeriodo.GETRECORD(lrCondicion);

      //. Compruebo que los datos obligatorios esten rellenados
      IF (lrCondicion."Fecha desde" = 0D) OR
         (lrCondicion."Fecha hasta" = 0D) THEN
        EXIT;

      IF (lrCondicion."Fecha desde" < "Fecha desde") OR
         (lrCondicion."Fecha hasta" > "Fecha hasta") THEN
        ERROR(Text007);

      IF "Fecha desde" <> lrCondicion."Fecha desde" THEN
      BEGIN
        lrCupo := Rec;
        lrCupo."Fecha hasta" := lrCondicion."Fecha desde" - 1;
        lrCupo.MODIFY;

        lrCupo := Rec;
        lrCupo.ID            := 0;
        lrCupo."Fecha desde" := lrCondicion."Fecha desde";
        lrCupo."Fecha hasta" := lrCondicion."Fecha hasta";
        lrCupo.Cupo          := lrCondicion."Importe a validar";
        lrCupo.INSERT(TRUE);
      END
      ELSE
      BEGIN
        lrCupo := Rec;
        lrCupo."Fecha hasta" := lrCondicion."Fecha desde";
        lrCupo.Cupo          := lrCondicion."Importe a validar";
        lrCupo.MODIFY;
      END;

      IF "Fecha hasta" <> lrCondicion."Fecha hasta" THEN
      BEGIN
        lrCupo := Rec;
        lrCupo.ID            := 0;
        lrCupo."Fecha desde" := lrCondicion."Fecha hasta" + 1;
        lrCupo.INSERT;
      END;
    END;

    BEGIN
    {
      $001 AJS 26092014 Nueva clave Excursion,Turno,Fecha desde,Fecha hasta

      $002 AJS 27092014 Cupo tiene que ser Decimal

      $003 AJS 08102014 Nueva funcion para Dividir periodos de cupo

      $004 ARM 20112014 CNT-OC-14105 Nuevo campo idioma

      $005 AJS 18022015 Se ha agregado un parametro m s en la funcion GetPersonasRsvServicio y GetVehiculosRsvServicio
    }
    END.
  }
}
