OBJECT Table 7010191 Tarifa Venta Circuito
{
  OBJECT-PROPERTIES
  {
    Date=22/07/14;
    Time=14:16:10;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=VAR
               rTar@1103355000 : Record 7010191;
             BEGIN
               rParC.LOCKTABLE;

               rPar.FINDFIRST;
               rParC.FINDFIRST;

               IF Delegacion = '' THEN
                 Delegacion := rPar.Delegacion;

               IF "N§ Tarifa" = '' THEN BEGIN
                 //-$001rParC.TESTFIELD("Cont. Tarifa Venta Circuito");
                 //+$001 <
                 IF rParC."Cont. Tarifa Venta Circuito" = '' THEN
                   rParC."Cont. Tarifa Venta Circuito" := Text032 + '0000000';
                 //+$001 >
                 REPEAT
                   rParC."Cont. Tarifa Venta Circuito" := INCSTR(rParC."Cont. Tarifa Venta Circuito");
                 UNTIL NOT rTar.GET(Delegacion, rParC."Cont. Tarifa Venta Circuito");
                 "N§ Tarifa" := rParC."Cont. Tarifa Venta Circuito";
                 rParC.MODIFY;
               END;

               //+$004
               //-$005rSalesSetup.FINDFIRST;
               //-$005"Cod. Serie" := rSalesSetup."Posted Invoice Nos.";
             END;

    OnModify=BEGIN
               Confirmado := Activar_Tarifa;
             END;

    OnDelete=VAR
               rExtVta@1103355000 : Record 7010212;
               rPreVta@1103355001 : Record 7010192;
               rHot@1103355002 : Record 7010193;
               rConvHab@1103355003 : Record 7009731;
             BEGIN
               rPreVta.RESET;
               rPreVta.SETRANGE(Delegacion , Delegacion);
               rPreVta.SETRANGE("N§ Tarifa", "N§ Tarifa");
               IF rPreVta.FINDSET(TRUE) THEN
                 rPreVta.DELETEALL;

               rHot.RESET;
               rHot.SETRANGE(Delegacion, Delegacion);
               rHot.SETRANGE("N§ Tarifa", "N§ Tarifa");
               IF rHot.FINDSET(TRUE) THEN
                 rHot.DELETEALL;

               rConvHab.RESET;
               rConvHab.SETRANGE(Delegacion, Delegacion);
               rConvHab.SETRANGE("N§ Contrato", "N§ Tarifa");
               rConvHab.SETRANGE("Tipo contrato", rConvHab."Tipo contrato"::Circuito);
               IF rConvHab.FINDSET(TRUE) THEN
                 rConvHab.DELETEALL;

               rExtVta.RESET;
               rExtVta.SETRANGE(Delegacion , Delegacion);
               rExtVta.SETRANGE("N§ Tarifa", "N§ Tarifa");
               IF rExtVta.FINDSET(TRUE) THEN
                 rExtVta.DELETEALL(TRUE);

               rHist.Intro_Historico(Delegacion, rHist.Tipo::Venta, "N§ Tarifa", Text033, '', '');
             END;

    CaptionML=[ENU=Roundtrip Sale Tariff;
               ESP=Tarifa Venta Circuito];
    LookupFormID=Form7010260;
    DrillDownFormID=Form7010260;
  }
  FIELDS
  {
    { 1   ;   ;Delegacion          ;Code10        ;TableRelation=Delegacion.Codigo;
                                                   CaptionML=[ENU=Local Office;
                                                              ESP=Delegacion];
                                                   Description=PK, FK Delegacion;
                                                   Editable=No }
    { 3   ;   ;N§ Tarifa           ;Code10        ;ValidateTableRelation=No;
                                                   CaptionML=[ENU=Tariff No.;
                                                              ESP=N§ Tarifa];
                                                   Description=PK }
    { 5   ;   ;Fecha inicio        ;Date          ;OnValidate=BEGIN
                                                                IF "Fecha inicio" <> xRec."Fecha inicio" THEN BEGIN
                                                                  IF "Fecha final" <> 0D THEN BEGIN
                                                                    IF "Fecha inicio" > "Fecha final" THEN
                                                                      ERROR(Text002);
                                                                  END;

                                                                  rHist.Intro_Historico(Delegacion, rHist.Tipo::Venta, "N§ Tarifa", FIELDCAPTION("Fecha inicio"),
                                                                                        STRSUBSTNO('%1', xRec."Fecha inicio"), STRSUBSTNO('%1', "Fecha inicio"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicio] }
    { 7   ;   ;Fecha final         ;Date          ;OnValidate=BEGIN
                                                                IF "Fecha final" <> xRec."Fecha final" THEN BEGIN
                                                                  IF "Fecha inicio" <> 0D THEN BEGIN
                                                                    IF "Fecha inicio" > "Fecha final" THEN
                                                                      ERROR(Text002);
                                                                  END;

                                                                  rHist.Intro_Historico(Delegacion, rHist.Tipo::Venta, "N§ Tarifa", FIELDCAPTION("Fecha final"),
                                                                                        STRSUBSTNO('%1', xRec."Fecha final"), STRSUBSTNO('%1', "Fecha final"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha Final] }
    { 9   ;   ;Cliente             ;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=VAR
                                                                lrCli@1103355000 : Record 18;
                                                              BEGIN
                                                                IF Cliente <> xRec.Cliente THEN BEGIN
                                                                  IF xRec.Cliente <> '' THEN BEGIN
                                                                    IF NOT CONFIRM(Text003) THEN
                                                                      ERROR(Text004);
                                                                  END;

                                                                  // ----  Rellenar los campos del contrato a partir de los del cliente  ----

                                                                  lrCli.RESET;
                                                                  lrCli.GET(Cliente);
                                                                  "Cod. Terminos Pago" := lrCli."Payment Terms Code";
                                                                  "Cod. Formas Pago"   := lrCli."Payment Method Code";

                                                                  rHist.Intro_Historico(Delegacion, rHist.Tipo::Venta, "N§ Tarifa", FIELDCAPTION(Cliente),
                                                                                        xRec.Cliente, Cliente);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Client;
                                                              ESP=Cliente];
                                                   Description=FK Cliente }
    { 10  ;   ;TourOperador        ;Code10        ;TableRelation=TourOperador.TourOperador;
                                                   OnValidate=BEGIN
                                                                //$006-
                                                                rTTOO.RESET;
                                                                rTTOO.GET(TourOperador);
                                                                rTTOO.TESTFIELD(Bloqueado, FALSE);
                                                                //$006+

                                                                IF TourOperador <> xRec.TourOperador THEN BEGIN
                                                                  IF xRec.TourOperador <> '' THEN BEGIN
                                                                    IF NOT CONFIRM(Text005) THEN
                                                                      ERROR(Text004);
                                                                  END;

                                                                  _BuscarCliente; //+$001

                                                                  rHist.Intro_Historico(Delegacion, rHist.Tipo::Venta, "N§ Tarifa", FIELDCAPTION(TourOperador),
                                                                                        xRec.TourOperador, TourOperador);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=TourOperator;
                                                              ESP=TourOperador];
                                                   Description=FK TourOperador }
    { 11  ;   ;Impuestos incluidos ;Boolean       ;OnValidate=BEGIN
                                                                IF "Impuestos incluidos" <> xRec."Impuestos incluidos" THEN
                                                                  rHist.Intro_Historico(Delegacion, rHist.Tipo::Venta, "N§ Tarifa",FIELDCAPTION("Impuestos incluidos"),
                                                                                        STRSUBSTNO('%1', xRec."Impuestos incluidos"), STRSUBSTNO('%1', "Impuestos incluidos"));
                                                              END;

                                                   CaptionML=[ENU=Included Taxes;
                                                              ESP=Impuestos incluidos] }
    { 13  ;   ;Grupo registro iva prod.;Code10    ;TableRelation="VAT Product Posting Group".Code;
                                                   OnValidate=BEGIN
                                                                IF "Grupo registro iva prod." <> xRec."Grupo registro iva prod." THEN
                                                                  rHist.Intro_Historico(Delegacion, rHist.Tipo::Venta, "N§ Tarifa", FIELDCAPTION("Grupo registro iva prod."),
                                                                                        xRec."Grupo registro iva prod.", "Grupo registro iva prod.");
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. posting group;
                                                              ESP=Grupo registro iva prod.];
                                                   NotBlank=Yes;
                                                   Description=FK Gr. Contable Producto }
    { 15  ;   ;Cod. Terminos Pago  ;Code10        ;TableRelation="Payment Terms".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Terminos Pago" <> xRec."Cod. Terminos Pago" THEN
                                                                  rHist.Intro_Historico(Delegacion, rHist.Tipo::Venta, "N§ Tarifa", FIELDCAPTION("Cod. Terminos Pago"),
                                                                                        xRec."Cod. Terminos Pago", "Cod. Terminos Pago");
                                                              END;

                                                   CaptionML=[ENU=Payment terms code;
                                                              ESP=Cod. Terminos Pago];
                                                   Description=FK Terminos Pago }
    { 17  ;   ;Cod. Formas Pago    ;Code10        ;TableRelation="Payment Method".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Formas Pago" <> xRec."Cod. Formas Pago" THEN
                                                                  rHist.Intro_Historico(Delegacion, rHist.Tipo::Venta, "N§ Tarifa", FIELDCAPTION("Cod. Formas Pago"),
                                                                                        xRec."Cod. Formas Pago", "Cod. Formas Pago");
                                                              END;

                                                   CaptionML=[ENU=Payment methods code;
                                                              ESP=Cod. Formas Pago];
                                                   Description=FK Cod. Forma Pago }
    { 19  ;   ;o_Cod. Serie        ;Code10        ;TableRelation="No. Series".Code;
                                                   CaptionML=[ENU=Serial code;
                                                              ESP=Cod. Serie];
                                                   Description=FK N§ Serie }
    { 21  ;   ;Confirmado          ;Boolean       ;CaptionML=[ENU=Confirmed;
                                                              ESP=Confirmado];
                                                   Editable=No }
    { 23  ;   ;C¢d. divisa         ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency exchange;
                                                              ESP=C¢d. divisa];
                                                   Description=FK Divisa }
  }
  KEYS
  {
    {    ;Delegacion,N§ Tarifa                    ;Clustered=Yes }
    {    ;Fecha inicio,Fecha final                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1103355006 : TextConst 'ENU=Starting date cannot be higher than final date;ESP=La fecha de inicio no puede ser posterior a la de final.';
      Text003@1103355007 : TextConst 'ENU=Are you sure about changing the contract of the client;ESP=Esta seguro de que desea cambiar el cliente del contrato.';
      Text004@1103355008 : TextConst 'ENU=Cancelled change;ESP=Cambio anulado.';
      Text005@1103355009 : TextConst 'ENU=Are you sure about to change the TourOperator of the contract;ESP=Esta seguro de que desea cambiar el TourOperador del contrato.';
      Text006@1103355010 : TextConst 'ENU=This tariff overlaps with another already entered.;ESP=Esta tarifa se solapa con otra ya introducida.';
      Text010@1103355014 : TextConst 'ENU=Copy the Purchase tariff %1 on the new tariff %2?;ESP=Copiar la tarifa Compra %1 sobre la nueva tarifa %2?';
      Text011@1103355015 : TextConst 'ENU=There is no tariff to be copied;ESP=No hay tarifa para copiar';
      rPar@1103355000 : Record 7009700;
      rParC@1103355001 : Record 7010185;
      rTTOO@1000000000 : Record 7009717;
      Ventana@1103355002 : Dialog;
      rHist@1103355003 : Record 7010208;
      Text031@1100217001 : TextConst 'ENU=You must configure the accounts of the touroperator %1.;ESP=Debe configurar las cuentas del touroperador %1.';
      Text032@1100217000 : TextConst 'ENU=RST;ESP=TVC';
      Text033@1100217002 : TextConst 'ENU=Tariff deleted;ESP=Tarifa borrada';

    PROCEDURE Activar_Tarifa@1() : Boolean;
    VAR
      rPrec@1103355000 : Record 7010191;
    BEGIN
      // activar_Precio

      IF ("Fecha inicio" = 0D) OR ("Fecha final" = 0D) THEN
        EXIT(FALSE);

      rPrec.RESET;
      rPrec.SETRANGE (Delegacion    , Delegacion);
      rPrec.SETFILTER("N§ Tarifa"   , '<>%1', "N§ Tarifa");
      rPrec.SETRANGE (Cliente       , Cliente);
      rPrec.SETRANGE (TourOperador  , TourOperador);
      rPrec.SETRANGE (Confirmado    , TRUE);

      rPrec.SETFILTER("Fecha inicio", '<=%1', "Fecha inicio");
      rPrec.SETFILTER("Fecha final" , '>=%1', "Fecha inicio");
      IF rPrec.FINDFIRST THEN BEGIN
        MESSAGE(Text006);
        EXIT(FALSE);
      END;

      rPrec.SETFILTER("Fecha inicio", '<=%1', "Fecha final");
      rPrec.SETFILTER("Fecha final" , '>=%1', "Fecha final");
      IF rPrec.FINDFIRST THEN BEGIN
        MESSAGE(Text006);
        EXIT(FALSE);
      END;

      rPrec.SETFILTER("Fecha inicio", '>=%1', "Fecha inicio");
      rPrec.SETFILTER("Fecha final" , '<=%1', "Fecha final");
      IF rPrec.FINDFIRST THEN BEGIN
        MESSAGE(Text006);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE Copiar_Tarifa@6(rTarifa@1103355000 : Record 7010191);
    VAR
      rTar@1103355001 : Record 7010191;
      rTar2@1103355002 : Record 7010191;
      NewTarifa@1103355003 : Code[10];
    BEGIN
      // Copiar_Tarifa

      IF rTar.GET(rTarifa.Delegacion, rTarifa."N§ Tarifa") THEN BEGIN
        //-$002Ventana.OPEN(Text007 +
        //-$002             Text008);
        //-$002Ventana.INPUT(1, NewTarifa);
        //-$002Ventana.CLOSE;

        //-$002IF (NewTarifa <> '') AND rTar2.GET(rTar.Delegacion, NewTarifa) THEN
        //-$002  ERROR(Text009, NewTarifa);

        Tarifa_Venta(rTar, NewTarifa);

        IF NOT CONFIRM(STRSUBSTNO(Text010,
                       rTar."N§ Tarifa", NewTarifa)) THEN BEGIN
          IF rTar.GET(rTarifa.Delegacion, NewTarifa) THEN
            rTar.DELETE;
          EXIT;
        END;

        Precios_Venta(rTar, NewTarifa);
        Hoteles_Venta(rTar, NewTarifa);
        Conversion_Habitaciones(rTar, NewTarifa);
      END
      ELSE
        ERROR(Text011);
    END;

    PROCEDURE Tarifa_Venta@12(par_Con@1103355000 : Record 7010191;VAR par_NewTarifa@1103355001 : Code[10]);
    VAR
      ConC2@1103355002 : Record 7010191;
    BEGIN
      // Tarifa_compra

      ConC2.TRANSFERFIELDS(par_Con);
      ConC2.VALIDATE("N§ Tarifa", par_NewTarifa);
      ConC2.Confirmado := FALSE;
      ConC2.INSERT(TRUE);

      IF par_NewTarifa = '' THEN
        par_NewTarifa := ConC2."N§ Tarifa";
    END;

    PROCEDURE Precios_Venta@16(par_Con@1103355000 : Record 7010191;par_NewTarifa@1103355001 : Code[10]);
    VAR
      rPre@1103355002 : Record 7010192;
      rPre2@1103355003 : Record 7010192;
    BEGIN
      // precios_compra

      rPre.RESET;
      rPre.SETRANGE(Delegacion , par_Con.Delegacion);
      rPre.SETRANGE("N§ Tarifa", par_Con."N§ Tarifa");
      IF rPre.FINDSET THEN
        REPEAT
          rPre2.TRANSFERFIELDS(rPre);
          rPre2."N§ Tarifa" := par_NewTarifa;
          rPre2.Activo      := FALSE;
          rPre2.INSERT;
        UNTIL rPre.NEXT = 0;
      rPre.RESET;
    END;

    PROCEDURE Hoteles_Venta@2(par_Con@1103355000 : Record 7010191;par_NewTarifa@1103355001 : Code[10]);
    VAR
      rHotTO@1103355002 : Record 7010193;
      rHotTO2@1103355003 : Record 7010193;
    BEGIN
      // precios_compra

      rHotTO.RESET;
      rHotTO.SETRANGE(Delegacion , par_Con.Delegacion);
      rHotTO.SETRANGE("N§ Tarifa", par_Con."N§ Tarifa");
      IF rHotTO.FINDSET THEN
        REPEAT
          rHotTO2.TRANSFERFIELDS(rHotTO);
          rHotTO2."N§ Tarifa" := par_NewTarifa;
          rHotTO2.Activo      := FALSE;
          rHotTO2.INSERT;
        UNTIL rHotTO.NEXT = 0;
      rHotTO.RESET;
    END;

    PROCEDURE Conversion_Habitaciones@3(par_Con@1103355000 : Record 7010191;par_NewTarifa@1103355001 : Code[10]);
    VAR
      rConvHab@1103355002 : Record 7009731;
      rConvHab2@1103355003 : Record 7009731;
    BEGIN
      // Conversion_Habitaciones

      rConvHab.SETRANGE(Delegacion, par_Con.Delegacion);
      rConvHab.SETRANGE("N§ Contrato", par_Con."N§ Tarifa");
      rConvHab.SETRANGE("Tipo contrato", rConvHab."Tipo contrato"::Circuito);
      IF rConvHab.FINDSET THEN
        REPEAT
          rConvHab2.TRANSFERFIELDS(rConvHab);
          rConvHab2."N§ Contrato" := par_NewTarifa;
          rConvHab2.INSERT;
        UNTIL rConvHab.NEXT = 0;
      rConvHab.RESET;
    END;

    LOCAL PROCEDURE _BuscarCliente@1100217000();
    VAR
      lrCtaTO@1100217000 : Record 7009705;
    BEGIN
      // _BuscarCliente

      lrCtaTO.RESET;
      IF NOT lrCtaTO.GET(Delegacion, TourOperador) THEN
      BEGIN
        IF NOT lrCtaTO.GET('', TourOperador) THEN
        BEGIN
          IF NOT lrCtaTO.GET(Delegacion, '') THEN
            ERROR(Text031);
        END;
      END;

      IF lrCtaTO."Cliente Circuitos" <> '' THEN
        VALIDATE(Cliente, lrCtaTO."Cliente Circuitos");
    END;

    BEGIN
    {
      $001 AJS 28082012 El cliente se obtiene de la tabla de Cuentas TO-Delegacion

      $002 AJS 27122012 Al copiar contrato que no pida numero, no es operativo

      $003 AJS 06032014 Guardar en el historico el borrado de tarifas

      $004 AJS 02042014 Al crear la tarifa rellenar la serie con la definida en Gestion financiera

      $005 AJS 23062014 Marcamos el campo Cod. Serie como obsoleto

      $006 MNC 22072014 CNT-LP-14054 No se pueden usar TTOO bloqueados
    }
    END.
  }
}
