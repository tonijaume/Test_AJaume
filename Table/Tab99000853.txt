OBJECT Table 99000853 Inventory Profile
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Inventory Profile;
               ESP=Perfil inventario];
  }
  FIELDS
  {
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 4   ;   ;Attribute Priority  ;Integer       ;CaptionML=[ENU=Attribute Priority;
                                                              ESP=Prioridad atributo] }
    { 5   ;   ;Order Priority      ;Integer       ;CaptionML=[ENU=Order Priority;
                                                              ESP=Prioridad pedido] }
    { 11  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto] }
    { 12  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.),
                                                                                            Code=FIELD(Variant Code));
                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 13  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n] }
    { 14  ;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n] }
    { 15  ;   ;IsSupply            ;Boolean       ;CaptionML=[ENU=IsSupply;
                                                              ESP=EsSuministro] }
    { 16  ;   ;Order Relation      ;Option        ;CaptionML=[ENU=Order Relation;
                                                              ESP=Relaci¢n pedido];
                                                   OptionCaptionML=[ENU=Normal,Safety Stock,Reorder Point;
                                                                    ESP=Normal,Stock seguridad,Punto de pedido];
                                                   OptionString=Normal,Safety Stock,Reorder Point }
    { 21  ;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              ESP=Tipo procedencia mov.] }
    { 22  ;   ;Source Order Status ;Integer       ;CaptionML=[ENU=Source Order Status;
                                                              ESP=Estado orden origen] }
    { 23  ;   ;Source ID           ;Code20        ;CaptionML=[ENU=Source ID;
                                                              ESP=Id. origen] }
    { 24  ;   ;Source Batch Name   ;Code10        ;CaptionML=[ENU=Source Batch Name;
                                                              ESP=Nombre secci¢n origen] }
    { 25  ;   ;Source Ref. No.     ;Integer       ;CaptionML=[ENU=Source Ref. No.;
                                                              ESP=N§ ref. origen] }
    { 26  ;   ;Source Prod. Order Line;Integer    ;CaptionML=[ENU=Source Prod. Order Line;
                                                              ESP=L¡nea O.P. origen] }
    { 27  ;   ;Primary Order Status;Integer       ;CaptionML=[ENU=Primary Order Status;
                                                              ESP=Estado orden primaria] }
    { 28  ;   ;Primary Order No.   ;Code20        ;CaptionML=[ENU=Primary Order No.;
                                                              ESP=N§ orden primaria] }
    { 29  ;   ;Primary Order Line  ;Integer       ;CaptionML=[ENU=Primary Order Line;
                                                              ESP=L¡nea orden primaria] }
    { 30  ;   ;Primary Order Type  ;Integer       ;CaptionML=[ENU=Primary Order Type;
                                                              ESP=Tipo orden primaria] }
    { 31  ;   ;Original Quantity   ;Decimal       ;CaptionML=[ENU=Original Quantity;
                                                              ESP=Cantidad original];
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Remaining Quantity (Base);Decimal  ;CaptionML=[ENU=Remaining Quantity (Base);
                                                              ESP=Cantidad pendiente (base)];
                                                   DecimalPlaces=0:5 }
    { 33  ;   ;Untracked Quantity  ;Decimal       ;CaptionML=[ENU=Untracked Quantity;
                                                              ESP=Cantidad no seguida];
                                                   DecimalPlaces=0:5 }
    { 34  ;   ;Original Due Date   ;Date          ;CaptionML=[ENU=Original Due Date;
                                                              ESP=Fecha vencim. orig.] }
    { 35  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento] }
    { 36  ;   ;Planning Flexibility;Option        ;CaptionML=[ENU=Planning Flexibility;
                                                              ESP=Flexib. planificaci¢n];
                                                   OptionCaptionML=[ENU=Unlimited,None,Reduce Only;
                                                                    ESP=Ilimitada,Ninguna,S¢lo reducir];
                                                   OptionString=Unlimited,None,Reduce Only }
    { 37  ;   ;Fixed Date          ;Date          ;CaptionML=[ENU=Fixed Date;
                                                              ESP=Fecha fija] }
    { 38  ;   ;Action Message      ;Option        ;CaptionML=[ENU=Action Message;
                                                              ESP=Mensaje acci¢n];
                                                   OptionCaptionML=[ENU=" ,New,Change Qty.,Reschedule,Resched.& Chg. Qty.,Cancel";
                                                                    ESP=" ,Nuevo,Cambiar cdad.,Reprogramar,Reprog. y camb. cdad.,Cancelar"];
                                                   OptionString=[ ,New,Change Qty.,Reschedule,Resched.& Chg. Qty.,Cancel] }
    { 39  ;   ;Binding             ;Option        ;CaptionML=[ENU=Binding;
                                                              ESP=Atado];
                                                   OptionCaptionML=[ENU=" ,Order-to-Order";
                                                                    ESP=" ,Pedido contra pedido"];
                                                   OptionString=[ ,Order-to-Order];
                                                   Editable=No }
    { 40  ;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base)];
                                                   DecimalPlaces=0:5 }
    { 41  ;   ;Min. Quantity       ;Decimal       ;CaptionML=[ENU=Min. Quantity;
                                                              ESP=Cdad. m¡nima];
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial] }
    { 43  ;   ;Planning Line No.   ;Integer       ;CaptionML=[ENU=Planning Line No.;
                                                              ESP=N§ l¡nea planif.] }
    { 44  ;   ;Unit of Measure Code;Code10        ;CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida] }
    { 45  ;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5 }
    { 46  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5 }
    { 47  ;   ;Remaining Quantity  ;Decimal       ;CaptionML=[ENU=Remaining Quantity;
                                                              ESP=Cantidad pendiente];
                                                   DecimalPlaces=0:5 }
    { 48  ;   ;Finished Quantity   ;Decimal       ;CaptionML=[ENU=Finished Quantity;
                                                              ESP=Cantidad terminada];
                                                   DecimalPlaces=0:5 }
    { 50  ;   ;Planning Level Code ;Integer       ;CaptionML=[ENU=Planning Level Code;
                                                              ESP=C¢d. nivel planif.];
                                                   Editable=No }
    { 51  ;   ;Planning Line Phase ;Option        ;CaptionML=[ENU=Planning Line Phase;
                                                              ESP=Fase l¡nea planif.];
                                                   OptionCaptionML=[ENU=" ,Line Created,Routing Created,Exploded";
                                                                    ESP=" ,L¡nea creada,Ruta creada,Desplegada"];
                                                   OptionString=[ ,Line Created,Routing Created,Exploded] }
    { 52  ;   ;Due Time            ;Time          ;CaptionML=[ENU=Due Time;
                                                              ESP=Tiempo fin.] }
    { 53  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ESP=Venta a-N§ cliente] }
    { 54  ;   ;Drop Shipment       ;Boolean       ;CaptionML=[ENU=Drop Shipment;
                                                              ESP=Env¡o directo] }
    { 55  ;   ;Special Order       ;Boolean       ;CaptionML=[ENU=Special Order;
                                                              ESP=Pedido especial] }
    { 56  ;   ;Ref. Order No.      ;Code20        ;CaptionML=[ENU=Ref. Order No.;
                                                              ESP=N§ orden ref.];
                                                   Editable=No }
    { 57  ;   ;Ref. Line No.       ;Integer       ;CaptionML=[ENU=Ref. Line No.;
                                                              ESP=N§ l¡n. ref.];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 58  ;   ;Derived from Blanket Order;Boolean ;CaptionML=[ENU=Derived from Blanket Order;
                                                              ESP=Proviene de ped. abierto] }
    { 59  ;   ;Ref. Blanket Order No.;Code20      ;CaptionML=[ENU=Ref. Blanket Order No.;
                                                              ESP=N§ ped. abierto ref.] }
    { 60  ;   ;Tracking Reference  ;Integer       ;CaptionML=[ENU=Tracking Reference;
                                                              ESP=Referencia seguimiento] }
    { 61  ;   ;Lot No.             ;Code20        ;CaptionML=[ENU=Lot No.;
                                                              ESP=N§ lote] }
    { 62  ;   ;Serial No.          ;Code20        ;CaptionML=[ENU=Serial No.;
                                                              ESP=N§ serie] }
    { 63  ;   ;Max. Quantity       ;Decimal       ;CaptionML=[ENU=Max. Quantity;
                                                              ESP=Cantidad m x.];
                                                   DecimalPlaces=0:5 }
    { 64  ;   ;Safety Stock Quantity;Decimal      ;CaptionML=[ENU=Safety Stock Quantity;
                                                              ESP=Stock de seguridad];
                                                   DecimalPlaces=0:5 }
    { 65  ;   ;Is Exception Order  ;Boolean       ;CaptionML=[ENU=Is Exception Order;
                                                              ESP=Pedido excepci¢n] }
    { 66  ;   ;Transfer Location Not Planned;Boolean;
                                                   CaptionML=[ENU=Transfer Location Not Planned;
                                                              ESP=Alm. transferencia no planificada] }
    { 67  ;   ;Expiration Date     ;Date          ;CaptionML=[ENU=Expiration Date;
                                                              ESP=Fecha caducidad];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
    {    ;Item No.,Variant Code,Location Code,Due Date,Attribute Priority,Order Priority }
    {    ;Item No.,Variant Code,Location Code,IsSupply,Primary Order Status,Primary Order No.,Due Date,Order Priority }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Tab99000853, TransferToTrackingEntry: Illegal Source Type: %1.;ESP=Tab99000853, TransfDesdeMovSeguimien: Tipo fuente incorrecta: %1.';

    PROCEDURE TransferFromItemLedgerEntry@1(VAR ItemLedgerEntry@1000 : Record 32;VAR TrackingEntry@1004 : Record 337);
    VAR
      ReservEntry@1001 : Record 337;
      ReserveItemLedgerEntry@1002 : Codeunit 99000841;
      AutoReservedQty@1003 : Decimal;
    BEGIN
      "Source Type" := DATABASE::"Item Ledger Entry";
      "Source Ref. No." := ItemLedgerEntry."Entry No.";
      "Item No." := ItemLedgerEntry."Item No.";
      "Variant Code" := ItemLedgerEntry."Variant Code";
      "Location Code" := ItemLedgerEntry."Location Code";
      Quantity := ItemLedgerEntry.Quantity;
      "Remaining Quantity" := ItemLedgerEntry."Remaining Quantity";
      "Finished Quantity" := Quantity - "Remaining Quantity";
      "Quantity (Base)" := ItemLedgerEntry.Quantity;
      "Remaining Quantity (Base)" := ItemLedgerEntry."Remaining Quantity";
      ItemLedgerEntry.CALCFIELDS("Reserved Quantity");
      ReserveItemLedgerEntry.FilterReservFor(ReservEntry,ItemLedgerEntry);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" :=
        ItemLedgerEntry."Remaining Quantity" -
        ItemLedgerEntry."Reserved Quantity" +
        AutoReservedQty;
      "Unit of Measure Code" := ItemLedgerEntry."Unit of Measure Code";
      "Qty. per Unit of Measure" := 1;
      IsSupply := ItemLedgerEntry.Positive;
      "Due Date" := ItemLedgerEntry."Posting Date";
      "Lot No." := ItemLedgerEntry."Lot No.";
      "Serial No." := ItemLedgerEntry."Serial No.";
      IF ("Lot No." <> '') OR ("Serial No." <> '') THEN
        "Tracking Reference" := "Line No.";
      "Planning Flexibility" := "Planning Flexibility"::None;
    END;

    PROCEDURE TransferFromSalesLine@2(VAR SalesLine@1000 : Record 37;VAR TrackingEntry@1004 : Record 337);
    VAR
      ReservEntry@1001 : Record 337;
      ReserveSalesLine@1002 : Codeunit 99000832;
      AutoReservedQty@1003 : Decimal;
    BEGIN
      SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
      "Source Type" := DATABASE::"Sales Line";
      "Source Order Status" := SalesLine."Document Type";
      "Source ID" := SalesLine."Document No.";
      "Source Ref. No." := SalesLine."Line No.";
      "Item No." := SalesLine."No.";
      "Variant Code" := SalesLine."Variant Code";
      "Location Code" := SalesLine."Location Code";
      "Bin Code" := SalesLine."Bin Code";
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);
      AutoReservedQty := - TransferBindings(ReservEntry,TrackingEntry);
      IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN BEGIN
        SalesLine."Reserved Qty. (Base)" := - SalesLine."Reserved Qty. (Base)";
        AutoReservedQty := - AutoReservedQty;
      END;
      "Untracked Quantity" :=
        SalesLine."Outstanding Qty. (Base)" -
        SalesLine."Reserved Qty. (Base)" +
        AutoReservedQty;
      Quantity := SalesLine.Quantity;
      "Remaining Quantity" := SalesLine."Outstanding Quantity";
      "Finished Quantity" := SalesLine."Quantity Shipped";
      "Quantity (Base)" := SalesLine."Quantity (Base)";
      "Remaining Quantity (Base)" := SalesLine."Outstanding Qty. (Base)";
      "Unit of Measure Code" := SalesLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
      IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN
        ChangeSign;
      IsSupply := "Untracked Quantity" < 0;
      "Due Date" := SalesLine."Shipment Date";
      "Planning Flexibility" := "Planning Flexibility"::None;
      IF SalesLine."Blanket Order No." <> '' THEN BEGIN
        "Sell-to Customer No." := SalesLine."Sell-to Customer No.";
        "Derived from Blanket Order" := TRUE;
        "Ref. Blanket Order No." := SalesLine."Blanket Order No.";
      END;
      "Drop Shipment" := SalesLine."Drop Shipment";
      "Special Order" := SalesLine."Special Order";
    END;

    PROCEDURE TransferFromComponent@7(VAR ProdOrderComp@1000 : Record 5407;VAR TrackingEntry@1004 : Record 337);
    VAR
      ReservEntry@1001 : Record 337;
      ReserveProdOrderComp@1002 : Codeunit 99000838;
      AutoReservedQty@1003 : Decimal;
    BEGIN
      "Source Type" := DATABASE::"Prod. Order Component";
      "Source Order Status" := ProdOrderComp.Status;
      "Source ID" := ProdOrderComp."Prod. Order No.";
      "Source Prod. Order Line" := ProdOrderComp."Prod. Order Line No.";
      "Source Ref. No." := ProdOrderComp."Line No.";
      "Ref. Order No." := ProdOrderComp."Prod. Order No.";
      "Ref. Line No." := ProdOrderComp."Prod. Order Line No.";
      "Item No." := ProdOrderComp."Item No.";
      "Variant Code" := ProdOrderComp."Variant Code";
      "Location Code" := ProdOrderComp."Location Code";
      "Bin Code" := ProdOrderComp."Bin Code";
      "Due Date" := ProdOrderComp."Due Date";
      "Due Time" := ProdOrderComp."Due Time";
      "Planning Flexibility" := "Planning Flexibility"::None;
      "Planning Level Code" := ProdOrderComp."Planning Level Code";
      ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
      IF ProdOrderComp.Status IN [ProdOrderComp.Status::Released,ProdOrderComp.Status::Finished] THEN
        ProdOrderComp.CALCFIELDS("Act. Consumption (Qty)");
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      AutoReservedQty := - TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" :=
        ProdOrderComp."Remaining Qty. (Base)" -
        ProdOrderComp."Reserved Qty. (Base)" +
        AutoReservedQty;
      Quantity := ProdOrderComp."Expected Quantity";
      "Remaining Quantity" := ProdOrderComp."Remaining Quantity";
      "Finished Quantity" := ProdOrderComp."Act. Consumption (Qty)";
      "Quantity (Base)" := ProdOrderComp."Expected Qty. (Base)";
      "Remaining Quantity (Base)" := ProdOrderComp."Remaining Qty. (Base)";
      "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
      "Qty. per Unit of Measure" := ProdOrderComp."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" < 0;
    END;

    PROCEDURE TransferFromPlanComponent@8(VAR PlanComponent@1000 : Record 99000829;VAR TrackingEntry@1008 : Record 337);
    VAR
      ProdOrderComp@1001 : Record 5407;
      ReservEntry@1002 : Record 337;
      OppositeReservEntry@1007 : Record 337;
      ReservePlanningComponent@1003 : Codeunit 99000840;
      ReserveProdOrderComp@1004 : Codeunit 99000838;
      ReservedQty@1005 : Decimal;
      AutoReservedQty@1006 : Decimal;
    BEGIN
      "Source Type" := DATABASE::"Planning Component";
      "Source ID" := PlanComponent."Worksheet Template Name";
      "Source Batch Name" := PlanComponent."Worksheet Batch Name";
      "Source Prod. Order Line" := PlanComponent."Worksheet Line No.";
      "Source Ref. No." := PlanComponent."Line No.";
      "Source Order Status" := PlanComponent."Ref. Order Status";
      "Ref. Order No." := PlanComponent."Ref. Order No.";
      "Ref. Line No." := PlanComponent."Ref. Order Line No.";
      "Item No." := PlanComponent."Item No.";
      "Variant Code" := PlanComponent."Variant Code";
      "Location Code" := PlanComponent."Location Code";
      "Bin Code" := PlanComponent."Bin Code";
      "Due Date" := PlanComponent."Due Date";
      "Due Time" := PlanComponent."Due Time";
      "Planning Flexibility" := "Planning Flexibility"::None;
      "Planning Level Code" := PlanComponent."Planning Level Code";
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanComponent);
      AutoReservedQty := - TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" :=
        PlanComponent."Expected Quantity (Base)" -
        PlanComponent."Reserved Qty. (Base)" +
        AutoReservedQty;
      IF ProdOrderComp.GET(
           PlanComponent."Ref. Order Status",
           PlanComponent."Ref. Order No.",
           PlanComponent."Ref. Order Line No.",
           PlanComponent."Line No.")
      THEN BEGIN
        "Original Quantity" := ProdOrderComp."Expected Quantity";
        ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
        IF ProdOrderComp."Reserved Qty. (Base)" > 0 THEN BEGIN
          ReservedQty := ProdOrderComp."Reserved Qty. (Base)";
          ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
          ReservEntry.SETCURRENTKEY(
            "Source ID",
            "Source Ref. No.",
            "Source Type",
            "Source Subtype",
            "Source Batch Name",
            "Source Prod. Order Line",
            "Reservation Status");
          ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
          ReservEntry.SETRANGE(Binding,ReservEntry.Binding::"Order-to-Order");
          IF ReservEntry.FIND('-') THEN BEGIN
            // Retrieving information about primary order:
            IF ReservEntry.Positive THEN
              OppositeReservEntry.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive)
            ELSE
              OppositeReservEntry := ReservEntry;
            IF "Primary Order No." = '' THEN BEGIN
              "Primary Order Type" := OppositeReservEntry."Source Type";
              "Primary Order Status" := OppositeReservEntry."Source Subtype";
              "Primary Order No." := OppositeReservEntry."Source ID";
            END;

            Binding := ReservEntry.Binding;
            REPEAT
              ReservedQty := ReservedQty + ReservEntry."Quantity (Base)";
            UNTIL ReservEntry.NEXT = 0;
          END;
          IF ReservedQty > "Untracked Quantity" THEN
            "Untracked Quantity" := 0
          ELSE
            "Untracked Quantity" := "Untracked Quantity" - ReservedQty;
        END;
      END ELSE BEGIN
        "Primary Order Type" := DATABASE::"Planning Component";
        "Primary Order Status" := PlanComponent."Ref. Order Status";
        "Primary Order No." := PlanComponent."Ref. Order No.";
      END;
      Quantity := PlanComponent."Expected Quantity";
      "Remaining Quantity" := PlanComponent."Expected Quantity";
      "Finished Quantity" := 0;
      "Quantity (Base)" := PlanComponent."Expected Quantity (Base)";
      "Remaining Quantity (Base)" := PlanComponent."Expected Quantity (Base)";
      "Unit of Measure Code" := PlanComponent."Unit of Measure Code";
      "Qty. per Unit of Measure" := PlanComponent."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" < 0;
    END;

    PROCEDURE TransferFromPurchaseLine@3(VAR PurchaseLine@1000 : Record 39;VAR TrackingEntry@1004 : Record 337);
    VAR
      ReservEntry@1001 : Record 337;
      ReservePurchLine@1002 : Codeunit 99000834;
      AutoReservedQty@1003 : Decimal;
    BEGIN
      PurchaseLine.TESTFIELD(Type,PurchaseLine.Type::Item);
      "Source Type" := DATABASE::"Purchase Line";
      "Source Order Status" := PurchaseLine."Document Type";
      "Source ID" := PurchaseLine."Document No.";
      "Source Ref. No." := PurchaseLine."Line No.";
      "Item No." := PurchaseLine."No.";
      "Variant Code" := PurchaseLine."Variant Code";
      "Location Code" := PurchaseLine."Location Code";
      "Bin Code" := PurchaseLine."Bin Code";
      ReservePurchLine.FilterReservFor(ReservEntry,PurchaseLine);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      PurchaseLine.CALCFIELDS("Reserved Qty. (Base)");
      IF PurchaseLine."Document Type" = PurchaseLine."Document Type"::"Return Order" THEN BEGIN
        AutoReservedQty := - AutoReservedQty;
        PurchaseLine."Reserved Qty. (Base)" := - PurchaseLine."Reserved Qty. (Base)";
      END;
      "Untracked Quantity" :=
        PurchaseLine."Outstanding Qty. (Base)" -
        PurchaseLine."Reserved Qty. (Base)" +
        AutoReservedQty;
      "Min. Quantity" :=
        PurchaseLine."Reserved Qty. (Base)" -
        AutoReservedQty;
      Quantity := PurchaseLine.Quantity;
      "Remaining Quantity" := PurchaseLine."Outstanding Quantity";
      "Finished Quantity" := PurchaseLine."Quantity Received";
      "Quantity (Base)" := PurchaseLine."Quantity (Base)";
      "Remaining Quantity (Base)" := PurchaseLine."Outstanding Qty. (Base)";
      "Unit of Measure Code" := PurchaseLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := PurchaseLine."Qty. per Unit of Measure";
      IF PurchaseLine."Document Type" = PurchaseLine."Document Type"::"Return Order" THEN BEGIN
        ChangeSign;
        "Planning Flexibility" := "Planning Flexibility"::None;
        IsSupply := FALSE;
      END ELSE BEGIN
        "Planning Flexibility" := PurchaseLine."Planning Flexibility";
        IsSupply := "Untracked Quantity" >= 0;
      END;
      "Due Date" := PurchaseLine."Expected Receipt Date";
      "Drop Shipment" := PurchaseLine."Drop Shipment";
      "Special Order" := PurchaseLine."Special Order";
    END;

    PROCEDURE TransferFromProdOrderLine@4(VAR ProdOrderLine@1000 : Record 5406;VAR TrackingEntry@1004 : Record 337);
    VAR
      ReservEntry@1001 : Record 337;
      ReserveProdOrderLine@1002 : Codeunit 99000837;
      AutoReservedQty@1003 : Decimal;
    BEGIN
      "Source Type" := DATABASE::"Prod. Order Line";
      "Source Order Status" := ProdOrderLine.Status;
      "Source ID" := ProdOrderLine."Prod. Order No.";
      "Source Prod. Order Line" := ProdOrderLine."Line No.";
      "Item No." := ProdOrderLine."Item No.";
      "Variant Code" := ProdOrderLine."Variant Code";
      "Location Code" := ProdOrderLine."Location Code";
      "Bin Code" := ProdOrderLine."Bin Code";
      "Due Date" := ProdOrderLine."Due Date";
      "Starting Date" := ProdOrderLine."Starting Date";
      "Planning Flexibility" := ProdOrderLine."Planning Flexibility";
      "Planning Level Code" := ProdOrderLine."Planning Level Code";
      ProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" :=
        ProdOrderLine."Remaining Qty. (Base)" -
        ProdOrderLine."Reserved Qty. (Base)" +
        AutoReservedQty;
      "Min. Quantity" :=
        ProdOrderLine."Reserved Qty. (Base)" -
        AutoReservedQty;
      Quantity := ProdOrderLine.Quantity;
      "Remaining Quantity" := ProdOrderLine."Remaining Quantity";
      "Finished Quantity" := ProdOrderLine."Finished Quantity";
      "Quantity (Base)" := ProdOrderLine."Quantity (Base)";
      "Remaining Quantity (Base)" := ProdOrderLine."Remaining Qty. (Base)";
      "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := ProdOrderLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" >= 0;
    END;

    PROCEDURE TransferFromRequisitionLine@5(VAR RequisitionLine@1000 : Record 246;VAR TrackingEntry@1004 : Record 337);
    VAR
      ReservEntry@1001 : Record 337;
      ReserveReqLine@1002 : Codeunit 99000833;
      AutoReservedQty@1003 : Decimal;
    BEGIN
      RequisitionLine.TESTFIELD(Type,RequisitionLine.Type::Item);
      "Source Type" := DATABASE::"Requisition Line";
      "Source ID" := RequisitionLine."Worksheet Template Name";
      "Source Batch Name" := RequisitionLine."Journal Batch Name";
      "Source Ref. No." := RequisitionLine."Line No.";
      "Item No." := RequisitionLine."No.";
      "Variant Code" := RequisitionLine."Variant Code";
      "Location Code" := RequisitionLine."Location Code";
      "Bin Code" := RequisitionLine."Bin Code";
      RequisitionLine.CALCFIELDS("Reserved Qty. (Base)");
      ReserveReqLine.FilterReservFor(ReservEntry,RequisitionLine);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" :=
        RequisitionLine."Quantity (Base)" -
        RequisitionLine."Reserved Qty. (Base)" +
        AutoReservedQty;
      "Min. Quantity" :=
        RequisitionLine."Reserved Qty. (Base)" -
        AutoReservedQty;
      Quantity := RequisitionLine.Quantity;
      "Finished Quantity" := 0;
      "Remaining Quantity" := RequisitionLine.Quantity;
      "Quantity (Base)" := RequisitionLine."Quantity (Base)";
      "Remaining Quantity (Base)" := RequisitionLine."Quantity (Base)";
      "Unit of Measure Code" := RequisitionLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := RequisitionLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" >= 0;
      "Due Date" := RequisitionLine."Due Date";
      "Planning Flexibility" := RequisitionLine."Planning Flexibility";
    END;

    PROCEDURE TransferFromOutboundTransfPlan@16(VAR RequisitionLine@1000 : Record 246;VAR TrackingEntry@1004 : Record 337);
    VAR
      ReservEntry@1001 : Record 337;
      ReserveReqLine@1002 : Codeunit 99000833;
      AutoReservedQty@1003 : Decimal;
    BEGIN
      RequisitionLine.TESTFIELD(Type,RequisitionLine.Type::Item);
      "Source Type" := DATABASE::"Requisition Line";
      "Source Order Status" := 1; // Inbound
      "Source ID" := RequisitionLine."Worksheet Template Name";
      "Source Batch Name" := RequisitionLine."Journal Batch Name";
      "Source Ref. No." := RequisitionLine."Line No.";
      "Item No." := RequisitionLine."No.";
      "Variant Code" := RequisitionLine."Variant Code";
      "Location Code" := RequisitionLine."Transfer-from Code";
      "Bin Code" := RequisitionLine."Bin Code";
      RequisitionLine.CALCFIELDS("Reserved Qty. (Base)");
      ReserveReqLine.FilterReservFor(ReservEntry,RequisitionLine);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" :=
        RequisitionLine."Quantity (Base)" -
        RequisitionLine."Reserved Qty. (Base)" +
        AutoReservedQty;
      "Min. Quantity" :=
        RequisitionLine."Reserved Qty. (Base)" -
        AutoReservedQty;
      Quantity := RequisitionLine.Quantity;
      "Finished Quantity" := 0;
      "Remaining Quantity" := RequisitionLine.Quantity;
      "Quantity (Base)" := RequisitionLine."Quantity (Base)";
      "Remaining Quantity (Base)" := RequisitionLine."Quantity (Base)";
      "Unit of Measure Code" := RequisitionLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := RequisitionLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" <= 0;
      "Due Date" := RequisitionLine."Transfer Shipment Date";
    END;

    PROCEDURE TransferFromOutboundTransfer@14(VAR TransLine@1000 : Record 5741;VAR TrackingEntry@1004 : Record 337);
    VAR
      ReservEntry@1001 : Record 337;
      DummyTempTrackingEntry@1007 : TEMPORARY Record 337;
      CrntInvProfile@1008 : Record 99000853;
      ReserveTransLine@1002 : Codeunit 99000836;
      AutoReservedQty@1003 : Decimal;
      MinQtyInbnd@1005 : Decimal;
      MinQtyOutbnd@1006 : Decimal;
    BEGIN
      "Source Type" := DATABASE::"Transfer Line";
      "Source Order Status" := 0; // Outbound
      "Source ID" := TransLine."Document No.";
      "Source Ref. No." := TransLine."Line No.";
      "Item No." := TransLine."Item No.";
      "Variant Code" := TransLine."Variant Code";
      "Location Code" := TransLine."Transfer-from Code";

      TransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)","Reserved Qty. Inbnd. (Base)");
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,0);
      AutoReservedQty := - TransferBindings(ReservEntry,TrackingEntry);
      MinQtyOutbnd := TransLine."Reserved Qty. Outbnd. (Base)" - AutoReservedQty;

      CrntInvProfile := Rec;
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,1);
      AutoReservedQty := TransferBindings(ReservEntry,DummyTempTrackingEntry);
      MinQtyInbnd := TransLine."Reserved Qty. Inbnd. (Base)" - AutoReservedQty;
      Rec := CrntInvProfile;

      IF MinQtyInbnd > MinQtyOutbnd THEN
        "Min. Quantity" := MinQtyInbnd
      ELSE
        "Min. Quantity" := MinQtyOutbnd;

      "Untracked Quantity" := TransLine."Outstanding Qty. (Base)" - MinQtyOutbnd;
      Quantity := TransLine.Quantity;
      "Remaining Quantity" := TransLine."Outstanding Quantity";
      "Finished Quantity" := TransLine."Quantity Shipped";
      "Quantity (Base)" := TransLine."Quantity (Base)";
      "Remaining Quantity (Base)" := TransLine."Outstanding Qty. (Base)";
      "Unit of Measure Code" := TransLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" < 0;
      "Due Date" := TransLine."Shipment Date";
      "Planning Flexibility" := TransLine."Planning Flexibility";
    END;

    PROCEDURE TransferFromInboundTransfer@15(VAR TransLine@1000 : Record 5741;VAR TrackingEntry@1004 : Record 337);
    VAR
      ReservEntry@1001 : Record 337;
      DummyTempTrackingEntry@1007 : TEMPORARY Record 337;
      CrntInvProfile@1008 : Record 99000853;
      ReserveTransLine@1002 : Codeunit 99000836;
      AutoReservedQty@1003 : Decimal;
      MinQtyInbnd@1006 : Decimal;
      MinQtyOutbnd@1005 : Decimal;
    BEGIN
      "Source Type" := DATABASE::"Transfer Line";
      "Source Order Status" := 1; // Inbound
      "Source ID" := TransLine."Document No.";
      "Source Ref. No." := TransLine."Line No.";
      "Source Prod. Order Line" := TransLine."Derived From Line No.";
      "Item No." := TransLine."Item No.";
      "Variant Code" := TransLine."Variant Code";
      "Location Code" := TransLine."Transfer-to Code";

      TransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)","Reserved Qty. Inbnd. (Base)");
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,1);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      MinQtyInbnd := TransLine."Reserved Qty. Inbnd. (Base)" - AutoReservedQty;

      CrntInvProfile := Rec;
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,0);
      AutoReservedQty := - TransferBindings(ReservEntry,DummyTempTrackingEntry);
      MinQtyOutbnd := TransLine."Reserved Qty. Outbnd. (Base)" - AutoReservedQty;
      Rec := CrntInvProfile;

      IF MinQtyInbnd > MinQtyOutbnd THEN
        "Min. Quantity" := MinQtyInbnd
      ELSE
        "Min. Quantity" := MinQtyOutbnd;

      "Untracked Quantity" := TransLine."Outstanding Qty. (Base)" - MinQtyInbnd;
      Quantity := TransLine.Quantity;
      "Remaining Quantity" := TransLine."Outstanding Quantity";
      "Finished Quantity" := TransLine."Quantity Received";
      "Quantity (Base)" := TransLine."Quantity (Base)";
      "Remaining Quantity (Base)" := TransLine."Outstanding Qty. (Base)";
      "Unit of Measure Code" := TransLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" >= 0;
      "Starting Date" := TransLine."Shipment Date";
      "Due Date" := TransLine."Receipt Date";
      "Planning Flexibility" := TransLine."Planning Flexibility";
    END;

    PROCEDURE TransferFromServiceInvLine@17(VAR ServiceInvLine@1000 : Record 5902;VAR TrackingEntry@1004 : Record 337);
    VAR
      ReservEntry@1001 : Record 337;
      ReserveServiceInvLine@1002 : Codeunit 99000842;
      AutoReservedQty@1003 : Decimal;
    BEGIN
      ServiceInvLine.TESTFIELD(Type,ServiceInvLine.Type::Item);
      "Source Type" := DATABASE::"Service Line";
      "Source Order Status" := ServiceInvLine."Document Type";
      "Source ID" := ServiceInvLine."Document No.";
      "Source Ref. No." := ServiceInvLine."Line No.";
      "Item No." := ServiceInvLine."No.";
      "Variant Code" := ServiceInvLine."Variant Code";
      "Location Code" := ServiceInvLine."Location Code";
      ServiceInvLine.CALCFIELDS("Reserved Qty. (Base)");
      ReserveServiceInvLine.FilterReservFor(ReservEntry,ServiceInvLine);
      AutoReservedQty := - TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" :=
        ServiceInvLine."Outstanding Qty. (Base)" -
        ServiceInvLine."Reserved Qty. (Base)" +
        AutoReservedQty;
      Quantity := ServiceInvLine.Quantity;
      "Remaining Quantity" := ServiceInvLine.Quantity;
      "Finished Quantity" := 0;
      "Quantity (Base)" := ServiceInvLine."Quantity (Base)";
      "Remaining Quantity (Base)" := ServiceInvLine."Outstanding Qty. (Base)";
      "Unit of Measure Code" := ServiceInvLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := ServiceInvLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" < 0;
      "Due Date" := ServiceInvLine."Posting Date";
      "Planning Flexibility" := "Planning Flexibility"::None;
    END;

    PROCEDURE TransferBindings@10(VAR ReservEntry@1000 : Record 337;VAR TrackingEntry@1004 : Record 337) : Decimal;
    VAR
      OppositeReservEntry@1001 : Record 337;
      AutoReservedQty@1002 : Decimal;
      Found@1003 : Boolean;
      InsertTracking@1005 : Boolean;
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Source ID",
        "Source Ref. No.",
        "Source Type",
        "Source Subtype",
        "Source Batch Name",
        "Source Prod. Order Line",
        "Reservation Status");

      IF ReservEntry.FINDSET THEN
        REPEAT
          InsertTracking := NOT
            ((ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Reservation) AND
             (ReservEntry.Binding = ReservEntry.Binding::" "));
          IF InsertTracking AND
             ((ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '')) AND
             (ReservEntry."Source Type" <> DATABASE::"Item Ledger Entry")
          THEN BEGIN
            TrackingEntry := ReservEntry;
            TrackingEntry.INSERT;
          END;
          IF ReservEntry."Reservation Status" < ReservEntry."Reservation Status"::Surplus
          THEN BEGIN
            IF (ReservEntry.Binding = ReservEntry.Binding::"Order-to-Order")
            THEN BEGIN
              IF ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Reservation THEN
                AutoReservedQty := AutoReservedQty + ReservEntry."Quantity (Base)";
              IF NOT Found THEN BEGIN
                IF ReservEntry.Positive THEN
                  OppositeReservEntry.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive)
                ELSE
                  OppositeReservEntry := ReservEntry;
                IF "Primary Order No." = '' THEN BEGIN
                  "Primary Order Type" := OppositeReservEntry."Source Type";
                  "Primary Order Status" := OppositeReservEntry."Source Subtype";
                  "Primary Order No." := OppositeReservEntry."Source ID";
                  IF OppositeReservEntry."Source Type" <> DATABASE::"Prod. Order Component" THEN
                    "Primary Order Line" := OppositeReservEntry."Source Ref. No.";
                END;
                Binding := ReservEntry.Binding;
                Found := TRUE;
              END;
            END ELSE
              IF ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Reservation THEN
                IF ("Fixed Date" = 0D) OR ("Fixed Date" > ReservEntry."Shipment Date") THEN
                  "Fixed Date" := ReservEntry."Shipment Date";
          END;
        UNTIL ReservEntry.NEXT = 0;
      EXIT(AutoReservedQty);
    END;

    PROCEDURE TransferQtyFromItemTrgkEntry@18(VAR ItemTrackingEntry@1000 : Record 337);
    BEGIN
      "Original Quantity" := 0;
      Quantity := ItemTrackingEntry.Quantity;
      "Quantity (Base)" := ItemTrackingEntry."Quantity (Base)";
      "Finished Quantity" := 0;
      "Remaining Quantity" := ItemTrackingEntry.Quantity;
      "Remaining Quantity (Base)" := ItemTrackingEntry."Quantity (Base)";
      "Untracked Quantity" := ItemTrackingEntry."Quantity (Base)";
      IF NOT IsSupply THEN
        ChangeSign;
    END;

    PROCEDURE ReduceQtyByItemTracking@19(VAR NewInvProfile@1000 : Record 99000853);
    BEGIN
      "Original Quantity" -= NewInvProfile."Original Quantity";
      Quantity -= NewInvProfile.Quantity;
      "Quantity (Base)" -= NewInvProfile."Quantity (Base)";
      "Finished Quantity" -= NewInvProfile."Finished Quantity";
      "Remaining Quantity" -= NewInvProfile."Remaining Quantity";
      "Remaining Quantity (Base)" -= NewInvProfile."Remaining Quantity (Base)";
      "Untracked Quantity" -= NewInvProfile."Untracked Quantity";
    END;

    PROCEDURE ChangeSign@6();
    BEGIN
      "Original Quantity" := - "Original Quantity";
      "Remaining Quantity (Base)" := - "Remaining Quantity (Base)";
      "Untracked Quantity" := - "Untracked Quantity";
      "Quantity (Base)" := - "Quantity (Base)";
      Quantity := - Quantity;
      "Remaining Quantity" := - "Remaining Quantity";
      "Finished Quantity" := - "Finished Quantity";
    END;

    PROCEDURE TransferToTrackingEntry@9(VAR TrkgReservEntry@1000 : Record 337;UseSecondaryFields@1001 : Boolean);
    BEGIN
      CASE "Source Type" OF
        0:
          BEGIN
            // Surplus, Reorder Point
            TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Surplus;
            TrkgReservEntry."Suppressed Action Msg." := TRUE;
            EXIT;
          END;
        DATABASE::"Production Forecast Entry":
          BEGIN
            // Will be marked as Surplus
            TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Surplus;
            TrkgReservEntry."Source Type" := DATABASE::"Production Forecast Entry";
            TrkgReservEntry."Source ID" := "Source ID";
            TrkgReservEntry."Suppressed Action Msg." := TRUE;
          END;
        DATABASE::"Sales Line":
          BEGIN
            IF "Source Order Status" = 4 THEN BEGIN
              // Blanket Order will be marked as Surplus
              TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Surplus;
              TrkgReservEntry."Suppressed Action Msg." := TRUE;
            END;
            TrkgReservEntry."Source Type" := DATABASE::"Sales Line";
            TrkgReservEntry."Source Subtype" := "Source Order Status";
            TrkgReservEntry."Source ID" := "Source ID";
            TrkgReservEntry."Source Ref. No." := "Source Ref. No.";
          END;
        DATABASE::"Requisition Line":
          BEGIN
            TrkgReservEntry."Source Type" := DATABASE::"Requisition Line";
            TrkgReservEntry."Source Subtype" := "Source Order Status"; // To handle transfers
            TrkgReservEntry."Source ID" := "Source ID";
            TrkgReservEntry."Source Batch Name" := "Source Batch Name";
            TrkgReservEntry."Source Ref. No." := "Source Ref. No.";
          END;
        DATABASE::"Purchase Line":
          BEGIN
            TrkgReservEntry."Source Type" := DATABASE::"Purchase Line";
            TrkgReservEntry."Source Subtype" := "Source Order Status";
            TrkgReservEntry."Source ID" := "Source ID";
            TrkgReservEntry."Source Ref. No." := "Source Ref. No.";
          END;
        DATABASE::"Item Ledger Entry":
          BEGIN
            TrkgReservEntry."Source Type" := DATABASE::"Item Ledger Entry";
            TrkgReservEntry."Source Ref. No." := "Source Ref. No.";
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            TrkgReservEntry."Source Type" := DATABASE::"Prod. Order Line";
            TrkgReservEntry."Source Subtype" := "Source Order Status";
            TrkgReservEntry."Source ID" := "Source ID";
            TrkgReservEntry."Source Prod. Order Line" := "Source Prod. Order Line";
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            TrkgReservEntry."Source Type" := DATABASE::"Prod. Order Component";
            TrkgReservEntry."Source Subtype" := "Source Order Status";
            TrkgReservEntry."Source ID" := "Source ID";
            TrkgReservEntry."Source Prod. Order Line" := "Source Prod. Order Line";
            TrkgReservEntry."Source Ref. No." := "Source Ref. No.";
          END;
        DATABASE::"Planning Component":
          IF UseSecondaryFields THEN BEGIN
            TrkgReservEntry."Source Type" := DATABASE::"Prod. Order Component";
            TrkgReservEntry."Source Subtype" := "Source Order Status";
            TrkgReservEntry."Source ID" := "Ref. Order No.";
            TrkgReservEntry."Source Ref. No." := "Source Ref. No.";
            TrkgReservEntry."Source Prod. Order Line" := "Ref. Line No.";
          END ELSE BEGIN
            TrkgReservEntry."Source Type" := DATABASE::"Planning Component";
            TrkgReservEntry."Source ID" := "Source ID";
            TrkgReservEntry."Source Batch Name" := "Source Batch Name";
            TrkgReservEntry."Source Prod. Order Line" := "Source Prod. Order Line";
            TrkgReservEntry."Source Ref. No." := "Source Ref. No.";
            TrkgReservEntry."Source Subtype" := 0;
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TrkgReservEntry."Source Type" := DATABASE::"Transfer Line";
            IF IsSupply THEN BEGIN
              TrkgReservEntry."Source Subtype" := 1; // Supply => Direction := Inbound
              TrkgReservEntry."Source Prod. Order Line" := "Source Prod. Order Line";
            END ELSE
              TrkgReservEntry."Source Subtype" := 0; // Demand => Direction := Outbound
            TrkgReservEntry."Source ID" := "Source ID";
            TrkgReservEntry."Source Ref. No." := "Source Ref. No.";
          END;
        DATABASE::"Service Line":
          BEGIN
            TrkgReservEntry."Source Type" := DATABASE::"Service Line";
            TrkgReservEntry."Source Subtype" := "Source Order Status";
            TrkgReservEntry."Source ID" := "Source ID";
            TrkgReservEntry."Source Ref. No." := "Source Ref. No.";
          END;
        ELSE
          ERROR(Text000,"Source Type");
      END;

      TrkgReservEntry."Item No." := "Item No.";
      TrkgReservEntry."Location Code" := "Location Code";
      TrkgReservEntry.Description := '';
      TrkgReservEntry."Creation Date" := TODAY;
      TrkgReservEntry."Created By" := USERID;
      TrkgReservEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      TrkgReservEntry."Variant Code" := "Variant Code";
      TrkgReservEntry.Binding := Binding;
      TrkgReservEntry."Lot No." := "Lot No.";
      TrkgReservEntry."Serial No." := "Serial No.";
      TrkgReservEntry."Expiration Date" := "Expiration Date";

      IF IsSupply THEN
        TrkgReservEntry."Quantity (Base)" := "Untracked Quantity"
      ELSE
        TrkgReservEntry."Quantity (Base)" := -"Untracked Quantity";

      TrkgReservEntry.Quantity :=
        ROUND(TrkgReservEntry."Quantity (Base)" / TrkgReservEntry."Qty. per Unit of Measure",0.00001);
      TrkgReservEntry.Positive := TrkgReservEntry."Quantity (Base)" > 0;

      IF TrkgReservEntry."Reservation Status" <> TrkgReservEntry."Reservation Status"::Surplus THEN
        IF ("Planning Level Code" > 0) OR
           (Binding = Binding::"Order-to-Order")
        THEN
          TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Reservation
        ELSE
          TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Tracking;

      IF TrkgReservEntry."Quantity (Base)" = 0 THEN BEGIN
        TrkgReservEntry."Expected Receipt Date" := "Due Date";
        TrkgReservEntry."Shipment Date" := "Due Date";
      END ELSE
        IF TrkgReservEntry.Positive THEN
          TrkgReservEntry."Expected Receipt Date" := "Due Date"
        ELSE
          TrkgReservEntry."Shipment Date" := "Due Date";
    END;

    PROCEDURE ActiveInWarehouse@23() : Boolean;
    VAR
      WhseValidateSourceLine@1000 : Codeunit 5777;
    BEGIN
      IF "Source Type" = DATABASE::"Transfer Line" THEN
        EXIT(WhseValidateSourceLine.WhseLinesExist("Source Type",0,"Source ID","Source Ref. No.",0,Quantity));

      EXIT(WhseValidateSourceLine.WhseLinesExist("Source Type","Source Order Status","Source ID","Source Ref. No.",0,Quantity));
    END;

    BEGIN
    END.
  }
}
