OBJECT Table 5950 Service Order Allocation
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ServOrderAlloc.RESET;
               IF ServOrderAlloc.FIND('+') THEN
                 "Entry No." := ServOrderAlloc."Entry No." + 1
               ELSE
                 "Entry No." := 1;
               TESTFIELD("Document No.");

               IF ("Service Item Line No." <> 0) AND
                  ("Resource No." <> '')
               THEN BEGIN
                 CheckAllocationEntry;
                 IF NOT HideDialog AND ServHeader.GET("Document Type","Document No.") THEN
                   ServOrderAllocMgt.CheckServiceItemLineFinished(ServHeader,"Service Item Line No.");
               END;

               IF Status = Status::Nonactive THEN BEGIN
                 IF ("Resource No." <> '') OR
                    ("Resource Group No." <> '')
                 THEN
                   CheckAllocationEntry;

                 IF ("Allocation Date" <> 0D) AND
                   (("Resource No." <> '') OR ("Resource Group No." <> ''))
                 THEN
                   VALIDATE(Status,Status::Active);
               END;
             END;

    OnModify=BEGIN
               TESTFIELD("Service Item Line No.");
               IF NOT HideDialog AND ServHeader.GET("Document Type","Document No.") THEN BEGIN
                 ServOrderAllocMgt.CheckServiceItemLineFinished(ServHeader,xRec."Service Item Line No.");
                 ServOrderAllocMgt.CheckServiceItemLineFinished(ServHeader,"Service Item Line No.");
               END;
               IF Status = Status::Active THEN
                 IF ("Resource No." = '') AND
                    ("Resource Group No." = '')
                 THEN
                   ERROR(Text008,FIELDCAPTION("Resource No."),FIELDCAPTION("Resource Group No."));
               CheckAllocationEntry;

               IF Status = Status::Nonactive THEN
                 IF ("Allocation Date" <> 0D) AND
                   (("Resource No." <> '') OR (Rec."Resource Group No." <> ''))
                 THEN
                   VALIDATE(Status,Status::Active);
             END;

    OnDelete=BEGIN
               IF NOT HideDialog AND ServHeader.GET("Document Type","Document No.") THEN
                 ServOrderAllocMgt.CheckServiceItemLineFinished(ServHeader,"Service Item Line No.");
             END;

    CaptionML=[ENU=Service Order Allocation;
               ESP=Asignaci¢n ped. servicio];
    LookupFormID=Form6001;
    DrillDownFormID=Form6001;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ESP=N§ mov.] }
    { 2   ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                CASE Status OF
                                                                  Status::Canceled:
                                                                    BEGIN
                                                                      CLEAR(ServLogMgt);
                                                                      ServLogMgt.ServHeaderCancelAllocation("Resource No.","Document Type","Document No.","Service Item Line No.");
                                                                    END;
                                                                  Status::Active:
                                                                    BEGIN
                                                                      CLEAR(ServLogMgt);
                                                                      ServLogMgt.ServHeaderAllocation("Resource No.","Document Type","Document No.","Service Item Line No.");
                                                                    END;
                                                                  Status::"Reallocation Needed":
                                                                    BEGIN
                                                                      CLEAR(ServLogMgt);
                                                                      ServLogMgt.ServHeaderReallocationNeeded("Resource No.","Document Type","Document No.","Service Item Line No.");
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Nonactive,Active,Finished,Canceled,Reallocation Needed;
                                                                    ESP=Inactivo,Activo,Terminado,Cancelado,Necesita reasignac.];
                                                   OptionString=Nonactive,Active,Finished,Canceled,Reallocation Needed;
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;OnLookup=VAR
                                                              ServOrderNo@1000 : Code[20];
                                                            BEGIN
                                                              ServOrderNo := "Document No.";
                                                              CLEAR(ServOrderMgt);
                                                              ServOrderMgt.ServHeaderLookup("Document Type",ServOrderNo);
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento];
                                                   Editable=No }
    { 4   ;   ;Allocation Date     ;Date          ;OnValidate=BEGIN
                                                                IF "Allocation Date" = 0D THEN
                                                                  IF Status <> Status::Nonactive THEN
                                                                    ERROR(Text001,FIELDCAPTION("Allocation Date"),FIELDCAPTION(Status),Status);

                                                                IF "Allocation Date" < WORKDATE THEN
                                                                  MESSAGE(Text002,FIELDCAPTION("Allocation Date"),"Allocation Date");
                                                              END;

                                                   CaptionML=[ENU=Allocation Date;
                                                              ESP=Fecha asignaci¢n] }
    { 5   ;   ;Resource No.        ;Code20        ;TableRelation=Resource;
                                                   OnValidate=BEGIN
                                                                IF "Resource No." <> '' THEN BEGIN
                                                                  ServmgtSetup.GET;
                                                                  Res.GET("Resource No.");
                                                                  "Resource Group No." := Res."Resource Group No.";
                                                                  IF ServmgtSetup."Resource Skills Option" = ServmgtSetup."Resource Skills Option"::"Warning Displayed"
                                                                  THEN BEGIN
                                                                    IF "Service Item Line No." <> 0 THEN BEGIN
                                                                      ServItemLine.GET("Document Type","Document No.","Service Item Line No.");
                                                                      IF NOT
                                                                         ServOrderAllocMgt.QualifiedForServiceItemLine(ServItemLine,"Resource No.")
                                                                      THEN
                                                                        ERROR(Text003,FIELDCAPTION("Resource No."),"Resource No.");
                                                                    END;
                                                                  END;

                                                                  IF ServmgtSetup."Service Zones Option" = ServmgtSetup."Service Zones Option"::"Warning Displayed"
                                                                  THEN BEGIN
                                                                    ServHeader.GET("Document Type","Document No.");
                                                                    Res."Service Zone Filter" := ServHeader."Service Zone Code";
                                                                    Res.CALCFIELDS("In Customer Zone");

                                                                    IF NOT Res."In Customer Zone" THEN
                                                                      IF NOT CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text004,
                                                                          FIELDCAPTION("Resource No."),
                                                                          "Resource No.",
                                                                          ServHeader.FIELDCAPTION("Service Zone Code"),
                                                                          ServHeader."Service Zone Code"), FALSE) THEN
                                                                        ERROR('');
                                                                  END;

                                                                  IF (Status = Status::"Reallocation Needed") OR (Status = Status::Active) THEN
                                                                    CreateReallocationEntry;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Resource No.;
                                                              ESP=N§ recurso] }
    { 6   ;   ;Resource Group No.  ;Code20        ;TableRelation="Resource Group";
                                                   OnValidate=BEGIN
                                                                IF ("Resource Group No." <> '') AND
                                                                   ("Resource Group No." <> xRec."Resource Group No.")
                                                                THEN BEGIN
                                                                  IF Res.GET("Resource No.") THEN
                                                                    IF "Resource Group No." <> Res."Resource Group No." THEN
                                                                      "Resource No." := '';
                                                                  IF (Status = Status::"Reallocation Needed") OR (Status = Status::Active) THEN
                                                                    CreateReallocationEntry;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Resource Group No.;
                                                              ESP=N§ fam. recurso] }
    { 7   ;   ;Service Item Line No.;Integer      ;TableRelation="Service Item Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                       Document No.=FIELD(Document No.));
                                                   OnValidate=BEGIN
                                                                IF NOT HideDialog AND ServHeader.GET("Document Type","Document No.") THEN
                                                                  ServOrderAllocMgt.CheckServiceItemLineFinished(ServHeader,"Service Item Line No.");
                                                                IF ServItemLine.GET("Document Type","Document No.","Service Item Line No.") THEN BEGIN
                                                                  "Service Item No." := ServItemLine."Service Item No.";
                                                                  "Service Item Serial No." := ServItemLine."Serial No.";
                                                                END ELSE BEGIN
                                                                  "Service Item No." := '';
                                                                  "Service Item Serial No." := '';
                                                                END;

                                                                CALCFIELDS("Service Item Description");
                                                              END;

                                                   CaptionML=[ENU=Service Item Line No.;
                                                              ESP=N§ l¡n. prod. servicio] }
    { 8   ;   ;Allocated Hours     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Allocated Hours" = 0 THEN
                                                                  IF Status <> Status::Nonactive THEN
                                                                    ERROR(
                                                                      Text005,
                                                                      FIELDCAPTION("Allocated Hours"),FIELDCAPTION(Status),Status);
                                                              END;

                                                   CaptionML=[ENU=Allocated Hours;
                                                              ESP=Horas asignadas];
                                                   DecimalPlaces=0:5 }
    { 9   ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                ValidateStartEndTime;
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ESP=Hora inicial] }
    { 10  ;   ;Finishing Time      ;Time          ;OnValidate=BEGIN
                                                                ValidateStartEndTime;
                                                              END;

                                                   CaptionML=[ENU=Finishing Time;
                                                              ESP=Hora finalizaci¢n] }
    { 11  ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 12  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ESP=C¢d. auditor¡a] }
    { 13  ;   ;Service Item No.    ;Code20        ;TableRelation="Service Item";
                                                   OnValidate=BEGIN
                                                                IF "Service Item No." <> '' THEN BEGIN
                                                                  ServItemLine.RESET;
                                                                  ServItemLine.SETRANGE("Document Type","Document Type");
                                                                  ServItemLine.SETRANGE("Document No.","Document No.");
                                                                  ServItemLine.SETRANGE("Service Item No.","Service Item No.");
                                                                  ServItemLine.FIND('-');
                                                                  VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              ServItemLine.RESET;
                                                              ServItemLine.SETRANGE("Document Type","Document Type");
                                                              ServItemLine.SETRANGE("Document No.","Document No.");
                                                              ServItemLine."Service Item No." := "Service Item No.";
                                                              IF FORM.RUNMODAL(0,ServItemLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                            END;

                                                   CaptionML=[ENU=Service Item No.;
                                                              ESP=N§ prod. servicio] }
    { 14  ;   ;Posted              ;Boolean       ;CaptionML=[ENU=Posted;
                                                              ESP=Registrado] }
    { 15  ;   ;Service Item Description;Text30    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Item Line".Description WHERE (Document Type=FIELD(Document Type),
                                                                                                             Document No.=FIELD(Document No.),
                                                                                                             Line No.=FIELD(Service Item Line No.)));
                                                   CaptionML=[ENU=Service Item Description;
                                                              ESP=Descripci¢n prod. servicio];
                                                   Editable=No }
    { 16  ;   ;Service Item Serial No.;Code20     ;OnValidate=BEGIN
                                                                IF "Service Item Serial No." <> '' THEN BEGIN
                                                                  ServItemLine.RESET;
                                                                  ServItemLine.SETRANGE("Document Type","Document Type");
                                                                  ServItemLine.SETRANGE("Document No.","Document No.");
                                                                  ServItemLine.SETRANGE("Serial No.","Service Item Serial No.");
                                                                  ServItemLine.FIND('-');
                                                                  VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              ServItemLine.RESET;
                                                              ServItemLine.SETRANGE("Document Type","Document Type");
                                                              ServItemLine.SETRANGE("Document No.","Document No.");
                                                              ServItemLine."Serial No." := "Service Item Serial No.";
                                                              IF FORM.RUNMODAL(0,ServItemLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                            END;

                                                   CaptionML=[ENU=Service Item Serial No.;
                                                              ESP=N§ serie prod. servicio] }
    { 17  ;   ;Repair Status       ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Item Line"."Repair Status Code" WHERE (Document Type=FIELD(Document Type),
                                                                                                                      Document No.=FIELD(Document No.),
                                                                                                                      Line No.=FIELD(Service Item Line No.)));
                                                   CaptionML=[ENU=Repair Status;
                                                              ESP=Estado reparaci¢n];
                                                   Editable=No }
    { 18  ;   ;Service Started     ;Boolean       ;CaptionML=[ENU=Service Started;
                                                              ESP=Servicio iniciado] }
    { 19  ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento];
                                                   OptionCaptionML=[ENU=Quote,Order;
                                                                    ESP=Oferta,Pedido];
                                                   OptionString=Quote,Order;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Status,Document Type,Document No.,Service Item Line No.,Allocation Date,Starting Time,Posted;
                                                   SumIndexFields=Allocated Hours }
    {    ;Document Type,Document No.,Status,Resource Group No.,Allocation Date,Starting Time,Posted;
                                                   SumIndexFields=Allocated Hours }
    {    ;Status,Document Type,Document No.,Service Item Line No.,Resource No.,Allocation Date,Starting Time,Posted;
                                                   SumIndexFields=Allocated Hours }
    {    ;Document Type,Document No.,Service Item Line No.,Allocation Date,Starting Time,Posted;
                                                   SumIndexFields=Allocated Hours }
    {    ;Resource No.,Document Type,Allocation Date,Status,Posted }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Only one %1 can be allocated to a %2.;ESP=S¢lo un %1 se puede asignar a un %2.';
      Text001@1001 : TextConst 'ENU=%1 must be filled in when the %2 is %3.;ESP=%1 debe ser rellenado cuando el %2 es %3.';
      Text002@1002 : TextConst 'ENU=The %1 %2 has expired.;ESP=El %1 %2 ha vencido.';
      Text003@1003 : TextConst 'ENU=%1 %2 is not qualified to carry out the service.;ESP=%1 %2 no est  cualificado para llevar a cabo el servicio.';
      Text004@1004 : TextConst 'ENU=%1 %2 is not working in %3 %4.;ESP=%1 %2 no est  trabajando en %3 %4.';
      Text005@1005 : TextConst 'ENU=%1 must be greater than 0 when the %2 is %3.;ESP=%1 debe ser mayor que 0 cuando el %2 es %3.';
      Text006@1006 : TextConst 'ENU=%1 cannot be greater than %2.;ESP=%1 no puede ser mayor que %2.';
      Text007@1007 : TextConst 'ENU=%1 with the field %2 selected cannot be found.;ESP=No se puede encontrar %1 con el campo %2 seleccionado.';
      ServHeader@1008 : Record 5900;
      ServItemLine@1009 : Record 5901;
      ServmgtSetup@1010 : Record 5911;
      ServOrderAlloc@1011 : Record 5950;
      ServOrderAlloc2@1012 : Record 5950;
      Res@1013 : Record 156;
      ResGr@1025 : Record 152;
      RepairStatus@1014 : Record 5927;
      RepairStatus2@1015 : Record 5927;
      ReallocEntryReasons@1016 : Form 6022;
      ServOrderMgt@1017 : Codeunit 5900;
      ServOrderAllocMgt@1018 : Codeunit 5930;
      ServLogMgt@1019 : Codeunit 5906;
      ChangeServItemLine@1020 : Boolean;
      HideDialog@1022 : Boolean;
      RepairStatusCode@1021 : Code[20];
      Flag@1023 : Boolean;
      Text008@1024 : TextConst 'ENU=%1 and %2 cannot be blank at the same time.;ESP=%1 y %2 no pueden estar en blanco al mismo tiempo.';

    PROCEDURE ValidateStartEndTime@1();
    BEGIN
      IF "Starting Time" = 0T THEN
        EXIT;
      IF "Finishing Time" = 0T THEN
        EXIT;
      IF "Starting Time" > "Finishing Time" THEN
        ERROR(Text006,FIELDCAPTION("Starting Time"),FIELDCAPTION("Finishing Time"));
    END;

    PROCEDURE CreateReallocationEntry@2();
    BEGIN
      RepairStatus2.RESET;
      RepairStatus2.SETRANGE(Initial,TRUE);
      IF RepairStatus2.FIND('-') THEN
        RepairStatusCode := RepairStatus2.Code;

      ChangeServItemLine := FALSE;

      CLEAR(ReallocEntryReasons);
      ReallocEntryReasons.SETRECORD(Rec);
      ReallocEntryReasons.SETTABLEVIEW(Rec);
      ReallocEntryReasons.SetNewResource("Resource No.","Resource Group No.");

      Flag := FALSE;
      IF NOT HideDialog THEN
        Flag := ReallocEntryReasons.RUNMODAL = ACTION::Yes
      ELSE
        Flag := TRUE;
      IF Flag THEN BEGIN
        "Reason Code" := ReallocEntryReasons.ReturnReasonCode;
        ServOrderAlloc2 := Rec;
        ServOrderAlloc.RESET;
        IF ServOrderAlloc.FIND('+') THEN
          ServOrderAlloc2."Entry No." := ServOrderAlloc."Entry No." + 1;
        CALCFIELDS("Repair Status");
        RepairStatus.GET("Repair Status");
        IF Status = Status::Active THEN BEGIN
          IF RepairStatus.Initial THEN BEGIN
            RepairStatus2.RESET;
            RepairStatus2.SETRANGE(Referred,TRUE);
            IF RepairStatus2.FIND('-') THEN BEGIN
              ChangeServItemLine := TRUE;
              RepairStatusCode := RepairStatus2.Code;
              VALIDATE(Status,Status::Active);
              ServOrderAlloc2."Resource No." := xRec."Resource No.";
              ServOrderAlloc2."Resource Group No." := xRec."Resource Group No.";
              ServOrderAlloc2."Reason Code" := xRec."Reason Code";
              IF "Service Started" THEN
                ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Finished)
              ELSE
                ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Canceled);
              ServOrderAlloc2.INSERT;
            END ELSE
              ERROR(
                Text007,
                RepairStatus.TABLECAPTION,RepairStatus.FIELDCAPTION(Referred));
          END ELSE IF RepairStatus."In Process" THEN BEGIN
            RepairStatus2.RESET;
            RepairStatus2.SETRANGE("Partly Serviced",TRUE);
            IF RepairStatus2.FIND('-') THEN BEGIN
              RepairStatusCode := RepairStatus2.Code;
              ChangeServItemLine := TRUE;
              VALIDATE(Status,Status::Active);
              ServOrderAlloc2."Resource No." := xRec."Resource No.";
              ServOrderAlloc2."Resource Group No." := xRec."Resource Group No.";
              ServOrderAlloc2."Reason Code" := xRec."Reason Code";
              IF "Service Started" THEN
                ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Finished)
              ELSE
                ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Canceled);
              ServOrderAlloc2.INSERT;
            END ELSE
              ERROR(
                Text007,
                RepairStatus.TABLECAPTION,RepairStatus.FIELDCAPTION("Partly Serviced"));
          END ELSE BEGIN
            VALIDATE(Status,Status::Active);
            ServOrderAlloc2."Resource No." := xRec."Resource No.";
            ServOrderAlloc2."Resource Group No." := xRec."Resource Group No.";
            ServOrderAlloc2."Reason Code" := xRec."Reason Code";
            IF "Service Started" THEN
              ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Finished)
            ELSE
              ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Canceled);
            ServOrderAlloc2.INSERT;
          END;
        END ELSE BEGIN
          VALIDATE(Status,Status::Active);
          ServOrderAlloc2."Resource No." := xRec."Resource No.";
          ServOrderAlloc2."Resource Group No." := xRec."Resource Group No.";
          ServOrderAlloc2."Reason Code" := xRec."Reason Code";
          IF "Service Started" THEN
            ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Finished)
          ELSE
            ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Canceled);
          ServOrderAlloc2.INSERT;
        END;
        IF ChangeServItemLine THEN BEGIN
          TESTFIELD("Service Item Line No.");
          ServItemLine.GET("Document Type","Document No.","Service Item Line No.");
          ServItemLine."Repair Status Code" := RepairStatusCode;
          ServItemLine.MODIFY(TRUE);
        END;
      END ELSE BEGIN
        "Resource No." := xRec."Resource No.";
        "Resource Group No." := xRec."Resource Group No.";
        EXIT;
      END;
    END;

    PROCEDURE SetHideDialog@3(HideDialog1@1000 : Boolean);
    BEGIN
      HideDialog := HideDialog1;
    END;

    PROCEDURE CheckAllocationEntry@4();
    BEGIN
      IF NOT HideDialog THEN BEGIN
        ServOrderAlloc.RESET;
        ServOrderAlloc.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
        ServOrderAlloc.SETRANGE("Document Type","Document Type");
        ServOrderAlloc.SETRANGE("Document No.","Document No.");
        ServOrderAlloc.SETRANGE("Service Item Line No.","Service Item Line No.");
        ServOrderAlloc.SETFILTER("Entry No.",'<>%1',"Entry No.");
        ServOrderAlloc.SETFILTER(Status,'%1|%2',ServOrderAlloc.Status::Active,ServOrderAlloc.Status::"Reallocation Needed");
        IF ServOrderAlloc.FIND('-') THEN BEGIN
          REPEAT
            IF ("Resource No." <> '') AND
               (ServOrderAlloc."Resource No." <> '') AND
               (ServOrderAlloc."Resource No." <> "Resource No.")
            THEN
              ERROR(Text000,Res.TABLECAPTION,ServItemLine.TABLECAPTION);

            IF ("Resource Group No." <> '') AND
               (ServOrderAlloc."Resource Group No." <> '') AND
               (ServOrderAlloc."Resource Group No." <> "Resource Group No.")
            THEN
              ERROR(Text000,ResGr.TABLECAPTION,ServItemLine.TABLECAPTION);
          UNTIL ServOrderAlloc.NEXT = 0;
        END;
      END;
    END;

    BEGIN
    END.
  }
}
