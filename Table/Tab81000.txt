OBJECT Table 81000 Control de Objetos
{
  OBJECT-PROPERTIES
  {
    Date=16/10/12;
    Time=[ 9:50:04];
    Modified=Yes;
    Version List=Ctrl2009;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Tipo                ;Option        ;OptionString=TableData,Table,Form,Report,Dataport,Codeunit,XMLport,MenuSuite,System,FieldNumber }
    { 2   ;   ;Id                  ;Integer        }
    { 5   ;   ;TipoInf             ;Option        ;OptionString=Cabecera,Nombre,Fecha,Hora,Tama¤o,Version,No Existe,Nuevo,Borrar }
    { 6   ;   ;Usuario             ;Code20         }
    { 7   ;   ;Expandido           ;Boolean       ;OnValidate=VAR
                                                                lrControl@1100244000 : Record 81000;
                                                              BEGIN
                                                                IF TipoInf= TipoInf::Cabecera THEN BEGIN
                                                                  lrControl.RESET;
                                                                  lrControl.SETRANGE(Usuario , Usuario);
                                                                  lrControl.SETFILTER(TipoInf,'<>%1',lrControl.TipoInf::Cabecera);
                                                                  lrControl.SETRANGE(Tipo , Tipo);
                                                                  lrControl.SETRANGE(Id   , Id);
                                                                  IF lrControl.FIND('-') THEN
                                                                    lrControl.MODIFYALL(Visible,Expandido AND Visible);
                                                                END;
                                                              END;
                                                               }
    { 8   ;   ;Texto1              ;Text150        }
    { 9   ;   ;Texto2              ;Text150        }
    { 10  ;   ;Visible             ;Boolean       ;OnValidate=BEGIN
                                                                IF TipoInf= TipoInf::Cabecera THEN BEGIN
                                                                  rControl.RESET;
                                                                  rControl.SETRANGE(Usuario,Usuario);
                                                                  rControl.SETFILTER(TipoInf,'<>%1',rControl.TipoInf::Cabecera);
                                                                  rControl.SETRANGE(Tipo,Tipo);
                                                                  rControl.SETRANGE(Id  , Id);
                                                                  IF rControl.FIND('-') THEN
                                                                    rControl.MODIFYALL(Visible,Visible AND Expandido);
                                                                END;
                                                              END;
                                                               }
    { 11  ;   ;Comentario          ;Code20         }
  }
  KEYS
  {
    {    ;Usuario,Tipo,Id,TipoInf                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TXNoEx@1100244000 : TextConst 'ESP=No existe';
      wNombreArchivo@1100244001 : Text[150];
      rControl@1100244002 : Record 81000;
      TxtNuevo@1103355000 : TextConst 'ESP=Nuevo desarrollo';
      Text001@1103355001 : TextConst 'ESP=Desea generar el fichero de control.';
      Text002@1103355002 : TextConst 'ESP=Desea importar la informacion del fichero de control';

    PROCEDURE Exportar@1100244001(VAR pwNombreArchivo@1100244005 : Text[150]);
    VAR
      lwObjetos@1100244000 : Record 2000000001;
      lwTmpObjetos@1100244001 : TEMPORARY Record 2000000001;
      lrControl@1100244003 : Record 81000;
      lArchivo@1100244002 : File;
      lwExt@1100244006 : Code[3];
      lwPos@1100244004 : Integer;
    BEGIN
      // Exportar

      // Pedir confirmacion antes de exportar el fichero de control

      IF NOT CONFIRM(Text001) THEN
        EXIT;

      CLEAR(lwExt);
      lwPos := STRPOS(pwNombreArchivo,'.');
      IF lwPos>0 THEN
       lwExt:= COPYSTR(pwNombreArchivo,lwPos+1,3);
      IF lwExt <> 'BSE' THEN BEGIN
        IF lwPos>0 THEN
          pwNombreArchivo:= COPYSTR(pwNombreArchivo,1,lwPos-1);
        pwNombreArchivo += '.BSE';
      END;

      lwObjetos.SETFILTER(Type,'<>%1',lwObjetos.Type::TableData);
      IF lwObjetos.FIND('-') THEN BEGIN

        //MESSAGE(lwObjetos.GETPOSITION);

        lArchivo.CREATE(pwNombreArchivo);
        lArchivo.WRITEMODE(TRUE);
        lArchivo.TEXTMODE(FALSE);
        lArchivo.QUERYREPLACE(TRUE);
        REPEAT
          lArchivo.WRITE(lwObjetos.Type);
          lArchivo.WRITE(lwObjetos.ID);
          lArchivo.WRITE(lwObjetos.Name);
          lArchivo.WRITE(lwObjetos."BLOB Size");
          lArchivo.WRITE(lwObjetos.Date);
          lArchivo.WRITE(lwObjetos.Time);
          lArchivo.WRITE(lwObjetos."Version List");
        UNTIL lwObjetos.NEXT=0;

      END
      ELSE
        MESSAGE('No se encuentra nada');

      MESSAGE('Exportaci¢n terminada');
    END;

    PROCEDURE Importar@1100244012(pwNombreArchivo@1100244000 : Text[150]);
    VAR
      lwExt@1100244001 : Code[3];
      lwPos@1100244002 : Integer;
      lrControl@1100244003 : Record 81000;
    BEGIN
      // Importar
      // Seg£n el formato de archivo direcciona a una funci¢n u a otra

      // AJS 19.02.2008
      // Pedimos confirmacion al usuario

      IF NOT CONFIRM(Text002) THEN
        EXIT;

      IF NOT EXISTS(pwNombreArchivo) THEN
        ERROR ('No se encontro Archivo %1',pwNombreArchivo);

      lrControl.RESET;
      lrControl.SETRANGE(Usuario,USERID);
      IF lrControl.FINDSET(TRUE) THEN
        lrControl.DELETEALL;

      CLEAR(lwExt);
      lwPos := STRPOS(pwNombreArchivo,'.');
      IF lwPos>0 THEN
       lwExt:= COPYSTR(pwNombreArchivo,lwPos+1,3);

      CASE lwExt OF
        'BSE' :
        BEGIN
          ImportarBASE(pwNombreArchivo);
          BuscarObjetosNuevos;
        END;
        'FOB' :
        BEGIN
          ImportarFOB(pwNombreArchivo);
          BuscarObjetosNuevos;
        END;
      END;
      MESSAGE('Importacion terminada');
    END;

    PROCEDURE ImportarBASE@1100244000(pwNombreArchivo@1100244006 : Text[150]);
    VAR
      lwObjetos@1100244004 : Record 2000000001;
      lwTmpObjetos@1100244003 : TEMPORARY Record 2000000001;
      lArchivo@1100244001 : File;
      lwCambia@1100244005 : Boolean;
      lwDialog@1100217000 : Dialog;
    BEGIN
      // ImportarBASE

      // Inserta una primera linea con el nombre del archivo
      InsertaLinea(0,0,0,COPYSTR(pwNombreArchivo,1,MAXSTRLEN(Texto1)),COPYSTR(pwNombreArchivo,MAXSTRLEN(Texto1)+1,MAXSTRLEN(Texto2)));

      lwObjetos.RESET;
      lArchivo.OPEN(pwNombreArchivo);
      lArchivo.WRITEMODE(FALSE);
      lArchivo.TEXTMODE(FALSE);
      lwDialog.OPEN('PROCESANDO OBJETO #1########## #2##########');
      REPEAT
          lArchivo.READ(lwTmpObjetos.Type);
          lArchivo.READ(lwTmpObjetos.ID);
          lArchivo.READ(lwTmpObjetos.Name);
          lArchivo.READ(lwTmpObjetos."BLOB Size");
          lArchivo.READ(lwTmpObjetos.Date);
          lArchivo.READ(lwTmpObjetos.Time);
          lArchivo.READ(lwTmpObjetos."Version List");
          Traspasa(lwTmpObjetos);

          lwDialog.UPDATE(1, lwTmpObjetos.Type);
          lwDialog.UPDATE(2, lwTmpObjetos.ID);
      UNTIL lArchivo.POS>=lArchivo.LEN;
      lwDialog.CLOSE;
    END;

    PROCEDURE ImportarFOB@1100244004(pwNombreArchivo@1100244006 : Text[150]);
    VAR
      lwObjetos@1100244004 : Record 2000000001;
      lwTmpObjetos@1100244003 : TEMPORARY Record 2000000001;
      lrControl@1100244002 : Record 81000;
      lArchivo@1100244001 : File;
      lwCambia@1100244005 : Boolean;
      lwTexto@1100244000 : Text[500];
    BEGIN
      // ImportarFOB


      // Inserta una primera linea con el nombre del archivo
      InsertaLinea(0,0,0,COPYSTR(pwNombreArchivo,1,MAXSTRLEN(Texto1)),COPYSTR(pwNombreArchivo,MAXSTRLEN(Texto1)+1,MAXSTRLEN(Texto2)));

      lwObjetos.RESET;
      lArchivo.OPEN(pwNombreArchivo);
      lArchivo.WRITEMODE(FALSE);
      lArchivo.TEXTMODE(TRUE);
      lArchivo.READ(lwTexto);
      IF EVALUATE(lwTmpObjetos.Type,  COPYSTR(lwTexto,1,10)) THEN
        REPEAT
          lwTmpObjetos.INIT;
          EVALUATE(lwTmpObjetos.ID,  COPYSTR(lwTexto,11,10));
          EVALUATE(lwTmpObjetos.Name, DELCHR(COPYSTR(lwTexto,22,30),'<>',' '));
          EVALUATE(lwTmpObjetos.Date,  COPYSTR(lwTexto,56,10));
          EVALUATE(lwTmpObjetos.Time ,  COPYSTR(lwTexto,71,10));
          lArchivo.READ(lwTexto);
          EVALUATE(lwTmpObjetos."BLOB Size", COPYSTR(lwTexto,11,10));
          EVALUATE(lwTmpObjetos."Version List" , DELCHR(COPYSTR(lwTexto,22,30),'<>',' '));
          Traspasa(lwTmpObjetos);
          lArchivo.READ(lwTexto);
        UNTIL (lArchivo.POS>=lArchivo.LEN) OR (NOT EVALUATE(lwTmpObjetos.Type,  COPYSTR(lwTexto,1,10))) ;
    END;

    PROCEDURE InsertaLinea@1100244002(pwTipo@1100244004 : 'TableData,Table,Form,Report,Dataport,Codeunit,System,FieldNumber';pwId@1100244000 : Integer;pwTipoInf@1100244001 : 'Cabecera,Nombre,Fecha,Hora,Tama¤o,Version,No Existe';pwTexto1@1100244002 : Text[150];pwTexto2@1100244003 : Text[150]);
    VAR
      lrControl@1100244005 : Record 81000;
    BEGIN
      // InsertaLinea


      CLEAR(lrControl);
      lrControl.Usuario  := USERID;
      lrControl.Tipo     := pwTipo;
      lrControl.Id       := pwId;
      lrControl.TipoInf  := pwTipoInf;
      lrControl.Texto1   := pwTexto1;
      lrControl.Texto2   := pwTexto2;
      lrControl.Visible  := pwTipoInf=pwTipoInf::Cabecera;
      lrControl.INSERT;
    END;

    PROCEDURE Posterior@1100244003() : Integer;
    VAR
      lrControl@1100244001 : Record 81000;
      lrRet@1100244002 : Integer;
      lwFecha1@1100244003 : Date;
      lwFecha2@1100244005 : Date;
      lwHora1@1100244004 : Time;
      lwHora2@1100244006 : Time;
    BEGIN
      // Posterior
      // Devuelve si es anterior o posterior a la fecha Actual del objeto
      // OUTPUT= 0: Igual 1:Anterior 2: Posterior

      lrRet :=0;

      IF lrControl.GET(Usuario,Tipo,Id,2) THEN  BEGIN // FECHA
        EVALUATE(lwFecha1,lrControl.Texto1);
        EVALUATE(lwFecha2,lrControl.Texto2);
        IF lwFecha1 > lwFecha2 THEN
          lrRet := 1
        ELSE
          IF lwFecha1 < lwFecha2 THEN
            lrRet := 2
      END;

      // Mira la Hora, si el d¡a es el mismo
      IF lrRet = 0 THEN
        IF lrControl.GET(Usuario,Tipo,Id,3) THEN BEGIN
          EVALUATE(lwHora1,lrControl.Texto1);
          EVALUATE(lwHora2,lrControl.Texto2);
          IF lwHora1 > lwHora2 THEN
            lrRet := 1
          ELSE
            IF lwHora1 < lwHora2 THEN
              lrRet := 2;
         END;

      EXIT(lrRet);
    END;

    PROCEDURE Traspasa@1100244005(pwTmpObjetos@1100244005 : TEMPORARY Record 2000000001);
    VAR
      lwObjetos@1100244006 : Record 2000000001;
      lwCambia@1100244002 : Boolean;
      lrControl@1100244000 : Record 81000;
    BEGIN
      // Traspasa


      IF lwObjetos.GET(pwTmpObjetos.Type,pwTmpObjetos."Company Name",pwTmpObjetos.ID)  THEN BEGIN
        lwCambia:= FALSE;
        IF lwObjetos.Name <> pwTmpObjetos.Name THEN BEGIN
          lwCambia:= TRUE;
          InsertaLinea(pwTmpObjetos.Type,pwTmpObjetos.ID,lrControl.TipoInf::Nombre,lwObjetos.Name,pwTmpObjetos.Name);
        END;
        IF lwObjetos.Date <> pwTmpObjetos.Date THEN BEGIN
          lwCambia:= TRUE;
          InsertaLinea(pwTmpObjetos.Type,pwTmpObjetos.ID,lrControl.TipoInf::Fecha,
                                   FORMAT(lwObjetos.Date),FORMAT(pwTmpObjetos.Date));
        END;
        IF FORMAT(lwObjetos.Time) <> FORMAT(pwTmpObjetos.Time) THEN BEGIN
          lwCambia:= TRUE;
          InsertaLinea(pwTmpObjetos.Type,pwTmpObjetos.ID,lrControl.TipoInf::Hora,
                                     FORMAT(lwObjetos.Time),FORMAT(pwTmpObjetos.Time));
        END;
        IF lwObjetos."Version List" <> pwTmpObjetos."Version List" THEN BEGIN
          lwCambia:= TRUE;
          InsertaLinea(pwTmpObjetos.Type,pwTmpObjetos.ID,lrControl.TipoInf::Version,
                             lwObjetos."Version List",pwTmpObjetos."Version List");
        END;

        IF lwCambia THEN
          InsertaLinea(pwTmpObjetos.Type, pwTmpObjetos.ID, lrControl.TipoInf::Cabecera, lwObjetos.Name, '')
        ELSE
          InsertaLinea(pwTmpObjetos.Type, pwTmpObjetos.ID, lrControl.TipoInf::Borrar, lwObjetos.Name, '')

      END
      ELSE BEGIN
        InsertaLinea(pwTmpObjetos.Type, pwTmpObjetos.ID, lrControl.TipoInf::Cabecera, TXNoEx, pwTmpObjetos.Name);
        InsertaLinea(pwTmpObjetos.Type, pwTmpObjetos.ID, lrControl.TipoInf::"No Existe", TXNoEx, pwTmpObjetos.Name);
      END;
    END;

    PROCEDURE BuscarObjetosNuevos@1103355000();
    VAR
      lrObj@1103355000 : Record 2000000001;
    BEGIN
      // BuscarObjetosNuevos

      lrObj.RESET;
      lrObj.SETFILTER(Type, '>=%1', lrObj.Type::Table);
      lrObj.FIND('-');
      REPEAT
        rControl.RESET;
        rControl.SETRANGE(Usuario, USERID);
        rControl.SETRANGE(Tipo   , lrObj.Type);
        rControl.SETRANGE(Id     , lrObj.ID);
        IF NOT rControl.FIND('-') THEN BEGIN
          InsertaLinea(lrObj.Type, lrObj.ID, rControl.TipoInf::Cabecera, TxtNuevo, lrObj.Name);
          InsertaLinea(lrObj.Type, lrObj.ID, rControl.TipoInf::Nuevo, TxtNuevo, lrObj.Name);
        END;
      UNTIL lrObj.NEXT = 0;

      // Borramos los datos que hayan quedado en estado borrar

      rControl.RESET;
      rControl.SETRANGE(Usuario, USERID);
      rControl.SETRANGE(TipoInf, rControl.TipoInf::Borrar);
      IF rControl.FIND('-') THEN
        rControl.DELETEALL;
    END;

    PROCEDURE BorraRegistros@1103355001();
    VAR
      lwVarios@1103355000 : Boolean;
    BEGIN
      // BorraRegistros

      lwVarios := COUNT > 1;

      IF lwVarios THEN
        IF NOT CONFIRM('Desea borrar todos los registros seleccionados') THEN
          EXIT;

      IF FIND('-') THEN BEGIN
        REPEAT
          BorraRegistro(NOT lwVarios);
        UNTIL NEXT=0;
      END;
    END;

    PROCEDURE BorraRegistro@1103355002(pwAviso@1103355001 : Boolean);
    VAR
      rCnt2@1103355000 : Record 81000;
    BEGIN
      // BorraRegistro

      IF pwAviso THEN
        IF NOT CONFIRM('Desea borrar la informacion del objeto %1 %2.', FALSE, Tipo, Id) THEN
          EXIT;

      CLEAR(rCnt2);
      rCnt2.SETRANGE(Usuario, Usuario);
      rCnt2.SETRANGE(Tipo   , Tipo);
      rCnt2.SETRANGE(Id     , Id);
      IF rCnt2.FINDSET(TRUE) THEN
        rCnt2.DELETEALL;
    END;

    BEGIN
    END.
  }
}
