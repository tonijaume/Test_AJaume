OBJECT Table 7334 Whse. Internal Pick Line
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00,NAVES4.00.02;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnModify=BEGIN
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnDelete=VAR
               ItemTrackingMgt@1001 : Codeunit 6500;
               DocStatus@1000 : Option;
             BEGIN
               TestReleased;

               IF ("Qty. Picked" > 0) AND (Quantity > "Qty. Picked") THEN
                 IF NOT HideValidationDialog THEN
                   IF NOT CONFIRM(
                     STRSUBSTNO(
                       Text002,
                       FIELDCAPTION("Qty. Picked"),"Qty. Picked",
                       FIELDCAPTION(Quantity),Quantity,TABLECAPTION),FALSE)
                   THEN
                     ERROR(Text003);

               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Whse. Internal Pick Line",0,"No.",'',0,"Line No.","Location Code",TRUE);

               DocStatus :=
                 WhseInternalPickHeader.GetDocumentStatus("Line No.");
               IF DocStatus <> WhseInternalPickHeader."Document Status" THEN BEGIN
                 WhseInternalPickHeader.VALIDATE("Document Status",DocStatus);
                 WhseInternalPickHeader.MODIFY;
               END;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Whse. Internal Pick Line;
               ESP=L¡n. picking interno alm.];
    PasteIsValid=No;
    LookupFormID=Form7360;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ESP=N§];
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea];
                                                   Editable=No }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n];
                                                   Editable=No }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=[ENU=Shelf No.;
                                                              ESP=N§ estante] }
    { 12  ;   ;To Bin Code         ;Code20        ;TableRelation=IF (To Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code))
                                                                 ELSE IF (To Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                     Zone Code=FIELD(To Zone Code));
                                                   OnValidate=BEGIN
                                                                TestReleased;
                                                                IF xRec."To Bin Code" <> "To Bin Code" THEN
                                                                  IF "To Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                      IF "To Bin Code" = Location."Adjustment Bin Code" THEN
                                                                        FIELDERROR(
                                                                          "To Bin Code",
                                                                            STRSUBSTNO(
                                                                              Text004,Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                              Location.TABLECAPTION));

                                                                      CheckBin(TRUE);
                                                                    END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=To Bin Code;
                                                              ESP=Hasta c¢d. ubicaci¢n] }
    { 13  ;   ;To Zone Code        ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                TestReleased;
                                                                IF xRec."To Zone Code" <> "To Zone Code" THEN BEGIN
                                                                  IF "To Zone Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  END;
                                                                  "To Bin Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=To Zone Code;
                                                              ESP=Hasta c¢d. zona] }
    { 14  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  "Variant Code" := '';

                                                                GetInternalPickHeader("No.");
                                                                "Location Code" := WhseInternalPickHeader."Location Code";
                                                                IF WhseInternalPickHeader."To Zone Code" <> '' THEN
                                                                  "To Zone Code" := WhseInternalPickHeader."To Zone Code";
                                                                IF WhseInternalPickHeader."To Bin Code" <> '' THEN
                                                                  "To Bin Code" := WhseInternalPickHeader."To Bin Code";

                                                                IF "Item No." <> '' THEN BEGIN
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                  "Shelf No." := Item."Shelf/Bin No.";
                                                                  VALIDATE("Unit of Measure Code",ItemUnitofMeasure.Code);
                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                  "Variant Code" := '';
                                                                  "Shelf No." := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                DocStatus@1000 : Option;
                                                              BEGIN
                                                                TestReleased;
                                                                CALCFIELDS("Pick Qty.");
                                                                IF Quantity < "Qty. Picked" + "Pick Qty." THEN
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text001,"Qty. Picked" + "Pick Qty."));

                                                                VALIDATE("Qty. Outstanding",(Quantity - "Qty. Picked"));
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);

                                                                CheckBin(TRUE);

                                                                Status := CalcStatusPickLine;
                                                                IF Status <> xRec.Status THEN BEGIN
                                                                  GetInternalPickHeader("No.");
                                                                  DocStatus := WhseInternalPickHeader.GetDocumentStatus(0);
                                                                  IF DocStatus <> WhseInternalPickHeader."Document Status" THEN BEGIN
                                                                    WhseInternalPickHeader.VALIDATE("Document Status",DocStatus);
                                                                    WhseInternalPickHeader.MODIFY;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=[ENU=Qty. (Base);
                                                              ESP=Cantidad (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=VAR
                                                                WMSMgt@1000 : Codeunit 7302;
                                                              BEGIN
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");

                                                                WMSMgt.CalcCubageAndWeight(
                                                                  "Item No.","Unit of Measure Code","Qty. Outstanding",Cubage,Weight);
                                                              END;

                                                   CaptionML=[ENU=Qty. Outstanding;
                                                              ESP=Cdad. pendiente];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=[ENU=Qty. Outstanding (Base);
                                                              ESP=Cdad. pendiente (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 23  ;   ;Qty. Picked         ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                "Qty. Picked (Base)" := CalcBaseQty("Qty. Picked");
                                                              END;

                                                   CaptionML=[ENU=Qty. Picked;
                                                              ESP=Cdad. preparada pedido];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 24  ;   ;Qty. Picked (Base)  ;Decimal       ;CaptionML=[ENU=Qty. Picked (Base);
                                                              ESP=Cdad. preparada pedido (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Pick Qty.           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE (Activity Type=CONST(Pick),
                                                                                                                       Whse. Document Type=CONST(Internal Pick),
                                                                                                                       Whse. Document No.=FIELD(No.),
                                                                                                                       Whse. Document Line No.=FIELD(Line No.),
                                                                                                                       Action Type=FILTER(' '|Place),
                                                                                                                       Unit of Measure Code=FIELD(Unit of Measure Code),
                                                                                                                       Original Breakbulk=CONST(No),
                                                                                                                       Breakbulk No.=CONST(0)));
                                                   CaptionML=[ENU=Pick Qty.;
                                                              ESP=Cdad. picking];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 28  ;   ;Pick Qty. (Base)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE (Activity Type=CONST(Pick),
                                                                                                                              Whse. Document Type=CONST(Internal Pick),
                                                                                                                              Whse. Document No.=FIELD(No.),
                                                                                                                              Whse. Document Line No.=FIELD(Line No.),
                                                                                                                              Action Type=FILTER(' '|Place),
                                                                                                                              Original Breakbulk=CONST(No),
                                                                                                                              Breakbulk No.=CONST(0)));
                                                   CaptionML=[ENU=Pick Qty. (Base);
                                                              ESP=Cdad. picking (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 29  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitofMeasure."Qty. per Unit of Measure";
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 1;

                                                                VALIDATE(Quantity);
                                                                VALIDATE("Qty. Outstanding");
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida];
                                                   NotBlank=Yes }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record 5401;
                                                              BEGIN
                                                                IF "Variant Code" = '' THEN
                                                                  VALIDATE("Item No.")
                                                                ELSE BEGIN
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 32  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2] }
    { 34  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=" ,Partially Picked,Completely Picked";
                                                                    ESP=" ,Picking parcial,Picking completo"];
                                                   OptionString=[ ,Partially Picked,Completely Picked];
                                                   Editable=No }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=[ENU=Sorting Sequence No.;
                                                              ESP=N§ secuencia clasif.];
                                                   Editable=No }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento] }
    { 37  ;   ;Cubage              ;Decimal       ;CaptionML=[ENU=Cubage;
                                                              ESP=Cubicaje];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Weight              ;Decimal       ;CaptionML=[ENU=Weight;
                                                              ESP=Peso];
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;No.,Line No.                            ;Clustered=Yes }
    {    ;No.,Sorting Sequence No.                 }
    {    ;No.,Item No.                            ;MaintainSQLIndex=No }
    {    ;No.,Shelf No.                           ;MaintainSQLIndex=No }
    {    ;No.,To Bin Code                         ;MaintainSQLIndex=No }
    {    ;No.,Due Date                            ;MaintainSQLIndex=No }
    {    ;To Bin Code,Location Code               ;SumIndexFields=Qty. Outstanding,Cubage,Weight;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1001 : Record 14;
      Item@1009 : Record 27;
      ItemUnitofMeasure@1010 : Record 5404;
      WhseInternalPickHeader@1002 : Record 7333;
      Text000@1005 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      Text001@1003 : TextConst 'ENU=must not be less than %1 units;ESP=no debe ser menor que %1 unidades';
      Text002@1004 : TextConst 'ENU="%1 = %2 is less than the %3 = %4.\Do you really want to delete the %5?";ESP="%1 = %2 es menor que el %3 = %4.\¨Desea eliminar el %5?"';
      Text003@1000 : TextConst 'ENU=Cancelled.;ESP=Cancelado.';
      Text004@1006 : TextConst 'ENU=must not be the %1 of the %2;ESP=no debe ser el %1 del %2';
      LastLineNo@1011 : Integer;
      HideValidationDialog@1008 : Boolean;
      Text005@1007 : TextConst 'ENU=Nothing to handle.;ESP=Nada a manipular.';

    PROCEDURE SetUpNewLine@2(LastWhseInternalPickLine@1000 : Record 7334);
    VAR
      WhseInternalPickLine@1001 : Record 7334;
    BEGIN
      IF GetInternalPickHeader("No.") THEN BEGIN
        WhseInternalPickLine.SETRANGE("No.",WhseInternalPickHeader."No.");
        IF WhseInternalPickLine.COUNT > 0 THEN
          LastLineNo := LastWhseInternalPickLine."Line No."
        ELSE
          LastLineNo := 0;
        "Line No." := GetNextLineNo;
        "To Zone Code" := WhseInternalPickHeader."To Zone Code";
        "To Bin Code" := WhseInternalPickHeader."To Bin Code";
        "Due Date" := WhseInternalPickHeader."Due Date";
      END;
      "Location Code" := WhseInternalPickHeader."Location Code";
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE CalcQty@5(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetLocation@1(LocationCode@1000 : Code[10]);
    BEGIN
      IF (LocationCode = '') THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE TestReleased@37();
    BEGIN
      TESTFIELD("No.");
      GetInternalPickHeader("No.");
      WhseInternalPickHeader.TESTFIELD(Status,WhseInternalPickHeader.Status::Open);
    END;

    PROCEDURE CalcStatusPickLine@4() : Integer;
    BEGIN
      IF (Quantity <> 0) AND (Quantity = "Qty. Picked") THEN
        EXIT(Status::"Completely Picked");
      IF "Qty. Picked" > 0 THEN
        EXIT(Status::"Partially Picked");
      EXIT(Status::" ");
    END;

    PROCEDURE SetHideValidationDialog@8(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetItem@3();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE GetItemUnitOfMeasure@18();
    BEGIN
      GetItem;
      Item.TESTFIELD("No.");
      IF (Item."No." <> ItemUnitofMeasure."Item No.") OR
         ("Unit of Measure Code" <> ItemUnitofMeasure.Code)
      THEN
        IF NOT ItemUnitofMeasure.GET(Item."No.","Unit of Measure Code") THEN
          ItemUnitofMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    PROCEDURE GetInternalPickHeader@7(InternalPickNo@1000 : Code[20]) : Boolean;
    BEGIN
      IF NOT WhseInternalPickHeader.GET(InternalPickNo) THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE CreatePickDoc@6(VAR WhseInternalPickLine@1000 : Record 7334;WhseInternalPickHeader2@1001 : Record 7333);
    VAR
      CreatePickFromWhseSource@1002 : Report 7305;
    BEGIN
      WhseInternalPickHeader2.CheckPickRequired(WhseInternalPickHeader2."Location Code");
      WhseInternalPickHeader2.TESTFIELD(Status,WhseInternalPickHeader2.Status::Released);
      WhseInternalPickLine.SETFILTER(Quantity,'>0');
      WhseInternalPickLine.SETFILTER(
        Status,'<>%1',WhseInternalPickLine.Status::"Completely Picked");
      IF WhseInternalPickLine.FIND('-') THEN BEGIN
        CreatePickFromWhseSource.SetWhseInternalPickLine(
          WhseInternalPickLine,WhseInternalPickHeader2."Assigned User ID");
        CreatePickFromWhseSource.SetHideValidationDialog(HideValidationDialog);
        CreatePickFromWhseSource.USEREQUESTFORM(NOT HideValidationDialog);
        CreatePickFromWhseSource.RUNMODAL;
        CreatePickFromWhseSource.GetResultMessage(2);
        CLEAR(CreatePickFromWhseSource);
      END ELSE
        IF NOT HideValidationDialog THEN
          MESSAGE(Text005);
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      TempWhseWorksheetLine@1001 : TEMPORARY Record 7326;
      WhseItemTrackingForm@1000 : Form 6550;
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      TempWhseWorksheetLine.INIT;
      TempWhseWorksheetLine."Whse. Document Type" :=
        TempWhseWorksheetLine."Whse. Document Type"::"Internal Pick";
      TempWhseWorksheetLine."Whse. Document No." := "No.";
      TempWhseWorksheetLine."Whse. Document Line No." := "Line No.";
      TempWhseWorksheetLine."Location Code" := "Location Code";
      TempWhseWorksheetLine."Item No." := "Item No.";
      TempWhseWorksheetLine."Qty. (Base)" := "Qty. (Base)";
      TempWhseWorksheetLine."Qty. to Handle (Base)" :=
        "Qty. (Base)" - "Qty. Picked (Base)" - "Pick Qty. (Base)";
      WhseItemTrackingForm.SetSource(TempWhseWorksheetLine,DATABASE::"Whse. Internal Pick Line");
      WhseItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE CheckBin@9(CalcDeduction@1000 : Boolean);
    VAR
      Bin@1004 : Record 7354;
      BinContent@1003 : Record 7302;
      WhseInternalPickLine@1005 : Record 7334;
    BEGIN
      IF "To Bin Code" <> '' THEN BEGIN
        GetLocation("Location Code");
        IF NOT Location."Directed Put-away and Pick" THEN
          EXIT;

        IF (Location."Bin Capacity Policy" IN
            [Location."Bin Capacity Policy"::"Allow More Than Max. Capacity",
            Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap."]) AND
            CalcDeduction
        THEN BEGIN
          WhseInternalPickLine.SETCURRENTKEY("To Bin Code","Location Code");
          WhseInternalPickLine.SETRANGE("To Bin Code","To Bin Code");
          WhseInternalPickLine.SETRANGE("Location Code","Location Code");
          WhseInternalPickLine.SETRANGE("No.","No.");
          WhseInternalPickLine.SETRANGE("Line No.","Line No.");
          WhseInternalPickLine.CALCSUMS("Qty. Outstanding",Cubage,Weight);
        END;
        IF BinContent.GET(
          "Location Code","To Bin Code","Item No.","Variant Code","Unit of Measure Code")
        THEN BEGIN
          BinContent.TESTFIELD("Bin Type Code");
          BinContent.CheckIncreaseBinContent(
            "Qty. Outstanding",WhseInternalPickLine.Quantity,
            WhseInternalPickLine.Cubage,WhseInternalPickLine.Weight,
            Cubage,Weight,FALSE);
          "To Zone Code" := BinContent."Zone Code";
        END ELSE BEGIN
          Bin.GET("Location Code","To Bin Code");
          Bin.CheckIncreaseBin(
            "To Bin Code","Item No.","Qty. Outstanding",
            WhseInternalPickLine.Cubage,WhseInternalPickLine.Weight,
            Cubage,Weight,FALSE);
          Bin.TESTFIELD("Bin Type Code");
          "To Zone Code" := Bin."Zone Code";
        END;
      END;
    END;

    PROCEDURE GetNextLineNo@10() : Integer;
    VAR
      WhseInternalPickLine@1000 : Record 7334;
      HigherLineNo@1002 : Integer;
      LowerLineNo@1001 : Integer;
    BEGIN
      WhseInternalPickLine.SETRANGE("No.",WhseInternalPickHeader."No.");
      IF WhseInternalPickHeader."Sorting Method" <> WhseInternalPickHeader."Sorting Method"::" " THEN
        EXIT(GetLastLineNo + 10000)
      ELSE BEGIN
        WhseInternalPickLine."No." := WhseInternalPickHeader."No.";
        WhseInternalPickLine."Line No." := LastLineNo;
        IF WhseInternalPickLine.FIND('<') THEN
          LowerLineNo := WhseInternalPickLine."Line No."
        ELSE IF WhseInternalPickLine.FIND('>') THEN
          EXIT(LastLineNo DIV 2)
        ELSE
          EXIT(LastLineNo + 10000);

        WhseInternalPickLine."No." := WhseInternalPickHeader."No.";
        WhseInternalPickLine."Line No." := LastLineNo;
        IF WhseInternalPickLine.FIND('>') THEN
          HigherLineNo := LastLineNo
        ELSE
          EXIT(LastLineNo + 10000);
        EXIT(LowerLineNo + (HigherLineNo - LowerLineNo) DIV 2);
      END;
    END;

    PROCEDURE GetLastLineNo@12() : Integer;
    VAR
      WhseInternalPickLine@1000 : Record 7334;
    BEGIN
      WhseInternalPickLine.SETRANGE("No.",WhseInternalPickHeader."No.");
      IF WhseInternalPickLine.FIND('+') THEN
        EXIT(WhseInternalPickLine."Line No.");
      EXIT(0);
    END;

    PROCEDURE GetSortSeqNo@11() : Integer;
    VAR
      WhseInternalPickLine@1000 : Record 7334;
      HigherSeqNo@1002 : Integer;
      LowerSeqNo@1003 : Integer;
      LastSeqNo@1001 : Integer;
    BEGIN
      GetInternalPickHeader("No.");

      WhseInternalPickLine.SETRANGE("No.","No.");
      CASE WhseInternalPickHeader."Sorting Method" OF
        WhseInternalPickHeader."Sorting Method"::" " :
          WhseInternalPickLine.SETCURRENTKEY("No.","Line No.");
        WhseInternalPickHeader."Sorting Method"::Item:
          WhseInternalPickLine.SETCURRENTKEY("No.","Item No.");
        WhseInternalPickHeader."Sorting Method"::"Shelf or Bin":
          BEGIN
            GetLocation("Location Code");
            IF Location."Bin Mandatory" THEN
              WhseInternalPickLine.SETCURRENTKEY("No.","To Bin Code")
            ELSE
              WhseInternalPickLine.SETCURRENTKEY("No.","Shelf No.");
          END;
        WhseInternalPickHeader."Sorting Method"::"Due Date":
          WhseInternalPickLine.SETCURRENTKEY("No.","Due Date");
        ELSE
          EXIT("Line No.")
      END;

      WhseInternalPickLine := Rec;
      LastSeqNo := GetLastSeqNo(WhseInternalPickLine);
      IF WhseInternalPickLine.FIND('<') THEN
        LowerSeqNo := WhseInternalPickLine."Sorting Sequence No."
      ELSE IF WhseInternalPickLine.FIND('>') THEN
        EXIT(WhseInternalPickLine."Sorting Sequence No." DIV 2)
      ELSE
        LowerSeqNo := 10000;

      WhseInternalPickLine := Rec;
      IF WhseInternalPickLine.FIND('>') THEN
        HigherSeqNo := WhseInternalPickLine."Sorting Sequence No."
      ELSE IF WhseInternalPickLine.FIND('<') THEN
        EXIT(LastSeqNo + 10000)
      ELSE
        HigherSeqNo := LastSeqNo;
      EXIT(LowerSeqNo + (HigherSeqNo - LowerSeqNo) DIV 2);
    END;

    PROCEDURE GetLastSeqNo@17(WhseInternalPickLine@1001 : Record 7334) : Integer;
    BEGIN
      WhseInternalPickLine.SETRECFILTER;
      WhseInternalPickLine.SETRANGE("Line No.");
      WhseInternalPickLine.SETCURRENTKEY("No.","Sorting Sequence No.");
      IF WhseInternalPickLine.FIND('+') THEN
        EXIT(WhseInternalPickLine."Sorting Sequence No.");
      EXIT(0);
    END;

    BEGIN
    END.
  }
}
