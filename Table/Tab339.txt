OBJECT Table 339 Item Application Entry
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 343=ri;
    CaptionML=[ENU=Item Application Entry;
               ESP=Liq. mov. producto];
    LookupFormID=Form506;
    DrillDownFormID=Form506;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ESP=N§ mov.] }
    { 2   ;   ;Item Ledger Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Item Ledger Entry No.;
                                                              ESP=N§ mov. producto] }
    { 3   ;   ;Inbound Item Entry No.;Integer     ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Inbound Item Entry No.;
                                                              ESP=N§ mov. prod. entrada] }
    { 4   ;   ;Outbound Item Entry No.;Integer    ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Outbound Item Entry No.;
                                                              ESP=N§ mov. prod. salida] }
    { 11  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5 }
    { 21  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 23  ;   ;Transferred-from Entry No.;Integer ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Transferred-from Entry No.;
                                                              ESP=Transferido desde n§ mov.] }
    { 25  ;   ;Creation Date       ;DateTime      ;CaptionML=[ENU=Creation Date;
                                                              ESP=Fecha creaci¢n] }
    { 26  ;   ;Created By User     ;Code20        ;TableRelation=User;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Created By User;
                                                              ESP=Creado por usuario] }
    { 27  ;   ;Last Modified Date  ;DateTime      ;CaptionML=[ENU=Last Modified Date;
                                                              ESP=Fecha £ltima modificaci¢n] }
    { 28  ;   ;Last Modified By User;Code20       ;TableRelation=User;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Last Modified By User;
                                                              ESP=élt. modificaci¢n por usuario] }
    { 5800;   ;Cost Application    ;Boolean       ;CaptionML=[ENU=Cost Application;
                                                              ESP=Coste liquidaci¢n] }
    { 5804;   ;Output Completely Invd. Date;Date  ;CaptionML=[ENU=Output Completely Invd. Date;
                                                              ESP=Fecha salida completam. factur.] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Inbound Item Entry No.,Item Ledger Entry No.,Outbound Item Entry No.,Cost Application }
    {    ;Outbound Item Entry No.,Item Ledger Entry No.,Cost Application,Transferred-from Entry No. }
    {    ;Transferred-from Entry No.,Cost Application }
    {    ;Inbound Item Entry No.,Outbound Item Entry No.,Cost Application }
    {    ;Item Ledger Entry No.,Output Completely Invd. Date }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=You have to run the %1 batch job, before you can revalue %2 %3.;ESP=Debe ejecutar el trabajo por lotes %1, para poder revaluar %2 %3.';
      VisitedItemApplnEntry@1001 : TEMPORARY Record 339;
      ItemLedgEntryInChainNo@1003 : TEMPORARY Record 2000000026;
      TrackChain@1002 : Boolean;

    PROCEDURE AppliedOutbndEntryExists@43(InbndItemLedgEntryNo@1001 : Integer;CostApplication@1000 : Boolean) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY(
        "Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.","Cost Application");
      SETRANGE("Inbound Item Entry No.",InbndItemLedgEntryNo);
      SETFILTER("Item Ledger Entry No.",'<>%1',InbndItemLedgEntryNo);
      SETFILTER("Outbound Item Entry No.",'<>%1',0);
      IF CostApplication THEN
        SETRANGE("Cost Application",TRUE);
      EXIT(FIND('-'));
    END;

    PROCEDURE AppliedInbndTransEntryExists@45(InbndItemLedgEntryNo@1001 : Integer;CostApplication@1002 : Boolean) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY("Transferred-from Entry No.","Cost Application");
      SETRANGE("Transferred-from Entry No.",InbndItemLedgEntryNo);
      IF CostApplication THEN
        SETRANGE("Cost Application",TRUE);
      EXIT(FIND('-'));
    END;

    PROCEDURE AppliedInbndEntryExists@49(OutbndItemLedgEntryNo@1001 : Integer;CostApplication@1000 : Boolean) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY(
        "Outbound Item Entry No.","Item Ledger Entry No.","Cost Application","Transferred-from Entry No.");
      SETRANGE("Outbound Item Entry No.",OutbndItemLedgEntryNo);
      SETFILTER("Item Ledger Entry No.",'<>%1',OutbndItemLedgEntryNo);
      SETRANGE("Transferred-from Entry No.",0);
      IF CostApplication THEN
        SETRANGE("Cost Application",TRUE);
      EXIT(FIND('-'));
    END;

    PROCEDURE AppliedFromEntryExists@3(InbndItemLedgEntryNo@1001 : Integer) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.");
      SETFILTER("Outbound Item Entry No.",'<>%1',0);
      SETRANGE("Item Ledger Entry No.",InbndItemLedgEntryNo);
      EXIT(FIND('-'));
    END;

    PROCEDURE CheckAppliedFromEntryToAdjust@1(InbndItemLedgEntryNo@1000 : Integer);
    VAR
      OutbndItemLedgEntry@1001 : Record 32;
      ObjTransl@1002 : Record 377;
    BEGIN
      IF AppliedFromEntryExists(InbndItemLedgEntryNo) THEN
        REPEAT
          OutbndItemLedgEntry.GET("Outbound Item Entry No.");
          IF OutbndItemLedgEntry."Applied Entry to Adjust" THEN
            ERROR(
              Text001,
              ObjTransl.TranslateObject(ObjTransl."Object Type"::Report,REPORT::"Adjust Cost - Item Entries"),
              OutbndItemLedgEntry.TABLECAPTION,InbndItemLedgEntryNo);
        UNTIL NEXT = 0;
    END;

    PROCEDURE CostReceiver@2() : Integer;
    BEGIN
      IF "Outbound Item Entry No." = 0 THEN EXIT(0);
      IF "Item Ledger Entry No." = "Outbound Item Entry No." THEN
        EXIT("Outbound Item Entry No.");
      IF "Item Ledger Entry No." = "Inbound Item Entry No." THEN
        EXIT("Inbound Item Entry No.");
      EXIT(0);
    END;

    PROCEDURE Fixed@4() : Boolean;
    VAR
      InboundItemLedgerEntry@1000 : Record 32;
      OutboundItemLedgerEntry@1001 : Record 32;
    BEGIN
      IF "Outbound Item Entry No." = 0 THEN
        EXIT(FALSE);
      IF NOT InboundItemLedgerEntry.GET("Inbound Item Entry No.") THEN
        EXIT(TRUE);
      IF InboundItemLedgerEntry."Applies-to Entry" = "Outbound Item Entry No." THEN
        EXIT(TRUE);
      IF NOT OutboundItemLedgerEntry.GET("Outbound Item Entry No.") THEN
        EXIT(TRUE);
      IF OutboundItemLedgerEntry."Applies-to Entry" = "Inbound Item Entry No." THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE InsertHistory@5() : Integer;
    VAR
      EntryNo@1001 : Integer;
      History@1000 : Record 343;
    BEGIN
      History.SETCURRENTKEY("Primary Entry No.");
      IF NOT History.FIND('+') THEN
        EntryNo := 1;
      EntryNo := History."Primary Entry No.";
      History.TRANSFERFIELDS(Rec,TRUE);
      History."Deleted Date" := CURRENTDATETIME;
      History."Deleted By User" := USERID;
      History."Primary Entry No." := EntryNo + 1;
      History.INSERT;
      EXIT(History."Primary Entry No.");
    END;

    PROCEDURE CostApplication@50() : Boolean;
    BEGIN
      EXIT((Quantity > 0) AND ("Item Ledger Entry No." = "Inbound Item Entry No."))
    END;

    PROCEDURE CheckIsCyclicalLoop@9(CheckEntryNo@1004 : Integer;FromItemLedgEntry@1005 : Record 32) : Boolean;
    VAR
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      IF CheckEntryNo = FromItemLedgEntry."Entry No." THEN
        EXIT(TRUE);
      VisitedItemApplnEntry.DELETEALL;
      ItemLedgEntryInChainNo.DELETEALL;

      IF FromItemLedgEntry.Positive THEN BEGIN
        IF CheckCyclicFwdToAppliedOutbnds(CheckEntryNo,FromItemLedgEntry."Entry No.") THEN
          EXIT(TRUE);
        EXIT(CheckCyclicFwdToInbndTransfers(CheckEntryNo,FromItemLedgEntry."Entry No."));
      END;
      IF FromItemLedgEntry."Entry Type" = FromItemLedgEntry."Entry Type"::Consumption THEN
        IF CheckCyclicProdCyclicalLoop(CheckEntryNo,FromItemLedgEntry) THEN
          EXIT(TRUE);
      EXIT(CheckCyclicFwdToAppliedInbnds(CheckEntryNo,FromItemLedgEntry."Entry No."));
    END;

    PROCEDURE CheckCyclicProdCyclicalLoop@1100(CheckEntryNo@1006 : Integer;ItemLedgEntry@1304 : Record 32) : Boolean;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.","Entry Type");
      ItemLedgEntry.SETRANGE("Prod. Order No.",ItemLedgEntry."Prod. Order No.");
      ItemLedgEntry.SETRANGE("Prod. Order Line No.",ItemLedgEntry."Prod. Order Line No.");
      ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
      IF ItemLedgEntry.FIND('-') THEN
        REPEAT
          IF TrackChain THEN
            IF NOT ItemLedgEntryInChainNo.GET(ItemLedgEntry."Entry No.") THEN BEGIN
              ItemLedgEntryInChainNo.Number := ItemLedgEntry."Entry No.";
              ItemLedgEntryInChainNo.INSERT;
            END;

          IF ItemLedgEntry."Entry No." = CheckEntryNo THEN
            EXIT(TRUE);

          IF ItemLedgEntry.Positive THEN
            IF CheckCyclicFwdToAppliedOutbnds(CheckEntryNo, ItemLedgEntry."Entry No.") THEN
              EXIT(TRUE);
        UNTIL ItemLedgEntry.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAppliedOutbnds@11(CheckEntryNo@1002 : Integer;EntryNo@1000 : Integer) : Boolean;
    VAR
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      IF ItemApplnEntry.AppliedOutbndEntryExists(EntryNo,FALSE) THEN
        EXIT(CheckCyclicFwdToAppliedEntries(CheckEntryNo,ItemApplnEntry,EntryNo,TRUE));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAppliedInbnds@7(CheckEntryNo@1002 : Integer;EntryNo@1001 : Integer) : Boolean;
    VAR
      ItemApplnEntry@1000 : Record 339;
    BEGIN
      IF ItemApplnEntry.AppliedInbndEntryExists(EntryNo,FALSE) THEN
        EXIT(CheckCyclicFwdToAppliedEntries(CheckEntryNo,ItemApplnEntry,EntryNo,FALSE));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToInbndTransfers@6(CheckEntryNo@1001 : Integer;EntryNo@1000 : Integer) : Boolean;
    VAR
      ItemApplnEntry@1002 : Record 339;
    BEGIN
      IF ItemApplnEntry.AppliedInbndTransEntryExists(EntryNo,FALSE) THEN
        EXIT(CheckCyclicFwdToAppliedEntries(CheckEntryNo,ItemApplnEntry,EntryNo,FALSE));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckCyclicFwdToProdOutput@1264(CheckEntryNo@1591 : Integer;EntryNo@1670 : Integer) : Boolean;
    VAR
      ItemLedgEntry@1991 : Record 32;
    BEGIN
      ItemLedgEntry.GET(EntryNo);
      EXIT(CheckCyclicProdCyclicalLoop(CheckEntryNo,ItemLedgEntry));
    END;

    LOCAL PROCEDURE CheckCyclicFwdToAppliedEntries@8(CheckEntryNo@1000 : Integer;VAR ItemApplnEntry@1005 : Record 339;FromEntryNo@1002 : Integer;IsPositiveToNegativeFlow@1009 : Boolean) : Boolean;
    VAR
      ToEntryNo@1008 : Integer;
    BEGIN
      IF EntryIsVisited(FromEntryNo,ItemApplnEntry) THEN
        EXIT(FALSE);

      REPEAT
        IF IsPositiveToNegativeFlow THEN
          ToEntryNo := ItemApplnEntry."Outbound Item Entry No."
        ELSE
          ToEntryNo := ItemApplnEntry."Inbound Item Entry No.";

        IF TrackChain THEN
          IF NOT ItemLedgEntryInChainNo.GET(ToEntryNo) THEN BEGIN
            ItemLedgEntryInChainNo.Number := ToEntryNo;
            ItemLedgEntryInChainNo.INSERT;
          END;

        IF ToEntryNo = CheckEntryNo THEN
          EXIT(TRUE);
        IF CheckCyclicFwdToAppliedOutbnds(CheckEntryNo,ToEntryNo) THEN
          EXIT(TRUE);
        IF CheckCyclicFwdToAppliedInbnds(CheckEntryNo,ToEntryNo) THEN
          EXIT(TRUE);
        IF CheckCyclicFwdToProdOutput(CheckEntryNo,ToEntryNo) THEN
          EXIT(TRUE);
      UNTIL ItemApplnEntry.NEXT = 0;
      EXIT(CheckCyclicFwdToInbndTransfers(CheckEntryNo,FromEntryNo));
    END;

    LOCAL PROCEDURE EntryIsVisited@10(EntryNo@1000 : Integer;VAR ItemApplnEntry@1001 : Record 339) : Boolean;
    BEGIN
      WITH VisitedItemApplnEntry DO BEGIN
        IF GET(EntryNo) THEN BEGIN
          // This is to take into account quantity flows from an inbound entry to an inbound transfer
          IF Quantity = 2 THEN
            EXIT(TRUE);
          Quantity := Quantity + 1;
          MODIFY;
          EXIT(FALSE);
        END;
        INIT;
        "Entry No." := EntryNo;
        Quantity := Quantity + 1;
        INSERT;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE GetVisitedEntries@15(FromItemLedgEntry@1000 : Record 32;VAR ItemLedgEntryInChain@1001 : Record 32);
    VAR
      ToItemLedgEntry@1002 : Record 32;
    BEGIN
      TrackChain := TRUE;
      CheckIsCyclicalLoop(-1,FromItemLedgEntry);
      IF ItemLedgEntryInChainNo.FIND('-') THEN
        REPEAT
          ToItemLedgEntry.GET(ItemLedgEntryInChainNo.Number);
          ItemLedgEntryInChain := ToItemLedgEntry;
          ItemLedgEntryInChain.INSERT;
        UNTIL ItemLedgEntryInChainNo.NEXT = 0;
    END;

    PROCEDURE OutboundApplied@12(EntryNo@1002 : Integer;SameType@1005 : Boolean) : Decimal;
    VAR
      Applications@1001 : Record 339;
      ItemEntry@1000 : Record 32;
      Quantity@1003 : Decimal;
      OriginalEntry@1004 : Record 32;
    BEGIN
      IF NOT OriginalEntry.GET(EntryNo) THEN
        EXIT(0);
      IF OriginalEntry."Entry Type" = OriginalEntry."Entry Type"::Transfer THEN
        EXIT(0);
      Applications.SETCURRENTKEY("Outbound Item Entry No.");
      Applications.SETRANGE("Outbound Item Entry No.",EntryNo);
      Applications.SETRANGE("Item Ledger Entry No.",EntryNo);
      Quantity := 0;
      IF Applications.FINDFIRST THEN
        REPEAT
          IF ItemEntry.GET(Applications."Inbound Item Entry No.") THEN
            IF SameType THEN BEGIN
              IF ItemEntry."Entry Type" = OriginalEntry."Entry Type" THEN
                Quantity := Quantity + Applications.Quantity
            END ELSE
              Quantity := Quantity + Applications.Quantity;
        UNTIL Applications.NEXT <= 0;
      EXIT(Quantity);
    END;

    PROCEDURE InboundApplied@13(EntryNo@1002 : Integer;SameType@1005 : Boolean) : Decimal;
    VAR
      Applications@1001 : Record 339;
      ItemEntry@1000 : Record 32;
      Quantity@1003 : Decimal;
      OriginalEntry@1004 : Record 32;
    BEGIN
      IF NOT OriginalEntry.GET(EntryNo) THEN
        EXIT(0);
      IF OriginalEntry."Entry Type" = OriginalEntry."Entry Type"::Transfer THEN
        EXIT(0);
      Applications.SETCURRENTKEY("Inbound Item Entry No.");
      Applications.SETFILTER("Outbound Item Entry No.",'<>%1',0);
      Applications.SETRANGE("Inbound Item Entry No.",EntryNo);
      IF OriginalEntry.Quantity < 0 THEN
        Applications.SETRANGE("Item Ledger Entry No.",EntryNo);
      Quantity := 0;
      IF Applications.FINDFIRST THEN
        REPEAT
          IF ItemEntry.GET(Applications."Outbound Item Entry No.") THEN
            IF SameType THEN BEGIN
              IF (ItemEntry."Entry Type" = OriginalEntry."Entry Type") OR
                 (ItemEntry."Applies-to Entry" <> 0)
              THEN
                Quantity := Quantity + Applications.Quantity
            END ELSE
              Quantity := Quantity + Applications.Quantity;
        UNTIL Applications.NEXT = 0;
      EXIT(Quantity);
    END;

    PROCEDURE Returned@14(EntryNo@1002 : Integer) : Decimal;
    VAR
      Applications@1001 : Record 339;
      ItemEntry@1000 : Record 32;
      Quantity@1003 : Integer;
      OriginalEntry@1004 : Record 32;
    BEGIN
      EXIT(-OutboundApplied(EntryNo,TRUE) - InboundApplied(EntryNo,TRUE));
    END;

    PROCEDURE ExistsBetween@1102601000(ILE1@1102601000 : Integer;ILE2@1102601001 : Integer) : Boolean;
    VAR
      Applications@1102601002 : Record 339;
    BEGIN
      Applications.SETCURRENTKEY("Inbound Item Entry No.");
      Applications.SETRANGE("Inbound Item Entry No.",ILE1);
      Applications.SETRANGE("Outbound Item Entry No.",ILE2);
      IF Applications.FINDFIRST THEN
        EXIT(TRUE);
      Applications.SETRANGE("Inbound Item Entry No.",ILE2);
      Applications.SETRANGE("Outbound Item Entry No.",ILE1);
      IF Applications.FINDFIRST THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}
