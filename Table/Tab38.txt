OBJECT Table 38 Purchase Header
{
  OBJECT-PROPERTIES
  {
    Date=06/05/15;
    Time=[ 6:33:49];
    Modified=Yes;
    Version List=AIC2009,TRF2009,NAVW16.00.01,LIQEM6.00.01,NAVES6.00.01,RegF269949;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Buy-from Vendor Name;
    OnInsert=BEGIN
               PurchSetup.GET;

               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               END;

               InitRecord;

               IF GETFILTER("Buy-from Vendor No.") <> '' THEN
                 IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
                   VALIDATE("Buy-from Vendor No.",GETRANGEMIN("Buy-from Vendor No."));

               "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Purchase Header","Document Type","No.");

               DimMgt.InsertDocDim(
                 DATABASE::"Purchase Header","Document Type","No.",0,
                 "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

               //$001 INCOMING
               Usuario := USERID;

               // $012 JPT 01/02/08 Gestio documental ftp GOC
               RefrescarEstadoCtaProveedor;
             END;

    OnModify=BEGIN
               CheckPermisoAtennea; //+$013

               // $012JPT 01/02/08 Gestio documental ftp GOC
               RefrescarEstadoCtaProveedor;

               // Tambien lo aplicamos al proveedor anterior
               IF xRec."Buy-from Vendor No." <> "Buy-from Vendor No." THEN
                 cFunGesDoc.RefrescarEstadoCta(xRec."Buy-from Vendor No.");
             END;

    OnDelete=BEGIN
               IF NOT UserMgt.CheckRespCenter(1,"Responsibility Center") THEN
                 ERROR(
                   Text023,
                   RespCenter.TABLECAPTION,UserMgt.GetPurchasesFilter);

               PurchPost.DeleteHeader(
                 Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
                 ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
               VALIDATE("Applies-to ID",'');

               DimMgt.DeleteDocDim(DATABASE::"Purchase Header","Document Type","No.",0);

               ApprovalMgt.DeleteApprovalEntry(DATABASE::"Purchase Header","Document Type","No.");
               PurchLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               PurchLine.SETRANGE("Document Type","Document Type");
               PurchLine.SETRANGE("Document No.","No.");
               PurchLine.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
               DeletePurchaseLines;
               PurchLine.SETRANGE(Type);
               DeletePurchaseLines;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","No.");
               PurchCommentLine.DELETEALL;

               IF (PurchRcptHeader."No." <> '') OR
                  (PurchInvHeader."No." <> '') OR
                  (PurchCrMemoHeader."No." <> '') OR
                  (ReturnShptHeader."No." <> '') OR
                  (PurchInvHeaderPrepmt."No." <> '') OR
                  (PurchCrMemoHeaderPrepmt."No." <> '')
               THEN BEGIN
                 DELETE;
                 COMMIT;

                 IF PurchRcptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text000,TRUE,
                        PurchRcptHeader."No.")
                   THEN BEGIN
                     PurchRcptHeader.SETRECFILTER;
                     PurchRcptHeader.PrintRecords(TRUE);
                   END;

                 IF PurchInvHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text001,TRUE,
                        PurchInvHeader."No.")
                   THEN BEGIN
                     PurchInvHeader.SETRECFILTER;
                     PurchInvHeader.PrintRecords(TRUE);
                   END;

                 IF PurchCrMemoHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text002,TRUE,
                        PurchCrMemoHeader."No.")
                   THEN BEGIN
                     PurchCrMemoHeader.SETRECFILTER;
                     PurchCrMemoHeader.PrintRecords(TRUE);
                   END;

                 IF ReturnShptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text024,TRUE,
                        ReturnShptHeader."No.")
                   THEN BEGIN
                     ReturnShptHeader.SETRECFILTER;
                     ReturnShptHeader.PrintRecords(TRUE);
                   END;

                 IF PurchInvHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text042,TRUE,
                        PurchInvHeader."No.")
                   THEN BEGIN
                     PurchInvHeaderPrepmt.SETRECFILTER;
                     PurchInvHeaderPrepmt.PrintRecords(TRUE);
                   END;

                 IF PurchCrMemoHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text043,TRUE,
                        PurchCrMemoHeaderPrepmt."No.")
                   THEN BEGIN
                     PurchCrMemoHeaderPrepmt.SETRECFILTER;
                     PurchCrMemoHeaderPrepmt.PrintRecords(TRUE);
                   END;
               END;

               // $012 JPT 01/02/08 Gestio documental ftp GOC
               RefrescarEstadoCtaProveedor;
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Purchase Header;
               ESP=Cab. compra];
    LookupFormID=Form53;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ESP=Oferta,Pedido,Factura,Abono,Pedido abierto,Devoluci¢n];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Buy-from Vendor No." <> xRec."Buy-from Vendor No.") AND
                                                                   (xRec."Buy-from Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Buy-from Vendor No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF "Buy-from Vendor No." = '' THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Buy-from Vendor No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      IF xRec."Receiving No." <> '' THEN BEGIN
                                                                        "Receiving No. Series" := xRec."Receiving No. Series";
                                                                        "Receiving No." := xRec."Receiving No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Shipment No." <> '' THEN BEGIN
                                                                        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
                                                                        "Return Shipment No." := xRec."Return Shipment No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      PurchLine.SETFILTER("Quantity Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                        PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                      END;
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.TESTFIELD("Quantity Received",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Receipt No.",'');

                                                                    PurchLine.SETRANGE("Receipt No.");
                                                                    PurchLine.SETRANGE("Quantity Received");
                                                                    PurchLine.SETRANGE("Buy-from Vendor No.");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF PurchLine.FIND('-') THEN
                                                                        PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      PurchLine.SETFILTER("Return Qty. Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                        PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                        PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                      END;
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Return Shipment No.",'');

                                                                    PurchLine.RESET;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                GetVend("Buy-from Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                Vend.TESTFIELD("Gen. Bus. Posting Group");

                                                                //$011 AJS 08.11.2007, Comprobantes fiscales
                                                                "Tipo factura compra" := Vend."Tipo factura x defecto";

                                                                "Buy-from Vendor Name" := Vend.Name;
                                                                "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                "Buy-from Address" := Vend.Address;
                                                                "Buy-from Address 2" := Vend."Address 2";
                                                                "Buy-from City" := Vend.City;
                                                                "Buy-from Post Code" := Vend."Post Code";
                                                                "Buy-from County" := Vend.County;
                                                                "Buy-from Country/Region Code" := Vend."Country/Region Code";
                                                                IF NOT SkipBuyFromContact THEN
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Vend."Tax Area Code";
                                                                "Tax Liable" := Vend."Tax Liable";
                                                                "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                "VAT Registration No." := Vend."VAT Registration No.";
                                                                VALIDATE("Lead Time Calculation",Vend."Lead Time Calculation");
                                                                "Responsibility Center" := UserMgt.GetRespCenter(1,Vend."Responsibility Center");
                                                                VALIDATE("Sell-to Customer No.",'');
                                                                VALIDATE("Location Code",UserMgt.GetLocation(1,Vend."Location Code","Responsibility Center"));

                                                                IF "Buy-from Vendor No." = xRec."Pay-to Vendor No." THEN BEGIN
                                                                  IF ReceivedPurchLinesExist OR ReturnShipmentExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;
                                                                END;

                                                                "Buy-from IC Partner Code" := Vend."IC Partner Code";
                                                                "Send IC Document" := ("Buy-from IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF Vend."Pay-to Vendor No." <> '' THEN
                                                                  VALIDATE("Pay-to Vendor No.",Vend."Pay-to Vendor No.")
                                                                ELSE BEGIN
                                                                  IF "Buy-from Vendor No." = "Pay-to Vendor No." THEN
                                                                    SkipPayToContact := TRUE;
                                                                  VALIDATE("Pay-to Vendor No.","Buy-from Vendor No.");
                                                                  SkipPayToContact := FALSE;
                                                                END;
                                                                "Order Address Code" := '';

                                                                VALIDATE("Order Address Code");

                                                                IF (xRec."Buy-from Vendor No." <> "Buy-from Vendor No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("Buy-from Vendor No."));

                                                                IF NOT SkipBuyFromContact THEN
                                                                  UpdateBuyFromCont("Buy-from Vendor No.");
                                                              END;

                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              ESP=Compra a-N§ proveedor] }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 4   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=VAR
                                                                TempDocDim@1000 : TEMPORARY Record 357;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Pay-to Vendor No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");

                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      PurchLine.SETFILTER("Quantity Received",'<>0');
                                                                    IF "Document Type" = "Document Type"::Invoice THEN
                                                                      PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.TESTFIELD("Quantity Received",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Receipt No.",'');

                                                                    PurchLine.SETRANGE("Receipt No.");
                                                                    PurchLine.SETRANGE("Quantity Received");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF PurchLine.FIND('-') THEN
                                                                        PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
                                                                    IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                      PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Return Shipment No.",'');

                                                                    PurchLine.RESET;
                                                                    "Pay-at Code" := '';

                                                                    IF (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.") THEN
                                                                      "Corrected Invoice No." := '';
                                                                  END ELSE
                                                                    Rec."Pay-to Vendor No." := xRec."Pay-to Vendor No.";
                                                                END;

                                                                GetVend("Pay-to Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                Vend.TESTFIELD("Vendor Posting Group");

                                                                "Pay-to Name" := Vend.Name;
                                                                "Pay-to Name 2" := Vend."Name 2";
                                                                "Pay-to Address" := Vend.Address;
                                                                "Pay-to Address 2" := Vend."Address 2";
                                                                "Pay-to City" := Vend.City;
                                                                "Pay-to Post Code" := Vend."Post Code";
                                                                "Pay-to County" := Vend.County;
                                                                "Pay-to Country/Region Code" := Vend."Country/Region Code";
                                                                "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                IF NOT SkipPayToContact THEN
                                                                  "Pay-to Contact" := Vend.Contact;
                                                                Vend.TESTFIELD("Payment Terms Code");
                                                                "Payment Terms Code" := Vend."Payment Terms Code";

                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Vend."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Vend."Payment Method Code";

                                                                "Shipment Method Code" := Vend."Shipment Method Code";
                                                                "Vendor Posting Group" := Vend."Vendor Posting Group";
                                                                "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN
                                                                  "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                "Prices Including VAT" := Vend."Prices Including VAT";
                                                                "Currency Code" := Vend."Currency Code";
                                                                "Invoice Disc. Code" := Vend."Invoice Disc. Code";
                                                                "Language Code" := Vend."Language Code";
                                                                "Purchaser Code" := Vend."Purchaser Code";
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                "VAT Registration No." := Vend."VAT Registration No.";
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  "Prepayment %" := Vend."Prepayment %";

                                                                "Vendor Bank Acc. Code" := Vend."Default Bank Acc. Code";

                                                                IF "Pay-to Vendor No." = xRec."Pay-to Vendor No." THEN BEGIN
                                                                  IF ReceivedPurchLinesExist THEN
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                END;

                                                                TempDocDim.GetDimensions(DATABASE::"Purchase Header","Document Type","No.",0,TempDocDim);

                                                                CreateDim(
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                // $005 AJS 29.12.2006, Comprobantes fiscales
                                                                // Si es una factura o un abono tiene que llevar NCF

                                                                IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN BEGIN

                                                                  GLSetup.FINDFIRST;
                                                                  IF GLSetup."Aplica legislacion NCF" THEN BEGIN
                                                                    Vend.TESTFIELD("Cod. Grupo NCF");
                                                                    "Cod. Grupo NCF" := Vend."Cod. Grupo NCF";
                                                                    VALIDATE("Cod. Grupo NCF");
                                                                  END;
                                                                END;

                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("Pay-to Vendor No."))
                                                                ELSE
                                                                  IF (xRec."Pay-to Vendor No." <> '') AND PurchLinesExist THEN
                                                                    TempDocDim.UpdateAllLineDim(DATABASE::"Purchase Header","Document Type","No.",TempDocDim);

                                                                IF NOT SkipPayToContact THEN
                                                                  UpdatePayToCont("Pay-to Vendor No.");

                                                                "Pay-to IC Partner Code" := Vend."IC Partner Code";
                                                              END;

                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              ESP=Pago-a N§ proveedor];
                                                   NotBlank=Yes }
    { 5   ;   ;Pay-to Name         ;Text50        ;CaptionML=[ENU=Pay-to Name;
                                                              ESP=Pago a-Nombre] }
    { 6   ;   ;Pay-to Name 2       ;Text50        ;CaptionML=[ENU=Pay-to Name 2;
                                                              ESP=Pago a-Nombre 2] }
    { 7   ;   ;Pay-to Address      ;Text50        ;CaptionML=[ENU=Pay-to Address;
                                                              ESP=Pago a-Direcci¢n] }
    { 8   ;   ;Pay-to Address 2    ;Text50        ;CaptionML=[ENU=Pay-to Address 2;
                                                              ESP=Pago a-Direcci¢n 2] }
    { 9   ;   ;Pay-to City         ;Text30        ;OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidateCity("Pay-to City","Pay-to Post Code","Pay-to County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity("Pay-to City","Pay-to Post Code","Pay-to County",TRUE);
                                                            END;

                                                   CaptionML=[ENU=Pay-to City;
                                                              ESP=Pago a-Poblaci¢n] }
    { 10  ;   ;Pay-to Contact      ;Text50        ;CaptionML=[ENU=Pay-to Contact;
                                                              ESP=Pago a-Atenci¢n] }
    { 11  ;   ;Your Reference      ;Text30        ;CaptionML=[ENU=Your Reference;
                                                              ESP=Su/Ntra. ref.] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                END;

                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                  "Ship-to Name" := ShipToAddr.Name;
                                                                  "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                  "Ship-to Address" := ShipToAddr.Address;
                                                                  "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                  "Ship-to City" := ShipToAddr.City;
                                                                  "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                  "Ship-to County" := ShipToAddr.County;
                                                                  "Ship-to Country/Region Code" := ShipToAddr."Country/Region Code";
                                                                  "Ship-to Contact" := ShipToAddr.Contact;
                                                                  "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                  IF ShipToAddr."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Sell-to Customer No.");
                                                                  Cust.GET("Sell-to Customer No.");
                                                                  "Ship-to Name" := Cust.Name;
                                                                  "Ship-to Name 2" := Cust."Name 2";
                                                                  "Ship-to Address" := Cust.Address;
                                                                  "Ship-to Address 2" := Cust."Address 2";
                                                                  "Ship-to City" := Cust.City;
                                                                  "Ship-to Post Code" := Cust."Post Code";
                                                                  "Ship-to County" := Cust.County;
                                                                  "Ship-to Country/Region Code" := Cust."Country/Region Code";
                                                                  "Ship-to Contact" := Cust.Contact;
                                                                  "Shipment Method Code" := Cust."Shipment Method Code";
                                                                  IF Cust."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",Cust."Location Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ship-to Code;
                                                              ESP=C¢d. direcci¢n env¡o cliente] }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              ESP=Env¡o a-Nombre] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ESP=Env¡o a-Nombre 2] }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              ESP=Env¡o a-Direcci¢n] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ESP=Env¡o a-Direcci¢n 2] }
    { 17  ;   ;Ship-to City        ;Text30        ;OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidateCity("Ship-to City","Ship-to Post Code","Ship-to County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity("Ship-to City","Ship-to Post Code","Ship-to County",TRUE);
                                                            END;

                                                   CaptionML=[ENU=Ship-to City;
                                                              ESP=Env¡o a-Poblaci¢n] }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              ESP=Env¡o a-Atenci¢n] }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   CaptionML=[ENU=Order Date;
                                                              ESP=Fecha pedido] }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                VALIDATE("Document Date","Posting Date");

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;
                                                                IF PurchLinesExist THEN
                                                                  JobUpdatePurchLines;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 21  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Expected Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Expected Receipt Date;
                                                              ESP=Fecha recepci¢n esperada] }
    { 22  ;   ;Posting Description ;Text80        ;CaptionML=[ENU=Posting Description;
                                                              ESP=Texto de registro] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) OR
                                                                   (GLSetup."Payment Discount Type" = GLSetup."Payment Discount Type"::"Calc. Pmt. Disc. on Lines")
                                                                THEN
                                                                  IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                    PaymentTerms.GET("Payment Terms Code");
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    AdjustDueDate.PurchAdjustDueDate("Due Date","Document Date",PaymentTerms.CalculateMaxDueDate("Document Date"),
                                                                "Pay-to Vendor No.");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF xRec."Document Date"="Document Date" THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %");
                                                                  END ELSE BEGIN
                                                                    "Due Date" := "Document Date";
                                                                    AdjustDueDate.PurchAdjustDueDate("Due Date","Document Date",31129999D,"Pay-to Vendor No.");
                                                                    "Pmt. Discount Date" := "Document Date";
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END
                                                                ELSE
                                                                  IF "Payment Terms Code" <> '' THEN BEGIN
                                                                    PaymentTerms.GET("Payment Terms Code");
                                                                    VALIDATE("Payment Discount %",PaymentTerms."Discount %");
                                                                  END ELSE
                                                                    VALIDATE("Payment Discount %",0);

                                                                IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                  NOT (PaymentTerms."Calc. Pmt. Disc. on Cr. Memos"))
                                                                THEN BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF xRec."Document Date"="Document Date" THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;

                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                                UpdatePmtDiscDate();
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ESP=C¢d. trminos pago] }
    { 24  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                  PaymentTerms.VerifyMaxNoDaysTillDueDate("Due Date","Document Date",FIELDCAPTION("Due Date"));
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                                UpdatePmtDiscDate();
                                                              END;

                                                   CaptionML=[ENU=Payment Discount %;
                                                              ESP=% Dto. P.P.];
                                                   DecimalPlaces=0:6 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;OnValidate=BEGIN
                                                                UpdatePmtDiscDate();
                                                              END;

                                                   CaptionML=[ENU=Pmt. Discount Date;
                                                              ESP=Fecha dto. P.P.] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ESP=C¢d. condiciones env¡o] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Buy-from Vendor No." = "Buy-from Vendor No.")
                                                                THEN
                                                                  MessageIfPurchLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;

                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almacn] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=[ENU=Vendor Posting Group;
                                                              ESP=Grupo contable proveedor];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE BEGIN
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    RecreatePurchLines(FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=C¢d. divisa] }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Currency Factor"));
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ESP=Factor divisa];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                PurchLine@1000 : Record 39;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Direct Unit Cost",'<>%1',0);
                                                                  PurchLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF PurchLine.FINDFIRST THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text025 +
                                                                          Text027,
                                                                          FIELDCAPTION("Prices Including VAT"),PurchLine.FIELDCAPTION("Direct Unit Cost")),
                                                                        TRUE);
                                                                    PurchLine.SetPurchHeader(Rec);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");

                                                                    REPEAT
                                                                      PurchLine.TESTFIELD("Quantity Invoiced",0);
                                                                      PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        PurchLine."VAT Difference" := 0;
                                                                        PurchLine.InitOutstandingAmount;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" * (1 + ((PurchLine."VAT %" / 100) + (PurchLine."EC %" / 100))),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" * (1 + ((PurchLine."VAT %" / 100) + (PurchLine."EC %" / 100))),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" / (1 + ((PurchLine."VAT %" / 100) + (PurchLine."EC %" / 100))),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" / (1 + ((PurchLine."VAT %" / 100) + (PurchLine."EC %" / 100))),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      PurchLine.MODIFY;
                                                                    UNTIL PurchLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prices Including VAT;
                                                              ESP=Precios IVA incluido] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              ESP=C¢d. dto. factura] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=[ENU=Language Code;
                                                              ESP=C¢d. idioma] }
    { 43  ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                TempDocDim@1000 : TEMPORARY Record 357;
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Canceled,ApprovalEntry.Status::Rejected);
                                                                IF ApprovalEntry.FIND('-') THEN
                                                                  ERROR(Text042,FIELDCAPTION("Purchaser Code"));

                                                                TempDocDim.GetDimensions(DATABASE::"Purchase Header","Document Type","No.",0,TempDocDim);

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF PurchLinesExist THEN
                                                                  TempDocDim.UpdateAllLineDim(DATABASE::"Purchase Header","Document Type","No.",TempDocDim);
                                                              END;

                                                   CaptionML=[ENU=Purchaser Code;
                                                              ESP=C¢d. comprador] }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              ESP=Clase pedido] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                  No.=FIELD(No.),
                                                                                                  Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ESP=Comentario];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ESP=N§ copias impresas];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ESP=Esperar] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ESP=Liq. por tipo documento];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,,,,,,,,,,,,,,,Bill";
                                                                    ESP=" ,Pago,Factura,Abono,Docs. inters,Recordatorio,Reembolso,,,,,,,,,,,,,,,Efecto"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,,,,,,,,,,,,,,,Bill] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.")
                                                                  ELSE IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");

                                                                VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
                                                                VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                                VendLedgEntry.SETRANGE(Open,TRUE);
                                                                VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF VendLedgEntry.FIND('-') THEN BEGIN
                                                                  IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                    "Generate Autocredit Memo" := VendLedgEntry."Generated Autodocument"
                                                                  ELSE
                                                                    "Generate Autoinvoices" := VendLedgEntry."Generated Autodocument";
                                                                END;

                                                                // CheckBillSituation; // es0011
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
                                                              VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                              VendLedgEntry.SETRANGE(Open,TRUE);
                                                              VendLedgEntry.SETFILTER("Document Situation",'<>%1',VendLedgEntry."Document Situation"::"Posted BG/PO");
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF "Applies-to Bill No." <> '' THEN
                                                                  VendLedgEntry.SETRANGE("Bill No.","Applies-to Bill No.");
                                                                IF VendLedgEntry.FINDFIRST THEN;
                                                                VendLedgEntry.SETRANGE("Document Type");
                                                                VendLedgEntry.SETRANGE("Document No.");
                                                                VendLedgEntry.SETRANGE("Bill No.");
                                                              END ELSE IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF VendLedgEntry.FINDFIRST THEN;
                                                                  VendLedgEntry.SETRANGE("Document Type");
                                                                END ELSE IF Amount <> 0 THEN BEGIN
                                                                  VendLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                  IF VendLedgEntry.FINDFIRST THEN;
                                                                  VendLedgEntry.SETRANGE(Positive);
                                                                END;
                                                              ApplyVendEntries.SetPurch(Rec,VendLedgEntry,PurchHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                                                              ApplyVendEntries.SETRECORD(VendLedgEntry);
                                                              ApplyVendEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyVendEntries.GetVendLedgEntry(VendLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",VendLedgEntry."Currency Code",GenJnILine."Account Type"::Vendor,TRUE);
                                                                "Applies-to Doc. Type" := VendLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := VendLedgEntry."Document No.";
                                                                "Applies-to Bill No." := VendLedgEntry."Bill No.";
                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                  "Generate Autocredit Memo" := VendLedgEntry."Generated Autodocument"
                                                                ELSE
                                                                  "Generate Autoinvoices" := VendLedgEntry."Generated Autodocument";

                                                              END;
                                                              CLEAR(ApplyVendEntries);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ESP=Liq. por n§ documento] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ESP=Cta. contrapartida] }
    { 57  ;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              ESP=Recepci¢n] }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              ESP=Factura] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ESP=Importe];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ESP=Importe IVA incl.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Receiving No.       ;Code20        ;CaptionML=[ENU=Receiving No.;
                                                              ESP=N§ sig. albar n compra] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              ESP=N§ sig. factura] }
    { 64  ;   ;Last Receiving No.  ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=[ENU=Last Receiving No.;
                                                              ESP=élt. n§ albar n compra];
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              ESP=élt. n§ factura];
                                                   Editable=No }
    { 66  ;   ;Vendor Order No.    ;Code20        ;CaptionML=[ENU=Vendor Order No.;
                                                              ESP=N§ pedido proveedor] }
    { 67  ;   ;Vendor Shipment No. ;Code20        ;CaptionML=[ENU=Vendor Shipment No.;
                                                              ESP=N§ albar n proveedor] }
    { 68  ;   ;Vendor Invoice No.  ;Code20        ;CaptionML=[ENU=Vendor Invoice No.;
                                                              ESP=N§ factura proveedor] }
    { 69  ;   ;Vendor Cr. Memo No. ;Code20        ;CaptionML=[ENU=Vendor Cr. Memo No.;
                                                              ESP=N§ abono proveedor] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ESP=CIF/NIF] }
    { 72  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                END;

                                                                IF "Sell-to Customer No." = '' THEN
                                                                  VALIDATE("Location Code",UserMgt.GetLocation(1,'',"Responsibility Center"))
                                                                ELSE
                                                                  VALIDATE("Ship-to Code",'');
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ESP=Venta a-N§ cliente] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ESP=C¢d. auditor¡a] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group")
                                                                THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN BEGIN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                    RecreatePurchLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ESP=Grupo contable negocio] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Type"));
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              ESP=Naturaleza transacci¢n] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transport Method"));
                                                              END;

                                                   CaptionML=[ENU=Transport Method;
                                                              ESP=Modo transporte] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ESP=C¢d. IVA pa¡s/regi¢n] }
    { 79  ;   ;Buy-from Vendor Name;Text50        ;CaptionML=[ENU=Buy-from Vendor Name;
                                                              ESP=Compra a-Nombre] }
    { 80  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=[ENU=Buy-from Vendor Name 2;
                                                              ESP=Compra a-Nombre 2] }
    { 81  ;   ;Buy-from Address    ;Text50        ;CaptionML=[ENU=Buy-from Address;
                                                              ESP=Compra a-Direcci¢n] }
    { 82  ;   ;Buy-from Address 2  ;Text50        ;CaptionML=[ENU=Buy-from Address 2;
                                                              ESP=Compra a-Direcci¢n 2] }
    { 83  ;   ;Buy-from City       ;Text30        ;OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidateCity("Buy-from City","Buy-from Post Code","Buy-from County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity("Buy-from City","Buy-from Post Code","Buy-from County",TRUE);
                                                            END;

                                                   CaptionML=[ENU=Buy-from City;
                                                              ESP=Compra a-Poblaci¢n] }
    { 84  ;   ;Buy-from Contact    ;Text50        ;CaptionML=[ENU=Buy-from Contact;
                                                              ESP=Compra a-Atenci¢n] }
    { 85  ;   ;Pay-to Post Code    ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidatePostCode("Pay-to City","Pay-to Post Code","Pay-to County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode("Pay-to City","Pay-to Post Code","Pay-to County",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to Post Code;
                                                              ESP=Pago a-C.P.] }
    { 86  ;   ;Pay-to County       ;Text30        ;CaptionML=[ENU=Pay-to County;
                                                              ESP=Pago a-Provincia] }
    { 87  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Pay-to Country/Region Code;
                                                              ESP=Pago a-C¢d. pa¡s/regi¢n] }
    { 88  ;   ;Buy-from Post Code  ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidatePostCode("Buy-from City","Buy-from Post Code","Buy-from County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode("Buy-from City","Buy-from Post Code","Buy-from County",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from Post Code;
                                                              ESP=Compra a-C.P.] }
    { 89  ;   ;Buy-from County     ;Text30        ;CaptionML=[ENU=Buy-from County;
                                                              ESP=Compra a-Provincia] }
    { 90  ;   ;Buy-from Country/Region Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Buy-from Country/Region Code;
                                                              ESP=Compra a-C¢d. pa¡s/regi¢n] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidatePostCode("Ship-to City","Ship-to Post Code","Ship-to County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode("Ship-to City","Ship-to Post Code","Ship-to County",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ESP=Env¡o a-C.P.] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ESP=Env¡o a-Provincia] }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ESP=Env¡o a-C¢d. pa¡s/regi¢n] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ESP=Tipo contrapartida];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ESP=Cuenta,Banco];
                                                   OptionString=G/L Account,Bank Account }
    { 95  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=VAR
                                                                PayToVend@1000 : Record 23;
                                                              BEGIN
                                                                IF "Order Address Code" <> '' THEN BEGIN
                                                                  OrderAddr.GET("Buy-from Vendor No.","Order Address Code");
                                                                  "Buy-from Vendor Name" := OrderAddr.Name;
                                                                  "Buy-from Vendor Name 2" := OrderAddr."Name 2";
                                                                  "Buy-from Address" := OrderAddr.Address;
                                                                  "Buy-from Address 2" := OrderAddr."Address 2";
                                                                  "Buy-from City" := OrderAddr.City;
                                                                  "Buy-from Contact" := OrderAddr.Contact;
                                                                  "Buy-from Post Code" := OrderAddr."Post Code";
                                                                  "Buy-from County" := OrderAddr.County;
                                                                  "Buy-from Country/Region Code" := OrderAddr."Country/Region Code";
                                                                   "VAT Country/Region Code" := OrderAddr."Country/Region Code";
                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := OrderAddr.Name;
                                                                    "Ship-to Name 2" := OrderAddr."Name 2";
                                                                    "Ship-to Address" := OrderAddr.Address;
                                                                    "Ship-to Address 2" := OrderAddr."Address 2";
                                                                    "Ship-to City" := OrderAddr.City;
                                                                    "Ship-to Post Code" := OrderAddr."Post Code";
                                                                    "Ship-to County" := OrderAddr.County;
                                                                    "Ship-to Country/Region Code" := OrderAddr."Country/Region Code";
                                                                    "Ship-to Contact" := OrderAddr.Contact;
                                                                  END

                                                                END ELSE BEGIN
                                                                  GetVend("Buy-from Vendor No.");
                                                                  "Buy-from Vendor Name" := Vend.Name;
                                                                  "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                  "Buy-from Address" := Vend.Address;
                                                                  "Buy-from Address 2" := Vend."Address 2";
                                                                  "Buy-from City" := Vend.City;
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                  "Buy-from Post Code" := Vend."Post Code";
                                                                  "Buy-from County" := Vend.County;
                                                                  "Buy-from Country/Region Code" := Vend."Country/Region Code";
                                                                  "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := Vend.Name;
                                                                    "Ship-to Name 2" := Vend."Name 2";
                                                                    "Ship-to Address" := Vend.Address;
                                                                    "Ship-to Address 2" := Vend."Address 2";
                                                                    "Ship-to City" := Vend.City;
                                                                    "Ship-to Post Code" := Vend."Post Code";
                                                                    "Ship-to County" := Vend.County;
                                                                    "Ship-to Country/Region Code" := Vend."Country/Region Code";
                                                                    "Ship-to Contact" := Vend.Contact;
                                                                    "Shipment Method Code" := Vend."Shipment Method Code";
                                                                    IF Vend."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",Vend."Location Code");
                                                                  END

                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Order Address Code;
                                                              ESP=C¢d. direcci¢n pedido proveed.] }
    { 97  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Entry Point"));
                                                              END;

                                                   CaptionML=[ENU=Entry Point;
                                                              ESP=Puerto/Aerop. descarga] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ESP=Correcci¢n] }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              ESP=Fecha emisi¢n documento] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION(Area));
                                                              END;

                                                   CaptionML=[ENU=Area;
                                                              ESP=C¢d. provincia] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Specification"));
                                                              END;

                                                   CaptionML=[ENU=Transaction Specification;
                                                              ESP=Especificaci¢n transacci¢n] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ESP=C¢d. forma pago] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ESP=Nos. serie];
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting No. Series;
                                                              ESP=N§ serie registro] }
    { 109 ;   ;Receiving No. Series;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Receiving No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series");
                                                                END;
                                                                TESTFIELD("Receiving No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series") THEN
                                                                  VALIDATE("Receiving No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Receiving No. Series;
                                                              ESP=N§ serie alb. compra] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ESP=C¢d.  rea impuesto] }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ESP=Sujeto a impuesto] }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ESP=Grupo registro IVA neg.] }
    { 118 ;   ;Applies-to ID       ;Code20        ;OnValidate=VAR
                                                                TempVendLedgEntry@1000 : Record 25;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
                                                                  VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                                  VendLedgEntry.SETRANGE(Open,TRUE);
                                                                  VendLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF VendLedgEntry.FINDFIRST THEN
                                                                    VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,0,0,'');
                                                                  VendLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ESP=Liq. por id.] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=VAR
                                                                ChangeLogMgt@1002 : Codeunit 423;
                                                                RecRef@1001 : RecordRef;
                                                                xRecRef@1000 : RecordRef;
                                                              BEGIN
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed :=
                                                                      CONFIRM(
                                                                        Text007 +
                                                                        Text008,FALSE,
                                                                        FIELDCAPTION("VAT Base Discount %"),
                                                                        GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                        GLSetup.TABLECAPTION);
                                                                  IF NOT Confirmed THEN
                                                                    "VAT Base Discount %" := xRec."VAT Base Discount %";
                                                                END;

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                PurchLine.SETRANGE("Document Type","Document Type");
                                                                PurchLine.SETRANGE("Document No.","No.");
                                                                PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
                                                                PurchLine.SETFILTER(Quantity,'<>0');
                                                                DocDim.LOCKTABLE;
                                                                PurchLine.LOCKTABLE;
                                                                IF PurchLine.FINDSET THEN BEGIN
                                                                  xRecRef.GETTABLE(xRec);
                                                                  MODIFY;
                                                                  RecRef.GETTABLE(Rec);
                                                                  ChangeLogMgt.LogModification(RecRef,xRecRef);
                                                                  REPEAT
                                                                    xRecRef.GETTABLE(PurchLine);
                                                                    PurchLine.UpdateAmounts;
                                                                    PurchLine.MODIFY;
                                                                    RecRef.GETTABLE(PurchLine);
                                                                    ChangeLogMgt.LogModification(RecRef,xRecRef);
                                                                  UNTIL PurchLine.NEXT = 0;
                                                                END;
                                                                PurchLine.RESET;
                                                              END;

                                                   CaptionML=[ENU=VAT Base Discount %;
                                                              ESP=% Dto. base IVA];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    ESP=Abierto,Lanzado,Aprobaci¢n pendiente,Prepago pendiente];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              ESP=C lculo descuento factura];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ESP=Ninguno,%,Importe];
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              ESP=Valor descuento factura];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  TESTFIELD("Buy-from IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Send IC Document;
                                                              ESP=Enviar documento IC] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              ESP=Estado socio IC];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    ESP=Nuevo,Pendiente,Enviado];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Buy-from IC Partner Code;Code20    ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Buy-from IC Partner Code;
                                                              ESP=C¢digo IC asociada de compra];
                                                   Editable=No }
    { 126 ;   ;Pay-to IC Partner Code;Code20      ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Pay-to IC Partner Code;
                                                              ESP=C¢digo IC asociada de pago];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=IC Direction;
                                                              ESP=Direcci¢n env¡o IC];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ESP=Saliente,Entrante];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              ESP=N§ prepago] }
    { 131 ;   ;Last Prepayment No. ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              ESP=N§ £ltimo prepago] }
    { 132 ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              ESP=N§ abono prepago] }
    { 133 ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Purch. Cr. Memo Hdr.";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              ESP=N§ £ltimo abono prepago] }
    { 134 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Prepayment %"));
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ESP=% prepago];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 135 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Prepmt. Inv. Nos.","Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No. Series",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Prepmt. Inv. Nos.","Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ESP=N§ serie prepago] }
    { 136 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              ESP=Compresi¢n prepago] }
    { 137 ;   ;Prepayment Due Date ;Date          ;OnValidate=BEGIN
                                                                IF PaymentTerms.GET("Prepmt. Payment Terms Code") THEN
                                                                  PaymentTerms.VerifyMaxNoDaysTillDueDate("Prepayment Due Date","Document Date",FIELDCAPTION("Prepayment Due Date"));
                                                              END;

                                                   CaptionML=[ENU=Prepayment Due Date;
                                                              ESP=Fecha vencimiento prepago] }
    { 138 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Prepmt. Cr. Memo Nos.","Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No. Series",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Prepmt. Cr. Memo Nos.","Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ESP=N§ serie abono prepago] }
    { 139 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=[ENU=Prepmt. Posting Description;
                                                              ESP=Texto registro prepago] }
    { 142 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              ESP=Fecha descuento prepago] }
    { 143 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    AdjustDueDate.PurchAdjustDueDate("Prepayment Due Date","Document Date",PaymentTerms.CalculateMaxDueDate("Document Date"),
                                                                "Pay-to Vendor No.");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    GLSetup.GET;
                                                                    IF GLSetup."Payment Discount Type" = GLSetup."Payment Discount Type"::"Calc. Pmt. Disc. on Lines" THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",0)
                                                                    ELSE
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %");
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                  VALIDATE("Prepmt. Payment Discount %",0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              ESP=C¢digo trminos prepago] }
    { 144 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF NOT ("Prepmt. Payment Discount %" = 0) AND
                                                                  (GLSetup."Payment Discount Type" = GLSetup."Payment Discount Type"::"Calc. Pmt. Disc. on Lines")
                                                                THEN
                                                                  ERROR(Text10700,FIELDCAPTION("Prepmt. Payment Discount %"),GLSetup.FIELDCAPTION("Payment Discount Type"),
                                                                    GLSetup."Payment Discount Type");
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              ESP=% descuento prepago];
                                                   DecimalPlaces=0:5 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ESP=N§ oferta];
                                                   Editable=No }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Purchase Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                  No.=FIELD(No.),
                                                                                                                  Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              ESP=N§ de versiones archivadas];
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              ESP=Ocurrencia N§ doc.] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=VAR
                                                                TempDocDim@1000 : TEMPORARY Record 357;
                                                              BEGIN
                                                                TempDocDim.GetDimensions(DATABASE::"Purchase Header","Document Type","No.",0,TempDocDim);

                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF PurchLinesExist THEN
                                                                  TempDocDim.UpdateAllLineDim(DATABASE::"Purchase Header","Document Type","No.",TempDocDim);
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ESP=N§ campa¤a] }
    { 5052;   ;Buy-from Contact No.;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1000 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Buy-from Contact No." <> xRec."Buy-from Contact No.") AND
                                                                   (xRec."Buy-from Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Buy-from Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF ("Buy-from Contact No." = '') AND ("Buy-from Vendor No." = '') THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Buy-from Contact No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Receiving No." <> '' THEN BEGIN
                                                                        "Receiving No. Series" := xRec."Receiving No. Series";
                                                                        "Receiving No." := xRec."Receiving No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Shipment No." <> '' THEN BEGIN
                                                                        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
                                                                        "Return Shipment No." := xRec."Return Shipment No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Buy-from Vendor No." <> '') AND ("Buy-from Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Buy-from Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Buy-from Vendor No.");
                                                                END;

                                                                UpdateBuyFromVend("Buy-from Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Buy-from Vendor No." <> '' THEN BEGIN
                                                                IF Cont.GET("Buy-from Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Buy-from Contact No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN ;
                                                              IF FORM.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Buy-from Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Buy-from Contact No.;
                                                              ESP=Compra a-N§ contacto] }
    { 5053;   ;Pay-to Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Pay-to Contact No." <> xRec."Pay-to Contact No.") AND
                                                                   (xRec."Pay-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Pay-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF ("Pay-to Contact No." = '') AND ("Pay-to Vendor No." = '') THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Pay-to Contact No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Receiving No." <> '' THEN BEGIN
                                                                        "Receiving No. Series" := xRec."Receiving No. Series";
                                                                        "Receiving No." := xRec."Receiving No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Shipment No." <> '' THEN BEGIN
                                                                        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
                                                                        "Return Shipment No." := xRec."Return Shipment No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Pay-to Contact No." := xRec."Pay-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Pay-to Vendor No." <> '') AND ("Pay-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Pay-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Pay-to Vendor No.");
                                                                END;

                                                                UpdatePayToVend("Pay-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record 5050;
                                                              ContBusinessRelation@1001 : Record 5054;
                                                            BEGIN
                                                              IF "Pay-to Vendor No." <> '' THEN BEGIN
                                                                IF Cont.GET("Pay-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Pay-to Contact No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN ;
                                                              IF FORM.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Pay-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Pay-to Contact No.;
                                                              ESP=Pago a-N§ contacto] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserMgt.CheckRespCenter(1,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    RespCenter.TABLECAPTION,UserMgt.GetPurchasesFilter);

                                                                "Location Code" := UserMgt.GetLocation(1,'',"Responsibility Center");
                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;

                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreatePurchLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ESP=Centro responsabilidad] }
    { 5752;   ;Completely Received ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Purchase Line"."Completely Received" WHERE (Document Type=FIELD(Document Type),
                                                                                                                Document No.=FIELD(No.),
                                                                                                                Type=FILTER(<>' '),
                                                                                                                Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Received;
                                                              ESP=Recibido completamente];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ESP=Regis. desde almac. ref.] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ESP=Filtro almacn] }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text034,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Requested Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Requested Receipt Date;
                                                              ESP=Fecha recep. solicitada] }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> xRec."Promised Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Promised Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Promised Receipt Date;
                                                              ESP=Fecha recep. prometida] }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Lead Time Calculation" <> xRec."Lead Time Calculation" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Lead Time Calculation"));
                                                              END;

                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              ESP=Plazo entrega (d¡as)] }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Inbound Whse. Handling Time" <> xRec."Inbound Whse. Handling Time" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Inbound Whse. Handling Time"));
                                                              END;

                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ESP=Tiempo manip. alm. entrada] }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ESP=Filtro fecha] }
    { 5800;   ;Vendor Authorization No.;Code20    ;CaptionML=[ENU=Vendor Authorization No.;
                                                              ESP=N§ autorizaci¢n proveedor] }
    { 5801;   ;Return Shipment No. ;Code20        ;CaptionML=[ENU=Return Shipment No.;
                                                              ESP=N§ env¡o devoluci¢n] }
    { 5802;   ;Return Shipment No. Series;Code10  ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Shipment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series");
                                                                END;
                                                                TESTFIELD("Return Shipment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series") THEN
                                                                  VALIDATE("Return Shipment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Shipment No. Series;
                                                              ESP=Series n§ env¡o devoluci¢n] }
    { 5803;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              ESP=Env¡o] }
    { 5804;   ;Last Return Shipment No.;Code20    ;TableRelation="Return Shipment Header";
                                                   CaptionML=[ENU=Last Return Shipment No.;
                                                              ESP=N§ £lt. env¡o devoluci¢n];
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code20        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserMgt.CheckRespCenter2(1,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text049,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserMgt.GetPurchasesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=[ENU=Assigned User ID;
                                                              ESP=Id. usuario asignado] }
    { 10702;  ;Generate Autoinvoices;Boolean      ;OnValidate=BEGIN
                                                                IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Blanket Order"] THEN BEGIN
                                                                  IF xRec."Generate Autoinvoices" AND (NOT "Generate Autoinvoices") THEN BEGIN
                                                                    PurchRcptHeader.SETCURRENTKEY("Order No.");
                                                                    PurchRcptHeader.SETRANGE("Order No.","No.");
                                                                    IF PurchRcptHeader.FIND('-') THEN
                                                                      IF PurchRcptHeader."Generate AutoInvoices" THEN
                                                                        ERROR(Text1100000
                                                                        ,PurchRcptHeader.FIELDCAPTION("Order No.")
                                                                        ,PurchRcptHeader."Order No."
                                                                        ,PurchRcptHeader.FIELDCAPTION("Generate AutoInvoices")
                                                                        ,PurchRcptHeader."Generate AutoInvoices");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Generate Autoinvoices;
                                                              ESP=Generar autofacturas];
                                                   Editable=No }
    { 10703;  ;Generate Autocredit Memo;Boolean   ;CaptionML=[ENU=Generate Autocredit Memo;
                                                              ESP=Generar autoabono];
                                                   Editable=No }
    { 10705;  ;Corrected Invoice No.;Code20       ;OnValidate=VAR
                                                                PurchaseInvoiceHeader@1100007 : Record 122;
                                                              BEGIN
                                                                IF "Corrected Invoice No." <> '' THEN BEGIN
                                                                  PurchaseInvoiceHeader.SETCURRENTKEY("No.");
                                                                  PurchaseInvoiceHeader.SETRANGE("Pay-to Vendor No.","Pay-to Vendor No.");
                                                                  PurchaseInvoiceHeader.SETRANGE(PurchaseInvoiceHeader."No.","Corrected Invoice No.");
                                                                  IF NOT PurchaseInvoiceHeader.FIND('-') THEN
                                                                    ERROR(Text1100002,FIELDCAPTION("Corrected Invoice No."),"Corrected Invoice No.");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              PurchaseInvoiceHeader@1100002 : Record 122;
                                                              PostedPurchaseInvoices@1100003 : Form 146;
                                                            BEGIN
                                                              PurchaseInvoiceHeader.SETCURRENTKEY("No.");
                                                              PurchaseInvoiceHeader.SETRANGE("Pay-to Vendor No.","Pay-to Vendor No.");

                                                              PostedPurchaseInvoices.SETTABLEVIEW(PurchaseInvoiceHeader);
                                                              PostedPurchaseInvoices.SETRECORD(PurchaseInvoiceHeader);
                                                              PostedPurchaseInvoices.LOOKUPMODE(TRUE);
                                                              IF PostedPurchaseInvoices.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                 PostedPurchaseInvoices.GETRECORD(PurchaseInvoiceHeader);
                                                                VALIDATE("Corrected Invoice No.", PurchaseInvoiceHeader."No.");
                                                              END;
                                                              CLEAR(PostedPurchaseInvoices);
                                                            END;

                                                   CaptionML=[ENU=Corrected Invoice No.;
                                                              ESP=N.§ factura corregida] }
    { 50000;  ;Marca               ;Code20        ;CaptionML=ESP=Marca }
    { 50001;  ;Tipo de Clave       ;Code10        ;TableRelation="Maestro de Claves".Clave;
                                                   CaptionML=ESP=Tipo de Clave;
                                                   Description=$003"Maestro de Claves".Clave }
    { 50008;  ;Usuario             ;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=ESP=Usuario;
                                                   Description=$003User."User ID";
                                                   Editable=No }
    { 90000;  ;Anulaci¢n           ;Boolean       ;Description=$003 AF3.70 }
    { 7000000;;Applies-to Bill No. ;Code20        ;OnValidate=BEGIN
                                                                // CheckBillSituation; // es0011
                                                              END;

                                                   CaptionML=[ENU=Applies-to Bill No.;
                                                              ESP=Liq. por n§ efecto] }
    { 7000001;;Vendor Bank Acc. Code;Code10       ;TableRelation="Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Pay-to Vendor No.));
                                                   CaptionML=[ENU=Vendor Bank Acc. Code;
                                                              ESP=C¢d. banco proveedor] }
    { 7000003;;Pay-at Code         ;Code20        ;TableRelation="Vendor Pmt. Address".Code WHERE (Vendor No.=FIELD(Pay-to Vendor No.));
                                                   CaptionML=[ENU=Pay-at Code;
                                                              ESP=Pago en-C¢digo] }
    { 7000100;;Traspasado          ;Boolean       ;CaptionML=ESP=Traspasado;
                                                   Description=Auditoria traspaso contable;
                                                   Editable=No }
    { 7000101;;Usuario traspaso    ;Code20        ;CaptionML=ESP=Usuario traspaso;
                                                   Description=Auditoria traspaso contable;
                                                   Editable=No }
    { 7000102;;Fecha traspaso      ;Date          ;CaptionML=ESP=Fecha traspaso;
                                                   Description=Auditoria traspaso contable }
    { 7000103;;Hora traspaso       ;Time          ;CaptionML=ESP=Hora traspaso;
                                                   Description=Auditoria traspaso contable;
                                                   Editable=No }
    { 7009700;;Cod. Grupo NCF      ;Code10        ;TableRelation="Grupo configuracion NCF".Codigo WHERE (Tipo grupo=CONST(Compras));
                                                   OnValidate=BEGIN
                                                                // AJS 15.05.2007
                                                                // Si se cambio el proveedor pero no hay cambio de grupo de NCF no hay que hacer nada

                                                                IF "Cod. Grupo NCF" <> xRec."Cod. Grupo NCF" THEN BEGIN

                                                                  IF "Comprobante Fiscal" <> '' THEN
                                                                    ERROR(Text052);

                                                                  // AJS 08.02.2007, Anulaciones

                                                                  IF NOT Anulaci¢n THEN BEGIN
                                                                    rGrupoNCF.GET(rGrupoNCF."Tipo grupo"::Compras, Vend."Cod. Grupo NCF");

                                                                    IF Vend."Digitos fijos NCF" <> '' THEN BEGIN
                                                                      "Comprobante Fiscal" := Vend."Digitos fijos NCF";
                                                                    END
                                                                    ELSE BEGIN
                                                                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        rGrupoNCF.TESTFIELD("Serie NCF Facturas");
                                                                        "Comprobante Fiscal" := NoSeriesMgt.GetNextNo(rGrupoNCF."Serie NCF Facturas", "Posting Date", TRUE);
                                                                      END
                                                                      ELSE BEGIN
                                                                        rGrupoNCF.TESTFIELD("Serie NCF Abonos");
                                                                        "Comprobante Fiscal" := NoSeriesMgt.GetNextNo(rGrupoNCF."Serie NCF Abonos", "Posting Date", TRUE);
                                                                      END;
                                                                    END;
                                                                  END;

                                                                END;
                                                              END;

                                                   CaptionML=ESP=Cod. Grupo NCF;
                                                   Description=$005  "Grupo configuracion NCF".Codigo WHERE (Tipo grupo=CONST(Compras)) }
    { 7009703;;Comprobante Fiscal  ;Code20        ;OnValidate=BEGIN
                                                                // El comprobante solo es editable en aquellos proveedores que tienen digitos fijos

                                                                GLSetup.FINDFIRST;
                                                                IF GLSetup."Aplica legislacion NCF" THEN BEGIN
                                                                  Vend.GET("Pay-to Vendor No.");
                                                                  IF Vend."Digitos fijos NCF" = '' THEN
                                                                    ERROR(Text053);

                                                                  IF STRLEN("Comprobante Fiscal") <> GLSetup."Digitos NCF" THEN
                                                                    ERROR(Text055);
                                                                END
                                                                ELSE
                                                                  ERROR(Text054);
                                                              END;

                                                   CaptionML=ESP=Comprobante Fiscal;
                                                   Description=$005 }
    { 7009704;;Tipo factura compra ;Code10        ;TableRelation="Tipo factura compra RD";
                                                   CaptionML=ESP=Tipo factura compra;
                                                   Description=Tipo factura compra RD }
    { 7009705;;Codigo barras PDF   ;Code20        ;OnValidate=VAR
                                                                cFunVar@1103355000 : Codeunit 7009720;
                                                              BEGIN

                                                                // Comprobar si esta duplicado

                                                                cFunVar.CheckCodBarrasCompraDuplicado("Codigo barras PDF", "No.");

                                                                // Si se trata de una sustitucion hay que pedir al usuario una confirmacion

                                                                IF xRec."Codigo barras PDF" <> '' THEN
                                                                  cFunVar.SustituirDocumentoFactura(xRec."Codigo barras PDF");
                                                              END;

                                                   CaptionML=ESP=Codigo barras PDF;
                                                   Description=Este codigo de barras ser  el nombre del fichero escaneado con la factura }
    { 99008500;;Date Received      ;Date          ;CaptionML=[ENU=Date Received;
                                                              ESP=Fecha recepci¢n] }
    { 99008501;;Time Received      ;Time          ;CaptionML=[ENU=Time Received;
                                                              ESP=Hora recepci¢n] }
    { 99008504;;BizTalk Purchase Quote;Boolean    ;CaptionML=[ENU=BizTalk Purchase Quote;
                                                              ESP=Oferta compra BizTalk] }
    { 99008505;;BizTalk Purch. Order Cnfmn.;Boolean;
                                                   CaptionML=[ENU=BizTalk Purch. Order Cnfmn.;
                                                              ESP=Confirm. ped. compra BizTalk] }
    { 99008506;;BizTalk Purchase Invoice;Boolean  ;CaptionML=[ENU=BizTalk Purchase Invoice;
                                                              ESP=Factura compra BizTalk] }
    { 99008507;;BizTalk Purchase Receipt;Boolean  ;CaptionML=[ENU=BizTalk Purchase Receipt;
                                                              ESP=Albar n compra BizTalk] }
    { 99008508;;BizTalk Purchase Credit Memo;Boolean;
                                                   CaptionML=[ENU=BizTalk Purchase Credit Memo;
                                                              ESP=Abono compra BizTalk] }
    { 99008509;;Date Sent          ;Date          ;CaptionML=[ENU=Date Sent;
                                                              ESP=Fecha enviado] }
    { 99008510;;Time Sent          ;Time          ;CaptionML=[ENU=Time Sent;
                                                              ESP=Hora env¡o] }
    { 99008511;;BizTalk Request for Purch. Qte;Boolean;
                                                   CaptionML=[ENU=BizTalk Request for Purch. Qte;
                                                              ESP=Petici¢n oferta compra BizTalk] }
    { 99008512;;BizTalk Purchase Order;Boolean    ;CaptionML=[ENU=BizTalk Purchase Order;
                                                              ESP=Pedido compra BizTalk] }
    { 99008520;;Vendor Quote No.   ;Code20        ;CaptionML=[ENU=Vendor Quote No.;
                                                              ESP=N§ oferta proveedor] }
    { 99008521;;BizTalk Document Sent;Boolean     ;CaptionML=[ENU=BizTalk Document Sent;
                                                              ESP=Documento enviado BizTalk] }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Buy-from Vendor No.,No.    }
    {    ;Buy-from Vendor No.                      }
    {    ;Marca                                   ;KeyGroups=INCOMING;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to print receipt %1?;ESP=¨Confirma que desea imprimir el albar n %1?';
      Text001@1001 : TextConst 'ENU=Do you want to print invoice %1?;ESP=¨Confirma que desea imprimir la factura %1?';
      Text002@1002 : TextConst 'ENU=Do you want to print credit memo %1?;ESP=¨Confirma que desea imprimir el abono %1?';
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      Text004@1004 : TextConst 'ENU=Do you want to change %1?;ESP=¨Confirma que desea cambiar %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.;ESP=No se puede modificar el cliente %1 ya que el documento tiene una o m s l¡neas.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more sales orders.;ESP=No se puede cambiar %1 porque el pedido est  asociado con pedidos de venta.';
      Text007@1007 : TextConst 'ENU=%1 is greater than %2 in the %3 table.\;ESP=%1 es mayor que %2 en la tabla %3.\';
      Text008@1008 : TextConst 'ENU=Confirm change?;ESP=¨Confirma el cambio?';
      Text009@1009 : TextConst 'ENU="Deleting this document will cause a gap in the number series for receipts. ";ESP="Si borra el documento, se provocar  una discontinuidad en la numeraci¢n de la serie de albaranes. "';
      Text010@1010 : TextConst 'ENU=An empty receipt %1 will be created to fill this gap in the number series.\\;ESP=Se crear  un albar n de compra en blanco %1 para completar la misma.\\';
      Text011@1011 : TextConst 'ENU=Do you want to continue?;ESP=¨Confirma que desea continuar?';
      Text012@1012 : TextConst 'ENU="Deleting this document will cause a gap in the number series for posted invoices. ";ESP="Si borra el documento se provocar  una discontinuidad en la numeraci¢n de la serie de facturas registradas. "';
      Text013@1013 : TextConst 'ENU=An empty posted invoice %1 will be created to fill this gap in the number series.\\;ESP=Se crear  una factura registrada en blanco %1 para completar la misma.\\';
      Text014@1014 : TextConst 'ENU="Deleting this document will cause a gap in the number series for posted credit memos. ";ESP="Si borra el documento, se provocar  una discontinuidad en la numeraci¢n de la serie de abonos registrados. "';
      Text015@1015 : TextConst 'ENU=An empty posted credit memo %1 will be created to fill this gap in the number series.\\;ESP=Se crear  un abono registrado en blanco %1 para completar la misma.\\';
      Text016@1016 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\\;ESP=Si cambia %1, se eliminar n las l¡ns. compra actuales y se crear n nuevas l¡ns. compra bas ndose en la nueva informaci¢n de la cabecera.\\';
      Text018@1017 : TextConst 'ENU=You must delete the existing purchase lines before you can change %1.;ESP=Se deben eliminar las l¡neas de compra existentes antes de cambiar %1.';
      Text019@1018 : TextConst 'ENU=You have changed %1 on the purchase header, but it has not been changed on the existing purchase lines.\;ESP=Se ha modificado %1 en la cab. compra, pero no se ha modificado en las l¡neas de compra existentes.\';
      Text020@1019 : TextConst 'ENU=You must update the existing purchase lines manually.;ESP=Debe actualizar las l¡neas de compra existentes manualmente.';
      Text021@1020 : TextConst 'ENU=The change may affect the exchange rate used on the price calculation of the purchase lines.;ESP=El cambio puede afectar al tipo de cambio utilizado en el c lculo del precio de las l¡neas de compras.';
      Text022@1021 : TextConst 'ENU=Do you want to update the exchange rate?;ESP=¨Confirma que desea modificar el tipo de cambio?';
      Text023@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.;ESP=No puede borrar este documento. Su identificaci¢n est  configurada s¢lo para procesar %1 %2.';
      Text024@1023 : TextConst 'ENU=Do you want to print return shipment %1?;ESP=¨Confirma que desea imprimir el env¡o devoluci¢n %1?';
      Text025@1024 : TextConst 'ENU="You have modified the %1 field. Note that the recalculation of VAT may cause penny differences, so you must check the amounts afterwards. ";ESP="Ha modificado el campo %1. El nuevo c lculo de IVA puede tener alguna diferencia, por lo que deber¡a comprobar los importes. "';
      Text027@1026 : TextConst 'ENU=Do you want to update the %2 field on the lines to reflect the new value of %1?;ESP=¨Confirma que desea actualizar el %2 campo en la l¡neas para reflejar el nuevo valor de %1?';
      Text028@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.;ESP=Su identificaci¢n est  configurada para procesar s¢lo desde %1 %2.';
      Text029@1028 : TextConst 'ENU="Deleting this document will cause a gap in the number series for return shipments. ";ESP="Borrar este documento producir  error en los n£meros de serie para los env¡os dev. "';
      Text030@1029 : TextConst 'ENU=An empty return shipment %1 will be created to fill this gap in the number series.\\;ESP=Un env¡o dev. vac¡o %1 se crear  para llenar este error en las series de n£meros.\\';
      Text032@1031 : TextConst 'ENU=You have modified %1.\\;ESP=Ha modificado %1.\\';
      Text033@1032 : TextConst 'ENU=Do you want to update the lines?;ESP=¨Confirma que desea actualizar las l¡neas?';
      PurchSetup@1033 : Record 312;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      PurchLine@1036 : Record 39;
      xPurchLine@1080 : Record 39;
      VendLedgEntry@1037 : Record 25;
      Vend@1038 : Record 23;
      PaymentTerms@1039 : Record 3;
      PaymentMethod@1040 : Record 289;
      CurrExchRate@1041 : Record 330;
      PurchHeader@1042 : Record 38;
      PurchCommentLine@1043 : Record 43;
      ShipToAddr@1044 : Record 222;
      Cust@1045 : Record 18;
      CompanyInfo@1046 : Record 79;
      PostCode@1047 : Record 225;
      OrderAddr@1048 : Record 224;
      BankAcc@1049 : Record 270;
      PurchRcptHeader@1050 : Record 120;
      PurchInvHeader@1051 : Record 122;
      PurchCrMemoHeader@1052 : Record 124;
      ReturnShptHeader@1053 : Record 6650;
      PurchInvHeaderPrepmt@1090 : Record 122;
      PurchCrMemoHeaderPrepmt@1089 : Record 124;
      GenBusPostingGrp@1054 : Record 250;
      GenJnILine@1055 : Record 81;
      RespCenter@1056 : Record 5714;
      Location@1057 : Record 14;
      WhseRequest@1058 : Record 5765;
      InvtSetup@1059 : Record 313;
      DocDim@1025 : Record 357;
      rGrupoNCF@1103355000 : Record 7009831;
      NoSeriesMgt@1060 : Codeunit 396;
      TransferExtendedText@1061 : Codeunit 378;
      GenJnlApply@1062 : Codeunit 225;
      PurchPost@1063 : Codeunit 90;
      VendEntrySetApplID@1064 : Codeunit 111;
      DimMgt@1065 : Codeunit 408;
      ApprovalMgt@1082 : Codeunit 439;
      UserMgt@1066 : Codeunit 5700;
      ArchiveManagement@1074 : Codeunit 5063;
      ReservePurchLine@1081 : Codeunit 99000834;
      cFunGesDoc@1103355005 : Codeunit 7009900;
      ApplyVendEntries@1068 : Form 233;
      CurrencyDate@1069 : Date;
      HideValidationDialog@1070 : Boolean;
      Confirmed@1071 : Boolean;
      Text034@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ESP=No puede cambiar %1 despus de introducir datos en %2.';
      Text037@1076 : TextConst 'ENU=Contact %1 %2 is not related to vendor %3.;ESP=Contacto %1 %2 no est  relacionado con proveedor %3.';
      Text038@1075 : TextConst 'ENU=Contact %1 %2 is related to a different company than vendor %3.;ESP=Contacto %1 %2 est  relacionado con una empresa diferente al proveedor %3.';
      Text039@1077 : TextConst 'ENU=Contact %1 %2 is not related to a vendor.;ESP=Contacto %1 %2 no est  relacionado con un proveedor.';
      SkipBuyFromContact@1030 : Boolean;
      SkipPayToContact@1078 : Boolean;
      Text040@1079 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8.";ESP="No puede cambiar el campo %1 porque %2 %3 tiene %4 = %5 y ya se ha asignado el %6 a %7 %8."';
      Text041@1182 : TextConst 'ENU=The purchase %1 %2 has item tracking. Do you want to delete it anyway?;ESP=El valor %1 %2 de compras tiene seguimiento de productos. ¨Desea eliminarlo de todas maneras?';
      Text042@1084 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.;ESP=Debe cancelar el proceso de aprobaci¢n si desea cambiar el %1.';
      Text043@1083 : TextConst 'ENU=Do you want to print prepayment invoice %1?;ESP=¨Desea imprimir la factura prepago %1?';
      Text044@1085 : TextConst 'ENU=Do you want to print prepayment credit memo %1?;ESP=¨Desea imprimir el abono prepago %1?';
      Text045@1086 : TextConst 'ENU="Deleting this document will cause a gap in the number series for prepayment invoices. ";ESP="Si borra el documento, se provocar  una discontinuidad en la numeraci¢n de la serie de facturas de prepago. "';
      Text046@1087 : TextConst 'ENU=An empty prepayment invoice %1 will be created to fill this gap in the number series.\\;ESP=Se crear  una factura prepago %1 en blanco para completar este error en el n£mero de serie.\\';
      Text047@1088 : TextConst 'ENU="Deleting this document will cause a gap in the number series for prepayment credit memos. ";ESP="Si borra el documento, se provocar  una discontinuidad en la numeraci¢n de la serie de abonos de prepago. "';
      Text049@1092 : TextConst 'ENU=%1 is set up to process from %2 %3 only.;ESP=Se ha configurado %1 para procesar s¢lo desde %2 %3.';
      Text050@1067 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\;ESP=Existen reservas para este pedido y se cancelar n si este cambio provoca un conflicto de fechas.\\';
      AdjustDueDate@1100012 : Codeunit 10700;
      Text1100000@1100009 : TextConst 'ENU=It exists a Posted Purchase Receipt %1 %2 with %3 set to %4;ESP=Existe albar n compra registrado %1 %2 con %3 definido como %4';
      Text1100002@1100011 : TextConst 'ENU="The %1 does not exist. \Identification fields and values:\%1 = %2";ESP="%1 no existe. \Campos de identificaci¢n y valores:\%1 = %2"';
      Text1100003@1100025 : TextConst 'ENU=%1 cannot be applied, since it is included in a Payment Order.;ESP=%1 no se puede aplicar porque est  incluido en una orden de pago.';
      Text1100004@1100026 : TextConst 'ENU=" Remove it from its Payment Order and try again.";ESP=" B¢rrelo de la orden pago e intntelo de nuevo."';
      Text10700@1100000 : TextConst 'ENU=%1 cannot be different from 0 when %2 is %3;ESP=%1 no puede ser diferente de 0 cuando %2 es %3';
      Text052@1103355002 : TextConst 'ESP=Este documento de compra ya tiene un comprobante fiscal asignado.';
      Text053@1103355001 : TextConst 'ESP=Este proveedor no tiene una numeracion propia de Comprobantes fiscales, el numero se asigna automaticamente.';
      Text054@1103355003 : TextConst 'ESP=En esta empresa no se aplica la legislacion de Numeradores de Comprobante fiscal';
      Text055@1103355004 : TextConst 'ESP=La longitud del numero de comprobante no coincide con la establecida en configuracion de contabilidad.';

    PROCEDURE InitRecord@10();
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",PurchSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",PurchSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF ("No. Series" <> '') AND
               (PurchSetup."Invoice Nos." = PurchSetup."Posted Invoice Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            IF PurchSetup."Receipt on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
          END;
        "Document Type"::"Return Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF ("No. Series" <> '') AND
               (PurchSetup."Credit Memo Nos." = PurchSetup."Posted Credit Memo Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
            IF PurchSetup."Return Shipment on Credit Memo" THEN
              NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Return Order"] THEN
        "Order Date" := WORKDATE;

      IF "Document Type" = "Document Type"::Invoice THEN
        "Expected Receipt Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" :=0D;

      "Document Date" := WORKDATE;

      VALIDATE("Sell-to Customer No.",'');

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No."; // es0007

      IF InvtSetup.GET THEN
        "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";

      "Responsibility Center" := UserMgt.GetRespCenter(1,"Responsibility Center");
    END;

    PROCEDURE AssistEdit@2(OldPurchHeader@1000 : Record 38) : Boolean;
    BEGIN
      PurchSetup.GET;
      TestNoSeries;
      IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldPurchHeader."No. Series","No. Series") THEN BEGIN
        PurchSetup.GET;
        TestNoSeries;
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          PurchSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          PurchSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          BEGIN
            PurchSetup.TESTFIELD("Invoice Nos.");
            PurchSetup.TESTFIELD("Posted Invoice Nos.");
          END;
        "Document Type"::"Return Order":
          PurchSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            PurchSetup.TESTFIELD("Credit Memo Nos.");
            PurchSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          PurchSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PurchSetup."Quote Nos.");
        "Document Type"::Order:
          EXIT(PurchSetup."Order Nos.");
        "Document Type"::Invoice:
          EXIT(PurchSetup."Invoice Nos.");
        "Document Type"::"Return Order":
          EXIT(PurchSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
          EXIT(PurchSetup."Credit Memo Nos.");
        "Document Type"::"Blanket Order":
          EXIT(PurchSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(PurchSetup."Posted Credit Memo Nos.");
      EXIT(PurchSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text040,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      PurchPost.TestDeleteHeader(
        Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
        ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
      IF PurchRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text009 +
             Text010 +
             Text011,TRUE,
             PurchRcptHeader."No.")
        THEN
          EXIT;
      IF PurchInvHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text012 +
             Text013 +
             Text011,TRUE,
             PurchInvHeader."No.")
        THEN
          EXIT;
      IF PurchCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text014 +
             Text015 +
             Text011,TRUE,
             PurchCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnShptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text029 +
             Text030 +
             Text011,TRUE,
             ReturnShptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(
             Text044 +
             Text045 +
             Text011,TRUE,
             PurchInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(
             Text046 +
             Text047 +
             Text011,TRUE,
             PurchCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetVend@1(VendNo@1000 : Code[20]);
    BEGIN
      IF VendNo <> Vend."No." THEN
        Vend.GET(VendNo);
    END;

    PROCEDURE PurchLinesExist@3() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      EXIT(PurchLine.FINDFIRST);
    END;

    PROCEDURE RecreatePurchLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      PurchLineTmp@1001 : TEMPORARY Record 39;
      ItemChargeAssgntPurch@1005 : Record 5805;
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record 5805;
      TempInteger@1003 : TEMPORARY Record 2000000026;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      CopyDocMgt@1008 : Codeunit 6620;
      ChangeLogMgt@1011 : Codeunit 423;
      RecRef@1010 : RecordRef;
      xRecRef@1009 : RecordRef;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      IF PurchLinesExist THEN BEGIN
        IF HideValidationDialog THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text016 +
              Text004,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          DocDim.LOCKTABLE;
          PurchLine.LOCKTABLE;
          ItemChargeAssgntPurch.LOCKTABLE;
          xRecRef.GETTABLE(xRec);
          MODIFY;
          RecRef.GETTABLE(Rec);

          PurchLine.RESET;
          PurchLine.SETRANGE("Document Type","Document Type");
          PurchLine.SETRANGE("Document No.","No.");
          IF PurchLine.FINDSET THEN BEGIN
            REPEAT
              PurchLine.TESTFIELD("Quantity Received",0);
              PurchLine.TESTFIELD("Quantity Invoiced",0);
              PurchLine.TESTFIELD("Return Qty. Shipped",0);
              PurchLine.CALCFIELDS("Reserved Qty. (Base)");
              PurchLine.TESTFIELD("Reserved Qty. (Base)",0);
              PurchLine.TESTFIELD("Receipt No.",'');
              PurchLine.TESTFIELD("Return Shipment No.",'');
              PurchLine.TESTFIELD("Blanket Order No.",'');
              IF PurchLine."Drop Shipment" OR PurchLine."Special Order" THEN BEGIN
                CASE TRUE OF
                  PurchLine."Drop Shipment":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Sales Order No.");
                  PurchLine."Special Order":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Special Order Sales No.");
                END;
                TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
                TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
              END;

              PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
              PurchLineTmp := PurchLine;
              IF PurchLine.Nonstock THEN BEGIN
                PurchLine.Nonstock := FALSE;
                PurchLine.MODIFY;
              END;
              PurchLineTmp.INSERT;
            UNTIL PurchLine.NEXT = 0;

            ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
            IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
              REPEAT
                TempItemChargeAssgntPurch.INIT;
                TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
                TempItemChargeAssgntPurch.INSERT;
              UNTIL ItemChargeAssgntPurch.NEXT = 0;
              ItemChargeAssgntPurch.DELETEALL;
            END;

            PurchLine.DELETEALL(TRUE);

            PurchLine.INIT;
            PurchLine."Line No." := 0;
            PurchLineTmp.FINDSET;
            ExtendedTextAdded := FALSE;
            REPEAT
              IF PurchLineTmp."Attached to Line No." = 0 THEN BEGIN
                PurchLine.INIT;
                PurchLine."Line No." := PurchLine."Line No." + 10000;
                PurchLine.VALIDATE(Type,PurchLineTmp.Type);
                IF PurchLineTmp."No." = '' THEN BEGIN
                  PurchLine.VALIDATE(Description,PurchLineTmp.Description);
                  PurchLine.VALIDATE("Description 2",PurchLineTmp."Description 2");
                  PurchLine.INSERT;
                END ELSE BEGIN
                  PurchLine.VALIDATE("No.",PurchLineTmp."No.");
                  IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
                    CASE TRUE OF
                      PurchLineTmp."Drop Shipment":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            PurchLineTmp."Sales Order No.",
                            PurchLineTmp."Sales Order Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Drop Shipment" := PurchLineTmp."Drop Shipment";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Sales Order No." := PurchLineTmp."Sales Order No.";
                          PurchLine."Sales Order Line No." := PurchLineTmp."Sales Order Line No.";
                          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
                          PurchLine.VALIDATE("Inbound Whse. Handling Time");
                          PurchLine.INSERT;

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Purchase Order No." := PurchLine."Document No.";
                          SalesLine."Purch. Order Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      PurchLineTmp."Special Order":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            PurchLineTmp."Special Order Sales No.",
                            PurchLineTmp."Special Order Sales Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Special Order" := PurchLineTmp."Special Order";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Special Order Sales No." := PurchLineTmp."Special Order Sales No.";
                          PurchLine."Special Order Sales Line No." := PurchLineTmp."Special Order Sales Line No.";
                          PurchLine.INSERT;

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Special Order Purchase No." := PurchLine."Document No.";
                          SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      ELSE BEGIN
                        PurchLine.VALIDATE("Unit of Measure Code",PurchLineTmp."Unit of Measure Code");
                        PurchLine.VALIDATE("Variant Code",PurchLineTmp."Variant Code");
                        IF (PurchLineTmp."Job No." <> '') AND (PurchLineTmp."Job Task No." <> '') THEN BEGIN
                          PurchLine.VALIDATE("Job No.",PurchLineTmp."Job No.");
                          PurchLine.VALIDATE("Job Task No.",PurchLineTmp."Job Task No.");
                          PurchLine."Job Line Type" := PurchLineTmp."Job Line Type";
                        END;
                        IF PurchLineTmp.Quantity <> 0 THEN
                          PurchLine.VALIDATE(Quantity,PurchLineTmp.Quantity);
                        PurchLine."Prod. Order No." := PurchLineTmp."Prod. Order No.";
                        PurchLine."Routing No." := PurchLineTmp."Routing No.";
                        PurchLine."Routing Reference No." := PurchLineTmp."Routing Reference No.";
                        PurchLine."Operation No." := PurchLineTmp."Operation No.";
                        PurchLine."Work Center No." := PurchLineTmp."Work Center No.";
                        PurchLine."Prod. Order Line No." := PurchLineTmp."Prod. Order Line No.";
                        PurchLine."Overhead Rate" := PurchLineTmp."Overhead Rate";
                        PurchLine.INSERT;
                      END;
                    END;
                  END;
                END;
                ExtendedTextAdded := FALSE;

                IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
                  ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",PurchLineTmp."Document Type");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",PurchLineTmp."Document No.");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",PurchLineTmp."Line No.");
                  IF TempItemChargeAssgntPurch.FINDSET THEN BEGIN
                    REPEAT
                      IF NOT TempItemChargeAssgntPurch.MARK THEN BEGIN
                        TempItemChargeAssgntPurch."Applies-to Doc. Line No." := PurchLine."Line No.";
                        TempItemChargeAssgntPurch.Description := PurchLine.Description;
                        TempItemChargeAssgntPurch.MODIFY;
                        TempItemChargeAssgntPurch.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                  END;
                END;
                IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := PurchLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
                  TransferExtendedText.InsertPurchExtText(PurchLine);
                  PurchLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
            UNTIL PurchLineTmp.NEXT = 0;

            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            PurchLineTmp.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
            IF PurchLineTmp.FINDSET THEN
              REPEAT
                TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLineTmp."Line No.");
                IF TempItemChargeAssgntPurch.FINDSET THEN BEGIN
                  REPEAT
                    TempInteger.FINDFIRST;
                    ItemChargeAssgntPurch.INIT;
                    ItemChargeAssgntPurch := TempItemChargeAssgntPurch;
                    ItemChargeAssgntPurch."Document Line No." := TempInteger.Number;
                    ItemChargeAssgntPurch.VALIDATE("Unit Cost",0);
                    ItemChargeAssgntPurch.INSERT;
                  UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                  TempInteger.DELETE;
                END;
              UNTIL PurchLineTmp.NEXT = 0;

            PurchLineTmp.SETRANGE(Type);
            PurchLineTmp.DELETEALL;
            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            TempItemChargeAssgntPurch.DELETEALL;
          END;
          ChangeLogMgt.LogModification(RecRef,xRecRef);
        END ELSE
          ERROR(
            Text018,ChangedFieldName);
      END;
    END;

    PROCEDURE MessageIfPurchLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text020,
          ChangedFieldName);
    END;

    PROCEDURE PriceMessageIfPurchLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text021,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]) AND
           ("Posting Date" = 0D)
        THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := "Posting Date";

        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text022,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE UpdatePurchLines@15(ChangedFieldName@1000 : Text[100]);
    VAR
      ChangeLogMgt@1004 : Codeunit 423;
      RecRef@1003 : RecordRef;
      xRecRef@1001 : RecordRef;
      UpdateConfirmed@1002 : Boolean;
    BEGIN
      IF NOT PurchLinesExist THEN
        EXIT;

      IF NOT GUIALLOWED THEN
        UpdateConfirmed := TRUE
      ELSE
        CASE ChangedFieldName OF
          FIELDCAPTION("Expected Receipt Date"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Requested Receipt Date"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Promised Receipt Date"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Lead Time Calculation"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Inbound Whse. Handling Time"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Prepayment %"):
            UpdateConfirmed :=
              CONFIRM(
                STRSUBSTNO(
                  Text032 +
                  Text033,ChangedFieldName));
        END;

      DocDim.LOCKTABLE;
      PurchLine.LOCKTABLE;
      xRecRef.GETTABLE(xRec);
      MODIFY;
      RecRef.GETTABLE(Rec);
      ChangeLogMgt.LogModification(RecRef,xRecRef);

      REPEAT
        xPurchLine := PurchLine;
        xRecRef.GETTABLE(PurchLine);
        CASE ChangedFieldName OF
          FIELDCAPTION("Expected Receipt Date"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Expected Receipt Date","Expected Receipt Date");
          FIELDCAPTION("Currency Factor"):
            IF PurchLine.Type <> PurchLine.Type::" " THEN
              PurchLine.VALIDATE("Direct Unit Cost");
          FIELDCAPTION("Transaction Type"):
            PurchLine.VALIDATE("Transaction Type","Transaction Type");
          FIELDCAPTION("Transport Method"):
            PurchLine.VALIDATE("Transport Method","Transport Method");
          FIELDCAPTION("Entry Point"):
            PurchLine.VALIDATE("Entry Point","Entry Point");
          FIELDCAPTION(Area):
            PurchLine.VALIDATE(Area,Area);
          FIELDCAPTION("Transaction Specification"):
            PurchLine.VALIDATE("Transaction Specification","Transaction Specification");
          FIELDCAPTION("Requested Receipt Date"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Requested Receipt Date","Requested Receipt Date");
          FIELDCAPTION("Prepayment %"):
            IF PurchLine."No." <> '' THEN
              PurchLine.VALIDATE("Prepayment %","Prepayment %");
          FIELDCAPTION("Promised Receipt Date"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Promised Receipt Date","Promised Receipt Date");
          FIELDCAPTION("Lead Time Calculation"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Lead Time Calculation","Lead Time Calculation");
          FIELDCAPTION("Inbound Whse. Handling Time"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Inbound Whse. Handling Time","Inbound Whse. Handling Time");
        END;
        PurchLine.MODIFY(TRUE);
        ReservePurchLine.VerifyChange(PurchLine,xPurchLine);
        RecRef.GETTABLE(PurchLine);
        ChangeLogMgt.LogModification(RecRef,xRecRef);
      UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE ConfirmResvDateConflict@31();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForPurchHeader(Rec) THEN
        IF NOT CONFIRM(Text050 + Text011,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetDefaultDim(
        TableID,No,SourceCodeSetup.Purchases,
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF "No." <> '' THEN
        DimMgt.UpdateDocDefaultDim(
          DATABASE::"Purchase Header","Document Type","No.",0,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      ChangeLogMgt@1004 : Codeunit 423;
      RecRef@1003 : RecordRef;
      xRecRef@1002 : RecordRef;
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF "No." <> '' THEN BEGIN
        DimMgt.SaveDocDim(
          DATABASE::"Purchase Header","Document Type","No.",0,FieldNumber,ShortcutDimCode);
        xRecRef.GETTABLE(xRec);
        MODIFY;
        RecRef.GETTABLE(Rec);
        ChangeLogMgt.LogModification(RecRef,xRecRef);
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ReceivedPurchLinesExist@20() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Quantity Received",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    PROCEDURE ReturnShipmentExist@5800() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@21();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT;

      IF ("Location Code" <> '') AND
         Location.GET("Location Code") AND
         ("Sell-to Customer No." = '')
      THEN BEGIN
        "Ship-to Name" := Location.Name;
        "Ship-to Name 2" := Location."Name 2";
        "Ship-to Address" := Location.Address;
        "Ship-to Address 2" := Location."Address 2";
        "Ship-to City" := Location.City;
        "Ship-to Post Code" := Location."Post Code";
        "Ship-to County" := Location.County;
        "Ship-to Country/Region Code" := Location."Country/Region Code";
        "Ship-to Contact" := Location.Contact;
      END;

      IF ("Location Code" = '') AND
         ("Sell-to Customer No." = '')
      THEN BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        "Ship-to Name" := CompanyInfo."Ship-to Name";
        "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
        "Ship-to Address" := CompanyInfo."Ship-to Address";
        "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
        "Ship-to City" := CompanyInfo."Ship-to City";
        "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
        "Ship-to County" := CompanyInfo."Ship-to County";
        "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
    END;

    LOCAL PROCEDURE DeletePurchaseLines@17();
    BEGIN
      IF PurchLine.FINDSET THEN BEGIN
        HandleItemTrackingDeletion;
        REPEAT
          PurchLine.SuspendStatusCheck(TRUE);
          PurchLine.DELETE(TRUE);
        UNTIL PurchLine.NEXT = 0;
      END;
    END;

    PROCEDURE HandleItemTrackingDeletion@36();
    VAR
      ReservEntry@1000 : Record 337;
      ReservEntry2@1001 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype","Document Type");
        SETRANGE("Source ID","No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETFILTER("Item Tracking",'> %1',"Item Tracking"::None);
        IF ISEMPTY THEN
          EXIT;

        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed := CONFIRM(Text041,FALSE,LOWERCASE(FORMAT("Document Type")),"No.");

        IF NOT Confirmed THEN
          ERROR('');

        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntPurchFilter@22(VAR TempItemChargeAssgntPurch@1000 : Record 5805);
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
    END;

    PROCEDURE UpdateBuyFromCont@24(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1004 : Record 23;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Buy-from Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Buy-from Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Buy-from Contact No." := ContBusRel."Contact No."
          ELSE
            "Buy-from Contact No." := '';
        END;
        "Buy-from Contact" := Vend.Contact;
      END;
    END;

    PROCEDURE UpdatePayToCont@27(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cont@1002 : Record 5050;
      Vend@1001 : Record 23;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Pay-to Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Pay-to Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Pay-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Pay-to Contact No." := '';
        END;
        "Pay-to Contact" := Vend.Contact;
      END;
    END;

    PROCEDURE UpdateBuyFromVend@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Vend@1006 : Record 23;
      Cont@1005 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Buy-from Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Buy-from Contact" := Cont.Name
        ELSE
          IF Vend.GET("Buy-from Vendor No.") THEN
            "Buy-from Contact" := Vend.Contact
          ELSE
            "Buy-from Contact" := ''
      END ELSE BEGIN
        "Buy-from Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Buy-from Vendor No." <> '') AND
           ("Buy-from Vendor No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Buy-from Vendor No.")
        ELSE IF "Buy-from Vendor No." = '' THEN BEGIN
            SkipBuyFromContact := TRUE;
            VALIDATE("Buy-from Vendor No.",ContBusinessRelation."No.");
            SkipBuyFromContact := FALSE;
          END;
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);

      IF ("Buy-from Vendor No." = "Pay-to Vendor No.") OR
         ("Pay-to Vendor No." = '')
      THEN
        VALIDATE("Pay-to Contact No.","Buy-from Contact No.");
    END;

    PROCEDURE UpdatePayToVend@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Vend@1004 : Record 23;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Pay-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Pay-to Contact" := Cont.Name
        ELSE
          IF Vend.GET("Pay-to Vendor No.") THEN
            "Pay-to Contact" := Vend.Contact
          ELSE
            "Pay-to Contact" := '';
      END ELSE BEGIN
        "Pay-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Pay-to Vendor No." = '' THEN BEGIN
          SkipPayToContact := TRUE;
          VALIDATE("Pay-to Vendor No.",ContBusinessRelation."No.");
          SkipPayToContact := FALSE;
        END ELSE
          IF "Pay-to Vendor No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Pay-to Vendor No.");
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Order");
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt. Put-away / Pick",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      DocDim@1000 : Record 357;
      DocDims@1001 : Form 546;
    BEGIN
      DocDim.SETRANGE("Table ID",DATABASE::"Purchase Header");
      DocDim.SETRANGE("Document Type","Document Type");
      DocDim.SETRANGE("Document No.","No.");
      DocDim.SETRANGE("Line No.",0);
      DocDims.SETTABLEVIEW(DocDim);
      DocDims.RUNMODAL;
      GET("Document Type","No.");
    END;

    PROCEDURE SetAmountToApply@18(AppliesToDocNo@1000 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",VendorNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF VendLedgEntry.FINDFIRST THEN BEGIN
        IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          VendLedgEntry.CALCFIELDS("Remaining Amount");
          VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
        END ELSE
          VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Accepted Payment Tolerance" := 0;
        VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
      END;
    END;

    PROCEDURE SetShipToForSpecOrder@23();
    BEGIN
      IF Location.GET("Location Code") THEN BEGIN
        "Ship-to Code" := '';
        "Ship-to Name" := Location.Name;
        "Ship-to Name 2" := Location."Name 2";
        "Ship-to Address" := Location.Address;
        "Ship-to Address 2" := Location."Address 2";
        "Ship-to City" := Location.City;
        "Ship-to Post Code" := Location."Post Code";
        "Ship-to County" := Location.County;
        "Ship-to Country/Region Code" := Location."Country/Region Code";
        "Ship-to Contact" := Location.Contact;
        "Location Code" := Location.Code;
      END ELSE BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        "Ship-to Name" := CompanyInfo."Ship-to Name";
        "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
        "Ship-to Address" := CompanyInfo."Ship-to Address";
        "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
        "Ship-to City" := CompanyInfo."Ship-to City";
        "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
        "Ship-to County" := CompanyInfo."Ship-to County";
        "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        "Location Code" := '';
      END;
    END;

    PROCEDURE JobUpdatePurchLines@28();
    BEGIN
      WITH PurchLine DO BEGIN
        SETFILTER("Job No.",'<>%1','');
        SETFILTER("Job Task No.",'<>%1','');
        LOCKTABLE;
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          PurchLine.SetPurchHeader(Rec);
          REPEAT
            JobSetCurrencyFactor;
            CreateTempJobJnlLine(FALSE);
            UpdatePricesFromJobJnlLine;
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END
    END;

    PROCEDURE GetPstdDocLinesToRevere@47();
    VAR
      PurchPostedDocLines@1002 : Form 5855;
    BEGIN
      GetVend("Buy-from Vendor No.");
      PurchPostedDocLines.SetToPurchHeader(Rec);
      PurchPostedDocLines.SETRECORD(Vend);
      PurchPostedDocLines.LOOKUPMODE := TRUE;
      IF PurchPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        PurchPostedDocLines.CopyLineToDoc;

      CLEAR(PurchPostedDocLines);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      PurchaseInvDisc@1000 : Codeunit 70;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Calc. Inv. Discount" THEN
        PurchaseInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE UpdatePmtDiscDate@1140000();
    BEGIN
      IF "Payment Discount %" = 0 THEN
        IF NOT("Document Type" IN ["Document Type"::"Credit Memo", "Document Type"::"Return Order"]) THEN
          "Pmt. Discount Date" := "Due Date";
    END;

    PROCEDURE RefrescarEstadoCtaProveedor@1103355002();
    BEGIN
      // RefrescarEstadoCtaProveedor

      //$012 JPT 01/02/08 Gestio documental ftp GOC
      cFunGesDoc.RefrescarEstadoCta("Buy-from Vendor No.");
    END;

    PROCEDURE CheckPermisoAtennea@1000000000();
    VAR
      lcSeguridad@1000000000 : Codeunit 7009751;
    BEGIN
      // CheckPermisoAtennea

      IF "Reason Code" <> 'ATENNEA' THEN
        EXIT;

      lcSeguridad.TienePermiso('NAV-MOD-FRA', TRUE);
    END;

    BEGIN
    {
      // INCOMING

      $001 OnInsert, Rellenar el campo usuario que sirve para conocer quien creo la factura

      $002 Ampliar el campo Texto de registro a 80 caracteres

      $003 Se han incluido nuevos campos

          50000 Marca         Code20
          50001 Tipo de Clave Code10 "Maestro de Claves".Clave
          50008 Usuario       Code20 User."User ID"

      $004 Se ha creado nueva clave

          Campos : Marca
          KeyGroups : INCOMING
          MaintainSQLIndex : No

      $005 AJS 29.12.2006, Comprobantes fiscales
         He creado un campo para almacenar el grupo al que pertenece el proveedor y otro para almacenar el numero de comprobante
         fiscal asignado

          7009700 Cod. Grupo NCF     Code10 "Grupo configuracion NCF".Codigo WHERE (Tipo grupo=CONST(Compras))
          7009703 Comprobante Fiscal Code20

      $006 En el OnValidate de "Pay-to Vendor No.", si es una factura o un abono llamamos al validate del grupo de NCF que controla
         la asignacion del comprobante fiscal

      $007 AJS 18.01.2007, Comprobantes fiscales
         En el OnValidate de "Pay-to Vendor No.", comprobar que la empresa [Company Info] tiene la marca que indica que aplica
         esta legislacion

      $008 AJS 07.02.2007, Declaracion ITBIS
         He creado un nuevo campo para poder indicar en cada factura a que tipo (de los prefijados por el gobierno)
         pertenece cada factura

          7009704 Tipo factura compra Code10, Tipo factura compra RD

      $009 AJS 08.02.2007, Anulaciones
         Cuando la factura/abono se crea por el proceso de anulaciones no tiene que pedir nada de los NCF

      $010 AJS 27.02.2007, Escaneo documentos
         Hemos agregado un campo para almacenar el codigo de barras asignado al documento escaneado

          7009705 Codigo barras PDF Code20, Este codigo de barras ser  el nombre del fichero escaneado con la factura

      $011 AJS 08.11.2007, Comprobantes fiscales
         Rellenar el campo 7009704 con el valor que tenga por defecto el proveedor Buy-from Vendor No.

      $012 JPT 01/02/08 Se ha a¤adido Refrescar Estado Cuenta - Gestion Documental FTP GOC en RefrescarEstadoCtaProveedor

      $Z013 AJS 21112014 Integracion Atennea Transfer, nuevos campos Traspasado, "Usuario traspaso", "Fecha traspaso" y
                        "Hora traspaso"
      $013 AJS 16032015 CNT-CAR-14096, Solo usuarios autorizados pueden modificar una factura que viene de Atennea

      <changelog>
        <add id="CF0001" dev="ATSINGH" feature="NAVCORS35947" date="2009-04-22" area="LIQUIDITY"
          releaseversion="LIQEM6.00.01">Adding this file here because Liquidity Date in Liquidity Journal depends
          on Due Date of Purchase invoice in case of zero discount. So modifying the calculation of Due Date.
        </add>
        <change id="CF0002" dev="ATSINGH" feature="NAVCORS38284" date="2009-04-30" area="LIQUIDITY"
          baseversion="LIQEM6.00.01" releaseversion="LIQEM6.00.01"> Modify UpdatePmtDiscDate function to let the
          Credit Memo and Return Order(Due Date, Pmt. Discount date) behave differently.</change>
        <add id="es0001" dev="VGARCA" date="2004-08-27" area="AUTOINV" request="es-start-40"
        releaseversion="ES4.00">Automatic Invoices and Credit Memos</add>
        <add id="es0002" dev="VGARCA" date="2004-08-27" area="COUNTIES" request="es-start-40"
        releaseversion="ES4.00">Counties (Provinces)</add>
        <add id="es0003" dev="VGARCA" date="2004-08-27" area="DUEDATE" request="es-start-40"
        releaseversion="ES4.00">Due Date Calculation</add>
        <add id="es0004" dev="VGARCA" date="2004-08-27" area="PAYTERMS" request="es-start-40"
        releaseversion="ES4.00">Payment Terms &amp; Payment Methods</add>
        <add id="es0005" dev="VGARCA" date="2004-08-27" area="CARTERA" request="es-start-40"
        releaseversion="ES4.00">Cartera Add-On (Spanish)</add>
        <add id="es0006" dev="VGARCA" date="2005-06-20" area="CORRINV" feature="PS-SE-6265"
        releaseversion="ES4.00.A">Corrective Invoices</add>
        <change id="es0007" dev="VGARCA" date="2005-06-20" area="CORRINV" feature="PS-SE-8410"
        releaseversion="ES4.00.A" baseversion="ES4.00">Corrective Invoices</change>
        <change id="es0008" dev="VGARCA" date="2005-06-20" area="PAYTERMS" feature="PS-SE-2422"
        releaseversion="ES4.00.A" baseversion="ES4.00">Payment Terms &amp; Payment Methods</change>
        <change id="es0009" dev="VGARCA" date="2006-09-15" area="CARTERA" feature="NAVCORS4835"
        releaseversion="ES5.00" baseversion="ES4.00.A">Cannot create Credit Memo </change>
        <change id="es0010" dev="VGARCA" date="2006-10-15" area="DUEDATE" feature="PSCORS811"
        releaseversion="ES5.00" baseversion="ES5.00">Prepayment Due Date not updated </change>
        <change id="es0011" dev="VGARCA" date="2007-09-06" area="CARTERA" feature="NAVCORS13530"
        releaseversion="ES6.00" baseversion="ES5.00">Cannot created Credit Memo with apply to oldest method </change>
        <change id="es0012" dev="mnommens" date="2008-07-21" area="DUEDATE" feature="NAVCORS26513"
        releaseversion="ES6.00" baseversion="ES5.00">
        Prepayment Due Date field does not take the payment days and non-payment periods into account</change>
        <add id="ES0013" dev="all-e" date="2009-04-10" area="PAYDISC" feature="NAVCORS36709"
        releaseversion="ES6.00.01">Prepayment discount is not being taken into account(Spanish Localization)</add>
        <add id="ES0014" dev="andersla" date="2009-06-10" area="COUNTIES" feature="NAVCORS40636"
        releaseversion="ES6.00.01">Country/Region Code field in the Customer / Vendor VAT Entries populates wrong value.</add>
      </changelog>
    }
    END.
  }
}
