OBJECT Table 7010313 Cliente/TTOO
{
  OBJECT-PROPERTIES
  {
    Date=05/10/10;
    Time=13:52:59;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnDelete=VAR
               lrClientTTOO@1100244000 : Record 7010313;
               lrCondFact@1100244001 : Record 7010416;
             BEGIN
               // Si Era maestro de grupo no dejamos Borrar hasta haber eliminado sus relaciones
               IF "Grupo Facturacion" = TTOO  THEN BEGIN
                 lrClientTTOO.RESET;
                 lrClientTTOO.SETCURRENTKEY("Grupo Facturacion");
                 lrClientTTOO.SETRANGE("Grupo Facturacion",TTOO);
                 lrClientTTOO.SETFILTER(TTOO,'<>%1',TTOO); // Para que no se encuentre a si mismo
                 IF lrClientTTOO.FINDFIRST THEN
                   ERROR(Text0003);
               END;

               // Borramos tambi‚n todas las condicones de facturaci¢n relacionadas
               lrCondFact.RESET;
               lrCondFact.SETRANGE(Cliente , Cliente);
               lrCondFact.SETRANGE(TTOO    , TTOO);
               IF lrCondFact.FINDSET(TRUE) THEN
                 lrCondFact.DELETEALL(TRUE);
             END;

    CaptionML=ESP=Cliente/TTOO;
    LookupFormID=Form7010328;
    DrillDownFormID=Form7010328;
  }
  FIELDS
  {
    { 1   ;   ;Cliente             ;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=BEGIN
                                                                IF "Cliente facturacion" = '' THEN
                                                                  "Cliente facturacion" := Cliente;
                                                              END;

                                                   CaptionML=ESP=Cliente;
                                                   NotBlank=Yes;
                                                   Description=FK Cliente }
    { 2   ;   ;TTOO                ;Code10        ;TableRelation=TTOO.Codigo;
                                                   CaptionML=ESP=TTOO;
                                                   NotBlank=Yes;
                                                   Description=FK TTOO }
    { 3   ;   ;Direcci¢n           ;Text50        ;CaptionML=ESP=Direcci¢n }
    { 4   ;   ;Poblacion           ;Text50        ;CaptionML=ESP=Poblacion }
    { 5   ;   ;Provincia           ;Text20        ;CaptionML=ESP=Provincia }
    { 6   ;   ;C.P.                ;Code10        ;TableRelation="Post Code".Code;
                                                   OnValidate=VAR
                                                                rCodPos@1100244000 : Record 225;
                                                              BEGIN
                                                                IF rCodPos.GET("C.P.") THEN BEGIN
                                                                  Poblacion := rCodPos.City;
                                                                  Provincia := rCodPos.CountyText;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=C.P. }
    { 7   ;   ;CIF                 ;Text20        ;CaptionML=ESP=CIF }
    { 8   ;   ;Grupo contable negocio;Code10      ;TableRelation="Gen. Business Posting Group".Code;
                                                   CaptionML=ESP=Grupo contable negocio;
                                                   Description=FK Gr. contable negocio }
    { 9   ;   ;Grupo contable cliente;Code10      ;TableRelation="Customer Posting Group".Code;
                                                   CaptionML=ESP=Grupo contable cliente;
                                                   Description=FK Grupo contable cliente }
    { 10  ;   ;Cod. Terminos Pago  ;Code10        ;TableRelation="Payment Terms".Code;
                                                   CaptionML=ESP=Cod. Terminos Pago;
                                                   Description=FK Terminos pago }
    { 11  ;   ;Cod. forma pago     ;Code10        ;TableRelation="Payment Method".Code;
                                                   CaptionML=ESP=Cod. forma pago;
                                                   Description=FK Forma pago }
    { 12  ;   ;Grupo registro IVA neg.;Code10     ;TableRelation="VAT Business Posting Group".Code;
                                                   CaptionML=ESP=Grupo registro IVA neg.;
                                                   Description=FK Grupo Registro IVA negocio }
    { 14  ;   ;Cliente facturacion ;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Cliente facturacion" <> xRec."Cliente facturacion") AND
                                                                   ("Cliente mostrar estadisticas" = "Cliente mostrar estadisticas"::Facturacion)
                                                                THEN
                                                                  ActualizarCliEstadisticas(TRUE);
                                                              END;

                                                   CaptionML=ESP=Cliente facturacion;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Cliente }
    { 16  ;   ;Tipo Facturacion    ;Option        ;CaptionML=ESP=Tipo Facturacion;
                                                   OptionCaptionML=ESP=Detallada,Resumida x Zona,Resumida x Fecha - Servicio;
                                                   OptionString=Detallada,Resumida x Zona,Resumida x Fecha - Servicio }
    { 19  ;   ;Fac. por Tipo Servicio Fijo;Boolean;CaptionML=ESP=Fac. por Tipo Servicio Fijo }
    { 20  ;   ;Grupo Facturacion   ;Code10        ;TableRelation=Cliente/TTOO.TTOO WHERE (Cliente=FIELD(Cliente));
                                                   OnValidate=VAR
                                                                lrClientTTOO@1100244000 : Record 7010313;
                                                              BEGIN
                                                                // Se comprueba que el codigo que se a¤ade sea maestro de grupo
                                                                IF ("Grupo Facturacion" <> '') AND ("Grupo Facturacion" <> TTOO) THEN BEGIN
                                                                  IF lrClientTTOO.GET(Cliente, "Grupo Facturacion") THEN BEGIN
                                                                    IF lrClientTTOO.TTOO <> lrClientTTOO."Grupo Facturacion" THEN // Si no es maestro
                                                                     ERROR(Text0001,lrClientTTOO.Cliente, lrClientTTOO.TTOO);
                                                                  END;
                                                                END;
                                                                // Si Era maestro de grupo no dejamos cambiar el codigo hasta haber eliminado sus relaciones
                                                                IF (xRec."Grupo Facturacion" = TTOO) AND (xRec."Grupo Facturacion" <> "Grupo Facturacion") THEN BEGIN
                                                                  lrClientTTOO.RESET;
                                                                  lrClientTTOO.SETCURRENTKEY("Grupo Facturacion");
                                                                  lrClientTTOO.SETRANGE("Grupo Facturacion",TTOO);
                                                                  lrClientTTOO.SETFILTER(TTOO,'<>%1',TTOO); // Para que no se encuentre a si mismo
                                                                  IF lrClientTTOO.FINDFIRST THEN
                                                                    ERROR(Text0002);
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Grupo Facturacion }
    { 21  ;   ;Precios por         ;Option        ;CaptionML=ESP=Precios por;
                                                   OptionCaptionML=ESP=Cada zona,Zona mas alejada,Zonas combinadas;
                                                   OptionString=Cada zona,Zona mas alejada,Zonas combinadas }
    { 22  ;   ;Cliente Siempre Grupos;Boolean     ;CaptionML=ESP=Cliente Siempre Grupos }
    { 23  ;   ;Gestor              ;Code20        ;TableRelation=User."User ID";
                                                   OnValidate=BEGIN
                                                                CLEAR(rCondFact);
                                                                rCondFact.SETRANGE(Cliente, Cliente);
                                                                rCondFact.SETRANGE(TTOO   , TTOO);
                                                                IF rCondFact.FINDSET(TRUE) THEN
                                                                  rCondFact.MODIFYALL("Usuario Responsable", Gestor);

                                                                CambiaGestor(TTOO,Gestor);
                                                              END;

                                                   CaptionML=ESP=Gestor;
                                                   Description=Antiguo Usuario Responsable }
    { 30  ;   ;Operativa Deshabilitada;Boolean    ;CaptionML=ESP=Operativa Deshabilitada;
                                                   Description=Marca si el registro tiene que ser operativo para trafico }
    { 50  ;   ;Touroperador Asociado;Code10       ;TableRelation=Cliente/TTOO.TTOO WHERE (Cliente=FIELD(Cliente));
                                                   OnValidate=VAR
                                                                lrTTOO2@1100253000 : Record 7010313;
                                                              BEGIN
                                                                IF "Touroperador Asociado" <> '' THEN BEGIN
                                                                  IF "Touroperador Asociado" = TTOO THEN
                                                                    ERROR(Text0008,TTOO);

                                                                  IF lrTTOO2.GET(Cliente,"Touroperador Asociado") THEN
                                                                    IF lrTTOO2."Touroperador Asociado"<>'' THEN
                                                                      ERROR(Text0009,lrTTOO2.TTOO);
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Touroperador Asociado }
    { 51  ;   ;Facturar a traves de empresa;Text30;TableRelation=Company;
                                                   OnValidate=BEGIN
                                                                IF "Facturar a traves de empresa" = COMPANYNAME THEN
                                                                  ERROR(Text0010, COMPANYNAME);
                                                              END;

                                                   CaptionML=ESP=Facturar a traves de empresa;
                                                   Description=Si se rellena, los partes de este cliente/TTOO se traspasan para facturar en otra empresa }
    { 52  ;   ;Cliente mostrar estadisticas;Option;OnValidate=BEGIN

                                                                // Se modifican las l¡neas de CI si cambia el cliente de estad¡sticas
                                                                IF "Cliente mostrar estadisticas" <> xRec."Cliente mostrar estadisticas" THEN
                                                                  ActualizarCliEstadisticas(TRUE);
                                                              END;

                                                   OptionString=Operativo,Facturacion }
    { 60  ;   ;Agrupa para precio con;Code10      ;TableRelation=Cliente/TTOO.TTOO WHERE (Cliente=FIELD(Cliente));
                                                   CaptionML=ESP=Agrupa para precio con }
  }
  KEYS
  {
    {    ;Cliente,TTOO                            ;Clustered=Yes }
    {    ;Grupo Facturacion                        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text0001@1100244000 : TextConst 'ESP=%1 / %2 No es maestro de grupo';
      Text0002@1100244001 : TextConst 'ESP=No se puede desmarcar el codigo de grupo como Maestro hasta que no se hayan desmarcado sus relaciones.';
      Text0003@1100244002 : TextConst 'ESP=Este es un grupo Maestro de Facturaci¢n. No se puede eliminar hasta que no se hayan desmarcado sus relaciones.';
      rCondFact@1103350000 : Record 7010416;
      rParte@1103350001 : Record 7010360;
      Text0004@1103350002 : TextConst 'ESP="Se va a proceeder a cambiar el codigo de Usuario Gestor en todos los partes del TTOO %1. Eso puede llevar un tiempo.\¨Realizar de todos modos? "';
      Text0005@1103350003 : TextConst 'ESP=Proceso anulado por usuario';
      Text0006@1103350004 : TextConst 'ESP=Proceso Terminado';
      Text0007@1103350005 : TextConst 'ESP=Cambiando Codigo Gestor\Espere por favor\@1@@@@@@@@@@@@';
      Text0008@1100253000 : TextConst 'ESP=El touroperador asociado No puede ser %1';
      Text0009@1100253001 : TextConst 'ESP=El touroperador %1 ya tiene un Touroperador asociado';
      Text0010@1100253002 : TextConst 'ESP=No puede indicar que se traspasa a %1 ya que se encuentra en %1.';
      Text0011@1100253003 : TextConst 'ESP=¨Desea modificar el cliente usado para las estad¡sticas?';

    PROCEDURE nom_cliente@1(pw_cliente@1100244000 : Code[20]) : Text[50];
    VAR
      rCli@1100244001 : Record 18;
    BEGIN
      // nom_cliente
      //
      IF NOT rCli.GET(pw_cliente) THEN
        EXIT('')
      ELSE
        EXIT(rCli.Name);
    END;

    PROCEDURE CambiaGestor@1103350000(pwTTOO@1103350000 : Code[10];pwGestor@1103350002 : Code[20]);
    VAR
      lwVent@1103350001 : Dialog;
      lwTotal@1103350003 : Integer;
      lwCont@1103350004 : Integer;
    BEGIN
      // CambiaGestor
      // Cuando se cambia el gestor modifica todos los campo en la tabla de partes

      IF NOT CONFIRM(Text0004,FALSE,pwTTOO) THEN
        ERROR(Text0005);

      CLEAR(rParte);
      rParte.SETCURRENTKEY("Tipo Servicio","Touroperador principal",Fecha);
      rParte.SETRANGE("Touroperador principal",pwTTOO);
      IF rParte.FINDSET(TRUE) THEN BEGIN
        lwVent.OPEN(Text0007);
        lwTotal := rParte.COUNT;
        CLEAR(lwCont);
        REPEAT
          rParte.VALIDATE(Gestor, pwGestor);
          rParte.MODIFY;
          lwCont +=1;
          lwVent.UPDATE(1,ROUND(lwCont/lwTotal*10000,1));
        UNTIL rParte.NEXT=0;
        lwVent.CLOSE;
      END;
      // MESSAGE(Text0006);
    END;

    PROCEDURE ActualizarCliEstadisticas@1100253000(pwVerbose@1100253002 : Boolean);
    VAR
      lwCli@1100253000 : Code[20];
      lwCliAnt@1100253005 : Code[20];
      lrCI@1100253001 : Record 7010414;
      lrToPar@1100253003 : Record 7010365;
      lrZonPre@1100253004 : Record 7010364;
      lrPI@1100253006 : Record 7035392;
    BEGIN
      // ActualizarCliEstadisticas.

      IF pwVerbose THEN
        IF NOT CONFIRM (Text0011) THEN
          ERROR('');

      // Si ambos clientes son el mismo no hace falta hacer el cambio.
      IF Cliente = "Cliente facturacion" THEN
        EXIT;

      CASE "Cliente mostrar estadisticas" OF
        "Cliente mostrar estadisticas"::Operativo  : BEGIN
          lwCli    := Cliente;
          lwCliAnt := "Cliente facturacion";
        END;
        "Cliente mostrar estadisticas"::Facturacion: BEGIN
          lwCli    := "Cliente facturacion";
          lwCliAnt := Cliente;
        END;
      END;

      CLEAR(lrPI);
      lrPI.SETCURRENTKEY("Cliente Operativo", Touroperador);
      lrPI.SETRANGE ("Cliente Operativo"  , Cliente);
      lrPI.SETRANGE (Touroperador         , TTOO);
      lrPI.MODIFYALL("Cliente estadistico", lwCli);

      CLEAR(lrCI);
      lrCI.SETCURRENTKEY("Cliente Operativo",Touroperador);
      lrCI.SETRANGE ("Cliente Operativo"  , Cliente);
      lrCI.SETRANGE (Touroperador         , TTOO);
      lrCI.MODIFYALL("Cliente estadistico", lwCli);

      CLEAR(lrToPar);
      lrToPar.SETCURRENTKEY(Confirmado, "Cliente operativo", Touroperador);
      lrToPar.SETRANGE ("Cliente operativo"  , Cliente);
      lrToPar.SETRANGE (Touroperador         , TTOO);
      lrToPar.MODIFYALL("Cliente estadistico", lwCli);

      CLEAR(lrZonPre);
      lrZonPre.SETCURRENTKEY(Cliente        , TTOO             , Fecha        , Garaje,
                             "Tipo servicio", "Codigo servicio", "Zona Precio", "Servicio propio");
      lrZonPre.SETRANGE (Cliente, lwCliAnt);
      lrZonPre.SETRANGE (TTOO   , TTOO);
      lrZonPre.MODIFYALL(Cliente, lwCli);
    END;

    BEGIN
    {
      <23.04.04, RRT> En funcion nom_Cliente el parametro pw_Cliente se ha cambiado a Code(20)

      ## AJF 20/08/10
        .- (OC10014) A¤adido campo "Cliente mostrar estadisticas" para saber si se usa el cliente normal o el de facturaci¢n para
           ense¤ar en las estad¡sticas.
        .- (OC10014) A¤adida funci¢n "ActualizarCliEstadisticas" que se lanza al modificar "Cliente mostrar estadisticas" para modificar
           el cliente estadistico en las l¡neas de CI.

      $001 AJS 11102013 Modifico la funcion nom_cliente para que retorne un Text(50)
    }
    END.
  }
}
