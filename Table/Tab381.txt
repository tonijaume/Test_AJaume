OBJECT Table 381 VAT Registration No. Format
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00,NAVES6.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=VAT Registration No. Format;
               ESP=Formato CIF/NIF];
  }
  FIELDS
  {
    { 1   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ESP=C¢d. pa¡s/regi¢n];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 3   ;   ;Format              ;Text20        ;CaptionML=[ENU=Format;
                                                              ESP=Formato] }
    { 10700;  ;Check VAT Registration No.;Boolean ;InitValue=Yes;
                                                   CaptionML=[ENU=Check VAT Registration No.;
                                                              ESP=Comprobar CIF/NIF] }
  }
  KEYS
  {
    {    ;Country/Region Code,Line No.            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The entered VAT Registration number is not in agreement with the format specified for Country/Region Code %1.\;ESP=El n§ reg. IVA introducido no es acorde con el formato especificado para el C¢d. pa¡s/regi¢n %1.\';
      Text001@1001 : TextConst 'ENU=The following formats are acceptable: %2;ESP=Los siguientes formatos son aceptables: %2';
      Text002@1002 : TextConst 'ENU=This VAT registration number has already been entered for the following customers:\ %1;ESP=Este n§ reg. IVA se ha introducido ya para los siguientes clientes:\ %1';
      Text003@1003 : TextConst 'ENU=This VAT registration number has already been entered for the following vendors:\ %1;ESP=Este n§ reg. IVA se ha introducido ya para los siguientes proveedores:\ %1';
      Text004@1004 : TextConst 'ENU=This VAT registration number has already been entered for the following contacts:\ %1;ESP=Este n§ reg. IVA se ha introducido ya para los siguientes contactos:\ %1';
      Text005@1005 : TextConst 'ENU=ABCDEFGHIJKLMNOPQRSTUVWXYZ;ESP=ABCDEFGHIJKLMN¥OPQRSTUVWXYZ';
      Text1100000@1100000 : TextConst 'ENU=The VAT Registration number is not valid.;ESP=El CIF/NIF no es valido.';
      Text1100001@1100001 : TextConst 'ENU=Do you still want to save it?;ESP=¨A£n desea guardarlo?';
      Text1100002@1100002 : TextConst 'ENU=The update has been interrupted to respect the warning.;ESP=Se ha interrumpido la actualizaci¢n para respetar la advertencia.';
      Text1100003@1100003 : TextConst 'ENU=The length of the number exceeds the maximum limit of %1 characters.;ESP=La longitud del n£mero supera el l¡mite m ximo permitido de %1 caracteres.';
      Text1100004@1100004 : TextConst 'ENU=The first character (T Element) of the number is invalid.;ESP=El primer car cter (elemento T) del n£mero no es v lido.';
      Text1100005@1100005 : TextConst 'ENU=There should not be any alphabetic characters in the mid part of the number.;ESP=No debe haber ning£n car cter alfab‚tico en medio del n£mero.';
      Text1100006@1100006 : TextConst 'ENU=The control element is not correct.;ESP=El elemento de control no es correcto.';

    PROCEDURE Test@1(VATRegNo@1000 : Text[20];CountryCode@1001 : Code[10];Number@1002 : Code[20];TableID@1003 : Option);
    VAR
      Check@1004 : Boolean;
      CompanyInfo@1005 : Record 79;
      t@1006 : Text[250];
      ErrorText@1100000 : Text[120];
      ValidationCheck@1100001 : Boolean;
    BEGIN
      IF (VATRegNo = '') OR (NOT GUIALLOWED) THEN
        EXIT;
      Check := TRUE;
      ValidationCheck := FALSE;

      IF CountryCode = '' THEN BEGIN
        CompanyInfo.GET;
        SETRANGE("Country/Region Code",CompanyInfo."Country/Region Code");
      END ELSE
        SETRANGE("Country/Region Code",CountryCode);
      SETFILTER(Format,'<> %1','');
      IF FIND('-') THEN BEGIN
        REPEAT
          IF t = '' THEN
            t := Format
          ELSE
            IF STRLEN(t) + STRLEN(Format) + 5 <= MAXSTRLEN(t) THEN
              t := t + ', ' + Format
            ELSE
              t := t +'...';
           Check := Compare(VATRegNo,Format);
          IF "Check VAT Registration No." THEN
            ValidationCheck := TRUE;
        UNTIL Check OR (NEXT = 0);
      END;

      IF NOT Check THEN
        ERROR(Text000 + Text001,"Country/Region Code",t);

      IF ValidationCheck THEN BEGIN
        ErrorText := '';
        IF NOT ValidateVATRegNo(VATRegNo,ErrorText) THEN
          IF NOT CONFIRM(Text1100000 + '\' + ErrorText + '\\' + Text1100001,FALSE) THEN
            ERROR(Text1100002);
      END;

      CASE TableID OF
        DATABASE::Customer:
          CheckCust(VATRegNo,Number);
        DATABASE::Vendor:
          CheckVendor(VATRegNo,Number);
        DATABASE::Contact:
          CheckContact(VATRegNo,Number);
      END;
    END;

    PROCEDURE CheckCust@3(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Cust@1003 : Record 18;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      t@1005 : Text[250];
    BEGIN
      Check := TRUE;
      t := '';
      Cust.SETCURRENTKEY("VAT Registration No.");
      Cust.SETRANGE("VAT Registration No.",VATRegNo);
      Cust.SETFILTER("No.",'<>%1',Number);
      IF Cust.FIND('-') THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          IF Cust."No." <> Number THEN BEGIN
            IF t = '' THEN
              t := Cust."No."
            ELSE
              IF STRLEN(t) + STRLEN(Cust."No.") + 5 <= MAXSTRLEN(t) THEN
                t := t + ', ' + Cust."No."
              ELSE BEGIN
                t := t + '...';
                Finish := TRUE;
              END;
          END;
        UNTIL (Cust.NEXT = 0) OR Finish;
      END;
      IF Check = FALSE THEN
        MESSAGE(Text002, t);
    END;

    PROCEDURE CheckVendor@4(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Vend@1003 : Record 23;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      t@1005 : Text[250];
    BEGIN
      Check := TRUE;
      t := '';
      Vend.SETCURRENTKEY("VAT Registration No.");
      Vend.SETRANGE("VAT Registration No.",VATRegNo);
      Vend.SETFILTER("No.",'<>%1',Number);
      IF Vend.FIND('-') THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          IF Vend."No." <> Number THEN BEGIN
            IF t = '' THEN
              t := Vend."No."
            ELSE
              IF STRLEN(t) + STRLEN(Vend."No.") + 5 <= MAXSTRLEN(t) THEN
                t := t + ', ' + Vend."No."
              ELSE BEGIN
                t := t + '...';
                Finish := TRUE;
              END;
          END;
        UNTIL (Vend.NEXT = 0) OR Finish;
      END;
      IF Check = FALSE THEN
        MESSAGE(Text003, t);
    END;

    PROCEDURE CheckContact@5(VATRegNo@1000 : Text[20];Number@1002 : Code[20]);
    VAR
      Cont@1003 : Record 5050;
      Check@1004 : Boolean;
      Finish@1001 : Boolean;
      t@1005 : Text[250];
    BEGIN
      Check := TRUE;
      t := '';
      Cont.SETCURRENTKEY("VAT Registration No.");
      Cont.SETRANGE("VAT Registration No.",VATRegNo);
      Cont.SETFILTER("No.",'<>%1',Number);
      IF Cont.FIND('-') THEN BEGIN
        Check := FALSE;
        Finish := FALSE;
        REPEAT
          IF Cont."No." <> Number THEN BEGIN
            IF t = '' THEN
              t := Cont."No."
            ELSE
              IF STRLEN(t) + STRLEN(Cont."No.") + 5 <= MAXSTRLEN(t) THEN
                t := t + ', ' + Cont."No."
              ELSE BEGIN
                t := t + '...';
                Finish := TRUE;
              END;
          END;
        UNTIL (Cont.NEXT = 0) OR Finish;
      END;
      IF Check = FALSE THEN
        MESSAGE(Text004, t);
    END;

    PROCEDURE Compare@2(VATRegNo@1000 : Text[20];Format@1001 : Text[20]) : Boolean;
    VAR
      i@1002 : Integer;
      Cf@1003 : Text[1];
      Ce@1004 : Text[1];
      Check@1005 : Boolean;
    BEGIN
      Check := TRUE;
      IF (STRLEN(VATRegNo) = STRLEN(Format)) THEN
        FOR i := 1 TO STRLEN(VATRegNo) DO BEGIN
          Cf := COPYSTR(Format,i,1);
          Ce := COPYSTR(VATRegNo,i,1);
          CASE Cf OF
            '#':
              IF NOT ((Ce >= '0') AND (Ce <= '9')) THEN
                Check := FALSE;
            '@':
              IF STRPOS(Text005,UPPERCASE(Ce)) = 0 THEN
                Check := FALSE;
          ELSE
            IF NOT ((Cf = Ce) OR (Cf = '?')) THEN
              Check := FALSE
          END;
        END
      ELSE
        Check := FALSE;
      EXIT(Check);
    END;

    PROCEDURE ValidateVATRegNo@1100000(VATRegNo@1100000 : Text[20];VAR ErrorText@1100001 : Text[120]) : Boolean;
    VAR
      VATRegNoType@1100002 : ',CIF,NIF,NIE';
      C@1100003 : Text[1];
      ReplacementChar@1100004 : Text[1];
      ControlElement@1100005 : Text[2];
      ReturnValue@1100006 : Boolean;
      MaxLength@1100007 : Integer;
      StartPos@1100008 : Integer;
      CurrentPos@1100009 : Integer;
    BEGIN
      MaxLength := 9;
      ErrorText := '';
      ReturnValue := TRUE;

      VATRegNo := UPPERCASE(DELCHR(VATRegNo,'<>',' '));
      IF STRLEN(VATRegNo) <= MaxLength THEN BEGIN

        C := COPYSTR(VATRegNo,1,1);
        IF (C >= '0') AND (C <= '9') THEN
          StartPos := 1
        ELSE
          StartPos := 2;
        WHILE STRLEN(VATRegNo) < MaxLength DO
          VATRegNo := INSSTR(VATRegNo,'0',StartPos);

        CASE C OF
          'A','B','C','D','E','F','G','H','J','K','N','P','Q','R','S','U','V','W' : VATRegNoType := VATRegNoType::CIF;
          '0'..'9','L','M' : VATRegNoType := VATRegNoType::NIF;
          'X','Y','Z' : VATRegNoType := VATRegNoType::NIE;
          ELSE BEGIN
            ErrorText := Text1100004;
            ReturnValue := FALSE;
          END;
        END;

        IF ReturnValue <> FALSE THEN BEGIN
          CurrentPos := 2;
          REPEAT
            C := COPYSTR(VATRegNo,CurrentPos,1);
            IF NOT ((C >= '0') AND (C <= '9')) THEN
              ReturnValue := FALSE;
            CurrentPos := CurrentPos + 1;
          UNTIL CurrentPos > MaxLength - 1;
          IF ReturnValue = FALSE THEN
            ErrorText := STRSUBSTNO(Text1100005,2,STRLEN(VATRegNo)-1);
        END;

        IF ReturnValue <> FALSE THEN BEGIN
          IF (VATRegNoType = VATRegNoType::NIF) OR (VATRegNoType = VATRegNoType::NIE) THEN BEGIN
            C := COPYSTR(VATRegNo,1,1);
            ReplacementChar := '';
            CASE C OF
              'L','M' : ReplacementChar := '0';
              'X' : ReplacementChar := '0';
              'Y' : ReplacementChar := '1';
              'Z' : ReplacementChar := '2';
            END;
            IF ReplacementChar <> '' THEN
              VATRegNo := ReplacementChar + DELSTR(VATRegNo,1,1);
          END;
          CASE VATRegNoType OF
            VATRegNoType::CIF : ControlElement := CalculateControlElement(COPYSTR(VATRegNo,1,8),1);
            VATRegNoType::NIF : ControlElement := CalculateControlElement(COPYSTR(VATRegNo,1,8),2);
            VATRegNoType::NIE : ControlElement := CalculateControlElement(COPYSTR(VATRegNo,1,8),3);
          END;
          CASE STRLEN(ControlElement) OF
            1 : ReturnValue := COPYSTR(VATRegNo,STRLEN(VATRegNo),1) = ControlElement;
            2 : BEGIN
                  ReturnValue := COPYSTR(VATRegNo,STRLEN(VATRegNo),1) = COPYSTR(ControlElement,1,1);
                  IF ReturnValue = FALSE THEN
                    ReturnValue := COPYSTR(VATRegNo,STRLEN(VATRegNo),1) = COPYSTR(ControlElement,2,1);
                END
          END;
          IF (ReturnValue = FALSE) AND (VATRegNoType = VATRegNoType::CIF) THEN BEGIN
            C := COPYSTR(VATRegNo,1,1);
            IF C = 'K' THEN BEGIN
              VATRegNo := '0' + DELSTR(VATRegNo,1,1);
              ControlElement := CalculateControlElement(COPYSTR(VATRegNo,1,8),2);
              ReturnValue := COPYSTR(VATRegNo,STRLEN(VATRegNo),1) = ControlElement;
            END;
          END;

          IF ReturnValue = FALSE THEN
            ErrorText := Text1100006;
        END;

      END ELSE BEGIN
        ErrorText := STRSUBSTNO(Text1100003,MaxLength);
        ReturnValue := FALSE;
      END;

      EXIT(ReturnValue);
    END;

    LOCAL PROCEDURE CalculateControlElement@1100001(VATRegNo@1100000 : Text[20];Type@1100001 : Integer) : Text[2];
    VAR
      ReturnValue@1100002 : Text[2];
      ElementT@1100003 : Text[1];
      x@1100004 : Integer;
      ExprA@1100005 : Integer;
      ExprB@1100006 : Integer;
      ExprC@1100007 : Integer;
      Result@1100008 : Integer;
    BEGIN
      ReturnValue := '';
      CASE Type OF
        1 : BEGIN  // CIF
          ElementT := COPYSTR(VATRegNo,1,1);
          VATRegNo := COPYSTR(VATRegNo,2,7);
          ExprA := 0;
          ExprB := 0;
          ExprC := 0;
          FOR x := 1 TO STRLEN(VATRegNo) DO BEGIN
            EVALUATE(Result,COPYSTR(VATRegNo,x,1));
            CASE TRUE OF
              x MOD 2 = 0 : ExprA := ExprA + Result;
              x MOD 2 = 1 : ExprB := ExprB + (Result * 2) MOD 10 + ((Result * 2) DIV 10);
            END;
          END;
          ExprC := 10 - ((ExprA + ExprB) MOD 10);
          CASE ElementT OF
            'K','P','Q','S' : ReturnValue := COPYSTR('ABCDEFGHIJ',ExprC,1);
            'A','B','E','H' : ReturnValue := SYSTEM.FORMAT(ExprC);
          ELSE
            ReturnValue := COPYSTR('ABCDEFGHIJ',ExprC,1) + SYSTEM.FORMAT(ExprC MOD 10);
          END;
        END;
        2,3 : BEGIN  // NIF,NIE
          EVALUATE(Result,VATRegNo);
          ReturnValue := COPYSTR('TRWAGMYFPDXBNJZSQVHLCKE',(Result MOD 23) + 1,1)
        END;
      END;
      EXIT(ReturnValue);
    END;

    BEGIN
    END.
  }
}
