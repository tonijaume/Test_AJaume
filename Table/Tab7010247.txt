OBJECT Table 7010247 Temporal Hora Recogida
{
  OBJECT-PROPERTIES
  {
    Date=04/03/13;
    Time=13:07:57;
    Modified=Yes;
    Version List=AIC2009,CNT-OC-12003;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Pick-up times - Temporary;
               ESP=Temporal Hora Recogida];
  }
  FIELDS
  {
    { 1   ;   ;Id                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ESP=ID] }
    { 10  ;   ;Fecha               ;Date          ;CaptionML=[ENU=Date;
                                                              ESP=Fecha];
                                                   Editable=No }
    { 20  ;   ;Compa¤ia            ;Code10        ;TableRelation="Compa¤ia aerea".Codigo;
                                                   CaptionML=[ENU=Company;
                                                              ESP=Compa¤ia];
                                                   Description=FK Compa¤ia aerea;
                                                   Editable=No }
    { 30  ;   ;Vuelo               ;Code10        ;CaptionML=[ENU=Flight;
                                                              ESP=Vuelo];
                                                   Editable=No }
    { 40  ;   ;Hotel               ;Code20        ;TableRelation=Hotel.Hotel;
                                                   CaptionML=[ENU=Hotel;
                                                              ESP=Hotel];
                                                   Description=FK Hotel;
                                                   Editable=No }
    { 50  ;   ;Zona                ;Code10        ;TableRelation="Zona fisica"."Zona Fisica";
                                                   CaptionML=[ENU=Zone;
                                                              ESP=Zona];
                                                   Description=FK Zonas transfer;
                                                   Editable=No }
    { 60  ;   ;Orden zona          ;Integer       ;CaptionML=[ENU=Zone Order;
                                                              ESP=Orden zona];
                                                   Editable=No }
    { 70  ;   ;Orden recogida      ;Integer       ;CaptionML=[ENU=Pick-up order;
                                                              ESP=Orden recogida];
                                                   Editable=No }
    { 80  ;   ;Hora recogida       ;Time          ;OnValidate=VAR
                                                                lwHoraMax@1100253000 : Time;
                                                                lrVuelo@1100217000 : Record 7009754;
                                                              BEGIN
                                                                // JPT 22/06/12 Establecemos una hora antes del vuelo. A partir de esa hora no podr  asignarse hora recogida
                                                                IF "Hora recogida" <> 0T THEN BEGIN
                                                                  // Hay que asegurar que la hora de vuelo est  rellenada
                                                                  IF "Hora vuelo" = 0T THEN
                                                                    ERROR(Text003, Vuelo, Fecha);

                                                                  //. Buscamos el vuelo para comprobar si es del dia siguiente
                                                                  _GetVuelo(lrVuelo); //+$002

                                                                  IF NOT lrVuelo."Vuelo dia siguiente" THEN
                                                                  BEGIN
                                                                    lwHoraMax := "Hora vuelo" - 3600000; // Una hora menos
                                                                    IF "Hora recogida" > (lwHoraMax) THEN
                                                                      ERROR(Text002, lwHoraMax, "Hora vuelo");
                                                                  END;
                                                                END;

                                                                AsignaHora;
                                                              END;

                                                   CaptionML=[ENU=Pick-up time;
                                                              ESP=Hora recogida] }
    { 90  ;   ;Hora vuelo          ;Time          ;CaptionML=[ENU=Flight schedule;
                                                              ESP=Hora vuelo];
                                                   Editable=No }
    { 110 ;   ;IATA                ;Code10        ;TableRelation=Aeropuerto.Aeropuerto;
                                                   CaptionML=[ENU=IATA;
                                                              ESP=IATA];
                                                   Description=FK Aeropuerto;
                                                   Editable=No }
    { 120 ;   ;Pax                 ;Integer       ;CaptionML=[ENU=Pax;
                                                              ESP=Pax];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 500 ;   ;Tipo                ;Option        ;CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionString=Vuelo,Hotel }
    { 510 ;   ;Visible             ;Boolean       ;CaptionML=[ENU=Visible;
                                                              ESP=Visible] }
    { 520 ;   ;Touroperador        ;Code10        ;CaptionML=[ENU=Touroperator;
                                                              ESP=Touroperador] }
    { 525 ;   ;Prevision           ;Boolean       ;CaptionML=[ENU=Schedule;
                                                              ESP=Prevision] }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
    {    ;Hora vuelo,Compa¤ia,Vuelo,Orden zona,Orden recogida }
    {    ;Hora vuelo,Orden zona,Orden recogida     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100253000 : TextConst 'ENU=Building Temporary;ESP=Creando Temporal';
      Text002@1100253001 : TextConst 'ESP=La hora de recogida no puede ser posterior a %1 ya que el vuelo es a las %2';
      Text003@1100253002 : TextConst 'ESP=El vuelo %1 de %2 No tiene la hora configurada';
      Text004@1100217000 : TextConst 'ENU=Do you want to modify the existing transfer services.;ESP=Desea modificar las horas de recogida en las agrupaciones ya creadas.';

    PROCEDURE CreaTemporal@1100253000(pwFecha@1100253000 : Date;pwTouroperador@1100217000 : Code[10];pwModo@1100217004 : 'Diario,Prevision';prVuelo@1100217001 : Record 7009754);
    BEGIN
      // CreaTemporal
      // Trabaja con el objeto Rec, por lo que se sobreentiende que el puntero que ejecute esta funci¢n debe de ser TEMPORAL

      CLEAR(Rec);
      DELETEALL;

      IF (pwFecha= 0D) AND (pwModo <> pwModo::Prevision) THEN
        EXIT;

      IF pwModo = pwModo::Diario THEN
        _CreaTemporalDiario(pwFecha, pwTouroperador)
      ELSE
        _CreaTemporalPrevision(prVuelo);
    END;

    LOCAL PROCEDURE _CreaTemporalDiario@1100217001(pwFecha@1100217001 : Date;pwTouroperador@1100217000 : Code[10]);
    VAR
      lrTmp2@1100217013 : TEMPORARY Record 7010247;
      lrCabVuelo@1100217012 : Record 7010247;
      lrResTrns@1100217011 : Record 7009744;
      lrVuelos@1100217010 : Record 7009754;
      lrPrev@1100217009 : Record 7010246;
      lwId@1100217008 : Integer;
      lwIdVuelo@1100217007 : Integer;
      lwVent@1100217006 : Dialog;
      lwCnt@1100217005 : Integer;
      lwTotal@1100217004 : Integer;
      lwOk@1100217003 : Boolean;
      lwPaxVuelo@1100217002 : Decimal;
    BEGIN
      // _CreaTemporalDiario

      CLEAR(lrResTrns);
      lrResTrns.SETCURRENTKEY("Fecha salida", "Compa¤ia salida", "Vuelo salida");

      CLEAR(lwId);

      CLEAR(lrVuelos);
      lrVuelos.SETRANGE(Fecha           , pwFecha);
      lrVuelos.SETRANGE("Entrada/Salida", lrVuelos."Entrada/Salida"::Salida);
      IF pwTouroperador <> '' THEN
        lrVuelos.SETRANGE(TourOperador, pwTouroperador); //+$001
      IF lrVuelos.FINDSET THEN
      BEGIN
        CLEAR(lwCnt);
        lwTotal := lrVuelos.COUNT;
        lwVent.OPEN(Text001 + ' @1@@@@@@@@@@@@');
        REPEAT
          lwId += 1;

          CLEAR(Rec);
          Id           := lwId;
          Fecha        := pwFecha;
          Compa¤ia     := lrVuelos.Compa¤ia;
          Vuelo        := lrVuelos.Vuelo;
          IATA         := lrVuelos.Destino;
          "Hora vuelo" := lrVuelos."Hora Salida";
          Touroperador := lrVuelos.TourOperador; //+$001
          Tipo         := Tipo::Vuelo;
          Prevision    := FALSE;
          INSERT;

          lrTmp2 := Rec;

          //. Quiero acumular el total de pasajeros por vuelo
          lwPaxVuelo := 0;

          lrResTrns.SETRANGE("Fecha salida"        , pwFecha);
          lrResTrns.SETRANGE("Compa¤ia salida"     , lrVuelos.Compa¤ia);
          lrResTrns.SETRANGE("Vuelo salida"        , lrVuelos.Vuelo);
          lrResTrns.SETFILTER("IATA destino salida",'%1|%2', lrVuelos.Destino,'');
          //lrResTrns.SETRANGE("Agrupacion salida"   , 0);
          IF lrResTrns.FINDSET THEN BEGIN
            REPEAT
              IF lrResTrns.Salida = 1 THEN BEGIN
                CLEAR(Rec);
                Rec := lrTmp2;
                SETRANGE(Tipo     , Tipo::Hotel);
                SETRANGE(Fecha    , lrTmp2.Fecha );
                SETRANGE(Compa¤ia , lrTmp2.Compa¤ia);
                SETRANGE(Vuelo    , lrTmp2.Vuelo);
                SETRANGE(Hotel    , lrResTrns."Hotel salida");
                IF NOT FINDFIRST THEN BEGIN
                  lwId +=1;
                  Id               := lwId;
                  Hotel            := lrResTrns."Hotel salida";
                  Zona             := lrResTrns."Zona salida";
                  // "Orden zona"     :=
                  "Orden recogida" := lrResTrns."Orden salida";
                  Touroperador     := ''; //+$001
                  Tipo             := Tipo::Hotel;
                  Prevision        := FALSE;

                  // Buscamos la hora de recogida pre-establecida
                  CLEAR(lrPrev);
                  lrPrev.SETCURRENTKEY(Fecha, Compa¤ia, Vuelo, Hotel);
                  lrPrev.SETRANGE(Fecha                , Fecha);
                  lrPrev.SETRANGE(Compa¤ia             , Compa¤ia);
                  lrPrev.SETRANGE(Vuelo                , Vuelo);
                  lrPrev.SETRANGE(Hotel                , Hotel);
                  lrPrev.SETRANGE(IATA                 , IATA);
                  lrPrev.SETRANGE("Prevision temporada", FALSE);
                  IF lrPrev.FINDFIRST THEN
                    "Hora recogida" := lrPrev."Hora recogida"
                  ELSE
                    "Hora recogida" := _BuscaPrevisionGenerica;

                  INSERT;
                END;

                Pax += lrResTrns."N§ Personas";
                MODIFY;

                lwPaxVuelo += lrResTrns."N§ Personas";
              END;
            UNTIL lrResTrns.NEXT = 0;
          END;

          Rec := lrTmp2;
          Pax := lwPaxVuelo;
          MODIFY;

          lwCnt += 1;
          lwVent.UPDATE(1, ROUND(lwCnt / lwTotal * 10000, 1));
        UNTIL lrVuelos.NEXT = 0;
        lwVent.CLOSE;
      END;

      CLEAR(Rec);
    END;

    LOCAL PROCEDURE _CreaTemporalPrevision@1100217002(prVuelo@1100217000 : Record 7009754);
    VAR
      lrPrev@1100217001 : Record 7010246;
      lrTmp2@1100217003 : TEMPORARY Record 7010247;
      lwID@1100217002 : Integer;
    BEGIN
      // _CreaTemporalPrevision

      lrPrev.RESET;
      lrPrev.SETRANGE(Compa¤ia             , prVuelo.Compa¤ia);
      lrPrev.SETRANGE(Vuelo                , prVuelo.Vuelo);
      lrPrev.SETRANGE("Prevision temporada", TRUE);
      IF lrPrev.FINDSET THEN
      BEGIN
        lwID += 1;

        CLEAR(Rec);
        Id           := lwID;
        Fecha        := prVuelo.Fecha;
        Compa¤ia     := lrPrev.Compa¤ia;
        Vuelo        := lrPrev.Vuelo;
        IATA         := lrPrev.IATA;
        "Hora vuelo" := lrPrev."Hora vuelo";
        Touroperador := lrPrev.Touroperador;
        Tipo         := Tipo::Vuelo;
        Prevision    := TRUE;
        INSERT;

        lrTmp2 := Rec;

        REPEAT
          lwID += 1;

          CLEAR(Rec);
          Rec := lrTmp2;

          Id               := lwID;
          Hotel            := lrPrev.Hotel;
          Zona             := lrPrev.Zona;
          "Orden recogida" := 0;
          Touroperador     := lrPrev.Touroperador;
          Tipo             := Tipo::Hotel;
          "Hora recogida"  := lrPrev."Hora recogida";
          Prevision        := TRUE;
          INSERT;
        UNTIL lrPrev.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _BuscaPrevisionGenerica@1100217003() : Time;
    VAR
      lrPrev@1100217000 : Record 7010246;
    BEGIN
      CLEAR(lrPrev);
      lrPrev.SETCURRENTKEY(Fecha, Compa¤ia, Vuelo, Hotel);
      lrPrev.SETRANGE(Compa¤ia             , Compa¤ia);
      lrPrev.SETRANGE(Vuelo                , Vuelo);
      lrPrev.SETRANGE(Hotel                , Hotel);
      lrPrev.SETRANGE("Prevision temporada", TRUE);
      IF lrPrev.FINDFIRST THEN
        EXIT(lrPrev."Hora recogida");
    END;

    LOCAL PROCEDURE _GetVuelo@1100217000(VAR prVuelo@1100217000 : Record 7009754);
    BEGIN
      // _GetVuelo

      prVuelo.RESET;
      prVuelo.SETRANGE(Fecha           , Fecha);
      prVuelo.SETRANGE(Compa¤ia        , Compa¤ia);
      prVuelo.SETRANGE(Vuelo           , Vuelo);
      prVuelo.SETRANGE("Entrada/Salida", prVuelo."Entrada/Salida"::Salida);
      IF NOT prVuelo.FINDFIRST THEN
        CLEAR(prVuelo);
    END;

    PROCEDURE AsignaHora@1100253001();
    VAR
      lrPrev@1100253000 : Record 7010246;
      lrHoraAgr@1100217000 : Record 7009800;
      lrAgr@1100217001 : Record 7009796;
    BEGIN
      // AsignaHora

      CLEAR(lrPrev);
      lrPrev.SETCURRENTKEY(Fecha,Compa¤ia,Vuelo,Hotel);
      lrPrev.SETRANGE(Fecha   , Fecha);
      lrPrev.SETRANGE(Compa¤ia, Compa¤ia);
      lrPrev.SETRANGE(Vuelo   , Vuelo);
      lrPrev.SETRANGE(Hotel   , Hotel);
      lrPrev.SETRANGE(IATA    , IATA);
      IF NOT lrPrev.FINDFIRST THEN BEGIN
        lrPrev.Fecha   := Fecha;
        lrPrev.Compa¤ia:= Compa¤ia;
        lrPrev.Vuelo   := Vuelo;
        lrPrev.Hotel   := Hotel;
        lrPrev.IATA    := IATA;
        lrPrev.INSERT(TRUE);
      END;

      lrPrev."Hora recogida" := "Hora recogida";
      lrPrev.MODIFY;

      IF NOT Prevision THEN
      BEGIN
        //+$003
        //. Comprobamos si hay agrupaciones de salida creadas para este dia
        lrAgr.RESET;
        lrAgr.SETRANGE(Fecha          , Fecha);
        lrAgr.SETRANGE("Tipo transfer", lrAgr."Tipo transfer"::Salida);
        IF lrAgr.FINDFIRST THEN
        BEGIN
          //. Pedimos si hay que afectar a las agrupaciones ya creadas

          IF CONFIRM(Text004) THEN
          BEGIN
            lrHoraAgr.RESET;
            lrHoraAgr.SETRANGE(Fecha   , Fecha);
            lrHoraAgr.SETRANGE(Compa¤ia, Compa¤ia);
            lrHoraAgr.SETRANGE(Vuelo   , Vuelo);
            lrHoraAgr.SETRANGE(Hotel   , Hotel);
            lrHoraAgr.SETRANGE(IATA    , IATA);
            IF lrHoraAgr.FINDSET THEN
              lrHoraAgr.MODIFYALL("Hora recogida", "Hora recogida");
          END;
        END;
      END;
    END;

    BEGIN
    {
      JPT 24/05/12 CNT-CAR-12004 / TRA-12 Definition of transfer pick-up  schedule

      $001 AJS 08102012 Modifico la funcion de crear temporal para incluir un nuevo parametro de filtro
                        por touroperador

      $002 AJS 02032013 Modifico el control de hora recogida respecto a hora vuelo para los vuelos de madrugada

      $003 AJS 04032013 Solo pedimos si hay que actualizar horario en agrupaciones, si realmente existen agrupaciones
    }
    END.
  }
}
