OBJECT Table 7010330 Condicion variable
{
  OBJECT-PROPERTIES
  {
    Date=16/10/09;
    Time=12:30:40;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=VAR
               rUser@1100244000 : Record 7010420;
             BEGIN
               rPar.FINDFIRST;
               rPar.TESTFIELD("Serie Condicion Variable");
               GestNoSerie.InitSeries(rPar."Serie Condicion Variable", rPar."Serie Condicion Variable", TODAY,
                                     "N§", rPar."Serie Condicion Variable");

               IF (Garaje='') AND rUser.GET(USERID) AND (rUser."Garaje por defecto" <> '') THEN
                 Garaje := rUser."Garaje por defecto";
             END;

    OnModify=BEGIN
               IF Confirmado THEN
                 Confirmar;
             END;

    OnRename=BEGIN
               IF Confirmado THEN
                 Confirmar;
             END;

    CaptionML=ESP=Condicion variable;
    LookupFormID=Form7010345;
    DrillDownFormID=Form7010345;
  }
  FIELDS
  {
    { 1   ;   ;N§                  ;Code10        ;CaptionML=ESP=N§;
                                                   NotBlank=No;
                                                   Description=PK;
                                                   Editable=No }
    { 2   ;   ;Descripcion         ;Text50        ;CaptionML=ESP=Descripcion;
                                                   NotBlank=Yes }
    { 3   ;   ;Fecha desde         ;Date          ;CaptionML=ESP=Fecha desde;
                                                   NotBlank=Yes }
    { 4   ;   ;Fecha hasta         ;Date          ;CaptionML=ESP=Fecha hasta;
                                                   NotBlank=Yes }
    { 5   ;   ;Precio              ;Decimal       ;OnValidate=BEGIN
                                                                //BRM 02/06/04 Vamos a usar precisi¢n configurada en par metros
                                                                rPar.FINDFIRST;
                                                                Precio := ROUND(Precio,POWER(10,(-1*rPar."Precision Decimales")));
                                                                IF Precio <> xRec.Precio THEN BEGIN
                                                                  CalcularImporteLocal();
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Precio }
    { 6   ;   ;Cod. Divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Divisa" <> xRec."Cod. Divisa" THEN BEGIN
                                                                  CalcularImporteLocal();
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Cod. Divisa }
    { 7   ;   ;Precio (DL)         ;Decimal       ;CaptionML=ESP=Precio (DL);
                                                   Editable=No }
    { 8   ;   ;Concepto variable   ;Code10        ;TableRelation="Concepto variable".Concepto;
                                                   OnValidate=VAR
                                                                rPar@1100244000 : Record 7010311;
                                                              BEGIN
                                                                IF "Concepto variable" <> xRec."Concepto variable" THEN BEGIN
                                                                  rPar.FINDFIRST;
                                                                  IF ("Concepto variable" = rPar."Codigo Hora Extra") OR
                                                                     ("Concepto variable" = rPar."Codigo Dieta") THEN BEGIN
                                                                    "Tipo Vehiculo"   := '';
                                                                    "Tipo Servicio"   := '';
                                                                    "C¢digo Servicio" := '';
                                                                    "Zona fisica"     := '';
                                                                    "Rango M¡nimo"    := 0;
                                                                    "Rango M ximo"    := 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Concepto variable;
                                                   NotBlank=Yes;
                                                   Description=FK Tabla Concepto Variable }
    { 9   ;   ;Asociado a          ;Option        ;OnValidate=BEGIN
                                                                //Si cambiamos este valor, el campo Valor se debe vaciar
                                                                IF xRec."Asociado a" <> Rec."Asociado a" THEN
                                                                   Valor :='';
                                                              END;

                                                   CaptionML=ESP=Asociado a;
                                                   OptionCaptionML=ESP=Tipo Acuerdo,Conductor;
                                                   OptionString=Tipo Acuerdo,Conductor;
                                                   NotBlank=Yes;
                                                   Description=Tipo Acuerdo,Conductor }
    { 10  ;   ;Valor               ;Code10        ;TableRelation=IF (Asociado a=CONST(Tipo Acuerdo)) "Tipo Acuerdo Conductor"."Tipo Acuerdo"
                                                                 ELSE IF (Asociado a=CONST(Conductor)) Conductor.Conductor WHERE (Garaje=FIELD(Garaje));
                                                   ValidateTableRelation=Yes;
                                                   TestTableRelation=Yes;
                                                   CaptionML=ESP=Valor;
                                                   NotBlank=Yes }
    { 11  ;   ;Garaje              ;Code10        ;TableRelation=Garaje.Garaje;
                                                   OnValidate=VAR
                                                                cFunBas@1100244000 : Codeunit 7010310;
                                                              BEGIN
                                                                cFunBas.TestGarajeTodos(Garaje);
                                                                cFunBas.TestRestringido(Garaje);
                                                              END;

                                                   CaptionML=ESP=Garaje;
                                                   NotBlank=Yes }
    { 12  ;   ;Confirmado          ;Boolean       ;InitValue=No;
                                                   CaptionML=ESP=Confirmado;
                                                   Editable=No }
    { 13  ;   ;Tipo Vehiculo       ;Code10        ;TableRelation="Tipo Vehiculo".Codigo;
                                                   CaptionML=ESP=Tipo Vehiculo;
                                                   NotBlank=No }
    { 14  ;   ;Conductor           ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Conductor."Nombre Abreviado" WHERE (Conductor=FIELD(Valor)));
                                                   CaptionML=ESP=Conductor;
                                                   Editable=No }
    { 15  ;   ;Tipo Servicio       ;Code10        ;TableRelation="Tipo Servicio".Codigo;
                                                   OnValidate=BEGIN
                                                                //Borramos el valor ya obsoleto del c¢digo de servicio.
                                                                IF "Tipo Servicio" <> xRec."Tipo Servicio" THEN
                                                                  "C¢digo Servicio" := '';
                                                              END;

                                                   CaptionML=ESP=Tipo Servicio;
                                                   NotBlank=No }
    { 16  ;   ;C¢digo Servicio     ;Code10        ;TableRelation="Codigo servicio".Codigo;
                                                   OnValidate=VAR
                                                                rCS@1100244000 : Record 7010320;
                                                              BEGIN
                                                                IF "C¢digo Servicio" <> xRec."C¢digo Servicio" THEN
                                                                  IF rCS.GET("C¢digo Servicio") THEN
                                                                    "Tipo Servicio" := rCS."Tipo servicio";
                                                              END;

                                                   CaptionML=ESP=C¢digo Servicio;
                                                   NotBlank=No }
    { 17  ;   ;Rango M¡nimo        ;Integer       ;CaptionML=ESP=Rango M¡nimo;
                                                   MinValue=0;
                                                   MaxValue=9999 }
    { 18  ;   ;Rango M ximo        ;Integer       ;CaptionML=ESP=Rango M ximo;
                                                   MinValue=0;
                                                   MaxValue=9999 }
    { 20  ;   ;Zona fisica         ;Code10        ;TableRelation="Zona fisica transfer".Codigo;
                                                   CaptionML=ESP=Zona fisica;
                                                   Description=FK Zona fisica }
    { 21  ;   ;Cantidad Minima     ;Decimal       ;OnValidate=VAR
                                                                NO_MENOR_QUE_CERO@1100244000 : TextConst 'ESP=No puede ser menor que cero';
                                                              BEGIN
                                                                IF "Cantidad Minima" < 0 THEN
                                                                  ERROR(NO_MENOR_QUE_CERO);
                                                              END;

                                                   CaptionML=ESP=Cantidad Minima }
    { 22  ;   ;Zona Independiente  ;Boolean       ;InitValue=Yes;
                                                   OnValidate=VAR
                                                                lrZns@1103350000 : Record 7010396;
                                                              BEGIN
                                                                IF "Zona Independiente" THEN BEGIN
                                                                  lrZns.RESET;
                                                                  lrZns.SETCURRENTKEY(Grupo,Condicion,"Zona Fisica");
                                                                  lrZns.SETRANGE(Condicion,"N§");
                                                                  lrZns.SETRANGE(Grupo,2);
                                                                  IF lrZns.FINDFIRST THEN BEGIN
                                                                    IF CONFIRM(Text0001,FALSE) THEN
                                                                      lrZns.DELETEALL
                                                                    ELSE
                                                                      ERROR(Text0002);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Zona Independiente }
  }
  KEYS
  {
    {    ;N§                                      ;Clustered=Yes }
    {    ;Garaje,Concepto variable,Tipo Vehiculo,Asociado a,Valor }
    {    ;Confirmado,Garaje,Concepto variable,Asociado a,Valor,Fecha desde,Fecha hasta }
    {    ;Zona Independiente,Confirmado,Garaje,Concepto variable,Asociado a,Valor,Fecha desde,Fecha hasta }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      rReg@1100244000 : Record 7010330;
      rTipo@1100244001 : Record 330;
      rPar@1100244002 : Record 7010311;
      GestNoSerie@1100244003 : Codeunit 396;
      rModulo@1100244004 : Codeunit 7010313;
      cFunBas@1100244005 : Codeunit 7010310;
      Text0001@1103350000 : TextConst 'ESP=Esta condici¢n tiene zonas fisicas en el grupo 2, se va a proceder a su borrado.\¨Desea Seguir?';
      Text0002@1103350001 : TextConst 'ESP=Proceso Interrumpido';
      Text0003@1103355000 : TextConst 'ESP=No existe el usuario %1.';

    PROCEDURE CalcularImporteLocal@1();
    BEGIN
      IF "Cod. Divisa" <> '' THEN
        //BRM 02/06/04 Vamos a calcular el precio con la precisi¢n configurada en par metros
        //"Precio (DL)" := rTipo.ExchangeAmtFCYToLCY(TODAY, "Cod. Divisa",
        //                                       Precio, rTipo.ExchangeRate(TODAY,
        //                                                                 "Cod. Divisa"))
        "Precio (DL)" := cFunBas.CambiarDEaDL(Precio,"Cod. Divisa",TODAY)
      ELSE
        "Precio (DL)" := Precio;
    END;

    PROCEDURE Validaciones@3();
    VAR
      FECHAS_INCOMPATIBLES@1100244000 : TextConst 'ESP=La fecha inicial no puede ser mayor que la fecha final';
      RANGOS_ERRONEOS@1100244001 : TextConst 'ESP=El rango m ximo no puede ser menor que el rango m¡nimo';
      RANGOS_ERRONEOS0@1100244002 : TextConst 'ESP=Hay que introducir el rango';
      SOLAPE_FECHAS@1100244003 : TextConst 'ESP=Se ha detectado un solape de fechas con la condici¢n %1';
      rPar@1100244004 : Record 7010311;
      a1@1100244005 : Integer;
      a2@1100244006 : Integer;
      b1@1100244007 : Integer;
      b2@1100244008 : Integer;
      ERR_RANGO_MAXIMO@1100244009 : TextConst 'ESP=El rango m ximo debe ser mayor que cero';
      FALTA_TIPO_VEHICULO@1100244010 : TextConst 'ESP=Falta introducir el tipo de vehiculo';
      FALTA_TIPO_SERVICIO@1100244011 : TextConst 'ESP=Falta introducir el tipo de servicio';
      vSolapeRangos@1100244012 : Boolean;
      vSolapeFechas@1100244013 : Boolean;
      lwOk@1103350000 : Boolean;
    BEGIN
      rPar.FINDFIRST;

      IF "Fecha desde" > "Fecha hasta" THEN
        ERROR(FECHAS_INCOMPATIBLES);

      IF ("Concepto variable" <> rPar."Codigo Hora Extra") AND
         ("Concepto variable" <> rPar."Codigo Dieta") THEN BEGIN

        IF ("Rango M¡nimo" = 0) AND ("Rango M ximo" = 0) THEN
          ERROR(RANGOS_ERRONEOS0);

        IF "Rango M¡nimo" > "Rango M ximo" THEN
          ERROR(RANGOS_ERRONEOS);

        IF "Tipo Servicio"='' THEN
          ERROR(FALTA_TIPO_SERVICIO);

        IF "Tipo Vehiculo"='' THEN
          ERROR(FALTA_TIPO_VEHICULO);
      END;


      rReg.RESET;
      rReg.SETCURRENTKEY(Garaje,"Concepto variable","Tipo Vehiculo","Asociado a",Valor);
      rReg.SETFILTER("N§",'<>%1',"N§");
      rReg.SETRANGE(Garaje,Garaje);
      rReg.SETRANGE("Concepto variable","Concepto variable");
      rReg.SETRANGE("Tipo Vehiculo","Tipo Vehiculo");
      rReg.SETRANGE("Tipo Servicio","Tipo Servicio");
      rReg.SETRANGE("C¢digo Servicio","C¢digo Servicio");
      // rReg.SETRANGE("Zona fisica","Zona fisica");
      rReg.SETRANGE("Asociado a","Asociado a");
      rReg.SETRANGE(Confirmado,TRUE);
      rReg.SETRANGE(Valor,Valor);

      IF rReg.FINDSET THEN REPEAT
        lwOk := MismaZona(Rec,rReg); // JPT 05/10/04 Miramos si coninciden en alguna zona
        IF lwOk THEN BEGIN
          //Inicializamos las booleanas.
          vSolapeFechas := FALSE;
          IF("Concepto variable" = rPar."Codigo Hora Extra") OR
            ("Concepto variable" = rPar."Codigo Dieta") THEN
            vSolapeRangos := TRUE
          ELSE
            vSolapeRangos := FALSE;

          //Revisamos que no haya solape de fechas.
          IF rModulo.InterseccionFechas("Fecha desde","Fecha hasta",rReg."Fecha desde",
                                         rReg."Fecha hasta") THEN BEGIN
              vSolapeFechas := TRUE;
          END;

          IF NOT vSolapeRangos THEN BEGIN
            a1 := "Rango M¡nimo"; a2:= "Rango M ximo";
            b1 := rReg."Rango M¡nimo"; b2 := rReg."Rango M ximo";

            IF ( (a1 >= b1) AND (a1 <= b2) ) OR ( (a2 >= b1) AND (a2 <= b2) ) OR
               ( (b1 >= a1) AND (b1 <= a2) ) OR ( (b2 >= a1) AND (b2 <= a2) ) THEN
              vSolapeRangos := TRUE;
          END;

          //Si se ha detectado solape abortamos el proceso.
          IF vSolapeFechas AND vSolapeRangos THEN
            ERROR(SOLAPE_FECHAS,rReg."N§");
        END;
      UNTIL rReg.NEXT=0;

      //Por si hubieramos introducido la fecha desde con posterioridad al precio o a la divisa.
      VALIDATE(Precio);
    END;

    PROCEDURE MismaZona@1103350000(prCond1@1103350000 : Record 7010330;prCond2@1103350001 : Record 7010330) : Boolean;
    VAR
      lwOk@1103350002 : Boolean;
      lrZns1@1103350003 : Record 7010396;
      lrZns2@1103350004 : Record 7010396;
    BEGIN
      // MismaZona
      // Devuelve TRUE si las dos condiciones son de "Zona Independiente" y coinciden en alguna zona

      CLEAR(lrZns1);
      CLEAR(lrZns2);
      CLEAR(lwOk);
      IF prCond1."Zona Independiente" AND prCond2."Zona Independiente" THEN BEGIN
        lrZns1.RESET;
        lrZns1.SETRANGE(Condicion,prCond1."N§");
        IF lrZns1.FINDSET THEN BEGIN
          REPEAT
            lwOk := lrZns2.GET(prCond2."N§",lrZns1."Zona Fisica");
          UNTIL (lrZns1.NEXT=0) OR lwOk;
        END;
      END;

      EXIT(lwOk);
    END;

    PROCEDURE Confirmar@2() : Boolean;
    VAR
      Result@1100244000 : Boolean;
    BEGIN
      //Comprobaremos si el nuevo registro a insertar solapa EN FECHAS con alguno de los registros
      //con la misma condici¢n at¡pica y valor
      TESTFIELD(Garaje);
      TESTFIELD(Descripcion);
      TESTFIELD("Fecha desde");
      TESTFIELD("Fecha hasta");
      TESTFIELD("Concepto variable");
      TESTFIELD(Valor);
      Validaciones();
      IF NOT Confirmado THEN BEGIN
        Confirmado := TRUE;
        MODIFY;
      END;
    END;

    PROCEDURE FiltrarGarajeUsuario@1103355000();
    VAR
      lrParGenerales@1103355000 : Record 7010311;
      lrUsuario@1103355001 : Record 7010420;
    BEGIN
      // FiltrarGarajeUsuario.
      // Filtramos las condiciones por garaje dependiendo de la configuraci¢n del usuario.

      lrParGenerales.FINDFIRST;

      IF NOT lrUsuario.GET(USERID) THEN
        ERROR(Text0003, USERID);

      SETCURRENTKEY(Garaje);

      IF (lrUsuario."Garaje de trabajo" <> '') AND (lrUsuario."Garaje de trabajo" <> lrParGenerales."Todos los garajes") THEN BEGIN
        FILTERGROUP(2);
        SETRANGE(Garaje, lrUsuario."Garaje de trabajo");
        FILTERGROUP(0);
      END;
    END;

    BEGIN
    {
      //Es obligatorio introducir todos los campos menos:
      a) La Zona fisica
      b) El codigo de servicio.
      En cambio el tipo de servicio, el rango de paxes y el tipo de vehiculo son obligatorios ya
      que debido a que se preveen poco numero de registros en dichas tablas, entonces no cuesta
      mucho el duplicarlas.
      No es el mismo caso para a) y b).
      En el c lculo de ingresos se dar  preferencia a la zona fisica que al c¢digo de servicio.
    }
    END.
  }
}
