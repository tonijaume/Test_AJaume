OBJECT Table 7010405 Precio contrato venta
{
  OBJECT-PROPERTIES
  {
    Date=16/10/09;
    Time=12:30:45;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=VAR
               rPre@1100244000 : Record 7010405;
             BEGIN

               rPre.RESET;
               rPre.SETRANGE(Garaje       , Garaje);
               rPre.SETRANGE("N§ Contrato", "N§ Contrato");
               rPre.SETRANGE("Tipo precio", "Tipo precio");
               IF rPre.FINDLAST THEN
                 Orden := rPre.Orden + 10
               ELSE
                 Orden := 1;

               // Tomamos la divisa del contrato
               //
               IF rConv.GET(Garaje, "N§ Contrato") THEN BEGIN
                 "Cod. Divisa" := rConv."Cod. Divisa";

                 // AJS 22.12.2005
                 // Inicializamos las fechas del precio con las fechas del contrato solo si estan en blanco

                 IF ("Fecha desde" = 0D) AND ("Fecha hasta" = 0D) THEN BEGIN
                   "Fecha desde" := rConv."Fecha inicio contrato";
                   "Fecha hasta" := rConv."Fecha final contrato";
                 END;

               END;
               Sincroniza(FALSE);

               rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                      Orden, mes8, '', '');
             END;

    OnModify=BEGIN
               // AJS --> Hay que comprobar el solapamiento
               //
               comprobar_solape(FALSE);
               IF "Tipo elemento" <>  '' THEN
                 "Tipo aplicacion" := "Tipo aplicacion"::Pax;

               Sincroniza(FALSE);
             END;

    OnDelete=BEGIN
               // AJS --> Hay que insertar el registro en el historico del borrado del precio
               //

               Sincroniza(TRUE);
               rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                      Orden, mes9, "Codigo servicio" + '-' + "Zona desde",
                                      FORMAT("Fecha desde") + '-' + FORMAT("Fecha hasta"));
             END;

    OnRename=BEGIN
               CLEAR(rPre);
               rPre:=xRec;
               rPre.Sincroniza(TRUE);
               Sincroniza(FALSE);
             END;

    CaptionML=ESP=Precio contrato venta;
  }
  FIELDS
  {
    { 1   ;   ;Garaje              ;Code10        ;TableRelation=Garaje.Garaje;
                                                   CaptionML=ESP=Garaje;
                                                   SQL Data Type=Varchar;
                                                   Description=PK, FK Garaje;
                                                   Editable=No }
    { 3   ;   ;N§ Contrato         ;Code10        ;CaptionML=ESP=N§ Contrato;
                                                   SQL Data Type=Varchar;
                                                   Description=PK;
                                                   Editable=No }
    { 5   ;   ;Tipo precio         ;Option        ;CaptionML=ESP=Tipo precio;
                                                   OptionCaptionML=ESP=Precio Base,Suplemento elemento,Suplemento zona,Suplemento vario;
                                                   OptionString=Precio Base,Suplemento elemento,Suplemento zona,Suplemento vario;
                                                   Description=PK;
                                                   Editable=No }
    { 7   ;   ;Orden               ;Integer       ;CaptionML=ESP=Orden;
                                                   Description=PK;
                                                   Editable=No }
    { 9   ;   ;Codigo servicio     ;Code10        ;TableRelation="Codigo servicio".Codigo;
                                                   OnValidate=VAR
                                                                rTipoServicio@1100244000 : Record 7010319;
                                                                rCodigoServicio@1100244001 : Record 7010320;
                                                              BEGIN
                                                                lrCodSer.RESET;
                                                                IF NOT lrCodSer.GET("Codigo servicio") THEN
                                                                  CLEAR(lrCodSer);
                                                                VALIDATE("Tipo Servicio",lrCodSer."Tipo servicio");

                                                                IF "Codigo servicio" <> xRec."Codigo servicio" THEN BEGIN


                                                                  IF ("Tipo precio" = "Tipo precio"::"Precio Base") AND ("Codigo servicio" = '') THEN
                                                                    ERROR(err10);
                                                                  Activo := FALSE;


                                                                  IF xRec."Codigo servicio" <> '' THEN
                                                                    rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                           Orden, FIELDCAPTION("Codigo servicio"), xRec."Codigo servicio",
                                                                                           "Codigo servicio");

                                                                  // El parametro Considerar Maletas viene dado por el mismo parametro en Tipo de Servicio

                                                                  IF rCodigoServicio.GET("Codigo servicio") THEN
                                                                    IF rTipoServicio.GET(rCodigoServicio."Tipo servicio") THEN
                                                                      "Calcular Maletas" := rTipoServicio."Calcular Maletas";
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Codigo servicio;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Codigo Servicio }
    { 11  ;   ;Zona desde          ;Code10        ;TableRelation="Zona contrato"."Zona Precio" WHERE (Garaje=FIELD(Garaje),
                                                                                                      N§ Contrato=FIELD(N§ Contrato),
                                                                                                      Tipo contrato=CONST(Venta),
                                                                                                      Tipo Servicio fijo=FIELD(Tipo Servicio fijo));
                                                   OnValidate=BEGIN
                                                                IF "Zona desde" <> xRec."Zona desde" THEN BEGIN
                                                                  IF ("Tipo precio" = "Tipo precio"::"Precio Base") AND ("Zona desde" = '') THEN
                                                                    ERROR(err11);
                                                                  Activo := FALSE;
                                                                  IF xRec."Zona desde" <> '' THEN
                                                                    rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                           Orden, FIELDCAPTION("Zona desde"), xRec."Zona desde", "Zona desde");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Zona desde;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Zona contrato }
    { 13  ;   ;Fecha desde         ;Date          ;OnValidate=BEGIN
                                                                IF "Fecha desde" <> xRec."Fecha desde" THEN BEGIN
                                                                  Activo := FALSE;
                                                                  comp_fechas;

                                                                  IF xRec."Fecha desde" <> 0D THEN
                                                                    rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                           Orden, FIELDCAPTION("Fecha desde"), FORMAT(xRec."Fecha desde"),
                                                                                           FORMAT("Fecha desde"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Fecha desde;
                                                   NotBlank=Yes }
    { 15  ;   ;Fecha hasta         ;Date          ;OnValidate=BEGIN
                                                                IF "Fecha hasta" <> xRec."Fecha hasta" THEN BEGIN
                                                                  Activo := FALSE;
                                                                  comp_fechas;
                                                                  IF xRec."Fecha hasta" <> 0D THEN
                                                                    rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                           Orden, FIELDCAPTION("Fecha hasta"), FORMAT(xRec."Fecha hasta"),
                                                                                           FORMAT("Fecha hasta"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Fecha hasta;
                                                   NotBlank=Yes }
    { 17  ;   ;Tipo Vehiculo       ;Code10        ;TableRelation="Tipo Vehiculo".Codigo;
                                                   OnValidate=BEGIN
                                                                IF "Tipo Vehiculo" <> xRec."Tipo Vehiculo" THEN BEGIN
                                                                  Activo := FALSE;
                                                                  IF xRec."Tipo Vehiculo" <> '' THEN
                                                                    rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                           Orden, FIELDCAPTION("Tipo Vehiculo"), xRec."Tipo Vehiculo",
                                                                                           "Tipo Vehiculo");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Tipo Vehiculo;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Tipo Vehiculo }
    { 19  ;   ;Rango desde         ;Integer       ;OnValidate=BEGIN
                                                                IF "Rango desde" <> xRec."Rango desde" THEN BEGIN
                                                                  IF "Rango hasta" <> 0 THEN BEGIN
                                                                    IF "Rango desde" > "Rango hasta" THEN
                                                                      ERROR(err5);
                                                                  END;
                                                                  Activo := FALSE;
                                                                  IF xRec."Rango desde" <> 0 THEN
                                                                    rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                           Orden, FIELDCAPTION("Rango desde"), FORMAT(xRec."Rango desde"),
                                                                                           FORMAT("Rango desde"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Rango desde;
                                                   NotBlank=Yes }
    { 21  ;   ;Rango hasta         ;Integer       ;OnValidate=BEGIN
                                                                IF "Rango hasta" <> xRec."Rango hasta" THEN BEGIN
                                                                  IF "Rango hasta" <> 0 THEN BEGIN
                                                                    IF "Rango desde" > "Rango hasta" THEN
                                                                      ERROR(err5);
                                                                  END;
                                                                  Activo := FALSE;
                                                                  IF xRec."Rango hasta" <> 0 THEN
                                                                    rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                           Orden, FIELDCAPTION("Rango hasta"), FORMAT(xRec."Rango hasta"),
                                                                                           FORMAT("Rango hasta"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Rango hasta;
                                                   NotBlank=Yes }
    { 23  ;   ;Tipo aplicacion     ;Option        ;OnValidate=BEGIN
                                                                IF "Tipo aplicacion" <> xRec."Tipo aplicacion" THEN BEGIN
                                                                  CASE "Tipo aplicacion" OF
                                                                    "Tipo aplicacion"::Pax: VALIDATE("Precio Vehiculo", 0);
                                                                    "Tipo aplicacion"::Vehiculo : BEGIN
                                                                      VALIDATE("Precio Adulto", 0);
                                                                      VALIDATE("Precio Ni¤o"  , 0);
                                                                    END;
                                                                  END;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Tipo aplicacion"), FORMAT(xRec."Tipo aplicacion"),
                                                                                         FORMAT("Tipo aplicacion"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Tipo aplicacion;
                                                   OptionCaptionML=ESP=Vehiculo,Pax;
                                                   OptionString=Vehiculo,Pax }
    { 25  ;   ;Precio Vehiculo     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Precio Vehiculo" <> xRec."Precio Vehiculo" THEN BEGIN
                                                                  IF "Precio Vehiculo" <> 0 THEN BEGIN
                                                                    IF ("Tipo precio"="Tipo precio"::"Precio Base") AND ("Tipo aplicacion" = "Tipo aplicacion"::Pax) THEN
                                                                      ERROR(Text002,FIELDCAPTION("Precio Vehiculo"),FIELDCAPTION("Tipo aplicacion"),Text004);
                                                                  END;
                                                                  VALIDATE("Cod. Divisa");
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Precio Vehiculo"), FORMAT(xRec."Precio Vehiculo"), FORMAT("Precio Vehiculo"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Precio Vehiculo;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 27  ;   ;Tipo elemento       ;Code10        ;OnValidate=BEGIN
                                                                IF "Tipo elemento" <> xRec."Tipo elemento" THEN BEGIN

                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Tipo elemento"), xRec."Tipo elemento", "Tipo elemento");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Tipo elemento }
    { 29  ;   ;Cod. Divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   OnValidate=BEGIN
                                                                IF ("Cod. Divisa" <> '') AND (NOT Porcentaje) THEN BEGIN
                                                                  rConv.GET(Garaje, "N§ Contrato");

                                                                  IF rConv."Fecha firma contrato" = 0D THEN BEGIN
                                                                    "Precio Vehiculo (DL)" := 0;
                                                                    "Precio Adulto (DL)"   := 0;
                                                                    "Precio Ni¤o (DL)"     := 0;
                                                                  END
                                                                  ELSE BEGIN
                                                                    "Precio Vehiculo (DL)" := rTipo.ExchangeAmtFCYToLCY(rConv."Fecha firma contrato", "Cod. Divisa",
                                                                                                 "Precio Vehiculo", rTipo.ExchangeRate(rConv."Fecha firma contrato",
                                                                                                                                                    "Cod. Divisa"));
                                                                    "Precio Adulto (DL)"   := rTipo.ExchangeAmtFCYToLCY(rConv."Fecha firma contrato", "Cod. Divisa",
                                                                                                 "Precio Adulto", rTipo.ExchangeRate(rConv."Fecha firma contrato",
                                                                                                                                                    "Cod. Divisa"));
                                                                    "Precio Ni¤o (DL)"     := rTipo.ExchangeAmtFCYToLCY(rConv."Fecha firma contrato", "Cod. Divisa",
                                                                                                 "Precio Ni¤o", rTipo.ExchangeRate(rConv."Fecha firma contrato",
                                                                                                                                                    "Cod. Divisa"));
                                                                  END;
                                                                  // ----  AJS 3.10.2001  A¤ado un redondeo del precio para no tener almacenados un n§  ----
                                                                  // ----  excesivo de decimales que luego nos pueden dar problemas en operaciones      ----

                                                                  rConf.RESET;
                                                                  rConf.FINDFIRST;

                                                                  "Precio Vehiculo (DL)" := ROUND("Precio Vehiculo (DL)", rConf."Amount Rounding Precision");
                                                                  "Precio Adulto (DL)"   := ROUND("Precio Adulto (DL)"  , rConf."Amount Rounding Precision");
                                                                  "Precio Ni¤o (DL)"     := ROUND("Precio Ni¤o (DL)"    , rConf."Amount Rounding Precision");
                                                                  // ----  Fin AJS 3.10.2001  ----

                                                                END
                                                                ELSE BEGIN
                                                                  "Precio Vehiculo (DL)" := "Precio Vehiculo";
                                                                  "Precio Adulto (DL)"   := "Precio Adulto";
                                                                  "Precio Ni¤o (DL)"     := "Precio Ni¤o";
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Cod. Divisa;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Divisa;
                                                   Editable=No }
    { 31  ;   ;Precio Vehiculo (DL);Decimal       ;CaptionML=ESP=Precio Vehiculo (DL);
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 33  ;   ;Activo              ;Boolean       ;CaptionML=ESP=Activo;
                                                   Editable=No }
    { 35  ;   ;Codigo suplemento   ;Code10        ;TableRelation="Codigo Suplemento".Codigo;
                                                   OnValidate=BEGIN
                                                                IF "Codigo suplemento" <> xRec."Codigo suplemento" THEN BEGIN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Codigo suplemento"), xRec."Codigo suplemento",
                                                                                         "Codigo suplemento");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Codigo suplemento;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Codigo Suplemento }
    { 37  ;   ;Zona hasta          ;Code10        ;TableRelation="Zona contrato"."Zona Precio" WHERE (Garaje=FIELD(Garaje),
                                                                                                      N§ Contrato=FIELD(N§ Contrato),
                                                                                                      Tipo contrato=CONST(Venta),
                                                                                                      Tipo Servicio fijo=FIELD(Tipo Servicio fijo));
                                                   OnValidate=BEGIN
                                                                IF "Zona hasta" <> xRec."Zona hasta" THEN BEGIN
                                                                  Activo := FALSE;
                                                                  IF xRec."Zona hasta" <> '' THEN
                                                                    rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                           Orden, FIELDCAPTION("Zona hasta"), xRec."Zona hasta", "Zona hasta");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Zona hasta;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Zona contrato }
    { 39  ;   ;Tipo Servicio       ;Code10        ;TableRelation="Tipo Servicio".Codigo;
                                                   OnValidate=VAR
                                                                lrTipSer@1100244000 : Record 7010319;
                                                              BEGIN
                                                                IF "Tipo Servicio" <> xRec."Tipo Servicio" THEN BEGIN
                                                                  Activo := FALSE;
                                                                  IF Orden <> 0 THEN
                                                                    rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Tipo Servicio"), xRec."Tipo Servicio",
                                                                                         "Tipo Servicio");

                                                                  IF NOT lrTipSer.GET("Tipo Servicio") THEN
                                                                    CLEAR(lrTipSer);
                                                                  "Tipo Servicio fijo" := lrTipSer."Tipo fijo";
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Tipo Servicio;
                                                   Description=FK Tipo Servicio }
    { 41  ;   ;Minimos Zona desde  ;Integer       ;OnValidate=BEGIN
                                                                IF "Minimos Zona desde" <> xRec."Minimos Zona desde" THEN BEGIN
                                                                  Activo := FALSE;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Minimos Zona desde"),
                                                                                         FORMAT(xRec."Minimos Zona desde"), FORMAT("Minimos Zona desde"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Minimos Zona desde }
    { 43  ;   ;Minimos Zona hasta  ;Integer       ;OnValidate=BEGIN
                                                                IF "Minimos Zona hasta" <> xRec."Minimos Zona hasta" THEN BEGIN
                                                                  Activo := FALSE;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Minimos Zona hasta"),
                                                                                         FORMAT(xRec."Minimos Zona hasta"), FORMAT("Minimos Zona hasta"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Minimos Zona hasta }
    { 45  ;   ;Minimos Zona        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Minimos Zona" <> xRec."Minimos Zona" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Minimos Zona"), FORMAT(xRec."Minimos Zona"),
                                                                                         FORMAT("Minimos Zona"));
                                                              END;

                                                   CaptionML=ESP=Minimos Zona }
    { 47  ;   ;Porcentaje          ;Boolean       ;OnValidate=BEGIN
                                                                IF Porcentaje <> xRec.Porcentaje THEN BEGIN
                                                                  VALIDATE("Cod. Divisa");
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION(Porcentaje), FORMAT(xRec.Porcentaje),
                                                                                         FORMAT(Porcentaje));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Porcentaje }
    { 49  ;   ;Tercera Zona        ;Code10        ;TableRelation="Zona contrato"."Zona Precio" WHERE (Garaje=FIELD(Garaje),
                                                                                                      N§ Contrato=FIELD(N§ Contrato),
                                                                                                      Tipo contrato=CONST(Venta));
                                                   OnValidate=BEGIN
                                                                IF "Tercera Zona" <> xRec."Tercera Zona" THEN BEGIN
                                                                  VALIDATE("Cod. Divisa");
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Tercera Zona"), FORMAT(xRec."Tercera Zona"),
                                                                                         FORMAT("Tercera Zona"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Tercera Zona;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Zona contrato }
    { 50  ;   ;Calcular Maletas    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Calcular Maletas" <> xRec."Calcular Maletas" THEN BEGIN
                                                                  VALIDATE("Cod. Divisa");
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Calcular Maletas"), FORMAT(xRec."Calcular Maletas"),
                                                                                         FORMAT("Calcular Maletas"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Calcular Maletas }
    { 51  ;   ;Concepto facturacion;Text30        ;CaptionML=ESP=Concepto facturacion }
    { 52  ;   ;Tipo Servicio fijo  ;Option        ;CaptionML=ESP=Tipo fijo;
                                                   OptionCaptionML=ESP=Excursion,Traslado;
                                                   OptionString=Excursion,Traslado;
                                                   Editable=No }
    { 53  ;   ;Orden Subordinado   ;Integer       ;CaptionML=ESP=Orden Subordinado;
                                                   Description=Campo para controlar los precios x elemento. Aqui se introduce el orden de linea que pertenecen }
    { 100 ;   ;Precio Adulto       ;Decimal       ;OnValidate=BEGIN
                                                                IF "Precio Adulto" <> xRec."Precio Adulto" THEN BEGIN
                                                                  IF "Precio Adulto" <> 0 THEN BEGIN
                                                                    IF ("Tipo precio"="Tipo precio"::"Precio Base") AND ("Tipo aplicacion" = "Tipo aplicacion"::Vehiculo) THEN
                                                                      ERROR(Text002,FIELDCAPTION("Precio Adulto"),FIELDCAPTION("Tipo aplicacion"),Text003);
                                                                  END;

                                                                  VALIDATE("Cod. Divisa");
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Precio Adulto"), FORMAT(xRec."Precio Adulto"), FORMAT("Precio Adulto"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Precio Adulto }
    { 101 ;   ;Precio Adulto (DL)  ;Decimal       ;CaptionML=ESP=Precio Adulto (DL);
                                                   Editable=No }
    { 102 ;   ;Precio Ni¤o         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Precio Ni¤o" <> xRec."Precio Ni¤o" THEN BEGIN
                                                                  IF "Precio Ni¤o" <> 0 THEN BEGIN
                                                                    IF ("Tipo precio"="Tipo precio"::"Precio Base") AND ("Tipo aplicacion" = "Tipo aplicacion"::Vehiculo) THEN
                                                                      ERROR(Text002,FIELDCAPTION("Precio Ni¤o"),FIELDCAPTION("Tipo aplicacion"), Text003);
                                                                  END;

                                                                  VALIDATE("Cod. Divisa");
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, "Tipo precio",
                                                                                         Orden, FIELDCAPTION("Precio Ni¤o"), FORMAT(xRec."Precio Ni¤o"), FORMAT("Precio Ni¤o"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Precio Ni¤o }
    { 103 ;   ;Precio Ni¤o (DL)    ;Decimal       ;CaptionML=ESP=Precio Ni¤o (DL);
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Garaje,N§ Contrato,Tipo precio,Orden    ;Clustered=Yes }
    {    ;Garaje,N§ Contrato,Tipo precio,Codigo servicio,Zona desde,Zona hasta,Fecha desde,Fecha hasta,Tipo Vehiculo,Rango desde,Rango hasta }
    {    ;Garaje,N§ Contrato,Tipo precio,Zona desde,Zona hasta,Codigo servicio }
    {    ;Garaje,N§ Contrato,Tipo precio,Orden Subordinado }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100244031 : TextConst 'ESP=CONF-CONTV';
      Text002@1103350000 : TextConst 'ESP=Para introducir %1 modifique el campo %2 a %3';
      Text003@1103350001 : TextConst 'ESP=Pax';
      Text004@1103350002 : TextConst 'ESP=Vehiculo';
      err1@1100244000 : TextConst 'ESP=La fecha hasta no puede ser anterior a la fecha desde';
      rConv@1100244001 : Record 7010403;
      err2@1100244002 : TextConst 'ESP=No existe el contrato %1 - %2';
      err3@1100244003 : TextConst 'ESP=La fecha desde esta fuera de los limites del contrato que son desde %1 hasta %2';
      err4@1100244004 : TextConst 'ESP=La fecha hasta esta fuera de los limites del contrato que son desde %1 hasta %2';
      err5@1100244005 : TextConst 'ESP=El rango hasta no puede ser menor que el rango desde';
      rConf@1100244006 : Record 98;
      rPar@1100244007 : Record 7010311;
      err6@1100244008 : TextConst 'ESP=El tipo de elemento debe corresponder con el codigo de  Adulto (%1) o de Ni¤o (%2)';
      rTipo@1100244009 : Record 330;
      err7@1100244010 : TextConst 'ESP=La fecha desde del precio se solapa con otro ya introducido';
      err8@1100244011 : TextConst 'ESP=La fecha hasta del precio se solapa con otro ya introducido';
      err9@1100244012 : TextConst 'ESP=El precio solapa completamente otro precio ya introducido';
      err10@1100244013 : TextConst 'ESP=No se puede dejar en blanco el Codigo de servicio en los precios base';
      err11@1100244014 : TextConst 'ESP=No se puede dejar en blanco la zona desde de precios en los precios base';
      mes1@1100244015 : TextConst 'ESP=Debe indicar un codigo de servicio en el precio';
      mes2@1100244016 : TextConst 'ESP=Debe indicar una zona desde en el precio';
      mes3@1100244017 : TextConst 'ESP=Debe indicar una fecha inicial al precio';
      mes4@1100244018 : TextConst 'ESP=Debe indicar una fecha final al precio';
      mes5@1100244019 : TextConst 'ESP=Debe indicar un rango inicial del precio';
      mes6@1100244020 : TextConst 'ESP=Debe indicar un rango final del precio';
      mes7@1100244021 : TextConst 'ESP=Debe indicar el importe del precio';
      rHist@1100244022 : Record 7010317;
      sw_error@1100244023 : Boolean;
      mes8@1100244024 : TextConst 'ESP=INSERTAR';
      mes9@1100244025 : TextConst 'ESP=BORRAR';
      mes10@1100244026 : TextConst 'ESP=Debe indicar un codigo de suplemento';
      mes11@1100244027 : TextConst 'ESP=Debe indicar un Tipo de servicio en los suplementos de zona o varios';
      zona_hasta_blanco@1100244028 : TextConst 'ESP=La zona hasta debe quedar en blanco en las excursiones';
      zona_hasta_no_blanco@1100244029 : TextConst 'ESP=La zona hasta debe no quedar en blanco en los traslados';
      lrCodSer@1100244030 : Record 7010320;
      rPre@1100253000 : Record 7010405;

    PROCEDURE comp_fechas@1() : Boolean;
    VAR
      sw_error@1100244000 : Boolean;
    BEGIN
      // comp_fechas
      //
      sw_error := FALSE;
      IF NOT rConv.GET(Garaje, "N§ Contrato") THEN BEGIN
        MESSAGE(err2, Garaje, "N§ Contrato");
        sw_error := TRUE;
      END;
      IF "Fecha desde" <> 0D THEN BEGIN
        IF ("Fecha desde" < rConv."Fecha inicio contrato") OR
           ("Fecha desde" > rConv."Fecha final contrato") THEN BEGIN
          MESSAGE(err3, rConv."Fecha inicio contrato", rConv."Fecha final contrato");
          sw_error := TRUE;
        END;
      END;
      IF "Fecha hasta" <> 0D THEN BEGIN
        IF ("Fecha hasta" < rConv."Fecha inicio contrato") OR
           ("Fecha hasta" > rConv."Fecha final contrato") THEN BEGIN
          MESSAGE(err4, rConv."Fecha inicio contrato", rConv."Fecha final contrato");
          sw_error := TRUE;
        END;
      END;
      IF ("Fecha hasta" <> 0D) AND ("Fecha desde" <> 0D) THEN BEGIN
        IF "Fecha hasta" < "Fecha desde" THEN BEGIN
          MESSAGE(err1);
          sw_error := TRUE;
        END;
      END;
      EXIT(sw_error);
    END;

    PROCEDURE comprobar_solape@2(FromActivar@1100244000 : Boolean) : Boolean;
    VAR
      rPre@1100244001 : Record 7010405;
      lrCodSer@1100244002 : Record 7010320;
      lrTipoSer@1100244003 : Record 7010319;
      cFunBas@1100244004 : Codeunit 7010310;
      vHayRest@1100244005 : Boolean;
    BEGIN
      // comprobar_solape
      //

      // RRT. Tratamiento de las restricciones.
      //
      vHayRest := cFunBas.TestRestriccion(Text001);
      IF vHayRest AND Activo AND (NOT FromActivar) THEN BEGIN
        Activo := FALSE;
        MODIFY;
      END;

      rPar.RESET;
      rPar.FINDFIRST;

      sw_error := FALSE;
      IF comp_fechas THEN
        sw_error := TRUE;

      IF "Tipo precio" = "Tipo precio"::"Precio Base" THEN BEGIN
        IF "Codigo servicio" = '' THEN BEGIN
          sw_error := TRUE;
          MESSAGE(mes1);
        END
        ELSE BEGIN
          lrCodSer.RESET;
          lrCodSer.GET("Codigo servicio");
        END;

        // ----  AJS 18.1.2002  ----
        // ----  Buscar el tipo de servicio para consultar el nuevo campo "Tipo fijo" para  ----
        // ----  saber si es una excursion o un traslado                                    ----

        lrTipoSer.RESET;
        IF lrTipoSer.GET(lrCodSer."Tipo servicio") THEN
          ;

      //  IF lrCodSer."Tipo servicio" = rPar."Codigo Tipo Excursiones" THEN BEGIN

        IF lrTipoSer."Tipo fijo" = lrTipoSer."Tipo fijo"::Excursion THEN BEGIN

        // ----  FIN AJS 18.1.2002  ----

          IF "Zona desde" = '' THEN BEGIN
            sw_error := TRUE;
            MESSAGE(mes2);
          END;
          IF "Zona hasta" <> '' THEN BEGIN
            sw_error := TRUE;
            MESSAGE(zona_hasta_blanco);
          END;
        END
        ELSE BEGIN
          IF "Zona desde" = '' THEN BEGIN
            sw_error := TRUE;
            MESSAGE(mes2);
          END;
          IF "Zona hasta" = '' THEN BEGIN
            sw_error := TRUE;
            MESSAGE(zona_hasta_no_blanco);
          END;
        END;
      END;

      IF "Tipo precio" = "Tipo precio"::"Suplemento elemento" THEN BEGIN
        IF "Codigo suplemento" = '' THEN BEGIN
          sw_error := TRUE;
          MESSAGE(mes10);
        END;
        IF NOT lrCodSer.GET("Codigo servicio") THEN
          CLEAR(lrCodSer);

        // ----  AJS 18.1.2002  ----
        // ----  Buscar el tipo de servicio para consultar el nuevo campo "Tipo fijo" para  ----
        // ----  saber si es una excursion o un traslado                                    ----

        lrTipoSer.RESET;
        IF lrTipoSer.GET(lrCodSer."Tipo servicio") THEN
          ;

      //  IF lrCodSer."Tipo servicio" = rPar."Codigo Tipo Excursiones" THEN BEGIN

        IF lrTipoSer."Tipo fijo" = lrTipoSer."Tipo fijo"::Excursion THEN BEGIN

        // ----  FIN AJS 18.1.2002  ----

          IF "Zona desde" = '' THEN BEGIN
            sw_error := TRUE;
            MESSAGE(mes2);
          END;
          IF "Zona hasta" <> '' THEN BEGIN
            sw_error := TRUE;
            MESSAGE(zona_hasta_blanco);
          END;
        END
        ELSE BEGIN
          IF "Zona desde" = '' THEN BEGIN
            sw_error := TRUE;
            MESSAGE(mes2);
          END;
          IF "Zona hasta" = '' THEN BEGIN
            sw_error := TRUE;
            MESSAGE(zona_hasta_no_blanco);
          END;
        END;
      END;

      IF "Tipo precio" = "Tipo precio"::"Suplemento zona" THEN BEGIN
        IF "Tipo Servicio" = '' THEN BEGIN
          sw_error := TRUE;
          MESSAGE(mes11);
        END;
        IF "Zona desde" = '' THEN BEGIN
          sw_error := TRUE;
          MESSAGE(mes2);
        END;
        IF "Zona hasta" = '' THEN BEGIN
          sw_error := TRUE;
          MESSAGE(zona_hasta_no_blanco);
        END;
      END;

      IF ("Tipo precio" = "Tipo precio"::"Suplemento vario") THEN BEGIN
        IF "Tipo Servicio" = '' THEN BEGIN
          sw_error := TRUE;
          MESSAGE(mes11);
        END;
      END;

      IF "Fecha desde" = 0D THEN BEGIN
        sw_error := TRUE;
        MESSAGE(mes3);
      END;

      IF "Fecha hasta" = 0D THEN BEGIN
        sw_error := TRUE;
        MESSAGE(mes4);
      END;

      IF sw_error THEN
        EXIT(TRUE);
      rPre.RESET;
      rPre.SETCURRENTKEY(Garaje,
                         "N§ Contrato",
                         "Tipo precio",
                         "Codigo servicio",
                         "Zona desde",
                         "Zona hasta",
                         "Fecha desde",
                         "Fecha hasta",
                         "Tipo Vehiculo",
                         "Rango desde",
                         "Rango hasta");
      // Solapamiento de la fecha de inicio del precio y si se solapa por fechas hay que comprobar
      // que se solapen los rangos de paxes
      //
      rPre.SETRANGE (Garaje             , Garaje);
      rPre.SETRANGE ("N§ Contrato"      , "N§ Contrato");
      rPre.SETRANGE ("Tipo precio"      , "Tipo precio");
      rPre.SETRANGE ("Tipo Servicio"    , "Tipo Servicio");
      rPre.SETRANGE ("Codigo servicio"  , "Codigo servicio");
      rPre.SETRANGE ("Zona desde"       , "Zona desde");
      rPre.SETRANGE ("Zona hasta"       , "Zona hasta");
      rPre.SETRANGE ("Tercera Zona"     , "Tercera Zona");
      rPre.SETRANGE ("Tipo Vehiculo"    , "Tipo Vehiculo");
      rPre.SETRANGE ("Tipo elemento"    , "Tipo elemento");
      rPre.SETRANGE ("Codigo suplemento", "Codigo suplemento");
      rPre.SETFILTER(Orden              , '<>%1', Orden);
      rPre.SETFILTER("Fecha desde"      , '<=%1', "Fecha desde");
      rPre.SETFILTER("Fecha hasta"      , '>=%1', "Fecha desde");
      rPre.SETRANGE (Activo             , TRUE);
      IF rPre.FINDFIRST THEN BEGIN
        rPre.SETFILTER("Rango desde", '<=%1', "Rango desde");
        rPre.SETFILTER("Rango hasta", '>=%1', "Rango desde");
        IF rPre.FINDFIRST THEN BEGIN
          MESSAGE(err7);
          sw_error := TRUE;
          EXIT(TRUE);
        END;
        rPre.SETFILTER("Rango desde", '<=%1', "Rango hasta");
        rPre.SETFILTER("Rango hasta", '>=%1', "Rango hasta");
        IF rPre.FINDFIRST THEN BEGIN
          MESSAGE(err7);
          sw_error := TRUE;
          EXIT(TRUE);
        END;
        rPre.SETFILTER("Rango desde", '>=%1', "Rango desde");
        rPre.SETFILTER("Rango hasta", '<=%1', "Rango hasta");
        IF rPre.FINDFIRST THEN BEGIN
          MESSAGE(err7);
          sw_error := TRUE;
          EXIT(TRUE);
        END;
      END;
      // Solapamiento de la fecha de final del precio y si se solapa por fechas hay que comprobar
      // que se solapen los rangos de paxes
      //
      rPre.SETFILTER("Fecha desde"    , '<=%1', "Fecha hasta");
      rPre.SETFILTER("Fecha hasta"    , '>=%1', "Fecha hasta");
      IF rPre.FINDFIRST THEN BEGIN
        rPre.SETFILTER("Rango desde", '<=%1', "Rango desde");
        rPre.SETFILTER("Rango hasta", '>=%1', "Rango desde");
        IF rPre.FINDFIRST THEN BEGIN
          MESSAGE(err8);
          sw_error := TRUE;
          EXIT(TRUE);
        END;
        rPre.SETFILTER("Rango desde", '<=%1', "Rango hasta");
        rPre.SETFILTER("Rango hasta", '>=%1', "Rango hasta");
        IF rPre.FINDFIRST THEN BEGIN
          MESSAGE(err8);
          sw_error := TRUE;
          EXIT(TRUE);
        END;
        rPre.SETFILTER("Rango desde", '>=%1', "Rango desde");
        rPre.SETFILTER("Rango hasta", '<=%1', "Rango hasta");
        IF rPre.FINDFIRST THEN BEGIN
          MESSAGE(err8);
          sw_error := TRUE;
          EXIT(TRUE);
        END;
      END;
      // Comprobar que el precio solape completamente otros ya introducidos, y si se solapa
      // por fechas hay que comprobar que se solapen los rangos de paxes
      //
      rPre.SETFILTER("Fecha desde"    , '>=%1', "Fecha desde");
      rPre.SETFILTER("Fecha hasta"    , '<=%1', "Fecha hasta");
      IF rPre.FINDFIRST THEN BEGIN
        rPre.SETFILTER("Rango desde", '<=%1', "Rango desde");
        rPre.SETFILTER("Rango hasta", '>=%1', "Rango desde");
        IF rPre.FINDFIRST THEN BEGIN
          MESSAGE(err9);
          sw_error := TRUE;
          EXIT(TRUE);
        END;
        rPre.SETFILTER("Rango desde", '<=%1', "Rango hasta");
        rPre.SETFILTER("Rango hasta", '>=%1', "Rango hasta");
        IF rPre.FINDFIRST THEN BEGIN
          MESSAGE(err9);
          sw_error := TRUE;
          EXIT(TRUE);
        END;
        rPre.SETFILTER("Rango desde", '>=%1', "Rango desde");
        rPre.SETFILTER("Rango hasta", '<=%1', "Rango hasta");
        IF rPre.FINDFIRST THEN BEGIN
          MESSAGE(err9);
          sw_error := TRUE;
          EXIT(TRUE);
        END;
      END;

      IF (NOT vHayRest) AND (NOT Activo) THEN BEGIN
        Activo := TRUE;
        MODIFY;
      END;

      EXIT(sw_error);
    END;

    PROCEDURE nom_garaje@3() : Text[30];
    VAR
      rGar@1100244000 : Record 7010310;
    BEGIN
      // nom_garaje
      //
      IF NOT rGar.GET(Garaje) THEN
        EXIT('')
      ELSE
        EXIT(rGar.Nombre);
    END;

    PROCEDURE nom_codigo@4() : Text[30];
    VAR
      rCodSer@1100244000 : Record 7010320;
    BEGIN
      // nom_codigo
      //
      IF NOT rCodSer.GET("Codigo servicio") THEN
        EXIT('')
      ELSE
        EXIT(rCodSer.Descripcion);
    END;

    PROCEDURE nom_grupo@5() : Text[30];
    VAR
      rGrup@1100244000 : Record 7010345;
    BEGIN
      // nom_grupo
      //
      IF NOT rGrup.GET("Tipo Vehiculo") THEN
        EXIT('')
      ELSE
        EXIT(rGrup.Descripcion);
    END;

    PROCEDURE nom_tiposervicio@7() : Text[30];
    VAR
      rTipo@1100244000 : Record 7010319;
    BEGIN
      // nom_tiposervicio
      //
      IF NOT rTipo.GET("Tipo Servicio") THEN
        EXIT('')
      ELSE
        EXIT(rTipo.Descripcion);
    END;

    PROCEDURE ClienteContrato@1100244000() : Code[20];
    BEGIN
      // ClienteContrato
      //
      IF rConv.GET(Garaje, "N§ Contrato") THEN
        EXIT(rConv.Cliente)
      ELSE
        EXIT('');
    END;

    PROCEDURE TouroperadorContrato@1100244001() : Code[10];
    BEGIN
      // TouroperadorContrato
      //
      IF rConv.GET(Garaje, "N§ Contrato") THEN
        EXIT(rConv.Touroperador)
      ELSE
        EXIT('');
    END;

    PROCEDURE Sincroniza@1100253000(pwBorra@1100253001 : Boolean);
    VAR
      lrSinCon@1100253000 : Record 7035388;
    BEGIN
      // Sincroniza

      CLEAR(lrSinCon);
      lrSinCon.CompruebaSinc(Garaje,"N§ Contrato");
      lrSinCon.SETRANGE("N§ Contrato","N§ Contrato");
      IF lrSinCon.FINDSET THEN BEGIN
        REPEAT
          lrSinCon.SincronizaPrecio(Rec, pwBorra);
        UNTIL lrSinCon.NEXT=0;
      END;
    END;

    BEGIN
    END.
  }
}
