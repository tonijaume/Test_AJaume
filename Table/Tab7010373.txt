OBJECT Table 7010373 Grupos
{
  OBJECT-PROPERTIES
  {
    Date=04/06/15;
    Time=[ 8:55:49];
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               rPar.FINDFIRST;
               rPar.TESTFIELD("Serie Grupos");
               IF ("Codigo Grupo"='') THEN
                 GestNoSerie.InitSeries(rPar."Serie Grupos", rPar."Serie Grupos",TODAY,
                                       "Codigo Grupo", rPar."Serie Grupos");

               "Fecha Recepcion" := WORKDATE;
             END;

    OnModify=BEGIN
               {IF Confirmado THEN BEGIN
                 rParte.RESET;
                 rParte.SETCURRENTKEY("Cod TPR");
                 rParte.SETRANGE("Cod TPR","Codigo TPR");
                 rParte.SETRANGE(Confirmado,TRUE);
                 IF rParte.FINDFIRST THEN
                   ERROR(Text003);
               END;}

               //BRM 27/05/04 Controlar la modificaci¢n de los grupos que tienen asociados servicios y partes
               rServicio.RESET;
               rServicio.SETCURRENTKEY("Cod Grupo");
               rServicio.SETRANGE("Cod Grupo","Codigo Grupo");
               IF rServicio.FINDSET THEN REPEAT
                 IF (Cliente <> rServicio.Cliente) OR (TTOO <> rServicio.Touroperador) OR
                    ("Fecha Llegada Prevista" > rServicio.Fecha) THEN
                    ERROR(Text007,rServicio."N§ Servicio","Codigo Grupo");
               UNTIL rServicio.NEXT=0;

               rParte.RESET;
               rParte.SETCURRENTKEY("Cod Grupo");
               rParte.SETRANGE("Cod Grupo","Codigo Grupo");
               IF rParte.FINDSET THEN REPEAT
                 IF (Cliente <> rParte.Cliente) OR (TTOO <> rParte."Touroperador principal") OR
                    ("Fecha Llegada Prevista" > rParte.Fecha) THEN
                    ERROR(Text005,rParte."N§ Parte","Codigo Grupo");
               UNTIL rParte.NEXT=0;

               "Usuario Modificacion" := USERID;
               "Fecha Ult. Modificacion" := WORKDATE;
               "Hora Ult. Modificacion" := TIME;
             END;

    OnDelete=BEGIN
               IF Confirmado THEN
                 ERROR(Text002);

               //Borramos Cod. TPR de Servicios, Partes y Servicios - Partes
               rServicio.RESET;
               rServicio.SETCURRENTKEY("Cod Grupo");
               rServicio.SETRANGE("Cod Grupo","Codigo Grupo");
               rServicio.MODIFYALL("Cod Grupo",'');

               rParte.RESET;
               rParte.SETCURRENTKEY("Cod Grupo");
               rParte.SETRANGE("Cod Grupo","Codigo Grupo");
               rParte.MODIFYALL("Cod Grupo",'');

               rHotGrupo.RESET;
               rHotGrupo.SETRANGE("Cod Grupo","Codigo Grupo");
               rHotGrupo.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text001);
             END;

    CaptionML=ESP=Grupos;
    LookupFormID=Form7010452;
  }
  FIELDS
  {
    { 1   ;   ;Codigo Grupo        ;Code20        ;CaptionML=ESP=Codigo Grupo;
                                                   Description=PK;
                                                   Editable=Yes }
    { 2   ;   ;Nombre              ;Text30        ;CaptionML=ESP=Nombre }
    { 3   ;   ;Adultos             ;Integer       ;OnValidate=BEGIN
                                                                GestComp;
                                                              END;

                                                   CaptionML=ESP=Adultos }
    { 4   ;   ;Ni¤os               ;Integer       ;OnValidate=BEGIN
                                                                GestComp;
                                                              END;

                                                   CaptionML=ESP=Ni¤os }
    { 5   ;   ;Fecha Recepcion     ;Date          ;CaptionML=ESP=Fecha Recepcion }
    { 6   ;   ;Cliente             ;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=BEGIN
                                                                IF Cliente <> xRec.Cliente THEN
                                                                  TTOO := '';
                                                              END;

                                                   CaptionML=ESP=Cliente;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Customer }
    { 7   ;   ;TTOO                ;Code10        ;TableRelation=Cliente/TTOO.TTOO WHERE (Cliente=FIELD(Cliente));
                                                   CaptionML=ESP=TTOO;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Cliente/TTOO }
    { 8   ;   ;Tipo Facturacion    ;Option        ;CaptionML=ESP=Tipo Facturacion;
                                                   OptionCaptionML=ESP=Manual,Tarifa;
                                                   OptionString=Manual,Tarifa;
                                                   Description=Manual,Tarifa }
    { 9   ;   ;Confirmado          ;Boolean       ;OnValidate=BEGIN
                                                                IF Confirmado THEN
                                                                BEGIN
                                                                  "Fecha Confirmacion" := WORKDATE;
                                                                  "Usuario Confirmacion" := USERID;
                                                                  GeneraServicios;
                                                                END
                                                                ELSE
                                                                BEGIN
                                                                  IF NOT BorrarServicios THEN
                                                                    Confirmado :=xRec.Confirmado;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Confirmado;
                                                   Editable=No }
    { 10  ;   ;Fecha Confirmacion  ;Date          ;CaptionML=ESP=Fecha Confirmacion;
                                                   Editable=No }
    { 11  ;   ;Usuario Modificacion;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=ESP=Usuario Modificacion;
                                                   Description=FK User;
                                                   Editable=No }
    { 12  ;   ;Fecha Ult. Modificacion;Date       ;CaptionML=ESP=Fecha Ult. Modificacion;
                                                   Editable=No }
    { 13  ;   ;Hora Ult. Modificacion;Time        ;CaptionML=ESP=Hora Ult. Modificacion;
                                                   Editable=No }
    { 14  ;   ;Usuario Confirmacion;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=ESP=Usuario Confirmacion;
                                                   Description=FK User }
    { 15  ;   ;Fecha Llegada Prevista;Date        ;OnValidate=BEGIN
                                                                CompruebaFechas;
                                                              END;

                                                   CaptionML=ESP=Fecha Llegada Prevista }
    { 16  ;   ;Importe             ;Decimal       ;CaptionML=ESP=Importe;
                                                   Editable=No }
    { 17  ;   ;Fecha Factura       ;Date          ;OnValidate=BEGIN
                                                                ValidarFechaFactura;
                                                              END;

                                                   CaptionML=ESP=Fecha Factura }
    { 18  ;   ;Facturado           ;Boolean       ;CaptionML=ESP=Facturado;
                                                   Editable=No }
    { 19  ;   ;N§ Factura          ;Code20        ;CaptionML=ESP=N§ Factura;
                                                   Editable=No }
    { 20  ;   ;Tipo Impresion Factura;Option      ;CaptionML=ESP=Tipo Impresion Factura;
                                                   OptionCaptionML=ESP=Sin resumen,Resumen x Codigo,Resumen x Zona,Resumen x Vuelo,Resumen x Dia-Codigo,Resumen x Zona-Detalle,Resumen x Zona Dia-Codigo,Texto alternativo,Resumen x Referencia;
                                                   OptionString=Sin resumen,Resumen x Codigo,Resumen x Zona,Resumen x Vuelo,Resumen x Dia-Codigo,Resumen x Zona-Detalle,Resumen x Zona Dia-Codigo,Texto alternativo,Resumen x Referencia }
    { 21  ;   ;Texto Registro Factura;Text90      ;CaptionML=ESP=Texto Registro Factura }
    { 22  ;   ;Separar Factura por Tipo Flota;Boolean;
                                                   CaptionML=ESP=Separar Factura por Tipo Flota }
    { 23  ;   ;Fecha Salida Prevista;Date         ;OnValidate=BEGIN
                                                                CompruebaFechas;
                                                              END;

                                                   CaptionML=ESP=Fecha Salida Prevista }
    { 50  ;   ;Referencia          ;Text30        ;CaptionML=ESP=Referencia }
    { 60  ;   ;Texto Alternativo   ;Text250       ;CaptionML=ESP=Texto Alternativo;
                                                   Description=Texto Alternativo de la factura, }
    { 70  ;   ;Peticion Servicio Cliente;Text100  ;OnValidate=VAR
                                                                lwExt@1100253000 : Code[10];
                                                              BEGIN
                                                                IF "Peticion Servicio Cliente" <> '' THEN BEGIN
                                                                  IF NOT EXISTS("Peticion Servicio Cliente") THEN
                                                                    ERROR(Text020,"Peticion Servicio Cliente");

                                                                  lwExt := COPYSTR("Peticion Servicio Cliente",STRLEN("Peticion Servicio Cliente")-2);
                                                                  IF NOT  (lwExt IN [Text50000,Text50001]) THEN
                                                                    ERROR(Text021,lwExt);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              "Peticion Servicio Cliente":= cFunBas.GetDocumento("Peticion Servicio Cliente",Text022 , FIELDCAPTION("Peticion Servicio Cliente")
                                                              );
                                                            END;

                                                   CaptionML=ESP=Peticion Servicio Cliente;
                                                   Description=Documento de petici¢n de servicio }
  }
  KEYS
  {
    {    ;Codigo Grupo                            ;Clustered=Yes }
    {    ;Cliente,TTOO                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text50000@1103355000 : TextConst 'ESP=DOC';
      Text50001@1103355001 : TextConst 'ESP=PDF';
      rPar@1100244000 : Record 7010311;
      rServicio@1100244004 : Record 7010358;
      rParte@1100244006 : Record 7010360;
      rHotGrupo@1100244008 : Record 7010374;
      GestNoSerie@1100244001 : Codeunit 396;
      Text001@1100244002 : TextConst 'ESP=No se pueden renombrar Grupos.';
      Text002@1100244003 : TextConst 'ESP=No se pueden borrar Grupos que han sido confirmados.';
      Text003@1100244007 : TextConst 'ESP=No puede modificar un Grupo cuyos partes han sido confirmados.';
      Text004@1100244009 : TextConst 'ESP=Fecha Llegada prevista debe ser posterior a Fecha Recepcion.';
      Text005@1100244010 : TextConst 'ESP=Los datos del Parte %1 no coincide con los datos del Grupo %2.';
      cFunBas@1100253006 : Codeunit 7010310;
      rPreFact@1100244011 : Record 7010415;
      Text006@1100244012 : TextConst 'ESP=Debe introducir una fecha Factura posterior a %1';
      Text007@1100244013 : TextConst 'ESP=Los datos del Servicio %1 no coincide con los datos del Grupo %2.';
      Text008@1103350000 : TextConst 'ESP=%1 no puede ser superior a %2';
      Text009@1103350001 : TextConst 'ESP=Existen Itinerarios fuera de los rangos de fecha indicados';
      wVentana@1103350002 : Dialog;
      Text010@1103350003 : TextConst 'ESP=Creando Servicios';
      Text011@1103350004 : TextConst 'ESP=El Grupo %1 Tiene partes relacionados, ¨Desea eliminarlos a todos?';
      Text012@1103350005 : TextConst 'ESP=No puede desconfirmar un grupo que tiene partes de trabajo asignados.';
      Text013@1103350006 : TextConst 'ESP=La l¡nea %1 No tiene pax asignado';
      Text014@1103350008 : TextConst 'ESP=La l¡nea %1 No tiene Vehiculo';
      Text015@1103350007 : TextConst 'ESP=Hay una linea sin punto de recogida';
      Text016@1100253000 : TextConst 'ESP="El itinerario %1 %2 %3  No tiene ning£n punto asignado "';
      Text017@1100253001 : TextConst 'ESP=La l¡nea %1 del Itinerario %2 %3%4 No tiene pax asignado';
      Text018@1100253002 : TextConst 'ESP=La l¡nea %1 del Itinerario %2 %3%4 No tiene Vehiculo';
      Text019@1100253003 : TextConst 'ESP=La l¡nea %1 del Itinerario %2 %3%4 No tiene Punto de Recogida';
      Text020@1100253005 : TextConst 'ESP=No se encuentra el documento\ %1';
      Text021@1100253004 : TextConst 'ESP=No estan permitidos archivos con extensi¢n %1';
      Text022@1100253007 : TextConst 'ESP="Word/PDF|*.DOC;*.PDF"';

    PROCEDURE ValidarFechaFactura@1100244000();
    BEGIN
      rPreFact.RESET;
      rPreFact.SETCURRENTKEY(Facturada,"Fecha Registro factura");
      rPreFact.SETRANGE(Facturada,TRUE);
      IF rPreFact.FINDLAST THEN BEGIN
        IF ("Fecha Factura" < rPreFact."Fecha Registro factura") THEN
          ERROR(Text006,rPreFact."Fecha Registro factura");
      END;
    END;

    PROCEDURE CompruebaFechas@1103350001();
    VAR
      lrIti@1103350000 : Record 7035381;
    BEGIN
      // CompruebaFechas

      IF ("Fecha Llegada Prevista" < "Fecha Recepcion") THEN
        ERROR(Text004);

      IF ("Fecha Llegada Prevista" > "Fecha Salida Prevista") AND ("Fecha Salida Prevista" <> 0D) THEN
        ERROR(Text008,FIELDCAPTION("Fecha Llegada Prevista"),FIELDCAPTION("Fecha Salida Prevista"));


      // Comprobamos que no existan itinerarios fuera de fechas
      CLEAR(lrIti);
      lrIti.SETRANGE("Cod Grupo", "Codigo Grupo");
      IF "Fecha Llegada Prevista" <> 0D THEN BEGIN
        lrIti.SETFILTER(Dia,'<%1',"Fecha Llegada Prevista");
        IF lrIti.FINDFIRST THEN
          ERROR(Text009);
      END;
      IF "Fecha Salida Prevista" <> 0D THEN BEGIN
        lrIti.SETFILTER(Dia,'>%1', "Fecha Salida Prevista");
        IF lrIti.FINDFIRST THEN
          ERROR(Text009);
      END;
    END;

    PROCEDURE GestComp@1103350000();
    VAR
      lrComp@1103350002 : Record 7035380;
      lwTotalPax@1103350000 : Integer;
      lwTotalComp@1103350001 : Integer;
    BEGIN
      // GestComp
      // Gestiona los componentes del grupo a partir de los campos "Adultos" y "Ni¤os"

      lwTotalPax := Adultos + Ni¤os;


      CLEAR(lrComp);
      lrComp.SETRANGE("Cod Grupo","Codigo Grupo");
      IF lrComp.FINDFIRST THEN
         lwTotalComp := lrComp.COUNT;

      CLEAR(lrComp);  // Se le a¤aden componentes
      IF lwTotalPax > lwTotalComp THEN BEGIN
        lrComp."Cod Grupo" := "Codigo Grupo";
        REPEAT
          lrComp.INSERT(TRUE);
          lwTotalComp +=1;
        UNTIL lwTotalPax = lwTotalComp;
      END
      ELSE
        IF lwTotalPax < lwTotalComp THEN BEGIN
          CLEAR(lrComp); // Se le restan componentes
          lrComp.SETRANGE("Cod Grupo","Codigo Grupo");
          IF lrComp.FINDLAST THEN BEGIN // Empezamos por atras para evitar desordenes
            REPEAT
              lrComp.DELETE(TRUE);
              lwTotalComp -=1;
            UNTIL (lwTotalPax = lwTotalComp) OR (lrComp.NEXT(-1)=0);
          END;
        END;
    END;

    PROCEDURE NombreResponsable@1103350002() : Text[100];
    VAR
      lrComp@1103350000 : Record 7035380;
    BEGIN
      // NombreResponsable
      // Devuelve el nombre del responsable

      CLEAR(lrComp);
      lrComp.SETRANGE("Cod Grupo","Codigo Grupo");
      lrComp.SETRANGE(Responsable, TRUE);
      IF lrComp.FINDFIRST THEN
        EXIT(STRSUBSTNO('%1, %2',lrComp.Apellidos,lrComp.Nombre));
    END;

    PROCEDURE GeneraServicios@1103350003();
    VAR
      lrIti@1103350000 : Record 7035381;
      lrServ@1103350001 : Record 7010358;
      lrSerPar@1103350002 : Record 7010359;
      lrCodSer@1103350005 : Record 7010320;
      lrTipSer@1103350006 : Record 7010319;
      lrHotG@1103350007 : Record 7010374;
      lrVuelLin@1103355001 : Record 7035397;
      lrVuelLin2@1103355000 : Record 7035397;
      lwCont@1103350004 : Integer;
      lwTotal@1103350003 : Integer;
    BEGIN
      // GeneraServicios
      // Genera Servicios automaticamente a partir de la tabla de Itinerarios

      CLEAR(lrIti);
      TESTFIELD("Codigo Grupo");

      lrIti.SETRANGE("Cod Grupo", "Codigo Grupo");
      // En primer lugar repasamos que todos los datos estn rellenados
      // Tanto en la ficha de grupo
      TESTFIELD(Cliente);
      TESTFIELD(TTOO);
      // Como en los itinerarios
      IF lrIti.FINDSET THEN BEGIN
        REPEAT
          lrIti.TESTFIELD(Garaje);
          lrIti.TESTFIELD(Dia);
          lrIti.TESTFIELD("Codigo Servicio");
          lrIti.TESTFIELD("Hora Inicio");
          // Solo es necesario rellenar Origen/Destino cuando sea Transfer
          lrCodSer.GET(lrIti."Codigo Servicio");
          lrTipSer.GET(lrCodSer."Tipo servicio");
          IF lrTipSer."Tipo fijo" = lrTipSer."Tipo fijo"::Traslado THEN
            lrIti.TESTFIELD("Origen/Destino");
          // Que el itinerario tengo alg£n punto
          CLEAR(lrHotG);
          lrHotG.SETRANGE("Cod Grupo"     , lrIti."Cod Grupo");
          lrHotG.SETRANGE("N§ Itinerario" , lrIti."No Linea");
          IF lrHotG.FINDSET THEN  BEGIN
            REPEAT
              IF lrHotG."Punto Recogida" = '' THEN
                ERROR(Text019, lrHotG."Punto Recogida", lrIti."No Linea",lrIti.Dia, lrIti."Codigo Servicio");
              IF lrHotG."Adultos Transportados" + lrHotG."Ni¤os Transportados"=0 THEN
                ERROR(Text017, lrHotG."Punto Recogida", lrIti."No Linea",lrIti.Dia, lrIti."Codigo Servicio");
              IF lrHotG.Vehiculo = '' THEN
                ERROR(Text018, lrHotG."Punto Recogida", lrIti."No Linea",lrIti.Dia, lrIti."Codigo Servicio");
            UNTIL lrHotG.NEXT=0;
          END
          ELSE
            ERROR(Text016, lrIti."No Linea", lrIti.Dia, lrIti."Codigo Servicio");
        UNTIL lrIti.NEXT=0;
      END;
      // Como en las lineas de hoteles x Grupo
      CLEAR(lrHotG);
      lrHotG.SETRANGE("Cod Grupo","Codigo Grupo");
      IF lrHotG.FINDSET THEN BEGIN
        REPEAT
          lrHotG.TESTFIELD("Punto Recogida");
          IF lrHotG."Adultos Transportados" + lrHotG."Ni¤os Transportados"=0 THEN
            ERROR(Text013, lrHotG."Punto Recogida");
          IF lrHotG.Vehiculo = '' THEN
            ERROR(Text014, lrHotG."Punto Recogida");
        UNTIL lrHotG.NEXT=0;
      END;

      IF lrIti.FINDSET(TRUE) THEN BEGIN
        wVentana.OPEN(Text010 + '\@1@@@@@@@@@@@');
        lwTotal := lrIti.COUNT;
        CLEAR(lwCont);
        REPEAT
          CLEAR(lrServ);
          lrServ.INSERT(TRUE);
          lrServ.VALIDATE(Garaje            , lrIti.Garaje);
          lrServ.VALIDATE(Fecha             , lrIti.Dia);
          lrServ.VALIDATE(Cliente           , Cliente);
          lrServ.VALIDATE("Codigo Servicio" , lrIti."Codigo Servicio");
          //lrServ.VALIDATE(Letreros
          lrServ.VALIDATE("Origen/Destino"  , lrIti."Origen/Destino");
          lrServ.VALIDATE(Touroperador      , TTOO);
          lrServ.VALIDATE(Presentacion      , lrIti.Presentacion);
          lrServ.VALIDATE("Hora inicio"     , lrIti."Hora Inicio");
          // lrServ.VALIDATE(Guia
          //lrServ."VALIDATE(Hora Final"
          lrServ.VALIDATE(Referencia   , Referencia);
          lrServ.VALIDATE(Vuelos       , lrIti.Vuelos);
          lrServ.VALIDATE("Hora Vuelo" , lrIti."Hora 1er Vuelo");
          lrServ.VALIDATE(Observaciones, lrIti.Observaciones);

          lrServ."Cod Grupo":= "Codigo Grupo";
          // No validamos el campo "Cod Grupo" ya que genera un error al no encontrar el grupo confirmado
          lrServ.Intro_Hoteles(lrIti."No Linea");
          CreaPartesServ(lrServ);

          lrServ.MODIFY(TRUE);

          lrIti.Servicio := lrServ."N§ Servicio";
          lrIti.MODIFY;

          // Pasamos los vuelos JPT 09/02/07
          CLEAR(lrSerPar);
          lrSerPar.SETRANGE("N§ Servicio", lrServ."N§ Servicio");
          IF lrSerPar.FINDSET THEN BEGIN
            REPEAT
              CLEAR(lrVuelLin);
              lrVuelLin.SETCURRENTKEY("N§ Servicio", "N§ Linea");
              lrVuelLin.SETRANGE(Tipo, lrVuelLin.Tipo::Grupo);
              lrVuelLin.SETRANGE("N§ Servicio", lrIti."Cod Grupo");
              lrVuelLin.SETRANGE("N§ Linea"   , lrIti."No Linea");
              IF lrVuelLin.FINDSET(TRUE) THEN BEGIN
                REPEAT
                  lrVuelLin2              := lrVuelLin;
                  lrVuelLin2.Tipo         := lrVuelLin2.Tipo::Servicio;
                  lrVuelLin2."N§ Servicio":= lrSerPar."N§ Servicio";
                  lrVuelLin2."N§ Linea"   := lrSerPar."N§ Linea";
                  lrVuelLin2.Parte        := lrSerPar."N§ Parte";
                  lrVuelLin2.TTOO         := lrSerPar.Touroperador;
                  lrVuelLin2.INSERT(TRUE);
                UNTIL lrVuelLin.NEXT=0;
              END;
            UNTIL lrSerPar.NEXT=0;
          END;

          lwCont+=1;
          wVentana.UPDATE(1,ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrIti.NEXT=0;
        wVentana.CLOSE;
      END;

      // Le pasamos el campo "Peticion Servicio Cliente" a los partes
      CLEAR(rParte);
      rParte.SETRANGE("Cod Grupo", "Codigo Grupo");
      IF rParte.FINDFIRST THEN
        rParte.MODIFYALL("Peticion Servicio Cliente", "Peticion Servicio Cliente");
    END;

    PROCEDURE BorrarServicios@1103350007() : Boolean;
    VAR
      lrIti@1103350001 : Record 7035381;
      lrServ@1103350000 : Record 7010358;
      lrSerPar@1103350002 : Record 7010359;
      lrSerPar2@1103350003 : Record 7010359;
      lrParte@1103350004 : Record 7010360;
      lrParte2@1103355000 : Record 7010360;
      lwTieneItn@1103350005 : Boolean;
    BEGIN
      // BorrarServicios
      // Borra todos los servicios relacionados con los itinerarios

      CLEAR(lrIti);
      CLEAR(lrParte);
      TESTFIELD("Codigo Grupo");

      lrIti.SETRANGE("Cod Grupo", "Codigo Grupo");
      lwTieneItn := lrIti.FINDFIRST;

      // Primero borramos todos los partes Sean Manuales o no. Pero solo si tiene itinerario
      lrParte.SETCURRENTKEY("Cod Grupo");
      lrParte.SETRANGE("Cod Grupo","Codigo Grupo");
      IF lrParte.FINDSET THEN BEGIN
        IF lwTieneItn THEN
        BEGIN
          IF NOT CONFIRM(Text011, FALSE ,"Codigo Grupo") THEN
            EXIT(FALSE);
          REPEAT
            lrParte2 := lrParte;
            lrParte2.SetBol(3, TRUE); // Para no provocar backup
            lrParte2.DELETE(TRUE);
          UNTIL lrParte.NEXT=0;
        END
        ELSE BEGIN // Si no tiene itinerarios no dejamos desconfirmar
          ERROR(Text012);
        END;
      END;

      IF lwTieneItn THEN
      BEGIN
        REPEAT
          IF lrIti.Servicio <> '' THEN
          BEGIN
            IF lrServ.GET(lrIti.Servicio) THEN
            BEGIN
              lrSerPar.RESET;
              lrSerPar.SETRANGE ("N§ Servicio", lrIti.Servicio);
              IF lrSerPar.FINDSET(TRUE) THEN
              BEGIN
                REPEAT
                  IF lrSerPar."N§ Parte" <> '' THEN
                  BEGIN
                    IF lrParte.GET(lrSerPar."N§ Parte") THEN BEGIN
                      lrParte.SetBol(3, TRUE); // Para no provocar backup
                      lrParte.DELETE(TRUE);
                    END;
                  END;

                  lrSerPar2 := lrSerPar;
                  lrSerPar2.DELETE(TRUE);
                UNTIL lrSerPar.NEXT = 0;
              END;

              lrServ.DELETE(TRUE);
            END;
          END;
          lrIti.Servicio :='';
          lrIti.MODIFY;
        UNTIL lrIti.NEXT=0;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CreaPartesServ@1103350004(prServ@1103350000 : Record 7010358);
    VAR
      lrSerPar@1103350001 : Record 7010359;
      lrSerPar2@1103350004 : Record 7010359;
      lrCond@1103350002 : Record 7010420;
      lrParte@1103350005 : Record 7010360;
      lwVehiculo@1103350003 : Code[10];
    BEGIN
      // CreaPartesServ
      rPar.FINDFIRST;

      // AJF 07/01/09
      // Evito borrar el registro, ya que ahora tiene datos permanentes.
      IF lrCond.GET(USERID) THEN
        lrCond.LimpiaRegistro
      ELSE BEGIN
        lrCond.INIT;
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      lrCond.Guia := prServ.Guia;
      lrCond.MODIFY;

      // ----  Crear el registro de parte a partir de la informacion de la ficha de servicio  ----

      // Insertamos parte nuevo por cada linea que tenga vehiculo distinto
      CLEAR(lrSerPar);
      lrSerPar.SETCURRENTKEY(Vehiculo);
      lrSerPar.SETRANGE("N§ Servicio", prServ."N§ Servicio");
      IF lrSerPar.FINDSET(TRUE) THEN BEGIN
        CLEAR(lwVehiculo);
        REPEAT
          IF (lwVehiculo <> lrSerPar.Vehiculo) THEN BEGIN
            lwVehiculo := lrSerPar.Vehiculo;
            lrSerPar2.COPY(lrSerPar);
            lrSerPar2.SETRANGE(Vehiculo, lwVehiculo);
            prServ.CrearParte(lrSerPar2, lrCond, lrParte);
          END;
        UNTIL lrSerPar.NEXT=0;
      END;
    END;

    BEGIN
    END.
  }
}
