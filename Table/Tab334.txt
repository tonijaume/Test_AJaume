OBJECT Table 334 Column Layout
{
  OBJECT-PROPERTIES
  {
    Date=18/10/12;
    Time=11:39:44;
    Modified=Yes;
    Version List=AIC2009,NAVW16.00;
  }
  PROPERTIES
  {
    OnModify=VAR
               rLinEsqCta@1103355000 : Record 85;
             BEGIN

               IF "Column No." <> xRec."Column No." THEN BEGIN
                 rPlantillaCeldas.SETRANGE("Nombre plantilla columnas", "Column Layout Name");
                 rPlantillaCeldas.SETRANGE("N§ Columna", "Line No.");
                 IF rPlantillaCeldas.FIND('-') THEN
                   REPEAT
                     rLinEsqCta.GET(rPlantillaCeldas."Nombre esq. cuentas", rPlantillaCeldas."N§ Fila");
                     rPlantillaCeldas."Nombre celda" := rLinEsqCta."Row No." + ':' + "Column No.";

                     rPlantillaCeldas.MODIFY;
                   UNTIL rPlantillaCeldas.NEXT = 0;
               END;
             END;

    OnDelete=BEGIN
               rPlantillaCeldas.SETRANGE("Nombre plantilla columnas", "Column Layout Name");
               rPlantillaCeldas.SETRANGE("N§ Columna", "Line No.");
               IF rPlantillaCeldas.FIND('-') THEN BEGIN
                 IF NOT CONFIRM(Text7000100, FALSE, rPlantillaCeldas.TABLECAPTION, TABLECAPTION) THEN
                   ERROR(Text7000101);
                 rPlantillaCeldas.DELETEALL;
               END;
             END;

    CaptionML=[ENU=Column Layout;
               ESP=Plantilla columna];
  }
  FIELDS
  {
    { 1   ;   ;Column Layout Name  ;Code10        ;TableRelation="Column Layout Name";
                                                   CaptionML=[ENU=Column Layout Name;
                                                              ESP=Nombre plantilla columna] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 3   ;   ;Column No.          ;Code10        ;CaptionML=[ENU=Column No.;
                                                              ESP=N§ columna] }
    { 4   ;   ;Column Header       ;Text30        ;CaptionML=[ENU=Column Header;
                                                              ESP=Cabecera columna] }
    { 5   ;   ;Column Type         ;Option        ;InitValue=Net Change;
                                                   CaptionML=[ENU=Column Type;
                                                              ESP=Tipo columna];
                                                   OptionCaptionML=[ENU=Formula,Net Change,Balance at Date,Beginning Balance,Year to Date,Rest of Fiscal Year,Entire Fiscal Year;
                                                                    ESP=F¢rmula,Saldo periodo,Saldo a la fecha,Saldo inicial,Hasta la fecha,Resto del ejercicio,Ejercicio completo];
                                                   OptionString=Formula,Net Change,Balance at Date,Beginning Balance,Year to Date,Rest of Fiscal Year,Entire Fiscal Year }
    { 6   ;   ;Ledger Entry Type   ;Option        ;CaptionML=[ENU=Acc. Mov. Type;
                                                              ESP=Tipo mov. cont.];
                                                   OptionCaptionML=[ENU=G/L Entries,G/L Budget Entries,,,,,Analytic Data;
                                                                    ESP=Movs. contabilidad,Movs. ppto. contabilidad,,,,,Dato anal¡tico];
                                                   OptionString=G/L Entries,G/L Budget Entries,,,,,Analytic Data }
    { 7   ;   ;Amount Type         ;Option        ;CaptionML=[ENU=Amount Type;
                                                              ESP=Tipo importe];
                                                   OptionCaptionML=[ENU=Net Amount,Debit Amount,Credit Amount;
                                                                    ESP=Saldo,Debe,Haber];
                                                   OptionString=Net Amount,Debit Amount,Credit Amount }
    { 8   ;   ;Formula             ;Code80        ;OnValidate=BEGIN
                                                                AccSchedLine.CheckFormula(Formula);
                                                              END;

                                                   CaptionML=[ENU=Formula;
                                                              ESP=F¢rmula] }
    { 9   ;   ;Comparison Date Formula;DateFormula;OnValidate=BEGIN
                                                                IF FORMAT("Comparison Date Formula") <> '' THEN
                                                                  VALIDATE("Comparison Period Formula",'');
                                                              END;

                                                   CaptionML=[ENU=Comparison Date Formula;
                                                              ESP=F¢rmula fecha comparaci¢n] }
    { 10  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=[ENU=Show Opposite Sign;
                                                              ESP=Muestra signo opuesto] }
    { 11  ;   ;Show                ;Option        ;InitValue=Always;
                                                   CaptionML=[ENU=Show;
                                                              ESP=Muestra];
                                                   OptionCaptionML=[ENU=Always,Never,When Positive,When Negative;
                                                                    ESP=Siempre,Nunca,Si es positivo,Si es negativo];
                                                   OptionString=Always,Never,When Positive,When Negative;
                                                   NotBlank=Yes }
    { 12  ;   ;Rounding Factor     ;Option        ;CaptionML=[ENU=Rounding Factor;
                                                              ESP=Factor redondeo];
                                                   OptionCaptionML=[ENU=None,1,1000,1000000;
                                                                    ESP=No,1,1000,1000000];
                                                   OptionString=None,1,1000,1000000 }
    { 14  ;   ;Comparison Period Formula;Code20   ;OnValidate=VAR
                                                                Steps@1001 : Integer;
                                                                Type@1000 : ' ,Period,Fiscal year,Fiscal Halfyear,Fiscal Quarter';
                                                                RangeFromType@1007 : 'Int,CP,LP';
                                                                RangeToType@1006 : 'Int,CP,LP';
                                                                RangeFromInt@1005 : Integer;
                                                                RangeToInt@1004 : Integer;
                                                              BEGIN
                                                                ParsePeriodFormula(
                                                                  "Comparison Period Formula",
                                                                  Steps,Type,RangeFromType,RangeToType,RangeFromInt,RangeToInt);
                                                                IF "Comparison Period Formula" <> '' THEN
                                                                  CLEAR("Comparison Date Formula");
                                                              END;

                                                   CaptionML=[ENU=Comparison Period Formula;
                                                              ESP=F¢rmula de periodo comparativo] }
    { 15  ;   ;Business Unit Totaling;Text80      ;TableRelation="Business Unit";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Business Unit Totaling;
                                                              ESP=Total empresa] }
    { 16  ;   ;Dimension 1 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 1 Totaling;
                                                              ESP=Total dimensi¢n 1];
                                                   CaptionClass=GetCaptionClass(5) }
    { 17  ;   ;Dimension 2 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 2 Totaling;
                                                              ESP=Total dimensi¢n 2];
                                                   CaptionClass=GetCaptionClass(6) }
    { 18  ;   ;Dimension 3 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 3 Totaling;
                                                              ESP=Total dimensi¢n 3];
                                                   CaptionClass=GetCaptionClass(7) }
    { 19  ;   ;Dimension 4 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 4 Totaling;
                                                              ESP=Total dimensi¢n 4];
                                                   CaptionClass=GetCaptionClass(8) }
    { 7000101;;Columna excel       ;Code10        ;CaptionML=[ENU=Excel column;
                                                              ESP=Columna excel] }
  }
  KEYS
  {
    {    ;Column Layout Name,Line No.             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AccSchedLine@1000 : TEMPORARY Record 85;
      Text001@1003 : TextConst 'ENU=%1 is not a valid Period Formula;ESP=%1 no es una f¢rmula periodo v lida';
      Text002@1002 : TextConst 'ENU=P;ESP=P';
      Text003@1001 : TextConst 'ENU=FY;ESP=FY';
      Text004@1005 : TextConst 'ENU=CP;ESP=CP';
      Text005@1004 : TextConst 'ENU=LP;ESP=LP';
      Text006@1014 : TextConst 'ENU=1,6,,Dimension 1 Filter;ESP=1,6,,Filtro dimensi¢n 1';
      Text007@1013 : TextConst 'ENU=1,6,,Dimension 2 Filter;ESP=1,6,,Filtro dimensi¢n 2';
      Text008@1012 : TextConst 'ENU=1,6,,Dimension 3 Filter;ESP=1,6,,Filtro dimensi¢n 3';
      Text009@1011 : TextConst 'ENU=1,6,,Dimension 4 Filter;ESP=1,6,,Filtro dimensi¢n 4';
      Text010@1010 : TextConst 'ENU=,, Totaling;ESP=,, Totales';
      Text011@1009 : TextConst 'ENU=1,5,,Dimension 1 Totaling;ESP=1,5,,Total dimensi¢n 1';
      Text012@1008 : TextConst 'ENU=1,5,,Dimension 2 Totaling;ESP=1,5,,Total dimensi¢n 2';
      Text013@1007 : TextConst 'ENU=1,5,,Dimension 3 Totaling;ESP=1,5,,Total dimensi¢n 3';
      Text014@1006 : TextConst 'ENU=1,5,,Dimension 4 Totaling;ESP=1,5,,Total dimensi¢n 4';
      Text015@1015 : TextConst 'ENU=The %1 refers to %2 %3, which does not exist. The field %4 on table %5 has now been deleted.;ESP=El %1 se refiere a %2 %3, que no existe. El campo %4 en la tabla %5 ha sido borrado.';
      ColumnLayoutName@1016 : Record 333;
      AnalysisView@1017 : Record 363;
      GLSetup@1018 : Record 98;
      HasGLSetup@1019 : Boolean;
      Text7000100@1103355001 : TextConst 'ENU=There are %1 related to this %2. If you go on with the erasure, these %1 will be deleted. Continue?;ESP=Existen %1 asociadas a esta %2. Si continuar con el borrado se eliminar n dichas %1. ¨Continuar?';
      Text7000101@1103355000 : TextConst 'ENU=Action cancelled by the user;ESP=Acci¢n cancelada por el usuario.';
      rPlantillaCeldas@1103355002 : Record 7009728;

    PROCEDURE ParsePeriodFormula@26(Formula@1002 : Code[20];VAR Steps@1001 : Integer;VAR Type@1006 : ' ,Period,Fiscal Year';VAR RangeFromType@1009 : 'Int,CP,LP';VAR RangeToType@1008 : 'Int,CP,LP';VAR RangeFromInt@1003 : Integer;VAR RangeToInt@1000 : Integer);
    VAR
      OriginalFormula@1004 : Code[20];
    BEGIN
      // <PeriodFormula> ::= <signed integer> <formula> | blank
      // <signed integer> ::= <sign> <positive integer> | blank
      // <sign> ::= + | - | blank
      // <positive integer> ::= <digit 1-9> <digits>
      // <digit 1-9> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
      // <digits> ::= 0 <digits> | <digit 1-9> <digits> | blank
      // <formula> ::= P | FY <range> | FH <range> | FQ <range>
      // <range> ::= blank | [<range2>]
      // <range2> ::= <index> .. <index> | <index>
      // <index> ::= <positive integer> | CP | LP

      OriginalFormula := Formula;
      Formula := DELCHR(Formula);

      IF NOT ParseFormula(Formula,Steps,Type) THEN
        ERROR(Text001,OriginalFormula);

      IF Type = Type::"Fiscal Year" THEN
        IF NOT ParseRange(Formula,RangeFromType,RangeFromInt,RangeToType,RangeToInt) THEN
          ERROR(Text001,OriginalFormula);

      IF Formula <> '' THEN
        ERROR(Text001,OriginalFormula);
    END;

    LOCAL PROCEDURE ParseFormula@5(VAR Formula@1002 : Code[20];VAR Steps@1001 : Integer;VAR Type@1006 : ' ,Period,Fiscal year,Fiscal Halfyear,Fiscal Quarter') : Boolean;
    BEGIN
      Steps := 0;
      Type := Type::" ";

      IF Formula = '' THEN
        EXIT(TRUE);

      IF NOT ParseSignedInteger(Formula,Steps) THEN
        EXIT(FALSE);

      IF Formula = '' THEN
        EXIT(FALSE);

      IF NOT ParseType(Formula,Type) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseSignedInteger@1(VAR Formula@1000 : Code[20];VAR Int@1001 : Integer) : Boolean;
    BEGIN
      Int := 0;

      CASE COPYSTR(Formula,1,1) OF
        '-':
          BEGIN
            Formula := COPYSTR(Formula,2);
            IF NOT ParseInt(Formula,Int,FALSE) THEN
              EXIT(FALSE);
            Int := -Int;
          END;
        '+':
          BEGIN
            Formula := COPYSTR(Formula,2);
            IF NOT ParseInt(Formula,Int,FALSE) THEN
              EXIT(FALSE);
          END;
        ELSE
          BEGIN
            IF NOT ParseInt(Formula,Int,TRUE) THEN
              EXIT(FALSE);
          END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseInt@2(VAR Formula@1001 : Code[20];VAR Int@1000 : Integer;AllowNotInt@1003 : Boolean) : Boolean;
    VAR
      IntegerStr@1002 : Code[20];
    BEGIN
      IF COPYSTR(Formula,1,1) IN ['1'..'9'] THEN
        REPEAT
          IntegerStr := IntegerStr + COPYSTR(Formula,1,1);
          Formula := COPYSTR(Formula,2);
          IF Formula = '' THEN
            EXIT(FALSE);
        UNTIL NOT (COPYSTR(Formula,1,1) IN ['0'..'9'])
      ELSE
        EXIT(AllowNotInt);
      EVALUATE(Int,IntegerStr);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseType@3(VAR Formula@1001 : Code[20];VAR Type@1000 : ' ,Period,Fiscal Year') : Boolean;
    BEGIN
      CASE ReadToken(Formula) OF
        Text002:
          Type := Type::Period;
        Text003:
          Type := Type::"Fiscal Year";
        ELSE
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseRange@6(VAR Formula@1002 : Code[20];VAR FromType@1001 : 'Int,CP,LP';VAR FromInt@1004 : Integer;VAR ToType@1006 : 'Int,CP,LP';VAR ToInt@1005 : Integer) : Boolean;
    BEGIN
      FromType := FromType::CP;
      ToType := ToType::CP;

      IF Formula = '' THEN
        EXIT(TRUE);

      IF NOT ParseToken(Formula,'[') THEN
        EXIT(FALSE);

      IF NOT ParseIndex(Formula,FromType,FromInt) THEN
        EXIT(FALSE);
      IF Formula = '' THEN
        EXIT(FALSE);

      IF COPYSTR(Formula,1,1) = '.' THEN BEGIN
        IF NOT ParseToken(Formula,'..') THEN
          EXIT(FALSE);
        IF NOT ParseIndex(Formula,ToType,ToInt) THEN
          EXIT(FALSE);
      END ELSE BEGIN
        ToType := FromType;
        ToInt := FromInt;
      END;

      IF NOT ParseToken(Formula,']') THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseIndex@11(VAR Formula@1002 : Code[20];VAR IndexType@1001 : 'Int,CP,LP';VAR Index@1004 : Integer) : Boolean;
    BEGIN
      IF Formula = '' THEN
        EXIT(FALSE);

      IF ParseInt(Formula,Index,FALSE) THEN
        IndexType := IndexType::Int
      ELSE
        CASE ReadToken(Formula) OF
          Text004:
            IndexType := IndexType::CP;
          Text005:
            IndexType := IndexType::LP;
          ELSE
            EXIT(FALSE);
        END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseToken@13(VAR Formula@1000 : Code[20];Token@1001 : Code[20]) : Boolean;
    BEGIN
      IF COPYSTR(Formula,1,STRLEN(Token)) <> Token THEN
        EXIT(FALSE);
      Formula := COPYSTR(Formula,STRLEN(Token) + 1);
      EXIT(TRUE)
    END;

    LOCAL PROCEDURE ReadToken@7(VAR Formula@1000 : Code[20]) : Code[20];
    VAR
      Token@1001 : Code[20];
      p@1002 : Integer;
    BEGIN
      FOR p := 1 TO STRLEN(Formula) DO BEGIN
        IF COPYSTR(Formula,p,1) IN ['[',']','.'] THEN BEGIN
          Formula := COPYSTR(Formula,STRLEN(Token) + 1);
          EXIT(Token);
        END;
        Token := Token + COPYSTR(Formula,p,1);
      END;

      Formula := '';
      EXIT(Token);
    END;

    PROCEDURE LookUpDimFilter@57(DimNo@1000 : Integer;VAR Text@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Form 560;
    BEGIN
      GetColLayoutSetup;
      CASE DimNo OF
        1: DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 1 Code");
        2: DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 2 Code");
        3: DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 3 Code");
        4: DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 4 Code");
      END;
      DimValList.LOOKUPMODE(TRUE);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := Text + DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE)
    END;

    PROCEDURE GetCaptionClass@4(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      GetColLayoutSetup;
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 1 Code")
            ELSE
              EXIT(Text006);
          END;
        2:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 2 Code")
            ELSE
              EXIT(Text007);
          END;
        3:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 3 Code")
            ELSE
              EXIT(Text008);
          END;
        4:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 4 Code")
            ELSE
              EXIT(Text009);
          END;
        5:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 1 Code" + Text010)
            ELSE
              EXIT(Text011);
          END;
        6:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 2 Code" + Text010)
            ELSE
              EXIT(Text012);
          END;
        7:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 3 Code" + Text010)
            ELSE
              EXIT(Text013);
          END;
        8:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,5,' + AnalysisView."Dimension 4 Code" + Text010)
            ELSE
              EXIT(Text014);
          END;
      END;
    END;

    LOCAL PROCEDURE GetColLayoutSetup@8();
    BEGIN
      IF "Column Layout Name" <> ColumnLayoutName.Name THEN
        ColumnLayoutName.GET("Column Layout Name");
      IF ColumnLayoutName."Analysis View Name" <> '' THEN BEGIN
        IF ColumnLayoutName."Analysis View Name" <> AnalysisView.Code THEN
          IF NOT AnalysisView.GET(ColumnLayoutName."Analysis View Name") THEN BEGIN
            MESSAGE(
              Text015,
              ColumnLayoutName.TABLECAPTION,AnalysisView.TABLECAPTION,ColumnLayoutName."Analysis View Name",
              ColumnLayoutName.FIELDCAPTION("Analysis View Name"),ColumnLayoutName.TABLECAPTION);
            ColumnLayoutName."Analysis View Name" := '';
            ColumnLayoutName.MODIFY;
          END;
      END;

      IF ColumnLayoutName."Analysis View Name" = '' THEN BEGIN
        IF NOT HasGLSetup THEN BEGIN
          GLSetup.GET;
          HasGLSetup := TRUE;
        END;
        CLEAR(AnalysisView);
        AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
        AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
      END;
    END;

    BEGIN
    END.
  }
}
