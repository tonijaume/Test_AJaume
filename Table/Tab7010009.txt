OBJECT Table 7010009 Transfer - Soporte agrupacion
{
  OBJECT-PROPERTIES
  {
    Date=11/06/14;
    Time=12:22:08;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lrTrSop@1100253000 : Record 7010009;
             BEGIN
               _CheckServicio;

               "ID Soporte" := 1;

               CLEAR(lrTrSop);
               lrTrSop.SETRANGE(Agrupacion, Agrupacion);
               IF lrTrSop.FINDLAST THEN
                 "ID Soporte" += lrTrSop."ID Soporte";

               "Usuario Creacion" := USERID;
               "Fecha Creacion"   := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               _CheckServicio;

               "Usuario Modificacion" := USERID;
               "Fecha Modificacion"   := CURRENTDATETIME;
             END;

    OnDelete=BEGIN
               _CheckServicio;

               _BorraRegistrosRelacionados;
             END;

    LookupFormID=Form7009879;
    DrillDownFormID=Form7009879;
  }
  FIELDS
  {
    { 20  ;   ;Agrupacion          ;Integer       ;TableRelation=Agrupacion."N§ Agrupacion";
                                                   CaptionML=[ENU=Service ID;
                                                              ESP=Agrupacion];
                                                   NotBlank=Yes }
    { 30  ;   ;ID Soporte          ;Integer       ;CaptionML=[ENU=Support ID;
                                                              ESP=ID Soporte];
                                                   Editable=No }
    { 40  ;   ;Transportista       ;Code20        ;TableRelation="Transportista transfer".Codigo;
                                                   OnValidate=BEGIN
                                                                CheckProveedor("Num. Contrato", TRUE);
                                                              END;

                                                   CaptionML=[ENU=Carrier;
                                                              ESP=Transportista] }
    { 50  ;   ;Direccion           ;Option        ;OnValidate=BEGIN
                                                                _CheckPersonasDuplicadas;
                                                              END;

                                                   CaptionML=[ENU=Direction;
                                                              ESP=Direcci¢n];
                                                   OptionCaptionML=[ENU=Pick-Up,Return;
                                                                    ESP=Recogida,Retorno];
                                                   OptionString=Recogida,Retorno }
    { 60  ;   ;Tipo Vehiculo       ;Code10        ;TableRelation="Tipo transporte".Codigo;
                                                   CaptionML=[ENU=Vehicle Type;
                                                              ESP=Tipo Vehiculo] }
    { 70  ;   ;Numero Bus          ;Code10        ;CaptionML=[ENU=Bus Number;
                                                              ESP=Numero Bus] }
    { 75  ;   ;Capacidad vehiculo  ;Integer       ;CaptionML=[ENU=Vehicle capacity requested;
                                                              ESP=Capacidad vehiculo solicitada] }
    { 80  ;   ;Punto de Encuentro  ;Text30        ;CaptionML=[ENU=Meeting Point;
                                                              ESP=Punto de Encuentro] }
    { 90  ;   ;Coste               ;Decimal       ;CaptionML=[ENU=Cost;
                                                              ESP=Coste];
                                                   Editable=No }
    { 100 ;   ;Cod. Divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=Cod. Divisa];
                                                   Editable=No }
    { 110 ;   ;Usuario Creacion    ;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU=Creation User;
                                                              ESP=Usuario Creaci¢n];
                                                   Editable=No }
    { 120 ;   ;Fecha Creacion      ;DateTime      ;CaptionML=[ENU=Creation Time;
                                                              ESP=Fecha Creaci¢n];
                                                   Editable=No }
    { 130 ;   ;Usuario Modificacion;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU=Last Modified User;
                                                              ESP=Usuario Modificaci¢n];
                                                   Editable=No }
    { 140 ;   ;Fecha Modificacion  ;DateTime      ;CaptionML=[ENU=Last Modified Time;
                                                              ESP=Fecha Modificaci¢n];
                                                   Editable=No }
    { 150 ;   ;Reservas            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Transfer - Persona x soporte" WHERE (Agrupacion=FIELD(Agrupacion),
                                                                                                           Id Soporte=FIELD(ID Soporte)));
                                                   CaptionML=[ENU=Reservations;
                                                              ESP=Reservas];
                                                   Editable=No }
    { 155 ;   ;Num. Contrato       ;Code10        ;TableRelation="Contrato compra transfer"."N§ Contrato compra";
                                                   CaptionML=[ENU=Contract Number;
                                                              ESP=Num. Contrato] }
    { 160 ;   ;Adultos             ;Decimal       ;CaptionML=[ENU=Adults;
                                                              ESP=Adultos];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 165 ;   ;Ni¤os               ;Decimal       ;CaptionML=[ENU=Childs;
                                                              ESP=Ni¤os];
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 170 ;   ;Pasajeros           ;Decimal       ;CaptionML=[ENU=Passengers;
                                                              ESP=Pasajeros];
                                                   DecimalPlaces=0:0 }
    { 172 ;   ;Zona origen precios ;Code10        ;TableRelation="Zona fisica"."Zona Fisica";
                                                   OnValidate=BEGIN
                                                                _CheckZona;
                                                              END;

                                                   CaptionML=[ENU=Origin prices Zone;
                                                              ESP=Zona origen precios] }
  }
  KEYS
  {
    {    ;Agrupacion,ID Soporte                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100253000 : TextConst 'ENU=Service %1 is in %2  Status;ESP=El servicio %1 est  en estado %2';
      Text003@1100253001 : TextConst 'ENU=Reservation %1 for %2 of service %3 already exists;ESP=Ya existe la reserva %1 para %2 del servicio %3';
      Text004@1100253002 : TextConst 'ENU=There is no contract for %1 in %2 linked to point %3;ESP=No existe ning£n contrato para %1 en %2 referente al punto %3';
      Text005@1100217000 : TextConst 'ENU=The zone %1 is undefined in the contract %2.;ESP=La zona %1 no est  definida en el contrato %2.';

    LOCAL PROCEDURE _CheckServicio@1100253000();
    VAR
      lrServ@1100253000 : Record 7009796;
      lwMod@1100253001 : Boolean;
    BEGIN
      // _CheckServicio
      // Comprobamos que el servicio no est‚ Confirmado

      CLEAR(lrServ);
      IF lrServ.GET(Agrupacion) THEN
      BEGIN
        IF lrServ.Estado IN [lrServ.Estado::Confirmado] THEN
          ERROR(Text001, lrServ."N§ Agrupacion", lrServ.Estado);
      END;
    END;

    LOCAL PROCEDURE _BorraRegistrosRelacionados@1100253001();
    VAR
      lrPers@1100253001 : Record 7010010;
      lrZona@1100253000 : Record 7010215;
    BEGIN
      // _BorraRegistrosRelacionados

      lrPers.RESET;
      lrPers.SETRANGE(Agrupacion  , Agrupacion);
      lrPers.SETRANGE("Id Soporte", "ID Soporte");
      IF NOT lrPers.ISEMPTY THEN
        lrPers.DELETEALL;

      //CLEAR(lrZona);
      //lrZona.SETRANGE(Delegacion   , Delegacion);
      //lrZona.SETRANGE(Agrupacion, Agrupacion);
      //lrZona.SETRANGE("ID Soporte" , "ID Soporte");
      //IF NOT lrZona.ISEMPTY THEN
      //  lrZona.DELETEALL;
    END;

    PROCEDURE CheckProveedor@1100253002(VAR pwContrato@1100217000 : Code[10];pwMostrarError@1100217001 : Boolean) lwEncontrado : Boolean;
    VAR
      lrCntC@1100253000 : Record 7009787;
      lrServ@1100253001 : Record 7009796;
    BEGIN
      // CheckProveedor

      IF Transportista = '' THEN
        EXIT;

      //. Buscamos el servicio para determinar la fecha
      lrServ.RESET;
      lrServ.GET(Agrupacion);

      lwEncontrado := FALSE;

      //. Nos aseguramos de que exista el contrato
      lrCntC.RESET;
      lrCntC.SETRANGE (Transportista          , Transportista);
      //-$002lrCntC.SETRANGE ("OLD_Punto Origen/Destino" , lrServ."Origen/Destino transfer");
      lrCntC.SETFILTER("Fecha inicio contrato", '<=%1' , lrServ.Fecha);
      lrCntC.SETFILTER("Fecha final contrato" , '>=%1' , lrServ.Fecha);
      lrCntC.SETRANGE (Confirmado             , TRUE);
      lwEncontrado := lrCntC.FINDFIRST;

      IF pwMostrarError AND NOT lwEncontrado THEN
        ERROR(Text004, Transportista, lrServ.Fecha, lrServ."Origen/Destino transfer");

      pwContrato := lrCntC."N§ Contrato compra";

      EXIT(lwEncontrado);
    END;

    LOCAL PROCEDURE _CheckPersonasDuplicadas@1100217006();
    VAR
      lrPers@1100217002 : Record 7010010;
      lrPers2@1100217001 : Record 7010010;
      lrSop@1100217000 : Record 7010009;
    BEGIN
      // _CheckPersonasDuplicadas
      //. Una reserva solo puede estar una vez por servicio y direcci¢n

      CLEAR(lrSop);

      lrPers.RESET;
      lrPers.SETRANGE(Agrupacion  , Agrupacion);
      lrPers.SETRANGE("Id Soporte", "ID Soporte");
      IF lrPers.FINDSET THEN
      BEGIN
        REPEAT
          lrPers2.RESET;
          lrPers2.SETRANGE(Agrupacion  , Agrupacion);
          lrPers2.SETRANGE("N§ Reserva", lrPers."N§ Reserva");
          IF lrPers2.FINDSET THEN
          BEGIN
            REPEAT
              IF lrPers.GETPOSITION <> lrPers2.GETPOSITION THEN // Que no sea el mismo registro
              BEGIN
                lrSop.GET(lrPers2.Agrupacion, lrPers2."Id Soporte");
                IF lrSop.Direccion = Direccion THEN
                  ERROR(Text003, lrPers."N§ Reserva", Direccion, Agrupacion);
              END;
            UNTIL lrPers.NEXT = 0;
          END;
        UNTIL lrPers.NEXT = 0;
      END;
    END;

    PROCEDURE AcumulaPersonas@1100217000();
    VAR
      lrPerSop@1100217000 : Record 7010010;
    BEGIN
      // AcumulaPersonas

      //. Se tiene que hacer el MODIFY fuera de esta funcion, solo rellenamos los campos

      Adultos   := 0;
      Ni¤os     := 0;
      Pasajeros := 0;

      //. Acumulamos las personas de las recogidas
      lrPerSop.RESET;
      lrPerSop.SETRANGE (Agrupacion  , Agrupacion);
      lrPerSop.SETRANGE ("Id Soporte", "ID Soporte");
      lrPerSop.SETFILTER("N§ Reserva", '<>%1', 0);
      IF lrPerSop.FINDSET THEN
      BEGIN
        REPEAT
          //. Acumulamos las personas por tipo de persona
          Adultos += lrPerSop.Adultos;
          Ni¤os += lrPerSop.Ni¤os;
        UNTIL lrPerSop.NEXT = 0;
        Pasajeros := Adultos + Ni¤os;
      END;
    END;

    LOCAL PROCEDURE _CheckZona@1100217001();
    VAR
      lrZonTra@1100217000 : Record 7009791;
    BEGIN
      // _CheckZona

      TESTFIELD("Num. Contrato");

      lrZonTra.RESET;
      lrZonTra.SETRANGE(Contrato       , "Num. Contrato");
      lrZonTra.SETRANGE("Tipo contrato", lrZonTra."Tipo contrato"::Compra);
      lrZonTra.SETRANGE("Zona fisica"  , "Zona origen precios");
      IF NOT lrZonTra.FINDFIRST THEN
        ERROR(Text005, "Zona origen precios", "Num. Contrato");
    END;

    BEGIN
    {
      AJS 05112013 CNT-OC-13018 Nueva tabla de servicios de soporte para transfer

      $001 AJS 25112013 Nueva funcion AcumulaPersonas para mantener la info de paxes de la cabecera del soporte

      $002 AJS 10062014 CNT-OC-14046, Los contratos dejar de ir por Aeropuerto, se pasa a los precios

      $003 AJS 11062014 CNT-OC-14046, Nuevo campo para indicar la zona origen de los precios de la ruta del soporte
    }
    END.
  }
}
