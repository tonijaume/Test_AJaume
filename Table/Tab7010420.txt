OBJECT Table 7010420 Usuario Transfer
{
  OBJECT-PROPERTIES
  {
    Date=12/05/15;
    Time=13:13:58;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRename=BEGIN
               MESSAGE(Text000);
             END;

    CaptionML=[ENU=Transfer user;
               ESP=Usuario Transfer];
  }
  FIELDS
  {
    { 1   ;   ;Usuario             ;Code20        ;CaptionML=ESP=Usuario;
                                                   Description=PK }
    { 3   ;   ;N§ Parte            ;Code10        ;TableRelation=Parte;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ESP=N§ Parte;
                                                   SQL Data Type=Varchar;
                                                   Description=FK N§ Parte }
    { 5   ;   ;Cliente             ;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=BEGIN
                                                                IF Cliente <> xRec.Cliente THEN BEGIN

                                                                  // ----  AJS 06.11.2001 Si el cliente que hemos seleccionado no esta relacionado con el  ----
                                                                  // ----  Touroperador dejo el campo Touroperador en blanco para obligar a rellenarlo     ----

                                                                  IF NOT rCliTo.GET(Cliente, Touroperador) THEN
                                                                    Touroperador := '';

                                                                  // ----  FIN AJS 06.11.2001  ----

                                                                  busca_tipo_factura;
                                                                  "Zonas Precio" := '';
                                                                END;
                                                                GetCondiciones(TRUE, TRUE);
                                                              END;

                                                   CaptionML=ESP=Cliente;
                                                   SQL Data Type=Varchar;
                                                   NotBlank=Yes;
                                                   Description=FK Cliente }
    { 7   ;   ;Touroperador        ;Code10        ;TableRelation=IF (Cliente=FILTER(='')) TTOO.Codigo
                                                                 ELSE IF (Cliente=FILTER(<>'')) Cliente/TTOO.TTOO WHERE (Cliente=FIELD(Cliente));
                                                   OnValidate=BEGIN
                                                                IF Touroperador <> xRec.Touroperador THEN BEGIN
                                                                  busca_tipo_factura;
                                                                  "Zonas Precio" := '';
                                                                END;
                                                                GetCondiciones(TRUE, TRUE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              CLEAR(rCliTo);
                                                              rCliTo.FILTERGROUP(2);
                                                              rCliTo.SETRANGE(Cliente, Cliente);
                                                              rCliTo.FILTERGROUP(0);
                                                              rCliTo.SETFILTER(Gestor,'%1|%2',USERID,'');
                                                              IF FORM.RUNMODAL(0,rCliTo) = ACTION::LookupOK THEN
                                                                VALIDATE(Touroperador,rCliTo.TTOO);
                                                            END;

                                                   CaptionML=ESP=Touroperador;
                                                   SQL Data Type=Varchar;
                                                   NotBlank=Yes;
                                                   Description=FK Cliente/TTOO }
    { 9   ;   ;Importe             ;Decimal       ;OnValidate=VAR
                                                                lrPC@1103355000 : Record 7035393;
                                                              BEGIN
                                                                // Buscar el importe pendiente de validar de la linea e indicar si el importe de validacion
                                                                // indicado es correcto
                                                                //
                                                                IF Operacion = Operacion::Validacion THEN BEGIN
                                                                  lrPC.RESET; lrPC.INIT;
                                                                  IF lrPC.GET("N§ Parte", "N§ Linea coste") THEN BEGIN
                                                                    lrPC.CALCFIELDS("Importe validado");
                                                                    IF Importe > (lrPC."Importe sin impuesto DL" - lrPC."Importe validado") THEN
                                                                      ERROR(err1);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Importe;
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 11  ;   ;Paxes               ;Decimal       ;OnValidate=VAR
                                                                lrPC@1103355000 : Record 7035393;
                                                              BEGIN
                                                                // Buscar los paxes pendientes de validar de la linea e indicar si los paxes de validacion
                                                                // indicados son correctos
                                                                //
                                                                IF Operacion = Operacion::Validacion THEN BEGIN
                                                                  lrPC.RESET; lrPC.INIT;
                                                                  IF lrPC.GET("N§ Parte", "N§ Linea coste") THEN BEGIN
                                                                    lrPC.CALCFIELDS("Paxes validados");
                                                                    IF Paxes > (lrPC."Pax Facturados" - lrPC."Paxes validados") THEN
                                                                      ERROR(err1);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Paxes;
                                                   DecimalPlaces=0:2;
                                                   MinValue=0 }
    { 13  ;   ;N§ Linea coste      ;Integer       ;CaptionML=ESP=N§ Linea coste }
    { 15  ;   ;Operacion           ;Option        ;CaptionML=ESP=Operacion;
                                                   OptionCaptionML=ESP=Validacion,Ajuste,Gasoil;
                                                   OptionString=Validacion,Ajuste,Gasoil }
    { 17  ;   ;Proveedor           ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ESP=Proveedor;
                                                   Description=FK Proveedor }
    { 19  ;   ;Fecha Factura       ;Date          ;CaptionML=ESP=Fecha Factura }
    { 21  ;   ;N§ Factura          ;Code20        ;CaptionML=ESP=N§ Factura }
    { 23  ;   ;Garaje              ;Code10        ;TableRelation=Garaje;
                                                   OnValidate=BEGIN
                                                                IF Garaje <> xRec.Garaje THEN BEGIN
                                                                  "Zonas Precio" := '';
                                                                END;
                                                                GetCondiciones(TRUE, TRUE);
                                                              END;

                                                   CaptionML=ESP=Garaje;
                                                   Description=FK Garaje }
    { 25  ;   ;Fecha desde         ;Date          ;OnValidate=BEGIN
                                                                IF "Fecha hasta" <> 0D THEN
                                                                BEGIN
                                                                  "Fecha hasta" := "Fecha desde";
                                                                  IF "Fecha hasta" < "Fecha desde" THEN
                                                                    ERROR(err3);
                                                                  "Zonas Precio" := '';
                                                                END;
                                                                IF Facturando THEN
                                                                  GetCondiciones(TRUE, TRUE);
                                                              END;

                                                   CaptionML=ESP=Fecha desde }
    { 27  ;   ;Fecha hasta         ;Date          ;OnValidate=BEGIN
                                                                IF "Fecha desde" <> 0D THEN
                                                                BEGIN
                                                                  IF "Fecha hasta" < "Fecha desde" THEN
                                                                    ERROR(err3);
                                                                  "Zonas Precio" := '';
                                                                END;
                                                                IF Facturando THEN
                                                                  GetCondiciones(TRUE, TRUE);
                                                              END;

                                                   CaptionML=ESP=Fecha hasta }
    { 29  ;   ;Tipos servicio      ;Code50        ;TableRelation="Tipo Servicio".Codigo;
                                                   OnValidate=BEGIN
                                                                busca_tipo_factura;
                                                              END;

                                                   OnLookup=VAR
                                                              lrCondFra@1100244000 : Record 7010416;
                                                            BEGIN
                                                              rTipSer.RESET; rTipSer.INIT;
                                                              IF FORM.RUNMODAL(7010336, rTipSer) = ACTION::LookupOK THEN BEGIN
                                                                IF STRPOS("Tipos servicio" , rTipSer.Codigo) = 0 THEN BEGIN
                                                                  IF "Tipos servicio" <> '' THEN
                                                                    VALIDATE("Tipos servicio", "Tipos servicio" + '|' + rTipSer.Codigo)
                                                                  ELSE
                                                                    VALIDATE("Tipos servicio", rTipSer.Codigo);
                                                                END;
                                                              END;

                                                              // Establecemos cual va a ser el tipo de servicio fijo
                                                              lrCondFra.RESET;
                                                              lrCondFra.SETCURRENTKEY(Cliente,TTOO,"Tipo Servicio");
                                                              lrCondFra.SETRANGE (Cliente        , Cliente);
                                                              lrCondFra.SETRANGE (TTOO           , Touroperador);
                                                              lrCondFra.SETFILTER("Tipo Servicio", "Tipos servicio");
                                                              IF NOT lrCondFra.FINDSET THEN BEGIN
                                                                "Tipo Servicio Fijo" := lrCondFra."Tipo Servicio Fijo";
                                                                REPEAT
                                                                  IF "Tipo Servicio Fijo" <> lrCondFra."Tipo Servicio Fijo" THEN
                                                                    "Tipo Servicio Fijo" := "Tipo Servicio Fijo"::Todos;
                                                                UNTIL (lrCondFra.NEXT=0) OR ("Tipo Servicio Fijo"= "Tipo Servicio Fijo"::Todos);
                                                              END;
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ESP=Tipos servicio }
    { 31  ;   ;Tipo factura        ;Option        ;CaptionML=ESP=Tipo factura;
                                                   OptionCaptionML=ESP=Sin resumen,Resumen x Codigo,Resumen x Zona,Resumen x Vuelo,Resumen x Dia-Codigo,Resumen x Zona-Detalle,Resumen x Zona Dia-Codigo,Texto alternativo,Resumen x Referencia;
                                                   OptionString=Sin resumen,Resumen x Codigo,Resumen x Zona,Resumen x Vuelo,Resumen x Dia-Codigo,Resumen x Zona-Detalle,Resumen x Zona Dia-Codigo,Texto alternativo,Resumen x Referencia }
    { 33  ;   ;N§ Prefactura       ;Code20        ;TableRelation="Prefactura ingreso"."N§ Prefactura";
                                                   CaptionML=ESP=N§ Prefactura;
                                                   Description=FK Prefactura ingreso }
    { 35  ;   ;Codigos Servicio    ;Code80        ;TableRelation="Codigo servicio";
                                                   OnLookup=VAR
                                                              itabcodser@1100244000 : Form 7010338;
                                                            BEGIN
                                                              rCodSer.RESET; rCodSer.INIT;
                                                              rCodSer.SETFILTER("Tipo servicio", "Tipos servicio");
                                                              CLEAR(itabcodser);
                                                              itabcodser.LOOKUPMODE(TRUE);
                                                              itabcodser.SETRECORD(rCodSer);
                                                              itabcodser.SETTABLEVIEW(rCodSer);
                                                              IF itabcodser.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                itabcodser.GETRECORD(rCodSer);
                                                                IF STRPOS("Codigos Servicio" , rCodSer.Codigo) = 0 THEN BEGIN
                                                                  IF "Codigos Servicio" <> '' THEN
                                                                    "Codigos Servicio" := "Codigos Servicio" + '|' + rCodSer.Codigo
                                                                  ELSE
                                                                    "Codigos Servicio" := rCodSer.Codigo;
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=ESP=Codigos Servicio }
    { 37  ;   ;Hora                ;Time          ;CaptionML=ESP=Hora }
    { 38  ;   ;Hora Hasta          ;Time          ;CaptionML=ESP=Hora Hasta }
    { 39  ;   ;Punto recogida      ;Code10        ;TableRelation="Punto de recogida".Codigo;
                                                   CaptionML=ESP=Punto recogida;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Punto de recogida }
    { 40  ;   ;Facturando          ;Boolean       ;CaptionML=ESP=Facturando }
    { 41  ;   ;Tipo servicio       ;Code10        ;TableRelation="Tipo Servicio";
                                                   CaptionML=ESP=Tipo servicio;
                                                   Description=FK Tipo Servicio }
    { 42  ;   ;Codigo servicio     ;Code10        ;TableRelation="Codigo servicio";
                                                   CaptionML=ESP=Codigo servicio;
                                                   Description=FK Codigo Servicio }
    { 43  ;   ;Facturar sobre marca;Boolean       ;CaptionML=ESP=Facturar sobre marca }
    { 45  ;   ;Tipo prefactura     ;Option        ;CaptionML=ESP=Tipo prefactura;
                                                   OptionCaptionML=ESP=Sin resumen,Resumen x Codigo,Resumen x Zona,Resumen x Vuelo,Resumen x Dia-Codigo,Resumen x Zona-Detalle,Resumen x Zona Dia-Codigo,Texto alternativo,Resumen x Referencia;
                                                   OptionString=Sin resumen,Resumen x Codigo,Resumen x Zona,Resumen x Vuelo,Resumen x Dia-Codigo,Resumen x Zona-Detalle,Resumen x Zona Dia-Codigo,Texto alternativo,Resumen x Referencia }
    { 46  ;   ;Cambio Registro Actividad;Boolean  ;CaptionML=ESP=Cambio Registro Actividad }
    { 47  ;   ;Fecha Registro Actividad;Date      ;CaptionML=ESP=Fecha Registro Actividad }
    { 49  ;   ;Texto alternativo   ;Text250       ;CaptionML=ESP=Texto alternativo }
    { 50  ;   ;C¢d. Divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   CaptionML=ESP=C¢d. Divisa }
    { 51  ;   ;Orden conductores   ;Option        ;CaptionML=ESP=Orden conductores;
                                                   OptionCaptionML=ESP=Garaje+Nombre,Garaje+Tipo Acuerdo+Nombre,Garaje+Tipo Acuerdo+Antiguedad+Nombre,Garaje+Grupo+Tipo Acuerdo+Antiguedad+Nombre;
                                                   OptionString=Garaje+Nombre,Garaje+Tipo Acuerdo+Nombre,Garaje+Tipo Acuerdo+Antiguedad+Nombre,Garaje+Grupo+Tipo Acuerdo+Antiguedad+Nombre;
                                                   Description=Usado en el asistente grafico conductores }
    { 52  ;   ;Refrescar Grafico   ;Boolean       ;InitValue=No;
                                                   CaptionML=ESP=Refrescar Grafico;
                                                   Description=Usado en el asistente grafico conductores }
    { 53  ;   ;Factor Divisa       ;Decimal       ;CaptionML=ESP=Factor Divisa }
    { 55  ;   ;Garaje Grafico      ;Code10        ;TableRelation=Garaje;
                                                   CaptionML=ESP=Garaje Grafico;
                                                   Description=Usado en el asistente grafico conductores }
    { 56  ;   ;Tipo Acuerdo Grafico;Code10        ;CaptionML=ESP=Tipo Acuerdo Grafico;
                                                   Description=Usado en el asistente grafico conductores }
    { 57  ;   ;Fecha IATA          ;Date          ;CaptionML=ESP=Fecha IATA;
                                                   Description=Usado en la emision hoja IATA desde la ficha del parte. }
    { 58  ;   ;Codigo Servicio IATA;Code10        ;CaptionML=ESP=Codigo Servicio IATA;
                                                   Description=Usado en la emision hoja IATA desde la ficha del parte. }
    { 59  ;   ;Tipos Vehiculo      ;Code50        ;OnLookup=VAR
                                                              lrTipoVehiculo@1100244000 : Record 7010345;
                                                              lfTablaVehiculo@1100244001 : Form 7010371;
                                                            BEGIN
                                                              lrTipoVehiculo.RESET;
                                                              lfTablaVehiculo.LOOKUPMODE(TRUE);
                                                              IF lfTablaVehiculo.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                lfTablaVehiculo.GETRECORD(lrTipoVehiculo);
                                                                IF STRPOS("Tipos Vehiculo" , lrTipoVehiculo.Codigo) = 0 THEN BEGIN
                                                                  IF "Tipos Vehiculo" = '' THEN
                                                                    "Tipos Vehiculo" := lrTipoVehiculo.Codigo
                                                                  ELSE
                                                                    "Tipos Vehiculo" := "Tipos Vehiculo" + '|'+lrTipoVehiculo.Codigo;
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=ESP=Tipos Vehiculo }
    { 60  ;   ;Texto Registro      ;Text90        ;CaptionML=ESP=Texto Registro }
    { 61  ;   ;Zonas Precio        ;Code90        ;OnLookup=VAR
                                                              lrCon@1100244000 : Record 7010403;
                                                              lrZonCont@1100244001 : Record 7010404;
                                                              lwZona@1100244002 : Code[10];
                                                              lfTablaZonaContrato@1100244003 : Form 7010419;
                                                            BEGIN
                                                              // Busca el contrato que le corresponde
                                                              // Da error si encuentra mas de un contrato con las caracteristcas asignadas y otro si no encuentra ninguno

                                                              // Busca contrato
                                                              lrCon.RESET; lrCon.INIT;
                                                              lrCon.SETCURRENTKEY(Cliente,
                                                                                  Touroperador,
                                                                                  "Fecha inicio contrato",
                                                                                  "Fecha final contrato");
                                                              lrCon.SETRANGE (Garaje                 , Garaje );
                                                              lrCon.SETRANGE (Cliente                , Cliente);
                                                              lrCon.SETRANGE (Touroperador           , Touroperador);
                                                              lrCon.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha hasta");
                                                              lrCon.SETFILTER("Fecha final contrato" , '>=%1', "Fecha desde");
                                                              lrCon.SETRANGE (Confirmado             , TRUE);
                                                              IF lrCon.FINDFIRST THEN BEGIN
                                                                IF lrCon.COUNT>1 THEN  // Error si hay m s de un contrato
                                                                  ERROR(err5);
                                                              END
                                                              ELSE
                                                                ERROR(err4);  // Error si no hay ning£n contrato

                                                              // Busca las zonas del contrato

                                                              lrZonCont.RESET;
                                                              lrZonCont.CLEARMARKS;
                                                              lrZonCont.FILTERGROUP(2);
                                                              lrZonCont.SETRANGE (Garaje , Garaje);
                                                              lrZonCont.SETRANGE ("N§ Contrato", lrCon."N§ Contrato");
                                                              lrZonCont.SETRANGE ("Tipo contrato" , lrZonCont."Tipo contrato"::Venta);

                                                              lwZona := '';
                                                              IF lrZonCont.FINDSET THEN BEGIN
                                                                REPEAT
                                                                  IF lwZona <> lrZonCont."Zona Precio" THEN BEGIN
                                                                    lrZonCont.MARK(TRUE);
                                                                    lwZona := lrZonCont."Zona Precio";
                                                                  END;
                                                                UNTIL lrZonCont.NEXT = 0;
                                                              END ELSE
                                                                ERROR(err6); // error si no se encuentra ninguna zona de precios

                                                              lrZonCont.MARKEDONLY(TRUE);

                                                              lrZonCont.FILTERGROUP(0);
                                                              // Muestra la ventana de dialogo

                                                              lfTablaZonaContrato.OcultaColumnas;
                                                              lfTablaZonaContrato.EDITABLE(FALSE);
                                                              lfTablaZonaContrato.LOOKUPMODE(TRUE);
                                                              lfTablaZonaContrato.SETTABLEVIEW(lrZonCont);
                                                              IF lfTablaZonaContrato.RUNMODAL = ACTION::LookupOK  THEN BEGIN
                                                                lfTablaZonaContrato.GETRECORD(lrZonCont);
                                                                IF STRPOS("Zonas Precio" , lrZonCont."Zona Precio") = 0 THEN BEGIN
                                                                  IF "Zonas Precio" = '' THEN
                                                                   "Zonas Precio" := lrZonCont."Zona Precio"
                                                                  ELSE
                                                                   "Zonas Precio" := "Zonas Precio" + '|' + lrZonCont."Zona Precio";
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=ESP=Zonas Precio }
    { 62  ;   ;N§ factura agencia  ;Code20        ;CaptionML=ESP=N§ factura agencia;
                                                   Description=UEX }
    { 63  ;   ;Fecha desde destino ;Date          ;OnValidate=BEGIN
                                                                IF "Fecha hasta destino" <> 0D THEN
                                                                  IF "Fecha hasta destino" < "Fecha desde destino" THEN
                                                                    ERROR(err3);
                                                              END;

                                                   CaptionML=ESP=Fecha desde destino }
    { 65  ;   ;Fecha hasta destino ;Date          ;OnValidate=BEGIN
                                                                IF "Fecha desde destino" <> 0D THEN
                                                                  IF "Fecha hasta destino" < "Fecha desde destino" THEN
                                                                    ERROR(err3);
                                                              END;

                                                   CaptionML=ESP=Fecha hasta destino }
    { 66  ;   ;Tipo acuerdo        ;Code10        ;TableRelation="Tipo Acuerdo Conductor"."Tipo Acuerdo";
                                                   OnValidate=BEGIN
                                                                IF "Tipo acuerdo" <> '' THEN
                                                                  IF Conductor <> '' THEN
                                                                    ERROR(no_tipoacuerdo_conductor);
                                                              END;

                                                   CaptionML=ESP=Tipo acuerdo;
                                                   Description=FK Tipo acuerdo }
    { 67  ;   ;Conductor           ;Code10        ;TableRelation=Conductor.Conductor;
                                                   OnValidate=BEGIN
                                                                IF Conductor <> '' THEN
                                                                  IF "Tipo acuerdo" <> '' THEN
                                                                    ERROR(no_tipoacuerdo_conductor);
                                                              END;

                                                   CaptionML=ESP=Conductor;
                                                   Description=FK Conductor }
    { 68  ;   ;Tipo acuerdo destino;Code10        ;TableRelation="Tipo Acuerdo Conductor"."Tipo Acuerdo";
                                                   CaptionML=ESP=Tipo acuerdo destino;
                                                   Description=FK Tipo acuerdo }
    { 69  ;   ;Rango Desde         ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Rango Desde" > "Rango Hasta") AND ("Rango Hasta"<>0) THEN
                                                                  ERROR(err7);
                                                              END;

                                                   CaptionML=ESP=Rango Desde }
    { 70  ;   ;Rango Hasta         ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Rango Desde" > "Rango Hasta") AND ("Rango Hasta"<>0) THEN
                                                                  ERROR(err7);
                                                              END;

                                                   CaptionML=ESP=Rango Hasta }
    { 71  ;   ;Vehiculo            ;Code10        ;TableRelation=Vehiculo;
                                                   CaptionML=ESP=Vehiculo;
                                                   Description=FK Vehiculo }
    { 73  ;   ;Propiedad vehiculos ;Option        ;CaptionML=ESP=Propiedad vehiculos;
                                                   OptionCaptionML=ESP=Todos,Propios,Externos;
                                                   OptionString=Todos,Propios,Externos }
    { 74  ;   ;Facturacion Automatica;Boolean     ;CaptionML=ESP=Facturacion Automatica }
    { 75  ;   ;Tipo Servicio Fijo  ;Option        ;InitValue=Todos;
                                                   CaptionML=ESP=Tipo fijo;
                                                   OptionCaptionML=ESP=Excursion,Traslado,Todos;
                                                   OptionString=Excursion,Traslado,Todos }
    { 76  ;   ;Zona trabajo        ;Code10        ;TableRelation="Zona de trabajo".Codigo;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ESP=Zona trabajo;
                                                   Description=FK Zona de trabajo }
    { 77  ;   ;Rango Plazas Desde  ;Integer       ;CaptionML=ESP=Rango Plazas Desde;
                                                   Editable=No }
    { 78  ;   ;Rango Plazas Hasta  ;Integer       ;CaptionML=ESP=Rango Plazas Hasta }
    { 79  ;   ;Referencia          ;Text30        ;CaptionML=ESP=Referencia }
    { 80  ;   ;Prefactura Prueba   ;Boolean       ;CaptionML=ESP=Prefactura Prueba }
    { 81  ;   ;% Dto               ;Decimal       ;OnValidate=BEGIN
                                                                "Imprimir Descuentos":= "% Dto"<>0;
                                                              END;

                                                   CaptionML=ESP=% Dto;
                                                   DecimalPlaces=0:2;
                                                   MinValue=0 }
    { 82  ;   ;Modo Desglose Transportados;Option ;CaptionML=ESP=Modo Desglose Transportados;
                                                   OptionCaptionML=ESP=Sin desglose,Entradas/Salidas,Rango Precio;
                                                   OptionString=Sin desglose,Entradas/Salidas,Rango Precio }
    { 83  ;   ;Codigo Suplemento   ;Code10        ;TableRelation="Codigo Suplemento".Codigo;
                                                   CaptionML=ESP=Codigo Suplemento }
    { 85  ;   ;Agrupar lineas x vuelo;Boolean     ;CaptionML=ESP=Agrupar lineas x vuelo }
    { 86  ;   ;Cod. Grupo          ;Code10        ;TableRelation=Grupos."Codigo Grupo";
                                                   CaptionML=ESP=Cod. Grupo }
    { 87  ;   ;Imprimir            ;Boolean       ;InitValue=Yes;
                                                   CaptionML=ESP=Imprimir }
    { 88  ;   ;Anular Seleccion CI ;Boolean       ;InitValue=No;
                                                   CaptionML=ESP=Anular Seleccion CI;
                                                   Description=Comunica a la funci¢n de facturacion que no debe seleccionar las lineas C/I si no tomar las filtradas }
    { 89  ;   ;Servicio Repetitivo ;Integer       ;CaptionML=ESP=Servicio Repetitivo }
    { 90  ;   ;% Variacion         ;Decimal       ;CaptionML=ESP=% Variacion;
                                                   DecimalPlaces=0:2 }
    { 91  ;   ;Guia                ;Text30        ;OnValidate=BEGIN
                                                                cFunBas.ValidaGuia(Guia);
                                                              END;

                                                   OnLookup=VAR
                                                              lwGuia@1103350000 : Text[30];
                                                            BEGIN
                                                              lwGuia := Guia;
                                                              IF cFunBas.LookUpGuia(lwGuia) THEN
                                                                VALIDATE(Guia,lwGuia);
                                                            END;

                                                   CaptionML=ESP=Guia }
    { 92  ;   ;Imprimir Descuentos ;Boolean       ;CaptionML=ESP=Imprimir Descuentos }
    { 93  ;   ;Cambiar Datos Cliente;Boolean      ;CaptionML=ESP=Cambiar Datos Cliente }
    { 94  ;   ;Cod. Serie          ;Code10        ;TableRelation="No. Series".Code;
                                                   CaptionML=ESP=Cod. Serie }
    { 95  ;   ;Cod. Serie Abono    ;Code10        ;TableRelation="No. Series".Code;
                                                   CaptionML=ESP=Cod. Serie Abono }
    { 96  ;   ;N§ Contrato         ;Code10        ;OnLookup=VAR
                                                              lrCont@1103355000 : Record 7010403;
                                                            BEGIN
                                                              // Solo es para ense¤ar el contrato
                                                              IF lrCont.GET("Garaje Grafico","N§ Contrato") THEN BEGIN
                                                                lrCont.FILTERGROUP(2);
                                                                lrCont.SETRECFILTER;
                                                                lrCont.FILTERGROUP(0);
                                                                FORM.RUN(7010417,lrCont);
                                                              END;
                                                            END;

                                                   CaptionML=ESP=N§ Contrato }
    { 97  ;   ;Facturar en DL      ;Boolean       ;CaptionML=ESP=Facturar en DL;
                                                   Description=Indica si la factura de coste tiene que ser en Divisa Local }
    { 100 ;   ;Grupo registro IVA producto;Code10 ;TableRelation="VAT Product Posting Group".Code;
                                                   CaptionML=ESP=Grupo registro IVA producto }
    { 101 ;   ;Tipo Facturacion    ;Option        ;OnValidate=VAR
                                                                lrCon@1103355000 : Record 7010403;
                                                              BEGIN
                                                                rParAux.FINDFIRST;

                                                                CASE "Tipo Facturacion" OF
                                                                  "Tipo Facturacion"::Oficial: BEGIN
                                                                    rConfVta.FINDFIRST;
                                                                    "Cod. Serie"       := rConfVta."Credit Memo Nos.";
                                                                    "Cod. Serie Abono" := rConfVta."Invoice Nos.";
                                                                    IF BusCaContrato(lrCon, FALSE) THEN BEGIN
                                                                      "Grupo registro IVA producto" := lrCon."Grupo Registro IVA Producto";
                                                                    END;
                                                                  END;

                                                                  "Tipo Facturacion"::Proforma: BEGIN
                                                                    rParAux.TESTFIELD("Serie Alternativa");
                                                                    rParAux.TESTFIELD("Grupo registro IVA Exento");
                                                                    "Cod. Serie"                  := rParAux."Serie Alternativa";
                                                                    "Cod. Serie Abono"            := rParAux."Serie Alternativa";
                                                                    "Grupo registro IVA producto" := rParAux."Grupo registro IVA Exento";
                                                                  END;
                                                                  ELSE BEGIN
                                                                    "Cod. Serie"                  := '';
                                                                    "Cod. Serie Abono"            := '';
                                                                    "Grupo registro IVA producto" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Tipo Facturacion;
                                                   OptionCaptionML=ESP=,Oficial,Proforma;
                                                   OptionString=,Oficial,Proforma;
                                                   BlankZero=Yes }
    { 102 ;   ;Informacion Pie de Pagina;Boolean  ;OnValidate=VAR
                                                                lrPie@1103355000 : Record 7035398;
                                                              BEGIN
                                                                IF "Informacion Pie de Pagina" THEN
                                                                  lrPie.CopiaDefecto
                                                                ELSE
                                                                  lrPie.BorraUser;
                                                              END;

                                                   CaptionML=ESP=Informacion Pie de Pagina;
                                                   Description=Inidica si la factura debe de contener informaci¢n de pie de pagina }
    { 50000;  ;Garaje de trabajo   ;Code10        ;TableRelation=Garaje.Garaje;
                                                   CaptionML=ESP=Garaje de trabajo }
    { 50005;  ;Perfil Transfer     ;Code10        ;TableRelation="Perfiles de acceso".Perfil;
                                                   CaptionML=ESP=Perfil Finbus;
                                                   Description="Perfiles de acceso".Perfil }
    { 50006;  ;Garaje por defecto  ;Code10        ;TableRelation=Garaje.Garaje;
                                                   CaptionML=ESP=Garaje por defecto;
                                                   Description=Cuando GARAJE DE TRABAJO=TODOS, ser  el garaje que se asignar  a un nuevo conductor o veh¡culo }
    { 50007;  ;Orden en Conductores;Option        ;CaptionML=ESP=Orden en Conductores;
                                                   OptionCaptionML=ESP=Ninguno,Garaje+Nombre,Garaje+Tipo Acuerdo+Nombre,Garaje+Tipo Acuerdo+Antiguedad+Nombre,Garaje+Grupo+Tipo Acuerdo+Antiguedad+Nombre;
                                                   OptionString=Ninguno,Garaje+Nombre,Garaje+Tipo Acuerdo+Nombre,Garaje+Tipo Acuerdo+Antiguedad+Nombre,Garaje+Grupo+Tipo Acuerdo+Antiguedad+Nombre }
    { 50010;  ;Garaje Automatico   ;Boolean       ;CaptionML=ESP=Garaje Automatico;
                                                   Description=Habilita las funciones de automatizaci¢n de garaje }
  }
  KEYS
  {
    {    ;Usuario                                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100244011 : TextConst 'ESP=1 - Condiciones temporales';
      err1@1100244000 : TextConst 'ESP=No se puede validar por un importe mayor del calculado.';
      err2@1100244002 : TextConst 'ESP=No se pueden validar mas paxes que los realmente transportados.';
      rPar@1103355003 : Record 7010311;
      rTipSer@1100244003 : Record 7010319;
      rCodSer@1100244004 : Record 7010320;
      rCliTo@1100244005 : Record 7010313;
      err3@1100244006 : TextConst 'ESP=La fecha hasta no puede ser anterior a la fecha desde';
      err4@1100244007 : TextConst 'ESP=No se encuentra ning£n contrato para estas condiciones';
      err5@1100244008 : TextConst 'ESP=No puede haber m s de un contrato con las condiciones indicadas';
      err6@1100244009 : TextConst 'ESP=No se encuentra ninguna Zona de Precios para estas condiciones';
      err7@1100253000 : TextConst 'ESP=Rango Desde No puede ser superior a Rango Hasta';
      no_tipoacuerdo_conductor@1100244010 : TextConst 'ESP=No se puede indicar Tipo de acuerdo y Conductor al mismo tiempo.';
      rParAux@1103355001 : Record 7010433;
      rConfVta@1103355002 : Record 311;
      cFunBas@1103350000 : Codeunit 7010310;
      cFactCli@1103355000 : Codeunit 7010406;

    PROCEDURE nom_cliente@2() : Text[50];
    VAR
      rCli@1100244000 : Record 18;
    BEGIN
      // nom_cliente
      //
      IF NOT rCli.GET(Cliente) THEN
        EXIT('')
      ELSE
        EXIT(rCli.Name);
    END;

    PROCEDURE nom_touroperador@4() : Text[50];
    VAR
      rTO@1100244000 : Record 7010312;
    BEGIN
      // nom_touroperador
      //
      IF NOT rTO.GET(Touroperador) THEN
        EXIT('')
      ELSE
        EXIT(rTO.Nombre);
    END;

    PROCEDURE nom_proveedor@1() : Text[30];
    VAR
      rPro@1100244000 : Record 23;
    BEGIN
      // nom_proveedor
      //
      IF NOT rPro.GET(Proveedor) THEN
        EXIT('')
      ELSE
        EXIT(rPro.Name);
    END;

    PROCEDURE nom_usuario@3() : Text[30];
    VAR
      rUsu@1100244000 : Record 2000000002;
    BEGIN
      // nom_usuario
      //
      IF NOT rUsu.GET(Usuario) THEN
        EXIT('')
      ELSE
        EXIT(rUsu.Name);
    END;

    PROCEDURE busca_tipo_factura@5();
    VAR
      rCondFra@1100244000 : Record 7010416;
    BEGIN
      // busca_tipo_factura
      //
      // AJS --> En funcion del cliente, touroperador y tipo de servicio a facturar buscar el tipo
      //         de factura a aplicar.
      //
      rCondFra.RESET;
      rCondFra.SETRANGE (Cliente        , Cliente);
      rCondFra.SETRANGE (TTOO           , Touroperador);
      IF "Tipo Servicio Fijo" <> "Tipo Servicio Fijo"::Todos THEN
        rCondFra.SETRANGE("Tipo Servicio Fijo", "Tipo Servicio Fijo");
      IF NOT rCondFra.FINDFIRST THEN
        EXIT;

      "Tipo factura"       := rCondFra."Tipo factura";
      "Tipo prefactura"    := rCondFra."Tipo prefactura";
    END;

    PROCEDURE Inicializa@1100253000();
    BEGIN
      // Inicializa
      // Crea el registro si no existe. Si existe lo limpia de informaci¢n

      CLEAR(Rec);
      IF NOT GET(USERID) THEN BEGIN
        Usuario:= USERID;
        INSERT;
      END;

      LimpiaRegistro;
    END;

    PROCEDURE GetNoSerie@1103355004(pwAbono@1103355002 : Boolean;pwAlternativa@1103355004 : Boolean) : Code[10];
    VAR
      lwCodSerie@1103355000 : Code[10];
      lrCon@1103355001 : Record 7010403;
    BEGIN
      // GetNoSerie
      // Devuelve el No de Serie que le toca seg£n los parametros introucidos
      // Sirve para la previsualizaci¢n previa a la facturaci¢n

      IF pwAlternativa THEN BEGIN
        rParAux.FINDFIRST;
        rParAux.TESTFIELD("Serie Alternativa");
        lwCodSerie := rParAux."Serie Alternativa";
      END
      ELSE BEGIN
        rConfVta.FINDFIRST;
        IF pwAbono THEN
          lwCodSerie  := rConfVta."Credit Memo Nos."
        ELSE
          lwCodSerie  := rConfVta."Invoice Nos.";
      END;

      EXIT(lwCodSerie);
    END;

    PROCEDURE BusCaContrato@1103355000(VAR prCon@1103355000 : Record 7010403;pwError@1103355002 : Boolean) : Boolean;
    VAR
      lwEnc@1103355001 : Boolean;
    BEGIN
      // Buscacontrato
      // Devuelve true si lo encuentra
      // Si pwError se generara un error si no encuentra el contrato o encuentra m s de uno

      rPar.FINDFIRST;
      CLEAR(lwEnc);
      CLEAR(prCon);
      CLEAR("Garaje Grafico");
      CLEAR("N§ Contrato");

      // Si no estan rellenados los datos fundamentales
      IF (Cliente='') OR (Touroperador='') OR ("Fecha desde"=0D) OR ("Fecha hasta"=0D) THEN
        EXIT(lwEnc);

      prCon.SETCURRENTKEY(Cliente,
                          Touroperador,
                          "Fecha inicio contrato",
                          "Fecha final contrato");
      IF Garaje <> '' THEN
        prCon.SETFILTER(Garaje                 , '%1|%2', Garaje, rPar."Todos los garajes");
      prCon.SETRANGE (Cliente                , Cliente);
      prCon.SETRANGE (Touroperador           , Touroperador);
      prCon.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha hasta");
      prCon.SETFILTER("Fecha final contrato" , '>=%1', "Fecha desde");
      prCon.SETRANGE (Confirmado             , TRUE);
      lwEnc := prCon.FINDFIRST;
      IF lwEnc THEN BEGIN
        IF pwError AND (prCon.COUNT>1) THEN  // Error si hay m s de un contrato
          ERROR(err5);
        "Garaje Grafico" := prCon.Garaje;
        "N§ Contrato"    := prCon."N§ Contrato";
      END
      ELSE
        IF pwError THEN
          ERROR(err4);  // Error si no hay ning£n contrato


      EXIT(lwEnc);
    END;

    PROCEDURE GetCondiciones@1103355006(pwError@1103355001 : Boolean;pwValida@1103355003 : Boolean);
    VAR
      lrCon@1103355000 : Record 7010403;
      lwTipFact@1103355002 : Integer;
    BEGIN
      // GetCondiciones
      // Establecemos seg£n las condiciones
      // Si pwError se generara un error si no encuentra el contrato o encuentra m s de uno
      // pwValida Indica si se desea validar el campo o no. No siempre se necesita

      rParAux.FINDFIRST;

      lwTipFact := "Tipo Facturacion";
      IF BusCaContrato(lrCon, pwError) THEN BEGIN
        IF lwTipFact= 0 THEN BEGIN
          IF ((rParAux."Serie Alternativa" = lrCon."Cod. Serie") AND (lrCon."Cod. Serie" <> '')) THEN
            lwTipFact := "Tipo Facturacion"::Proforma
          ELSE
            lwTipFact := "Tipo Facturacion"::Oficial;
        END;
      END;

      IF pwValida THEN
        VALIDATE("Tipo Facturacion", lwTipFact)
      ELSE
        "Tipo Facturacion":= lwTipFact;
    END;

    PROCEDURE LimpiaRegistro@1103355001();
    VAR
      lrUsuTMP@1103355000 : TEMPORARY Record 7010420;
    BEGIN
      // LimpiaRegistro
      // Limpiamos el registro para que se pueda usar para coger condiciones temporales,
      // guardando los datos de usuario permamentes.

      lrUsuTMP := Rec;

      INIT;

      "Garaje de trabajo"    := lrUsuTMP."Garaje de trabajo";
      "Perfil Transfer"      := lrUsuTMP."Perfil Transfer";
      "Garaje por defecto"   := lrUsuTMP."Garaje por defecto";
      "Orden en Conductores" := lrUsuTMP."Orden en Conductores";
      "Garaje Automatico"    := lrUsuTMP."Garaje Automatico";

      MODIFY;
    END;

    BEGIN
    {
      rTempTextAlt es el temporal de texto alternativo. Utilizamos esta tabla como puente

      $001 AJS 11102013 Modifico la funcion nom_cliente para que retorne Text(50)

      $002 AJS 12052015 Cuando se rellena Fecha desde pasar el valor a Fecha hasta
    }
    END.
  }
}
