OBJECT Table 7035381 Itinerario Grupo
{
  OBJECT-PROPERTIES
  {
    Date=16/10/09;
    Time=12:30:49;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Cod Grupo");
               CLEAR(rItin);
               rItin.ASCENDING(FALSE);
               rItin.SETRANGE("Cod Grupo","Cod Grupo");
               IF rItin.FINDFIRST THEN
                 "No Linea" := rItin."No Linea" +1
               ELSE
                 "No Linea" := 1;

               CreaLinHotel;
             END;

    OnDelete=VAR
               lrHot@1100253000 : Record 7010374;
             BEGIN
               // Borra las l¡neas de hotel ligadas a este itinerario
               CLEAR(lrHot);
               lrHot.SETRANGE("Cod Grupo"    , "Cod Grupo");
               lrHot.SETRANGE("N§ Itinerario", "No Linea");
               IF lrHot.FINDFIRST THEN
                 lrHot.DELETEALL;

               // Borra los vuelos x linea
               CLEAR(rVuelLin);
               rVuelLin.SETCURRENTKEY("N§ Servicio", "N§ Linea");
               rVuelLin.SETRANGE(Tipo         , rVuelLin.Tipo::Grupo);
               rVuelLin.SETRANGE("N§ Servicio", "Cod Grupo");
               rVuelLin.SETRANGE("N§ Linea"   , "No Linea");
               IF rVuelLin.FINDFIRST THEN
                 rVuelLin.DELETEALL;
             END;

    CaptionML=ESP=Itinerario Grupo;
    LookupFormID=Form7010511;
    DrillDownFormID=Form7010511;
  }
  FIELDS
  {
    { 1   ;   ;Cod Grupo           ;Code20        ;TableRelation=Grupos."Codigo Grupo";
                                                   CaptionML=ESP=Cod Grupo }
    { 2   ;   ;No Linea            ;Integer       ;InitValue=1;
                                                   CaptionML=ESP=No Linea;
                                                   MinValue=1;
                                                   Editable=No }
    { 10  ;   ;Dia                 ;Date          ;OnValidate=BEGIN
                                                                CLEAR(rGrup);
                                                                rGrup.GET("Cod Grupo");
                                                                IF (Dia <> 0D) AND (Dia < rGrup."Fecha Llegada Prevista") THEN
                                                                  ERROR(Text0003,FIELDCAPTION(Dia),rGrup.FIELDCAPTION("Fecha Llegada Prevista"));
                                                                IF (rGrup."Fecha Salida Prevista" <> 0D) AND (Dia > rGrup."Fecha Salida Prevista") THEN
                                                                  ERROR(Text0004,FIELDCAPTION(Dia), rGrup.FIELDCAPTION("Fecha Salida Prevista"));
                                                              END;

                                                   CaptionML=ESP=Dia }
    { 11  ;   ;Codigo Servicio     ;Code10        ;TableRelation="Codigo servicio".Codigo WHERE (Filtro Cliente=FIELD(Cliente Grupo),
                                                                                                 Filtro Touroperador=FIELD(Touroperador Grupo));
                                                   OnValidate=BEGIN
                                                                // Buscar el tipo de servicio para rellenar el punto origen/destino por defecto

                                                                IF "Codigo Servicio" <> '' THEN BEGIN
                                                                  rCodSer.GET("Codigo Servicio");
                                                                  rTipSer.GET(rCodSer."Tipo servicio");
                                                                  "Origen/Destino" := rTipSer."Pto Origen x Defecto";
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Codigo Servicio }
    { 12  ;   ;Hora Inicio         ;Time          ;CaptionML=ESP=Hora Inicio }
    { 13  ;   ;Servicio            ;Code10        ;TableRelation=Servicio."N§ Servicio";
                                                   CaptionML=ESP=Servicio;
                                                   Editable=No }
    { 14  ;   ;Garaje              ;Code10        ;TableRelation=Garaje;
                                                   CaptionML=ESP=Garaje }
    { 15  ;   ;Origen/Destino      ;Code10        ;TableRelation="Punto de recogida".Codigo;
                                                   OnValidate=VAR
                                                                lrPunt@1103350000 : Record 7010315;
                                                              BEGIN
                                                                IF rItin.Presentacion='' THEN BEGIN
                                                                  CLEAR(lrPunt);
                                                                  IF lrPunt.GET("Origen/Destino") THEN
                                                                    VALIDATE(Presentacion, lrPunt.Descripci¢n);
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Origen/Destino }
    { 16  ;   ;Presentacion        ;Text30        ;CaptionML=ESP=Presentacion }
    { 17  ;   ;Cliente Grupo       ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Grupos.Cliente WHERE (Codigo Grupo=FIELD(Cod Grupo)));
                                                   CaptionML=ESP=Cliente Grupo;
                                                   Description=Lookup(Grupos.Cliente WHERE (Codigo Grupo=FIELD(Cod Grupo)));
                                                   Editable=No }
    { 18  ;   ;Touroperador Grupo  ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Grupos.TTOO WHERE (Codigo Grupo=FIELD(Cod Grupo)));
                                                   CaptionML=ESP=Touroperador Grupo;
                                                   Description=Lookup(Grupos.TTOO WHERE (Codigo Grupo=FIELD(Cod Grupo)));
                                                   Editable=No }
    { 50  ;   ;Observaciones       ;Text250       ;CaptionML=ESP=Observaciones }
    { 53  ;   ;Vuelos              ;Text150       ;OnValidate=BEGIN
                                                                IF Vuelos <> xRec.Vuelos THEN BEGIN
                                                                  Vuelos := UPPERCASE(Vuelos);
                                                                  Vuelos := FormateaListaVuelos(Vuelos);
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Vuelos }
    { 55  ;   ;Hora 1er Vuelo      ;Time          ;CaptionML=ESP=Hora 1er Vuelo }
  }
  KEYS
  {
    {    ;Cod Grupo,No Linea                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      rItin@1103350000 : Record 7035381;
      Text0001@1103350001 : TextConst 'ESP=Comp';
      Text0002@1103350002 : TextConst 'ESP=Solamente puede existir un responsable por grupo';
      rGrup@1103350003 : Record 7010373;
      Text0003@1103350004 : TextConst 'ESP=%1 No puede ser inferior a %2 de la ficha de Grupo';
      Text0004@1103350005 : TextConst 'ESP=%1 No puede ser superior a %2 de la ficha de Grupo';
      rCodSer@1103355000 : Record 7010320;
      rTipSer@1103355001 : Record 7010319;
      rVuelLin@1103355002 : Record 7035397;

    PROCEDURE CreaLinHotel@1100253000();
    VAR
      lrHot@1100253000 : Record 7010374;
      lrHot2@1100253001 : Record 7010374;
    BEGIN
      // CreaLinHotel

      CLEAR(lrHot);
      lrHot.SETRANGE("Cod Grupo"    , "Cod Grupo");
      lrHot.SETRANGE("N§ Itinerario", 0);
      IF lrHot.FINDSET(TRUE) THEN BEGIN
        REPEAT
          lrHot2 := lrHot;
          lrHot2."N§ Itinerario" := "No Linea";
          lrHot2."N§ Linea" :=0; // Fuerza a buscar un nuevo numero
          lrHot2.INSERT(TRUE);
        UNTIL lrHot.NEXT=0;
      END;
    END;

    PROCEDURE FormateaListaVuelos@15(VAR pw_listavuelos@1100244000 : Text[60]) : Code[150];
    VAR
      lrPar@1100244003 : Record 7010311;
      lw_listavuelos@1100244004 : Text[60];
      lw_caracter@1100244005 : Char;
      lw_numvuelo@1100244006 : Code[10];
      lw_compvuelo@1100244007 : Code[10];
      lw_posicion@1100244008 : Integer;
      lw_carsnum@1100244009 : Integer;
      lw_carscomp@1100244010 : Integer;
      lw_nuevovuelo@1100244011 : Boolean;
      lErr1@1100244012 : TextConst 'ESP=El Codigo de Compa¤ia %1 tiene m s de 3 digitos';
      lErr2@1100244013 : TextConst 'ESP=El Codigo de Vuelo %1 tiene m s de 5 cifras';
      lw_primervuelo@1100244014 : Code[8];
    BEGIN
      // FormateaListaVuelos
      //

      CLEAR(lrPar);
      lrPar.FINDFIRST;
      lw_listavuelos := '';
      lw_nuevovuelo  := TRUE;
      lw_compvuelo  := '';
      lw_numvuelo   := '';
      lw_carsnum    := 0;
      lw_carscomp   := 0;
      FOR lw_posicion := 1 TO STRLEN (pw_listavuelos) DO BEGIN
        lw_caracter := pw_listavuelos[lw_posicion];

        IF (lw_caracter IN ['A'..'Z']) OR (lw_compvuelo='') THEN BEGIN

          // ----  si se trata de un nuevo vuelo supondremos que el caracter pertenece a la  ----
          // ----  compa¤ia del vuelo                                                        ----

          IF lw_nuevovuelo AND (lw_caracter <> ' ') THEN BEGIN
            lw_compvuelo := lw_compvuelo + FORMAT(lw_caracter, 0);
            lw_carscomp += 1;
          END

          // ----  sino supondremos que es un caracter que se pone detras del numero de vuelo  ----

          ELSE BEGIN
            lw_numvuelo := lw_numvuelo + FORMAT(lw_caracter, 0);
            lw_carsnum += 1;
          END;
        END
        ELSE
          IF lw_caracter IN ['0'..'9'] THEN BEGIN
            lw_numvuelo   := lw_numvuelo + FORMAT(lw_caracter, 0);
            lw_carsnum    += 1;
            lw_nuevovuelo := FALSE;
          END;

        IF (lw_caracter = ',') OR (lw_posicion = STRLEN(pw_listavuelos)) THEN BEGIN
           // En algunas empresas no generamos errores
          IF NOT (lrPar."Empresa Real" IN[lrPar."Empresa Real"::TRN]) THEN BEGIN
            IF lw_carscomp > 3 THEN
              ERROR(lErr1);
            IF lw_carsnum > 5 THEN
              ERROR(lErr2);
          END;
          IF lw_compvuelo <> '' THEN BEGIN

            IF lw_listavuelos <> '' THEN
              lw_listavuelos := lw_listavuelos + ', '
            ELSE
              lw_primervuelo := DELCHR(lw_compvuelo, '<>') + DELCHR(lw_numvuelo, '<>');

            lw_listavuelos := lw_listavuelos + DELCHR(lw_compvuelo, '<>') + DELCHR(lw_numvuelo, '<>');
          END;
          lw_nuevovuelo := TRUE;
          lw_compvuelo  := '';
          lw_numvuelo   := '';
          lw_carsnum    := 0;
          lw_carscomp   := 0;
        END;
      END;

      pw_listavuelos := lw_listavuelos;
      EXIT(pw_listavuelos);
    END;

    BEGIN
    END.
  }
}
