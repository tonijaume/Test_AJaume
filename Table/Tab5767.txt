OBJECT Table 5767 Warehouse Activity Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 6550=rm;
    OnDelete=BEGIN
               DeleteRelatedWhseActivLines(Rec,FALSE);
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Warehouse Activity Line;
               ESP=L¡n.actividad almac‚n];
    PasteIsValid=No;
    LookupFormID=Form5785;
    DrillDownFormID=Form5785;
  }
  FIELDS
  {
    { 1   ;   ;Activity Type       ;Option        ;CaptionML=[ENU=Activity Type;
                                                              ESP=Tipo actividad];
                                                   OptionCaptionML=[ENU=" ,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick";
                                                                    ESP=" ,Ubicaci¢n,Pick.,Movim.,Ubic. exist.,Pick. exist."];
                                                   OptionString=[ ,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick];
                                                   Editable=No }
    { 2   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ESP=N§];
                                                   Editable=No }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea];
                                                   Editable=No }
    { 4   ;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              ESP=Tipo procedencia mov.];
                                                   Editable=No }
    { 5   ;   ;Source Subtype      ;Option        ;CaptionML=[ENU=Source Subtype;
                                                              ESP=Subtipo origen];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    ESP=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 6   ;   ;Source No.          ;Code20        ;CaptionML=[ENU=Source No.;
                                                              ESP=C¢d. procedencia mov.];
                                                   Editable=No }
    { 7   ;   ;Source Line No.     ;Integer       ;CaptionML=[ENU=Source Line No.;
                                                              ESP=N§ l¡n. origen];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 8   ;   ;Source Subline No.  ;Integer       ;CaptionML=[ENU=Source Subline No.;
                                                              ESP=N§ subl¡nea origen];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 9   ;   ;Source Document     ;Option        ;CaptionML=[ENU=Source Document;
                                                              ESP=Documento origen];
                                                   OptionCaptionML=[ENU=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer,Outbound Transfer,Prod. Consumption,Prod. Output;
                                                                    ESP=,Pedido venta,,,Devoluci¢n venta,Pedido compra,,,Devoluci¢n compra,Transferencia entrada,Transferencia salida,Consumo prod.,Salida prod.];
                                                   OptionString=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer,Outbound Transfer,Prod. Consumption,Prod. Output;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 11  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n];
                                                   Editable=No }
    { 12  ;   ;Shelf No.           ;Code10        ;CaptionML=[ENU=Shelf No.;
                                                              ESP=N§ estante] }
    { 13  ;   ;Sorting Sequence No.;Integer       ;CaptionML=[ENU=Sorting Sequence No.;
                                                              ESP=N§ secuencia clasif.];
                                                   Editable=No }
    { 14  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  "Variant Code" := '';

                                                                IF "Item No." <> '' THEN BEGIN
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                  VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                  "Variant Code" := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto];
                                                   Editable=No }
    { 15  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record 5401;
                                                              BEGIN
                                                                IF "Variant Code" = '' THEN
                                                                  VALIDATE("Item No.")
                                                                ELSE BEGIN
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                  "Description 2" := ItemVariant."Description 2";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante];
                                                   Editable=No }
    { 16  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 1;

                                                                VALIDATE(Quantity);
                                                                VALIDATE("Qty. Outstanding");
                                                                VALIDATE("Qty. to Handle");
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida];
                                                   Editable=No }
    { 17  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 18  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n];
                                                   Editable=No }
    { 19  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2];
                                                   Editable=No }
    { 20  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. Outstanding",(Quantity - "Qty. Handled"));
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 21  ;   ;Qty. (Base)         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Qty. (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. (Base);
                                                              ESP=Cantidad (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 24  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                                VALIDATE("Qty. to Handle","Qty. Outstanding");
                                                              END;

                                                   CaptionML=[ENU=Qty. Outstanding;
                                                              ESP=Cdad. pendiente];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 25  ;   ;Qty. Outstanding (Base);Decimal    ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. Outstanding","Qty. Outstanding (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. Outstanding (Base);
                                                              ESP=Cdad. pendiente (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 26  ;   ;Qty. to Handle      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Handle" > "Qty. Outstanding" THEN
                                                                  ERROR(
                                                                    Text002,
                                                                    "Qty. Outstanding");

                                                                GetLocation("Location Code");
                                                                IF Location."Directed Put-away and Pick" THEN
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. to Handle",Cubage,Weight);

                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Action Type" = "Action Type"::Place) AND
                                                                   ("Breakbulk No." = 0) AND
                                                                   ("Qty. to Handle" > 0) AND
                                                                   Location."Directed Put-away and Pick"
                                                                THEN
                                                                  IF GetBin("Location Code","Bin Code") THEN
                                                                    CheckIncreaseCapacity(TRUE);

                                                                IF NOT UseBaseQty THEN
                                                                  "Qty. to Handle (Base)" := CalcBaseQty("Qty. to Handle");


                                                                IF ("Activity Type" = "Activity Type"::"Put-away") AND
                                                                   ("Action Type" = "Action Type"::Take) AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  IF ("Breakbulk No." <> 0) OR "Original Breakbulk" THEN
                                                                    UpdateBreakbulkQtytoHandle;

                                                                IF ("Activity Type" IN ["Activity Type"::Pick,"Activity Type"::"Invt. Pick"]) AND
                                                                   ("Action Type" <> "Action Type"::Place) AND ("Lot No." <> '') AND (CurrFieldNo <> 0)
                                                                THEN
                                                                  CheckReservedItemTrkg(1,"Lot No.");

                                                                IF "Qty. to Handle" = 0 THEN
                                                                  UpdateReservation(Rec)
                                                              END;

                                                   CaptionML=[ENU=Qty. to Handle;
                                                              ESP=Cdad.a manipular];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 27  ;   ;Qty. to Handle (Base);Decimal      ;OnValidate=BEGIN
                                                                UseBaseQty := TRUE;
                                                                VALIDATE("Qty. to Handle",CalcQty("Qty. to Handle (Base)"));
                                                              END;

                                                   CaptionML=[ENU=Qty. to Handle (Base);
                                                              ESP=Cdad. a manipular (base)];
                                                   DecimalPlaces=0:5 }
    { 28  ;   ;Qty. Handled        ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Handled (Base)" := CalcBaseQty("Qty. Handled");
                                                              END;

                                                   CaptionML=[ENU=Qty. Handled;
                                                              ESP=Cdad. manipulada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 29  ;   ;Qty. Handled (Base) ;Decimal       ;CaptionML=[ENU=Qty. Handled (Base);
                                                              ESP=Cdad. manipulada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 31  ;   ;Shipping Advice     ;Option        ;FieldClass=Normal;
                                                   CaptionML=[ENU=Shipping Advice;
                                                              ESP=Aviso env¡o];
                                                   OptionCaptionML=[ENU=Partial,Complete;
                                                                    ESP=Parcial,Completo];
                                                   OptionString=Partial,Complete;
                                                   Editable=No }
    { 34  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento] }
    { 39  ;   ;Destination Type    ;Option        ;CaptionML=[ENU=Destination Type;
                                                              ESP=Tipo destino];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Location,Item,Family,Sales Order";
                                                                    ESP=" ,Cliente,Proveedor,Almac‚n,Producto,Familia,Pedido vtas."];
                                                   OptionString=[ ,Customer,Vendor,Location,Item,Family,Sales Order];
                                                   Editable=No }
    { 40  ;   ;Destination No.     ;Code20        ;TableRelation=IF (Destination Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Destination Type=CONST(Customer)) Customer
                                                                 ELSE IF (Destination Type=CONST(Location)) Location
                                                                 ELSE IF (Destination Type=CONST(Item)) Item
                                                                 ELSE IF (Destination Type=CONST(Family)) Family
                                                                 ELSE IF (Destination Type=CONST(Sales Order)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Destination No.;
                                                              ESP=N§ destino];
                                                   Editable=No }
    { 42  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ESP=C¢d. transportista] }
    { 43  ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ESP=C¢d. servicio transportista] }
    { 44  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ESP=C¢d. condiciones env¡o] }
    { 47  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial] }
    { 6500;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                IF "Serial No." <> '' THEN BEGIN
                                                                  ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,TRUE);
                                                                  TESTFIELD("Qty. per Unit of Measure",1);

                                                                  IF "Activity Type" IN ["Activity Type"::Pick,"Activity Type"::"Invt. Pick"] THEN
                                                                    CheckReservedItemTrkg(0,"Serial No.");
                                                                END;

                                                                IF "Serial No." <> xRec."Serial No." THEN
                                                                  "Expiration Date" := 0D;
                                                              END;

                                                   OnLookup=VAR
                                                              LookUpBinContent@1000 : Boolean;
                                                            BEGIN
                                                              LookUpBinContent := ("Activity Type" <= "Activity Type"::Movement) OR ("Action Type" <> "Action Type"::Place);
                                                              LookUpTrackingSummary(Rec,LookUpBinContent,-1,0);
                                                            END;

                                                   CaptionML=[ENU=Serial No.;
                                                              ESP=N§ serie] }
    { 6501;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                IF "Lot No." <> '' THEN BEGIN
                                                                  ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,TRUE);

                                                                  IF "Activity Type" IN ["Activity Type"::Pick,"Activity Type"::"Invt. Pick"] THEN
                                                                    CheckReservedItemTrkg(1,"Lot No.");
                                                                END;

                                                                IF "Lot No." <> xRec."Lot No." THEN
                                                                  "Expiration Date" := 0D;
                                                              END;

                                                   OnLookup=VAR
                                                              LookUpBinContent@1000 : Boolean;
                                                            BEGIN
                                                              LookUpBinContent := ("Activity Type" <= "Activity Type"::Movement) OR ("Action Type" <> "Action Type"::Place);
                                                              LookUpTrackingSummary(Rec,LookUpBinContent,-1,1);
                                                            END;

                                                   CaptionML=[ENU=Lot No.;
                                                              ESP=N§ lote] }
    { 6502;   ;Warranty Date       ;Date          ;CaptionML=[ENU=Warranty Date;
                                                              ESP=Fecha garant¡a] }
    { 6503;   ;Expiration Date     ;Date          ;OnValidate=VAR
                                                                WhseActLine@1106000000 : Record 5767;
                                                              BEGIN
                                                                IF "Lot No." <> '' THEN BEGIN
                                                                  WITH WhseActLine DO BEGIN
                                                                    RESET;
                                                                    SETCURRENTKEY("No.","Line No.","Activity Type");
                                                                    SETRANGE("No.",Rec."No.");
                                                                    SETRANGE("Item No.",Rec."Item No.");
                                                                    SETRANGE("Lot No.",Rec."Lot No.");

                                                                    IF FINDSET THEN
                                                                      REPEAT
                                                                        IF ("Line No." <> Rec."Line No.") AND ("Expiration Date" <> Rec."Expiration Date")
                                                                          AND (Rec."Expiration Date" <> 0D) AND ("Expiration Date" <> 0D) THEN
                                                                          Rec.FIELDERROR("Expiration Date");
                                                                      UNTIL NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Expiration Date;
                                                              ESP=Fecha caducidad] }
    { 6504;   ;Serial No. Blocked  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Serial No. Information".Blocked WHERE (Item No.=FIELD(Item No.),
                                                                                                              Variant Code=FIELD(Variant Code),
                                                                                                              Serial No.=FIELD(Serial No.)));
                                                   CaptionML=[ENU=Serial No. Blocked;
                                                              ESP=N§ serie bloqueado];
                                                   Editable=No }
    { 6505;   ;Lot No. Blocked     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Lot No. Information".Blocked WHERE (Item No.=FIELD(Item No.),
                                                                                                           Variant Code=FIELD(Variant Code),
                                                                                                           Lot No.=FIELD(Lot No.)));
                                                   CaptionML=[ENU=Lot No. Blocked;
                                                              ESP=N§ lote bloqueado];
                                                   Editable=No }
    { 7300;   ;Bin Code            ;Code20        ;OnValidate=VAR
                                                                BinContent@1000 : Record 7302;
                                                                BinType@1002 : Record 7303;
                                                                QtyAvail@1001 : Decimal;
                                                                QtyOutstanding@1004 : Decimal;
                                                                AvailableQty@1006 : Decimal;
                                                                UOMCode@1003 : Code[10];
                                                                NewBinCode@1005 : Code[20];
                                                                ReservationExists@1008 : Boolean;
                                                                ReservedForItemLedgEntry@1007 : Boolean;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN
                                                                  IF "Action Type" = "Action Type"::Take THEN
                                                                    WMSMgt.FindBinContent("Location Code","Bin Code","Item No.","Variant Code","Zone Code")
                                                                  ELSE
                                                                    WMSMgt.FindBin("Location Code","Bin Code","Zone Code");

                                                                IF "Bin Code" <> xRec."Bin Code" THEN BEGIN
                                                                  IF GetBin("Location Code","Bin Code") THEN BEGIN
                                                                    IF CurrFieldNo <> 0 THEN BEGIN
                                                                      IF ("Activity Type" = "Activity Type"::"Put-away") AND
                                                                         ("Breakbulk No." <> 0)
                                                                      THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bin Code"));
                                                                      CheckWhseDocLine;
                                                                      IF "Action Type" = "Action Type"::Take THEN BEGIN
                                                                        IF (("Whse. Document Type" <> "Whse. Document Type"::Receipt) AND
                                                                            (Bin."Bin Type Code" <> ''))
                                                                        THEN
                                                                          IF BinType.GET(Bin."Bin Type Code") THEN
                                                                            BinType.TESTFIELD(Receive,FALSE);
                                                                        GetLocation("Location Code");
                                                                        IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                          UOMCode := "Unit of Measure Code";
                                                                          QtyOutstanding := "Qty. Outstanding";
                                                                        END ELSE BEGIN
                                                                          UOMCode := WMSMgt.GetBaseUOM("Item No.");
                                                                          QtyOutstanding := "Qty. Outstanding (Base)";
                                                                        END;
                                                                        NewBinCode := "Bin Code";
                                                                        IF BinContent.GET("Location Code","Bin Code","Item No.","Variant Code",UOMCode) THEN BEGIN
                                                                          QtyAvail := BinContent.CalcQtyAvailToPick(0);
                                                                          IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                            CreatePick.SetCrossDock(Bin."Cross-Dock Bin");
                                                                            AvailableQty :=
                                                                              CreatePick.CalcTotalAvailQtyToPick(
                                                                                "Location Code","Item No.","Variant Code","Lot No.","Serial No.",
                                                                                "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",0);
                                                                            AvailableQty := AvailableQty + "Qty. Outstanding (Base)";
                                                                            IF AvailableQty < 0 THEN
                                                                              AvailableQty := 0;

                                                                            IF AvailableQty = 0 THEN
                                                                              ERROR(Text015);
                                                                            IF "Bin Code" <> '' THEN BEGIN
                                                                              IF "Qty. to Handle" <> 0 THEN
                                                                                CreatePick.CheckReservation(
                                                                                  AvailableQty,"Location Code","Source Type","Source Subtype","Source No.",
                                                                                  "Source Line No.","Source Subline No.","Qty. per Unit of Measure",
                                                                                  "Qty. to Handle","Qty. to Handle (Base)");
                                                                              CreatePick.GetReservationStatus(ReservationExists,ReservedForItemLedgEntry);
                                                                              IF ReservationExists AND NOT ReservedForItemLedgEntry THEN
                                                                                ERROR(Text016,"Item No.");
                                                                              CreatePick.AdjustReservation(
                                                                                "Qty. to Handle (Base)","Source Type","Source Subtype","Source No.","Source Line No.",0,0);
                                                                            END;
                                                                          END ELSE
                                                                            AvailableQty := QtyAvail;

                                                                          IF AvailableQty < QtyAvail THEN
                                                                            QtyAvail := AvailableQty;

                                                                          IF QtyAvail < QtyOutstanding THEN BEGIN
                                                                            IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                              IF NOT CONFIRM(
                                                                                STRSUBSTNO(
                                                                                  Text012,
                                                                                  FIELDCAPTION("Qty. Outstanding"),QtyOutstanding,
                                                                                  QtyAvail,BinContent.TABLECAPTION,FIELDCAPTION("Bin Code")),
                                                                                FALSE)
                                                                              THEN
                                                                                ERROR(Text006)
                                                                              ELSE BEGIN
                                                                                "Bin Code" := NewBinCode;
                                                                                MODIFY;
                                                                              END;
                                                                            END ELSE
                                                                              IF NOT CONFIRM(
                                                                                STRSUBSTNO(
                                                                                  Text012,
                                                                                  FIELDCAPTION("Qty. Outstanding (Base)"),QtyOutstanding,
                                                                                  QtyAvail,BinContent.TABLECAPTION,FIELDCAPTION("Bin Code")),
                                                                                FALSE)
                                                                              THEN
                                                                                ERROR(Text006)
                                                                              ELSE BEGIN
                                                                                "Bin Code" := NewBinCode;
                                                                                MODIFY;
                                                                              END;
                                                                          END;
                                                                        END ELSE
                                                                          IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                            IF NOT CONFIRM(
                                                                              STRSUBSTNO(
                                                                                Text012,
                                                                                FIELDCAPTION("Qty. Outstanding"),QtyOutstanding,
                                                                                QtyAvail,BinContent.TABLECAPTION,FIELDCAPTION("Bin Code")),
                                                                              FALSE)
                                                                            THEN
                                                                              ERROR(Text006)
                                                                            ELSE BEGIN
                                                                              "Bin Code" := NewBinCode;
                                                                              MODIFY;
                                                                            END;
                                                                          END ELSE
                                                                            IF NOT CONFIRM(
                                                                              STRSUBSTNO(
                                                                                Text012,
                                                                                FIELDCAPTION("Qty. Outstanding (Base)"),QtyOutstanding,
                                                                                QtyAvail,BinContent.TABLECAPTION,FIELDCAPTION("Bin Code")),
                                                                              FALSE)
                                                                            THEN
                                                                              ERROR(Text006)
                                                                            ELSE BEGIN
                                                                              "Bin Code" := NewBinCode;
                                                                              MODIFY;
                                                                            END;
                                                                      END ELSE BEGIN
                                                                        IF "Qty. to Handle" > 0 THEN
                                                                          CheckIncreaseCapacity(FALSE);
                                                                        DeleteBinContent(xRec);
                                                                      END;
                                                                    END;
                                                                    IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                      "Bin Ranking" := Bin."Bin Ranking";
                                                                      "Bin Type Code" := Bin."Bin Type Code";
                                                                      "Zone Code" := Bin."Zone Code";
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bin Ranking" := 0;
                                                                    "Bin Type Code" := '';
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              IF "Action Type" = "Action Type"::Take THEN
                                                                BinCode := WMSMgt.BinContentLookUp2("Location Code","Item No.","Variant Code","Zone Code","Lot No.","Serial No.","Bin Code")
                                                              ELSE
                                                                BinCode := WMSMgt.BinLookUp("Location Code","Item No.","Variant Code","Zone Code");

                                                              IF BinCode <> '' THEN BEGIN
                                                                VALIDATE("Bin Code",BinCode);
                                                                MODIFY;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n] }
    { 7301;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF xRec."Zone Code" <> "Zone Code" THEN BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Directed Put-away and Pick");
                                                                  IF "Action Type" = "Action Type"::Place THEN
                                                                    DeleteBinContent(xRec);
                                                                  "Bin Code" := '';
                                                                  "Bin Ranking" := 0;
                                                                  "Bin Type Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Zone Code;
                                                              ESP=C¢d. zona] }
    { 7305;   ;Action Type         ;Option        ;CaptionML=[ENU=Action Type;
                                                              ESP=Tipo acci¢n];
                                                   OptionCaptionML=[ENU=" ,Take,Place";
                                                                    ESP=" ,Traer,Colocar"];
                                                   OptionString=[ ,Take,Place];
                                                   Editable=No }
    { 7306;   ;Whse. Document Type ;Option        ;CaptionML=[ENU=Whse. Document Type;
                                                              ESP=Tipo documento almac‚n];
                                                   OptionCaptionML=[ENU=" ,Receipt,Shipment,Internal Put-away,Internal Pick,Production,Movement Worksheet";
                                                                    ESP=" ,Recepci¢n,Env¡o,Ubicac. interna,Picking interno,Producci¢n,Hoja trab. mov."];
                                                   OptionString=[ ,Receipt,Shipment,Internal Put-away,Internal Pick,Production,Movement Worksheet];
                                                   Editable=No }
    { 7307;   ;Whse. Document No.  ;Code20        ;TableRelation=IF (Whse. Document Type=CONST(Receipt)) "Posted Whse. Receipt Header".No. WHERE (No.=FIELD(Whse. Document No.))
                                                                 ELSE IF (Whse. Document Type=CONST(Shipment)) "Warehouse Shipment Header".No. WHERE (No.=FIELD(Whse. Document No.))
                                                                 ELSE IF (Whse. Document Type=CONST(Internal Put-away)) "Whse. Internal Put-away Header".No. WHERE (No.=FIELD(Whse. Document No.))
                                                                 ELSE IF (Whse. Document Type=CONST(Internal Pick)) "Whse. Internal Pick Header".No. WHERE (No.=FIELD(Whse. Document No.))
                                                                 ELSE IF (Whse. Document Type=CONST(Production)) "Production Order".No. WHERE (No.=FIELD(Whse. Document No.));
                                                   CaptionML=[ENU=Whse. Document No.;
                                                              ESP=N§ documento almac‚n];
                                                   Editable=No }
    { 7308;   ;Whse. Document Line No.;Integer    ;TableRelation=IF (Whse. Document Type=CONST(Receipt)) "Posted Whse. Receipt Line"."Line No." WHERE (No.=FIELD(Whse. Document No.),
                                                                                                                                                       Line No.=FIELD(Whse. Document Line No.))
                                                                                                                                                       ELSE IF (Whse. Document Type=CONST(Shipment)) "Warehouse Shipment Line"."Line No." WHERE (No.=FIELD(Whse. Document No.),
                                                                                                                                                                                                                                                 Line No.=FIELD(Whse. Document Line No.))
                                                                                                                                                                                                                                                 ELSE IF (Whse. Document Type=CONST(Internal Put-away)) "Whse. Internal Put-away Line"."Line No." WHERE (No.=FIELD(Whse. Document No.),
                                                                                                                                                                                                                                                                                                                                                         Line No.=FIELD(Whse. Document Line No.))
                                                                                                                                                                                                                                                                                                                                                         ELSE IF (Whse. Document Type=CONST(Internal Pick)) "Whse. Internal Pick Line"."Line No." WHERE (No.=FIELD(Whse. Document No.),
                                                                                                                                                                                                                                                                                                                                                                                                                                                         Line No.=FIELD(Whse. Document Line No.))
                                                                                                                                                                                                                                                                                                                                                                                                                                                         ELSE IF (Whse. Document Type=CONST(Production)) "Prod. Order Line"."Line No." WHERE (Prod. Order No.=FIELD(No.),
ine No.=FIELD(Line No.));
                                                   CaptionML=[ENU=Whse. Document Line No.;
                                                              ESP=N§ l¡n. documento almac‚n];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 7309;   ;Bin Ranking         ;Integer       ;CaptionML=[ENU=Bin Ranking;
                                                              ESP=Ranking ubicaci¢n];
                                                   Editable=No }
    { 7310;   ;Cubage              ;Decimal       ;CaptionML=[ENU=Cubage;
                                                              ESP=Cubicaje];
                                                   DecimalPlaces=0:5 }
    { 7311;   ;Weight              ;Decimal       ;CaptionML=[ENU=Weight;
                                                              ESP=Peso];
                                                   DecimalPlaces=0:5 }
    { 7312;   ;Special Equipment Code;Code10      ;TableRelation="Special Equipment";
                                                   CaptionML=[ENU=Special Equipment Code;
                                                              ESP=C¢d. equipo especial] }
    { 7313;   ;Bin Type Code       ;Code10        ;TableRelation="Bin Type";
                                                   CaptionML=[ENU=Bin Type Code;
                                                              ESP=C¢d. tipo ubicaci¢n] }
    { 7314;   ;Breakbulk No.       ;Integer       ;CaptionML=[ENU=Breakbulk No.;
                                                              ESP=N§ divisi¢n bulto];
                                                   BlankZero=Yes }
    { 7315;   ;Original Breakbulk  ;Boolean       ;CaptionML=[ENU=Original Breakbulk;
                                                              ESP=Divisi¢n bulto inicial] }
    { 7316;   ;Breakbulk           ;Boolean       ;CaptionML=[ENU=Breakbulk;
                                                              ESP=Divisi¢n bulto] }
    { 7317;   ;Cross-Dock Information;Option      ;CaptionML=[ENU=Cross-Dock Information;
                                                              ESP=Informaci¢n tr nsito directo];
                                                   OptionCaptionML=[ENU=" ,Cross-Dock Items,Some Items Cross-Docked";
                                                                    ESP=" ,Prods. tr ns. direc.,Algunos prods. tr ns. dir."];
                                                   OptionString=[ ,Cross-Dock Items,Some Items Cross-Docked] }
  }
  KEYS
  {
    {    ;Activity Type,No.,Line No.              ;SumIndexFields=Qty. to Handle (Base);
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;No.,Line No.,Activity Type               }
    {    ;Source Type,Source Subtype,Source No.,Source Line No.,Source Subline No.,Unit of Measure Code,Action Type,Breakbulk No.,Original Breakbulk;
                                                   SumIndexFields=Qty. Outstanding,Qty. Outstanding (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Activity Type,No.,Sorting Sequence No.  ;MaintainSQLIndex=No }
    {    ;Activity Type,No.,Shelf No.             ;MaintainSQLIndex=No }
    {    ;Activity Type,No.,Location Code,Source Document,Source No.,Action Type,Zone Code;
                                                   MaintainSQLIndex=No }
    {    ;Activity Type,No.,Due Date,Action Type,Bin Code;
                                                   MaintainSQLIndex=No }
    {    ;Activity Type,No.,Bin Code,Breakbulk No.,Action Type;
                                                   MaintainSQLIndex=No }
    {    ;Activity Type,No.,Bin Ranking,Breakbulk No.,Action Type;
                                                   MaintainSQLIndex=No }
    {    ;Activity Type,No.,Destination Type,Destination No.,Action Type,Bin Code;
                                                   MaintainSQLIndex=No }
    {    ;Activity Type,No.,Whse. Document Type,Whse. Document No.,Whse. Document Line No.;
                                                   MaintainSQLIndex=No }
    {    ;Activity Type,No.,Action Type,Bin Code  ;MaintainSQLIndex=No }
    {    ;Activity Type,No.,Item No.,Variant Code,Action Type,Bin Code;
                                                   MaintainSQLIndex=No }
    {    ;Whse. Document No.,Whse. Document Type,Activity Type,Whse. Document Line No.,Action Type,Unit of Measure Code,Original Breakbulk,Breakbulk No.,Lot No.,Serial No.;
                                                   SumIndexFields=Qty. Outstanding (Base),Qty. Outstanding;
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,Bin Code,Location Code,Action Type,Variant Code,Unit of Measure Code,Breakbulk No.,Activity Type,Lot No.,Serial No.,Original Breakbulk;
                                                   SumIndexFields=Quantity,Qty. (Base),Qty. Outstanding,Qty. Outstanding (Base),Cubage,Weight;
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,Location Code,Activity Type,Bin Type Code,Unit of Measure Code,Variant Code,Breakbulk No.,Action Type,Lot No.,Serial No.;
                                                   SumIndexFields=Qty. Outstanding (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Bin Code,Location Code,Action Type,Breakbulk No.;
                                                   SumIndexFields=Cubage,Weight;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Location Code,Activity Type              }
    {    ;Source No.,Source Line No.,Source Subline No.,Serial No.,Lot No.;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      Text002@1002 : TextConst 'ENU=You cannot handle more than the outstanding %1 units.;ESP=No puede manipular m s de %1 unidades pendientes.';
      Text003@1003 : TextConst 'ENU=must not be %1;ESP=No puede ser %1.';
      Text004@1004 : TextConst 'ENU=If you delete %1 %2, %3 %4, %5 %6\the quantity to %7 will be imbalanced.\Do you still want to delete the %8?;ESP=Si elimina %1 %2, %3 %4, %5 %6\la cantidad a %7 no cuadrar .\¨Desea eliminar el %8?';
      Text005@1045 : TextConst 'ENU=You must not change the %1 in breakbulk lines.;ESP=No debe cambiar el %1 en l¡ns. divisi¢n bulto.';
      Text006@1006 : TextConst 'ENU=The update was interrupted to respect the warning.;ESP=Se ha interrumpido la actualiz. para respetar la advertencia.';
      Location@1026 : Record 14;
      Item@1008 : Record 27;
      Bin@1025 : Record 7354;
      ItemUnitOfMeasure@1010 : Record 5404;
      ItemTrackingCode@1020 : Record 6502;
      ItemAvailByDate@1011 : Form 157;
      ItemAvailByVar@1012 : Form 5414;
      ItemAvailByLoc@1013 : Form 492;
      ItemTrackingMgt@1005 : Codeunit 6500;
      ItemTrackingDataCollection@1018 : Codeunit 6501;
      WMSMgt@1019 : Codeunit 7302;
      CreatePick@1032 : Codeunit 7312;
      HideValidationDialog@1021 : Boolean;
      Text007@1007 : TextConst 'ENU=You must not split breakbulk lines.;ESP=No debe dividir las l¡ns. divisi¢n bulto.';
      Text008@1022 : TextConst 'ENU=Quantity available to pick is not enough to fill in all the lines.;ESP=Cdad. disp. para picking no es suficiente para cubrir todas las l¡neas.';
      Text009@1023 : TextConst 'ENU=If you delete the %1\you must recreate related Warehouse Worksheet Lines manually.\\Do you want to delete the %1?;ESP=Si elimina el %1\debe recrear las l¡neas de hoja de almac‚n relacionadas manualmente.\\¨Desea eliminar el %1?';
      Text011@1027 : TextConst 'ENU=You cannot enter the %1 of the %2 as %3.;ESP=No puede insertar el %1 del %2 como %3.';
      Text012@1028 : TextConst 'ENU=The %1 %2 exceeds the quantity available to pick %3 of the %4.\Do you still want to enter this %5?;ESP=El %1 %2 excede la cdad. disponible picking %3 del %4.\¨Desea insertar este %5?';
      Text013@1029 : TextConst 'ENU=All related Warehouse Activity Lines are deleted.;ESP=Se han borrado todas las l¡ns. actividad almac‚n relacionadas.';
      ConfirmDeleteLine@1014 : Boolean;
      SNRequired@1009 : Boolean;
      LNRequired@1015 : Boolean;
      Text014@1030 : TextConst 'ENU=%1 %2 has already been reserved for another document.;ESP=%1 %2 fue reservado para otro documento.';
      Text015@1031 : TextConst 'ENU=The total available quantity has already been applied.;ESP=Ya liquid¢ el total de la cantidad disponible.';
      Text016@1016 : TextConst 'ENU=Reserved item %1 is not on inventory.;ESP=Producto reservado %1 no est  en existencias.';
      Text017@1000 : TextConst 'ENU=%1 %2 is not available on inventory or it has already been reserved for another document.;ESP=%1 %2 no est  disponible en el inventario o fue reservado para otro documento.';
      UseBaseQty@1017 : Boolean;

    PROCEDURE ItemAvailability@12(AvailabilityType@1000 : 'Date,Variant,Location');
    BEGIN
      TESTFIELD("Item No.");
      Item.RESET;
      Item.GET("Item No.");
      Item.SETRANGE("No.","Item No.");
      Item.SETRANGE("Date Filter",0D,"Due Date");

      CASE AvailabilityType OF
        AvailabilityType::Date:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Location Filter","Location Code");
            Item.SETRANGE("Bin Filter");
            CLEAR(ItemAvailByDate);
            ItemAvailByDate.SETRECORD(Item);
            ItemAvailByDate.SETTABLEVIEW(Item);
            ItemAvailByDate.RUNMODAL;
          END;
        AvailabilityType::Variant:
          BEGIN
            Item.SETRANGE("Location Filter","Location Code");
            Item.SETRANGE("Bin Filter");
            CLEAR(ItemAvailByVar);
            ItemAvailByVar.SETRECORD(Item);
            ItemAvailByVar.SETTABLEVIEW(Item);
            ItemAvailByVar.RUNMODAL;
          END;
        AvailabilityType::Location:
          BEGIN
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Bin Filter");
            CLEAR(ItemAvailByLoc);
            ItemAvailByLoc.SETRECORD(Item);
            ItemAvailByLoc.SETTABLEVIEW(Item);
            ItemAvailByLoc.RUNMODAL;
          END;
      END;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE CalcQty@5(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE AutofillQtyToHandle@10(VAR WhseActivLine@1000 : Record 5767);
    VAR
      NotEnough@1001 : Boolean;
    BEGIN
      WITH WhseActivLine DO BEGIN
        NotEnough := FALSE;
        SetHideValidationDialog(TRUE);
        IF FIND('-') THEN
          REPEAT
            VALIDATE("Qty. to Handle","Qty. Outstanding");
            IF "Qty. to Handle (Base)" <> "Qty. Outstanding (Base)" THEN
              VALIDATE("Qty. to Handle (Base)","Qty. Outstanding (Base)");
            MODIFY;

            IF NOT NotEnough THEN
              IF "Qty. to Handle" < "Qty. Outstanding" THEN
                NotEnough := TRUE;
          UNTIL NEXT = 0;
        SetHideValidationDialog(FALSE);
        IF NotEnough THEN
          MESSAGE(Text008);
      END;
    END;

    PROCEDURE DeleteQtyToHandle@11(VAR WhseActivLine@1000 : Record 5767);
    BEGIN
      WITH WhseActivLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            VALIDATE("Qty. to Handle",0);
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      IF Item."No." = "Item No." THEN
        EXIT;

      Item.GET("Item No.");
      IF Item."Item Tracking Code" <> '' THEN
        ItemTrackingCode.GET(Item."Item Tracking Code")
      ELSE
        CLEAR(ItemTrackingCode);
    END;

    PROCEDURE SetHideValidationDialog@8(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE DeleteRelatedWhseActivLines@13(WhseActivLine@1003 : Record 5767;CalledFromHeader@1000 : Boolean);
    VAR
      WhseActivLine2@1002 : Record 5767;
      WhseActivLine3@1005 : Record 5767;
      WhseWkshLine@1001 : Record 7326;
      Confirmed@1004 : Boolean;
    BEGIN
      WITH WhseActivLine DO BEGIN
        IF ("Activity Type" IN ["Activity Type"::"Invt. Put-away","Activity Type"::"Invt. Pick"]) AND
           (NOT CalledFromHeader)
        THEN BEGIN
          IF "Activity Type" = "Activity Type"::"Invt. Pick" THEN
            CreatePick.AdjustReservation(
              "Qty. Outstanding (Base)","Source Type","Source Subtype",
              "Source No.","Source Line No.","Source Subline No.",1);
          EXIT
        END;
        WhseActivLine2.SETCURRENTKEY(
          "Activity Type","No.","Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
        WhseActivLine2.SETRANGE("Activity Type","Activity Type");
        WhseActivLine2.SETRANGE("No.","No.");
        WhseWkshLine.SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
        IF WhseActivLine2.FIND('-') THEN
          REPEAT
            WhseWkshLine.SETRANGE("Whse. Document Type",WhseActivLine2."Whse. Document Type");
            WhseWkshLine.SETRANGE("Whse. Document No.",WhseActivLine2."Whse. Document No.");
            WhseWkshLine.SETRANGE("Whse. Document Line No.",WhseActivLine2."Whse. Document Line No.");
            IF WhseWkshLine.FIND('-') THEN
              IF NOT CONFIRM(Text009,FALSE,TABLECAPTION) THEN
                ERROR(Text006)
              ELSE
                Confirmed := TRUE;
          UNTIL (WhseActivLine2.NEXT = 0) OR Confirmed;

        IF (NOT CalledFromHeader) AND
           ("Action Type" <> "Action Type"::" ") THEN BEGIN
          WhseActivLine2.SETRANGE("Whse. Document Type","Whse. Document Type");
          WhseActivLine2.SETRANGE("Whse. Document No.","Whse. Document No.");
          WhseActivLine2.SETRANGE("Whse. Document Line No.","Whse. Document Line No.");
          WhseActivLine2.SETRANGE("Breakbulk No.","Breakbulk No.");
          WhseActivLine2.SETRANGE("Source No.","Source No.");
          WhseActivLine2.SETRANGE("Source Line No.","Source Line No.");
          WhseActivLine2.SETRANGE("Source Subline No.","Source Subline No.");
          WhseActivLine2.SETRANGE("Serial No.","Serial No.");
          WhseActivLine2.SETRANGE("Lot No.","Lot No.");
          IF WhseActivLine2.FIND('-') THEN BEGIN
            WhseActivLine3.COPY(WhseActivLine2);
            WhseActivLine3.SETRANGE("Action Type","Action Type");
            WhseActivLine3.SETFILTER("Line No.",'<>%1',"Line No.");
            IF WhseActivLine3.FIND('-') THEN BEGIN
              IF NOT ConfirmDeleteLine THEN
                IF NOT CONFIRM(
                  STRSUBSTNO(
                    Text004,
                    FIELDCAPTION("Activity Type"),"Activity Type", FIELDCAPTION("No."),"No.",
                    FIELDCAPTION("Line No."),"Line No.","Action Type",TABLECAPTION),
                  FALSE) THEN
                    ERROR(Text006);
              ConfirmDeleteLine := TRUE;
              IF (WhseActivLine2."Activity Type" = WhseActivLine2."Activity Type"::Pick) AND
                 (WhseActivLine2."Action Type" <> WhseActivLine2."Action Type"::Place)
              THEN
                CreatePick.AdjustReservation(
                  WhseActivLine2."Qty. Outstanding (Base)",WhseActivLine2."Source Type",WhseActivLine2."Source Subtype",
                  WhseActivLine2."Source No.",WhseActivLine2."Source Line No.",WhseActivLine2."Source Subline No.",1);
              EXIT;
            END;
          END;
        END;
        IF NOT CalledFromHeader THEN
          IF "Action Type" <> "Action Type"::" " THEN
            WhseActivLine2.SETFILTER("Line No.",'<>%1',"Line No.")
          ELSE
            WhseActivLine2.SETRANGE("Line No.","Line No.");
        IF WhseActivLine2.FIND('-') THEN
          REPEAT
            WhseActivLine2.DELETE; // to ensure correct item tracking update
            DeleteBinContent(WhseActivLine2);
            UpdateRelatedItemTrkg(WhseActivLine2);
            IF (WhseActivLine2."Activity Type" = WhseActivLine2."Activity Type"::Pick) AND
               (WhseActivLine2."Action Type" <> WhseActivLine2."Action Type"::Place) OR
               (WhseActivLine2."Activity Type" = WhseActivLine2."Activity Type"::"Invt. Pick")
            THEN
              CreatePick.AdjustReservation(
                  WhseActivLine2."Qty. Outstanding (Base)",WhseActivLine2."Source Type",WhseActivLine2."Source Subtype",
                  WhseActivLine2."Source No.",WhseActivLine2."Source Line No.",WhseActivLine2."Source Subline No.",1);
          UNTIL WhseActivLine2.NEXT = 0;
        IF (NOT CalledFromHeader) AND
           ("Action Type" <> "Action Type"::" ") THEN BEGIN
          WhseActivLine2.RESET;
          WhseActivLine2.SETRANGE("Activity Type","Activity Type");
          WhseActivLine2.SETRANGE("No.","No.");
          IF WhseActivLine2.FIND('-') THEN
            MESSAGE(Text013);
        END;
      END;
    END;

    PROCEDURE CheckWhseDocLine@1();
    VAR
      PostedWhseRcptLine@1004 : Record 7319;
      WhseShptLine@1001 : Record 7321;
      WhseInternalPutAwayLine@1005 : Record 7332;
      WhseInternalPickLine@1002 : Record 7334;
    BEGIN
      IF "Bin Code" <> '' THEN BEGIN
        IF "Breakbulk No." <> 0 THEN
          EXIT;
        IF ("Activity Type" = "Activity Type"::Pick) AND
           ("Action Type" = "Action Type"::Place)
        THEN BEGIN
          CASE "Whse. Document Type" OF
            "Whse. Document Type"::Shipment:
              BEGIN
                WhseShptLine.GET("Whse. Document No.","Whse. Document Line No.");
                TESTFIELD("Bin Code",WhseShptLine."Bin Code");
              END;
            "Whse. Document Type"::"Internal Pick":
              BEGIN
                WhseInternalPickLine.GET("Whse. Document No.","Whse. Document Line No.");
                TESTFIELD("Bin Code",WhseInternalPickLine."To Bin Code");
              END;
            "Whse. Document Type"::Production:
              BEGIN
                GetLocation("Location Code");
                IF Location."Directed Put-away and Pick" THEN
                  TESTFIELD("Bin Code",Location."Inbound Production Bin Code");
              END;
          END;
        END;
        IF ("Activity Type" = "Activity Type"::"Put-away") AND
           ("Action Type" = "Action Type"::Take)
        THEN BEGIN
          CASE "Whse. Document Type" OF
            "Whse. Document Type"::Receipt:
              BEGIN
                PostedWhseRcptLine.GET("Whse. Document No.","Whse. Document Line No.");
                TESTFIELD("Bin Code",PostedWhseRcptLine."Bin Code");
              END;
            "Whse. Document Type"::"Internal Put-away":
                BEGIN
                WhseInternalPutAwayLine.GET("Whse. Document No.","Whse. Document Line No.");
                TESTFIELD("Bin Code",WhseInternalPutAwayLine."From Bin Code");
              END;
          END;
        END;
      END;
    END;

    PROCEDURE GetBin@19(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]) : Boolean;
    BEGIN
      IF (Bin."Location Code" <> LocationCode) OR
         (Bin.Code <> BinCode)
      THEN BEGIN
        GetLocation(LocationCode);
        IF NOT Location."Directed Put-away and Pick" THEN
          EXIT(TRUE);
        IF Bin.GET(LocationCode,BinCode) THEN BEGIN
          CheckBin;
          EXIT(TRUE);
        END ELSE
          EXIT(FALSE);
      END ELSE BEGIN
        CheckBin;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetItemUnitOfMeasure@18();
    BEGIN
      GetItem;
      Item.TESTFIELD("No.");
      IF (Item."No." <> ItemUnitOfMeasure."Item No.") OR
         ("Unit of Measure Code" <> ItemUnitOfMeasure.Code)
      THEN
        IF NOT ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") THEN
          ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    PROCEDURE GetLocation@2(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE CheckBin@17();
    BEGIN
      GetLocation("Location Code");
      Location.TESTFIELD("Directed Put-away and Pick");
      IF Location."Adjustment Bin Code" <> '' THEN
        IF "Bin Code" = Location."Adjustment Bin Code" THEN
          ERROR(
            Text011,
              Location.FIELDCAPTION("Adjustment Bin Code"),Location.TABLECAPTION,
              FIELDCAPTION("Bin Code"));
    END;

    PROCEDURE CheckIncreaseCapacity@6(DeductLineCapacity@1003 : Boolean);
    VAR
      BinContent@1002 : Record 7302;
      DeductCubage@1001 : Decimal;
      DeductWeight@1000 : Decimal;
    BEGIN
      IF DeductLineCapacity THEN BEGIN
        DeductCubage := xRec.Cubage;
        DeductWeight := xRec.Weight;
      END;

      IF BinContent.GET(
        "Location Code","Bin Code",
        "Item No.","Variant Code","Unit of Measure Code")
      THEN
        BinContent.CheckIncreaseBinContent(
          "Qty. to Handle (Base)","Qty. Outstanding (Base)",
          DeductCubage,DeductWeight,Cubage,Weight,FALSE)
      ELSE
        Bin.CheckIncreaseBin(
          "Bin Code","Item No.","Qty. to Handle",
          DeductCubage,DeductWeight,Cubage,Weight,FALSE);
    END;

    PROCEDURE SplitLine@27(VAR WhseActivLine@1000 : Record 5767);
    VAR
      NewWhseActivLine@1002 : Record 5767;
      LineSpacing@1001 : Integer;
    BEGIN
      WhseActivLine.TESTFIELD("Qty. to Handle");
      IF WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Put-away" THEN BEGIN
        IF WhseActivLine."Breakbulk No." <> 0 THEN
          ERROR(Text007);
        WhseActivLine.TESTFIELD("Action Type",WhseActivLine."Action Type"::Place);
      END;
      IF WhseActivLine."Qty. to Handle" = WhseActivLine."Qty. Outstanding" THEN
        WhseActivLine.FIELDERROR(
          "Qty. to Handle",STRSUBSTNO(Text003,WhseActivLine.FIELDCAPTION("Qty. Outstanding")));
      NewWhseActivLine := WhseActivLine;
      NewWhseActivLine.SETRANGE("No.",WhseActivLine."No.");
      IF NewWhseActivLine.FIND('>') THEN
        LineSpacing :=
          (NewWhseActivLine."Line No." - WhseActivLine."Line No.") DIV 2
      ELSE
        LineSpacing := 10000;

      NewWhseActivLine.RESET;
      NewWhseActivLine.INIT;
      NewWhseActivLine := WhseActivLine;
      NewWhseActivLine."Line No." := NewWhseActivLine."Line No." + LineSpacing;
      NewWhseActivLine.Quantity :=
        WhseActivLine."Qty. Outstanding" - WhseActivLine."Qty. to Handle";
      NewWhseActivLine."Qty. (Base)":=
        WhseActivLine."Qty. Outstanding (Base)" - WhseActivLine."Qty. to Handle (Base)";
      NewWhseActivLine."Qty. Outstanding" := NewWhseActivLine.Quantity;
      NewWhseActivLine."Qty. Outstanding (Base)" := NewWhseActivLine."Qty. (Base)";
      NewWhseActivLine."Qty. to Handle" := NewWhseActivLine.Quantity;
      NewWhseActivLine."Qty. to Handle (Base)" := NewWhseActivLine."Qty. (Base)";
      NewWhseActivLine."Qty. Handled" := 0;
      NewWhseActivLine."Qty. Handled (Base)" := 0;
      GetLocation("Location Code");
      IF Location."Directed Put-away and Pick" THEN BEGIN
        WMSMgt.CalcCubageAndWeight(
          NewWhseActivLine."Item No.",NewWhseActivLine."Unit of Measure Code",
          NewWhseActivLine."Qty. to Handle",NewWhseActivLine.Cubage,NewWhseActivLine.Weight);
        IF NOT
          (((NewWhseActivLine."Activity Type" = NewWhseActivLine."Activity Type"::"Put-away") AND
            (NewWhseActivLine."Action Type" = NewWhseActivLine."Action Type"::Take)) OR
           ((NewWhseActivLine."Activity Type" = NewWhseActivLine."Activity Type"::Pick) AND
            (NewWhseActivLine."Action Type" = NewWhseActivLine."Action Type"::Place)) OR
           ("Breakbulk No." <> 0))
        THEN BEGIN
          NewWhseActivLine."Zone Code" := '';
          NewWhseActivLine."Bin Code" := '';
        END;
      END;
      NewWhseActivLine.INSERT;

      WhseActivLine.Quantity := WhseActivLine."Qty. to Handle" + WhseActivLine."Qty. Handled";
      WhseActivLine."Qty. (Base)" :=
        WhseActivLine."Qty. to Handle (Base)" + WhseActivLine."Qty. Handled (Base)";
      WhseActivLine."Qty. Outstanding" := WhseActivLine."Qty. to Handle";
      WhseActivLine."Qty. Outstanding (Base)" := WhseActivLine."Qty. to Handle (Base)";
      IF Location."Directed Put-away and Pick" THEN
        WMSMgt.CalcCubageAndWeight(
          WhseActivLine."Item No.",WhseActivLine."Unit of Measure Code",
          WhseActivLine."Qty. to Handle",WhseActivLine.Cubage,WhseActivLine.Weight);
      WhseActivLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdateBreakbulkQtytoHandle@4();
    VAR
      WhseActivLine@1000 : Record 5767;
    BEGIN
      WhseActivLine.SETCURRENTKEY(
        "Activity Type","No.","Whse. Document Type",
        "Whse. Document No.","Whse. Document Line No.");
      WhseActivLine.SETRANGE("Activity Type","Activity Type");
      WhseActivLine.SETRANGE("No.","No.");
      WhseActivLine.SETRANGE("Whse. Document Type","Whse. Document Type");
      WhseActivLine.SETRANGE("Whse. Document No.","Whse. Document No.");
      WhseActivLine.SETRANGE("Whse. Document Line No.","Whse. Document Line No.");
      WhseActivLine.SETRANGE("Bin Code","Bin Code");
      IF "Original Breakbulk" THEN
        WhseActivLine.SETRANGE("Original Breakbulk",TRUE)
      ELSE
        WhseActivLine.SETRANGE("Breakbulk No.","Breakbulk No.");
      WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Place);
      IF WhseActivLine.FIND('-') THEN BEGIN
        WhseActivLine."Qty. to Handle (Base)" := "Qty. to Handle (Base)";
        WhseActivLine."Qty. to Handle" := WhseActivLine.CalcQty("Qty. to Handle (Base)");
        WMSMgt.CalcCubageAndWeight(
          WhseActivLine."Item No.",WhseActivLine."Unit of Measure Code",
          WhseActivLine."Qty. to Handle",WhseActivLine.Cubage,WhseActivLine.Weight);
        WhseActivLine.MODIFY;
        WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Take);
        IF "Original Breakbulk" THEN BEGIN
          WhseActivLine.SETRANGE("Original Breakbulk");
          WhseActivLine.SETRANGE("Breakbulk No.",WhseActivLine."Breakbulk No.")
        END ELSE BEGIN
          WhseActivLine.SETRANGE("Breakbulk No.");
          WhseActivLine.SETRANGE("Original Breakbulk",TRUE);
        END;
        IF WhseActivLine.FIND('-') THEN BEGIN
          WhseActivLine."Qty. to Handle (Base)" := "Qty. to Handle (Base)";
          WhseActivLine."Qty. to Handle" := WhseActivLine.CalcQty("Qty. to Handle (Base)");
          WMSMgt.CalcCubageAndWeight(
            WhseActivLine."Item No.",WhseActivLine."Unit of Measure Code",
            WhseActivLine."Qty. to Handle",WhseActivLine.Cubage,WhseActivLine.Weight);
          WhseActivLine.MODIFY;
        END;
      END;
    END;

    PROCEDURE ShowWhseDoc@22();
    VAR
      WhseShptHeader@1015 : Record 7320;
      PostedWhseRcptHeader@1014 : Record 7318;
      WhseIntPickHeader@1013 : Record 7333;
      WhseIntPutawayHeader@1012 : Record 7331;
      RelProdOrder@1001 : Record 5405;
      WhseShptCard@1011 : Form 7335;
      PostedWhseRcptCard@1006 : Form 7330;
      WhseIntPickCard@1004 : Form 7357;
      WhseIntPutawayCard@1000 : Form 7354;
      RelProdOrderCard@1002 : Form 99000831;
    BEGIN
      CASE "Whse. Document Type" OF
        "Whse. Document Type"::Shipment:
          BEGIN
            WhseShptHeader.SETRANGE("No.","Whse. Document No.");
            WhseShptCard.SETTABLEVIEW(WhseShptHeader);
            WhseShptCard.RUNMODAL;
          END;
        "Whse. Document Type"::Receipt:
          BEGIN
            PostedWhseRcptHeader.SETRANGE("No.","Whse. Document No.");
            PostedWhseRcptCard.SETTABLEVIEW(PostedWhseRcptHeader);
            PostedWhseRcptCard.RUNMODAL;
          END;
        "Whse. Document Type"::"Internal Pick":
          BEGIN
            WhseIntPickHeader.SETRANGE("No.","Whse. Document No.");
            WhseIntPickCard.SETTABLEVIEW(WhseIntPickHeader);
            WhseIntPickCard.RUNMODAL;
          END;
        "Whse. Document Type"::"Internal Put-away":
          BEGIN
            WhseIntPutawayHeader.SETRANGE("No.","Whse. Document No.");
            WhseIntPutawayCard.SETTABLEVIEW(WhseIntPutawayHeader);
            WhseIntPutawayCard.RUNMODAL;
          END;
        "Whse. Document Type"::Production:
          BEGIN
            RelProdOrder.SETRANGE(Status,"Source Subtype");
            RelProdOrder.SETRANGE("No.","Source No.");
            RelProdOrderCard.SETTABLEVIEW(RelProdOrder);
            RelProdOrderCard.RUNMODAL;
          END;
      END;
    END;

    PROCEDURE ShowActivityDoc@23();
    VAR
      WhseActivHeader@1001 : Record 5766;
      WhsePickCard@1011 : Form 5779;
      WhsePutawayCard@1006 : Form 5770;
      WhseMovCard@1004 : Form 7315;
      InvtPickCard@1000 : Form 7377;
      InvtPutAwayCard@1002 : Form 7375;
    BEGIN
      WhseActivHeader.SETRANGE(Type,"Activity Type");
      WhseActivHeader.SETRANGE("No.","No.");
      CASE "Activity Type" OF
        "Activity Type"::Pick:
          BEGIN
            WhsePickCard.SETTABLEVIEW(WhseActivHeader);
            WhsePickCard.RUNMODAL;
          END;
        "Activity Type"::"Put-away":
          BEGIN
            WhsePutawayCard.SETTABLEVIEW(WhseActivHeader);
            WhsePutawayCard.RUNMODAL;
          END;
        "Activity Type"::Movement:
          BEGIN
            WhseMovCard.SETTABLEVIEW(WhseActivHeader);
            WhseMovCard.RUNMODAL;
          END;
        "Activity Type"::"Invt. Pick":
          BEGIN
            InvtPickCard.SETTABLEVIEW(WhseActivHeader);
            InvtPickCard.RUNMODAL;
          END;
        "Activity Type"::"Invt. Put-away":
          BEGIN
            InvtPutAwayCard.SETTABLEVIEW(WhseActivHeader);
            InvtPutAwayCard.RUNMODAL;
          END;
      END;
    END;

    PROCEDURE ChangeUOMCode@35(VAR WhseActivLine@1000 : Record 5767;VAR WhseActivLine2@1003 : Record 5767);
    BEGIN
      IF "Breakbulk No." = 0 THEN BEGIN
        IF ((Quantity <> "Qty. to Handle") OR ("Qty. Handled" <> 0)) THEN
          CreateNewUOMLine("Action Type",WhseActivLine,WhseActivLine2)
        ELSE BEGIN
          Rec := WhseActivLine2;
          GetLocation("Location Code");
          IF Location."Directed Put-away and Pick" THEN
            WMSMgt.CalcCubageAndWeight(
              "Item No.","Unit of Measure Code","Qty. to Handle",Cubage,Weight);
          MODIFY;
        END;
      END;
    END;

    PROCEDURE CreateNewUOMLine@34(ActType@1000 : ',Take,Place';WhseActLine@1001 : Record 5767;WhseActLine2@1002 : Record 5767);
    VAR
      NewWhseActivLine@1004 : Record 5767;
      LineSpacing@1003 : Integer;
    BEGIN
      NewWhseActivLine := WhseActLine;
      IF NewWhseActivLine.FIND('>') THEN
        LineSpacing :=
          (NewWhseActivLine."Line No." - WhseActLine."Line No.") DIV 2
      ELSE
        LineSpacing := 10000;

      NewWhseActivLine.RESET;
      NewWhseActivLine.INIT;
      NewWhseActivLine := WhseActLine2;
      NewWhseActivLine."Line No." := NewWhseActivLine."Line No." + LineSpacing;
      GetLocation("Location Code");
      IF Location."Directed Put-away and Pick" THEN
        WMSMgt.CalcCubageAndWeight(
          NewWhseActivLine."Item No.",NewWhseActivLine."Unit of Measure Code",
          NewWhseActivLine."Qty. to Handle",NewWhseActivLine.Cubage,NewWhseActivLine.Weight);
      NewWhseActivLine."Action Type" := ActType;
      NewWhseActivLine.VALIDATE("Qty. Handled",0);
      NewWhseActivLine.INSERT;

      WhseActLine."Qty. Outstanding" :=
        WhseActLine."Qty. Outstanding" - WhseActLine."Qty. to Handle";
      WhseActLine."Qty. Outstanding (Base)" :=
        WhseActLine."Qty. Outstanding (Base)" - WhseActLine."Qty. to Handle (Base)";
      WhseActLine.Quantity :=
        WhseActLine.Quantity - WhseActLine."Qty. to Handle";
      WhseActLine."Qty. (Base)" :=
        WhseActLine."Qty. (Base)" - WhseActLine."Qty. to Handle (Base)";
      WhseActLine.VALIDATE("Qty. to Handle",WhseActLine."Qty. Outstanding");
      IF Location."Directed Put-away and Pick" THEN
        WMSMgt.CalcCubageAndWeight(
          WhseActLine."Item No.",WhseActLine."Unit of Measure Code",
          WhseActLine."Qty. to Handle",WhseActLine.Cubage,WhseActLine.Weight);
      WhseActLine.MODIFY;
    END;

    PROCEDURE UpdateRelatedItemTrkg@3(WhseActivLine@1000 : Record 5767);
    VAR
      WhseItemTrkgLine@1002 : Record 6550;
    BEGIN
      IF (WhseActivLine."Serial No." <> '') OR (WhseActivLine."Lot No." <> '') THEN
        BEGIN
          WhseItemTrkgLine.SETCURRENTKEY("Serial No.","Lot No.");
          WhseItemTrkgLine.SETRANGE("Serial No.",WhseActivLine."Serial No.");
          WhseItemTrkgLine.SETRANGE("Lot No.",WhseActivLine."Lot No.");
          CASE WhseActivLine."Whse. Document Type" OF
            WhseActivLine."Whse. Document Type"::Shipment:
              BEGIN
                WhseItemTrkgLine.SETRANGE("Source Type",DATABASE::"Warehouse Shipment Line");
                WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Whse. Document No.");
                WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Whse. Document Line No.");
              END;
            WhseActivLine."Whse. Document Type"::"Internal Pick":
              BEGIN
                WhseItemTrkgLine.SETRANGE("Source Type",DATABASE::"Whse. Internal Pick Line");
                WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Whse. Document No.");
                WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Whse. Document Line No.");
              END;
            WhseActivLine."Whse. Document Type"::"Internal Put-away":
              BEGIN
                WhseItemTrkgLine.SETRANGE("Source Type",DATABASE::"Whse. Internal Put-away Line");
                WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Whse. Document No.");
                WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Whse. Document Line No.");
              END;
            WhseActivLine."Whse. Document Type"::Production:
              BEGIN
                WhseItemTrkgLine.SETRANGE("Source Type",WhseActivLine."Source Type");
                WhseItemTrkgLine.SETRANGE("Source Subtype",WhseActivLine."Source Subtype");
                WhseItemTrkgLine.SETRANGE("Source ID",WhseActivLine."Source No.");
                WhseItemTrkgLine.SETRANGE("Source Prod. Order Line",WhseActivLine."Source Line No.");
                WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseActivLine."Source Subline No.");
              END;
          END;
          IF WhseItemTrkgLine.FIND('-') THEN
            REPEAT
              ItemTrackingMgt.CalcWhseItemTrkgLine(WhseItemTrkgLine);
              UpdateReservation(WhseActivLine);
              IF (WhseActivLine."Whse. Document Type" = WhseActivLine."Whse. Document Type"::Production) AND
                 (WhseItemTrkgLine."Quantity Handled (Base)" = 0)
              THEN
                WhseItemTrkgLine.DELETE
              ELSE
                WhseItemTrkgLine.MODIFY;
            UNTIL WhseItemTrkgLine.NEXT = 0;
        END;
    END;

    PROCEDURE LookUpTrackingSummary@50(VAR WhseActivLine@1000 : Record 5767;SearchForSupply@1003 : Boolean;SignFactor@1004 : Integer;TrackingType@1002 : 'SerialNo,LotNo');
    VAR
      TempTrackingSpecification@1001 : TEMPORARY Record 336;
    BEGIN
      WITH WhseActivLine DO BEGIN
        TempTrackingSpecification.INIT;
        TempTrackingSpecification."Source Type" := "Source Type";
        TempTrackingSpecification."Item No." := "Item No.";
        TempTrackingSpecification."Location Code" := "Location Code";
        TempTrackingSpecification.Description := Description;
        TempTrackingSpecification."Variant Code" := "Variant Code";
        TempTrackingSpecification."Source Subtype" := "Source Subtype";
        TempTrackingSpecification."Source ID" := "Source No.";
        TempTrackingSpecification."Source Batch Name" := '';
        TempTrackingSpecification."Source Prod. Order Line" := "Source Subline No.";
        TempTrackingSpecification."Source Ref. No." := "Source Line No.";
        TempTrackingSpecification."Quantity (Base)" := "Qty. Outstanding (Base)";
        TempTrackingSpecification."Qty. to Handle" := "Qty. Outstanding";
        TempTrackingSpecification."Qty. to Handle (Base)" := "Qty. Outstanding (Base)";
        TempTrackingSpecification."Qty. to Invoice" := 0;
        TempTrackingSpecification."Qty. to Invoice (Base)" := 0;
        TempTrackingSpecification."Quantity Handled (Base)" := 0;
        TempTrackingSpecification."Quantity Invoiced (Base)" := 0;
        TempTrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TempTrackingSpecification."Bin Code" := "Bin Code";

        GetItem;
        IF NOT ItemTrackingDataCollection.CurrentDataSetMatches("Item No.","Variant Code","Location Code") THEN
          CLEAR(ItemTrackingDataCollection);
        ItemTrackingDataCollection.SetCurrentBinAndItemTrkgCode("Bin Code",ItemTrackingCode);
        ItemTrackingDataCollection.AssistEditLotSerialNo(
          TempTrackingSpecification,SearchForSupply,SignFactor,TrackingType,"Qty. Outstanding");

        CASE TrackingType OF
          TrackingType::SerialNo:
            IF TempTrackingSpecification."Serial No." <> '' THEN BEGIN
              VALIDATE("Serial No.",TempTrackingSpecification."Serial No.");
              VALIDATE("Expiration Date",TempTrackingSpecification."Expiration Date");
              MODIFY;
            END;
          TrackingType::LotNo:
            IF TempTrackingSpecification."Lot No." <> '' THEN BEGIN
              VALIDATE("Lot No.",TempTrackingSpecification."Lot No.");
              VALIDATE("Expiration Date",TempTrackingSpecification."Expiration Date");
              MODIFY;
            END;
        END;
      END;
    END;

    PROCEDURE CheckReservedItemTrkg@7(CheckType@1001 : 'Serial No.,Lot No.';ItemTrkgCode@1000 : Code[20]);
    VAR
      Item@1006 : Record 27;
      ReservEntry@1002 : Record 337;
      ReservEntry2@1102601001 : Record 337;
      LineReservedQty@1007 : Decimal;
      AvailQtyFromOtherResvLines@1008 : Decimal;
    BEGIN
      CASE CheckType OF
        CheckType::"Serial No.":
          BEGIN
            ReservEntry.SETCURRENTKEY("Item No.","Variant Code","Location Code","Reservation Status");
            ReservEntry.SETRANGE("Item No.","Item No.");
            ReservEntry.SETRANGE("Variant Code","Variant Code");
            ReservEntry.SETRANGE("Location Code","Location Code");
            ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
            ReservEntry.SETRANGE("Serial No.",ItemTrkgCode);
            ReservEntry.SETRANGE(Positive,FALSE);
            IF ReservEntry.FIND('-') AND
               ((ReservEntry."Source Type" <> "Source Type") OR
                (ReservEntry."Source Subtype" <> "Source Subtype") OR
                (ReservEntry."Source ID" <> "Source No.") OR
                (((ReservEntry."Source Ref. No." <> "Source Line No.") AND
                  (ReservEntry."Source Type" <> DATABASE::"Prod. Order Component")) OR
                 (((ReservEntry."Source Prod. Order Line" <> "Source Line No.") OR
                   (ReservEntry."Source Ref. No." <> "Source Subline No.")) AND
                   (ReservEntry."Source Type" = DATABASE::"Prod. Order Component"))))
            THEN
              ERROR(Text014,FIELDCAPTION("Serial No."),ItemTrkgCode);
          END;
        CheckType::"Lot No.":
          BEGIN
            Item.GET("Item No.");
            Item.SETRANGE("Location Filter","Location Code");
            Item.SETRANGE("Variant Filter","Variant Code");
            Item.SETRANGE("Lot No. Filter",ItemTrkgCode);
            Item.CALCFIELDS(Inventory,"Reserved Qty. on Inventory");
            LineReservedQty :=
              WMSMgt.CalcLineReservedQtyonInvt(
                "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",'',ItemTrkgCode);
            ReservEntry.SETCURRENTKEY("Item No.","Variant Code","Location Code","Reservation Status");
            ReservEntry.SETRANGE("Item No.","Item No.");
            ReservEntry.SETRANGE("Variant Code","Variant Code");
            ReservEntry.SETRANGE("Location Code","Location Code");
            ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
            ReservEntry.SETRANGE("Lot No.",ItemTrkgCode);
            ReservEntry.SETRANGE(Positive, TRUE);
            IF ReservEntry.FIND('-') THEN
              REPEAT
                ReservEntry2.GET(ReservEntry."Entry No.",FALSE);
                IF ((ReservEntry2."Source Type" <> "Source Type") OR
                    (ReservEntry2."Source Subtype" <> "Source Subtype") OR
                    (ReservEntry2."Source ID" <> "Source No.") OR
                    (((ReservEntry2."Source Ref. No." <> "Source Line No.") AND
                      (ReservEntry2."Source Type" <> DATABASE::"Prod. Order Component")) OR
                      (((ReservEntry2."Source Prod. Order Line" <> "Source Line No.") OR
                        (ReservEntry2."Source Ref. No." <> "Source Subline No.")) AND
                        (ReservEntry2."Source Type" = DATABASE::"Prod. Order Component"))))
                   AND (ReservEntry2."Lot No." = '') THEN
                     AvailQtyFromOtherResvLines := AvailQtyFromOtherResvLines + ABS(ReservEntry2."Quantity (Base)");
              UNTIL ReservEntry.NEXT = 0;

            IF (Item.Inventory - ABS(Item."Reserved Qty. on Inventory") +
                LineReservedQty + AvailQtyFromOtherResvLines +
                CreatePick.CalcReservQtyOnPicksShips("Location Code","Item No.","Variant Code")) < "Qty. to Handle (Base)"
            THEN
              ERROR(Text017,FIELDCAPTION("Lot No."),ItemTrkgCode);
          END;
      END;
    END;

    PROCEDURE PredefinedItemTrackingQtyBase@9() : Decimal;
    VAR
      ReservEntry@1000 : Record 337;
      QtyBase@1002 : Decimal;
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line");
      ReservEntry.SETRANGE("Source ID","Source No.");
      ReservEntry.SETRANGE("Source Type","Source Type");
      ReservEntry.SETRANGE("Source Subtype","Source Subtype");
      ReservEntry.SETRANGE("Source Batch Name",'');
      IF "Source Type" = DATABASE::"Prod. Order Component" THEN BEGIN
        ReservEntry.SETRANGE("Source Ref. No.","Source Subline No.");
        ReservEntry.SETRANGE("Source Prod. Order Line","Source Line No.");
      END ELSE BEGIN
        ReservEntry.SETRANGE("Source Ref. No.","Source Line No.");
        ReservEntry.SETRANGE("Source Prod. Order Line",0);
      END;
      ReservEntry.SETRANGE(Positive,FALSE);
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      IF ReservEntry.FIND('-') THEN
        REPEAT
          IF (ReservEntry."Serial No." <> "Serial No.") OR (ReservEntry."Lot No." <> "Lot No.") THEN
            QtyBase := QtyBase + ReservEntry."Quantity (Base)";
        UNTIL ReservEntry.NEXT = 0;

      EXIT(QtyBase);
    END;

    PROCEDURE TrackingSpecificationExists@16(VAR TrackingSpecification@1000 : Record 336) : Boolean;
    BEGIN
      TrackingSpecification.RESET;
      TrackingSpecification.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      TrackingSpecification.SETRANGE("Source ID","Source No.");
      TrackingSpecification.SETRANGE("Source Type","Source Type");
      TrackingSpecification.SETRANGE("Source Subtype","Source Subtype");
      TrackingSpecification.SETRANGE("Source Batch Name",'');
      TrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      TrackingSpecification.SETRANGE("Source Ref. No.","Source Line No.");
      EXIT(TrackingSpecification.FIND('-'));
    END;

    LOCAL PROCEDURE DeleteBinContent@21(WhseActivLine@1001 : Record 5767);
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      WITH WhseActivLine DO BEGIN
        IF "Action Type" <> "Action Type"::Place THEN
          EXIT;

        IF BinContent.GET(
          "Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code")
        THEN
          IF NOT BinContent.Fixed THEN BEGIN
            BinContent.CALCFIELDS("Quantity (Base)","Positive Adjmt. Qty. (Base)","Put-away Quantity (Base)");
            IF (BinContent."Quantity (Base)" = 0) AND
               (BinContent."Positive Adjmt. Qty. (Base)" = 0) AND
               (BinContent."Put-away Quantity (Base)" - "Qty. Outstanding (Base)" <= 0)
            THEN
              BinContent.DELETE;
          END;
      END;
    END;

    PROCEDURE UpdateReservation@1102601000(WhseActivLine2@1102601000 : TEMPORARY Record 5767);
    VAR
      TempTrackingSpecification@1102601001 : TEMPORARY Record 336;
    BEGIN
      WITH WhseActivLine2 DO BEGIN
        IF ("Action Type" <> "Action Type"::Take) AND ("Breakbulk No." = 0) AND
           ("Whse. Document Type" = "Whse. Document Type"::Shipment)
        THEN BEGIN
          TempTrackingSpecification.INIT;
          TempTrackingSpecification."Source Type" := "Source Type";
          TempTrackingSpecification."Source Subtype" := "Source Subtype";
          TempTrackingSpecification."Source ID" := "Source No.";
          IF WhseActivLine2."Source Type" = DATABASE::"Prod. Order Component" THEN BEGIN
            TempTrackingSpecification."Source Prod. Order Line" := "Source Line No.";
            TempTrackingSpecification."Source Ref. No." := "Source Subline No.";
          END ELSE BEGIN
            TempTrackingSpecification."Source Prod. Order Line" := 0;
            TempTrackingSpecification."Source Ref. No." := "Source Line No.";
          END;
          TempTrackingSpecification."Qty. to Handle (Base)" := 0;
          TempTrackingSpecification."Entry No." := TempTrackingSpecification."Entry No." + 1;
          TempTrackingSpecification."Creation Date" := TODAY;
          TempTrackingSpecification."Qty. to Handle (Base)" := "Qty. to Handle (Base)";
          TempTrackingSpecification."Item No." := WhseActivLine2."Item No.";
          TempTrackingSpecification."Variant Code" := WhseActivLine2."Variant Code";
          TempTrackingSpecification."Location Code" := WhseActivLine2."Location Code";
          TempTrackingSpecification.Description := WhseActivLine2.Description;
          TempTrackingSpecification."Qty. per Unit of Measure" := WhseActivLine2."Qty. per Unit of Measure";
          TempTrackingSpecification."Serial No." := WhseActivLine2."Serial No.";
          TempTrackingSpecification."Lot No." := WhseActivLine2."Lot No.";
          TempTrackingSpecification."Warranty Date" := WhseActivLine2."Warranty Date";
          TempTrackingSpecification."Expiration Date" := WhseActivLine2."Expiration Date";
          TempTrackingSpecification.Correction := TRUE;
          TempTrackingSpecification.INSERT;
        END;
        ItemTrackingMgt.SetPick("Activity Type" = "Activity Type"::Pick);
        ItemTrackingMgt.SynchronizeWhseItemTracking(TempTrackingSpecification,'');
      END;
    END;

    PROCEDURE TransferFromPickWkshLine@29(WhseWkshLine@1010 : Record 7326);
    BEGIN
      "Activity Type" := "Activity Type"::Pick;
      "Source Type" := WhseWkshLine."Source Type";
      "Source Subtype" := WhseWkshLine."Source Subtype";
      "Source No." := WhseWkshLine."Source No.";
      "Source Line No." := WhseWkshLine."Source Line No.";
      "Source Subline No." := WhseWkshLine."Source Subline No.";
      "Shelf No." := WhseWkshLine."Shelf No.";
      "Item No." := WhseWkshLine."Item No.";
      "Variant Code" := WhseWkshLine."Variant Code";
      Description := WhseWkshLine.Description;
      "Description 2" := WhseWkshLine."Description 2";
      "Due Date" := WhseWkshLine."Due Date";
      "Starting Date" := WORKDATE;
      "Destination Type" := WhseWkshLine."Destination Type";
      "Destination No." := WhseWkshLine."Destination No.";
      "Shipping Agent Code" := WhseWkshLine."Shipping Agent Code";
      "Shipping Agent Service Code" := WhseWkshLine."Shipping Agent Service Code";
      "Shipment Method Code" := WhseWkshLine."Shipment Method Code";
      "Shipping Advice" := WhseWkshLine."Shipping Advice";
      "Whse. Document Type" := WhseWkshLine."Whse. Document Type";
      "Whse. Document No." := WhseWkshLine."Whse. Document No.";
      "Whse. Document Line No." := WhseWkshLine."Whse. Document Line No.";
    END;

    PROCEDURE TransferFromShptLine@28(WhseShptLine@1005 : Record 7321);
    BEGIN
      "Activity Type" := "Activity Type"::Pick;
      "Source Type" := WhseShptLine."Source Type";
      "Source Subtype" := WhseShptLine."Source Subtype";
      "Source No." := WhseShptLine."Source No.";
      "Source Line No." := WhseShptLine."Source Line No.";
      "Shelf No." := WhseShptLine."Shelf No.";
      "Item No." := WhseShptLine."Item No.";
      "Variant Code" := WhseShptLine."Variant Code";
      Description := WhseShptLine.Description;
      "Description 2" := WhseShptLine."Description 2";
      "Due Date" := WhseShptLine."Due Date";
      "Starting Date" := WhseShptLine."Shipment Date";
      "Destination Type" := WhseShptLine."Destination Type";
      "Destination No." := WhseShptLine."Destination No.";
      "Shipping Advice" := WhseShptLine."Shipping Advice";
      "Whse. Document Type" := "Whse. Document Type"::Shipment;
      "Whse. Document No." := WhseShptLine."No.";
      "Whse. Document Line No." := WhseShptLine."Line No.";
    END;

    PROCEDURE TransferFromIntPickLine@26(WhseInternalPickLine@1005 : Record 7334);
    BEGIN
      "Activity Type" := "Activity Type"::Pick;
      "Shelf No." := WhseInternalPickLine."Shelf No.";
      "Item No." := WhseInternalPickLine."Item No.";
      "Variant Code" := WhseInternalPickLine."Variant Code";
      Description := WhseInternalPickLine.Description;
      "Description 2" := WhseInternalPickLine."Description 2";
      "Due Date" := WhseInternalPickLine."Due Date";
      "Starting Date" := WORKDATE;
      "Whse. Document Type" := "Whse. Document Type"::"Internal Pick";
      "Whse. Document No." := WhseInternalPickLine."No.";
      "Whse. Document Line No." := WhseInternalPickLine."Line No.";
    END;

    PROCEDURE TranferFromCompLine@25(ProdOrderCompLine@1005 : Record 5407);
    BEGIN
      "Activity Type" := "Activity Type"::Pick;
      "Source Type" := DATABASE::"Prod. Order Component";
      "Source Subtype" := ProdOrderCompLine.Status;
      "Source No." := ProdOrderCompLine."Prod. Order No.";
      "Source Line No." := ProdOrderCompLine."Prod. Order Line No.";
      "Source Subline No." := ProdOrderCompLine."Line No.";
      "Item No." := ProdOrderCompLine."Item No.";
      "Variant Code" := ProdOrderCompLine."Variant Code";
      Description := ProdOrderCompLine.Description;
      "Due Date" := ProdOrderCompLine."Due Date";
      "Whse. Document Type" := "Whse. Document Type"::Production;
      "Whse. Document No." := ProdOrderCompLine."Prod. Order No.";
      "Whse. Document Line No." := ProdOrderCompLine."Prod. Order Line No.";
    END;

    PROCEDURE TransferFromMovWkshLine@20(WhseWkshLine@1010 : Record 7326);
    BEGIN
      "Activity Type" := "Activity Type"::Movement;
      "Item No." := WhseWkshLine."Item No.";
      "Variant Code" := WhseWkshLine."Variant Code";
      "Starting Date" := WORKDATE;
      Description := WhseWkshLine.Description;
      "Due Date" := WhseWkshLine."Due Date";
      "Zone Code" := Bin."Zone Code";
      "Bin Ranking" := Bin."Bin Ranking";
      "Bin Type Code" := Bin."Bin Type Code";
      "Whse. Document Type" := "Whse. Document Type"::"Movement Worksheet";
      "Whse. Document No." := WhseWkshLine.Name;
      "Whse. Document Line No." := WhseWkshLine."Line No.";
    END;

    BEGIN
    END.
  }
}
