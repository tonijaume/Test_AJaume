OBJECT Table 111 Sales Shipment Line
{
  OBJECT-PROPERTIES
  {
    Date=11/12/10;
    Time=12:00:00;
    Version List=NAVW16.00.10,NAVES4.00;
  }
  PROPERTIES
  {
    Permissions=TableData 32=r,
                TableData 5802=r;
    OnDelete=VAR
               ServItem@1000 : Record 5940;
               SalesDocLineComments@1001 : Record 44;
             BEGIN
               DimMgt.DeletePostedDocDim(DATABASE::"Sales Shipment Line","Document No.","Line No.");

               ServItem.RESET;
               ServItem.SETCURRENTKEY("Sales/Serv. Shpt. Document No.","Sales/Serv. Shpt. Line No.");
               ServItem.SETRANGE("Sales/Serv. Shpt. Document No.","Document No.");
               ServItem.SETRANGE("Sales/Serv. Shpt. Line No.","Line No.");
               ServItem.SETRANGE("Shipment Type",ServItem."Shipment Type"::Sales);
               IF ServItem.FIND('-') THEN
                 REPEAT
                   ServItem.VALIDATE("Sales/Serv. Shpt. Document No.",'');
                   ServItem.VALIDATE("Sales/Serv. Shpt. Line No.",0);
                   ServItem.MODIFY(TRUE);
                 UNTIL ServItem.NEXT = 0;

               SalesDocLineComments.SETRANGE("Document Type",SalesDocLineComments."Document Type"::Shipment);
               SalesDocLineComments.SETRANGE("No.","Document No.");
               SalesDocLineComments.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesDocLineComments.ISEMPTY THEN
                 SalesDocLineComments.DELETEALL;
             END;

    CaptionML=[ENU=Sales Shipment Line;
               ESP=Hist¢rico l¡n. albar n venta];
    LookupFormID=Form525;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ESP=Venta a-N§ cliente];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                                    ESP=" ,Cuenta,Producto,Recurso,Activo fijo,Cargo (prod.)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ESP=Grupo contable];
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ESP=Fecha env¡o] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[ENU=Unit of Measure;
                                                              ESP=Unidad medida] }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;CaptionML=[ENU=Unit Price;
                                                              ESP=Precio venta];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (LCY);
                                                              ESP=Coste unitario (DL)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ESP=% IVA];
                                                   DecimalPlaces=0:6;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=[ENU=Line Discount %;
                                                              ESP=% Descuento l¡nea];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ESP=Permitir dto. factura] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ESP=Peso bruto];
                                                   DecimalPlaces=0:6 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ESP=Peso neto];
                                                   DecimalPlaces=0:6 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ESP=Unidades por lote];
                                                   DecimalPlaces=0:6 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ESP=Volumen];
                                                   DecimalPlaces=0:6 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;CaptionML=[ENU=Appl.-to Item Entry;
                                                              ESP=Liq. por n§ orden producto] }
    { 39  ;   ;Item Shpt. Entry No.;Integer       ;CaptionML=[ENU=Item Shpt. Entry No.;
                                                              ESP=N§ orden mov. producto asoc.] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ESP=Grupo precio cliente] }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ESP=N§ proyecto] }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   CaptionML=[ENU=Work Type Code;
                                                              ESP=C¢d. tipo trabajo] }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;CaptionML=[ENU=Qty. Shipped Not Invoiced;
                                                              ESP=Cantidad enviada no facturada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ESP=Cantidad facturada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 65  ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              ESP=N§ pedido] }
    { 66  ;   ;Order Line No.      ;Integer       ;CaptionML=[ENU=Order Line No.;
                                                              ESP=N§ l¡nea pedido] }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ESP=Factura-a N§ cliente];
                                                   Editable=No }
    { 71  ;   ;Purchase Order No.  ;Code20        ;CaptionML=[ENU=Purchase Order No.;
                                                              ESP=N§ pedido compra] }
    { 72  ;   ;Purch. Order Line No.;Integer      ;CaptionML=[ENU=Purch. Order Line No.;
                                                              ESP=N§ l¡nea pedido compra] }
    { 73  ;   ;Drop Shipment       ;Boolean       ;CaptionML=[ENU=Drop Shipment;
                                                              ESP=Env¡o directo] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ESP=Grupo contable negocio] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ESP=Grupo contable producto] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ESP=Tipo c lculo IVA];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax,No Taxable VAT;
                                                                    ESP=Normal,Reversi¢n,Total,Impto. venta,No sujeto];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax,No Taxable VAT }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ESP=Naturaleza transacci¢n] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ESP=Modo transporte] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Shipment Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ESP=N§ l¡nea texto adicional] }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ESP=Puerto/Aerop. carga] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ESP=C¢d. provincia] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ESP=Especificaci¢n transacci¢n] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ESP=C¢d.  rea impuesto] }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ESP=Sujeto a impuesto] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ESP=C¢d. grupo impuesto] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ESP=Grupo registro IVA neg.] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ESP=Grupo registro IVA prod.] }
    { 91  ;   ;Currency Code       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Shipment Header"."Currency Code" WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=C¢d. divisa];
                                                   Editable=No }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ESP=N§ pedido abierto] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ESP=N§ l¡n. pedido abierto] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ESP=Importe base IVA];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ESP=Coste unitario];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 131 ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 826 ;   ;Authorized for Credit Card;Boolean ;CaptionML=[ENU=Authorized for Credit Card;
                                                              ESP=Tarjeta de cr‚dito autorizada] }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ESP=N§ tarea proyecto];
                                                   Editable=No }
    { 1002;   ;Job Contract Entry No.;Integer     ;OnValidate=VAR
                                                                JobPlanningLine@1001 : Record 1003;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Job Contract Entry No.;
                                                              ESP=N§ mov. contrato proyecto];
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ESP=Cantidad (base)];
                                                   DecimalPlaces=0:5 }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ESP=Cdad. facturada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ESP=A/F Fecha registro] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ESP=C¢d. libro amortizaci¢n] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ESP=A/F Amort. hasta fecha reg.] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ESP=Duplicado en libro amort.] }
    { 5613;   ;Use Duplication List;Boolean       ;CaptionML=[ENU=Use Duplication List;
                                                              ESP=Utilizar lista duplicados] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ESP=Centro responsabilidad] }
    { 5705;   ;Cross-Reference No. ;Code20        ;CaptionML=[ENU=Cross-Reference No.;
                                                              ESP=N§ referencia cruzada] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ESP=Unidad de medida (ref.cruz.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ESP=Tipo referencia cruzada];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ESP=" ,Cliente,Prov.,C¢d. barra"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ESP=N§ tipo referencia cruzada] }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ESP=C¢d. categor¡a producto] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Nonstock;
                                                              ESP=Prod. sin stock] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ESP=C¢d. compra] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ESP=C¢d. grupo producto] }
    { 5790;   ;Requested Delivery Date;Date       ;CaptionML=[ENU=Requested Delivery Date;
                                                              ESP=Fecha entrega requerida];
                                                   Editable=No }
    { 5791;   ;Promised Delivery Date;Date        ;CaptionML=[ENU=Promised Delivery Date;
                                                              ESP=Fecha entrega prometida];
                                                   Editable=No }
    { 5792;   ;Shipping Time       ;DateFormula   ;CaptionML=[ENU=Shipping Time;
                                                              ESP=Tiempo env¡o] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ESP=Tiempo manip. alm. salida] }
    { 5794;   ;Planned Delivery Date;Date         ;CaptionML=[ENU=Planned Delivery Date;
                                                              ESP=Fecha entrega planificada];
                                                   Editable=No }
    { 5795;   ;Planned Shipment Date;Date         ;CaptionML=[ENU=Planned Shipment Date;
                                                              ESP=Fecha env¡o planificada];
                                                   Editable=No }
    { 5811;   ;Appl.-from Item Entry;Integer      ;CaptionML=[ENU=Appl.-from Item Entry;
                                                              ESP=Liquid.-de mov. pdto];
                                                   MinValue=0 }
    { 5812;   ;Item Charge Base Amount;Decimal    ;CaptionML=[ENU=Item Charge Base Amount;
                                                              ESP=Importe base cargos prod.];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ESP=Correcci¢n];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ESP=C¢d. motivo dev.] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ESP=Permite dto. l¡nea] }
    { 7002;   ;Customer Disc. Group;Code10        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ESP=Grupo dto. cliente] }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Order No.,Order Line No.                 }
    {    ;Blanket Order No.,Blanket Order Line No.;KeyGroups=SOP(Blank) }
    {    ;Item Shpt. Entry No.                     }
    {    ;Sell-to Customer No.                     }
    {    ;Bill-to Customer No.                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Document No.,Line No.,Sell-to Customer No.,Type,No.,Shipment Date }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Shipment No. %1:;ESP=N§ albar n %1:';
      Text001@1001 : TextConst 'ENU=The program cannot find this Sales line.;ESP=El prog. no puede encontrar esta l¡n. vta.';
      Currency@1002 : Record 4;
      SalesShptHeader@1005 : Record 110;
      DimMgt@1003 : Codeunit 408;
      CurrencyRead@1004 : Boolean;

    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF "Document No." = SalesShptHeader."No." THEN
        EXIT(SalesShptHeader."Currency Code");
      IF SalesShptHeader.GET("Document No.") THEN
        EXIT(SalesShptHeader."Currency Code");
      EXIT('');
    END;

    PROCEDURE ShowDimensions@25();
    VAR
      PostedDocDim@1000 : Record 359;
      PostedDocDimensions@1001 : Form 547;
    BEGIN
      TESTFIELD("No.");
      TESTFIELD("Line No.");
      PostedDocDim.SETRANGE("Table ID",DATABASE::"Sales Shipment Line");
      PostedDocDim.SETRANGE("Document No.","Document No.");
      PostedDocDim.SETRANGE("Line No.","Line No.");
      PostedDocDimensions.SETTABLEVIEW(PostedDocDim);
      PostedDocDimensions.RUNMODAL;
    END;

    PROCEDURE ShowItemTrackingLines@6500();
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      ItemTrackingMgt.CallPostedItemTrackingForm(DATABASE::"Sales Shipment Line",0,"Document No.",'',0,"Line No.");
    END;

    PROCEDURE InsertInvLineFromShptLine@2(VAR SalesLine@1000 : Record 37;VAR TempFromDocDim@1012 : TEMPORARY Record 357);
    VAR
      SalesInvHeader@1011 : Record 36;
      SalesOrderHeader@1008 : Record 36;
      SalesOrderLine@1005 : Record 37;
      TempSalesLine@1002 : TEMPORARY Record 37;
      FromDocDim@1003 : Record 357;
      SalesSetup@1010 : Record 311;
      ToDocDim@1004 : Record 357;
      TransferOldExtLines@1007 : Codeunit 379;
      ItemTrackingMgt@1009 : Codeunit 6500;
      ExtTextLine@1006 : Boolean;
      NextLineNo@1001 : Integer;
    BEGIN
      SETRANGE("Document No.","Document No.");

      TempSalesLine := SalesLine;
      IF SalesLine.FIND('+') THEN
        NextLineNo := SalesLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      IF SalesInvHeader."No." <> TempSalesLine."Document No." THEN
        SalesInvHeader.GET(TempSalesLine."Document Type",TempSalesLine."Document No.");

      IF SalesLine."Shipment No." <> "Document No." THEN BEGIN
        SalesLine.INIT;
        SalesLine."Line No." := NextLineNo;
        SalesLine."Document Type" := TempSalesLine."Document Type";
        SalesLine."Document No." := TempSalesLine."Document No.";
        SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;

      TransferOldExtLines.ClearLineNumbers;

      REPEAT
        ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

        IF SalesOrderLine.GET(
          SalesOrderLine."Document Type"::Order,"Order No.","Order Line No.")
        THEN BEGIN
          IF (SalesOrderHeader."Document Type" <> SalesOrderLine."Document Type"::Order) OR
             (SalesOrderHeader."No." <> SalesOrderLine."Document No.")
          THEN
            SalesOrderHeader.GET(SalesOrderLine."Document Type"::Order,"Order No.");

          InitCurrency("Currency Code");

          IF SalesInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT SalesOrderHeader."Prices Including VAT" THEN
              SalesOrderLine."Unit Price" :=
                ROUND(
                  SalesOrderLine."Unit Price" * (1 + SalesOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END ELSE BEGIN
            IF SalesOrderHeader."Prices Including VAT" THEN
              SalesOrderLine."Unit Price" :=
                ROUND(
                  SalesOrderLine."Unit Price" / (1 + SalesOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END;
        END ELSE BEGIN
          SalesOrderHeader.INIT;
          IF ExtTextLine THEN BEGIN
            SalesOrderLine.INIT;
            SalesOrderLine."Line No." := "Order Line No.";
            SalesOrderLine.Description := Description;
            SalesOrderLine."Description 2" := "Description 2";
          END ELSE
            ERROR(Text001);
        END;

        SalesLine := SalesOrderLine;
        SalesLine."Line No." := NextLineNo;
        SalesLine."Document Type" := TempSalesLine."Document Type";
        SalesLine."Document No." := TempSalesLine."Document No.";
        SalesLine."Variant Code" := "Variant Code";
        SalesLine."Location Code" := "Location Code";
        SalesLine."Quantity (Base)" := 0;
        SalesLine.Quantity :=  0;
        SalesLine."Outstanding Qty. (Base)" := 0;
        SalesLine."Outstanding Quantity" := 0;
        SalesLine."Quantity Shipped" :=  0;
        SalesLine."Qty. Shipped (Base)" := 0;
        SalesLine."Quantity Invoiced" := 0;
        SalesLine."Qty. Invoiced (Base)" := 0;
        SalesLine.Amount := 0;
        SalesLine."Amount Including VAT" := 0;
        SalesLine."Purchase Order No." := '';
        SalesLine."Purch. Order Line No." := 0;
        SalesLine."Drop Shipment" := "Drop Shipment";
        SalesLine."Special Order Purchase No." := '';
        SalesLine."Special Order Purch. Line No." := 0;
        SalesLine."Special Order":= FALSE;
        SalesLine."Shipment No." := "Document No.";
        SalesLine."Shipment Line No." := "Line No.";

        IF NOT ExtTextLine AND (SalesLine.Type <> 0) THEN BEGIN
          SalesLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced");
          SalesLine.VALIDATE("Unit Price",SalesOrderLine."Unit Price");
          SalesLine."Allow Line Disc." := SalesOrderLine."Allow Line Disc.";
          SalesLine."Allow Invoice Disc." := SalesOrderLine."Allow Invoice Disc.";
          SalesLine.VALIDATE("Line Discount %",SalesOrderLine."Line Discount %");
          SalesSetup.GET;
          IF NOT SalesSetup."Calc. Inv. Discount" THEN
            IF SalesOrderLine.Quantity = 0 THEN
              SalesLine.VALIDATE("Inv. Discount Amount",0)
            ELSE
              SalesLine.VALIDATE(
                "Inv. Discount Amount",
                ROUND(
                  SalesOrderLine."Inv. Discount Amount" * SalesLine.Quantity / SalesOrderLine.Quantity,
                  Currency."Amount Rounding Precision"));
        END;


        SalesLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            SalesOrderLine."Line No.",
            NextLineNo,
            SalesOrderLine."Attached to Line No.");
        SalesLine."Shortcut Dimension 1 Code" := SalesOrderLine."Shortcut Dimension 1 Code";
        SalesLine."Shortcut Dimension 2 Code" := SalesOrderLine."Shortcut Dimension 2 Code";
        SalesLine.INSERT;

        ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);

        FromDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
        FromDocDim.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
        FromDocDim.SETRANGE("Document No.",SalesOrderLine."Document No.");
        FromDocDim.SETRANGE("Line No.",SalesOrderLine."Line No.");

        ToDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
        ToDocDim.SETRANGE("Document Type",SalesLine."Document Type");
        ToDocDim.SETRANGE("Document No.",SalesLine."Document No.");
        ToDocDim.SETRANGE("Line No.", SalesLine."Line No.");
        ToDocDim.DELETEALL;

        IF FromDocDim.FIND('-') THEN
          REPEAT
            TempFromDocDim.INIT;
            TempFromDocDim := FromDocDim;
            TempFromDocDim."Table ID" := DATABASE::"Sales Line";
            TempFromDocDim."Document Type" := SalesLine."Document Type";
            TempFromDocDim."Document No." := SalesLine."Document No.";
            TempFromDocDim."Line No." := SalesLine."Line No.";
            TempFromDocDim.INSERT;
          UNTIL FromDocDim.NEXT = 0;

        NextLineNo := NextLineNo + 10000;
        IF "Attached to Line No." = 0 THEN
          SETRANGE("Attached to Line No.","Line No.");
      UNTIL (NEXT = 0) OR ("Attached to Line No." = 0);

      IF SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,"Order No.") THEN BEGIN
        SalesOrderHeader."Get Shipment Used" := TRUE;
        SalesOrderHeader.MODIFY;
      END;
    END;

    PROCEDURE GetSalesInvLines@4(VAR TempSalesInvLine@1000 : TEMPORARY Record 113);
    VAR
      SalesInvLine@1003 : Record 113;
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      TempSalesInvLine.RESET;
      TempSalesInvLine.DELETEALL;

      IF Type <> Type::Item THEN
        EXIT;

      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      ItemLedgEntry.SETFILTER("Invoiced Quantity",'<>0');
      IF ItemLedgEntry.FINDSET THEN BEGIN
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
        ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::"Direct Cost");
        ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
        REPEAT
          ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          IF ValueEntry.FINDSET THEN
            REPEAT
              IF ValueEntry."Document Type" = ValueEntry."Document Type"::"Sales Invoice" THEN
                IF SalesInvLine.GET(ValueEntry."Document No.",ValueEntry."Document Line No.") THEN BEGIN
                  TempSalesInvLine.INIT;
                  TempSalesInvLine := SalesInvLine;
                  IF TempSalesInvLine.INSERT THEN;
                END;
            UNTIL ValueEntry.NEXT = 0;
        UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CalcShippedSaleNotReturned@3(VAR ShippedQtyNotReturned@1003 : Decimal;VAR RevUnitCostLCY@1005 : Decimal;ExactCostReverse@1006 : Boolean);
    VAR
      ItemLedgEntry@1000 : Record 32;
      TotalCostLCY@1007 : Decimal;
      TotalQtyBase@1002 : Decimal;
    BEGIN
      ShippedQtyNotReturned := 0;
      IF (Type <> Type::Item) OR (Quantity <= 0) THEN BEGIN
        RevUnitCostLCY := "Unit Cost (LCY)";
        EXIT;
      END;

      RevUnitCostLCY := 0;
      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          ShippedQtyNotReturned := ShippedQtyNotReturned - ItemLedgEntry."Shipped Qty. Not Returned";
          IF ExactCostReverse THEN BEGIN
            ItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
            TotalCostLCY :=
              TotalCostLCY + ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)";
            TotalQtyBase := TotalQtyBase + ItemLedgEntry.Quantity;
          END;
        UNTIL ItemLedgEntry.NEXT = 0;

      IF ExactCostReverse AND (ShippedQtyNotReturned <> 0) AND (TotalQtyBase <> 0) THEN
        RevUnitCostLCY := ABS(TotalCostLCY / TotalQtyBase) * "Qty. per Unit of Measure"
      ELSE
        RevUnitCostLCY := "Unit Cost (LCY)";

      ShippedQtyNotReturned := CalcQty(ShippedQtyNotReturned);
    END;

    LOCAL PROCEDURE CalcQty@9(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        EXIT(QtyBase);
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE FilterPstdDocLnItemLedgEntries@5(VAR ItemLedgEntry@1000 : Record 32);
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Document No.");
      ItemLedgEntry.SETRANGE("Document No.","Document No.");
      ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Sales Shipment");
      ItemLedgEntry.SETRANGE("Document Line No.","Line No.");
    END;

    PROCEDURE ShowItemLedgEntries@7();
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
        FORM.RUNMODAL(0,ItemLedgEntry);
      END;
    END;

    PROCEDURE ShowItemSalesInvLines@8();
    VAR
      TempSalesInvLine@1001 : TEMPORARY Record 113;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetSalesInvLines(TempSalesInvLine);
        FORM.RUNMODAL(FORM::"Posted Sales Invoice Lines",TempSalesInvLine);
      END;
    END;

    LOCAL PROCEDURE InitCurrency@6(CurrencyCode@1001 : Code[10]);
    BEGIN
      IF (Currency.Code = CurrencyCode) AND CurrencyRead THEN
        EXIT;

      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;
      CurrencyRead := TRUE;
    END;

    PROCEDURE ShowLineComments@10();
    VAR
      SalesDocLineComments@1000 : Record 44;
      SalesDocCommentSheet@1001 : Form 67;
    BEGIN
      SalesDocLineComments.SETRANGE("Document Type",SalesDocLineComments."Document Type"::Shipment);
      SalesDocLineComments.SETRANGE("No.","Document No.");
      SalesDocLineComments.SETRANGE("Document Line No.","Line No.");
      SalesDocCommentSheet.SETTABLEVIEW(SalesDocLineComments);
      SalesDocCommentSheet.RUNMODAL;
    END;

    BEGIN
    END.
  }
}
