OBJECT Table 7035388 Sincroniza Contrato Interempre
{
  OBJECT-PROPERTIES
  {
    Date=16/10/09;
    Time=12:30:49;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CLEAR(rSinc);
               rSinc.ASCENDING(FALSE);
               rSinc.SETRANGE("N§ Contrato","N§ Contrato");
               IF rSinc.FINDFIRST THEN
                 No := rSinc.No +1
               ELSE
                 No := 1;


               IF ("N§ Contrato"='') OR (Empresa='') OR ("Cliente Empresa"='') OR ("Touroperador Empresa"='') THEN
                 ERROR(Text00005);
               IF ("Num Contrato Destino" = '') THEN
                 CreaContratoSincronizado;
             END;

    CaptionML=ESP=Sincroniza Contrato Interempre;
  }
  FIELDS
  {
    { 1   ;   ;N§ Contrato         ;Code10        ;CaptionML=ESP=N§ Contrato }
    { 2   ;   ;No                  ;Integer       ;CaptionML=ESP=No }
    { 10  ;   ;Empresa             ;Text30        ;TableRelation=Company.Name;
                                                   OnValidate=BEGIN
                                                                IF xRec.Empresa <> Empresa THEN BEGIN
                                                                  "Cliente Empresa"      :='';
                                                                  "Touroperador Empresa" :='';
                                                                END;
                                                                IF Empresa = COMPANYNAME THEN
                                                                  ERROR(Text00001);

                                                                CompDuplicidad;
                                                              END;

                                                   CaptionML=ESP=Empresa }
    { 11  ;   ;Cliente Empresa     ;Code20        ;OnValidate=VAR
                                                                lrClient@1100253000 : Record 18;
                                                              BEGIN
                                                                IF xRec."Cliente Empresa" <> "Cliente Empresa" THEN BEGIN
                                                                  "Touroperador Empresa":='';
                                                                END;

                                                                IF "Cliente Empresa" <> '' THEN BEGIN
                                                                  CLEAR(rEmp);
                                                                  CLEAR(lrClient);
                                                                  lrClient.CHANGECOMPANY(Empresa);
                                                                  lrClient.GET("Cliente Empresa");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              lrClient@1100253000 : Record 18;
                                                            BEGIN
                                                              CLEAR(rEmp);
                                                              IF (Empresa <>'') AND (rEmp.GET(Empresa)) THEN BEGIN
                                                                CLEAR(lrClient);
                                                                IF lrClient.CHANGECOMPANY(Empresa) THEN BEGIN
                                                                  IF FORM.RUNMODAL(0,lrClient) = ACTION::LookupOK THEN
                                                                    IF "Num Contrato Destino" = '' THEN
                                                                      VALIDATE("Cliente Empresa", lrClient."No.");
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=ESP=Cliente Empresa }
    { 12  ;   ;Touroperador Empresa;Code10        ;OnValidate=VAR
                                                                lrClito@1100253000 : Record 7010313;
                                                              BEGIN
                                                                IF "Touroperador Empresa" <> '' THEN BEGIN
                                                                  CLEAR(rEmp);
                                                                  CLEAR(lrClito);
                                                                  lrClito.CHANGECOMPANY(Empresa);
                                                                  lrClito.GET("Cliente Empresa","Touroperador Empresa");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              lrClito@1100253000 : Record 7010313;
                                                            BEGIN
                                                              CLEAR(rEmp);
                                                              IF (Empresa <>'') AND (rEmp.GET(Empresa)) THEN BEGIN
                                                                CLEAR(lrClito);
                                                                IF lrClito.CHANGECOMPANY(Empresa) THEN BEGIN
                                                                  lrClito.SETRANGE(Cliente, "Cliente Empresa");
                                                                  IF FORM.RUNMODAL(0,lrClito) = ACTION::LookupOK THEN
                                                                    IF "Num Contrato Destino" = '' THEN
                                                                      VALIDATE("Touroperador Empresa", lrClito.TTOO);
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=ESP=Touroperador Empresa }
    { 13  ;   ;Num Contrato Destino;Code10        ;CaptionML=ESP=Num Contrato Destino;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;N§ Contrato,No                          ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      rSinc@1100253000 : Record 7035388;
      rEmp@1100253001 : Record 2000000006;
      Text00001@1100253002 : TextConst 'ESP=No se puede sincronizar un contrato a la misma empresa';
      Text00002@1100253003 : TextConst 'ESP=Ya existe el contrato sincronizado para la empresa %1';
      Text00003@1100253004 : TextConst 'ESP=No existe %1 %2 en empresa %3';
      wVentana@1100253005 : Dialog;
      Text00004@1100253006 : TextConst 'ESP=Sincronizando Contrato\#1###################\@2@@@@@@@@@@@@@@@@@@@';
      Text00005@1100253007 : TextConst 'ESP=Datos insuficientes';
      Text00006@1100253008 : TextConst 'ESP=El contrato %1 esta basado en los precios del %2.\Sincronice antes el contrato %2';
      Text00007@1100253009 : TextConst 'ESP=El Contrato %1 ha sido sincronizado desde otra empresa.\No puede ser modificado desde aqu¡';
      cNoSerie@1100253010 : Codeunit 396;
      wCea@1100253011 : Boolean;

    PROCEDURE CompDuplicidad@1100253000();
    BEGIN
      // CompDuplicidad
      // Comprobamos que no se duplica la informaci¢n

      IF Empresa ='' THEN
        EXIT;

      CLEAR(rSinc);
      rSinc.SETRANGE("N§ Contrato", "N§ Contrato");
      rSinc.SETRANGE(Empresa      , Empresa);
      IF rSinc.FINDFIRST THEN
        ERROR(Text00002, Empresa);
    END;

    PROCEDURE CreaContratoSincronizado@1100253019();
    VAR
      lrContr@1100253001 : Record 7010403;
      lrContrD@1100253000 : Record 7010403;
      lrGaraje@1100253002 : Record 7010310;
      lrPar@1100253003 : Record 7010311;
    BEGIN
      // CreaContratoSincronizado

      CLEAR(lrPar);
      lrPar.CHANGECOMPANY(Empresa);
      lrPar.FINDFIRST;

      IF "Num Contrato Destino" <> '' THEN
        EXIT;

      IF (Empresa<>'') AND ("Cliente Empresa"<>'') AND ("Touroperador Empresa"<>'') THEN BEGIN
        CLEAR(lrContr);
        lrContr.SETRANGE("N§ Contrato", "N§ Contrato");
        lrContr.FINDFIRST;
        IF lrContr."Contrato Sincronizado" THEN
          ERROR(Text00007, "N§ Contrato");

        CLEAR(lrContrD);
        lrContrD:= lrContr;
        lrContrD."N§ Contrato" :='';
        lrContrD.CHANGECOMPANY(Empresa);
        lrContrD.Garaje                  :=  lrContr.Garaje;
        InitSeries(lrPar."Serie contrato venta", lrPar."Serie contrato venta", TODAY,
                            lrContrD."N§ Contrato", lrPar."Serie contrato venta", Empresa);

        ModificaCabecera(lrContr , lrContrD);
        lrContrD.INSERT;
        "Num Contrato Destino" := lrContrD."N§ Contrato";

        wCea:= TRUE; // JPT 26/04/06 Eso es para que en la primera sincronizaci¢n, eso es al crear el contrato, no modifique
                     // de nuevo el registro de cabecera ya que en SQL genera un error de "otro usuario ha modificado..."
        SincronizaTodo(lrContr);

        // Comprobamos que exista el garaje
        IF lrContrD.Garaje <> '' THEN BEGIN
          CLEAR(lrGaraje);
          lrGaraje.CHANGECOMPANY(Empresa);
          IF NOT lrGaraje.GET(lrContrD.Garaje) THEN
            ERROR(Text00003, lrGaraje.TABLECAPTION,lrContrD.Garaje, Empresa);
        END;
      END;
    END;

    PROCEDURE SincronizaTodo@1100253003(VAR prContr@1100253000 : Record 7010403);
    VAR
      lrZonaC@1100253001 : Record 7010404;
      lrPrecio@1100253002 : Record 7010405;
      lrComent@1100253003 : Record 7010406;
      lrMin@1100253004 : Record 7010407;
      lwCont@1100253005 : Integer;
      lwTotal@1100253006 : Integer;
    BEGIN
      // SincronizaTodo
      // Sincroniza todo el contrato de venta
      // OJO- Esta funci¢n No borra los registros que puediesen existir en la tabla sincronizada

      wVentana.OPEN(Text00004);

      // CABECERA
      wVentana.UPDATE(1,prContr.TABLECAPTION);
      SincronizaCabecera(prContr);

      // ZONAS
      wVentana.UPDATE(1,lrZonaC.TABLECAPTION);
      CLEAR(lrZonaC);
      lrZonaC.SETRANGE(Garaje        , prContr.Garaje);
      lrZonaC.SETRANGE("N§ Contrato", prContr."N§ Contrato");
      IF lrZonaC.FINDSET THEN BEGIN
        lwTotal := lrZonaC.COUNT;
        CLEAR(lwCont);
        REPEAT
          SincronizaZona(lrZonaC, FALSE);
          lwCont +=1;
          wVentana.UPDATE(2, ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrZonaC.NEXT=0;
      END;

      // PRECIO
      CLEAR(lrPrecio);
      wVentana.UPDATE(1,lrPrecio.TABLECAPTION);
      lrPrecio.SETRANGE(Garaje       , prContr.Garaje);
      lrPrecio.SETRANGE("N§ Contrato", prContr."N§ Contrato");
      IF lrPrecio.FINDSET THEN BEGIN
        lwTotal := lrPrecio.COUNT;
        CLEAR(lwCont);
        REPEAT
          SincronizaPrecio(lrPrecio, FALSE);
          lwCont +=1;
          wVentana.UPDATE(2, ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrPrecio.NEXT=0;
      END;

      // COMENTARIOS
      wVentana.UPDATE(1,lrComent.TABLECAPTION);
      CLEAR(lrComent);
      lrComent.SETRANGE(Garaje       , prContr.Garaje);
      lrComent.SETRANGE("N§ Contrato", prContr."N§ Contrato");
      IF lrComent.FINDSET THEN BEGIN
        lwTotal := lrComent.COUNT;
        CLEAR(lwCont);
        REPEAT
          SincronizaComentario(lrComent, FALSE);
          lwCont +=1;
          wVentana.UPDATE(2, ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrComent.NEXT=0;
      END;

      // MINIMOS VEHICULO
      wVentana.UPDATE(1,lrMin.TABLECAPTION);
      CLEAR(lrMin);
      lrMin.SETRANGE(Garaje       , prContr.Garaje);
      lrMin.SETRANGE("N§ Contrato", prContr."N§ Contrato");
      IF lrMin.FINDSET THEN BEGIN
        lwTotal := lrMin.COUNT;
        CLEAR(lwCont);
        REPEAT
          SincronizaMinimoVehiculo(lrMin, FALSE);
          lwCont +=1;
          wVentana.UPDATE(2, ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrMin.NEXT=0;
      END;

      wVentana.CLOSE;
    END;

    PROCEDURE SincronizaCabecera@1100253001(VAR prContr@1100253000 : Record 7010403);
    VAR
      lrContrD@1100253005 : Record 7010403;
      lrContrInt@1100253010 : Record 7010403;
      lrClient@1100253001 : Record 18;
      lrCliTO@1100253002 : Record 7010313;
      lrGrIVA@1100253003 : Record 324;
      lrTermsPag@1100253004 : Record 3;
      lrFormsPag@1100253006 : Record 289;
      lrSerie@1100253007 : Record 308;
      lrDivisa@1100253008 : Record 4;
    BEGIN

      // SincronizaCabecera
      // Se sincroniza la cabecera del contrato

      IF "Num Contrato Destino"='' THEN
        EXIT;

      CLEAR(rEmp);

      lrContrInt:= prContr;
      lrContrInt."N§ Contrato" := "Num Contrato Destino";
      lrContrInt.CHANGECOMPANY(Empresa);

      lrContrD:= lrContrInt;
      lrContrInt.FIND; // Primero miramos que exista

      lrContrD.CHANGECOMPANY(Empresa);

      ModificaCabecera(prContr , lrContrD);
      IF NOT wCea THEN
        lrContrD.MODIFY;

      // Ahora hacemos algunas comprobaciones

      IF lrContrD.Cliente <> '' THEN BEGIN // Cliente
        CLEAR(lrClient);
        lrClient.CHANGECOMPANY(Empresa);
        IF NOT lrClient.GET(lrContrD.Cliente) THEN
          ERROR(Text00003, lrClient.TABLECAPTION,lrContrD.Cliente, Empresa);
      END;

      IF lrContrD.Touroperador <> '' THEN BEGIN // Touroperador
        CLEAR(lrCliTO);
        lrCliTO.CHANGECOMPANY(Empresa);
        IF NOT lrCliTO.GET(lrContrD.Cliente, lrContrD.Touroperador) THEN
          ERROR(Text00003, lrCliTO.TABLECAPTION, lrContrD.Touroperador, Empresa);
      END;

      IF lrContrD."Grupo Registro IVA Producto" <> '' THEN BEGIN
        CLEAR(lrGrIVA);
        lrGrIVA.CHANGECOMPANY(Empresa);
        IF NOT lrGrIVA.GET(lrContrD."Grupo Registro IVA Producto") THEN
          ERROR(Text00003, lrGrIVA.TABLECAPTION, lrContrD."Grupo Registro IVA Producto", Empresa);
      END;

      IF lrContrD."Cod. Terminos Pago" <> '' THEN BEGIN
        CLEAR(lrTermsPag);
        lrTermsPag.CHANGECOMPANY(Empresa);
        IF NOT lrTermsPag.GET(lrContrD."Cod. Terminos Pago") THEN
          ERROR(Text00003, lrTermsPag.TABLECAPTION, lrContrD."Cod. Terminos Pago", Empresa);
      END;

      IF lrContrD."Cod. Formas Pago" <> '' THEN BEGIN
        CLEAR(lrFormsPag);
        lrFormsPag.CHANGECOMPANY(Empresa);
        IF NOT lrFormsPag.GET(lrContrD."Cod. Formas Pago") THEN
          ERROR(Text00003, lrFormsPag.TABLECAPTION, lrContrD."Cod. Formas Pago", Empresa);
      END;

      IF lrContrD."Cod. Serie" <> '' THEN BEGIN
        CLEAR(lrSerie);
        lrSerie.CHANGECOMPANY(Empresa);
        IF NOT lrSerie.GET(lrContrD."Cod. Serie") THEN
          ERROR(Text00003, lrSerie.TABLECAPTION, lrContrD."Cod. Serie", Empresa);
      END;

      IF lrContrD."Cod. Divisa" <> '' THEN BEGIN
        CLEAR(lrDivisa);
        lrDivisa.CHANGECOMPANY(Empresa);
        IF NOT lrDivisa.GET(lrContrD."Cod. Divisa") THEN
          ERROR(Text00003, lrDivisa.TABLECAPTION, lrContrD."Cod. Divisa", Empresa);
      END;
    END;

    PROCEDURE ModificaCabecera@1103355000(VAR prContrOrg@1103355003 : Record 7010403;VAR prContrDest@1103355004 : Record 7010403);
    VAR
      lrSincBasado@1103355000 : Record 7035388;
    BEGIN
      // ModificaCabecera
      // Cambia algunos datos en cabecera de contrato
      // Puede llamarse tanto al crear como al modificarse
      // Esta funci¢n no hace modify ni insert


      // Controlamos que el contrato no est basado sobre otro
      CLEAR(lrSincBasado);
      IF prContrOrg."Basado en contrato n§" <>'' THEN BEGIN
        lrSincBasado.SETRANGE("N§ Contrato" , prContrOrg."Basado en contrato n§");
        lrSincBasado.SETRANGE(Empresa       , Empresa);
        IF NOT lrSincBasado.FINDFIRST THEN
          ERROR(Text00006, prContrOrg."N§ Contrato", prContrOrg."Basado en contrato n§");
      END;

      prContrDest.Cliente                 := "Cliente Empresa";
      prContrDest.Touroperador            := "Touroperador Empresa";
      prContrDest."Basado en contrato n§" := lrSincBasado."Num Contrato Destino";
      prContrDest."Contrato Sincronizado" := TRUE;
    END;

    PROCEDURE SincronizaZona@1100253023(VAR prZonaC@1100253000 : Record 7010404;pwBorra@1100253002 : Boolean);
    VAR
      lrZonaC@1100253001 : Record 7010404;
      lrZonaCInt@1100253004 : Record 7010404;
      lrZonaFis@1100253003 : Record 7010314;
      lrCont@1103355000 : Record 7010408;
      lrHotel@1103355001 : Record 7010315;
    BEGIN
      // SincronizaZona

      IF "Num Contrato Destino"='' THEN
        EXIT;

      lrZonaCInt:= prZonaC;
      lrZonaCInt."N§ Contrato" := "Num Contrato Destino";

      lrZonaC.CHANGECOMPANY(Empresa);
      lrZonaC := lrZonaCInt;
      IF lrZonaC.FIND THEN BEGIN  // Primero miramos que exista

        // AJS 24.05.2006
        // El traspaso hay que hacerlo con un transferfields en lugar de una asignacion
        //lrZonaC := lrZonaCInt;

        lrZonaC.TRANSFERFIELDS(lrZonaCInt);

        IF pwBorra THEN
          lrZonaC.DELETE
        ELSE
          lrZonaC.MODIFY;
      END
      ELSE
        IF NOT pwBorra THEN
          lrZonaC.INSERT;

      IF pwBorra THEN
        EXIT;

      // Ahora hacemos algunas comprobaciones

      IF lrZonaC."Codigo Origen" <> '' THEN BEGIN

        // AJS 25.06.2008
        // La comprobacion hay que hacerla en funcion del campo "Base para zonas precio" del
        // contrato, para saber si hay que buscar una zona fisica o un hotel

        // AJF 01/10/08
        // Protejo para que no haga la comprobaci¢n para contratos de venta.
        IF prZonaC."Tipo contrato" = prZonaC."Tipo contrato"::Compra THEN BEGIN
          lrCont.GET(lrZonaC.Garaje, lrZonaC."N§ Contrato");
          CASE lrCont."Base para zonas precio" OF
            lrCont."Base para zonas precio"::"Zona fisica":
            BEGIN
              CLEAR(lrZonaFis);
              lrZonaFis.CHANGECOMPANY(Empresa);
              IF NOT lrZonaFis.GET(lrZonaC."Codigo Origen") THEN
                ERROR(Text00003, lrZonaFis.TABLECAPTION, lrZonaC."Codigo Origen", Empresa);
            END;
            lrCont."Base para zonas precio"::Hotel:
            BEGIN
              CLEAR(lrHotel);
              lrHotel.CHANGECOMPANY(Empresa);
              IF NOT lrHotel.GET(lrZonaC."Codigo Origen") THEN
                ERROR(Text00003, lrHotel.TABLECAPTION, lrZonaC."Codigo Origen", Empresa);
            END;
          END;
        END;

      END;
    END;

    PROCEDURE SincronizaPrecio@1100253028(prPrecio@1100253000 : Record 7010405;pwBorra@1100253002 : Boolean);
    VAR
      lrPrecio@1100253001 : Record 7010405;
      lrPrecioInt@1100253005 : Record 7010405;
      lrCodSer@1100253003 : Record 7010320;
      lrTipVeh@1100253004 : Record 7010345;
    BEGIN
      // SincronizaPrecio

      IF "Num Contrato Destino"='' THEN
        EXIT;

      lrPrecioInt := prPrecio;
      lrPrecioInt."N§ Contrato" := "Num Contrato Destino";

      lrPrecio.CHANGECOMPANY(Empresa);
      lrPrecio := lrPrecioInt;
      IF lrPrecio.FIND THEN BEGIN  // Primero miramos que exista

        // AJS 24.05.2006
        // El traspaso hay que hacerlo con un transferfields en lugar de una asignacion
        //lrPrecio := lrPrecioInt;

        lrPrecio.TRANSFERFIELDS(lrPrecioInt);
        IF pwBorra THEN
          lrPrecio.DELETE
        ELSE
          lrPrecio.MODIFY;
      END
      ELSE
        IF NOT pwBorra THEN
          lrPrecio.INSERT;

      IF pwBorra THEN
        EXIT;

      // Ahora hacemos algunas comprobaciones

      IF lrPrecio."Codigo servicio" <> '' THEN BEGIN
        CLEAR(lrCodSer);
        lrCodSer.CHANGECOMPANY(Empresa);
        IF NOT lrCodSer.GET(lrPrecio."Codigo servicio") THEN
          ERROR(Text00003, lrCodSer.TABLECAPTION, lrPrecio."Codigo servicio", Empresa);
      END;

      IF lrPrecio."Tipo Vehiculo" <> '' THEN BEGIN
        CLEAR(lrTipVeh);
        lrTipVeh.CHANGECOMPANY(Empresa);
        IF NOT lrTipVeh.GET(lrPrecio."Tipo Vehiculo") THEN
          ERROR(Text00003, lrTipVeh.TABLECAPTION, lrPrecio."Tipo Vehiculo", Empresa);
      END;
    END;

    PROCEDURE SincronizaComentario@1100253033(prComent@1100253000 : Record 7010406;pwBorra@1100253002 : Boolean);
    VAR
      lrComent@1100253001 : Record 7010406;
      lrComentInt@1100253003 : Record 7010406;
    BEGIN
      // SincronizaComentario

      IF "Num Contrato Destino"='' THEN
        EXIT;

      lrComentInt := prComent;
      lrComentInt."N§ Contrato" := "Num Contrato Destino";

      lrComent.CHANGECOMPANY(Empresa);
      lrComent := lrComentInt;
      IF lrComent.FIND THEN BEGIN  // Primero miramos que exista
        // AJS 24.05.2006
        // El traspaso hay que hacerlo con un transferfields en lugar de una asignacion
        //lrComent := lrComentInt;

        lrComent.TRANSFERFIELDS(lrComentInt);
        IF pwBorra THEN
          lrComent.DELETE
        ELSE
          lrComent.MODIFY;
      END
      ELSE
        IF NOT pwBorra THEN
          lrComent.INSERT;
    END;

    PROCEDURE SincronizaMinimoVehiculo@1100253037(prMin@1100253000 : Record 7010407;pwBorra@1100253003 : Boolean);
    VAR
      lrMin@1100253001 : Record 7010407;
      lrMinInt@1100253004 : Record 7010407;
      lrTipVeh@1100253002 : Record 7010345;
    BEGIN
      // SincronizaMinimoVehiculo

      IF "Num Contrato Destino"='' THEN
        EXIT;

      lrMinInt := prMin;
      lrMinInt."N§ Contrato" := "Num Contrato Destino";

      lrMin.CHANGECOMPANY(Empresa);
      lrMin := lrMinInt;
      IF lrMin.FIND THEN BEGIN  // Primero miramos que exista
        // AJS 24.05.2006
        // El traspaso hay que hacerlo con un transferfields en lugar de una asignacion
        //lrMin := lrMinInt;

        lrMin.TRANSFERFIELDS(lrMinInt);
        IF pwBorra THEN
          lrMin.DELETE
        ELSE
          lrMin.MODIFY;
      END
      ELSE
        IF NOT pwBorra THEN
          lrMin.INSERT;

      IF pwBorra THEN
        EXIT;

      // Ahora hacemos algunas comprobaciones

      IF lrMin."Tipo Vehiculo" <> '' THEN BEGIN
        CLEAR(lrTipVeh);
        lrTipVeh.CHANGECOMPANY(Empresa);
        IF NOT lrTipVeh.GET(lrMin."Tipo Vehiculo") THEN
          ERROR(Text00003, lrTipVeh.TABLECAPTION, lrMin."Tipo Vehiculo", Empresa);
      END;
    END;

    PROCEDURE CompruebaSinc@1100253002(pwGaraje@1100253000 : Code[10];pwContrato@1100253001 : Code[10]);
    VAR
      lrContr@1100253002 : Record 7010403;
    BEGIN
      // CompruebaSinc
      // Si estamos intentando modificar un Contrato que ha sido sincronizado debe de saltar un error

      CLEAR(lrContr);
      lrContr.GET(pwGaraje,pwContrato);
      IF lrContr."Contrato Sincronizado" THEN
        ERROR(Text00007, pwContrato);
    END;

    PROCEDURE InitSeries@3(DefaultNoSeriesCode@1000 : Code[10];OldNoSeriesCode@1001 : Code[10];NewDate@1002 : Date;VAR NewNo@1003 : Code[20];VAR NewNoSeriesCode@1004 : Code[10];pwEmpresa@1100253006 : Text[30]);
    VAR
      NoSeries@1100253000 : Record 308;
      Text000@1100253005 : TextConst 'ENU="You may not enter numbers manually. ";ESP="No puede introducir n£meros de forma manual. "';
      Text001@1100253004 : TextConst 'ENU=If you want to enter numbers manually, please activate %1 in %2 %3.;ESP=Si desea introducir n£meros manualmente, active %1 en %2 %3.';
      Text002@1100253002 : TextConst 'ENU="It is not possible to assign numbers automatically. ";ESP="No es posible asignar n£meros de manera autom tica. "';
      Text003@1100253001 : TextConst 'ENU=If you want the program to assign numbers automatically, please activate %1 in %2 %3.;ESP=Si desea que el programa asigne n£meros de manera autom tica, active %1 en %2 %3';
      NoSeriesCode@1100253003 : Code[10];
    BEGIN
      // InitSeries
      // Copia de las funciones del estandard de buscar numeros de serie
      // Modificada para cambiar de empresa

      NoSeries.CHANGECOMPANY(pwEmpresa);
      IF NewNo = '' THEN BEGIN
        NoSeries.GET(DefaultNoSeriesCode);
        IF NOT NoSeries."Default Nos." THEN
          ERROR(Text002 +Text003, NoSeries.FIELDCAPTION("Default Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
        IF OldNoSeriesCode <> '' THEN BEGIN
          NoSeriesCode := DefaultNoSeriesCode;
          FilterSeries(NoSeries, NoSeriesCode, pwEmpresa);
          NoSeries.Code := OldNoSeriesCode;
          IF NOT NoSeries.FIND THEN
            NoSeries.GET(DefaultNoSeriesCode);
        END;
        NewNo := GetNextNo(NoSeries.Code,NewDate,TRUE,NoSeries, pwEmpresa);
        NewNoSeriesCode := NoSeries.Code;
      END
      ELSE BEGIN
        IF DefaultNoSeriesCode <> '' THEN BEGIN
          NoSeries.GET(DefaultNoSeriesCode);
          IF NOT NoSeries."Manual Nos." THEN
            ERROR(Text000 +Text001, NoSeries.FIELDCAPTION("Manual Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
        END;
      END;
    END;

    LOCAL PROCEDURE FilterSeries@1(VAR prNoSeries@1100253000 : Record 308;NoSeriesCode@1100253001 : Code[10];pwEmpresa@1100253002 : Text[30]);
    VAR
      NoSeriesRelationship@1000 : Record 310;
    BEGIN
      // FilterSeries
      // Copia de las funciones del estandard de buscar numeros de serie
      // Modificada para cambiar de empresa


      prNoSeries.RESET;
      NoSeriesRelationship.CHANGECOMPANY(pwEmpresa);
      NoSeriesRelationship.SETRANGE(Code, NoSeriesCode);
      IF NoSeriesRelationship.FINDSET THEN
        REPEAT
          prNoSeries.Code := NoSeriesRelationship."Series Code";
          prNoSeries.MARK := TRUE;
        UNTIL NoSeriesRelationship.NEXT = 0;
      prNoSeries.GET(NoSeriesCode);
      prNoSeries.MARK := TRUE;
      prNoSeries.MARKEDONLY := TRUE;
    END;

    PROCEDURE GetNextNo@12(NoSeriesCode@1000 : Code[10];SeriesDate@1001 : Date;ModifySeries@1002 : Boolean;VAR NoSeries@1100253001 : Record 308;pwEmpresa@1100253009 : Text[30]) : Code[20];
    VAR
      NoSeriesLine@1003 : Record 309;
      LastNoSeriesLine@1100253000 : Record 309;
      Text004@1100253003 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on %2.;ESP=No puede asignar n£meros nuevos de la serie %1 en la %2.';
      Text005@1100253002 : TextConst 'ENU=You cannot assign new numbers from the number series %1.;ESP=No puede asignar n£meros nuevos de la serie %1.';
      Text006@1100253004 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on a date before %2.;ESP=No puede asignar n£meros nuevos de la serie %1 en una fecha anterior a %2.';
      Text007@1100253005 : TextConst 'ENU=You cannot assign numbers greater than %1 from the number series %2.;ESP=No puede asignar n£meros mayores que %1 de la serie %2.';
      WarningNoSeriesCode@1100253006 : Code[10];
      TrySeriesDate@1100253007 : Date;
      TryNoSeriesCode@1100253008 : Code[10];
    BEGIN
      // GetNextNo
      // Copia de las funciones del estandard de buscar numeros de serie
      // Modificada para cambiar de empresa

      NoSeriesLine.CHANGECOMPANY(pwEmpresa);

      IF SeriesDate = 0D THEN
        SeriesDate := WORKDATE;

      IF ModifySeries OR (LastNoSeriesLine."Series Code" = '') THEN BEGIN
        IF ModifySeries THEN
          NoSeriesLine.LOCKTABLE;
        NoSeries.GET(NoSeriesCode);

        // SetNoSeriesLineFilter(NoSeriesLine,NoSeriesCode,SeriesDate);
        IF SeriesDate = 0D THEN
          SeriesDate := WORKDATE;
        NoSeriesLine.RESET;
        NoSeriesLine.SETCURRENTKEY("Series Code","Starting Date");
        NoSeriesLine.SETRANGE("Series Code",NoSeriesCode);
        NoSeriesLine.SETRANGE("Starting Date",0D,SeriesDate);
        IF NoSeriesLine.FINDLAST THEN BEGIN
          NoSeriesLine.SETRANGE("Starting Date", NoSeriesLine."Starting Date");
          NoSeriesLine.SETRANGE(Open,TRUE);
        END;

        IF NOT NoSeriesLine.FINDFIRST THEN BEGIN
          NoSeriesLine.SETRANGE("Starting Date");
          IF NoSeriesLine.FINDFIRST THEN
            ERROR(Text004, NoSeriesCode,SeriesDate);
          ERROR(Text005, NoSeriesCode);
        END;
      END ELSE
        NoSeriesLine := LastNoSeriesLine;

      IF NoSeries."Date Order" AND (SeriesDate < NoSeriesLine."Last Date Used") THEN
        ERROR( Text006, NoSeries.Code,NoSeriesLine."Last Date Used");
      NoSeriesLine."Last Date Used" := SeriesDate;
      IF NoSeriesLine."Last No. Used" = '' THEN BEGIN
        NoSeriesLine.TESTFIELD("Starting No.");
        NoSeriesLine."Last No. Used" := NoSeriesLine."Starting No.";
      END ELSE
        IF NoSeriesLine."Increment-by No." <= 1 THEN
          NoSeriesLine."Last No. Used" := INCSTR(NoSeriesLine."Last No. Used")
        ELSE
          IncrementNoText(NoSeriesLine."Last No. Used",NoSeriesLine."Increment-by No.");


      IF (NoSeriesLine."Ending No." <> '') AND
         (NoSeriesLine."Last No. Used" > NoSeriesLine."Ending No.")
      THEN
        ERROR( Text007, NoSeriesLine."Ending No.",NoSeriesCode);
      IF (NoSeriesLine."Ending No." <> '') AND
         (NoSeriesLine."Warning No." <> '') AND
         (NoSeriesLine."Last No. Used" >= NoSeriesLine."Warning No.") AND
         (NoSeriesCode <> WarningNoSeriesCode) AND
         (TryNoSeriesCode = '')
      THEN BEGIN
        WarningNoSeriesCode := NoSeriesCode;
        MESSAGE(Text007,NoSeriesLine."Ending No.",NoSeriesCode);
      END;
      NoSeriesLine.VALIDATE(Open);

      IF ModifySeries THEN
        NoSeriesLine.MODIFY
      ELSE
        LastNoSeriesLine := NoSeriesLine;
      EXIT(NoSeriesLine."Last No. Used");
    END;

    LOCAL PROCEDURE IncrementNoText@20(VAR No@1000 : Code[20];IncrementByNo@1001 : Decimal);
    VAR
      DecimalNo@1002 : Decimal;
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      NewNo@1005 : Text[30];
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      EVALUATE(DecimalNo,COPYSTR(No,StartPos,EndPos - StartPos + 1));
      NewNo := FORMAT(DecimalNo + IncrementByNo,0,1);
      ReplaceNoText(No,NewNo,0,StartPos,EndPos);
    END;

    LOCAL PROCEDURE GetIntegerPos@4(No@1000 : Code[20];VAR StartPos@1001 : Integer;VAR EndPos@1002 : Integer);
    VAR
      IsDigit@1003 : Boolean;
      i@1004 : Integer;
    BEGIN
      StartPos := 0;
      EndPos := 0;
      IF No <> '' THEN BEGIN
        i := STRLEN(No);
        REPEAT
          IsDigit := No[i] IN ['0'..'9'];
          IF IsDigit THEN BEGIN
            IF EndPos = 0 THEN
              EndPos := i;
            StartPos := i;
          END;
          i := i - 1;
        UNTIL (i = 0) OR (StartPos <> 0) AND NOT IsDigit;
      END;
    END;

    LOCAL PROCEDURE ReplaceNoText@7(VAR No@1000 : Code[20];NewNo@1001 : Code[20];FixedLength@1002 : Integer;StartPos@1003 : Integer;EndPos@1004 : Integer);
    VAR
      StartNo@1005 : Code[20];
      EndNo@1006 : Code[20];
      ZeroNo@1007 : Code[20];
      NewLength@1008 : Integer;
      OldLength@1009 : Integer;
      Text010@1100253000 : TextConst 'ENU=The number %1 cannot be extended to more than 20 characters.;ESP=El n£mero %1 no puede superar 20 caracteres.';
    BEGIN
      IF StartPos > 1 THEN
        StartNo := COPYSTR(No,1,StartPos - 1);
      IF EndPos < STRLEN(No) THEN
        EndNo := COPYSTR(No,EndPos + 1);
      NewLength := STRLEN(NewNo);
      OldLength := EndPos - StartPos + 1;
      IF FixedLength > OldLength THEN
        OldLength := FixedLength;
      IF OldLength > NewLength THEN
        ZeroNo := PADSTR('',OldLength - NewLength,'0');
      IF STRLEN(StartNo) + STRLEN(ZeroNo) + STRLEN(NewNo) + STRLEN(EndNo)  > 20 THEN
        ERROR(Text010, No);
      No := StartNo + ZeroNo + NewNo + EndNo;
    END;

    BEGIN
    END.
  }
}
