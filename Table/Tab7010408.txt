OBJECT Table 7010408 Contrato compra
{
  OBJECT-PROPERTIES
  {
    Date=27/11/14;
    Time=13:58:11;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               rPar.FINDFIRST;
               rPar.TESTFIELD("Serie contrato compra");
               GestNoSerie.InitSeries(rPar."Serie contrato compra", rPar."Serie contrato compra", TODAY,
                                     "N§ Contrato", rPar."Serie contrato compra");

               // ----  20.06.2002.  Modificado para rellenar el garaje con el garaje por defecto del usuario  ----

               IF Garaje = '' THEN BEGIN
                 rUsu.GET(USERID);
                 IF rUsu."Garaje por defecto" = '' THEN
                   ERROR(err3)
                 ELSE
                   VALIDATE(Garaje, rUsu."Garaje por defecto");
               END;

               // ----  FIN AJS 20.06.2002  ----

               rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra, mes1, '', '');
             END;

    OnModify=BEGIN
               // AJS --> Hay comprobar que el contrato no se este solapando con otros ya introducidos.
               //
               comprobar_solape(FALSE);
             END;

    OnDelete=VAR
               lrMiniVeh@1100244000 : Record 7010407;
             BEGIN
               // AJS --> Hay que comprobar si este contrato tiene servicios asignados, en cuyo caso no
               //         dejar borrar.
               // AJS --> Si se deja borrar hay que borrar los precios y las zonas ligadas.
               //
               CLEAR(rPC);
               rPC.SETRANGE(Garaje       , Garaje);
               rPC.SETRANGE("N§ Contrato", "N§ Contrato");
               IF rPC.FINDFIRST THEN
                 ERROR(partes_confirmados);

               rZon.RESET;
               rZon.SETRANGE(Garaje         , Garaje);
               rZon.SETRANGE("N§ Contrato"  , "N§ Contrato");
               rZon.SETRANGE("Tipo contrato", rZon."Tipo contrato"::Compra);
               IF rZon.FINDFIRST THEN
                 rZon.DELETEALL;
               rPre.RESET;
               rPre.SETRANGE(Garaje       , Garaje);
               rPre.SETRANGE("N§ Contrato", "N§ Contrato");
               IF rPre.FINDFIRST THEN
                 rPre.DELETEALL(TRUE);
               rComen.RESET;
               rComen.SETRANGE(Garaje         , Garaje);
               rComen.SETRANGE("N§ Contrato"  , "N§ Contrato");
               rComen.SETRANGE("Tipo contrato", rComen."Tipo contrato"::Compra);
               IF rComen.FINDFIRST THEN
                 rComen.DELETEALL(TRUE);

               // BORRA LAS LINEAS DE MINIMOS POR VEHICULO
               lrMiniVeh.RESET;
               lrMiniVeh.SETRANGE ("N§ Contrato"   , "N§ Contrato");
               lrMiniVeh.SETRANGE ("Tipo Contrato" , lrMiniVeh."Tipo Contrato"::Compra);
               IF lrMiniVeh.FINDFIRST THEN
                 lrMiniVeh.DELETEALL(TRUE);

               rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra, mes2,
                                      Cliente + '-' + Touroperador,
                                      FORMAT("Fecha inicio contrato") + '-' + FORMAT("Fecha final contrato"));
             END;

    CaptionML=ESP=Contrato compra;
    LookupFormID=Form7010438;
    DrillDownFormID=Form7010438;
  }
  FIELDS
  {
    { 1   ;   ;Garaje              ;Code10        ;TableRelation=Garaje.Garaje;
                                                   OnValidate=VAR
                                                                cFunBas@1100244000 : Codeunit 7010310;
                                                              BEGIN
                                                                IF Garaje <> xRec.Garaje THEN BEGIN

                                                                  // AJS 05.02.2004
                                                                  // Vamos a dejar que pongan el garaje todos, de esta manera al buscar los precios habra que chequear que exista
                                                                  // para el garaje del servicio o para el garaje TODOS
                                                                  //cFunBas.TestGarajeTodos(Garaje);

                                                                  cFunBas.TestRestringido(Garaje);

                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra, Garaje, xRec.Garaje, Garaje);
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Garaje;
                                                   SQL Data Type=Varchar;
                                                   Description=PK, FK Garaje }
    { 3   ;   ;N§ Contrato         ;Code10        ;CaptionML=ESP=N§ Contrato;
                                                   Description=PK;
                                                   Editable=No }
    { 5   ;   ;Fecha firma contrato;Date          ;OnValidate=BEGIN
                                                                IF "Fecha firma contrato" <> xRec."Fecha firma contrato" THEN BEGIN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Fecha firma contrato"),
                                                                                         FORMAT(xRec."Fecha firma contrato"), FORMAT("Fecha firma contrato"));
                                                                  // Recalculamos los precios de contrato
                                                                  //
                                                                  rPre.RESET;
                                                                  rPre.SETRANGE(Garaje       , Garaje);
                                                                  rPre.SETRANGE("N§ Contrato", "N§ Contrato");
                                                                  IF rPre.FINDSET(TRUE) THEN BEGIN
                                                                    REPEAT
                                                                      rPre.VALIDATE("Cod. Divisa", "Cod. Divisa");
                                                                      rPre.MODIFY;
                                                                    UNTIL rPre.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Fecha firma contrato }
    { 7   ;   ;Fecha inicio contrato;Date         ;OnValidate=BEGIN
                                                                IF "Fecha inicio contrato" <> xRec."Fecha inicio contrato" THEN BEGIN
                                                                  IF "Fecha inicio contrato" < "Fecha firma contrato" THEN
                                                                    ERROR(err4);
                                                                  IF "Fecha final contrato" <> 0D THEN BEGIN
                                                                    IF "Fecha final contrato" < "Fecha inicio contrato" THEN
                                                                      ERROR(err2);
                                                                  END;
                                                                  TestCoherencia;
                                                                  Confirmado := FALSE;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Fecha inicio contrato"), FORMAT(xRec."Fecha inicio contrato"),
                                                                                         FORMAT("Fecha inicio contrato"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Fecha inicio contrato;
                                                   NotBlank=Yes }
    { 9   ;   ;Fecha final contrato;Date          ;OnValidate=BEGIN
                                                                IF "Fecha final contrato" <> xRec."Fecha final contrato" THEN BEGIN
                                                                  IF "Fecha inicio contrato" <> 0D THEN BEGIN
                                                                    IF "Fecha final contrato" < "Fecha inicio contrato" THEN
                                                                      ERROR(err2);
                                                                  END;
                                                                  TestCoherencia;
                                                                  Confirmado := FALSE;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Fecha final contrato"),
                                                                                         FORMAT(xRec."Fecha final contrato"), FORMAT("Fecha final contrato"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Fecha final contrato;
                                                   NotBlank=Yes }
    { 11  ;   ;Cliente             ;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=BEGIN
                                                                IF Cliente <> xRec.Cliente THEN BEGIN
                                                                  IF Touroperador <> '' THEN BEGIN
                                                                    rCom.RESET;

                                                                    // Si no existe composicion hay que pedir confirmacion al usuario

                                                                    IF NOT rCom.GET(Cliente, Touroperador) THEN BEGIN
                                                                      IF NOT CONFIRM(Text004) THEN
                                                                        ERROR(err1, Cliente, Touroperador);
                                                                    END;
                                                                  END;

                                                                  // ----  AJS 12.11.2001  Comprobar que no haya contratos confirmados asociados porque si  ----
                                                                  // ----  es asi, no hay que dejar cambiar                                                 ----

                                                                  buscar_partes_confirmados(FALSE);

                                                                  // ----  FIN AJS 12.11.2001  ----

                                                                  Confirmado := FALSE;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION(Cliente), xRec.Cliente, Cliente);
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Cliente;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Cliente }
    { 13  ;   ;Touroperador        ;Code10        ;TableRelation=Cliente/TTOO.TTOO WHERE (Cliente=FIELD(Cliente));
                                                   OnValidate=BEGIN
                                                                IF Touroperador <> xRec.Touroperador THEN BEGIN
                                                                  IF Cliente <> '' THEN BEGIN
                                                                    rCom.RESET;

                                                                    // Si no existe composicion hay que pedir confirmacion al usuario

                                                                    IF NOT rCom.GET(Cliente, Touroperador) THEN BEGIN
                                                                      IF NOT CONFIRM(Text004) THEN
                                                                        ERROR(err1, Cliente, Touroperador);
                                                                    END;
                                                                  END;

                                                                  // ----  AJS 12.11.2001  Comprobar que no haya contratos confirmados asociados porque si  ----
                                                                  // ----  es asi, no hay que dejar cambiar                                                 ----

                                                                  buscar_partes_confirmados(FALSE);

                                                                  // ----  FIN AJS 12.11.2001  ----

                                                                  Confirmado := FALSE;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION(Touroperador), xRec.Touroperador, Touroperador);
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Touroperador;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Touroperador }
    { 15  ;   ;Grupo Registro IVA Producto;Code10 ;TableRelation="VAT Product Posting Group".Code;
                                                   OnValidate=BEGIN
                                                                IF "Grupo Registro IVA Producto" <> xRec."Grupo Registro IVA Producto" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Grupo Registro IVA Producto"),
                                                                                         xRec."Grupo Registro IVA Producto", "Grupo Registro IVA Producto");
                                                              END;

                                                   CaptionML=ESP=Grupo Registro IVA Producto;
                                                   Description=FK Grupo Registro IVA Producto }
    { 17  ;   ;Impuestos incluidos ;Boolean       ;OnValidate=BEGIN
                                                                IF "Impuestos incluidos" <> xRec."Impuestos incluidos" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Impuestos incluidos"),
                                                                                         FORMAT(xRec."Impuestos incluidos"), FORMAT("Impuestos incluidos"));
                                                              END;

                                                   CaptionML=ESP=Impuestos incluidos }
    { 19  ;   ;Cod. Terminos Pago  ;Code10        ;TableRelation="Payment Terms".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Terminos Pago" <> xRec."Cod. Terminos Pago" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Cod. Terminos Pago"), xRec."Cod. Terminos Pago", "Cod. Terminos Pago");
                                                              END;

                                                   CaptionML=ESP=Cod. Terminos Pago;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Terminos Pago }
    { 21  ;   ;Cod. Formas Pago    ;Code10        ;TableRelation="Payment Method".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Formas Pago" <> xRec."Cod. Formas Pago" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Cod. Formas Pago"), xRec."Cod. Formas Pago", "Cod. Formas Pago");
                                                              END;

                                                   CaptionML=ESP=Cod. Formas Pago;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Forma Pago }
    { 23  ;   ;Cod. Serie          ;Code10        ;TableRelation="No. Series".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Serie" <> xRec."Cod. Serie" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Cod. Serie"), xRec."Cod. Serie",
                                                                                         "Cod. Serie");
                                                              END;

                                                   CaptionML=ESP=Cod. Serie;
                                                   SQL Data Type=Varchar;
                                                   Description=FK N§ Serie }
    { 25  ;   ;Cod. Divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Divisa" <> xRec."Cod. Divisa" THEN BEGIN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Cod. Divisa"), xRec."Cod. Divisa",
                                                                                         "Cod. Divisa");
                                                                  // Recalculamos los precios de contrato
                                                                  //
                                                                  rPre.RESET;
                                                                  rPre.SETRANGE(Garaje       , Garaje);
                                                                  rPre.SETRANGE("N§ Contrato", "N§ Contrato");
                                                                  IF rPre.FINDSET(TRUE) THEN BEGIN
                                                                    REPEAT
                                                                      rPre.VALIDATE("Cod. Divisa", "Cod. Divisa");
                                                                      rPre.MODIFY;
                                                                    UNTIL rPre.NEXT = 0;
                                                                  END;

                                                                // Si tiene contratos Text000 tambien se cambiar  el "Cod.Divisa" en estos

                                                                  rCon.RESET;
                                                                  rCon.SETRANGE ("Basado en contrato n§" , "N§ Contrato");
                                                                  rCon.MODIFYALL("Cod. Divisa" , "Cod. Divisa" );

                                                                  // JPT 27/02/07 Insertamos el factor divisar
                                                                  "Factor Divisa" := rTipo.ExchangeRate(WORKDATE,"Cod. Divisa");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Cod. Divisa;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Divisa }
    { 26  ;   ;Factor Divisa       ;Decimal       ;OnValidate=BEGIN


                                                                rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                      FIELDCAPTION("Factor Divisa"),FORMAT(xRec."Factor Divisa"), FORMAT("Factor Divisa"));
                                                              END;

                                                   CaptionML=ESP=Factor Divisa }
    { 27  ;   ;Maletas sobre       ;Option        ;OnValidate=BEGIN
                                                                IF "Maletas sobre" <> xRec."Maletas sobre" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Maletas sobre"), FORMAT(xRec."Maletas sobre"),
                                                                                         FORMAT("Maletas sobre"));
                                                              END;

                                                   CaptionML=ESP=Maletas sobre;
                                                   OptionCaptionML=ESP=Facturados,Transportados;
                                                   OptionString=Facturados,Transportados }
    { 29  ;   ;Confirmado          ;Boolean       ;CaptionML=ESP=Confirmado;
                                                   Editable=No }
    { 31  ;   ;Proveedor           ;Code20        ;TableRelation=Vendor.No.;
                                                   OnValidate=BEGIN
                                                                IF Proveedor <> xRec.Proveedor THEN BEGIN

                                                                  // ----  AJS 12.11.2001  Comprobar que no haya partes confirmados asociados porque si  ----
                                                                  // ----  es asi, no hay que dejar cambiar                                              ----

                                                                  buscar_partes_confirmados(FALSE);

                                                                  // ----  FIN AJS 12.11.2001  ----

                                                                  // ----  Tomar los datos de facturacion del proveedor  ----

                                                                  rPro.RESET;
                                                                  IF rPro.GET(Proveedor) THEN BEGIN
                                                                    VALIDATE("Cod. Terminos Pago", rPro."Payment Terms Code");
                                                                    VALIDATE("Cod. Formas Pago", rPro."Payment Method Code");
                                                                    VALIDATE("Cod. Divisa", rPro."Currency Code");
                                                                  END;

                                                                  // ----  Tomar la serie de facturacion del contrato anterior de este proveedor  ----

                                                                  IF "Cod. Serie" = '' THEN BEGIN
                                                                    rCon.RESET;
                                                                    rCon.SETCURRENTKEY(Garaje,
                                                                                       Proveedor,
                                                                                       "Fecha inicio contrato");
                                                                    rCon.SETRANGE (Garaje       , Garaje);
                                                                    rCon.SETFILTER("N§ Contrato", '<>%1', "N§ Contrato");
                                                                    rCon.SETRANGE (Proveedor    , Proveedor);

                                                                    rCon := Rec;

                                                                    IF rCon.NEXT(-1) <> 0 THEN BEGIN
                                                                      IF rCon."Cod. Serie" <> '' THEN
                                                                        VALIDATE("Cod. Serie", rCon."Cod. Serie");
                                                                    END;
                                                                  END;

                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION(Proveedor), FORMAT(xRec.Proveedor), FORMAT(Proveedor));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Proveedor;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Proveedor }
    { 33  ;   ;Maletas exentas     ;Boolean       ;OnValidate=BEGIN
                                                                IF "Maletas exentas" <> xRec."Maletas exentas" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Maletas exentas"), FORMAT(xRec."Maletas exentas"),
                                                                                         FORMAT("Maletas exentas"));
                                                              END;

                                                   CaptionML=ESP=Maletas exentas }
    { 35  ;   ;Maletas incluidas   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Maletas incluidas" <> xRec."Maletas incluidas" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Maletas incluidas"), FORMAT(xRec."Maletas incluidas"),
                                                                                         FORMAT("Maletas incluidas"));
                                                              END;

                                                   CaptionML=ESP=Maletas incluidas }
    { 37  ;   ;Considerar maletas  ;Boolean       ;OnValidate=BEGIN
                                                                IF "Considerar maletas" <> xRec."Considerar maletas" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                         FIELDCAPTION("Considerar maletas"), FORMAT(xRec."Considerar maletas"),
                                                                                         FORMAT("Considerar maletas"));
                                                              END;

                                                   CaptionML=ESP=Considerar maletas }
    { 38  ;   ;Basado en contrato n§;Code10       ;TableRelation="Contrato compra"."N§ Contrato" WHERE (Basado en contrato n§=FILTER(=''));
                                                   OnValidate=VAR
                                                                lrCon@1100244000 : Record 7010408;
                                                              BEGIN
                                                                IF "Basado en contrato n§" = "N§ Contrato" THEN
                                                                  ERROR (err6);

                                                                // ----  Si el contrato tiene precios asociados no dejamos rellenar este campo porque no  ----
                                                                // ----  tiene sentido                                                                    ----

                                                                rPre.RESET;
                                                                rPre.SETRANGE(Garaje       , Garaje);
                                                                rPre.SETRANGE("N§ Contrato", "N§ Contrato");
                                                                IF rPre.FINDFIRST THEN
                                                                  ERROR(err8);

                                                                // Si se asocia a otro contrato, el codigo de divisa se copiar  de ese otro contrato

                                                                IF "Basado en contrato n§" <> '' THEN BEGIN
                                                                  lrCon.RESET;
                                                                  lrCon.SETRANGE ("N§ Contrato" , "Basado en contrato n§");
                                                                  IF lrCon.FINDFIRST THEN BEGIN
                                                                    IF lrCon.Garaje <> Garaje THEN
                                                                      ERROR(err7);
                                                                    VALIDATE("Cod. Divisa" , lrCon."Cod. Divisa");
                                                                    lrCon.MODIFY;
                                                                  END;

                                                                END;
                                                              END;

                                                   CaptionML=ESP=Basado en contrato n§ }
    { 39  ;   ;Tiene Contratos Asociados;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Contrato compra" WHERE (Basado en contrato n§=FIELD(N§ Contrato)));
                                                   CaptionML=ESP=Tiene Contratos Asociados;
                                                   Editable=No }
    { 50  ;   ;Tipo calculo coste  ;Option        ;InitValue=Precio mas alto;
                                                   OnValidate=BEGIN
                                                                rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                       FIELDCAPTION("Tipo calculo coste"), FORMAT(xRec."Tipo calculo coste"),
                                                                                       FORMAT("Tipo calculo coste"));
                                                              END;

                                                   CaptionML=ESP=Tipo calculo coste;
                                                   OptionCaptionML=ESP=Normal,Precio mas alto,Promedio Plazas;
                                                   OptionString=Normal,Precio mas alto,Promedio Plazas }
    { 51  ;   ;Calendario festivos ;Code10        ;TableRelation="Calendario Transfer".Code;
                                                   OnValidate=BEGIN
                                                                // AJS 16.05.2008, TNU08003
                                                                // Si hay precios con Dia festivo marcado no se puede dejar en blanco

                                                                IF "Calendario festivos" = '' THEN
                                                                BEGIN
                                                                  rPre.RESET;
                                                                  rPre.SETRANGE(Garaje       , Garaje);
                                                                  rPre.SETRANGE("N§ Contrato", "N§ Contrato");
                                                                  rPre.SETRANGE("Dia festivo", TRUE);
                                                                  IF NOT rPre.ISEMPTY THEN
                                                                    ERROR(Text005);
                                                                END;

                                                                rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                       FIELDCAPTION("Calendario festivos"), FORMAT(xRec."Calendario festivos"),
                                                                                       FORMAT("Calendario festivos"));
                                                              END;

                                                   CaptionML=ESP=Calendario festivos;
                                                   Description="Calendario Transfer".Code }
    { 52  ;   ;Base para zonas precio;Option      ;OnValidate=BEGIN
                                                                IF "Base para zonas precio" <> xRec."Base para zonas precio" THEN
                                                                BEGIN
                                                                  // AJS 11.06.2008
                                                                  // Para cambiar este campo la tabla de zonas precio tiene que estar vacia para ese contrato

                                                                  rZon.RESET;
                                                                  rZon.SETRANGE(Garaje         , Garaje);
                                                                  rZon.SETRANGE("N§ Contrato"  , "N§ Contrato");
                                                                  rZon.SETRANGE("Tipo contrato", rZon."Tipo contrato");
                                                                  IF NOT rZon.ISEMPTY THEN
                                                                    ERROR(Text006);

                                                                END;

                                                                rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                                                                       FIELDCAPTION("Base para zonas precio"), FORMAT(xRec."Base para zonas precio"),
                                                                                       FORMAT("Base para zonas precio"));
                                                              END;

                                                   CaptionML=ESP=Base para zonas precio;
                                                   OptionCaptionML=ESP=Zona fisica,Hotel;
                                                   OptionString=Zona fisica,Hotel;
                                                   Description=Indicar sobre que tabla se basar  la conversion de zonas precios : Zona fisica,Hotel }
    { 53  ;   ;Calcular ttoos por separado;Boolean;CaptionML=ESP=Calcular ttoos por separado;
                                                   Description=Indica si se quiere realizar el c lculo de costes por cada TTOO por separado. }
  }
  KEYS
  {
    {    ;Garaje,N§ Contrato                      ;Clustered=Yes }
    {    ;Proveedor,Cliente,Touroperador,Fecha inicio contrato,Fecha final contrato }
    {    ;Garaje,Proveedor,Fecha inicio contrato   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100244029 : TextConst 'ESP=asociados';
      Text001@1100244030 : TextConst 'ESP=CONF-CONTC';
      Text002@1100244031 : TextConst 'ESP=" Del N§ "';
      Text003@1100244032 : TextConst 'ESP=" Al N§ "';
      rPar@1100244000 : Record 7010311;
      rCom@1100244001 : Record 7010313;
      rHist@1100244002 : Record 7010316;
      rZon@1100244003 : Record 7010404;
      rPre@1100244004 : Record 7010409;
      rTipo@1100244005 : Record 330;
      rComen@1100244006 : Record 7010406;
      rPC@1100244007 : Record 7035393;
      rPro@1100244008 : Record 23;
      rCon@1100244009 : Record 7010408;
      rUsu@1100244010 : Record 7010420;
      GestNoSerie@1100244011 : Codeunit 396;
      Text004@1103355000 : TextConst 'ESP=La composicion resultante no existe, desea proceder al cambio ?';
      err1@1100244012 : TextConst 'ESP=La composici¢n creada por %1-%2 no existe.';
      err2@1100244013 : TextConst 'ESP=La fecha de final de contrato no puede ser anterior a la de inicio';
      err3@1100244014 : TextConst 'ESP=Debe indicar un garaje al contrato';
      err4@1100244015 : TextConst 'ESP=La Fecha de inicio del contrato no puede ser anterior a la fecha de firma';
      err5@1100244016 : TextConst 'ESP=No se puede ejecutar esta funcion sobre un contrato no confirmado.';
      err6@1100244017 : TextConst 'ESP=Un Contrato No puede asociarse a s¡ mismo';
      err7@1100244018 : TextConst 'ESP=No se puede asociar con otro contrato que tenga distinto Garaje';
      err8@1100244019 : TextConst 'ESP=No se puede asociar un contrato cuando tiene precios definidos';
      mes1@1100244020 : TextConst 'ESP=INSERTAR';
      mes2@1100244021 : TextConst 'ESP=BORRAR';
      mes3@1100244022 : TextConst 'ESP=Se ha creado correctamente el contrato %1.';
      text1@1100244023 : TextConst 'ESP=Desea crear una copia del contrato actual %1.';
      text2@1100244024 : TextConst 'ESP=COPIA CONTRATO INCREMENTANDO PRECIOS';
      text3@1100244025 : TextConst 'ESP=Porcentaje:';
      text5@1100244026 : TextConst 'ESP=Copia de Contrato';
      partes_confirmados@1100244027 : TextConst 'ESP=No se puede borrar un contrato con partes confirmados asociados.';
      no_cambio_parte_confirmado@1100244028 : TextConst 'ESP=No se puede realizar el cambio porque dejaria partes confirmados sin contrato';
      ChangeExchangeRate@1103355001 : Form 511;
      Text005@1103355002 : TextConst 'ESP=No se puede dejar en blanco el calendario de festivos porque hay precios marcados como dia festivo.';
      Text006@1103355003 : TextConst 'ESP=Debe borrar las zonas de precio de este contrato antes de cambiar este campo.';
      Text007@1103355004 : TextConst 'ESP=No existe el usuario %1.';

    PROCEDURE comprobar_solape@3(FromConfirmar@1100244000 : Boolean);
    VAR
      rCon@1100244001 : Record 7010408;
      sw_error@1100244002 : Boolean;
      men1@1100244003 : TextConst 'ESP=La fecha de inicio del contrato no puede quedar en blanco';
      men2@1100244004 : TextConst 'ESP=La fecha de final del contrato no puede quedar en blanco';
      men3@1100244005 : TextConst 'ESP=El cliente del contrato no puede quedar en blanco';
      men4@1100244006 : TextConst 'ESP=El Touroperador del contrato no puede quedar en blanco';
      men5@1100244007 : TextConst 'ESP=El Grupo Registro IVA Producto no puede quedar en blanco';
      men6@1100244008 : TextConst 'ESP=Los Terminos de Pago no pueden quedar en blanco';
      men7@1100244009 : TextConst 'ESP=La Forma de Pago no puede quedar en blanco';
      men8@1100244010 : TextConst 'ESP=El Codigo de Serie no puede quedar en blanco';
      men9@1100244011 : TextConst 'ESP=La fecha de inicio de este contrato se solapa con el contrato %1';
      men10@1100244012 : TextConst 'ESP=La fecha de final de este contrato se solapa con el contrato %1';
      men11@1100244013 : TextConst 'ESP=Este contrato solapa completamente el contrato %1';
      men12@1100244014 : TextConst 'ESP=El Proveedor del contrato no puede quedar en blanco';
      vHayRest@1100244015 : Boolean;
      cFunBas@1100244016 : Codeunit 7010310;
    BEGIN
      // comprobar_solape
      //
      // Funcion --> Comprueba que los campos obligatorios esten rellenados y que el contrato
      //             introducido no se solape con otros ya introducidos y confirmados.
      //

      rPar.FINDFIRST;

      //RRT. Tratamiento de restricciones.
      vHayRest := cFunBas.TestRestriccion(Text001);
      IF vHayRest AND Confirmado AND (NOT FromConfirmar) THEN BEGIN
        Confirmado := FALSE;
        MODIFY;
      END;

      sw_error := FALSE;
      IF "Fecha inicio contrato" = 0D THEN BEGIN
        MESSAGE(men1);
        sw_error := TRUE;
      END;
      IF "Fecha final contrato" = 0D THEN BEGIN
        MESSAGE(men2);
        sw_error := TRUE;
      END;

      IF Proveedor = '' THEN BEGIN
        MESSAGE(men12);
        sw_error := TRUE;
      END;

      // AJS 24.06.2004
      // Los precios de compra en Transunion son independientes del Cliente-Touroperador del parte de trabajo

      IF (rPar."Empresa Real" <> rPar."Empresa Real"::TRN) AND
         (rPar."Empresa Real" <> rPar."Empresa Real"::CNT) THEN
      BEGIN
        IF Cliente = '' THEN BEGIN
          MESSAGE(men3);
          sw_error := TRUE;
        END;

        IF Touroperador = '' THEN BEGIN
          MESSAGE(men4);
          sw_error := TRUE;
        END;
      END;

      IF "Grupo Registro IVA Producto" = '' THEN BEGIN
        MESSAGE(men5);
        sw_error := TRUE;
      END;

      IF "Cod. Terminos Pago" = '' THEN BEGIN
        MESSAGE(men6);
        sw_error := TRUE;
      END;

      IF "Cod. Formas Pago" = '' THEN BEGIN
        MESSAGE(men7);
        sw_error := TRUE;
      END;
      {* ANULADO AJS 28-08-00
      IF "Cod. Serie" = '' THEN BEGIN
        MESSAGE(men8);
        sw_error := TRUE;
      END;
      *}
      IF sw_error THEN
        EXIT;
      rCon.RESET;
      rCon.SETCURRENTKEY(Proveedor,
                         Cliente,
                         Touroperador,
                         "Fecha inicio contrato",
                         "Fecha final contrato");
      rCon.SETRANGE (Proveedor    , Proveedor);
      rCon.SETRANGE (Cliente      , Cliente);
      rCon.SETRANGE (Touroperador , Touroperador);
      rCon.SETFILTER("N§ Contrato", '<>%1', "N§ Contrato");
      rCon.SETRANGE (Confirmado   , TRUE);
      rCon.SETRANGE (Garaje       , Garaje);
      // Comprobar el solapamiento de la fecha inicial
      //
      rCon.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha inicio contrato");
      rCon.SETFILTER("Fecha final contrato" , '>=%1', "Fecha inicio contrato");
      IF rCon.FINDFIRST THEN BEGIN
        MESSAGE(men9, rCon."N§ Contrato");
        sw_error := TRUE;
      END;
      // Comprobar el solapamiento de la fecha final
      //
      rCon.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha final contrato");
      rCon.SETFILTER("Fecha final contrato" , '>=%1', "Fecha final contrato");
      IF rCon.FINDFIRST THEN BEGIN
        MESSAGE(men10, rCon."N§ Contrato");
        sw_error := TRUE;
      END;
      // Comprobar que el contrato no abarca por entero a otro ya introducido
      //
      rCon.SETFILTER("Fecha inicio contrato", '>=%1', "Fecha inicio contrato");
      rCon.SETFILTER("Fecha final contrato" , '<=%1', "Fecha final contrato");
      IF rCon.FINDFIRST THEN BEGIN
        MESSAGE(men11, rCon."N§ Contrato");
        sw_error := TRUE;
      END;

      IF (NOT sw_error) AND (NOT vHayRest) AND (NOT Confirmado) THEN BEGIN
        Confirmado := TRUE;
        MODIFY;
      END;
    END;

    PROCEDURE nom_garaje@1() : Text[30];
    VAR
      rGar@1100244000 : Record 7010310;
    BEGIN
      // nom_garaje
      //
      IF NOT rGar.GET(Garaje) THEN
        EXIT('')
      ELSE
        EXIT(rGar.Garaje);
    END;

    PROCEDURE nom_cliente@2() : Text[50];
    VAR
      rCli@1100244000 : Record 18;
    BEGIN
      // nom_cliente
      //
      IF NOT rCli.GET(Cliente) THEN
        EXIT('')
      ELSE
        EXIT(rCli.Name);
    END;

    PROCEDURE nom_touroperador@4() : Text[30];
    VAR
      rTO@1100244000 : Record 7010312;
    BEGIN
      // nom_touroperador
      //
      IF NOT rTO.GET(Touroperador) THEN
        EXIT('')
      ELSE
        EXIT(rTO.Nombre);
    END;

    PROCEDURE copia_contrato@5();
    VAR
      rDiv@1100244000 : Record 4;
      rCon@1100244001 : Record 7010408;
      rZon@1100244002 : Record 7010404;
      rZon2@1100244003 : Record 7010404;
      rPre@1100244004 : Record 7010409;
      rPre2@1100244005 : Record 7010409;
      rPre3@1100244011 : Record 7010409;
      texto_confirm@1100244006 : Text[250];
      rTipSerUsu@1100244007 : Record 7010419;
      rCodSer@1100244008 : Record 7010320;
      lrMiniVeh@1100244009 : Record 7010407;
      lrMiniVeh2@1100244010 : Record 7010407;
    BEGIN
      // copia_contrato
      //
      // Copiar la ficha de contrato, las zonas de precios y los precios introducidos.
      //
      IF NOT Confirmado THEN
        ERROR(err5);
      //texto_confirm := STRSUBSTNO(text1, "N§ Contrato");
      //IF NOT CONFIRM(texto_confirm) THEN
        //EXIT;

      rCon.RESET; rCon.INIT;
      rCon := Rec;
      rCon."N§ Contrato" := '';
      rCon.Confirmado := FALSE;
      rCon.INSERT(TRUE);

      // Escribe una linea en el historico
      rHist.inserta_registro(Garaje, rCon."N§ Contrato", rHist."Tipo Contrato"::Compra,
                             text5,Text002 + "N§ Contrato", Text003 + rCon."N§ Contrato" );

      // Copiar las zonas de precios
      //
      rZon.RESET; rZon.INIT;
      rZon.SETRANGE(Garaje         , Garaje);
      rZon.SETRANGE("N§ Contrato"  , "N§ Contrato");
      rZon.SETRANGE("Tipo contrato", rZon."Tipo contrato"::Compra);
      IF rZon.FINDSET(TRUE) THEN BEGIN
        REPEAT
          rZon2 := rZon;
          rZon2."N§ Contrato" := rCon."N§ Contrato";
          rZon2.INSERT;
        UNTIL rZon.NEXT = 0;
      END;
      // Copiar los precios y suplementos
      //
      rPre.RESET; rPre.INIT;
      //BRM 07/06/04
      rPre.SETCURRENTKEY(Garaje,
                         "N§ Contrato",
                         "Tipo precio",
                         "Codigo servicio",
                         "Zona desde",
                         "Zona hasta",
                         "Fecha desde",
                         "Fecha hasta",
                         "Tipo Vehiculo",
                         "Rango desde",
                         "Rango hasta");

      rPre.SETRANGE(Garaje       , Garaje);
      rPre.SETRANGE("N§ Contrato", "N§ Contrato");
      IF rPre.FINDSET(TRUE) THEN BEGIN
        REPEAT
          rPre2.INIT; rPre2.RESET;
          rPre2 := rPre;
          rPre2."N§ Contrato"  := rCon."N§ Contrato";


          IF rPre."Codigo servicio" <> '' THEN
            rCodSer.GET(rPre."Codigo servicio");
          IF NOT rTipSerUsu.GET(USERID, rCodSer."Tipo servicio") THEN
            rTipSerUsu.INIT;

          IF rPre.Porcentaje THEN
            rPre2.VALIDATE("Precio Vehiculo", rPre."Precio Vehiculo")
          ELSE BEGIN
            CLEAR(rDiv);
            IF rDiv.GET("Cod. Divisa") THEN ;
            // Precio Vehiculo
            rPre2.VALIDATE("Precio Vehiculo", rPre."Precio Vehiculo" + ROUND((rPre."Precio Vehiculo" * rTipSerUsu."1er % Incremento"
                                ) / 100,rDiv."Amount Rounding Precision"));
            rPre2.VALIDATE("Precio Vehiculo", rPre2."Precio Vehiculo" + ROUND((rPre2."Precio Vehiculo" * rTipSerUsu."2do % Incremento"
                                ) / 100,rDiv."Amount Rounding Precision"));
            // Precio Adulto
            rPre2.VALIDATE("Precio Adulto", rPre."Precio Adulto" + ROUND((rPre."Precio Adulto" * rTipSerUsu."1er % Incremento"
                                ) / 100,rDiv."Amount Rounding Precision"));
            rPre2.VALIDATE("Precio Adulto", rPre2."Precio Adulto" + ROUND((rPre2."Precio Adulto" * rTipSerUsu."2do % Incremento"
                                ) / 100,rDiv."Amount Rounding Precision"));
            // Precio Ni¤o
            rPre2.VALIDATE("Precio Ni¤o", rPre."Precio Ni¤o" + ROUND((rPre."Precio Ni¤o" * rTipSerUsu."1er % Incremento"
                                ) / 100,rDiv."Amount Rounding Precision"));
            rPre2.VALIDATE("Precio Ni¤o", rPre2."Precio Ni¤o" + ROUND((rPre2."Precio Ni¤o" * rTipSerUsu."2do % Incremento"
                                ) / 100,rDiv."Amount Rounding Precision"));


          END;

          rPre2.INSERT(TRUE);
        UNTIL rPre.NEXT = 0;
      END;


      // copia la tabla de minimos por vehiculo
      lrMiniVeh.RESET; lrMiniVeh.INIT;
      lrMiniVeh.SETRANGE ("N§ Contrato" , "N§ Contrato");
      lrMiniVeh.SETRANGE (lrMiniVeh."Tipo Contrato" , lrMiniVeh."Tipo Contrato"::Compra);
      IF lrMiniVeh.FINDSET(TRUE) THEN BEGIN
        REPEAT
          lrMiniVeh2 := lrMiniVeh;
          lrMiniVeh2."N§ Contrato" := rCon."N§ Contrato";
          lrMiniVeh2.INSERT;
        UNTIL lrMiniVeh.NEXT = 0;
      END;

      MESSAGE(mes3, rCon."N§ Contrato");
    END;

    PROCEDURE crear_contrato_incrementado@6();
    VAR
      fTabTipoSer@1100244000 : Form 7035260;
      rTipoSerUsu@1100244001 : Record 7010419;
      rTipoSer@1100244002 : Record 7010319;
    BEGIN
      // crear_contrato_incrementado
      //
      //  Indicar porcentaje de incremento y llamar a la rutina de copia.
      //
      IF NOT Confirmado THEN
        ERROR(err5);
      // Creamos los registros por cada tipo de servicio en un fichero auxiliar por usuario.
      //
      rTipoSerUsu.RESET;
      rTipoSerUsu.SETRANGE(Usuario, USERID);
      IF rTipoSerUsu.FINDFIRST THEN
        rTipoSerUsu.DELETEALL;
      rTipoSer.RESET;
      IF rTipoSer.FINDFIRST THEN BEGIN
        REPEAT
          CLEAR(rTipoSerUsu);
          rTipoSerUsu.Usuario     := USERID;
          rTipoSerUsu.Codigo      := rTipoSer.Codigo;
          rTipoSerUsu.Descripcion := rTipoSer.Descripcion;
          rTipoSerUsu.INSERT;
        UNTIL rTipoSer.NEXT = 0;
      END;
      COMMIT;
      rTipoSerUsu.FILTERGROUP(2);
      rTipoSerUsu.SETRANGE(Usuario, USERID);
      rTipoSerUsu.FILTERGROUP(0);
      CLEAR(fTabTipoSer);
      fTabTipoSer.SETTABLEVIEW(rTipoSerUsu);
      fTabTipoSer.RUNMODAL;

      copia_contrato;
    END;

    PROCEDURE nom_proveedor@7() : Text[30];
    VAR
      rPro@1100244000 : Record 23;
    BEGIN
      // nom_proveedor
      //
      IF NOT rPro.GET(Proveedor) THEN
        EXIT('')
      ELSE
        EXIT(rPro.Name);
    END;

    PROCEDURE cambiar_composicion@8();
    VAR
      fFicCam@1100244000 : Form 7035258;
      lrCond@1100244001 : Record 7010420;
    BEGIN
      // cambiar_composicion
      //
      // AJS --> Cambio simultaneo de cliente y touroperador del contrato
      //

      // AJF 07/01/09
      // Evito borrar el registro, ya que ahora tiene datos permanentes.
      IF lrCond.GET(USERID) THEN
        lrCond.LimpiaRegistro
      ELSE BEGIN
        lrCond.INIT;
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      COMMIT;
      lrCond.FILTERGROUP(2);
      lrCond.SETRANGE(Usuario, USERID);
      lrCond.FILTERGROUP(0);

      CLEAR(fFicCam);
      fFicCam.SETTABLEVIEW(lrCond);
      fFicCam.SETRECORD(lrCond);
      IF fFicCam.RUNMODAL <> ACTION::OK THEN
        EXIT;
      fFicCam.GETRECORD(lrCond);

      IF lrCond.Garaje <> '' THEN BEGIN
        IF lrCond.Garaje <> Garaje THEN
          RENAME(lrCond.Garaje, "N§ Contrato");
      END;

      IF lrCond.Cliente <> '' THEN BEGIN
        IF xRec.Cliente <> lrCond.Cliente THEN BEGIN
          Cliente := lrCond.Cliente;
          rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Compra,
                                 FIELDCAPTION(Cliente), xRec.Cliente, Cliente);
        END;
      END;

      IF lrCond.Touroperador <> '' THEN
        VALIDATE(Touroperador, lrCond.Touroperador);
      Rec.MODIFY(TRUE);
    END;

    PROCEDURE TestCoherencia@9();
    VAR
      lrPre@1100244000 : Record 7010409;
      INCOHERENCIA_FECHAS@1100244001 : TextConst 'ESP=Las fechas del contrato no cubren el ambito especificado en el registro de precios. Cambie primero las fechas de los precios.';
    BEGIN
      // TestCoherencia
      // Examinaremos que el ambito del contrato sea coherente con el ambito de fechas de la tabla
      // de precios.
      lrPre.RESET;
      lrPre.SETCURRENTKEY(Garaje,
                         "N§ Contrato");
      lrPre.SETRANGE(Garaje       , Garaje);
      lrPre.SETRANGE("N§ Contrato", "N§ Contrato");
      lrPre.SETRANGE(Activo       , TRUE);
      IF lrPre.FINDSET THEN
        REPEAT
          IF ("Fecha inicio contrato" > lrPre."Fecha desde") OR
            ("Fecha final contrato" < lrPre."Fecha hasta") THEN
            ERROR(INCOHERENCIA_FECHAS);
        UNTIL lrPre.NEXT = 0;

      // ----  AJS 12.11.2001 Hay que comprobar que ningun parte confirmado quede sin contrato  ----
      // ----  por el cambio de fechas                                                          ----

      buscar_partes_confirmados(TRUE);

      // ----  Fin AJS  ----
    END;

    PROCEDURE buscar_partes_confirmados@12(pw_control_fecha@1100244000 : Boolean);
    VAR
      lrToPar@1100244001 : Record 7010365;
    BEGIN
      // buscar_partes_confirmados
      //
      // ----  AJS 12.11.2001 Hay que comprobar que ningun parte confirmado quede sin contrato  ----
      // ----  por el cambio de fechas, cliente, touroperador o proveedor                       ----

      lrToPar.RESET;
      lrToPar.SETCURRENTKEY("N§ Contrato compra");
      lrToPar.SETRANGE("N§ Contrato compra", "N§ Contrato");
      lrToPar.SETRANGE(Confirmado         , TRUE);
      IF lrToPar.FINDSET THEN BEGIN
        REPEAT
          IF pw_control_fecha THEN BEGIN
            IF (lrToPar."Fecha Facturacion" < "Fecha inicio contrato") OR
               (lrToPar."Fecha Facturacion" > "Fecha final contrato") THEN
              ERROR(no_cambio_parte_confirmado);
         END
         ELSE
           ERROR(no_cambio_parte_confirmado);
        UNTIL lrToPar.NEXT = 0;
      END;

      // ----  Fin AJS  ----
    END;

    PROCEDURE ContratoPrecios@1103355000(VAR prCont@1103355000 : Record 7010408);
    VAR
      lrContr@1103355001 : Record 7010408;
    BEGIN
      // ContratoPrecios
      // Devuelve el contrato de compra en caso de que est basado en otro

      CLEAR(lrContr);
      lrContr := Rec;
      IF "Basado en contrato n§" <> '' THEN BEGIN
        lrContr.GET(Garaje, "Basado en contrato n§");
      END;
      prCont:= lrContr;
    END;

    PROCEDURE AssisTipoCambio@1103355001() : Boolean;
    VAR
      lwOk@1103355000 : Boolean;
    BEGIN
      // AssisTipoCambio
      // Ense¤a una ventana para cambiar el tipo de cambio

      IF "Cod. Divisa" = '' THEN
        EXIT;

      CLEAR(lwOk);
      ChangeExchangeRate.SetParameter("Cod. Divisa",GetFactorDivisa,WORKDATE);
      IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN BEGIN
        VALIDATE("Factor Divisa",ChangeExchangeRate.GetParameter);
        lwOk := "Factor Divisa" <> xRec."Factor Divisa";
      END;
      CLEAR(ChangeExchangeRate);

      EXIT(lwOk);
    END;

    PROCEDURE GetFactorDivisa@1103355006() : Decimal;
    BEGIN
      // GetFactorDivisa

      // Devuelve el factor divisa del contrato, pero antes se asegura que no sea 0
      IF "Cod. Divisa" = '' THEN
        EXIT;

      IF "Factor Divisa" = 0 THEN
        "Factor Divisa" := rTipo.ExchangeRate(WORKDATE,"Cod. Divisa");

      IF "Factor Divisa" = 0 THEN
        "Factor Divisa" :=1;

      EXIT("Factor Divisa");
    END;

    PROCEDURE FiltrarGarajeUsuario@1103355002();
    VAR
      lrParGenerales@1103355000 : Record 7010311;
      lrUsuario@1103355001 : Record 7010420;
    BEGIN
      // FiltrarGarajeUsuario.
      // Filtramos los partes por garaje dependiendo de la configuraci¢n del usuario.

      lrParGenerales.FINDFIRST;

      IF NOT lrUsuario.GET(USERID) THEN
        ERROR(Text007, USERID);

      IF (lrUsuario."Garaje de trabajo" <> '') AND (lrUsuario."Garaje de trabajo" <> lrParGenerales."Todos los garajes") THEN BEGIN
        FILTERGROUP(2);
        SETRANGE(Garaje, lrUsuario."Garaje de trabajo");
        FILTERGROUP(0);
      END;
    END;

    BEGIN
    {
      $001 AJS 11102013 Modifico la funcion nom_cliente para que retorne Text(50)

      $002 AJS 20112014 Modifico la TableRelation del campo "Calendario festivos" para que apunte a la tabla del AddOn
    }
    END.
  }
}
