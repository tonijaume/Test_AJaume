OBJECT Table 7010010 Transfer - Persona x soporte
{
  OBJECT-PROPERTIES
  {
    Date=28/10/14;
    Time=16:40:43;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lrPerTS@1100253000 : Record 7010010;
             BEGIN
               "Id Detalle" := 1;

               lrPerTS.RESET;
               lrPerTS.SETRANGE(Agrupacion  , Agrupacion);
               lrPerTS.SETRANGE("Id Soporte", "Id Soporte");
               IF lrPerTS.FINDLAST THEN
                 "Id Detalle" += lrPerTS."Id Detalle";

               "Usuario Creacion" := USERID;
               "Fecha Creacion"   := CURRENTDATETIME;

               _CheckServicio;

               _InsHistorico(0);
             END;

    OnModify=BEGIN

               _CheckServicio;
             END;

    OnDelete=BEGIN

               _CheckServicio;

               _InsHistorico(2);
             END;

    LookupFormID=Form7009887;
    DrillDownFormID=Form7009887;
  }
  FIELDS
  {
    { 10  ;   ;Agrupacion          ;Integer       ;TableRelation=Agrupacion."N§ Agrupacion";
                                                   CaptionML=[ENU=Service ID;
                                                              ESP=Agrupacion];
                                                   NotBlank=Yes }
    { 20  ;   ;Id Soporte          ;Integer       ;CaptionML=[ENU=Support ID;
                                                              ESP=ID Soporte];
                                                   NotBlank=Yes }
    { 30  ;   ;Id Detalle          ;Integer       ;CaptionML=[ENU=Detail ID;
                                                              ESP=ID Detalle];
                                                   Editable=No }
    { 40  ;   ;N§ Reserva          ;Integer       ;OnValidate=BEGIN
                                                                IF "N§ Reserva" <> xRec."N§ Reserva" THEN
                                                                  _CheckDuplicado;

                                                                _GetInfoResv; //. Se inserta la informaci¢n de la reserva
                                                              END;

                                                   OnLookup=BEGIN
                                                              _LookupReserva;
                                                            END;

                                                   CaptionML=ESP=N§ Reserva }
    { 50  ;   ;Usuario Creacion    ;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU=Creation User;
                                                              ESP=Usuario Creaci¢n];
                                                   Editable=No }
    { 60  ;   ;Fecha Creacion      ;DateTime      ;CaptionML=[ENU=Creation Time;
                                                              ESP=Fecha Creaci¢n];
                                                   Editable=No }
    { 70  ;   ;Bono                ;Code10        ;CaptionML=[ENU=Booking Number;
                                                              ESP=Bono];
                                                   NotBlank=Yes }
    { 80  ;   ;Nombre Cliente      ;Text50        ;CaptionML=[ENU=Client Name;
                                                              ESP=Nombre Cliente];
                                                   Editable=No }
    { 90  ;   ;Hotel               ;Code20        ;TableRelation=Hotel.Hotel;
                                                   CaptionML=[ENU=hotel;
                                                              ESP=Hotel];
                                                   Editable=No }
    { 95  ;   ;Tipo persona        ;Code10        ;CaptionML=[ENU=Person type;
                                                              ESP=Tipo persona] }
    { 100 ;   ;Touroperador        ;Code10        ;TableRelation=TourOperador.TourOperador;
                                                   CaptionML=[ENU=Touroperator;
                                                              ESP=Touroperador];
                                                   Description=TourOperador.TourOperador }
    { 105 ;   ;Adultos             ;Decimal       ;CaptionML=[ENU=Adults;
                                                              ESP=Adultos] }
    { 110 ;   ;Ni¤os               ;Decimal       ;CaptionML=[ENU=Childs;
                                                              ESP=Ni¤os] }
  }
  KEYS
  {
    {    ;Agrupacion,Id Soporte,Id Detalle        ;Clustered=Yes }
    {    ;N§ Reserva                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100253000 : TextConst 'ENU=Service %1 is in %2  Status;ESP=El servicio %1 est  en estado %2';
      Text002@1100253002 : TextConst 'ESP=Persona Transp. Sop.';
      Text003@1100253003 : TextConst 'ENU=Reservation %1 for %2 of service %3 already exists;ESP=Ya existe la reserva %1 para %2 del servicio %3';
      Text004@1100217000 : TextConst 'ESP=INSERTAR SOPORTE';
      Text005@1100217001 : TextConst 'ESP=BORRAR SOPORTE';
      Text006@1100217002 : TextConst 'ENU=Do you want to bring all the people in the booking to this support service;ESP=Desea traer todas las personas del booking a este servicio de soporte';

    LOCAL PROCEDURE _CheckServicio@1100253000();
    VAR
      lrServ@1100253000 : Record 7009796;
    BEGIN
      // _CheckServicio
      // Comprobamos que el servicio no est‚ Confirmado

      CLEAR(lrServ);
      IF lrServ.GET(Agrupacion) THEN BEGIN
        IF lrServ.Estado IN [lrServ.Estado::Confirmado] THEN
          ERROR(Text001, lrServ."N§ Agrupacion", lrServ.Estado);
      END;
    END;

    LOCAL PROCEDURE _InsHistorico@1100253006(pwModo@1100253001 : 'Inserta,Modifica,Elimina');
    VAR
      lcPar@1100253000 : Codeunit 7009700;
      lrResv@1100253002 : Record 7009744;
      lrHist@1100217000 : Record 7009751;
      lrPar@1100217001 : Record 7009700;
    BEGIN
      // _InsHistorico

      lrPar.FINDFIRST;

      IF lrResv.GET(lrPar.Delegacion, "N§ Reserva") THEN
      BEGIN
        CASE pwModo OF
          pwModo::Inserta:
            lcPar.intro_historic(lrResv.Delegacion, lrResv."N§ Interno", lrResv."N§ Periodo", lrResv."N§ Reserva",
                                 lrHist."Tipo Reserva"::Transfer, Text004, STRSUBSTNO('%1-%2', Agrupacion, "Id Soporte"), '');
          pwModo::Elimina:
            lcPar.intro_historic(lrResv.Delegacion, lrResv."N§ Interno", lrResv."N§ Periodo", lrResv."N§ Reserva",
                                 lrHist."Tipo Reserva"::Transfer, Text005, STRSUBSTNO('%1-%2', Agrupacion, "Id Soporte"), '');
        END;
      END;
    END;

    LOCAL PROCEDURE _ResvInfo@1100253001(prRsv@1100253000 : Record 7009744);
    VAR
      lrAgrup@1100217000 : Record 7009796;
      lrParPer@1100217001 : Record 7009701;
    BEGIN
      // ResvInfo

      //. Dejamos en blanco los campos

      Bono             := '';
      "Nombre Cliente" := '';
      "Tipo persona"   := '';
      Touroperador     := '';
      Hotel            := '';
      Adultos          := 0;
      Ni¤os            := 0;

      //. Se inserta la informaci¢n de la reserva

      Bono             := prRsv.Bono;
      "Nombre Cliente" := prRsv.Nombre;
      "Tipo persona"   := prRsv."Tipo Persona";
      Touroperador     := prRsv."TourOperador facturacion";

      //. Buscamos la agrupacion para saber si es de entrada o de salida
      lrAgrup.GET(Agrupacion);
      IF lrAgrup."Tipo transfer" = lrAgrup."Tipo transfer"::Entrada THEN
        Hotel := prRsv."Hotel entrada"
      ELSE
        Hotel := prRsv."Hotel salida";

      lrParPer.FINDFIRST;
      CASE "Tipo persona" OF
        lrParPer."Codigo Adulto": Adultos := 1;
        lrParPer."Codigo Ni¤o": Ni¤os := 1;
      END;
    END;

    LOCAL PROCEDURE _GetInfoResv@1100253002();
    VAR
      lrRsv@1100253000 : Record 7009744;
      lrPar@1100217000 : Record 7009700;
    BEGIN
      // GetInfoResv

      IF "N§ Reserva" = 0 THEN
        EXIT;

      lrPar.FINDFIRST;

      lrRsv.RESET;
      IF lrRsv.GET(lrPar.Delegacion, "N§ Reserva") THEN
        _ResvInfo(lrRsv);
    END;

    LOCAL PROCEDURE _CheckDuplicado@1100217000();
    VAR
      lrPers@1100217001 : Record 7010010;
      lrSop@1100217000 : ARRAY [2] OF Record 7010009;
    BEGIN
      // _CheckDuplicado

      //. Una reserva solo puede estar una vez por servicio y direcci¢n
      IF "N§ Reserva" <> 0 THEN
      BEGIN
        CLEAR(lrSop);

        lrPers.RESET;
        lrPers.SETRANGE(Agrupacion  , Agrupacion);
        lrPers.SETRANGE("N§ Reserva", "N§ Reserva");
        IF lrPers.FINDSET THEN
        BEGIN
          lrSop[1].GET(Agrupacion, "Id Soporte");
          REPEAT
            IF lrPers.GETPOSITION <> GETPOSITION THEN //. Que no sea el mismo registro
            BEGIN
              lrSop[2].GET(lrPers.Agrupacion, lrPers."Id Soporte");
              IF lrSop[1].Direccion = lrSop[2].Direccion THEN
                ERROR(Text003, "N§ Reserva", lrSop[1].Direccion, Agrupacion);
            END;
          UNTIL lrPers.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE _LookupReserva@1100217001();
    VAR
      lrRsv@1100217000 : Record 7009744;
      lrAgrup@1100217001 : Record 7009796;
    BEGIN
      // _LookupReserva

      //. Buscamos la agrupacion para saber si es entrada o salida

      lrAgrup.GET(Agrupacion);
      IF lrAgrup."Tipo transfer" = lrAgrup."Tipo transfer"::Entrada THEN
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Agrupacion entrada");
        lrRsv.SETRANGE("Agrupacion entrada", lrAgrup."N§ Agrupacion");
      END
      ELSE
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Agrupacion salida");
        lrRsv.SETRANGE("Agrupacion salida", lrAgrup."N§ Agrupacion");
      END;

      IF FORM.RUNMODAL(0, lrRsv) = ACTION::LookupOK THEN
      BEGIN
        IF CONFIRM(Text006) THEN
          _TraerBooking(lrRsv, lrAgrup)
        ELSE
          VALIDATE("N§ Reserva", lrRsv."N§ Reserva");
      END;
    END;

    LOCAL PROCEDURE _TraerBooking@1100217002(prRsv@1100217000 : Record 7009744;prAgrup@1100217002 : Record 7009796);
    VAR
      lrRsv@1100217001 : Record 7009744;
      lrPersona@1100217004 : Record 7010010;
      lwPrimeraRsv@1100217003 : Boolean;
    BEGIN
      // _TraerBooking

      IF prAgrup."Tipo transfer" = prAgrup."Tipo transfer"::Entrada THEN
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Agrupacion entrada");
        lrRsv.SETRANGE("Agrupacion entrada", prAgrup."N§ Agrupacion");
        lrRsv.SETRANGE(TourOperador        , prRsv.TourOperador);
        lrRsv.SETRANGE(Bono                , prRsv.Bono);
      END
      ELSE
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Agrupacion salida");
        lrRsv.SETRANGE("Agrupacion salida", prAgrup."N§ Agrupacion");
        lrRsv.SETRANGE(TourOperador       , prRsv.TourOperador);
        lrRsv.SETRANGE(Bono               , prRsv.Bono);
      END;

      IF lrRsv.FINDSET THEN
      BEGIN
        //. La primera persona la pondremos en la linea que ya se esta procesando
        VALIDATE("N§ Reserva", lrRsv."N§ Reserva");

        lwPrimeraRsv := TRUE;
        REPEAT
          //. Creamos lineas para todas las reservas restantes
          IF NOT lwPrimeraRsv THEN
          BEGIN
            lrPersona := Rec;
            lrPersona.VALIDATE("N§ Reserva", lrRsv."N§ Reserva");
            lrPersona.INSERT(TRUE);
          END
          ELSE
            lwPrimeraRsv := FALSE;
        UNTIL lrRsv.NEXT = 0;
      END;
    END;

    PROCEDURE NomHotel@1100217003() : Text[80];
    VAR
      lrHotel@1100217000 : Record 7009724;
    BEGIN
      // NomHotel

      IF lrHotel.GET(Hotel) THEN
        EXIT(lrHotel.Nombre);
    END;

    BEGIN
    {
      $001 AJS 05112013 CNT-OC-13018

      $002 AJS 28102014 Amplio el campo Nombre Cliente a Text50
    }
    END.
  }
}
