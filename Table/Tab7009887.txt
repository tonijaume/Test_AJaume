OBJECT Table 7009887 Conversion Contr. Comp.
{
  OBJECT-PROPERTIES
  {
    Date=22/07/14;
    Time=14:02:10;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Purch. Contr. Conversion;
               ESP=Conversion Contr. Comp.];
  }
  FIELDS
  {
    { 1   ;   ;Id                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              ESP=ID] }
    { 2   ;   ;Tipo                ;Option        ;CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionCaptionML=[ENU=Touroperator,Hotel,Currency code,Allotment room,Person type,Board,Extra;
                                                                    ESP=Touroperador,Hotel,C¢digo divisa,Habitaci¢n cupo,Tipo persona,R‚gimen,Extra];
                                                   OptionString=Touroperador,Hotel,Codigo divisa,Habitacion cupo,Tipo persona,Regimen,Extra }
    { 3   ;   ;Touroperador        ;Code10        ;TableRelation=TourOperador.TourOperador;
                                                   OnValidate=BEGIN
                                                                //$001-
                                                                rTTOO.RESET;
                                                                rTTOO.GET(Touroperador);
                                                                rTTOO.TESTFIELD(Bloqueado, FALSE);
                                                                //$001+
                                                              END;

                                                   CaptionML=[ENU=TourOperator;
                                                              ESP=TourOperador] }
    { 4   ;   ;Valor               ;Code20        ;CaptionML=[ENU=Value;
                                                              ESP=Valor] }
    { 5   ;   ;Codigo Navision     ;Code20        ;OnLookup=BEGIN

                                                              VALIDATE("Codigo Navision", LookupNav);
                                                            END;

                                                   CaptionML=[ENU=Navision code;
                                                              ESP=C¢digo Navision] }
    { 6   ;   ;Id Cab              ;Integer       ;CaptionML=[ENU=Header Id;
                                                              ESP=Id Cab] }
    { 7   ;   ;Habitacion grupo Navision;Code20   ;CaptionML=[ENU=Navision group room;
                                                              ESP=Habitacion grupo Navision];
                                                   Description=Para las habitaciones, indicamos cual es el codigo de habitacion sobre el que queremos el cupo }
    { 8   ;   ;Nombre Hotel        ;Text30        ;CaptionML=[ENU=Hotel name;
                                                              ESP=Nombre hotel];
                                                   Description=Se incluye este campo para facilitar las busquedas de las conversiones de habitacion;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
    {    ;Tipo,Touroperador,Valor                 ;KeyGroups=RENUMERING }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      rTTOO@1000000000 : Record 7009717;

    PROCEDURE LookupNav@1100253000() rvCod : Code[20];
    VAR
      lrTO@1100253000 : Record 7009717;
      lrHotel@1100253001 : Record 7009724;
      lrCurr@1100253002 : Record 4;
      lrReg@1100253003 : Record 7009712;
      lrTipPer@1100253004 : Record 7009715;
      lrExtra@1100253005 : Record 7009760;
    BEGIN
      // LookupNav.

      CASE Tipo OF

        Tipo::Touroperador :
          IF FORM.RUNMODAL(0, lrTO) IN [ACTION::OK,ACTION::LookupOK] THEN
            EXIT(lrTO.TourOperador)
          ELSE
            EXIT("Codigo Navision");

        Tipo::Hotel :
          IF FORM.RUNMODAL(0, lrHotel) IN [ACTION::OK,ACTION::LookupOK] THEN
            EXIT(lrHotel.Hotel)
          ELSE
            EXIT("Codigo Navision");

        Tipo::"Codigo divisa" :
          IF FORM.RUNMODAL(0, lrCurr) IN  [ACTION::OK,ACTION::LookupOK] THEN
            EXIT(lrCurr.Code)
          ELSE
            EXIT("Codigo Navision");

        Tipo::"Tipo persona" : BEGIN
          CLEAR(lrTipPer);
          lrTipPer.FILTERGROUP(2);
          lrTipPer.SETRANGE (Humano, TRUE);
          lrTipPer.FILTERGROUP(0);
          IF FORM.RUNMODAL(0, lrTipPer) IN  [ACTION::OK,ACTION::LookupOK] THEN
            EXIT(lrTipPer."Tipo elemento")
          ELSE
            EXIT("Codigo Navision");
        END;

        Tipo::Regimen :
          IF FORM.RUNMODAL(0, lrReg) IN  [ACTION::OK,ACTION::LookupOK] THEN
            EXIT(lrReg.Regimen)
          ELSE
            EXIT("Codigo Navision");

        Tipo::Extra :
          IF FORM.RUNMODAL(0, lrExtra) IN  [ACTION::OK,ACTION::LookupOK] THEN
            EXIT(lrExtra.Codigo)
          ELSE
            EXIT("Codigo Navision");
      END;
    END;

    PROCEDURE BuscarConvAnteriores@1100253001(VAR prCabImp@1100253000 : Record 7009888) rvEnc : Boolean;
    VAR
      lrConv@1100253001 : Record 7009887;
      lwTO@1100253002 : Code[20];
      lwHotel@1100253003 : Code[20];
      lrContr@1100253004 : Record 7009723;
      lrConvHab@1100253005 : Record 7009731;
      lrHabImp@1100217000 : Record 7009889;
    BEGIN
      // BuscarConvAnteriores.
      //: Busca para la conversi¢n de habitaci¢n c¢digos en el £ltimo contrato introducido
      //: para el hotel.

      CLEAR(lrConv);
      lrConv.SETCURRENTKEY(Tipo, Touroperador, Valor);
      lrConv.SETRANGE (Tipo , lrConv.Tipo::Touroperador);
      lrConv.SETRANGE (Valor, prCabImp.Touroperador);
      IF NOT lrConv.FINDFIRST THEN
        CLEAR(lrConv);

      // Si no se ha traducido el valor del touroperador.
      IF lrConv."Codigo Navision" = '' THEN
        EXIT(FALSE);

      lwTO := lrConv."Codigo Navision";

      CLEAR(lrConv);
      lrConv.SETCURRENTKEY(Tipo, Touroperador, Valor);
      lrConv.SETRANGE (Tipo        , lrConv.Tipo::Hotel);
      lrConv.SETRANGE (Touroperador, prCabImp.Touroperador);
      lrConv.SETRANGE (Valor       , prCabImp.Hotel);
      IF NOT lrConv.FINDFIRST THEN
        CLEAR(lrConv);

      IF lrConv."Codigo Navision" = '' THEN
        EXIT(FALSE);

      lwHotel := lrConv."Codigo Navision";

      CLEAR(lrContr);
      lrContr.SETCURRENTKEY(Hotel, TourOperador, "Fecha inicio contrato");
      lrContr.SETRANGE (TourOperador           , lwTO);
      lrContr.SETRANGE (Hotel                  , lwHotel);
      lrContr.SETFILTER("Fecha inicio contrato", '<=%1', prCabImp."Fecha fin contrato");
      lrContr.SETFILTER("N§ Contrato compra"   , '<>%1', prCabImp."Num Contrato");
      lrContr.SETRANGE (Confirmado             , TRUE);
      IF lrContr.FINDLAST THEN BEGIN

        CLEAR(lrConvHab);
        lrConvHab.SETRANGE (Delegacion     , lrContr.Delegacion);
        lrConvHab.SETRANGE ("N§ Contrato"  , lrContr."N§ Contrato compra");
        lrConvHab.SETRANGE ("Tipo contrato", lrConvHab."Tipo contrato"::Compra);
        lrConvHab.SETRANGE ("Habitacion TO", Valor);
        IF lrConvHab.FINDFIRST THEN BEGIN
          "Codigo Navision" := lrConvHab."Habitacion cupo";
          MODIFY;
          EXIT("Codigo Navision" <> '');
        END
        ELSE
        BEGIN
          lrHabImp.RESET;
          lrHabImp.SETRANGE("No Importacion", prCabImp.No);
          lrHabImp.SETRANGE(Tipo            , lrHabImp.Tipo::Habitacion);
          lrHabImp.SETRANGE(Codigo          , Valor);
          IF NOT lrHabImp.FINDFIRST THEN
            EXIT(FALSE);

          lrConvHab.SETRANGE("Habitacion TO");
          lrConvHab.SETRANGE(Descripcion      , lrHabImp.Descripcion);
          lrConvHab.SETRANGE("Ocupacion Maxima", lrHabImp.Cantidad);
          IF lrConvHab.FINDFIRST THEN
          BEGIN
            "Codigo Navision" := lrConvHab."Habitacion cupo";
            MODIFY;
            EXIT("Codigo Navision" <> '');
          END
        END;
      END;

      EXIT(FALSE);
    END;

    BEGIN
    {
      $001 MNC 22072014 CNT-LP-14054 No se pueden usar TTOO bloqueados
    }
    END.
  }
}
