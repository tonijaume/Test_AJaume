OBJECT Table 7354 Bin
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Location Code,Zone Code,Code;
    OnInsert=BEGIN
               GetLocation("Location Code");
               IF Location."Directed Put-away and Pick" THEN BEGIN
                 TESTFIELD("Zone Code");
                 TESTFIELD("Bin Type Code");
               END ELSE BEGIN
                 TESTFIELD("Zone Code",'');
                 TESTFIELD("Bin Type Code",'');
               END;
             END;

    OnModify=BEGIN
               GetLocation("Location Code");
               IF Location."Directed Put-away and Pick" THEN BEGIN
                 TESTFIELD("Zone Code");
                 TESTFIELD("Bin Type Code");
               END ELSE BEGIN
                 TESTFIELD("Zone Code",'');
                 TESTFIELD("Bin Type Code",'');
               END;
             END;

    OnDelete=VAR
               Location@1003 : Record 14;
               ItemJnlLine@1004 : Record 83;
             BEGIN
               CheckEmptyBin(Text008);

               Location.GET("Location Code");
               IF Location."Adjustment Bin Code" = Code THEN BEGIN
                 ItemJnlLine.SETCURRENTKEY("Entry Type","Item No.","Variant Code","Location Code");
                 ItemJnlLine.SETFILTER("Entry Type",'%1|%2|%3|%4',
                   ItemJnlLine."Entry Type"::"Negative Adjmt.",ItemJnlLine."Entry Type"::Sale,
                   ItemJnlLine."Entry Type"::"Positive Adjmt.",ItemJnlLine."Entry Type"::Purchase);
                 ItemJnlLine.SETRANGE("Location Code","Location Code");
                 IF ItemJnlLine.FIND('-') THEN
                   IF NOT CONFIRM(
                     Text002,FALSE,STRSUBSTNO(ItemJnlLine.TABLECAPTION,TABLECAPTION))
                   THEN
                     ERROR(Text003);
               END;

               BinContent.RESET;
               BinContent.SETRANGE("Location Code","Location Code");
               BinContent.SETRANGE("Bin Code",Code);
               BinContent.DELETEALL;
             END;

    CaptionML=[ENU=Bin;
               ESP=Ubicaci¢n];
    LookupFormID=Form7303;
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 2   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              ESP=C¢digo];
                                                   NotBlank=Yes }
    { 3   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 4   ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF "Zone Code" <> xRec."Zone Code" THEN BEGIN
                                                                  CheckEmptyBin(Text007);
                                                                  IF Code = '' THEN
                                                                    SetUpNewLine;
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Zone Code","Zone Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Zone Code;
                                                              ESP=C¢d. zona];
                                                   Editable=No }
    { 5   ;   ;Adjustment Bin      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(Location WHERE (Code=FIELD(Location Code),
                                                                                     Adjustment Bin Code=FIELD(Code)));
                                                   CaptionML=[ENU=Adjustment Bin;
                                                              ESP=Ubicaci¢n ajuste];
                                                   Editable=No }
    { 10  ;   ;Bin Type Code       ;Code10        ;TableRelation="Bin Type";
                                                   OnValidate=BEGIN
                                                                IF "Bin Type Code" <> xRec."Bin Type Code" THEN BEGIN
                                                                  CheckEmptyBin(Text007);
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Bin Type Code","Bin Type Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bin Type Code;
                                                              ESP=C¢d. tipo ubicaci¢n] }
    { 11  ;   ;Warehouse Class Code;Code10        ;TableRelation="Warehouse Class";
                                                   OnValidate=BEGIN
                                                                IF "Warehouse Class Code" <> xRec."Warehouse Class Code" THEN BEGIN
                                                                  CheckEmptyBin(Text007);
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Warehouse Class Code","Warehouse Class Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Warehouse Class Code;
                                                              ESP=C¢d. clase almac‚n] }
    { 12  ;   ;Block Movement      ;Option        ;OnValidate=BEGIN
                                                                IF CONFIRM(Text004,FALSE) THEN BEGIN
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Block Movement","Block Movement");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Block Movement;
                                                              ESP=Movimiento bloqueado];
                                                   OptionCaptionML=[ENU=" ,Inbound,Outbound,All";
                                                                    ESP=" ,Entrada,Salida,Todos"];
                                                   OptionString=[ ,Inbound,Outbound,All] }
    { 20  ;   ;Special Equipment Code;Code10      ;TableRelation="Special Equipment";
                                                   CaptionML=[ENU=Special Equipment Code;
                                                              ESP=C¢d. equipo especial] }
    { 21  ;   ;Bin Ranking         ;Integer       ;OnValidate=VAR
                                                                WhseActivLine@1000 : Record 5767;
                                                              BEGIN
                                                                IF "Bin Ranking" <> xRec."Bin Ranking" THEN BEGIN
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Bin Ranking","Bin Ranking");

                                                                  WhseActivLine.SETCURRENTKEY("Bin Code","Location Code");
                                                                  WhseActivLine.SETRANGE("Bin Code",Code);
                                                                  WhseActivLine.SETRANGE("Location Code","Location Code");
                                                                  WhseActivLine.MODIFYALL("Bin Ranking","Bin Ranking");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bin Ranking;
                                                              ESP=Ranking ubicaci¢n] }
    { 22  ;   ;Maximum Cubage      ;Decimal       ;OnValidate=BEGIN
                                                                CheckMaxQtyBinContent(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Maximum Cubage;
                                                              ESP=Cubicaje m ximo];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 23  ;   ;Maximum Weight      ;Decimal       ;OnValidate=BEGIN
                                                                CheckMaxQtyBinContent(TRUE);
                                                              END;

                                                   CaptionML=[ENU=Maximum Weight;
                                                              ESP=Peso m ximo];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 30  ;   ;Empty               ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Empty;
                                                              ESP=Vac¡o];
                                                   Editable=No }
    { 32  ;   ;Item Filter         ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Item;
                                                   CaptionML=[ENU=Item Filter;
                                                              ESP=Filtro producto] }
    { 33  ;   ;Variant Filter      ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Stockkeeping Unit"."Variant Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                           Item No.=FIELD(Item Filter));
                                                   CaptionML=[ENU=Variant Filter;
                                                              ESP=Filtro variante] }
    { 34  ;   ;Default             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Bin Content" WHERE (Location Code=FIELD(Location Code),
                                                                                          Bin Code=FIELD(Code),
                                                                                          Item No.=FIELD(Item Filter),
                                                                                          Variant Code=FIELD(Variant Filter),
                                                                                          Default=CONST(Yes)));
                                                   CaptionML=[ENU=Default;
                                                              ESP=Gen‚rico];
                                                   Editable=No }
    { 40  ;   ;Cross-Dock Bin      ;Boolean       ;OnValidate=BEGIN
                                                                IF "Cross-Dock Bin" <> xRec."Cross-Dock Bin" THEN BEGIN
                                                                  BinContent.RESET;
                                                                  BinContent.SETRANGE("Location Code","Location Code");
                                                                  BinContent.SETRANGE("Bin Code",Code);
                                                                  BinContent.MODIFYALL("Cross-Dock Bin","Cross-Dock Bin");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Cross-Dock Bin;
                                                              ESP=Ubicaci¢n tr nsito directo] }
  }
  KEYS
  {
    {    ;Location Code,Code                      ;Clustered=Yes }
    {    ;Bin Type Code                            }
    {    ;Location Code,Warehouse Class Code,Bin Ranking }
    {    ;Location Code,Zone Code,Code             }
    {    ;Code                                    ;KeyGroups=SearchCol }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1009 : Record 14;
      Zone@1000 : Record 7300;
      Text000@1001 : TextConst 'ENU="You cannot %1 the %2 with %3 = %4, %5 = %6, because the %2 contains items.";ESP="No puede %1 el %2 con %3 = %4, %5 = %6, porque el %2 contiene productos."';
      Text001@1002 : TextConst 'ENU="You cannot %1 the %2 with %3 = %4, %5 = %6, because one or more %7 exists for this %2.";ESP="No puede %1 el %2 con %3 = %4, %5 = %6, porque existen uno o m s %7 para este %2."';
      Text002@1003 : TextConst 'ENU=One or more %1 exists for this bin. Do you still want to delete this %2?;ESP=Existen uno o m s %1 para esta ubicaci¢n. ¨Desea eliminar este %2?';
      Text003@1004 : TextConst 'ENU=Cancelled.;ESP=Cancelado.';
      BinContent@1010 : Record 7302;
      Item@1012 : Record 27;
      WMSMgt@1005 : Codeunit 7302;
      Text004@1015 : TextConst 'ENU=Do you want to update the bin contents accordingly?;ESP=¨Desea actualizar los contenidos ubicaci¢n en consecuencia?';
      Text005@1006 : TextConst 'ENU=The total cubage %1 of the %2 in the bin contents exceeds the entered %3 %4.\Do you still want to enter this %3?;ESP=El cubicaje total %1 del %2 en los contenidos ubicaci¢n excede el introducido en %3 %4.\¨Desea insertar este %3?';
      Text006@1007 : TextConst 'ENU=The total weight %1 of the %2 in the bin contents exceeds the entered %3 %4.\Do you still want to enter this %3?;ESP=El peso total %1 del %2 en los contenidos ubicaci¢n excede el introducido en %3 %4.\¨Desea insertar este %3?';
      Text007@1008 : TextConst 'ENU=modify;ESP=modificar';
      Text008@1011 : TextConst 'ENU=delete;ESP=eliminar';

    PROCEDURE SetUpNewLine@8();
    BEGIN
      GetLocation("Location Code");
      IF Location."Directed Put-away and Pick" THEN BEGIN
        IF GetZone("Location Code","Zone Code") THEN BEGIN
          "Bin Type Code" := Zone."Bin Type Code";
          "Warehouse Class Code" := Zone."Warehouse Class Code";
          "Special Equipment Code" := Zone."Special Equipment Code";
          "Bin Ranking" := Zone."Zone Ranking";
          "Cross-Dock Bin" := Zone."Cross-Dock Bin Zone";
        END;
      END;
    END;

    PROCEDURE GetZone@1(LocationCode@1000 : Code[10];ZoneCode@1001 : Code[10]) : Boolean;
    BEGIN
      IF (LocationCode = '') OR (ZoneCode = '') THEN
        EXIT(FALSE);
      IF (Zone."Location Code" <> LocationCode) OR
         (Zone.Code <> ZoneCode)
      THEN
        IF NOT Zone.GET("Location Code","Zone Code") THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE CalcCubageAndWeight@3(VAR Cubage@1000 : Decimal;VAR Weight@1007 : Decimal;CalledbyPosting@1012 : Boolean);
    VAR
      PostedCubage@1001 : Decimal;
      PostedWeight@1002 : Decimal;
      WhseActivityWeight@1006 : Decimal;
      WhseActivityCubage@1005 : Decimal;
      JournalWeight@1004 : Decimal;
      JournalCubage@1003 : Decimal;
      WhseRcptWeight@1009 : Decimal;
      WhseRcptCubage@1008 : Decimal;
      WhseShptWeight@1011 : Decimal;
      WhseShptCubage@1010 : Decimal;
      WhseIntPickWeight@1014 : Decimal;
      WhseIntPickCubage@1013 : Decimal;
    BEGIN
      IF ("Maximum Cubage" <> 0) OR ("Maximum Weight" <> 0) THEN BEGIN
        CalcPostedCubageAndWeight(PostedCubage,PostedWeight);
        IF NOT CalledbyPosting THEN BEGIN
          CalcPutAwayOnWhseActivity(WhseActivityWeight,WhseActivityCubage);
          CalcPutAwayOnWhseJnl(JournalWeight,JournalCubage);
          CalcPutAwayOnWhseRcpt(WhseRcptWeight,WhseRcptCubage);
          CalcPutAwayOnWhseShpt(WhseShptWeight,WhseShptCubage);
          CalcPutAwayOnWhseIntPick(WhseIntPickWeight,WhseIntPickCubage);
        END;
        IF "Maximum Cubage" <> 0 THEN
          Cubage :=
            "Maximum Cubage" -
            (PostedCubage + WhseActivityCubage + JournalCubage +
             WhseRcptCubage + WhseShptCubage + WhseIntPickCubage);

        IF "Maximum Weight" <> 0 THEN
          Weight :=
            "Maximum Weight" -
            (PostedWeight + WhseActivityWeight + JournalWeight +
             WhseRcptWeight + WhseShptWeight + WhseIntPickWeight);
      END;
    END;

    LOCAL PROCEDURE CalcPostedCubageAndWeight@5(VAR PostedCubage@1000 : Decimal;VAR PostedWeight@1002 : Decimal);
    VAR
      WhseEntry@1001 : Record 7312;
    BEGIN
      WhseEntry.SETCURRENTKEY("Bin Code","Location Code");
      WhseEntry.SETRANGE("Bin Code",Code);
      WhseEntry.SETRANGE("Location Code","Location Code");
      WhseEntry.CALCSUMS(Cubage,Weight);
      PostedCubage := WhseEntry.Cubage;
      PostedWeight := WhseEntry.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseActivity@21(VAR WhseActivWeight@1002 : Decimal;VAR WhseActivCubage@1000 : Decimal);
    VAR
      WhseActivLine@1001 : Record 5767;
    BEGIN
      WhseActivLine.SETCURRENTKEY("Bin Code","Location Code","Action Type");
      WhseActivLine.SETRANGE("Bin Code",Code);
      WhseActivLine.SETRANGE("Location Code","Location Code");
      WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Place);
      WhseActivLine.CALCSUMS(Cubage,Weight);
      WhseActivCubage := WhseActivLine.Cubage;
      WhseActivWeight := WhseActivLine.Weight;

      WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Take);
      WhseActivLine.SETFILTER("Breakbulk No.",'<>0');
      WhseActivLine.CALCSUMS(Cubage,Weight);
      WhseActivCubage := WhseActivCubage - WhseActivLine.Cubage;
      WhseActivWeight := WhseActivWeight - WhseActivLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseJnl@22(VAR JournalWeight@1002 : Decimal;VAR JournalCubage@1001 : Decimal);
    VAR
      WhseJnlLine@1000 : Record 7311;
    BEGIN
      WhseJnlLine.SETCURRENTKEY("To Bin Code","Location Code");
      WhseJnlLine.SETRANGE("To Bin Code",Code);
      WhseJnlLine.SETRANGE("Location Code","Location Code");
      WhseJnlLine.CALCSUMS(Cubage,Weight);
      JournalCubage := WhseJnlLine.Cubage;
      JournalWeight := WhseJnlLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseRcpt@11(VAR WhseRcptWeight@1002 : Decimal;VAR WhseRcptCubage@1000 : Decimal);
    VAR
      WhseRcptLine@1001 : Record 7317;
    BEGIN
      WhseRcptLine.SETCURRENTKEY("Bin Code","Location Code");
      WhseRcptLine.SETRANGE("Bin Code",Code);
      WhseRcptLine.SETRANGE("Location Code","Location Code");
      WhseRcptLine.CALCSUMS(Cubage,Weight);
      WhseRcptCubage := WhseRcptLine.Cubage;
      WhseRcptWeight := WhseRcptLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseShpt@13(VAR WhseShptWeight@1002 : Decimal;VAR WhseShptCubage@1000 : Decimal);
    VAR
      WhseShptLine@1001 : Record 7321;
    BEGIN
      WhseShptLine.SETCURRENTKEY("Bin Code","Location Code");
      WhseShptLine.SETRANGE("Bin Code",Code);
      WhseShptLine.SETRANGE("Location Code","Location Code");
      WhseShptLine.CALCSUMS(Cubage,Weight);
      WhseShptCubage := WhseShptLine.Cubage;
      WhseShptWeight := WhseShptLine.Weight;
    END;

    LOCAL PROCEDURE CalcPutAwayOnWhseIntPick@12(VAR WhseIntPickWeight@1002 : Decimal;VAR WhseIntPickCubage@1000 : Decimal);
    VAR
      WhseIntPickLine@1001 : Record 7334;
    BEGIN
      WhseIntPickLine.SETCURRENTKEY("To Bin Code","Location Code");
      WhseIntPickLine.SETRANGE("To Bin Code",Code);
      WhseIntPickLine.SETRANGE("Location Code","Location Code");
      WhseIntPickLine.CALCSUMS(Cubage,Weight);
      WhseIntPickCubage := WhseIntPickLine.Cubage;
      WhseIntPickWeight := WhseIntPickLine.Weight;
    END;

    PROCEDURE GetItem@2(ItemNo@1000 : Code[20]);
    BEGIN
      IF ItemNo <> Item."No." THEN
        Item.GET(ItemNo);
    END;

    PROCEDURE CheckMaxQtyBinContent@4(CheckWeight@1000 : Boolean);
    VAR
      TotalCubage@1002 : Decimal;
      TotalWeight@1003 : Decimal;
      Cubage@1004 : Decimal;
      Weight@1005 : Decimal;
    BEGIN
      IF ("Maximum Cubage" <> 0) OR ("Maximum Weight" <> 0) THEN BEGIN
        BinContent.RESET;
        BinContent.SETRANGE("Location Code","Location Code");
        BinContent.SETRANGE("Bin Code",Code);
        IF BinContent.FIND('-') THEN
          REPEAT
            WMSMgt.CalcCubageAndWeight(
              BinContent."Item No.",BinContent."Unit of Measure Code",
              BinContent."Max. Qty.",Cubage,Weight);
            TotalCubage := TotalCubage + Cubage;
            TotalWeight := TotalWeight + Weight;
          UNTIL BinContent.NEXT = 0;

        IF (NOT CheckWeight) AND ("Maximum Cubage" > 0) AND ("Maximum Cubage" - TotalCubage < 0) THEN
          IF NOT CONFIRM(Text005,FALSE,
            TotalCubage,BinContent.FIELDCAPTION("Max. Qty."),
            FIELDCAPTION("Maximum Cubage"),"Maximum Cubage")
          THEN
            ERROR(Text003);
        IF CheckWeight AND ("Maximum Weight" > 0) AND ("Maximum Weight" - TotalWeight < 0) THEN
          IF NOT CONFIRM(Text006,FALSE,
            TotalWeight,BinContent.FIELDCAPTION("Max. Qty."),
            FIELDCAPTION("Maximum Weight"),"Maximum Weight")
          THEN
            ERROR(Text003);
      END;
    END;

    PROCEDURE CheckWhseClass@6(ItemNo@1000 : Code[20]);
    VAR
      ProductGroup@1002 : Record 5723;
    BEGIN
      GetItem(ItemNo);
      IF ProductGroup.GET(Item."Item Category Code",Item."Product Group Code") THEN
        TESTFIELD("Warehouse Class Code",ProductGroup."Warehouse Class Code")
      ELSE
        TESTFIELD("Warehouse Class Code",'');
    END;

    LOCAL PROCEDURE CheckEmptyBin@9(ErrorText@1003 : Text[250]);
    VAR
      WarehouseEntry@1002 : Record 7312;
      WarehouseJnl@1001 : Record 7311;
      WhseActivLine@1000 : Record 5767;
      WhseRcptLine@1004 : Record 7317;
      WhseShptLine@1005 : Record 7321;
    BEGIN
      WarehouseEntry.SETCURRENTKEY("Bin Code","Location Code");
      WarehouseEntry.SETRANGE("Bin Code",Code);
      WarehouseEntry.SETRANGE("Location Code","Location Code");
      WarehouseEntry.CALCSUMS("Qty. (Base)");
      IF WarehouseEntry."Qty. (Base)" <> 0 THEN
        ERROR(
          Text000,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),
          "Location Code",FIELDCAPTION(Code),Code);

      WhseActivLine.SETCURRENTKEY("Bin Code","Location Code");
      WhseActivLine.SETRANGE("Bin Code",Code);
      WhseActivLine.SETRANGE("Location Code","Location Code");
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Movement);
      IF WhseActivLine.FIND('-') THEN
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WhseActivLine.TABLECAPTION);

      WarehouseJnl.SETRANGE("Location Code","Location Code");
      WarehouseJnl.SETRANGE("From Bin Code",Code);
      IF WarehouseJnl.FIND('-') THEN
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WarehouseJnl.TABLECAPTION);

      WarehouseJnl.RESET;
      WarehouseJnl.SETCURRENTKEY("To Bin Code","Location Code");
      WarehouseJnl.SETRANGE("To Bin Code",Code);
      WarehouseJnl.SETRANGE("Location Code","Location Code");
      IF WarehouseJnl.FIND('-') THEN
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WarehouseJnl.TABLECAPTION);

      WhseRcptLine.SETCURRENTKEY("Bin Code","Location Code");
      WhseRcptLine.SETRANGE("Bin Code",Code);
      WhseRcptLine.SETRANGE("Location Code","Location Code");
      IF WhseRcptLine.FIND('-') THEN
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WhseRcptLine.TABLECAPTION);

      WhseShptLine.SETCURRENTKEY("Bin Code","Location Code");
      WhseShptLine.SETRANGE("Bin Code",Code);
      WhseShptLine.SETRANGE("Location Code","Location Code");
      IF WhseShptLine.FIND('-') THEN
        ERROR(
          Text001,
          ErrorText,TABLECAPTION,FIELDCAPTION("Location Code"),"Location Code",
          FIELDCAPTION(Code),Code,WhseShptLine.TABLECAPTION);
    END;

    PROCEDURE CheckIncreaseBin@7(BinCode@1009 : Code[20];ItemNo@1006 : Code[20];Qty@1005 : Decimal;DeductCubage@1013 : Decimal;DeductWeight@1012 : Decimal;PutawayCubage@1008 : Decimal;PutawayWeight@1007 : Decimal;CalledbyPosting@1010 : Boolean);
    VAR
      WhseActivLine@1001 : Record 5767;
      WMSMgt@1002 : Codeunit 7302;
      AvailableWeight@1003 : Decimal;
      AvailableCubage@1004 : Decimal;
    BEGIN
      IF "Block Movement" IN ["Block Movement"::Inbound,"Block Movement"::All] THEN
        FIELDERROR("Block Movement");

      GetLocation("Location Code");
      IF (Code = Location."Adjustment Bin Code") OR
         (Code = Location."Open Shop Floor Bin Code") OR
         (Code = Location."Inbound Production Bin Code") OR
         (Code = Location."Outbound Production Bin Code")
      THEN
        EXIT;

      IF ItemNo <> '' THEN
        CheckWhseClass(ItemNo);

      IF (Qty <> 0) AND (("Maximum Cubage" <> 0) OR ("Maximum Weight" <> 0)) THEN
        IF Location."Bin Capacity Policy" IN
           [Location."Bin Capacity Policy"::"Allow More Than Max. Capacity",
           Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap."]
        THEN BEGIN
          CalcCubageAndWeight(AvailableCubage,AvailableWeight,CalledbyPosting);
          IF NOT CalledbyPosting THEN BEGIN
            AvailableCubage := AvailableCubage + DeductCubage;
            AvailableWeight := AvailableWeight + DeductWeight;
          END;

          IF ("Maximum Cubage" <> 0) AND (PutawayCubage > AvailableCubage) THEN
            WMSMgt.CheckPutAwayAvailability(
              BinCode,WhseActivLine.FIELDCAPTION(Cubage),TABLECAPTION,PutawayCubage,AvailableCubage,
              (Location."Bin Capacity Policy" =
               Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap.") AND CalledbyPosting);

          IF ("Maximum Weight" <> 0) AND (PutawayWeight > AvailableWeight) THEN
            WMSMgt.CheckPutAwayAvailability(
              BinCode,WhseActivLine.FIELDCAPTION(Weight),TABLECAPTION,PutawayWeight,AvailableWeight,
              (Location."Bin Capacity Policy" =
               Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap.") AND CalledbyPosting);

        END;
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
    END;

    BEGIN
    END.
  }
}
