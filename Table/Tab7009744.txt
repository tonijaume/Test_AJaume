OBJECT Table 7009744 Reserva Transfer
{
  OBJECT-PROPERTIES
  {
    Date=28/07/15;
    Time=13:34:08;
    Modified=Yes;
    Version List=AIC2009,COM;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               rPar.FINDFIRST;
               IF NOT rPar."Empresa Delegacion" THEN
                 ERROR(Text001);

               "N§ Reserva" := cRes.num_reserva_transfer;
               Delegacion := rPar.Delegacion;

               IF "Tipo Persona" <> '' THEN
               BEGIN
                 ManagePersonType; //+$015

                 //-$015rElem.Delegacion         := Delegacion;
                 //-$015rElem."N§ Reserva"       := "N§ Reserva";
                 //-$015rElem."N§ Orden"         := 1;
                 //-$015rElem."Tipo elemento"    := "Tipo Persona";
                 //-$015rElem."Numero elementos" := 1;
                 //-$015rElem.Humano             := TRUE;
                 //-$015IF rElem."Tipo elemento" <> rParPer."Codigo Infant" THEN
                 //-$015  rElem."Tipo interno" := rElem."Tipo interno"::"Adulto/Ni¤o"
                 //-$015ELSE
                 //-$015  rElem."Tipo interno" := rElem."Tipo interno"::Bebe;
               END;

               "Fecha creacion" := CURRENTDATETIME; //+$009
             END;

    OnModify=BEGIN
               rPar.FINDFIRST;
               IF NOT rPar."Empresa Delegacion" THEN
                 ERROR(Text003);

               IF "N§ liquidacion GV" <> 0 THEN
                 ERROR(Text031);

               ManagePersonType; //+$015

               //-$015CALCFIELDS(Personas, Ni¤os, Bebes, "Elementos accesorios");
               //-$015"N§ Personas" := Personas;
               //-$015"N§ Ni¤os" := Ni¤os;
               //-$015"N§ Bebes" := Bebes;
               //-$015"N§ Elementos accesorios" := "Elementos accesorios";

               CALCFIELDS("Elementos accesorios");
               "N§ Elementos accesorios" := "Elementos accesorios";

               Replicado:= FALSE;

               // AJF 26/11/08
               // Si la modificaci¢n puede afectar a la proforma hay que marcarla para regenerar.
               IF ("Invitado TourOperador" <> xRec."Invitado TourOperador")       OR
                  ("Invitado Transportista" <> xRec."Invitado Transportista")     OR
                  ("TourOperador facturacion" <> xRec."TourOperador facturacion") OR
                  ("Fecha entrada" <> xRec."Fecha entrada")                       OR
                  ("Fecha salida" <> xRec."Fecha salida")                         OR
                  ("Hotel entrada" <> xRec."Hotel entrada")                       OR
                  ("Hotel salida" <> xRec."Hotel salida")                         OR
                  ("N§ Personas" <> xRec."N§ Personas")                           OR
                  ("N§ Ni¤os" <> xRec."N§ Ni¤os")
               THEN
                 cProf.MarcarRegenerarProforma(Delegacion, "N§ Interno", "N§ Periodo");
             END;

    OnDelete=VAR
               rBack@1103355000 : Record 7009848;
             BEGIN
               rPar.FINDFIRST;
               IF NOT rPar."Empresa Delegacion" THEN
                 ERROR(Text004);

               // +$025
               CheckPermiso;

               actualiza_agrupacion("Agrupacion entrada", TRUE);
               actualiza_agrupacion("Agrupacion salida", TRUE);

               rElem.RESET;
               rElem.SETRANGE(Delegacion  , Delegacion);
               rElem.SETRANGE("N§ Reserva", "N§ Reserva");
               IF rElem.FINDSET(TRUE) THEN
                 rElem.DELETEALL(TRUE);

               // +$026
               rCob.RESET;
               rCob.SETRANGE(rCob.Delegacion, Delegacion);
               rCob.SETRANGE(rCob."Num Reserva", "N§ Reserva");
               IF rCob.FINDFIRST THEN
                 rCob.DELETEALL(TRUE);

               //. Backup
               IF rPar."Tipo Anulacion reserva" = rPar."Tipo Anulacion reserva"::Backup THEN BEGIN
                 rBack.TRANSFERFIELDS(Rec);
                 IF NOT rBack.INSERT THEN
                   rBack.MODIFY;
               END;

               // AJF 26/11/08
               // Si borramos la reserva hay que marcar la proforma para regenerar.
               cProf.MarcarRegenerarProforma(Delegacion, "N§ Interno", "N§ Periodo");

               cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                   Text005, Text006, '');
             END;

    OnRename=BEGIN
               rPar.FINDFIRST;
               IF NOT rPar."Empresa Delegacion" THEN
                 ERROR(Text007);

               Replicado:= FALSE;
             END;

    CaptionML=[ENU=Booking transfer;
               ESP=Reserva Transfer];
    LookupFormID=Form7009928;
    DrillDownFormID=Form7009928;
  }
  FIELDS
  {
    { 1   ;   ;N§ Interno          ;Integer       ;CaptionML=[ENU=Internal No.;
                                                              ESP=N§ Interno];
                                                   Description=FK Cabecera reserva;
                                                   Editable=No }
    { 3   ;   ;N§ Periodo          ;Integer       ;CaptionML=[ENU=Period No.;
                                                              ESP=N§ Periodo];
                                                   Description=FK Periodo reserva;
                                                   Editable=No }
    { 5   ;   ;N§ Reserva          ;Integer       ;CaptionML=[ENU=Reservation No.;
                                                              ESP=N§ Reserva];
                                                   Description=PK;
                                                   Editable=No }
    { 7   ;   ;TourOperador        ;Code10        ;TableRelation=TourOperador.TourOperador;
                                                   OnValidate=BEGIN

                                                                // +$025
                                                                CheckPermiso;

                                                                //$022-
                                                                rTTOO.RESET;
                                                                rTTOO.GET(TourOperador);
                                                                rTTOO.TESTFIELD(Bloqueado, FALSE);
                                                                //$022+

                                                                IF xRec.TourOperador <> TourOperador THEN BEGIN
                                                                  IF ("Agrupacion entrada" <> 0) AND (NOT "Modificacion importacion") THEN BEGIN
                                                                    texto_confirma := Text008 + ' ' + Nombre + ' ' + Text009 + ' ' + STRSUBSTNO('%1', "Agrupacion entrada");
                                                                    IF CONFIRM(texto_confirma) THEN
                                                                      VALIDATE("Agrupacion entrada", 0);
                                                                  END;

                                                                  IF ("Agrupacion salida" <> 0) AND (NOT "Modificacion importacion") THEN BEGIN
                                                                    texto_confirma := Text008 + ' ' + Nombre + ' ' + Text010 + ' ' + STRSUBSTNO('%1', "Agrupacion salida");
                                                                    IF CONFIRM(texto_confirma) THEN
                                                                      VALIDATE("Agrupacion salida", 0);
                                                                  END;

                                                                  acumulado_entrada;
                                                                  acumulado_salida;

                                                                  //. Historico
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION(TourOperador), xRec.TourOperador, TourOperador);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=TourOperator;
                                                              ESP=TourOperador];
                                                   NotBlank=Yes;
                                                   Description=FK TourOperador }
    { 9   ;   ;Bono                ;Code10        ;OnValidate=BEGIN
                                                                IF xRec.Bono <> Bono THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;

                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION(Bono), xRec.Bono, Bono);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Voucher;
                                                              ESP=Bono] }
    { 11  ;   ;Nombre              ;Text50        ;OnValidate=BEGIN
                                                                IF xRec.Nombre <> Nombre THEN
                                                                BEGIN
                                                                  // +$025
                                                                  CheckPermiso;

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION(Nombre), xRec.Nombre, Nombre);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              ESP=Nombre] }
    { 13  ;   ;Edad                ;Integer       ;OnValidate=BEGIN
                                                                IF xRec.Edad <> Edad THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;

                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION(Edad), STRSUBSTNO('%1', xRec.Edad), STRSUBSTNO('%1', Edad));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Age;
                                                              ESP=Edad] }
    { 15  ;   ;Tipo Persona        ;Code10        ;TableRelation="Tipo elemento"."Tipo elemento" WHERE (Humano=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Tipo Persona");

                                                                IF xRec."Tipo Persona" <> "Tipo Persona" THEN
                                                                BEGIN
                                                                  // +$025
                                                                  CheckPermiso;

                                                                  //-$015rElem.RESET;
                                                                  //-$015rElem.SETRANGE(Delegacion     , Delegacion);
                                                                  //-$015rElem.SETRANGE("N§ Reserva"   , "N§ Reserva");
                                                                  //-$015rElem.SETRANGE("Tipo elemento", xRec."Tipo Persona");
                                                                  //-$015IF rElem.FINDFIRST THEN BEGIN
                                                                  //-$015  rElem.VALIDATE("Tipo elemento", "Tipo Persona");
                                                                  //-$015  rElem.MODIFY(TRUE);
                                                                  //-$015END;

                                                                  // Campos soporte de los calculados

                                                                  //-$007IF xRec."Tipo Persona" =  rParPer."Codigo Adulto" THEN BEGIN
                                                                  //-$007  "N§ Personas" := "N§ Personas" - rElem."Numero elementos";
                                                                  //-$007END;
                                                                  //-$007IF xRec."Tipo Persona" = rParPer."Codigo Ni¤o" THEN BEGIN
                                                                  //-$007  "N§ Personas" := "N§ Personas" - rElem."Numero elementos";
                                                                  //-$007  "N§ Ni¤os" := "N§ Ni¤os" - rElem."Numero elementos";
                                                                  //-$007END;
                                                                  //-$007IF xRec."Tipo Persona" = rParPer."Codigo Infant" THEN BEGIN
                                                                  //-$007  "N§ Bebes" := "N§ Bebes" - rElem."Numero elementos";
                                                                  //-$007END;

                                                                  //-$007IF "Tipo Persona" = rParPer."Codigo Adulto" THEN BEGIN
                                                                  //-$007  "N§ Personas" := "N§ Personas" + rElem."Numero elementos";
                                                                  //-$007END;
                                                                  //-$007IF "Tipo Persona" = rParPer."Codigo Ni¤o" THEN BEGIN
                                                                  //-$007  "N§ Personas" := "N§ Personas" + rElem."Numero elementos";
                                                                  //-$007  "N§ Ni¤os" := "N§ Ni¤os" + rElem."Numero elementos";
                                                                  //-$007END;
                                                                  //-$007IF "Tipo Persona" = rParPer."Codigo Infant" THEN BEGIN
                                                                  //-$007  "N§ Bebes" := "N§ Bebes" + rElem."Numero elementos";
                                                                  //-$007END;

                                                                  //+$007 <
                                                                  ManagePersonType;
                                                                  //+$007 >

                                                                  // Historico
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Tipo Persona"), STRSUBSTNO('%1', xRec."Tipo Persona"), STRSUBSTNO('%1', "Tipo Persona"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Person type;
                                                              ESP=Tipo Persona];
                                                   Description=FK Tipo elemento }
    { 17  ;   ;Compa¤ia entrada    ;Code10        ;TableRelation="Compa¤ia aerea".Codigo;
                                                   OnValidate=BEGIN
                                                                IF xRec."Compa¤ia entrada" <> "Compa¤ia entrada" THEN
                                                                BEGIN
                                                                  IF "Agrupacion entrada" <> 0 THEN BEGIN
                                                                    IF NOT "Modificacion importacion" THEN
                                                                    BEGIN
                                                                      texto_confirma := Text008 + ' ' + Nombre + ' ' + Text009 + ' ' + STRSUBSTNO('%1', "Agrupacion entrada");
                                                                      IF CONFIRM(texto_confirma) THEN
                                                                        VALIDATE("Agrupacion entrada", 0)
                                                                      ELSE
                                                                        actualiza_agrupacion("Agrupacion entrada", FALSE); //+$004
                                                                    END
                                                                    ELSE
                                                                    BEGIN
                                                                      VALIDATE("Agrupacion entrada", 0);
                                                                    END;
                                                                  END;

                                                                  acumulado_entrada;

                                                                  // Historico
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Compa¤ia entrada"), xRec."Compa¤ia entrada", "Compa¤ia entrada");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival company;
                                                              ESP=Compa¤ia entrada];
                                                   Description=FK Compa¤ia aerea;
                                                   Editable=No }
    { 19  ;   ;Vuelo entrada       ;Code10        ;OnValidate=BEGIN
                                                                IF xRec."Vuelo entrada" <> "Vuelo entrada" THEN BEGIN
                                                                  IF "Agrupacion entrada" <> 0 THEN
                                                                  BEGIN
                                                                    IF NOT "Modificacion importacion" THEN
                                                                    BEGIN
                                                                      texto_confirma := Text008 + ' ' + Nombre + ' ' + Text009 + ' ' + STRSUBSTNO('%1', "Agrupacion entrada");
                                                                      IF CONFIRM(texto_confirma) THEN
                                                                        VALIDATE("Agrupacion entrada", 0);
                                                                    END
                                                                    ELSE
                                                                    BEGIN
                                                                      VALIDATE("Agrupacion entrada", 0);
                                                                    END;
                                                                  END;

                                                                  acumulado_entrada;

                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Vuelo entrada"), xRec."Vuelo entrada", "Vuelo entrada");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival flight;
                                                              ESP=Vuelo entrada];
                                                   Editable=No }
    { 21  ;   ;Fecha entrada       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Fecha entrada" <> "Fecha entrada" THEN
                                                                BEGIN
                                                                  // +$025
                                                                  CheckPermiso;

                                                                  //. Si cambiamos el campo directamente en reserva transfer hay que comprobar las condiciones de contrato
                                                                  IF (CurrFieldNo = FIELDNO("Fecha entrada")) AND
                                                                     ("IATA destino entrada" <> '') THEN
                                                                    _CheckPrecioEntrada;

                                                                  // ----  Si estamos en un circuito y es el ultimo periodo no hay que hacer el cambio de  ----
                                                                  // ----  de fecha de entrada                                                             ----

                                                                  IF Circuito <> '' THEN
                                                                  BEGIN
                                                                    rPerio.RESET;
                                                                    rPerio.SETRANGE(Delegacion  , Delegacion);
                                                                    rPerio.SETRANGE("N§ Interno", "N§ Interno");
                                                                    IF rPerio.FINDLAST THEN
                                                                      IF rPerio."N§ Periodo" = "N§ Periodo" THEN BEGIN
                                                                        "Fecha entrada" := xRec."Fecha entrada";
                                                                        EXIT;
                                                                      END;
                                                                  END;

                                                                  // ----  Si la reserva esta agrupada de entrada hay que preguntar si se quiere sacar de  ----
                                                                  // ----  la agrupacion                                                                   ----

                                                                  IF ("Agrupacion entrada" <> 0) THEN
                                                                  BEGIN
                                                                    ERROR(Text032); //+$031

                                                                    //-$031IF (NOT "Modificacion importacion") THEN
                                                                    //-$031BEGIN
                                                                    //-$031  texto_confirma := Text008 + ' ' + Nombre + ' ' + Text009 + ' ' + STRSUBSTNO('%1', "Agrupacion entrada");
                                                                    //-$031  IF CONFIRM(texto_confirma) THEN
                                                                    //-$031    VALIDATE("Agrupacion entrada", 0);
                                                                    //-$031END
                                                                    //-$031ELSE
                                                                    //-$031  VALIDATE("Agrupacion entrada", 0);
                                                                  END;

                                                                  //. Marcar para refrescar el registro acumulado de entrada  ----

                                                                  acumulado_entrada;

                                                                  //. Historico
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Fecha entrada"), STRSUBSTNO('%1', xRec."Fecha entrada"), STRSUBSTNO('%1', "Fecha entrada"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival Date;
                                                              ESP=Fecha entrada] }
    { 23  ;   ;Terminal entrada    ;Code1         ;OnValidate=BEGIN
                                                                IF xRec."Terminal entrada" <> "Terminal entrada" THEN BEGIN
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Terminal entrada"), xRec."Terminal entrada", "Terminal entrada");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival terminal;
                                                              ESP=Terminal entrada];
                                                   Editable=No }
    { 25  ;   ;Hora entrada        ;Time          ;OnValidate=BEGIN
                                                                IF xRec."Hora entrada" <> "Hora entrada" THEN BEGIN
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Hora entrada"), STRSUBSTNO('%1', xRec."Hora entrada"), STRSUBSTNO('%1', "Hora entrada"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival time;
                                                              ESP=Hora entrada];
                                                   Editable=No }
    { 27  ;   ;IATA origen entrada ;Code10        ;TableRelation=Aeropuerto.Aeropuerto;
                                                   OnValidate=BEGIN
                                                                IF xRec."IATA origen entrada" <> "IATA origen entrada" THEN BEGIN
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("IATA origen entrada"), xRec."IATA origen entrada", "IATA origen entrada");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival origin IATA;
                                                              ESP=IATA origen entrada];
                                                   Description=FK Aeropuerto;
                                                   Editable=No }
    { 29  ;   ;IATA destino entrada;Code10        ;TableRelation=Aeropuerto.Aeropuerto;
                                                   OnValidate=BEGIN
                                                                IF xRec."IATA destino entrada" <> "IATA destino entrada" THEN
                                                                BEGIN
                                                                  //. Si cambiamos el campo directamente en reserva transfer hay que comprobar las condiciones de contrato
                                                                  IF (CurrFieldNo = FIELDNO("IATA destino entrada")) AND
                                                                     ("IATA destino entrada" <> '') THEN
                                                                    _CheckPrecioEntrada;

                                                                  //. Historico
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("IATA destino entrada"), xRec."IATA destino entrada", "IATA destino entrada");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival destination IATA;
                                                              ESP=IATA destino entrada];
                                                   Description=FK Aeropuerto;
                                                   Editable=No }
    { 31  ;   ;Compa¤ia salida     ;Code10        ;TableRelation="Compa¤ia aerea".Codigo;
                                                   OnValidate=BEGIN
                                                                IF xRec."Compa¤ia salida" <> "Compa¤ia salida" THEN
                                                                BEGIN
                                                                  IF ("Agrupacion salida" <> 0) THEN BEGIN
                                                                    IF (NOT "Modificacion importacion") THEN BEGIN
                                                                      texto_confirma := Text008 + ' ' + Nombre + ' ' + Text010 + ' ' + STRSUBSTNO('%1', "Agrupacion salida");
                                                                      IF CONFIRM(texto_confirma) THEN
                                                                        VALIDATE("Agrupacion salida", 0)
                                                                      ELSE
                                                                        actualiza_agrupacion("Agrupacion salida", FALSE); //+$004
                                                                    END
                                                                    ELSE
                                                                      VALIDATE("Agrupacion salida", 0);
                                                                  END;

                                                                  acumulado_salida;

                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Compa¤ia salida"), xRec."Compa¤ia salida", "Compa¤ia salida");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure company;
                                                              ESP=Compa¤ia salida];
                                                   Description=FK Compa¤ia aerea;
                                                   Editable=No }
    { 33  ;   ;Vuelo salida        ;Code10        ;OnValidate=BEGIN
                                                                IF xRec."Vuelo salida" <> "Vuelo salida" THEN BEGIN

                                                                  IF ("Agrupacion salida" <> 0) THEN BEGIN
                                                                    IF (NOT "Modificacion importacion") THEN BEGIN
                                                                      texto_confirma := Text008 + ' ' + Nombre + ' ' + Text010 + ' ' + STRSUBSTNO('%1', "Agrupacion salida");
                                                                      IF CONFIRM(texto_confirma) THEN
                                                                        VALIDATE("Agrupacion salida", 0);
                                                                    END
                                                                    ELSE
                                                                      VALIDATE("Agrupacion salida", 0);
                                                                  END;

                                                                  acumulado_salida;

                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Vuelo salida"), xRec."Vuelo salida", "Vuelo salida");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure flight;
                                                              ESP=Vuelo salida];
                                                   Editable=No }
    { 35  ;   ;Fecha salida        ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Fecha salida" <> "Fecha salida" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;

                                                                  //. Si cambiamos el campo directamente en reserva transfer hay que comprobar las condiciones de contrato
                                                                  IF (CurrFieldNo = FIELDNO("Fecha salida")) AND
                                                                     ("IATA origen salida" <> '') THEN
                                                                    _CheckPrecioSalida;

                                                                  // ----  Si estamos en un circuito y es el primer periodo no hay que hacer el cambio de  ----
                                                                  // ----  de fecha de salida                                                              ----

                                                                  IF Circuito <> '' THEN BEGIN
                                                                    rPerio.RESET;
                                                                    rPerio.SETRANGE(Delegacion  , Delegacion);
                                                                    rPerio.SETRANGE("N§ Interno", "N§ Interno");
                                                                    IF rPerio.FINDFIRST THEN
                                                                      IF rPerio."N§ Periodo" = "N§ Periodo" THEN BEGIN
                                                                        "Fecha salida" := xRec."Fecha salida";
                                                                        EXIT;
                                                                      END;
                                                                  END;

                                                                  // ----  Si la reserva esta agrupada de salida hay que preguntar si se quiere sacar de  ----
                                                                  // ----  la agrupacion                                                                  ----

                                                                  IF ("Agrupacion salida" <> 0) THEN
                                                                  BEGIN
                                                                    ERROR(Text032); //+$031

                                                                    //-$031IF (NOT "Modificacion importacion") THEN
                                                                    //-$031BEGIN
                                                                    //-$031  texto_confirma := Text008 + ' ' + Nombre + ' ' + Text010 + ' ' + STRSUBSTNO('%1', "Agrupacion salida");
                                                                    //-$031  IF CONFIRM(texto_confirma) THEN
                                                                    //-$031    VALIDATE("Agrupacion salida", 0);
                                                                    //-$031END
                                                                    //-$031ELSE
                                                                    //-$031  VALIDATE("Agrupacion salida", 0);
                                                                  END;

                                                                  // ---- Marcar como inconsistente el registro acumulado de salida  ----

                                                                  acumulado_salida;

                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Fecha salida"), STRSUBSTNO('%1', xRec."Fecha salida"), STRSUBSTNO('%1', "Fecha salida"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure Date;
                                                              ESP=Fecha salida] }
    { 37  ;   ;Terminal salida     ;Code1         ;OnValidate=BEGIN
                                                                IF xRec."Terminal salida" <> "Terminal salida" THEN BEGIN
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Terminal salida"), xRec."Terminal salida", "Terminal salida");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure terminal;
                                                              ESP=Terminal salida];
                                                   Editable=No }
    { 39  ;   ;Hora salida         ;Time          ;OnValidate=BEGIN
                                                                IF xRec."Hora salida" <> "Hora salida" THEN BEGIN
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Hora salida"), STRSUBSTNO('%1', xRec."Hora salida"), STRSUBSTNO('%1', "Hora salida"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure time;
                                                              ESP=Hora salida];
                                                   Editable=No }
    { 41  ;   ;IATA origen salida  ;Code10        ;TableRelation=Aeropuerto.Aeropuerto;
                                                   OnValidate=BEGIN
                                                                IF xRec."IATA origen salida" <> "IATA origen salida" THEN BEGIN
                                                                  //. Si cambiamos el campo directamente en reserva transfer hay que comprobar las condiciones de contrato
                                                                  IF (CurrFieldNo = FIELDNO("IATA origen salida")) AND
                                                                     ("IATA origen salida" <> '') THEN
                                                                    _CheckPrecioSalida;

                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("IATA origen salida"), xRec."IATA origen salida", "IATA origen salida");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure origin IATA;
                                                              ESP=IATA origen salida];
                                                   Description=FK Aeropuerto;
                                                   Editable=No }
    { 43  ;   ;IATA destino salida ;Code10        ;TableRelation=Aeropuerto.Aeropuerto;
                                                   OnValidate=BEGIN
                                                                IF xRec."IATA destino salida" <> "IATA destino salida" THEN BEGIN
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("IATA destino salida"), xRec."IATA destino salida", "IATA destino salida");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure destination IATA;
                                                              ESP=IATA destino salida];
                                                   Description=FK Aeropuerto;
                                                   Editable=No }
    { 45  ;   ;Comentarios         ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(Comentarios WHERE (Delegacion=FIELD(Delegacion),
                                                                                        N§ Interno=FIELD(N§ Interno)));
                                                   CaptionML=[ENU=Comments;
                                                              ESP=Comentarios];
                                                   Description=Calculado;
                                                   Editable=No }
    { 47  ;   ;N§ Responsable      ;Integer       ;CaptionML=[ENU=Responsible No.;
                                                              ESP=N§ Responsable];
                                                   Editable=No }
    { 49  ;   ;Precio Manual       ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Precio Manual" <> "Precio Manual" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;

                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Precio Manual"), STRSUBSTNO('%1', xRec."Precio Manual"), STRSUBSTNO('%1', "Precio Manual"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Manual price;
                                                              ESP=Precio manual];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="C¢d. divisa" }
    { 51  ;   ;Tipo precio manual  ;Option        ;OnValidate=BEGIN
                                                                IF xRec."Tipo precio manual" <> "Tipo precio manual" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Tipo precio manual"), STRSUBSTNO('%1', xRec."Tipo precio manual"),
                                                                                      STRSUBSTNO('%1', "Tipo precio manual"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Manual price type;
                                                              ESP=Tipo precio manual];
                                                   OptionCaptionML=[ENU=,Per pax,Per room;
                                                                    ESP=,Por Pax,Por Habitacion];
                                                   OptionString=,Por Pax,Por Habitacion }
    { 53  ;   ;Precio Manual venta ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Precio Manual venta" <> "Precio Manual venta" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Precio Manual venta"), STRSUBSTNO('%1', xRec."Precio Manual venta"),
                                                                                      STRSUBSTNO('%1', "Precio Manual venta"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Manual sale price;
                                                              ESP=Precio manual venta];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="C¢d. divisa" }
    { 55  ;   ;Producto            ;Code10        ;TableRelation="Producto agencia".Codigo;
                                                   OnValidate=BEGIN
                                                                IF xRec.Producto <> Producto THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION(Producto), xRec.Producto, Producto);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Item;
                                                              ESP=Producto];
                                                   Description=FK Producto;
                                                   Editable=No }
    { 57  ;   ;Hotel entrada       ;Code20        ;TableRelation=Hotel.Hotel;
                                                   OnValidate=BEGIN
                                                                IF xRec."Hotel entrada" <> "Hotel entrada" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;

                                                                  //. Si cambiamos el campo directamente en reserva transfer hay que comprobar las condiciones de contrato
                                                                  IF (CurrFieldNo = FIELDNO("Hotel entrada")) AND
                                                                     ("IATA destino entrada" <> '') THEN
                                                                    _CheckPrecioEntrada;

                                                                  IF rHot.GET("Hotel entrada") THEN
                                                                  BEGIN
                                                                    "Zona entrada" := rHot."Zona Fisica";
                                                                    "Orden entrada" := rHot."Orden Entrada";

                                                                    CLEAR(rZon);
                                                                    rZon.SETRANGE("Tipo contrato", rZon."Tipo contrato"::Servicio);
                                                                    rZon.SETRANGE("Zona fisica"  , "Zona entrada");
                                                                    IF rZon.FINDFIRST THEN
                                                                      "Zona servicio entrada" := rZon.Zona;
                                                                  END;

                                                                  IF ("Agrupacion entrada" <> 0) THEN BEGIN
                                                                    IF (NOT "Modificacion importacion") THEN
                                                                    BEGIN
                                                                      texto_confirma := Text008 + ' ' + Nombre + ' ' + Text009 + ' ' + STRSUBSTNO('%1', "Agrupacion entrada");
                                                                      IF CONFIRM(texto_confirma) THEN
                                                                        VALIDATE("Agrupacion entrada", 0)
                                                                      ELSE
                                                                        actualiza_agrupacion("Agrupacion entrada", FALSE); //+$004
                                                                    END
                                                                    ELSE
                                                                      VALIDATE("Agrupacion entrada", 0);
                                                                  END;

                                                                  acumulado_entrada;

                                                                  //. Historico
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Hotel entrada"), xRec."Hotel entrada", "Hotel entrada");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival Hotel;
                                                              ESP=Hotel entrada];
                                                   Description=FK Hotel }
    { 59  ;   ;Hotel salida        ;Code20        ;TableRelation=Hotel.Hotel;
                                                   OnValidate=BEGIN
                                                                IF xRec."Hotel salida" <> "Hotel salida" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;

                                                                  //. Si cambiamos el campo directamente en reserva transfer hay que comprobar las condiciones de contrato
                                                                  IF (CurrFieldNo = FIELDNO("Hotel salida")) AND
                                                                     ("IATA origen salida" <> '') THEN
                                                                    _CheckPrecioSalida;

                                                                  IF rHot.GET("Hotel salida") THEN
                                                                  BEGIN
                                                                    "Zona salida" := rHot."Zona Fisica";
                                                                    "Orden salida" := rHot."Orden Salida";

                                                                    CLEAR(rZon);
                                                                    rZon.SETRANGE("Tipo contrato", rZon."Tipo contrato"::Servicio);
                                                                    rZon.SETRANGE("Zona fisica"  , "Zona salida");
                                                                    IF rZon.FINDFIRST THEN
                                                                      "Zona servicio salida" := rZon.Zona;
                                                                  END;

                                                                  IF ("Agrupacion salida" <> 0) THEN
                                                                  BEGIN
                                                                    IF (NOT "Modificacion importacion") THEN
                                                                    BEGIN
                                                                      texto_confirma := Text008 + ' ' + Nombre + ' ' + Text010 + ' ' + STRSUBSTNO('%1', "Agrupacion salida");
                                                                      IF CONFIRM(texto_confirma) THEN
                                                                        VALIDATE("Agrupacion salida", 0)
                                                                      ELSE
                                                                        actualiza_agrupacion("Agrupacion salida", FALSE); //+$004
                                                                    END
                                                                    ELSE
                                                                      VALIDATE("Agrupacion salida", 0);
                                                                  END;

                                                                  acumulado_salida;

                                                                  // Historico
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Hotel salida"), xRec."Hotel salida", "Hotel salida");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure Hotel;
                                                              ESP=Hotel salida];
                                                   Description=FK Hotel }
    { 61  ;   ;Zona entrada        ;Code10        ;TableRelation="Zona fisica"."Zona Fisica";
                                                   OnValidate=BEGIN
                                                                IF xRec."Zona entrada" <> "Zona entrada" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Zona entrada"), xRec."Zona entrada", "Zona entrada");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival Zone;
                                                              ESP=Zona entrada];
                                                   Description=FK Zona Fisica;
                                                   Editable=No }
    { 63  ;   ;Zona salida         ;Code10        ;TableRelation="Zona fisica"."Zona Fisica";
                                                   OnValidate=BEGIN
                                                                IF xRec."Zona salida" <> "Zona salida" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Zona salida"), xRec."Zona salida", "Zona salida");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure Zone;
                                                              ESP=Zona salida];
                                                   Description=FK Zona Fisica;
                                                   Editable=No }
    { 65  ;   ;C¢d. divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   OnValidate=BEGIN
                                                                IF xRec."C¢d. divisa" <> "C¢d. divisa" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("C¢d. divisa"), xRec."C¢d. divisa", "C¢d. divisa");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Currency exchange;
                                                              ESP=C¢d. divisa];
                                                   Description=FK Divisa }
    { 67  ;   ;Idioma              ;Code10        ;TableRelation=Language.Code;
                                                   OnValidate=BEGIN
                                                                IF xRec.Idioma <> Idioma THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION(Idioma), xRec.Idioma, Idioma);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Language;
                                                              ESP=Idioma];
                                                   Description=FK Idioma }
    { 69  ;   ;Delegacion          ;Code10        ;TableRelation=Delegacion.Codigo;
                                                   CaptionML=[ENU=Local Office;
                                                              ESP=Delegacion];
                                                   Description=PK, FK Delegacion;
                                                   Editable=No }
    { 71  ;   ;Mantenimiento       ;Boolean       ;OnValidate=BEGIN
                                                                // Pasar a acompa¤antes

                                                                rRsv.SETCURRENTKEY(Delegacion,
                                                                                   "N§ Interno",
                                                                                   "N§ Periodo");
                                                                rRsv.SETRANGE (Delegacion  , Delegacion);
                                                                rRsv.SETRANGE ("N§ Interno", "N§ Interno");
                                                                rRsv.SETRANGE ("N§ Periodo", "N§ Periodo");
                                                                rRsv.SETFILTER("N§ Reserva"    , '<>%1', "N§ Reserva");
                                                                IF rRsv.FINDSET(TRUE) THEN BEGIN
                                                                  rRsv.MODIFYALL(Mantenimiento, Mantenimiento, TRUE);
                                                                END;

                                                                // Modificamos la cabecera y los periodos

                                                                IF rCab.GET(Delegacion, "N§ Interno") THEN BEGIN
                                                                  rCab.Mantenimiento := NOT Mantenimiento ;
                                                                  rCab.MODIFY(TRUE);

                                                                  rPerio.RESET;
                                                                  rPerio.SETRANGE(Delegacion  , Delegacion);
                                                                  rPerio.SETRANGE("N§ Interno", "N§ Interno");
                                                                  IF rPerio.FINDSET(TRUE) THEN BEGIN
                                                                    rPerio.MODIFYALL(Mantenimiento, NOT Mantenimiento, TRUE);
                                                                  END;
                                                                END;

                                                                //. Modificamos las reservas de Hotel del mismo periodo

                                                                rRsvHot.RESET;
                                                                rRsvHot.SETCURRENTKEY(Delegacion,
                                                                                      "N§ Interno",
                                                                                      "N§ Periodo");
                                                                rRsvHot.SETRANGE(Delegacion  , Delegacion);
                                                                rRsvHot.SETRANGE("N§ Interno", "N§ Interno");
                                                                rRsvHot.SETRANGE("N§ Periodo", "N§ Periodo");
                                                                IF rRsvHot.FINDSET(TRUE) THEN
                                                                  rRsvHot.MODIFYALL(Mantenimiento, Mantenimiento, FALSE);
                                                              END;

                                                   CaptionML=[ENU=Maintenance;
                                                              ESP=Mantenimiento] }
    { 73  ;   ;N§ Acompa¤ante      ;Integer       ;CaptionML=[ENU=Companion No.;
                                                              ESP=N§ Acompa¤ante];
                                                   Editable=No }
    { 75  ;   ;Agrupacion entrada  ;Integer       ;TableRelation=Agrupacion."N§ Agrupacion" WHERE (Fecha=FIELD(Fecha entrada));
                                                   OnValidate=VAR
                                                                lrRes@1103355000 : Record 7009744;
                                                              BEGIN
                                                                IF xRec."Agrupacion entrada" <> "Agrupacion entrada" THEN
                                                                BEGIN
                                                                  IF xRec."Agrupacion entrada" <> 0 THEN
                                                                    actualiza_agrupacion(xRec."Agrupacion entrada", TRUE);

                                                                  //. Comprobar que no estemos desagrupando
                                                                  IF (rAgr.GET("Agrupacion entrada")) AND ("Agrupacion entrada" <> 0) THEN
                                                                  BEGIN
                                                                    IF rAgr.Estado = rAgr.Estado::Confirmado THEN
                                                                      ERROR(Text016 + ' ' +
                                                                            Text017, "Agrupacion entrada");

                                                                    //. Comprobar que la reserva tiene zona
                                                                    TESTFIELD("Zona entrada"); //+$008

                                                                    //. Comprobar que si la agrupacion es terrestre o aerea la reserva tengo el mismo tipo de transfer
                                                                    IF rAgr."Medio del transfer" <> "Tipo transfer entrada" THEN
                                                                      ERROR(Text018);

                                                                    IF rAgr."Transfer Privado" <> "Transfer Privado Llegada" THEN
                                                                      ERROR(Text024);

                                                                    //+$012
                                                                    IF rAgr."Traslado en destino" <> "Traslado en destino" THEN
                                                                      ERROR(Text025);

                                                                    //. Si era un cliente no show lo desmarcamos al asignarlo a una nueva agrupacion
                                                                    IF "No Show" THEN
                                                                      VALIDATE("No Show", FALSE);
                                                                  END
                                                                  ELSE
                                                                  BEGIN
                                                                    IF "Agrupacion entrada" <> 0 THEN
                                                                      ERROR(Text021, "Agrupacion entrada");
                                                                  END;

                                                                  //+$003 <
                                                                  IF "Agrupacion entrada" <> 0 THEN
                                                                    actualiza_agrupacion("Agrupacion entrada", FALSE);
                                                                  //+$003 >

                                                                  //+$013 <
                                                                  //. Si es una reserva de traslado en destino relleno tambien el pax en el servicio
                                                                  IF "Traslado en destino" THEN
                                                                    FillServicePerson;
                                                                  //+$013 >

                                                                  //. Historico
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Agrupacion entrada"), FORMAT(xRec."Agrupacion entrada"),
                                                                                      FORMAT("Agrupacion entrada"));
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Arrival service;
                                                              ESP=Agrupacion entrada];
                                                   Description=FK Agrupacion }
    { 77  ;   ;Agrupacion salida   ;Integer       ;TableRelation=Agrupacion."N§ Agrupacion" WHERE (Fecha=FIELD(Fecha salida));
                                                   OnValidate=VAR
                                                                lrRes@1103355000 : Record 7009744;
                                                              BEGIN
                                                                IF xRec."Agrupacion salida" <> "Agrupacion salida" THEN
                                                                BEGIN
                                                                  IF xRec."Agrupacion salida" <> 0 THEN
                                                                    actualiza_agrupacion(xRec."Agrupacion salida", TRUE);

                                                                  //. Comprobar que no estemos desagrupando
                                                                  IF (rAgr.GET("Agrupacion salida")) AND ("Agrupacion salida" <> 0) THEN
                                                                  BEGIN
                                                                    IF rAgr.Estado = rAgr.Estado::Confirmado THEN
                                                                      ERROR(Text016 + ' ' +
                                                                            Text017, "Agrupacion salida");

                                                                    //. Comprobar que la reserva tiene zona
                                                                    TESTFIELD("Zona salida"); //+$008

                                                                    //. Comprobar que si la agrupacion es terrestre o aerea la reserva tengo el mismo tipo de transfer
                                                                    IF rAgr."Medio del transfer" <> "Tipo transfer salida" THEN
                                                                      ERROR(Text018);

                                                                    IF rAgr."Transfer Privado" <> "Transfer Privado Salida" THEN
                                                                      ERROR(Text024);

                                                                    //+$012
                                                                    IF rAgr."Traslado en destino" <> "Traslado en destino" THEN
                                                                      ERROR(Text025);
                                                                  END
                                                                  ELSE
                                                                  BEGIN
                                                                    IF "Agrupacion salida" <> 0 THEN
                                                                      ERROR(Text021, "Agrupacion entrada");
                                                                  END;

                                                                  //+$003 <
                                                                  IF "Agrupacion salida" <> 0 THEN
                                                                    actualiza_agrupacion("Agrupacion salida", FALSE);
                                                                  //+$003 >

                                                                  //. Historico
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Agrupacion salida"), FORMAT(xRec."Agrupacion salida"),
                                                                                      FORMAT("Agrupacion salida"));
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Departure service;
                                                              ESP=Agrupacion salida];
                                                   Description=FK Agrupacion }
    { 79  ;   ;Direccion           ;Option        ;CaptionML=[ENU=Direction;
                                                              ESP=Direccion];
                                                   OptionCaptionML=[ENU=Both,Arrival,Departure;
                                                                    ESP=Ambos,Entrada,Salida];
                                                   OptionString=Ambos,Entrada,Salida }
    { 81  ;   ;o_Personas          ;Decimal       ;CaptionML=[ENU=o_People;
                                                              ESP=0_Personas];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 83  ;   ;o_Ni¤os             ;Decimal       ;CaptionML=[ENU=o_Children;
                                                              ESP=o_Ni¤os];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 85  ;   ;o_Bebes             ;Decimal       ;CaptionML=[ENU=o_Babys;
                                                              ESP=o_Bebes];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 87  ;   ;Elementos accesorios;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Elemento transportar transfer"."Numero elementos" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                             N§ Reserva=FIELD(N§ Reserva),
                                                                                                                             Humano=CONST(No)));
                                                   CaptionML=[ENU=Accessory elements;
                                                              ESP=Elementos accesorios];
                                                   DecimalPlaces=0:0;
                                                   Description=Calculado sobre elementos transportar;
                                                   Editable=No }
    { 89  ;   ;Orden entrada       ;Integer       ;CaptionML=[ENU=Arrival order;
                                                              ESP=Orden Entrada];
                                                   Editable=No }
    { 91  ;   ;Orden salida        ;Integer       ;CaptionML=[ENU=Departure order;
                                                              ESP=Orden Salida];
                                                   Editable=No }
    { 93  ;   ;Importe margen      ;Decimal       ;CaptionML=[ENU=Margin amount;
                                                              ESP=Importe margen];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="C¢d. divisa" }
    { 95  ;   ;Importe Ingreso     ;Decimal       ;CaptionML=[ENU=Incoming amount;
                                                              ESP=Importe Ingreso];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="C¢d. divisa" }
    { 96  ;   ;Importe Coste Entrada;Decimal      ;CaptionML=[ENU=Arrival cost amount;
                                                              ESP=Importe Coste Entrada];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="C¢d. divisa" }
    { 97  ;   ;Invitado TourOperador;Boolean      ;OnValidate=BEGIN
                                                                IF xRec."Invitado TourOperador" <> "Invitado TourOperador" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                FIELDCAPTION("Invitado TourOperador"), STRSUBSTNO('%1', xRec."Invitado TourOperador"),
                                                                                STRSUBSTNO('%1', "Invitado TourOperador"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Guest TourOperator;
                                                              ESP=Invitado TourOperador] }
    { 98  ;   ;Importe Coste Salida;Decimal       ;CaptionML=[ENU=Departure cost amount;
                                                              ESP=Importe Coste Salida];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="C¢d. divisa" }
    { 99  ;   ;Invitado Transportista;Boolean     ;OnValidate=BEGIN
                                                                IF xRec."Invitado Transportista" <> "Invitado Transportista" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  // Historico

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                FIELDCAPTION("Invitado Transportista"), STRSUBSTNO('%1', xRec."Invitado Transportista"),
                                                                                STRSUBSTNO('%1', "Invitado Transportista"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Guest Carrier;
                                                              ESP=Invitado Transportista] }
    { 101 ;   ;Zona servicio entrada;Code10       ;TableRelation="Zonas transfer".Zona WHERE (Tipo contrato=CONST(Servicio));
                                                   CaptionML=[ENU=Arrival service zone;
                                                              ESP=Zona servicio entrada];
                                                   Description=FK Zonas Transfer;
                                                   Editable=No }
    { 103 ;   ;Zona servicio salida;Code10        ;TableRelation="Zonas transfer".Zona WHERE (Tipo contrato=CONST(Servicio));
                                                   CaptionML=[ENU=Departure service zone;
                                                              ESP=Zona servicio salida];
                                                   Description=FK Zonas Transfer;
                                                   Editable=No }
    { 105 ;   ;Zona compra entrada ;Code10        ;CaptionML=[ENU=Arrival Purchase zone;
                                                              ESP=Zona compra entrada];
                                                   Editable=No }
    { 107 ;   ;Zona compra salida  ;Code10        ;CaptionML=[ENU=Departure Purchase Zone;
                                                              ESP=Zona compra salida];
                                                   Editable=No }
    { 109 ;   ;Zona venta entrada  ;Code10        ;CaptionML=[ENU=Arrival sale zone;
                                                              ESP=Zona venta entrada];
                                                   Editable=No }
    { 111 ;   ;Zona venta salida   ;Code10        ;CaptionML=[ENU=Departure sale zone;
                                                              ESP=Zona venta salida];
                                                   Editable=No }
    { 113 ;   ;Marca cambios       ;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU=Mark changes;
                                                              ESP=Marca cambios];
                                                   Description=FK Usuario;
                                                   Editable=No }
    { 115 ;   ;Entrada             ;Integer       ;OnValidate=BEGIN
                                                                IF Entrada = 1 THEN BEGIN
                                                                  IF Salida = 1 THEN
                                                                    Direccion := Direccion::Ambos
                                                                  ELSE
                                                                    Direccion := Direccion::Entrada;
                                                                  IF "Hotel entrada" = '' THEN
                                                                  BEGIN
                                                                    IF "Hotel salida" <> '' THEN
                                                                      Rec.VALIDATE("Hotel entrada", "Hotel salida")
                                                                    ELSE
                                                                    BEGIN
                                                                      IF rPerio.GET(Delegacion, "N§ Interno", "N§ Periodo") THEN
                                                                        Rec.VALIDATE("Hotel entrada", rPerio."Hotel Booking");
                                                                    END;
                                                                  END;
                                                                END
                                                                ELSE
                                                                BEGIN
                                                                  IF Salida = 1 THEN
                                                                    Direccion := Direccion::Salida;
                                                                  Rec.VALIDATE("Hotel entrada", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival;
                                                              ESP=Entrada];
                                                   Editable=No }
    { 117 ;   ;Salida              ;Integer       ;OnValidate=BEGIN
                                                                IF Salida = 1 THEN
                                                                BEGIN
                                                                  IF Entrada = 1 THEN
                                                                    Direccion := Direccion::Ambos
                                                                  ELSE
                                                                    Direccion := Direccion::Salida;
                                                                  IF "Hotel salida" = '' THEN
                                                                  BEGIN
                                                                    IF "Hotel entrada" <> '' THEN
                                                                      Rec.VALIDATE("Hotel salida", "Hotel entrada")
                                                                    ELSE
                                                                    BEGIN
                                                                      IF rPerio.GET(Delegacion, "N§ Interno", "N§ Periodo") THEN
                                                                        Rec.VALIDATE("Hotel salida", rPerio."Hotel Booking");
                                                                    END;
                                                                  END;
                                                                END
                                                                ELSE
                                                                BEGIN
                                                                  IF Entrada = 1 THEN
                                                                    Direccion := Direccion::Entrada;
                                                                  Rec.VALIDATE("Hotel salida", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure;
                                                              ESP=Salida];
                                                   Editable=No }
    { 119 ;   ;N§ Personas         ;Decimal       ;CaptionML=[ENU=People No.;
                                                              ESP=N§ Personas];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 121 ;   ;N§ Ni¤os            ;Decimal       ;CaptionML=[ENU=Children No.;
                                                              ESP=N§ Ni¤os];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 123 ;   ;N§ Bebes            ;Decimal       ;CaptionML=[ENU=Babys No.;
                                                              ESP=N§ Bebes];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 125 ;   ;N§ Elementos accesorios;Decimal    ;CaptionML=[ENU=Accessory elements No.;
                                                              ESP=N§ Elementos accesorios];
                                                   DecimalPlaces=0:0;
                                                   Description=Soporte del campo Elementos accesorios;
                                                   Editable=No }
    { 127 ;   ;Marca Cuadrante     ;Code20        ;CaptionML=[ENU=Mark Quadrant;
                                                              ESP=Marca Cuadrante];
                                                   Editable=No }
    { 129 ;   ;Modificacion importacion;Boolean   ;CaptionML=[ENU=Importation modification;
                                                              ESP=Modificacion importacion];
                                                   Editable=No }
    { 130 ;   ;Replicado           ;Boolean       ;InitValue=No;
                                                   CaptionML=[ENU=Replicated;
                                                              ESP=Replicado];
                                                   Description=Campo usado por el replicador }
    { 131 ;   ;Marca facturacion   ;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU=Mark Invoicing;
                                                              ESP=Marca facturacion];
                                                   Description=FK Usuario }
    { 133 ;   ;TourOperador facturacion;Code10    ;TableRelation=TourOperador;
                                                   CaptionML=[ENU=TourOperator invoicing;
                                                              ESP=TourOperador facturacion];
                                                   Description=FK Touroperador }
    { 135 ;   ;Circuito            ;Code10        ;TableRelation="Maestro circuitos".Circuito;
                                                   CaptionML=[ENU=Circuit;
                                                              ESP=Circuito];
                                                   Description=FK Circuito;
                                                   Editable=No }
    { 136 ;   ;Tipo transfer entrada;Option       ;CaptionML=[ENU=Arrival transfer type;
                                                              ESP=Tipo transfer entrada];
                                                   OptionCaptionML=[ENU=Terrestrial,Aerial,Maritime;
                                                                    ESP=Terrestre,Aereo,Maritimo];
                                                   OptionString=Terrestre,Aereo,Maritimo }
    { 137 ;   ;Tipo transfer salida;Option        ;CaptionML=[ENU=Departure transfer type;
                                                              ESP=Tipo transfer salida];
                                                   OptionCaptionML=[ENU=Terrestrial,Aerial,Maritime;
                                                                    ESP=Terrestre,Aereo,Maritimo];
                                                   OptionString=Terrestre,Aereo,Maritimo }
    { 138 ;   ;Transfer Privado Llegada;Boolean   ;OnValidate=VAR
                                                                lwConfirma@1100217000 : Boolean;
                                                              BEGIN
                                                                // Historico
                                                                IF "Transfer Privado Llegada" <> xRec."Transfer Privado Llegada" THEN
                                                                BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  IF "Agrupacion entrada" <> 0 THEN
                                                                    ERROR('');

                                                                  lwConfirma := FALSE;
                                                                  IF (GUIALLOWED) AND (CurrFieldNo = FIELDNO("Transfer Privado Llegada")) THEN
                                                                  BEGIN
                                                                    IF CONFIRM(Text022) THEN
                                                                      lwConfirma := TRUE;
                                                                  END;

                                                                  //$002 <
                                                                  //. Solicitamos si hay que aplicar este mismo cambio a todas las personas de la reserva
                                                                  IF lwConfirma THEN
                                                                  BEGIN
                                                                    rRsv.RESET;
                                                                    rRsv.SETCURRENTKEY(Bono);
                                                                    rRsv.SETRANGE (TourOperador, TourOperador);
                                                                    rRsv.SETRANGE (Bono        , Bono);
                                                                    rRsv.SETFILTER("N§ Reserva", '<>%1', "N§ Reserva");
                                                                    IF rRsv.FINDSET(TRUE) THEN
                                                                      rRsv.MODIFYALL("Transfer Privado Llegada", "Transfer Privado Llegada");
                                                                  END;
                                                                  //$002 >

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Transfer Privado Llegada"),
                                                                                      FORMAT(xRec."Transfer Privado Llegada"), FORMAT("Transfer Privado Llegada"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival Private transfer;
                                                              ESP=Transfer Privado Llegada];
                                                   Description=$017, Llegada - Exclusivo para los componentes de la reserva }
    { 139 ;   ;No Show             ;Boolean       ;OnValidate=BEGIN
                                                                IF "No Show" <> xRec."No Show" THEN
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("No Show"), FORMAT(xRec."No Show"), FORMAT("No Show"));
                                                              END;

                                                   CaptionML=[ENU=No Show;
                                                              ESP=No Show] }
    { 141 ;   ;Fecha creacion      ;DateTime      ;CaptionML=[ENU=Creation date;
                                                              ESP=Fecha creacion] }
    { 143 ;   ;Traslado en destino ;Boolean       ;CaptionML=[ENU=Transfer in destination;
                                                              ESP=Traslado en destino];
                                                   Editable=No }
    { 145 ;   ;Transfer Privado Salida;Boolean    ;OnValidate=VAR
                                                                lwConfirma@1100217000 : Boolean;
                                                              BEGIN
                                                                // Historico
                                                                IF "Transfer Privado Salida" <> xRec."Transfer Privado Salida" THEN
                                                                BEGIN
                                                                  // +$025
                                                                  CheckPermiso;
                                                                  IF "Agrupacion salida" <> 0 THEN
                                                                    ERROR('');

                                                                  lwConfirma := FALSE;
                                                                  IF (GUIALLOWED) AND (CurrFieldNo = FIELDNO("Transfer Privado Salida")) THEN
                                                                  BEGIN
                                                                    IF CONFIRM(Text022) THEN
                                                                      lwConfirma := TRUE;
                                                                  END;

                                                                  //$002 <
                                                                  //. Solicitamos si hay que aplicar este mismo cambio a todas las personas de la reserva
                                                                  IF lwConfirma THEN
                                                                  BEGIN
                                                                    rRsv.RESET;
                                                                    rRsv.SETCURRENTKEY(Bono);
                                                                    rRsv.SETRANGE (TourOperador, TourOperador);
                                                                    rRsv.SETRANGE (Bono        , Bono);
                                                                    rRsv.SETFILTER("N§ Reserva", '<>%1', "N§ Reserva");
                                                                    IF rRsv.FINDSET(TRUE) THEN
                                                                      rRsv.MODIFYALL("Transfer Privado Salida", "Transfer Privado Salida");
                                                                  END;
                                                                  //$002 >

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Transfer Privado Salida"),
                                                                                      FORMAT(xRec."Transfer Privado Salida"), FORMAT("Transfer Privado Salida"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure Private transfer;
                                                              ESP=Transfer Privado Salida];
                                                   Description=$017, Salida - Traslado exclusivo para los componentes de la reserva }
    { 147 ;   ;Tipo vehiculo solicitado;Code10    ;TableRelation="Tipo transporte".Codigo;
                                                   OnValidate=BEGIN
                                                                IF "Tipo vehiculo solicitado" <> xRec."Tipo vehiculo solicitado" THEN BEGIN
                                                                  // +$025
                                                                  CheckPermiso;

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Tipo vehiculo solicitado"),
                                                                                      FORMAT(xRec."Tipo vehiculo solicitado"), FORMAT("Tipo vehiculo solicitado"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Vehicle type requested;
                                                              ESP=Tipo vehiculo solicitado];
                                                   Editable=No }
    { 149 ;   ;Canal venta         ;Code20        ;TableRelation="Canal venta";
                                                   NotBlank=Yes;
                                                   Description=$023 }
    { 151 ;   ;User Type           ;Text30         }
    { 153 ;   ;User Id             ;Text30         }
    { 155 ;   ;Fecha Venta         ;Date          ;CaptionML=[ENU=Sale date;
                                                              ESP=Fecha venta] }
    { 157 ;   ;Guia Venta          ;Code20        ;TableRelation="Representante excursiones".Codigo WHERE (Bloqueado=CONST(No));
                                                   OnValidate=VAR
                                                                rTalonario@1103355000 : Record 7010146;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Sale guide;
                                                              ESP=Guia venta];
                                                   Description="Representante excursiones".Codigo WHERE (Bloqueado=CONST(No)) }
    { 159 ;   ;Tipo pago reserva   ;Option        ;CaptionML=[ENU=Payment type;
                                                              ESP=Tipo pago reserva];
                                                   OptionCaptionML=[ENU=Online,Destination,Credit;
                                                                    ESP=Online,Destino,Credito];
                                                   OptionString=Online,Destino,Credito }
    { 161 ;   ;Reserva online      ;Boolean       ;CaptionML=[ENU=Online reservation;
                                                              ESP=Reserva online] }
    { 163 ;   ;Ingreso reserva     ;Decimal       ;CaptionML=[ENU=Reservation income;
                                                              ESP=Ingreso reserva] }
    { 164 ;   ;Ingreso reserva neto;Decimal       ;CaptionML=[ENU=Reservation net income;
                                                              ESP=Ingreso reserva neto] }
    { 165 ;   ;Importe cobros      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cobro reserva transfer"."Importe Divisa Reserva" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                            Num Reserva=FIELD(N§ Reserva)));
                                                   CaptionML=[ENU=Payments Amount;
                                                              ESP=Importe cobros];
                                                   Editable=No }
    { 170 ;   ;Servicio transfer entrada;Option   ;InitValue=Ninguno;
                                                   OnValidate=VAR
                                                                lwConfirma@1000000000 : Boolean;
                                                              BEGIN
                                                                // Historico
                                                                IF "Servicio transfer entrada" <> xRec."Servicio transfer entrada" THEN
                                                                BEGIN
                                                                  // +$036 Actualizamos el valor del campo Entrada
                                                                  IF "Servicio transfer entrada" = "Servicio transfer entrada"::Ninguno THEN
                                                                    VALIDATE(Entrada, 0)
                                                                  ELSE
                                                                    VALIDATE(Entrada, 1);

                                                                  // +$025
                                                                  CheckPermiso;

                                                                  // +$036
                                                                  IF "Servicio transfer entrada" = "Servicio transfer entrada"::Ninguno THEN
                                                                    VALIDATE("Agrupacion entrada" , 0)
                                                                  ELSE BEGIN
                                                                    IF "Agrupacion entrada" <> 0 THEN BEGIN
                                                                      rAgr.RESET;
                                                                      IF rAgr.GET("Agrupacion entrada") THEN BEGIN
                                                                        IF rAgr."Tipo Servicio venta" <> "Servicio transfer entrada" THEN
                                                                          ERROR(Text033);
                                                                      END;
                                                                    END;
                                                                  END;

                                                                  //. Si cambiamos el campo directamente en reserva transfer hay que comprobar las condiciones de contrato
                                                                  IF (CurrFieldNo = FIELDNO("Servicio transfer entrada")) AND
                                                                     ("IATA destino entrada" <> '') THEN
                                                                    _CheckPrecioEntrada;

                                                                  // Actualizamos el valor de los campos anteriores
                                                                  IF "Servicio transfer entrada" = "Servicio transfer entrada"::Compartido THEN
                                                                    "Transfer Privado Llegada" := FALSE
                                                                  ELSE
                                                                    "Transfer Privado Llegada" := TRUE;

                                                                  lwConfirma := FALSE;
                                                                  IF (GUIALLOWED) AND (CurrFieldNo = FIELDNO("Servicio transfer entrada")) THEN
                                                                  BEGIN
                                                                    IF CONFIRM(Text022) THEN
                                                                      lwConfirma := TRUE;
                                                                  END;

                                                                  //$002 <
                                                                  //. Solicitamos si hay que aplicar este mismo cambio a todas las personas de la reserva
                                                                  IF lwConfirma THEN
                                                                  BEGIN
                                                                    rRsv.RESET;
                                                                    rRsv.SETCURRENTKEY(Bono);
                                                                    rRsv.SETRANGE (TourOperador, TourOperador);
                                                                    rRsv.SETRANGE (Bono        , Bono);
                                                                    rRsv.SETFILTER("N§ Reserva", '<>%1', "N§ Reserva");
                                                                    IF rRsv.FINDSET(TRUE) THEN
                                                                    BEGIN
                                                                      rRsv.MODIFYALL("Servicio transfer entrada", "Servicio transfer entrada");
                                                                      rRsv.MODIFYALL("Transfer Privado Llegada" , "Transfer Privado Llegada");
                                                                    END;
                                                                  END;
                                                                  //$002 >

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Servicio transfer entrada"),
                                                                                      FORMAT(xRec."Servicio transfer entrada"), FORMAT("Servicio transfer entrada"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Arrival transfer service;
                                                              ESP=Servicio transfer entrada];
                                                   OptionCaptionML=[ENU=Shared,Private,Deluxe,None;
                                                                    ESP=Compartido,Privado,Deluxe,Ninguno];
                                                   OptionString=Compartido,Privado,Deluxe,Ninguno }
    { 172 ;   ;Servicio transfer salida;Option    ;InitValue=Ninguno;
                                                   OnValidate=VAR
                                                                lwConfirma@1000000000 : Boolean;
                                                              BEGIN
                                                                // Historico
                                                                IF "Servicio transfer salida" <> xRec."Servicio transfer salida" THEN
                                                                BEGIN
                                                                  // Actualizamos el valor del campo Entrada
                                                                  IF "Servicio transfer salida" = "Servicio transfer salida"::Ninguno THEN
                                                                    VALIDATE(Salida, 0)
                                                                  ELSE
                                                                    VALIDATE(Salida, 1);

                                                                  // +$025
                                                                  CheckPermiso;

                                                                  // +$036
                                                                  IF "Servicio transfer salida" = "Servicio transfer salida"::Ninguno THEN
                                                                    VALIDATE("Agrupacion salida" , 0)
                                                                  ELSE BEGIN
                                                                    IF "Agrupacion salida" <> 0 THEN BEGIN
                                                                      rAgr.RESET;
                                                                      IF rAgr.GET("Agrupacion salida") THEN BEGIN
                                                                        IF rAgr."Tipo Servicio venta" <> "Servicio transfer salida" THEN
                                                                          ERROR(Text033);
                                                                      END;
                                                                    END;
                                                                  END;

                                                                  //. Si cambiamos el campo directamente en reserva transfer hay que comprobar las condiciones de contrato
                                                                  IF (CurrFieldNo = FIELDNO("Servicio transfer salida")) AND
                                                                     ("IATA origen salida" <> '') THEN
                                                                    _CheckPrecioSalida;

                                                                  // Actualizamos el valor de los campos anteriores
                                                                  IF "Servicio transfer salida" = "Servicio transfer salida"::Compartido THEN
                                                                    "Transfer Privado Salida" := FALSE
                                                                  ELSE
                                                                    "Transfer Privado Salida" := TRUE;

                                                                  lwConfirma := FALSE;
                                                                  IF (GUIALLOWED) AND (CurrFieldNo = FIELDNO("Servicio transfer salida")) THEN
                                                                  BEGIN
                                                                    IF CONFIRM(Text022) THEN
                                                                      lwConfirma := TRUE;
                                                                  END;

                                                                  //$002 <
                                                                  //. Solicitamos si hay que aplicar este mismo cambio a todas las personas de la reserva
                                                                  IF lwConfirma THEN
                                                                  BEGIN
                                                                    rRsv.RESET;
                                                                    rRsv.SETCURRENTKEY(Bono);
                                                                    rRsv.SETRANGE (TourOperador, TourOperador);
                                                                    rRsv.SETRANGE (Bono        , Bono);
                                                                    rRsv.SETFILTER("N§ Reserva", '<>%1', "N§ Reserva");
                                                                    IF rRsv.FINDSET(TRUE) THEN
                                                                    BEGIN
                                                                      rRsv.MODIFYALL("Servicio transfer salida", "Servicio transfer salida");
                                                                      rRsv.MODIFYALL("Transfer Privado Salida" , "Transfer Privado Salida");
                                                                    END;
                                                                  END;
                                                                  //$002 >

                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("Servicio transfer salida"),
                                                                                      FORMAT(xRec."Servicio transfer salida"), FORMAT("Servicio transfer salida"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Departure transfer service;
                                                              ESP=Servicio transfer salida];
                                                   OptionCaptionML=[ENU=Shared,Private,Deluxe,None;
                                                                    ESP=Compartido,Privado,Deluxe,Ninguno];
                                                   OptionString=Compartido,Privado,Deluxe,Ninguno }
    { 178 ;   ;Precio Comision Guia Venta;Decimal ;CaptionML=[ENU=Sale Guide Commission price;
                                                              ESP=Precio Comision Guia Venta];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="C¢d. divisa" }
    { 180 ;   ;Comision Guia Venta ;Decimal       ;CaptionML=[ENU=Commission sale guide;
                                                              ESP=Comision Guia Venta];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="C¢d. divisa" }
    { 182 ;   ;Liquidado GV        ;Boolean       ;CaptionML=[ENU=SG settled;
                                                              ESP=Liquidado GV] }
    { 184 ;   ;N§ liquidacion GV   ;Integer       ;TableRelation="Liquidacion Guia venta"."N§ Liquidacion" WHERE (Guia Venta=FIELD(Guia Venta));
                                                   OnValidate=BEGIN
                                                                cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                    FIELDCAPTION("N§ liquidacion GV"),
                                                                                    FORMAT(xRec."N§ liquidacion GV"), FORMAT("N§ liquidacion GV"));

                                                                "Fecha Liquidacion GV" := TODAY; //+$073
                                                                "Liquidado GV"         := TRUE;  //+$073
                                                              END;

                                                   CaptionML=[ENU=SG Settlement No.;
                                                              ESP=N§ liquidacion GV];
                                                   Description="Liquidacion Guia venta"."N§ Liquidacion" WHERE (Guia Venta=FIELD(Guia Venta)) }
    { 186 ;   ;N§ liquidacion GV reembolso;Integer;TableRelation="Liquidacion Guia venta"."N§ Liquidacion" WHERE (Guia Venta=FIELD(Guia Venta));
                                                   OnValidate=BEGIN
                                                                cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                    FIELDCAPTION("N§ liquidacion GV reembolso"),
                                                                                    FORMAT(xRec."N§ liquidacion GV reembolso"), FORMAT("N§ liquidacion GV reembolso"));

                                                                "Liquidado GV" := TRUE;
                                                                "Fecha Liquidacion reembolso GV" := TODAY;
                                                              END;

                                                   CaptionML=[ENU=Refund SG settlement No.;
                                                              ESP=N§ liquidacion GV reembolso];
                                                   Description="Liquidacion Guia venta"."N§ Liquidacion" WHERE (Guia Venta=FIELD(Guia Venta)) }
    { 188 ;   ;Fecha Liquidacion GV;Date          ;CaptionML=[ENU=SG settlement date;
                                                              ESP=Fecha Liquidacion GV] }
    { 190 ;   ;Fecha Liquidacion reembolso GV;Date;CaptionML=[ENU=SG Refund settlement date;
                                                              ESP=Fecha Liquidacion reembolso GV] }
    { 192 ;   ;Cobros con problemas;Boolean       ;OnValidate=BEGIN
                                                                IF Reembolsada OR "Liquidado GV" THEN
                                                                  ERROR(Text030);
                                                              END;

                                                   CaptionML=[ENU=Problems in payment;
                                                              ESP=Cobros con problemas];
                                                   Description=permite marcar una reserva que temporalmente no queremos liquidar }
    { 194 ;   ;Reembolsada         ;Boolean       ;OnValidate=BEGIN
                                                                cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                    FIELDCAPTION(Reembolsada),
                                                                                    FORMAT(xRec.Reembolsada), FORMAT(Reembolsada));
                                                              END;

                                                   CaptionML=[ENU=Refunded;
                                                              ESP=Reembolsada] }
    { 196 ;   ;Fecha cambio        ;Date          ;OnValidate=VAR
                                                                lrCobro@1100217000 : Record 7009927;
                                                              BEGIN

                                                                _UltimaFechaCambio;
                                                                "Tipo cambio" := TipoCambioDivisa;

                                                                lrCobro.RESET;
                                                                lrCobro.SETRANGE(Delegacion   , Delegacion);
                                                                lrCobro.SETRANGE("Num Reserva", "N§ Reserva");
                                                                IF lrCobro.FINDSET THEN
                                                                BEGIN
                                                                  REPEAT
                                                                    lrCobro."Fecha cambio cobro" := "Fecha cambio";
                                                                    lrCobro.CALCFIELDS("Cod. Divisa Reserva");
                                                                    lrCobro.SetImpDivResv;
                                                                    lrCobro.MODIFY;
                                                                  UNTIL lrCobro.NEXT = 0;
                                                                END;

                                                                cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                    FIELDCAPTION("Fecha cambio"),
                                                                                    FORMAT(xRec."Fecha cambio"), FORMAT("Fecha cambio"));
                                                              END;

                                                   CaptionML=[ENU=Exchange rate date;
                                                              ESP=Fecha cambio] }
    { 198 ;   ;Tipo cambio         ;Decimal       ;CaptionML=[ENU=Currency exchange rate;
                                                              ESP=Tipo cambio] }
    { 200 ;   ;Fecha Reembolso     ;Date          ;CaptionML=[ENU=Refund date;
                                                              ESP=Fecha Reembolso] }
    { 202 ;   ;Comentarios Reembolso;Text80       ;CaptionML=[ENU=Refund comments;
                                                              ESP=Comentarios Reembolso] }
    { 204 ;   ;Adultos Bono        ;Integer       ;CaptionML=[ENU=Booking adults;
                                                              ESP=Adultos Bono] }
    { 206 ;   ;Ni¤os Bono          ;Integer       ;CaptionML=[ENU=Booking childs;
                                                              ESP=Ni¤os Bono] }
    { 208 ;   ;Precio entrada adulto;Decimal      ;CaptionML=[ENU=Arrival adult price;
                                                              ESP=Precio entrada adulto] }
    { 210 ;   ;Precio entrada ni¤o ;Decimal       ;CaptionML=[ENU=Arrival child price;
                                                              ESP=Precio entrada ni¤o] }
    { 212 ;   ;Precio salida adulto;Decimal       ;CaptionML=[ENU=Departure adult price;
                                                              ESP=Precio salida adulto] }
    { 214 ;   ;Precio salida ni¤o  ;Decimal       ;CaptionML=[ENU=Departure child price;
                                                              ESP=Precio salida ni¤o] }
    { 216 ;   ;No comisionable     ;Boolean       ;OnValidate=BEGIN
                                                                IF ("No comisionable" <> xRec."No comisionable") THEN BEGIN
                                                                   // . Registrar en historico.
                                                                  cPar.intro_historic(Delegacion, "N§ Interno", "N§ Periodo", "N§ Reserva", rHis."Tipo Reserva"::Transfer,
                                                                                      FIELDCAPTION("No comisionable"),
                                                                                      FORMAT(xRec."No comisionable"), FORMAT("No comisionable"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Don't apply commission;
                                                              ESP=No comisionable] }
    { 246 ;   ;Adultos Reembolsados;Decimal       ;CaptionML=[ENU=Refunded Adults;
                                                              ESP=Adultos Reembolsados];
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 248 ;   ;Ni¤os Reembolsados  ;Decimal       ;CaptionML=[ENU=Refunded Children;
                                                              ESP=Ni¤os Reembolsados];
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 250 ;   ;Personas Reembolsadas;Decimal      ;CaptionML=[ENU=Refund People;
                                                              ESP=Personas Reembolsadas];
                                                   Editable=No }
    { 252 ;   ;Importe Reembolsado ;Decimal       ;OnLookup=VAR
                                                              lfConsulta@1000000001 : Form 7009960;
                                                              lrReemb@1000000000 : Record 7009928;
                                                            BEGIN
                                                              lrReemb.RESET;
                                                              lrReemb.FILTERGROUP(2);
                                                              lrReemb.SETRANGE(Delegacion   , Delegacion);
                                                              lrReemb.SETRANGE("Num Reserva", "N§ Reserva");
                                                              lrReemb.FILTERGROUP(0);

                                                              CLEAR(lfConsulta);
                                                              lfConsulta.SETTABLEVIEW(lrReemb);
                                                              lfConsulta.RUN;
                                                            END;
                                                             }
    { 254 ;   ;Importe Reembolsado Neto;Decimal    }
    { 256 ;   ;Importe reembolsado adultos;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reserva transfer - Reembolso"."Importe Adulto divisa reserva" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                                         Num Reserva=FIELD(N§ Reserva))) }
    { 268 ;   ;Importe neto reemb adultos;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reserva transfer - Reembolso"."Importe neto adulto div rsv" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                                       Num Reserva=FIELD(N§ Reserva))) }
    { 270 ;   ;Importe reembolsado ni¤os;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reserva transfer - Reembolso"."Importe ni¤os divisa reserva" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                                        Num Reserva=FIELD(N§ Reserva))) }
    { 272 ;   ;Importe neto reemb ni¤os;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reserva transfer - Reembolso"."Importe neto ni¤os div rsv" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                                      Num Reserva=FIELD(N§ Reserva))) }
  }
  KEYS
  {
    {    ;Delegacion,N§ Reserva                   ;Clustered=Yes }
    {    ;Delegacion,N§ Interno,N§ Periodo        ;SumIndexFields=Importe Coste Entrada,Importe Coste Salida;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha entrada,Zona servicio entrada,TourOperador,Entrada,Agrupacion entrada;
                                                   SumIndexFields=N§ Personas,N§ Ni¤os,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha salida,Zona servicio salida,TourOperador,Salida,Agrupacion salida;
                                                   SumIndexFields=N§ Personas,N§ Ni¤os,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha entrada,Zona servicio entrada,Hora entrada,Compa¤ia entrada,Vuelo entrada,IATA origen entrada,Hotel entrada,TourOperador,Entrada;
                                                   SumIndexFields=N§ Personas,N§ Ni¤os,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha salida,Zona servicio salida,Hora salida,TourOperador,Compa¤ia salida,Vuelo salida,IATA destino salida,Salida;
                                                   SumIndexFields=N§ Personas,N§ Ni¤os,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha entrada,Zona servicio entrada,TourOperador,Compa¤ia entrada,Vuelo entrada,IATA origen entrada,Orden entrada,Hotel entrada,Entrada,Agrupacion entrada;
                                                   SumIndexFields=N§ Personas,N§ Ni¤os,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha salida,Zona servicio salida,TourOperador,Compa¤ia salida,Vuelo salida,IATA destino salida,Orden salida,Hotel salida,Salida,Agrupacion salida;
                                                   SumIndexFields=N§ Personas,N§ Ni¤os,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    {    ;Hotel entrada                           ;SumIndexFields=N§ Personas,N§ Ni¤os,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    {    ;Hotel salida                            ;SumIndexFields=N§ Personas,N§ Ni¤os,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    { No ;Compa¤ia entrada,Vuelo entrada,Hotel entrada,Fecha entrada,Fecha salida;
                                                   SumIndexFields=N§ Personas,N§ Ni¤os,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    { No ;Compa¤ia salida,Vuelo salida,Hotel salida,Fecha entrada,Fecha salida;
                                                   SumIndexFields=N§ Personas,N§ Ni¤os,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    {    ;Agrupacion entrada,TourOperador facturacion,Zona entrada;
                                                   SumIndexFields=Importe margen,Importe Ingreso;
                                                   KeyGroups=RENUMERING }
    {    ;Agrupacion salida,TourOperador facturacion,Zona salida;
                                                   SumIndexFields=Importe margen,Importe Ingreso;
                                                   KeyGroups=RENUMERING }
    {    ;Agrupacion entrada,TourOperador,Zona servicio entrada;
                                                   SumIndexFields=Importe margen,Importe Ingreso;
                                                   KeyGroups=RENUMERING }
    {    ;Agrupacion salida,TourOperador,Zona servicio salida;
                                                   SumIndexFields=Importe margen,Importe Ingreso;
                                                   KeyGroups=RENUMERING }
    { No ;Agrupacion entrada,Fecha entrada,Zona servicio entrada,Hotel entrada,Compa¤ia entrada,Vuelo entrada,IATA origen entrada;
                                                   SumIndexFields=N§ Personas,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    { No ;Agrupacion salida,Fecha salida,Zona servicio salida,Hotel salida,Compa¤ia salida,Vuelo salida,IATA destino salida;
                                                   SumIndexFields=N§ Personas,N§ Elementos accesorios;
                                                   KeyGroups=RENUMERING }
    {    ;Agrupacion entrada,Hotel entrada,Bono,Vuelo entrada,Tipo Persona,Nombre;
                                                   KeyGroups=RENUMERING }
    {    ;Agrupacion salida,Hotel salida,Bono,Vuelo salida,Tipo Persona,Nombre;
                                                   KeyGroups=RENUMERING }
    {    ;Bono,Fecha entrada,Fecha salida         ;KeyGroups=RENUMERING }
    {    ;Delegacion,N§ Interno,N§ Periodo,N§ Acompa¤ante;
                                                   KeyGroups=RENUMERING }
    {    ;Marca cambios,Hotel entrada,Tipo Persona,Nombre;
                                                   KeyGroups=RENUMERING }
    {    ;Marca cambios,Agrupacion entrada,Agrupacion salida;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha entrada,TourOperador,Compa¤ia entrada,Vuelo entrada,IATA origen entrada,Zona servicio entrada,Hotel entrada,Bono;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha salida,TourOperador,Compa¤ia salida,Vuelo salida,IATA destino salida,Zona servicio salida,Hotel salida,Bono;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha entrada,TourOperador,Nombre       ;KeyGroups=RENUMERING }
    {    ;Fecha salida,TourOperador,Nombre        ;KeyGroups=RENUMERING }
    {    ;Fecha entrada,Compa¤ia entrada,Vuelo entrada,IATA origen entrada,Zona servicio entrada,Hotel entrada,Bono;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha salida,Compa¤ia salida,Vuelo salida,IATA destino salida,Zona servicio salida,Hotel salida,Bono;
                                                   KeyGroups=RENUMERING }
    {    ;Marca cambios,Hotel salida,Tipo Persona,Nombre;
                                                   KeyGroups=RENUMERING }
    {    ;Agrupacion salida,TourOperador facturacion,Zona venta salida;
                                                   SumIndexFields=Importe margen,Importe Ingreso;
                                                   KeyGroups=RENUMERING }
    {    ;Delegacion,N§ Responsable,Agrupacion entrada,Agrupacion salida,Bono;
                                                   SumIndexFields=N§ Personas;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha entrada,TourOperador facturacion,Hotel entrada,IATA destino entrada;
                                                   SumIndexFields=N§ Personas;
                                                   KeyGroups=RENUMERING }
    {    ;Delegacion,Agrupacion entrada,Agrupacion salida,Bono;
                                                   SumIndexFields=N§ Personas;
                                                   KeyGroups=RENUMERING }
    {    ;Delegacion,Zona entrada,Hotel entrada,Fecha entrada;
                                                   SumIndexFields=N§ Personas,N§ Ni¤os,N§ Bebes;
                                                   KeyGroups=RENUMERING }
    { No ;Agrupacion entrada,TourOperador,Zona servicio entrada,Fecha entrada,Compa¤ia entrada,Vuelo entrada,IATA origen entrada;
                                                   SumIndexFields=N§ Personas }
    { No ;Agrupacion salida,TourOperador,Zona servicio salida,Fecha salida,Compa¤ia salida,Vuelo salida,IATA destino salida;
                                                   SumIndexFields=N§ Personas }
    {    ;Traslado en destino,TourOperador,Zona servicio entrada,Fecha entrada;
                                                   SumIndexFields=N§ Personas }
    {    ;Guia Venta,Bono,Liquidado GV,N§ liquidacion GV,N§ liquidacion GV reembolso }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1103355017 : TextConst 'ENU=Only to enter transfer reservations in local offices is possible;ESP=Solo es posible dar de alta reservas de transfer en las delegaciones.';
      Text003@1103355019 : TextConst 'ENU=Only to modify transfer reservations in local offices is possible;ESP=Solo es posible modificar reservas de transfer en las delegaciones.';
      Text004@1103355020 : TextConst 'ENU=Only to cancel transfer reservations in local offices is possible;ESP=Solo es posible dar de baja reservas de transfer en las delegaciones.';
      Text005@1103355021 : TextConst 'ENU=Deleted;ESP=Borrado';
      Text006@1103355022 : TextConst 'ENU=Deleted register;ESP=Borrado registro';
      Text007@1103355023 : TextConst 'ENU=Only to rename transfer reservations in local offices is possible;ESP=Solo es posible renombrar reservas de transfer en las delegaciones.';
      Text008@1103355024 : TextConst 'ENU=Would you like to remove;ESP=Desea sacar a';
      Text009@1103355025 : TextConst 'ENU=" from the arrival transfer service";ESP=" de la agrupacion de entrada"';
      Text010@1103355026 : TextConst 'ENU=" from the departure transfer service";ESP=" de la agrupacion de salida"';
      Text016@1103355032 : TextConst 'ENU=Unable to change transfer service %1, because it''s is confirmed \;ESP=No se puede cambiar a la agrupacion %1, porque la agrupacion esta confirmada \';
      Text017@1103355033 : TextConst 'ENU="must cancel the transfer service confirmation before doing the change. ";ESP=debe desconfirmar la agrupacion antes de hacer el cambio.';
      Text018@1103355034 : TextConst 'ENU=Unable to add the reservation to this transfer service because they do not have the same type.;ESP=No se puede a¤adir la reserva a esta agrupacion porque son de distinto tipo.';
      Text019@1103355035 : TextConst 'ENU=Unable to change the transfer service to booking %1, because the current transfer service is confirmed \;ESP=No se puede cambiar de agrupacion el bono %1, porque la agrupacion actual (%2) esta confirmada \';
      Text020@1103355036 : TextConst 'ENU=Unable to change the transfer service to booking %1, because the current transfer service is invoiced.;ESP=No se puede cambiar de agrupacion el bono %1, porque la agrupacion actual (%2) esta facturada.';
      rPar@1103355000 : Record 7009700;
      rParPer@1103355001 : Record 7009701;
      rHis@1103355002 : Record 7009751;
      rRsv@1103355003 : Record 7009744;
      rRsvHot@1103355004 : Record 7009743;
      rCab@1103355005 : Record 7009741;
      rPerio@1103355006 : Record 7009742;
      rHot@1103355007 : Record 7009724;
      rAgr@1103355008 : Record 7009796;
      rElem@1103355010 : Record 7009792;
      rZon@1103355011 : Record 7009791;
      rTTOO@1000000002 : Record 7009717;
      rCob@1000000004 : Record 7009927;
      cPar@1103355012 : Codeunit 7009700;
      cRes@1103355013 : Codeunit 7009703;
      cNom@1103355014 : Codeunit 7009702;
      cCuad@1103355037 : Codeunit 7009733;
      cProf@1103355038 : Codeunit 7009902;
      cFunSeg@1000000003 : Codeunit 7009751;
      texto_confirma@1103355015 : Text[150];
      Text021@1100217000 : TextConst 'ENU=There is no service number %1.;ESP=No existe la agrupacion %1.';
      Text022@1100217001 : TextConst 'ENU=Do you want to apply the same change to all the persons in the reservation?;ESP=Desea aplicar este cambio a todas las personas de esta reserva?';
      Text023@1100217002 : TextConst 'ENU=There is no transfer contract for day %1 for the touroperator %2.;ESP=No existe el contrato transfer para dia %1 del touroperador %2.';
      Text024@1100217003 : TextConst 'ENU=You cannot put together private transfer reservations with regular transfer reservations.;ESP=No se pueden mezclar reservas de transfer privado con reservas de transfer regular.';
      Text025@1100217004 : TextConst 'ENU=You cannot put together transfer in destination reservations with transfer in/out reservations.;ESP=No se pueden mezclar reservas de traslado en destino con reservas de traslado In/Out';
      Text026@1100217005 : TextConst 'ENU=The %2 %1 doesn''t exist.;ESP=No existe %1 %2';
      Text027@1100217006 : TextConst 'ENU=There is no sales price in contract %1 for booking conditions.;ESP=No existe ning£n precio venta en el contrato %1 para las condiciones de la Reserva.';
      Text028@1000000000 : TextConst 'ENU=You must set the physical zone for airport %1.;ESP=El aeropuerto %1 no tiene zona fisica.';
      Text029@1000000001 : TextConst 'ENU=The zone %1 is undefined in the contract %2.;ESP=La zona %1 no esta definida en el contrato %2.';
      Text030@1000000005 : TextConst 'ENU=This reservation cannot be marked.;ESP=No se puede marcar esta reserva.';
      Text031@1000000006 : TextConst 'ENU=This reservation cannot be modified because it has been liquidated to the sale guide.;ESP=No se puede modificar una reserva liquidada al guia venta.';
      Text032@1000000007 : TextConst 'ENU=You cannot change the date of a reservation that is assigned to a service.;ESP=No se puede cambiar la fecha de una reserva que tiene servicio asignado.';
      Text033@1000000008 : TextConst 'ENU=The service cannot be changed in a reservation with service.;ESP=No se puede cambiar el servicio de una reserva ya agrupada.';

    PROCEDURE actualiza_agrupacion@20(par_agrupacion@1103355000 : Integer;pwDesasignar@1100217000 : Boolean);
    VAR
      rCI@1103355001 : Record 7009805;
    BEGIN
      // actualiza_agrupacion

      IF rAgr.GET(par_agrupacion) THEN
      BEGIN
        IF rAgr.Estado = rAgr.Estado::Confirmado THEN
          ERROR(Text019 +
                Text017, Bono, par_agrupacion);

        rCI.RESET;
        rCI.SETRANGE (Agrupacion  , par_agrupacion);
        rCI.SETFILTER("N§ Factura", '<>%1', '');
        IF NOT rCI.ISEMPTY THEN
          ERROR(Text020, Bono, par_agrupacion);

        //. Si desasignamos una reserva hay que comprobar si algun registro de las tablas relacionadas con agrupacion
        //. ha dejado de ser util
        IF pwDesasignar THEN
        BEGIN
          _CompruebaBajaVueloAgr(rAgr."N§ Agrupacion", rAgr."Tipo transfer");
          _CompruebaBajaHotelAgr(rAgr."N§ Agrupacion", rAgr."Tipo transfer");
          _CompruebaBajaHorasAgr(rAgr."N§ Agrupacion", rAgr."Tipo transfer");

          //. Actualizamos los campos de texto que sirven para filtros
          cCuad.CampoVuelosAgrupacion(rAgr."N§ Agrupacion", rAgr.Vuelos, rAgr."N§ vuelos");
          cCuad.CampoTouroperadoresAgr(rAgr."N§ Agrupacion", rAgr.TourOperadores);
          cCuad.CampoZonasAgrupacion(rAgr."N§ Agrupacion", rAgr.Zonas);

          rAgr.Anuladas := rAgr.Anuladas + 1;
          rAgr.MODIFY;
        END
        ELSE
        BEGIN
          IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN
          BEGIN
            cCuad.Crea_VuelosE_Agr(rAgr, Rec);
            cCuad.Crea_HotelesE_Agr(rAgr, Rec);
            cCuad.Crea_ZonasE_Agr(rAgr, Rec);
            cCuad.Rellena_Orden_Hoteles(rAgr);
          END
          ELSE
          BEGIN
            cCuad.Crea_VuelosS_Agr(rAgr, Rec);
            cCuad.Crea_HotelesS_Agr(rAgr, Rec);
            cCuad.Crea_ZonasS_Agr(rAgr, Rec);
            cCuad.Rellena_Orden_Hoteles(rAgr);
          END;

          //. Actualizamos los campos de texto que sirven para filtros
          cCuad.CampoVuelosAgrupacion(rAgr."N§ Agrupacion", rAgr.Vuelos, rAgr."N§ vuelos");
          cCuad.CampoTouroperadoresAgr(rAgr."N§ Agrupacion", rAgr.TourOperadores);
          cCuad.CampoZonasAgrupacion(rAgr."N§ Agrupacion", rAgr.Zonas);

          rAgr.AseguraHorarioSalidas; //$002
          rAgr.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE _CompruebaBajaVueloAgr@1100217000(pwAgrupacion@1100217000 : Integer;pwTipoTransfer@1100217003 : Integer);
    VAR
      lrRsv@1100217002 : Record 7009744;
      lrVueloAgr@1100217001 : Record 7009797;
    BEGIN
      // _CompruebaBajaVueloAgr

      //. @pwTipoTransfer, 0-Entrada, 1-Salida

      //. Comprobamos si quedan reservas en el vuelo
      IF pwTipoTransfer = 0 THEN
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Agrupacion entrada");
        lrRsv.SETRANGE ("Agrupacion entrada" , pwAgrupacion);
        lrRsv.SETRANGE ("Fecha entrada"      , "Fecha entrada");
        lrRsv.SETRANGE ("Compa¤ia entrada"   , "Compa¤ia entrada");
        lrRsv.SETRANGE ("Vuelo entrada"      , "Vuelo entrada");
        lrRsv.SETRANGE (TourOperador         , TourOperador);
        lrRsv.SETRANGE ("IATA origen entrada", "IATA origen entrada");
        lrRsv.SETFILTER("N§ Reserva"         , '<>%1', "N§ Reserva");
        IF lrRsv.ISEMPTY THEN
        BEGIN
          lrVueloAgr.RESET;
          lrVueloAgr.SETRANGE("N§ Agrupacion", pwAgrupacion);
          lrVueloAgr.SETRANGE(Fecha          , "Fecha entrada");
          lrVueloAgr.SETRANGE(Compa¤ia       , "Compa¤ia entrada");
          lrVueloAgr.SETRANGE(Vuelo          , "Vuelo entrada");
          lrVueloAgr.SETRANGE(IATA           , "IATA origen entrada");
          lrVueloAgr.SETRANGE(TourOperador   , TourOperador);
          IF lrVueloAgr.FINDFIRST THEN
            lrVueloAgr.DELETE
        END;
      END
      ELSE
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Agrupacion salida");
        lrRsv.SETRANGE ("Agrupacion salida"  , pwAgrupacion);
        lrRsv.SETRANGE ("Fecha salida"       , "Fecha salida");
        lrRsv.SETRANGE ("Compa¤ia salida"    , "Compa¤ia salida");
        lrRsv.SETRANGE ("Vuelo salida"       , "Vuelo salida");
        lrRsv.SETRANGE (TourOperador         , TourOperador);
        lrRsv.SETRANGE ("IATA destino salida", "IATA destino salida");
        lrRsv.SETFILTER("N§ Reserva"         , '<>%1', "N§ Reserva");
        IF lrRsv.ISEMPTY THEN
        BEGIN
          lrVueloAgr.RESET;
          lrVueloAgr.SETRANGE("N§ Agrupacion", pwAgrupacion);
          lrVueloAgr.SETRANGE(Fecha          , "Fecha salida");
          lrVueloAgr.SETRANGE(Compa¤ia       , "Compa¤ia salida");
          lrVueloAgr.SETRANGE(Vuelo          , "Vuelo salida");
          lrVueloAgr.SETRANGE(IATA           , "IATA destino salida");
          lrVueloAgr.SETRANGE(TourOperador   , TourOperador);
          IF lrVueloAgr.FINDFIRST THEN
            lrVueloAgr.DELETE;
        END;
      END;
    END;

    LOCAL PROCEDURE _CompruebaBajaHotelAgr@1100217005(pwAgrupacion@1100217001 : Integer;pwTipoTransfer@1100217000 : Integer);
    VAR
      lrRsv@1100217002 : Record 7009744;
      lrHotelAgr@1100217003 : Record 7009798;
    BEGIN
      // _CompruebaBajaHotelAgr

      //. @pwTipoTransfer, 0-Entrada, 1-Salida

      //. Comprobamos si quedan reservas en el hotel
      IF pwTipoTransfer = 0 THEN
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Agrupacion entrada");
        lrRsv.SETRANGE ("Agrupacion entrada" , pwAgrupacion);
        lrRsv.SETRANGE ("Fecha entrada"      , "Fecha entrada");
        lrRsv.SETRANGE ("Hotel entrada"      , "Hotel entrada");
        lrRsv.SETRANGE ("Compa¤ia entrada"   , "Compa¤ia entrada");
        lrRsv.SETRANGE ("Vuelo entrada"      , "Vuelo entrada");
        lrRsv.SETRANGE ("IATA origen entrada", "IATA origen entrada");
        lrRsv.SETFILTER("N§ Reserva"         , '<>%1', "N§ Reserva");
        IF lrRsv.ISEMPTY THEN
        BEGIN
          lrHotelAgr.RESET;
          lrHotelAgr.SETRANGE("N§ Agrupacion", pwAgrupacion);
          lrHotelAgr.SETRANGE(Fecha          , "Fecha entrada");
          lrHotelAgr.SETRANGE(Hotel          , "Hotel entrada");
          lrHotelAgr.SETRANGE(Compa¤ia       , "Compa¤ia entrada");
          lrHotelAgr.SETRANGE(Vuelo          , "Vuelo entrada");
          lrHotelAgr.SETRANGE(IATA           , "IATA origen entrada");
          IF lrHotelAgr.FINDFIRST THEN
            lrHotelAgr.DELETE;
        END;
      END
      ELSE
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Agrupacion salida");
        lrRsv.SETRANGE ("Agrupacion salida"  , pwAgrupacion);
        lrRsv.SETRANGE ("Fecha salida"       , "Fecha salida");
        lrRsv.SETRANGE ("Hotel salida"       , "Hotel salida");
        lrRsv.SETRANGE ("Compa¤ia salida"    , "Compa¤ia salida");
        lrRsv.SETRANGE ("Vuelo salida"       , "Vuelo salida");
        lrRsv.SETRANGE ("IATA destino salida", "IATA destino salida");
        lrRsv.SETFILTER("N§ Reserva"         , '<>%1', "N§ Reserva");
        IF lrRsv.ISEMPTY THEN
        BEGIN
          lrHotelAgr.RESET;
          lrHotelAgr.SETRANGE("N§ Agrupacion", pwAgrupacion);
          lrHotelAgr.SETRANGE(Fecha          , "Fecha salida");
          lrHotelAgr.SETRANGE(Hotel          , "Hotel salida");
          lrHotelAgr.SETRANGE(Compa¤ia       , "Compa¤ia salida");
          lrHotelAgr.SETRANGE(Vuelo          , "Vuelo salida");
          lrHotelAgr.SETRANGE(IATA           , "IATA destino salida");
          IF lrHotelAgr.FINDFIRST THEN
            lrHotelAgr.DELETE;
        END;
      END;
    END;

    LOCAL PROCEDURE _CompruebaBajaHorasAgr@1100217006(pwAgrupacion@1100217003 : Integer;pwTipoTransfer@1100217002 : Integer);
    VAR
      lrRsv@1100217000 : Record 7009744;
      lrHorasAgr@1100217001 : Record 7009800;
    BEGIN
      // _CompruebaBajaHorasAgr

      //. @pwTipoTransfer, 0-Entrada, 1-Salida

      //. Comprobamos si quedan reservas en el hotel
      IF pwTipoTransfer = 0 THEN
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Agrupacion entrada");
        lrRsv.SETRANGE ("Agrupacion entrada" , pwAgrupacion);
        lrRsv.SETRANGE ("Fecha entrada"      , "Fecha entrada");
        lrRsv.SETRANGE ("Hotel entrada"      , "Hotel entrada");
        lrRsv.SETRANGE ("Compa¤ia entrada"   , "Compa¤ia entrada");
        lrRsv.SETRANGE ("Vuelo entrada"      , "Vuelo entrada");
        lrRsv.SETRANGE ("IATA origen entrada", "IATA origen entrada");
        lrRsv.SETFILTER("N§ Reserva"         , '<>%1', "N§ Reserva");
        IF lrRsv.ISEMPTY THEN
        BEGIN
          lrHorasAgr.RESET;
          lrHorasAgr.SETRANGE("N§ Agrupacion", pwAgrupacion);
          lrHorasAgr.SETRANGE(Fecha          , "Fecha entrada");
          lrHorasAgr.SETRANGE(Hotel          , "Hotel entrada");
          lrHorasAgr.SETRANGE(Compa¤ia       , "Compa¤ia entrada");
          lrHorasAgr.SETRANGE(Vuelo          , "Vuelo entrada");
          lrHorasAgr.SETRANGE(IATA           , "IATA origen entrada");
          IF lrHorasAgr.FINDFIRST THEN
            lrHorasAgr.DELETE;
        END;
      END
      ELSE
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Agrupacion salida");
        lrRsv.SETRANGE ("Agrupacion salida"  , pwAgrupacion);
        lrRsv.SETRANGE ("Fecha salida"       , "Fecha salida");
        lrRsv.SETRANGE ("Hotel salida"       , "Hotel salida");
        lrRsv.SETRANGE ("Compa¤ia salida"    , "Compa¤ia salida");
        lrRsv.SETRANGE ("Vuelo salida"       , "Vuelo salida");
        lrRsv.SETRANGE ("IATA destino salida", "IATA destino salida");
        lrRsv.SETFILTER("N§ Reserva"         , '<>%1', "N§ Reserva");
        IF lrRsv.ISEMPTY THEN
        BEGIN
          lrHorasAgr.RESET;
          lrHorasAgr.SETRANGE("N§ Agrupacion", pwAgrupacion);
          lrHorasAgr.SETRANGE(Fecha          , "Fecha salida");
          lrHorasAgr.SETRANGE(Hotel          , "Hotel salida");
          lrHorasAgr.SETRANGE(Compa¤ia       , "Compa¤ia salida");
          lrHorasAgr.SETRANGE(Vuelo          , "Vuelo salida");
          lrHorasAgr.SETRANGE(IATA           , "IATA destino salida");
          IF lrHorasAgr.FINDFIRST THEN
            lrHorasAgr.DELETE;
        END;
      END;
    END;

    PROCEDURE acumulado_entrada@1();
    VAR
      rAcumZona@1103355000 : Record 7009793;
    BEGIN
      // acumulado_entrada

      rAcumZona.RESET;
      rAcumZona.SETRANGE(Fecha          , "Fecha entrada");
      rAcumZona.SETRANGE(Zona           , "Zona servicio entrada");
      rAcumZona.SETRANGE(TourOperador   , TourOperador);
      rAcumZona.SETRANGE("Tipo Transfer", rAcumZona."Tipo Transfer"::Entrada);
      IF rAcumZona.FINDFIRST THEN
      BEGIN
        rAcumZona.Refrescar := TRUE;
        rAcumZona.MODIFY;
      END
      ELSE
      BEGIN
        IF ("Fecha entrada" <> 0D) AND
           ("Zona servicio entrada" <> '') AND
           (TourOperador <> '') AND
           (Entrada = 1) THEN
        BEGIN
          //. Vamos a crear el registro de acumulado por zona
          CLEAR(rAcumZona);
          rAcumZona.Fecha           := "Fecha entrada";
          rAcumZona.Zona            := "Zona servicio entrada";
          rAcumZona.TourOperador    := TourOperador;
          rAcumZona."Tipo Transfer" := rAcumZona."Tipo Transfer"::Entrada;
          rAcumZona.Refrescar       := TRUE;
          rAcumZona.INSERT;
        END;
      END;

      //. Tambien marcamos el acumulado anterior
      rAcumZona.RESET;
      rAcumZona.SETRANGE(Fecha          , xRec."Fecha entrada");
      rAcumZona.SETRANGE(Zona           , xRec."Zona servicio entrada");
      rAcumZona.SETRANGE(TourOperador   , xRec.TourOperador);
      rAcumZona.SETRANGE("Tipo Transfer", rAcumZona."Tipo Transfer"::Entrada);
      IF rAcumZona.FINDFIRST THEN
      BEGIN
        rAcumZona.Refrescar := TRUE;
        rAcumZona.MODIFY;
      END;
    END;

    PROCEDURE acumulado_salida@3();
    VAR
      rAcumZona@1103355000 : Record 7009793;
    BEGIN
      // acumulado_salida

      rAcumZona.RESET;
      rAcumZona.SETRANGE(Fecha          , "Fecha salida");
      rAcumZona.SETRANGE(Zona           , "Zona servicio salida");
      rAcumZona.SETRANGE(TourOperador   , TourOperador);
      rAcumZona.SETRANGE("Tipo Transfer", rAcumZona."Tipo Transfer"::Salida);
      IF rAcumZona.FINDFIRST THEN
      BEGIN
        rAcumZona.Refrescar := TRUE;
        rAcumZona.MODIFY;
      END
      ELSE
      BEGIN
        IF ("Fecha salida" <> 0D) AND
           ("Zona servicio salida" <> '') AND
           (TourOperador <> '') AND
           (Salida = 1) THEN
        BEGIN
          //. Vamos a crear el registro de acumulado por zona
          CLEAR(rAcumZona);
          rAcumZona.Fecha           := "Fecha salida";
          rAcumZona.Zona            := "Zona servicio salida";
          rAcumZona.TourOperador    := TourOperador;
          rAcumZona."Tipo Transfer" := rAcumZona."Tipo Transfer"::Salida;
          rAcumZona.Refrescar       := TRUE;
          rAcumZona.INSERT;
        END;
      END;

      //. Tambien marcamos el acumulado anterior
      rAcumZona.RESET;
      rAcumZona.SETRANGE(Fecha          , xRec."Fecha salida");
      rAcumZona.SETRANGE(Zona           , xRec."Zona servicio salida");
      rAcumZona.SETRANGE(TourOperador   , xRec.TourOperador);
      rAcumZona.SETRANGE("Tipo Transfer", rAcumZona."Tipo Transfer"::Salida);
      IF rAcumZona.FINDFIRST THEN
      BEGIN
        rAcumZona.Refrescar := TRUE;
        rAcumZona.MODIFY;
      END;
    END;

    PROCEDURE EsTransferPrivado@1103355000(Periodo@1103355000 : Record 7009742) : Boolean;
    VAR
      lwOk@1103355002 : Boolean;
    BEGIN
      // EsTransferPrivado
      // Devuelve true si la reserva Transfer con el Periodo deviene en Transfer Privado

      CLEAR(lwOk);
      lwOk := Direccion = Periodo."Transfer Privado";
      lwOk := lwOk OR (Direccion = Direccion::Ambos);
      lwOk := lwOk OR (Periodo."Transfer Privado" = Periodo."Transfer Privado"::Ambos);
      lwOk := lwOk AND (Periodo."Transfer Privado" <> Periodo."Transfer Privado"::Ninguno);

      EXIT(lwOk);
    END;

    PROCEDURE GetNumeroCotizacion@1103355002() : Integer;
    VAR
      lrVinculo@1103355000 : Record 7009884;
    BEGIN
      // GetNumeroCotizacion

      lrVinculo.SETCURRENTKEY("Id Cotizacion", Delegacion, "N§ Interno", "N§ Periodo", Tipo);
      lrVinculo.SETRANGE (Delegacion  , Delegacion);
      lrVinculo.SETRANGE ("N§ Interno", "N§ Reserva");
      lrVinculo.SETRANGE (Tipo        , lrVinculo.Tipo::"Reserva transfer");

      IF lrVinculo.FINDFIRST THEN
        EXIT(lrVinculo."Id Cotizacion");

      EXIT(0);
    END;

    PROCEDURE LookUpCotizacion@1103355001();
    VAR
      lrCabCot@1103355000 : Record 7009871;
      lfCabCot@1103355001 : Form 7010038;
      lwNumCot@1103355002 : Integer;
    BEGIN
      // LookUpCotizacion

      lwNumCot := GetNumeroCotizacion;
      IF lwNumCot = 0 THEN
        EXIT;

      lrCabCot.FILTERGROUP(2);
      lrCabCot.SETRANGE (Id, lwNumCot);
      lrCabCot.FILTERGROUP(0);

      lfCabCot.SETTABLEVIEW(lrCabCot);
      lfCabCot.RUNMODAL;
    END;

    PROCEDURE GetHoraVueloSalida@1100253002() : Time;
    VAR
      lrVuelo@1100253000 : Record 7009754;
    BEGIN
      // GetHoraVueloSalida
      // $001

      CLEAR(lrVuelo);
      lrVuelo.SETRANGE(Fecha    , "Fecha salida");
      lrVuelo.SETRANGE(Compa¤ia , "Compa¤ia salida");
      lrVuelo.SETRANGE(Vuelo    , "Vuelo salida");
      lrVuelo.SETRANGE(Destino  , "IATA destino salida");
      lrVuelo.SETRANGE("Entrada/Salida", lrVuelo."Entrada/Salida"::Salida);
      IF lrVuelo.FINDFIRST THEN
        EXIT(lrVuelo."Hora Salida");
    END;

    PROCEDURE GetHoraVueloEntrada@1100253001() : Time;
    VAR
      lrVuelo@1100253000 : Record 7009754;
    BEGIN
      // GetHoraVueloEntrada

      CLEAR(lrVuelo);
      lrVuelo.SETRANGE(Fecha    , "Fecha entrada");
      lrVuelo.SETRANGE(Compa¤ia , "Compa¤ia entrada");
      lrVuelo.SETRANGE(Vuelo    , "Vuelo entrada");
      lrVuelo.SETRANGE(Origen   , "IATA origen entrada");
      lrVuelo.SETRANGE("Entrada/Salida", lrVuelo."Entrada/Salida"::Entrada);
      IF lrVuelo.FINDFIRST THEN
        EXIT(lrVuelo."Hora Entrada");
    END;

    PROCEDURE CheckContratoVenta@1100217001(VAR prContrato@1000000000 : Record 7009788;pwTouroperador@1100217001 : Code[10];pwFecha@1100217002 : Date;pwAeropuerto@1100217003 : Code[10];pwShowError@1100217004 : Boolean) : Boolean;
    BEGIN
      // CheckContratoVenta

      prContrato.RESET;
      prContrato.SETRANGE (TourOperador           , pwTouroperador);
      prContrato.SETFILTER("Fecha inicio contrato", '<=%1', pwFecha);
      prContrato.SETFILTER("Fecha final contrato" , '>=%1', pwFecha);
      //-$019IF pwAeropuerto <> '' THEN
      //-$019  lrContrato.SETRANGE ("OLD_Punto Origen/Destino" , pwAeropuerto);
      prContrato.SETRANGE (Comercializadora       , FALSE); //+$033
      prContrato.SETRANGE (Confirmado             , TRUE);
      IF NOT prContrato.FINDFIRST THEN
      BEGIN
        //-$019lrContrato.SETRANGE("OLD_Punto Origen/Destino", '');
        //-$019IF NOT lrContrato.FINDFIRST THEN
        //-$019BEGIN

        IF pwShowError THEN
          ERROR(Text023, pwFecha, pwTouroperador)
        ELSE
          EXIT(FALSE);
        //-$019END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CheckPrecioVenta@1000000000(prContrato@1000000000 : Record 7009788;pwShowError@1000000009 : Boolean;pwAeropuerto@1000000001 : Code[10];pwHotel@1000000008 : Code[20];pwFechaServicio@1000000010 : Date;pwPersonas@1000000011 : Integer;pwTipoTransfer@1000000012 : 'Compartido,Privado,Deluxe';pwTipoVehiculoSolicitado@1000000013 : Code[10];pwTipoOperacion@1000000014 : Integer) : Boolean;
    VAR
      lrPrecios@1000000007 : Record 7009790;
      lrAeropuerto@1000000006 : Record 7009704;
      lrHotel@1000000004 : Record 7009724;
      lrZonas@1000000005 : Record 7009791;
      lwOrigen@1000000003 : Code[10];
      lwDestino@1000000002 : Code[10];
    BEGIN
      // CheckPrecioVenta

      //. Esta funcion se llama incluso cuando la reserva transfer no esta creada

      IF (pwAeropuerto = '') THEN
        EXIT;

      //+$020
      //. Comprobar que el aeropuerto exista
      CLEAR(lwOrigen);

      lrAeropuerto.RESET;
      IF lrAeropuerto.GET(pwAeropuerto) THEN
      BEGIN
        //. Comprobar que el aeropuerto tenga la zona fisica configurada
        IF (lrAeropuerto."Zona fisica" <> '') THEN
        BEGIN
          //. Comprobar que la zona del aeropuerto este configurada en el contrato
          lrZonas.RESET;
          lrZonas.SETRANGE(Contrato       , prContrato."N§ Contrato Venta");
          lrZonas.SETRANGE("Tipo contrato", lrZonas."Tipo contrato"::Venta);
          lrZonas.SETRANGE("Zona fisica"  , lrAeropuerto."Zona fisica");
          IF lrZonas.FINDFIRST THEN
            lwOrigen := lrZonas.Zona
          ELSE
          BEGIN
            IF pwShowError THEN
              ERROR(Text029, lrAeropuerto."Zona fisica", prContrato."N§ Contrato Venta")
            ELSE
              EXIT(FALSE);
          END;
        END
        ELSE
        BEGIN
          IF pwShowError THEN
            ERROR(Text028, pwAeropuerto)
          ELSE
            EXIT(FALSE);
        END;
      END
      ELSE
      BEGIN
        IF pwShowError THEN
          ERROR(Text026, lrAeropuerto.FIELDNAME(Aeropuerto), pwAeropuerto)
        ELSE
          EXIT(FALSE);
      END;

      //. Con la zona del hotel vamos a obtener el destino de la ruta
      CLEAR(lwDestino);

      lrHotel.GET(pwHotel);

      lrZonas.RESET;
      lrZonas.SETRANGE(Contrato       , prContrato."N§ Contrato Venta");
      lrZonas.SETRANGE("Tipo contrato", lrZonas."Tipo contrato"::Venta);
      lrZonas.SETRANGE("Zona fisica"  , lrHotel."Zona Fisica");
      IF lrZonas.FINDFIRST THEN
        lwDestino := lrZonas.Zona
      ELSE
      BEGIN
        IF pwShowError THEN
          ERROR(Text029, lrHotel."Zona Fisica", prContrato."N§ Contrato Venta")
        ELSE
          EXIT(FALSE);
      END;

      lrPrecios.RESET;
      lrPrecios.SETRANGE ("N§ Contrato"  , prContrato."N§ Contrato Venta");
      lrPrecios.SETRANGE ("Codigo precio", lrPrecios."Codigo precio"::"Precio Base");
      lrPrecios.SETRANGE (Origen         , lwOrigen);
      lrPrecios.SETRANGE (Destino        , lwDestino);
      lrPrecios.SETFILTER("Fecha desde"  , '<=%1', pwFechaServicio);
      lrPrecios.SETFILTER("Fecha hasta"  , '>=%1', pwFechaServicio);
      lrPrecios.SETFILTER("Rango desde"  , '<=%1', pwPersonas);
      lrPrecios.SETFILTER("Rango hasta"  , '>=%1', pwPersonas);
      lrPrecios.SETRANGE("Tipo Traslado" , pwTipoTransfer); // +$027
      CASE pwTipoOperacion OF
        0:
        BEGIN
          lrPrecios.SETFILTER("Tipo operacion", '%1|%2', lrPrecios."Tipo operacion"::Ambos,
                                                         lrPrecios."Tipo operacion"::Charter);
        END;
        1:
        BEGIN
          lrPrecios.SETFILTER("Tipo operacion", '%1|%2', lrPrecios."Tipo operacion"::Ambos,
                                                         lrPrecios."Tipo operacion"::Regular);
        END;
      END;

      IF (pwTipoVehiculoSolicitado <> '') THEN
        lrPrecios.SETRANGE("Tipo vehiculo", pwTipoVehiculoSolicitado);

      IF NOT lrPrecios.FINDFIRST THEN
      BEGIN
        lrPrecios.SETRANGE (Destino, lwOrigen);
        lrPrecios.SETRANGE (Origen , lwDestino);
        IF NOT lrPrecios.FINDFIRST THEN
        BEGIN
          IF pwShowError THEN
            ERROR(Text027, prContrato."N§ Contrato Venta")
          ELSE
            EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE FillServicePerson@1100217002();
    VAR
      lrPerson@1100217000 : Record 7009917;
    BEGIN
      // FillServicePerson

      //. Funcion para crear los registros de personas para Traslados en destino

      lrPerson.RESET;
      lrPerson.SETRANGE(Delegacion    , Delegacion);
      lrPerson.SETRANGE("Num. Reserva", "N§ Interno");
      lrPerson.SETRANGE("ID Servicio" , "N§ Periodo");
      lrPerson.SETRANGE("ID Persona"  , "N§ Acompa¤ante");
      IF lrPerson.FINDFIRST THEN
      BEGIN
        lrPerson.Agrupacion := "Agrupacion entrada";
        lrPerson.MODIFY;
      END;
    END;

    PROCEDURE ManagePersonType@1100217003();
    BEGIN
      // _ManagePersonType

      rParPer.FINDFIRST;
      IF "Tipo Persona" = rParPer."Codigo Adulto" THEN
      BEGIN
        "N§ Personas" := 1;
        "N§ Ni¤os"    := 0;
        "N§ Bebes"    := 0;
      END;

      IF "Tipo Persona" = rParPer."Codigo Ni¤o" THEN
      BEGIN
        "N§ Personas" := 1;
        "N§ Ni¤os"    := 1;
        "N§ Bebes"    := 0;
      END;

      IF "Tipo Persona" = rParPer."Codigo Infant" THEN
      BEGIN
        "N§ Personas" := 0;
        "N§ Ni¤os"    := 0;
        "N§ Bebes"    := 1;
      END;
    END;

    PROCEDURE EsRepresentanteCredito@1100253004() : Boolean;
    VAR
      lrRep@1100253000 : Record 7010241;
    BEGIN
      // EsRepresentanteCredito
      // +$024
      CLEAR(lrRep);
      IF lrRep.GET("Guia Venta") THEN
        EXIT(lrRep."Trabaja a credito")
      ELSE //. Si no tiene REP entendemos que es una reserva de credito
        EXIT(TRUE);
    END;

    PROCEDURE CheckPermiso@1000000001();
    BEGIN
      // +$025
      IF "Reserva online" THEN
        cFunSeg.TienePermiso('TRF-ONL-MAN', TRUE);
    END;

    LOCAL PROCEDURE _UltimaFechaCambio@1100253006();
    VAR
      lrCurrExch@1100253000 : Record 330;
    BEGIN
      // _UltimaFechaCambio

      //. Creada por : AJS
      //. Creada dia : 09/05/2011
      //. Rellenar el campo Fecha Cambio con la ultima fecha de cambio registrada en contabilidad

      IF "C¢d. divisa" = '' THEN
        EXIT;

      IF ("N§ liquidacion GV" <> 0) THEN
        EXIT;

      IF "Fecha cambio" <> 0D THEN
        EXIT;

      lrCurrExch.RESET;
      lrCurrExch.SETRANGE ("Currency Code", "C¢d. divisa");
      lrCurrExch.SETFILTER("Starting Date", '<=%1', "Fecha Venta");
      lrCurrExch.FINDLAST;

      "Fecha cambio" := lrCurrExch."Starting Date";
    END;

    PROCEDURE TipoCambioDivisa@8() : Decimal;
    VAR
      lwFecha@1103355002 : Date;
      rCamb@1000000000 : Record 330;
    BEGIN
      // TipoCambioDivisa

      rCamb.RESET;
      rCamb.SETRANGE ("Currency Code"  , "C¢d. divisa");
      rCamb.SETFILTER("Starting Date", '<=%1', "Fecha cambio");
      rCamb.FINDLAST;

      EXIT(rCamb."Relational Exch. Rate Amount")
    END;

    PROCEDURE calcula_comisionGV@22();
    VAR
      lcLiquidacion@1100253000 : Codeunit 7010144;
      lrTO@1100253001 : Record 7009717;
    BEGIN
      // calcula_comisionGV

      //. Buscamos el porcentaje de comision de Guia Venta

      "Precio Comision Guia Venta"    := 0;
      "Comision Guia Venta"           := 0;

      lcLiquidacion.Comision_Reserva_Transfer(Rec, "Comision Guia Venta", "Precio Comision Guia Venta")
    END;

    PROCEDURE calcular_reserva@2();
    VAR
      lwIngresoAnterior@1100217000 : Decimal;
    BEGIN
      // calcular_reserva

      "Ingreso reserva neto" := 0;

      busca_importes_netos;

      calcula_comisionGV;

      MODIFY;
    END;

    PROCEDURE busca_importes_netos@6();
    VAR
      lrCli@1103355002 : Record 18;
      lrIVAVta@1103355003 : Record 325;
      lrContrato@1000000000 : Record 7009788;
      lwIVA@1100253000 : Decimal;
    BEGIN
      // busca_importes_netos

      lrContrato.RESET;
      lrContrato.SETRANGE (TourOperador           , TourOperador);
      lrContrato.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha entrada");
      lrContrato.SETFILTER("Fecha final contrato" , '>=%1', "Fecha entrada");
      lrContrato.SETRANGE (Comercializadora       , FALSE); //+$033
      lrContrato.SETRANGE (Confirmado             , TRUE);
      IF lrContrato.FINDFIRST THEN
      BEGIN
        lrCli.GET(lrContrato.Cliente);

        lrIVAVta.GET(lrCli."VAT Bus. Posting Group", lrContrato."Gr. Registro IVA Producto");
        lwIVA := 1 + ROUND(lrIVAVta."VAT+EC %" / 100);
        "Ingreso reserva neto"      := ROUND("Ingreso reserva" / lwIVA);
      END;
    END;

    PROCEDURE CalcReembNeto@1000000002();
    VAR
      lrCli@1103355002 : Record 18;
      lrIVAVta@1103355003 : Record 325;
      lwIVA@1100253000 : Decimal;
      prRsv@1000000001 : Record 7009744;
      lrContrato@1000000002 : Record 7009788;
    BEGIN
      // CalcReembNeto

      lrContrato.RESET;
      lrContrato.SETRANGE (TourOperador           , TourOperador);
      lrContrato.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha entrada");
      lrContrato.SETFILTER("Fecha final contrato" , '>=%1', "Fecha entrada");
      lrContrato.SETRANGE (Comercializadora       , FALSE); //+$033
      lrContrato.SETRANGE (Confirmado             , TRUE);
      IF lrContrato.FINDFIRST THEN
      BEGIN
        lrCli.GET(lrContrato.Cliente);

        lrIVAVta.GET(lrCli."VAT Bus. Posting Group", lrContrato."Gr. Registro IVA Producto");
        lwIVA := 1 + ROUND(lrIVAVta."VAT+EC %" / 100);
        "Importe Reembolsado Neto" := ROUND("Importe Reembolsado"  / lwIVA);
      END;
    END;

    LOCAL PROCEDURE _CheckPrecioEntrada@1000000003();
    VAR
      lrContrato@1000000000 : Record 7009788;
      lrCab@1000000001 : Record 7009741;
      lwShowError@1000000002 : Boolean;
    BEGIN
      //. _CheckPrecioEntrada

      lwShowError := (NOT "Modificacion importacion") AND GUIALLOWED;

      CheckContratoVenta(lrContrato, "TourOperador facturacion", "Fecha entrada", '', lwShowError);

      lrCab.GET(Delegacion, "N§ Interno");
      CheckPrecioVenta(lrContrato, lwShowError, "IATA destino entrada", "Hotel entrada", "Fecha entrada", _GetPersonasReserva,
                       "Servicio transfer entrada", "Tipo vehiculo solicitado", lrCab."Tipo Operacion");
    END;

    LOCAL PROCEDURE _CheckPrecioSalida@1000000004();
    VAR
      lrContrato@1000000001 : Record 7009788;
      lrCab@1000000000 : Record 7009741;
      lwShowError@1000000002 : Boolean;
    BEGIN
      //. _CheckPrecioSalida

      lwShowError := (NOT "Modificacion importacion") AND GUIALLOWED;

      CheckContratoVenta(lrContrato, "TourOperador facturacion", "Fecha salida", '', lwShowError);

      lrCab.GET(Delegacion, "N§ Interno");
      CheckPrecioVenta(lrContrato, lwShowError, "IATA origen salida", "Hotel salida", "Fecha salida", _GetPersonasReserva,
                       "Servicio transfer salida", "Tipo vehiculo solicitado", lrCab."Tipo Operacion");
    END;

    LOCAL PROCEDURE _GetPersonasReserva@1000000006() : Integer;
    VAR
      lrRsv@1000000000 : Record 7009744;
    BEGIN
      // _GetPersonasReserva

      //. Funcion que devuelve el numero de adultos + ni¤os de una reserva

      rParPer.FINDFIRST;

      lrRsv.RESET;
      lrRsv.SETRANGE (Delegacion    , Delegacion);
      lrRsv.SETRANGE ("N§ Interno"  , "N§ Interno");
      lrRsv.SETFILTER("Tipo Persona", '<>%1', rParPer."Codigo Infant");
      EXIT(lrRsv.COUNT);
    END;

    PROCEDURE UsuarioCreacion@1000000005() : Text[50];
    VAR
      lrCab@1000000000 : Record 7009741;
    BEGIN
      // UsuarioCreacion

      IF lrCab.GET(Delegacion, "N§ Interno") THEN
        EXIT(lrCab.Usuario);
    END;

    BEGIN
    {
      $001 JPT 24/05/12 CNT-CAR-12004 / TRA-12 Definition of transfer pick-up schedule

      $002 AJS 10102012 Cuando se modifica el campo "Transfer privado" pedir si hay que aplicar el mismo cambio a todas las personas

      $003 AJS 16012013 Cuando se actualizan los campos de agrupacion comprobamos si hay que hacer cambios en las tablas que
                        dependen de agrupacion

      $004 AJS 11042013 Cuando se modifica el hotel o el vuelo de una reserva agrupada hay que actualizar las tablas de la agrupacion

      $005 AJS 16052013 Elimino la pregunta para mantener el hotel de entrada/salida cuando se hace un cambio desde el
                        periodo, era para un caso muy extra¤o que no se ha vuelto a presentar

      $006 AJS 13062013 Incluir informacion de bono y agrupacion en el mensaje de error

      $007 AJS 28112013 Cambio el modo de gestionar los campos de soporte al tipo de persona

      $008 AJS 10122013 Cuando se rellene la agrupacion se verifica que la zona este rellenada

      $009 AJS 15022014 Nuevo campo "Fecha creacion"

      $010 AJS 08042014 Modificar los campos "Tipo transfer entrada" y "Tipo transfer salida" para incluir la opcion Maritimo

      $011 AJS 08042014 Nuevo campo "Traslado en destino" para separar estos servicios de los transfers IN/OUT

      $012 AJS 09042014 Al validar el campo agrupacion hay que verificar que no se mezclen traslados en destino con traslados in/out

      $013 AJS 09042014 El numero de agrupacion tiene que viajar al registro de traslado en destino

      $015 AJS 14042014 La tabla elementos transportar solo tiene que servir para los suplementos

      $016 AJS 28042014 Nueva clave para los campos calculados de traslados en destino

      $017 AJS 29052014 Separar las marcas de Transfer privado para tenerlas por llegada/salida

      $018 AJS 09062014 CNT-OC-14046, Nuevo campo "Tipo vehiculo solicitado"

      $019 AJS 10062014 CNT-OC-14046, El contrato de venta ya no va por aeropuerto

      $020 MNC 02072014 CNT-LP-14010. Amplio condiciones CheckContratoVenta a si tiene precio

      $021 AJS 22072014 Paso el codigo de busqueda de precio a una funcion separada y hago que la funcion CheckContratoVenta
                        retorne el contrato encontrado

      $022 MNC 22072014 CNT-LP-14054 No se pueden usar TTOO bloqueados

      $023 ARM 16092014 CNT-CAR-14082 Nuevo campo canal venta

      $024 ARM 24092014 CNT-CAR-14063 Nueva funci¢n Esrepresentanteacredito

      $025 ARM 25092014 CNT-CAR-14063 Control actualizaci¢n reservas online

      $026 ARM 29092014 CNT-CAR-14063 Se borra el detalle de cobros de la reserva al borrar la reserva

      $027 ARM 29092014 CNT-CAR-14063 FIltrado de precios por el campo Tipo Traslado con las opciones Regular,Privado y deluxe

      $028 AJS 21102014 Cuando se cambian los campos Servicio transfer hay que actualizar las marcas de Transfer privado en todas
                        las reservas

      $029 AJS 21102014 Cuando se hacen cambios directamente sobre la reserva transfer comprobamos contrato y precios

      $030 AJS 28102014 Amplio el campo Nombre a Text50

      $031 AJS 15012015 No dejamos cambiar la fecha de una reserva si ya tiene servicio asignado

      $032 ARM 02032015 CNT-OC-14093 A¤adido cmpo agrupaci¢n entrada o salida en claves 7 y 8

      $033 AJS 13032015 CNT-CAR-14096, Modificar la funcion de busqueda de contratos para que ignore los contratos de comercializadora

      $034 AJS 04052015 Mejorar el mensaje al no poder cambiar el servicio venta

      $035 AJS 12052015 Nueva funcion UsuarioCreacion para mostrar el usuario que cre¢ la reserva

      $036 ARM 05062015 CNT-OC-14122 Cambios en servicio transfer llegada y salida
    }
    END.
  }
}
