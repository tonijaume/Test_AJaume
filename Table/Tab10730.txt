OBJECT Table 10730 Gen. Prod. Post. Group Buffer
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVES6.00.01;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    CaptionML=[ENU=Gen. Prod. Post. Group Buffer;
               ESP=Mem. grupo contable producto];
    LookupFormID=Form313;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ESP=C¢digo];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 3   ;   ;Exclude from 349    ;Boolean       ;CaptionML=[ENU=Exclude from 349;
                                                              ESP=Excluir de 349] }
    { 4   ;   ;Non Deduct. Prod. Post. Group;Boolean;
                                                   CaptionML=[ENU=Non Deduct. Prod. Post. Group;
                                                              ESP=Grupo reg. prod. no deduc.] }
    { 5   ;   ;Rev. Charge Prod. Post. Group;Boolean;
                                                   CaptionML=[ENU=Rev. Charge Prod. Post. Group;
                                                              ESP=Grupo reg. prod. revers.] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      SelectedGPPG@1100000 : Record 10731;
      NonDeductGPPG340@1100001 : Record 10733;
      RevChargeGPPG340@1100002 : Record 10734;

    PROCEDURE SetGPPGSelectionMultiple@1100000(VAR SelectedGPPGText@1100000 : Text[1024];VAR FilterString@1100004 : Text[1024]);
    VAR
      GenProdPostGroup@1100001 : Record 251;
      TempGPPGBuffer@1100002 : TEMPORARY Record 10730;
      GPPGSelectionMultiple@1100003 : Form 10735;
    BEGIN
      CLEAR(GPPGSelectionMultiple);
      IF GenProdPostGroup.FIND('-') THEN
        REPEAT
          GPPGSelectionMultiple.InsertGPPGSelBuf(
            SelectedGPPG.GET(GenProdPostGroup.Code),
            GenProdPostGroup.Code,GenProdPostGroup.Description);
        UNTIL GenProdPostGroup.NEXT = 0;

      GPPGSelectionMultiple.LOOKUPMODE := TRUE;
      IF GPPGSelectionMultiple.RUNMODAL = ACTION::LookupOK THEN BEGIN
        GPPGSelectionMultiple.GetGPPGSelBuf(TempGPPGBuffer);
        SetGPPGSelection(SelectedGPPGText,TempGPPGBuffer,FilterString);
      END;
    END;

    PROCEDURE SetGPPGSelection@1100001(VAR SelectedGPPGText@1100003 : Text[1024];VAR GPPGSelectionBuf@1100004 : Record 10730;VAR FilterString@1100000 : Text[1024]);
    BEGIN
      SelectedGPPG.DELETEALL;
      SelectedGPPGText := '';
      GPPGSelectionBuf.SETRANGE("Exclude from 349",TRUE);
      IF GPPGSelectionBuf.FIND('-') THEN
        REPEAT
          SelectedGPPG.Code := GPPGSelectionBuf.Code;
          SelectedGPPG.Description := GPPGSelectionBuf.Description;
          SelectedGPPG.INSERT;
          AddGPPGCodeToText(SelectedGPPG.Code,SelectedGPPGText,FilterString);
        UNTIL GPPGSelectionBuf.NEXT = 0;
    END;

    PROCEDURE AddGPPGCodeToText@1100002(GPPGCode@1100000 : Code[20];VAR Text@1100001 : Text[1024];VAR FilterString@1100002 : Text[1024]);
    BEGIN
      IF Text = '' THEN BEGIN
        Text := GPPGCode;
        FilterString := STRSUBSTNO('<>%1',Text);
      END ELSE
        IF (STRLEN(Text) + STRLEN(GPPGCode)) <= (MAXSTRLEN(Text) - 4) THEN BEGIN
          Text := Text + ';' + GPPGCode;
          FilterString := FilterString + '&<>' + GPPGCode;
        END ELSE
          Text := Text + ';...';
    END;

    PROCEDURE GetGPPGSelectionText@1100004() : Text[1024];
    VAR
      SelectedGPPG@1100000 : Record 10731;
      SelectedGPPGText@1100001 : Text[1024];
    BEGIN
      WITH SelectedGPPG DO BEGIN
        IF FIND('-') THEN
          REPEAT
            AddGPPGCodeToText(Code,SelectedGPPGText,SelectedGPPGText);
          UNTIL NEXT = 0;
      END;
      EXIT(SelectedGPPGText);
    END;

    PROCEDURE SetNonDedGPPGSelectMultiple340@1100005(VAR SelectedGPPGText@1100000 : Text[1024];VAR FilterString@1100001 : Text[1024]);
    VAR
      GenProdPostGroup@1100002 : Record 251;
      TempGPPGBuffer@1100003 : TEMPORARY Record 10730;
      GPPGNonDeductSelectMul340@1100004 : Form 10737;
    BEGIN
      CLEAR(GPPGNonDeductSelectMul340);
      IF GenProdPostGroup.FINDFIRST THEN
        REPEAT
         GPPGNonDeductSelectMul340.InsertGPPGSelBuf(
            NonDeductGPPG340.GET(GenProdPostGroup.Code),
            GenProdPostGroup.Code,GenProdPostGroup.Description);
        UNTIL GenProdPostGroup.NEXT = 0;

      GPPGNonDeductSelectMul340.LOOKUPMODE := TRUE;
      IF GPPGNonDeductSelectMul340.RUNMODAL = ACTION::LookupOK THEN BEGIN
        GPPGNonDeductSelectMul340.GetGPPGSelBuf(TempGPPGBuffer);
        SetNonDeductGPPGSelection340(SelectedGPPGText,TempGPPGBuffer,FilterString);
      END;
    END;

    PROCEDURE SetRevChgGPPGSelectMultiple340@1100006(VAR SelectedGPPGText@1100000 : Text[1024];VAR FilterString@1100001 : Text[1024]);
    VAR
      GenProdPostGroup@1100002 : Record 251;
      TempGPPGBuffer@1100003 : TEMPORARY Record 10730;
      RevChargeGPPGSelectMul@1100004 : Form 10738;
    BEGIN
      CLEAR(RevChargeGPPGSelectMul);
      IF GenProdPostGroup.FINDFIRST THEN
        REPEAT
          RevChargeGPPGSelectMul.InsertGPPGSelBuf(
           RevChargeGPPG340.GET(GenProdPostGroup.Code),
            GenProdPostGroup.Code,GenProdPostGroup.Description);
        UNTIL GenProdPostGroup.NEXT = 0;

      RevChargeGPPGSelectMul.LOOKUPMODE := TRUE;
      IF RevChargeGPPGSelectMul.RUNMODAL = ACTION::LookupOK THEN BEGIN
        RevChargeGPPGSelectMul.GetGPPGSelBuf(TempGPPGBuffer);
        SetRevChargeGPPGSelection340(SelectedGPPGText,TempGPPGBuffer,FilterString);
      END;
    END;

    PROCEDURE SetNonDeductGPPGSelection340@1100007(VAR SelectedGPPGText@1100000 : Text[1024];VAR GPPGSelectionBuf@1100001 : Record 10730;VAR FilterString@1100002 : Text[1024]);
    BEGIN
      NonDeductGPPG340.DELETEALL;
      SelectedGPPGText := '';
      GPPGSelectionBuf.SETRANGE(GPPGSelectionBuf."Non Deduct. Prod. Post. Group",TRUE);
      IF GPPGSelectionBuf.FINDFIRST THEN
        REPEAT
          NonDeductGPPG340.Code := GPPGSelectionBuf.Code;
          NonDeductGPPG340.Description := GPPGSelectionBuf.Description;
          NonDeductGPPG340.INSERT;
          AddGPPGCodeToText(NonDeductGPPG340.Code,SelectedGPPGText,FilterString);
        UNTIL GPPGSelectionBuf.NEXT = 0;
    END;

    PROCEDURE SetRevChargeGPPGSelection340@1100008(VAR SelectedGPPGText@1100000 : Text[1024];VAR GPPGSelectionBuf@1100001 : Record 10730;VAR FilterString@1100002 : Text[1024]);
    BEGIN
      RevChargeGPPG340.DELETEALL;
      SelectedGPPGText := '';
      GPPGSelectionBuf.SETRANGE("Rev. Charge Prod. Post. Group",TRUE);
      IF GPPGSelectionBuf.FINDFIRST THEN
        REPEAT
          RevChargeGPPG340.Code := GPPGSelectionBuf.Code;
          RevChargeGPPG340.Description := GPPGSelectionBuf.Description;
          RevChargeGPPG340.INSERT;
          AddRevGPPGCodeToText340(RevChargeGPPG340.Code,SelectedGPPGText,FilterString);
        UNTIL GPPGSelectionBuf.NEXT = 0;
    END;

    PROCEDURE AddRevGPPGCodeToText340@1100009(GPPGCode@1100000 : Code[20];VAR Text@1100001 : Text[1024];VAR FilterString@1100002 : Text[1024]);
    BEGIN
      IF Text = '' THEN BEGIN
        Text := GPPGCode;
        FilterString := STRSUBSTNO('%1',Text);
      END ELSE
        IF (STRLEN(Text) + STRLEN(GPPGCode)) <= (MAXSTRLEN(Text) - 4) THEN BEGIN
          Text := Text + ';' + GPPGCode;
          FilterString := FilterString + '&<>' + GPPGCode;
        END ELSE
          Text := Text + ';...';
    END;

    BEGIN
    END.
  }
}
