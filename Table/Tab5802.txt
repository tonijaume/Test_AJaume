OBJECT Table 5802 Value Entry
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES6.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Value Entry;
               ESP=Movimiento valor];
    LookupFormID=Form5802;
    DrillDownFormID=Form5802;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ESP=N§ mov.] }
    { 2   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto] }
    { 3   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 4   ;   ;Item Ledger Entry Type;Option      ;CaptionML=[ENU=Item Ledger Entry Type;
                                                              ESP=Tipo mov. producto];
                                                   OptionCaptionML=[ENU="Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ";
                                                                    ESP="Compra,Venta,Ajust. positivo,Ajust. negativo,Transferencia,Consumo,Salida, "];
                                                   OptionString=[Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ] }
    { 5   ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Item)) Item;
                                                   CaptionML=[ENU=Source No.;
                                                              ESP=C¢d. procedencia mov.] }
    { 6   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento] }
    { 7   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 8   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n] }
    { 9   ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ESP=Grupo contable existencias] }
    { 10  ;   ;Source Posting Group;Code10        ;TableRelation=IF (Source Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Source Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Source Type=CONST(Item)) "Inventory Posting Group";
                                                   CaptionML=[ENU=Source Posting Group;
                                                              ESP=Grupo contable origen] }
    { 11  ;   ;Item Ledger Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Item Ledger Entry No.;
                                                              ESP=N§ mov. producto] }
    { 12  ;   ;Valued Quantity     ;Decimal       ;CaptionML=[ENU=Valued Quantity;
                                                              ESP=Cdad. valorada];
                                                   DecimalPlaces=0:5 }
    { 13  ;   ;Item Ledger Entry Quantity;Decimal ;CaptionML=[ENU=Item Ledger Entry Quantity;
                                                              ESP=Cantidad mov. producto];
                                                   DecimalPlaces=0:5 }
    { 14  ;   ;Invoiced Quantity   ;Decimal       ;CaptionML=[ENU=Invoiced Quantity;
                                                              ESP=Cantidad facturada];
                                                   DecimalPlaces=0:5 }
    { 15  ;   ;Cost per Unit       ;Decimal       ;CaptionML=[ENU=Cost per Unit;
                                                              ESP=Coste por ud.];
                                                   AutoFormatType=2 }
    { 17  ;   ;Sales Amount (Actual);Decimal      ;CaptionML=[ENU=Sales Amount (Actual);
                                                              ESP=Importe ventas (Real)];
                                                   AutoFormatType=1 }
    { 22  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              ESP=C¢d. vendedor/comprador] }
    { 23  ;   ;Discount Amount     ;Decimal       ;CaptionML=[ENU=Discount Amount;
                                                              ESP=Importe dto.];
                                                   AutoFormatType=1 }
    { 24  ;   ;User ID             ;Code20        ;TableRelation=User;
                                                   OnLookup=VAR
                                                              LoginMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              LoginMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              ESP=Id. usuario] }
    { 25  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ESP=C¢d. origen] }
    { 28  ;   ;Applies-to Entry    ;Integer       ;CaptionML=[ENU=Applies-to Entry;
                                                              ESP=Liq. por n§ orden] }
    { 33  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ESP=C¢d. dimensi¢n global 1];
                                                   CaptionClass='1,1,1' }
    { 34  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ESP=C¢d. dimensi¢n global 2];
                                                   CaptionClass='1,1,2' }
    { 41  ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              ESP=Tipo procedencia mov.];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Item";
                                                                    ESP=" ,Cliente,Proveedor,Producto"];
                                                   OptionString=[ ,Customer,Vendor,Item] }
    { 43  ;   ;Cost Amount (Actual);Decimal       ;CaptionML=[ENU=Cost Amount (Actual);
                                                              ESP=Importe coste (Real)];
                                                   AutoFormatType=1 }
    { 45  ;   ;Cost Posted to G/L  ;Decimal       ;CaptionML=[ENU=Cost Posted to G/L;
                                                              ESP=Coste regis. en contab.];
                                                   AutoFormatType=1 }
    { 46  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ESP=C¢d. auditor¡a] }
    { 47  ;   ;Drop Shipment       ;Boolean       ;CaptionML=[ENU=Drop Shipment;
                                                              ESP=Env¡o directo] }
    { 48  ;   ;Journal Batch Name  ;Code10        ;TestTableRelation=No;
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              ESP=Nombre secci¢n diario] }
    { 57  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ESP=Grupo contable negocio] }
    { 58  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ESP=Grupo contable producto] }
    { 60  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ESP=Fecha emisi¢n documento] }
    { 61  ;   ;External Document No.;Code20       ;CaptionML=[ENU=External Document No.;
                                                              ESP=N§ documento externo] }
    { 68  ;   ;Cost Amount (Actual) (ACY);Decimal ;CaptionML=[ENU=Cost Amount (Actual) (ACY);
                                                              ESP=Importe coste (Real) (DA)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 70  ;   ;Cost Posted to G/L (ACY);Decimal   ;CaptionML=[ENU=Cost Posted to G/L (ACY);
                                                              ESP=Coste regis. en contab. (DA)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 72  ;   ;Cost per Unit (ACY) ;Decimal       ;CaptionML=[ENU=Cost per Unit (ACY);
                                                              ESP=Coste por unidad (DA)];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 79  ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento];
                                                   OptionCaptionML=[ENU=" ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo";
                                                                    ESP=" ,Albar n venta,Factura venta,Recep. devol. ventas,Abono venta,Albar n compra,Factura compra,Env¡o devoluci¢n compra,Abono compra,Env¡o transfer.,Recep. transfer.,Servicio regis.,Factura ventas,Abono ventas"];
                                                   OptionString=[ ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo] }
    { 80  ;   ;Document Line No.   ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              ESP=N§ l¡n. documento] }
    { 98  ;   ;Expected Cost       ;Boolean       ;CaptionML=[ENU=Expected Cost;
                                                              ESP=Coste previsto] }
    { 99  ;   ;Item Charge No.     ;Code20        ;TableRelation="Item Charge";
                                                   CaptionML=[ENU=Item Charge No.;
                                                              ESP=N§ cargo prod.] }
    { 100 ;   ;Valued By Average Cost;Boolean     ;CaptionML=[ENU=Valued By Average Cost;
                                                              ESP=Valorado a coste medio] }
    { 102 ;   ;Partial Revaluation ;Boolean       ;CaptionML=[ENU=Partial Revaluation;
                                                              ESP=Revalorizaci¢n parcial] }
    { 103 ;   ;Inventoriable       ;Boolean       ;CaptionML=[ENU=Inventoriable;
                                                              ESP=Inventariable] }
    { 104 ;   ;Valuation Date      ;Date          ;CaptionML=[ENU=Valuation Date;
                                                              ESP=Fecha valoraci¢n] }
    { 105 ;   ;Entry Type          ;Option        ;CaptionML=[ENU=Entry Type;
                                                              ESP=Tipo movimiento];
                                                   OptionCaptionML=[ENU=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance;
                                                                    ESP=Coste directo,Revalorizaci¢n,Redondeo,Coste indirecto,Desviaci¢n];
                                                   OptionString=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance;
                                                   Editable=No }
    { 106 ;   ;Variance Type       ;Option        ;CaptionML=[ENU=Variance Type;
                                                              ESP=Tipo desviaci¢n];
                                                   OptionCaptionML=[ENU=" ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead,Subcontracted";
                                                                    ESP=" ,Compras,Materiales,Capacidad,Gastos gen. capacidad,Gastos gen. fabr.,Subcontrataci¢n"];
                                                   OptionString=[ ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead,Subcontracted];
                                                   Editable=No }
    { 148 ;   ;Purchase Amount (Actual);Decimal   ;CaptionML=[ENU=Purchase Amount (Actual);
                                                              ESP=Importe compra (actual)];
                                                   AutoFormatType=1 }
    { 149 ;   ;Purchase Amount (Expected);Decimal ;CaptionML=[ENU=Purchase Amount (Expected);
                                                              ESP=Importe compra (esperado)];
                                                   AutoFormatType=1 }
    { 150 ;   ;Sales Amount (Expected);Decimal    ;CaptionML=[ENU=Sales Amount (Expected);
                                                              ESP=Importe ventas (Esperado)];
                                                   AutoFormatType=1 }
    { 151 ;   ;Cost Amount (Expected);Decimal     ;CaptionML=[ENU=Cost Amount (Expected);
                                                              ESP=Importe coste (Esperado)];
                                                   AutoFormatType=1 }
    { 152 ;   ;Cost Amount (Non-Invtbl.);Decimal  ;CaptionML=[ENU=Cost Amount (Non-Invtbl.);
                                                              ESP=Importe coste (No-invent.)];
                                                   AutoFormatType=1 }
    { 156 ;   ;Cost Amount (Expected) (ACY);Decimal;
                                                   CaptionML=[ENU=Cost Amount (Expected) (ACY);
                                                              ESP=Importe coste (Esperado) (DA)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 157 ;   ;Cost Amount (Non-Invtbl.)(ACY);Decimal;
                                                   CaptionML=[ENU=Cost Amount (Non-Invtbl.)(ACY);
                                                              ESP=Importe coste (no-invent.)(DA)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 158 ;   ;Expected Cost Posted to G/L;Decimal;CaptionML=[ENU=Expected Cost Posted to G/L;
                                                              ESP=Coste esperado reg. en cont.];
                                                   AutoFormatType=1 }
    { 159 ;   ;Exp. Cost Posted to G/L (ACY);Decimal;
                                                   CaptionML=[ENU=Exp. Cost Posted to G/L (ACY);
                                                              ESP=Coste esperado reg. cont. (DA)];
                                                   AutoFormatType=1 }
    { 1000;   ;Job No.             ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Job No.;
                                                              ESP=N§ proyecto] }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ESP=N§ tarea proyecto] }
    { 1002;   ;Job Ledger Entry No.;Integer       ;TableRelation="Job Ledger Entry"."Entry No.";
                                                   CaptionML=[ENU=Job Ledger Entry No.;
                                                              ESP=N§ mov. proyecto];
                                                   BlankZero=Yes }
    { 5401;   ;Prod. Order No.     ;Code20        ;CaptionML=[ENU=Prod. Order No.;
                                                              ESP=N§ orden producci¢n] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 5818;   ;Adjustment          ;Boolean       ;CaptionML=[ENU=Adjustment;
                                                              ESP=Ajuste];
                                                   Editable=No }
    { 5819;   ;Average Cost Exception;Boolean     ;CaptionML=[ENU=Average Cost Exception;
                                                              ESP=Excepci¢n coste medio] }
    { 5831;   ;Capacity Ledger Entry No.;Integer  ;TableRelation="Capacity Ledger Entry";
                                                   CaptionML=[ENU=Capacity Ledger Entry No.;
                                                              ESP=N§ mov. capacidad] }
    { 5832;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ESP=Tipo];
                                                   OptionCaptionML=[ENU="Work Center,Machine Center, ";
                                                                    ESP="Centro trabajo,Centro m quina, "];
                                                   OptionString=[Work Center,Machine Center, ] }
    { 5834;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Machine Center)) "Machine Center"
                                                                 ELSE IF (Type=CONST(Work Center)) "Work Center";
                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 5881;   ;Prod. Order Line No.;Integer       ;CaptionML=[ENU=Prod. Order Line No.;
                                                              ESP=N§ l¡n. orden producc.] }
    { 6602;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ESP=C¢d. motivo dev.] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Item Ledger Entry No.,Entry Type        ;SumIndexFields=Invoiced Quantity,Sales Amount (Expected),Sales Amount (Actual),Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Non-Invtbl.),Cost Amount (Expected) (ACY),Cost Amount (Actual) (ACY),Cost Amount (Non-Invtbl.)(ACY),Purchase Amount (Actual),Purchase Amount (Expected);
                                                   MaintainSIFTIndex=No }
    {    ;Item Ledger Entry No.,Document No.,Document Line No.;
                                                   MaintainSQLIndex=No }
    {    ;Item No.,Posting Date,Item Ledger Entry Type,Entry Type,Variance Type,Item Charge No.,Location Code,Variant Code;
                                                   SumIndexFields=Invoiced Quantity,Sales Amount (Expected),Sales Amount (Actual),Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Non-Invtbl.),Purchase Amount (Actual),Item Ledger Entry Quantity }
    {    ;Item No.,Posting Date,Item Ledger Entry Type,Entry Type,Item Charge No.,Location Code,Variant Code,Expected Cost;
                                                   SumIndexFields=Invoiced Quantity,Sales Amount (Expected),Sales Amount (Actual),Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Non-Invtbl.),Purchase Amount (Actual),Item Ledger Entry Quantity,Cost Amount (Actual) (ACY),Cost Amount (Expected) (ACY) }
    { No ;Item No.,Posting Date,Item Ledger Entry Type,Entry Type,Variance Type,Item Charge No.,Location Code,Variant Code,Global Dimension 1 Code,Global Dimension 2 Code;
                                                   SumIndexFields=Invoiced Quantity,Sales Amount (Expected),Sales Amount (Actual),Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Non-Invtbl.),Purchase Amount (Actual) }
    {    ;Document No.                             }
    {    ;Item No.,Valuation Date,Location Code,Variant Code;
                                                   SumIndexFields=Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Expected) (ACY),Cost Amount (Actual) (ACY),Item Ledger Entry Quantity;
                                                   SIFTLevelsToMaintain=[{Item No.,Valuation Date:Year},
                                                                         {Item No.,Valuation Date:Month},
                                                                         {Item No.,Valuation Date:Day},
                                                                         {Item No.,Valuation Date:Day,Location Code,Variant Code}] }
    {    ;Source Type,Source No.,Item No.,Posting Date,Entry Type,Adjustment;
                                                   SumIndexFields=Discount Amount,Cost Amount (Non-Invtbl.),Cost Amount (Actual),Cost Amount (Expected),Sales Amount (Actual),Sales Amount (Expected),Invoiced Quantity }
    {    ;Item Charge No.,Inventory Posting Group,Item No. }
    {    ;Capacity Ledger Entry No.,Entry Type    ;SumIndexFields=Cost Amount (Actual),Cost Amount (Actual) (ACY);
                                                   KeyGroups=Item(MFG);
                                                   MaintainSIFTIndex=No }
    {    ;Prod. Order No.                         ;KeyGroups=Item(MFG) }
    { No ;Source Type,Source No.,Global Dimension 1 Code,Global Dimension 2 Code,Item No.,Posting Date,Entry Type,Adjustment;
                                                   SumIndexFields=Discount Amount,Cost Amount (Non-Invtbl.),Cost Amount (Actual),Cost Amount (Expected),Sales Amount (Actual),Sales Amount (Expected),Invoiced Quantity }
    {    ;Job No.,Job Task No.,Document No.        }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Item Ledger Entry Type,Item Ledger Entry No.,Item No.,Posting Date,Source No.,Document No. }
  }
  CODE
  {
    VAR
      GLSetup@1000 : Record 98;
      GLSetupRead@1002 : Boolean;

    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
    END;

    PROCEDURE GetValuationDate@55() : Date;
    BEGIN
      IF "Valuation Date" < "Posting Date" THEN
        EXIT("Posting Date");
      EXIT("Valuation Date");
    END;

    PROCEDURE AddActualCostBuf@2(ValueEntry@1000 : Record 5802;NewAdjustedCost@1002 : Decimal;NewAdjustedCostACY@1003 : Decimal;ItemLedgEntryPostingDate@1001 : Date);
    BEGIN
      RESET;
      "Entry No." := ValueEntry."Entry No.";
      IF FIND THEN BEGIN
        IF ValueEntry."Expected Cost" THEN BEGIN
          "Cost Amount (Expected)" := "Cost Amount (Expected)" + NewAdjustedCost;
          "Cost Amount (Expected) (ACY)" := "Cost Amount (Expected) (ACY)" + NewAdjustedCostACY;
        END ELSE BEGIN
          "Cost Amount (Actual)" := "Cost Amount (Actual)" + NewAdjustedCost;
          "Cost Amount (Actual) (ACY)" := "Cost Amount (Actual) (ACY)" + NewAdjustedCostACY;
        END;
        MODIFY;
      END ELSE BEGIN
        INIT;
        "Item No." := ValueEntry."Item No.";
        "Document No." := ValueEntry."Document No.";
        "Location Code" := ValueEntry."Location Code";
        "Variant Code" := ValueEntry."Variant Code";
        "Entry Type" := ValueEntry."Entry Type";
        "Item Ledger Entry No." := ValueEntry."Item Ledger Entry No.";
        "Expected Cost" := ValueEntry."Expected Cost";
        IF ItemLedgEntryPostingDate = 0D THEN
          "Posting Date" := ValueEntry."Posting Date"
        ELSE
          "Posting Date" := ItemLedgEntryPostingDate;
        IF ValueEntry."Expected Cost" THEN BEGIN
          "Cost Amount (Expected)" := NewAdjustedCost;
          "Cost Amount (Expected) (ACY)" := NewAdjustedCostACY;
        END ELSE BEGIN
          "Cost Amount (Actual)" := NewAdjustedCost;
          "Cost Amount (Actual) (ACY)" := NewAdjustedCostACY;
        END;
        "Valued By Average Cost" := ValueEntry."Valued By Average Cost";
        "Valuation Date" := ValueEntry."Valuation Date";
        INSERT;
      END;
    END;

    PROCEDURE AddBalanceExpectedCostBuf@6(ValueEntry@1002 : Record 5802;NewAdjustedCost@1001 : Decimal;NewAdjustedCostACY@1000 : Decimal);
    BEGIN
      IF ValueEntry."Expected Cost" OR
        (ValueEntry."Entry Type" <> ValueEntry."Entry Type"::"Direct Cost")
      THEN
        EXIT;

      RESET;
      "Entry No." := ValueEntry."Entry No.";
      FIND;
      "Cost Amount (Expected)" := NewAdjustedCost;
      "Cost Amount (Expected) (ACY)" := NewAdjustedCostACY;
      MODIFY;
    END;

    PROCEDURE AddCost@3(ValueEntry@1000 : Record 5802);
    BEGIN
      "Cost Amount (Expected)" := "Cost Amount (Expected)" + ValueEntry."Cost Amount (Expected)";
      "Cost Amount (Expected) (ACY)" := "Cost Amount (Expected) (ACY)" + ValueEntry."Cost Amount (Expected) (ACY)";
      "Cost Amount (Actual)" := "Cost Amount (Actual)" + ValueEntry."Cost Amount (Actual)";
      "Cost Amount (Actual) (ACY)" := "Cost Amount (Actual) (ACY)" + ValueEntry."Cost Amount (Actual) (ACY)";
    END;

    PROCEDURE SumCostsTillValuationDate@4(VAR ValueEntry@1000 : Record 5802);
    VAR
      AvgCostAdjmtPoint@1003 : Record 5804;
      CalendarPeriod@1001 : Record 2000000007;
      AccountingPeriod@1002 : Record 50;
      PrevAccountingPeriod@1007 : Record 50;
      PrevValueEntrySum@1008 : Record 5802;
      Item@1010 : Record 27;
      FromDate@1005 : Date;
      ToDate@1006 : Date;
      CostCalcIsChanged@1004 : Boolean;
      QtyFactor@1009 : Decimal;
    BEGIN
      Item.GET(ValueEntry."Item No.");
      IF Item."Costing Method" = Item."Costing Method"::Average THEN BEGIN
        CalendarPeriod."Period Start" := ValueEntry."Valuation Date";
        AvgCostAdjmtPoint."Valuation Date" := ValueEntry."Valuation Date";
        AvgCostAdjmtPoint.GetValuationPeriod(CalendarPeriod);
        ToDate := CalendarPeriod."Period End";
      END ELSE
        ToDate := "Valuation Date";

      REPEAT
        IF Item."Costing Method" = Item."Costing Method"::Average THEN BEGIN
          FromDate := ToDate;
          AccountingPeriod.SETRANGE("Starting Date",0D,ToDate);
          AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
          IF NOT AccountingPeriod.FIND('+') THEN BEGIN
            AccountingPeriod.SETRANGE("Starting Date");
            AccountingPeriod.FIND('-');
          END;

          WHILE (FromDate = ToDate) AND (FromDate <> 0D) DO BEGIN
            PrevAccountingPeriod := AccountingPeriod;
            CASE TRUE OF
              AccountingPeriod."Average Cost Calc. Type" = AccountingPeriod."Average Cost Calc. Type"::Item:
                FromDate := 0D;
              AccountingPeriod.NEXT(-1) = 0:
                FromDate := 0D;
              AccountingPeriod."Average Cost Calc. Type" <> PrevAccountingPeriod."Average Cost Calc. Type":
                BEGIN
                  FromDate := PrevAccountingPeriod."Starting Date";
                  CostCalcIsChanged := TRUE;
                END;
            END;
          END;
          AccountingPeriod := PrevAccountingPeriod;
        END ELSE
          FromDate := 0D;

        QtyFactor := 1;
        RESET;
        SETCURRENTKEY("Item No.","Valuation Date","Location Code","Variant Code");
        SETRANGE("Item No.",ValueEntry."Item No.");
        SETRANGE("Valuation Date",FromDate,ToDate);
        IF (AccountingPeriod."Average Cost Calc. Type" =
            AccountingPeriod."Average Cost Calc. Type"::"Item & Location & Variant") OR
           (Item."Costing Method" <> Item."Costing Method"::Average)
        THEN BEGIN
          SETRANGE("Location Code",ValueEntry."Location Code");
          SETRANGE("Variant Code",ValueEntry."Variant Code");
        END ELSE
          IF CostCalcIsChanged THEN
            QtyFactor := CalcQtyFactor(ValueEntry);

        CALCSUMS(
          "Item Ledger Entry Quantity",
          "Cost Amount (Actual)","Cost Amount (Actual) (ACY)",
          "Cost Amount (Expected)","Cost Amount (Expected) (ACY)");

        "Item Ledger Entry Quantity" :=
          ROUND("Item Ledger Entry Quantity" * QtyFactor,0.00001) + PrevValueEntrySum."Item Ledger Entry Quantity";
        "Cost Amount (Actual)" :=
          "Cost Amount (Actual)" * QtyFactor + PrevValueEntrySum."Cost Amount (Actual)";
        "Cost Amount (Expected)" :=
          "Cost Amount (Expected)" * QtyFactor + PrevValueEntrySum."Cost Amount (Expected)";
        "Cost Amount (Expected) (ACY)" :=
          "Cost Amount (Expected) (ACY)" * QtyFactor + PrevValueEntrySum."Cost Amount (Expected) (ACY)";
        "Cost Amount (Actual) (ACY)" :=
          "Cost Amount (Actual) (ACY)" * QtyFactor + PrevValueEntrySum."Cost Amount (Actual) (ACY)";
        PrevValueEntrySum := Rec;

        IF FromDate <> 0D THEN
          ToDate := CALCDATE('<-1D>',FromDate);
      UNTIL FromDate = 0D;
    END;

    PROCEDURE CalcItemLedgEntryCost@5(ItemLedgEntryNo@1000 : Integer;Expected@1001 : Boolean);
    VAR
      ItemLedgEntryQty@1006 : Decimal;
      CostAmtActual@1002 : Decimal;
      CostAmtActualACY@1003 : Decimal;
      CostAmtExpected@1004 : Decimal;
      CostAmtExpectedACY@1005 : Decimal;
    BEGIN
      RESET;
      SETCURRENTKEY("Item Ledger Entry No.");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      IF FIND('-') THEN
        REPEAT
          IF "Expected Cost" = Expected THEN BEGIN
            ItemLedgEntryQty := ItemLedgEntryQty + "Item Ledger Entry Quantity";
            CostAmtActual := CostAmtActual + "Cost Amount (Actual)";
            CostAmtActualACY := CostAmtActualACY + "Cost Amount (Actual) (ACY)";
            CostAmtExpected := CostAmtExpected + "Cost Amount (Expected)";
            CostAmtExpectedACY := CostAmtExpectedACY + "Cost Amount (Expected) (ACY)";
          END;
        UNTIL NEXT = 0;

      "Item Ledger Entry Quantity" := ItemLedgEntryQty;
      "Cost Amount (Actual)" := CostAmtActual;
      "Cost Amount (Actual) (ACY)" := CostAmtActualACY;
      "Cost Amount (Expected)" := CostAmtExpected;
      "Cost Amount (Expected) (ACY)" := CostAmtExpectedACY;
    END;

    PROCEDURE NotInvdRevaluationExists@7(ItemLedgEntryNo@1000 : Integer) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      SETRANGE("Entry Type","Entry Type"::Revaluation);
      SETRANGE("Applies-to Entry",0);
      EXIT(FINDSET);
    END;

    LOCAL PROCEDURE CalcQtyFactor@8(ValueEntry@1000 : Record 5802) QtyFactor : Decimal;
    VAR
      ValueEntry2@1001 : Record 5802;
    BEGIN
      ValueEntry2.SETCURRENTKEY("Item No.","Valuation Date","Location Code","Variant Code");
      ValueEntry2.COPYFILTERS(Rec);
      ValueEntry2.SETRANGE("Location Code",ValueEntry."Location Code");
      ValueEntry2.SETRANGE("Variant Code",ValueEntry."Variant Code");
      ValueEntry2.CALCSUMS("Item Ledger Entry Quantity");
      QtyFactor := ValueEntry2."Item Ledger Entry Quantity";
      ValueEntry2.SETRANGE("Location Code");
      ValueEntry2.SETRANGE("Variant Code");
      ValueEntry2.CALCSUMS("Item Ledger Entry Quantity");
      IF ValueEntry2."Item Ledger Entry Quantity" <> 0 THEN
        QtyFactor := QtyFactor / ValueEntry2."Item Ledger Entry Quantity";

      EXIT(QtyFactor);
    END;

    PROCEDURE ShowGL@9();
    VAR
      GLItemLedgRelation@1000 : Record 5823;
      GLEntry@1002 : Record 17;
      TempGLEntry@1001 : TEMPORARY Record 17;
    BEGIN
      GLItemLedgRelation.SETCURRENTKEY("Value Entry No.");
      GLItemLedgRelation.SETRANGE("Value Entry No.","Entry No.");
      IF GLItemLedgRelation.FINDSET THEN
        REPEAT
          GLEntry.GET(GLItemLedgRelation."G/L Entry No.");
          TempGLEntry.INIT;
          TempGLEntry := GLEntry;
          TempGLEntry.INSERT;
        UNTIL GLItemLedgRelation.NEXT = 0;

      FORM.RUNMODAL(0,TempGLEntry);
    END;

    PROCEDURE IsAvgCostException@10() : Boolean;
    VAR
      AvgCostAdjmtPoint@1000 : Record 5804;
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      IF "Partial Revaluation" THEN
        EXIT(TRUE);
      IF "Item Ledger Entry Type" = "Item Ledger Entry Type"::Transfer THEN
        EXIT(TRUE);
      IF ItemApplnEntry.AppliedInbndEntryExists("Item Ledger Entry No.",TRUE) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}
