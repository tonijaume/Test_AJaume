OBJECT Table 81 Gen. Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=21/11/14;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009,TRF2009,NAVW16.00.01,NAVES6.00,RegF269949;
  }
  PROPERTIES
  {
    OnInsert=VAR
               JnlLineDim@1000 : Record 356;
             BEGIN
               JnlLineDim.LOCKTABLE;
               GenJnlAlloc.LOCKTABLE;
               LOCKTABLE;
               GenJnlTemplate.GET("Journal Template Name");
               GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
               "Check Printed" := FALSE;

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
               DimMgt.InsertJnlLineDim(
                 DATABASE::"Gen. Journal Line",
                 "Journal Template Name","Journal Batch Name","Line No.",0,
                 "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

               IF "Bank Payment Type" = "Bank Payment Type"::"Electronic Payment" THEN
                 ElectPmtMgmt.GetTransferType("Account No.",Amount,"Transfer Type",FALSE);
             END;

    OnModify=BEGIN
               TESTFIELD("Check Printed",FALSE);
               IF "Bank Payment Type" = "Bank Payment Type"::"Electronic Payment" THEN BEGIN
                 ElectPmtMgmt.GetTransferType("Account No.",Amount,"Transfer Type",FALSE);
                 MODIFY;
               END;

               IF ("Applies-to ID" = '') AND (xRec."Applies-to ID" <> '') THEN
                 ClearCustVendApplnEntry;
             END;

    OnDelete=VAR
               JnlLineDim@1000 : Record 356;
             BEGIN
               CheckNoCardTransactEntryExist(Rec);

               TESTFIELD("Check Printed",FALSE);
               TESTFIELD("Elect. Pmts Exported",FALSE); // es0013
               //+$016 <
               IF NOT cFunSeg.TienePermiso('NAV-BOR-DIA', FALSE) THEN //+$018
                 TESTFIELD("System-Created Entry",FALSE); //+$015
               //+$016 >

               ClearCustVendApplnEntry;

               JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Jnl. Allocation");
               JnlLineDim.SETRANGE("Journal Template Name","Journal Template Name");
               JnlLineDim.SETRANGE("Journal Batch Name","Journal Batch Name");
               JnlLineDim.SETRANGE("Journal Line No.","Line No.");
               JnlLineDim.DELETEALL;

               GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
               GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
               GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
               GenJnlAlloc.DELETEALL;

               DimMgt.DeleteJnlLineDim(
                 DATABASE::"Gen. Journal Line",
                 "Journal Template Name","Journal Batch Name","Line No.",0);
             END;

    OnRename=BEGIN
               CheckNoCardTransactEntryExist(Rec);
               TESTFIELD("Check Printed",FALSE);
               TESTFIELD("Elect. Pmts Exported",FALSE); // es0013
             END;

    CaptionML=[ENU=Gen. Journal Line;
               ESP=L¡n. diario general];
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=[ENU=Journal Template Name;
                                                              ESP=Nombre libro diario] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 3   ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                    "Account Type"::"IC Partner"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                    "Bal. Account Type"::"IC Partner"])
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Account No.",'');
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN BEGIN
                                                                  VALIDATE("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                  VALIDATE("Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Gen. Prod. Posting Group",'');
                                                                END ELSE
                                                                  IF "Bal. Account Type" IN [
                                                                     "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"]
                                                                  THEN
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;

                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF xRec."Account Type" IN
                                                                   [xRec."Account Type"::Customer,xRec."Account Type"::Vendor]
                                                                THEN BEGIN
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                END;

                                                                IF ("Account Type" = "Account Type"::"IC Partner") AND
                                                                   ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") AND
                                                                   GLAcc.GET("Bal. Account No.")
                                                                THEN
                                                                  "IC Partner G/L Acc. No." := GLAcc."Default IC Partner G/L Acc. No"
                                                                ELSE
                                                                  "IC Partner G/L Acc. No." := '';

                                                                IF "Journal Template Name" <> '' THEN
                                                                  IF ("Account Type" = "Account Type"::"IC Partner") THEN BEGIN
                                                                    GetTemplate;
                                                                    IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                                                                      FIELDERROR("Account Type");
                                                                  END;
                                                                IF "Account Type" <> "Account Type"::Customer THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              ESP=Tipo mov.];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    ESP=Cuenta,Cliente,Proveedor,Banco,Activo,Empresa vinculada asociada];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 4   ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Job No.",'');
                                                                IF "Account No." = '' THEN BEGIN
                                                                  UpdateLineBalance;
                                                                  UpdateSource;
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  IF xRec."Account No." <> '' THEN BEGIN
                                                                    "Gen. Posting Type" := "Gen. Posting Type"::" ";
                                                                    "Gen. Bus. Posting Group" := '';
                                                                    "Gen. Prod. Posting Group" := '';
                                                                    "VAT Bus. Posting Group" := '';
                                                                    "VAT Prod. Posting Group" := '';
                                                                    "Tax Area Code" := '';
                                                                    "Tax Liable" := FALSE;
                                                                    "Tax Group Code" := '';
                                                                  END;
                                                                  EXIT;
                                                                END;

                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"IC Partner"] THEN
                                                                  "IC Partner Code" := '';

                                                                CASE "Account Type" OF
                                                                  "Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Account No.");
                                                                      CheckGLAcc;
                                                                      ReplaceInfo := "Bal. Account No." = '';
                                                                      IF NOT ReplaceInfo THEN BEGIN
                                                                        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                        ReplaceInfo := GenJnlBatch."Bal. Account No." <> '';
                                                                      END;
                                                                      IF ReplaceInfo THEN BEGIN
                                                                        Description := GLAcc.Name;
                                                                      END;
                                                                      IF ("Bal. Account No." = '') OR
                                                                         ("Bal. Account Type" IN
                                                                          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                        "Payment Method Code" := '';
                                                                      END;
                                                                      IF "Bal. Account No." = '' THEN
                                                                        "Currency Code" := '';
                                                                      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
                                                                         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
                                                                      THEN BEGIN
                                                                        "Gen. Posting Type" := GLAcc."Gen. Posting Type";
                                                                        "Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                        "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                        "VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
                                                                        "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      END;
                                                                      "Tax Area Code" := GLAcc."Tax Area Code";
                                                                      "Tax Liable" := GLAcc."Tax Liable";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      IF "Posting Date" <> 0D THEN
                                                                        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN BEGIN
                                                                          "Gen. Posting Type" := 0;
                                                                          "Gen. Bus. Posting Group" := '';
                                                                          "Gen. Prod. Posting Group" := '';
                                                                          "VAT Bus. Posting Group" := '';
                                                                          "VAT Prod. Posting Group" := '';
                                                                        END;
                                                                    END;
                                                                  "Account Type"::Customer:
                                                                    BEGIN
                                                                      Cust.GET("Account No.");
                                                                      Cust.CheckBlockedCustOnJnls(Cust,"Document Type", FALSE);
                                                                      IF (Cust."IC Partner Code" <> '') THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Cust."IC Partner Code" <> '' ) AND (ICPartner.GET(Cust."IC Partner Code")) THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                                                                          "IC Partner Code" := Cust."IC Partner Code";
                                                                        END;
                                                                      END;
                                                                      Description := Cust.Name;
                                                                      "Posting Group" := Cust."Customer Posting Group";
                                                                      "Salespers./Purch. Code" := Cust."Salesperson Code";
                                                                      Cust.TESTFIELD("Payment Terms Code");
                                                                      "Payment Terms Code" := Cust."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.", "Account No.");
                                                                      IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                        Cust.TESTFIELD("Currency Code","Currency Code")
                                                                      ELSE
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      "Gen. Posting Type" := 0;
                                                                      "Gen. Bus. Posting Group" := '';
                                                                      "Gen. Prod. Posting Group" := '';
                                                                      "VAT Bus. Posting Group" := '';
                                                                      "VAT Prod. Posting Group" := '';
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                        "Payment Method Code" := ''
                                                                      ELSE BEGIN
                                                                        Cust.TESTFIELD("Payment Method Code");
                                                                        "Payment Method Code" := Cust."Payment Method Code";
                                                                      END;
                                                                      "Cust./Vendor Bank Acc. Code" := Cust."Default Bank Acc. Code";
                                                                      IF (Cust."Bill-to Customer No." <> '') AND (Cust."Bill-to Customer No." <> "Account No.") THEN BEGIN
                                                                        OK := CONFIRM(Text014,FALSE,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
                                                                        Cust."Bill-to Customer No.");
                                                                        IF NOT OK THEN
                                                                          ERROR('');
                                                                      END;
                                                                      VALIDATE("Payment Terms Code");
                                                                    END;
                                                                  "Account Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.GET("Account No.");
                                                                      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      IF (Vend."IC Partner Code" <> '') THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Vend."IC Partner Code" <> '') AND (ICPartner.GET(Vend."IC Partner Code")) THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                                                                          "IC Partner Code" := Vend."IC Partner Code";
                                                                        END;
                                                                      END;
                                                                      Description := Vend.Name;
                                                                      "Posting Group" := Vend."Vendor Posting Group";
                                                                      "Salespers./Purch. Code" := Vend."Purchaser Code";
                                                                      Vend.TESTFIELD("Payment Terms Code");
                                                                      "Payment Terms Code" := Vend."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Account No.");
                                                                      IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                        Vend.TESTFIELD("Currency Code","Currency Code")
                                                                      ELSE
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      "Gen. Posting Type" := 0;
                                                                      "Gen. Bus. Posting Group" := '';
                                                                      "Gen. Prod. Posting Group" := '';
                                                                      "VAT Bus. Posting Group" := '';
                                                                      "VAT Prod. Posting Group" := '';
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                        "Payment Method Code" := ''
                                                                      ELSE BEGIN
                                                                        Vend.TESTFIELD("Payment Method Code");
                                                                        "Payment Method Code" := Vend."Payment Method Code";
                                                                      END;
                                                                      "Cust./Vendor Bank Acc. Code" := Vend."Default Bank Acc. Code";
                                                                      IF (Vend."Pay-to Vendor No." <> '') AND (Vend."Pay-to Vendor No." <> "Account No.")  THEN BEGIN
                                                                        OK := CONFIRM(Text014,FALSE,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
                                                                        Vend."Pay-to Vendor No.");
                                                                        IF NOT OK THEN
                                                                          ERROR('');
                                                                      END;
                                                                      VALIDATE("Payment Terms Code");
                                                                    END;
                                                                  "Account Type"::"Bank Account":
                                                                    BEGIN
                                                                      BankAcc.GET("Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,FALSE);
                                                                      ReplaceInfo := "Bal. Account No." = '';
                                                                      IF NOT ReplaceInfo THEN BEGIN
                                                                        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                        ReplaceInfo := GenJnlBatch."Bal. Account No." <> '';
                                                                      END;
                                                                      IF ReplaceInfo THEN BEGIN
                                                                        Description := BankAcc.Name;
                                                                      END;
                                                                      IF ("Bal. Account No." = '') OR
                                                                         ("Bal. Account Type" IN
                                                                          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF BankAcc."Currency Code" = '' THEN BEGIN
                                                                        IF "Bal. Account No." = '' THEN
                                                                          "Currency Code" := '';
                                                                      END ELSE
                                                                        IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                          BankAcc.TESTFIELD("Currency Code","Currency Code")
                                                                        ELSE
                                                                          "Currency Code" := BankAcc."Currency Code";
                                                                      "Gen. Posting Type" := 0;
                                                                      "Gen. Bus. Posting Group" := '';
                                                                      "Gen. Prod. Posting Group" := '';
                                                                      "VAT Bus. Posting Group" := '';
                                                                      "VAT Prod. Posting Group" := '';
                                                                    END;
                                                                  "Account Type"::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("Account No.");
                                                                      FA.TESTFIELD(FA.Blocked,FALSE);
                                                                      FA.TESTFIELD(FA.Inactive,FALSE);
                                                                      FA.TESTFIELD(FA."Budgeted Asset",FALSE);
                                                                      Description := FA.Description;
                                                                      IF "Depreciation Book Code" = '' THEN BEGIN
                                                                        FASetup.GET;
                                                                        "Depreciation Book Code" := FASetup."Default Depr. Book";
                                                                        IF NOT FADeprBook.GET("Account No.","Depreciation Book Code") THEN
                                                                          "Depreciation Book Code" := '';
                                                                      END;
                                                                      IF "Depreciation Book Code" <> '' THEN BEGIN
                                                                        FADeprBook.GET("Account No.","Depreciation Book Code");
                                                                        "Posting Group" := FADeprBook."FA Posting Group";
                                                                      END;
                                                                      GetFAVATSetup;
                                                                      GetFAAddCurrExchRate;
                                                                    END;
                                                                  "Account Type"::"IC Partner":
                                                                    BEGIN
                                                                      ICPartner.GET("Account No.");
                                                                      ICPartner.CheckICPartner;
                                                                      Description := ICPartner.Name;
                                                                      IF ("Bal. Account No." = '') OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      "Gen. Posting Type" := 0;
                                                                      "Gen. Bus. Posting Group" := '';
                                                                      "Gen. Prod. Posting Group" := '';
                                                                      "VAT Bus. Posting Group" := '';
                                                                      "VAT Prod. Posting Group" := '';
                                                                      "IC Partner Code" := "Account No.";
                                                                    END;
                                                                END;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=[ENU=Account No.;
                                                              ESP=N§ cuenta] }
    { 5   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Document Date","Posting Date");
                                                                VALIDATE("Currency Code");

                                                                IF ((Rec."Posting Date" <> xRec."Posting Date") AND (Amount <> 0))  THEN
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);

                                                                ValidateApplyRequirements(Rec);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro];
                                                   ClosingDates=Yes }
    { 6   ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                CheckNoCardTransactEntryExist(xRec);

                                                                VALIDATE("Payment Terms Code");
                                                                IF "Account No." <> '' THEN
                                                                  CASE "Account Type" OF
                                                                    "Account Type"::Customer:
                                                                       BEGIN
                                                                         Cust.GET("Account No.");
                                                                         Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                       END;
                                                                    "Account Type"::Vendor:
                                                                       BEGIN
                                                                         Vend.GET("Account No.");
                                                                         Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                       END;
                                                                  END;
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        Cust.GET("Bal. Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        Vend.GET("Bal. Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      END;
                                                                  END;
                                                                UpdateSalesPurchLCY;
                                                                ValidateApplyRequirements(Rec);
                                                                IF NOT ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,,,,,,,,,,,,,,,Bill";
                                                                    ESP=" ,Pago,Factura,Abono,Docs. inters,Recordatorio,Reembolso,,,,,,,,,,,,,,,Efecto"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,,,,,,,,,,,,,,,Bill] }
    { 7   ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                CheckNoCardTransactEntryExist(xRec);
                                                              END;

                                                   CaptionML=[ENU=Document No.;
                                                              ESP=N§ documento] }
    { 8   ;   ;Description         ;Text80        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 10  ;   ;VAT %               ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        ROUND(Amount * "VAT %" / (100 + "VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount - "VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" := Amount;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                                                                       "Use Tax"
                                                                    THEN BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    END ELSE BEGIN
                                                                      "VAT Amount" :=
                                                                        Amount -
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",
                                                                          "Posting Date",Amount,Quantity,"Currency Factor");
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / (Amount - "VAT Amount"),0.000001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                "VAT Base Amount" := Amount - "VAT Amount";
                                                                "VAT Difference" := 0;

                                                                IF "Currency Code" = '' THEN
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                ELSE
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor"));
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=VAT %;
                                                              ESP=% IVA];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 11  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Bal. Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Job No.",'');
                                                                IF "Bal. Account No." = '' THEN BEGIN
                                                                  UpdateLineBalance;
                                                                  UpdateSource;
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  IF xRec."Bal. Account No." <> '' THEN BEGIN
                                                                    "Bal. Gen. Posting Type" := "Bal. Gen. Posting Type"::" ";
                                                                    "Bal. Gen. Bus. Posting Group" := '';
                                                                    "Bal. Gen. Prod. Posting Group" := '';
                                                                    "Bal. VAT Bus. Posting Group" := '';
                                                                    "Bal. VAT Prod. Posting Group" := '';
                                                                    "Bal. Tax Area Code" := '';
                                                                    "Bal. Tax Liable" := FALSE;
                                                                    "Bal. Tax Group Code" := '';
                                                                  END;
                                                                  EXIT;
                                                                END;
                                                                IF xRec."Bal. Account Type" IN [xRec."Bal. Account Type"::Customer, xRec."Bal. Account Type"::Vendor,
                                                                   xRec."Bal. Account Type"::"IC Partner"]
                                                                THEN
                                                                  "IC Partner Code" := '';

                                                                CASE "Bal. Account Type" OF
                                                                  "Bal. Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Bal. Account No.");
                                                                      CheckGLAcc;
                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := GLAcc.Name;
                                                                        "Currency Code" := '';
                                                                      END;
                                                                      IF ("Account No." = '') OR
                                                                         ("Account Type" IN
                                                                          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
                                                                         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
                                                                      THEN BEGIN
                                                                        "Bal. Gen. Posting Type" := GLAcc."Gen. Posting Type";
                                                                        "Bal. Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                        "Bal. Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                        "Bal. VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
                                                                        "Bal. VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      END;
                                                                      "Bal. Tax Area Code" := GLAcc."Tax Area Code";
                                                                      "Bal. Tax Liable" := GLAcc."Tax Liable";
                                                                      "Bal. Tax Group Code" := GLAcc."Tax Group Code";
                                                                      IF "Posting Date" <> 0D THEN
                                                                        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN BEGIN
                                                                          "Bal. Gen. Bus. Posting Group" := '';
                                                                          "Bal. Gen. Prod. Posting Group" := '';
                                                                          "Bal. VAT Bus. Posting Group" := '';
                                                                          "Bal. VAT Prod. Posting Group" := '';
                                                                          "Bal. Gen. Posting Type" := 0;
                                                                        END;
                                                                    END;
                                                                  "Bal. Account Type"::Customer:
                                                                    BEGIN
                                                                      Cust.GET("Bal. Account No.");
                                                                      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      IF (Cust."IC Partner Code" <> '') THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Cust."IC Partner Code" <> '') AND (ICPartner.GET(Cust."IC Partner Code")) THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                                                                          "IC Partner Code" := Cust."IC Partner Code";
                                                                        END;
                                                                      END;

                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := Cust.Name;
                                                                      END;
                                                                      "Posting Group" := Cust."Customer Posting Group";
                                                                      "Salespers./Purch. Code" := Cust."Salesperson Code";
                                                                      "Payment Terms Code" := Cust."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      "Bal. Gen. Posting Type" := 0;
                                                                      "Bal. Gen. Bus. Posting Group" := '';
                                                                      "Bal. Gen. Prod. Posting Group" := '';
                                                                      "Bal. VAT Bus. Posting Group" := '';
                                                                      "Bal. VAT Prod. Posting Group" := '';
                                                                      IF (Cust."Bill-to Customer No." <> '') AND (Cust."Bill-to Customer No." <> "Bal. Account No.") THEN BEGIN
                                                                        OK := CONFIRM(Text014,FALSE,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
                                                                        Cust."Bill-to Customer No.");
                                                                        IF NOT OK THEN
                                                                          ERROR('');
                                                                      END;
                                                                      VALIDATE("Payment Terms Code");
                                                                    END;
                                                                  "Bal. Account Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.GET("Bal. Account No.");
                                                                      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      IF (Vend."IC Partner Code" <> '') THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Vend."IC Partner Code" <> '') AND (ICPartner.GET(Vend."IC Partner Code")) THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                                                                          "IC Partner Code" := Vend."IC Partner Code";
                                                                        END;
                                                                      END;

                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := Vend.Name;
                                                                      END;
                                                                      "Posting Group" := Vend."Vendor Posting Group";
                                                                      "Salespers./Purch. Code" := Vend."Purchaser Code";
                                                                      "Payment Terms Code" := Vend."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      "Bal. Gen. Posting Type" := 0;
                                                                      "Bal. Gen. Bus. Posting Group" := '';
                                                                      "Bal. Gen. Prod. Posting Group" := '';
                                                                      "Bal. VAT Bus. Posting Group" := '';
                                                                      "Bal. VAT Prod. Posting Group" := '';
                                                                      IF (Vend."Pay-to Vendor No." <> '') AND (Vend."Pay-to Vendor No." <> "Bal. Account No.")  THEN BEGIN
                                                                        OK := CONFIRM(Text014,FALSE,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
                                                                        Vend."Pay-to Vendor No.");
                                                                        IF NOT OK THEN
                                                                          ERROR('');
                                                                      END;
                                                                      VALIDATE("Payment Terms Code");
                                                                    END;
                                                                  "Bal. Account Type"::"Bank Account":
                                                                    BEGIN
                                                                      BankAcc.GET("Bal. Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,FALSE);
                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := BankAcc.Name;
                                                                      END;
                                                                      IF ("Account No." = '') OR
                                                                         ("Account Type" IN
                                                                          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF BankAcc."Currency Code" = '' THEN BEGIN
                                                                        IF "Account No." = '' THEN
                                                                          "Currency Code" := '';
                                                                      END ELSE
                                                                        IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                          BankAcc.TESTFIELD("Currency Code","Currency Code")
                                                                        ELSE
                                                                          "Currency Code" := BankAcc."Currency Code";
                                                                      "Bal. Gen. Posting Type" := 0;
                                                                      "Bal. Gen. Bus. Posting Group" := '';
                                                                      "Bal. Gen. Prod. Posting Group" := '';
                                                                      "Bal. VAT Bus. Posting Group" := '';
                                                                      "Bal. VAT Prod. Posting Group" := '';
                                                                    END;
                                                                  "Bal. Account Type"::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("Bal. Account No.");
                                                                      FA.TESTFIELD(FA.Blocked,FALSE);
                                                                      FA.TESTFIELD(FA.Inactive,FALSE);
                                                                      FA.TESTFIELD(FA."Budgeted Asset",FALSE);
                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := FA.Description;
                                                                      END;
                                                                      IF "Depreciation Book Code" = '' THEN BEGIN
                                                                        FASetup.GET;
                                                                        "Depreciation Book Code" := FASetup."Default Depr. Book";
                                                                        IF NOT FADeprBook.GET("Bal. Account No.","Depreciation Book Code") THEN
                                                                          "Depreciation Book Code" := '';
                                                                      END;
                                                                      IF "Depreciation Book Code" <> '' THEN BEGIN
                                                                        FADeprBook.GET("Bal. Account No.","Depreciation Book Code");
                                                                        "Posting Group" := FADeprBook."FA Posting Group";
                                                                      END;
                                                                      GetFAVATSetup;
                                                                      GetFAAddCurrExchRate;
                                                                    END;
                                                                  "Bal. Account Type"::"IC Partner":
                                                                    BEGIN
                                                                      ICPartner.GET("Bal. Account No.");
                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := ICPartner.Name;
                                                                      END;
                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      "Bal. Gen. Posting Type" := 0;
                                                                      "Bal. Gen. Bus. Posting Group" := '';
                                                                      "Bal. Gen. Prod. Posting Group" := '';
                                                                      "Bal. VAT Bus. Posting Group" := '';
                                                                      "Bal. VAT Prod. Posting Group" := '';
                                                                      "IC Partner Code" := "Bal. Account No.";
                                                                    END;

                                                                END;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                IF ("Account Type" = "Account Type"::"IC Partner") AND
                                                                   ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")
                                                                THEN
                                                                  "IC Partner G/L Acc. No." := GLAcc."Default IC Partner G/L Acc. No";
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ESP=Cta. contrapartida] }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN BEGIN
                                                                  IF BankAcc3.GET("Bal. Account No.") AND (BankAcc3."Currency Code" <> '')THEN
                                                                    BankAcc3.TESTFIELD("Currency Code","Currency Code");
                                                                END;
                                                                IF "Account Type" = "Account Type"::"Bank Account" THEN BEGIN
                                                                  IF BankAcc3.GET("Account No.") AND (BankAcc3."Currency Code" <> '') THEN
                                                                    BankAcc3.TESTFIELD("Currency Code","Currency Code");
                                                                END;
                                                                IF ("Recurring Method" IN
                                                                    ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
                                                                   ("Currency Code" <> '')
                                                                THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  GetCurrency;
                                                                  IF ("Currency Code" <> xRec."Currency Code") OR
                                                                     ("Posting Date" <> xRec."Posting Date") OR
                                                                     (CurrFieldNo = FIELDNO("Currency Code")) OR
                                                                     ("Currency Factor" = 0)
                                                                  THEN
                                                                    "Currency Factor" :=
                                                                      CurrExchRate.ExchangeRate("Posting Date","Currency Code");
                                                                END ELSE
                                                                  "Currency Factor" := 0;
                                                                VALIDATE("Currency Factor");

                                                                IF (("Currency Code" <> xRec."Currency Code") AND (Amount <> 0)) THEN
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=C¢d. divisa] }
    { 13  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                IF "Currency Code" = '' THEN
                                                                  "Amount (LCY)" := Amount
                                                                ELSE
                                                                  "Amount (LCY)" := ROUND(
                                                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                                                      "Posting Date","Currency Code",
                                                                      Amount,"Currency Factor"));

                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (CurrFieldNo <> FIELDNO("Applies-to Doc. No.")) AND
                                                                   ((("Account Type" = "Account Type"::Customer) AND
                                                                     ("Account No." <> '') AND (Amount > 0) AND
                                                                     (CurrFieldNo <> FIELDNO("Bal. Account No."))) OR
                                                                    (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                                                                     ("Bal. Account No." <> '') AND (Amount < 0) AND
                                                                     (CurrFieldNo <> FIELDNO("Account No."))))
                                                                THEN
                                                                  CustCheckCreditLimit.GenJnlLineCheck(Rec);

                                                                VALIDATE("VAT %");
                                                                VALIDATE("Bal. VAT %");
                                                                UpdateLineBalance;

                                                                IF ((Rec.Amount <> xRec.Amount))  THEN BEGIN
                                                                  IF ("Applies-to Doc. No." <> '') OR ("Applies-to ID" <> '') THEN
                                                                    SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ESP=Importe];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Debit Amount        ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Debit Amount" := ROUND("Debit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Debit Amount" < 0;
                                                                Amount := "Debit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Debit Amount;
                                                              ESP=Importe debe];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Credit Amount       ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Credit Amount" := ROUND("Credit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Credit Amount" < 0;
                                                                Amount := -"Credit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Credit Amount;
                                                              ESP=Importe haber];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16  ;   ;Amount (LCY)        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" = '' THEN BEGIN
                                                                  Amount := "Amount (LCY)";
                                                                  VALIDATE(Amount);
                                                                END ELSE BEGIN
                                                                  IF CheckFixedCurrency THEN BEGIN
                                                                    GetCurrency;
                                                                    Amount := ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        "Posting Date","Currency Code",
                                                                        "Amount (LCY)","Currency Factor"),
                                                                        Currency."Amount Rounding Precision")
                                                                  END ELSE BEGIN
                                                                    TESTFIELD("Amount (LCY)");
                                                                    TESTFIELD(Amount);
                                                                    "Currency Factor" := Amount / "Amount (LCY)";
                                                                  END;

                                                                  VALIDATE("VAT %");
                                                                  VALIDATE("Bal. VAT %");
                                                                  UpdateLineBalance;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount (LCY);
                                                              ESP=Importe (DL)];
                                                   AutoFormatType=1 }
    { 17  ;   ;Balance (LCY)       ;Decimal       ;CaptionML=[ENU=Balance (LCY);
                                                              ESP=Saldo (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 18  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Currency Code" = '') AND ("Currency Factor" <> 0) THEN
                                                                  FIELDERROR("Currency Factor",STRSUBSTNO(Text002,FIELDCAPTION("Currency Code")));
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ESP=Factor divisa];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=Yes }
    { 19  ;   ;Sales/Purch. (LCY)  ;Decimal       ;CaptionML=[ENU=Sales/Purch. (LCY);
                                                              ESP=Venta/Compra (DL)];
                                                   AutoFormatType=1 }
    { 20  ;   ;Profit (LCY)        ;Decimal       ;CaptionML=[ENU=Profit (LCY);
                                                              ESP=Bf§ bruto (DL)];
                                                   AutoFormatType=1 }
    { 21  ;   ;Inv. Discount (LCY) ;Decimal       ;CaptionML=[ENU=Inv. Discount (LCY);
                                                              ESP=Dto. factura (DL)];
                                                   AutoFormatType=1 }
    { 22  ;   ;Bill-to/Pay-to No.  ;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                IF Rec."Bill-to/Pay-to No." <> xRec."Bill-to/Pay-to No." THEN
                                                                  "Ship-to/Order Address Code" := '';
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN
                                                                  UpdateCountryCodeAndVATRegNo("Bill-to/Pay-to No.");
                                                              END;

                                                   CaptionML=[ENU=Bill-to/Pay-to No.;
                                                              ESP=Fact./Pago a N§.] }
    { 23  ;   ;Posting Group       ;Code10        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ESP=Grupo contable];
                                                   Editable=No }
    { 24  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1];
                                                   CaptionClass='1,2,1' }
    { 25  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2];
                                                   CaptionClass='1,2,2' }
    { 26  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              ESP=C¢d. vendedor/comprador] }
    { 29  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ESP=C¢d. origen];
                                                   Editable=No }
    { 30  ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ESP=Asiento autom tico];
                                                   Editable=No }
    { 34  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ESP=Esperar] }
    { 35  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ESP=Liq. por tipo documento];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,,,,,,,,,,,,,,,Bill";
                                                                    ESP=" ,Pago,Factura,Abono,Docs. inters,Recordatorio,Reembolso,,,,,,,,,,,,,,,Efecto"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,,,,,,,,,,,,,,,Bill] }
    { 36  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=VAR
                                                                CustLedgEntry@1000 : Record 21;
                                                                VendLedgEntry@1003 : Record 25;
                                                                TempGenJnlLine@1001 : TEMPORARY Record 81;
                                                              BEGIN
                                                                IF ("Applies-to Doc. No." = '') AND (xRec."Applies-to Doc. No." <> '') THEN BEGIN
                                                                  PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");

                                                                  TempGenJnlLine := Rec;
                                                                  IF (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) OR
                                                                    (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
                                                                  THEN
                                                                    CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",TempGenJnlLine);

                                                                  IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Customer THEN BEGIN
                                                                    CustLedgEntry.SETCURRENTKEY("Document No.");
                                                                    CustLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                    IF NOT(xRec."Applies-to Doc. Type" = "Document Type"::" ") THEN
                                                                      CustLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                    CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
                                                                    CustLedgEntry.SETRANGE(Open,TRUE);
                                                                    IF CustLedgEntry.FIND('-') THEN BEGIN
                                                                      IF CustLedgEntry."Amount to Apply" <> 0 THEN  BEGIN
                                                                        CustLedgEntry."Amount to Apply" := 0;
                                                                        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
                                                                      END;
                                                                    END;
                                                                  END ELSE IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Vendor THEN BEGIN
                                                                    VendLedgEntry.SETCURRENTKEY("Document No.");
                                                                    VendLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                    IF NOT(xRec."Applies-to Doc. Type" = "Document Type"::" ") THEN
                                                                      VendLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                    VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
                                                                    VendLedgEntry.SETRANGE(Open,TRUE);
                                                                    IF VendLedgEntry.FIND('-') THEN BEGIN
                                                                      IF VendLedgEntry."Amount to Apply" <> 0 THEN  BEGIN
                                                                        VendLedgEntry."Amount to Apply" := 0;
                                                                        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
                                                                      END;
                                                                    END;
                                                                  END;

                                                                END;

                                                                IF (("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (Amount <> 0)) THEN BEGIN
                                                                  IF xRec."Applies-to Doc. No." <> '' THEN
                                                                    PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");
                                                                  SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                END;

                                                                ValidateApplyRequirements(Rec);

                                                                GetCreditCard;
                                                              END;

                                                   OnLookup=VAR
                                                              GenJnlPostLine@1000 : Codeunit 12;
                                                              PaymentToleranceMgt@1001 : Codeunit 426;
                                                              OldAppliesToDocNo@1002 : Code[20];
                                                            BEGIN
                                                              IF xRec."Line No." = 0 THEN
                                                                xRec.Amount := Amount;

                                                              OldAppliesToDocNo := "Applies-to Doc. No.";
                                                              "Applies-to Doc. No." := '';

                                                              IF "Bal. Account Type" IN
                                                                ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
                                                              THEN BEGIN
                                                                AccNo := "Bal. Account No.";
                                                                AccType := "Bal. Account Type";
                                                                CLEAR(CustLedgEntry);
                                                                CLEAR(VendLedgEntry);
                                                              END ELSE BEGIN
                                                                AccNo := "Account No.";
                                                                AccType := "Account Type";
                                                                CLEAR(CustLedgEntry);
                                                                CLEAR(VendLedgEntry);
                                                              END;

                                                              xRec."Currency Code" := "Currency Code";
                                                              xRec."Posting Date" := "Posting Date";

                                                              CASE AccType OF
                                                                AccType::Customer:
                                                                  BEGIN
                                                                    CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
                                                                    CustLedgEntry.SETRANGE("Customer No.",AccNo);
                                                                    CustLedgEntry.SETRANGE(Open,TRUE);
                                                                    CustLedgEntry.SETFILTER("Document Situation",'<>%1',CustLedgEntry."Document Situation"::"Posted BG/PO");
                                                                    IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                      CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                      CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                      CustLedgEntry.SETRANGE("Bill No.","Applies-to Bill No.");
                                                                      IF NOT CustLedgEntry.FIND('-') THEN BEGIN
                                                                        CustLedgEntry.SETRANGE("Document Type");
                                                                        CustLedgEntry.SETRANGE("Document No.");
                                                                        CustLedgEntry.SETRANGE("Bill No.");
                                                                      END;
                                                                    END;
                                                                    IF "Applies-to ID" <> '' THEN BEGIN
                                                                      CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                                                                      IF NOT CustLedgEntry.FIND('-') THEN
                                                                        CustLedgEntry.SETRANGE("Applies-to ID");
                                                                    END;
                                                                    IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
                                                                      CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                      IF NOT CustLedgEntry.FIND('-') THEN
                                                                        CustLedgEntry.SETRANGE("Document Type");
                                                                    END;
                                                                    IF  "Applies-to Doc. No." <>''THEN BEGIN
                                                                      CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                      IF NOT CustLedgEntry.FIND('-') THEN
                                                                        CustLedgEntry.SETRANGE("Document No.");
                                                                    END;
                                                                    IF Amount <> 0 THEN BEGIN
                                                                      CustLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                      IF CustLedgEntry.FIND('-') THEN;
                                                                      CustLedgEntry.SETRANGE(Positive);
                                                                    END;
                                                                    ApplyCustEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
                                                                    ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                                                                    ApplyCustEntries.SETRECORD(CustLedgEntry);
                                                                    ApplyCustEntries.LOOKUPMODE(TRUE);
                                                                    IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                      ApplyCustEntries.GETRECORD(CustLedgEntry);
                                                                      CLEAR(ApplyCustEntries);
                                                                      IF "Currency Code" <> CustLedgEntry."Currency Code" THEN
                                                                        IF Amount = 0 THEN BEGIN
                                                                          FromCurrencyCode := GetShowCurrencyCode("Currency Code");
                                                                          ToCurrencyCode := GetShowCurrencyCode(CustLedgEntry."Currency Code");
                                                                          IF NOT
                                                                             CONFIRM(
                                                                               Text003 +
                                                                               Text004,TRUE,
                                                                               FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,
                                                                               ToCurrencyCode)
                                                                          THEN
                                                                            ERROR(Text005);
                                                                          VALIDATE("Currency Code",CustLedgEntry."Currency Code");
                                                                        END ELSE
                                                                          GenJnlApply.CheckAgainstApplnCurrency(
                                                                            "Currency Code",CustLedgEntry."Currency Code",
                                                                            GenJnlLine."Account Type"::Customer,TRUE);
                                                                      IF Amount = 0 THEN BEGIN
                                                                        CustLedgEntry.CALCFIELDS("Remaining Amount");
                                                                        IF CustLedgEntry."Amount to Apply" <> 0 THEN BEGIN
                                                                          IF GenJnlPostLine.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE)
                                                                          THEN BEGIN
                                                                            IF ABS(CustLedgEntry."Amount to Apply") >=
                                                                              ABS(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible")
                                                                            THEN
                                                                              Amount := -(CustLedgEntry."Remaining Amount" -
                                                                                CustLedgEntry."Remaining Pmt. Disc. Possible")
                                                                            ELSE
                                                                              Amount := -CustLedgEntry."Amount to Apply";
                                                                          END ELSE
                                                                            Amount := -CustLedgEntry."Amount to Apply";
                                                                        END ELSE BEGIN
                                                                        IF ("Document Type" = "Document Type"::Payment) AND
                                                                          (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice) AND
                                                                          ("Posting Date" <= CustLedgEntry."Pmt. Discount Date")
                                                                        THEN
                                                                          Amount := -(CustLedgEntry."Remaining Amount" - CustLedgEntry."Original Pmt. Disc. Possible")
                                                                        ELSE
                                                                          Amount := -CustLedgEntry."Remaining Amount";
                                                                        END;
                                                                        IF "Bal. Account Type" IN
                                                                          ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
                                                                        THEN
                                                                          Amount := -Amount;
                                                                        VALIDATE(Amount);
                                                                      END;
                                                                      "Applies-to Doc. Type" := CustLedgEntry."Document Type";
                                                                      "Applies-to Doc. No." := CustLedgEntry."Document No.";
                                                                      "Applies-to Bill No." := CustLedgEntry."Bill No.";
                                                                      "Applies-to ID" := '';
                                                                    END ELSE BEGIN
                                                                      "Applies-to Doc. No." := OldAppliesToDocNo;
                                                                      CLEAR(ApplyCustEntries);
                                                                    END;

                                                                    GetCreditCard;
                                                                  END;
                                                                AccType::Vendor:
                                                                  BEGIN
                                                                    VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
                                                                    VendLedgEntry.SETRANGE("Vendor No.",AccNo);
                                                                    VendLedgEntry.SETRANGE(Open,TRUE);
                                                                    IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                      VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                      VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                      VendLedgEntry.SETRANGE("Bill No.","Applies-to Bill No.");
                                                                      IF NOT VendLedgEntry.FIND('-') THEN BEGIN
                                                                        VendLedgEntry.SETRANGE("Document Type");
                                                                        VendLedgEntry.SETRANGE("Document No.");
                                                                        VendLedgEntry.SETRANGE("Bill No.");
                                                                      END;
                                                                    END;
                                                                    IF "Applies-to ID" <> '' THEN BEGIN
                                                                      VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                                                                      IF NOT VendLedgEntry.FIND('-') THEN
                                                                        VendLedgEntry.SETRANGE("Applies-to ID");
                                                                    END;
                                                                    IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
                                                                      VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                      IF NOT VendLedgEntry.FIND('-') THEN
                                                                        VendLedgEntry.SETRANGE("Document Type");
                                                                    END;
                                                                    IF  "Applies-to Doc. No." <>''THEN BEGIN
                                                                      VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                      IF NOT VendLedgEntry.FIND('-') THEN
                                                                        VendLedgEntry.SETRANGE("Document No.");
                                                                    END;
                                                                    IF Amount <> 0 THEN BEGIN
                                                                      VendLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                      IF VendLedgEntry.FIND('-') THEN;
                                                                      VendLedgEntry.SETRANGE(Positive);
                                                                    END;
                                                                    ApplyVendEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
                                                                    ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                                                                    ApplyVendEntries.SETRECORD(VendLedgEntry);
                                                                    ApplyVendEntries.LOOKUPMODE(TRUE);
                                                                    IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                      ApplyVendEntries.GETRECORD(VendLedgEntry);
                                                                      CLEAR(ApplyVendEntries);
                                                                      IF VendLedgEntry."Document Situation" = VendLedgEntry."Document Situation"::"Posted BG/PO" THEN
                                                                        ERROR(
                                                                          Text1100100,
                                                                          VendLedgEntry.Description);
                                                                      IF "Currency Code" <> VendLedgEntry."Currency Code" THEN
                                                                        IF Amount = 0 THEN BEGIN
                                                                          FromCurrencyCode := GetShowCurrencyCode("Currency Code");
                                                                          ToCurrencyCode := GetShowCurrencyCode(VendLedgEntry."Currency Code");
                                                                          IF NOT
                                                                             CONFIRM(
                                                                               Text003 +
                                                                               Text004,TRUE,
                                                                               FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,
                                                                               ToCurrencyCode)
                                                                          THEN
                                                                            ERROR(Text005);
                                                                          VALIDATE("Currency Code",VendLedgEntry."Currency Code");
                                                                        END ELSE
                                                                          GenJnlApply.CheckAgainstApplnCurrency(
                                                                            "Currency Code",VendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
                                                                      IF Amount = 0 THEN BEGIN
                                                                        VendLedgEntry.CALCFIELDS("Remaining Amount");
                                                                        IF VendLedgEntry."Amount to Apply" <> 0 THEN BEGIN
                                                                          IF GenJnlPostLine.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE)
                                                                          THEN BEGIN
                                                                            IF ABS(VendLedgEntry."Amount to Apply") >=
                                                                              ABS(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
                                                                            THEN
                                                                              Amount := -(VendLedgEntry."Remaining Amount" -
                                                                                VendLedgEntry."Remaining Pmt. Disc. Possible")
                                                                            ELSE
                                                                              Amount := -VendLedgEntry."Amount to Apply";
                                                                          END ELSE
                                                                            Amount := -VendLedgEntry."Amount to Apply";
                                                                        END ELSE BEGIN
                                                                        IF ("Document Type" = "Document Type"::Payment) AND
                                                                          (VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice) AND
                                                                          ("Posting Date" <= VendLedgEntry."Pmt. Discount Date")
                                                                        THEN
                                                                          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Original Pmt. Disc. Possible")
                                                                        ELSE
                                                                          Amount := -VendLedgEntry."Remaining Amount";
                                                                        END;
                                                                        IF "Bal. Account Type" IN
                                                                          ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
                                                                        THEN
                                                                          Amount := -Amount;
                                                                        VALIDATE(Amount);
                                                                      END;
                                                                      "Applies-to Doc. Type" := VendLedgEntry."Document Type";
                                                                      "Applies-to Doc. No." := VendLedgEntry."Document No.";
                                                                      "Applies-to Bill No." := VendLedgEntry."Bill No.";
                                                                      "Applies-to ID" := '';

                                                                      //$002 INCOMING
                                                                      // Almacenar el numero de documento externo

                                                                      "External Document No." := VendLedgEntry."External Document No.";
                                                                    END ELSE BEGIN
                                                                      "Applies-to Doc. No." := OldAppliesToDocNo;
                                                                      CLEAR(ApplyVendEntries);
                                                                    END;
                                                                  END;
                                                                ELSE
                                                                  "Applies-to Doc. No." := OldAppliesToDocNo;
                                                              END;

                                                              IF (xRec.Amount <> 0) THEN
                                                                IF NOT PaymentToleranceMgt.PmtTolGenJnl(Rec) THEN
                                                                  EXIT;
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ESP=Liq. por n§ documento] }
    { 38  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                IF "Document Type" = "Document Type"::Invoice THEN
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    PaymentTerms.VerifyMaxNoDaysTillDueDate("Due Date","Document Date",FIELDCAPTION("Due Date"));
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento] }
    { 39  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ESP=Fecha dto. P.P.] }
    { 40  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              ESP=% Dto. P.P.];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 42  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                IF ("Job No." = xRec."Job No.") THEN
                                                                  EXIT;

                                                                SourceCodeSetup.GET;
                                                                IF "Source Code" <> SourceCodeSetup."Job G/L WIP" THEN
                                                                  VALIDATE("Job Task No.",'');
                                                                IF "Job No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Account Type","Account Type"::"G/L Account");
                                                                IF "Bal. Account No." <> '' THEN
                                                                  TESTFIELD("Bal. Account Type","Bal. Account Type"::"G/L Account");
                                                                Job.GET("Job No.");
                                                                Job.TestBlocked;
                                                                "Job Currency Code" := Job."Currency Code";

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=[ENU=Job No.;
                                                              ESP=N§ proyecto] }
    { 43  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;VAT Amount          ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE);
                                                                IF NOT ("VAT Calculation Type" IN
                                                                  ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"])
                                                                THEN
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("VAT Calculation Type"),
                                                                    "VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT");
                                                                IF "VAT Amount" <> 0 THEN BEGIN
                                                                  TESTFIELD("VAT %");
                                                                  TESTFIELD(Amount);
                                                                END;

                                                                GetCurrency;
                                                                "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                IF "VAT Amount" * Amount < 0 THEN
                                                                  IF "VAT Amount" > 0 THEN
                                                                    ERROR(Text011,FIELDCAPTION("VAT Amount"))
                                                                  ELSE
                                                                    ERROR(Text012,FIELDCAPTION("VAT Amount"));

                                                                "VAT Base Amount" := Amount - "VAT Amount";

                                                                "VAT Difference" :=
                                                                  "VAT Amount" -
                                                                  ROUND(
                                                                    Amount * "VAT %" / (100 + "VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                IF ABS("VAT Difference") > Currency."Max. VAT Difference Allowed" THEN
                                                                  ERROR(Text013,FIELDCAPTION("VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                IF "Currency Code" = '' THEN
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                ELSE
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor"));
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=VAT Amount;
                                                              ESP=Importe IVA];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 45  ;   ;VAT Posting         ;Option        ;CaptionML=[ENU=VAT Posting;
                                                              ESP=Tipo mov. IVA];
                                                   OptionCaptionML=[ENU=Automatic VAT Entry,Manual VAT Entry;
                                                                    ESP=Autom tico,Manual];
                                                   OptionString=Automatic VAT Entry,Manual VAT Entry;
                                                   Editable=No }
    { 47  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                "Due Date" := 0D;
                                                                "Pmt. Discount Date" := 0D;
                                                                "Payment Discount %" := 0;
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
                                                                THEN
                                                                  CASE "Document Type" OF
                                                                    "Document Type"::Invoice:
                                                                       BEGIN
                                                                         IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                           PaymentTerms.GET("Payment Terms Code");
                                                                           "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                           AdjustDueDate(PaymentTerms.CalculateMaxDueDate("Document Date"));
                                                                           "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                           "Payment Discount %" := PaymentTerms."Discount %";
                                                                         END;
                                                                       END;
                                                                    "Document Type"::Bill:
                                                                       BEGIN
                                                                         IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                           PaymentTerms.GET("Payment Terms Code");
                                                                           "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                           AdjustDueDate(31129999D);
                                                                         END;
                                                                       END;
                                                                    "Document Type"::"Credit Memo":
                                                                      BEGIN
                                                                        IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                          PaymentTerms.GET("Payment Terms Code");
                                                                          IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                            "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                            AdjustDueDate(31129999D);
                                                                            "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                            "Payment Discount %" := PaymentTerms."Discount %";
                                                                          END ELSE
                                                                            "Due Date" := "Document Date";
                                                                        END;
                                                                      END;
                                                                    ELSE
                                                                      "Due Date" := "Document Date";
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ESP=C¢d. trminos pago] }
    { 48  ;   ;Applies-to ID       ;Code20        ;OnValidate=BEGIN
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN
                                                                  ClearCustVendApplnEntry;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ESP=Liq. por id.] }
    { 50  ;   ;Business Unit Code  ;Code10        ;TableRelation="Business Unit";
                                                   CaptionML=[ENU=Business Unit Code;
                                                              ESP=C¢d. empresa] }
    { 51  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              ESP=Nombre secci¢n diario] }
    { 52  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ESP=C¢d. auditor¡a] }
    { 53  ;   ;Recurring Method    ;Option        ;OnValidate=BEGIN
                                                                IF "Recurring Method" IN
                                                                   ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]
                                                                THEN
                                                                  TESTFIELD("Currency Code",'');
                                                              END;

                                                   CaptionML=[ENU=Recurring Method;
                                                              ESP=Periodicidad];
                                                   OptionCaptionML=[ENU=" ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance";
                                                                    ESP=" ,F  Fijo,V  Variable,S Saldo,CF Contraasiento fijo,CV Contraasiento variable,CS Contraasiento saldo"];
                                                   OptionString=[ ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance];
                                                   BlankZero=Yes }
    { 54  ;   ;Expiration Date     ;Date          ;CaptionML=[ENU=Expiration Date;
                                                              ESP=Fecha caducidad] }
    { 55  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=[ENU=Recurring Frequency;
                                                              ESP=Frecuencia repetici¢n] }
    { 56  ;   ;Allocated Amt. (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Gen. Jnl. Allocation".Amount WHERE (Journal Template Name=FIELD(Journal Template Name),
                                                                                                        Journal Batch Name=FIELD(Journal Batch Name),
                                                                                                        Journal Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Allocated Amt. (LCY);
                                                              ESP=Distribuir importe (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 57  ;   ;Gen. Posting Type   ;Option        ;OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                IF ("Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Gen. Posting Type");
                                                                CheckVATInAlloc;
                                                                IF "Gen. Posting Type" > 0 THEN
                                                                  VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Posting Type;
                                                              ESP=Tipo IVA];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    ESP=" ,Compra,Venta,Liquidaci¢n"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 58  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Bus. Posting Group",'');
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ESP=Grupo contable negocio] }
    { 59  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Prod. Posting Group",'');
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ESP=Grupo contable producto] }
    { 60  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ESP=Tipo c lculo IVA];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax,No Taxable VAT;
                                                                    ESP=Normal,Reversi¢n,Total,Impto. venta,No sujeto];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax,No Taxable VAT;
                                                   Editable=No }
    { 61  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ESP=Op. triangular];
                                                   Editable=No }
    { 62  ;   ;Allow Application   ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Application;
                                                              ESP=Permite liq. por] }
    { 63  ;   ;Bal. Account Type   ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                    "Account Type"::"IC Partner"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                    "Bal. Account Type"::"IC Partner"])
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Bal. Account No.",'');
                                                                VALIDATE("IC Partner G/L Acc. No.",'');
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN BEGIN
                                                                  VALIDATE("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                  VALIDATE("Bal. Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Bal. Gen. Prod. Posting Group",'');
                                                                END ELSE
                                                                  IF "Account Type" IN [
                                                                     "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]
                                                                  THEN
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;
                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF xRec."Bal. Account Type" IN
                                                                   [xRec."Bal. Account Type"::Customer,xRec."Bal. Account Type"::Vendor]
                                                                THEN BEGIN
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                END;
                                                                IF ("Account Type" IN [
                                                                    "Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]) AND
                                                                  ("Bal. Account Type" IN [
                                                                    "Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"])
                                                                THEN BEGIN
                                                                  VALIDATE("Payment Terms Code",'');
                                                                END;

                                                                IF ("Bal. Account Type" = "Bal. Account Type"::"IC Partner") THEN BEGIN
                                                                  GetTemplate;
                                                                  IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                                                                    FIELDERROR("Bal. Account Type");
                                                                END;
                                                                IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=[ENU=Bal. Account Type;
                                                              ESP=Tipo contrapartida];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    ESP=Cuenta,Cliente,Proveedor,Banco,Activo,Empresa vinculada asociada];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 64  ;   ;Bal. Gen. Posting Type;Option      ;OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                IF ("Bal. Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Bal. Gen. Posting Type");
                                                                IF "Bal. Gen. Posting Type" > 0 THEN
                                                                  VALIDATE("Bal. VAT Prod. Posting Group");

                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Posting Type;
                                                              ESP=Tipo regis. contrapartida];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    ESP=" ,Compra,Venta,Liquidaci¢n"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 65  ;   ;Bal. Gen. Bus. Posting Group;Code10;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                                                                IF xRec."Bal. Gen. Bus. Posting Group" <> "Bal. Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Bal. Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("Bal. VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Bus. Posting Group;
                                                              ESP=Gr. contable negocio contrap.] }
    { 66  ;   ;Bal. Gen. Prod. Posting Group;Code10;
                                                   TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                                                                IF xRec."Bal. Gen. Prod. Posting Group" <> "Bal. Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Bal. Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("Bal. VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Prod. Posting Group;
                                                              ESP=Gr. contable producto contrap.] }
    { 67  ;   ;Bal. VAT Calculation Type;Option   ;CaptionML=[ENU=Bal. VAT Calculation Type;
                                                              ESP=Tipo c lculo IVA contrap.];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax,No Taxable VAT;
                                                                    ESP=Normal,Reversi¢n,Total,Impto. venta,No sujeto];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax,No Taxable VAT;
                                                   Editable=No }
    { 68  ;   ;Bal. VAT %          ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                CASE "Bal. VAT Calculation Type" OF
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "Bal. VAT Calculation Type"::"No Taxable VAT":
                                                                    BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND(-Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "Bal. VAT Base Amount" :=
                                                                        ROUND(-Amount - "Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    "Bal. VAT Amount" := -Amount;
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) AND
                                                                       "Bal. Use Tax"
                                                                    THEN BEGIN
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                    END ELSE BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        -(Amount -
                                                                          SalesTaxCalculate.ReverseCalculateTax(
                                                                            "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                            "Posting Date",Amount,Quantity,"Currency Factor"));
                                                                      IF Amount + "Bal. VAT Amount" <> 0 THEN
                                                                        "Bal. VAT %" := ROUND(100 * (-"Bal. VAT Amount") / (Amount + "Bal. VAT Amount"),0.000001)
                                                                      ELSE
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");
                                                                "Bal. VAT Difference" := 0;

                                                                IF "Currency Code" = '' THEN
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                ELSE
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                      "Posting Date","Currency Code",
                                                                      "Bal. VAT Amount","Currency Factor"));
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT %;
                                                              ESP=% IVA contrap.];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 69  ;   ;Bal. VAT Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE);
                                                                IF NOT ("Bal. VAT Calculation Type" IN
                                                                  ["Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT"])
                                                                THEN
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                    "Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT");
                                                                IF "Bal. VAT Amount" <> 0 THEN BEGIN
                                                                  TESTFIELD("Bal. VAT %");
                                                                  TESTFIELD(Amount);
                                                                END;

                                                                GetCurrency;
                                                                "Bal. VAT Amount" :=
                                                                  ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                IF "Bal. VAT Amount" * Amount > 0 THEN
                                                                  IF "Bal. VAT Amount" > 0 THEN
                                                                    ERROR(Text011,FIELDCAPTION("Bal. VAT Amount"))
                                                                  ELSE
                                                                    ERROR(Text012,FIELDCAPTION("Bal. VAT Amount"));

                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");

                                                                "Bal. VAT Difference" :=
                                                                  "Bal. VAT Amount" -
                                                                  ROUND(
                                                                    -Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                IF ABS("Bal. VAT Difference") > Currency."Max. VAT Difference Allowed" THEN
                                                                  ERROR(
                                                                    Text013,FIELDCAPTION("Bal. VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                IF "Currency Code" = '' THEN
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                ELSE
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                      "Posting Date","Currency Code",
                                                                      "Bal. VAT Amount","Currency Factor"));
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Amount;
                                                              ESP=Importe IVA contrap.];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Bank Payment Type   ;Option        ;OnValidate=BEGIN
                                                                IF ("Bank Payment Type" <> "Bank Payment Type"::" ") AND
                                                                   ("Account Type" <> "Account Type"::"Bank Account") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
                                                                THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                IF ("Account Type" = "Account Type"::"Fixed Asset") AND
                                                                   ("Bank Payment Type" <> "Bank Payment Type"::" ")
                                                                THEN
                                                                  FIELDERROR("Account Type");
                                                              END;

                                                   CaptionML=[ENU=Bank Payment Type;
                                                              ESP=Tipo pago por banco];
                                                   OptionCaptionML=[ENU=" ,Computer Check,Manual Check,Transfer,,,,Electronic Payment";
                                                                    ESP=" ,Cheque autom tico,Cheque manual,Transferencia,,,,Pago electr¢nico"];
                                                   OptionString=[ ,Computer Check,Manual Check,Transferencia,,,,Electronic Payment] }
    { 71  ;   ;VAT Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "VAT Base Amount" := ROUND("VAT Base Amount",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"No Taxable VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        "VAT Base Amount" * (1 + "VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF "VAT Base Amount" <> 0 THEN
                                                                      FIELDERROR(
                                                                        "VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                                                                       "Use Tax"
                                                                    THEN BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    END ELSE BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable","Posting Date",
                                                                          "VAT Base Amount",Quantity,"Currency Factor");
                                                                      IF "VAT Base Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base Amount",0.000001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=VAT Base Amount;
                                                              ESP=Importe base IVA];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Bal. VAT Base Amount;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Bal. VAT Base Amount" := ROUND("Bal. VAT Base Amount",Currency."Amount Rounding Precision");
                                                                CASE "Bal. VAT Calculation Type" OF
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "Bal. VAT Calculation Type"::"No Taxable VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        -"Bal. VAT Base Amount" * (1 + "Bal. VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    IF "Bal. VAT Base Amount" <> 0 THEN
                                                                      FIELDERROR(
                                                                        "Bal. VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                          "Bal. VAT Calculation Type"));
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) AND
                                                                       "Bal. Use Tax"
                                                                    THEN BEGIN
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    END ELSE BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                          "Posting Date","Bal. VAT Base Amount",Quantity,"Currency Factor");
                                                                      IF "Bal. VAT Base Amount" <> 0 THEN
                                                                        "Bal. VAT %" := ROUND(100 * "Bal. VAT Amount" / "Bal. VAT Base Amount",0.000001)
                                                                      ELSE
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Base Amount;
                                                              ESP=Imp. base IVA contrap.];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 73  ;   ;Correction          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Correction;
                                                              ESP=Correcci¢n] }
    { 75  ;   ;Check Printed       ;Boolean       ;CaptionML=[ENU=Check Printed;
                                                              ESP=Cheque impreso];
                                                   Editable=Yes }
    { 76  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              ESP=Fecha emisi¢n documento];
                                                   ClosingDates=Yes }
    { 77  ;   ;External Document No.;Code20       ;CaptionML=[ENU=External Document No.;
                                                              ESP=N§ documento externo] }
    { 78  ;   ;Source Type         ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '') OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '')
                                                                THEN
                                                                  UpdateSource
                                                                ELSE
                                                                  "Source No." := '';
                                                              END;

                                                   CaptionML=[ENU=Source Type;
                                                              ESP=Tipo procedencia mov.];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bank Account,Fixed Asset";
                                                                    ESP=" ,Cliente,Proveedor,Banco,Activo"];
                                                   OptionString=[ ,Customer,Vendor,Bank Account,Fixed Asset] }
    { 79  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Source Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '') OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '')
                                                                THEN
                                                                  UpdateSource;
                                                              END;

                                                   CaptionML=[ENU=Source No.;
                                                              ESP=C¢d. procedencia mov.] }
    { 80  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posting No. Series;
                                                              ESP=N§ serie registro] }
    { 82  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ESP=C¢d.  rea impuesto] }
    { 83  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ESP=Sujeto a impuesto] }
    { 84  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ESP=C¢d. grupo impuesto] }
    { 85  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Gen. Posting Type","Gen. Posting Type"::Purchase);
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Use Tax;
                                                              ESP=Utilizar impuesto] }
    { 86  ;   ;Bal. Tax Area Code  ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Area Code;
                                                              ESP=C¢d.  rea impto. contrap.] }
    { 87  ;   ;Bal. Tax Liable     ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Liable;
                                                              ESP=Sujeto a impto. contrap.] }
    { 88  ;   ;Bal. Tax Group Code ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Group Code;
                                                              ESP=C¢d. grupo impto. contrap.] }
    { 89  ;   ;Bal. Use Tax        ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::Purchase);
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Use Tax;
                                                              ESP=Util. impto. contrap.] }
    { 90  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Bus. Posting Group",'');

                                                                VALIDATE("VAT Prod. Posting Group");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ESP=Grupo registro IVA neg.] }
    { 91  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Prod. Posting Group",'');

                                                                CheckVATInAlloc;

                                                                "VAT %" := 0;
                                                                "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
                                                                IF "Gen. Posting Type" <> 0 THEN BEGIN
                                                                  IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                    VATPostingSetup.INIT;
                                                                  "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  CASE "VAT Calculation Type" OF
                                                                    "VAT Calculation Type"::"Normal VAT",
                                                                    "VAT Calculation Type"::"No Taxable VAT":
                                                                      "VAT %" := VATPostingSetup."VAT+EC %";
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      CASE "Gen. Posting Type" OF
                                                                        "Gen. Posting Type"::Sale:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                            TESTFIELD("Account No.",VATPostingSetup."Sales VAT Account");
                                                                          END;
                                                                        "Gen. Posting Type"::Purchase:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                            TESTFIELD("Account No.",VATPostingSetup."Purchase VAT Account");
                                                                          END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                VALIDATE("VAT %");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                //$004 INCOMING
                                                                // Validar el regimen de impuestos

                                                                VALIDATE(Regimen);
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ESP=Grupo registro IVA prod.] }
    { 92  ;   ;Bal. VAT Bus. Posting Group;Code10 ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN
                                                                  TESTFIELD("Bal. VAT Bus. Posting Group",'');

                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Bus. Posting Group;
                                                              ESP=Gr. registro IVA neg. contrap.] }
    { 93  ;   ;Bal. VAT Prod. Posting Group;Code10;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN
                                                                  TESTFIELD("Bal. VAT Prod. Posting Group",'');

                                                                "Bal. VAT %" := 0;
                                                                "Bal. VAT Calculation Type" := "Bal. VAT Calculation Type"::"Normal VAT";
                                                                IF "Bal. Gen. Posting Type" <> 0 THEN BEGIN
                                                                  IF NOT VATPostingSetup.GET("Bal. VAT Bus. Posting Group","Bal. VAT Prod. Posting Group") THEN
                                                                    VATPostingSetup.INIT;
                                                                  "Bal. VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  CASE "Bal. VAT Calculation Type" OF
                                                                    "Bal. VAT Calculation Type"::"Normal VAT",
                                                                    "Bal. VAT Calculation Type"::"No Taxable VAT":
                                                                      "Bal. VAT %" := VATPostingSetup."VAT+EC %";
                                                                    "Bal. VAT Calculation Type"::"Full VAT":
                                                                      CASE "Bal. Gen. Posting Type" OF
                                                                        "Bal. Gen. Posting Type"::Sale:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                            TESTFIELD("Bal. Account No.",VATPostingSetup."Sales VAT Account");
                                                                          END;
                                                                        "Bal. Gen. Posting Type"::Purchase:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                            TESTFIELD("Bal. Account No.",VATPostingSetup."Purchase VAT Account");
                                                                          END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Prod. Posting Group;
                                                              ESP=Gr. registro IVA prod. contrp.] }
    { 95  ;   ;Additional-Currency Posting;Option ;CaptionML=[ENU=Additional-Currency Posting;
                                                              ESP=Registro div.-adic.];
                                                   OptionCaptionML=[ENU=None,Amount Only,Additional-Currency Amount Only;
                                                                    ESP=Ninguno,S¢lo importe,S¢lo importe div.-adic.];
                                                   OptionString=None,Amount Only,Additional-Currency Amount Only;
                                                   Editable=No }
    { 98  ;   ;FA Add.-Currency Factor;Decimal    ;CaptionML=[ENU=FA Add.-Currency Factor;
                                                              ESP=A/F Factor div.-adic.];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 99  ;   ;Source Currency Code;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Source Currency Code;
                                                              ESP=C¢d. divisa origen];
                                                   Editable=No }
    { 100 ;   ;Source Currency Amount;Decimal     ;CaptionML=[ENU=Source Currency Amount;
                                                              ESP=Importe divisa origen];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 101 ;   ;Source Curr. VAT Base Amount;Decimal;
                                                   CaptionML=[ENU=Source Curr. VAT Base Amount;
                                                              ESP=Importe base IVA divisa origen];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;Source Curr. VAT Amount;Decimal    ;CaptionML=[ENU=Source Curr. VAT Amount;
                                                              ESP=Importe IVA divisa origen];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 103 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              ESP=% Dto. base IVA];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 104 ;   ;VAT Amount (LCY)    ;Decimal       ;CaptionML=[ENU=VAT Amount (LCY);
                                                              ESP=Importe IVA (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 105 ;   ;VAT Base Amount (LCY);Decimal      ;CaptionML=[ENU=VAT Base Amount (LCY);
                                                              ESP=Importe base IVA (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 106 ;   ;Bal. VAT Amount (LCY);Decimal      ;CaptionML=[ENU=Bal. VAT Amount (LCY);
                                                              ESP=Importe IVA contrap. (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 107 ;   ;Bal. VAT Base Amount (LCY);Decimal ;CaptionML=[ENU=Bal. VAT Base Amount (LCY);
                                                              ESP=Importe base IVA contrap. (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 108 ;   ;Reversing Entry     ;Boolean       ;CaptionML=[ENU=Reversing Entry;
                                                              ESP=Mov. reversi¢n];
                                                   Editable=No }
    { 109 ;   ;Allow Zero-Amount Posting;Boolean  ;CaptionML=[ENU=Allow Zero-Amount Posting;
                                                              ESP=Permitir cero-registro importe];
                                                   Editable=No }
    { 110 ;   ;Ship-to/Order Address Code;Code10  ;TableRelation=IF (Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.));
                                                   CaptionML=[ENU=Ship-to/Order Address Code;
                                                              ESP=Enviar a/C¢d. dir. pedido] }
    { 111 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ESP=Diferencia  IVA];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 112 ;   ;Bal. VAT Difference ;Decimal       ;CaptionML=[ENU=Bal. VAT Difference;
                                                              ESP=Diferencia importe IVA];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              ESP=C¢digo socio IC];
                                                   Editable=No }
    { 114 ;   ;IC Direction        ;Option        ;CaptionML=[ENU=IC Direction;
                                                              ESP=Direcci¢n env¡o IC];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ESP=Saliente,Entrante];
                                                   OptionString=Outgoing,Incoming }
    { 116 ;   ;IC Partner G/L Acc. No.;Code20     ;TableRelation="IC G/L Account";
                                                   OnValidate=VAR
                                                                ICGLAccount@1000 : Record 410;
                                                              BEGIN
                                                                IF "IC Partner G/L Acc. No." <> '' THEN BEGIN
                                                                  GetTemplate;
                                                                  GenJnlTemplate.TESTFIELD(Type,GenJnlTemplate.Type::Intercompany);
                                                                  IF ICGLAccount.GET("IC Partner G/L Acc. No.") THEN
                                                                    ICGLAccount.TESTFIELD(Blocked,FALSE);
                                                                END
                                                              END;

                                                   CaptionML=[ENU=IC Partner G/L Acc. No.;
                                                              ESP=N§ cuenta IC asociada] }
    { 117 ;   ;IC Partner Transaction No.;Integer ;CaptionML=[ENU=IC Partner Transaction No.;
                                                              ESP=N§ transacci¢n IC asociada];
                                                   Editable=No }
    { 118 ;   ;Sell-to/Buy-from No.;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Sell-to/Buy-from No." THEN
                                                                  UpdateCountryCodeAndVATRegNo("Sell-to/Buy-from No.");
                                                              END;

                                                   CaptionML=[ENU=Sell-to/Buy-from No.;
                                                              ESP=Venta a/Compra a-N§] }
    { 119 ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',0);
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ESP=CIF/NIF] }
    { 120 ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Registration No.");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ESP=C¢d. pa¡s/regi¢n] }
    { 121 ;   ;Prepayment          ;Boolean       ;CaptionML=[ENU=Prepayment;
                                                              ESP=Prepago] }
    { 122 ;   ;Financial Void      ;Boolean       ;CaptionML=[ENU=Financial Void;
                                                              ESP=Vac¡o financiero];
                                                   Editable=No }
    { 827 ;   ;Credit Card No.     ;Code20        ;TableRelation=IF (Account Type=CONST(Customer),
                                                                     Document Type=FILTER(Payment|Refund),
                                                                     Bal. Account Type=CONST(Bank Account)) "DO Payment Credit Card" WHERE (Customer No.=FIELD(Account No.));
                                                   OnValidate=VAR
                                                                DOPaymentMgt@1000 : Codeunit 825;
                                                              BEGIN
                                                                CheckNoCardTransactEntryExist(xRec);
                                                                IF "Credit Card No." = '' THEN
                                                                  EXIT;

                                                                DOPaymentMgt.CheckCreditCardData("Credit Card No.");
                                                              END;

                                                   CaptionML=[ENU=Credit Card No.;
                                                              ESP=N§ tarjeta de crdito] }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                IF "Job Task No." = '' THEN BEGIN
                                                                  "Job Quantity" := 0;
                                                                  "Job Currency Factor" := 0;
                                                                  "Job Currency Code" := '';
                                                                  "Job Unit Price" := 0;
                                                                  "Job Total Price" := 0;
                                                                  "Job Line Amount" := 0;
                                                                  "Job Line Discount Amount" := 0;
                                                                  "Job Unit Cost" := 0;
                                                                  "Job Total Cost" := 0;
                                                                  "Job Line Discount %" := 0;

                                                                  "Job Unit Price (LCY)" := 0;
                                                                  "Job Total Price (LCY)" := 0;
                                                                  "Job Line Amount (LCY)" := 0;
                                                                  "Job Line Disc. Amount (LCY)" := 0;
                                                                  "Job Unit Cost (LCY)" := 0;
                                                                  "Job Total Cost (LCY)" := 0;
                                                                  EXIT;
                                                                END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Task No.;
                                                              ESP=N§ tarea proyecto] }
    { 1002;   ;Job Unit Price (LCY);Decimal       ;CaptionML=[ENU=Job Unit Price (LCY);
                                                              ESP=Precio venta proyecto (DL)];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1003;   ;Job Total Price (LCY);Decimal      ;CaptionML=[ENU=Job Total Price (LCY);
                                                              ESP=Precio total proyecto (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1004;   ;Job Quantity        ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Quantity;
                                                              ESP=Cantidad proyecto];
                                                   DecimalPlaces=0:5 }
    { 1005;   ;Job Unit Cost (LCY) ;Decimal       ;CaptionML=[ENU=Job Unit Cost (LCY);
                                                              ESP=Coste unitario proyecto (DL)];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1006;   ;Job Line Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount %","Job Line Discount %");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Discount %;
                                                              ESP=% dto. l¡nea proyecto];
                                                   AutoFormatType=1 }
    { 1007;   ;Job Line Disc. Amount (LCY);Decimal;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount Amount (LCY)","Job Line Disc. Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Disc. Amount (LCY);
                                                              ESP=Importe dto. l¡nea proyecto (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1008;   ;Job Unit Of Measure Code;Code10    ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Job Unit Of Measure Code;
                                                              ESP=C¢d. unidad medida proyecto] }
    { 1009;   ;Job Line Type       ;Option        ;CaptionML=[ENU=Job Line Type;
                                                              ESP=Tipo l¡nea proyecto];
                                                   OptionCaptionML=[ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                                    ESP=" ,Previsi¢n,Contrato,Previsi¢n y contrato"];
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1010;   ;Job Unit Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Unit Price","Job Unit Price");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Unit Price;
                                                              ESP=Precio venta proyecto];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1011;   ;Job Total Price     ;Decimal       ;CaptionML=[ENU=Job Total Price;
                                                              ESP=Precio total proyecto];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1012;   ;Job Unit Cost       ;Decimal       ;CaptionML=[ENU=Job Unit Cost;
                                                              ESP=Coste unitario proyecto];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1013;   ;Job Total Cost      ;Decimal       ;CaptionML=[ENU=Job Total Cost;
                                                              ESP=Coste total proyecto];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1014;   ;Job Line Discount Amount;Decimal   ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount Amount","Job Line Discount Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Discount Amount;
                                                              ESP=Importe dto. l¡nea proyecto];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1015;   ;Job Line Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Amount","Job Line Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Amount;
                                                              ESP=Importe l¡nea proyecto];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1016;   ;Job Total Cost (LCY);Decimal       ;CaptionML=[ENU=Job Total Cost (LCY);
                                                              ESP=Coste total proyecto (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1017;   ;Job Line Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Amount (LCY)","Job Line Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Amount (LCY);
                                                              ESP=Importe l¡nea proyecto (DL)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1018;   ;Job Currency Factor ;Decimal       ;CaptionML=[ENU=Job Currency Factor;
                                                              ESP=Factor divisa proyecto] }
    { 1019;   ;Job Currency Code   ;Code10        ;OnValidate=BEGIN
                                                                IF ("Job Currency Code" <> xRec."Job Currency Code") OR ("Job Currency Code" <> '') THEN
                                                                  IF JobTaskIsSet THEN BEGIN
                                                                    CreateTempJobJnlLine;
                                                                    UpdatePricesFromJobJnlLine;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Job Currency Code;
                                                              ESP=C¢digo divisa proyecto] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ESP=N§ campa¤a] }
    { 5400;   ;Prod. Order No.     ;Code20        ;CaptionML=[ENU=Prod. Order No.;
                                                              ESP=N§ orden producci¢n];
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ESP=A/F Fecha registro] }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                IF  NOT (("Account Type" = "Account Type"::"Fixed Asset") OR
                                                                    ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")) AND
                                                                    ("FA Posting Type" = "FA Posting Type"::" ")
                                                                THEN BEGIN
                                                                  "FA Posting Date" := 0D;
                                                                  "Salvage Value" := 0;
                                                                  "No. of Depreciation Days" := 0;
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                                  "Maintenance Code" := '';
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                  "Duplicate in Depreciation Book" := '';
                                                                  "Use Duplication List" := FALSE;
                                                                  "FA Reclassification Entry" := FALSE;
                                                                  "FA Error Entry No." := 0;
                                                                END;

                                                                IF "FA Posting Type" <> "FA Posting Type"::"Acquisition Cost" THEN
                                                                  TESTFIELD("Insurance No.",'');
                                                                IF "FA Posting Type" <> "FA Posting Type"::Maintenance THEN
                                                                  TESTFIELD("Maintenance Code",'');
                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;
                                                              END;

                                                   CaptionML=[ENU=FA Posting Type;
                                                              ESP=A/F Tipo registro];
                                                   OptionCaptionML=[ENU=" ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance";
                                                                    ESP=" ,Coste,Amortizaci¢n,Depreciaci¢n,Apreciaci¢n,Especial,Provisi¢n,Venta/Baja,Mantenimiento"];
                                                   OptionString=[ ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                IF "Depreciation Book Code" = '' THEN
                                                                  EXIT;

                                                                IF ("Account No." <> '') AND
                                                                   ("Account Type" = "Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  FADeprBook.GET("Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                END;

                                                                IF ("Bal. Account No." <> '') AND
                                                                   ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  FADeprBook.GET("Bal. Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                END;
                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ESP=C¢d. libro amortizaci¢n] }
    { 5603;   ;Salvage Value       ;Decimal       ;CaptionML=[ENU=Salvage Value;
                                                              ESP=Valor residual];
                                                   AutoFormatType=1 }
    { 5604;   ;No. of Depreciation Days;Integer   ;CaptionML=[ENU=No. of Depreciation Days;
                                                              ESP=N§ d¡as amortizaci¢n];
                                                   BlankZero=Yes }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ESP=A/F Amort. hasta fecha reg.] }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;CaptionML=[ENU=Depr. Acquisition Cost;
                                                              ESP=Amort. hasta coste] }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   OnValidate=BEGIN
                                                                IF "Maintenance Code" <> '' THEN
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::Maintenance);
                                                              END;

                                                   CaptionML=[ENU=Maintenance Code;
                                                              ESP=C¢d. mantenimiento] }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   OnValidate=BEGIN
                                                                IF "Insurance No." <> '' THEN
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::"Acquisition Cost");
                                                              END;

                                                   CaptionML=[ENU=Insurance No.;
                                                              ESP=N§ seguro] }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF "Budgeted FA No." <> '' THEN BEGIN
                                                                  FA.GET("Budgeted FA No.");
                                                                  FA.TESTFIELD(FA."Budgeted Asset",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Budgeted FA No.;
                                                              ESP=A/F N§ pptdo.] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ESP=Duplicado en libro amort.] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   CaptionML=[ENU=Use Duplication List;
                                                              ESP=Utilizar lista duplicados] }
    { 5614;   ;FA Reclassification Entry;Boolean  ;CaptionML=[ENU=FA Reclassification Entry;
                                                              ESP=A/F Mov. reclasificaci¢n] }
    { 5615;   ;FA Error Entry No.  ;Integer       ;TableRelation="FA Ledger Entry";
                                                   CaptionML=[ENU=FA Error Entry No.;
                                                              ESP=A/F N§ mov. anulado];
                                                   BlankZero=Yes }
    { 5616;   ;Index Entry         ;Boolean       ;CaptionML=[ENU=Index Entry;
                                                              ESP=Mov. valor ajuste] }
    { 10700;  ;Transaction No.     ;Integer       ;CaptionML=[ENU=Transaction No.;
                                                              ESP=N§ asiento];
                                                   BlankZero=Yes }
    { 10701;  ;Pmt. Discount Given/Rec. (LCY);Decimal;
                                                   CaptionML=[ENU=Pmt. Discount Given/Rec. (LCY);
                                                              ESP=Dto. P.P. (DL)];
                                                   Editable=Yes;
                                                   AutoFormatType=1 }
    { 10702;  ;Generate AutoInvoices;Boolean      ;CaptionML=[ENU=Generate AutoInvoices;
                                                              ESP=Generar autofacturas] }
    { 10703;  ;AutoDoc. No.        ;Code20        ;CaptionML=[ENU=AutoDoc. No.;
                                                              ESP=N§ autodoc.] }
    { 10704;  ;Payment Type        ;Option        ;OnValidate=BEGIN
                                                                IF ("Payment Type" = "Payment Type"::" ") OR (xRec."Payment Type" <> "Payment Type") THEN
                                                                  "Statistical Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Payment Type;
                                                              ESP=Tipo pago];
                                                   OptionCaptionML=[ENU=" ,01,02";
                                                                    ESP=" ,01,02"];
                                                   OptionString=[ ,01,02] }
    { 10705;  ;Statistical Code    ;Code6         ;OnLookup=VAR
                                                              StatisticalCode@1100000 : Record 10706;
                                                              TariffNumber@1100002 : Record 260;
                                                              StatisticalCodes@1100003 : Form 10706;
                                                              TariffNumbers@1100004 : Form 310;
                                                              Selected@1100005 : Integer;
                                                              PmtTypeOptions@1100006 : Text[100];
                                                              Text1100000@1100008 : TextConst 'ENU=Select the Value from Table Statistical Code,Select the Value from Table Tariff No.;ESP=Seleccionar valor en C¢digo estad¡stico tabla,Seleccionar valor en C¢d. arancelario tabla';
                                                              TariffNo@1100007 : Text[6];
                                                            BEGIN
                                                              TESTFIELD("Payment Type");
                                                              IF "Payment Type" = "Payment Type"::"01" THEN BEGIN
                                                                PmtTypeOptions := Text1100000;
                                                                Selected := DIALOG.STRMENU(PmtTypeOptions, 1);
                                                                IF Selected = 1 THEN BEGIN
                                                                  StatisticalCodes.LOOKUPMODE(TRUE);
                                                                  IF StatisticalCodes.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                    StatisticalCodes.GETRECORD(StatisticalCode);
                                                                    "Statistical Code" := StatisticalCode.Code;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  TariffNumbers.LOOKUPMODE(TRUE);
                                                                  IF TariffNumbers.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                    TariffNumbers.GETRECORD(TariffNumber);
                                                                    TariffNumber."No." := DELCHR(FORMAT(TariffNumber."No."),'=',' ');
                                                                    TariffNo := COPYSTR(FORMAT(TariffNumber."No."),STRLEN(FORMAT(TariffNumber."No.")) - 3,4);
                                                                    TariffNo := PADSTR('',MAXSTRLEN(TariffNo) - STRLEN(TariffNo),'0') + TariffNo;
                                                                    "Statistical Code" := TariffNo;
                                                                  END;
                                                                END;
                                                              END ELSE BEGIN
                                                                StatisticalCodes.LOOKUPMODE(TRUE);
                                                                IF StatisticalCodes.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                  StatisticalCodes.GETRECORD(StatisticalCode);
                                                                  "Statistical Code" := StatisticalCode.Code;
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Statistical Code;
                                                              ESP=C¢digo estad¡stico] }
    { 10706;  ;Elect. Pmts Exported;Boolean       ;CaptionML=[ENU=Elect. Pmts Exported;
                                                              ESP=Pagos electr. exportados];
                                                   Editable=No }
    { 10707;  ;Export File Name    ;Text30        ;CaptionML=[ENU=Export File Name;
                                                              ESP=Nombre archivo exp.];
                                                   Editable=No }
    { 10708;  ;Transfer Type       ;Option        ;CaptionML=[ENU=Transfer Type;
                                                              ESP=Tipo transferencia];
                                                   OptionCaptionML=[ENU=National,International,Special;
                                                                    ESP=Nacional,Internacional,Especial];
                                                   OptionString=National,International,Special;
                                                   Editable=No }
    { 50000;  ;Marca               ;Code20        ;CaptionML=ESP=Marca;
                                                   Description=$005 }
    { 50001;  ;Tipo de Clave       ;Code10        ;TableRelation="Maestro de Claves".Clave;
                                                   CaptionML=ESP=Tipo de Clave;
                                                   Description=$005 "Maestro de Claves".Clave }
    { 50009;  ;Hotel               ;Code20        ;TableRelation=Hotel.Hotel;
                                                   CaptionML=ESP=Hotel;
                                                   Description=$005 Hotel.Hotel }
    { 50012;  ;Regimen             ;Option        ;OnValidate=BEGIN
                                                                IF VatBusGroup.GET("VAT Bus. Posting Group") THEN
                                                                  Regimen := VatBusGroup.Regimen;
                                                              END;

                                                   CaptionML=ESP=Regimen;
                                                   OptionCaptionML=ESP=Normal,Especial;
                                                   OptionString=Normal,Especial;
                                                   Description=$005 Normal,Especial }
    { 7000000;;Bill No.            ;Code20        ;CaptionML=[ENU=Bill No.;
                                                              ESP=N§ efecto] }
    { 7000001;;Applies-to Bill No. ;Code20        ;CaptionML=[ENU=Applies-to Bill No.;
                                                              ESP=Liq. por n§ efecto] }
    { 7000002;;Cust./Vendor Bank Acc. Code;Code20 ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Account No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Account No.));
                                                   CaptionML=[ENU=Cust./Vendor Bank Acc. Code;
                                                              ESP=C¢d. banco cliente/prov.] }
    { 7000003;;Pmt. Address Code   ;Code10        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Pmt. Address".Code WHERE (Customer No.=FIELD(Account No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Pmt. Address".Code WHERE (Vendor No.=FIELD(Account No.));
                                                   CaptionML=[ENU=Pmt. Address Code;
                                                              ESP=C¢d. direcci¢n pago] }
    { 7000004;;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              ESP=C¢d. forma pago] }
    { 7000100;;Traspasado          ;Boolean       ;CaptionML=ESP=Traspasado;
                                                   Description=Auditoria traspaso contable;
                                                   Editable=No }
    { 7000101;;Fecha traspaso      ;Date          ;CaptionML=ESP=Fecha traspaso;
                                                   Description=Auditoria traspaso contable }
    { 7000102;;Hora traspaso       ;Time          ;CaptionML=ESP=Hora traspaso;
                                                   Description=Auditoria traspaso contable;
                                                   Editable=No }
    { 7000103;;Usuario traspaso    ;Code20        ;CaptionML=ESP=Usuario traspaso;
                                                   Description=Auditoria traspaso contable;
                                                   Editable=No }
    { 7000104;;Tipo servicio       ;Code10        ;CaptionML=ESP=Tipo servicio;
                                                   Description=Enlace con ECOFIN;
                                                   Editable=No }
    { 7009700;;Cod. Grupo NCF      ;Code10        ;TableRelation="Grupo configuracion NCF".Codigo;
                                                   CaptionML=ESP=Cod. Grupo NCF;
                                                   Description=$010 "Grupo configuracion NCF".Codigo }
    { 7009703;;Comprobante Fiscal  ;Code20        ;CaptionML=ESP=Comprobante Fiscal;
                                                   Description=$010;
                                                   Editable=No }
    { 7009704;;Tipo factura compra ;Code10        ;TableRelation="Tipo factura compra RD";
                                                   CaptionML=ESP=Tipo factura compra;
                                                   Description=$012 Tipo factura compra RD }
    { 7010000;;DescIRPF            ;Option        ;CaptionML=ESP=DescIRPF;
                                                   OptionCaptionML=ESP=,IRPF,Descontado;
                                                   OptionString=,IRPF,Descontado;
                                                   Description=$006 ,IRPF,Descontado }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Line No.;
                                                   SumIndexFields=Balance (LCY);
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Journal Template Name,Journal Batch Name,Posting Date,Document No.;
                                                   MaintainSQLIndex=No }
    {    ;Account Type,Account No.,Applies-to Doc. Type,Applies-to Doc. No. }
    {    ;Journal Template Name,Journal Batch Name,Posting Date,Transaction No. }
    {    ;Journal Template Name,Journal Batch Name,Transfer Type }
    { No ;Marca                                   ;KeyGroups=INCOMING;
                                                   MaintainSQLIndex=No }
    {    ;Journal Template Name,Journal Batch Name,Account No.;
                                                   KeyGroups=INCOMING;
                                                   MaintainSQLIndex=No }
    { No ;Applies-to Doc. No.,Journal Template Name,Journal Batch Name;
                                                   KeyGroups=INCOMING;
                                                   MaintainSQLIndex=No }
    {    ;Journal Template Name,Journal Batch Name,Transaction No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 or %2 must be G/L Account or Bank Account.;ESP=%1 o %2 deben ser de tipo Cuenta o Banco.';
      Text001@1001 : TextConst 'ENU=You must not specify %1 when %2 is %3.;ESP=No se debe especificar %1 cuando %2 es %3.';
      Text002@1002 : TextConst 'ENU=cannot be specified without %1;ESP=no se puede especificar sin %1';
      Text003@1003 : TextConst 'ENU=The %1 in the %2 will be changed from %3 to %4.\;ESP=El/la %1 en el/la %2 se cambiar  de %3 a %4.\';
      Text004@1004 : TextConst 'ENU=Do you wish to continue?;ESP=¨Confirma que desea continuar?';
      Text005@1005 : TextConst 'ENU=The update has been interrupted to respect the warning.;ESP=Se ha interrumpido la actualizaci¢n para respetar la advertencia.';
      Text006@1006 : TextConst 'ENU=The %1 option can only be used internally in the system.;ESP=La opci¢n %1 es de uso interno del sistema.';
      Text007@1007 : TextConst 'ENU=%1 or %2 must be a Bank Account.;ESP=%1 o %2 debe ser de tipo Banco.';
      Text008@1008 : TextConst 'ENU=" must be 0 when %1 is %2.";ESP=" debe ser 0 cuando %1 es %2."';
      Text009@1009 : TextConst 'ENU=LCY;ESP=DL';
      Text010@1010 : TextConst 'ENU=%1 must be %2 or %3.;ESP=%1 debe ser %2 o %3.';
      Text011@1011 : TextConst 'ENU=%1 must be negative.;ESP=El %1 debe ser negativo.';
      Text012@1012 : TextConst 'ENU=%1 must be positive.;ESP=El %1 debe ser positivo.';
      Text013@1013 : TextConst 'ENU=The %1 must not be more than %2.;ESP=%1 no debe ser m s que %2.';
      Text016@1065 : TextConst 'ENU=Credit card %1 has already been performed for this %2, but posting failed. You must complete posting of %2 %3.;ESP=La tarjeta de crdito %1 ya se us¢ para %2, pero se produjo un error de registro. Complete el registro de %2 %3.';
      GenJnlTemplate@1014 : Record 80;
      GenJnlBatch@1015 : Record 232;
      GenJnlLine@1016 : Record 81;
      GLAcc@1017 : Record 15;
      Cust@1018 : Record 18;
      Cust2@1019 : Record 18;
      Vend@1020 : Record 23;
      Vend2@1021 : Record 23;
      ICPartner@1057 : Record 413;
      Currency@1022 : Record 4;
      CurrExchRate@1023 : Record 330;
      PaymentTerms@1024 : Record 3;
      CustLedgEntry@1025 : Record 21;
      VendLedgEntry@1026 : Record 25;
      GenJnlAlloc@1027 : Record 221;
      VATPostingSetup@1028 : Record 325;
      BankAcc@1029 : Record 270;
      BankAcc2@1030 : Record 270;
      BankAcc3@1031 : Record 270;
      FA@1032 : Record 5600;
      FASetup@1033 : Record 5603;
      FADeprBook@1034 : Record 5612;
      GenBusPostingGrp@1035 : Record 250;
      GenProdPostingGrp@1036 : Record 251;
      GLSetup@1037 : Record 98;
      Job@1060 : Record 167;
      JobJnlLine@1059 : TEMPORARY Record 210;
      VatBusGroup@1103355000 : Record 323;
      ApplyCustEntries@1038 : Form 232;
      ApplyVendEntries@1039 : Form 233;
      NoSeriesMgt@1040 : Codeunit 396;
      CustCheckCreditLimit@1041 : Codeunit 312;
      SalesTaxCalculate@1042 : Codeunit 398;
      GenJnlApply@1043 : Codeunit 225;
      CustEntrySetApplID@1044 : Codeunit 101;
      VendEntrySetApplID@1045 : Codeunit 111;
      DimMgt@1046 : Codeunit 408;
      PaymentToleranceMgt@1053 : Codeunit 426;
      AccNo@1047 : Code[20];
      FromCurrencyCode@1048 : Code[10];
      ToCurrencyCode@1049 : Code[10];
      AccType@1050 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      ReplaceInfo@1051 : Boolean;
      CurrencyCode@1052 : Code[10];
      Text014@1054 : TextConst 'ENU=The %1 %2 has a %3 %4.\Do you still want to use %1 %2 in this journal line?;ESP=El %1 %2 tiene un %3 %4.\¨Todav¡a quiere utilizar %1 %2 en esta l¡nea del diario?';
      OK@1055 : Boolean;
      TemplateFound@1056 : Boolean;
      Text015@1058 : TextConst 'ENU=You are not allowed to apply and post an entry to an entry with an earlier posting date.\\Instead, post %1 %2 and then apply it to %3 %4.;ESP=No tiene permiso para aplicar ni registrar un movimiento con una fecha de registro anterior.\\En su lugar, registre %1 %2 y, a continuaci¢n, apl¡quelo a %3 %4.';
      CurrencyDate@1061 : Date;
      SourceCodeSetup@1063 : Record 242;
      ElectPmtMgmt@1100001 : Codeunit 10701;
      Text1100100@1100000 : TextConst 'ENU=% cannot be applied, since it is included in a payment order.;ESP=% no se puede aplicar porque est  incluido en una orden de pago.';
      Text216@1103355001 : TextConst 'ESP=Cobro %1 %2';
      Text017@1103355002 : TextConst 'ESP=No existen movimientos pendientes para el cliente %1.';
      Text018@1103355003 : TextConst 'ESP=No se ha encontrado ninguna linea de IVA.';
      Text019@1103355004 : TextConst 'ESP=Total ITBIS Proveedor %1 \%2';
      cFunSeg@1100217000 : Codeunit 7009751;

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        ("Account No." = '') AND (Amount = 0) AND
        (("Bal. Account No." = '') OR NOT "System-Created Entry"));
    END;

    PROCEDURE UpdateLineBalance@2();
    BEGIN
      IF ((Amount > 0) AND (NOT Correction)) OR
         ((Amount < 0) AND Correction)
      THEN BEGIN
        "Debit Amount" := Amount;
        "Credit Amount" := 0
      END ELSE BEGIN
        "Debit Amount" := 0;
        "Credit Amount" := -Amount;
      END;
      IF "Currency Code" = '' THEN
        "Amount (LCY)" := Amount;
      CASE TRUE OF
        ("Account No." <> '') AND ("Bal. Account No." <> ''):
          "Balance (LCY)" := 0;
        "Bal. Account No." <> '':
          "Balance (LCY)" := -"Amount (LCY)";
        ELSE
          "Balance (LCY)" := "Amount (LCY)";
      END;

      CLEAR(GenJnlAlloc);
      GenJnlAlloc.UpdateAllocations(Rec);

      UpdateSalesPurchLCY;
    END;

    PROCEDURE SetUpNewLine@9(LastGenJnlLine@1000 : Record 81;Balance@1001 : Decimal;BottomLine@1002 : Boolean);
    BEGIN
      GenJnlTemplate.GET("Journal Template Name");
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF GenJnlLine.FIND('-') THEN BEGIN
        "Posting Date" := LastGenJnlLine."Posting Date";
        "Document Date" := LastGenJnlLine."Posting Date";
        "Document No." := LastGenJnlLine."Document No.";
        "Transaction No." := LastGenJnlLine."Transaction No.";
        IF BottomLine AND
           (Balance - LastGenJnlLine."Balance (LCY)" = 0) AND
           NOT LastGenJnlLine.EmptyLine
        THEN BEGIN
          GenJnlTemplate.GET("Journal Template Name");
          IF GenJnlTemplate."Force Doc. Balance" THEN
            "Document No." := INCSTR("Document No.")
          ELSE
            IF "Transaction No." > 0 THEN
              "Transaction No." := "Transaction No." + 1;
        END;
      END ELSE BEGIN
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        IF GenJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
        END;
      END;
      IF GenJnlTemplate.Recurring THEN
        "Recurring Method" := LastGenJnlLine."Recurring Method";
      "Account Type" := LastGenJnlLine."Account Type";
      "Document Type" := LastGenJnlLine."Document Type";
      "Source Code" := GenJnlTemplate."Source Code";
      "Reason Code" := GenJnlBatch."Reason Code";
      "Posting No. Series" := GenJnlBatch."Posting No. Series";
      "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
      IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset"]) AND
         ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset"])
      THEN
        "Account Type" := "Account Type"::"G/L Account";
      VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
      Description := '';
    END;

    LOCAL PROCEDURE CheckVATInAlloc@1();
    BEGIN
      IF "Gen. Posting Type" <> 0 THEN BEGIN
        GenJnlAlloc.RESET;
        GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
        GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
        IF GenJnlAlloc.FIND('-') THEN
          REPEAT
            GenJnlAlloc.CheckVAT(Rec);
          UNTIL GenJnlAlloc.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetCurrencyCode@4(AccType2@1000 : 'G/L Account,Customer,Vendor,Bank Account';AccNo2@1001 : Code[20]) : Boolean;
    BEGIN
      "Currency Code" := '';
      IF AccNo2 <> '' THEN
        CASE AccType2 OF
          AccType2::Customer:
            IF Cust2.GET(AccNo2) THEN
              "Currency Code" := Cust2."Currency Code";
          AccType2::Vendor:
            IF Vend2.GET(AccNo2) THEN
              "Currency Code" := Vend2."Currency Code";
          AccType2::"Bank Account":
            IF BankAcc2.GET(AccNo2) THEN
              "Currency Code" := BankAcc2."Currency Code";
        END;
      EXIT("Currency Code" <> '');
    END;

    LOCAL PROCEDURE GetCurrency@3();
    BEGIN
      IF "Additional-Currency Posting" =
         "Additional-Currency Posting"::"Additional-Currency Amount Only"
      THEN BEGIN
        IF GLSetup."Additional Reporting Currency" = '' THEN
          GLSetup.GET;
        CurrencyCode := GLSetup."Additional Reporting Currency";
      END ELSE
        CurrencyCode := "Currency Code";

      IF CurrencyCode = '' THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision
      END ELSE
        IF CurrencyCode <> Currency.Code THEN BEGIN
          Currency.GET(CurrencyCode);
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    PROCEDURE UpdateSource@6();
    VAR
      SourceExists1@1000 : Boolean;
      SourceExists2@1001 : Boolean;
    BEGIN
      SourceExists1 := ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '');
      SourceExists2 := ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '');
      CASE TRUE OF
        SourceExists1 AND NOT SourceExists2:
          BEGIN
            "Source Type" := "Account Type";
            "Source No." := "Account No.";
          END;
        SourceExists2 AND NOT SourceExists1:
          BEGIN
            "Source Type" := "Bal. Account Type";
            "Source No." := "Bal. Account No.";
          END;
        ELSE BEGIN
          "Source Type" := "Source Type"::" ";
          "Source No." := '';
        END;
      END;
    END;

    LOCAL PROCEDURE CheckGLAcc@7();
    BEGIN
      GLAcc.CheckGLAcc;
      IF GLAcc."Direct Posting" OR ("Journal Template Name" = '') OR "System-Created Entry" THEN
        EXIT;
      IF "Posting Date" <> 0D THEN
        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
          EXIT;
      GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    PROCEDURE GetFAAddCurrExchRate@8();
    VAR
      DeprBook@1000 : Record 5611;
      FANo@1001 : Code[20];
      UseFAAddCurrExchRate@1002 : Boolean;
    BEGIN
      "FA Add.-Currency Factor" := 0;
      IF ("FA Posting Type" <> "FA Posting Type"::" ") AND
         ("Depreciation Book Code" <> '')
      THEN BEGIN
        IF ("Account Type" = "Account Type"::"Fixed Asset") THEN
          FANo := "Account No.";
        IF ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset") THEN
          FANo := "Bal. Account No.";
        IF FANo <> '' THEN BEGIN
          DeprBook.GET("Depreciation Book Code");
          CASE "FA Posting Type" OF
            "FA Posting Type"::"Acquisition Cost":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate - Acq. Cost";
            "FA Posting Type"::Depreciation:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Depr.";
            "FA Posting Type"::"Write-Down":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate -Write-Down";
            "FA Posting Type"::Appreciation:
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch. Rate - Apprec.";
            "FA Posting Type"::"Custom 1":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 1";
            "FA Posting Type"::"Custom 2":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 2";
            "FA Posting Type"::Disposal:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Disp.";
            "FA Posting Type"::Maintenance:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Maint.";
          END;
          IF UseFAAddCurrExchRate THEN BEGIN
            FADeprBook.GET(FANo,"Depreciation Book Code");
            FADeprBook.TESTFIELD("FA Add.-Currency Factor");
            "FA Add.-Currency Factor" := FADeprBook."FA Add.-Currency Factor";
          END;
        END;
      END;
    END;

    PROCEDURE GetShowCurrencyCode@10(CurrencyCode@1000 : Code[10]) : Code[10];
    BEGIN
      IF CurrencyCode <> '' THEN
        EXIT(CurrencyCode)
      ELSE
        EXIT(Text009);
    END;

    PROCEDURE ClearCustVendApplnEntry@11();
    VAR
      TempCustLedgEntry@1000 : Record 21;
      TempVendLedgEntry@1001 : Record 25;
      CustEntryEdit@1002 : Codeunit 103;
      VendEntryEdit@1003 : Codeunit 113;
    BEGIN
      IF Rec."Bal. Account Type" IN
         ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
      THEN BEGIN
        AccType := Rec."Bal. Account Type";
        AccNo := Rec."Bal. Account No.";
      END ELSE BEGIN
        AccType := Rec."Account Type";
        AccNo := Rec."Account No.";
      END;
      CASE AccType OF
        AccType::Customer:
          BEGIN
            CustLedgEntry.RESET;
            IF Rec."Applies-to ID" <> '' THEN BEGIN
              CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
              CustLedgEntry.SETRANGE("Customer No.",AccNo);
              CustLedgEntry.SETRANGE("Applies-to ID",Rec."Applies-to ID");
              CustLedgEntry.SETRANGE(Open,TRUE);
              IF CustLedgEntry.FIND('-') THEN BEGIN
                CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
                CustLedgEntry."Accepted Payment Tolerance" := 0;
                CustLedgEntry."Amount to Apply" := 0;
                CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,0,0,'');
              END;
            END ELSE IF Rec."Applies-to Doc. No." <> '' THEN BEGIN
              CustLedgEntry.SETCURRENTKEY("Document No.");
              CustLedgEntry.SETRANGE("Document No.",Rec."Applies-to Doc. No.");
              CustLedgEntry.SETRANGE("Document Type",Rec."Applies-to Doc. Type");
              CustLedgEntry.SETRANGE("Bill No.",Rec."Applies-to Bill No."); // es0008
              CustLedgEntry.SETRANGE("Customer No.",AccNo);
              CustLedgEntry.SETRANGE(Open,TRUE);
              IF CustLedgEntry.FIND('-') THEN BEGIN
                CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
                CustLedgEntry."Accepted Payment Tolerance" := 0;
                CustLedgEntry."Amount to Apply" := 0;
                CustEntryEdit.RUN(CustLedgEntry);
              END;
            END;
          END;
        AccType::Vendor:
          BEGIN
            VendLedgEntry.RESET;
            IF Rec."Applies-to ID" <> '' THEN BEGIN
              VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
              VendLedgEntry.SETRANGE("Vendor No.",AccNo);
              VendLedgEntry.SETRANGE("Applies-to ID",Rec."Applies-to ID");
              VendLedgEntry.SETRANGE(Open,TRUE);
              IF VendLedgEntry.FIND('-') THEN BEGIN
                VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
                VendLedgEntry."Accepted Payment Tolerance" := 0;
                VendLedgEntry."Amount to Apply" := 0;
                VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,0,0,'');
            END;
            END ELSE IF Rec."Applies-to Doc. No." <> '' THEN BEGIN
              VendLedgEntry.SETCURRENTKEY("Document No.");
              VendLedgEntry.SETRANGE("Document No.",Rec."Applies-to Doc. No.");
              VendLedgEntry.SETRANGE("Document Type",Rec."Applies-to Doc. Type");
              VendLedgEntry.SETRANGE("Bill No.",Rec."Applies-to Bill No."); // es0008
              VendLedgEntry.SETRANGE("Vendor No.",AccNo);
              VendLedgEntry.SETRANGE(Open,TRUE);
              IF VendLedgEntry.FIND('-') THEN BEGIN
                VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
                VendLedgEntry."Accepted Payment Tolerance" := 0;
                VendLedgEntry."Amount to Apply" := 0;
                VendEntryEdit.RUN(VendLedgEntry);
              END;
            END;
        END;
      END;
    END;

    PROCEDURE CheckFixedCurrency@12() : Boolean;
    VAR
      CurrExchRate@1000 : Record 330;
    BEGIN
      CurrExchRate.SETRANGE("Currency Code","Currency Code");
      CurrExchRate.SETRANGE("Starting Date",0D,"Posting Date");

      IF NOT CurrExchRate.FIND('+') THEN
        EXIT(FALSE);

      IF CurrExchRate."Relational Currency Code" = '' THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      IF CurrExchRate."Fix Exchange Rate Amount" <>
        CurrExchRate."Fix Exchange Rate Amount"::Both
      THEN
        EXIT(FALSE);

      CurrExchRate.SETRANGE("Currency Code",CurrExchRate."Relational Currency Code");
      IF CurrExchRate.FIND('+') THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      EXIT(FALSE);
    END;

    PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetDefaultDim(
        TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF "Line No." <> 0 THEN
        DimMgt.UpdateJnlLineDefaultDim(
          DATABASE::"Gen. Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@14(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      TESTFIELD("Check Printed",FALSE);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveJnlLineDim(
          DATABASE::"Gen. Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,FieldNumber,ShortcutDimCode);
        IF MODIFY THEN;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      TESTFIELD("Check Printed",FALSE);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveJnlLineDim(
          DATABASE::"Gen. Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      IF "Line No." <> 0 THEN
        DimMgt.ShowJnlLineDim(
          DATABASE::"Gen. Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,ShortcutDimCode)
      ELSE
        DimMgt.ShowTempDim(ShortcutDimCode);
    END;

    PROCEDURE GetFAVATSetup@17();
    VAR
      LocalGlAcc@1000 : Record 15;
      FAPostingGr@1001 : Record 5606;
      FABalAcc@1002 : Boolean;
    BEGIN
      IF CurrFieldNo = 0 THEN
        EXIT;
      IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
         ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
      THEN
        EXIT;
      FABalAcc := ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset");
      IF NOT FABalAcc THEN BEGIN
        "Gen. Posting Type" := "Gen. Posting Type"::" ";
        "Gen. Bus. Posting Group" := '';
        "Gen. Prod. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        "Tax Group Code" := '';
        VALIDATE("VAT Prod. Posting Group");
      END;
      IF FABalAcc THEN BEGIN
        "Bal. Gen. Posting Type" := "Bal. Gen. Posting Type"::" ";
        "Bal. Gen. Bus. Posting Group" := '';
        "Bal. Gen. Prod. Posting Group" := '';
        "Bal. VAT Bus. Posting Group" := '';
        "Bal. VAT Prod. Posting Group" := '';
        "Bal. Tax Group Code" := '';
        VALIDATE("Bal. VAT Prod. Posting Group");
      END;
      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
        GenJnlBatch."Copy VAT Setup to Jnl. Lines"
      THEN BEGIN
        IF (("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") OR
           ("FA Posting Type" = "FA Posting Type"::Disposal) OR
           ("FA Posting Type" = "FA Posting Type"::Maintenance)) AND
           ("Posting Group" <> '')
        THEN BEGIN
          IF FAPostingGr.GET("Posting Group") THEN BEGIN
            IF "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" THEN BEGIN
              FAPostingGr.TESTFIELD("Acquisition Cost Account");
              LocalGlAcc.GET(FAPostingGr."Acquisition Cost Account");
            END;
            IF "FA Posting Type" = "FA Posting Type"::Disposal THEN BEGIN
              FAPostingGr.TESTFIELD("Acq. Cost Acc. on Disposal");
              LocalGlAcc.GET(FAPostingGr."Acq. Cost Acc. on Disposal");
            END;
            IF "FA Posting Type" = "FA Posting Type"::Maintenance THEN BEGIN
              FAPostingGr.TESTFIELD("Maintenance Expense Account");
              LocalGlAcc.GET(FAPostingGr."Maintenance Expense Account");
            END;
            LocalGlAcc.CheckGLAcc;
            IF NOT FABalAcc THEN BEGIN
              "Gen. Posting Type" := LocalGlAcc."Gen. Posting Type";
              "Gen. Bus. Posting Group" := LocalGlAcc."Gen. Bus. Posting Group";
              "Gen. Prod. Posting Group" := LocalGlAcc."Gen. Prod. Posting Group";
              "VAT Bus. Posting Group" := LocalGlAcc."VAT Bus. Posting Group";
              "VAT Prod. Posting Group" := LocalGlAcc."VAT Prod. Posting Group";
              "Tax Group Code" := LocalGlAcc."Tax Group Code";
              VALIDATE("VAT Prod. Posting Group");
            END ELSE BEGIN;
              "Bal. Gen. Posting Type" := LocalGlAcc."Gen. Posting Type";
              "Bal. Gen. Bus. Posting Group" := LocalGlAcc."Gen. Bus. Posting Group";
              "Bal. Gen. Prod. Posting Group" := LocalGlAcc."Gen. Prod. Posting Group";
              "Bal. VAT Bus. Posting Group" := LocalGlAcc."VAT Bus. Posting Group";
              "Bal. VAT Prod. Posting Group" := LocalGlAcc."VAT Prod. Posting Group";
              "Bal. Tax Group Code" := LocalGlAcc."Tax Group Code";
              VALIDATE("Bal. VAT Prod. Posting Group");
            END;
          END;
        END;
      END;
    END;

    PROCEDURE GetTemplate@16();
    BEGIN
      IF NOT TemplateFound THEN
        GenJnlTemplate.GET("Journal Template Name");
      TemplateFound := TRUE;
    END;

    LOCAL PROCEDURE UpdateSalesPurchLCY@19();
    BEGIN
      "Sales/Purch. (LCY)" := 0;
      IF (NOT "System-Created Entry") AND ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN BEGIN
        IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND ("Bal. Account No." <> '') THEN
          "Sales/Purch. (LCY)" := "Amount (LCY)" + "Bal. VAT Amount (LCY)";
        IF ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) AND ("Account No." <> '') THEN
          "Sales/Purch. (LCY)" := -("Amount (LCY)" - "VAT Amount (LCY)");
      END;
    END;

    PROCEDURE SetApplyToAmount@20();
    BEGIN
      IF "Account Type" = "Account Type"::Customer THEN BEGIN
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETRANGE("Document No.",Rec."Applies-to Doc. No.");
        CustLedgEntry.SETRANGE("Customer No.","Account No.");
        CustLedgEntry.SETRANGE(Open,TRUE);
        IF CustLedgEntry.FIND('-') THEN
          IF CustLedgEntry."Amount to Apply" = 0 THEN  BEGIN
            CustLedgEntry.CALCFIELDS("Remaining Amount");
            CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
            CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
          END;
      END ELSE IF "Account Type" = "Account Type"::Vendor THEN BEGIN
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETRANGE("Document No.",Rec."Applies-to Doc. No.");
        VendLedgEntry.SETRANGE("Vendor No.","Account No.");
        VendLedgEntry.SETRANGE(Open,TRUE);
        IF VendLedgEntry.FIND('-') THEN
          IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
            VendLedgEntry.CALCFIELDS("Remaining Amount");
            VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
            CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
          END;
      END;
    END;

    PROCEDURE ValidateApplyRequirements@21(TempGenJnlLine@1000 : TEMPORARY Record 81);
    VAR
      ExchAccGLJnlLine@1001 : Codeunit 366;
    BEGIN
      IF (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) OR
        (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
      THEN
        ExchAccGLJnlLine.RUN(TempGenJnlLine);

      IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Customer THEN BEGIN
        IF TempGenJnlLine."Applies-to ID" <> '' THEN BEGIN
          CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
          CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
          CustLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
          CustLedgEntry.SETRANGE(Open,TRUE);
          IF CustLedgEntry.FIND('-') THEN
            REPEAT
              IF (TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date") THEN
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  CustLedgEntry."Document Type",CustLedgEntry."Document No.");
            UNTIL CustLedgEntry.NEXT = 0;
        END ELSE IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
          CustLedgEntry.SETCURRENTKEY("Document No.");
          CustLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
          IF TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " THEN
            CustLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
          CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
          CustLedgEntry.SETRANGE(Open,TRUE);
          IF CustLedgEntry.FIND('-') THEN
            IF (TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date") THEN
              ERROR(
                Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                CustLedgEntry."Document Type",CustLedgEntry."Document No.");
        END;
      END ELSE IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Vendor THEN BEGIN
        IF TempGenJnlLine."Applies-to ID" <> '' THEN BEGIN
          VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
          VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
          VendLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
          VendLedgEntry.SETRANGE(Open,TRUE);
            REPEAT
              IF (TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date") THEN
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  VendLedgEntry."Document Type",VendLedgEntry."Document No.");
            UNTIL VendLedgEntry.NEXT = 0;
          IF VendLedgEntry.FIND('-') THEN BEGIN
          END;
        END ELSE IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
          VendLedgEntry.SETCURRENTKEY("Document No.");
          VendLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
          IF TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " THEN
            VendLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
          VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
          VendLedgEntry.SETRANGE(Open,TRUE);
          IF VendLedgEntry.FIND('-') THEN BEGIN // es0009
            IF (TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date") THEN
              ERROR(
                Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                VendLedgEntry."Document Type",VendLedgEntry."Document No.");
              IF VendLedgEntry."Document Situation" = VendLedgEntry."Document Situation"::"Posted BG/PO" THEN
                ERROR(
                  Text1100100,
                  VendLedgEntry.Description);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateCountryCodeAndVATRegNo@25(No@1000 : Code[20]);
    BEGIN
      IF No = '' THEN BEGIN
        "Country/Region Code" := '';
        "VAT Registration No." := '';
        EXIT;
      END;

      GLSetup.GET;
      CASE TRUE OF
        ("Account Type" = "Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Customer):
          BEGIN
            Cust.GET(No);
            "Country/Region Code" := Cust."Country/Region Code";
            "VAT Registration No." := Cust."VAT Registration No.";
          END;
        ("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor):
          BEGIN
            Vend.GET(No);
            "Country/Region Code" := Vend."Country/Region Code";
            "VAT Registration No." := Vend."VAT Registration No.";
          END;
      END;
    END;

    PROCEDURE JobTaskIsSet@28() : Boolean;
    BEGIN
      EXIT(("Job No." <> '') AND ("Job Task No." <> '') AND ("Account Type" = "Account Type"::"G/L Account"));
    END;

    PROCEDURE CreateTempJobJnlLine@27();
    VAR
      TmpJobJnlOverallCurrencyFactor@1001 : Decimal;
    BEGIN
      TESTFIELD("Posting Date");
      CLEAR(JobJnlLine);
      JobJnlLine.DontCheckStdCost;
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      IF CurrFieldNo <> FIELDNO("Posting Date") THEN
        JobJnlLine.VALIDATE("Posting Date","Posting Date")
      ELSE
        JobJnlLine.VALIDATE("Posting Date",xRec."Posting Date");
      JobJnlLine.VALIDATE(Type,JobJnlLine.Type::"G/L Account");
      IF "Job Currency Code" <> '' THEN BEGIN
        IF "Posting Date" = 0D THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := "Posting Date";

        IF "Currency Code" = "Job Currency Code" THEN
          "Job Currency Factor" := "Currency Factor"
        ELSE
          "Job Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Job Currency Code");
        JobJnlLine.SetCurrencyFactor("Job Currency Factor");
      END;
      JobJnlLine.VALIDATE("No.","Account No.");
      JobJnlLine.VALIDATE(Quantity,"Job Quantity");

      IF "Currency Factor" = 0 THEN BEGIN
        IF "Job Currency Factor" = 0 THEN
          TmpJobJnlOverallCurrencyFactor := 1
        ELSE
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor";
      END ELSE BEGIN
        IF "Job Currency Factor" = 0 THEN
          TmpJobJnlOverallCurrencyFactor := "Currency Factor"
        ELSE
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor" / "Currency Factor"
      END;

      IF "Job Quantity" <> 0 THEN
        JobJnlLine.VALIDATE("Unit Cost",((Amount - "VAT Amount") * TmpJobJnlOverallCurrencyFactor) / "Job Quantity");

      IF (xRec."Account No." = "Account No.") AND (xRec."Job Task No." = "Job Task No.") AND ("Job Unit Price" <> 0) THEN BEGIN
        JobJnlLine."Unit Price" := xRec."Job Unit Price";
        JobJnlLine."Line Amount" := xRec."Job Line Amount";
        JobJnlLine."Line Discount %" := xRec."Job Line Discount %";
        JobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
        JobJnlLine.VALIDATE("Unit Price");
      END;
    END;

    PROCEDURE UpdatePricesFromJobJnlLine@22();
    BEGIN
      "Job Unit Price" := JobJnlLine."Unit Price";
      "Job Total Price" := JobJnlLine."Total Price";
      "Job Line Amount" := JobJnlLine."Line Amount";
      "Job Line Discount Amount" := JobJnlLine."Line Discount Amount";
      "Job Unit Cost" := JobJnlLine."Unit Cost";
      "Job Total Cost" := JobJnlLine."Total Cost";
      "Job Line Discount %" := JobJnlLine."Line Discount %";

      "Job Unit Price (LCY)" := JobJnlLine."Unit Price (LCY)";
      "Job Total Price (LCY)" := JobJnlLine."Total Price (LCY)";
      "Job Line Amount (LCY)" := JobJnlLine."Line Amount (LCY)";
      "Job Line Disc. Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
      "Job Unit Cost (LCY)" := JobJnlLine."Unit Cost (LCY)";
      "Job Total Cost (LCY)" := JobJnlLine."Total Cost (LCY)";
    END;

    LOCAL PROCEDURE CheckNoCardTransactEntryExist@46(GenJnlLine@1002 : Record 81);
    VAR
      DOPaymentTransLogEntry@1000 : Record 829;
      DOPaymentTransLogMgt@1003 : Codeunit 829;
      DocumentType@1001 : Integer;
    BEGIN
      CASE GenJnlLine."Document Type" OF
        GenJnlLine."Document Type"::Payment:
          DocumentType := DOPaymentTransLogEntry."Document Type"::Payment;
        GenJnlLine."Document Type"::Refund:
          DocumentType := DOPaymentTransLogEntry."Document Type"::Refund;
      END;
      IF DOPaymentTransLogMgt.FindPostingNotFinishedEntry(DocumentType,GenJnlLine."Document No.",DOPaymentTransLogEntry) THEN
        ERROR(Text016,DOPaymentTransLogEntry."Transaction Type",GenJnlLine."Document Type",GenJnlLine."Document No.");
    END;

    PROCEDURE GetAppliesToDocDueDate@24() : Date;
    VAR
      CustLedgEntry@1000 : Record 21;
      VendLedgEntry@1001 : Record 25;
    BEGIN
      IF "Bal. Account Type" IN
        ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
      THEN BEGIN
        AccNo := "Bal. Account No.";
        AccType := "Bal. Account Type";
        CLEAR(CustLedgEntry);
        CLEAR(VendLedgEntry);
      END ELSE BEGIN
        AccNo := "Account No.";
        AccType := "Account Type";
        CLEAR(CustLedgEntry);
        CLEAR(VendLedgEntry);
      END;

      CASE AccType OF
        AccType::Customer:
          BEGIN
            CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
            CustLedgEntry.SETRANGE("Customer No.",AccNo);
            CustLedgEntry.SETRANGE(Open,TRUE);
            IF "Applies-to Doc. No." <> '' THEN BEGIN
              CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
              CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
              IF NOT CustLedgEntry.FINDFIRST THEN BEGIN
                CustLedgEntry.SETRANGE("Document Type");
                CustLedgEntry.SETRANGE("Document No.");
              END;
            END ELSE
              IF "Applies-to ID" <> '' THEN BEGIN
                CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                IF NOT CustLedgEntry.FINDFIRST THEN
                  CustLedgEntry.SETRANGE("Applies-to ID");
              END;
            EXIT(CustLedgEntry."Due Date");
          END;
        AccType::Vendor:
          BEGIN
            VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
            VendLedgEntry.SETRANGE("Vendor No.",AccNo);
            VendLedgEntry.SETRANGE(Open,TRUE);
            IF "Applies-to Doc. No." <> '' THEN BEGIN
              VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
              VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
              IF NOT VendLedgEntry.FINDFIRST THEN BEGIN
                VendLedgEntry.SETRANGE("Document Type");
                VendLedgEntry.SETRANGE("Document No.");
              END;
            END ELSE
              IF "Applies-to ID" <> '' THEN BEGIN
                VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                IF NOT VendLedgEntry.FINDFIRST THEN
                  VendLedgEntry.SETRANGE("Applies-to ID");
              END;
            EXIT(VendLedgEntry."Due Date");
          END;
      END;
    END;

    PROCEDURE AdjustDueDate@1000000000(MaxDate@1000000000 : Date);
    VAR
      DueDateAdjust@1000000001 : Codeunit 10700;
    BEGIN
      CASE "Account Type" OF
        "Account Type"::Customer:
          IF "Bill-to/Pay-to No." <> '' THEN
            DueDateAdjust.SalesAdjustDueDate("Due Date","Document Date",MaxDate,"Bill-to/Pay-to No.")
          ELSE
            DueDateAdjust.SalesAdjustDueDate("Due Date","Document Date",MaxDate,"Account No.");
        "Account Type"::Vendor:
          DueDateAdjust.PurchAdjustDueDate("Due Date","Document Date",MaxDate,"Account No.");
      END;
    END;

    PROCEDURE fMovsClientePendientes@1103355000(VAR prLinDir@1103355000 : Record 81);
    VAR
      lrMov@1103355001 : Record 21;
      lrLinDir@1103355003 : Record 81;
      lfPend@1103355002 : Form 7009837;
      lwUltimaLinea@1103355004 : Integer;
    BEGIN
      // $008  fMovsClientePendientes

      // Comprobar que estan rellenados los campos minimos

      IF (prLinDir."Account Type" <> prLinDir."Account Type"::Customer) OR
         (prLinDir."Posting Date" = 0D) OR
         (prLinDir."Account No." = '') THEN
        EXIT;

      // Buscamos si el cliente tiene movimientos pendientes

      lrMov.RESET;
      lrMov.SETCURRENTKEY("Customer No.",
                          Open);
      lrMov.SETRANGE("Customer No.", "Account No.");
      lrMov.SETRANGE(Open          , TRUE);
      IF lrMov.FIND('-') THEN BEGIN

        // Llamamos a una ventana personalizado de movimientos de cliente que permite hacer una seleccion

        CLEAR(lfPend);
        lfPend.SETRECORD(lrMov);
        lfPend.SETTABLEVIEW(lrMov);
        lfPend.LOOKUPMODE(TRUE);
        IF lfPend.RUNMODAL = ACTION::LookupOK THEN BEGIN
          lfPend.retorna_registro(lrMov);

          // Para cada movimiento retornado inserto una linea de diario de cobros

          IF lrMov.FIND('-') THEN BEGIN

            // Buscar la ultima linea que tenga esa seccion del diario de cobros

            lwUltimaLinea := 0;

            lrLinDir.RESET;
            lrLinDir.SETRANGE("Journal Template Name", prLinDir."Journal Template Name");
            lrLinDir.SETRANGE("Journal Batch Name"   , prLinDir."Journal Batch Name");
            IF lrLinDir.FINDLAST THEN
              lwUltimaLinea := lrLinDir."Line No.";

            REPEAT
              lwUltimaLinea += 10000;

              CLEAR(lrLinDir);
              lrLinDir."Journal Template Name" := prLinDir."Journal Template Name";
              lrLinDir."Journal Batch Name"    := prLinDir."Journal Batch Name";
              lrLinDir."Line No."              := lwUltimaLinea;
              lrLinDir.INSERT(TRUE);

              lrLinDir.VALIDATE("Posting Date"        , prLinDir."Posting Date");
              lrLinDir.VALIDATE("Transaction No."     , prLinDir."Transaction No.");
              lrLinDir.VALIDATE("Account Type"        , prLinDir."Account Type");
              lrLinDir.VALIDATE("Account No."         , prLinDir."Account No.");
              lrLinDir.VALIDATE("Document No."        , prLinDir."Document No.");
              lrLinDir.VALIDATE(Description           , STRSUBSTNO(Text216, lrMov."Document Type", lrMov."Document No."));
              lrLinDir.VALIDATE("Applies-to Doc. Type", lrMov."Document Type");
              lrLinDir.VALIDATE("Applies-to Doc. No." , lrMov."Document No.");

              lrMov.CALCFIELDS("Remaining Amount");

              // Comprobamos si se pueden aplicar los descuentos por pronto pago

              IF prLinDir."Posting Date" <= lrMov."Pmt. Discount Date" THEN
                lrLinDir.Amount := (-1) * CurrExchRate.ExchangeAmtFCYToFCY(prLinDir."Posting Date",
                                                                           lrMov."Currency Code",
                                                                           prLinDir."Currency Code",
                                                                           (lrMov."Remaining Amount" -
                                                                            lrMov."Remaining Pmt. Disc. Possible"))
              ELSE
                lrLinDir.Amount := (-1) * CurrExchRate.ExchangeAmtFCYToFCY(prLinDir."Posting Date",
                                                                           lrMov."Currency Code",
                                                                           prLinDir."Currency Code",
                                                                           lrMov."Remaining Amount");
              lrLinDir.VALIDATE(Amount);

              // AJS 14.07.2004
              // Obtener campos del libro diario y la seccion

              GenJnlTemplate.GET(prLinDir."Journal Template Name");
              GenJnlBatch.GET(prLinDir."Journal Template Name", prLinDir."Journal Batch Name");

              lrLinDir."Source Code"        := GenJnlTemplate."Source Code";
              lrLinDir."Reason Code"        := GenJnlBatch."Reason Code";
              lrLinDir."Posting No. Series" := GenJnlBatch."Posting No. Series";

              lrLinDir.MODIFY(TRUE);
            UNTIL lrMov.NEXT = 0;
          END;

          // Se borra la linea pasada por parametros

          prLinDir.DELETE;
        END;
      END
      ELSE
        ERROR(Text017, "Account No.");
    END;

    PROCEDURE TotalizarITBIS@1103355001(VAR prLinDir@1103355000 : Record 81);
    VAR
      lrLinDir@1103355002 : Record 81;
      lrTempDoc@1103355004 : TEMPORARY Record 38;
      lrMovIVA@1103355005 : Record 254;
      lwTotal@1103355001 : Decimal;
      lwExisteIVA@1103355003 : Boolean;
    BEGIN
      //$009 TotalizarITBIS

      IF prLinDir."Account Type" <> prLinDir."Account Type"::Vendor THEN
        EXIT;

      CLEAR(lwTotal);

      CLEAR(lrLinDir);

      lrLinDir.COPY(prLinDir);
      lrLinDir.SETRANGE("Account Type", "Account Type"::Vendor);
      lrLinDir.SETRANGE("Account No."  , "Account No.");
      IF lrLinDir.FIND('-') THEN BEGIN
        lwExisteIVA := FALSE;
        REPEAT

          // Creamos un temporal de documentos para evitar repetirlos

          IF NOT lrTempDoc.GET(lrLinDir."Applies-to Doc. Type", lrLinDir."Applies-to Doc. No.") THEN BEGIN
            CLEAR(lrTempDoc);
            lrTempDoc."Document Type" := lrLinDir."Applies-to Doc. Type";
            lrTempDoc."No."           := lrLinDir."Applies-to Doc. No.";
            lrTempDoc.INSERT;

            CLEAR(lrMovIVA);
            lrMovIVA.SETCURRENTKEY(Type,
                                   "Posting Date",
                                   "Document Type",
                                   "Document No.",
                                   lrMovIVA."Bill-to/Pay-to No.");
            lrMovIVA.SETRANGE(Type                , lrMovIVA.Type::Purchase);
            lrMovIVA.SETRANGE("Document Type"     , lrTempDoc."Document Type");
            lrMovIVA.SETRANGE("Document No."      , lrTempDoc."No.");
            lrMovIVA.SETRANGE("Bill-to/Pay-to No.", prLinDir."Account No.");
            IF lrMovIVA.FIND('-') THEN BEGIN
              lwExisteIVA := TRUE;
              REPEAT
                lwTotal += lrMovIVA.Amount;
              UNTIL lrMovIVA.NEXT = 0;
            END;
          END;
        UNTIL lrLinDir.NEXT = 0;
      END;

      IF NOT lwExisteIVA THEN
        ERROR(Text018);

      MESSAGE (Text019, "Account No.", lwTotal);
    END;

    LOCAL PROCEDURE GetCreditCard@23();
    VAR
      DOPaymentTransLogEntry@1000 : Record 829;
    BEGIN
      IF "Applies-to Doc. No." = xRec."Applies-to Doc. No." THEN
        EXIT;
      IF NOT (("Account Type" = "Account Type"::Customer) AND
              ("Bal. Account Type" = "Bal. Account Type"::"Bank Account")) THEN
        EXIT;

      "Credit Card No." := '';
      IF "Applies-to Doc. No." = '' THEN
        EXIT;

      IF "Document Type" <> "Document Type"::Refund THEN
        EXIT;

      DOPaymentTransLogEntry.SETRANGE("Customer No.","Account No.");
      DOPaymentTransLogEntry.SETRANGE("Transaction Type",DOPaymentTransLogEntry."Transaction Type"::Capture);
      DOPaymentTransLogEntry.SETRANGE("Document Type",DOPaymentTransLogEntry."Document Type"::Payment);
      DOPaymentTransLogEntry.SETRANGE("Document No.","Applies-to Doc. No.");

      IF DOPaymentTransLogEntry.FINDFIRST THEN
        "Credit Card No." := DOPaymentTransLogEntry."Credit Card No.";
    END;

    BEGIN
    {
      // INCOMING

      $001 Aumentar la Descripcion a 80 caracteres

      $002 OnLookup "Applies-to Doc. No.", almacenar el numero de documento externo del movimiento proveedor

      $003 Incluir la opcion "Transferencia" en el campo "Tipo pago por banco", para las transferencias electronicas

      $004 OnValidate "VAT Prod. Posting Group", llamar a la validacion del regimen para ver si es normal o especial

      $005 Se han agregado nuevos campos

          50000   Marca         Code20
          50001   Tipo de Clave Code10 "Maestro de Claves".Clave
          50009   Hotel         Code10 Hotel.Hotel
          50012   Regimen       Option Normal,Especial

      $006 Se ha agregado un nuevo campo para marcar las lineas de diario que se crean asociadas a un cheque para reflejar
         el IRPF que se retiene en el cobro

          7010000 DescIRPF      Option ,IRPF,Descontado

      $007 Se ha creado una nueva clave

          Campos : Marca
          KeyGroups : INCOMING
          MaintainSQLIndex : No

      $008 Se ha creado la funcion fMovsClientePendientes que abre una ventana con los movimientos de cliente pendientes
         y permite hacer una seleccion y crear las lineas de liquidacion correspondientes en el diario de cobros que se
         para por parametros

      $009 Se ha creado la funcion TotalizarITBIS que retorna un mensaje con la suma de los importes por ITBIS de todas
         las lineas de proveedor de la seccion de diario que se para por parametros

      $010 AJS 28.12.2006, Comprobantes fiscales
         Hemos creado los siguientes campos para traspasarlos a mov cliente y mov proveedor con el objeto de facilitar
         la declaracion de ITBIS

          7009700 Cod. Grupo NCF     Code10 "Grupo configuracion NCF".Codigo
          7009703 Comprobante Fiscal Code20

      $011 AJS 30.01.2007
         Se ha creado un clave nueva para el informe de previo emision talones

          Campos : Journal Template Name, Journal Batch Name, Account No.
          KeyGroups : INCOMING
          MaintainSQLIndex : No

      $012 AJS 07.02.2007, Declaracion ITBIS
         He creado un nuevo campo para poder indicar en cada factura a que tipo (de los prefijados por el gobierno)
         pertenece cada factura

          7009704 Tipo factura compra Code10, Tipo factura compra RD

      $013 AJS 26.02.2007
         Se ha creado una nueva clave para facilitar el repaso de los cobros (GOC)

          Campos : Applies-to Doc. No., Journal Template Name, Journal Batch Name
          KeyGroups : INCOMING
          MaintainSQLIndex : No

      $014 AJF 19/02/09
        Amplio el campo "Cust./Vendor Bank Acc. Code" a 20 para que coincida con la ficha de cliente.

      $015 AJS 14102013 Las lineas de "Asiento Automatico" no se pueden borrar

      $016 AJS 04112013 Permiso especifico en Atennea para poder borrar las lineas "Asiento automatico"

      $017 AJS 19112013 Nueva clave Journal Template Name,Journal Batch Name,Transaction No. para evitar problemas a la hora de
                        hacer los asientos de FPR y buscar el ultimo asiento

      $018 AJS 11112014 Corregir error que dejaba borrar asientos a usuarios sin permiso y comprobar "Asiento automatico"

      $019 AJS 21112014 Integracion Atennea Transfer, nuevos campos Traspasado, "Fecha traspaso", "Hora traspaso",
                        "Usuario traspaso" y "Tipo servicio"

      <changelog>
        <add id="es0001" dev="VGARCA" date="2004-08-27" area="DUEDATE" request="es-start-40"
        releaseversion="ES4.00">Due Date Calculation</add>
        <add id="es0002" dev="VGARCA" date="2004-08-27" area="NOTAXVAT" request="es-start-40"
        releaseversion="ES4.00">No Taxable VAT</add>
        <add id="es0003" dev="VGARCA" date="2004-08-27" area="PAYDISC" request="es-start-40"
        releaseversion="ES4.00">Payment Discount</add>
        <add id="es0004" dev="VGARCA" date="2004-08-27" area="PAYTERMS" request="es-start-40"
        releaseversion="ES4.00">Payment Terms &amp; Payment Methods</add>
        <add id="es0005" dev="VGARCA" date="2004-08-27" area="ROUNDING" request="es-start-40"
        releaseversion="ES4.00">Rounding</add>
        <add id="es0006" dev="VGARCA" date="2004-08-27" area="TRANSACT" request="es-start-40"
        releaseversion="ES4.00">Transaction No.</add>
        <add id="es0007" dev="VGARCA" date="2004-08-27" area="CARTERA" request="es-start-40"
        releaseversion="ES4.00">Cartera Add-On (Spanish)</add>
        <change id="es0008" dev="VGARCA" date="2005-10-10" area="CARTERA" feature="PS-SE-10814"
        releaseversion="ES4.00.02" baseversion="ES4.00.A">Cartera Add-On (Spanish)</change>
        <change id="es0009" dev="VGARCA" date="2006-05-10" area="CARTERA" feature="PS13966"
        releaseversion="ES4.00.03" baseversion="ES4.00.02">
        Error message appear too late when you apply a payment with a cartera doc. </change>
        <add id="es0010" dev="VGARCA" date="2006-03-30" area="ELECPMTS" feature="PSCORS239"
        releaseversion="ES5.00">Electronic Payments</add>
        <change id="es0011" dev="VGARCA" date="2006-03-30" area="ELECPMTS" feature="PSCORS616"
        releaseversion="ES5.00" baseversion="ES5.00">EP - Transfer Type and Statistical Code </change>
        <change id="es0012" dev="VGARCA" date="2006-03-30" area="ELECPMTS" feature="PSCORS617"
        releaseversion="ES5.00" baseversion="ES5.00">EP - Journal Batch Name </change>
        <change id="es0013" dev="VGARCA" date="2006-03-30" area="ELECPMTS" feature="PSCORS620"
        releaseversion="ES5.00" baseversion="ES5.00">EP - Electronic Payment Exported (re-export,post without exporting) </change>
        <change id="es0014" dev="VGARCA" date="2008-09-05" area="ELECPMTS" feature="NAVCORS28860"
        releaseversion="ES6.00" baseversion="ES5.00">Cartera - Program is not allowing to post the Purchase Invoice
        when the vendor does not have Bank Account </change>
      </changelog>
    }
    END.
  }
}
