OBJECT Table 700 BA Database
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD(Code);
               InitCube;
               IF NOT RECORDLEVELLOCKING THEN
                 "NAV Server Name" := COPYSTR(GetNavisionServerName,1,30);
             END;

    OnModify=BEGIN
               TESTFIELD(Code);
             END;

    OnDelete=VAR
               BACompany@1000 : Record 701;
               BASchedule@1001 : Record 702;
               BAOverviewLine@1002 : Record 703;
               BANumList@1003 : Record 704;
               BADim@1004 : Record 706;
               BACube@1005 : Record 709;
               BAVirtCube@1006 : Record 714;
             BEGIN
               WITH BACompany DO BEGIN
                 SETRANGE("BA Db. Code",Rec.Code);
                 DELETEALL(TRUE);
               END;
               WITH BASchedule DO BEGIN
                 SETRANGE("BA Db. Code",Rec.Code);
                 DELETEALL(TRUE);
               END;
               WITH BAOverviewLine DO BEGIN
                 SETRANGE("BA Db. Code",Rec.Code);
                 DELETEALL(TRUE);
               END;
               WITH BANumList DO BEGIN
                 SETRANGE("BA Db. Code",Rec.Code);
                 DELETEALL(TRUE);
               END;
               WITH BADim DO BEGIN
                 SETRANGE("BA Db. Code",Rec.Code);
                 DELETEALL(TRUE);
               END;
               WITH BACube DO BEGIN
                 SETRANGE("BA Db. Code",Rec.Code);
                 DELETEALL(TRUE);
               END;
               WITH BAVirtCube DO BEGIN
                 SETRANGE("BA Db. Code",Rec.Code);
                 DELETEALL(TRUE);
               END;
             END;

    CaptionML=[ENU=BA Database;
               ESP=Base de datos de BA];
    LookupFormID=Form700;
    DrillDownFormID=Form700;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ESP=C¢digo] }
    { 2   ;   ;Name                ;Text50        ;OnValidate=VAR
                                                                BADatabase@1000 : Record 700;
                                                              BEGIN
                                                                BADatabase.SETFILTER(Code,'<>%1',Code);
                                                                BADatabase.SETRANGE(Name,Name);
                                                                IF BADatabase.FINDFIRST THEN
                                                                  ERROR(Text006,Name,BADatabase.Code);
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              ESP=Nombre] }
    { 3   ;   ;Active              ;Boolean       ;CaptionML=[ENU=Active;
                                                              ESP=Activo] }
    { 4   ;   ;Path to Configurator;Text250       ;OnValidate=BEGIN
                                                                IF "Path to Configurator" <> '' THEN
                                                                  EXISTS("Path to Configurator");
                                                              END;

                                                   OnLookup=VAR
                                                              CmDlgMgt@1001 : Codeunit 412;
                                                              StartFileName@1000 : Text[250];
                                                              NewFileName@1002 : Text[250];
                                                            BEGIN
                                                              IF "Path to Configurator" = '' THEN
                                                                StartFileName := APPLICATIONPATH + 'BA Config\*.exe'
                                                              ELSE
                                                                StartFileName := "Path to Configurator";
                                                              NewFileName := CmDlgMgt.OpenFile(Text001,StartFileName,4,'*.exe|*.exe',0);
                                                              IF (NewFileName <> '') AND (NewFileName <> StartFileName) THEN
                                                                "Path to Configurator" := NewFileName;
                                                            END;

                                                   CaptionML=[ENU=Path to Configurator;
                                                              ESP=Ruta de acceso al configurador] }
    { 5   ;   ;XML                 ;BLOB          ;Compressed=No;
                                                   CaptionML=[ENU=XML;
                                                              ESP=XML] }
    { 6   ;   ;NAV Server Name     ;Text30        ;CaptionML=[ENU=NAV Server Name;
                                                              ESP=Nombre del servidor NAV] }
    { 7   ;   ;BA SQL Server Instance Name;Text250;CaptionML=[ENU=BA SQL Server Instance Name;
                                                              ESP=Nombre instancia servidor SQL BA] }
    { 8   ;   ;Analysis Server Instance Name;Text250;
                                                   CaptionML=[ENU=Analysis Server Instance Name;
                                                              ESP=Nombre instancia servidor an lisis] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1003 : TextConst 'ENU=Default;ESP=Gen‚rico';
      Text001@1000 : TextConst 'ENU=Path to BA Configurator;ESP=Ruta al Configurador de BA';
      Text002@1001 : TextConst 'ENU=The %1 has not been defined yet.;ESP=%1 a£n sin definir.';
      Text003@1002 : TextConst 'ENU=The %1 already contains an XML document. Do you want to load a new?;ESP=%1 ya contiene un documento XML. ¨Desea cargar uno nuevo?';
      Text004@1004 : TextConst 'ENU=The table definition for table %1 has changed. Contact your system administrator if you want to perform this function.;ESP=La definici¢n de tabla de la tabla %1 ha cambiado. P¢ngase en contacto con el administrador del sistema para realizar esta funci¢n.';
      Text006@1006 : TextConst 'ENU=The name "%1" has been used in BA Database %2. BA Database names must be unique.;ESP=El nombre "%1" se ha utilizado en la base de datos BA %2. Los nombres de base de datos BA deben ser £nicos.';

    PROCEDURE StartConfigurator@1();
    VAR
      WindowsLanguage@1007 : Record 2000000045;
      BAPasswordEntry@1009 : Form 722;
      Params@1000 : Text[1024];
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
      Found@1005 : Boolean;
      EOF@1008 : Boolean;
      i@1004 : Integer;
      PassWord@1006 : Text[30];
      TempFileName@1010 : Text[255];
      TempBATFileName@1011 : Text[255];
      TempBATFile@1012 : File;
    BEGIN
      IF NOT ISSERVICETIER THEN BEGIN
        TESTFIELD(Active);
        TESTFIELD("Path to Configurator");
        CODEUNIT.RUN(CODEUNIT::"BA Db. Definition Create XML",Rec);
        COMMIT;
        TempFileName := SaveXMLinTempFile;
        RecRef.OPEN(DATABASE::Session);
        IF RecRef.FINDSET THEN
          REPEAT
            IF GetFieldRefByName(FieldRef,RecRef,'My Session') THEN;
            Found := FORMAT(FieldRef.VALUE) = FORMAT(TRUE);
            IF NOT Found THEN
              EOF := RecRef.NEXT = 0;
          UNTIL EOF OR Found;
        IF NOT Found THEN
          ERROR(Text004,RecRef.CAPTION);


        IF RECORDLEVELLOCKING THEN
          Params := '-tSQL'
        ELSE
          Params := '-tNative';

        IF NOT RECORDLEVELLOCKING THEN
          IF "NAV Server Name" = '' THEN
            Params := Params + ' -o';

        IF NOT RECORDLEVELLOCKING THEN
          IF GetFieldRefByName(FieldRef,RecRef,'Net Type') THEN
            Params := Params + ' -n"' + FORMAT(FieldRef.VALUE) + '"';

        IF RECORDLEVELLOCKING THEN
          Params := Params + ' -s"' + GetSQLServerName + '"'
        ELSE
          IF GetFieldRefByName(FieldRef,RecRef,'Host Name') THEN
            Params := Params + ' -s"' + FORMAT(FieldRef.VALUE) + '"'
          ELSE
            Params := Params + ' -s"' + "NAV Server Name" + '"';

        IF NOT GetFieldRefByName(FieldRef,RecRef,'Database Name') THEN
          ERROR(Text004,RecRef.CAPTION);
        Params := Params + ' -d"' + FORMAT(FieldRef.VALUE) + '"';
        Params := Params + ' -c"' + COMPANYNAME + '"';
        IF NOT GetFieldRefByName(FieldRef,RecRef,'Login Type') THEN
          ERROR(Text004,RecRef.CAPTION);
        i := FieldRef.VALUE;
        IF i = 1 THEN // Windows login
          Params := Params + ' -w'
        ELSE BEGIN
          IF USERID <> '' THEN BEGIN
            Params := Params + ' -u' + FORMAT(USERID);
            IF BAPasswordEntry.RUNMODAL = ACTION::OK THEN
              PassWord := BAPasswordEntry.GetPassword
            ELSE
              EXIT;
            IF PassWord <> '' THEN
              Params := Params + ' -p"' + PassWord + '"';
          END;
        END;
        WindowsLanguage.GET(GLOBALLANGUAGE);
        Params := Params + ' -l' + WindowsLanguage."Abbreviated Name";

        i := STRLEN(TempFileName);
        WHILE (i > 1) AND (TempFileName[i] <> '\') DO
          i := i - 1;
        IF i > 1 THEN BEGIN
          TempBATFileName := COPYSTR(TempFileName,1,i);
          i := STRLEN("Path to Configurator");
          WHILE (i > 2) AND ("Path to Configurator"[i] <> '\') DO BEGIN
            i := i - 1;
          END;
          IF (i > 1) AND ("Path to Configurator"[i] = '\') THEN BEGIN
            TempBATFileName := TempBATFileName + COPYSTR("Path to Configurator",i + 1);
            i := STRLEN(TempBATFileName);
            WHILE (i > 1) AND (TempBATFileName[i] <> '.') AND (TempBATFileName[i] <> '\') DO
              i := i - 1;
            IF (i > 1) AND (TempBATFileName[i] = '.') THEN
              TempBATFileName := COPYSTR(TempBATFileName,1,i);
            TempBATFileName := TempBATFileName + 'BAT';
          END ELSE
            TempBATFileName := TempFileName + '.BAT';
        END ELSE
          TempBATFileName := TempFileName + '.BAT';

        TempBATFile.CREATE(TempBATFileName);
        TempBATFile.TEXTMODE := TRUE;
        TempBATFile.WRITE('@ECHO OFF');
        TempBATFile.WRITE('START " " /LOW "' + "Path to Configurator" + '" ' + Params +' -x"' + TempFileName + '"');
        TempBATFile.CLOSE;
        SHELL(TempBATFileName);
        SLEEP(1000);
        ERASE(TempBATFileName);
      END;
    END;

    LOCAL PROCEDURE GetFieldRefByName@6(VAR FieldRef@1000 : FieldRef;VAR RecRef@1001 : RecordRef;FieldName@1002 : Text[30]) : Boolean;
    VAR
      FieldRef2@1005 : FieldRef;
      i@1003 : Integer;
      Found@1004 : Boolean;
    BEGIN
      WHILE NOT Found AND (i < RecRef.FIELDCOUNT) DO BEGIN
        i := i + 1;
        FieldRef2 := RecRef.FIELDINDEX(i);
        Found := FieldRef2.NAME = FieldName;
      END;
      IF Found THEN
        FieldRef := FieldRef2;
      EXIT(Found);
    END;

    LOCAL PROCEDURE SaveXMLinTempFile@7() : Text[250];
    VAR
      TempFile@1000 : File;
      TempFileName@1001 : Text[250];
    BEGIN
      CALCFIELDS(XML);
      IF NOT XML.HASVALUE THEN
        ERROR(Text002,TABLECAPTION);
      TempFile.CREATETEMPFILE;
      TempFileName := TempFile.NAME + '.xml';
      TempFile.CLOSE;
      XML.EXPORT(TempFileName);
      EXIT(TempFileName);
    END;

    PROCEDURE ShowXML@2();
    VAR
      TempFileName@1001 : Text[250];
      ie@1002 : Automation "{EAB22AC0-30C1-11CF-A7EB-0000C05BAE0B} 1.1:{0002DF01-0000-0000-C000-000000000046}:'Microsoft Internet Controls'.InternetExplorer";
    BEGIN
      TempFileName := SaveXMLinTempFile;
      CREATE(ie);
      ie.Navigate(TempFileName);
      ie.Visible := TRUE;
    END;

    PROCEDURE "Import XML"@3();
    VAR
      RBAutoMgt@1001 : Codeunit 419;
      BLOBRef@1000 : Record 99008535;
    BEGIN
      CALCFIELDS(XML);
      IF XML.HASVALUE THEN
        IF NOT CONFIRM(STRSUBSTNO(Text003,FIELDCAPTION(XML)),FALSE) THEN
          EXIT;
      RBAutoMgt.BLOBImport(BLOBRef,'*.xml|*.xml',TRUE);
      XML := BLOBRef.Blob;
      MODIFY;
    END;

    PROCEDURE "Export XML"@4();
    VAR
      RBAutoMgt@1001 : Codeunit 419;
      BLOBRef@1000 : Record 99008535;
    BEGIN
      CALCFIELDS(XML);
      IF NOT XML.HASVALUE THEN
        ERROR(Text002,TABLECAPTION);
      BLOBRef.Blob := XML;
      RBAutoMgt.BLOBExport(BLOBRef,STRSUBSTNO('%1.xml|*.xml',Code),TRUE);
    END;

    LOCAL PROCEDURE InitCube@5();
    VAR
      BACubeCompany@1001 : Record 701;
      BACubeSchedule@1000 : Record 702;
      BALine@1002 : Record 703;
    BEGIN
      BACubeCompany."BA Db. Code" := Code;
      BACubeCompany."Company Name" := COMPANYNAME;
      IF BACubeCompany.INSERT THEN;

      BACubeSchedule."BA Db. Code" := Code;
      BACubeSchedule."Line No." := 10000;
      BACubeSchedule.Description := Text000;
      EVALUATE(BACubeSchedule."Scheduled Time",'02:00:00');
      IF BACubeSchedule.INSERT THEN;

      BALine."BA Db. Code" := Code;
      BALine."Line No." := 10000;
      BALine.Type := BALine.Type::Cube;
      IF BALine.INSERT THEN;
      BALine.Type := BALine.Type::"Virtual Cube";
      IF BALine.INSERT THEN;
      BALine.Type := BALine.Type::Dimension;
      IF BALine.INSERT THEN;
      BALine.Type := BALine.Type::"Numbered List";
      IF BALine.INSERT THEN;
    END;

    PROCEDURE GetNavisionServerName@8() : Text[1024];
    VAR
      RecRef@1001 : RecordRef;
      FieldRef@1000 : FieldRef;
      Found@1003 : Boolean;
      EOF@1002 : Boolean;
      Params@1004 : Text[1024];
    BEGIN
      RecRef.OPEN(DATABASE::Session);
      IF RecRef.FIND('-') THEN
        REPEAT
          IF GetFieldRefByName(FieldRef,RecRef,'My Session') THEN;
          Found := FORMAT(FieldRef.VALUE) = FORMAT(TRUE);
          IF NOT Found THEN
            EOF := RecRef.NEXT = 0;
        UNTIL EOF OR Found;

      IF Found THEN
        IF GetFieldRefByName(FieldRef,RecRef,'Host Name') THEN
          EXIT(FORMAT(FieldRef.VALUE));
    END;

    PROCEDURE GetSQLServerName@9() : Text[1024];
    VAR
      RecRef@1000 : RecordRef;
      FieldRef@1001 : FieldRef;
      Found@1002 : Boolean;
      EOF@1003 : Boolean;
    BEGIN
      RecRef.OPEN(2000000047); // Database::Sever
      IF RecRef.FINDSET THEN
        REPEAT
          IF GetFieldRefByName(FieldRef,RecRef,'My Server') THEN;
          Found := FORMAT(FieldRef.VALUE) = FORMAT(TRUE);
          IF NOT Found THEN
            EOF := RecRef.NEXT = 0;
        UNTIL EOF OR Found;
      IF NOT Found THEN
        ERROR(Text004,RecRef.CAPTION);
      GetFieldRefByName(FieldRef,RecRef,'Server Name');
      EXIT(FORMAT(FieldRef.VALUE));
    END;

    BEGIN
    END.
  }
}
