OBJECT Table 7009868 Prepago proforma
{
  OBJECT-PROPERTIES
  {
    Date=02/10/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=BEGIN

               ActualizarBancoDefecto;

               "Fecha creacion"   := CURRENTDATETIME;
               "Usuario creacion" := USERID;

               IF "Fecha registro" = 0D THEN
                 "Fecha registro" := TODAY;
             END;

    OnModify=BEGIN
               IF Estado <> Estado::Pendiente THEN
                 ERROR(Text001);
             END;

    OnDelete=BEGIN
               IF Estado <> Estado::Pendiente THEN
                 ERROR(Text001);
             END;

    CaptionML=[ENU=Proforma invoice Prepayment;
               ESP=Prepago proforma];
    LookupFormID=Form7009999;
    DrillDownFormID=Form7009999;
  }
  FIELDS
  {
    { 1   ;   ;Num. Proforma       ;Code20        ;TableRelation="Cabecera Proforma"."Num. Proforma";
                                                   CaptionML=[ENU=Pro-forma invoice No.;
                                                              ESP=Num. Proforma];
                                                   Description=PK, "Cabecera Proforma"."Num. Proforma" }
    { 3   ;   ;Num. Linea          ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Line No.;
                                                              ESP=Num. Linea];
                                                   Description=PK }
    { 5   ;   ;Fecha registro      ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 6   ;   ;Tipo importe        ;Option        ;OnValidate=BEGIN
                                                                Importe    := 0;
                                                                Porcentaje := 0;

                                                                IF "Tipo importe" = "Tipo importe"::Porcentaje THEN
                                                                  Importe := ROUND(ImportePendiente * Porcentaje / 100);
                                                              END;

                                                   CaptionML=[ENU=Amount type;
                                                              ESP=Tipo importe];
                                                   OptionCaptionML=[ENU=Fixed,Percentage;
                                                                    ESP=Fijo,Porcentaje];
                                                   OptionString=Fijo,Porcentaje }
    { 7   ;   ;Importe             ;Decimal       ;OnValidate=BEGIN
                                                                IF Importe > ImportePendiente THEN
                                                                  ERROR(Text003);
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ESP=Importe] }
    { 9   ;   ;Fecha creacion      ;DateTime      ;CaptionML=[ENU=Creation Date;
                                                              ESP=Fecha creacion] }
    { 11  ;   ;Usuario creacion    ;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU=Creation user;
                                                              ESP=Usuario creacion];
                                                   Description=User."User ID" }
    { 13  ;   ;Fecha registrado    ;DateTime      ;CaptionML=[ENU=Registered date;
                                                              ESP=Fecha registrado] }
    { 15  ;   ;Usuario registrado  ;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=[ENU="Registered user ";
                                                              ESP=Usuario registrado];
                                                   Description=User."User ID" }
    { 16  ;   ;Estado              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Remaining,Registered;
                                                                    ESP=Pendiente,Registrado];
                                                   OptionString=Pendiente,Registrado }
    { 17  ;   ;Porcentaje          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Tipo importe" = "Tipo importe"::Porcentaje THEN BEGIN
                                                                  rCab.GET("Num. Proforma");
                                                                  rCab.CALCFIELDS(Importe);

                                                                  Importe := ROUND(ROUND(rCab.Importe) * Porcentaje / 100);
                                                                END;

                                                                IF Importe > ImportePendiente THEN
                                                                  ERROR(Text003);
                                                              END;

                                                   CaptionML=[ENU=Percentage;
                                                              ESP=Porcentaje] }
    { 19  ;   ;Banco               ;Code20        ;TableRelation="Bank Account".No.;
                                                   CaptionML=[ENU=Bank;
                                                              ESP=Banco];
                                                   Description="Bank Account".No. }
  }
  KEYS
  {
    {    ;Num. Proforma,Num. Linea                ;SumIndexFields=Importe;
                                                   Clustered=Yes }
    {    ;Estado                                  ;SumIndexFields=Importe;
                                                   KeyGroups=RENUMERING }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1103355000 : TextConst 'ENU=Unable to modify or delete prepayments already registered;ESP=No se pueden modificar ni borrar prepagos ya registrados.';
      Text002@1103355001 : TextConst 'ENU=Unable to create more prepayments for this proforma;ESP=No se pueden generar mas prepagos sobre esta proforma.';
      Text003@1103355002 : TextConst 'ENU=Prepayment amount exceeds the remaining amount of the proforma;ESP=El importe del prepago supera el importe pendiente de la proforma.';
      cGestProf@1103355003 : Codeunit 7009902;
      rCab@1103355004 : Record 7009866;

    PROCEDURE ImportePendiente@1103355000() : Decimal;
    VAR
      lrCab@1103355000 : Record 7009866;
      lrPrepag@1103355001 : Record 7009868;
      lwImportePdte@1103355002 : Decimal;
    BEGIN
      // ImportePendiente

      //IF ("Tipo importe" = "Tipo importe"::Fijo) OR
      //   (Porcentaje = 0) THEN
      //  EXIT;

      lrCab.GET("Num. Proforma");
      lrCab.CALCFIELDS(Importe);

      lrPrepag.RESET;
      lrPrepag.SETRANGE("Num. Proforma", "Num. Proforma");
      IF lrPrepag.FINDSET THEN
        lrPrepag.CALCSUMS(Importe);

      //IF lrPrepag.Importe + pwImpLinAct > ROUND(lrCab.Importe) THEN
      //  ERROR(Text002);

      lwImportePdte := ROUND(lrCab.Importe) - (lrPrepag.Importe);

      EXIT(lwImportePdte);
    END;

    PROCEDURE ActualizarBancoDefecto@1103355001();
    VAR
      lrCliente@1103355000 : Record 18;
      lrCabProf@1103355001 : Record 7009866;
    BEGIN
      // ActualizarBancoDefecto
      // rellena el banco del prepago con el banco por defecto de la ficha de cliente.

      IF lrCabProf.GET("Num. Proforma") THEN
        IF lrCliente.GET(lrCabProf.Cliente) THEN
          Banco := lrCliente."Default Bank Acc. Code";
    END;

    BEGIN
    END.
  }
}
