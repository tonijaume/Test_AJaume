OBJECT Table 5055262 Liq. Account Schedule Line
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=LIQEM6.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF xRec."Line No." = 0 THEN
                 IF NOT LiqAccSchedName.GET("Schedule Name") THEN BEGIN
                   LiqAccSchedName.INIT;
                   LiqAccSchedName.Name := "Schedule Name";
                   IF LiqAccSchedName.Name = '' THEN
                     LiqAccSchedName.Description := Text1140000;
                   LiqAccSchedName.INSERT;
                 END;
             END;

    CaptionML=[ENU=Liq. Account Schedule Line;
               ESP=L¡n. esquema ctas. liq.];
  }
  FIELDS
  {
    { 1   ;   ;Schedule Name       ;Code10        ;TableRelation="Liq. Account Schedule Name";
                                                   CaptionML=[ENU=Schedule Name;
                                                              ESP=Nombre previsi¢n] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 3   ;   ;Row No.             ;Code10        ;CaptionML=[ENU=Row No.;
                                                              ESP=N§ fila] }
    { 4   ;   ;Description         ;Text80        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 5   ;   ;Totaling            ;Text250       ;TableRelation=IF (Totaling Type=CONST(Posting Accounts)) "Liquidity Account"
                                                                 ELSE IF (Totaling Type=CONST(Total Accounts)) "Liquidity Account";
                                                   OnValidate=BEGIN
                                                                CASE "Totaling Type" OF
                                                                  "Totaling Type"::"Posting Accounts","Totaling Type"::"Total Accounts":
                                                                    BEGIN
                                                                      LiqAcc.SETFILTER("No.",Totaling);
                                                                      LiqAcc.CALCFIELDS(Amount);
                                                                    END;
                                                                  "Totaling Type"::Formula:
                                                                    BEGIN
                                                                      Totaling := UPPERCASE(Totaling);
                                                                      CheckFormula(Totaling);
                                                                    END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Totaling;
                                                              ESP=Sumatorio] }
    { 6   ;   ;Totaling Type       ;Option        ;OnValidate=BEGIN
                                                                VALIDATE(Totaling);
                                                              END;

                                                   CaptionML=[ENU=Totaling Type;
                                                              ESP=Tipo sumatorio];
                                                   OptionCaptionML=[ENU=Posting Accounts,Total Accounts,Formula,,,Set Base For Percent;
                                                                    ESP=Cuentas auxiliares,Cuentas mayor,F¢rmula,,,Fijar base para porcentaje];
                                                   OptionString=Posting Accounts,Total Accounts,Formula,,,Set Base For Percent }
    { 7   ;   ;New Page            ;Boolean       ;CaptionML=[ENU=New Page;
                                                              ESP=Cambiar p gina] }
    { 11  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ESP=Filtro fecha] }
    { 12  ;   ;Liquidity Filter    ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Liquidity;
                                                   CaptionML=[ENU=Liquidity Filter;
                                                              ESP=Filtro liquidez] }
    { 13  ;   ;Dimension 1 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 1 Filter;
                                                              ESP=Filtro dimensi¢n 1];
                                                   CaptionClass=GetCaptionClass(1) }
    { 14  ;   ;Dimension 2 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 2 Filter;
                                                              ESP=Filtro dimensi¢n 2];
                                                   CaptionClass=GetCaptionClass(2) }
    { 16  ;   ;Show                ;Option        ;CaptionML=[ENU=Show;
                                                              ESP=Mostrar];
                                                   OptionCaptionML=[ENU=Yes,No,If Any Column Not Zero,When Positive Balance,When Negative Balance;
                                                                    ESP=S¡,No,Si ninguna columna es cero,Con saldo positivo,Con saldo negativo];
                                                   OptionString=Yes,No,If Any Column Not Zero,When Positive Balance,When Negative Balance }
    { 17  ;   ;Dimension 3 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 3 Filter;
                                                              ESP=Filtro dimensi¢n 3];
                                                   CaptionClass=GetCaptionClass(3) }
    { 18  ;   ;Dimension 4 Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Dimension 4 Filter;
                                                              ESP=Filtro dimensi¢n 4];
                                                   CaptionClass=GetCaptionClass(4) }
    { 19  ;   ;Dimension 1 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 1 Totaling;
                                                              ESP=Total dimensi¢n 1];
                                                   CaptionClass=GetCaptionClass(5) }
    { 20  ;   ;Dimension 2 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 2 Totaling;
                                                              ESP=Total dimensi¢n 2];
                                                   CaptionClass=GetCaptionClass(6) }
    { 21  ;   ;Dimension 3 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 3 Totaling;
                                                              ESP=Total dimensi¢n 3];
                                                   CaptionClass=GetCaptionClass(7) }
    { 22  ;   ;Dimension 4 Totaling;Text80        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Dimension 4 Totaling;
                                                              ESP=Total dimensi¢n 4];
                                                   CaptionClass=GetCaptionClass(8) }
    { 23  ;   ;Bold                ;Boolean       ;CaptionML=[ENU=Bold;
                                                              ESP=Negrita] }
    { 24  ;   ;Italic              ;Boolean       ;CaptionML=[ENU=Italic;
                                                              ESP=It lica] }
    { 25  ;   ;Underline           ;Boolean       ;CaptionML=[ENU=Underline;
                                                              ESP=Subrayar] }
    { 26  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=[ENU=Show Opposite Sign;
                                                              ESP=Muestra signo opuesto] }
    { 27  ;   ;Row Type            ;Option        ;CaptionML=[ENU=Row Type;
                                                              ESP=Tipo fila];
                                                   OptionCaptionML=[ENU=Net Change,Balance at Date,Beginning Balance;
                                                                    ESP=Saldo periodo,Saldo a la fecha,Saldo inicial];
                                                   OptionString=Net Change,Balance at Date,Beginning Balance }
    { 28  ;   ;Amount Type         ;Option        ;CaptionML=[ENU=Amount Type;
                                                              ESP=Tipo importe];
                                                   OptionCaptionML=[ENU=Net Amount,Debit Amount,Credit Amount;
                                                                    ESP=Saldo,Debe,Haber];
                                                   OptionString=Net Amount,Debit Amount,Credit Amount }
  }
  KEYS
  {
    {    ;Schedule Name,Line No.                  ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text1140000@1140000 : TextConst 'ENU=Default Schedule;ESP=Previsi¢n genr.';
      Text1140001@1140001 : TextConst 'ENU=The parenthesis at position %1 is misplaced.;ESP=El parntesis en la posici¢n %1 es incorrecto.';
      Text1140002@1140002 : TextConst 'ENU=You cannot have two consecutive operators. The error occurred at position %1.;ESP=No se puede tener dos operaciones consecutivas. Revise la posici¢n %1.';
      Text1140003@1140003 : TextConst 'ENU=There is an operand missing after position %1.;ESP=Falta un operando despus de la posici¢n %1.';
      Text1140004@1140004 : TextConst 'ENU=There are more left parentheses than right parentheses.;ESP=Hay m s parntesis de apertura que de cierre.';
      Text1140005@1140005 : TextConst 'ENU=There are more right parentheses than left parentheses.;ESP=Hay m s parntesis de cierre que de apertura.';
      Text1140006@1140006 : TextConst 'ENU=1,6,,Dimension 1 Filter;ESP=1,6,,Filtro dimensi¢n 1';
      Text1140007@1140007 : TextConst 'ENU=1,6,,Dimension 2 Filter;ESP=1,6,,Filtro dimensi¢n 2';
      Text1140008@1140008 : TextConst 'ENU=1,6,,Dimension 3 Filter;ESP=1,6,,Filtro dimensi¢n 3';
      Text1140009@1140009 : TextConst 'ENU=1,6,,Dimension 4 Filter;ESP=1,6,,Filtro dimensi¢n 4';
      Text1140010@1140010 : TextConst 'ENU=,, Totaling;ESP=,, Totales';
      Text1140011@1140011 : TextConst 'ENU=1,5,,Dimension 1 Totaling;ESP=1,5,,Total dimensi¢n 1';
      Text1140012@1140012 : TextConst 'ENU=1,5,,Dimension 2 Totaling;ESP=1,5,,Total dimensi¢n 2';
      Text1140013@1140013 : TextConst 'ENU=1,5,,Dimension 3 Totaling;ESP=1,5,,Total dimensi¢n 3';
      Text1140014@1140014 : TextConst 'ENU=1,5,,Dimension 4 Totaling;ESP=1,5,,Total dimensi¢n 4';
      Text1140015@1140015 : TextConst 'ENU=The %1 refers to %2 %3, which does not exist. The field %4 on table %5 has now been deleted.;ESP=El %1 se refiere a %2 %3, que no existe. El campo %4 en la tabla %5 ha sido borrado.';
      LiqAccSchedName@1140016 : Record 5055261;
      LiqAcc@1140017 : Record 5055251;
      LiquidityAnalysisView@1140018 : Record 5055269;
      GLSetup@1140019 : Record 98;
      HasGLSetup@1140020 : Boolean;

    PROCEDURE CheckFormula@1140000(Formula@1140000 : Code[80]);
    VAR
      i@1140001 : Integer;
      ParenthesesLevel@1140002 : Integer;
      HasOperator@1140003 : Boolean;
    BEGIN
      ParenthesesLevel := 0;
      FOR i := 1 TO STRLEN(Formula) DO BEGIN
        IF Formula[i] = '(' THEN
          ParenthesesLevel := ParenthesesLevel + 1
        ELSE
          IF Formula[i] = ')' THEN
            ParenthesesLevel := ParenthesesLevel - 1;
        IF ParenthesesLevel < 0 THEN
          ERROR(Text1140001,i);
        IF Formula[i] IN ['+','-','*','/','^'] THEN BEGIN
          IF HasOperator THEN
            ERROR(Text1140002,i)
          ELSE
            HasOperator := TRUE;
          IF i = STRLEN(Formula) THEN
            ERROR(Text1140003,i)
          ELSE
            IF Formula[i+1] = ')' THEN
              ERROR(Text1140003,i);
        END ELSE
          HasOperator := FALSE;
      END;
      IF ParenthesesLevel > 0 THEN
        ERROR(Text1140004)
      ELSE
        IF ParenthesesLevel < 0 THEN
          ERROR(Text1140005);
    END;

    PROCEDURE LookUpDimFilter@1140001(DimNo@1140000 : Integer;VAR Text@1140001 : Text[250]) : Boolean;
    VAR
      DimVal@1140002 : Record 349;
      DimValList@1140003 : Form 560;
    BEGIN
      GetAccSchedSetup;
      CASE DimNo OF
        1: DimVal.SETRANGE("Dimension Code",LiquidityAnalysisView."Dimension 1 Code");
        2: DimVal.SETRANGE("Dimension Code",LiquidityAnalysisView."Dimension 2 Code");
        3: DimVal.SETRANGE("Dimension Code",LiquidityAnalysisView."Dimension 3 Code");
        4: DimVal.SETRANGE("Dimension Code",LiquidityAnalysisView."Dimension 4 Code");
      END;
      DimValList.LOOKUPMODE(TRUE);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := Text + DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE)
    END;

    PROCEDURE GetCaptionClass@1140002(AnalysisViewDimType@1140000 : Integer) : Text[250];
    BEGIN
      GetAccSchedSetup;
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF LiquidityAnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + LiquidityAnalysisView."Dimension 1 Code")
            ELSE
              EXIT(Text1140006);
          END;
        2:
          BEGIN
            IF LiquidityAnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + LiquidityAnalysisView."Dimension 2 Code")
            ELSE
              EXIT(Text1140007);
          END;
        3:
          BEGIN
            IF LiquidityAnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + LiquidityAnalysisView."Dimension 3 Code")
            ELSE
              EXIT(Text1140008);
          END;
        4:
          BEGIN
            IF LiquidityAnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + LiquidityAnalysisView."Dimension 4 Code")
            ELSE
              EXIT(Text1140009);
          END;
        5:
          BEGIN
            IF LiquidityAnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,5,' + LiquidityAnalysisView."Dimension 1 Code" + Text1140010)
            ELSE
              EXIT(Text1140011);
          END;
        6:
          BEGIN
            IF LiquidityAnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,5,' + LiquidityAnalysisView."Dimension 2 Code" + Text1140010)
            ELSE
              EXIT(Text1140012);
          END;
        7:
          BEGIN
            IF LiquidityAnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,5,' + LiquidityAnalysisView."Dimension 3 Code" + Text1140010)
            ELSE
              EXIT(Text1140013);
          END;
        8:
          BEGIN
            IF LiquidityAnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,5,' + LiquidityAnalysisView."Dimension 4 Code" + Text1140010)
            ELSE
              EXIT(Text1140014);
          END;
      END;
    END;

    LOCAL PROCEDURE GetAccSchedSetup@1140003();
    BEGIN
      IF "Schedule Name" <> LiqAccSchedName.Name THEN
        LiqAccSchedName.GET("Schedule Name");
      IF LiqAccSchedName."Liq. Analysis View Name" <> '' THEN BEGIN
        IF LiqAccSchedName."Liq. Analysis View Name" <> LiquidityAnalysisView.Code THEN
          IF NOT LiquidityAnalysisView.GET(LiqAccSchedName."Liq. Analysis View Name") THEN BEGIN
            MESSAGE(
              Text1140015,
              LiqAccSchedName.TABLECAPTION,LiquidityAnalysisView.TABLECAPTION,LiqAccSchedName."Liq. Analysis View Name",
              LiqAccSchedName.FIELDCAPTION("Liq. Analysis View Name"),LiqAccSchedName.TABLECAPTION);
            LiqAccSchedName."Liq. Analysis View Name" := '';
            LiqAccSchedName.MODIFY;
          END;
      END;

      IF LiqAccSchedName."Liq. Analysis View Name" = '' THEN BEGIN
        IF NOT HasGLSetup THEN BEGIN
          GLSetup.GET;
          HasGLSetup := TRUE;
        END;
        LiquidityAnalysisView.INIT;
        LiquidityAnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
        LiquidityAnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
      END;
    END;

    BEGIN
    END.
  }
}
