OBJECT Table 7311 Warehouse Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "User ID" := USERID;
             END;

    OnDelete=BEGIN
               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Warehouse Journal Line",0,"Journal Batch Name",
                 "Journal Template Name",0,"Line No.","Location Code",TRUE);
             END;

    CaptionML=[ENU=Warehouse Journal Line;
               ESP=L¡nea diario almac‚n];
    LookupFormID=Form7319;
    DrillDownFormID=Form7319;
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Warehouse Journal Template";
                                                   CaptionML=[ENU=Journal Template Name;
                                                              ESP=Nombre libro diario] }
    { 2   ;   ;Journal Batch Name  ;Code10        ;TableRelation="Warehouse Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              ESP=Nombre secci¢n diario] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea] }
    { 4   ;   ;Registering Date    ;Date          ;CaptionML=[ENU=Registering Date;
                                                              ESP=Fecha registro] }
    { 5   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n] }
    { 6   ;   ;From Zone Code      ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF "From Zone Code" <> xRec."From Zone Code" THEN BEGIN
                                                                  "From Bin Code" := '';
                                                                  "From Bin Type Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=From Zone Code;
                                                              ESP=Desde c¢d. zona] }
    { 7   ;   ;From Bin Code       ;Code20        ;TableRelation=IF (Phys. Inventory=CONST(No),
                                                                     Item No.=FILTER(''),
                                                                     From Zone Code=FILTER('')) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code))
                                                                     ELSE IF (Phys. Inventory=CONST(No),
                                                                              Item No.=FILTER(<>''),
                                                                              From Zone Code=FILTER('')) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                         Item No.=FIELD(Item No.))
                                                                                                                                         ELSE IF (Phys. Inventory=CONST(No),
                                                                                                                                                  Item No.=FILTER(''),
                                                                                                                                                  From Zone Code=FILTER(<>'')) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                               Zone Code=FIELD(From Zone Code))
                                                                                                                                                                                                               ELSE IF (Phys. Inventory=CONST(No),
                                                                                                                                                                                                                        Item No.=FILTER(<>''),
                                                                                                                                                                                                                        From Zone Code=FILTER(<>'')) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                                                                                                     Item No.=FIELD(Item No.),
                                                                                                                                                                                                                                                                                     Zone Code=FIELD(From Zone Code))
                                                                                                                                                                                                                                                                                     ELSE IF (Phys. Inventory=CONST(Yes),
                                                                                                                                                                                                                                                                                              From Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code))
                                                                                                                                                                                                                                                                                              ELSE IF (Phys. Inventory=CONST(Yes),
                                                                                                                                                                                                                                                                                                       From Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                                                                                                                                                                    Zone Code=FIELD(From Zone Code));
                                                   OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF CurrFieldNo = FIELDNO("From Bin Code") THEN
                                                                  IF "From Bin Code" <> xRec."From Bin Code" THEN
                                                                    CheckBin("Location Code","From Bin Code",FALSE);

                                                                "From Bin Type Code" :=
                                                                  GetBinType("Location Code","From Bin Code");

                                                                Bin.CALCFIELDS("Adjustment Bin");
                                                                Bin.TESTFIELD("Adjustment Bin",FALSE);

                                                                IF "From Bin Code" <> '' THEN
                                                                  "From Zone Code" := Bin."Zone Code";
                                                              END;

                                                   CaptionML=[ENU=From Bin Code;
                                                              ESP=Desde c¢d. ubicaci¢n] }
    { 8   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 9   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF "Item No." <> '' THEN BEGIN
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Variant Code" := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto] }
    { 10  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                WhseJnlTemplate.GET("Journal Template Name");
                                                                IF WhseJnlTemplate.Type = WhseJnlTemplate.Type::Reclassification THEN BEGIN
                                                                  IF Quantity < 0 THEN
                                                                    FIELDERROR(Quantity,Text000);
                                                                END ELSE BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Adjustment Bin Code");
                                                                END;

                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                                "Qty. (Absolute)" := ABS(Quantity);
                                                                "Qty. (Absolute, Base)" := ABS("Qty. (Base)");
                                                                IF (xRec.Quantity < 0) AND (Quantity >= 0) OR
                                                                   (xRec.Quantity >= 0) AND (Quantity < 0)
                                                                THEN
                                                                  ExchangeFromToBin;

                                                                IF Quantity > 0 THEN
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. (Absolute)",Cubage,Weight)
                                                                ELSE BEGIN
                                                                  Cubage := 0;
                                                                  Weight := 0;
                                                                END;

                                                                IF Quantity <> xRec.Quantity THEN BEGIN
                                                                  CheckBin("Location Code","From Bin Code",FALSE);
                                                                  CheckBin("Location Code","To Bin Code",TRUE);
                                                                END;

                                                                ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,FALSE);
                                                                IF SNRequired AND NOT "Phys. Inventory" AND
                                                                   ("Serial No." <> '') AND ((Quantity < 0) OR (Quantity > 1))
                                                                THEN
                                                                  ERROR(Text006,FIELDCAPTION(Quantity));
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5 }
    { 11  ;   ;Qty. (Base)         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Qty. (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. (Base);
                                                              ESP=Cantidad (Base)];
                                                   DecimalPlaces=0:5 }
    { 12  ;   ;Qty. (Absolute)     ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                "Qty. (Absolute, Base)" := CalcBaseQty("Qty. (Absolute)");

                                                                IF Quantity > 0 THEN
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. (Absolute)",Cubage,Weight)
                                                                ELSE BEGIN
                                                                  Cubage := 0;
                                                                  Weight := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Qty. (Absolute);
                                                              ESP=Cantidad (Absoluta)];
                                                   DecimalPlaces=0:5 }
    { 13  ;   ;Qty. (Absolute, Base);Decimal      ;CaptionML=[ENU=Qty. (Absolute, Base);
                                                              ESP=Cdad. (Absoluta, Base)];
                                                   DecimalPlaces=0:5 }
    { 14  ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF "Zone Code" <> xRec."Zone Code" THEN
                                                                  "Bin Code" := '';

                                                                IF Quantity < 0 THEN
                                                                  VALIDATE("From Zone Code","Zone Code")
                                                                ELSE
                                                                  VALIDATE("To Zone Code","Zone Code");
                                                              END;

                                                   CaptionML=[ENU=Zone Code;
                                                              ESP=C¢d. zona] }
    { 15  ;   ;Bin Code            ;Code20        ;TableRelation=IF (Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code))
                                                                 ELSE IF (Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                  Zone Code=FIELD(Zone Code));
                                                   OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF Quantity < 0 THEN BEGIN
                                                                  VALIDATE("From Bin Code","Bin Code");
                                                                  IF "Bin Code" <> xRec."Bin Code" THEN
                                                                    CheckBin("Location Code","Bin Code",FALSE);
                                                                END ELSE BEGIN
                                                                  VALIDATE("To Bin Code","Bin Code");
                                                                  IF "Bin Code" <> xRec."Bin Code" THEN
                                                                    CheckBin("Location Code","Bin Code",TRUE);
                                                                END;

                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  GetBin("Location Code","Bin Code");
                                                                  "Zone Code" := Bin."Zone Code";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ESP=C¢d. ubicaci¢n] }
    { 20  ;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              ESP=Tipo procedencia mov.];
                                                   Editable=No }
    { 21  ;   ;Source Subtype      ;Option        ;CaptionML=[ENU=Source Subtype;
                                                              ESP=Subtipo origen];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    ESP=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 22  ;   ;Source No.          ;Code20        ;CaptionML=[ENU=Source No.;
                                                              ESP=C¢d. procedencia mov.];
                                                   Editable=No }
    { 23  ;   ;Source Line No.     ;Integer       ;CaptionML=[ENU=Source Line No.;
                                                              ESP=N§ l¡n. origen];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 24  ;   ;Source Subline No.  ;Integer       ;CaptionML=[ENU=Source Subline No.;
                                                              ESP=N§ subl¡nea origen];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 25  ;   ;Source Document     ;Option        ;CaptionML=[ENU=Source Document;
                                                              ESP=Documento origen];
                                                   OptionCaptionML=[ENU=,S. Order,S. Invoice,S. Credit Memo,S. Return Order,P. Order,P. Invoice,P. Credit Memo,P. Return Order,Inb. Transfer,Outb. Transfer,Prod. Consumption,Item Jnl.,Phys. Invt. Jnl.,Reclass. Jnl.,Consumption Jnl.,Output Jnl.,BOM Jnl.,Serv Order;
                                                                    ESP=,P.venta,F. venta,Abono venta,Dev. venta,P. compra,F. compra,Abono compra,Dev.compra,Transfer. entrada,Transfer. salida,Consumo prod.,Diario prod..,Diario inventario,Diario reclasif.,Diario consumo,Diario salida,Diario L.M.,Ped. serv.];
                                                   OptionString=,S. Order,S. Invoice,S. Credit Memo,S. Return Order,P. Order,P. Invoice,P. Credit Memo,P. Return Order,Inb. Transfer,Outb. Transfer,Prod. Consumption,Item Jnl.,Phys. Invt. Jnl.,Reclass. Jnl.,Consumption Jnl.,Output Jnl.,BOM Jnl.,Serv Order;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 26  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ESP=C¢d. origen];
                                                   Editable=No }
    { 27  ;   ;To Zone Code        ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF "To Zone Code" <> xRec."To Zone Code" THEN
                                                                  "To Bin Code" := '';
                                                              END;

                                                   CaptionML=[ENU=To Zone Code;
                                                              ESP=Hasta c¢d. zona] }
    { 28  ;   ;To Bin Code         ;Code20        ;TableRelation=IF (To Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code))
                                                                 ELSE IF (To Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                     Zone Code=FIELD(To Zone Code));
                                                   OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF CurrFieldNo = FIELDNO("To Bin Code") THEN
                                                                  IF "To Bin Code" <> xRec."To Bin Code" THEN
                                                                    CheckBin("Location Code","To Bin Code",TRUE);

                                                                GetBin("Location Code","To Bin Code");

                                                                Bin.CALCFIELDS("Adjustment Bin");
                                                                Bin.TESTFIELD("Adjustment Bin",FALSE);

                                                                IF "To Bin Code" <> '' THEN
                                                                  "To Zone Code" := Bin."Zone Code";
                                                              END;

                                                   CaptionML=[ENU=To Bin Code;
                                                              ESP=Hasta c¢d. ubicaci¢n] }
    { 29  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ESP=C¢d. auditor¡a] }
    { 33  ;   ;Registering No. Series;Code10      ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Registering No. Series;
                                                              ESP=N§ serie registro] }
    { 35  ;   ;From Bin Type Code  ;Code10        ;TableRelation="Bin Type";
                                                   CaptionML=[ENU=From Bin Type Code;
                                                              ESP=Desde c¢d. tipo ubicaci¢n] }
    { 40  ;   ;Cubage              ;Decimal       ;CaptionML=[ENU=Cubage;
                                                              ESP=Cubicaje];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 41  ;   ;Weight              ;Decimal       ;CaptionML=[ENU=Weight;
                                                              ESP=Peso];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 50  ;   ;Whse. Document No.  ;Code20        ;CaptionML=[ENU=Whse. Document No.;
                                                              ESP=N§ documento almac‚n] }
    { 51  ;   ;Whse. Document Type ;Option        ;CaptionML=[ENU=Whse. Document Type;
                                                              ESP=Tipo documento almac‚n];
                                                   OptionCaptionML=[ENU="Whse. Journal,Receipt,Shipment,Internal Put-away,Internal Pick,Production,Whse. Phys. Inventory, ";
                                                                    ESP="Diario almac‚n,Recepci¢n,Env¡o,Ubicaci¢n interna,Picking interno,Producci¢n,Inventario f¡s. alm., "];
                                                   OptionString=[Whse. Journal,Receipt,Shipment,Internal Put-away,Internal Pick,Production,Whse. Phys. Inventory, ] }
    { 52  ;   ;Whse. Document Line No.;Integer    ;CaptionML=[ENU=Whse. Document Line No.;
                                                              ESP=N§ l¡n. documento almac‚n];
                                                   BlankZero=Yes }
    { 53  ;   ;Qty. (Calculated)   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. (Phys. Inventory)");
                                                              END;

                                                   CaptionML=[ENU=Qty. (Calculated);
                                                              ESP=Stock calculado];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 54  ;   ;Qty. (Phys. Inventory);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Phys. Inventory",TRUE);

                                                                IF "Serial No." <> '' THEN
                                                                  IF ("Qty. (Phys. Inventory)" < 0) OR ("Qty. (Phys. Inventory)" > 1) THEN
                                                                    ERROR(Text006,FIELDCAPTION("Qty. (Phys. Inventory)"));

                                                                PhysInvtEntered := TRUE;
                                                                Quantity := 0;
                                                                VALIDATE(Quantity,"Qty. (Phys. Inventory)" - "Qty. (Calculated)");
                                                                IF "Qty. (Phys. Inventory)" = "Qty. (Calculated)" THEN
                                                                  VALIDATE("Qty. (Phys. Inventory) (Base)","Qty. (Calculated) (Base)")
                                                                ELSE
                                                                  VALIDATE("Qty. (Phys. Inventory) (Base)",ROUND("Qty. (Phys. Inventory)" * "Qty. per Unit of Measure",0.00001));
                                                                PhysInvtEntered := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Qty. (Phys. Inventory);
                                                              ESP=Cdad. (stock f¡sico)];
                                                   DecimalPlaces=0:5 }
    { 55  ;   ;Entry Type          ;Option        ;CaptionML=[ENU=Entry Type;
                                                              ESP=Tipo movimiento];
                                                   OptionCaptionML=[ENU=Negative Adjmt.,Positive Adjmt.,Movement;
                                                                    ESP=Ajuste negativo,Ajuste positivo,Movimiento];
                                                   OptionString=Negative Adjmt.,Positive Adjmt.,Movement }
    { 56  ;   ;Phys. Inventory     ;Boolean       ;CaptionML=[ENU=Phys. Inventory;
                                                              ESP=Inventario f¡sico];
                                                   Editable=No }
    { 60  ;   ;Reference Document  ;Option        ;CaptionML=[ENU=Reference Document;
                                                              ESP=Documento referencia];
                                                   OptionCaptionML=[ENU=" ,Posted Rcpt.,Posted P. Inv.,Posted Rtrn. Rcpt.,Posted P. Cr. Memo,Posted Shipment,Posted S. Inv.,Posted Rtrn. Shipment,Posted S. Cr. Memo,Posted T. Receipt,Posted T. Shipment,Item Journal,Prod.,Put-away,Pick,Movement,BOM Journal";
                                                                    ESP=" ,Hist¢rico recep.,C. invent. regis.,Dev. recep. regis.,Abono c. regis.,Hist¢rico env¡o,V. invent. regis.,Env¡o dev. regis.,Abono v. regis.,Recep. transfer. regis.,Env¡o t. regis.,Diario producto,Prod.,Ubic.,Picking,Mov.,Diario L.M."];
                                                   OptionString=[ ,Posted Rcpt.,Posted P. Inv.,Posted Rtrn. Rcpt.,Posted P. Cr. Memo,Posted Shipment,Posted S. Inv.,Posted Rtrn. Shipment,Posted S. Cr. Memo,Posted T. Receipt,Posted T. Shipment,Item Journal,Prod.,Put-away,Pick,Movement,BOM Journal] }
    { 61  ;   ;Reference No.       ;Code20        ;CaptionML=[ENU=Reference No.;
                                                              ESP=N§ referencia] }
    { 67  ;   ;User ID             ;Code20        ;TableRelation=User;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              ESP=Id. usuario] }
    { 68  ;   ;Qty. (Calculated) (Base);Decimal   ;CaptionML=[ENU=Qty. (Calculated) (Base);
                                                              ESP=Cantidad calculada (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 69  ;   ;Qty. (Phys. Inventory) (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                "Qty. (Base)" := "Qty. (Phys. Inventory) (Base)" - "Qty. (Calculated) (Base)";
                                                                "Qty. (Absolute, Base)" := ABS("Qty. (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. (Phys. Inventory) (Base);
                                                              ESP=Cantidad inventario f¡sico (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record 5401;
                                                              BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF "Variant Code" <> '' THEN BEGIN
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                END ELSE
                                                                  GetItem("Item No.",Description);

                                                                IF "Variant Code" <> xRec."Variant Code" THEN BEGIN
                                                                  CheckBin("Location Code","From Bin Code",FALSE);
                                                                  CheckBin("Location Code","To Bin Code",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                IF "Item No." <> '' THEN BEGIN
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                  CheckBin("Location Code","From Bin Code",FALSE);
                                                                  CheckBin("Location Code","To Bin Code",TRUE);
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 1;
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida] }
    { 6500;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                IF "Serial No." <> '' THEN
                                                                  ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,TRUE);

                                                                IF (Quantity < 0) OR (Quantity > 1) THEN
                                                                  ERROR(Text006,FIELDCAPTION(Quantity));
                                                              END;

                                                   OnLookup=BEGIN
                                                              ItemTrackingMgt.LookupLotSerialNoInfo("Item No.","Variant Code",0,"Serial No.");
                                                            END;

                                                   CaptionML=[ENU=Serial No.;
                                                              ESP=N§ serie] }
    { 6501;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                IF "Lot No." <> '' THEN
                                                                  ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",SNRequired,LNRequired,TRUE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              ItemTrackingMgt.LookupLotSerialNoInfo("Item No.","Variant Code",1,"Lot No.");
                                                            END;

                                                   CaptionML=[ENU=Lot No.;
                                                              ESP=N§ lote] }
    { 6502;   ;Warranty Date       ;Date          ;CaptionML=[ENU=Warranty Date;
                                                              ESP=Fecha garant¡a];
                                                   Editable=No }
    { 6503;   ;Expiration Date     ;Date          ;CaptionML=[ENU=Expiration Date;
                                                              ESP=Fecha caducidad];
                                                   Editable=No }
    { 6504;   ;New Serial No.      ;Code20        ;CaptionML=[ENU=New Serial No.;
                                                              ESP=Nuevo n§ serie];
                                                   Editable=No }
    { 6505;   ;New Lot No.         ;Code20        ;CaptionML=[ENU=New Lot No.;
                                                              ESP=Nuevo n§ lote];
                                                   Editable=No }
    { 6506;   ;New Expiration Date ;Date          ;CaptionML=[ENU=New Expiration Date;
                                                              ESP=Nueva fecha caducidad];
                                                   Editable=No }
    { 7380;   ;Phys Invt Counting Period Code;Code10;
                                                   TableRelation="Phys. Invt. Counting Period";
                                                   CaptionML=[ENU=Phys Invt Counting Period Code;
                                                              ESP=C¢d. perio. recuento inv. f¡s.];
                                                   Editable=No }
    { 7381;   ;Phys Invt Counting Period Type;Option;
                                                   CaptionML=[ENU=Phys Invt Counting Period Type;
                                                              ESP=Tipo perio. recuento inv. f¡s.];
                                                   OptionCaptionML=[ENU=" ,Item,SKU";
                                                                    ESP=" ,Producto,UA"];
                                                   OptionString=[ ,Item,SKU];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Location Code,Line No.;
                                                   Clustered=Yes }
    {    ;Item No.,Location Code,Entry Type,From Bin Type Code,Variant Code,Unit of Measure Code;
                                                   SumIndexFields="Qty. (Absolute, Base)";
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,From Bin Code,Location Code,Entry Type,Variant Code,Unit of Measure Code,Lot No.,Serial No.;
                                                   SumIndexFields="Qty. (Absolute, Base)",Qty. (Absolute),Cubage,Weight;
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,To Bin Code,Location Code,Variant Code,Unit of Measure Code,Lot No.,Serial No.;
                                                   SumIndexFields="Qty. (Absolute, Base)",Qty. (Absolute);
                                                   MaintainSIFTIndex=No }
    {    ;To Bin Code,Location Code               ;SumIndexFields=Cubage,Weight,Qty. (Absolute);
                                                   MaintainSIFTIndex=No }
    {    ;Location Code,Item No.,Variant Code      }
    {    ;Location Code,Bin Code,Item No.,Variant Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1001 : Record 14;
      Item@1000 : Record 27;
      Bin@1015 : Record 7354;
      WhseJnlTemplate@1004 : Record 7309;
      WhseJnlBatch@1003 : Record 7310;
      WhseJnlLine@1005 : Record 7311;
      ItemUnitOfMeasure@1002 : Record 5404;
      NoSeriesMgt@1006 : Codeunit 396;
      WMSMgt@1007 : Codeunit 7302;
      ItemTrackingMgt@1016 : Codeunit 6500;
      OldItemNo@1055 : Code[20];
      PhysInvtEntered@1008 : Boolean;
      Text000@1009 : TextConst 'ENU=must not be negative;ESP=no debe ser negativo';
      Text001@1014 : TextConst 'ENU=%1 Journal;ESP=Diario %1';
      Text002@1013 : TextConst 'ENU=DEFAULT;ESP=GENERICO';
      Text003@1012 : TextConst 'ENU=Default Journal;ESP=Diario gen‚rico';
      Text004@1010 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.;ESP=Primero debe configurar usuario %1 como empleado almac‚n.';
      Text005@1011 : TextConst 'ENU=The location %1 of warehouse journal batch %2 is not enabled for user %3.;ESP=El almac‚n %1 de la secc. diario almac‚n %2 no est  habilitada para usuario %3.';
      Text006@1017 : TextConst 'ENU=%1 must be 0 or 1 for an Item tracked by Serial Number.;ESP=%1 debe ser 0 o 1 para un producto del que se realiza seguim. por n§ serie.';
      SNRequired@1019 : Boolean;
      LNRequired@1018 : Boolean;
      OpenFromBatch@1020 : Boolean;

    PROCEDURE GetItem@18(ItemNo@1000 : Code[20];VAR ItemDescription@1001 : Text[50]);
    BEGIN
      IF ItemNo <> OldItemNo THEN BEGIN
        ItemDescription := '';
        IF ItemNo <> '' THEN
          IF Item.GET(ItemNo) THEN
            ItemDescription := Item.Description;
        OldItemNo := ItemNo;
      END ELSE
        ItemDescription := Item.Description;
    END;

    PROCEDURE SetUpNewLine@8(LastWhseJnlLine@1000 : Record 7311);
    VAR
      Location@1001 : Record 14;
    BEGIN
      WhseJnlTemplate.GET("Journal Template Name");
      WhseJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      WhseJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      WhseJnlLine.SETRANGE("Location Code","Location Code");
      IF WhseJnlLine.FIND('-') THEN BEGIN
        WhseJnlBatch.GET(
          "Journal Template Name","Journal Batch Name",LastWhseJnlLine."Location Code");
        "Registering Date" := LastWhseJnlLine."Registering Date";
        "Whse. Document No." := LastWhseJnlLine."Whse. Document No.";
        "Entry Type" :=  LastWhseJnlLine."Entry Type";
        "Location Code" := LastWhseJnlLine."Location Code";
      END ELSE BEGIN
        "Registering Date" := WORKDATE;
        WhseJnlBatch.GET("Journal Template Name","Journal Batch Name","Location Code");
        IF WhseJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Whse. Document No." :=
            NoSeriesMgt.TryGetNextNo(WhseJnlBatch."No. Series","Registering Date");
        END;
      END;
      IF WhseJnlTemplate.Type = WhseJnlTemplate.Type::"Physical Inventory" THEN BEGIN
        "Source Document" := "Source Document"::"Phys. Invt. Jnl.";
        "Whse. Document Type" := "Whse. Document Type"::"Whse. Phys. Inventory";
      END;
      "Source Code" := WhseJnlTemplate."Source Code";
      "Reason Code" := WhseJnlBatch."Reason Code";
      "Registering No. Series" := WhseJnlBatch."Registering No. Series";
      Location.GET("Location Code");
      IF WhseJnlTemplate.Type <> WhseJnlTemplate.Type::Reclassification THEN BEGIN
        IF Quantity >= 0 THEN
          "Entry Type" := "Entry Type"::"Positive Adjmt."
        ELSE
          "Entry Type" := "Entry Type"::"Negative Adjmt.";
        GetBin(Location.Code,Location."Adjustment Bin Code");
        "From Zone Code" := Bin."Zone Code";
        "From Bin Code" := Bin.Code;
        "From Bin Type Code" := Bin."Bin Type Code";
      END ELSE
        "Entry Type" := "Entry Type"::Movement;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE CalcQty@3(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@1();
    BEGIN
      GetItem("Item No.",Description);
      IF (Item."No." <> ItemUnitOfMeasure."Item No.") OR
         ("Unit of Measure Code" <> ItemUnitOfMeasure.Code)
      THEN
        IF NOT ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") THEN
          ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        ("Item No." = '') AND (Quantity = 0));
    END;

    LOCAL PROCEDURE ExchangeFromToBin@16();
    VAR
      WhseJnlLine@1001 : Record 7311;
    BEGIN
      GetLocation("Location Code");
      WhseJnlLine := Rec;
      "From Zone Code" := WhseJnlLine."To Zone Code";
      "From Bin Code" := WhseJnlLine."To Bin Code";
      "From Bin Type Code" :=
        GetBinType("Location Code","From Bin Code");
      IF ("Location Code" = Location.Code) AND
         ("From Bin Code" = Location."Adjustment Bin Code")
      THEN
        WMSMgt.CheckAdjmtBin(Location,"Qty. (Absolute)",Quantity > 0);

      "To Zone Code" := WhseJnlLine."From Zone Code";
      "To Bin Code" := WhseJnlLine."From Bin Code";
      IF ("Location Code" = Location.Code) AND
         ("To Bin Code" = Location."Adjustment Bin Code")
      THEN
        WMSMgt.CheckAdjmtBin(Location,"Qty. (Absolute)",Quantity > 0);

      IF WhseJnlTemplate.Type <> WhseJnlTemplate.Type::Reclassification THEN BEGIN
        IF Quantity >= 0 THEN
          "Entry Type" := "Entry Type"::"Positive Adjmt."
        ELSE
          "Entry Type" := "Entry Type"::"Negative Adjmt.";
      END;
    END;

    LOCAL PROCEDURE GetLocation@2(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
      Location.TESTFIELD(Location."Directed Put-away and Pick");
    END;

    LOCAL PROCEDURE GetBin@19(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      IF (LocationCode = '') OR (BinCode = '') THEN
        Bin.INIT
      ELSE
        IF (Bin."Location Code" <> LocationCode) OR
           (Bin.Code <> BinCode)
        THEN
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE CheckBin@4(LocationCode@1000 : Code[10];BinCode@1001 : Code[20];Inbound@1002 : Boolean);
    VAR
      BinContent@1003 : Record 7302;
      WhseJnlLine@1007 : Record 7311;
    BEGIN
      IF (BinCode <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation(LocationCode);
        IF BinCode = Location."Adjustment Bin Code" THEN
          EXIT;
        IF Inbound THEN BEGIN
          GetBinType(LocationCode,BinCode);
          IF Location."Bin Capacity Policy" IN
             [Location."Bin Capacity Policy"::"Allow More Than Max. Capacity",
             Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap."]
          THEN BEGIN
            WhseJnlLine.SETCURRENTKEY("To Bin Code","Location Code");
            WhseJnlLine.SETRANGE("To Bin Code",BinCode);
            WhseJnlLine.SETRANGE("Location Code",LocationCode);
            WhseJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
            WhseJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
            WhseJnlLine.SETRANGE("Line No.","Line No.");
            WhseJnlLine.CALCSUMS("Qty. (Absolute)",Cubage,Weight);
          END;
          IF BinContent.GET(
            "Location Code",BinCode,"Item No.","Variant Code","Unit of Measure Code")
          THEN
            BinContent.CheckIncreaseBinContent(
              "Qty. (Absolute, Base)",WhseJnlLine."Qty. (Absolute, Base)",
              WhseJnlLine.Cubage,WhseJnlLine.Weight,Cubage,Weight,FALSE)
          ELSE BEGIN
            GetBin(LocationCode,BinCode);
            Bin.CheckIncreaseBin(
              BinCode,"Item No.","Qty. (Absolute)",
              WhseJnlLine.Cubage,WhseJnlLine.Weight,Cubage,Weight,FALSE);
          END;
        END ELSE BEGIN
          BinContent.GET(
            "Location Code",BinCode,"Item No.","Variant Code","Unit of Measure Code");
          IF BinContent."Block Movement" IN [
             BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All]
          THEN
            BinContent.FIELDERROR("Block Movement");
        END;
      END;
    END;

    LOCAL PROCEDURE GetBinType@20(LocationCode@1002 : Code[10];BinCode@1001 : Code[20]) : Code[10];
    VAR
      BinType@1000 : Record 7303;
    BEGIN
      GetBin(LocationCode,BinCode);
      WhseJnlTemplate.GET("Journal Template Name");
      IF WhseJnlTemplate.Type = WhseJnlTemplate.Type::Reclassification THEN
        IF Bin."Bin Type Code" <> '' THEN
          IF BinType.GET(Bin."Bin Type Code") THEN
            BinType.TESTFIELD(Receive,FALSE);

      EXIT(Bin."Bin Type Code");
    END;

    PROCEDURE TemplateSelection@13(FormID@1004 : Integer;FormTemplate@1000 : 'Adjustment,Phys. Inventory,Reclassification';VAR WhseJnlLine@1003 : Record 7311;VAR JnlSelected@1001 : Boolean);
    VAR
      WhseJnlTemplate@1002 : Record 7309;
    BEGIN
      JnlSelected := TRUE;

      WhseJnlTemplate.RESET;
      IF NOT OpenFromBatch THEN
        WhseJnlTemplate.SETRANGE("Form ID",FormID);
      WhseJnlTemplate.SETRANGE(Type,FormTemplate);

      CASE WhseJnlTemplate.COUNT OF
        0:
          BEGIN
            WhseJnlTemplate.INIT;
            WhseJnlTemplate.VALIDATE(Type,FormTemplate);
            WhseJnlTemplate.VALIDATE("Form ID");
            WhseJnlTemplate.Name := FORMAT(WhseJnlTemplate.Type,MAXSTRLEN(WhseJnlTemplate.Name));
            WhseJnlTemplate.Description := STRSUBSTNO(Text001,WhseJnlTemplate.Type);
            WhseJnlTemplate.INSERT;
            COMMIT;
          END;
        1:
          WhseJnlTemplate.FIND('-');
        ELSE
          JnlSelected := FORM.RUNMODAL(0,WhseJnlTemplate) = ACTION::LookupOK;
      END;
      IF JnlSelected THEN BEGIN
        WhseJnlLine.FILTERGROUP := 2;
        WhseJnlLine.SETRANGE("Journal Template Name",WhseJnlTemplate.Name);
        WhseJnlLine.FILTERGROUP := 0;
        IF OpenFromBatch THEN BEGIN
          WhseJnlLine."Journal Template Name" := '';
          FORM.RUN(WhseJnlTemplate."Form ID",WhseJnlLine);
        END;
      END;
    END;

    PROCEDURE TemplateSelectionFromBatch@21(VAR WhseJnlBatch@1000 : Record 7310);
    VAR
      WhseJnlLine@1002 : Record 7311;
      JnlSelected@1001 : Boolean;
    BEGIN
      OpenFromBatch := TRUE;
      WhseJnlBatch.CALCFIELDS("Template Type");
      WhseJnlLine."Journal Batch Name" := WhseJnlBatch.Name;
      TemplateSelection(0,WhseJnlBatch."Template Type",WhseJnlLine,JnlSelected);
    END;

    PROCEDURE OpenJnl@12(VAR CurrentJnlBatchName@1000 : Code[10];VAR CurrentLocationCode@1002 : Code[10];VAR WhseJnlLine@1001 : Record 7311);
    BEGIN
      CheckWhseEmployee;
      CheckTemplateName(
        WhseJnlLine.GETRANGEMAX("Journal Template Name"),CurrentLocationCode,CurrentJnlBatchName);
      WhseJnlLine.FILTERGROUP := 2;
      WhseJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      IF CurrentLocationCode <> '' THEN
        WhseJnlLine.SETRANGE("Location Code",CurrentLocationCode);
      WhseJnlLine.FILTERGROUP := 0;
    END;

    PROCEDURE CheckTemplateName@11(CurrentJnlTemplateName@1000 : Code[10];VAR CurrentLocationCode@1005 : Code[10];VAR CurrentJnlBatchName@1001 : Code[10]);
    VAR
      WhseJnlBatch@1002 : Record 7310;
      WhseEmployee@1004 : Record 7301;
      WmsMgt@1003 : Codeunit 7302;
    BEGIN
      WhseJnlBatch.SETRANGE("Journal Template Name",CurrentJnlTemplateName);
      IF NOT WhseJnlBatch.GET(CurrentJnlTemplateName,CurrentJnlBatchName,CurrentLocationCode) OR
         NOT WhseEmployee.GET(USERID,CurrentLocationCode)
      THEN BEGIN
        IF USERID <> '' THEN BEGIN
          CurrentLocationCode := WmsMgt.GetDefaultLocation;
          WhseJnlBatch.SETRANGE("Location Code",CurrentLocationCode);
        END;
        IF NOT WhseJnlBatch.FIND('-') THEN BEGIN
          WhseJnlBatch.INIT;
          WhseJnlBatch."Journal Template Name" := CurrentJnlTemplateName;
          WhseJnlBatch.SetupNewBatch;
          WhseJnlBatch.Name := Text002;
          WhseJnlBatch.Description := Text003;
          WhseJnlBatch.INSERT(TRUE);
          CurrentLocationCode := WhseJnlBatch."Location Code";
          COMMIT;
        END;
        CurrentJnlBatchName := WhseJnlBatch.Name;
        CurrentLocationCode := WhseJnlBatch."Location Code";
      END;
    END;

    PROCEDURE CheckName@10(CurrentJnlBatchName@1000 : Code[10];CurrentLocationCode@1003 : Code[10];VAR WhseJnlLine@1001 : Record 7311);
    VAR
      WhseJnlBatch@1002 : Record 7310;
      WhseEmployee@1004 : Record 7301;
    BEGIN
      WhseJnlBatch.GET(
        WhseJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName,CurrentLocationCode);
      IF (USERID <> '') AND NOT WhseEmployee.GET(USERID,CurrentLocationCode) THEN
        ERROR(Text005,CurrentLocationCode,CurrentJnlBatchName,USERID);
    END;

    LOCAL PROCEDURE CheckWhseEmployee@15();
    VAR
      WhseEmployee@1000 : Record 7301;
    BEGIN
      IF USERID <> '' THEN BEGIN
        WhseEmployee.SETRANGE("User ID",USERID);
        IF NOT WhseEmployee.FIND('-') THEN
          ERROR(Text004,USERID);
      END;
    END;

    PROCEDURE SetName@9(CurrentJnlBatchName@1000 : Code[10];CurrentLocationCode@1002 : Code[10];VAR WhseJnlLine@1001 : Record 7311);
    BEGIN
      WhseJnlLine.FILTERGROUP := 2;
      WhseJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      WhseJnlLine.SETRANGE("Location Code",CurrentLocationCode);
      WhseJnlLine.FILTERGROUP := 0;
      IF WhseJnlLine.FIND('-') THEN;
    END;

    PROCEDURE LookupName@7(VAR CurrentJnlBatchName@1000 : Code[10];VAR CurrentLocationCode@1003 : Code[10];VAR WhseJnlLine@1001 : Record 7311) : Boolean;
    VAR
      WhseJnlBatch@1002 : Record 7310;
    BEGIN
      COMMIT;
      WhseJnlBatch."Journal Template Name" := WhseJnlLine.GETRANGEMAX("Journal Template Name");
      WhseJnlBatch.Name := WhseJnlLine.GETRANGEMAX("Journal Batch Name");
      WhseJnlBatch.SETRANGE("Journal Template Name",WhseJnlBatch."Journal Template Name");
      IF FORM.RUNMODAL(FORM::"Whse. Journal Batches List",WhseJnlBatch) = ACTION::LookupOK THEN BEGIN
        CurrentJnlBatchName := WhseJnlBatch.Name;
        CurrentLocationCode := WhseJnlBatch."Location Code";
        SetName(CurrentJnlBatchName,CurrentLocationCode,WhseJnlLine);
      END;
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      TempWhseWkshLine@1000 : TEMPORARY Record 7326;
      WhseItemTrackingForm@1001 : Form 6550;
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      TempWhseWkshLine.INIT;
      TempWhseWkshLine."Worksheet Template Name" := "Journal Template Name";
      TempWhseWkshLine.Name := "Journal Batch Name";
      TempWhseWkshLine."Location Code" := "Location Code";
      TempWhseWkshLine."Line No." := "Line No.";
      TempWhseWkshLine."Item No." :="Item No.";
      TempWhseWkshLine."Variant Code" := "Variant Code";
      TempWhseWkshLine."Qty. (Base)" := "Qty. (Base)";
      TempWhseWkshLine."Qty. to Handle (Base)" := "Qty. (Base)";
      WhseItemTrackingForm.SetSource(TempWhseWkshLine,DATABASE::"Warehouse Journal Line");
      WhseItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE ItemTrackingExist@17(TemplateName@1000 : Code[10];BatchName@1001 : Code[10];LocationCode@1004 : Code[10];LineNo@1002 : Integer;VAR WhseItemTrkgLine@1005 : Record 6550) : Boolean;
    BEGIN
      WITH WhseItemTrkgLine DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.","Location Code");
        SETRANGE("Source Type",DATABASE::"Warehouse Journal Line");
        SETRANGE("Source Subtype",0);
        SETRANGE("Source Batch Name",TemplateName);
        SETRANGE("Source ID",BatchName);
        SETRANGE("Location Code",LocationCode);
        IF LineNo <> 0 THEN
          SETRANGE("Source Ref. No.",LineNo);
        SETRANGE("Source Prod. Order Line",0);

        EXIT(NOT ISEMPTY);
      END;
    END;

    PROCEDURE ItemTrackingReclass@22(TemplateName@1000 : Code[10];BatchName@1001 : Code[10];LocationCode@1004 : Code[10];LineNo@1002 : Integer) : Boolean;
    VAR
      WhseItemTrkgLine@1003 : Record 6550;
    BEGIN
      IF NOT IsReclass(TemplateName) THEN
        EXIT(FALSE);

      WITH WhseItemTrkgLine DO BEGIN
        IF ItemTrackingExist(TemplateName,BatchName,LocationCode,LineNo,WhseItemTrkgLine) THEN BEGIN
          FINDSET;
          REPEAT
            IF ("Lot No." <> "New Lot No.") OR
               ("Serial No." <> "New Serial No.") OR
               ("Expiration Date" <> "New Expiration Date")
            THEN
              EXIT(TRUE);
          UNTIL NEXT = 0;
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE IsReclass@6(CurrentJnlTemplateName@1000 : Code[10]) : Boolean;
    VAR
      WhseJnlTemplate@1001 : Record 7309;
    BEGIN
      IF WhseJnlTemplate.GET(CurrentJnlTemplateName) THEN
        EXIT(WhseJnlTemplate.Type = WhseJnlTemplate.Type::Reclassification);

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}
