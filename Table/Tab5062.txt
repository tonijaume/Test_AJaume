OBJECT Table 5062 Attachment
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Attachment2@1000 : Record 5062;
               "NextAttachmentNo."@1001 : Integer;
             BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;

               Attachment2.LOCKTABLE;
               IF Attachment2.FIND('+') THEN
                 "NextAttachmentNo." := Attachment2."No." + 1
               ELSE
                 "NextAttachmentNo." := 1;

               "No." := "NextAttachmentNo.";

               RMSetup.GET;
               "Storage Type" := RMSetup."Attachment Storage Type";
               IF "Storage Type" = "Storage Type"::"Disk File" THEN BEGIN
                 RMSetup.TESTFIELD("Attachment Storage Location");
                 "Storage Pointer" := RMSetup."Attachment Storage Location";
               END;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
             END;

    CaptionML=[ENU=Attachment;
               ESP=Anexo];
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Integer       ;CaptionML=[ENU=No.;
                                                              ESP=N§];
                                                   NotBlank=Yes }
    { 2   ;   ;Attachment          ;BLOB          ;CaptionML=[ENU=Attachment;
                                                              ESP=Anexo] }
    { 3   ;   ;Storage Type        ;Option        ;CaptionML=[ENU=Storage Type;
                                                              ESP=Tipo almacenamiento];
                                                   OptionCaptionML=[ENU=Embedded,Disk File,Exchange Storage;
                                                                    ESP=Incorporado,Archivo disco,Almacenamiento Exchange];
                                                   OptionString=Embedded,Disk File,Exchange Storage }
    { 4   ;   ;Storage Pointer     ;Text250       ;CaptionML=[ENU=Storage Pointer;
                                                              ESP=Ruta archivo] }
    { 5   ;   ;File Extension      ;Text250       ;CaptionML=[ENU=File Extension;
                                                              ESP=Extensi¢n archivo] }
    { 6   ;   ;Read Only           ;Boolean       ;CaptionML=[ENU=Read Only;
                                                              ESP=S¢lo lectura] }
    { 7   ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ESP=Fecha £lt. modificaci¢n] }
    { 8   ;   ;Last Time Modified  ;Time          ;CaptionML=[ENU=Last Time Modified;
                                                              ESP=élt. hora modificaci¢n] }
    { 9   ;   ;Store Pointer ID    ;BLOB          ;OnValidate=VAR
                                                                StoreIDInStream@1000 : InStream;
                                                              BEGIN
                                                                "Store Pointer ID".CREATEINSTREAM(StoreIDInStream);
                                                                "Store Pointer Checksum" := EMailLogging.Checksum(StoreIDInStream);
                                                              END;

                                                   CaptionML=[ENU=Store Pointer ID;
                                                              ESP=ID puntero almacenamiento] }
    { 10  ;   ;Store Pointer Checksum;Integer     ;CaptionML=[ENU=Store Pointer Checksum;
                                                              ESP=Suma comprob. puntero almac.] }
    { 11  ;   ;Entry Pointer ID    ;BLOB          ;OnValidate=VAR
                                                                EntryIDInStream@1000 : InStream;
                                                              BEGIN
                                                                "Entry Pointer ID".CREATEINSTREAM(EntryIDInStream);
                                                                "Entry Pointer Checksum" := EMailLogging.Checksum(EntryIDInStream);
                                                              END;

                                                   CaptionML=[ENU=Entry Pointer ID;
                                                              ESP=ID puntero entrada] }
    { 12  ;   ;Entry Pointer Checksum;Integer     ;CaptionML=[ENU=Entry Pointer Checksum;
                                                              ESP=Suma comprob. puntero entrada] }
    { 13  ;   ;Merge Source        ;BLOB          ;CaptionML=[ENU=Merge Source;
                                                              ESP=Origen fusi¢n] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Entry Pointer Checksum,Store Pointer Checksum }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1002 : TextConst 'ENU=The attachment is empty.;ESP=El anexo est  vac¡o.';
      Text003@1003 : TextConst 'ENU=Attachment is already in use on this machine.;ESP=El anexo ya est  utiliz ndose en esta m quina.';
      Text004@1004 : TextConst 'ENU=When you have saved your document, click Yes to import the document.;ESP=Cuando haya guardado su documento, pulse S¡ para importarlo.';
      Text005@1005 : TextConst 'ENU=Export Attachment;ESP=Exportar anexo';
      Text006@1006 : TextConst 'ENU=Import Attachment;ESP=Importar anexo';
      Text007@1007 : TextConst 'ENU=All Files (*.*)|*.*;ESP=Todos los archivos (*.*)|*.*';
      Text008@1008 : TextConst 'ENU=Error during copying file.;ESP=Error al copiar el archivo.';
      Text009@1009 : TextConst 'ENU=Do you want to remove %1?;ESP=¨Confirma que desea eliminar %1?';
      Text010@1010 : TextConst 'ENU=External file could not be removed.;ESP=Un archivo externo no se puede eliminar.';
      Text012@1012 : TextConst 'ENU=\Doc;ESP=\Doc';
      Text013@1013 : TextConst 'ENU=You can only print Microsoft Word documents.;ESP=S¢lo puede imprimir documentos de Microsoft Word.';
      Text014@1014 : TextConst 'ENU=You can only fax Microsoft Word documents.;ESP=S¢lo puede enviar por fax documentos de Microsoft Word.';
      RMSetup@1015 : Record 5079;
      EMailLogging@1000 : Codeunit 5064;
      Text015@1001 : TextConst 'ENU=The e-mail has been deleted.;ESP=Se ha eliminado el correo electr¢nico.';
      Text016@1011 : TextConst 'ENU=When you have finished working with a document, you should delete the associated temporary file. Please note that this will not delete the document.\\Do you want to delete the temporary file?;ESP=Cuando haya terminado de trabajar con un documento, debe borrar el archivo temporal asociado. Por favor, tenga en cuenta que esto no eliminar  el documento.\\¨Desea borrar el archivo temporal?';
      Text017@1016 : TextConst 'ENU=msg;ESP=msg';
      Text018@1017 : TextConst 'ENU=*.msg|*.msg;ESP=*.msg|*.msg';
      Text019@1018 : TextConst 'ENU=Open;ESP=Abierto';

    PROCEDURE OpenAttachment@1(Caption@1000 : Text[260];IsTemporary@1001 : Boolean);
    VAR
      WordManagement@1002 : Codeunit 5054;
      AttachmentManagement@1003 : Codeunit 5052;
      FileName@1004 : Text[260];
    BEGIN
      IF "Storage Type" = "Storage Type"::Embedded THEN BEGIN
        CALCFIELDS(Attachment);
        IF NOT Attachment.HASVALUE THEN
          ERROR(Text002);
      END;

      FileName := ConstFilename;
      IF NOT DeleteFile(FileName) THEN
        ERROR(Text003);
      ExportAttachment(FileName);
      IF AttachmentManagement.UseComServer("File Extension",FALSE) THEN BEGIN
        WordManagement.OpenWordAttachment(Rec,FileName,Caption,IsTemporary);
      END ELSE BEGIN
        HYPERLINK(FileName);
        IF NOT "Read Only" THEN BEGIN
          IF CONFIRM(Text004,TRUE) THEN
            ImportAttachment(FileName,IsTemporary,FALSE);
          DeleteFile(FileName);
        END ELSE
          IF CONFIRM(Text016,TRUE) THEN
            DeleteFile(FileName);
      END;
    END;

    PROCEDURE ShowAttachment@6(VAR SegLine@1000 : Record 5077;WordCaption@1001 : Text[260];IsTemporary@1002 : Boolean);
    VAR
      WordManagement@1003 : Codeunit 5054;
      AttachmentManagement@1004 : Codeunit 5052;
      FileName@1005 : Text[260];
    BEGIN
      IF AttachmentManagement.UseComServer("File Extension",FALSE) THEN
        WordManagement.ShowMergedDocument(SegLine,Rec,WordCaption,IsTemporary)
      ELSE BEGIN
        FileName := ConstFilename;
        IF "Storage Type" = "Storage Type"::Embedded THEN
          CALCFIELDS(Attachment);
        ExportAttachment(FileName);
        HYPERLINK(FileName);
        IF NOT "Read Only" THEN BEGIN
          IF CONFIRM(Text004,TRUE) THEN
            ImportAttachment(FileName,IsTemporary,FALSE);
          DeleteFile(FileName);
        END ELSE
          IF CONFIRM(Text016,TRUE) THEN
            DeleteFile(FileName);
      END;
    END;

    PROCEDURE ExportAttachment@2(VAR ExportToFile@1000 : Text[1024]) : Boolean;
    VAR
      BLOBRef@1006 : Record 99008535;
      RBAutoMgt@1005 : Codeunit 419;
      CommonDialogMgt@1001 : Codeunit 412;
      FileName@1002 : Text[1024];
      FileFilter@1003 : Text[260];
      ClientFileName@1004 : Text[1024];
    BEGIN
      RMSetup.GET;
      ClientFileName := '';
      CASE "Storage Type" OF
        "Storage Type"::Embedded:
          BEGIN
            IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
              RMSetup.TESTFIELD("Attachment Storage Location");
            CALCFIELDS(Attachment);
            IF Attachment.HASVALUE THEN BEGIN
              BLOBRef.Blob := Attachment;
              IF ExportToFile = '' THEN BEGIN
                IF NOT ISSERVICETIER THEN BEGIN
                  FileFilter := UPPERCASE("File Extension") + ' ';
                  FileFilter := FileFilter + '(*.' + "File Extension" + ')|*.' + "File Extension";
                  FileName := CommonDialogMgt.OpenFile(Text005,ClientFileName,4,FileFilter,1);
                  ExportToFile := RBAutoMgt.BLOBExport(BLOBRef,FileName,FALSE);
                END ELSE BEGIN
                  FileName := 'Default.' + "File Extension";
                  ExportToFile := RBAutoMgt.BLOBExport(BLOBRef,FileName,TRUE);
                END;
              END ELSE BEGIN
                // If a filename is provided, the file will be treated as temp file.
                ExportToFile := RBAutoMgt.BLOBExport(BLOBRef,ExportToFile,FALSE);
              END;
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE)
          END;

        "Storage Type":: "Disk File":
          BEGIN
            IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
              RMSetup.TESTFIELD("Attachment Storage Location");

            FileFilter := UPPERCASE("File Extension") + ' (*.' + "File Extension" + ')|*.' + "File Extension";
            IF ISSERVICETIER THEN
              EXIT(DOWNLOAD(ConstDiskFileName,Text005,'',FileFilter,ExportToFile))
            ELSE BEGIN
              IF ExportToFile = '' THEN BEGIN
                FileName := CommonDialogMgt.OpenFile(Text005,ClientFileName,4,FileFilter,1);
              END ELSE
                FileName := ExportToFile;

              IF FileName <> '' THEN BEGIN
                IF FILE.COPY(ConstDiskFileName,FileName) THEN
                  EXIT(TRUE)
                ELSE
                  EXIT(FALSE);
              END ELSE
                EXIT(FALSE)
            END;
          END;
       END;
    END;

    PROCEDURE ImportAttachment@5(ImportFromFile@1000 : Text[260];IsTemporary@1001 : Boolean;IsInherited@1002 : Boolean) : Boolean;
    VAR
      CommonDialogMgt@1003 : Codeunit 412;
      AttachmentManagement@1004 : Codeunit 5052;
      FileName@1005 : Text[260];
      ClientFileName@1009 : Text[260];
      NewAttachmentNo@1006 : Integer;
      BLOBRef@1007 : Record 99008535;
      RBAutoMgt@1008 : Codeunit 419;
      ServerFileName@1010 : Text[260];
    BEGIN
      IF IsTemporary THEN BEGIN
        FileName := RBAutoMgt.BLOBImport(BLOBRef,ImportFromFile,ImportFromFile = '' );
        IF FileName <> '' THEN BEGIN
          Attachment := BLOBRef.Blob;
          "File Extension" := UPPERCASE(AttachmentManagement.FileExtension(FileName));
          EXIT(TRUE)
        END ELSE
          EXIT(FALSE);
      END;

      TESTFIELD("Read Only",FALSE);
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");
      IF "Storage Pointer" = '' THEN
        "Storage Pointer" := RMSetup."Attachment Storage Location";

      IF IsInherited THEN BEGIN
        NewAttachmentNo := AttachmentManagement.InsertAttachment("No.");
        GET(NewAttachmentNo);
      END ELSE
        IF "No." = 0 THEN
          NewAttachmentNo := AttachmentManagement.InsertAttachment(0)
        ELSE
          NewAttachmentNo := "No.";
      GET(NewAttachmentNo);
      ClientFileName := '';

      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN BEGIN
        ServerFileName := ConstDiskFileName;
        IF ISSERVICETIER THEN BEGIN
          FileName := ImportFromFile;
          IF NOT UPLOAD(Text006,'',Text007,FileName,ServerFileName) THEN
            ERROR(Text008);
          IF FileName = '' THEN
            EXIT(FALSE);
        END ELSE BEGIN
          IF ImportFromFile = '' THEN
            FileName := CommonDialogMgt.OpenFile(Text006,ClientFileName,4,Text007,0)
          ELSE
            FileName := ImportFromFile;
          IF FileName = '' THEN
            EXIT(FALSE);
          IF NOT FILE.COPY(FileName,ServerFileName) THEN
            ERROR(Text008);
        END;
        "File Extension" := UPPERCASE(AttachmentManagement.FileExtension(FileName));
        "Storage Pointer" := RMSetup."Attachment Storage Location";
        "Storage Type" := "Storage Type"::"Disk File";
        IF MODIFY(TRUE) THEN;
      END ELSE BEGIN
        IF ISSERVICETIER THEN BEGIN
          FileName := ImportFromFile;
          FileName := COPYSTR(RBAutoMgt.BLOBImport(BLOBRef,FileName,FALSE),1,MAXSTRLEN(FileName));
          IF FileName = '' THEN
            EXIT(FALSE);
        END ELSE BEGIN
          IF ImportFromFile = '' THEN
            FileName := CommonDialogMgt.OpenFile(Text006,ClientFileName,4,Text007,0)
          ELSE
            FileName := ImportFromFile;
          IF FileName = '' THEN
            EXIT(FALSE);
          FileName := COPYSTR(RBAutoMgt.BLOBImport(BLOBRef,FileName,FALSE),1,MAXSTRLEN(FileName));
        END;
        Attachment := BLOBRef.Blob;
        "File Extension" := UPPERCASE(AttachmentManagement.FileExtension(FileName));
        "Storage Type" := "Storage Type"::Embedded;
        IF MODIFY(TRUE) THEN;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RemoveAttachment@7(Prompt@1001 : Boolean) DeleteOK@1000 : Boolean;
    VAR
      DeleteYesNo@1002 : Boolean;
    BEGIN
      DeleteOK := FALSE;
      DeleteYesNo := TRUE;
      IF Prompt THEN
        IF NOT CONFIRM(
          Text009,FALSE,TABLECAPTION)
        THEN
          DeleteYesNo := FALSE;

      IF DeleteYesNo THEN BEGIN
        IF "Storage Type" = "Storage Type"::"Disk File" THEN BEGIN
          IF NOT DeleteFile(ConstDiskFileName) THEN
            MESSAGE(Text010);
        END;
        Rec.DELETE(TRUE);
        DeleteOK := TRUE;
      END;
    END;

    PROCEDURE WizEmbeddAttachment@4(FromAttachment@1000 : Record 5062);
    VAR
      BLOBRef@1002 : Record 99008535;
      CommonDialogMgt@1001 : Codeunit 412;
      RBAutoMgt@1003 : Codeunit 419;
    BEGIN
      Rec := FromAttachment;
      "No." := 0;
      "Storage Type" := "Storage Type"::Embedded;
      FromAttachment.TESTFIELD("No.");
      CASE FromAttachment."Storage Type" OF
        FromAttachment."Storage Type"::"Disk File":
          BEGIN
            RBAutoMgt.BLOBImport(BLOBRef,FromAttachment.ConstDiskFileName,FALSE);
            Attachment := BLOBRef.Blob;
          END;
        FromAttachment."Storage Type"::Embedded:
          BEGIN
            FromAttachment.CALCFIELDS(Attachment);
            IF FromAttachment.Attachment.HASVALUE THEN
              Attachment := FromAttachment.Attachment;
          END;
      END;
    END;

    PROCEDURE WizSaveAttachment@8();
    VAR
      Attachment2@1000 : Record 5062;
      FileName@1001 : Text[260];
    BEGIN
      WITH RMSetup DO BEGIN
        GET;
        IF "Attachment Storage Type" = "Attachment Storage Type"::Embedded THEN BEGIN
          "Storage Pointer" := '';
          EXIT;
        END;
      END;

      "Storage Pointer" := RMSetup."Attachment Storage Location";
      IF "No." <> 0 THEN BEGIN
        FileName := ConstDiskFileName;
        IF FileName <> ''  THEN
          Attachment.EXPORT(FileName);
      END;

      WITH Attachment2 DO BEGIN
        "No." := Rec."No.";
        "Storage Type" := "Storage Type"::"Disk File";
        "Storage Pointer" := RMSetup."Attachment Storage Location";
        "File Extension" := Rec."File Extension";
        "Read Only" := Rec."Read Only";
        "Last Date Modified" := Rec."Last Date Modified";
        "Last Time Modified" := Rec."Last Time Modified";
      END;
      CLEAR(Rec);
      Rec := Attachment2;
    END;

    PROCEDURE DeleteFile@10(FileName@1001 : Text[260]) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      IF FileName = '' THEN
        EXIT(FALSE);

      IF ISSERVICETIER THEN
        EXIT(TRUE);

      IF NOT EXISTS(FileName) THEN
        EXIT(TRUE);

      REPEAT
        SLEEP(250);
        I := I + 1;
      UNTIL ERASE(FileName) OR (I = 25);
      EXIT(NOT EXISTS(FileName));
    END;

    PROCEDURE ConstFilename@9() FileName@1000 : Text[260];
    VAR
      RBAutoMgt@1010 : Codeunit 419;
      I@1001 : Integer;
      DocNo@1002 : Text[30];
      p@1003 : Integer;
    BEGIN
      FileName := RBAutoMgt.ClientTempFileName(Text012+'.',"File Extension");
    END;

    PROCEDURE ConstDiskFileName@3() DiskFileName@1000 : Text[260];
    BEGIN
      DiskFileName := "Storage Pointer" + '\' + FORMAT("No.") + '.';
    END;

    PROCEDURE CheckCorrespondenceType@11(CorrespondenceType@1001 : ' ,Hard Copy,E-Mail,Fax') ErrorText@1000 : Text[80];
    BEGIN
      CASE CorrespondenceType OF
        CorrespondenceType::"Hard Copy":
          IF (UPPERCASE("File Extension") <> 'DOC') AND (UPPERCASE("File Extension") <> 'DOCX') THEN
            EXIT(Text013);
        CorrespondenceType::Fax:
          IF (UPPERCASE("File Extension") <> 'DOC') AND (UPPERCASE("File Extension") <> 'DOCX') THEN
            EXIT(Text014);
      END;
    END;

    PROCEDURE LinkToMessage@12(VAR CDOMessage@1006 : Automation "{3FA7DEA7-6438-101B-ACC1-00AA00423326} 1.33:{3FA7DEAA-6438-101B-ACC1-00AA00423326}:Unknown Automation Server.Unknown Class";RunTrigger@1001 : Boolean);
    VAR
      CDOHandler@1000 : Automation "{3C2554FE-2B41-4543-B3E8-E64296773DA5} 2.0:{3A6EBE76-2645-4AE0-8926-B1200E42E49D}:Unknown Automation Server.Unknown Class";
      Index@1003 : Integer;
      StoreID@1004 : OutStream;
      EntryID@1002 : OutStream;
    BEGIN
      IF ISCLEAR(CDOHandler) THEN
        CREATE(CDOHandler);

      "Storage Type" := "Storage Type"::"Exchange Storage";
      "Read Only" := TRUE;

      CDOHandler.FindMessageIDs(CDOMessage);

      "Store Pointer ID".CREATEOUTSTREAM(StoreID);
      FOR Index := 1 TO CDOHandler.StoreIDNoOfParts DO
        StoreID.WRITETEXT(CDOHandler.StoreIDPart(Index));

      "Entry Pointer ID".CREATEOUTSTREAM(EntryID);
      FOR Index := 1 TO CDOHandler.EntryIDNoOfParts DO
        EntryID.WRITETEXT(CDOHandler.EntryIDPart(Index));

      MODIFY;
      VALIDATE("Store Pointer ID");
      VALIDATE("Entry Pointer ID");

      MODIFY(RunTrigger);
    END;

    PROCEDURE DisplayInOutlook@13();
    VAR
      OutlookHandler@1005 : Automation "{3C2554FE-2B41-4543-B3E8-E64296773DA5} 2.0:{2766747D-01E4-40A1-89B3-062173C5F24D}:Unknown Automation Server.Unknown Class";
      RBAutoMgt@1002 : Codeunit 419;
      StoreID@1003 : InStream;
      EntryID@1001 : InStream;
      StoreIDPart@1000 : Text[250];
      EntryIDPart@1004 : Text[250];
    BEGIN
      TESTFIELD("Storage Type","Storage Type"::"Exchange Storage");

      IF ISCLEAR(OutlookHandler) THEN
        CREATE(OutlookHandler,TRUE,TRUE);
      OutlookHandler.ClearIDs;

      CALCFIELDS("Store Pointer ID","Entry Pointer ID");

      "Store Pointer ID".CREATEINSTREAM(StoreID);
      WHILE NOT StoreID.EOS DO BEGIN
        StoreID.READTEXT(StoreIDPart,250);
        OutlookHandler.AddStoreIDPart(StoreIDPart);
      END;

      "Entry Pointer ID".CREATEINSTREAM(EntryID);
      WHILE NOT EntryID.EOS DO BEGIN
        EntryID.READTEXT(EntryIDPart,250);
        OutlookHandler.AddEntryIDPart(EntryIDPart);
      END;

      IF NOT OutlookHandler.DisplayMail THEN
        ERROR(Text015);
    END;

    BEGIN
    END.
  }
}
