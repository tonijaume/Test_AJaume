OBJECT Table 8705 Mobile Document Queue
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Mobile Document Queue;
               ESP=Cola de documento m¢vil];
  }
  FIELDS
  {
    { 1   ;   ;Message ID          ;Code100       ;CaptionML=[ENU=Message ID;
                                                              ESP=ID de mensaje] }
    { 2   ;   ;Device ID           ;Code100       ;CaptionML=[ENU=Device ID;
                                                              ESP=ID de dispositivo] }
    { 3   ;   ;Mobile User ID      ;Text65        ;TableRelation="Mobile User";
                                                   CaptionML=[ENU=Mobile User ID;
                                                              ESP=ID usuario m¢vil] }
    { 4   ;   ;Document Type       ;Text50        ;TableRelation="Mobile Document Type";
                                                   CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento] }
    { 5   ;   ;Process Type        ;Option        ;CaptionML=[ENU=Process Type;
                                                              ESP=Tipo de proceso];
                                                   OptionCaptionML=[ENU=Queue,Direct;
                                                                    ESP=Cola,Directo];
                                                   OptionString=Queue,Direct }
    { 6   ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=New,Processing,Completed,Error;
                                                                    ESP=Nuevo,En proceso,Finalizado,Error];
                                                   OptionString=New,Processing,Completed,Error }
    { 7   ;   ;Created Date/Time   ;DateTime      ;CaptionML=[ENU=Created Date/Time;
                                                              ESP=Fecha / hora creaci¢n];
                                                   Editable=Yes }
    { 8   ;   ;Answer Date/Time    ;DateTime      ;CaptionML=[ENU=Answer Date/Time;
                                                              ESP=Fecha / hora respuesta] }
    { 9   ;   ;Result Date/Time    ;DateTime      ;CaptionML=[ENU=Result Date/Time;
                                                              ESP=Fecha / hora resultado] }
    { 10  ;   ;Request XML         ;BLOB          ;Compressed=No;
                                                   CaptionML=[ENU=Request XML;
                                                              ESP=Solicitud de XML] }
    { 11  ;   ;Answer XML          ;BLOB          ;Compressed=No;
                                                   CaptionML=[ENU=Answer XML;
                                                              ESP=Respuesta de XML] }
    { 12  ;   ;Result XML          ;BLOB          ;Compressed=No;
                                                   CaptionML=[ENU=Result XML;
                                                              ESP=Resultado de XML] }
    { 13  ;   ;NAS User ID         ;Code20        ;TableRelation=User;
                                                   OnLookup=VAR
                                                              LoginMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              LoginMgt.LookupUserID("NAS User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=NAS User ID;
                                                              ESP=ID de usuario NAS] }
    { 14  ;   ;NAS Host Name       ;Text65        ;CaptionML=[ENU=NAS Host Name;
                                                              ESP=Nombre de host NAS] }
    { 15  ;   ;NAS Port            ;Integer       ;CaptionML=[ENU=NAS Port;
                                                              ESP=Puerto NAS] }
  }
  KEYS
  {
    {    ;Message ID                              ;Clustered=Yes }
    {    ;Status,Process Type,Created Date/Time    }
    {    ;Created Date/Time,Status,Document Type,Mobile User ID }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=No XML is available.;ESP=No hay ning£n XML disponible.';
      Text001@1001 : TextConst 'ENU=Only documents with the status New or Error can be processed manually.;ESP=S¢lo se pueden procesar manualmente documentos con el estado Nuevo o Error.';
      Text002@1002 : TextConst 'ENU=Only documents with the status Processing can be reset.;ESP=S¢lo se pueden restablecer documentos con el estado En proceso.';
      Text003@1003 : TextConst 'ENU=Only documents with the status New, Completed or Error can be deleted.;ESP=S¢lo se pueden eliminar documentos con el estado Nuevo, Finalizado o Error.';
      Text004@1006 : TextConst 'ENU=Import request document;ESP=Documento de solicitud de importaci¢n';
      Text005@1005 : TextConst 'ENU=XML Request (*.xml)|*.xml|All files (*.*)|*.*;ESP=Solicitud XML (*.xml)|*.xml|Todos los archivos (*.*)|*.*';
      Text007@1007 : TextConst 'ENU=Do you want to replace the request document for %1 %2?;ESP=¨Desea sustituir el documento solicitado por %1 %2?';
      Text008@1008 : TextConst 'ENU=Only request documents with the status New or Error can be replaced.;ESP=S¢lo se pueden reemplazar documentos con el estado Nuevo o Error.';
      Text009@1102601000 : TextConst 'ENU=Default.xml;ESP=Default.xml';

    PROCEDURE ProcessDocument@1(VAR MobDocQueue@1001 : Record 8705);
    VAR
      MobDocMgt@1000 : Codeunit 8701;
    BEGIN
      WITH MobDocQueue DO
        IF Status IN [Status::Error,Status::New] THEN BEGIN
          MobDocMgt.ProcessDocumentManual(MobDocQueue);
        END ELSE
          ERROR(Text001);
    END;

    PROCEDURE ResetDocument@5(VAR MobDocQueue@1001 : Record 8705);
    VAR
      MobDocMgt@1000 : Codeunit 8701;
    BEGIN
      WITH MobDocQueue DO
        IF Status = Status::Processing THEN BEGIN
          MobDocMgt.ResetDocument(MobDocQueue);
        END ELSE
          ERROR(Text002);
    END;

    PROCEDURE DeleteDocument@2(VAR MobDocQueue@1001 : Record 8705);
    VAR
      MobDocMgt@1000 : Codeunit 8701;
    BEGIN
      WITH MobDocQueue DO
        IF Status IN [Status::New,Status::Error,Status::Completed] THEN BEGIN
          MobDocMgt.DeleteDocument(MobDocQueue);
        END ELSE
          ERROR(Text003);
    END;

    PROCEDURE ShortUserID@10(MobileUserID@1000 : Text[65]) : Code[20];
    BEGIN
      IF STRPOS(MobileUserID,'\') IN [0,STRLEN(MobileUserID)] THEN
        IF STRLEN(MobileUserID) <= 20 THEN
          EXIT(MobileUserID)
        ELSE
          EXIT('')
      ELSE
        EXIT(COPYSTR(MobileUserID,STRPOS(MobileUserID,'\') + 1,20));
    END;

    PROCEDURE ShowXMLRequestDoc@15();
    VAR
      XMLDom@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      FileName@1102601000 : Text[1024];
      ToFile@1102601001 : Text[1024];
    BEGIN
      IF LoadXMLRequestDoc(XMLDom) THEN BEGIN
        FileName := TEMPORARYPATH + 'Request.xml';
        XMLDom.save(FileName);
        IF NOT ISSERVICETIER THEN BEGIN
          HYPERLINK(FileName);
        END ELSE BEGIN
          ToFile := Text009;
          DOWNLOAD(FileName,'','','XML (*.xml)|*.xml',ToFile);
        END;
      END ELSE
        ERROR(Text000);
    END;

    PROCEDURE ShowXMLAnswerDoc@14();
    VAR
      XMLDom@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      FileName@1102601001 : Text[1024];
      ToFile@1102601000 : Text[1024];
    BEGIN
      IF LoadXMLAnswerDoc(XMLDom) THEN BEGIN
        FileName := TEMPORARYPATH + 'Answer.xml';
        XMLDom.save(FileName);
        IF NOT ISSERVICETIER THEN BEGIN
          HYPERLINK(FileName);
        END ELSE BEGIN
          ToFile := Text009;
          DOWNLOAD(FileName,'','','XML (*.xml)|*.xml',ToFile);
        END;
      END ELSE
        ERROR(Text000);
    END;

    PROCEDURE ShowXMLResultDoc@12();
    VAR
      XMLDom@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      FileName@1102601001 : Text[1024];
      ToFile@1102601000 : Text[1024];
    BEGIN
      IF LoadXMLResultDoc(XMLDom) THEN BEGIN
        FileName := TEMPORARYPATH + 'Result.xml';
        XMLDom.save(FileName);
        IF NOT ISSERVICETIER THEN BEGIN
          HYPERLINK(FileName);
        END ELSE BEGIN
          ToFile := Text009;
          DOWNLOAD(FileName,'','','XML (*.xml)|*.xml',ToFile);
        END;
      END ELSE
        ERROR(Text000);
    END;

    PROCEDURE LoadXMLRequestDoc@11(VAR XMLDom@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60") : Boolean;
    VAR
      XMLInStream@1102601000 : InStream;
    BEGIN
      IF NOT ISCLEAR(XMLDom) THEN
        CLEAR(XMLDom);

      CALCFIELDS("Request XML");
      IF "Request XML".HASVALUE THEN BEGIN
        "Request XML".CREATEINSTREAM(XMLInStream);
        CREATE(XMLDom);
        EXIT(XMLDom.load(XMLInStream));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE LoadXMLAnswerDoc@6(VAR XMLDom@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60") : Boolean;
    VAR
      XMLInStream@1102601000 : InStream;
    BEGIN
      IF NOT ISCLEAR(XMLDom) THEN
        CLEAR(XMLDom);

      CALCFIELDS("Answer XML");
      IF "Answer XML".HASVALUE THEN BEGIN
        "Answer XML".CREATEINSTREAM(XMLInStream);
        CREATE(XMLDom);
        EXIT(XMLDom.load(XMLInStream));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE LoadXMLResultDoc@9(VAR XMLDom@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60") : Boolean;
    VAR
      XMLInStream@1001 : InStream;
    BEGIN
      IF NOT ISCLEAR(XMLDom) THEN
        CLEAR(XMLDom);

      CALCFIELDS("Result XML");
      IF "Result XML".HASVALUE THEN BEGIN
        "Result XML".CREATEINSTREAM(XMLInStream);
        CREATE(XMLDom);
        EXIT(XMLDom.load(XMLInStream));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE SaveXMLRequestDoc@4(VAR XMLDom@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60") : Boolean;
    VAR
      XMLOutStream@1102601000 : OutStream;
    BEGIN
      IF ISCLEAR(XMLDom) THEN
        EXIT(FALSE);

      "Request XML".CREATEOUTSTREAM(XMLOutStream);
      XMLDom.save(XMLOutStream);
      "Created Date/Time" := CURRENTDATETIME;
      EXIT(TRUE);
    END;

    PROCEDURE SaveXMLAnswerDoc@8(VAR XMLDom@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60") : Boolean;
    VAR
      XMLOutStream@1001 : OutStream;
    BEGIN
      IF ISCLEAR(XMLDom) THEN
        EXIT(FALSE);

      "Answer XML".CREATEOUTSTREAM(XMLOutStream);
      XMLDom.save(XMLOutStream);
      "Answer Date/Time" := CURRENTDATETIME;
      EXIT(TRUE);
    END;

    PROCEDURE SaveXMLResultDoc@3(VAR XMLDom@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60") : Boolean;
    VAR
      MobDocMgt@1003 : Codeunit 8701;
      XMLOutStream@1001 : OutStream;
      XMLAnswerDoc@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
    BEGIN
      IF ISCLEAR(XMLDom) THEN
        EXIT(FALSE);

      "Result XML".CREATEOUTSTREAM(XMLOutStream);
      XMLDom.save(XMLOutStream);
      "Result Date/Time" := CURRENTDATETIME;

      IF NOT LoadXMLAnswerDoc(XMLAnswerDoc) THEN BEGIN
        IF "Process Type" = "Process Type"::Queue THEN
          MobDocMgt.CreateXMLResponseDocReceived(XMLAnswerDoc,"Message ID")
        ELSE
          XMLAnswerDoc := XMLDom;
        SaveXMLAnswerDoc(XMLAnswerDoc);

      END;
      EXIT(TRUE);
    END;

    PROCEDURE ImporXMLRequestDoc@7();
    VAR
      BlobRef@1000 : Record 99008535;
      RBMgt@1001 : Codeunit 419;
    BEGIN
      IF NOT (Status IN [Status::New,Status::Error]) THEN
        ERROR(Text008);
      IF NOT CONFIRM(Text007,FALSE,FIELDCAPTION("Message ID"),"Message ID") THEN
        EXIT;
      CLEAR("Request XML");
      RBMgt.BLOBImport(BlobRef,'',TRUE);
      "Request XML" := BlobRef.Blob;
      MODIFY;
    END;

    PROCEDURE ExporXMLRequestDoc@18();
    VAR
      BlobRef@1000 : Record 99008535;
      RBMgt@1001 : Codeunit 419;
    BEGIN
      CALCFIELDS("Request XML");
      IF "Request XML".HASVALUE THEN BEGIN
        BlobRef.Blob:= "Request XML";
        RBMgt.BLOBExport(BlobRef,Text009,TRUE);
      END;
    END;

    BEGIN
    END.
  }
}
