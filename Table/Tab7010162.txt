OBJECT Table 7010162 Reserva Excursion
{
  OBJECT-PROPERTIES
  {
    Date=21/07/15;
    Time=[ 9:41:10];
    Modified=Yes;
    Version List=AIC2009,CNT-OC-14047;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lrRsv@1000000000 : Record 7010162;
             BEGIN
               //-$104rPar.LOCKTABLE;
               rPar.FINDFIRST;
               //-$104rPar."Contador Reservas excursion" := rPar."Contador Reservas excursion" + 1;
               //-$104rPar.MODIFY;

               Delegacion   := rPar.Delegacion;
               //-$104"N§ Reserva" := rPar."Contador Reservas excursion";

               //+$104 <
               //lrRsv.RESET;
               //IF lrRsv.FINDLAST THEN
               //  "N§ Reserva" := lrRsv."N§ Reserva" + 1
               //ELSE
               //  "N§ Reserva" := 1;
               //+$104 >

               // Calculamos el n§ de personas, guardamos el usuario y la fecha de creacion y buscamos la
               // semana correspondiente a la fecha de la excursion.

               //-$066"N§ Personas" := calcula_personas;

               "Usuario Creacion" := USERID;
               "Fecha Creacion"   := TODAY;

               //+$052 <
               IF rPar."Control tickets x oficina" THEN
               BEGIN
                 rUsuario.GET(USERID);
                 rUsuario.TESTFIELD("Oficina Excursiones");
                 Oficina := rUsuario."Oficina Excursiones";
               END;
               //+$052 >

               "Fecha Venta" := WORKDATE;

               "Canal venta" := rPar."Canal venta x defecto"; // +$084

               //+$053 <
               Divisa := rPar."Divisa venta excursiones";
               VALIDATE("Fecha cambio");
               //+$053 >

               // $031 // Rellenamos la oficina de la excursion
               IF Producto <> '' THEN
                 SetOficina(FIELDNO(Producto));

               // Comprobar el n§ de ticket para estar seguros de que no se repite con otro ya introducido en el sistema.
               _CheckTicketDuplicado; //+$060

               // +$106
               IF NOT "Reserva a credito" THEN
                 "Voucher printed" := TRUE;

               rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, Text007, Text008, Text039);
             END;

    OnModify=VAR
               rReserva@1103355000 : Record 7010162;
             BEGIN
               ControlEdicion(); //$004

               // $080
               IF ("Reserva online") AND (GUIALLOWED) THEN
                 cFunSeg.TienePermiso('EXC-ONL-MAN', TRUE);

               _CheckRepresentanteBloqueado; //$010

               IF (Producto <> xRec.Producto) OR
                  (Adultos <> xRec.Adultos) OR
                  (Ni¤os <> xRec.Ni¤os) OR
                  ("Fecha Excursion" <> xRec."Fecha Excursion") OR
                  ("Guia Venta" <> xRec."Guia Venta") OR
                  ("Zona Hotel" <> xRec."Zona Hotel") OR
                  (TourOperador <> xRec.TourOperador) OR
                  ("Fecha cambio" <> xRec."Fecha cambio") OR
                  ("Venta - Invitados Adultos" <> xRec."Venta - Invitados Adultos") OR
                  ("Venta - Invitados ni¤os" <> xRec."Venta - Invitados ni¤os") OR
                  ("Fecha Venta" <> xRec."Fecha Venta") THEN BEGIN

                 // No dejar modificar las reservas liquidadas

                 IF "N§ liquidacion GV" <> 0 THEN
                   ERROR(Text001);
               END;

               // Comprobar el n§ de ticket para estar seguros de que no se repite con otro ya introducido en el sistema.
               _CheckTicketDuplicado;

               // AJF 26/11/08
               // Si hay cambios que puedan afectar a la proforma hay que marcarla.

               IF (Producto          <> xRec.Producto         ) OR
                  ("Fecha Excursion" <> xRec."Fecha Excursion") OR
                  ("Hotel Cliente"   <> xRec."Hotel Cliente"  ) OR
                  ("N§ Habitacion"   <> xRec."N§ Habitacion"  ) OR
                  (Adultos           <> xRec.Adultos          ) OR
                  (Ni¤os             <> xRec.Ni¤os)
               THEN
                 cProf.MarcarRegenerarProforma(Delegacion, "N§ Interno", "N§ Periodo");

               // Calculamos el n§ de personas, guardamos el usuario y la fecha de ultima modificacion

               //-$066"N§ Personas" := calcula_personas;

               "Usuario Modificacion" := USERID;
               "Fecha Modificacion" := TODAY;

               SetInfPaxSop; // $025
             END;

    OnDelete=VAR
               rSuplemento@1103355001 : Record 7010165;
               rBack@1103355002 : Record 7009854;
             BEGIN
               IF "N§ Ticket" <> '' THEN  //+056
                 ERROR(Text046);

               ControlEdicion(); //$004

               _CheckRepresentanteBloqueado; //$010

               // Comprobar que la reserva no este asignada a un servicio validado o facturado y que no este
               // liquidada al guia de venta o al touroperador

               comprobar_servicio("N§ Servicio", TRUE, FALSE);

               rSuplemento.RESET;
               rSuplemento.SETRANGE(Delegacion  , Delegacion);
               rSuplemento.SETRANGE("N§ Reserva", "N§ Reserva");
               IF rSuplemento.FINDSET(TRUE) THEN
                 rSuplemento.DELETEALL(TRUE);

               // $025
               BorraReservasSoporte;

               //+$028
               //. Borrar la tabla de soporte que contiene toda la informacion del calculo
               rDetEco.RESET;
               rDetEco.SETRANGE(Delegacion    , Delegacion);
               rDetEco.SETRANGE("Num. Reserva", "N§ Reserva");
               IF rDetEco.FINDFIRST THEN
                 rDetEco.DELETE;
               //+$028

               // Gestion Backup

               rPar.FINDFIRST;
               IF rPar."Tipo Anulacion reserva" = rPar."Tipo Anulacion reserva"::Backup THEN
               BEGIN
                 rBack.TRANSFERFIELDS(Rec);
                 IF NOT rBack.INSERT THEN
                   rBack.MODIFY;
               END;

               // AJF 26/05/08
               // Al borrar la reserva hay que marcar la proforma para regenerar.

               cProf.MarcarRegenerarProforma(Delegacion, "N§ Interno", "N§ Periodo");

               rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, Text007, Text008, Text009);
             END;

    CaptionML=[ENU=Excursion Booking;
               ESP=Reserva Excursion];
    PasteIsValid=No;
    LookupFormID=Form7010199;
    DrillDownFormID=Form7010199;
  }
  FIELDS
  {
    { 1   ;   ;Delegacion          ;Code20        ;TableRelation=Delegacion.Codigo;
                                                   CaptionML=[ENU=Local Office;
                                                              ESP=Delegacion];
                                                   Description=PK, FK delegacion;
                                                   Editable=Yes }
    { 3   ;   ;N§ Reserva          ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Reservation No.;
                                                              ESP=N§ Reserva];
                                                   Description=PK;
                                                   Editable=No }
    { 5   ;   ;N§ Interno          ;Integer       ;CaptionML=[ENU=Internal No.;
                                                              ESP=N§ Interno];
                                                   Editable=No }
    { 7   ;   ;N§ Periodo          ;Integer       ;CaptionML=[ENU=Period No.;
                                                              ESP=N§ Periodo];
                                                   Editable=No }
    { 8   ;   ;Producto            ;Code10        ;TableRelation="Producto agencia".Codigo WHERE (Tipo Producto=CONST(Excursion),
                                                                                                  Caducado=CONST(No));
                                                   OnValidate=VAR
                                                                rProducto@1103355000 : Record 7009710;
                                                              BEGIN
                                                                IF Producto <> xRec.Producto THEN
                                                                BEGIN
                                                                  //. No cambiar si ya esta asignada a un servicio
                                                                  IF "N§ Servicio" <> 0 THEN
                                                                    ERROR(Text010);

                                                                  // $031 // Rellenamos la oficina de la excursion
                                                                  SetOficina(FIELDNO(Producto));

                                                                  //$074 <
                                                                  IF (NOT rExc.CheckVentaVehiculo(Producto)) AND ("Num. Vehiculos" <> 0) THEN
                                                                    VALIDATE("Num. Vehiculos", 0);
                                                                  //$074 >

                                                                  // +$079 Se debe seleccionar el turno
                                                                  IF (GUIALLOWED) AND (NOT "Modificacion importacion") THEN
                                                                    Pedir_Turno;

                                                                  _CheckCalendar; //+$047

                                                                  CheckFueraCupo(FALSE,TRUE); //+$074

                                                                  //. Comprobar si existen suplementos y hoja de excursiones para el dia y producto
                                                                  IF "Fecha Excursion" <> 0D THEN
                                                                  BEGIN
                                                                    borra_suplementos;
                                                                    crea_suplementos;
                                                                    comprobar_hoja;
                                                                  END;

                                                                  comprobar_servicio("N§ Servicio", TRUE, TRUE);

                                                                  // . Registrar en historico.
                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION(Producto), xRec.Producto,
                                                                                 Producto);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Excursion;
                                                              ESP=Producto];
                                                   NotBlank=Yes;
                                                   Description=FK Producto }
    { 9   ;   ;Fecha Excursion     ;Date          ;OnValidate=BEGIN
                                                                IF "Fecha Excursion" <> xRec."Fecha Excursion" THEN
                                                                BEGIN
                                                                  //. No cambiar si ya esta asignada a un servicio
                                                                  // . Registrar en historico.
                                                                  IF "N§ Servicio" <> 0 THEN
                                                                    ERROR(Text011);

                                                                  // +$079 Se debe seleccionar el turno
                                                                  IF (GUIALLOWED) AND (NOT "Modificacion importacion") THEN
                                                                    Pedir_Turno;

                                                                  _CheckCalendar; //+$047


                                                                  IF (GUIALLOWED) AND (CurrFieldNo = FIELDNO("Fecha Excursion")) THEN
                                                                  BEGIN
                                                                    _CheckFechaAnterior("Fecha Excursion");
                                                                    comprobar_servicio("N§ Servicio", TRUE, TRUE);
                                                                  END;

                                                                  CheckFueraCupo(FALSE,TRUE); //+$074

                                                                  //. Comprobar si existen suplementos y hoja de excursiones para el dia y producto
                                                                  IF Producto <> '' THEN
                                                                  BEGIN
                                                                    borra_suplementos;
                                                                    crea_suplementos;
                                                                    comprobar_hoja;
                                                                  END;

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Fecha Excursion"),
                                                                                 FORMAT(xRec."Fecha Excursion"), FORMAT("Fecha Excursion"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Excursion date;
                                                              ESP=Fecha Excursion];
                                                   NotBlank=Yes }
    { 10  ;   ;Oficina             ;Code20        ;TableRelation="Oficina ventas".Codigo;
                                                   CaptionML=[ENU=Office;
                                                              ESP=Oficina];
                                                   Description=$031;
                                                   Editable=No }
    { 11  ;   ;Hotel Cliente       ;Code20        ;TableRelation=Hotel.Hotel;
                                                   OnValidate=VAR
                                                                rHotel@1103355000 : Record 7009724;
                                                                rResExc@1103355001 : Record 7010162;
                                                                lrHotelExc@1103355003 : Record 7010184;
                                                                lrCalendario@1000000000 : Record 7010254;
                                                              BEGIN
                                                                IF "Hotel Cliente" <> xRec."Hotel Cliente" THEN
                                                                BEGIN
                                                                  // Miramos que el hotel tenga hora de recogida para esa excursi¢n
                                                                  IF "Hotel Cliente" <> '' THEN
                                                                  BEGIN
                                                                    //. Solo buscamos la recogida si ya hemos asignado el turno
                                                                    //+$110 <
                                                                    IF NOT "Pendiente asignar turno" THEN
                                                                    BEGIN
                                                                      lrHotelExc.GET("Hotel Cliente", Producto, "Turno Excursion");
                                                                      IF lrHotelExc."Hora recogida" = 0T THEN
                                                                        ERROR(Text012, "Hotel Cliente", Producto);
                                                                    END;
                                                                    //+$110 >
                                                                  END;

                                                                  rHotel.RESET;
                                                                  IF rHotel.GET("Hotel Cliente") THEN
                                                                  BEGIN
                                                                    //$001
                                                                    _CheckGuiaVentaHotel;

                                                                    "Zona Hotel"     := rHotel."Zona Fisica";
                                                                    "Punto Recogida" := rHotel."Punto Recogida";
                                                                    "Orden hotel"    := rHotel."Orden Salida";
                                                                    IF rZonFis.GET("Zona Hotel") THEN
                                                                      "Orden zona" := rZonFis."Orden Excursiones";

                                                                    //. Poner la misma hora de recogida que el resto de reservas de ese hotel para ese dia
                                                                    rResExc.RESET;
                                                                    rResExc.SETCURRENTKEY("Fecha Excursion",
                                                                                          Producto,
                                                                                          "Hora Recogida",
                                                                                          "Hotel Cliente");
                                                                    rResExc.SETRANGE ("Fecha Excursion", "Fecha Excursion");
                                                                    rResExc.SETRANGE (Producto         , Producto);
                                                                    rResExc.SETRANGE ("Turno Excursion", "Turno Excursion");
                                                                    rResExc.SETFILTER("Hora Recogida"  , '<>%1', 0T);
                                                                    rResExc.SETRANGE ("Hotel Cliente"  , "Hotel Cliente");
                                                                    rResExc.SETFILTER("N§ Reserva"     , '<>%1', "N§ Reserva");
                                                                    IF rResExc.FINDFIRST THEN
                                                                      "Hora Recogida" := rResExc."Hora Recogida";

                                                                    // ----  Si aun no hemos puesto la hora de recogida, traerla del fichero de horas de recogida  ----
                                                                    // ----  por excursion y hotel                                                                                 ----

                                                                    IF "Hora Recogida" = 0T THEN
                                                                      _GetHoraRecogida;

                                                                    // Poner el mismo punto de recogida que el resto de reservas de ese hotel para ese dia

                                                                    rResExc.SETRANGE ("Hora Recogida");
                                                                    rResExc.SETFILTER("Punto Recogida"  , '<>%1', "Punto Recogida");
                                                                    IF rResExc.FINDFIRST THEN
                                                                      "Punto Recogida" := rResExc."Punto Recogida";
                                                                  END;

                                                                  // Comprobar que no este asignada a un servicio validado o facturado y recalcular la reserva.

                                                                  comprobar_servicio("N§ Servicio", TRUE, TRUE);

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Hotel Cliente"),
                                                                                 xRec."Hotel Cliente", "Hotel Cliente");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Client Hotel;
                                                              ESP=Hotel Cliente];
                                                   NotBlank=Yes;
                                                   Description=FK Hotel }
    { 12  ;   ;Turno Excursion     ;Integer       ;TableRelation="Calendario excursion".Turno WHERE (Excursion=FIELD(Producto));
                                                   OnValidate=VAR
                                                                rCalendario@1000000000 : Record 7010254;
                                                              BEGIN
                                                                IF "Turno Excursion" <> xRec."Turno Excursion" THEN
                                                                BEGIN
                                                                  // Comprobamos que el turno seleccionado sea correcto
                                                                  IF (Producto = '') OR ("Fecha Excursion" = 0D) THEN
                                                                    ERROR(Text049);

                                                                  IF "Turno Excursion" = 0 THEN
                                                                  BEGIN
                                                                    rCalendario.RESET;
                                                                    rCalendario.SETRANGE(Excursion      , Producto);
                                                                    rCalendario.SETFILTER("Fecha inicio", '<=%1', "Fecha Excursion");
                                                                    rCalendario.SETFILTER("Fecha final" , '>=%1', "Fecha Excursion");
                                                                    CASE DATE2DWY("Fecha Excursion", 1) OF
                                                                      1: rCalendario.SETRANGE(Lunes    , TRUE);
                                                                      2: rCalendario.SETRANGE(Martes   , TRUE);
                                                                      3: rCalendario.SETRANGE(Miercoles, TRUE);
                                                                      4: rCalendario.SETRANGE(Jueves   , TRUE);
                                                                      5: rCalendario.SETRANGE(Viernes  , TRUE);
                                                                      6: rCalendario.SETRANGE(Sabado   , TRUE);
                                                                      7: rCalendario.SETRANGE(Domingo  , TRUE);
                                                                    END;
                                                                    IF rCalendario.FINDFIRST THEN
                                                                      ERROR(Text051);
                                                                  END;

                                                                  _CheckCalendar; //+$092

                                                                  IF "Turno Excursion" <> 0 THEN
                                                                    "Pendiente asignar turno" := FALSE;

                                                                  _GetHoraRecogida;

                                                                  //. Comprobar si existe hoja de excursiones para el dia y producto
                                                                  comprobar_hoja;

                                                                  CheckFueraCupo(FALSE, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Excursion turn;
                                                              ESP=Turno excursion];
                                                   Description=$079 }
    { 13  ;   ;N§ Habitacion       ;Code10        ;OnValidate=BEGIN
                                                                IF "N§ Habitacion" <> xRec."N§ Habitacion" THEN
                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("N§ Habitacion"),
                                                                                 xRec."N§ Habitacion", "N§ Habitacion");
                                                              END;

                                                   CaptionML=[ENU=Room No.;
                                                              ESP=N§ Habitacion] }
    { 15  ;   ;N§ Ticket           ;Code10        ;OnValidate=BEGIN
                                                                //+$051 <
                                                                IF (xRec."N§ Ticket" <> '') AND ("N§ Ticket" <> xRec."N§ Ticket") THEN
                                                                BEGIN
                                                                  IF GUIALLOWED THEN
                                                                    IF NOT CONFIRM(Text044, FALSE, xRec."N§ Ticket", "N§ Ticket") THEN
                                                                      ERROR('');
                                                                END;
                                                                //+$051 >

                                                                // ----  No dejar asignar n§ de Ticket si el Touroperador esta en blanco  ----
                                                                //-$041IF TourOperador = '' THEN
                                                                //-$041  ERROR(Text013);

                                                                //+$033
                                                                ComprobacionesTicket;

                                                                // Hay que comprobar que no este asignada a un servicio validado, facturado o que este liquidada
                                                                // al guia de venta

                                                                comprobar_servicio("N§ Servicio", TRUE, FALSE);

                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("N§ Ticket"),
                                                                               xRec."N§ Ticket", "N§ Ticket");
                                                              END;

                                                   CaptionML=[ENU=Ticket No.;
                                                              ESP=N§ Ticket];
                                                   NotBlank=Yes }
    { 16  ;   ;Idioma              ;Code10        ;TableRelation=Language.Code;
                                                   OnValidate=BEGIN
                                                                _CheckCalendar; //+$092

                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION(Idioma),
                                                                               xRec.Idioma, Idioma);
                                                              END;

                                                   CaptionML=[ENU=Language;
                                                              ESP=Idioma];
                                                   Description=FK Idioma }
    { 17  ;   ;Venta - Invitados Adultos;Decimal  ;OnValidate=BEGIN
                                                                IF "Venta - Invitados Adultos" <> xRec."Venta - Invitados Adultos" THEN
                                                                BEGIN
                                                                  IF "Venta - Invitados Adultos" > Adultos THEN
                                                                    ERROR(Text017);


                                                                  //. Hay que comprobar que no este asignada a un servicio validado, facturado o que este liquidada
                                                                  //. al guia de venta
                                                                  comprobar_servicio("N§ Servicio", TRUE, TRUE);

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Venta - Invitados Adultos"),
                                                                                 FORMAT(xRec."Venta - Invitados Adultos"), FORMAT("Venta - Invitados Adultos"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sales - Invited adults;
                                                              ESP=Venta - Invitados Adultos];
                                                   DecimalPlaces=0:0 }
    { 18  ;   ;Compra - Invitados Adultos;Decimal ;OnValidate=VAR
                                                                lcCosteTicket@1000000000 : Codeunit 7010170;
                                                              BEGIN
                                                                IF "Compra - Invitados Adultos" <> xRec."Compra - Invitados Adultos" THEN
                                                                BEGIN
                                                                  IF "Compra - Invitados Adultos" > Adultos THEN
                                                                    ERROR(Text017);


                                                                  //. Hay que comprobar que no este asignada a un servicio validado, facturado o que este liquidada
                                                                  //. al guia de venta
                                                                  comprobar_servicio("N§ Servicio", TRUE, FALSE);

                                                                  //. Llamar a la funcion que calcula prevision de coste
                                                                  "Coste Reserva" := lcCosteTicket.CostePrevistoReserva(Rec);

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Compra - Invitados Adultos"),
                                                                                 FORMAT(xRec."Compra - Invitados Adultos"), FORMAT("Compra - Invitados Adultos"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Purchase - Invited adults;
                                                              ESP=Compra - Invitados Adultos];
                                                   DecimalPlaces=0:0;
                                                   Description=$093 }
    { 19  ;   ;Punto Recogida      ;Text30        ;OnValidate=VAR
                                                                rResExc@1103355000 : Record 7010162;
                                                              BEGIN
                                                                rResExc.RESET;
                                                                rResExc.SETCURRENTKEY("Fecha Excursion",
                                                                                      Producto,
                                                                                      "Hora Recogida",
                                                                                      "Hotel Cliente");
                                                                rResExc.SETRANGE ("Fecha Excursion", "Fecha Excursion");
                                                                rResExc.SETRANGE (Producto         , Producto);
                                                                rResExc.SETRANGE ("Hotel Cliente"  , "Hotel Cliente");
                                                                rResExc.SETFILTER("Punto Recogida" , '<>%1', "Punto Recogida");
                                                                rResExc.SETFILTER("N§ Reserva"     , '<>%1', "N§ Reserva");
                                                                IF rResExc.FINDSET(TRUE) THEN
                                                                  IF CONFIRM(Text018, TRUE, "Hotel Cliente") THEN
                                                                    rResExc.MODIFYALL("Punto Recogida", "Punto Recogida");

                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Punto Recogida"),
                                                                               FORMAT(xRec."Punto Recogida"), FORMAT("Punto Recogida"));
                                                              END;

                                                   CaptionML=[ENU=Picking point;
                                                              ESP=Punto Recogida] }
    { 21  ;   ;Hora Recogida       ;Time          ;OnValidate=VAR
                                                                rResExc@1103355000 : Record 7010162;
                                                              BEGIN
                                                                rResExc.RESET;
                                                                rResExc.SETCURRENTKEY("Fecha Excursion",
                                                                                      Producto,
                                                                                      "Hora Recogida",
                                                                                      "Hotel Cliente");
                                                                rResExc.SETRANGE ("Fecha Excursion", "Fecha Excursion");
                                                                rResExc.SETRANGE (Producto         , Producto);
                                                                rResExc.SETRANGE ("Hotel Cliente"  , "Hotel Cliente");
                                                                rResExc.SETFILTER("N§ Reserva"     , '<>%1', "N§ Reserva");
                                                                IF rResExc.FINDSET(TRUE) THEN
                                                                BEGIN
                                                                  IF CurrFieldNo = FIELDNO("Hora Recogida") THEN
                                                                  BEGIN
                                                                    IF CONFIRM(Text019, TRUE, "Hotel Cliente") THEN
                                                                      rResExc.MODIFYALL("Hora Recogida", "Hora Recogida");
                                                                  END
                                                                  ELSE
                                                                    rResExc.MODIFYALL("Hora Recogida", "Hora Recogida");
                                                                END;
                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Hora Recogida"),
                                                                               FORMAT(xRec."Hora Recogida"), FORMAT("Hora Recogida"));
                                                              END;

                                                   CaptionML=[ENU=Pickup time;
                                                              ESP=Hora recogida] }
    { 23  ;   ;Fecha Venta         ;Date          ;OnValidate=BEGIN
                                                                IF "Fecha Venta" <> xRec."Fecha Venta" THEN
                                                                BEGIN
                                                                  IF (GUIALLOWED) AND (CurrFieldNo = FIELDNO("Fecha Venta")) THEN
                                                                  BEGIN
                                                                    _CheckFechaAnterior("Fecha Venta");

                                                                    comprobar_servicio("N§ Servicio", TRUE, TRUE);
                                                                  END;

                                                                  //. Pasamos esta fecha a los cobros
                                                                  rCobro.RESET;
                                                                  rCobro.SETRANGE(Delegacion   , Delegacion);
                                                                  rCobro.SETRANGE("Num Reserva", "N§ Reserva");
                                                                  IF rCobro.FINDSET(TRUE) THEN
                                                                    rCobro.MODIFYALL("Fecha venta", "Fecha Venta");

                                                                  //. Pasamos esta fecha al detalle economico
                                                                  //+$054
                                                                  rDetEco.RESET;
                                                                  rDetEco.SETRANGE(Delegacion    , Delegacion);
                                                                  rDetEco.SETRANGE("Num. Reserva", "N§ Reserva");
                                                                  IF rDetEco.FINDSET(TRUE) THEN
                                                                    rDetEco.MODIFYALL("Fecha venta", "Fecha Venta");
                                                                  //+$054

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva,FIELDCAPTION("Fecha Venta"),
                                                                                 FORMAT(xRec."Fecha Venta"), FORMAT("Fecha Venta"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sale date;
                                                              ESP=Fecha venta] }
    { 25  ;   ;N§ Servicio         ;Integer       ;TableRelation="Servicio Excursion"."N§ Servicio" WHERE (Delegacion=FIELD(Delegacion));
                                                   OnValidate=VAR
                                                                rTicAnu@1103355000 : Record 7010184;
                                                              BEGIN
                                                                IF "N§ Servicio" <> xRec."N§ Servicio" THEN
                                                                BEGIN
                                                                  TESTFIELD("Voucher printed",TRUE);  // +$106
                                                                  comprobar_servicio(xRec."N§ Servicio", FALSE, FALSE);
                                                                  comprobar_servicio("N§ Servicio", FALSE, FALSE);

                                                                  IF "N§ Servicio" <> 0 THEN
                                                                  BEGIN
                                                                    IF NOT rServExc.GET(Delegacion, "N§ Servicio") THEN
                                                                      ERROR(Text020);
                                                                    IF rServExc.Excursion <> Producto THEN
                                                                      ERROR(Text021);
                                                                    IF rServExc.Fecha <> "Fecha Excursion" THEN
                                                                      ERROR(Text022);
                                                                  END;

                                                                  IF xRec."N§ Servicio" <> 0 THEN
                                                                  BEGIN
                                                                    IF rServExc.GET(Delegacion, xRec."N§ Servicio") THEN
                                                                    BEGIN
                                                                      rServExc."Reservas Anuladas"    := rServExc."Reservas Anuladas" + 1;
                                                                      rServExc."Pendiente Recalcular" := TRUE;
                                                                      rServExc.MODIFY;
                                                                    END;
                                                                  END;

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("N§ Servicio"),
                                                                                 FORMAT(xRec."N§ Servicio"), FORMAT("N§ Servicio"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Service No.;
                                                              ESP=N§ Servicio];
                                                   Description=FK Servicio Excursiones }
    { 27  ;   ;TourOperador        ;Code10        ;TableRelation=TourOperador.TourOperador;
                                                   OnValidate=VAR
                                                                rTO@1103355000 : Record 7009717;
                                                              BEGIN
                                                                IF TourOperador <> xRec.TourOperador THEN
                                                                BEGIN
                                                                  IF rTO.GET(TourOperador) THEN
                                                                  BEGIN
                                                                    //+$096 <
                                                                    IF (rTO.Bloqueado) AND ("Reserva a credito") THEN
                                                                      rTO.TESTFIELD(Bloqueado);
                                                                    //+$096 >
                                                                    Idioma := rTO.Idioma;

                                                                    //+$099 <
                                                                    IF rTO."Canal venta x defecto" <> '' THEN
                                                                      "Canal venta" := rTO."Canal venta x defecto";
                                                                    //+$099 >
                                                                  END;

                                                                  // +$102
                                                                  IF "Reserva a credito" THEN
                                                                    _SetTicketNumber
                                                                  ELSE
                                                                    //+$033
                                                                    IF "N§ Ticket" <> '' THEN
                                                                      ComprobacionesTicket;

                                                                  CheckFueraCupo(FALSE,TRUE); //+$074

                                                                  //. Hay que comprobar que no este asignada a un servicio validado, facturado o que este liquidada
                                                                  //. al guia de venta
                                                                  comprobar_servicio("N§ Servicio", TRUE, TRUE);

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION(TourOperador),
                                                                                 xRec.TourOperador, TourOperador);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=TourOperator;
                                                              ESP=TourOperador];
                                                   Description=FK TourOperador }
    { 29  ;   ;Nombre Cliente      ;Text50        ;OnValidate=BEGIN
                                                                IF "Nombre Cliente" <> xRec."Nombre Cliente" THEN
                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Nombre Cliente"),
                                                                                 xRec."Nombre Cliente", "Nombre Cliente");
                                                              END;

                                                   CaptionML=[ENU=Client Name;
                                                              ESP=Nombre cliente] }
    { 33  ;   ;Asignado            ;Boolean       ;InitValue=No;
                                                   CaptionML=[ENU=Assigned;
                                                              ESP=Asignado] }
    { 37  ;   ;Adultos             ;Decimal       ;OnValidate=BEGIN
                                                                IF Adultos <> xRec.Adultos THEN
                                                                BEGIN
                                                                  "N§ Personas" := calcula_personas;

                                                                  CheckFueraCupo(TRUE,TRUE); //+$074

                                                                  _ActualizaSuplAutomatico;

                                                                  //. Hay que comprobar que no este asignada a un servicio validado, facturado o que este liquidada
                                                                  //. al guia de venta
                                                                  comprobar_servicio("N§ Servicio", TRUE, TRUE);

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION(Adultos),
                                                                                 FORMAT(xRec.Adultos), FORMAT(Adultos));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Adults;
                                                              ESP=Adultos];
                                                   DecimalPlaces=0:0 }
    { 39  ;   ;Ni¤os               ;Decimal       ;OnValidate=BEGIN
                                                                IF Ni¤os <> xRec.Ni¤os THEN
                                                                BEGIN
                                                                  "N§ Personas" := calcula_personas;

                                                                  CheckFueraCupo(TRUE,TRUE); //+$074

                                                                  _ActualizaSuplAutomatico;

                                                                  //. Hay que comprobar que no este asignada a un servicio validado, facturado o que este liquidada
                                                                  //. al guia de venta
                                                                  comprobar_servicio("N§ Servicio", TRUE, TRUE);

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION(Ni¤os),
                                                                                 FORMAT(xRec.Ni¤os), FORMAT(Ni¤os));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Children;
                                                              ESP=Ni¤os];
                                                   DecimalPlaces=0:0 }
    { 41  ;   ;Bebes               ;Decimal       ;OnValidate=BEGIN
                                                                IF Bebes <> xRec.Bebes THEN
                                                                BEGIN
                                                                  //-$066"N§ Personas" := calcula_personas;

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION(Bebes),
                                                                                 FORMAT(xRec.Bebes), FORMAT(Bebes));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Babys;
                                                              ESP=Bebes];
                                                   DecimalPlaces=0:0 }
    { 49  ;   ;Guia Venta          ;Code20        ;TableRelation="Representante excursiones".Codigo WHERE (Bloqueado=CONST(No));
                                                   OnValidate=VAR
                                                                rTalonario@1103355000 : Record 7010146;
                                                              BEGIN
                                                                IF "Guia Venta" <> xRec."Guia Venta" THEN BEGIN
                                                                  //. Hay que comprobar que no este asignada a un servicio validado, facturado o que este liquidada
                                                                  //. al guia de venta
                                                                  comprobar_servicio("N§ Servicio", TRUE, TRUE);

                                                                  CntrlGuiaTTOO; //$027

                                                                  //. Pasamos el guia al detalle economico
                                                                  //+$054
                                                                  rDetEco.RESET;
                                                                  rDetEco.SETRANGE(Delegacion    , Delegacion);
                                                                  rDetEco.SETRANGE("Num. Reserva", "N§ Reserva");
                                                                  IF rDetEco.FINDSET(TRUE) THEN
                                                                    rDetEco.MODIFYALL("Guia Venta", "Guia Venta");

                                                                  //. Pasamos esta fecha a los cobros
                                                                  rCobro.RESET;
                                                                  rCobro.SETRANGE(Delegacion   , Delegacion);
                                                                  rCobro.SETRANGE("Num Reserva", "N§ Reserva");
                                                                  IF rCobro.FINDSET(TRUE) THEN
                                                                    rCobro.MODIFYALL("Guia venta", "Guia Venta");
                                                                  //+$054

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Guia Venta"),
                                                                                 xRec."Guia Venta", "Guia Venta");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sale guide;
                                                              ESP=Guia venta];
                                                   Description="Representante excursiones".Codigo WHERE (Bloqueado=CONST(No)) }
    { 51  ;   ;N§ Personas         ;Decimal       ;CaptionML=[ENU=People No.;
                                                              ESP=N§ Personas];
                                                   DecimalPlaces=0:0 }
    { 53  ;   ;Zona Hotel          ;Code10        ;TableRelation="Zona fisica"."Zona Fisica";
                                                   CaptionML=[ENU=Hotel zone;
                                                              ESP=Zona hotel];
                                                   Editable=No }
    { 59  ;   ;Ingreso reserva     ;Decimal       ;CaptionML=[ENU=Reservation income;
                                                              ESP=Ingreso reserva];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 61  ;   ;Ingreso comisionable;Decimal       ;CaptionML=[ENU=Commissionable income;
                                                              ESP=Ingreso comisionable];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 63  ;   ;Comision Guia Venta ;Decimal       ;CaptionML=[ENU=Commission sale guide;
                                                              ESP=Comision Guia Venta];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 65  ;   ;Comision Touroperador;Decimal      ;CaptionML=[ENU=Commission Touroperator;
                                                              ESP=Comision Touroperador];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 67  ;   ;Liquidado GV        ;Boolean       ;CaptionML=[ENU=SG settled;
                                                              ESP=Liquidado GV] }
    { 68  ;   ;N§ liquidacion GV   ;Integer       ;TableRelation="Liquidacion Guia venta"."N§ Liquidacion" WHERE (Guia Venta=FIELD(Guia Venta));
                                                   OnValidate=BEGIN
                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva,
                                                                               FIELDCAPTION("N§ liquidacion GV"), FORMAT(xRec."N§ liquidacion GV"),
                                                                               FORMAT("N§ liquidacion GV"));

                                                                "Fecha Liquidacion GV" := TODAY; //+$073
                                                                "Liquidado GV"         := TRUE;  //+$073
                                                              END;

                                                   CaptionML=[ENU=SG Settlement No.;
                                                              ESP=N§ liquidacion GV];
                                                   Description="Liquidacion Guia venta"."N§ Liquidacion" WHERE (Guia Venta=FIELD(Guia Venta)) }
    { 69  ;   ;o_Liquidado TO      ;Boolean       ;CaptionML=[ENU=TO settled;
                                                              ESP=Liquidado TO] }
    { 70  ;   ;o_N§ liquidacion TO ;Integer       ;CaptionML=[ENU=TO Settlement No.;
                                                              ESP=N§ liquidacion TO] }
    { 71  ;   ;N§ Responsable      ;Integer       ;OnValidate=VAR
                                                                rResHot@1103355000 : Record 7009743;
                                                                rResHotAux@1103355001 : Record 7009743;
                                                              BEGIN
                                                                rParPer.FINDFIRST;

                                                                rResHot.RESET;
                                                                rResHot.SETRANGE(Delegacion  , Delegacion);
                                                                rResHot.SETRANGE("N§ Reserva", "N§ Responsable");
                                                                IF NOT rResHot.FINDFIRST THEN
                                                                  ERROR(Text024, "N§ Responsable");

                                                                "N§ Interno"             := rResHot."N§ Interno";
                                                                "N§ Periodo"             := rResHot."N§ Periodo";
                                                                VALIDATE("N§ Habitacion" , rResHot."N§ Habitacion");
                                                                VALIDATE(TourOperador    , rResHot."TourOperador Venta");
                                                                VALIDATE("Nombre Cliente", rResHot.Nombre);
                                                                VALIDATE(Idioma          , rResHot.Idioma);
                                                                "Booking Touroperador"                := rResHot.Bono;
                                                                "N§ Responsable"         := rResHot."N§ Responsable";

                                                                rResHotAux.SETCURRENTKEY(Delegacion,
                                                                                         "N§ Responsable");
                                                                rResHotAux.SETRANGE(Delegacion      , Delegacion);
                                                                rResHotAux.SETRANGE("N§ Responsable", rResHot."N§ Responsable");
                                                                IF NOT rResHotAux.FINDFIRST THEN
                                                                  ERROR(Text024, rResHot."N§ Responsable");
                                                                rResHotAux.SETRANGE("Tipo Persona", rParPer."Codigo Adulto");
                                                                IF rResHotAux.FINDFIRST THEN
                                                                  VALIDATE(Adultos, rResHotAux.COUNT);
                                                                rResHotAux.SETRANGE("Tipo Persona", rParPer."Codigo Ni¤o");
                                                                IF rResHotAux.FINDFIRST THEN
                                                                  VALIDATE(Ni¤os, rResHotAux.COUNT);
                                                                rResHotAux.SETRANGE("Tipo Persona", rParPer."Codigo Infant");
                                                                IF rResHotAux.FINDFIRST THEN
                                                                  VALIDATE(Bebes, rResHotAux.COUNT);

                                                                VALIDATE("Hotel Cliente" , rResHot."Hotel booking");
                                                              END;

                                                   OnLookup=VAR
                                                              rResHot@1103355000 : Record 7009743;
                                                              rResHotAux@1103355001 : Record 7009743;
                                                            BEGIN
                                                              rParPer.FINDFIRST;

                                                              rResHot.RESET;
                                                              rResHot.SETCURRENTKEY("Fecha entrada",
                                                                                    "Fecha salida");
                                                              rResHot.SETFILTER("Fecha entrada", '<=%1', "Fecha Excursion");
                                                              rResHot.SETFILTER("Fecha salida" , '>=%1', "Fecha Excursion");
                                                              rResHot.SETRANGE (Responsable    , TRUE);
                                                              IF FORM.RUNMODAL(0, rResHot) = ACTION::LookupOK THEN
                                                                VALIDATE("N§ Responsable", rResHot."N§ Reserva");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Responsible No.;
                                                              ESP=N§ Responsable] }
    { 73  ;   ;Booking Touroperador;Code20        ;OnValidate=BEGIN
                                                                IF "Booking Touroperador" <> xRec."Booking Touroperador" THEN BEGIN
                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Booking Touroperador"),
                                                                                 xRec."Booking Touroperador", "Booking Touroperador");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Touroperator Booking;
                                                              ESP=Booking Touroperador] }
    { 75  ;   ;Zona Servicio       ;Code10        ;CaptionML=[ENU=Service zone;
                                                              ESP=Zona servicio] }
    { 77  ;   ;Zona Compra         ;Code10        ;CaptionML=[ENU=Purchase zone;
                                                              ESP=Zona Compra] }
    { 79  ;   ;Zona Venta          ;Code10        ;CaptionML=[ENU=Sale zone;
                                                              ESP=Zona Venta] }
    { 81  ;   ;Ingreso Adulto      ;Decimal       ;CaptionML=[ENU=Adult income;
                                                              ESP=Ingreso Adulto];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 83  ;   ;Ingreso Ni¤o        ;Decimal       ;CaptionML=[ENU=Childer income;
                                                              ESP=Ingreso Ni¤o];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 85  ;   ;Reserva a credito   ;Boolean       ;CaptionML=[ENU=Credit reservation;
                                                              ESP=Reserva a credito] }
    { 87  ;   ;Observaciones       ;Text250       ;CaptionML=[ENU=Comments;
                                                              ESP=Observaciones] }
    { 89  ;   ;Confirmada          ;Boolean       ;CaptionML=[ENU=Confirmed;
                                                              ESP=Confirmada] }
    { 91  ;   ;Precio Adulto       ;Decimal       ;CaptionML=[ENU=Adult price;
                                                              ESP=Precio Adulto];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=Divisa }
    { 93  ;   ;Precio Ni¤o         ;Decimal       ;CaptionML=[ENU=Children price;
                                                              ESP=Precio Ni¤o];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=Divisa }
    { 95  ;   ;Pagan en Bus        ;Boolean       ;CaptionML=[ENU=Pay in bus;
                                                              ESP=Pagan en Bus] }
    { 97  ;   ;o_Previo Liquidar   ;Boolean       ;CaptionML=[ENU=Previous to be settled;
                                                              ESP=Previo Liquidar] }
    { 101 ;   ;o_Marca C/I         ;Code10        ;CaptionML=[ENU=Mark C/I;
                                                              ESP=Marca C/I] }
    { 103 ;   ;o_Semana Excursion  ;Integer       ;CaptionML=[ENU=Excursion week;
                                                              ESP=Semana Excursion] }
    { 105 ;   ;Modificacion importacion;Boolean   ;CaptionML=[ENU=Importation modification;
                                                              ESP=Modificacion importacion];
                                                   Editable=No }
    { 107 ;   ;N§ Acompa¤ante      ;Integer       ;CaptionML=[ENU=Companion No.;
                                                              ESP=N§ Acompa¤ante] }
    { 109 ;   ;Venta - Invitados ni¤os;Decimal    ;OnValidate=BEGIN
                                                                IF "Venta - Invitados ni¤os" <> xRec."Venta - Invitados ni¤os" THEN BEGIN
                                                                  IF "Venta - Invitados ni¤os" > Ni¤os THEN
                                                                    ERROR(Text026);

                                                                  //. Hay que comprobar que no este asignada a un servicio validado, facturado o que este liquidada
                                                                  //. al guia de venta
                                                                  comprobar_servicio("N§ Servicio", TRUE, TRUE);

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Venta - Invitados ni¤os"),
                                                                                 FORMAT(xRec."Venta - Invitados ni¤os"), FORMAT("Venta - Invitados ni¤os"));
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Sales - Invited childrens;
                                                              ESP=Venta - Invitados Ni¤os];
                                                   DecimalPlaces=0:0 }
    { 110 ;   ;Compra - Invitados ni¤os;Decimal   ;OnValidate=VAR
                                                                lcCosteTicket@1000000000 : Codeunit 7010170;
                                                              BEGIN
                                                                IF "Compra - Invitados ni¤os" <> xRec."Compra - Invitados ni¤os" THEN BEGIN
                                                                  IF "Compra - Invitados ni¤os" > Ni¤os THEN
                                                                    ERROR(Text026);

                                                                  //. Hay que comprobar que no este asignada a un servicio validado, facturado o que este liquidada
                                                                  //. al guia de venta
                                                                  comprobar_servicio("N§ Servicio", TRUE, FALSE);

                                                                  //. Llamar a la funcion que calcula prevision de coste
                                                                  "Coste Reserva" := lcCosteTicket.CostePrevistoReserva(Rec);

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION("Compra - Invitados ni¤os"),
                                                                                 FORMAT(xRec."Compra - Invitados ni¤os"), FORMAT("Compra - Invitados ni¤os"));
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Purchase - Invited childrens;
                                                              ESP=Compra - Invitados Ni¤os];
                                                   DecimalPlaces=0:0;
                                                   Description=$093 }
    { 111 ;   ;Divisa              ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency;
                                                              ESP=Divisa];
                                                   Description=FK Divisa }
    { 113 ;   ;Orden hotel         ;Integer       ;CaptionML=[ENU=Hotel order;
                                                              ESP=Orden hotel] }
    { 115 ;   ;Orden zona          ;Integer       ;CaptionML=[ENU=Zone order;
                                                              ESP=Orden zona] }
    { 117 ;   ;Usuario Creacion    ;Code20        ;CaptionML=[ENU=Creation user;
                                                              ESP=Usuario creacion];
                                                   Editable=No }
    { 119 ;   ;Fecha Creacion      ;Date          ;CaptionML=[ENU=Creation Date;
                                                              ESP=Fecha creacion];
                                                   Editable=No }
    { 121 ;   ;Usuario Modificacion;Code20        ;CaptionML=[ENU=Modification User;
                                                              ESP=Usuario modificacion];
                                                   Editable=No }
    { 123 ;   ;Fecha Modificacion  ;Date          ;CaptionML=[ENU=Modification Date;
                                                              ESP=Fecha modificacion];
                                                   Editable=No }
    { 125 ;   ;Precio Descuento Touroperador;Decimal;
                                                   CaptionML=[ENU=Touroperator price discount;
                                                              ESP=Precio Descuento Touroperador];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=Divisa }
    { 127 ;   ;Precio Comision Guia Venta;Decimal ;CaptionML=[ENU=Sale Guide Commission price;
                                                              ESP=Precio Comision Guia Venta];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=Divisa }
    { 129 ;   ;Anulada             ;Boolean       ;OnValidate=BEGIN
                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION(Anulada),
                                                                               FORMAT(xRec.Anulada), FORMAT(Anulada));
                                                              END;

                                                   CaptionML=[ENU=Cancelled;
                                                              ESP=Anulada] }
    { 131 ;   ;Fecha anulaci¢n/Reembolso;Date     ;CaptionML=[ENU=Cancellation date/Refund;
                                                              ESP=Fecha anulaci¢n/Reembolso] }
    { 133 ;   ;Importe reembolso   ;Decimal       ;CaptionML=[ENU=Refund Amount;
                                                              ESP=Importe Reembolso];
                                                   Description=OBSOLETO. Creada funcion GetReembolso;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 135 ;   ;Importe reembolso comisionable;Decimal;
                                                   CaptionML=[ENU=Refund Amount Commissionable;
                                                              ESP=Importe Reembolso comisionable];
                                                   Description=OBSOLETO;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 137 ;   ;N§ Servicio anulado ;Integer       ;CaptionML=[ENU=Cancelled service No.;
                                                              ESP=N§ Servicio anulado] }
    { 139 ;   ;N§ liquidacion GV reembolso;Integer;TableRelation="Liquidacion Guia venta"."N§ Liquidacion" WHERE (Guia Venta=FIELD(Guia Venta));
                                                   OnValidate=BEGIN
                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva,
                                                                               FIELDCAPTION("N§ liquidacion GV reembolso"), FORMAT(xRec."N§ liquidacion GV reembolso"),
                                                                               FORMAT("N§ liquidacion GV reembolso"));

                                                                "Liquidado GV" := TRUE;
                                                                "Fecha Liquidacion reembolso GV" := TODAY;
                                                              END;

                                                   CaptionML=[ENU=Refund SG settlement No.;
                                                              ESP=N§ liquidacion GV reembolso];
                                                   Description="Liquidacion Guia venta"."N§ Liquidacion" WHERE (Guia Venta=FIELD(Guia Venta)) }
    { 155 ;   ;Comentarios Reembolso;Text80       ;CaptionML=[ENU=Refund comments;
                                                              ESP=Comentarios Reembolso] }
    { 157 ;   ;Fecha Liquidacion GV;Date          ;CaptionML=[ENU=SG settlement date;
                                                              ESP=Fecha Liquidacion GV] }
    { 159 ;   ;Fecha Liquidacion reembolso GV;Date;CaptionML=[ENU=SG Refund settlement date;
                                                              ESP=Fecha Liquidacion reembolso GV] }
    { 173 ;   ;Reembolsada         ;Boolean       ;OnValidate=BEGIN
                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva, FIELDCAPTION(Reembolsada),
                                                                               FORMAT(xRec.Reembolsada), FORMAT(Reembolsada));
                                                              END;

                                                   CaptionML=[ENU=Refunded;
                                                              ESP=Reembolsada] }
    { 175 ;   ;Ingreso reserva neto;Decimal       ;CaptionML=[ENU=Net booking income;
                                                              ESP=Ingreso reserva neto];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 177 ;   ;Ingreso comisionable neto;Decimal  ;CaptionML=[ENU=Net commissionable income;
                                                              ESP=Ingreso comisionable neto];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 178 ;   ;Ingreso adulto neto ;Decimal       ;CaptionML=[ENU=Net Adult income;
                                                              ESP=Ingreso adulto neto];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 179 ;   ;Ingreso ni¤o neto   ;Decimal       ;CaptionML=[ENU=Net Child income;
                                                              ESP=Ingreso ni¤o neto];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=Divisa }
    { 180 ;   ;Fecha cambio        ;Date          ;OnValidate=VAR
                                                                lrCobro@1100217000 : Record 7010240;
                                                              BEGIN

                                                                //-$015"Tipo cambio" := TipoCambioDivisa("Fecha cambio", FALSE);

                                                                //+$015
                                                                _UltimaFechaCambio;
                                                                "Tipo cambio" := TipoCambioDivisa;
                                                                //+$015

                                                                lrCobro.RESET;
                                                                lrCobro.SETRANGE(Delegacion   , Delegacion);
                                                                lrCobro.SETRANGE("Num Reserva", "N§ Reserva");
                                                                IF lrCobro.FINDSET THEN
                                                                BEGIN
                                                                  REPEAT
                                                                    lrCobro."Fecha cambio cobro" := "Fecha cambio";
                                                                    lrCobro.CALCFIELDS("Cod. Divisa Reserva");
                                                                    lrCobro.SetImpDivResv;
                                                                    lrCobro.MODIFY;
                                                                  UNTIL lrCobro.NEXT = 0;
                                                                END;

                                                                // JPT 29/12/10 CAR-10002
                                                                // rCobro.ActualizaCobroReserva(Rec); // $034

                                                                rHis.NewRecord(Delegacion, "N§ Reserva",  rHis."Tipo Registro"::Reserva, FIELDCAPTION("Fecha cambio"),
                                                                               FORMAT(xRec."Fecha cambio"), FORMAT("Fecha cambio"));
                                                              END;

                                                   CaptionML=[ENU=Exchange rate date;
                                                              ESP=Fecha cambio] }
    { 181 ;   ;Tipo cambio         ;Decimal       ;CaptionML=[ENU=Currency exchange rate;
                                                              ESP=Tipo cambio] }
    { 182 ;   ;N§ Proforma         ;Code20        ;TableRelation="Cabecera Proforma"."Num. Proforma";
                                                   CaptionML=[ENU=Pro-forma No.;
                                                              ESP=N§ Proforma] }
    { 200 ;   ;Num. Prefactura     ;Code20        ;OnValidate=BEGIN
                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva,
                                                                               FIELDCAPTION("Num. Prefactura"), xRec."Num. Prefactura",
                                                                               "Num. Prefactura");
                                                              END;

                                                   CaptionML=[ENU=Pro-forma No.;
                                                              ESP=Num. Prefactura] }
    { 210 ;   ;Num. Factura        ;Code20        ;OnValidate=BEGIN
                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva,
                                                                               FIELDCAPTION("Num. Factura"), xRec."Num. Factura",
                                                                               "Num. Factura");
                                                              END;

                                                   CaptionML=[ENU=Invoice No.;
                                                              ESP=Num. Factura] }
    { 220 ;   ;Facturada           ;Boolean       ;CaptionML=[ENU=Invoiced;
                                                              ESP=Facturada] }
    { 230 ;   ;Adultos Reembolsados;Decimal       ;FieldClass=Normal;
                                                   CaptionML=[ENU=Refunded Adults;
                                                              ESP=Adultos Reembolsados];
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 240 ;   ;Ni¤os Reembolsados  ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=[ENU=Refunded Children;
                                                              ESP=Ni¤os Reembolsados];
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 241 ;   ;Confirmacion proveedor;Code20      ;OnValidate=BEGIN
                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva,
                                                                               FIELDCAPTION("Confirmacion proveedor"), xRec."Confirmacion proveedor",
                                                                               "Confirmacion proveedor");
                                                              END;

                                                   CaptionML=[ENU=Supplier confirmation;
                                                              ESP=Confirmacion proveedor];
                                                   Description=$029 }
    { 242 ;   ;Num. abono reembolso;Code20        ;OnValidate=BEGIN
                                                                rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva,
                                                                               FIELDCAPTION("Num. abono reembolso"), xRec."Num. abono reembolso",
                                                                               "Num. abono reembolso");
                                                              END;

                                                   CaptionML=[ENU=Refund Credit memo No.;
                                                              ESP=Num. abono reembolso];
                                                   Description=$036 }
    { 243 ;   ;Cobros con problemas;Boolean       ;OnValidate=BEGIN
                                                                IF Anulada OR Reembolsada OR "Liquidado GV" THEN
                                                                  ERROR(Text042);
                                                              END;

                                                   CaptionML=[ENU=Problems in payment;
                                                              ESP=Cobros con problemas];
                                                   Description=$037, permite marcar una reserva que temporalmente no queremos liquidar }
    { 244 ;   ;Importe cobros      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cobro reserva excursion"."Importe Divisa Reserva" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                             Num Reserva=FIELD(N§ Reserva)));
                                                   CaptionML=[ENU=Payments Amount;
                                                              ESP=Importe cobros];
                                                   Editable=No }
    { 245 ;   ;Reserva online      ;Boolean       ;CaptionML=[ENU=Online reservation;
                                                              ESP=Reserva online] }
    { 246 ;   ;Coste Reserva       ;Decimal       ;CaptionML=[ENU=Cost Reservation;
                                                              ESP=Coste Reserva] }
    { 247 ;   ;Num. Vehiculos      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Num. Vehiculos" <> xRec."Num. Vehiculos" THEN
                                                                BEGIN
                                                                  IF (NOT rExc.CheckVentaVehiculo(Producto)) AND ("Num. Vehiculos" <> 0) THEN
                                                                    ERROR(Text047);

                                                                  CheckFueraCupo(TRUE,TRUE); //+$074

                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva,
                                                                                 FIELDCAPTION("Num. Vehiculos"), FORMAT(xRec."Num. Vehiculos"),
                                                                                 FORMAT("Num. Vehiculos")
                                                                                );
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Vehicles No.;
                                                              ESP=Num. Vehiculos];
                                                   DecimalPlaces=0:0;
                                                   MinValue=0;
                                                   MaxValue=50;
                                                   Description=$074, Algunas excursiones se venden por unidades de vehiculos (buggies) }
    { 248 ;   ;No comisionable     ;Boolean       ;OnValidate=BEGIN
                                                                //$075
                                                                IF ("No comisionable" <> xRec."No comisionable") THEN BEGIN
                                                                   // . Registrar en historico.
                                                                  rHis.NewRecord(Delegacion, "N§ Reserva", rHis."Tipo Registro"::Reserva,
                                                                                 FIELDCAPTION("No comisionable"), FORMAT(xRec."No comisionable"),
                                                                                 FORMAT("No comisionable"));
                                                                END;
                                                                comprobar_servicio("N§ Servicio", TRUE, TRUE);
                                                              END;

                                                   CaptionML=[ENU=Don't apply commission;
                                                              ESP=No comisionable] }
    { 249 ;   ;Vehiculos Reembolsados;Decimal     ;FieldClass=Normal;
                                                   CaptionML=[ENU=Refund Vehicles;
                                                              ESP=Vehiculos Reembolsados];
                                                   Editable=No }
    { 250 ;   ;Personas Reembolsadas;Decimal      ;CaptionML=[ENU=Refund People;
                                                              ESP=Personas Reembolsadas];
                                                   Editable=No }
    { 252 ;   ;Importe Reembolsado ;Decimal       ;OnLookup=VAR
                                                              lfConsulta@1000000001 : Form 7010240;
                                                              lrReemb@1000000000 : Record 7010266;
                                                            BEGIN
                                                              lrReemb.RESET;
                                                              lrReemb.FILTERGROUP(2);
                                                              lrReemb.SETRANGE(Delegacion   , Delegacion);
                                                              lrReemb.SETRANGE("Num Reserva", "N§ Reserva");
                                                              lrReemb.FILTERGROUP(0);

                                                              CLEAR(lfConsulta);
                                                              lfConsulta.SETTABLEVIEW(lrReemb);
                                                              lfConsulta.RUN;
                                                            END;

                                                   CaptionML=[ENU=Refund amount;
                                                              ESP=Importe Reembolsado] }
    { 254 ;   ;Importe Reembolsado Neto;Decimal   ;CaptionML=[ENU=Refund net amount;
                                                              ESP=Importe Reembolsado Neto] }
    { 256 ;   ;Importe reembolsado adultos;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reserva ex - Reembolso"."Importe Adulto divisa reserva" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                                   Num Reserva=FIELD(N§ Reserva)));
                                                   CaptionML=[ENU=Adults refund amount;
                                                              ESP=Importe reembolsado adultos] }
    { 268 ;   ;Importe neto reemb adultos;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reserva ex - Reembolso"."Importe neto adulto div rsv" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                                 Num Reserva=FIELD(N§ Reserva)));
                                                   CaptionML=[ENU=Adults refund net amount;
                                                              ESP=Importe neto reemb adultos] }
    { 270 ;   ;Importe reembolsado ni¤os;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reserva ex - Reembolso"."Importe ni¤os divisa reserva" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                                  Num Reserva=FIELD(N§ Reserva)));
                                                   CaptionML=[ENU=Childs refund amount;
                                                              ESP=Importe reembolsado ni¤os] }
    { 272 ;   ;Importe neto reemb ni¤os;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reserva ex - Reembolso"."Importe neto ni¤os div rsv" WHERE (Delegacion=FIELD(Delegacion),
                                                                                                                                Num Reserva=FIELD(N§ Reserva)));
                                                   CaptionML=[ENU=Childs refund net amount;
                                                              ESP=Importe neto reemb ni¤os] }
    { 280 ;   ;User Type           ;Text30        ;CaptionML=[ENU=User Type;
                                                              ESP=Tipo usuario] }
    { 282 ;   ;User Id             ;Text30        ;CaptionML=[ENU=External User ID;
                                                              ESP=ID Usuario externo] }
    { 284 ;   ;Voucher Discount No ;Text30        ;CaptionML=[ENU=Voucher Discount No;
                                                              ESP=Numero Voucher descuento] }
    { 286 ;   ;Pendiente asignar turno;Boolean    ;CaptionML=[ENU=Pending to assign turn;
                                                              ESP=Pendiente asignar turno] }
    { 288 ;   ;Canal venta         ;Code20        ;TableRelation="Canal venta";
                                                   CaptionML=[ENU=Sale channel;
                                                              ESP=Canal venta];
                                                   NotBlank=Yes;
                                                   Description=$084 }
    { 290 ;   ;Email contacto      ;Text80        ;CaptionML=[ENU=Contact email;
                                                              ESP=Email contacto] }
    { 292 ;   ;Calculo bloqueado   ;Boolean       ;CaptionML=[ENU=Calculation blocked;
                                                              ESP=C lculo bloqueado] }
    { 294 ;   ;Voucher printed     ;Boolean        }
  }
  KEYS
  {
    {    ;Delegacion,N§ Reserva                   ;SumIndexFields=N§ Personas,Ingreso reserva,Ingreso comisionable,Adultos,Ni¤os,Venta - Invitados Adultos,Venta - Invitados ni¤os,Ingreso comisionable neto,Ingreso reserva neto;
                                                   KeyGroups=RENUMERING;
                                                   Clustered=Yes }
    {    ;N§ Servicio,TourOperador,Zona Hotel,Guia Venta;
                                                   SumIndexFields=Ingreso reserva,Ingreso comisionable,N§ Personas,Adultos,Ni¤os,Ingreso Adulto,Ingreso Ni¤o,Ingreso reserva neto,Ingreso comisionable neto;
                                                   KeyGroups=RENUMERING }
    {    ;N§ Servicio,Liquidado GV,Guia Venta,TourOperador,Fecha Excursion;
                                                   SumIndexFields=N§ Personas,Ingreso reserva,Ingreso comisionable,Adultos,Ni¤os,Venta - Invitados Adultos,Venta - Invitados ni¤os,Ingreso reserva neto,Ingreso comisionable neto;
                                                   KeyGroups=RENUMERING }
    {    ;N§ Ticket                               ;SumIndexFields=N§ Personas,Ingreso reserva,Ingreso comisionable,Adultos,Ni¤os,Venta - Invitados Adultos,Venta - Invitados ni¤os,Ingreso reserva neto,Ingreso comisionable neto,Compra - Invitados Adultos,Compra - Invitados ni¤os;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha Excursion,N§ Servicio,Orden zona,Orden hotel,Hotel Cliente;
                                                   KeyGroups=RENUMERING }
    {    ;N§ Servicio,Liquidado GV,Guia Venta,Fecha Excursion,N§ Reserva;
                                                   SumIndexFields=Ingreso reserva,Ingreso comisionable,Ingreso reserva neto,Ingreso comisionable neto;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha Excursion,Producto,Zona Hotel,Hotel Cliente,TourOperador,N§ Servicio,N§ Ticket,Anulada,Reembolsada;
                                                   SumIndexFields=Adultos,Ni¤os,Bebes,N§ Personas,Venta - Invitados Adultos,Venta - Invitados ni¤os,Compra - Invitados Adultos,Compra - Invitados ni¤os;
                                                   KeyGroups=RENUMERING }
    {    ;TourOperador,Fecha Excursion,Producto,Zona Servicio;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha Excursion,Producto,Hora Recogida,Hotel Cliente;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha Excursion,Producto,Zona Hotel,N§ Servicio;
                                                   SumIndexFields=Adultos,Ni¤os,Bebes,Venta - Invitados Adultos,Venta - Invitados ni¤os,Compra - Invitados Adultos,Compra - Invitados ni¤os;
                                                   KeyGroups=RENUMERING }
    {    ;Guia Venta,Fecha Excursion,Liquidado GV,Producto,Zona Hotel,Precio Adulto,Precio Ni¤o,N§ liquidacion GV,N§ liquidacion GV reembolso;
                                                   KeyGroups=RENUMERING }
    {    ;TourOperador,Guia Venta,Fecha Excursion ;KeyGroups=RENUMERING }
    {    ;Fecha Excursion,N§ Servicio,Hora Recogida,Orden hotel;
                                                   KeyGroups=RENUMERING }
    {    ;Delegacion,Fecha Excursion,Producto,Turno Excursion;
                                                   SumIndexFields=N§ Personas,Ingreso reserva,Ingreso comisionable,Adultos,Ni¤os,Venta - Invitados Adultos,Venta - Invitados ni¤os,Ingreso reserva neto,Ingreso comisionable neto,Compra - Invitados Adultos,Compra - Invitados ni¤os;
                                                   KeyGroups=RENUMERING }
    {    ;Delegacion,N§ Interno,N§ Periodo        ;KeyGroups=RENUMERING }
    {    ;Guia Venta,N§ Ticket,Liquidado GV,N§ liquidacion GV,N§ liquidacion GV reembolso;
                                                   KeyGroups=RENUMERING }
    {    ;Delegacion,Zona Hotel,Producto,Fecha Excursion;
                                                   SumIndexFields=Adultos,Ni¤os,Bebes,Ingreso Adulto,Ingreso Ni¤o;
                                                   KeyGroups=RENUMERING }
    {    ;Delegacion,Guia Venta,Producto,Fecha Excursion;
                                                   SumIndexFields=Adultos,Ni¤os,Bebes,Ingreso Adulto,Ingreso Ni¤o;
                                                   KeyGroups=RENUMERING }
    {    ;N§ Servicio anulado                     ;KeyGroups=RENUMERING }
    {    ;Guia Venta,Fecha Venta,Confirmada       ;KeyGroups=RENUMERING }
    {    ;Num. Prefactura,Fecha Excursion         ;KeyGroups=RENUMERING }
    {    ;Num. Factura,Fecha Excursion            ;KeyGroups=RENUMERING }
    {    ;Oficina                                  }
    {    ;Guia Venta,Fecha Venta,N§ Ticket         }
    {    ;Producto,TourOperador,Guia Venta,Oficina,Fecha Excursion,Fecha Venta,Anulada,Reembolsada,Turno Excursion;
                                                   SumIndexFields=Adultos,Ni¤os,N§ Personas,Ingreso reserva,Ingreso reserva neto,Comision Guia Venta,Comision Touroperador,Num. Vehiculos,Personas Reembolsadas,Vehiculos Reembolsados }
    {    ;Fecha Excursion,Producto,Turno Excursion,N§ Servicio,Anulada,Reembolsada;
                                                   SumIndexFields=Adultos,Ni¤os,N§ Personas,Venta - Invitados Adultos,Venta - Invitados ni¤os }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1103355011 : TextConst 'ENU=This booking si confirmed. Unable to modify confirmed bookings.;ESP=Esta reserva est  confirmada. No se pueden modificar reservas confirmadas.';
      Text001@1103355012 : TextConst 'ENU=This booking is already settled. Unable to modify settled bookings.;ESP=Esta reserva est  liquidada. No se pueden modificar reservas liquidadas.';
      Text002@1103355013 : TextConst 'ENU=Ticket already exists, Date %1 and Product %2 with Booking No. %3.;ESP=Este ticket ya existe, Fecha %1 y Producto %2 con N§ Reserva %3.';
      Text003@1103355014 : TextConst 'ENU=Booking is confirmed. Unable to delete confirmed bookings;ESP=Esta reserva est  confirmada. No se pueden eliminar reservas confirmadas.';
      Text004@1103355015 : TextConst 'ENU=Ticket has been cancellled;ESP=Se ha anulado el ticket';
      Text005@1103355016 : TextConst 'ENU="Service %1 has been deleted ";ESP=Se ha borrado el servicio %1';
      Text006@1103355017 : TextConst 'ENU=Data does not exist in the parameters folder of the local office;ESP=No existe informaci¢n en el fichero de parametros de la delegacion.';
      Text007@1103355018 : TextConst 'ENU=All;ESP=Todos';
      Text008@1103355019 : TextConst 'ENU=Booking;ESP=Reserva';
      Text009@1103355020 : TextConst 'ENU=Deleted;ESP=Borrada';
      Text010@1103355021 : TextConst 'ENU=Unable to change the product of a booking associated to one service.;ESP=No se puede cambiar el producto a una reserva asignada a un servicio.';
      Text011@1103355022 : TextConst 'ENU=Unable to change the date of a booking associated to one service.;ESP=No se puede cambiar la fecha a una reserva asignada a un servicio.';
      Text012@1103355023 : TextConst 'ENU=Hotel %1 does not have pick up time for the excursion %2;ESP=El hotel %1 No tiene hora de recogida para la excursion %2';
      Text013@1103355024 : TextConst 'ENU=Unable to indicate ticket No. when the touroperator has not been indicated.;ESP=No se puede indicar un n§ de ticket si no se ha indicado Touroperador.';
      Text014@1103355025 : TextConst 'ENU=Booking touroperator is not the same as the assigned one in the checkbook;ESP=El TourOperador de la reserva no es el mismo que el asignado al tal¢n';
      Text015@1103355026 : TextConst 'ENU=Wrong ticket, review the ticket digits.;ESP=Ticket erroneo, revise los digitos del ticket';
      Text016@1103355027 : TextConst 'ENU=Checkbook is not active or it is not assigned to any day;ESP=El talonario no est  activo o no est  asignado a ning£n gu¡a';
      Text017@1103355028 : TextConst 'ENU=Unable to indicate more guests than real adults;ESP=No puede indicar mas invitados que adultos reales.';
      Text018@1103355029 : TextConst 'ENU=Change all pick up points of Hotel %1 to a new pick up point;ESP=Cambiar todos los puntos recogida del hotel %1 al nuevo punto recogida';
      Text019@1103355030 : TextConst 'ENU=Would you like to change the picking up time of the bookings of hotel %1?;ESP=Desea cambiar la hora de recogida de las reservas del hotel %1';
      Text020@1103355031 : TextConst 'ENU=New service was not found;ESP=Nuevo servicio no encontrado';
      Text021@1103355032 : TextConst 'ENU=Service corresponds to another excursion;ESP=El servicio corresponde a otra excursion.';
      Text022@1103355033 : TextConst 'ENU=Service corresponds to another day;ESP=El servicio corresponde a otro dia.';
      Text024@1103355035 : TextConst 'ENU=Hotel %1 booking does not exist;ESP=La reserva de hotel %1 no existe';
      Text025@1103355036 : TextConst 'ENU=This change affects on the settlement and invoicing mode of this ticket, continue?;ESP=Este cambio afecta al modo en que se liquida y factura este ticket, desea continuar';
      Text026@1103355037 : TextConst 'ENU=Unable to indicate more guests than real children;ESP=No puede indicar mas invitados que ni¤os reales.';
      Text027@1103355038 : TextConst 'ENU=Unable to indicate a refund higher than the booking amount;ESP=No es posible indicar un reembolso mayor que el importe de la reserva.';
      Text028@1103355039 : TextConst 'ENU=Unable to indicate a commissionable refund higher than the total amount;ESP=No es posible indicar un reembolso comisionable mayor que el importe total.';
      Text029@1103355040 : TextConst 'ENU=Service No. %1 does not exist;ESP=No existe el servicio n§ %1';
      Text030@1103355041 : TextConst 'ENU=An associated line of Cost/Income to this service has already been validated or invoiced;ESP=Alguna linea de Coste/Ingreso asociada a este servicio ya ha sido validada o facturada';
      Text031@1103355042 : TextConst 'ENU=Settled booking cannot be modified;ESP=No se puede modificar una reserva ya liquidada.';
      Text033@1103355044 : TextConst 'ENU=Account folder for Local Office %1 and T.O. %2 does not exist;ESP=No existe el fichero de cuentas para la Delegacion %1 y T.O. %2.';
      rPar@1103355000 : Record 7009700;
      rParPer@1103355001 : Record 7009701;
      rHis@1100253019 : Record 7010255;
      rServExc@1100253018 : Record 7010163;
      rCamb@1100253016 : Record 330;
      rZonFis@1100253014 : Record 7009713;
      rCobro@1100253012 : Record 7010240;
      rDetEco@1100253001 : Record 7010245;
      rExc@1100253020 : Record 7009710;
      rUsuario@1100217005 : Record 91;
      rDatIns@1100217007 : Record 7009768;
      cFun@1103355003 : Codeunit 7010141;
      cProf@1103355045 : Codeunit 7009902;
      Text034@1100253000 : TextConst 'ENU=Assigned sale guide to Hotel (%1) does not match with the guide of the booking (%2);ESP=El Guia de venta asignado al hotel (%1) no coincide con el guia de la reserva (%2)';
      Text035@1100253002 : TextConst 'ENU=Unable to edit the data of a booking assigned to a service.;ESP=No se puede editar la informacion de una reserva asignada a un servicio.';
      Text036@1100253003 : TextConst 'ENU=Booking %1 does not have an assigned collection;ESP=La reserva %1 No tiene Cobro Asignado';
      cFunSeg@1000000003 : Codeunit 7009751;
      wBaseReserva@1100253005 : Decimal;
      wBaseComisionable@1100253006 : Decimal;
      wBaseAdultos@1100253007 : Decimal;
      wBaseNi¤os@1100253008 : Decimal;
      wPrecioBaseAd@1100253009 : Decimal;
      wPrecioBaseNi@1100253010 : Decimal;
      Text037@1100253011 : TextConst 'ENU=The Guide %1 is not allowed to sell at touroperator %2;ESP=El Guia %1 No est  autorizado a trabajar con el Touroperador %2';
      ok@1100253013 : Boolean;
      Text038@1100253021 : TextConst 'ENU=There''s no provider confirmation in Ticket %1;ESP=El Ticket %1 No tiene numero de confirmaci¢n de proveedor.';
      Text039@1100253022 : TextConst 'ENU=New;ESP=Nueva';
      Text040@1100217000 : TextConst 'ENU=The sum of payments (%1) can not be less than the amount of the reservation (%2);ESP=En el ticket %1. La suma de cobros (%2) no puede ser inferior al importe de la reserva (%3)';
      Text041@1100217001 : TextConst 'ENU=Tickets must be entered in sequence.;ESP=Los tickets deben introducirse siguiendo la secuencia.';
      Text042@1100217002 : TextConst 'ENU=This reservation cannot be marked.;ESP=No se puede marcar esta reserva.';
      Text043@1100217003 : TextConst 'ENU=The excursion %1 is not scheduled in this day;ESP=La excursion %1 no esta programada para este dia';
      Text044@1100217004 : TextConst 'ENU=This reservation already have a ticket (%1) are you sure to change to ticket (%2);ESP=Este reserva ya tiene indicando un ticket (%1) esta seguro de cambiar al ticket (%2)';
      Text045@1100217006 : TextConst 'ENU=The date is prior to the workdate, confirms that it is correct.;ESP=La fecha introducida es anterior a la fecha de trabajo, confirma que es correcta.';
      Text046@1100217008 : TextConst 'ENU=You can''t delete a reservation with ticket number.;ESP=No se puede borrar una reserva con numero de ticket asignado.';
      Text047@1100217009 : TextConst 'ENU=This excursion is not sold by number of vehicles.;ESP=Esta excursion no se vende por numero de vehiculos.';
      Text048@1100217010 : TextConst 'ENU=Reservation out of allotment.;ESP=Reserva fuera de cupo.';
      Text049@1000000000 : TextConst 'ENU=You must select previously Excursion and Excursion date.;ESP=Debe seleccionar previamente Excursi¢n y Fecha excursi¢n.';
      Text050@1000000001 : TextConst 'ENU=The turn selected is not active for the date.;ESP=El turno seleccionado no est  activo para la fecha.';
      Text051@1000000002 : TextConst 'ENU=You must select a turn.;ESP=Debe seleccionar un turno.';
      Text052@1000000004 : TextConst 'ENU=The reservation does not meet the release conditions.;ESP=La reserva no cumple las condiciones de release.';
      Text053@1000000005 : TextConst 'ENU=Selected language %1 is not allowed in this turn for the selected excursion.;ESP=El idioma indicado %1 no se permite en este turno de la excursi¢n seleccionada.';
      Text054@1000000006 : TextConst 'ENU=The Guide %1 is not allowed to pay cash.;ESP=El Guia %1 No est  autorizado a trabajar a contado.';

    PROCEDURE comprobar_servicio@7(pw_servicio@1103355000 : Integer;pw_comprobar_liquidada@1103355001 : Boolean;pwRecalcular@1100217000 : Boolean);
    VAR
      rReserva@1103355002 : Record 7010162;
      lrCoste@1100217001 : Record 7010166;
    BEGIN
      // comprobar_servicio

      //. Datos basicos
      IF ("Fecha Excursion" = 0D) OR
         (Producto = '' ) OR
         ("Hotel Cliente" = '') OR
         ( (Adultos = 0) AND (Ni¤os = 0) ) OR
         ("Guia Venta" = '') THEN
        EXIT;

      IF pw_servicio <> 0 THEN
      BEGIN
        IF NOT rServExc.GET(Delegacion, pw_servicio) THEN
          ERROR(Text029, pw_servicio);

        lrCoste.RESET;
        lrCoste.SETRANGE (Delegacion   , Delegacion);
        lrCoste.SETRANGE ("N§ Servicio", pw_servicio);
        lrCoste.SETFILTER("N§ Factura" , '<>%1', '');
        IF lrCoste.FINDSET THEN
          ERROR(Text030);

        rServExc."Pendiente Recalcular" := TRUE;
        rServExc.MODIFY;
      END;

      IF pw_comprobar_liquidada THEN
        IF "N§ liquidacion GV" <> 0 THEN
          ERROR(Text031);

      IF Anulada OR Reembolsada THEN
        EXIT;

      IF pwRecalcular THEN
        calcular_reserva(FALSE);
    END;

    PROCEDURE borra_suplementos@12();
    VAR
      rSuplemento@1103355000 : Record 7010165;
    BEGIN
      // borra_suplementos

      IF "N§ Reserva" = 0 THEN
        EXIT;

      rSuplemento.RESET;
      rSuplemento.SETRANGE(Delegacion  , Delegacion);
      rSuplemento.SETRANGE("N§ Reserva", "N§ Reserva");
      rSuplemento.SETRANGE(Automatico  , TRUE);
      IF rSuplemento.FINDSET(TRUE) THEN
        rSuplemento.DELETEALL(TRUE);
    END;

    PROCEDURE crea_suplementos@13();
    VAR
      rSuplemento@1103355000 : Record 7010165;
      rTarifa@1103355001 : Record 7010147;
      rSuplementoTarifa@1103355002 : Record 7010148;
      rSuplTar@1103355003 : Record 7010143;
    BEGIN
      // crea_suplementos

      IF "N§ Reserva" = 0 THEN
        EXIT;

      TESTFIELD(Producto);
      TESTFIELD("Fecha Excursion");

      IF busca_tarifa(rTarifa) THEN
      BEGIN
        rPar.FINDFIRST; //+$071

        rSuplementoTarifa.RESET;
        rSuplementoTarifa.SETCURRENTKEY(Delegacion,
                                        "Tipo precio",
                                        Excursion,
                                        "Temporada Tarifa",
                                        Codigo,
                                        "Fecha Desde",
                                        "Fecha Hasta");
        rSuplementoTarifa.SETRANGE (Delegacion        , Delegacion);
        rSuplementoTarifa.SETRANGE (Excursion         , Producto);
        rSuplementoTarifa.SETRANGE ("Temporada Tarifa", rTarifa.Temporada);
        rSuplementoTarifa.SETRANGE ("ID Tarifa"       , rTarifa."ID Tarifa"); //+$049
        rSuplementoTarifa.SETRANGE ("Tipo precio"     , rSuplementoTarifa."Tipo precio"::"Suplemento Varios");
        //+$071 <
        IF rPar."Busca tarifa por fecha venta" THEN
        BEGIN
          rSuplementoTarifa.SETFILTER("Fecha Desde"     , '<=%1', "Fecha Venta");
          rSuplementoTarifa.SETFILTER("Fecha Hasta"     , '>=%1', "Fecha Venta");
        END
        ELSE
        BEGIN
          rSuplementoTarifa.SETFILTER("Fecha Desde"     , '<=%1', "Fecha Excursion");
          rSuplementoTarifa.SETFILTER("Fecha Hasta"     , '>=%1', "Fecha Excursion");
        END;
        //+$071 >
        rSuplementoTarifa.SETRANGE (Automatico        , TRUE);
        rSuplementoTarifa.SETRANGE (Activo            , TRUE);
        IF rSuplementoTarifa.FINDSET THEN
        BEGIN
          REPEAT
            rSuplemento.INIT;
            rSuplemento.Delegacion          := Delegacion;
            rSuplemento."N§ Reserva"        := "N§ Reserva";
            rSuplemento."Codigo Suplemento" := rSuplementoTarifa.Codigo;
            rSuplemento.Aplicacion          := TRUE;
            //-$109rSuplemento.Cantidad            := "N§ Personas";
            rSuplemento.Adultos             := Adultos;
            rSuplemento.Ni¤os               := Ni¤os;
            rSuplemento.Automatico          := TRUE;
            rSuplemento."Mostrar en hoja servicio" := rSuplementoTarifa."Mostrar en hoja servicio";
            rSuplemento.INSERT;
          UNTIL rSuplementoTarifa.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE calcula_personas@18() : Decimal;
    BEGIN
      // Calcula_Personas

      EXIT(Adultos + Ni¤os);
    END;

    PROCEDURE comprobar_hoja@1();
    VAR
      rHojaExc@1103355000 : Record 7010168;
    BEGIN
      IF (Producto <> '') AND ("Fecha Excursion" <> 0D) THEN
      BEGIN
        IF NOT rHojaExc.GET(Delegacion, "Fecha Excursion", Producto, "Turno Excursion") THEN
        BEGIN
          rHojaExc.INIT;
          rHojaExc.VALIDATE(Delegacion, Delegacion);
          rHojaExc.VALIDATE(Fecha     , "Fecha Excursion");
          rHojaExc.VALIDATE(Producto  , Producto);
          rHojaExc.VALIDATE(Turno     , "Turno Excursion");
          rHojaExc.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE calcular_reserva@2(prSimulacion@1000000000 : Boolean) : Decimal;
    VAR
      rTarifa@1103355000 : Record 7010147;
      lrICD@1100217002 : Record 7010264;
      lcCosteTicket@1100217001 : Codeunit 7010170;
      lwIngresoAnterior@1100217000 : Decimal;
    BEGIN
      // calcular_reserva

      IF "Calculo bloqueado" THEN // +$103
       EXIT;

      //$014
      IF (Producto = '') OR
         ("Fecha Excursion" = 0D) OR
         ("Hotel Cliente" = '') OR
         (TourOperador = '') OR
         ( (Adultos = 0) AND (Ni¤os = 0) ) THEN
        EXIT;

      //$005
      //IF Anulada OR Reembolsada THEN       -$076
      IF Anulada THEN
        EXIT;

      //+$028
      IF NOT rDetEco.GET(Delegacion, "N§ Reserva") THEN
      BEGIN
        rDetEco.Delegacion     := Delegacion;
        rDetEco."Num. Reserva" := "N§ Reserva";
        rDetEco."Cod. Divisa"  := Divisa; //+$053
        rDetEco."Guia Venta"   := "Guia Venta";  //+$054
        rDetEco."Fecha venta"  := "Fecha Venta"; //+$054
        rDetEco.INSERT
      END
      ELSE
      BEGIN
        rDetEco.INIT;
        rDetEco."Cod. Divisa"  := Divisa; //+$053
        rDetEco."Guia Venta"   := "Guia Venta";  //+$054
        rDetEco."Fecha venta"  := "Fecha Venta"; //+$054
        rDetEco.MODIFY;
      END;
      //+$028

      // $032
      rDetEco."Free Adultos" := "Venta - Invitados Adultos";
      rDetEco."Free Ni¤os"   := "Venta - Invitados ni¤os";

      //+$024
      wBaseReserva      := 0;
      wBaseComisionable := 0;
      wBaseAdultos      := 0;
      wBaseNi¤os        := 0;
      wPrecioBaseAd     := 0;
      wPrecioBaseNi     := 0;
      //+$024

      lwIngresoAnterior := "Ingreso reserva"; //+$040

      "Ingreso reserva"      := 0;
      "Ingreso comisionable" := 0;
      "Ingreso Adulto"       := 0;
      "Ingreso Ni¤o"         := 0;

      "Precio Adulto"        := 0;
      "Precio Ni¤o"          := 0;

      //+$003
      "Ingreso reserva neto"      := 0;
      "Ingreso comisionable neto" := 0;
      "Ingreso adulto neto"       := 0;
      "Ingreso ni¤o neto"         := 0;
      //-$003

      rParPer.FINDFIRST;
      IF busca_tarifa(rTarifa) THEN
      BEGIN
        //-$053rDetEco."Cod. Divisa" := rTarifa."o_C¢d. divisa"; //+$028

        // Rellenar la divisa con la que viene de la tarifa y la fecha de cambio solo la primera vez

        //-$053Divisa := rTarifa."o_C¢d. divisa";

        //-$015IF "Fecha cambio" = 0D THEN
        //-$015  "Tipo cambio" := TipoCambioDivisa("Fecha cambio", TRUE);

        //+$015
        //-$053_UltimaFechaCambio;
        //-$053"Tipo cambio" := TipoCambioDivisa;
        //+$015

        busca_zona_venta(rTarifa);
        busca_precio_base(rTarifa);
        busca_suplemento_zona(rTarifa);
        busca_oferta_online;
        busca_suplemento_vario(rTarifa, prSimulacion);

        IF prSimulacion THEN  // +$103
          EXIT("Ingreso reserva");

        busca_importes_netos(rTarifa);
      END;

      rDetEco.MODIFY; //+$028

      // JPT 29/12/10 CAR-10002

      calcula_comisionTO;
      calcula_comisionGV;

      //. Llamar a la funcion que calcula prevision de coste
      "Coste Reserva" := lcCosteTicket.CostePrevistoReserva(Rec);

      MODIFY; //$013

      IF lwIngresoAnterior <> "Ingreso reserva" THEN //+$040
        rCobro.ActualizaCobroReserva(Rec);

      //+$069
      //. Si estamos afectando a un periodo ya cerrado en ICDs marcamos el periodo
      lrICD.MarkPeriodExc("Fecha Excursion");
    END;

    PROCEDURE busca_tarifa@4(VAR prTar@1103355000 : Record 7010147) : Boolean;
    BEGIN
      // busca_tarifa

      rPar.FINDFIRST;

      //. Retorna la tarifa a aplicar a la reserva en funcion de fecha y producto.

      prTar.RESET;
      prTar.SETRANGE (Delegacion    , Delegacion);
      prTar.SETRANGE (Excursion      , Producto);
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        prTar.SETFILTER("Fecha Inicio", '<=%1', "Fecha Venta");
        prTar.SETFILTER("Fecha Final" , '>=%1', "Fecha Venta");
      END
      ELSE
      BEGIN
        prTar.SETFILTER("Fecha Inicio", '<=%1', "Fecha Excursion");
        prTar.SETFILTER("Fecha Final" , '>=%1', "Fecha Excursion");
      END;
      IF prTar.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE busca_zona_venta@9(prTar@1103355000 : Record 7010147);
    VAR
      rZonExcCon@1103355001 : Record 7010149;
    BEGIN
      // busca_zona_venta

      //. Encontrar la zona de precios de venta que corresponde a la zona fisica de la reserva
      //. en la tarifa.

      rZonExcCon.RESET;
      rZonExcCon.SETRANGE(Excursion, prTar.Excursion);
      rZonExcCon.SETRANGE("Codigo Contrato", prTar.Temporada);
      rZonExcCon.SETRANGE("Tipo Contrato"  , rZonExcCon."Tipo Contrato"::Venta);
      rZonExcCon.SETRANGE("Zona Fisica"    , "Zona Hotel");
      rZonExcCon.SETRANGE("ID Tarifa"      , prTar."ID Tarifa"); //+$049
      IF rZonExcCon.FINDFIRST THEN
        "Zona Venta" := rZonExcCon.Zona
      ELSE
        "Zona Venta" := '';
    END;

    PROCEDURE busca_precio_base@15(prTar@1103355000 : Record 7010147);
    VAR
      rPreVta@1103355001 : Record 7010148;
    BEGIN
      // busca_precio_base

      //. Encontrar el precio basico de la excursion para el adulto y los ni¤os.

      rPreVta.RESET;
      rPreVta.SETRANGE (Delegacion        , Delegacion);
      rPreVta.SETRANGE (Excursion         , prTar.Excursion);
      rPreVta.SETRANGE ("Temporada Tarifa", prTar.Temporada);
      rPreVta.SETRANGE ("ID Tarifa"       , prTar."ID Tarifa"); //+$049
      rPreVta.SETRANGE ("Tipo precio"     , rPreVta."Tipo precio"::"Precio Base");
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        rPreVta.SETFILTER("Fecha Desde"     , '<=%1', "Fecha Venta");
        rPreVta.SETFILTER("Fecha Hasta"     , '>=%1', "Fecha Venta");
      END
      ELSE
      BEGIN
        rPreVta.SETFILTER("Fecha Desde"     , '<=%1', "Fecha Excursion");
        rPreVta.SETFILTER("Fecha Hasta"     , '>=%1', "Fecha Excursion");
      END;
      rPreVta.SETRANGE (Codigo            , rParPer."Codigo Adulto");
      IF rPreVta.FINDFIRST THEN BEGIN
        "Precio Adulto"   := rPreVta.Precio;
        "Ingreso reserva" := rPreVta.Precio * (Adultos - "Venta - Invitados Adultos");

        wPrecioBaseAd := rPreVta.Precio - rPreVta."Precio exento"; //+$024
        wBaseReserva  := wPrecioBaseAd * (Adultos - "Venta - Invitados Adultos"); //+$024

        "Ingreso Adulto" := "Ingreso reserva";
        wBaseAdultos     := wBaseReserva; //+024

        //+$028
        rDetEco."Precio adulto"          := rPreVta.Precio;
        rDetEco."Precio adulto exento"   := rPreVta."Precio exento";
        rDetEco."Ingreso reserva"        := rPreVta.Precio * (Adultos - "Venta - Invitados Adultos");
        rDetEco."Ingreso exento"         := rPreVta."Precio exento" * (Adultos - "Venta - Invitados Adultos");
        rDetEco."Ingreso base"           := (rDetEco."Ingreso reserva" - rDetEco."Ingreso exento");

        rDetEco."Ingreso adultos"        := rPreVta.Precio * (Adultos - "Venta - Invitados Adultos");
        rDetEco."Ingreso adultos exento" := rPreVta."Precio exento" * (Adultos - "Venta - Invitados Adultos");
        rDetEco."Ingreso adultos base"   := (rDetEco."Ingreso reserva" - rDetEco."Ingreso exento");
        //+$028

        IF rPreVta.Comisionable THEN
        BEGIN
          "Ingreso comisionable" := "Ingreso reserva";
          wBaseComisionable      := wBaseReserva; //+$024
          //+$028
          rDetEco."Ingreso comisionable" := rDetEco."Ingreso reserva";
          rDetEco."Exento comisionable"  := rPreVta."Precio exento" * (Adultos - "Venta - Invitados Adultos");
          rDetEco."Base comisionable"    := (rDetEco."Ingreso reserva" - rDetEco."Ingreso exento");
          //+$028
        END;
      END;

      rPreVta.SETRANGE (Codigo, rParPer."Codigo Ni¤o");
      IF rPreVta.FINDFIRST THEN BEGIN
        "Precio Ni¤o"     := rPreVta.Precio;
        "Ingreso reserva" += rPreVta.Precio * (Ni¤os - "Venta - Invitados ni¤os");

        wPrecioBaseNi := rPreVta.Precio - rPreVta."Precio exento"; //+$024
        wBaseReserva  += wPrecioBaseNi * (Ni¤os - "Venta - Invitados ni¤os"); //+$024

        "Ingreso Ni¤o" := rPreVta.Precio * (Ni¤os - "Venta - Invitados ni¤os");
        wBaseNi¤os     := wPrecioBaseNi * (Ni¤os - "Venta - Invitados ni¤os"); //+$024

        //+$028
        rDetEco."Precio ni¤o"          := rPreVta.Precio;
        rDetEco."Precio ni¤o exento"   := rPreVta."Precio exento";
        rDetEco."Ingreso reserva"      += rPreVta.Precio * (Ni¤os - "Venta - Invitados ni¤os");
        rDetEco."Ingreso exento"       += rPreVta."Precio exento" * (Ni¤os - "Venta - Invitados ni¤os");
        rDetEco."Ingreso base"         += (rPreVta.Precio - rPreVta."Precio exento") * (Ni¤os - "Venta - Invitados ni¤os");

        rDetEco."Ingreso ni¤os"        := rPreVta.Precio * (Ni¤os - "Venta - Invitados ni¤os");
        rDetEco."Ingreso ni¤os exento" := rPreVta."Precio exento" * (Ni¤os - "Venta - Invitados ni¤os");
        rDetEco."Ingreso ni¤os base"   := (rPreVta.Precio - rPreVta."Precio exento") * (Ni¤os - "Venta - Invitados ni¤os");
        //+$028

        IF rPreVta.Comisionable THEN
        BEGIN
          "Ingreso comisionable" += rPreVta.Precio * (Ni¤os - "Venta - Invitados ni¤os");
          wBaseComisionable      += wPrecioBaseNi * (Ni¤os - "Venta - Invitados ni¤os"); //+$024
          //+$028
          rDetEco."Ingreso comisionable" += rPreVta.Precio * (Ni¤os - "Venta - Invitados ni¤os");
          rDetEco."Exento comisionable"  += rPreVta."Precio exento" * (Ni¤os - "Venta - Invitados ni¤os");
          rDetEco."Base comisionable"    += (rPreVta.Precio - rPreVta."Precio exento") * (Ni¤os - "Venta - Invitados ni¤os");
          //+$028
        END;
      END;
    END;

    PROCEDURE busca_suplemento_zona@27(prTar@1103355000 : Record 7010147);
    VAR
      rPreVta@1103355001 : Record 7010148;
      w_adultos@1103355002 : Integer;
      w_ni¤os@1103355003 : Integer;
      w_precioAdultoBase@1100253000 : Decimal;
      w_PrecioNi¤oBase@1100253001 : Decimal;
    BEGIN
      // busca_suplemento_zona

      w_adultos := Adultos - "Venta - Invitados Adultos";
      w_ni¤os   := Ni¤os - "Venta - Invitados ni¤os";

      rPreVta.RESET;
      rPreVta.SETRANGE (Delegacion        , Delegacion);
      rPreVta.SETRANGE (Excursion         , prTar.Excursion);
      rPreVta.SETRANGE ("Temporada Tarifa", prTar.Temporada);
      rPreVta.SETRANGE ("ID Tarifa"       , prTar."ID Tarifa"); //+$049
      rPreVta.SETRANGE ("Tipo precio"     , rPreVta."Tipo precio"::"Suplemento Zona");
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        rPreVta.SETFILTER("Fecha Desde"     , '<=%1', "Fecha Venta");
        rPreVta.SETFILTER("Fecha Hasta"     , '>=%1', "Fecha Venta");
      END
      ELSE
      BEGIN
        rPreVta.SETFILTER("Fecha Desde"     , '<=%1', "Fecha Excursion");
        rPreVta.SETFILTER("Fecha Hasta"     , '>=%1', "Fecha Excursion");
      END;
      rPreVta.SETRANGE(Codigo             , "Zona Venta");
      IF rPreVta.FINDFIRST THEN BEGIN
        w_precioAdultoBase := rPreVta."Precio Adulto" - rPreVta."Precio adulto exento"; //+$024
        w_PrecioNi¤oBase   := rPreVta."Precio Ni¤o" - rPreVta."Precio ni¤o exento"; //+$024

        "Ingreso reserva" += (rPreVta."Precio Adulto" * w_adultos) + (rPreVta."Precio Ni¤o" * w_ni¤os);
        wBaseReserva      += ((w_precioAdultoBase * w_adultos) + (w_PrecioNi¤oBase * w_ni¤os)); //+$024

        "Ingreso Adulto" += (rPreVta."Precio Adulto" * w_adultos);
        wBaseAdultos     += (w_precioAdultoBase * w_adultos); //+$024
        "Precio Adulto"  += rPreVta."Precio Adulto";
        wPrecioBaseAd    += w_precioAdultoBase; //+$024

        "Ingreso Ni¤o"   += (rPreVta."Precio Ni¤o" * w_ni¤os);
        wBaseNi¤os       += (w_PrecioNi¤oBase + w_ni¤os); //+$024
        "Precio Ni¤o"    += rPreVta."Precio Ni¤o";
        wPrecioBaseNi    += w_PrecioNi¤oBase; //+$024

        //+$028
        rDetEco."Ingreso reserva" += (rPreVta."Precio Adulto" * w_adultos) + (rPreVta."Precio Ni¤o" * w_ni¤os);
        rDetEco."Ingreso exento"  += (rPreVta."Precio adulto exento" * w_adultos) + (rPreVta."Precio ni¤o exento" * w_ni¤os);
        rDetEco."Ingreso base"    += (w_precioAdultoBase * w_adultos) + (w_PrecioNi¤oBase * w_ni¤os);

        rDetEco."Ingreso adultos"        += (rPreVta."Precio Adulto" * w_adultos);
        rDetEco."Ingreso adultos exento" += (rPreVta."Precio adulto exento" * w_adultos);
        rDetEco."Ingreso adultos base"   += (w_precioAdultoBase * w_adultos);
        rDetEco."Precio adulto"          += rPreVta."Precio Adulto";
        rDetEco."Precio adulto exento"   += rPreVta."Precio exento";

        rDetEco."Ingreso ni¤os"          += (rPreVta."Precio Ni¤o" * w_ni¤os);
        rDetEco."Ingreso ni¤os exento"   += (rPreVta."Precio ni¤o exento" * w_ni¤os);
        rDetEco."Ingreso ni¤os base"     += (w_PrecioNi¤oBase * w_ni¤os);
        rDetEco."Precio ni¤o"            += rPreVta."Precio Ni¤o";
        rDetEco."Precio ni¤o exento"     += rPreVta."Precio exento";
        //+$028

        IF rPreVta.Comisionable THEN
        BEGIN
          "Ingreso comisionable" += (rPreVta."Precio Adulto" * w_adultos) + (rPreVta."Precio Ni¤o" * w_ni¤os);
          wBaseComisionable      += (w_precioAdultoBase * w_adultos) + (w_PrecioNi¤oBase + w_ni¤os); //+$024

          rDetEco."Ingreso comisionable" += (rPreVta."Precio Adulto" * w_adultos) + (rPreVta."Precio Ni¤o" * w_ni¤os);
          rDetEco."Exento comisionable"  += (rPreVta."Precio adulto exento" * w_adultos) + (rPreVta."Precio ni¤o exento" * w_ni¤os);
          rDetEco."Base comisionable"    += (w_precioAdultoBase * w_adultos) + (w_PrecioNi¤oBase * w_ni¤os);
        END;
      END;
    END;

    PROCEDURE busca_suplemento_vario@3(prTar@1103355000 : Record 7010147;prSimulacion@1000000000 : Boolean);
    VAR
      rSupl@1103355001 : Record 7010165;
      rPreVta@1103355002 : Record 7010148;
      w_adultos@1103355003 : Integer;
      w_ni¤os@1103355004 : Integer;
    BEGIN
      // busca_suplemento_vario

      // Poner los rangos fijos de todo suplemento vario

      rPreVta.RESET;
      rPreVta.SETRANGE (Delegacion        , Delegacion);
      rPreVta.SETRANGE (Excursion         , prTar.Excursion);
      rPreVta.SETRANGE ("Temporada Tarifa", prTar.Temporada);
      rPreVta.SETRANGE ("ID Tarifa"       , prTar."ID Tarifa"); //+$049
      rPreVta.SETRANGE ("Tipo precio"     , rPreVta."Tipo precio"::"Suplemento Varios");
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        rPreVta.SETFILTER("Fecha Desde"     , '<=%1', "Fecha Venta");
        rPreVta.SETFILTER("Fecha Hasta"     , '>=%1', "Fecha Venta");
      END
      ELSE
      BEGIN
        rPreVta.SETFILTER("Fecha Desde"     , '<=%1', "Fecha Excursion");
        rPreVta.SETFILTER("Fecha Hasta"     , '>=%1', "Fecha Excursion");
      END;
      // Buscar los suplementos asociados a la reserva

      rSupl.SETRANGE(Delegacion  , Delegacion);
      rSupl.SETRANGE("N§ Reserva", "N§ Reserva");
      rSupl.SETRANGE(Aplicacion  , TRUE);
      IF rSupl.FINDSET THEN BEGIN
        REPEAT
          rPreVta.SETRANGE(Codigo, rSupl."Codigo Suplemento");
          IF rPreVta.FINDSET THEN
          BEGIN
            IF rPreVta."% Porcentaje" THEN
              aplica_suplemento_porcentaje(rPreVta, rSupl, prSimulacion)
            ELSE
              aplica_suplemento_importe(rPreVta, rSupl, prSimulacion);
          END;
        UNTIL rSupl.NEXT = 0;
      END;
    END;

    PROCEDURE aplica_suplemento_porcentaje@10(prPre@1103355000 : Record 7010148;VAR prSupl@1103355001 : Record 7010165;prSimulacion@1000000000 : Boolean);
    VAR
      w_ingreso_adultos@1103355002 : Decimal;
      w_ingreso_ni¤os@1103355003 : Decimal;
      w_base_adultos@1100253000 : Decimal;
      w_base_ni¤os@1100253001 : Decimal;
      w_exento_adultos@1100253002 : Decimal;
      w_exento_ni¤os@1100253003 : Decimal;
    BEGIN
      // aplica_suplemento_porcentaje

      w_ingreso_adultos := ROUND(("Precio Adulto" * prPre."Precio Adulto" / 100) * prSupl.Adultos);
      w_ingreso_ni¤os   := ROUND(("Precio Ni¤o" * prPre."Precio Ni¤o" / 100) * prSupl.Ni¤os);

      //+$028
      w_exento_adultos := ROUND((rDetEco."Precio adulto exento" * prPre."Precio adulto exento" / 100) * prSupl.Adultos);
      w_exento_ni¤os   := ROUND((rDetEco."Precio ni¤o exento" * prPre."Precio ni¤o exento" / 100) * prSupl.Ni¤os);
      //+$028

      //+$024
      w_base_adultos    := ROUND((wPrecioBaseAd * prPre."Precio Adulto" / 100) * prSupl.Adultos);
      w_base_ni¤os      := ROUND((wPrecioBaseNi * prPre."Precio Ni¤o" / 100) * prSupl.Ni¤os);
      //+$024

      IF prPre."Acumula al precio" THEN BEGIN
        "Ingreso Adulto"  += w_ingreso_adultos;
        "Ingreso Ni¤o"    += w_ingreso_ni¤os;
        "Ingreso reserva" += (w_ingreso_adultos + w_ingreso_ni¤os);

        //+$024
        wBaseAdultos += w_base_adultos;
        wBaseNi¤os   += w_base_ni¤os;
        wBaseReserva += (w_base_adultos + w_base_ni¤os);
        //+$024

        IF NOT prPre.Free THEN
        BEGIN
          "Precio Adulto" += ROUND(("Precio Adulto" * prPre."Precio Adulto") / 100);
          "Precio Ni¤o"   += ROUND(("Precio Ni¤o" * prPre."Precio Ni¤o") / 100);

          //+$024
          wPrecioBaseAd += ROUND((wPrecioBaseAd * prPre."Precio Adulto") / 100);
          wPrecioBaseNi += ROUND((wPrecioBaseNi * prPre."Precio Ni¤o") / 100);
          //+$024
        END;

        //+$028
        rDetEco."Ingreso reserva" += (w_ingreso_adultos) + (w_ingreso_ni¤os);
        rDetEco."Ingreso exento"  += (w_exento_adultos) + (w_exento_ni¤os);
        rDetEco."Ingreso base"    += (w_base_adultos) + (w_base_ni¤os);

        rDetEco."Ingreso adultos"        += (w_ingreso_adultos);
        rDetEco."Ingreso adultos exento" += (w_exento_adultos);
        rDetEco."Ingreso adultos base"   += (w_base_adultos);
        IF NOT prPre.Free THEN
        BEGIN
          rDetEco."Precio adulto"        += ROUND((rDetEco."Precio adulto" * prPre."Precio Adulto") / 100);;
          rDetEco."Precio adulto exento" += ROUND((rDetEco."Precio adulto exento" * prPre."Precio Adulto") / 100);;
        END;

        rDetEco."Ingreso ni¤os"        += (w_ingreso_ni¤os);
        rDetEco."Ingreso ni¤os exento" += (w_exento_ni¤os);
        rDetEco."Ingreso ni¤os base"   += (w_base_ni¤os);
        IF NOT prPre.Free THEN
        BEGIN
          rDetEco."Precio ni¤o"        += ROUND(("Precio Ni¤o" * prPre."Precio Ni¤o") / 100);
          rDetEco."Precio ni¤o exento" += ROUND((rDetEco."Precio ni¤o exento" * prPre."Precio Ni¤o") / 100);;
        END;
        //+$028


        IF prPre.Comisionable THEN
        BEGIN
          "Ingreso comisionable" += (w_ingreso_adultos + w_ingreso_ni¤os);
          wBaseComisionable      += (w_base_adultos + w_base_ni¤os); //+$024

          rDetEco."Ingreso comisionable" += (w_ingreso_adultos) + (w_ingreso_ni¤os);
          rDetEco."Exento comisionable"  += (w_exento_adultos) + (w_exento_ni¤os);
          rDetEco."Base comisionable"    += (w_base_adultos) + (w_base_ni¤os);
        END;
      END
      ELSE BEGIN
        "Ingreso Adulto"  := w_ingreso_adultos;
        "Ingreso Ni¤o"    := w_ingreso_ni¤os;
        "Ingreso reserva" := w_ingreso_adultos + w_ingreso_ni¤os;

        //+$024
        wBaseAdultos := w_base_adultos;
        wBaseNi¤os   := w_base_ni¤os;
        wBaseReserva := (w_base_adultos + w_base_ni¤os);
        //+$024

        "Precio Adulto" := ROUND(("Precio Adulto" * prPre."Precio Adulto") / 100);
        "Precio Ni¤o"   := ROUND(("Precio Ni¤o" * prPre."Precio Ni¤o") / 100);

        //+$024
        wPrecioBaseAd := ROUND((wPrecioBaseAd * prPre."Precio Adulto") / 100);
        wPrecioBaseNi := ROUND((wPrecioBaseNi * prPre."Precio Ni¤o") / 100);
        //+$024

        //+$028
        rDetEco."Ingreso reserva" := (w_ingreso_adultos) + (w_ingreso_ni¤os);
        rDetEco."Ingreso exento"  := (w_exento_adultos) + (w_exento_ni¤os);
        rDetEco."Ingreso base"    := (w_base_adultos) + (w_base_ni¤os);

        rDetEco."Ingreso adultos"        := (w_ingreso_adultos);
        rDetEco."Ingreso adultos exento" := (w_exento_adultos);
        rDetEco."Ingreso adultos base"   := (w_base_adultos);
        rDetEco."Precio adulto"          := ROUND((rDetEco."Precio adulto" * prPre."Precio Adulto") / 100);;
        rDetEco."Precio adulto exento"   := ROUND((rDetEco."Precio adulto exento" * prPre."Precio Adulto") / 100);;

        rDetEco."Ingreso ni¤os"          := (w_ingreso_ni¤os);
        rDetEco."Ingreso ni¤os exento"   := (w_exento_ni¤os);
        rDetEco."Ingreso ni¤os base"     := (w_base_ni¤os);
        rDetEco."Precio ni¤o"            := ROUND((rDetEco."Precio ni¤o" * prPre."Precio Ni¤o") / 100);
        rDetEco."Precio ni¤o exento"     := ROUND((rDetEco."Precio ni¤o exento" * prPre."Precio Ni¤o") / 100);;
        //+$028

        IF prPre.Comisionable THEN
        BEGIN
          "Ingreso comisionable" := w_ingreso_adultos + w_ingreso_ni¤os;
          wBaseComisionable      := (w_base_adultos + w_base_ni¤os); //+$024

          rDetEco."Ingreso comisionable" := (w_ingreso_adultos) + (w_ingreso_ni¤os);
          rDetEco."Exento comisionable"  := (w_exento_adultos) + (w_exento_ni¤os);
          rDetEco."Base comisionable"    := (w_base_adultos) + (w_base_ni¤os);
        END;
      END;

      // $032
      rDetEco."Free Adultos" := "Venta - Invitados Adultos";
      rDetEco."Free Ni¤os"   := "Venta - Invitados ni¤os";
      IF prPre.Free THEN BEGIN
        rDetEco."Free Adultos" += prSupl.Adultos;
        IF rDetEco."Free Adultos" > Adultos THEN
          rDetEco."Free Adultos" := Adultos;
        rDetEco."Free Ni¤os"   += prSupl.Ni¤os;
        IF rDetEco."Free Ni¤os" > Ni¤os THEN
          rDetEco."Free Ni¤os" := Ni¤os;
      END;

      // JPT 19/07/12 A¤adimos los importes a los suplementos
      IF NOT prSimulacion THEN BEGIN
        prSupl.Importe        := w_ingreso_adultos + w_ingreso_ni¤os;
        prSupl."Importe base" := w_base_adultos + w_base_ni¤os;
        prSupl.MODIFY;
      END;
    END;

    PROCEDURE aplica_suplemento_importe@11(prPre@1103355000 : Record 7010148;VAR prSupl@1103355001 : Record 7010165;prSimulacion@1000000000 : Boolean);
    VAR
      w_ingreso_adultos@1103355002 : Decimal;
      w_ingreso_ni¤os@1103355003 : Decimal;
      w_base_adultos@1100253000 : Decimal;
      w_base_ni¤os@1100253001 : Decimal;
      w_exento_adultos@1100253002 : Decimal;
      w_exento_ni¤os@1100253003 : Decimal;
      w_precio_adultos@1100217000 : Decimal;
      w_precio_ni¤os@1100217001 : Decimal;
      w_precio_ad_exento@1100217002 : Decimal;
      w_precio_ni_exento@1100217003 : Decimal;
    BEGIN
      // aplica_suplemento_importe

      //+$046 <
      IF prSupl."Permite Precio manual" THEN
      BEGIN
        w_ingreso_adultos := prSupl."Precio adulto" * prSupl.Adultos;
        w_ingreso_ni¤os   := prSupl."Precio ni¤o" * prSupl.Ni¤os;
        w_exento_adultos  := prSupl."Precio adulto exento" * prSupl.Adultos;
        w_exento_ni¤os    := prSupl."Precio ni¤o exento" * prSupl.Ni¤os;
        w_base_adultos    := w_ingreso_adultos;
        w_base_ni¤os      := w_ingreso_ni¤os;

        w_precio_adultos   := prSupl."Precio adulto";
        w_precio_ni¤os     := prSupl."Precio ni¤o";
        w_precio_ad_exento := prSupl."Precio adulto exento";
        w_precio_ni_exento := prSupl."Precio ni¤o exento";
      END
      ELSE
      //+$046 >
      BEGIN
        w_ingreso_adultos := prPre."Precio Adulto" * prSupl.Adultos;
        w_ingreso_ni¤os   := prPre."Precio Ni¤o" * prSupl.Ni¤os;

        //+$028
        w_exento_adultos := prPre."Precio adulto exento" * prSupl.Adultos;
        w_exento_ni¤os   := prPre."Precio ni¤o exento" * prSupl.Ni¤os;
        //+$028

        //+$024
        w_base_adultos := (prPre."Precio Adulto" - prPre."Precio adulto exento") * prSupl.Adultos;
        w_base_ni¤os   := (prPre."Precio Ni¤o" - prPre."Precio ni¤o exento") * prSupl.Ni¤os;
        //+$024

        w_precio_adultos := prPre."Precio Adulto";
        w_precio_ni¤os   := prPre."Precio Ni¤o";
        w_precio_ad_exento := prPre."Precio adulto exento";
        w_precio_ni_exento := prPre."Precio ni¤o exento";
      END;

      IF prPre."Acumula al precio" THEN BEGIN
        "Ingreso Adulto"  += w_ingreso_adultos;
        "Ingreso Ni¤o"    += w_ingreso_ni¤os;
        "Ingreso reserva" += (w_ingreso_adultos + w_ingreso_ni¤os);

        //+$024
        wBaseAdultos += w_base_adultos;
        wBaseNi¤os   += w_base_ni¤os;
        wBaseReserva += (w_base_adultos + w_base_ni¤os);
        //+$024


        //-$017"Precio Adulto" := "Precio Adulto" + prPre."Precio Adulto";
        //-$017"Precio Ni¤o"   := "Precio Ni¤o" + prPre."Precio Ni¤o";

        //+$028
        rDetEco."Ingreso reserva" += (w_ingreso_adultos + w_ingreso_ni¤os);
        rDetEco."Ingreso exento"  += (w_exento_adultos + w_exento_ni¤os);
        rDetEco."Ingreso base"    += (w_base_adultos + w_base_ni¤os);

        rDetEco."Ingreso adultos"        += w_ingreso_adultos;
        rDetEco."Ingreso adultos exento" += w_exento_adultos;
        rDetEco."Ingreso adultos base"   += w_base_adultos;

        rDetEco."Ingreso ni¤os"        += w_ingreso_ni¤os;
        rDetEco."Ingreso ni¤os exento" += w_exento_ni¤os;
        rDetEco."Ingreso ni¤os base"   += w_base_ni¤os;
        //+$028

        //+$019
        IF (Adultos - "Venta - Invitados Adultos") > 0 THEN
        BEGIN
          "Precio Adulto" := ROUND("Ingreso Adulto" / (Adultos - "Venta - Invitados Adultos")); //+$017
          wPrecioBaseAd   := ROUND(wBaseAdultos / (Adultos - "Venta - Invitados Adultos")); //+$024

          rDetEco."Precio adulto" := ROUND(rDetEco."Ingreso adultos" / (Adultos - "Venta - Invitados Adultos")); //+$028
        END;

        IF (Ni¤os - "Venta - Invitados ni¤os") > 0 THEN
        BEGIN
          "Precio Ni¤o" := ROUND("Ingreso Ni¤o" / (Ni¤os - "Venta - Invitados ni¤os")); //+$017
          wPrecioBaseNi := ROUND(wBaseNi¤os / (Ni¤os - "Venta - Invitados ni¤os")); //+$024

          rDetEco."Precio ni¤o" := ROUND(rDetEco."Ingreso ni¤os" / (Ni¤os - "Venta - Invitados ni¤os")); //+$028
        END;
        //+$019

        IF prPre.Comisionable THEN
        BEGIN
          "Ingreso comisionable" += (w_ingreso_adultos + w_ingreso_ni¤os);
          wBaseComisionable      += (w_base_adultos + w_base_ni¤os); //+$024

          //+$028
          rDetEco."Ingreso comisionable" += (w_ingreso_adultos + w_ingreso_ni¤os);
          rDetEco."Exento comisionable"  += (w_exento_adultos + w_exento_ni¤os);
          rDetEco."Base comisionable"    += (w_base_adultos + w_base_ni¤os);
          //+$028
        END;
      END
      //. No acumulable
      ELSE BEGIN
        "Ingreso Adulto"  := w_ingreso_adultos;
        "Ingreso Ni¤o"    := w_ingreso_ni¤os;
        "Ingreso reserva" := w_ingreso_adultos + w_ingreso_ni¤os;

        //+$024
        wBaseAdultos := w_base_adultos;
        wBaseNi¤os   := w_base_ni¤os;
        wBaseReserva := (w_base_adultos + w_base_ni¤os);
        //+$024

        "Precio Adulto" := w_precio_adultos;
        "Precio Ni¤o"   := w_precio_ni¤os;

        //+$024
        wPrecioBaseAd := w_precio_adultos - w_precio_ad_exento;
        wPrecioBaseNi := w_precio_ni¤os - w_precio_ni_exento;
        //+$024

        //+$028
        rDetEco."Ingreso reserva" := (w_ingreso_adultos + w_ingreso_ni¤os);
        rDetEco."Ingreso exento"  := (w_exento_adultos + w_exento_ni¤os);
        rDetEco."Ingreso base"    := (w_base_adultos + w_base_ni¤os);

        rDetEco."Ingreso adultos"        := w_ingreso_adultos;
        rDetEco."Ingreso adultos exento" := w_exento_adultos;
        rDetEco."Ingreso adultos base"   := w_base_adultos;
        rDetEco."Precio adulto"          := w_precio_adultos;

        rDetEco."Ingreso ni¤os"        := w_ingreso_ni¤os;
        rDetEco."Ingreso ni¤os exento" := w_exento_ni¤os;
        rDetEco."Ingreso ni¤os base"   := w_base_ni¤os;
        rDetEco."Precio ni¤o"          := w_precio_ni¤os;
        //+$028

        IF prPre.Comisionable THEN
        BEGIN
          "Ingreso comisionable" := w_ingreso_adultos + w_ingreso_ni¤os;
          wBaseComisionable      := w_base_adultos + w_base_ni¤os;

          //+$028
          rDetEco."Ingreso comisionable" := (w_ingreso_adultos + w_ingreso_ni¤os);
          rDetEco."Exento comisionable"  := (w_exento_adultos + w_exento_ni¤os);
          rDetEco."Base comisionable"    := (w_base_adultos + w_base_ni¤os);
          //+$028
        END;
      END;

      // JPT 19/07/12 A¤adimos los importes a los suplementos
      IF NOT prSimulacion THEN BEGIN
        prSupl.Importe       := w_ingreso_adultos + w_ingreso_ni¤os;
        prSupl."Importe base":= w_base_adultos + w_base_ni¤os;
        prSupl.MODIFY;
      END;
    END;

    PROCEDURE calcula_comisionTO@16();
    VAR
      rTO@1103355000 : Record 7009717;
      rConCom@1103355001 : Record 7010142;
      rPreTO@1103355002 : Record 7010153;
      lrIVAVenta@1100253000 : Record 325;
      lrDetEco@1100253003 : Record 7010245;
      lwImporteReembolso@1100253001 : Decimal;
      lwImporteReembolsoNeto@1100253002 : Decimal;
    BEGIN
      // calcula_comisionTO

      IF NOT rTO.GET(TourOperador) THEN
        EXIT;

      //. Si no encontramos el registro de detalle economico quiere decir que aun no se ha calculado
      //. la reserva, por tanto no hay comision posible
      //+$063
      IF NOT lrDetEco.GET(Delegacion, "N§ Reserva") THEN
        EXIT;

      //. Vaciamos los campos
      lrDetEco."Comision TO adultos" := 0;
      lrDetEco."Comision TO ni¤os"   := 0;
      lrDetEco.MODIFY;

      "Precio Descuento Touroperador" := 0;
      "Comision Touroperador"         := 0;

      //. Buscar el contrato de comision touroperador
      rConCom.RESET;
      rConCom.SETRANGE (Delegacion             , Delegacion);
      rConCom.SETRANGE (TourOperador           , TourOperador);
      rConCom.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha Excursion");
      rConCom.SETFILTER("Fecha final contrato" , '>=%1', "Fecha Excursion");
      rConCom.SETRANGE (Confirmado             , TRUE);
      rConCom.SETRANGE ("Tipo Contrato"        , rConCom."Tipo Contrato"::TourOperador);
      IF NOT rConCom.FINDFIRST THEN
        EXIT;

      //. Buscar el precio de la comision de touroperador

      rPreTO.RESET;
      rPreTO.SETRANGE(Activo        , TRUE);
      rPreTO.SETRANGE("N§ Contrato" , rConCom."N§ Contrato compra");
      rPreTO.SETRANGE(Zona          , "Zona Hotel");
      rPreTO.SETRANGE(Excursion     , Producto);
      rPreTO.SETFILTER("Fecha desde", '<=%1', "Fecha Excursion");
      rPreTO.SETFILTER("Fecha hasta", '>=%1', "Fecha Excursion");
      // + $102 <
      IF "Reserva a credito" THEN
        rPreTO.SETRANGE("Tipo venta", rPreTO."Tipo venta"::Credito)
      ELSE
        rPreTO.SETRANGE("Tipo venta", rPreTO."Tipo venta"::Contado);
      // +$102 >
      IF NOT rPreTO.FINDFIRST THEN BEGIN
        rPreTO.SETRANGE(Excursion, '');
        IF NOT rPreTO.FINDFIRST THEN BEGIN
          rPreTO.SETRANGE(Zona     , '');
          rPreTO.SETRANGE(Excursion, Producto);
          IF NOT rPreTO.FINDFIRST THEN BEGIN
            rPreTO.SETRANGE(Excursion, '');
            IF NOT rPreTO.FINDFIRST THEN
              EXIT;
          END;
        END;
      END;

      //+$075 Tampoco calculo comisiones TTOO
      IF "No comisionable" THEN BEGIN
        "Precio Descuento Touroperador" := 0;
        "Comision Touroperador"         := 0;
        MODIFY;
        lrDetEco.GET(Delegacion, "N§ Reserva");
        lrDetEco."Precio Descuento Touroperador" := 0;
        lrDetEco."Comision TO adultos" := 0;
        lrDetEco."Comision TO ni¤os"   := 0;
        lrDetEco.MODIFY;
        EXIT;
      END ELSE BEGIN
        IF rPreTO.Porcentaje THEN
          "Precio Descuento Touroperador" := rPreTO."Porcentaje Comision"
        ELSE
          "Precio Descuento Touroperador" := rPreTO.Precio; //+$058
      END;

      //  $076 Tenemos en cuenta los reembolsos
      CALCFIELDS("Importe reembolsado adultos","Importe neto reemb adultos","Importe reembolsado ni¤os","Importe neto reemb ni¤os");
      //. Aplicamos el precio de la comision para obtener el importe de la misma
      //+$016
      //IF NOT Reembolsada THEN BEGIN
        IF rTO."Descuento sobre importes" = rTO."Descuento sobre importes"::"Con impuestos" THEN BEGIN
          "Comision Touroperador" := ROUND(-((("Ingreso comisionable" - "Importe Reembolsado") * rPreTO."Porcentaje Comision") / 100));

          //+$030
          lrDetEco.GET(Delegacion, "N§ Reserva");
          lrDetEco."Precio Descuento Touroperador" := "Precio Descuento Touroperador"; // $048
          lrDetEco."Comision TO adultos" := ROUND((lrDetEco."Ingreso adultos" - "Importe reembolsado adultos")
                                                    * rPreTO."Porcentaje Comision" / 100);
          lrDetEco."Comision TO ni¤os"   := ROUND((lrDetEco."Ingreso ni¤os" - "Importe reembolsado ni¤os")
                                                  * rPreTO."Porcentaje Comision" / 100);
          lrDetEco.MODIFY;
          //+$030
        END
        ELSE BEGIN
          "Comision Touroperador" := ROUND(-((("Ingreso comisionable neto" - "Importe Reembolsado Neto")
                                                * rPreTO."Porcentaje Comision") / 100));

          //+$030
          lrDetEco.GET(Delegacion, "N§ Reserva");
          lrDetEco."Precio Descuento Touroperador" := "Precio Descuento Touroperador"; //$048
          lrDetEco."Comision TO adultos" := ROUND((lrDetEco."Ingreso adultos neto" - "Importe neto reemb adultos")
                                                   * rPreTO."Porcentaje Comision" / 100);
          lrDetEco."Comision TO ni¤os"   := ROUND((lrDetEco."Ingreso ni¤os neto" - "Importe neto reemb ni¤os")
                                                  * rPreTO."Porcentaje Comision" / 100);
          lrDetEco.MODIFY;
          //+$030
        END;
      //END
      //ELSE BEGIN
      //  lrDetEco.GET(Delegacion, "N§ Reserva");
      //  lrDetEco."Precio Descuento Touroperador" := "Precio Descuento Touroperador"; //$048
      //  lrDetEco.MODIFY;
      //END;
      //+$016
    END;

    PROCEDURE calcula_comisionGV@22();
    VAR
      lcLiquidacion@1100253000 : Codeunit 7010144;
      lrTO@1100253001 : Record 7009717;
    BEGIN
      // calcula_comisionGV

      //. Buscamos el porcentaje de comision de Guia Venta

      "Precio Comision Guia Venta"    := 0;
      "Comision Guia Venta"           := 0;

      lcLiquidacion.Comision_Reserva(Rec, "Comision Guia Venta", "Precio Comision Guia Venta")
    END;

    PROCEDURE comprobar_todos_utilizados@5(prTal@1103355000 : Record 7010146) : Boolean;
    VAR
      rRsv@1103355001 : Record 7010162;
      w_ticket@1103355002 : Code[10];
    BEGIN
      // comprobar_todos_utilizados

      // AJS --> Comprobar que todos los tickets del talonario que se esta utilizando han sido
      //         empleados o no.

      rRsv.RESET;
      rRsv.SETCURRENTKEY("N§ Ticket");
      w_ticket := prTal."N§ Ticket inicial";
      WHILE w_ticket <> prTal."N§ Ticket final" DO BEGIN
        rRsv.SETRANGE ("N§ Ticket" , w_ticket);
        IF NOT rRsv.FINDFIRST THEN
          EXIT(FALSE);
        w_ticket := INCSTR(w_ticket);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE busca_importes_netos@6(prTarifa@1103355000 : Record 7010147);
    VAR
      lrCli@1103355002 : Record 18;
      lrIVAVta@1103355003 : Record 325;
      lrSupl@1100217000 : Record 7010165;
      lrRep@1100217001 : Record 7010241;
      lwIVA@1100253000 : Decimal;
    BEGIN
      // busca_importes_netos

      lrRep.GET("Guia Venta");
      lrCli.GET(lrRep."Cliente Facturacion");

      lrIVAVta.GET(lrCli."VAT Bus. Posting Group", prTarifa."Gr. Registro IVA Producto");

      //-$024IF prTarifa."Impuestos Incluidos" THEN BEGIN
      //-$024  "Ingreso reserva neto"      := ROUND(("Ingreso reserva" / ((lrIVAVta."VAT+EC %"/ 100) + 1)));
      //-$024  "Ingreso comisionable neto" := ROUND(("Ingreso comisionable" / ((lrIVAVta."VAT+EC %"/ 100) + 1)));
      //-$024  "Ingreso adulto neto"       := ROUND(("Ingreso Adulto" / ((lrIVAVta."VAT+EC %"/ 100) + 1)));
      //-$024  "Ingreso ni¤o neto"         := ROUND(("Ingreso Ni¤o" / ((lrIVAVta."VAT+EC %"/ 100) + 1)));
      //-$024END
      //-$024ELSE BEGIN
      //-$024  "Ingreso reserva neto"      := "Ingreso reserva";
      //-$024  "Ingreso comisionable neto" := "Ingreso comisionable";
      //-$024  "Ingreso adulto neto"       := "Ingreso Adulto";
      //-$024  "Ingreso ni¤o neto"         := "Ingreso Ni¤o";

      //-$024  "Ingreso reserva"      := ROUND("Ingreso reserva" + (("Ingreso reserva" * lrIVAVta."VAT+EC %") / 100));
      //-$024  "Ingreso comisionable" := ROUND("Ingreso comisionable" + (("Ingreso comisionable" * lrIVAVta."VAT+EC %") / 100));
      //-$024  "Ingreso Adulto"       := ROUND("Ingreso Adulto" + (("Ingreso Adulto" * lrIVAVta."VAT+EC %") / 100));
      //-$024  "Ingreso Ni¤o"         := ROUND("Ingreso Ni¤o" + (("Ingreso Ni¤o" * lrIVAVta."VAT+EC %") / 100));
      //-$024END;

      //+$024
      IF prTarifa."Impuestos Incluidos" THEN BEGIN
        lwIVA := 1 + ROUND(lrIVAVta."VAT+EC %" / 100);

        "Ingreso reserva neto"      := ("Ingreso reserva" - wBaseReserva) + ROUND(wBaseReserva / lwIVA);

        //-$045"Ingreso comisionable neto" := ("Ingreso comisionable" - wBaseComisionable) + ROUND(wBaseComisionable / lwIVA);
        "Ingreso comisionable neto" := ROUND("Ingreso comisionable" /lwIVA); //+$045

        "Ingreso adulto neto"       := ("Ingreso Adulto" - wBaseAdultos) + ROUND(wBaseAdultos  / lwIVA);
        "Ingreso ni¤o neto"         := ("Ingreso Ni¤o" - wBaseNi¤os) + ROUND(wBaseNi¤os / lwIVA);

        //+$028
        rDetEco."Ingreso reserva neto"      := (rDetEco."Ingreso reserva" - rDetEco."Ingreso base") +
                                               ROUND(rDetEco."Ingreso base" / lwIVA);
        //-$045rDetEco."Ingreso comisionable neto" := (rDetEco."Ingreso comisionable" - rDetEco."Base comisionable") +
        //-$045                                       ROUND(rDetEco."Base comisionable" / lwIVA);
        rDetEco."Ingreso comisionable neto" := ROUND(rDetEco."Ingreso comisionable" / lwIVA); //+$045

        rDetEco."Ingreso adultos neto"      := (rDetEco."Ingreso adultos" - rDetEco."Ingreso adultos base") +
                                               ROUND(rDetEco."Ingreso adultos base" / lwIVA);
        rDetEco."Ingreso ni¤os neto"        := (rDetEco."Ingreso ni¤os" - rDetEco."Ingreso ni¤os base") +
                                               ROUND(rDetEco."Ingreso ni¤os base" / lwIVA);
        //+$028
      END
      ELSE BEGIN
        "Ingreso reserva neto"      := "Ingreso reserva";
        "Ingreso comisionable neto" := "Ingreso comisionable";
        "Ingreso adulto neto"       := "Ingreso Adulto";
        "Ingreso ni¤o neto"         := "Ingreso Ni¤o";

        //+$028
        rDetEco."Ingreso reserva neto"      := rDetEco."Ingreso reserva";
        rDetEco."Ingreso comisionable neto" := rDetEco."Ingreso comisionable";
        rDetEco."Ingreso adultos neto"      := rDetEco."Ingreso adultos";
        rDetEco."Ingreso ni¤os neto"        := rDetEco."Ingreso ni¤os";
        //+$028

        "Ingreso reserva"      := "Ingreso reserva" + ROUND(wBaseReserva * lrIVAVta."VAT+EC %" / 100);

        //-$045"Ingreso comisionable" := "Ingreso comisionable" + ROUND(wBaseComisionable * lrIVAVta."VAT+EC %" / 100);
        "Ingreso comisionable" := "Ingreso comisionable" + ROUND("Ingreso comisionable" * lrIVAVta."VAT+EC %" / 100); //+$045

        "Ingreso Adulto"       := "Ingreso Adulto" + ROUND(wBaseAdultos * lrIVAVta."VAT+EC %" / 100);
        "Ingreso Ni¤o"         := "Ingreso Ni¤o" + ROUND(wBaseNi¤os * lrIVAVta."VAT+EC %" / 100);

        //+$028
        rDetEco."Ingreso reserva"      := rDetEco."Ingreso reserva" +
                                          ROUND(rDetEco."Ingreso base" * lrIVAVta."VAT+EC %" / 100);

        //-$045rDetEco."Ingreso comisionable" := rDetEco."Ingreso comisionable" +
        //-$045                                  ROUND(rDetEco."Base comisionable" * lrIVAVta."VAT+EC %" / 100);
        rDetEco."Ingreso comisionable" := rDetEco."Ingreso comisionable" +
                                          ROUND(rDetEco."Ingreso comisionable" * lrIVAVta."VAT+EC %" / 100); //+$045

        rDetEco."Ingreso adultos"      := rDetEco."Ingreso adultos" +
                                          ROUND(rDetEco."Ingreso adultos base" * lrIVAVta."VAT+EC %" / 100);
        rDetEco."Ingreso ni¤os"        := rDetEco."Ingreso ni¤os" +
                                          ROUND(rDetEco."Ingreso ni¤os base" * lrIVAVta."VAT+EC %" / 100);
        //+$028
      END;
      //+$024

      // JPT 19/07/12 A¤adimos los importes a los suplementos
      CLEAR(lrSupl);
      lrSupl.SETRANGE(Delegacion  , Delegacion);
      lrSupl.SETRANGE("N§ Reserva", "N§ Reserva");
      lrSupl.SETRANGE(Aplicacion  , TRUE);
      IF lrSupl.FINDSET THEN BEGIN
        REPEAT
          IF prTarifa."Impuestos Incluidos" THEN BEGIN
            lrSupl."Importe neto" := (lrSupl.Importe - lrSupl."Importe base") + ROUND(lrSupl."Importe base" / lwIVA);
          END
          ELSE BEGIN
            lrSupl."Importe neto" := lrSupl.Importe;
            lrSupl.Importe        := lrSupl.Importe + ROUND(lrSupl."Importe base" * lrIVAVta."VAT+EC %" / 100);
          END;
          lrSupl.MODIFY;
        UNTIL lrSupl.NEXT = 0;
      END;
    END;

    PROCEDURE TipoCambioDivisa@8() : Decimal;
    VAR
      lwFecha@1103355002 : Date;
    BEGIN
      // TipoCambioDivisa

      //-$015IF pwCambiaFecha THEN
      //-$015  lwFecha := WORKDATE
      //-$015ELSE
      //-$015  lwFecha := pwFechaCambio;

      rCamb.RESET;
      rCamb.SETRANGE ("Currency Code"  , Divisa);
      rCamb.SETFILTER("Starting Date", '<=%1', "Fecha cambio");
      rCamb.FINDLAST;

        // AJS 16.07.2009
        // Hacemos que la fecha de cambio sea la fecha de trabajo (Solicitud ION)
        //IF pwCambiaFecha THEN
        //  pwFechaCambio := rCamb."Starting Date";

        //-$015IF pwCambiaFecha THEN
        //-$015  pwFechaCambio := lwFecha;

      EXIT(rCamb."Relational Exch. Rate Amount")

      //-$015END
      //-$015ELSE BEGIN
      //-$015  IF pwCambiaFecha THEN
      //-$015    pwFechaCambio := 0D;
      //-$015  EXIT(0);
      //-$015END;
    END;

    PROCEDURE GetNumeroCotizacion@1103355000() : Integer;
    VAR
      lrVinculo@1103355000 : Record 7009884;
    BEGIN
      // GetNumeroCotizacion

      lrVinculo.SETCURRENTKEY("Id Cotizacion", Delegacion, "N§ Interno", "N§ Periodo", Tipo);
      lrVinculo.SETRANGE (Delegacion  , Delegacion);
      lrVinculo.SETRANGE ("N§ Interno", "N§ Reserva");
      lrVinculo.SETRANGE (Tipo        , lrVinculo.Tipo::"Reserva excursion");

      IF lrVinculo.FINDFIRST THEN
        EXIT(lrVinculo."Id Cotizacion");

      EXIT(0);
    END;

    PROCEDURE LookUpCotizacion@1103355001();
    VAR
      lrCabCot@1103355000 : Record 7009871;
      lfCabCot@1103355001 : Form 7010038;
      lwNumCot@1103355002 : Integer;
    BEGIN
      // LookUpCotizacion

      lwNumCot := GetNumeroCotizacion;
      IF lwNumCot = 0 THEN
        EXIT;

      lrCabCot.FILTERGROUP(2);
      lrCabCot.SETRANGE (Id, lwNumCot);
      lrCabCot.FILTERGROUP(0);

      lfCabCot.SETTABLEVIEW(lrCabCot);
      lfCabCot.RUNMODAL;
    END;

    LOCAL PROCEDURE _CheckGuiaVentaHotel@1100253000();
    VAR
      lrHotel@1100253000 : Record 7009724;
      lrContrato@1100253001 : Record 7010142;
      lrEquip@1100253003 : Record 7010249;
      lcLiqGV@1100217000 : Codeunit 7010144;
    BEGIN
      // _CheckGuiaVentaHotel

      IF ("Hotel Cliente" = '') OR ("Guia Venta" = '') THEN
        EXIT;

      //$002
      IF lcLiqGV.Buscar_Contrato(lrContrato, Rec) THEN
      BEGIN
        IF lrContrato."Representante multihotel" THEN
          EXIT;
      END;

      lrHotel.GET("Hotel Cliente");
      IF lrHotel."Guia venta" <> "Guia Venta" THEN
      BEGIN
        //. Incluir un control para ver si el guia esta asignado como parte de un equipo en ese hotel

        lrEquip.RESET;
        lrEquip.SETRANGE (Hotel        , "Hotel Cliente");
        lrEquip.SETFILTER("Fecha desde", '<=%1', "Fecha Excursion");
        lrEquip.SETFILTER("Fecha hasta", '>=%1', "Fecha Excursion");
        lrEquip.SETRANGE ("Guia venta" , "Guia Venta");
        IF lrEquip.ISEMPTY THEN
          ERROR(Text034, lrHotel."Guia venta", "Guia Venta");
      END;
    END;

    PROCEDURE ControlEdicion@1100253001();
    BEGIN
      // ControlEdicion

      IF ("Fecha Excursion" <> xRec."Fecha Excursion") OR
         (Producto <> xRec.Producto) OR
         ("Turno Excursion" <> xRec."Turno Excursion")THEN
        IF "N§ Servicio" <> 0 THEN
          ERROR(Text035);

      TESTFIELD(Facturada  , FALSE);
      TESTFIELD(Anulada    , FALSE);
      TESTFIELD(Reembolsada, FALSE);
      TESTFIELD(Confirmada , FALSE); //+$020
      TESTFIELD("Num. Prefactura", ''); //+$064
    END;

    PROCEDURE CompruebaCobro@1100253002();
    VAR
      lrCobro@1100253000 : Record 7010240;
    BEGIN
      // CompruebaCobro
      // Comprueba que la reserva tenga un cobro rellenado

      // JPT 18/03/11 Si es representante a credito no tiene que tener cobros
      IF EsRepresentanteCredito THEN
        EXIT;

      rDatIns.FINDFIRST;

      TESTFIELD("Fecha cambio");

      CLEAR(lrCobro);
      lrCobro.SETRANGE(Delegacion   , Delegacion);
      lrCobro.SETRANGE("Num Reserva", "N§ Reserva");
      IF lrCobro.FINDSET THEN BEGIN
        REPEAT
          lrCobro.TESTFIELD("Forma de Pago");
          lrCobro.TESTFIELD("Importe Recibido"); //+$039
          //-$012lrCobro.TESTFIELD("Cod. Divisa");
        UNTIL lrCobro.NEXT=0;

        lrCobro.CALCSUMS("Importe Divisa Reserva");
        IF lrCobro."Importe Divisa Reserva" < ("Ingreso reserva" - 1) THEN
          ERROR(Text040, "N§ Ticket", lrCobro."Importe Divisa Reserva", "Ingreso reserva");
      END
      ELSE
        ERROR(Text036, "N§ Reserva");
    END;

    PROCEDURE GetReembolsoOld@1100253003(pwCodDiv@1100253001 : Code[10];pwTipo@1100253005 : 'Ambos,Adultos,Ni¤os') : Decimal;
    VAR
      lrDivisa@1100253004 : Record 4;
      lrCbr@1100253000 : Record 7010240;
      lwImp@1100253002 : Decimal;
      lwTotal@1100253003 : Decimal;
    BEGIN
      // GetReembolso
      // Devuelve el importe Reembolsado en la Divisa pasada por parametro pwCodDiv

      // $021 JPT INC-59916 Separar importe reembolsado en Importe Reembolsado Adulto e Importe Reembolsado Ni¤o
      //                    Se a¤adi¢ parametro pwTipo

      CLEAR(lwTotal);

      lrCbr.RESET;
      lrCbr.SETRANGE(Delegacion    , Delegacion);
      lrCbr.SETRANGE("Num Reserva" , "N§ Reserva");
      IF lrCbr.FINDSET THEN BEGIN
        //-$018TESTFIELD("Fecha cambio");
        lrCbr.TESTFIELD("Fecha cambio cobro"); //+$018
        REPEAT
          CLEAR(lwImp);
          IF pwTipo IN [pwTipo::Ambos, pwTipo::Adultos] THEN // $021
            lwImp := lrCbr."Importe Reembolsado Adulto";
          IF pwTipo IN [pwTipo::Ambos, pwTipo::Ni¤os] THEN // $021
            lwImp += lrCbr."Importe Reembolsado Ni¤o";

          //$007
          IF pwCodDiv <> '' THEN
            lrDivisa.GET(pwCodDiv);

          //-$018IF (lwImp <> 0) AND (lrCbr."Cod. Divisa" <> pwCodDiv) THEN
            //-$018lwImp := ROUND(rCamb.ExchangeAmtFCYToFCY("Fecha cambio", lrCbr."Cod. Divisa", pwCodDiv, lwImp),
            //-$018               lrDivisa."Amount Rounding Precision");

          //+$018
          IF (lwImp <> 0) AND (lrCbr."Cod. Divisa" <> pwCodDiv) THEN
            lwImp := ROUND(rCamb.ExchangeAmtFCYToFCY(lrCbr."Fecha cambio cobro", lrCbr."Cod. Divisa", pwCodDiv, lwImp),
                           lrDivisa."Amount Rounding Precision");
          //+$018

          lwTotal += lwImp;
        UNTIL lrCbr.NEXT=0;
      END;

      EXIT(lwTotal);
    END;

    PROCEDURE GetReembolsoExentoOld@1100253008(pwCodDiv@1100253001 : Code[10];pwTipo@1100253005 : 'Ambos,Adultos,Ni¤os') : Decimal;
    VAR
      lrDivisa@1100253004 : Record 4;
      lrCbr@1100253000 : Record 7010240;
      lwImp@1100253002 : Decimal;
      lwTotal@1100253003 : Decimal;
    BEGIN
      // GetReembolsoExento
      // Devuelve el importe Reembolsado exento de impuestos en la Divisa pasada por parametro pwCodDiv

      CLEAR(lwTotal);

      lrCbr.RESET;
      lrCbr.SETRANGE(Delegacion    , Delegacion);
      lrCbr.SETRANGE("Num Reserva" , "N§ Reserva");
      IF lrCbr.FINDSET THEN BEGIN
        lrCbr.TESTFIELD("Fecha cambio cobro");
        REPEAT
          CLEAR(lwImp);
          IF pwTipo IN [pwTipo::Ambos, pwTipo::Adultos] THEN
            lwImp := lrCbr."Reembolsado adultos exento";
          IF pwTipo IN [pwTipo::Ambos, pwTipo::Ni¤os] THEN
            lwImp += lrCbr."Reembolsado ni¤os exento";

          IF pwCodDiv <> '' THEN
            lrDivisa.GET(pwCodDiv);

          IF (lwImp <> 0) AND (lrCbr."Cod. Divisa" <> pwCodDiv) THEN
            lwImp := ROUND(rCamb.ExchangeAmtFCYToFCY(lrCbr."Fecha cambio cobro", lrCbr."Cod. Divisa", pwCodDiv, lwImp),
                           lrDivisa."Amount Rounding Precision");
          lwTotal += lwImp;
        UNTIL lrCbr.NEXT = 0;
      END;

      EXIT(lwTotal);
    END;

    PROCEDURE EsRepresentanteCredito@1100253004() : Boolean;
    VAR
      lrRep@1100253000 : Record 7010241;
    BEGIN
      // EsRepresentanteCredito

      CLEAR(lrRep);
      IF lrRep.GET("Guia Venta") THEN
        EXIT(lrRep."Trabaja a credito");
    END;

    LOCAL PROCEDURE _CheckRepresentanteBloqueado@1100253005();
    VAR
      lrRep@1100253000 : Record 7010241;
    BEGIN
      // _CheckGuiaVentaHotel

      IF "Guia Venta" = '' THEN
        EXIT;

      lrRep.RESET;
      lrRep.GET("Guia Venta");
      lrRep.TESTFIELD(Bloqueado, FALSE);
    END;

    LOCAL PROCEDURE _UltimaFechaCambio@1100253006();
    VAR
      lrCurrExch@1100253000 : Record 330;
    BEGIN
      // _UltimaFechaCambio

      //. Creada por : AJS
      //. Creada dia : 09/05/2011
      //. Rellenar el campo Fecha Cambio con la ultima fecha de cambio registrada en contabilidad

      IF Divisa = '' THEN
        EXIT;

      IF ("N§ liquidacion GV" <> 0) THEN
        EXIT;

      //+$022
      IF "Fecha cambio" <> 0D THEN
        EXIT;
      //+$022

      lrCurrExch.RESET;
      lrCurrExch.SETRANGE ("Currency Code", Divisa);
      lrCurrExch.SETFILTER("Starting Date", '<=%1', "Fecha Venta"); //+$053
      lrCurrExch.FINDLAST;

      "Fecha cambio" := lrCurrExch."Starting Date";
    END;

    PROCEDURE BorraReservasSoporte@1100253007();
    VAR
      lrResSop@1100253000 : Record 7010214;
    BEGIN
      // BorraReservasSoporte
      // $025

      CLEAR(lrResSop);
      lrResSop.SETRANGE(Delegacion   , Delegacion);
      lrResSop.SETRANGE("N§ Servicio", "N§ Servicio");
      lrResSop.SETRANGE("N§ Reserva" , "N§ Reserva");
      IF lrResSop.FINDFIRST THEN
        lrResSop.DELETEALL;
    END;

    PROCEDURE CntrlGuiaTTOO@1100253009();
    VAR
      lrRelGT@1100253000 : Record 7010092;
      lrRep@1000000000 : Record 7010241;
    BEGIN
      // CntrlGuiaTTOO
      // $027
      // Controlamos los touroperadores con los que puede trabajar el Guia de Venta

      IF ("Guia Venta" = '') OR (TourOperador = '') THEN
        EXIT;

      CLEAR(lrRelGT);
      lrRelGT.SETRANGE("Guia Venta", "Guia Venta");
      IF lrRelGT.ISEMPTY THEN
        EXIT;

      IF NOT lrRelGT.GET("Guia Venta", TourOperador) THEN
        ERROR(Text037,"Guia Venta", TourOperador);

      // +$102 Si la reserva es contado no se puede seleccionar guia a credito
      lrRep.RESET;
      lrRep.GET("Guia Venta");
      IF (NOT "Reserva a credito") AND (lrRep."Trabaja a credito") THEN
        ERROR(Text054,"Guia Venta");
    END;

    PROCEDURE AsignaGuia@1100253010(pwGuiaVenta@1100253000 : Code[20]);
    BEGIN
      // AsignaGuia
      // $027
      // No valida el campo, solo lo asigna, sin embargo controla el touropeador

      IF "Guia Venta" <> pwGuiaVenta THEN BEGIN
        "Guia Venta" := pwGuiaVenta;
        CntrlGuiaTTOO;
      END;
    END;

    PROCEDURE GetColor@1100253012() : Integer;
    VAR
      lwCol@1100253000 : Integer;
    BEGIN
      // GetColor
      // Devuelve el color que debe de mostrar

      //+$055 <
      IF Anulada OR Reembolsada THEN
        EXIT;
      //+$055 >

      CLEAR(lwCol);
      IF rExc.Codigo <> Producto THEN BEGIN
        IF NOT rExc.GET(Producto) THEN
          CLEAR(rExc);
      END;

      IF rExc."Precisa confirmacion proveedor" THEN
      BEGIN
        IF "Confirmacion proveedor"='' THEN
          lwCol := 200; //Rojo
      END;

      EXIT(lwCol);
    END;

    PROCEDURE ControlConfirProv@1100253011(pwError@1100253002 : Boolean) : Boolean;
    VAR
      lwConf@1100253000 : Boolean;
      lrExc@1100253001 : Record 7009710;
    BEGIN
      // ControlConfirProv

      // Devuelve true si el proveedor est  confirmado o si no precisa de confirmaci¢n
      // Si pwError genera una excepci¢n en caso de que no tenga la confirmaci¢n y la precise.

      lwConf:= TRUE;
      CLEAR(lrExc);
      IF NOT lrExc.GET(Producto) THEN
        CLEAR(lrExc);

      IF lrExc."Precisa confirmacion proveedor" THEN
        lwConf := "Confirmacion proveedor" <> '';

      IF pwError AND (NOT lwConf) THEN
        ERROR(Text038, "N§ Ticket");


      EXIT(lwConf);
    END;

    PROCEDURE SetInfPaxSop@1100253013();
    VAR
      lrPersTS@1100253000 : Record 7010214;
    BEGIN
      // SetInfPaxSop
      // $025
      // Traspasa la informaci¢n de la reserva a las lineas de Persona Transporte soporte

      CLEAR(lrPersTS);
      lrPersTS.SETCURRENTKEY(Delegacion, "N§ Reserva");
      lrPersTS.SETRANGE(Delegacion  , Delegacion);
      lrPersTS.SETRANGE("N§ Reserva", "N§ Reserva");
      IF lrPersTS.FINDSET THEN BEGIN
        REPEAT
          lrPersTS.ResvInfo(Rec);
          lrPersTS.MODIFY;
        UNTIL lrPersTS.NEXT = 0;
      END;
    END;

    PROCEDURE SetOficina@1100217000(pwCampoOrigen@1100217001 : Integer);
    VAR
      lrProd@1100217000 : Record 7009710;
      lrRep@1100217002 : Record 7010241;
    BEGIN
      // SetOficina
      // $031 // Rellenamos la oficina de la excursion

      CASE pwCampoOrigen OF
        FIELDNO(Producto):
        BEGIN
          //+$042
          //. Si el guia de venta tiene oficina, manda su oficina

          IF lrRep.GET("Guia Venta") THEN
          BEGIN
            IF lrRep."Oficina ventas" = '' THEN
            BEGIN
              Oficina := '';

              CLEAR(lrProd);
              IF lrProd.GET(Producto) THEN BEGIN
                Oficina := lrProd.Oficina;
                cFun.ControlExcursionConOficinaProd(lrProd, TRUE, TRUE);
              END;
            END;
          END
          //+$070 <
          ELSE
          BEGIN
            CLEAR(lrProd);
            IF lrProd.GET(Producto) THEN BEGIN
              Oficina := lrProd.Oficina;
              cFun.ControlExcursionConOficinaProd(lrProd, TRUE, TRUE);
            END;
          END;
          //+$070 >
        END;
        //+$042 <
        FIELDNO("Guia Venta"):
        BEGIN
          IF lrRep.GET("Guia Venta") THEN
          BEGIN
            IF lrRep."Oficina ventas" <> '' THEN
              Oficina := lrRep."Oficina ventas";
          END;
        END;
        //+$042 >
      END;
    END;

    PROCEDURE FiltraOficinaUsuario@1100217001();
    VAR
      lrUser@1100217000 : Record 91;
    BEGIN
      // FiltraOficinaUsuario
      // $031 Aplicamos el filtro de oficina configurado por usuario, si es que lo tiene
      // Tengase en cuenta que esta funcion no tiene en cuenta la clave actual

      rPar.FINDFIRST;
      IF NOT rPar."Oficina Excursion Obligatoria" THEN
        EXIT;

      IF NOT lrUser.GET(USERID) THEN
        EXIT;

      IF lrUser."Oficina Excursiones" ='' THEN
        EXIT;

      // Cambiamos el grupo de filtrado, Asi no podria quitarse el filtro y podran solaparse filtros adicionales
      FILTERGROUP(2);
      SETRANGE(Oficina, lrUser."Oficina Excursiones");
      FILTERGROUP(0); // Devolvemos a su grupo de filtrado origina
    END;

    PROCEDURE ComprobacionesTicket@1100217003();
    VAR
      lrTalonario@1100217000 : Record 7010146;
    BEGIN
      // ComprobacionesTicket

      IF NOT "Reserva online" THEN
      BEGIN
        lrTalonario.a¤ade_ceros("N§ Ticket", Oficina);

        // Comprobamos a que guia de venta esta asignado el n§ de ticket y si esta asignado a un
        // touroperador, comprueba con el de la reserva. Actualizamos el estado del talonario
        // de activo a abierto y de abierto a cerrado.

        lrTalonario.RESET;
        lrTalonario.SETRANGE (Activo             , TRUE);
        lrTalonario.SETFILTER("N§ Ticket inicial", '<=%1', "N§ Ticket");
        lrTalonario.SETFILTER("N§ Ticket final"  , '>=%1', "N§ Ticket");
        IF NOT lrTalonario.FINDFIRST THEN
          ERROR(Text016);

        IF (lrTalonario.TourOperador <> TourOperador) AND (lrTalonario.TourOperador <> '') THEN
          ERROR(Text014);

        IF STRLEN("N§ Ticket") <> STRLEN(lrTalonario."N§ Ticket final") THEN
          ERROR(Text015);

        IF "N§ Ticket" > lrTalonario."Ultimo utilizado" THEN BEGIN
          lrTalonario."Ultimo utilizado" := "N§ Ticket";
          lrTalonario.MODIFY;
        END;

        IF lrTalonario.Estado = lrTalonario.Estado::Entregado THEN BEGIN
          lrTalonario.Estado := lrTalonario.Estado::Activo;
          lrTalonario.MODIFY;
        END;

        IF comprobar_todos_utilizados(lrTalonario) THEN BEGIN
          lrTalonario.Estado := lrTalonario.Estado::Cerrado;
          lrTalonario.MODIFY;
        END;

        "Guia Venta" := lrTalonario."Guia Venta";
      END;

      //"Reserva a credito" := EsRepresentanteCredito; //$059  // -$102

      CntrlGuiaTTOO; // $027

      _CheckRepresentanteBloqueado; //$011

      _CheckGuiaVentaHotel; //$001

      _CheckTicketDuplicado; //+$060

      _ControlOrdenTicket(lrTalonario);

      SetOficina( FIELDNO("Guia Venta") ); //+$042

      _UpdateGuiaCobros; //+$089
    END;

    LOCAL PROCEDURE _ControlOrdenTicket@1100217004(prTalonario@1100217001 : Record 7010146);
    VAR
      lrRsv@1100217000 : Record 7010162;
      lrGuia@1100217002 : Record 7010241;
    BEGIN
      // _ControlOrdenTicket

      rPar.FINDFIRST;
      IF NOT rPar."Introducir tickets en orden" THEN
        EXIT;

      //. Los guias a credito se excluyen de este control

      IF lrGuia.GET("Guia Venta") THEN
        IF lrGuia."Trabaja a credito" THEN
          EXIT;

      //. Si es el primer ticket del talonario no hay verificacion de orden

      IF prTalonario."N§ Ticket inicial" = "N§ Ticket" THEN
        EXIT;

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("N§ Ticket");
      lrRsv.SETRANGE ("Guia Venta", "Guia Venta");
      lrRsv.SETFILTER("N§ Reserva", '<>%1', "N§ Reserva");
      IF NOT lrRsv.FINDLAST THEN
        EXIT;

      IF "N§ Ticket" <> INCSTR(lrRsv."N§ Ticket") THEN
        ERROR(Text041);
    END;

    LOCAL PROCEDURE _ActualizaSuplAutomatico@1100217002();
    VAR
      lrSupl@1100217000 : Record 7010165;
    BEGIN
      // _ActualizaSuplAutomatico

      lrSupl.RESET;
      lrSupl.SETRANGE(Delegacion  , Delegacion);
      lrSupl.SETRANGE("N§ Reserva", "N§ Reserva");
      lrSupl.SETRANGE(Automatico  , TRUE);
      IF lrSupl.FINDSET(TRUE) THEN
      BEGIN
        //-$109lrSupl.MODIFYALL(Cantidad, "N§ Personas");
        lrSupl.MODIFYALL(Adultos , Adultos);
        lrSupl.MODIFYALL(Ni¤os   , Ni¤os);
      END;
    END;

    LOCAL PROCEDURE _CheckCalendar@1100217005();
    VAR
      lrCalendar@1100217000 : Record 7010254;
    BEGIN
      // _CheckCalendar

      IF (Producto = '') OR
         ("Fecha Excursion" = 0D) THEN
        EXIT;

      lrCalendar.RESET;
      lrCalendar.SETRANGE (Excursion     , Producto);
      lrCalendar.SETRANGE (Turno         , "Turno Excursion"); //+$088
      lrCalendar.SETFILTER("Fecha inicio", '<=%1', "Fecha Excursion");
      lrCalendar.SETFILTER("Fecha final" , '>=%1', "Fecha Excursion");
      IF NOT lrCalendar.FINDFIRST THEN
      BEGIN
        lrCalendar.SETRANGE ("Fecha inicio");
        lrCalendar.SETFILTER("Fecha final", '>=%1', "Fecha Excursion");
        IF lrCalendar.FINDFIRST THEN
          ERROR(Text043, Producto);
        EXIT;
      END;

      CASE DATE2DWY("Fecha Excursion", 1) OF
        1:
        BEGIN
         IF NOT lrCalendar.Lunes THEN
           ERROR(Text043, Producto);
        END;
        2:
        BEGIN
         IF NOT lrCalendar.Martes THEN
           ERROR(Text043, Producto);
        END;
        3:
        BEGIN
         IF NOT lrCalendar.Miercoles THEN
           ERROR(Text043, Producto);
        END;
        4:
        BEGIN
         IF NOT lrCalendar.Jueves THEN
           ERROR(Text043, Producto);
        END;
        5:
        BEGIN
         IF NOT lrCalendar.Viernes THEN
           ERROR(Text043, Producto);
        END;
        6:
        BEGIN
         IF NOT lrCalendar.Sabado THEN
           ERROR(Text043, Producto);
        END;
        7:
        BEGIN
         IF NOT lrCalendar.Domingo THEN
           ERROR(Text043, Producto);
        END;
      END;

      _CheckIdioma(lrCalendar); // +$092
    END;

    LOCAL PROCEDURE _CheckFechaAnterior@1100217006(pwFecha@1100217000 : Date);
    BEGIN
      // _CheckFechaAnterior

      IF pwFecha = 0D THEN
        EXIT;

      IF pwFecha >= WORKDATE THEN
        EXIT;

      IF GUIALLOWED THEN
        IF NOT CONFIRM(Text045) THEN
          ERROR('');
    END;

    LOCAL PROCEDURE _CheckTicketDuplicado@1100217007();
    VAR
      lrRsv@1100217000 : Record 7010162;
    BEGIN
      // _CheckTicketDuplicado

      IF "N§ Ticket" <> '' THEN BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("N§ Ticket");
        lrRsv.SETRANGE ("N§ Ticket" , "N§ Ticket");
        lrRsv.SETFILTER("N§ Reserva", '<>%1', "N§ Reserva");
        IF lrRsv.FINDFIRST THEN
          ERROR(Text002,
                lrRsv."Fecha Excursion", lrRsv.Producto, lrRsv."N§ Reserva");
      END;
    END;

    PROCEDURE CheckFueraCupo@1100217009(pwCambioPlazas@1100217006 : Boolean;pwError@1000000000 : Boolean) : Boolean;
    VAR
      lrCupo@1100217000 : Record 7010265;
      lrExc@1100217001 : Record 7009710;
      lrRsv@1100217007 : Record 7010162;
      lwReservas@1100217002 : Integer;
      lwCantidad@1100217003 : Integer;
      lwCantidadAnt@1100217004 : Integer;
      lwPorVehiculo@1100217008 : Boolean;
    BEGIN
      // CheckFueraCupo

      //. @retorno, devuelve TRUE si la reserva esta fuera de cupo

      //. Primero comprobamos si los campos necesarios estan rellenados

      IF (Producto = '') OR
         ("Fecha Excursion" = 0D) OR
         (TourOperador = '') THEN
        EXIT;

      //. Si la excursion es de venta libre no hay cupos
      IF rExc.CheckVentaLibre(Producto) THEN
        EXIT;

      //. Busco el registro de reserva para tener el "autentico" xRec y que no se vea afectado el control
      //. por varios cambios de plazas sin pasar por el modify
      IF NOT lrRsv.GET(Delegacion, "N§ Reserva") THEN
        CLEAR(lrRsv);

      //. Comprobamos si existen condiciones de cupo

      lrCupo.RESET;
      lrCupo.SETRANGE (Excursion    , Producto);
      lrCupo.SETRANGE (Turno        , "Turno Excursion");
      lrCupo.SETRANGE (Touroperador , TourOperador);
      lrCupo.SETFILTER("Fecha desde", '<=%1', "Fecha Excursion");
      lrCupo.SETFILTER("Fecha hasta", '>=%1', "Fecha Excursion");
      lrCupo.SETRANGE (Idioma       , Idioma); // +$092 Primero se debe comprobar si hay cupo para el idioma
      IF NOT lrCupo.FINDSET THEN
        lrCupo.SETRANGE (Idioma     , ''); // +$092 Si no se encuntra para el idioma se filtra por idioma en blanco
        IF NOT lrCupo.FINDSET THEN
          EXIT;

      //. Dependiendo de la excursion vamos a comprobar personas o vehiculos
      IF rExc.CheckVentaVehiculo(Producto) THEN
      BEGIN
        IF "Num. Vehiculos" = 0 THEN
          EXIT;
        lwCantidadAnt := lrRsv."Num. Vehiculos";
        lwCantidad    := "Num. Vehiculos" - "Vehiculos Reembolsados"; // $076
        lwPorVehiculo := TRUE;
      END
      ELSE
      BEGIN
        IF "N§ Personas" = 0 THEN
          EXIT;
        lwCantidadAnt := lrRsv."N§ Personas";
        lwCantidad    := "N§ Personas" - "Personas Reembolsadas"; // $076
        lwPorVehiculo := FALSE;
      END;

      // $084 Comprobamos el release
      IF lrCupo.Release <> 0 THEN
      BEGIN
        IF ("Fecha Excursion" - "Fecha Venta") <= lrCupo.Release THEN
        BEGIN
          IF pwError THEN
            ERROR(Text052)
          ELSE
            EXIT(TRUE);
        END;
      END;

      //. Comprobamos si la reserva esta dentro del cupo
      //+$095
      IF lwPorVehiculo THEN
        lwReservas := lrExc.GetVehiculosRsvServicio(Producto, "Turno Excursion", TourOperador, "Fecha Excursion", "Fecha Excursion")
      ELSE
        lwReservas := lrExc.GetPersonasRsvServicio(Producto, "Turno Excursion", TourOperador, "Fecha Excursion", "Fecha Excursion");

      IF pwCambioPlazas THEN
        lwReservas += (lwCantidad - lwCantidadAnt)
      ELSE
        lwReservas += lwCantidad;

      IF lwReservas > lrCupo.Cupo THEN BEGIN
        IF pwError THEN BEGIN
          ERROR(Text048);
        END ELSE BEGIN
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetReembolso@1000000000(pwCodDiv@1100253001 : Code[10];pwTipo@1100253005 : 'Importe,Importe divisa reserva,Personas,Adultos,Ni¤os,Importe Neto divisa reserva';pFecIni@1000000000 : Date;pFecFin@1000000001 : Date) : Decimal;
    VAR
      lrDivisa@1100253004 : Record 4;
      lrReemb@1100253000 : Record 7010266;
      lrDetReemb@1000000002 : Record 7010267;
      lwImp@1100253002 : Decimal;
      lwTotal@1100253003 : Decimal;
    BEGIN
      // GetReembolso
      // Devuelve el importe o numero de personas Reembolsado en la Divisa pasada por parametro pwCodDiv

      CLEAR(lwTotal);
      IF (pwTipo = pwTipo::Importe) OR (pwTipo = pwTipo::"Importe divisa reserva") OR
         (pwTipo = pwTipo::"Importe Neto divisa reserva") THEN BEGIN
        lrDetReemb.RESET;
        lrDetReemb.SETRANGE(Delegacion       , Delegacion);
        lrDetReemb.SETRANGE("Num Reserva"    , "N§ Reserva");
        lrDetReemb.SETRANGE("Fecha reembolso", pFecIni, pFecFin);
        IF lrDetReemb.FINDSET THEN
        BEGIN
          REPEAT
            CLEAR(lwImp);
            CASE pwTipo OF
              pwTipo::Importe:
                BEGIN
                  lwImp := lrDetReemb.Importe;
                  IF pwCodDiv <> '' THEN
                    lrDivisa.GET(pwCodDiv);
                  IF (lwImp <> 0) AND (lrDetReemb."Cod. Divisa" <> pwCodDiv) THEN
                    lwImp := ROUND(rCamb.ExchangeAmtFCYToFCY(lrDetReemb."Fecha reembolso", lrDetReemb."Cod. Divisa", pwCodDiv, lwImp),
                                   lrDivisa."Amount Rounding Precision");
                END;
              pwTipo::"Importe divisa reserva":
                BEGIN
                  lwImp := lrDetReemb."Importe Divisa Reserva";
                END;
              pwTipo::"Importe Neto divisa reserva":
                BEGIN
                  lwImp := lrDetReemb."Importe Neto Divisa Reserva";
                END;
            END;

            lwTotal += lwImp;
          UNTIL lrDetReemb.NEXT=0;
        END;
      END
      ELSE
      BEGIN
        lrReemb.RESET;
        lrReemb.SETRANGE(Delegacion       , Delegacion);
        lrReemb.SETRANGE("Num Reserva"    , "N§ Reserva");
        lrReemb.SETRANGE("Fecha Reembolso", pFecIni, pFecFin);
        IF lrReemb.FINDSET THEN
        BEGIN
          REPEAT
            CLEAR(lwImp);
            IF pwTipo IN [pwTipo::Personas, pwTipo::Adultos] THEN
              lwImp := lrReemb."Adultos Reembolsados";
            IF pwTipo IN [pwTipo::Personas, pwTipo::Ni¤os] THEN
              lwImp += lrReemb."Ni¤os Reembolsados";

            lwTotal += lwImp;
          UNTIL lrReemb.NEXT = 0;
        END;
      END;
      EXIT(lwTotal);
    END;

    PROCEDURE CalcReembNeto@1000000001();
    VAR
      lrCli@1103355002 : Record 18;
      lrIVAVta@1103355003 : Record 325;
      lrSupl@1100217000 : Record 7010165;
      lrRep@1100217001 : Record 7010241;
      lwIVA@1100253000 : Decimal;
      prTarifa@1000000000 : Record 7010147;
      prRsv@1000000001 : Record 7010162;
    BEGIN
      // busca_importes_netos

      prTarifa.RESET;
      busca_tarifa(prTarifa);

      lrRep.GET("Guia Venta");
      lrCli.GET(lrRep."Cliente Facturacion");

      lrIVAVta.GET(lrCli."VAT Bus. Posting Group", prTarifa."Gr. Registro IVA Producto");

      IF prTarifa."Impuestos Incluidos" THEN BEGIN
        lwIVA := 1 + ROUND(lrIVAVta."VAT+EC %" / 100);

        "Importe Reembolsado Neto" := "Importe Reembolsado"  / lwIVA;
      END;
    END;

    PROCEDURE Pedir_Turno@1000000002();
    VAR
      rCalendario@1000000000 : Record 7010254;
    BEGIN
      // $079

      IF (Producto <> '') AND ("Fecha Excursion" <> 0D) THEN
      BEGIN
        rCalendario.RESET;
        rCalendario.SETRANGE (Excursion     , Producto);
        rCalendario.SETFILTER("Fecha inicio", '<=%1', "Fecha Excursion");
        rCalendario.SETFILTER("Fecha final" , '>=%1', "Fecha Excursion");
        CASE DATE2DWY("Fecha Excursion", 1) OF
          1: rCalendario.SETRANGE(rCalendario.Lunes, TRUE);
          2: rCalendario.SETRANGE(rCalendario.Martes, TRUE);
          3: rCalendario.SETRANGE(rCalendario.Miercoles, TRUE);
          4: rCalendario.SETRANGE(rCalendario.Jueves, TRUE);
          5: rCalendario.SETRANGE(rCalendario.Viernes, TRUE);
          6: rCalendario.SETRANGE(rCalendario.Sabado, TRUE);
          7: rCalendario.SETRANGE(rCalendario.Domingo, TRUE);
        END;
        IF rCalendario.FINDFIRST THEN
        BEGIN
          IF rCalendario.GetNumTurnos(Producto, "Fecha Excursion") = 1 THEN
          BEGIN
            "Turno Excursion" := rCalendario.Turno;
          END
          ELSE
          BEGIN
            //. A los servicios WEB no les podemos mostrar la ventana
            IF GUIALLOWED THEN
            BEGIN
              IF FORM.RUNMODAL(0, rCalendario) = ACTION::LookupOK THEN
                "Turno Excursion" := rCalendario.Turno
              ELSE
                ERROR(Text051);
            END;
          END;
        END
        //. Si no encontramos calendario para el dia hay que ver si esta excursion tiene algun calendario
        //. y en ese caso dar un error
        ELSE
        BEGIN
          rCalendario.RESET;
          rCalendario.SETRANGE (Excursion     , Producto);
          rCalendario.SETFILTER("Fecha final" , '>=%1', "Fecha Excursion");
          IF rCalendario.FINDFIRST THEN
            ERROR(Text050);
        END;
      END;
    END;

    PROCEDURE busca_oferta_online@1000000003();
    VAR
      w_adultos@1103355002 : Integer;
      w_ni¤os@1103355003 : Integer;
      w_DescAdulto@1000000001 : Decimal;
      w_DescNi¤o@1000000002 : Decimal;
      rOferta@1000000000 : Record 7010269;
    BEGIN
      // busca_oferta_online $081

      IF NOT "Reserva online" THEN
        EXIT;

      w_adultos := Adultos - "Venta - Invitados Adultos";
      w_ni¤os   := Ni¤os - "Venta - Invitados ni¤os";

      rOferta.RESET;
      rOferta.SETCURRENTKEY(TourOperador, Excursion, "Turno Excursion", "Fecha servicio desde",
                            "Fecha servicio hasta", "Fecha venta desde", "Fecha venta hasta");
      rOferta.SETRANGE (TourOperador          , TourOperador);
      rOferta.SETRANGE (Excursion             , Producto);
      rOferta.SETRANGE ("Turno Excursion"     , "Turno Excursion");
      rOferta.SETFILTER("Fecha servicio desde", '<=%1', "Fecha Excursion");
      rOferta.SETFILTER("Fecha servicio hasta", '>=%1', "Fecha Excursion");
      rOferta.SETFILTER("Fecha venta desde"   , '<=%1', "Fecha Venta");
      rOferta.SETFILTER("Fecha venta hasta"   , '>=%1', "Fecha Venta");
      IF NOT rOferta.FINDFIRST THEN
        rOferta.SETRANGE(rOferta.TourOperador, '');

      IF rOferta.FINDFIRST THEN
      BEGIN
        IF rOferta.Porcentaje THEN
        BEGIN
          w_DescAdulto := ROUND("Precio Adulto" * rOferta."Precio adulto" / 100);
          w_DescNi¤o   := ROUND("Precio Ni¤o" * rOferta."Precio ni¤o" / 100);
        END
        ELSE
        BEGIN
          w_DescAdulto := rOferta."Precio adulto";
          w_DescNi¤o   := rOferta."Precio ni¤o";
        END;

        "Ingreso reserva" += (w_DescAdulto * w_adultos) + (w_DescNi¤o * w_ni¤os);
        wBaseReserva      += ((w_DescAdulto * w_adultos) + (w_DescNi¤o * w_ni¤os));

        "Ingreso Adulto" += (w_DescAdulto * w_adultos);
        wBaseAdultos     += (w_DescAdulto * w_adultos);
        "Precio Adulto"  += w_DescAdulto;
        wPrecioBaseAd    += w_DescAdulto;

        "Ingreso Ni¤o"   += (w_DescNi¤o * w_ni¤os);
        wBaseNi¤os       += (w_DescNi¤o + w_ni¤os);
        "Precio Ni¤o"    += w_DescNi¤o;
        wPrecioBaseNi    += w_DescNi¤o;

        rDetEco."Ingreso reserva" += (w_DescAdulto * w_adultos) + (w_DescNi¤o * w_ni¤os);
      //  rDetEco."Ingreso exento"  += (w_Desc * w_adultos) + (rPreVta."Precio ni¤o exento" * w_ni¤os);
        rDetEco."Ingreso base"    += (w_DescAdulto * w_adultos) + (w_DescNi¤o * w_ni¤os);

        rDetEco."Ingreso adultos"        += (w_DescAdulto * w_adultos);
      //  rDetEco."Ingreso adultos exento" += (rPreVta."Precio adulto exento" * w_adultos);
        rDetEco."Ingreso adultos base"   += (w_DescAdulto * w_adultos);
        rDetEco."Precio adulto"          += w_DescAdulto;
      //  rDetEco."Precio adulto exento"   += rPreVta."Precio exento";

        rDetEco."Ingreso ni¤os"          += (w_DescNi¤o * w_ni¤os);
      //  rDetEco."Ingreso ni¤os exento"   += (rPreVta."Precio ni¤o exento" * w_ni¤os);
        rDetEco."Ingreso ni¤os base"     += (w_DescNi¤o * w_ni¤os);
        rDetEco."Precio ni¤o"            += w_DescNi¤o;
      //  rDetEco."Precio ni¤o exento"     += rPreVta."Precio exento";
      END;
    END;

    LOCAL PROCEDURE _GetHoraRecogida@1000000005();
    VAR
      lrHoraExc@1000000001 : Record 7010184;
    BEGIN
      // _GetHoraRecogida

      IF (lrHoraExc.GET("Hotel Cliente", Producto, "Turno Excursion")) AND
         (lrHoraExc."Hora recogida" <> 0T) THEN
       VALIDATE("Hora Recogida", lrHoraExc."Hora recogida");
    END;

    LOCAL PROCEDURE _UpdateGuiaCobros@1000000004();
    VAR
      lrCobro@1000000000 : Record 7010240;
    BEGIN
      // _UpdateGuiaCobros

      lrCobro.RESET;
      lrCobro.SETRANGE(Delegacion   , Delegacion);
      lrCobro.SETRANGE("Num Reserva", "N§ Reserva");
      IF lrCobro.FINDSET(TRUE) THEN
        lrCobro.MODIFYALL("Guia venta", "Guia Venta");
    END;

    LOCAL PROCEDURE _CheckIdioma@1000000006(pCalendar@1000000000 : Record 7010254);
    VAR
      rIdiomas@1000000001 : Record 7010002;
    BEGIN
      // _CheckIdioma
      // $092

      IF Idioma <> '' THEN BEGIN
        rIdiomas.RESET;
        rIdiomas.SETRANGE(rIdiomas.Excursion, pCalendar.Excursion);
        rIdiomas.SETRANGE(rIdiomas."Fecha inicio", pCalendar."Fecha inicio");
        rIdiomas.SETRANGE(rIdiomas."Fecha final", pCalendar."Fecha final");
        rIdiomas.SETRANGE(rIdiomas.Turno, pCalendar.Turno);
        IF rIdiomas.FINDFIRST THEN BEGIN
          rIdiomas.SETRANGE(rIdiomas.Idioma, Idioma);
          IF NOT rIdiomas.FINDFIRST THEN
            ERROR(Text053,Idioma);
        END;
      END;
    END;

    LOCAL PROCEDURE _SetTicketNumber@1000000007() : Code[10];
    VAR
      lrTTOO@1100217002 : Record 7009717;
      lrRep@1100217001 : Record 7010241;
      NoSeriesMgt@1100217004 : Codeunit 396;
    BEGIN
      // _GetTicketNumber

      // +$102
      // Si es reserva a credito usamos el guia venta por defecto del TTOO y rellenamos el Numero de ticket autom tico
      IF NOT "Reserva a credito" THEN
        EXIT;

      //. Comprobaremos que el touroperador existe y tengo el representante web configurado
      lrTTOO.GET(TourOperador);
      lrTTOO.TESTFIELD("Representante credito");
      "Guia Venta" := lrTTOO."Representante credito";

      //. Comprobamos que el representante existe y tiene configurada la serie
      lrRep.GET("Guia Venta");
      lrRep.TESTFIELD("Serie tickets externos");

      //. Buscamos el siguiente numero de ticket
      IF "N§ Ticket" = '' THEN
        "N§ Ticket" := ( NoSeriesMgt.GetNextNo(lrRep."Serie tickets externos", TODAY, TRUE));
    END;

    BEGIN
    {
      $001 AJS 10122010 Incluir un nuevo control de que el guia de la reserva coincida con el guia asignado en el hotel

      $002 AJS 16122010 En el control de guia reserva/hotel, hay un caso especial de los guias que venden en multiples
                        hoteles.

      $003 AJS 28122010 En la funcion de calculo reserva dejo a cero los campos de importe neto

      $004 AJS 17012011 Nueva funcion ControlEdicion, no se puede editar una reserva que tenga rellenado el numero de servicio

      $005 AJS 18012011 En la funcion Calcular_reserva no se recalculan las reservas anuladas o reembolsadas

      $007 AJS 09032011 Modifico la funcion GetReembolso para hacer un round en la conversion entre divisas

      $008 AJS 09032011 Modifico los nombre de los campos que hacian referencia a liquidacion anul/reem para
                        que solo digan Reembolso porque los tickets anulados no se liquidan.

      $010 AJS 25032011 Crea funcion _CheckRepresentanteBloqueado para que al modificar una reserva compruebe si
                        el representante esta marcado como bloqueado

      $011 AJS 28032011 Pongo una llamada a la funcion _CheckRepresentanteBloqueado en OnValidate N§ Ticket para bloquear
                        de inmediato la reserva

      $012 AJS 06032011 Modifico la funcion CompruebaCobro para que permita la divisa en blanco

      $013 AJS 02052011 Modifico la funcion Calcular_reserva para incluir un Modify antes de llamar a la funcion de cobro

      $014 AJS 09052011 Modifico la funcion Calcular_reserva para controlar que los campos necesarios este rellenados antes
                        de seguir con el calculo

      $015 AJS 09052011 Modifico el modo en que se obtiene la fecha de cambio para que sea siempre la ultima fecha de cambio
                        creada dentro de NAV. Elimino los parametros de la funcion TipoCambioDivisa porque son obsoletos.

      $016 AJS 11052011 Modifico la funcion calcula_comisionTO para que ademas de buscar el precio se calcule la comision

      $017 AJS 21062011 Modifico la funcion aplica_suplemento_importe para cambiar el modo en que se
                        calcula el precio adulto y el precio ni¤o

      $018 AJS 24102011 Modifico la funcion GetReembolso para que aplique la fecha de cambio de cobro en lugar de la fecha
                        de cambio de la reserva

      $019 AJS 02112011 Modifico la funcion aplica_suplemento_importe para corregir un error de division por cero

      $020 AJS 10012012 Pongo el control de reserva confirmada dentro de la funcion ControlEdicion

      $021 JPT INC-59916 Separar importe reembolsado en Importe Reembolsado Adulto e Importe Reembolsado Ni¤o.
                         Afecta a GetReembolso al que se le incorpora un nuevo parametro

      $022 AJS 02052012 Modifico la funcion _UltimaFechaCambio para que solo rellene la fecha de cambio una vez
                        de esta manera evitamos que se apliquen tipos de cambio posteriores a la fecha de la venta

      $023 AJS 08052012 Amplio el campo Delegacion a 20 caracteres porque el informe de ventas lo utiliza para un
                        temporal

      $024 AJS 16052012 Cambiar la gestion para obtener los importes netos de la reserva, hay que tener en cuenta que
                        parte del precio de venta puede estar exenta de impuestos

      $025 JPT 16/05/12 CNT-CAR-12004 / EXC-08 Transport support service

      $026 AJS 22052012 Nueva funcion GetReembolsoNeto para retornar el importe reembolsado sin los impuestos

      $027 JPT 16/05/12 CNT-CAR-12004 / Exc-13 Establish relation Sales Guides - Touroperator

      $028 AJS 28052012 Nueva tabla para almacenar el detalle economico de la reserva

      $029 JPT 29/05/12  CNT-CAR-12004/EXC-15 - Providers confirmations - Nuevo campo "Num. Confirmacion proveedor"

      $030 AJS 28062012 Calcular la comision del touroperador por adulto y ni¤os

      $031 JPT 08/08/12 CNT-OC-12004 Incluir filtro por oficina en las excursiones. Nuevo campo oficina

      $032 JPT 17/08/12 GOC-LP-12025 Hacer que los free no se reflejen en las facturas de venta de excursiones

      $033 AJS 20082012 Nueva funcion ComprobacionesTicket para llamarle desde los validates de Touroperador y ticket

      $034 JPT 06/09/12 CNT 12002 Permitir mas de un cobro por reserva de excursi¢n

      $035 AJS 12092012 Solo hay que retornar error de reserva asignada a servicio si estamos cambiando el producto o la fecha

      $036 AJS 21092012 Nuevo campo para almacenar el numero de factura que se genera al reembolsar un ticket
                        solo para aquellos casos que facturamos antes de confirmar el servicio

      $037 AJS 21092012 Nuevo campo "Cobros con problemas" para indicar reservas que temporalmente no se liquidan

      $038 AJS 02102012 Modifico la funcion busca_importes_netos para que busque el cliente en el representante, salvo en prevendidas

      $039 AJS 25102012 Modifico la funcion CompruebaCobro para trabajar con Importe recibido en lugar de Importe

      $040 AJS 25102012 Solo llamamos a la funcion ActualizaCobroReserva si la reserva cambia de ingreso

      $041 AJS 29102012 Permitimos introducir el ticket antes del touroperador para evitar un error al filtrar en la introduccion de
                        reservas, los controles estan en el codigo de ambos campos

      $042 AJS 29102012 Nueva posibilidad para rellenar la oficina de la reserva con la oficina de ventas relacionada con el guia

      $043 AJS 12112012 Marco los campos 43, 45 y 47 como obsoletos

      $044 AJS 13112012 Marcar los campos 143, 145 y 149 como obsoletos

      $045 AJS 21112012 El importe comisionable no debe tener en cuenta la parte exenta de impuestos

      $046 AJS 26112012 Modifico la funcion aplica_suplemento_importe para permitir precios manuales

      $047 AJS 03122012 Al rellenar excursion y fecha se verifica que la excursion este en la configuracion de calendario de la excursion

      $048 AJS 21122012 Rellenar el campo "Precio Descuento Touroperador" de la tabla Detalle economico

      $049 AJS 28122012 Cambio en clave de las tarifas de venta

      $050 AJS 03012012 Renombrar el campo "Num. Factura reembolso" por "Num. abono reembolso" que es mas logico

      $051 AJS 30012013 Cuando se cambia un ticket de una reserva solicitamos confirmacion al usuario

      $052 AJS 30012013 En funcion de un parametro tomamos la oficina del usuario al crear el ticket

      $053 AJS 13022013 La divisa de venta excursiones pasa a estar en un parametro para que no se produzcan incongruencias en las tarifas

      $054 AJS 19032013 Nuevos campos Guia venta y Fecha venta en el detalle economico

      $055 AJS 25032013 Modifico la funcion GetColor para que las reservas anuladas o reembolsadas no se pongan en rojo

      $056 AJS 11042013 Modifico para que no se pueda borrar una reserva con numero de ticket

      $057 AJS 12062013 He creado una nueva tabla de historico de modificaciones solo para excursiones

      $058 AJS 20062013 Modifico la funcion Calcula_comisionTO para dejar de utilizar el "Precio (DL)"

      $059 AJS 09072013 Renombrar el campo Reservado Touroperador por Reserva a credito, en funcion del guia

      $060 AJS 27082013 Nueva funcion _CheckTicketDuplicado para llamarla desde el campo N§ Ticket, Insert y Modify

      $061 AJS 28082013 Activo el historico de los campos "N§ liquidacion GV", "N§ liquidacion GV reembolso", "Num. Prefactura" y
                        "Num. Factura"

      $062 AJS 30082013 Elimino referencias a la tabla Elemento transportar excursion porque no es necesaria, el campo Personas es
                        obsoleto

      $063 AJS 03092013 Modifico la funcion calcula_comisionTO

      $064 AJS 01102013 Modifico la funcion ControlEdicion para que de error si la reserva est  prefacturada

      $065 AJS 16102013 Nuevo campo "Ticket Autonumerado" para saltar algunas comprobaciones en los tickets WEB/MOBILE

      $066 AJS 28112013 Modifico para que solo se llame a la calcula_personas desde los Validates de Adulto y Ni¤o

      $067 AJS 24032014 CNT-OC-14033, Modifico la funcion calcular_reserva para que llame a la funcion que calcula la prevision de coste

      $068 AJS 08052014 Corrijo el caption de Oficina

      $069 AJS 28052014 CNT-OC-14044, Modifico la funcion calcular_reserva para que se marque el periodo ICD si es necesario

      $070 AJS 11062014 Modifico la funcion SetOficina para que se rellene la oficina de la excursion mientras no tengamos guia venta

      $071 AJS 16062014 Modifico la funcion crea_suplementos para que funcione en base a fecha venta o servicio segun parametros

      $072 AJS 18062014 Cambio el nombre del campo "Ticket Autonumerado" por "Reserva online" que es m s claro

      $073 AJS 19062014 Rellenar los campos "Fecha Liquidacion GV" y "Liquidado GV" al rellenar "N§ liquidacion GV"

      $074 AJS 26062014 CNT-CAR-14073, Nuevo campo "Num. Vehiculos" para el control de cupos segun el tipo de excursion

      $075 MNC 01072014 CNT-OC-14027 Nuevo campo "No comisionable" para no calcular comisiones representante, TTOO y staff

      $076 ARM 24072014 CNT-OC-14047 Reembolsos parciales

      $077 AJS 07082014 Cambio en los reembolsos parciales para que fecha reembolso sea solo date

      $078 AJS 13082014 Modifico el LookUp de Importe reembolsado para abrir la consulta de reembolsos

      $079 ARM 25082014 CNT-CAR-14073 Turnos en excursiones

      $080 ARM 28082014 CNT-CAR-14073 Permisos modificaci¢n reservas online

      $081 ARM 29082014 CNT-CAR-14073 Ofertas online

      $082 AJS 10092014 CNT-CAR-14073, Agrego el campo Turno a la clave de [Delegacion, Fecha excursion, Producto], para los
                                       campos calculados de la hoja excursion

      $083 AJS 10092014 CNT-CAR-14073, Nueva clave [Fecha Excursion,Producto,Turno Excursion,N§ Servicio,Anulada,Reembolsada]

      $084 ARM 12092014 CNT-CAR-14082, Nuevo campo release en cupos y canal venta

      $085 AJS 24092014 Cambiar el nombre del campo N§ bono a Booking Touroperador

      $086 AJS 01102014 Corregir error al obtener Hora recogida cuando hay mas de un turno, aprovecho
                        para pasar el codigo a una funci¢n

      $087 AJS 02102014 Traducciones

      $088 AJS 08102014 Corrijo la funcion _CheckCalendar para aplicar el turno

      $089 AJS 08102014 Cuando se cambia el guia de una reserva con cobros, actualizar el registro de cobros

      $090 AJS 28102014 Amplio el campo "Nombre Cliente" a Text50

      $091 AJS 29102014 El chequeo de permiso para modificar reserva no tiene que hacerlo cuando la llamada es a traves
                        del servicio web

      $092 ARM 20112014 CNT-OC-14150 Comprobar idioma y cupo idioma

      $093 ARM 24112014 CNT-OC-14055 Separar invitados de venta y de compra

      $094 AJS 18122014 A¤ado el campo Turno excursion a la clave para los campos calculados

      $095 AJS 19122014 Modifico las llamadas a las funciones que calculan las personas/vehiculos por periodo, ahora tienen un periodo

      $096 AJS 22012015 Controlar que las ventas a credito no se puedan hacer si el touroperador esta bloqueado

      $097 AJS 06022015 No podemos mostrar la peticion de turnos en las reservas hechas por servicio web

      $098 AJS 12022015 Traduccion

      $099 AJS 04032015 Traer el canal por defecto del touroperador si est  rellenado

      $100 AJS 19032015 Nuevo campo "Email contacto" informativo desde la APP

      $101 AJS 19032015 Corregido un error en el cambio de fecha de excursion

      $102 ARM 27032015 CNT-OC-14053 A¤adido campo tipo venta en precios comision touroperador

      $103 ARM 21042015 CNT-OC-14098 Nuevo campo calculo bloqueado y gesti¢n del calculo

      $104 AJS 04052015 La numeraci¢n de reservas de excursiones la vamos a buscar con un FINDLAST para evitar
                        bloqueos con otros procesos

      $105 AJS 05052015 Activo AutoIncrement en el campo N§ Reserva

      $106 ARM 14052015 A¤adido campo Voucher printed

      $107 AJS 20052015 Cambio las instrucciones ISSERVICETIER por GUIALLOWED

      $108 AJS 20052015 La ventana de pedir turno no se tiene que mostrar si estamos importando reservas de touroperador

      $109 AJS 21072015 Elimino el campo Cantidad de los suplementos porque es obsoleto

      $110 AJS 21072015 Al rellenar el hotel, solo buscamos la recogida si no esta pendiente de asignar turno, para evitar
                        errores en la importacion
    }
    END.
  }
}
