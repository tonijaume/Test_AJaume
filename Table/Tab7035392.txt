OBJECT Table 7035392 Produccion Ingreso
{
  OBJECT-PROPERTIES
  {
    Date=18/05/15;
    Time=14:04:44;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               // AJS --> El n§ de linea se obtiene automaticamente.

               rProdIng.RESET;
               rProdIng.SETRANGE ("N§ Parte", "N§ Parte");
               IF rProdIng.FINDLAST THEN
                 "N§ Linea" := rProdIng."N§ Linea" + 10
               ELSE
                 "N§ Linea" := 10;
             END;

    OnModify=VAR
               lrTTOOxParte@1100244000 : Record 7010365;
             BEGIN
             END;

    OnDelete=VAR
               lrTTOOxParte@1100244000 : Record 7010365;
             BEGIN
             END;

    CaptionML=ESP=Produccion Ingreso;
    LookupFormID=Form7010517;
    DrillDownFormID=Form7010517;
  }
  FIELDS
  {
    { 1   ;   ;N§ Parte            ;Code10        ;TableRelation=Parte."N§ Parte";
                                                   CaptionML=ESP=N§ Parte;
                                                   SQL Data Type=Varchar;
                                                   Description=PK, FK Parte;
                                                   Editable=No }
    { 3   ;   ;N§ Linea            ;Integer       ;CaptionML=ESP=N§ Linea;
                                                   Description=PK;
                                                   Editable=No }
    { 5   ;   ;Garaje              ;Code10        ;CaptionML=ESP=Garaje;
                                                   SQL Data Type=Varchar }
    { 7   ;   ;Fecha               ;Date          ;CaptionML=ESP=Fecha;
                                                   Editable=No }
    { 9   ;   ;Cliente estadistico ;Code20        ;TableRelation=Customer.No.;
                                                   CaptionML=ESP=Cliente estad¡stico;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Cliente;
                                                   Editable=No }
    { 11  ;   ;Codigo servicio     ;Code10        ;TableRelation="Codigo servicio";
                                                   CaptionML=ESP=Codigo servicio;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Codigo servicio;
                                                   Editable=No }
    { 13  ;   ;Tipo servicio       ;Code10        ;TableRelation="Tipo Servicio".Codigo;
                                                   OnValidate=VAR
                                                                lrTipoSer@1100244000 : Record 7010319;
                                                              BEGIN
                                                                lrTipoSer.RESET;
                                                                IF lrTipoSer.GET("Tipo servicio") THEN
                                                                  "Tipo Servicio Fijo" := lrTipoSer."Tipo fijo";
                                                              END;

                                                   CaptionML=ESP=Tipo servicio;
                                                   SQL Data Type=Varchar;
                                                   Editable=No }
    { 14  ;   ;Tipo Servicio Fijo  ;Option        ;CaptionML=ESP=Tipo fijo;
                                                   OptionCaptionML=ESP=Excursion,Traslado;
                                                   OptionString=Excursion,Traslado;
                                                   Editable=No }
    { 17  ;   ;Zona Precios        ;Code10        ;CaptionML=ESP=Zona Precios;
                                                   SQL Data Type=Varchar;
                                                   Editable=No }
    { 19  ;   ;Tipo elemento       ;Code10        ;CaptionML=ESP=Tipo elemento;
                                                   SQL Data Type=Varchar;
                                                   Editable=No }
    { 21  ;   ;Tipo Vehiculo       ;Code10        ;CaptionML=ESP=Tipo Vehiculo;
                                                   SQL Data Type=Varchar;
                                                   Editable=No }
    { 23  ;   ;Pax                 ;Decimal       ;CaptionML=ESP=Pax;
                                                   DecimalPlaces=0:2 }
    { 25  ;   ;Pax Real            ;Decimal       ;CaptionML=ESP=Pax Real;
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 27  ;   ;Cod. Divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Divisa" <> '' THEN
                                                                  divisa_ingreso(Fecha)
                                                                ELSE BEGIN
                                                                  "Importe DL"                  := ROUND(Importe);
                                                                  "Importe sin impuesto DL"     := ROUND("Importe sin impuesto");
                                                                  "Importe con impuesto DL"     := ROUND("Importe con impuesto");
                                                                  "Precio Pax DL"               := ROUND("Precio Pax");
                                                                  "Precio Pax DL sin impuestos" := ROUND("Precio Pax sin impuestos");
                                                                  "Precio Vehiculo DL"          := ROUND("Precio Vehiculo");
                                                                  "Precio Vehiculo DL sin imp"  := ROUND("Precio Vehiculo sin impuestos");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Cod. Divisa;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Divisa }
    { 29  ;   ;Importe             ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Importe;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 31  ;   ;Importe DL          ;Decimal       ;CaptionML=ESP=Importe DL;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 33  ;   ;Importe sin impuesto;Decimal       ;OnValidate=BEGIN
                                                                rCli.GET("Cliente Operativo");

                                                                IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                  ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));

                                                                "Importe con impuesto" := ROUND("Importe sin impuesto" * (1 + (rConfIVA."VAT+EC %" / 100)));
                                                                SetImporte;

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Importe sin impuesto;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 35  ;   ;Importe sin impuesto DL;Decimal    ;CaptionML=ESP=Importe sin impuesto DL;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 37  ;   ;Importe con impuesto;Decimal       ;OnValidate=BEGIN
                                                                rCli.GET("Cliente Operativo");

                                                                IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                  ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));

                                                                "Importe sin impuesto" := ROUND("Importe con impuesto" / (1 + (rConfIVA."VAT+EC %" / 100)));
                                                                SetImporte;
                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Importe con impuesto;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 39  ;   ;Importe con impuesto DL;Decimal    ;CaptionML=ESP=Importe con impuesto DL;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 41  ;   ;N§ Prefactura       ;Code20        ;TableRelation="Prefactura ingreso";
                                                   OnValidate=BEGIN
                                                                // JPT 24/10/06 No queremos que se repitan estas funciones para cada linea.
                                                                // Creamos un temporary rTempFact para que solo se marque la factura y prefactura la primera vez

                                                                CLEAR(rTempFact);
                                                                CLEAR(rTTOOxParte);
                                                                IF (NOT rTempFact.GET("N§ Parte", Touroperador)) OR ("N§ Prefactura" <> rTempFact."N§ Prefactura") THEN BEGIN
                                                                  rTTOOxParte.RESET;
                                                                  IF rTTOOxParte.GET("N§ Parte", Touroperador) THEN BEGIN
                                                                    rTTOOxParte.VALIDATE("N§ Prefactura", "N§ Prefactura");
                                                                    rTTOOxParte.MODIFY;
                                                                  END;

                                                                  // Marcamos el temporal para que no vuelva a realizar la busqueda
                                                                  rTempFact := rTTOOxParte;
                                                                  IF NOT rTempFact.FIND THEN // Si no existe
                                                                    rTempFact.INSERT
                                                                  ELSE BEGIN  // Si existe con otro numero de prefactura
                                                                    rTempFact := rTTOOxParte;
                                                                    rTempFact.MODIFY;
                                                                  END;
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ESP=N§ Prefactura;
                                                   SQL Data Type=Varchar }
    { 43  ;   ;N§ Factura          ;Code20        ;CaptionML=ESP=N§ Factura }
    { 45  ;   ;Importe validacion  ;Decimal       ;CaptionML=ESP=Importe validacion;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 47  ;   ;Importe validacion DL;Decimal      ;CaptionML=ESP=Importe validacion DL;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 49  ;   ;Pax validacion      ;Decimal       ;CaptionML=ESP=Pax validacion;
                                                   DecimalPlaces=0:2 }
    { 51  ;   ;Importe sin original;Decimal       ;CaptionML=ESP=Importe sin original;
                                                   Description=Utilizado para crear el reparto del coste por touroperador;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 53  ;   ;Importe con original;Decimal       ;CaptionML=ESP=Importe con original;
                                                   Description=Utilizado para crear el reparto del coste por touroperador;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 59  ;   ;Touroperador        ;Code10        ;TableRelation=TTOO.Codigo;
                                                   CaptionML=ESP=Touroperador;
                                                   Description=FK TTOO;
                                                   Editable=No }
    { 61  ;   ;Precio manual       ;Boolean       ;CaptionML=ESP=Precio manual;
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 65  ;   ;Origen/Destino      ;Code10        ;CaptionML=ESP=Origen/Destino;
                                                   Editable=No }
    { 67  ;   ;Precio Pax          ;Decimal       ;OnValidate=VAR
                                                                lrHist@1103355000 : Record 7035352;
                                                              BEGIN
                                                                // AJF 23/09/08

                                                                IF CurrFieldNo = FIELDNO("Precio Pax") THEN
                                                                  rModProd.CreaLineaIngreso(Rec,FIELDNO("Precio Pax"), FORMAT("Precio Pax"), FORMAT(xRec."Precio Pax"));


                                                                // Incluimos en el historico si el campo cambia desde un formulario.
                                                                IF CurrFieldNo = FIELDNO("Precio Pax") THEN BEGIN
                                                                  lrHist.InsertarHistorico("N§ Parte", "N§ Linea", TRUE, FIELDCAPTION("Precio Pax"),
                                                                                           FORMAT(xRec."Precio Pax"), FORMAT("Precio Pax"));
                                                                END;

                                                                rCli.GET("Cliente Operativo");

                                                                IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                  ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));

                                                                "Precio Pax sin impuestos" := ROUND("Precio Pax" / (1 + (rConfIVA."VAT+EC %" / 100)));

                                                                VALIDATE("Importe con impuesto", "Precio Pax"  * "Pax Facturados");

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Precio Pax;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 69  ;   ;Precio Pax DL       ;Decimal       ;CaptionML=ESP=Precio Pax DL;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 71  ;   ;Precio Vehiculo     ;Decimal       ;OnValidate=VAR
                                                                lrHist@1103355000 : Record 7035352;
                                                              BEGIN
                                                                // AJF 23/09/08

                                                                IF CurrFieldNo = FIELDNO("Precio Vehiculo") THEN
                                                                  rModProd.CreaLineaIngreso(Rec,FIELDNO("Precio Vehiculo"), FORMAT("Precio Vehiculo"), FORMAT(xRec."Precio Vehiculo"));

                                                                // Incluimos en el historico si el campo cambia desde un formulario.
                                                                IF CurrFieldNo = FIELDNO("Precio Vehiculo") THEN BEGIN
                                                                  lrHist.InsertarHistorico("N§ Parte", "N§ Linea", TRUE, FIELDCAPTION("Precio Vehiculo"),
                                                                                           FORMAT(xRec."Precio Vehiculo"), FORMAT("Precio Vehiculo"));
                                                                END;

                                                                rCli.GET("Cliente Operativo");

                                                                IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                  ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));

                                                                "Precio Vehiculo sin impuestos" := ROUND("Precio Vehiculo" / (1 + (rConfIVA."VAT+EC %" / 100)));
                                                                VALIDATE("Importe con impuesto", "Precio Vehiculo");

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Precio Vehiculo;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 73  ;   ;Precio Vehiculo DL  ;Decimal       ;CaptionML=ESP=Precio Vehiculo DL;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 75  ;   ;N§ Contrato         ;Code10        ;CaptionML=ESP=N§ Contrato;
                                                   Editable=No }
    { 77  ;   ;Tipo linea          ;Option        ;CaptionML=ESP=Tipo linea;
                                                   OptionCaptionML=ESP=Base,Suplemento,Manual,Extra,Ajuste;
                                                   OptionString=Base,Suplemento,Manual,Extra,Ajuste;
                                                   Editable=No }
    { 79  ;   ;Porcentaje reparto  ;Decimal       ;CaptionML=ESP=Porcentaje reparto;
                                                   Description=Utilizado para crear el reparto del coste por touroperador;
                                                   Editable=No }
    { 81  ;   ;Marca               ;Code20        ;OnValidate=BEGIN
                                                                AjustaMarca(Rec);
                                                              END;

                                                   CaptionML=ESP=Marca;
                                                   Editable=No }
    { 83  ;   ;Generada prevision  ;Boolean       ;OnValidate=VAR
                                                                rParte@1100244000 : Record 7010360;
                                                              BEGIN
                                                                rParte.RESET;
                                                                IF rParte.GET("N§ Parte") THEN BEGIN
                                                                  rParte.VALIDATE("Generada prevision", "Generada prevision");
                                                                  rParte.MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Generada prevision }
    { 85  ;   ;% IVA               ;Decimal       ;CaptionML=ESP=% IVA;
                                                   Editable=No }
    { 87  ;   ;Vuelos              ;Text30        ;CaptionML=ESP=Vuelos }
    { 88  ;   ;Vehiculo            ;Code10        ;TableRelation=Vehiculo.Matricula;
                                                   CaptionML=ESP=Vehiculo;
                                                   Editable=No }
    { 89  ;   ;Pax Facturados      ;Decimal       ;OnValidate=VAR
                                                                lrHist@1103355000 : Record 7035352;
                                                              BEGIN
                                                                // AJF 23/09/08

                                                                IF CurrFieldNo = FIELDNO("Pax Facturados") THEN
                                                                  rModProd.CreaLineaIngreso(Rec,FIELDNO("Pax Facturados"), FORMAT("Pax Facturados"), FORMAT(xRec."Pax Facturados"));

                                                                // Incluimos en el historico si el campo cambia desde un formulario.
                                                                IF CurrFieldNo = FIELDNO("Pax Facturados") THEN BEGIN
                                                                  lrHist.InsertarHistorico("N§ Parte", "N§ Linea", TRUE, FIELDCAPTION("Pax Facturados"),
                                                                                           FORMAT(xRec."Pax Facturados"), FORMAT("Pax Facturados"));
                                                                END;

                                                                IF "Precio Pax" <> 0 THEN BEGIN
                                                                  VALIDATE("Importe con impuesto", "Precio Pax"  * "Pax Facturados");
                                                                  VALIDATE("Cod. Divisa");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Pax Facturados;
                                                   DecimalPlaces=0:2 }
    { 91  ;   ;Pax Transportados   ;Decimal       ;CaptionML=ESP=Pax Transportados;
                                                   DecimalPlaces=0:2 }
    { 93  ;   ;Grupo registro IVA Producto;Code10 ;TableRelation="VAT Product Posting Group".Code;
                                                   OnValidate=VAR
                                                                lrHist@1103355000 : Record 7035352;
                                                              BEGIN
                                                                // Cambiamos la configuraci¢n IVA

                                                                IF CurrFieldNo = FIELDNO("Grupo registro IVA Producto") THEN
                                                                  rModProd.CreaLineaIngreso(Rec,FIELDNO("Grupo registro IVA Producto"),
                                                                                            FORMAT("Grupo registro IVA Producto"), FORMAT(xRec."Grupo registro IVA Producto"));


                                                                // AJF 23/09/08
                                                                // Incluimos en el historico si el campo cambia desde un formulario.
                                                                IF CurrFieldNo = FIELDNO("Grupo registro IVA Producto") THEN BEGIN
                                                                  lrHist.InsertarHistorico("N§ Parte", "N§ Linea", TRUE, FIELDCAPTION("Grupo registro IVA Producto"),
                                                                                           FORMAT(xRec."Grupo registro IVA Producto"), FORMAT("Grupo registro IVA Producto"));
                                                                END;

                                                                BuscaPrecision;
                                                                rCli.GET("Cliente Operativo");
                                                                IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                  ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));

                                                                "% IVA"     := rConfIVA."VAT+EC %";

                                                                IF "Impuestos Incluidos" THEN BEGIN
                                                                  IF "Precio Pax" <> 0 THEN
                                                                    VALIDATE("Precio Pax sin impuestos", ROUND("Precio Pax" / (1 + ("% IVA" / 100)), wPrecision))
                                                                  ELSE
                                                                    VALIDATE("Precio Vehiculo sin impuestos", ROUND("Precio Vehiculo" / (1 + ("% IVA" / 100)) , wPrecision));
                                                                  // "Importe sin impuesto"  := ROUND("Importe con impuesto" / (1 + ("% IVA" / 100)) , wPrecision);
                                                                END
                                                                ELSE BEGIN
                                                                  IF "Precio Pax sin impuestos" <> 0 THEN
                                                                    VALIDATE("Precio Pax" , ROUND("Precio Pax sin impuestos" * (1 + ("% IVA"  / 100)), wPrecision))
                                                                  ELSE
                                                                    VALIDATE("Precio Vehiculo", ROUND("Precio Vehiculo sin impuestos" * (1 + ("% IVA"  / 100)),wPrecision));
                                                                  // "Importe con impuesto" := ROUND("Importe sin impuesto" * (1 + ("% IVA"  / 100)), wPrecision);
                                                                END;

                                                                // VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Grupo registro IVA Producto }
    { 95  ;   ;Hora vuelo          ;Time          ;CaptionML=ESP=Hora vuelo }
    { 97  ;   ;Facturable          ;Boolean       ;CaptionML=ESP=Facturable }
    { 99  ;   ;Linea abono         ;Boolean       ;CaptionML=ESP=Linea abono }
    { 101 ;   ;Precio Pax sin impuestos;Decimal   ;OnValidate=VAR
                                                                lrHist@1103355000 : Record 7035352;
                                                              BEGIN
                                                                // AJF 23/09/08

                                                                IF CurrFieldNo = FIELDNO("Precio Pax sin impuestos") THEN
                                                                  rModProd.CreaLineaIngreso(Rec,FIELDNO("Precio Pax sin impuestos"),
                                                                                            FORMAT("Precio Pax sin impuestos"), FORMAT(xRec."Precio Pax sin impuestos"));

                                                                // Incluimos en el historico si el campo cambia desde un formulario.
                                                                IF CurrFieldNo = FIELDNO("Precio Pax sin impuestos") THEN BEGIN
                                                                  lrHist.InsertarHistorico("N§ Parte", "N§ Linea", TRUE, FIELDCAPTION("Precio Pax sin impuestos"),
                                                                                           FORMAT(xRec."Precio Pax sin impuestos"), FORMAT("Precio Pax sin impuestos"));
                                                                END;

                                                                rCli.GET("Cliente Operativo");

                                                                IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                  ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));

                                                                "Precio Pax" := ROUND("Precio Pax sin impuestos" * (1 + (rConfIVA."VAT+EC %" / 100)));


                                                                VALIDATE("Importe sin impuesto", "Precio Pax sin impuestos"  * "Pax Facturados");

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Precio Pax sin impuestos;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 103 ;   ;Precio Pax DL sin impuestos;Decimal;CaptionML=ESP=Precio Pax DL sin impuestos;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 105 ;   ;Precio Vehiculo sin impuestos;Decimal;
                                                   OnValidate=VAR
                                                                lrHist@1103355000 : Record 7035352;
                                                              BEGIN
                                                                // AJF 23/09/08

                                                                IF CurrFieldNo = FIELDNO("Precio Vehiculo sin impuestos") THEN
                                                                  rModProd.CreaLineaIngreso(Rec,FIELDNO("Precio Vehiculo sin impuestos"),
                                                                                            FORMAT("Precio Vehiculo sin impuestos"), FORMAT(xRec."Precio Vehiculo sin impuestos"));

                                                                // Incluimos en el historico si el campo cambia desde un formulario.
                                                                IF CurrFieldNo = FIELDNO("Precio Vehiculo sin impuestos") THEN BEGIN
                                                                  lrHist.InsertarHistorico("N§ Parte", "N§ Linea", TRUE, FIELDCAPTION("Precio Vehiculo sin impuestos"),
                                                                                           FORMAT(xRec."Precio Vehiculo sin impuestos"), FORMAT("Precio Vehiculo sin impuestos"));
                                                                END;

                                                                rCli.GET("Cliente Operativo");

                                                                IF NOT rConfIVA.GET (rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto") THEN
                                                                  ERROR(STRSUBSTNO(err2, rCli."VAT Bus. Posting Group", "Grupo registro IVA Producto"));

                                                                "Precio Vehiculo" := ROUND("Precio Vehiculo sin impuestos" * (1 + (rConfIVA."VAT+EC %" / 100)));
                                                                VALIDATE("Importe sin impuesto", "Precio Vehiculo sin impuestos");

                                                                VALIDATE("Cod. Divisa");
                                                              END;

                                                   CaptionML=ESP=Precio Vehiculo sin impuestos;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Cod. Divisa" }
    { 107 ;   ;Precio Vehiculo DL sin imp;Decimal ;CaptionML=ESP=Precio Vehiculo DL sin imp;
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 108 ;   ;Seleccion           ;Boolean       ;CaptionML=ESP=Seleccion }
    { 110 ;   ;Servicio propio     ;Boolean       ;CaptionML=ESP=Servicio propio }
    { 111 ;   ;Zona facturacion    ;Code10        ;CaptionML=ESP=Zona facturacion;
                                                   Editable=No }
    { 113 ;   ;Concepto facturacion;Code30        ;CaptionML=ESP=Concepto facturacion }
    { 114 ;   ;Paxes Servicio      ;Decimal       ;CaptionML=ESP=Paxes Servicio;
                                                   DecimalPlaces=0:0;
                                                   Description=Es el total del transportado en el parte }
    { 115 ;   ;Referencia          ;Text30        ;CaptionML=ESP=Referencia }
    { 116 ;   ;Cod Grupo           ;Code20        ;TableRelation=Grupos."Codigo Grupo";
                                                   CaptionML=ESP=Cod Grupo;
                                                   Description=FK Grupos }
    { 117 ;   ;Fecha registro factura;Date        ;CaptionML=ESP=Fecha registro factura }
    { 118 ;   ;Servicio Regular    ;Integer       ;TableRelation="Servicios Regulares".No.;
                                                   CaptionML=ESP=Servicio Regular;
                                                   Description=FK Servicios Regulares }
    { 119 ;   ;Gratuito            ;Boolean       ;CaptionML=ESP=Gratuito }
    { 120 ;   ;Fecha Confirmacion  ;DateTime      ;CaptionML=ESP=Fecha Confirmacion;
                                                   Description=Indica la fecha y Hora de confirmacion. Necesario para desconfirmar }
    { 130 ;   ;Impuestos Incluidos ;Boolean       ;CaptionML=ESP=Impuestos Incluidos }
    { 200 ;   ;Cliente Operativo   ;Code20        ;TableRelation=Customer.No. }
  }
  KEYS
  {
    {    ;N§ Parte,N§ Linea                       ;MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Linea abono                              }
    {    ;N§ Parte,Touroperador,Tipo linea,Linea abono,Tipo elemento;
                                                   SumIndexFields=Pax Transportados,Pax Facturados,Importe con impuesto,Importe sin impuesto,Importe sin impuesto DL;
                                                   MaintainSQLIndex=No;
                                                   SIFTLevelsToMaintain=[{N§ Parte,Touroperador},
                                                                         {N§ Parte,Touroperador,Tipo linea,Linea abono,Tipo elemento}] }
    {    ;Garaje,Touroperador,Tipo servicio,Fecha,Tipo elemento,Generada prevision;
                                                   SumIndexFields=Importe sin impuesto DL;
                                                   MaintainSQLIndex=No;
                                                   SIFTLevelsToMaintain=[{Garaje,Touroperador,Tipo servicio,Fecha:Day,Tipo elemento,Generada prevision}] }
    {    ;Cliente estadistico,Touroperador,Fecha,Tipo linea,Tipo elemento,Garaje,Tipo servicio,Codigo servicio,Pax Transportados,Zona Precios,Servicio propio,Vehiculo;
                                                   SumIndexFields=Importe sin impuesto DL,Pax Facturados,Pax Transportados }
    {    ;Cliente Operativo,Touroperador,Fecha,Facturable,N§ Prefactura }
    {    ;N§ Prefactura,Garaje,Cliente Operativo,Touroperador,Fecha,N§ Parte,Zona Precios;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;N§ Prefactura,Garaje,Cliente Operativo,Touroperador,Codigo servicio,Fecha;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;N§ Prefactura,Garaje,Cliente Operativo,Touroperador,Fecha,Codigo servicio;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;N§ Prefactura,Garaje,Cliente Operativo,Touroperador,Vuelos,Fecha;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Servicio Regular,Fecha                   }
    {    ;Cod Grupo,Fecha                          }
    {    ;Marca                                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1100244009 : TextConst 'ESP=Marca';
      rPar@1103355003 : Record 7010311;
      rProdIng@1100244001 : Record 7035392;
      rTipo@1100244002 : Record 330;
      rConfIVA@1100244003 : Record 325;
      Text001@1103355005 : TextConst 'ESP=¨Desea volver a los valores calculados?';
      err1@1100244004 : TextConst 'ESP=No existe el proveedor indicado en el parte de trabajo.';
      err2@1100244005 : TextConst 'ESP=No existe el IVA %1-%2.';
      rCli@1100244010 : Record 18;
      rParte@1100244007 : Record 7010360;
      rTempFact@1103355000 : TEMPORARY Record 7010365;
      rTTOOxParte@1103355001 : Record 7010365;
      rModProd@1103355004 : Record 7035330;
      wPrecision@1103355002 : Decimal;

    PROCEDURE divisa_ingreso@2(pwFechaCambio@1103355000 : Date);
    BEGIN
      // divisa_ingreso
      //
      // Fijaremos el cambio a la fecha del servicio
      //

      IF pwFechaCambio=0D THEN
        pwFechaCambio := Fecha;

      "Importe DL" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa", Importe, rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"))
      ;

      "Importe sin impuesto DL" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa", "Importe sin impuesto",
                                                             rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
      "Importe con impuesto DL" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa", "Importe con impuesto",
                                                             rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
      "Precio Pax DL" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa", "Precio Pax",
                                                   rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
      "Precio Pax DL sin impuestos" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa", "Precio Pax sin impuestos",
                                                                 rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
      "Precio Vehiculo DL" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa", "Precio Vehiculo",
                                                        rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
      "Precio Vehiculo DL sin imp" := rTipo.ExchangeAmtFCYToLCY(pwFechaCambio, "Cod. Divisa", "Precio Vehiculo sin impuestos",
                                                               rTipo.ExchangeRate(pwFechaCambio, "Cod. Divisa"));
    END;

    PROCEDURE MarcaTodo@4(pValor@1100244000 : Code[20];VAR prPI@1100244001 : Record 7035392);
    VAR
      lrPI@1100244002 : Record 7035392;
      lrPI2@1100244003 : Record 7035392;
    BEGIN
      // MarcaTodo
      // Esta Funci¢n valida el campo marca de todos los registros actuales con el code pValor
      // pasado como parametro. Sustituye al Modifyall porque valida el campo Marca de todos los registros
      lrPI.RESET;
      lrPI.COPY(prPI);
      IF lrPI.FINDSET(TRUE) THEN BEGIN
        REPEAT
          lrPI2 := lrPI;
          lrPI2.VALIDATE (Marca , pValor);
          lrPI2.MODIFY;
        UNTIL lrPI.NEXT=0;
      END;
    END;

    PROCEDURE MarcaFactura@1103355000(pwNoFact@1103355000 : Code[20];pwFechaReg@1103355002 : Date;pwDirecto@1103355003 : Boolean);
    VAR
      lrCI@1103355001 : Record 7010414;
      lrHist@1103355004 : Record 7035352;
    BEGIN
      // MarcaFactura
      { Si se marca con un numero de partida la funcion:
        1: Crea una linea de Coste-Ingreso
        2: Le a¤ade el numero de factura
        3: Borra la lina de producci¢n
      }

      CLEAR(lrCI);
      lrCI.TRANSFERFIELDS(Rec);
      lrCI."N§ Factura"             := pwNoFact;
      lrCI."Fecha registro factura" := pwFechaReg;
      lrCI.INSERT(TRUE);

      PasaCometarios(lrCI);
      MarcaParteFact(pwNoFact);

      // AJF 23/09/08
      // Traspasamos el historial de cambios manuales.
      lrHist.RESET;
      lrHist.MoverHistProdaCI(lrCI,Rec);

      // Borra las lineas de modificacion relacionadas
      BorraModif;

      IF pwDirecto THEN // Se indica si se debe eliminar el mismo puntero o no
        DELETE
      ELSE BEGIN
        CLEAR(rProdIng);
        rProdIng:= Rec;
        rProdIng.DELETE;
      END;
    END;

    PROCEDURE MarcaParteFact@1103355002(pwNoFact@1103355000 : Code[20]);
    BEGIN
      // MarcaParteFact
      // Marca el parte y TTOO/Parte

      rParte.RESET; rParte.INIT;

      // JPT 24/10/06 No queremos que se repitan estas funciones para cada linea.
      // Creamos un temporari rTempFact para que solo se marque la factura y prefactura la primera vez
      IF pwNoFact <> '' THEN BEGIN
        CLEAR(rTempFact);
        rTempFact.SETRANGE("N§ Parte", "N§ Parte");
        IF NOT rTempFact.FINDFIRST THEN BEGIN
          IF rParte.GET("N§ Parte") THEN BEGIN
            IF NOT rParte.Facturado THEN BEGIN
              rParte.Facturado := TRUE;
              rParte.MODIFY;
            END;
          END;
        END;
      END;

      CLEAR(rTempFact);
      CLEAR(rTTOOxParte);
      IF (NOT rTempFact.GET("N§ Parte", Touroperador)) OR (pwNoFact <> rTempFact."N§ Factura") THEN BEGIN
        rTTOOxParte.RESET;
        IF rTTOOxParte.GET("N§ Parte", Touroperador) THEN BEGIN
          rTTOOxParte.VALIDATE("N§ Factura", pwNoFact);
          rTTOOxParte."N§ Prefactura" := "N§ Prefactura";
          rTTOOxParte.MODIFY;
        END;

        // Marcamos el temporal para que no vuelva a realizar la busqueda
        rTempFact := rTTOOxParte;
        IF NOT rTempFact.FIND THEN // Si no existe
          rTempFact.INSERT
        ELSE BEGIN  // Si existe con otro numero de factura
          rTempFact := rTTOOxParte;
          rTempFact.MODIFY;
        END;
      END;
    END;

    PROCEDURE AjustaMarca@3(VAR prPI@1100244000 : Record 7035392);
    VAR
      lrPI2@1100244001 : Record 7035392;
      lrTP@1100244003 : Record 7010365;
      lwNuevoValor@1100244004 : Code[10];
      lwMarca@1000000000 : Boolean;
    BEGIN
      // AjustaMarca

      // JPT -> Esta funci¢n sincroniza el campo Marca de la tabla Produccion Ingreso con el campo Marca
      // de la tabla Touroperador x Parte. De forma que si se marca alguna o se desmarcan todas,
      // repercutir  en la tabla Touroperador x Parte.


      IF prPI.Marca = '' THEN
      BEGIN
        lrPI2.RESET;
        lrPI2.SETCURRENTKEY("N§ Parte",
                            Touroperador,
                            "Tipo linea",
                            "Linea abono",
                            "Tipo elemento");
        lrPI2.SETRANGE ("N§ Parte"  , prPI."N§ Parte");
        lrPI2.SETRANGE (Touroperador, prPI.Touroperador);
        lrPI2.SETFILTER(Marca       , '<> %1','');
        lrPI2.SETFILTER("N§ Linea"  , '<> %1', prPI."N§ Linea");
        lwMarca := lrPI2.FINDFIRST;
      END
      ELSE
        lwMarca := TRUE;

      IF lwMarca THEN
        lwNuevoValor := USERID
      ELSE
        lwNuevoValor := '';

      lrTP.RESET;
      IF lrTP.GET(prPI."N§ Parte", prPI.Touroperador) THEN
      BEGIN
        IF (lrTP.Marca <> '') XOR lwMarca THEN
        BEGIN
          lrTP.Marca:= lwNuevoValor;
          lrTP.MODIFY;
        END;
      END;
    END;

    PROCEDURE PasaCometarios@1103355001(prCI@1103355000 : Record 7010414);
    VAR
      lrCom@1103355001 : Record 7010411;
      lrCom2@1103355002 : Record 7010411;
    BEGIN
      // PasaCometarios
      // Remarcamos los comentarios

      CLEAR(lrCom);
      lrCom.SETRANGE("N§ Parte", "N§ Parte");
      lrCom.SETRANGE(Tipo, lrCom.Tipo::"Produccion Ingreso");
      lrCom.SETRANGE("N§ Linea" , "N§ Linea");
      IF lrCom.FINDSET(TRUE) THEN BEGIN
        REPEAT
          lrCom2 := lrCom;
          lrCom2.DELETE;
          lrCom2.Tipo       := lrCom2.Tipo::"Facturacion Ingreso";
          lrCom2."N§ Linea" := prCI."N§ Linea";
          lrCom2.INSERT;
        UNTIL lrCom.NEXT=0;
      END;
    END;

    PROCEDURE LimpiaTemp@1103355009();
    BEGIN
      // LimpiaTemp
      // rTempFact es un temporari que guarda el numero de parte y ttoo facturado o prefacturado

      CLEAR(rTempFact);
      rTempFact.DELETEALL;
    END;

    PROCEDURE BuscaPrecision@51() : Decimal;
    VAR
      rConf@1100244001 : Record 98;
      rDiv@1100244002 : Record 4;
      lwPrecIngreso@1100253000 : Decimal;
    BEGIN
      // BuscaPrecision

      //  Determina cual va a ser la precision a aplicar en los ROUND de venta,
      //  puede ser la de la divisa del contrato la de Configuracion contabilidad.

      CLEAR(wPrecision);
      IF "Cod. Divisa" <> '' THEN BEGIN
        rDiv.GET("Cod. Divisa");
        wPrecision := rDiv."Amount Rounding Precision";
      END
      ELSE BEGIN
        rConf.FINDFIRST;
        wPrecision := rConf."Amount Rounding Precision";
      END;

      EXIT(wPrecision);
    END;

    PROCEDURE EsPrecioPax@1103355003() : Boolean;
    BEGIN
      // EsPrecioPax
      // Devuelve TRUE si la linea tiene precio por pax

      rPar.FINDFIRST;
      EXIT("Tipo elemento" IN [rPar."Codigo Adulto", rPar."Codigo Ni¤o"]);
    END;

    PROCEDURE SetImporte@1103355004();
    BEGIN
      // SetImporte

      IF "Impuestos Incluidos" THEN
        Importe := "Importe con impuesto"
      ELSE
        Importe := "Importe sin impuesto";
    END;

    PROCEDURE LookUpHistorico@1103355005();
    VAR
      lrHistorico@1103355000 : Record 7035352;
      lfHistorico@1103355001 : Form 7010311;
    BEGIN
      // LookUpHistorico

      IF "N§ Parte" = '' THEN
        EXIT;

      lrHistorico.SETCURRENTKEY("N§ parte", Concepto, "N§ Linea");
      lrHistorico.SETRANGE("N§ parte", "N§ Parte");
      lrHistorico.SETRANGE("N§ Linea", "N§ Linea");
      lrHistorico.SETRANGE(Concepto  , lrHistorico.Concepto::"Produccion ingreso");

      IF NOT lrHistorico.ISEMPTY THEN BEGIN
        lfHistorico.SETRECORD    (lrHistorico);
        lfHistorico.SETTABLEVIEW (lrHistorico);
        lfHistorico.RUNMODAL
      END;
    END;

    PROCEDURE TieneModif@1103355006(pwCampo@1103355000 : Integer) : Boolean;
    BEGIN
      // TieneModif
      // Devuelve true si el campo tiene modificaciones manuales

      CLEAR(rModProd);
      rModProd.SETCURRENTKEY("N§ Parte","N§ Linea",Tipo,"No Campo");
      rModProd.SETRANGE("N§ Parte", "N§ Parte");
      rModProd.SETRANGE("N§ Linea", "N§ Linea");
      rModProd.SETRANGE(Tipo      , rModProd.Tipo::Ingreso);
      rModProd.SETRANGE("No Campo", pwCampo);
      EXIT(rModProd.FINDFIRST);
    END;

    PROCEDURE ShowModif@1103355007(pwCampo@1103355000 : Integer) : Boolean;
    BEGIN
      // ShowModif
      // Si tiene modificaciones en un determinado campo, las ense¤a

      CLEAR(rModProd);
      rModProd.FILTERGROUP(2);
      rModProd.SETCURRENTKEY("N§ Parte","N§ Linea",Tipo,"No Campo");
      rModProd.SETRANGE("N§ Parte", "N§ Parte");
      rModProd.SETRANGE("N§ Linea", "N§ Linea");
      rModProd.SETRANGE(Tipo      , rModProd.Tipo::Ingreso);
      rModProd.SETRANGE("No Campo", pwCampo);
      rModProd.FILTERGROUP(0);
      IF rModProd.FINDFIRST THEN
        FORM.RUN(0,rModProd);
    END;

    PROCEDURE BorraModif@1103355008();
    BEGIN
      // BorraModif
      // Borra todas las lineas de modificacion relacionadas

      CLEAR(rModProd);
      rModProd.SETCURRENTKEY("N§ Parte","N§ Linea",Tipo,"No Campo");
      rModProd.SETRANGE("N§ Parte", "N§ Parte");
      rModProd.SETRANGE("N§ Linea", "N§ Linea");
      rModProd.SETRANGE(Tipo      , rModProd.Tipo::Ingreso);
      rModProd.DELETEALL;
    END;

    PROCEDURE DesmarcaModif@1103355010();
    BEGIN
      // DesmarcaModif
      // Para que las lineas de modificacion puedan ser asignadas a otra linea primero
      // hay que dejar el campo "N§ Linea" a 0;

      CLEAR(rModProd);
      rModProd.SETCURRENTKEY("N§ Parte","N§ Linea",Tipo,"No Campo");
      rModProd.SETRANGE("N§ Parte", "N§ Parte");
      rModProd.SETRANGE("N§ Linea", "N§ Linea");
      rModProd.SETRANGE(Tipo      , rModProd.Tipo::Ingreso);
      rModProd.MODIFYALL("N§ Linea", 0);
    END;

    PROCEDURE ResersarModif@1103355011(pwConfirma@1103355001 : Boolean);
    VAR
      lwRec@1103355000 : RecordRef;
    BEGIN
      // ResersarModif
      // Devolver los valores calculados a todas las modificaciones de la linea

      lwRec.GETTABLE(Rec);
      CLEAR(rModProd);
      rModProd.SETCURRENTKEY("N§ Parte","N§ Linea",Tipo,"No Campo");
      rModProd.SETRANGE("N§ Parte", "N§ Parte");
      rModProd.SETRANGE("N§ Linea", "N§ Linea");
      rModProd.SETRANGE(Tipo      , rModProd.Tipo::Ingreso);
      IF rModProd.FINDSET THEN BEGIN
        IF pwConfirma THEN
          IF NOT CONFIRM(Text001) THEN
            EXIT;
        REPEAT
          rModProd.MarcaValor(lwRec, TRUE, TRUE);
        UNTIL rModProd.NEXT=0;
      END;
    END;

    BEGIN
    {
      ## AJS 23.06.2008

        - He cambiado el nombre del campo Zona trabajo por Zona facturacion

      ## AJS 01.07.2009

        .- He cambiado la manera de buscar la ultima linea, FINDLAST en lugar de ASCENDING(FALSE)
    }
    END.
  }
}
