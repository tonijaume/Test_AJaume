OBJECT Table 7010142 Contrato Compra Excursiones
{
  OBJECT-PROPERTIES
  {
    Date=27/04/15;
    Time=22:30:06;
    Modified=Yes;
    Version List=AIC2009,COM;
  }
  PROPERTIES
  {
    OnInsert=VAR
               rContrato@1103355000 : Record 7010142;
               lrRecRef@1000000001 : RecordRef;
               lrxRecRef@1000000000 : RecordRef;
             BEGIN
               rPar.LOCKTABLE;
               rPar.FINDFIRST;
               IF NOT rPar."Empresa Delegacion" THEN
                 ERROR(Text001 + '\' + Text002);

               IF "N§ Contrato compra" = '' THEN BEGIN
                 CASE "Tipo Contrato" OF
                   "Tipo Contrato"::Excursion:
                   BEGIN
                     IF rPar."Contador Contrato compra Exc" = '' THEN
                       rPar."Contador Contrato compra Exc" := Text039 + '0000000'; //+$009
                       //-009ERROR(Text003);

                     REPEAT
                       rPar."Contador Contrato compra Exc" := INCSTR(rPar."Contador Contrato compra Exc");
                     UNTIL NOT rContrato.GET(rPar.Delegacion, rPar."Contador Contrato compra Exc", "Tipo Contrato"::Excursion);
                     rPar.MODIFY;
                     "N§ Contrato compra" := rPar."Contador Contrato compra Exc";
                   END;

                   "Tipo Contrato"::Transportista: BEGIN
                     IF rPar."Contador Contrato compra Tra" = '' THEN
                       rPar."Contador Contrato compra Tra" := Text040 + '0000000'; //+$009
                       //-$009ERROR(Text004);
                     REPEAT
                       rPar."Contador Contrato compra Tra" := INCSTR(rPar."Contador Contrato compra Tra");
                     UNTIL NOT rContrato.GET(rPar.Delegacion, rPar."Contador Contrato compra Tra", "Tipo Contrato"::Transportista);
                     rPar.MODIFY;
                     "N§ Contrato compra" := rPar."Contador Contrato compra Tra";
                   END;

                   "Tipo Contrato"::"Guia Oficial": BEGIN
                     IF rPar."Contador Contrato compra GO" = '' THEN
                       rPar."Contador Contrato compra GO" := Text041 + '0000000'; //+$009
                       //-$009ERROR(Text005);
                     REPEAT
                       rPar."Contador Contrato compra GO" := INCSTR(rPar."Contador Contrato compra GO");
                     UNTIL NOT rContrato.GET(rPar.Delegacion, rPar."Contador Contrato compra GO", "Tipo Contrato"::"Guia Oficial");
                     rPar.MODIFY;
                     "N§ Contrato compra" := rPar."Contador Contrato compra GO";
                   END;

                   "Tipo Contrato"::"Guia Venta": BEGIN
                     IF rPar."Contador Contrato compra GV" = '' THEN
                       rPar."Contador Contrato compra GV" := Text042 + '0000000'; //+$009
                       //-$009ERROR(Text006);
                     REPEAT
                       rPar."Contador Contrato compra GV" := INCSTR(rPar."Contador Contrato compra GV");
                     UNTIL NOT rContrato.GET(rPar.Delegacion, rPar."Contador Contrato compra GV", "Tipo Contrato"::"Guia Venta");
                     rPar.MODIFY;
                     "N§ Contrato compra" := rPar."Contador Contrato compra GV";
                   END;

                   "Tipo Contrato"::TourOperador: BEGIN
                     IF rPar."Contador Contrato compra TO" = '' THEN
                       rPar."Contador Contrato compra TO" := Text043 + '0000000'; //+$009
                       //-$009ERROR(Text007);
                     REPEAT
                       rPar."Contador Contrato compra TO" := INCSTR(rPar."Contador Contrato compra TO");
                     UNTIL NOT rContrato.GET(rPar.Delegacion, rPar."Contador Contrato compra TO", "Tipo Contrato"::TourOperador);
                     rPar.MODIFY;
                     "N§ Contrato compra" := rPar."Contador Contrato compra TO";
                   END;
                 END;
               END;
               Delegacion := rPar.Delegacion;

               //+$025 <
               IF Comercializadora THEN
               BEGIN
                 IF TourOperador <> '' THEN BEGIN
                   rTO.RESET;
                   rTO.GET(TourOperador);
                   lrRecRef.GETTABLE(Rec);
                   lrxRecRef.GETTABLE(xRec);
                   cSincroCOM.SincronizaTabla(lrRecRef, lrxRecRef, cSincroCOM.OpInsert, rTO."Empresa comercializadora");
                 END;
               END;
               //+$025 >
             END;

    OnModify=VAR
               lrRecRef@1000000001 : RecordRef;
               lrxRecRef@1000000000 : RecordRef;
             BEGIN
               rPar.FINDFIRST;
               IF NOT rPar."Empresa Delegacion" THEN
                 ERROR(Text008 + '\' + Text002);

               IF "Tipo Contrato" <> "Tipo Contrato"::TourOperador THEN  //+$012
                 IF "Grupo registro iva prod." = '' THEN
                   MESSAGE(Text009);

               switch;

               //+$025 <
               IF Comercializadora THEN
               BEGIN
                 IF TourOperador <> '' THEN BEGIN
                   rTO.RESET;
                   rTO.GET(TourOperador);
                   lrRecRef.GETTABLE(Rec);
                   lrxRecRef.GETTABLE(xRec);
                   cSincroCOM.SincronizaTabla(lrRecRef, lrxRecRef, cSincroCOM.OpModify, rTO."Empresa comercializadora");
                 END;
               END;
               //+$025 >
             END;

    OnDelete=VAR
               rPrecio_Exc@1103355000 : Record 7010151;
               rPrecio_Trans@1103355001 : Record 7010150;
               rPrecio_GuiaOf@1103355002 : Record 7010154;
               rPrecio_GuiaVta@1103355003 : Record 7010152;
               rPrecio_TO@1103355004 : Record 7010153;
               rZona@1103355005 : Record 7010149;
               lrRecRef@1000000001 : RecordRef;
               lrxRecRef@1000000000 : RecordRef;
             BEGIN
               rPar.FINDFIRST;
               IF NOT rPar."Empresa Delegacion" THEN
                 ERROR(Text010 + '\' + Text002);

               //. Si el contrato tiene costes asociados, no dejamos borrar
               _ComprobarBorrado;

               CASE "Tipo Contrato" OF
                 "Tipo Contrato"::Excursion: BEGIN
                   rPrecio_Exc.SETRANGE(Delegacion, Delegacion);
                   rPrecio_Exc.SETRANGE("N§ Contrato", "N§ Contrato compra");
                   IF rPrecio_Exc.FINDFIRST THEN
                     IF CONFIRM(Text011,FALSE) THEN
                       rPrecio_Exc.DELETEALL
                     ELSE
                       ERROR(Text012);
                 END;
                 "Tipo Contrato"::Transportista: BEGIN
                   rZona.SETRANGE("Codigo Contrato", "N§ Contrato compra");
                   rPrecio_Trans.SETRANGE(Delegacion, Delegacion);
                   rPrecio_Trans.SETRANGE("N§ Contrato", "N§ Contrato compra");
                   IF rPrecio_Trans.FINDFIRST OR rZona.FINDFIRST THEN BEGIN
                     IF CONFIRM(Text013,FALSE) THEN BEGIN
                       rPrecio_Trans.DELETEALL;
                       rZona.DELETEALL;
                     END
                     ELSE
                       ERROR(Text012);
                   END;
                 END;
                 "Tipo Contrato"::"Guia Oficial": BEGIN
                   rPrecio_GuiaOf.SETRANGE(Delegacion, Delegacion);
                   rPrecio_GuiaOf.SETRANGE("N§ Contrato", "N§ Contrato compra");
                   IF rPrecio_GuiaOf.FINDFIRST THEN
                     IF CONFIRM(Text011,FALSE) THEN
                       rPrecio_GuiaOf.DELETEALL
                     ELSE
                       ERROR(Text012);
                 END;
                 "Tipo Contrato"::"Guia Venta": BEGIN
                   rPrecio_GuiaVta.SETRANGE(Delegacion, Delegacion);
                   rPrecio_GuiaVta.SETRANGE("N§ Contrato", "N§ Contrato compra");
                   IF rPrecio_GuiaVta.FINDFIRST THEN
                     IF CONFIRM(Text011,FALSE) THEN
                       rPrecio_GuiaVta.DELETEALL
                     ELSE
                       ERROR(Text012);
                 END;
                 "Tipo Contrato"::TourOperador: BEGIN
                   rPrecio_TO.SETRANGE(Delegacion, Delegacion);
                   rPrecio_TO.SETRANGE("N§ Contrato", "N§ Contrato compra");
                   IF rPrecio_TO.FINDFIRST THEN
                     IF CONFIRM(Text011,FALSE) THEN
                       rPrecio_TO.DELETEALL(TRUE)  // $025 A¤ado true para que se sincronice con comercializadora
                     ELSE
                       ERROR(Text012);
                 END;
               END;

               cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato, Text014,
                                             Text015, '');

               //+$025 <
               IF Comercializadora THEN
               BEGIN
                 IF TourOperador <> '' THEN BEGIN
                   rTO.RESET;
                   rTO.GET(TourOperador);
                   lrRecRef.GETTABLE(Rec);
                   lrxRecRef.GETTABLE(xRec);
                   cSincroCOM.SincronizaTabla(lrRecRef, lrxRecRef, cSincroCOM.OpDelete, rTO."Empresa comercializadora");
                 END;
               END;
               //+$025 >
             END;

    OnRename=BEGIN
               rPar.FINDFIRST;
               IF NOT rPar."Empresa Delegacion" THEN
                 ERROR(Text016 + '\' + Text002);
             END;

    CaptionML=[ENU=Excursions purchase contract;
               ESP=Contrato Compra Excursiones];
    LookupFormID=Form7010163;
    DrillDownFormID=Form7010163;
  }
  FIELDS
  {
    { 1   ;   ;Delegacion          ;Code10        ;TableRelation=Delegacion.Codigo;
                                                   CaptionML=[ENU=Local Office;
                                                              ESP=Delegacion];
                                                   Description=PK, FK Delegaciones;
                                                   Editable=No }
    { 3   ;   ;N§ Contrato compra  ;Code10        ;CaptionML=[ENU=Purchase contract No.;
                                                              ESP=N§ Contrato compra];
                                                   Description=PK }
    { 5   ;   ;Fecha firma contrato;Date          ;OnValidate=BEGIN
                                                                IF "Fecha firma contrato" <> xRec."Fecha firma contrato" THEN
                                                                BEGIN
                                                                  IF "Fecha inicio contrato" = 0D THEN
                                                                    VALIDATE("Fecha inicio contrato", "Fecha firma contrato");

                                                                  _CheckDates;

                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Fecha firma contrato"),
                                                                                                FORMAT(xRec."Fecha firma contrato"), FORMAT("Fecha firma contrato"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Enrollment date;
                                                              ESP=Fecha firma contrato] }
    { 7   ;   ;Fecha inicio contrato;Date         ;OnValidate=BEGIN
                                                                IF "Fecha inicio contrato" <> xRec."Fecha inicio contrato" THEN
                                                                BEGIN
                                                                  _CheckDates;

                                                                  _CheckFechasPrecios;

                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Fecha inicio contrato"),
                                                                                                FORMAT(xRec."Fecha inicio contrato"), FORMAT("Fecha inicio contrato"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Starting Contract Date;
                                                              ESP=Fecha inicio contrato] }
    { 9   ;   ;Fecha final contrato;Date          ;OnValidate=BEGIN
                                                                IF "Fecha final contrato" <> xRec."Fecha final contrato" THEN
                                                                BEGIN
                                                                  _CheckDates;

                                                                  _CheckFechasPrecios;

                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Fecha final contrato"),
                                                                                                FORMAT(xRec."Fecha final contrato"), FORMAT("Fecha final contrato"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ending Contract Date;
                                                              ESP=Fecha final contrato] }
    { 13  ;   ;Proveedor           ;Code20        ;TableRelation=Vendor.No.;
                                                   OnValidate=BEGIN
                                                                IF Proveedor <> xRec.Proveedor THEN
                                                                BEGIN
                                                                  //+$011
                                                                  _ComprobarCosteConfirmado;

                                                                  IF rProv.GET(Proveedor) THEN
                                                                  BEGIN
                                                                    "Impuestos incluidos" := rProv."Prices Including VAT";
                                                                    "Cod. Terminos Pago"  := rProv."Payment Terms Code";
                                                                    "Cod. Formas Pago"    := rProv."Payment Method Code";
                                                                    "Cod. divisa"         := rProv."Currency Code";
                                                                  END;

                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION(Proveedor),
                                                                                                xRec.Proveedor, Proveedor);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              rProv.SETCURRENTKEY("Tipo Proveedor", "No.");
                                                              CASE "Tipo Contrato" OF
                                                                "Tipo Contrato"::Excursion     : rProv.SETRANGE("Tipo Proveedor", Text020);
                                                                "Tipo Contrato"::Transportista : rProv.SETRANGE("Tipo Proveedor", Text021);
                                                                "Tipo Contrato"::"Guia Venta"  : rProv.SETRANGE("Tipo Proveedor", Text022);
                                                                "Tipo Contrato"::"Guia Oficial": rProv.SETRANGE("Tipo Proveedor", Text023);
                                                                "Tipo Contrato"::TourOperador  : rProv.SETRANGE("Tipo Proveedor", Text024);
                                                              END;

                                                              IF FORM.RUNMODAL(FORM::"Vendor List", rProv) = ACTION::LookupOK THEN
                                                              BEGIN
                                                                Proveedor            := rProv."No.";
                                                                "Cod. Terminos Pago" := rProv."Payment Terms Code";
                                                                "Cod. Formas Pago"   := rProv."Payment Method Code";
                                                                "Cod. divisa"        := rProv."Currency Code";
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Supplier;
                                                              ESP=Proveedor];
                                                   Description=FK Proveedor }
    { 15  ;   ;Impuestos incluidos ;Boolean       ;OnValidate=BEGIN

                                                                IF "Impuestos incluidos" <> xRec."Impuestos incluidos" THEN
                                                                BEGIN
                                                                  // $018-
                                                                  IF "Impuestos incluidos" AND ("% Exento" <> 0) THEN
                                                                    ERROR(Text045);
                                                                  // $018+

                                                                  //+$011
                                                                  _ComprobarCosteConfirmado;

                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Impuestos incluidos"),
                                                                                                FORMAT(xRec."Impuestos incluidos"), FORMAT("Impuestos incluidos"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Included Taxes;
                                                              ESP=Impuestos incluidos] }
    { 19  ;   ;Grupo registro iva prod.;Code10    ;TableRelation="VAT Product Posting Group".Code;
                                                   OnValidate=BEGIN
                                                                IF "Grupo registro iva prod." <> xRec."Grupo registro iva prod." THEN BEGIN
                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Grupo registro iva prod."),
                                                                                                xRec."Grupo registro iva prod.", "Grupo registro iva prod.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. posting group;
                                                              ESP=Grupo registro iva prod.];
                                                   NotBlank=Yes;
                                                   Description=FK Gr. registro iva Producto }
    { 21  ;   ;Cod. Terminos Pago  ;Code10        ;TableRelation="Payment Terms".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Terminos Pago" <> xRec."Cod. Terminos Pago" THEN BEGIN
                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Cod. Terminos Pago"),
                                                                                                xRec."Cod. Terminos Pago", "Cod. Terminos Pago");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment terms code;
                                                              ESP=Cod. Terminos Pago];
                                                   Description=FK Terminos Pago }
    { 23  ;   ;Cod. Formas Pago    ;Code10        ;TableRelation="Payment Method".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Formas Pago" <> xRec."Cod. Formas Pago" THEN BEGIN
                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Cod. Formas Pago"),
                                                                                                xRec."Cod. Formas Pago", "Cod. Formas Pago");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment methods code;
                                                              ESP=Cod. Formas Pago];
                                                   Description=FK Cod. Forma Pago }
    { 25  ;   ;OLD_Cod. Serie      ;Code10        ;TableRelation="No. Series".Code;
                                                   OnValidate=BEGIN
                                                                IF "OLD_Cod. Serie" <> xRec."OLD_Cod. Serie" THEN BEGIN
                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("OLD_Cod. Serie"),
                                                                                                xRec."OLD_Cod. Serie", "OLD_Cod. Serie");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Serial code;
                                                              ESP=Cod. Serie];
                                                   Description=$007, FK N§ Serie }
    { 27  ;   ;Confirmado          ;Boolean       ;CaptionML=[ENU=Confirmed;
                                                              ESP=Confirmado];
                                                   Editable=No }
    { 31  ;   ;OLD_Minimos         ;Integer       ;OnValidate=BEGIN
                                                                IF OLD_Minimos <> xRec.OLD_Minimos THEN BEGIN
                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION(OLD_Minimos),
                                                                                                FORMAT(xRec.OLD_Minimos), FORMAT(OLD_Minimos));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Minimums;
                                                              ESP=Minimos];
                                                   Description=$017 }
    { 33  ;   ;Tipo Contrato       ;Option        ;CaptionML=[ENU=Contract type;
                                                              ESP=Tipo contrato];
                                                   OptionCaptionML=[ENU=Excursion,Carrier,Sale Guide,Offical Guide,TourOperator;
                                                                    ESP=Excursion,Transportista,Guia Venta,Guia Oficial,TourOperador];
                                                   OptionString=Excursion,Transportista,Guia Venta,Guia Oficial,TourOperador;
                                                   Description=PK }
    { 35  ;   ;old_Tipo Facturacion;Option        ;CaptionML=[ENU=Invoicing type;
                                                              ESP=Tipo Facturacion];
                                                   OptionCaptionML=[ENU=Entered Pax,Booked Pax;
                                                                    ESP=Pax Entrados,Pax Reservados];
                                                   OptionString=Pax Entrados,Pax Reservados }
    { 37  ;   ;TourOperador        ;Code10        ;TableRelation=TourOperador.TourOperador;
                                                   OnValidate=BEGIN
                                                                IF TourOperador <> xRec.TourOperador THEN
                                                                BEGIN
                                                                  //+$014 <
                                                                  IF "Tipo Contrato" = "Tipo Contrato"::TourOperador THEN
                                                                  BEGIN
                                                                    rTO.GET(TourOperador);
                                                                    "Aplica comision en factura" := rTO."Aplica comision en factura";

                                                                    IF (Comercializadora)  AND (rTO."Empresa comercializadora" = '') THEN // +$025
                                                                      ERROR(Text047);
                                                                  END;
                                                                  //+$014 >

                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato, FIELDCAPTION(TourOperador),
                                                                                                STRSUBSTNO('%1', xRec.TourOperador), STRSUBSTNO('%1', TourOperador));
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              // +$025
                                                              rTO.RESET;

                                                              rTO.FILTERGROUP(0);
                                                              IF "Tipo Contrato" = "Tipo Contrato"::TourOperador THEN
                                                                IF Comercializadora THEN
                                                                  rTO.SETFILTER(rTO."Empresa comercializadora", '<>%1','');
                                                              rTO.FILTERGROUP(2);

                                                              IF FORM.RUNMODAL(0,rTO) = ACTION::LookupOK THEN BEGIN
                                                                VALIDATE(TourOperador, rTO.TourOperador);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=TourOperator;
                                                              ESP=TourOperador];
                                                   Description=FK TourOperador }
    { 39  ;   ;OLD_Cedido TourOperador;Boolean    ;CaptionML=ESP=O_Cedido TourOperador;
                                                   Description=$003 }
    { 41  ;   ;Excursion           ;Code10        ;TableRelation="Producto agencia".Codigo WHERE (Tipo Producto=CONST(Excursion),
                                                                                                  Caducado=CONST(No));
                                                   OnValidate=BEGIN
                                                                IF Excursion <> xRec.Excursion THEN
                                                                BEGIN
                                                                  //+$011
                                                                  _ComprobarCosteConfirmado;

                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION(Excursion),
                                                                                                xRec.Excursion, Excursion);

                                                                  // $002
                                                                  cFunExc.ControlOficinaExcursion(Excursion, TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Excursions;
                                                              ESP=Producto];
                                                   Description=FK Producto Agencia }
    { 43  ;   ;Cod. divisa         ;Code10        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                rPreCTr@1103355000 : Record 7010150;
                                                                rPreCEx@1103355001 : Record 7010151;
                                                                rPreCgo@1103355003 : Record 7010154;
                                                              BEGIN
                                                                IF "Cod. divisa" <> xRec."Cod. divisa" THEN BEGIN
                                                                  //+$010
                                                                  _ComprobarCosteConfirmado;

                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Cod. divisa"),
                                                                                                xRec."Cod. divisa", "Cod. divisa");

                                                                  CASE "Tipo Contrato" OF
                                                                    "Tipo Contrato"::Transportista: BEGIN
                                                                      rPreCTr.RESET;
                                                                      rPreCTr.SETRANGE(Delegacion   , Delegacion);
                                                                      rPreCTr.SETRANGE("N§ Contrato", "N§ Contrato compra");
                                                                      IF rPreCTr.FINDSET(TRUE) THEN
                                                                        REPEAT
                                                                          rPreCTr."C¢d. divisa" := "Cod. divisa";
                                                                          rPreCTr.VALIDATE(Precio);
                                                                          rPreCTr.MODIFY;
                                                                        UNTIL rPreCTr.NEXT = 0;
                                                                    END;

                                                                    "Tipo Contrato"::Excursion: BEGIN
                                                                      rPreCEx.RESET;
                                                                      rPreCEx.SETRANGE(Delegacion   , Delegacion);
                                                                      rPreCEx.SETRANGE("N§ Contrato", "N§ Contrato compra");
                                                                      IF rPreCEx.FINDSET(TRUE) THEN
                                                                        REPEAT
                                                                          rPreCEx."Cod. divisa" := "Cod. divisa";
                                                                          rPreCEx.VALIDATE(Precio);
                                                                          rPreCEx.VALIDATE("Precio Adulto");
                                                                          rPreCEx.VALIDATE("Precio Ni¤o");
                                                                          rPreCEx.MODIFY;
                                                                        UNTIL rPreCEx.NEXT = 0;
                                                                    END;

                                                                    "Tipo Contrato"::"Guia Oficial": BEGIN
                                                                      rPreCgo.RESET;
                                                                      rPreCgo.SETRANGE(Delegacion   , Delegacion);
                                                                      rPreCgo.SETRANGE("N§ Contrato", "N§ Contrato compra");
                                                                      IF rPreCgo.FINDSET(TRUE) THEN
                                                                        REPEAT
                                                                          rPreCgo."Cod. divisa" := "Cod. divisa";
                                                                          rPreCgo.VALIDATE(Precio);
                                                                          rPreCgo.VALIDATE("Precio Adulto");
                                                                          rPreCgo.VALIDATE("Precio Ni¤o");
                                                                          rPreCgo.MODIFY;
                                                                        UNTIL rPreCgo.NEXT = 0;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Currency code;
                                                              ESP=C¢d. divisa];
                                                   Description=FK Divisa }
    { 45  ;   ;old_Modo contar ni¤os;Option       ;OnValidate=BEGIN
                                                                IF "old_Modo contar ni¤os" <> xRec."old_Modo contar ni¤os" THEN
                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("old_Modo contar ni¤os"),
                                                                                                FORMAT(xRec."old_Modo contar ni¤os"), FORMAT("old_Modo contar ni¤os"));
                                                              END;

                                                   CaptionML=[ENU=Count Children mode;
                                                              ESP=Modo contar ni¤os];
                                                   OptionCaptionML=[ENU=Half,Whole;
                                                                    ESP=Medio,Entero];
                                                   OptionString=Medio,Entero }
    { 46  ;   ;Representante multihotel;Boolean   ;OnValidate=BEGIN
                                                                IF "Representante multihotel" <> xRec."Representante multihotel" THEN
                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Representante multihotel"),
                                                                                                FORMAT(xRec."Representante multihotel"), FORMAT("Representante multihotel"));
                                                              END;

                                                   CaptionML=[ENU=Representative multihotel;
                                                              ESP=Representante multihotel] }
    { 47  ;   ;Aplica comision en factura;Boolean ;OnValidate=BEGIN
                                                                IF "Aplica comision en factura" <> xRec."Aplica comision en factura" THEN
                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Aplica comision en factura"),
                                                                                                FORMAT(xRec."Aplica comision en factura"), FORMAT("Aplica comision en factura"));
                                                              END;

                                                   CaptionML=[ENU=Apply commission in invoice;
                                                              ESP=Aplica comision en factura];
                                                   Description=$004, Solo para los contratos de comision touroperador }
    { 49  ;   ;Guia Venta          ;Code20        ;TableRelation="Representante excursiones".Codigo WHERE (Bloqueado=CONST(No));
                                                   OnValidate=BEGIN
                                                                IF "Guia Venta" <> xRec."Guia Venta" THEN
                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("Guia Venta"),
                                                                                                FORMAT(xRec."Guia Venta"), FORMAT("Guia Venta"));
                                                              END;

                                                   CaptionML=[ENU=Sales Guide;
                                                              ESP=Guia Venta];
                                                   Description=$006, Solo para los contratos de comision de guia venta }
    { 50  ;   ;% Exento            ;Decimal       ;OnValidate=BEGIN
                                                                //$018-
                                                                IF ("% Exento" <> xRec."% Exento") THEN
                                                                BEGIN
                                                                  IF "Impuestos incluidos" THEN
                                                                    ERROR(Text045);

                                                                  //+$019
                                                                  _ComprobarCosteConfirmado;

                                                                  cPar.intro_historico_contrato(Delegacion, "N§ Contrato compra", Tipo_Contrato,
                                                                                                FIELDCAPTION("% Exento"),
                                                                                                FORMAT(xRec."% Exento"), FORMAT("% Exento"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Non-Taxable %;
                                                              ESP=% Exento];
                                                   MinValue=0;
                                                   MaxValue=99;
                                                   Description=$018 }
    { 70  ;   ;Comercializadora    ;Boolean       ;CaptionML=[ENU=Offshore;
                                                              ESP=Comercializadora];
                                                   Description=$025 }
  }
  KEYS
  {
    {    ;Delegacion,N§ Contrato compra,Tipo Contrato;
                                                   Clustered=Yes }
    {    ;Proveedor,Fecha inicio contrato,Fecha final contrato,Comercializadora;
                                                   KeyGroups=RENUMERING }
    {    ;Fecha inicio contrato,Fecha final contrato,Comercializadora;
                                                   KeyGroups=RENUMERING }
    {    ;Tipo Contrato,TourOperador,Fecha inicio contrato,Fecha final contrato,Comercializadora;
                                                   KeyGroups=RENUMERING }
    {    ;Proveedor,Excursion,Confirmado,Fecha inicio contrato,Fecha final contrato,Comercializadora;
                                                   KeyGroups=RENUMERING }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1103355006 : TextConst 'ENU=Only contracts of transfer can be signed up\;ESP=Solo se pueden dar de alta contratos de transfer';
      Text002@1103355007 : TextConst 'ENU=in the local offices;ESP=en las delegaciones.';
      Text008@1103355013 : TextConst 'ENU=Only transfer contracts can be modified\;ESP=Solo se pueden modificar contratos de transfer';
      Text009@1103355014 : TextConst 'ENU=Item VAT posting Group must be indicated;ESP=Se debe indicar un Grupo registro iva producto.';
      Text010@1103355015 : TextConst 'ENU=Only contracts can be cancelled\;ESP=Solo se pueden dar de baja contratos';
      Text011@1103355016 : TextConst 'ENU=This contract has associated prices, delete?;ESP=Este contrato tiene precios asociados, borrar?';
      Text012@1103355017 : TextConst 'ENU=Contract has not been deleted;ESP=El contrato no se ha borrado';
      Text013@1103355018 : TextConst 'ENU=This contract has associated prices and/or zones, delete?;ESP=Este contrato tiene precios y/o zonas asociados, borrar?';
      Text014@1103355019 : TextConst 'ENU=Deleted;ESP=Borrado';
      Text015@1103355020 : TextConst 'ENU=Deleted register;ESP=Borrado registro';
      Text016@1103355021 : TextConst 'ENU=Only transfer contract can be renamed\;ESP=Solo se pueden renombrar contratos de transfer';
      Text017@1103355022 : TextConst 'ENU=Starting date of the contract must be after;ESP=La fecha de inicio del contrato debe ser posterior a la';
      Text018@1103355023 : TextConst 'ENU=the signature date of the contract.;ESP=fecha de firma del contrato.';
      Text019@1103355024 : TextConst 'ENU=Starting date cannot be higher than final date;ESP=La fecha de inicio no puede ser posterior a la de final.';
      Text020@1103355025 : TextConst 'ENU=E;ESP=E';
      Text021@1103355026 : TextConst 'ENU=T;ESP=T';
      Text022@1103355027 : TextConst 'ENU=GV;ESP=GV';
      Text023@1103355028 : TextConst 'ENU=GO;ESP=GO';
      Text024@1103355029 : TextConst 'ENU=TO;ESP=TO';
      Text025@1103355030 : TextConst 'ENU=Must indicate an excursion in the purchase contracts of excursions supplier;ESP=Debe indicar una excursion en los contratos de compra de Proveedor de excursiones.';
      Text026@1103355031 : TextConst 'ENU=Supplier must be specified;ESP=Debe especificar un proveedor';
      Text027@1103355032 : TextConst 'ENU=Touroperator is needed;ESP=Es necesario especificar un Touroperador';
      Text028@1103355033 : TextConst 'ENU=Starting date overlaps with the\;ESP=La fecha de inicio de este contrato se solapa con el';
      Text029@1103355034 : TextConst 'ENU=contract %1-%2;ESP=contrato %1-%2.';
      Text030@1103355035 : TextConst 'ENU=Final date of this contract overlaps with the\;ESP=La fecha de final de este contrato se solapa con el';
      Text031@1103355036 : TextConst 'ENU=This contract overlaps with the contract %1-%2;ESP=Este contrato se solapa con el contrato %1-%2.';
      Text032@1103355037 : TextConst 'ENU=Must specify %1.;ESP=Debe especificar %1.';
      Text036@1103355041 : TextConst 'ENU=Copy purchase contract %1 over the new contract %2?;ESP=Copiar el contrato Compra %1 sobre el nuevo contrato %2?';
      Text037@1103355042 : TextConst 'ENU=There is no contract to copy;ESP=No hay contrato para copiar';
      rPar@1103355000 : Record 7009700;
      rTra@1103355001 : Record 7009801;
      rProv@1103355002 : Record 23;
      rTO@1100217008 : Record 7009717;
      cPar@1103355003 : Codeunit 7009700;
      cFunExc@1100217000 : Codeunit 7010141;
      cSincroCOM@1000000002 : Codeunit 7009793;
      Ventana@1103355004 : Dialog;
      Text038@1100217001 : TextConst 'ENU=A contract with confirmed costs cannot be deleted.;ESP=No se puede borrar un contrato con costes confirmados.';
      Text039@1100217002 : TextConst 'ENU=EPC;ESP=CPE';
      Text040@1100217003 : TextConst 'ENU=ETC;ESP=CTE';
      Text041@1100217004 : TextConst 'ENU=OGC;ESP=CGO';
      Text042@1100217005 : TextConst 'ENU=SGC;ESP=CGV';
      Text043@1100217006 : TextConst 'ENU=TOC;ESP=CTO';
      Text044@1100217009 : TextConst 'ENU=You can''t change sensitive data of a contract with costs generated.;ESP=No se pueden cambiar datos sensibles de un contrato con costes confirmados.';
      Text045@1100217007 : TextConst 'ESP=No puede informar de porcentaje Exento en los contratos con Impuestos incluidos.';
      Text046@1000000000 : TextConst 'ENU=You can not apply the change of dates because some prices would fall outside the contract period;ESP=No se puede aplicar el cambio de fechas porque algunos precios quedarian fuera del periodo del contrato';
      Text047@1000000001 : TextConst 'ENU=Selected Touroperatos is not offshore company.;ESP=El Touroperador seleccionado no es de empresa comercializadora.';

    PROCEDURE switch@1();
    BEGIN
      VALIDATE(Confirmado, FALSE);
      Confirmado := Confirmar_Contrato_Compra(Rec);
      Desconfirmar_Precios;
    END;

    PROCEDURE Tipo_Contrato@8() : Integer;
    BEGIN
      CASE "Tipo Contrato" OF
        "Tipo Contrato"::Excursion     : EXIT(7);
        "Tipo Contrato"::Transportista : EXIT(8);
        "Tipo Contrato"::"Guia Venta"  : EXIT(9);
        "Tipo Contrato"::TourOperador  : EXIT(10);
        "Tipo Contrato"::"Guia Oficial": EXIT(11);
      END;
    END;

    PROCEDURE Confirmar_Contrato_Compra@2(Contrato@1103355000 : Record 7010142) : Boolean;
    VAR
      rConC@1103355001 : Record 7010142;
    BEGIN
      rPar.FINDFIRST;

      IF (Contrato.Delegacion = '') OR
         (Contrato."Fecha inicio contrato" = 0D) OR
         (Contrato."Fecha final contrato" = 0D) THEN
        EXIT(FALSE);

      IF (Contrato."Tipo Contrato" = Contrato."Tipo Contrato"::Excursion) AND
         (Contrato.Excursion = '') THEN
      BEGIN
        MESSAGE(Text025);
        EXIT(FALSE);
      END;

      IF Contrato.Proveedor = '' THEN
      BEGIN
        CASE Contrato."Tipo Contrato" OF
          Contrato."Tipo Contrato"::Excursion:
          BEGIN
            MESSAGE(Text026);
            EXIT(FALSE);
          END;
          Contrato."Tipo Contrato"::Transportista:
          BEGIN
            MESSAGE(Text026);
            EXIT(FALSE);
          END;
          Contrato."Tipo Contrato"::"Guia Oficial":
          BEGIN
            MESSAGE(Text026);
            EXIT(FALSE);
          END;
        END;
      END;

      rConC.RESET;
      rConC.SETCURRENTKEY(Proveedor,
                          Excursion,
                          Confirmado,
                          "Fecha inicio contrato",
                          "Fecha final contrato");

      // Si se ha especificado que hay que facturar cada GV individualmente
      // entonces hay que crear un contrato para cada GV y por lo tanto hay
      // que comprobar el solapamiento por guia de venta.

      IF rPar."Contrato x Guia venta" THEN
        rConC.SETRANGE("Guia Venta", Contrato."Guia Venta");

      rConC.SETRANGE (Proveedor              , Contrato.Proveedor);
      rConC.SETRANGE (TourOperador           , TourOperador);
      rConC.SETRANGE (Excursion              , Contrato.Excursion);
      rConC.SETRANGE (Confirmado             , TRUE);
      rConC.SETFILTER("Fecha inicio contrato", '<=%1', Contrato."Fecha inicio contrato");
      rConC.SETFILTER("Fecha final contrato" , '>=%1', Contrato."Fecha inicio contrato");
      rConC.SETRANGE (Delegacion             , Contrato.Delegacion);
      rConC.SETFILTER("N§ Contrato compra"   , '<>%1', Contrato."N§ Contrato compra");
      rConC.SETRANGE ("Tipo Contrato"        , Contrato."Tipo Contrato");
      rConC.SETRANGE (Comercializadora       , Contrato.Comercializadora); //+$026
      IF rConC.FINDFIRST THEN BEGIN
        MESSAGE(Text028 + '\' + Text029, rConC.Delegacion, rConC."N§ Contrato compra");
        EXIT(FALSE);
      END;

      rConC.SETFILTER("Fecha inicio contrato", '<=%1', Contrato."Fecha final contrato");
      rConC.SETFILTER("Fecha final contrato" , '>=%1', Contrato."Fecha final contrato");
      IF rConC.FINDFIRST THEN BEGIN
        MESSAGE(Text030 + '\' + Text029, rConC.Delegacion, rConC."N§ Contrato compra");
        EXIT(FALSE);
      END;

      rConC.SETFILTER("Fecha inicio contrato", '>=%1', Contrato."Fecha inicio contrato");
      rConC.SETFILTER("Fecha final contrato" , '<=%1', Contrato."Fecha final contrato");
      IF rConC.FINDFIRST THEN BEGIN
        MESSAGE(Text031, rConC.Delegacion, rConC."N§ Contrato compra");
        EXIT(FALSE);
      END;

      IF (Contrato."Grupo registro iva prod." = '') AND
         (Contrato."Tipo Contrato" <> Contrato."Tipo Contrato"::TourOperador) THEN BEGIN
        MESSAGE(Text032, Contrato.FIELDCAPTION("Grupo registro iva prod."));
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE Copiar_Contrato@6(rContrato@1103355000 : Record 7010142);
    VAR
      rConC@1103355001 : Record 7010142;
      rConC2@1103355002 : Record 7010142;
      "Nuevo Contrato"@1103355003 : Code[10];
    BEGIN
      // copiar_Contrato

      IF rConC.GET(rContrato.Delegacion, rContrato."N§ Contrato compra", rContrato."Tipo Contrato") THEN
      BEGIN
        //-$009Ventana.OPEN(Text033 +
        //-$009             Text034);
        //-$009Ventana.INPUT(1, "Nuevo Contrato");
        //-$009Ventana.CLOSE;

        //-$009IF ("Nuevo Contrato" <> '') AND rConC2.GET(rConC.Delegacion, "Nuevo Contrato") THEN
        //-$009  ERROR(Text035, "Nuevo Contrato");

        Contrato_Compra(rConC, "Nuevo Contrato");

        IF NOT CONFIRM(STRSUBSTNO(Text036,
                       rConC."N§ Contrato compra", "Nuevo Contrato")) THEN BEGIN
          IF rConC.GET(rContrato.Delegacion, "Nuevo Contrato", rContrato."Tipo Contrato") THEN
            rConC.DELETE;
          EXIT;
        END;

        Precios_Compra (rConC, "Nuevo Contrato");
        Zonas_Transfer (rConC, "Nuevo Contrato");
      END
      ELSE
        ERROR(Text037);
    END;

    PROCEDURE Contrato_Compra@12(ConC@1103355000 : Record 7010142;VAR "Nuevo Contrato"@1103355001 : Code[10]);
    VAR
      ConC2@1103355002 : Record 7010142;
    BEGIN
      // contrato_compra

      ConC2.TRANSFERFIELDS(ConC);
      ConC2.VALIDATE("N§ Contrato compra", "Nuevo Contrato");
      ConC2.Confirmado := FALSE;
      ConC2.INSERT(TRUE);
      IF "Nuevo Contrato" = '' THEN
        "Nuevo Contrato" := ConC2."N§ Contrato compra";
    END;

    PROCEDURE Precios_Compra@16(ConC@1103355000 : Record 7010142;"Nuevo Contrato"@1103355001 : Code[10]);
    VAR
      rPreExc@1103355002 : Record 7010151;
      rPreExc2@1103355003 : Record 7010151;
      rPreTra@1103355004 : Record 7010150;
      rPreTra2@1103355005 : Record 7010150;
      rPreGO@1103355006 : Record 7010154;
      rPreGO2@1103355007 : Record 7010154;
      rPreGV@1103355008 : Record 7010152;
      rPreGV2@1103355009 : Record 7010152;
      rPreTO@1103355010 : Record 7010153;
      rPreTO2@1103355011 : Record 7010153;
    BEGIN
      // precios_compra

      CASE ConC."Tipo Contrato" OF
        ConC."Tipo Contrato"::Excursion: BEGIN
          rPreExc.RESET;
          rPreExc.SETRANGE(Delegacion   , ConC.Delegacion);
          rPreExc.SETRANGE("N§ Contrato", ConC."N§ Contrato compra");
          IF rPreExc.FINDSET THEN
            REPEAT
              rPreExc2.TRANSFERFIELDS(rPreExc);
              rPreExc2."N§ Contrato" := "Nuevo Contrato";
              rPreExc2.Activo        := FALSE;
              rPreExc2.INSERT;
            UNTIL rPreExc.NEXT = 0;

          rPreExc.RESET;
        END;
        ConC."Tipo Contrato"::Transportista: BEGIN
          rPreTra.RESET;
          rPreTra.SETRANGE(Delegacion   , ConC.Delegacion);
          rPreTra.SETRANGE("N§ Contrato", ConC."N§ Contrato compra");
          IF rPreTra.FINDSET THEN
            REPEAT
              rPreTra2.TRANSFERFIELDS(rPreTra);
              rPreTra2."N§ Contrato" := "Nuevo Contrato";
              rPreTra2.Activo        := FALSE;
              rPreTra2.INSERT;
            UNTIL rPreTra.NEXT = 0;

          rPreTra.RESET;
        END;
        ConC."Tipo Contrato"::"Guia Oficial": BEGIN
          rPreGO.RESET;
          rPreGO.SETRANGE(Delegacion   , ConC.Delegacion);
          rPreGO.SETRANGE("N§ Contrato", ConC."N§ Contrato compra");
          IF rPreGO.FINDSET THEN
            REPEAT
              rPreGO2.TRANSFERFIELDS(rPreGO);
              rPreGO2."N§ Contrato" := "Nuevo Contrato";
              rPreGO2.Activo        := FALSE;
              rPreGO2.INSERT;
            UNTIL rPreGO.NEXT = 0;

          rPreExc.RESET;
        END;
        ConC."Tipo Contrato"::"Guia Venta": BEGIN
          rPreGV.RESET;
          rPreGV.SETRANGE(Delegacion   , ConC.Delegacion);
          rPreGV.SETRANGE("N§ Contrato", ConC."N§ Contrato compra");
          IF rPreGV.FINDSET THEN
            REPEAT
              rPreGV2.TRANSFERFIELDS(rPreGV);
              rPreGV2."N§ Contrato" := "Nuevo Contrato";
              rPreGV2.Activo        := FALSE;
              rPreGV2.INSERT;
            UNTIL rPreGV.NEXT = 0;

          rPreGV.RESET;
        END;
        ConC."Tipo Contrato"::TourOperador: BEGIN
          rPreTO.RESET;
          rPreTO.SETRANGE(Delegacion   , ConC.Delegacion);
          rPreTO.SETRANGE("N§ Contrato", ConC."N§ Contrato compra");
          IF rPreTO.FINDSET THEN
            REPEAT
              rPreTO2.TRANSFERFIELDS(rPreTO);
              rPreTO2."N§ Contrato" := "Nuevo Contrato";
              rPreTO2.Activo        := FALSE;
              rPreTO2.INSERT;
            UNTIL rPreTO.NEXT = 0;

          rPreTO.RESET;
        END;

      END;
    END;

    PROCEDURE Zonas_Transfer@26(rContrato@1103355000 : Record 7010142;"Nuevo Contrato"@1103355001 : Code[10]);
    VAR
      rZonas@1103355002 : Record 7010149;
      rZonas2@1103355003 : Record 7010149;
    BEGIN
      rZonas.RESET;
      rZonas.SETRANGE("Codigo Contrato", rContrato."N§ Contrato compra");
      rZonas.SETRANGE("Tipo Contrato"  , rZonas."Tipo Contrato"::Compra);
      IF rZonas.FINDSET THEN
        REPEAT
          rZonas2.TRANSFERFIELDS(rZonas);
          rZonas2."Codigo Contrato" := "Nuevo Contrato";
          rZonas2.INSERT;
        UNTIL rZonas.NEXT = 0;

      rZonas.RESET;
    END;

    PROCEDURE Desconfirmar_Precios@7();
    VAR
      rPreExc@1103355000 : Record 7010151;
      rPreTra@1103355001 : Record 7010150;
      rPreGO@1103355002 : Record 7010154;
      rPreGV@1103355003 : Record 7010152;
      rPreTO@1103355004 : Record 7010153;
    BEGIN
      CASE "Tipo Contrato" OF
        "Tipo Contrato"::Excursion: BEGIN
          rPreExc.SETRANGE(Delegacion, Delegacion);
          rPreExc.SETRANGE("N§ Contrato", "N§ Contrato compra");
          IF NOT rPreExc.FINDFIRST THEN
            EXIT;
          IF NOT Confirmado THEN
            rPreExc.MODIFYALL(Activo, FALSE)
        END;
        "Tipo Contrato"::Transportista:BEGIN
          rPreTra.SETRANGE(Delegacion, Delegacion);
          rPreTra.SETRANGE("N§ Contrato", "N§ Contrato compra");
          IF NOT rPreTra.FINDFIRST THEN
            EXIT;
          IF NOT Confirmado THEN
            rPreTra.MODIFYALL(Activo, FALSE)
        END;
        "Tipo Contrato"::TourOperador: BEGIN
          rPreTO.SETRANGE(Delegacion, Delegacion);
          rPreTO.SETRANGE("N§ Contrato", "N§ Contrato compra");
          IF NOT rPreTO.FINDFIRST THEN
            EXIT;
          IF NOT Confirmado THEN
            rPreTO.MODIFYALL(Activo, FALSE)
        END;
        "Tipo Contrato"::"Guia Venta": BEGIN
          rPreGV.SETRANGE(Delegacion, Delegacion);
          rPreGV.SETRANGE("N§ Contrato", "N§ Contrato compra");
          IF NOT rPreGV.FINDFIRST THEN
            EXIT;
          IF NOT Confirmado THEN
            rPreGV.MODIFYALL(Activo, FALSE)
        END;
        "Tipo Contrato"::"Guia Oficial": BEGIN
          rPreGO.SETRANGE(Delegacion, Delegacion);
          rPreGO.SETRANGE("N§ Contrato", "N§ Contrato compra");
          IF NOT rPreGO.FINDFIRST THEN
            EXIT;
          IF NOT Confirmado THEN
            rPreGO.MODIFYALL(Activo, FALSE)
        END;
      END;
    END;

    LOCAL PROCEDURE _ComprobarBorrado@1100217000();
    VAR
      lrCoste@1100217000 : Record 7010166;
    BEGIN
      // _ComprobarBorrado

      lrCoste.RESET;

      CASE "Tipo Contrato" OF
        "Tipo Contrato"::Excursion: lrCoste.SETRANGE(Concepto, 'EXCC');
        "Tipo Contrato"::Transportista: lrCoste.SETRANGE(Concepto, 'EXAC');
        "Tipo Contrato"::"Guia Oficial": lrCoste.SETRANGE(Concepto, 'EXGO');
      END;

      lrCoste.SETRANGE("N§ Contrato Excursion", "N§ Contrato compra");
      IF NOT lrCoste.ISEMPTY THEN
        ERROR(Text038);
    END;

    LOCAL PROCEDURE _ComprobarCosteConfirmado@1100217001();
    VAR
      lrCoste@1100217000 : Record 7010166;
    BEGIN
      // _ComprobarCosteConfirmado

      lrCoste.RESET;

      CASE "Tipo Contrato" OF
        "Tipo Contrato"::Excursion: lrCoste.SETRANGE(Concepto, 'EXCC');
        "Tipo Contrato"::Transportista: lrCoste.SETRANGE(Concepto, 'EXAC');
        "Tipo Contrato"::"Guia Oficial": lrCoste.SETRANGE(Concepto, 'EXGO');
      END;

      lrCoste.SETRANGE("N§ Contrato Excursion", "N§ Contrato compra");
      IF NOT lrCoste.ISEMPTY THEN
        ERROR(Text044);
    END;

    PROCEDURE NombreProveedor@1100217002() : Text[250];
    VAR
      lrVendor@1100217000 : Record 23;
    BEGIN
      IF lrVendor.GET(Proveedor) THEN
        EXIT(lrVendor.Name);
    END;

    PROCEDURE ConsultarTasas@1100217003();
    VAR
      lrTasa@1100217002 : Record 7010260;
      lfTasasContrato@1100217003 : Form 7010237;
    BEGIN
      // ConsultarTasas

      lrTasa.RESET;
      lrTasa.FILTERGROUP(2);
      lrTasa.SETRANGE(Delegacion            , Delegacion);
      lrTasa.SETRANGE("Num. Contrato compra", "N§ Contrato compra");
      lrTasa.SETRANGE("Tipo Contrato"       , "Tipo Contrato");
      lrTasa.FILTERGROUP(0);

      CLEAR(lfTasasContrato);
      lfTasasContrato.SETTABLEVIEW(lrTasa);
      lfTasasContrato.RUNMODAL;
    END;

    LOCAL PROCEDURE _CheckDates@1000000000();
    BEGIN
      // _CheckDates

      IF ("Fecha firma contrato" <> 0D) AND ("Fecha inicio contrato" <>0D) THEN
        IF ("Fecha firma contrato" > "Fecha inicio contrato") THEN
          ERROR(Text017 + ' ' + Text018);

      IF ("Fecha final contrato" <> 0D) AND ("Fecha inicio contrato" <> 0D) THEN
        IF "Fecha inicio contrato" > "Fecha final contrato" THEN
          ERROR(Text019);
    END;

    LOCAL PROCEDURE _CheckFechasPrecios@1000000002();
    VAR
      lrPreTra@1000000000 : Record 7010150;
      lrPreSer@1000000001 : Record 7010151;
      lrPreGO@1000000002 : Record 7010154;
      lrPreGV@1000000003 : Record 7010152;
      lrPreTO@1000000004 : Record 7010153;
    BEGIN
      // _CheckFechasPrecios

      //. Vamos a comprobar que las fechas de los precios no queden fuera del contrato con un cambio de fechas

      CASE "Tipo Contrato" OF
        "Tipo Contrato"::Excursion:
        BEGIN
          lrPreSer.RESET;
          lrPreSer.SETRANGE (Delegacion   , Delegacion);
          lrPreSer.SETRANGE ("N§ Contrato", "N§ Contrato compra");
          lrPreSer.SETFILTER("Fecha desde", '<%1', "Fecha inicio contrato");
          IF lrPreSer.FINDFIRST THEN
            ERROR(Text046);

          lrPreSer.RESET;
          lrPreSer.SETRANGE (Delegacion   , Delegacion);
          lrPreSer.SETRANGE ("N§ Contrato", "N§ Contrato compra");
          lrPreSer.SETFILTER("Fecha hasta", '>%1', "Fecha final contrato");
          IF lrPreSer.FINDFIRST THEN
            ERROR(Text046);
        END;
        "Tipo Contrato"::Transportista:
        BEGIN
          lrPreTra.RESET;
          lrPreTra.SETRANGE (Delegacion   , Delegacion);
          lrPreTra.SETRANGE ("N§ Contrato", "N§ Contrato compra");
          lrPreTra.SETFILTER("Fecha desde", '<%1', "Fecha inicio contrato");
          IF lrPreTra.FINDFIRST THEN
            ERROR(Text046);

          lrPreTra.RESET;
          lrPreTra.SETRANGE (Delegacion   , Delegacion);
          lrPreTra.SETRANGE ("N§ Contrato", "N§ Contrato compra");
          lrPreTra.SETFILTER("Fecha hasta", '>%1', "Fecha final contrato");
          IF lrPreTra.FINDFIRST THEN
            ERROR(Text046);
        END;
        "Tipo Contrato"::"Guia Oficial":
        BEGIN
          lrPreGO.RESET;
          lrPreGO.SETRANGE (Delegacion   , Delegacion);
          lrPreGO.SETRANGE ("N§ Contrato", "N§ Contrato compra");
          lrPreGO.SETFILTER("Fecha desde", '<%1', "Fecha inicio contrato");
          IF lrPreGO.FINDFIRST THEN
            ERROR(Text046);

          lrPreGO.RESET;
          lrPreGO.SETRANGE (Delegacion   , Delegacion);
          lrPreGO.SETRANGE ("N§ Contrato", "N§ Contrato compra");
          lrPreGO.SETFILTER("Fecha hasta", '>%1', "Fecha final contrato");
          IF lrPreGO.FINDFIRST THEN
            ERROR(Text046);
        END;
        "Tipo Contrato"::"Guia Venta":
        BEGIN
          lrPreGV.RESET;
          lrPreGV.SETRANGE (Delegacion   , Delegacion);
          lrPreGV.SETRANGE ("N§ Contrato", "N§ Contrato compra");
          lrPreGV.SETFILTER("Fecha desde", '<%1', "Fecha inicio contrato");
          IF lrPreGV.FINDFIRST THEN
            ERROR(Text046);

          lrPreGV.RESET;
          lrPreGV.SETRANGE (Delegacion   , Delegacion);
          lrPreGV.SETRANGE ("N§ Contrato", "N§ Contrato compra");
          lrPreGV.SETFILTER("Fecha hasta", '>%1', "Fecha final contrato");
          IF lrPreGV.FINDFIRST THEN
            ERROR(Text046);
        END;
        "Tipo Contrato"::TourOperador:
        BEGIN
          lrPreTO.RESET;
          lrPreTO.SETRANGE (Delegacion   , Delegacion);
          lrPreTO.SETRANGE ("N§ Contrato", "N§ Contrato compra");
          lrPreTO.SETFILTER("Fecha desde", '<%1', "Fecha inicio contrato");
          IF lrPreTO.FINDFIRST THEN
            ERROR(Text046);

          lrPreTO.RESET;
          lrPreTO.SETRANGE (Delegacion   , Delegacion);
          lrPreTO.SETRANGE ("N§ Contrato", "N§ Contrato compra");
          lrPreTO.SETFILTER("Fecha hasta", '>%1', "Fecha final contrato");
          IF lrPreTO.FINDFIRST THEN
            ERROR(Text046);
        END;
      END;
    END;

    BEGIN
    {
      $001 AJS 16122010 He creado un nuevo campo "Representante multihotel" para poder indicar aquellos guias de venta
                        que pueden vender en mas de un hotel y saltarse el control de las reservas de excursiones.

      $002 JPT 08/08/12 CNT-OC-12004 Incluir filtro por oficina en las excursiones.Control de Oficina en Excursion

      $003 AJS 06092012 Marco el campo Cedido touroperador como obsoleto

      $004 AJS 14092102 Nuevo campo "No descontar en factura" para indicar en los contratos de comision de los
                        touroperadores que la comision se calcula pero no se descuenta.

      $005 AJS 14092012 Modificar la funcion Confirmar_Contrato_Compra para que si es de tipo contrato no pregunte
                        por los campos de configuracion financiera

      $006 AJS 20092012 Nuevo campo Guia venta para relacionar los contratos de guia de venta y que no sea necesario
                        crear un codigo de proveedor para las comisiones

      $007 AJS 22092012 Marco el campo Cod. Serie como obsoleto

      $008 AJS 31102012 Controlamos que no se pueda borrar un contrato con costes asociados

      $009 AJS 27122012 Modifico la funcion de copiar contrato para que no pida la numeracion no es operativo

      $010 AJS 27022013 No permito cambiar la divisa de un contrato si tiene costes confirmados

      $011 AJS 07032013 No permitimos cambiar el proveedor de un contrato si tiene costes confirmados

      $012 AJS 17062013 El control de grupo registro iva producto no debe hacerse para los contratos de Touroperador

      $013 AJS 26082013 Elimino los campos Transportista y "Precios Por" porque son obsoletos

      $014 AJS 29102013 Rellenar el campo "No descontar en factura" a partir del campo rTO."Descuenta comision fra excursi"

      $015 AJS 14042014 Nueva funcion ConsultarTasas para ver las tasas de cambio divisa asociadas al contrato

      $016 AJS 07502104 Cambio el nombre del campo para que sea Excursion y no Producto

      $017 AJS 11052014 Marco el campo Minimos como obsoleto

      $018 MNC 03072014 CNT-OC-14077

      $019 AJS 21082014 No se puede cambiar el valor del campo "% Exento" si ya hay costes confirmados

      $020 AJS 21082014 El campo "Impuestos incluidos" lo tomamos de la ficha del proveedor para que no haya incongruencias en el
                        momento de hacer la factura

      $021 AJS 05102014 Nueva funcion para comprobar que los cambios de fecha no dejan precios huerfanaos

      $022 AJS 10102014 El campo "Modo contar ni¤os" es obsoleto

      $023 AJS 10102014 El campo "Tipo Facturacion" es obsoleto

      $024 AJS 16102014 Corregir error al anotar historico del Touroperador

      $025 ARM 12032015 CNT-CAR-14096 Comecializadora

      $026 AJS 14042015 El campo Comercializadora se incluye en la funcion Confirmar_Contrato_Compra

      $027 AJS 14042015 Cambio de nombre el campo 47 para que sea igual que en el touroperador
    }
    END.
  }
}
