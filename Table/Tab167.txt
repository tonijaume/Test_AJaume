OBJECT Table 167 Job
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES5.00;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Description;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 JobSetup.GET;
                 JobSetup.TESTFIELD("Job Nos.");
                 NoSeriesMgt.InitSeries(JobSetup."Job Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF GETFILTER("Bill-to Customer No.") <> '' THEN
                 IF GETRANGEMIN("Bill-to Customer No.") = GETRANGEMAX("Bill-to Customer No.") THEN
                   VALIDATE("Bill-to Customer No.",GETRANGEMIN("Bill-to Customer No."));

               DimMgt.UpdateDefaultDim(
                 DATABASE::Job,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
               InitWIPFields;

               "Creation Date" := TODAY;
               "Last Date Modified" := "Creation Date";
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=VAR
               CommentLine@1004 : Record 97;
               JobTask@1000 : Record 1001;
               JobResPrice@1001 : Record 1012;
               JobItemPrice@1002 : Record 1013;
               JobGLAccPrice@1003 : Record 1014;
             BEGIN
               MoveEntries.MoveJobEntries(Rec);

               JobTask.SETCURRENTKEY("Job No.");
               JobTask.SETRANGE("Job No.","No.");
               JobTask.DELETEALL(TRUE);

               JobResPrice.SETRANGE("Job No.","No.");
               JobResPrice.DELETEALL;

               JobItemPrice.SETRANGE("Job No.","No.");
               JobItemPrice.DELETEALL;

               JobGLAccPrice.SETRANGE("Job No.","No.");
               JobGLAccPrice.DELETEALL;

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Job);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               DimMgt.DeleteDefaultDim(DATABASE::Job,"No.");
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=[ENU=Job;
               ESP=Proyecto];
    LookupFormID=Form89;
    DrillDownFormID=Form89;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Description;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  JobSetup.GET;
                                                                  NoSeriesMgt.TestManual(JobSetup."Job Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 2   ;   ;Search Description  ;Code50        ;CaptionML=[ENU=Search Description;
                                                              ESP=Descripci¢n alias] }
    { 3   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ("Search Description" = UPPERCASE(xRec.Description)) OR ("Search Description" = '') THEN
                                                                  "Search Description" := Description;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 4   ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2] }
    { 5   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Bill-to Customer No." = '') OR ("Bill-to Customer No." <> xRec."Bill-to Customer No.") THEN
                                                                  IF JobLedgEntryExist OR JobPlanningLineExist THEN
                                                                    ERROR(Text000,FIELDCAPTION("Bill-to Customer No."),TABLECAPTION);
                                                                UpdateCust;
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ESP=Factura-a N§ cliente] }
    { 12  ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              ESP=Fecha creaci¢n];
                                                   Editable=No }
    { 13  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicial] }
    { 14  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                CheckDate;
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              ESP=Fecha final] }
    { 19  ;   ;Status              ;Option        ;InitValue=Order;
                                                   OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF xRec.Status <> Status THEN BEGIN
                                                                  IF Status = Status::Completed THEN
                                                                    VALIDATE(Complete,TRUE);
                                                                  IF xRec.Status = xRec.Status::Completed THEN BEGIN
                                                                    IF DIALOG.CONFIRM(Text004) THEN
                                                                      VALIDATE(Complete,FALSE)
                                                                    ELSE BEGIN
                                                                      Status := xRec.Status;
                                                                    END;
                                                                  END;
                                                                  JobPlanningLine.SETCURRENTKEY("Job No.");
                                                                  JobPlanningLine.SETRANGE("Job No.","No.");
                                                                  JobPlanningLine.MODIFYALL(Status,Status);
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Planning,Quote,Order,Completed;
                                                                    ESP=Presupuesto,Oferta,Pedido,Terminado];
                                                   OptionString=Planning,Quote,Order,Completed }
    { 20  ;   ;Person Responsible  ;Code20        ;TableRelation=Resource;
                                                   CaptionML=[ENU=Person Responsible;
                                                              ESP=C¢d. responsable] }
    { 21  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ESP=C¢d. dimensi¢n global 1];
                                                   CaptionClass='1,1,1' }
    { 22  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ESP=C¢d. dimensi¢n global 2];
                                                   CaptionClass='1,1,2' }
    { 23  ;   ;Job Posting Group   ;Code10        ;TableRelation="Job Posting Group";
                                                   CaptionML=[ENU=Job Posting Group;
                                                              ESP=Grupo contable proyecto] }
    { 24  ;   ;Blocked             ;Option        ;CaptionML=[ENU=Blocked;
                                                              ESP=Bloqueado];
                                                   OptionCaptionML=[ENU=" ,Posting,All";
                                                                    ESP=" ,Registro,Todos"];
                                                   OptionString=[ ,Posting,All] }
    { 29  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ESP=Fecha £lt. modificaci¢n];
                                                   Editable=No }
    { 30  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE (Table Name=CONST(14),
                                                                                           No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ESP=Comentario];
                                                   Editable=No }
    { 31  ;   ;Customer Disc. Group;Code10        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ESP=Grupo dto. cliente] }
    { 32  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ESP=Grupo precio cliente] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ESP=C¢d. idioma] }
    { 49  ;   ;Scheduled Res. Qty. ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                                Schedule Line=CONST(Yes),
                                                                                                                Type=CONST(Resource),
                                                                                                                No.=FIELD(Resource Filter),
                                                                                                                Planning Date=FIELD(Planning Date Filter)));
                                                   CaptionML=[ENU=Scheduled Res. Qty.;
                                                              ESP=Cdad. recurso programada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 50  ;   ;Resource Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Resource;
                                                   CaptionML=[ENU=Resource Filter;
                                                              ESP=Filtro recurso] }
    { 51  ;   ;Posting Date Filter ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Posting Date Filter;
                                                              ESP=Filtro fecha registro] }
    { 55  ;   ;Resource Gr. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Resource Group";
                                                   CaptionML=[ENU=Resource Gr. Filter;
                                                              ESP=Filtro fam. recurso] }
    { 56  ;   ;Scheduled Res. Gr. Qty.;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Job No.=FIELD(No.),
                                                                                                                Schedule Line=CONST(Yes),
                                                                                                                Type=CONST(Resource),
                                                                                                                Resource Group No.=FIELD(Resource Gr. Filter),
                                                                                                                Planning Date=FIELD(Planning Date Filter)));
                                                   CaptionML=[ENU=Scheduled Res. Gr. Qty.;
                                                              ESP=Cdad. fam. recurso programada];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 57  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              ESP=Imagen];
                                                   SubType=Bitmap }
    { 58  ;   ;Bill-to Name        ;Text50        ;CaptionML=[ENU=Bill-to Name;
                                                              ESP=Fact. a-Nombre] }
    { 59  ;   ;Bill-to Address     ;Text50        ;CaptionML=[ENU=Bill-to Address;
                                                              ESP=Fact. a-Direcci¢n] }
    { 60  ;   ;Bill-to Address 2   ;Text50        ;CaptionML=[ENU=Bill-to Address 2;
                                                              ESP=Fact. a-Direcci¢n 2] }
    { 61  ;   ;Bill-to City        ;Text50        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity("Bill-to City","Bill-to Post Code",County);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity("Bill-to City","Bill-to Post Code",County,TRUE);
                                                            END;

                                                   CaptionML=[ENU=Bill-to City;
                                                              ESP=Fact. a-Poblaci¢n] }
    { 63  ;   ;County              ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.County WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=[ENU=County;
                                                              ESP=Provincia];
                                                   Editable=No }
    { 64  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode("Bill-to City","Bill-to Post Code",County);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode("Bill-to City","Bill-to Post Code",County,TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ESP=Fact. a-C.P.] }
    { 66  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ESP=Nos. serie];
                                                   Editable=No }
    { 67  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ESP=Fact. a-C¢d. pa¡s/regi¢n];
                                                   Editable=Yes }
    { 68  ;   ;Bill-to Name 2      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer."Name 2" WHERE (No.=FIELD(Bill-to Customer No.)));
                                                   CaptionML=[ENU=Bill-to Name 2;
                                                              ESP=Fact. a-Nombre 2];
                                                   Editable=No }
    { 1000;   ;WIP Method          ;Option        ;CaptionML=[ENU=WIP Method;
                                                              ESP=Mtodo WIP];
                                                   OptionCaptionML=[ENU=Cost Value,Sales Value,Cost of Sales,Percentage of Completion,Completed Contract;
                                                                    ESP=Valor coste,Valor venta,Coste ventas,Porcentaje completado,Contrato consumado];
                                                   OptionString=Cost Value,Sales Value,Cost of Sales,Percentage of Completion,Completed Contract }
    { 1001;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Currency Code" <> xRec."Currency Code" THEN
                                                                  IF NOT JobLedgEntryExist THEN
                                                                    CurrencyUpdatePlanningLines
                                                                  ELSE
                                                                    ERROR(Text000,FIELDCAPTION("Currency Code"),TABLECAPTION);
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=C¢d. divisa] }
    { 1002;   ;Bill-to Contact No. ;Code20        ;OnValidate=BEGIN
                                                                IF Blocked >= Blocked::Posting THEN
                                                                  ERROR(Text000,FIELDCAPTION("Bill-to Contact No."),TABLECAPTION);

                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Bill-to Contact No." = '') AND ("Bill-to Customer No." = '') THEN BEGIN
                                                                    INIT;
                                                                    "No. Series" := xRec."No. Series";
                                                                    VALIDATE(Description,xRec.Description);
                                                                  END;
                                                                END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FIND('-') THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text005,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;
                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF ("Bill-to Customer No." <> '') AND Cont.GET("Bill-to Contact No.") THEN
                                                                Cont.SETRANGE("Company No.",Cont."Company No.")
                                                              ELSE
                                                                IF Cust.GET("Bill-to Customer No.") THEN BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FIND('-') THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.");
                                                                END ELSE
                                                                  Cont.SETFILTER("Company No.",'<>''''');

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF FORM.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ESP=Fact. a-N§ contacto] }
    { 1003;   ;Bill-to Contact     ;Text50        ;CaptionML=[ENU=Bill-to Contact;
                                                              ESP=Fact. a-Atenci¢n] }
    { 1004;   ;Planning Date Filter;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Planning Date Filter;
                                                              ESP=Filtro fecha planif.] }
    { 1005;   ;Total WIP Cost Amount;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Job Complete=CONST(No),
                                                                                                             Type=FILTER(Accrued Costs|WIP Costs|Recognized Costs)));
                                                   CaptionML=[ENU=Total WIP Cost Amount;
                                                              ESP=Total importe coste WIP];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1006;   ;Total WIP Cost G/L Amount;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Reversed=CONST(No),
                                                                                                                 Job Complete=CONST(No),
                                                                                                                 Type=FILTER(Accrued Costs|WIP Costs|Recognized Costs)));
                                                   CaptionML=[ENU=Total WIP Cost G/L Amount;
                                                              ESP=Total importe C/G coste WIP];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1007;   ;WIP Posted To G/L   ;Boolean       ;CaptionML=[ENU=WIP Posted To G/L;
                                                              ESP=WIP registrado en C/G];
                                                   Editable=No }
    { 1008;   ;WIP Posting Date    ;Date          ;CaptionML=[ENU=WIP Posting Date;
                                                              ESP=Fecha registro WIP];
                                                   Editable=No }
    { 1009;   ;WIP G/L Posting Date;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Job WIP G/L Entry"."WIP Posting Date" WHERE (Reversed=CONST(No),
                                                                                                                 Job No.=FIELD(No.)));
                                                   CaptionML=[ENU=WIP G/L Posting Date;
                                                              ESP=Fecha registro C/G WIP];
                                                   Editable=No }
    { 1010;   ;Posted WIP Method Used;Option      ;CaptionML=[ENU=Posted WIP Method Used;
                                                              ESP=Mtodo WIP registrado utilizado];
                                                   OptionCaptionML=[ENU=" ,Cost Value,Sales Value,Cost of Sales,Percentage of Completion,Completed Contract";
                                                                    ESP=" ,Valor coste,Valor venta,Coste ventas,Porcentaje completado,Contrato consumado"];
                                                   OptionString=[ ,Cost Value,Sales Value,Cost of Sales,Percentage of Completion,Completed Contract];
                                                   Editable=No }
    { 1011;   ;Invoice Currency Code;Code10       ;TableRelation=Currency;
                                                   CaptionML=[ENU=Invoice Currency Code;
                                                              ESP=C¢digo divisa factura] }
    { 1012;   ;Exch. Calculation (Cost);Option    ;CaptionML=[ENU=Exch. Calculation (Cost);
                                                              ESP=C lculo cambio (coste)];
                                                   OptionCaptionML=[ENU=Fixed LCY,Fixed FCY;
                                                                    ESP=DL fijada,Otra divisa fijada];
                                                   OptionString=Fixed LCY,Fixed FCY }
    { 1013;   ;Exch. Calculation (Price);Option   ;CaptionML=[ENU=Exch. Calculation (Price);
                                                              ESP=C lculo cambio (precio)];
                                                   OptionCaptionML=[ENU=Fixed FCY,Fixed LCY;
                                                                    ESP=DL fijada,Otra divisa fijada];
                                                   OptionString=Fixed FCY,Fixed LCY }
    { 1014;   ;Allow Schedule/Contract Lines;Boolean;
                                                   CaptionML=[ENU=Allow Schedule/Contract Lines;
                                                              ESP=Permitir l¡neas planif./contrato] }
    { 1015;   ;Complete            ;Boolean       ;OnValidate=BEGIN
                                                                IF Complete <> xRec.Complete THEN
                                                                  ChangeJobCompletionStatus;
                                                              END;

                                                   CaptionML=[ENU=Complete;
                                                              ESP=Completo] }
    { 1016;   ;Calc. WIP Method Used;Option       ;CaptionML=[ENU=Calc. WIP Method Used;
                                                              ESP=Mtodo c lculo WIP usado];
                                                   OptionCaptionML=[ENU=" ,Cost Value,Sales Value,Cost of Sales,Percentage of Completion,Completed Contract";
                                                                    ESP=" ,Valor coste,Valor venta,Coste ventas,Porcentaje completado,Contrato consumado"];
                                                   OptionString=[ ,Cost Value,Sales Value,Cost of Sales,Percentage of Completion,Completed Contract];
                                                   Editable=No }
    { 1017;   ;Recog. Sales Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Type=FILTER(Recognized Sales)));
                                                   CaptionML=[ENU=Recog. Sales Amount;
                                                              ESP=Importe ventas reconoc.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1018;   ;Recog. Sales G/L Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Type=FILTER(Recognized Sales),
                                                                                                                 Reversed=CONST(No)));
                                                   CaptionML=[ENU=Recog. Sales G/L Amount;
                                                              ESP=Importe C/G ventas reconoc.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1019;   ;Recog. Costs Amount ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                              Type=FILTER(Recognized Costs)));
                                                   CaptionML=[ENU=Recog. Costs Amount;
                                                              ESP=Importe costes reconoc.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1020;   ;Recog. Costs G/L Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                  Type=FILTER(Recognized Costs),
                                                                                                                  Reversed=CONST(No)));
                                                   CaptionML=[ENU=Recog. Costs G/L Amount;
                                                              ESP=Importe C/G costes reconoc.];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1021;   ;Total WIP Sales Amount;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                             Job Complete=CONST(No),
                                                                                                             Type=FILTER(Accrued Sales|WIP Sales|Recognized Sales)));
                                                   CaptionML=[ENU=Total WIP Sales Amount;
                                                              ESP=Total importe ventas WIP];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1022;   ;Total WIP Sales G/L Amount;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job WIP G/L Entry"."WIP Entry Amount" WHERE (Job No.=FIELD(No.),
                                                                                                                 Reversed=CONST(No),
                                                                                                                 Job Complete=CONST(No),
                                                                                                                 Type=FILTER(Accrued Sales|WIP Sales|Recognized Sales)));
                                                   CaptionML=[ENU=Total WIP Sales G/L Amount;
                                                              ESP=Total importe C/G ventas WIP];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1023;   ;Completion Calculated;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Job WIP Entry" WHERE (Job No.=FIELD(No.),
                                                                                            Job Complete=FILTER(=Yes)));
                                                   CaptionML=[ENU=Completion Calculated;
                                                              ESP=Total completo calculado] }
    { 1024;   ;Next Invoice Date   ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Job Planning Line"."Planning Date" WHERE (Job No.=FIELD(No.),
                                                                                                              Contract Line=FILTER(=Yes),
                                                                                                              Invoiced=FILTER(=No)));
                                                   CaptionML=[ENU=Next Invoice Date;
                                                              ESP=Siguiente fecha factura] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Description                       }
    {    ;Bill-to Customer No.                     }
    {    ;Description                             ;KeyGroups=SearchCol }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Description,Bill-to Customer No.,Starting Date,Status }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change %1 because one or more entries are associated with this %2.;ESP=No puede cambiar el %1 porque hay uno o m s movimientos asociados con este %2.';
      JobSetup@1004 : Record 315;
      PostCode@1015 : Record 225;
      Job@1014 : Record 167;
      Cust@1006 : Record 18;
      Cont@1005 : Record 5050;
      ContBusinessRelation@1001 : Record 5054;
      NoSeriesMgt@1010 : Codeunit 396;
      DimMgt@1012 : Codeunit 408;
      Text003@1022 : TextConst 'ENU=You must run the %1 and %2 functions to create and post the completion entries for this job.;ESP=Debe ejecutar las funciones %1 y %2 para crear y registrar los movimientos completados para este proyecto.';
      Text004@1017 : TextConst 'ENU=This will delete any unposted WIP entries for this job and allow you to reverse the completion postings for this job.\\Do you wish to continue?;ESP=De esta manera eliminar  cualquier movimiento WIP no registrado para este proyecto y podr  revertir los registros completados para este proyecto.\\¨Desea continuar?';
      Text005@1019 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.;ESP=Contacto %1 %2 est  relacionado con una empresa diferente al cliente %3.';
      Text006@1018 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.;ESP=Contacto %1 %2 no est  relacionado con el cliente %3.';
      Text007@1009 : TextConst 'ENU=Contact %1 %2 is not related to a customer.;ESP=Contacto %1 %2 no est  relacionado con un cliente.';
      Text008@1002 : TextConst 'ENU=%1 %2 must not be blocked with type %3.;ESP=El %1 %2 no debe estar bloqueado con el tipo %3.';
      Text009@1008 : TextConst 'ENU=You must run the %1 function to reverse the completion entries that have already been posted for this job.;ESP=Debe ejecutar la funci¢n %1 para revertir los movimientos completados registrados para este proyecto.';
      MoveEntries@1003 : Codeunit 361;
      Text010@1007 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ESP=Para poder usar Online Map, primero debe rellenar la ventana Configuraci¢n Online Map.\Consulte Configuraci¢n de Online Map en la Ayuda.';
      Text011@1023 : TextConst 'ENU=%1 must be equal to or earlier than %2.;ESP=%1 debe ser igual o anterior a %2.';

    PROCEDURE AssistEdit@2(OldJob@1000 : Record 167) : Boolean;
    BEGIN
      WITH Job DO BEGIN
        Job := Rec;
        JobSetup.GET;
        JobSetup.TESTFIELD("Job Nos.");
        IF NoSeriesMgt.SelectSeries(JobSetup."Job Nos.",OldJob."No. Series","No. Series") THEN BEGIN
          JobSetup.GET;
          JobSetup.TESTFIELD("Job Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := Job;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Job,"No.",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FIND('-') THEN
            "Bill-to Contact No." := ContBusRel."Contact No.";
        END;
        "Bill-to Contact" := Cust.Contact;
      END;
    END;

    LOCAL PROCEDURE JobLedgEntryExist@5() : Boolean;
    VAR
      JobLedgEntry@1000 : Record 169;
    BEGIN
      CLEAR(JobLedgEntry);
      JobLedgEntry.SETCURRENTKEY("Job No.");
      JobLedgEntry.SETRANGE("Job No.","No.");
      EXIT(JobLedgEntry.FIND('-'));
    END;

    LOCAL PROCEDURE JobPlanningLineExist@3() : Boolean;
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.INIT;
      JobPlanningLine.SETRANGE("Job No.","No.");
      EXIT(JobPlanningLine.FIND('-'));
    END;

    PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Bill-to Contact" := Cont.Name
        ELSE
          IF Cust.GET("Bill-to Customer No.") THEN
            "Bill-to Contact" := Cust.Contact
          ELSE
            "Bill-to Contact" := '';
      END ELSE BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FIND('-') THEN BEGIN
        IF "Bill-to Customer No." = '' THEN
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.")
        ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text006,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE
        ERROR(Text007,Cont."No.",Cont.Name);
    END;

    PROCEDURE UpdateCust@4();
    BEGIN
      IF "Bill-to Customer No." <> '' THEN BEGIN
        Cust.GET("Bill-to Customer No.");
        Cust.TESTFIELD("Customer Posting Group");
        Cust.TESTFIELD("Bill-to Customer No.",'');
        "Bill-to Name" := Cust.Name;
        "Bill-to Name 2" := Cust."Name 2";
        "Bill-to Address" := Cust.Address;
        "Bill-to Address 2" := Cust."Address 2";
        "Bill-to City" := Cust.City;
        "Bill-to Post Code" := Cust."Post Code";
        "Bill-to Country/Region Code" := Cust."Country/Region Code";
        "Currency Code" := Cust."Currency Code";
        "Customer Disc. Group" := Cust."Customer Disc. Group";
        "Customer Price Group" := Cust."Customer Price Group";
        "Language Code" := Cust."Language Code";
        County := Cust.County;
        UpdateBillToCont("Bill-to Customer No.");
      END ELSE BEGIN
        "Bill-to Name" := '';
        "Bill-to Name 2" := '';
        "Bill-to Address" := '';
        "Bill-to Address 2" := '';
        "Bill-to City" := '';
        "Bill-to Post Code" := '';
        "Bill-to Country/Region Code" := '';
        "Currency Code" := '';
        "Customer Disc. Group" := '';
        "Customer Price Group" := '';
        "Language Code" := '';
        County := '';
        VALIDATE("Bill-to Contact No.",'');
      END;
    END;

    PROCEDURE InitWIPFields@1();
    BEGIN
      "WIP Posted To G/L" := FALSE;
      "WIP Posting Date" := 0D;
      "WIP G/L Posting Date" := 0D;
      "Posted WIP Method Used" := 0;
    END;

    PROCEDURE TestBlocked@6();
    BEGIN
      IF Blocked = Blocked::" " THEN
        EXIT;
      ERROR(Text008,TABLECAPTION,"No.",Blocked);
    END;

    PROCEDURE CurrencyUpdatePlanningLines@10();
    VAR
      PlaningLine@1000 : Record 1003;
    BEGIN
      PlaningLine.SETRANGE("Job No.","No.");
      IF PlaningLine.FIND('-') THEN
        REPEAT
          IF PlaningLine.Transferred THEN
            ERROR(Text000,FIELDCAPTION("Currency Code"),TABLECAPTION);
          PlaningLine.VALIDATE("Currency Code","Currency Code");
          PlaningLine.VALIDATE("Currency Date");
          PlaningLine.MODIFY;
        UNTIL PlaningLine.NEXT = 0;
    END;

    PROCEDURE ChangeJobCompletionStatus@7();
    VAR
      AllObjwithCaption@1003 : Record 2000000058;
      JobWIPGLEntry@1000 : Record 1005;
      JobCalcWIP@1001 : Codeunit 1000;
      ReportCaption1@1002 : Text[250];
      ReportCaption2@1004 : Text[250];
    BEGIN
      AllObjwithCaption.GET(AllObjwithCaption."Object Type"::Report,REPORT::"Job Calculate WIP");
      ReportCaption1 := AllObjwithCaption."Object Caption";
      AllObjwithCaption.GET(AllObjwithCaption."Object Type"::Report,REPORT::"Job Post WIP to G/L");
      ReportCaption2 := AllObjwithCaption."Object Caption";

      IF Complete = TRUE THEN
        MESSAGE(Text003,ReportCaption1,ReportCaption2)
      ELSE BEGIN
        JobCalcWIP.ReOpenJob("No.");
        "WIP Posting Date" := 0D;
        "Calc. WIP Method Used" := 0;
        MESSAGE(Text009,ReportCaption2);
      END;
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::Job,GETPOSITION)
      ELSE
        MESSAGE(Text010);
    END;

    PROCEDURE GetQuantityAvailable@9(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10];InEntryType@1004 : 'Usage,Sale,Both';Direction@1005 : 'Possitive,Negative,Both') QtyBase : Decimal;
    VAR
      JobLedgEntry@1003 : Record 169;
    BEGIN
      CLEAR(JobLedgEntry);
      WITH JobLedgEntry DO BEGIN
        SETCURRENTKEY("Job No.","Entry Type",Type,"No.");
        SETRANGE("Job No.",Rec."No.");
        IF NOT (InEntryType = InEntryType::Both) THEN
          SETRANGE("Entry Type",InEntryType);
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        IF FINDSET THEN
          REPEAT
            IF ("Location Code" = LocationCode) AND
               ("Variant Code" = VariantCode) AND
               ((Direction = Direction::Both) OR
                ((Direction = Direction::Possitive) AND ("Quantity (Base)" > 0)) OR
                ((Direction = Direction::Negative) AND ("Quantity (Base)" < 0)))
            THEN
              QtyBase := QtyBase + "Quantity (Base)";
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckDate@30();
    BEGIN
      IF ("Starting Date" > "Ending Date") AND ("Ending Date" <> 0D) THEN
        ERROR(Text011,FIELDCAPTION("Starting Date"),FIELDCAPTION("Ending Date"));
    END;

    BEGIN
    END.
  }
}
