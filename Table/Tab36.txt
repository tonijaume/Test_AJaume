OBJECT Table 36 Sales Header
{
  OBJECT-PROPERTIES
  {
    Date=06/05/15;
    Time=[ 6:15:35];
    Modified=Yes;
    Version List=AIC2009,TRF2009,NAVW16.00.01,LIQEM6.00.01,NAVES6.00.01,RegF269949;
  }
  PROPERTIES
  {
    Permissions=TableData 5936=rd;
    DataCaptionFields=No.,Sell-to Customer Name;
    OnInsert=BEGIN
               SalesSetup.GET;

               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               END;

               InitRecord;
               InsertMode := TRUE;

               IF GETFILTER("Sell-to Customer No.") <> '' THEN
                 IF GETRANGEMIN("Sell-to Customer No.") = GETRANGEMAX("Sell-to Customer No.") THEN
                   VALIDATE("Sell-to Customer No.",GETRANGEMIN("Sell-to Customer No."));

               IF GETFILTER("Sell-to Contact No.") <> '' THEN
                 IF GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") THEN
                   VALIDATE("Sell-to Contact No.",GETRANGEMIN("Sell-to Contact No."));

               "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");

               DimMgt.InsertDocDim(
                 DATABASE::"Sales Header","Document Type","No.",0,
                 "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

               //$001 INCOMING

               Usuario := USERID;
             END;

    OnModify=BEGIN
               CheckPermisoAtennea; //+$008
             END;

    OnDelete=VAR
               Opp@1000 : Record 5092;
               TempOpportunityEntry@1001 : TEMPORARY Record 5093;
             BEGIN
               PaymentTransLogMgt.ValidateCanDeleteDocument("Payment Method Code","Document Type",FORMAT("Document Type"),"No.");

               IF NOT UserMgt.CheckRespCenter(0,"Responsibility Center") THEN
                 ERROR(
                   Text022,
                   RespCenter.TABLECAPTION,UserMgt.GetSalesFilter);

               IF ("Opportunity No." <> '') AND
                  ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order])
               THEN BEGIN
                 IF Opp.GET("Opportunity No.") THEN BEGIN
                   IF ("Document Type" = "Document Type"::Order) THEN BEGIN
                     IF NOT CONFIRM(Text040 + Text041 + Text042,TRUE) THEN
                       ERROR(Text044);
                     TempOpportunityEntry.INIT;
                     TempOpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");
                     TempOpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
                     TempOpportunityEntry."Contact No." := Opp."Contact No.";
                     TempOpportunityEntry."Contact Company No." := Opp."Contact Company No.";
                     TempOpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
                     TempOpportunityEntry."Campaign No." := Opp."Campaign No.";
                     TempOpportunityEntry."Action Taken" := TempOpportunityEntry."Action Taken"::Lost;
                     TempOpportunityEntry.INSERT;
                     TempOpportunityEntry.SETRANGE("Action Taken",TempOpportunityEntry."Action Taken"::Lost);
                     FORM.RUNMODAL(FORM::"Close Opportunity",TempOpportunityEntry);
                     IF Opp.GET("Opportunity No.") THEN
                       IF Opp.Status <> Opp.Status::Lost THEN
                         ERROR(Text043);
                   END;
                   Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
                   Opp."Sales Document No." := '';
                   Opp.MODIFY;
                   "Opportunity No." := '';
                 END;
               END;

               SalesPost.DeleteHeader(
                 Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
               VALIDATE("Applies-to ID",'');

               DimMgt.DeleteDocDim(DATABASE::"Sales Header","Document Type","No.",0);

               ApprovalMgt.DeleteApprovalEntry(DATABASE::"Sales Header","Document Type","No.");
               SalesLine.RESET;
               SalesLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               SalesLine.SETRANGE("Document Type","Document Type");
               SalesLine.SETRANGE("Document No.","No.");
               SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");

               DeleteSalesLines;
               SalesLine.SETRANGE(Type);
               DeleteSalesLines;

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               IF (SalesShptHeader."No." <> '') OR
                  (SalesInvHeader."No." <> '') OR
                  (SalesCrMemoHeader."No." <> '') OR
                  (ReturnRcptHeader."No." <> '') OR
                  (SalesInvHeaderPrepmt."No." <> '') OR
                  (SalesCrMemoHeaderPrepmt."No." <> '')
               THEN BEGIN
                 DELETE;
                 COMMIT;

                 IF SalesShptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text000,TRUE,
                        SalesShptHeader."No.")
                   THEN BEGIN
                     SalesShptHeader.SETRECFILTER;
                     SalesShptHeader.PrintRecords(TRUE);
                   END;

                 IF SalesInvHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text001,TRUE,
                        SalesInvHeader."No.")
                   THEN BEGIN
                     SalesInvHeader.SETRECFILTER;
                     SalesInvHeader.PrintRecords(TRUE);
                   END;

                 IF SalesCrMemoHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text002,TRUE,
                        SalesCrMemoHeader."No.")
                   THEN BEGIN
                     SalesCrMemoHeader.SETRECFILTER;
                     SalesCrMemoHeader.PrintRecords(TRUE);
                   END;

                 IF ReturnRcptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text023,TRUE,
                        ReturnRcptHeader."No.")
                   THEN BEGIN
                     ReturnRcptHeader.SETRECFILTER;
                     ReturnRcptHeader.PrintRecords(TRUE);
                   END;

                 IF SalesInvHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text057,TRUE,
                        SalesInvHeader."No.")
                   THEN BEGIN
                     SalesInvHeaderPrepmt.SETRECFILTER;
                     SalesInvHeaderPrepmt.PrintRecords(TRUE);
                   END;

                 IF SalesCrMemoHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text058,TRUE,
                        SalesCrMemoHeaderPrepmt."No.")
                   THEN BEGIN
                     SalesCrMemoHeaderPrepmt.SETRECFILTER;
                     SalesCrMemoHeaderPrepmt.PrintRecords(TRUE);
                   END;
               END;
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Sales Header;
               ESP=Cab. venta];
    LookupFormID=Form45;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESP=Tipo documento];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ESP=Oferta,Pedido,Factura,Abono,Pedido abierto,Devoluci¢n];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Opp@1000 : Record 5092;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Sell-to Customer No." <> xRec."Sell-to Customer No.") AND
                                                                   (xRec."Sell-to Customer No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Opportunity No." <> '') AND ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
                                                                    ERROR(
                                                                      Text062,
                                                                      FIELDCAPTION("Sell-to Customer No."),
                                                                      FIELDCAPTION("Opportunity No."),
                                                                      "Opportunity No.",
                                                                      "Document Type");
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Customer No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer No." = '' THEN BEGIN
                                                                      IF SalesLine.FINDFIRST THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Sell-to Customer No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      SalesLine.SETFILTER("Quantity Shipped",'<>0')
                                                                    ELSE IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
                                                                        SalesLine.SETFILTER("Shipment No.",'<>%1','');
                                                                      END;

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesLine.TESTFIELD("Quantity Shipped",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Shipment No.",'');
                                                                    SalesLine.SETRANGE("Shipment No.");
                                                                    SalesLine.SETRANGE("Quantity Shipped");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF SalesLine.FIND('-') THEN
                                                                        SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      SalesLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      SalesLine.SETFILTER("Return Qty. Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                        SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
                                                                        SalesLine.SETFILTER("Return Receipt No.",'<>%1','');
                                                                      END;

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        SalesLine.TESTFIELD("Return Qty. Received",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Return Receipt No.",'');
                                                                    SalesLine.RESET
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                  SalesLine.RESET;
                                                                END;

                                                                GetCust("Sell-to Customer No.");

                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Sell-to Customer Template Code" := '';
                                                                "Sell-to Customer Name" := Cust.Name;
                                                                "Sell-to Customer Name 2" := Cust."Name 2";
                                                                "Sell-to Address" := Cust.Address;
                                                                "Sell-to Address 2" := Cust."Address 2";
                                                                "Sell-to City" := Cust.City;
                                                                "Sell-to Post Code" := Cust."Post Code";
                                                                "Sell-to County" := Cust.County;
                                                                "Sell-to Country/Region Code" := Cust."Country/Region Code";
                                                                IF NOT SkipSellToContact THEN
                                                                  "Sell-to Contact" := Cust.Contact;
                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Cust."Tax Area Code";
                                                                "Tax Liable" := Cust."Tax Liable";
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                "Shipping Advice" := Cust."Shipping Advice";
                                                                "Responsibility Center" := UserMgt.GetRespCenter(0,Cust."Responsibility Center");
                                                                VALIDATE("Location Code",UserMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

                                                                IF "Sell-to Customer No." = xRec."Sell-to Customer No." THEN BEGIN
                                                                  IF ShippedSalesLinesExist OR ReturnReceiptExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;
                                                                END;

                                                                "Sell-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Sell-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF Cust."Bill-to Customer No." <> '' THEN
                                                                  VALIDATE("Bill-to Customer No.",Cust."Bill-to Customer No.")
                                                                ELSE BEGIN
                                                                  IF "Bill-to Customer No." = "Sell-to Customer No." THEN
                                                                    SkipBillToContact := TRUE;
                                                                  VALIDATE("Bill-to Customer No.","Sell-to Customer No.");
                                                                  SkipBillToContact := FALSE;
                                                                END;
                                                                VALIDATE("Ship-to Code",'');

                                                                GetShippingTime(FIELDNO("Sell-to Customer No."));

                                                                IF (xRec."Sell-to Customer No." <> "Sell-to Customer No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer No."));

                                                                IF NOT SkipSellToContact THEN
                                                                  UpdateSellToCont("Sell-to Customer No.");
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ESP=Venta a-N§ cliente] }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESP=N§] }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                TempDocDim@1000 : TEMPORARY Record 357;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Bill-to Customer No." <> "Bill-to Customer No.") AND
                                                                   (xRec."Bill-to Customer No." <> '')
                                                                THEN BEGIN
                                                                  VALIDATE("Credit Card No.",'');
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Customer No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      SalesLine.SETFILTER("Quantity Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN
                                                                        SalesLine.SETFILTER("Shipment No.",'<>%1','');

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesLine.TESTFIELD("Quantity Shipped",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Shipment No.",'');
                                                                    SalesLine.SETRANGE("Shipment No.");
                                                                    SalesLine.SETRANGE("Quantity Shipped");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF SalesLine.FIND('-') THEN
                                                                        SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      SalesLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      SalesLine.SETFILTER("Return Qty. Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                        SalesLine.SETFILTER("Return Receipt No.",'<>%1','');

                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        SalesLine.TESTFIELD("Return Qty. Received",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Return Receipt No.",'');
                                                                    SalesLine.RESET;
                                                                    "Pay-at Code" := '';

                                                                    IF (xRec."Bill-to Customer No." <> "Bill-to Customer No.") THEN
                                                                      "Corrected Invoice No." := '';
                                                                  END ELSE
                                                                    "Bill-to Customer No." := xRec."Bill-to Customer No.";
                                                                END;

                                                                GetCust("Bill-to Customer No.");
                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Customer Posting Group");

                                                                IF GUIALLOWED AND (CurrFieldNo <> 0) AND ("Document Type" <= "Document Type"::Invoice) THEN BEGIN
                                                                  "Amount Including VAT" := 0;
                                                                  CASE "Document Type" OF
                                                                    "Document Type"::Quote,"Document Type"::Invoice:
                                                                      CustCheckCreditLimit.SalesHeaderCheck(Rec);
                                                                    "Document Type"::Order:
                                                                      BEGIN
                                                                        IF "Bill-to Customer No." <> xRec."Bill-to Customer No." THEN BEGIN
                                                                          SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                          SalesLine.SETRANGE("Document No.","No.");
                                                                          SalesLine.CALCSUMS("Outstanding Amount","Shipped Not Invoiced");
                                                                          "Amount Including VAT" := SalesLine."Outstanding Amount" + SalesLine."Shipped Not Invoiced";
                                                                        END;
                                                                        CustCheckCreditLimit.SalesHeaderCheck(Rec);
                                                                      END;
                                                                  END;
                                                                  CALCFIELDS("Amount Including VAT");
                                                                END;

                                                                "Bill-to Customer Template Code" := '';
                                                                "Bill-to Name" := Cust.Name;
                                                                "Bill-to Name 2" := Cust."Name 2";
                                                                "Bill-to Address" := Cust.Address;
                                                                "Bill-to Address 2" := Cust."Address 2";
                                                                "Bill-to City" := Cust.City;
                                                                "Bill-to Post Code" := Cust."Post Code";
                                                                "Bill-to County" := Cust.County;
                                                                "Bill-to Country/Region Code" := Cust."Country/Region Code";
                                                                "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                IF NOT SkipBillToContact THEN
                                                                  "Bill-to Contact" := Cust.Contact;
                                                                Cust.TESTFIELD("Payment Terms Code");
                                                                "Payment Terms Code" := Cust."Payment Terms Code";

                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Cust."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Cust."Payment Method Code";

                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN
                                                                  "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "Customer Posting Group" := Cust."Customer Posting Group";
                                                                "Currency Code" := Cust."Currency Code";
                                                                "Customer Price Group" := Cust."Customer Price Group";
                                                                "Prices Including VAT" := Cust."Prices Including VAT";
                                                                "Allow Line Disc." := Cust."Allow Line Disc.";
                                                                "Invoice Disc. Code" := Cust."Invoice Disc. Code";
                                                                "Customer Disc. Group" := Cust."Customer Disc. Group";
                                                                "Language Code" := Cust."Language Code";
                                                                "Salesperson Code" := Cust."Salesperson Code";
                                                                "Combine Shipments" := Cust."Combine Shipments";
                                                                Reserve := Cust.Reserve;
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  "Prepayment %" := Cust."Prepayment %";

                                                                "Cust. Bank Acc. Code" := Cust."Default Bank Acc. Code";

                                                                IF "Bill-to Customer No." = xRec."Bill-to Customer No." THEN BEGIN
                                                                  IF ShippedSalesLinesExist THEN BEGIN
                                                                    TESTFIELD("Customer Disc. Group",xRec."Customer Disc. Group");
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                  END;
                                                                END;

                                                                TempDocDim.GetDimensions(DATABASE::"Sales Header","Document Type","No.",0,TempDocDim);

                                                                CreateDim(
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");

                                                                // $005 AJS, Comprobantes Fiscales

                                                                IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN BEGIN

                                                                  // $005  AJS, Comprobantes Fiscales

                                                                  GLSetup.FINDFIRST;
                                                                  // AJF 05/03/10
                                                                  // No se usa la serie para las anulaciones autom ticas.
                                                                  IF NOT Anulaci¢n THEN
                                                                    IF GLSetup."Aplica legislacion NCF" THEN BEGIN
                                                                      Cust.TESTFIELD("Cod. Grupo NCF");
                                                                      "Cod. Grupo NCF" := Cust."Cod. Grupo NCF";
                                                                      VALIDATE("Cod. Grupo NCF");
                                                                    END;
                                                                END;

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   (xRec."Bill-to Customer No." <> "Bill-to Customer No.")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer No."))
                                                                ELSE
                                                                  IF (xRec."Bill-to Customer No." <> '') AND SalesLinesExist THEN
                                                                    TempDocDim.UpdateAllLineDim(DATABASE::"Sales Header","Document Type","No.",TempDocDim);

                                                                IF NOT SkipBillToContact THEN
                                                                  UpdateBillToCont("Bill-to Customer No.");

                                                                "Bill-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Bill-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ESP=Factura-a N§ cliente];
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text50        ;CaptionML=[ENU=Bill-to Name;
                                                              ESP=Fact. a-Nombre] }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ESP=Fact. a-Nombre 2] }
    { 7   ;   ;Bill-to Address     ;Text50        ;CaptionML=[ENU=Bill-to Address;
                                                              ESP=Fact. a-Direcci¢n] }
    { 8   ;   ;Bill-to Address 2   ;Text50        ;CaptionML=[ENU=Bill-to Address 2;
                                                              ESP=Fact. a-Direcci¢n 2] }
    { 9   ;   ;Bill-to City        ;Text30        ;OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidateCity("Bill-to City","Bill-to Post Code","Bill-to County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity("Bill-to City","Bill-to Post Code","Bill-to County",TRUE);
                                                            END;

                                                   CaptionML=[ENU=Bill-to City;
                                                              ESP=Fact. a-Poblaci¢n] }
    { 10  ;   ;Bill-to Contact     ;Text50        ;CaptionML=[ENU=Bill-to Contact;
                                                              ESP=Fact. a-Atenci¢n] }
    { 11  ;   ;Your Reference      ;Text30        ;CaptionML=[ENU=Your Reference;
                                                              ESP=Su/Ntra. ref.] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                  SalesLine.RESET;
                                                                END;

                                                                IF ("Document Type" <> "Document Type"::"Return Order") AND
                                                                   ("Document Type" <> "Document Type"::"Credit Memo")
                                                                THEN BEGIN
                                                                  IF "Ship-to Code" <> '' THEN BEGIN
                                                                    IF xRec."Ship-to Code" <> '' THEN
                                                                      BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                    END;
                                                                    ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                    "Ship-to Name" := ShipToAddr.Name;
                                                                    "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                    "Ship-to Address" := ShipToAddr.Address;
                                                                    "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                    "Ship-to City" := ShipToAddr.City;
                                                                    "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                    "Ship-to County" := ShipToAddr.County;
                                                                    VALIDATE("Ship-to Country/Region Code",ShipToAddr."Country/Region Code");
                                                                    "Ship-to Contact" := ShipToAddr.Contact;
                                                                    "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                    IF ShipToAddr."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                    "Shipping Agent Code" := ShipToAddr."Shipping Agent Code";
                                                                    "Shipping Agent Service Code" := ShipToAddr."Shipping Agent Service Code";
                                                                    IF ShipToAddr."Tax Area Code" <> '' THEN
                                                                      "Tax Area Code" := ShipToAddr."Tax Area Code";
                                                                    "Tax Liable" := ShipToAddr."Tax Liable";
                                                                  END ELSE
                                                                    IF "Sell-to Customer No." <> '' THEN BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      "Ship-to Name" := Cust.Name;
                                                                      "Ship-to Name 2" := Cust."Name 2";
                                                                      "Ship-to Address" := Cust.Address;
                                                                      "Ship-to Address 2" := Cust."Address 2";
                                                                      "Ship-to City" := Cust.City;
                                                                      "Ship-to Post Code" := Cust."Post Code";
                                                                      "Ship-to County" := Cust.County;
                                                                      VALIDATE("Ship-to Country/Region Code",Cust."Country/Region Code");
                                                                      "Ship-to Contact" := Cust.Contact;
                                                                      "Shipment Method Code" := Cust."Shipment Method Code";
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                      "Tax Liable" := Cust."Tax Liable";
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Shipping Agent Code" := Cust."Shipping Agent Code";
                                                                      "Shipping Agent Service Code" := Cust."Shipping Agent Service Code";
                                                                    END;
                                                                END;

                                                                GetShippingTime(FIELDNO("Ship-to Code"));

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN
                                                                  IF (xRec."VAT Country/Region Code" <> "VAT Country/Region Code") OR
                                                                     (xRec."Tax Area Code" <> "Tax Area Code")
                                                                  THEN
                                                                    RecreateSalesLines(FIELDCAPTION("Ship-to Code"))
                                                                  ELSE BEGIN
                                                                    IF xRec."Shipping Agent Code" <> "Shipping Agent Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Code"));
                                                                    IF xRec."Shipping Agent Service Code" <> "Shipping Agent Service Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Service Code"));
                                                                    IF xRec."Tax Liable" <> "Tax Liable" THEN
                                                                      VALIDATE("Tax Liable");
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Ship-to Code;
                                                              ESP=C¢d. direcci¢n env¡o cliente] }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              ESP=Env¡o a-Nombre] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ESP=Env¡o a-Nombre 2] }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              ESP=Env¡o a-Direcci¢n] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ESP=Env¡o a-Direcci¢n 2] }
    { 17  ;   ;Ship-to City        ;Text30        ;OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidateCity("Ship-to City","Ship-to Post Code","Ship-to County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity("Ship-to City","Ship-to Post Code","Ship-to County",TRUE);
                                                            END;

                                                   CaptionML=[ENU=Ship-to City;
                                                              ESP=Env¡o a-Poblaci¢n] }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              ESP=Env¡o a-Atenci¢n] }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   CaptionML=[ENU=Order Date;
                                                              ESP=Fecha pedido] }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                VALIDATE("Document Date","Posting Date");

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ESP=Fecha registro] }
    { 21  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Shipment Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipment Date;
                                                              ESP=Fecha env¡o] }
    { 22  ;   ;Posting Description ;Text80        ;CaptionML=[ENU=Posting Description;
                                                              ESP=Texto de registro] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                IF (NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"])) OR
                                                                   (GLSetup."Payment Discount Type" = GLSetup."Payment Discount Type"::"Calc. Pmt. Disc. on Lines")
                                                                THEN
                                                                  IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                    PaymentTerms.GET("Payment Terms Code");
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    AdjustDueDate.SalesAdjustDueDate("Due Date","Document Date",PaymentTerms.CalculateMaxDueDate("Document Date"),
                                                                "Bill-to Customer No.");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF xRec."Document Date"="Document Date" THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %");
                                                                  END ELSE BEGIN
                                                                    "Due Date" := "Document Date";
                                                                    AdjustDueDate.SalesAdjustDueDate("Due Date","Document Date",31129999D,"Bill-to Customer No.");
                                                                    "Pmt. Discount Date" := "Document Date";
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END
                                                                ELSE
                                                                  IF "Payment Terms Code" <> '' THEN BEGIN
                                                                    PaymentTerms.GET("Payment Terms Code");
                                                                    VALIDATE("Payment Discount %",PaymentTerms."Discount %");
                                                                  END ELSE
                                                                    VALIDATE("Payment Discount %",0);

                                                                IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                  NOT (PaymentTerms."Calc. Pmt. Disc. on Cr. Memos"))
                                                                THEN BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF xRec."Document Date"="Document Date" THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;

                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN BEGIN
                                                                  IF xRec."Prepayment Due Date" = 0D THEN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                                END;
                                                                UpdatePmtDiscDate();
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ESP=C¢d. trminos pago] }
    { 24  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                  PaymentTerms.VerifyMaxNoDaysTillDueDate("Due Date","Document Date",FIELDCAPTION("Due Date"));
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                                UpdatePmtDiscDate();
                                                              END;

                                                   CaptionML=[ENU=Payment Discount %;
                                                              ESP=% Dto. P.P.];
                                                   DecimalPlaces=0:6 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;OnValidate=BEGIN
                                                                UpdatePmtDiscDate();
                                                              END;

                                                   CaptionML=[ENU=Pmt. Discount Date;
                                                              ESP=Fecha dto. P.P.] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ESP=C¢d. condiciones env¡o] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;

                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  IF Location.GET("Location Code") THEN
                                                                    "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almacn] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESP=C¢d. dim. acceso dir. 1];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESP=C¢d. dim. acceso dir. 2];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ESP=Grupo contable cliente];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                PaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE BEGIN
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    RecreateSalesLines(FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ESP=C¢d. divisa] }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Currency Factor"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ESP=Factor divisa];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Price Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Price Group;
                                                              ESP=Grupo precio cliente] }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                SalesLine@1000 : Record 37;
                                                                Currency@1001 : Record 4;
                                                                JobPostLine@1003 : Codeunit 1001;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Job Contract Entry No.",'<>%1',0);
                                                                  IF SalesLine.FIND('-') THEN BEGIN
                                                                    SalesLine.TESTFIELD("Job No.",'');
                                                                    SalesLine.TESTFIELD("Job Contract Entry No.",0);
                                                                  END;

                                                                  SalesLine.RESET;
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Unit Price",'<>%1',0);
                                                                  SalesLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF SalesLine.FINDFIRST THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text024 +
                                                                          Text026,
                                                                          FIELDCAPTION("Prices Including VAT"),SalesLine.FIELDCAPTION("Unit Price")),
                                                                        TRUE);
                                                                    SalesLine.SetSalesHeader(Rec);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");
                                                                    SalesLine.LOCKTABLE;
                                                                    LOCKTABLE;
                                                                    SalesLine.FINDSET;
                                                                    REPEAT
                                                                      SalesLine.TESTFIELD("Quantity Invoiced",0);
                                                                      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        SalesLine."VAT Difference" := 0;
                                                                        SalesLine.InitOutstandingAmount;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" * (1 + ((SalesLine."VAT %" / 100)+ (SalesLine."EC %" / 100))),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF SalesLine.Quantity <> 0 THEN BEGIN
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" * (1 + ((SalesLine."VAT %" / 100) + (SalesLine."EC %" / 100))),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" / (1 + ((SalesLine."VAT %" / 100) + (SalesLine."EC %" / 100))),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF SalesLine.Quantity <> 0 THEN BEGIN
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" / (1 + ((SalesLine."VAT %" / 100) + (SalesLine."EC %" / 100))),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      SalesLine.MODIFY;
                                                                    UNTIL SalesLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prices Including VAT;
                                                              ESP=Precios IVA incluido] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              ESP=C¢d. dto. factura] }
    { 40  ;   ;Customer Disc. Group;Code10        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Disc. Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ESP=Grupo dto. cliente] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=[ENU=Language Code;
                                                              ESP=C¢d. idioma] }
    { 43  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                TempDocDim@1000 : TEMPORARY Record 357;
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Canceled,ApprovalEntry.Status::Rejected);
                                                                IF ApprovalEntry.FIND('-') THEN
                                                                  ERROR(Text053,FIELDCAPTION("Salesperson Code"));

                                                                TempDocDim.GetDimensions(DATABASE::"Sales Header","Document Type","No.",0,TempDocDim);

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                IF SalesLinesExist THEN
                                                                  TempDocDim.UpdateAllLineDim(DATABASE::"Sales Header","Document Type","No.",TempDocDim);
                                                              END;

                                                   CaptionML=[ENU=Salesperson Code;
                                                              ESP=C¢d. vendedor] }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              ESP=Clase pedido] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ESP=Comentario];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ESP=N§ copias impresas];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ESP=Esperar] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ESP=Liq. por tipo documento];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,,,,,,,,,,,,,,,Bill";
                                                                    ESP=" ,Pago,Factura,Abono,Docs. inters,Recordatorio,Reembolso,,,,,,,,,,,,,,,Efecto"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,,,,,,,,,,,,,,,Bill] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.")
                                                                  ELSE IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");

                                                                // CheckBillSituation; // es0013
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
                                                              CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                              CustLedgEntry.SETRANGE(Open,TRUE);
                                                              CustLedgEntry.SETFILTER("Document Situation",'<>%1',CustLedgEntry."Document Situation"::"Posted BG/PO");
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF "Applies-to Bill No." <> '' THEN
                                                                  CustLedgEntry.SETRANGE("Bill No.","Applies-to Bill No.");
                                                                IF CustLedgEntry.FINDFIRST THEN;
                                                                CustLedgEntry.SETRANGE("Document Type");
                                                                CustLedgEntry.SETRANGE("Document No.");
                                                                CustLedgEntry.SETRANGE("Bill No.");
                                                              END ELSE IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF CustLedgEntry.FINDFIRST THEN;
                                                                  CustLedgEntry.SETRANGE("Document Type");
                                                                END ELSE IF Amount <> 0 THEN BEGIN
                                                                    CustLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF CustLedgEntry.FINDFIRST THEN;
                                                                    CustLedgEntry.SETRANGE(Positive);
                                                                  END;

                                                              ApplyCustEntries.SetSales(Rec,CustLedgEntry,SalesHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                                                              ApplyCustEntries.SETRECORD(CustLedgEntry);
                                                              ApplyCustEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",CustLedgEntry."Currency Code",GenJnILine."Account Type"::Customer,TRUE);
                                                                "Applies-to Doc. Type" := CustLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := CustLedgEntry."Document No.";
                                                                "Applies-to Bill No." := CustLedgEntry."Bill No.";
                                                              END;
                                                              CLEAR(ApplyCustEntries);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ESP=Liq. por n§ documento] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ESP=Cta. contrapartida] }
    { 57  ;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              ESP=Env¡o];
                                                   Editable=No }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              ESP=Factura] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ESP=Importe];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ESP=Importe IVA incl.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Shipping No.        ;Code20        ;CaptionML=[ENU=Shipping No.;
                                                              ESP=N§ sig. albar n venta] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              ESP=N§ sig. factura] }
    { 64  ;   ;Last Shipping No.   ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=[ENU=Last Shipping No.;
                                                              ESP=élt. n§ albar n venta];
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              ESP=élt. n§ factura];
                                                   Editable=No }
    { 66  ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              ESP=N§ prepago] }
    { 67  ;   ;Last Prepayment No. ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              ESP=N§ £ltimo prepago] }
    { 68  ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              ESP=N§ abono prepago] }
    { 69  ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Sales Cr.Memo Header";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              ESP=N§ £ltimo abono prepago] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ESP=CIF/NIF] }
    { 71  ;   ;Combine Shipments   ;Boolean       ;CaptionML=[ENU=Combine Shipments;
                                                              ESP=Fact. autom tica] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ESP=C¢d. auditor¡a] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN BEGIN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                    RecreateSalesLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ESP=Grupo contable negocio] }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ESP=Op. triangular] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Type"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              ESP=Naturaleza transacci¢n] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transport Method"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transport Method;
                                                              ESP=Modo transporte] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ESP=C¢d. IVA pa¡s/regi¢n] }
    { 79  ;   ;Sell-to Customer Name;Text50       ;CaptionML=[ENU=Sell-to Customer Name;
                                                              ESP=Venta a-Nombre] }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=[ENU=Sell-to Customer Name 2;
                                                              ESP=Venta a-Nombre 2] }
    { 81  ;   ;Sell-to Address     ;Text50        ;CaptionML=[ENU=Sell-to Address;
                                                              ESP=Venta a-Direcci¢n] }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;CaptionML=[ENU=Sell-to Address 2;
                                                              ESP=Venta a-Direcci¢n 2] }
    { 83  ;   ;Sell-to City        ;Text30        ;OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidateCity("Sell-to City","Sell-to Post Code","Sell-to County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity("Sell-to City","Sell-to Post Code","Sell-to County",TRUE);
                                                            END;

                                                   CaptionML=[ENU=Sell-to City;
                                                              ESP=Venta a-Poblaci¢n] }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=[ENU=Sell-to Contact;
                                                              ESP=Venta a-Atenci¢n] }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidatePostCode("Bill-to City","Bill-to Post Code","Bill-to County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode("Bill-to City","Bill-to Post Code","Bill-to County",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ESP=Fact. a-C.P.] }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              ESP=Fact. a-Provincia] }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ESP=Fact. a-C¢d. pa¡s/regi¢n] }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidatePostCode("Sell-to City","Sell-to Post Code","Sell-to County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode("Sell-to City","Sell-to Post Code","Sell-to County",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Post Code;
                                                              ESP=Venta a-C.P.] }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=[ENU=Sell-to County;
                                                              ESP=Venta a-Provincia] }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Ship-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Sell-to Country/Region Code;
                                                              ESP=Venta a-C¢d. pa¡s/regi¢n] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                IF "Date Received" = 0D THEN
                                                                  PostCode.ValidatePostCode("Ship-to City","Ship-to Post Code","Ship-to County");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode("Ship-to City","Ship-to Post Code","Ship-to County",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ESP=Env¡o a-C.P.] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ESP=Env¡o a-Provincia] }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                IF "Ship-to Country/Region Code" <> '' THEN
                                                                  "VAT Country/Region Code" := "Ship-to Country/Region Code"
                                                                ELSE
                                                                  "VAT Country/Region Code" := "Sell-to Country/Region Code"
                                                              END;

                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ESP=Env¡o a-C¢d. pa¡s/regi¢n] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ESP=Tipo contrapartida];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ESP=Cuenta,Banco];
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Exit Point"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Exit Point;
                                                              ESP=Puerto/Aerop. carga] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ESP=Correcci¢n] }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              ESP=Fecha emisi¢n documento] }
    { 100 ;   ;External Document No.;Code20       ;CaptionML=[ENU=External Document No.;
                                                              ESP=N§ documento externo] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION(Area),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Area;
                                                              ESP=C¢d. provincia] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Specification"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transaction Specification;
                                                              ESP=Especificaci¢n transacci¢n] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                PaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
                                                                IF PaymentMgt.IsValidPaymentMethod(xRec."Payment Method Code") AND NOT PaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
                                                                  TESTFIELD("Credit Card No.",'');
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ESP=C¢d. forma pago] }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Shipping Agent Code" = "Shipping Agent Code" THEN
                                                                  EXIT;

                                                                "Shipping Agent Service Code" := '';
                                                                GetShippingTime(FIELDNO("Shipping Agent Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ESP=C¢d. transportista] }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=[ENU=Package Tracking No.;
                                                              ESP=N§ seguimiento bulto] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ESP=Nos. serie];
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting No. Series;
                                                              ESP=N§ serie registro] }
    { 109 ;   ;Shipping No. Series ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Shipping No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series");
                                                                END;
                                                                TESTFIELD("Shipping No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series") THEN
                                                                  VALIDATE("Shipping No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Shipping No. Series;
                                                              ESP=N§ serie alb. venta] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ESP=C¢d.  rea impuesto] }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ESP=Sujeto a impuesto] }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group" THEN
                                                                  RecreateSalesLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ESP=Grupo registro IVA neg.] }
    { 117 ;   ;Reserve             ;Option        ;CaptionML=[ENU=Reserve;
                                                              ESP=Reserva];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ESP=Nunca,Opcional,Siempre];
                                                   OptionString=Never,Optional,Always }
    { 118 ;   ;Applies-to ID       ;Code20        ;OnValidate=VAR
                                                                TempCustLedgEntry@1000 : Record 21;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
                                                                  CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  CustLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,0,0,'');
                                                                  CustLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ESP=Liq. por id.] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=VAR
                                                                ChangeLogMgt@1002 : Codeunit 423;
                                                                RecRef@1001 : RecordRef;
                                                                xRecRef@1000 : RecordRef;
                                                              BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("VAT Base Discount %"),
                                                                    GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                    GLSetup.TABLECAPTION);

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                SalesLine.SETRANGE("Document Type","Document Type");
                                                                SalesLine.SETRANGE("Document No.","No.");
                                                                SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
                                                                SalesLine.SETFILTER(Quantity,'<>0');
                                                                DocDim.LOCKTABLE;
                                                                SalesLine.LOCKTABLE;
                                                                LOCKTABLE;
                                                                IF SalesLine.FINDSET THEN BEGIN
                                                                  xRecRef.GETTABLE(xRec);
                                                                  MODIFY;
                                                                  RecRef.GETTABLE(Rec);
                                                                  ChangeLogMgt.LogModification(RecRef,xRecRef);
                                                                  REPEAT
                                                                    IF (SalesLine."Quantity Invoiced" <> SalesLine.Quantity) OR
                                                                       ("Shipping Advice" <> "Shipping Advice"::Partial) OR
                                                                       (SalesLine.Type <> SalesLine.Type::"Charge (Item)") OR
                                                                       (CurrFieldNo <> 0)
                                                                    THEN BEGIN
                                                                      xRecRef.GETTABLE(SalesLine);
                                                                      SalesLine.UpdateAmounts;
                                                                      SalesLine.MODIFY;
                                                                      RecRef.GETTABLE(SalesLine);
                                                                      ChangeLogMgt.LogModification(RecRef,xRecRef);
                                                                    END;
                                                                  UNTIL SalesLine.NEXT = 0;
                                                                END;
                                                                SalesLine.RESET;
                                                              END;

                                                   CaptionML=[ENU=VAT Base Discount %;
                                                              ESP=% Dto. base IVA];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    ESP=Abierto,Lanzado,Aprobaci¢n pendiente,Prepago pendiente];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              ESP=C lculo descuento factura];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ESP=Ninguno,%,Importe];
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              ESP=Valor descuento factura];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  IF "Bill-to IC Partner Code" = '' THEN
                                                                    TESTFIELD("Sell-to IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Send IC Document;
                                                              ESP=Enviar documento IC] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              ESP=Estado socio IC];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    ESP=Nuevo,Pendiente,Enviado];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Sell-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Sell-to IC Partner Code;
                                                              ESP=C¢digo IC asociada de venta];
                                                   Editable=No }
    { 126 ;   ;Bill-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Bill-to IC Partner Code;
                                                              ESP=C¢digo IC asociada facturaci¢n];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=IC Direction;
                                                              ESP=Direcci¢n env¡o IC];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ESP=Saliente,Entrante];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ESP=% prepago];
                                                   DecimalPlaces=0:6;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Prepmt. Inv. Nos.","Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Prepmt. Inv. Nos.","Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ESP=N§ serie prepago] }
    { 132 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              ESP=Compresi¢n prepago] }
    { 133 ;   ;Prepayment Due Date ;Date          ;OnValidate=BEGIN
                                                                IF PaymentTerms.GET("Prepmt. Payment Terms Code") THEN
                                                                  PaymentTerms.VerifyMaxNoDaysTillDueDate("Prepayment Due Date","Document Date",FIELDCAPTION("Prepayment Due Date"));
                                                              END;

                                                   CaptionML=[ENU=Prepayment Due Date;
                                                              ESP=Fecha vencimiento prepago] }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Prepmt. Cr. Memo Nos.","Prepmt. Cr. Memo No.");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Prepmt. Cr. Memo No.") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No.");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ESP=N§ serie abono prepago] }
    { 135 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=[ENU=Prepmt. Posting Description;
                                                              ESP=Texto registro prepago] }
    { 138 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              ESP=Fecha descuento prepago] }
    { 139 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                     NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    AdjustDueDate.SalesAdjustDueDate("Prepayment Due Date","Document Date",PaymentTerms.CalculateMaxDueDate("Document Date"),
                                                                "Bill-to Customer No.");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    GLSetup.GET;
                                                                    IF GLSetup."Payment Discount Type" = GLSetup."Payment Discount Type"::"Calc. Pmt. Disc. on Lines" THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",0)
                                                                    ELSE
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %");
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                  VALIDATE("Prepmt. Payment Discount %",0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              ESP=C¢digo trminos prepago] }
    { 140 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF NOT ("Prepmt. Payment Discount %" = 0) AND
                                                                  (GLSetup."Payment Discount Type" = GLSetup."Payment Discount Type"::"Calc. Pmt. Disc. on Lines")
                                                                THEN
                                                                  ERROR(Text10700,FIELDCAPTION("Prepmt. Payment Discount %"),GLSetup.FIELDCAPTION("Payment Discount Type"),
                                                                    GLSetup."Payment Discount Type");
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              ESP=% descuento prepago];
                                                   DecimalPlaces=0:6 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ESP=N§ oferta];
                                                   Editable=No }
    { 825 ;   ;Authorization Required;Boolean     ;CaptionML=[ENU=Authorization Required;
                                                              ESP=Se necesita autorizaci¢n] }
    { 827 ;   ;Credit Card No.     ;Code20        ;TableRelation="DO Payment Credit Card" WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   OnValidate=VAR
                                                                DOPaymentMgt@1000 : Codeunit 825;
                                                              BEGIN
                                                                PaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");

                                                                IF "Credit Card No." = '' THEN
                                                                  EXIT;

                                                                DOPaymentMgt.CheckCreditCardData("Credit Card No.");

                                                                IF NOT PaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
                                                                  FIELDERROR("Payment Method Code");
                                                              END;

                                                   CaptionML=[ENU=Credit Card No.;
                                                              ESP=N§ tarjeta de crdito] }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                               No.=FIELD(No.),
                                                                                                               Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              ESP=N§ de versiones archivadas];
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              ESP=Ocurrencia N§ doc.] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=VAR
                                                                TempDocDim@1000 : TEMPORARY Record 357;
                                                                ChangeLogMgt@1003 : Codeunit 423;
                                                                RecRef@1002 : RecordRef;
                                                                xRecRef@1001 : RecordRef;
                                                              BEGIN
                                                                xRecRef.GETTABLE(xRec);
                                                                MODIFY;
                                                                RecRef.GETTABLE(Rec);
                                                                ChangeLogMgt.LogModification(RecRef,xRecRef);

                                                                TempDocDim.GetDimensions(DATABASE::"Sales Header","Document Type","No.",0,TempDocDim);

                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                IF SalesLinesExist THEN
                                                                  TempDocDim.UpdateAllLineDim(DATABASE::"Sales Header","Document Type","No.",TempDocDim);
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ESP=N§ campa¤a] }
    { 5051;   ;Sell-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                SellToCustTemplate@1000 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Sell-to Customer Template Code" <> xRec."Sell-to Customer Template Code") AND
                                                                   (xRec."Sell-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer Template Code" = '' THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Sell-to Customer Template Code" := xRec."Sell-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF SellToCustTemplate.GET("Sell-to Customer Template Code") THEN BEGIN
                                                                  SellToCustTemplate.TESTFIELD("Gen. Bus. Posting Group");
                                                                  "Gen. Bus. Posting Group" := SellToCustTemplate."Gen. Bus. Posting Group";
                                                                  "VAT Bus. Posting Group" := SellToCustTemplate."VAT Bus. Posting Group";
                                                                  IF "Bill-to Customer No." = '' THEN
                                                                    VALIDATE("Bill-to Customer Template Code","Sell-to Customer Template Code");
                                                                END;

                                                                IF NOT InsertMode AND
                                                                   ((xRec."Sell-to Customer Template Code" <> "Sell-to Customer Template Code") OR
                                                                    (xRec."Currency Code" <> "Currency Code"))
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer Template Code"));
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer Template Code;
                                                              ESP=Venta a-C¢d. plant. cliente] }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                                Opportunity@1000 : Record 5092;
                                                                ChangeLogMgt@1005 : Codeunit 423;
                                                                RecRef@1003 : RecordRef;
                                                                xRecRef@1001 : RecordRef;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Sell-to Contact No." <> xRec."Sell-to Contact No.") AND
                                                                   (xRec."Sell-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Sell-to Contact No." = '') AND ("Opportunity No." <> '') THEN
                                                                    ERROR(Text049,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF ("Sell-to Contact No." = '') AND ("Sell-to Customer No." = '') THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Sell-to Contact No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Opportunity No." <> '' THEN BEGIN
                                                                      Opportunity.GET("Opportunity No.");
                                                                      IF Opportunity."Contact No." <> "Sell-to Contact No." THEN BEGIN
                                                                        xRecRef.GETTABLE(xRec);
                                                                        MODIFY;
                                                                        RecRef.GETTABLE(Rec);
                                                                        ChangeLogMgt.LogModification(RecRef,xRecRef);
                                                                        xRecRef.GETTABLE(Opportunity);
                                                                        Opportunity.VALIDATE("Contact No.","Sell-to Contact No.");
                                                                        Opportunity.MODIFY;
                                                                        RecRef.GETTABLE(Opportunity);
                                                                        ChangeLogMgt.LogModification(RecRef,xRecRef);
                                                                      END
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Sell-to Customer No." <> '') AND ("Sell-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Sell-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Sell-to Customer No.");
                                                                END;

                                                                UpdateSellToCust("Sell-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Sell-to Customer No." <> '' THEN BEGIN
                                                                IF Cont.GET("Sell-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Sell-to Contact No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN ;
                                                              IF FORM.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Sell-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Sell-to Contact No.;
                                                              ESP=Venta a-N§ contacto] }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF ("Bill-to Contact No." = '') AND ("Bill-to Customer No." = '') THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bill-to Contact No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Contact No." := xRec."Bill-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;

                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Bill-to Customer No." <> '' THEN BEGIN
                                                                IF Cont.GET("Bill-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF FORM.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ESP=Fact. a-N§ contacto] }
    { 5054;   ;Bill-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                BillToCustTemplate@1001 : Record 5105;
                                                                TempDocDim@1000 : TEMPORARY Record 357;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Bill-to Customer Template Code" <> xRec."Bill-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Bill-to Customer Template Code" = '' THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Shipping No." <> '' THEN BEGIN
                                                                        "Shipping No. Series" := xRec."Shipping No. Series";
                                                                        "Shipping No." := xRec."Shipping No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Receipt No." <> '' THEN BEGIN
                                                                        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
                                                                        "Return Receipt No." := xRec."Return Receipt No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Customer Template Code" := xRec."Bill-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                VALIDATE("Ship-to Code",'');
                                                                IF BillToCustTemplate.GET("Bill-to Customer Template Code") THEN BEGIN
                                                                  BillToCustTemplate.TESTFIELD("Customer Posting Group");
                                                                  "Customer Posting Group" := BillToCustTemplate."Customer Posting Group";
                                                                  "Invoice Disc. Code" := BillToCustTemplate."Invoice Disc. Code";
                                                                  "Customer Price Group" := BillToCustTemplate."Customer Price Group";
                                                                  "Customer Disc. Group" := BillToCustTemplate."Customer Disc. Group";
                                                                  "Allow Line Disc." := BillToCustTemplate."Allow Line Disc.";
                                                                  VALIDATE("Payment Terms Code",BillToCustTemplate."Payment Terms Code");
                                                                  VALIDATE("Payment Method Code",BillToCustTemplate."Payment Method Code");
                                                                  "Shipment Method Code" := BillToCustTemplate."Shipment Method Code";
                                                                END;

                                                                TempDocDim.GetDimensions(DATABASE::"Sales Header","Document Type","No.",0,TempDocDim);
                                                                CreateDim(
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                                IF SalesLinesExist THEN
                                                                  TempDocDim.UpdateAllLineDim(DATABASE::"Sales Header","Document Type","No.",TempDocDim);

                                                                IF NOT InsertMode AND
                                                                   (xRec."Sell-to Customer Template Code" = "Sell-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> "Bill-to Customer Template Code")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer Template Code"));
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer Template Code;
                                                              ESP=Fact. a-C¢d. plant. cliente] }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=IF (Document Type=FILTER(<>Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                           Closed=CONST(No))
                                                                                                                           ELSE IF (Document Type=CONST(Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                                                                                       Sales Document No.=FIELD(No.),
                                                                                                                                                                                       Sales Document Type=CONST(Order));
                                                   OnValidate=VAR
                                                                Opportunity@1000 : Record 5092;
                                                                SalesHeader@1001 : Record 36;
                                                              BEGIN
                                                                IF xRec."Opportunity No." <> "Opportunity No." THEN BEGIN
                                                                  IF "Opportunity No." <> '' THEN
                                                                    IF Opportunity.GET("Opportunity No.") THEN BEGIN
                                                                      Opportunity.TESTFIELD(Status,Opportunity.Status::"In Progress");
                                                                      IF Opportunity."Sales Document No." <> '' THEN BEGIN
                                                                        IF CONFIRM(Text048,FALSE,Opportunity."Sales Document No.",Opportunity."No.") THEN BEGIN
                                                                          IF SalesHeader.GET("Document Type"::Quote,Opportunity."Sales Document No.") THEN BEGIN
                                                                            SalesHeader."Opportunity No." := '';
                                                                            SalesHeader.MODIFY;
                                                                          END;
                                                                          Opportunity."Sales Document Type" := Opportunity."Sales Document Type"::Quote;
                                                                          Opportunity."Sales Document No." := "No.";
                                                                          Opportunity.MODIFY;
                                                                        END ELSE
                                                                          "Opportunity No." := xRec."Opportunity No.";
                                                                      END ELSE BEGIN
                                                                        Opportunity."Sales Document Type" := Opportunity."Sales Document Type"::Quote;
                                                                        Opportunity."Sales Document No." := "No.";
                                                                        Opportunity.MODIFY;
                                                                      END
                                                                    END;
                                                                  IF xRec."Opportunity No." <> '' THEN
                                                                    IF Opportunity.GET(xRec."Opportunity No.") THEN BEGIN
                                                                      Opportunity."Sales Document No." := '';
                                                                      Opportunity."Sales Document Type" := Opportunity."Sales Document Type"::" ";
                                                                      Opportunity.MODIFY;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Opportunity No.;
                                                              ESP=N§ oportunidad] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserMgt.CheckRespCenter(0,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text027,
                                                                    RespCenter.TABLECAPTION,UserMgt.GetSalesFilter);

                                                                "Location Code" := UserMgt.GetLocation(0,'',"Responsibility Center");
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  IF Location.GET("Location Code") THEN
                                                                    "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                END;

                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreateSalesLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ESP=Centro responsabilidad] }
    { 5750;   ;Shipping Advice     ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                WhseSourceHeader.SalesHeaderVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Shipping Advice;
                                                              ESP=Aviso env¡o];
                                                   OptionCaptionML=[ENU=Partial,Complete;
                                                                    ESP=Parcial,Completo];
                                                   OptionString=Partial,Complete }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Line"."Completely Shipped" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.),
                                                                                                            Type=FILTER(<>' '),
                                                                                                            Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Shipped;
                                                              ESP=Enviado completamente];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ESP=Regis. desde almac. ref.] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ESP=Filtro almacn] }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> xRec."Requested Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Requested Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Requested Delivery Date;
                                                              ESP=Fecha entrega requerida] }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> xRec."Promised Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Promised Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Promised Delivery Date;
                                                              ESP=Fecha entrega prometida] }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Shipping Time" <> xRec."Shipping Time" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Shipping Time"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipping Time;
                                                              ESP=Tiempo env¡o] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Outbound Whse. Handling Time" <> xRec."Outbound Whse. Handling Time") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Outbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ESP=Tiempo manip. alm. salida] }
    { 5794;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                GetShippingTime(FIELDNO("Shipping Agent Service Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Service Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ESP=C¢d. servicio transportista] }
    { 5795;   ;Late Order Shipping ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Sell-to Customer No.=FIELD(Sell-to Customer No.),
                                                                                         Document No.=FIELD(No.),
                                                                                         Shipment Date=FIELD(Date Filter),
                                                                                         Outstanding Quantity=FILTER(<>0)));
                                                   CaptionML=[ENU=Late Order Shipping;
                                                              ESP=Env¡o retrasado];
                                                   Editable=No }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ESP=Filtro fecha] }
    { 5800;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              ESP=Recepci¢n] }
    { 5801;   ;Return Receipt No.  ;Code20        ;CaptionML=[ENU=Return Receipt No.;
                                                              ESP=N§ recep. devol.] }
    { 5802;   ;Return Receipt No. Series;Code10   ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Receipt No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series");
                                                                END;
                                                                TESTFIELD("Return Receipt No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series") THEN
                                                                  VALIDATE("Return Receipt No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Receipt No. Series;
                                                              ESP=N§ serie recep. devol.] }
    { 5803;   ;Last Return Receipt No.;Code20     ;TableRelation="Return Receipt Header";
                                                   CaptionML=[ENU=Last Return Receipt No.;
                                                              ESP=N§ £ltima recep. devol.];
                                                   Editable=No }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Allow Line Disc."));
                                                              END;

                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ESP=Permite dto. l¡nea] }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=[ENU=Get Shipment Used;
                                                              ESP=Obtener mtodo de env¡o usado];
                                                   Editable=No }
    { 8725;   ;Signature           ;BLOB          ;CaptionML=[ENU=Signature;
                                                              ESP=Firma];
                                                   SubType=Bitmap }
    { 9000;   ;Assigned User ID    ;Code20        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserMgt.CheckRespCenter2(0,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text061,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserMgt.GetSalesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=[ENU=Assigned User ID;
                                                              ESP=Id. usuario asignado] }
    { 10705;  ;Corrected Invoice No.;Code20       ;OnValidate=VAR
                                                                SalesInvoiceHeader@1100007 : Record 112;
                                                              BEGIN
                                                                IF "Corrected Invoice No." <> '' THEN BEGIN
                                                                  SalesInvoiceHeader.SETCURRENTKEY("No.");
                                                                  SalesInvoiceHeader.SETRANGE("Bill-to Customer No.","Bill-to Customer No.");
                                                                  SalesInvoiceHeader.SETRANGE(SalesInvoiceHeader."No.","Corrected Invoice No.");
                                                                  IF NOT SalesInvoiceHeader.FIND('-') THEN
                                                                    ERROR(Text1100002,FIELDCAPTION("Corrected Invoice No."),"Corrected Invoice No.");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              SalesInvoiceHeader@1100002 : Record 112;
                                                              PostedSalesInvoices@1100003 : Form 143;
                                                            BEGIN
                                                              SalesInvoiceHeader.SETCURRENTKEY("No.");
                                                              SalesInvoiceHeader.SETRANGE("Bill-to Customer No.","Bill-to Customer No.");

                                                              PostedSalesInvoices.SETTABLEVIEW(SalesInvoiceHeader);
                                                              PostedSalesInvoices.SETRECORD(SalesInvoiceHeader);
                                                              PostedSalesInvoices.LOOKUPMODE(TRUE);
                                                              IF PostedSalesInvoices.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                 PostedSalesInvoices.GETRECORD(SalesInvoiceHeader);
                                                                VALIDATE("Corrected Invoice No.", SalesInvoiceHeader."No.");
                                                              END;
                                                              CLEAR(PostedSalesInvoices);
                                                            END;

                                                   CaptionML=[ENU=Corrected Invoice No.;
                                                              ESP=N.§ factura corregida] }
    { 50000;  ;Marca               ;Code20        ;CaptionML=ESP=Marca;
                                                   Description=obsoleto }
    { 50001;  ;Tipo de Clave       ;Code10        ;TableRelation="Maestro de Claves".Clave;
                                                   CaptionML=ESP=Tipo de Clave;
                                                   Description=obsoleto }
    { 50007;  ;Fecha entrada       ;Date          ;CaptionML=ESP=Fecha entrada;
                                                   Description=obsoleto }
    { 50008;  ;Usuario             ;Code20        ;TableRelation=User."User ID";
                                                   CaptionML=ESP=Usuario;
                                                   Description=User."User ID";
                                                   Editable=No }
    { 50009;  ;Hotel               ;Code20        ;TableRelation=Hotel.Hotel;
                                                   CaptionML=ESP=Hotel;
                                                   Description=Hotel.Hotel }
    { 90000;  ;Anulaci¢n           ;Boolean       ;Description=AF3.70 }
    { 90001;  ;Creado por anulaci¢n;Boolean       ;Description=AF3.70 }
    { 7000000;;Applies-to Bill No. ;Code20        ;OnValidate=BEGIN
                                                                // CheckBillSituation; // es0013
                                                              END;

                                                   CaptionML=[ENU=Applies-to Bill No.;
                                                              ESP=Liq. por n§ efecto] }
    { 7000001;;Cust. Bank Acc. Code;Code20        ;TableRelation="Customer Bank Account".Code WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   CaptionML=[ENU=Cust. Bank Acc. Code;
                                                              ESP=C¢d. banco cliente] }
    { 7000003;;Pay-at Code         ;Code20        ;TableRelation="Customer Pmt. Address".Code WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   CaptionML=[ENU=Pay-at Code;
                                                              ESP=Pago en-C¢digo] }
    { 7000100;;Traspasado          ;Boolean       ;CaptionML=ESP=Traspasado;
                                                   Description=Auditoria Traspaso contable;
                                                   Editable=No }
    { 7000101;;Usuario Traspaso    ;Code20        ;CaptionML=ESP=Usuario Traspaso;
                                                   Description=Auditoria Traspaso contable;
                                                   Editable=No }
    { 7000102;;Fecha Traspaso      ;Date          ;CaptionML=ESP=Fecha Traspaso;
                                                   Description=Auditoria Traspaso contable;
                                                   Editable=No }
    { 7000103;;Hora Traspaso       ;Time          ;CaptionML=ESP=Hora Traspaso;
                                                   Description=Auditoria Traspaso contable }
    { 7000106;;Num Traspaso        ;Integer       ;CaptionML=ESP=Num Traspaso;
                                                   Description=Auditoria Traspaso contable;
                                                   Editable=No }
    { 7000107;;Imprime Logo        ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=ESP=Imprime Logo;
                                                   Description=FlowFilter Indica que la impresi¢n de factura debe de enviarse por correo }
    { 7009700;;Cod. Grupo NCF      ;Code10        ;TableRelation="Grupo configuracion NCF".Codigo WHERE (Tipo grupo=CONST(Ventas));
                                                   OnValidate=BEGIN
                                                                // AJS 15.02.2007
                                                                // Si hay un cambio de cliente que no ocasiona cambio de grupo de NCF no hay que hacer nada con el comprobante

                                                                IF "Cod. Grupo NCF" <> xRec."Cod. Grupo NCF" THEN
                                                                BEGIN

                                                                  IF "Comprobante Fiscal" <> '' THEN
                                                                    ERROR(Text252);

                                                                  IF "Comprobante Fiscal" = '' THEN
                                                                  BEGIN
                                                                    rGrupoNCF.GET(rGrupoNCF."Tipo grupo"::Ventas, Cust."Cod. Grupo NCF");

                                                                    IF "Document Type" = "Document Type"::Invoice THEN
                                                                    BEGIN
                                                                      rGrupoNCF.TESTFIELD("Serie NCF Facturas");
                                                                      "Comprobante Fiscal" := NoSeriesMgt.GetNextNo(rGrupoNCF."Serie NCF Facturas", "Posting Date", TRUE);
                                                                    END
                                                                    ELSE
                                                                    BEGIN
                                                                      rGrupoNCF.TESTFIELD("Serie NCF Abonos");
                                                                      "Comprobante Fiscal" := NoSeriesMgt.GetNextNo(rGrupoNCF."Serie NCF Abonos", "Posting Date", TRUE);
                                                                    END;
                                                                  END;

                                                                  // Comprobar la longitud del comprobante fiscal

                                                                  IF STRLEN("Comprobante Fiscal") <> GLSetup."Digitos NCF" THEN
                                                                    ERROR(Text253, GLSetup."Digitos NCF");

                                                                END;
                                                              END;

                                                   CaptionML=ESP=Cod. Grupo NCF;
                                                   Description="Grupo configuracion NCF".Codigo WHERE (Tipo grupo=CONST(Ventas)) }
    { 7009703;;Comprobante Fiscal  ;Code20        ;CaptionML=ESP=Comprobante Fiscal;
                                                   Editable=No }
    { 99008500;;Date Received      ;Date          ;CaptionML=[ENU=Date Received;
                                                              ESP=Fecha recepci¢n] }
    { 99008501;;Time Received      ;Time          ;CaptionML=[ENU=Time Received;
                                                              ESP=Hora recepci¢n] }
    { 99008502;;BizTalk Request for Sales Qte.;Boolean;
                                                   CaptionML=[ENU=BizTalk Request for Sales Qte.;
                                                              ESP=Petici¢n oferta venta BizTalk] }
    { 99008503;;BizTalk Sales Order;Boolean       ;CaptionML=[ENU=BizTalk Sales Order;
                                                              ESP=Pedido venta BizTalk] }
    { 99008509;;Date Sent          ;Date          ;CaptionML=[ENU=Date Sent;
                                                              ESP=Fecha enviado] }
    { 99008510;;Time Sent          ;Time          ;CaptionML=[ENU=Time Sent;
                                                              ESP=Hora env¡o] }
    { 99008513;;BizTalk Sales Quote;Boolean       ;CaptionML=[ENU=BizTalk Sales Quote;
                                                              ESP=Oferta venta BizTalk] }
    { 99008514;;BizTalk Sales Order Cnfmn.;Boolean;CaptionML=[ENU=BizTalk Sales Order Cnfmn.;
                                                              ESP=Confirm. ped. venta BizTalk] }
    { 99008518;;Customer Quote No. ;Code20        ;CaptionML=[ENU=Customer Quote No.;
                                                              ESP=N§ oferta cliente] }
    { 99008519;;Customer Order No. ;Code20        ;CaptionML=[ENU=Customer Order No.;
                                                              ESP=N§ pedido cliente] }
    { 99008521;;BizTalk Document Sent;Boolean     ;CaptionML=[ENU=BizTalk Document Sent;
                                                              ESP=Documento enviado BizTalk] }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Sell-to Customer No.,No.   }
    {    ;Document Type,Combine Shipments,Bill-to Customer No.,Currency Code }
    {    ;Sell-to Customer No.,External Document No. }
    {    ;Document Type,Sell-to Contact No.       ;KeyGroups=SOP(CRM) }
    {    ;Bill-to Contact No.                     ;KeyGroups=SOP(CRM) }
    { No ;Marca                                   ;KeyGroups=INCOMING;
                                                   MaintainSQLIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to print shipment %1?;ESP=¨Confirma que desea imprimir el albar n %1?';
      Text001@1001 : TextConst 'ENU=Do you want to print invoice %1?;ESP=¨Confirma que desea imprimir la factura %1?';
      Text002@1002 : TextConst 'ENU=Do you want to print credit memo %1?;ESP=¨Confirma que desea imprimir el abono %1?';
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      Text004@1004 : TextConst 'ENU=Do you want to change %1?;ESP=¨Confirma que desea cambiar %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.;ESP=No se puede modificar el cliente %1 ya que el documento tiene una o m s l¡neas.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more purchase orders.;ESP=No se puede cambiar %1 porque el pedido est  asociado a pedidos de compra.';
      Text007@1007 : TextConst 'ENU=%1 cannot be greater than %2 in the %3 table.;ESP=En la tabla %3, %1 no puede ser mayor que %2.';
      Text008@1008 : TextConst 'ENU="Deleting this document will cause a gap in the number series for shipments. ";ESP="Si borra el documento, se provocar  una discontinuidad en la numeraci¢n de la serie de albaranes. "';
      Text009@1009 : TextConst 'ENU=An empty shipment %1 will be created to fill this gap in the number series.\\;ESP=Se crear  un albar n de venta en blanco %1 para completar la misma.\\';
      Text010@1010 : TextConst 'ENU=Do you want to continue?;ESP=¨Confirma que desea continuar?';
      Text011@1011 : TextConst 'ENU="Deleting this document will cause a gap in the number series for posted invoices. ";ESP="Si borra el documento se provocar  una discontinuidad en la numeraci¢n de la serie de facturas registradas. "';
      Text012@1012 : TextConst 'ENU=An empty posted invoice %1 will be created to fill this gap in the number series.\\;ESP=Se crear  una factura registrada en blanco %1 para completar la misma.\\';
      Text013@1013 : TextConst 'ENU="Deleting this document will cause a gap in the number series for posted credit memos. ";ESP="Si borra el documento, se provocar  una discontinuidad en la numeraci¢n de la serie de abonos registrados. "';
      Text014@1014 : TextConst 'ENU=An empty posted credit memo %1 will be created to fill this gap in the number series.\\;ESP=Se crear  un abono registrado en blanco %1 para completar la misma.\\';
      Text015@1015 : TextConst 'ENU=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\;ESP=Si cambia %1, se eliminar n las l¡ns. venta actuales y se crear n nuevas l¡ns. venta bas ndose en informaci¢n de la cabecera.\\';
      Text017@1017 : TextConst 'ENU=You must delete the existing sales lines before you can change %1.;ESP=Se deben eliminar las l¡neas de venta existentes antes de cambiar %1.';
      Text018@1018 : TextConst 'ENU=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.\;ESP=Se ha modificado %1 en cab. ventas, pero no se ha modificado en las l¡neas de venta.\';
      Text019@1019 : TextConst 'ENU=You must update the existing sales lines manually.;ESP=Debe actualizar las l¡neas de venta existentes manualmente.';
      Text020@1020 : TextConst 'ENU=The change may affect the exchange rate used in the price calculation of the sales lines.;ESP=El cambio puede afectar al tipo de cambio utilizado en el c lculo del precio en las l¡neas de vtas.';
      Text021@1021 : TextConst 'ENU=Do you want to update the exchange rate?;ESP=¨Confirma que desea modificar el tipo de cambio?';
      Text022@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.;ESP=No puede borrar este documento. Su identificaci¢n est  configurada s¢lo para procesar %1 %2.';
      Text023@1023 : TextConst 'ENU=Do you want to print return receipt %1?;ESP=¨Confirma que desea imprimir la recep. devol. %1?';
      Text024@1024 : TextConst 'ENU="You have modified the %1 field. Note that the recalculation of VAT may cause penny differences, so you must check the amounts afterwards. ";ESP="Ha modificado el campo %1. El nuevo c lculo de IVA puede tener alguna diferencia, por lo que deber¡a comprobar los importes. "';
      Text026@1026 : TextConst 'ENU=Do you want to update the %2 field on the lines to reflect the new value of %1?;ESP=¨Confirma que desea actualizar el %2 campo en la l¡neas para reflejar el nuevo valor de %1?';
      Text027@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.;ESP=Su identificaci¢n est  configurada para procesar s¢lo desde %1 %2.';
      Text028@1028 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ESP=No puede cambiar %1 despus de introducir datos en %2.';
      Text029@1029 : TextConst 'ENU="Deleting this document will cause a gap in the number series for return receipts. ";ESP="Borrar este doc. causar  un  error en el n£mero de serie de las recep. devol. "';
      Text030@1030 : TextConst 'ENU=An empty return receipt %1 will be created to fill this gap in the number series.\\;ESP=Una recep. devol. vac¡a %1 se crear  para rellenar este error en los n§ de serie.\\';
      Text031@1031 : TextConst 'ENU=You have modified %1.\\;ESP=Ha modificado %1.\\';
      Text032@1032 : TextConst 'ENU=Do you want to update the lines?;ESP=¨Confirma que desea actualizar las l¡neas?';
      Text067@2002 : TextConst 'ENU=%1 %4 with amount of %2 has already been authorized on %3 and is not expired yet. You must void the previous authorization before you can re-authorize this %1.;ESP=%1 %4 de importe %2 se autoriz¢ el %3 y todav¡a no expir¢. Para volver a autorizar %1, es necesario anular la autorizaci¢n anterior.';
      Text068@2003 : TextConst 'ENU=There is nothing to void.;ESP=No hay nada que anular.';
      Text069@2004 : TextConst 'ENU=The selected operation cannot complete with the specified %1.;ESP=No se puede completar la operaci¢n seleccionada con el valor de %1 especificado.';
      SalesSetup@1033 : Record 311;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      SalesHeader@1036 : Record 36;
      SalesLine@1037 : Record 37;
      CustLedgEntry@1038 : Record 21;
      Cust@1039 : Record 18;
      PaymentTerms@1040 : Record 3;
      PaymentMethod@1041 : Record 289;
      CurrExchRate@1042 : Record 330;
      SalesCommentLine@1043 : Record 44;
      ShipToAddr@1044 : Record 222;
      PostCode@1045 : Record 225;
      BankAcc@1046 : Record 270;
      SalesShptHeader@1047 : Record 110;
      SalesInvHeader@1048 : Record 112;
      SalesCrMemoHeader@1049 : Record 114;
      ReturnRcptHeader@1050 : Record 6660;
      SalesInvHeaderPrepmt@1101 : Record 112;
      SalesCrMemoHeaderPrepmt@1100 : Record 114;
      GenBusPostingGrp@1051 : Record 250;
      GenJnILine@1052 : Record 81;
      RespCenter@1053 : Record 5714;
      InvtSetup@1054 : Record 313;
      Location@1055 : Record 14;
      WhseRequest@1056 : Record 5765;
      ShippingAgentService@1057 : Record 5790;
      TempReqLine@1089 : TEMPORARY Record 246;
      rGrupoNCF@1103355001 : Record 7009831;
      UserMgt@1058 : Codeunit 5700;
      NoSeriesMgt@1059 : Codeunit 396;
      CustCheckCreditLimit@1060 : Codeunit 312;
      TransferExtendedText@1061 : Codeunit 378;
      GenJnlApply@1062 : Codeunit 225;
      SalesPost@1063 : Codeunit 80;
      CustEntrySetApplID@1064 : Codeunit 101;
      DimMgt@1065 : Codeunit 408;
      ApprovalMgt@1099 : Codeunit 439;
      WhseSourceHeader@1073 : Codeunit 5781;
      ArchiveManagement@1075 : Codeunit 5063;
      SalesLineReserve@1066 : Codeunit 99000832;
      PaymentMgt@2000 : Codeunit 825;
      PaymentTransLogMgt@2001 : Codeunit 829;
      ApplyCustEntries@1067 : Form 232;
      CurrencyDate@1068 : Date;
      HideValidationDialog@1069 : Boolean;
      Confirmed@1070 : Boolean;
      Text035@1076 : TextConst 'ENU=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?;ESP=No puede lanzar oferta ¢ hacer pedido hasta que especifique un cliente en la oferta.\\¨Quiere crear un cliente(s) ahora?';
      Text037@1078 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.;ESP=Contacto %1 %2 no est  relacionado con el cliente %3.';
      Text038@1074 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.;ESP=Contacto %1 %2 est  relacionado con una empresa diferente al cliente %3.';
      Text039@1086 : TextConst 'ENU=Contact %1 %2 is not related to a customer.;ESP=Contacto %1 %2 no est  relacionado con un cliente.';
      ReservEntry@1079 : Record 337;
      TempReservEntry@1080 : TEMPORARY Record 337;
      DocDim@1082 : Record 357;
      Text040@1083 : TextConst 'ENU=A won opportunity is linked to this order.\;ESP=Una oportunidad ganada est  relacionada con este pedido.\';
      Text041@1084 : TextConst 'ENU=It has to be changed to status Lost before the Order can be deleted.\;ESP=Antes de poder eliminar el pedido, debe cambiar el estado a Perdida.\';
      Text042@1085 : TextConst 'ENU=Do you want to change the status for this opportunity now?;ESP=¨Desea cambiar el estado para esta oportunidad?';
      Text043@1087 : TextConst 'ENU=Wizard Aborted;ESP=Wizard Abortado';
      Text044@1088 : TextConst 'ENU=The status of the opportunity has not been changed. The program has aborted deleting the order.;ESP=No se ha cambiado el estado de la oportunidad. El programa ha anulado la eliminaci¢n del pedido.';
      SkipSellToContact@1016 : Boolean;
      SkipBillToContact@1025 : Boolean;
      Text045@1081 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8.";ESP="No puede cambiar el campo %1 porque %2 %3 tiene %4 = %5 y ya se ha asignado el %6 a %7 %8."';
      Text047@1095 : TextConst 'ENU=You cannot change %1 because reservation, item tracking, or order tracking exists on the sales order.;ESP=No puede cambiar %1 porque la reserva, el seguimiento de productos o el seguimiento de pedido existe en el pedido de venta.';
      Text048@1091 : TextConst 'ENU=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?;ESP=La oferta de ventas %1 ya fue asignada a la oportunidad %2. ¨Desea volver a asignar la oferta?';
      Text049@1092 : TextConst 'ENU=The %1 field cannot be blank because this quote is linked to an opportunity.;ESP=El campo %1 no puede estar vac¡o porque la oferta est  asociada a una oportunidad.';
      InsertMode@1093 : Boolean;
      CompanyInfo@1094 : Record 79;
      Text050@1096 : TextConst 'ENU=If %1 is %2 in sales order no. %3, then all sales lines where type is %4 must use the same location.;ESP=Si %1 es %2 en el n§ de pedido de venta %3, todas las l¡neas venta donde el tipo es %4 deben utilizar el mismo almacn.';
      HideCreditCheckDialogue@1097 : Boolean;
      Text051@1071 : TextConst 'ENU=The sales %1 %2 already exists.;ESP=Ya existen las ventas %1 %2.';
      Text052@1098 : TextConst 'ENU=The sales %1 %2 has item tracking. Do you want to delete it anyway?;ESP=El valor %1 %2 de ventas tiene seguimiento de productos. ¨Desea eliminarlo de todas maneras?';
      Text053@1102 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.;ESP=Debe cancelar el proceso de aprobaci¢n si desea cambiar el %1.';
      Text054@1103 : TextConst 'ENU=The sales %1 %2 has item tracking. Do you want to delete it anyway?;ESP=El valor %1 %2 de ventas tiene seguimiento de productos. ¨Desea eliminarlo de todas maneras?';
      Text055@1104 : TextConst 'ENU="Deleting this document will cause a gap in the number series for prepayment invoices. ";ESP="Si borra el documento, se provocar  una discontinuidad en la numeraci¢n de la serie de facturas de prepago. "';
      Text056@1105 : TextConst 'ENU=An empty prepayment invoice %1 will be created to fill this gap in the number series.\\;ESP=Se crear  una factura prepago %1 en blanco para completar este error en el n£mero de serie.\\';
      Text057@1106 : TextConst 'ENU="Deleting this document will cause a gap in the number series for prepayment credit memos. ";ESP="Si borra el documento, se provocar  una discontinuidad en la numeraci¢n de la serie de abonos de prepago. "';
      Text058@1107 : TextConst 'ENU=An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\;ESP=Se crear  un abono registrado de prepago %1 en blanco para completar este error en el n£mero de serie.\\';
      Text061@1110 : TextConst 'ENU=%1 is set up to process from %2 %3 only.;ESP=Se ha configurado %1 para procesar s¢lo desde %2 %3.';
      Text062@1072 : TextConst 'ENU=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.;ESP=No puede cambiar %1 porque el %2 %3 correspondiente ha sido asignado a este %4.';
      Text063@1077 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\;ESP=Existen reservas para este pedido y se cancelar n si este cambio provoca un conflicto de fechas.\\';
      Text064@1090 : TextConst 'ENU=The warehouse shipment was not created because the Shipping Advice field is set to Complete, and item no. %1 is not available in location code %2.\\You can create the warehouse shipment by either changing the Shipping Advice field to Partial in sales order no. %3, or filling in the warehouse shipment document manually.;ESP=No se cre¢ el env¡o de almacn porque el campo Aviso env¡o se configur¢ en Completo y el n£mero de producto %1 no est  disponible en el c¢digo de almacn %2.\\Para crear el env¡o de almacn, puede cambiar el campo Aviso de env¡o a Parcial en el pedido de venta n£mero %3 o rellenar manualmente el documento de env¡o de almacn.';
      Text1100002@1100002 : TextConst 'ENU="The %1 does not exist. \Identification fields and values:\%1 = %2";ESP="%1 no existe. \Campos de identificaci¢n y valores:\%1 = %2"';
      AdjustDueDate@1100000 : Codeunit 10700;
      Text1100003@1100003 : TextConst 'ENU=%1 cannot be applied, since it is included in a bill group.;ESP=%1 no se puede liquidar, ya que est  incluido en una remesa.';
      Text1100004@1100004 : TextConst 'ENU=" Remove it from its bill group and try again.";ESP=" B¢rrelo de la remesa e intntelo de nuevo."';
      Text10700@1100001 : TextConst 'ENU=%1 cannot be different from 0 when %2 is %3;ESP=%1 no puede ser diferente de 0 cuando %2 es %3';
      Text252@1103355000 : TextConst 'ESP=Este documento de venta ya tiene un comprobante fiscal asignado.';
      Text253@1103355002 : TextConst 'ESP=La longitud de la numeracion indicada para comprobantes fiscales no es correcta, debe contar con %1 digitos.';

    PROCEDURE InitRecord@10();
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",SalesSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",SalesSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF ("No. Series" <> '') AND
               (SalesSetup."Invoice Nos." = SalesSetup."Posted Invoice Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            IF SalesSetup."Shipment on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
          END;
        "Document Type"::"Return Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF ("No. Series" <> '') AND
               (SalesSetup."Credit Memo Nos." = SalesSetup."Posted Credit Memo Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            IF SalesSetup."Return Receipt on Credit Memo" THEN
              NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote] THEN
        BEGIN
        "Shipment Date" := WORKDATE;
        "Order Date" := WORKDATE;
      END;
      IF "Document Type" = "Document Type"::"Return Order" THEN
        "Order Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Document Date" := WORKDATE;

      VALIDATE("Location Code",UserMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No."; // es0009

      Reserve := Reserve::Optional;

      IF InvtSetup.GET THEN
        VALIDATE("Outbound Whse. Handling Time",InvtSetup."Outbound Whse. Handling Time");

      "Responsibility Center" := UserMgt.GetRespCenter(0,"Responsibility Center");
    END;

    PROCEDURE AssistEdit@1(OldSalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesHeader2@1001 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        COPY(Rec);
        SalesSetup.GET;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldSalesHeader."No. Series","No. Series") THEN BEGIN
          IF ("Sell-to Customer No." = '') AND ("Sell-to Contact No." = '') THEN BEGIN
            HideCreditCheckDialogue := FALSE;
            CheckCreditMaxBeforeInsert;
            HideCreditCheckDialogue := TRUE;
          END;
          NoSeriesMgt.SetSeries("No.");
          IF SalesHeader2.GET("Document Type","No.") THEN
            ERROR(Text051,LOWERCASE(FORMAT("Document Type")),"No.");
          Rec := SalesHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          SalesSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          SalesSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          BEGIN
            SalesSetup.TESTFIELD("Invoice Nos.");
            SalesSetup.TESTFIELD("Posted Invoice Nos.");
          END;
        "Document Type"::"Return Order":
          SalesSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            SalesSetup.TESTFIELD("Credit Memo Nos.");
            SalesSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          SalesSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(SalesSetup."Quote Nos.");
        "Document Type"::Order:
          EXIT(SalesSetup."Order Nos.");
        "Document Type"::Invoice:
          EXIT(SalesSetup."Invoice Nos.");
        "Document Type"::"Return Order":
          EXIT(SalesSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
          EXIT(SalesSetup."Credit Memo Nos.");
        "Document Type"::"Blanket Order":
          EXIT(SalesSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(SalesSetup."Posted Credit Memo Nos.");
      EXIT(SalesSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text045,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      SalesPost.TestDeleteHeader(
        Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
        SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
      IF SalesShptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text008 +
             Text009 +
             Text010,TRUE,
             SalesShptHeader."No.")
        THEN
          EXIT;
      IF SalesInvHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text011 +
             Text012 +
             Text010,TRUE,
             SalesInvHeader."No.")
        THEN
          EXIT;
      IF SalesCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text013 +
             Text014 +
             Text010,TRUE,
             SalesCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text029 +
             Text030 +
             Text010,TRUE,
             ReturnRcptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(
             Text053 +
             Text054 +
             Text010,TRUE,
             SalesInvHeaderPrepmt.TABLENAME,
             SalesInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(
             Text055 +
             Text056 +
             Text010,TRUE,
             SalesCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCust@2(CustNo@1000 : Code[20]);
    BEGIN
      IF NOT (("Document Type" = "Document Type"::Quote) AND (CustNo = '')) THEN BEGIN
        IF CustNo <> Cust."No." THEN
          Cust.GET(CustNo);
      END ELSE
        CLEAR(Cust);
    END;

    PROCEDURE SalesLinesExist@3() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      EXIT(SalesLine.FINDFIRST);
    END;

    PROCEDURE RecreateSalesLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      SalesLineTmp@1001 : TEMPORARY Record 37;
      ItemChargeAssgntSales@1004 : Record 5809;
      TempItemChargeAssgntSales@1003 : TEMPORARY Record 5809;
      TempInteger@1006 : TEMPORARY Record 2000000026;
      ChangeLogMgt@1008 : Codeunit 423;
      RecRef@1007 : RecordRef;
      xRecRef@1005 : RecordRef;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      IF SalesLinesExist THEN BEGIN
        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text015 +
              Text004,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          DocDim.LOCKTABLE;
          SalesLine.LOCKTABLE;
          ItemChargeAssgntSales.LOCKTABLE;
          ReservEntry.LOCKTABLE;
          xRecRef.GETTABLE(xRec);
          MODIFY;
          RecRef.GETTABLE(Rec);

          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type","Document Type");
          SalesLine.SETRANGE("Document No.","No.");
          IF SalesLine.FINDSET THEN BEGIN
            TempReservEntry.DELETEALL;
            REPEAT
              SalesLine.TESTFIELD("Job No.",'');
              SalesLine.TESTFIELD("Job Contract Entry No.",0);
              SalesLine.TESTFIELD("Quantity Shipped",0);
              SalesLine.TESTFIELD("Quantity Invoiced",0);
              SalesLine.TESTFIELD("Return Qty. Received",0);
              SalesLine.TESTFIELD("Shipment No.",'');
              SalesLine.TESTFIELD("Return Receipt No.",'');
              SalesLine.TESTFIELD("Blanket Order No.",'');
              SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
              SalesLineTmp := SalesLine;
              IF SalesLine.Nonstock THEN BEGIN
                SalesLine.Nonstock := FALSE;
                SalesLine.MODIFY;
              END;
              SalesLineTmp.INSERT;
              RecreateReservEntry(SalesLine,0,TRUE);
              RecreateReqLine(SalesLine,0,TRUE);
            UNTIL SalesLine.NEXT = 0;

            IF "Location Code" <> xRec."Location Code" THEN
              IF NOT TempReservEntry.ISEMPTY THEN
                ERROR(Text047,FIELDCAPTION("Location Code"));

            ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntSales.SETRANGE("Document No.","No.");
            IF ItemChargeAssgntSales.FINDSET THEN BEGIN
              REPEAT
                TempItemChargeAssgntSales.INIT;
                TempItemChargeAssgntSales := ItemChargeAssgntSales;
                TempItemChargeAssgntSales.INSERT;
              UNTIL ItemChargeAssgntSales.NEXT = 0;
              ItemChargeAssgntSales.DELETEALL;
            END;

            SalesLine.DELETEALL(TRUE);
            SalesLine.INIT;
            SalesLine."Line No." := 0;
            SalesLineTmp.FINDSET;
            ExtendedTextAdded := FALSE;
            SalesLine.BlockDynamicTracking(TRUE);
            REPEAT
              IF SalesLineTmp."Attached to Line No." = 0 THEN BEGIN
                SalesLine.INIT;
                SalesLine."Line No." := SalesLine."Line No." + 10000;
                SalesLine.VALIDATE(Type,SalesLineTmp.Type);
                IF SalesLineTmp."No." = '' THEN BEGIN
                  SalesLine.VALIDATE(Description,SalesLineTmp.Description);
                  SalesLine.VALIDATE("Description 2",SalesLineTmp."Description 2");
                END ELSE BEGIN
                  SalesLine.VALIDATE("No.",SalesLineTmp."No.");
                  IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                    SalesLine.VALIDATE("Unit of Measure Code",SalesLineTmp."Unit of Measure Code");
                    SalesLine.VALIDATE("Variant Code",SalesLineTmp."Variant Code");
                    IF SalesLineTmp.Quantity <> 0 THEN
                      SalesLine.VALIDATE(Quantity,SalesLineTmp.Quantity);
                    SalesLine."Purchase Order No." := SalesLineTmp."Purchase Order No.";
                    SalesLine."Purch. Order Line No." := SalesLineTmp."Purch. Order Line No.";
                    SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
                  END;
                END;

                SalesLine.INSERT;
                ExtendedTextAdded := FALSE;

                IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
                  ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",SalesLineTmp."Document Type");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",SalesLineTmp."Document No.");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",SalesLineTmp."Line No.");
                  IF TempItemChargeAssgntSales.FINDSET THEN BEGIN
                    REPEAT
                      IF NOT TempItemChargeAssgntSales.MARK THEN BEGIN
                        TempItemChargeAssgntSales."Applies-to Doc. Line No." := SalesLine."Line No.";
                        TempItemChargeAssgntSales.Description := SalesLine.Description;
                        TempItemChargeAssgntSales.MODIFY;
                        TempItemChargeAssgntSales.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntSales.NEXT = 0;
                  END;
                END;
                IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := SalesLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
                  TransferExtendedText.InsertSalesExtText(SalesLine);
                  SalesLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
              RecreateReservEntry(SalesLineTmp,SalesLine."Line No.",FALSE);
              RecreateReqLine(SalesLineTmp,SalesLine."Line No.",FALSE);
              SynchronizeForReservations(SalesLine,SalesLineTmp);
            UNTIL SalesLineTmp.NEXT = 0;

            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            SalesLineTmp.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
            IF SalesLineTmp.FINDSET THEN
              REPEAT
                TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLineTmp."Line No.");
                IF TempItemChargeAssgntSales.FINDSET THEN BEGIN
                  REPEAT
                    TempInteger.FINDFIRST;
                    ItemChargeAssgntSales.INIT;
                    ItemChargeAssgntSales := TempItemChargeAssgntSales;
                    ItemChargeAssgntSales."Document Line No." := TempInteger.Number;
                    ItemChargeAssgntSales.VALIDATE("Unit Cost",0);
                    ItemChargeAssgntSales.INSERT;
                  UNTIL TempItemChargeAssgntSales.NEXT = 0;
                  TempInteger.DELETE;
                END;
              UNTIL SalesLineTmp.NEXT = 0;

            SalesLineTmp.SETRANGE(Type);
            SalesLineTmp.DELETEALL;
            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            TempItemChargeAssgntSales.DELETEALL;
          END;
          ChangeLogMgt.LogModification(RecRef,xRecRef);
        END ELSE
          ERROR(
            Text017,ChangedFieldName);
      END;
      SalesLine.BlockDynamicTracking(FALSE);
    END;

    PROCEDURE MessageIfSalesLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF SalesLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text018 +
          Text019,
          ChangedFieldName);
    END;

    PROCEDURE PriceMessageIfSalesLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF SalesLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text018 +
          Text020,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]) AND
           ("Posting Date" = 0D)
        THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := "Posting Date";

        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text021,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE UpdateSalesLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      JobTransferLine@1004 : Codeunit 1004;
      ChangeLogMgt@1006 : Codeunit 423;
      RecRef@1005 : RecordRef;
      xRecRef@1003 : RecordRef;
      Question@1002 : Text[250];
    BEGIN
      IF NOT SalesLinesExist THEN
        EXIT;

      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(
            Text031 +
            Text032,ChangedFieldName);
        IF GUIALLOWED THEN
          IF DIALOG.CONFIRM(Question,TRUE) THEN
            CASE ChangedFieldName OF
              FIELDCAPTION("Shipment Date"),
              FIELDCAPTION("Shipping Agent Code"),
              FIELDCAPTION("Shipping Agent Service Code"),
              FIELDCAPTION("Shipping Time"),
              FIELDCAPTION("Requested Delivery Date"),
              FIELDCAPTION("Promised Delivery Date"),
              FIELDCAPTION("Outbound Whse. Handling Time"):
                ConfirmResvDateConflict;
            END
          ELSE
            EXIT;
      END;

      DocDim.LOCKTABLE;
      SalesLine.LOCKTABLE;
      xRecRef.GETTABLE(xRec);
      MODIFY;
      RecRef.GETTABLE(Rec);
      ChangeLogMgt.LogModification(RecRef,xRecRef);

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          xRecRef.GETTABLE(SalesLine);
          CASE ChangedFieldName OF
            FIELDCAPTION("Shipment Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipment Date","Shipment Date");
            FIELDCAPTION("Currency Factor"):
              IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                SalesLine.VALIDATE("Unit Price");
                SalesLine.VALIDATE("Unit Cost (LCY)");
                IF SalesLine."Job No." <> '' THEN
                  JobTransferLine.FromSalesHeaderToPlanningLine(SalesLine,Rec."Currency Code",Rec."Currency Factor");
              END;
            FIELDCAPTION("Transaction Type"):
              SalesLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDCAPTION("Transport Method"):
              SalesLine.VALIDATE("Transport Method","Transport Method");
            FIELDCAPTION("Exit Point"):
              SalesLine.VALIDATE("Exit Point","Exit Point");
            FIELDCAPTION(Area):
              SalesLine.VALIDATE(Area,Area);
            FIELDCAPTION("Transaction Specification"):
              SalesLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDCAPTION("Shipping Agent Code"):
              SalesLine.VALIDATE("Shipping Agent Code","Shipping Agent Code");
            FIELDCAPTION("Shipping Agent Service Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
            FIELDCAPTION("Shipping Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Time","Shipping Time");
            FIELDCAPTION("Prepayment %"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDCAPTION("Requested Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Requested Delivery Date","Requested Delivery Date");
            FIELDCAPTION("Promised Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Promised Delivery Date","Promised Delivery Date");
            FIELDCAPTION("Outbound Whse. Handling Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
          END;
          SalesLineReserve.AssignForPlanning(SalesLine);
          SalesLine.MODIFY(TRUE);
          RecRef.GETTABLE(SalesLine);
          ChangeLogMgt.LogModification(RecRef,xRecRef);
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE ConfirmResvDateConflict@41();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForSalesHeader(Rec) THEN
        IF NOT CONFIRM(Text063 + Text010,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetDefaultDim(
        TableID,No,SourceCodeSetup.Sales,
        "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF "No." <> '' THEN
        DimMgt.UpdateDocDefaultDim(
          DATABASE::"Sales Header","Document Type","No.",0,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      ChangeLogMgt@1004 : Codeunit 423;
      RecRef@1003 : RecordRef;
      xRecRef@1002 : RecordRef;
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      IF "No." <> '' THEN BEGIN
        DimMgt.SaveDocDim(
          DATABASE::"Sales Header","Document Type","No.",0,FieldNumber,ShortcutDimCode);
        xRecRef.GETTABLE(xRec);
        MODIFY;
        RecRef.GETTABLE(Rec);
        ChangeLogMgt.LogModification(RecRef,xRecRef);
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShippedSalesLinesExist@22() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Quantity Shipped",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    PROCEDURE ReturnReceiptExist@5800() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Return Qty. Received",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE DeleteSalesLines@20();
    BEGIN
      IF SalesLine.FINDSET THEN BEGIN
        HandleItemTrackingDeletion;
        REPEAT
          SalesLine.SuspendStatusCheck(TRUE);
          SalesLine.DELETE(TRUE);
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE HandleItemTrackingDeletion@36();
    VAR
      ReservEntry2@1000 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype","Document Type");
        SETRANGE("Source ID","No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETFILTER("Item Tracking",'> %1',"Item Tracking"::None);
        IF ISEMPTY THEN
          EXIT;

        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed := CONFIRM(Text052,FALSE,LOWERCASE(FORMAT("Document Type")),"No.");

        IF NOT Confirmed THEN
          ERROR('');

        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntSalesFilter@17(VAR TempItemChargeAssgntSales@1000 : Record 5809);
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
    END;

    PROCEDURE CheckCustomerCreated@18(Prompt@1000 : Boolean) : Boolean;
    VAR
      Cont@1001 : Record 5050;
    BEGIN
      IF ("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> '') THEN
        EXIT(TRUE);

      IF Prompt THEN
        IF NOT CONFIRM(Text035,TRUE) THEN
          EXIT(FALSE);

      IF "Sell-to Customer No." = '' THEN BEGIN
        TESTFIELD("Sell-to Contact No.");
        TESTFIELD("Sell-to Customer Template Code");
        Cont.GET("Sell-to Contact No.");
        Cont.CreateCustomer("Sell-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      IF "Bill-to Customer No." = '' THEN BEGIN
        TESTFIELD("Bill-to Contact No.");
        TESTFIELD("Bill-to Customer Template Code");
        Cont.GET("Bill-to Contact No.");
        Cont.CreateCustomer("Bill-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      EXIT(("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> ''));
    END;

    PROCEDURE RecreateReservEntry@21(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    BEGIN
      IF ToTemp THEN BEGIN
        CLEAR(ReservEntry);
        ReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        ReservEntry.SETRANGE("Source ID",OldSalesLine."Document No.");
        ReservEntry.SETRANGE("Source Ref. No.",OldSalesLine."Line No.");
        ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        ReservEntry.SETRANGE("Source Subtype",OldSalesLine."Document Type");
        IF ReservEntry.FINDSET THEN
          REPEAT
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
          UNTIL ReservEntry.NEXT = 0;
        ReservEntry.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReservEntry);
        TempReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        TempReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        TempReservEntry.SETRANGE("Source Subtype",OldSalesLine."Document Type");
        TempReservEntry.SETRANGE("Source ID",OldSalesLine."Document No.");
        TempReservEntry.SETRANGE("Source Ref. No.",OldSalesLine."Line No.");
        IF TempReservEntry.FINDSET THEN
          REPEAT
            ReservEntry := TempReservEntry;
            ReservEntry."Source Ref. No." := NewSourceRefNo;
            IF NOT(ReservEntry.INSERT) THEN;
          UNTIL TempReservEntry.NEXT = 0;
        TempReservEntry.DELETEALL;
      END;
    END;

    PROCEDURE RecreateReqLine@33(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    VAR
      ReqLine@1003 : Record 246;
    BEGIN
      IF ToTemp THEN BEGIN
        ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        ReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        ReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF ReqLine.FINDSET THEN
          REPEAT
            TempReqLine := ReqLine;
            TempReqLine.INSERT;
          UNTIL ReqLine.NEXT = 0;
        ReqLine.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReqLine);
        TempReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        TempReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        TempReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF TempReqLine.FINDSET THEN
          REPEAT
            ReqLine := TempReqLine;
            ReqLine."Order Promising Line ID" := NewSourceRefNo;
            ReqLine.INSERT;
          UNTIL TempReqLine.NEXT = 0;
        TempReqLine.DELETEALL;
      END;
    END;

    PROCEDURE UpdateSellToCont@24(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1004 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Sell-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Sell-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Sell-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Sell-to Contact No." := '';
        END;
        "Sell-to Contact" := Cust.Contact;
      END;
    END;

    PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Bill-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Bill-to Contact No." := '';
        END;
        "Bill-to Contact" := Cust.Contact;
      END;
    END;

    PROCEDURE UpdateSellToCust@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Customer@1006 : Record 18;
      Cont@1005 : Record 5050;
      CustTemplate@1004 : Record 5105;
      ContComp@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN
        "Sell-to Contact No." := Cont."No."
      ELSE BEGIN
        "Sell-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Sell-to Customer No." <> '') AND
           ("Sell-to Customer No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Sell-to Customer No.")
        ELSE IF "Sell-to Customer No." = '' THEN BEGIN
            SkipSellToContact := TRUE;
            VALIDATE("Sell-to Customer No.",ContBusinessRelation."No.");
            SkipSellToContact := FALSE;
          END;
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          Cont.TESTFIELD("Company No.");
          ContComp.GET(Cont."Company No.");
          "Sell-to Customer Name" := ContComp."Company Name";
          "Sell-to Customer Name 2" := ContComp."Name 2";
          "Ship-to Name" := ContComp."Company Name";
          "Ship-to Name 2" := ContComp."Name 2";
          "Ship-to Address" := ContComp.Address;
          "Ship-to Address 2" := ContComp."Address 2";
          "Ship-to City" := ContComp.City;
          "Ship-to Post Code" := ContComp."Post Code";
          "Ship-to County" := ContComp.County;
          VALIDATE("Ship-to Country/Region Code",ContComp."Country/Region Code");
          IF ("Sell-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Sell-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;

      IF Cont.Type = Cont.Type::Person THEN
        "Sell-to Contact" := Cont.Name
      ELSE
        IF Customer.GET("Sell-to Customer No.") THEN
          "Sell-to Contact" := Customer.Contact
        ELSE
          "Sell-to Contact" := '';

      IF "Document Type" = "Document Type"::Quote THEN BEGIN
        IF Customer.GET("Sell-to Customer No.") OR Customer.GET(ContBusinessRelation."No.") THEN BEGIN
          IF Customer."Copy Sell-to Addr. to Qte From" = Customer."Copy Sell-to Addr. to Qte From"::Company THEN BEGIN
            Cont.TESTFIELD("Company No.");
            Cont.GET(Cont."Company No.");
          END;
        END ELSE BEGIN
          Cont.TESTFIELD("Company No.");
          Cont.GET(Cont."Company No.");
        END;
        "Sell-to Address" := Cont.Address;
        "Sell-to Address 2" := Cont."Address 2";
        "Sell-to City" := Cont.City;
        "Sell-to Post Code" := Cont."Post Code";
        "Sell-to County" := Cont.County;
        "Sell-to Country/Region Code" := Cont."Country/Region Code";
      END;
      IF ("Sell-to Customer No." = "Bill-to Customer No.") OR
         ("Bill-to Customer No." = '')
      THEN
        VALIDATE("Bill-to Contact No.","Sell-to Contact No.");
    END;

    PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
      CustTemplate@1002 : Record 5105;
      ContComp@1001 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Bill-to Contact" := Cont.Name
        ELSE
          IF Cust.GET("Bill-to Customer No.") THEN
            "Bill-to Contact" := Cust.Contact
          ELSE
            "Bill-to Contact" := '';
      END ELSE BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Bill-to Customer No." = '' THEN BEGIN
          SkipBillToContact := TRUE;
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.");
          SkipBillToContact := FALSE;
          "Bill-to Customer Template Code" := '';
        END ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          Cont.TESTFIELD("Company No.");
          ContComp.GET(Cont."Company No.");
          "Bill-to Name" := ContComp."Company Name";
          "Bill-to Name 2" := ContComp."Name 2";
          "Bill-to Address" := ContComp.Address;
          "Bill-to Address 2" := ContComp."Address 2";
          "Bill-to City" := ContComp.City;
          "Bill-to Post Code" := ContComp."Post Code";
          "Bill-to County" := ContComp.County;
          "Bill-to Country/Region Code" := ContComp."Country/Region Code";
          "VAT Registration No." := ContComp."VAT Registration No.";
          VALIDATE("Currency Code",ContComp."Currency Code");
          "Language Code" := ContComp."Language Code";
          IF ("Bill-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Bill-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;
    END;

    PROCEDURE GetShippingTime@23(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      IF ShippingAgentService.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
        "Shipping Time" := ShippingAgentService."Shipping Time"
      ELSE BEGIN
        GetCust("Sell-to Customer No.");
        "Shipping Time" := Cust."Shipping Time"
      END;
      IF NOT (CalledByFieldNo IN [FIELDNO("Shipping Agent Code"),FIELDNO("Shipping Agent Service Code")]) THEN
        VALIDATE("Shipping Time");
    END;

    PROCEDURE CheckCreditMaxBeforeInsert@28();
    VAR
      SalesHeader@1001 : Record 36;
      ContBusinessRelation@1002 : Record 5054;
      Cont@1003 : Record 5050;
      CustCheckCreditLimit@1000 : Codeunit 312;
    BEGIN
      IF HideCreditCheckDialogue THEN
        EXIT;
      IF GETFILTER("Sell-to Customer No.") <> '' THEN BEGIN
        IF GETRANGEMIN("Sell-to Customer No.") = GETRANGEMAX("Sell-to Customer No.") THEN BEGIN
          Cust.GET(GETRANGEMIN("Sell-to Customer No."));
          IF Cust."Bill-to Customer No." <> '' THEN
            SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
          ELSE
            SalesHeader."Bill-to Customer No." := Cust."No.";
          CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
        END
      END ELSE
        IF GETFILTER("Sell-to Contact No.") <> '' THEN
          IF GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") THEN BEGIN
            Cont.GET(GETRANGEMIN("Sell-to Contact No."));
            ContBusinessRelation.RESET;
            ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
            ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
            ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
            IF ContBusinessRelation.FINDFIRST THEN BEGIN
              Cust.GET(ContBusinessRelation."No.");
              IF Cust."Bill-to Customer No." <> '' THEN
                SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
              ELSE
                SalesHeader."Bill-to Customer No." := Cust."No.";
              CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
            END;
          END;
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Order");
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt. Put-away / Pick",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE CreateTodo@30();
    VAR
      TempTodo@1000 : TEMPORARY Record 5080;
    BEGIN
      TESTFIELD("Sell-to Contact No.");
      TempTodo.CreateToDoFromSalesHeader(Rec);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@31();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          "Ship-to Name" := Location.Name;
          "Ship-to Name 2" := Location."Name 2";
          "Ship-to Address" := Location.Address;
          "Ship-to Address 2" := Location."Address 2";
          "Ship-to City" := Location.City;
          "Ship-to Post Code" := Location."Post Code";
          "Ship-to County" := Location.County;
          "Ship-to Country/Region Code" := Location."Country/Region Code";
          "Ship-to Contact" := Location.Contact;
        END ELSE BEGIN
          CompanyInfo.GET;
          "Ship-to Code" := '';
          "Ship-to Name" := CompanyInfo."Ship-to Name";
          "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
          "Ship-to Address" := CompanyInfo."Ship-to Address";
          "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
          "Ship-to City" := CompanyInfo."Ship-to City";
          "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
          "Ship-to County" := CompanyInfo."Ship-to County";
          "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
          "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        END;
        "VAT Country/Region Code" := "Sell-to Country/Region Code";
      END;
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      DocDim@1000 : Record 357;
      DocDims@1001 : Form 546;
    BEGIN
      DocDim.SETRANGE("Table ID",DATABASE::"Sales Header");
      DocDim.SETRANGE("Document Type","Document Type");
      DocDim.SETRANGE("Document No.","No.");
      DocDim.SETRANGE("Line No.",0);
      DocDims.SETTABLEVIEW(DocDim);
      DocDims.RUNMODAL;
      GET("Document Type","No.");
    END;

    PROCEDURE CheckLocation@34(ShowError@1002 : Boolean) : Boolean;
    VAR
      SalesLine@1000 : Record 37;
      SalesLine2@1001 : Record 37;
      CheckItemAvail@1003 : Form 342;
    BEGIN
      IF NOT ("Shipping Advice" = "Shipping Advice"::Complete) THEN
        EXIT(FALSE);

      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.FINDSET THEN BEGIN
        SalesLine2.COPYFILTERS(SalesLine);
        SalesLine2.SETCURRENTKEY("Document Type","Document No.","Location Code");
        SalesLine2.SETFILTER("Location Code",'<> %1',SalesLine."Location Code");
        IF SalesLine2.FINDFIRST THEN BEGIN
          IF ShowError THEN
            ERROR(Text050,FIELDCAPTION("Shipping Advice"),"Shipping Advice","No.",SalesLine.Type);
          EXIT(TRUE);
        END;
        REPEAT
          IF CheckItemAvail.SalesLineShowWarning(SalesLine) THEN BEGIN
            IF ShowError THEN
              ERROR(Text064,SalesLine."No.",SalesLine."Location Code",SalesLine."Document No.");
            EXIT(TRUE);
          END;
        UNTIL SalesLine.NEXT = 0
      END;
    END;

    PROCEDURE SetAmountToApply@35(AppliesToDocNo@1000 : Code[20];CustomerNo@1001 : Code[20]);
    VAR
      CustLedgEntry@1002 : Record 21;
    BEGIN
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
      CustLedgEntry.SETRANGE("Customer No.","Sell-to Customer No.");
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF CustLedgEntry.FINDFIRST THEN BEGIN
        IF CustLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          CustLedgEntry.CALCFIELDS("Remaining Amount");
          CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
        END ELSE
          CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry."Accepted Payment Tolerance" := 0;
        CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
      END;
    END;

    PROCEDURE LookupAdjmtValueEntries@37(QtyType@1000 : 'General,Invoicing');
    VAR
      ItemLedgEntry@1004 : Record 32;
      SalesLine@1001 : Record 37;
      SalesShptLine@1005 : Record 111;
      ReturnRcptLine@1002 : Record 6661;
      TempValueEntry@1003 : TEMPORARY Record 5802;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      TempValueEntry.RESET;
      TempValueEntry.DELETEALL;

      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice:
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH SalesShptLine DO BEGIN
                    IF SalesLine."Shipment No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Shipment No.");
                      SETRANGE("Line No.",SalesLine."Shipment Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Order No.","Order Line No.");
                      SETRANGE("Order No.",SalesLine."Document No.");
                      SETRANGE("Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Qty. Shipped Not Invoiced",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH ReturnRcptLine DO BEGIN
                    IF SalesLine."Return Receipt No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Return Receipt No.");
                      SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Return Order No.","Return Order Line No.");
                      SETRANGE("Return Order No.",SalesLine."Document No.");
                      SETRANGE("Return Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
      END;
      FORM.RUNMODAL(0,TempValueEntry);
    END;

    PROCEDURE CreateTempAdjmtValueEntries@38(VAR TempValueEntry@1001 : TEMPORARY Record 5802;ItemLedgEntryNo@1000 : Integer);
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        IF FINDSET THEN
          REPEAT
            IF Adjustment THEN BEGIN
              TempValueEntry := ValueEntry;
              IF TempValueEntry.INSERT THEN;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetPstdDocLinesToRevere@39();
    VAR
      SalesPostedDocLines@1000 : Form 5850;
    BEGIN
      GetCust("Sell-to Customer No.");
      SalesPostedDocLines.SetToSalesHeader(Rec);
      SalesPostedDocLines.SETRECORD(Cust);
      SalesPostedDocLines.LOOKUPMODE := TRUE;
      IF SalesPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        SalesPostedDocLines.CopyLineToDoc;

      CLEAR(SalesPostedDocLines);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      SalesInvDisc@1000 : Codeunit 60;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Calc. Inv. Discount" THEN
        SalesInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE Authorize@50();
    VAR
      TransactionLogEntry@1001 : Record 829;
    BEGIN
      IF NOT PaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
        ERROR(Text069,FIELDCAPTION("Payment Method Code"));
      PaymentTransLogMgt.FindValidAuthorizationEntry("Document Type","No.",TransactionLogEntry);
      IF TransactionLogEntry."Entry No." = PaymentMgt.AuthorizeSalesDoc(Rec,0,TRUE) THEN
        ERROR(Text067,TransactionLogEntry."Document Type",TransactionLogEntry.Amount,TransactionLogEntry."Transaction Date-Time",
          TransactionLogEntry."Document No.");
      "Authorization Required" := TRUE;
      MODIFY;
    END;

    PROCEDURE Void@51();
    VAR
      TransactionLogEntry@1001 : Record 829;
      TransactionLogMgt@1002 : Codeunit 829;
    BEGIN
      IF NOT PaymentMgt.IsValidPaymentMethod(Rec."Payment Method Code") THEN
        ERROR(Text069,FIELDCAPTION("Payment Method Code"));
      CLEAR(PaymentMgt);
      PaymentMgt.CheckSalesDoc(Rec);
      IF TransactionLogMgt.FindValidAuthorizationEntry("Document Type","No.",TransactionLogEntry) THEN
        PaymentMgt.VoidSalesDoc(Rec,TransactionLogEntry)
      ELSE
        MESSAGE(Text068);
      "Authorization Required" := FALSE;
      MODIFY;
    END;

    PROCEDURE GetCreditcardNumber@43() : Text[20];
    VAR
      PaymentCreditCard@1001 : Record 827;
    BEGIN
      IF "Credit Card No." = '' THEN
        EXIT('');
      EXIT(PaymentCreditCard.GetCreditCardNumber("Credit Card No."));
    END;

    PROCEDURE SynchronizeForReservations@42(VAR NewSalesLine@1000 : Record 37;OldSalesLine@1001 : Record 37);
    BEGIN
      NewSalesLine.CALCFIELDS("Reserved Quantity");
      IF NewSalesLine."Reserved Quantity" = 0 THEN
        EXIT;
      IF NewSalesLine."Location Code" <> OldSalesLine."Location Code" THEN
        NewSalesLine.VALIDATE("Location Code",OldSalesLine."Location Code");
      IF NewSalesLine."Bin Code" <> OldSalesLine."Bin Code" THEN
        NewSalesLine.VALIDATE("Bin Code",OldSalesLine."Bin Code");
      IF NewSalesLine.MODIFY THEN;
    END;

    PROCEDURE UpdatePmtDiscDate@1140000();
    BEGIN
      IF "Payment Discount %" = 0 THEN
        IF NOT("Document Type" IN ["Document Type"::"Credit Memo", "Document Type"::"Return Order"]) THEN
          "Pmt. Discount Date" := "Due Date";
    END;

    PROCEDURE ValidatePaymentTerms@1100000();
    BEGIN
      GLSetup.GET;
      IF ("Document Type" <> "Document Type"::"Credit Memo") OR
          (GLSetup."Payment Discount Type" = GLSetup."Payment Discount Type"::"Calc. Pmt. Disc. on Lines")
      THEN
      IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
        PaymentTerms.GET("Payment Terms Code");
        "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
        AdjustDueDate.SalesAdjustDueDate("Due Date","Document Date",PaymentTerms.CalculateMaxDueDate("Document Date"),
      "Bill-to Customer No.");
        "Pmt. Discount Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
      END ELSE BEGIN
        "Due Date" := "Document Date";
        AdjustDueDate.SalesAdjustDueDate("Due Date","Document Date",31129999D,"Bill-to Customer No.");
        "Pmt. Discount Date" := "Document Date";
      END;
    END;

    PROCEDURE CheckPermisoAtennea@1000000000();
    VAR
      lcSeguridad@1000000000 : Codeunit 7009751;
    BEGIN
      // CheckPermisoAtennea

      IF "Reason Code" <> 'ATENNEA' THEN
        EXIT;

      lcSeguridad.TienePermiso('NAV-MOD-FRA', TRUE);
    END;

    BEGIN
    {
      // INCOMING

      $001 OnInsert, rellenar el campo usuario con el USERID para conocer que usuario creo la factura

      $002 Incrementar el Texto de registro a 80 caracteres

      $003 Se han agregado nuevos campos

          50000 Marca            Code20
          50001 Tipo de Clave    Code10 "Maestro de Claves".Clave
          50007 Fecha entrada    Date
          50008 Usuario          Code20 User."User ID"
          50009 Hotel            Code10 Hotel.Hotel

      $004 Se ha creado una nueva clave

          Campos : Marca
          KeyGroups : INCOMING
          MaintainSQLIndex : No

      $005 AJS 28.12.2006, Comprobantes fiscales
         He creado un campo para almacenar el grupo al que pertenece el cliente y otro para almacenar el numero de comprobante
         fiscal asignado

          7009700 Cod. Grupo NCF     Code10 "Grupo configuracion NCF".Codigo WHERE (Tipo grupo=CONST(Ventas))
          7009703 Comprobante Fiscal Code20

         En el OnValidate de [Bill-to Customer No.] comprobar que el cliente tiene asignado un grupo de configuracion de NCF y
         llamar a la validacion de [Cod. Grupo NCF]

      $006 AJS 18.02.2007, Comprobantes fiscales
         En el OnValidate de [Bill-to Customer No.] comprobar que la empresa [Company Info] tiene la marca que indica que
         aplica esta legislacion

      $007 AJS 12122013 Marco como obsoleto los campos Marca, Tipo de Clave y Fecha entrada. Tambien la clave [Marca].

      $Z008 AJS 21112014 Integracion Atennea Transfer, nuevos campos Traspasado, "Usuario Traspaso", "Fecha Traspaso",
                        "Hora Traspaso" y "Num Traspaso"
      $008 AJS 16032015 Las facturas con codigo auditoria ATENNEA solo las pueden modificar los usuarios autorizados

      <changelog>
        <add id="CF0001" dev="ATSINGH" feature="NAVCORS35947" date="2009-04-22" area="LIQUIDITY"
          releaseversion="LIQEM6.00.01">Adding this file here because Liquidity Date in Liquidity Journal depends
          on Due Date of Sales invoice in case of zero discount. So modifying the calculation of Due Date.
        </add>
        <change id="CF0002" dev="ATSINGH" feature="NAVCORS38284" date="2009-04-30" area="LIQUIDITY"
          baseversion="LIQEM6.00.01" releaseversion="LIQEM6.00.01"> Modify UpdatePmtDiscDate function to let the
          Credit Memo and Return Order(Due Date, Pmt. Discount date) behave differently.</change>
        <add id="es0001" dev="VGARCA" date="2004-08-27" area="COUNTIES" request="es-start-40"
        releaseversion="ES4.00">Counties (Provinces)</add>
        <add id="es0002" dev="VGARCA" date="2004-08-27" area="DUEDATE" request="es-start-40"
        releaseversion="ES4.00">Due Date Calculation</add>
        <add id="es0003" dev="VGARCA" date="2004-08-27" area="EQUIVCHRG" request="es-start-40"
        releaseversion="ES4.00">Equivalence Charge</add>
        <add id="es0004" dev="VGARCA" date="2004-08-27" area="PAYTERMS" request="es-start-40"
        releaseversion="ES4.00">Payment Terms &amp; Payment Methods</add>
        <add id="es0005" dev="VGARCA" date="2004-08-27" area="ROUNDING" request="es-start-40"
        releaseversion="ES4.00">Rounding</add>
        <add id="es0006" dev="VGARCA" date="2004-08-27" area="VATECCALC" request="es-start-40"
        releaseversion="ES4.00">VAT+EC % calculation</add>
        <add id="es0007" dev="VGARCA" date="2004-08-27" area="CARTERA" request="es-start-40"
        releaseversion="ES4.00">Cartera Add-On (Spanish)</add>
        <add id="es0008" dev="VGARCA" date="2005-06-20" area="CORRINV" feature="PS-SE-6265"
        releaseversion="ES4.00.A">Corrective Invoices</add>
        <change id="es0009" dev="VGARCA" date="2005-06-20" area="CORRINV" feature="PS-SE-8410"
        releaseversion="ES4.00.A" baseversion="ES4.00">Corrective Invoices</change>
        <change id="es0010" dev="VGARCA" date="2005-06-20" area="PAYTERMS" feature="PS-SE-2422"
        releaseversion="ES4.00.A" baseversion="ES4.00">Payment Terms &amp; Payment Methods</change>
        <change id="es0011" dev="VGARCA" date="2006-09-15" area="CARTERA" feature="NAVCORS4835"
        releaseversion="ES5.00" baseversion="ES4.00.A">Cannot create Credit Memo </change>
        <change id="es0012" dev="VGARCA" date="2006-10-15" area="DUEDATE" feature="PSCORS811"
        releaseversion="ES5.00" baseversion="ES5.00">Prepayment Due Date not updated </change>
        <change id="es0013" dev="VGARCA" date="2007-09-06" area="CARTERA" feature="NAVCORS13530"
        releaseversion="ES6.00" baseversion="ES5.00">Cannot created Credit Memo with apply to oldest method </change>
        <change id="es0014" dev="mnommens" date="2008-07-21" area="DUEDATE" feature="NAVCORS26513"
        releaseversion="ES6.00" baseversion="ES5.00">
        Prepayment Due Date field does not take the payment days and non-payment periods into account</change>
        <change id="es0015" dev="dakowalc" date="2009-01-26" area="ROUNDING" feature="NAVCORS31360"
        releaseversion="ES6.00.01" baseversion="ES6.00">ROUNDING - Prepayments fields not localized</change>
        <add id="es0016" dev="all-e" date="2009-04-10" area="PAYDISC" feature="NAVCORS36709"
        releaseversion="ES6.00.01">Prepayment discount is not being taken into account(Spanish Localization)</add>
        <add id="ES0017" dev="andersla" date="2009-06-10" area="COUNTIES" feature="NAVCORS40636"
        releaseversion="ES6.00.01">Country/Region Code field in the Customer / Vendor VAT Entries populates wrong value.</add>
      </changelog>
    }
    END.
  }
}
