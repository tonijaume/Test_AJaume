OBJECT Table 7010403 Contrato venta
{
  OBJECT-PROPERTIES
  {
    Date=27/11/14;
    Time=13:56:24;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               rPar.FINDFIRST;
               rPar.TESTFIELD("Serie contrato venta");
               rPar.TESTFIELD("Codigo Adulto");
               rPar.TESTFIELD("Codigo Ni¤o");

               GestNoSerie.InitSeries(rPar."Serie contrato venta", rPar."Serie contrato venta", TODAY,
                                     "N§ Contrato", rPar."Serie contrato venta");

               // ----  20.06.2002.  Modificado para rellenar el garaje con el garaje por defecto del usuario  ----

               IF Garaje = '' THEN BEGIN
                 rUsu.GET(USERID);
                 IF rUsu."Garaje por defecto" = '' THEN
                   ERROR(err3)
                 ELSE
                   VALIDATE(Garaje, rUsu."Garaje por defecto");
               END;

               // ----  FIN AJS 20.06.2002  ----

               rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, mes1, Cliente + '-'
                                      + Touroperador, STRSUBSTNO('%1', "Fecha inicio contrato") + '-' +
                                      STRSUBSTNO('%1', "Fecha final contrato"));
             END;

    OnModify=BEGIN
               // AJS --> Hay comprobar que el contrato no se este solapando con otros ya introducidos.
               //
               comprobar_solape(FALSE);
               Sincroniza;
             END;

    OnDelete=VAR
               lrMiniVeh@1100244000 : Record 7010407;
             BEGIN
               // AJS --> Hay que comprobar si este contrato tiene servicios asignados, en cuyo caso no
               //         dejar borrar.
               // AJS --> Si se deja borrar hay que borrar los precios y las zonas ligadas.
               //
               // Ingreso Facturado
               rCI.RESET; rCI.INIT;
               rCI.SETRANGE(Garaje       , Garaje);
               rCI.SETRANGE("N§ Contrato", "N§ Contrato");
               IF rCI.FINDFIRST THEN
                 ERROR(partes_confirmados);

               // Producci¢n ingreso
               CLEAR(rPI);
               rPI.SETRANGE(Garaje       , Garaje);
               rPI.SETRANGE("N§ Contrato", "N§ Contrato");
               IF rPI.FINDFIRST THEN
                 ERROR(partes_confirmados);

               rZon.RESET;
               rZon.SETRANGE(Garaje         , Garaje);
               rZon.SETRANGE("N§ Contrato"  , "N§ Contrato");
               rZon.SETRANGE("Tipo contrato", rZon."Tipo contrato"::Venta);
               IF rZon.FINDFIRST THEN
                 rZon.DELETEALL;
               rPre.RESET;
               rPre.SETRANGE(Garaje       , Garaje);
               rPre.SETRANGE("N§ Contrato", "N§ Contrato");
               IF rPre.FINDSET(TRUE) THEN
                 rPre.DELETEALL(TRUE);
               rComen.RESET; rComen.INIT;
               rComen.SETRANGE(Garaje         , Garaje);
               rComen.SETRANGE("N§ Contrato"  , "N§ Contrato");
               rComen.SETRANGE("Tipo contrato", rComen."Tipo contrato"::Venta);
               IF rComen.FINDSET(TRUE) THEN
                 rComen.DELETEALL(TRUE);

               // BORRA LAS LINEAS DE MINIMOS POR VEHICULO
               lrMiniVeh.RESET;
               lrMiniVeh.SETRANGE ("N§ Contrato"   , "N§ Contrato");
               lrMiniVeh.SETRANGE ("Tipo Contrato" , lrMiniVeh."Tipo Contrato"::Venta);
               IF lrMiniVeh.FINDSET(TRUE) THEN
                 lrMiniVeh.DELETEALL(TRUE);


               rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, mes2,
                                      Cliente + '-' + Touroperador,
                                      FORMAT("Fecha inicio contrato") + '-' + FORMAT("Fecha final contrato"));
             END;

    CaptionML=ESP=Contrato venta;
    LookupFormID=Form7010418;
    DrillDownFormID=Form7010418;
  }
  FIELDS
  {
    { 1   ;   ;Garaje              ;Code10        ;TableRelation=Garaje.Garaje;
                                                   OnValidate=VAR
                                                                cFunBas@1100244000 : Codeunit 7010310;
                                                              BEGIN
                                                                IF Garaje <> xRec.Garaje THEN BEGIN

                                                                  // AJS 05.02.2004
                                                                  // Vamos a dejar que pongan el garaje todos, de esta manera al buscar los precios habra que chequear que exista
                                                                  // para el garaje del servicio o para el garaje TODOS
                                                                  //cFunBas.TestGarajeTodos(Garaje);
                                                                  cFunBas.TestRestringido(Garaje);
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta, FIELDCAPTION(Garaje),
                                                                                         xRec.Garaje, Garaje);
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Garaje;
                                                   SQL Data Type=Varchar;
                                                   Description=PK, FK Garaje }
    { 3   ;   ;N§ Contrato         ;Code10        ;CaptionML=ESP=N§ Contrato;
                                                   Description=PK;
                                                   Editable=No }
    { 5   ;   ;Fecha firma contrato;Date          ;OnValidate=BEGIN
                                                                IF "Fecha firma contrato" <> xRec."Fecha firma contrato" THEN BEGIN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Fecha firma contrato"),
                                                                                         FORMAT(xRec."Fecha firma contrato"), FORMAT("Fecha firma contrato"));
                                                                  // Recalculamos los precios de contrato
                                                                  //
                                                                  rPre.RESET;
                                                                  rPre.SETRANGE(Garaje       , Garaje);
                                                                  rPre.SETRANGE("N§ Contrato", "N§ Contrato");
                                                                  IF rPre.FINDSET(TRUE) THEN BEGIN
                                                                    REPEAT
                                                                      rPre.VALIDATE("Cod. Divisa", "Cod. Divisa");
                                                                      rPre.MODIFY;
                                                                    UNTIL rPre.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Fecha firma contrato }
    { 7   ;   ;Fecha inicio contrato;Date         ;OnValidate=BEGIN
                                                                IF "Fecha inicio contrato" <> xRec."Fecha inicio contrato" THEN BEGIN
                                                                  IF "Fecha inicio contrato" < "Fecha firma contrato" THEN
                                                                    ERROR(err4);
                                                                  IF "Fecha final contrato" <> 0D THEN BEGIN
                                                                    IF "Fecha final contrato" < "Fecha inicio contrato" THEN
                                                                      ERROR(err2);
                                                                  END;
                                                                  TestCoherencia();
                                                                  Confirmado := FALSE;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Fecha inicio contrato"), FORMAT(xRec."Fecha inicio contrato"),
                                                                                         FORMAT("Fecha inicio contrato"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Fecha inicio contrato;
                                                   NotBlank=Yes }
    { 9   ;   ;Fecha final contrato;Date          ;OnValidate=BEGIN
                                                                IF "Fecha final contrato" <> xRec."Fecha final contrato" THEN BEGIN
                                                                  IF "Fecha inicio contrato" <> 0D THEN BEGIN
                                                                    IF "Fecha final contrato" < "Fecha inicio contrato" THEN
                                                                      ERROR(err2);
                                                                  END;
                                                                  TestCoherencia();
                                                                  Confirmado := FALSE;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Fecha final contrato"),
                                                                                         FORMAT(xRec."Fecha final contrato"), FORMAT("Fecha final contrato"));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Fecha final contrato;
                                                   NotBlank=Yes }
    { 11  ;   ;Cliente             ;Code20        ;TableRelation=Customer.No.;
                                                   OnValidate=BEGIN
                                                                IF Cliente <> xRec.Cliente THEN BEGIN

                                                                  // ----  Comprobar la composicion Cliente - TTOO  ----

                                                                  IF Touroperador <> '' THEN BEGIN
                                                                    rCom.RESET;
                                                                    IF NOT rCom.GET(Cliente, Touroperador) THEN
                                                                      ERROR(err1, Cliente, Touroperador);
                                                                  END;

                                                                  // ----  AJS 12.11.2001  Comprobar que no haya contratos confirmados asociados porque si  ----
                                                                  // ----  es asi, no hay que dejar cambiar                                                 ----

                                                                  buscar_partes_confirmados(FALSE);

                                                                  // ----  FIN AJS 12.11.2001  ----

                                                                  // ----  Tomar los datos de facturacion del cliente  ----

                                                                  rCli.RESET;
                                                                  rCli.GET(Cliente);
                                                                  VALIDATE("Cod. Terminos Pago", rCli."Payment Terms Code");
                                                                  VALIDATE("Cod. Formas Pago", rCli."Payment Method Code");
                                                                  IF "Basado en contrato n§" ='' THEN
                                                                    VALIDATE("Cod. Divisa", rCli."Currency Code");

                                                                  Confirmado := FALSE;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION(Cliente), xRec.Cliente, Cliente);
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Cliente;
                                                   SQL Data Type=Varchar;
                                                   NotBlank=Yes;
                                                   Description=FK Cliente }
    { 13  ;   ;Touroperador        ;Code10        ;TableRelation=Cliente/TTOO.TTOO WHERE (Cliente=FIELD(Cliente));
                                                   OnValidate=BEGIN
                                                                IF Touroperador <> xRec.Touroperador THEN BEGIN
                                                                  IF Cliente <> '' THEN BEGIN
                                                                    rCom.RESET;
                                                                    IF NOT rCom.GET(Cliente, Touroperador) THEN
                                                                      ERROR(err1, Cliente, Touroperador);
                                                                  END;

                                                                  // ----  AJS 12.11.2001  Comprobar que no haya contratos confirmados asociados porque si  ----
                                                                  // ----  es asi, no hay que dejar cambiar                                                 ----

                                                                  buscar_partes_confirmados(FALSE);

                                                                  // ----  FIN AJS 12.11.2001  ----

                                                                  Confirmado := FALSE;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION(Touroperador), xRec.Touroperador, Touroperador);
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Touroperador;
                                                   SQL Data Type=Varchar;
                                                   NotBlank=Yes;
                                                   Description=FK Touroperador }
    { 15  ;   ;Grupo Registro IVA Producto;Code10 ;TableRelation="VAT Product Posting Group".Code;
                                                   OnValidate=BEGIN
                                                                IF "Grupo Registro IVA Producto" <> xRec."Grupo Registro IVA Producto" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Grupo Registro IVA Producto"),
                                                                                         xRec."Grupo Registro IVA Producto", "Grupo Registro IVA Producto");
                                                              END;

                                                   CaptionML=ESP=Grupo Registro IVA Producto;
                                                   Description=FK Grupo Registro IVA Producto }
    { 17  ;   ;Impuestos incluidos ;Boolean       ;OnValidate=BEGIN
                                                                buscar_partes_confirmados(FALSE);

                                                                IF "Impuestos incluidos" <> xRec."Impuestos incluidos" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Impuestos incluidos"),
                                                                                         FORMAT(xRec."Impuestos incluidos"), FORMAT("Impuestos incluidos"));
                                                              END;

                                                   CaptionML=ESP=Impuestos incluidos }
    { 19  ;   ;Cod. Terminos Pago  ;Code10        ;TableRelation="Payment Terms".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Terminos Pago" <> xRec."Cod. Terminos Pago" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Cod. Terminos Pago"), xRec."Cod. Terminos Pago", "Cod. Terminos Pago");
                                                              END;

                                                   CaptionML=ESP=Cod. Terminos Pago;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Terminos Pago }
    { 21  ;   ;Cod. Formas Pago    ;Code10        ;TableRelation="Payment Method".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Formas Pago" <> xRec."Cod. Formas Pago" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Cod. Formas Pago"), xRec."Cod. Formas Pago", "Cod. Formas Pago");
                                                              END;

                                                   CaptionML=ESP=Cod. Formas Pago;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Forma Pago }
    { 23  ;   ;Cod. Serie          ;Code10        ;TableRelation="No. Series".Code;
                                                   OnValidate=BEGIN
                                                                IF "Cod. Serie" <> xRec."Cod. Serie" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Cod. Serie"), xRec."Cod. Serie",
                                                                                         "Cod. Serie");
                                                              END;

                                                   CaptionML=ESP=Cod. Serie;
                                                   SQL Data Type=Varchar;
                                                   Description=FK N§ Serie }
    { 25  ;   ;Cod. Divisa         ;Code10        ;TableRelation=Currency.Code;
                                                   OnValidate=VAR
                                                                rCon@1100244000 : Record 7010403;
                                                              BEGIN
                                                                IF "Cod. Divisa" <> xRec."Cod. Divisa" THEN BEGIN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Cod. Divisa"), xRec."Cod. Divisa",
                                                                                         "Cod. Divisa");
                                                                  // Recalculamos los precios de contrato
                                                                  //
                                                                  rPre.RESET;
                                                                  rPre.SETRANGE(Garaje       , Garaje);
                                                                  rPre.SETRANGE("N§ Contrato", "N§ Contrato");
                                                                  IF rPre.FINDSET(TRUE) THEN BEGIN
                                                                    REPEAT
                                                                      rPre.VALIDATE("Cod. Divisa", "Cod. Divisa");
                                                                      rPre.MODIFY;
                                                                    UNTIL rPre.NEXT = 0;
                                                                  END;

                                                                  // Si hay contratos Text000 a este,  se les cambiar  tambien el codigo de divisa
                                                                  rCon.RESET;
                                                                  rCon.SETRANGE("Basado en contrato n§" , "N§ Contrato");
                                                                  rCon.MODIFYALL("Cod. Divisa" , "Cod. Divisa");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Cod. Divisa;
                                                   SQL Data Type=Varchar;
                                                   Description=FK Divisa }
    { 27  ;   ;Maletas sobre       ;Option        ;OnValidate=BEGIN
                                                                IF "Maletas sobre" <> xRec."Maletas sobre" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Maletas sobre"),
                                                                                         FORMAT(xRec."Maletas sobre"), FORMAT("Maletas sobre"));
                                                              END;

                                                   CaptionML=ESP=Maletas sobre;
                                                   OptionCaptionML=ESP=Facturados,Transportados;
                                                   OptionString=Facturados,Transportados }
    { 29  ;   ;Confirmado          ;Boolean       ;OnValidate=BEGIN
                                                                IF Confirmado THEN BEGIN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                           FIELDCAPTION(Confirmado), FORMAT(xRec.Confirmado),
                                                                                           FORMAT(Confirmado));
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Confirmado;
                                                   Editable=No }
    { 31  ;   ;Maletas exentas     ;Boolean       ;OnValidate=BEGIN
                                                                IF "Maletas exentas" <> xRec."Maletas exentas" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Maletas exentas"), FORMAT(xRec."Maletas exentas"),
                                                                                         FORMAT("Maletas exentas"));
                                                              END;

                                                   CaptionML=ESP=Maletas exentas }
    { 33  ;   ;Maletas incluidas   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Maletas incluidas" <> xRec."Maletas incluidas" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Maletas incluidas"), FORMAT(xRec."Maletas incluidas"),
                                                                                         FORMAT("Maletas incluidas"));
                                                              END;

                                                   CaptionML=ESP=Maletas incluidas }
    { 35  ;   ;Considerar maletas  ;Boolean       ;OnValidate=BEGIN
                                                                IF "Considerar maletas" <> xRec."Considerar maletas" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Considerar maletas"), FORMAT(xRec."Considerar maletas"),
                                                                                         FORMAT("Considerar maletas"));
                                                              END;

                                                   CaptionML=ESP=Considerar maletas }
    { 36  ;   ;Basado en contrato n§;Code10       ;TableRelation="Contrato venta"."N§ Contrato" WHERE (Basado en contrato n§=FILTER(=''));
                                                   OnValidate=VAR
                                                                lrCon@1100244000 : Record 7010403;
                                                              BEGIN
                                                                IF "Basado en contrato n§" = "N§ Contrato" THEN
                                                                  ERROR(err6);

                                                                // ----  Si el contrato tiene precios asociados no dejamos rellenar este campo porque no  ----
                                                                // ----  tiene sentido                                                                    ----

                                                                rPre.RESET;
                                                                rPre.SETRANGE(Garaje       , Garaje);
                                                                rPre.SETRANGE("N§ Contrato", "N§ Contrato");
                                                                IF rPre.FINDFIRST THEN
                                                                  ERROR(err8);

                                                                // Si el Garaje es distinto al del contrato asociado da un error
                                                                // Si se asocia a otro contrato, el codigo de divisa se copiar  de ese otro contrato

                                                                IF "Basado en contrato n§" <> '' THEN BEGIN
                                                                  lrCon.RESET;
                                                                  lrCon.SETRANGE ("N§ Contrato" , "Basado en contrato n§");
                                                                  IF lrCon.FINDFIRST THEN BEGIN
                                                                    IF lrCon.Garaje <> Garaje THEN
                                                                      ERROR(err7);
                                                                    VALIDATE("Cod. Divisa" , lrCon."Cod. Divisa");
                                                                  END;
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Basado en contrato n§"), xRec."Basado en contrato n§",
                                                                                         "Basado en contrato n§");
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Basado en contrato n§ }
    { 37  ;   ;Tiene Contratos Asociados;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Contrato venta" WHERE (Basado en contrato n§=FIELD(N§ Contrato)));
                                                   CaptionML=ESP=Tiene Contratos Asociados;
                                                   Editable=No }
    { 39  ;   ;Promociona ni¤os hasta minimo;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Promociona ni¤os hasta minimo" <> xRec."Promociona ni¤os hasta minimo" THEN
                                                                  rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                         FIELDCAPTION("Promociona ni¤os hasta minimo"), FORMAT(xRec."Promociona ni¤os hasta minimo"),
                                                                                         FORMAT("Promociona ni¤os hasta minimo"));
                                                              END;

                                                   CaptionML=ESP=Promociona ni¤os hasta minimo }
    { 40  ;   ;Minimos combinados  ;Boolean       ;OnValidate=BEGIN
                                                                rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                       FIELDCAPTION("Minimos combinados"), FORMAT(xRec."Minimos combinados"),
                                                                                       FORMAT("Minimos combinados"));
                                                              END;

                                                   CaptionML=ESP=Minimos combinados;
                                                   Description=Promociona los minimos de la zona m s alejada }
    { 41  ;   ;Contrato en PDF     ;Text150       ;OnLookup=BEGIN

                                                              wArchDialog.FileName    := "Contrato en PDF";
                                                              wArchDialog.Filter      := Text50000;
                                                              wArchDialog.DefaultExt  := Text50001;
                                                              wArchDialog.DialogTitle := Text50002;
                                                              wArchDialog.ShowOpen;
                                                              IF wArchDialog.FileName <> '' THEN
                                                                VALIDATE("Contrato en PDF", wArchDialog.FileName);
                                                            END;

                                                   CaptionML=ESP=Contrato en PDF;
                                                   Description=Ruta y Archivo del PDF del contrato }
    { 50  ;   ;Contrato Sincronizado;Boolean      ;CaptionML=ESP=Contrato Sincronizado;
                                                   Description=Inidca que el contrato se crea y mantiene desde otra empresa. No se puede editar aqui }
    { 51  ;   ;% Descuento         ;Decimal       ;OnValidate=BEGIN
                                                                IF ("% Descuento" < 0) OR ("% Descuento" >= 100) THEN
                                                                  ERROR(err9);

                                                                rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                       FIELDCAPTION("% Descuento"), FORMAT(xRec."% Descuento"),
                                                                                       FORMAT("% Descuento"));
                                                              END;

                                                   CaptionML=ESP=% Descuento;
                                                   Description=Descuento que se utilizar  como valor predeterminado en la factura }
    { 52  ;   ;Descuento sobre maletas;Boolean    ;OnValidate=BEGIN
                                                                rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                                                                       FIELDCAPTION("Descuento sobre maletas"), FORMAT(xRec."Descuento sobre maletas"),
                                                                                       FORMAT("Descuento sobre maletas"));
                                                              END;

                                                   CaptionML=ESP=Descuento sobre maletas;
                                                   Description=Indica si el descuento se aplica o no sobre las maletas. }
  }
  KEYS
  {
    {    ;Garaje,N§ Contrato                      ;Clustered=Yes }
    {    ;Cliente,Touroperador,Fecha inicio contrato,Fecha final contrato }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text50000@1103355003 : TextConst 'ESP=PDF *.PDF|*.PDF';
      Text50001@1103355004 : TextConst 'ESP=*.PDF';
      Text50002@1103355005 : TextConst 'ESP=Importar Reservas PDF';
      Text50003@1103355006 : TextConst 'ESP=Microsoft Common Dialog Control, version 6.0';
      Text50004@1103355007 : TextConst 'ESP=+1A';
      Text000@1100244029 : TextConst 'ESP=asociados';
      Text001@1100244030 : TextConst 'ESP=CONF-CONTV';
      Text002@1100244031 : TextConst 'ESP="Del N§ "';
      Text003@1100244032 : TextConst 'ESP="Al N§ "';
      Text004@1100244033 : TextConst 'ESP="Del C.Venta N§ "';
      Text005@1100244034 : TextConst 'ESP="Al C.Compra N§ "';
      rPar@1100244000 : Record 7010311;
      rCom@1100244001 : Record 7010313;
      rHist@1100244002 : Record 7010316;
      rZon@1100244003 : Record 7010404;
      rPre@1100244004 : Record 7010405;
      rTipo@1100244005 : Record 330;
      rComen@1100244006 : Record 7010406;
      rCI@1100244007 : Record 7010414;
      rPI@1103355000 : Record 7035392;
      rCli@1100244008 : Record 18;
      rUsu@1100244009 : Record 7010420;
      fSelecFecha@1100253001 : Form 7010457;
      GestNoSerie@1100244010 : Codeunit 396;
      Text006@1103350001 : TextConst 'ESP=Rellene %1';
      Text007@1103350002 : TextConst 'ESP=No se encuentra el Archvivo %1';
      err1@1100244011 : TextConst 'ESP=La composici¢n creada por %1-%2 no existe.';
      err2@1100244012 : TextConst 'ESP=La fecha de final de contrato no puede ser anterior a la de inicio';
      err3@1100244013 : TextConst 'ESP=Debe indicar un garaje al contrato';
      err4@1100244014 : TextConst 'ESP=La Fecha de inicio del contrato no puede ser anterior a la fecha de firma';
      err5@1100244015 : TextConst 'ESP=No se puede ejecutar esta funcion sobre un contrato no confirmado.';
      err6@1100244016 : TextConst 'ESP=Un Contrato No puede asociarse a s¡ mismo';
      err7@1100244017 : TextConst 'ESP=No se puede asociar con otro contrato que tenga distinto Garaje';
      err8@1100244018 : TextConst 'ESP=No se puede asociar un contrato cuando tiene precios definidos';
      mes1@1100244019 : TextConst 'ESP=INSERTAR';
      mes2@1100244020 : TextConst 'ESP=BORRAR';
      mes3@1100244021 : TextConst 'ESP=Se ha creado correctamente el contrato %1.';
      text1@1100244022 : TextConst 'ESP=Desea crear una copia del contrato actual %1.';
      text2@1100244023 : TextConst 'ESP=COPIA CONTRATO INCREMENTANDO PRECIOS';
      text3@1100244024 : TextConst 'ESP=Porcentaje:';
      text4@1100244025 : TextConst 'ESP=Copia a &venta,Copia a &compra';
      text5@1100244026 : TextConst 'ESP=Copia de Contrato';
      partes_confirmados@1100244027 : TextConst 'ESP=No se puede borrar un contrato asociado a partes ya confirmados.';
      no_cambio_parte_confirmado@1100244028 : TextConst 'ESP=No se puede realizar el cambio porque dejaria partes confirmados sin contrato';
      wArchDialog@1103350000 : OCX "{F9043C85-F6F2-101A-A3C9-08002B2F49FB}:'Microsoft Common Dialog Control, version 6.0'";
      Text008@1100253002 : TextConst 'ESP=Introduzca fechas destino del nuevo contrato';
      Text009@1100253003 : TextConst 'ESP=La fecha hasta debe ser posterior a la fecha desde.';
      err9@1103355001 : TextConst 'ESP=El porcentaje de descuento de estar entre 0 y 99.';
      Text010@1103355002 : TextConst 'ESP=No existe el usuario %1.';

    PROCEDURE comprobar_solape@3(FromConfirmar@1100244000 : Boolean);
    VAR
      rCon@1100244001 : Record 7010403;
      verror@1100244002 : Boolean;
      men1@1100244003 : TextConst 'ESP=La fecha de inicio del contrato no puede quedar en blanco';
      men2@1100244004 : TextConst 'ESP=La fecha de final del contrato no puede quedar en blanco';
      men3@1100244005 : TextConst 'ESP=El cliente del contrato no puede quedar en blanco';
      men4@1100244006 : TextConst 'ESP=El touroperador del contrato no puede quedar en blanco';
      men5@1100244007 : TextConst 'ESP=El Grupo Registro IVA Producto no puede quedar en blanco';
      men6@1100244008 : TextConst 'ESP=Los Terminos de Pago no pueden quedar en blanco';
      men7@1100244009 : TextConst 'ESP=La Forma de Pago no puede quedar en blanco';
      men8@1100244010 : TextConst 'ESP=El Codigo de Serie no puede quedar en blanco';
      men9@1100244011 : TextConst 'ESP=La fecha de inicio de este contrato se solapa con el contrato %1';
      men10@1100244012 : TextConst 'ESP=La fecha de final de este contrato se solapa con el contrato %1';
      men11@1100244013 : TextConst 'ESP=Este contrato solapa completamente el contrato %1';
      cFunBas@1100244014 : Codeunit 7010310;
      vHayRest@1100244015 : Boolean;
    BEGIN
      // comprobar_solape
      //
      // Funcion --> Comprueba que los campos obligatorios esten rellenados y que el contrato
      //             introducido no se solape con otros ya introducidos y confirmados.
      //

      //RRT. Tratamiento de restricciones.
      vHayRest := cFunBas.TestRestriccion(Text001);
      IF vHayRest AND Confirmado AND (NOT FromConfirmar) THEN BEGIN
        Confirmado := FALSE;
        MODIFY;
      END;

      rPar.FINDFIRST;

      verror := FALSE;
      IF "Fecha inicio contrato" = 0D THEN BEGIN
        MESSAGE(men1);
        verror := TRUE;
      END;
      IF "Fecha final contrato" = 0D THEN BEGIN
        MESSAGE(men2);
        verror := TRUE;
      END;
      IF Cliente = '' THEN BEGIN
        MESSAGE(men3);
        verror := TRUE;
      END;
      IF Touroperador = '' THEN BEGIN
        MESSAGE(men4);
        verror := TRUE;
      END;
      IF "Grupo Registro IVA Producto" = '' THEN BEGIN
        MESSAGE(men5);
        verror := TRUE;
      END;
      IF "Cod. Terminos Pago" = '' THEN BEGIN
        MESSAGE(men6);
        verror := TRUE;
      END;
      IF "Cod. Formas Pago" = '' THEN BEGIN
        MESSAGE(men7);
        verror := TRUE;
      END;
      IF verror THEN
        EXIT;
      rCon.RESET;
      rCon.SETCURRENTKEY(Cliente,
                         Touroperador,
                         "Fecha inicio contrato",
                         "Fecha final contrato");
      rCon.SETRANGE (Cliente      , Cliente);
      rCon.SETRANGE (Touroperador , Touroperador);
      rCon.SETFILTER("N§ Contrato", '<>%1', "N§ Contrato");
      rCon.SETRANGE (Confirmado   , TRUE);
      rCon.SETRANGE (Garaje       , Garaje);
      // Comprobar el solapamiento de la fecha inicial
      //
      rCon.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha inicio contrato");
      rCon.SETFILTER("Fecha final contrato" , '>=%1', "Fecha inicio contrato");
      IF rCon.FINDFIRST THEN BEGIN
        MESSAGE(men9, rCon."N§ Contrato");
        verror := TRUE;
      END;
      // Comprobar el solapamiento de la fecha final
      //
      rCon.SETFILTER("Fecha inicio contrato", '<=%1', "Fecha final contrato");
      rCon.SETFILTER("Fecha final contrato" , '>=%1', "Fecha final contrato");
      IF rCon.FINDFIRST THEN BEGIN
        MESSAGE(men10, rCon."N§ Contrato");
        verror := TRUE;
      END;
      // Comprobar que el contrato no abarca por entero a otro ya introducido
      //
      rCon.SETFILTER("Fecha inicio contrato", '>=%1', "Fecha inicio contrato");
      rCon.SETFILTER("Fecha final contrato" , '<=%1', "Fecha final contrato");
      IF rCon.FINDFIRST THEN BEGIN
        MESSAGE(men11, rCon."N§ Contrato");
        verror := TRUE;
      END;

      IF (NOT verror) AND (NOT vHayRest) AND (NOT Confirmado) THEN BEGIN
        VALIDATE(Confirmado, TRUE);
        MODIFY;
      END;
    END;

    PROCEDURE nom_garaje@1() : Text[30];
    VAR
      rGar@1100244000 : Record 7010310;
    BEGIN
      // nom_garaje
      //
      IF NOT rGar.GET(Garaje) THEN
        EXIT('')
      ELSE
        EXIT(rGar.Garaje);
    END;

    PROCEDURE nom_cliente@2() : Text[50];
    VAR
      rCli@1100244000 : Record 18;
    BEGIN
      // nom_cliente
      //
      IF NOT rCli.GET(Cliente) THEN
        EXIT('')
      ELSE
        EXIT(rCli.Name);
    END;

    PROCEDURE nom_touroperador@4() : Text[50];
    VAR
      rTO@1100244000 : Record 7010312;
    BEGIN
      // nom_touroperador
      //
      IF NOT rTO.GET(Touroperador) THEN
        EXIT('')
      ELSE
        EXIT(rTO.Nombre);
    END;

    PROCEDURE copia_contrato@5();
    VAR
      texto_confirm@1100244000 : Text[250];
      w_opcion@1100244001 : Integer;
      lrCond@1103355000 : Record 7010420;
    BEGIN
      // copia_contrato
      //
      // AJS --> Copiar la ficha de contrato, las zonas de precios y los precios introducidos.
      //         Utilizamos un fichero auxiliar "Tipo servicio x Usuario" para el caso en que
      //         queramos incrementar lo precios del contrato en un porcentaje.
      //
      IF NOT Confirmado THEN
        ERROR(err5);
      texto_confirm := STRSUBSTNO(text1, "N§ Contrato");
      IF NOT CONFIRM(texto_confirm) THEN
        EXIT;
      // Se puede hacer una copia sobre un nuevo contrato de venta o uno de compra
      //
      w_opcion := STRMENU(text4, 1);
      IF w_opcion = 0 THEN
        EXIT;

      // AJS 22.12.2005
      // Solicitar las fechas de destino del nuevo contrato

      // AJF 07/01/09
      // Evito borrar el registro, ya que ahora tiene datos permanentes.
      IF lrCond.GET(USERID) THEN
        lrCond.LimpiaRegistro
      ELSE BEGIN
        lrCond.INIT;
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      lrCond.Facturando            := FALSE;
      lrCond."Fecha desde" := CALCDATE(Text50004, "Fecha inicio contrato");
      lrCond."Fecha hasta" := CALCDATE(Text50004, "Fecha final contrato");
      lrCond.MODIFY;

      COMMIT;

      lrCond.FILTERGROUP(0);
      lrCond.SETRECFILTER;
      lrCond.FILTERGROUP(2);

      CLEAR(fSelecFecha);
      fSelecFecha.SETTABLEVIEW(lrCond);
      fSelecFecha.CAPTION(Text008);
      IF fSelecFecha.RUNMODAL <> ACTION::OK THEN
        EXIT;
      lrCond.GET(USERID);

      IF lrCond."Fecha desde" <> 0D THEN BEGIN
        IF lrCond."Fecha hasta" = 0D THEN
          lrCond."Fecha hasta" := lrCond."Fecha desde";

        IF lrCond."Fecha desde" >= lrCond."Fecha hasta" THEN
          ERROR(Text009);
      END
      ELSE
        lrCond."Fecha hasta" := 0D;

      IF w_opcion = 1 THEN
        copia_contrato_venta(lrCond."Fecha desde", lrCond."Fecha hasta")
      ELSE
        copia_contrato_compra(lrCond."Fecha desde", lrCond."Fecha hasta");
    END;

    PROCEDURE crear_contrato_incrementado@6();
    VAR
      fTabTipoSer@1100244000 : Form 7035260;
      rTipoSerUsu@1100244001 : Record 7010419;
      rTipoSer@1100244002 : Record 7010319;
    BEGIN
      // crear_contrato_incrementado
      //
      // AJS --> Indicar porcentaje de incremento y llamar a la rutina de copia.
      //
      IF NOT Confirmado THEN
        ERROR(err5);
      // Creamos los registros por cada tipo de servicio en un fichero auxiliar por usuario.
      //
      rTipoSerUsu.RESET;
      rTipoSerUsu.SETRANGE(Usuario, USERID);
      IF rTipoSerUsu.FINDSET(TRUE) THEN
        rTipoSerUsu.DELETEALL;
      rTipoSer.RESET;
      IF rTipoSer.FINDSET THEN BEGIN
        REPEAT
          CLEAR(rTipoSerUsu);
          rTipoSerUsu.Usuario     := USERID;
          rTipoSerUsu.Codigo      := rTipoSer.Codigo;
          rTipoSerUsu.Descripcion := rTipoSer.Descripcion;
          rTipoSerUsu.INSERT;
        UNTIL rTipoSer.NEXT = 0;
      END;
      COMMIT;
      rTipoSerUsu.FILTERGROUP(2);
      rTipoSerUsu.SETRANGE(Usuario, USERID);
      rTipoSerUsu.FILTERGROUP(0);
      CLEAR(fTabTipoSer);
      fTabTipoSer.SETTABLEVIEW(rTipoSerUsu);
      fTabTipoSer.RUNMODAL;

      copia_contrato;
    END;

    PROCEDURE copia_contrato_venta@7(pwFechaDesde@1100253000 : Date;pwFechaHasta@1100253001 : Date);
    VAR
      rCon@1100244000 : Record 7010403;
      rZon2@1100244001 : Record 7010404;
      rPre@1100244002 : Record 7010405;
      rPre2@1100244003 : Record 7010405;
      rPre3@1100244009 : Record 7010405;
      rTipSerUsu@1100244004 : Record 7010419;
      rCodSer@1100244005 : Record 7010320;
      rDiv@1100244006 : Record 4;
      lrMiniVeh@1100244007 : Record 7010407;
      lrMiniVeh2@1100244008 : Record 7010407;
    BEGIN
      // copia_contrato_venta
      //
      // AJS --> Copiar el contrato sobre un nuevo contrato de venta
      //
      rCon.RESET; rCon.INIT;
      rCon := Rec;
      rCon."N§ Contrato" := '';
      rCon.Confirmado := FALSE;
      CLEAR(rCon."Fecha firma contrato");
      rCon.INSERT(TRUE);

      // AJS 22.12.2005
      // Las fechas se solicitan por parametros al usuario en el momento de hacer la copia

      IF (pwFechaDesde <> 0D) THEN BEGIN
        rCon."Fecha firma contrato"  := pwFechaDesde;
        rCon."Fecha inicio contrato" := pwFechaDesde;
        rCon.VALIDATE("Fecha final contrato" , pwFechaHasta);
      END;
      rCon.MODIFY(TRUE);


      // Escribe una linea en el historico

      rHist.inserta_registro(Garaje, rCon."N§ Contrato", rHist."Tipo Contrato"::Venta,
                             text5,Text002 + "N§ Contrato", Text003 + rCon."N§ Contrato" );

      // Copiar las zonas de precios

      rZon.RESET; rZon.INIT;
      rZon.SETRANGE(Garaje         , Garaje);
      rZon.SETRANGE("N§ Contrato"  , "N§ Contrato");
      rZon.SETRANGE("Tipo contrato", rZon."Tipo contrato"::Venta);
      IF rZon.FINDSET THEN BEGIN
        REPEAT
          rZon2 := rZon;
          rZon2."N§ Contrato" := rCon."N§ Contrato";
          rZon2.INSERT;
        UNTIL rZon.NEXT = 0;
      END;

      // Copiar los precios y suplementos

      rPre.RESET; rPre.INIT;
      rPre.SETCURRENTKEY(Garaje,
                         "N§ Contrato",
                         "Tipo precio",
                         "Codigo servicio",
                         "Zona desde",
                         "Zona hasta",
                         "Fecha desde",
                         "Fecha hasta",
                         "Tipo Vehiculo",
                         "Rango desde",
                         "Rango hasta");
      rPre.SETRANGE(Garaje         , Garaje);
      rPre.SETRANGE("N§ Contrato"  , "N§ Contrato");
      IF rPre.FINDSET(TRUE) THEN BEGIN
        REPEAT
          rPre2 := rPre;
          rPre2."N§ Contrato" := rCon."N§ Contrato";

          // AJS 22.12.2005
          // Las fechas se piden por parametros en el momento de copiar

          IF pwFechaDesde <> 0D THEN BEGIN
            rPre2."Fecha desde" := pwFechaDesde;
            rPre2.VALIDATE("Fecha hasta", pwFechaHasta);
          END;

          IF rPre."Codigo servicio" <> '' THEN
            rCodSer.GET(rPre."Codigo servicio");

          IF NOT rTipSerUsu.GET(USERID, rCodSer."Tipo servicio") THEN
            rTipSerUsu.INIT;

          IF rPre.Porcentaje THEN
            rPre2.VALIDATE("Precio Vehiculo", rPre."Precio Vehiculo")
          ELSE BEGIN
            CLEAR(rDiv);
            IF rDiv.GET("Cod. Divisa") THEN ;
            // Precio Vehiculo
            rPre2.VALIDATE("Precio Vehiculo", rPre."Precio Vehiculo" +
                           ROUND((rPre."Precio Vehiculo" * rTipSerUsu."1er % Incremento") / 100 ,rDiv."Amount Rounding Precision"));
            rPre2.VALIDATE("Precio Vehiculo", rPre2."Precio Vehiculo" +
                           ROUND((rPre2."Precio Vehiculo" * rTipSerUsu."2do % Incremento") / 100 ,rDiv."Amount Rounding Precision"));

            // Precio Adulto
            rPre2.VALIDATE("Precio Adulto", rPre."Precio Adulto" +
                           ROUND((rPre."Precio Adulto" * rTipSerUsu."1er % Incremento") / 100 ,rDiv."Amount Rounding Precision"));
            rPre2.VALIDATE("Precio Adulto", rPre2."Precio Adulto" +
                           ROUND((rPre2."Precio Adulto" * rTipSerUsu."2do % Incremento") / 100 ,rDiv."Amount Rounding Precision"));
           // Precio Ni¤o
            rPre2.VALIDATE("Precio Ni¤o", rPre."Precio Ni¤o" +
                           ROUND((rPre."Precio Ni¤o" * rTipSerUsu."1er % Incremento") / 100 ,rDiv."Amount Rounding Precision"));
            rPre2.VALIDATE("Precio Ni¤o", rPre2."Precio Ni¤o" +
                           ROUND((rPre2."Precio Ni¤o" * rTipSerUsu."2do % Incremento") / 100 ,rDiv."Amount Rounding Precision"));
          END;

          rPre2.INSERT(TRUE);
        UNTIL rPre.NEXT = 0;
      END;


      // copia la tabla de minimos por vehiculo

      lrMiniVeh.RESET; lrMiniVeh.INIT;
      lrMiniVeh.SETRANGE ("N§ Contrato" , "N§ Contrato");
      lrMiniVeh.SETRANGE (lrMiniVeh."Tipo Contrato" , lrMiniVeh."Tipo Contrato"::Venta);
      IF lrMiniVeh.FINDSET THEN BEGIN
        REPEAT
          lrMiniVeh2 := lrMiniVeh;
          lrMiniVeh2."N§ Contrato" := rCon."N§ Contrato";
          lrMiniVeh2.INSERT;
        UNTIL lrMiniVeh.NEXT = 0;
      END;

      MESSAGE(mes3, rCon."N§ Contrato");
    END;

    PROCEDURE copia_contrato_compra@9(pwFechaDesde@1100253001 : Date;pwFechaHasta@1100253000 : Date);
    VAR
      rCon@1100244000 : Record 7010408;
      rZon2@1100244001 : Record 7010404;
      rPrec@1100244002 : Record 7010409;
      rTipSerUsu@1100244003 : Record 7010419;
      rCodSer@1100244004 : Record 7010320;
      rDiv@1100244005 : Record 4;
      lrMiniVeh@1100244006 : Record 7010407;
      lrMiniVeh2@1100244007 : Record 7010407;
      rPrec2@1100244008 : Record 7010409;
      rPrec3@1100244009 : Record 7010409;
    BEGIN
      // copia_contrato_compra
      //
      // AJS --> Copiar el contrato sobre un nuevo contrato de compra
      //
      rCon.RESET; rCon.INIT;
      rCon.VALIDATE(Garaje                       , Garaje);
      rCon.VALIDATE("N§ Contrato"                , '');
      rCon.INSERT(TRUE);

      // AJS 22.12.2005
      // Las fechas se solicitan por parametros al usuario en el momento de hacer la copia

      IF (pwFechaDesde <> 0D) THEN BEGIN
        rCon."Fecha firma contrato"  := pwFechaDesde;
        rCon."Fecha inicio contrato" := pwFechaDesde;
        rCon.VALIDATE("Fecha final contrato" , pwFechaHasta);
      END
      ELSE BEGIN
        rCon."Fecha firma contrato"  := "Fecha firma contrato";
        rCon."Fecha inicio contrato" := "Fecha inicio contrato";
        rCon.VALIDATE("Fecha final contrato" , "Fecha final contrato");
      END;

      rCon.VALIDATE(Cliente                      , Cliente);
      rCon.VALIDATE(Touroperador                 , Touroperador);
      rCon.VALIDATE("Grupo Registro IVA Producto", "Grupo Registro IVA Producto");
      rCon.VALIDATE("Impuestos incluidos"        , "Impuestos incluidos");
      rCon.VALIDATE("Cod. Terminos Pago"         , "Cod. Terminos Pago");
      rCon.VALIDATE("Cod. Formas Pago"           , "Cod. Formas Pago");
      rCon.VALIDATE("Cod. Serie"                 , "Cod. Serie");
      rCon.VALIDATE("Cod. Divisa"                , "Cod. Divisa");
      rCon.VALIDATE("Maletas sobre"              , "Maletas sobre");
      rCon.VALIDATE("Maletas exentas"            , "Maletas exentas");
      rCon.VALIDATE("Maletas incluidas"          , "Maletas incluidas");
      rCon.VALIDATE(Confirmado                   , FALSE);
      rCon.MODIFY(TRUE);

      // Escribe una linea en el historico

      rHist.inserta_registro(Garaje, rCon."N§ Contrato", rHist."Tipo Contrato"::Compra,
                             text5,Text004 + "N§ Contrato", Text005 + rCon."N§ Contrato" );

      // Copiar las zonas de precios
      //
      rZon.RESET; rZon.INIT;
      rZon.SETRANGE(Garaje         , Garaje);
      rZon.SETRANGE("N§ Contrato"  , "N§ Contrato");
      rZon.SETRANGE("Tipo contrato", rZon."Tipo contrato"::Venta);
      IF rZon.FINDSET THEN BEGIN
        REPEAT
          rZon2 := rZon;
          rZon2."N§ Contrato"   := rCon."N§ Contrato";
          rZon2."Tipo contrato" := rZon2."Tipo contrato"::Compra;
          rZon2.INSERT;
        UNTIL rZon.NEXT = 0;
      END;

      // Copiar los precios y suplementos
      //
      rPre.RESET; rPre.INIT;
      //BRM 07/06/04
      rPre.SETCURRENTKEY(Garaje,
                         "N§ Contrato",
                         "Tipo precio",
                         "Codigo servicio",
                         "Zona desde",
                         "Zona hasta",
                         "Fecha desde",
                         "Fecha hasta",
                         "Tipo Vehiculo",
                         "Rango desde",
                         "Rango hasta");

      rPre.SETRANGE(Garaje       , Garaje);
      rPre.SETRANGE("N§ Contrato", "N§ Contrato");
      IF rPre.FINDSET(TRUE) THEN BEGIN
        REPEAT
          rPrec.INIT;
          rPrec.VALIDATE(Garaje             , rCon.Garaje);
          rPrec.VALIDATE("N§ Contrato"      , rCon."N§ Contrato");
          rPrec.VALIDATE("Tipo precio"      , rPre."Tipo precio");
          rPrec.VALIDATE(Orden              , rPre.Orden);
          rPrec.INSERT(TRUE);
          rPrec.VALIDATE("Codigo servicio"  , rPre."Codigo servicio");
          rPrec.VALIDATE("Zona desde"       , rPre."Zona desde");

          // AJS 22.12.2005
          // Las fechas se piden por parametros en el momento de copiar

          IF pwFechaDesde <> 0D THEN BEGIN
            rPrec."Fecha desde" := pwFechaDesde;
            rPrec.VALIDATE("Fecha hasta", pwFechaHasta);
          END
          ELSE BEGIN
            rPrec."Fecha desde" := rPre."Fecha desde";
            rPrec.VALIDATE("Fecha hasta", rPre."Fecha hasta");
          END;

          rPrec.VALIDATE("Tipo Vehiculo"    , rPre."Tipo Vehiculo");
          rPrec.VALIDATE("Rango desde"      , rPre."Rango desde");
          rPrec.VALIDATE("Rango hasta"      , rPre."Rango hasta");
          rPrec."Calcular Maletas"          := rPre."Calcular Maletas";
          rPrec."Tipo aplicacion"           := rPre."Tipo aplicacion";

          IF rPre."Codigo servicio" <> '' THEN
            rCodSer.GET(rPre."Codigo servicio");
          IF NOT rTipSerUsu.GET(USERID, rCodSer."Tipo servicio") THEN
            rTipSerUsu.INIT;

          IF rPre.Porcentaje THEN
            rPrec.VALIDATE("Precio Vehiculo", rPre."Precio Vehiculo")
          ELSE BEGIN
            CLEAR(rDiv);
            IF rDiv.GET("Cod. Divisa") THEN ;

            // Precio Vehiculo
            rPrec.VALIDATE("Precio Vehiculo" , rPre."Precio Vehiculo" +
                           ROUND((rPre."Precio Vehiculo" * rTipSerUsu."1er % Incremento") / 100 ,rDiv."Amount Rounding Precision"));
            rPrec.VALIDATE("Precio Vehiculo" , rPrec."Precio Vehiculo" +
                           ROUND((rPrec."Precio Vehiculo" * rTipSerUsu."2do % Incremento") / 100, rDiv."Amount Rounding Precision"));

            // Precio Adulto
            rPrec.VALIDATE("Precio Adulto", rPre."Precio Adulto" +
                           ROUND((rPre."Precio Adulto" * rTipSerUsu."1er % Incremento") / 100 ,rDiv."Amount Rounding Precision"));
            rPrec.VALIDATE("Precio Adulto", rPrec."Precio Adulto" +
                           ROUND((rPrec."Precio Adulto" * rTipSerUsu."2do % Incremento") / 100 ,rDiv."Amount Rounding Precision"));
           // Precio Ni¤o
            rPrec.VALIDATE("Precio Ni¤o", rPre."Precio Ni¤o" +
                           ROUND((rPre."Precio Ni¤o" * rTipSerUsu."1er % Incremento") / 100 ,rDiv."Amount Rounding Precision"));
            rPrec.VALIDATE("Precio Ni¤o", rPrec."Precio Ni¤o" +
                           ROUND((rPrec."Precio Ni¤o" * rTipSerUsu."2do % Incremento") / 100 ,rDiv."Amount Rounding Precision"));
          END;

          rPrec.VALIDATE("Tipo elemento"     , rPre."Tipo elemento");
          rPrec.VALIDATE("Cod. Divisa"       , rPre."Cod. Divisa");
          rPrec.VALIDATE(Activo              , FALSE);
          rPrec.VALIDATE("Codigo suplemento" , rPre."Codigo suplemento");
          rPrec.VALIDATE("Zona hasta"        , rPre."Zona hasta");
          rPrec.VALIDATE("Tipo Servicio"     , rPre."Tipo Servicio");
          rPrec.VALIDATE("Minimos Zona desde", rPre."Minimos Zona desde");
          rPrec.VALIDATE("Minimos Zona hasta", rPre."Minimos Zona hasta");
          rPrec.VALIDATE("Minimos Zona"      , rPre."Minimos Zona");
          rPrec.VALIDATE(Porcentaje          , rPre.Porcentaje);
          rPrec.VALIDATE("Tercera zona"      , rPre."Tercera Zona");
          rPrec.MODIFY(TRUE);
        UNTIL rPre.NEXT = 0;
      END;

      // copia la tabla de minimos por vehiculo

      lrMiniVeh.RESET; lrMiniVeh.INIT;
      lrMiniVeh.SETRANGE ("N§ Contrato" , "N§ Contrato");
      lrMiniVeh.SETRANGE (lrMiniVeh."Tipo Contrato" , lrMiniVeh."Tipo Contrato"::Venta);
      IF lrMiniVeh.FINDSET THEN BEGIN
        REPEAT
          lrMiniVeh2 := lrMiniVeh;
          lrMiniVeh2."N§ Contrato"   := rCon."N§ Contrato";
          lrMiniVeh2."Tipo Contrato" := lrMiniVeh."Tipo Contrato"::Compra;
          lrMiniVeh2.INSERT;
        UNTIL lrMiniVeh.NEXT = 0;
      END;

      MESSAGE(mes3, rCon."N§ Contrato");
    END;

    PROCEDURE cambiar_datos_cabecera@8();
    VAR
      fFicCam@1100244000 : Form 7035258;
      lrCond@1100244001 : Record 7010420;
      err1@1100244002 : TextConst 'ESP=No es posible cambiar de Garaje a un contrato que esta Asignado a otro.';
    BEGIN
      // cambiar_datos_cabecera
      //
      // AJS --> Cambio simultaneo de cliente y touroperador del contrato
      //

      // AJF 07/01/09
      // Evito borrar el registro, ya que ahora tiene datos permanentes.
      IF lrCond.GET(USERID) THEN
        lrCond.LimpiaRegistro
      ELSE BEGIN
        lrCond.INIT;
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      COMMIT;
      lrCond.SETRECFILTER;

      CLEAR(fFicCam);
      fFicCam.SETTABLEVIEW(lrCond);
      fFicCam.SETRECORD(lrCond);
      IF fFicCam.RUNMODAL <> ACTION::OK THEN
        EXIT;
      fFicCam.GETRECORD(lrCond);


      IF lrCond.Garaje <> '' THEN BEGIN
        IF lrCond.Garaje <> Garaje THEN BEGIN
          IF "Basado en contrato n§" <> '' THEN
            ERROR (err1);
          cambia_dependientes(lrCond.Garaje);
          RENAME(lrCond.Garaje, "N§ Contrato");
        END;
      END;
      IF lrCond.Cliente <> '' THEN BEGIN
        IF xRec.Cliente <> lrCond.Cliente THEN BEGIN
          Cliente := lrCond.Cliente;
          rHist.inserta_registro(Garaje, "N§ Contrato", rHist."Tipo Contrato"::Venta,
                                 FIELDCAPTION(Cliente), xRec.Cliente, Cliente);
        END;
      END;
      IF lrCond.Touroperador <> '' THEN
        VALIDATE(Touroperador, lrCond.Touroperador);
      Rec.MODIFY(TRUE);
    END;

    PROCEDURE cambia_dependientes@10(pw_garaje@1100244000 : Code[10]);
    VAR
      rZon@1100244001 : Record 7010404;
      rPre@1100244002 : Record 7010405;
      rCom@1100244003 : Record 7010406;
      rHisCon@1100244004 : Record 7010316;
      rHisPre@1100244005 : Record 7010317;
      rZon2@1100244006 : Record 7010404;
      rPre2@1100244007 : Record 7010405;
      rCom2@1100244008 : Record 7010406;
      rHisCon2@1100244009 : Record 7010316;
      rHisPre2@1100244010 : Record 7010317;
      rZon3@1100244011 : Record 7010404;
      rPre3@1100244012 : Record 7010405;
      rCom3@1100244013 : Record 7010406;
      rHisCon3@1100244014 : Record 7010316;
      rHisPre3@1100244015 : Record 7010317;
      rCont@1100244016 : Record 7010403;
    BEGIN
      // cambia_dependientes
      //
      // AJS --> Hay que cambiar el garaje en zonas, precios, comentarios e historicos y contratos asociados
      //
      rZon.RESET; rZon.INIT;
      rZon.SETRANGE(Garaje         , Garaje);
      rZon.SETRANGE("N§ Contrato"  , "N§ Contrato");
      rZon.SETRANGE("Tipo contrato", rZon."Tipo contrato"::Venta);
      IF rZon.FINDSET THEN BEGIN
        REPEAT
          rZon2 := rZon;
          rZon2.Garaje := pw_garaje;
          rZon2.INSERT;

          rZon3 := rZon;
          rZon3.DELETE;
        UNTIL rZon.NEXT = 0;
      END;

      rPre.RESET; rPre.INIT;
      rPre.SETRANGE(Garaje         , Garaje);
      rPre.SETRANGE("N§ Contrato"  , "N§ Contrato");
      IF rPre.FINDSET THEN BEGIN
        REPEAT
          rPre2 := rPre;
          rPre2.Garaje := pw_garaje;
          rPre2.INSERT;

          rPre3 := rPre;
          rPre3.DELETE;
        UNTIL rPre.NEXT = 0;
      END;

      rCom.RESET; rCom.INIT;
      rCom.SETRANGE(Garaje         , Garaje);
      rCom.SETRANGE("N§ Contrato"  , "N§ Contrato");
      rCom.SETRANGE("Tipo contrato", rCom."Tipo contrato"::Venta);
      IF rCom.FINDSET THEN BEGIN
        REPEAT
          rCom2 := rCom;
          rCom2.Garaje := pw_garaje;
          rCom2.INSERT;

          rCom3 := rCom;
          rCom3.DELETE;
        UNTIL rCom.NEXT = 0;
      END;

      rHisCon.RESET; rHisCon.INIT;
      rHisCon.SETRANGE(Garaje         , Garaje);
      rHisCon.SETRANGE(Contrato       , "N§ Contrato");
      rHisCon.SETRANGE("Tipo Contrato", rHisCon."Tipo Contrato"::Venta);
      IF rHisCon.FINDSET THEN BEGIN
        REPEAT
          rHisCon2 := rHisCon;
          rHisCon2.Garaje := pw_garaje;
          rHisCon2.INSERT;

          rHisCon3 := rHisCon;
          rHisCon3.DELETE;
        UNTIL rHisCon.NEXT = 0;
      END;

      rHisPre.RESET; rHisPre.INIT;
      rHisPre.SETRANGE(Garaje         , Garaje);
      rHisPre.SETRANGE(Contrato       , "N§ Contrato");
      rHisPre.SETRANGE("Tipo Contrato", rHisPre."Tipo Contrato"::Venta);
      IF rHisPre.FINDSET THEN BEGIN
        REPEAT
          rHisPre2 := rHisPre;
          rHisPre2.Garaje := pw_garaje;
          rHisPre2.INSERT;

          rHisPre3 := rHisPre;
          rHisPre3.DELETE;
        UNTIL rHisPre.NEXT = 0;
      END;

      // JPT- Cambia todos los Garajes de los contratos asociados
      rCont.RESET;
      rCont.SETRANGE ("Basado en contrato n§","N§ Contrato");
      IF rCont.FINDSET THEN
       REPEAT
        rCont.RENAME(pw_garaje, rCont."N§ Contrato");
        rCont.MODIFY;
       UNTIL rCont.NEXT=0;
    END;

    PROCEDURE TestCoherencia@11();
    VAR
      INCOHERENCIA_FECHAS@1100244000 : TextConst 'ESP=Las fechas del contrato no cubren el ambito especificado en el registro de precios. Cambie primero las fechas de los precios.';
      lrPre@1100244001 : Record 7010405;
      lrToPar@1100244002 : Record 7010365;
    BEGIN
      // TestCoherencia
      // Examinaremos que el ambito del contrato sea coherente con el ambito de fechas de la tabla
      // de precios.
      lrPre.RESET;
      lrPre.SETCURRENTKEY(Garaje,
                         "N§ Contrato");
      lrPre.SETRANGE(Garaje        , Garaje);
      lrPre.SETRANGE("N§ Contrato" , "N§ Contrato");
      lrPre.SETFILTER("Fecha desde", '<>%1', 0D);
      lrPre.SETFILTER("Fecha hasta", '<>%1', 0D);
      lrPre.SETRANGE(Activo        , TRUE);
      IF lrPre.FINDSET THEN
        REPEAT
          IF ("Fecha inicio contrato" > lrPre."Fecha desde") OR
             ("Fecha final contrato" < lrPre."Fecha hasta") THEN
            ERROR(INCOHERENCIA_FECHAS);
        UNTIL lrPre.NEXT = 0;

      // ----  AJS 12.11.2001 Hay que comprobar que ningun parte confirmado quede sin contrato  ----
      // ----  por el cambio de fechas                                                          ----

      buscar_partes_confirmados(TRUE);

      // ----  Fin AJS  ----
    END;

    PROCEDURE buscar_partes_confirmados@12(pw_control_fecha@1100244000 : Boolean);
    VAR
      lrToPar@1100244001 : Record 7010365;
    BEGIN
      // buscar_partes_confirmados
      //
      // ----  AJS 12.11.2001 Hay que comprobar que ningun parte confirmado quede sin contrato  ----
      // ----  por el cambio de fechas, cliente o touroperador                                  ----

      lrToPar.RESET;
      lrToPar.SETCURRENTKEY("N§ Contrato venta");
      lrToPar.SETRANGE("N§ Contrato venta", "N§ Contrato");
      lrToPar.SETRANGE(Confirmado         , TRUE);
      IF lrToPar.FINDSET THEN BEGIN
        REPEAT
          IF pw_control_fecha THEN BEGIN
            IF (lrToPar."Fecha Facturacion" < "Fecha inicio contrato") OR
               (lrToPar."Fecha Facturacion" > "Fecha final contrato") THEN
              ERROR(no_cambio_parte_confirmado);
         END
         ELSE
           ERROR(no_cambio_parte_confirmado);
        UNTIL lrToPar.NEXT = 0;
      END;

      // ----  Fin AJS  ----
    END;

    PROCEDURE BuscaContratoReal@1100244000(VAR prContV@1100244000 : Record 7010403);
    BEGIN
      // BuscaContratoReal
      // Si el contrato hace referencia a otro devuelve el contrato que tiene los precios

      prContV.RESET;
      WHILE prContV."Basado en contrato n§"<>'' DO BEGIN
        prContV.SETRANGE("N§ Contrato", prContV."Basado en contrato n§");
        IF NOT prContV.FINDFIRST THEN
          CLEAR(prContV);
      END;
    END;

    PROCEDURE VerPDF@1103350000();
    BEGIN
      // VerPDF
      // Muestra el documento en PDF

      IF "Contrato en PDF"='' THEN
        ERROR(Text006,FIELDCAPTION("Contrato en PDF"));

      IF NOT EXISTS("Contrato en PDF") THEN
        ERROR(Text007,"Contrato en PDF");

      HYPERLINK("Contrato en PDF");
    END;

    PROCEDURE Sincroniza@1100253000();
    VAR
      lrSinCon@1100253000 : Record 7035388;
    BEGIN
      // Sincroniza

      CLEAR(lrSinCon);
      lrSinCon.CompruebaSinc(Garaje,"N§ Contrato");
      lrSinCon.SETRANGE("N§ Contrato","N§ Contrato");
      IF lrSinCon.FINDSET THEN BEGIN
        REPEAT
          lrSinCon.SincronizaCabecera(Rec);
        UNTIL lrSinCon.NEXT=0;
      END;
    END;

    PROCEDURE FiltrarGarajeUsuario@1103355000();
    VAR
      lrParGenerales@1103355000 : Record 7010311;
      lrUsuario@1103355001 : Record 7010420;
    BEGIN
      // FiltrarGarajeUsuario.
      // Filtramos los partes por garaje dependiendo de la configuraci¢n del usuario.

      lrParGenerales.FINDFIRST;

      IF NOT lrUsuario.GET(USERID) THEN
        ERROR(Text010, USERID);

      IF lrUsuario."Garaje por defecto" <> '' THEN
        SETRANGE(Garaje, lrUsuario."Garaje por defecto");

      IF (lrUsuario."Garaje de trabajo" <> '') AND (lrUsuario."Garaje de trabajo" <> lrParGenerales."Todos los garajes") THEN BEGIN
        FILTERGROUP(2);
        SETRANGE(Garaje, lrUsuario."Garaje de trabajo");
        FILTERGROUP(0);
      END;
    END;

    BEGIN
    {
      $001 AJS 11102013 Modifico la funcion nom_cliente para que retorne Text(50)
    }
    END.
  }
}
