OBJECT Table 7009881 Transfer cotizacion
{
  OBJECT-PROPERTIES
  {
    Date=02/10/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lrTra@1103355000 : Record 7009881;
             BEGIN

               IF lrTra.FINDLAST THEN
                 Id := lrTra.Id + 1
               ELSE
                 Id := 1;

               InsertarPersonas;
             END;

    OnDelete=BEGIN

               LimpiarDistribuciones;
             END;

    CaptionML=[ENU=Rate Transfer;
               ESP=Transfer cotizacion];
  }
  FIELDS
  {
    { 1   ;   ;Id                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ESP=ID] }
    { 2   ;   ;Fecha inicio        ;Date          ;OnValidate=BEGIN

                                                                IF NOT cCotCom.ComprobarFechasCabecera("Id Cotizacion", "Fecha inicio") THEN
                                                                  ERROR(Text002, FIELDNAME("Fecha inicio"));

                                                                IF "Tipo transfer" <> "Tipo transfer"::Ambos THEN BEGIN
                                                                  "Fecha fin" := "Fecha inicio";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicio] }
    { 3   ;   ;Fecha fin           ;Date          ;OnValidate=BEGIN

                                                                IF NOT cCotCom.ComprobarFechasCabecera("Id Cotizacion", "Fecha fin") THEN
                                                                  ERROR(Text002, FIELDNAME("Fecha fin"));

                                                                IF "Tipo transfer" <> "Tipo transfer"::Ambos THEN BEGIN
                                                                  "Fecha inicio" := "Fecha fin";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=End Date;
                                                              ESP=Fecha fin] }
    { 6   ;   ;Hotel entrada       ;Code20        ;TableRelation=Hotel.Hotel;
                                                   OnLookup=VAR
                                                              lwHotel@1103355000 : Code[20];
                                                            BEGIN

                                                              lwHotel := cCotCom.LookupHotel("Id Cotizacion");

                                                              IF (lwHotel <> '') AND (lwHotel <> "Hotel entrada") THEN
                                                                VALIDATE("Hotel entrada", lwHotel);
                                                            END;

                                                   CaptionML=[ENU=Hotel Check In;
                                                              ESP=Hotel entrada] }
    { 7   ;   ;Hotel salida        ;Code20        ;TableRelation=Hotel.Hotel;
                                                   OnLookup=VAR
                                                              lwHotel@1103355000 : Code[20];
                                                            BEGIN

                                                              lwHotel := cCotCom.LookupHotel("Id Cotizacion");

                                                              IF (lwHotel <> '') AND (lwHotel <> "Hotel salida") THEN
                                                                VALIDATE("Hotel salida", lwHotel);
                                                            END;

                                                   CaptionML=[ENU=Hotel Check Out;
                                                              ESP=Hotel salida] }
    { 8   ;   ;Id Cotizacion       ;Integer       ;CaptionML=[ENU=Id Value;
                                                              ESP=Id Cotizacion] }
    { 9   ;   ;Tipo Uso            ;Option        ;CaptionML=[ENU=Usage type;
                                                              ESP=Tipo uso];
                                                   OptionCaptionML=[ENU=Manual,Automatic;
                                                                    ESP=Manual,Automatico];
                                                   OptionString=Manual,Automatico }
    { 10  ;   ;Tipo transfer       ;Option        ;OnValidate=VAR
                                                                lrDistribs@1103355000 : Record 7009875;
                                                                lrDistsTMP@1103355001 : TEMPORARY Record 7009875;
                                                              BEGIN

                                                                IF "Tipo transfer" <> xRec."Tipo transfer" THEN BEGIN

                                                                  CASE "Tipo transfer" OF
                                                                    "Tipo transfer"::Entrada: "Fecha inicio" := "Fecha fin";
                                                                    "Tipo transfer"::Salida:  "Fecha fin"    := "Fecha inicio";
                                                                  END;

                                                                  IF xRec."Tipo transfer" = xRec."Tipo transfer"::Salida THEN BEGIN
                                                                    lrDistribs.SETCURRENTKEY("Id Transfer Salida");
                                                                    lrDistribs.SETRANGE ("Id Transfer Salida", Id);
                                                                  END
                                                                  ELSE BEGIN
                                                                    lrDistribs.SETCURRENTKEY("Id Transfer Entrada");
                                                                    lrDistribs.SETRANGE ("Id Transfer Entrada", Id);
                                                                  END;

                                                                  // Modifico las distribuciones en un temporal para que no salte el cursor
                                                                  // de posicion.
                                                                  IF lrDistribs.FINDSET THEN BEGIN
                                                                    REPEAT

                                                                      lrDistsTMP := lrDistribs;
                                                                      ActualizarTipoTransfer(lrDistsTMP);
                                                                      lrDistsTMP.INSERT;

                                                                    UNTIL lrDistribs.NEXT = 0;
                                                                  END;

                                                                  lrDistsTMP.RESET;
                                                                  lrDistribs.RESET;

                                                                  IF lrDistsTMP.FINDSET THEN BEGIN
                                                                    REPEAT
                                                                      lrDistribs := lrDistsTMP;
                                                                      lrDistribs.MODIFY;
                                                                    UNTIL lrDistsTMP.NEXT = 0;
                                                                  END;

                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Transfer Type;
                                                              ESP=Tipo Transfer];
                                                   OptionCaptionML=[ENU=Both,Check-in,Check-out;
                                                                    ESP=Ambos,Entrada,Salida];
                                                   OptionString=Ambos,Entrada,Salida }
    { 11  ;   ;Origen              ;Code10        ;TableRelation=Aeropuerto.Aeropuerto WHERE (Aeropuerto Local=CONST(Yes));
                                                   OnLookup=BEGIN

                                                              Origen := LookupOrigenDestino;
                                                            END;

                                                   CaptionML=[ENU=Origin;
                                                              ESP=Origen];
                                                   Description=Aeropuerto.Aeropuerto WHERE (Aeropuerto Local=CONST(Yes)) }
    { 12  ;   ;Destino             ;Code10        ;TableRelation=Aeropuerto.Aeropuerto WHERE (Aeropuerto Local=CONST(Yes));
                                                   OnLookup=BEGIN
                                                              Destino := LookupOrigenDestino;
                                                            END;

                                                   CaptionML=[ENU=Destination;
                                                              ESP=Destino];
                                                   Description=Aeropuerto.Aeropuerto WHERE (Aeropuerto Local=CONST(Yes)) }
    { 17  ;   ;Compa¤ia entrada    ;Code10        ;TableRelation="Compa¤ia aerea".Codigo;
                                                   CaptionML=[ENU=Arrival company;
                                                              ESP=Compa¤ia entrada];
                                                   Description=FK Compa¤ia aerea }
    { 19  ;   ;Vuelo entrada       ;Code10        ;CaptionML=[ENU=Arrival flight;
                                                              ESP=Vuelo entrada] }
    { 23  ;   ;Terminal entrada    ;Code1         ;CaptionML=[ENU=Arrival terminal;
                                                              ESP=Terminal entrada] }
    { 25  ;   ;Hora entrada        ;Time          ;CaptionML=[ENU=Arrival time;
                                                              ESP=Hora entrada] }
    { 27  ;   ;IATA origen entrada ;Code10        ;TableRelation=Aeropuerto.Aeropuerto;
                                                   CaptionML=[ENU=Arrival origin IATA;
                                                              ESP=IATA origen entrada];
                                                   Description=FK Aeropuerto }
    { 29  ;   ;IATA destino entrada;Code10        ;TableRelation=Aeropuerto.Aeropuerto;
                                                   CaptionML=[ENU=Arrival destination IATA;
                                                              ESP=IATA destino entrada];
                                                   Description=FK Aeropuerto }
    { 31  ;   ;Compa¤ia salida     ;Code10        ;TableRelation="Compa¤ia aerea".Codigo;
                                                   CaptionML=[ENU=Departure company;
                                                              ESP=Compa¤ia salida];
                                                   Description=FK Compa¤ia aerea }
    { 33  ;   ;Vuelo salida        ;Code10        ;CaptionML=[ENU=Departure flight;
                                                              ESP=Vuelo salida] }
    { 37  ;   ;Terminal salida     ;Code1         ;CaptionML=[ENU=Departure terminal;
                                                              ESP=Terminal salida] }
    { 39  ;   ;Hora salida         ;Time          ;CaptionML=[ENU=Departure time;
                                                              ESP=Hora salida] }
    { 41  ;   ;IATA origen salida  ;Code10        ;TableRelation=Aeropuerto.Aeropuerto;
                                                   CaptionML=[ENU=Departure origin IATA;
                                                              ESP=IATA origen salida];
                                                   Description=FK Aeropuerto }
    { 43  ;   ;IATA destino salida ;Code10        ;TableRelation=Aeropuerto.Aeropuerto;
                                                   CaptionML=[ENU=Departure destination IATA;
                                                              ESP=IATA destino salida];
                                                   Description=FK Aeropuerto }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
    {    ;Id Cotizacion                           ;KeyGroups=RENUMERING }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      cCotCom@1103355000 : Codeunit 7009913;
      Text001@1103355001 : TextConst 'ENU=Would you like to generate the transfer from %1 to %2 for the value %3;ESP=¨Desea generar los transfers del %1 al %2 para la cotizaci¢n %3?';
      Text002@1103355002 : TextConst 'ENU=%1 must be into the range of dates of the header;ESP=La %1 debe estar dentro del rango de fechas de la cabecera.';

    PROCEDURE LimpiarDistribuciones@1103355000();
    VAR
      lrDistribs@1103355000 : Record 7009875;
    BEGIN
      // LimpiarDistribuciones
      // Elimina el v¡nculo entre la distribuci¢n y el transfer.

      IF "Tipo Uso" = "Tipo Uso"::Automatico THEN BEGIN

        lrDistribs.SETCURRENTKEY("Id Transfer Entrada");
        lrDistribs.SETRANGE ("Id Transfer Entrada", Id);
        lrDistribs.MODIFYALL("Id Transfer Entrada", 0);

        lrDistribs.RESET;
        lrDistribs.SETCURRENTKEY("Id Transfer Salida");
        lrDistribs.SETRANGE ("Id Transfer Salida", Id);
        lrDistribs.MODIFYALL("Id Transfer Salida", 0);

      END
      ELSE BEGIN

        lrDistribs.RESET;

        IF "Tipo transfer" = "Tipo transfer"::Salida THEN BEGIN
          lrDistribs.SETCURRENTKEY("Id Transfer Salida");
          lrDistribs.SETRANGE ("Id Transfer Salida", Id);
        END
        ELSE BEGIN
          lrDistribs.SETCURRENTKEY("Id Transfer Entrada");
          lrDistribs.SETRANGE ("Id Transfer Entrada", Id);
        END;

        lrDistribs.DELETEALL;

      END;
    END;

    PROCEDURE InsertarPersonas@1103355001();
    VAR
      lrPersos@1103355000 : Record 7009873;
      lrDistribs@1103355001 : Record 7009875;
    BEGIN
      // InsertarPersonas

      IF ("Id Cotizacion" <> 0) AND ("Tipo Uso" = "Tipo Uso"::Manual) THEN BEGIN
        lrPersos.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
        lrPersos.SETRANGE ("Id cotizacion", "Id Cotizacion");
        lrPersos.SETRANGE ("Tipo uso"     , lrPersos."Tipo uso"::Seleccion);
        lrPersos.SETRANGE ("Tipo linea"   , lrPersos."Tipo linea"::Persona);
        IF lrPersos.FINDSET THEN BEGIN
          REPEAT

            lrDistribs.INIT;
            lrDistribs."Id habitacion"        := 0;
            lrDistribs."Id persona"           := lrPersos.Id;
            lrDistribs.Seleccion              := TRUE;
            lrDistribs."Id Hotel"             := 0;

            ActualizarTipoTransfer(lrDistribs);

            lrDistribs.INSERT(TRUE);

          UNTIL lrPersos.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE ActualizarTipoTransfer@1103355005(VAR prDistribs@1103355000 : Record 7009875);
    BEGIN
      // ActualizarTipoTransfer

      CASE "Tipo transfer" OF
        "Tipo transfer"::Ambos: BEGIN
           prDistribs."Id Transfer Entrada"  := Id;
           prDistribs."Id Transfer Salida"   := Id;
        END;

        "Tipo transfer"::Entrada: BEGIN
           prDistribs."Id Transfer Entrada"  := Id;
           prDistribs."Id Transfer Salida"   := 0;
        END;

        "Tipo transfer"::Salida: BEGIN
           prDistribs."Id Transfer Entrada"  := 0;
           prDistribs."Id Transfer Salida"   := Id;
        END;

      END;
    END;

    PROCEDURE LookupOrigenDestino@1103355002() : Code[10];
    VAR
      lfAerop@1103355000 : Form 7009704;
      lrAerop@1103355001 : Record 7009704;
    BEGIN
      // LookupOrigenDestino

      lfAerop.LOOKUPMODE := TRUE;
      lfAerop.EDITABLE   := FALSE;
      IF lfAerop.RUNMODAL IN [ACTION::LookupOK, ACTION::OK] THEN BEGIN
        lfAerop.GETRECORD(lrAerop);
        EXIT(lrAerop.Aeropuerto);
      END;
    END;

    PROCEDURE SeleccionPlanDeVuelo@1103355003(pwLlegada@1103355000 : Boolean);
    VAR
      lrPlan@1103355001 : Record 7009754;
      lfPlan@1103355002 : Form 7009799;
    BEGIN
      // SeleccionPlanDeVuelo
      //: Selecciona un vuelo para rellenar la info de plan de vuelo del transfer
      //: @pwLlegada: Indica si la informaci¢n a rellenar es la de llegada o la de salida.

      lrPlan.SETCURRENTKEY(Fecha, Compa¤ia, Vuelo, Origen, Destino);

      IF pwLlegada THEN BEGIN
        lrPlan.SETRANGE(Fecha, "Fecha inicio");
        lrPlan.SETRANGE("Entrada/Salida", lrPlan."Entrada/Salida"::Entrada);
        lrPlan.SETRANGE (Destino, Origen);
      END
      ELSE BEGIN
        lrPlan.SETRANGE(Fecha, "Fecha fin");
        lrPlan.SETRANGE("Entrada/Salida", lrPlan."Entrada/Salida"::Salida);
        lrPlan.SETRANGE (Origen, Destino);
      END;

      lfPlan.LOOKUPMODE := TRUE;
      lfPlan.EDITABLE   := FALSE;
      lfPlan.SETTABLEVIEW(lrPlan);

      IF lfPlan.RUNMODAL IN [ACTION::LookupOK, ACTION::OK] THEN BEGIN
        lrPlan.RESET;
        lfPlan.GETRECORD(lrPlan);

        IF pwLlegada THEN BEGIN
          "Compa¤ia entrada"     := lrPlan.Compa¤ia;
          "Vuelo entrada"        := lrPlan.Vuelo;
          "Terminal entrada"     := lrPlan.Terminal;
          "Hora entrada"         := lrPlan."Hora Entrada";
          "IATA origen entrada"  := lrPlan.Origen;
          "IATA destino entrada" := lrPlan.Destino;
        END
        ELSE BEGIN
          "Compa¤ia salida"      := lrPlan.Compa¤ia;
          "Vuelo salida"         := lrPlan.Vuelo;
          "Terminal salida"      := lrPlan.Terminal;
          "Hora salida"          := lrPlan."Hora Salida";
          "IATA origen salida"   := lrPlan.Origen;
          "IATA destino salida"  := lrPlan.Destino;
        END;

        MODIFY;

      END;
    END;

    BEGIN
    {
      ## AJS 27.05.2009

        .- He incluido la marca de Aeropuerto Local en el TableRelation de Origen y Destino

      ## AJF 15/06/09

        .- Modificados Lookups de campos "hotel entrada" y "hotel salida" para que filtren por el pais de
           la cabecera de cotizaci¢n.

      ## AJF 16/06/09

        .- (INC-41445) A¤adido control para que las fechas no se salgan del rango de fechas de la cabecera.

      ## AJF 29/06/09

        .- (09/00319) cambio c¢digos de hotel de code10 a code20.
    }
    END.
  }
}
