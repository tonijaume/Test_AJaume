OBJECT Table 7009873 Hotel cotizacion
{
  OBJECT-PROPERTIES
  {
    Date=28/10/14;
    Time=12:12:15;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lrLinCalCot@1103355000 : Record 7009873;
             BEGIN

               IF lrLinCalCot.FINDLAST THEN
                 Id := lrLinCalCot.Id + 1
               ELSE
                 Id := 1;

               IF "Tipo linea" = "Tipo linea"::Hotel THEN
                 "Id Hotel" := Id;

               ActualizaRangoFechas;

               IF ("Tipo linea" = "Tipo linea"::Hotel) AND ("Tipo uso" = "Tipo uso"::Seleccion) THEN
                 cCotCom.A¤adirPersonasHotel(Rec);

               A¤adirDistribuciones;
             END;

    OnModify=BEGIN

               // Refrescamos los contratos de si hay un cambio.
               IF ("Tipo linea" = "Tipo linea"::Hotel) AND ("Tipo uso" = "Tipo uso"::Seleccion) THEN BEGIN
                 cCotCom.BuscarContratosxHotel(Rec);
                 MarcarCabRecalcular;
               END;
             END;

    OnDelete=BEGIN

               BorrarLineasAsociadas;
               MarcarCabRecalcular;
             END;

    CaptionML=[ENU=Quote Hotel;
               ESP=Hotel cotizacion];
  }
  FIELDS
  {
    { 1   ;   ;Id cotizacion       ;Integer       ;TableRelation="Cabecera cotizacion".Id;
                                                   CaptionML=[ENU=Quote ID;
                                                              ESP=Id Cotizacion];
                                                   Description=FK Id cotizacion }
    { 2   ;   ;Id                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ESP=ID];
                                                   Description=PK }
    { 3   ;   ;Hotel               ;Code20        ;TableRelation=Hotel.Hotel;
                                                   OnLookup=VAR
                                                              lwHotel@1103355000 : Code[20];
                                                            BEGIN
                                                              lwHotel := cCotCom.LookupHotel("Id cotizacion");

                                                              IF (lwHotel <> '') AND (lwHotel <> Hotel) THEN
                                                                VALIDATE(Hotel, lwHotel);
                                                            END;

                                                   CaptionML=[ENU=Hotel;
                                                              ESP=Hotel] }
    { 4   ;   ;Habitacion          ;Code10        ;CaptionML=[ENU=Room;
                                                              ESP=Habitacion] }
    { 5   ;   ;N§ Habitaciones     ;Decimal       ;CaptionML=[ENU=Rooms No.;
                                                              ESP=N§ Habitaciones] }
    { 6   ;   ;Tipo linea          ;Option        ;CaptionML=[ENU=Line type;
                                                              ESP=Tipo Linea];
                                                   OptionCaptionML=[ENU=Hotel,Contract,Room,Person,Extra;
                                                                    ESP=Hotel,Contrato,Habitacion,Persona,Extra];
                                                   OptionString=Hotel,Contrato,Habitacion,Persona,Extra;
                                                   Description=Hotel,Contrato,Habitacion,Persona,Extra }
    { 7   ;   ;Seleccion           ;Boolean       ;CaptionML=[ENU=Selection;
                                                              ESP=Seleccion];
                                                   Description=Indica si el Hotel est  seleccionado. }
    { 8   ;   ;Contrato            ;Code10        ;CaptionML=[ENU=Contract;
                                                              ESP=Contrato] }
    { 9   ;   ;Fecha inicio        ;Date          ;OnValidate=BEGIN

                                                                IF NOT cCotCom.ComprobarFechasCabecera("Id cotizacion", "Fecha inicio") THEN
                                                                  ERROR(Text003, FIELDNAME("Fecha inicio"));

                                                                IF ("Fecha inicio" <> 0D) AND ("Fecha fin" <> 0D) THEN
                                                                  IF "Fecha inicio" > "Fecha fin" THEN
                                                                    ERROR(Text002);
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ESP=Fecha inicio];
                                                   Description=Inicio de periodo de vigencia del contrato en el periodo de la cotizaci¢n. }
    { 10  ;   ;Fecha fin           ;Date          ;OnValidate=BEGIN

                                                                IF NOT cCotCom.ComprobarFechasCabecera("Id cotizacion", "Fecha fin") THEN
                                                                  ERROR(Text003, FIELDNAME("Fecha fin"));

                                                                IF ("Fecha inicio" <> 0D) AND ("Fecha fin" <> 0D) THEN
                                                                  IF "Fecha inicio" > "Fecha fin" THEN
                                                                    ERROR(Text002);
                                                              END;

                                                   CaptionML=[ENU=End Date;
                                                              ESP=Fecha fin];
                                                   Description=Final de periodo de vigencia del contrato en el periodo de la cotizaci¢n. }
    { 11  ;   ;Tipo Contrato       ;Option        ;CaptionML=[ENU=Contract type;
                                                              ESP=Tipo contrato];
                                                   OptionCaptionML=[ENU=Purchase,Sale;
                                                                    ESP=Compra,Venta];
                                                   OptionString=Compra,Venta;
                                                   Description=Compra,Venta }
    { 12  ;   ;Zona                ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Hotel."Zona Fisica" WHERE (Hotel=FIELD(Hotel)));
                                                   CaptionML=[ENU=Location;
                                                              ESP=Zona];
                                                   Description=CalcField para hotel;
                                                   Editable=No }
    { 13  ;   ;Categoria           ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Hotel.Categoria WHERE (Hotel=FIELD(Hotel)));
                                                   CaptionML=[ENU=Category;
                                                              ESP=Categoria];
                                                   Description=CalcField para hotel;
                                                   Editable=No }
    { 14  ;   ;Ocupacion           ;Integer       ;CaptionML=[ENU=Occupancy;
                                                              ESP=Ocupacion] }
    { 15  ;   ;Regimen             ;Code10        ;TableRelation=Regimen.Regimen;
                                                   CaptionML=[ENU=Board;
                                                              ESP=Regimen] }
    { 16  ;   ;N§ Persona          ;Integer       ;CaptionML=[ENU=Person No.;
                                                              ESP=N§ Persona];
                                                   Description=Hace referencia al N§ Reserva de personas calculo }
    { 17  ;   ;Edad                ;Integer       ;CaptionML=[ENU=Age;
                                                              ESP=Edad] }
    { 18  ;   ;Posicion            ;Integer       ;CaptionML=[ENU=Location;
                                                              ESP=Posicion];
                                                   Description=Posicion de la persona en la habitaci¢n }
    { 19  ;   ;Extra               ;Code10        ;TableRelation="Codigo extra".Codigo;
                                                   CaptionML=[ENU=Extra;
                                                              ESP=Extra];
                                                   Description=Codigo de extra. (Solo tipo linea extra) }
    { 20  ;   ;Id Hotel            ;Integer       ;CaptionML=[ENU=Hotel Id;
                                                              ESP=Id Hotel] }
    { 21  ;   ;Tipo uso            ;Option        ;CaptionML=[ENU=Usage type;
                                                              ESP=Tipo uso];
                                                   OptionCaptionML=[ENU=Selection,Calculation;
                                                                    ESP=Seleccion,Calculo];
                                                   OptionString=Seleccion,Calculo }
    { 22  ;   ;Nombre              ;Text50        ;CaptionML=[ENU=Name;
                                                              ESP=Nombre] }
    { 23  ;   ;Responsable         ;Boolean       ;CaptionML=[ENU="Responsible ";
                                                              ESP=Responsable];
                                                   Description=Indica el responsable de la habitacion }
    { 24  ;   ;N§ Linea            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Linea calculo cotizacion"."N§ Linea" WHERE (Id Cotizacion=FIELD(Id cotizacion),
                                                                                                                   Id Producto=FIELD(Id Hotel)));
                                                   CaptionML=[ENU=Line No.;
                                                              ESP=N§ Linea];
                                                   BlankZero=Yes }
    { 25  ;   ;Errores             ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Error cotizacion" WHERE (Id Hotel=FIELD(Id)));
                                                   CaptionML=[ENU=Errors;
                                                              ESP=Errores] }
    { 26  ;   ;Coste manual        ;Decimal       ;CaptionML=[ENU=Manual Cost;
                                                              ESP=Coste Manual];
                                                   AutoFormatType=2 }
    { 27  ;   ;Aplicacion coste manual;Option     ;CaptionML=[ENU=Manual cost application;
                                                              ESP=Aplicacion coste manual];
                                                   OptionCaptionML=[ENU=,Per pax,Per room,Do not apply,Per Stay;
                                                                    ESP=,Por Pax,Por Habitacion,No Aplicar,Por Estancia];
                                                   OptionString=,Por Pax,Por Habitacion,No Aplicar,Por Estancia }
    { 28  ;   ;Ingreso manual      ;Decimal       ;CaptionML=[ENU=Manual Income;
                                                              ESP=Ingreso Manual];
                                                   AutoFormatType=2 }
    { 29  ;   ;Aplicacion ingreso manual;Option   ;CaptionML=[ENU=Manual income application;
                                                              ESP=Aplicacion ingreso manual];
                                                   OptionCaptionML=[ENU=,Per pax,Per room,Do not apply,Per Stay;
                                                                    ESP=,Por Pax,Por Habitacion,No Aplicar,Por Estancia];
                                                   OptionString=,Por Pax,Por Habitacion,No Aplicar,Por Estancia }
    { 30  ;   ;Importe Touroperador;Decimal       ;CaptionML=[ENU=Amount TTOO;
                                                              ESP=Importe Touroperador] }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
    {    ;Id cotizacion                           ;KeyGroups=RENUMERING }
    {    ;Id Hotel,Tipo linea,Contrato,Tipo Contrato,Id cotizacion;
                                                   SumIndexFields=N§ Habitaciones;
                                                   KeyGroups=RENUMERING }
    {    ;Id cotizacion,Fecha inicio,Contrato     ;KeyGroups=RENUMERING }
    {    ;Id cotizacion,Edad                      ;KeyGroups=RENUMERING }
    {    ;Id cotizacion,Id Hotel                  ;KeyGroups=RENUMERING }
    {    ;Id cotizacion,Tipo uso,Tipo linea       ;KeyGroups=RENUMERING }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1103355000 : TextConst 'ENU=Hotel %1 already exists in the selection for the quote %2;ESP=El hotel %1 ya existe en la selecci¢n para la cotizaci¢n %2.';
      cCotCom@1103355001 : Codeunit 7009913;
      Text002@1103355002 : TextConst 'ENU=Start date must be lower or equal than End date;ESP=La Fecha inicio debe ser menor o igual a la Fecha fin.';
      Text003@1103355003 : TextConst 'ENU=%1 is not found into the range of dates from the header;ESP=La %1 no se encuentra dentro del rango de fechas de la cabecera.';

    PROCEDURE ActualizaRangoFechas@1103355001();
    VAR
      lrCab@1103355000 : Record 7009871;
    BEGIN
      // ActualizaRangoFechasHotel

      IF "Tipo linea" <> xRec."Tipo linea"::Hotel THEN
        EXIT;

      IF lrCab.GET("Id cotizacion") THEN BEGIN
        IF "Fecha inicio" = 0D THEN
          "Fecha inicio" := lrCab."Fecha entrada";

        IF "Fecha fin" = 0D THEN
          "Fecha fin"    := lrCab."Fecha salida";

        IF Regimen = '' THEN
          Regimen := lrCab.Regimen;
      END;
    END;

    LOCAL PROCEDURE BorrarLineasAsociadas@1103355002();
    VAR
      lrLinCalCot@1103355000 : Record 7009873;
      lrLinCot@1103355001 : Record 7009872;
      lrDistrib@1103355002 : Record 7009875;
      lrErrores@1103355003 : Record 7009876;
    BEGIN
      // BorrarLineasAsociadas
      // Borramos las lineas asociadas a un hotel o habitaci¢n seleccionado para la cotizaci¢n.

      CASE "Tipo linea" OF

        "Tipo linea"::Hotel: BEGIN
          lrLinCalCot.SETCURRENTKEY("Id cotizacion", "Id Hotel");
          lrLinCalCot.SETRANGE ("Id cotizacion", "Id cotizacion");
          lrLinCalCot.SETRANGE ("Id Hotel"     , "Id Hotel");
          lrLinCalCot.SETFILTER(Id             , '<>%1', Id);

          lrLinCalCot.DELETEALL;

          lrLinCot.SETCURRENTKEY("Id Cotizacion", "Id Producto", Hotel);
          lrLinCot.SETRANGE("Id Cotizacion", "Id cotizacion");
          lrLinCot.SETRANGE("Id Producto"  , Id);
          lrLinCot.SETRANGE(Tipo           , lrLinCot.Tipo::Hotel);

          IF lrLinCot.FINDSET THEN BEGIN
            REPEAT
              lrLinCot.BorrarLineasCalculo;
            UNTIL lrLinCot.NEXT = 0;
          END;

          lrLinCot.DELETEALL;


          lrErrores.SETCURRENTKEY("Id Cotizacion", "Id Hotel");

          lrErrores.SETRANGE ("Id Cotizacion", "Id cotizacion");
          lrErrores.SETRANGE ("Id Hotel"     , Id);

          lrErrores.DELETEALL;

          lrDistrib.SETCURRENTKEY("Id Hotel", "Id habitacion", "Id persona");
          lrDistrib.SETRANGE ("Id Hotel", Id);
          lrDistrib.DELETEALL;

        END;

        "Tipo linea"::Habitacion: BEGIN
          lrLinCot.SETCURRENTKEY("Id Cotizacion", "Id Producto", Hotel);
          lrLinCot.SETRANGE("Id Cotizacion", "Id cotizacion");
          lrLinCot.SETRANGE("Id Producto"  , "Id Hotel");
          lrLinCot.SETRANGE("Id Habitacion", Id);
          lrLinCot.SETRANGE(Tipo           , lrLinCot.Tipo::Hotel);

          IF lrLinCot.FINDFIRST THEN
             lrLinCot.DELETE(TRUE);

          // Eliminamos la distribucion de habitaciones.
          lrDistrib.SETCURRENTKEY("Id habitacion", "N§ habitacion", Posicion);
          lrDistrib.SETRANGE("Id habitacion", Id);
          lrDistrib.DELETEALL;

        END;

      END;
    END;

    PROCEDURE MarcarCabRecalcular@1103355000();
    VAR
      lrCab@1103355000 : Record 7009871;
    BEGIN
      // MarcarCabRecalcular
      // Marcamos la cotizacion como recalcular si ha habido cambios en
      // las l¡neas asociadas.

      IF ("Tipo uso" = "Tipo uso"::Seleccion) THEN BEGIN
        lrCab.GET("Id cotizacion");
        IF lrCab.Estado = lrCab.Estado::Calculada THEN BEGIN
          lrCab.MarcarRecalcular;
          lrCab.MODIFY;
        END;
      END;
    END;

    PROCEDURE InsertarError@1103355005(pwMensaje@1103355001 : Text[80]);
    VAR
      lrError@1103355000 : Record 7009876;
    BEGIN
      // InsertarError

      lrError.Tipo            := lrError.Tipo::Error;
      lrError.Mensaje         := pwMensaje;

      lrError."Id Hotel"      := "Id Hotel";
      lrError."Id Linea"      := Id;
      lrError."Id Cotizacion" := "Id cotizacion";

      lrError.INSERT(TRUE);
    END;

    PROCEDURE InsertarAviso@1103355007(pwMensaje@1103355000 : Text[80]);
    VAR
      lrError@1103355001 : Record 7009876;
    BEGIN
      // InsertarAviso

      lrError.Tipo := lrError.Tipo::Aviso;
      lrError.Mensaje         := pwMensaje;

      lrError."Id Hotel"      := "Id Hotel";
      lrError."Id Linea"      := Id;
      lrError."Id Cotizacion" := "Id cotizacion";

      lrError.INSERT(TRUE);
    END;

    PROCEDURE NombreHotel@1103355006() : Text[250];
    VAR
      lrHotel@1103355000 : Record 7009724;
    BEGIN
      // NombreHotel

      IF lrHotel.GET(Hotel) THEN
        EXIT(lrHotel.Nombre);
    END;

    LOCAL PROCEDURE A¤adirDistribuciones@1103355003();
    VAR
      lrDistrib@1103355000 : Record 7009875;
      lrDistribsHab@1103355002 : Record 7009875;
      lrHoteles@1103355001 : Record 7009873;
      lrHabs@1103355003 : Record 7009873;
    BEGIN
      // A¤adirDistribuciones
      // Si se a¤ade una persona a la cotizaci¢n, a¤adimos las l¡neas de distribuci¢n
      // a los hoteles ya existentes.
      // Si se a¤ade una habitaci¢n a la cotizaci¢n, a¤adimos las distribuciones a esta.

      CASE "Tipo linea" OF
        "Tipo linea"::Persona : BEGIN

          lrHoteles.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
          lrHoteles.SETRANGE ("Id cotizacion", "Id cotizacion");
          lrHoteles.SETRANGE ("Tipo uso"     , "Tipo uso"::Seleccion);
          lrHoteles.SETRANGE ("Tipo linea"   , "Tipo linea"::Hotel);

          IF lrHoteles.FINDSET THEN BEGIN
            REPEAT

              // La l¡nea de selecci¢n de paxes para los hoteles.
              lrDistrib.INIT;
              lrDistrib."Id persona"    := Id;
              lrDistrib."Id habitacion" := 0;
              lrDistrib."Id Hotel"      := lrHoteles.Id;

              lrDistrib."N§ habitacion" := 0;
              lrDistrib.Posicion        := 0;

              lrDistrib.Seleccion       := FALSE;

              lrDistrib.INSERT(TRUE);

              // Las l¡neas de distribuci¢n para las habitaciones.
              lrHabs.SETCURRENTKEY("Id Hotel", "Tipo linea", Contrato, "Tipo Contrato", "Id cotizacion");
              lrHabs.SETRANGE ("Id Hotel"  , lrHoteles.Id);
              lrHabs.SETRANGE ("Tipo linea", lrHabs."Tipo linea"::Habitacion);
              lrHabs.SETRANGE ("Tipo uso"  , lrHabs."Tipo uso"::Seleccion);

              IF lrHabs.FINDSET THEN BEGIN
                REPEAT

                  lrDistribsHab := lrDistrib;

                  lrDistrib."Id habitacion" := lrHabs.Id;

                  lrDistrib.INSERT(TRUE);

                UNTIL lrHabs.NEXT = 0;
              END;
            UNTIL lrHoteles.NEXT = 0;
          END;
        END;

        "Tipo linea":: Habitacion : BEGIN

          lrDistrib.RESET;
          lrDistrib.SETCURRENTKEY("Id Hotel", "Id habitacion", "Id persona");
          lrDistrib.SETRANGE ("Id Hotel"     , "Id Hotel");
          lrDistrib.SETRANGE ("Id habitacion", 0);

          IF lrDistrib.FINDSET THEN BEGIN
            REPEAT

              lrDistribsHab := lrDistrib;

              lrDistribsHab."Id habitacion" := Id;

              lrDistribsHab.INSERT(TRUE);

            UNTIL lrDistrib.NEXT = 0;
          END;
        END;

      END;
    END;

    BEGIN
    {
      ## AJS 23.03.2009

        .- He creado la funcion NombreHotel que retorna el nombre del hotel de la linea actual

      ## AJF 15/06/09

        .- (09/00279) Modificado Lookup de hotel para que filtre por el pais de la cabecera de cotizaci¢n

      ## AJF 16/06/09

        .- (INC-41445) A¤adido control para que las fechas no se salgan del rango de fechas de la cabecera.

      ## AJF 29/06/09

        .- (09/00319) cambio c¢digos de hotel de code10 a code20.

      ## AJF 02/07/09

        .- (09/00333) A¤adida opci¢n "Por Estancia" en los campos "Aplicacion coste manual" y "Aplicacion ingreso manual"
           para indicar que el precio es por toda la Estancia.

      $001 AJS 28102014 Amplio el campo Nombre a Text50
    }
    END.
  }
}
