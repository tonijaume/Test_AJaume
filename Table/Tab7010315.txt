OBJECT Table 7010315 Punto de recogida
{
  OBJECT-PROPERTIES
  {
    Date=12/12/14;
    Time=16:25:28;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               //+$002 <
               rSerPar.RESET;
               rSerPar.SETRANGE("Punto recogida", Codigo);
               IF NOT rSerPar.ISEMPTY THEN
                 ERROR(Text0017);
               //+$002 >
             END;

    CaptionML=ESP=Punto de recogida;
    LookupFormID=Form7035266;
    DrillDownFormID=Form7035266;
  }
  FIELDS
  {
    { 1   ;   ;Codigo              ;Code10        ;CaptionML=ESP=Codigo;
                                                   NotBlank=Yes }
    { 2   ;   ;Descripci¢n         ;Text50        ;CaptionML=ESP=Descripci¢n }
    { 3   ;   ;Zona fisica         ;Code10        ;TableRelation="Zona fisica transfer".Codigo;
                                                   OnValidate=VAR
                                                                lrSerPar@1100253000 : Record 7010359;
                                                                lrParte@1100253001 : Record 7010360;
                                                                lwCont@1100253002 : Integer;
                                                                lwTotal@1100253003 : Integer;
                                                              BEGIN

                                                                IF "Zona fisica" <> xRec."Zona fisica" THEN BEGIN

                                                                  IF xRec."Zona fisica" <> '' THEN BEGIN

                                                                    // Gestiona el cambio de zona fisica en las lineas de Partes

                                                                    CLEAR(lrSerPar);
                                                                    lrSerPar.SETCURRENTKEY("N§ Parte","Punto recogida","Hora recogida");
                                                                    lrSerPar.SETRANGE("Punto recogida",Codigo);
                                                                    IF lrSerPar.FINDSET(TRUE) THEN BEGIN
                                                                      IF NOT CONFIRM(Text0007, FALSE) THEN
                                                                        ERROR(Text0008);

                                                                      wVentana.OPEN(Text0002);
                                                                      lwTotal := lrSerPar.COUNT;
                                                                      lwCont  := 0;
                                                                      REPEAT
                                                                        lwCont +=1;
                                                                        wVentana.UPDATE(1,ROUND(lwCont/lwTotal*10000,1));

                                                                        lrSerPar.VALIDATE("Zona fisica", "Zona fisica");
                                                                        lrSerPar.MODIFY;
                                                                      UNTIL  lrSerPar.NEXT = 0;
                                                                      wVentana.CLOSE;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Zona fisica;
                                                   NotBlank=Yes;
                                                   Description=FK Zona fisica }
    { 5   ;   ;Orden entrada       ;Integer       ;OnValidate=BEGIN
                                                                // ----  Comprobar que el orden de entrada no esta asignado a otro punto dentro de la  ----
                                                                // ----  misma zona fisica.                                                            ----

                                                                rPto.RESET;
                                                                rPto.SETCURRENTKEY("Zona fisica",
                                                                                   Codigo);
                                                                rPto.SETRANGE("Zona fisica"  , "Zona fisica");
                                                                rPto.SETRANGE("Orden entrada", "Orden entrada");
                                                                IF rPto.FINDFIRST THEN
                                                                  ERROR(mismo_orden_entrada, rPto.Codigo);
                                                                VALIDATE("Orden salida", 10000 - "Orden entrada");
                                                              END;

                                                   CaptionML=ESP=Orden entrada }
    { 7   ;   ;Orden salida        ;Integer       ;OnValidate=BEGIN
                                                                // ----  Comprobar que el orden de salida no esta asignado a otro punto dentro de la  ----
                                                                // ----  misma zona fisica.                                                            ----

                                                                rPto.RESET;
                                                                rPto.SETCURRENTKEY("Zona fisica",
                                                                                   Codigo);
                                                                rPto.SETRANGE("Zona fisica" , "Zona fisica");
                                                                rPto.SETRANGE("Orden salida", "Orden salida");
                                                                IF rPto.FINDFIRST THEN
                                                                  ERROR(mismo_orden_salida, rPto.Codigo);
                                                              END;

                                                   CaptionML=ESP=Orden salida }
    { 9   ;   ;Lugar de recogida   ;Code10        ;TableRelation="Lugar de recogida".Codigo;
                                                   CaptionML=ESP=Lugar de recogida;
                                                   Description=FK Lugar de recogida }
    { 10  ;   ;Direccion           ;Text50        ;CaptionML=ESP=Direccion }
    { 11  ;   ;C.P.                ;Code10        ;OnLookup=VAR
                                                              lrCods@1100244000 : Record 225;
                                                            BEGIN
                                                              lrCods.RESET;
                                                              IF FORM.RUNMODAL(0,lrCods)= ACTION::LookupOK THEN BEGIN
                                                                VALIDATE("C.P.",lrCods.Code);
                                                                VALIDATE(Poblacion,lrCods.City);
                                                              END;
                                                            END;

                                                   CaptionML=ESP=C.P. }
    { 12  ;   ;Poblacion           ;Text30        ;CaptionML=ESP=Poblacion }
    { 13  ;   ;Ubicacion           ;Text50        ;CaptionML=ESP=Ubicacion }
    { 14  ;   ;Pagina Plano        ;Integer       ;CaptionML=ESP=Pagina Plano }
    { 15  ;   ;Coordenada X        ;Decimal       ;CaptionML=ESP=Coordenada X }
    { 16  ;   ;Coordenada Y        ;Decimal       ;CaptionML=ESP=Coordenada Y }
    { 17  ;   ;Numero Hotel        ;Integer       ;CaptionML=ESP=Numero Hotel }
    { 18  ;   ;Imagen              ;BLOB          ;CaptionML=ESP=Imagen }
    { 30  ;   ;Documento Descriptivo;Text250      ;OnValidate=VAR
                                                                lwExt@1100253000 : Code[3];
                                                              BEGIN
                                                                IF "Documento Descriptivo" <> '' THEN BEGIN
                                                                  IF NOT EXISTS("Documento Descriptivo") THEN
                                                                    ERROR(Text0003,"Documento Descriptivo");

                                                                  lwExt := COPYSTR("Documento Descriptivo",STRLEN("Documento Descriptivo")-2);
                                                                  IF NOT (lwExt IN [Text50000,Text50001,Text50002]) THEN
                                                                    ERROR(Text0004,lwExt);
                                                                END
                                                                ELSE BEGIN
                                                                  "Marcar Doc.Descrpt por defecto":= FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=ESP=Documento Descriptivo }
    { 31  ;   ;Marcar Doc.Descrpt por defecto;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Marcar Doc.Descrpt por defecto" THEN
                                                                  IF "Documento Descriptivo"='' THEN
                                                                    ERROR(Text0005);
                                                              END;

                                                   CaptionML=ESP=Marcar Doc.Descrpt por defecto;
                                                   Description=Sirve para marcar el campo Automaticamente en Servicios -Partes }
    { 35  ;   ;Numero              ;Text15        ;CaptionML=ESP=Numero;
                                                   Description=Numero de Calle }
  }
  KEYS
  {
    {    ;Codigo                                  ;Clustered=Yes }
    {    ;Zona fisica,Codigo                       }
    {    ;Descripci¢n                              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text50000@1103355010 : TextConst 'ESP=DOC';
      Text50001@1103355011 : TextConst 'ESP=PDF';
      rPto@1100244000 : Record 7010315;
      Text50002@1000000000 : TextConst 'ESP=JPG';
      mismo_orden_entrada@1100244001 : TextConst 'ESP=El punto de recogida %1 tiene el numero de orden de entrada que intenta asignar.';
      mismo_orden_salida@1100244002 : TextConst 'ESP=El punto de recogida %1 tiene el numero de orden de salida que intenta asignar.';
      Text0001@1100253004 : TextConst 'ESP=El Parte %1 relacionado con este Punto ya est  Confirmado';
      Text0002@1100253006 : TextConst 'ESP=Repasando Puntos @1@@@@@@@@@@@@';
      Text0003@1100253007 : TextConst 'ESP=No se encuentra el documento\ %1';
      Text0004@1100253008 : TextConst 'ESP=No estan permitidos archivos con extensi¢n %1';
      rSerPar@1000000001 : Record 7010359;
      cFunBas@1100253009 : Codeunit 7010310;
      wVentana@1100253000 : Dialog;
      Text0005@1100253001 : TextConst 'ESP=Debe de definir un Documento Descriptivo';
      Text0006@1100253002 : TextConst 'ESP="Word/PDF|*.DOC;*.PDF"';
      Text0007@1103355001 : TextConst 'ESP=Este punto de recogida ya se ha utilizado en un parte de trabajo, desea cambiarlo de zona fisica.';
      Text0008@1103355000 : TextConst 'ESP=Modificacion cancelada por el usuario.';
      Text0009@1103355009 : TextConst 'ESP=¨El punto %1 es un c¢digo repetido que desee remplazar por otro?';
      Text0010@1103355008 : TextConst 'ESP=Indique el c¢digo que desee que reemplace a %1';
      Text0011@1103355007 : TextConst 'ESP=¨Desea realmente Cambiar las referencias del c¢digo %1 por %2?';
      Text0012@1103355006 : TextConst 'ESP=Proceso Anulado';
      Text0013@1103355005 : TextConst 'ESP=Los dos puntos tienen Zonas Fisicas Distintas %1/%2.\¨Desea Seguir?';
      Text0014@1103355004 : TextConst 'ESP="Cambio de Codigo punto %1 por %2 "';
      Text0015@1103355003 : TextConst 'ESP=\#1###############\@2@@@@@@@@@@@@@@';
      Text0016@1103355002 : TextConst 'ESP=El punto %1 ha sido enteramente cambiado por %2';
      Text0017@1000000002 : TextConst 'ESP=No se puede borrar un punto de recogida ya utilizado';

    PROCEDURE ImprimeDocumentoDescriptivo@1100253000(pwTexto@1100253000 : ARRAY [5] OF Text[250]);
    VAR
      lwExt@1100253001 : Code[10];
    BEGIN
      // ImprimeDocumentoDescriptivo

      IF "Documento Descriptivo"='' THEN
        EXIT;

      lwExt := COPYSTR("Documento Descriptivo",STRLEN("Documento Descriptivo")-2);

      IF lwExt=Text50000 THEN
        cFunBas.ImprimeDocumentoWord("Documento Descriptivo",pwTexto) // Si es un documento word
      ELSE
        cFunBas.ImprimeDocumento("Documento Descriptivo");
    END;

    PROCEDURE Ense¤aDocumentoDescriptivo@1100253001();
    BEGIN
      // Ense¤aDocumentoDescriptivo

      IF "Documento Descriptivo"='' THEN
        EXIT;

      cFunBas.Ense¤aDocumento("Documento Descriptivo");
    END;

    PROCEDURE GetDescripcion@1100253002(pwCod@1100253001 : Code[10]) : Text[50];
    VAR
      lrPunt@1100253000 : Record 7010315;
    BEGIN
      // GetDescripcion
      // Devuelve la descripci¢n del codigo pasado como parametro
      IF lrPunt.GET(pwCod) THEN
        EXIT(lrPunt.Descripci¢n);
    END;

    PROCEDURE CompruebaDuplicado@1103355000();
    VAR
      lrZonFis@1103355003 : Record 7010314;
      lrSerPar@1103355000 : Record 7010359;
      lrSerPar2@1103355004 : Record 7010359;
      lrPunt2@1103355002 : Record 7010315;
      lrLinSerReg@1103355005 : Record 7010394;
      lrLinSerReg2@1103355006 : Record 7010394;
      lrTipSer@1103355009 : Record 7010319;
      lrTipSer2@1103355010 : Record 7010319;
      lrSer@1103355011 : Record 7010358;
      lrSer2@1103355012 : Record 7010358;
      lrGrp@1103355007 : Record 7010374;
      lrGrp2@1103355008 : Record 7010374;
      lrParte@1103355013 : Record 7010360;
      lrParte2@1103355014 : Record 7010360;
      lrSerReg@1103355015 : Record 7010379;
      lrSerReg2@1103355016 : Record 7010379;
      lrRutaSR@1103355017 : Record 7035387;
      lrRutaSR2@1103355018 : Record 7035387;
      lwOk@1103355001 : Boolean;
      lwText@1103355019 : Text[1024];
      lwTotal@1103355020 : Integer;
      lwCont@1103355021 : Integer;
    BEGIN
      // CompruebaDuplicado
      // Esta funci¢n se dispara al borrar un registro de punto de recogida.
      // Si ya se ha aplicado se pide si es un codigo duplicado que se quiera cambiar por otro


      lwOk := CONFIRM(Text0009,FALSE, Codigo);

      IF lwOk THEN
        lwOk := CONFIRM(Text0010, FALSE, Codigo)
      ELSE
        EXIT; // A partir de aqu¡ se generar  un error si no se completa la

      IF lwOk THEN BEGIN
        CLEAR(lrPunt2);
        lrPunt2.FILTERGROUP(2);
        lrPunt2.SETFILTER(Codigo, '<>%1', Codigo);
        lrPunt2.FILTERGROUP(0);
        lwOk := FORM.RUNMODAL(0,lrPunt2) = ACTION::LookupOK;
      END;

      IF lwOk THEN
        lwOk := CONFIRM(Text0011, FALSE, Codigo, lrPunt2.Codigo);

      IF lwOk THEN
        IF lrPunt2."Zona fisica" <> "Zona fisica" THEN
          lwOk := CONFIRM(Text0013, FALSE, "Zona fisica", lrPunt2."Zona fisica");

      IF lwOk THEN BEGIN
        lrZonFis.RESET;
        lrZonFis.GET(lrPunt2."Zona fisica");
        lwText := STRSUBSTNO(Text0014, Codigo, lrPunt2.Codigo);
        lwText += Text0015;
        wVentana.OPEN(lwText);

        wVentana.UPDATE(1,lrSerPar.TABLECAPTION);
        CLEAR(lrSerPar);
        lrSerPar.SETCURRENTKEY("N§ Parte","Punto recogida","Hora recogida");
        lrSerPar.SETRANGE("Punto recogida", Codigo);
        IF lrSerPar.FINDSET(TRUE) THEN BEGIN
          lwTotal := lrSerPar.COUNT;
          lwCont  :=0;
          REPEAT
            lrSerPar2 := lrSerPar;
            lrSerPar2."Punto recogida" := lrPunt2.Codigo;
            lrSerPar2."Zona fisica"    := lrPunt2."Zona fisica";
            lrSerPar2."Orden zona"      := lrZonFis.Orden;
            IF lrSerPar2."Descripcion Punto Recogida" = Descripci¢n THEN
              lrSerPar2."Descripcion Punto Recogida" := lrPunt2.Descripci¢n;
            lrSerPar2.MODIFY;
            Marca(lwCont,lwTotal);
          UNTIL lrSerPar.NEXT=0;
        END;

        wVentana.UPDATE(1,lrLinSerReg.TABLECAPTION);
        CLEAR(lrLinSerReg); // Recogidas Servicios Regulares
        lrLinSerReg.SETCURRENTKEY("Punto Recogida");
        lrLinSerReg.SETRANGE("Punto Recogida", Codigo);
        IF lrLinSerReg.FINDSET(TRUE) THEN BEGIN
          lwTotal := lrLinSerReg.COUNT;
          lwCont  :=0;
          REPEAT
            lrLinSerReg2 := lrLinSerReg;
            lrLinSerReg2."Punto Recogida":= lrPunt2.Codigo;
            IF lrLinSerReg2."Descripcion Punto Recogida" = Descripci¢n THEN
              lrLinSerReg2."Descripcion Punto Recogida" := lrPunt2.Descripci¢n;
            lrLinSerReg2.MODIFY;
            Marca(lwCont,lwTotal);
          UNTIL lrLinSerReg.NEXT=0;
        END;

        wVentana.UPDATE(1,lrGrp.TABLECAPTION);
        CLEAR(lrGrp);
        lrGrp.SETCURRENTKEY("Punto Recogida"); // Grupos
        lrGrp.SETRANGE("Punto Recogida", Codigo);
        IF lrGrp.FINDSET(TRUE) THEN BEGIN
          lwTotal := lrGrp.COUNT;
          lwCont  :=0;
          REPEAT
            lrGrp2 := lrGrp;
            lrGrp2."Punto Recogida" := lrPunt2.Codigo;
            IF lrGrp2."Descripcion Punto Recogida" = Descripci¢n THEN
              lrGrp2."Descripcion Punto Recogida" := lrPunt2.Descripci¢n;
            lrGrp2.MODIFY;
            Marca(lwCont,lwTotal);
          UNTIL lrGrp.NEXT=0;
        END;

        wVentana.UPDATE(1, lrTipSer.TABLECAPTION);
        CLEAR(lrTipSer); // Tipo de Servicio
        lrTipSer.SETRANGE("Pto Origen x Defecto", Codigo);
        IF lrTipSer.FINDSET(TRUE) THEN BEGIN
          lwTotal := lrTipSer.COUNT;
          lwCont  :=0;
          REPEAT
            lrTipSer2 := lrTipSer;
            lrTipSer2."Pto Origen x Defecto" := lrPunt2.Codigo;
            lrTipSer2.MODIFY;
            Marca(lwCont,lwTotal);
          UNTIL lrTipSer.NEXT=0;
        END;

        wVentana.UPDATE(1, lrSer.TABLECAPTION);
        CLEAR(lrSer); // Servicio
        lrSer.SETRANGE("Origen/Destino", Codigo);
        IF lrSer.FINDSET(TRUE) THEN BEGIN
          lwTotal := lrSer.COUNT;
          lwCont  :=0;
          REPEAT
            lrSer2 := lrSer;
            lrSer2."Origen/Destino" := lrPunt2.Codigo;
            lrSer2.MODIFY;
            Marca(lwCont,lwTotal);
          UNTIL lrSer.NEXT=0;
        END;

        wVentana.UPDATE(1, lrParte.TABLECAPTION);
        CLEAR(lrParte); // Parte
        lrParte.SETRANGE("Origen/Destino", Codigo);
        IF lrParte.FINDSET(TRUE) THEN BEGIN
          lwTotal := lrParte.COUNT;
          lwCont  :=0;
          REPEAT
            lrParte2 := lrParte;
            lrParte2."Origen/Destino":= lrPunt2.Codigo;
            lrParte2.MODIFY;
            Marca(lwCont,lwTotal);
          UNTIL lrParte.NEXT=0;
         END;

        wVentana.UPDATE(1, lrSerReg.TABLECAPTION);
        CLEAR(lrSerReg); // Servicios Regulares
        lrSerReg.SETRANGE("Origen/Destino", Codigo);
        IF lrSerReg.FINDSET(TRUE) THEN BEGIN
          lwTotal := lrSerReg.COUNT;
          lwCont  :=0;
          REPEAT
            lrSerReg2 := lrSerReg;
            lrSerReg2."Origen/Destino" := lrPunt2.Codigo;
            lrSerReg2.MODIFY;
            Marca(lwCont,lwTotal);
          UNTIL lrSerReg.NEXT=0;
        END;

        wVentana.UPDATE(1, lrRutaSR.TABLECAPTION);
        CLEAR(lrRutaSR); // Rutas Servicios Regulares
        lrRutaSR.SETRANGE("Origen/Destino", Codigo);
        IF lrRutaSR.FINDSET(TRUE) THEN BEGIN
          lwTotal := lrRutaSR.COUNT;
          lwCont  :=0;
          REPEAT
            lrRutaSR2 := lrRutaSR;
            lrRutaSR2."Origen/Destino":= lrPunt2.Codigo;
            lrRutaSR2.MODIFY;
            Marca(lwCont,lwTotal);
          UNTIL lrRutaSR.NEXT=0;
        END;
        wVentana.CLOSE;
      END;

      IF NOT lwOk THEN
        ERROR(Text0012);

      MESSAGE(Text0016, Codigo, lrPunt2.Codigo);
    END;

    PROCEDURE Marca@1103355031(VAR pwCont@1103355000 : Integer;pwTotal@1103355001 : Integer);
    BEGIN
      // Marca

      pwCont +=1;

      // Solo marcamos uno de cada 100
      IF pwCont MOD 100 = 0 THEN
        wVentana.UPDATE(2,ROUND(pwCont/pwTotal*10000,1));
    END;

    BEGIN
    {
      $001 AJS 13052013 Permitimos la extension JPG en los documentos descriptivos de los puntos de recogida

      $002 AJS 12122014 No permitimos borrar un punto de recogida utilizado en algun parte
    }
    END.
  }
}
