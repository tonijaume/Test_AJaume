OBJECT Table 7332 Whse. Internal Put-away Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES4.00.02;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Item No.");
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnModify=BEGIN
               TESTFIELD("Item No.");
               xRec.TESTFIELD("Qty. Put Away",0);
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnDelete=VAR
               ItemTrackingMgt@1001 : Codeunit 6500;
               DocStatus@1000 : Option;
             BEGIN
               TestReleased;

               IF ("Qty. Put Away" > 0) AND (Quantity > "Qty. Put Away") THEN
                 IF NOT HideValidationDialog THEN
                   IF NOT CONFIRM(
                     STRSUBSTNO(
                       Text004,
                       FIELDCAPTION("Qty. Put Away"),"Qty. Put Away",
                       FIELDCAPTION(Quantity),Quantity,TABLECAPTION),FALSE)
                   THEN
                     ERROR(Text005);

               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Whse. Internal Put-away Line",0,"No.",'',0,"Line No.","Location Code",TRUE);

               DocStatus :=
                 WhseInternalPutAwayHeader.GetDocumentStatus("Line No.");
               IF DocStatus <> WhseInternalPutAwayHeader."Document Status" THEN BEGIN
                 WhseInternalPutAwayHeader.VALIDATE("Document Status",DocStatus);
                 WhseInternalPutAwayHeader.MODIFY;
               END;
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Whse. Internal Put-away Line;
               ESP=L¡n. ubicaci¢n interna alm.];
    PasteIsValid=No;
    LookupFormID=Form7361;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ESP=N§];
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESP=N§ l¡nea];
                                                   Editable=No }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                GetLocation("Location Code");
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ESP=C¢d. almac‚n];
                                                   Editable=No }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=[ENU=Shelf No.;
                                                              ESP=N§ estante] }
    { 12  ;   ;From Bin Code       ;Code20        ;OnValidate=VAR
                                                                BinContent@1000 : Record 7302;
                                                              BEGIN
                                                                TestReleased;
                                                                IF xRec."From Bin Code" <> "From Bin Code" THEN
                                                                  IF "From Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF "From Bin Code" = Location."Adjustment Bin Code" THEN
                                                                      FIELDERROR(
                                                                        "From Bin Code",
                                                                          STRSUBSTNO(
                                                                            Text000,Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                            Location.TABLECAPTION));
                                                                    IF Location."Directed Put-away and Pick" THEN
                                                                      CheckBlocking(BinContent);
                                                                  END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("From Bin Code"));
                                                            END;

                                                   CaptionML=[ENU=From Bin Code;
                                                              ESP=Desde c¢d. ubicaci¢n] }
    { 13  ;   ;From Zone Code      ;Code10        ;OnValidate=BEGIN
                                                                TestReleased;
                                                                IF "From Zone Code" <> xRec."From Zone Code" THEN BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Directed Put-away and Pick");
                                                                  "From Bin Code" := '';
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("From Zone Code"));
                                                              Location.TESTFIELD("Directed Put-away and Pick");
                                                            END;

                                                   CaptionML=[ENU=From Zone Code;
                                                              ESP=Desde c¢d. zona] }
    { 14  ;   ;Item No.            ;Code20        ;OnValidate=BEGIN
                                                                TestReleased;
                                                                TESTFIELD("Qty. Put Away",0);
                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  "Variant Code" := '';

                                                                IF "Item No." <> '' THEN BEGIN
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                  "Shelf No." := Item."Shelf/Bin No.";
                                                                  VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                  "Variant Code" := '';
                                                                  "Shelf No." := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                END;

                                                                IF WhseInternalPutAwayHeader.GET("No.") THEN BEGIN
                                                                  IF "Location Code" = '' THEN
                                                                    VALIDATE("Location Code",WhseInternalPutAwayHeader."Location Code");
                                                                  IF "From Zone Code" = '' THEN
                                                                    VALIDATE("From Zone Code",WhseInternalPutAwayHeader."From Zone Code");
                                                                  IF "From Bin Code" = '' THEN
                                                                    VALIDATE("From Bin Code",WhseInternalPutAwayHeader."From Bin Code");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Item No."));
                                                            END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESP=N§ producto] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                DocStatus@1000 : Option;
                                                              BEGIN
                                                                TestReleased;
                                                                TESTFIELD("Qty. Put Away",0);
                                                                CALCFIELDS("Put-away Qty.");
                                                                IF Quantity < "Qty. Put Away" + "Put-away Qty." THEN
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text001,"Qty. Put Away" + "Put-away Qty."));

                                                                IF CurrFieldNo = FIELDNO(Quantity) THEN
                                                                  CheckBinContentQty;

                                                                VALIDATE("Qty. Outstanding",(Quantity - "Qty. Put Away"));
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);

                                                                Status := CalcStatusPutAwayLine;
                                                                IF Status <> xRec.Status THEN BEGIN
                                                                  GetInternalPutAwayHeader("No.");
                                                                  DocStatus := WhseInternalPutAwayHeader.GetDocumentStatus(0);
                                                                  IF DocStatus <> WhseInternalPutAwayHeader."Document Status" THEN BEGIN
                                                                    WhseInternalPutAwayHeader.VALIDATE("Document Status",DocStatus);
                                                                    WhseInternalPutAwayHeader.MODIFY;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ESP=Cantidad];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=[ENU=Qty. (Base);
                                                              ESP=Cantidad (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                              END;

                                                   CaptionML=[ENU=Qty. Outstanding;
                                                              ESP=Cdad. pendiente];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=[ENU=Qty. Outstanding (Base);
                                                              ESP=Cdad. pendiente (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 23  ;   ;Qty. Put Away       ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Put Away (Base)" := CalcBaseQty("Qty. Put Away");
                                                              END;

                                                   CaptionML=[ENU=Qty. Put Away;
                                                              ESP=Cdad. a ubicar];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 24  ;   ;Qty. Put Away (Base);Decimal       ;CaptionML=[ENU=Qty. Put Away (Base);
                                                              ESP=Cdad. a ubicar (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 25  ;   ;Put-away Qty.       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE (Activity Type=CONST(Put-away),
                                                                                                                       Whse. Document Type=CONST(Internal Put-away),
                                                                                                                       Whse. Document No.=FIELD(No.),
                                                                                                                       Whse. Document Line No.=FIELD(Line No.),
                                                                                                                       Unit of Measure Code=FIELD(Unit of Measure Code),
                                                                                                                       Action Type=FILTER(' '|Take),
                                                                                                                       Original Breakbulk=CONST(No)));
                                                   CaptionML=[ENU=Put-away Qty.;
                                                              ESP=Cdad. ubicaci¢n];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 26  ;   ;Put-away Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE (Activity Type=CONST(Put-away),
                                                                                                                              Whse. Document Type=CONST(Internal Put-away),
                                                                                                                              Whse. Document No.=FIELD(No.),
                                                                                                                              Whse. Document Line No.=FIELD(Line No.),
                                                                                                                              Action Type=FILTER(' '|Take),
                                                                                                                              Original Breakbulk=CONST(No)));
                                                   CaptionML=[ENU=Put-away Qty. (Base);
                                                              ESP=Cdad. ubicac. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESP=Estado];
                                                   OptionCaptionML=[ENU=" ,Partially Put Away,Completely Put Away";
                                                                    ESP=" ,Ubicado parcialmente,Ubicado completamente"];
                                                   OptionString=[ ,Partially Put Away,Completely Put Away];
                                                   Editable=No }
    { 29  ;   ;Unit of Measure Code;Code10        ;OnValidate=BEGIN
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 1;

                                                                VALIDATE(Quantity);
                                                                VALIDATE("Qty. Outstanding");
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Unit of Measure Code"));
                                                            END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESP=C¢d. unidad medida] }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ESP=Cdad. por unidad medida];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record 5401;
                                                              BEGIN
                                                                IF "Variant Code" = '' THEN
                                                                  VALIDATE("Item No.")
                                                                ELSE BEGIN
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Variant Code"));
                                                            END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESP=C¢d. variante];
                                                   Editable=Yes }
    { 32  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESP=Descripci¢n] }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ESP=Descripci¢n 2] }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=[ENU=Sorting Sequence No.;
                                                              ESP=N§ secuencia clasif.];
                                                   Editable=No }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESP=Fecha vencimiento] }
    { 37  ;   ;Cubage              ;Decimal       ;CaptionML=[ENU=Cubage;
                                                              ESP=Cubicaje];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Weight              ;Decimal       ;CaptionML=[ENU=Weight;
                                                              ESP=Peso];
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;No.,Line No.                            ;Clustered=Yes }
    {    ;No.,Item No.                            ;MaintainSQLIndex=No }
    {    ;No.,From Bin Code                       ;MaintainSQLIndex=No }
    {    ;No.,Shelf No.                           ;MaintainSQLIndex=No }
    {    ;No.,Sorting Sequence No.                 }
    {    ;No.,Due Date                            ;MaintainSQLIndex=No }
    {    ;Item No.,From Bin Code,Location Code,Unit of Measure Code,Variant Code;
                                                   SumIndexFields=Qty. (Base);
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      WhseInternalPutAwayHeader@1002 : Record 7331;
      Location@1004 : Record 14;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      Text000@1003 : TextConst 'ENU=must not be the %1 of the %2;ESP=no debe ser el %1 del %2';
      Text001@1005 : TextConst 'ENU=must be greater than %1;ESP=debe ser mayor que %1';
      Text002@1006 : TextConst 'ENU=must not be greater than %1 units;ESP=no debe ser mayor que %1 unidades';
      Text003@1007 : TextConst 'ENU=You cannot rename a %1.;ESP=No se puede cambiar el nombre a %1.';
      LastLineNo@1012 : Integer;
      HideValidationDialog@1008 : Boolean;
      Text004@1009 : TextConst 'ENU="%1 = %2 is less than the %3 = %4.\Do you really want to delete the %5?";ESP="%1 = %2 es menor que el %3 = %4.\¨Desea eliminar el %5?"';
      Text005@1010 : TextConst 'ENU=Cancelled.;ESP=Cancelado.';
      Text006@1011 : TextConst 'ENU=Nothing to handle.;ESP=Nada a manipular.';

    PROCEDURE SetUpNewLine@3(LastWhseInternalPutAwayLine@1000 : Record 7332);
    VAR
      WhseInternalPutAwayLine@1001 : Record 7332;
    BEGIN
      GetInternalPutAwayHeader("No.");
      WhseInternalPutAwayLine.SETRANGE("No.",WhseInternalPutAwayHeader."No.");
      IF WhseInternalPutAwayLine.COUNT > 0 THEN
        LastLineNo := LastWhseInternalPutAwayLine."Line No."
      ELSE
        LastLineNo := 0;
      "Line No." := GetNextLineNo;
      VALIDATE("Location Code",WhseInternalPutAwayHeader."Location Code");
      "From Zone Code" := WhseInternalPutAwayHeader."From Zone Code";
      "From Bin Code" := WhseInternalPutAwayHeader."From Bin Code";
      "Due Date" := WhseInternalPutAwayHeader."Due Date";
    END;

    LOCAL PROCEDURE TestReleased@2();
    BEGIN
      TESTFIELD("No.");
      GetInternalPutAwayHeader("No.");
      WhseInternalPutAwayHeader.TESTFIELD(Status,0);
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE CalcQty@5(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE CalcStatusPutAwayLine@4() : Integer;
    BEGIN
      IF (Quantity <> 0) AND (Quantity = "Qty. Put Away") THEN
        EXIT(Status::"Completely Put Away");
      IF "Qty. Put Away" > 0 THEN
        EXIT(Status::"Partially Put Away");
      EXIT(Status::" ");
    END;

    LOCAL PROCEDURE CheckBinContentQty@9();
    VAR
      BinContent@1000 : Record 7302;
      WhseInternalPutAwayLine@1002 : Record 7332;
      AvailQtyBase@1001 : Decimal;
    BEGIN
      GetLocation("Location Code");

      IF Location."Bin Mandatory" AND
         ("Location Code" <> '') AND ("From Bin Code" <> '') AND
         ("Item No." <> '') AND ("Unit of Measure Code" <> '')
      THEN BEGIN
        IF Location."Directed Put-away and Pick" THEN
          CheckBlocking(BinContent);
        AvailQtyBase := BinContent.CalcQtyAvailToPick(0);
        WhseInternalPutAwayLine.SETCURRENTKEY(
          "Item No.","From Bin Code","Location Code","Unit of Measure Code","Variant Code");
        WhseInternalPutAwayLine.SETRANGE("Item No.","Item No.");
        WhseInternalPutAwayLine.SETRANGE("From Bin Code","From Bin Code");
        WhseInternalPutAwayLine.SETRANGE("Location Code","Location Code");
        WhseInternalPutAwayLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
        WhseInternalPutAwayLine.SETRANGE("Variant Code","Variant Code");
        WhseInternalPutAwayLine.SETFILTER("Line No.",'<>%1',"Line No.");
        WhseInternalPutAwayLine.CALCSUMS("Qty. (Base)");
        IF AvailQtyBase - WhseInternalPutAwayLine."Qty. (Base)" < "Qty. (Base)" THEN
          FIELDERROR(
            "Qty. (Base)",
            STRSUBSTNO(
              Text002,AvailQtyBase - WhseInternalPutAwayLine."Qty. (Base)"));
      END;
    END;

    LOCAL PROCEDURE CheckBlocking@13(VAR BinContent@1002 : Record 7302);
    VAR
      Bin@1001 : Record 7354;
      BinType@1000 : Record 7303;
    BEGIN
      IF BinContent.GET(
        "Location Code","From Bin Code","Item No.","Variant Code","Unit of Measure Code")
      THEN BEGIN
        IF BinContent."Bin Type Code" <> '' THEN
          IF BinType.GET(Bin."Bin Type Code") THEN
            BinType.TESTFIELD(Receive,FALSE);
        IF BinContent."Block Movement" IN [
           BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All]
        THEN
          BinContent.FIELDERROR("Block Movement");

        "From Zone Code" := BinContent."Zone Code";
      END ELSE BEGIN
        Bin.GET("Location Code","From Bin Code");
        IF Bin."Bin Type Code" <> '' THEN
          IF BinType.GET(Bin."Bin Type Code") THEN
            BinType.TESTFIELD(Receive,FALSE);

        IF Bin."Block Movement" IN [
           Bin."Block Movement"::Outbound,Bin."Block Movement"::All]
        THEN
          Bin.FIELDERROR("Block Movement");
        "From Zone Code" := Bin."Zone Code";
      END;
    END;

    PROCEDURE SetHideValidationDialog@8(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE GetItemUnitOfMeasure@18();
    BEGIN
      GetItem;
      Item.TESTFIELD("No.");
      IF (Item."No." <> ItemUnitOfMeasure."Item No.") OR
         ("Unit of Measure Code" <> ItemUnitOfMeasure.Code)
      THEN
        IF NOT ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") THEN
          ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE GetLocation@1(LocationCode@1000 : Code[10]);
    BEGIN
      IF (LocationCode = '') THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE GetInternalPutAwayHeader@7(InternalPutAwayNo@1000 : Code[20]);
    BEGIN
      IF InternalPutAwayNo <> '' THEN
        WhseInternalPutAwayHeader.GET(InternalPutAwayNo);
    END;

    PROCEDURE LookUpBinContent@6();
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.FILTERGROUP(2);
      BinContent.SETRANGE("Location Code","Location Code");
      BinContent.FILTERGROUP(0);
      BinContent."Location Code" := "Location Code";
      BinContent."Zone Code" := "From Zone Code";
      BinContent."Bin Code" := "From Bin Code";
      BinContent."Item No." := "Item No.";
      IF "Variant Code" <> '' THEN BEGIN
        TESTFIELD("Item No.");
        BinContent."Variant Code" := "Variant Code";
      END;
      IF "Unit of Measure Code" <> '' THEN BEGIN
        TESTFIELD("Item No.");
        BinContent."Unit of Measure Code" := "Unit of Measure Code";
      END;
      IF FORM.RUNMODAL(0,BinContent) = ACTION::LookupOK THEN BEGIN
        IF BinContent."Block Movement" IN [
           BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All]
        THEN
          BinContent.FIELDERROR("Block Movement");
        VALIDATE("Location Code",BinContent."Location Code");
        VALIDATE(Quantity,0);
        VALIDATE("From Bin Code",BinContent."Bin Code");
        VALIDATE("Item No.",BinContent."Item No.");
        VALIDATE("Variant Code",BinContent."Variant Code");
        VALIDATE( "Unit of Measure Code",BinContent."Unit of Measure Code");
      END;
    END;

    PROCEDURE CreatePutAwayDoc@11(VAR WhseInternalPutAwayLine@1000 : Record 7332);
    VAR
      CreatePutAwayFromWhseSource@1002 : Report 7305;
    BEGIN
      GetInternalPutAwayHeader("No.");
      WhseInternalPutAwayHeader.CheckPutawayRequired(WhseInternalPutAwayLine."Location Code");
      WhseInternalPutAwayHeader.TESTFIELD(
        Status,WhseInternalPutAwayHeader.Status::Released);
      WhseInternalPutAwayLine.SETFILTER(Quantity,'>0');
      WhseInternalPutAwayLine.SETFILTER(
        Status,'<>%1',WhseInternalPutAwayLine.Status::"Completely Put Away");
      IF WhseInternalPutAwayLine.FIND('-') THEN BEGIN
        CreatePutAwayFromWhseSource.SetWhseInternalPutAway(WhseInternalPutAwayHeader);
        CreatePutAwayFromWhseSource.SetHideValidationDialog(HideValidationDialog);
        CreatePutAwayFromWhseSource.USEREQUESTFORM(NOT HideValidationDialog);
        CreatePutAwayFromWhseSource.RUNMODAL;
        CreatePutAwayFromWhseSource.GetResultMessage(1);
        CLEAR(CreatePutAwayFromWhseSource);
      END ELSE
        IF NOT HideValidationDialog THEN
          MESSAGE(Text006);
    END;

    PROCEDURE SelectLookUp@10(CurrentFieldNo@1000 : Integer);
    VAR
      ItemVariant@1001 : Record 5401;
    BEGIN
      GetLocation("Location Code");
      IF Location."Bin Mandatory" THEN
        LookUpBinContent
      ELSE BEGIN
        IF CurrentFieldNo = FIELDNO("From Zone Code") THEN
          Location.TESTFIELD("Bin Mandatory");
        IF CurrentFieldNo = FIELDNO("From Bin Code") THEN
          Location.TESTFIELD("Bin Mandatory");
        IF CurrentFieldNo = FIELDNO("Item No.") THEN BEGIN
          Item."No." := "Item No.";
          IF FORM.RUNMODAL(0,Item) = ACTION::LookupOK THEN
            VALIDATE("Item No.",Item."No.");
        END;
        IF CurrentFieldNo = FIELDNO("Variant Code") THEN BEGIN
          TESTFIELD("Item No.");
          ItemVariant.FILTERGROUP(2);
          ItemVariant.SETRANGE("Item No.","Item No.");
          ItemVariant.FILTERGROUP(0);
          ItemVariant."Item No." := "Item No.";
          ItemVariant.Code := "Variant Code";
          IF FORM.RUNMODAL(0,ItemVariant) = ACTION::LookupOK THEN
            VALIDATE("Variant Code",ItemVariant.Code);
        END;
        IF CurrentFieldNo = FIELDNO("Unit of Measure Code") THEN BEGIN
          TESTFIELD("Item No.");
          ItemUnitOfMeasure.FILTERGROUP(2);
          ItemUnitOfMeasure.SETRANGE("Item No.","Item No.");
          ItemUnitOfMeasure.FILTERGROUP(0);
          ItemUnitOfMeasure."Item No." := "Item No.";
          ItemUnitOfMeasure.Code := "Unit of Measure Code";
          IF FORM.RUNMODAL(0,ItemUnitOfMeasure) = ACTION::LookupOK THEN
            VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
        END;
      END;
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      TempWhseWorksheetLine@1001 : TEMPORARY Record 7326;
      WhseItemTrackingForm@1000 : Form 6550;
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      TempWhseWorksheetLine.INIT;
      TempWhseWorksheetLine."Whse. Document Type" :=
        TempWhseWorksheetLine."Whse. Document Type"::"Internal Put-away";
      TempWhseWorksheetLine."Whse. Document No." := "No.";
      TempWhseWorksheetLine."Whse. Document Line No." := "Line No.";
      TempWhseWorksheetLine."Location Code" := "Location Code";
      TempWhseWorksheetLine."Item No." := "Item No.";
      TempWhseWorksheetLine."Qty. (Base)" := "Qty. (Base)";
      TempWhseWorksheetLine."Qty. to Handle (Base)" :=
        "Qty. (Base)" - "Qty. Put Away (Base)" - "Put-away Qty. (Base)";
      TempWhseWorksheetLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      WhseItemTrackingForm.SetSource(TempWhseWorksheetLine,DATABASE::"Whse. Internal Put-away Line");
      WhseItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE GetNextLineNo@16() : Integer;
    VAR
      WhseInternalPutAwayLine@1000 : Record 7332;
      HigherLineNo@1002 : Integer;
      LowerLineNo@1001 : Integer;
    BEGIN
      WhseInternalPutAwayLine.SETRANGE("No.",WhseInternalPutAwayHeader."No.");
      IF WhseInternalPutAwayHeader."Sorting Method" <> WhseInternalPutAwayHeader."Sorting Method"::" " THEN
        EXIT(GetLastLineNo + 10000)
      ELSE BEGIN
        WhseInternalPutAwayLine."No." := WhseInternalPutAwayHeader."No.";
        WhseInternalPutAwayLine."Line No." := LastLineNo;
        IF WhseInternalPutAwayLine.FIND('<') THEN
          LowerLineNo := WhseInternalPutAwayLine."Line No."
        ELSE IF WhseInternalPutAwayLine.FIND('>') THEN
          EXIT(LastLineNo DIV 2)
        ELSE
          EXIT(LastLineNo + 10000);

        WhseInternalPutAwayLine."No." := WhseInternalPutAwayHeader."No.";
        WhseInternalPutAwayLine."Line No." := LastLineNo;
        IF WhseInternalPutAwayLine.FIND('>') THEN
          HigherLineNo := LastLineNo
        ELSE
          EXIT(LastLineNo + 10000);
        EXIT(LowerLineNo + (HigherLineNo - LowerLineNo) DIV 2);
      END;
    END;

    PROCEDURE GetLastLineNo@20() : Integer;
    VAR
      WhseInternalPutAwayLine@1000 : Record 7332;
    BEGIN
      WhseInternalPutAwayLine.SETRANGE("No.",WhseInternalPutAwayHeader."No.");
      IF WhseInternalPutAwayLine.FIND('+') THEN
        EXIT(WhseInternalPutAwayLine."Line No.");
      EXIT(0);
    END;

    PROCEDURE GetSortSeqNo@12() : Integer;
    VAR
      WhseInternalPutAwayLine@1000 : Record 7332;
      HigherSeqNo@1002 : Integer;
      LowerSeqNo@1003 : Integer;
      LastSeqNo@1001 : Integer;
    BEGIN
      GetInternalPutAwayHeader("No.");

      WhseInternalPutAwayLine.SETRANGE("No.","No.");
      CASE WhseInternalPutAwayHeader."Sorting Method" OF
        WhseInternalPutAwayHeader."Sorting Method"::" " :
          WhseInternalPutAwayLine.SETCURRENTKEY("No.","Line No.");
        WhseInternalPutAwayHeader."Sorting Method"::Item:
          WhseInternalPutAwayLine.SETCURRENTKEY("No.","Item No.");
        WhseInternalPutAwayHeader."Sorting Method"::"Shelf or Bin":
          BEGIN
            GetLocation("Location Code");
            IF Location."Bin Mandatory" THEN
              WhseInternalPutAwayLine.SETCURRENTKEY("No.","From Bin Code")
            ELSE
              WhseInternalPutAwayLine.SETCURRENTKEY("No.","Shelf No.");
          END;
        WhseInternalPutAwayHeader."Sorting Method"::"Due Date":
          WhseInternalPutAwayLine.SETCURRENTKEY("No.","Due Date");
        ELSE
          EXIT("Line No.");
      END;

      WhseInternalPutAwayLine := Rec;
      LastSeqNo := GetLastSeqNo(WhseInternalPutAwayLine);
      IF WhseInternalPutAwayLine.FIND('<') THEN
        LowerSeqNo := WhseInternalPutAwayLine."Sorting Sequence No."
      ELSE IF WhseInternalPutAwayLine.FIND('>') THEN
        EXIT(WhseInternalPutAwayLine."Sorting Sequence No." DIV 2)
      ELSE
        LowerSeqNo := 10000;

      WhseInternalPutAwayLine := Rec;
      IF WhseInternalPutAwayLine.FIND('>') THEN
        HigherSeqNo := WhseInternalPutAwayLine."Sorting Sequence No."
      ELSE IF WhseInternalPutAwayLine.FIND('<') THEN
        EXIT(LastSeqNo + 10000)
      ELSE
        HigherSeqNo := LastSeqNo;
      EXIT(LowerSeqNo + (HigherSeqNo - LowerSeqNo) DIV 2);
    END;

    PROCEDURE GetLastSeqNo@17(WhseInternalPutAwayLine@1001 : Record 7332) : Integer;
    BEGIN
      WhseInternalPutAwayLine.SETRECFILTER;
      WhseInternalPutAwayLine.SETRANGE("Line No.");
      WhseInternalPutAwayLine.SETCURRENTKEY("No.","Sorting Sequence No.");
      IF WhseInternalPutAwayLine.FIND('+') THEN
        EXIT(WhseInternalPutAwayLine."Sorting Sequence No.");
      EXIT(0);
    END;

    PROCEDURE SetItemTrackingLines@19(SerialNo@1000 : Code[20];LotNo@1001 : Code[20];ExpirationDate@1005 : Date;QtyToEmpty@1002 : Decimal);
    VAR
      TempWhseWorksheetLine@1004 : TEMPORARY Record 7326;
      WhseItemTrackingForm@1003 : Form 6550;
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      TempWhseWorksheetLine.INIT;
      TempWhseWorksheetLine."Whse. Document Type" :=
        TempWhseWorksheetLine."Whse. Document Type"::"Internal Put-away";
      TempWhseWorksheetLine."Whse. Document No." := "No.";
      TempWhseWorksheetLine."Whse. Document Line No." := "Line No.";
      TempWhseWorksheetLine."Location Code" := "Location Code";
      TempWhseWorksheetLine."Item No." := "Item No.";
      TempWhseWorksheetLine."Qty. (Base)" := "Qty. (Base)";
      TempWhseWorksheetLine."Qty. to Handle (Base)" :=
        "Qty. (Base)" - "Qty. Put Away (Base)" - "Put-away Qty. (Base)";
      TempWhseWorksheetLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      WhseItemTrackingForm.SetSource(TempWhseWorksheetLine,DATABASE::"Whse. Internal Put-away Line");
      WhseItemTrackingForm.InsertItemTrackingLine(TempWhseWorksheetLine,SerialNo,LotNo,ExpirationDate,QtyToEmpty);
    END;

    BEGIN
    END.
  }
}
