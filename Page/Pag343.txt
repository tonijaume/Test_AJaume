OBJECT Page 343 Check Credit Limit
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Check Credit Limit;
               ESP=Comprobar l¡mite de cr‚dito];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table18;
    DataCaptionExpr='';
    PageType=ConfirmationDialog;
    OnOpenPage=BEGIN
                 COPY(Cust2);
               END;

    OnAfterGetRecord=BEGIN
                       CalcCreditLimitLCY;
                       CalcOverdueBalanceLCY;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 24      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Customer;
                                 ESP=&Cliente] }
      { 25      ;2   ;Action    ;
                      ShortCutKey=May£s+F7;
                      CaptionML=[ENU=Card;
                                 ESP=Ficha];
                      RunObject=Page 21;
                      RunFormLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=EditLines }
      { 26      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 ESP=Estad¡sticas];
                      RunObject=Page 151;
                      RunFormLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                CaptionClass=FORMAT (STRSUBSTNO(Text000,Heading));
                MultiLine=Yes }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=Details;
                           ESP=Detalles] }

    { 5   ;2   ;Field     ;
                SourceExpr="No." }

    { 7   ;2   ;Field     ;
                SourceExpr=Name }

    { 3   ;2   ;Field     ;
                SourceExpr="Balance (LCY)" }

    { 31  ;2   ;Field     ;
                CaptionML=[ENU=Outstanding Amt. (LCY);
                           ESP=Importes pendientes (DL)];
                SourceExpr=OrderAmountTotalLCY;
                AutoFormatType=1 }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=Shipped/Ret. Rcd. Not Invd. (LCY);
                           ESP=Enviado/Dev. recib. no fact. (DL)];
                SourceExpr=ShippedRetRcdNotIndLCY }

    { 15  ;2   ;Field     ;
                CaptionML=[ENU=Current Amount (LCY);
                           ESP=Imp. doc. actual (DL)];
                SourceExpr=OrderAmountThisOrderLCY;
                AutoFormatType=1 }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Total Amount (LCY);
                           ESP=Importe total (DL)];
                SourceExpr=CustCreditAmountLCY;
                AutoFormatType=1 }

    { 19  ;2   ;Field     ;
                SourceExpr="Credit Limit (LCY)" }

    { 21  ;2   ;Field     ;
                SourceExpr="Balance Due (LCY)";
                CaptionClass=FORMAT (STRSUBSTNO(Text001,FORMAT(GETRANGEMAX("Date Filter")))) }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 Do you still want to record the amount?;ESP=%1 ¨Confirma que desea continuar a pesar de ello?';
      Text001@1001 : TextConst 'ENU=Overdue Amounts (LCY) as of %1;ESP=Importes vencidos (DL) a %1';
      Text002@1002 : TextConst 'ENU=The customer''s credit limit has been exceeded.;ESP=El cliente ha superado el cr‚dito m ximo.';
      Text003@1003 : TextConst 'ENU=This customer has an overdue balance.;ESP=El cliente tiene saldos vencidos.';
      CurrExchRate@1004 : Record 330;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      ServHeader@1021 : Record 5900;
      ServLine@1020 : Record 5902;
      Cust2@1007 : Record 18;
      SalesSetup@1008 : Record 311;
      CustNo@1009 : Code[20];
      Heading@1010 : Text[250];
      NewOrderAmountLCY@1011 : Decimal;
      OldOrderAmountLCY@1012 : Decimal;
      OrderAmountThisOrderLCY@1013 : Decimal;
      OrderAmountTotalLCY@1014 : Decimal;
      CustCreditAmountLCY@1015 : Decimal;
      ShippedRetRcdNotIndLCY@1016 : Decimal;
      OutstandingRetOrdersLCY@1017 : Decimal;
      RcdNotInvdRetOrdersLCY@1018 : Decimal;
      Text004@1019 : TextConst 'ENU=This customer has an overdue balance and the customer''s credit limit has been exceeded.;ESP=El cliente tiene saldos vencidos y se ha superado su l¡mite de cr‚dito.';

    PROCEDURE GenJnlLineShowWarning@2(GenJnlLine@1000 : Record 81) : Boolean;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Credit Warnings" =
         SalesSetup."Credit Warnings"::"No Warning"
      THEN
        EXIT(FALSE);
      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN
        EXIT(ShowWarning(GenJnlLine."Account No.",GenJnlLine."Amount (LCY)",0,TRUE));
      EXIT(ShowWarning(GenJnlLine."Bal. Account No.",-GenJnlLine.Amount,0,TRUE));
    END;

    PROCEDURE SalesHeaderShowWarning@3(SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      // Used when additional lines are inserted
      SalesSetup.GET;
      IF SalesSetup."Credit Warnings" =
         SalesSetup."Credit Warnings"::"No Warning"
      THEN
        EXIT(FALSE);
      IF SalesHeader."Currency Code" = '' THEN
        NewOrderAmountLCY := SalesHeader."Amount Including VAT"
      ELSE
        NewOrderAmountLCY :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              WORKDATE,SalesHeader."Currency Code",
              SalesHeader."Amount Including VAT",SalesHeader."Currency Factor"));

      IF NOT (SalesHeader."Document Type" IN
              [SalesHeader."Document Type"::Quote,
               SalesHeader."Document Type"::Order,
               SalesHeader."Document Type"::"Return Order"])
      THEN
        NewOrderAmountLCY := NewOrderAmountLCY + SalesLineAmount(SalesHeader."Document Type",SalesHeader."No.");
      EXIT(ShowWarning(SalesHeader."Bill-to Customer No.",NewOrderAmountLCY,0,TRUE));
    END;

    PROCEDURE SalesLineShowWarning@4(SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Credit Warnings" =
         SalesSetup."Credit Warnings"::"No Warning"
      THEN
        EXIT(FALSE);
      IF (SalesHeader."Document Type" <> SalesLine."Document Type") OR
         (SalesHeader."No." <> SalesLine."Document No.")
      THEN
        SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      NewOrderAmountLCY := SalesLine."Outstanding Amount (LCY)" + SalesLine."Shipped Not Invoiced (LCY)";

      IF SalesLine.FIND THEN
        OldOrderAmountLCY := SalesLine."Outstanding Amount (LCY)" + SalesLine."Shipped Not Invoiced (LCY)"
      ELSE
        OldOrderAmountLCY := 0;

      IF SalesLine."Document Type" <> SalesLine."Document Type"::Order THEN BEGIN
        NewOrderAmountLCY :=
          NewOrderAmountLCY - OldOrderAmountLCY +
          SalesLineAmount(SalesLine."Document Type",SalesLine."Document No.");
        OldOrderAmountLCY := 0;
      END;
      EXIT(ShowWarning(SalesHeader."Bill-to Customer No.",NewOrderAmountLCY,OldOrderAmountLCY,FALSE))
    END;

    PROCEDURE ServiceHeaderShowWarning@8(ServHeader@1000 : Record 5900) : Boolean;
    VAR
      ServSetup@1002 : Record 5911;
    BEGIN
      ServSetup.GET;
      SalesSetup.GET;
      IF SalesSetup."Credit Warnings" =
         SalesSetup."Credit Warnings"::"No Warning"
      THEN
        EXIT(FALSE);

      NewOrderAmountLCY := 0;
      ServLine.RESET;
      ServLine.SETRANGE("Document Type",ServHeader."Document Type");
      ServLine.SETRANGE("Document No.",ServHeader."No.");
      IF ServLine.FINDSET THEN
        REPEAT
          IF ServHeader."Currency Code" = '' THEN
            NewOrderAmountLCY := NewOrderAmountLCY + ServLine."Amount Including VAT"
          ELSE
            NewOrderAmountLCY := NewOrderAmountLCY +
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  WORKDATE,ServHeader."Currency Code",
                  ServLine."Amount Including VAT",ServHeader."Currency Factor"));
        UNTIL ServLine.NEXT = 0;

      IF ServHeader."Document Type" <> ServHeader."Document Type"::Order THEN
        NewOrderAmountLCY := NewOrderAmountLCY + ServLineAmount(ServHeader."Document Type",ServHeader."No.",ServLine);

      EXIT(ShowWarning(ServHeader."Bill-to Customer No.",NewOrderAmountLCY,0,TRUE));
    END;

    PROCEDURE ServiceLineShowWarning@10(ServLine@1000 : Record 5902) : Boolean;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Credit Warnings" =
         SalesSetup."Credit Warnings"::"No Warning"
      THEN
        EXIT(FALSE);
      IF (ServHeader."Document Type" <> ServLine."Document Type") OR
         (ServHeader."No." <> ServLine."Document No.")
      THEN
        ServHeader.GET(ServLine."Document Type",ServLine."Document No.");
      NewOrderAmountLCY := ServLine."Outstanding Amount (LCY)" + ServLine."Shipped Not Invoiced (LCY)";

      IF ServLine.FIND THEN
        OldOrderAmountLCY := ServLine."Outstanding Amount (LCY)" + ServLine."Shipped Not Invoiced (LCY)"
      ELSE
        OldOrderAmountLCY := 0;

      IF ServLine."Document Type" <> ServLine."Document Type"::Order THEN BEGIN
        NewOrderAmountLCY :=
          NewOrderAmountLCY - OldOrderAmountLCY +
          ServLineAmount(ServLine."Document Type",ServLine."Document No.",ServLine);
        OldOrderAmountLCY := 0;
      END;
      EXIT(ShowWarning(ServHeader."Bill-to Customer No.",NewOrderAmountLCY,OldOrderAmountLCY,FALSE))
    END;

    LOCAL PROCEDURE SalesLineAmount@5(DocType@1000 : Integer;DocNo@1001 : Code[20]) : Decimal;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",DocType);
      SalesLine.SETRANGE("Document No.",DocNo);
      SalesLine.CALCSUMS("Outstanding Amount (LCY)","Shipped Not Invoiced (LCY)");
      EXIT(SalesLine."Outstanding Amount (LCY)" + SalesLine."Shipped Not Invoiced (LCY)");
    END;

    LOCAL PROCEDURE ServLineAmount@12(DocType@1000 : Integer;DocNo@1001 : Code[20];VAR ServLine2@1002 : Record 5902) : Decimal;
    BEGIN
      ServLine2.RESET;
      ServLine2.SETRANGE("Document Type",DocType);
      ServLine2.SETRANGE("Document No.",DocNo);
      ServLine2.CALCSUMS("Outstanding Amount (LCY)","Shipped Not Invoiced (LCY)");
      EXIT(ServLine2."Outstanding Amount (LCY)" + ServLine2."Shipped Not Invoiced (LCY)");
    END;

    LOCAL PROCEDURE ShowWarning@1(NewCustNo@1000 : Code[20];NewOrderAmountLCY2@1001 : Decimal;OldOrderAmountLCY2@1002 : Decimal;CheckOverDueBalance@1003 : Boolean) : Boolean;
    VAR
      ExitValue@1004 : Integer;
    BEGIN
      IF NewCustNo = '' THEN
        EXIT;
      CustNo := NewCustNo;
      NewOrderAmountLCY := NewOrderAmountLCY2;
      OldOrderAmountLCY := OldOrderAmountLCY2;
      GET(CustNo);
      SETRANGE("No.","No.");
      Cust2.COPY(Rec);

      IF SalesSetup."Credit Warnings" IN
         [SalesSetup."Credit Warnings"::"Both Warnings",
          SalesSetup."Credit Warnings"::"Credit Limit"]
      THEN BEGIN
        CalcCreditLimitLCY;
        IF (CustCreditAmountLCY > "Credit Limit (LCY)") AND ("Credit Limit (LCY)" <> 0) THEN BEGIN
          ExitValue := 1;
        END;
      END;
      IF CheckOverDueBalance AND
         (SalesSetup."Credit Warnings" IN
          [SalesSetup."Credit Warnings"::"Both Warnings",
           SalesSetup."Credit Warnings"::"Overdue Balance"])
      THEN BEGIN
        CalcOverdueBalanceLCY;
        IF "Balance Due (LCY)" > 0 THEN BEGIN
          ExitValue := ExitValue + 2;
        END;
      END;

      IF ExitValue > 0 THEN BEGIN
        CASE ExitValue OF
          1:
            Heading := Text002;
          2:
            Heading := Text003;
          3:
            Heading := Text004;
        END;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CalcCreditLimitLCY@6();
    BEGIN
      IF GETFILTER("Date Filter") = '' THEN
        SETFILTER("Date Filter",'..%1',WORKDATE);
      CALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)");
      CalcReturnAmounts(OutstandingRetOrdersLCY,RcdNotInvdRetOrdersLCY);
      OrderAmountTotalLCY := "Outstanding Orders (LCY)" - OutstandingRetOrdersLCY;
      ShippedRetRcdNotIndLCY := "Shipped Not Invoiced (LCY)" - RcdNotInvdRetOrdersLCY;
      IF "No." = CustNo THEN BEGIN
        OrderAmountThisOrderLCY := NewOrderAmountLCY;
        OrderAmountTotalLCY := OrderAmountTotalLCY - OldOrderAmountLCY;
      END ELSE
        OrderAmountThisOrderLCY := 0;
      CustCreditAmountLCY := "Balance (LCY)" +
        ("Shipped Not Invoiced (LCY)" - RcdNotInvdRetOrdersLCY) +
        OrderAmountTotalLCY + OrderAmountThisOrderLCY;
    END;

    LOCAL PROCEDURE CalcOverdueBalanceLCY@7();
    BEGIN
      IF GETFILTER("Date Filter") = '' THEN
        SETFILTER("Date Filter",'..%1',WORKDATE);
      CALCFIELDS("Balance Due (LCY)");
    END;

    PROCEDURE CalcReturnAmounts@9(VAR OutstandingRetOrdersLCY2@1001 : Decimal;VAR RcdNotInvdRetOrdersLCY2@1002 : Decimal) : Decimal;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETCURRENTKEY("Document Type","Bill-to Customer No.","Currency Code");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::"Return Order");
      SalesLine.SETRANGE("Bill-to Customer No.","No.");
      SalesLine.CALCSUMS("Outstanding Amount (LCY)","Return Rcd. Not Invd. (LCY)");
      OutstandingRetOrdersLCY2 := SalesLine."Outstanding Amount (LCY)";
      RcdNotInvdRetOrdersLCY2 := SalesLine."Return Rcd. Not Invd. (LCY)";
    END;

    BEGIN
    END.
  }
}
