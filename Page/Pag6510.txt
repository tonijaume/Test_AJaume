OBJECT Page 6510 Item Tracking Lines
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Item Tracking Lines;
               ESP=L¡ns. seguim. prod.];
    SourceTable=Table336;
    PopulateAllFields=Yes;
    DataCaptionFields=Item No.,Variant Code,Description;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             "Warranty DateEditable" := TRUE;
             "Expiration DateEditable" := TRUE;
             "New Expiration DateEditable" := TRUE;
             "New Lot No.Editable" := TRUE;
             "New Serial No.Editable" := TRUE;
             DescriptionEditable := TRUE;
             "Lot No.Editable" := TRUE;
             "Serial No.Editable" := TRUE;
             "Quantity (Base)Editable" := TRUE;
             "Qty. to Invoice (Base)Editable" := TRUE;
             "Qty. to Handle (Base)Editable" := TRUE;
             FunctionsDemandVisible := TRUE;
             FunctionsSupplyVisible := TRUE;
             ButtonLineVisible := TRUE;
             "Qty. to Invoice (Base)Visible" := TRUE;
             Invoice3Visible := TRUE;
             Invoice2Visible := TRUE;
             Invoice1Visible := TRUE;
             Invoice0Visible := TRUE;
             "Qty. to Handle (Base)Visible" := TRUE;
             Handle3Visible := TRUE;
             Handle2Visible := TRUE;
             Handle1Visible := TRUE;
             Handle0Visible := TRUE;
             "Location CodeEditable" := TRUE;
             "Variant CodeEditable" := TRUE;
             "Item No.Editable" := TRUE;
           END;

    OnOpenPage=BEGIN
                 "Item No.Editable" := FALSE;
                 "Variant CodeEditable" := FALSE;
                 "Location CodeEditable" := FALSE;
                 IF Inbound AND ((CurrentSourceType = DATABASE::"Sales Line") OR (CurrentSourceType = DATABASE::"Service Line")) THEN
                   "Appl.-from Item EntryVisible" := TRUE
                 ELSE
                   "Appl.-from Item EntryVisible" := FALSE;

                 UpdateUndefinedQty;

                 CurrentFormIsOpen := TRUE;
               END;

    OnClosePage=BEGIN
                  IF UpdateUndefinedQty THEN
                    WriteToDatabase;
                  IF FormRunMode = FormRunMode::"Drop Shipment" THEN
                    CASE CurrentSourceType OF
                      DATABASE::"Sales Line":
                        SynchronizeLinkedSources(STRSUBSTNO(Text015,Text016));
                      DATABASE::"Purchase Line":
                        SynchronizeLinkedSources(STRSUBSTNO(Text015,Text017));
                    END;
                  IF FormRunMode = FormRunMode::Transfer THEN
                    SynchronizeLinkedSources('');
                END;

    OnAfterGetRecord=BEGIN
                       OnAfterGetCurrRecord;
                       ExpirationDateOnFormat;
                     END;

    OnNewRecord=BEGIN
                  OnAfterGetCurrRecord;
                END;

    OnInsertRecord=BEGIN
                     IF "Entry No." <> 0 THEN
                       EXIT(FALSE);
                     "Entry No." := NextEntryNo;
                     "Qty. per Unit of Measure" := QtyPerUOM;
                     IF (NOT InsertIsBlocked) AND (NOT ZeroLineExists) THEN
                       IF NOT TestTempSpecificationExists THEN BEGIN
                         TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
                         TempItemTrackLineInsert.INSERT;
                         INSERT;
                         ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
                           TempItemTrackLineInsert,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,0);
                       END;
                     CalculateSums;

                     EXIT(FALSE);
                   END;

    OnModifyRecord=VAR
                     xTempTrackingSpec@1000 : TEMPORARY Record 336;
                   BEGIN
                     IF InsertIsBlocked THEN
                       IF (xRec."Lot No." <> "Lot No.") OR
                          (xRec."Serial No." <> "Serial No.") OR
                          (xRec."Quantity (Base)" <> "Quantity (Base)")
                       THEN
                         EXIT(FALSE);

                     IF NOT TestTempSpecificationExists THEN
                       MODIFY;

                     IF (xRec."Lot No." <> "Lot No.") OR (xRec."Serial No." <> "Serial No.") THEN BEGIN
                       xTempTrackingSpec := xRec;
                       ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
                         xTempTrackingSpec,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,2);
                     END;

                     IF TempItemTrackLineModify.GET("Entry No.") THEN
                       TempItemTrackLineModify.DELETE;
                     IF TempItemTrackLineInsert.GET("Entry No.") THEN BEGIN
                       TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
                       TempItemTrackLineInsert.MODIFY;
                       ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
                         TempItemTrackLineInsert,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,1);
                     END ELSE BEGIN
                       TempItemTrackLineModify.TRANSFERFIELDS(Rec);
                       TempItemTrackLineModify.INSERT;
                       ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
                         TempItemTrackLineModify,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,1);
                     END;
                     CalculateSums;

                     EXIT(FALSE);
                   END;

    OnDeleteRecord=VAR
                     TrackingSpec@1002 : Record 336;
                     WMSManagement@1001 : Codeunit 7302;
                     AlreadyDeleted@1000 : Boolean;
                   BEGIN
                     TrackingSpec."Item No." := "Item No.";
                     TrackingSpec."Location Code" := "Location Code";
                     TrackingSpec."Source Type" := "Source Type";
                     TrackingSpec."Source Subtype" := "Source Subtype";
                     WMSManagement.CheckItemTrackingChange(TrackingSpec,Rec);

                     IF NOT DeleteIsBlocked THEN BEGIN
                       AlreadyDeleted := TempItemTrackLineDelete.GET("Entry No.");
                       TempItemTrackLineDelete.TRANSFERFIELDS(Rec);
                       IF NOT AlreadyDeleted THEN
                         TempItemTrackLineDelete.INSERT;
                       ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
                         TempItemTrackLineDelete,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,2);
                       IF TempItemTrackLineInsert.GET("Entry No.") THEN
                         TempItemTrackLineInsert.DELETE;
                       IF TempItemTrackLineModify.GET("Entry No.") THEN
                         TempItemTrackLineModify.DELETE;
                       DELETE(TRUE);
                     END;
                     CalculateSums;

                     EXIT(FALSE);
                   END;

    OnQueryClosePage=BEGIN
                       IF NOT UpdateUndefinedQty THEN
                         EXIT(CONFIRM(Text006));

                       IF NOT ItemTrackingDataCollection.RefreshLotSNAvailability(Rec,FALSE) THEN BEGIN
                         CurrPage.UPDATE;
                         EXIT(CONFIRM(Text019,TRUE));
                       END;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 66      ;1   ;ActionGroup;
                      Name=ButtonLineReclass;
                      CaptionML=[ENU=&Line;
                                 ESP=&L¡nea];
                      Visible=ButtonLineReclassVisible }
      { 67      ;2   ;Action    ;
                      CaptionML=[ENU=Serial No. Information Card;
                                 ESP=Ficha informaci¢n n§ serie];
                      RunObject=Page 6509;
                      RunFormLink=Item No.=FIELD(Item No.),
                                  Variant Code=FIELD(Variant Code),
                                  Serial No.=FIELD(Serial No.);
                      Image=SNInfo;
                      OnAction=BEGIN
                                 TESTFIELD("Serial No.");
                               END;
                                }
      { 68      ;2   ;Action    ;
                      CaptionML=[ENU=Lot No. Information Card;
                                 ESP=Ficha informaci¢n n§ lote];
                      RunObject=Page 6508;
                      RunFormLink=Item No.=FIELD(Item No.),
                                  Variant Code=FIELD(Variant Code),
                                  Lot No.=FIELD(Lot No.);
                      Image=LotInfo;
                      OnAction=BEGIN
                                 TESTFIELD("Lot No.");
                               END;
                                }
      { 69      ;2   ;Separator  }
      { 70      ;2   ;Action    ;
                      CaptionML=[ENU=New S&erial No. Information;
                                 ESP=Nu&eva informaci¢n n§ serie];
                      OnAction=VAR
                                 SerialNoInfoForm@1001 : Form 6504;
                                 SerialNoInfoNew@1000 : Record 6504;
                               BEGIN
                                 TESTFIELD("New Serial No.");

                                 CLEAR(SerialNoInfoForm);
                                 SerialNoInfoForm.Init(Rec);

                                 SerialNoInfoNew.SETRANGE("Item No.",Rec."Item No.");
                                 SerialNoInfoNew.SETRANGE("Variant Code",Rec."Variant Code");
                                 SerialNoInfoNew.SETRANGE("Serial No.",Rec."New Serial No.");

                                 SerialNoInfoForm.SETTABLEVIEW(SerialNoInfoNew);
                                 SerialNoInfoForm.RUN();
                               END;
                                }
      { 71      ;2   ;Action    ;
                      CaptionML=[ENU=New L&ot No. Information;
                                 ESP=Nueva inf&ormaci¢n n§ lote];
                      RunFormOnRec=No;
                      OnAction=VAR
                                 LotNoInfoForm@1001 : Form 6505;
                                 LotNoInfoNew@1002 : Record 6505;
                               BEGIN
                                 TESTFIELD("New Lot No.");

                                 CLEAR(LotNoInfoForm);
                                 LotNoInfoForm.Init(Rec);

                                 LotNoInfoNew.SETRANGE("Item No.",Rec."Item No.");
                                 LotNoInfoNew.SETRANGE("Variant Code",Rec."Variant Code");
                                 LotNoInfoNew.SETRANGE("Lot No.",Rec."New Lot No.");

                                 LotNoInfoForm.SETTABLEVIEW(LotNoInfoNew);
                                 LotNoInfoForm.RUN();
                               END;
                                }
      { 72      ;1   ;ActionGroup;
                      Name=ButtonLine;
                      CaptionML=[ENU=&Line;
                                 ESP=&L¡nea];
                      Visible=ButtonLineVisible }
      { 73      ;2   ;Action    ;
                      CaptionML=[ENU=Serial No. Information Card;
                                 ESP=Ficha informaci¢n n§ serie];
                      RunObject=Page 6509;
                      RunFormLink=Item No.=FIELD(Item No.),
                                  Variant Code=FIELD(Variant Code),
                                  Serial No.=FIELD(Serial No.);
                      Image=SNInfo;
                      OnAction=BEGIN
                                 TESTFIELD("Serial No.");
                               END;
                                }
      { 74      ;2   ;Action    ;
                      CaptionML=[ENU=Lot No. Information Card;
                                 ESP=Ficha informaci¢n n§ lote];
                      RunObject=Page 6508;
                      RunFormLink=Item No.=FIELD(Item No.),
                                  Variant Code=FIELD(Variant Code),
                                  Lot No.=FIELD(Lot No.);
                      Image=LotInfo;
                      OnAction=BEGIN
                                 TESTFIELD("Lot No.");
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 50      ;1   ;ActionGroup;
                      Name=FunctionsSupply;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones];
                      Visible=FunctionsSupplyVisible }
      { 51      ;2   ;Action    ;
                      CaptionML=[ENU=Assign &Serial No.;
                                 ESP=Asignar n§ &serie];
                      OnAction=BEGIN
                                 IF InsertIsBlocked THEN
                                   EXIT;
                                 AssignSerialNo;
                               END;
                                }
      { 52      ;2   ;Action    ;
                      CaptionML=[ENU=Assign &Lot No.;
                                 ESP=Asignar n§ &lote];
                      OnAction=BEGIN
                                 IF InsertIsBlocked THEN
                                   EXIT;
                                 AssignLotNo;
                               END;
                                }
      { 77      ;2   ;Action    ;
                      CaptionML=[ENU=Create Customized SN;
                                 ESP=Crear NS personalizado];
                      OnAction=BEGIN
                                 IF InsertIsBlocked THEN
                                   EXIT;
                                 CreateCustomizedSN;
                               END;
                                }
      { 79      ;2   ;Action    ;
                      CaptionML=[ENU=Refresh Availability;
                                 ESP=Actualizar disponibilidad];
                      Image=Refresh;
                      OnAction=BEGIN
                                 ItemTrackingDataCollection.RefreshLotSNAvailability(Rec,TRUE);
                               END;
                                }
      { 43      ;1   ;ActionGroup;
                      Name=FunctionsDemand;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones];
                      Visible=FunctionsDemandVisible }
      { 44      ;2   ;Action    ;
                      CaptionML=[ENU=Assign &Serial No.;
                                 ESP=Asignar n§ &serie];
                      OnAction=BEGIN
                                 IF InsertIsBlocked THEN
                                   EXIT;
                                 AssignSerialNo;
                               END;
                                }
      { 45      ;2   ;Action    ;
                      CaptionML=[ENU=Assign &Lot No.;
                                 ESP=Asignar n§ &lote];
                      OnAction=BEGIN
                                 IF InsertIsBlocked THEN
                                   EXIT;
                                 AssignLotNo;
                               END;
                                }
      { 57      ;2   ;Action    ;
                      CaptionML=[ENU=Create Customized SN;
                                 ESP=Crear NS personalizado];
                      OnAction=BEGIN
                                 IF InsertIsBlocked THEN
                                   EXIT;
                                 CreateCustomizedSN;
                               END;
                                }
      { 55      ;2   ;Action    ;
                      CaptionML=[ENU=Select &Entries;
                                 ESP=Seleccionar &movs.];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SelectEntries;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF InsertIsBlocked THEN
                                   EXIT;

                                 SelectEntries;
                               END;
                                }
      { 64      ;2   ;Action    ;
                      CaptionML=[ENU=Refresh Availability;
                                 ESP=Actualizar disponibilidad];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Refresh;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ItemTrackingDataCollection.RefreshLotSNAvailability(Rec,TRUE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 59  ;1   ;Group      }

    { 1903651101;2;Group  ;
                GroupType=FixedLayout }

    { 1900546401;3;Group  ;
                CaptionML=[ENU=Source;
                           ESP=Origen] }

    { 38  ;4   ;Field     ;
                SourceExpr=CurrentSourceCaption;
                Editable=FALSE }

    { 29  ;4   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ESP=Cantidad];
                DecimalPlaces=0:5;
                SourceExpr=SourceQuantityArray[1];
                Editable=FALSE }

    { 31  ;4   ;Field     ;
                Name=Handle1;
                CaptionML=[ENU=Qty. to Handle;
                           ESP=Cdad.a manipular];
                DecimalPlaces=0:5;
                SourceExpr=SourceQuantityArray[2];
                Visible=Handle1Visible;
                Editable=FALSE }

    { 33  ;4   ;Field     ;
                Name=Invoice1;
                CaptionML=[ENU=Qty. to Invoice;
                           ESP=Cdad. a facturar];
                DecimalPlaces=0:5;
                SourceExpr=SourceQuantityArray[3];
                Visible=Invoice1Visible;
                Editable=FALSE }

    { 1901742101;3;Group  ;
                CaptionML=[ENU=Item Tracking;
                           ESP=Seguim. prod.] }

    { 87  ;4   ;Field     ;
                SourceExpr=Text020;
                Visible=FALSE }

    { 35  ;4   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ESP=Cantidad];
                DecimalPlaces=0:5;
                SourceExpr=TotalItemTrackingLine."Quantity (Base)";
                Editable=FALSE }

    { 36  ;4   ;Field     ;
                Name=Handle2;
                CaptionML=[ENU=Qty. to Handle;
                           ESP=Cdad.a manipular];
                DecimalPlaces=0:5;
                SourceExpr=TotalItemTrackingLine."Qty. to Handle (Base)";
                Visible=Handle2Visible;
                Editable=FALSE }

    { 37  ;4   ;Field     ;
                Name=Invoice2;
                CaptionML=[ENU=Qty. to Invoice;
                           ESP=Cdad. a facturar];
                DecimalPlaces=0:5;
                SourceExpr=TotalItemTrackingLine."Qty. to Invoice (Base)";
                Visible=Invoice2Visible;
                Editable=FALSE }

    { 1903866601;3;Group  ;
                CaptionML=[ENU=Undefined;
                           ESP=Indefinido] }

    { 88  ;4   ;Field     ;
                SourceExpr=Text020;
                Visible=FALSE }

    { 40  ;4   ;Field     ;
                Name=Quantity3;
                CaptionML=[ENU=Undefined Quantity;
                           ESP=Cdad. no definida];
                DecimalPlaces=2:5;
                BlankZero=Yes;
                SourceExpr=UndefinedQtyArray[1];
                Editable=FALSE }

    { 41  ;4   ;Field     ;
                Name=Handle3;
                CaptionML=[ENU=Undefined Quantity to Handle;
                           ESP=Cdad. no definida a manipular];
                DecimalPlaces=2:5;
                BlankZero=Yes;
                SourceExpr=UndefinedQtyArray[2];
                Visible=Handle3Visible;
                Editable=FALSE }

    { 42  ;4   ;Field     ;
                Name=Invoice3;
                CaptionML=[ENU=Undefined Quantity to Invoice;
                           ESP=Cdad. no definida a facturar];
                DecimalPlaces=2:5;
                BlankZero=Yes;
                SourceExpr=UndefinedQtyArray[3];
                Visible=Invoice3Visible;
                Editable=FALSE }

    { 82  ;1   ;Group      }

    { 84  ;2   ;Field     ;
                Lookup=Yes;
                CaptionML=[ENU=Item Tracking Code;
                           ESP=C¢d. seguim. prod.];
                SourceExpr=ItemTrackingCode.Code;
                Editable=FALSE;
                OnLookup=BEGIN
                           FORM.RUNMODAL(0,ItemTrackingCode);
                         END;
                          }

    { 85  ;2   ;Field     ;
                CaptionML=[ENU=Description;
                           ESP=Descripci¢n];
                SourceExpr=ItemTrackingCode.Description;
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 61  ;2   ;Field     ;
                CaptionML=[ENU=Availability, Serial No.;
                           ESP=Disponibilidad, N§ Serie];
                ToolTipML=[ENU=Serial No. Availability;
                           ESP=Disponibilidad n§ serie];
                OptionCaptionML=[ENU=Bitmap45;
                                 ESP=Bitmap45];
                SourceExpr=LotSnAvailable(Rec,0);
                Editable=False;
                OnDrillDown=BEGIN
                              LookupAvailable(0);
                            END;
                             }

    { 22  ;2   ;Field     ;
                SourceExpr="Serial No.";
                Editable="Serial No.Editable";
                OnValidate=BEGIN
                             SerialNoOnAfterValidate;
                           END;

                OnAssistEdit=VAR
                               MaxQuantity@1001 : Decimal;
                             BEGIN
                               MaxQuantity := UndefinedQtyArray[1];

                               "Bin Code" := ForBinCode;
                               ItemTrackingDataCollection.AssistEditLotSerialNo(Rec,
                                 (CurrentSignFactor * SourceQuantityArray[1] < 0) AND NOT
                                 InsertIsBlocked,CurrentSignFactor,0,MaxQuantity);
                               "Bin Code" := '';
                               CurrPage.UPDATE;
                             END;
                              }

    { 10  ;2   ;Field     ;
                SourceExpr="New Serial No.";
                Visible="New Serial No.Visible";
                Editable="New Serial No.Editable" }

    { 56  ;2   ;Field     ;
                CaptionML=[ENU=Availability, Lot No.;
                           ESP=Disponibilidad, N§ Lote];
                ToolTipML=[ENU=Lot No. Availability;
                           ESP=Disponibilidad n§ lote];
                OptionCaptionML=[ENU=Bitmap45;
                                 ESP=Bitmap45];
                SourceExpr=LotSnAvailable(Rec,1);
                Editable=False;
                OnDrillDown=BEGIN
                              LookupAvailable(1);
                            END;
                             }

    { 24  ;2   ;Field     ;
                SourceExpr="Lot No.";
                Editable="Lot No.Editable";
                OnValidate=BEGIN
                             LotNoOnAfterValidate;
                           END;

                OnAssistEdit=VAR
                               MaxQuantity@1001 : Decimal;
                             BEGIN
                               MaxQuantity := UndefinedQtyArray[1];

                               "Bin Code" := ForBinCode;
                               ItemTrackingDataCollection.AssistEditLotSerialNo(Rec,
                                 (CurrentSignFactor * SourceQuantityArray[1] < 0) AND NOT
                                 InsertIsBlocked,CurrentSignFactor,1,MaxQuantity);
                               "Bin Code" := '';
                               CurrPage.UPDATE;
                             END;
                              }

    { 46  ;2   ;Field     ;
                SourceExpr="New Lot No.";
                Visible="New Lot No.Visible";
                Editable="New Lot No.Editable" }

    { 53  ;2   ;Field     ;
                SourceExpr="Expiration Date";
                Visible=FALSE;
                Editable="Expiration DateEditable" }

    { 75  ;2   ;Field     ;
                SourceExpr="New Expiration Date";
                Visible="New Expiration DateVisible";
                Editable="New Expiration DateEditable" }

    { 48  ;2   ;Field     ;
                SourceExpr="Warranty Date";
                Visible=FALSE;
                Editable="Warranty DateEditable" }

    { 2   ;2   ;Field     ;
                SourceExpr="Item No.";
                Visible=FALSE;
                Editable="Item No.Editable" }

    { 4   ;2   ;Field     ;
                SourceExpr="Variant Code";
                Visible=FALSE;
                Editable="Variant CodeEditable" }

    { 6   ;2   ;Field     ;
                SourceExpr=Description;
                Visible=FALSE;
                Editable=DescriptionEditable }

    { 8   ;2   ;Field     ;
                SourceExpr="Location Code";
                Visible=FALSE;
                Editable="Location CodeEditable" }

    { 12  ;2   ;Field     ;
                SourceExpr="Quantity (Base)";
                Editable="Quantity (Base)Editable";
                OnValidate=BEGIN
                             QuantityBaseOnValidate;
                               QuantityBaseOnAfterValidate;
                           END;
                            }

    { 14  ;2   ;Field     ;
                SourceExpr="Qty. to Handle (Base)";
                Visible="Qty. to Handle (Base)Visible";
                Editable="Qty. to Handle (Base)Editable";
                OnValidate=BEGIN
                             QtytoHandleBaseOnAfterValidate;
                           END;
                            }

    { 16  ;2   ;Field     ;
                SourceExpr="Qty. to Invoice (Base)";
                Visible="Qty. to Invoice (Base)Visible";
                Editable="Qty. to Invoice (Base)Editable";
                OnValidate=BEGIN
                             QtytoInvoiceBaseOnAfterValidat;
                           END;
                            }

    { 18  ;2   ;Field     ;
                SourceExpr="Quantity Handled (Base)";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                SourceExpr="Quantity Invoiced (Base)";
                Visible=FALSE }

    { 80  ;2   ;Field     ;
                SourceExpr="Appl.-from Item Entry";
                Visible="Appl.-from Item EntryVisible" }

  }
  CODE
  {
    VAR
      xTempItemTrackingLine@1009 : TEMPORARY Record 336;
      TotalItemTrackingLine@1003 : Record 336;
      TempItemTrackLineInsert@1054 : TEMPORARY Record 336;
      TempItemTrackLineModify@1055 : TEMPORARY Record 336;
      TempItemTrackLineDelete@1056 : TEMPORARY Record 336;
      TempItemTrackLineReserv@1060 : TEMPORARY Record 336;
      Item@1004 : Record 27;
      ItemTrackingCode@1005 : Record 6502;
      TempReservEntry@1015 : TEMPORARY Record 337;
      NoSeriesMgt@1030 : Codeunit 396;
      ItemTrackingMgt@1020 : Codeunit 6500;
      ReservEngineMgt@1034 : Codeunit 99000831;
      ItemTrackingDataCollection@1058 : Codeunit 6501;
      UndefinedQtyArray@1019 : ARRAY [3] OF Decimal;
      SourceQuantityArray@1011 : ARRAY [5] OF Decimal;
      QtyPerUOM@1021 : Decimal;
      QtyToAddAsBlank@1033 : Decimal;
      CurrentSteps@1007 : Integer;
      CurrentSignFactor@1012 : Integer;
      Text000@1053 : TextConst 'ENU=Reservation is defined for the %1.\You must cancel the existing Reservation before deleting or changing Item Tracking.;ESP=Hay una reserva definida para %1.\Cancele la reserva antes de eliminar o modificar el seguimiento del producto.';
      Text001@1052 : TextConst 'ENU=Reservation is defined for the %1.\You must not set %2 lower then %3.;ESP=Hay una reserva definida para %1.\%2 debe ser menor que %3.';
      Text002@1014 : TextConst 'ENU=Quantity must be %1.;ESP=Cantidad debe ser %1.';
      Text003@1001 : TextConst 'ENU=negative;ESP=negativo';
      Text004@1016 : TextConst 'ENU=positive;ESP=positivo';
      LastEntryNo@1008 : Integer;
      ColorOfQuantityArray@1006 : ARRAY [3] OF Integer;
      CurrentSourceType@1048 : Integer;
      ExpectedReceiptDate@1010 : Date;
      ShipmentDate@1017 : Date;
      Text005@1018 : TextConst 'ENU=Error when writing to database.;ESP=Error al escribir en la base de datos.';
      Text006@1022 : TextConst 'ENU=The corrections cannot be saved as excess quantity has been defined.\Close the form anyway?;ESP=No se pueden guardar las correcciones porque existe un exceso de cdad.\¨Desea cerrar el formulario?';
      Text007@1023 : TextConst 'ENU=Another user has modified the item tracking data since it was retrieved from the database.\Start again.;ESP=Otro usuario ha modificado datos seguim. prod. desde que se recuper¢ de la base de datos.\Empiece otra vez.';
      CurrentEntryStatus@1024 : 'Reservation,Tracking,Surplus,Prospect';
      FormRunMode@1026 : ',Reclass,Combined Ship/Rcpt,Drop Shipment,Transfer';
      InsertIsBlocked@1025 : Boolean;
      Text008@1028 : TextConst 'ENU=The quantity to create must be an integer.;ESP=La cantidad a crear debe ser un n§ entero.';
      Text009@1027 : TextConst 'ENU=The quantity to create must be positive.;ESP=La cdad. a crear debe ser positiva.';
      Text011@1031 : TextConst 'ENU=%1 already exists with %2 %3 and %4 %5.;ESP=Ya existe %1 con %2 %3 y %4 %5.';
      Text012@1032 : TextConst 'ENU=%1 already exists with %2 %3.;ESP=Ya existe %1 con %2 %3.';
      Text013@1035 : TextConst 'ENU=The string %1 contains no number and cannot be incremented.;ESP=La cadena %1 no contiene un n£mero y no puede ser incrementada.';
      DeleteIsBlocked@1036 : Boolean;
      Text014@1037 : TextConst 'ENU=The total item tracking quantity %1 exceeds the %2 quantity %3.\The changes cannot be saved to the database.;ESP=La cdad. seguim. prod. total %1 excede el %2 cantidad %3.\No se pueden guardar los cambios en la base de datos.';
      Text015@1038 : TextConst 'ENU=Do you want to synchronize item tracking on the line with item tracking on the related drop shipment %1?;ESP=¨Quiere sincronizar el seguim. de prod. en la l¡nea con el seguim. de prod. del env¡o directo relacionado %1?';
      BlockCommit@1041 : Boolean;
      IsCorrection@1046 : Boolean;
      CurrentFormIsOpen@1029 : Boolean;
      CalledFromSynchWhseItemTrkg@1000 : Boolean;
      SNAvailabilityActive@1049 : Boolean;
      LotAvailabilityActive@1051 : Boolean;
      Inbound@1059 : Boolean;
      CurrentSourceCaption@1047 : Text[255];
      CurrentSourceRowID@1039 : Text[100];
      SecondSourceRowID@1040 : Text[100];
      Text016@1044 : TextConst 'ENU=purchase order line;ESP=l¡nea pedido compra';
      Text017@1045 : TextConst 'ENU=sales order line;ESP=l¡n. pedido venta';
      Text018@1057 : TextConst 'ENU=Saving item tracking line changes;ESP=Guardando cambios de l¡nea de seguim. prod.';
      ForBinCode@1043 : Code[20];
      Text019@1013 : TextConst 'ENU=There are availability warnings on one or more lines.\Close the form anyway?;ESP=Existen advertencias de disponibilidad en una o m s l¡neas.\¨Desea cerrar el formulario de todas maneras?';
      Text020@1002 : TextConst 'ENU=Placeholder;ESP=Marcador de posici¢n';
      IsPick@1042 : Boolean;
      "Appl.-from Item EntryVisible"@19038403 : Boolean INDATASET;
      "Item No.Editable"@19055681 : Boolean INDATASET;
      "Variant CodeEditable"@19003611 : Boolean INDATASET;
      "Location CodeEditable"@19048234 : Boolean INDATASET;
      Handle0Visible@19070701 : Boolean INDATASET;
      Handle1Visible@19064734 : Boolean INDATASET;
      Handle2Visible@19067235 : Boolean INDATASET;
      Handle3Visible@19058196 : Boolean INDATASET;
      "Qty. to Handle (Base)Visible"@19036968 : Boolean INDATASET;
      Invoice0Visible@19021813 : Boolean INDATASET;
      Invoice1Visible@19017525 : Boolean INDATASET;
      Invoice2Visible@19053429 : Boolean INDATASET;
      Invoice3Visible@19043061 : Boolean INDATASET;
      "Qty. to Invoice (Base)Visible"@19048430 : Boolean INDATASET;
      "New Serial No.Visible"@19031772 : Boolean INDATASET;
      "New Lot No.Visible"@19006815 : Boolean INDATASET;
      "New Expiration DateVisible"@19041101 : Boolean INDATASET;
      ButtonLineReclassVisible@19076729 : Boolean INDATASET;
      ButtonLineVisible@19043118 : Boolean INDATASET;
      FunctionsSupplyVisible@19000825 : Boolean INDATASET;
      FunctionsDemandVisible@19014220 : Boolean INDATASET;
      "Qty. to Handle (Base)Editable"@19075992 : Boolean INDATASET;
      "Qty. to Invoice (Base)Editable"@19015223 : Boolean INDATASET;
      "Quantity (Base)Editable"@19065426 : Boolean INDATASET;
      "Serial No.Editable"@19056272 : Boolean INDATASET;
      "Lot No.Editable"@19059315 : Boolean INDATASET;
      DescriptionEditable@19061412 : Boolean INDATASET;
      "New Serial No.Editable"@19030864 : Boolean INDATASET;
      "New Lot No.Editable"@19020282 : Boolean INDATASET;
      "New Expiration DateEditable"@19056874 : Boolean INDATASET;
      "Expiration DateEditable"@19023942 : Boolean INDATASET;
      "Warranty DateEditable"@19022604 : Boolean INDATASET;

    PROCEDURE SetFormRunMode@19(Mode@1000 : ',Reclass,Combined Ship/Rcpt,Drop Shipment');
    BEGIN
      FormRunMode := Mode;
    END;

    PROCEDURE SetSource@1(TrackingSpecification@1000 : Record 336;AvailabilityDate@1002 : Date);
    VAR
      ReservEntry@1001 : Record 337;
      TempTrackingSpecification@1005 : TEMPORARY Record 336;
      TempTrackingSpecification2@1006 : TEMPORARY Record 336;
      CreateReservEntry@1004 : Codeunit 99000830;
      Controls@1003 : 'Handle,Invoice,Quantity,Reclass,LotSN';
    BEGIN
      GetItem(TrackingSpecification."Item No.");
      ForBinCode := TrackingSpecification."Bin Code";
      SetFilters(TrackingSpecification);
      TempTrackingSpecification.DELETEALL;
      TempItemTrackLineInsert.DELETEALL;
      TempItemTrackLineModify.DELETEALL;
      TempItemTrackLineDelete.DELETEALL;

      TempReservEntry.DELETEALL;
      LastEntryNo := 0;
      IF ItemTrackingMgt.IsOrderNetworkEntity(TrackingSpecification."Source Type",
           TrackingSpecification."Source Subtype") AND NOT (FormRunMode = FormRunMode::"Drop Shipment")
      THEN
        CurrentEntryStatus := CurrentEntryStatus::Surplus
      ELSE
        CurrentEntryStatus := CurrentEntryStatus::Prospect;

      IF (TrackingSpecification."Source Type" IN
          [DATABASE::"Item Ledger Entry",
          DATABASE::"Item Journal Line",
          DATABASE::"Job Journal Line",
          DATABASE::"BOM Journal Line",
          DATABASE::"Requisition Line"]) OR
         ((TrackingSpecification."Source Type" IN [DATABASE::"Sales Line",DATABASE::"Purchase Line",DATABASE::"Service Line"]) AND
          (TrackingSpecification."Source Subtype" IN [0,2,3]))
      THEN
        SetControls(Controls::Handle,FALSE)
      ELSE
        SetControls(Controls::Handle,TRUE);

      IF (TrackingSpecification."Source Type" IN
          [DATABASE::"Item Ledger Entry",
          DATABASE::"Item Journal Line",
          DATABASE::"Job Journal Line",
          DATABASE::"BOM Journal Line",
          DATABASE::"Requisition Line",
          DATABASE::"Transfer Line",
          DATABASE::"Prod. Order Line",
          DATABASE::"Prod. Order Component"]) OR
         ((TrackingSpecification."Source Type" IN [DATABASE::"Sales Line",DATABASE::"Purchase Line",DATABASE::"Service Line"]) AND
          (TrackingSpecification."Source Subtype" IN [0,2,3,4]))
      THEN
        SetControls(Controls::Invoice,FALSE)
      ELSE
        SetControls(Controls::Invoice,TRUE);

      SetControls(Controls::Reclass,FormRunMode = FormRunMode::Reclass);

      IF FormRunMode = FormRunMode::"Combined Ship/Rcpt" THEN
        SetControls(Controls::LotSN,FALSE);
      IF ItemTrackingMgt.ItemTrkgIsManagedByWhse(
        TrackingSpecification."Source Type",
        TrackingSpecification."Source Subtype",
        TrackingSpecification."Source ID",
        TrackingSpecification."Source Prod. Order Line",
        TrackingSpecification."Source Ref. No.",
        TrackingSpecification."Location Code",
        TrackingSpecification."Item No.")
      THEN BEGIN
        SetControls(Controls::Quantity,FALSE);
        "Qty. to Handle (Base)Editable" := TRUE;
        DeleteIsBlocked := TRUE;
      END;

      ReservEntry."Source Type" := TrackingSpecification."Source Type";
      ReservEntry."Source Subtype" := TrackingSpecification."Source Subtype";
      CurrentSignFactor := CreateReservEntry.SignFactor(ReservEntry);
      CurrentSourceCaption := ReservEntry.TextCaption;
      CurrentSourceType := ReservEntry."Source Type";

      IF CurrentSignFactor < 0 THEN BEGIN
        ExpectedReceiptDate := 0D;
        ShipmentDate := AvailabilityDate;
      END ELSE BEGIN
        ExpectedReceiptDate := AvailabilityDate;
        ShipmentDate := 0D;
      END;

      SourceQuantityArray[1] := TrackingSpecification."Quantity (Base)";
      SourceQuantityArray[2] := TrackingSpecification."Qty. to Handle (Base)";
      SourceQuantityArray[3] := TrackingSpecification."Qty. to Invoice (Base)";
      SourceQuantityArray[4] := TrackingSpecification."Quantity Handled (Base)";
      SourceQuantityArray[5] := TrackingSpecification."Quantity Invoiced (Base)";
      QtyPerUOM := TrackingSpecification."Qty. per Unit of Measure";

      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");

      ReservEntry.SETRANGE("Source ID",TrackingSpecification."Source ID");
      ReservEntry.SETRANGE("Source Ref. No.",TrackingSpecification."Source Ref. No.");
      ReservEntry.SETRANGE("Source Type",TrackingSpecification."Source Type");
      ReservEntry.SETRANGE("Source Subtype",TrackingSpecification."Source Subtype");
      ReservEntry.SETRANGE("Source Batch Name",TrackingSpecification."Source Batch Name");
      ReservEntry.SETRANGE("Source Prod. Order Line",TrackingSpecification."Source Prod. Order Line");

      // Transfer Receipt gets special treatment:
      IF (TrackingSpecification."Source Type" = DATABASE::"Transfer Line") AND
         (FormRunMode <> FormRunMode::Transfer) AND
         (TrackingSpecification."Source Subtype" = 1) THEN BEGIN
        ReservEntry.SETRANGE("Source Subtype",0);
        AddReservEntriesToTempRecSet(ReservEntry,TempTrackingSpecification2,TRUE,8421504);
        ReservEntry.SETRANGE("Source Subtype",1);
        ReservEntry.SETRANGE("Source Prod. Order Line",TrackingSpecification."Source Ref. No.");
        ReservEntry.SETRANGE("Source Ref. No.");
        DeleteIsBlocked := TRUE;
        SetControls(Controls::Quantity,FALSE);
      END;

      AddReservEntriesToTempRecSet(ReservEntry,TempTrackingSpecification,FALSE,0);

      TempReservEntry.COPYFILTERS(ReservEntry);

      TrackingSpecification.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Source Ref. No.");

      TrackingSpecification.SETRANGE("Source ID",TrackingSpecification."Source ID");
      TrackingSpecification.SETRANGE("Source Type",TrackingSpecification."Source Type");
      TrackingSpecification.SETRANGE("Source Subtype",TrackingSpecification."Source Subtype");
      TrackingSpecification.SETRANGE("Source Batch Name",TrackingSpecification."Source Batch Name");
      TrackingSpecification.SETRANGE("Source Prod. Order Line",TrackingSpecification."Source Prod. Order Line");
      TrackingSpecification.SETRANGE("Source Ref. No.",TrackingSpecification."Source Ref. No.");

      IF TrackingSpecification.FINDSET THEN
        REPEAT
          TempTrackingSpecification := TrackingSpecification;
          TempTrackingSpecification.INSERT;
        UNTIL TrackingSpecification.NEXT = 0;

      // Data regarding posted quantities on transfers is collected from Item Ledger Entries:
      IF TrackingSpecification."Source Type" = DATABASE::"Transfer Line" THEN
        CollectPostedTransferEntries(TrackingSpecification,TempTrackingSpecification);

      // Data regarding posted output quantities on prod.orders is collected from Item Ledger Entries:
      IF TrackingSpecification."Source Type" = DATABASE::"Prod. Order Line" THEN
        IF TrackingSpecification."Source Subtype" = 3 THEN
          CollectPostedOutputEntries(TrackingSpecification,TempTrackingSpecification);

      // If run for Drop Shipment a RowID is prepared for synchronisation:
      IF FormRunMode = FormRunMode::"Drop Shipment" THEN
        CurrentSourceRowID := ItemTrackingMgt.ComposeRowID(TrackingSpecification."Source Type",
          TrackingSpecification."Source Subtype",TrackingSpecification."Source ID",
          TrackingSpecification."Source Batch Name",TrackingSpecification."Source Prod. Order Line",
          TrackingSpecification."Source Ref. No.");

      // Synchronization of outbound transfer order:
      IF (TrackingSpecification."Source Type" = DATABASE::"Transfer Line") AND
         (TrackingSpecification."Source Subtype" = 0) THEN BEGIN
        BlockCommit := TRUE;
        CurrentSourceRowID := ItemTrackingMgt.ComposeRowID(TrackingSpecification."Source Type",
          TrackingSpecification."Source Subtype",TrackingSpecification."Source ID",
          TrackingSpecification."Source Batch Name",TrackingSpecification."Source Prod. Order Line",
          TrackingSpecification."Source Ref. No.");
        SecondSourceRowID := ItemTrackingMgt.ComposeRowID(TrackingSpecification."Source Type",
          1,TrackingSpecification."Source ID",
          TrackingSpecification."Source Batch Name",TrackingSpecification."Source Prod. Order Line",
          TrackingSpecification."Source Ref. No.");
        FormRunMode := FormRunMode::Transfer;
      END;

      AddToGlobalRecordSet(TempTrackingSpecification);
      AddToGlobalRecordSet(TempTrackingSpecification2);
      CalculateSums;

      ItemTrackingDataCollection.SetCurrentBinAndItemTrkgCode(ForBinCode,ItemTrackingCode);
      ItemTrackingDataCollection.RetrieveLookupData(Rec,FALSE);

      FunctionsDemandVisible := CurrentSignFactor * SourceQuantityArray[1] < 0;
      FunctionsSupplyVisible := NOT FunctionsDemandVisible;
    END;

    PROCEDURE SetSecondSourceQuantity@1026(VAR SecondSourceQuantityArray@1000 : ARRAY [3] OF Decimal);
    VAR
      Controls@1001 : 'Handle,Invoice';
    BEGIN
      CASE SecondSourceQuantityArray[1] OF
        DATABASE::"Warehouse Receipt Line",DATABASE::"Warehouse Shipment Line" :
          BEGIN
            SourceQuantityArray[2] := SecondSourceQuantityArray[2]; // "Qty. to Handle (Base)"
            SourceQuantityArray[3] := SecondSourceQuantityArray[3]; // "Qty. to Invoice (Base)"
            SetControls(Controls::Invoice,FALSE);
          END;
        ELSE
          EXIT;
      END;
      CalculateSums;
    END;

    PROCEDURE SetSecondSourceRowID@32(RowID@1000 : Text[100]);
    BEGIN
      SecondSourceRowID := RowID;
    END;

    LOCAL PROCEDURE AddReservEntriesToTempRecSet@15(VAR ReservEntry@1000 : Record 337;VAR TempTrackingSpecification@1001 : TEMPORARY Record 336;SwapSign@1002 : Boolean;Color@1004 : Integer);
    BEGIN
      IF ReservEntry.FINDSET THEN
        REPEAT
          IF Color = 0 THEN BEGIN
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
          END;
          IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN BEGIN
            TempTrackingSpecification.TRANSFERFIELDS(ReservEntry);
            // Ensure uniqueness of Entry No. by making it negative:
            TempTrackingSpecification."Entry No." *= -1;
            IF SwapSign THEN
              TempTrackingSpecification."Quantity (Base)" *= -1;
            IF Color <> 0 THEN BEGIN
              TempTrackingSpecification."Quantity Handled (Base)" :=
                TempTrackingSpecification."Quantity (Base)";
              TempTrackingSpecification."Quantity Invoiced (Base)" :=
                TempTrackingSpecification."Quantity (Base)";
              TempTrackingSpecification."Qty. to Handle (Base)" := 0;
              TempTrackingSpecification."Qty. to Invoice (Base)" := 0;
            END;
            TempTrackingSpecification."Buffer Status" := Color;
            TempTrackingSpecification.INSERT;
          END;
        UNTIL ReservEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE AddToGlobalRecordSet@17(VAR TempTrackingSpecification@1000 : TEMPORARY Record 336);
    VAR
      ExpDate@1001 : Date;
      EntriesExist@1002 : Boolean;
    BEGIN
      TempTrackingSpecification.SETCURRENTKEY("Lot No.","Serial No.");
      IF TempTrackingSpecification.FIND('-') THEN
        REPEAT
          TempTrackingSpecification.SETRANGE("Lot No.",TempTrackingSpecification."Lot No.");
          TempTrackingSpecification.SETRANGE("Serial No.",TempTrackingSpecification."Serial No.");
          TempTrackingSpecification.CALCSUMS("Quantity (Base)","Qty. to Handle (Base)",
            "Qty. to Invoice (Base)","Quantity Handled (Base)","Quantity Invoiced (Base)");
          Rec := TempTrackingSpecification;
          "Quantity (Base)" *= CurrentSignFactor;
          "Qty. to Handle (Base)" *= CurrentSignFactor;
          "Qty. to Invoice (Base)" *= CurrentSignFactor;
          "Quantity Handled (Base)" *= CurrentSignFactor;
          "Quantity Invoiced (Base)" *= CurrentSignFactor;
          "Qty. to Handle" :=
            CalcQty("Qty. to Handle (Base)");
          "Qty. to Invoice" :=
            CalcQty("Qty. to Invoice (Base)");
          "Entry No." := NextEntryNo;

          ExpDate := ItemTrackingMgt.ExistingExpirationDate(
            "Item No.","Variant Code",
            "Lot No.","Serial No.",FALSE,EntriesExist);

          IF ExpDate <> 0D THEN BEGIN
            "Expiration Date" := ExpDate;
            "Buffer Status2" := "Buffer Status2"::"ExpDate blocked";
          END;

          INSERT;
          IF "Buffer Status" = 0 THEN BEGIN
            xTempItemTrackingLine := Rec;
            xTempItemTrackingLine.INSERT;
          END;
          TempTrackingSpecification.FIND('+');
          TempTrackingSpecification.SETRANGE("Lot No.");
          TempTrackingSpecification.SETRANGE("Serial No.");
        UNTIL TempTrackingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE SetControls@13(Controls@1000 : 'Handle,Invoice,Quantity,Reclass,LotSN';SetAccess@1001 : Boolean);
    BEGIN
      CASE Controls OF
        Controls::Handle:
          BEGIN
            Handle0Visible := SetAccess;
            Handle1Visible := SetAccess;
            Handle2Visible := SetAccess;
            Handle3Visible := SetAccess;
            "Qty. to Handle (Base)Visible" := SetAccess;
            "Qty. to Handle (Base)Editable" := SetAccess;
          END;
        Controls::Invoice:
          BEGIN
            Invoice0Visible := SetAccess;
            Invoice1Visible := SetAccess;
            Invoice2Visible := SetAccess;
            Invoice3Visible := SetAccess;
            "Qty. to Invoice (Base)Visible" := SetAccess;
            "Qty. to Invoice (Base)Editable" := SetAccess;
          END;
        Controls::Quantity:
          BEGIN
            "Quantity (Base)Editable" := SetAccess;
            "Serial No.Editable" := SetAccess;
            "Lot No.Editable" := SetAccess;
            DescriptionEditable := SetAccess;
            InsertIsBlocked := TRUE;
          END;
        Controls::Reclass:
          BEGIN
            "New Serial No.Visible" := SetAccess;
            "New Serial No.Editable" := SetAccess;
            "New Lot No.Visible" := SetAccess;
            "New Lot No.Editable" := SetAccess;
            "New Expiration DateVisible" := SetAccess;
            "New Expiration DateEditable" := SetAccess;
            ButtonLineReclassVisible := SetAccess;
            ButtonLineVisible := NOT SetAccess;
          END;
        Controls::LotSN:
          BEGIN
            "Serial No.Editable" := SetAccess;
            "Lot No.Editable" := SetAccess;
            "Expiration DateEditable" := SetAccess;
            "Warranty DateEditable" := SetAccess;
            InsertIsBlocked := SetAccess;
          END;
      END;
    END;

    LOCAL PROCEDURE GetItem@3(ItemNo@1000 : Code[20]);
    BEGIN
      IF Item."No." <> ItemNo THEN BEGIN
        Item.GET(ItemNo);
        Item.TESTFIELD("Item Tracking Code");
        IF ItemTrackingCode.Code <> Item."Item Tracking Code" THEN
          ItemTrackingCode.GET(Item."Item Tracking Code");
      END;
    END;

    LOCAL PROCEDURE SetFilters@12(TrackingSpecification@1000 : Record 336);
    BEGIN
      FILTERGROUP := 2;
      SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      SETRANGE("Source ID",TrackingSpecification."Source ID");
      SETRANGE("Source Type",TrackingSpecification."Source Type");
      SETRANGE("Source Subtype",TrackingSpecification."Source Subtype");
      SETRANGE("Source Batch Name",TrackingSpecification."Source Batch Name");
      IF (TrackingSpecification."Source Type" = DATABASE::"Transfer Line") AND
         (TrackingSpecification."Source Subtype" = 1) THEN BEGIN
        SETRANGE("Source Prod. Order Line",TrackingSpecification."Source Ref. No.");
        SETRANGE("Source Ref. No.");
      END ELSE BEGIN
        SETRANGE("Source Prod. Order Line",TrackingSpecification."Source Prod. Order Line");
        SETRANGE("Source Ref. No.",TrackingSpecification."Source Ref. No.");
      END;
      SETRANGE("Item No.",TrackingSpecification."Item No.");
      SETRANGE("Location Code",TrackingSpecification."Location Code");
      SETRANGE("Variant Code",TrackingSpecification."Variant Code");
      FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE CheckLine@4(TrackingLine@1000 : Record 336) : Boolean;
    BEGIN
      IF TrackingLine."Quantity (Base)" * SourceQuantityArray[1] < 0 THEN
        IF SourceQuantityArray[1] < 0 THEN
          ERROR(Text002,Text003)
        ELSE
          ERROR(Text002,Text004);
    END;

    LOCAL PROCEDURE CalculateSums@2();
    VAR
      xTrackingSpec@1000 : Record 336;
    BEGIN
      xTrackingSpec.COPY(Rec);
      RESET;
      CALCSUMS("Quantity (Base)",
        "Qty. to Handle (Base)",
        "Qty. to Invoice (Base)");
      TotalItemTrackingLine := Rec;
      COPY(xTrackingSpec);

      UpdateUndefinedQty;
    END;

    LOCAL PROCEDURE UpdateUndefinedQty@5() QtyIsValid@1000 : Boolean;
    BEGIN
      UndefinedQtyArray[1] := SourceQuantityArray[1] - TotalItemTrackingLine."Quantity (Base)";
      UndefinedQtyArray[2] := SourceQuantityArray[2] - TotalItemTrackingLine."Qty. to Handle (Base)";
      UndefinedQtyArray[3] := SourceQuantityArray[3] - TotalItemTrackingLine."Qty. to Invoice (Base)";

      IF ABS(SourceQuantityArray[1]) < ABS(TotalItemTrackingLine."Quantity (Base)") THEN BEGIN
        ColorOfQuantityArray[1] := 255;
        QtyIsValid := FALSE;
      END ELSE BEGIN
        ColorOfQuantityArray[1] := 0;
        QtyIsValid := TRUE;
      END;

      IF ABS(SourceQuantityArray[2]) < ABS(TotalItemTrackingLine."Qty. to Handle (Base)") THEN
        ColorOfQuantityArray[2] := 255
      ELSE
        ColorOfQuantityArray[2] := 0;

      IF ABS(SourceQuantityArray[3]) < ABS(TotalItemTrackingLine."Qty. to Invoice (Base)") THEN
        ColorOfQuantityArray[3] := 255
      ELSE
        ColorOfQuantityArray[3] := 0;
    END;

    LOCAL PROCEDURE TempRecIsValid@6() OK@1001 : Boolean;
    VAR
      ReservEntry@1000 : Record 337;
      RecordCount@1002 : Integer;
      IdenticalArray@1003 : ARRAY [2] OF Boolean;
    BEGIN
      OK := FALSE;
      TempReservEntry.SETCURRENTKEY("Entry No.",Positive);
      ReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line");

      ReservEntry.COPYFILTERS(TempReservEntry);

      IF ReservEntry.FINDSET THEN
        REPEAT
          IF NOT TempReservEntry.GET(ReservEntry."Entry No.",ReservEntry.Positive) THEN
            EXIT(FALSE);
          IF NOT EntriesAreIdentical(ReservEntry,TempReservEntry,IdenticalArray) THEN
            EXIT(FALSE);
          RecordCount += 1;
        UNTIL ReservEntry.NEXT = 0;

      OK := RecordCount = TempReservEntry.COUNT;
    END;

    LOCAL PROCEDURE EntriesAreIdentical@8(VAR ReservEntry1@1000 : Record 337;VAR ReservEntry2@1002 : Record 337;VAR IdenticalArray@1003 : ARRAY [2] OF Boolean) @1001 : Boolean;
    BEGIN
      IdenticalArray[1] := (
        (ReservEntry1."Entry No." = ReservEntry2."Entry No.") AND
        (ReservEntry1."Item No." = ReservEntry2."Item No.") AND
        (ReservEntry1."Location Code" = ReservEntry2."Location Code") AND
        (ReservEntry1."Quantity (Base)" = ReservEntry2."Quantity (Base)") AND
        (ReservEntry1."Reservation Status" = ReservEntry2."Reservation Status") AND
        (ReservEntry1."Creation Date" = ReservEntry2."Creation Date") AND
        (ReservEntry1."Transferred from Entry No." = ReservEntry2."Transferred from Entry No.") AND
        (ReservEntry1."Source Type" = ReservEntry2."Source Type") AND
        (ReservEntry1."Source Subtype" = ReservEntry2."Source Subtype") AND
        (ReservEntry1."Source ID" = ReservEntry2."Source ID") AND
        (ReservEntry1."Source Batch Name" = ReservEntry2."Source Batch Name") AND
        (ReservEntry1."Source Prod. Order Line" = ReservEntry2."Source Prod. Order Line") AND
        (ReservEntry1."Source Ref. No." = ReservEntry2."Source Ref. No.") AND
        (ReservEntry1."Expected Receipt Date" = ReservEntry2."Expected Receipt Date") AND
        (ReservEntry1."Shipment Date" = ReservEntry2."Shipment Date") AND
        (ReservEntry1."Serial No." = ReservEntry2."Serial No.") AND
        (ReservEntry1."Created By" = ReservEntry2."Created By") AND
        (ReservEntry1."Changed By" = ReservEntry2."Changed By") AND
        (ReservEntry1.Positive = ReservEntry2.Positive) AND
        (ReservEntry1."Qty. per Unit of Measure" = ReservEntry2."Qty. per Unit of Measure") AND
        (ReservEntry1.Quantity = ReservEntry2.Quantity) AND
        (ReservEntry1."Action Message Adjustment" = ReservEntry2."Action Message Adjustment") AND
        (ReservEntry1.Binding = ReservEntry2.Binding) AND
        (ReservEntry1."Suppressed Action Msg." = ReservEntry2."Suppressed Action Msg.") AND
        (ReservEntry1."Planning Flexibility" = ReservEntry2."Planning Flexibility") AND
        (ReservEntry1."Lot No." = ReservEntry2."Lot No.") AND
        (ReservEntry1."Variant Code" = ReservEntry2."Variant Code") AND
        (ReservEntry1."Quantity Invoiced (Base)" = ReservEntry2."Quantity Invoiced (Base)"));

      IdenticalArray[2] := (
        (ReservEntry1.Description = ReservEntry2.Description) AND
        (ReservEntry1."New Serial No." = ReservEntry2."New Serial No.") AND
        (ReservEntry1."New Lot No." = ReservEntry2."New Lot No.") AND
        (ReservEntry1."Expiration Date" = ReservEntry2."Expiration Date") AND
        (ReservEntry1."Warranty Date" = ReservEntry2."Warranty Date") AND
        (ReservEntry1."New Expiration Date" = ReservEntry2."New Expiration Date"));

      EXIT(IdenticalArray[1] AND IdenticalArray[2]);
    END;

    LOCAL PROCEDURE QtyToHandleAndInvoiceChanged@14(VAR ReservEntry1@1000 : Record 337;VAR ReservEntry2@1002 : Record 337) @1001 : Boolean;
    BEGIN
      EXIT(
        (ReservEntry1."Qty. to Handle (Base)" <> ReservEntry2."Qty. to Handle (Base)") OR
        (ReservEntry1."Qty. to Invoice (Base)" <> ReservEntry2."Qty. to Invoice (Base)"));
    END;

    LOCAL PROCEDURE NextEntryNo@9() : Integer;
    BEGIN
      LastEntryNo += 1;
      EXIT(LastEntryNo);
    END;

    LOCAL PROCEDURE WriteToDatabase@10();
    VAR
      Window@1002 : Dialog;
      ChangeType@1000 : 'Insert,Modify,Delete';
      EntryNo@1001 : Integer;
      NoOfLines@1003 : Integer;
      i@1004 : Integer;
      ModifyLoop@1005 : Integer;
      Decrease@1006 : Boolean;
    BEGIN
      IF CurrentFormIsOpen THEN BEGIN
        TempReservEntry.LOCKTABLE;
        IF NOT TempRecIsValid THEN
          ERROR(Text007);

        IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN
          QtyToAddAsBlank := 0
        ELSE
          QtyToAddAsBlank := UndefinedQtyArray[1] * CurrentSignFactor;

        RESET;
        DELETEALL;

        Window.OPEN('#1############# @2@@@@@@@@@@@@@@@@@@@@@');
        Window.UPDATE(1,Text018);
        NoOfLines := TempItemTrackLineInsert.COUNT + TempItemTrackLineModify.COUNT + TempItemTrackLineDelete.COUNT;
        IF TempItemTrackLineDelete.FIND('-') THEN BEGIN
          REPEAT
            i := i + 1;
            IF i MOD 100 = 0 THEN
              Window.UPDATE(2,ROUND(i / NoOfLines * 10000,1));
            RegisterChange(TempItemTrackLineDelete,TempItemTrackLineDelete,ChangeType::Delete,FALSE);
            IF TempItemTrackLineModify.GET(TempItemTrackLineDelete."Entry No.") THEN
              TempItemTrackLineModify.DELETE;
          UNTIL TempItemTrackLineDelete.NEXT = 0;
          TempItemTrackLineDelete.DELETEALL;
        END;

        FOR ModifyLoop := 1 TO 2 DO BEGIN
          IF TempItemTrackLineModify.FIND('-') THEN BEGIN
            REPEAT
              IF xTempItemTrackingLine.GET(TempItemTrackLineModify."Entry No.") THEN BEGIN
                // Process decreases before increases
                Decrease := (xTempItemTrackingLine."Quantity (Base)" > TempItemTrackLineModify."Quantity (Base)");
                IF ((ModifyLoop = 1) AND Decrease) OR ((ModifyLoop = 2) AND NOT Decrease) THEN BEGIN
                  i := i + 1;
                  IF (xTempItemTrackingLine."Serial No." <> TempItemTrackLineModify."Serial No.") OR
                     (xTempItemTrackingLine."Lot No." <> TempItemTrackLineModify."Lot No.") OR
                     (xTempItemTrackingLine."Appl.-from Item Entry" <> TempItemTrackLineModify."Appl.-from Item Entry")
                  THEN BEGIN
                    RegisterChange(xTempItemTrackingLine,xTempItemTrackingLine,ChangeType::Delete,FALSE);
                    RegisterChange(TempItemTrackLineModify,TempItemTrackLineModify,ChangeType::Insert,FALSE);
                    IF (TempItemTrackLineInsert."Quantity (Base)" <> TempItemTrackLineInsert."Qty. to Handle (Base)") OR
                       (TempItemTrackLineInsert."Quantity (Base)" <> TempItemTrackLineInsert."Qty. to Invoice (Base)")
                    THEN
                      SetQtyToHandleAndInvoice(TempItemTrackLineInsert);
                  END ELSE BEGIN
                    RegisterChange(xTempItemTrackingLine,TempItemTrackLineModify,ChangeType::Modify,FALSE);
                    SetQtyToHandleAndInvoice(TempItemTrackLineModify);
                  END;
                  TempItemTrackLineModify.DELETE;
                END;
              END ELSE BEGIN
                i := i + 1;
                TempItemTrackLineModify.DELETE;
              END;
              IF i MOD 100 = 0 THEN
                Window.UPDATE(2,ROUND(i / NoOfLines * 10000,1));
            UNTIL TempItemTrackLineModify.NEXT = 0;
          END;
        END;

        IF TempItemTrackLineInsert.FIND('-') THEN BEGIN
          REPEAT
            i := i + 1;
            IF i MOD 100 = 0 THEN
              Window.UPDATE(2,ROUND(i / NoOfLines * 10000,1));
            IF TempItemTrackLineModify.GET(TempItemTrackLineInsert."Entry No.") THEN
              TempItemTrackLineInsert.TRANSFERFIELDS(TempItemTrackLineModify);
            IF NOT RegisterChange(TempItemTrackLineInsert,TempItemTrackLineInsert,ChangeType::Insert,FALSE) THEN
              ERROR(Text005);
            IF (TempItemTrackLineInsert."Quantity (Base)" <> TempItemTrackLineInsert."Qty. to Handle (Base)") OR
               (TempItemTrackLineInsert."Quantity (Base)" <> TempItemTrackLineInsert."Qty. to Invoice (Base)")
            THEN
              SetQtyToHandleAndInvoice(TempItemTrackLineInsert);
          UNTIL TempItemTrackLineInsert.NEXT = 0;
          TempItemTrackLineInsert.DELETEALL;
        END;
        Window.CLOSE;

      END ELSE BEGIN

        TempReservEntry.LOCKTABLE;
        IF NOT TempRecIsValid THEN
          ERROR(Text007);

        IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN
          QtyToAddAsBlank := 0
        ELSE
          QtyToAddAsBlank := UndefinedQtyArray[1] * CurrentSignFactor;

        RESET;
        SETFILTER("Buffer Status",'<>%1',0);
        DELETEALL;
        RESET;

        xTempItemTrackingLine.RESET;
        SETCURRENTKEY("Entry No.");
        xTempItemTrackingLine.SETCURRENTKEY("Entry No.");
        IF xTempItemTrackingLine.FIND('-') THEN
          REPEAT
            SETRANGE("Lot No.",xTempItemTrackingLine."Lot No.");
            SETRANGE("Serial No.",xTempItemTrackingLine."Serial No.");
            IF FIND('-') THEN BEGIN
              IF RegisterChange(xTempItemTrackingLine,Rec,ChangeType::Modify,FALSE) THEN BEGIN
                EntryNo := xTempItemTrackingLine."Entry No.";
                xTempItemTrackingLine := Rec;
                xTempItemTrackingLine."Entry No." := EntryNo;
                xTempItemTrackingLine.MODIFY;
              END;
              SetQtyToHandleAndInvoice(Rec);
              DELETE;
            END ELSE BEGIN
              RegisterChange(xTempItemTrackingLine,xTempItemTrackingLine,ChangeType::Delete,FALSE);
              xTempItemTrackingLine.DELETE;
            END;
          UNTIL xTempItemTrackingLine.NEXT = 0;

        RESET;

        IF FIND('-') THEN
          REPEAT
            IF RegisterChange(Rec,Rec,ChangeType::Insert,FALSE) THEN BEGIN
              xTempItemTrackingLine := Rec;
              xTempItemTrackingLine.INSERT;
            END ELSE
              ERROR(Text005);
            SetQtyToHandleAndInvoice(Rec);
            DELETE;
          UNTIL NEXT = 0;

      END;

      UpdateOrderTracking;
      ReestablishReservations; // Late Binding

      IF NOT BlockCommit THEN
        COMMIT;
    END;

    LOCAL PROCEDURE RegisterChange@11(VAR OldTrackingSpecification@1000 : Record 336;VAR NewTrackingSpecification@1001 : Record 336;ChangeType@1002 : 'Insert,Modify,FullDelete,PartDelete,ModifyAll';ModifySharedFields@1011 : Boolean) OK@1003 : Boolean;
    VAR
      ReservEntry1@1004 : Record 337;
      ReservEntry2@1005 : Record 337;
      CreateReservEntry@1006 : Codeunit 99000830;
      ReservationMgt@1007 : Codeunit 99000845;
      AvailabilityDate@1008 : Date;
      QtyToAdd@1012 : Decimal;
      LostReservQty@1013 : Decimal;
      IdenticalArray@1010 : ARRAY [2] OF Boolean;
    BEGIN
      OK := FALSE;
      ReservEngineMgt.SetPick(IsPick);

      IF (CurrentSignFactor * NewTrackingSpecification."Qty. to Handle") < 0 THEN
        NewTrackingSpecification."Expiration Date" := 0D;

      CASE ChangeType OF
        ChangeType::Insert:
          BEGIN
            IF (OldTrackingSpecification."Quantity (Base)" = 0) OR
               ((OldTrackingSpecification."Lot No." = '') AND
                (OldTrackingSpecification."Serial No." = ''))
            THEN
              EXIT(TRUE);
            TempReservEntry.SETRANGE("Serial No.",'');
            TempReservEntry.SETRANGE("Lot No.",'');
            OldTrackingSpecification."Quantity (Base)" :=
              CurrentSignFactor *
              ReservEngineMgt.AddItemTrackingToTempRecSet(
                TempReservEntry,NewTrackingSpecification,
                CurrentSignFactor * OldTrackingSpecification."Quantity (Base)",QtyToAddAsBlank,
                ItemTrackingCode."SN Specific Tracking",ItemTrackingCode."Lot Specific Tracking");
            TempReservEntry.SETRANGE("Serial No.");
            TempReservEntry.SETRANGE("Lot No.");

            // Late Binding
            IF ReservEngineMgt.RetrieveLostReservQty(LostReservQty) THEN BEGIN
              TempItemTrackLineReserv := NewTrackingSpecification;
              TempItemTrackLineReserv."Quantity (Base)" := LostReservQty * CurrentSignFactor;
              TempItemTrackLineReserv.INSERT;
            END;

            IF OldTrackingSpecification."Quantity (Base)" = 0 THEN
              EXIT(TRUE);

            IF FormRunMode = FormRunMode::Reclass THEN BEGIN
              CreateReservEntry.SetNewSerialLotNo(
                OldTrackingSpecification."New Serial No.",OldTrackingSpecification."New Lot No.");
              CreateReservEntry.SetNewExpirationDate(OldTrackingSpecification."New Expiration Date");
            END;
            CreateReservEntry.SetDates(
              NewTrackingSpecification."Warranty Date",NewTrackingSpecification."Expiration Date");
            CreateReservEntry.SetApplyFromEntryNo(
              NewTrackingSpecification."Appl.-from Item Entry");
            CreateReservEntry.CreateReservEntryFor(
              OldTrackingSpecification."Source Type",
              OldTrackingSpecification."Source Subtype",
              OldTrackingSpecification."Source ID",
              OldTrackingSpecification."Source Batch Name",
              OldTrackingSpecification."Source Prod. Order Line",
              OldTrackingSpecification."Source Ref. No.",
              OldTrackingSpecification."Qty. per Unit of Measure",
              OldTrackingSpecification."Quantity (Base)",
              OldTrackingSpecification."Serial No.",
              OldTrackingSpecification."Lot No.");
            CreateReservEntry.CreateEntry(OldTrackingSpecification."Item No.",
              OldTrackingSpecification."Variant Code",
              OldTrackingSpecification."Location Code",
              OldTrackingSpecification.Description,
              ExpectedReceiptDate,
              ShipmentDate,0,CurrentEntryStatus);
            CreateReservEntry.GetLastEntry(ReservEntry1);
            IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
              ReservEngineMgt.UpdateActionMessages(ReservEntry1);

            IF ModifySharedFields THEN BEGIN
              ReservationMgt.SetPointerFilter(ReservEntry1);
              ReservEntry1.SETRANGE("Lot No.",ReservEntry1."Lot No.");
              ReservEntry1.SETRANGE("Serial No.",ReservEntry1."Serial No.");
              ReservEntry1.SETFILTER("Entry No.",'<>%1',ReservEntry1."Entry No.");
              ModifyFieldsWithinFilter(ReservEntry1,NewTrackingSpecification);
            END;

            IF CurrentSignFactor < 0 THEN
              AvailabilityDate := ShipmentDate
            ELSE
              AvailabilityDate := ExpectedReceiptDate;
            OK := TRUE;
          END;
        ChangeType::Modify:
          BEGIN
            ReservEntry1.TRANSFERFIELDS(OldTrackingSpecification);
            ReservEntry2.TRANSFERFIELDS(NewTrackingSpecification);

            ReservEntry1."Entry No." := ReservEntry2."Entry No."; // If only entry no. has changed it should not trigger
            IF EntriesAreIdentical(ReservEntry1,ReservEntry2,IdenticalArray) THEN
              EXIT(QtyToHandleAndInvoiceChanged(ReservEntry1,ReservEntry2));

            IF ABS(OldTrackingSpecification."Quantity (Base)") < ABS(NewTrackingSpecification."Quantity (Base)") THEN
              BEGIN
                // Item Tracking is added to any blank reservation entries:
                TempReservEntry.SETRANGE("Serial No.",'');
                TempReservEntry.SETRANGE("Lot No.",'');
                QtyToAdd :=
                  CurrentSignFactor *
                  ReservEngineMgt.AddItemTrackingToTempRecSet(
                    TempReservEntry,NewTrackingSpecification,
                    CurrentSignFactor * (NewTrackingSpecification."Quantity (Base)" -
                    OldTrackingSpecification."Quantity (Base)"),QtyToAddAsBlank,
                    ItemTrackingCode."SN Specific Tracking",ItemTrackingCode."Lot Specific Tracking");
                TempReservEntry.SETRANGE("Serial No.");
                TempReservEntry.SETRANGE("Lot No.");

                // Late Binding
                IF ReservEngineMgt.RetrieveLostReservQty(LostReservQty) THEN BEGIN
                  TempItemTrackLineReserv := NewTrackingSpecification;
                  TempItemTrackLineReserv."Quantity (Base)" := LostReservQty * CurrentSignFactor;
                  TempItemTrackLineReserv.INSERT;
                END;

                OldTrackingSpecification."Quantity (Base)" := QtyToAdd;
                OldTrackingSpecification."Warranty Date" := NewTrackingSpecification."Warranty Date";
                OldTrackingSpecification."Expiration Date" := NewTrackingSpecification."Expiration Date";
                OldTrackingSpecification.Description := NewTrackingSpecification.Description;
                RegisterChange(OldTrackingSpecification,OldTrackingSpecification,
                  ChangeType::Insert,NOT IdenticalArray[2]);
              END ELSE BEGIN
                TempReservEntry.SETRANGE("Serial No.",OldTrackingSpecification."Serial No.");
                TempReservEntry.SETRANGE("Lot No.",OldTrackingSpecification."Lot No.");
                OldTrackingSpecification."Serial No." := '';
                OldTrackingSpecification."Lot No." := '';
                OldTrackingSpecification."Warranty Date" := 0D;
                OldTrackingSpecification."Expiration Date" := 0D;
                QtyToAdd :=
                  CurrentSignFactor *
                  ReservEngineMgt.AddItemTrackingToTempRecSet(
                    TempReservEntry,OldTrackingSpecification,
                    CurrentSignFactor * (OldTrackingSpecification."Quantity (Base)" -
                    NewTrackingSpecification."Quantity (Base)"),QtyToAddAsBlank,
                    ItemTrackingCode."SN Specific Tracking",ItemTrackingCode."Lot Specific Tracking");
                TempReservEntry.SETRANGE("Serial No.");
                TempReservEntry.SETRANGE("Lot No.");
                RegisterChange(NewTrackingSpecification,NewTrackingSpecification,
                  ChangeType::PartDelete,NOT IdenticalArray[2]);
              END;
            OK := TRUE;
          END;
        ChangeType::FullDelete,ChangeType::PartDelete:
          BEGIN
            ReservationMgt.SetItemTrackingHandling(1); // Allow deletion of Item Tracking
            ReservEntry1.TRANSFERFIELDS(OldTrackingSpecification);
            ReservationMgt.SetPointerFilter(ReservEntry1);
            ReservEntry1.SETRANGE("Lot No.",ReservEntry1."Lot No.");
            ReservEntry1.SETRANGE("Serial No.",ReservEntry1."Serial No.");
            IF ChangeType = ChangeType::FullDelete THEN BEGIN
              TempReservEntry.SETRANGE("Serial No.",OldTrackingSpecification."Serial No.");
              TempReservEntry.SETRANGE("Lot No.",OldTrackingSpecification."Lot No.");
              OldTrackingSpecification."Serial No." := '';
              OldTrackingSpecification."Lot No." := '';
              OldTrackingSpecification."Warranty Date" := 0D;
              OldTrackingSpecification."Expiration Date" := 0D;
              QtyToAdd :=
                CurrentSignFactor *
                ReservEngineMgt.AddItemTrackingToTempRecSet(
                  TempReservEntry,OldTrackingSpecification,
                  CurrentSignFactor * OldTrackingSpecification."Quantity (Base)",QtyToAddAsBlank,
                  ItemTrackingCode."SN Specific Tracking",ItemTrackingCode."Lot Specific Tracking");
              TempReservEntry.SETRANGE("Serial No.");
              TempReservEntry.SETRANGE("Lot No.");
              ReservationMgt.DeleteReservEntries2(TRUE,0,ReservEntry1)
            END ELSE BEGIN
              ReservationMgt.DeleteReservEntries2(FALSE,ReservEntry1."Quantity (Base)" -
                OldTrackingSpecification."Quantity Handled (Base)",ReservEntry1);
              IF ModifySharedFields THEN BEGIN
                ReservEntry1.SETRANGE("Reservation Status");
                ModifyFieldsWithinFilter(ReservEntry1,OldTrackingSpecification);
              END;
            END;
            OK := TRUE;
          END;
      END;
      SetQtyToHandleAndInvoice(NewTrackingSpecification);
    END;

    LOCAL PROCEDURE UpdateOrderTracking@26();
    VAR
      TempReservEntry@1000 : TEMPORARY Record 337;
    BEGIN
      IF NOT ReservEngineMgt.CollectAffectedSurplusEntries(TempReservEntry) THEN
        EXIT;
      IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN
        EXIT;
      ReservEngineMgt.UpdateOrderTracking(TempReservEntry);
    END;

    PROCEDURE ModifyFieldsWithinFilter@25(VAR ReservEntry1@1000 : Record 337;VAR TrackingSpecification@1001 : Record 336);
    BEGIN
      // Used to ensure that field values that are common to a SN/Lot are copied to all entries.
      IF ReservEntry1.FIND('-') THEN
        REPEAT
          ReservEntry1.Description := TrackingSpecification.Description;
          ReservEntry1."Warranty Date" := TrackingSpecification."Warranty Date";
          ReservEntry1."Expiration Date" := TrackingSpecification."Expiration Date";
          ReservEntry1."New Serial No." := TrackingSpecification."New Serial No.";
          ReservEntry1."New Lot No." := TrackingSpecification."New Lot No.";
          ReservEntry1."New Expiration Date":= TrackingSpecification."New Expiration Date";
          ReservEntry1.MODIFY;
        UNTIL ReservEntry1.NEXT = 0;
    END;

    LOCAL PROCEDURE SetQtyToHandleAndInvoice@7(TrackingSpecification@1000 : Record 336) OK@1008 : Boolean;
    VAR
      ReservEntry1@1003 : Record 337;
      ReservationMgt@1004 : Codeunit 99000845;
      TotalQtyToHandle@1001 : Decimal;
      TotalQtyToInvoice@1002 : Decimal;
      QtyAlreadyHandledToInvoice@1005 : Decimal;
      QtyToHandleThisLine@1007 : Decimal;
      QtyToInvoiceThisLine@1006 : Decimal;
    BEGIN
      IF IsCorrection THEN
        EXIT;
      OK := FALSE;

      TotalQtyToHandle := TrackingSpecification."Qty. to Handle (Base)" * CurrentSignFactor;
      TotalQtyToInvoice := TrackingSpecification."Qty. to Invoice (Base)" * CurrentSignFactor;

      IF ABS(TotalQtyToHandle) > ABS(TotalQtyToInvoice) THEN
        QtyAlreadyHandledToInvoice := 0
      ELSE
        QtyAlreadyHandledToInvoice := TotalQtyToInvoice - TotalQtyToHandle;

      ReservEntry1.TRANSFERFIELDS(TrackingSpecification);
      ReservationMgt.SetPointerFilter(ReservEntry1);
      ReservEntry1.SETRANGE("Lot No.",ReservEntry1."Lot No.");
      ReservEntry1.SETRANGE("Serial No.",ReservEntry1."Serial No.");
      IF (TrackingSpecification."Lot No." <> '') OR
         (TrackingSpecification."Serial No." <> '')
      THEN BEGIN
        ItemTrackingMgt.SetPointerFilter(TrackingSpecification);
        TrackingSpecification.SETRANGE("Lot No.",TrackingSpecification."Lot No.");
        TrackingSpecification.SETRANGE("Serial No.",TrackingSpecification."Serial No.");

        IF TrackingSpecification.FIND('-') THEN
          REPEAT
            IF NOT TrackingSpecification.Correction THEN BEGIN
              QtyToInvoiceThisLine :=
                TrackingSpecification."Quantity Handled (Base)" - TrackingSpecification."Quantity Invoiced (Base)";
              IF ABS(QtyToInvoiceThisLine) > ABS(TotalQtyToInvoice) THEN
                QtyToInvoiceThisLine := TotalQtyToInvoice;

              IF ABS(QtyToInvoiceThisLine) > ABS(QtyAlreadyHandledToInvoice) THEN BEGIN
                QtyToInvoiceThisLine := QtyAlreadyHandledToInvoice;
                QtyAlreadyHandledToInvoice := 0;
              END ELSE
                QtyAlreadyHandledToInvoice -= QtyToInvoiceThisLine;

              IF TrackingSpecification."Qty. to Invoice (Base)" <> QtyToInvoiceThisLine THEN BEGIN
                TrackingSpecification."Qty. to Invoice (Base)" := QtyToInvoiceThisLine;
                TrackingSpecification.MODIFY;
              END;

              TotalQtyToInvoice -= QtyToInvoiceThisLine;
            END;
          UNTIL (TrackingSpecification.NEXT = 0);

        OK := ((TotalQtyToHandle = 0) AND (TotalQtyToInvoice = 0));
      END;

      IF TrackingSpecification."Lot No." <> '' THEN BEGIN
        FOR ReservEntry1."Reservation Status" := ReservEntry1."Reservation Status"::Reservation TO
          ReservEntry1."Reservation Status"::Prospect
        DO BEGIN
          ReservEntry1.SETRANGE("Reservation Status",ReservEntry1."Reservation Status");
          IF ReservEntry1.FIND('-') THEN
            REPEAT
              QtyToHandleThisLine := ReservEntry1."Quantity (Base)";
              QtyToInvoiceThisLine := QtyToHandleThisLine;

              IF ABS(QtyToHandleThisLine) > ABS(TotalQtyToHandle) THEN
                QtyToHandleThisLine := TotalQtyToHandle;
              IF ABS(QtyToInvoiceThisLine) > ABS(TotalQtyToInvoice) THEN
                QtyToInvoiceThisLine := TotalQtyToInvoice;

              IF (ReservEntry1."Qty. to Handle (Base)" <> QtyToHandleThisLine) OR
                 (ReservEntry1."Qty. to Invoice (Base)" <> QtyToInvoiceThisLine) AND NOT ReservEntry1.Correction
              THEN BEGIN
                ReservEntry1."Qty. to Handle (Base)" := QtyToHandleThisLine;
                ReservEntry1."Qty. to Invoice (Base)" := QtyToInvoiceThisLine;
                ReservEntry1.MODIFY;
              END;

              TotalQtyToHandle -= QtyToHandleThisLine;
              TotalQtyToInvoice -= QtyToInvoiceThisLine;

            UNTIL (ReservEntry1.NEXT = 0);
        END;

        OK := ((TotalQtyToHandle = 0) AND (TotalQtyToInvoice = 0));
      END ELSE
        IF ReservEntry1.FIND('-') THEN
          IF (ReservEntry1."Qty. to Handle (Base)" <> TotalQtyToHandle) OR
             (ReservEntry1."Qty. to Invoice (Base)" <> TotalQtyToInvoice) AND NOT ReservEntry1.Correction
          THEN BEGIN
            ReservEntry1."Qty. to Handle (Base)" := TotalQtyToHandle;
            ReservEntry1."Qty. to Invoice (Base)" := TotalQtyToInvoice;
            ReservEntry1.MODIFY;
          END;
    END;

    LOCAL PROCEDURE CollectPostedTransferEntries@16(TrackingSpecification@1001 : Record 336;VAR TempTrackingSpecification@1000 : TEMPORARY Record 336);
    VAR
      ItemEntryRelation@1002 : Record 6507;
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      // Used for collecting information about posted Transfer Shipments from the created Item Ledger Entries.
      IF TrackingSpecification."Source Type" <> DATABASE::"Transfer Line" THEN
        EXIT;

      ItemEntryRelation.SETCURRENTKEY("Order No.","Order Line No.");
      ItemEntryRelation.SETRANGE("Order No.",TrackingSpecification."Source ID");
      ItemEntryRelation.SETRANGE("Order Line No.",TrackingSpecification."Source Ref. No.");

      CASE TrackingSpecification."Source Subtype" OF
        0: // Outbound
          BEGIN
            ItemEntryRelation.SETRANGE("Source Type",DATABASE::"Transfer Shipment Line");
          END;
        1: // Inbound
          BEGIN
            ItemEntryRelation.SETRANGE("Source Type",DATABASE::"Transfer Receipt Line");
          END;
      END;

      IF ItemEntryRelation.FIND('-') THEN
        REPEAT
          ItemLedgerEntry.GET(ItemEntryRelation."Item Entry No.");
          TempTrackingSpecification := TrackingSpecification;
          TempTrackingSpecification."Entry No." := ItemLedgerEntry."Entry No.";
          TempTrackingSpecification."Item No." := ItemLedgerEntry."Item No.";
          TempTrackingSpecification."Serial No." := ItemLedgerEntry."Serial No.";
          TempTrackingSpecification."Lot No." := ItemLedgerEntry."Lot No.";
          TempTrackingSpecification."Quantity (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Quantity Handled (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Quantity Invoiced (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Qty. per Unit of Measure" := ItemLedgerEntry."Qty. per Unit of Measure";
          TempTrackingSpecification.InitQtyToShip;
          TempTrackingSpecification.INSERT;
        UNTIL ItemEntryRelation.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectPostedOutputEntries@30(TrackingSpecification@1001 : Record 336;VAR TempTrackingSpecification@1000 : TEMPORARY Record 336);
    VAR
      ItemLedgerEntry@1003 : Record 32;
      ProdOrderRoutingLine@1004 : Record 5409;
      BackwardFlushing@1002 : Boolean;
    BEGIN
      // Used for collecting information about posted prod. order output from the created Item Ledger Entries.
      IF TrackingSpecification."Source Type" <> DATABASE::"Prod. Order Line" THEN
        EXIT;

      IF (TrackingSpecification."Source Type" = DATABASE::"Prod. Order Line") AND
         (TrackingSpecification."Source Subtype" = 3)
      THEN BEGIN
        ProdOrderRoutingLine.SETRANGE(Status,TrackingSpecification."Source Subtype");
        ProdOrderRoutingLine.SETRANGE("Prod. Order No.",TrackingSpecification."Source ID");
        ProdOrderRoutingLine.SETRANGE("Routing Reference No.",TrackingSpecification."Source Prod. Order Line");
        IF ProdOrderRoutingLine.FIND('+') THEN
          BackwardFlushing :=
            ProdOrderRoutingLine."Flushing Method" = ProdOrderRoutingLine."Flushing Method"::Backward;
      END;

      ItemLedgerEntry.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.","Entry Type");
      ItemLedgerEntry.SETRANGE("Prod. Order No.",TrackingSpecification."Source ID");
      ItemLedgerEntry.SETRANGE("Prod. Order Line No.",TrackingSpecification."Source Prod. Order Line");
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Output);

      IF ItemLedgerEntry.FIND('-') THEN
        REPEAT
          TempTrackingSpecification := TrackingSpecification;
          TempTrackingSpecification."Entry No." := ItemLedgerEntry."Entry No.";
          TempTrackingSpecification."Item No." := ItemLedgerEntry."Item No.";
          TempTrackingSpecification."Serial No." := ItemLedgerEntry."Serial No.";
          TempTrackingSpecification."Lot No." := ItemLedgerEntry."Lot No.";
          TempTrackingSpecification."Quantity (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Quantity Handled (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Quantity Invoiced (Base)" := ItemLedgerEntry.Quantity;
          TempTrackingSpecification."Qty. per Unit of Measure" := ItemLedgerEntry."Qty. per Unit of Measure";
          TempTrackingSpecification.InitQtyToShip;
          TempTrackingSpecification.INSERT;

          IF BackwardFlushing THEN BEGIN
            SourceQuantityArray[1] += ItemLedgerEntry.Quantity;
            SourceQuantityArray[2] += ItemLedgerEntry.Quantity;
            SourceQuantityArray[3] += ItemLedgerEntry.Quantity;
          END;

        UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE ZeroLineExists@18() OK@1000 : Boolean;
    VAR
      xTrackingSpec@1001 : Record 336;
    BEGIN
      IF ("Quantity (Base)" <> 0) OR ("Serial No." <> '') OR ("Lot No." <> '') THEN
        EXIT(FALSE);
      xTrackingSpec.COPY(Rec);
      RESET;
      SETRANGE("Quantity (Base)",0);
      SETRANGE("Serial No.",'');
      SETRANGE("Lot No.",'');
      OK := NOT ISEMPTY;
      COPY(xTrackingSpec);
    END;

    PROCEDURE AssignSerialNo@20();
    VAR
      EnterQuantityToCreate@1001 : Form 6513;
      QtyToCreate@1002 : Decimal;
      QtyToCreateInt@1000 : Integer;
      CreateLotNo@1004 : Boolean;
    BEGIN
      IF ZeroLineExists THEN
        DELETE;

      QtyToCreate := UndefinedQtyArray[1] * QtySignFactor;
      IF QtyToCreate < 0 THEN
        QtyToCreate := 0;

      IF QtyToCreate MOD 1 <> 0 THEN
        ERROR(Text008);

      QtyToCreateInt := QtyToCreate;

      CLEAR(EnterQuantityToCreate);
      EnterQuantityToCreate.LOOKUPMODE := TRUE;
      EnterQuantityToCreate.SetFields("Item No.","Variant Code",QtyToCreate,FALSE);
      IF EnterQuantityToCreate.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EnterQuantityToCreate.GetFields(QtyToCreateInt,CreateLotNo);
        AssignSerialNoBatch(QtyToCreateInt,CreateLotNo);
      END;
    END;

    PROCEDURE AssignSerialNoBatch@29(QtyToCreate@1001 : Integer;CreateLotNo@1002 : Boolean);
    VAR
      i@1004 : Integer;
    BEGIN
      IF QtyToCreate <= 0 THEN
        ERROR(Text009);
      IF QtyToCreate MOD 1 <> 0 THEN
        ERROR(Text008);

      GetItem("Item No.");

      IF CreateLotNo THEN BEGIN
        TESTFIELD("Lot No.",'');
        Item.TESTFIELD("Lot Nos.");
        VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
      END;

      Item.TESTFIELD("Serial Nos.");
      FOR i := 1 TO QtyToCreate DO BEGIN
        VALIDATE("Serial No.",NoSeriesMgt.GetNextNo(Item."Serial Nos.",WORKDATE,TRUE));
        VALIDATE("Quantity (Base)",QtySignFactor);
        "Entry No." := NextEntryNo;
        IF TestTempSpecificationExists THEN
          ERROR('');
        INSERT;
        TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
        TempItemTrackLineInsert.INSERT;
        ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
          TempItemTrackLineInsert,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,0);
      END;
      CalculateSums;
    END;

    PROCEDURE AssignLotNo@21();
    VAR
      QtyToCreate@1000 : Decimal;
    BEGIN
      IF ZeroLineExists THEN
        DELETE;

      IF (SourceQuantityArray[1] * UndefinedQtyArray[1] <= 0) OR
         (ABS(SourceQuantityArray[1]) < ABS(UndefinedQtyArray[1]))
      THEN
        QtyToCreate := 0
      ELSE
        QtyToCreate := UndefinedQtyArray[1];

      GetItem("Item No.");

      Item.TESTFIELD("Lot Nos.");
      VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
      "Qty. per Unit of Measure" := QtyPerUOM;
      VALIDATE("Quantity (Base)",QtyToCreate);
      "Entry No." := NextEntryNo;
      TestTempSpecificationExists;
      INSERT;
      TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
      TempItemTrackLineInsert.INSERT;
      ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
        TempItemTrackLineInsert,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,0);
      CalculateSums;
    END;

    PROCEDURE CreateCustomizedSN@22();
    VAR
      EnterCustomizedSN@1001 : Form 6515;
      QtyToCreate@1002 : Decimal;
      QtyToCreateInt@1000 : Integer;
      Increment@1004 : Integer;
      CreateLotNo@1005 : Boolean;
      CustomizedSN@1006 : Code[20];
    BEGIN
      IF ZeroLineExists THEN
        DELETE;
      TESTFIELD("Quantity Handled (Base)",0);
      TESTFIELD("Quantity Invoiced (Base)",0);

      QtyToCreate := UndefinedQtyArray[1] * QtySignFactor;
      IF QtyToCreate < 0 THEN
        QtyToCreate := 0;

      IF QtyToCreate MOD 1 <> 0 THEN
        ERROR(Text008);

      QtyToCreateInt := QtyToCreate;

      CLEAR(EnterCustomizedSN);
      EnterCustomizedSN.LOOKUPMODE := TRUE;
      EnterCustomizedSN.SetFields("Item No.","Variant Code",QtyToCreate,FALSE);
      IF EnterCustomizedSN.RUNMODAL = ACTION::LookupOK THEN BEGIN
        EnterCustomizedSN.GetFields(QtyToCreateInt,CreateLotNo,CustomizedSN,Increment);
        CreateCustomizedSNBatch(QtyToCreateInt,CreateLotNo,CustomizedSN,Increment);
      END;
      CalculateSums;
    END;

    PROCEDURE CreateCustomizedSNBatch@28(QtyToCreate@1001 : Decimal;CreateLotNo@1002 : Boolean;CustomizedSN@1003 : Code[20];Increment@1004 : Integer);
    VAR
      i@1000 : Integer;
      Counter@1007 : Integer;
    BEGIN
      IF INCSTR(CustomizedSN) = '' THEN
        ERROR(Text013,CustomizedSN);
      NoSeriesMgt.TestManual(Item."Serial Nos.");

      TESTFIELD("Quantity Handled (Base)",0);
      TESTFIELD("Quantity Invoiced (Base)",0);

      IF QtyToCreate <= 0 THEN
        ERROR(Text009);
      IF QtyToCreate MOD 1 <> 0 THEN
        ERROR(Text008);

      IF CreateLotNo THEN BEGIN
        TESTFIELD("Lot No.",'');
        Item.TESTFIELD("Lot Nos.");
        VALIDATE("Lot No.",NoSeriesMgt.GetNextNo(Item."Lot Nos.",WORKDATE,TRUE));
      END;

      FOR i := 1 TO QtyToCreate DO BEGIN
        VALIDATE("Serial No.",CustomizedSN);
        VALIDATE("Quantity (Base)",QtySignFactor);
        "Entry No." := NextEntryNo;
        IF TestTempSpecificationExists THEN
          ERROR('');
        INSERT;
        TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
        TempItemTrackLineInsert.INSERT;
        ItemTrackingDataCollection.UpdateLotSNDataSetWithChange(
          TempItemTrackLineInsert,CurrentSignFactor * SourceQuantityArray[1] < 0,CurrentSignFactor,0);
        IF i < QtyToCreate THEN BEGIN
          Counter := Increment;
          REPEAT
            CustomizedSN := INCSTR(CustomizedSN);
            Counter := Counter - 1;
          UNTIL Counter <= 0;
        END;
      END;
      CalculateSums;
    END;

    PROCEDURE TestTempSpecificationExists@23() Exists@1000 : Boolean;
    VAR
      TempSpecification@1004 : TEMPORARY Record 336;
    BEGIN
      TempSpecification.COPY(Rec);
      SETCURRENTKEY("Lot No.","Serial No.");
      SETRANGE("Serial No.","Serial No.");
      IF "Serial No." = '' THEN
        SETRANGE("Lot No.","Lot No.");
      SETFILTER("Entry No.",'<>%1',"Entry No.");
      SETRANGE("Buffer Status",0);
      Exists := NOT ISEMPTY;
      COPY(TempSpecification);
      IF Exists AND CurrentFormIsOpen THEN
        IF "Serial No." = '' THEN
          MESSAGE(
            Text011,
            TABLECAPTION,FIELDCAPTION("Serial No."),"Serial No.",
            FIELDCAPTION("Lot No."),"Lot No.")
        ELSE
          MESSAGE(
            Text012,
            TABLECAPTION,FIELDCAPTION("Serial No."),"Serial No.");
    END;

    LOCAL PROCEDURE QtySignFactor@24() : Integer;
    BEGIN
      IF SourceQuantityArray[1] < 0 THEN
        EXIT(-1)
      ELSE
        EXIT(1)
    END;

    PROCEDURE RegisterItemTrackingLines@27(SourceSpecification@1001 : Record 336;AvailabilityDate@1002 : Date;VAR TempSpecification@1000 : TEMPORARY Record 336);
    BEGIN
      SourceSpecification.TESTFIELD("Source Type"); // Check if source has been set.
      IF NOT CalledFromSynchWhseItemTrkg THEN
        TempSpecification.RESET;
      IF NOT TempSpecification.FIND('-') THEN
        EXIT;

      IsCorrection := SourceSpecification.Correction;
      SetSource(SourceSpecification,AvailabilityDate);
      RESET;
      SETCURRENTKEY("Lot No.","Serial No.");

      REPEAT
        SETRANGE("Lot No.",TempSpecification."Lot No.");
        SETRANGE("Serial No.",TempSpecification."Serial No.");
        IF FIND('-') THEN BEGIN
          IF IsCorrection THEN BEGIN
            "Quantity (Base)" :=
              "Quantity (Base)" + TempSpecification."Quantity (Base)";
            "Qty. to Handle (Base)" :=
              "Qty. to Handle (Base)" + TempSpecification."Qty. to Handle (Base)";
            "Qty. to Invoice (Base)" :=
              "Qty. to Invoice (Base)" + TempSpecification."Qty. to Invoice (Base)";
          END ELSE
            VALIDATE("Quantity (Base)",
              "Quantity (Base)" + TempSpecification."Quantity (Base)");
          MODIFY;
        END ELSE BEGIN
          TRANSFERFIELDS(SourceSpecification);
          "Serial No." := TempSpecification."Serial No.";
          "Lot No." := TempSpecification."Lot No.";
          "Warranty Date" := TempSpecification."Warranty Date";
          "Expiration Date" := TempSpecification."Expiration Date";
          IF FormRunMode = FormRunMode::Reclass THEN BEGIN
            "New Serial No." := TempSpecification."New Serial No.";
            "New Lot No." := TempSpecification."New Lot No.";
            "New Expiration Date" := TempSpecification."New Expiration Date"
          END;
          VALIDATE("Quantity (Base)",TempSpecification."Quantity (Base)");
          "Entry No." := NextEntryNo;
          INSERT;
        END;
      UNTIL TempSpecification.NEXT = 0;
      RESET;
      IF FIND('-') THEN
        REPEAT
          CheckLine(Rec);
        UNTIL NEXT = 0;

      SETRANGE("Lot No.",SourceSpecification."Lot No.");
      SETRANGE("Serial No.",SourceSpecification."Serial No.");

      CalculateSums;
      IF UpdateUndefinedQty THEN
        WriteToDatabase
      ELSE
        ERROR(Text014,TotalItemTrackingLine."Quantity (Base)",
          LOWERCASE(TempReservEntry.TextCaption),SourceQuantityArray[1]);

      // Copy to inbound part of transfer
      IF FormRunMode = FormRunMode::Transfer THEN
        SynchronizeLinkedSources('');
    END;

    PROCEDURE SynchronizeLinkedSources@31(DialogText@1000 : Text[250]) : Boolean;
    BEGIN
      IF CurrentSourceRowID = '' THEN
        EXIT(FALSE);
      IF SecondSourceRowID = '' THEN
        EXIT(FALSE);

      ItemTrackingMgt.SynchronizeItemTracking(CurrentSourceRowID,SecondSourceRowID,DialogText);
      EXIT(TRUE);
    END;

    PROCEDURE SetBlockCommit@33(NewBlockCommit@1000 : Boolean);
    BEGIN
      BlockCommit := NewBlockCommit;
    END;

    PROCEDURE TempItemTrackingDef@35(NewTrackingSpecification@1000 : Record 336);
    BEGIN
      Rec := NewTrackingSpecification;
      "Entry No." := NextEntryNo;
      IF (NOT InsertIsBlocked) AND (NOT ZeroLineExists) THEN
        IF NOT TestTempSpecificationExists THEN
          INSERT
        ELSE
          ModifyTrackingSpecification(NewTrackingSpecification);
      WriteToDatabase;
    END;

    LOCAL PROCEDURE CheckEntryIsReservation@37(Checktype@1003 : 'Rename/Delete,Quantity';Messagetype@1000 : 'Error,Message') EntryIsReservation : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
      QtyToCheck@1005 : Decimal;
    BEGIN
      WITH ReservEntry DO BEGIN
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source ID",Rec."Source ID");
        SETRANGE("Source Ref. No.",Rec."Source Ref. No.");
        SETRANGE("Source Type",Rec."Source Type");
        SETRANGE("Source Subtype",Rec."Source Subtype");
        SETRANGE("Source Batch Name",Rec."Source Batch Name");
        SETRANGE("Source Prod. Order Line",Rec."Source Prod. Order Line");
        SETRANGE("Reservation Status","Reservation Status"::Reservation);
        SETRANGE("Serial No.",xRec."Serial No.");
        SETRANGE("Lot No.",xRec."Lot No.");
        IF FIND('-') THEN BEGIN
          CASE Checktype OF
            Checktype::"Rename/Delete":
              BEGIN
                EntryIsReservation := TRUE;
                CASE Messagetype OF
                  Messagetype::Error: ERROR(Text000,TextCaption);
                  Messagetype::Message: MESSAGE(Text000,TextCaption);
                END;
              END;
            Checktype::Quantity:
              BEGIN
                REPEAT
                  QtyToCheck := QtyToCheck + "Quantity (Base)";
                UNTIL NEXT = 0;
                IF ABS(Rec."Quantity (Base)") < ABS(QtyToCheck) THEN
                  ERROR(Text001,TextCaption,FIELDCAPTION("Quantity (Base)"),ABS(QtyToCheck));
              END;
          END;
        END;
      END;
    END;

    PROCEDURE SetCalledFromSynchWhseItemTrkg@39(CalledFromSynchWhseItemTrkg2@1000 : Boolean);
    BEGIN
      CalledFromSynchWhseItemTrkg := CalledFromSynchWhseItemTrkg2;
    END;

    PROCEDURE ModifyTrackingSpecification@40(NewTrackingSpecification@1000 : Record 336);
    VAR
      CrntTempTrackingSpec@1001 : TEMPORARY Record 336;
    BEGIN
      CrntTempTrackingSpec.COPY(Rec);
      SETCURRENTKEY("Lot No.","Serial No.");
      SETRANGE("Lot No.",NewTrackingSpecification."Lot No.");
      SETRANGE("Serial No.",NewTrackingSpecification."Serial No.");
      SETFILTER("Entry No.",'<>%1',"Entry No.");
      SETRANGE("Buffer Status",0);
      IF FIND('-') THEN BEGIN
        VALIDATE("Quantity (Base)",
          "Quantity (Base)" + NewTrackingSpecification."Quantity (Base)");
        MODIFY;
      END;
      COPY(CrntTempTrackingSpec);
    END;

    LOCAL PROCEDURE UpdateExpDateColor@41();
    BEGIN
      IF ("Buffer Status2" = "Buffer Status2"::"ExpDate blocked") OR (CurrentSignFactor < 0) THEN;
    END;

    LOCAL PROCEDURE UpdateExpDateEditable@42();
    BEGIN
      "Expiration DateEditable" :=
        NOT (("Buffer Status2" = "Buffer Status2"::"ExpDate blocked") OR (CurrentSignFactor < 0));
    END;

    PROCEDURE LookupAvailable@43(LookupMode@1000 : 'Serial No.,Lot No.');
    BEGIN
      "Bin Code" := ForBinCode;
      ItemTrackingDataCollection.LookupLotSerialNoAvailability(Rec,LookupMode);
      "Bin Code" := '';
      CurrPage.UPDATE;
    END;

    PROCEDURE F6LookupAvailable@44();
    BEGIN
      IF SNAvailabilityActive THEN
        LookupAvailable(0);
      IF LotAvailabilityActive THEN
        LookupAvailable(1);
    END;

    PROCEDURE LotSnAvailable@45(VAR TrackingSpecification@1000 : Record 336;LookupMode@1001 : 'Serial No.,Lot No.') : Boolean;
    BEGIN
      EXIT(ItemTrackingDataCollection.LotSNAvailable(TrackingSpecification,LookupMode));
    END;

    PROCEDURE SelectEntries@36();
    VAR
      xTrackingSpec@1001 : Record 336;
      MaxQuantity@1000 : Decimal;
    BEGIN
      xTrackingSpec.COPYFILTERS(Rec);
      MaxQuantity := UndefinedQtyArray[1];
      IF MaxQuantity * CurrentSignFactor > 0 THEN
        MaxQuantity := 0;
      "Bin Code" := ForBinCode;
      ItemTrackingDataCollection.SelectMultipleLotSerialNo(Rec,MaxQuantity,CurrentSignFactor);
      "Bin Code" := '';
      IF FINDSET THEN
        REPEAT
          CASE "Buffer Status" OF
            "Buffer Status"::MODIFY:
              BEGIN
                IF TempItemTrackLineModify.GET("Entry No.") THEN
                  TempItemTrackLineModify.DELETE;
                IF TempItemTrackLineInsert.GET("Entry No.") THEN BEGIN
                  TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
                  TempItemTrackLineInsert.MODIFY;
                END ELSE BEGIN
                  TempItemTrackLineModify.TRANSFERFIELDS(Rec);
                  TempItemTrackLineModify.INSERT;
                END;
              END;
            "Buffer Status"::INSERT:
              BEGIN
                TempItemTrackLineInsert.TRANSFERFIELDS(Rec);
                TempItemTrackLineInsert.INSERT;
              END;
          END;
          "Buffer Status" := 0;
          MODIFY;
        UNTIL NEXT = 0;
      LastEntryNo := "Entry No.";
      CalculateSums;
      UpdateUndefinedQty;
      COPYFILTERS(xTrackingSpec);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE ReserveItemTrackingLine@46();
    VAR
      LateBindingMgt@1000 : Codeunit 6502;
    BEGIN
      LateBindingMgt.ReserveItemTrackingLine(Rec);
    END;

    PROCEDURE ReestablishReservations@47();
    VAR
      LateBindingMgt@1000 : Codeunit 6502;
    BEGIN
      IF TempItemTrackLineReserv.FINDSET THEN
        REPEAT
          LateBindingMgt.ReserveItemTrackingLine2(TempItemTrackLineReserv,TempItemTrackLineReserv."Quantity (Base)");
          SetQtyToHandleAndInvoice(TempItemTrackLineReserv);
        UNTIL TempItemTrackLineReserv.NEXT = 0;
      TempItemTrackLineReserv.DELETEALL;
    END;

    PROCEDURE SetInbound@48(NewInbound@1000 : Boolean);
    BEGIN
      Inbound := NewInbound;
    END;

    PROCEDURE SetPick@34(IsPick2@1000 : Boolean);
    BEGIN
      IsPick := IsPick2;
    END;

    LOCAL PROCEDURE SerialNoOnAfterValidate@19074494();
    BEGIN
      UpdateExpDateEditable;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE LotNoOnAfterValidate@19045288();
    BEGIN
      UpdateExpDateEditable;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE QuantityBaseOnAfterValidate@19029188();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE QuantityBaseOnValidate@19070694();
    BEGIN
      IF NOT CheckLine(Rec) THEN
        EXIT;
    END;

    LOCAL PROCEDURE QtytoHandleBaseOnAfterValidate@19004517();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE QtytoInvoiceBaseOnAfterValidat@19062426();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      UpdateExpDateEditable;
    END;

    LOCAL PROCEDURE ExpirationDateOnFormat@19045111();
    BEGIN
      UpdateExpDateColor;
    END;

    BEGIN
    {
      In order to provide F6 invoked lookup from availability bitmap columns, a menu button has been hidden behind control 1.
      Function buttons Line and Function both exist in two overlayed versions to make dynamic show/hide/enable of
      individual menu items possible.
    }
    END.
  }
}
