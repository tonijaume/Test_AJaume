OBJECT Page 6503 Avail. - Item Tracking Lines
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rm;
    Editable=No;
    CaptionML=[ENU=Avail. - Item Tracking Lines;
               ESP=Disponib. - L¡ns. seg. prod.];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table337;
    DataCaptionFields=Lot No.,Serial No.;
    PageType=List;
    OnInit=BEGIN
             FunctionButton2Visible := TRUE;
             FunctionButton1Visible := TRUE;
           END;

    OnOpenPage=BEGIN
                 FunctionButton1Visible := EnableReservations;
                 FunctionButton2Visible := NOT EnableReservations;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 23      ;1   ;ActionGroup;
                      Name=FunctionButton2;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones];
                      Visible=FunctionButton2Visible }
      { 21      ;2   ;Action    ;
                      ShortCutKey=May£s+F7;
                      CaptionML=[ENU=&Show Document;
                                 ESP=&Mostrar documento];
                      Image=View;
                      OnAction=BEGIN
                                 ReservMgt.LookupDocument("Source Type","Source Subtype","Source ID",
                                   "Source Batch Name","Source Prod. Order Line","Source Ref. No.");
                               END;
                                }
      { 22      ;1   ;ActionGroup;
                      Name=FunctionButton1;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones];
                      Visible=FunctionButton1Visible }
      { 35      ;2   ;Action    ;
                      CaptionML=[ENU=&Cancel Reservation;
                                 ESP=&Cancelar reserva];
                      OnAction=BEGIN
                                 IF NOT EnableReservations THEN
                                   EXIT;
                                 IF NOT CONFIRM(Text001,FALSE) THEN
                                   EXIT;
                                 ReservEngineMgt.CloseReservEntry2(Rec);
                                 UpdateReservFrom;
                               END;
                                }
      { 36      ;2   ;Action    ;
                      ShortCutKey=May£s+F7;
                      CaptionML=[ENU=&Show Document;
                                 ESP=&Mostrar documento];
                      Image=View;
                      OnAction=BEGIN
                                 ReservMgt.LookupDocument("Source Type","Source Subtype","Source ID",
                                   "Source Batch Name","Source Prod. Order Line","Source Ref. No.");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 26  ;2   ;Field     ;
                SourceExpr="Reservation Status";
                Visible=FALSE }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Document Type;
                           ESP=Tipo documento];
                SourceExpr=TextCaption }

    { 28  ;2   ;Field     ;
                SourceExpr="Source Type";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Source ID" }

    { 6   ;2   ;Field     ;
                SourceExpr="Location Code" }

    { 30  ;2   ;Field     ;
                SourceExpr="Serial No." }

    { 32  ;2   ;Field     ;
                SourceExpr="Lot No." }

    { 8   ;2   ;Field     ;
                SourceExpr="Expected Receipt Date" }

    { 10  ;2   ;Field     ;
                SourceExpr="Quantity (Base)" }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=Reserved Qty. (Base);
                           ESP=Cdad. reservada (base)];
                SourceExpr=ReservedQtyBase;
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Available Quantity;
                           ESP=Cdad. disponible];
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserve;
                Editable=FALSE }

    { 19  ;2   ;Field     ;
                CaptionML=[ENU=Current Reserved Quantity;
                           ESP=Cdad. reservada actualmente];
                DecimalPlaces=0:5;
                SourceExpr=ReservedThisLine }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Cancel reservation?;ESP=¨Confirma que desea cancelar la/s reserva/s?';
      ReservEntry@1003 : Record 337;
      ReservEntry2@1004 : Record 337;
      PurchHeader@1005 : Record 38;
      SalesLine@1006 : Record 37;
      PurchLine@1007 : Record 39;
      ItemJnlLine@1008 : Record 83;
      ReqLine@1009 : Record 246;
      ProdOrderLine@1010 : Record 5406;
      ProdOrderComp@1011 : Record 5407;
      PlanningComponent@1012 : Record 99000829;
      TransLine@1013 : Record 5741;
      ServiceInvLine@1014 : Record 5902;
      ReservMgt@1015 : Codeunit 99000845;
      ReservEngineMgt@1016 : Codeunit 99000831;
      ReserveSalesLine@1017 : Codeunit 99000832;
      ReserveReqLine@1018 : Codeunit 99000833;
      ReservePurchLine@1019 : Codeunit 99000834;
      ReserveItemJnlLine@1020 : Codeunit 99000835;
      ReserveProdOrderLine@1021 : Codeunit 99000837;
      ReserveProdOrderComp@1022 : Codeunit 99000838;
      ReservePlanningComponent@1023 : Codeunit 99000840;
      ReserveTransLine@1024 : Codeunit 99000836;
      ReserveServiceInvLine@1025 : Codeunit 99000842;
      QtyToReserve@1026 : Decimal;
      QtyReservedThisLine@1027 : Decimal;
      NewQtyReservedThisLine@1028 : Decimal;
      CaptionText@1029 : Text[80];
      EnableReservations@1030 : Boolean;
      FunctionButton1Visible@19004938 : Boolean INDATASET;
      FunctionButton2Visible@19075899 : Boolean INDATASET;

    PROCEDURE SetSalesLine@24(VAR CurrentSalesLine@1000 : Record 37;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      SalesLine := CurrentSalesLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetSalesLine(SalesLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);
      CaptionText := ReserveSalesLine.Caption(SalesLine);
    END;

    PROCEDURE SetReqLine@23(VAR CurrentReqLine@1000 : Record 246;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ReqLine := CurrentReqLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetReqLine(ReqLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveReqLine.FilterReservFor(ReservEntry,ReqLine);
      CaptionText := ReserveReqLine.Caption(ReqLine);
    END;

    PROCEDURE SetPurchLine@22(VAR CurrentPurchLine@1000 : Record 39;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      PurchLine := CurrentPurchLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPurchLine(PurchLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReservePurchLine.FilterReservFor(ReservEntry,PurchLine);
      CaptionText := ReservePurchLine.Caption(PurchLine);
    END;

    PROCEDURE SetItemJnlLine@21(VAR CurrentItemJnlLine@1000 : Record 83;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ItemJnlLine := CurrentItemJnlLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetItemJnlLine(ItemJnlLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveItemJnlLine.FilterReservFor(ReservEntry,ItemJnlLine);
      CaptionText := ReserveItemJnlLine.Caption(ItemJnlLine);
    END;

    PROCEDURE SetProdOrderLine@19(VAR CurrentProdOrderLine@1000 : Record 5406;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ProdOrderLine := CurrentProdOrderLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
    END;

    PROCEDURE SetProdOrderComponent@1(VAR CurrentProdOrderComp@1000 : Record 5407;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ProdOrderComp := CurrentProdOrderComp;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
    END;

    PROCEDURE SetPlanningComponent@15(VAR CurrentPlanningComponent@1000 : Record 99000829;CurrentReservEntry@1001 : Record 337);
    BEGIN
      PlanningComponent := CurrentPlanningComponent;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanningComponent);
      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
    END;

    PROCEDURE SetTransferLine@16(VAR CurrentTransLine@1000 : Record 5741;CurrentReservEntry@1001 : Record 337;Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TransLine := CurrentTransLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,Direction);
      CaptionText := ReserveTransLine.Caption(TransLine);
    END;

    PROCEDURE SetServiceInvLine@8(VAR CurrentServiceInvLine@1000 : Record 5902;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentServiceInvLine.TESTFIELD(Type,CurrentServiceInvLine.Type::Item);
      ServiceInvLine := CurrentServiceInvLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetServLine(ServiceInvLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveServiceInvLine.FilterReservFor(ReservEntry,ServiceInvLine);
      CaptionText := ReserveServiceInvLine.Caption(ServiceInvLine);
    END;

    PROCEDURE SetItemTrackingLine@3(LookupType@1000 : Integer;LookupSubtype@1002 : Integer;CurrentReservEntry@1001 : Record 337;SearchForSupply@1004 : Boolean;AvailabilityDate@1003 : Date);
    BEGIN
      ReservMgt.SetMatchFilter(CurrentReservEntry,Rec,SearchForSupply,AvailabilityDate);
      SETRANGE("Source Type",LookupType);
      SETRANGE("Source Subtype",LookupSubtype);
      EnableReservations := TRUE;
    END;

    PROCEDURE CreateReservation@14(ReserveQuantity@1000 : Decimal);
    BEGIN
    END;

    PROCEDURE UpdateReservFrom@17();
    BEGIN
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.FIND;
            SetSalesLine(SalesLine,ReservEntry);
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.FIND;
            SetReqLine(ReqLine,ReservEntry);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.FIND;
            SetPurchLine(PurchLine,ReservEntry);
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            ItemJnlLine.FIND;
            SetItemJnlLine(ItemJnlLine,ReservEntry);
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ProdOrderLine.FIND;
            SetProdOrderLine(ProdOrderLine,ReservEntry);
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.FIND;
            SetProdOrderComponent(ProdOrderComp,ReservEntry);
          END;
        DATABASE::"Planning Component":
          BEGIN
            PlanningComponent.FIND;
            SetPlanningComponent(PlanningComponent,ReservEntry);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.FIND;
            SetTransferLine(TransLine,ReservEntry,ReservEntry."Source Subtype");
          END;
        DATABASE::"Service Line":
          BEGIN
            ServiceInvLine.FIND;
            SetServiceInvLine(ServiceInvLine,ReservEntry);
          END;
      END;
    END;

    PROCEDURE UpdateReservMgt@13();
    BEGIN
      CLEAR(ReservMgt);
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          ReservMgt.SetSalesLine(SalesLine);
        DATABASE::"Requisition Line":
          ReservMgt.SetReqLine(ReqLine);
        DATABASE::"Purchase Line":
          ReservMgt.SetPurchLine(PurchLine);
        DATABASE::"Item Journal Line":
          ReservMgt.SetItemJnlLine(ItemJnlLine);
        DATABASE::"Prod. Order Line":
          ReservMgt.SetProdOrderLine(ProdOrderLine);
        DATABASE::"Prod. Order Component":
          ReservMgt.SetProdOrderComponent(ProdOrderComp);
        DATABASE::"Planning Component":
          ReservMgt.SetPlanningComponent(PlanningComponent);
        DATABASE::"Transfer Line":
          ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
        DATABASE::"Service Line":
          ReservMgt.SetServLine(ServiceInvLine);
      END;
    END;

    PROCEDURE ReservedThisLine@2() : Decimal;
    BEGIN
      // This procedure is intentionally left blank.
    END;

    PROCEDURE ReservedQtyBase@5() : Decimal;
    BEGIN
      // This procedure is intentionally left blank.
    END;

    BEGIN
    END.
  }
}
