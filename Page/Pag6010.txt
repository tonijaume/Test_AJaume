OBJECT Page 6010 Res.Gr. Availability (Service)
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Res.Gr. Availability (Service);
               ESP=Dispon. grupo recurso (Serv.)];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table152;
    DataCaptionExpr='';
    PageType=Card;
    OnOpenPage=BEGIN
                 ServMgtSetup.GET;
                 ArrayLength := 32;
                 SetColumns(SetWanted::Initial);
               END;

    OnAfterGetRecord=VAR
                       QualifiedForAll@1000 : Boolean;
                     BEGIN
                       SelectedRes := "No.";

                       IF QualifiedForServItems = QualifiedForServItems::"Selected Service Item" THEN BEGIN
                         IF ServItemLine.GET(CurrentDocumentType,CurrentDocumentNo,CurrentServItemLineNo) THEN
                           Qualified := ServOrderAllocMgt.QualifiedForServiceItemLine(ServItemLine,"No.")
                         ELSE
                           Qualified := FALSE;
                       END ELSE BEGIN
                         QualifiedForAll := TRUE;
                         ServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
                         ServItemLine.SETRANGE("Document No.",ServHeader."No.");
                         IF ServItemLine.FIND('-') THEN
                           REPEAT
                             QualifiedForAll := ServOrderAllocMgt.QualifiedForServiceItemLine(ServItemLine,"No.")
                           UNTIL (QualifiedForAll = FALSE) OR (ServItemLine.NEXT = 0);
                         IF QualifiedForAll THEN
                           Qualified := TRUE
                         ELSE
                           Qualified := FALSE;
                       END;
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  OnAfterGetCurrRecord;
                END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 77      ;1   ;Action    ;
                      CaptionML=[ENU=&Show Matrix;
                                 ESP=&Mostrar matriz];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MatrixForm@1117 : Form 9221;
                                 I@1001 : Integer;
                               BEGIN
                                 MatrixForm.SetData(CurrentDocumentType,CurrentDocumentNo,CurrentServItemLineNo,CurrentEntryNo,
                                   MatrixColumnCaptions,MatrixRecords,Periods,PeriodType);
                                 MatrixForm.SETTABLEVIEW(Rec);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
      { 6       ;1   ;Action    ;
                      CaptionML=[ENU=Next Set;
                                 ESP=Conjunto siguiente];
                      ToolTipML=ENU=Next Set;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SetColumns(SetWanted::Next);
                               END;
                                }
      { 3       ;1   ;Action    ;
                      CaptionML=[ENU=Previous Set;
                                 ESP=Conjunto anterior];
                      ToolTipML=ENU=Previous Set;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SetColumns(SetWanted::Previous);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 22  ;1   ;Group     ;
                CaptionML=[ENU=Matrix Options;
                           ESP=Opciones matriz] }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=View by;
                           ESP=Ver por];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 ESP=D¡a,Semana,Mes,Trimestre,A¤o,Periodo contable];
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             DateControl;
                             SetColumns(SetWanted::Initial);
                           END;
                            }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           ESP=Filtro fecha];
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             DateControl;
                             SetColumns(SetWanted::Initial);
                               DateFilterOnAfterValidate;
                           END;
                            }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Column set;
                           ESP=Conjunto de columnas];
                SourceExpr=ColumnsSet;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      MatrixRecords@1042 : ARRAY [32] OF Record 2000000007;
      ResRec2@1041 : Record 156;
      ServiceHeader@1040 : Record 5900;
      Calendar@1020 : Record 2000000007;
      ServMgtSetup@1001 : Record 5911;
      ServHeader@1002 : Record 5900;
      ServItemLine@1003 : Record 5901;
      ServItem@1004 : Record 5940;
      PeriodFormMgt@1005 : Codeunit 359;
      ServOrderAllocMgt@1006 : Codeunit 5930;
      ApplicationManagement@1039 : Codeunit 1;
      PeriodMgt@1038 : Codeunit 359;
      CurrentDocumentType@1019 : Integer;
      CurrentDocumentNo@1007 : Code[20];
      CurrentServItemLineNo@1008 : Integer;
      CurrentEntryNo@1009 : Integer;
      SelectedDate@1010 : Date;
      SelectedResource@1011 : Code[20];
      PeriodType@1012 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      QualifiedForServItems@1013 : 'Selected Service Item,All Service Items in Order';
      QtytoAllocate@1014 : Decimal;
      AvailableHrs@1015 : Decimal;
      Qualified@1016 : Boolean;
      PreferredResource@1017 : Boolean;
      VertTableFields@1037 : ARRAY [2] OF Integer;
      HorizTableFields@1036 : ARRAY [5] OF Integer;
      DateFilter@1035 : Text[300];
      StartDate@1034 : Date;
      MatrixDateFilters@1031 : ARRAY [32] OF Record 2000000007;
      ResourceGrpFilter@1030 : Code[300];
      ColumnText@1029 : Text[300];
      ArrayLength@1023 : Integer;
      InternalDateFilter@1022 : Text[30];
      Periods@1021 : Integer;
      SelectedRes@1044 : Code[20];
      SetWanted@1049 : 'Initial,Previous,Same,Next';
      PKFirstRecInCurrSet@1048 : Text[1024];
      MatrixColumnCaptions@1047 : ARRAY [32] OF Text[100];
      ColumnsSet@1046 : Text[1024];
      CurrSetLength@1045 : Integer;

    PROCEDURE SetData@2(DocumentType@1003 : Integer;DocumentNo@1000 : Code[20];ServItemLineNo@1001 : Integer;EntryNo@1002 : Integer);
    BEGIN
      CurrentDocumentType := DocumentType;
      CurrentDocumentNo := DocumentNo;
      CurrentServItemLineNo := ServItemLineNo;
      CurrentEntryNo := EntryNo;
    END;

    PROCEDURE DateControl@6();
    BEGIN
      IF ApplicationManagement.MakeDateFilter(DateFilter) = 0 THEN;
      ResRec2.SETFILTER("Date Filter",DateFilter);
      DateFilter := ResRec2.GETFILTER("Date Filter");
      InternalDateFilter := DateFilter;
    END;

    PROCEDURE SetColumns@11(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      MatrixMgt@1000 : Codeunit 9200;
    BEGIN
      MatrixMgt.GeneratePeriodMatrixData(SetWanted,32,FALSE,PeriodType,DateFilter,
        PKFirstRecInCurrSet,MatrixColumnCaptions,ColumnsSet,CurrSetLength,MatrixRecords);
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    VAR
      QualifiedForAll@1000 : Boolean;
    BEGIN
      xRec := Rec;
      SelectedResource := "No.";
    END;

    BEGIN
    END.
  }
}
