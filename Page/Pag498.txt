OBJECT Page 498 Reservation
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Reservation;
               ESP=Reservas];
    SourceTable=Table338;
    DataCaptionExpr=CaptionText;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnOpenPage=BEGIN
                 FormIsOpen := TRUE;
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 29      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 ESP=&L¡nea] }
      { 30      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=&Available to Reserve;
                                 ESP=&Disponible para reserva];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ItemReservation;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DrillDownTotalQuantity;
                               END;
                                }
      { 34      ;2   ;Action    ;
                      CaptionML=[ENU=&Reservation Entries;
                                 ESP=Movs. &reserva];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ReservationLedger;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DrillDownReservedThisLine;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 35      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones] }
      { 36      ;2   ;Action    ;
                      CaptionML=[ENU=&Auto Reserve;
                                 ESP=Reservar &auto.];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=AutoReserve;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF ABS(QtyToReserve) - ABS(QtyReserved) = 0 THEN
                                   ERROR(Text000);

                                 RemainingQtyToReserve := QtyToReserve - QtyReserved;
                                 ReservMgt.AutoReserve(
                                   FullAutoReservation,ReservEntry.Description,
                                   ReservEntry."Shipment Date",RemainingQtyToReserve);
                                 IF NOT FullAutoReservation THEN
                                   MESSAGE(Text001);
                                 UpdateReservFrom;
                               END;
                                }
      { 37      ;2   ;Action    ;
                      CaptionML=[ENU=&Reserve from Current Line;
                                 ESP=Reservar desde &l¡nea actual];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=LineReserve;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 RemainingQtyToReserve := QtyToReserve - QtyReserved;
                                 IF RemainingQtyToReserve = 0 THEN
                                   ERROR(Text000);
                                 QtyReservedBefore := QtyReserved;
                                 IF HandleItemTracking THEN
                                   ReservMgt.SetItemTrackingHandling(2);
                                 ReservMgt.AutoReserveOneLine(
                                   "Entry No.",RemainingQtyToReserve,ReservEntry.Description,
                                   ReservEntry."Shipment Date");
                                 UpdateReservFrom;
                                 IF QtyReservedBefore = QtyReserved THEN
                                   ERROR(Text002);
                               END;
                                }
      { 43      ;2   ;Action    ;
                      CaptionML=[ENU=&Cancel Reservation from Current Line;
                                 ESP=&Cancelar reserva desde l¡nea actual];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Cancel;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReservEntry3@1001 : Record 337;
                                 RecordsFound@1002 : Boolean;
                               BEGIN
                                 IF NOT CONFIRM(Text003,FALSE,"Summary Type") THEN
                                   EXIT;
                                 CLEAR(ReservEntry2);
                                 ReservEntry2 := ReservEntry;
                                 ReservMgt.SetPointerFilter(ReservEntry2);
                                 ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
                                 IF ReservEntry2.FIND('-') THEN
                                   REPEAT
                                     ReservEntry3.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive);
                                     IF RelatesToSummEntry(ReservEntry3,Rec) THEN BEGIN
                                       ReservEngineMgt.CloseReservEntry2(ReservEntry2);
                                       RecordsFound := TRUE;
                                     END;
                                   UNTIL ReservEntry2.NEXT = 0;

                                 IF RecordsFound THEN
                                   UpdateReservFrom
                                 ELSE
                                   ERROR(Text005);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 13  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ESP=General] }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Item No.;
                           ESP=N§ producto];
                SourceExpr=ReservEntry."Item No.";
                Editable=FALSE }

    { 41  ;2   ;Field     ;
                CaptionML=[ENU=Shipment Date;
                           ESP=Fecha env¡o];
                SourceExpr=ReservEntry."Shipment Date";
                Editable=FALSE }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Description;
                           ESP=Descripci¢n];
                SourceExpr=ReservEntry.Description }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Quantity to Reserve;
                           ESP=Cdad. a reservar];
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserve;
                Editable=FALSE }

    { 27  ;2   ;Field     ;
                CaptionML=[ENU=Reserved Quantity;
                           ESP=Cantidad reservada];
                DecimalPlaces=0:5;
                SourceExpr=QtyReserved;
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Unreserved Quantity;
                           ESP=Cdad. no reservada];
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserve - QtyReserved;
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                SourceExpr="Summary Type";
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Total Quantity;
                           ESP=Cantidad total];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty("Total Quantity");
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownTotalQuantity;
                            END;
                             }

    { 16  ;2   ;Field     ;
                CaptionML=[ENU=Total Reserved Quantity;
                           ESP=Cantidad total reservada];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty("Total Reserved Quantity");
                Editable=FALSE;
                OnDrillDown=BEGIN
                              DrillDownReservedQuantity;
                            END;
                             }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Qty. Allocated in Warehouse;
                           ESP=Cant. asignada en Almac‚n];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty("Qty. Alloc. in Warehouse");
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Total Available Quantity;
                           ESP=Cantidad total disponible];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty("Total Available Quantity");
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr="Non-specific Reserved Qty.";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Current Reserved Quantity;
                           ESP=Cdad. reservada actualmente];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=ReservMgt.FormatQty(ReservedThisLine(Rec));
                OnDrillDown=BEGIN
                              DrillDownReservedThisLine;
                            END;
                             }

    { 38  ;1   ;Field     ;
                Name=NoteText;
                CaptionClass=FORMAT (STRSUBSTNO(Text009,NonSpecificQty,FIELDCAPTION("Total Reserved Quantity")));
                Visible=NoteTextVisible;
                Editable=FALSE;
                MultiLine=Yes }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           ESP=Filtros] }

    { 46  ;2   ;Field     ;
                CaptionML=[ENU=Variant Code;
                           ESP=C¢d. variante];
                SourceExpr=ReservEntry."Variant Code";
                Editable=FALSE }

    { 31  ;2   ;Field     ;
                CaptionML=[ENU=Location Code;
                           ESP=C¢d. almac‚n];
                SourceExpr=ReservEntry."Location Code";
                Editable=FALSE }

    { 50  ;2   ;Field     ;
                CaptionML=[ENU=Serial No.;
                           ESP=N§ serie];
                SourceExpr=ReservEntry."Serial No.";
                Editable=FALSE }

    { 44  ;2   ;Field     ;
                CaptionML=[ENU=Lot No.;
                           ESP=N§ lote];
                SourceExpr=ReservEntry."Lot No.";
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Fully reserved.;ESP=Completamente reservado/a.';
      Text001@1001 : TextConst 'ENU=Full automatic Reservation not possible.\Reserve manually.;ESP=No es posible la reserva autom tica completa.\Reservar manualmente';
      Text002@1002 : TextConst 'ENU=There is nothing available to reserve.;ESP=No hay nada disponible para reservar.';
      Text003@1003 : TextConst 'ENU=Do you want to cancel all reservations in the %1?;ESP=¨Confirma que desea cancelar todas las reservas en el/la %1?';
      Text005@1004 : TextConst 'ENU=There are no reservations to cancel.;ESP=No hay reservas que cancelar.';
      ReservEntry@1005 : Record 337;
      ReservEntry2@1006 : Record 337;
      SalesLine@1007 : Record 37;
      PurchLine@1008 : Record 39;
      ItemJnlLine@1009 : Record 83;
      ReqLine@1010 : Record 246;
      ProdOrderLine@1011 : Record 5406;
      ProdOrderComp@1012 : Record 5407;
      PlanningComponent@1013 : Record 99000829;
      ServiceLine@1014 : Record 5902;
      TransLine@1015 : Record 5741;
      AvailableSalesLines@1017 : Form 499;
      AvailablePurchLines@1018 : Form 501;
      AvailableItemJnlLines@1019 : Form 502;
      AvailableItemLedgEntries@1020 : Form 504;
      AvailableReqLines@1021 : Form 500;
      AvailableProdOrderLines@1022 : Form 99000897;
      AvailableProdOrderComps@1023 : Form 99000898;
      AvailablePlanningComponents@1024 : Form 99000900;
      AvailableServiceLines@1025 : Form 5999;
      AvailableTransLines@1026 : Form 99000896;
      AvailableItemTrackingLines@1049 : Form 6503;
      ReservMgt@1027 : Codeunit 99000845;
      ReservEngineMgt@1028 : Codeunit 99000831;
      ReserveSalesLine@1029 : Codeunit 99000832;
      ReserveReqLine@1030 : Codeunit 99000833;
      ReservePurchLine@1031 : Codeunit 99000834;
      ReserveItemJnlLine@1032 : Codeunit 99000835;
      ReserveProdOrderLine@1033 : Codeunit 99000837;
      ReserveProdOrderComp@1034 : Codeunit 99000838;
      ReservePlanningComponent@1035 : Codeunit 99000840;
      ReserveServiceLine@1036 : Codeunit 99000842;
      ReserveTransLine@1037 : Codeunit 99000836;
      CreateReservEntry@1038 : Codeunit 99000830;
      LateBindingMgt@1052 : Codeunit 6502;
      CurrentSteps@1039 : Integer;
      QtyToReserve@1040 : Decimal;
      QtyReserved@1041 : Decimal;
      ItemTrackingQtyToReserve@1042 : Decimal;
      RemainingQtyToReserve@1053 : Decimal;
      QtyReservedBefore@1043 : Decimal;
      NonSpecificQty@1057 : Decimal;
      CaptionText@1044 : Text[80];
      NoteText@1055 : Text[100];
      FullAutoReservation@1045 : Boolean;
      UnitOfMeasureCode@1046 : Code[10];
      FormIsOpen@1047 : Boolean;
      HandleItemTracking@1048 : Boolean;
      Text006@1050 : TextConst 'ENU=Do you wish to reserve specific serial and/or lot numbers?;ESP=¨Confirma que desea reservar n£meros de serie y/o lote espec¡ficos?';
      Text007@1051 : TextConst 'ENU=, %1 %2;ESP=, %1 %2';
      Text008@1054 : TextConst 'ENU=Action cancelled.;ESP=Acci¢n cancelada.';
      Text009@1056 : TextConst 'ENU=%1 of the %2 are non-specific and may be available.;ESP=%1 de %2 no son espec¡ficos y es posible que est‚n disponibles.';
      NoteTextVisible@19017321 : Boolean INDATASET;

    PROCEDURE SetSalesLine@1(VAR CurrentSalesLine@1000 : Record 37);
    BEGIN
      CurrentSalesLine.TESTFIELD("Job No.",'');
      CurrentSalesLine.TESTFIELD("Drop Shipment",FALSE);
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      CurrentSalesLine.TESTFIELD("Shipment Date");

      SalesLine := CurrentSalesLine;
      ReservEntry."Source Type" := DATABASE::"Sales Line";
      ReservEntry."Source Subtype" := SalesLine."Document Type";
      ReservEntry."Source ID" := SalesLine."Document No.";
      ReservEntry."Source Ref. No." := SalesLine."Line No.";

      ReservEntry."Item No." := SalesLine."No.";
      ReservEntry."Variant Code" := SalesLine."Variant Code";
      ReservEntry."Location Code" := SalesLine."Location Code";
      ReservEntry."Shipment Date" := SalesLine."Shipment Date";
      UnitOfMeasureCode := SalesLine."Unit of Measure Code";

      CaptionText := ReserveSalesLine.Caption(SalesLine);
      UpdateReservFrom;
    END;

    PROCEDURE SetReqLine@2(VAR CurrentReqLine@1000 : Record 246);
    BEGIN
      CurrentReqLine.TESTFIELD("Sales Order No.",'');
      CurrentReqLine.TESTFIELD("Sales Order Line No.",0);
      CurrentReqLine.TESTFIELD("Sell-to Customer No.",'');
      CurrentReqLine.TESTFIELD(Type,CurrentReqLine.Type::Item);
      CurrentReqLine.TESTFIELD("Due Date");

      ReqLine := CurrentReqLine;

      ReservEntry."Source Type" := DATABASE::"Requisition Line";
      ReservEntry."Source ID" := ReqLine."Worksheet Template Name";
      ReservEntry."Source Batch Name" := ReqLine."Journal Batch Name";
      ReservEntry."Source Ref. No." := ReqLine."Line No.";

      ReservEntry."Item No." := ReqLine."No.";
      ReservEntry."Variant Code" := ReqLine."Variant Code";
      ReservEntry."Location Code" := ReqLine."Location Code";
      ReservEntry."Shipment Date" := ReqLine."Due Date";
      UnitOfMeasureCode := ReqLine."Unit of Measure Code";

      CaptionText := ReserveReqLine.Caption(ReqLine);
      UpdateReservFrom;
    END;

    PROCEDURE SetPurchLine@3(VAR CurrentPurchLine@1000 : Record 39);
    BEGIN
      CurrentPurchLine.TESTFIELD("Job No.",'');
      CurrentPurchLine.TESTFIELD("Drop Shipment",FALSE);
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      CurrentPurchLine.TESTFIELD("Expected Receipt Date");

      PurchLine := CurrentPurchLine;
      ReservEntry."Source Type" := DATABASE::"Purchase Line";
      ReservEntry."Source Subtype" := PurchLine."Document Type";
      ReservEntry."Source ID" := PurchLine."Document No.";
      ReservEntry."Source Ref. No." := PurchLine."Line No.";

      ReservEntry."Item No." := PurchLine."No.";
      ReservEntry."Variant Code" := PurchLine."Variant Code";
      ReservEntry."Location Code" := PurchLine."Location Code";
      ReservEntry."Shipment Date" := PurchLine."Expected Receipt Date";
      UnitOfMeasureCode := PurchLine."Unit of Measure Code";

      CaptionText := ReservePurchLine.Caption(PurchLine);
      UpdateReservFrom;
    END;

    PROCEDURE SetItemJnlLine@4(VAR CurrentItemJnlLine@1000 : Record 83);
    BEGIN
      CurrentItemJnlLine.TESTFIELD("Drop Shipment",FALSE);
      CurrentItemJnlLine.TESTFIELD("Posting Date");

      ItemJnlLine := CurrentItemJnlLine;
      ReservEntry."Source Type" := DATABASE::"Item Journal Line";
      ReservEntry."Source Subtype" := ItemJnlLine."Entry Type";
      ReservEntry."Source ID" := ItemJnlLine."Journal Template Name";
      ReservEntry."Source Batch Name" := ItemJnlLine."Journal Batch Name";
      ReservEntry."Source Ref. No." := ItemJnlLine."Line No.";

      ReservEntry."Item No." := ItemJnlLine."Item No.";
      ReservEntry."Variant Code" := ItemJnlLine."Variant Code";
      ReservEntry."Location Code" := ItemJnlLine."Location Code";
      ReservEntry."Shipment Date" := ItemJnlLine."Posting Date";
      UnitOfMeasureCode := ItemJnlLine."Unit of Measure Code";

      CaptionText := ReserveItemJnlLine.Caption(ItemJnlLine);
      UpdateReservFrom;
    END;

    PROCEDURE SetProdOrderLine@9(VAR CurrentProdOrderLine@1000 : Record 5406);
    BEGIN
      CurrentProdOrderLine.TESTFIELD("Due Date");

      ProdOrderLine := CurrentProdOrderLine;
      ReservEntry."Source Type" := DATABASE::"Prod. Order Line";
      ReservEntry."Source Subtype" := ProdOrderLine.Status;
      ReservEntry."Source ID" := ProdOrderLine."Prod. Order No.";
      ReservEntry."Source Prod. Order Line" := ProdOrderLine."Line No.";

      ReservEntry."Item No." := ProdOrderLine."Item No.";
      ReservEntry."Variant Code" := ProdOrderLine."Variant Code";
      ReservEntry."Location Code" := ProdOrderLine."Location Code";
      ReservEntry."Shipment Date" := ProdOrderLine."Due Date";
      UnitOfMeasureCode := ProdOrderLine."Unit of Measure Code";

      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
      UpdateReservFrom;
    END;

    PROCEDURE SetProdOrderComponent@13(VAR CurrentProdOrderComp@1000 : Record 5407);
    BEGIN
      CurrentProdOrderComp.TESTFIELD("Due Date");

      ProdOrderComp := CurrentProdOrderComp;
      ReservEntry."Source Type" := DATABASE::"Prod. Order Component";
      ReservEntry."Source Subtype" := ProdOrderComp.Status;
      ReservEntry."Source ID" := ProdOrderComp."Prod. Order No.";
      ReservEntry."Source Prod. Order Line" := ProdOrderComp."Prod. Order Line No.";
      ReservEntry."Source Ref. No." := ProdOrderComp."Line No.";

      ReservEntry."Item No." := ProdOrderComp."Item No.";
      ReservEntry."Variant Code" := ProdOrderComp."Variant Code";
      ReservEntry."Location Code" := ProdOrderComp."Location Code";
      ReservEntry."Shipment Date" := ProdOrderComp."Due Date";
      UnitOfMeasureCode := ProdOrderComp."Unit of Measure Code";

      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
      UpdateReservFrom;
    END;

    PROCEDURE SetPlanningComponent@18(VAR CurrentPlanningComponent@1000 : Record 99000829);
    BEGIN
      CurrentPlanningComponent.TESTFIELD("Due Date");

      PlanningComponent := CurrentPlanningComponent;
      ReservEntry."Source Type" := DATABASE::"Planning Component";
      ReservEntry."Source ID" := PlanningComponent."Worksheet Template Name";
      ReservEntry."Source Batch Name" := PlanningComponent."Worksheet Batch Name";
      ReservEntry."Source Prod. Order Line" := PlanningComponent."Worksheet Line No.";
      ReservEntry."Source Ref. No." := PlanningComponent."Line No.";

      ReservEntry."Item No." := PlanningComponent."Item No.";
      ReservEntry."Variant Code" := PlanningComponent."Variant Code";
      ReservEntry."Location Code" := PlanningComponent."Location Code";
      ReservEntry."Shipment Date" := PlanningComponent."Due Date";
      UnitOfMeasureCode := PlanningComponent."Unit of Measure Code";

      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
      UpdateReservFrom;
    END;

    PROCEDURE SetTransLine@47(CurrentTransLine@1000 : Record 5741;Direction@1001 : 'Outbound,Inbound');
    BEGIN
      CLEARALL;

      TransLine := CurrentTransLine;
      ReservEntry."Source Type" := DATABASE::"Transfer Line";
      ReservEntry."Source Subtype" := Direction;
      ReservEntry."Source ID" := CurrentTransLine."Document No.";
      ReservEntry."Source Prod. Order Line" := CurrentTransLine."Derived From Line No.";
      ReservEntry."Source Ref. No." := CurrentTransLine."Line No.";

      ReservEntry."Item No." := CurrentTransLine."Item No.";
      ReservEntry."Variant Code" := CurrentTransLine."Variant Code";
      CASE Direction OF
        Direction::Outbound:
          BEGIN
            ReservEntry."Location Code" := CurrentTransLine."Transfer-from Code";
            ReservEntry."Shipment Date" := CurrentTransLine."Shipment Date";
          END;
        Direction::Inbound:
          BEGIN
            ReservEntry."Location Code" := CurrentTransLine."Transfer-to Code";
            ReservEntry."Expected Receipt Date" := CurrentTransLine."Receipt Date";
          END;
      END;

      ReservEntry."Qty. per Unit of Measure" := CurrentTransLine."Qty. per Unit of Measure";

      CaptionText := ReserveTransLine.Caption(TransLine);
      UpdateReservFrom;
    END;

    PROCEDURE SetServiceLine@15(VAR CurrentServiceLine@1000 : Record 5902);
    BEGIN
      CurrentServiceLine.TESTFIELD(Type,CurrentServiceLine.Type::Item);
      CurrentServiceLine.TESTFIELD("Posting Date");

      ServiceLine := CurrentServiceLine;
      ReservEntry."Source Type" := DATABASE::"Service Line";
      ReservEntry."Source Subtype" := ServiceLine."Document Type";
      ReservEntry."Source ID" := ServiceLine."Document No.";
      ReservEntry."Source Ref. No." := ServiceLine."Line No.";

      ReservEntry."Item No." := ServiceLine."No.";
      ReservEntry."Variant Code" := ServiceLine."Variant Code";
      ReservEntry."Location Code" := ServiceLine."Location Code";
      ReservEntry."Shipment Date" := ServiceLine."Posting Date";
      UnitOfMeasureCode := ServiceLine."Unit of Measure Code";

      CaptionText := ReserveServiceLine.Caption(ServiceLine);
      UpdateReservFrom;
    END;

    PROCEDURE SetReservEntry@16(ReservEntry2@1000 : Record 337);
    BEGIN
      ReservEntry := ReservEntry2;
      UpdateReservMgt;
    END;

    PROCEDURE FilterReservEntry@11(VAR FilterReservEntry@1000 : Record 337;FromReservSummEntry@1001 : Record 338);
    BEGIN
      FilterReservEntry.SETRANGE("Item No.",ReservEntry."Item No.");

      CASE FromReservSummEntry."Entry No." OF
        1:
          BEGIN // Item Ledger Entry
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Item Ledger Entry");
            FilterReservEntry.SETRANGE("Source Subtype",0);
            FilterReservEntry.SETRANGE("Expected Receipt Date");
          END;
        11,12,13,14,15,16:
          BEGIN // Purchase Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 11);
          END;
        21:
          BEGIN // Requisition Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Requisition Line");
            FilterReservEntry.SETRANGE("Source Subtype",0);
          END;
        31,32,33,34,35,36:
          BEGIN // Sales Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 31);
          END;
        41,42,43,44,45:
          BEGIN // Item Journal Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Item Journal Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 41);
          END;
        61,62,63,64:
          BEGIN // prod. order
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 61);
          END;
        71,72,73,74:
          BEGIN // prod. order
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 71);
          END;
        91:
          BEGIN // Planning Component
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Planning Component");
            FilterReservEntry.SETRANGE("Source Subtype",0);
          END;
        101,102:
          BEGIN // Transfer Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Transfer Line");
            FilterReservEntry.SETRANGE("Source Subtype",FromReservSummEntry."Entry No." - 101);
          END;
        110:
          BEGIN // Service Line
            FilterReservEntry.SETRANGE("Source Type",DATABASE::"Service Line");
            FilterReservEntry.SETRANGE("Source Subtype",0);
          END;
      END;

      FilterReservEntry.SETRANGE(
        "Reservation Status",FilterReservEntry."Reservation Status"::Reservation);
      FilterReservEntry.SETRANGE("Location Code",ReservEntry."Location Code");
      FilterReservEntry.SETRANGE("Variant Code",ReservEntry."Variant Code");
      IF (ReservEntry."Serial No." <> '') OR (ReservEntry."Lot No." <> '') THEN BEGIN
        FilterReservEntry.SETRANGE("Serial No.",ReservEntry."Serial No.");
        FilterReservEntry.SETRANGE("Lot No.",ReservEntry."Lot No.");
      END;
      FilterReservEntry.SETRANGE(Positive,ReservMgt.IsPositive);
    END;

    PROCEDURE RelatesToSummEntry@5(VAR FilterReservEntry@1000 : Record 337;FromReservSummEntry@1001 : Record 338) : Boolean;
    BEGIN
      CASE FromReservSummEntry."Entry No." OF
        1: // Item Ledger Entry
            EXIT((FilterReservEntry."Source Type" = DATABASE::"Item Ledger Entry") AND
              (FilterReservEntry."Source Subtype" = 0));
        11,12,13,14,15,16: // Purchase Line
            EXIT((FilterReservEntry."Source Type" = DATABASE::"Purchase Line") AND
              (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 11));
        21: // Requisition Line
            EXIT((FilterReservEntry."Source Type" = DATABASE::"Requisition Line") AND
              (FilterReservEntry."Source Subtype" = 0));
        31,32,33,34,35,36: // Sales Line
            EXIT((FilterReservEntry."Source Type" = DATABASE::"Sales Line") AND
              (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 31));
        41,42,43,44,45: // Item Journal Line
            EXIT((FilterReservEntry."Source Type" = DATABASE::"Item Journal Line") AND
              (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 41));
        51: // BOM Journal Line
            EXIT((FilterReservEntry."Source Type" = DATABASE::"BOM Journal Line") AND
              (FilterReservEntry."Source Subtype" = 0));
        61,62,63,64: // Prod. Order
            EXIT((FilterReservEntry."Source Type" = DATABASE::"Prod. Order Line") AND
              (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 61));
        71,72,73,74: // Prod. Order Component
            EXIT((FilterReservEntry."Source Type" = DATABASE::"Prod. Order Component") AND
              (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 71));
        91: // Planning Component
            EXIT((FilterReservEntry."Source Type" = DATABASE::"Planning Component") AND
              (FilterReservEntry."Source Subtype" = 0));
        101,102: // Transfer Line
            EXIT((FilterReservEntry."Source Type" = DATABASE::"Transfer Line") AND
              (FilterReservEntry."Source Subtype" = FromReservSummEntry."Entry No." - 101));
        110: // Service Invoice Line
            EXIT((FilterReservEntry."Source Type" = DATABASE::"Service Line") AND
              (FilterReservEntry."Source Subtype" = 0));
      END;
    END;

    PROCEDURE UpdateReservFrom@12();
    BEGIN
      IF NOT FormIsOpen THEN
        GetSerialLotNo;

      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.FIND;
            SalesLine.CALCFIELDS("Reserved Qty. (Base)");
            IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN
              SalesLine."Reserved Qty. (Base)" := -SalesLine."Reserved Qty. (Base)";
            QtyReserved := SalesLine."Reserved Qty. (Base)";
            QtyToReserve := SalesLine."Outstanding Qty. (Base)";
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.FIND;
            ReqLine.CALCFIELDS("Reserved Qty. (Base)");
            QtyReserved := ReqLine."Reserved Qty. (Base)";
            QtyToReserve := ReqLine."Quantity (Base)";
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.FIND;
            PurchLine.CALCFIELDS("Reserved Qty. (Base)");
            IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
              PurchLine."Reserved Qty. (Base)" := -PurchLine."Reserved Qty. (Base)";
            QtyReserved := PurchLine."Reserved Qty. (Base)";
            QtyToReserve := PurchLine."Outstanding Qty. (Base)";
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            ItemJnlLine.FIND;
            ItemJnlLine.CALCFIELDS("Reserved Qty. (Base)");
            QtyReserved := ItemJnlLine."Reserved Qty. (Base)";
            QtyToReserve := ItemJnlLine."Quantity (Base)";
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ProdOrderLine.FIND;
            ProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
            QtyReserved := ProdOrderLine."Reserved Qty. (Base)";
            QtyToReserve := ProdOrderLine."Remaining Qty. (Base)";
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.FIND;
            ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
            QtyReserved := ProdOrderComp."Reserved Qty. (Base)";
            QtyToReserve := ProdOrderComp."Remaining Qty. (Base)";
          END;
        DATABASE::"Planning Component":
          BEGIN
            PlanningComponent.FIND;
            PlanningComponent.CALCFIELDS("Reserved Qty. (Base)");
            QtyReserved := PlanningComponent."Reserved Qty. (Base)";
            QtyToReserve := PlanningComponent."Quantity (Base)";
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.FIND;
            IF ReservEntry."Source Subtype" = 0 THEN BEGIN // Outbound
              TransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)");
              QtyReserved := TransLine."Reserved Qty. Outbnd. (Base)";
              QtyToReserve := TransLine."Outstanding Qty. (Base)";
            END ELSE BEGIN // Inbound
              TransLine.CALCFIELDS("Reserved Qty. Inbnd. (Base)");
              QtyReserved := TransLine."Reserved Qty. Inbnd. (Base)";
              QtyToReserve := TransLine."Outstanding Qty. (Base)";
            END;
          END;
        DATABASE::"Service Line":
          BEGIN
            ServiceLine.FIND;
            ServiceLine.CALCFIELDS("Reserved Qty. (Base)");
            QtyReserved := ServiceLine."Reserved Qty. (Base)";
            QtyToReserve := ServiceLine."Outstanding Qty. (Base)";
          END;
      END;

      UpdateReservMgt;
      ReservMgt.UpdateStatistics(
        Rec,ReservEntry."Shipment Date",HandleItemTracking);

      IF HandleItemTracking THEN BEGIN
        QtyReserved := 0;
        IF FINDSET THEN
          REPEAT
            QtyReserved  += ReservedThisLine(Rec);
          UNTIL NEXT = 0;
        QtyToReserve := ItemTrackingQtyToReserve;
      END;

      UpdateNonSpecific; // Late Binding

      IF FormIsOpen THEN
        CurrPage.UPDATE;
    END;

    PROCEDURE UpdateReservMgt@7();
    BEGIN
      CLEAR(ReservMgt);
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          ReservMgt.SetSalesLine(SalesLine);
        DATABASE::"Requisition Line":
          ReservMgt.SetReqLine(ReqLine);
        DATABASE::"Purchase Line":
          ReservMgt.SetPurchLine(PurchLine);
        DATABASE::"Item Journal Line":
          ReservMgt.SetItemJnlLine(ItemJnlLine);
        DATABASE::"Prod. Order Line":
          ReservMgt.SetProdOrderLine(ProdOrderLine);
        DATABASE::"Prod. Order Component":
          ReservMgt.SetProdOrderComponent(ProdOrderComp);
        DATABASE::"Planning Component":
          ReservMgt.SetPlanningComponent(PlanningComponent);
        DATABASE::"Transfer Line":
          ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
        DATABASE::"Service Line":
          ReservMgt.SetServLine(ServiceLine);
      END;
      ReservMgt.SetSerialLotNo(ReservEntry."Serial No.",ReservEntry."Lot No.");
    END;

    PROCEDURE DrillDownTotalQuantity@6();
    VAR
      Location@1002 : Record 14;
      CreatePick@1001 : Codeunit 7312;
    BEGIN
      IF HandleItemTracking AND ("Entry No." <> 1) THEN BEGIN
        CLEAR(AvailableItemTrackingLines);
          AvailableItemTrackingLines.SetItemTrackingLine("Table ID","Source Subtype",ReservEntry,
            ReservMgt.IsPositive,ReservEntry."Shipment Date");
          AvailableItemTrackingLines.RUNMODAL;
        EXIT;
      END;

      ReservEntry2 := ReservEntry;
      IF NOT Location.GET(ReservEntry2."Location Code") THEN
        CLEAR(Location);

      CASE "Entry No." OF
        1:
          BEGIN // Item Ledger Entry
            CLEAR(AvailableItemLedgEntries);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableItemLedgEntries.SetSalesLine(SalesLine,ReservEntry2);
                  IF (Location."Bin Mandatory") OR (Location."Require Pick") THEN
                    AvailableItemLedgEntries.SetTotalAvailQty(
                      "Total Available Quantity" +
                      CreatePick.CheckOutBound(
                        ReservEntry2."Source Type",ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",ReservEntry2."Source Ref. No.",
                        ReservEntry2."Source Prod. Order Line"))
                  ELSE
                    AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.SetMaxQtyToReserve(QtyToReserve - QtyReserved);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableItemLedgEntries.SetReqLine(ReqLine,ReservEntry2);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableItemLedgEntries.SetPurchLine(PurchLine,ReservEntry2);
                  IF (Location."Bin Mandatory") OR (Location."Require Pick") AND
                     (PurchLine."Document Type" = PurchLine."Document Type"::"Return Order")
                  THEN
                    AvailableItemLedgEntries.SetTotalAvailQty(
                      "Total Available Quantity" +
                      CreatePick.CheckOutBound(
                        ReservEntry2."Source Type",ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",ReservEntry2."Source Ref. No.",
                        ReservEntry2."Source Prod. Order Line"))
                  ELSE
                    AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Item Journal Line":
                BEGIN
                  AvailableItemLedgEntries.SetItemJnlLine(ItemJnlLine,ReservEntry2);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableItemLedgEntries.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableItemLedgEntries.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  IF (Location."Bin Mandatory") OR (Location."Require Pick") THEN
                    AvailableItemLedgEntries.SetTotalAvailQty(
                      "Total Available Quantity" +
                      CreatePick.CheckOutBound(
                        ReservEntry2."Source Type",ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",ReservEntry2."Source Ref. No.",
                        ReservEntry2."Source Prod. Order Line"))
                  ELSE
                    AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableItemLedgEntries.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableItemLedgEntries.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  IF (Location."Bin Mandatory") OR (Location."Require Pick") THEN
                    AvailableItemLedgEntries.SetTotalAvailQty(
                      "Total Available Quantity" +
                      CreatePick.CheckOutBound(
                        ReservEntry2."Source Type",ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",ReservEntry2."Source Ref. No.",
                        ReservEntry2."Source Prod. Order Line"))
                  ELSE
                    AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableItemLedgEntries.SetServiceLine(ServiceLine,ReservEntry2);
                  AvailableItemLedgEntries.SetTotalAvailQty("Total Available Quantity");
                  AvailableItemLedgEntries.SetMaxQtyToReserve(QtyToReserve - QtyReserved);
                  AvailableItemLedgEntries.RUNMODAL;
                END;
            END;
          END;
        11,12,13,14,15,16:
          BEGIN // Purchase Line
            CLEAR(AvailablePurchLines);
            AvailablePurchLines.SetCurrentSubType("Entry No." - 11);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailablePurchLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailablePurchLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailablePurchLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Item Journal Line":
                BEGIN
                  AvailablePurchLines.SetItemJnlLine(ItemJnlLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailablePurchLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailablePurchLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailablePurchLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailablePurchLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailablePurchLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailablePurchLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailablePurchLines.RUNMODAL;
                END;
            END;
          END;
        21:
          BEGIN // Requisition Line
            CLEAR(AvailableReqLines);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableReqLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableReqLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableReqLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Item Journal Line":
                BEGIN
                  AvailableReqLines.SetItemJnlLine(ItemJnlLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableReqLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableReqLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableReqLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableReqLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableReqLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableReqLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableReqLines.RUNMODAL;
                END;
            END;
          END;
        31,32,33,34,35,36:
          BEGIN // Sales Line
            CLEAR(AvailableSalesLines);
            AvailableSalesLines.SetCurrentSubType("Entry No." - 31);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableSalesLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableSalesLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableSalesLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Item Journal Line":
                BEGIN
                  AvailableSalesLines.SetItemJnlLine(ItemJnlLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableSalesLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableSalesLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableSalesLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableSalesLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableSalesLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableSalesLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableSalesLines.RUNMODAL;
                END;
            END;
          END;
        41,42,43,44,45:
          BEGIN // Item Journal Line
            CLEAR(AvailableItemJnlLines);
            AvailableItemJnlLines.SetCurrentSubType("Entry No." - 41);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableItemJnlLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableItemJnlLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableItemJnlLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableItemJnlLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableItemJnlLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableItemJnlLines.RUNMODAL;
                END;
              DATABASE::"Item Journal Line":
                BEGIN
                  AvailableItemJnlLines.SetItemJnlLine(ItemJnlLine,ReservEntry2);
                  AvailableItemJnlLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableItemJnlLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableItemJnlLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableItemJnlLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableItemJnlLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableItemJnlLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableItemJnlLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableItemJnlLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableItemJnlLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableItemJnlLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableItemJnlLines.RUNMODAL;
                END;
            END;
          END;
        61,62,63,64:
          BEGIN
            CLEAR(AvailableProdOrderLines);
            AvailableProdOrderLines.SetCurrentSubType("Entry No." - 61);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableProdOrderLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableProdOrderLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableProdOrderLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Item Journal Line":
                BEGIN
                  AvailableProdOrderLines.SetItemJnlLine(ItemJnlLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableProdOrderLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableProdOrderLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableProdOrderLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableProdOrderLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableProdOrderLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableProdOrderLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableProdOrderLines.RUNMODAL;
                END;
            END;
          END;
        71,72,73,74:
          BEGIN
            CLEAR(AvailableProdOrderComps);
            AvailableProdOrderComps.SetCurrentSubType("Entry No." - 71);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableProdOrderComps.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableProdOrderComps.SetReqLine(ReqLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableProdOrderComps.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Item Journal Line":
                BEGIN
                  AvailableProdOrderComps.SetItemJnlLine(ItemJnlLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableProdOrderComps.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableProdOrderComps.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableProdOrderComps.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableProdOrderComps.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableProdOrderComps.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableProdOrderComps.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableProdOrderComps.RUNMODAL;
                END;
            END;
          END;
        91:
          BEGIN
            CLEAR(AvailablePlanningComponents);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailablePlanningComponents.SetSalesLine(SalesLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailablePlanningComponents.SetReqLine(ReqLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailablePlanningComponents.SetPurchLine(PurchLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Item Journal Line":
                BEGIN
                  AvailablePlanningComponents.SetItemJnlLine(ItemJnlLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailablePlanningComponents.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailablePlanningComponents.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailablePlanningComponents.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailablePlanningComponents.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailablePlanningComponents.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailablePlanningComponents.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailablePlanningComponents.RUNMODAL;
                END;
            END;
          END;
        101,102:
          BEGIN
            CLEAR(AvailableTransLines);
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableTransLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableTransLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableTransLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Item Journal Line":
                BEGIN
                  AvailableTransLines.SetItemJnlLine(ItemJnlLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableTransLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableTransLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableTransLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableTransLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableTransLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableTransLines.SetServiceInvLine(ServiceLine,ReservEntry2);
                  AvailableTransLines.RUNMODAL;
                END;
            END;
          END;
        110:
          BEGIN // Service Invoice Line
            CLEAR(AvailableServiceLines);
            ReservEntry2."Source Subtype" := 0;
            CASE ReservEntry2."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  AvailableServiceLines.SetSalesLine(SalesLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Requisition Line":
                BEGIN
                  AvailableServiceLines.SetReqLine(ReqLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  AvailableServiceLines.SetPurchLine(PurchLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Item Journal Line":
                BEGIN
                  AvailableServiceLines.SetItemJnlLine(ItemJnlLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Line":
                BEGIN
                  AvailableServiceLines.SetProdOrderLine(ProdOrderLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Prod. Order Component":
                BEGIN
                  AvailableServiceLines.SetProdOrderComponent(ProdOrderComp,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Planning Component":
                BEGIN
                  AvailableServiceLines.SetPlanningComponent(PlanningComponent,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  AvailableServiceLines.SetTransferLine(TransLine,ReservEntry2,ReservEntry."Source Subtype");
                  AvailableServiceLines.RUNMODAL;
                END;
              DATABASE::"Service Line":
                BEGIN
                  AvailableServiceLines.SetServInvLine(ServiceLine,ReservEntry2);
                  AvailableServiceLines.RUNMODAL;
                END;
            END;
          END;
      END;

      UpdateReservFrom;
    END;

    PROCEDURE DrillDownReservedQuantity@8();
    BEGIN
      ReservEntry2.RESET;

      ReservEntry2.SETCURRENTKEY(
        "Item No.","Source Type","Source Subtype","Reservation Status","Location Code","Variant Code",
        "Shipment Date","Expected Receipt Date","Serial No.","Lot No.");

      FilterReservEntry(ReservEntry2,Rec);
      FORM.RUNMODAL(FORM::"Reservation Entries",ReservEntry2);

      UpdateReservFrom;
    END;

    PROCEDURE DrillDownReservedThisLine@10();
    VAR
      ReservEntry3@1000 : Record 337;
      LotSNMatch@1001 : Boolean;
    BEGIN
      CLEAR(ReservEntry2);

      ReservEntry2.SETCURRENTKEY(
        "Item No.","Source Type","Source Subtype","Reservation Status","Location Code","Variant Code",
        "Shipment Date","Expected Receipt Date","Serial No.","Lot No.");

      FilterReservEntry(ReservEntry2,Rec);
      IF ReservEntry2.FIND('-') THEN
        REPEAT
          ReservEntry3.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive);

          IF (ReservEntry."Serial No." <> '') OR (ReservEntry."Lot No." <> '') THEN
            LotSNMatch := (ReservEntry3."Serial No." = ReservEntry."Serial No.") AND
                          (ReservEntry3."Lot No." = ReservEntry."Lot No.")
          ELSE
            LotSNMatch := TRUE;

          ReservEntry2.MARK((ReservEntry3."Source Type" = ReservEntry."Source Type") AND
                            (ReservEntry3."Source Subtype" = ReservEntry."Source Subtype") AND
                            (ReservEntry3."Source ID" = ReservEntry."Source ID") AND
                            (ReservEntry3."Source Batch Name" = ReservEntry."Source Batch Name") AND
                            (ReservEntry3."Source Prod. Order Line" = ReservEntry."Source Prod. Order Line") AND
                            (ReservEntry3."Source Ref. No." =  ReservEntry."Source Ref. No.") AND
                            ((LotSNMatch AND HandleItemTracking) OR
                             NOT HandleItemTracking));
        UNTIL ReservEntry2.NEXT = 0;

      ReservEntry2.MARKEDONLY(TRUE);
      FORM.RUNMODAL(FORM::"Reservation Entries",ReservEntry2);

      UpdateReservFrom;
    END;

    PROCEDURE ReservedThisLine@14(ReservSummEntry2@1002 : TEMPORARY Record 338) ReservedQuantity@1000 : Decimal;
    VAR
      ReservEntry3@1001 : Record 337;
    BEGIN
      CLEAR(ReservEntry2);

      ReservEntry2.SETCURRENTKEY(
        "Item No.","Source Type","Source Subtype","Reservation Status","Location Code","Variant Code",
        "Shipment Date","Expected Receipt Date","Serial No.","Lot No.");
      ReservedQuantity := 0;

      FilterReservEntry(ReservEntry2,ReservSummEntry2);
      IF ReservEntry2.FIND('-') THEN
        REPEAT
          ReservEntry3.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive);
          IF (ReservEntry3."Source Type" = ReservEntry."Source Type") AND
             (ReservEntry3."Source Subtype" = ReservEntry."Source Subtype") AND
             (ReservEntry3."Source ID" = ReservEntry."Source ID") AND
             (ReservEntry3."Source Batch Name" = ReservEntry."Source Batch Name") AND
             (ReservEntry3."Source Prod. Order Line" = ReservEntry."Source Prod. Order Line") AND
             (ReservEntry3."Source Ref. No." =  ReservEntry."Source Ref. No.") AND
             (((ReservEntry3."Serial No." =  ReservEntry."Serial No.") AND
               (ReservEntry3."Lot No." =  ReservEntry."Lot No.") AND
               HandleItemTracking) OR
               NOT HandleItemTracking)
          THEN
            ReservedQuantity += ReservEntry2."Quantity (Base)" * CreateReservEntry.SignFactor(ReservEntry2);
        UNTIL ReservEntry2.NEXT = 0;

      EXIT(ReservedQuantity);
    END;

    PROCEDURE GetSerialLotNo@17();
    VAR
      Item@1000 : Record 27;
      ReservEntry2@1002 : Record 337;
      TempReservEntry@1003 : TEMPORARY Record 337;
      TempTrackingSpecification@1005 : TEMPORARY Record 336;
      ItemTrackingMgt@1004 : Codeunit 6500;
    BEGIN
      Item.GET(ReservEntry."Item No.");
      IF Item."Item Tracking Code" = '' THEN
        EXIT;
      ReservEntry2 := ReservEntry;
      ReservMgt.SetPointerFilter(ReservEntry2);
      ItemTrackingMgt.SumUpItemTracking(ReservEntry2,TempTrackingSpecification,TRUE,TRUE);

      IF TempTrackingSpecification.FIND('-') THEN BEGIN
        IF NOT CONFIRM(STRSUBSTNO(Text006,ReservEntry2.FIELDCAPTION("Serial No."),
                       ReservEntry2.FIELDCAPTION("Lot No.")),TRUE) THEN
          EXIT;
        REPEAT
          TempReservEntry.TRANSFERFIELDS(TempTrackingSpecification);
          TempReservEntry.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;

        IF FORM.RUNMODAL(FORM::"Item Tracking List",TempReservEntry) = ACTION::LookupOK THEN BEGIN
          ReservEntry."Serial No." := TempReservEntry."Serial No.";
          ReservEntry."Lot No." := TempReservEntry."Lot No.";
          CaptionText += STRSUBSTNO(Text007,ReservEntry."Serial No.",ReservEntry."Lot No.");
          ItemTrackingQtyToReserve :=
            TempReservEntry."Quantity (Base)" * CreateReservEntry.SignFactor(TempReservEntry);
          HandleItemTracking := TRUE;
        END ELSE
          ERROR(Text008);
      END;
    END;

    PROCEDURE UpdateNonSpecific@19();
    BEGIN
      SETFILTER("Non-specific Reserved Qty.",'>%1',0);
      NoteTextVisible := NOT ISEMPTY;
      NonSpecificQty := "Non-specific Reserved Qty.";
      SETRANGE("Non-specific Reserved Qty.");
    END;

    BEGIN
    END.
  }
}
