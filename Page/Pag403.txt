OBJECT Page 403 Purchase Order Statistics
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00,NAVES6.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Purchase Order Statistics;
               ESP=Estad. pedido compras];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table38;
    PageType=Card;
    OnOpenPage=BEGIN
                 PurchSetup.GET;
                 AllowInvDisc :=
                   NOT (PurchSetup."Calc. Inv. Discount" AND VendInvDiscRecExists("Invoice Disc. Code"));
                 AllowVATDifference :=
                   PurchSetup."Allow VAT Difference" AND
                   NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
                 VATLinesFormIsEditable := AllowVATDifference OR AllowInvDisc;
                 CurrPage.EDITABLE := VATLinesFormIsEditable;
               END;

    OnAfterGetRecord=VAR
                       PurchLine@1000 : Record 39;
                       TempPurchLine@1001 : TEMPORARY Record 39;
                       PurchPostPrepmt@1002 : Codeunit 444;
                     BEGIN
                       CurrPage.CAPTION(STRSUBSTNO(Text000,"Document Type"));

                       IF PrevNo = "No." THEN
                         EXIT;
                       PrevNo := "No.";
                       FILTERGROUP(2);
                       SETRANGE("No.",PrevNo);
                       FILTERGROUP(0);

                       CLEAR(PurchLine);
                       CLEAR(TotalPurchLine);
                       CLEAR(TotalPurchLineLCY);

                       FOR i := 1 TO 3 DO BEGIN
                         TempPurchLine.DELETEALL;
                         CLEAR(TempPurchLine);
                         CLEAR(PurchPost);
                         PurchPost.GetPurchLines(Rec,TempPurchLine,i - 1);
                         CLEAR(PurchPost);
                         CASE i OF
                           1: PurchLine.CalcVATAmountLines(0,Rec,TempPurchLine,TempVATAmountLine1);
                           2: PurchLine.CalcVATAmountLines(0,Rec,TempPurchLine,TempVATAmountLine2);
                           3: PurchLine.CalcVATAmountLines(0,Rec,TempPurchLine,TempVATAmountLine3);
                         END;

                         PurchPost.SumPurchLinesTemp(
                           Rec,TempPurchLine,i - 1,TotalPurchLine[i],TotalPurchLineLCY[i],
                           VATAmount[i],VATAmountText[i]);
                         IF "Prices Including VAT" THEN BEGIN
                           TotalAmount2[i] := TotalPurchLine[i].Amount;
                           TotalAmount1[i] := TotalAmount2[i] + VATAmount[i];
                           TotalPurchLine[i]."Line Amount" := TotalAmount1[i] + TotalPurchLine[i]."Inv. Discount Amount"
                             + TotalPurchLine[i]."Pmt. Disc. Rcd. Amount";
                         END ELSE BEGIN
                           TotalAmount1[i] := TotalPurchLine[i].Amount;
                           TotalAmount2[i] := TotalPurchLine[i]."Amount Including VAT";
                         END;
                       END;
                       TempPurchLine.DELETEALL;
                       CLEAR(TempPurchLine);
                       PurchPostPrepmt.GetPurchLines(Rec,0,TempPurchLine);
                       PurchPostPrepmt.SumPrepmt(
                         Rec,TempPurchLine,TempVATAmountLine4,PrepmtTotalAmount,PrepmtVATAmount,PrepmtVATAmountText);
                       PrepmtInvPct :=
                         Pct(TotalPurchLine[1]."Prepmt. Amt. Inv.",PrepmtTotalAmount);
                       PrepmtDeductedPct :=
                         Pct(TotalPurchLine[1]."Prepmt Amt Deducted",TotalPurchLine[1]."Prepmt. Amt. Inv.");
                       IF "Prices Including VAT" THEN BEGIN
                         PrepmtTotalAmount2 := PrepmtTotalAmount;
                         PrepmtTotalAmount := PrepmtTotalAmount + PrepmtVATAmount;
                       END ELSE
                         PrepmtTotalAmount2 := PrepmtTotalAmount + PrepmtVATAmount;

                       IF Vend.GET("Pay-to Vendor No.") THEN
                         Vend.CALCFIELDS("Balance (LCY)")
                       ELSE
                         CLEAR(Vend);

                       TempVATAmountLine1.MODIFYALL(Modified,FALSE);
                       TempVATAmountLine2.MODIFYALL(Modified,FALSE);
                       TempVATAmountLine3.MODIFYALL(Modified,FALSE);
                       TempVATAmountLine4.MODIFYALL(Modified,FALSE);

                       PrevTab := -1;
                     END;

    OnQueryClosePage=BEGIN
                       GetVATSpecification(PrevTab);
                       IF TempVATAmountLine1.GetAnyLineModified OR TempVATAmountLine2.GetAnyLineModified THEN
                         UpdateVATOnPurchLines;
                       EXIT(TRUE);
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ESP=General] }

    { 35  ;2   ;Field     ;
                CaptionML=[ENU=Amount;
                           ESP=Importe];
                SourceExpr=TotalPurchLine[1]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,FALSE);
                Editable=FALSE }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Inv. Discount Amount;
                           ESP=Importe dto. factura];
                SourceExpr=TotalPurchLine[1]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::General;
                             UpdateInvDiscAmount(1);
                           END;
                            }

    { 1100000;2;Field     ;
                CaptionML=[ENU=Pmt. Disc. Rcd. Amount;
                           ESP=Dto. P.P.];
                SourceExpr=TotalPurchLine[1]."Pmt. Disc. Rcd. Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::General;
                             UpdateInvDiscAmount(1);
                           END;
                            }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Total;
                           ESP=Total];
                SourceExpr=TotalAmount1[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,FALSE);
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::General;
                             UpdateTotalAmount(1);
                           END;
                            }

    { 22  ;2   ;Field     ;
                CaptionML=[ENU=VAT Amount;
                           ESP=Importe IVA];
                SourceExpr=VATAmount[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT (VATAmountText[1]);
                Editable=FALSE }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Total Incl. VAT;
                           ESP=Total IVA incl.];
                SourceExpr=TotalAmount2[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,TRUE);
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                CaptionML=[ENU=Purchase (LCY);
                           ESP=Compra (DL)];
                SourceExpr=TotalPurchLineLCY[1].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 37  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ESP=Cantidad];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[1].Quantity;
                Editable=FALSE }

    { 30  ;2   ;Field     ;
                CaptionML=[ENU=Parcels;
                           ESP=Lotes];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[1]."Units per Parcel";
                Editable=FALSE }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Net Weight;
                           ESP=Peso neto];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[1]."Net Weight";
                Editable=FALSE }

    { 23  ;2   ;Field     ;
                CaptionML=[ENU=Gross Weight;
                           ESP=Peso bruto];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[1]."Gross Weight";
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Volume;
                           ESP=Volumen];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[1]."Unit Volume";
                Editable=FALSE }

    { 40  ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=No. of VAT Lines;
                           ESP=N§ de l¡neas de IVA];
                SourceExpr=TempVATAmountLine1.COUNT;
                OnDrillDown=BEGIN
                              VATLinesDrillDown(TempVATAmountLine1,FALSE);
                              UpdateHeaderInfo(1, TempVATAmountLine1);
                            END;
                             }

    { 1905885101;1;Group  ;
                CaptionML=[ENU=Invoicing;
                           ESP=Facturaci¢n] }

    { 59  ;2   ;Field     ;
                CaptionML=[ENU=Amount;
                           ESP=Importe];
                SourceExpr=TotalPurchLine[2]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,FALSE);
                Editable=FALSE }

    { 57  ;2   ;Field     ;
                CaptionML=[ENU=Inv. Discount Amount;
                           ESP=Importe dto. factura];
                SourceExpr=TotalPurchLine[2]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::Invoicing;
                             UpdateInvDiscAmount(2);
                           END;
                            }

    { 1100002;2;Field     ;
                CaptionML=[ENU=Pmt. Disc. Rcd. Amount;
                           ESP=Dto. P.P.];
                SourceExpr=TotalPurchLine[2]."Pmt. Disc. Rcd. Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::Invoicing;
                             UpdateInvDiscAmount(2);
                           END;
                            }

    { 51  ;2   ;Field     ;
                CaptionML=[ENU=Total;
                           ESP=Total];
                SourceExpr=TotalAmount1[2];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,FALSE);
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::Invoicing;
                             UpdateTotalAmount(2);
                           END;
                            }

    { 47  ;2   ;Field     ;
                CaptionML=[ENU=VAT Amount;
                           ESP=Importe IVA];
                SourceExpr=VATAmount[2];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT (VATAmountText[2]);
                Editable=FALSE }

    { 45  ;2   ;Field     ;
                CaptionML=[ENU=Total Incl. VAT;
                           ESP=Total IVA incl.];
                SourceExpr=TotalAmount2[2];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,TRUE);
                Editable=FALSE }

    { 41  ;2   ;Field     ;
                CaptionML=[ENU=Purchase (LCY);
                           ESP=Compra (DL)];
                SourceExpr=TotalPurchLineLCY[2].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 61  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ESP=Cantidad];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[2].Quantity;
                Editable=FALSE }

    { 55  ;2   ;Field     ;
                CaptionML=[ENU=Parcels;
                           ESP=Lotes];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[2]."Units per Parcel";
                Editable=FALSE }

    { 53  ;2   ;Field     ;
                CaptionML=[ENU=Net Weight;
                           ESP=Peso neto];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[2]."Net Weight";
                Editable=FALSE }

    { 48  ;2   ;Field     ;
                CaptionML=[ENU=Gross Weight;
                           ESP=Peso bruto];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[2]."Gross Weight";
                Editable=FALSE }

    { 43  ;2   ;Field     ;
                CaptionML=[ENU=Volume;
                           ESP=Volumen];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[2]."Unit Volume";
                Editable=FALSE }

    { 64  ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=No. of VAT Lines;
                           ESP=N§ de l¡neas de IVA];
                SourceExpr=TempVATAmountLine2.COUNT;
                OnDrillDown=BEGIN
                              VATLinesDrillDown(TempVATAmountLine2,TRUE);
                              UpdateHeaderInfo(2, TempVATAmountLine2);
                            END;
                             }

    { 1906801201;1;Group  ;
                CaptionML=[ENU=Shipping;
                           ESP=Env¡o] }

    { 83  ;2   ;Field     ;
                CaptionML=[ENU=Amount;
                           ESP=Importe];
                SourceExpr=TotalPurchLine[3]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,FALSE);
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                CaptionML=[ENU=Inv. Discount Amount;
                           ESP=Importe dto. factura];
                SourceExpr=TotalPurchLine[3]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE }

    { 1100004;2;Field     ;
                CaptionML=[ENU=Pmt. Disc. Rcd. Amount;
                           ESP=Dto. P.P.];
                SourceExpr=TotalPurchLine[3]."Pmt. Disc. Rcd. Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE }

    { 75  ;2   ;Field     ;
                CaptionML=[ENU=Total;
                           ESP=Total];
                SourceExpr=TotalAmount1[3];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,FALSE);
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                CaptionML=[ENU=VAT Amount;
                           ESP=Importe IVA];
                SourceExpr=VATAmount[3];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT (VATAmountText[3]);
                Editable=FALSE }

    { 69  ;2   ;Field     ;
                CaptionML=[ENU=Total Incl. VAT;
                           ESP=Total IVA incl.];
                SourceExpr=TotalAmount2[3];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,TRUE);
                Editable=FALSE }

    { 65  ;2   ;Field     ;
                CaptionML=[ENU=Purchase (LCY);
                           ESP=Compra (DL)];
                SourceExpr=TotalPurchLineLCY[3].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 85  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ESP=Cantidad];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[3].Quantity;
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                CaptionML=[ENU=Parcels;
                           ESP=Lotes];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[3]."Units per Parcel";
                Editable=FALSE }

    { 77  ;2   ;Field     ;
                CaptionML=[ENU=Net Weight;
                           ESP=Peso neto];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[3]."Net Weight";
                Editable=FALSE }

    { 72  ;2   ;Field     ;
                CaptionML=[ENU=Gross Weight;
                           ESP=Peso bruto];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[3]."Gross Weight";
                Editable=FALSE }

    { 67  ;2   ;Field     ;
                CaptionML=[ENU=Volume;
                           ESP=Volumen];
                DecimalPlaces=0:6;
                SourceExpr=TotalPurchLine[3]."Unit Volume";
                Editable=FALSE }

    { 88  ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=No. of VAT Lines;
                           ESP=N§ de l¡neas de IVA];
                SourceExpr=TempVATAmountLine3.COUNT;
                OnDrillDown=BEGIN
                              VATLinesDrillDown(TempVATAmountLine3,FALSE);
                            END;
                             }

    { 1900201301;1;Group  ;
                CaptionML=[ENU=Prepayment;
                           ESP=Prepago] }

    { 15  ;2   ;Field     ;
                SourceExpr=PrepmtTotalAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text006,FALSE);
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::Prepayment;
                             UpdatePrepmtAmount;
                           END;
                            }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=Prepayment Amount Invoiced;
                           ESP=Importe prepago facturado];
                SourceExpr=PrepmtVATAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT (PrepmtVATAmountText);
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Prepmt. Amount Invoiced;
                           ESP=Importe prepago facturado];
                SourceExpr=PrepmtTotalAmount2;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text006,TRUE);
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr=TotalPurchLine[1]."Prepmt. Amt. Inv.";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text007,FALSE);
                Editable=FALSE }

    { 7   ;2   ;Field     ;
                ExtendedDatatype=Ratio;
                CaptionML=[ENU=Invoiced % of Prepayment Amt.;
                           ESP=% facturado de importe prepago];
                ToolTipML=[ENU=Invoiced % of Prepayment Amt.;
                           ESP=% facturado de importe prepago];
                SourceExpr=PrepmtInvPct }

    { 5   ;2   ;Field     ;
                SourceExpr=TotalPurchLine[1]."Prepmt Amt Deducted";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text008,FALSE);
                Editable=FALSE }

    { 3   ;2   ;Field     ;
                ExtendedDatatype=Ratio;
                CaptionML=[ENU=Deducted % of Prepayment Amt. to Deduct;
                           ESP=% descontado del importe prepago que se debe descontar];
                ToolTipML=[ENU=Deducted % of Prepayment Amt. to Deduct;
                           ESP=% descontado del importe prepago que se debe descontar];
                SourceExpr=PrepmtDeductedPct }

    { 4   ;2   ;Field     ;
                SourceExpr=TotalPurchLine[1]."Prepmt Amt to Deduct";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text009,FALSE);
                Editable=FALSE }

    { 90  ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=No. of VAT Lines;
                           ESP=N§ de l¡neas de IVA];
                SourceExpr=TempVATAmountLine4.COUNT;
                OnDrillDown=BEGIN
                              VATLinesDrillDown(TempVATAmountLine4,TRUE);
                            END;
                             }

    { 1901061301;1;Group  ;
                CaptionML=[ENU=Vendor;
                           ESP=Proveedor] }

    { 131 ;2   ;Field     ;
                CaptionML=[ENU=Balance (LCY);
                           ESP=Saldo (DL)];
                SourceExpr=Vend."Balance (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Purchase %1 Statistics;ESP=Estad¡sticas %1 compras';
      Text001@1001 : TextConst 'ENU=Total;ESP=Total';
      Text002@1002 : TextConst 'ENU=Amount;ESP=Importe';
      Text003@1003 : TextConst 'ENU=%1 must not be 0.;ESP=%1 no debe ser 0.';
      Text004@1004 : TextConst 'ENU=%1 must not be greater than %2.;ESP=%1 no debe ser m s grande de %2';
      Text005@1005 : TextConst 'ENU=You cannot change the invoice discount because there is a %1 record for %2 %3.;ESP=No puede cambiar el dto. factura porque hay un %1 registro para %2 %3.';
      TotalPurchLine@1006 : ARRAY [3] OF Record 39;
      TotalPurchLineLCY@1007 : ARRAY [3] OF Record 39;
      Vend@1008 : Record 23;
      TempVATAmountLine1@1009 : TEMPORARY Record 290;
      TempVATAmountLine2@1010 : TEMPORARY Record 290;
      TempVATAmountLine3@1011 : TEMPORARY Record 290;
      TempVATAmountLine4@1030 : TEMPORARY Record 290;
      PurchSetup@1012 : Record 312;
      PurchPost@1013 : Codeunit 90;
      TotalAmount1@1014 : ARRAY [3] OF Decimal;
      TotalAmount2@1015 : ARRAY [3] OF Decimal;
      VATAmount@1016 : ARRAY [3] OF Decimal;
      PrepmtTotalAmount@1028 : Decimal;
      PrepmtVATAmount@1027 : Decimal;
      PrepmtTotalAmount2@1026 : Decimal;
      VATAmountText@1017 : ARRAY [3] OF Text[30];
      PrepmtVATAmountText@1029 : Text[30];
      PrepmtInvPct@1032 : Decimal;
      PrepmtDeductedPct@1031 : Decimal;
      i@1018 : Integer;
      PrevNo@1019 : Code[20];
      ActiveTab@1020 : 'General,Invoicing,Shipping,Prepayment';
      PrevTab@1021 : 'General,Invoicing,Shipping,Prepayment';
      VATLinesFormIsEditable@1023 : Boolean;
      AllowInvDisc@1024 : Boolean;
      AllowVATDifference@1025 : Boolean;
      Text006@1033 : TextConst 'ENU=Prepmt. Amount;ESP=Importe prepago';
      Text007@1034 : TextConst 'ENU=Prepmt. Amt. Invoiced;ESP=Importe prepago facturado';
      Text008@1035 : TextConst 'ENU=Prepmt. Amt. Deducted;ESP=Importe prepago descontado';
      Text009@1036 : TextConst 'ENU=Prepmt. Amt. to Deduct;ESP=Importe prepago para descontar';
      VATLinesForm@1037 : Form 9401;

    LOCAL PROCEDURE UpdateHeaderInfo@5(IndexNo@1000 : Integer;VAR VATAmountLine@1001 : Record 290);
    VAR
      CurrExchRate@1002 : Record 330;
      UseDate@1003 : Date;
    BEGIN
      TotalPurchLine[IndexNo]."Inv. Discount Amount" := VATAmountLine.GetTotalInvDiscAmount;
      TotalAmount1[IndexNo] :=
        TotalPurchLine[IndexNo]."Line Amount" - TotalPurchLine[IndexNo]."Inv. Discount Amount" -
        TotalPurchLine[IndexNo]."Pmt. Disc. Rcd. Amount";
      VATAmount[IndexNo] := VATAmountLine.GetTotalVATAmount;
      IF "Prices Including VAT" THEN BEGIN
        TotalAmount1[IndexNo] := VATAmountLine.GetTotalAmountInclVAT;
        TotalAmount2[IndexNo] := TotalAmount1[IndexNo] - VATAmount[IndexNo];
        TotalPurchLine[IndexNo]."Line Amount" :=
          TotalAmount1[IndexNo] + TotalPurchLine[IndexNo]."Inv. Discount Amount"
            + TotalPurchLine[IndexNo]."Pmt. Disc. Rcd. Amount";
      END ELSE
        TotalAmount2[IndexNo] := TotalAmount1[IndexNo] + VATAmount[IndexNo];

      IF "Prices Including VAT" THEN
        TotalPurchLineLCY[IndexNo].Amount := TotalAmount2[IndexNo]
      ELSE
        TotalPurchLineLCY[IndexNo].Amount := TotalAmount1[IndexNo];
      IF "Currency Code" <> '' THEN BEGIN
        IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
           ("Posting Date" = 0D)
        THEN
          UseDate := WORKDATE
        ELSE
          UseDate := "Posting Date";

        TotalPurchLineLCY[IndexNo].Amount :=
          CurrExchRate.ExchangeAmtFCYToLCY(
            UseDate,"Currency Code",TotalPurchLineLCY[IndexNo].Amount,"Currency Factor");
      END;
    END;

    LOCAL PROCEDURE GetVATSpecification@21(QtyType@1000 : 'General,Invoicing,Shipping');
    BEGIN
      CASE QtyType OF
        QtyType::General:
          BEGIN
            VATLinesForm.GetTempVATAmountLine(TempVATAmountLine1);
            IF TempVATAmountLine1.GetAnyLineModified THEN
              UpdateHeaderInfo(1,TempVATAmountLine1);
          END;
        QtyType::Invoicing:
          BEGIN
            VATLinesForm.GetTempVATAmountLine(TempVATAmountLine2);
            IF TempVATAmountLine2.GetAnyLineModified THEN
              UpdateHeaderInfo(2,TempVATAmountLine2);
          END;
        QtyType::Shipping:
          VATLinesForm.GetTempVATAmountLine(TempVATAmountLine3);
      END;
    END;

    LOCAL PROCEDURE UpdateTotalAmount@16(IndexNo@1000 : Integer);
    VAR
      SaveTotalAmount@1001 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      IF "Prices Including VAT" THEN BEGIN
        SaveTotalAmount := TotalAmount1[IndexNo];
        UpdateInvDiscAmount(IndexNo);
        TotalAmount1[IndexNo] := SaveTotalAmount;
      END;
      WITH TotalPurchLine[IndexNo] DO
        "Inv. Discount Amount" := "Line Amount" - TotalAmount1[IndexNo];
      UpdateInvDiscAmount(IndexNo);
    END;

    LOCAL PROCEDURE UpdateInvDiscAmount@3(ModifiedIndexNo@1000 : Integer);
    VAR
      PartialInvoicing@1001 : Boolean;
      MaxIndexNo@1002 : Integer;
      IndexNo@1003 : ARRAY [2] OF Integer;
      i@1004 : Integer;
      InvDiscBaseAmount@1005 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      IF NOT (ModifiedIndexNo IN [1,2]) THEN
        EXIT;

      IF ModifiedIndexNo = 1 THEN
        InvDiscBaseAmount := TempVATAmountLine1.GetTotalInvDiscBaseAmount(FALSE,"Currency Code")
      ELSE
        InvDiscBaseAmount := TempVATAmountLine2.GetTotalInvDiscBaseAmount(FALSE,"Currency Code");

      IF InvDiscBaseAmount = 0 THEN
        ERROR(Text003,TempVATAmountLine2.FIELDCAPTION("Inv. Disc. Base Amount"));

      IF TotalPurchLine[ModifiedIndexNo]."Inv. Discount Amount" / InvDiscBaseAmount > 1 THEN
        ERROR(
          Text004,
          TotalPurchLine[ModifiedIndexNo].FIELDCAPTION("Inv. Discount Amount"),
          TempVATAmountLine2.FIELDCAPTION("Inv. Disc. Base Amount"));

      PartialInvoicing := (TotalPurchLine[1]."Line Amount" <> TotalPurchLine[2]."Line Amount");

      IndexNo[1] := ModifiedIndexNo;
      IndexNo[2] := 3 - ModifiedIndexNo;
      IF (ModifiedIndexNo = 2) AND PartialInvoicing THEN
        MaxIndexNo := 1
      ELSE
        MaxIndexNo := 2;

      IF NOT PartialInvoicing THEN
        IF ModifiedIndexNo = 1 THEN
          TotalPurchLine[2]."Inv. Discount Amount" := TotalPurchLine[1]."Inv. Discount Amount"
        ELSE
          TotalPurchLine[1]."Inv. Discount Amount" := TotalPurchLine[2]."Inv. Discount Amount";

      FOR i := 1 TO MaxIndexNo DO BEGIN
        WITH TotalPurchLine[IndexNo[i]] DO BEGIN
          IF (i = 1) OR NOT PartialInvoicing THEN
            IF IndexNo[i] = 1 THEN BEGIN
              TempVATAmountLine1.SetInvoiceDiscountAmount(
                "Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");
            END ELSE BEGIN
              TempVATAmountLine2.SetInvoiceDiscountAmount(
                "Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");
            END;

          IF (i = 2) AND PartialInvoicing THEN
            IF IndexNo[i] = 1 THEN BEGIN
              InvDiscBaseAmount := TempVATAmountLine2.GetTotalInvDiscBaseAmount(FALSE,"Currency Code");
              IF InvDiscBaseAmount = 0 THEN
                TempVATAmountLine1.SetInvoiceDiscountPercent(
                  0,"Currency Code","Prices Including VAT",FALSE,"VAT Base Discount %")
              ELSE
                TempVATAmountLine1.SetInvoiceDiscountPercent(
                  100 * TempVATAmountLine2.GetTotalInvDiscAmount / InvDiscBaseAmount,
                  "Currency Code","Prices Including VAT",FALSE,"VAT Base Discount %");
            END ELSE BEGIN
              InvDiscBaseAmount := TempVATAmountLine1.GetTotalInvDiscBaseAmount(FALSE,"Currency Code");
              IF InvDiscBaseAmount = 0 THEN
                TempVATAmountLine2.SetInvoiceDiscountPercent(
                  0,"Currency Code","Prices Including VAT",FALSE,"VAT Base Discount %")
              ELSE
                TempVATAmountLine2.SetInvoiceDiscountPercent(
                  100 * TempVATAmountLine1.GetTotalInvDiscAmount / InvDiscBaseAmount,
                  "Currency Code","Prices Including VAT",FALSE,"VAT Base Discount %");
            END;
        END;
      END;

      UpdateHeaderInfo(1,TempVATAmountLine1);
      UpdateHeaderInfo(2,TempVATAmountLine2);

      IF ModifiedIndexNo = 1 THEN
        VATLinesForm.SetTempVATAmountLine(TempVATAmountLine1)
      ELSE
        VATLinesForm.SetTempVATAmountLine(TempVATAmountLine2);

      "Invoice Discount Calculation" := "Invoice Discount Calculation"::Amount;
      "Invoice Discount Value" := TotalPurchLine[1]."Inv. Discount Amount";
      MODIFY;
      UpdateVATOnPurchLines;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmount@9();
    VAR
      TempPurchLine@1001 : TEMPORARY Record 39;
      PurchPostPrepmt@1000 : Codeunit 444;
    BEGIN
      PurchPostPrepmt.UpdatePrepmtAmountOnPurchLines(Rec,PrepmtTotalAmount);
      PurchPostPrepmt.GetPurchLines(Rec,0,TempPurchLine);
      PurchPostPrepmt.SumPrepmt(
        Rec,TempPurchLine,TempVATAmountLine4,PrepmtTotalAmount,PrepmtVATAmount,PrepmtVATAmountText);
      PrepmtInvPct :=
        Pct(TotalPurchLine[1]."Prepmt. Amt. Inv.",PrepmtTotalAmount);
      PrepmtDeductedPct :=
        Pct(TotalPurchLine[1]."Prepmt Amt Deducted",TotalPurchLine[1]."Prepmt. Amt. Inv.");
      IF "Prices Including VAT" THEN BEGIN
        PrepmtTotalAmount2 := PrepmtTotalAmount;
        PrepmtTotalAmount := PrepmtTotalAmount + PrepmtVATAmount;
      END ELSE
        PrepmtTotalAmount2 := PrepmtTotalAmount + PrepmtVATAmount;
      MODIFY;
    END;

    LOCAL PROCEDURE GetCaptionClass@2(FieldCaption@1000 : Text[100];ReverseCaption@1001 : Boolean) : Text[80];
    BEGIN
      IF "Prices Including VAT" XOR ReverseCaption THEN
        EXIT('2,1,' + FieldCaption)
      ELSE
        EXIT('2,0,' + FieldCaption);
    END;

    LOCAL PROCEDURE UpdateVATOnPurchLines@1();
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      GetVATSpecification(ActiveTab);
      IF TempVATAmountLine1.GetAnyLineModified THEN
        PurchLine.UpdateVATOnLines(0,Rec,PurchLine,TempVATAmountLine1);
      IF TempVATAmountLine2.GetAnyLineModified THEN
        PurchLine.UpdateVATOnLines(1,Rec,PurchLine,TempVATAmountLine2);
      PrevNo := '';
    END;

    LOCAL PROCEDURE VendInvDiscRecExists@4(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      VendInvDisc@1001 : Record 24;
    BEGIN
      VendInvDisc.SETRANGE(Code,InvDiscCode);
      EXIT(VendInvDisc.FIND('-'));
    END;

    LOCAL PROCEDURE CheckAllowInvDisc@8();
    VAR
      VendInvDisc@1000 : Record 24;
    BEGIN
      IF NOT AllowInvDisc THEN
        ERROR(
          Text005,
          VendInvDisc.TABLECAPTION,FIELDCAPTION("Invoice Disc. Code"),"Invoice Disc. Code");
    END;

    LOCAL PROCEDURE Pct@6(Numerator@1001 : Decimal;Denominator@1000 : Decimal) : Decimal;
    BEGIN
      IF Denominator = 0 THEN
        EXIT(0);
      EXIT(ROUND(Numerator / Denominator * 10000,1));
    END;

    PROCEDURE VATLinesDrillDown@7(VAR VATLinesToDrillDown@1000 : Record 290;ThisTabAllowsVATEditing@1001 : Boolean);
    BEGIN
      CLEAR(VATLinesForm);
      VATLinesForm.SetTempVATAmountLine(VATLinesToDrillDown);
      VATLinesForm.InitGlobals(
        "Currency Code",AllowVATDifference,AllowVATDifference AND ThisTabAllowsVATEditing,
        "Prices Including VAT",AllowInvDisc,"VAT Base Discount %");
      VATLinesForm.RUNMODAL;
      VATLinesForm.GetTempVATAmountLine(VATLinesToDrillDown);
    END;

    BEGIN
    END.
  }
}
