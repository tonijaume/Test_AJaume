OBJECT Page 99000902 Item Availability Line List
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Item Availability Line List;
               ESP=Lista l¡n. disponi. producto];
    SourceTable=Table99000832;
    PageType=List;
    SourceTableTemporary=Yes;
    OnOpenPage=BEGIN
                 DELETEALL;
                 MakeWhat;
               END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr=Name }

    { 4   ;2   ;Field     ;
                SourceExpr=Quantity;
                OnDrillDown=BEGIN
                              LookupEntries;
                            END;
                             }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 Receipt;ESP=%1 Recepc.';
      Text001@1001 : TextConst 'ENU=%1 Release;ESP=%1 Lanzada';
      Text002@1002 : TextConst 'ENU=Firm planned %1;ESP=Planif. firme %1';
      Text003@1003 : TextConst 'ENU=Released %1;ESP=Lanzada %1';
      Item@1004 : Record 27;
      ItemLedgerEntry@1005 : Record 32;
      SalesLine@1006 : Record 37;
      ServLine@1007 : Record 5902;
      PurchLine@1008 : Record 39;
      TransLine@1009 : Record 5741;
      ReqLine@1010 : Record 246;
      ProdOrderLine@1011 : Record 5406;
      ProdOrderComp@1012 : Record 5407;
      PlanningComponent@1013 : Record 99000829;
      AvailType@1015 : 'Gross Requirement,Planned Order Receipt,Scheduled Order Receipt,Planned Order Release,All';
      Sign@1016 : Integer;
      SalesReturnOrder@1014 : Decimal;
      PurchReturnOrder@1017 : Decimal;

    PROCEDURE Init@1(NewType@1000 : 'Gross Requirement,Planned Order Receipt,Scheduled Order Receipt,Planned Order Release,All';VAR NewItem@1001 : Record 27);
    BEGIN
      AvailType := NewType;
      Item.COPY(NewItem);
    END;

    LOCAL PROCEDURE MakeEntries@2();
    BEGIN
      CASE AvailType OF
        AvailType::"Gross Requirement":
          BEGIN
            InsertEntry(
              DATABASE::"Sales Line",
              Item.FIELDNO("Qty. on Sales Order"),
              SalesLine.TABLECAPTION,
              Item."Qty. on Sales Order");
            InsertEntry(
              DATABASE::"Service Line",
              Item.FIELDNO("Qty. on Service Order"),
              ServLine.TABLECAPTION,
              Item."Qty. on Service Order");
            InsertEntry(
              DATABASE::"Prod. Order Component",
              Item.FIELDNO("Scheduled Need (Qty.)"),
              ProdOrderComp.TABLECAPTION,
              Item."Scheduled Need (Qty.)");
            InsertEntry(
              DATABASE::"Planning Component",
              Item.FIELDNO("Planning Issues (Qty.)"),
              PlanningComponent.TABLECAPTION,
              Item."Planning Issues (Qty.)");
            InsertEntry(
              DATABASE::"Transfer Line",
              Item.FIELDNO("Trans. Ord. Shipment (Qty.)"),
              Item.FIELDCAPTION("Trans. Ord. Shipment (Qty.)"),
              Item."Trans. Ord. Shipment (Qty.)");
            PurchReturnOrder := Item.CalcPurchReturn;
            InsertEntry(
              DATABASE::"Purchase Line",
              0,
              PurchLine.TABLECAPTION,
              PurchReturnOrder);
          END;
        AvailType::"Planned Order Receipt":
          BEGIN
            InsertEntry(
              DATABASE::"Requisition Line",
              Item.FIELDNO("Purch. Req. Receipt (Qty.)"),
              ReqLine.TABLECAPTION,
              Item."Purch. Req. Receipt (Qty.)");
            InsertEntry(
              DATABASE::"Prod. Order Line",
              Item.FIELDNO("Planned Order Receipt (Qty.)"),
              STRSUBSTNO(Text000,ProdOrderLine.TABLECAPTION),
              Item."Planned Order Receipt (Qty.)");
          END;
        AvailType::"Planned Order Release":
          BEGIN
            InsertEntry(
              DATABASE::"Requisition Line",
              Item.FIELDNO("Purch. Req. Release (Qty.)"),
              ReqLine.TABLECAPTION,
              Item."Purch. Req. Release (Qty.)");
            InsertEntry(
              DATABASE::"Prod. Order Line",
              Item.FIELDNO("Planned Order Release (Qty.)"),
              STRSUBSTNO(Text001,ProdOrderLine.TABLECAPTION),
              Item."Planned Order Release (Qty.)");
            InsertEntry(
              DATABASE::"Requisition Line",
              Item.FIELDNO("Planning Release (Qty.)"),
              ReqLine.TABLECAPTION,
              Item."Planning Release (Qty.)");
          END;
        AvailType::"Scheduled Order Receipt":
          BEGIN
            InsertEntry(
              DATABASE::"Purchase Line",
              Item.FIELDNO("Qty. on Purch. Order"),
              PurchLine.TABLECAPTION,
              Item."Qty. on Purch. Order");
            InsertEntry(
              DATABASE::"Prod. Order Line",
              Item.FIELDNO("FP Order Receipt (Qty.)"),
              STRSUBSTNO(Text002,ProdOrderLine.TABLECAPTION),
              Item."FP Order Receipt (Qty.)");
            InsertEntry(
              DATABASE::"Prod. Order Line",
              Item.FIELDNO("Rel. Order Receipt (Qty.)"),
              STRSUBSTNO(Text003,ProdOrderLine.TABLECAPTION),
              Item."Rel. Order Receipt (Qty.)");
            InsertEntry(
              DATABASE::"Transfer Line",
              Item.FIELDNO("Qty. in Transit"),
              Item.FIELDCAPTION("Qty. in Transit"),
              Item."Qty. in Transit");
            InsertEntry(
              DATABASE::"Transfer Line",
              Item.FIELDNO("Trans. Ord. Receipt (Qty.)"),
              Item.FIELDCAPTION("Trans. Ord. Receipt (Qty.)"),
              Item."Trans. Ord. Receipt (Qty.)");
            SalesReturnOrder := Item.CalcSalesReturn;
            InsertEntry(
              DATABASE::"Sales Line",
              0,
              SalesLine.TABLECAPTION,
              SalesReturnOrder);
          END;
      END;
    END;

    LOCAL PROCEDURE MakeWhat@4();
    BEGIN
      Sign := 1;
      IF AvailType <> AvailType::All THEN
        MakeEntries
      ELSE BEGIN
        Item.SETRANGE("Date Filter",0D,Item.GETRANGEMAX("Date Filter"));
        Item.CALCFIELDS(
          "Qty. on Purch. Order",
          "Qty. on Sales Order",
          "Qty. on Service Order",
          "Net Change",
          "Scheduled Receipt (Qty.)",
          "Scheduled Need (Qty.)",
          "Planned Order Receipt (Qty.)",
          "FP Order Receipt (Qty.)",
          "Rel. Order Receipt (Qty.)",
          "Planned Order Release (Qty.)",
          "Purch. Req. Receipt (Qty.)",
          "Planning Issues (Qty.)",
          "Purch. Req. Release (Qty.)",
          "Qty. in Transit",
          "Trans. Ord. Shipment (Qty.)",
          "Trans. Ord. Receipt (Qty.)");
        IF Item.Inventory <> 0 THEN BEGIN
          "Table No." := DATABASE::"Item Ledger Entry";
          QuerySource := Item.FIELDNO(Inventory);
          Name := ItemLedgerEntry.TABLECAPTION;
          Quantity := Item.Inventory;
          INSERT;
        END;
        AvailType := AvailType::"Gross Requirement";
        Sign := -1;
        MakeEntries;
        AvailType := AvailType::"Planned Order Receipt";
        Sign := 1;
        MakeEntries;
        AvailType := AvailType::"Scheduled Order Receipt";
        Sign := 1;
        MakeEntries;
        AvailType := AvailType::All;
      END;
    END;

    LOCAL PROCEDURE LookupEntries@3();
    BEGIN
      CASE "Table No." OF
        DATABASE::"Item Ledger Entry":
          BEGIN
            ItemLedgerEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
            ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
            ItemLedgerEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            ItemLedgerEntry.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
            ItemLedgerEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            ItemLedgerEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
            ItemLedgerEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
            FORM.RUNMODAL(0,ItemLedgerEntry);
          END;
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.SETCURRENTKEY("Document Type",Type,"No.");
            IF QuerySource > 0 THEN
              SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order)
            ELSE
              SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::"Return Order");
            SalesLine.SETRANGE(Type,SalesLine.Type::Item);
            SalesLine.SETRANGE("No.",Item."No.");
            Item.COPYFILTER("Variant Filter",SalesLine."Variant Code");
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            Item.COPYFILTER("Date Filter",SalesLine."Shipment Date");
            Item.COPYFILTER("Location Filter",SalesLine."Location Code");
            Item.COPYFILTER("Global Dimension 1 Filter",SalesLine."Shortcut Dimension 1 Code");
            Item.COPYFILTER("Global Dimension 2 Filter",SalesLine."Shortcut Dimension 2 Code");
            FORM.RUNMODAL(0,SalesLine);
          END;
        DATABASE::"Service Line":
          BEGIN
            ServLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Posting Date");
            ServLine.SETRANGE("Document Type",ServLine."Document Type"::Order);
            ServLine.SETRANGE(Type,ServLine.Type::Item);
            ServLine.SETRANGE("No.",Item."No.");
            Item.COPYFILTER("Variant Filter",ServLine."Variant Code");
            Item.COPYFILTER("Date Filter",ServLine."Posting Date");
            Item.COPYFILTER("Location Filter",ServLine."Location Code");
            Item.COPYFILTER("Global Dimension 1 Filter",ServLine."Shortcut Dimension 1 Code");
            Item.COPYFILTER("Global Dimension 2 Filter",ServLine."Shortcut Dimension 2 Code");
            FORM.RUNMODAL(0,ServLine);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.SETCURRENTKEY("Document Type",Type,"No.");
            IF QuerySource > 0 THEN
              PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order)
            ELSE
              PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Return Order");
            PurchLine.SETRANGE(Type,SalesLine.Type::Item);
            PurchLine.SETRANGE("No.",Item."No.");
            Item.COPYFILTER("Variant Filter",PurchLine."Variant Code");
            PurchLine.SETRANGE("Drop Shipment",FALSE);
            Item.COPYFILTER("Date Filter",PurchLine."Expected Receipt Date");
            Item.COPYFILTER("Location Filter",PurchLine."Location Code");
            Item.COPYFILTER("Global Dimension 1 Filter",PurchLine."Shortcut Dimension 1 Code");
            Item.COPYFILTER("Global Dimension 2 Filter",PurchLine."Shortcut Dimension 2 Code");
            FORM.RUNMODAL(0,PurchLine);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            CASE QuerySource OF
              Item.FIELDNO("Trans. Ord. Shipment (Qty.)"):
                BEGIN
                  TransLine.SETCURRENTKEY(
                    "Transfer-from Code",Status,"Derived From Line No.",
                    "Item No.","Variant Code",
                    "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
                    "Shipment Date","In-Transit Code");
                  Item.COPYFILTER("Location Filter",TransLine."Transfer-from Code");
                  Item.COPYFILTER("Date Filter",TransLine."Shipment Date");
                END;
              Item.FIELDNO("Trans. Ord. Receipt (Qty.)"),Item.FIELDNO("Qty. in Transit"):
                BEGIN
                  TransLine.SETCURRENTKEY(
                    "Transfer-to Code",Status,"Derived From Line No.",
                    "Item No.","Variant Code",
                    "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
                    "Receipt Date","In-Transit Code");
                  Item.COPYFILTER("Location Filter",TransLine."Transfer-to Code");
                  Item.COPYFILTER("Date Filter",TransLine."Receipt Date");
                END;
            END;
            TransLine.SETRANGE("Item No.",Item."No.");
            TransLine.SETRANGE("Derived From Line No.",0);
            Item.COPYFILTER("Variant Filter",TransLine."Variant Code");
            Item.COPYFILTER("Global Dimension 1 Filter",TransLine."Shortcut Dimension 1 Code");
            Item.COPYFILTER("Global Dimension 2 Filter",TransLine."Shortcut Dimension 2 Code");
            FORM.RUNMODAL(0,TransLine);
          END;
        DATABASE::"Planning Component":
          BEGIN
            PlanningComponent.SETCURRENTKEY("Item No.");
            PlanningComponent.SETRANGE("Item No.",Item."No.");
            PlanningComponent.SETRANGE("Planning Line Origin",PlanningComponent."Planning Line Origin"::" ");
            Item.COPYFILTER("Variant Filter",PlanningComponent."Variant Code");
            Item.COPYFILTER("Date Filter",PlanningComponent."Due Date");
            Item.COPYFILTER("Location Filter",PlanningComponent."Location Code");
            Item.COPYFILTER("Global Dimension 1 Filter",PlanningComponent."Shortcut Dimension 1 Code");
            Item.COPYFILTER("Global Dimension 2 Filter",PlanningComponent."Shortcut Dimension 2 Code");
            FORM.RUNMODAL(0,PlanningComponent);
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.SETCURRENTKEY("Item No.","Variant Code","Location Code",
              Status,"Due Date");
            ProdOrderComp.SETRANGE(
              Status,
              ProdOrderComp.Status::Planned,
              ProdOrderComp.Status::Released);
            ProdOrderComp.SETRANGE("Item No.",Item."No.");
            Item.COPYFILTER("Variant Filter",ProdOrderComp."Variant Code");
            Item.COPYFILTER("Date Filter",ProdOrderComp."Due Date");
            Item.COPYFILTER("Location Filter",ProdOrderComp."Location Code");
            Item.COPYFILTER("Global Dimension 1 Filter",ProdOrderComp."Shortcut Dimension 1 Code");
            Item.COPYFILTER("Global Dimension 2 Filter",ProdOrderComp."Shortcut Dimension 2 Code");
            FORM.RUNMODAL(0,ProdOrderComp);
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.SETRANGE("Planning Line Origin",ReqLine."Planning Line Origin"::" ");
            CASE QuerySource OF
              Item.FIELDNO("Purch. Req. Receipt (Qty.)"):
                BEGIN
                  ReqLine.SETCURRENTKEY(
                    Type,"No.","Variant Code","Location Code",
                    "Sales Order No.","Planning Line Origin","Due Date");
                  Item.COPYFILTER("Date Filter",ReqLine."Due Date");
                END;
              Item.FIELDNO("Purch. Req. Release (Qty.)"):
                BEGIN
                  ReqLine.SETCURRENTKEY(
                    Type,"No.","Variant Code","Location Code","Sales Order No.","Order Date");
                  Item.COPYFILTER("Date Filter",ReqLine."Order Date");
                  ReqLine.SETFILTER("Planning Line Origin",'%1 | %2',
                    ReqLine."Planning Line Origin"::" ",ReqLine."Planning Line Origin"::Planning);
                END;
            END;
            ReqLine.SETRANGE(Type,ReqLine.Type::Item);
            ReqLine.SETRANGE("No.",Item."No.");
            ReqLine.SETRANGE("Sales Order No.",'');
            Item.COPYFILTER("Variant Filter",ReqLine."Variant Code");
            Item.COPYFILTER("Location Filter",ReqLine."Location Code");
            Item.COPYFILTER("Global Dimension 1 Filter",ReqLine."Shortcut Dimension 1 Code");
            Item.COPYFILTER("Global Dimension 2 Filter",ReqLine."Shortcut Dimension 2 Code");
            FORM.RUNMODAL(0,ReqLine);
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ProdOrderLine.RESET;
            ProdOrderLine.SETCURRENTKEY(Status,"Item No.");
            CASE QuerySource OF
              Item.FIELDNO("Planned Order Receipt (Qty.)"):
                BEGIN
                  ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Planned);
                  Item.COPYFILTER("Date Filter",ProdOrderLine."Due Date");
                END;
              Item.FIELDNO("Planned Order Release (Qty.)"):
                BEGIN
                  ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Planned);
                  Item.COPYFILTER("Date Filter",ProdOrderLine."Starting Date");
                END;
              Item.FIELDNO("FP Order Receipt (Qty.)"):
                BEGIN
                  ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::"Firm Planned");
                  Item.COPYFILTER("Date Filter",ProdOrderLine."Due Date");
                END;
              Item.FIELDNO("Rel. Order Receipt (Qty.)"):
                BEGIN
                  ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
                  Item.COPYFILTER("Date Filter",ProdOrderLine."Due Date");
                END;
            END;
            ProdOrderLine.SETRANGE("Item No.",Item."No.");
            Item.COPYFILTER("Variant Filter",ProdOrderLine."Variant Code");
            Item.COPYFILTER("Location Filter",ProdOrderLine."Location Code");
            Item.COPYFILTER("Global Dimension 1 Filter",ProdOrderLine."Shortcut Dimension 1 Code");
            Item.COPYFILTER("Global Dimension 2 Filter",ProdOrderLine."Shortcut Dimension 2 Code");
            FORM.RUNMODAL(0,ProdOrderLine);
          END;
      END;
    END;

    LOCAL PROCEDURE InsertEntry@5(Table@1000 : Integer;Field@1001 : Integer;TableName@1002 : Text[100];Qty@1003 : Decimal);
    BEGIN
      IF Qty = 0 THEN EXIT;

      "Table No." := Table;
      QuerySource := Field;
      Name := COPYSTR(TableName,1,MAXSTRLEN(Name));
      Quantity := Qty * Sign;
      INSERT;
    END;

    BEGIN
    END.
  }
}
