OBJECT Page 5415 Item Avail. by Variant Lines
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Editable=Yes;
    CaptionML=[ENU=Lines;
               ESP=L¡neas];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table5401;
    PageType=ListPart;
    OnAfterGetRecord=BEGIN
                       IF Item."No." <> '' THEN BEGIN
                         AmountType2 := AmountType;
                         AmountType := AmountType::"Balance at Date";
                         CalculateNeed;

                         ProjAvailBalance :=
                           Item.Inventory +
                           PlannedOrderReceipt +
                           ScheduledReceipt -
                           GrossRequirement;

                         IF AmountType2 <> AmountType THEN BEGIN
                           AmountType := AmountType2;
                           CalculateNeed;
                         END;

                         ExpectedInventory := AvailabilityMgt.ExpectedQtyOnHand(Item,TRUE,0,QtyAvailable,31129999D);
                       END;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 5   ;2   ;Field     ;
                SourceExpr=Code }

    { 7   ;2   ;Field     ;
                SourceExpr=Description }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Gross Requirement;
                           ESP=Necesidades brutas];
                DecimalPlaces=0:5;
                SourceExpr=GrossRequirement;
                OnDrillDown=BEGIN
                              CalculateNeed;
                              CLEAR(AvailLineList);
                              AvailLineList.Init(0,Item);
                              AvailLineList.RUNMODAL;
                            END;
                             }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Scheduled Receipt;
                           ESP=Recepci¢n programada];
                DecimalPlaces=0:5;
                SourceExpr=ScheduledReceipt;
                OnDrillDown=BEGIN
                              CalculateNeed;
                              CLEAR(AvailLineList);
                              AvailLineList.Init(2,Item);
                              AvailLineList.RUNMODAL;
                            END;
                             }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Planned Receipt;
                           ESP=Recep. planif.];
                DecimalPlaces=0:5;
                SourceExpr=PlannedOrderReceipt;
                OnDrillDown=BEGIN
                              CalculateNeed;
                              CLEAR(AvailLineList);
                              AvailLineList.Init(1,Item);
                              AvailLineList.RUNMODAL;
                            END;
                             }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Projected Available Balance;
                           ESP=Saldo disponible estimado];
                DecimalPlaces=0:5;
                SourceExpr=ProjAvailBalance;
                OnDrillDown=BEGIN
                              CalculateNeed;
                              CLEAR(AvailLineList);
                              AvailLineList.Init(4,Item);
                              AvailLineList.RUNMODAL;
                            END;
                             }

    { 4   ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=Inventory;
                           ESP=Existencias];
                DecimalPlaces=0:5;
                SourceExpr=Item.Inventory;
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowItemLedgerEntries(FALSE);
                            END;
                             }

    { 10  ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=Qty. on Purch. Order;
                           ESP=Cdad. en pedidos compra];
                DecimalPlaces=0:5;
                SourceExpr=Item."Qty. on Purch. Order";
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowPurchLines;
                            END;
                             }

    { 12  ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=Qty. on Sales Order;
                           ESP=Cdad. en pedidos venta];
                DecimalPlaces=0:5;
                SourceExpr=Item."Qty. on Sales Order";
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowSalesLines;
                            END;
                             }

    { 36  ;2   ;Field     ;
                CaptionML=[ENU=Qty. on Service Order;
                           ESP=Cdad. en ped. servicio];
                DecimalPlaces=0:5;
                SourceExpr=Item."Qty. on Service Order";
                Visible=FALSE;
                OnDrillDown=BEGIN
                              ShowServInvLines;
                            END;
                             }

    { 30  ;2   ;Field     ;
                CaptionML=[ENU=Trans. Ord. Shipment (Qty.);
                           ESP=Env¡o ped. transfer. (cdad.)];
                DecimalPlaces=0:5;
                SourceExpr=Item."Trans. Ord. Shipment (Qty.)";
                Visible=FALSE;
                OnDrillDown=BEGIN
                              ShowTransLines(Item.FIELDNO("Trans. Ord. Shipment (Qty.)"));
                            END;
                             }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Qty. in Transit;
                           ESP=Cdad. en tr nsito];
                DecimalPlaces=0:5;
                SourceExpr=Item."Qty. in Transit";
                Visible=FALSE;
                OnDrillDown=BEGIN
                              ShowTransLines(Item.FIELDNO("Qty. in Transit"));
                            END;
                             }

    { 34  ;2   ;Field     ;
                CaptionML=[ENU=Trans. Ord. Receipt (Qty.);
                           ESP=Recep. ped. transfer. (cdad.)];
                DecimalPlaces=0:5;
                SourceExpr=Item."Trans. Ord. Receipt (Qty.)";
                Visible=FALSE;
                OnDrillDown=BEGIN
                              ShowTransLines(Item.FIELDNO("Trans. Ord. Receipt (Qty.)"));
                            END;
                             }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Expected Inventory;
                           ESP=Stock esperado];
                DecimalPlaces=0:5;
                SourceExpr=ExpectedInventory;
                Visible=FALSE;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                CaptionML=[ENU=Available Qty. on Hand;
                           ESP=Cdad. f¡sica disponible];
                DecimalPlaces=0:5;
                SourceExpr=QtyAvailable;
                Visible=FALSE;
                Editable=FALSE }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Scheduled Receipt (Qty.);
                           ESP=Recepci¢n programada (cdad.)];
                DecimalPlaces=0:5;
                SourceExpr=Item."Scheduled Receipt (Qty.)";
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowSchedReceipt;
                            END;
                             }

    { 22  ;2   ;Field     ;
                CaptionML=[ENU=Scheduled Issue (Qty.);
                           ESP=Env¡o programado (cdad.)];
                DecimalPlaces=0:5;
                SourceExpr=Item."Scheduled Need (Qty.)";
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowSchedNeed;
                            END;
                             }

    { 24  ;2   ;Field     ;
                CaptionML=[ENU=Planned Order Releases;
                           ESP=Planif. liberaci¢n ¢rdenes];
                DecimalPlaces=0:5;
                SourceExpr=PlannedOrderReleases;
                OnDrillDown=BEGIN
                              CalculateNeed;
                              CLEAR(AvailLineList);
                              AvailLineList.Init(3,Item);
                              AvailLineList.RUNMODAL;
                            END;
                             }

    { 38  ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=Net Change;
                           ESP=Saldo periodo];
                DecimalPlaces=0:5;
                SourceExpr=Item."Net Change";
                Visible=FALSE;
                OnDrillDown=BEGIN
                              ShowItemLedgerEntries(TRUE);
                            END;
                             }

  }
  CODE
  {
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      ServInvLine@1002 : Record 5902;
      PurchLine@1003 : Record 39;
      ProdOrderLine@1004 : Record 5406;
      ProdOrderComp@1005 : Record 5407;
      AvailLineList@1007 : Form 99000902;
      AvailabilityMgt@1006 : Codeunit 5400;
      ExpectedInventory@1008 : Decimal;
      QtyAvailable@1009 : Decimal;
      AmountType@1011 : 'Net Change,Balance at Date';
      AmountType2@1012 : 'Net Change,Balance at Date';
      PlannedOrderReleases@1013 : Decimal;
      GrossRequirement@1014 : Decimal;
      PlannedOrderReceipt@1015 : Decimal;
      ScheduledReceipt@1016 : Decimal;
      ProjAvailBalance@1017 : Decimal;
      PeriodStart@1018 : Date;
      PeriodEnd@1019 : Date;

    PROCEDURE Set@1(VAR NewItem@1000 : Record 27;NewAmountType@1002 : 'Net Change,Balance at Date');
    BEGIN
      Item.COPY(NewItem);
      PeriodStart := Item.GETRANGEMIN("Date Filter");
      PeriodEnd := Item.GETRANGEMAX("Date Filter");
      AmountType := NewAmountType;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE CalculateNeed@4();
    BEGIN
      IF Item."No." <> '' THEN BEGIN
        SetItemFilter;
        Item.CALCFIELDS(
          "Qty. on Purch. Order",
          "Qty. on Sales Order",
          "Qty. on Service Order",
          Inventory,
          "Net Change",
          "Scheduled Receipt (Qty.)",
          "Scheduled Need (Qty.)",
          "Planning Issues (Qty.)",
          "Planned Order Receipt (Qty.)",
          "FP Order Receipt (Qty.)",
          "Rel. Order Receipt (Qty.)",
          "Planned Order Release (Qty.)",
          "Purch. Req. Receipt (Qty.)",
          "Purch. Req. Release (Qty.)");
        IF Item.GETFILTER("Location Filter") <> '' THEN
          Item.CALCFIELDS(
            "Trans. Ord. Shipment (Qty.)",
            "Qty. in Transit",
            "Trans. Ord. Receipt (Qty.)");

        GrossRequirement :=
          Item."Qty. on Sales Order" +
          Item."Qty. on Service Order" +
          Item."Scheduled Need (Qty.)" +
          Item."Planning Issues (Qty.)" +
          Item."Trans. Ord. Shipment (Qty.)" +
          Item.CalcPurchReturn;
        PlannedOrderReceipt :=
          Item."Planned Order Receipt (Qty.)" +
          Item."Purch. Req. Receipt (Qty.)";
        ScheduledReceipt :=
          Item."FP Order Receipt (Qty.)" +
          Item."Rel. Order Receipt (Qty.)" +
          Item."Qty. on Purch. Order" +
          Item."Qty. in Transit" +
          Item."Trans. Ord. Receipt (Qty.)" +
          Item.CalcSalesReturn;
        PlannedOrderReleases :=
          Item."Planned Order Release (Qty.)" +
          Item."Purch. Req. Release (Qty.)";
      END;
    END;

    LOCAL PROCEDURE ShowItemLedgerEntries@10(NetChange@1001 : Boolean);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      SetItemFilter;
      ItemLedgerEntry.RESET;
      ItemLedgerEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      ItemLedgerEntry.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      ItemLedgerEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      ItemLedgerEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      ItemLedgerEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      IF NetChange THEN
        ItemLedgerEntry.SETFILTER("Posting Date",Item.GETFILTER("Date Filter"));
      FORM.RUN(0,ItemLedgerEntry);
    END;

    LOCAL PROCEDURE ShowSalesLines@2();
    BEGIN
      SetItemFilter;
      SalesLine.RESET;
      SalesLine.SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Shipment Date");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("No.",Item."No.");
      SalesLine.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SalesLine.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      SalesLine.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SalesLine.SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SalesLine.SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SalesLine.SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
      FORM.RUN(0,SalesLine);
    END;

    LOCAL PROCEDURE ShowServInvLines@6();
    BEGIN
      SetItemFilter;
      ServInvLine.RESET;
      ServInvLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Posting Date");
      ServInvLine.SETRANGE(Type,ServInvLine.Type::Item);
      ServInvLine.SETRANGE("No.",Item."No.");
      ServInvLine.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      ServInvLine.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      ServInvLine.SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      ServInvLine.SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      ServInvLine.SETFILTER("Posting Date",Item.GETFILTER("Date Filter"));
      FORM.RUN(0,ServInvLine);
    END;

    LOCAL PROCEDURE ShowPurchLines@3();
    BEGIN
      SetItemFilter;
      PurchLine.RESET;
      PurchLine.SETCURRENTKEY(
        "Document Type",Type,"No.","Variant Code","Drop Shipment",
        "Location Code","Expected Receipt Date");
      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("No.",Item."No.");
      PurchLine.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      PurchLine.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      PurchLine.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      PurchLine.SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      PurchLine.SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      PurchLine.SETFILTER("Expected Receipt Date",Item.GETFILTER("Date Filter"));
      FORM.RUN(0,PurchLine);
    END;

    LOCAL PROCEDURE ShowSchedReceipt@7();
    BEGIN
      SetItemFilter;
      ProdOrderLine.RESET;
      ProdOrderLine.SETCURRENTKEY("Item No.","Variant Code","Location Code",Status,"Ending Date");
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Planned,ProdOrderLine.Status::Released);
      ProdOrderLine.SETRANGE("Item No.",Item."No.");
      ProdOrderLine.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      ProdOrderLine.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      ProdOrderLine.SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      ProdOrderLine.SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      ProdOrderLine.SETFILTER("Ending Date",Item.GETFILTER("Date Filter"));
      FORM.RUN(0,ProdOrderLine);
    END;

    LOCAL PROCEDURE ShowSchedNeed@8();
    BEGIN
      SetItemFilter;
      ProdOrderComp.RESET;
      ProdOrderComp.SETCURRENTKEY("Item No.","Variant Code","Location Code",Status,"Due Date");
      ProdOrderComp.SETRANGE(Status,ProdOrderComp.Status::Planned,ProdOrderComp.Status::Released);
      ProdOrderComp.SETRANGE("Item No.",Item."No.");
      ProdOrderComp.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      ProdOrderComp.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      ProdOrderComp.SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      ProdOrderComp.SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      ProdOrderComp.SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
      FORM.RUN(0,ProdOrderComp);
    END;

    LOCAL PROCEDURE ShowTransLines@5(What@1000 : Integer);
    VAR
      TransLine@1001 : Record 5741;
    BEGIN
      SetItemFilter;
      TransLine.RESET;
      CASE What OF
        Item.FIELDNO("Trans. Ord. Shipment (Qty.)"):
          BEGIN
            TransLine.SETCURRENTKEY(
              "Transfer-from Code",Status,"Derived From Line No.",
              "Item No.","Variant Code",
              "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
              "Shipment Date","In-Transit Code");
            TransLine.SETFILTER("Transfer-from Code",Item.GETFILTER("Location Filter"));
            TransLine.SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
          END;
        Item.FIELDNO("Qty. in Transit"),Item.FIELDNO("Trans. Ord. Receipt (Qty.)"):
          BEGIN
            TransLine.SETCURRENTKEY(
              "Transfer-to Code",Status,"Derived From Line No.",
              "Item No.","Variant Code",
              "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
              "Receipt Date","In-Transit Code");
            TransLine.SETFILTER("Transfer-to Code",Item.GETFILTER("Location Filter"));
            TransLine.SETFILTER("Receipt Date",Item.GETFILTER("Date Filter"));
          END;
      END;
      TransLine.SETRANGE("Item No.",Item."No.");
      TransLine.SETRANGE("Derived From Line No.",0);
      TransLine.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      TransLine.SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      TransLine.SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      FORM.RUN(0,TransLine);
    END;

    LOCAL PROCEDURE SetItemFilter@9();
    BEGIN
      IF Item."No." <> '' THEN BEGIN
        IF AmountType = AmountType::"Net Change" THEN
          Item.SETRANGE("Date Filter",PeriodStart,PeriodEnd)
        ELSE
          Item.SETRANGE("Date Filter",0D,PeriodEnd);
        Item.SETRANGE("Variant Filter",Code);
      END;
    END;

    BEGIN
    END.
  }
}
