OBJECT Page 5055276 Liq. Availability Lines
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=LIQEM6.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Lines;
               ESP=L¡neas];
    SourceTable=Table2000000007;
    PageType=ListPart;
    OnOpenPage=BEGIN
                 RESET;
               END;

    OnFindRecord=BEGIN
                   EXIT(PeriodFormManagement.FindDate(Which,Rec,LiqPeriodLength));
                 END;

    OnNextRecord=BEGIN
                   EXIT(PeriodFormManagement.NextDate(Steps,Rec,LiqPeriodLength));
                 END;

    OnAfterGetRecord=BEGIN
                       SetDateFilter;

                       // Receivables
                       LiqLedgEntry.RESET;
                       LiqLedgEntry.SETCURRENTKEY("Liquidity No.","Liquidity Account No.","Source Type","Liquidity Date");
                       LiqLedgEntry.SETRANGE("Liquidity No.",Liquidity."No.");
                       LiqLedgEntry.SETRANGE("Source Type",LiqLedgEntry."Source Type"::Customer);
                       IF AmountType = AmountType::"Net Change" THEN
                         LiqLedgEntry.SETRANGE("Liquidity Date","Period Start","Period End")
                       ELSE
                         LiqLedgEntry.SETRANGE("Liquidity Date",0D,"Period End");
                       LiqLedgEntry.CALCSUMS(Amount);
                       Receivables := LiqLedgEntry.Amount;

                       // Payables
                       LiqLedgEntry.RESET;
                       LiqLedgEntry.SETCURRENTKEY("Liquidity No.","Liquidity Account No.","Source Type","Liquidity Date");
                       LiqLedgEntry.SETRANGE("Liquidity No.",Liquidity."No.");
                       LiqLedgEntry.SETRANGE("Source Type",LiqLedgEntry."Source Type"::Vendor);
                       IF AmountType = AmountType::"Net Change" THEN
                         LiqLedgEntry.SETRANGE("Liquidity Date","Period Start","Period End")
                       ELSE
                         LiqLedgEntry.SETRANGE("Liquidity Date",0D,"Period End");
                       LiqLedgEntry.CALCSUMS(Amount);
                       Payables := LiqLedgEntry.Amount;

                       // Sales Order
                       LiqLedgEntry.RESET;
                       LiqLedgEntry.SETCURRENTKEY("Liquidity No.","Liquidity Account No.","Source Type","Liquidity Date");
                       LiqLedgEntry.SETRANGE("Liquidity No.",Liquidity."No.");
                       LiqLedgEntry.SETRANGE("Source Type",LiqLedgEntry."Source Type"::"Sales Order");
                       IF AmountType = AmountType::"Net Change" THEN
                         LiqLedgEntry.SETRANGE("Liquidity Date","Period Start","Period End")
                       ELSE
                         LiqLedgEntry.SETRANGE("Liquidity Date",0D,"Period End");
                       LiqLedgEntry.CALCSUMS(Amount);
                       SalesOrders := LiqLedgEntry.Amount;

                       // Purchase Orders
                       LiqLedgEntry.RESET;
                       LiqLedgEntry.SETCURRENTKEY("Liquidity No.","Liquidity Account No.","Source Type","Liquidity Date");
                       LiqLedgEntry.SETRANGE("Liquidity No.",Liquidity."No.");
                       LiqLedgEntry.SETRANGE("Source Type",LiqLedgEntry."Source Type"::"Purchase Order");
                       IF AmountType = AmountType::"Net Change" THEN
                         LiqLedgEntry.SETRANGE("Liquidity Date","Period Start","Period End")
                       ELSE
                         LiqLedgEntry.SETRANGE("Liquidity Date",0D,"Period End");
                       LiqLedgEntry.CALCSUMS(Amount);
                       PurchaseOrders := LiqLedgEntry.Amount;

                       // Sale of Fixed Assets
                       LiqLedgEntry.RESET;
                       LiqLedgEntry.SETCURRENTKEY("Liquidity No.","Liquidity Account No.","Source Type","Liquidity Date");
                       LiqLedgEntry.SETRANGE("Liquidity No.",Liquidity."No.");
                       LiqLedgEntry.SETRANGE("Source Type",LiqLedgEntry."Source Type"::"Sale of Fixed Asset");
                       IF AmountType = AmountType::"Net Change" THEN
                         LiqLedgEntry.SETRANGE("Liquidity Date","Period Start","Period End")
                       ELSE
                         LiqLedgEntry.SETRANGE("Liquidity Date",0D,"Period End");
                       LiqLedgEntry.CALCSUMS(Amount);
                       SaleFixedAssets := LiqLedgEntry.Amount;

                       // Budgeted Fixed Assets
                       LiqLedgEntry.RESET;
                       LiqLedgEntry.SETCURRENTKEY("Liquidity No.","Liquidity Account No.","Source Type","Liquidity Date");
                       LiqLedgEntry.SETRANGE("Liquidity No.",Liquidity."No.");
                       LiqLedgEntry.SETRANGE("Source Type",LiqLedgEntry."Source Type"::"Budgeted Fixed Asset");
                       IF AmountType = AmountType::"Net Change" THEN
                         LiqLedgEntry.SETRANGE("Liquidity Date","Period Start","Period End")
                       ELSE
                         LiqLedgEntry.SETRANGE("Liquidity Date",0D,"Period End");
                       LiqLedgEntry.CALCSUMS(Amount);
                       BudgFixedAssets := LiqLedgEntry.Amount;

                       // Neutral Expenses
                       LiqLedgEntry.RESET;
                       LiqLedgEntry.SETCURRENTKEY("Liquidity No.","Liquidity Account No.","Source Type","Liquidity Date");
                       LiqLedgEntry.SETRANGE("Liquidity No.",Liquidity."No.");
                       LiqLedgEntry.SETRANGE("Source Type",LiqLedgEntry."Source Type"::"Neutral Expenses");
                       IF AmountType = AmountType::"Net Change" THEN
                         LiqLedgEntry.SETRANGE("Liquidity Date","Period Start","Period End")
                       ELSE
                         LiqLedgEntry.SETRANGE("Liquidity Date",0D,"Period End");
                       LiqLedgEntry.CALCSUMS(Amount);
                       NeutrExpenses := LiqLedgEntry.Amount;

                       // Neutral Revenues
                       LiqLedgEntry.RESET;
                       LiqLedgEntry.SETCURRENTKEY("Liquidity No.","Liquidity Account No.","Source Type","Liquidity Date");
                       LiqLedgEntry.SETRANGE("Liquidity No.",Liquidity."No.");
                       LiqLedgEntry.SETRANGE("Source Type",LiqLedgEntry."Source Type"::"Neutral Revenues");
                       IF AmountType = AmountType::"Net Change" THEN
                         LiqLedgEntry.SETRANGE("Liquidity Date","Period Start","Period End")
                       ELSE
                         LiqLedgEntry.SETRANGE("Liquidity Date",0D,"Period End");
                       LiqLedgEntry.CALCSUMS(Amount);
                       NeutrRevenues := LiqLedgEntry.Amount;

                       LiquiditySum := LiquidFunds + Receivables + SalesOrders + SaleFixedAssets + NeutrRevenues +
                                       Payables + PurchaseOrders + BudgFixedAssets + NeutrExpenses;

                       CASE RoundingFactor OF
                         RoundingFactor::"1":
                           BEGIN
                             Receivables:= ROUND(Receivables,1);
                             SalesOrders:= ROUND(SalesOrders,1);
                             NeutrRevenues:= ROUND(NeutrRevenues,1);
                             Payables:= ROUND(Payables,1);
                             PurchaseOrders:= ROUND(PurchaseOrders,1);
                             NeutrExpenses:= ROUND(NeutrExpenses,1);
                             SaleFixedAssets := ROUND(SaleFixedAssets,1);
                             BudgFixedAssets := ROUND(BudgFixedAssets,1);
                             LiquiditySum := ROUND(LiquiditySum,1);
                           END;
                         RoundingFactor::"1000":
                           BEGIN
                             Receivables:= ROUND(Receivables / 1000,0.1);
                             SalesOrders := ROUND(SalesOrders / 1000,0.1);
                             NeutrRevenues := ROUND(NeutrRevenues / 1000,0.1);
                             Payables := ROUND(Payables / 1000,0.1);
                             PurchaseOrders := ROUND(PurchaseOrders / 1000,0.1);
                             NeutrExpenses := ROUND(NeutrExpenses / 1000,0.1);
                             SaleFixedAssets := ROUND(SaleFixedAssets / 1000,0.1);
                             BudgFixedAssets := ROUND(BudgFixedAssets / 1000,0.1);
                             LiquiditySum := ROUND(LiquiditySum / 1000,0.1);
                           END;
                         RoundingFactor::"1000000":
                           BEGIN
                             Receivables := ROUND(Receivables / 1000000,0.1);
                             SalesOrders := ROUND(SalesOrders / 1000000,0.1);
                             NeutrRevenues := ROUND(NeutrRevenues / 1000000,0.1);
                             Payables := ROUND(Payables / 1000000,0.1);
                             PurchaseOrders := ROUND(PurchaseOrders / 1000000,0.1);
                             NeutrExpenses := ROUND(NeutrExpenses / 1000000,0.1);
                             SaleFixedAssets := ROUND(SaleFixedAssets / 1000000,0.1);
                             BudgFixedAssets := ROUND(BudgFixedAssets / 1000000,0.1);
                             LiquiditySum := ROUND(LiquiditySum / 1000000,0.1);
                           END;
                       END;
                       ReceivablesOnFormat(FORMAT(Receivables));
                       SalesOrdersOnFormat(FORMAT(SalesOrders));
                       SaleFixedAssetsOnFormat(FORMAT(SaleFixedAssets));
                       NeutrRevenuesOnFormat(FORMAT(NeutrRevenues));
                       PayablesOnFormat(FORMAT(Payables));
                       PurchaseOrdersOnFormat(FORMAT(PurchaseOrders));
                       BudgFixedAssetsOnFormat(FORMAT(BudgFixedAssets));
                       NeutrExpensesOnFormat(FORMAT(NeutrExpenses));
                       LiquiditySumOnFormat(FORMAT(LiquiditySum));
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1140000;1;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 1140001;2;Field     ;
                SourceExpr="Period Start" }

    { 1140003;2;Field     ;
                SourceExpr="Period Name" }

    { 1140005;2;Field     ;
                CaptionML=[ENU=Receivables;
                           ESP=Cobros];
                SourceExpr=Receivables }

    { 1140007;2;Field     ;
                CaptionML=[ENU=Sales Orders;
                           ESP=Pedidos venta];
                SourceExpr=SalesOrders }

    { 1140009;2;Field     ;
                CaptionML=[ENU=Sale of Fixed Assets;
                           ESP=Venta activos fijos];
                SourceExpr=SaleFixedAssets }

    { 1140011;2;Field     ;
                CaptionML=[ENU=Neutr. Revenues;
                           ESP=Ingresos neutr.];
                SourceExpr=NeutrRevenues }

    { 1140013;2;Field     ;
                CaptionML=[ENU=Payables;
                           ESP=Pagos];
                SourceExpr=Payables }

    { 1140015;2;Field     ;
                CaptionML=[ENU=Purchase Orders;
                           ESP=Pedidos compra];
                SourceExpr=PurchaseOrders }

    { 1140017;2;Field     ;
                CaptionML=[ENU=Budg. Investment Fixed Assets;
                           ESP=Activos fijos inv. pptdos.];
                SourceExpr=BudgFixedAssets }

    { 1140019;2;Field     ;
                CaptionML=[ENU=Neutr. Expenses;
                           ESP=Gastos neutr.];
                SourceExpr=NeutrExpenses }

    { 1140021;2;Field     ;
                CaptionML=[ENU=Total;
                           ESP=Total];
                SourceExpr=LiquiditySum;
                Style=Strong;
                StyleExpr=TRUE }

  }
  CODE
  {
    VAR
      Text1140000@1140000 : TextConst 'ENU=<Sign><Integer Thousand><Decimals,2>;ESP=<Sign><Integer Thousand><Decimals,2>';
      Liquidity@1140001 : Record 5055250;
      Liquidity2@1140002 : Record 5055250;
      SalesLine@1140003 : Record 37;
      PurchLine@1140004 : Record 39;
      ProdOrderLine@1140005 : Record 5406;
      ProdOrderComponent@1140006 : Record 5407;
      LiqLedgEntry@1140007 : Record 5055257;
      PeriodFormManagement@1140008 : Codeunit 359;
      AvailabilityMgt@1140009 : Codeunit 5400;
      LiqPeriodLength@1140010 : 'Day,Week,Month,Quarter,Year,Period';
      AmountType@1140011 : 'Net Change,Balance at Date';
      RoundingFactor@1140012 : 'None,1,1000,1000000';
      Receivables@1140013 : Decimal;
      SalesOrders@1140014 : Decimal;
      SaleFixedAssets@1140015 : Decimal;
      NeutrRevenues@1140016 : Decimal;
      Payables@1140017 : Decimal;
      PurchaseOrders@1140018 : Decimal;
      BudgFixedAssets@1140019 : Decimal;
      NeutrExpenses@1140020 : Decimal;
      LiquidFunds@1140021 : Decimal;
      LiquiditySum@1140022 : Decimal;
      DateFrom@1140023 : Date;
      DateTo@1140024 : Date;

    PROCEDURE Set@1140000(VAR NewLiquidity@1140000 : Record 5055250;NewLiquidityPeriodLength@1140001 : Integer;NewAmountType@1140002 : 'Net Change,Balance at Date';RoundingFactor2@1140003 : 'None,1,1000,1000000');
    BEGIN
      Liquidity.COPY(NewLiquidity);
      Liquidity.COPY(NewLiquidity);
      Liquidity2.COPY(NewLiquidity);
      LiqPeriodLength := NewLiquidityPeriodLength;
      AmountType := NewAmountType;
      CurrPage.UPDATE(FALSE);
      RoundingFactor := RoundingFactor2;
    END;

    LOCAL PROCEDURE SetDateFilter@1140001();
    BEGIN
    END;

    LOCAL PROCEDURE FormatAmount@1140002(VAR Text@1140000 : Text[250]);
    VAR
      Amount@1140001 : Decimal;
    BEGIN
      IF Text = '' THEN
        EXIT;

      EVALUATE(Amount,Text);

      IF RoundingFactor = RoundingFactor::None THEN
        EXIT;

      CASE RoundingFactor OF
        RoundingFactor::"1":
          Amount := ROUND(Amount,1);
        RoundingFactor::"1000":
          Amount := ROUND(Amount,0.1);
        RoundingFactor::"1000000":
          Amount := ROUND(Amount,0.1);
      END;
      IF Amount = 0 THEN
        Text := '0'
      ELSE
        CASE RoundingFactor OF
          RoundingFactor::"1":
            Text := FORMAT(Amount);
          RoundingFactor::"1000",RoundingFactor::"1000000":
            Text := FORMAT(Amount,0,Text1140000);
        END;
    END;

    LOCAL PROCEDURE ReceivablesOnFormat@19023628(Text@19020285 : Text[1024]);
    BEGIN
      FormatAmount(Text);
    END;

    LOCAL PROCEDURE SalesOrdersOnFormat@19026311(Text@19063480 : Text[1024]);
    BEGIN
      FormatAmount(Text);
    END;

    LOCAL PROCEDURE SaleFixedAssetsOnFormat@19007623(Text@19024091 : Text[1024]);
    BEGIN
      FormatAmount(Text);
    END;

    LOCAL PROCEDURE NeutrRevenuesOnFormat@19018897(Text@19071434 : Text[1024]);
    BEGIN
      FormatAmount(Text);
    END;

    LOCAL PROCEDURE PayablesOnFormat@19021646(Text@19073561 : Text[1024]);
    BEGIN
      FormatAmount(Text);
    END;

    LOCAL PROCEDURE PurchaseOrdersOnFormat@19076247(Text@19067764 : Text[1024]);
    BEGIN
      FormatAmount(Text);
    END;

    LOCAL PROCEDURE BudgFixedAssetsOnFormat@19008143(Text@19069679 : Text[1024]);
    BEGIN
      FormatAmount(Text);
    END;

    LOCAL PROCEDURE NeutrExpensesOnFormat@19043005(Text@19071577 : Text[1024]);
    BEGIN
      FormatAmount(Text);
    END;

    LOCAL PROCEDURE LiquiditySumOnFormat@19025177(Text@19003907 : Text[1024]);
    BEGIN
      FormatAmount(Text);
    END;

    BEGIN
    END.
  }
}
