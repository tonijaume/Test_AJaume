OBJECT Page 703 BA Db. Overview
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=BA Db. Overview;
               ESP=Inf. general BD BA];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table703;
    PageType=List;
    SourceTableTemporary=Yes;
    OnOpenPage=VAR
                 BADatabase@1000 : Record 700;
               BEGIN
                 IF NewCurrentDB <> '' THEN
                   CurrentDB := NewCurrentDB;
                 IF CurrentDB <> '' THEN BEGIN
                   BADatabase.Code := CurrentDB;
                   IF BADatabase.FIND('=<>') THEN
                     CurrentDB := BADatabase.Code
                   ELSE
                     CurrentDB := '';
                 END;

                 IF CurrentDB = '' THEN
                   IF BADatabase.FIND('-') THEN
                     CurrentDB := BADatabase.Code
                   ELSE BEGIN
                     BAFormMgt.CreateDefaultDatabase(BADatabase);
                     CurrentDB := BADatabase.Code;
                   END;

                 BAFormMgt.InitiateBALines(BALine,CurrentDB);
                 IF ISSERVICETIER THEN
                   ExpandAll
                 ELSE
                   InitTempTable;
               END;

    OnAfterGetRecord=BEGIN
                       DescriptionIndent := 0;
                       IF IsExpanded(Rec) THEN
                         ActualExpansionStatus := 1
                       ELSE
                         IF HasChildren(Rec) THEN
                           ActualExpansionStatus := 0
                         ELSE
                           ActualExpansionStatus := 2;
                       DescriptionOnFormat;
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;Action    ;
                      CaptionML=[ENU=&Card;
                                 ESP=&Ficha];
                      Promoted=Yes;
                      Image=EditLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowCard;
                               END;
                                }
      { 14      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones] }
      { 4       ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=New;
                                 ESP=Nueva];
                      RunFormOnRec=Yes;
                      OnAction=BEGIN
                                 NewElement;
                               END;
                                }
      { 8       ;2   ;Action    ;
                      CaptionML=[ENU=Delete;
                                 ESP=Eliminar];
                      OnAction=BEGIN
                                 DeleteElement;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                Lookup=Yes;
                CaptionML=[ENU=Name;
                           ESP=Nombre];
                SourceExpr=CurrentDB;
                TableRelation="BA Database";
                OnValidate=VAR
                             BACube@1001 : Record 700;
                           BEGIN
                             BACube.GET(CurrentDB);
                             BAFormMgt.InitiateBALines(BALine,CurrentDB);
                             InitTempTable;
                               CurrentDBOnAfterValidate;
                           END;
                            }

    { 1   ;1   ;Group     ;
                IndentationColumnName=DescriptionIndent;
                IndentationControls=Description;
                ShowAsTree=Yes;
                GroupType=Repeater }

    { 6   ;2   ;Field     ;
                SourceExpr=Description }

  }
  CODE
  {
    VAR
      BALine@1011 : TEMPORARY Record 703;
      BAFormMgt@1012 : Codeunit 700;
      ActualExpansionStatus@1000 : Integer;
      ExpansionLevel@1001 : Integer;
      CurrentDB@1003 : Code[10];
      Text002@1005 : TextConst 'ENU=You must select a cube, virtual cube, dimension or a numbered list in order to show a card.;ESP=Para ver una ficha, seleccione un cubo, un cubo virtual, una dimensi▋ o una lista numerada.';
      Text003@1010 : TextConst 'ENU=Do you want to create a new cube?;ESP=求esea crear un nuevo cubo?';
      Text004@1009 : TextConst 'ENU=Do you want to create a new virtual cube?;ESP=求esea crear un nuevo cubo virtual?';
      Text005@1008 : TextConst 'ENU=Do you want to create a new dimension?;ESP=求esea crear una nueva dimensi▋?';
      Text006@1007 : TextConst 'ENU=Do you want to create a new numbered list?;ESP=求esea crear una nueva lista numerada?';
      Text007@1013 : TextConst 'ENU=You can only select a cube, virtual cube, dimension or a numbered list to delete.;ESP=S▍o puede seleccionar un cubo, un cubo virtual, una dimensi▋ o una lista numerada para eliminar.';
      Text008@1014 : TextConst 'ENU=Do you want to delete %1?;ESP=求esea eliminar %1?';
      NewCurrentDB@1015 : Code[10];
      DescriptionEmphasize@19010547 : Boolean INDATASET;
      DescriptionIndent@19057867 : Integer INDATASET;

    LOCAL PROCEDURE InitTempTable@4();
    BEGIN
      CopyBALineToTemp(TRUE);
    END;

    LOCAL PROCEDURE ExpandAll@12();
    BEGIN
      CopyBALineToTemp(FALSE);
    END;

    LOCAL PROCEDURE CopyBALineToTemp@3(OnlyRoot@1000 : Boolean);
    BEGIN
      RESET;
      DELETEALL;
      SETCURRENTKEY("BA Db. Code");

      BALine.SETRANGE("BA Db. Code",CurrentDB);
      IF OnlyRoot THEN
        BALine.SETRANGE(Indentation,0);
      IF BALine.FIND('-') THEN
        REPEAT
          Rec := BALine;
          INSERT;
        UNTIL BALine.NEXT = 0;

      BALine.SETRANGE(Indentation);
    END;

    LOCAL PROCEDURE HasChildren@19(ActualBALine@1000 : Record 703) : Boolean;
    BEGIN
      BALine := ActualBALine;
      IF BALine.NEXT = 0 THEN
        EXIT(FALSE)
      ELSE
        EXIT(BALine.Indentation > ActualBALine.Indentation);
    END;

    LOCAL PROCEDURE IsExpanded@20(ActualBALine@1000 : Record 703) : Boolean;
    VAR
      xBALine@1001 : Record 703;
      Found@1002 : Boolean;
    BEGIN
      xBALine.COPY(Rec);
      Rec := ActualBALine;
      Found := (NEXT <> 0);
      IF Found THEN
        Found := (Indentation > ActualBALine.Indentation);
      COPY(xBALine);
      EXIT(Found);
    END;

    LOCAL PROCEDURE ToggleExpandCollapse@1();
    VAR
      xBALine@1000 : Record 703;
    BEGIN
      xBALine.COPY(Rec);
      IF ActualExpansionStatus = 0 THEN BEGIN // Has children, but not expanded
        BALine.SETRANGE("BA Db. Code","BA Db. Code");
        BALine.SETRANGE(Type,Type);
        BALine.SETFILTER("Line No.",'>%1',"Line No.");
        BALine.SETRANGE(Indentation,Indentation,Indentation + 1);
        BALine := Rec;
        IF BALine.NEXT <> 0 THEN
          REPEAT
            IF BALine.Indentation > xBALine.Indentation THEN BEGIN
              Rec := BALine;
              IF INSERT THEN;
            END;
          UNTIL (BALine.NEXT = 0) OR (BALine.Indentation = xBALine.Indentation);
      END ELSE
        IF ActualExpansionStatus = 1 THEN BEGIN // Has children and is already expanded
          WHILE (NEXT <> 0) AND (Indentation > xBALine.Indentation) DO
            DELETE;
        END;

      BALine.RESET;
      BALine.SETRANGE("BA Db. Code",CurrentDB);
      COPY(xBALine);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShowCard@6();
    BEGIN
      IF Indentation <> 1 THEN
        ERROR(Text002);
      CASE Type OF
        Type::Cube : ShowCubeCard;
        Type::"Virtual Cube" : ShowVirtCubeCard;
        Type::Dimension : ShowDimCard;
        Type::"Numbered List" : ShowNumListCard;
      END;
    END;

    LOCAL PROCEDURE ShowCubeCard@10();
    VAR
      BACube@1001 : Record 709;
      BACubeCard@1000 : Form 712;
    BEGIN
      IF "Source Table No." = DATABASE::"BA Db. Cube" THEN BEGIN
        BACube.GET("BA Db. Code","Source Line No.");
        BACube.SETRANGE("BA Db. Code",BACube."BA Db. Code");
        BACubeCard.SETRECORD(BACube);
        BACubeCard.SETTABLEVIEW(BACube);
        BACubeCard.RUNMODAL;
      END;
    END;

    LOCAL PROCEDURE ShowVirtCubeCard@11();
    VAR
      BAVirtCube@1000 : Record 714;
      BAVirtCubeCard@1001 : Form 717;
    BEGIN
      IF "Source Table No." = DATABASE::"BA Db. Virtual Cube" THEN BEGIN
        BAVirtCube.GET("BA Db. Code","Source Line No.");
        BAVirtCube.SETRANGE("BA Db. Code",BAVirtCube."BA Db. Code");
        BAVirtCubeCard.SETRECORD(BAVirtCube);
        BAVirtCubeCard.SETTABLEVIEW(BAVirtCube);
        BAVirtCubeCard.RUNMODAL;
      END;
    END;

    LOCAL PROCEDURE ShowDimCard@13();
    VAR
      BADim@1000 : Record 706;
      BADimCard@1001 : Form 707;
    BEGIN
      IF "Source Table No." = DATABASE::"BA Db. Dimension" THEN BEGIN
        BADim.GET("BA Db. Code","Source Line No.");
        BADim.SETRANGE("BA Db. Code",BADim."BA Db. Code");
        BADimCard.SETRECORD(BADim);
        BADimCard.SETTABLEVIEW(BADim);
        BADimCard.RUNMODAL;
      END;
    END;

    LOCAL PROCEDURE ShowNumListCard@14();
    VAR
      BANumList@1000 : Record 704;
      BANumListCard@1001 : Form 705;
    BEGIN
      IF "Source Table No." = DATABASE::"BA Db. Numbered List" THEN BEGIN
        BANumList.GET("BA Db. Code","Source Line No.");
        BANumList.SETRANGE("BA Db. Code",BANumList."BA Db. Code");
        BANumListCard.SETRECORD(BANumList);
        BANumListCard.SETTABLEVIEW(BANumList);
        BANumListCard.RUNMODAL;
      END;
    END;

    LOCAL PROCEDURE NewElement@2();
    VAR
      Text@1000 : Text[100];
    BEGIN
      CASE Type OF
        Type::Cube: Text := Text003;
        Type::"Virtual Cube": Text := Text004;
        Type::Dimension: Text := Text005;
        Type::"Numbered List": Text := Text006;
      END;
      IF CONFIRM(Text,FALSE) THEN BEGIN
        CODEUNIT.RUN(CODEUNIT::"BA Overview New Element",Rec);
        BAFormMgt.InitiateBALines(BALine,CurrentDB);
        InitTempTable;
      END;
    END;

    LOCAL PROCEDURE DeleteElement@5();
    VAR
      BACube@1000 : Record 709;
      BAVirtCube@1001 : Record 714;
      BADim@1002 : Record 706;
      BANumList@1003 : Record 704;
    BEGIN
      IF Indentation <> 1 THEN
        ERROR(Text007);
      IF NOT CONFIRM(Text008,FALSE,Name) THEN
        EXIT;

      CASE "Source Table No." OF
        DATABASE::"BA Db. Cube":
          IF BACube.GET("BA Db. Code","Source Line No.") THEN
            BACube.DELETE(TRUE);
        DATABASE::"BA Db. Virtual Cube":
          IF BAVirtCube.GET("BA Db. Code","Source Line No.") THEN
            BAVirtCube.DELETE(TRUE);
        DATABASE::"BA Db. Dimension":
          IF BADim.GET("BA Db. Code","Source Line No.") THEN
            BADim.DELETE(TRUE);
        DATABASE::"BA Db. Numbered List":
          IF BANumList.GET("BA Db. Code","Source Line No.") THEN
            BANumList.DELETE(TRUE);
      END;

      BAFormMgt.InitiateBALines(BALine,CurrentDB);
      InitTempTable;
    END;

    PROCEDURE SetNewCurrentDB@7(NewCurrentDB2@1000 : Code[10]);
    BEGIN
      NewCurrentDB := NewCurrentDB2;
    END;

    LOCAL PROCEDURE CurrentDBOnAfterValidate@19078717();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ActualExpansionStatusOnPush@19057112();
    BEGIN
      ToggleExpandCollapse;
    END;

    LOCAL PROCEDURE DescriptionOnFormat@19023855();
    BEGIN
      DescriptionIndent := Indentation;
      DescriptionEmphasize := Indentation = 0;
    END;

    BEGIN
    END.
  }
}
