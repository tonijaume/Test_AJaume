OBJECT Page 500 Available - Requisition Lines
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    Permissions=TableData 246=rm;
    Editable=No;
    CaptionML=[ENU=Available - Requisition Lines;
               ESP=Disponible - L¡ns. demanda];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table246;
    DataCaptionExpr=CaptionText;
    SourceTableView=SORTING(Type,No.,Variant Code,Location Code,Sales Order No.,Planning Line Origin,Due Date);
    PageType=List;
    OnOpenPage=BEGIN
                 ReservEntry.TESTFIELD("Source Type");

                 SETRANGE(Type,Type::Item);
                 SETRANGE("No.",ReservEntry."Item No.");
                 SETRANGE("Variant Code",ReservEntry."Variant Code");
                 SETRANGE("Location Code",ReservEntry."Location Code");

                 SETFILTER("Due Date",ReservMgt.GetAvailabilityFilter(ReservEntry."Shipment Date"));
                 IF ReservMgt.IsPositive() THEN
                   SETFILTER("Quantity (Base)",'>0')
                 ELSE
                   SETFILTER("Quantity (Base)",'<0');

                 SETRANGE("Sales Order No.",'');
               END;

    OnAfterGetRecord=BEGIN
                       ReservMgt.ReqLineUpdateValues(Rec,QtyToReserve,QtyReservedThisLine);
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 50      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 ESP=&L¡nea] }
      { 51      ;2   ;Action    ;
                      ShortCutKey=May£s+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ESP=Dimensiones];
                      RunObject=Page 545;
                      RunFormLink=Table ID=CONST(246),
                                  Journal Template Name=FIELD(Worksheet Template Name),
                                  Journal Batch Name=FIELD(Journal Batch Name),
                                  Journal Line No.=FIELD(Line No.);
                      Image=Dimensions }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones] }
      { 4       ;2   ;Action    ;
                      CaptionML=[ENU=&Reserve;
                                 ESP=&Reservar];
                      OnAction=BEGIN
                                 ReservEntry.LOCKTABLE;
                                 UpdateReservMgt;
                                 ReservMgt.ReqLineUpdateValues(Rec,QtyToReserve,QtyReservedThisLine);
                                 NewQtyReservedThisLine := ReservMgt.CalculateRemainingQty;
                                 ReservMgt.CopySign(NewQtyReservedThisLine,QtyToReserve);
                                 IF NewQtyReservedThisLine <> 0 THEN
                                   IF ABS(NewQtyReservedThisLine) > ABS(QtyToReserve) THEN
                                     CreateReservation(QtyToReserve)
                                   ELSE
                                     CreateReservation(NewQtyReservedThisLine)
                                 ELSE
                                   ERROR(Text000);
                               END;
                                }
      { 5       ;2   ;Action    ;
                      CaptionML=[ENU=&Cancel Reservation;
                                 ESP=&Cancelar reserva];
                      OnAction=BEGIN
                                 IF NOT CONFIRM(Text001,FALSE) THEN
                                   EXIT;

                                 ReservEntry2.COPY(ReservEntry);
                                 ReserveReqLine.FilterReservFor(ReservEntry2,Rec);

                                 IF ReservEntry2.FIND('-') THEN BEGIN
                                   UpdateReservMgt;
                                   REPEAT
                                     ReservEngineMgt.CloseReservEntry2(ReservEntry2);
                                   UNTIL ReservEntry2.NEXT = 0;

                                   UpdateReservFrom;
                                 END;
                               END;
                                }
      { 2       ;2   ;Action    ;
                      CaptionML=[ENU=&Show Entire Worksheet;
                                 ESP=&Mostrar hoja demanda completa];
                      OnAction=BEGIN
                                 ReqWkshTmpl.GET("Worksheet Template Name");
                                 ReqLine2 := Rec;
                                 ReqLine2.FILTERGROUP(2);
                                 ReqLine2.SETRANGE("Worksheet Template Name","Worksheet Template Name");
                                 ReqLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 ReqLine2.FILTERGROUP(0);
                                 FORM.RUN(ReqWkshTmpl."Form ID",ReqLine2);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 6   ;2   ;Field     ;
                SourceExpr="Location Code" }

    { 8   ;2   ;Field     ;
                SourceExpr="Due Date" }

    { 10  ;2   ;Field     ;
                SourceExpr="Quantity (Base)" }

    { 12  ;2   ;Field     ;
                SourceExpr="Reserved Qty. (Base)";
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Available Quantity;
                           ESP=Cdad. disponible];
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserve;
                Editable=FALSE }

    { 19  ;2   ;Field     ;
                CaptionML=[ENU=Current Reserved Quantity;
                           ESP=Cdad. reservada actualmente];
                DecimalPlaces=0:5;
                SourceExpr=ReservedThisLine;
                OnDrillDown=BEGIN
                              ReservEntry2.RESET;
                              ReserveReqLine.FilterReservFor(ReservEntry2,Rec);
                              ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
                              ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry);
                              FORM.RUNMODAL(FORM::"Reservation Entries",ReservEntry2);
                              UpdateReservFrom;
                              CurrPage.UPDATE;
                            END;
                             }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Fully reserved.;ESP=Completamente reservado/a.';
      Text001@1001 : TextConst 'ENU=Cancel reservation?;ESP=¨Confirma que desea cancelar la/s reserva/s?';
      Text003@1002 : TextConst 'ENU=Available Quantity is %1.;ESP=La cantidad disponible es %1.';
      ReservEntry@1003 : Record 337;
      ReservEntry2@1004 : Record 337;
      ReqWkshTmpl@1005 : Record 244;
      ReqLine2@1006 : Record 246;
      SalesLine@1007 : Record 37;
      PurchLine@1008 : Record 39;
      ItemJnlLine@1009 : Record 83;
      ReqLine@1010 : Record 246;
      ProdOrderLine@1011 : Record 5406;
      ProdOrderComp@1012 : Record 5407;
      PlanningComponent@1013 : Record 99000829;
      TransLine@1014 : Record 5741;
      ServiceInvLine@1015 : Record 5902;
      ReservMgt@1016 : Codeunit 99000845;
      ReservEngineMgt@1017 : Codeunit 99000831;
      ReserveSalesLine@1018 : Codeunit 99000832;
      ReserveReqLine@1019 : Codeunit 99000833;
      ReservePurchLine@1020 : Codeunit 99000834;
      ReserveItemJnlLine@1021 : Codeunit 99000835;
      ReserveProdOrderLine@1022 : Codeunit 99000837;
      ReserveProdOrderComp@1023 : Codeunit 99000838;
      ReservePlanningComponent@1024 : Codeunit 99000840;
      ReserveTransLine@1025 : Codeunit 99000836;
      ReserveServiceInvLine@1026 : Codeunit 99000842;
      QtyToReserve@1027 : Decimal;
      QtyReservedThisLine@1028 : Decimal;
      NewQtyReservedThisLine@1029 : Decimal;
      CaptionText@1030 : Text[80];

    PROCEDURE SetSalesLine@24(VAR CurrentSalesLine@1000 : Record 37;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      SalesLine := CurrentSalesLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetSalesLine(SalesLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);
      CaptionText := ReserveSalesLine.Caption(SalesLine);
    END;

    PROCEDURE SetReqLine@23(VAR CurrentReqLine@1000 : Record 246;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ReqLine := CurrentReqLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetReqLine(ReqLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveReqLine.FilterReservFor(ReservEntry,ReqLine);
      CaptionText := ReserveReqLine.Caption(ReqLine);
    END;

    PROCEDURE SetPurchLine@22(VAR CurrentPurchLine@1000 : Record 39;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      PurchLine := CurrentPurchLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPurchLine(PurchLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReservePurchLine.FilterReservFor(ReservEntry,PurchLine);
      CaptionText := ReservePurchLine.Caption(PurchLine);
    END;

    PROCEDURE SetItemJnlLine@21(VAR CurrentItemJnlLine@1000 : Record 83;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ItemJnlLine := CurrentItemJnlLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetItemJnlLine(ItemJnlLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveItemJnlLine.FilterReservFor(ReservEntry,ItemJnlLine);
      CaptionText := ReserveItemJnlLine.Caption(ItemJnlLine);
    END;

    PROCEDURE SetProdOrderLine@19(VAR CurrentProdOrderLine@1000 : Record 5406;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ProdOrderLine := CurrentProdOrderLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
    END;

    PROCEDURE SetProdOrderComponent@18(VAR CurrentProdOrderComp@1000 : Record 5407;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ProdOrderComp := CurrentProdOrderComp;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
    END;

    PROCEDURE SetPlanningComponent@15(VAR CurrentPlanningComponent@1000 : Record 99000829;CurrentReservEntry@1001 : Record 337);
    BEGIN
      PlanningComponent := CurrentPlanningComponent;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanningComponent);
      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
    END;

    PROCEDURE SetTransferLine@3(VAR CurrentTransLine@1000 : Record 5741;CurrentReservEntry@1001 : Record 337;Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TransLine := CurrentTransLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,Direction);
      CaptionText := ReserveTransLine.Caption(TransLine);
    END;

    PROCEDURE SetServiceInvLine@8(VAR CurrentServiceInvLine@1000 : Record 5902;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentServiceInvLine.TESTFIELD(Type,CurrentServiceInvLine.Type::Item);
      ServiceInvLine := CurrentServiceInvLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetServLine(ServiceInvLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveServiceInvLine.FilterReservFor(ReservEntry,ServiceInvLine);
      CaptionText := ReserveServiceInvLine.Caption(ServiceInvLine);
    END;

    PROCEDURE CreateReservation@14(ReserveQuantity@1000 : Decimal);
    BEGIN
      CALCFIELDS("Reserved Qty. (Base)");
      IF "Quantity (Base)" - "Reserved Qty. (Base)" < ReserveQuantity THEN
        ERROR(Text003,"Quantity (Base)" + "Reserved Qty. (Base)");

      TESTFIELD("No.",ReservEntry."Item No.");
      TESTFIELD("Variant Code",ReservEntry."Variant Code");
      TESTFIELD("Location Code",ReservEntry."Location Code");

      UpdateReservMgt;
      ReservMgt.CreateReservation(
        ReservEntry.Description,"Due Date",ReserveQuantity,
        DATABASE::"Requisition Line",0,"Worksheet Template Name",
        "Journal Batch Name",0,"Line No.",
        "Variant Code","Location Code",'','',"Qty. per Unit of Measure");
      UpdateReservFrom;
    END;

    PROCEDURE UpdateReservFrom@17();
    BEGIN
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.FIND;
            SetSalesLine(SalesLine,ReservEntry);
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.FIND;
            SetReqLine(ReqLine,ReservEntry);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.FIND;
            SetPurchLine(PurchLine,ReservEntry);
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            ItemJnlLine.FIND;
            SetItemJnlLine(ItemJnlLine,ReservEntry);
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ProdOrderLine.FIND;
            SetProdOrderLine(ProdOrderLine,ReservEntry);
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.FIND;
            SetProdOrderComponent(ProdOrderComp,ReservEntry);
          END;
        DATABASE::"Planning Component":
          BEGIN
            PlanningComponent.FIND;
            SetPlanningComponent(PlanningComponent,ReservEntry);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.FIND;
            SetTransferLine(TransLine,ReservEntry,ReservEntry."Source Subtype");
          END;
        DATABASE::"Service Line":
          BEGIN
            ServiceInvLine.FIND;
            SetServiceInvLine(ServiceInvLine,ReservEntry);
          END;
      END;
    END;

    PROCEDURE UpdateReservMgt@13();
    BEGIN
      CLEAR(ReservMgt);
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          ReservMgt.SetSalesLine(SalesLine);
        DATABASE::"Requisition Line":
          ReservMgt.SetReqLine(ReqLine);
        DATABASE::"Purchase Line":
          ReservMgt.SetPurchLine(PurchLine);
        DATABASE::"Item Journal Line":
          ReservMgt.SetItemJnlLine(ItemJnlLine);
        DATABASE::"Prod. Order Line":
          ReservMgt.SetProdOrderLine(ProdOrderLine);
        DATABASE::"Prod. Order Component":
          ReservMgt.SetProdOrderComponent(ProdOrderComp);
        DATABASE::"Planning Component":
          ReservMgt.SetPlanningComponent(PlanningComponent);
        DATABASE::"Transfer Line":
          ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
        DATABASE::"Service Line":
          ReservMgt.SetServLine(ServiceInvLine);
      END;
    END;

    PROCEDURE ReservedThisLine@2() : Decimal;
    BEGIN
      ReservEntry2.RESET;
      ReserveReqLine.FilterReservFor(ReservEntry2,Rec);
      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
      EXIT(ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry));
    END;

    BEGIN
    END.
  }
}
