OBJECT Page 490 Acc. Schedule Overview
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Acc. Schedule Overview;
               ESP=Panorama esq. cta.];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table85;
    DataCaptionExpr=CurrentSchedName + ' - ' + CurrentColumnName;
    PageType=Card;
    OnOpenPage=BEGIN
                 GLSetup.GET;
                 IF NewCurrentSchedName <> '' THEN
                   CurrentSchedName := NewCurrentSchedName;
                 IF CurrentSchedName = '' THEN
                   CurrentSchedName := Text000;
                 IF NewCurrentColumnName <> '' THEN
                   CurrentColumnName := NewCurrentColumnName;
                 IF CurrentColumnName = '' THEN
                   CurrentColumnName := Text000;

                 IF AccSchedName.GET(CurrentSchedName) THEN
                   IF AccSchedName."Analysis View Name" <> '' THEN
                     AnalysisView.GET(AccSchedName."Analysis View Name")
                   ELSE BEGIN
                     CLEAR(AnalysisView);
                     AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
                     AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
                   END;

                 FindPeriod('');

                 MATRIX_CaptionFieldNo := 4;
                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1       ;1   ;Action    ;
                      CaptionML=[ENU=&Show Matrix;
                                 ESP=Mo&strar matriz];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MatrixForm@1080 : Form 9235;
                               BEGIN
                                 CLEAR(MatrixForm);

                                 MatrixForm.SETTABLEVIEW(Rec);
                                 MatrixForm.Load(MATRIX_CaptionSet,MATRIX_MatrixRecords,ARRAYLEN(MATRIX_CaptionSet),
                                                       UseAmtsInAddCurr,AccSchedManagement,AccSchedName,CurrentSchedName
                                   ,CurrentColumnName,ShowError);
                                 MatrixForm.SETTABLEVIEW(Rec);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
      { 1094    ;1   ;Action    ;
                      CaptionML=[ENU=Next Set;
                                 ESP=Conjunto siguiente];
                      ToolTipML=ENU=Next Set;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Next);
                               END;
                                }
      { 1092    ;1   ;Action    ;
                      CaptionML=[ENU=Previous Set;
                                 ESP=Conjunto anterior];
                      ToolTipML=ENU=Previous Set;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Previus);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 8   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ESP=General] }

    { 10  ;2   ;Field     ;
                Lookup=Yes;
                CaptionML=[ENU=Account Schedule Name;
                           ESP=Nombre esquema cuenta];
                SourceExpr=CurrentSchedName;
                LookupFormID=Account Schedule Names;
                OnValidate=BEGIN
                             AccSchedManagement.CheckName(CurrentSchedName);
                               CurrentSchedNameOnAfterValidat;
                           END;

                OnLookup=BEGIN
                           EXIT(AccSchedManagement.LookupName(CurrentSchedName,Text));
                         END;
                          }

    { 12  ;2   ;Field     ;
                Lookup=Yes;
                CaptionML=[ENU=Column Layout Name;
                           ESP=Nombre plantilla columna];
                SourceExpr=CurrentColumnName;
                TableRelation="Column Layout Name".Name;
                OnValidate=BEGIN
                             AccSchedManagement.CheckColumnName(CurrentColumnName);
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                           END;

                OnLookup=BEGIN
                           EXIT(AccSchedManagement.LookupColumnName(CurrentColumnName,Text));
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=[ENU=Options;
                           ESP=Opciones] }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Show Error;
                           ESP=Mostrar error];
                OptionCaptionML=[ENU=None,Division by Zero,Period Error,Both;
                                 ESP=Ninguno,Divisi¢n entre cero,Error Periodo,Ambos];
                SourceExpr=ShowError }

    { 24  ;2   ;Field     ;
                CaptionML=[ENU=Show Amounts in Add. Reporting Currency;
                           ESP=Muestra importes en div.-adic.];
                SourceExpr=UseAmtsInAddCurr;
                MultiLine=Yes;
                OnValidate=BEGIN
                             UseAmtsInAddCurrOnAfterValidat;
                           END;
                            }

    { 1906098301;1;Group  ;
                CaptionML=[ENU=Matrix Options;
                           ESP=Opciones matriz] }

    { 1089;2   ;Field     ;
                CaptionML=[ENU=View by;
                           ESP=Ver por];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 ESP=D¡a,Semana,Mes,Trimestre,A¤o,Periodo contable];
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                           END;
                            }

    { 1091;2   ;Field     ;
                CaptionML=[ENU=Column Set;
                           ESP=Conjunto de columnas];
                SourceExpr=MATRIX_CaptionRange;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      MATRIX_MatrixRecords@1081 : ARRAY [32] OF Record 334;
      MATRIX_CaptionSet@1082 : ARRAY [32] OF Text[1024];
      MATRIX_CaptionRange@1083 : Text[1024];
      MATRIX_CaptionFieldNo@1086 : Integer;
      MATRIX_PrimKeyFirstCaptionInCu@1087 : Text[1024];
      Text000@1000 : TextConst 'ENU=DEFAULT;ESP=GENERICO';
      AccSchedName@1005 : Record 84;
      AnalysisView@1020 : Record 363;
      GLSetup@1016 : Record 98;
      AccSchedManagement@1006 : Codeunit 8;
      CurrentSchedName@1007 : Code[10];
      CurrentColumnName@1008 : Code[10];
      NewCurrentSchedName@1009 : Code[10];
      NewCurrentColumnName@1010 : Code[10];
      ShowError@1011 : 'None,Division by Zero,Period Error,Both';
      ColumnValue@1012 : Decimal;
      PeriodType@1013 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      UseAmtsInAddCurr@1014 : Boolean;
      Text005@1021 : TextConst 'ENU=1,6,,Dimension %1 Filter;ESP=1,6,,Filtro dimensi¢n %1';
      MATRIX_SetWanted@1019 : 'Initial,Previus,Same,Next';
      MATRIX_MatrixRecord@1017 : TEMPORARY Record 334;
      MATRIX_CurrSetLength@1004 : Integer;

    PROCEDURE MATRIX_GenerateColumnCaptions@1096(SetWanted@1000 : 'Initial,Previus,Same,Next');
    VAR
      MatrixMgt@1001 : Codeunit 9200;
      RecRef@1002 : RecordRef;
      MatrixRecord2@1003 : Record 334;
      CurrentMatrixRecordOrdinal@1004 : Integer;
    BEGIN
      CLEAR(MATRIX_CaptionSet);
      CurrentMatrixRecordOrdinal := 1;
      CLEAR(MATRIX_MatrixRecords);
      CLEAR(MATRIX_MatrixRecord);

      AccSchedManagement.CopyColumnsToTemp(CurrentColumnName,MATRIX_MatrixRecord);
      AccSchedManagement.OpenSchedule(CurrentSchedName,Rec);
      AccSchedManagement.OpenColumns(CurrentColumnName,MATRIX_MatrixRecord);
      AccSchedManagement.CheckAnalysisView(CurrentSchedName,CurrentColumnName,TRUE);

      RecRef.GETTABLE(MATRIX_MatrixRecord);
      RecRef.SETTABLE(MATRIX_MatrixRecord);

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,ARRAYLEN(MATRIX_CaptionSet),MATRIX_CaptionFieldNo,MATRIX_PrimKeyFirstCaptionInCu,
                                     MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrSetLength);
      REPEAT
        MATRIX_MatrixRecords[CurrentMatrixRecordOrdinal].COPY(MATRIX_MatrixRecord);
        MATRIX_CaptionSet[CurrentMatrixRecordOrdinal] := MATRIX_MatrixRecord."Column Header";
        CurrentMatrixRecordOrdinal := CurrentMatrixRecordOrdinal + 1;
      UNTIL (CurrentMatrixRecordOrdinal = ARRAYLEN(MATRIX_MatrixRecords)) OR (MATRIX_MatrixRecord.NEXT <> 1);
    END;

    PROCEDURE SetAccSchedName@6(NewAccSchedName@1000 : Code[10]);
    VAR
      AccSchedName@1001 : Record 84;
    BEGIN
      NewCurrentSchedName := NewAccSchedName;
      IF AccSchedName.GET(NewCurrentSchedName) THEN
        IF AccSchedName."Default Column Layout" <> '' THEN
          NewCurrentColumnName := AccSchedName."Default Column Layout";
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      IF GETFILTER("Date Filter") <> '' THEN BEGIN

        Calendar.SETFILTER("Period Start",GETFILTER("Date Filter"));
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);
      SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
      IF GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") THEN
        SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
    END;

    LOCAL PROCEDURE FormLookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text[1024]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Form 560;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE)
    END;

    LOCAL PROCEDURE FormGetCaptionClass@12(DimNo@1000 : Integer) : Text[250];
    BEGIN
      CASE DimNo OF
        1:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 1 Code")
            ELSE
              EXIT(STRSUBSTNO(Text005,DimNo));
          END;
        2:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 2 Code")
            ELSE
              EXIT(STRSUBSTNO(Text005,DimNo));
          END;
        3:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 3 Code")
            ELSE
              EXIT(STRSUBSTNO(Text005,DimNo));
          END;
        4:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 4 Code")
            ELSE
              EXIT(STRSUBSTNO(Text005,DimNo));
          END;
      END;
    END;

    LOCAL PROCEDURE CurrentSchedNameOnAfterValidat@19053875();
    VAR
      AccSchedName@1001 : Record 84;
      PrevAnalysisView@1002 : Record 363;
    BEGIN
      CurrPage.SAVERECORD;
      AccSchedManagement.SetName(CurrentSchedName,Rec);

      IF AccSchedName.GET(CurrentSchedName) THEN
        IF (AccSchedName."Default Column Layout" <> '') AND
           (CurrentColumnName <> AccSchedName."Default Column Layout")
        THEN BEGIN
          CurrentColumnName := AccSchedName."Default Column Layout";
          AccSchedManagement.CopyColumnsToTemp(CurrentColumnName,MATRIX_MatrixRecord);
          AccSchedManagement.SetColumnName(CurrentColumnName,MATRIX_MatrixRecord);
        END;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
      AccSchedManagement.CheckAnalysisView(CurrentSchedName,CurrentColumnName,TRUE);

      IF AccSchedName."Analysis View Name" <> AnalysisView.Code THEN BEGIN
        PrevAnalysisView := AnalysisView;
        IF AccSchedName."Analysis View Name" <> '' THEN
          AnalysisView.GET(AccSchedName."Analysis View Name")
        ELSE BEGIN
          CLEAR(AnalysisView);
          AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        END;
        IF PrevAnalysisView."Dimension 1 Code" <> AnalysisView."Dimension 1 Code" THEN
          SETRANGE("Dimension 1 Filter");
        IF PrevAnalysisView."Dimension 2 Code" <> AnalysisView."Dimension 2 Code" THEN
          SETRANGE("Dimension 2 Filter");
        IF PrevAnalysisView."Dimension 3 Code" <> AnalysisView."Dimension 3 Code" THEN
          SETRANGE("Dimension 3 Filter");
        IF PrevAnalysisView."Dimension 4 Code" <> AnalysisView."Dimension 4 Code" THEN
          SETRANGE("Dimension 4 Filter");
      END;

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE UseAmtsInAddCurrOnAfterValidat@19056101();
    BEGIN
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}
