OBJECT Page 5522 Order Planning
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Order Planning;
               ESP=Planificaci¢n de pedidos];
    InsertAllowed=No;
    SourceTable=Table246;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             DemandOrderFilterCtrlEnable := TRUE;
             "Supply FromEditable" := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF NOT MfgUserTempl.GET(USERID) THEN BEGIN
                   MfgUserTempl.INIT;
                   MfgUserTempl."User ID" := USERID;
                   MfgUserTempl."Make Orders" := MfgUserTempl."Make Orders"::"the Active Order";
                   MfgUserTempl."Create Purchase Order" := MfgUserTempl."Create Purchase Order"::"Make Purch. Orders";
                   MfgUserTempl."Create Production Order" := MfgUserTempl."Create Production Order"::"Firm Planned";
                   MfgUserTempl."Create Transfer Order" := MfgUserTempl."Create Transfer Order"::"Make Trans. Orders";
                   MfgUserTempl.INSERT;
                 END;

                 IF ISSERVICETIER THEN
                   ExpandAll
                 ELSE
                   InitTempTable;
                 SetRecFilters;

                 CurrPage.UPDATE(FALSE);
               END;

    OnAfterGetRecord=BEGIN
                       QuantityHideValue := FALSE;
                       "Replenishment SystemHideValue" := FALSE;
                       "Demand Qty. AvailableHideValue" := FALSE;
                       "Demand QuantityHideValue" := FALSE;
                       DescriptionIndent := 0;
                       "Demand Order No.HideValue" := FALSE;
                       "Demand TypeHideValue" := FALSE;
                       StatusHideValue := FALSE;
                       SetExpansionStatus;
                       OnAfterGetCurrRecord;
                       StatusText := FORMAT(Status);
                       StatusTextOnFormat(StatusText);
                       DemandTypeText := FORMAT("Demand Type");
                       DemandTypeTextOnFormat(DemandTypeText);
                       DemandSubtypeText := FORMAT("Demand Subtype");
                       DemandSubtypeTextOnFormat(DemandSubtypeText);
                       DemandOrderNoOnFormat;
                       DescriptionOnFormat;
                       DemandQuantityOnFormat;
                       DemandQtyAvailableOnFormat;
                       ReplenishmentSystemOnFormat;
                       QuantityOnFormat;
                     END;

    OnNewRecord=BEGIN
                  OnAfterGetCurrRecord;
                END;

    OnModifyRecord=VAR
                     ReqLine@1000 : Record 246;
                   BEGIN
                     ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.");
                     ReqLine.TRANSFERFIELDS(Rec,FALSE);
                     ReqLine.MODIFY(TRUE);
                   END;

    OnDeleteRecord=VAR
                     xReqLine@1000 : Record 246;
                   BEGIN
                     xReqLine := Rec;
                     WHILE (NEXT <> 0) AND (Level > xReqLine.Level) DO
                       DELETE(TRUE);
                     Rec := xReqLine;
                     xReqLine.DELETE(TRUE);
                     DELETE;
                     EXIT(FALSE);
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 99      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 ESP=&L¡nea] }
      { 18      ;2   ;Action    ;
                      CaptionML=[ENU=Show Document;
                                 ESP=Mostrar documento];
                      Image=View;
                      OnAction=BEGIN
                                 ShowDemandOrder;
                               END;
                                }
      { 63      ;2   ;Separator  }
      { 42      ;2   ;Action    ;
                      CaptionML=[ENU=Components;
                                 ESP=Componentes];
                      RunObject=Page 99000862;
                      RunFormLink=Worksheet Template Name=FIELD(Worksheet Template Name),
                                  Worksheet Batch Name=FIELD(Journal Batch Name),
                                  Worksheet Line No.=FIELD(Line No.);
                      Image=Components }
      { 47      ;2   ;Action    ;
                      CaptionML=[ENU=Ro&uting;
                                 ESP=R&uta];
                      RunObject=Page 99000863;
                      RunFormLink=Worksheet Template Name=FIELD(Worksheet Template Name),
                                  Worksheet Batch Name=FIELD(Journal Batch Name),
                                  Worksheet Line No.=FIELD(Line No.) }
      { 101     ;2   ;Action    ;
                      ShortCutKey=May£s+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ESP=Dimensiones];
                      RunObject=Page 545;
                      RunFormLink=Table ID=CONST(246),
                                  Journal Template Name=FIELD(Worksheet Template Name),
                                  Journal Batch Name=FIELD(Journal Batch Name),
                                  Journal Line No.=FIELD(Line No.);
                      Image=Dimensions }
      { 100     ;1   ;ActionGroup;
                      CaptionML=[ENU=&Item;
                                 ESP=&Producto] }
      { 19      ;2   ;Action    ;
                      ShortCutKey=May£s+F7;
                      CaptionML=[ENU=Card;
                                 ESP=Ficha];
                      Image=EditLines;
                      OnAction=VAR
                                 Item@1000 : Record 27;
                               BEGIN
                                 TESTFIELD(Type,Type::Item);
                                 TESTFIELD("No.");
                                 Item."No." := "No.";
                                 FORM.RUNMODAL(FORM::"Item Card",Item);
                               END;
                                }
      { 105     ;2   ;ActionGroup;
                      CaptionML=[ENU=&Item Availability by;
                                 ESP=&Disponibilidad prod. por] }
      { 106     ;3   ;Action    ;
                      CaptionML=[ENU=Period;
                                 ESP=Periodo];
                      OnAction=BEGIN
                                 ItemAvailability(0);
                               END;
                                }
      { 107     ;3   ;Action    ;
                      CaptionML=[ENU=Variant;
                                 ESP=Variante];
                      OnAction=BEGIN
                                 ItemAvailability(1);
                               END;
                                }
      { 108     ;3   ;Action    ;
                      CaptionML=[ENU=Location;
                                 ESP=Almac‚n];
                      OnAction=BEGIN
                                 ItemAvailability(2);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 39      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones] }
      { 37      ;2   ;Action    ;
                      CaptionML=[ENU=&Calculate Plan;
                                 ESP=&Calcular plan];
                      Promoted=Yes;
                      Image=CalculatePlan;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalcPlan;
                               END;
                                }
      { 48      ;2   ;Separator  }
      { 66      ;2   ;Action    ;
                      CaptionML=[ENU=&Reserve;
                                 ESP=&Reservar];
                      OnAction=BEGIN
                                 CurrPage.SAVERECORD;
                                 ShowReservation;
                               END;
                                }
      { 67      ;2   ;Action    ;
                      CaptionML=[ENU=Order &Tracking;
                                 ESP=&Seg. pedido];
                      OnAction=VAR
                                 TrackingForm@1001 : Form 99000822;
                               BEGIN
                                 TrackingForm.SetReqLine(Rec);
                                 TrackingForm.RUNMODAL;
                               END;
                                }
      { 77      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Refresh &Planning Line;
                                 ESP=&Actualizar l¡nea plan.];
                      Image=RefreshPlanningLine;
                      OnAction=VAR
                                 ReqLine2@1000 : Record 246;
                               BEGIN
                                 ReqLine2.SETRANGE("Worksheet Template Name","Worksheet Template Name");
                                 ReqLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 ReqLine2.SETRANGE("Line No.","Line No.");

                                 REPORT.RUNMODAL(REPORT::"Refresh Planning Demand",TRUE,FALSE,ReqLine2);
                               END;
                                }
      { 36      ;2   ;Separator  }
      { 55      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Make &Orders;
                                 ESP=&Crear pedidos compra];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MakeSupplyOrders@1001 : Codeunit 5521;
                               BEGIN
                                 MakeSupplyOrders.SetManufUserTemplate(MfgUserTempl);
                                 MakeSupplyOrders.RUN(Rec);

                                 RefreshTempTable;
                                 SetRecFilters;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 78  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ESP=General] }

    { 80  ;2   ;Field     ;
                Name=DemandOrderFilterCtrl;
                CaptionML=[ENU=Show Demand as;
                           ESP=Mostrar demanda como];
                OptionCaptionML=[ENU=All Demand,Production Demand,Sales Demand;
                                 ESP=Toda la demanda,Demanda de producci¢n,Demanda de venta];
                SourceExpr=DemandOrderFilter;
                Enabled=DemandOrderFilterCtrlEnable;
                OnValidate=BEGIN
                             DemandOrderFilterOnAfterValida;
                           END;
                            }

    { 1   ;1   ;Group     ;
                IndentationColumnName=DescriptionIndent;
                IndentationControls=Description;
                ShowAsTree=Yes;
                GroupType=Repeater }

    { 14  ;2   ;Field     ;
                SourceExpr="Demand Date" }

    { 72  ;2   ;Field     ;
                SourceExpr=StatusText;
                CaptionClass=FIELDCAPTION(Status);
                Editable=FALSE;
                HideValue=StatusHideValue }

    { 43  ;2   ;Field     ;
                Lookup=No;
                SourceExpr=DemandTypeText;
                CaptionClass=FIELDCAPTION("Demand Type");
                Editable=FALSE;
                HideValue="Demand TypeHideValue" }

    { 46  ;2   ;Field     ;
                SourceExpr=DemandSubtypeText;
                CaptionClass=FIELDCAPTION("Demand Subtype");
                Visible=FALSE;
                Editable=FALSE }

    { 57  ;2   ;Field     ;
                CaptionML=[ENU=Order No.;
                           ESP=N§ pedido];
                SourceExpr="Demand Order No.";
                HideValue="Demand Order No.HideValue" }

    { 87  ;2   ;Field     ;
                SourceExpr="Demand Line No.";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Item No.;
                           ESP=N§ producto];
                SourceExpr="No.";
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Variant Code";
                Visible=FALSE;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Location Code";
                Visible=FALSE;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr="Demand Quantity";
                Visible=FALSE;
                HideValue="Demand QuantityHideValue" }

    { 95  ;2   ;Field     ;
                SourceExpr="Demand Qty. Available";
                Visible=FALSE;
                HideValue="Demand Qty. AvailableHideValue" }

    { 2   ;2   ;Field     ;
                SourceExpr="Needed Quantity";
                Visible=TRUE }

    { 24  ;2   ;Field     ;
                SourceExpr="Replenishment System";
                HideValue="Replenishment SystemHideValue";
                OnValidate=BEGIN
                             ReplenishmentSystemOnAfterVali;
                           END;
                            }

    { 26  ;2   ;Field     ;
                SourceExpr="Supply From";
                Editable="Supply FromEditable" }

    { 62  ;2   ;Field     ;
                SourceExpr=Reserve }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Qty. to Order;
                           ESP=Cantidad que se pedir ];
                SourceExpr=Quantity;
                HideValue=QuantityHideValue }

    { 12  ;2   ;Field     ;
                SourceExpr="Unit of Measure Code";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                SourceExpr="Order Date" }

    { 74  ;2   ;Field     ;
                SourceExpr="Starting Date";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                SourceExpr="Due Date" }

    { 34  ;2   ;Field     ;
                SourceExpr="Unit Cost";
                Visible=FALSE }

    { 53  ;2   ;Field     ;
                SourceExpr="Direct Unit Cost";
                Visible=FALSE }

    { 51  ;2   ;Field     ;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 49  ;2   ;Field     ;
                SourceExpr="Purchasing Code";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE }

    { 22  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE }

    { 38  ;1   ;Group      }

    { 1902204901;2;Group  ;
                GroupType=FixedLayout }

    { 1901313001;3;Group  ;
                CaptionML=[ENU=Available for Transfer;
                           ESP=Disponible para transfer.] }

    { 60  ;4   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr=CalcQtyOnOtherLocations;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               OrderPlanningMgt.InsertAltSupplyLocation(Rec);
                             END;
                              }

    { 1901741901;3;Group  ;
                CaptionML=[ENU=Substitutes Exist;
                           ESP=Existe sustitutivo] }

    { 58  ;4   ;Field     ;
                Lookup=No;
                DrillDown=No;
                CaptionML=[ENU=Substitutes Exist;
                           ESP=Existe sustitutivo];
                SourceExpr=CalcSubstitionAvailable;
                Editable=FALSE;
                OnAssistEdit=VAR
                               ReqLine2@1001 : Record 246;
                               xReqLine@1002 : Record 246;
                               ReqLine3@1003 : Record 246;
                             BEGIN
                               ReqLine3 := Rec;
                               OrderPlanningMgt.InsertAltSupplySubstitution(ReqLine3);
                               Rec := ReqLine3;
                               MODIFY;

                               IF OrderPlanningMgt.DeleteLine THEN BEGIN
                                 xReqLine := Rec;
                                 ReqLine2.SETCURRENTKEY("User ID","Demand Type","Demand Subtype","Demand Order No.");
                                 ReqLine2.SETRANGE("User ID",USERID);
                                 ReqLine2.SETRANGE("Demand Type","Demand Type");
                                 ReqLine2.SETRANGE("Demand Subtype","Demand Subtype");
                                 ReqLine2.SETRANGE("Demand Order No.","Demand Order No.");
                                 ReqLine2.SETRANGE(Level,Level,Level + 1);
                                 ReqLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                                 IF NOT ReqLine2.FIND('-') THEN BEGIN // No other children
                                   ReqLine2.SETRANGE("Line No.");
                                   ReqLine2.SETRANGE(Level,0);
                                   IF ReqLine2.FIND('-') THEN BEGIN // Find and delete parent
                                     Rec := ReqLine2;
                                     DELETE;
                                   END;
                                 END;

                                 Rec := xReqLine;
                                 DELETE;
                                 CurrPage.UPDATE(FALSE);
                               END ELSE
                                 CurrPage.UPDATE(TRUE);
                             END;
                              }

    { 1901741801;3;Group  ;
                CaptionML=[ENU=Quantity Available;
                           ESP=Cantidad disponible] }

    { 68  ;4   ;Field     ;
                Lookup=No;
                DrillDown=No;
                CaptionML=[ENU=Quantity Available;
                           ESP=Cantidad disponible];
                DecimalPlaces=0:5;
                SourceExpr=CalcQtyATP;
                Editable=FALSE }

    { 1901312901;3;Group  ;
                CaptionML=[ENU=Earliest Date Available;
                           ESP=Primera fecha posible] }

    { 70  ;4   ;Field     ;
                Lookup=No;
                DrillDown=No;
                CaptionML=[ENU=Earliest Date Available;
                           ESP=Primera fecha posible];
                SourceExpr=CalcEarliestShptDateAvailable;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      ReqLine@1001 : Record 246;
      SalesHeader@1000 : Record 36;
      ProdOrder@1006 : Record 5405;
      MfgUserTempl@1015 : Record 5525;
      OrderPlanningMgt@1002 : Codeunit 5522;
      ActualExpansionStatus@1005 : 'Has Children,Expanded,No Children';
      DemandOrderFilter@1007 : 'All Demands,Production Demand,Sales Demand';
      Text000@1003 : TextConst 'ENU=All items in %1 %2 %3 are available and no planning line is created for it.;ESP=Todos los elementos de %3 %1 %2 est n disponibles y no se han creado l¡neas de planificaci¢n para ellos.';
      Text001@1008 : TextConst 'ENU=Sales;ESP=Ventas';
      Text002@1009 : TextConst 'ENU=Production;ESP=Producci¢n';
      StatusHideValue@19077886 : Boolean INDATASET;
      StatusText@19037117 : Text[1024] INDATASET;
      "Demand TypeHideValue"@19039011 : Boolean INDATASET;
      "Demand TypeEmphasize"@19074322 : Boolean INDATASET;
      DemandTypeText@19010028 : Text[1024] INDATASET;
      DemandSubtypeText@19017088 : Text[1024] INDATASET;
      "Demand Order No.HideValue"@19045269 : Boolean INDATASET;
      "Demand Order No.Emphasize"@19029891 : Boolean INDATASET;
      DescriptionEmphasize@19010547 : Boolean INDATASET;
      DescriptionIndent@19057867 : Integer INDATASET;
      "Demand QuantityHideValue"@19062899 : Boolean INDATASET;
      "Demand Qty. AvailableHideValue"@19060213 : Boolean INDATASET;
      "Replenishment SystemHideValue"@19034362 : Boolean INDATASET;
      QuantityHideValue@19060207 : Boolean INDATASET;
      "Supply FromEditable"@19071852 : Boolean INDATASET;
      DemandOrderFilterCtrlEnable@19066621 : Boolean INDATASET;

    PROCEDURE SetSalesOrder@2(SalesHeader2@1001 : Record 36);
    BEGIN
      SalesHeader := SalesHeader2;
      DemandOrderFilter := DemandOrderFilter::"Sales Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    PROCEDURE SetProdOrder@3(ProdOrder2@1000 : Record 5405);
    BEGIN
      ProdOrder := ProdOrder2;
      DemandOrderFilter := DemandOrderFilter::"Production Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    PROCEDURE SetExpansionStatus@16();
    BEGIN
      IF IsExpanded(Rec) THEN
        ActualExpansionStatus := ActualExpansionStatus::Expanded
      ELSE
        IF HasChildren(Rec) THEN
          ActualExpansionStatus := ActualExpansionStatus::"Has Children"
        ELSE
          ActualExpansionStatus := ActualExpansionStatus::"No Children";
    END;

    PROCEDURE InitTempTable@1();
    BEGIN
      ReqLine.RESET;
      ReqLine.COPYFILTERS(Rec);
      ReqLine.SETRANGE("Worksheet Template Name",'');
      DELETEALL;
      IF ReqLine.FINDSET THEN
        REPEAT
          IF ReqLine.Level = 0 THEN BEGIN
            Rec := ReqLine;
            INSERT;
          END;
        UNTIL ReqLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ExpandAll@12();
    VAR
      ReqLine@1000 : Record 246;
    BEGIN
      ReqLine.RESET;
      ReqLine.COPYFILTERS(Rec);
      DELETEALL;

      IF ReqLine.FINDSET THEN
        REPEAT
          Rec := ReqLine;
          INSERT;
        UNTIL ReqLine.NEXT = 0;
    END;

    LOCAL PROCEDURE IsExpanded@20(ActualReqLine@1000 : Record 246) : Boolean;
    VAR
      xReqLine@1001 : Record 246;
      Found@1002 : Boolean;
    BEGIN
      xReqLine := Rec;
      Rec := ActualReqLine;
      Found := (NEXT <> 0);
      IF Found THEN
        Found := (Level > ActualReqLine.Level);
      Rec := xReqLine;
      EXIT(Found);
    END;

    LOCAL PROCEDURE HasChildren@18(ActualReqLine@1000 : Record 246) : Boolean;
    BEGIN
      ReqLine.RESET;
      ReqLine.COPYFILTERS(Rec);
      ReqLine := ActualReqLine;
      IF ReqLine.NEXT = 0 THEN
        EXIT(FALSE);

      EXIT(ReqLine.Level > ActualReqLine.Level);
    END;

    PROCEDURE RefreshTempTable@14();
    VAR
      TempReqLine2@1001 : Record 246;
      ReqLine@1000 : Record 246;
    BEGIN
      TempReqLine2.COPY(Rec);

      RESET;
      IF FIND('-') THEN
        REPEAT
          ReqLine := Rec;
          IF NOT ReqLine.FIND OR
             ((Level = 0) AND ((ReqLine.NEXT = 0) OR (ReqLine.Level = 0)))
          THEN BEGIN
            IF Level = 0 THEN BEGIN
              ReqLine := Rec;
              ReqLine.FIND;
              ReqLine.DELETE(TRUE);
            END;
            DELETE
          END;
        UNTIL NEXT = 0;

      COPY(TempReqLine2);
    END;

    LOCAL PROCEDURE ToggleExpandCollapse@4();
    VAR
      ReqLine@1000 : Record 246;
      xReqLine@1001 : Record 246;
    BEGIN
      xReqLine := Rec;
      IF ActualExpansionStatus = 0 THEN BEGIN // Has children, but not expanded
        ReqLine.SETRANGE("Worksheet Template Name",'');
        ReqLine.SETFILTER("Line No.",'<>%1',"Line No.");
        ReqLine.SETRANGE(Level,Level,Level + 1);
        ReqLine := Rec;
        IF ReqLine.NEXT <> 0 THEN
          REPEAT
            IF ReqLine.Level > xReqLine.Level THEN BEGIN
              Rec := ReqLine;
              IF INSERT THEN;
            END;
          UNTIL (ReqLine.NEXT = 0) OR (ReqLine.Level = xReqLine.Level);
      END ELSE
        IF ActualExpansionStatus = 1 THEN BEGIN // Has children and is already expanded
          WHILE (NEXT <> 0) AND (Level > xReqLine.Level) DO
            DELETE;
        END;
      Rec := xReqLine;
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE SetRecFilters@5();
    BEGIN
      RESET;
      FILTERGROUP(2);
      SETRANGE("User ID",USERID);
      SETRANGE("Worksheet Template Name",'');

      CASE DemandOrderFilter OF
        DemandOrderFilter::"All Demands":
          BEGIN
            SETRANGE("Demand Type");
            SETCURRENTKEY("User ID","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Sales Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Sales Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Production Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Prod. Order Component");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
      END;
      FILTERGROUP(0);

      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE ExpandOrderToPlan@10();
    VAR
      ReqLine@1000 : Record 246;
    BEGIN
      IF (SalesHeader."No." <> '') OR (ProdOrder."No." <> '') THEN BEGIN
        ReqLine.SETCURRENTKEY("User ID","Demand Type","Demand Subtype","Demand Order No.");
        ReqLine.SETRANGE("User ID",USERID);
        CASE TRUE OF
          SalesHeader."No." <> '':
            BEGIN
              ReqLine.SETRANGE("Demand Type",DATABASE::"Sales Line");
              ReqLine.SETRANGE("Demand Subtype",SalesHeader."Document Type");
              ReqLine.SETRANGE("Demand Order No.",SalesHeader."No.");
            END;
          ProdOrder."No." <> '':
            BEGIN
              ReqLine.SETRANGE("Demand Type",DATABASE::"Prod. Order Component");
              ReqLine.SETRANGE("Demand Subtype",ProdOrder.Status);
              ReqLine.SETRANGE("Demand Order No.",ProdOrder."No.");
            END;
        END;

        IF ReqLine.FIND('-') THEN BEGIN
          Rec := ReqLine;
          FIND;
          ActualExpansionStatus := 0;
          ToggleExpandCollapse;
        END ELSE BEGIN
          IF SalesHeader."No." <> '' THEN
            MESSAGE(
              Text000,
              Text001,
              SalesHeader."Document Type",
              SalesHeader."No.");
          IF ProdOrder."No." <> '' THEN
            MESSAGE(
              Text000,
              ProdOrder.Status,
              ProdOrder.TABLECAPTION,
              ProdOrder."No.");
        END;
      END;
    END;

    PROCEDURE ShowDemandOrder@15();
    VAR
      SalesHeader@1001 : Record 36;
      ProdOrder@1000 : Record 5405;
    BEGIN
      CASE "Demand Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesHeader.GET("Demand Subtype","Demand Order No.");
            CASE SalesHeader."Document Type" OF
              SalesHeader."Document Type"::Order:
                FORM.RUN(FORM::"Sales Order",SalesHeader);
              SalesHeader."Document Type"::"Return Order":
                FORM.RUN(FORM::"Sales Return Order",SalesHeader);
            END;
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrder.GET("Demand Subtype","Demand Order No.");
            CASE ProdOrder.Status OF
              ProdOrder.Status::Planned:
                FORM.RUN(FORM::"Planned Production Order",ProdOrder);
              ProdOrder.Status::"Firm Planned":
                FORM.RUN(FORM::"Firm Planned Prod. Order",ProdOrder);
              ProdOrder.Status::Released:
                FORM.RUN(FORM::"Released Production Order",ProdOrder);
            END;
          END;
      END;
    END;

    PROCEDURE CalcQtyOnOtherLocations@6() : Decimal;
    VAR
      QtyOnOtherLocation@1000 : Decimal;
    BEGIN
      QtyOnOtherLocation := OrderPlanningMgt.AvailQtyOnOtherLocations(Rec); // Base Unit
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      QtyOnOtherLocation := ROUND(QtyOnOtherLocation / "Qty. per Unit of Measure",0.00001);

      EXIT(QtyOnOtherLocation);
    END;

    PROCEDURE CalcQtyOnBlanketOrders@7() : Decimal;
    BEGIN
    END;

    PROCEDURE CalcQtyATP@8() : Decimal;
    VAR
      QtyATP@1000 : Decimal;
    BEGIN
      QtyATP := OrderPlanningMgt.CalcATPQty("No.","Variant Code","Location Code","Demand Date"); // Base Unit
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      QtyATP := ROUND(QtyATP / "Qty. per Unit of Measure",0.00001);

      EXIT(QtyATP);
    END;

    PROCEDURE CalcEarliestShptDateAvailable@9() : Date;
    VAR
      Item@1000 : Record 27;
    BEGIN
      IF "No." <> '' THEN BEGIN
        Item.GET("No.");
        IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
          EXIT;
      END;
      EXIT(OrderPlanningMgt.CalcATPEarliestDate("No.","Variant Code","Location Code","Demand Date","Quantity (Base)"));
    END;

    PROCEDURE CalcSubstitionAvailable@11() : Boolean;
    BEGIN
      EXIT(OrderPlanningMgt.SubstitutionPossible(Rec));
    END;

    PROCEDURE CalcPlan@13();
    VAR
      ReqLine@1001 : Record 246;
    BEGIN
      RESET;
      DELETEALL;

      CLEAR(OrderPlanningMgt);
      CASE DemandOrderFilter OF
        DemandOrderFilter::"Sales Demand":
          OrderPlanningMgt.SetSalesOrder(SalesHeader);
        DemandOrderFilter::"Production Demand":
          OrderPlanningMgt.SetProdOrder(ProdOrder);
      END;
      OrderPlanningMgt.GetOrdersToPlan(ReqLine);

      IF ISSERVICETIER THEN
        ExpandAll
      ELSE BEGIN
        InitTempTable;
        ExpandOrderToPlan;
      END;
      SetRecFilters;

      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE UpdateSupplyFrom@17();
    BEGIN
      "Supply FromEditable" := "Replenishment System" <> "Replenishment System"::"Prod. Order";
    END;

    LOCAL PROCEDURE DemandOrderFilterOnAfterValida@19021326();
    BEGIN
      CurrPage.SAVERECORD;
      SetRecFilters;
    END;

    LOCAL PROCEDURE ReplenishmentSystemOnAfterVali@19026301();
    BEGIN
      UpdateSupplyFrom;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      IF ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.") THEN BEGIN
        Rec := ReqLine;
        MODIFY
      END ELSE
        IF GET("Worksheet Template Name","Journal Batch Name","Line No.") THEN
          DELETE;

      UpdateSupplyFrom;
    END;

    LOCAL PROCEDURE ActualExpansionStatusOnPush@19057112();
    BEGIN
      ToggleExpandCollapse;
    END;

    LOCAL PROCEDURE StatusTextOnFormat@19078586(VAR Text@19010365 : Text[1024]);
    VAR
      SalesHeader@1003 : Record 36;
      ProdOrder@1002 : Record 5405;
    BEGIN
      IF "Demand Line No." = 0 THEN
        CASE "Demand Type" OF
          DATABASE::"Prod. Order Component":
            BEGIN
              ProdOrder.Status := Status;
              Text := FORMAT(ProdOrder.Status);
            END;
          DATABASE::"Sales Line":
            BEGIN
              SalesHeader.Status := Status;
              Text := FORMAT(SalesHeader.Status);
            END;
        END
      ELSE
        StatusHideValue := TRUE;
    END;

    LOCAL PROCEDURE DemandTypeTextOnFormat@19059433(VAR Text@19044954 : Text[1024]);
    BEGIN
      IF "Demand Line No." = 0 THEN
        CASE "Demand Type" OF
          DATABASE::"Sales Line":
            Text := Text001;
          DATABASE::"Prod. Order Component":
            Text := Text002;
        END
      ELSE
        "Demand TypeHideValue" := TRUE;

      IF (Level = 0) OR (ActualExpansionStatus < 2) THEN
        "Demand TypeEmphasize" := TRUE;
    END;

    LOCAL PROCEDURE DemandSubtypeTextOnFormat@19071287(VAR Text@19000137 : Text[1024]);
    VAR
      SalesHeader@1001 : Record 36;
      ProdOrder@1000 : Record 5405;
    BEGIN
      IF "Demand Type" = DATABASE::"Prod. Order Component" THEN BEGIN
        ProdOrder.Status := "Demand Subtype";
        Text := FORMAT(ProdOrder.Status);
      END;
      IF "Demand Type" = DATABASE::"Sales Line" THEN BEGIN
        SalesHeader."Document Type" := "Demand Subtype";
        Text := FORMAT(SalesHeader."Document Type");
      END;
    END;

    LOCAL PROCEDURE DemandOrderNoOnFormat@19021785();
    BEGIN
      IF "Demand Line No." <> 0 THEN
        "Demand Order No.HideValue" := TRUE;

      SetExpansionStatus;
      IF (Level = 0) OR (ActualExpansionStatus < 2) THEN
        "Demand Order No.Emphasize" := TRUE;
    END;

    LOCAL PROCEDURE DescriptionOnFormat@19023855();
    BEGIN
      DescriptionIndent := Level + "Planning Level";

      IF (Level = 0) OR (ActualExpansionStatus < 2) THEN
        DescriptionEmphasize := TRUE;
    END;

    LOCAL PROCEDURE DemandQuantityOnFormat@19031262();
    BEGIN
      IF Level = 0 THEN
        "Demand QuantityHideValue" := TRUE;
    END;

    LOCAL PROCEDURE DemandQtyAvailableOnFormat@19015974();
    BEGIN
      IF Level = 0 THEN
        "Demand Qty. AvailableHideValue" := TRUE;
    END;

    LOCAL PROCEDURE ReplenishmentSystemOnFormat@19008444();
    BEGIN
      IF "Replenishment System" = "Replenishment System"::" " THEN
        "Replenishment SystemHideValue" := TRUE;
    END;

    LOCAL PROCEDURE QuantityOnFormat@19071269();
    BEGIN
      IF Level = 0 THEN
        QuantityHideValue := TRUE;
    END;

    BEGIN
    END.
  }
}
