OBJECT Page 9233 G/L Balance by Dim. Matrix
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=G/L Balance by Dim. Matrix;
               ESP=Matriz saldo cuenta por dim.];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    PageType=List;
    OnInit=BEGIN
             Field32Visible := TRUE;
             Field31Visible := TRUE;
             Field30Visible := TRUE;
             Field29Visible := TRUE;
             Field28Visible := TRUE;
             Field27Visible := TRUE;
             Field26Visible := TRUE;
             Field25Visible := TRUE;
             Field24Visible := TRUE;
             Field23Visible := TRUE;
             Field22Visible := TRUE;
             Field21Visible := TRUE;
             Field20Visible := TRUE;
             Field19Visible := TRUE;
             Field18Visible := TRUE;
             Field17Visible := TRUE;
             Field16Visible := TRUE;
             Field15Visible := TRUE;
             Field14Visible := TRUE;
             Field13Visible := TRUE;
             Field12Visible := TRUE;
             Field11Visible := TRUE;
             Field10Visible := TRUE;
             Field9Visible := TRUE;
             Field8Visible := TRUE;
             Field7Visible := TRUE;
             Field6Visible := TRUE;
             Field5Visible := TRUE;
             Field4Visible := TRUE;
             Field3Visible := TRUE;
             Field2Visible := TRUE;
             Field1Visible := TRUE;
           END;

    OnOpenPage=BEGIN
                 GLAcc.SETPERMISSIONFILTER;
                 Code := '';

                 GLSetup.GET;

                 IF (LineDimCode = '') AND (ColumnDimCode = '') THEN BEGIN
                   LineDimCode := GLAcc.TABLECAPTION;
                   ColumnDimCode := Text001;
                 END;
                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);

                 CalculateClosingDateFilter;

                 MATRIX_NoOfMatrixColumns := ARRAYLEN(MATRIX_CellData);
                 FindRec(ColumnDimOption,MatrixRecord,'=');
                 SetColumnVisibility;
               END;

    OnFindRecord=BEGIN
                   EXIT(FindRec(LineDimOption,Rec,Which));
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(LineDimOption,Rec,Steps));
                 END;

    OnAfterGetRecord=VAR
                       MATRIX_CurrentColumnOrdinal@1148 : Integer;
                       MATRIX_Steps@1149 : Integer;
                     BEGIN
                       //IF CurrForm.TotalAmount.VISIBLE THEN
                         Amount := CalcAmount(FALSE);

                       CASE RoundingFactor OF
                         RoundingFactor::"1":
                           Amount := ROUND(Amount,1);
                         RoundingFactor::"1000":
                           Amount := ROUND(Amount / 1000,0.1);
                         RoundingFactor::"1000000":
                           Amount := ROUND(Amount / 1000000,0.1);
                       END;

                       MATRIX_CurrentColumnOrdinal := 0;
                       MatrixRecord.SETPOSITION(MATRIX_PrimKeyFirstCol);


                       IF MATRIX_OnFindRecord('=><') THEN BEGIN
                         MATRIX_CurrentColumnOrdinal := 1;
                         REPEAT
                           MATRIX_ColumnOrdinal := MATRIX_CurrentColumnOrdinal;
                           MATRIX_OnAfterGetRecord;
                           MATRIX_Steps := MATRIX_OnNextRecord(1);
                           MATRIX_CurrentColumnOrdinal := MATRIX_CurrentColumnOrdinal + MATRIX_Steps;
                         UNTIL (MATRIX_CurrentColumnOrdinal - MATRIX_Steps = MATRIX_NoOfMatrixColumns) OR (MATRIX_Steps = 0);
                         IF MATRIX_CurrentColumnOrdinal <> 1 THEN
                           MATRIX_OnNextRecord(1 - MATRIX_CurrentColumnOrdinal);
                       END
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 120 ;2   ;Field     ;
                SourceExpr=Code;
                OnLookup=BEGIN
                           LookUpCode(LineDimOption,LineDimCode,Code);
                         END;
                          }

    { 22  ;2   ;Field     ;
                SourceExpr=Name }

    { 24  ;2   ;Field     ;
                Name=TotalAmount;
                CaptionML=[ENU=Total Amount;
                           ESP=Importe total];
                BlankZero=Yes;
                SourceExpr=+Amount;
                OnDrillDown=BEGIN
                              DrillDown(FALSE);
                            END;
                             }

    { 1116;2   ;Field     ;
                Name=Field1;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[1];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[1];
                Visible=Field1Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(1);
                              DrillDown(TRUE);
                            END;
                             }

    { 1117;2   ;Field     ;
                Name=Field2;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[2];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[2];
                Visible=Field2Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(2);
                              DrillDown(TRUE);
                            END;
                             }

    { 1118;2   ;Field     ;
                Name=Field3;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[3];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[3];
                Visible=Field3Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(3);
                              DrillDown(TRUE);
                            END;
                             }

    { 1119;2   ;Field     ;
                Name=Field4;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[4];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[4];
                Visible=Field4Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(4);
                              DrillDown(TRUE);
                            END;
                             }

    { 1120;2   ;Field     ;
                Name=Field5;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[5];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[5];
                Visible=Field5Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(5);
                              DrillDown(TRUE);
                            END;
                             }

    { 1121;2   ;Field     ;
                Name=Field6;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[6];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[6];
                Visible=Field6Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(6);
                              DrillDown(TRUE);
                            END;
                             }

    { 1122;2   ;Field     ;
                Name=Field7;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[7];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[7];
                Visible=Field7Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(7);
                              DrillDown(TRUE);
                            END;
                             }

    { 1123;2   ;Field     ;
                Name=Field8;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[8];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[8];
                Visible=Field8Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(8);
                              DrillDown(TRUE);
                            END;
                             }

    { 1124;2   ;Field     ;
                Name=Field9;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[9];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[9];
                Visible=Field9Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(9);
                              DrillDown(TRUE);
                            END;
                             }

    { 1125;2   ;Field     ;
                Name=Field10;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[10];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[10];
                Visible=Field10Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(10);
                              DrillDown(TRUE);
                            END;
                             }

    { 1126;2   ;Field     ;
                Name=Field11;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[11];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[11];
                Visible=Field11Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(11);
                              DrillDown(TRUE);
                            END;
                             }

    { 1127;2   ;Field     ;
                Name=Field12;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[12];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[12];
                Visible=Field12Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(12);
                              DrillDown(TRUE);
                            END;
                             }

    { 1128;2   ;Field     ;
                Name=Field13;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[13];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[13];
                Visible=Field13Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(13);
                              DrillDown(TRUE);
                            END;
                             }

    { 1129;2   ;Field     ;
                Name=Field14;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[14];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[14];
                Visible=Field14Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(14);
                              DrillDown(TRUE);
                            END;
                             }

    { 1130;2   ;Field     ;
                Name=Field15;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[15];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[15];
                Visible=Field15Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(15);
                              DrillDown(TRUE);
                            END;
                             }

    { 1131;2   ;Field     ;
                Name=Field16;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[16];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[16];
                Visible=Field16Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(16);
                              DrillDown(TRUE);
                            END;
                             }

    { 1132;2   ;Field     ;
                Name=Field17;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[17];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[17];
                Visible=Field17Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(17);
                              DrillDown(TRUE);
                            END;
                             }

    { 1133;2   ;Field     ;
                Name=Field18;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[18];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[18];
                Visible=Field18Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(18);
                              DrillDown(TRUE);
                            END;
                             }

    { 1134;2   ;Field     ;
                Name=Field19;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[19];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[19];
                Visible=Field19Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(19);
                              DrillDown(TRUE);
                            END;
                             }

    { 1135;2   ;Field     ;
                Name=Field20;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[20];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[20];
                Visible=Field20Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(20);
                              DrillDown(TRUE);
                            END;
                             }

    { 1136;2   ;Field     ;
                Name=Field21;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[21];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[21];
                Visible=Field21Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(21);
                              DrillDown(TRUE);
                            END;
                             }

    { 1137;2   ;Field     ;
                Name=Field22;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[22];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[22];
                Visible=Field22Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(22);
                              DrillDown(TRUE);
                            END;
                             }

    { 1138;2   ;Field     ;
                Name=Field23;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[23];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[23];
                Visible=Field23Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(23);
                              DrillDown(TRUE);
                            END;
                             }

    { 1139;2   ;Field     ;
                Name=Field24;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[24];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[24];
                Visible=Field24Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(24);
                              DrillDown(TRUE);
                            END;
                             }

    { 1140;2   ;Field     ;
                Name=Field25;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[25];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[25];
                Visible=Field25Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(25);
                              DrillDown(TRUE);
                            END;
                             }

    { 1141;2   ;Field     ;
                Name=Field26;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[26];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[26];
                Visible=Field26Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(26);
                              DrillDown(TRUE);
                            END;
                             }

    { 1142;2   ;Field     ;
                Name=Field27;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[27];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[27];
                Visible=Field27Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(27);
                              DrillDown(TRUE);
                            END;
                             }

    { 1143;2   ;Field     ;
                Name=Field28;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[28];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[28];
                Visible=Field28Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(28);
                              DrillDown(TRUE);
                            END;
                             }

    { 1144;2   ;Field     ;
                Name=Field29;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[29];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[29];
                Visible=Field29Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(29);
                              DrillDown(TRUE);
                            END;
                             }

    { 1145;2   ;Field     ;
                Name=Field30;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[30];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[30];
                Visible=Field30Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(30);
                              DrillDown(TRUE);
                            END;
                             }

    { 1146;2   ;Field     ;
                Name=Field31;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[31];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[31];
                Visible=Field31Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(31);
                              DrillDown(TRUE);
                            END;
                             }

    { 1147;2   ;Field     ;
                Name=Field32;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[32];
                AutoFormatType=1;
                CaptionClass='3,' + MATRIX_ColumnCaptions[32];
                Visible=Field32Visible;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(32);
                              DrillDown(TRUE);
                            END;
                             }

  }
  CODE
  {
    VAR
      Text000@1185 : TextConst 'ENU=<Sign><Integer Thousand><Decimals,3>;ESP=<Sign><Integer Thousand><Decimals,3>';
      Text001@1186 : TextConst 'ENU=Period;ESP=Periodo';
      GLSetup@1189 : Record 98;
      GLAcc@1190 : Record 15;
      DimCodAmtBuf@1191 : TEMPORARY Record 375;
      CurrExchRate@1192 : Record 330;
      LineDimOption@1193 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      ColumnDimOption@1194 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      LineDimCode@1195 : Text[30];
      ColumnDimCode@1196 : Text[30];
      PeriodType@1197 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      AmountType@1198 : 'Net Change,Balance at Date';
      RoundingFactor@1199 : 'None,1,1000,1000000';
      AmountField@1200 : 'Amount,Debit Amount,Credit Amount';
      ShowActualBudg@1201 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%';
      ShowInAddCurr@1202 : Boolean;
      ClosingEntryFilter@1203 : 'Include,Exclude';
      ShowColumnName@1204 : Boolean;
      DateFilter@1205 : Text[250];
      InternalDateFilter@1206 : Text[250];
      ExcludeClosingDateFilter@1207 : Text[250];
      GLAccFilter@1208 : Code[250];
      BudgetFilter@1209 : Code[250];
      BusUnitFilter@1210 : Code[250];
      GlobalDim1Filter@1211 : Code[250];
      GlobalDim2Filter@1212 : Code[250];
      MatrixHeader@1213 : Text[50];
      MatrixAmount@1214 : Decimal;
      PeriodInitialized@1215 : Boolean;
      CurrExchDate@1216 : Date;
      MatrixRecord@1217 : Record 367;
      MATRIX_ColumnOrdinal@1218 : Integer;
      MATRIX_NoOfMatrixColumns@1219 : Integer;
      MATRIX_CellData@1220 : ARRAY [32] OF Decimal;
      MATRIX_ColumnCaptions@1000 : ARRAY [32] OF Text[1024];
      MATRIX_PrimKeyFirstCol@1002 : Text[1024];
      MATRIX_CurrSetLength@1001 : Integer;
      Field1Visible@19069335 : Boolean INDATASET;
      Field2Visible@19014807 : Boolean INDATASET;
      Field3Visible@19062679 : Boolean INDATASET;
      Field4Visible@19074839 : Boolean INDATASET;
      Field5Visible@19043543 : Boolean INDATASET;
      Field6Visible@19067287 : Boolean INDATASET;
      Field7Visible@19067863 : Boolean INDATASET;
      Field8Visible@19039959 : Boolean INDATASET;
      Field9Visible@19008663 : Boolean INDATASET;
      Field10Visible@19006501 : Boolean INDATASET;
      Field11Visible@19052468 : Boolean INDATASET;
      Field12Visible@19013039 : Boolean INDATASET;
      Field13Visible@19079726 : Boolean INDATASET;
      Field14Visible@19077225 : Boolean INDATASET;
      Field15Visible@19035896 : Boolean INDATASET;
      Field16Visible@19003763 : Boolean INDATASET;
      Field17Visible@19049730 : Boolean INDATASET;
      Field18Visible@19007213 : Boolean INDATASET;
      Field19Visible@19053180 : Boolean INDATASET;
      Field20Visible@19014629 : Boolean INDATASET;
      Field21Visible@19060596 : Boolean INDATASET;
      Field22Visible@19021167 : Boolean INDATASET;
      Field23Visible@19047854 : Boolean INDATASET;
      Field24Visible@19045353 : Boolean INDATASET;
      Field25Visible@19004024 : Boolean INDATASET;
      Field26Visible@19011891 : Boolean INDATASET;
      Field27Visible@19057858 : Boolean INDATASET;
      Field28Visible@19015341 : Boolean INDATASET;
      Field29Visible@19061308 : Boolean INDATASET;
      Field30Visible@19010597 : Boolean INDATASET;
      Field31Visible@19056564 : Boolean INDATASET;
      Field32Visible@19017135 : Boolean INDATASET;

    LOCAL PROCEDURE DimCodeToOption@1221(DimCode@1000 : Text[30]) : Integer;
    VAR
      BusUnit@1222 : Record 220;
    BEGIN
      CASE DimCode OF
        '':
          EXIT(-1);
        GLAcc.TABLECAPTION:
          EXIT(0);
        Text001:
          EXIT(1);
        BusUnit.TABLECAPTION:
          EXIT(2);
        GLSetup."Global Dimension 1 Code":
          EXIT(3);
        GLSetup."Global Dimension 2 Code":
          EXIT(4);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@1223(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[1024]) : Boolean;
    VAR
      GLAcc@1224 : Record 15;
      BusUnit@1225 : Record 220;
      Period@1226 : Record 2000000007;
      DimVal@1227 : Record 349;
      PeriodFormMgt@1228 : Codeunit 359;
      Found@1229 : Boolean;
    BEGIN
      GLAcc.SETPERMISSIONFILTER;
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF GLAccFilter <> '' THEN
              GLAcc.SETFILTER("No.",GLAccFilter);
            Found := GLAcc.FIND(Which);
            IF Found THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            EVALUATE(Period."Period Start",DimCodeBuf.Code);
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF NOT PeriodInitialized AND (InternalDateFilter <> '') THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            Found := BusUnit.FIND(Which);
            IF Found THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Dimension 1":
          BEGIN
            IF GlobalDim1Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim1Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2":
          BEGIN
            IF GlobalDim2Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim2Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@1230(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer) : Integer;
    VAR
      GLAcc@1231 : Record 15;
      BusUnit@1232 : Record 220;
      Period@1233 : Record 2000000007;
      DimVal@1234 : Record 349;
      PeriodFormMgt@1235 : Codeunit 359;
      ResultSteps@1236 : Integer;
    BEGIN
      GLAcc.SETPERMISSIONFILTER;
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF GLAccFilter <> '' THEN
              GLAcc.SETFILTER("No.",GLAccFilter);
            ResultSteps := GLAcc.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            IF ResultSteps <> 0 THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            ResultSteps := BusUnit.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Dimension 1":
          BEGIN
            IF GlobalDim1Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim1Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2":
          BEGIN
            IF GlobalDim2Filter <> '' THEN
              DimVal.SETFILTER(Code,GlobalDim2Filter);
            DimVal."Dimension Code" := GLSetup."Global Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyGLAccToBuf@1237(VAR TheGLAcc@1000 : Record 15;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheGLAcc."No.";
        Name := TheGLAcc.Name;
        Totaling := TheGLAcc.Totaling;
        Indentation := TheGLAcc.Indentation;
        "Show in Bold" := TheGLAcc."Account Type" <> TheGLAcc."Account Type"::Posting;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@1238(VAR ThePeriod@1000 : Record 2000000007;VAR TheDimCodeBuf@1001 : Record 367);
    VAR
      Period2@1239 : Record 2000000007;
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          "Period End" := CLOSINGDATE(ThePeriod."Period End")
        ELSE
          "Period End" := ThePeriod."Period End";
        IF DateFilter <> '' THEN BEGIN
          Period2.SETFILTER("Period End",DateFilter);
          IF Period2.GETRANGEMAX("Period End") < "Period End" THEN
            "Period End" := Period2.GETRANGEMAX("Period End");
        END;
        Name := ThePeriod."Period Name";
      END;
    END;

    LOCAL PROCEDURE CopyBusUnitToBuf@1240(VAR TheBusUnit@1000 : Record 220;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheBusUnit.Code;
        Name := TheBusUnit.Name;
      END;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@1241(VAR TheDimVal@1000 : Record 349;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
      END;
    END;

    LOCAL PROCEDURE FindPeriod@1242(SearchText@1000 : Code[10]);
    VAR
      Period@1243 : Record 2000000007;
      PeriodFormMgt@1244 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Period.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Period,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Period,PeriodType::Day);
        Period.SETRANGE("Period Start");
      END;
      IF PeriodFormMgt.FindDate(SearchText,Period,PeriodType) THEN
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          Period."Period End" := CLOSINGDATE(Period."Period End");
      IF AmountType = AmountType::"Net Change" THEN BEGIN
        GLAcc.SETRANGE("Date Filter",Period."Period Start",Period."Period End");
        IF GLAcc.GETRANGEMIN("Date Filter") = GLAcc.GETRANGEMAX("Date Filter") THEN
          GLAcc.SETRANGE("Date Filter",GLAcc.GETRANGEMIN("Date Filter"));
      END ELSE
        GLAcc.SETRANGE("Date Filter",0D,Period."Period End");
      InternalDateFilter := GLAcc.GETFILTER("Date Filter");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN
        DateFilter := InternalDateFilter;
      DimCodAmtBuf.DELETEALL;
    END;

    LOCAL PROCEDURE CalculateClosingDateFilter@1245();
    VAR
      AccountingPeriod@1246 : Record 50;
      FirstRec@1247 : Boolean;
    BEGIN
      IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
        ExcludeClosingDateFilter := ''
      ELSE BEGIN
        AccountingPeriod.SETCURRENTKEY("New Fiscal Year");
        AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
        FirstRec := TRUE;
        IF AccountingPeriod.FIND('-') THEN
          REPEAT
            IF FirstRec THEN
              ExcludeClosingDateFilter :=
                STRSUBSTNO('<>%1',CLOSINGDATE(AccountingPeriod."Starting Date" - 1))
            ELSE
              ExcludeClosingDateFilter :=
                ExcludeClosingDateFilter + STRSUBSTNO('&<>%1',CLOSINGDATE(AccountingPeriod."Starting Date" - 1));
            FirstRec := FALSE;
          UNTIL AccountingPeriod.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FormatAmount@1248(VAR Text@1000 : Text[250]);
    VAR
      Amount@1249 : Decimal;
    BEGIN
      IF Text = '' THEN
        EXIT;
      EVALUATE(Amount,Text);
      IF ShowActualBudg IN [ShowActualBudg::"Variance%",ShowActualBudg::"Index%"] THEN BEGIN
        IF Amount = 0 THEN
          Text := ''
        ELSE
          Text := FORMAT(ROUND(Amount,0.1),0,Text000);
        EXIT;
      END;
      IF RoundingFactor = RoundingFactor::None THEN
        EXIT;
      CASE RoundingFactor OF
        RoundingFactor::"1":
          Amount := ROUND(Amount,1);
        RoundingFactor::"1000":
          Amount := ROUND(Amount / 1000,0.1);
        RoundingFactor::"1000000":
          Amount := ROUND(Amount / 1000000,0.1);
      END;
      IF Amount = 0 THEN
        Text := ''
      ELSE
        CASE RoundingFactor OF
          RoundingFactor::"1":
            Text := FORMAT(Amount);
          RoundingFactor::"1000",RoundingFactor::"1000000":
            Text := FORMAT(Amount,0,Text000);
        END;
    END;

    LOCAL PROCEDURE GetDimSelection@1250(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      DimSelection@1251 : Form 568;
    BEGIN
      DimSelection.InsertDimSelBuf(FALSE,GLAcc.TABLECAPTION,GLAcc.TABLECAPTION);
      DimSelection.InsertDimSelBuf(FALSE,Text001,Text001);
      IF GLSetup."Global Dimension 1 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,GLSetup."Global Dimension 1 Code",'');
      IF GLSetup."Global Dimension 2 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,GLSetup."Global Dimension 2 Code",'');
      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode)
      ELSE
        EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE LookUpCode@1252(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2';DimCode@1001 : Text[30];Code@1002 : Text[30]);
    VAR
      GLAcc@1253 : Record 15;
      BusUnit@1254 : Record 220;
      DimVal@1255 : Record 349;
      DimValList@1256 : Form 560;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc.GET(Code);
            FORM.RUNMODAL(FORM::"G/L Account List",GLAcc);
          END;
        DimOption::Period: ;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.GET(Code);
            FORM.RUNMODAL(FORM::"Business Unit List",BusUnit);
          END;
        DimOption::"Dimension 1",DimOption::"Dimension 2":
          BEGIN
            DimVal.SETRANGE("Dimension Code",DimCode);
            DimVal.GET(DimCode,Code);
            DimValList.SETTABLEVIEW(DimVal);
            DimValList.SETRECORD(DimVal);
            DimValList.RUNMODAL;
          END;
      END;
    END;

    LOCAL PROCEDURE SetCommonFilters@1260(VAR TheGLAcc@1000 : Record 15);
    VAR
      DateFilter2@1261 : Text[1024];
    BEGIN
      CLEAR(TheGLAcc);
      WITH TheGLAcc DO BEGIN
        IF DateFilter = '' THEN
          DateFilter2 := ExcludeClosingDateFilter
        ELSE BEGIN
          IF AmountType = AmountType::"Net Change" THEN BEGIN
            DateFilter2 := DateFilter;
          END ELSE BEGIN
            SETFILTER("Date Filter",DateFilter);
            DateFilter2 := STRSUBSTNO('..%1',GETRANGEMAX("Date Filter"));
          END;
          IF ExcludeClosingDateFilter <> '' THEN
            DateFilter2 := DateFilter2 + '&' + ExcludeClosingDateFilter;
        END;
        RESET;
        IF GLAccFilter <> '' THEN
          SETFILTER("No.",GLAccFilter)
        ELSE
          SETRANGE("No.");
        IF GLAccFilter <> '' THEN
          Totaling := GLAccFilter
        ELSE
          IF "No." = '' THEN
            Totaling := STRSUBSTNO('>%1','''''');
        SETFILTER("Date Filter",DateFilter2);
        IF BusUnitFilter <> '' THEN
          SETFILTER("Business Unit Filter",BusUnitFilter);
        IF GlobalDim1Filter <> '' THEN
          SETFILTER("Global Dimension 1 Filter",GlobalDim1Filter);
        IF GlobalDim2Filter <> '' THEN
          SETFILTER("Global Dimension 2 Filter",GlobalDim2Filter);
        IF BudgetFilter = '' THEN
          SETRANGE("Budget Filter")
        ELSE
          SETFILTER("Budget Filter",BudgetFilter);
      END;
    END;

    LOCAL PROCEDURE SetDimFilters@1262(VAR TheGLAcc@1000 : Record 15;LineOrColumn@1001 : 'Line,Column');
    VAR
      DimOption@1263 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      DimCodeBuf@1264 : Record 367;
    BEGIN
      IF LineOrColumn = LineOrColumn::Line THEN BEGIN
        DimCodeBuf := Rec;
        DimOption := LineDimOption;
      END ELSE BEGIN
        DimCodeBuf := MatrixRecord;
        DimOption := ColumnDimOption;
      END;
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            TheGLAcc."No." := DimCodeBuf.Code;
            TheGLAcc.Totaling := DimCodeBuf.Totaling;
          END;
        DimOption::Period:
          BEGIN
            IF AmountType = AmountType::"Net Change" THEN
              TheGLAcc.SETRANGE(
                "Date Filter",DimCodeBuf."Period Start",DimCodeBuf."Period End")
            ELSE
              TheGLAcc.SETRANGE("Date Filter",0D,DimCodeBuf."Period End");
            IF (ClosingEntryFilter = ClosingEntryFilter::Exclude) AND (ExcludeClosingDateFilter <> '') THEN
              TheGLAcc.SETFILTER(
                "Date Filter",TheGLAcc.GETFILTER("Date Filter") +
                '&' + ExcludeClosingDateFilter);
          END;
        DimOption::"Business Unit":
          TheGLAcc.SETRANGE("Business Unit Filter",DimCodeBuf.Code);
        DimOption::"Dimension 1":
          IF DimCodeBuf.Totaling = '' THEN
            TheGLAcc.SETRANGE("Global Dimension 1 Filter",DimCodeBuf.Code)
          ELSE
            TheGLAcc.SETFILTER("Global Dimension 1 Filter",DimCodeBuf.Totaling);
        DimOption::"Dimension 2":
          IF DimCodeBuf.Totaling = '' THEN
            TheGLAcc.SETRANGE("Global Dimension 2 Filter",DimCodeBuf.Code)
          ELSE
            TheGLAcc.SETFILTER("Global Dimension 2 Filter",DimCodeBuf.Totaling);
      END;
    END;

    LOCAL PROCEDURE DrillDown@1265(SetColFilter@1000 : Boolean);
    VAR
      GLEntry@1266 : Record 17;
      GLBudgetEntry@1267 : Record 96;
    BEGIN
      SetCommonFilters(GLAcc);
      SetDimFilters(GLAcc,0);
      IF SetColFilter THEN
        SetDimFilters(GLAcc,1);
      IF ShowActualBudg = ShowActualBudg::"Actual Amounts" THEN BEGIN
        WITH GLEntry DO BEGIN
          IF GLAcc."No." <> '' THEN
            SETRANGE("G/L Account No.",GLAcc."No.");
          IF GLAcc.Totaling <> '' THEN
            SETFILTER("G/L Account No.",GLAcc.Totaling);
          GLAcc.COPYFILTER("Date Filter","Posting Date");
          GLAcc.COPYFILTER("Global Dimension 1 Filter","Global Dimension 1 Code");
          GLAcc.COPYFILTER("Global Dimension 2 Filter","Global Dimension 2 Code");
          GLAcc.COPYFILTER("Business Unit Filter","Business Unit Code");
          IF (GETFILTER("Global Dimension 1 Code") <> '') OR (GETFILTER("Global Dimension 2 Code") <> '') OR
             (GETFILTER("Business Unit Code") <> '')
          THEN
            SETCURRENTKEY("G/L Account No.","Business Unit Code","Global Dimension 1 Code")
          ELSE
            SETCURRENTKEY("G/L Account No.","Posting Date");
        END;
        FORM.RUN(FORM::"General Ledger Entries",GLEntry);
      END;
      IF ShowActualBudg = ShowActualBudg::"Budgeted Amounts" THEN BEGIN
        WITH GLBudgetEntry DO BEGIN
          GLAcc.COPYFILTER("Budget Filter","Budget Name");
          IF GLAcc."No." <> '' THEN
            SETRANGE("G/L Account No.",GLAcc."No.");
          IF GLAcc.Totaling <> '' THEN
            SETFILTER("G/L Account No.",GLAcc.Totaling);
          GLAcc.COPYFILTER("Date Filter",Date);
          GLAcc.COPYFILTER("Global Dimension 1 Filter","Global Dimension 1 Code");
          GLAcc.COPYFILTER("Global Dimension 2 Filter","Global Dimension 2 Code");
          GLAcc.COPYFILTER("Business Unit Filter","Business Unit Code");
          IF (GETFILTER("Global Dimension 1 Code") <> '') OR (GETFILTER("Global Dimension 2 Code") <> '') OR
             (GETFILTER("Business Unit Code") <> '')
          THEN
            SETCURRENTKEY("Budget Name","G/L Account No.","Business Unit Code","Global Dimension 1 Code")
          ELSE
            SETCURRENTKEY("Budget Name","G/L Account No.",Date);
        END;
        FORM.RUN(FORM::"G/L Budget Entries",GLBudgetEntry);
      END;
    END;

    LOCAL PROCEDURE CalcAmount@1272(SetColFilter@1000 : Boolean) : Decimal;
    VAR
      Amount@1273 : Decimal;
      ColumnCode@1274 : Code[20];
    BEGIN
      IF SetColFilter THEN
        ColumnCode := MatrixRecord.Code
      ELSE
        ColumnCode := '';
      IF DimCodAmtBuf.GET(Code,ColumnCode) THEN
        EXIT(DimCodAmtBuf.Amount);
      GLAcc.RESET;
      SetCommonFilters(GLAcc);
      SetDimFilters(GLAcc,0);
      IF SetColFilter THEN
        SetDimFilters(GLAcc,1);
      CASE ShowActualBudg OF
        ShowActualBudg::"Actual Amounts":
          Amount := CalcActualAmount;
        ShowActualBudg::"Budgeted Amounts":
          Amount := CalcBudgAmount;
        ShowActualBudg::Variance:
          Amount := CalcActualAmount - CalcBudgAmount;
        ShowActualBudg::"Variance%":
          BEGIN
            Amount := CalcBudgAmount;
            IF Amount <> 0 THEN
              Amount := ROUND(100 * (CalcActualAmount - Amount) / Amount);
          END;
        ShowActualBudg::"Index%":
          BEGIN
            Amount := CalcBudgAmount;
            IF Amount <> 0 THEN
              Amount := ROUND(100 * CalcActualAmount / Amount);
          END;
      END;
      DimCodAmtBuf."Line Code" := Code;
      DimCodAmtBuf."Column Code" := ColumnCode;
      DimCodAmtBuf.Amount := Amount;
      DimCodAmtBuf.INSERT;
      EXIT(Amount);
    END;

    LOCAL PROCEDURE CalcActualAmount@1275() : Decimal;
    VAR
      Amount@1276 : Decimal;
    BEGIN
      IF ShowInAddCurr THEN
        CASE AmountField OF
          AmountField::Amount:
            BEGIN
              GLAcc.CALCFIELDS("Additional-Currency Net Change");
              Amount := GLAcc."Additional-Currency Net Change";
            END;
          AmountField::"Debit Amount":
            BEGIN
              GLAcc.CALCFIELDS("Add.-Currency Debit Amount");
              Amount := GLAcc."Add.-Currency Debit Amount";
            END;
          AmountField::"Credit Amount":
            BEGIN
              GLAcc.CALCFIELDS("Add.-Currency Credit Amount");
              Amount := GLAcc."Add.-Currency Credit Amount";
            END;
        END
      ELSE
        CASE AmountField OF
          AmountField::Amount:
            BEGIN
              GLAcc.CALCFIELDS("Net Change");
              Amount := GLAcc."Net Change";
            END;
          AmountField::"Debit Amount":
            BEGIN
              GLAcc.CALCFIELDS("Debit Amount");
              Amount := GLAcc."Debit Amount";
            END;
          AmountField::"Credit Amount":
            BEGIN
              GLAcc.CALCFIELDS("Credit Amount");
              Amount := GLAcc."Credit Amount";
            END;
        END;
      EXIT(Amount);
    END;

    LOCAL PROCEDURE CalcBudgAmount@1277() : Decimal;
    VAR
      Amount@1278 : Decimal;
    BEGIN
      IF BudgetFilter = '' THEN
        GLAcc.SETRANGE("Budget Filter")
      ELSE
        GLAcc.SETFILTER("Budget Filter",BudgetFilter);
      GLAcc.CALCFIELDS("Budgeted Amount");
      Amount := GLAcc."Budgeted Amount";
      CASE AmountField OF
        AmountField::"Debit Amount":
          IF Amount < 0 THEN
            Amount := 0;
        AmountField::"Credit Amount":
          IF Amount > 0 THEN
            Amount := 0
          ELSE
            Amount := -Amount;
      END;
      IF (Amount <> 0) AND ShowInAddCurr THEN BEGIN
        IF GLAcc.GETFILTER("Date Filter") = '' THEN
          CurrExchDate := WORKDATE
        ELSE
          CurrExchDate := GLAcc.GETRANGEMIN("Date Filter");
        Amount :=
          CurrExchRate.ExchangeAmtLCYToFCY(
            CurrExchDate,GLSetup."Additional Reporting Currency",Amount,
            CurrExchRate.ExchangeRate(CurrExchDate,GLSetup."Additional Reporting Currency"));
      END;
      EXIT(Amount);
    END;

    LOCAL PROCEDURE MATRIX_UpdateMatrixRecord@1279(MATRIX_NewColumnOrdinal@1110 : Integer);
    VAR
      MATRIX_CurrentColumnOrdinal@1280 : Integer;
    BEGIN
      MATRIX_ColumnOrdinal := MATRIX_NewColumnOrdinal;
      MatrixRecord.SETPOSITION(MATRIX_PrimKeyFirstCol);
      MATRIX_OnFindRecord('=');
      MATRIX_CurrentColumnOrdinal := 1;
      IF MATRIX_ColumnOrdinal <> 1 THEN
        MATRIX_OnNextRecord(MATRIX_ColumnOrdinal - 1);
    END;

    LOCAL PROCEDURE MATRIX_OnFindRecord@1281(Which@1112 : Text[1024]) : Boolean;
    BEGIN
      EXIT(FindRec(ColumnDimOption,MatrixRecord,Which));
    END;

    LOCAL PROCEDURE MATRIX_OnNextRecord@1282(Steps@1113 : Integer) : Integer;
    BEGIN
      EXIT(NextRec(ColumnDimOption,MatrixRecord,Steps));
    END;

    LOCAL PROCEDURE MATRIX_OnAfterGetRecord@1283();
    BEGIN
      IF ShowColumnName THEN
        MatrixHeader := MatrixRecord.Name
      ELSE
        MatrixHeader := MatrixRecord.Code;
      MatrixAmount := CalcAmount(TRUE);

      CASE RoundingFactor OF
        RoundingFactor::"1":
          MatrixAmount := ROUND(MatrixAmount,1);
        RoundingFactor::"1000":
          MatrixAmount := ROUND(MatrixAmount / 1000,0.1);
        RoundingFactor::"1000000":
          MatrixAmount := ROUND(MatrixAmount / 1000000,0.1);
      END;

      MATRIX_CellData[MATRIX_ColumnOrdinal] := MatrixAmount;
    END;

    PROCEDURE Load@1(NewLineDimCode@1000 : Text[30];NewColumnDimCode@1001 : Text[30];NewPeriodType@1002 : Option;NewDateFilter@1003 : Text[250];NewGLAccFilter@1004 : Code[250];NewBusUnitFilter@1017 : Code[250];NewBudgetFilter@1005 : Code[250];NewGlobalDim1Filter@1006 : Code[250];NewGlobalDim2Filter@1007 : Code[250];NewShowActualBudg@1008 : Option;NewAmountField@1009 : Option;NewClosingEntryFilter@1010 : Option;NewRoundingFactor@1011 : Option;NewShowInAddCurr@1012 : Boolean;NewMATRIX_ColumnCaptions@1013 : ARRAY [32] OF Text[1024];NewPrimKeyFirstCol@1014 : Text[1024];NewAmountType@1015 : 'Net Change,Balance at Date';CurrSetLength@1016 : Integer);
    BEGIN
      FindPeriod('');
      LineDimCode := NewLineDimCode;
      ColumnDimCode := NewColumnDimCode;
      PeriodType := NewPeriodType;
      DateFilter := NewDateFilter;
      PeriodInitialized := TRUE;
      GLAccFilter := NewGLAccFilter;
      BusUnitFilter := NewBusUnitFilter;
      BudgetFilter := NewBudgetFilter;
      GlobalDim1Filter := NewGlobalDim1Filter;
      GlobalDim2Filter := NewGlobalDim2Filter;
      ShowActualBudg := NewShowActualBudg;
      AmountField := NewAmountField;
      ClosingEntryFilter := NewClosingEntryFilter;
      RoundingFactor := NewRoundingFactor;
      ShowInAddCurr := NewShowInAddCurr;
      COPYARRAY(MATRIX_ColumnCaptions,NewMATRIX_ColumnCaptions,1);
      MATRIX_PrimKeyFirstCol := NewPrimKeyFirstCol;
      AmountType := NewAmountType;
      MATRIX_CurrSetLength := CurrSetLength;
    END;

    PROCEDURE SetColumnVisibility@2();
    BEGIN
      Field1Visible := MATRIX_CurrSetLength >= 1;
      Field2Visible := MATRIX_CurrSetLength >= 2;
      Field3Visible := MATRIX_CurrSetLength >= 3;
      Field4Visible := MATRIX_CurrSetLength >= 4;
      Field5Visible := MATRIX_CurrSetLength >= 5;
      Field6Visible := MATRIX_CurrSetLength >= 6;
      Field7Visible := MATRIX_CurrSetLength >= 7;
      Field8Visible := MATRIX_CurrSetLength >= 8;
      Field9Visible := MATRIX_CurrSetLength >= 9;
      Field10Visible := MATRIX_CurrSetLength >= 10;
      Field11Visible := MATRIX_CurrSetLength >= 11;
      Field12Visible := MATRIX_CurrSetLength >= 12;
      Field13Visible := MATRIX_CurrSetLength >= 13;
      Field14Visible := MATRIX_CurrSetLength >= 14;
      Field15Visible := MATRIX_CurrSetLength >= 15;
      Field16Visible := MATRIX_CurrSetLength >= 16;
      Field17Visible := MATRIX_CurrSetLength >= 17;
      Field18Visible := MATRIX_CurrSetLength >= 18;
      Field19Visible := MATRIX_CurrSetLength >= 19;
      Field20Visible := MATRIX_CurrSetLength >= 20;
      Field21Visible := MATRIX_CurrSetLength >= 21;
      Field22Visible := MATRIX_CurrSetLength >= 22;
      Field23Visible := MATRIX_CurrSetLength >= 23;
      Field24Visible := MATRIX_CurrSetLength >= 24;
      Field25Visible := MATRIX_CurrSetLength >= 25;
      Field26Visible := MATRIX_CurrSetLength >= 26;
      Field27Visible := MATRIX_CurrSetLength >= 27;
      Field28Visible := MATRIX_CurrSetLength >= 28;
      Field29Visible := MATRIX_CurrSetLength >= 29;
      Field30Visible := MATRIX_CurrSetLength >= 30;
      Field31Visible := MATRIX_CurrSetLength >= 31;
      Field32Visible := MATRIX_CurrSetLength >= 32;
    END;

    BEGIN
    END.
  }
}
