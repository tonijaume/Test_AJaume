OBJECT Page 634 Chart of Accounts Overview
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00,NAVES4.00.02;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Chart of Accounts Overview;
               ESP=Introducci¢n al plan de cuentas];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table15;
    PageType=List;
    SourceTableTemporary=Yes;
    OnOpenPage=BEGIN
                 IF ISSERVICETIER THEN
                   ExpandAll
                 ELSE
                   InitTempTable;
               END;

    OnAfterGetRecord=BEGIN
                       NameIndent := 0;
                       IF IsExpanded(Rec) THEN
                         ActualExpansionStatus := 1
                       ELSE
                         IF HasChildren(Rec) THEN
                           ActualExpansionStatus := 0
                         ELSE
                           ActualExpansionStatus := 2;
                       NoOnFormat;
                       NameOnFormat;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                IndentationColumnName=NameIndent;
                IndentationControls=Name;
                ShowAsTree=Yes;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="No.";
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr=Name;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Income/Balance";
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Account Type";
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Net Change" }

    { 12  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Balance at Date";
                Visible=FALSE }

    { 23  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr=Balance }

    { 25  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Additional-Currency Net Change";
                Visible=FALSE }

    { 27  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Add.-Currency Balance at Date";
                Visible=FALSE }

    { 29  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Additional-Currency Balance";
                Visible=FALSE }

    { 21  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Budgeted Amount";
                Visible=FALSE;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      ActualExpansionStatus@1000 : Integer;
      "No.Emphasize"@19074284 : Boolean INDATASET;
      NameEmphasize@19018670 : Boolean INDATASET;
      NameIndent@19079073 : Integer INDATASET;

    LOCAL PROCEDURE InitTempTable@4();
    BEGIN
      CopyGLAccToTemp(TRUE);
    END;

    LOCAL PROCEDURE ExpandAll@12();
    BEGIN
      CopyGLAccToTemp(FALSE);
    END;

    LOCAL PROCEDURE CopyGLAccToTemp@3(OnlyRoot@1000 : Boolean);
    VAR
      GLAcc@1002 : Record 15;
    BEGIN
      RESET;
      DELETEALL;
      SETCURRENTKEY("No.");

      IF OnlyRoot THEN
        GLAcc.SETRANGE(Indentation,0);
      GLAcc.SETFILTER("Account Type",'<>%1',GLAcc."Account Type"::"4");
      IF GLAcc.FIND('-') THEN
        REPEAT
          Rec := GLAcc;
          IF GLAcc."Account Type" = GLAcc."Account Type"::"3" THEN
             Totaling := GetEndTotal(GLAcc);
          INSERT;
        UNTIL GLAcc.NEXT = 0;

      IF FINDFIRST THEN;
    END;

    LOCAL PROCEDURE GetEndTotal@7(VAR GLAcc@1000 : Record 15) : Text[250];
    VAR
      GLAcc2@1001 : Record 15;
    BEGIN
      GLAcc2.SETFILTER("No.",'>%1',GLAcc."No.");
      GLAcc2.SETRANGE(Indentation,GLAcc.Indentation);
      GLAcc2.SETRANGE("Account Type",GLAcc2."Account Type"::"4");
      IF GLAcc2.FIND('-') THEN
        EXIT(GLAcc2.Totaling)
      ELSE
        EXIT('');
    END;

    LOCAL PROCEDURE HasChildren@19(ActualGLAcc@1000 : Record 15) : Boolean;
    VAR
      GLAcc2@1001 : Record 15;
    BEGIN
      GLAcc2 := ActualGLAcc;
      IF GLAcc2.NEXT = 0 THEN
        EXIT(FALSE)
      ELSE
        EXIT(GLAcc2.Indentation > ActualGLAcc.Indentation);
    END;

    LOCAL PROCEDURE IsExpanded@20(ActualGLAcc@1000 : Record 15) : Boolean;
    VAR
      xGLAcc@1001 : Record 15;
      Found@1002 : Boolean;
    BEGIN
      xGLAcc := Rec;
      Rec := ActualGLAcc;
      Found := (NEXT <> 0);
      IF Found THEN
        Found := (Indentation > ActualGLAcc.Indentation);
      Rec := xGLAcc;
      EXIT(Found);
    END;

    LOCAL PROCEDURE ToggleExpandCollapse@1();
    VAR
      GLAcc@1000 : Record 15;
      xGLAcc@1001 : Record 15;
    BEGIN
      xGLAcc := Rec;
      IF ActualExpansionStatus = 0 THEN BEGIN // Has children, but not expanded
        GLAcc.SETFILTER("No.",'>%1',"No.");
        GLAcc.SETRANGE(Indentation,Indentation,Indentation + 1);
        GLAcc.SETFILTER("Account Type",'<>%1',GLAcc."Account Type"::"4");
        GLAcc := Rec;
        IF GLAcc.NEXT <> 0 THEN
          REPEAT
            IF GLAcc.Indentation > xGLAcc.Indentation THEN BEGIN
              Rec := GLAcc;
              IF GLAcc."Account Type" = GLAcc."Account Type"::"3" THEN
                 Totaling := GetEndTotal(GLAcc);
              IF INSERT THEN;
            END;
          UNTIL (GLAcc.NEXT = 0) OR (GLAcc.Indentation = xGLAcc.Indentation);
      END ELSE
        IF ActualExpansionStatus = 1 THEN BEGIN // Has children and is already expanded
          WHILE (NEXT <> 0) AND (Indentation > xGLAcc.Indentation) DO
            DELETE;
        END;
      Rec := xGLAcc;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ActualExpansionStatusOnPush@19057112();
    BEGIN
      ToggleExpandCollapse;
    END;

    LOCAL PROCEDURE NoOnFormat@19031395();
    BEGIN
      "No.Emphasize" := "Account Type" <> "Account Type"::Posting;
    END;

    LOCAL PROCEDURE NameOnFormat@19039177();
    BEGIN
      NameIndent := Indentation;
      NameEmphasize := "Account Type" <> "Account Type"::Posting;
    END;

    BEGIN
    END.
  }
}
