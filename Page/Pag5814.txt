OBJECT Page 5814 Item Charge Assignment (Sales)
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Item Charge Assignment (Sales);
               ESP=Asignaci¢n cargo prod. (ventas)];
    InsertAllowed=No;
    SourceTable=Table5809;
    DataCaptionExpr=DataCaption;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    PageType=Worksheet;
    AutoSplitKey=Yes;
    RefreshOnActivate=Yes;
    OnOpenPage=BEGIN
                 FILTERGROUP(2);
                 SETRANGE("Document Type",SalesLine2."Document Type");
                 SETRANGE("Document No.",SalesLine2."Document No.");
                 SETRANGE("Document Line No.",SalesLine2."Line No.");
                 SETRANGE("Item Charge No.",SalesLine2."No.");
                 FILTERGROUP(0);
               END;

    OnAfterGetRecord=BEGIN
                       UpdateQty;
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  OnAfterGetCurrRecord;
                END;

    OnDeleteRecord=BEGIN
                     IF "Document Type" = "Applies-to Doc. Type" THEN BEGIN
                       SalesLine2.TESTFIELD("Shipment No.",'');
                       SalesLine2.TESTFIELD("Return Receipt No.",'');
                     END;
                   END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 2       ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones] }
      { 20      ;2   ;Action    ;
                      CaptionML=[ENU=Get &Shipment Lines;
                                 ESP=&Traer l¡neas alb. venta];
                      OnAction=VAR
                                 ItemChargeAssgntSales@1001 : Record 5809;
                                 ShipmentLines@1002 : Form 5824;
                               BEGIN
                                 ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
                                 ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
                                 ItemChargeAssgntSales.SETRANGE("Document Line No.","Document Line No.");

                                 ShipmentLines.SETTABLEVIEW(SalesShptLine);
                                 IF ItemChargeAssgntSales.FIND('+') THEN
                                   ShipmentLines.InitializeSales(ItemChargeAssgntSales,SalesLine2."Sell-to Customer No.",UnitCost)
                                 ELSE
                                   ShipmentLines.InitializeSales(Rec,SalesLine2."Sell-to Customer No.",UnitCost);

                                 ShipmentLines.LOOKUPMODE(TRUE);
                                 ShipmentLines.RUNMODAL;
                               END;
                                }
      { 5       ;2   ;Action    ;
                      CaptionML=[ENU=Get &Return Receipt Lines;
                                 ESP=Traer l¡n. &recep. dev.];
                      OnAction=VAR
                                 ItemChargeAssgntSales@1001 : Record 5809;
                                 ReceiptLines@1002 : Form 6667;
                               BEGIN
                                 ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
                                 ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
                                 ItemChargeAssgntSales.SETRANGE("Document Line No.","Document Line No.");

                                 ReceiptLines.SETTABLEVIEW(ReturnRcptLine);
                                 IF ItemChargeAssgntSales.FIND('+') THEN
                                   ReceiptLines.InitializeSales(ItemChargeAssgntSales,SalesLine2."Sell-to Customer No.",UnitCost)
                                 ELSE
                                   ReceiptLines.InitializeSales(Rec,SalesLine2."Sell-to Customer No.",UnitCost);

                                 ReceiptLines.LOOKUPMODE(TRUE);
                                 ReceiptLines.RUNMODAL;
                               END;
                                }
      { 33      ;2   ;Action    ;
                      CaptionML=[ENU=Suggest Item &Charge Assignment;
                                 ESP=Sugerir asignaci¢n &cargo prod.];
                      OnAction=VAR
                                 AssignItemChargeSales@1001 : Codeunit 5807;
                               BEGIN
                                 AssignItemChargeSales.SuggestAssignment(SalesLine2,AssignableQty);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                SourceExpr="Applies-to Doc. Type";
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Applies-to Doc. No.";
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Applies-to Doc. Line No.";
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr="Item No.";
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                SourceExpr=Description }

    { 16  ;2   ;Field     ;
                SourceExpr="Qty. to Assign";
                OnValidate=BEGIN
                             IF SalesLine2.Quantity * "Qty. to Assign" < 0 THEN
                               ERROR(Text000,
                                 FIELDCAPTION("Qty. to Assign"),SalesLine2.FIELDCAPTION(Quantity));
                               QtytoAssignOnAfterValidate;
                           END;
                            }

    { 14  ;2   ;Field     ;
                SourceExpr="Qty. Assigned" }

    { 18  ;2   ;Field     ;
                SourceExpr="Amount to Assign";
                Editable=FALSE }

    { 36  ;2   ;Field     ;
                CaptionML=[ENU=Qty. to Ship (Base);
                           ESP=Cdad. a enviar (base)];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=QtyToShipBase;
                Editable=FALSE }

    { 38  ;2   ;Field     ;
                CaptionML=[ENU=Qty. Shipped (Base);
                           ESP=Cdad. enviada (base)];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=QtyShippedBase;
                Editable=FALSE }

    { 40  ;2   ;Field     ;
                CaptionML=[ENU=Return Qty. to Receive (Base);
                           ESP=Cantidad dev. a recibir (Base)];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=QtyToRetReceiveBase;
                Editable=FALSE }

    { 42  ;2   ;Field     ;
                CaptionML=[ENU=Return Qty. Received (Base);
                           ESP=Cantidad  dev. rec. (Base)];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=QtyRetReceivedBase;
                Editable=FALSE }

    { 22  ;1   ;Group      }

    { 1900669001;2;Group  ;
                GroupType=FixedLayout }

    { 1901991801;3;Group  ;
                CaptionML=[ENU=Assignable;
                           ESP=Asignable] }

    { 26  ;4   ;Field     ;
                CaptionML=[ENU=Total (Qty.);
                           ESP=Total (cdad.)];
                DecimalPlaces=0:5;
                SourceExpr=AssignableQty;
                Editable=FALSE }

    { 28  ;4   ;Field     ;
                CaptionML=[ENU=Total (Amount);
                           ESP=Total (Importe)];
                DecimalPlaces=0:5;
                SourceExpr=AssignableAmount;
                Editable=FALSE }

    { 1903099001;3;Group  ;
                CaptionML=[ENU=To Assign;
                           ESP=A asignar] }

    { 24  ;4   ;Field     ;
                CaptionML=[ENU=Qty. to Assign;
                           ESP=Cdad. a asignar];
                DecimalPlaces=0:5;
                SourceExpr=TotalQtyToAssign;
                Editable=FALSE }

    { 29  ;4   ;Field     ;
                CaptionML=[ENU=Amount to Assign;
                           ESP=Importe a asignar];
                DecimalPlaces=0:5;
                SourceExpr=TotalAmountToAssign;
                Editable=FALSE }

    { 1901313401;3;Group  ;
                CaptionML=[ENU=Rem. to Assign;
                           ESP=Pend. a asignar] }

    { 23  ;4   ;Field     ;
                CaptionML=[ENU=Rem. Qty. to Assign;
                           ESP=Cdad. pend. a asignar];
                DecimalPlaces=0:5;
                SourceExpr=RemQtyToAssign;
                Editable=FALSE }

    { 30  ;4   ;Field     ;
                CaptionML=[ENU=Rem. Amount to Assign;
                           ESP=Imp. pend. a asignar];
                DecimalPlaces=0:5;
                SourceExpr=RemAmountToAssign;
                Editable=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The sign of %1 must be the same as the sign of %2 of the item charge.;ESP=El signo de %1 debe ser el mismo que el signo de %2 del cargo prod.';
      SalesLine@1001 : Record 37;
      SalesLine2@1002 : Record 37;
      ReturnRcptLine@1003 : Record 6661;
      SalesShptLine@1004 : Record 111;
      AssignableQty@1005 : Decimal;
      TotalQtyToAssign@1006 : Decimal;
      RemQtyToAssign@1007 : Decimal;
      AssignableAmount@1008 : Decimal;
      TotalAmountToAssign@1009 : Decimal;
      RemAmountToAssign@1010 : Decimal;
      QtyToRetReceiveBase@1011 : Decimal;
      QtyRetReceivedBase@1012 : Decimal;
      QtyToShipBase@1013 : Decimal;
      QtyShippedBase@1014 : Decimal;
      UnitCost@1015 : Decimal;
      DataCaption@1016 : Text[250];

    PROCEDURE UpdateQtyAssgnt@2();
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      SalesLine2.CALCFIELDS("Qty. to Assign","Qty. Assigned");

      AssignableQty := SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced" -
        SalesLine2."Qty. Assigned";
      AssignableAmount := AssignableQty * UnitCost;

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETCURRENTKEY("Document Type","Document No.","Document Line No.");
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Document Line No.");
      ItemChargeAssgntSales.CALCSUMS("Qty. to Assign","Amount to Assign");
      TotalQtyToAssign := ItemChargeAssgntSales."Qty. to Assign";
      TotalAmountToAssign := ItemChargeAssgntSales."Amount to Assign";

      RemQtyToAssign := AssignableQty - TotalQtyToAssign;
      RemAmountToAssign := AssignableAmount - TotalAmountToAssign;
    END;

    LOCAL PROCEDURE UpdateQty@1();
    BEGIN
      CASE "Applies-to Doc. Type" OF
        "Applies-to Doc. Type"::Order,"Applies-to Doc. Type"::Invoice:
          BEGIN
            SalesLine.GET("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
            QtyToShipBase := SalesLine."Qty. to Ship (Base)";
            QtyShippedBase := SalesLine."Qty. Shipped (Base)";
            QtyToRetReceiveBase := 0;
            QtyRetReceivedBase := 0;
          END;
        "Applies-to Doc. Type"::"Return Order","Applies-to Doc. Type"::"Credit Memo":
          BEGIN
            SalesLine.GET("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
            QtyToRetReceiveBase := SalesLine."Return Qty. to Receive (Base)";
            QtyRetReceivedBase := SalesLine."Return Qty. Received (Base)";
            QtyToShipBase := 0;
            QtyShippedBase := 0;
          END;
        "Applies-to Doc. Type"::"Return Receipt":
          BEGIN
            ReturnRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
            QtyToRetReceiveBase := 0;
            QtyRetReceivedBase := ReturnRcptLine."Quantity (Base)";
            QtyToShipBase := 0;
            QtyShippedBase := 0;
          END;
        "Applies-to Doc. Type"::Shipment:
          BEGIN
            SalesShptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
            QtyToRetReceiveBase := 0;
            QtyRetReceivedBase := 0;
            QtyToShipBase := 0;
            QtyShippedBase := SalesShptLine."Quantity (Base)";
          END;
      END;
    END;

    PROCEDURE Initialize@3(NewSalesLine@1000 : Record 37;NewUnitCost@1001 : Decimal);
    BEGIN
      SalesLine2 := NewSalesLine;
      DataCaption := SalesLine2."No." + ' ' + SalesLine2.Description;
      UnitCost := NewUnitCost;
    END;

    LOCAL PROCEDURE QtytoAssignOnAfterValidate@19000177();
    BEGIN
      CurrPage.UPDATE(TRUE);
      UpdateQtyAssgnt;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      UpdateQtyAssgnt;
    END;

    BEGIN
    END.
  }
}
