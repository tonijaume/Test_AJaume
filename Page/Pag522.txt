OBJECT Page 522 View Applied Entries
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Application Worksheet;
               ESP=Hoja liquidaci¢n];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=Yes;
    SourceTable=Table32;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnInit=VAR
             t@1000 : Integer;
           BEGIN
             CurrPage.LOOKUPMODE:=NOT ShowApplied;
           END;

    OnOpenPage=VAR
                 t@1000 : Integer;
               BEGIN
                 Show;
               END;

    OnFindRecord=VAR
                   Found@1000 : Boolean;
                 BEGIN
                   EXIT(FIND(Which));
                 END;

    OnAfterGetRecord=BEGIN
                       GetApplQty;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 36      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ESP=&Movimiento] }
      { 37      ;2   ;Action    ;
                      ShortCutKey=May£s+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ESP=Dimensiones];
                      RunObject=Page 544;
                      RunFormLink=Table ID=CONST(32),
                                  Entry No.=FIELD(Entry No.);
                      Image=Dimensions }
      { 48      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=&Value Entries;
                                 ESP=Movs. &valor];
                      RunObject=Page 5802;
                      RunFormView=SORTING(Item Ledger Entry No.);
                      RunFormLink=Item Ledger Entry No.=FIELD(Entry No.);
                      Image=ValueLedger }
      { 38      ;2   ;Action    ;
                      CaptionML=[ENU=Reservation Entries;
                                 ESP=Movs. reserva];
                      Image=ReservationLedger;
                      OnAction=BEGIN
                                 ShowReservationEntries(TRUE);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1       ;1   ;Action    ;
                      CaptionML=[ENU=Re&move Application;
                                 ESP=Eli&minar liquidaci¢n];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 UnapplyRec();
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                SourceExpr="Posting Date" }

    { 5   ;2   ;Field     ;
                SourceExpr="Entry Type" }

    { 7   ;2   ;Field     ;
                SourceExpr="Document Type" }

    { 9   ;2   ;Field     ;
                SourceExpr="Document No." }

    { 11  ;2   ;Field     ;
                SourceExpr="Document Line No.";
                Visible=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Item No.";
                Visible=FALSE }

    { 19  ;2   ;Field     ;
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 21  ;2   ;Field     ;
                SourceExpr="Serial No.";
                Visible=FALSE }

    { 23  ;2   ;Field     ;
                SourceExpr="Lot No.";
                Visible=FALSE }

    { 25  ;2   ;Field     ;
                SourceExpr=Description;
                Visible=FALSE }

    { 27  ;2   ;Field     ;
                SourceExpr="Global Dimension 1 Code";
                Visible=FALSE }

    { 29  ;2   ;Field     ;
                SourceExpr="Global Dimension 2 Code";
                Visible=FALSE }

    { 31  ;2   ;Field     ;
                SourceExpr="Location Code";
                Visible=FALSE }

    { 33  ;2   ;Field     ;
                CaptionML=[ENU=Applied Quantity;
                           ESP=Cdad. liquidada];
                DecimalPlaces=0:5;
                SourceExpr=ApplQty }

    { 35  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ESP=Cantidad];
                DecimalPlaces=0:5;
                SourceExpr=Qty }

    { 40  ;2   ;Field     ;
                SourceExpr="Cost Amount (Actual)" }

    { 42  ;2   ;Field     ;
                CaptionML=[ENU=Unit Cost(LCY);
                           ESP=Coste unitario (DL)];
                SourceExpr=GetUnitCostLCY;
                Visible=FALSE }

    { 44  ;2   ;Field     ;
                SourceExpr="Invoiced Quantity";
                Visible=TRUE }

    { 46  ;2   ;Field     ;
                SourceExpr="Reserved Quantity" }

    { 49  ;2   ;Field     ;
                SourceExpr="Remaining Quantity";
                Visible=TRUE }

    { 1102601000;2;Field  ;
                CaptionML=[ENU=Quantity Available for Cost Applications;
                           ESP=Cantidad disponible para liquidaciones de coste];
                DecimalPlaces=0:5;
                SourceExpr=CostAvailable(Rec) }

    { 51  ;2   ;Field     ;
                CaptionML=[ENU=Available for Quantity Application;
                           ESP=Disponible para aplicaci¢n cantidad];
                DecimalPlaces=0:5;
                SourceExpr=QuantityAvailable(Rec) }

    { 53  ;2   ;Field     ;
                SourceExpr="Shipped Qty. Not Returned" }

    { 55  ;2   ;Field     ;
                SourceExpr=Open }

    { 57  ;2   ;Field     ;
                SourceExpr="Qty. per Unit of Measure";
                Visible=FALSE }

    { 59  ;2   ;Field     ;
                SourceExpr="Drop Shipment";
                Visible=FALSE }

    { 61  ;2   ;Field     ;
                SourceExpr="Applies-to Entry";
                Visible=FALSE }

    { 63  ;2   ;Field     ;
                SourceExpr="Applied Entry to Adjust";
                Visible=FALSE }

    { 65  ;2   ;Field     ;
                SourceExpr="Prod. Order No.";
                Visible=FALSE }

    { 67  ;2   ;Field     ;
                SourceExpr="Entry No." }

  }
  CODE
  {
    VAR
      AppliedRec@1001 : Record 32;
      ShowApplied@1002 : Boolean;
      ShowQuantity@1007 : Boolean;
      Apply@1003 : Codeunit 22;
      RecordToShow@1008 : Record 32;
      InventoryPeriod@1010 : Record 5814;
      InventoryOpenedFrom@1011 : Date;
      MaxToApply@1004 : Decimal;
      ApplQty@1005 : Decimal;
      Qty@1006 : Decimal;
      TotalApplied@1015 : Decimal;

    PROCEDURE SetRecordToShow@7(VAR RecordToSet@1000 : Record 32;VAR ApplyCodeunit@1001 : Codeunit 22;newShowApplied@1002 : Boolean);
    BEGIN
      RecordToShow.COPY(RecordToSet);
      Apply:=ApplyCodeunit;
      ShowApplied:=newShowApplied;
    END;

    LOCAL PROCEDURE Show@8();
    VAR
      ItemLedgEntry@1000 : Record 32;
      Apprec@1102601000 : Record 339;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        GET(RecordToShow."Entry No.");
        IF ("Entry Type" IN ["Entry Type"::Sale,"Entry Type"::Output]) AND Positive THEN
          ShowQuantity := FALSE
        ELSE
          ShowQuantity := TRUE;
        MaxToApply:=0;
        IF NOT ShowQuantity THEN BEGIN
      //    MaxToApply := Quantity - GetApplied;
          MaxToApply := Quantity + Apprec.Returned("Entry No.");
        END;
      END;
      SetMyView(RecordToShow,ShowApplied,ShowQuantity,MaxToApply);
    END;

    LOCAL PROCEDURE SetMyView@22(ItemLedgEntry@1000 : Record 32;ShowApplied@1002 : Boolean;ShowQuantity@1004 : Boolean;MaxToApply@1005 : Decimal);
    VAR
      ItemApplnEntry@1001 : Record 339;
      ItemLedgEntry2@1003 : Record 32;
    BEGIN
      InitView();
      CASE ShowQuantity OF
        TRUE: BEGIN
          CASE ShowApplied OF
            TRUE : ShowQuantityApplied(ItemLedgEntry);
            FALSE : BEGIN
              ShowQuantityOpen(ItemLedgEntry);
              ShowCostOpen(ItemLedgEntry,MaxToApply);
            END;
          END
        END;
        FALSE: BEGIN
          CASE ShowApplied OF
            TRUE : ShowCostApplied(ItemLedgEntry);
            FALSE : ShowCostOpen(ItemLedgEntry,MaxToApply);
          END
        END;
      END;
    END;

    LOCAL PROCEDURE InitView@23();
    BEGIN
      DELETEALL;
    END;

    LOCAL PROCEDURE ShowQuantityApplied@20(ItemLedgEntry@1000 : Record 32);
    VAR
      ItemApplnEntry@1002 : Record 339;
      ItemLedgEntry2@1001 : Record 32;
    BEGIN
      InitApplied();
      WITH ItemLedgEntry DO BEGIN
        IF Positive THEN BEGIN
          ItemApplnEntry.RESET;
          ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Inbound Item Entry No.","Entry No.");
          ItemApplnEntry.SETFILTER("Outbound Item Entry No.",'<>%1&<>%2',"Entry No.",0);
          IF ItemApplnEntry.FIND('-') THEN
            REPEAT
              InsertTempEntry(ItemApplnEntry."Outbound Item Entry No.",ItemApplnEntry.Quantity,TRUE);
            UNTIL ItemApplnEntry.NEXT = 0;
        END
      ELSE
      BEGIN
        ItemApplnEntry.RESET;
        ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
        ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Entry No.");
        ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
        IF ItemApplnEntry.FIND('-') THEN
          REPEAT
            InsertTempEntry(ItemApplnEntry."Inbound Item Entry No.",-ItemApplnEntry.Quantity,TRUE);
          UNTIL ItemApplnEntry.NEXT = 0;
         END
      END;
    END;

    LOCAL PROCEDURE ShowQuantityOpen@19(ItemLedgEntry@1000 : Record 32);
    VAR
      ItemApplnEntry@1002 : Record 339;
      ItemLedgEntry2@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO
        IF ItemLedgEntry."Remaining Quantity" <>0 THEN
          IF Positive THEN BEGIN
            ItemLedgEntry2.SETRANGE("Item No.","Item No.");
            ItemLedgEntry2.SETRANGE("Location Code" ,"Location Code");
            ItemLedgEntry2.SETRANGE(Positive,FALSE);
            ItemLedgEntry2.SETRANGE(Open,TRUE);
            IF ItemLedgEntry2.FIND('-') THEN
              REPEAT
                IF (QuantityAvailable(ItemLedgEntry2)<>0) AND
                NOT ItemApplnEntry.ExistsBetween("Entry No.",ItemLedgEntry2."Entry No.") THEN
                  InsertTempEntry(ItemLedgEntry2."Entry No.",0,TRUE);
             UNTIL ItemLedgEntry2.NEXT = 0;
          END ELSE
          BEGIN
            ItemLedgEntry2.SETRANGE("Item No.","Item No.");
            ItemLedgEntry2.SETRANGE("Location Code" ,"Location Code");
            ItemLedgEntry2.SETRANGE(Positive,TRUE);
            ItemLedgEntry2.SETRANGE(Open,TRUE);
            IF ItemLedgEntry2.FIND('-') THEN
              REPEAT
                IF (QuantityAvailable(ItemLedgEntry2)<>0) AND
                NOT ItemApplnEntry.ExistsBetween("Entry No.",ItemLedgEntry2."Entry No.")
                THEN
                  InsertTempEntry(ItemLedgEntry2."Entry No.",0,TRUE);
              UNTIL ItemLedgEntry2.NEXT = 0;
          END;
    END;

    LOCAL PROCEDURE ShowCostApplied@18(ItemLedgEntry@1000 : Record 32);
    VAR
      ItemApplnEntry@1002 : Record 339;
      ItemLedgEntry2@1001 : Record 32;
    BEGIN
      InitApplied();
      WITH ItemLedgEntry DO BEGIN
        IF Positive THEN BEGIN
          ItemApplnEntry.RESET;
          ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Inbound Item Entry No.","Entry No.");
          ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
          ItemApplnEntry.SETFILTER("Outbound Item Entry No.",'<>%1',0);
          ItemApplnEntry.SETRANGE("Cost Application",TRUE); // we want to show even average cost application
          IF ItemApplnEntry.FIND('-') THEN
            REPEAT
              InsertTempEntry(ItemApplnEntry."Outbound Item Entry No.",ItemApplnEntry.Quantity,FALSE);
            UNTIL ItemApplnEntry.NEXT = 0;
        END
      ELSE
      BEGIN
        ItemApplnEntry.RESET;
        ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
        ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Entry No.");
        ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',"Entry No.");
        ItemApplnEntry.SETRANGE("Cost Application",TRUE); // we want to show even average cost application
        IF ItemApplnEntry.FIND('-') THEN
          REPEAT
            InsertTempEntry(ItemApplnEntry."Inbound Item Entry No.",-ItemApplnEntry.Quantity,FALSE);
          UNTIL ItemApplnEntry.NEXT = 0;
         END
      END;
    END;

    LOCAL PROCEDURE ShowCostOpen@17(ItemLedgEntry@1000 : Record 32;MaxToApply@1003 : Decimal);
    VAR
      ItemApplnEntry@1002 : Record 339;
      ItemLedgEntry2@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        IF Positive THEN BEGIN
          ItemLedgEntry2.SETRANGE("Item No.","Item No.");
          ItemLedgEntry2.SETRANGE("Location Code","Location Code");
          ItemLedgEntry2.SETRANGE(Positive,FALSE);
          ItemLedgEntry2.SETFILTER("Shipped Qty. Not Returned",'<%1&>=%2',0,-MaxToApply);
          IF MaxToApply<>0 THEN
            ItemLedgEntry2.SETFILTER("Shipped Qty. Not Returned",'<=%1',-MaxToApply);
          IF ItemLedgEntry2.FIND('-') THEN
            REPEAT
              IF (CostAvailable(ItemLedgEntry2)<>0) AND
                NOT ItemApplnEntry.ExistsBetween("Entry No.",ItemLedgEntry2."Entry No.")
              THEN
                InsertTempEntry(ItemLedgEntry2."Entry No.",0,TRUE);
           UNTIL ItemLedgEntry2.NEXT = 0;
        END ELSE BEGIN
          ItemLedgEntry2.SETRANGE("Item No.","Item No.");
          ItemLedgEntry2.SETRANGE("Location Code","Location Code");
          ItemLedgEntry2.SETRANGE(Positive,TRUE);
          ItemLedgEntry2.SETFILTER("Shipped Qty. Not Returned",'<%1&>=%2',0,-MaxToApply);
          IF ItemLedgEntry2.FIND('-') THEN
            REPEAT
              IF (CostAvailable(ItemLedgEntry2)<>0) AND
                NOT ItemApplnEntry.ExistsBetween("Entry No.",ItemLedgEntry2."Entry No.")
                THEN
                InsertTempEntry(ItemLedgEntry2."Entry No.",0,TRUE);
            UNTIL ItemLedgEntry2.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE InsertTempEntry@21(EntryNo@1000 : Integer;AppliedQty@1001 : Decimal;ShowQuantity@1003 : Boolean);
    VAR
      ItemLedgEntry@1002 : Record 32;
    BEGIN
      ItemLedgEntry.GET(EntryNo);

      IF ShowQuantity THEN
        IF AppliedQty * ItemLedgEntry.Quantity < 0 THEN
          EXIT;

      IF NOT GET(EntryNo) THEN BEGIN
        RESET;
        Rec := ItemLedgEntry;
        CALCFIELDS("Reserved Quantity");
        Quantity := AppliedQty;
        INSERT;
      END ELSE BEGIN
        Quantity := Quantity + AppliedQty;
        MODIFY;
      END;

      TotalApplied:=TotalApplied + AppliedQty;
    END;

    LOCAL PROCEDURE InitApplied@13();
    BEGIN
      CLEAR(TotalApplied);
    END;

    LOCAL PROCEDURE GetApplied@14() : Decimal;
    BEGIN
      EXIT(TotalApplied);
    END;

    LOCAL PROCEDURE RemoveApplications@1(Inbound@1000 : Integer;OutBound@1001 : Integer);
    VAR
      Application@1003 : Record 339;
    BEGIN
      Application.SETCURRENTKEY("Inbound Item Entry No.",Application."Outbound Item Entry No.");
      Application.SETRANGE("Inbound Item Entry No.",Inbound);
      Application.SETRANGE("Outbound Item Entry No.",OutBound);
      IF Application.FIND('-') THEN REPEAT
        Apply.UnApply(Application);
      UNTIL Application.NEXT = 0;
    END;

    LOCAL PROCEDURE AutoReapply@6();
    BEGIN
      Apply.RedoApplications;
      Apply.CostAdjust;
    END;

    LOCAL PROCEDURE UnapplyRec@3();
    VAR
      LoopRec@1000 : Record 32;
      Applyrec@1001 : Record 32;
      AppliedRec@1002 : Record 32;
    BEGIN
      Applyrec.GET(RecordToShow."Entry No.");
      CurrPage.SETSELECTIONFILTER(LoopRec);
      IF LoopRec.FINDFIRST THEN
      REPEAT
        AppliedRec := LoopRec;
        IF AppliedRec."Entry No." <> 0 THEN BEGIN
          IF Applyrec.Positive THEN
            RemoveApplications(Applyrec."Entry No.",AppliedRec."Entry No.")
          ELSE
            RemoveApplications(AppliedRec."Entry No.",Applyrec."Entry No.");
        END;
      UNTIL LoopRec.NEXT <= 0;
      Show;
    END;

    PROCEDURE ApplyRec@5();
    VAR
      Applyrec@1000 : Record 32;
      LoopRec@1001 : Record 32;
    BEGIN
      Applyrec.GET(RecordToShow."Entry No.");
      CurrPage.SETSELECTIONFILTER(LoopRec);
      IF LoopRec.FINDFIRST THEN REPEAT
        AppliedRec := LoopRec;
        IF AppliedRec."Entry No." <> 0 THEN BEGIN
          Apply.ReApply(Applyrec,AppliedRec."Entry No.");
        END;
      UNTIL LoopRec.NEXT <= 0;
      Show;
    END;

    LOCAL PROCEDURE GetApplQty@10();
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      ItemLedgEntry.GET("Entry No.");
      ApplQty := Quantity;
      Qty := ItemLedgEntry.Quantity;
    END;

    LOCAL PROCEDURE QuantityAvailable@11(ILE@1000 : Record 32) : Decimal;
    VAR
      Apprec@1102601000 : Record 339;
    BEGIN
      WITH ILE DO BEGIN
        CALCFIELDS("Reserved Quantity");
        EXIT("Remaining Quantity"-"Reserved Quantity");
      END;
    END;

    LOCAL PROCEDURE CostAvailable@1102601000(ILE@1000 : Record 32) : Decimal;
    VAR
      Apprec@1102601000 : Record 339;
    BEGIN
      WITH ILE DO BEGIN
        IF ILE."Shipped Qty. Not Returned"<>0 THEN
          EXIT(-ILE."Shipped Qty. Not Returned")
        ELSE
          EXIT("Remaining Quantity"+Apprec.Returned("Entry No."));
      END;
    END;

    BEGIN
    END.
  }
}
