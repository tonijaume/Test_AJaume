OBJECT Page 7158 Sales Analysis by Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sales Analysis by Dimensions;
               ESP=An lisis de ventas por dimensiones];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=CurrentItemAnalysisViewCode;
    PageType=Card;
    OnInit=BEGIN
             Dim3FilterEnable := TRUE;
             Dim2FilterEnable := TRUE;
             Dim1FilterEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 CurrentAnalysisArea := CurrentAnalysisArea::Sales;

                 GLSetup.GET;
                 NormalFormatString := Text001 + GLSetup."Amount Decimal Places" + Text002;

                 ItemAnalysisMgt.AnalysisViewSelection(
                   CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                   Dim1Filter,Dim2Filter,Dim3Filter);

                 IF (NewItemAnalysisCode <> '') AND (NewItemAnalysisCode <> CurrentItemAnalysisViewCode) THEN BEGIN
                   CurrentItemAnalysisViewCode := NewItemAnalysisCode;
                   AVBreakdownBuffer.DELETEALL;
                   ItemAnalysisMgt.CheckAnalysisView(CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView);
                   ItemAnalysisMgt.SetItemAnalysisView(
                     CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                     Dim1Filter,Dim2Filter,Dim3Filter);
                 END;

                 ItemAnalysisMgt.SetLineAndColDim(
                   ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                 UpdateFilterFields;

                 FindPeriod('');

                 NoOfColumns := 32;
                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
               END;

    OnFindRecord=BEGIN
                   EXIT(
                     ItemAnalysisMgt.FindRec(
                       ItemAnalysisView,LineDimOption,Rec,Which,
                       ItemFilter,LocationFilter,PeriodType,DateFilter,PeriodInitialized,InternalDateFilter,
                       Dim1Filter,Dim2Filter,Dim3Filter));
                 END;

    OnNextRecord=BEGIN
                   EXIT(
                     ItemAnalysisMgt.NextRec(
                       ItemAnalysisView,LineDimOption,Rec,Steps,
                       ItemFilter,LocationFilter,PeriodType,DateFilter,
                       Dim1Filter,Dim2Filter,Dim3Filter));
                 END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 12      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Actions;
                                 ESP=&Acciones] }
      { 15      ;2   ;Action    ;
                      CaptionML=[ENU=Reverse Lines and Columns;
                                 ESP=Invertir l¡neas y columnas];
                      OnAction=VAR
                                 TempDimCode@1001 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ItemAnalysisMgt.ValidateLineDimCode(
                                   ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 ItemAnalysisMgt.ValidateColumnDimCode(
                                   ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 16      ;1   ;Action    ;
                      CaptionML=[ENU=&Show Matrix;
                                 ESP=&Mostrar matriz];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CLEAR(SalesAnalysisByDimMatrix);
                                 CLEAR(DimCodeBufferColumn);
                                 ShowMatrix;
                               END;
                                }
      { 22      ;1   ;Action    ;
                      CaptionML=[ENU=Next Set;
                                 ESP=Conjunto siguiente];
                      ToolTipML=ENU=Next Set;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Next);
                               END;
                                }
      { 21      ;1   ;Action    ;
                      CaptionML=[ENU=Previous Set;
                                 ESP=Conjunto anterior];
                      ToolTipML=ENU=Previous Set;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Previous);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ESP=General] }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Analysis View Code;
                           ESP=C¢d. vista an lisis];
                SourceExpr=CurrentItemAnalysisViewCode;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                             ItemAnalysisMgt.CheckAnalysisView(CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView);
                               CurrentItemAnalysisViewCodeOnA;
                           END;

                OnLookup=BEGIN
                           ItemAnalysisMgt.LookupItemAnalysisView(
                             CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                             Dim1Filter,Dim2Filter,Dim3Filter);
                           ItemAnalysisMgt.SetLineAndColDim(
                             ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                           UpdateFilterFields;
                           CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Show as Lines;
                           ESP=Muestra como l¡neas];
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               ColumnDimCode := '';
                               ItemAnalysisMgt.ValidateColumnDimCode(
                                 ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             END;
                             ItemAnalysisMgt.ValidateLineDimCode(
                               ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             IF LineDimOption = LineDimOption::Period THEN
                               SETCURRENTKEY("Period Start")
                             ELSE
                               SETCURRENTKEY(Code);
                               LineDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := ItemAnalysisMgt.GetDimSelection(LineDimCode,ItemAnalysisView);
                           IF NewCode <> LineDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Show as Columns;
                           ESP=Muestra como columnas];
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               LineDimCode := '';
                               ItemAnalysisMgt.ValidateLineDimCode(
                                 ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             END;
                             ItemAnalysisMgt.ValidateColumnDimCode(
                               ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                               ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := ItemAnalysisMgt.GetDimSelection(ColumnDimCode,ItemAnalysisView);
                           IF NewCode <> ColumnDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 47  ;2   ;Field     ;
                CaptionML=[ENU=Show Value As;
                           ESP=Mostrar valor como];
                OptionCaptionML=[ENU=Sales Amount,COGS Amount,Quantity;
                                 ESP=Importe venta,Coste ventas,Cantidad];
                SourceExpr=ValueType;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                           END;
                            }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           ESP=Filtros] }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           ESP=Filtro fecha];
                SourceExpr=DateFilter;
                OnValidate=VAR
                             ApplicationManagement@1002 : Codeunit 1;
                           BEGIN
                             IF ApplicationManagement.MakeDateFilter(DateFilter) = 0 THEN;
                             ItemStatisticsBuffer.SETFILTER("Date Filter",DateFilter);
                             DateFilter := ItemStatisticsBuffer.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                               DateFilterOnAfterValidate;
                           END;
                            }

    { 38  ;2   ;Field     ;
                CaptionML=[ENU=Item Filter;
                           ESP=Filtro producto];
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                               ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           ItemList@1002 : Form 31;
                         BEGIN
                           ItemList.LOOKUPMODE(TRUE);
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := ItemList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=Location Filter;
                           ESP=Filtro almacn];
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             LocationFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           LocationList@1002 : Form 15;
                         BEGIN
                           LocationList.LOOKUPMODE(TRUE);
                           IF LocationList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := LocationList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Budget Filter;
                           ESP=Filtro presupuesto];
                SourceExpr=BudgetFilter;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                               BudgetFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           ItemBudgetName@1000 : Record 7132;
                         BEGIN
                           ItemBudgetName.FILTERGROUP := 2;
                           ItemBudgetName.SETRANGE("Analysis Area",CurrentAnalysisArea);
                           ItemBudgetName.FILTERGROUP := 0;
                           IF FORM.RUNMODAL(0,ItemBudgetName) = ACTION::LookupOK THEN BEGIN
                             Text := ItemBudgetName.Name;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 34  ;2   ;Field     ;
                Name=Dim1Filter;
                CaptionML=[ENU=Dimension 1 Filter;
                           ESP=Filtro dimensi¢n 1];
                SourceExpr=Dim1Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(1,ItemAnalysisView);
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                               Dim1FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 1 Code",Text));
                         END;
                          }

    { 30  ;2   ;Field     ;
                Name=Dim2Filter;
                CaptionML=[ENU=Dimension 2 Filter;
                           ESP=Filtro dimensi¢n 2];
                SourceExpr=Dim2Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(2,ItemAnalysisView);
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                               Dim2FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 2 Code",Text));
                         END;
                          }

    { 46  ;2   ;Field     ;
                Name=Dim3Filter;
                CaptionML=[ENU=Dimension 3 Filter;
                           ESP=Filtro dimensi¢n 3];
                SourceExpr=Dim3Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(3,ItemAnalysisView);
                Enabled=Dim3FilterEnable;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                               Dim3FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 3 Code",Text));
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=[ENU=Options;
                           ESP=Opciones] }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Show;
                           ESP=Mostrar];
                OptionCaptionML=[ENU=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%;
                                 ESP=Importes reales,Importes pptados.,Desviaci¢n,% Desviaci¢n,% Öndice];
                SourceExpr=ShowActualBudget;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                           END;
                            }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Rounding Factor;
                           ESP=Factor redondeo];
                OptionCaptionML=[ENU=None,1,1000,1000000;
                                 ESP=No,1,1000,1000000];
                SourceExpr=RoundingFactor }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Show Column Name;
                           ESP=Muestra nombre columna];
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             ShowColumnNameOnAfterValidate;
                           END;
                            }

    { 50  ;2   ;Field     ;
                CaptionML=[ENU=Show Opposite Sign;
                           ESP=Muestra signo opuesto];
                SourceExpr=ShowOppositeSign;
                MultiLine=Yes;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                           END;
                            }

    { 1906098301;1;Group  ;
                CaptionML=[ENU=Matrix Options;
                           ESP=Opciones matriz] }

    { 19  ;2   ;Field     ;
                Name=PeriodType;
                CaptionML=[ENU=View by;
                           ESP=Ver por];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 ESP=D¡a,Semana,Mes,Trimestre,A¤o,Periodo contable];
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=ColumnSet;
                CaptionML=[ENU=Column Set;
                           ESP=Conjunto de columnas];
                SourceExpr=MATRIX_CaptionRange;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      GLSetup@1025 : Record 98;
      ItemAnalysisView@1011 : Record 7152;
      ItemStatisticsBuffer@1002 : Record 5821;
      AVBreakdownBuffer@1028 : TEMPORARY Record 375;
      DimCodeBufferColumn@1034 : Record 367;
      SalesAnalysisByDimMatrix@1000 : Form 9227;
      ItemAnalysisMgt@1038 : Codeunit 7153;
      MatrixMgt@1031 : Codeunit 9200;
      CurrentItemAnalysisViewCode@1016 : Code[10];
      CurrentAnalysisArea@1001 : 'Sales,Purchase,Inventory';
      ValueType@1004 : 'Sales Amount,COGS Amount,Sales Quantity';
      ShowActualBudget@1027 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%';
      RoundingFactor@1005 : 'None,1,1000,1000000';
      LineDimOption@1007 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      ColumnDimOption@1006 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      PeriodType@1008 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      BudgetFilter@1026 : Code[250];
      LineDimCode@1020 : Text[30];
      ColumnDimCode@1019 : Text[30];
      InternalDateFilter@1014 : Text[30];
      NormalFormatString@1018 : Text[80];
      MatrixColumnCaptions@1022 : ARRAY [32] OF Text[1024];
      PeriodInitialized@1015 : Boolean;
      ShowColumnName@1029 : Boolean;
      ShowOppositeSign@1030 : Boolean;
      Text001@1024 : TextConst 'ENU=<Precision,;ESP=<Precision,';
      Text002@1023 : TextConst 'ENU=><Standard Format,0>;ESP=><Standard Format,0>';
      Steps@1033 : Integer;
      Dim1Filter1@1017 : Code[250];
      Dim2Filter1@1012 : Code[250];
      Dim3Filter1@1010 : Code[250];
      ItemFilter1@1009 : Code[250];
      LocationFilter1@1003 : Code[250];
      DateFilter1@1013 : Text[30];
      DateFilter@1021 : Text[30];
      Dim1Filter@1043 : Code[250];
      Dim2Filter@1042 : Code[250];
      Dim3Filter@1041 : Code[250];
      ItemFilter@1040 : Code[250];
      LocationFilter@1039 : Code[250];
      FirstColumn@1044 : Text[1024];
      LastColumn@1045 : Text[1024];
      FirstColumnDate@1035 : Date;
      LastColumnDate@1032 : Date;
      NoOfColumns@1047 : Integer;
      MATRIX_PKFirstRecInCurrSet@1046 : Text[100];
      MATRIX_CurrSetLength@1048 : Integer;
      MATRIX_CaptionRange@1049 : Text[100];
      MATRIX_PeriodRecords@1050 : ARRAY [32] OF Record 2000000007;
      MATRIX_SetWanted@1051 : 'Initial,Previous,Same,Next';
      NewItemAnalysisCode@1036 : Code[10];
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;
      Dim3FilterEnable@19011605 : Boolean INDATASET;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Item@1003 : Record 27;
      Calendar@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);
      Item.SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
      IF Item.GETRANGEMIN("Date Filter") = Item.GETRANGEMAX("Date Filter") THEN
        Item.SETRANGE("Date Filter",Item.GETRANGEMIN("Date Filter"));
      InternalDateFilter := Item.GETFILTER("Date Filter");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN
        DateFilter := InternalDateFilter;
      AVBreakdownBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateFilterFields@4();
    VAR
      ItemAnalysisViewFilter@1000 : Record 7153;
    BEGIN
      ItemFilter := ItemAnalysisView."Item Filter";
      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';

      Dim1FilterEnable := ItemAnalysisView."Dimension 1 Code" <> '';
      Dim2FilterEnable := ItemAnalysisView."Dimension 2 Code" <> '';
      Dim3FilterEnable := ItemAnalysisView."Dimension 3 Code" <> '';

      IF Dim1FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 1 Code")
        THEN
          Dim1Filter := ItemAnalysisViewFilter."Dimension Value Filter";

      IF Dim2FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 2 Code")
        THEN
          Dim2Filter := ItemAnalysisViewFilter."Dimension Value Filter";

      IF Dim3FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 3 Code")
        THEN
          Dim3Filter := ItemAnalysisViewFilter."Dimension Value Filter";
    END;

    PROCEDURE MATRIX_GenerateColumnCaptions@5(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      PeriodFormMgt@1000 : Codeunit 359;
    BEGIN
      CASE ColumnDimOption OF
        ColumnDimOption::Item:
          SetPointsItem(SetWanted);

        ColumnDimOption::Location:
          SetPointsLocation(SetWanted);
        ColumnDimOption::Period:
          BEGIN
            FirstColumn := '';
            LastColumn := '';
            MatrixMgt.GeneratePeriodMatrixData(SetWanted,NoOfColumns,ShowColumnName,PeriodType,DateFilter,MATRIX_PKFirstRecInCurrSet,
              MatrixColumnCaptions,MATRIX_CaptionRange,MATRIX_CurrSetLength,MATRIX_PeriodRecords);
            IF MATRIX_CurrSetLength > 0 THEN BEGIN
              FirstColumnDate := MATRIX_PeriodRecords[1]."Period Start";
              LastColumnDate := MATRIX_PeriodRecords[MATRIX_CurrSetLength]."Period Start";
              FirstColumn := MatrixColumnCaptions[1];
              LastColumn := FORMAT(MATRIX_PeriodRecords[MATRIX_CurrSetLength]."Period End");
            END;
          END;
        ColumnDimOption::"Dimension 1":
          SetPointsDim(ItemAnalysisView."Dimension 1 Code",Dim1Filter,SetWanted);
        ColumnDimOption::"Dimension 2":
          SetPointsDim(ItemAnalysisView."Dimension 2 Code",Dim2Filter,SetWanted);
        ColumnDimOption::"Dimension 3":
          SetPointsDim(ItemAnalysisView."Dimension 3 Code",Dim3Filter,SetWanted);
      END;
    END;

    LOCAL PROCEDURE SetPointsItem@22(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      Item@1013 : Record 27;
      RecRef@1000 : RecordRef;
      CurrentMatrixRecordOrdinal@1002 : Integer;
      CaptionFieldNo@1003 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      CurrentMatrixRecordOrdinal := 1;
      Item.SETFILTER("No.",ItemFilter);
      RecRef.GETTABLE(Item);
      RecRef.SETTABLE(Item);
      IF ShowColumnName THEN
        CaptionFieldNo := Item.FIELDNO(Description)
      ELSE
        CaptionFieldNo := Item.FIELDNO("No.");


      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE SetPointsLocation@6(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      Location@1013 : Record 14;
      RecRef@1000 : RecordRef;
      CaptionFieldNo@1002 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      Location.SETFILTER(Code,LocationFilter);
      RecRef.GETTABLE(Location);
      RecRef.SETTABLE(Location);
      IF ShowColumnName THEN
        CaptionFieldNo := Location.FIELDNO(Name)
      ELSE
        CaptionFieldNo := Location.FIELDNO(Code);

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE SetPointsDim@17(DimensionCode@1003 : Code[20];DimFilter@1002 : Code[250];SetWanted@1004 : 'Initial,Previous,Same,Next');
    VAR
      MatrixMgt@1000 : Codeunit 9200;
      DimVal@1001 : Record 349;
      RecRef@1005 : RecordRef;
      CaptionFieldNo@1006 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      DimVal.SETRANGE("Dimension Code",DimensionCode);
      IF DimFilter <> '' THEN
        DimVal.SETFILTER(Code,DimFilter);
      RecRef.GETTABLE(DimVal);
      RecRef.SETTABLE(DimVal);

      IF ShowColumnName THEN
        CaptionFieldNo := DimVal.FIELDNO(Name)
      ELSE
        CaptionFieldNo := DimVal.FIELDNO(Code);

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE FillColumnsItem@9(VAR MatrixColumnCaptions@1009 : ARRAY [32] OF Text[30]) : Boolean;
    VAR
      Item@1013 : Record 27;
      i@1004 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      i := 1;
      Item.SETFILTER("No.",ItemFilter1);

      IF Item.FIND('-') THEN BEGIN
        REPEAT
          IF ShowColumnName THEN
            MatrixColumnCaptions[i] := Item.Description
          ELSE
            MatrixColumnCaptions[i] := Item."No.";
          i := i + 1;
        UNTIL (Item.NEXT = 0) OR (i > ARRAYLEN(MatrixColumnCaptions));
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FillColumnsLocation@11(VAR MatrixColumnCaptions@1009 : ARRAY [32] OF Text[30]) : Boolean;
    VAR
      Location@1013 : Record 14;
      i@1004 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      i := 1;
      Location.SETFILTER(Code,LocationFilter1);

      IF Location.FIND('-') THEN BEGIN
        REPEAT
          IF ShowColumnName THEN
            MatrixColumnCaptions[i] := Location.Name
          ELSE
            MatrixColumnCaptions[i] := Location.Code;
          i := i + 1;
        UNTIL (Location.NEXT = 0) OR (i > ARRAYLEN(MatrixColumnCaptions));
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FillColumnsPeriod@12(VAR MatrixColumnCaptions@1001 : ARRAY [32] OF Text[30]) : Boolean;
    VAR
      Period@1008 : Record 2000000007;
      i@1003 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      i := 1;
      Period.SETRANGE("Period Type",PeriodType);
      Period.SETRANGE("Period Start",FirstColumnDate,LastColumnDate);
      IF Period.FIND('-') THEN BEGIN
        REPEAT
          IF ShowColumnName THEN
            MatrixColumnCaptions[i] := FORMAT(Period."Period Name")
          ELSE
            MatrixColumnCaptions[i] := FORMAT("Period Start");
          i := i + 1;
        UNTIL (Period.NEXT = 0) OR (i > ARRAYLEN(MatrixColumnCaptions));
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FillColumnsDim@16(VAR MatrixColumnCaptions@1001 : ARRAY [32] OF Text[30];DimFilter@1000 : Text[250];DimensionCode@1006 : Code[20]) : Boolean;
    VAR
      DimVal@1005 : Record 349;
      i@1003 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      ApplyColumnFilter;
      DimVal.SETRANGE("Dimension Code",DimensionCode);
      DimVal.SETFILTER(Code,DimFilter);
      i := 1;

      IF DimVal.FIND('-') THEN BEGIN
        REPEAT
          IF ShowColumnName THEN
            MatrixColumnCaptions[i] := DimVal.Name
          ELSE
            MatrixColumnCaptions[i] := DimVal.Code;
          i := i + 1;
        UNTIL (DimVal.NEXT = 0) OR (i > ARRAYLEN(MatrixColumnCaptions));
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ShowMatrix@10();
    BEGIN
      ApplyColumnFilter;
      IF ColumnDimOption = ColumnDimOption::Period THEN BEGIN
        FirstColumn := FORMAT(FirstColumnDate);
        LastColumn := FORMAT(LastColumnDate);
      END;

      SalesAnalysisByDimMatrix.LoadVariables(ItemAnalysisView,ItemStatisticsBuffer,
        CurrentItemAnalysisViewCode,CurrentAnalysisArea,
        LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,PeriodType,ValueType,
        RoundingFactor,ShowActualBudget,MatrixColumnCaptions,
        ShowOppositeSign,PeriodInitialized,FirstColumn,LastColumn,ShowColumnName,MATRIX_CurrSetLength);

      SalesAnalysisByDimMatrix.LoadFilters(ItemFilter,LocationFilter,Dim1Filter,Dim2Filter,Dim3Filter,
        DateFilter,BudgetFilter,InternalDateFilter);

      SalesAnalysisByDimMatrix.RUNMODAL;
    END;

    PROCEDURE ApplyColumnFilter@13();
    BEGIN
      CLEAR(ItemFilter1);
      CLEAR(LocationFilter1);
      CLEAR(DateFilter1);
      CLEAR(Dim1Filter1);
      CLEAR(Dim2Filter1);
      CLEAR(Dim3Filter1);

      CASE ColumnDimOption OF
        ColumnDimOption::Item:
          BEGIN
            IF ItemFilter <> '' THEN
              ItemFilter1 := ItemFilter + '&';
            ItemFilter1 := ItemFilter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
            LocationFilter1 := LocationFilter;
            DateFilter1 := DateFilter;
            Dim1Filter1 := Dim1Filter;
            Dim2Filter1 := Dim2Filter;
            Dim3Filter1 := Dim3Filter;
          END;
        ColumnDimOption::Location:
          BEGIN
            ItemFilter1 := ItemFilter;
            IF LocationFilter <> '' THEN
              LocationFilter1 := LocationFilter + '&';
            LocationFilter1 := LocationFilter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
            DateFilter1 := DateFilter;
            Dim1Filter1 := Dim1Filter;
            Dim2Filter1 := Dim2Filter;
            Dim3Filter1 := Dim3Filter;
          END;
        ColumnDimOption::Period:
          BEGIN
            ItemFilter1 := ItemFilter;
            LocationFilter1 := LocationFilter;
            DateFilter1 := DateFilter;
            Dim1Filter1 := Dim1Filter;
            Dim2Filter1 := Dim2Filter;
            Dim3Filter1 := Dim3Filter;
          END;
        ColumnDimOption::"Dimension 1":
          BEGIN
            ItemFilter1 := ItemFilter;
            LocationFilter1 := LocationFilter;
            DateFilter1 := DateFilter;
            IF Dim1Filter <> '' THEN
              Dim1Filter1 := Dim1Filter + '&';
            Dim1Filter1 := Dim1Filter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
            Dim2Filter1 := Dim2Filter;
            Dim3Filter1 := Dim3Filter;
          END;
        ColumnDimOption::"Dimension 2":
          BEGIN
            ItemFilter1 := ItemFilter;
            LocationFilter1 := LocationFilter;
            DateFilter1 := DateFilter;
            Dim1Filter1 := Dim1Filter;
            IF Dim2Filter <> '' THEN
              Dim2Filter1 := Dim2Filter + '&';
            Dim2Filter1 := Dim2Filter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
            Dim3Filter1 := Dim3Filter;
          END;
        ColumnDimOption::"Dimension 3":
          BEGIN
            ItemFilter1 := ItemFilter;
            LocationFilter1 := LocationFilter;
            DateFilter1 := DateFilter;
            Dim1Filter1 := Dim1Filter;
            Dim2Filter1 := Dim2Filter;
            IF Dim3Filter <> '' THEN
              Dim3Filter1 := Dim3Filter + '&';
            Dim3Filter1 := Dim3Filter1 + FORMAT(FirstColumn) + '..' + FORMAT(LastColumn);
          END;
      END;
    END;

    PROCEDURE ClearPoints@21();
    BEGIN
      CLEAR(FirstColumn);
      CLEAR(LastColumn);
    END;

    PROCEDURE SetCurrentAnalysisViewCode@7(NewAnalysisViewCode@1000 : Code[10]);
    BEGIN
      NewItemAnalysisCode := NewAnalysisViewCode;
    END;

    LOCAL PROCEDURE CurrentItemAnalysisViewCodeOnA@19045075();
    BEGIN
      ItemAnalysisMgt.SetItemAnalysisView(
        CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
        Dim1Filter,Dim2Filter,Dim3Filter);
      ItemAnalysisMgt.SetLineAndColDim(
        ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
      UpdateFilterFields;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE LineDimCodeOnAfterValidate@19031201();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE Dim2FilterOnAfterValidate@19005475();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE Dim1FilterOnAfterValidate@19005240();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE Dim3FilterOnAfterValidate@19064950();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      ItemStatisticsBuffer.SETFILTER("Item Filter",ItemFilter);
      CurrPage.UPDATE(FALSE);
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE LocationFilterOnAfterValidate@19070361();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      ItemStatisticsBuffer.SETFILTER("Location Filter",LocationFilter);

      CurrPage.UPDATE(FALSE);
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE BudgetFilterOnAfterValidate@19069837();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      ItemStatisticsBuffer.SETFILTER("Budget Filter",BudgetFilter);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShowColumnNameOnAfterValidate@19074585();
    BEGIN
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Same);
    END;

    BEGIN
    END.
  }
}
