OBJECT Page 10736 Customer/Vendor Warnings 349
{
  OBJECT-PROPERTIES
  {
    Date=31/10/11;
    Time=12:00:00;
    Version List=NAVES6.00.01,PS47880,RegF285416;
  }
  PROPERTIES
  {
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table10732;
    PageType=Worksheet;
    OnAfterGetRecord=BEGIN
                       IF (("Original Declaration Period" <> PrevPeriod) AND ("Original Declaration Period" <> '')) OR
                         (("Original Declaration FY" <> PrevFiscalYear) AND ("Original Declaration FY" <> ''))
                       THEN
                         Rectify("Original Declaration FY","Original Declaration Period");
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100019 ;1   ;Action    ;
                      CaptionML=[ENU=Process;
                                 ESP=Proceso];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 PreviousFYorPeriod@1100000 : Boolean;
                               BEGIN
                                 PreviousFYorPeriod := FALSE;
                                 SETRANGE("Include Correction",TRUE);
                                 IF FINDFIRST THEN BEGIN
                                   REPEAT
                                     IF ("Original Declaration FY" > PrevFiscalYear) OR
                                       (("Original Declaration FY" = PrevFiscalYear) AND ("Original Declaration Period" > PrevPeriod)) THEN
                                       PreviousFYorPeriod := TRUE;
                                   UNTIL NEXT = 0;
                                   IF PreviousFYorPeriod THEN
                                     ERROR(Text1100006);
                                 END;
                                 RESET;
                                 IF CONFIRM(
                                   STRSUBSTNO(Text1100007,FIELDCAPTION("Include Correction"),FIELDCAPTION("Original Declaration FY"),
                                   FIELDCAPTION("Original Declaration Period")),FALSE)
                                 THEN
                                   BEGIN
                                     IsProcess := TRUE;
                                     CurrPage.CLOSE;
                                   END ELSE
                                     MESSAGE(Text1100008);
                               END;
                                }
      { 1100022 ;1   ;Action    ;
                      CaptionML=[ENU=&Navigate;
                                 ESP=&Navegar];
                      Promoted=Yes;
                      Image=Navigate;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100000;1;Group     ;
                GroupType=Repeater }

    { 1100001;2;Field     ;
                SourceExpr="Include Correction" }

    { 1100023;2;Field     ;
                SourceExpr=Type }

    { 1100003;2;Field     ;
                SourceExpr="Customer/Vendor Name" }

    { 1100005;2;Field     ;
                SourceExpr="Customer/Vendor No." }

    { 1100007;2;Field     ;
                SourceExpr="Posting Date" }

    { 1100009;2;Field     ;
                SourceExpr="Document No." }

    { 1100026;2;Field     ;
                SourceExpr="EU 3-Party Trade";
                Visible=FALSE }

    { 1100028;2;Field     ;
                SourceExpr="EU Service";
                Visible=FALSE }

    { 1100002;2;Field     ;
                SourceExpr="Delivery Operation Code" }

    { 1100011;2;Field     ;
                SourceExpr="Previous Declared Amount" }

    { 1100013;2;Field     ;
                SourceExpr="Original Declaration FY";
                OnValidate=BEGIN
                             IF ("Original Declaration FY" <> PrevFiscalYear) AND ("Original Declaration FY" <> '') THEN BEGIN
                               Rectify("Original Declaration FY","Original Declaration Period");
                               "Original Declared Amount" := 0;
                             END ELSE
                               "Previous Declared Amount" := 0;
                           END;
                            }

    { 1100015;2;Field     ;
                SourceExpr="Original Declaration Period";
                OnValidate=BEGIN
                             IF ("Original Declaration Period" <> PrevPeriod) AND ("Original Declaration Period" <> '') THEN BEGIN
                               Rectify("Original Declaration FY","Original Declaration Period");
                               "Original Declared Amount" := 0;
                             END ELSE
                               "Previous Declared Amount" := 0;
                           END;
                            }

    { 1100017;2;Field     ;
                SourceExpr="Original Declared Amount";
                OnValidate=BEGIN
                             IF (("Original Declaration Period" <> PrevPeriod) AND ("Original Declaration Period" <> '')) OR
                               (("Original Declaration FY" <> PrevFiscalYear) AND ("Original Declaration FY" <> ''))
                             THEN BEGIN
                               IF ("Original Declared Amount" > "Previous Declared Amount") THEN
                                 ERROR(Text1100009);
                               Rectify("Original Declaration FY","Original Declaration Period");
                             END;
                           END;
                            }

  }
  CODE
  {
    VAR
      Cust@1100022 : Record 18;
      Cust2@1100021 : Record 18;
      Vendor@1100014 : Record 23;
      Vendor2@1100013 : Record 23;
      VATSales@1100012 : Record 254;
      VATPurch@1100010 : Record 254;
      Navigate@1100008 : Form 344;
      PrevFiscalYear@1100006 : Code[4];
      PrevPeriod@1100004 : Code[2];
      FromDate@1100002 : Date;
      ToDate@1100001 : Date;
      NumFiscalYear@1100000 : Integer;
      Text1100000@1100020 : TextConst 'ENU=Incorrect Fiscal Year.;ESP=A¤o fiscal incorrecto.';
      Text1100006@1100007 : TextConst 'ENU=At least one of the lines marked for correction has a Fiscal Year \and Period which is not previous to current declaration period. \Please correct them before proceeding with the file generation.;ESP=Al menos una de las l¡neas que se han marcado para su correcci¢n contiene un ejercicio \y periodo que no son anteriores al periodo del modelo actual. \Corr¡jalo antes de iniciar la generaci¢n de archivos.';
      Text1100007@1100023 : TextConst 'ENU=Only corrections marked as "%1", and with a valid %2 and %3 will be included in the file. \Are you sure you want to continue and generate the text file?.;ESP=énicamente las correcciones que se hayan marcado como "%1" y que tengan un %2 y %3 v lidos se incluir n en el archivo. \¨Confirma que desea continuar y generar el archivo de texto?.';
      Text1100008@1100024 : TextConst 'ENU=The process has been aborted. No file will be created.;ESP=Se ha cancelado el proceso. No se crear  el archivo.';
      IsProcess@1100005 : Boolean;
      Text1100009@1100003 : TextConst 'ENU="""Original declared Amount"" cannot be high than ""Previous Declared Amount"".";ESP="""Importe declarado inicial"" no puede ser mayor que ""Importe declarado anterior""."';

    PROCEDURE Initialize@1100000(RFFiscalYear@1100000 : Code[4];RFPeriod@1100001 : Code[2]);
    BEGIN
      PrevFiscalYear := RFFiscalYear;
      IF ISSERVICETIER AND (STRLEN(RFPeriod) <> 2) THEN
        PrevPeriod := FORMAT(RFPeriod,2,'<Text,2><Filler Character,0>')
      ELSE
        PrevPeriod := RFPeriod;
    END;

    PROCEDURE Rectify@1100001(FiscalYear@1100000 : Code[4];Period@1100001 : Code[2]);
    VAR
      NumPeriod@1100005 : Integer;
      AmountEUService@1100004 : Decimal;
      AmountOpTri@1100003 : Decimal;
      NormalAmount@1100002 : Decimal;
    BEGIN
      IF NOT EVALUATE(NumFiscalYear,FiscalYear) THEN
        ERROR(Text1100000);

      CASE TRUE OF
        Period IN
          ['01','02','03','04','05','06','07','08','09','10','11','12']:
          BEGIN
            EVALUATE(NumPeriod,FORMAT(Period));
            FromDate := DMY2DATE(1,NumPeriod,NumFiscalYear);
            ToDate := CALCDATE('<+CM>',FromDate);
          END;
        Period IN ['1T','2T','3T','4T']:
          BEGIN
            EVALUATE(NumPeriod,DELCHR(FORMAT(Period) , '=', 'T'));
            FromDate := DMY2DATE(1,(NumPeriod * 3) - 2,NumFiscalYear);
            ToDate := CALCDATE('<+CQ>',FromDate);
          END;
        Period = '0A':
          BEGIN
            FromDate := DMY2DATE(1,1,NumFiscalYear);
            ToDate := CALCDATE('<+CY>',FromDate);
          END;
        ELSE
          ERROR(Text1100000);
      END;

      "Previous Declared Amount" := 0;

      IF Type = Type::Sale THEN BEGIN
        Cust.GET("Customer/Vendor No.");
        Cust2.SETRANGE("VAT Registration No.",Cust."VAT Registration No.");
        IF Cust2.FINDSET THEN
          REPEAT
            VATSales.RESET;
            VATSales.SETCURRENTKEY(Type,"Document Type","Bill-to/Pay-to No.","Posting Date","EU 3-Party Trade","EU Service");
            VATSales.SETRANGE(Type,VATSales.Type::Sale);
            VATSales.SETFILTER(
              "Document Type",'%1|%2',
              VATSales."Document Type"::Invoice,VATSales."Document Type"::"Credit Memo");
            VATSales.SETRANGE("Bill-to/Pay-to No.",Cust2."No.");
            VATSales.SETRANGE("Posting Date",FromDate,ToDate);
            VATSales.SETRANGE("EU Service",FALSE);
            VATSales.SETRANGE("EU 3-Party Trade",FALSE);
            VATSales.CALCSUMS(Base);
            NormalAmount := NormalAmount + VATSales.Base;

            VATSales.RESET;
            VATSales.SETCURRENTKEY(Type,"Document Type","Bill-to/Pay-to No.","Posting Date","EU 3-Party Trade","EU Service");
            VATSales.SETRANGE(Type,VATSales.Type::Sale);
            VATSales.SETFILTER("Document Type",'%1|%2',
              VATSales."Document Type"::Invoice,VATSales."Document Type"::"Credit Memo");
            VATSales.SETRANGE("Bill-to/Pay-to No.",Cust2."No.");
            VATSales.SETRANGE("Posting Date",FromDate,ToDate);
            VATSales.SETRANGE("EU Service",FALSE);
            VATSales.SETRANGE("EU 3-Party Trade",TRUE);
            VATSales.CALCSUMS(Base);
            AmountOpTri := AmountOpTri + VATSales.Base;

            VATSales.RESET;
            VATSales.SETCURRENTKEY(Type,"Document Type","Bill-to/Pay-to No.","Posting Date","EU 3-Party Trade","EU Service");
            VATSales.SETRANGE(Type,VATSales.Type::Sale);
            VATSales.SETFILTER(
              "Document Type",'%1|%2',
              VATSales."Document Type"::Invoice,VATSales."Document Type"::"Credit Memo");
            VATSales.SETRANGE("Bill-to/Pay-to No.",Cust2."No.");
            VATSales.SETRANGE("Posting Date",FromDate,ToDate);
            VATSales.SETRANGE("EU Service",TRUE);
            VATSales.CALCSUMS(Base);
            AmountEUService := AmountEUService + VATSales.Base;
          UNTIL Cust2.NEXT = 0;
          IF "EU Service" THEN
            "Previous Declared Amount" := AmountEUService
          ELSE
            IF "EU 3-Party Trade" THEN
              "Previous Declared Amount" := AmountOpTri
            ELSE
              "Previous Declared Amount" := NormalAmount;
      END ELSE BEGIN
        Vendor.GET("Customer/Vendor No.");
        Vendor2.SETRANGE("VAT Registration No.",Vendor."VAT Registration No.");
        IF Vendor2.FINDSET THEN
          REPEAT
            VATPurch.SETCURRENTKEY(Type,"Document Type","Bill-to/Pay-to No.","Posting Date","EU 3-Party Trade","EU Service");
            VATPurch.SETRANGE(Type,VATPurch.Type::Purchase);
            VATPurch.SETFILTER(
              "Document Type",'%1|%2',
              VATPurch."Document Type"::Invoice,VATPurch."Document Type"::"Credit Memo");
            VATPurch.SETRANGE("Bill-to/Pay-to No.",Vendor2."No.");
            VATPurch.SETRANGE("Posting Date",FromDate,ToDate);
            VATPurch.SETRANGE("EU Service",FALSE);
            VATPurch.SETRANGE("EU 3-Party Trade",FALSE);
            VATPurch.CALCSUMS(Base);
            NormalAmount := NormalAmount + VATPurch.Base;

            VATPurch.RESET;
            VATPurch.SETCURRENTKEY(Type,"Document Type","Bill-to/Pay-to No.","Posting Date","EU 3-Party Trade","EU Service");
            VATPurch.SETRANGE(VATPurch.Type,VATPurch.Type::Purchase);
            VATPurch.SETFILTER(
              "Document Type",'%1|%2',
              VATPurch."Document Type"::Invoice,VATPurch."Document Type"::"Credit Memo");
            VATPurch.SETRANGE("Bill-to/Pay-to No.",Vendor2."No.");
            VATPurch.SETRANGE("Posting Date",FromDate,ToDate);
            VATPurch.SETRANGE("EU Service",FALSE);
            VATPurch.SETRANGE("EU 3-Party Trade",TRUE);
            VATPurch.CALCSUMS(Base);
            AmountOpTri := AmountOpTri + VATPurch.Base;

            VATPurch.RESET;
            VATPurch.SETCURRENTKEY(Type,"Document Type","Bill-to/Pay-to No.","Posting Date","EU 3-Party Trade","EU Service");
            VATPurch.SETRANGE(Type,VATPurch.Type::Purchase);
            VATPurch.SETFILTER(
              "Document Type",'%1|%2',
              VATPurch."Document Type"::Invoice,VATPurch."Document Type"::"Credit Memo");
            VATPurch.SETRANGE("Bill-to/Pay-to No.",Vendor2."No.");
            VATPurch.SETRANGE("Posting Date",FromDate,ToDate);
            VATPurch.SETRANGE("EU Service",TRUE);
            VATPurch.CALCSUMS(Base);
            AmountEUService := AmountEUService + VATPurch.Base;
          UNTIL Vendor2.NEXT = 0;
          IF "EU Service" THEN
            "Previous Declared Amount" := AmountEUService
          ELSE
            IF "EU 3-Party Trade" THEN
              "Previous Declared Amount" := AmountOpTri
            ELSE
              "Previous Declared Amount" := NormalAmount;
      END;
      IF "Previous Declared Amount" < 0 THEN
        "Previous Declared Amount" := - "Previous Declared Amount";
    END;

    PROCEDURE Cancelled@1100002() GotCancelled : Boolean;
    BEGIN
      GotCancelled := NOT IsProcess;
    END;

    BEGIN
    END.
  }
}
