OBJECT Page 5905 Service Lines
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Service Lines;
               ESP=L¡neas servicio];
    SourceTable=Table5902;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    DataCaptionFields=Document Type,Document No.;
    PageType=Worksheet;
    AutoSplitKey=Yes;
    OnOpenPage=BEGIN
                 CLEAR(SelectionFilter);
                 SetSelectionFilter;

                 ServMgtSetup.GET;
                 CASE ServMgtSetup."Fault Reporting Level" OF
                   ServMgtSetup."Fault Reporting Level"::None:
                     BEGIN
                       "Fault Area CodeVisible" := FALSE;
                       "Symptom CodeVisible" := FALSE;
                       "Fault CodeVisible" := FALSE;
                       "Resolution CodeVisible" := FALSE;
                     END;
                   ServMgtSetup."Fault Reporting Level"::Fault:
                     BEGIN
                       "Fault Area CodeVisible" := FALSE;
                       "Symptom CodeVisible" := FALSE;
                       "Fault CodeVisible" := TRUE;
                       "Resolution CodeVisible" := TRUE;
                     END;
                   ServMgtSetup."Fault Reporting Level"::"Fault+Symptom":
                     BEGIN
                       "Fault Area CodeVisible" := FALSE;
                       "Symptom CodeVisible" := TRUE;
                       "Fault CodeVisible" := TRUE;
                       "Resolution CodeVisible" := TRUE;
                     END;
                   ServMgtSetup."Fault Reporting Level"::"Fault+Symptom+Area (IRIS)":
                     BEGIN
                       "Fault Area CodeVisible" := TRUE;
                       "Symptom CodeVisible" := TRUE;
                       "Fault CodeVisible" := TRUE;
                       "Resolution CodeVisible" := TRUE;
                     END;
                 END;
               END;

    OnAfterGetRecord=BEGIN
                       ShowShortcutDimCode(ShortcutDimCode);
                     END;

    OnNewRecord=BEGIN
                  Type := xRec.Type;
                  CLEAR(ShortcutDimCode);

                  IF ServHeader.GET("Document Type","Document No.") THEN BEGIN
                    IF ServHeader."Link Service to Service Item" THEN
                      IF SelectionFilter <> SelectionFilter::"Lines Not Item Related" THEN
                        VALIDATE("Service Item Line No.",ServItemLineNo)
                      ELSE
                        VALIDATE("Service Item Line No.",0)
                    ELSE
                      VALIDATE("Service Item Line No.",0);
                  END;
                END;

    OnInsertRecord=BEGIN
                     "Line No." := GetNextLineNo(xRec,BelowxRec);
                     EXIT(TRUE);
                   END;

    OnDeleteRecord=VAR
                     ReserveServLine@1000 : Codeunit 99000842;
                   BEGIN
                     IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                       COMMIT;
                       IF NOT ReserveServLine.DeleteLineConfirm(Rec) THEN
                         EXIT(FALSE);
                       ReserveServLine.DeleteLine(Rec);
                     END;
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 148     ;1   ;ActionGroup;
                      CaptionML=[ENU=O&rder;
                                 ESP=&Pedido] }
      { 152     ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Service Ledger E&ntries;
                                 ESP=Movs. ser&vicio];
                      RunObject=Page 5912;
                      RunFormView=SORTING(Service Order No.,Service Item No. (Serviced),Entry Type,Moved from Prepaid Acc.,Posting Date,Open,Type);
                      RunFormLink=Service Order No.=FIELD(Document No.) }
      { 153     ;2   ;Action    ;
                      CaptionML=[ENU=&Warranty Ledger Entries;
                                 ESP=Movs. &garant¡a];
                      RunObject=Page 5913;
                      RunFormView=SORTING(Service Order No.,Posting Date,Document No.);
                      RunFormLink=Service Order No.=FIELD(Document No.) }
      { 154     ;2   ;Action    ;
                      CaptionML=[ENU=&Job Ledger Entries;
                                 ESP=Movs. pro&yectos];
                      RunObject=Page 92;
                      RunFormView=SORTING(Service Order No.,Posting Date)
                                  WHERE(Entry Type=CONST(Usage));
                      RunFormLink=Service Order No.=FIELD(Document No.) }
      { 157     ;2   ;Separator ;
                      CaptionML=[ENU="";
                                 ESP=""] }
      { 158     ;2   ;Action    ;
                      ShortCutKey=May£s+F7;
                      CaptionML=[ENU=&Customer Card;
                                 ESP=&Ficha cliente];
                      RunObject=Page 21;
                      RunFormLink=No.=FIELD(Customer No.) }
      { 161     ;2   ;Separator ;
                      CaptionML=[ENU="";
                                 ESP=""] }
      { 162     ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ESP=C&omentarios];
                      RunObject=Page 5911;
                      RunFormLink=Table Name=CONST(Service Header),
                                  Table Subtype=FIELD(Document Type),
                                  No.=FIELD(Document No.),
                                  Type=CONST(General);
                      Image=ViewComments }
      { 163     ;2   ;Action    ;
                      CaptionML=[ENU=S&hipments;
                                 ESP=E&nv¡os];
                      OnAction=VAR
                                 ServShptHeader@1000 : Record 5990;
                               BEGIN
                                 ServShptHeader.RESET;
                                 ServShptHeader.FILTERGROUP(2);
                                 ServShptHeader.SETRANGE("Order No.","Document No.");
                                 ServShptHeader.FILTERGROUP(0);
                                 FORM.RUNMODAL(0,ServShptHeader)
                               END;
                                }
      { 164     ;2   ;Action    ;
                      CaptionML=[ENU=Invoices;
                                 ESP=Facturas];
                      Image=Invoice;
                      OnAction=VAR
                                 ServInvHeader@1000 : Record 5992;
                               BEGIN
                                 ServInvHeader.RESET;
                                 ServInvHeader.FILTERGROUP(2);
                                 ServInvHeader.SETRANGE("Order No.","Document No.");
                                 ServInvHeader.FILTERGROUP(0);
                                 FORM.RUNMODAL(0,ServInvHeader)
                               END;
                                }
      { 109     ;1   ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 ESP=&L¡nea] }
      { 116     ;2   ;Action    ;
                      ShortCutKey=May£s+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ESP=Dimensiones];
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 128     ;2   ;Separator ;
                      CaptionML=[ENU="";
                                 ESP=""] }
      { 110     ;2   ;ActionGroup;
                      CaptionML=[ENU=Item Availability by;
                                 ESP=Disponibilidad prod. por] }
      { 111     ;3   ;Action    ;
                      CaptionML=[ENU=Period;
                                 ESP=Periodo];
                      OnAction=BEGIN
                                 ItemAvailability(0);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 112     ;3   ;Action    ;
                      CaptionML=[ENU=Variant;
                                 ESP=Variante];
                      OnAction=BEGIN
                                 ItemAvailability(1);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 113     ;3   ;Action    ;
                      CaptionML=[ENU=Location;
                                 ESP=Almac‚n];
                      OnAction=BEGIN
                                 ItemAvailability(2);
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 115     ;2   ;Action    ;
                      CaptionML=[ENU=Reservation Entries;
                                 ESP=Movs. reserva];
                      Image=ReservationLedger;
                      OnAction=BEGIN
                                 ShowReservationEntries(TRUE);
                               END;
                                }
      { 26      ;2   ;Action    ;
                      ShortCutKey=May£s+Ctrl+I;
                      CaptionML=[ENU=Item &Tracking Lines;
                                 ESP=L¡ns. se&guim. prod.];
                      Image=ItemTrackingLines;
                      OnAction=BEGIN
                                 OpenItemTrackingLines;
                               END;
                                }
      { 129     ;2   ;Separator ;
                      CaptionML=[ENU="";
                                 ESP=""] }
      { 17      ;2   ;Action    ;
                      CaptionML=[ENU=Select Item Substitution;
                                 ESP=Seleccionar prod. sustitutivo];
                      Image=SelectItemSubstitution;
                      OnAction=BEGIN
                                 ShowItemSub;
                                 CurrPage.UPDATE(TRUE);
                               END;
                                }
      { 133     ;2   ;Action    ;
                      CaptionML=[ENU=&Fault/Resol. Codes Relationships;
                                 ESP=Relaci¢n c¢ds. de&fecto/resol.];
                      OnAction=BEGIN
                                 SelectFaultResolutionCode;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 94      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones] }
      { 147     ;2   ;Action    ;
                      CaptionML=[ENU=Calculate &Invoice Discount;
                                 ESP=Calcular dto. en la &factura];
                      Image=CalculateInvoiceDiscount;
                      OnAction=BEGIN
                                 CODEUNIT.RUN(CODEUNIT::"Service-Disc. (Yes/No)",Rec);
                               END;
                                }
      { 172     ;2   ;Action    ;
                      CaptionML=[ENU=Get Price;
                                 ESP=Traer precio];
                      OnAction=BEGIN
                                 ShowPrices;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 173     ;2   ;Action    ;
                      CaptionML=[ENU=Get Li&ne Discount;
                                 ESP=Traer descuento l¡&nea];
                      OnAction=BEGIN
                                 ShowLineDisc;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 150     ;2   ;Separator  }
      { 97      ;2   ;Action    ;
                      CaptionML=[ENU=Insert &Ext. Texts;
                                 ESP=Insertar &textos adicionales];
                      OnAction=BEGIN
                                 InsertExtendedText(TRUE);
                               END;
                                }
      { 98      ;2   ;Action    ;
                      CaptionML=[ENU=Insert &Starting Fee;
                                 ESP=Insertar &gto. inicio];
                      Image=InsertStartingFee;
                      OnAction=BEGIN
                                 InsertStartFee;
                               END;
                                }
      { 16      ;2   ;Action    ;
                      CaptionML=[ENU=Insert &Travel Fee;
                                 ESP=Insertar gto. &viaje];
                      Image=InsertTravelFee;
                      OnAction=BEGIN
                                 InsertTravelFee;
                               END;
                                }
      { 99      ;2   ;Action    ;
                      CaptionML=[ENU=S&plit Resource Line;
                                 ESP=&Dividir l¡n. recurso];
                      OnAction=BEGIN
                                 SplitResourceLine;
                               END;
                                }
      { 114     ;2   ;Action    ;
                      CaptionML=[ENU=&Reserve;
                                 ESP=&Reservar];
                      OnAction=BEGIN
                                 ShowReservation;
                               END;
                                }
      { 27      ;2   ;Action    ;
                      CaptionML=[ENU=Nonstoc&k Items;
                                 ESP=Prods. sin stoc&k];
                      OnAction=BEGIN
                                 ShowNonstock;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 95      ;2   ;Separator ;
                      CaptionML=[ENU="";
                                 ESP=""] }
      { 96      ;2   ;Action    ;
                      CaptionML=[ENU=Adjust Service Price;
                                 ESP=Ajustar precio servicio];
                      OnAction=VAR
                                 ServPriceMgmt@1001 : Codeunit 6080;
                               BEGIN
                                 ServItemLine.GET("Document Type","Document No.",ServItemLineNo);
                                 ServPriceMgmt.ShowPriceAdjustment(ServItemLine);
                               END;
                                }
      { 44      ;2   ;Action    ;
                      CaptionML=[ENU=Undo Price Adjustment;
                                 ESP=Deshacer ajuste precio];
                      OnAction=VAR
                                 ServPriceMgmt@1000 : Codeunit 6080;
                               BEGIN
                                 IF CONFIRM(Text011,FALSE) THEN BEGIN
                                   ServPriceMgmt.CheckServItemGrCode(Rec);
                                   ServPriceMgmt.ResetAdjustedLines(Rec);
                                 END;
                               END;
                                }
      { 79      ;1   ;ActionGroup;
                      CaptionML=[ENU=P&osting;
                                 ESP=&Registro] }
      { 93      ;2   ;Action    ;
                      ShortCutKey=F9;
                      CaptionML=[ENU=P&ost;
                                 ESP=&Registrar];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Post;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ServLine@1001 : Record 5902;
                                 TempServLine@1007 : TEMPORARY Record 5902;
                                 ServPostYesNo@1008 : Codeunit 5981;
                               BEGIN
                                 CLEAR(ServLine);
                                 MODIFY(TRUE);
                                 CurrPage.SAVERECORD;
                                 CurrPage.SETSELECTIONFILTER(ServLine);

                                 IF ServLine.FINDFIRST THEN
                                   REPEAT
                                     IF ServLine."Job No." <> '' THEN
                                       ServLine.TESTFIELD("Qty. to Consume",ServLine."Qty. to Ship");
                                     TempServLine.INIT;
                                     TempServLine := ServLine;
                                     TempServLine.INSERT;
                                   UNTIL ServLine.NEXT = 0
                                 ELSE
                                   EXIT;

                                 ServHeader.GET("Document Type","Document No.");
                                 CLEAR(ServPostYesNo);
                                 ServPostYesNo.PostDocumentWithLines(ServHeader,TempServLine);

                                 ServLine.SETRANGE("Document Type",ServHeader."Document Type");
                                 ServLine.SETRANGE("Document No.",ServHeader."No.");
                                 IF NOT ServLine.FIND('-') THEN BEGIN
                                   RESET;
                                   CurrPage.CLOSE;
                                 END ELSE
                                   CurrPage.UPDATE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 107 ;1   ;Field     ;
                CaptionML=[ENU=Service Lines Filter;
                           ESP=Filtro l¡neas servicio];
                OptionCaptionML=[ENU=All,Per Selected Service Item Line,Service Item Line Non-Related;
                                 ESP=Todas,Por l¡nea producto servicio seleccionado,L¡nea. prod. servicio no relacionado];
                SourceExpr=SelectionFilter;
                OnValidate=BEGIN
                             SelectionFilterOnAfterValidate;
                           END;
                            }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 4   ;2   ;Field     ;
                SourceExpr="Service Item Line No.";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Service Item No." }

    { 70  ;2   ;Field     ;
                SourceExpr="Service Item Serial No.";
                Visible=FALSE }

    { 22  ;2   ;Field     ;
                DrillDown=No;
                SourceExpr="Service Item Line Description";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr=Type;
                OnValidate=BEGIN
                             TypeOnAfterValidate;
                           END;
                            }

    { 10  ;2   ;Field     ;
                SourceExpr="No.";
                OnValidate=BEGIN
                             NoOnAfterValidate;
                           END;
                            }

    { 138 ;2   ;Field     ;
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 131 ;2   ;Field     ;
                SourceExpr=Nonstock;
                Visible=FALSE }

    { 140 ;2   ;Field     ;
                SourceExpr="Substitution Available";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                SourceExpr=Description }

    { 14  ;2   ;Field     ;
                SourceExpr="Description 2";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                SourceExpr="Location Code";
                OnValidate=BEGIN
                             LocationCodeOnAfterValidate;
                           END;
                            }

    { 45  ;2   ;Field     ;
                SourceExpr="Bin Code";
                Visible=FALSE }

    { 134 ;2   ;Field     ;
                SourceExpr=Reserve;
                Visible=FALSE }

    { 24  ;2   ;Field     ;
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=Quantity;
                OnValidate=BEGIN
                             QuantityOnAfterValidate;
                           END;
                            }

    { 143 ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Reserved Quantity";
                Visible=FALSE }

    { 126 ;2   ;Field     ;
                SourceExpr="Unit of Measure Code" }

    { 58  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Unit Cost (LCY)";
                Visible=FALSE }

    { 34  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Unit Price" }

    { 56  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Line Amount" }

    { 36  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Line Discount %" }

    { 38  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Line Discount Amount" }

    { 52  ;2   ;Field     ;
                SourceExpr="Line Discount Type" }

    { 101 ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Qty. to Ship" }

    { 136 ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Quantity Shipped" }

    { 55  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Qty. to Invoice" }

    { 145 ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Quantity Invoiced" }

    { 124 ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Qty. to Consume" }

    { 130 ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Quantity Consumed" }

    { 18  ;2   ;Field     ;
                SourceExpr="Work Type Code";
                Visible=FALSE }

    { 28  ;2   ;Field     ;
                SourceExpr="Fault Reason Code";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                SourceExpr="Fault Area Code";
                Visible="Fault Area CodeVisible" }

    { 60  ;2   ;Field     ;
                SourceExpr="Symptom Code";
                Visible="Symptom CodeVisible" }

    { 76  ;2   ;Field     ;
                SourceExpr="Fault Code";
                Visible="Fault CodeVisible" }

    { 119 ;2   ;Field     ;
                SourceExpr="Resolution Code";
                Visible="Resolution CodeVisible" }

    { 121 ;2   ;Field     ;
                SourceExpr="Serv. Price Adjmt. Gr. Code";
                Visible=FALSE }

    { 2   ;2   ;Field     ;
                SourceExpr="Allow Invoice Disc.";
                Visible=FALSE }

    { 49  ;2   ;Field     ;
                SourceExpr="Inv. Discount Amount";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                SourceExpr="Exclude Warranty" }

    { 117 ;2   ;Field     ;
                SourceExpr="Exclude Contract Discount" }

    { 46  ;2   ;Field     ;
                SourceExpr=Warranty }

    { 50  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Warranty Disc. %";
                Visible=FALSE }

    { 40  ;2   ;Field     ;
                SourceExpr="Contract No.";
                Editable=FALSE }

    { 42  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Contract Disc. %";
                Visible=FALSE }

    { 100 ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="VAT %";
                Visible=FALSE }

    { 105 ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="VAT Base Amount";
                Visible=FALSE }

    { 103 ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="Amount Including VAT";
                Visible=FALSE }

    { 62  ;2   ;Field     ;
                SourceExpr="Gen. Bus. Posting Group";
                Visible=FALSE }

    { 64  ;2   ;Field     ;
                SourceExpr="Gen. Prod. Posting Group";
                Visible=FALSE }

    { 66  ;2   ;Field     ;
                SourceExpr="Posting Group";
                Visible=FALSE }

    { 68  ;2   ;Field     ;
                SourceExpr="Posting Date";
                Editable=FALSE;
                OnValidate=BEGIN
                             PostingDateOnAfterValidate;
                           END;
                            }

    { 174 ;2   ;Field     ;
                SourceExpr="Job No.";
                Visible=FALSE }

    { 176 ;2   ;Field     ;
                SourceExpr="Job Task No.";
                Visible=FALSE }

    { 178 ;2   ;Field     ;
                SourceExpr="Job Line Type";
                Visible=FALSE }

    { 72  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE }

    { 74  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE }

    { 81  ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[3];
                CaptionClass='1,2,3';
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(3,ShortcutDimCode[3]);
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(3,ShortcutDimCode[3]);
                         END;
                          }

    { 83  ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[4];
                CaptionClass='1,2,4';
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(4,ShortcutDimCode[4]);
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(4,ShortcutDimCode[4]);
                         END;
                          }

    { 85  ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[5];
                CaptionClass='1,2,5';
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(5,ShortcutDimCode[5]);
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(5,ShortcutDimCode[5]);
                         END;
                          }

    { 87  ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[6];
                CaptionClass='1,2,6';
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(6,ShortcutDimCode[6]);
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(6,ShortcutDimCode[6]);
                         END;
                          }

    { 89  ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[7];
                CaptionClass='1,2,7';
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(7,ShortcutDimCode[7]);
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(7,ShortcutDimCode[7]);
                         END;
                          }

    { 91  ;2   ;Field     ;
                SourceExpr=ShortcutDimCode[8];
                CaptionClass='1,2,8';
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(8,ShortcutDimCode[8]);
                           END;

                OnLookup=BEGIN
                           LookupShortcutDimCode(8,ShortcutDimCode[8]);
                         END;
                          }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1904739907;1;Part   ;
                SubFormLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(Document No.),
                            Line No.=FIELD(Line No.);
                PagePartID=Page9124;
                Visible=FALSE;
                PartType=Page }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text008@1008 : TextConst 'ENU=You cannot open the window because %1 is %2 in the %3 table.;ESP=No puede abrir la ventana porque %1 es %2 en la tabla %3.';
      ServMgtSetup@1023 : Record 5911;
      ServHeader@1009 : Record 5900;
      ServItemLine@1011 : Record 5901;
      SalesPriceCalcMgt@1001 : Codeunit 7000;
      ServInfoPaneMgt@1000 : Codeunit 5972;
      ShortcutDimCode@1020 : ARRAY [8] OF Code[20];
      ServItemLineNo@1021 : Integer;
      SelectionFilter@1022 : 'All Service Lines,Lines per Selected Service Item,Lines Not Item Related';
      Text011@1012 : TextConst 'ENU=This will reset all price adjusted lines to default values. Continue?;ESP=Esto restablecer  todas las l¡ns. ajuste precio a valores gen‚ricos. ¨Desea continuar?';
      "Fault Area CodeVisible"@19067961 : Boolean INDATASET;
      "Symptom CodeVisible"@19078417 : Boolean INDATASET;
      "Fault CodeVisible"@19037502 : Boolean INDATASET;
      "Resolution CodeVisible"@19021279 : Boolean INDATASET;
      IPItemEnable@19021021 : Boolean INDATASET;
      IPItemButtonEnable@19028307 : Boolean INDATASET;
      IPItemCommentPBEnable@19070585 : Boolean INDATASET;
      IPAvailabilityEnable@19035006 : Boolean INDATASET;
      IPAvailabilityTextboxEnable@19022658 : Boolean INDATASET;
      IPSubstitEnable@19047943 : Boolean INDATASET;
      IPSubstitTextboxEnable@19002061 : Boolean INDATASET;
      IPSalesPriceEnable@19076262 : Boolean INDATASET;
      IPSalesPriceTextboxEnable@19033238 : Boolean INDATASET;
      IPSalesLineDiscEnable@19032437 : Boolean INDATASET;
      IPSalesLineDiscTextboxEnable@19057438 : Boolean INDATASET;

    PROCEDURE CalcInvDisc@3(VAR ServLine@1000 : Record 5902);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Service-Calc. Discount",ServLine);
    END;

    PROCEDURE Initialize@5(ServItemLine@1000 : Integer);
    BEGIN
      ServItemLineNo := ServItemLine;
    END;

    PROCEDURE SetSelectionFilter@2();
    BEGIN
      CASE SelectionFilter OF
        SelectionFilter::"All Service Lines":
          SETRANGE("Service Item Line No.");
        SelectionFilter::"Lines per Selected Service Item":
          SETRANGE("Service Item Line No.",ServItemLineNo);
        SelectionFilter::"Lines Not Item Related":
          SETRANGE("Service Item Line No.",0);
      END;
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE InsertExtendedText@7(Unconditionally@1000 : Boolean);
    VAR
      TransferExtendedText@1001 : Codeunit 378;
    BEGIN
      IF TransferExtendedText.ServCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
        CurrPage.SAVERECORD;
        TransferExtendedText.InsertServExtText(Rec);
      END;
      IF TransferExtendedText.MakeUpdate THEN
        CurrPage.UPDATE;
    END;

    PROCEDURE InsertStartFee@8();
    VAR
      ServOrderMgt@1000 : Codeunit 5900;
    BEGIN
      CLEAR(ServOrderMgt);
      IF ServOrderMgt.InsertServCost(Rec,1,FALSE) THEN
        CurrPage.UPDATE;
    END;

    PROCEDURE InsertTravelFee@6();
    VAR
      ServOrderMgt@1000 : Codeunit 5900;
    BEGIN
      CLEAR(ServOrderMgt);
      IF ServOrderMgt.InsertServCost(Rec,0,FALSE) THEN
        CurrPage.UPDATE;
    END;

    PROCEDURE SelectFaultResolutionCode@15();
    VAR
      ServSetup@1000 : Record 5911;
      FaultResolutionRelation@1001 : Form 5930;
    BEGIN
      ServSetup.GET;
      CASE ServSetup."Fault Reporting Level" OF
        ServSetup."Fault Reporting Level"::None:
          BEGIN
            ERROR(
              Text008,
              ServSetup.FIELDCAPTION("Fault Reporting Level"),
              ServSetup."Fault Reporting Level",ServSetup.TABLECAPTION);
          END;
      END;
      ServItemLine.GET("Document Type","Document No.","Service Item Line No.");
      CLEAR(FaultResolutionRelation);
      FaultResolutionRelation.SetDocument(DATABASE::"Service Line","Document Type","Document No.","Line No.");
      FaultResolutionRelation.SetFilters("Symptom Code","Fault Code","Fault Area Code",ServItemLine."Service Item Group Code");
      FaultResolutionRelation.RUNMODAL;
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE ShowPrices@4();
    BEGIN
      ServHeader.GET("Document Type","Document No.");
      CLEAR(SalesPriceCalcMgt);
      SalesPriceCalcMgt.GetServLinePrice(ServHeader,Rec);
    END;

    PROCEDURE ShowLineDisc@16();
    BEGIN
      ServHeader.GET("Document Type","Document No.");
      CLEAR(SalesPriceCalcMgt);
      SalesPriceCalcMgt.GetServLineLineDisc(ServHeader,Rec);
    END;

    PROCEDURE InfopaneEnable@11(Value@1000 : Boolean);
    BEGIN
      IPItemEnable := Value;
      IPItemButtonEnable := Value;
      IPItemCommentPBEnable := Value;
      IPAvailabilityEnable := Value;
      IPAvailabilityTextboxEnable := Value;
      IPSubstitEnable := Value;
      IPSubstitTextboxEnable := Value;
      IPSalesPriceEnable := Value;
      IPSalesPriceTextboxEnable := Value;
      IPSalesLineDiscEnable := Value;
      IPSalesLineDiscTextboxEnable := Value;
    END;

    LOCAL PROCEDURE TypeOnAfterValidate@19069045();
    BEGIN
      InfopaneEnable((Type = Type::Item)AND("No." <> ''));
    END;

    LOCAL PROCEDURE NoOnAfterValidate@19066594();
    BEGIN
      InsertExtendedText(FALSE);
      InfopaneEnable((Type = Type::Item)AND("No." <> ''));

      IF (Reserve = Reserve::Always) AND
         ("Outstanding Qty. (Base)" <> 0) AND
         ("No." <> xRec."No.")
      THEN BEGIN
        CurrPage.SAVERECORD;
        AutoReserve;
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE LocationCodeOnAfterValidate@19034787();
    BEGIN
      IF (Reserve = Reserve::Always) AND
         ("Outstanding Qty. (Base)" <> 0) AND
         ("Location Code" <> xRec."Location Code")
      THEN BEGIN
        CurrPage.SAVERECORD;
        AutoReserve;
      END;
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE QuantityOnAfterValidate@19032465();
    VAR
      UpdateIsDone@1000 : Boolean;
    BEGIN
      IF Type = Type::Item THEN
        CASE Reserve OF
          Reserve::Always:
            BEGIN
              CurrPage.SAVERECORD;
              AutoReserve;
              CurrPage.UPDATE(FALSE);
              UpdateIsDone := TRUE;
            END;
          Reserve::Optional:
            IF (Quantity < xRec.Quantity) AND (xRec.Quantity > 0) THEN BEGIN
              CurrPage.SAVERECORD;
              CurrPage.UPDATE(FALSE);
              UpdateIsDone := TRUE;
            END;
        END;

      IF (Type = Type::Item) AND
         ((Quantity <> xRec.Quantity) OR ("Line No." = 0)) AND
         NOT UpdateIsDone
      THEN
        CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE PostingDateOnAfterValidate@19003005();
    BEGIN
      IF (Reserve = Reserve::Always) AND
         ("Outstanding Qty. (Base)" <> 0) AND
         ("Posting Date" <> xRec."Posting Date")
      THEN BEGIN
        CurrPage.SAVERECORD;
        AutoReserve;
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE SelectionFilterOnAfterValidate@19033692();
    BEGIN
      CurrPage.UPDATE;
      SetSelectionFilter;
    END;

    BEGIN
    END.
  }
}
