OBJECT Page 5845 Inventory - G/L Reconciliation
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Inventory - G/L Reconciliation;
               ESP=Invent. - Conciliaci¢n cont.];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr='';
    PageType=Card;
    OnInit=BEGIN
             ShowEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 GLSetup.GET;
                 TestWarning;
                 InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
                 InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
                 InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                 InvtReportHeader."Show Warning" := ShowWarning;

                 IF (LineDimCode = '') AND (ColumnDimCode = '') THEN BEGIN
                   LineDimCode := Text004;
                   ColumnDimCode := Text005;
                 END;
                 InvtReportHeader."Line Option" := DimCodeToOption(LineDimCode);
                 InvtReportHeader."Column Option" := DimCodeToOption(ColumnDimCode);

                 PeriodInitialized := DateFilter <> '';
               END;

    OnFindRecord=BEGIN
                   WITH InvtReportHeader DO BEGIN
                     IF "Line Option" = "Line Option"::"Balance Sheet" THEN BEGIN
                       IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                         IF ShowWarning THEN
                           RowIntegerLine.SETRANGE(Number,1,7)
                         ELSE
                           RowIntegerLine.SETRANGE(Number,1,6)
                       END ELSE
                         RowIntegerLine.SETRANGE(Number,1,4)
                     END ELSE
                       IF "Line Option" = "Line Option"::"Income Statement" THEN
                         IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                           IF ShowWarning THEN
                             RowIntegerLine.SETRANGE(Number,1,18)
                           ELSE
                             RowIntegerLine.SETRANGE(Number,1,17)
                         END ELSE
                           RowIntegerLine.SETRANGE(Number,1,15);
                     EXIT(FindRec("Line Option",Rec,Which,TRUE));
                   END;
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(InvtReportHeader."Line Option",Rec,Steps,TRUE));
                 END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      CaptionML=[ENU=&Show Matrix;
                                 ESP=&Mostrar matriz];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MatrixForm@1157 : Form 9297;
                                 i@1001 : Integer;
                               BEGIN
                                 CLEAR(MatrixForm);
                                 CLEAR(MatrixRecords);
                                 CLEAR(MATRIX_CaptionSet);

                                 WITH InvtReportHeader DO BEGIN
                                   IF "Column Option" = "Line Option"::"Balance Sheet" THEN BEGIN
                                     IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                                       IF ShowWarning THEN
                                         ColIntegerLine.SETRANGE(Number,1,7)
                                       ELSE
                                         ColIntegerLine.SETRANGE(Number,1,6)
                                     END ELSE
                                       ColIntegerLine.SETRANGE(Number,1,4)
                                   END ELSE
                                     IF "Column Option" = "Line Option"::"Income Statement" THEN
                                       IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                                         IF ShowWarning THEN
                                           ColIntegerLine.SETRANGE(Number,1,18)
                                         ELSE
                                           ColIntegerLine.SETRANGE(Number,1,17)
                                       END ELSE
                                         ColIntegerLine.SETRANGE(Number,1,15);
                                   i := 1;

                                   IF FindRec("Column Option",MatrixRecords[i],'-',FALSE) THEN BEGIN
                                     MATRIX_CaptionSet[i] := MatrixRecords[i].Name;
                                     i := i+1;
                                     WHILE NextRec(InvtReportHeader."Column Option",MatrixRecords[i],1,FALSE) <> 0 DO BEGIN
                                       MATRIX_CaptionSet[i] := MatrixRecords[i].Name;
                                       i := i + 1;
                                     END;
                                   END;
                                 END;
                                 IF ShowWarning THEN
                                   MATRIX_CurrentNoOfColumns := i
                                 ELSE
                                   MATRIX_CurrentNoOfColumns := i - 1;

                                 MatrixForm.Load(MATRIX_CaptionSet,MatrixRecords,MATRIX_CurrentNoOfColumns,ShowWarning,
                                   DateFilter,ItemFilter,LocationFilter,AmountType);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ESP=General] }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           ESP=Filtro fecha];
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                             DateFilter := InvtReportHeader.GETFILTER("Posting Date Filter");
                               DateFilterOnAfterValidate;
                           END;
                            }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Item Filter;
                           ESP=Filtro producto];
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             TestWarning;
                               ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           Item@1002 : Record 27;
                           ItemList@1003 : Form 31;
                         BEGIN
                           ItemList.SETTABLEVIEW(Item);
                           ItemList.LOOKUPMODE := TRUE;
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             ItemList.GETRECORD(Item);
                             Text := Item."No.";
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Location Filter;
                           ESP=Filtro almac‚n];
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             TestWarning;
                               LocationFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           Location@1002 : Record 14;
                           Locations@1003 : Form 15;
                         BEGIN
                           Locations.SETTABLEVIEW(Location);
                           Locations.LOOKUPMODE := TRUE;
                           IF Locations.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Locations.GETRECORD(Location);
                             Text := Location.Code;
                             EXIT(TRUE);
                           END ELSE
                             EXIT(FALSE);
                         END;
                          }

    { 4   ;2   ;Field     ;
                Name=Show;
                CaptionML=[ENU=Show Warning;
                           ESP=Mostrar advertencia];
                SourceExpr=ShowWarning;
                Editable=ShowEditable;
                OnValidate=BEGIN
                             ShowWarningOnAfterValidate;
                           END;
                            }

  }
  CODE
  {
    VAR
      MatrixRecords@1158 : ARRAY [32] OF Record 367;
      MATRIX_CaptionSet@1159 : ARRAY [32] OF Text[1024];
      MATRIX_CaptionRange@1160 : Text[1024];
      FirstColumn@1161 : Text[1024];
      LastColumn@1162 : Text[1024];
      MATRIX_CaptionFieldNo@1163 : Integer;
      MATRIX_PrimKeyFirstCaptionInCu@1164 : Text[1024];
      MATRIX_CurrentNoOfColumns@1165 : Integer;
      GLSetup@1002 : Record 98;
      InvtReportHeader@1028 : Record 5845;
      InvtReportEntry@1001 : TEMPORARY Record 5846;
      RowIntegerLine@1005 : Record 2000000026;
      ColIntegerLine@1032 : Record 2000000026;
      GetInvtReport@1033 : Codeunit 5845;
      LineDimCode@1031 : Text[20];
      ColumnDimCode@1020 : Text[20];
      DateFilter@1011 : Text[30];
      InputErrorText@1022 : Text[250];
      Text003@1007 : TextConst 'ENU=%1 is not a valid column definition.;ESP=%1 no es una def. de columna v lida.';
      ItemFilter@1015 : Code[250];
      LocationFilter@1013 : Code[250];
      AmountType@1008 : 'Net Change,Balance at Date';
      PeriodInitialized@1018 : Boolean;
      InputError@1012 : Boolean;
      GLSetupRead@1026 : Boolean;
      Text004@1029 : TextConst 'ENU=Income Statement;ESP=Comercial';
      Text005@1030 : TextConst 'ENU=Balance Sheet;ESP=Balance';
      ShowWarning@1000 : Boolean;
      Text006@1004 : TextConst 'ENU=Expected Cost Setup;ESP=Configuraci¢n coste previsto';
      Text007@1009 : TextConst 'ENU=Post Cost to G/L;ESP=Registrar coste en C/G';
      Text008@1014 : TextConst 'ENU=Compression;ESP=Compresi¢n';
      Text009@1016 : TextConst 'ENU=Posting Group;ESP=Grupo contable';
      Text010@1021 : TextConst 'ENU=Direct Posting;ESP=Entrada directa';
      Text011@1023 : TextConst 'ENU=Posting Date;ESP=Fecha registro';
      Text012@1027 : TextConst 'ENU=Closed Fiscal Year;ESP=Ejercicio cerrado';
      Text013@1034 : TextConst 'ENU=Similar Accounts;ESP=Cuentas similares';
      Text014@1035 : TextConst 'ENU=Deleted Accounts;ESP=Cuentas eliminadas';
      Text016@1010 : TextConst 'ENU=The program is not set up to use expected cost posting. Therefore, inventory interim G/L accounts are empty and this causes a difference between inventory and G/L totals.;ESP=El programa no est  configurado para utilizar el registro de coste previsto. Por lo tanto, las cuentas provisionales de inventario est n vac¡as y esto causa una diferencia entre los totales de inventario y de C/G.';
      Text017@1006 : TextConst 'ENU=Some of the cost amounts in the inventory ledger have not yet been posted to G/L. You must run the Post Cost to G/L batch job to reconcile the ledgers.;ESP=Algunos importes de coste del inventario no se han registrado a£n en C/G. Debe ejecutar el proceso Registrar coste en C/G para reconciliar los movimientos.';
      Text018@1024 : TextConst 'ENU=Some inventory and/or G/L entries have been date compressed.;ESP=Algunos inventarios y/o movs. contabilidad se han comprimido por fechas.';
      Text019@1025 : TextConst 'ENU=You have possibly restructured your chart of accounts by re-assigning inventory related accounts in the General and/or Inventory Posting Setup.;ESP=Posiblemente ha reestructurado su plan de cuentas al reasignar cuentas relacionadas con el inventario en la Configuraci¢n grupos contables y/o Config. contab existencias.';
      Text020@1036 : TextConst 'ENU=Some inventory costs have been posted directly to a G/L account bypassing inventory subledger.;ESP=Algunos costes de inventario se han registrado directamente en una cuenta evitando el sublibro de contabilidad de inventario.';
      Text021@1037 : TextConst 'ENU=There is a discrepancy between the posting date of the value entry and the associated G/L entry within the reporting period.;ESP=Existe una discrepancia entre la fecha de registro del mov. valor y el mov. contabilidad asociado dentro del periodo de informaci¢n.';
      Text022@1038 : TextConst 'ENU=Some of the cost amounts are posted in a closed fiscal year. Therefore, the inventory related totals are different to their related G/L accounts in the income statement.;ESP=Algunos importes de coste se registran en un ejercicio cerrado. Por lo tanto, los totales relacionados con el inventario son diferentes de las cuentas relacionadas en el balance de ingresos.';
      Text023@1039 : TextConst 'ENU=You have possibly defined one G/L account for different inventory transactions.;ESP=Posiblemente ha definido una cuenta para diferentes movimientos de inventario.';
      Text024@1040 : TextConst 'ENU=You have possibly restructured your chart of accounts by deleting one or more inventory related G/L accounts.;ESP=Posiblemente ha reestructurado su plan de cuentas al eliminar una o m s cuentas relacionadas con el inventario.';
      ShowEditable@19062405 : Boolean INDATASET;

    PROCEDURE MATRIX_GenerateColumnCaptions@1172(Step@1000 : 'First,Previous,Same,Next');
    BEGIN
    END;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      Location@1002 : Record 14;
    BEGIN
      CASE DimCode OF
        '':
          EXIT(-1);
        Text005:
          EXIT(0);
        Text004:
          EXIT(1);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : 'Balance Sheet,Income Statement';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250];IsRow@1008 : Boolean) : Boolean;
    VAR
      Found@1007 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          IF IsRow THEN BEGIN
            IF EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := RowIntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          END ELSE BEGIN
            IF EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := ColIntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@60(DimOption@1000 : 'Balance Sheet,Income Statement';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer;IsRow@1008 : Boolean) : Integer;
    VAR
      ResultSteps@1007 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          IF IsRow THEN BEGIN
            IF EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) THEN;
            ResultSteps := RowIntegerLine.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          END ELSE BEGIN
            IF EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) THEN;
            ResultSteps := ColIntegerLine.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimValue@1000 : Record 2000000026;VAR TheDimCodeBuf@1001 : Record 367;IsRow@1002 : Boolean);
    BEGIN
      WITH InvtReportEntry DO
        CASE TRUE OF
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Balance Sheet") AND IsRow) OR
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Balance Sheet") AND NOT IsRow):
            CASE TheDimValue.Number OF
              1: InsertRow('1',FIELDCAPTION(Inventory),0,FALSE,TheDimCodeBuf);
              2: InsertRow('2',FIELDCAPTION("Inventory (Interim)"),0,FALSE,TheDimCodeBuf);
              3: InsertRow('3',FIELDCAPTION("WIP Inventory"),0,FALSE,TheDimCodeBuf);
              4: InsertRow('4',FIELDCAPTION(Total),0,TRUE,TheDimCodeBuf);
              5: InsertRow('5',FIELDCAPTION("G/L Total"),0,TRUE,TheDimCodeBuf);
              6: InsertRow('6',FIELDCAPTION(Difference),0,TRUE,TheDimCodeBuf);
              7: InsertRow('7',FIELDCAPTION(Warning),0,TRUE,TheDimCodeBuf);
            END;
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Income Statement") AND IsRow) OR
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Income Statement") AND NOT IsRow):
            CASE TheDimValue.Number OF
              1: InsertRow('1',FIELDCAPTION("Inventory To WIP"),0,FALSE,TheDimCodeBuf);
              2: InsertRow('2',FIELDCAPTION("WIP To Interim"),0,FALSE,TheDimCodeBuf);
              3: InsertRow('3',FIELDCAPTION("COGS (Interim)"),0,FALSE,TheDimCodeBuf);
              4: InsertRow('4',FIELDCAPTION("Direct Cost Applied"),0,FALSE,TheDimCodeBuf);
              5: InsertRow('5',FIELDCAPTION("Overhead Applied"),0,FALSE,TheDimCodeBuf);
              6: InsertRow('6',FIELDCAPTION("Inventory Adjmt."),0,FALSE,TheDimCodeBuf);
              7: InsertRow('7',FIELDCAPTION("Invt. Accrual (Interim)"),0,FALSE,TheDimCodeBuf);
              8: InsertRow('8',FIELDCAPTION(COGS),0,FALSE,TheDimCodeBuf);
              9: InsertRow('9',FIELDCAPTION("Purchase Variance"),0,FALSE,TheDimCodeBuf);
              10: InsertRow('10',FIELDCAPTION("Material Variance"),0,FALSE,TheDimCodeBuf);
              11: InsertRow('11',FIELDCAPTION("Capacity Variance"),0,FALSE,TheDimCodeBuf);
              12: InsertRow('12',FIELDCAPTION("Subcontracted Variance"),0,FALSE,TheDimCodeBuf);
              13: InsertRow('13',FIELDCAPTION("Capacity Overhead Variance"),0,FALSE,TheDimCodeBuf);
              14: InsertRow('14',FIELDCAPTION("Mfg. Overhead Variance"),0,FALSE,TheDimCodeBuf);
              15: InsertRow('15',FIELDCAPTION(Total),0,TRUE,TheDimCodeBuf);
              16: InsertRow('16',FIELDCAPTION("G/L Total"),0,TRUE,TheDimCodeBuf);
              17: InsertRow('17',FIELDCAPTION(Difference),0,TRUE,TheDimCodeBuf);
              18: InsertRow('18',FIELDCAPTION(Warning),0,TRUE,TheDimCodeBuf);
            END;
        END
    END;

    PROCEDURE InsertRow@1(Code1@1000 : Code[10];Name1@1001 : Text[80];Indentation1@1002 : Integer;Bold1@1003 : Boolean;VAR TheDimCodeBuf@1004 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := Code1;
        Name := COPYSTR(Name1,1,MAXSTRLEN(Name));
        Indentation := Indentation1;
        "Show in Bold" := Bold1;
      END;
    END;

    LOCAL PROCEDURE FormatAmount@6(VAR Text@1000 : Text[250]);
    VAR
      Amount@1001 : Decimal;
    BEGIN
      IF Text = '' THEN
        EXIT;
      EVALUATE(Amount,Text);

      IF Amount = 0 THEN
        Text := ''
    END;

    LOCAL PROCEDURE GetDimSelection@13(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      Location@1001 : Record 14;
      DimSelection@1002 : Form 568;
    BEGIN
      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode);
      EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE EvaluateAmount@7(VAR Text@1000 : Text[250]);
    VAR
      Amount@1001 : Decimal;
    BEGIN
      InputError := NOT EVALUATE(Amount,Text);
      IF InputError THEN
        InputErrorText := Text;
      Text := FORMAT(Amount);
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      Location@1000 : Record 14;
    BEGIN
      IF ColumnDimCode <> '' THEN BEGIN
        MESSAGE(Text003,ColumnDimCode);
        ColumnDimCode := '';
      END;

      WITH InvtReportHeader DO BEGIN
        "Column Option" := DimCodeToOption(ColumnDimCode);
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END;
    END;

    LOCAL PROCEDURE ValidateLineDimCode@19();
    VAR
      Location@1000 : Record 14;
    BEGIN
      IF ColumnDimCode <> '' THEN BEGIN
        MESSAGE(Text003,ColumnDimCode);
        ColumnDimCode := '';
      END;

      WITH InvtReportHeader DO BEGIN
        "Column Option" := DimCodeToOption(ColumnDimCode);
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE GetWarningText@5(TheField@1000 : Text[30];ShowType@1001 : 'ReturnAsText,ShowAsMessage') : Text[250];
    BEGIN
      WITH InvtReportEntry DO BEGIN
        IF "Expected Cost Posting Warning" THEN
          IF TheField IN [FIELDCAPTION("Inventory (Interim)"),
                          FIELDCAPTION("Invt. Accrual (Interim)"),
                          FIELDCAPTION("COGS (Interim)"),
                          FIELDCAPTION("Invt. Accrual (Interim)"),
                          FIELDCAPTION("WIP Inventory")]
          THEN BEGIN
            IF ShowType = ShowType::ReturnAsText THEN
              EXIT(Text006);
            EXIT(Text016);
          END;
        IF "Cost is Posted to G/L Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text007);
          EXIT(Text017);
        END;
        IF "Compression Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text008);
          EXIT(Text018);
        END;
        IF "Posting Group Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text009);
          EXIT(Text019);
        END;
        IF "Direct Postings Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text010);
          EXIT(Text020);
        END;
        IF "Posting Date Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text011);
          EXIT(Text021);
        END;
        IF "Closing Period Overlap Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text012);
          EXIT(Text022);
        END;
        IF "Similar Accounts Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text013);
          EXIT(Text023);
        END;
        IF "Deleted G/L Accounts Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text014);
          EXIT(Text024);
        END;
      END;
    END;

    PROCEDURE GetCaption@3() : Text[250];
    VAR
      ObjTransl@1000 : Record 377;
      SourceTableName@1002 : Text[100];
      LocationTableName@1003 : Text[100];
      Description@1001 : Text[250];
    BEGIN
      SourceTableName := '';
      LocationTableName := '';
      IF ItemFilter <> '' THEN
        SourceTableName := ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,27);
      IF LocationFilter <> '' THEN
        LocationTableName := ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,14);

      EXIT(STRSUBSTNO('%1 %2 %3 %4',SourceTableName,ItemFilter,LocationTableName,LocationFilter));
    END;

    PROCEDURE TestWarning@2();
    BEGIN
      ShowEditable := TRUE;
      IF ShowWarning THEN BEGIN
        IF (ItemFilter <> '') OR (LocationFilter <> '') THEN BEGIN
          ShowWarning := FALSE;
          ShowEditable := FALSE;
        END;
      END ELSE
        IF (ItemFilter <> '') OR (LocationFilter <> '') THEN BEGIN
          ShowWarning := FALSE;
          ShowEditable := FALSE;
        END;
    END;

    LOCAL PROCEDURE LocationFilterOnAfterValidate@19070361();
    BEGIN
      InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShowWarningOnAfterValidate@19052425();
    BEGIN
      InvtReportHeader."Show Warning" := ShowWarning;
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}
