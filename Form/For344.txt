OBJECT Form 344 Navigate
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00,CACEM6.00,NAVES6.00;
  }
  PROPERTIES
  {
    Width=9900;
    Height=8800;
    CaptionML=[ENU=Navigate;
               ESP=Navegar];
    SaveValues=Yes;
    TableBoxID=16;
    SourceTable=Table265;
    SourceTableTemporary=Yes;
    OnOpenForm=BEGIN
                 IF (NewDocNo = '') AND (NewPostingDate = 0D) AND (NewSerialNo = '') AND (NewLotNo = '') THEN BEGIN
                   DELETEALL;
                   CurrForm.Show.ENABLED := FALSE;
                   CurrForm.Print.ENABLED := FALSE;
                   SetSource(0D,'','',0,'');
                 END ELSE
                   IF (NewSerialNo <> '') OR (NewLotNo <> '') THEN BEGIN
                     SETRANGE("Serial No. Filter",NewSerialNo);
                     SETRANGE("Lot No. Filter",NewLotNo);
                     SerialNoFilter := GETFILTER("Serial No. Filter");
                     LotNoFilter := GETFILTER("Lot No. Filter");
                     ClearInfo;
                     FindTrackingRecords;
                     CurrForm.SerialNo.ACTIVATE;
                   END ELSE BEGIN
                     SETRANGE("Document No.",NewDocNo);
                     SETRANGE("Posting Date",NewPostingDate);
                     DocNoFilter := GETFILTER("Document No.");
                     PostingDateFilter := GETFILTER("Posting Date");
                     ContactType := ContactType::" ";
                     ContactNo := '';
                     ExtDocNo := '';
                     ClearTrackingInfo;
                     FindRecords;
                   END;
               END;

  }
  CONTROLS
  {
    { 16  ;TableBox     ;220  ;5830 ;9460 ;1980 ;HorzGlue=Both;
                                                 VertGlue=Both;
                                                 Editable=No }
    { 24  ;TextBox      ;212  ;4840 ;1650 ;440  ;Visible=No;
                                                 ParentControl=16;
                                                 InColumn=Yes;
                                                 SourceExpr="Entry No." }
    { 26  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=24;
                                                 InColumnHeading=Yes }
    { 22  ;TextBox      ;370  ;5500 ;1650 ;440  ;Visible=No;
                                                 ParentControl=16;
                                                 InColumn=Yes;
                                                 SourceExpr="Table ID" }
    { 23  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=22;
                                                 InColumnHeading=Yes }
    { 17  ;TextBox      ;0    ;0    ;4400 ;0    ;HorzGlue=Both;
                                                 ParentControl=16;
                                                 InColumn=Yes;
                                                 SourceExpr="Table Name" }
    { 18  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=17;
                                                 InColumnHeading=Yes;
                                                 BorderStyle=Normal }
    { 19  ;TextBox      ;0    ;0    ;1650 ;0    ;ParentControl=16;
                                                 InColumn=Yes;
                                                 DrillDown=Yes;
                                                 SourceExpr="No. of Records";
                                                 OnDrillDown=BEGIN
                                                               ShowRecords;
                                                             END;
                                                              }
    { 20  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=19;
                                                 InColumnHeading=Yes;
                                                 BorderStyle=Normal }
    { 21  ;CommandButton;2640 ;8030 ;2200 ;550  ;Name=Show;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=[ENU=&Show;
                                                            ESP=&Mostrar];
                                                 OnPush=BEGIN
                                                          ShowRecords;
                                                        END;
                                                         }
    { 25  ;CommandButton;7480 ;8030 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 27  ;TabControl   ;220  ;220  ;9460 ;2530 ;HorzGlue=Both;
                                                 PageNamesML=[ENU=General,External,Item Tracking;
                                                              ESP=General,Externo,Seguimiento productos] }
    { 3   ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=27;
                                                 InPage=0;
                                                 CaptionML=[ENU=Document No.;
                                                            ESP=N§ documento];
                                                 SourceExpr=DocNoFilter;
                                                 OnValidate=BEGIN
                                                              SetDocNo(DocNoFilter);
                                                              ContactType := ContactType::" ";
                                                              ContactNo := '';
                                                              ExtDocNo := '';
                                                              ClearTrackingInfo;
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   ClearSourceInfo;
                                                                 END;
                                                                  }
    { 4   ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=3 }
    { 5   ;TextBox      ;3850 ;2090 ;1650 ;440  ;ParentControl=27;
                                                 InPage=0;
                                                 CaptionML=[ENU=Posting Date;
                                                            ESP=Fecha registro];
                                                 NextControl=2;
                                                 SourceExpr=PostingDateFilter;
                                                 OnValidate=BEGIN
                                                              SetPostingDate(PostingDateFilter);
                                                              ContactType := ContactType::" ";
                                                              ContactNo := '';
                                                              ExtDocNo := '';
                                                              ClearTrackingInfo;
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   ClearSourceInfo;
                                                                 END;
                                                                  }
    { 6   ;Label        ;440  ;2090 ;3300 ;440  ;ParentControl=5 }
    { 1100000;TextBox   ;3850 ;1540 ;1650 ;440  ;ParentControl=27;
                                                 InPage=0;
                                                 CaptionML=[ENU=Bill No.;
                                                            ESP=N§ efecto];
                                                 SourceExpr=CarteraDocNoFilter;
                                                 OnValidate=BEGIN
                                                              SetPostingDate(PostingDateFilter);
                                                              ContactType := ContactType::" ";
                                                              ContactNo := '';
                                                              ExtDocNo := '';
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   ClearSourceInfo;
                                                                 END;
                                                                  }
    { 1100001;Label     ;440  ;1540 ;3300 ;440  ;ParentControl=1100000;
                                                 InPage=0 }
    { 28  ;TextBox      ;3850 ;2090 ;2750 ;440  ;ParentControl=27;
                                                 InPage=1;
                                                 CaptionML=[ENU=Document No.;
                                                            ESP=N§ documento];
                                                 SourceExpr=ExtDocNo;
                                                 OnValidate=BEGIN
                                                              SetDocNo('');
                                                              SetPostingDate('');
                                                              ClearTrackingInfo;
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   ClearSourceInfo;
                                                                 END;
                                                                  }
    { 29  ;Label        ;440  ;2090 ;3300 ;440  ;ParentControl=28 }
    { 30  ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=27;
                                                 InPage=1;
                                                 CaptionML=[ENU=Business Contact Type;
                                                            ESP=Tipo negocio];
                                                 OptionCaptionML=[ENU=" ,Vendor,Customer";
                                                                  ESP=" ,Proveedor,Cliente"];
                                                 OptionString=[ ,Vendor,Customer];
                                                 SourceExpr=ContactType;
                                                 OnValidate=BEGIN
                                                              SetDocNo('');
                                                              SetPostingDate('');
                                                              ClearTrackingInfo;
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   ClearSourceInfo;
                                                                 END;
                                                                  }
    { 31  ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=30 }
    { 32  ;TextBox      ;3850 ;1540 ;2750 ;440  ;ParentControl=27;
                                                 InPage=1;
                                                 CaptionML=[ENU=Business Contact No.;
                                                            ESP=N§ identificaci¢n];
                                                 SourceExpr=ContactNo;
                                                 OnValidate=BEGIN
                                                              SetDocNo('');
                                                              SetPostingDate('');
                                                              ClearTrackingInfo;
                                                            END;

                                                 OnLookup=VAR
                                                            Vend@1002 : Record 23;
                                                            Cust@1003 : Record 18;
                                                          BEGIN
                                                            CASE ContactType OF
                                                              ContactType::Vendor:
                                                                IF FORM.RUNMODAL(0,Vend) = ACTION::LookupOK THEN BEGIN
                                                                  Text := Vend."No.";
                                                                  EXIT(TRUE);
                                                                END;
                                                              ContactType::Customer:
                                                                IF FORM.RUNMODAL(0,Cust) = ACTION::LookupOK THEN BEGIN
                                                                  Text := Cust."No.";
                                                                  EXIT(TRUE);
                                                                END;
                                                            END;
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   ClearSourceInfo;
                                                                 END;
                                                                  }
    { 33  ;Label        ;440  ;1540 ;3300 ;440  ;ParentControl=32;
                                                 InPage=1 }
    { 37  ;TextBox      ;3850 ;990  ;2750 ;440  ;Name=SerialNo;
                                                 ParentControl=27;
                                                 InPage=2;
                                                 CaptionML=[ENU=Serial No.;
                                                            ESP=N§ serie];
                                                 SourceExpr=SerialNoFilter;
                                                 OnValidate=BEGIN
                                                              ClearInfo;
                                                            END;

                                                 OnLookup=VAR
                                                            SerialNoInfo@1004 : Record 6504;
                                                            SerialNoList@1001 : Form 6509;
                                                          BEGIN
                                                            CLEAR(SerialNoList);
                                                            IF SerialNoList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                              Text := SerialNoList.GetSelectionFilter;
                                                              EXIT(TRUE);
                                                            END;
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   ClearSourceInfo;
                                                                 END;
                                                                  }
    { 36  ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=37 }
    { 39  ;TextBox      ;3850 ;1540 ;2750 ;440  ;ParentControl=27;
                                                 InPage=2;
                                                 CaptionML=[ENU=Lot No.;
                                                            ESP=N§ lote];
                                                 SourceExpr=LotNoFilter;
                                                 OnValidate=BEGIN
                                                              ClearInfo;
                                                            END;

                                                 OnLookup=VAR
                                                            LotNoInfo@1003 : Record 6505;
                                                            LotNoList@1002 : Form 6508;
                                                          BEGIN
                                                            CLEAR(LotNoList);
                                                            IF LotNoList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                              Text := LotNoList.GetSelectionFilter;
                                                              EXIT(TRUE);
                                                            END;
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   ClearSourceInfo;
                                                                 END;
                                                                  }
    { 38  ;Label        ;440  ;1540 ;3300 ;440  ;ParentControl=39 }
    { 7   ;Frame        ;220  ;2860 ;9460 ;2750 ;HorzGlue=Both;
                                                 CaptionML=[ENU=Source;
                                                            ESP=Origen] }
    { 8   ;TextBox      ;3850 ;3300 ;5500 ;440  ;Name=DocType;
                                                 Editable=No;
                                                 ParentControl=7;
                                                 InFrame=Yes;
                                                 CaptionML=[ENU=Document Type;
                                                            ESP=Tipo documento];
                                                 SourceExpr=DocType }
    { 9   ;Label        ;440  ;3300 ;3300 ;440  ;ParentControl=8 }
    { 10  ;TextBox      ;3850 ;3960 ;2750 ;440  ;Name=SourceType;
                                                 Editable=No;
                                                 ParentControl=7;
                                                 InFrame=Yes;
                                                 CaptionML=[ENU=Source Type;
                                                            ESP=Tipo procedencia mov.];
                                                 SourceExpr=SourceType }
    { 11  ;Label        ;440  ;3960 ;3300 ;440  ;ParentControl=10 }
    { 12  ;TextBox      ;3850 ;4510 ;2750 ;440  ;Name=SourceNo;
                                                 Editable=No;
                                                 ParentControl=7;
                                                 InFrame=Yes;
                                                 CaptionML=[ENU=Source No.;
                                                            ESP=C¢d. procedencia mov.];
                                                 SourceExpr=SourceNo }
    { 13  ;Label        ;440  ;4510 ;3300 ;440  ;ParentControl=12 }
    { 14  ;TextBox      ;3850 ;5060 ;5500 ;440  ;Name=SourceName;
                                                 Editable=No;
                                                 ParentControl=7;
                                                 InFrame=Yes;
                                                 CaptionML=[ENU=Source Name;
                                                            ESP=Nombre procedencia];
                                                 SourceExpr=SourceName }
    { 15  ;Label        ;440  ;5060 ;3300 ;440  ;ParentControl=14 }
    { 34  ;CommandButton;5060 ;8030 ;2200 ;550  ;Name=Print;
                                                 HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Ellipsis=Yes;
                                                 CaptionML=[ENU=&Print;
                                                            ESP=&Imprimir];
                                                 OnPush=VAR
                                                          ItemTrackingNavigate@1002 : Report 6529;
                                                          DocumentEntries@1001 : Report 35;
                                                        BEGIN
                                                          IF ItemTrackingSearch THEN BEGIN
                                                            CLEAR(ItemTrackingNavigate);
                                                            ItemTrackingNavigate.TransferDocEntries(Rec);
                                                            ItemTrackingNavigate.TransferRecordBuffer(TempRecordBuffer);
                                                            ItemTrackingNavigate.TransferFilters(SerialNoFilter,LotNoFilter,'','');
                                                            ItemTrackingNavigate.RUN;
                                                          END ELSE BEGIN
                                                            DocumentEntries.TransferDocEntries(Rec);
                                                            DocumentEntries.TransferFilters(DocNoFilter,PostingDateFilter);
                                                            DocumentEntries.RUN;
                                                          END;
                                                        END;
                                                         }
    { 2   ;CommandButton;220  ;8030 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=[ENU=Fi&nd;
                                                            ESP=&Buscar];
                                                 OnPush=BEGIN
                                                          FindPush;
                                                        END;
                                                         }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The business contact type was not specified.;ESP=No se ha indicado tipo negocio.';
      Text001@1001 : TextConst 'ENU=There are no posted records with this external document number.;ESP=No existe informaci¢n registrada con el n§ documento externo indicado.';
      Text002@1002 : TextConst 'ENU=Counting records...;ESP=Contando registros...';
      Text003@1003 : TextConst 'ENU=Posted Sales Invoice;ESP=Hist¢rico facturas venta';
      Text004@1004 : TextConst 'ENU=Posted Sales Credit Memo;ESP=Hist¢rico abonos venta';
      Text005@1005 : TextConst 'ENU=Posted Sales Shipment;ESP=Hist¢rico albaranes venta';
      Text006@1006 : TextConst 'ENU=Issued Reminder;ESP=Recordatorio emitido';
      Text007@1007 : TextConst 'ENU=Issued Finance Charge Memo;ESP=Doc. inters emitido';
      Text008@1008 : TextConst 'ENU=Posted Purchase Invoice;ESP=Hist¢rico facturas compra';
      Text009@1009 : TextConst 'ENU=Posted Purchase Credit Memo;ESP=Hist¢rico abono compra';
      Text010@1010 : TextConst 'ENU=Posted Purchase Receipt;ESP=Hist¢rico albaranes compra';
      Text011@1011 : TextConst 'ENU=The document number has been used more than once.;ESP=El mismo n§ documento se ha utilizado en varios documentos';
      Text012@1012 : TextConst 'ENU=This combination of document number and posting date has been used more than once.;ESP=La combinaci¢n del n§ documento y fecha registro se ha utilizado m s de una vez.';
      Text013@1013 : TextConst 'ENU=There are no posted records with this document number.;ESP=No existe informaci¢n registrada con el n§ documento indicado.';
      Text014@1014 : TextConst 'ENU=There are no posted records with this combination of document number and posting date.;ESP=No existe informaci¢n registrada con esta combinaci¢n de n§ documento y fecha de registro.';
      Text015@1015 : TextConst 'ENU=The search results in too many external documents. Please specify a business contact no.;ESP=El resultado de la b£squeda incluye demasiados documentos externos. Indique un valor en tipo negocio.';
      Text016@1016 : TextConst 'ENU=The search results in too many external documents. Please use Navigate from the relevant ledger entries.;ESP=El resultado de la b£squeda incluye demasiados documentos. Utilice Navegar desde otros movimientos m s aproximados.';
      Text017@1017 : TextConst 'ENU=Posted Return Receipt;ESP=Hist¢rico recep. devoluci¢n';
      Text018@1018 : TextConst 'ENU=Posted Return Shipment;ESP=Hist¢rico env¡o devoluci¢n';
      Text019@1019 : TextConst 'ENU=Posted Transfer Shipment;ESP=Hist¢rico env¡o transferencia';
      Text020@1020 : TextConst 'ENU=Posted Transfer Receipt;ESP=Hist¢rico recep. transferencia';
      Text021@1061 : TextConst 'ENU=Sales Order;ESP=Pedido venta';
      Text022@1080 : TextConst 'ENU=Sales Invoice;ESP=Factura venta';
      Text023@1081 : TextConst 'ENU=Sales Return Order;ESP=Devoluci¢n venta';
      Text024@1082 : TextConst 'ENU=Sales Credit Memo;ESP=Abono venta';
      sText003@1096 : TextConst 'ENU=Posted Service Invoice;ESP=Fact. ventas (servicio) regis.';
      sText004@1095 : TextConst 'ENU=Posted Service Credit Memo;ESP=Abono ventas (servicio) regis.';
      sText005@1092 : TextConst 'ENU=Posted Service Shipment;ESP=Env¡o servicio registrado';
      sText021@1094 : TextConst 'ENU=Service Order;ESP=Pedido servicio';
      sText022@1093 : TextConst 'ENU=Service Invoice;ESP=Factura servicio';
      sText024@1036 : TextConst 'ENU=Service Credit Memo;ESP=Abono servicio';
      Text99000000@1021 : TextConst 'ENU=Production Order;ESP=Orden producci¢n';
      Cust@1023 : Record 18;
      Vend@1024 : Record 23;
      SOSalesHeader@1083 : Record 36;
      SISalesHeader@1084 : Record 36;
      SROSalesHeader@1086 : Record 36;
      SCMSalesHeader@1085 : Record 36;
      SalesShptHeader@1025 : Record 110;
      SalesInvHeader@1026 : Record 112;
      ReturnRcptHeader@1027 : Record 6660;
      SalesCrMemoHeader@1028 : Record 114;
      SOServHeader@1091 : Record 5900;
      SIServHeader@1090 : Record 5900;
      SCMServHeader@1059 : Record 5900;
      ServShptHeader@1058 : Record 5990;
      ServInvHeader@1057 : Record 5992;
      ServCrMemoHeader@1022 : Record 5994;
      IssuedReminderHeader@1029 : Record 297;
      IssuedFinChrgMemoHeader@1030 : Record 304;
      PurchRcptHeader@1031 : Record 120;
      PurchInvHeader@1032 : Record 122;
      ReturnShptHeader@1033 : Record 6650;
      PurchCrMemoHeader@1034 : Record 124;
      ProductionOrderHeader@1035 : Record 5405;
      TransShptHeader@1037 : Record 5744;
      TransRcptHeader@1038 : Record 5746;
      PostedWhseRcptLine@1087 : Record 7319;
      PostedWhseShptLine@1088 : Record 7323;
      GLEntry@1039 : Record 17;
      VATEntry@1040 : Record 254;
      CustLedgEntry@1041 : Record 21;
      DtldCustLedgEntry@1042 : Record 379;
      VendLedgEntry@1043 : Record 25;
      DtldVendLedgEntry@1044 : Record 380;
      ItemLedgEntry@1045 : Record 32;
      PhysInvtLedgEntry@1046 : Record 281;
      ResLedgEntry@1047 : Record 203;
      JobLedgEntry@1048 : Record 169;
      ValueEntry@1049 : Record 5802;
      BankAccLedgEntry@1050 : Record 271;
      CheckLedgEntry@1051 : Record 272;
      ReminderEntry@1052 : Record 300;
      FALedgEntry@1053 : Record 5601;
      MaintenanceLedgEntry@1054 : Record 5625;
      InsuranceCovLedgEntry@1055 : Record 5629;
      CapacityLedgEntry@1056 : Record 5832;
      ServLedgerEntry@1063 : Record 5907;
      WarrantyLedgerEntry@1064 : Record 5908;
      WhseEntry@1089 : Record 7312;
      TempRecordBuffer@1060 : TEMPORARY Record 6529;
      ApplicationManagement@1066 : Codeunit 1;
      ItemTrackingNavigateMgt@1159 : Codeunit 6529;
      Window@1067 : Dialog;
      DocNoFilter@1068 : Code[250];
      PostingDateFilter@1069 : Text[250];
      NewDocNo@1070 : Code[20];
      ContactNo@1071 : Code[250];
      ExtDocNo@1072 : Code[250];
      NewPostingDate@1073 : Date;
      DocType@1074 : Text[50];
      SourceType@1075 : Text[30];
      SourceNo@1076 : Code[20];
      SourceName@1077 : Text[50];
      ContactType@1078 : ' ,Vendor,Customer';
      DocExists@1079 : Boolean;
      NewSerialNo@1136 : Code[20];
      NewLotNo@1122 : Code[20];
      SerialNoFilter@1157 : Code[1000];
      LotNoFilter@1158 : Code[1000];
      CostEntry@1460000 : Record 3010554;
      CarteraDoc@1100073 : Record 7000002;
      PostedCarteraDoc@1100074 : Record 7000003;
      ClosedCarteraDoc@1100075 : Record 7000004;
      PostedBillGr@1100076 : Record 7000006;
      ClosedBillGr@1100077 : Record 7000007;
      PostedPmtOrd@1100078 : Record 7000021;
      ClosedPmtOrd@1100079 : Record 7000022;
      CarteraDocNoFilter@1100083 : Text[250];

    PROCEDURE SetDoc@1(PostingDate@1000 : Date;DocNo@1001 : Code[20]);
    BEGIN
      NewDocNo := DocNo;
      NewPostingDate := PostingDate;
    END;

    LOCAL PROCEDURE FindExtRecords@8();
    VAR
      VendLedgEntry2@1000 : Record 25;
      FoundRecords@1001 : Boolean;
      DateFilter2@1002 : Code[250];
      DocNoFilter2@1003 : Code[250];
    BEGIN
      FoundRecords := FALSE;
      CASE ContactType OF
        ContactType::Vendor:
          BEGIN
            VendLedgEntry2.SETCURRENTKEY("External Document No.");
            VendLedgEntry2.SETFILTER("External Document No.",ExtDocNo);
            VendLedgEntry2.SETFILTER("Vendor No.",ContactNo);
            IF VendLedgEntry2.FINDSET THEN BEGIN
              REPEAT
                MakeExtFilter(
                  DateFilter2,
                  VendLedgEntry2."Posting Date",
                  DocNoFilter2,
                  VendLedgEntry2."Document No.");
              UNTIL VendLedgEntry2.NEXT = 0;
              SetPostingDate(DateFilter2);
              SetDocNo(DocNoFilter2);
              FindRecords;
              FoundRecords := TRUE;
            END;
          END;
        ContactType::Customer:
          BEGIN
            DELETEALL;
            "Entry No." := 0;
            FindUnpostedSalesDocs(SOSalesHeader."Document Type"::Order,Text021,SOSalesHeader);
            FindUnpostedSalesDocs(SISalesHeader."Document Type"::Invoice,Text022,SISalesHeader);
            FindUnpostedSalesDocs(SROSalesHeader."Document Type"::"Return Order",Text023,SROSalesHeader);
            FindUnpostedSalesDocs(SCMSalesHeader."Document Type"::"Credit Memo",Text024,SCMSalesHeader);
            IF SalesShptHeader.READPERMISSION THEN BEGIN
              SalesShptHeader.RESET;
              SalesShptHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              SalesShptHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              SalesShptHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(
                DATABASE::"Sales Shipment Header",0,Text005,SalesShptHeader.COUNT);
            END;
            IF SalesInvHeader.READPERMISSION  AND (CarteraDocNoFilter = '')THEN BEGIN
              SalesInvHeader.RESET;
              SalesInvHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              SalesInvHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              SalesInvHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(
                DATABASE::"Sales Invoice Header",0,Text003,SalesInvHeader.COUNT);
            END;
            IF ReturnRcptHeader.READPERMISSION THEN BEGIN
              ReturnRcptHeader.RESET;
              ReturnRcptHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              ReturnRcptHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              ReturnRcptHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(
                DATABASE::"Return Receipt Header",0,Text017,ReturnRcptHeader.COUNT);
            END;
            IF SalesCrMemoHeader.READPERMISSION  AND (CarteraDocNoFilter = '')THEN BEGIN
              SalesCrMemoHeader.RESET;
              SalesCrMemoHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
              SalesCrMemoHeader.SETFILTER("Sell-to Customer No.",ContactNo);
              SalesCrMemoHeader.SETFILTER("External Document No.",ExtDocNo);
              InsertIntoDocEntry(
                DATABASE::"Sales Cr.Memo Header",0,Text004,SalesCrMemoHeader.COUNT);
            END;
            FindUnpostedServDocs(SOServHeader."Document Type"::Order,sText021,SOServHeader);
            FindUnpostedServDocs(SIServHeader."Document Type"::Invoice,sText022,SIServHeader);
            FindUnpostedServDocs(SCMServHeader."Document Type"::"Credit Memo",sText024,SCMServHeader);
            IF ServShptHeader.READPERMISSION THEN BEGIN
              IF ExtDocNo = '' THEN BEGIN
                ServShptHeader.RESET;
                ServShptHeader.SETCURRENTKEY("Customer No.");
                ServShptHeader.SETFILTER("Customer No.",ContactNo);
                InsertIntoDocEntry(
                  DATABASE::"Service Shipment Header",0,sText005,ServShptHeader.COUNT);
              END;
            END;
            IF ServInvHeader.READPERMISSION THEN BEGIN
              IF ExtDocNo = '' THEN BEGIN
                ServInvHeader.RESET;
                ServShptHeader.SETCURRENTKEY("Customer No.");
                ServInvHeader.SETFILTER("Customer No.",ContactNo);
                InsertIntoDocEntry(
                  DATABASE::"Service Invoice Header",0,sText003,ServInvHeader.COUNT);
              END;
            END;
            IF ServCrMemoHeader.READPERMISSION THEN BEGIN
              IF ExtDocNo = '' THEN BEGIN
                ServCrMemoHeader.RESET;
                ServShptHeader.SETCURRENTKEY("Customer No.");
                ServCrMemoHeader.SETFILTER("Customer No.",ContactNo);
                InsertIntoDocEntry(
                  DATABASE::"Service Cr.Memo Header",0,sText004,ServCrMemoHeader.COUNT);
              END;
            END;

            DocExists := FINDFIRST;

            UpdateFormAfterFindRecords;
            FoundRecords := DocExists;
          END;
        ELSE
          ERROR(Text000);
      END;

      IF NOT FoundRecords THEN BEGIN
        SetSource(0D,'','',0,'');
        MESSAGE(Text001);
      END;
    END;

    LOCAL PROCEDURE FindRecords@2();
    BEGIN
      Window.OPEN(Text002);
      RESET;
      DELETEALL;
      "Entry No." := 0;
      IF SalesShptHeader.READPERMISSION THEN BEGIN
        SalesShptHeader.RESET;
        SalesShptHeader.SETFILTER("No.",DocNoFilter);
        SalesShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Sales Shipment Header",0,Text005,SalesShptHeader.COUNT);
      END;
      IF SalesInvHeader.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        SalesInvHeader.RESET;
        SalesInvHeader.SETFILTER("No.",DocNoFilter);
        SalesInvHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Sales Invoice Header",0,Text003,SalesInvHeader.COUNT);
      END;
      IF ReturnRcptHeader.READPERMISSION THEN BEGIN
        ReturnRcptHeader.RESET;
        ReturnRcptHeader.SETFILTER("No.",DocNoFilter);
        ReturnRcptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Return Receipt Header",0,Text017,ReturnRcptHeader.COUNT);
      END;
      IF SalesCrMemoHeader.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        SalesCrMemoHeader.RESET;
        SalesCrMemoHeader.SETFILTER("No.",DocNoFilter);
        SalesCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Sales Cr.Memo Header",0,Text004,SalesCrMemoHeader.COUNT);
      END;
      IF ServShptHeader.READPERMISSION THEN BEGIN
        ServShptHeader.RESET;
        ServShptHeader.SETFILTER("No.",DocNoFilter);
        ServShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Service Shipment Header",0,sText005,ServShptHeader.COUNT);
      END;
      IF ServInvHeader.READPERMISSION THEN BEGIN
        ServInvHeader.RESET;
        ServInvHeader.SETFILTER("No.",DocNoFilter);
        ServInvHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Service Invoice Header",0,sText003,ServInvHeader.COUNT);
      END;
      IF ServCrMemoHeader.READPERMISSION THEN BEGIN
        ServCrMemoHeader.RESET;
        ServCrMemoHeader.SETFILTER("No.",DocNoFilter);
        ServCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Service Cr.Memo Header",0,sText004,ServCrMemoHeader.COUNT);
      END;
      IF IssuedReminderHeader.READPERMISSION THEN BEGIN
        IssuedReminderHeader.RESET;
        IssuedReminderHeader.SETFILTER("No.",DocNoFilter);
        IssuedReminderHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Issued Reminder Header",0,Text006,IssuedReminderHeader.COUNT);
      END;
      IF IssuedFinChrgMemoHeader.READPERMISSION THEN BEGIN
        IssuedFinChrgMemoHeader.RESET;
        IssuedFinChrgMemoHeader.SETFILTER("No.",DocNoFilter);
        IssuedFinChrgMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Issued Fin. Charge Memo Header",0,Text007,
          IssuedFinChrgMemoHeader.COUNT);
      END;
      IF PurchRcptHeader.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        PurchRcptHeader.RESET;
        PurchRcptHeader.SETFILTER("No.",DocNoFilter);
        PurchRcptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Purch. Rcpt. Header",0,Text010,PurchRcptHeader.COUNT);
      END;
      IF PurchInvHeader.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        PurchInvHeader.RESET;
        PurchInvHeader.SETFILTER("No.",DocNoFilter);
        PurchInvHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Purch. Inv. Header",0,Text008,PurchInvHeader.COUNT);
      END;
      IF ReturnShptHeader.READPERMISSION THEN BEGIN
        ReturnShptHeader.RESET;
        ReturnShptHeader.SETFILTER("No.",DocNoFilter);
        ReturnShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Return Shipment Header",0,Text018,ReturnShptHeader.COUNT);
      END;
      IF PurchCrMemoHeader.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        PurchCrMemoHeader.RESET;
        PurchCrMemoHeader.SETFILTER("No.",DocNoFilter);
        PurchCrMemoHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Purch. Cr. Memo Hdr.",0,Text009,PurchCrMemoHeader.COUNT);
      END;
      IF ProductionOrderHeader.READPERMISSION THEN BEGIN
        ProductionOrderHeader.RESET;
        ProductionOrderHeader.SETRANGE(
          Status,
          ProductionOrderHeader.Status::Released,
          ProductionOrderHeader.Status::Finished);
        ProductionOrderHeader.SETFILTER("No.",DocNoFilter);
        InsertIntoDocEntry(
          DATABASE::"Production Order",0,Text99000000,ProductionOrderHeader.COUNT);
      END;
      IF TransShptHeader.READPERMISSION THEN BEGIN
        TransShptHeader.RESET;
        TransShptHeader.SETFILTER("No.",DocNoFilter);
        TransShptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Transfer Shipment Header",0,Text019,TransShptHeader.COUNT);
      END;
      IF TransRcptHeader.READPERMISSION THEN BEGIN
        TransRcptHeader.RESET;
        TransRcptHeader.SETFILTER("No.",DocNoFilter);
        TransRcptHeader.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Transfer Receipt Header",0,Text020,TransRcptHeader.COUNT);
      END;
      IF PostedWhseShptLine.READPERMISSION THEN BEGIN
        PostedWhseShptLine.RESET;
        PostedWhseShptLine.SETCURRENTKEY("Posted Source No.","Posting Date");
        PostedWhseShptLine.SETFILTER("Posted Source No.",DocNoFilter);
        PostedWhseShptLine.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Posted Whse. Shipment Line",0,
          PostedWhseShptLine.TABLECAPTION,PostedWhseShptLine.COUNT);
      END;
      IF PostedWhseRcptLine.READPERMISSION THEN BEGIN
        PostedWhseRcptLine.RESET;
        PostedWhseRcptLine.SETCURRENTKEY("Posted Source No.","Posting Date");
        PostedWhseRcptLine.SETFILTER("Posted Source No.",DocNoFilter);
        PostedWhseRcptLine.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Posted Whse. Receipt Line",0,
          PostedWhseRcptLine.TABLECAPTION,PostedWhseRcptLine.COUNT);
      END;
      IF GLEntry.READPERMISSION THEN BEGIN
        GLEntry.RESET;
        GLEntry.SETCURRENTKEY("Document No.","Posting Date");
        GLEntry.SETFILTER("Document No.",DocNoFilter);
        GLEntry.SETFILTER("Bill No.",CarteraDocNoFilter);
        GLEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"G/L Entry",0,GLEntry.TABLECAPTION,GLEntry.COUNT);
      END;
      IF VATEntry.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        VATEntry.RESET;
        VATEntry.SETCURRENTKEY("Document No.","Posting Date");
        VATEntry.SETFILTER("Document No.",DocNoFilter);
        VATEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"VAT Entry",0,VATEntry.TABLECAPTION,VATEntry.COUNT);
      END;
      IF CustLedgEntry.READPERMISSION THEN BEGIN
        CustLedgEntry.RESET;
        CustLedgEntry.SETCURRENTKEY("Document No.","Document Type");
        CustLedgEntry.SETFILTER("Document No.",DocNoFilter);
        CustLedgEntry.SETFILTER("Bill No.",CarteraDocNoFilter);
        CustLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Cust. Ledger Entry",0,CustLedgEntry.TABLECAPTION,CustLedgEntry.COUNT);
        IF CustLedgEntry.FIND('-') THEN
          FindCarteraDocs(CarteraDoc.Type::Receivable);
      END;
      IF DtldCustLedgEntry.READPERMISSION THEN BEGIN
        DtldCustLedgEntry.RESET;
        DtldCustLedgEntry.SETCURRENTKEY("Document No.","Document Type");
        DtldCustLedgEntry.SETFILTER("Document No.",DocNoFilter);
        DtldCustLedgEntry.SETFILTER("Bill No.",CarteraDocNoFilter);
        DtldCustLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Detailed Cust. Ledg. Entry",0,DtldCustLedgEntry.TABLECAPTION,DtldCustLedgEntry.COUNT);
      END;
      IF ReminderEntry.READPERMISSION THEN BEGIN
        ReminderEntry.RESET;
        ReminderEntry.SETCURRENTKEY(Type,"No.");
        ReminderEntry.SETFILTER("No.",DocNoFilter);
        ReminderEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Reminder/Fin. Charge Entry",0,ReminderEntry.TABLECAPTION,ReminderEntry.COUNT);
      END;
      IF VendLedgEntry.READPERMISSION THEN BEGIN
        VendLedgEntry.RESET;
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETFILTER("Document No.",DocNoFilter);
        VendLedgEntry.SETFILTER("Bill No.",CarteraDocNoFilter);
        VendLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Vendor Ledger Entry",0,VendLedgEntry.TABLECAPTION,VendLedgEntry.COUNT);
        IF VendLedgEntry.FIND('-') THEN
          FindCarteraDocs(CarteraDoc.Type::Payable);
      END;
      IF DtldVendLedgEntry.READPERMISSION THEN BEGIN
        DtldVendLedgEntry.RESET;
        DtldVendLedgEntry.SETCURRENTKEY("Document No.");
        DtldVendLedgEntry.SETFILTER("Document No.",DocNoFilter);
        DtldVendLedgEntry.SETFILTER("Bill No.",CarteraDocNoFilter);
        DtldVendLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Detailed Vendor Ledg. Entry",0,DtldVendLedgEntry.TABLECAPTION,DtldVendLedgEntry.COUNT);
      END;
      IF ItemLedgEntry.READPERMISSION THEN BEGIN
        ItemLedgEntry.RESET;
        ItemLedgEntry.SETCURRENTKEY("Document No.");
        ItemLedgEntry.SETFILTER("Document No.",DocNoFilter);
        ItemLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Item Ledger Entry",0,ItemLedgEntry.TABLECAPTION,ItemLedgEntry.COUNT);
      END;
      IF ValueEntry.READPERMISSION THEN BEGIN
        ValueEntry.RESET;
        ValueEntry.SETCURRENTKEY("Document No.");
        ValueEntry.SETFILTER("Document No.",DocNoFilter);
        ValueEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Value Entry",0,ValueEntry.TABLECAPTION,ValueEntry.COUNT);
      END;
      IF PhysInvtLedgEntry.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        PhysInvtLedgEntry.RESET;
        PhysInvtLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        PhysInvtLedgEntry.SETFILTER("Document No.",DocNoFilter);
        PhysInvtLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Phys. Inventory Ledger Entry",0,PhysInvtLedgEntry.TABLECAPTION,PhysInvtLedgEntry.COUNT);
      END;
      IF ResLedgEntry.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        ResLedgEntry.RESET;
        ResLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        ResLedgEntry.SETFILTER("Document No.",DocNoFilter);
        ResLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Res. Ledger Entry",0,ResLedgEntry.TABLECAPTION,ResLedgEntry.COUNT);
      END;
      IF JobLedgEntry.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        JobLedgEntry.RESET;
        JobLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        JobLedgEntry.SETFILTER("Document No.",DocNoFilter);
        JobLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Job Ledger Entry",0,JobLedgEntry.TABLECAPTION,JobLedgEntry.COUNT);
      END;
      IF BankAccLedgEntry.READPERMISSION THEN BEGIN
        BankAccLedgEntry.RESET;
        BankAccLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        BankAccLedgEntry.SETFILTER("Document No.",DocNoFilter);
        BankAccLedgEntry.SETFILTER("Bill No.",CarteraDocNoFilter);
        BankAccLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Bank Account Ledger Entry",0,BankAccLedgEntry.TABLECAPTION,BankAccLedgEntry.COUNT);
      END;
      IF CheckLedgEntry.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        CheckLedgEntry.RESET;
        CheckLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        CheckLedgEntry.SETFILTER("Document No.",DocNoFilter);
        CheckLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Check Ledger Entry",0,CheckLedgEntry.TABLECAPTION,CheckLedgEntry.COUNT);
      END;
      IF FALedgEntry.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        FALedgEntry.RESET;
        FALedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        FALedgEntry.SETFILTER("Document No.",DocNoFilter);
        FALedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"FA Ledger Entry",0,FALedgEntry.TABLECAPTION,FALedgEntry.COUNT);
      END;
      IF MaintenanceLedgEntry.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        MaintenanceLedgEntry.RESET;
        MaintenanceLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        MaintenanceLedgEntry.SETFILTER("Document No.",DocNoFilter);
        MaintenanceLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Maintenance Ledger Entry",0,MaintenanceLedgEntry.TABLECAPTION,MaintenanceLedgEntry.COUNT);
      END;
      IF InsuranceCovLedgEntry.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        InsuranceCovLedgEntry.RESET;
        InsuranceCovLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        InsuranceCovLedgEntry.SETFILTER("Document No.",DocNoFilter);
        InsuranceCovLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Ins. Coverage Ledger Entry",0,InsuranceCovLedgEntry.TABLECAPTION,InsuranceCovLedgEntry.COUNT);
      END;
      IF CapacityLedgEntry.READPERMISSION THEN BEGIN
        CapacityLedgEntry.RESET;
        CapacityLedgEntry.SETCURRENTKEY("Document No.","Posting Date");
        CapacityLedgEntry.SETFILTER("Document No.",DocNoFilter);
        CapacityLedgEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Capacity Ledger Entry",0,CapacityLedgEntry.TABLECAPTION,CapacityLedgEntry.COUNT);
      END;
      IF WhseEntry.READPERMISSION THEN BEGIN
        WhseEntry.RESET;
        WhseEntry.SETCURRENTKEY("Reference No.","Registering Date");
        WhseEntry.SETFILTER("Reference No.",DocNoFilter);
        WhseEntry.SETFILTER("Registering Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Warehouse Entry",0,WhseEntry.TABLECAPTION,WhseEntry.COUNT);
      END;

      IF ServLedgerEntry.READPERMISSION THEN BEGIN
        ServLedgerEntry.RESET;
        ServLedgerEntry.SETCURRENTKEY("Document No.","Posting Date");
        ServLedgerEntry.SETFILTER("Document No.",DocNoFilter);
        ServLedgerEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Service Ledger Entry",0,ServLedgerEntry.TABLECAPTION,ServLedgerEntry.COUNT);
      END;
      IF WarrantyLedgerEntry.READPERMISSION THEN BEGIN
        WarrantyLedgerEntry.RESET;
        WarrantyLedgerEntry.SETCURRENTKEY("Document No.","Posting Date");
        WarrantyLedgerEntry.SETFILTER("Document No.",DocNoFilter);
        WarrantyLedgerEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Warranty Ledger Entry",0,WarrantyLedgerEntry.TABLECAPTION,WarrantyLedgerEntry.COUNT);
      END;

      IF CostEntry.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        CostEntry.RESET;
        CostEntry.SETCURRENTKEY("Document No.","Posting Date");
        CostEntry.SETFILTER("Document No.",DocNoFilter);
        CostEntry.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Cost Entry",0,CostEntry.TABLECAPTION,CostEntry.COUNT);
      END;

      IF PostedBillGr.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        PostedBillGr.RESET;
        PostedBillGr.SETCURRENTKEY("No.");
        PostedBillGr.SETFILTER("No.",DocNoFilter);
        PostedBillGr.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Posted Bill Group",0,PostedBillGr.TABLECAPTION,PostedBillGr.COUNT);
      END;
      IF ClosedBillGr.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        ClosedBillGr.RESET;
        ClosedBillGr.SETCURRENTKEY("No.");
        ClosedBillGr.SETFILTER("No.",DocNoFilter);
        ClosedBillGr.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Closed Bill Group",0,ClosedBillGr.TABLECAPTION,ClosedBillGr.COUNT);
      END;
      IF PostedPmtOrd.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        PostedPmtOrd.RESET;
        PostedPmtOrd.SETCURRENTKEY("No.");
        PostedPmtOrd.SETFILTER("No.",DocNoFilter);
        PostedPmtOrd.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Posted Payment Order",0,PostedPmtOrd.TABLECAPTION,PostedPmtOrd.COUNT);
      END;
      IF ClosedPmtOrd.READPERMISSION AND (CarteraDocNoFilter = '') THEN BEGIN
        ClosedPmtOrd.RESET;
        ClosedPmtOrd.SETCURRENTKEY("No.");
        ClosedPmtOrd.SETFILTER("No.",DocNoFilter);
        ClosedPmtOrd.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Closed Payment Order",0,ClosedPmtOrd.TABLECAPTION,ClosedPmtOrd.COUNT);
      END;

      DocExists := FINDFIRST;

      SetSource(0D,'','',0,'');
      IF DocExists THEN BEGIN
        IF (NoOfRecords(DATABASE::"Sales Invoice Header") + NoOfRecords(DATABASE::"Sales Cr.Memo Header") +
            NoOfRecords(DATABASE::"Sales Shipment Header") + NoOfRecords(DATABASE::"Issued Reminder Header") +
            NoOfRecords(DATABASE::"Issued Fin. Charge Memo Header") + NoOfRecords(DATABASE::"Purch. Inv. Header") +
            NoOfRecords(DATABASE::"Return Shipment Header") + NoOfRecords(DATABASE::"Return Receipt Header") +
            NoOfRecords(DATABASE::"Purch. Cr. Memo Hdr.") + NoOfRecords(DATABASE::"Purch. Rcpt. Header") +
            NoOfRecords(DATABASE::"Service Invoice Header") + NoOfRecords(DATABASE::"Service Cr.Memo Header") +
            NoOfRecords(DATABASE::"Service Shipment Header") +
            NoOfRecords(DATABASE::"Transfer Shipment Header") + NoOfRecords(DATABASE::"Transfer Receipt Header") <= 1)
        THEN BEGIN
          // Service Management
          IF NoOfRecords(DATABASE::"Service Ledger Entry") = 1 THEN BEGIN
            ServLedgerEntry.FINDFIRST;
            IF ServLedgerEntry.Type = ServLedgerEntry.Type::"Service Contract" THEN
              SetSource(
                ServLedgerEntry."Posting Date",FORMAT(ServLedgerEntry."Document Type"),ServLedgerEntry."Document No.",
                2,ServLedgerEntry."Service Contract No.")
            ELSE
              SetSource(
                ServLedgerEntry."Posting Date",FORMAT(ServLedgerEntry."Document Type"),ServLedgerEntry."Document No.",
                2,ServLedgerEntry."Service Order No.")
          END;
          IF NoOfRecords(DATABASE::"Warranty Ledger Entry") = 1 THEN BEGIN
            WarrantyLedgerEntry.FINDFIRST;
            SetSource(
              WarrantyLedgerEntry."Posting Date",'',WarrantyLedgerEntry."Document No.",
              2,WarrantyLedgerEntry."Service Order No.")
          END;

          // Sales
          IF NoOfRecords(DATABASE::"Cust. Ledger Entry") = 1 THEN BEGIN
            CustLedgEntry.FINDFIRST;
            SetSource(
              CustLedgEntry."Posting Date",FORMAT(CustLedgEntry."Document Type"),CustLedgEntry."Document No.",
              1,CustLedgEntry."Customer No.");
          END;
          IF NoOfRecords(DATABASE::"Detailed Cust. Ledg. Entry") = 1 THEN BEGIN
            DtldCustLedgEntry.FINDFIRST;
            SetSource(
              DtldCustLedgEntry."Posting Date",FORMAT(DtldCustLedgEntry."Document Type"),DtldCustLedgEntry."Document No.",
              1,DtldCustLedgEntry."Customer No.");
          END;
          IF NoOfRecords(DATABASE::"Sales Invoice Header") = 1 THEN BEGIN
            SalesInvHeader.FINDFIRST;
            SetSource(
              SalesInvHeader."Posting Date",FORMAT("Table Name"),SalesInvHeader."No.",
              1,SalesInvHeader."Bill-to Customer No.");
          END;
          IF NoOfRecords(DATABASE::"Sales Cr.Memo Header") = 1 THEN BEGIN
            SalesCrMemoHeader.FINDFIRST;
            SetSource(
              SalesCrMemoHeader."Posting Date",FORMAT("Table Name"),SalesCrMemoHeader."No.",
              1,SalesCrMemoHeader."Bill-to Customer No.");
          END;
          IF NoOfRecords(DATABASE::"Return Receipt Header") = 1 THEN BEGIN
            ReturnRcptHeader.FINDFIRST;
            SetSource(
              ReturnRcptHeader."Posting Date",FORMAT("Table Name"),ReturnRcptHeader."No.",
              1,ReturnRcptHeader."Sell-to Customer No.");
          END;
          IF NoOfRecords(DATABASE::"Sales Shipment Header") = 1 THEN BEGIN
            SalesShptHeader.FINDFIRST;
            SetSource(
              SalesShptHeader."Posting Date",FORMAT("Table Name"),SalesShptHeader."No.",
              1,SalesShptHeader."Sell-to Customer No.");
          END;
          IF NoOfRecords(DATABASE::"Posted Whse. Shipment Line") = 1 THEN BEGIN
            PostedWhseShptLine.FINDFIRST;
            SetSource(
              PostedWhseShptLine."Posting Date",FORMAT("Table Name"),PostedWhseShptLine."No.",
              1,PostedWhseShptLine."Destination No.");
          END;
          IF NoOfRecords(DATABASE::"Issued Reminder Header") = 1 THEN BEGIN
            IssuedReminderHeader.FINDFIRST;
            SetSource(
              IssuedReminderHeader."Posting Date",FORMAT("Table Name"),IssuedReminderHeader."No.",
              1,IssuedReminderHeader."Customer No.");
          END;
          IF NoOfRecords(DATABASE::"Issued Fin. Charge Memo Header") = 1 THEN BEGIN
            IssuedFinChrgMemoHeader.FINDFIRST;
            SetSource(
              IssuedFinChrgMemoHeader."Posting Date",FORMAT("Table Name"),IssuedFinChrgMemoHeader."No.",
              1,IssuedFinChrgMemoHeader."Customer No.");
          END;

          IF NoOfRecords(DATABASE::"Service Invoice Header") = 1 THEN BEGIN
            ServInvHeader.FIND('-');
            SetSource(
              ServInvHeader."Posting Date",FORMAT("Table Name"),ServInvHeader."No.",
              1,ServInvHeader."Bill-to Customer No.");
          END;
          IF NoOfRecords(DATABASE::"Service Cr.Memo Header") = 1 THEN BEGIN
            ServCrMemoHeader.FIND('-');
            SetSource(
              ServCrMemoHeader."Posting Date",FORMAT("Table Name"),ServCrMemoHeader."No.",
              1,ServCrMemoHeader."Bill-to Customer No.");
          END;
          IF NoOfRecords(DATABASE::"Service Shipment Header") = 1 THEN BEGIN
            ServShptHeader.FIND('-');
            SetSource(
              ServShptHeader."Posting Date",FORMAT("Table Name"),ServShptHeader."No.",
              1,ServShptHeader."Customer No.");
          END;

          // Purchase
          IF NoOfRecords(DATABASE::"Vendor Ledger Entry") = 1 THEN BEGIN
            VendLedgEntry.FINDFIRST;
            SetSource(
              VendLedgEntry."Posting Date",FORMAT(VendLedgEntry."Document Type"),VendLedgEntry."Document No.",
              2,VendLedgEntry."Vendor No.");
          END;
          IF NoOfRecords(DATABASE::"Detailed Vendor Ledg. Entry") = 1 THEN BEGIN
            DtldVendLedgEntry.FINDFIRST;
            SetSource(
              DtldVendLedgEntry."Posting Date",FORMAT(DtldVendLedgEntry."Document Type"),DtldVendLedgEntry."Document No.",
              2,DtldVendLedgEntry."Vendor No.");
          END;
          IF NoOfRecords(DATABASE::"Purch. Inv. Header") = 1 THEN BEGIN
            PurchInvHeader.FINDFIRST;
            SetSource(
              PurchInvHeader."Posting Date",FORMAT("Table Name"),PurchInvHeader."No.",
              2,PurchInvHeader."Pay-to Vendor No.");
          END;
          IF NoOfRecords(DATABASE::"Purch. Cr. Memo Hdr.") = 1 THEN BEGIN
            PurchCrMemoHeader.FINDFIRST;
            SetSource(
              PurchCrMemoHeader."Posting Date",FORMAT("Table Name"),PurchCrMemoHeader."No.",
              2,PurchCrMemoHeader."Pay-to Vendor No.");
          END;
          IF NoOfRecords(DATABASE::"Return Shipment Header") = 1 THEN BEGIN
            ReturnShptHeader.FINDFIRST;
            SetSource(
              ReturnShptHeader."Posting Date",FORMAT("Table Name"),ReturnShptHeader."No.",
              2,ReturnShptHeader."Buy-from Vendor No.");
          END;
          IF NoOfRecords(DATABASE::"Purch. Rcpt. Header") = 1 THEN BEGIN
            PurchRcptHeader.FINDFIRST;
            SetSource(
              PurchRcptHeader."Posting Date",FORMAT("Table Name"),PurchRcptHeader."No.",
              2,PurchRcptHeader."Buy-from Vendor No.");
          END;
          IF NoOfRecords(DATABASE::"Posted Whse. Receipt Line") = 1 THEN BEGIN
            PostedWhseRcptLine.FINDFIRST;
            SetSource(
              PostedWhseRcptLine."Posting Date",FORMAT("Table Name"),PostedWhseRcptLine."No.",
              2,'');
          END;
        END ELSE BEGIN
          IF DocNoFilter <> '' THEN
            IF PostingDateFilter = '' THEN
              MESSAGE(Text011)
            ELSE
              MESSAGE(Text012);
        END;
      END ELSE
        IF PostingDateFilter = '' THEN
          MESSAGE(Text013)
        ELSE
          MESSAGE(Text014);

      UpdateFormAfterFindRecords;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE UpdateFormAfterFindRecords@15();
    BEGIN
      CurrForm.Show.ENABLED := DocExists;
      CurrForm.Print.ENABLED := DocExists;
      CurrForm.UPDATE(FALSE);
      DocExists := FINDFIRST;
      IF DocExists THEN
        CurrForm."Table Name".ACTIVATE;
    END;

    LOCAL PROCEDURE InsertIntoDocEntry@3(DocTableID@1000 : Integer;DocType@1003 : Option;DocTableName@1001 : Text[1024];DocNoOfRecords@1002 : Integer);
    BEGIN
      IF DocNoOfRecords = 0 THEN
        EXIT;
      INIT;
      "Entry No." := "Entry No." + 1;
      "Table ID" := DocTableID;
      "Document Type" := DocType;
      "Table Name" := COPYSTR(DocTableName,1,MAXSTRLEN("Table Name"));
      "No. of Records" := DocNoOfRecords;
      INSERT;
    END;

    LOCAL PROCEDURE NoOfRecords@4(TableID@1000 : Integer) : Integer;
    BEGIN
      SETRANGE("Table ID",TableID);
      IF NOT FINDFIRST THEN
        INIT;
      SETRANGE("Table ID");
      EXIT("No. of Records");
    END;

    LOCAL PROCEDURE SetSource@5(PostingDate@1000 : Date;DocType2@1001 : Text[50];DocNo@1002 : Text[50];SourceType2@1003 : Integer;SourceNo2@1004 : Code[20]);
    BEGIN
      IF SourceType2 = 0 THEN BEGIN
        DocType := '';
        SourceType := '';
        SourceNo := '';
        SourceName := '';
      END ELSE BEGIN
        DocType := DocType2;
        SourceNo := SourceNo2;
        SETRANGE("Document No.",DocNo);
        SETRANGE("Posting Date",PostingDate);
        DocNoFilter := GETFILTER("Document No.");
        PostingDateFilter := GETFILTER("Posting Date");
        CASE SourceType2 OF
          1:
            BEGIN
              SourceType := Cust.TABLECAPTION;
              IF NOT Cust.GET(SourceNo) THEN
                Cust.INIT;
              SourceName := Cust.Name;
            END;
          2:
            BEGIN
              SourceType := Vend.TABLECAPTION;
              IF NOT Vend.GET(SourceNo) THEN
                Vend.INIT;
              SourceName := Vend.Name;
            END;
        END;
      END;
      CurrForm.DocType.ENABLED := SourceType2 <> 0;
      CurrForm.SourceType.ENABLED := SourceType2 <> 0;
      CurrForm.SourceNo.ENABLED := SourceType2 <> 0;
      CurrForm.SourceName.ENABLED := SourceType2 <> 0;
    END;

    LOCAL PROCEDURE ShowRecords@6();
    BEGIN
      IF ItemTrackingSearch THEN
        ItemTrackingNavigateMgt.Show("Table ID")
      ELSE BEGIN
        CASE "Table ID" OF
          DATABASE::"Sales Header":
            CASE "Document Type" OF
              "Document Type"::Order:
                IF "No. of Records" = 1 THEN
                  FORM.RUN(FORM::"Sales Order",SOSalesHeader)
                ELSE
                  FORM.RUN(0,SOSalesHeader);
              "Document Type"::Invoice:
                IF "No. of Records" = 1 THEN
                  FORM.RUN(FORM::"Sales Invoice",SISalesHeader)
                ELSE
                  FORM.RUN(0,SISalesHeader);
              "Document Type"::"Return Order":
                IF "No. of Records" = 1 THEN
                  FORM.RUN(FORM::"Sales Return Order",SROSalesHeader)
                ELSE
                  FORM.RUN(0,SROSalesHeader);
              "Document Type"::"Credit Memo":
                IF "No. of Records" = 1 THEN
                  FORM.RUN(FORM::"Sales Credit Memo",SCMSalesHeader)
                ELSE
                  FORM.RUN(0,SCMSalesHeader);
            END;
          DATABASE::"Sales Invoice Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Posted Sales Invoice",SalesInvHeader)
            ELSE
              FORM.RUN(0,SalesInvHeader);
          DATABASE::"Sales Cr.Memo Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Posted Sales Credit Memo",SalesCrMemoHeader)
            ELSE
              FORM.RUN(0,SalesCrMemoHeader);
          DATABASE::"Return Receipt Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Posted Return Receipt",ReturnRcptHeader)
            ELSE
              FORM.RUN(0,ReturnRcptHeader);
          DATABASE::"Sales Shipment Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Posted Sales Shipment",SalesShptHeader)
            ELSE
              FORM.RUN(0,SalesShptHeader);
          DATABASE::"Issued Reminder Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Issued Reminder",IssuedReminderHeader)
            ELSE
              FORM.RUN(0,IssuedReminderHeader);
          DATABASE::"Issued Fin. Charge Memo Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Issued Finance Charge Memo",IssuedFinChrgMemoHeader)
            ELSE
              FORM.RUN(0,IssuedFinChrgMemoHeader);
          DATABASE::"Purch. Inv. Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Posted Purchase Invoice",PurchInvHeader)
            ELSE
              FORM.RUN(0,PurchInvHeader);
          DATABASE::"Purch. Cr. Memo Hdr.":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Posted Purchase Credit Memo",PurchCrMemoHeader)
            ELSE
              FORM.RUN(0,PurchCrMemoHeader);
          DATABASE::"Return Shipment Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Posted Return Shipment",ReturnShptHeader)
            ELSE
              FORM.RUN(0,ReturnShptHeader);
          DATABASE::"Purch. Rcpt. Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Posted Purchase Receipt",PurchRcptHeader)
            ELSE
              FORM.RUN(0,PurchRcptHeader);
          DATABASE::"Production Order":
            FORM.RUN(0,ProductionOrderHeader);
          DATABASE::"Transfer Shipment Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Posted Transfer Shipment",TransShptHeader)
            ELSE
              FORM.RUN(0,TransShptHeader);
          DATABASE::"Transfer Receipt Header":
            IF "No. of Records" = 1 THEN
              FORM.RUN(FORM::"Posted Transfer Receipt",TransRcptHeader)
            ELSE
              FORM.RUN(0,TransRcptHeader);
          DATABASE::"Posted Whse. Shipment Line":
            FORM.RUN(0,PostedWhseShptLine);
          DATABASE::"Posted Whse. Receipt Line":
            FORM.RUN(0,PostedWhseRcptLine);
          DATABASE::"G/L Entry":
            FORM.RUN(0,GLEntry);
          DATABASE::"VAT Entry":
            FORM.RUN(0,VATEntry);
          DATABASE::"Detailed Cust. Ledg. Entry":
            FORM.RUN(0,DtldCustLedgEntry);
          DATABASE::"Cust. Ledger Entry":
            FORM.RUN(0,CustLedgEntry);
          DATABASE::"Reminder/Fin. Charge Entry":
            FORM.RUN(0,ReminderEntry);
          DATABASE::"Vendor Ledger Entry":
            FORM.RUN(0,VendLedgEntry);
          DATABASE::"Detailed Vendor Ledg. Entry":
            FORM.RUN(0,DtldVendLedgEntry);
          DATABASE::"Item Ledger Entry":
            FORM.RUN(0,ItemLedgEntry);
          DATABASE::"Value Entry":
            FORM.RUN(0,ValueEntry);
          DATABASE::"Phys. Inventory Ledger Entry":
            FORM.RUN(0,PhysInvtLedgEntry);
          DATABASE::"Res. Ledger Entry":
            FORM.RUN(0,ResLedgEntry);
          DATABASE::"Job Ledger Entry":
            FORM.RUN(0,JobLedgEntry);
          DATABASE::"Bank Account Ledger Entry":
            FORM.RUN(0,BankAccLedgEntry);
          DATABASE::"Check Ledger Entry":
            FORM.RUN(0,CheckLedgEntry);
          DATABASE::"FA Ledger Entry":
            FORM.RUN(0,FALedgEntry);
          DATABASE::"Maintenance Ledger Entry":
            FORM.RUN(0,MaintenanceLedgEntry);
          DATABASE::"Ins. Coverage Ledger Entry":
            FORM.RUN(0,InsuranceCovLedgEntry);
          DATABASE::"Capacity Ledger Entry":
            FORM.RUN(0,CapacityLedgEntry);
          DATABASE::"Warehouse Entry":
            FORM.RUN(0,WhseEntry);
          DATABASE::"Service Header":
            CASE "Document Type" OF
              "Document Type"::Order:
                FORM.RUN(0,SOServHeader);
              "Document Type"::Invoice:
                FORM.RUN(0,SIServHeader);
              "Document Type"::"Credit Memo":
                FORM.RUN(0,SCMServHeader);
            END;
          DATABASE::"Service Invoice Header":
            FORM.RUN(0,ServInvHeader);
          DATABASE::"Service Cr.Memo Header":
            FORM.RUN(0,ServCrMemoHeader);
          DATABASE::"Service Shipment Header":
            FORM.RUN(0,ServShptHeader);
          DATABASE::"Service Ledger Entry":
            FORM.RUN(0,ServLedgerEntry);
          DATABASE::"Warranty Ledger Entry":
            FORM.RUN(0,WarrantyLedgerEntry);
          DATABASE::"Cartera Doc.":
            FORM.RUN(0,CarteraDoc);
          DATABASE::"Posted Cartera Doc.":
            FORM.RUN(0,PostedCarteraDoc);
          DATABASE::"Closed Cartera Doc.":
            FORM.RUN(0,ClosedCarteraDoc);
          DATABASE::"Posted Bill Group":
            FORM.RUN(0,PostedBillGr);
          DATABASE::"Closed Bill Group":
            FORM.RUN(0,ClosedBillGr);
          DATABASE::"Posted Payment Order":
            FORM.RUN(0,PostedPmtOrd);
          DATABASE::"Closed Payment Order":
            FORM.RUN(0,ClosedPmtOrd);
          DATABASE::"Cost Entry":
            FORM.RUN(0,CostEntry);
        END;
      END;
    END;

    LOCAL PROCEDURE SetPostingDate@9(PostingDate@1000 : Text[250]);
    BEGIN
      IF ApplicationManagement.MakeDateFilter(PostingDate) = 0 THEN;
      SETFILTER("Posting Date",PostingDate);
      PostingDateFilter := GETFILTER("Posting Date");
    END;

    LOCAL PROCEDURE SetDocNo@10(DocNo@1000 : Text[250]);
    BEGIN
      SETFILTER("Document No.",DocNo);
      DocNoFilter := GETFILTER("Document No.");
      PostingDateFilter := GETFILTER("Posting Date");
    END;

    LOCAL PROCEDURE ClearSourceInfo@7();
    BEGIN
      IF DocExists THEN BEGIN
        DocExists := FALSE;
        DELETEALL;
        CurrForm.Show.ENABLED := FALSE;
        SetSource(0D,'','',0,'');
        CurrForm.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE MakeExtFilter@11(VAR DateFilter@1000 : Code[250];AddDate@1001 : Date;VAR DocNoFilter@1002 : Code[250];AddDocNo@1003 : Code[20]);
    BEGIN
      IF DateFilter = '' THEN
        DateFilter := FORMAT(AddDate)
      ELSE
        IF STRPOS(DateFilter,FORMAT(AddDate)) = 0 THEN
          IF MAXSTRLEN(DateFilter) >= STRLEN(DateFilter + '|' + FORMAT(AddDate)) THEN
            DateFilter := DateFilter + '|' + FORMAT(AddDate)
          ELSE
            TooLongFilter;

      IF DocNoFilter = '' THEN
        DocNoFilter := AddDocNo
      ELSE
        IF STRPOS(DocNoFilter,AddDocNo) = 0 THEN
          IF MAXSTRLEN(DocNoFilter) >= STRLEN(DocNoFilter + '|' + AddDocNo) THEN
            DocNoFilter := DocNoFilter + '|' + AddDocNo
          ELSE
            TooLongFilter;
    END;

    LOCAL PROCEDURE FindPush@13();
    BEGIN
      IF (DocNoFilter = '') AND (CarteraDocNoFilter = '') AND (PostingDateFilter = '') AND
         (NOT ItemTrackingSearch) AND
         ((ContactType <> 0) OR (ContactNo <> '') OR (ExtDocNo <> ''))
      THEN
        FindExtRecords
      ELSE
        IF ItemTrackingSearch AND
          (DocNoFilter = '') AND (PostingDateFilter = '') AND
          (ContactType = 0) AND (ContactNo = '') AND (ExtDocNo = '') THEN
          FindTrackingRecords
        ELSE
          FindRecords;
    END;

    LOCAL PROCEDURE TooLongFilter@12();
    BEGIN
      IF ContactNo = '' THEN
        ERROR(Text015)
      ELSE
        ERROR(Text016);
    END;

    LOCAL PROCEDURE FindUnpostedSalesDocs@14(DocType@1001 : Option;DocTableName@1003 : Text[100];VAR SalesHeader@1000 : Record 36);
    BEGIN
      IF SalesHeader.READPERMISSION THEN BEGIN
        SalesHeader.RESET;
        SalesHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
        SalesHeader.SETFILTER("Sell-to Customer No.",ContactNo);
        SalesHeader.SETFILTER("External Document No.",ExtDocNo);
        SalesHeader.SETRANGE("Document Type",DocType);
        InsertIntoDocEntry(DATABASE::"Sales Header",DocType,DocTableName,SalesHeader.COUNT);
      END;
    END;

    LOCAL PROCEDURE FindUnpostedServDocs@16(DocType@1001 : Option;DocTableName@1003 : Text[100];VAR ServHeader@1000 : Record 5900);
    BEGIN
      IF ServHeader.READPERMISSION THEN BEGIN
        IF ExtDocNo = '' THEN BEGIN
          ServHeader.RESET;
          ServHeader.SETCURRENTKEY("Customer No.");
          ServHeader.SETFILTER("Customer No.",ContactNo);
          ServHeader.SETRANGE("Document Type",DocType);
          InsertIntoDocEntry(DATABASE::"Service Header",DocType,DocTableName,ServHeader.COUNT);
        END;
      END;
    END;

    PROCEDURE FindTrackingRecords@22();
    VAR
      DocNoOfRecords@1000 : Integer;
    BEGIN
      Window.OPEN(Text002);
      DELETEALL;
      "Entry No." := 0;

      CLEAR(ItemTrackingNavigateMgt);
      ItemTrackingNavigateMgt.FindTrackingRecords(SerialNoFilter,LotNoFilter,'','');

      ItemTrackingNavigateMgt.Collect(TempRecordBuffer);
      TempRecordBuffer.SETCURRENTKEY("Table No.","Search Record ID");
      IF TempRecordBuffer.FIND('-') THEN
        REPEAT
          TempRecordBuffer.SETRANGE("Table No.",TempRecordBuffer."Table No.");

          DocNoOfRecords := 0;
          IF TempRecordBuffer.FIND('-') THEN
            REPEAT
              TempRecordBuffer.SETRANGE("Search Record ID",TempRecordBuffer."Search Record ID");
              TempRecordBuffer.FIND('+');
              TempRecordBuffer.SETRANGE("Search Record ID");
              DocNoOfRecords += 1;
            UNTIL TempRecordBuffer.NEXT = 0;

          InsertIntoDocEntry(
            TempRecordBuffer."Table No.",0,TempRecordBuffer."Table Name",DocNoOfRecords);

          TempRecordBuffer.SETRANGE("Table No.");
        UNTIL TempRecordBuffer.NEXT = 0;

      DocExists := FIND('-');

      UpdateFormAfterFindRecords;
      Window.CLOSE;
    END;

    PROCEDURE SetTracking@20(SerialNo@1000 : Code[20];LotNo@1001 : Code[20]);
    BEGIN
      NewSerialNo := SerialNo;
      NewLotNo := LotNo;
    END;

    PROCEDURE ItemTrackingSearch@19() : Boolean;
    BEGIN
      EXIT((SerialNoFilter <> '') OR (LotNoFilter <> ''));
    END;

    PROCEDURE ClearTrackingInfo@17();
    BEGIN
      SerialNoFilter := '';
      LotNoFilter := '';
    END;

    PROCEDURE ClearInfo@18();
    BEGIN
      SetDocNo('');
      SetPostingDate('');
      ContactType := ContactType::" ";
      ContactNo := '';
      ExtDocNo := '';
    END;

    PROCEDURE FindCarteraDocs@1100000(AccountType@1100000 : 'Customer,Vendor');
    BEGIN
      IF CarteraDoc.READPERMISSION THEN BEGIN
        CarteraDoc.RESET;
        CarteraDoc.SETCURRENTKEY(Type,"Document No.");
        CarteraDoc.SETFILTER("Document No.",DocNoFilter);
        CarteraDoc.SETFILTER("No.",CarteraDocNoFilter);  //C2
        CarteraDoc.SETFILTER("Posting Date",PostingDateFilter);
        CarteraDoc.SETRANGE(Type,AccountType);
        InsertIntoDocEntry(
          DATABASE::"Cartera Doc.",0,CarteraDoc.TABLECAPTION,CarteraDoc.COUNT);
      END;
      IF PostedCarteraDoc.READPERMISSION THEN BEGIN
        PostedCarteraDoc.RESET;
        PostedCarteraDoc.SETCURRENTKEY(Type,"Document No.");
        PostedCarteraDoc.SETFILTER("Document No.",DocNoFilter);
        PostedCarteraDoc.SETFILTER("No.",CarteraDocNoFilter);  //C2
        PostedCarteraDoc.SETFILTER("Posting Date",PostingDateFilter);
        InsertIntoDocEntry(
          DATABASE::"Posted Cartera Doc.",0,PostedCarteraDoc.TABLECAPTION,PostedCarteraDoc.COUNT);
      END;
      IF ClosedCarteraDoc.READPERMISSION THEN BEGIN
        ClosedCarteraDoc.RESET;
        ClosedCarteraDoc.SETCURRENTKEY(Type,"Document No.");
        ClosedCarteraDoc.SETFILTER("Document No.",DocNoFilter);
        ClosedCarteraDoc.SETFILTER("No.",CarteraDocNoFilter);  //C2
        ClosedCarteraDoc.SETFILTER("Posting Date",PostingDateFilter);
        ClosedCarteraDoc.SETRANGE(Type,AccountType);
        InsertIntoDocEntry(
          DATABASE::"Closed Cartera Doc.",0,ClosedCarteraDoc.TABLECAPTION,ClosedCarteraDoc.COUNT);
      END;
    END;

    BEGIN
    END.
  }
}
