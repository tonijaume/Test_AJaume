OBJECT Form 9222 _Item Statistics
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    Width=16610;
    Height=4290;
    CaptionML=ENU=_Item Statistics;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=ItemName;
    OnOpenForm=VAR
                 MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next';
               BEGIN
                 GLSetup.GET;
                 xMATRIX_CurrentNoOfColumns := 32;

                 WITH Item DO BEGIN
                   IF "No." <> '' THEN
                     ItemFilter := Item."No.";
                   IF GETFILTER("Date Filter") <> '' THEN
                     DateFilter := GETFILTER("Date Filter");
                   IF GETFILTER("Variant Filter") <> '' THEN
                     VariantFilter := GETFILTER("Variant Filter");
                   IF GETFILTER("Location Filter") <> '' THEN
                     LocationFilter := GETFILTER("Location Filter");
                 END;

                 IF ColumnDimCode = '' THEN
                   ColumnDimCode := Text002;

                 ItemBuffer."Column Option" := DimCodeToOption(ColumnDimCode);
                 PeriodInitialized := DateFilter <> '';
                 FindPeriod('');
                 ItemName := STRSUBSTNO('%1  %2',Item."No.",Item.Description);
                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
               END;

    OnFindRecord=BEGIN
                   WITH ItemBuffer DO BEGIN
                     IF "Line Option" = "Line Option"::"Profit Calculation" THEN
                       IntegerLine.SETRANGE(Number,1,5)
                     ELSE
                       IF "Line Option" = "Line Option"::"Cost Specification" THEN
                         IntegerLine.SETRANGE(Number,1,9);

                     EXIT(FindRec("Line Option",Rec,Which));
                   END;
                 END;

  }
  CONTROLS
  {
    { 1   ;TabControl   ;220  ;220  ;16170;3080 ;HorzGlue=Both;
                                                 VertGlue=Top;
                                                 PageNamesML=ENU=General,Options,Matrix Options }
    { 7   ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=ENU=Show as Lines;
                                                 OptionCaptionML=ENU=Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.,Period<Undefined>;
                                                 OptionString=Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.;
                                                 SourceExpr=ItemBuffer."Line Option";
                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 8   ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=7 }
    { 13  ;TextBox      ;11660;2640 ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=ENU=Variant Filter;
                                                 ClearOnLookup=No;
                                                 SourceExpr=VariantFilter;
                                                 OnLookup=VAR
                                                            ItemVariant@1002 : Record 5401;
                                                            ItemVariants@1003 : Form 5401;
                                                          BEGIN
                                                            ItemVariant.SETRANGE("Item No.",Item."No.");
                                                            ItemVariants.SETTABLEVIEW(ItemVariant);
                                                            ItemVariants.LOOKUPMODE := TRUE;
                                                            IF ItemVariants.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                              ItemVariants.GETRECORD(ItemVariant);
                                                              Text := ItemVariant.Code;
                                                              EXIT(TRUE);
                                                            END ELSE
                                                              EXIT(FALSE);
                                                          END;
                                                           }
    { 18  ;Label        ;8250 ;2640 ;3300 ;440  ;ParentControl=13 }
    { 14  ;TextBox      ;11660;2090 ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=ENU=Location Filter;
                                                 ClearOnLookup=No;
                                                 SourceExpr=LocationFilter;
                                                 OnLookup=VAR
                                                            Location@1002 : Record 14;
                                                            Locations@1003 : Form 15;
                                                          BEGIN
                                                            Locations.SETTABLEVIEW(Location);
                                                            Locations.LOOKUPMODE := TRUE;
                                                            IF Locations.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                              Locations.GETRECORD(Location);
                                                              Text := Location.Code;
                                                              EXIT(TRUE);
                                                            END ELSE
                                                              EXIT(FALSE);
                                                          END;
                                                           }
    { 17  ;Label        ;8250 ;2090 ;3300 ;440  ;ParentControl=14 }
    { 20  ;TextBox      ;11660;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=ENU=Date Filter;
                                                 SourceExpr=DateFilter;
                                                 OnValidate=BEGIN
                                                              ItemBuffer.SETFILTER("Date Filter",DateFilter);
                                                              DateFilter := ItemBuffer.GETFILTER("Date Filter");
                                                              InternalDateFilter := DateFilter;
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 21  ;Label        ;8250 ;990  ;3300 ;440  ;ParentControl=20 }
    { 6   ;TextBox      ;3850 ;1540 ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=ENU=Show as Columns;
                                                 SourceExpr=ColumnDimCode;
                                                 OnValidate=BEGIN
                                                              ValidateColumnDimCode;
                                                            END;

                                                 OnLookup=VAR
                                                            NewCode@1002 : Text[30];
                                                            MATRIX_SetWanted@1003 : 'Initial,Previous,Same,Next';
                                                          BEGIN
                                                            NewCode := GetDimSelection(ColumnDimCode);
                                                            IF NewCode = ColumnDimCode THEN BEGIN
                                                              MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Same);

                                                              EXIT(FALSE)
                                                            END ELSE BEGIN
                                                              Text := NewCode;
                                                              ColumnDimCode := NewCode;
                                                              ValidateColumnDimCode;
                                                              MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                                                              CurrForm.UPDATE;
                                                              EXIT(TRUE);
                                                            END
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 24  ;Label        ;440  ;1540 ;3300 ;440  ;ParentControl=6 }
    { 25  ;TextBox      ;11660;1540 ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=ENU=Item Filter;
                                                 ClearOnLookup=No;
                                                 SourceExpr=ItemFilter;
                                                 OnLookup=VAR
                                                            Item@1002 : Record 27;
                                                            ItemList@1003 : Form 31;
                                                          BEGIN
                                                            ItemList.SETTABLEVIEW(Item);
                                                            ItemList.LOOKUPMODE := TRUE;
                                                            IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                              ItemList.GETRECORD(Item);
                                                              Text := Item."No.";
                                                              EXIT(TRUE);
                                                            END ELSE
                                                              EXIT(FALSE);
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   Item."No." := ItemFilter;
                                                                   Item.Description := '';

                                                                   IF STRLEN(ItemFilter) <= 30 THEN
                                                                     IF Item.GET(ItemFilter) THEN
                                                                       ItemName := STRSUBSTNO('%1  %2',Item."No.",Item.Description);
                                                                   ItemName := STRSUBSTNO('%1  %2',Item."No.",Item.Description);
                                                                 END;
                                                                  }
    { 10  ;Label        ;8250 ;1540 ;3300 ;440  ;ParentControl=25 }
    { 3   ;CheckBox     ;3850 ;1540 ;440  ;440  ;ParentControl=1;
                                                 InPage=1;
                                                 ShowCaption=No;
                                                 CaptionML=ENU=Calculate per Unit;
                                                 SourceExpr=PerUnit }
    { 4   ;Label        ;440  ;1540 ;3300 ;440  ;ParentControl=3 }
    { 5   ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=ENU=Rounding Factor;
                                                 OptionCaptionML=ENU=None,1,1000,1000000;
                                                 SourceExpr=RoundingFactor }
    { 9   ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=5 }
    { 28  ;CheckBox     ;3850 ;2090 ;440  ;440  ;ParentControl=1;
                                                 InPage=1;
                                                 ShowCaption=No;
                                                 CaptionML=ENU=Include Expected;
                                                 SourceExpr=IncludeExpected }
    { 29  ;Label        ;440  ;2090 ;3300 ;440  ;ParentControl=28 }
    { 1169;TextBox      ;11440;990  ;3410 ;440  ;Editable=No;
                                                 ParentControl=1;
                                                 InPage=2;
                                                 CaptionML=ENU=Column Set;
                                                 SourceExpr=MATRIX_CaptionRange }
    { 1170;CommandButton;14960;880  ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ParentControl=1169;
                                                 InPage=2;
                                                 ShowCaption=No;
                                                 BitmapPos=Center;
                                                 AutoRepeat=Yes;
                                                 Bitmap=15;
                                                 CaptionML=ENU=Previous Set;
                                                 ToolTipML=ENU=Previous Set;
                                                 OnPush=VAR
                                                          MATRIX_SetWanted@1001 : 'Initial,Previous,Same,Next';
                                                        BEGIN
                                                          MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Previous);
                                                        END;
                                                         }
    { 1171;Label        ;7920 ;990  ;3300 ;440  ;ParentControl=1169;
                                                 InPage=2 }
    { 1172;CommandButton;15510;880  ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ParentControl=1169;
                                                 InPage=2;
                                                 ShowCaption=No;
                                                 BitmapPos=Center;
                                                 AutoRepeat=Yes;
                                                 Bitmap=16;
                                                 CaptionML=ENU=Next Set;
                                                 ToolTipML=ENU=Next Set;
                                                 OnPush=VAR
                                                          MATRIX_SetWanted@1001 : 'Initial,Previous,Same,Next';
                                                        BEGIN
                                                          MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Next);
                                                        END;
                                                         }
    { 1168;TextBox      ;3850 ;1540 ;2750 ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 CaptionML=ENU=View as;
                                                 OptionCaptionML=ENU=Net Change,Balance at Date;
                                                 SourceExpr=AmountType;
                                                 OnActivate=VAR
                                                              MATRIX_Step@1000 : 'First,Previous,Next';
                                                            BEGIN
                                                            END;

                                                 OnValidate=VAR
                                                              MATRIX_Step@1000 : 'First,Previous,Next';
                                                            BEGIN
                                                              MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
                                                            END;
                                                             }
    { 1173;Label        ;440  ;1540 ;3300 ;440  ;ParentControl=1168 }
    { 1167;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 CaptionML=ENU=View by;
                                                 OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                                 SourceExpr=PeriodType;
                                                 OnValidate=BEGIN
                                                              FindPeriod('');
                                                            END;

                                                 OnAfterValidate=VAR
                                                                   MATRIX_Step@1001 : 'First,Previous,Next';
                                                                 BEGIN
                                                                   //IF ColumnDimOption = ColumnDimOption::Period THEN
                                                                   IF ColumnDimCode = 'Period' THEN
                                                                     MATRIX_GenerateColumnCaptions(MATRIX_Step::First);
                                                                 END;
                                                                  }
    { 1174;Label        ;440  ;990  ;3300 ;440  ;ParentControl=1167 }
    { 2   ;CommandButton;14080;3520 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 19  ;CommandButton;11660;3520 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=ENU=&Show Matrix;
                                                 OnPush=VAR
                                                          MatrixForm@1158 : Form 9223;
                                                        BEGIN
                                                          CLEAR(MatrixForm);
                                                          MatrixForm.Load(MATRIX_CaptionSet,MATRIX_MatrixRecords,MATRIX_CurrentNoOfColumns,
                                                                            RoundingFactor,PerUnit,IncludeExpected,ItemBuffer,Item,PeriodType,AmountType,
                                                                            MATRIX_PrimKeyFirstCaptionInCu,ColumnDimCode,DateFilter,ItemFilter,LocationFilter,VariantFilter);
                                                          MatrixForm.SETTABLEVIEW(Rec);
                                                          MatrixForm.RUNMODAL;
                                                        END;
                                                         }
  }
  CODE
  {
    VAR
      MATRIX_MatrixRecords@1159 : ARRAY [32] OF Record 367;
      MATRIX_MatrixRecord@1001 : Record 367;
      MATRIX_CaptionSet@1160 : ARRAY [32] OF Text[1024];
      MATRIX_CaptionRange@1161 : Text[1024];
      FirstColumn@1162 : Text[1024];
      LastColumn@1163 : Text[1024];
      MATRIX_CaptionFieldNo@1164 : Integer;
      MATRIX_PrimKeyFirstCaptionInCu@1165 : Text[1024];
      xMATRIX_CurrentNoOfColumns@1166 : Integer;
      Text000@1000 : TextConst 'ENU=<Sign><Integer Thousand><Decimals,2>';
      GLSetup@1002 : Record 98;
      Item@1003 : Record 27;
      ItemBuffer@1004 : Record 5821;
      IntegerLine@1005 : Record 2000000026;
      ColumnDimCode@1020 : Text[30];
      ItemName@1006 : Text[250];
      PeriodType@1008 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      RoundingFactor@1009 : 'None,1,1000,1000000';
      AmountType@1010 : 'Net Change,Balance at Date';
      DateFilter@1011 : Text[30];
      InternalDateFilter@1012 : Text[30];
      ItemFilter@1013 : Code[250];
      VariantFilter@1014 : Code[250];
      LocationFilter@1015 : Code[250];
      ItemChargesFilter@1016 : Code[250];
      MatrixHeader@1017 : Text[30];
      PeriodInitialized@1018 : Boolean;
      InputError@1019 : Boolean;
      PerUnit@1021 : Boolean;
      IncludeExpected@1027 : Boolean;
      InputErrorText@1022 : Text[250];
      Qty@1023 : Decimal;
      CellAmount@1024 : Decimal;
      Text002@1025 : TextConst 'ENU=Period';
      Text003@1007 : TextConst 'ENU=%1 is not a valid column definition.';
      GLSetupRead@1026 : Boolean;
      MATRIX_CurrentNoOfColumns@1028 : Integer;
      CurrentMatrixRecordOrdinal@1029 : Integer;
      MatrixColumnCaptions@1031 : ARRAY [32] OF Text[1024];

    PROCEDURE MATRIX_GenerateColumnCaptions@1175(MATRIX_SetWanted@1000 : 'Initial,Previous,Same,Next');
    VAR
      RecRef@1001 : RecordRef;
      MatrixMgt@1002 : Codeunit 9200;
      MATRIX_PeriodRecords@1003 : ARRAY [32] OF Record 2000000007;
      Location@1004 : Record 14;
      i@1005 : Integer;
    BEGIN
      CLEAR(MATRIX_CaptionSet);
      CurrentMatrixRecordOrdinal := 1;
      CLEAR(MATRIX_MatrixRecords);
      FirstColumn := '';
      LastColumn := '';

      CASE ColumnDimCode OF
        Text002 :
          BEGIN
            MatrixMgt.GeneratePeriodMatrixData(MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),FALSE,
                                 PeriodType,DateFilter,MATRIX_PrimKeyFirstCaptionInCu,
                                 MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns,MATRIX_PeriodRecords);
            FOR i := 1 TO ARRAYLEN(MATRIX_CaptionSet) DO BEGIN
              MATRIX_MatrixRecords[i]."Period Start" := MATRIX_PeriodRecords[i]."Period Start";
              MATRIX_MatrixRecords[i]."Period End" := MATRIX_PeriodRecords[i]."Period End";
            END;
          END;

        Location.TABLECAPTION :
          BEGIN
            CLEAR(MATRIX_CaptionSet);
            RecRef.GETTABLE(Location);
            RecRef.SETTABLE(Location);
            MatrixMgt.GenerateMatrixData(RecRef,MATRIX_SetWanted,ARRAYLEN(MATRIX_CaptionSet),1,
              MATRIX_PrimKeyFirstCaptionInCu,MATRIX_CaptionSet,MATRIX_CaptionRange,MATRIX_CurrentNoOfColumns);
            FOR i := 1 TO MATRIX_CurrentNoOfColumns DO
              MATRIX_MatrixRecords[i].Code := MATRIX_CaptionSet[i];


          END;
      END;


      IF MATRIX_CurrentNoOfColumns > 0 THEN BEGIN
        FirstColumn := FORMAT(MATRIX_PeriodRecords[1]."Period Start");
        LastColumn := FORMAT(MATRIX_PeriodRecords[MATRIX_CurrentNoOfColumns]."Period End");
      END;
    END;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      Location@1002 : Record 14;
    BEGIN
      CASE DimCode OF
        '' :
          EXIT(-1);
        Text002 :
          EXIT(4);
        Location.TABLECAPTION :
          EXIT(5);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : 'Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.,Period,Location';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250]) : Boolean;
    VAR
      ItemCharge@1003 : Record 5800;
      Location@1004 : Record 14;
      Period@1005 : Record 2000000007;
      PeriodFormMgt@1006 : Codeunit 359;
      Found@1007 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::"Profit Calculation",
        DimOption::"Cost Specification":
          BEGIN
            IF EVALUATE(IntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := IntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(IntegerLine,DimCodeBuf);
          END;
        DimOption::"Purch. Item Charge Spec.",
        DimOption::"Sales Item Charge Spec.":
          BEGIN
            ItemCharge."No." := DimCodeBuf.Code;
            Found := ItemCharge.FIND(Which);
            IF Found THEN
              CopyAddChargesToBuf(ItemCharge,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            Period."Period Start" := DimCodeBuf."Period Start";
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF NOT PeriodInitialized AND (InternalDateFilter <> '') THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::Location:
          BEGIN
            Location.Code := DimCodeBuf.Code;
            IF LocationFilter <> '' THEN
              Location.SETFILTER(Code,LocationFilter);
            Found := Location.FIND(Which);
            IF Found THEN
              CopyLocationToBuf(Location,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimValue@1000 : Record 2000000026;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH ItemBuffer DO
        CASE "Line Option" OF
          "Line Option"::"Profit Calculation":
            CASE TheDimValue.Number OF
              1: InsertRow('1',FIELDCAPTION("Sales (LCY)"),0,FALSE,TheDimCodeBuf);
              2: InsertRow('2',FIELDCAPTION("COGS (LCY)"),0,FALSE,TheDimCodeBuf);
              3: InsertRow('3',FIELDCAPTION("Non-Invtbl. Costs (LCY)"),0,FALSE,TheDimCodeBuf);
              4: InsertRow('4',FIELDCAPTION("Profit (LCY)"),0,FALSE,TheDimCodeBuf);
              5: InsertRow('5',FIELDCAPTION("Profit %"),0,FALSE,TheDimCodeBuf);
            END;
          "Line Option"::"Cost Specification":
            CASE TheDimValue.Number OF
              1: InsertRow('1',FIELDCAPTION("Inventoriable Costs"),0,TRUE,TheDimCodeBuf);
              2: InsertRow('2',FIELDCAPTION("Direct Cost (LCY)"),1,FALSE,TheDimCodeBuf);
              3: InsertRow('3',FIELDCAPTION("Revaluation (LCY)"),1,FALSE,TheDimCodeBuf);
              4: InsertRow('4',FIELDCAPTION("Rounding (LCY)"),1,FALSE,TheDimCodeBuf);
              5: InsertRow('5',FIELDCAPTION("Indirect Cost (LCY)"),1,FALSE,TheDimCodeBuf);
              6: InsertRow('6',FIELDCAPTION("Variance (LCY)"),1,FALSE,TheDimCodeBuf);
              7: InsertRow('7',FIELDCAPTION("Inventoriable Costs, Total"),0,TRUE,TheDimCodeBuf);
              8: InsertRow('8',FIELDCAPTION("COGS (LCY)"),0,TRUE,TheDimCodeBuf);
              9: InsertRow('9',FIELDCAPTION("Inventory (LCY)"),0,TRUE,TheDimCodeBuf);
            END;
        END
    END;

    LOCAL PROCEDURE CopyAddChargesToBuf@3(VAR TheItemCharge@1000 : Record 5800;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheItemCharge."No.";
        Name := COPYSTR(
          STRSUBSTNO('%1 %2',TheItemCharge."No.",TheItemCharge.Description),1,50);
      END;
    END;

    LOCAL PROCEDURE CopyLocationToBuf@4(VAR TheLocation@1000 : Record 14;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheLocation.Code;
        Name := TheLocation.Name;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR ThePeriod@1000 : Record 2000000007;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        "Period End" := ThePeriod."Period End";
        Name := ThePeriod."Period Name";
      END;
    END;

    PROCEDURE InsertRow@1(Code1@1000 : Code[10];Name1@1001 : Text[80];Indentation1@1002 : Integer;Bold1@1003 : Boolean;VAR TheDimCodeBuf@1004 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := Code1;
        Name := COPYSTR(Name1,1,MAXSTRLEN(Name));
        Indentation := Indentation1;
        "Show in Bold" := Bold1;
      END;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;

      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);

      WITH ItemBuffer DO
        IF AmountType = AmountType::"Net Change" THEN BEGIN
          SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
          IF GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") THEN
            SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
        END ELSE
          SETRANGE("Date Filter",0D,Calendar."Period End");

      InternalDateFilter := ItemBuffer.GETFILTER("Date Filter");
    END;

    LOCAL PROCEDURE FormatAmount@6(VAR Text@1000 : Text[250]);
    VAR
      Amount@1001 : Decimal;
    BEGIN
      IF (Text = '') OR (RoundingFactor = RoundingFactor::None) THEN
        EXIT;
      EVALUATE(Amount,Text);

      IF NOT (Name = ItemBuffer.FIELDCAPTION("Profit %")) THEN
        CASE RoundingFactor OF
          RoundingFactor::"1":
            Amount := ROUND(Amount,1);
          RoundingFactor::"1000":
            Amount := ROUND(Amount / 1000,0.1);
          RoundingFactor::"1000000":
            Amount := ROUND(Amount / 1000000,0.1);
        END;

      IF Amount = 0 THEN
        Text := ''
      ELSE
        IF NOT (Name = ItemBuffer.FIELDCAPTION("Profit %")) THEN
          CASE RoundingFactor OF
            RoundingFactor::"1":
              Text := FORMAT(Amount);
            RoundingFactor::"1000",RoundingFactor::"1000000":
              Text := FORMAT(Amount,0,Text000);
          END;
    END;

    LOCAL PROCEDURE GetDimSelection@13(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      Location@1001 : Record 14;
      DimSelection@1002 : Form 568;
    BEGIN
      DimSelection.InsertDimSelBuf(FALSE,Location.TABLECAPTION,Location.TABLECAPTION);
      DimSelection.InsertDimSelBuf(FALSE,Text002,Text002);


      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode)
      ELSE
        EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE EvaluateAmount@7(VAR Text@1000 : Text[250]);
    VAR
      Amount@1001 : Decimal;
    BEGIN
      InputError := NOT EVALUATE(Amount,Text);
      IF InputError THEN
        InputErrorText := Text
      ELSE
        CASE RoundingFactor OF
          RoundingFactor::"1000":
            Amount := Amount * 1000;
          RoundingFactor::"1000000":
            Amount := Amount * 1000000;
        END;
      Text := FORMAT(Amount);
    END;

    LOCAL PROCEDURE DrillDown@30();
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      WITH ItemBuffer DO BEGIN
        ValueEntry.SETCURRENTKEY(
          "Item No.","Posting Date","Item Ledger Entry Type","Entry Type","Variance Type",
          "Item Charge No.","Location Code","Variant Code");

        IF GETFILTER("Item Filter") <> '' THEN
          COPYFILTER("Item Filter", ValueEntry."Item No.");

        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",ValueEntry."Posting Date")
        ELSE
          ValueEntry.SETRANGE("Posting Date",0D,31129999D);

        IF GETFILTER("Entry Type Filter") <> '' THEN
          COPYFILTER("Entry Type Filter",ValueEntry."Entry Type");

        IF GETFILTER("Item Ledger Entry Type Filter") <> '' THEN
          COPYFILTER("Item Ledger Entry Type Filter",ValueEntry."Item Ledger Entry Type");

        IF GETFILTER("Variance Type Filter") <> '' THEN
          COPYFILTER("Variance Type Filter",ValueEntry."Variance Type");

        IF GETFILTER("Item Charge No. Filter") <> '' THEN
          COPYFILTER("Item Charge No. Filter",ValueEntry."Item Charge No.");

        IF GETFILTER("Location Filter") <> '' THEN
          COPYFILTER("Location Filter",ValueEntry."Location Code");

        IF GETFILTER("Variant Filter") <> '' THEN
          COPYFILTER("Variant Filter",ValueEntry."Variant Code");

        CASE TRUE OF
          (("Line Option" = "Line Option"::"Profit Calculation") AND (Name = FIELDCAPTION("Sales (LCY)"))) OR
          ("Line Option" = "Line Option"::"Sales Item Charge Spec."):
            FORM.RUN(0,ValueEntry,ValueEntry."Sales Amount (Actual)");
          Name = FIELDCAPTION("Non-Invtbl. Costs (LCY)"):
            FORM.RUN(0,ValueEntry,ValueEntry."Cost Amount (Non-Invtbl.)");
          ELSE
            FORM.RUN(0,ValueEntry,ValueEntry."Cost Amount (Actual)");
        END;
      END;
    END;

    LOCAL PROCEDURE SetCommonFilters@31(VAR TheItemBuffer@1000 : Record 5821);
    BEGIN
      WITH TheItemBuffer DO BEGIN
        RESET;
        IF ItemFilter <> '' THEN
          SETFILTER("Item Filter",ItemFilter);
        IF DateFilter <> '' THEN
          SETFILTER("Date Filter",DateFilter);
        IF LocationFilter <> '' THEN
          SETFILTER("Location Filter",LocationFilter);
        IF VariantFilter <> '' THEN
          SETFILTER("Variant Filter",VariantFilter);
      END;
    END;

    LOCAL PROCEDURE SetFilters@17(VAR ItemBuffer@1000 : Record 5821;LineOrColumn@1001 : 'Line,Column');
    VAR
      DimOption@1002 : 'Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.,Period,Location';
      DimCodeBuf@1003 : Record 367;
    BEGIN
      IF LineOrColumn = LineOrColumn::Line THEN BEGIN
        DimCodeBuf := Rec;
        DimOption := ItemBuffer."Line Option";
      END ELSE BEGIN
        DimCodeBuf := MATRIX_MatrixRecord;
        DimOption := ItemBuffer."Column Option";
      END;

      WITH ItemBuffer DO BEGIN
        CASE DimOption OF
          DimOption::Location:
            SETRANGE("Location Filter",DimCodeBuf.Code);
          DimOption::Period:
            IF AmountType = AmountType::"Net Change" THEN
              SETRANGE("Date Filter",DimCodeBuf."Period Start",DimCodeBuf."Period End")
            ELSE
              SETRANGE("Date Filter",0D,DimCodeBuf."Period End");
          DimOption::"Profit Calculation",
          DimOption::"Cost Specification":
            CASE Name OF
              FIELDCAPTION("Sales (LCY)"),
              FIELDCAPTION("COGS (LCY)"),
              FIELDCAPTION("Profit (LCY)"),
              FIELDCAPTION("Profit %"):
                BEGIN
                  SETRANGE("Item Ledger Entry Type Filter","Item Ledger Entry Type Filter"::Sale);
                  IF DimOption = DimOption::"Profit Calculation" THEN
                    SETFILTER("Entry Type Filter",'<>%1',"Entry Type Filter"::Revaluation);
                  SETRANGE("Variance Type Filter","Variance Type Filter"::" ");
                END;
              FIELDCAPTION("Direct Cost (LCY)"),
              FIELDCAPTION("Revaluation (LCY)"),
              FIELDCAPTION("Rounding (LCY)"),
              FIELDCAPTION("Indirect Cost (LCY)"),
              FIELDCAPTION("Variance (LCY)"),
              FIELDCAPTION("Inventoriable Costs, Total"):
                BEGIN
                  SETFILTER(
                    "Item Ledger Entry Type Filter",'<>%1&<>%2',
                    "Item Ledger Entry Type Filter"::Sale,
                    "Item Ledger Entry Type Filter"::" ");
                  SETRANGE("Variance Type Filter","Variance Type Filter"::" ");
                  CASE Name OF
                    FIELDCAPTION("Direct Cost (LCY)"):
                      SETRANGE("Entry Type Filter","Entry Type Filter"::"Direct Cost");
                    FIELDCAPTION("Revaluation (LCY)"):
                      SETRANGE("Entry Type Filter","Entry Type Filter"::Revaluation);
                    FIELDCAPTION("Rounding (LCY)"):
                      SETRANGE("Entry Type Filter","Entry Type Filter"::Rounding);
                    FIELDCAPTION("Indirect Cost (LCY)"):
                      SETRANGE("Entry Type Filter","Entry Type Filter"::"Indirect Cost");
                    FIELDCAPTION("Variance (LCY)"):
                      BEGIN
                        SETRANGE("Entry Type Filter","Entry Type Filter"::Variance);
                        SETFILTER("Variance Type Filter",'<>%1',"Variance Type Filter"::" ");
                      END;
                    FIELDCAPTION("Inventoriable Costs, Total"):
                      SETRANGE("Variance Type Filter");
                  END;
                END;
              ELSE
                SETRANGE("Item Ledger Entry Type Filter");
                SETRANGE("Variance Type Filter");
              END;
          DimOption::"Purch. Item Charge Spec.":
            BEGIN
              SETRANGE("Variance Type Filter","Variance Type Filter"::" ");
              SETRANGE("Item Ledger Entry Type Filter","Item Ledger Entry Type Filter"::Purchase);
              SETRANGE("Item Charge No. Filter",DimCodeBuf.Code);
            END;
          DimOption::"Sales Item Charge Spec.":
            BEGIN
              SETRANGE("Variance Type Filter","Variance Type Filter"::" ");
              SETRANGE("Item Ledger Entry Type Filter","Item Ledger Entry Type Filter"::Sale);
              SETRANGE("Item Charge No. Filter",DimCodeBuf.Code);
            END;
        END;
        IF GETFILTER("Item Ledger Entry Type Filter") = '' THEN
          SETFILTER(
            "Item Ledger Entry Type Filter",'<>%1',
            "Item Ledger Entry Type Filter"::" ")
      END;
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      Location@1000 : Record 14;
    BEGIN
      IF (UPPERCASE(ColumnDimCode) <> UPPERCASE(Location.TABLECAPTION)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text002)) AND
         (ColumnDimCode <> '')
      THEN BEGIN
        MESSAGE(Text003,ColumnDimCode);
        ColumnDimCode := '';
      END;

      WITH ItemBuffer DO BEGIN
        ItemBuffer."Column Option" := DimCodeToOption(ColumnDimCode);
        InternalDateFilter := ItemBuffer.GETFILTER("Date Filter");
        IF ("Line Option" <> "Line Option"::Period)
          AND ("Column Option" <> "Column Option"::Period) THEN BEGIN
          DateFilter := InternalDateFilter;
          IF STRPOS(DateFilter,'&') > 1 THEN
            DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
        END ELSE
          PeriodInitialized := FALSE;
      END;
    END;

    PROCEDURE Calculate@16(SetColumnFilter@1000 : Boolean) Amount@1001 : Decimal;
    BEGIN
      GetGLSetup;

      WITH ItemBuffer DO BEGIN
        CASE "Line Option" OF
          "Line Option"::"Profit Calculation",
          "Line Option"::"Cost Specification":
            CASE Name OF
              FIELDCAPTION("Sales (LCY)"):
                Amount := CalcSalesAmount(SetColumnFilter);
              FIELDCAPTION("COGS (LCY)"):
                Amount := CalcCostAmount(SetColumnFilter);
              FIELDCAPTION("Non-Invtbl. Costs (LCY)"):
                Amount := CalcCostAmountNonInvnt(SetColumnFilter);
              FIELDCAPTION("Profit (LCY)"):
                Amount :=
                  CalcSalesAmount(SetColumnFilter) +
                  CalcCostAmount(SetColumnFilter) +
                  CalcCostAmountNonInvnt(SetColumnFilter);
              FIELDCAPTION("Profit %"):
                IF CalcSalesAmount(SetColumnFilter) <> 0 THEN
                  Amount :=
                    ROUND(
                      100 * (CalcSalesAmount(SetColumnFilter) +
                             CalcCostAmount(SetColumnFilter) +
                             CalcCostAmountNonInvnt(SetColumnFilter))
                          / CalcSalesAmount(SetColumnFilter))
                ELSE
                  Amount := 0;
              FIELDCAPTION("Direct Cost (LCY)"),FIELDCAPTION("Revaluation (LCY)"),
              FIELDCAPTION("Rounding (LCY)"),FIELDCAPTION("Indirect Cost (LCY)"),
              FIELDCAPTION("Variance (LCY)"),FIELDCAPTION("Inventory (LCY)"),
              FIELDCAPTION("Inventoriable Costs, Total"):
                Amount := CalcCostAmount(SetColumnFilter);
            ELSE
              Amount := 0;
            END;
          "Line Option"::"Sales Item Charge Spec.":
            Amount := CalcSalesAmount(SetColumnFilter);
          "Line Option"::"Purch. Item Charge Spec.":
            Amount := CalcCostAmount(SetColumnFilter);
        END;

        IF PerUnit THEN BEGIN
          IF ("Line Option" = "Line Option"::"Profit Calculation") AND
             (Name = FIELDCAPTION("Profit %"))
          THEN
            Qty := 1
          ELSE
            Qty := CalcQty(SetColumnFilter);

          IF Qty <> 0 THEN
            Amount :=
              ROUND(Amount / ABS(Qty),GLSetup."Unit-Amount Rounding Precision")
          ELSE
            Amount := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcSalesAmount@12(SetColumnFilter@1000 : Boolean) : Decimal;
    BEGIN
      SetCommonFilters(ItemBuffer);
      SetFilters(ItemBuffer,0);
      IF SetColumnFilter THEN
        SetFilters(ItemBuffer,1);

      IF IncludeExpected THEN BEGIN
        ItemBuffer.CALCFIELDS("Sales Amount (Actual)","Sales Amount (Expected)");
        EXIT(ItemBuffer."Sales Amount (Actual)" + ItemBuffer."Sales Amount (Expected)");
      END;
      ItemBuffer.CALCFIELDS("Sales Amount (Actual)");
      EXIT(ItemBuffer."Sales Amount (Actual)");
    END;

    LOCAL PROCEDURE CalcCostAmount@5(SetColumnFilter@1000 : Boolean) : Decimal;
    BEGIN
      SetCommonFilters(ItemBuffer);
      SetFilters(ItemBuffer,0);
      IF SetColumnFilter THEN
        SetFilters(ItemBuffer,1);

      IF IncludeExpected THEN BEGIN
        ItemBuffer.CALCFIELDS("Cost Amount (Actual)","Cost Amount (Expected)");
        EXIT(ItemBuffer."Cost Amount (Actual)" + ItemBuffer."Cost Amount (Expected)");
      END;
      ItemBuffer.CALCFIELDS("Cost Amount (Actual)");
      EXIT(ItemBuffer."Cost Amount (Actual)");
    END;

    LOCAL PROCEDURE CalcCostAmountNonInvnt@15(SetColumnFilter@1000 : Boolean) : Decimal;
    BEGIN
      SetCommonFilters(ItemBuffer);
      SetFilters(ItemBuffer,0);
      IF SetColumnFilter THEN
        SetFilters(ItemBuffer,1);

      ItemBuffer.SETRANGE("Item Ledger Entry Type Filter");
      ItemBuffer.CALCFIELDS("Cost Amount (Non-Invtbl.)");
      EXIT(ItemBuffer."Cost Amount (Non-Invtbl.)");
    END;

    LOCAL PROCEDURE CalcQty@10(SetColumnFilter@1000 : Boolean) : Decimal;
    BEGIN
      SetCommonFilters(ItemBuffer);
      SetFilters(ItemBuffer,0);
      IF SetColumnFilter THEN
        SetFilters(ItemBuffer,1);

      ItemBuffer.SETRANGE("Entry Type Filter");
      ItemBuffer.SETRANGE("Item Charge No. Filter");

      IF IncludeExpected THEN BEGIN
        ItemBuffer.CALCFIELDS(Quantity);
        EXIT(ItemBuffer.Quantity);
      END;
      ItemBuffer.CALCFIELDS("Invoiced Quantity");
      EXIT(ItemBuffer."Invoiced Quantity");
    END;

    PROCEDURE SetItem@11(VAR NewItem@1000 : Record 27);
    BEGIN
      Item.GET(NewItem."No.");
      Item.COPYFILTERS(NewItem);
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    BEGIN
    END.
  }
}
