OBJECT Form 5845 Inventory - G/L Reconciliation
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    Width=14850;
    Height=9350;
    CaptionML=[ENU=Inventory - G/L Reconciliation;
               ESP=Invent. - Conciliaci¢n cont.];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=GetCaption;
    OnOpenForm=BEGIN
                 GLSetup.GET;

                 InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
                 InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
                 InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                 InvtReportHeader."Show Warning" := ShowWarning;

                 IF (LineDimCode = '') AND (ColumnDimCode = '') THEN BEGIN
                   LineDimCode := Text004;
                   ColumnDimCode := Text005;
                 END;
                 InvtReportHeader."Line Option" := DimCodeToOption(LineDimCode);
                 InvtReportHeader."Column Option" := DimCodeToOption(ColumnDimCode);

                 PeriodInitialized := DateFilter <> '';
                 IsCalculated := FALSE;
               END;

    OnFindRecord=BEGIN
                   WITH InvtReportHeader DO BEGIN
                     IF "Line Option" = "Line Option"::"Balance Sheet" THEN BEGIN
                       IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                         IF ShowWarning THEN
                           RowIntegerLine.SETRANGE(Number,1,7)
                         ELSE
                           RowIntegerLine.SETRANGE(Number,1,6)
                       END ELSE
                         RowIntegerLine.SETRANGE(Number,1,4)
                     END ELSE
                       IF "Line Option" = "Line Option"::"Income Statement" THEN
                         IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                           IF ShowWarning THEN
                             RowIntegerLine.SETRANGE(Number,1,18)
                           ELSE
                             RowIntegerLine.SETRANGE(Number,1,17)
                         END ELSE
                           RowIntegerLine.SETRANGE(Number,1,15);
                     EXIT(FindRec("Line Option",Rec,Which,TRUE));
                   END;
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(InvtReportHeader."Line Option",Rec,Steps,TRUE));
                 END;

  }
  CONTROLS
  {
    { 1   ;TabControl   ;220  ;220  ;14410;2530 ;HorzGlue=Both;
                                                 VertGlue=Top;
                                                 PageNamesML=[ENU=General;
                                                              ESP=General] }
    { 14  ;TextBox      ;3850 ;2090 ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=[ENU=Location Filter;
                                                            ESP=Filtro almac‚n];
                                                 ClearOnLookup=No;
                                                 SourceExpr=LocationFilter;
                                                 OnLookup=VAR
                                                            Location@1002 : Record 14;
                                                            Locations@1003 : Form 15;
                                                          BEGIN
                                                            Locations.SETTABLEVIEW(Location);
                                                            Locations.LOOKUPMODE := TRUE;
                                                            IF Locations.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                              Locations.GETRECORD(Location);
                                                              Text := Location.Code;
                                                              EXIT(TRUE);
                                                            END ELSE
                                                              EXIT(FALSE);
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
                                                                   IsCalculated := FALSE;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 17  ;Label        ;440  ;2090 ;3300 ;440  ;ParentControl=14 }
    { 20  ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=[ENU=Date Filter;
                                                            ESP=Filtro fecha];
                                                 SourceExpr=DateFilter;
                                                 OnValidate=BEGIN
                                                              InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                                                              DateFilter := InvtReportHeader.GETFILTER("Posting Date Filter");
                                                              IsCalculated := FALSE;
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 21  ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=20 }
    { 25  ;TextBox      ;3850 ;1540 ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=[ENU=Item Filter;
                                                            ESP=Filtro producto];
                                                 ClearOnLookup=No;
                                                 SourceExpr=ItemFilter;
                                                 OnLookup=VAR
                                                            Item@1002 : Record 27;
                                                            ItemList@1003 : Form 31;
                                                          BEGIN
                                                            ItemList.SETTABLEVIEW(Item);
                                                            ItemList.LOOKUPMODE := TRUE;
                                                            IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                              ItemList.GETRECORD(Item);
                                                              Text := Item."No.";
                                                              EXIT(TRUE);
                                                            END;
                                                            EXIT(FALSE);
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
                                                                   IsCalculated := FALSE;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 10  ;Label        ;440  ;1540 ;3300 ;440  ;ParentControl=25 }
    { 4   ;CheckBox     ;13970;990  ;440  ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 ShowCaption=No;
                                                 CaptionML=[ENU=Show Warning;
                                                            ESP=Mostrar advertencia];
                                                 SourceExpr=ShowWarning;
                                                 OnAfterValidate=BEGIN
                                                                   InvtReportHeader."Show Warning" := ShowWarning;
                                                                   IsCalculated := FALSE;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 5   ;Label        ;10560;990  ;3300 ;440  ;ParentControl=4 }
    { 7   ;CheckBox     ;13970;1540 ;440  ;440  ;Editable=No;
                                                 ParentControl=1;
                                                 InPage=0;
                                                 ShowCaption=No;
                                                 CaptionML=[ENU=Calculated;
                                                            ESP=Calculado];
                                                 SourceExpr=IsCalculated;
                                                 OnAfterValidate=BEGIN
                                                                   InvtReportHeader."Show Warning" := ShowWarning;
                                                                   GetInvtReport.SetReportHeader(InvtReportHeader);
                                                                   GetInvtReport.RUN(InvtReportEntry);

                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 6   ;Label        ;10560;1540 ;3300 ;440  ;ParentControl=7 }
    { 2   ;CommandButton;12430;8580 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 19  ;MatrixBox    ;220  ;2860 ;14410;5500 ;Name=Matrix;
                                                 HorzGlue=Both;
                                                 VertGlue=Both;
                                                 Editable=No;
                                                 MatrixColumnWidth=1650;
                                                 MatrixSourceTable=Table367;
                                                 OnFindRecord=BEGIN
                                                                WITH InvtReportHeader DO BEGIN
                                                                  IF "Column Option" = "Line Option"::"Balance Sheet" THEN BEGIN
                                                                    IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                                                                      IF ShowWarning THEN
                                                                        ColIntegerLine.SETRANGE(Number,1,7)
                                                                      ELSE
                                                                        ColIntegerLine.SETRANGE(Number,1,6)
                                                                    END ELSE
                                                                      ColIntegerLine.SETRANGE(Number,1,4)
                                                                  END ELSE
                                                                    IF "Column Option" = "Line Option"::"Income Statement" THEN
                                                                      IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                                                                        IF ShowWarning THEN
                                                                          ColIntegerLine.SETRANGE(Number,1,18)
                                                                        ELSE
                                                                          ColIntegerLine.SETRANGE(Number,1,17)
                                                                      END ELSE
                                                                        ColIntegerLine.SETRANGE(Number,1,15);

                                                                  EXIT(FindRec("Column Option",CurrForm.Matrix.MatrixRec,Which,FALSE));
                                                                END;
                                                              END;

                                                 OnNextRecord=BEGIN
                                                                EXIT(NextRec(InvtReportHeader."Column Option",CurrForm.Matrix.MatrixRec,Steps,FALSE));
                                                              END;

                                                 OnAfterGetRecord=BEGIN
                                                                    IF InvtReportHeader."Column Option" IN [InvtReportHeader."Column Option"::"Balance Sheet",InvtReportHeader."Column Option"::
                                                                                                            "Income Statement"] THEN
                                                                      MatrixHeader := CurrForm.Matrix.MatrixRec.Name
                                                                    ELSE
                                                                      MatrixHeader := CurrForm.Matrix.MatrixRec.Code;
                                                                    CellAmount := Calculate;
                                                                  END;

                                                 OnAfterGetCurrRecord=BEGIN
                                                                        CellAmount := Calculate;
                                                                      END;
                                                                       }
    { 22  ;TextBox      ;2047 ;3740 ;4893 ;440  ;HorzGlue=Both;
                                                 Editable=No;
                                                 ParentControl=19;
                                                 InColumn=Yes;
                                                 SourceExpr=Name;
                                                 OnFormat=BEGIN
                                                            CurrForm.Name.UPDATEFONTBOLD("Show in Bold");
                                                            CurrForm.Name.UPDATEINDENT(220 * Indentation);
                                                          END;
                                                           }
    { 23  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=22;
                                                 InColumnHeading=Yes }
    { 26  ;TextBox      ;8326 ;4400 ;8690 ;440  ;Name=CellAmount;
                                                 Editable=No;
                                                 ParentControl=19;
                                                 InMatrix=Yes;
                                                 BlankZero=Yes;
                                                 SourceExpr=CellAmount;
                                                 AutoFormatType=1;
                                                 OnFormat=BEGIN
                                                            FormatAmount(Text);
                                                            CurrForm.CellAmount.UPDATEFONTBOLD("Show in Bold" OR CurrForm.Matrix.MatrixRec."Show in Bold");

                                                            GetGLSetup;

                                                            WITH InvtReportEntry DO BEGIN
                                                              IF FIELDCAPTION(Warning) IN [Name,CurrForm.Matrix.MatrixRec.Name] THEN BEGIN
                                                                SETRANGE(Type,Type::" ");
                                                                IF FIND('-') THEN;
                                                                CASE InvtReportHeader."Line Option" OF
                                                                  InvtReportHeader."Line Option"::"Balance Sheet",
                                                                  InvtReportHeader."Line Option"::"Income Statement":
                                                                    Text := ShowWarningText(0);
                                                                END;
                                                              END;
                                                            END;
                                                          END;

                                                 OnAfterInput=BEGIN
                                                                EvaluateAmount(Text);
                                                              END;

                                                 OnDrillDown=BEGIN
                                                               DrillDown;
                                                             END;
                                                              }
    { 27  ;TextBox      ;14300;2530 ;1650 ;440  ;Name=MatrixHeader;
                                                 ParentControl=26;
                                                 InMatrixHeading=Yes;
                                                 SourceExpr=MatrixHeader;
                                                 OnFormat=BEGIN
                                                            CurrForm.MatrixHeader.UPDATEFONTBOLD(CurrForm.Matrix.MatrixRec."Show in Bold");
                                                          END;
                                                           }
    { 3   ;CommandButton;10010;8580 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=[ENU=&Calculate;
                                                            ESP=&Calcular];
                                                 OnPush=BEGIN
                                                          GetInvtReport.SetReportHeader(InvtReportHeader);
                                                          GetInvtReport.RUN(InvtReportEntry);
                                                          IsCalculated := TRUE;
                                                          CurrForm.UPDATE;
                                                        END;
                                                         }
  }
  CODE
  {
    VAR
      GLSetup@1002 : Record 98;
      InvtReportHeader@1028 : Record 5845;
      InvtReportEntry@1001 : TEMPORARY Record 5846;
      RowIntegerLine@1005 : Record 2000000026;
      ColIntegerLine@1032 : Record 2000000026;
      GetInvtReport@1033 : Codeunit 5845;
      LineDimCode@1031 : Text[20];
      ColumnDimCode@1020 : Text[20];
      DateFilter@1011 : Text[30];
      MatrixHeader@1017 : Text[30];
      InputErrorText@1022 : Text[250];
      Text003@1007 : TextConst 'ENU=%1 is not a valid column definition.;ESP=%1 no es una def. de columna v lida.';
      ItemFilter@1015 : Code[250];
      LocationFilter@1013 : Code[250];
      AmountType@1008 : 'Net Change,Balance at Date';
      CellAmount@1019 : Decimal;
      PeriodInitialized@1018 : Boolean;
      InputError@1012 : Boolean;
      GLSetupRead@1026 : Boolean;
      Text004@1029 : TextConst 'ENU=Income Statement;ESP=Comercial';
      Text005@1030 : TextConst 'ENU=Balance Sheet;ESP=Balance';
      ShowWarning@1000 : Boolean;
      Text006@1004 : TextConst 'ENU=Expected Cost Setup;ESP=Configuraci¢n coste previsto';
      Text007@1009 : TextConst 'ENU=Post Cost to G/L;ESP=Registrar coste en C/G';
      Text008@1014 : TextConst 'ENU=Compression;ESP=Compresi¢n';
      Text009@1016 : TextConst 'ENU=Posting Group;ESP=Grupo contable';
      Text010@1021 : TextConst 'ENU=Direct Posting;ESP=Entrada directa';
      Text011@1023 : TextConst 'ENU=Posting Date;ESP=Fecha registro';
      Text012@1027 : TextConst 'ENU=Closed Fiscal Year;ESP=Ejercicio cerrado';
      Text013@1034 : TextConst 'ENU=Similar Accounts;ESP=Cuentas similares';
      Text014@1035 : TextConst 'ENU=Deleted Accounts;ESP=Cuentas eliminadas';
      IsCalculated@1003 : Boolean;
      Text016@1010 : TextConst 'ENU=The program is not set up to use expected cost posting. Therefore, inventory interim G/L accounts are empty and this causes a difference between inventory and G/L totals.;ESP=El programa no est  configurado para utilizar el registro de coste previsto. Por lo tanto, las cuentas provisionales de inventario est n vac¡as y esto causa una diferencia entre los totales de inventario y de C/G.';
      Text017@1006 : TextConst 'ENU=Some of the cost amounts in the inventory ledger have not yet been posted to G/L. You must run the Post Cost to G/L batch job to reconcile the ledgers.;ESP=Algunos importes de coste del inventario no se han registrado a£n en C/G. Debe ejecutar el proceso Registrar coste en C/G para reconciliar los movimientos.';
      Text018@1024 : TextConst 'ENU=Some inventory and/or G/L entries have been date compressed.;ESP=Algunos inventarios y/o movs. contabilidad se han comprimido por fechas.';
      Text019@1025 : TextConst 'ENU=You have possibly restructured your chart of accounts by re-assigning inventory related accounts in the General and/or Inventory Posting Setup.;ESP=Posiblemente ha reestructurado su plan de cuentas al reasignar cuentas relacionadas con el inventario en la Configuraci¢n grupos contables y/o Config. contab existencias.';
      Text020@1036 : TextConst 'ENU=Some inventory costs have been posted directly to a G/L account bypassing inventory subledger.;ESP=Algunos costes de inventario se han registrado directamente en una cuenta evitando el sublibro de contabilidad de inventario.';
      Text021@1037 : TextConst 'ENU=There is a discrepancy between the posting date of the value entry and the associated G/L entry within the reporting period.;ESP=Existe una discrepancia entre la fecha de registro del mov. valor y el mov. contabilidad asociado dentro del periodo de informaci¢n.';
      Text022@1038 : TextConst 'ENU=Some of the cost amounts are posted in a closed fiscal year. Therefore, the inventory related totals are different to their related G/L accounts in the income statement.;ESP=Algunos importes de coste se registran en un ejercicio cerrado. Por lo tanto, los totales relacionados con el inventario son diferentes de las cuentas relacionadas en el balance de ingresos.';
      Text023@1039 : TextConst 'ENU=You have possibly defined one G/L account for different inventory transactions.;ESP=Posiblemente ha definido una cuenta para diferentes movimientos de inventario.';
      Text024@1040 : TextConst 'ENU=You have possibly restructured your chart of accounts by deleting one or more inventory related G/L accounts.;ESP=Posiblemente ha reestructurado su plan de cuentas al eliminar una o m s cuentas relacionadas con el inventario.';

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      Location@1002 : Record 14;
    BEGIN
      CASE DimCode OF
        '':
          EXIT(-1);
        Text005:
          EXIT(0);
        Text004:
          EXIT(1);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : 'Balance Sheet,Income Statement';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250];IsRow@1008 : Boolean) : Boolean;
    VAR
      Found@1007 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          IF IsRow THEN BEGIN
            IF EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := RowIntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          END ELSE BEGIN
            IF EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := ColIntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@60(DimOption@1000 : 'Balance Sheet,Income Statement';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer;IsRow@1008 : Boolean) : Integer;
    VAR
      ResultSteps@1007 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          IF IsRow THEN BEGIN
            IF EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) THEN;
            ResultSteps := RowIntegerLine.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          END ELSE BEGIN
            IF EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) THEN;
            ResultSteps := ColIntegerLine.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimValue@1000 : Record 2000000026;VAR TheDimCodeBuf@1001 : Record 367;IsRow@1002 : Boolean);
    BEGIN
      WITH InvtReportEntry DO
        CASE TRUE OF
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Balance Sheet") AND IsRow) OR
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Balance Sheet") AND NOT IsRow):
            CASE TheDimValue.Number OF
              1: InsertRow('1',FIELDCAPTION(Inventory),0,FALSE,TheDimCodeBuf);
              2: InsertRow('2',FIELDCAPTION("Inventory (Interim)"),0,FALSE,TheDimCodeBuf);
              3: InsertRow('3',FIELDCAPTION("WIP Inventory"),0,FALSE,TheDimCodeBuf);
              4: InsertRow('4',FIELDCAPTION(Total),0,TRUE,TheDimCodeBuf);
              5: InsertRow('5',FIELDCAPTION("G/L Total"),0,TRUE,TheDimCodeBuf);
              6: InsertRow('6',FIELDCAPTION(Difference),0,TRUE,TheDimCodeBuf);
              7: InsertRow('7',FIELDCAPTION(Warning),0,TRUE,TheDimCodeBuf);
            END;
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Income Statement") AND IsRow) OR
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Income Statement") AND NOT IsRow):
            CASE TheDimValue.Number OF
              1: InsertRow('1',FIELDCAPTION("Inventory To WIP"),0,FALSE,TheDimCodeBuf);
              2: InsertRow('2',FIELDCAPTION("WIP To Interim"),0,FALSE,TheDimCodeBuf);
              3: InsertRow('3',FIELDCAPTION("COGS (Interim)"),0,FALSE,TheDimCodeBuf);
              4: InsertRow('4',FIELDCAPTION("Direct Cost Applied"),0,FALSE,TheDimCodeBuf);
              5: InsertRow('5',FIELDCAPTION("Overhead Applied"),0,FALSE,TheDimCodeBuf);
              6: InsertRow('6',FIELDCAPTION("Inventory Adjmt."),0,FALSE,TheDimCodeBuf);
              7: InsertRow('7',FIELDCAPTION("Invt. Accrual (Interim)"),0,FALSE,TheDimCodeBuf);
              8: InsertRow('8',FIELDCAPTION(COGS),0,FALSE,TheDimCodeBuf);
              9: InsertRow('9',FIELDCAPTION("Purchase Variance"),0,FALSE,TheDimCodeBuf);
              10: InsertRow('10',FIELDCAPTION("Material Variance"),0,FALSE,TheDimCodeBuf);
              11: InsertRow('11',FIELDCAPTION("Capacity Variance"),0,FALSE,TheDimCodeBuf);
              12: InsertRow('12',FIELDCAPTION("Subcontracted Variance"),0,FALSE,TheDimCodeBuf);
              13: InsertRow('13',FIELDCAPTION("Capacity Overhead Variance"),0,FALSE,TheDimCodeBuf);
              14: InsertRow('14',FIELDCAPTION("Mfg. Overhead Variance"),0,FALSE,TheDimCodeBuf);
              15: InsertRow('15',FIELDCAPTION(Total),0,TRUE,TheDimCodeBuf);
              16: InsertRow('16',FIELDCAPTION("G/L Total"),0,TRUE,TheDimCodeBuf);
              17: InsertRow('17',FIELDCAPTION(Difference),0,TRUE,TheDimCodeBuf);
              18: InsertRow('18',FIELDCAPTION(Warning),0,TRUE,TheDimCodeBuf);
            END;
        END
    END;

    PROCEDURE InsertRow@1(Code1@1000 : Code[10];Name1@1001 : Text[80];Indentation1@1002 : Integer;Bold1@1003 : Boolean;VAR TheDimCodeBuf@1004 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := Code1;
        Name := COPYSTR(Name1,1,MAXSTRLEN(Name));
        Indentation := Indentation1;
        "Show in Bold" := Bold1;
      END;
    END;

    LOCAL PROCEDURE FormatAmount@6(VAR Text@1000 : Text[250]);
    VAR
      Amount@1001 : Decimal;
    BEGIN
      IF Text = '' THEN
        EXIT;
      EVALUATE(Amount,Text);

      IF Amount = 0 THEN
        Text := ''
    END;

    LOCAL PROCEDURE GetDimSelection@13(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      Location@1001 : Record 14;
      DimSelection@1002 : Form 568;
    BEGIN
      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode);
      EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE EvaluateAmount@7(VAR Text@1000 : Text[250]);
    VAR
      Amount@1001 : Decimal;
    BEGIN
      InputError := NOT EVALUATE(Amount,Text);
      IF InputError THEN
        InputErrorText := Text;
      Text := FORMAT(Amount);
    END;

    LOCAL PROCEDURE DrillDown@30();
    BEGIN
      GetGLSetup;

      WITH InvtReportEntry DO BEGIN
        IF FIELDCAPTION(Warning) IN [Name,CurrForm.Matrix.MatrixRec.Name] THEN BEGIN
          ShowWarningText(1);
          EXIT;
        END;

        RESET;
        IF FIELDCAPTION("G/L Total") IN [Name,CurrForm.Matrix.MatrixRec.Name] THEN
          SETRANGE(Type,Type::"G/L Account")
        ELSE
          SETRANGE(Type,Type::Item);

        SETFILTER("Posting Date Filter",InvtReportHeader.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Filter",InvtReportHeader.GETFILTER("Location Filter"));

        CASE InvtReportHeader."Line Option" OF
          InvtReportHeader."Line Option"::"Balance Sheet",
          InvtReportHeader."Line Option"::"Income Statement":
            CASE Name OF
              FIELDCAPTION(Total),FIELDCAPTION("G/L Total"):
                CASE CurrForm.Matrix.MatrixRec.Name OF
                  FIELDCAPTION(Inventory):
                    BEGIN
                      SETFILTER(Inventory,'<>%1',0);
                      FORM.RUN(0,InvtReportEntry,Inventory);
                    END;
                  FIELDCAPTION("WIP Inventory"):
                    BEGIN
                      SETFILTER("WIP Inventory",'<>%1',0);
                      FORM.RUN(0,InvtReportEntry,"WIP Inventory");
                    END;
                  FIELDCAPTION("Inventory (Interim)"):
                    BEGIN
                      SETFILTER("Inventory (Interim)",'<>%1',0);
                      FORM.RUN(0,InvtReportEntry,"Inventory (Interim)");
                    END;
                END;
              FIELDCAPTION("COGS (Interim)"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION("Inventory (Interim)")]
                THEN BEGIN
                  SETFILTER("COGS (Interim)",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"COGS (Interim)");
                END;
              FIELDCAPTION("Direct Cost Applied"):
                CASE CurrForm.Matrix.MatrixRec.Name OF
                  FIELDCAPTION(Total),FIELDCAPTION("G/L Total"):
                    BEGIN
                      SETFILTER("Direct Cost Applied",'<>%1',0);
                      FORM.RUN(0,InvtReportEntry,"Direct Cost Applied");
                    END;
                  FIELDCAPTION(Inventory):
                    BEGIN
                      SETFILTER("Direct Cost Applied Actual",'<>%1',0);
                      FORM.RUN(0,InvtReportEntry,"Direct Cost Applied Actual");
                    END;
                  FIELDCAPTION("WIP Inventory"):
                    BEGIN
                      SETFILTER("Direct Cost Applied WIP",'<>%1',0);
                      FORM.RUN(0,InvtReportEntry,"Direct Cost Applied WIP");
                    END;
                END;
              FIELDCAPTION("Overhead Applied"):
                CASE CurrForm.Matrix.MatrixRec.Name OF
                  FIELDCAPTION(Total),FIELDCAPTION("G/L Total"):
                    BEGIN
                      SETFILTER("Overhead Applied",'<>%1',0);
                      FORM.RUN(0,InvtReportEntry,"Overhead Applied");
                    END;
                  FIELDCAPTION(Inventory):
                    BEGIN
                      SETFILTER("Overhead Applied Actual",'<>%1',0);
                      FORM.RUN(0,InvtReportEntry,"Overhead Applied Actual");
                    END;
                  FIELDCAPTION("WIP Inventory"):
                    BEGIN
                      SETFILTER("Overhead Applied WIP",'<>%1',0);
                      FORM.RUN(0,InvtReportEntry,"Overhead Applied WIP");
                    END;
                END;
              FIELDCAPTION("Inventory Adjmt."):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION(Inventory)] THEN BEGIN
                  SETFILTER("Inventory Adjmt.",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Inventory Adjmt.");
                END;
              FIELDCAPTION("Invt. Accrual (Interim)"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION("Inventory (Interim)")] THEN BEGIN
                  SETFILTER("Invt. Accrual (Interim)",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Invt. Accrual (Interim)");
                END;
              FIELDCAPTION(COGS):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION(Inventory)] THEN BEGIN
                  SETFILTER(COGS,'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,COGS);
                END;
              FIELDCAPTION("Purchase Variance"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION(Inventory)] THEN BEGIN
                  SETFILTER("Purchase Variance",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Purchase Variance");
                END;
              FIELDCAPTION("Material Variance"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION(Inventory)] THEN BEGIN
                  SETFILTER("Material Variance",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Material Variance");
                END;
              FIELDCAPTION("Capacity Variance"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION(Inventory)] THEN BEGIN
                  SETFILTER("Capacity Variance",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Capacity Variance");
                END;
              FIELDCAPTION("Subcontracted Variance"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION(Inventory)] THEN BEGIN
                  SETFILTER("Subcontracted Variance",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Subcontracted Variance");
                END;
              FIELDCAPTION("Capacity Overhead Variance"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION(Inventory)] THEN BEGIN
                  SETFILTER("Capacity Overhead Variance",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Capacity Overhead Variance");
                END;
              FIELDCAPTION("Mfg. Overhead Variance"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION(Inventory)] THEN BEGIN
                  SETFILTER("Mfg. Overhead Variance",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Mfg. Overhead Variance");
                END;
              FIELDCAPTION("Direct Cost Applied Actual"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION(Inventory)] THEN BEGIN
                  SETFILTER("Direct Cost Applied Actual",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Direct Cost Applied Actual");
                END;
              FIELDCAPTION("Direct Cost Applied WIP"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION("WIP Inventory")] THEN BEGIN
                  SETFILTER("Direct Cost Applied WIP",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Direct Cost Applied WIP");
                END;
              FIELDCAPTION("Overhead Applied WIP"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION("WIP Inventory")] THEN BEGIN
                  SETFILTER("Overhead Applied WIP",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Overhead Applied WIP");
                END;
              FIELDCAPTION("Inventory To WIP"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION("WIP Inventory"),FIELDCAPTION(Inventory)] THEN BEGIN
                  SETFILTER("Inventory To WIP",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"Inventory To WIP");
                END;
              FIELDCAPTION("WIP To Interim"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION("WIP Inventory"),FIELDCAPTION("Inventory (Interim)")] THEN BEGIN
                  SETFILTER("WIP To Interim",'<>%1',0);
                  FORM.RUN(0,InvtReportEntry,"WIP To Interim");
                END;
            END;
        END;
        RESET;
      END;
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      Location@1000 : Record 14;
    BEGIN
      IF ColumnDimCode <> '' THEN BEGIN
        MESSAGE(Text003,ColumnDimCode);
        ColumnDimCode := '';
      END;

      WITH InvtReportHeader DO BEGIN
        "Column Option" := DimCodeToOption(ColumnDimCode);
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END;
    END;

    LOCAL PROCEDURE ValidateLineDimCode@19();
    VAR
      Location@1000 : Record 14;
    BEGIN
      IF ColumnDimCode <> '' THEN BEGIN
        MESSAGE(Text003,ColumnDimCode);
        ColumnDimCode := '';
      END;

      WITH InvtReportHeader DO BEGIN
        "Column Option" := DimCodeToOption(ColumnDimCode);
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END;
    END;

    LOCAL PROCEDURE Calculate@16() Amount@1001 : Decimal;
    BEGIN
      GetGLSetup;

      WITH InvtReportEntry DO BEGIN
        CASE TRUE OF
          FIELDCAPTION("G/L Total") IN [Name,CurrForm.Matrix.MatrixRec.Name]:
            SETRANGE(Type,Type::"G/L Account");
          FIELDCAPTION(Difference) IN [Name,CurrForm.Matrix.MatrixRec.Name],
          FIELDCAPTION(Warning) IN [Name,CurrForm.Matrix.MatrixRec.Name]:
            SETRANGE(Type,Type::" ");
          ELSE
            SETRANGE(Type,Type::Item);
        END;

        CASE InvtReportHeader."Line Option" OF
          InvtReportHeader."Line Option"::"Balance Sheet",
          InvtReportHeader."Line Option"::"Income Statement":
            CASE Name OF
              FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),FIELDCAPTION(Difference):
                CASE CurrForm.Matrix.MatrixRec.Name OF
                  FIELDCAPTION(Inventory):
                    BEGIN
                      CALCSUMS(Inventory);
                      Amount := Inventory;
                    END;
                  FIELDCAPTION("WIP Inventory"):
                    BEGIN
                      CALCSUMS("WIP Inventory");
                      Amount := "WIP Inventory";
                    END;
                  FIELDCAPTION("Inventory (Interim)"):
                    BEGIN
                      CALCSUMS("Inventory (Interim)");
                      Amount := "Inventory (Interim)";
                    END;
                END;
              FIELDCAPTION("COGS (Interim)"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION("Inventory (Interim)"),
                                                        FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("COGS (Interim)");
                    Amount := "COGS (Interim)";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Direct Cost Applied"):
                CASE CurrForm.Matrix.MatrixRec.Name OF
                  FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),FIELDCAPTION(Difference):
                    BEGIN
                      CALCSUMS("Direct Cost Applied");
                      Amount := "Direct Cost Applied";
                    END;
                  FIELDCAPTION(Inventory):
                    BEGIN
                      CALCSUMS("Direct Cost Applied Actual");
                      Amount := "Direct Cost Applied Actual";
                    END;
                  FIELDCAPTION("WIP Inventory"):
                    BEGIN
                      CALCSUMS("Direct Cost Applied WIP");
                      Amount := "Direct Cost Applied WIP";
                    END;
                END;
              FIELDCAPTION("Overhead Applied"):
                CASE CurrForm.Matrix.MatrixRec.Name OF
                  FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),FIELDCAPTION(Difference):
                    BEGIN
                      CALCSUMS("Overhead Applied");
                      Amount := "Overhead Applied";
                    END;
                  FIELDCAPTION(Inventory):
                    BEGIN
                      CALCSUMS("Overhead Applied Actual");
                      Amount := "Overhead Applied Actual";
                    END;
                  FIELDCAPTION("WIP Inventory"):
                    BEGIN
                      CALCSUMS("Overhead Applied WIP");
                      Amount := "Overhead Applied WIP";
                    END;
                END;
              FIELDCAPTION("Inventory Adjmt."):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Inventory Adjmt.");
                    Amount := "Inventory Adjmt.";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Invt. Accrual (Interim)"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION("Inventory (Interim)"),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Invt. Accrual (Interim)");
                    Amount := "Invt. Accrual (Interim)";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION(COGS):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS(COGS);
                    Amount := COGS;
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Purchase Variance"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Purchase Variance");
                    Amount := "Purchase Variance";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Material Variance"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Material Variance");
                    Amount := "Material Variance";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Capacity Variance"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Capacity Variance");
                    Amount := "Capacity Variance";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Subcontracted Variance"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Subcontracted Variance");
                    Amount := "Subcontracted Variance";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Capacity Overhead Variance"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Capacity Overhead Variance");
                    Amount := "Capacity Overhead Variance";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Mfg. Overhead Variance"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Mfg. Overhead Variance");
                    Amount := "Mfg. Overhead Variance";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Direct Cost Applied Actual"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION(Inventory),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Direct Cost Applied Actual");
                    Amount := "Direct Cost Applied Actual";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Direct Cost Applied WIP"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION("WIP Inventory"),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Direct Cost Applied WIP");
                    Amount := "Direct Cost Applied WIP";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Overhead Applied WIP"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION(Total),FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION("WIP Inventory"),FIELDCAPTION(Difference)]
                  THEN BEGIN
                    CALCSUMS("Overhead Applied WIP");
                    Amount := "Overhead Applied WIP";
                  END ELSE
                    Amount := 0;
                END;
              FIELDCAPTION("Inventory To WIP"):
                IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION("G/L Total"),
                                                      FIELDCAPTION("WIP Inventory"),
                                                      FIELDCAPTION(Inventory)]
                THEN BEGIN
                  CALCSUMS("Inventory To WIP");
                  Amount := "Inventory To WIP";
                  IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Inventory) THEN
                    Amount := -Amount;
                END ELSE
                  Amount := 0;
              FIELDCAPTION("WIP To Interim"):
                BEGIN
                  IF CurrForm.Matrix.MatrixRec.Name IN [FIELDCAPTION("G/L Total"),
                                                        FIELDCAPTION("WIP Inventory"),
                                                        FIELDCAPTION("Inventory (Interim)")]
                  THEN BEGIN
                    CALCSUMS("WIP To Interim");
                    Amount := "WIP To Interim";
                    IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION("WIP Inventory") THEN
                      Amount := -Amount;
                  END ELSE
                    Amount := 0;
                END;
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE GetWarningText@5(TheField@1000 : Text[80];ShowType@1001 : 'ReturnAsText,ShowAsMessage') : Text[250];
    BEGIN
      WITH InvtReportEntry DO BEGIN
        IF "Expected Cost Posting Warning" THEN
          IF TheField IN [FIELDCAPTION("Inventory (Interim)"),
                          FIELDCAPTION("Invt. Accrual (Interim)"),
                          FIELDCAPTION("COGS (Interim)"),
                          FIELDCAPTION("Invt. Accrual (Interim)"),
                          FIELDCAPTION("WIP Inventory")]
          THEN BEGIN
            IF ShowType = ShowType::ReturnAsText THEN
              EXIT(Text006);
            EXIT(Text016);
          END;
        IF "Cost is Posted to G/L Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text007);
          EXIT(Text017);
        END;
        IF "Compression Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text008);
          EXIT(Text018);
        END;
        IF "Posting Group Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text009);
          EXIT(Text019);
        END;
        IF "Direct Postings Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text010);
          EXIT(Text020);
        END;
        IF "Posting Date Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text011);
          EXIT(Text021);
        END;
        IF "Closing Period Overlap Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text012);
          EXIT(Text022);
        END;
        IF "Similar Accounts Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text013);
          EXIT(Text023);
        END;
        IF "Deleted G/L Accounts Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text014);
          EXIT(Text024);
        END;
      END;
    END;

    LOCAL PROCEDURE ShowWarningText@2(ShowType@1000 : 'ReturnAsText,ShowAsMessage') : Text[250];
    VAR
      Text@1001 : Text[250];
    BEGIN
      WITH InvtReportEntry DO BEGIN
        CASE Name OF
          FIELDCAPTION(Warning):
            CASE CurrForm.Matrix.MatrixRec.Name OF
              FIELDCAPTION(Inventory):
                IF Inventory <> 0 THEN
                  Text := GetWarningText(FIELDCAPTION(Inventory),ShowType);
              FIELDCAPTION("WIP Inventory"):
                IF "WIP Inventory" <> 0 THEN
                  Text := GetWarningText(FIELDCAPTION("WIP Inventory"),ShowType);
              FIELDCAPTION("Inventory (Interim)"):
                IF "Inventory (Interim)" <> 0 THEN
                  Text := GetWarningText(FIELDCAPTION("Inventory (Interim)"),ShowType);
            END;
          FIELDCAPTION("COGS (Interim)"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "COGS (Interim)" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("COGS (Interim)"),ShowType);
          FIELDCAPTION("Direct Cost Applied"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Direct Cost Applied" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Direct Cost Applied"),ShowType);
          FIELDCAPTION("Overhead Applied"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Overhead Applied" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Overhead Applied"),ShowType);
          FIELDCAPTION("Inventory Adjmt."):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Inventory Adjmt." <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Inventory Adjmt."),ShowType);
          FIELDCAPTION("Invt. Accrual (Interim)"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Invt. Accrual (Interim)" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Invt. Accrual (Interim)"),ShowType);
          FIELDCAPTION(COGS):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF COGS <> 0 THEN
                Text := GetWarningText(FIELDCAPTION(COGS),ShowType);
          FIELDCAPTION("Purchase Variance"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Purchase Variance" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Purchase Variance"),ShowType);
          FIELDCAPTION("Material Variance"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Material Variance" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Material Variance"),ShowType);
          FIELDCAPTION("Capacity Variance"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Capacity Variance" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Capacity Variance"),ShowType);
          FIELDCAPTION("Subcontracted Variance"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Subcontracted Variance" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Subcontracted Variance"),ShowType);
          FIELDCAPTION("Capacity Overhead Variance"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Capacity Overhead Variance" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Capacity Overhead Variance"),ShowType);
          FIELDCAPTION("Mfg. Overhead Variance"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Mfg. Overhead Variance" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Mfg. Overhead Variance"),ShowType);
          FIELDCAPTION("Direct Cost Applied Actual"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Direct Cost Applied Actual" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Direct Cost Applied Actual"),ShowType);
          FIELDCAPTION("Direct Cost Applied WIP"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Direct Cost Applied WIP" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Direct Cost Applied WIP"),ShowType);
          FIELDCAPTION("Overhead Applied WIP"):
            IF CurrForm.Matrix.MatrixRec.Name = FIELDCAPTION(Warning) THEN
              IF "Overhead Applied WIP" <> 0 THEN
                Text := GetWarningText(FIELDCAPTION("Overhead Applied WIP"),ShowType);
        END;
      END;

      IF ShowType = ShowType::ReturnAsText THEN
        EXIT(Text);
      MESSAGE(Text);
    END;

    PROCEDURE GetCaption@3() : Text[250];
    VAR
      ObjTransl@1000 : Record 377;
      SourceTableName@1002 : Text[100];
      LocationTableName@1003 : Text[100];
      Description@1001 : Text[250];
    BEGIN
      SourceTableName := '';
      LocationTableName := '';
      IF ItemFilter <> '' THEN
        SourceTableName := ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,27);
      IF LocationFilter <> '' THEN
        LocationTableName := ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,14);

      EXIT(STRSUBSTNO('%1 %2 %3 %4',SourceTableName,ItemFilter,LocationTableName,LocationFilter));
    END;

    BEGIN
    END.
  }
}
