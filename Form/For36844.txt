OBJECT Form 36844 _Liq. Analysis by Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=LIQEM6.00.01;
  }
  PROPERTIES
  {
    Width=16500;
    Height=4290;
    CaptionML=ENU=Liquidity Analysis by Dimensions;
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=AnalysisViewCode;
    OnOpenForm=BEGIN
                 IF (NewAnalysisViewCode <> '') AND (NewAnalysisViewCode <> AnalysisViewCode) THEN
                   AnalysisViewCode := NewAnalysisViewCode;

                 ValidateAnalysisViewCode;

                 GLSetup.GET;

                 IF (LineDimCode = '') AND (ColumnDimCode = '') THEN BEGIN
                   LineDimCode := LiqAcc.TABLECAPTION;
                   ColumnDimCode := Text1140000;
                 END;
                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);

                 FindPeriod('');

                 CurrForm.UPDATECONTROLS;

                 CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
               END;

    OnFindRecord=BEGIN
                   EXIT(FindRec(LineDimOption,Rec,Which));
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(LineDimOption,Rec,Steps));
                 END;

    OnAfterGetRecord=BEGIN
                       Amount := CalcAmount(FALSE);
                     END;

  }
  CONTROLS
  {
    { 1140000;TabControl;220  ;220  ;16060;3080 ;HorzGlue=Both;
                                                 VertGlue=Top;
                                                 PageNamesML=ENU=General,Filters,Options,Matrix Options }
    { 1140001;TextBox   ;3850 ;990  ;2750 ;440  ;ParentControl=1140000;
                                                 InPage=0;
                                                 CaptionML=ENU=Analysis View Code;
                                                 SourceExpr=AnalysisViewCode;
                                                 TableRelation="Liquidity Analysis View";
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              ValidateAnalysisViewCode;
                                                              ValidateColumnDimCode;
                                                              ValidateLineDimCode;
                                                            END;

                                                 OnLookup=VAR
                                                            AnalysisViewList@1140000 : Form 5055287;
                                                          BEGIN
                                                            AnalysisViewList.LOOKUPMODE := TRUE;
                                                            AnalysisViewList.SETRECORD(AnalysisView);
                                                            IF AnalysisViewList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                              AnalysisViewList.GETRECORD(AnalysisView);
                                                              AnalysisViewCode := AnalysisView.Code;
                                                              Text := AnalysisView.Code;
                                                              ValidateAnalysisViewCode;
                                                              ValidateColumnDimCode;
                                                              ValidateLineDimCode;
                                                              CurrForm.UPDATE;
                                                              EXIT(TRUE);
                                                            END;
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATECONTROLS;
                                                                 END;
                                                                  }
    { 1140002;Label     ;440  ;990  ;3300 ;440  ;ParentControl=1140001 }
    { 1140003;TextBox   ;3850 ;1650 ;2750 ;440  ;ParentControl=1140000;
                                                 InPage=0;
                                                 CaptionML=ENU=Show as Lines;
                                                 SourceExpr=LineDimCode;
                                                 OnValidate=BEGIN
                                                              IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                                                                ColumnDimCode := '';
                                                                ValidateColumnDimCode;
                                                              END;
                                                              AVBreakdownBuffer.DELETEALL;
                                                              ValidateLineDimCode;
                                                            END;

                                                 OnLookup=VAR
                                                            NewCode@1140000 : Text[30];
                                                          BEGIN
                                                            NewCode := GetDimSelection(LineDimCode);
                                                            IF NewCode = LineDimCode THEN
                                                              EXIT(FALSE)
                                                            ELSE BEGIN
                                                              Text := NewCode;
                                                              LineDimCode := NewCode;
                                                              ValidateLineDimCode;
                                                              CurrForm.UPDATE;
                                                              EXIT(TRUE);
                                                            END
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1140004;Label     ;440  ;1650 ;3300 ;440  ;ParentControl=1140003 }
    { 1140005;TextBox   ;3850 ;2200 ;2750 ;440  ;ParentControl=1140000;
                                                 InPage=0;
                                                 CaptionML=ENU=Show as Columns;
                                                 SourceExpr=ColumnDimCode;
                                                 OnValidate=BEGIN
                                                              IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                                                                LineDimCode := '';
                                                                ValidateLineDimCode;
                                                              END;
                                                              AVBreakdownBuffer.DELETEALL;
                                                              ValidateColumnDimCode;

                                                              CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                            END;

                                                 OnLookup=VAR
                                                            NewCode@1140000 : Text[30];
                                                          BEGIN
                                                            NewCode := GetDimSelection(ColumnDimCode);
                                                            IF NewCode = ColumnDimCode THEN
                                                              EXIT(FALSE)
                                                            ELSE BEGIN
                                                              Text := NewCode;
                                                              ColumnDimCode := NewCode;
                                                              ValidateColumnDimCode;
                                                              CurrForm.UPDATE;
                                                              EXIT(TRUE);
                                                            END
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1140006;Label     ;440  ;2200 ;3300 ;440  ;ParentControl=1140005 }
    { 1140007;TextBox   ;3850 ;990  ;2750 ;440  ;ParentControl=1140000;
                                                 InPage=1;
                                                 CaptionML=ENU=Date Filter;
                                                 SourceExpr=DateFilter;
                                                 OnValidate=VAR
                                                              LiqAcc@1140000 : Record 15;
                                                              ApplicationManagement@1140001 : Codeunit 1;
                                                            BEGIN
                                                              IF ApplicationManagement.MakeDateFilter(DateFilter) = 0 THEN;
                                                              LiqAcc.SETFILTER("Date Filter",DateFilter);
                                                              DateFilter := LiqAcc.GETFILTER("Date Filter");
                                                              InternalDateFilter := DateFilter;
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   IF ColumnDimOption = ColumnDimOption::Period THEN
                                                                     CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1140008;Label     ;440  ;990  ;3300 ;440  ;ParentControl=1140007 }
    { 1140009;TextBox   ;12980;1540 ;2750 ;440  ;Name=Dim2Filter;
                                                 ParentControl=1140000;
                                                 InPage=1;
                                                 CaptionML=ENU=Dimension 2 Filter;
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim2Filter;
                                                 CaptionClass=GetCaptionClass(2);
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(AnalysisView."Dimension 2 Code",Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   IF ColumnDimOption = ColumnDimOption::"Dimension 2" THEN
                                                                     CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1140010;TextBox   ;12980;990  ;2750 ;440  ;Name=Dim1Filter;
                                                 ParentControl=1140000;
                                                 InPage=1;
                                                 CaptionML=ENU=Dimension 1 Filter;
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim1Filter;
                                                 CaptionClass=GetCaptionClass(1);
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(AnalysisView."Dimension 1 Code",Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   IF ColumnDimOption = ColumnDimOption::"Dimension 1" THEN
                                                                     CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1140011;TextBox   ;12980;2640 ;2750 ;440  ;Name=Dim4Filter;
                                                 ParentControl=1140000;
                                                 InPage=1;
                                                 CaptionML=ENU=Dimension 4 Filter;
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim4Filter;
                                                 CaptionClass=GetCaptionClass(4);
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(AnalysisView."Dimension 4 Code",Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   IF ColumnDimOption = ColumnDimOption::"Dimension 4" THEN
                                                                     CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1140012;TextBox   ;12980;2090 ;2750 ;440  ;Name=Dim3Filter;
                                                 ParentControl=1140000;
                                                 InPage=1;
                                                 CaptionML=ENU=Dimension 3 Filter;
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim3Filter;
                                                 CaptionClass=GetCaptionClass(3);
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(AnalysisView."Dimension 3 Code",Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   IF ColumnDimOption = ColumnDimOption::"Dimension 3" THEN
                                                                     CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1140013;TextBox   ;3850 ;2090 ;2750 ;440  ;ParentControl=1140000;
                                                 InPage=1;
                                                 CaptionML=ENU=Liquidity Filter;
                                                 SourceExpr=LiquidityFilter;
                                                 TableRelation=Liquidity.No.;
                                                 LookupFormID=Liquidity List;
                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   IF ColumnDimOption = ColumnDimOption::Liquidity THEN
                                                                     CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1140014;Label     ;440  ;2090 ;3300 ;440  ;ParentControl=1140013 }
    { 1140015;TextBox   ;3850 ;1540 ;2750 ;440  ;ParentControl=1140000;
                                                 InPage=1;
                                                 CaptionML=ENU=Liquidity Account Filter;
                                                 ClearOnLookup=No;
                                                 SourceExpr=LiqAccFilter;
                                                 OnLookup=VAR
                                                            LiqAccList@1140000 : Form 5055265;
                                                          BEGIN
                                                            LiqAccList.LOOKUPMODE(TRUE);
                                                            IF NOT (LiqAccList.RUNMODAL = ACTION::LookupOK) THEN
                                                              EXIT(FALSE)
                                                            ELSE
                                                              Text := LiqAccList.GetSelectionFilter;
                                                            EXIT(TRUE);
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   IF ColumnDimOption = ColumnDimOption::"Liquidity Account" THEN
                                                                     CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1140016;Label     ;440  ;1540 ;3300 ;440  ;ParentControl=1140015 }
    { 1140017;Label     ;9570 ;990  ;3300 ;440  ;ParentControl=1140010;
                                                 InPage=1 }
    { 1140018;Label     ;9570 ;1540 ;3300 ;440  ;ParentControl=1140009;
                                                 InPage=1 }
    { 1140019;Label     ;9570 ;2090 ;3300 ;440  ;ParentControl=1140012;
                                                 InPage=1 }
    { 1140020;Label     ;9570 ;2640 ;3300 ;440  ;ParentControl=1140011;
                                                 InPage=1 }
    { 1140021;CheckBox  ;12980;990  ;440  ;440  ;ParentControl=1140000;
                                                 InPage=2;
                                                 ShowCaption=No;
                                                 CaptionML=ENU=Show Column Name;
                                                 SourceExpr=ShowColumnName;
                                                 OnAfterValidate=BEGIN
                                                                   CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                                 END;
                                                                  }
    { 1140022;Label     ;9570 ;990  ;3300 ;440  ;ParentControl=1140021 }
    { 1140023;TextBox   ;3850 ;1540 ;2750 ;440  ;ParentControl=1140000;
                                                 InPage=2;
                                                 CaptionML=ENU=Rounding Factor;
                                                 OptionCaptionML=ENU=None,1,1000,1000000;
                                                 OptionString=None,1,1000,1000000;
                                                 SourceExpr=RoundingFactor }
    { 1140024;Label     ;440  ;1540 ;3300 ;440  ;ParentControl=1140023 }
    { 1140025;TextBox   ;3850 ;990  ;2750 ;440  ;ParentControl=1140000;
                                                 InPage=2;
                                                 CaptionML=ENU=Show;
                                                 OptionCaptionML=ENU=Amounts;
                                                 OptionString=Amounts;
                                                 SourceExpr=ShowActual;
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              Amount := CalcAmount(FALSE);
                                                            END;
                                                             }
    { 1140026;Label     ;440  ;990  ;3300 ;440  ;ParentControl=1140025 }
    { 1140027;CheckBox  ;12980;1540 ;440  ;440  ;ParentControl=1140000;
                                                 InPage=2;
                                                 ShowCaption=No;
                                                 CaptionML=ENU=Show Opposite Sign;
                                                 SourceExpr=ShowOppositeSign;
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              Amount := CalcAmount(FALSE);
                                                            END;
                                                             }
    { 1140028;Label     ;9570 ;1540 ;3300 ;440  ;ParentControl=1140027;
                                                 MultiLine=Yes }
    { 13  ;TextBox      ;3850 ;990  ;3960 ;440  ;ParentControl=1140000;
                                                 InPage=3;
                                                 CaptionML=ENU=View by;
                                                 OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                                 SourceExpr=PeriodType;
                                                 OnValidate=BEGIN
                                                              FindPeriod('');
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   IF ColumnDimOption = ColumnDimOption::Period THEN
                                                                     CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                                 END;
                                                                  }
    { 16  ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=13 }
    { 14  ;TextBox      ;3850 ;1540 ;3960 ;440  ;Editable=No;
                                                 ParentControl=1140000;
                                                 InPage=3;
                                                 CaptionML=ENU=Column Set;
                                                 SourceExpr=ColumnsSet }
    { 11  ;CommandButton;8470 ;1430 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ParentControl=1140000;
                                                 InPage=3;
                                                 ShowCaption=No;
                                                 BitmapPos=Center;
                                                 AutoRepeat=Yes;
                                                 Bitmap=16;
                                                 CaptionML=ENU=Next Set;
                                                 ToolTipML=ENU=Next Set;
                                                 OnPush=BEGIN
                                                          CreateCaptionSet(Rec,Step::Next,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                        END;
                                                         }
    { 15  ;Label        ;440  ;1540 ;3300 ;440  ;ParentControl=14;
                                                 InPage=3 }
    { 20  ;TextBox      ;3850 ;2090 ;2750 ;440  ;ParentControl=1140000;
                                                 InPage=3;
                                                 CaptionML=ENU=View as;
                                                 OptionCaptionML=ENU=Balance at Date,Net Change;
                                                 SourceExpr=QtyType }
    { 21  ;Label        ;440  ;2090 ;3300 ;440  ;ParentControl=20 }
    { 12  ;CommandButton;7920 ;1430 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ParentControl=1140000;
                                                 InPage=3;
                                                 ShowCaption=No;
                                                 BitmapPos=Center;
                                                 AutoRepeat=Yes;
                                                 Bitmap=15;
                                                 CaptionML=ENU=Previous Set;
                                                 ToolTipML=ENU=Previous Set;
                                                 OnPush=BEGIN
                                                          CreateCaptionSet(Rec,Step::Previous,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                        END;
                                                         }
    { 1140029;CommandButton;14080;3520;2200;550 ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 1140030;CommandButton;9240;3520;2200;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=ENU=&Show Matrix;
                                                 OnPush=VAR
                                                          MatrixForm@1198 : Form 36845;
                                                        BEGIN
                                                          CLEAR(MatrixForm);

                                                          MatrixForm.Load(LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,PeriodType,DateFilter,LiqAccFilter,
                                                            LiquidityFilter,Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter,
                                                            ShowActual,RoundingFactor,
                                                            ColumnCaptions,PrimaryKeyFirstColInSet);
                                                          MatrixForm.Load2(QtyType,AnalysisViewCode,ShowOppositeSign,ShowColumnName);
                                                          MatrixForm.RUNMODAL;
                                                        END;
                                                         }
    { 24  ;MenuButton   ;11660;3520 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=ENU=&Actions;
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=25;
                                                     CaptionML=ENU=Reverse Lines and Columns;
                                                     OnPush=VAR
                                                              TempDimCode@1000 : Text[30];
                                                            BEGIN
                                                              TempDimCode := ColumnDimCode;
                                                              ColumnDimCode := LineDimCode;
                                                              LineDimCode := TempDimCode;
                                                              ValidateLineDimCode;
                                                              ValidateColumnDimCode;
                                                              CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                                                            END;
                                                             }
                                                 }
                                                  }
  }
  CODE
  {
    VAR
      Text1140000@1140000 : TextConst 'ENU=Period';
      Text1140001@1140001 : TextConst 'ENU=<Sign><Integer Thousand><Decimals,2>';
      Text1140002@1140002 : TextConst 'ENU=You have not yet defined an analysis view.';
      Text1140003@1140003 : TextConst 'ENU=%1 is not a valid line definition.';
      Text1140004@1140004 : TextConst 'ENU=%1 is not a valid column definition.';
      Text1140005@1140005 : TextConst 'ENU=1,6,,Dimension 1 Filter';
      Text1140006@1140006 : TextConst 'ENU=1,6,,Dimension 2 Filter';
      Text1140007@1140007 : TextConst 'ENU=1,6,,Dimension 3 Filter';
      Text1140008@1140008 : TextConst 'ENU=1,6,,Dimension 4 Filter';
      GLSetup@1140009 : Record 98;
      LiqAcc@1140010 : Record 5055251;
      AnalysisView@1140011 : Record 5055269;
      AnalysisViewEntry@1140012 : Record 5055271;
      AVBreakdownBuffer@1140013 : TEMPORARY Record 375;
      LiqAccount@1140014 : Record 5055251;
      MatrixRecord@1140015 : Record 367;
      LineDimOption@1140016 : 'Liquidity Account,Period,Liquidity,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      ColumnDimOption@1140017 : 'Liquidity Account,Period,Liquidity,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      PeriodType@1140018 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      AmountType@1140019 : 'Net Change,Balance at Date';
      RoundingFactor@1140020 : 'None,1,1000,1000000';
      ShowActual@1140021 : 'Amounts';
      Direction@1140022 : 'Backward,Forward';
      Step@1140023 : 'First,Previous,Same,Next';
      QtyType@1140024 : 'Net Change,Balance at Date';
      LineDimCode@1140025 : Text[30];
      ColumnDimCode@1140026 : Text[30];
      DateFilter@1140027 : Text[250];
      InternalDateFilter@1140028 : Text[250];
      LiquidityFilter@1140029 : Text[250];
      MatrixHeader@1140030 : Text[50];
      ColumnCaptions@1140031 : ARRAY [32] OF Text[50];
      FirstColumn@1140032 : Text[1024];
      LastColumn@1140033 : Text[1024];
      PrimaryKeyFirstColInSet@1140034 : Text[1024];
      ColumnsSet@1140035 : Text[1024];
      AnalysisViewCode@1140036 : Code[10];
      NewAnalysisViewCode@1140050 : Code[10];
      LiqAccFilter@1140037 : Code[250];
      Dim1Filter@1140038 : Code[250];
      Dim2Filter@1140039 : Code[250];
      Dim3Filter@1140040 : Code[250];
      Dim4Filter@1140041 : Code[250];
      ColumnFilters@1140042 : ARRAY [32] OF Code[100];
      MatrixAmount@1140043 : Decimal;
      NoOfColumns@1101100044 : Integer;
      ShowOppositeSign@1140045 : Boolean;
      ShowColumnName@1140046 : Boolean;
      PeriodInitialized@1140047 : Boolean;
      FirstColumnDate@1140048 : Date;
      LastColumnDate@1140049 : Date;

    LOCAL PROCEDURE DimCodeToOption@1140000(DimCode@1140000 : Text[30]) : Integer;
    VAR
      Liquidity@1140001 : Record 5055250;
    BEGIN
      CASE DimCode OF
        '' :
          EXIT(-1);
        LiqAcc.TABLECAPTION :
          EXIT(0);
        Text1140000 :
          EXIT(1);
        Liquidity.TABLECAPTION :
          EXIT(2);
        AnalysisView."Dimension 1 Code" :
          EXIT(3);
        AnalysisView."Dimension 2 Code" :
          EXIT(4);
        AnalysisView."Dimension 3 Code" :
          EXIT(5);
        AnalysisView."Dimension 4 Code" :
          EXIT(6);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@1140001(DimOption@1140000 : 'Liquidity Account,Period,Liquidity,Dimension 1,Dimension 2,Dimension 3,Dimension 4';VAR DimCodeBuf@1140001 : Record 367;Which@1140002 : Text[250]) : Boolean;
    VAR
      LiqAcc@1140003 : Record 5055251;
      Liquidity@1140004 : Record 5055250;
      Period@1140005 : Record 2000000007;
      DimVal@1140006 : Record 349;
      PeriodFormMgt@1140007 : Codeunit 359;
      Found@1140008 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::"Liquidity Account" :
          BEGIN
            LiqAcc."No." := DimCodeBuf.Code;
            IF LiqAccFilter <> '' THEN
              LiqAcc.SETFILTER("No.",LiqAccFilter);
            Found := LiqAcc.FIND(Which);
            IF Found THEN
              CopyLiqAccToBuf(LiqAcc,DimCodeBuf);
          END;
        DimOption::Period :
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            Period."Period Start" := DimCodeBuf."Period Start";
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF NOT PeriodInitialized AND (InternalDateFilter <> '') THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::Liquidity :
          BEGIN
            Liquidity."No." := DimCodeBuf.Code;
            IF LiquidityFilter <> '' THEN
              Liquidity.SETFILTER("No.",LiquidityFilter);
            Found := Liquidity.FIND(Which);
            IF Found THEN
              CopyLiquidityToBuf(Liquidity,DimCodeBuf);
          END;
        DimOption::"Dimension 1" :
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2" :
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3" :
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 4" :
          BEGIN
            IF Dim4Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim4Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@1140002(DimOption@1140000 : 'Liquidity Account,Period,Liquidity,Dimension 1,Dimension 2,Dimension 3,Dimension 4';VAR DimCodeBuf@1140001 : Record 367;Steps@1140002 : Integer) : Integer;
    VAR
      LiqAcc@1140003 : Record 5055251;
      Liquidity@1140004 : Record 5055250;
      Period@1140005 : Record 2000000007;
      DimVal@1140006 : Record 349;
      PeriodFormMgt@1140007 : Codeunit 359;
      ResultSteps@1140008 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::"Liquidity Account" :
          BEGIN
            LiqAcc."No." := DimCodeBuf.Code;
            IF LiqAccFilter <> '' THEN
              LiqAcc.SETFILTER("No.",LiqAccFilter);
            ResultSteps := LiqAcc.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyLiqAccToBuf(LiqAcc,DimCodeBuf);
          END;
        DimOption::Period :
          BEGIN
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            IF ResultSteps <> 0 THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::Liquidity :
          BEGIN
            Liquidity."No." := DimCodeBuf.Code;
            IF LiquidityFilter <> '' THEN
              Liquidity.SETFILTER("No.",LiquidityFilter);
            ResultSteps := Liquidity.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyLiquidityToBuf(Liquidity,DimCodeBuf);
          END;
        DimOption::"Dimension 1" :
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2" :
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3" :
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 4" :
          BEGIN
            IF Dim4Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim4Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyLiqAccToBuf@1140003(VAR TheLiqAcc@1140000 : Record 5055251;VAR TheDimCodeBuf@1140001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheLiqAcc."No.";
        Name := TheLiqAcc.Name;
        Totaling := TheLiqAcc.Totaling;
        Indentation := TheLiqAcc.Indentation;
        "Show in Bold" := TheLiqAcc."Account Type" <> TheLiqAcc."Account Type"::Posting;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@1140004(VAR ThePeriod@1140000 : Record 2000000007;VAR TheDimCodeBuf@1140001 : Record 367);
    VAR
      Period2@1140002 : Record 2000000007;
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        "Period End" := ThePeriod."Period End";
        IF DateFilter <> '' THEN BEGIN
          Period2.SETFILTER("Period End",DateFilter);
          IF Period2.GETRANGEMAX("Period End") < "Period End" THEN
            "Period End" := Period2.GETRANGEMAX("Period End");
        END;
        Name := ThePeriod."Period Name";
      END;
    END;

    LOCAL PROCEDURE CopyLiquidityToBuf@1140005(VAR TheLiquidity@1140000 : Record 5055250;VAR TheDimCodeBuf@1140001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheLiquidity."No.";
        Name := TheLiquidity.Description;
      END;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@1140006(VAR TheDimVal@1140000 : Record 349;VAR TheDimCodeBuf@1140001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
      END;
    END;

    LOCAL PROCEDURE FindPeriod@1140007(SearchText@1140000 : Code[10]);
    VAR
      Calendar@1140001 : Record 2000000007;
      PeriodFormMgt@1140002 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      IF PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType) THEN;
      IF AmountType = AmountType::"Net Change" THEN BEGIN
        AnalysisViewEntry.SETRANGE("Liquidity Date",Calendar."Period Start",Calendar."Period End");
        IF AnalysisViewEntry.GETRANGEMIN("Liquidity Date") = AnalysisViewEntry.GETRANGEMAX("Liquidity Date") THEN
          AnalysisViewEntry.SETRANGE("Liquidity Date",AnalysisViewEntry.GETRANGEMIN("Liquidity Date"));
      END ELSE
        AnalysisViewEntry.SETRANGE("Liquidity Date",0D,Calendar."Period End");

      InternalDateFilter := AnalysisViewEntry.GETFILTER("Liquidity Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN
        DateFilter := InternalDateFilter;
      AVBreakdownBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE GetDimSelection@1140009(OldDimSelCode@1140000 : Text[30]) : Text[30];
    VAR
      DimSelection@1140001 : Form 568;
    BEGIN
      DimSelection.InsertDimSelBuf(FALSE,LiqAcc.TABLECAPTION,LiqAcc.TABLECAPTION);
      DimSelection.InsertDimSelBuf(FALSE,Text1140000,Text1140000);
      IF AnalysisView."Dimension 1 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 1 Code",'');
      IF AnalysisView."Dimension 2 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 2 Code",'');
      IF AnalysisView."Dimension 3 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 3 Code",'');
      IF AnalysisView."Dimension 4 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 4 Code",'');

      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode)
      ELSE
        EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE LookUpCode@1140010(DimOption@1140000 : 'Liquidity Account,Period,Liquidity,Dimension 1,Dimension 2,Dimension 3,Dimension 4';DimCode@1140001 : Text[30];Code@1140002 : Text[30]);
    VAR
      LiqAcc@1140003 : Record 5055251;
      Liquidity@1140004 : Record 5055250;
      DimVal@1140005 : Record 349;
      DimValList@1140006 : Form 560;
    BEGIN
      CASE DimOption OF
        DimOption::"Liquidity Account" :
          BEGIN
            LiqAcc.GET(Code);
            FORM.RUNMODAL(FORM::"Liquidity Account List",LiqAcc);
          END;
        DimOption::Period : ;
        DimOption::Liquidity :
          BEGIN
            Liquidity.GET(Code);
            FORM.RUNMODAL(FORM::"Liquidity List",Liquidity);
          END;
        DimOption::"Dimension 1",DimOption::"Dimension 2",
        DimOption::"Dimension 3",DimOption::"Dimension 4" :
          BEGIN
            DimVal.SETRANGE("Dimension Code",DimCode);
            DimVal.GET(DimCode,Code);
            DimValList.SETTABLEVIEW(DimVal);
            DimValList.SETRECORD(DimVal);
            DimValList.RUNMODAL;
          END;
      END;
    END;

    LOCAL PROCEDURE LookUpDimFilter@1140011(Dim@1140000 : Code[20];VAR Text@1140001 : Text[250]) : Boolean;
    VAR
      DimVal@1140002 : Record 349;
      DimValList@1140003 : Form 560;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE)
    END;

    LOCAL PROCEDURE SetCommonFilters@1140012(VAR TheAnalysisViewEntry@1140000 : Record 5055271);
    VAR
      DateFilter2@1140001 : Text[1024];
    BEGIN
      WITH TheAnalysisViewEntry DO BEGIN
        RESET;
        SETRANGE("Analysis View Code",AnalysisView.Code);
        IF LiquidityFilter <> '' THEN
          SETFILTER("Liquidity No.",LiquidityFilter);
        IF LiqAccFilter <> '' THEN
          SETFILTER("Liquidity Account No.",LiqAccFilter);
        IF DateFilter <> '' THEN
          SETFILTER("Liquidity Date",DateFilter);
        IF Dim1Filter <> '' THEN
          SETFILTER("Dimension 1 Value Code",Dim1Filter);
        IF Dim2Filter <> '' THEN
          SETFILTER("Dimension 2 Value Code",Dim2Filter);
        IF Dim3Filter <> '' THEN
          SETFILTER("Dimension 3 Value Code",Dim3Filter);
        IF Dim4Filter <> '' THEN
          SETFILTER("Dimension 4 Value Code",Dim4Filter);
        SETPERMISSIONFILTER;
      END;
    END;

    LOCAL PROCEDURE SetDimFilters@1140013(VAR TheAnalysisViewEntry@1140000 : Record 5055271;LineOrColumn@1140001 : 'Line,Column');
    VAR
      DimOption@1140002 : 'Liquidity Account,Period,Liquidity,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      DimCodeBuf@1140003 : Record 367;
    BEGIN
      IF LineOrColumn = LineOrColumn::Line THEN BEGIN
        DimCodeBuf := Rec;
        DimOption := LineDimOption;
      END ELSE BEGIN
        DimCodeBuf := MatrixRecord;
        DimOption := ColumnDimOption;
      END;
      CASE DimOption OF
        DimOption::"Liquidity Account" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("Liquidity Account No.",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("Liquidity Account No.",DimCodeBuf.Totaling);
        DimOption::Period :
          BEGIN
            IF AmountType = AmountType::"Net Change" THEN
              TheAnalysisViewEntry.SETRANGE(
                "Liquidity Date",DimCodeBuf."Period Start",DimCodeBuf."Period End")
            ELSE
              TheAnalysisViewEntry.SETRANGE("Liquidity Date",0D,DimCodeBuf."Period End");
          END;
        DimOption::Liquidity :
          TheAnalysisViewEntry.SETRANGE("Liquidity No.",DimCodeBuf.Code);
        DimOption::"Dimension 1" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("Dimension 1 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("Dimension 1 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 2" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("Dimension 2 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("Dimension 2 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 3" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("Dimension 3 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("Dimension 3 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 4" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("Dimension 4 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("Dimension 4 Value Code",DimCodeBuf.Totaling);
      END;
      TheAnalysisViewEntry.SETPERMISSIONFILTER;
    END;

    LOCAL PROCEDURE DrillDown@1140014(SetColFilter@1140000 : Boolean);
    BEGIN
      IF ShowActual = ShowActual::Amounts THEN BEGIN
        SetCommonFilters(AnalysisViewEntry);
        SetDimFilters(AnalysisViewEntry,0);
        IF SetColFilter THEN
          SetDimFilters(AnalysisViewEntry,1);
        FORM.RUN(FORM::"Liq. Analysis View Entries",AnalysisViewEntry);
      END;
    END;

    LOCAL PROCEDURE ValidateAnalysisViewCode@1140015();
    VAR
      AnalysisViewFilter@1140000 : Record 5055270;
    BEGIN
      AnalysisView.Code := AnalysisViewCode;
      IF NOT AnalysisView.FIND('=<>') THEN
        ERROR(Text1140002);
      AnalysisViewCode := AnalysisView.Code;
      LiqAccFilter := AnalysisView."Liquidity Account Filter";
      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';
      Dim4Filter := '';
      SETPERMISSIONFILTER;
      Dim1Filter := GETFILTER("Dimension 1 Value Filter");
      Dim2Filter := GETFILTER("Dimension 2 Value Filter");
      Dim3Filter := GETFILTER("Dimension 3 Value Filter");
      Dim4Filter := GETFILTER("Dimension 4 Value Filter");

      CurrForm.Dim1Filter.ENABLED :=
        (AnalysisView."Dimension 1 Code" <> '') AND
        (GETFILTER("Dimension 1 Value Filter") = '');
      CurrForm.Dim2Filter.ENABLED :=
        (AnalysisView."Dimension 2 Code" <> '') AND
        (GETFILTER("Dimension 2 Value Filter") = '');
      CurrForm.Dim3Filter.ENABLED :=
        (AnalysisView."Dimension 3 Code" <> '') AND
        (GETFILTER("Dimension 3 Value Filter") = '');
      CurrForm.Dim4Filter.ENABLED :=
        (AnalysisView."Dimension 4 Code" <> '') AND
        (GETFILTER("Dimension 4 Value Filter") = '');

      IF CurrForm.Dim1Filter.ENABLED THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 1 Code") THEN
          Dim1Filter := AnalysisViewFilter."Dimension Value Filter";

      IF CurrForm.Dim2Filter.ENABLED THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 2 Code") THEN
          Dim2Filter := AnalysisViewFilter."Dimension Value Filter";

      IF CurrForm.Dim3Filter.ENABLED THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 3 Code") THEN
          Dim3Filter := AnalysisViewFilter."Dimension Value Filter";

      IF CurrForm.Dim4Filter.ENABLED THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 4 Code") THEN
          Dim4Filter := AnalysisViewFilter."Dimension Value Filter";
    END;

    LOCAL PROCEDURE ValidateLineDimCode@1140016();
    VAR
      Liquidity@1140000 : Record 5055250;
    BEGIN
      IF (UPPERCASE(LineDimCode) <> UPPERCASE(LiqAcc.TABLECAPTION)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(Liquidity.TABLECAPTION)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text1140000)) AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 1 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 2 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 3 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 4 Code") AND
         (LineDimCode <> '') THEN BEGIN
        MESSAGE(Text1140003,LineDimCode);
        LineDimCode := '';
      END;
      LineDimOption := DimCodeToOption(LineDimCode);
      InternalDateFilter := AnalysisViewEntry.GETFILTER("Liquidity Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@1140017();
    VAR
      Liquidity@1140000 : Record 5055250;
    BEGIN
      IF (UPPERCASE(ColumnDimCode) <> UPPERCASE(LiqAcc.TABLECAPTION)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Liquidity.TABLECAPTION)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text1140000)) AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 1 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 2 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 3 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 4 Code") AND
         (ColumnDimCode <> '') THEN BEGIN
        MESSAGE(Text1140004,ColumnDimCode);
        ColumnDimCode := '';
      END;
      ColumnDimOption := DimCodeToOption(ColumnDimCode);
      InternalDateFilter := AnalysisViewEntry.GETFILTER("Liquidity Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    LOCAL PROCEDURE CalcAmount@1140018(SetColFilter@1140000 : Boolean) : Decimal;
    VAR
      Amount@1140001 : Decimal;
      ColumnCode@1140002 : Code[20];
    BEGIN
      IF SetColFilter THEN
        ColumnCode := MatrixRecord.Code
      ELSE
        ColumnCode := '';
      IF AVBreakdownBuffer.GET(Code,ColumnCode) THEN
        EXIT(AVBreakdownBuffer.Amount);

      CASE ShowActual OF
        ShowActual::Amounts:
          Amount := CalcActualAmount(SetColFilter);
      END;

      IF ShowOppositeSign THEN
        Amount := -Amount;

      AVBreakdownBuffer."Line Code" := Code;
      AVBreakdownBuffer."Column Code" := ColumnCode;
      AVBreakdownBuffer.Amount := Amount;
      AVBreakdownBuffer.INSERT;

      EXIT(Amount);
    END;

    LOCAL PROCEDURE CalcActualAmount@1140019(SetColFilter@1140000 : Boolean) : Decimal;
    VAR
      Amount@1140001 : Decimal;
    BEGIN
      AnalysisViewEntry.RESET;
      SetCommonFilters(AnalysisViewEntry);
      SetDimFilters(AnalysisViewEntry,0);
      IF SetColFilter THEN
        SetDimFilters(AnalysisViewEntry,1);

      AnalysisViewEntry.CALCSUMS(Amount);
      Amount := AnalysisViewEntry.Amount;

      EXIT(Amount);
    END;

    LOCAL PROCEDURE GetCaptionClass@1140020(AnalysisViewDimType@1140000 : Integer) : Text[250];
    BEGIN
      IF AnalysisView.Code <> AnalysisViewCode THEN
        AnalysisView.GET(AnalysisViewCode);
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 1 Code")
            ELSE
              EXIT(Text1140005);
          END;
        2:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 2 Code")
            ELSE
              EXIT(Text1140006);
          END;
        3:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 3 Code")
            ELSE
              EXIT(Text1140007);
          END;
        4:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 4 Code")
            ELSE
              EXIT(Text1140008);
          END;
      END;
    END;

    LOCAL PROCEDURE ShownCurrency@1140021() : Code[10];
    BEGIN
      EXIT('');
    END;

    PROCEDURE CreateCaptionSet@29(RecRef@1000 : Record 367;Step@1008 : 'First,Previous,Same,Next';MaximumNoOfCaptions@1001 : Integer;VAR PrimaryKeyFirstCaptionInCurrSe@1006 : Text[1024];VAR CaptionSet@1005 : ARRAY [32] OF Text[1024];VAR CaptionRange@1004 : Text[1024]) : Integer;
    VAR
      CurrentCaptionOrdinal@1003 : Integer;
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';

      CurrentCaptionOrdinal := 0;

      CASE Step OF
        Step::First:
          BEGIN
            IF (ColumnDimOption = ColumnDimOption::Period) AND (DateFilter = '') THEN
              FindRec(ColumnDimOption,RecRef,'=><')
          ELSE
            IF NOT FindRec(ColumnDimOption,RecRef,'-') THEN
              EXIT;
          END;
        Step::Previous:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            IF ColumnDimOption = ColumnDimOption::Period THEN
              EVALUATE(RecRef."Period Start",RecRef.Code);
            IF NOT FindRec(ColumnDimOption,RecRef,'=') THEN
              EXIT;
            NextRec(ColumnDimOption,RecRef,-MaximumNoOfCaptions);
          END;
        Step::Same:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            IF ColumnDimOption = ColumnDimOption::Period THEN
              EVALUATE(RecRef."Period Start",RecRef.Code);
            IF NOT FindRec(ColumnDimOption,RecRef,'=') THEN
              EXIT;
          END;
        Step::Next:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            IF ColumnDimOption = ColumnDimOption::Period THEN
              EVALUATE(RecRef."Period Start",RecRef.Code);
            IF NOT FindRec(ColumnDimOption,RecRef,'=') THEN
              EXIT;
            IF NOT (NextRec(ColumnDimOption,RecRef,MaximumNoOfCaptions) = MaximumNoOfCaptions) THEN BEGIN
              RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
              FindRec(ColumnDimOption,RecRef,'=');
            END;
          END;
      END;

      PrimaryKeyFirstCaptionInCurrSe := RecRef.GETPOSITION;

      REPEAT
        CurrentCaptionOrdinal := CurrentCaptionOrdinal + 1;
        IF ShowColumnName THEN
          CaptionSet[CurrentCaptionOrdinal] := RecRef.Name
        ELSE
          CaptionSet[CurrentCaptionOrdinal] := RecRef.Code;
      UNTIL (CurrentCaptionOrdinal = MaximumNoOfCaptions) OR (NextRec(ColumnDimOption,RecRef,1) <> 1);

      IF CurrentCaptionOrdinal = 1 THEN
        CaptionRange := CaptionSet[1]
      ELSE
        CaptionRange := CaptionSet[1] + '..' + CaptionSet[CurrentCaptionOrdinal];
    END;

    PROCEDURE SetAnalysisViewCode@14(NextAnalysisViewCode@1000 : Code[10]);
    BEGIN
      NewAnalysisViewCode := NextAnalysisViewCode;
    END;

    BEGIN
    END.
  }
}
