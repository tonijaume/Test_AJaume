OBJECT Form 99000883 Sales Order Planning
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Width=16500;
    Height=6710;
    Editable=No;
    CaptionML=[ENU=Sales Order Planning;
               ESP=Planificaci¢n pedido venta];
    SourceTable=Table99000800;
    DataCaptionExpr=Caption;
    SourceTableTemporary=Yes;
    DataCaptionFields=Sales Order No.;
    OnOpenForm=BEGIN
                 BuildForm;
               END;

  }
  CONTROLS
  {
    { 2   ;TableBox     ;220  ;220  ;16060;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 5   ;TextBox      ;1650 ;3520 ;1650 ;440  ;ParentControl=2;
                                                 InColumn=Yes;
                                                 SourceExpr="Item No." }
    { 6   ;Label        ;0    ;0    ;0    ;0    ;ParentControl=5;
                                                 InColumnHeading=Yes }
    { 21  ;TextBox      ;582  ;330  ;1650 ;440  ;Visible=No;
                                                 ParentControl=2;
                                                 InColumn=Yes;
                                                 SourceExpr="Variant Code" }
    { 22  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=21;
                                                 InColumnHeading=Yes }
    { 1   ;TextBox      ;2276 ;220  ;550  ;440  ;ParentControl=2;
                                                 InColumn=Yes;
                                                 SourceExpr="Planning Status" }
    { 17  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=1;
                                                 InColumnHeading=Yes }
    { 7   ;TextBox      ;3300 ;3520 ;4400 ;440  ;HorzGlue=Both;
                                                 ParentControl=2;
                                                 InColumn=Yes;
                                                 SourceExpr=Description }
    { 8   ;Label        ;0    ;0    ;0    ;0    ;ParentControl=7;
                                                 InColumnHeading=Yes }
    { 9   ;TextBox      ;7700 ;3520 ;1650 ;440  ;ParentControl=2;
                                                 InColumn=Yes;
                                                 SourceExpr="Shipment Date" }
    { 10  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=9;
                                                 InColumnHeading=Yes }
    { 26  ;TextBox      ;8229 ;330  ;1650 ;440  ;Visible=No;
                                                 ParentControl=2;
                                                 InColumn=Yes;
                                                 SourceExpr="Planned Quantity";
                                                 OnLookup=VAR
                                                            SalesLine@1002 : Record 37;
                                                          BEGIN
                                                            SalesLine.GET(
                                                              SalesLine."Document Type"::Order,
                                                              "Sales Order No.","Sales Order Line No.");
                                                            SalesLine.ShowReservationEntries(TRUE);
                                                          END;
                                                           }
    { 33  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=26;
                                                 InColumnHeading=Yes }
    { 11  ;TextBox      ;9350 ;3520 ;1650 ;440  ;ParentControl=2;
                                                 InColumn=Yes;
                                                 DecimalPlaces=0:5;
                                                 SourceExpr=Available }
    { 12  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=11;
                                                 InColumnHeading=Yes }
    { 13  ;TextBox      ;11550;3520 ;1650 ;440  ;ParentControl=2;
                                                 InColumn=Yes;
                                                 SourceExpr="Next Planning Date" }
    { 14  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=13;
                                                 InColumnHeading=Yes }
    { 15  ;TextBox      ;13200;3520 ;1650 ;440  ;ParentControl=2;
                                                 InColumn=Yes;
                                                 SourceExpr="Expected Delivery Date" }
    { 16  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=15;
                                                 InColumnHeading=Yes }
    { 28  ;CheckBox     ;13150;550  ;1650 ;440  ;Visible=No;
                                                 ParentControl=2;
                                                 InColumn=Yes;
                                                 ShowCaption=No;
                                                 SourceExpr="Needs Replanning" }
    { 29  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=28;
                                                 InColumnHeading=Yes }
    { 18  ;CommandButton;14080;5940 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 19  ;MenuButton   ;11660;5940 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=[ENU=F&unctions;
                                                            ESP=Acci&ones];
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=24;
                                                     Ellipsis=Yes;
                                                     CaptionML=[ENU=Update &Shipment Dates;
                                                                ESP=Actlzr. &fechas env¡o];
                                                     OnPush=VAR
                                                              SalesLine@1001 : Record 37;
                                                              Choice@1002 : Integer;
                                                              LastShipmentDate@1003 : Date;
                                                            BEGIN
                                                              Choice := STRMENU(Text000);

                                                              IF Choice = 0 THEN
                                                                EXIT;

                                                              LastShipmentDate := WORKDATE;

                                                              SalesHeader.LOCKTABLE;
                                                              SalesHeader.GET(SalesHeader."Document Type"::Order,SalesHeader."No.");

                                                              IF Choice = 1 THEN BEGIN
                                                                IF FIND('-') THEN
                                                                  REPEAT
                                                                    IF "Expected Delivery Date" > LastShipmentDate THEN
                                                                      LastShipmentDate := "Expected Delivery Date";
                                                                  UNTIL NEXT = 0;
                                                                SalesHeader.VALIDATE("Shipment Date",LastShipmentDate);
                                                                SalesHeader.MODIFY;
                                                              END
                                                              ELSE BEGIN
                                                                SalesLine.LOCKTABLE;
                                                                IF FIND('-') THEN
                                                                  REPEAT
                                                                    SalesLine.GET(
                                                                      SalesLine."Document Type"::Order,
                                                                      "Sales Order No.",
                                                                      "Sales Order Line No.");
                                                                    SalesLine."Shipment Date" := "Expected Delivery Date";
                                                                    SalesLine.MODIFY;
                                                                  UNTIL NEXT = 0;
                                                              END;
                                                              BuildForm;
                                                            END;
                                                             }
                                                   { ID=25;
                                                     CaptionML=[ENU=&Create Prod. Order;
                                                                ESP=&Crear ord. prod.];
                                                     OnPush=BEGIN
                                                              CreateProdOrder;
                                                            END;
                                                             }
                                                   { ID=32;
                                                     MenuItemType=Separator }
                                                   { ID=20;
                                                     CaptionML=[ENU=Order &Tracking;
                                                                ESP=&Seguimiento pedido];
                                                     OnPush=VAR
                                                              SalesOrderLine@1001 : Record 37;
                                                              TrackingForm@1002 : Form 99000822;
                                                            BEGIN
                                                              SalesOrderLine.GET(
                                                                SalesOrderLine."Document Type"::Order,
                                                                "Sales Order No.",
                                                                "Sales Order Line No.");

                                                              TrackingForm.SetSalesLine(SalesOrderLine);
                                                              TrackingForm.RUNMODAL;
                                                              BuildForm;
                                                            END;
                                                             }
                                                 }
                                                  }
    { 4   ;MenuButton   ;9240 ;5940 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=[ENU=&Item;
                                                            ESP=&Producto];
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=23;
                                                     PushAction=RunObject;
                                                     ShortCutKey=May£s+F5;
                                                     CaptionML=[ENU=Card;
                                                                ESP=Ficha];
                                                     RunObject=Form 30;
                                                     RunFormLinkType=OnUpdate;
                                                     RunFormLink=No.=FIELD(Item No.) }
                                                   { ID=27;
                                                     PushAction=RunObject;
                                                     ShortCutKey=Ctrl+F5;
                                                     CaptionML=[ENU=Ledger E&ntries;
                                                                ESP=&Movimientos];
                                                     RunObject=Form 38;
                                                     RunFormLinkType=OnUpdate;
                                                     RunFormView=SORTING(Item No.,Open,Variant Code);
                                                     RunFormLink=Item No.=FIELD(Item No.),
                                                                 Variant Code=FIELD(Variant Code) }
                                                   { ID=31;
                                                     PushAction=RunObject;
                                                     CaptionML=[ENU=Availability;
                                                                ESP=Disponibilidad];
                                                     RunObject=Form 157;
                                                     RunFormLinkType=OnUpdate;
                                                     RunFormLink=No.=FIELD(Item No.) }
                                                   { ID=30;
                                                     MenuItemType=Separator }
                                                   { ID=3;
                                                     ShortCutKey=F9;
                                                     CaptionML=[ENU=Statistics;
                                                                ESP=Estad¡sticas];
                                                     OnPush=VAR
                                                              Item@1001 : Record 27;
                                                              ItemStatistics@1002 : Form 5827;
                                                            BEGIN
                                                              IF Item.GET("Item No.") THEN;
                                                              ItemStatistics.SetItem(Item);
                                                              ItemStatistics.RUNMODAL;
                                                            END;
                                                             }
                                                 }
                                                  }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=All Lines to last Shipment Date,Each line own Shipment Date;ESP=Todas l¡ns. hasta £lt. Fecha env¡o,Cada l¡n. Fecha env¡o propia';
      Text001@1001 : TextConst 'ENU=There is nothing to plan.;ESP=No hay nada que planificar.';
      SalesHeader@1002 : Record 36;
      ReservEntry@1004 : Record 337;
      ReservEngineMgt@1005 : Codeunit 99000831;
      ReserveSalesline@1006 : Codeunit 99000832;
      NewStatus@1007 : 'Simulated,Planned,Firm Planned,Released';
      NewOrderType@1008 : 'ItemOrder,ProjectOrder';

    PROCEDURE SetSalesOrder@2(SalesOrderNo@1000 : Code[20]);
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);
    END;

    PROCEDURE BuildForm@3();
    BEGIN
      RESET;
      DELETEALL;
      MakeLines;
      SETRANGE("Sales Order No.",SalesHeader."No.");
    END;

    PROCEDURE MakeLines@1();
    VAR
      SalesLine@1000 : Record 37;
      ProdOrderLine@1001 : Record 5406;
      PurchLine@1002 : Record 39;
      ReqLine@1003 : Record 246;
      ReservEntry2@1004 : Record 337;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);

      IF SalesLine.FIND('-') THEN
        REPEAT

          INIT;
          "Sales Order No." := SalesLine."Document No.";
          "Sales Order Line No." := SalesLine."Line No.";
          "Item No." := SalesLine."No.";

          "Variant Code" := SalesLine."Variant Code";
          Description := SalesLine.Description;
          "Shipment Date" := SalesLine."Shipment Date";
          "Planning Status" := "Planning Status"::None;
          SalesLine.CALCFIELDS("Reserved Qty. (Base)");
          "Planned Quantity" := SalesLine."Reserved Qty. (Base)";
          ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
          ReserveSalesline.FilterReservFor(ReservEntry,SalesLine);
          ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
          IF ReservEntry.FIND('-') THEN
            REPEAT
              IF ReservEntry2.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive) THEN
                CASE ReservEntry2."Source Type" OF
                  DATABASE::"Item Ledger Entry":
                    BEGIN
                      "Planning Status" := "Planning Status"::Inventory;
                    END;
                  DATABASE::"Requisition Line":
                    BEGIN
                      ReqLine.GET(
                        ReservEntry2."Source ID",
                        ReservEntry2."Source Batch Name",
                        ReservEntry2."Source Ref. No.");
                      "Planning Status" := "Planning Status"::Planned;
                      "Expected Delivery Date" := ReqLine."Due Date";
                    END;
                  DATABASE::"Purchase Line":
                    BEGIN
                      PurchLine.GET(
                        ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",
                        ReservEntry2."Source Ref. No.");
                      "Planning Status" := "Planning Status"::"Firm Planned";
                      "Expected Delivery Date" := PurchLine."Expected Receipt Date";
                    END;
                  DATABASE::"Prod. Order Line":
                    BEGIN
                      ProdOrderLine.GET(
                        ReservEntry2."Source Subtype",
                        ReservEntry2."Source ID",
                        ReservEntry2."Source Prod. Order Line");
                      IF ProdOrderLine."Due Date" > "Expected Delivery Date" THEN
                        "Expected Delivery Date" := ProdOrderLine."Ending Date";
                      IF ((ProdOrderLine.Status + 1) < "Planning Status") OR
                         ("Planning Status" = "Planning Status"::None)
                      THEN
                        "Planning Status" := ProdOrderLine.Status + 1;
                    END;
                END;
            UNTIL ReservEntry.NEXT = 0;
          "Needs Replanning" :=
            ("Planned Quantity" <> SalesLine."Outstanding Qty. (Base)") OR
            ("Expected Delivery Date" > "Shipment Date");
          CalculateDisposalPlan(
            SalesLine."Variant Code",
            SalesLine."Location Code");
          INSERT;
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE CalculateDisposalPlan@4(VariantCode@1000 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      Item@1003 : Record 27;
    BEGIN
      Item.GET("Item No.");
      Item.SETRANGE("Variant Filter",VariantCode);
      Item.SETRANGE("Location Filter",LocationCode);
      Item.CALCFIELDS(
        Inventory,
        "Qty. on Purch. Order",
        "Qty. on Sales Order",
        "Scheduled Receipt (Qty.)",
        "Scheduled Need (Qty.)");

      Available :=
        Item.Inventory -
        Item."Qty. on Sales Order" +
        Item."Qty. on Purch. Order" -
        Item."Scheduled Need (Qty.)" +
        Item."Scheduled Receipt (Qty.)";

      IF NOT "Needs Replanning" THEN
        EXIT;

      "Next Planning Date" :=
        WORKDATE;

      CalculatePlanAndDelivDates(
        Item,
        "Next Planning Date",
        "Expected Delivery Date");
    END;

    PROCEDURE CalculatePlanAndDelivDates@6(Item@1000 : Record 27;VAR NextPlanningDate@1001 : Date;VAR ExpectedDeliveryDate@1002 : Date);
    BEGIN
      NextPlanningDate :=
        CALCDATE(
          Item."Reorder Cycle",
          NextPlanningDate);

      IF (Available > 0) OR ("Planning Status" <> "Planning Status"::None) THEN
        ExpectedDeliveryDate :=
          CALCDATE(Item."Safety Lead Time",WORKDATE)
      ELSE
        ExpectedDeliveryDate :=
          CALCDATE(
            Item."Safety Lead Time",
            CALCDATE(
              Item."Lead Time Calculation",
              NextPlanningDate))
    END;

    PROCEDURE CreateOrders@7() OrdersCreated@1000 : Boolean;
    VAR
      xSalesPlanLine@1005 : Record 99000800;
      Item@1001 : Record 27;
      SalesLine@1002 : Record 37;
      ProdOrderFromSale@1003 : Codeunit 99000792;
      EndLoop@1004 : Boolean;
    BEGIN
      xSalesPlanLine := Rec;

      IF NOT FINDSET THEN
        EXIT;

      REPEAT
        SalesLine.GET(
          SalesLine."Document Type"::Order,
          "Sales Order No.",
          "Sales Order Line No.");
        SalesLine.TESTFIELD("Shipment Date");
        SalesLine.CALCFIELDS("Reserved Qty. (Base)");
        IF SalesLine."Outstanding Qty. (Base)" > SalesLine."Reserved Qty. (Base)" THEN BEGIN
          Item.GET(SalesLine."No.");

          IF Item."Replenishment System" = Item."Replenishment System"::"Prod. Order" THEN BEGIN
            OrdersCreated := TRUE;
            ProdOrderFromSale.CreateProdOrder(
              SalesLine,NewStatus,NewOrderType);
            IF NewOrderType = NewOrderType::ProjectOrder THEN
              EndLoop := TRUE;
          END;
        END;
      UNTIL (NEXT = 0) OR EndLoop;

      Rec := xSalesPlanLine;
    END;

    PROCEDURE Caption@5() : Text[250];
    BEGIN
      EXIT(STRSUBSTNO('%1 %2',SalesHeader."No.",SalesHeader."Bill-to Name"));
    END;

    PROCEDURE CreateProdOrder@8();
    VAR
      CreateOrderForm@1000 : Form 99000884;
    BEGIN
      IF CreateOrderForm.RUNMODAL <> ACTION::Yes THEN
        EXIT;

      CreateOrderForm.ReturnPostingInfo(NewStatus,NewOrderType);

      IF NOT CreateOrders THEN
        MESSAGE(Text001);

      SETRANGE("Planning Status");

      BuildForm;

      CurrForm.UPDATE(FALSE);
    END;

    BEGIN
    END.
  }
}
