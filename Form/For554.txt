OBJECT Form 554 Analysis by Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES6.00;
  }
  PROPERTIES
  {
    Width=16500;
    Height=10010;
    CaptionML=[ENU=Analysis by Dimensions;
               ESP=An lisis por dimensiones];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=AnalysisViewCode;
    OnOpenForm=VAR
                 GLAcc@1001 : Record 15;
                 Field@1000 : Record 2000000041;
               BEGIN
                 ValidateAnalysisViewCode;

                 GLSetup.GET;
                 IF GLSetup."Additional Reporting Currency" = '' THEN
                   ShowInAddCurr := FALSE
                 ELSE
                   Currency.GET(GLSetup."Additional Reporting Currency");

                 IF (LineDimCode = '') AND (ColumnDimCode = '') THEN BEGIN
                   LineDimCode := GLAcc.TABLECAPTION;
                   ColumnDimCode := Text000;
                 END;
                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);
                 Field.GET(DATABASE::"G/L Account",42);
                 BusUnitFilterCaption := Field."Field Caption";

                 CalculateClosingDateFilter;
                 FindPeriod('');
                 CurrForm.UPDATECONTROLS;
               END;

    OnFindRecord=BEGIN
                   EXIT(FindRec(LineDimOption,Rec,Which));
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(LineDimOption,Rec,Steps));
                 END;

    OnAfterGetRecord=BEGIN
                       IF CurrForm.TotalAmount.VISIBLE THEN
                         Amount := CalcAmount(FALSE);
                     END;

  }
  CONTROLS
  {
    { 1   ;TabControl   ;220  ;220  ;16060;3080 ;HorzGlue=Both;
                                                 VertGlue=Top;
                                                 PageNamesML=[ENU=General,Filters,Options;
                                                              ESP=General,Filtros,Opciones] }
    { 5   ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=[ENU=Analysis View Code;
                                                            ESP=C¢d. vista an lisis];
                                                 SourceExpr=AnalysisViewCode;
                                                 TableRelation="Analysis View";
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              ValidateAnalysisViewCode;
                                                              ValidateColumnDimCode;
                                                              ValidateLineDimCode;
                                                            END;

                                                 OnLookup=VAR
                                                            AnalysisViewList@1002 : Form 556;
                                                          BEGIN
                                                            AnalysisViewList.LOOKUPMODE := TRUE;
                                                            AnalysisViewList.SETRECORD(AnalysisView);
                                                            IF AnalysisViewList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                              AnalysisViewList.GETRECORD(AnalysisView);
                                                              AnalysisViewCode := AnalysisView.Code;
                                                              Text := AnalysisView.Code;
                                                              ValidateAnalysisViewCode;
                                                              ValidateColumnDimCode;
                                                              ValidateLineDimCode;
                                                              CurrForm.UPDATE;
                                                              EXIT(TRUE);
                                                            END;
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATECONTROLS;
                                                                 END;
                                                                  }
    { 7   ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=5 }
    { 6   ;TextBox      ;3850 ;1650 ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=[ENU=Show as Lines;
                                                            ESP=Muestra como l¡neas];
                                                 SourceExpr=LineDimCode;
                                                 OnValidate=BEGIN
                                                              IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                                                                ColumnDimCode := '';
                                                                ValidateColumnDimCode;
                                                              END;
                                                              AVBreakdownBuffer.DELETEALL;
                                                              ValidateLineDimCode;
                                                              IF LineDimOption = LineDimOption::Period THEN
                                                                SETCURRENTKEY("Period Start")
                                                              ELSE
                                                                SETCURRENTKEY(Code);
                                                            END;

                                                 OnLookup=VAR
                                                            NewCode@1002 : Text[30];
                                                          BEGIN
                                                            NewCode := GetDimSelection(LineDimCode);
                                                            IF NewCode = LineDimCode THEN
                                                              EXIT(FALSE)
                                                            ELSE BEGIN
                                                              Text := NewCode;
                                                              LineDimCode := NewCode;
                                                              ValidateLineDimCode;
                                                              CurrForm.UPDATE;
                                                              EXIT(TRUE);
                                                            END
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 8   ;Label        ;440  ;1650 ;3300 ;440  ;ParentControl=6 }
    { 9   ;TextBox      ;3850 ;2200 ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=[ENU=Show as Columns;
                                                            ESP=Muestra como columnas];
                                                 SourceExpr=ColumnDimCode;
                                                 OnValidate=BEGIN
                                                              IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                                                                LineDimCode := '';
                                                                ValidateLineDimCode;
                                                              END;
                                                              AVBreakdownBuffer.DELETEALL;
                                                              ValidateColumnDimCode;
                                                            END;

                                                 OnLookup=VAR
                                                            NewCode@1002 : Text[30];
                                                          BEGIN
                                                            NewCode := GetDimSelection(ColumnDimCode);
                                                            IF NewCode = ColumnDimCode THEN
                                                              EXIT(FALSE)
                                                            ELSE BEGIN
                                                              Text := NewCode;
                                                              ColumnDimCode := NewCode;
                                                              ValidateColumnDimCode;
                                                              CurrForm.UPDATE;
                                                              EXIT(TRUE);
                                                            END
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 10  ;Label        ;440  ;2200 ;3300 ;440  ;ParentControl=9 }
    { 36  ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Date Filter;
                                                            ESP=Filtro fecha];
                                                 SourceExpr=DateFilter;
                                                 OnValidate=VAR
                                                              GLAcc@1001 : Record 15;
                                                              ApplicationManagement@1002 : Codeunit 1;
                                                            BEGIN
                                                              IF ApplicationManagement.MakeDateFilter(DateFilter) = 0 THEN;
                                                              GLAcc.SETFILTER("Date Filter",DateFilter);
                                                              DateFilter := GLAcc.GETFILTER("Date Filter");
                                                              InternalDateFilter := DateFilter;
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 37  ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=36 }
    { 30  ;TextBox      ;12980;1540 ;2750 ;440  ;Name=Dim2Filter;
                                                 ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Dimension 2 Filter;
                                                            ESP=Filtro dimensi¢n 2];
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim2Filter;
                                                 CaptionClass=GetCaptionClass(2);
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(AnalysisView."Dimension 2 Code",Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 34  ;TextBox      ;12980;990  ;2750 ;440  ;Name=Dim1Filter;
                                                 ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Dimension 1 Filter;
                                                            ESP=Filtro dimensi¢n 1];
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim1Filter;
                                                 CaptionClass=GetCaptionClass(1);
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(AnalysisView."Dimension 1 Code",Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 35  ;TextBox      ;12980;2640 ;2750 ;440  ;Name=Dim4Filter;
                                                 ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Dimension 4 Filter;
                                                            ESP=Filtro dimensi¢n 4];
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim4Filter;
                                                 CaptionClass=GetCaptionClass(4);
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(AnalysisView."Dimension 4 Code",Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 46  ;TextBox      ;12980;2090 ;2750 ;440  ;Name=Dim3Filter;
                                                 ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Dimension 3 Filter;
                                                            ESP=Filtro dimensi¢n 3];
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim3Filter;
                                                 CaptionClass=GetCaptionClass(3);
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(AnalysisView."Dimension 3 Code",Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 53  ;TextBox      ;3850 ;2640 ;2750 ;440  ;ValidateTableRelation=No;
                                                 ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Budget Filter;
                                                            ESP=Filtro presupuesto];
                                                 ClearOnLookup=No;
                                                 SourceExpr=BudgetFilter;
                                                 TableRelation="G/L Budget Name".Name;
                                                 LookupFormID=G/L Budget Names;
                                                 OnAfterValidate=BEGIN
                                                                   IF ShowActualBudg <> ShowActualBudg::"Actual Amounts" THEN
                                                                     AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 17  ;Label        ;440  ;2640 ;3300 ;440  ;ParentControl=53 }
    { 38  ;TextBox      ;3850 ;1540 ;2750 ;440  ;ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=G/L Account Filter;
                                                            ESP=Filtro cuenta];
                                                 ClearOnLookup=No;
                                                 SourceExpr=GLAccFilter;
                                                 OnLookup=VAR
                                                            GLAccList@1002 : Form 18;
                                                          BEGIN
                                                            GLAccList.LOOKUPMODE(TRUE);
                                                            IF NOT (GLAccList.RUNMODAL = ACTION::LookupOK) THEN
                                                              EXIT(FALSE)
                                                            ELSE
                                                              Text := GLAccList.GetSelectionFilter;
                                                            EXIT(TRUE);
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 39  ;Label        ;440  ;1540 ;3300 ;440  ;ParentControl=38 }
    { 31  ;Label        ;9570 ;990  ;3300 ;440  ;ParentControl=34;
                                                 InPage=1 }
    { 33  ;Label        ;9570 ;1540 ;3300 ;440  ;ParentControl=30;
                                                 InPage=1 }
    { 44  ;Label        ;9570 ;2090 ;3300 ;440  ;ParentControl=46;
                                                 InPage=1 }
    { 45  ;Label        ;9570 ;2640 ;3300 ;440  ;ParentControl=35;
                                                 InPage=1 }
    { 57  ;TextBox      ;3850 ;2090 ;2750 ;440  ;ParentControl=1;
                                                 InPage=1;
                                                 ClearOnLookup=No;
                                                 SourceExpr=BusUnitFilter;
                                                 CaptionClass='3,' + BusUnitFilterCaption;
                                                 OnLookup=VAR
                                                            BusUnitList@1002 : Form 240;
                                                          BEGIN
                                                            BusUnitList.LOOKUPMODE(TRUE);
                                                            IF NOT (BusUnitList.RUNMODAL = ACTION::LookupOK) THEN
                                                              EXIT(FALSE);
                                                            Text := BusUnitList.GetSelectionFilter;
                                                            EXIT(TRUE);
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 60  ;Label        ;440  ;2090 ;3300 ;440  ;ParentControl=57 }
    { 1100000;TextBox   ;3850 ;2090 ;2750 ;440  ;ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Historic G/L Account Filter;
                                                            ESP=Filtro cuenta de hist¢rico];
                                                 ClearOnLookup=No;
                                                 SourceExpr=HistoricGLAccFilter;
                                                 OnLookup=VAR
                                                            HistoricGLAccList@1100000 : Form 10731;
                                                          BEGIN
                                                            HistoricGLAccList.LOOKUPMODE(TRUE);
                                                            IF NOT (HistoricGLAccList.RUNMODAL = ACTION::LookupOK) THEN
                                                              EXIT(FALSE)
                                                            ELSE
                                                              Text := HistoricGLAccList.GetSelectionFilter;
                                                            EXIT(TRUE);
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 1100001;Label     ;440  ;2090 ;3300 ;440  ;ParentControl=1100000 }
    { 4   ;CheckBox     ;12980;2090 ;440  ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 ShowCaption=No;
                                                 CaptionML=[ENU=Show Column Name;
                                                            ESP=Muestra nombre columna];
                                                 SourceExpr=ShowColumnName }
    { 3   ;Label        ;9570 ;2090 ;3300 ;440  ;ParentControl=4 }
    { 18  ;TextBox      ;3850 ;2640 ;2750 ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 CaptionML=[ENU=Rounding Factor;
                                                            ESP=Factor redondeo];
                                                 OptionCaptionML=[ENU=None,1,1000,1000000;
                                                                  ESP=No,1,1000,1000000];
                                                 SourceExpr=RoundingFactor }
    { 28  ;Label        ;440  ;2640 ;3300 ;440  ;ParentControl=18 }
    { 29  ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 CaptionML=[ENU=Show;
                                                            ESP=Muestra];
                                                 OptionCaptionML=[ENU=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%;
                                                                  ESP=Importes reales,Importes pptados.,Desviaci¢n,% Desviaci¢n,% Öndice];
                                                 SourceExpr=ShowActualBudg;
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              Amount := CalcAmount(FALSE);
                                                            END;
                                                             }
    { 32  ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=29 }
    { 47  ;TextBox      ;3850 ;1540 ;2750 ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 CaptionML=[ENU=Show Amount Field;
                                                            ESP=Muestra Importe];
                                                 OptionCaptionML=[ENU=Amount,Debit Amount,Credit Amount;
                                                                  ESP=Importe,Importe deudor,Importe acreedor];
                                                 SourceExpr=AmountField;
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              Amount := CalcAmount(FALSE);
                                                            END;
                                                             }
    { 48  ;Label        ;440  ;1540 ;3300 ;440  ;ParentControl=47 }
    { 49  ;CheckBox     ;12980;1430 ;440  ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 ShowCaption=No;
                                                 CaptionML=[ENU=Show Amounts in Add. Reporting Currency;
                                                            ESP=Muestra importes en div.-adic.];
                                                 SourceExpr=ShowInAddCurr;
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              Amount := CalcAmount(FALSE);
                                                            END;
                                                             }
    { 50  ;Label        ;9570 ;990  ;3300 ;880  ;ParentControl=49;
                                                 MultiLine=Yes }
    { 52  ;TextBox      ;3850 ;2090 ;2750 ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 CaptionML=[ENU=Closing Entries;
                                                            ESP=Movs. regularizaci¢n];
                                                 OptionCaptionML=[ENU=Include,Exclude;
                                                                  ESP=Incluir,Excluir];
                                                 SourceExpr=ClosingEntryFilter;
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              CalculateClosingDateFilter;
                                                              FindPeriod('=');
                                                              Amount := CalcAmount(FALSE);
                                                            END;
                                                             }
    { 51  ;Label        ;440  ;2090 ;3300 ;440  ;ParentControl=52 }
    { 54  ;CheckBox     ;12980;2640 ;440  ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 ShowCaption=No;
                                                 CaptionML=[ENU=Show Opposite Sign;
                                                            ESP=Muestra signo opuesto];
                                                 SourceExpr=ShowOppositeSign;
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              Amount := CalcAmount(FALSE);
                                                            END;
                                                             }
    { 55  ;Label        ;9570 ;2640 ;3300 ;440  ;ParentControl=54;
                                                 MultiLine=Yes }
    { 2   ;CommandButton;14080;9240 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 19  ;MatrixBox    ;220  ;3520 ;16060;5500 ;Name=Matrix;
                                                 HorzGlue=Both;
                                                 VertGlue=Both;
                                                 Editable=No;
                                                 MatrixSourceTable=Table367;
                                                 OnFindRecord=BEGIN
                                                                EXIT(FindRec(ColumnDimOption,CurrForm.Matrix.MatrixRec,Which));
                                                              END;

                                                 OnNextRecord=BEGIN
                                                                EXIT(NextRec(ColumnDimOption,CurrForm.Matrix.MatrixRec,Steps));
                                                              END;

                                                 OnAfterGetRecord=BEGIN
                                                                    IF ShowColumnName THEN
                                                                      MatrixHeader := CurrForm.Matrix.MatrixRec.Name
                                                                    ELSE
                                                                      MatrixHeader := CurrForm.Matrix.MatrixRec.Code;

                                                                    MatrixAmount := CalcAmount(TRUE);
                                                                  END;
                                                                   }
    { 20  ;TextBox      ;397  ;3740 ;1650 ;440  ;ParentControl=19;
                                                 InColumn=Yes;
                                                 SourceExpr=Code;
                                                 OnFormat=BEGIN
                                                            CurrForm.Code.UPDATEFONTBOLD("Show in Bold");
                                                          END;

                                                 OnLookup=BEGIN
                                                            LookUpCode(LineDimOption,LineDimCode,Code);
                                                          END;
                                                           }
    { 21  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=20;
                                                 InColumnHeading=Yes }
    { 22  ;TextBox      ;2047 ;3740 ;4400 ;440  ;HorzGlue=Both;
                                                 ParentControl=19;
                                                 InColumn=Yes;
                                                 SourceExpr=Name;
                                                 OnFormat=BEGIN
                                                            CurrForm.Name.UPDATEFONTBOLD("Show in Bold");
                                                            CurrForm.Name.UPDATEINDENT(220 * Indentation);
                                                          END;
                                                           }
    { 23  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=22;
                                                 InColumnHeading=Yes }
    { 24  ;TextBox      ;6377 ;3740 ;2200 ;440  ;Name=TotalAmount;
                                                 ParentControl=19;
                                                 InColumn=Yes;
                                                 CaptionML=[ENU=Total Amount;
                                                            ESP=Importe total];
                                                 BlankZero=Yes;
                                                 SourceExpr=Amount;
                                                 AutoFormatType=1;
                                                 AutoFormatExpr=ShownCurrency;
                                                 OnActivate=BEGIN
                                                              Amount := CalcAmount(FALSE);
                                                            END;

                                                 OnFormat=BEGIN
                                                            FormatAmount(Text);
                                                            CurrForm.TotalAmount.UPDATEFONTBOLD("Show in Bold");
                                                          END;

                                                 OnDrillDown=BEGIN
                                                               DrillDown(FALSE);
                                                             END;
                                                              }
    { 25  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=24;
                                                 InColumnHeading=Yes }
    { 26  ;TextBox      ;13200;4400 ;6600 ;440  ;Name=CellAmount;
                                                 ParentControl=19;
                                                 InMatrix=Yes;
                                                 BlankZero=Yes;
                                                 SourceExpr=MatrixAmount;
                                                 AutoFormatType=1;
                                                 AutoFormatExpr=ShownCurrency;
                                                 OnFormat=BEGIN
                                                            FormatAmount(Text);
                                                            CurrForm.CellAmount.UPDATEFONTBOLD("Show in Bold" OR CurrForm.Matrix.MatrixRec."Show in Bold");
                                                          END;

                                                 OnDrillDown=BEGIN
                                                               DrillDown(TRUE);
                                                             END;
                                                              }
    { 27  ;TextBox      ;14300;2530 ;1650 ;440  ;Name=MatrixHeader;
                                                 ParentControl=26;
                                                 InMatrixHeading=Yes;
                                                 SourceExpr=MatrixHeader;
                                                 OnFormat=BEGIN
                                                            CurrForm.MatrixHeader.UPDATEFONTBOLD(CurrForm.Matrix.MatrixRec."Show in Bold");
                                                          END;

                                                 OnLookup=BEGIN
                                                            LookUpCode(ColumnDimOption,ColumnDimCode,CurrForm.Matrix.MatrixRec.Code);
                                                          END;
                                                           }
    { 11  ;CommandButton;5610 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 BitmapPos=Center;
                                                 AutoRepeat=Yes;
                                                 Bitmap=16;
                                                 ToolTipML=[ENU=Next Period;
                                                            ESP=Periodo siguiente];
                                                 OnPush=BEGIN
                                                          FindPeriod('>=');
                                                        END;
                                                         }
    { 12  ;CommandButton;5060 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 BitmapPos=Center;
                                                 AutoRepeat=Yes;
                                                 Bitmap=15;
                                                 ToolTipML=[ENU=Previous Period;
                                                            ESP=Periodo anterior];
                                                 OnPush=BEGIN
                                                          FindPeriod('<=');
                                                        END;
                                                         }
    { 13  ;OptionButton ;4290 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=19;
                                                 ToolTipML=[ENU=Balance at Date;
                                                            ESP=Saldo a la fecha];
                                                 SourceExpr=AmountType;
                                                 OptionValue=Balance at Date;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 14  ;OptionButton ;3740 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=18;
                                                 ToolTipML=[ENU=Net Change;
                                                            ESP=Saldo periodo];
                                                 SourceExpr=AmountType;
                                                 OptionValue=Net Change;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 15  ;OptionButton ;2970 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=14;
                                                 ToolTipML=[ENU=Accounting Period;
                                                            ESP=Periodo contable];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Accounting Period;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 16  ;OptionButton ;2420 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=13;
                                                 ToolTipML=[ENU=Year;
                                                            ESP=A¤o];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Year;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 40  ;OptionButton ;1870 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=12;
                                                 ToolTipML=[ENU=Quarter;
                                                            ESP=Trimestre];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Quarter;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 41  ;OptionButton ;1320 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=11;
                                                 ToolTipML=[ENU=Month;
                                                            ESP=Mes];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Month;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 42  ;OptionButton ;770  ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=10;
                                                 ToolTipML=[ENU=Week;
                                                            ESP=Semana];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Week;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 43  ;OptionButton ;220  ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=9;
                                                 ToolTipML=[ENU=Day;
                                                            ESP=D¡a];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Day;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 58  ;MenuButton   ;11660;9240 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=[ENU=F&unctions;
                                                            ESP=Acci&ones];
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=59;
                                                     CaptionML=[ENU=Reverse Lines and Columns;
                                                                ESP=Invertir l¡neas y columnas];
                                                     OnPush=VAR
                                                              TempDimCode@1001 : Text[30];
                                                            BEGIN
                                                              TempDimCode := ColumnDimCode;
                                                              ColumnDimCode := LineDimCode;
                                                              LineDimCode := TempDimCode;
                                                              ValidateLineDimCode;
                                                              ValidateColumnDimCode;
                                                            END;
                                                             }
                                                   { ID=56;
                                                     CaptionML=[ENU=Export to Excel;
                                                                ESP=Exportar a Excel];
                                                     OnPush=VAR
                                                              AnalysisViewEntry@1000 : Record 365;
                                                              AnalysisViewToExcel@1001 : Codeunit 424;
                                                              AnalysisViewBudgetEntry2@1003 : Record 366;
                                                            BEGIN
                                                              SetCommonFilters(AnalysisViewEntry);
                                                              SetCommonBudgetFilters(AnalysisViewBudgetEntry2);
                                                              CASE ShowActualBudg OF
                                                                ShowActualBudg::"Actual Amounts":
                                                                  AnalysisViewEntry.FINDFIRST;
                                                                ShowActualBudg::"Budgeted Amounts":
                                                                  BEGIN
                                                                    AnalysisViewBudgetEntry2.FINDFIRST;
                                                                    IF NOT AnalysisViewEntry.FINDFIRST THEN
                                                                      AnalysisViewEntry."Analysis View Code" := AnalysisView.Code;
                                                                  END;
                                                              END;
                                                              AnalysisViewToExcel.ExportData(
                                                                AnalysisViewEntry,LineDimCode,ColumnDimCode,ShowOppositeSign,
                                                                ShowInAddCurr,AmountField,PeriodType,ShowColumnName, DateFilter,GLAccFilter, BudgetFilter,
                                                                Dim1Filter, Dim2Filter, Dim3Filter, Dim4Filter, AmountType, ClosingEntryFilter, ShowActualBudg, BusUnitFilter);
                                                            END;
                                                             }
                                                 }
                                                  }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Period;ESP=Periodo';
      Text001@1001 : TextConst 'ENU=<Sign><Integer Thousand><Decimals,2>;ESP=<Sign><Integer Thousand><Decimals,2>';
      Text002@1002 : TextConst 'ENU=You have not yet defined an analysis view.;ESP=No tiene a£n definida una vista an lisis.';
      Text003@1003 : TextConst 'ENU=%1 is not a valid line definition.;ESP=%1 no es una def. de l¡nea v lida.';
      Text004@1004 : TextConst 'ENU=%1 is not a valid column definition.;ESP=%1 no es una def. de columna v lida.';
      Text005@1005 : TextConst 'ENU=1,6,,Dimension 1 Filter;ESP=1,6,,Filtro dimensi¢n 1';
      Text006@1006 : TextConst 'ENU=1,6,,Dimension 2 Filter;ESP=1,6,,Filtro dimensi¢n 2';
      Text007@1007 : TextConst 'ENU=1,6,,Dimension 3 Filter;ESP=1,6,,Filtro dimensi¢n 3';
      Text008@1008 : TextConst 'ENU=1,6,,Dimension 4 Filter;ESP=1,6,,Filtro dimensi¢n 4';
      GLSetup@1009 : Record 98;
      AnalysisView@1011 : Record 363;
      AnalysisViewEntry@1012 : Record 365;
      AnalysisViewBudgetEntry@1013 : Record 366;
      AVBreakdownBuffer@1014 : TEMPORARY Record 375;
      Currency@1044 : Record 4;
      CurrExchRate@1015 : Record 330;
      AnalysisViewCode@1016 : Code[10];
      LineDimOption@1017 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,,,,,Historic G/L Account';
      ColumnDimOption@1018 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,,,,,Historic G/L Account';
      LineDimCode@1019 : Text[30];
      ColumnDimCode@1020 : Text[30];
      PeriodType@1021 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      AmountType@1022 : 'Net Change,Balance at Date';
      RoundingFactor@1023 : 'None,1,1000,1000000';
      AmountField@1024 : 'Amount,Debit Amount,Credit Amount';
      ShowActualBudg@1025 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%';
      ShowInAddCurr@1026 : Boolean;
      ShowOppositeSign@1027 : Boolean;
      ClosingEntryFilter@1028 : 'Include,Exclude';
      ShowColumnName@1029 : Boolean;
      DateFilter@1030 : Text[250];
      InternalDateFilter@1031 : Text[250];
      ExcludeClosingDateFilter@1032 : Text[1024];
      GLAccFilter@1033 : Code[250];
      BudgetFilter@1034 : Text[250];
      Dim1Filter@1035 : Code[250];
      Dim2Filter@1036 : Code[250];
      Dim3Filter@1037 : Code[250];
      Dim4Filter@1038 : Code[250];
      MatrixHeader@1039 : Text[50];
      MatrixAmount@1040 : Decimal;
      PeriodInitialized@1041 : Boolean;
      CurrExchDate@1042 : Date;
      BusUnitFilter@1043 : Code[250];
      BusUnitFilterCaption@1010 : Text[80];
      HistoricGLAcc@1100000 : Record 10721;
      HistoricGLAccFilter@1100001 : Code[250];
      BusUnitFilter2@1101100000 : Code[250];

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      GLAcc@1002 : Record 15;
      BusUnit@1001 : Record 220;
    BEGIN
      CASE DimCode OF
        '' :
          EXIT(-1);
        GLAcc.TABLECAPTION :
          EXIT(0);
        Text000 :
          EXIT(1);
        BusUnit.TABLECAPTION :
          EXIT(2);
        AnalysisView."Dimension 1 Code" :
          EXIT(3);
        AnalysisView."Dimension 2 Code" :
          EXIT(4);
        AnalysisView."Dimension 3 Code" :
          EXIT(5);
        AnalysisView."Dimension 4 Code" :
          EXIT(6);
        HistoricGLAcc.TABLECAPTION :
          EXIT(11);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,,,,,Historic G/L Account';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250]) : Boolean;
    VAR
      GLAcc@1003 : Record 15;
      BusUnit@1004 : Record 220;
      Period@1005 : Record 2000000007;
      DimVal@1006 : Record 349;
      PeriodFormMgt@1007 : Codeunit 359;
      Found@1008 : Boolean;
      HistoricGLAcc@1100000 : Record 10721;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account" :
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF GLAccFilter <> '' THEN
              GLAcc.SETFILTER("No.",GLAccFilter);
            Found := GLAcc.FIND(Which);
            IF Found THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::Period :
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            Period."Period Start" := DimCodeBuf."Period Start";
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF NOT PeriodInitialized AND (InternalDateFilter <> '') THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit" :
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            Found := BusUnit.FIND(Which);
            IF Found THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Dimension 1" :
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2" :
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3" :
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 4" :
          BEGIN
            IF Dim4Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim4Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Historic G/L Account" :
          BEGIN
            HistoricGLAcc."No." := DimCodeBuf.Code;
            IF HistoricGLAccFilter <> '' THEN
              HistoricGLAcc.SETFILTER("No.",HistoricGLAccFilter);
            Found := HistoricGLAcc.FIND(Which);
            IF Found THEN
              CopyHistoricGLAccToBuf(HistoricGLAcc,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@60(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,,,,,Historic G/L Account';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer) : Integer;
    VAR
      GLAcc@1003 : Record 15;
      BusUnit@1004 : Record 220;
      Period@1005 : Record 2000000007;
      DimVal@1006 : Record 349;
      PeriodFormMgt@1007 : Codeunit 359;
      ResultSteps@1008 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account" :
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF GLAccFilter <> '' THEN
              GLAcc.SETFILTER("No.",GLAccFilter);
            ResultSteps := GLAcc.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::Period :
          BEGIN
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            IF ResultSteps <> 0 THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit" :
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            ResultSteps := BusUnit.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Dimension 1" :
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2" :
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3" :
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 4" :
          BEGIN
            IF Dim4Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim4Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Historic G/L Account" :
          BEGIN
            HistoricGLAcc."No." := DimCodeBuf.Code;
            IF HistoricGLAccFilter <> '' THEN
              HistoricGLAcc.SETFILTER("No.",HistoricGLAccFilter);
            ResultSteps := HistoricGLAcc.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyHistoricGLAccToBuf(HistoricGLAcc,DimCodeBuf);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyGLAccToBuf@1(VAR TheGLAcc@1000 : Record 15;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheGLAcc."No.";
        Name := TheGLAcc.Name;
        Totaling := TheGLAcc.Totaling;
        Indentation := TheGLAcc.Indentation;
        "Show in Bold" := TheGLAcc."Account Type" <> TheGLAcc."Account Type"::Posting;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR ThePeriod@1000 : Record 2000000007;VAR TheDimCodeBuf@1001 : Record 367);
    VAR
      Period2@1002 : Record 2000000007;
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          "Period End" := CLOSINGDATE(ThePeriod."Period End")
        ELSE
          "Period End" := ThePeriod."Period End";
        IF DateFilter <> '' THEN BEGIN
          Period2.SETFILTER("Period End",DateFilter);
          IF Period2.GETRANGEMAX("Period End") < "Period End" THEN
            "Period End" := Period2.GETRANGEMAX("Period End");
        END;
        Name := ThePeriod."Period Name";
      END;
    END;

    LOCAL PROCEDURE CopyBusUnitToBuf@5(VAR TheBusUnit@1000 : Record 220;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheBusUnit.Code;
        Name := TheBusUnit.Name;
      END;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimVal@1000 : Record 349;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
      END;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      IF PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType) THEN
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          Calendar."Period End" := CLOSINGDATE(Calendar."Period End");
      IF AmountType = AmountType::"Net Change" THEN BEGIN
        AnalysisViewEntry.SETRANGE("Posting Date",Calendar."Period Start",Calendar."Period End");
        IF AnalysisViewEntry.GETRANGEMIN("Posting Date") = AnalysisViewEntry.GETRANGEMAX("Posting Date") THEN
          AnalysisViewEntry.SETRANGE("Posting Date",AnalysisViewEntry.GETRANGEMIN("Posting Date"));
      END ELSE
        AnalysisViewEntry.SETRANGE("Posting Date",0D,Calendar."Period End");

      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN
        DateFilter := InternalDateFilter;
      AVBreakdownBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE CalculateClosingDateFilter@45();
    VAR
      AccountingPeriod@1000 : Record 50;
      FirstRec@1001 : Boolean;
    BEGIN
      IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
        ExcludeClosingDateFilter := ''
      ELSE BEGIN
        AccountingPeriod.SETCURRENTKEY("New Fiscal Year");
        AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
        FirstRec := TRUE;
        IF AccountingPeriod.FIND('-') THEN
          REPEAT
            IF FirstRec THEN
              ExcludeClosingDateFilter :=
                STRSUBSTNO('<>%1',CLOSINGDATE(AccountingPeriod."Starting Date" - 1))
            ELSE
              ExcludeClosingDateFilter :=
                ExcludeClosingDateFilter + STRSUBSTNO('&<>%1',CLOSINGDATE(AccountingPeriod."Starting Date" - 1));
            FirstRec := FALSE;
          UNTIL AccountingPeriod.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FormatAmount@6(VAR Text@1000 : Text[250]);
    VAR
      Amount@1001 : Decimal;
    BEGIN
      IF Text = '' THEN
        EXIT;

      EVALUATE(Amount,Text);

      IF ShowActualBudg IN [ShowActualBudg::"Variance%",ShowActualBudg::"Index%"] THEN BEGIN
        IF Amount = 0 THEN
          Text := ''
        ELSE
          Text := FORMAT(ROUND(Amount,0.1),0,Text001);
        EXIT;
      END;

      IF RoundingFactor = RoundingFactor::None THEN
        EXIT;

      CASE RoundingFactor OF
        RoundingFactor::"1":
          Amount := ROUND(Amount,1);
        RoundingFactor::"1000":
          Amount := ROUND(Amount / 1000,0.1);
        RoundingFactor::"1000000":
          Amount := ROUND(Amount / 1000000,0.1);
      END;
      IF Amount = 0 THEN
        Text := ''
      ELSE
        CASE RoundingFactor OF
          RoundingFactor::"1":
            Text := FORMAT(Amount);
          RoundingFactor::"1000",RoundingFactor::"1000000":
            Text := FORMAT(Amount,0,Text001);
        END;
    END;

    LOCAL PROCEDURE GetDimSelection@3(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      GLAcc@1003 : Record 15;
      BusUnit@1002 : Record 220;
      DimSelection@1001 : Form 568;
    BEGIN
      DimSelection.InsertDimSelBuf(FALSE,GLAcc.TABLECAPTION,GLAcc.TABLECAPTION);
      DimSelection.InsertDimSelBuf(FALSE,HistoricGLAcc.TABLECAPTION,HistoricGLAcc.TABLECAPTION);
      DimSelection.InsertDimSelBuf(FALSE,Text000,Text000);
      DimSelection.InsertDimSelBuf(FALSE,BusUnit.TABLECAPTION,BusUnit.TABLECAPTION);
      IF AnalysisView."Dimension 1 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 1 Code",'');
      IF AnalysisView."Dimension 2 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 2 Code",'');
      IF AnalysisView."Dimension 3 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 3 Code",'');
      IF AnalysisView."Dimension 4 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 4 Code",'');

      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode)
      ELSE
        EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE LookUpCode@4(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,,,,,Historic G/L Account';DimCode@1001 : Text[30];Code@1002 : Text[30]);
    VAR
      GLAcc@1003 : Record 15;
      BusUnit@1004 : Record 220;
      DimVal@1005 : Record 349;
      DimValList@1006 : Form 560;
      HistoricGLAcc@1100000 : Record 10721;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account" :
          BEGIN
            GLAcc.GET(Code);
            FORM.RUNMODAL(FORM::"G/L Account List",GLAcc);
          END;
        DimOption::Period : ;
        DimOption::"Business Unit" :
          BEGIN
            BusUnit.GET(Code);
            FORM.RUNMODAL(FORM::"Business Unit List",BusUnit);
          END;
        DimOption::"Dimension 1",DimOption::"Dimension 2",
        DimOption::"Dimension 3",DimOption::"Dimension 4" :
          BEGIN
            DimVal.SETRANGE("Dimension Code",DimCode);
            DimVal.GET(DimCode,Code);
            DimValList.SETTABLEVIEW(DimVal);
            DimValList.SETRECORD(DimVal);
            DimValList.RUNMODAL;
          END;
        DimOption::"Historic G/L Account" :
          BEGIN
            HistoricGLAcc.GET(Code);
            FORM.RUNMODAL(FORM::"Historic G/L Account List",HistoricGLAcc);
          END;
      END;
    END;

    LOCAL PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Form 560;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE)
    END;

    LOCAL PROCEDURE SetCommonFilters@15(VAR TheAnalysisViewEntry@1000 : Record 365);
    VAR
      DateFilter2@1001 : Text[1024];
    BEGIN
      WITH TheAnalysisViewEntry DO BEGIN
        IF DateFilter = '' THEN
          DateFilter2 := ExcludeClosingDateFilter
        ELSE BEGIN
          IF AmountType = AmountType::"Net Change" THEN BEGIN
            DateFilter2 := DateFilter;
          END ELSE BEGIN
            SETFILTER("Posting Date",DateFilter);
            DateFilter2 := STRSUBSTNO('..%1',GETRANGEMAX("Posting Date"));
          END;
          IF ExcludeClosingDateFilter <> '' THEN
            DateFilter2 := DateFilter2 + '&' + ExcludeClosingDateFilter;
        END;
        RESET;
        SETRANGE("Analysis View Code",AnalysisView.Code);
        IF BusUnitFilter <> '' THEN
          SETFILTER("Business Unit Code",BusUnitFilter);
        IF GLAccFilter <> '' THEN
          SETFILTER("G/L Account No.",GLAccFilter);
        SETFILTER("Posting Date",DateFilter2);
        IF Dim1Filter <> '' THEN
          SETFILTER("Dimension 1 Value Code",Dim1Filter);
        IF Dim2Filter <> '' THEN
          SETFILTER("Dimension 2 Value Code",Dim2Filter);
        IF Dim3Filter <> '' THEN
          SETFILTER("Dimension 3 Value Code",Dim3Filter);
        IF Dim4Filter <> '' THEN
          SETFILTER("Dimension 4 Value Code",Dim4Filter);
        IF HistoricGLAccFilter <> '' THEN
          SETFILTER("Old G/L Account No.",HistoricGLAccFilter);
        SETPERMISSIONFILTER;
      END;
    END;

    LOCAL PROCEDURE SetDimFilters@17(VAR TheAnalysisViewEntry@1000 : Record 365;LineOrColumn@1001 : 'Line,Column');
    VAR
      DimOption@1002 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,,,,,Historic G/L Account';
      DimCodeBuf@1003 : Record 367;
    BEGIN
      IF LineOrColumn = LineOrColumn::Line THEN BEGIN
        DimCodeBuf := Rec;
        DimOption := LineDimOption;
      END ELSE BEGIN
        DimCodeBuf := CurrForm.Matrix.MatrixRec;
        DimOption := ColumnDimOption;
      END;
      CASE DimOption OF
        DimOption::"G/L Account" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("G/L Account No.",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("G/L Account No.",DimCodeBuf.Totaling);
        DimOption::Period :
          BEGIN
            IF AmountType = AmountType::"Net Change" THEN
              TheAnalysisViewEntry.SETRANGE(
                "Posting Date",DimCodeBuf."Period Start",DimCodeBuf."Period End")
            ELSE
              TheAnalysisViewEntry.SETRANGE("Posting Date",0D,DimCodeBuf."Period End");
            IF (ClosingEntryFilter = ClosingEntryFilter::Exclude) AND (ExcludeClosingDateFilter <> '') THEN
              TheAnalysisViewEntry.SETFILTER(
                "Posting Date",TheAnalysisViewEntry.GETFILTER("Posting Date") +
                '&' + ExcludeClosingDateFilter);
          END;
        DimOption::"Business Unit" :
          TheAnalysisViewEntry.SETRANGE("Business Unit Code",DimCodeBuf.Code);
        DimOption::"Dimension 1" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("Dimension 1 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("Dimension 1 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 2" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("Dimension 2 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("Dimension 2 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 3" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("Dimension 3 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("Dimension 3 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 4" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("Dimension 4 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("Dimension 4 Value Code",DimCodeBuf.Totaling);
        DimOption::"Historic G/L Account" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewEntry.SETRANGE("Old G/L Account No.",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewEntry.SETFILTER("Old G/L Account No.",DimCodeBuf.Totaling);
      END;
      TheAnalysisViewEntry.SETPERMISSIONFILTER;
    END;

    LOCAL PROCEDURE SetCommonBudgetFilters@28(VAR TheAnalysisViewBudgetEntry@1000 : Record 366);
    BEGIN
      WITH TheAnalysisViewBudgetEntry DO BEGIN
        RESET;
        SETRANGE("Analysis View Code",AnalysisView.Code);
        IF BusUnitFilter <> '' THEN
          SETFILTER("Business Unit Code",BusUnitFilter);
        IF BudgetFilter <> '' THEN
          SETFILTER("Budget Name",BudgetFilter);
        IF GLAccFilter <> '' THEN
          SETFILTER("G/L Account No.",GLAccFilter);
        IF DateFilter <> '' THEN
          SETFILTER("Posting Date",DateFilter);
        IF Dim1Filter <> '' THEN
          SETFILTER("Dimension 1 Value Code",Dim1Filter);
        IF Dim2Filter <> '' THEN
          SETFILTER("Dimension 2 Value Code",Dim2Filter);
        IF Dim3Filter <> '' THEN
          SETFILTER("Dimension 3 Value Code",Dim3Filter);
        IF Dim4Filter <> '' THEN
          SETFILTER("Dimension 4 Value Code",Dim4Filter);
        IF HistoricGLAccFilter <> '' THEN
          SETFILTER("Old G/L Account No.",HistoricGLAccFilter);
      END;
    END;

    LOCAL PROCEDURE SetDimBudgetFilters@26(VAR TheAnalysisViewBudgetEntry@1000 : Record 366;LineOrColumn@1001 : 'Line,Column');
    VAR
      DimOption@1002 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,,,,,Historic G/L Account';
      DimCodeBuf@1003 : Record 367;
    BEGIN
      IF LineOrColumn = LineOrColumn::Line THEN BEGIN
        DimCodeBuf := Rec;
        DimOption := LineDimOption;
      END ELSE BEGIN
        DimCodeBuf := CurrForm.Matrix.MatrixRec;
        DimOption := ColumnDimOption;
      END;
      CASE DimOption OF
        DimOption::"G/L Account" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewBudgetEntry.SETRANGE("G/L Account No.",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewBudgetEntry.SETFILTER("G/L Account No.",DimCodeBuf.Totaling);
        DimOption::Period :
          IF AmountType = AmountType::"Net Change" THEN
            TheAnalysisViewBudgetEntry.SETRANGE(
              "Posting Date",DimCodeBuf."Period Start",DimCodeBuf."Period End")
          ELSE
            TheAnalysisViewBudgetEntry.SETRANGE("Posting Date",0D,DimCodeBuf."Period End");
        DimOption::"Business Unit" :
          TheAnalysisViewBudgetEntry.SETRANGE("Business Unit Code",DimCodeBuf.Code);
        DimOption::"Dimension 1" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewBudgetEntry.SETRANGE("Dimension 1 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewBudgetEntry.SETFILTER("Dimension 1 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 2" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewBudgetEntry.SETRANGE("Dimension 2 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewBudgetEntry.SETFILTER("Dimension 2 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 3" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewBudgetEntry.SETRANGE("Dimension 3 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewBudgetEntry.SETFILTER("Dimension 3 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 4" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewBudgetEntry.SETRANGE("Dimension 4 Value Code",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewBudgetEntry.SETFILTER("Dimension 4 Value Code",DimCodeBuf.Totaling);
        DimOption::"Historic G/L Account" :
          IF DimCodeBuf.Totaling = '' THEN
            TheAnalysisViewBudgetEntry.SETRANGE("Old G/L Account No.",DimCodeBuf.Code)
          ELSE
            TheAnalysisViewBudgetEntry.SETFILTER("Old G/L Account No.",DimCodeBuf.Totaling);
      END;
    END;

    LOCAL PROCEDURE DrillDown@30(SetColFilter@1000 : Boolean);
    BEGIN
      IF ShowActualBudg = ShowActualBudg::"Actual Amounts" THEN BEGIN
        SetCommonFilters(AnalysisViewEntry);
        SetDimFilters(AnalysisViewEntry,0);
        IF SetColFilter THEN
          SetDimFilters(AnalysisViewEntry,1);
        FORM.RUN(FORM::"Analysis View Entries",AnalysisViewEntry);
      END;
      IF ShowActualBudg = ShowActualBudg::"Budgeted Amounts" THEN BEGIN
        SetCommonBudgetFilters(AnalysisViewBudgetEntry);
        SetDimBudgetFilters(AnalysisViewBudgetEntry,0);
        IF SetColFilter THEN
          SetDimBudgetFilters(AnalysisViewBudgetEntry,1);
        FORM.RUN(FORM::"Analysis View Budget Entries",AnalysisViewBudgetEntry);
      END;
    END;

    LOCAL PROCEDURE ValidateAnalysisViewCode@11();
    VAR
      AnalysisViewFilter@1000 : Record 364;
    BEGIN
      AnalysisView.Code := AnalysisViewCode;
      IF NOT AnalysisView.FIND('=<>') THEN
        ERROR(Text002);
      AnalysisViewCode := AnalysisView.Code;
      GLAccFilter := AnalysisView."G/L Account Filter";
      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';
      Dim4Filter := '';
      SETPERMISSIONFILTER;
      Dim1Filter := GETFILTER("Dimension 1 Value Filter");
      Dim2Filter := GETFILTER("Dimension 2 Value Filter");
      Dim3Filter := GETFILTER("Dimension 3 Value Filter");
      Dim4Filter := GETFILTER("Dimension 4 Value Filter");
      HistoricGLAccFilter := AnalysisView."Historic G/L Account Filter";

      CurrForm.Dim1Filter.ENABLED :=
        (AnalysisView."Dimension 1 Code" <> '') AND
        (GETFILTER("Dimension 1 Value Filter") = '');
      CurrForm.Dim2Filter.ENABLED :=
        (AnalysisView."Dimension 2 Code" <> '') AND
        (GETFILTER("Dimension 2 Value Filter") = '');
      CurrForm.Dim3Filter.ENABLED :=
        (AnalysisView."Dimension 3 Code" <> '') AND
        (GETFILTER("Dimension 3 Value Filter") = '');
      CurrForm.Dim4Filter.ENABLED :=
        (AnalysisView."Dimension 4 Code" <> '') AND
        (GETFILTER("Dimension 4 Value Filter") = '');

      IF CurrForm.Dim1Filter.ENABLED THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 1 Code") THEN
          Dim1Filter := AnalysisViewFilter."Dimension Value Filter";

      IF CurrForm.Dim2Filter.ENABLED THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 2 Code") THEN
          Dim2Filter := AnalysisViewFilter."Dimension Value Filter";

      IF CurrForm.Dim3Filter.ENABLED THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 3 Code") THEN
          Dim3Filter := AnalysisViewFilter."Dimension Value Filter";

      IF CurrForm.Dim4Filter.ENABLED THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 4 Code") THEN
          Dim4Filter := AnalysisViewFilter."Dimension Value Filter";
    END;

    LOCAL PROCEDURE ValidateLineDimCode@19();
    VAR
      GLAcc@1001 : Record 15;
      BusUnit@1000 : Record 220;
    BEGIN
      IF (UPPERCASE(LineDimCode) <> UPPERCASE(GLAcc.TABLECAPTION)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(BusUnit.TABLECAPTION)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text000)) AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 1 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 2 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 3 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 4 Code") AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(HistoricGLAcc.TABLECAPTION)) AND
         (LineDimCode <> '') THEN BEGIN
        MESSAGE(Text003,LineDimCode);
        LineDimCode := '';
      END;
      LineDimOption := DimCodeToOption(LineDimCode);
      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      GLAcc@1001 : Record 15;
      BusUnit@1000 : Record 220;
    BEGIN
      IF (UPPERCASE(ColumnDimCode) <> UPPERCASE(GLAcc.TABLECAPTION)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(BusUnit.TABLECAPTION)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text000)) AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 1 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 2 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 3 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 4 Code") AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(HistoricGLAcc.TABLECAPTION)) AND
         (ColumnDimCode <> '') THEN BEGIN
        MESSAGE(Text004,ColumnDimCode);
        ColumnDimCode := '';
      END;
      ColumnDimOption := DimCodeToOption(ColumnDimCode);
      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    LOCAL PROCEDURE CalcAmount@27(SetColFilter@1000 : Boolean) : Decimal;
    VAR
      Amount@1001 : Decimal;
      ColumnCode@1002 : Code[20];
    BEGIN
      IF SetColFilter THEN
        ColumnCode := CurrForm.Matrix.MatrixRec.Code
      ELSE
        ColumnCode := '';
      IF AVBreakdownBuffer.GET(Code,ColumnCode) THEN
        EXIT(AVBreakdownBuffer.Amount);

      CASE ShowActualBudg OF
        ShowActualBudg::"Actual Amounts":
          Amount := CalcActualAmount(SetColFilter);
        ShowActualBudg::"Budgeted Amounts":
          Amount := CalcBudgAmount(SetColFilter);
        ShowActualBudg::Variance:
          Amount := CalcActualAmount(SetColFilter) - CalcBudgAmount(SetColFilter);
        ShowActualBudg::"Variance%":
          BEGIN
            Amount := CalcBudgAmount(SetColFilter);
            IF Amount <> 0 THEN
              Amount := ROUND(100 * (CalcActualAmount(SetColFilter) - Amount) / Amount);
          END;
        ShowActualBudg::"Index%":
          BEGIN
            Amount := CalcBudgAmount(SetColFilter);
            IF Amount <> 0 THEN
              Amount := ROUND(100 * CalcActualAmount(SetColFilter) / Amount);
          END;
      END;

      IF ShowOppositeSign THEN
        Amount := -Amount;

      AVBreakdownBuffer."Line Code" := Code;
      AVBreakdownBuffer."Column Code" := ColumnCode;
      AVBreakdownBuffer.Amount := Amount;
      AVBreakdownBuffer.INSERT;

      EXIT(Amount);
    END;

    LOCAL PROCEDURE CalcActualAmount@7(SetColFilter@1000 : Boolean) : Decimal;
    VAR
      Amount@1001 : Decimal;
    BEGIN
      AnalysisViewEntry.RESET;
      SetCommonFilters(AnalysisViewEntry);
      SetDimFilters(AnalysisViewEntry,0);
      IF SetColFilter THEN
        SetDimFilters(AnalysisViewEntry,1);

      IF ShowInAddCurr THEN
        CASE AmountField OF
          AmountField::Amount:
            BEGIN
              AnalysisViewEntry.CALCSUMS("Add.-Curr. Amount");
              Amount := AnalysisViewEntry."Add.-Curr. Amount";
            END;
          AmountField::"Debit Amount":
            BEGIN
              AnalysisViewEntry.CALCSUMS("Add.-Curr. Debit Amount");
              Amount := AnalysisViewEntry."Add.-Curr. Debit Amount";
            END;
          AmountField::"Credit Amount":
            BEGIN
              AnalysisViewEntry.CALCSUMS("Add.-Curr. Credit Amount");
              Amount := AnalysisViewEntry."Add.-Curr. Credit Amount";
            END;
        END
      ELSE
        CASE AmountField OF
          AmountField::Amount:
            BEGIN
              AnalysisViewEntry.CALCSUMS(Amount);
              Amount := AnalysisViewEntry.Amount;
            END;
          AmountField::"Debit Amount":
            BEGIN
              AnalysisViewEntry.CALCSUMS("Debit Amount");
              Amount := AnalysisViewEntry."Debit Amount";
            END;
          AmountField::"Credit Amount":
            BEGIN
              AnalysisViewEntry.CALCSUMS("Credit Amount");
              Amount := AnalysisViewEntry."Credit Amount";
            END;
        END;

      EXIT(Amount);
    END;

    LOCAL PROCEDURE CalcBudgAmount@10(SetColFilter@1000 : Boolean) : Decimal;
    VAR
      Amount@1001 : Decimal;
    BEGIN
      AnalysisViewBudgetEntry.RESET;
      SetCommonBudgetFilters(AnalysisViewBudgetEntry);
      SetDimBudgetFilters(AnalysisViewBudgetEntry,0);
      IF SetColFilter THEN
        SetDimBudgetFilters(AnalysisViewBudgetEntry,1);

      AnalysisViewBudgetEntry.CALCSUMS(Amount);
      Amount := AnalysisViewBudgetEntry.Amount;

      CASE AmountField OF
        AmountField::"Debit Amount":
          IF Amount < 0 THEN
            Amount := 0;
        AmountField::"Credit Amount":
          IF Amount > 0 THEN
            Amount := 0
          ELSE
            Amount := -Amount;
      END;

      IF (Amount <> 0) AND ShowInAddCurr THEN BEGIN
        IF AnalysisViewBudgetEntry.GETFILTER("Posting Date") = '' THEN
          CurrExchDate := WORKDATE
        ELSE
          CurrExchDate := AnalysisViewBudgetEntry.GETRANGEMIN("Posting Date");
        Amount :=
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              CurrExchDate,GLSetup."Additional Reporting Currency",Amount,
              CurrExchRate.ExchangeRate(CurrExchDate,GLSetup."Additional Reporting Currency")),
            Currency."Amount Rounding Precision");
      END;

      EXIT(Amount);
    END;

    LOCAL PROCEDURE GetCaptionClass@12(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      IF AnalysisView.Code <> AnalysisViewCode THEN
        AnalysisView.GET(AnalysisViewCode);
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 1 Code")
            ELSE
              EXIT(Text005);
          END;
        2:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 2 Code")
            ELSE
              EXIT(Text006);
          END;
        3:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 3 Code")
            ELSE
              EXIT(Text007);
          END;
        4:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 4 Code")
            ELSE
              EXIT(Text008);
          END;
      END;
    END;

    LOCAL PROCEDURE ShownCurrency@13() : Code[10];
    BEGIN
      IF (GLSetup."Additional Reporting Currency" <> '') AND ShowInAddCurr THEN
        EXIT(Currency.Code)
      ELSE
        EXIT('');
    END;

    PROCEDURE SetAnalysisViewCode@14(NextAnalysisViewCode@1000 : Code[10]);
    BEGIN
      //Dummy function to make form 9378 compile
    END;

    LOCAL PROCEDURE CopyHistoricGLAccToBuf@1100000(VAR TheHistoricGLAcc@1100000 : Record 10721;VAR TheDimCodeBuf@1100001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheHistoricGLAcc."No.";
        Name := TheHistoricGLAcc.Name;
        Totaling := TheHistoricGLAcc.Totaling;
        Indentation := TheHistoricGLAcc.Indentation;
        "Show in Bold" := TheHistoricGLAcc."Account Type" <> TheHistoricGLAcc."Account Type"::Posting;
      END;
    END;

    BEGIN
    END.
  }
}
