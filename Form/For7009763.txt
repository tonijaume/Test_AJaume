OBJECT Form 7009763 Matriz dato analitico
{
  OBJECT-PROPERTIES
  {
    Date=02/10/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009,DA;
  }
  PROPERTIES
  {
    Width=16500;
    Height=10010;
    CaptionML=[ENU=Analytic data Matrix;
               ESP=Matriz dato anal°tico;
               FRA=Matrice donnÇe analytique];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=DataAnalysisCode;
    OnOpenForm=BEGIN
                 ValidateDataAnalysisCode;

                 IF (LineDimCode = '') AND (ColumnDimCode = '') THEN BEGIN
                   LineDimCode := Text010;
                   ColumnDimCode := Text000;
                 END;
                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);

                 CalculateClosingDateFilter;
                 FindPeriod('');
                 CurrForm.UPDATECONTROLS;
               END;

    OnFindRecord=BEGIN
                   EXIT(FindRec(LineDimOption,Rec,Which));
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(LineDimOption,Rec,Steps));
                 END;

    OnAfterGetRecord=BEGIN
                       IF CurrForm.TotalAmount.VISIBLE THEN
                         Amount := CalcAmount(FALSE,FALSE);
                     END;

  }
  CONTROLS
  {
    { 1   ;TabControl   ;220  ;220  ;16060;3080 ;HorzGlue=Both;
                                                 VertGlue=Top;
                                                 PageNamesML=[ENU=General,Filters,Options;
                                                              ESP=General,Filtros,Opciones;
                                                              FRA=GÇnÇral,Filtres,Options;
                                                              ITA=Generale,Filtri,Opzioni] }
    { 5   ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=[ENU=Analysis data Code;
                                                            ESP=C¢d. dato anal°tico;
                                                            FRA=Code donnÇe analytique];
                                                 SourceExpr=DataAnalysisCode;
                                                 TableRelation="Dato analitico";
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              ValidateDataAnalysisCode;
                                                              ValidateColumnDimCode;
                                                              ValidateLineDimCode;
                                                            END;

                                                 OnLookup=VAR
                                                            DataAnalysisList@1002 : Form 7009727;
                                                          BEGIN
                                                            DataAnalysisList.LOOKUPMODE := TRUE;
                                                            DataAnalysisList.SETRECORD(DataAnalysis);
                                                            IF DataAnalysisList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                              DataAnalysisList.GETRECORD(DataAnalysis);
                                                              DataAnalysisCode := DataAnalysis.Codigo;
                                                              Text := DataAnalysis.Codigo;
                                                              ValidateDataAnalysisCode;
                                                              ValidateColumnDimCode;
                                                              ValidateLineDimCode;
                                                              CurrForm.UPDATE;
                                                              EXIT(TRUE);
                                                            END ELSE BEGIN
                                                              ValidateDataAnalysisCode;
                                                              CurrForm.UPDATE;
                                                              EXIT(FALSE);
                                                            END;
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATECONTROLS;
                                                                 END;
                                                                  }
    { 7   ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=5 }
    { 6   ;TextBox      ;3850 ;1650 ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=[ENU=Show as Lines;
                                                            ESP=Muestra como l°neas;
                                                            FRA=êchantillon comme lignes;
                                                            ITA=Mostra come righe];
                                                 SourceExpr=LineDimCode;
                                                 OnValidate=BEGIN
                                                              IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                                                                ColumnDimCode := '';
                                                                ValidateColumnDimCode;
                                                              END;
                                                              AVBreakdownBuffer.DELETEALL;
                                                              ValidateLineDimCode;
                                                            END;

                                                 OnLookup=VAR
                                                            NewCode@1002 : Text[30];
                                                          BEGIN
                                                            NewCode := GetDimSelection(LineDimCode);
                                                            IF NewCode = LineDimCode THEN
                                                              EXIT(FALSE)
                                                            ELSE BEGIN
                                                              Text := NewCode;
                                                              LineDimCode := NewCode;
                                                              ValidateLineDimCode;
                                                              CurrForm.UPDATE;
                                                              EXIT(TRUE);
                                                            END
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 8   ;Label        ;440  ;1650 ;3300 ;440  ;ParentControl=6 }
    { 9   ;TextBox      ;3850 ;2200 ;2750 ;440  ;ParentControl=1;
                                                 InPage=0;
                                                 CaptionML=[ENU=Show as Columns;
                                                            ESP=Muestra como columnas;
                                                            FRA=êchantillon comme colonnes;
                                                            ITA=Mostra come colonne];
                                                 SourceExpr=ColumnDimCode;
                                                 OnValidate=BEGIN
                                                              IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                                                                LineDimCode := '';
                                                                ValidateLineDimCode;
                                                              END;
                                                              AVBreakdownBuffer.DELETEALL;
                                                              ValidateColumnDimCode;
                                                            END;

                                                 OnLookup=VAR
                                                            NewCode@1002 : Text[30];
                                                          BEGIN
                                                            NewCode := GetDimSelection(ColumnDimCode);
                                                            IF NewCode = ColumnDimCode THEN
                                                              EXIT(FALSE)
                                                            ELSE BEGIN
                                                              Text := NewCode;
                                                              ColumnDimCode := NewCode;
                                                              ValidateColumnDimCode;
                                                              CurrForm.UPDATE;
                                                              EXIT(TRUE);
                                                            END
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 10  ;Label        ;440  ;2200 ;3300 ;440  ;ParentControl=9 }
    { 36  ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Date Filter;
                                                            ESP=Filtro fecha;
                                                            FRA=Filtre date;
                                                            ITA=Filtro data;
                                                            PTG=Filtro Data];
                                                 SourceExpr=DateFilter;
                                                 OnValidate=VAR
                                                              GLAcc@1001 : Record 15;
                                                              ApplicationManagement@1002 : Codeunit 1;
                                                            BEGIN
                                                              IF ApplicationManagement.MakeDateFilter(DateFilter) = 0 THEN;
                                                              GLAcc.SETFILTER("Date Filter",DateFilter);
                                                              DateFilter := GLAcc.GETFILTER("Date Filter");
                                                              InternalDateFilter := DateFilter;
                                                            END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 37  ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=36 }
    { 30  ;TextBox      ;12980;1540 ;2750 ;440  ;Name=Dim2Filter;
                                                 ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Dimension 2 Filter;
                                                            ESP=Filtro dimensi¢n 2;
                                                            FRA=Filtre dimension 2;
                                                            ITA=Filtro dimensione 2];
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim2Filter;
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(Text011,Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 34  ;TextBox      ;12980;990  ;2750 ;440  ;Name=Dim1Filter;
                                                 ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Dimension 1 Filter;
                                                            ESP=Filtro dimensi¢n 1;
                                                            FRA=Filtre dimension 1;
                                                            ITA=Filtro dimensione 1];
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim1Filter;
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(Text010,Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 35  ;TextBox      ;12980;2640 ;2750 ;440  ;Name=Dim4Filter;
                                                 ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Dimension 4 Filter;
                                                            ESP=Filtro dimensi¢n 4;
                                                            FRA=Filtre dimension 4;
                                                            ITA=Filtro dimensione 4];
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim4Filter;
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(Text013,Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 46  ;TextBox      ;12980;2090 ;2750 ;440  ;Name=Dim3Filter;
                                                 ParentControl=1;
                                                 InPage=1;
                                                 CaptionML=[ENU=Dimension 3 Filter;
                                                            ESP=Filtro dimensi¢n 3;
                                                            FRA=Filtre dimension 3;
                                                            ITA=Filtro dimensione 3];
                                                 ClearOnLookup=No;
                                                 SourceExpr=Dim3Filter;
                                                 OnLookup=BEGIN
                                                            EXIT(LookUpDimFilter(Text012,Text));
                                                          END;

                                                 OnAfterValidate=BEGIN
                                                                   AVBreakdownBuffer.DELETEALL;
                                                                   CurrForm.UPDATE;
                                                                 END;
                                                                  }
    { 31  ;Label        ;9570 ;990  ;3300 ;440  ;ParentControl=34;
                                                 InPage=1 }
    { 33  ;Label        ;9570 ;1540 ;3300 ;440  ;ParentControl=30;
                                                 InPage=1 }
    { 44  ;Label        ;9570 ;2090 ;3300 ;440  ;ParentControl=46;
                                                 InPage=1 }
    { 45  ;Label        ;9570 ;2640 ;3300 ;440  ;ParentControl=35;
                                                 InPage=1 }
    { 4   ;CheckBox     ;12980;990  ;440  ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 ShowCaption=No;
                                                 CaptionML=[ENU=Show Column Name;
                                                            ESP=Muestra nombre columna;
                                                            FRA=êchantillon nom colonne;
                                                            ITA=Mostra nome colonna];
                                                 SourceExpr=ShowColumnName }
    { 3   ;Label        ;9570 ;990  ;3300 ;440  ;ParentControl=4 }
    { 18  ;TextBox      ;3850 ;1540 ;2750 ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 CaptionML=[ENU=Rounding Factor;
                                                            ESP=Factor redondeo;
                                                            FRA=Facteur arrondissant;
                                                            ITA=Fattore arrotondamento];
                                                 OptionCaptionML=[ENU=None,1,1000,1000000;
                                                                  ESP=No,1,1000,1000000;
                                                                  FRA=Non,1,1 000,1 000 000;
                                                                  ITA=Nessuno,1,1000,1000000];
                                                 SourceExpr=RoundingFactor }
    { 28  ;Label        ;440  ;1540 ;3300 ;440  ;ParentControl=18 }
    { 52  ;TextBox      ;3850 ;990  ;2750 ;440  ;ParentControl=1;
                                                 InPage=2;
                                                 CaptionML=[ENU=Closing Entries;
                                                            ESP=Movs. regularizaci¢n;
                                                            FRA=Mouvs. rÇgularisation;
                                                            ITA=Mov. chiusura];
                                                 OptionCaptionML=[ENU=Include,Exclude;
                                                                  ESP=Incluir,Excluir;
                                                                  FRA=Inclure,Exclure;
                                                                  ITA=Includi,Escludi];
                                                 SourceExpr=ClosingEntryFilter;
                                                 OnValidate=BEGIN
                                                              AVBreakdownBuffer.DELETEALL;
                                                              CalculateClosingDateFilter;
                                                              FindPeriod('=');
                                                              Amount := CalcAmount(FALSE,FALSE);
                                                            END;
                                                             }
    { 51  ;Label        ;440  ;990  ;3300 ;440  ;ParentControl=52 }
    { 2   ;CommandButton;14080;9240 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 19  ;MatrixBox    ;220  ;3520 ;16060;5500 ;Name=Matrix;
                                                 HorzGlue=Both;
                                                 VertGlue=Both;
                                                 MatrixSourceTable=Table367;
                                                 OnFindRecord=BEGIN
                                                                EXIT(FindRec(ColumnDimOption,CurrForm.Matrix.MatrixRec,Which));
                                                              END;

                                                 OnNextRecord=BEGIN
                                                                EXIT(NextRec(ColumnDimOption,CurrForm.Matrix.MatrixRec,Steps));
                                                              END;

                                                 OnAfterGetRecord=BEGIN
                                                                    IF ShowColumnName THEN
                                                                      MatrixHeader := CurrForm.Matrix.MatrixRec.Name
                                                                    ELSE
                                                                      MatrixHeader := CurrForm.Matrix.MatrixRec.Code;

                                                                    MatrixAmount := CalcAmount(TRUE,FALSE);
                                                                  END;
                                                                   }
    { 20  ;TextBox      ;397  ;3740 ;1650 ;440  ;Editable=No;
                                                 ParentControl=19;
                                                 InColumn=Yes;
                                                 SourceExpr=Code;
                                                 OnFormat=BEGIN
                                                            CurrForm.Code.UPDATEFONTBOLD("Show in Bold");
                                                          END;

                                                 OnLookup=BEGIN
                                                            LookUpCode(LineDimOption,Code);
                                                          END;
                                                           }
    { 21  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=20;
                                                 InColumnHeading=Yes }
    { 22  ;TextBox      ;2047 ;3740 ;4400 ;440  ;HorzGlue=Both;
                                                 Editable=No;
                                                 ParentControl=19;
                                                 InColumn=Yes;
                                                 SourceExpr=Name;
                                                 OnFormat=BEGIN
                                                            CurrForm.Name.UPDATEFONTBOLD("Show in Bold");
                                                            CurrForm.Name.UPDATEINDENT(220 * Indentation);
                                                          END;
                                                           }
    { 23  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=22;
                                                 InColumnHeading=Yes }
    { 24  ;TextBox      ;6377 ;3740 ;2200 ;440  ;Name=TotalAmount;
                                                 Editable=No;
                                                 ParentControl=19;
                                                 InColumn=Yes;
                                                 CaptionML=[ENU=Total Amount;
                                                            ESP=Importe total;
                                                            FRA=Montant total;
                                                            ITA=Importo totale;
                                                            PTG=Valor Total];
                                                 BlankZero=Yes;
                                                 SourceExpr=Amount;
                                                 AutoFormatType=1;
                                                 OnActivate=BEGIN
                                                              Amount := CalcAmount(FALSE,FALSE);
                                                            END;

                                                 OnFormat=BEGIN
                                                            FormatAmount(Text);
                                                            CurrForm.TotalAmount.UPDATEFONTBOLD("Show in Bold");
                                                          END;

                                                 OnDrillDown=BEGIN
                                                               DrillDown(FALSE);
                                                             END;
                                                              }
    { 25  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=24;
                                                 InColumnHeading=Yes }
    { 26  ;TextBox      ;13200;4400 ;6600 ;440  ;Name=CellAmount;
                                                 ParentControl=19;
                                                 InMatrix=Yes;
                                                 CaptionML=[ENU=CellAmount;
                                                            ESP=CellAmount];
                                                 BlankZero=Yes;
                                                 SourceExpr=MatrixAmount;
                                                 AutoFormatType=1;
                                                 OnFormat=BEGIN
                                                            FormatAmount(Text);
                                                            CurrForm.CellAmount.UPDATEFONTBOLD("Show in Bold" OR CurrForm.Matrix.MatrixRec."Show in Bold");
                                                          END;

                                                 OnAfterInput=BEGIN
                                                                Amount := CalcAmount(TRUE,FALSE);
                                                                EvaluateAmount(Text);
                                                              END;

                                                 OnValidate=BEGIN
                                                              IF InputError THEN BEGIN
                                                                ERROR(Text014,InputErrorText);
                                                                InputError := FALSE;
                                                                InputErrorText := '';
                                                              END;
                                                              DataAnalysis.TESTFIELD(Bloqueado,FALSE);
                                                            END;

                                                 OnDrillDown=BEGIN
                                                               DrillDown(TRUE);
                                                             END;

                                                 OnAfterValidate=VAR
                                                                   DataAnalysisEntry2@1103355003 : Record 7009914;
                                                                   ChangeLogMgt@1103355002 : Codeunit 423;
                                                                   RecRef@1103355005 : RecordRef;
                                                                   LogInsertion@1103355001 : Boolean;
                                                                   LastEntryNo2@1103355004 : Integer;
                                                                 BEGIN
                                                                   SetCommonFilters(DataAnalysisEntry);
                                                                   SetDimFilters(DataAnalysisEntry,0);
                                                                   SetDimFilters(DataAnalysisEntry,1);
                                                                   DataAnalysisEntry.SETCURRENTKEY(Fecha);
                                                                   DataAnalysisEntry.CALCSUMS(Valor);

                                                                   WITH DataAnalysisEntry DO BEGIN
                                                                     DataAnalysisEntry2.INIT;
                                                                     DataAnalysisEntry2."Cod. dato analitico" := DataAnalysisCode;
                                                                     DataAnalysisEntry2.Fecha := GetFirstDate(GETFILTER(Fecha));
                                                                     DataAnalysisEntry2."Cod. dimension 1" := GetFirstDimValue(1,GETFILTER("Cod. dimension 1"));
                                                                     DataAnalysisEntry2."Cod. dimension 2" := GetFirstDimValue(2,GETFILTER("Cod. dimension 2"));
                                                                     DataAnalysisEntry2."Cod. dimension 3" := GetFirstDimValue(3,GETFILTER("Cod. dimension 3"));
                                                                     DataAnalysisEntry2."Cod. dimension 4" := GetFirstDimValue(4,GETFILTER("Cod. dimension 4"));
                                                                     DataAnalysisEntry2.Valor := MatrixAmount-DataAnalysisEntry.Valor;
                                                                     DataAnalysisEntry2.INSERT(TRUE);
                                                                   END;

                                                                   Amount := CalcAmount(TRUE,TRUE);
                                                                   Amount := CalcAmount(FALSE,TRUE);
                                                                 END;
                                                                  }
    { 27  ;TextBox      ;14300;2530 ;1650 ;440  ;Name=MatrixHeader;
                                                 ParentControl=26;
                                                 InMatrixHeading=Yes;
                                                 CaptionML=[ENU=MatrixHeader;
                                                            ESP=MatrixHeader];
                                                 SourceExpr=MatrixHeader;
                                                 OnFormat=BEGIN
                                                            CurrForm.MatrixHeader.UPDATEFONTBOLD(CurrForm.Matrix.MatrixRec."Show in Bold");
                                                          END;

                                                 OnLookup=BEGIN
                                                            LookUpCode(ColumnDimOption,CurrForm.Matrix.MatrixRec.Code);
                                                          END;
                                                           }
    { 11  ;CommandButton;5610 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 BitmapPos=Center;
                                                 AutoRepeat=Yes;
                                                 Bitmap=16;
                                                 ToolTipML=[ENU=Next Period;
                                                            ESP=Periodo siguiente;
                                                            FRA=PÇriode suivante;
                                                            ITA=Periodo successivo];
                                                 OnPush=BEGIN
                                                          FindPeriod('>=');
                                                        END;
                                                         }
    { 12  ;CommandButton;5060 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 BitmapPos=Center;
                                                 AutoRepeat=Yes;
                                                 Bitmap=15;
                                                 ToolTipML=[ENU=Previous Period;
                                                            ESP=Periodo anterior;
                                                            FRA=PÇriode prÇcÇdente;
                                                            ITA=Periodo precedente];
                                                 OnPush=BEGIN
                                                          FindPeriod('<=');
                                                        END;
                                                         }
    { 13  ;OptionButton ;4290 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=19;
                                                 ToolTipML=[ENU=Balance at Date;
                                                            ESP=Saldo a la fecha;
                                                            FRA=Solde Ö la date;
                                                            ITA=Saldo alla data];
                                                 SourceExpr=AmountType;
                                                 OptionValue=Balance at Date;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 14  ;OptionButton ;3740 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=18;
                                                 ToolTipML=[ENU=Net Change;
                                                            ESP=Saldo periodo;
                                                            FRA=Solde pÇriode;
                                                            ITA=Saldo periodo];
                                                 SourceExpr=AmountType;
                                                 OptionValue=Net Change;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 15  ;OptionButton ;2970 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=14;
                                                 ToolTipML=[ENU=Accounting Period;
                                                            ESP=Periodo contable;
                                                            FRA=PÇriode comptable;
                                                            ITA=Periodo contabile;
                                                            PTG=Per°odo Contabil°stico];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Accounting Period;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 16  ;OptionButton ;2420 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=13;
                                                 ToolTipML=[ENU=Year;
                                                            ESP=A§o;
                                                            FRA=AnnÇe;
                                                            ITA=Anno;
                                                            PTG=ANO];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Year;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 40  ;OptionButton ;1870 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=12;
                                                 ToolTipML=[ENU=Quarter;
                                                            ESP=Trimestre;
                                                            FRA=Trimestre;
                                                            ITA=Trimestre;
                                                            PTG=Trimestre];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Quarter;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 41  ;OptionButton ;1320 ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=11;
                                                 ToolTipML=[ENU=Month;
                                                            ESP=Mes;
                                                            FRA=Mois;
                                                            ITA=Mese;
                                                            PTG=Màs];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Month;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 42  ;OptionButton ;770  ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=10;
                                                 ToolTipML=[ENU=Week;
                                                            ESP=Semana;
                                                            FRA=Semaine;
                                                            ITA=Settimana;
                                                            PTG=Semana];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Week;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 43  ;OptionButton ;220  ;9240 ;550  ;550  ;VertGlue=Bottom;
                                                 FocusOnClick=No;
                                                 ShowCaption=No;
                                                 Border=Yes;
                                                 BitmapPos=Center;
                                                 Bitmap=9;
                                                 ToolTipML=[ENU=Day;
                                                            ESP=D°a;
                                                            FRA=Jour;
                                                            ITA=Giorno;
                                                            PTG=Dia];
                                                 SourceExpr=PeriodType;
                                                 OptionValue=Day;
                                                 OnPush=BEGIN
                                                          FindPeriod('');
                                                        END;
                                                         }
    { 58  ;MenuButton   ;11660;9240 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=[ENU=Functions;
                                                            ESP=Acci&ones;
                                                            FRA=Acci&ones;
                                                            ITA=F&unzioni];
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=59;
                                                     CaptionML=[ENU=Reverse Lines and Columns;
                                                                ESP=Invertir l°neas y columnas;
                                                                FRA=Inverser lignes et colonnes;
                                                                ITA=Inverti righe e colonne];
                                                     OnPush=VAR
                                                              TempDimCode@1001 : Text[30];
                                                            BEGIN
                                                              TempDimCode := ColumnDimCode;
                                                              ColumnDimCode := LineDimCode;
                                                              LineDimCode := TempDimCode;
                                                              ValidateLineDimCode;
                                                              ValidateColumnDimCode;
                                                            END;
                                                             }
                                                 }
                                                  }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Period;ESP=Periodo;FRA=PÇriode;ITA=Periodo;PTG=PER÷ODO';
      Text001@1001 : TextConst 'ENU=<Sign><Integer Thousand><Decimals,2>;ESP=<Sign><Integer Thousand><Decimals,2>;FRA=<Sign><Integer Thousand><Decimals,2>;ITA=<Sign><Integer Thousand><Decimals,2>';
      Text002@1002 : TextConst 'ENU=You have not yet defined an analysis data.;ESP=No tiene a£n definido un dato anal°tico.;FRA=Aucune donnÇe analytique n''a ÇtÇ dÇfinie.';
      Text003@1003 : TextConst 'ENU=%1 is not a valid line definition.;ESP=%1 no es una def. de l°nea v†lida.;FRA=%1 n''est pas une dÇf. de ligne valable.;ITA=%1 non ä una definizione valida di riga.';
      Text004@1004 : TextConst 'ENU=%1 is not a valid column definition.;ESP=%1 no es una def. de columna v†lida.;FRA=%1 n''est pas une dÇf. de colonne valable.;ITA=%1 non ä una definizione valida di colonna.';
      Text005@1005 : TextConst 'ENU=1,6,,Dimension 1 Filter;ESP=1,6,,Filtro dimensi¢n 1;FRA=1,6,,Filtre dimension 1;ITA=1,6,,Filtro dimensione 1';
      Text006@1006 : TextConst 'ENU=1,6,,Dimension 2 Filter;ESP=1,6,,Filtro dimensi¢n 2;FRA=1,6,,Filtre dimension 2;ITA=1,6,,Filtro dimensione 2';
      Text007@1007 : TextConst 'ENU=1,6,,Dimension 3 Filter;ESP=1,6,,Filtro dimensi¢n 3;FRA=1,6,,Filtre dimension 3;ITA=1,6,,Filtro dimensione 3';
      Text008@1008 : TextConst 'ENU=1,6,,Dimension 4 Filter;ESP=1,6,,Filtro dimensi¢n 4;FRA=1,6,,Filtre dimension 4;ITA=1,6,,Filtro dimensione 4';
      DataAnalysis@1011 : Record 7009911;
      DataAnalysisEntry@1012 : Record 7009914;
      AVBreakdownBuffer@1103355004 : TEMPORARY Record 375;
      DataAnalysisCode@1016 : Code[10];
      LineDimOption@1017 : 'Period,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      ColumnDimOption@1018 : 'Period,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      LineDimCode@1019 : Text[30];
      ColumnDimCode@1020 : Text[30];
      PeriodType@1021 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      AmountType@1022 : 'Net Change,Balance at Date';
      RoundingFactor@1023 : 'None,1,1000,1000000';
      ClosingEntryFilter@1028 : 'Include,Exclude';
      ShowColumnName@1029 : Boolean;
      DateFilter@1030 : Text[250];
      InternalDateFilter@1031 : Text[250];
      ExcludeClosingDateFilter@1032 : Text[250];
      Dim1Filter@1035 : Code[250];
      Dim2Filter@1036 : Code[250];
      Dim3Filter@1037 : Code[250];
      Dim4Filter@1038 : Code[250];
      MatrixHeader@1039 : Text[50];
      MatrixAmount@1040 : Decimal;
      PeriodInitialized@1041 : Boolean;
      Text010@1103355000 : TextConst 'ENU=Dimension 1;ESP=Dimensi¢n 1;FRA=Dimension 1';
      Text011@1103355001 : TextConst 'ENU=Dimension 2;ESP=Dimensi¢n 2;FRA=Dimension 2';
      Text012@1103355002 : TextConst 'ENU=Dimension 3;ESP=Dimensi¢n 3;FRA=Dimension 3';
      Text013@1103355003 : TextConst 'ENU=Dimension 4;ESP=Dimensi¢n 4;FRA=Dimension 4';
      InputError@1103355006 : Boolean;
      InputErrorText@1103355005 : Text[250];
      Text014@1103355007 : TextConst 'ENU=You cannot enter %1 in the amount field.;ESP=No puede introd. %1 en el campo importe.;FRA=Vous ne pouvez pas saisir %1 sur le champ montant.;ITA=Non puoi inserire %1 nel campo importo.';

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      BusUnit@1001 : Record 220;
    BEGIN
      CASE DimCode OF
        '' :
          EXIT(-1);
        Text000 :
          EXIT(0);
        Text010 :
          EXIT(1);
        Text011 :
          EXIT(2);
        Text012 :
          EXIT(3);
        Text013 :
          EXIT(4);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : 'Period,Dimension 1,Dimension 2,Dimension 3,Dimension 4';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250]) : Boolean;
    VAR
      Period@1005 : Record 2000000007;
      DimVal@1006 : Record 7009913;
      PeriodFormMgt@1007 : Codeunit 359;
      Found@1008 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::Period :
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            Period."Period Start" := DimCodeBuf."Period Start";
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF NOT PeriodInitialized AND (InternalDateFilter <> '') THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Dimension 1" :
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Codigo,Dim1Filter);
            DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
            DimVal.SETRANGE(Dimension,DimVal.Dimension::"Dimension 1");
            DimVal."Cod. dato analitico" := DataAnalysisCode;
            DimVal.Dimension := DimVal.Dimension::"Dimension 1";
            DimVal.Codigo := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2" :
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Codigo,Dim2Filter);
            DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
            DimVal.SETRANGE(Dimension,DimVal.Dimension::"Dimension 2");
            DimVal."Cod. dato analitico" := DataAnalysisCode;
            DimVal.Dimension := DimVal.Dimension::"Dimension 2";
            DimVal.Codigo := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3" :
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Codigo,Dim3Filter);
            DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
            DimVal.SETRANGE(Dimension,DimVal.Dimension::"Dimension 3");
            DimVal."Cod. dato analitico" := DataAnalysisCode;
            DimVal.Dimension := DimVal.Dimension::"Dimension 3";
            DimVal.Codigo := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 4" :
          BEGIN
            IF Dim4Filter <> '' THEN
              DimVal.SETFILTER(Codigo,Dim4Filter);
            DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
            DimVal.SETRANGE(Dimension,DimVal.Dimension::"Dimension 4");
            DimVal."Cod. dato analitico" := DataAnalysisCode;
            DimVal.Dimension := DimVal.Dimension::"Dimension 4";
            DimVal.Codigo := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@60(DimOption@1000 : 'Period,Dimension 1,Dimension 2,Dimension 3,Dimension 4';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer) : Integer;
    VAR
      Period@1005 : Record 2000000007;
      DimVal@1006 : Record 7009913;
      PeriodFormMgt@1007 : Codeunit 359;
      ResultSteps@1008 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::Period :
          BEGIN
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            IF ResultSteps <> 0 THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Dimension 1" :
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Codigo,Dim1Filter);
            DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
            DimVal.SETRANGE(Dimension,DimVal.Dimension::"Dimension 1");
            DimVal."Cod. dato analitico" := DataAnalysisCode;
            DimVal.Dimension := DimVal.Dimension::"Dimension 1";
            DimVal.Codigo := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2" :
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Codigo,Dim2Filter);
            DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
            DimVal.SETRANGE(Dimension,DimVal.Dimension::"Dimension 2");
            DimVal."Cod. dato analitico" := DataAnalysisCode;
            DimVal.Dimension := DimVal.Dimension::"Dimension 2";
            DimVal.Codigo := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3" :
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Codigo,Dim3Filter);
            DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
            DimVal.SETRANGE(Dimension,DimVal.Dimension::"Dimension 3");
            DimVal."Cod. dato analitico" := DataAnalysisCode;
            DimVal.Dimension := DimVal.Dimension::"Dimension 3";
            DimVal.Codigo := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 4" :
          BEGIN
            IF Dim4Filter <> '' THEN
              DimVal.SETFILTER(Codigo,Dim4Filter);
            DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
            DimVal.SETRANGE(Dimension,DimVal.Dimension::"Dimension 4");
            DimVal."Cod. dato analitico" := DataAnalysisCode;
            DimVal.Dimension := DimVal.Dimension::"Dimension 4";
            DimVal.Codigo := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR ThePeriod@1000 : Record 2000000007;VAR TheDimCodeBuf@1001 : Record 367);
    VAR
      Period2@1002 : Record 2000000007;
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          "Period End" := CLOSINGDATE(ThePeriod."Period End")
        ELSE
          "Period End" := ThePeriod."Period End";
        IF DateFilter <> '' THEN BEGIN
          Period2.SETFILTER("Period End",DateFilter);
          IF Period2.GETRANGEMAX("Period End") < "Period End" THEN
            "Period End" := Period2.GETRANGEMAX("Period End");
        END;
        Name := ThePeriod."Period Name";
      END;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimVal@1000 : Record 7009913;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheDimVal.Codigo;
        Name := TheDimVal.Descripcion;
      END;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      IF PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType) THEN
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          Calendar."Period End" := CLOSINGDATE(Calendar."Period End");
      IF AmountType = AmountType::"Net Change" THEN BEGIN
        DataAnalysisEntry.SETRANGE(Fecha,Calendar."Period Start",Calendar."Period End");
        IF DataAnalysisEntry.GETRANGEMIN(Fecha) = DataAnalysisEntry.GETRANGEMAX(Fecha) THEN
          DataAnalysisEntry.SETRANGE(Fecha,DataAnalysisEntry.GETRANGEMIN(Fecha));
      END ELSE
        DataAnalysisEntry.SETRANGE(Fecha,0D,Calendar."Period End");

      InternalDateFilter := DataAnalysisEntry.GETFILTER(Fecha);
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN
        DateFilter := InternalDateFilter;
      AVBreakdownBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE CalculateClosingDateFilter@45();
    VAR
      AccountingPeriod@1000 : Record 50;
      FirstRec@1001 : Boolean;
    BEGIN
      IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
        ExcludeClosingDateFilter := ''
      ELSE BEGIN
        AccountingPeriod.SETCURRENTKEY("New Fiscal Year");
        AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
        FirstRec := TRUE;
        IF AccountingPeriod.FIND('-') THEN
          REPEAT
            IF FirstRec THEN
              ExcludeClosingDateFilter :=
                STRSUBSTNO('<>%1',CLOSINGDATE(AccountingPeriod."Starting Date" - 1))
            ELSE
              ExcludeClosingDateFilter :=
                ExcludeClosingDateFilter + STRSUBSTNO('&<>%1',CLOSINGDATE(AccountingPeriod."Starting Date" - 1));
            FirstRec := FALSE;
          UNTIL AccountingPeriod.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FormatAmount@6(VAR Text@1000 : Text[250]);
    VAR
      Amount@1001 : Decimal;
    BEGIN
      IF Text = '' THEN
        EXIT;

      EVALUATE(Amount,Text);

      IF RoundingFactor = RoundingFactor::None THEN
        EXIT;

      CASE RoundingFactor OF
        RoundingFactor::"1":
          Amount := ROUND(Amount,1);
        RoundingFactor::"1000":
          Amount := ROUND(Amount / 1000,0.1);
        RoundingFactor::"1000000":
          Amount := ROUND(Amount / 1000000,0.1);
      END;
      IF Amount = 0 THEN
        Text := ''
      ELSE
        CASE RoundingFactor OF
          RoundingFactor::"1":
            Text := FORMAT(Amount);
          RoundingFactor::"1000",RoundingFactor::"1000000":
            Text := FORMAT(Amount,0,Text001);
        END;
    END;

    LOCAL PROCEDURE GetDimSelection@3(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      DimSelection@1001 : Form 568;
    BEGIN
      DimSelection.InsertDimSelBuf(FALSE,Text000,Text000);
      IF FoundDimensions(1) THEN
        DimSelection.InsertDimSelBuf(FALSE,Text010,'');
      IF FoundDimensions(2) THEN
        DimSelection.InsertDimSelBuf(FALSE,Text011,'');
      IF FoundDimensions(3) THEN
        DimSelection.InsertDimSelBuf(FALSE,Text012,'');
      IF FoundDimensions(4) THEN
        DimSelection.InsertDimSelBuf(FALSE,Text013,'');

      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode)
      ELSE
        EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE LookUpCode@4(DimOption@1000 : 'Period,Dimension 1,Dimension 2,Dimension 3,Dimension 4';Code@1002 : Text[30]);
    VAR
      DimVal@1005 : Record 7009913;
      DimValList@1006 : Form 7009761;
    BEGIN
      CASE DimOption OF
        DimOption::"Dimension 1",DimOption::"Dimension 2",
        DimOption::"Dimension 3",DimOption::"Dimension 4" :
          BEGIN
            DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
            DimVal.SETRANGE(Dimension, DimOption-1);
            DimVal.GET(DataAnalysisCode, DimOption-1, Code);
            DimValList.SETTABLEVIEW(DimVal);
            DimValList.SETRECORD(DimVal);
            DimValList.RUNMODAL;
          END;
      END;
    END;

    LOCAL PROCEDURE LookUpDimFilter@57(Dim@1000 : Text[30];VAR Text@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record 7009913;
      DimValList@1003 : Form 7009761;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
      CASE Dim OF
        Text010: DimVal.SETRANGE(Dimension, DimVal.Dimension::"Dimension 1");
        Text011: DimVal.SETRANGE(Dimension, DimVal.Dimension::"Dimension 2");
        Text012: DimVal.SETRANGE(Dimension, DimVal.Dimension::"Dimension 3");
        Text013: DimVal.SETRANGE(Dimension, DimVal.Dimension::"Dimension 4");
      END;
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE)
    END;

    LOCAL PROCEDURE SetCommonFilters@15(VAR TheDataAnalysisEntry@1000 : Record 7009914);
    VAR
      DateFilter2@1001 : Text[1024];
    BEGIN
      WITH TheDataAnalysisEntry DO BEGIN
        IF DateFilter = '' THEN
          DateFilter2 := ExcludeClosingDateFilter
        ELSE BEGIN
          IF AmountType = AmountType::"Net Change" THEN BEGIN
            DateFilter2 := DateFilter;
          END ELSE BEGIN
            SETFILTER(Fecha,DateFilter);
            DateFilter2 := STRSUBSTNO('..%1',GETRANGEMAX(Fecha));
          END;
          IF ExcludeClosingDateFilter <> '' THEN
            DateFilter2 := DateFilter2 + '&' + ExcludeClosingDateFilter;
        END;
        RESET;
        SETRANGE("Cod. dato analitico",DataAnalysis.Codigo);
        SETFILTER(Fecha,DateFilter2);
        IF Dim1Filter <> '' THEN
          SETFILTER("Cod. dimension 1",Dim1Filter);
        IF Dim2Filter <> '' THEN
          SETFILTER("Cod. dimension 2",Dim2Filter);
        IF Dim3Filter <> '' THEN
          SETFILTER("Cod. dimension 3",Dim3Filter);
        IF Dim4Filter <> '' THEN
          SETFILTER("Cod. dimension 4",Dim4Filter);
        SETPERMISSIONFILTER;
      END;
    END;

    LOCAL PROCEDURE SetDimFilters@17(VAR TheDataAnalysisEntry@1000 : Record 7009914;LineOrColumn@1001 : 'Line,Column');
    VAR
      DimOption@1002 : 'Period,Dimension 1,Dimension 2,Dimension 3,Dimension 4';
      DimCodeBuf@1003 : Record 367;
    BEGIN
      IF LineOrColumn = LineOrColumn::Line THEN BEGIN
        DimCodeBuf := Rec;
        DimOption := LineDimOption;
      END ELSE BEGIN
        DimCodeBuf := CurrForm.Matrix.MatrixRec;
        DimOption := ColumnDimOption;
      END;
      CASE DimOption OF
        DimOption::Period :
          BEGIN
            IF AmountType = AmountType::"Net Change" THEN
              TheDataAnalysisEntry.SETRANGE(
                Fecha,DimCodeBuf."Period Start",DimCodeBuf."Period End")
            ELSE
              TheDataAnalysisEntry.SETRANGE(Fecha,0D,DimCodeBuf."Period End");
            IF (ClosingEntryFilter = ClosingEntryFilter::Exclude) AND (ExcludeClosingDateFilter <> '') THEN
              TheDataAnalysisEntry.SETFILTER(
                Fecha,TheDataAnalysisEntry.GETFILTER(Fecha) +
                '&' + ExcludeClosingDateFilter);
          END;
        DimOption::"Dimension 1" :
          TheDataAnalysisEntry.SETRANGE("Cod. dimension 1",DimCodeBuf.Code);
        DimOption::"Dimension 2" :
          TheDataAnalysisEntry.SETRANGE("Cod. dimension 2",DimCodeBuf.Code);
        DimOption::"Dimension 3" :
          TheDataAnalysisEntry.SETRANGE("Cod. dimension 3",DimCodeBuf.Code);
        DimOption::"Dimension 4" :
          TheDataAnalysisEntry.SETRANGE("Cod. dimension 4",DimCodeBuf.Code);
      END;
      TheDataAnalysisEntry.SETPERMISSIONFILTER;
    END;

    LOCAL PROCEDURE DrillDown@30(SetColFilter@1000 : Boolean);
    BEGIN
      SetCommonFilters(DataAnalysisEntry);
      SetDimFilters(DataAnalysisEntry,0);
      IF SetColFilter THEN
        SetDimFilters(DataAnalysisEntry,1);
      FORM.RUN(FORM::"Movs. dato anal°tico",DataAnalysisEntry);
    END;

    LOCAL PROCEDURE ValidateDataAnalysisCode@11();
    BEGIN
      DataAnalysis.Codigo := DataAnalysisCode;
      IF NOT DataAnalysis.FIND('=<>') THEN
        ERROR(Text002);
      DataAnalysisCode := DataAnalysis.Codigo;

      CurrForm.CellAmount.EDITABLE := DataAnalysis.Tipo = DataAnalysis.Tipo::Manual;

      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';
      Dim4Filter := '';
      SETPERMISSIONFILTER;
      Dim1Filter := GETFILTER("Dimension 1 Value Filter");
      Dim2Filter := GETFILTER("Dimension 2 Value Filter");
      Dim3Filter := GETFILTER("Dimension 3 Value Filter");
      Dim4Filter := GETFILTER("Dimension 4 Value Filter");

      CurrForm.Dim1Filter.ENABLED :=
        FoundDimensions(1) AND
        (GETFILTER("Dimension 1 Value Filter") = '');
      CurrForm.Dim2Filter.ENABLED :=
        FoundDimensions(2) AND
        (GETFILTER("Dimension 2 Value Filter") = '');
      CurrForm.Dim3Filter.ENABLED :=
        FoundDimensions(3) AND
        (GETFILTER("Dimension 3 Value Filter") = '');
      CurrForm.Dim4Filter.ENABLED :=
        FoundDimensions(4) AND
        (GETFILTER("Dimension 4 Value Filter") = '');
    END;

    LOCAL PROCEDURE ValidateLineDimCode@19();
    BEGIN
      IF (UPPERCASE(LineDimCode) <> UPPERCASE(Text000)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text010)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text011)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text012)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text013)) AND
         (LineDimCode <> '') THEN BEGIN
        MESSAGE(Text003,LineDimCode);
        LineDimCode := '';
      END;
      LineDimOption := DimCodeToOption(LineDimCode);
      InternalDateFilter := DataAnalysisEntry.GETFILTER(Fecha);
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    BEGIN
      IF (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text000)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text010)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text011)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text012)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text013)) AND
         (ColumnDimCode <> '') THEN BEGIN
        MESSAGE(Text004,ColumnDimCode);
        ColumnDimCode := '';
      END;
      ColumnDimOption := DimCodeToOption(ColumnDimCode);
      InternalDateFilter := DataAnalysisEntry.GETFILTER(Fecha);
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    LOCAL PROCEDURE CalcAmount@27(SetColFilter@1000 : Boolean;Recalculate@1103355000 : Boolean) : Decimal;
    VAR
      Amount@1001 : Decimal;
      ColumnCode@1002 : Code[20];
    BEGIN
      IF SetColFilter THEN
        ColumnCode := CurrForm.Matrix.MatrixRec.Code
      ELSE
        ColumnCode := '';

      IF AVBreakdownBuffer.GET(Code,ColumnCode) THEN
        IF Recalculate THEN
          AVBreakdownBuffer.DELETE
        ELSE
          EXIT(AVBreakdownBuffer.Amount);

      Amount := CalcActualAmount(SetColFilter);

      AVBreakdownBuffer."Line Code" := Code;
      AVBreakdownBuffer."Column Code" := ColumnCode;
      AVBreakdownBuffer.Amount := Amount;
      AVBreakdownBuffer.INSERT;

      EXIT(Amount);
    END;

    LOCAL PROCEDURE CalcActualAmount@7(SetColFilter@1000 : Boolean) : Decimal;
    VAR
      Amount@1001 : Decimal;
    BEGIN
      DataAnalysisEntry.RESET;
      SetCommonFilters(DataAnalysisEntry);
      SetDimFilters(DataAnalysisEntry,0);
      IF SetColFilter THEN
        SetDimFilters(DataAnalysisEntry,1);

      DataAnalysisEntry.SETCURRENTKEY(Fecha);
      DataAnalysisEntry.CALCSUMS(Valor);
      EXIT(DataAnalysisEntry.Valor);
    END;

    LOCAL PROCEDURE EvaluateAmount@1103355000(VAR Text@1000 : Text[250]);
    VAR
      Amount@1001 : Decimal;
    BEGIN
      IF DELCHR(Text) IN ['','-'] THEN
        Text := '0';
      IF Text[STRLEN(Text)] = '-' THEN
        Text := '-' + COPYSTR(Text,1,STRLEN(Text) - 1);
      InputError := NOT EVALUATE(Amount,Text);
      IF InputError THEN
        InputErrorText := Text
      ELSE
        CASE RoundingFactor OF
          RoundingFactor::"1000":
            Amount := Amount * 1000;
          RoundingFactor::"1000000":
            Amount := Amount * 1000000;
        END;
      Text := FORMAT(Amount);
    END;

    PROCEDURE FoundDimensions@1103355001(DimNo@1103355000 : Integer) : Boolean;
    VAR
      DimVal@1103355001 : Record 7009913;
    BEGIN
      DimVal.SETRANGE("Cod. dato analitico", DataAnalysisCode);
      DimVal.SETRANGE(Dimension, DimNo-1);
      EXIT(DimVal.FIND('-'));
    END;

    LOCAL PROCEDURE GetFirstDate@1(DateFilter@1001 : Text[250]) : Date;
    VAR
      Period@1002 : Record 2000000007;
    BEGIN
      IF DateFilter = '' THEN
        EXIT(0D);
      WITH Period DO BEGIN
        Period.SETRANGE("Period Type","Period Type"::Date);
        SETFILTER("Period Start",DateFilter);
        IF FIND('-') THEN
          EXIT("Period Start")
        ELSE
          EXIT(0D);
      END;
    END;

    LOCAL PROCEDURE GetFirstDimValue@1103355002(DimNo@1000 : Integer;DimValFilter@1001 : Text[250]) : Code[20];
    VAR
      DimVal@1002 : Record 7009913;
    BEGIN
      IF (DimNo = 0) OR (DimValFilter = '') THEN
        EXIT('');
      WITH DimVal DO BEGIN
        SETRANGE("Cod. dato analitico", DataAnalysisCode);
        SETRANGE(Dimension, DimNo-1);
        SETFILTER(Codigo,DimValFilter);
        IF FIND('-') THEN
          EXIT(Codigo)
        ELSE
          EXIT('');
      END;
    END;

    BEGIN
    {
      001 04/05/12 PLB: En la funci¢n DimCodeToOption cambiado el par†metro de code a text ya que en NAV6.0 no funcionaba
                        correctamente.
    }
    END.
  }
}
