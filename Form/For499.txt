OBJECT Form 499 Available - Sales Lines
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    Permissions=TableData 37=rm;
    Width=14080;
    Height=6710;
    Editable=No;
    CaptionML=[ENU=Available - Sales Lines;
               ESP=Disponible - L¡ns. venta];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    TableBoxID=1;
    LinksAllowed=No;
    SourceTable=Table37;
    DataCaptionExpr=CaptionText;
    SourceTableView=SORTING(Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date);
    OnOpenForm=BEGIN
                 ReservEntry.TESTFIELD("Source Type");

                 SETRANGE("Document Type",CurrentSubType);
                 SETRANGE(Type,Type::Item);
                 SETRANGE("No.",ReservEntry."Item No.");
                 SETRANGE("Variant Code",ReservEntry."Variant Code");
                 SETRANGE("Job No.",'');
                 SETRANGE("Drop Shipment",FALSE);
                 SETRANGE("Location Code",ReservEntry."Location Code");

                 SETFILTER("Shipment Date",ReservMgt.GetAvailabilityFilter(ReservEntry."Shipment Date"));

                 CASE CurrentSubType OF
                   0,1,2,4:
                     IF ReservMgt.IsPositive() THEN
                       SETFILTER("Quantity (Base)",'<0')
                     ELSE
                       SETFILTER("Quantity (Base)",'>0');
                   3,5:
                     IF NOT ReservMgt.IsPositive() THEN
                       SETFILTER("Quantity (Base)",'<0')
                     ELSE
                       SETFILTER("Quantity (Base)",'>0');
                 END;
               END;

    OnAfterGetRecord=BEGIN
                       ReservMgt.SalesLineUpdateValues(Rec,QtyToReserve,QtyReservedThisLine);
                     END;

  }
  CONTROLS
  {
    { 1   ;TableBox     ;220  ;220  ;13640;5500 ;HorzGlue=Both;
                                                 VertGlue=Both }
    { 2   ;TextBox      ;0    ;0    ;550  ;0    ;ParentControl=1;
                                                 InColumn=Yes;
                                                 SourceExpr="Document Type" }
    { 3   ;Label        ;0    ;0    ;0    ;0    ;ParentControl=2;
                                                 InColumnHeading=Yes }
    { 4   ;TextBox      ;0    ;0    ;1650 ;0    ;ParentControl=1;
                                                 InColumn=Yes;
                                                 SourceExpr="Document No." }
    { 5   ;Label        ;0    ;0    ;0    ;0    ;ParentControl=4;
                                                 InColumnHeading=Yes }
    { 6   ;TextBox      ;0    ;0    ;1650 ;0    ;ParentControl=1;
                                                 InColumn=Yes;
                                                 SourceExpr="Location Code" }
    { 7   ;Label        ;0    ;0    ;0    ;0    ;ParentControl=6;
                                                 InColumnHeading=Yes }
    { 8   ;TextBox      ;0    ;0    ;1650 ;0    ;ParentControl=1;
                                                 InColumn=Yes;
                                                 SourceExpr="Shipment Date" }
    { 9   ;Label        ;0    ;0    ;0    ;0    ;ParentControl=8;
                                                 InColumnHeading=Yes }
    { 10  ;TextBox      ;0    ;0    ;1650 ;0    ;ParentControl=1;
                                                 InColumn=Yes;
                                                 SourceExpr="Outstanding Qty. (Base)" }
    { 11  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=10;
                                                 InColumnHeading=Yes }
    { 12  ;TextBox      ;0    ;0    ;1650 ;0    ;Editable=No;
                                                 ParentControl=1;
                                                 InColumn=Yes;
                                                 SourceExpr="Reserved Qty. (Base)";
                                                 OnDeactivate=BEGIN
                                                                CurrForm.UPDATE;
                                                              END;
                                                               }
    { 13  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=12;
                                                 InColumnHeading=Yes }
    { 17  ;TextBox      ;9366 ;1980 ;1650 ;440  ;Editable=No;
                                                 ParentControl=1;
                                                 InColumn=Yes;
                                                 CaptionML=[ENU=Available Quantity;
                                                            ESP=Cdad. disponible];
                                                 DecimalPlaces=0:5;
                                                 SourceExpr=QtyToReserve }
    { 18  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=17;
                                                 InColumnHeading=Yes }
    { 19  ;TextBox      ;12885;3410 ;1650 ;440  ;ParentControl=1;
                                                 InColumn=Yes;
                                                 CaptionML=[ENU=Current Reserved Quantity;
                                                            ESP=Cdad. reservada actualmente];
                                                 DecimalPlaces=0:5;
                                                 SourceExpr=ReservedThisLine;
                                                 OnDrillDown=BEGIN
                                                               ReservEntry2.RESET;
                                                               ReserveSalesLine.FilterReservFor(ReservEntry2,Rec);
                                                               ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
                                                               ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry);
                                                               FORM.RUNMODAL(FORM::"Reservation Entries",ReservEntry2);
                                                               UpdateReservFrom;
                                                               CurrForm.UPDATE;
                                                             END;
                                                              }
    { 20  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=19;
                                                 InColumnHeading=Yes }
    { 25  ;TextBox      ;4710 ;440  ;1700 ;440  ;Visible=No;
                                                 ParentControl=1;
                                                 InColumn=Yes;
                                                 SourceExpr="Work Type Code" }
    { 26  ;Label        ;0    ;0    ;0    ;0    ;ParentControl=25;
                                                 InColumnHeading=Yes }
    { 14  ;CommandButton;4400 ;5940 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Default=Yes;
                                                 PushAction=LookupOK;
                                                 InvalidActionAppearance=Hide }
    { 15  ;CommandButton;6820 ;5940 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 Cancel=Yes;
                                                 PushAction=LookupCancel;
                                                 InvalidActionAppearance=Hide }
    { 16  ;CommandButton;11660;5940 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 PushAction=FormHelp }
    { 21  ;MenuButton   ;9240 ;5940 ;2200 ;550  ;HorzGlue=Right;
                                                 VertGlue=Bottom;
                                                 CaptionML=[ENU=F&unctions;
                                                            ESP=Acci&ones];
                                                 Menu=MENUITEMS
                                                 {
                                                   { ID=22;
                                                     CaptionML=[ENU=&Reserve;
                                                                ESP=&Reservar];
                                                     OnPush=BEGIN
                                                              ReservEntry.LOCKTABLE;
                                                              UpdateReservMgt;
                                                              ReservMgt.SalesLineUpdateValues(Rec,QtyToReserve,QtyReservedThisLine);
                                                              NewQtyReservedThisLine := ReservMgt.CalculateRemainingQty;
                                                              ReservMgt.CopySign(NewQtyReservedThisLine,QtyToReserve);
                                                              IF NewQtyReservedThisLine <> 0 THEN
                                                                IF ABS(NewQtyReservedThisLine) > ABS(QtyToReserve) THEN
                                                                  CreateReservation(QtyToReserve)
                                                                ELSE
                                                                  CreateReservation(NewQtyReservedThisLine)
                                                              ELSE
                                                                ERROR(Text000);
                                                            END;
                                                             }
                                                   { ID=23;
                                                     CaptionML=[ENU=&Cancel Reservation;
                                                                ESP=&Cancelar reserva];
                                                     OnPush=BEGIN
                                                              IF NOT CONFIRM(Text001,FALSE) THEN
                                                                EXIT;

                                                              ReservEntry2.COPY(ReservEntry);
                                                              ReserveSalesLine.FilterReservFor(ReservEntry2,Rec);

                                                              IF ReservEntry2.FIND('-') THEN BEGIN
                                                                UpdateReservMgt;
                                                                REPEAT
                                                                  ReservEngineMgt.CloseReservEntry2(ReservEntry2);
                                                                UNTIL ReservEntry2.NEXT = 0;

                                                                UpdateReservFrom;
                                                              END;
                                                            END;
                                                             }
                                                   { ID=24;
                                                     ShortCutKey=May£s+F5;
                                                     CaptionML=[ENU=&Show Document;
                                                                ESP=&Mostrar documento];
                                                     OnPush=BEGIN
                                                              SalesHeader.GET("Document Type","Document No.");
                                                              CASE "Document Type" OF
                                                                "Document Type"::Quote:
                                                                  FORM.RUN(FORM::"Sales Quote",SalesHeader);
                                                                "Document Type"::Order:
                                                                  FORM.RUN(FORM::"Sales Order",SalesHeader);
                                                                "Document Type"::Invoice:
                                                                  FORM.RUN(FORM::"Sales Invoice",SalesHeader);
                                                                "Document Type"::"Return Order":
                                                                  FORM.RUN(FORM::"Sales Return Order",SalesHeader);
                                                                "Document Type"::"Credit Memo":
                                                                  FORM.RUN(FORM::"Sales Credit Memo",SalesHeader);
                                                                "Document Type"::"Blanket Order":
                                                                  FORM.RUN(FORM::"Blanket Sales Order",SalesHeader);
                                                              END;
                                                            END;
                                                             }
                                                 }
                                                  }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Fully reserved.;ESP=Completamente reservado/a.';
      Text001@1001 : TextConst 'ENU=Cancel reservation?;ESP=¨Confirma que desea cancelar la/s reserva/s?';
      Text003@1002 : TextConst 'ENU=Available Quantity is %1.;ESP=La cantidad disponible es %1.';
      ReservEntry@1003 : Record 337;
      ReservEntry2@1004 : Record 337;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      PurchLine@1007 : Record 39;
      ItemJnlLine@1008 : Record 83;
      ReqLine@1009 : Record 246;
      ProdOrderLine@1010 : Record 5406;
      ProdOrderComp@1011 : Record 5407;
      PlanningComponent@1012 : Record 99000829;
      ServiceInvLine@1013 : Record 5902;
      TransLine@1014 : Record 5741;
      ReservMgt@1015 : Codeunit 99000845;
      ReservEngineMgt@1016 : Codeunit 99000831;
      ReserveSalesLine@1017 : Codeunit 99000832;
      ReserveReqLine@1018 : Codeunit 99000833;
      ReservePurchLine@1019 : Codeunit 99000834;
      ReserveItemJnlLine@1020 : Codeunit 99000835;
      ReserveProdOrderLine@1021 : Codeunit 99000837;
      ReserveProdOrderComp@1022 : Codeunit 99000838;
      ReservePlanningComponent@1023 : Codeunit 99000840;
      ReserveServiceInvLine@1024 : Codeunit 99000842;
      ReserveTransLine@1025 : Codeunit 99000836;
      QtyToReserve@1026 : Decimal;
      QtyReservedThisLine@1027 : Decimal;
      NewQtyReservedThisLine@1028 : Decimal;
      CaptionText@1029 : Text[80];
      CurrentSubType@1030 : Option;

    PROCEDURE SetSalesLine@1(VAR CurrentSalesLine@1000 : Record 37;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      SalesLine := CurrentSalesLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetSalesLine(SalesLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);
      CaptionText := ReserveSalesLine.Caption(SalesLine);
    END;

    PROCEDURE SetReqLine@2(VAR CurrentReqLine@1000 : Record 246;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ReqLine := CurrentReqLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetReqLine(ReqLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveReqLine.FilterReservFor(ReservEntry,ReqLine);
      CaptionText := ReserveReqLine.Caption(ReqLine);
    END;

    PROCEDURE SetPurchLine@3(VAR CurrentPurchLine@1000 : Record 39;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      PurchLine := CurrentPurchLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPurchLine(PurchLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReservePurchLine.FilterReservFor(ReservEntry,PurchLine);
      CaptionText := ReservePurchLine.Caption(PurchLine);
    END;

    PROCEDURE SetItemJnlLine@4(VAR CurrentItemJnlLine@1000 : Record 83;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ItemJnlLine := CurrentItemJnlLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetItemJnlLine(ItemJnlLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveItemJnlLine.FilterReservFor(ReservEntry,ItemJnlLine);
      CaptionText := ReserveItemJnlLine.Caption(ItemJnlLine);
    END;

    PROCEDURE SetProdOrderLine@16(VAR CurrentProdOrderLine@1000 : Record 5406;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ProdOrderLine := CurrentProdOrderLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
    END;

    PROCEDURE SetProdOrderComponent@15(VAR CurrentProdOrderComp@1000 : Record 5407;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ProdOrderComp := CurrentProdOrderComp;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
    END;

    PROCEDURE SetPlanningComponent@13(VAR CurrentPlanningComponent@1000 : Record 99000829;CurrentReservEntry@1001 : Record 337);
    BEGIN
      PlanningComponent := CurrentPlanningComponent;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanningComponent);
      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
    END;

    PROCEDURE SetTransferLine@14(VAR CurrentTransLine@1000 : Record 5741;CurrentReservEntry@1001 : Record 337;Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TransLine := CurrentTransLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,Direction);
      CaptionText := ReserveTransLine.Caption(TransLine);
    END;

    PROCEDURE SetServiceInvLine@8(VAR CurrentServiceInvLine@1000 : Record 5902;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentServiceInvLine.TESTFIELD(Type,CurrentServiceInvLine.Type::Item);
      ServiceInvLine := CurrentServiceInvLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetServLine(ServiceInvLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveServiceInvLine.FilterReservFor(ReservEntry,ServiceInvLine);
      CaptionText := ReserveServiceInvLine.Caption(ServiceInvLine);
    END;

    PROCEDURE CreateReservation@6(ReserveQuantity@1000 : Decimal);
    BEGIN
      IF ABS("Outstanding Qty. (Base)") + "Reserved Qty. (Base)" < ReserveQuantity THEN
        ERROR(Text003,ABS("Outstanding Qty. (Base)") + "Reserved Qty. (Base)");

      TESTFIELD("Job No.",'');
      TESTFIELD("Drop Shipment",FALSE);
      TESTFIELD("No.",ReservEntry."Item No.");
      TESTFIELD("Variant Code",ReservEntry."Variant Code");
      TESTFIELD("Location Code",ReservEntry."Location Code");

      ReservMgt.CreateReservation(
        ReservEntry.Description,"Shipment Date",ReserveQuantity,
        DATABASE::"Sales Line","Document Type","Document No.",'',0,"Line No.",
        "Variant Code","Location Code",'','',"Qty. per Unit of Measure");

      UpdateReservFrom;
    END;

    PROCEDURE UpdateReservFrom@17();
    BEGIN
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.FIND;
            SetSalesLine(SalesLine,ReservEntry);
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.FIND;
            SetReqLine(ReqLine,ReservEntry);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.FIND;
            SetPurchLine(PurchLine,ReservEntry);
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            ItemJnlLine.FIND;
            SetItemJnlLine(ItemJnlLine,ReservEntry);
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ProdOrderLine.FIND;
            SetProdOrderLine(ProdOrderLine,ReservEntry);
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.FIND;
            SetProdOrderComponent(ProdOrderComp,ReservEntry);
          END;
        DATABASE::"Planning Component":
          BEGIN
            PlanningComponent.FIND;
            SetPlanningComponent(PlanningComponent,ReservEntry);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.FIND;
            SetTransferLine(TransLine,ReservEntry,ReservEntry."Source Subtype");
          END;
        DATABASE::"Service Line":
          BEGIN
            ServiceInvLine.FIND;
            SetServiceInvLine(ServiceInvLine,ReservEntry);
          END;
      END;
    END;

    PROCEDURE UpdateReservMgt@7();
    BEGIN
      CLEAR(ReservMgt);
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          ReservMgt.SetSalesLine(SalesLine);
        DATABASE::"Requisition Line":
          ReservMgt.SetReqLine(ReqLine);
        DATABASE::"Purchase Line":
          ReservMgt.SetPurchLine(PurchLine);
        DATABASE::"Item Journal Line":
          ReservMgt.SetItemJnlLine(ItemJnlLine);
        DATABASE::"Prod. Order Line":
          ReservMgt.SetProdOrderLine(ProdOrderLine);
        DATABASE::"Prod. Order Component":
          ReservMgt.SetProdOrderComponent(ProdOrderComp);
        DATABASE::"Planning Component":
          ReservMgt.SetPlanningComponent(PlanningComponent);
        DATABASE::"Transfer Line":
          ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
        DATABASE::"Service Line":
          ReservMgt.SetServLine(ServiceInvLine);
      END;
    END;

    PROCEDURE ReservedThisLine@5() : Decimal;
    BEGIN
      ReservEntry2.RESET;
      ReserveSalesLine.FilterReservFor(ReservEntry2,Rec);
      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
      EXIT(ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry));
    END;

    PROCEDURE SetCurrentSubType@9(SubType@1000 : Option);
    BEGIN
      CurrentSubType := SubType;
    END;

    BEGIN
    END.
  }
}
