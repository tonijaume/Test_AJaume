OBJECT Codeunit 5404 Lead-Time Management
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      InvtSetup@1001 : Record 313;
      Location@1002 : Record 14;
      Item@1003 : Record 27;
      SKU@1004 : TEMPORARY Record 5700;
      GetPlanningParameters@1005 : Codeunit 99000855;
      CalendarMgmt@1006 : Codeunit 7600;
      CalChange@1000 : Record 7602;

    PROCEDURE PurchaseLeadTime@1(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10];VendorNo@1003 : Code[20]) : Code[20];
    VAR
      ItemVend@1007 : Record 99;
    BEGIN
      // Returns the leadtime in a date formula

      GetItem(ItemNo);
      ItemVend."Vendor No." := VendorNo;
      ItemVend."Variant Code" := VariantCode;
      Item.FindItemVend(ItemVend,LocationCode);
      EXIT(FORMAT(ItemVend."Lead Time Calculation"));
    END;

    PROCEDURE ManufacturingLeadTime@2(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10]) : Code[20];
    BEGIN
      // Returns the leadtime in a date formula

      GetPlanningParameters.AtSKU(SKU,ItemNo,VariantCode,LocationCode);
      EXIT(FORMAT(SKU."Lead Time Calculation"));
    END;

    PROCEDURE WhseOutBoundHandlingTime@14(LocationCode@1000 : Code[10]) : Code[10];
    BEGIN
      // Returns the outbound warehouse handling time in a date formula

      IF LocationCode = '' THEN BEGIN
        InvtSetup.GET;
        EXIT(FORMAT(InvtSetup."Outbound Whse. Handling Time"));
      END;

      GetLocation(LocationCode);
      EXIT(FORMAT(Location."Outbound Whse. Handling Time"));
    END;

    PROCEDURE WhseInBoundHandlingTime@3(LocationCode@1000 : Code[10]) : Code[10];
    BEGIN
      // Returns the inbound warehouse handling time in a date formula

      IF LocationCode = '' THEN BEGIN
        InvtSetup.GET;
        EXIT(FORMAT(InvtSetup."Inbound Whse. Handling Time"));
      END;

      GetLocation(LocationCode);
      EXIT(FORMAT(Location."Inbound Whse. Handling Time"));
    END;

    PROCEDURE SafetyLeadTime@11(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10]) : Code[20];
    BEGIN
      // Returns the safety lead time in a date formula

      GetPlanningParameters.AtSKU(SKU,ItemNo,VariantCode,LocationCode);
      EXIT(FORMAT(SKU."Safety Lead Time"));
    END;

    PROCEDURE PlannedEndingDate@4(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10];DueDate@1003 : Date;VendorNo@1005 : Code[20];RefOrderType@1004 : ' ,Purchase,Prod. Order,Transfer') : Date;
    VAR
      TransferRoute@1006 : Record 5742;
      PlannedReceiptDate@1007 : Date;
      DateFormula@1008 : DateFormula;
    BEGIN
      // Returns Ending Date calculated backward from Due Date

      GetPlanningParameters.AtSKU(SKU,ItemNo,VariantCode,LocationCode);

      IF RefOrderType = RefOrderType::Transfer THEN BEGIN
        EVALUATE(DateFormula,WhseInBoundHandlingTime(LocationCode));
        WITH TransferRoute DO BEGIN
          GetTransferRoute(
            SKU."Transfer-from Code",LocationCode,"In-Transit Code","Shipping Agent Code","Shipping Agent Service Code");
          CalcPlanReceiptDateBackward(
            PlannedReceiptDate,DueDate,DateFormula,LocationCode,"Shipping Agent Code","Shipping Agent Service Code");
        END;
        EXIT(PlannedReceiptDate);
      END ELSE BEGIN
        FormatDateFormula(SKU."Safety Lead Time");

        IF (VendorNo <> '') AND (RefOrderType = RefOrderType::Purchase) THEN
          EXIT(
            CalendarMgmt.CalcDateBOC2(
              InternalLeadTimeDays(WhseInBoundHandlingTime(LocationCode) + FORMAT(SKU."Safety Lead Time")),DueDate,
              CalChange."Source Type"::Vendor,VendorNo,'',
              CalChange."Source Type"::Location,LocationCode,'',TRUE))
        ELSE
          EXIT(
            CalendarMgmt.CalcDateBOC2(
              InternalLeadTimeDays(WhseInBoundHandlingTime(LocationCode) + FORMAT(SKU."Safety Lead Time")),DueDate,
              CalChange."Source Type"::Location,LocationCode,'',
              CalChange."Source Type"::Location,LocationCode,'',FALSE));
      END;
    END;

    PROCEDURE PlannedStartingDate@12(ItemNo@1008 : Code[20];LocationCode@1001 : Code[10];VariantCode@1009 : Code[10];VendorNo@1004 : Code[20];LeadTime@1005 : Code[20];RefOrderType@1002 : ' ,Purchase,Prod. Order,Transfer';EndingDate@1000 : Date) : Date;
    VAR
      TransferRoute@1007 : Record 5742;
      PlannedShipmentDate@1006 : Date;
      ShippingTime@1010 : DateFormula;
    BEGIN
      // Returns Starting Date calculated backward from Ending Date

      IF RefOrderType = RefOrderType::Transfer THEN BEGIN
        GetPlanningParameters.AtSKU(SKU,ItemNo,VariantCode,LocationCode);

        WITH TransferRoute DO BEGIN
          GetTransferRoute(
            SKU."Transfer-from Code",LocationCode,"In-Transit Code","Shipping Agent Code","Shipping Agent Service Code");
          GetShippingTime(
            SKU."Transfer-from Code",LocationCode,"Shipping Agent Code","Shipping Agent Service Code",ShippingTime);
          CalcPlanShipmentDateBackward(
            PlannedShipmentDate,EndingDate,ShippingTime,
            SKU."Transfer-from Code","Shipping Agent Code","Shipping Agent Service Code");
        END;
        EXIT(PlannedShipmentDate);
      END ELSE BEGIN
        IF DateFormulaIsEmpty(LeadTime) THEN
          EXIT(EndingDate);

        IF (VendorNo <> '') AND (RefOrderType = RefOrderType::Purchase) THEN
          EXIT(
            CalendarMgmt.CalcDateBOC2(
              InternalLeadTimeDays(LeadTime),EndingDate,
              CalChange."Source Type"::Vendor,VendorNo,'',
              CalChange."Source Type"::Location,LocationCode,'',FALSE))
        ELSE
          EXIT(
            CalendarMgmt.CalcDateBOC2(
              InternalLeadTimeDays(LeadTime),EndingDate,
              CalChange."Source Type"::Location,LocationCode,'',
              CalChange."Source Type"::Location,LocationCode,'',FALSE));
      END;
    END;

    PROCEDURE PlannedEndingDate2@15(ItemNo@1006 : Code[20];LocationCode@1003 : Code[10];VariantCode@1001 : Code[10];VendorNo@1004 : Code[20];LeadTime@1005 : Code[20];RefOrderType@1002 : ' ,Purchase,Prod. Order,Transfer';StartingDate@1000 : Date) : Date;
    VAR
      TransferRoute@1009 : Record 5742;
      PlannedReceiptDate@1008 : Date;
      ShippingTime@1007 : DateFormula;
    BEGIN
      // Returns Ending Date calculated forward from Starting Date

      IF RefOrderType = RefOrderType::Transfer THEN BEGIN
        GetPlanningParameters.AtSKU(SKU,ItemNo,VariantCode,LocationCode);

        WITH TransferRoute DO BEGIN
          GetTransferRoute(
            SKU."Transfer-from Code",LocationCode,"In-Transit Code","Shipping Agent Code","Shipping Agent Service Code");
          GetShippingTime(
            SKU."Transfer-from Code",LocationCode,"Shipping Agent Code","Shipping Agent Service Code",ShippingTime);
          CalcPlannedReceiptDateForward(
            StartingDate,PlannedReceiptDate,ShippingTime,LocationCode,"Shipping Agent Code","Shipping Agent Service Code");
        END;
        EXIT(PlannedReceiptDate);
      END ELSE BEGIN
        IF DateFormulaIsEmpty(LeadTime) THEN
          EXIT(StartingDate);

        IF (VendorNo <> '') AND (RefOrderType = RefOrderType::Purchase) THEN
          EXIT(
            CalendarMgmt.CalcDateBOC(
              LeadTime,StartingDate,
              CalChange."Source Type"::Vendor,VendorNo,'',
              CalChange."Source Type"::Location,LocationCode,'',TRUE))
        ELSE
          EXIT(
            CalendarMgmt.CalcDateBOC(
              LeadTime,StartingDate,
              CalChange."Source Type"::Location,LocationCode,'',
              CalChange."Source Type"::Location,LocationCode,'',FALSE));
      END;
    END;

    PROCEDURE PlannedDueDate@6(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10];EndingDate@1003 : Date;VendorNo@1005 : Code[20];RefOrderType@1004 : ' ,Purchase,Prod. Order,Transfer') : Date;
    VAR
      TransferRoute@1008 : Record 5742;
      ReceiptDate@1007 : Date;
      DateFormula@1006 : DateFormula;
    BEGIN
      // Returns Due Date calculated forward from Ending Date

      GetPlanningParameters.AtSKU(SKU,ItemNo,VariantCode,LocationCode);
      FormatDateFormula(SKU."Safety Lead Time");

      IF RefOrderType = RefOrderType::Transfer THEN BEGIN
        EVALUATE(DateFormula,WhseInBoundHandlingTime(LocationCode));
        TransferRoute.CalcReceiptDateForward(EndingDate,ReceiptDate,DateFormula,LocationCode);
        EXIT(ReceiptDate);
      END ELSE
        IF (VendorNo <> '') AND (RefOrderType = RefOrderType::Purchase) THEN
          EXIT(
            CalendarMgmt.CalcDateBOC(
              WhseInBoundHandlingTime(LocationCode) + FORMAT(SKU."Safety Lead Time"),EndingDate,
              CalChange."Source Type"::Vendor,VendorNo,'',
              CalChange."Source Type"::Location,LocationCode,'',TRUE))
        ELSE
          EXIT(
            CalendarMgmt.CalcDateBOC(
              WhseInBoundHandlingTime(LocationCode) + FORMAT(SKU."Safety Lead Time"),EndingDate,
              CalChange."Source Type"::Location,LocationCode,'',
              CalChange."Source Type"::Location,LocationCode,'',FALSE));
    END;

    PROCEDURE FormatDateFormula@10(VAR DateFormula@1000 : DateFormula);
    BEGIN
      IF FORMAT(DateFormula) = '' THEN
        EVALUATE(DateFormula,'<0D>');
      IF NOT (COPYSTR(FORMAT(DateFormula),1,1) IN ['+','-']) THEN
        EVALUATE(DateFormula,'+' + FORMAT(DateFormula));
    END;

    LOCAL PROCEDURE GetItem@7(ItemNo@1000 : Code[20]);
    BEGIN
      IF ItemNo <> Item."No." THEN
        Item.GET(ItemNo);
    END;

    LOCAL PROCEDURE GetLocation@5(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
    END;

    PROCEDURE InternalLeadTimeDays@18(DateFormulaText@1002 : Code[30]) : Text[20];
    VAR
      TotalDays@1000 : DateFormula;
    BEGIN
      EVALUATE(TotalDays,'<' + FORMAT(CALCDATE(DateFormulaText, WORKDATE) - WORKDATE) + 'D>');
      EXIT(FORMAT(TotalDays));
    END;

    PROCEDURE DateFormulaIsEmpty@17(DateFormulaText@1002 : Code[30]) : Boolean;
    VAR
      DateFormula@1000 : DateFormula;
    BEGIN
      IF DateFormulaText = '' THEN
        EXIT(TRUE);

      EVALUATE(DateFormula,DateFormulaText);
      EXIT(CALCDATE(DateFormula,WORKDATE) = WORKDATE);
    END;

    BEGIN
    END.
  }
}
