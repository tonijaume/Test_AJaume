OBJECT Codeunit 7035321 Gestion Diaria
{
  OBJECT-PROPERTIES
  {
    Date=20/07/15;
    Time=14:51:57;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            reabrir_dia;
          END;

  }
  CODE
  {
    VAR
      Text50000@1103355002 : TextConst 'ESP=+30D';
      Text000@1100244050 : TextConst 'ESP=Procesando...\\';
      Text001@1100244051 : TextConst 'ESP=C¢digo Conductor #1#######\\';
      Text002@1100244052 : TextConst 'ESP=Incid. A¤adidas  #2#######';
      Text003@1100244053 : TextConst 'ESP=Generada por proceso Abrir dia';
      Text004@1100244054 : TextConst 'ESP=Procesando fecha       #1############\';
      Text005@1100244055 : TextConst 'ESP=Procesando conductores @2@@@@@@@@@@@@\';
      Text006@1100244056 : TextConst 'ESP=Procesando vehiculos   @3@@@@@@@@@@@@';
      Text007@1100244057 : TextConst 'ESP=Conductor sin partes ni incidencias';
      Text008@1100244058 : TextConst 'ESP=Cerrando dia           #1############\';
      Text009@1100244059 : TextConst 'ESP=Procesando Partes @1@@@@@@@@';
      Text012@1103350003 : TextConst 'ESP=No se encuentra Tarifa Gasoil para dia %1 y proveedor %2';
      Text013@1103350004 : TextConst 'ESP=Gastos Gasoil @1@@@@@@@@@@@';
      txt001@1100244000 : TextConst 'ESP=El d¡a %1 ya est  abierto , no se puede re-abrir.';
      wTotalIncidencias@1100244001 : Integer;
      wDialog@1100244002 : Dialog;
      wFechaEntero@1100244003 : Integer;
      rDiasLibres@1100244004 : Record 7035340;
      txt002@1100244005 : TextConst 'ESP=El d¡a %1 ha sido abierto. \\ Total incidencias creadas --> %2.';
      err1@1100244006 : TextConst 'ESP=No existe vehiculo con numero %1';
      err2@1100244007 : TextConst 'ESP=Debe especificar vehiculo y conductor.';
      err3@1100244008 : TextConst 'ESP=Debe especificar vehiculo.';
      err4@1100244009 : TextConst 'ESP=No se puede procesar el d¡a %1 ya que este no ha sido abierto.';
      err5@1100244010 : TextConst 'ESP=El dia %1 ya habia sido procesado anteriormente , se cancelar  el proceso.';
      wTotalRegs@1100244011 : Integer;
      wNreg@1100244012 : Integer;
      err6@1100244013 : TextConst 'ESP=El conductor %1 no se ha encontrado en los partes de d¡a %2 .\ Adem s no se han encontrado incid‚ncias para dicho conductor.\ Se encuentra en la ventana cierre diario , pero debe especificar el Estado.';
      err7@1100244014 : TextConst 'ESP=El vehiculo %1 no se ha encontrado en los partes de d¡a %2 .\ Adem s no se han encontrado incid‚ncias para dicho vehiculo.\Se encuentra en la ventana cierre diario , pero debe especificar el tipo de incidencia.';
      err8@1100244015 : TextConst 'ESP=El dia %1 ya habia sido cerrado anteriormente , se cancelar  el proceso.';
      txt003@1100244016 : TextConst 'ESP=El dia %1 ha sido cerrado correctamente.\\ no se podr n modificar los registros de dicho dia.';
      err9@1100244017 : TextConst 'ESP=No ha definido la tabla par metros.\\ Gestion operativa / Ficheros / Parametros .';
      err10@1100244018 : TextConst 'ESP=No ha definido la ruta de la plantilla informes .\\ Gestion operativa / Ficheros / Parametros / Informes.';
      err11@1100244019 : TextConst 'ESP=No se encuentra el archivo %1';
      err12@1100244020 : TextConst 'ESP=Debe especificar la fecha de proceso';
      err13@1100244021 : TextConst 'ESP=La incidencia %1 del vehiculo %2 no tiene asignado un tipo de incidencia.';
      err14@1100244022 : TextConst 'ESP=No existe el tipo de incidencia %1 asociada al parte de incidencia %2';
      err15@1100244023 : TextConst 'ESP=Debe definir un color y codigo abreviado para el tipo de incidencia %1';
      err16@1100244024 : TextConst 'ESP=No existe el tipo de incidencia %1. \\ Cierre diario dia %2 del vehiculo %3';
      err17@1100244025 : TextConst 'ESP=El vehiculo %1 se ha encontrado en cierre diario %2.\\ Sin embargo no tiene Tipo de incidencia asignado.';
      err18@1100244026 : TextConst 'ESP=El vehiculo %1 NO tiene actividad el dia %2 .\\ No se han encontrado ni incidencias ni ha sido asignado a un estado en la ventana cierre diario. \\Se cancelara el proceso.';
      err19@1100244027 : TextConst 'ESP=El dia %1 no ha sido cerrado.';
      err20@1100244028 : TextConst 'ESP=El dia %1 no ha sido abierto.';
      rTiposInci@1100244029 : Record 7035343;
      rTiposInciCond@1100244030 : Record 7035345;
      err21@1100244031 : TextConst 'ESP=Debe configurar los colores y codigos abreviados de las incidencias conductor. \\Dirigase a conductor / conf / informe de actividad.';
      err22@1100244032 : TextConst 'ESP=El conductor %1 se ha encontrado en cierre diario %2.\\ Sin embargo no tiene estado asignado.';
      err23@1100244033 : TextConst 'ESP=El conductor %1 NO tiene actividad el dia %2 .\\ No se han encontrado ni incidencias ni ha sido asignado a un estado en la ventana cierre diario. \\Se cancelara el proceso.';
      err24@1100244034 : TextConst 'ESP=No es posible reprocesar %1.\\ Se han encontrado proveedores con vehiculos utilizados.';
      err25@1100244035 : TextConst 'ESP=No se han encontrado partes con proveedor para el dia %1';
      err26@1100244036 : TextConst 'ESP=No se han encontrado incidencias para el vehiculo %1 a fecha %2';
      err27@1100244037 : TextConst 'ESP=No se han encontrado accidentes para el vehiculo %1 a fecha %2';
      err28@1100244038 : TextConst 'ESP=Debe procesar el d¡a %1 antes de cerrarlo.';
      err29@1100244039 : TextConst 'ESP=No se introducido nada en el registro diario de este dia, no se puede cerrar';
      txt004@1100244040 : TextConst 'ESP=REABRIR-DIA';
      err30@1100244041 : TextConst 'ESP=Carece de permisos para realizar esta tarea.';
      txt005@1100244042 : TextConst 'ESP=INTRODUZCA EL DIA A REABRIR\\';
      txt006@1100244043 : TextConst 'ESP=DIA #1########';
      err31@1100244044 : TextConst 'ESP=No se puede reabrir el dia porque no ha sido cerrado.';
      txt007@1100244045 : TextConst 'ESP=Esta seguro de que desea reabrir el dia %1, esta accion quedara registrada';
      txt008@1100244046 : TextConst 'ESP=CORR-REPOST';
      err32@1100244047 : TextConst 'ESP=No se puede corregir un registro diario que no tiene rellenados los datos basicos.';
      err33@1100244048 : TextConst 'ESP=No se puede corregir este registro porque no es el ultimo.';
      err34@1100244049 : TextConst 'ESP=No se puede procesar el d¡a %1 ya que este ha sido cerrado';
      rPar@1103350000 : Record 7010311;
      Text010@1103350001 : TextConst 'ESP=Corregir litros de un repostaje';
      Text011@1103350002 : TextConst 'ESP=Existen Contratos de Venta que expiran en un plazo inferior a 30 d¡as.\¨Desea listarlos ahora?';
      Text014@1103355001 : TextConst 'ESP=El dia %1 Ya tiene generado  el gasto de Gasoil';
      Text015@1103355000 : TextConst 'ESP=El dia %1 No ha generado el gasto de Gasoil';

    PROCEDURE AbrirDia@1(par_FechaAbr@1100244000 : Date);
    VAR
      wContratoActivo@1100244001 : Boolean;
      lrServReg@1103355000 : Record 7010379;
    BEGIN
      // AbrirDia
      //

      rPar.FINDFIRST;
      // Lo primero de todo miramos que el d¡a pasado por par metro no este abierto.
      IF Comprobar_dia(par_FechaAbr) = TRUE THEN
        ERROR(txt001, par_FechaAbr);

      //Pasamos la fecha de trabajo a entero para comprobar si esta marcado.
      wFechaEntero      := DATE2DWY(par_FechaAbr, 1);
      wTotalIncidencias := 0;

      // Buscamos los conductores que tengan esa fecha en su intervalo de d¡as libres.
      rDiasLibres.RESET;
      rDiasLibres.SETCURRENTKEY("Fecha desde","Fecha hasta");
      rDiasLibres.SETFILTER("Fecha desde", '<=%1', par_FechaAbr);
      rDiasLibres.SETFILTER("Fecha hasta", '>=%1', par_FechaAbr);

      // AJS 10.02.2004
      // Los rotativos no se tratan en el abrir dia

      rDiasLibres.SETRANGE(Rotativo, FALSE);

      IF rDiasLibres.FINDSET THEN BEGIN

        wDialog.OPEN(Text000             +
                     Text001+
                     Text002) ;

        wDialog.UPDATE(2,wTotalIncidencias);

        REPEAT

          wDialog.UPDATE(1,rDiasLibres."Cod. conductor");

          // Aml se ha a¤adido que no tenga en cuenta los conductores sin contrato.
          // 150103

          wContratoActivo := FALSE;
          wContratoActivo := Calcula_Fechas_Contrato(rDiasLibres."Cod. conductor",par_FechaAbr,TRUE);

          IF wContratoActivo THEN
            Introduce_incidencia(rDiasLibres."Cod. conductor",par_FechaAbr);

        UNTIL rDiasLibres.NEXT = 0;

        wDialog.CLOSE;

      END;

      // JPT 22/01/07 Se realia la generaci¢n de todos los servicios regulares para ese dia
      IF rPar."Generar Servicios Automaticos" THEN
        lrServReg.CreacionDiaria(par_FechaAbr);

      MESSAGE(txt002,par_FechaAbr,wTotalIncidencias);
    END;

    PROCEDURE Comprobar_dia@2(Par_FechaComp@1100244000 : Date) : Boolean;
    VAR
      rDiasAbiertos@1100244001 : Record 7035341;
    BEGIN
      // Comprobar_dia
      //

      rDiasAbiertos.RESET;
      IF rDiasAbiertos.GET(Par_FechaComp) THEN
        EXIT(TRUE)
      ELSE BEGIN
        rDiasAbiertos.Dia := Par_FechaComp;
        rDiasAbiertos.INSERT(TRUE);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE Introduce_incidencia@3(Par_Conductor@1100244000 : Code[10];Par_fecha@1100244001 : Date);
    VAR
      rIncidencias@1100244002 : Record 7010333;
      rConductor@1100244003 : Record 7010327;
      lIntroducir@1100244004 : Boolean;
    BEGIN
      //introduce_incidencia
      //

      rPar.FINDFIRST;
      rPar.TESTFIELD("Codigo Dia Libre");

      lIntroducir := FALSE;
      IF NOT Existe_incidencia(Par_Conductor,Par_fecha) THEN BEGIN

        CASE wFechaEntero OF
          1:  IF rDiasLibres.Lunes = TRUE THEN
                lIntroducir := TRUE;
          2:  IF rDiasLibres.Martes = TRUE THEN
                lIntroducir := TRUE;
          3:  IF rDiasLibres.Miercoles = TRUE THEN
                lIntroducir := TRUE;
          4:  IF rDiasLibres.Jueves = TRUE THEN
                lIntroducir := TRUE;
          5:  IF rDiasLibres.Viernes = TRUE THEN
                lIntroducir := TRUE;
          6:  IF rDiasLibres.Sabado = TRUE THEN
                lIntroducir := TRUE;
          7:  IF rDiasLibres.Domingo = TRUE THEN
                lIntroducir := TRUE;
        END;

        // JPT 03/09/04 Grgorio Carvajal pidi¢ que no se generaran ninguna incidencia desde Navision
        IF rPar."Empresa Real"= rPar."Empresa Real"::TRN THEN
          lIntroducir := FALSE;

        IF lIntroducir = TRUE THEN BEGIN
          rIncidencias.RESET;
          rIncidencias.Conductor          := Par_Conductor;
          rIncidencias."Fecha Desde"      := Par_fecha;
          rIncidencias."Fecha Hasta"      := Par_fecha;
          //BRM 17/06/04
          //rIncidencias.Motivo             := rIncidencias.Motivo::"Dia Libre";
          rIncidencias.VALIDATE("Cod Motivo", rPar."Codigo Dia Libre");
          rIncidencias.Observaciones      := Text003;

          rIncidencias.INSERT(TRUE);
          wTotalIncidencias               += 1;
          wDialog.UPDATE(2,wTotalIncidencias);
        END;

      END;
    END;

    PROCEDURE Existe_incidencia@5(par_conductor@1100244000 : Code[10];par_Fecha@1100244001 : Date) : Boolean;
    VAR
      rIncidencias@1100244002 : Record 7010333;
    BEGIN
      //Existe_incidencia
      //
      rIncidencias.RESET;
      rIncidencias.SETCURRENTKEY(Conductor,Garaje,"Fecha Desde","Fecha Hasta");
      rIncidencias.SETFILTER("Fecha Desde",'<=%1'   , par_Fecha);
      rIncidencias.SETFILTER("Fecha Hasta",'>=%1|%2', par_Fecha ,0D);
      rIncidencias.SETRANGE(Conductor,par_conductor);
      IF rIncidencias.FINDFIRST THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE Abrir_incidencia_vehiculo@10(Par_Reg@1100244000 : Record 7035342);
    VAR
      rInci@1100244001 : Record 7010348;
      rVeh@1100244002 : Record 7010346;
      fFichaInci@1100244003 : Form 7010377;
      lwCodInci@1100244004 : Code[10];
    BEGIN
      //Abrir_incidencia_vehiculo
      //

      IF Par_Reg.Vehiculo <> '' THEN BEGIN

        //Buscamos la matricula del vehiculo.
        rVeh.RESET;
        rVeh.SETCURRENTKEY(Garaje,Plazas,Numero);
        rVeh.SETRANGE(Numero,Par_Reg.Vehiculo);
        IF rVeh.FINDFIRST THEN BEGIN

          rInci.RESET;
          rInci.Matricula                  := rVeh.Matricula;
          rInci."Fecha Incidencia"         := Par_Reg.Dia;
          rInci."Fecha inicio reparacion"  := Par_Reg.Dia;
          rInci.Garaje                     := rVeh.Garaje;
          rInci."Cod. conductor"           := Par_Reg."Cod. Conductor";
          rInci.INSERT(TRUE);

          lwCodInci := rInci."Parte Incidencia";

          rInci.RESET;
          rInci.SETRANGE("Parte Incidencia",lwCodInci);
          IF rInci.FINDFIRST THEN BEGIN
            fFichaInci.SETTABLEVIEW(rInci);
            fFichaInci.LOOKUPMODE(TRUE);
            fFichaInci.RUN;
         END;

        END
        ELSE
          ERROR(err1,Par_Reg.Vehiculo);
      END
      ELSE
        ERROR(err3);
    END;

    PROCEDURE Abrir_Accidente_vehiculo@9(VAR Par_Reg@1100244000 : Record 7035342);
    VAR
      rVeh@1100244001 : Record 7010346;
      rAcci@1100244002 : Record 7010349;
      fFichaAcci@1100244003 : Form 7010379;
      lwCodAcci@1100244004 : Code[10];
    BEGIN
      //Abrir_Accidente_vehiculo
      //

      IF (Par_Reg.Vehiculo <> '') AND (Par_Reg.Conductor <> '') THEN BEGIN

        //Buscamos la matricula del vehiculo.
        rVeh.RESET;
        rVeh.SETCURRENTKEY(Garaje,Plazas,Numero);
        rVeh.SETRANGE(Numero,Par_Reg.Vehiculo);
        IF rVeh.FINDFIRST THEN BEGIN
          rAcci.Matricula             := rVeh.Matricula;
          rAcci.Fecha                 := Par_Reg.Dia;
          rAcci.Conductor             := Par_Reg."Cod. Conductor";
          rAcci."Culpa propia"        := FALSE;
          rAcci.Garaje                := rVeh.Garaje;
          rAcci.Liquidado             := FALSE;
          rAcci.INSERT(TRUE);

          lwCodAcci := rAcci."Parte accidente";
          rAcci.RESET;
          rAcci.SETRANGE("Parte accidente",lwCodAcci);
          IF rAcci.FINDFIRST THEN BEGIN
            fFichaAcci.SETTABLEVIEW(rAcci);
            fFichaAcci.LOOKUPMODE(TRUE);
            fFichaAcci.RUN;
          END;
        END
        ELSE
          ERROR(err1,Par_Reg.Vehiculo);
      END
      ELSE
        ERROR(err2);
    END;

    PROCEDURE Previo_Cierre_dia@4(Par_Fecha@1100244000 : Date);
    VAR
      rDiasAbiertos@1100244001 : Record 7035341;
    BEGIN
      // Previo_Cierre_dia

      // lo primero que vamos a hacer es comprobar que el dia no haya sido cerrado anteriormente.

      rDiasAbiertos.RESET;
      IF NOT rDiasAbiertos.GET(Par_Fecha) THEN
        ERROR(err4, Par_Fecha);

      IF rDiasAbiertos.Cerrado THEN
        ERROR(err34, Par_Fecha);

      wDialog.OPEN(Text004 +
                   Text005 +
                   Text006  );

      wDialog.UPDATE(1,Par_Fecha);

      Comprobar_trabajo_conductores(Par_Fecha);
      Comprobar_trabajo_vehiculos(Par_Fecha);

      // si no ha fallado el proceso marcamos el dia como cerrado.
      rDiasAbiertos.Procesado := TRUE;
      rDiasAbiertos.MODIFY(TRUE);
      wDialog.CLOSE;
    END;

    PROCEDURE Comprobar_trabajo_conductores@34(Par_Fecha@1100244000 : Date);
    VAR
      rCerrarDia@1100244001 : Record 7035344;
      rParte@1100244002 : Record 7010360;
      rConductor@1100244004 : Record 7010327;
      wParte@1100244005 : Boolean;
      wContratoActivo@1100244007 : Boolean;
    BEGIN
      // Comprobar_trabajo_conductores;
      //

      rParte.RESET;
      rParte.SETCURRENTKEY("Cod Conductor",
                           Fecha,
                           "Tipo Vehiculo") ;


      // ----  Filtrar directamente para no ver los externos ni los bloqueados  ----

      rConductor.RESET;
      rConductor.SETCURRENTKEY(Externo,
                               Bloqueado);
      rConductor.SETRANGE(Externo  , FALSE);
      rConductor.SETRANGE(Bloqueado, FALSE);
      IF rConductor.FINDSET THEN BEGIN

        wTotalRegs := rConductor.COUNTAPPROX;
        wNreg      := 0;

        REPEAT

          // AML 301202
          // Se descartan los conductores sin contrato.

          wContratoActivo := FALSE;
          wContratoActivo := Calcula_Fechas_Contrato(rConductor.Conductor,Par_Fecha,TRUE);

          IF wContratoActivo THEN BEGIN

            wParte   := FALSE;

            // ----  Buscamos si el conductor tiene partes para ese dia  ----

            rParte.SETRANGE("Cod Conductor" , rConductor.Conductor);
            rParte.SETRANGE(Fecha           , Par_Fecha);
            wParte := rParte.FINDFIRST;


            IF wParte = FALSE  THEN
              insertar_ausencia_conductor(Par_Fecha                      ,
                                          rConductor.Conductor           ,
                                          rConductor."Nombre Abreviado" )

            // ----  AJS 26.06.2003 Si el conductor tiene parte, comprobamos si tiene registro de ausencia para borrarlo  ----
            // ----  este codigo se a¤ade para los casos de reproceso de fechas                                           ----

            ELSE BEGIN
              rCerrarDia.RESET;
              rCerrarDia.SETRANGE("Fecha cierre", Par_Fecha);
              rCerrarDia.SETRANGE(Recurso       , rConductor."Nombre Abreviado");
              IF rCerrarDia.FINDFIRST THEN
                rCerrarDia.DELETE;
            END;

            // ----  FIN AJS 26.06.2003  ----
          END;

          wNreg += 1;
          wDialog.UPDATE(2,ROUND((wNreg / wTotalRegs) * 10000, 1));

        UNTIL rConductor.NEXT = 0
      END;
    END;

    PROCEDURE Comprobar_trabajo_vehiculos@35(Par_Fecha@1100244000 : Date);
    VAR
      rCerrarDia@1100244001 : Record 7035344;
      rVehiculo@1100244002 : Record 7010346;
      wParte@1100244003 : Boolean;
      rParte@1100244005 : Record 7010360;
    BEGIN
      // comprobar_trabajo_vehiculos
      //

      rParte.RESET;
      rParte.SETCURRENTKEY(Vehiculo,
                           Fecha);


      rVehiculo.RESET;
      rVehiculo.SETCURRENTKEY("Vehiculo propio"  ,
                              Bloqueado          ,
                              "Fecha venta"     );

      // se descartan los coches vendidos.
      rVehiculo.SETRANGE("Vehiculo propio" , TRUE);
      rVehiculo.SETFILTER("Fecha venta"    , '>%1|%2',Par_Fecha,0D);

      // Se descartan los vehiculos con final de actividad y los que no tienen que figurar en estadisticas
      rVehiculo.SETFILTER("Fecha final actividad"  , '>%1|%2',Par_Fecha,0D);
      rVehiculo.SETRANGE("No Imprimir estadisticas", FALSE);
      IF rVehiculo.FINDSET THEN
      BEGIN

        wTotalRegs := rVehiculo.COUNTAPPROX;
        wNreg      := 0;

        REPEAT
          wParte   := FALSE;

          // ----  Buscamos si el conductor tiene partes para ese dia  ----

          rParte.SETRANGE(Vehiculo , rVehiculo.Matricula);
          rParte.SETRANGE(Fecha    , Par_Fecha);
          wParte := rParte.FINDFIRST;

          IF wParte = FALSE  THEN
            insertar_ausencia_vehiculo(Par_Fecha            ,
                                       rVehiculo.Matricula  ,
                                       rVehiculo.Numero     )

            // ----  AJS 26.06.2003 Si el vehiculo tiene parte, comprobamos si tiene registro de ausencia para borrarlo  ----
            // ----  este codigo se a¤ade para los casos de reproceso de fechas                                           ----

            ELSE BEGIN
              rCerrarDia.RESET;
              rCerrarDia.SETRANGE("Fecha cierre", Par_Fecha);
              rCerrarDia.SETRANGE(Recurso       , rVehiculo.Numero);
              IF rCerrarDia.FINDFIRST THEN
                rCerrarDia.DELETE;
            END;

            // ----  FIN AJS 26.06.2003  ----

          wNreg += 1;
          wDialog.UPDATE(3,ROUND((wNreg / wTotalRegs) * 10000, 1));

        UNTIL rVehiculo.NEXT = 0
      END;
    END;

    PROCEDURE insertar_ausencia_conductor@8(Par_Fecha@1100244000 : Date;Cod_Conductor@1100244001 : Code[10];Nombre_Conductor@1100244002 : Code[20]);
    VAR
      rCerrarDia@1100244003 : Record 7035344;
      rHist_incidencias@1100244004 : Record 7010333;
      wTiene_incidencias@1100244005 : Boolean;
    BEGIN
      // insertar_ausencia_conductor
      //

      rHist_incidencias.RESET;
      rHist_incidencias.SETCURRENTKEY(Conductor      ,
                                      Garaje         ,
                                      "Fecha Desde"  ,
                                      "Fecha Hasta" );

      rHist_incidencias.SETRANGE(Conductor     , Cod_Conductor);
      rHist_incidencias.SETFILTER("Fecha Desde", '<=%1'    , Par_Fecha);
      // aml 311202 a¤adido el 0d
      rHist_incidencias.SETFILTER("Fecha Hasta", '>=%1|%2' , Par_Fecha, 0D);

      wTiene_incidencias := rHist_incidencias.FINDFIRST;

      rCerrarDia.RESET;
      IF NOT rCerrarDia.GET(Par_Fecha, Nombre_Conductor) THEN BEGIN
        rCerrarDia."Fecha cierre" := Par_Fecha;
        rCerrarDia.Recurso        := Nombre_Conductor;
        rCerrarDia.INSERT(TRUE);
      END;

      IF wTiene_incidencias THEN BEGIN
        //BRM 17/06/04
        //rCerrarDia.Estado                   := rHist_incidencias.Motivo;
        rCerrarDia."Cod motivo"             := rHist_incidencias."Cod Motivo";
        rCerrarDia."Descripcion incidencia" := rHist_incidencias.Observaciones;
      END
      ELSE BEGIN
        //BRM 17/06/04
        //rCerrarDia.Estado                   := rCerrarDia.Estado::"  ";
        rCerrarDia."Cod motivo"             := '';
        rCerrarDia."Descripcion incidencia" := Text007;
      END;
      rCerrarDia."Fecha inicio reparacion" := 0D;
      rCerrarDia."Matricula vehiculo"      := '';
      rCerrarDia."Codigo conductor"        := Cod_Conductor;
      rCerrarDia."Tipo recurso"            := rCerrarDia."Tipo recurso"::conductor;
      rCerrarDia.MODIFY(TRUE);
    END;

    PROCEDURE insertar_ausencia_vehiculo@6(Par_Fecha@1100244000 : Date;Par_Matricula@1100244001 : Code[10];Par_Numero@1100244002 : Text[10]);
    VAR
      rIncidencias@1100244003 : Record 7010348;
      rCerrarDia@1100244004 : Record 7035344;
      wTiene_incidencias@1100244005 : Boolean;
    BEGIN
      // insertar_ausencia_vehiculo
      //

      rIncidencias.RESET;
      rIncidencias.SETCURRENTKEY(Matricula                 ,
                                 "Fecha inicio reparacion" ,
                                 "Fecha final reparacion" );

      rIncidencias.SETFILTER("Fecha inicio reparacion" , '<=%1'    , Par_Fecha);
      rIncidencias.SETFILTER("Fecha final reparacion"  , '>=%1|%2' , Par_Fecha,0D);
      rIncidencias.SETRANGE(rIncidencias.Matricula     , Par_Matricula);

      wTiene_incidencias := rIncidencias.FINDFIRST;

      rCerrarDia.RESET;
      IF NOT rCerrarDia.GET(Par_Fecha, Par_Numero) THEN BEGIN
        rCerrarDia."Fecha cierre" := Par_Fecha;
        rCerrarDia.Recurso        := Par_Numero;
        rCerrarDia.INSERT(TRUE);
      END;

      //BRM 17/06/04
      //rCerrarDia.Estado := rCerrarDia.Estado::"  ";
      rCerrarDia."Cod motivo" := '';

      IF wTiene_incidencias THEN BEGIN
        rCerrarDia."Tipo incidencia"         := rIncidencias."Tipo Incidencia";
        rCerrarDia."Fecha inicio reparacion" := rIncidencias."Fecha inicio reparacion";
        rCerrarDia."Descripcion incidencia"  := rIncidencias."Observaciones Conductor";
      END;

      rCerrarDia."Matricula vehiculo" := Par_Matricula;
      rCerrarDia."Codigo conductor"   := '';
      rCerrarDia."Tipo recurso"       := rCerrarDia."Tipo recurso"::vehiculo;
      rCerrarDia.MODIFY(TRUE);
    END;

    PROCEDURE Comprobar_ausencia_conductor@11(Par_Fecha@1100244000 : Date;Cod_Conductor@1100244001 : Code[10];Nombre_Conductor@1100244002 : Code[20]);
    VAR
      rCerrarDia@1100244003 : Record 7035344;
      rHist_incidencias@1100244004 : Record 7010333;
      wIncidencias@1100244005 : Boolean;
      rReg@1100244006 : Record 7035344;
    BEGIN
      // comprobar_ausencia_conductor
      //

      rHist_incidencias.RESET;
      rHist_incidencias.SETCURRENTKEY(Conductor      ,
                                      Garaje         ,
                                      "Fecha Desde"  ,
                                      "Fecha Hasta" );

      rHist_incidencias.SETRANGE(Conductor      , Cod_Conductor);
      rHist_incidencias.SETFILTER("Fecha Desde" , '<=%1', Par_Fecha);
      // aml 311202 a¤adido el 0d
      rHist_incidencias.SETFILTER("Fecha Hasta", '>=%1|%2', Par_Fecha,0D);
      wIncidencias := rHist_incidencias.FINDFIRST;

      IF wIncidencias = FALSE THEN BEGIN
        rReg.RESET;
        rReg.SETCURRENTKEY("Fecha cierre","Codigo conductor");
        rReg.SETRANGE("Fecha cierre"     , Par_Fecha);
        rReg.SETRANGE("Codigo conductor" , Cod_Conductor);
        IF rReg.FINDFIRST THEN BEGIN
          //BRM 17/06/04
          //IF rReg.Estado = rReg.Estado::"  " THEN BEGIN
          IF (rReg."Cod motivo" = '') THEN BEGIN
            wDialog.CLOSE;
            ERROR(err6,Nombre_Conductor,Par_Fecha);
          END;
        END
        ELSE BEGIN
            wDialog.CLOSE;
            ERROR(err6,Nombre_Conductor,Par_Fecha);
        END;
      END;
    END;

    PROCEDURE Comprobar_ausencia_vehiculo@12(Par_Fecha@1100244000 : Date;Par_Matricula@1100244001 : Code[10];Par_Numero@1100244002 : Text[10]);
    VAR
      rIncidencias@1100244003 : Record 7010348;
      rCerrarDia@1100244004 : Record 7035344;
      wincidencias@1100244005 : Boolean;
      rReg@1100244006 : Record 7035344;
    BEGIN
      // comrpobar_ausencia_vehiculo
      //

      rIncidencias.RESET;
      rIncidencias.SETCURRENTKEY(Matricula                 ,
                                 "Fecha inicio reparacion" ,
                                 "Fecha final reparacion" );

      rIncidencias.SETRANGE(rIncidencias.Matricula     , Par_Matricula);
      rIncidencias.SETFILTER("Fecha inicio reparacion" , '<=%1', Par_Fecha);
      // aml 311202 a¤adido el 0d
      rIncidencias.SETFILTER("Fecha final reparacion"  , '>=%1|%2', Par_Fecha,0D);
      wincidencias := rIncidencias.FINDFIRST;

      IF wincidencias = FALSE THEN BEGIN
        rReg.RESET;
        rReg.SETCURRENTKEY("Fecha cierre","Matricula vehiculo");
        rReg.SETRANGE("Fecha cierre",Par_Fecha);
        rReg.SETRANGE("Matricula vehiculo",Par_Matricula);
        IF rReg.FINDFIRST THEN BEGIN
          IF rReg."Tipo incidencia" = '' THEN BEGIN
            wDialog.CLOSE;
            ERROR(err7,Par_Numero,Par_Fecha);
          END;
        END
        ELSE BEGIN
          wDialog.CLOSE;
          ERROR(err7,Par_Numero,Par_Fecha);
        END;
      END;
    END;

    PROCEDURE Cierre_diario@13(Par_Fecha@1100244000 : Date);
    VAR
      rDiasAbiertos@1100244001 : Record 7035341;
      rreg@1100244002 : Record 7035344;
      lrRegDia@1100244003 : Record 7035342;
    BEGIN
      // cierre_diario
      // AML 181102

      rPar.FINDFIRST;
      // lo primero que vamos a hacer es comprobar que el dia no haya sido cerrado anteriormente.
      rDiasAbiertos.RESET;
      IF NOT rDiasAbiertos.GET(Par_Fecha) THEN
        ERROR(err4,Par_Fecha)
      ELSE BEGIN
        IF rDiasAbiertos.Cerrado  THEN
          ERROR(err8,Par_Fecha);

        IF rDiasAbiertos.Procesado = FALSE THEN
          ERROR(err28,Par_Fecha);
      END;

      wDialog.OPEN(Text008 +
                   Text005 +
                   Text006  );

      wDialog.UPDATE(1,Par_Fecha);

      Comprobar_conductores_cierre(Par_Fecha);
      comprobar_vehiculos_cierre(Par_Fecha);

      rreg.RESET;
      rreg.SETRANGE("Fecha cierre",Par_Fecha);
      IF rreg.FINDFIRST THEN
        rreg.MODIFYALL(rreg.Cerrado,TRUE);

      // ----  AJS 19.02.2003 Comprobar que se haya introducido algun dato en el registro diario  ----
      IF NOT rPar."No control Registro en Cierre" THEN
      BEGIN // JPT 06/02/07 Nuevo parametro para evitar control TER
        lrRegDia.RESET;
        lrRegDia.SETRANGE(Dia, Par_Fecha);
        IF NOT lrRegDia.FINDFIRST THEN
          ERROR(err29);
      END;

      // JPT 15/07/05 Comprobamos que no haya contratos de venta que expiren antes de 30 dias
      IF rPar."Empresa Real" IN [rPar."Empresa Real"::TER] THEN
        CompruebaContratosVta(TRUE);

      // ----  FIN AJS 19.02.2003  ----

      // si no ha fallado el proceso marcamos el dia como cerrado.
      rDiasAbiertos.Cerrado := TRUE;
      rDiasAbiertos.MODIFY(TRUE);
      wDialog.CLOSE;

      // JPT 26/ 07/05 Registramos gastos gasoil
      GastosGasoil(Par_Fecha);

      MESSAGE(txt003,Par_Fecha);
    END;

    PROCEDURE Comprobar_conductores_cierre@19(Par_Fecha@1100244000 : Date);
    VAR
      rParte@1100244001 : Record 7010360;
      rConductor@1100244003 : Record 7010327;
      wParte@1100244004 : Boolean;
      wContratoActivo@1100244006 : Boolean;
    BEGIN
      // Comprobar_conductores_cierre;
      //

      rParte.RESET;
      rParte.SETCURRENTKEY("Cod Conductor",
                           Fecha,
                           "Tipo Vehiculo") ;

      // ----  Filtrar directamente para no ver los externos ni los bloqueados  ----

      rConductor.RESET;
      rConductor.SETCURRENTKEY(Externo,
                               Bloqueado);
      rConductor.SETRANGE(Externo  , FALSE);
      rConductor.SETRANGE(Bloqueado, FALSE);
      IF rConductor.FINDSET THEN BEGIN

        wTotalRegs := rConductor.COUNTAPPROX;
        wNreg      := 0;

        REPEAT

          // comprobamos de nuevo el contrato.

          wContratoActivo := FALSE;
          wContratoActivo := Calcula_Fechas_Contrato(rConductor.Conductor , Par_Fecha,TRUE);

          IF wContratoActivo THEN BEGIN

            wParte   := FALSE;

            // ----  Buscamos si el conductor tiene partes para ese dia  ----

            rParte.SETRANGE("Cod Conductor", rConductor.Conductor);
            rParte.SETRANGE(Fecha          , Par_Fecha);
            wParte := rParte.FINDFIRST;

            IF wParte = FALSE  THEN
              Comprobar_ausencia_conductor(Par_Fecha,
                                           rConductor.Conductor,
                                           rConductor."Nombre Abreviado" );


          END;

          wNreg += 1;
          wDialog.UPDATE(2,ROUND((wNreg / wTotalRegs) * 10000,1));

        UNTIL rConductor.NEXT = 0
      END;
    END;

    PROCEDURE comprobar_vehiculos_cierre@18(Par_Fecha@1100244000 : Date);
    VAR
      rVehiculo@1100244001 : Record 7010346;
      wParte@1100244002 : Boolean;
      rParte@1100244004 : Record 7010360;
    BEGIN
      // comprobar_vehiculos_cierre;
      //

      rParte.RESET;
      rParte.SETCURRENTKEY(Vehiculo,
                           Fecha);


      // ----  Filtrar directamente para no ver los externos ni los bloqueados  ----

      rVehiculo.RESET;
      rVehiculo.SETCURRENTKEY("Vehiculo propio"  ,
                              Bloqueado          ,
                              "Fecha venta"     );

      rVehiculo.SETRANGE ("Vehiculo propio", TRUE);
      rVehiculo.SETFILTER("Fecha venta"    , '>%1|%2' , Par_Fecha , 0D);

      // AJS 11.03.2004
      // Se descartan los vehiculos con final de actividad y los que no tienen que figurar en estadisticas

      rVehiculo.SETFILTER("Fecha final actividad"  , '>%1|%2',Par_Fecha,0D);
      rVehiculo.SETRANGE("No Imprimir estadisticas", FALSE);

      IF rVehiculo.FINDSET THEN BEGIN

        wTotalRegs := rVehiculo.COUNTAPPROX;
        wNreg      := 0;

        REPEAT

          wParte   := FALSE;

          // ----  Buscamos si el conductor tiene partes para ese dia  ----

          rParte.SETRANGE(Vehiculo , rVehiculo.Matricula);
          rParte.SETRANGE(Fecha    , Par_Fecha);
          wParte := rParte.FINDFIRST;

          IF wParte = FALSE THEN
            Comprobar_ausencia_vehiculo(Par_Fecha,
                                        rVehiculo.Matricula,
                                        rVehiculo.Numero     );

          wNreg += 1;
          wDialog.UPDATE(3, ROUND((wNreg / wTotalRegs) * 10000, 1));

        UNTIL rVehiculo.NEXT = 0

      END;
    END;

    PROCEDURE Insertar_incidencia_conductor@7(rReg@1100244000 : Record 7035344) : Boolean;
    VAR
      rHist_incidencias@1100244001 : Record 7010333;
      rCon@1100244002 : Record 7010327;
      fFichaInci@1100244003 : Form 7010351;
      wInsertado@1100244004 : Boolean;
    BEGIN
      // insertar_incidencia_conductor
      //
      rHist_incidencias.RESET;
      rHist_incidencias.SETCURRENTKEY(Conductor      ,
                                      Garaje         ,
                                      "Fecha Desde"  ,
                                      "Fecha Hasta" );

      rHist_incidencias.SETRANGE(Conductor       , rReg."Codigo conductor");
      rHist_incidencias.SETFILTER("Fecha Desde"  , '<=%1'   , rReg."Fecha cierre");
      rHist_incidencias.SETFILTER("Fecha Hasta"  , '>=%1|%2', rReg."Fecha cierre" ,0D);
      IF rHist_incidencias.FINDFIRST THEN
        wInsertado := TRUE
      ELSE BEGIN
        rCon.RESET;
        IF rCon.GET(rReg."Codigo conductor") THEN BEGIN
          rHist_incidencias.Conductor            := rReg."Codigo conductor";
          rHist_incidencias."Fecha Desde"        := rReg."Fecha cierre";
          rHist_incidencias.Fecha                := rReg."Fecha cierre";
          rHist_incidencias.Garaje               := rCon.Garaje;
          rHist_incidencias."Nombre Abreviado"   := rCon."Nombre Abreviado";

          //BRM 17/06/04
          //IF rReg.Estado <> rReg.Estado::"  " THEN
            //rHist_incidencias.Motivo := rReg.Estado;

          IF (rReg."Cod motivo" = '') THEN
            rHist_incidencias.VALIDATE("Cod Motivo" , rReg."Cod motivo");

          wInsertado  := rHist_incidencias.INSERT(TRUE);
        END;
      END;

      IF wInsertado THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE Cambia_descripcion_inciconduct@14(VAR rreg@1100244000 : Record 7035344);
    VAR
      rHist_incidencias@1100244001 : Record 7010333;
    BEGIN
      // Cambia descripcion inciconduct
      //
      rHist_incidencias.RESET;
      rHist_incidencias.SETCURRENTKEY(Conductor     ,
                                      Garaje        ,
                                      "Fecha Desde" ,
                                      "Fecha Hasta");

      rHist_incidencias.SETRANGE(Conductor      , rreg."Codigo conductor");
      rHist_incidencias.SETRANGE("Fecha Desde"  , rreg."Fecha cierre");
      rHist_incidencias.SETFILTER("Fecha Hasta" , '>=%1|%2',rreg."Fecha cierre",0D);

      IF rHist_incidencias.FINDFIRST THEN BEGIN
        //BRM 17/06/04
        //rreg.Estado                   := rHist_incidencias.Motivo;
        rreg."Cod motivo"             := rHist_incidencias."Cod Motivo";
        rreg."Descripcion incidencia" := rHist_incidencias.Observaciones;
        rreg.MODIFY;
      END;
    END;

    PROCEDURE Insertar_incidencia_vehiculo@15(rreg@1100244000 : Record 7035344) : Code[10];
    VAR
      rincidenciaveh@1100244001 : Record 7010348;
      rveh@1100244002 : Record 7010346;
    BEGIN
      // insertar_incidencia_vehiculo
      //

      rincidenciaveh.RESET;
      rincidenciaveh.SETCURRENTKEY(Matricula,
                                   "Fecha inicio reparacion",
                                   "Fecha final reparacion");
      rincidenciaveh.SETRANGE(Matricula                  , rreg."Matricula vehiculo");
      rincidenciaveh.SETFILTER("Fecha inicio reparacion" , '<=%1'   , rreg."Fecha cierre");
      rincidenciaveh.SETFILTER("Fecha final reparacion"  , '>=%1|%2', rreg."Fecha cierre" ,0D);
      IF rincidenciaveh.FINDFIRST THEN
        EXIT(rincidenciaveh."Parte Incidencia")
      ELSE BEGIN
        rincidenciaveh.RESET;
        rincidenciaveh.Matricula                 := rreg."Matricula vehiculo";
        rincidenciaveh."Fecha inicio reparacion" := rreg."Fecha cierre";
        rincidenciaveh."Fecha Incidencia"        := WORKDATE;
        IF rreg."Tipo incidencia" <> '' THEN
          rincidenciaveh."Tipo Incidencia"       := rreg."Tipo incidencia";

        rincidenciaveh.INSERT(TRUE);
        EXIT(rincidenciaveh."Parte Incidencia");
      END;
    END;

    PROCEDURE Cambia_descripcion_incivehicul@16(VAR rreg@1100244000 : Record 7035344);
    VAR
      rincidenciaveh@1100244001 : Record 7010348;
    BEGIN
      //cambia_descripcion_incivehicul
      //
      rincidenciaveh.RESET;
      rincidenciaveh.SETCURRENTKEY(Matricula                  ,
                                   "Fecha inicio reparacion"  ,
                                   "Fecha final reparacion"  );

      rincidenciaveh.SETRANGE(Matricula                , rreg."Matricula vehiculo");
      rincidenciaveh.SETRANGE("Fecha inicio reparacion", rreg."Fecha cierre");
      rincidenciaveh.SETFILTER("Fecha final reparacion", '>=%1|%2',rreg."Fecha cierre",0D);
      IF rincidenciaveh.FINDFIRST THEN BEGIN
          rreg."Tipo incidencia"         := rincidenciaveh."Tipo Incidencia";
          rreg."Descripcion incidencia"  := rincidenciaveh."Observaciones Conductor";
          rreg."Fecha inicio reparacion" := rincidenciaveh."Fecha inicio reparacion";
          rreg.MODIFY;
      END;
    END;

    PROCEDURE Calcula_Fechas_Contrato@17(wCond@1100244000 : Code[10];wFecha@1100244001 : Date;wControlaDiaSem@1100244002 : Boolean) : Boolean;
    VAR
      rContratoCond@1100244003 : Record 7010331;
      wencontrado@1100244004 : Boolean;
    BEGIN
      // Calcula_fechas_contrato
      // AML 301202
      // wControlaDiaSem nos indica si se ha de controlar que el contrato afecte al d¡a de la semana

      wencontrado := FALSE;
      rContratoCond.RESET;
      rContratoCond.SETRANGE (Conductor    , wCond);
      rContratoCond.SETFILTER("Fecha Alta" , '<=%1',wFecha);
      IF rContratoCond.FINDSET THEN
        REPEAT
          wencontrado := (rContratoCond."Fecha Baja" >= wFecha ) OR
                         (rContratoCond."Fecha Baja" = 0D);
        UNTIL wencontrado  OR (rContratoCond.NEXT = 0);

      IF wControlaDiaSem AND wencontrado THEN
        wencontrado := rContratoCond.TieneContParaDia(wFecha,FALSE);

      EXIT(wencontrado);
    END;

    PROCEDURE Mostrar_incidencias@20(rReg3@1100244000 : Record 7035342);
    VAR
      rInci@1100244001 : Record 7010348;
    BEGIN
      // Mostrar Incidencias
      // 311202 AML

      rInci.RESET;
      rInci.SETCURRENTKEY(Matricula                 ,
                          "Fecha inicio reparacion" ,
                          "Fecha final reparacion" );

      rInci.SETRANGE (Matricula                 , rReg3.Matricula);
      rInci.SETFILTER("Fecha inicio reparacion" , '<=%1'   , rReg3.Dia);
      rInci.SETFILTER("Fecha final reparacion"  , '>=%1|%2', rReg3.Dia ,0D);
      IF rInci.FINDFIRST THEN
        FORM.RUNMODAL(7010378,rInci)
      ELSE
        ERROR(err26,rReg3.Vehiculo,rReg3.Dia);
    END;

    PROCEDURE Mostrar_Accidentes@21(rReg3@1100244000 : Record 7035342);
    VAR
      rAccidente@1100244001 : Record 7010349;
    BEGIN
      // Mostrar Accidentes
      // 311202 AML

      rAccidente.RESET;
      rAccidente.SETCURRENTKEY(Matricula ,
                               Fecha   );

      rAccidente.SETRANGE (Matricula , rReg3.Matricula);
      rAccidente.SETFILTER(Fecha     , '<=%1' , rReg3.Dia);
      rAccidente.SETFILTER(Fecha     , '>=%1' , rReg3.Dia);
      IF rAccidente.FINDFIRST THEN
        FORM.RUNMODAL(7010380,rAccidente)
      ELSE
        ERROR(err27,rReg3.Vehiculo,rReg3.Dia);
    END;

    PROCEDURE reabrir_dia@23();
    VAR
      lrDiasAbiertos@1100244000 : Record 7035341;
      lrRegDiaCer@1100244001 : Record 7035344;
      lrUsu@1100244002 : Record 7010420;
      lrRestri@1100244003 : Record 7010422;
      lwVentana@1100244004 : Dialog;
      lwFecha@1100244005 : Date;
    BEGIN
      // reabrir_dia
      //
      lrUsu.GET(USERID);

      IF lrRestri.GET(lrUsu."Perfil Transfer", txt004) THEN
        ERROR(err30);

      lwVentana.OPEN(txt005 +
                     txt006);
      lwVentana.INPUT(1, lwFecha);
      lwVentana.CLOSE;

      IF lwFecha = 0D THEN
        EXIT;

      lrDiasAbiertos.RESET;
      IF NOT lrDiasAbiertos.GET(lwFecha) THEN
        ERROR(err4, lwFecha)
      ELSE
        IF NOT lrDiasAbiertos.Cerrado  THEN
          ERROR(err31, lwFecha);

      IF NOT CONFIRM(txt007, FALSE, lwFecha) THEN
        EXIT;

      lrDiasAbiertos.Cerrado := FALSE;
      lrDiasAbiertos."Usuario reabierto" := USERID;
      lrDiasAbiertos.MODIFY;

      lrRegDiaCer.RESET;
      lrRegDiaCer.SETCURRENTKEY("Fecha cierre");
      lrRegDiaCer.SETRANGE("Fecha cierre", lwFecha);
      IF lrRegDiaCer.FINDFIRST THEN
        lrRegDiaCer.MODIFYALL(Cerrado, FALSE);

      // JPT 26/07/05 Borramos los gastos registrados de Gasoil
      EliminaGastosGasoil(lwFecha);
    END;

    PROCEDURE corregir_ultimo_respostaje@24(VAR prRegDia@1100244000 : Record 7035342);
    VAR
      lrUsu@1100244001 : Record 7010420;
      lrRestri@1100244002 : Record 7010422;
      lrRegDia@1100244003 : Record 7035342;
      lfCorregirRepostaje@1100244004 : Form 7035367;
      lwKms@1100244005 : Decimal;
      lwLitros@1100244006 : Decimal;
    BEGIN
      // corregir_ultimo_respostaje
      //

      // ----  Comprobar si el usuario esta autorizado ----

      lrUsu.GET(USERID);
      IF lrRestri.GET(lrUsu."Perfil Transfer", txt008) THEN
        ERROR(err30);

      // ----  Comprobar si el repostaje seleccionado tiene rellenados los datos basicos  ----

      IF (prRegDia.Dia = 0D) OR (prRegDia.Vehiculo = '') OR (prRegDia."Hora repostaje" = 0T) THEN
        ERROR(err32);

      // ----  Comprobar si el repostaje seleccionado es el ultimo para el vehiculo  ----

      lrRegDia.RESET;
      lrRegDia.SETCURRENTKEY(Vehiculo,
                             Dia,
                             "Hora repostaje",
                             Anulado);
      lrRegDia.SETRANGE (Vehiculo, prRegDia.Vehiculo);
      lrRegDia.SETFILTER(Dia     , '>%1', prRegDia.Dia);
      lrRegDia.SETRANGE (Anulado , FALSE);
      IF lrRegDia.FINDFIRST THEN
        ERROR(err33)
      ELSE BEGIN
        lrRegDia.SETRANGE (Dia             , prRegDia.Dia);
        lrRegDia.SETFILTER("Hora repostaje", '>%1', prRegDia."Hora repostaje");
        IF lrRegDia.FINDFIRST THEN
          ERROR(err33);
      END;

      // ----  Llamar al formulario de correccion y si se pulsa ACEPTAR modificar el registro diario  ----

      CLEAR(lfCorregirRepostaje);
      prRegDia.SETRECFILTER;
      lfCorregirRepostaje.SETTABLEVIEW(prRegDia);
      lfCorregirRepostaje.SETRECORD(prRegDia);
      lfCorregirRepostaje.PasaParametros(0);
      IF lfCorregirRepostaje.RUNMODAL = ACTION::OK THEN BEGIN
        lfCorregirRepostaje.retorna_valores(lwKms, lwLitros);

        prRegDia.VALIDATE(Kms                , lwKms);
        prRegDia.VALIDATE("Litros repostados", lwLitros);

        prRegDia."Fecha ult modificacion"   := TODAY;
        prRegDia."Usuario ult modificacion" := USERID;
        prRegDia.MODIFY;
      END;
    END;

    PROCEDURE Dia_Libre_Conductor@25(pCond@1100244000 : Code[10];pFecha@1100244001 : Date) : Boolean;
    VAR
      rDiaslibres@1100244002 : Record 7035340;
      lwTiene@1100244003 : Boolean;
      lwD¡a@1100244004 : Integer;
    BEGIN
      // Dia_Libre_conductor

      lwTiene := FALSE;

      rDiaslibres.RESET;
      rDiaslibres.SETCURRENTKEY("Cod. conductor","Fecha desde","Fecha hasta");
      rDiaslibres.SETRANGE("Cod. conductor" , pCond);
      rDiaslibres.SETFILTER("Fecha desde"   , '<=%1'   , pFecha);
      rDiaslibres.SETFILTER("Fecha hasta"   , '>=%1|%2', pFecha, 0D);
      IF rDiaslibres.FINDFIRST THEN BEGIN
        // Devuelve true si el contrato es habil para el d¡a de la semana pasado como parametro
        lwD¡a := DATE2DWY(pFecha,1);
        CASE lwD¡a OF
          1: lwTiene := rDiaslibres.Lunes    ;
          2: lwTiene := rDiaslibres.Martes   ;
          3: lwTiene := rDiaslibres.Miercoles;
          4: lwTiene := rDiaslibres.Jueves   ;
          5: lwTiene := rDiaslibres.Viernes  ;
          6: lwTiene := rDiaslibres.Sabado   ;
          7: lwTiene := rDiaslibres.Domingo  ;
        END;
        EXIT(lwTiene);
      END
      ELSE
        EXIT(lwTiene);
    END;

    PROCEDURE DiaLibreConductorInc@1103350004(pCond@1103350001 : Code[10];pFecha@1103350000 : Date) : Boolean;
    VAR
      lrInc@1103350002 : Record 7010333;
      lwTiene@1103350003 : Boolean;
    BEGIN
      // DiaLibreConductorInc
      // JPT 17/08/05 al igual que la funci¢n anterior controla si el conductor tiene d¡a libre para una fecha determinada
      // la diferencia es que en vez de utilizar la tabla de d¡as libres utiliza la de incidencias

      rPar.FINDFIRST;
      rPar.TESTFIELD("Codigo Dia Libre");

      CLEAR(lrInc);
      lrInc.SETCURRENTKEY(Conductor,Garaje,"Fecha Desde","Fecha Hasta");
      lrInc.SETRANGE(Conductor   , pCond);
      lrInc.SETRANGE("Cod Motivo", rPar."Codigo Dia Libre");
      lrInc.SETFILTER("Fecha Desde", '<=%1' , pFecha);
      lrInc.SETFILTER("Fecha Hasta", '>=%1|%2', pFecha,0D);
      lwTiene := lrInc.FINDFIRST;
      EXIT(lwTiene);
    END;

    PROCEDURE CorregirLitrosRepostados@1103350000(VAR prRegDia@1103350000 : Record 7035342);
    VAR
      lrUsu@1103350006 : Record 7010420;
      lrRestri@1103350005 : Record 7010422;
      lrRegDia@1103350004 : Record 7035342;
      lfCorregirRepostaje@1103350003 : Form 7035367;
      lwLitros@1103350001 : Decimal;
      lwKms@1103350002 : Decimal;
    BEGIN
      // CorregirLitrosRepostados
      //

      // ----  Comprobar si el usuario esta autorizado ----

      lrUsu.GET(USERID);
      IF lrRestri.GET(lrUsu."Perfil Transfer", txt008) THEN
        ERROR(err30);

      // ----  Llamar al formulario de correccion y si se pulsa ACEPTAR modificar el registro diario  ----

      CLEAR(lfCorregirRepostaje);
      prRegDia.SETRECFILTER;
      lfCorregirRepostaje.SETTABLEVIEW(prRegDia);
      lfCorregirRepostaje.SETRECORD(prRegDia);
      lfCorregirRepostaje.PasaParametros(1);
      IF lfCorregirRepostaje.RUNMODAL = ACTION::OK THEN BEGIN
        lfCorregirRepostaje.retorna_valores(lwKms, lwLitros);

        prRegDia.VALIDATE("Litros repostados", lwLitros);

        prRegDia."Fecha ult modificacion"   := TODAY;
        prRegDia."Usuario ult modificacion" := USERID;
        prRegDia.MODIFY;
      END;
    END;

    PROCEDURE CompruebaContratosVta@1103350001(pwAvisa@1103350003 : Boolean);
    VAR
      lrContV@1103350000 : Record 7010403;
      lrContV2@1103350002 : Record 7010403;
      lwFechas@1103350001 : ARRAY [2] OF Date;
      lwOk@1103350004 : Boolean;
    BEGIN
      // CompruebaContratosVta
      // JPT 15/07/05 Esta Funci¢n avisa de todos aquellos contratos a los que les falte  menos de 30 dias para caducar
      // Indica si Avisa antes Mostrar la tabla

      CLEAR(lrContV);
      CLEAR(lwFechas);
      lwFechas[1]:= TODAY;
      lwFechas[2]:= CALCDATE(Text50000,lwFechas[1]);
      lrContV.FILTERGROUP(2);
      lrContV.SETCURRENTKEY(Cliente,Touroperador,"Fecha inicio contrato","Fecha final contrato");
      lrContV.SETRANGE("Fecha final contrato",lwFechas[1],lwFechas[2]);
      lrContV.SETRANGE(Confirmado, TRUE);

      // Ahora busca que dichos contratos no tengan continuidad
      IF lrContV.FINDSET THEN BEGIN
        CLEAR(lrContV2);
        lrContV2.SETCURRENTKEY(Cliente,Touroperador,"Fecha inicio contrato","Fecha final contrato");
        REPEAT
          lrContV2.SETRANGE(Cliente                 , lrContV.Cliente);
          lrContV2.SETRANGE(Touroperador            , lrContV.Touroperador);
          lrContV2.SETFILTER("Fecha inicio contrato", '>%1' , lwFechas[1]);
          lrContV2.SETFILTER("N§ Contrato" ,'<>%1'  , lrContV."N§ Contrato");
          lrContV2.SETRANGE(Confirmado, TRUE);
          IF NOT lrContV2.FINDFIRST THEN
            lrContV.MARK(TRUE);
        UNTIL lrContV.NEXT=0;
      END;

      lrContV.MARKEDONLY(TRUE);
      IF lrContV.FINDFIRST THEN BEGIN
        lrContV.FILTERGROUP(0);
        IF pwAvisa THEN
          lwOk := CONFIRM(Text011)
        ELSE
          lwOk := TRUE;
        IF lwOk THEN
          FORM.RUN(0,lrContV);
      END;
    END;

    PROCEDURE GastosGasoil@1103350002(pwFecha@1103350000 : Date);
    VAR
      lrMovOtr@1103350001 : Record 7010397;
      lrTar@1103350005 : Record 7035383;
      lrRegDia@1103350002 : Record 7035342;
      lwTotal@1103350003 : Integer;
      lwCont@1103350004 : Integer;
      lwVent2@1103350006 : Dialog;
    BEGIN
      // GastosGasoil
      // Introducimos el Gastos Gasoil en la tabla de Movimientos Otros

      rPar.FINDFIRST;

      IF pwFecha=0D THEN
        EXIT;

      CLEAR(lrRegDia);
      lrRegDia.SETRANGE (Dia      , pwFecha);
      lrRegDia.SETFILTER(Proveedor, '<>%1', '');
      IF lrRegDia.FINDSET THEN
      BEGIN
        CLEAR(lwCont);
        lwTotal := lrRegDia.COUNT;
        lwVent2.OPEN(Text013);
        REPEAT
          // Buscamos la tarifa
          //+$001 <
          CLEAR(lrTar);
          lrTar.SETRANGE(Concepto       , lrTar.Concepto::Gasoil);
          lrTar.SETFILTER("Fecha Desde" , '<=%1', pwFecha);
          lrTar.SETFILTER("Fecha Hasta" , '>=%1', pwFecha);
          lrTar.SETRANGE (Proveedor     , lrRegDia.Proveedor);
          IF NOT lrTar.FINDFIRST THEN
            ERROR(Text012, pwFecha, lrRegDia.Proveedor);
          lrTar.TESTFIELD("Grupo registro IVA prod.");
          //+$001 >

          IF lrMovOtr.Matricula <> lrRegDia.Matricula THEN
          BEGIN
            CLEAR(lrMovOtr);
            lrMovOtr.Concepto := lrMovOtr.Concepto::Gasoil;
            lrMovOtr.VALIDATE(Fecha                      , pwFecha);
            lrMovOtr.VALIDATE(Divisa                     , lrTar.Divisa);
            lrMovOtr.VALIDATE(Precio                     , lrTar.Precio);
            lrMovOtr.VALIDATE(Proveedor                  , lrTar.Proveedor);
            lrMovOtr.VALIDATE("Grupo registro IVA prod." , lrTar."Grupo registro IVA prod.");
            lrMovOtr.VALIDATE(Matricula                  , lrRegDia.Matricula);
            lrMovOtr.VALIDATE(Conductor                  , lrRegDia."Cod. Conductor"); //+$002
            lrMovOtr.INSERT(TRUE);
          END;

          lrMovOtr.VALIDATE(Cantidad , lrMovOtr.Cantidad + lrRegDia."Litros repostados");
          lrMovOtr.MODIFY(TRUE);

          lwCont += 1;
          lwVent2.UPDATE(1, ROUND(lwCont / lwTotal * 10000, 1));
        UNTIL lrRegDia.NEXT = 0;
        lwVent2.CLOSE;
      END;
    END;

    PROCEDURE EliminaGastosGasoil@1103350003(pwFecha@1103350001 : Date);
    VAR
      lrMovOtr@1103350000 : Record 7010397;
    BEGIN
      // EliminaGastosGasoil
      // Borra todos los gastos de gasoil de un d¡a determinado en la tabla de Movimientos Otros

      IF pwFecha=0D THEN
        EXIT;

      CLEAR(lrMovOtr);
      lrMovOtr.SETCURRENTKEY(Concepto, Fecha);
      lrMovOtr.SETRANGE(Concepto, lrMovOtr.Concepto::Gasoil);
      lrMovOtr.SETRANGE(Fecha   , pwFecha);
      IF lrMovOtr.FINDFIRST THEN
        lrMovOtr.DELETEALL(TRUE);
    END;

    PROCEDURE GetDiaGeneradoGasoil@1103355000(pwFecha@1103355001 : Date;pwError@1103355003 : 'Nunca,Generado,No Generado') : Boolean;
    VAR
      lrMovOtr@1103355000 : Record 7010397;
      lwOk@1103355002 : Boolean;
    BEGIN
      // GetDiaGeneradoGasoil
      // Busca para un dia determinado si se ha calculado ya los gastos de gasoil
      // pwError indica si se tiene que generar un error en caso de que ya est‚ calculado o no este calculado

      CLEAR(lrMovOtr);
      lrMovOtr.SETCURRENTKEY(Concepto, Fecha);
      lrMovOtr.SETRANGE(Concepto, lrMovOtr.Concepto::Gasoil);
      lrMovOtr.SETRANGE(Fecha   , pwFecha);
      lwOk := lrMovOtr.FINDFIRST;

      CASE pwError OF
        pwError::Generado      : IF lwOk THEN ERROR (Text014, pwFecha);
        pwError::"No Generado" : IF NOT lwOk THEN ERROR (Text015, pwFecha);
      END;

      EXIT(lwOk);
    END;

    PROCEDURE BuscaTarifaGasoilMov@1103355001(prMovOtr@1103355005 : Record 7010397;VAR prTar@1103355003 : Record 7035383;pwError@1103355000 : Boolean) : Boolean;
    VAR
      lrTar@1103355001 : Record 7035383;
      lwOk@1103355004 : Boolean;
    BEGIN
      // BuscaTarifaGasoilMov
      // Buscamos la tarifa a partir de un movimiento de gasto
      // pwError Indica si se tiene que generar un error si no se encuentra la tarifa

      prMovOtr.TESTFIELD(Proveedor);
      prMovOtr.TESTFIELD(Fecha);
      prMovOtr.TESTFIELD(Concepto, prMovOtr.Concepto::Gasoil);

      EXIT(BuscaTarifaGasoil(prMovOtr.Fecha,prMovOtr.Proveedor, prTar, pwError));
    END;

    PROCEDURE BuscaTarifaGasoil@1103355002(pwFecha@1103355005 : Date;pwCodProv@1103355002 : Code[20];VAR prTar@1103355003 : Record 7035383;pwError@1103355000 : Boolean) : Boolean;
    VAR
      lrTar@1103355001 : Record 7035383;
      lwOk@1103355004 : Boolean;
    BEGIN
      // BuscaTarifaGasoil
      // Buscamos la tarifa
      // pwError Indica si se tiene que generar un error si no se encuentra la tarifa

      CLEAR(prTar);
      CLEAR(lrTar);

      lrTar.SETCURRENTKEY(Concepto,"Fecha Desde","Fecha Hasta");
      lrTar.SETRANGE(Concepto       , lrTar.Concepto::Gasoil);
      IF pwFecha <> 0D THEN BEGIN
        lrTar.SETFILTER("Fecha Desde" ,'<=%1', pwFecha);
        lrTar.SETFILTER("Fecha Hasta" ,'>=%1', pwFecha);
      END;
      lrTar.SETRANGE(Proveedor      , pwCodProv);
      lwOk := lrTar.FINDFIRST;
      IF lwOk THEN
        prTar := lrTar;

      IF pwError AND (NOT lwOk) THEN // Si no se encuentra y se ha espeicificado as¡ se genera un error
        ERROR(Text012, pwFecha, pwCodProv);

      EXIT(lwOk);
    END;

    BEGIN
    {
      // AJS 24.05.2005
      // Creada funcion CorregirLitrosRepostados para que se puedan corregir los litros de cualquier repostaje

      $001 AJS 20072015 Abro la funcion GastosGasoil a todas las empresas que quieran poner proveedor en los repostajes

      $002 AJS 20072015 Corrijo error en la funcion GastosGasoil que necesita el codigo de conductor, no su alias
    }
    END.
  }
}
