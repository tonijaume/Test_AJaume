OBJECT Codeunit 3010551 Cost Account Mgt
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=CACEM6.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 15=rm,
                TableData 17=rm,
                TableData 3010554=rimd,
                TableData 3010581=r,
                TableData 3010582=r;
    OnRun=BEGIN
            DeleteTwoYrOldCostEntries;
          END;

  }
  CODE
  {
    VAR
      CaSetup@1150000 : Record 3010558;
      GlAcc@1150001 : Record 15;
      CostType@1150002 : Record 3010551;
      CostCenter@1150003 : Record 3010581;
      CostObject@1150004 : Record 3010582;
      DimensionValue@1150027 : Record 349;
      d@1150005 : Dialog;
      i@1150006 : Integer;
      NoOfCostTypes@1150007 : Integer;
      NoOfGlAcc@1150009 : Integer;
      RecsProcessed@1150008 : Integer;
      RecsCreated@1150015 : Integer;
      Text000@1150012 : TextConst 'ENU=This function transfers all income statement accounts from the chart of accounts to the chart of cost types.\\;ESP=La funci¢n transfiere todas las cuentas de regularizaci¢n desde el plan de cuentas hasta el plan tipos coste.\\';
      Text001@1150013 : TextConst 'ENU=All line types, including headings, begin-total and end-total, are transferred.\;ESP=Se transfieren todos los tipos de l¡nea, incluidos mayor, inicio total y fin total.\';
      Text002@1150014 : TextConst 'ENU=G/L accounts that have the same number as an already existing cost type, are not transferred.\\;ESP=Las cuentas que tienen el mismo n£mero que un tipo coste existente no se transfieren.\\';
      Text003@1150025 : TextConst 'ENU=Indent %1?;ESP=¨Aplicar sangr¡a a %1?';
      Text004@1150016 : TextConst 'ENU=Start job?;ESP=¨Iniciar tarea?';
      Text006@1150018 : TextConst 'ENU="Create cost types:\ ";ESP="Crear tipos coste:\ "';
      Text007@1150019 : TextConst 'ENU=Number   #1########;ESP=N£mero   #1########';
      Text008@1150020 : TextConst 'ENU=%1 income statement accounts processed. %2 cost types created.;ESP=%1 cuentas de regularizaci¢n procesadas. Se han creado %2 tipos coste.';
      Text017@1150029 : TextConst 'ENU=Indent chart of cost types\;ESP=Aplicar sangr¡a a plan tipos coste\';
      Text019@1150031 : TextConst 'ENU=End-total %1 does not belong to a corresponding begin-total.;ESP=Fin total %1 no pertenece a un inicio total correspondiente.';
      Text020@1150032 : TextConst 'ENU=This function registers the cost types in the chart of accounts.\\;ESP=La funci¢n registra los tipos coste en el plan de cuentas.\\';
      Text021@1150033 : TextConst 'ENU=This creates the link between chart of accounts and cost types and checks that each G/L account is only linked to a single cost type.\\;ESP=Esto crea el v¡nculo entre el plan de cuentas y los tipos coste y comprueba que cada cuenta s¢lo est‚ vinculada a un £nico tipo coste.\\';
      Text024@1150036 : TextConst 'ENU=%1 cost types processed and logged in %2 G/L accounts.;ESP=Se han procesado y registrado %1 tipos coste en %2 cuentas.';
      Text025@1150037 : TextConst 'ENU=Check assignment cost type - G/L account\;ESP=Comprobar asignaci¢n tipo coste - cuenta\';
      Text027@1150039 : TextConst 'ENU=Cost type %1 should be assigned to G/L account %2.\;ESP=El tipo coste %1 deber¡a asignarse a la cuenta %2.\';
      Text028@1150040 : TextConst 'ENU=Cost type %3 is already linked to G/L account %2.\\;ESP=El tipo coste %3 ya est  vinculado a la cuenta %2.\\';
      Text029@1150041 : TextConst 'ENU=Each G/L account can only be linked to a single cost type.\;ESP=Cada cuenta s¢lo puede vincularse a un £nico tipo coste.\';
      Text030@1150042 : TextConst 'ENU=However, it is possible to link multiple G/L accounts to a single cost type.;ESP=Sin embargo, es posible vincular varias cuentas a un £nico tipo coste.';
      Text034@1150046 : TextConst 'ENU=Indenting chart\;ESP=Sangr¡a de plan\';
      Text036@1150048 : TextConst 'ENU=End-total %1 does not belong to a begin-total.;ESP=Fin total %1 no pertenece a un inicio total.';
      Text037@1150049 : TextConst 'ENU=If you use sort orders, you can not use more than one level of begin-totals and end-totals.;ESP=Si usa criterios de ordenaci¢n, no puede usar m s de un nivel de inicios totales y fines totales.';
      Text039@1150051 : TextConst 'ENU=The range is too long an cannot be transferred to the field end-total.\\;ESP=El rango es demasiado largo y no se puede transferir al campo fin total.\\';
      Text040@1150052 : TextConst 'ENU=Move the end-total closer to the begin-total or use shorter codes.;ESP=Acerque fin total al inicio total o use c¢digos m s cortos.';
      Text051@1150063 : TextConst 'ENU=%1 %2 is not defined in cost accounting.;ESP=No se ha definido %1 %2 en contabilidad costes.';
      Text052@1150064 : TextConst 'ENU=%1 %2 is blocked in cost accounting.;ESP=Se ha bloqueado %1 %2 en contabilidad costes.';
      Text053@1150065 : TextConst 'ENU=%1 %2 does not have line type %1 or begin-total.;ESP=%1 %2 no tiene tipo l¡nea %1 o inicio total.';
      Text057@1150069 : TextConst 'ENU=This function deletes cost entries of past years. The entries in the cost register are kept as a reference.\;ESP=La funci¢n elimina movs. coste de a¤os anteriores. Los movimientos del registro costes se conservan como referencia.\';
      Text058@1150071 : TextConst 'ENU=You can only delete cost entries that are older than last year.\\;ESP=S¢lo puede eliminar movs. coste anteriores al a¤o previo.\\';
      Text059@1150072 : TextConst 'ENU="Make a backup before you delete and make sure that all necessary reports have been printed and that in the future, you will not be able to compare previous year figures.\\ ";ESP="Realice una copia de seguridad antes de eliminar y aseg£rese de haber impreso todos los informes necesarios. En el futuro, no podr  comparar cifras de a¤os anteriores.\\ "';
      Text060@1150076 : TextConst 'ENU=The entries will irrevocably be deleted.\\;ESP=Se eliminar n irrevocablemente los movimientos.\\';
      Text061@1150077 : TextConst 'ENU=Year end date: #1#######;ESP=Fecha fin a¤o: #1#######';
      Text067@1150079 : TextConst 'ENU=%1 is not at year''s end.;ESP=%1 no es el fin del a¤o.';
      Text068@1150080 : TextConst 'ENU=The selected year end date %1 must be older than last year.;ESP=La fecha fin a¤o %1 seleccionada debe ser anterior al a¤o previo.';
      Text069@1150081 : TextConst 'ENU=Delete all cost entries up to and including %1?;ESP=¨Desea eliminar todos los movs. coste hasta %1, inclusive?';
      Text070@1150082 : TextConst 'ENU=Are you sure?;ESP=¨Est  seguro?';
      Text071@1150083 : TextConst 'ENU=Cost entries are being deleted.;ESP=Se est n eliminando movs. coste.';
      Text072@1150084 : TextConst 'ENU=All cost entries up to and including %1 deleted.;ESP=Se han eliminado todos los movs. coste hasta %1, inclusive.';
      Text073@1150085 : TextConst 'ENU=No cost entries found before %1.;ESP=No se encontraron movs. coste delante de %1.';
      Text074@1150086 : TextConst 'ENU=Do you want to %1 %2 %3 in Cost Accounting?;ESP=¨Desea %1 %2 %3 en Contabilidad costes?';
      Text075@1150087 : TextConst 'ENU=%1 %2 has been updated in Cost Accounting.;ESP=Se ha actualizado %1 %2 en Contabilidad costes.';
      Text076@1150010 : TextConst 'ENU="Create dimension\ ";ESP="Crear dimensi¢n\ "';
      Text077@1150028 : TextConst 'ENU=%1 cost centers created.;ESP=%1 centros coste creados.';
      Text078@1150034 : TextConst 'ENU=%1 cost objects created.;ESP=%1 objetos coste creados.';
      Text080@1150035 : TextConst 'ENU=Get cost centers from global dimension 1?;ESP=¨Obtener centros coste de dimensi¢n global 1?';
      Text081@1150038 : TextConst 'ENU=Get cost objects from global dimension 2?;ESP=¨Obtener objetos coste de dimensi¢n global 2?';
      Text082@1150089 : TextConst 'ENU=The %1 %2 cannot be inserted because it already exists as %3.;ESP=%1 %2 no se puede insertar porque ya existe como %3.';
      Text083@1150091 : TextConst 'ENU=create;ESP=crear';
      Text084@1150092 : TextConst 'ENU=update;ESP=actualizar';

    PROCEDURE GetCostTypesFromChartOfAccount@3();
    BEGIN
      IF NOT CONFIRM(Text000 + Text001 + Text002 + Text004,TRUE) THEN
        ERROR('');

      GetCostTypesFromChartDirect;

      IndentCostTypes(TRUE);

      MESSAGE(Text008,NoOfGlAcc,RecsCreated)
    END;

    PROCEDURE GetCostTypesFromChartDirect@1150003();
    BEGIN
      NoOfGlAcc := 0;
      RecsCreated := 0;
      d.OPEN(Text006 +
        Text007);

      WITH GlAcc DO BEGIN
        RESET;
        SETRANGE("Income/Balance","Income/Balance"::"Income Statement");
        IF FIND('-') THEN
          REPEAT

            d.UPDATE(1,"No.");
            NoOfGlAcc := NoOfGlAcc + 1;

            CostType.INIT;
            CostType."No." := "No.";
            CostType.Name := Name;
            CostType."Search Name" := "Search Name";
            CostType."Line Type" := "Account Type";
            CostType."Cost Center Code" := "Global Dimension 1 Code";
            CostType."Cost Object Code" := "Global Dimension 2 Code";
            CostType."New Page" := "New Page";
            IF "No. of Blank Lines" > 0 THEN
              CostType."Blank Line" := TRUE;
            CostType."Total From/To" := Totaling;
            CostType."Modified Date" := TODAY;
            IF "Account Type" = "Account Type"::Posting THEN
              CostType."G/L Account Range" := "No."
            ELSE
              CostType."G/L Account Range" := '';

            // Insert, but not overwrite
            IF CostType.INSERT THEN
              RecsCreated := RecsCreated + 1;

            // Write reference to cost type on G/L account
            "Cost Type No." := "No.";
            MODIFY;
          UNTIL NEXT = 0;
        d.CLOSE;
      END;

      IndentCostTypes(TRUE);
    END;

    PROCEDURE UpdateCostTypeFromGlAcc@7(VAR GlAcc@1150000 : Record 15;VAR xGlAcc@1150001 : Record 15;CallingTrigger@1150002 : 'OnInsert,OnModify,,OnRename');
    BEGIN
      // Change cost type according to new or modified P/L revenue account
      IF GlAcc."Income/Balance" = GlAcc."Income/Balance"::"Balance Sheet" THEN
        EXIT;

      // If no change in record
      IF FORMAT(GlAcc) = FORMAT(xGlAcc) THEN
        EXIT;

      IF NOT CaSetup.GET THEN
        CaSetup.INIT;

      IF CaSetup."Align G/L Account" = CaSetup."Align G/L Account"::"No Alignment" THEN
        EXIT;

      IF CaSetup."Align G/L Account" = CaSetup."Align G/L Account"::Prompt THEN
        IF NOT CONFIRM(Text074,TRUE,Text084,CostType.TABLECAPTION,GlAcc."No.") THEN
          EXIT;

      CASE CallingTrigger OF
        CallingTrigger::OnInsert,CallingTrigger::OnModify:
          WITH GlAcc DO BEGIN
            CostType."No." := "No.";
            CostType.Name := Name;
            CostType."Search Name" := "Search Name";
            CostType."Line Type" := "Account Type";
            CostType."Cost Center Code" := "Global Dimension 1 Code";
            CostType."Cost Object Code" := "Global Dimension 2 Code";
            CostType."New Page" := "New Page";
            IF "No. of Blank Lines" > 0 THEN
              CostType."Blank Line" := TRUE;
            CostType."Total From/To" := Totaling;
            CostType."Modified Date" := TODAY;
            IF "Account Type" = "Account Type"::Posting THEN
              CostType."G/L Account Range" := "No."
            ELSE
              CostType."G/L Account Range" := '';

            IF NOT CostType.INSERT THEN
              CostType.MODIFY;

            // Write cost type to G/L account
            "Cost Type No." := CostType."No.";
          END;
        CallingTrigger::OnRename:
          BEGIN
            IF CostType.GET(GlAcc."No.") THEN
              ERROR(Text082,GlAcc.TABLECAPTION,GlAcc."No.",CostType.TABLECAPTION);
            IF CostType.GET(xGlAcc."No.") THEN BEGIN
              CostType.RENAME(GlAcc."No.");
              CostType."G/L Account Range" := GlAcc."No.";
              CostType.MODIFY;
              GlAcc ."Cost Type No." := GlAcc."No.";
            END ELSE
              EXIT;
          END;
      END;
      IndentCostTypes(FALSE);

      IF CaSetup."Align G/L Account" = CaSetup."Align G/L Account"::Prompt THEN
        MESSAGE(Text075,CostType.TABLECAPTION,GlAcc."No.");
    END;

    PROCEDURE UpdateGlDimensionsWithCcAndCo@1150000(VAR DimValue@1150000 : Record 349;VAR xDimValue@1150001 : Record 349;CallingTrigger@1150002 : 'OnInsert,OnModify,,OnRename');
    BEGIN
      // Change cost type according to new or modified G/L revenue account
      IF NOT CaSetup.GET THEN
        CaSetup.INIT;

      // Only Global 1 / 2
      IF DimValue."Global Dimension No." = 0 THEN
        EXIT;

      // Skip because indent not possible
      IF DimValue."Dimension Value Type" IN
         [DimValue."Dimension Value Type"::"Begin-Total",DimValue."Dimension Value Type"::"End-Total"]
      THEN
        EXIT;

      CASE DimValue."Global Dimension No." OF
        1:  // *** Global 1 = Cost Center
          BEGIN
            IF CaSetup."Align Global Dimension 1" = CaSetup."Align Global Dimension 1"::"No Alignment" THEN
              EXIT;
            IF CaSetup."Align Global Dimension 1" = CaSetup."Align Global Dimension 1"::Prompt THEN BEGIN
              CASE CallingTrigger OF
                CallingTrigger::OnInsert:
                  BEGIN
                    IF NOT CONFIRM(Text074,TRUE,Text083,CostCenter.TABLECAPTION,DimValue.Code) THEN
                      EXIT;
                  END;
              CallingTrigger::OnModify:
                BEGIN
                  IF NOT CostCenter.GET(DimValue.Code) THEN
                    EXIT;
                  IF NOT CONFIRM(Text074,TRUE,Text084,CostCenter.TABLECAPTION,DimValue.Code) THEN
                    EXIT;
                END;
              CallingTrigger::OnRename:
                BEGIN
                  IF NOT CostCenter.GET(xDimValue.Code) THEN
                    EXIT;
                  IF NOT CONFIRM(Text074,TRUE,Text084,CostCenter.TABLECAPTION,DimValue.Code) THEN
                    EXIT;
                END;
              END;
            END;

            CASE CallingTrigger OF
              CallingTrigger::OnInsert:
                BEGIN
                  IF CostCenter.GET(DimValue.Code) THEN
                    ERROR(Text082,DimValue.Code,CostCenter.TABLECAPTION);
                  CostCenter.Code := DimValue.Code;
                  CostCenter.Name := DimValue.Name;
                  CostCenter."Line Type" := DimValue."Dimension Value Type";
                  CostCenter.Blocked := DimValue.Blocked;
                  CostCenter.INSERT;
                END;

              CallingTrigger::OnModify:
                BEGIN
                  IF CostCenter.GET(DimValue.Code) THEN BEGIN
                    CostCenter.Name := DimValue.Name;
                    CostCenter."Line Type" := DimValue."Dimension Value Type";
                    CostCenter.Blocked := DimValue.Blocked;
                    CostCenter.MODIFY;
                  END;
                END;

              CallingTrigger::OnRename:
                BEGIN
                  IF CostCenter.GET(DimValue.Code) THEN
                    ERROR(Text082,DimValue.TABLECAPTION,DimValue.Code,CostObject.TABLECAPTION);
                  IF CostCenter.GET(xDimValue.Code) THEN
                    CostCenter.RENAME(DimValue.Code)
                  ELSE
                    EXIT;
                END;
            END;

            IndentCostCenters;

            MESSAGE(Text075,CostCenter.TABLECAPTION,DimValue.Code);
          END;

        2: // *** Global 2 = Cost Object
          BEGIN
            IF CaSetup."Align Global Dimension 2" = CaSetup."Align Global Dimension 2"::"No Alignment" THEN
              EXIT;
            IF CaSetup."Align Global Dimension 2" = CaSetup."Align Global Dimension 2"::Prompt THEN BEGIN
              CASE CallingTrigger OF
                CallingTrigger::OnInsert:
                  BEGIN
                    IF NOT CONFIRM(Text074,TRUE,Text083,CostObject.TABLECAPTION,DimValue.Code) THEN
                      EXIT;
                  END;
              CallingTrigger::OnModify:
                BEGIN
                  IF NOT CostObject.GET(DimValue.Code) THEN
                    EXIT;
                  IF NOT CONFIRM(Text074,TRUE,Text084,CostObject.TABLECAPTION,DimValue.Code) THEN
                    EXIT;
                END;
              CallingTrigger::OnRename:
                BEGIN
                  IF NOT CostObject.GET(xDimValue.Code) THEN
                    EXIT;
                  IF NOT CONFIRM(Text074,TRUE,Text084,CostObject.TABLECAPTION,DimValue.Code) THEN
                    EXIT;
                END;
              END;
            END;

            CASE CallingTrigger OF
              CallingTrigger::OnInsert:
                BEGIN
                  IF CostObject.GET(DimValue.Code) THEN
                    ERROR(Text082,DimValue.Code,CostObject.TABLECAPTION);
                  CostObject.Code := DimValue.Code;
                  CostObject.Name := DimValue.Name;
                  CostObject."Line Type" := DimValue."Dimension Value Type";
                  CostObject.Blocked := DimValue.Blocked;
                  CostObject.INSERT;
                END;

              CallingTrigger::OnModify:
                BEGIN
                  IF CostObject.GET(DimValue.Code) THEN BEGIN
                    CostObject.Name := DimValue.Name;
                    CostObject."Line Type" := DimValue."Dimension Value Type";
                    CostObject.Blocked := DimValue.Blocked;
                    CostObject.MODIFY;
                  END;
                END;

              CallingTrigger::OnRename:
                BEGIN
                  IF CostObject.GET(DimValue.Code) THEN
                    ERROR(Text082,DimValue.TABLECAPTION,DimValue.Code,CostObject.TABLECAPTION);
                  IF CostObject.GET(xDimValue.Code) THEN
                    CostObject.RENAME(DimValue.Code)
                  ELSE
                    EXIT;
                END;
            END;

            IndentCostObjects;
            MESSAGE(Text075,CostObject.TABLECAPTION,DimValue.Code);
          END;
      END;
    END;

    PROCEDURE IndentCostTypesYN@5();
    BEGIN
      IF NOT CONFIRM(Text003,TRUE,CostType.TABLECAPTION) THEN
        ERROR('');

      IndentCostTypes(TRUE);
    END;

    PROCEDURE IndentCostTypes@1(ShowMessage@1150001 : Boolean);
    VAR
      CostTypeNo@1150000 : ARRAY [10] OF Code[20];
    BEGIN
      i := 0;
      IF ShowMessage THEN
        d.OPEN(Text017 + // Indent Chart of Cost Types
           Text007);  // Number #1

      WITH CostType DO BEGIN
        IF FIND('-') THEN BEGIN
          REPEAT

            IF ShowMessage THEN
              d.UPDATE(1,"No.");

            IF "Line Type" = "Line Type"::"End-Total" THEN BEGIN
              IF i < 1 THEN
                ERROR(Text019,"No.");
              "Total From/To" := CostTypeNo[i] + '..' + "No.";
              i := i - 1;
            END;

            Indentation := i;
            MODIFY;

            IF "Line Type" = "Line Type"::"Begin-Total" THEN BEGIN
              i := i + 1;
              CostTypeNo[i] := "No.";
            END;
          UNTIL NEXT = 0;
        END;
      END;

      IF ShowMessage THEN
        d.CLOSE;
    END;

    PROCEDURE LinkCostTypesToGlAccountsYN@4();
    BEGIN
      IF NOT CONFIRM(Text020 + Text021 + Text004,TRUE) THEN
        ERROR('');

      CLEARALL;

      // CHeck assignment
      LinkCostTypesToGlAccounts;

      MESSAGE(Text024,NoOfCostTypes,NoOfGlAcc);
    END;

    PROCEDURE LinkCostTypesToGlAccounts@2();
    BEGIN
      d.OPEN(Text025 +
        Text007);

      GlAcc.RESET;
      CostType.RESET;
      GlAcc.MODIFYALL("Cost Type No.",'');
      CostType.SETRANGE("Line Type",CostType."Line Type"::"Cost Type");  // GL accounts that belong to cost types
      CostType.SETFILTER("G/L Account Range",'<>%1','');  // only with assigned GL account
      IF CostType.FIND('-') THEN
        REPEAT
          d.UPDATE(1,CostType."No.");
          NoOfCostTypes := NoOfCostTypes + 1;
          GlAcc.SETFILTER("No.",CostType."G/L Account Range");
          IF GlAcc.FIND('-') THEN REPEAT
              IF GlAcc."Cost Type No." <> '' THEN BEGIN
                d.CLOSE;
                ERROR(Text027 + Text028 + Text029 + Text030,CostType."No.",GlAcc."No.",GlAcc."Cost Type No.");
              END;
              GlAcc."Cost Type No." := CostType."No.";
              NoOfGlAcc := NoOfGlAcc + 1;
              GlAcc.MODIFY;
            UNTIL GlAcc.NEXT = 0;
        UNTIL CostType.NEXT = 0;

      d.CLOSE;
    END;

    PROCEDURE GetCostCentersFromDim1@1150001();
    BEGIN
      IF NOT CONFIRM(Text080,TRUE) THEN
        ERROR('');

      RecsProcessed := 0;
      RecsCreated := 0;
      d.OPEN(Text076 +
        Text007);

      WITH CostCenter DO BEGIN
        RESET;
        DimensionValue.SETRANGE("Global Dimension No.",1);
        IF DimensionValue.FIND('-') THEN BEGIN
          REPEAT

            d.UPDATE(1,Code);

            INIT;
            Code := DimensionValue.Code;
            Name := DimensionValue.Name;
            "Line Type" := DimensionValue."Dimension Value Type";
            Blocked := DimensionValue.Blocked;
            IF INSERT THEN
              RecsProcessed := RecsProcessed + 1;

          UNTIL DimensionValue.NEXT = 0;
          d.CLOSE;

        END;
      END;

      IndentCostCenters;

      MESSAGE(Text077,RecsProcessed);
    END;

    PROCEDURE IndentCostCentersYN@6();
    BEGIN
      IF NOT CONFIRM(Text003,TRUE,CostCenter.TABLECAPTION) THEN
        ERROR('');

      IndentCostCenters;
    END;

    PROCEDURE IndentCostCenters@8();
    VAR
      CostCenterRange@1150000 : Code[250];
      StartRange@1150001 : ARRAY [10] OF Code[20];
      SpecialSort@1150002 : Boolean;
    BEGIN
      SpecialSort := FALSE;
      i := 0;

      d.OPEN(Text034 + // Indenting chart
         Text007);  // No #1

      WITH CostCenter DO BEGIN
        SETCURRENTKEY("Sorting Order");
        SETFILTER("Sorting Order",'<>%1','');
        IF FIND('-') THEN
          SpecialSort := TRUE;

        RESET;

        // Cost centers with special sort order
        IF SpecialSort THEN BEGIN
          SETCURRENTKEY("Sorting Order");
          IF FIND('-') THEN REPEAT

              // End-Total: Write range, reduce indent
              IF "Line Type" = "Line Type"::"End-Total" THEN BEGIN
                "Total From/To" := CostCenterRange;
                IF i < 1 THEN
                  ERROR(Text036,Code);
                i := i - 1;
              END;

              Indentation := i;
              MODIFY;

              // Begin-Total: Delete range
              IF "Line Type" = "Line Type"::"Begin-Total" THEN BEGIN
                CostCenterRange := '';
                i := i + 1;
                IF i > 1 THEN
                  ERROR(Text037);
              END;

              // Cost center: Add to range, if begin-total has set level to 1.
              IF (("Line Type" = "Line Type"::"Cost Center") AND (i = 1)) OR
                 ("Line Type" = "Line Type"::"Begin-Total") THEN BEGIN
                // CHeck string length
                IF STRLEN(CostCenterRange) + STRLEN(Code) > MAXSTRLEN(CostCenterRange) THEN
                  ERROR(Text039 + Text040);

                IF CostCenterRange = '' THEN
                  CostCenterRange := Code
                ELSE
                  CostCenterRange := CostCenterRange + '|' + Code;

              END;
            UNTIL NEXT = 0;

        END ELSE BEGIN

          // Sort by Cost Object Code
          SETCURRENTKEY(Code);
          IF FIND('-') THEN
            REPEAT
              d.UPDATE(1,Code);

              IF "Line Type" = "Line Type"::"End-Total" THEN BEGIN
                IF i < 1 THEN
                  ERROR(Text019,Code);
                "Total From/To" := StartRange[i] + '..' + Code;
                i := i - 1;
              END;

              Indentation := i;
              MODIFY;

              IF "Line Type" = "Line Type"::"Begin-Total" THEN BEGIN
                i := i + 1;
                StartRange[i] := Code;
              END;
            UNTIL NEXT = 0;
        END;
      END;
      d.CLOSE;
    END;

    PROCEDURE GetCostObjectsFromDim2@1150002();
    BEGIN
      IF NOT CONFIRM(Text081,TRUE) THEN
        ERROR('');

      RecsProcessed := 0;
      RecsCreated := 0;
      d.OPEN(Text076 +
        Text007);

      WITH CostObject DO BEGIN
        RESET;
        DimensionValue.SETRANGE("Global Dimension No.",2);
        IF DimensionValue.FIND('-') THEN BEGIN
          REPEAT

            d.UPDATE(1,Code);

            INIT;
            Code := DimensionValue.Code;
            Name := DimensionValue.Name;
            "Line Type" := DimensionValue."Dimension Value Type";
            Blocked := DimensionValue.Blocked;
            IF INSERT THEN
              RecsProcessed := RecsProcessed + 1;

          UNTIL DimensionValue.NEXT = 0;
          d.CLOSE;

        END;
      END;

      IndentCostObjects;

      MESSAGE(Text078,RecsProcessed);
    END;

    PROCEDURE IndentCostObjectsYN@9();
    BEGIN
      IF NOT CONFIRM(Text003,TRUE,CostObject.TABLECAPTION) THEN
        ERROR('');

      IndentCostObjects;
    END;

    PROCEDURE IndentCostObjects@10();
    VAR
      CostObjRange@1150000 : Code[250];
      StartRange@1150001 : ARRAY [10] OF Code[20];
      SpecialSort@1150002 : Boolean;
    BEGIN
      SpecialSort := FALSE;
      i := 0;

      d.OPEN(Text034 + // Indenting chart
         Text007);  // No #1

      WITH CostObject DO BEGIN

        SETCURRENTKEY("Sorting Order");
        SETFILTER("Sorting Order",'<>%1','');
        IF FIND('-') THEN
          SpecialSort := TRUE;

        RESET;

        // Cost Object Plan with special sort
        IF SpecialSort THEN BEGIN
          SETCURRENTKEY("Sorting Order");
          IF FIND('-') THEN REPEAT

              // End-Total: Write range, reduce indent
              IF "Line Type" = "Line Type"::"End-Total" THEN BEGIN
                "Total From/To" := CostObjRange;
                IF i < 1 THEN
                  ERROR(Text036,Code);
                i := i - 1;
              END;

              Indentation := i;
              MODIFY;

              // Begin-Total: Delete range
              IF "Line Type" = "Line Type"::"Begin-Total" THEN BEGIN
                CostObjRange := '';
                i := i + 1;
                IF i > 1 THEN
                  ERROR(Text037);
              END;


              // Cost object: Add to range, if begin-total has set level to 1.
              IF (("Line Type" = "Line Type"::"Cost Object") AND (i = 1)) OR
                 ("Line Type" = "Line Type"::"Begin-Total") THEN BEGIN
                // CHeck string length
                IF STRLEN(CostObjRange) + STRLEN(Code) > MAXSTRLEN(CostObjRange) THEN
                  ERROR(Text039 + Text040);

                IF CostObjRange = '' THEN
                  CostObjRange := Code
                ELSE
                  CostObjRange := CostObjRange + '|' + Code;

              END;
            UNTIL NEXT = 0;

        END ELSE BEGIN

          // Sort by cost object code
          SETCURRENTKEY(Code);
          IF FIND('-') THEN
            REPEAT
              d.UPDATE(1,Code);

              IF "Line Type" = "Line Type"::"End-Total" THEN BEGIN
                IF i < 1 THEN
                  ERROR(Text019,Code);
                "Total From/To" := StartRange[i] + '..' + Code;
                i := i - 1;
              END;

              Indentation := i;
              MODIFY;

              IF "Line Type" = "Line Type"::"Begin-Total" THEN BEGIN
                i := i + 1;
                StartRange[i] := Code;
              END;
            UNTIL NEXT = 0;
        END;
      END;
      d.CLOSE;
    END;

    PROCEDURE CheckValidCcAndCoInGlEntry@11(GenJnlLine@1150002 : Record 81);
    VAR
      CC@1150000 : Code[20];
      CO@1150001 : Code[20];
    BEGIN
      IF NOT CaSetup.GET THEN
        EXIT;
      IF NOT CaSetup."Check G/L Postings" THEN
        EXIT;

      CC := GenJnlLine."Shortcut Dimension 1 Code";
      CO := GenJnlLine."Shortcut Dimension 2 Code";

      IF CC <> '' THEN BEGIN
        IF NOT CostCenter.GET(CC) THEN
          ERROR(Text051,CostCenter.TABLECAPTION,CC);
        IF CostCenter.Blocked THEN
          ERROR(Text052,CostCenter.TABLECAPTION,CC);
        IF NOT (CostCenter."Line Type" IN [CostCenter."Line Type"::"Cost Center",CostCenter."Line Type"::"Begin-Total"]) THEN
          ERROR(Text053,CostCenter.TABLECAPTION,CC);
      END;

      IF CO <> '' THEN BEGIN
        IF NOT CostObject.GET(CO) THEN
          ERROR(Text051,CostObject.TABLECAPTION,CO);
        IF CostObject.Blocked THEN
          ERROR(Text052,CostObject.TABLECAPTION,CO);
        IF NOT (CostObject."Line Type" IN [CostObject."Line Type"::"Cost Object",CostObject."Line Type"::"Begin-Total"]) THEN
          ERROR(Text053,CostObject.TABLECAPTION,CO);
      END;
    END;

    PROCEDURE DeleteTwoYrOldCostEntries@12();
    VAR
      CaEntry@1150003 : Record 3010554;
      Window@1150004 : Dialog;
      i@1150000 : Integer;
      EndOfYear@1150001 : Date;
      DeletePYCostEntriesInput@1100000 : Form 36888;
    BEGIN
      IF NOT CONFIRM(Text057 + Text058 + Text059 + Text060 + Text004) THEN
        EXIT;


      IF NOT ISSERVICETIER THEN BEGIN
        Window.OPEN(Text061);
        REPEAT
          i := Window.INPUT(1,EndOfYear);
          IF i = 0 THEN EXIT;
        UNTIL (EndOfYear <> 0D);
      END ELSE BEGIN
        IF DeletePYCostEntriesInput.RUNMODAL = ACTION::OK THEN
          DeletePYCostEntriesInput.GetEndOfYear(EndOfYear)
        ELSE
          EXIT;
      END;

      IF EndOfYear <> CALCDATE('<CY>',EndOfYear) THEN
        ERROR(Text067,EndOfYear);

      IF WORKDATE - EndOfYear < 365 THEN
        ERROR(Text068,EndOfYear);

      IF NOT CONFIRM(Text069,FALSE,EndOfYear) THEN
        EXIT;

      IF NOT CONFIRM(Text070) THEN
        EXIT;

      Window.OPEN(Text071);
      CaEntry.SETCURRENTKEY("Cost Type No.","Posting Date");
      CaEntry.SETRANGE("Posting Date",0D,EndOfYear);
      IF CaEntry.FIND('-') THEN BEGIN
        CaEntry.DELETEALL;
        MESSAGE(Text072,EndOfYear);
      END ELSE
        ERROR(Text073,EndOfYear);
    END;

    BEGIN
    END.
  }
}
