OBJECT Codeunit 80 Sales-Post
{
  OBJECT-PROPERTIES
  {
    Date=09/05/14;
    Time=11:45:17;
    Modified=Yes;
    Version List=AIC2009,NAVW16.00.01,NAVES6.00.01,RegF269949;
  }
  PROPERTIES
  {
    TableNo=36;
    Permissions=TableData 37=imd,
                TableData 38=m,
                TableData 39=m,
                TableData 49=imd,
                TableData 110=imd,
                TableData 111=imd,
                TableData 112=imd,
                TableData 113=imd,
                TableData 114=imd,
                TableData 115=imd,
                TableData 120=imd,
                TableData 121=imd,
                TableData 223=imd,
                TableData 252=imd,
                TableData 357=imd,
                TableData 359=imd,
                TableData 6507=ri,
                TableData 6508=rid,
                TableData 6660=imd,
                TableData 6661=imd;
    OnRun=VAR
            TempJnlLineDim@1001 : TEMPORARY Record 356;
            Opp@1000 : Record 5092;
            OpportunityEntry@1006 : Record 5093;
            ItemEntryRelation@1010 : Record 6507;
            TempInvoicingSpecification@1011 : TEMPORARY Record 336;
            DummyTrackingSpecification@1012 : Record 336;
            ICHandledInboxTransaction@1015 : Record 420;
            Cust@1016 : Record 18;
            ICPartner@1017 : Record 413;
            PurchSetup@1019 : Record 312;
            PurchCommentLine@1018 : Record 43;
            UpdateAnalysisView@1002 : Codeunit 410;
            UpdateItemAnalysisView@1014 : Codeunit 7150;
            ICInOutBoxMgt@1008 : Codeunit 427;
            CostBaseAmount@1004 : Decimal;
            TrackingSpecificationExists@1007 : Boolean;
            EndLoop@1009 : Boolean;
            DocType@1022 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund,Shipment';
            TempJnlLineDim2@1023 : TEMPORARY Record 356;
            TempPrePmtAmtToDeduct@1003 : Decimal;
          BEGIN
            IF PostingDateExists AND (ReplacePostingDate OR ("Posting Date" = 0D)) THEN BEGIN
              "Posting Date" := PostingDate;
              VALIDATE("Currency Code");
            END;

            IF PostingDateExists AND (ReplaceDocumentDate OR ("Document Date" = 0D)) THEN BEGIN
              VALIDATE("Document Date",PostingDate);
              SalesHeader.ValidatePaymentTerms();
            END;

            CLEARALL;
            SalesHeader := Rec;
            ServiceItemTmp2.DELETEALL;
            ServiceItemCmpTmp2.DELETEALL;
            WITH SalesHeader DO BEGIN
              TESTFIELD("Document Type");
              TESTFIELD("Sell-to Customer No.");
              TESTFIELD("Bill-to Customer No.");
              TESTFIELD("Posting Date");
              TESTFIELD("Document Date");

              //$001  INCOMING
              rPar.FINDFIRST;
              IF (rPar."Departamento obligatorio") AND (NOT SalesHeader.Anulaci¢n) THEN
                SalesHeader.TESTFIELD("Shortcut Dimension 1 Code");

              IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
                FIELDERROR("Posting Date",Text045);

              IF TransportMethod.GET("Transport Method") AND TransportMethod."Port/Airport" THEN
                TESTFIELD("Exit Point");
              SalesSetup.GET;
              IF SalesSetup."Calc. Inv. Discount" THEN BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type","Document Type");
                SalesLine.SETRANGE("Document No.","No.");
                SalesLine.FIND('-');
                TempInvoice := Invoice;
                TempShpt := Ship;
                MODIFY;
                SalesCalcDisc.RUN(SalesLine);
                GET("Document Type","No.");
                Invoice := TempInvoice;
                Ship := TempShpt;
                COMMIT;
              END;
              PaymentTerms.GET("Payment Terms Code");

              CASE "Document Type" OF
                "Document Type"::Order:
                  Receive := FALSE;
                "Document Type"::Invoice:
                  BEGIN
                    Ship := TRUE;
                    Invoice := TRUE;
                    Receive := FALSE;
                  END;
                "Document Type"::"Return Order":
                  Ship := FALSE;
                "Document Type"::"Credit Memo":
                  BEGIN
                    Ship := FALSE;
                    Invoice := TRUE;
                    Receive := TRUE;
                  END;
              END;

              IF NOT (Ship OR Invoice OR Receive) THEN
                ERROR(
                  Text020,
                  FIELDCAPTION(Ship),FIELDCAPTION(Invoice),FIELDCAPTION(Receive));

              WhseReference := "Posting from Whse. Ref.";
              "Posting from Whse. Ref." := 0;

              IF Invoice THEN
                CreatePrepaymentLines(SalesHeader,TempPrepaymentSalesLine,PrepmtDocDim,TRUE);
              CopyAndCheckDocDimToTempDocDim;

              CopyAprvlToTempApprvl;

              SalesSetup.GET;
              Cust.GET("Sell-to Customer No.");
              IF Receive THEN
                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,TRUE)
              ELSE BEGIN
                IF Ship AND
                   ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND SalesSetup."Shipment on Invoice")
                THEN BEGIN
                  SalesLine.RESET;
                  SalesLine.SETRANGE("Document Type","Document Type");
                  SalesLine.SETRANGE("Document No.","No.");
                  SalesLine.SETFILTER(SalesLine."Qty. to Ship",'<>0');
                  SalesLine.SETRANGE("Shipment No.",'');
                  IF NOT SalesLine.ISEMPTY THEN
                    Cust.CheckBlockedCustOnDocs(Cust,"Document Type",TRUE,TRUE);
                END ELSE
                  Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,TRUE);
              END;

            IF ("Document Type" = "Document Type"::"Credit Memo") OR
              (("Document Type" = "Document Type"::"Return Order") AND Invoice) THEN BEGIN // es0012
                  IF SalesSetup."Correct. Doc. No. Mandatory" THEN
                    TESTFIELD("Corrected Invoice No.")
                  ELSE BEGIN
                    IF "Corrected Invoice No." = '' THEN
                      IF NOT
                        CONFIRM(
                          Text1100000,FALSE)
                      THEN
                        ERROR(Text1100011);
                  END;
              //-$009IF "Corrected Invoice No." <> '' THEN
              //-$009  "Posting Description" := FORMAT(Text1100104) + ' ' + "No."
            END;

              IF "Bill-to Customer No." <> "Sell-to Customer No." THEN BEGIN
                Cust.GET("Bill-to Customer No.");
                IF Receive THEN
                  Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,TRUE)
                ELSE BEGIN
                  IF Ship THEN BEGIN
                    SalesLine.RESET;
                    SalesLine.SETRANGE("Document Type","Document Type");
                    SalesLine.SETRANGE("Document No.","No.");
                    SalesLine.SETFILTER(SalesLine."Qty. to Ship",'<>0');
                    IF NOT SalesLine.ISEMPTY THEN
                      Cust.CheckBlockedCustOnDocs(Cust,"Document Type",TRUE,TRUE);
                  END ELSE
                    Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,TRUE);
                END;
              END;


              IF (Ship OR Invoice) AND (NOT ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]))
              THEN BEGIN
                TESTFIELD("Payment Method Code");
                TESTFIELD("Payment Terms Code");
              END;

              IF Invoice THEN BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type","Document Type");
                SalesLine.SETRANGE("Document No.","No.");
                SalesLine.SETFILTER(Quantity,'<>0');
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
                  SalesLine.SETFILTER("Qty. to Invoice",'<>0');
                Invoice := NOT SalesLine.ISEMPTY;
                IF Invoice AND (NOT Ship) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
                  SalesLine.FINDSET;
                  Invoice := FALSE;
                  REPEAT
                    Invoice := SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced" <> 0;
                  UNTIL Invoice OR (SalesLine.NEXT = 0);
                END ELSE
                  IF Invoice AND (NOT Receive) AND ("Document Type" = "Document Type"::"Return Order") THEN BEGIN
                    SalesLine.FINDSET;
                    Invoice := FALSE;
                    REPEAT
                      Invoice := SalesLine."Return Qty. Received" - SalesLine."Quantity Invoiced" <> 0;
                    UNTIL Invoice OR (SalesLine.NEXT = 0);
                  END;
              END;
              IF Invoice THEN
                CopyAndCheckItemCharge(SalesHeader);

              IF Ship THEN BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type","Document Type");
                SalesLine.SETRANGE("Document No.","No.");
                SalesLine.SETFILTER(Quantity,'<>0');
                IF "Document Type" = "Document Type"::Order THEN
                  SalesLine.SETFILTER("Qty. to Ship",'<>0');
                SalesLine.SETRANGE("Shipment No.",'');
                Ship := SalesLine.FINDFIRST;
                WhseShip := TempWhseShptHeader.FINDFIRST;
                WhseReceive := TempWhseRcptHeader.FINDFIRST;
                InvtPickPutaway := WhseReference <> 0;
                IF Ship THEN
                  CheckTrackingSpecification(SalesLine);
                IF Ship AND NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
                  CheckWarehouse(SalesLine);
              END;

              IF Receive THEN BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type","Document Type");
                SalesLine.SETRANGE("Document No.","No.");
                SalesLine.SETFILTER(Quantity,'<>0');
                SalesLine.SETFILTER("Return Qty. to Receive",'<>0');
                SalesLine.SETRANGE("Return Receipt No.",'');
                Receive := SalesLine.FINDFIRST;
                WhseShip := TempWhseShptHeader.FINDFIRST;
                WhseReceive := TempWhseRcptHeader.FINDFIRST;
                InvtPickPutaway := WhseReference <> 0;
                IF Receive THEN
                  CheckTrackingSpecification(SalesLine);
                IF Receive AND NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
                  CheckWarehouse(SalesLine);
              END;

              IF NOT (Ship OR Invoice OR Receive) THEN
                IF NOT OnlyAssgntPosting THEN
                  ERROR(Text001);

              IF ("Shipping Advice" = "Shipping Advice"::Complete) AND
                 SalesLine.IsShipment
              THEN
                IF NOT GetShippingAdvice THEN
                  ERROR(Text023);

              IF Invoice THEN BEGIN
                IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN BEGIN
                  TESTFIELD("Due Date");
                  PaymentTerms.VerifyMaxNoDaysTillDueDate("Due Date","Document Date",FIELDCAPTION("Due Date"));
                END;
                Window.OPEN(
                  '#1#################################\\' +
                  Text002 +
                  Text003 +
                  Text004 +
                  Text1100102 + // es0011
                  Text1100103)
              END ELSE
                Window.OPEN(
                  '#1#################################\\' +
                  Text006);

              Window.UPDATE(1,STRSUBSTNO('%1 %2',"Document Type","No."));

              GLSetup.GET;
              GetCurrency;

              IF Ship AND ("Shipping No." = '') THEN
                IF ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND SalesSetup."Shipment on Invoice")
                THEN BEGIN
                  TESTFIELD("Shipping No. Series");
                  "Shipping No." := NoSeriesMgt.GetNextNo("Shipping No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;

              IF Receive AND ("Return Receipt No." = '') THEN
                IF ("Document Type" = "Document Type"::"Return Order") OR
                   (("Document Type" = "Document Type"::"Credit Memo") AND SalesSetup."Return Receipt on Credit Memo")
                THEN BEGIN
                  TESTFIELD("Return Receipt No. Series");
                  "Return Receipt No." := NoSeriesMgt.GetNextNo("Return Receipt No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;

              IF Invoice AND ("Posting No." = '') THEN BEGIN
                IF ("No. Series" <> '') OR
                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                THEN
                  TESTFIELD("Posting No. Series");
                IF ("No. Series" <> "Posting No. Series") OR
                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                THEN BEGIN
                  "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;
              END;

              IF NOT ItemChargeAssgntOnly THEN BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type","Document Type");
                SalesLine.SETRANGE("Document No.","No.");
                SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                IF NOT SalesLine.ISEMPTY THEN BEGIN
                  DropShipOrder := TRUE;
                  IF Ship THEN BEGIN
                    SalesLine.FINDSET;
                    REPEAT
                      IF PurchOrderHeader."No." <> SalesLine."Purchase Order No." THEN BEGIN
                        PurchOrderHeader.GET(
                          PurchOrderHeader."Document Type"::Order,
                          SalesLine."Purchase Order No.");
                        PurchOrderHeader.TESTFIELD("Pay-to Vendor No.");
                        IF PurchOrderHeader."Receiving No." = '' THEN BEGIN
                          PurchOrderHeader.TESTFIELD("Receiving No. Series");
                          PurchOrderHeader."Receiving No." :=
                            NoSeriesMgt.GetNextNo(PurchOrderHeader."Receiving No. Series","Posting Date",TRUE);
                          PurchOrderHeader.MODIFY;
                          ModifyHeader := TRUE;
                        END;
                      END;
                    UNTIL SalesLine.NEXT = 0;
                  END;
                END;
              END;
              IF ModifyHeader THEN BEGIN
                MODIFY;
              END;


              IF (Status = Status::Open) OR (Status = Status::"Pending Prepayment") THEN BEGIN
                TempInvoice := Invoice;
                TempShpt := Ship;
                TempReturn := Receive;
                CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
                Status := Status::Open;
                Invoice := TempInvoice;
                Ship := TempShpt;
                Receive := TempReturn;
                MODIFY;
                COMMIT;
                Status := Status::Released;
              END;

              IF Ship OR Receive THEN
                ArchiveUnpostedOrder; // has a COMMIT;

              IF (SalesHeader."Sell-to IC Partner Code" <> '') AND (ICPartner.GET(SalesHeader."Sell-to IC Partner Code")) THEN
                ICPartner.TESTFIELD(Blocked,FALSE);
              IF (SalesHeader."Bill-to IC Partner Code" <> '') AND (ICPartner.GET(SalesHeader."Bill-to IC Partner Code")) THEN
                ICPartner.TESTFIELD(Blocked,FALSE);
              IF "Send IC Document" AND ("IC Status" = "IC Status"::New) AND ("IC Direction" = "IC Direction"::Outgoing) AND
                 ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
              THEN BEGIN
                ICInOutBoxMgt.SendSalesDoc(Rec,TRUE);
                 "IC Status" := "IC Status"::Pending;
                ModifyHeader := TRUE;
              END;
              IF "IC Direction" = "IC Direction"::Incoming THEN BEGIN
                ICHandledInboxTransaction.SETRANGE("Document No.",SalesHeader."External Document No.");
                Cust.GET(SalesHeader."Sell-to Customer No.");
                ICHandledInboxTransaction.SETRANGE("IC Partner Code",Cust."IC Partner Code");
                ICHandledInboxTransaction.LOCKTABLE;
                IF ICHandledInboxTransaction.FINDFIRST THEN BEGIN
                  ICHandledInboxTransaction.Status := ICHandledInboxTransaction.Status::Posted;
                  ICHandledInboxTransaction.MODIFY;
                END;
              END;

              IF RECORDLEVELLOCKING THEN BEGIN
                DocDim.LOCKTABLE;
                SalesLine.LOCKTABLE;
                ItemChargeAssgntSales.LOCKTABLE;
                PurchOrderLine.LOCKTABLE;
                PurchOrderHeader.LOCKTABLE;
                GLEntry.LOCKTABLE;
                IF GLEntry.FINDLAST THEN;
              END;

              SourceCodeSetup.GET;
              SrcCode := SourceCodeSetup.Sales;

              // Insert shipment header
              IF Ship THEN BEGIN
                IF ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND SalesSetup."Shipment on Invoice")
                THEN BEGIN
                  IF DropShipOrder THEN BEGIN
                    PurchRcptHeader.LOCKTABLE;
                    PurchRcptLine.LOCKTABLE;
                    SalesShptHeader.LOCKTABLE;
                    SalesShptLine.LOCKTABLE;
                  END;
                  SalesShptHeader.INIT;
                  SalesShptHeader.TRANSFERFIELDS(SalesHeader);

                  SalesShptHeader."Date Sent" := 0D;
                  SalesShptHeader."Time Sent" := 0T;

                  SalesShptHeader."No." := "Shipping No.";
                  IF "Document Type" = "Document Type"::Order THEN BEGIN
                    SalesShptHeader."Order No. Series" := "No. Series";
                    SalesShptHeader."Order No." := "No.";
                    IF SalesSetup."Ext. Doc. No. Mandatory" THEN
                      TESTFIELD("External Document No.");
                  END;
                  SalesShptHeader."Source Code" := SrcCode;
                  SalesShptHeader."User ID" := USERID;
                  SalesShptHeader."No. Printed" := 0;
                  SalesShptHeader.INSERT;

                  DimMgt.MoveOneDocDimToPostedDocDim(
                    TempDocDim,DATABASE::"Sales Header","Document Type","No.",0,
                    DATABASE::"Sales Shipment Header",SalesShptHeader."No.");

                  ApprovalMgt.MoveApprvalEntryToPosted(TempApprovalEntry,DATABASE::"Sales Shipment Header",SalesShptHeader."No.");

                  IF SalesSetup."Copy Comments Order to Shpt." THEN BEGIN
                    CopyCommentLines(
                      "Document Type",SalesCommentLine."Document Type"::Shipment,
                      "No.",SalesShptHeader."No.");
                    SalesShptHeader.COPYLINKS(Rec);
                  END;
                  IF WhseShip THEN BEGIN
                    WhseShptHeader.GET(TempWhseShptHeader."No.");
                    WhsePostShpt.CreatePostedShptHeader(
                      PostedWhseShptHeader,WhseShptHeader,"Shipping No.","Posting Date");
                  END;
                  IF WhseReceive THEN BEGIN
                    WhseRcptHeader.GET(TempWhseRcptHeader."No.");
                    WhsePostRcpt.CreatePostedRcptHeader(
                      PostedWhseRcptHeader,WhseRcptHeader,"Shipping No.","Posting Date");
                  END;
                END;

                ServItemMgt.CopyReservationEntry(SalesHeader);

                IF ("Document Type" = "Document Type"::Invoice) AND
                   (NOT SalesSetup."Shipment on Invoice")
                THEN
                  ServItemMgt.CreateServItemOnSalesInvoice(SalesHeader);
              END;

              // Insert return receipt header
              IF Receive THEN
                IF ("Document Type" = "Document Type"::"Return Order") OR
                   (("Document Type" = "Document Type"::"Credit Memo") AND SalesSetup."Return Receipt on Credit Memo")
                THEN BEGIN
                  ReturnRcptHeader.INIT;
                  ReturnRcptHeader.TRANSFERFIELDS(SalesHeader);
                  ReturnRcptHeader."No." := "Return Receipt No.";
                  IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                    ReturnRcptHeader."Return Order No. Series" := "No. Series";
                    ReturnRcptHeader."Return Order No." := "No.";
                    IF SalesSetup."Ext. Doc. No. Mandatory" THEN
                      TESTFIELD("External Document No.");
                  END;
                  ReturnRcptHeader."No. Series" := "Return Receipt No. Series";
                  ReturnRcptHeader."Source Code" := SrcCode;
                  ReturnRcptHeader."User ID" := USERID;
                  ReturnRcptHeader."No. Printed" := 0;
                  ReturnRcptHeader.INSERT(TRUE);
                  DimMgt.MoveOneDocDimToPostedDocDim(
                    TempDocDim,DATABASE::"Sales Header","Document Type","No.",0,
                    DATABASE::"Return Receipt Header",ReturnRcptHeader."No.");

                  ApprovalMgt.MoveApprvalEntryToPosted(TempApprovalEntry,DATABASE::"Return Receipt Header",ReturnRcptHeader."No.");

                  IF SalesSetup."Copy Cmts Ret.Ord. to Ret.Rcpt" THEN BEGIN
                    CopyCommentLines(
                      "Document Type",SalesCommentLine."Document Type"::"Posted Return Receipt",
                      "No.",ReturnRcptHeader."No.");
                    ReturnRcptHeader.COPYLINKS(Rec);
                  END;
                  IF WhseReceive THEN BEGIN
                    WhseRcptHeader.GET(TempWhseRcptHeader."No.");
                    WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Return Receipt No.","Posting Date");
                  END;
                  IF WhseShip THEN BEGIN
                    WhseShptHeader.GET(TempWhseShptHeader."No.");
                    WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Return Receipt No.","Posting Date");
                  END;
                END;

              // Insert invoice header or credit memo header
              IF Invoice THEN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                  SalesInvHeader.INIT;
                  SalesInvHeader.TRANSFERFIELDS(SalesHeader);

                  SalesInvHeader."Date Sent" := 0D;
                  SalesInvHeader."Time Sent" := 0T;

                  IF "Document Type" = "Document Type"::Order THEN BEGIN
                    SalesInvHeader."No." := "Posting No.";
                    IF SalesSetup."Ext. Doc. No. Mandatory" THEN
                      TESTFIELD("External Document No.");
                    SalesInvHeader."Pre-Assigned No. Series" := '';
                    SalesInvHeader."Order No. Series" := "No. Series";
                    SalesInvHeader."Order No." := "No.";
                    Window.UPDATE(1,STRSUBSTNO(Text007,"Document Type","No.",SalesInvHeader."No."));
                  END ELSE BEGIN
                    SalesInvHeader."Pre-Assigned No. Series" := "No. Series";
                    SalesInvHeader."Pre-Assigned No." := "No.";
                    IF "Posting No." <> '' THEN BEGIN
                      SalesInvHeader."No." := "Posting No.";
                      Window.UPDATE(1,STRSUBSTNO(Text007,"Document Type","No.",SalesInvHeader."No."));
                    END;
                  END;
                  SalesInvHeader."Source Code" := SrcCode;
                  SalesInvHeader."User ID" := USERID;
                  SalesInvHeader."No. Printed" := 0;
                  SalesInvHeader.INSERT;

                  IF "Document Type" = "Document Type"::Order THEN BEGIN
                    Opp.RESET;
                    Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
                    Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Order);
                    Opp.SETRANGE("Sales Document No.","No.");
                    Opp.SETRANGE(Status,Opp.Status::Won);
                    IF Opp.FINDFIRST THEN BEGIN
                      Opp."Sales Document Type" := Opp."Sales Document Type"::"Posted Invoice";
                      Opp."Sales Document No." := SalesInvHeader."No.";
                      Opp.MODIFY;
                      OpportunityEntry.RESET;
                      OpportunityEntry.SETCURRENTKEY(Active,"Opportunity No.");
                      OpportunityEntry.SETRANGE(Active,TRUE);
                      OpportunityEntry.SETRANGE("Opportunity No.",Opp."No.");
                      IF OpportunityEntry.FINDFIRST THEN BEGIN
                        OpportunityEntry."Calcd. Current Value (LCY)" := OpportunityEntry.GetSalesDocValue(Rec);
                        OpportunityEntry.MODIFY;
                      END;
                    END;
                  END;

                  DimMgt.MoveOneDocDimToPostedDocDim(
                    TempDocDim,DATABASE::"Sales Header","Document Type","No.",0,
                    DATABASE::"Sales Invoice Header",SalesInvHeader."No.");

                  ApprovalMgt.MoveApprvalEntryToPosted(TempApprovalEntry,DATABASE::"Sales Invoice Header",SalesInvHeader."No.");

                  IF SalesSetup."Copy Comments Order to Invoice" THEN BEGIN
                    CopyCommentLines(
                      "Document Type",SalesCommentLine."Document Type"::"Posted Invoice",
                      "No.",SalesInvHeader."No.");
                    SalesInvHeader.COPYLINKS(Rec);
                  END;
                  GenJnlLineDocType := GenJnlLine."Document Type"::Invoice;
                  GenJnlLineDocNo := SalesInvHeader."No.";
                  GenJnlLineExtDocNo := SalesInvHeader."External Document No.";
                END ELSE BEGIN // Credit Memo
                  SalesCrMemoHeader.INIT;
                  SalesCrMemoHeader.TRANSFERFIELDS(SalesHeader);
                  IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                    SalesCrMemoHeader."No." := "Posting No.";
                    IF SalesSetup."Ext. Doc. No. Mandatory" THEN
                      TESTFIELD("External Document No.");
                    SalesCrMemoHeader."Pre-Assigned No. Series" := '';
                    SalesCrMemoHeader."Return Order No. Series" := "No. Series";
                    SalesCrMemoHeader."Return Order No." := "No.";
                    Window.UPDATE(1,STRSUBSTNO(Text008,"Document Type","No.",SalesCrMemoHeader."No."));
                  END ELSE BEGIN
                    SalesCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
                    SalesCrMemoHeader."Pre-Assigned No." := "No.";
                    IF "Posting No." <> '' THEN BEGIN
                      SalesCrMemoHeader."No." := "Posting No.";
                      Window.UPDATE(1,STRSUBSTNO(Text008,"Document Type","No.",SalesCrMemoHeader."No."));
                    END;
                  END;
                  SalesCrMemoHeader."Source Code" := SrcCode;
                  SalesCrMemoHeader."User ID" := USERID;
                  SalesCrMemoHeader."No. Printed" := 0;
                  SalesCrMemoHeader.INSERT;

                  DimMgt.MoveOneDocDimToPostedDocDim(
                    TempDocDim,DATABASE::"Sales Header","Document Type","No.",0,
                    DATABASE::"Sales Cr.Memo Header",SalesCrMemoHeader."No.");

                  ApprovalMgt.MoveApprvalEntryToPosted(TempApprovalEntry,DATABASE::"Sales Cr.Memo Header",SalesCrMemoHeader."No.");

                  IF SalesSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN
                    CopyCommentLines(
                      "Document Type",SalesCommentLine."Document Type"::"Posted Credit Memo",
                      "No.",SalesCrMemoHeader."No.");
                    SalesCrMemoHeader.COPYLINKS(Rec);
                  END;
                  GenJnlLineDocType := GenJnlLine."Document Type"::"Credit Memo";
                  GenJnlLineDocNo := SalesCrMemoHeader."No.";
                  GenJnlLineExtDocNo := SalesCrMemoHeader."External Document No.";
                END;

              // Lines
              InvPostingBuffer[1].DELETEALL;
              DropShipPostBuffer.DELETEALL;
              EverythingInvoiced := TRUE;

              SalesLine.RESET;
              SalesLine.SETRANGE("Document Type","Document Type");
              SalesLine.SETRANGE("Document No.","No.");
              LineCount := 0;
              RoundingLineInserted := FALSE;
              MergeSaleslines(SalesHeader,SalesLine,TempPrepaymentSalesLine,CombinedSalesLineTemp);

              TempVATAmountLineRemainder.DELETEALL;
              SalesLine.CalcVATAmountLines(1,SalesHeader,CombinedSalesLineTemp,TempVATAmountLine);

              IF SalesLine.FINDSET THEN
                REPEAT
                  ItemJnlRollRndg := FALSE;
                  LineCount := LineCount + 1;
                  Window.UPDATE(2,LineCount);
                  IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN BEGIN
                    SalesLine.TESTFIELD(Amount);
                    SalesLine.TESTFIELD("Job No.",'');
                    SalesLine.TESTFIELD("Job Contract Entry No.",0);
                  END;
                  IF SalesLine.Type = SalesLine.Type::Item THEN
                    CostBaseAmount := SalesLine."Line Amount";
                  IF SalesLine."Qty. per Unit of Measure" = 0 THEN
                    SalesLine."Qty. per Unit of Measure" := 1;
                  CASE "Document Type" OF
                    "Document Type"::Order:
                      SalesLine.TESTFIELD("Return Qty. to Receive",0);
                    "Document Type"::Invoice:
                      BEGIN
                        IF SalesLine."Shipment No." = '' THEN
                          SalesLine.TESTFIELD("Qty. to Ship",SalesLine.Quantity);
                        SalesLine.TESTFIELD("Return Qty. to Receive",0);
                        SalesLine.TESTFIELD("Qty. to Invoice",SalesLine.Quantity);
                      END;
                    "Document Type"::"Return Order":
                      SalesLine.TESTFIELD("Qty. to Ship",0);
                    "Document Type"::"Credit Memo":
                      BEGIN
                        IF SalesLine."Return Receipt No." = '' THEN
                          SalesLine.TESTFIELD("Return Qty. to Receive",SalesLine.Quantity);
                        SalesLine.TESTFIELD("Qty. to Ship",0);
                        SalesLine.TESTFIELD("Qty. to Invoice",SalesLine.Quantity);
                      END;
                  END;

                  IF NOT (Ship OR RoundingLineInserted) THEN BEGIN
                    SalesLine."Qty. to Ship" := 0;
                    SalesLine."Qty. to Ship (Base)" := 0;
                  END;
                  IF NOT (Receive OR RoundingLineInserted) THEN BEGIN
                    SalesLine."Return Qty. to Receive" := 0;
                    SalesLine."Return Qty. to Receive (Base)" := 0;
                  END;

                  JobContractLine := FALSE;
                  TempJnlLineDim2.RESET;
                  TempJnlLineDim2.DELETEALL;
                  TempDocDim.RESET;
                  TempDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
                  TempDocDim.SETRANGE("Line No.",SalesLine."Line No.");
                  DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim2);
                  IF TempJnlLineDim2.FIND('-') THEN;
                  IF (SalesLine.Type = SalesLine.Type::Item) OR
                     (SalesLine.Type = SalesLine.Type::"G/L Account")  OR
                     (SalesLine.Type = SalesLine.Type::" ")
                  THEN
                    IF SalesLine."Job Contract Entry No." > 0 THEN
                      PostJobContractLine(SalesLine,TempJnlLineDim2);
                  IF (SalesLine.Type = SalesLine.Type::Resource) THEN
                    JobTaskSalesLine := SalesLine;

                  IF SalesLine.Type = SalesLine.Type::"Fixed Asset" THEN BEGIN
                    SalesLine.TESTFIELD("Job No.",'');
                    SalesLine.TESTFIELD("Depreciation Book Code");
                    DeprBook.GET(SalesLine."Depreciation Book Code");
                    DeprBook.TESTFIELD("G/L Integration - Disposal",TRUE);
                    FA.GET(SalesLine."No.");
                    FA.TESTFIELD("Budgeted Asset",FALSE);
                  END ELSE BEGIN
                    SalesLine.TESTFIELD("Depreciation Book Code",'');
                    SalesLine.TESTFIELD("Depr. until FA Posting Date",FALSE);
                    SalesLine.TESTFIELD("FA Posting Date",0D);
                    SalesLine.TESTFIELD("Duplicate in Depreciation Book",'');
                    SalesLine.TESTFIELD("Use Duplication List",FALSE);
                  END;

                  IF ("Document Type" = "Document Type"::Invoice) AND (SalesLine."Shipment No." <> '') THEN BEGIN
                    SalesLine."Quantity Shipped" := SalesLine.Quantity;
                    SalesLine."Qty. Shipped (Base)" := SalesLine."Quantity (Base)";
                    SalesLine."Qty. to Ship" := 0;
                    SalesLine."Qty. to Ship (Base)" := 0;
                  END;

                  IF ("Document Type" = "Document Type"::"Credit Memo") AND (SalesLine."Return Receipt No." <> '') THEN BEGIN
                    SalesLine."Return Qty. Received" := SalesLine.Quantity;
                    SalesLine."Return Qty. Received (Base)" := SalesLine."Quantity (Base)";
                    SalesLine."Return Qty. to Receive" := 0;
                    SalesLine."Return Qty. to Receive (Base)" := 0;
                  END;

                  IF Invoice THEN BEGIN
                    IF ABS(SalesLine."Qty. to Invoice") > ABS(SalesLine.MaxQtyToInvoice) THEN
                      SalesLine.InitQtyToInvoice;
                  END ELSE BEGIN
                    SalesLine."Qty. to Invoice" := 0;
                    SalesLine."Qty. to Invoice (Base)" := 0;
                  END;

                  IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine."No." <> '') THEN BEGIN
                    GetItem(SalesLine);
                    IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT SalesLine.IsShipment THEN
                      SalesLine.GetUnitCost;
                  END;

                  IF SalesLine."Qty. to Invoice" + SalesLine."Quantity Invoiced" <> SalesLine.Quantity THEN
                    EverythingInvoiced := FALSE;

                  IF SalesLine.Quantity = 0 THEN
                    SalesLine.TESTFIELD(Amount,0)
                  ELSE BEGIN
                    SalesLine.TESTFIELD("No.");
                    SalesLine.TESTFIELD(Type);
                    SalesLine.TESTFIELD("Gen. Bus. Posting Group");
                    SalesLine.TESTFIELD("Gen. Prod. Posting Group");

                    // $001  INCOMING

                    IF (rPar."Departamento obligatorio") AND (NOT SalesHeader.Anulaci¢n) THEN
                      SalesLine.TESTFIELD("Shortcut Dimension 1 Code");

                    DivideAmount(1,SalesLine."Qty. to Invoice");
                  END;

                  IF SalesLine."Drop Shipment" THEN BEGIN
                    IF SalesLine.Type <> SalesLine.Type::Item THEN
                      SalesLine.TESTFIELD("Drop Shipment",FALSE);
                    IF (SalesLine."Qty. to Ship" <> 0) AND (SalesLine."Purch. Order Line No." = 0) THEN
                      ERROR(
                        Text009 +
                        Text010,
                        SalesLine."Line No.");
                  END;

                  RoundAmount(SalesLine."Qty. to Invoice");

                  IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN BEGIN
                    ReverseAmount(SalesLine);
                    ReverseAmount(SalesLineACY);
                  END;

                  RemQtyToBeInvoiced := SalesLine."Qty. to Invoice";
                  RemQtyToBeInvoicedBase := SalesLine."Qty. to Invoice (Base)";

                  // Item Tracking:
                  IF NOT SalesLine."Prepayment Line" THEN BEGIN
                    IF Invoice THEN
                      IF SalesLine."Qty. to Invoice" = 0 THEN
                        TrackingSpecificationExists := FALSE
                      ELSE
                        TrackingSpecificationExists :=
                          ReserveSalesLine.RetrieveInvoiceSpecification(SalesLine,TempInvoicingSpecification);
                    EndLoop := FALSE;

                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                      IF ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Return Qty. to Receive") THEN BEGIN
                        ReturnRcptLine.RESET;
                        CASE "Document Type" OF
                          "Document Type"::"Return Order":
                            BEGIN
                              ReturnRcptLine.SETCURRENTKEY("Return Order No.","Return Order Line No.");
                              ReturnRcptLine.SETRANGE("Return Order No.",SalesLine."Document No.");
                              ReturnRcptLine.SETRANGE("Return Order Line No.",SalesLine."Line No.");
                            END;
                          "Document Type"::"Credit Memo":
                            BEGIN
                              ReturnRcptLine.SETRANGE("Document No.",SalesLine."Return Receipt No.");
                              ReturnRcptLine.SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                            END;
                        END;
                        ReturnRcptLine.SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');
                        IF ReturnRcptLine.FIND('-') THEN BEGIN
                          ItemJnlRollRndg := TRUE;
                          REPEAT
                            IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
                              ItemEntryRelation.GET(TempInvoicingSpecification."Appl.-to Item Entry");
                              ReturnRcptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                            END ELSE
                              ItemEntryRelation."Item Entry No." := ReturnRcptLine."Item Rcpt. Entry No.";
                            ReturnRcptLine.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
                            ReturnRcptLine.TESTFIELD(Type,SalesLine.Type);
                            ReturnRcptLine.TESTFIELD("No.",SalesLine."No.");
                            ReturnRcptLine.TESTFIELD("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
                            ReturnRcptLine.TESTFIELD("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
                            ReturnRcptLine.TESTFIELD("Job No.",SalesLine."Job No.");
                            ReturnRcptLine.TESTFIELD("Unit of Measure Code",SalesLine."Unit of Measure Code");
                            ReturnRcptLine.TESTFIELD("Variant Code",SalesLine."Variant Code");
                            IF SalesLine."Qty. to Invoice" * ReturnRcptLine.Quantity < 0 THEN
                              SalesLine.FIELDERROR("Qty. to Invoice",Text024);
                            IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
                              QtyToBeInvoiced := TempInvoicingSpecification."Qty. to Invoice";
                              QtyToBeInvoicedBase := TempInvoicingSpecification."Qty. to Invoice (Base)";
                            END ELSE BEGIN
                              QtyToBeInvoiced := RemQtyToBeInvoiced - SalesLine."Return Qty. to Receive";
                              QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - SalesLine."Return Qty. to Receive (Base)";
                            END;
                            IF ABS(QtyToBeInvoiced) >
                               ABS(ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced")
                            THEN BEGIN
                              QtyToBeInvoiced := ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced";
                              QtyToBeInvoicedBase := ReturnRcptLine."Quantity (Base)" - ReturnRcptLine."Qty. Invoiced (Base)";
                            END;

                            IF TrackingSpecificationExists THEN
                              ItemTrackingMgt.AdjustQuantityRounding(
                                RemQtyToBeInvoiced,QtyToBeInvoiced,
                                RemQtyToBeInvoicedBase,QtyToBeInvoicedBase);

                            RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                            RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                            ReturnRcptLine."Quantity Invoiced" :=
                              ReturnRcptLine."Quantity Invoiced" + QtyToBeInvoiced;
                            ReturnRcptLine."Qty. Invoiced (Base)" :=
                              ReturnRcptLine."Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
                            ReturnRcptLine."Return Qty. Rcd. Not Invd." :=
                              ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced";
                            ReturnRcptLine.MODIFY;
                            IF SalesLine.Type = SalesLine.Type::Item THEN
                              PostItemJnlLine(
                                SalesLine,
                                0,0,
                                QtyToBeInvoiced,
                                QtyToBeInvoicedBase,
                                {ReturnRcptLine."Item Rcpt. Entry No."}
                                ItemEntryRelation."Item Entry No.",'',TempInvoicingSpecification);
                            IF TrackingSpecificationExists THEN
                              EndLoop := (TempInvoicingSpecification.NEXT = 0)
                            ELSE
                              EndLoop :=
                                (ReturnRcptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(SalesLine."Return Qty. to Receive"));
                          UNTIL EndLoop;
                        END ELSE
                          ERROR(
                            Text025,
                            SalesLine."Return Receipt Line No.",SalesLine."Return Receipt No.");
                      END;

                      IF ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Return Qty. to Receive") THEN BEGIN
                        IF "Document Type" = "Document Type"::"Credit Memo" THEN
                          ERROR(
                            Text038,
                            ReturnRcptLine."Document No.");
                        ERROR(Text037);
                      END;

                    END ELSE BEGIN

                      IF ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Qty. to Ship") THEN BEGIN
                        SalesShptLine.RESET;
                        CASE "Document Type" OF
                          "Document Type"::Order:
                            BEGIN
                              SalesShptLine.SETCURRENTKEY("Order No.","Order Line No.");
                              SalesShptLine.SETRANGE("Order No.",SalesLine."Document No.");
                              SalesShptLine.SETRANGE("Order Line No.",SalesLine."Line No.");
                            END;
                          "Document Type"::Invoice:
                            BEGIN
                              SalesShptLine.SETRANGE("Document No.",SalesLine."Shipment No.");
                              SalesShptLine.SETRANGE("Line No.",SalesLine."Shipment Line No.");
                            END;
                        END;

                        SalesShptLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
                        IF SalesShptLine.FIND('-') THEN BEGIN
                          ItemJnlRollRndg := TRUE;
                          REPEAT
                            IF TrackingSpecificationExists THEN BEGIN
                              ItemEntryRelation.GET(TempInvoicingSpecification."Appl.-to Item Entry");
                              SalesShptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                            END ELSE
                              ItemEntryRelation."Item Entry No." := SalesShptLine."Item Shpt. Entry No.";
                            SalesShptLine.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
                            SalesShptLine.TESTFIELD(Type,SalesLine.Type);
                            SalesShptLine.TESTFIELD("No.",SalesLine."No.");
                            SalesShptLine.TESTFIELD("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
                            SalesShptLine.TESTFIELD("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
                            SalesShptLine.TESTFIELD("Job No.",SalesLine."Job No.");
                            SalesShptLine.TESTFIELD("Unit of Measure Code",SalesLine."Unit of Measure Code");
                            SalesShptLine.TESTFIELD("Variant Code",SalesLine."Variant Code");
                            IF (-SalesLine."Qty. to Invoice") * SalesShptLine.Quantity < 0 THEN
                              SalesLine.FIELDERROR("Qty. to Invoice",Text011);
                            IF TrackingSpecificationExists THEN BEGIN
                              QtyToBeInvoiced := TempInvoicingSpecification."Qty. to Invoice";
                              QtyToBeInvoicedBase := TempInvoicingSpecification."Qty. to Invoice (Base)";
                            END ELSE BEGIN
                              QtyToBeInvoiced := RemQtyToBeInvoiced - SalesLine."Qty. to Ship";
                              QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - SalesLine."Qty. to Ship (Base)";
                            END;
                            IF ABS(QtyToBeInvoiced) >
                               ABS(SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced")
                            THEN BEGIN
                              QtyToBeInvoiced := -(SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced");
                              QtyToBeInvoicedBase := -(SalesShptLine."Quantity (Base)" - SalesShptLine."Qty. Invoiced (Base)");
                            END;

                            IF TrackingSpecificationExists THEN
                              ItemTrackingMgt.AdjustQuantityRounding(
                                RemQtyToBeInvoiced,QtyToBeInvoiced,
                                RemQtyToBeInvoicedBase,QtyToBeInvoicedBase);

                            RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                            RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                            SalesShptLine."Quantity Invoiced" :=
                              SalesShptLine."Quantity Invoiced" - QtyToBeInvoiced;
                            SalesShptLine."Qty. Invoiced (Base)" :=
                              SalesShptLine."Qty. Invoiced (Base)" - QtyToBeInvoicedBase;
                            SalesShptLine."Qty. Shipped Not Invoiced" :=
                              SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced";
                            SalesShptLine.MODIFY;
                            IF SalesLine.Type = SalesLine.Type::Item THEN
                              PostItemJnlLine(
                                SalesLine,
                                0,0,
                                QtyToBeInvoiced,
                                QtyToBeInvoicedBase,
                                {SalesShptLine."Item Shpt. Entry No."}
                                ItemEntryRelation."Item Entry No.",'',TempInvoicingSpecification);
                            IF TrackingSpecificationExists THEN
                              EndLoop := (TempInvoicingSpecification.NEXT = 0)
                            ELSE
                              EndLoop :=
                                (SalesShptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(SalesLine."Qty. to Ship"))
                          UNTIL EndLoop;
                        END ELSE
                          ERROR(
                            Text026,
                            SalesLine."Shipment Line No.",SalesLine."Shipment No.");
                      END;

                      IF ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Qty. to Ship") THEN BEGIN
                        IF "Document Type" = "Document Type"::Invoice THEN
                          ERROR(
                            Text027,
                            SalesShptLine."Document No.");
                        ERROR(Text013);
                      END;
                    END;

                    IF TrackingSpecificationExists THEN
                      SaveInvoiceSpecification(TempInvoicingSpecification);
                  END;

                  CASE SalesLine.Type OF
                    SalesLine.Type::"G/L Account":
                      IF (SalesLine."No." <> '') AND NOT SalesLine."System-Created Entry" THEN BEGIN
                        GLAcc.GET(SalesLine."No.");
                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                        IF (SalesLine."IC Partner Code" <> '') AND Invoice THEN
                          InsertICGenJnlLine(TempSalesLine);
                      END;
                    SalesLine.Type::Item:
                      BEGIN
                        IF (SalesLine."Qty. to Ship" <> 0) AND (SalesLine."Purch. Order Line No." <> 0) THEN BEGIN
                          DropShipPostBuffer."Order No." := SalesLine."Purchase Order No.";
                          DropShipPostBuffer."Order Line No." := SalesLine."Purch. Order Line No.";
                          DropShipPostBuffer.Quantity := -SalesLine."Qty. to Ship";
                          DropShipPostBuffer."Quantity (Base)" := -SalesLine."Qty. to Ship (Base)";
                          DropShipPostBuffer."Item Shpt. Entry No." :=
                            PostAssocItemJnlLine(DropShipPostBuffer.Quantity,DropShipPostBuffer."Quantity (Base)");
                          DropShipPostBuffer.INSERT;
                          SalesLine."Appl.-to Item Entry" := DropShipPostBuffer."Item Shpt. Entry No.";
                        END;
                        IF RemQtyToBeInvoiced <> 0 THEN
                          ItemLedgShptEntryNo :=
                            PostItemJnlLine(
                              SalesLine,
                              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                              0,'',DummyTrackingSpecification);

                        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                          IF ABS(SalesLine."Return Qty. to Receive") > ABS(RemQtyToBeInvoiced) THEN
                            ItemLedgShptEntryNo :=
                              PostItemJnlLine(
                                SalesLine,
                                SalesLine."Return Qty. to Receive" - RemQtyToBeInvoiced,
                                SalesLine."Return Qty. to Receive (Base)" - RemQtyToBeInvoicedBase,
                                0,0,0,'',DummyTrackingSpecification);
                        END ELSE BEGIN
                          IF ABS(SalesLine."Qty. to Ship") > ABS(RemQtyToBeInvoiced) THEN
                            ItemLedgShptEntryNo :=
                              PostItemJnlLine(
                                SalesLine,
                                SalesLine."Qty. to Ship" - RemQtyToBeInvoiced,
                                SalesLine."Qty. to Ship (Base)" - RemQtyToBeInvoicedBase,
                                0,0,0,'',DummyTrackingSpecification);
                        END;
                      END;
                    SalesLine.Type::Resource:
                      IF SalesLine."Qty. to Invoice" <> 0 THEN BEGIN
                        ResJnlLine.INIT;
                        ResJnlLine."Posting Date" := "Posting Date";
                        ResJnlLine."Document Date" := "Document Date";
                        ResJnlLine."Reason Code" := "Reason Code";
                        ResJnlLine."Resource No." := SalesLine."No.";
                        ResJnlLine.Description := SalesLine.Description;
                        ResJnlLine."Source Type" := ResJnlLine."Source Type"::Customer;
                        ResJnlLine."Source No." := SalesLine."Sell-to Customer No.";
                        ResJnlLine."Work Type Code" := SalesLine."Work Type Code";
                        ResJnlLine."Job No." := SalesLine."Job No.";
                        ResJnlLine."Unit of Measure Code" := SalesLine."Unit of Measure Code";
                        ResJnlLine."Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
                        ResJnlLine."Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
                        ResJnlLine."Gen. Bus. Posting Group" := SalesLine."Gen. Bus. Posting Group";
                        ResJnlLine."Gen. Prod. Posting Group" := SalesLine."Gen. Prod. Posting Group";
                        ResJnlLine."Entry Type" := ResJnlLine."Entry Type"::Sale;
                        ResJnlLine."Document No." := GenJnlLineDocNo;
                        ResJnlLine."External Document No." := GenJnlLineExtDocNo;
                        ResJnlLine.Quantity := -SalesLine."Qty. to Invoice";
                        ResJnlLine."Unit Cost" := SalesLine."Unit Cost (LCY)";
                        ResJnlLine."Total Cost" := SalesLine."Unit Cost (LCY)" * ResJnlLine.Quantity;
                        ResJnlLine."Unit Price" := -SalesLine.Amount/SalesLine.Quantity;
                        ResJnlLine."Total Price" := -SalesLine.Amount;
                        ResJnlLine."Source Code" := SrcCode;
                        ResJnlLine.Chargeable := TRUE;
                        ResJnlLine."Posting No. Series" := "Posting No. Series";
                        ResJnlLine."Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
                        TempJnlLineDim.DELETEALL;
                        TempDocDim.RESET;
                        TempDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
                        TempDocDim.SETRANGE("Line No.",SalesLine."Line No.");
                        DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
                        ResJnlPostLine.RunWithCheck(ResJnlLine,TempJnlLineDim);
                        IF JobTaskSalesLine."Job Contract Entry No." > 0 THEN
                          PostJobContractLine(JobTaskSalesLine,TempJnlLineDim2);
                      END;
                    SalesLine.Type::"Charge (Item)":
                      IF Invoice OR ItemChargeAssgntOnly THEN BEGIN
                        ItemJnlRollRndg := FALSE;
                        ClearItemChargeAssgntFilter;
                        TempItemChargeAssgntSales.SETCURRENTKEY("Applies-to Doc. Type");
                        TempItemChargeAssgntSales.SETFILTER("Applies-to Doc. Type",'<>%1',"Document Type");
                        TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine."Line No.");
                        IF TempItemChargeAssgntSales.FINDSET THEN
                          REPEAT
                            IF ItemChargeAssgntOnly AND (GenJnlLineDocNo = '') THEN
                              GenJnlLineDocNo := TempItemChargeAssgntSales."Applies-to Doc. No.";
                            CASE TempItemChargeAssgntSales."Applies-to Doc. Type" OF
                              TempItemChargeAssgntSales."Applies-to Doc. Type"::Shipment:
                                PostItemChargePerShpt(SalesLine);
                              TempItemChargeAssgntSales."Applies-to Doc. Type"::"Return Receipt":
                                PostItemChargePerRetRcpt(SalesLine);
                            END;
                            TempItemChargeAssgntSales.MARK(TRUE);
                          UNTIL TempItemChargeAssgntSales.NEXT = 0;
                      END;
                  END;

                  IF (SalesLine.Type >= SalesLine.Type::"G/L Account") AND (SalesLine."Qty. to Invoice" <> 0) THEN BEGIN
                    // Copy sales to buffer
                    FillInvPostingBuffer(SalesLine,SalesLineACY);
                    TempDocDim.SETRANGE("Table ID");
                    TempDocDim.SETRANGE("Line No.");
                  END;

                  IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
                    SalesLine.TESTFIELD("Job No.",'');

                  IF (SalesShptHeader."No." <> '') AND (SalesLine."Shipment No." = '') AND
                     NOT RoundingLineInserted AND NOT TempSalesLine."Prepayment Line"
                  THEN BEGIN
                    // Insert shipment line
                    SalesShptLine.INIT;
                    SalesShptLine.TRANSFERFIELDS(TempSalesLine);
                    SalesShptLine."Posting Date" := "Posting Date";
                    SalesShptLine."Document No." := SalesShptHeader."No.";
                    SalesShptLine.Quantity := TempSalesLine."Qty. to Ship";
                    SalesShptLine."Quantity (Base)" := TempSalesLine."Qty. to Ship (Base)";
                    IF ABS(TempSalesLine."Qty. to Invoice") > ABS(TempSalesLine."Qty. to Ship") THEN BEGIN
                      SalesShptLine."Quantity Invoiced" := TempSalesLine."Qty. to Ship";
                      SalesShptLine."Qty. Invoiced (Base)" := TempSalesLine."Qty. to Ship (Base)";
                    END ELSE BEGIN
                      SalesShptLine."Quantity Invoiced" := TempSalesLine."Qty. to Invoice";
                      SalesShptLine."Qty. Invoiced (Base)" := TempSalesLine."Qty. to Invoice (Base)";
                    END;
                    SalesShptLine."Qty. Shipped Not Invoiced" :=
                      SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced";
                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                      SalesShptLine."Order No." := TempSalesLine."Document No.";
                      SalesShptLine."Order Line No." := TempSalesLine."Line No.";
                    END;

                    IF (SalesLine.Type = SalesLine.Type::Item) AND (TempSalesLine."Qty. to Ship" <> 0) THEN BEGIN
                      IF WhseShip THEN BEGIN
                        WhseShptLine.SETCURRENTKEY(
                          "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                        WhseShptLine.SETRANGE("No.",WhseShptHeader."No.");
                        WhseShptLine.SETRANGE("Source Type",DATABASE::"Sales Line");
                        WhseShptLine.SETRANGE("Source Subtype",SalesLine."Document Type");
                        WhseShptLine.SETRANGE("Source No.",SalesLine."Document No.");
                        WhseShptLine.SETRANGE("Source Line No.",SalesLine."Line No.");
                        WhseShptLine.FINDFIRST;
                        WhseShptLine.TESTFIELD("Qty. to Ship",SalesShptLine.Quantity);
                        SaveTempWhseSplitSpec(SalesLine);
                        WhsePostShpt.CreatePostedShptLine(
                          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                      END;
                      IF WhseReceive THEN BEGIN
                        WhseRcptLine.SETCURRENTKEY(
                          "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                        WhseRcptLine.SETRANGE("No.",WhseRcptHeader."No.");
                        WhseRcptLine.SETRANGE("Source Type",DATABASE::"Sales Line");
                        WhseRcptLine.SETRANGE("Source Subtype",SalesLine."Document Type");
                        WhseRcptLine.SETRANGE("Source No.",SalesLine."Document No.");
                        WhseRcptLine.SETRANGE("Source Line No.",SalesLine."Line No.");
                        WhseRcptLine.FINDFIRST;
                        WhseRcptLine.TESTFIELD("Qty. to Receive",-SalesShptLine.Quantity);
                        SaveTempWhseSplitSpec(SalesLine);
                        WhsePostRcpt.CreatePostedRcptLine(
                          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                      END;

                      SalesShptLine."Item Shpt. Entry No." :=
                        InsertShptEntryRelation(SalesShptLine); // ItemLedgShptEntryNo
                      SalesShptLine."Item Charge Base Amount" :=
                        ROUND(CostBaseAmount / SalesLine.Quantity * SalesShptLine.Quantity);
                    END;
                    SalesShptLine.INSERT;

                    ServItemMgt.CreateServItemOnSalesLineShpt(Rec,TempSalesLine,SalesShptLine);

                    IF SalesLine."BOM Item No." <> '' THEN BEGIN
                      ServItemMgt.ReturnServItemComp(ServiceItemTmp1,ServiceItemCmpTmp1);
                      IF ServiceItemTmp1.FIND('-') THEN
                        REPEAT
                          ServiceItemTmp2 := ServiceItemTmp1;
                          IF ServiceItemTmp2.INSERT THEN;
                        UNTIL ServiceItemTmp1.NEXT = 0;
                      IF ServiceItemCmpTmp1.FIND('-') THEN
                        REPEAT
                          ServiceItemCmpTmp2 := ServiceItemCmpTmp1;
                          IF ServiceItemCmpTmp2.INSERT THEN;
                        UNTIL ServiceItemCmpTmp1.NEXT = 0;
                    END;

                    DimMgt.MoveOneDocDimToPostedDocDim(
                      TempDocDim,DATABASE::"Sales Line","Document Type","No.",SalesShptLine."Line No.",
                      DATABASE::"Sales Shipment Line",SalesShptHeader."No.");
                  END;

                  IF (ReturnRcptHeader."No." <> '') AND (SalesLine."Return Receipt No." = '') AND
                     NOT RoundingLineInserted
                  THEN BEGIN
                    // Insert return receipt line
                    ReturnRcptLine.INIT;
                    ReturnRcptLine.TRANSFERFIELDS(TempSalesLine);
                    ReturnRcptLine."Document No." := ReturnRcptHeader."No.";
                    ReturnRcptLine."Posting Date" := ReturnRcptHeader."Posting Date";
                    ReturnRcptLine.Quantity := TempSalesLine."Return Qty. to Receive";
                    ReturnRcptLine."Quantity (Base)" := TempSalesLine."Return Qty. to Receive (Base)";
                    IF ABS(TempSalesLine."Qty. to Invoice") > ABS(TempSalesLine."Return Qty. to Receive") THEN BEGIN
                      ReturnRcptLine."Quantity Invoiced" := TempSalesLine."Return Qty. to Receive";
                      ReturnRcptLine."Qty. Invoiced (Base)" := TempSalesLine."Return Qty. to Receive (Base)";
                    END ELSE BEGIN
                      ReturnRcptLine."Quantity Invoiced" := TempSalesLine."Qty. to Invoice";
                      ReturnRcptLine."Qty. Invoiced (Base)" := TempSalesLine."Qty. to Invoice (Base)";
                    END;
                    ReturnRcptLine."Return Qty. Rcd. Not Invd." :=
                      ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced";
                    IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                      ReturnRcptLine."Return Order No." := TempSalesLine."Document No.";
                      ReturnRcptLine."Return Order Line No." := TempSalesLine."Line No.";
                    END;
                    IF (SalesLine.Type = SalesLine.Type::Item) AND (TempSalesLine."Return Qty. to Receive" <> 0) THEN BEGIN
                      IF WhseReceive THEN BEGIN
                        WhseRcptLine.SETCURRENTKEY(
                          "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                        WhseRcptLine.SETRANGE("No.",WhseRcptHeader."No.");
                        WhseRcptLine.SETRANGE("Source Type",DATABASE::"Sales Line");
                        WhseRcptLine.SETRANGE("Source Subtype",SalesLine."Document Type");
                        WhseRcptLine.SETRANGE("Source No.",SalesLine."Document No.");
                        WhseRcptLine.SETRANGE("Source Line No.",SalesLine."Line No.");
                        WhseRcptLine.FINDFIRST;
                        WhseRcptLine.TESTFIELD("Qty. to Receive",ReturnRcptLine.Quantity);
                        SaveTempWhseSplitSpec(SalesLine);
                        WhsePostRcpt.CreatePostedRcptLine(
                          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                      END;
                      IF WhseShip THEN BEGIN
                        WhseShptLine.SETCURRENTKEY(
                          "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                        WhseShptLine.SETRANGE("No.",WhseShptHeader."No.");
                        WhseShptLine.SETRANGE("Source Type",DATABASE::"Sales Line");
                        WhseShptLine.SETRANGE("Source Subtype",SalesLine."Document Type");
                        WhseShptLine.SETRANGE("Source No.",SalesLine."Document No.");
                        WhseShptLine.SETRANGE("Source Line No.",SalesLine."Line No.");
                        WhseShptLine.FINDFIRST;
                        WhseShptLine.TESTFIELD("Qty. to Ship",-ReturnRcptLine.Quantity);
                        SaveTempWhseSplitSpec(SalesLine);
                        WhsePostShpt.CreatePostedShptLine(
                          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                      END;

                      ReturnRcptLine."Item Rcpt. Entry No." :=
                        InsertReturnEntryRelation(ReturnRcptLine); // ItemLedgShptEntryNo;
                      ReturnRcptLine."Item Charge Base Amount" :=
                        ROUND(CostBaseAmount / SalesLine.Quantity * ReturnRcptLine.Quantity);
                    END;
                    ReturnRcptLine.INSERT;
                    DimMgt.MoveOneDocDimToPostedDocDim(
                      TempDocDim,DATABASE::"Sales Line","Document Type","No.",ReturnRcptLine."Line No.",
                      DATABASE::"Return Receipt Line",ReturnRcptHeader."No.");
                  END;

                  IF Invoice THEN BEGIN
                    // Insert invoice line or credit memo line
                    IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                      SalesInvLine.INIT;
                      SalesInvLine.TRANSFERFIELDS(TempSalesLine);
                      SalesInvLine."Posting Date" := "Posting Date";
                      SalesInvLine."Document No." := SalesInvHeader."No.";
                      SalesInvLine.Quantity := TempSalesLine."Qty. to Invoice";
                      SalesInvLine."Quantity (Base)" := TempSalesLine."Qty. to Invoice (Base)";
                      SalesInvLine.INSERT;
                      DimMgt.MoveOneDocDimToPostedDocDim(
                        TempDocDim,DATABASE::"Sales Line","Document Type","No.",SalesInvLine."Line No.",
                        DATABASE::"Sales Invoice Line",SalesInvHeader."No.");
                      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesInvLine.RowID1);
                    END ELSE BEGIN // Credit Memo
                      SalesCrMemoLine.INIT;
                      SalesCrMemoLine.TRANSFERFIELDS(TempSalesLine);
                      SalesCrMemoLine."Posting Date" := "Posting Date";
                      SalesCrMemoLine."Document No." := SalesCrMemoHeader."No.";
                      SalesCrMemoLine.Quantity := TempSalesLine."Qty. to Invoice";
                      SalesCrMemoLine."Quantity (Base)" := TempSalesLine."Qty. to Invoice (Base)";
                      SalesCrMemoLine.INSERT;
                      DimMgt.MoveOneDocDimToPostedDocDim(
                        TempDocDim,DATABASE::"Sales Line","Document Type","No.",SalesCrMemoLine."Line No.",
                        DATABASE::"Sales Cr.Memo Line",SalesCrMemoHeader."No.");
                      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesCrMemoLine.RowID1);
                    END;
                  END;

                  IF RoundingLineInserted THEN
                    LastLineRetrieved := TRUE
                  ELSE BEGIN
                    LastLineRetrieved := GetNextSalesline(SalesLine);
                    IF LastLineRetrieved AND SalesSetup."Invoice Rounding" THEN
                      InvoiceRounding(FALSE);
                  END;
                UNTIL LastLineRetrieved;

              IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN BEGIN
                ReverseAmount(TotalSalesLine);
                ReverseAmount(TotalSalesLineLCY);
                TotalSalesLineLCY."Unit Cost (LCY)" := -TotalSalesLineLCY."Unit Cost (LCY)";
              END;

              // Post drop shipment of purchase order
              PurchSetup.GET;
              IF DropShipPostBuffer.FIND('-') THEN
                REPEAT
                  PurchOrderHeader.GET(
                    PurchOrderHeader."Document Type"::Order,
                    DropShipPostBuffer."Order No.");
                  PurchRcptHeader.INIT;
                  PurchRcptHeader.TRANSFERFIELDS(PurchOrderHeader);
                  PurchRcptHeader."No." := PurchOrderHeader."Receiving No.";
                  PurchRcptHeader."Order No." := PurchOrderHeader."No.";
                  PurchRcptHeader."Posting Date" := "Posting Date";
                  PurchRcptHeader."Document Date" := "Document Date";
                  PurchRcptHeader."No. Printed" := 0;
                  PurchRcptHeader.INSERT;
                  DocDim.RESET;
                  DimMgt.MoveOneDocDimToPostedDocDim(
                    DocDim,DATABASE::"Purchase Header",PurchOrderHeader."Document Type",PurchOrderHeader."No.",
                    0,DATABASE::"Purch. Rcpt. Header",PurchRcptHeader."No.");

                  ApprovalMgt.MoveApprvalEntryToPosted(TempApprovalEntry,DATABASE::"Purch. Rcpt. Header",PurchRcptHeader."No.");

                  IF PurchSetup."Copy Comments Order to Receipt" THEN BEGIN
                    CopyPurchCommentLines(
                      PurchOrderHeader."Document Type",PurchCommentLine."Document Type"::Receipt,
                      PurchOrderHeader."No.",PurchRcptHeader."No.");
                    PurchRcptHeader.COPYLINKS(Rec);
                  END;
                  DropShipPostBuffer.SETRANGE("Order No.",DropShipPostBuffer."Order No.");
                  REPEAT
                    PurchOrderLine.GET(
                      PurchOrderLine."Document Type"::Order,
                      DropShipPostBuffer."Order No.",DropShipPostBuffer."Order Line No.");
                    PurchRcptLine.INIT;
                    PurchRcptLine.TRANSFERFIELDS(PurchOrderLine);
                    PurchRcptLine."Posting Date" := PurchRcptHeader."Posting Date";
                    PurchRcptLine."Document No." := PurchRcptHeader."No.";
                    PurchRcptLine.Quantity := DropShipPostBuffer.Quantity;
                    PurchRcptLine."Quantity (Base)" := DropShipPostBuffer."Quantity (Base)";
                    PurchRcptLine."Quantity Invoiced" := 0;
                    PurchRcptLine."Qty. Invoiced (Base)" := 0;
                    PurchRcptLine."Order No." := PurchOrderLine."Document No.";
                    PurchRcptLine."Order Line No." := PurchOrderLine."Line No.";
                    PurchRcptLine."Qty. Rcd. Not Invoiced" :=
                      PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";

                    IF PurchRcptLine.Quantity <> 0 THEN BEGIN
                      PurchRcptLine."Item Rcpt. Entry No." := DropShipPostBuffer."Item Shpt. Entry No.";
                      PurchRcptLine."Item Charge Base Amount" := PurchOrderLine."Line Amount"
                    END;
                    PurchRcptLine.INSERT;
                    PurchOrderLine."Qty. to Receive" := DropShipPostBuffer.Quantity;
                    PurchOrderLine."Qty. to Receive (Base)" := DropShipPostBuffer."Quantity (Base)";
                    PurchPost.UpdateBlanketOrderLine(PurchOrderLine,TRUE,FALSE,FALSE);
                    DimMgt.MoveOneDocDimToPostedDocDim(
                      DocDim,DATABASE::"Purchase Line",PurchOrderHeader."Document Type",PurchOrderHeader."No.",
                      PurchOrderLine."Line No.",DATABASE::"Purch. Rcpt. Line",PurchRcptHeader."No.");
                  UNTIL DropShipPostBuffer.NEXT = 0;
                  DropShipPostBuffer.SETRANGE("Order No.");
                UNTIL DropShipPostBuffer.NEXT = 0;

              IF Invoice THEN BEGIN
                // Post sales and VAT to G/L entries from posting buffer
                LineCount := 0;
                IF InvPostingBuffer[1].FIND('+') THEN
                  REPEAT
                    LineCount := LineCount + 1;
                    Window.UPDATE(3,LineCount);


                    GenJnlLine.INIT;
                    GenJnlLine."Posting Date" := "Posting Date";
                    GenJnlLine."Document Date" := "Document Date";
                    GenJnlLine.Description := "Posting Description";
                    GenJnlLine."Reason Code" := "Reason Code";
                    GenJnlLine."Document Type" := GenJnlLineDocType;
                    GenJnlLine."Document No." := GenJnlLineDocNo;
                    GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                    GenJnlLine."Account No." := InvPostingBuffer[1]."G/L Account";
                    GenJnlLine."System-Created Entry" := InvPostingBuffer[1]."System-Created Entry";
                    GenJnlLine.Amount := InvPostingBuffer[1].Amount;
                    GenJnlLine."Source Currency Code" := "Currency Code";
                    GenJnlLine."Source Currency Amount" := InvPostingBuffer[1]."Amount (ACY)";
                    GenJnlLine.Correction := Correction;
                    GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
                    GenJnlLine."Gen. Bus. Posting Group" := InvPostingBuffer[1]."Gen. Bus. Posting Group";
                    GenJnlLine."Gen. Prod. Posting Group" := InvPostingBuffer[1]."Gen. Prod. Posting Group";
                    GenJnlLine."VAT Bus. Posting Group" := InvPostingBuffer[1]."VAT Bus. Posting Group";
                    GenJnlLine."VAT Prod. Posting Group" := InvPostingBuffer[1]."VAT Prod. Posting Group";
                    GenJnlLine."Tax Area Code" := InvPostingBuffer[1]."Tax Area Code";
                    GenJnlLine."Tax Liable" := InvPostingBuffer[1]."Tax Liable";
                    GenJnlLine."Tax Group Code" := InvPostingBuffer[1]."Tax Group Code";
                    GenJnlLine."Use Tax" := InvPostingBuffer[1]."Use Tax";
                    GenJnlLine.Quantity := InvPostingBuffer[1].Quantity;
                    GenJnlLine."VAT Calculation Type" := InvPostingBuffer[1]."VAT Calculation Type";
                    GenJnlLine."VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount";
                    GenJnlLine."VAT Base Discount %" := "VAT Base Discount %";
                    GenJnlLine."Source Curr. VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount (ACY)";
                    GenJnlLine."VAT Amount" := InvPostingBuffer[1]."VAT Amount";
                    GenJnlLine."Source Curr. VAT Amount" := InvPostingBuffer[1]."VAT Amount (ACY)";
                    GenJnlLine."VAT Difference" := InvPostingBuffer[1]."VAT Difference";
                    GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                    GenJnlLine."Job No." := InvPostingBuffer[1]."Job No.";

                    // $004 INCOMING

                    GenJnlLine.Regimen := InvPostingBuffer[1].Regimen;

                    GenJnlLine."Shortcut Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
                    GenJnlLine."Shortcut Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";
                    GenJnlLine."Source Code" := SrcCode;
                    GenJnlLine."EU 3-Party Trade" := "EU 3-Party Trade";
                    GenJnlLine."Sell-to/Buy-from No." := "Sell-to Customer No.";
                    GenJnlLine."Bill-to/Pay-to No." := "Bill-to Customer No.";
                    GenJnlLine."Country/Region Code" := "VAT Country/Region Code";
                    GenJnlLine."VAT Registration No." := "VAT Registration No.";
                    GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
                    GenJnlLine."Source No." := "Bill-to Customer No.";
                    GenJnlLine."Posting No. Series" := "Posting No. Series";
                    GenJnlLine."Ship-to/Order Address Code" := "Ship-to Code";
                    GenJnlLine."Payment Terms Code" := "Payment Terms Code";
                    GenJnlLine."Payment Method Code" := "Payment Method Code";
                    IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Fixed Asset";
                      GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::Disposal;
                      GenJnlLine."FA Posting Date" := InvPostingBuffer[1]."FA Posting Date";
                      GenJnlLine."Depreciation Book Code" := InvPostingBuffer[1]."Depreciation Book Code";
                      GenJnlLine."Depr. until FA Posting Date" := InvPostingBuffer[1]."Depr. until FA Posting Date";
                      GenJnlLine."Duplicate in Depreciation Book" := InvPostingBuffer[1]."Duplicate in Depreciation Book";
                      GenJnlLine."Use Duplication List" := InvPostingBuffer[1]."Use Duplication List";
                    END;
                    GenJnlLine."IC Partner Code" := "Sell-to IC Partner Code";

                    // $004 INCOMING
                    GenJnlLine.Hotel           := InvPostingBuffer[1].Hotel;

                    RunGenJnlPostLine(GenJnlLine,InvPostingBuffer[1]."Dimension Entry No.");
                    GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                    GenJnlLine.VALIDATE("FA Posting Type",GenJnlLine."FA Posting Type"::" ");

                  UNTIL InvPostingBuffer[1].NEXT(-1) = 0;

                InvPostingBuffer[1].DELETEALL;

                // Post customer entry
                Window.UPDATE(4,1);
                GenJnlLine.INIT;
                GenJnlLine."Posting Date" := "Posting Date";
                GenJnlLine."Document Date" := "Document Date";
                GenJnlLine.Description := "Posting Description";
                GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                GenJnlLine."Reason Code" := "Reason Code";
                GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
                GenJnlLine."Account No." := "Bill-to Customer No.";
                GenJnlLine."Document Type" := GenJnlLineDocType;
                GenJnlLine."Document No." := GenJnlLineDocNo;
                GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                GenJnlLine."Currency Code" := "Currency Code";
                GenJnlLine.Amount := -TotalSalesLine."Amount Including VAT";
                GenJnlLine."Source Currency Code" := "Currency Code";
                GenJnlLine."Source Currency Amount" := -TotalSalesLine."Amount Including VAT";
                GenJnlLine."Amount (LCY)" := -TotalSalesLineLCY."Amount Including VAT";
                IF SalesHeader."Currency Code" = '' THEN
                  GenJnlLine."Currency Factor" := 1
                ELSE
                  GenJnlLine."Currency Factor" :=  SalesHeader."Currency Factor";
                GenJnlLine.Correction := Correction;
                GenJnlLine."Sales/Purch. (LCY)" := -TotalSalesLineLCY.Amount;
                GenJnlLine."Profit (LCY)" := -(TotalSalesLineLCY.Amount - TotalSalesLineLCY."Unit Cost (LCY)");
                GenJnlLine."Inv. Discount (LCY)" := -TotalSalesLineLCY."Inv. Discount Amount";
                GenJnlLine."Pmt. Discount Given/Rec. (LCY)" := -TotalSalesLineLCY."Pmt. Disc. Given Amount";
                GenJnlLine."Sell-to/Buy-from No." := "Sell-to Customer No.";
                GenJnlLine."Bill-to/Pay-to No." := "Bill-to Customer No.";
                GenJnlLine."Salespers./Purch. Code" := "Salesperson Code";
                GenJnlLine."System-Created Entry" := TRUE;
                GenJnlLine."On Hold" := "On Hold";
                GenJnlLine."Applies-to Doc. Type" := "Applies-to Doc. Type";
                GenJnlLine."Applies-to Doc. No." := "Applies-to Doc. No.";
                GenJnlLine."Applies-to Bill No." := "Applies-to Bill No.";
                GenJnlLine."Applies-to ID" := "Applies-to ID";
                GenJnlLine."Allow Application" := "Bal. Account No." = '';
                GenJnlLine."Payment Terms Code" := "Payment Terms Code";
                GenJnlLine."Payment Method Code" := "Payment Method Code";
                GenJnlLine."Pmt. Address Code" := "Pay-at Code";
                GenJnlLine."Cust./Vendor Bank Acc. Code" := "Cust. Bank Acc. Code";
                GenJnlLine."Due Date" := "Due Date";
                GenJnlLine."Pmt. Discount Date" := "Pmt. Discount Date";
                GenJnlLine."Payment Discount %" := "Payment Discount %";
                GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
                GenJnlLine."Source No." := "Bill-to Customer No.";
                GenJnlLine."Source Code" := SrcCode;
                GenJnlLine."Posting No. Series" := "Posting No. Series";
                GenJnlLine."IC Partner Code" := "Sell-to IC Partner Code";

                // $004 INCOMING
                GenJnlLine.Hotel           := Hotel;

                // $006 AJS 29.12.2006, Comprobantes fiscales
                // Rellenar los campos "Cod. Grupo NCF" y "Comprobante Fiscal"

                GenJnlLine."Cod. Grupo NCF"     := "Cod. Grupo NCF";
                GenJnlLine."Comprobante Fiscal" := "Comprobante Fiscal";

                TempJnlLineDim.DELETEALL;
                TempDocDim.RESET;
                TempDocDim.SETRANGE("Table ID",DATABASE::"Sales Header");
                DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
                GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);

                // Balancing account
                IF "Bal. Account No." <> '' THEN BEGIN
                  Window.UPDATE(5,1);
                  CustLedgEntry.FINDLAST;
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := "Posting Date";
                  GenJnlLine."Document Date" := "Document Date";
                  GenJnlLine.Description := "Posting Description";
                  GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                  GenJnlLine."Reason Code" := "Reason Code";
                  IF SalesHeader."Currency Code" = '' THEN
                    GenJnlLine."Currency Factor" := 1
                  ELSE
                    GenJnlLine."Currency Factor" :=  SalesHeader."Currency Factor";
                  GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
                  GenJnlLine."Account No." := "Bill-to Customer No.";
                  IF "Document Type" = "Document Type"::"Credit Memo" THEN
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund
                  ELSE
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
                  GenJnlLine."Document No." := GenJnlLineDocNo;
                  GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                  IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
                    GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"Bank Account";
                  GenJnlLine."Bal. Account No." := "Bal. Account No.";
                  GenJnlLine."Currency Code" := "Currency Code";
                  GenJnlLine.Amount :=
                    TotalSalesLine."Amount Including VAT";
                  GenJnlLine."Source Currency Code" := "Currency Code";
                  GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
                  GenJnlLine.Correction := Correction;
                  CustLedgEntry.CALCFIELDS(Amount);
                  IF CustLedgEntry.Amount = 0 THEN
                    GenJnlLine."Amount (LCY)" := TotalSalesLineLCY."Amount Including VAT"
                  ELSE
                    GenJnlLine."Amount (LCY)" :=
                      TotalSalesLineLCY."Amount Including VAT" +
                      ROUND(
                        CustLedgEntry."Remaining Pmt. Disc. Possible" /
                        CustLedgEntry."Adjusted Currency Factor");
                  IF SalesHeader."Currency Code" = '' THEN
                    GenJnlLine."Currency Factor" := 1
                  ELSE
                    GenJnlLine."Currency Factor" :=  SalesHeader."Currency Factor";
                  GenJnlLine."Applies-to Doc. Type" := GenJnlLineDocType;
                  GenJnlLine."Applies-to Doc. No." := GenJnlLineDocNo;
                  GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
                  GenJnlLine."Source No." := "Bill-to Customer No.";
                  GenJnlLine."Source Code" := SrcCode;
                  GenJnlLine."Posting No. Series" := "Posting No. Series";
                  GenJnlLine."IC Partner Code" := "Sell-to IC Partner Code";
                  GenJnlLine."Allow Zero-Amount Posting" := TRUE;
                  GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
                END;
              END;

              IF ICGenJnlLineNo > 0 THEN
                PostICGenJnl;

              InvtSetup.GET;
              IF InvtSetup."Automatic Cost Adjustment" <>
                 InvtSetup."Automatic Cost Adjustment"::Never
              THEN BEGIN
                InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
                InvtAdjmt.MakeMultiLevelAdjmt;
              END;

              // Create Bills

              IF PaymentMethod.GET(SalesHeader."Payment Method Code") THEN
                IF (PaymentMethod."Create Bills" OR PaymentMethod."Invoices to Cartera") AND
                   (NOT AppManagement.AccessToCartera) AND Invoice THEN
                   ERROR(Text1100100 +
                         Text1100101, PaymentMethod.TABLECAPTION);

              IF Invoice AND ("Bal. Account No." = '') AND
                 NOT ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) AND
                 AppManagement.AccessToCartera
              THEN
                SplitPayment.SplitSalesInv(
                  SalesHeader,
                  CustLedgEntry,
                  Window,
                  SrcCode,
                  GenJnlLineExtDocNo,
                  GenJnlLineDocNo,
                  -(TotalSalesLine."Amount Including VAT" - TotalSalesLine.Amount));

              // Modify/delete sales header and sales lines
              IF NOT RECORDLEVELLOCKING THEN BEGIN
                IF WhseReceive THEN
                  WhseRcptLine.LOCKTABLE(TRUE,TRUE);
                IF WhseShip THEN
                  WhseShptLine.LOCKTABLE(TRUE,TRUE);
                IF DropShipOrder THEN BEGIN
                  PurchOrderLine.LOCKTABLE(TRUE,TRUE);
                  PurchOrderHeader.LOCKTABLE(TRUE,TRUE);
                END;
                DocDim.LOCKTABLE(TRUE,TRUE);
                IF InvtPickPutaway THEN
                  WhseRqst.LOCKTABLE(TRUE,TRUE);
                SalesLine.LOCKTABLE(TRUE,TRUE);
                ItemChargeAssgntSales.LOCKTABLE(TRUE,TRUE);
              END;

              IF Ship THEN BEGIN
                "Last Shipping No." := "Shipping No.";
                "Shipping No." := '';
              END;
              IF Invoice THEN BEGIN
                "Last Posting No." := "Posting No.";
                "Posting No." := '';
              END;
              IF Receive THEN BEGIN
                "Last Return Receipt No." := "Return Receipt No.";
                "Return Receipt No." := '';
              END;

              IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
                 (NOT EverythingInvoiced)
              THEN BEGIN
                MODIFY;
                // Insert T336 records
                InsertTrackingSpecification;

                IF SalesLine.FINDSET THEN
                  REPEAT
                    IF SalesLine.Quantity <> 0 THEN BEGIN
                      IF Ship THEN BEGIN
                        SalesLine."Quantity Shipped" :=
                          SalesLine."Quantity Shipped" +
                          SalesLine."Qty. to Ship";
                        SalesLine."Qty. Shipped (Base)" :=
                          SalesLine."Qty. Shipped (Base)" +
                          SalesLine."Qty. to Ship (Base)";
                      END;
                      IF Receive THEN BEGIN
                        SalesLine."Return Qty. Received" :=
                          SalesLine."Return Qty. Received" + SalesLine."Return Qty. to Receive";
                        SalesLine."Return Qty. Received (Base)" :=
                          SalesLine."Return Qty. Received (Base)" +
                          SalesLine."Return Qty. to Receive (Base)";
                      END;
                      IF Invoice THEN BEGIN
                        TempPrePmtAmtToDeduct := SalesLine."Prepmt Amt to Deduct";
                        IF "Document Type" = "Document Type"::Order THEN BEGIN
                          IF ABS(SalesLine."Quantity Invoiced" + SalesLine."Qty. to Invoice") >
                             ABS(SalesLine."Quantity Shipped")
                          THEN BEGIN
                            SalesLine.VALIDATE("Qty. to Invoice",
                              SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced");
                            SalesLine."Qty. to Invoice (Base)" :=
                              SalesLine."Qty. Shipped (Base)" - SalesLine."Qty. Invoiced (Base)";
                          END;
                        END ELSE
                          IF ABS(SalesLine."Quantity Invoiced" + SalesLine."Qty. to Invoice") >
                             ABS(SalesLine."Return Qty. Received")
                          THEN BEGIN
                            SalesLine.VALIDATE("Qty. to Invoice",
                              SalesLine."Return Qty. Received" - SalesLine."Quantity Invoiced");
                            SalesLine."Qty. to Invoice (Base)" :=
                              SalesLine."Return Qty. Received (Base)" - SalesLine."Qty. Invoiced (Base)";
                          END;

                        SalesLine."Prepmt Amt to Deduct" := TempPrePmtAmtToDeduct;

                        SalesLine."Quantity Invoiced" := SalesLine."Quantity Invoiced" + SalesLine."Qty. to Invoice";
                        SalesLine."Qty. Invoiced (Base)" := SalesLine."Qty. Invoiced (Base)" + SalesLine."Qty. to Invoice (Base)";
                        IF SalesLine."Qty. to Invoice" <> 0 THEN BEGIN
                          SalesLine."Prepmt Amt Deducted" :=
                            SalesLine."Prepmt Amt Deducted" + SalesLine."Prepmt Amt to Deduct";
                          SalesLine."Prepmt VAT Diff. Deducted" :=
                            SalesLine."Prepmt VAT Diff. Deducted" + SalesLine."Prepmt VAT Diff. to Deduct";
                          IF "Currency Code" <> '' THEN BEGIN
                            TempPrePayDeductLCYSalesLine := SalesLine;
                            IF TempPrePayDeductLCYSalesLine.FIND THEN
                              SalesLine."Prepmt. Amount Inv. (LCY)" := SalesLine."Prepmt. Amount Inv. (LCY)" -
                                TempPrePayDeductLCYSalesLine."Prepmt. Amount Inv. (LCY)";
                          END ELSE
                            SalesLine."Prepmt. Amount Inv. (LCY)" :=
                              ROUND(
                                ROUND(
                                  ROUND(SalesLine."Unit Price" * (SalesLine.Quantity - SalesLine."Quantity Shipped"),
                                    Currency."Amount Rounding Precision") *
                                  (1 - SalesLine."Line Discount %" / 100),Currency."Amount Rounding Precision") *
                                SalesLine."Prepayment %" / 100,Currency."Amount Rounding Precision");
                          SalesLine."Prepmt Amt to Deduct" :=
                            SalesLine."Prepmt. Amt. Inv." - SalesLine."Prepmt Amt Deducted";
                          SalesLine."Prepmt VAT Diff. to Deduct" := 0;
                        END;
                      END;

                      UpdateBlanketOrderLine(SalesLine,Ship,Receive,Invoice);
                      SalesLine.InitOutstanding;

                      IF WhseHandlingRequired OR (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank)
                      THEN BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                          SalesLine."Return Qty. to Receive" := 0;
                          SalesLine."Return Qty. to Receive (Base)" := 0;
                        END ELSE BEGIN
                          SalesLine."Qty. to Ship" := 0;
                          SalesLine."Qty. to Ship (Base)" := 0;
                        END;
                        SalesLine.InitQtyToInvoice;
                      END ELSE BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN
                          SalesLine.InitQtyToReceive
                        ELSE
                          SalesLine.InitQtyToShip2;
                      END;

                      IF (SalesLine."Purch. Order Line No." <> 0) AND
                         (SalesLine.Quantity = SalesLine."Quantity Invoiced")
                      THEN
                        UpdateAssocLines(SalesLine);
                      SalesLine.SetDefaultQuantity;
                      SalesLine.MODIFY;
                    END;
                  UNTIL SalesLine.NEXT = 0;

                UpdateAssocOrder;

                IF WhseReceive THEN BEGIN
                  WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                  TempWhseRcptHeader.DELETE;
                END;
                IF WhseShip THEN BEGIN
                  WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                  TempWhseShptHeader.DELETE;
                END;

                WhseSalesRelease.Release(SalesHeader);
                UpdateItemChargeAssgnt;

                IF RoundingLineInserted THEN BEGIN
                  DocDim.RESET;
                  DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
                  DocDim.SETRANGE("Document Type","Document Type");
                  DocDim.SETRANGE("Document No.","No.");
                  DocDim.SETRANGE("Line No.",RoundingLineNo);
                  DocDim.DELETEALL;
                END;

              END ELSE BEGIN

                CASE "Document Type" OF
                  "Document Type"::Invoice:
                    BEGIN
                      SalesLine.SETFILTER("Shipment No.",'<>%1','');
                      IF SalesLine.FINDSET THEN
                        REPEAT
                          IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                            SalesShptLine.GET(SalesLine."Shipment No.",SalesLine."Shipment Line No.");
                            TempSalesLine.GET(
                              TempSalesLine."Document Type"::Order,
                              SalesShptLine."Order No.",SalesShptLine."Order Line No.");
                            IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN
                              UpdateSalesOrderChargeAssgnt(SalesLine,TempSalesLine);
                            TempSalesLine."Quantity Invoiced" :=
                              TempSalesLine."Quantity Invoiced" + SalesLine."Qty. to Invoice";
                            TempSalesLine."Qty. Invoiced (Base)" :=
                              TempSalesLine."Qty. Invoiced (Base)" + SalesLine."Qty. to Invoice (Base)";
                            IF ABS(TempSalesLine."Quantity Invoiced") > ABS(TempSalesLine."Quantity Shipped") THEN
                              ERROR(
                                Text014,
                                TempSalesLine."Document No.");
                            TempSalesLine.InitQtyToInvoice;
                            TempSalesLine."Prepmt Amt Deducted" := TempSalesLine."Prepmt Amt Deducted" + SalesLine."Prepmt Amt to Deduct";
                            TempSalesLine."Prepmt VAT Diff. Deducted" :=
                              TempSalesLine."Prepmt VAT Diff. Deducted" + SalesLine."Prepmt VAT Diff. to Deduct";
                            IF "Currency Code" <> '' THEN BEGIN
                              TempPrePayDeductLCYSalesLine := SalesLine;
                              IF TempPrePayDeductLCYSalesLine.FIND THEN
                                TempSalesLine."Prepmt. Amount Inv. (LCY)" := TempSalesLine."Prepmt. Amount Inv. (LCY)" -
                                  TempPrePayDeductLCYSalesLine."Prepmt. Amount Inv. (LCY)";
                            END ELSE
                              TempSalesLine."Prepmt. Amount Inv. (LCY)" := TempSalesLine."Prepmt. Amount Inv. (LCY)" -
                                SalesLine."Prepmt Amt to Deduct";
                            IF (TempSalesLine."Quantity Invoiced" = TempSalesLine.Quantity) AND
                              (TempSalesLine."Prepayment %" <> 0) THEN
                              PrepayRealizeGainLoss(TempSalesLine);
                            TempSalesLine."Prepmt Amt to Deduct" := TempSalesLine."Prepmt. Amt. Inv." - TempSalesLine."Prepmt Amt Deducted";
                            TempSalesLine."Prepmt VAT Diff. to Deduct" := 0;
                            TempSalesLine.InitOutstanding;
                            IF (TempSalesLine."Purch. Order Line No." <> 0) AND
                               (TempSalesLine.Quantity = TempSalesLine."Quantity Invoiced")
                            THEN
                              UpdateAssocLines(TempSalesLine);
                            TempSalesLine.MODIFY;
                          END;
                        UNTIL SalesLine.NEXT = 0;
                      InsertTrackingSpecification;

                      SalesLine.SETRANGE("Shipment No.");
                    END;
                  "Document Type"::"Credit Memo":
                    BEGIN
                      SalesLine.SETFILTER("Return Receipt No.",'<>%1','');
                      IF SalesLine.FINDSET THEN
                        REPEAT
                          IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                            ReturnRcptLine.GET(SalesLine."Return Receipt No.",SalesLine."Return Receipt Line No.");
                            TempSalesLine.GET(
                              TempSalesLine."Document Type"::"Return Order",
                              ReturnRcptLine."Return Order No.",ReturnRcptLine."Return Order Line No.");
                            IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN
                              UpdateSalesOrderChargeAssgnt(SalesLine,TempSalesLine);
                            TempSalesLine."Quantity Invoiced" :=
                              TempSalesLine."Quantity Invoiced" + SalesLine."Qty. to Invoice";
                            TempSalesLine."Qty. Invoiced (Base)" :=
                              TempSalesLine."Qty. Invoiced (Base)" + SalesLine."Qty. to Invoice (Base)";
                            IF ABS(TempSalesLine."Quantity Invoiced") > ABS(TempSalesLine."Return Qty. Received") THEN
                              ERROR(
                                Text036,
                                TempSalesLine."Document No.");
                            TempSalesLine.InitQtyToInvoice;
                            TempSalesLine.InitOutstanding;
                            TempSalesLine.MODIFY;
                          END;
                        UNTIL SalesLine.NEXT = 0;
                      InsertTrackingSpecification;

                      SalesLine.SETRANGE("Return Receipt No.");
                    END;
                ELSE
                  BEGIN
                    UpdateAssocOrder;
                    IF DropShipOrder THEN
                      InsertTrackingSpecification;
                    IF SalesLine.FINDSET THEN
                      REPEAT
                        IF SalesLine."Purch. Order Line No." <> 0 THEN
                          UpdateAssocLines(SalesLine);
                        IF (SalesLine."Prepayment %" <> 0)  THEN BEGIN
                          IF "Currency Code" <> '' THEN BEGIN
                            TempPrePayDeductLCYSalesLine := SalesLine;
                            IF TempPrePayDeductLCYSalesLine.FIND THEN
                              SalesLine."Prepmt. Amount Inv. (LCY)" := SalesLine."Prepmt. Amount Inv. (LCY)" -
                                TempPrePayDeductLCYSalesLine."Prepmt. Amount Inv. (LCY)";
                          END ELSE
                            SalesLine."Prepmt. Amount Inv. (LCY)" := SalesLine."Prepmt. Amount Inv. (LCY)" - SalesLine."Prepmt Amt to Deduct";
                          PrepayRealizeGainLoss(SalesLine);
                        END;
                      UNTIL SalesLine.NEXT = 0;
                  END;
              END;

                SalesLine.SETFILTER("Blanket Order Line No.",'<>0');
                IF SalesLine.FINDSET THEN
                  REPEAT
                    UpdateBlanketOrderLine(SalesLine,Ship,Receive,Invoice);
                  UNTIL SalesLine.NEXT = 0;
                SalesLine.SETRANGE("Blanket Order Line No.");

                IF WhseReceive THEN BEGIN
                  WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                  TempWhseRcptHeader.DELETE;
                END;
                IF WhseShip THEN BEGIN
                  WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                  TempWhseShptHeader.DELETE;
                END;

                DocDim.RESET;
                DocDim.SETRANGE("Table ID",DATABASE::"Sales Header");
                DocDim.SETRANGE("Document Type","Document Type");
                DocDim.SETRANGE("Document No.","No.");
                DocDim.DELETEALL;
                DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
                DocDim.DELETEALL;

                ApprovalMgt.DeleteApprovalEntry(DATABASE::"Sales Header","Document Type","No.");

                IF HASLINKS THEN DELETELINKS;
                DELETE;
                ReserveSalesLine.DeleteInvoiceSpecFromHeader(SalesHeader);
                IF SalesLine.FINDFIRST THEN REPEAT
                  IF SalesLine.HASLINKS THEN
                    SalesLine.DELETELINKS;
                UNTIL SalesLine.NEXT = 0;
                SalesLine.DELETEALL;
                DeleteItemChargeAssgnt;
                SalesCommentLine.SETRANGE("Document Type","Document Type");
                SalesCommentLine.SETRANGE("No.","No.");
                IF NOT SalesCommentLine.ISEMPTY THEN
                  SalesCommentLine.DELETEALL;
                WhseRqst.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                WhseRqst.SETRANGE("Source Type",DATABASE::"Sales Line");
                WhseRqst.SETRANGE("Source Subtype","Document Type");
                WhseRqst.SETRANGE("Source No.","No.");
                IF NOT WhseRqst.ISEMPTY THEN
                  WhseRqst.DELETEALL;
              END;

              InsertValueEntryRelation;
              IF NOT InvtPickPutaway THEN
                COMMIT;
              CLEAR(WhsePostRcpt);
              CLEAR(WhsePostShpt);
              CLEAR(GenJnlPostLine);
              CLEAR(ResJnlPostLine);
              CLEAR(JobPostLine);
              CLEAR(ItemJnlPostLine);
              CLEAR(WhseJnlPostLine);
              CLEAR(InvtAdjmt);
              Window.CLOSE;
              IF Invoice AND ("Bill-to IC Partner Code" <> '') THEN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                  ICInOutBoxMgt.CreateOutboxSalesInvTrans(SalesInvHeader)
                ELSE
                  ICInOutBoxMgt.CreateOutboxSalesCrMemoTrans(SalesCrMemoHeader);
            END;

            UpdateAnalysisView.UpdateAll(0,TRUE);
            UpdateItemAnalysisView.UpdateAll(0,TRUE);
            Rec := SalesHeader;
            SynchBOMSerialNo(ServiceItemTmp2,ServiceItemCmpTmp2);
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=There is nothing to post.;ESP=No hay nada que registrar.';
      Text002@1001 : TextConst 'ENU=Posting lines              #2######\;ESP=Registrando l¡neas         #2######\';
      Text003@1002 : TextConst 'ENU=Posting sales and VAT      #3######\;ESP=Registrando venta e IVA    #3######\';
      Text004@1003 : TextConst 'ENU=Posting to customers       #4######\;ESP=Registrando cliente        #4######\';
      Text005@1004 : TextConst 'ENU=Posting to bal. account    #5######;ESP=Registrando contrapartida  #5######';
      Text006@1005 : TextConst 'ENU=Posting lines              #2######;ESP=Registrando l¡neas         #2######';
      Text007@1006 : TextConst 'ENU=%1 %2 -> Invoice %3;ESP=%1 %2 -> Factura %3';
      Text008@1007 : TextConst 'ENU=%1 %2 -> Credit Memo %3;ESP=%1 %2 -> Abono %3';
      Text009@1008 : TextConst 'ENU="You cannot ship sales order line %1. ";ESP="No se puede enviar la l¡nea %1 del pedido de venta. "';
      Text010@1009 : TextConst 'ENU=The line is marked as a drop shipment and is not yet associated with a purchase order.;ESP=La l¡nea est  marcada como de env¡o directo y todav¡a no est  asociada a un pedido de compra.';
      Text011@1010 : TextConst 'ENU=must have the same sign as the shipment;ESP=debe tener el mismo signo que el env¡o.';
      Text013@1011 : TextConst 'ENU=The shipment lines have been deleted.;ESP=Se han borrado las l¡neas del albar n de venta.';
      Text014@1012 : TextConst 'ENU=You cannot invoice more than you have shipped for order %1.;ESP=No se puede facturar m s de lo enviado en el pedido %1.';
      Text016@1013 : TextConst 'ENU=VAT Amount;ESP=Importe IVA';
      Text017@1014 : TextConst 'ENU=%1% VAT;ESP=%1% IVA';
      Text018@1015 : TextConst 'ENU=in the associated blanket order must not be greater than %1;ESP=en el pedido abierto asociado no debe ser superior a %1';
      Text019@1016 : TextConst 'ENU=in the associated blanket order must not be reduced.;ESP=en el pedido abierto asociado no se debe reducir';
      Text020@1017 : TextConst 'ENU=Please enter "Yes" in %1 and/or %2 and/or %3.;ESP=Introduzca "Si" en %1 y/¢ %2 y/¢ %3.';
      Text021@1018 : TextConst 'ENU="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6.";ESP="Manipulaci¢n almacn requerido para %1 = %2, %3 = %4, %5 = %6."';
      Text023@1020 : TextConst 'ENU=This order must be a complete Shipment.;ESP=Este pedido debe ser un env¡o completo.';
      Text024@1021 : TextConst 'ENU=must have the same sign as the return receipt;ESP=debe tener el mismo nombre que la recep. dev.';
      Text025@1022 : TextConst 'ENU=Line %1 of the return receipt %2, which you are attempting to invoice, has already been invoiced.;ESP=L¡n. %1 de la recep. dev %2, que esta intentando facturar, ya se ha facturado.';
      Text026@1023 : TextConst 'ENU=Line %1 of the shipment %2, which you are attempting to invoice, has already been invoiced.;ESP=L¡nea %1 del env¡o %2, que est  intentando facturar, ha sido ya facturado.';
      Text027@1024 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in shipment %1.;ESP=La cdad. que est  intentando facturar es mayor que la cdad. en albar n de venta %1.';
      Text028@1025 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3;ESP=La combinaci¢n de dimensiones utilizada en %1 %2 est  bloqueada. %3';
      Text029@1026 : TextConst 'ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4;ESP=La combinaci¢n de dimensiones utilizada en %1 %2, n§ l¡nea %3 est  bloqueada. %4';
      Text030@1027 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. %3;ESP=Las dimensiones usadas en %1 %2 no son v lidas. %3';
      Text031@1028 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4;ESP=Las dim. usadas en %1 %2, n§ l¡n. %3 no son v lidas. %4';
      Text032@1029 : TextConst 'ENU="You cannot assign more than %1 units in %2 = %3, %4 = %5,%6 = %7.";ESP="No puede asignar m s de %1 unidades en %2 = %3, %4 = %5,%6 = %7."';
      Text033@1030 : TextConst 'ENU=You must assign all item charges, if you invoice everything.;ESP=Si factura todo, debe asignar todos los cargos prod.';
      Item@1164 : Record 27;
      CurrExchRate@1031 : Record 330;
      SalesSetup@1032 : Record 311;
      GLSetup@1033 : Record 98;
      InvtSetup@1162 : Record 313;
      GLEntry@1034 : Record 17;
      SalesHeader@1035 : Record 36;
      SalesLine@1036 : Record 37;
      TempSalesLine@1038 : Record 37;
      SalesLineACY@1039 : Record 37;
      TotalSalesLine@1040 : Record 37;
      TotalSalesLineLCY@1041 : Record 37;
      TempPrepaymentSalesLine@1170 : TEMPORARY Record 37;
      CombinedSalesLineTemp@1169 : TEMPORARY Record 37;
      SalesShptHeader@1043 : Record 110;
      SalesShptLine@1044 : Record 111;
      SalesInvHeader@1045 : Record 112;
      SalesInvLine@1046 : Record 113;
      SalesCrMemoHeader@1047 : Record 114;
      SalesCrMemoLine@1048 : Record 115;
      ReturnRcptHeader@1049 : Record 6660;
      ReturnRcptLine@1050 : Record 6661;
      PurchOrderHeader@1051 : Record 38;
      PurchOrderLine@1052 : Record 39;
      PurchRcptHeader@1053 : Record 120;
      PurchRcptLine@1054 : Record 121;
      ItemChargeAssgntSales@1042 : Record 5809;
      TempItemChargeAssgntSales@1037 : TEMPORARY Record 5809;
      GenJnlLine@1056 : Record 81;
      ItemJnlLine@1057 : Record 83;
      ResJnlLine@1058 : Record 207;
      CustPostingGr@1060 : Record 92;
      SourceCodeSetup@1061 : Record 242;
      SourceCode@1062 : Record 230;
      SalesCommentLine@1063 : Record 44;
      SalesCommentLine2@1064 : Record 44;
      GenPostingSetup@1065 : Record 252;
      CustLedgEntry@1067 : Record 21;
      Currency@1068 : Record 4;
      InvPostingBuffer@1069 : ARRAY [2] OF TEMPORARY Record 49;
      DropShipPostBuffer@1070 : TEMPORARY Record 223;
      GLAcc@1071 : Record 15;
      DocDim@1072 : Record 357;
      TempDocDim@1073 : TEMPORARY Record 357;
      ApprovalEntry@11163 : Record 454;
      TempApprovalEntry@11164 : TEMPORARY Record 454;
      PrepmtDocDim@1168 : TEMPORARY Record 357;
      FA@1074 : Record 5600;
      DeprBook@1075 : Record 5611;
      WhseRqst@1077 : Record 5765;
      WhseRcptHeader@1019 : Record 7316;
      TempWhseRcptHeader@1145 : TEMPORARY Record 7316;
      WhseRcptLine@1128 : Record 7317;
      WhseShptHeader@1148 : Record 7320;
      TempWhseShptHeader@1149 : TEMPORARY Record 7320;
      WhseShptLine@1096 : Record 7321;
      PostedWhseRcptHeader@1142 : Record 7318;
      PostedWhseRcptLine@1146 : Record 7319;
      PostedWhseShptHeader@1150 : Record 7322;
      PostedWhseShptLine@1151 : Record 7323;
      TempVATAmountLine@1078 : TEMPORARY Record 290;
      TempVATAmountLineRemainder@1079 : TEMPORARY Record 290;
      Location@1080 : Record 14;
      TempHandlingSpecification@1088 : TEMPORARY Record 336;
      TempTrackingSpecification@1139 : TEMPORARY Record 336;
      TempTrackingSpecificationInv@1160 : TEMPORARY Record 336;
      TempWhseSplitSpecification@1190 : TEMPORARY Record 336;
      TempValueEntryRelation@1140 : TEMPORARY Record 6508;
      rPar@1103355000 : Record 7009700;
      VATBusGroup@1103355001 : Record 323;
      JobTaskSalesLine@1167 : Record 37;
      TempICGenJnlLine@2165 : TEMPORARY Record 81;
      TempICJnlLineDim@2166 : TEMPORARY Record 356;
      TempPrePayDeductLCYSalesLine@1134 : TEMPORARY Record 37;
      ServiceItemTmp1@1202 : TEMPORARY Record 5940;
      ServiceItemTmp2@1200 : TEMPORARY Record 5940;
      ServiceItemCmpTmp1@1203 : TEMPORARY Record 5941;
      ServiceItemCmpTmp2@1201 : TEMPORARY Record 5941;
      PaymentTerms@1100000 : Record 3;
      NoSeriesMgt@1081 : Codeunit 396;
      GenJnlCheckLine@1158 : Codeunit 11;
      GenJnlPostLine@1082 : Codeunit 12;
      ResJnlPostLine@1083 : Codeunit 212;
      ItemJnlPostLine@1085 : Codeunit 22;
      InvtAdjmt@1161 : Codeunit 5895;
      ReserveSalesLine@1086 : Codeunit 99000832;
      SalesCalcDisc@1087 : Codeunit 60;
      DimMgt@1089 : Codeunit 408;
      DimBufMgt@1090 : Codeunit 411;
      ApprovalMgt@1165 : Codeunit 439;
      WhseSalesRelease@1093 : Codeunit 5771;
      ItemTrackingMgt@1196 : Codeunit 6500;
      WMSMgmt@1144 : Codeunit 7302;
      WhseJnlPostLine@1141 : Codeunit 7301;
      WhsePostRcpt@1152 : Codeunit 5760;
      WhsePostShpt@1153 : Codeunit 5763;
      PurchPost@1159 : Codeunit 90;
      CostCalcMgt@1163 : Codeunit 5836;
      JobPostLine@1166 : Codeunit 1001;
      ServItemMgt@1055 : Codeunit 5920;
      Window@1097 : Dialog;
      PostingDate@1098 : Date;
      UseDate@1099 : Date;
      GenJnlLineDocNo@1101 : Code[20];
      GenJnlLineExtDocNo@1102 : Code[20];
      SrcCode@1103 : Code[10];
      GenJnlLineDocType@1104 : Integer;
      ItemLedgShptEntryNo@1106 : Integer;
      LineCount@1107 : Integer;
      FALineNo@1108 : Integer;
      RoundingLineNo@1109 : Integer;
      WhseReference@1156 : Integer;
      RemQtyToBeInvoiced@1111 : Decimal;
      RemQtyToBeInvoicedBase@1112 : Decimal;
      QtyToBeInvoiced@1113 : Decimal;
      QtyToBeInvoicedBase@1114 : Decimal;
      RemAmt@1136 : Decimal;
      RemDiscAmt@1137 : Decimal;
      EverythingInvoiced@1115 : Boolean;
      LastLineRetrieved@1116 : Boolean;
      RoundingLineInserted@1117 : Boolean;
      ModifyHeader@1118 : Boolean;
      DropShipOrder@1119 : Boolean;
      PostingDateExists@1120 : Boolean;
      ReplacePostingDate@1121 : Boolean;
      ReplaceDocumentDate@1122 : Boolean;
      TempInvoice@1123 : Boolean;
      TempShpt@1124 : Boolean;
      TempReturn@1125 : Boolean;
      Text034@1127 : TextConst 'ENU="You cannot assign item charges to the %1 %2 = %3,%4 = %5, %6 = %7, because it has been invoiced.";ESP="No puede asignar cargos de prod. al %1 %2 = %3,%4 = %5, %6 = %7,porque ya se ha facturado."';
      Text036@1094 : TextConst 'ENU=You cannot invoice more than you have received for return order %1.;ESP=No puede facturar m s de lo que ha recibido para la devoluci¢n %1.';
      Text037@1095 : TextConst 'ENU=The return receipt lines have been deleted.;ESP=Las l¡ns. de recep. devol. han sido borradas.';
      Text038@1130 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in return receipt %1.;ESP=La cdad. que esta intentando facturar es mayor que la cantidad en la recep. devol. %1.';
      ItemChargeAssgntOnly@1138 : Boolean;
      ItemJnlRollRndg@1135 : Boolean;
      Text040@1129 : TextConst 'ENU=Related item ledger entries cannot be found.;ESP=No se encuentran los movs. pdto. relacionados.';
      Text043@1147 : TextConst 'ENU=Item Tracking is signed wrongly.;ESP=Seguim. pdto. no est  bien definido.';
      Text044@1143 : TextConst 'ENU=Item Tracking does not match.;ESP=Seguimiento prod. no coincide.';
      WhseShip@1110 : Boolean;
      WhseReceive@1154 : Boolean;
      InvtPickPutaway@1155 : Boolean;
      Text045@1157 : TextConst 'ENU=is not within your range of allowed posting dates.;ESP=no est  dentro del periodo de fechas de registro permitidas.';
      Text046@1066 : TextConst 'ENU=The %1 does not match the quantity defined in item tracking.;ESP=%1 no coincide con la cantidad definida en el seguimiento de productos.';
      Text047@1084 : TextConst 'ENU=cannot be more than %1.;ESP=no puede ser superior a %1.';
      Text048@1105 : TextConst 'ENU=must be at least %1.;ESP=debe ser al menos %1.';
      JobContractLine@1172 : Boolean;
      ICGenJnlLineNo@11167 : Integer;
      ItemTrkgAlreadyOverruled@1059 : Boolean;
      Text050@1076 : TextConst 'ENU=The total %1 cannot be more than %2.;ESP=El total %1 no puede ser m s de %2.';
      Text051@1091 : TextConst 'ENU=The total %1 must be at least %2.;ESP=El total %1 debe ser al menos %2.';
      TotalChargeAmt@1092 : Decimal;
      TotalChargeAmtLCY@1100 : Decimal;
      TotalChargeAmt2@1126 : Decimal;
      TotalChargeAmtLCY2@1131 : Decimal;
      Text052@1102601000 : TextConst 'ENU=You must assign item charge %1 if you want to invoice it.;ESP=Debe asignar un cargo prod. de %1 si quiere facturarlo.';
      Text053@1102601001 : TextConst 'ENU=You can not invoice item charge %1 because there is no item ledger entry to assign it to.;ESP=No puede facturar un cargo prod. de %1 porque no existe mov. producto al que asignarlo.';
      TransportMethod@1100003 : Record 259;
      PaymentMethod@1100002 : Record 289;
      SplitPayment@1100006 : Codeunit 7000005;
      AppManagement@1100005 : Codeunit 1;
      Text1100000@1100010 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?;ESP=El abono no tiene un n§ de factura corregido. ¨Confirma que desea continuar?';
      Text1100011@1100011 : TextConst 'ENU=The posting process has been cancelled by the user.;ESP=El proceso de registro ha sido cancelado por el usuario.';
      Text1100100@1100012 : TextConst 'ENU=You do not have permissions to create Documents in Cartera.\;ESP=No tiene permisos para crear Documentos en Cartera.\';
      Text1100101@1100013 : TextConst 'ENU=Please, change the %1.;ESP=Por favor, cambie el %1.';
      Text1100102@1100014 : TextConst 'ENU=Posting to bal. account    #5######\;ESP=Registrando contrapartida  #5######\';
      Text1100103@1100015 : TextConst 'ENU=Creating documents         #6######;ESP=Creando documentos         #6######';
      Text1100104@1100016 : TextConst 'ENU=Corrective Invoice;ESP=Factura correctiva';

    PROCEDURE SetPostingDate@1(NewReplacePostingDate@1000 : Boolean;NewReplaceDocumentDate@1001 : Boolean;NewPostingDate@1002 : Date);
    BEGIN
      PostingDateExists := TRUE;
      ReplacePostingDate := NewReplacePostingDate;
      ReplaceDocumentDate := NewReplaceDocumentDate;
      PostingDate := NewPostingDate;
    END;

    LOCAL PROCEDURE PostItemJnlLine@2(SalesLine@1000 : Record 37;QtyToBeShipped@1001 : Decimal;QtyToBeShippedBase@1002 : Decimal;QtyToBeInvoiced@1003 : Decimal;QtyToBeInvoicedBase@1004 : Decimal;ItemLedgShptEntryNo@1005 : Integer;ItemChargeNo@1006 : Code[20];TrackingSpecification@1009 : Record 336) : Integer;
    VAR
      TempJnlLineDim@1007 : TEMPORARY Record 356;
      ItemChargeSalesLine@1008 : Record 37;
      TempWhseJnlLine@1012 : TEMPORARY Record 7311;
      TempWhseJnlLine2@1010 : TEMPORARY Record 7311;
      OriginalItemJnlLine@1013 : Record 83;
      ShipToAddress@1015 : Record 222;
      TempWhseTrackingSpecification@1016 : TEMPORARY Record 336;
      PostWhseJnlLine@1011 : Boolean;
      CheckApplFromItemEntry@1014 : Boolean;
    BEGIN
      IF NOT ItemJnlRollRndg THEN BEGIN
        RemAmt := 0;
        RemDiscAmt := 0;
      END;
      WITH SalesLine DO BEGIN
        ItemJnlLine.INIT;
        ItemJnlLine."Posting Date" := SalesHeader."Posting Date";
        ItemJnlLine."Document Date" := SalesHeader."Document Date";
        ItemJnlLine."Source Posting Group" := SalesHeader."Customer Posting Group";
        ItemJnlLine."Salespers./Purch. Code" := SalesHeader."Salesperson Code";
        IF SalesHeader."Ship-to Code" <> '' THEN BEGIN
          ShipToAddress.GET("Sell-to Customer No.",SalesHeader."Ship-to Code");
          ItemJnlLine."Country/Region Code" := ShipToAddress."Country/Region Code";
        END ELSE
          ItemJnlLine."Country/Region Code" := SalesHeader."Sell-to Country/Region Code";
        ItemJnlLine."Reason Code" := SalesHeader."Reason Code";
        ItemJnlLine."Item No." := "No.";
        ItemJnlLine.Description := Description;
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Location Code" := "Location Code";
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine."Inventory Posting Group" := "Posting Group";
        ItemJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
        ItemJnlLine."Transaction Type" := "Transaction Type";
        ItemJnlLine."Transport Method" := "Transport Method";
        ItemJnlLine."Shipment Method Code" := SalesHeader."Shipment Method Code";
        ItemJnlLine."Entry/Exit Point" := "Exit Point";
        ItemJnlLine.Area := Area;
        ItemJnlLine."Transaction Specification" := "Transaction Specification";
        ItemJnlLine."Drop Shipment" := "Drop Shipment";
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Sale;
        ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine."Derived from Blanket Order" := "Blanket Order No." <> '';
        ItemJnlLine."Cross-Reference No." := "Cross-Reference No.";
        ItemJnlLine."Originally Ordered No." := "Originally Ordered No.";
        ItemJnlLine."Originally Ordered Var. Code" := "Originally Ordered Var. Code";
        ItemJnlLine."Out-of-Stock Substitution" := "Out-of-Stock Substitution";
        ItemJnlLine."Item Category Code" := "Item Category Code";
        ItemJnlLine.Nonstock := Nonstock;
        ItemJnlLine."Purchasing Code" := "Purchasing Code";
        ItemJnlLine."Product Group Code" := "Product Group Code";
        ItemJnlLine."Return Reason Code" := "Return Reason Code";

        ItemJnlLine."Planned Delivery Date" := "Planned Delivery Date";
        ItemJnlLine."Order Date" := SalesHeader."Order Date";

        ItemJnlLine."Serial No." := TrackingSpecification."Serial No.";
        ItemJnlLine."Lot No." := TrackingSpecification."Lot No.";

        IF QtyToBeShipped = 0 THEN BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Credit Memo"
          ELSE
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Invoice";
          ItemJnlLine."Document No." := GenJnlLineDocNo;
          ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
          ItemJnlLine."Posting No. Series" := SalesHeader."Posting No. Series";
          IF QtyToBeInvoiced <> 0 THEN
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
        END ELSE BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Return Receipt";
            ItemJnlLine."Document No." := ReturnRcptHeader."No.";
            ItemJnlLine."External Document No." := ReturnRcptHeader."External Document No.";
            ItemJnlLine."Posting No. Series" := ReturnRcptHeader."No. Series";
          END ELSE BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Shipment";
            ItemJnlLine."Document No." := SalesShptHeader."No.";
            ItemJnlLine."External Document No." := SalesShptHeader."External Document No.";
            ItemJnlLine."Posting No. Series" := SalesShptHeader."No. Series";
          END;
          IF QtyToBeInvoiced <> 0 THEN BEGIN
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
            ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
            IF ItemJnlLine."Document No." = '' THEN BEGIN
              IF "Document Type" = "Document Type"::"Credit Memo" THEN
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Credit Memo"
              ELSE
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Invoice";
              ItemJnlLine."Document No." := GenJnlLineDocNo;
            END;
            ItemJnlLine."Posting No. Series" := SalesHeader."Posting No. Series";
          END;
        END;

        ItemJnlLine."Document Line No." := "Line No.";
        ItemJnlLine.Quantity := -QtyToBeShipped;
        ItemJnlLine."Quantity (Base)" := -QtyToBeShippedBase;
        ItemJnlLine."Invoiced Quantity" := -QtyToBeInvoiced;
        ItemJnlLine."Invoiced Qty. (Base)" := -QtyToBeInvoicedBase;
        ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
        ItemJnlLine."Source Currency Code" := SalesHeader."Currency Code";
        ItemJnlLine."Unit Cost (ACY)" := "Unit Cost";
        ItemJnlLine."Value Entry Type" := ItemJnlLine."Value Entry Type"::"Direct Cost";

        IF ItemChargeNo <> '' THEN BEGIN
          ItemJnlLine."Item Charge No." := ItemChargeNo;
          "Qty. to Invoice" := QtyToBeInvoiced;
        END ELSE
          ItemJnlLine."Applies-from Entry" := "Appl.-from Item Entry";

        IF QtyToBeInvoiced <> 0 THEN BEGIN
          ItemJnlLine.Amount := -(Amount * (QtyToBeInvoiced / "Qty. to Invoice") - RemAmt);
          IF SalesHeader."Prices Including VAT" THEN
            ItemJnlLine."Discount Amount" :=
              -(("Line Discount Amount" + "Inv. Discount Amount") / (1 + "VAT %" / 100) *
                (QtyToBeInvoiced / "Qty. to Invoice") - RemDiscAmt)
          ELSE
            ItemJnlLine."Discount Amount" :=
              -(("Line Discount Amount" + "Inv. Discount Amount") * (QtyToBeInvoiced / "Qty. to Invoice") - RemDiscAmt);
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          RemDiscAmt := ItemJnlLine."Discount Amount" - ROUND(ItemJnlLine."Discount Amount");
          ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
          ItemJnlLine."Discount Amount" := ROUND(ItemJnlLine."Discount Amount");
        END ELSE BEGIN
          IF SalesHeader."Prices Including VAT" THEN
            ItemJnlLine.Amount :=
              -((QtyToBeShipped * "Unit Price" * (1 - SalesLine."Line Discount %" / 100) / (1 + "VAT %" / 100)) - RemAmt)
          ELSE
            ItemJnlLine.Amount :=
              -((QtyToBeShipped * "Unit Price" * (1 - SalesLine."Line Discount %" / 100)) - RemAmt);
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          IF SalesHeader."Currency Code" <> '' THEN
            ItemJnlLine.Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",SalesHeader."Currency Code",
                  ItemJnlLine.Amount,SalesHeader."Currency Factor"))
          ELSE
            ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
        END;

        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Customer;
        ItemJnlLine."Source No." := "Sell-to Customer No.";
        ItemJnlLine."Invoice-to Source No." := "Bill-to Customer No.";
        ItemJnlLine."Source Code" := SrcCode;
        ItemJnlLine."Item Shpt. Entry No." := ItemLedgShptEntryNo;

        IF NOT JobContractLine THEN BEGIN
          IF SalesSetup."Exact Cost Reversing Mandatory" AND (Type = Type::Item) THEN
            IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
              CheckApplFromItemEntry := Quantity > 0
            ELSE
              CheckApplFromItemEntry := Quantity < 0;

          IF ("Location Code" <> '') AND (Type = Type::Item) AND (ItemJnlLine.Quantity <> 0) THEN BEGIN
            GetLocation("Location Code");
            IF (("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                (Location."Directed Put-away and Pick")) OR
               (Location."Bin Mandatory" AND NOT (WhseShip OR WhseReceive OR InvtPickPutaway OR "Drop Shipment"))
            THEN BEGIN
              CreateWhseJnlLine(ItemJnlLine,SalesLine,TempWhseJnlLine);
              PostWhseJnlLine := TRUE;
            END;
          END;

          IF QtyToBeShippedBase <> 0 THEN BEGIN
            IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
              ReserveSalesLine.TransferSalesLineToItemJnlLine(SalesLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry)
            ELSE
              TransferReservToItemJnlLine(
                SalesLine,ItemJnlLine,-QtyToBeShippedBase,TempTrackingSpecification,CheckApplFromItemEntry);

            IF CheckApplFromItemEntry THEN
              TESTFIELD("Appl.-from Item Entry");
          END;

          TempJnlLineDim.DELETEALL;
          TempDocDim.RESET;
          TempDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
          TempDocDim.SETRANGE("Line No.",SalesLine."Line No.");
          DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);

          OriginalItemJnlLine := ItemJnlLine;
          ItemJnlPostLine.RunWithCheck(ItemJnlLine,TempJnlLineDim);

          IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification) THEN
            IF TempHandlingSpecification.FINDSET THEN
              REPEAT
                TempTrackingSpecification := TempHandlingSpecification;
                TempTrackingSpecification."Source Type" := DATABASE::"Sales Line";
                TempTrackingSpecification."Source Subtype" := "Document Type";
                TempTrackingSpecification."Source ID" := "Document No.";
                TempTrackingSpecification."Source Batch Name" := '';
                TempTrackingSpecification."Source Prod. Order Line" := 0;
                TempTrackingSpecification."Source Ref. No." := "Line No.";
                IF TempTrackingSpecification.INSERT THEN;
                IF QtyToBeInvoiced <> 0 THEN BEGIN
                  TempTrackingSpecificationInv := TempTrackingSpecification;
                  IF TempTrackingSpecificationInv.INSERT THEN;
                END;
                IF PostWhseJnlLine THEN BEGIN
                  TempWhseTrackingSpecification := TempTrackingSpecification;
                  IF TempWhseTrackingSpecification.INSERT THEN;
                END;
              UNTIL TempHandlingSpecification.NEXT = 0;
          IF PostWhseJnlLine THEN BEGIN
            ItemTrackingMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempWhseTrackingSpecification,FALSE);
            IF TempWhseJnlLine2.FINDSET THEN
              REPEAT
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
            TempWhseTrackingSpecification.DELETEALL;
          END;

          IF (Type = Type::Item) AND SalesHeader.Invoice THEN BEGIN
            ClearItemChargeAssgntFilter;
            TempItemChargeAssgntSales.SETCURRENTKEY(
              "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
            TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type","Document Type");
            TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
            TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.","Line No.");
            IF TempItemChargeAssgntSales.FINDSET THEN
              REPEAT
                SalesLine.TESTFIELD("Allow Item Charge Assignment");
                GetItemChargeLine(ItemChargeSalesLine);
                ItemChargeSalesLine.CALCFIELDS("Qty. Assigned");
                IF (ItemChargeSalesLine."Qty. to Invoice" <> 0) OR
                   (ABS(ItemChargeSalesLine."Qty. Assigned") < ABS(ItemChargeSalesLine."Quantity Invoiced"))
                THEN BEGIN
                  OriginalItemJnlLine."Item Shpt. Entry No." := ItemJnlLine."Item Shpt. Entry No.";
                  PostItemChargePerOrder(OriginalItemJnlLine,ItemChargeSalesLine);
                  TempItemChargeAssgntSales.MARK(TRUE);
                END;
              UNTIL TempItemChargeAssgntSales.NEXT = 0;
          END;
        END;
      END;

      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE PostItemChargePerOrder@5801(ItemJnlLine2@1001 : Record 83;ItemChargeSalesLine@1002 : Record 37);
    VAR
      NonDistrItemJnlLine@1000 : Record 83;
      TempJnlLineDim@1003 : TEMPORARY Record 356;
      QtyToInvoice@1004 : Decimal;
      Factor@1005 : Decimal;
      OriginalAmt@1007 : Decimal;
      OriginalDiscountAmt@1009 : Decimal;
      OriginalQty@1010 : Decimal;
      SignFactor@1006 : Integer;
    BEGIN
      WITH TempItemChargeAssgntSales DO BEGIN
        SalesLine.TESTFIELD("Job No.",'');
        SalesLine.TESTFIELD("Allow Item Charge Assignment",TRUE);
        ItemJnlLine2."Document No." := GenJnlLineDocNo;
        ItemJnlLine2."External Document No." := GenJnlLineExtDocNo;
        ItemJnlLine2."Item Charge No." := "Item Charge No.";
        ItemJnlLine2.Description := ItemChargeSalesLine.Description;
        ItemJnlLine2."Unit of Measure Code" := '';
        ItemJnlLine2."Qty. per Unit of Measure" := 1;
        ItemJnlLine2."Applies-from Entry" := 0;
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          QtyToInvoice :=
            CalcQtyToInvoice(SalesLine."Return Qty. to Receive (Base)",SalesLine."Qty. to Invoice (Base)")
        ELSE
          QtyToInvoice :=
            CalcQtyToInvoice(SalesLine."Qty. to Ship (Base)",SalesLine."Qty. to Invoice (Base)");
        IF ItemJnlLine2."Invoiced Quantity" = 0 THEN BEGIN
          ItemJnlLine2."Invoiced Quantity" := ItemJnlLine2.Quantity;
          ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
        END;
        ItemJnlLine2."Document Line No." := ItemChargeSalesLine."Line No.";

        ItemJnlLine2.Amount := "Amount to Assign" * ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          ItemJnlLine2.Amount := -ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost (ACY)" :=
          ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
            Currency."Unit-Amount Rounding Precision");

        TotalChargeAmt2 := TotalChargeAmt2 + ItemJnlLine2.Amount;
        IF SalesHeader."Currency Code" <> '' THEN BEGIN
          ItemJnlLine2.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,SalesHeader."Currency Code",TotalChargeAmt2 + TotalSalesLine.Amount,SalesHeader."Currency Factor") -
            TotalChargeAmtLCY2 - TotalSalesLineLCY.Amount;
        END ELSE
          ItemJnlLine2.Amount := TotalChargeAmt2 - TotalChargeAmtLCY2;

        ItemJnlLine2.Amount := ROUND(ItemJnlLine2.Amount);
        TotalChargeAmtLCY2 := TotalChargeAmtLCY2 + ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost" := ROUND(
          ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",GLSetup."Unit-Amount Rounding Precision");
        ItemJnlLine2."Applies-to Entry" := ItemJnlLine2."Item Shpt. Entry No.";

        IF SalesHeader."Currency Code" <> '' THEN
          ItemJnlLine2."Discount Amount" := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,SalesHeader."Currency Code",
              (ItemChargeSalesLine."Inv. Discount Amount" + ItemChargeSalesLine."Pmt. Disc. Given Amount") *
               ItemJnlLine2."Invoiced Qty. (Base)" /
               ItemChargeSalesLine."Quantity (Base)" * "Qty. to Assign"  / QtyToInvoice,
               SalesHeader."Currency Factor"),GLSetup."Amount Rounding Precision")
        ELSE
          ItemJnlLine2."Discount Amount" := ROUND(
            (ItemChargeSalesLine."Inv. Discount Amount" + ItemChargeSalesLine."Pmt. Disc. Given Amount") *
             ItemJnlLine2."Invoiced Qty. (Base)" /
             ItemChargeSalesLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
             GLSetup."Amount Rounding Precision");

        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          ItemJnlLine2."Discount Amount" := -ItemJnlLine2."Discount Amount";
        ItemJnlLine2."Shortcut Dimension 1 Code" := ItemChargeSalesLine."Shortcut Dimension 1 Code";
        ItemJnlLine2."Shortcut Dimension 2 Code" := ItemChargeSalesLine."Shortcut Dimension 2 Code";
        ItemJnlLine2."Gen. Prod. Posting Group" := ItemChargeSalesLine."Gen. Prod. Posting Group";
        TempJnlLineDim.DELETEALL;
        TempDocDim.RESET;
        TempDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
        TempDocDim.SETRANGE("Line No.","Document Line No.");
        DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
      END;

      WITH TempTrackingSpecificationInv DO BEGIN
        RESET;
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source ID",TempItemChargeAssgntSales."Applies-to Doc. No.");
        SETRANGE("Source Ref. No.",TempItemChargeAssgntSales."Applies-to Doc. Line No.");
        IF ISEMPTY THEN
          ItemJnlPostLine.RunWithCheck(ItemJnlLine2,TempJnlLineDim)
        ELSE BEGIN
          FINDSET;
          NonDistrItemJnlLine := ItemJnlLine2;
          OriginalAmt := NonDistrItemJnlLine.Amount;
          OriginalDiscountAmt := NonDistrItemJnlLine."Discount Amount";
          OriginalQty := NonDistrItemJnlLine."Quantity (Base)";
          IF ("Quantity (Base)" / OriginalQty) > 0 THEN
            SignFactor := 1
          ELSE
            SignFactor := -1;
          REPEAT
            Factor := "Quantity (Base)" / OriginalQty * SignFactor;
            IF (ABS("Quantity (Base)") < ABS(NonDistrItemJnlLine."Quantity (Base)")) THEN BEGIN
              ItemJnlLine2."Quantity (Base)" := -"Quantity (Base)";
              ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
              ItemJnlLine2.Amount :=
                ROUND(OriginalAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Unit Cost" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                 GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Discount Amount" :=
                ROUND(OriginalDiscountAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Item Shpt. Entry No." := "Appl.-to Item Entry";
              ItemJnlLine2."Applies-to Entry" := "Appl.-to Item Entry";
              ItemJnlLine2."Lot No." := "Lot No.";
              ItemJnlLine2."Serial No." := "Serial No.";
              ItemJnlPostLine.RunWithCheck(ItemJnlLine2,TempJnlLineDim);
              ItemJnlLine2."Location Code" := NonDistrItemJnlLine."Location Code";
              NonDistrItemJnlLine."Quantity (Base)" -= ItemJnlLine2."Quantity (Base)";
              NonDistrItemJnlLine.Amount -= ItemJnlLine2.Amount;
              NonDistrItemJnlLine."Discount Amount" -= ItemJnlLine2."Discount Amount";
            END ELSE BEGIN // the last time
              NonDistrItemJnlLine."Quantity (Base)" := -"Quantity (Base)";
              NonDistrItemJnlLine."Invoiced Qty. (Base)" := -"Quantity (Base)";
              NonDistrItemJnlLine."Unit Cost" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                 GLSetup."Unit-Amount Rounding Precision");
              NonDistrItemJnlLine."Item Shpt. Entry No." := "Appl.-to Item Entry";
              NonDistrItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
              NonDistrItemJnlLine."Lot No." := "Lot No.";
              NonDistrItemJnlLine."Serial No." := "Serial No.";
              ItemJnlPostLine.RunWithCheck(NonDistrItemJnlLine,TempJnlLineDim);
              NonDistrItemJnlLine."Location Code" := ItemJnlLine2."Location Code";
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerShpt@5807(SalesLine@1000 : Record 37);
    VAR
      SalesShptLine@1003 : Record 111;
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      ItemTrackingMgt@1009 : Codeunit 6500;
      Factor@1008 : Decimal;
      NonDistrQuantity@1007 : Decimal;
      NonDistrQtyToAssign@1006 : Decimal;
      NonDistrAmountToAssign@1005 : Decimal;
      QtyToAssign@1004 : Decimal;
      AmountToAssign@1002 : Decimal;
      DistributeCharge@1011 : Boolean;
    BEGIN
      IF NOT SalesShptLine.GET(
        TempItemChargeAssgntSales."Applies-to Doc. No.",TempItemChargeAssgntSales."Applies-to Doc. Line No.")
      THEN
        ERROR(Text013);
      SalesShptLine.TESTFIELD("Job No.",'');

      IF SalesShptLine."Item Shpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
                        TempItemLedgEntry,-SalesShptLine."Quantity (Base)",SalesShptLine."Item Shpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        IF NOT ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Sales Shipment Line",0,SalesShptLine."Document No.",
          '',0,SalesShptLine."Line No.",-SalesShptLine."Quantity (Base)")
        THEN
          ERROR(Text040);
      END;

      IF DistributeCharge THEN BEGIN
        TempItemLedgEntry.FINDSET;
        NonDistrQuantity := SalesShptLine."Quantity (Base)";
        NonDistrQtyToAssign := TempItemChargeAssgntSales."Qty. to Assign";
        NonDistrAmountToAssign := TempItemChargeAssgntSales."Amount to Assign";
        REPEAT
          Factor := ABS(TempItemLedgEntry.Quantity) / NonDistrQuantity;
          QtyToAssign := NonDistrQtyToAssign * Factor;
          AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
          IF Factor < 1 THEN BEGIN
            PostItemCharge(SalesLine,
              TempItemLedgEntry."Entry No.",ABS(TempItemLedgEntry.Quantity),
              AmountToAssign,QtyToAssign);
            NonDistrQuantity := NonDistrQuantity - ABS(TempItemLedgEntry.Quantity);
            NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
            NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
          END ELSE // the last time
            PostItemCharge(SalesLine,
              TempItemLedgEntry."Entry No.",ABS(TempItemLedgEntry.Quantity),
              NonDistrAmountToAssign,NonDistrQtyToAssign);
        UNTIL TempItemLedgEntry.NEXT = 0;
      END ELSE
        PostItemCharge(SalesLine,
          SalesShptLine."Item Shpt. Entry No.",SalesShptLine."Quantity (Base)",
          TempItemChargeAssgntSales."Amount to Assign",
          TempItemChargeAssgntSales."Qty. to Assign");
    END;

    LOCAL PROCEDURE PostItemChargePerRetRcpt@5810(SalesLine@1000 : Record 37);
    VAR
      ReturnRcptLine@1002 : Record 6661;
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      ItemTrackingMgt@1009 : Codeunit 6500;
      Factor@1008 : Decimal;
      NonDistrQuantity@1007 : Decimal;
      NonDistrQtyToAssign@1006 : Decimal;
      NonDistrAmountToAssign@1005 : Decimal;
      QtyToAssign@1004 : Decimal;
      AmountToAssign@1003 : Decimal;
      DistributeCharge@1011 : Boolean;
    BEGIN
      IF NOT ReturnRcptLine.GET(
        TempItemChargeAssgntSales."Applies-to Doc. No.",TempItemChargeAssgntSales."Applies-to Doc. Line No.")
      THEN
        ERROR(Text013);
      ReturnRcptLine.TESTFIELD("Job No.",'');

      IF ReturnRcptLine."Item Rcpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
                        TempItemLedgEntry,ReturnRcptLine."Quantity (Base)",ReturnRcptLine."Item Rcpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        IF NOT ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Return Receipt Line",0,ReturnRcptLine."Document No.",
          '',0,ReturnRcptLine."Line No.",ReturnRcptLine."Quantity (Base)")
        THEN
          ERROR(Text040);
      END;

      IF DistributeCharge THEN BEGIN
        TempItemLedgEntry.FINDSET;
        NonDistrQuantity := ReturnRcptLine."Quantity (Base)";
        NonDistrQtyToAssign := TempItemChargeAssgntSales."Qty. to Assign";
        NonDistrAmountToAssign := TempItemChargeAssgntSales."Amount to Assign";
        REPEAT
          Factor := ABS(TempItemLedgEntry.Quantity) / NonDistrQuantity;
          QtyToAssign := NonDistrQtyToAssign * Factor;
          AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
          IF Factor < 1 THEN BEGIN
            PostItemCharge(SalesLine,
              TempItemLedgEntry."Entry No.",ABS(TempItemLedgEntry.Quantity),
              AmountToAssign,QtyToAssign);
            NonDistrQuantity := NonDistrQuantity - ABS(TempItemLedgEntry.Quantity);
            NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
            NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
          END ELSE // the last time
            PostItemCharge(SalesLine,
              TempItemLedgEntry."Entry No.",ABS(TempItemLedgEntry.Quantity),
              NonDistrAmountToAssign,NonDistrQtyToAssign);
        UNTIL TempItemLedgEntry.NEXT = 0;
      END ELSE
        PostItemCharge(SalesLine,
          ReturnRcptLine."Item Rcpt. Entry No.",ReturnRcptLine."Quantity (Base)",
          TempItemChargeAssgntSales."Amount to Assign",
          TempItemChargeAssgntSales."Qty. to Assign")
    END;

    LOCAL PROCEDURE PostAssocItemJnlLine@3(QtyToBeShipped@1000 : Decimal;QtyToBeShippedBase@1001 : Decimal) : Integer;
    VAR
      TempDocDim2@1002 : TEMPORARY Record 357;
      TempJnlLineDim@1003 : TEMPORARY Record 356;
      TempHandlingSpecification2@1005 : TEMPORARY Record 336;
      ItemEntryRelation@1004 : Record 6507;
    BEGIN
      PurchOrderHeader.GET(
        PurchOrderHeader."Document Type"::Order,
        SalesLine."Purchase Order No.");
      PurchOrderLine.GET(
        PurchOrderLine."Document Type"::Order,
        SalesLine."Purchase Order No.",SalesLine."Purch. Order Line No.");

      ItemJnlLine.INIT;
      ItemJnlLine."Source Posting Group" := PurchOrderHeader."Vendor Posting Group";
      ItemJnlLine."Salespers./Purch. Code" := PurchOrderHeader."Purchaser Code";
      ItemJnlLine."Country/Region Code" := PurchOrderHeader."VAT Country/Region Code";
      ItemJnlLine."Reason Code" := PurchOrderHeader."Reason Code";
      ItemJnlLine."Posting No. Series" := PurchOrderHeader."Posting No. Series";
      ItemJnlLine."Item No." := PurchOrderLine."No.";
      ItemJnlLine.Description := PurchOrderLine.Description;
      ItemJnlLine."Shortcut Dimension 1 Code" := PurchOrderLine."Shortcut Dimension 1 Code";
      ItemJnlLine."Shortcut Dimension 2 Code" := PurchOrderLine."Shortcut Dimension 2 Code";
      ItemJnlLine."Location Code" := PurchOrderLine."Location Code";
      ItemJnlLine."Inventory Posting Group" := PurchOrderLine."Posting Group";
      ItemJnlLine."Gen. Bus. Posting Group" := PurchOrderLine."Gen. Bus. Posting Group";
      ItemJnlLine."Gen. Prod. Posting Group" := PurchOrderLine."Gen. Prod. Posting Group";
      ItemJnlLine."Applies-to Entry" := PurchOrderLine."Appl.-to Item Entry";
      ItemJnlLine."Transaction Type" := PurchOrderLine."Transaction Type";
      ItemJnlLine."Transport Method" := PurchOrderLine."Transport Method";
      ItemJnlLine."Entry/Exit Point" := PurchOrderLine."Entry Point";
      ItemJnlLine.Area := PurchOrderLine.Area;
      ItemJnlLine."Transaction Specification" := PurchOrderLine."Transaction Specification";
      ItemJnlLine."Drop Shipment" := PurchOrderLine."Drop Shipment";
      ItemJnlLine."Posting Date" := SalesHeader."Posting Date";
      ItemJnlLine."Document Date" := SalesHeader."Document Date";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Purchase;
      ItemJnlLine."Document No." := PurchOrderHeader."Receiving No.";
      ItemJnlLine."External Document No." := PurchOrderHeader."No.";
      ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Receipt";
      ItemJnlLine."Document Line No." := PurchOrderLine."Line No.";
      ItemJnlLine.Quantity := QtyToBeShipped;
      ItemJnlLine."Quantity (Base)" := QtyToBeShippedBase;
      ItemJnlLine."Invoiced Quantity" := 0;
      ItemJnlLine."Invoiced Qty. (Base)" := 0;
      ItemJnlLine."Unit Cost" := PurchOrderLine."Unit Cost (LCY)";
      ItemJnlLine."Source Currency Code" := SalesHeader."Currency Code";
      ItemJnlLine."Unit Cost (ACY)" := PurchOrderLine."Unit Cost";
      ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Vendor;
      ItemJnlLine."Source No." := PurchOrderLine."Buy-from Vendor No.";
      ItemJnlLine."Invoice-to Source No." := PurchOrderLine."Pay-to Vendor No.";
      ItemJnlLine."Source Code" := SrcCode;
      ItemJnlLine."Variant Code" := PurchOrderLine."Variant Code";
      ItemJnlLine."Item Category Code" := PurchOrderLine."Item Category Code";
      ItemJnlLine."Product Group Code" := PurchOrderLine."Product Group Code";
      ItemJnlLine."Bin Code" := PurchOrderLine."Bin Code";
      ItemJnlLine."Purchasing Code" := PurchOrderLine."Purchasing Code";
      ItemJnlLine."Prod. Order No." := PurchOrderLine."Prod. Order No.";
      ItemJnlLine."Unit of Measure Code" := PurchOrderLine."Unit of Measure Code";
      ItemJnlLine."Qty. per Unit of Measure" := PurchOrderLine."Qty. per Unit of Measure";
      ItemJnlLine."Applies-to Entry" := 0;

      IF PurchOrderLine."Job No." = '' THEN BEGIN
        TransferReservFromPurchLine(PurchOrderLine,ItemJnlLine,QtyToBeShippedBase);
        DocDim.RESET;
        DocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
        DocDim.SETRANGE("Document Type",PurchOrderLine."Document Type");
        DocDim.SETRANGE("Document No.",PurchOrderLine."Document No.");
        DocDim.SETRANGE("Line No.",PurchOrderLine."Line No.");
        IF DocDim.FINDSET THEN
          REPEAT
            TempDocDim2.INIT;
            TempDocDim2 := DocDim;
            TempDocDim2.INSERT;
          UNTIL DocDim.NEXT = 0;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyDocDimToJnlLineDim(TempDocDim2,TempJnlLineDim);
        ItemJnlPostLine.RunWithCheck(ItemJnlLine,TempJnlLineDim);
        // Handle Item Tracking
        IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
          IF TempHandlingSpecification2.FINDSET THEN
            REPEAT
              TempTrackingSpecification := TempHandlingSpecification2;
              TempTrackingSpecification."Source Type" := DATABASE::"Purchase Line";
              TempTrackingSpecification."Source Subtype" := PurchOrderLine."Document Type";
              TempTrackingSpecification."Source ID" := PurchOrderLine."Document No.";
              TempTrackingSpecification."Source Batch Name" := '';
              TempTrackingSpecification."Source Prod. Order Line" := 0;
              TempTrackingSpecification."Source Ref. No." := PurchOrderLine."Line No.";
              IF TempTrackingSpecification.INSERT THEN;
              ItemEntryRelation.INIT;
              ItemEntryRelation."Item Entry No." := TempHandlingSpecification2."Entry No.";
              ItemEntryRelation."Serial No." := TempHandlingSpecification2."Serial No.";
              ItemEntryRelation."Lot No." := TempHandlingSpecification2."Lot No.";
              ItemEntryRelation."Source Type" := DATABASE::"Purch. Rcpt. Line";
              ItemEntryRelation."Source ID" := PurchOrderHeader."Receiving No.";
              ItemEntryRelation."Source Ref. No." := PurchOrderLine."Line No.";
              ItemEntryRelation."Order No." := PurchOrderLine."Document No.";
              ItemEntryRelation."Order Line No." := PurchOrderLine."Line No.";
              ItemEntryRelation.INSERT;
            UNTIL TempHandlingSpecification2.NEXT = 0;
          EXIT(0);
        END;
      END;

      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE UpdateAssocOrder@4();
    VAR
      ReservePurchLine@1000 : Codeunit 99000834;
    BEGIN
      DropShipPostBuffer.RESET;
      IF DropShipPostBuffer.ISEMPTY THEN
        EXIT;
      CLEAR(PurchOrderHeader);
      DropShipPostBuffer.FINDSET;
      REPEAT
        IF PurchOrderHeader."No." <> DropShipPostBuffer."Order No." THEN BEGIN
          PurchOrderHeader.GET(
            PurchOrderHeader."Document Type"::Order,
            DropShipPostBuffer."Order No.");
          PurchOrderHeader."Last Receiving No." := PurchOrderHeader."Receiving No.";
          PurchOrderHeader."Receiving No." := '';
          PurchOrderHeader.MODIFY;
          ReservePurchLine.UpdateItemTrackingAfterPosting(PurchOrderHeader);
        END;
        PurchOrderLine.GET(
          PurchOrderLine."Document Type"::Order,
          DropShipPostBuffer."Order No.",DropShipPostBuffer."Order Line No.");
        PurchOrderLine."Quantity Received" := PurchOrderLine."Quantity Received" + DropShipPostBuffer.Quantity;
        PurchOrderLine."Qty. Received (Base)" := PurchOrderLine."Qty. Received (Base)" + DropShipPostBuffer."Quantity (Base)";
        PurchOrderLine.InitOutstanding;
        PurchOrderLine.InitQtyToReceive;
        PurchOrderLine.MODIFY;
      UNTIL DropShipPostBuffer.NEXT = 0;
      DropShipPostBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateAssocLines@5(VAR SalesOrderLine@1000 : Record 37);
    BEGIN
      PurchOrderLine.GET(
        PurchOrderLine."Document Type"::Order,
        SalesOrderLine."Purchase Order No.",SalesOrderLine."Purch. Order Line No.");
      PurchOrderLine."Sales Order No." := '';
      PurchOrderLine."Sales Order Line No." := 0;
      PurchOrderLine.MODIFY;
      SalesOrderLine."Purchase Order No." := '';
      SalesOrderLine."Purch. Order Line No." := 0;
    END;

    LOCAL PROCEDURE FillInvPostingBuffer@5804(SalesLine@1000 : Record 37;SalesLineACY@1001 : Record 37);
    VAR
      TotalVAT@1005 : Decimal;
      TotalVATACY@1004 : Decimal;
      TotalAmount@1003 : Decimal;
      TotalAmountACY@1002 : Decimal;
    BEGIN
      IF (SalesLine."Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
         (SalesLine."Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
      THEN
        GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");

        // $002 INCOMING
        // Rellenamos el campo regimen de IVA

        InvPostingBuffer[1].Regimen := VATBusGroup.Regimen;

      InvPostingBuffer[1].PrepareSales(SalesLine);

      TempDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
      TempDocDim.SETRANGE("Line No.",SalesLine."Line No.");
      TotalVAT := SalesLine."Amount Including VAT" - SalesLine.Amount;
      TotalVATACY := SalesLineACY."Amount Including VAT" - SalesLineACY.Amount;
      TotalAmount := SalesLine.Amount;
      TotalAmountACY := SalesLineACY.Amount;

      IF SalesSetup."Post Invoice Discount" THEN BEGIN
        IF SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Reverse Charge VAT" THEN
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -SalesLine."Inv. Discount Amount",
            -SalesLineACY."Inv. Discount Amount")
        ELSE
          InvPostingBuffer[1].CalcDiscount(
            SalesHeader."Prices Including VAT",
            -SalesLine."Inv. Discount Amount",
            -SalesLineACY."Inv. Discount Amount");
        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Sales Inv. Disc. Account");
          InvPostingBuffer[1].SetAccount(
            GenPostingSetup."Sales Inv. Disc. Account",
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY);
          UpdInvPostingBuffer;
        END;
      END;

      IF SalesSetup."Post Line Discount" THEN BEGIN
        IF SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Reverse Charge VAT" THEN
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -SalesLine."Line Discount Amount",
            -SalesLineACY."Line Discount Amount")
        ELSE
          InvPostingBuffer[1].CalcDiscount(
            SalesHeader."Prices Including VAT",
            -SalesLine."Line Discount Amount",
            -SalesLineACY."Line Discount Amount");
        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Sales Line Disc. Account");
          InvPostingBuffer[1].SetAccount(
            GenPostingSetup."Sales Line Disc. Account",
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY);
          UpdInvPostingBuffer;
        END;
      END;

      IF SalesSetup."Post Payment Discount" THEN BEGIN
        IF SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Reverse Charge VAT" THEN
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -SalesLine."Pmt. Disc. Given Amount",
            -SalesLineACY."Pmt. Disc. Given Amount")
        ELSE
          InvPostingBuffer[1].CalcDiscount(
            SalesHeader."Prices Including VAT",
            -SalesLine."Pmt. Disc. Given Amount",
            -SalesLineACY."Pmt. Disc. Given Amount");
        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Sales Line Disc. Account");
          InvPostingBuffer[1].SetAccount(
            GenPostingSetup."Sales Pmt. Disc. Debit Acc.",
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY);
          UpdInvPostingBuffer;
        END;

      END;

      // $003 INCOMING
      InvPostingBuffer[1].Hotel := SalesHeader.Hotel;

      InvPostingBuffer[1].SetAmounts(
        TotalVAT,
        TotalVATACY,
        TotalAmount,
        TotalAmountACY,
        SalesLine."VAT Difference");

      IF (SalesLine.Type = SalesLine.Type::"G/L Account") OR (SalesLine.Type = SalesLine.Type::"Fixed Asset") THEN
        InvPostingBuffer[1].SetAccount(
          SalesLine."No.",
          TotalVAT,
          TotalVATACY,
          TotalAmount,
          TotalAmountACY)
      ELSE
        IF SalesLine."Document Type" IN [SalesLine."Document Type"::"Return Order",SalesLine."Document Type"::"Credit Memo"] THEN BEGIN
          GenPostingSetup.TESTFIELD("Sales Credit Memo Account");
          InvPostingBuffer[1].SetAccount(
            GenPostingSetup."Sales Credit Memo Account",
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY);
        END ELSE BEGIN
          GenPostingSetup.TESTFIELD("Sales Account");
           InvPostingBuffer[1].SetAccount(
             GenPostingSetup."Sales Account",
             TotalVAT,
             TotalVATACY,
             TotalAmount,
             TotalAmountACY);
        END;
      UpdInvPostingBuffer;
    END;

    LOCAL PROCEDURE UpdInvPostingBuffer@6();
    VAR
      TempDimBuf@1000 : TEMPORARY Record 360;
      EntryNo@1001 : Integer;
    BEGIN
      IF TempDocDim.FINDSET THEN
        REPEAT
          TempDimBuf."Table ID" := TempDocDim."Table ID";
          TempDimBuf."Dimension Code" := TempDocDim."Dimension Code";
          TempDimBuf."Dimension Value Code" := TempDocDim."Dimension Value Code";
          TempDimBuf.INSERT;
        UNTIL TempDocDim.NEXT = 0;
      EntryNo := DimBufMgt.FindDimensions(TempDimBuf);
      IF EntryNo = 0 THEN
        EntryNo := DimBufMgt.InsertDimensions(TempDimBuf);
      InvPostingBuffer[1]."Dimension Entry No." := EntryNo;
      IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
        FALineNo := FALineNo + 1;
        InvPostingBuffer[1]."Fixed Asset Line No." := FALineNo;
      END;

      InvPostingBuffer[2] := InvPostingBuffer[1];
      IF InvPostingBuffer[2].FIND THEN BEGIN
        InvPostingBuffer[2].Amount := InvPostingBuffer[2].Amount + InvPostingBuffer[1].Amount;
        InvPostingBuffer[2]."VAT Amount"  :=
          InvPostingBuffer[2]."VAT Amount" + InvPostingBuffer[1]."VAT Amount";
        InvPostingBuffer[2]."VAT Base Amount" :=
          InvPostingBuffer[2]."VAT Base Amount" + InvPostingBuffer[1]."VAT Base Amount";
        InvPostingBuffer[2]."Amount (ACY)" :=
          InvPostingBuffer[2]."Amount (ACY)" + InvPostingBuffer[1]."Amount (ACY)";
        InvPostingBuffer[2]."VAT Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Amount (ACY)" + InvPostingBuffer[1]."VAT Amount (ACY)";
        InvPostingBuffer[2]."VAT Difference"  :=
          InvPostingBuffer[2]."VAT Difference" + InvPostingBuffer[1]."VAT Difference";
        InvPostingBuffer[2]."VAT Base Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Base Amount (ACY)" +
          InvPostingBuffer[1]."VAT Base Amount (ACY)";
        InvPostingBuffer[2].Quantity :=
          InvPostingBuffer[2].Quantity + InvPostingBuffer[1].Quantity;
        IF NOT InvPostingBuffer[1]."System-Created Entry" THEN
          InvPostingBuffer[2]."System-Created Entry" := FALSE;
        InvPostingBuffer[2].MODIFY;
      END ELSE
        InvPostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE GetCurrency@17();
    BEGIN
      WITH SalesHeader DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    LOCAL PROCEDURE DivideAmount@8(QtyType@1000 : 'General,Invoicing,Shipping';SalesLineQty@1001 : Decimal);
    BEGIN
      IF RoundingLineInserted AND (RoundingLineNo = SalesLine."Line No.") THEN
        EXIT;
      WITH SalesLine DO
        IF (SalesLineQty = 0) OR ("Unit Price" = 0) OR ("Line Discount %" = 100) THEN BEGIN
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "Pmt. Disc. Given Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
        END ELSE BEGIN
          TempVATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0);
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
          BEGIN
            "VAT %" := TempVATAmountLine."VAT %";
            "EC %" := TempVATAmountLine."EC %";
          END;
          TempVATAmountLineRemainder := TempVATAmountLine;
          IF NOT TempVATAmountLineRemainder.FIND THEN BEGIN
            TempVATAmountLineRemainder.INIT;
            TempVATAmountLineRemainder.INSERT;
          END;
          "Line Amount" := ROUND(SalesLineQty * "Unit Price",Currency."Amount Rounding Precision");
          IF SalesLineQty <> Quantity THEN BEGIN
            "Line Discount Amount" :=
              ROUND("Line Amount" * "Line Discount %" / 100,Currency."Amount Rounding Precision");
          "Pmt. Disc. Given Amount" :=
            ROUND("Pmt. Disc. Given Amount" * SalesLineQty / Quantity,Currency."Amount Rounding Precision");
          END;
          "Line Amount" := "Line Amount" - "Line Discount Amount";

          IF "Allow Invoice Disc." AND (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) THEN
            IF QtyType = QtyType::Invoicing THEN
              "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
            ELSE BEGIN
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" +
                TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                TempVATAmountLine."Inv. Disc. Base Amount";
              "Inv. Discount Amount" :=
                ROUND(
                  TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
            END;

          IF SalesHeader."Prices Including VAT" THEN BEGIN
            IF (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) OR
               ("Line Amount" = 0)
            THEN BEGIN
              TempVATAmountLineRemainder."VAT Amount" := 0;
              TempVATAmountLineRemainder."EC Amount" := 0;
              TempVATAmountLineRemainder."Amount Including VAT+EC" := 0;
            END ELSE BEGIN
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" +
                TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Given Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" -
                TempVATAmountLine."Pmt. Disc. Given Amount");
              TempVATAmountLineRemainder."EC Amount" :=
                TempVATAmountLineRemainder."EC Amount" +
                TempVATAmountLine."EC Amount" *
                ("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Given Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" -
                TempVATAmountLine."Pmt. Disc. Given Amount");
              TempVATAmountLineRemainder."Amount Including VAT+EC" :=
                TempVATAmountLineRemainder."Amount Including VAT+EC" +
                TempVATAmountLine."Amount Including VAT+EC" *
                ("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Given Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" -
                TempVATAmountLine."Pmt. Disc. Given Amount");
            END;
            "Amount Including VAT" :=
              ROUND(TempVATAmountLineRemainder."Amount Including VAT+EC",Currency."Amount Rounding Precision");
            Amount :=
              ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."EC Amount",Currency."Amount Rounding Precision");
            "VAT Base Amount" :=
              ROUND(
                Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
            TempVATAmountLineRemainder."Amount Including VAT+EC" :=
              TempVATAmountLineRemainder."Amount Including VAT+EC" - "Amount Including VAT";
            TempVATAmountLineRemainder."VAT Amount" :=
              TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
          END ELSE BEGIN
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
              "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              Amount := 0;
              "VAT Base Amount" := 0;
            END ELSE BEGIN
              Amount := "Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Given Amount";
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
              IF TempVATAmountLine."VAT+EC Base" = 0 THEN
                TempVATAmountLineRemainder."VAT Amount" := 0
              ELSE
                IF TempVATAmountLine."Line Amount" <> 0 THEN BEGIN
                  TempVATAmountLineRemainder."VAT Amount" :=
                    TempVATAmountLineRemainder."VAT Amount" +
                    TempVATAmountLine."VAT Amount" *
                    ("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Given Amount") /
                    (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" -
                    TempVATAmountLine."Pmt. Disc. Given Amount");
                  TempVATAmountLineRemainder."EC Amount" :=
                    TempVATAmountLineRemainder."EC Amount" +
                    TempVATAmountLine."EC Amount" *
                    ("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Given Amount") /
                    (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" -
                    TempVATAmountLine."Pmt. Disc. Given Amount");
                END;
              "Amount Including VAT" :=
                Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision")
                + ROUND(TempVATAmountLineRemainder."EC Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
            END;
          END;

          TempVATAmountLineRemainder.MODIFY;
        END;
    END;

    LOCAL PROCEDURE RoundAmount@9(SalesLineQty@1000 : Decimal);
    VAR
      NoVAT@1001 : Boolean;
    BEGIN
      WITH SalesLine DO BEGIN
        IncrAmount(TotalSalesLine);
        Increment(TotalSalesLine."Net Weight",ROUND(SalesLineQty * "Net Weight",0.000001));
        Increment(TotalSalesLine."Gross Weight",ROUND(SalesLineQty * "Gross Weight",0.000001));
        Increment(TotalSalesLine."Unit Volume",ROUND(SalesLineQty * "Unit Volume",0.000001));
        Increment(TotalSalesLine.Quantity,SalesLineQty);
        IF "Units per Parcel" > 0 THEN
          Increment(
            TotalSalesLine."Units per Parcel",
            ROUND(SalesLineQty / "Units per Parcel",1,'>'));

        TempSalesLine := SalesLine;
        SalesLineACY := SalesLine;

        IF SalesHeader."Currency Code" <> '' THEN BEGIN
          IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
             (SalesHeader."Posting Date" = 0D)
          THEN
            UseDate := WORKDATE
          ELSE
            UseDate := SalesHeader."Posting Date";

          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Amount Including VAT",SalesHeader."Currency Factor")) -
                  TotalSalesLineLCY."Amount Including VAT";
          IF NoVAT THEN
            Amount := "Amount Including VAT"
          ELSE
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  UseDate,SalesHeader."Currency Code",
                  TotalSalesLine.Amount,SalesHeader."Currency Factor")) -
                    TotalSalesLineLCY.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Line Amount",SalesHeader."Currency Factor")) -
                  TotalSalesLineLCY."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Line Discount Amount",SalesHeader."Currency Factor")) -
                  TotalSalesLineLCY."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Inv. Discount Amount",SalesHeader."Currency Factor")) -
                  TotalSalesLineLCY."Inv. Discount Amount";
          "Pmt. Disc. Given Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Pmt. Disc. Given Amount",SalesHeader."Currency Factor")) -
                  TotalSalesLineLCY."Pmt. Disc. Given Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."VAT Difference",SalesHeader."Currency Factor")) -
                  TotalSalesLineLCY."VAT Difference";
        END;

        IncrAmount(TotalSalesLineLCY);
        Increment(TotalSalesLineLCY."Unit Cost (LCY)",ROUND(SalesLineQty * "Unit Cost (LCY)"));
      END;
    END;

    LOCAL PROCEDURE ReverseAmount@10(VAR SalesLine@1000 : Record 37);
    BEGIN
      WITH SalesLine DO BEGIN
        "Qty. to Ship" := -"Qty. to Ship";
        "Qty. to Ship (Base)" := -"Qty. to Ship (Base)";
        "Return Qty. to Receive" := -"Return Qty. to Receive";
        "Return Qty. to Receive (Base)" := -"Return Qty. to Receive (Base)";
        "Qty. to Invoice" := -"Qty. to Invoice";
        "Qty. to Invoice (Base)" := -"Qty. to Invoice (Base)";
        "Line Amount" := -"Line Amount";
        Amount := -Amount;
        "VAT Base Amount" := -"VAT Base Amount";
        "VAT Difference" := -"VAT Difference";
        "Amount Including VAT" := -"Amount Including VAT";
        "Line Discount Amount" := -"Line Discount Amount";
        "Inv. Discount Amount" := -"Inv. Discount Amount";
        "Pmt. Disc. Given Amount" := -"Pmt. Disc. Given Amount";
      END;
    END;

    LOCAL PROCEDURE InvoiceRounding@12(UseTempData@1000 : Boolean);
    VAR
      DocDim2@1003 : Record 357;
      InvoiceRoundingAmount@1001 : Decimal;
      NextLineNo@1002 : Integer;
    BEGIN
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalSalesLine."Amount Including VAT" -
          ROUND(
            TotalSalesLine."Amount Including VAT",
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      IF InvoiceRoundingAmount <> 0 THEN BEGIN
        CustPostingGr.GET(SalesHeader."Customer Posting Group");
        CustPostingGr.TESTFIELD("Invoice Rounding Account");
        WITH SalesLine DO BEGIN
          INIT;
          NextLineNo := "Line No." + 10000;
          "System-Created Entry" := TRUE;
          IF UseTempData THEN BEGIN
            "Line No." := 0;
            Type := Type::"G/L Account";
          END ELSE BEGIN
            "Line No." := NextLineNo;
            VALIDATE(Type,Type::"G/L Account");
          END;
          VALIDATE("No.",CustPostingGr."Invoice Rounding Account");
          VALIDATE(Quantity,1);
          IF "Document Type" IN ["Document Type"::"Return Order",SalesLine."Document Type"::"Credit Memo"] THEN
            VALIDATE(SalesLine."Return Qty. to Receive",Quantity)
          ELSE
            VALIDATE("Qty. to Ship",Quantity);
          IF SalesHeader."Prices Including VAT" THEN
            VALIDATE("Unit Price",InvoiceRoundingAmount)
          ELSE
            VALIDATE(
              "Unit Price",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
          "Line No." := NextLineNo;
          IF NOT UseTempData THEN BEGIN
            DocDim2.SETRANGE("Table ID",DATABASE::"Sales Line");
            DocDim2.SETRANGE("Document Type",SalesHeader."Document Type");
            DocDim2.SETRANGE("Document No.",SalesHeader."No.");
            DocDim2.SETRANGE("Line No.","Line No.");
            IF DocDim2.FINDSET THEN
              REPEAT
                TempDocDim := DocDim2;
                TempDocDim.INSERT;
              UNTIL DocDim2.NEXT = 0;
          END;
          LastLineRetrieved := FALSE;
          RoundingLineInserted := TRUE;
          RoundingLineNo := "Line No.";
        END;
      END;
    END;

    LOCAL PROCEDURE IncrAmount@13(VAR TotalSalesLine@1000 : Record 37);
    BEGIN
      WITH SalesLine DO BEGIN
        IF SalesHeader."Prices Including VAT" OR
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        THEN
          Increment(TotalSalesLine."Line Amount","Line Amount");
        Increment(TotalSalesLine.Amount,Amount);
        Increment(TotalSalesLine."VAT Base Amount","VAT Base Amount");
        Increment(TotalSalesLine."VAT Difference","VAT Difference");
        Increment(TotalSalesLine."Amount Including VAT","Amount Including VAT");
        Increment(TotalSalesLine."Line Discount Amount","Line Discount Amount");
        Increment(TotalSalesLine."Inv. Discount Amount","Inv. Discount Amount");
        Increment(TotalSalesLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
        Increment(TotalSalesLine."Prepmt. Line Amount","Prepmt. Line Amount");
        Increment(TotalSalesLine."Prepmt. Amt. Inv.","Prepmt. Amt. Inv.");
        Increment(TotalSalesLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
        Increment(TotalSalesLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
        Increment(TotalSalesLine."Prepayment VAT Difference","Prepayment VAT Difference");
        Increment(TotalSalesLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
        Increment(TotalSalesLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
        Increment(TotalSalesLine."Pmt. Disc. Given Amount","Pmt. Disc. Given Amount");
      END;
    END;

    LOCAL PROCEDURE Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    PROCEDURE GetSalesLines@16(VAR NewSalesHeader@1000 : Record 36;VAR NewSalesLine@1001 : Record 37;QtyType@1002 : 'General,Invoicing,Shipping');
    VAR
      OldSalesLine@1003 : Record 37;
      MergedSalesLines@1006 : TEMPORARY Record 37;
      TotalAdjCostLCY@1005 : Decimal;
    BEGIN
      SalesHeader := NewSalesHeader;
      IF QtyType = QtyType::Invoicing THEN BEGIN
        CreatePrepaymentLines(SalesHeader,TempPrepaymentSalesLine,PrepmtDocDim,FALSE);
        MergeSaleslines(SalesHeader,OldSalesLine,TempPrepaymentSalesLine,MergedSalesLines);
        SumSalesLines2(NewSalesLine,MergedSalesLines,QtyType,TRUE,FALSE,TotalAdjCostLCY);
      END ELSE
        SumSalesLines2(NewSalesLine,OldSalesLine,QtyType,TRUE,FALSE,TotalAdjCostLCY);
    END;

    PROCEDURE GetSalesLinesTemp@33(VAR NewSalesHeader@1000 : Record 36;VAR NewSalesLine@1001 : Record 37;VAR OldSalesLine@1002 : Record 37;QtyType@1003 : 'General,Invoicing,Shipping');
    VAR
      TotalAdjCostLCY@1005 : Decimal;
    BEGIN
      SalesHeader := NewSalesHeader;
      OldSalesLine.SetSalesHeader(NewSalesHeader);
      SumSalesLines2(NewSalesLine,OldSalesLine,QtyType,TRUE,FALSE,TotalAdjCostLCY);
    END;

    PROCEDURE SumSalesLines@15(VAR NewSalesHeader@1000 : Record 36;QtyType@1001 : 'General,Invoicing,Shipping';VAR NewTotalSalesLine@1002 : Record 37;VAR NewTotalSalesLineLCY@1003 : Record 37;VAR VATAmount@1004 : Decimal;VAR VATAmountText@1005 : Text[30];VAR ProfitLCY@1006 : Decimal;VAR ProfitPct@1007 : Decimal;VAR TotalAdjCostLCY@1010 : Decimal);
    VAR
      OldSalesLine@1008 : Record 37;
    BEGIN
      SumSalesLinesTemp(
        NewSalesHeader,OldSalesLine,QtyType,NewTotalSalesLine,NewTotalSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);
    END;

    PROCEDURE SumSalesLinesTemp@25(VAR NewSalesHeader@1000 : Record 36;VAR OldSalesLine@1001 : Record 37;QtyType@1002 : 'General,Invoicing,Shipping';VAR NewTotalSalesLine@1003 : Record 37;VAR NewTotalSalesLineLCY@1004 : Record 37;VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30];VAR ProfitLCY@1007 : Decimal;VAR ProfitPct@1008 : Decimal;VAR TotalAdjCostLCY@1011 : Decimal);
    VAR
      SalesLine@1009 : Record 37;
    BEGIN
      WITH SalesHeader DO BEGIN
        SalesHeader := NewSalesHeader;
        SumSalesLines2(SalesLine,OldSalesLine,QtyType,FALSE,TRUE,TotalAdjCostLCY);
        ProfitLCY := TotalSalesLineLCY.Amount - TotalSalesLineLCY."Unit Cost (LCY)";
        IF TotalSalesLineLCY.Amount = 0 THEN
          ProfitPct := 0
        ELSE
          ProfitPct := ROUND(ProfitLCY / TotalSalesLineLCY.Amount * 100,0.1);
        VATAmount := TotalSalesLine."Amount Including VAT" - TotalSalesLine.Amount;
        IF (TotalSalesLine."VAT %" = 0) AND (TotalSalesLine."EC %" = 0) THEN
          VATAmountText := Text016
        ELSE
          VATAmountText := STRSUBSTNO(Text017,(TotalSalesLine."VAT %" + TotalSalesLine."EC %"));
        NewTotalSalesLine := TotalSalesLine;
        NewTotalSalesLineLCY := TotalSalesLineLCY;
      END;
    END;

    LOCAL PROCEDURE SumSalesLines2@11(VAR NewSalesLine@1000 : Record 37;VAR OldSalesLine@1001 : Record 37;QtyType@1002 : 'General,Invoicing,Shipping';InsertSalesLine@1003 : Boolean;CalcAdCostLCY@1008 : Boolean;VAR TotalAdjCostLCY@1006 : Decimal);
    VAR
      SalesLineQty@1004 : Decimal;
      AdjCostLCY@1007 : Decimal;
    BEGIN
      TotalAdjCostLCY := 0;
      TempVATAmountLineRemainder.DELETEALL;
      OldSalesLine.CalcVATAmountLines(QtyType,SalesHeader,OldSalesLine,TempVATAmountLine);
      WITH SalesHeader DO BEGIN
        GLSetup.GET;
        SalesSetup.GET;
        GetCurrency;
        OldSalesLine.SETRANGE("Document Type","Document Type");
        OldSalesLine.SETRANGE("Document No.","No.");
        RoundingLineInserted := FALSE;
        IF OldSalesLine.FINDSET THEN
          REPEAT
            IF NOT RoundingLineInserted THEN
              SalesLine := OldSalesLine;
            CASE QtyType OF
              QtyType::General:
                SalesLineQty := SalesLine.Quantity;
              QtyType::Invoicing:
                SalesLineQty := SalesLine."Qty. to Invoice";
              QtyType::Shipping:
                BEGIN
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                    SalesLineQty := SalesLine."Return Qty. to Receive"
                  ELSE
                    SalesLineQty := SalesLine."Qty. to Ship";
                END;
            END;
            DivideAmount(QtyType,SalesLineQty);
            SalesLine.Quantity := SalesLineQty;
            IF SalesLineQty <> 0 THEN BEGIN
              IF (SalesLine.Amount <> 0) AND NOT RoundingLineInserted THEN
                IF TotalSalesLine.Amount = 0 THEN
                BEGIN
                  TotalSalesLine."VAT %" := SalesLine."VAT %";
                  TotalSalesLine."EC %" := SalesLine."EC %";
                END
                ELSE
                  IF TotalSalesLine."VAT %" <> SalesLine."VAT %" THEN
                    TotalSalesLine."VAT %" := 0;
              RoundAmount(SalesLineQty);

              IF (QtyType IN [QtyType::General,QtyType::Invoicing]) AND
                 NOT InsertSalesLine AND CalcAdCostLCY
              THEN BEGIN
                AdjCostLCY := CostCalcMgt.CalcSalesLineCostLCY(SalesLine,QtyType);
                TotalAdjCostLCY := TotalAdjCostLCY + GetSalesLineAdjCostLCY(SalesLine,QtyType,AdjCostLCY);
              END;

              SalesLine := TempSalesLine;
            END;
            IF InsertSalesLine THEN BEGIN
              NewSalesLine := SalesLine;
              NewSalesLine.INSERT;
            END;
            IF RoundingLineInserted THEN
              LastLineRetrieved := TRUE
            ELSE BEGIN
              LastLineRetrieved := OldSalesLine.NEXT = 0;
              IF LastLineRetrieved AND SalesSetup."Invoice Rounding" THEN
                InvoiceRounding(TRUE);
            END;
          UNTIL LastLineRetrieved;
      END;
    END;

    LOCAL PROCEDURE GetSalesLineAdjCostLCY@48(SalesLine2@1000 : Record 37;QtyType@1002 : 'General,Invoicing,Shipping';AdjCostLCY@1001 : Decimal) : Decimal;
    BEGIN
      WITH SalesLine2 DO BEGIN
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
          AdjCostLCY := -AdjCostLCY;

        CASE TRUE OF
          "Shipment No." <> '',"Return Receipt No." <> '':
            EXIT(AdjCostLCY);
          QtyType = QtyType::General:
            EXIT(ROUND("Outstanding Quantity" * "Unit Cost (LCY)") + AdjCostLCY);
          "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]:
            BEGIN
              IF "Qty. to Invoice" > "Qty. to Ship" THEN
                EXIT(ROUND("Qty. to Ship" * "Unit Cost (LCY)") + AdjCostLCY);
              EXIT(ROUND("Qty. to Invoice" * "Unit Cost (LCY)"));
            END;
          "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]:
            BEGIN
              IF "Qty. to Invoice" > "Return Qty. to Receive" THEN
                EXIT(ROUND("Return Qty. to Receive" * "Unit Cost (LCY)") + AdjCostLCY);
              EXIT(ROUND("Qty. to Invoice" * "Unit Cost (LCY)"));
            END;
        END;
      END;
    END;

    PROCEDURE TestDeleteHeader@19(SalesHeader@1000 : Record 36;VAR SalesShptHeader@1001 : Record 110;VAR SalesInvHeader@1002 : Record 112;VAR SalesCrMemoHeader@1003 : Record 114;VAR ReturnRcptHeader@1004 : Record 6660;VAR SalesInvHeaderPrePmt@1006 : Record 112;VAR SalesCrMemoHeaderPrePmt@1005 : Record 114);
    BEGIN
      WITH SalesHeader DO BEGIN
        CLEAR(SalesShptHeader);
        CLEAR(SalesInvHeader);
        CLEAR(SalesCrMemoHeader);
        CLEAR(ReturnRcptHeader);
        SalesSetup.GET;

        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        IF ("Shipping No. Series" <> '') AND ("Shipping No." <> '') THEN BEGIN
          SalesShptHeader.TRANSFERFIELDS(SalesHeader);
          SalesShptHeader."No." := "Shipping No.";
          SalesShptHeader."Posting Date" := TODAY;
          SalesShptHeader."User ID" := USERID;
          SalesShptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Return Receipt No. Series" <> '') AND ("Return Receipt No." <> '') THEN BEGIN
          ReturnRcptHeader.TRANSFERFIELDS(SalesHeader);
          ReturnRcptHeader."No." := "Return Receipt No.";
          ReturnRcptHeader."Posting Date" := TODAY;
          ReturnRcptHeader."User ID" := USERID;
          ReturnRcptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::Invoice) AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          SalesInvHeader.TRANSFERFIELDS(SalesHeader);
          IF "Posting No." <> '' THEN
            SalesInvHeader."No." := "Posting No.";
          IF "Document Type" = "Document Type"::Invoice THEN BEGIN
            SalesInvHeader."Pre-Assigned No. Series" := "No. Series";
            SalesInvHeader."Pre-Assigned No." := "No.";
          END ELSE BEGIN
            SalesInvHeader."Pre-Assigned No. Series" := '';
            SalesInvHeader."Pre-Assigned No." := '';
            SalesInvHeader."Order No. Series" := "No. Series";
            SalesInvHeader."Order No." := "No.";
          END;
          SalesInvHeader."Posting Date" := TODAY;
          SalesInvHeader."User ID" := USERID;
          SalesInvHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::"Credit Memo") AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          SalesCrMemoHeader.TRANSFERFIELDS(SalesHeader);
          IF "Posting No." <> '' THEN
            SalesCrMemoHeader."No." := "Posting No.";
          SalesCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
          SalesCrMemoHeader."Pre-Assigned No." := "No.";
          SalesCrMemoHeader."Posting Date" := TODAY;
          SalesCrMemoHeader."User ID" := USERID;
          SalesCrMemoHeader."Source Code" := SourceCode.Code;
        END;
        IF ("Prepayment No. Series" <> '') AND ("Prepayment No." <> '') THEN BEGIN
          TESTFIELD("Document Type","Document Type"::Order);
          SalesInvHeaderPrePmt.TRANSFERFIELDS(SalesHeader);
          SalesInvHeaderPrePmt."No." := "Prepayment No.";
          SalesInvHeaderPrePmt."Order No. Series" := "No. Series";
          SalesInvHeaderPrePmt."Prepayment Order No." := "No.";
          SalesInvHeaderPrePmt."Posting Date" := TODAY;
          SalesInvHeaderPrePmt."Pre-Assigned No. Series" := '';
          SalesInvHeaderPrePmt."Pre-Assigned No." := '';
          SalesInvHeaderPrePmt."User ID" := USERID;
          SalesInvHeaderPrePmt."Source Code" := SourceCode.Code;
          SalesInvHeaderPrePmt."Prepayment Invoice" := TRUE;
        END;

        IF ("Prepmt. Cr. Memo No. Series" <> '') AND ("Prepmt. Cr. Memo No." <> '') THEN BEGIN
          TESTFIELD("Document Type","Document Type"::Order);
          SalesCrMemoHeaderPrePmt.TRANSFERFIELDS(SalesHeader);
          SalesCrMemoHeaderPrePmt."No." := "Prepmt. Cr. Memo No.";
          SalesCrMemoHeaderPrePmt."Prepayment Order No." := "No.";
          SalesCrMemoHeaderPrePmt."Posting Date" := TODAY;
          SalesCrMemoHeaderPrePmt."Pre-Assigned No. Series" := '';
          SalesCrMemoHeaderPrePmt."Pre-Assigned No." := '';
          SalesCrMemoHeaderPrePmt."User ID" := USERID;
          SalesCrMemoHeaderPrePmt."Source Code" := SourceCode.Code;
          SalesCrMemoHeaderPrePmt."Prepayment Credit Memo" := TRUE;
        END;
      END;
    END;

    PROCEDURE DeleteHeader@18(SalesHeader@1000 : Record 36;VAR SalesShptHeader@1001 : Record 110;VAR SalesInvHeader@1002 : Record 112;VAR SalesCrMemoHeader@1003 : Record 114;VAR ReturnRcptHeader@1004 : Record 6660;VAR SalesInvHeaderPrePmt@1006 : Record 112;VAR SalesCrMemoHeaderPrePmt@1005 : Record 114);
    BEGIN
      WITH SalesHeader DO BEGIN
        TestDeleteHeader(
          SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,
          ReturnRcptHeader,SalesInvHeaderPrePmt,SalesCrMemoHeaderPrePmt);
        IF SalesShptHeader."No." <> '' THEN BEGIN
          SalesShptHeader.INSERT;
          SalesShptLine.INIT;
          SalesShptLine."Document No." := SalesShptHeader."No.";
          SalesShptLine."Line No." := 10000;
          SalesShptLine.Description := SourceCode.Description;
          SalesShptLine.INSERT;
        END;

        IF ReturnRcptHeader."No." <> '' THEN BEGIN
          ReturnRcptHeader.INSERT;
          ReturnRcptLine.INIT;
          ReturnRcptLine."Document No." := ReturnRcptHeader."No.";
          ReturnRcptLine."Line No." := 10000;
          ReturnRcptLine.Description := SourceCode.Description;
          ReturnRcptLine.INSERT;
        END;

        IF SalesInvHeader."No." <> '' THEN BEGIN
          SalesInvHeader.INSERT;
          SalesInvLine.INIT;
          SalesInvLine."Document No." := SalesInvHeader."No.";
          SalesInvLine."Line No." := 10000;
          SalesInvLine.Description := SourceCode.Description;
          SalesInvLine.INSERT;
        END;

        IF SalesCrMemoHeader."No." <> '' THEN BEGIN
          SalesCrMemoHeader.INSERT;
          SalesCrMemoLine.INIT;
          SalesCrMemoLine."Document No." := SalesCrMemoHeader."No.";
          SalesCrMemoLine."Line No." := 10000;
          SalesCrMemoLine.Description := SourceCode.Description;
          SalesCrMemoLine.INSERT;
        END;

        IF SalesInvHeaderPrePmt."No." <> '' THEN BEGIN
          SalesInvHeaderPrePmt.INSERT;
          SalesInvLine."Document No." := SalesInvHeaderPrePmt."No.";
          SalesInvLine."Line No." := 10000;
          SalesInvLine.Description := SourceCode.Description;
          SalesInvLine.INSERT;
        END;

        IF SalesCrMemoHeaderPrePmt."No." <> '' THEN BEGIN
          SalesCrMemoHeaderPrePmt.INSERT;
          SalesCrMemoLine.INIT;
          SalesCrMemoLine."Document No." := SalesCrMemoHeaderPrePmt."No.";
          SalesCrMemoLine."Line No." := 10000;
          SalesCrMemoLine.Description := SourceCode.Description;
          SalesCrMemoLine.INSERT;
        END;
      END;
    END;

    PROCEDURE UpdateBlanketOrderLine@21(SalesLine@1000 : Record 37;Ship@1001 : Boolean;Receive@1006 : Boolean;Invoice@1002 : Boolean);
    VAR
      BlanketOrderSalesLine@1003 : Record 37;
      ModifyLine@1004 : Boolean;
      Sign@1005 : Decimal;
    BEGIN
      IF (SalesLine."Blanket Order No." <> '') AND (SalesLine."Blanket Order Line No." <> 0) AND
         ((Ship AND (SalesLine."Qty. to Ship" <> 0)) OR
          (Receive AND (SalesLine."Return Qty. to Receive" <> 0)) OR
          (Invoice AND (SalesLine."Qty. to Invoice" <> 0)))
      THEN
        IF BlanketOrderSalesLine.GET(
             BlanketOrderSalesLine."Document Type"::"Blanket Order",SalesLine."Blanket Order No.",
             SalesLine."Blanket Order Line No.")
        THEN BEGIN
          BlanketOrderSalesLine.TESTFIELD(Type,SalesLine.Type);
          BlanketOrderSalesLine.TESTFIELD("No.",SalesLine."No.");
          BlanketOrderSalesLine.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");

          ModifyLine := FALSE;
          CASE SalesLine."Document Type" OF
            SalesLine."Document Type"::Order,
            SalesLine."Document Type"::Invoice:
              Sign := 1;
            SalesLine."Document Type"::"Return Order",
            SalesLine."Document Type"::"Credit Memo":
              Sign := -1;
          END;
          IF Ship AND (SalesLine."Shipment No." = '') THEN BEGIN
            IF BlanketOrderSalesLine."Qty. per Unit of Measure" =
               SalesLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" + Sign * SalesLine."Qty. to Ship"
            ELSE
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" +
                Sign *
                ROUND(
                  (SalesLine."Qty. per Unit of Measure" /
                   BlanketOrderSalesLine."Qty. per Unit of Measure") *
                  SalesLine."Qty. to Ship",0.000001);
            BlanketOrderSalesLine."Qty. Shipped (Base)" :=
              BlanketOrderSalesLine."Qty. Shipped (Base)" + Sign * SalesLine."Qty. to Ship (Base)";
            ModifyLine := TRUE;
          END;
          IF Receive AND (SalesLine."Return Receipt No." = '') THEN BEGIN
            IF BlanketOrderSalesLine."Qty. per Unit of Measure" =
               SalesLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" + Sign * SalesLine."Return Qty. to Receive"
            ELSE
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" +
                Sign *
                ROUND(
                  (SalesLine."Qty. per Unit of Measure" /
                   BlanketOrderSalesLine."Qty. per Unit of Measure") *
                  SalesLine."Return Qty. to Receive",0.00001);
            BlanketOrderSalesLine."Qty. Shipped (Base)" :=
              BlanketOrderSalesLine."Qty. Shipped (Base)" + Sign * SalesLine."Return Qty. to Receive (Base)";
            ModifyLine := TRUE;
          END;
          IF Invoice THEN BEGIN
            IF BlanketOrderSalesLine."Qty. per Unit of Measure" =
               SalesLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderSalesLine."Quantity Invoiced" :=
                BlanketOrderSalesLine."Quantity Invoiced" + Sign * SalesLine."Qty. to Invoice"
            ELSE
              BlanketOrderSalesLine."Quantity Invoiced" :=
                BlanketOrderSalesLine."Quantity Invoiced" +
                Sign *
                ROUND(
                  (SalesLine."Qty. per Unit of Measure" /
                   BlanketOrderSalesLine."Qty. per Unit of Measure") *
                  SalesLine."Qty. to Invoice",0.00001);
            BlanketOrderSalesLine."Qty. Invoiced (Base)" :=
              BlanketOrderSalesLine."Qty. Invoiced (Base)" + Sign * SalesLine."Qty. to Invoice (Base)";
            ModifyLine := TRUE;
          END;

          IF ModifyLine THEN BEGIN
            BlanketOrderSalesLine.InitOutstanding;
            IF (BlanketOrderSalesLine.Quantity * BlanketOrderSalesLine."Quantity Shipped" < 0) OR
               (ABS(BlanketOrderSalesLine.Quantity) < ABS(BlanketOrderSalesLine."Quantity Shipped"))
            THEN
              BlanketOrderSalesLine.FIELDERROR(
                "Quantity Shipped",STRSUBSTNO(
                  Text018,
                  BlanketOrderSalesLine.FIELDCAPTION(Quantity)));

            IF (BlanketOrderSalesLine."Quantity (Base)" *
               BlanketOrderSalesLine."Qty. Shipped (Base)" < 0) OR
               (ABS(BlanketOrderSalesLine."Quantity (Base)") <
               ABS(BlanketOrderSalesLine."Qty. Shipped (Base)"))
            THEN
              BlanketOrderSalesLine.FIELDERROR(
                "Qty. Shipped (Base)",
                STRSUBSTNO(
                  Text018,
                  BlanketOrderSalesLine.FIELDCAPTION("Quantity (Base)")));

            BlanketOrderSalesLine.CALCFIELDS("Reserved Qty. (Base)");
            IF ABS(BlanketOrderSalesLine."Outstanding Qty. (Base)") <
               ABS(BlanketOrderSalesLine."Reserved Qty. (Base)")
            THEN
              BlanketOrderSalesLine.FIELDERROR(
                "Reserved Qty. (Base)",
                Text019);

            BlanketOrderSalesLine."Qty. to Invoice" :=
              BlanketOrderSalesLine.Quantity - BlanketOrderSalesLine."Quantity Invoiced";
            BlanketOrderSalesLine."Qty. to Ship" :=
              BlanketOrderSalesLine.Quantity - BlanketOrderSalesLine."Quantity Shipped";
            BlanketOrderSalesLine."Qty. to Invoice (Base)" :=
              BlanketOrderSalesLine."Quantity (Base)" - BlanketOrderSalesLine."Qty. Invoiced (Base)";
            BlanketOrderSalesLine."Qty. to Ship (Base)" :=
              BlanketOrderSalesLine."Quantity (Base)" - BlanketOrderSalesLine."Qty. Shipped (Base)";

            BlanketOrderSalesLine.MODIFY;
          END;
        END;
    END;

    LOCAL PROCEDURE CopyCommentLines@22(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    BEGIN
      SalesCommentLine.SETRANGE("Document Type",FromDocumentType);
      SalesCommentLine.SETRANGE("No.",FromNumber);
      IF SalesCommentLine.FINDSET THEN
        REPEAT
          SalesCommentLine2 := SalesCommentLine;
          SalesCommentLine2."Document Type" := ToDocumentType;
          SalesCommentLine2."No." := ToNumber;
          SalesCommentLine2.INSERT;
        UNTIL SalesCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@23(VAR GenJnlLine@1000 : Record 81;DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record 360;
      TempJnlLineDim@1003 : TEMPORARY Record 356;
    BEGIN
      TempDimBuf.DELETEALL;
      TempJnlLineDim.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToJnlLineDim(
        TempDimBuf,TempJnlLineDim,GenJnlLine."Journal Template Name",
        GenJnlLine."Journal Batch Name",GenJnlLine."Line No.");
      GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
    END;

    LOCAL PROCEDURE CopyAndCheckDocDimToTempDocDim@34();
    VAR
      SalesLine2@1001 : Record 37;
      DimExist@1000 : Boolean;
    BEGIN
      TempDocDim.RESET;
      TempDocDim.DELETEALL;
      DocDim.SETRANGE("Table ID",DATABASE::"Sales Header");
      DocDim.SETRANGE("Document Type",SalesHeader."Document Type");
      DocDim.SETRANGE("Document No.",SalesHeader."No.");
      IF DocDim.FINDSET THEN BEGIN
        REPEAT
          TempDocDim.INIT;
          TempDocDim := DocDim;
          TempDocDim.INSERT;
        UNTIL DocDim.NEXT = 0;
        DimExist := TRUE;
      END;
      IF PrepmtDocDim.FIND('-') THEN BEGIN
        REPEAT
          TempDocDim := PrepmtDocDim;
          TempDocDim.INSERT;
        UNTIL PrepmtDocDim.NEXT = 0;
        DimExist := TRUE;
      END;
      IF DimExist THEN BEGIN
        TempDocDim.SETRANGE("Line No.",0);
        CheckDimComb(0);
      END;
      DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
      DocDim.SETRANGE("Document Type",SalesHeader."Document Type");
      DocDim.SETRANGE("Document No.",SalesHeader."No.");
      IF DocDim.FINDSET THEN BEGIN
        REPEAT
          TempDocDim.INIT;
          TempDocDim := DocDim;
          TempDocDim.INSERT;
        UNTIL DocDim.NEXT = 0;
        TempDocDim.SETRANGE("Line No.",0);
        CheckDimComb(0);
      END;
      SalesLine2."Line No." := 0;
      CheckDimValuePosting(SalesLine2);

      SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETFILTER(Type,'<>%1',SalesLine2.Type::" ");
      IF SalesLine2.FINDSET THEN
        REPEAT
          IF (SalesHeader.Invoice AND (SalesLine2."Qty. to Invoice" <> 0)) OR
             (SalesHeader.Ship AND (SalesLine2."Qty. to Ship" <> 0)) OR
             (SalesHeader.Receive AND (SalesLine2."Return Qty. to Receive" <> 0))
          THEN BEGIN
            TempDocDim.SETRANGE("Line No.",SalesLine2."Line No.");
            CheckDimComb(SalesLine2."Line No.");
            CheckDimValuePosting(SalesLine2);
          END
        UNTIL SalesLine2.NEXT = 0;
      TempDocDim.RESET;
    END;

    LOCAL PROCEDURE CheckDimComb@30(LineNo@1000 : Integer);
    BEGIN
      IF NOT DimMgt.CheckDocDimComb(TempDocDim) THEN
        IF LineNo = 0 THEN
          ERROR(
            Text028,
            SalesHeader."Document Type",SalesHeader."No.",DimMgt.GetDimCombErr)
        ELSE
          ERROR(
            Text029,
            SalesHeader."Document Type",SalesHeader."No.",LineNo,DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(VAR SalesLine2@1000 : Record 37);
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      IF SalesLine2."Line No." = 0 THEN BEGIN
        TableIDArr[1] := DATABASE::Customer;
        NumberArr[1] := SalesHeader."Bill-to Customer No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := SalesHeader."Salesperson Code";
        TableIDArr[3] := DATABASE::Campaign;
        NumberArr[3] := SalesHeader."Campaign No.";
        TableIDArr[4] := DATABASE::"Responsibility Center";
        NumberArr[4] := SalesHeader."Responsibility Center";
        IF NOT DimMgt.CheckDocDimValuePosting(TempDocDim,TableIDArr,NumberArr) THEN
          ERROR(
            Text030,
            SalesHeader."Document Type",SalesHeader."No.",DimMgt.GetDimValuePostingErr);
      END ELSE BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(SalesLine2.Type);
        NumberArr[1] := SalesLine2."No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := SalesLine2."Job No.";
        IF NOT DimMgt.CheckDocDimValuePosting(TempDocDim,TableIDArr,NumberArr) THEN
          ERROR(
            Text031,
            SalesHeader."Document Type",SalesHeader."No.",SalesLine2."Line No.",DimMgt.GetDimValuePostingErr);
      END;
    END;

    PROCEDURE CopyAprvlToTempApprvl@149();
    BEGIN
      TempApprovalEntry.RESET;
      TempApprovalEntry.DELETEALL;
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
      ApprovalEntry.SETRANGE("Document Type",SalesHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",SalesHeader."No.");
      IF ApprovalEntry.FINDSET THEN BEGIN
        REPEAT
          TempApprovalEntry.INIT;
          TempApprovalEntry := ApprovalEntry;
          TempApprovalEntry.INSERT;
        UNTIL ApprovalEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5803();
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Document Type",SalesLine."Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.",SalesLine."Document No.");
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateItemChargeAssgnt@5808();
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      WITH TempItemChargeAssgntSales DO BEGIN
        ClearItemChargeAssgntFilter;
        MARKEDONLY(TRUE);
        IF FINDSET THEN
          REPEAT
            ItemChargeAssgntSales.GET("Document Type","Document No.","Document Line No.","Line No.");
            ItemChargeAssgntSales."Qty. Assigned" :=
              ItemChargeAssgntSales."Qty. Assigned" + TempItemChargeAssgntSales."Qty. to Assign";
            ItemChargeAssgntSales."Qty. to Assign" := 0;
            ItemChargeAssgntSales."Amount to Assign" := 0;
            ItemChargeAssgntSales.MODIFY;
          UNTIL TempItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateSalesOrderChargeAssgnt@5814(SalesOrderInvLine@1000 : Record 37;SalesOrderLine@1001 : Record 37);
    VAR
      SalesOrderLine2@1002 : Record 37;
      SalesOrderInvLine2@1003 : Record 37;
      SalesShptLine@1004 : Record 111;
    BEGIN
      WITH SalesOrderInvLine DO BEGIN
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        TempItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        TempItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
        TempItemChargeAssgntSales.MARKEDONLY(TRUE);
        IF TempItemChargeAssgntSales.FINDSET THEN
          REPEAT
            IF TempItemChargeAssgntSales."Applies-to Doc. Type" = "Document Type" THEN BEGIN
              SalesOrderInvLine2.GET(
                TempItemChargeAssgntSales."Applies-to Doc. Type",
                TempItemChargeAssgntSales."Applies-to Doc. No.",
                TempItemChargeAssgntSales."Applies-to Doc. Line No.");
              IF ((SalesOrderLine."Document Type" = SalesOrderLine."Document Type"::Order) AND
                  (SalesOrderInvLine2."Shipment No." = "Shipment No.")) OR
                 ((SalesOrderLine."Document Type" = SalesOrderLine."Document Type"::"Return Order") AND
                  (SalesOrderInvLine2."Return Receipt No." = "Return Receipt No."))
              THEN BEGIN
                IF SalesOrderLine."Document Type" = SalesOrderLine."Document Type"::Order THEN BEGIN
                  IF NOT
                     SalesShptLine.GET(SalesOrderInvLine2."Shipment No.",SalesOrderInvLine2."Shipment Line No.")
                  THEN
                    ERROR(Text013);
                  SalesOrderLine2.GET(
                    SalesOrderLine2."Document Type"::Order,
                    SalesShptLine."Order No.",SalesShptLine."Order Line No.");
                END ELSE BEGIN
                  IF NOT
                     ReturnRcptLine.GET(SalesOrderInvLine2."Return Receipt No.",SalesOrderInvLine2."Return Receipt Line No.")
                  THEN
                    ERROR(Text037);
                  SalesOrderLine2.GET(
                    SalesOrderLine2."Document Type"::"Return Order",
                    ReturnRcptLine."Return Order No.",ReturnRcptLine."Return Order Line No.");
                END;
                UpdateSalesChargeAssgntLines(
                  SalesOrderLine,
                  SalesOrderLine2."Document Type",
                  SalesOrderLine2."Document No.",
                  SalesOrderLine2."Line No.",
                  TempItemChargeAssgntSales."Qty. to Assign");
              END;
            END ELSE
              UpdateSalesChargeAssgntLines(
                SalesOrderLine,
                TempItemChargeAssgntSales."Applies-to Doc. Type",
                TempItemChargeAssgntSales."Applies-to Doc. No.",
                TempItemChargeAssgntSales."Applies-to Doc. Line No.",
                TempItemChargeAssgntSales."Qty. to Assign");
          UNTIL TempItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateSalesChargeAssgntLines@5813(SalesOrderLine@1000 : Record 37;ApplToDocType@1001 : Option;ApplToDocNo@1002 : Code[20];ApplToDocLineNo@1003 : Integer;QtyToAssign@1004 : Decimal);
    VAR
      ItemChargeAssgntSales@1005 : Record 5809;
      TempItemChargeAssgntSales2@1007 : Record 5809;
      LastLineNo@1006 : Integer;
      TotalToAssign@1008 : Decimal;
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Document Type",SalesOrderLine."Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.",SalesOrderLine."Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesOrderLine."Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",ApplToDocType);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",ApplToDocNo);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",ApplToDocLineNo);
      IF ItemChargeAssgntSales.FINDFIRST THEN BEGIN
        ItemChargeAssgntSales."Qty. Assigned" := ItemChargeAssgntSales."Qty. Assigned" + QtyToAssign;
        ItemChargeAssgntSales."Qty. to Assign" := 0;
        ItemChargeAssgntSales."Amount to Assign" := 0;
        ItemChargeAssgntSales.MODIFY;
      END ELSE BEGIN
        ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
        ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
        ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
        ItemChargeAssgntSales.CALCSUMS("Qty. to Assign");

        //calculate total qty. to assign of the invoice charge line
        TempItemChargeAssgntSales2.SETRANGE("Document Type",TempItemChargeAssgntSales."Document Type");
        TempItemChargeAssgntSales2.SETRANGE("Document No.",TempItemChargeAssgntSales."Document No.");
        TempItemChargeAssgntSales2.SETRANGE("Document Line No.",TempItemChargeAssgntSales."Document Line No.");
        TempItemChargeAssgntSales2.CALCSUMS("Qty. to Assign");

        TotalToAssign := ItemChargeAssgntSales."Qty. to Assign" +
          TempItemChargeAssgntSales2."Qty. to Assign";

        IF ItemChargeAssgntSales.FINDLAST THEN
          LastLineNo := ItemChargeAssgntSales."Line No.";

        IF SalesOrderLine.Quantity < TotalToAssign THEN
          REPEAT
            TotalToAssign := TotalToAssign - ItemChargeAssgntSales."Qty. to Assign";
            ItemChargeAssgntSales."Qty. to Assign" := 0;
            ItemChargeAssgntSales."Amount to Assign" := 0;
            ItemChargeAssgntSales.MODIFY;
          UNTIL (ItemChargeAssgntSales.NEXT(-1) = 0) OR
                (TotalToAssign = SalesOrderLine.Quantity);

        InsertAssocOrderCharge(
          SalesOrderLine,
          ApplToDocType,
          ApplToDocNo,
          ApplToDocLineNo,
          LastLineNo,
          TempItemChargeAssgntSales."Applies-to Doc. Line Amount");

      END;
    END;

    LOCAL PROCEDURE InsertAssocOrderCharge@45(SalesOrderLine@1000 : Record 37;ApplToDocType@1001 : Option;ApplToDocNo@1002 : Code[20];ApplToDocLineNo@1003 : Integer;LastLineNo@1004 : Integer;ApplToDocLineAmt@1005 : Decimal);
    VAR
      NewItemChargeAssgntSales@1006 : Record 5809;
    BEGIN
      WITH NewItemChargeAssgntSales DO BEGIN
        INIT;
        "Document Type" := SalesOrderLine."Document Type";
        "Document No." := SalesOrderLine."Document No.";
        "Document Line No." := SalesOrderLine."Line No.";
        "Line No." := LastLineNo + 10000;
        "Item Charge No." := TempItemChargeAssgntSales."Item Charge No.";
        "Item No." := TempItemChargeAssgntSales."Item No.";
        "Qty. Assigned" := TempItemChargeAssgntSales."Qty. to Assign";
        "Qty. to Assign" := 0;
        "Amount to Assign" := 0;
        Description := TempItemChargeAssgntSales.Description;
        "Unit Cost" := TempItemChargeAssgntSales."Unit Cost";
        "Applies-to Doc. Type" := ApplToDocType;
        "Applies-to Doc. No." := ApplToDocNo;
        "Applies-to Doc. Line No." := ApplToDocLineNo;
        "Applies-to Doc. Line Amount" := ApplToDocLineAmt;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CopyAndCheckItemCharge@5806(SalesHeader@1000 : Record 36);
    VAR
      SalesLine2@1001 : Record 37;
      SalesLine3@1002 : Record 37;
      InvoiceEverything@1004 : Boolean;
      AssignError@1005 : Boolean;
      QtyNeeded@1003 : Decimal;
    BEGIN
      TempItemChargeAssgntSales.RESET;
      TempItemChargeAssgntSales.DELETEALL;

      // Check for max qty posting
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE(Type,SalesLine2.Type::"Charge (Item)");
      SalesLine2.SETFILTER("Qty. to Invoice",'<>0');
      IF SalesLine2.ISEMPTY THEN
        EXIT;

      SalesLine2.FINDSET;
      REPEAT
        ItemChargeAssgntSales.RESET;
        ItemChargeAssgntSales.SETRANGE("Document Type",SalesLine2."Document Type");
        ItemChargeAssgntSales.SETRANGE("Document No.",SalesLine2."Document No.");
        ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine2."Line No.");
        ItemChargeAssgntSales.SETFILTER("Qty. to Assign",'<>0');
        IF ItemChargeAssgntSales.FINDSET THEN
          REPEAT
            TempItemChargeAssgntSales.INIT;
            TempItemChargeAssgntSales := ItemChargeAssgntSales;
            TempItemChargeAssgntSales.INSERT;
          UNTIL ItemChargeAssgntSales.NEXT = 0;

        SalesLine.TESTFIELD("Job No.",'');
        SalesLine2.TESTFIELD("Job Contract Entry No.",0);
        IF (SalesLine2."Qty. to Ship" + SalesLine2."Return Qty. to Receive" <> 0) AND
           ((SalesHeader.Ship OR SalesHeader.Receive) OR
            (ABS(SalesLine2."Qty. to Invoice") >
             ABS(SalesLine2."Qty. Shipped Not Invoiced" + SalesLine2."Qty. to Ship") +
             ABS(SalesLine2."Ret. Qty. Rcd. Not Invd.(Base)" + SalesLine2."Return Qty. to Receive")))
        THEN
          SalesLine2.TESTFIELD("Line Amount");

        IF NOT SalesHeader.Ship THEN
          SalesLine2."Qty. to Ship" := 0;
        IF NOT SalesHeader.Receive THEN
          SalesLine2."Return Qty. to Receive" := 0;
        IF ABS(SalesLine2."Qty. to Invoice") >
           ABS(SalesLine2."Quantity Shipped" + SalesLine2."Qty. to Ship" +
             SalesLine2."Return Qty. Received" + SalesLine2."Return Qty. to Receive" -
             SalesLine2."Quantity Invoiced")
        THEN
          SalesLine2."Qty. to Invoice" :=
            SalesLine2."Quantity Shipped" + SalesLine2."Qty. to Ship" +
            SalesLine2."Return Qty. Received" + SalesLine2."Return Qty. to Receive" -
            SalesLine2."Quantity Invoiced";

        SalesLine2.CALCFIELDS("Qty. to Assign","Qty. Assigned");
        IF ABS(SalesLine2."Qty. to Assign" + SalesLine2."Qty. Assigned") >
           ABS(SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced")
        THEN
          ERROR(Text032,
            SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced" -
            SalesLine2."Qty. Assigned",SalesLine2.FIELDCAPTION("Document Type"),
            SalesLine2."Document Type",SalesLine2.FIELDCAPTION("Document No."),
            SalesLine2."Document No.",SalesLine2.FIELDCAPTION("Line No."),
            SalesLine2."Line No.");
        IF SalesLine2.Quantity =
           SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced"
        THEN BEGIN
          IF SalesLine2."Qty. to Assign" <> 0 THEN BEGIN
            IF SalesLine2.Quantity = SalesLine2."Quantity Invoiced" THEN BEGIN
              TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine2."Line No.");
              TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",SalesLine2."Document Type");
              IF TempItemChargeAssgntSales.FINDSET THEN
                REPEAT
                  SalesLine3.GET(
                    TempItemChargeAssgntSales."Applies-to Doc. Type",
                    TempItemChargeAssgntSales."Applies-to Doc. No.",
                    TempItemChargeAssgntSales."Applies-to Doc. Line No.");
                  IF SalesLine3.Quantity = SalesLine3."Quantity Invoiced" THEN
                    ERROR(Text034,SalesLine3.TABLECAPTION,
                      SalesLine3.FIELDCAPTION("Document Type"),SalesLine3."Document Type",
                      SalesLine3.FIELDCAPTION("Document No."),SalesLine3."Document No.",
                      SalesLine3.FIELDCAPTION("Line No."),SalesLine3."Line No.");
                UNTIL TempItemChargeAssgntSales.NEXT = 0;
            END;
          END;
          IF SalesLine2.Quantity <> SalesLine2."Qty. to Assign" + SalesLine2."Qty. Assigned" THEN
            AssignError := TRUE;
        END;

        IF (SalesLine2."Qty. to Assign" + SalesLine2."Qty. Assigned") < (SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced")
        THEN
          ERROR(Text052,SalesLine2."No.");

        // check if all ILEs exist
        QtyNeeded := SalesLine2."Qty. to Assign";
        TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine2."Line No.");
        IF TempItemChargeAssgntSales.FINDSET THEN
          REPEAT
            IF (TempItemChargeAssgntSales."Applies-to Doc. Type" <> SalesLine2."Document Type") AND
               (TempItemChargeAssgntSales."Applies-to Doc. No." <> SalesLine2."Document No.")
            THEN
              QtyNeeded := QtyNeeded - TempItemChargeAssgntSales."Qty. to Assign"
            ELSE BEGIN
              SalesLine3.GET(
                TempItemChargeAssgntSales."Applies-to Doc. Type",
                TempItemChargeAssgntSales."Applies-to Doc. No.",
                TempItemChargeAssgntSales."Applies-to Doc. Line No.");
              IF ItemLedgerEntryExist(SalesLine3) THEN
                QtyNeeded := QtyNeeded - TempItemChargeAssgntSales."Qty. to Assign";
            END;
          UNTIL TempItemChargeAssgntSales.NEXT = 0;

        IF QtyNeeded > 0 THEN
          ERROR(Text053,SalesLine2."No.");

      UNTIL SalesLine2.NEXT = 0;

      // Check saleslines
      IF AssignError THEN
        IF SalesHeader."Document Type" IN
           [SalesHeader."Document Type"::Invoice,SalesHeader."Document Type"::"Credit Memo"]
        THEN
          InvoiceEverything := TRUE
        ELSE BEGIN
          SalesLine2.RESET;
          SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine2.SETFILTER(Type,'%1|%2',SalesLine2.Type::Item,SalesLine2.Type::"Charge (Item)");
          IF SalesLine2.FINDSET THEN
            REPEAT
              IF SalesHeader.Ship OR SalesHeader.Receive THEN
                InvoiceEverything :=
                  SalesLine2.Quantity = SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced"
              ELSE
                InvoiceEverything :=
                  (SalesLine2.Quantity = SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced") AND
                  (SalesLine2."Qty. to Invoice" =
                   SalesLine2."Qty. Shipped Not Invoiced" + SalesLine2."Ret. Qty. Rcd. Not Invd.(Base)");
            UNTIL (SalesLine2.NEXT = 0) OR (NOT InvoiceEverything);
        END;

      IF InvoiceEverything AND AssignError THEN
        ERROR(Text033);
    END;

    LOCAL PROCEDURE ClearItemChargeAssgntFilter@27();
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
      TempItemChargeAssgntSales.MARKEDONLY(FALSE);
    END;

    LOCAL PROCEDURE GetItemChargeLine@5809(VAR ItemChargeSalesLine@1000 : Record 37);
    VAR
      SalesShptLine@1001 : Record 111;
      QtyShippedNotInvd@1002 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntSales DO BEGIN
        IF (ItemChargeSalesLine."Document Type" <> "Document Type") OR
           (ItemChargeSalesLine."Document No." <> "Document No.") OR
           (ItemChargeSalesLine."Line No." <> "Document Line No.")
        THEN BEGIN
          ItemChargeSalesLine.GET("Document Type","Document No.","Document Line No.");
          IF NOT SalesHeader.Ship THEN
            ItemChargeSalesLine."Qty. to Ship" := 0;
          IF NOT SalesHeader.Receive THEN
            ItemChargeSalesLine."Return Qty. to Receive" := 0;
          IF ItemChargeSalesLine."Shipment No." <> '' THEN BEGIN
            SalesShptLine.GET(ItemChargeSalesLine."Shipment No.",ItemChargeSalesLine."Shipment Line No.");
            QtyShippedNotInvd := TempItemChargeAssgntSales."Qty. to Assign" - TempItemChargeAssgntSales."Qty. Assigned";
          END ELSE
            QtyShippedNotInvd := ItemChargeSalesLine."Quantity Shipped";
          IF ABS(ItemChargeSalesLine."Qty. to Invoice") >
             ABS(QtyShippedNotInvd + ItemChargeSalesLine."Qty. to Ship" +
                 ItemChargeSalesLine."Return Qty. Received" + ItemChargeSalesLine."Return Qty. to Receive" -
                 ItemChargeSalesLine."Quantity Invoiced")
          THEN
            ItemChargeSalesLine."Qty. to Invoice" :=
              QtyShippedNotInvd + ItemChargeSalesLine."Qty. to Ship" +
              ItemChargeSalesLine."Return Qty. Received" + ItemChargeSalesLine."Return Qty. to Receive" -
              ItemChargeSalesLine."Quantity Invoiced";
        END;
      END;
    END;

    LOCAL PROCEDURE OnlyAssgntPosting@36() : Boolean;
    VAR
      SalesLine@1000 : Record 37;
      QtyLeftToAssign@1002 : Boolean;
    BEGIN
      WITH SalesHeader DO BEGIN
        ItemChargeAssgntOnly := FALSE;
        QtyLeftToAssign := FALSE;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type, SalesLine.Type::"Charge (Item)");
        IF SalesLine.FINDSET THEN BEGIN
          REPEAT
            SalesLine.CALCFIELDS("Qty. Assigned");
            IF (SalesLine."Quantity Invoiced" > SalesLine."Qty. Assigned") THEN
              QtyLeftToAssign := TRUE;
          UNTIL SalesLine.NEXT = 0;
        END;

        IF QtyLeftToAssign THEN
          CopyAndCheckItemCharge(SalesHeader);
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntSales.SETCURRENTKEY("Applies-to Doc. Type");
        TempItemChargeAssgntSales.SETFILTER("Applies-to Doc. Type",'<>%1',"Document Type");
        SalesLine.SETRANGE(Type);
        SalesLine.SETRANGE("Quantity Invoiced");
        SalesLine.SETFILTER("Qty. to Assign",'<>0');
        IF SalesLine.FINDSET THEN
          REPEAT
            TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine."Line No.");
            ItemChargeAssgntOnly := NOT TempItemChargeAssgntSales.ISEMPTY;
          UNTIL (SalesLine.NEXT = 0) OR ItemChargeAssgntOnly
        ELSE
          ItemChargeAssgntOnly := FALSE;
      END;
      EXIT(ItemChargeAssgntOnly);
    END;

    PROCEDURE CalcQtyToInvoice@24(QtyToHandle@1000 : Decimal;QtyToInvoice@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyToHandle) > ABS(QtyToInvoice) THEN
        EXIT(-QtyToHandle)
      ELSE
        EXIT(-QtyToInvoice);
    END;

    PROCEDURE GetShippingAdvice@20() : Boolean;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      IF SalesLine.FINDSET  THEN
        REPEAT
          IF SalesLine.IsShipment THEN BEGIN
            IF SalesLine."Document Type" IN
               [SalesLine."Document Type"::"Credit Memo",
                SalesLine."Document Type"::"Return Order"]
            THEN BEGIN
              IF SalesLine."Quantity (Base)" <>
                 SalesLine."Return Qty. to Receive (Base)" + SalesLine."Return Qty. Received (Base)"
              THEN
                EXIT(FALSE)
            END ELSE
              IF SalesLine."Quantity (Base)" <>
                 SalesLine."Qty. to Ship (Base)" + SalesLine."Qty. Shipped (Base)"
              THEN
                EXIT(FALSE);
          END;
        UNTIL SalesLine.NEXT = 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(VAR SalesLine@1000 : Record 37);
    VAR
      SalesLine2@1001 : Record 37;
      WhseValidateSourceLine@1003 : Codeunit 5777;
      ShowError@1002 : Boolean;
    BEGIN
      SalesLine2.COPY(SalesLine);
      SalesLine2.SETRANGE(Type,SalesLine2.Type::Item);
      SalesLine2.SETRANGE("Drop Shipment",FALSE);
      IF SalesLine2.FINDSET THEN
        REPEAT
          GetLocation(SalesLine2."Location Code");
          CASE SalesLine2."Document Type" OF
            SalesLine2."Document Type"::Order:
              IF ((Location."Require Receive" OR Location."Require Put-away") AND
                  (SalesLine2.Quantity < 0)) OR
                 ((Location."Require Shipment" OR Location."Require Pick") AND
                  (SalesLine2.Quantity >= 0))
              THEN BEGIN
                IF Location."Directed Put-away and Pick" THEN
                  ShowError := TRUE
                ELSE
                  IF WhseValidateSourceLine.WhseLinesExist(
                       DATABASE::"Sales Line",
                       SalesLine2."Document Type",
                       SalesLine2."Document No.",
                       SalesLine2."Line No.",
                       0,
                       SalesLine2.Quantity)
                  THEN
                    ShowError := TRUE;
              END;
            SalesLine2."Document Type"::"Return Order":
              IF ((Location."Require Receive" OR Location."Require Put-away") AND
                  (SalesLine2.Quantity >= 0)) OR
                 ((Location."Require Shipment" OR Location."Require Pick") AND
                  (SalesLine2.Quantity < 0))
              THEN BEGIN
                IF Location."Directed Put-away and Pick" THEN
                  ShowError := TRUE
                ELSE
                  IF WhseValidateSourceLine.WhseLinesExist(
                       DATABASE::"Sales Line",
                       SalesLine2."Document Type",
                       SalesLine2."Document No.",
                       SalesLine2."Line No.",
                       0,
                       SalesLine2.Quantity)
                  THEN
                    ShowError := TRUE;
              END;
            SalesLine2."Document Type"::Invoice,SalesLine2."Document Type"::"Credit Memo":
              IF Location."Directed Put-away and Pick" THEN
                Location.TESTFIELD("Adjustment Bin Code");
          END;
          IF ShowError THEN
            ERROR(
              Text021,
              SalesLine2.FIELDCAPTION("Document Type"),
              SalesLine2."Document Type",
              SalesLine2.FIELDCAPTION("Document No."),
              SalesLine2."Document No.",
              SalesLine2.FIELDCAPTION("Line No."),
              SalesLine2."Line No.");
        UNTIL SalesLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@7302(ItemJnlLine@1000 : Record 83;SalesLine@1001 : Record 37;VAR TempWhseJnlLine@1002 : TEMPORARY Record 7311);
    VAR
      WhseMgt@1003 : Codeunit 5775;
    BEGIN
      WITH SalesLine DO BEGIN
        WMSMgmt.CheckAdjmtBin(Location,ItemJnlLine.Quantity,TRUE);
        WMSMgmt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,FALSE,FALSE);
        TempWhseJnlLine."Source Type" := DATABASE::"Sales Line";
        TempWhseJnlLine."Source Subtype" := "Document Type";
        TempWhseJnlLine."Source Code" := SrcCode;
        WhseMgt.GetSourceDocument(
          TempWhseJnlLine."Source Document",TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
        TempWhseJnlLine."Source No." := "Document No.";
        TempWhseJnlLine."Source Line No." := "Line No.";
        CASE "Document Type" OF
          "Document Type"::Order:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Shipment";
          "Document Type"::Invoice:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted S. Inv.";
          "Document Type"::"Credit Memo":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted S. Cr. Memo";
          "Document Type"::"Return Order":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rtrn. Shipment";
        END;
        TempWhseJnlLine."Reference No." := ItemJnlLine."Document No.";
      END;
    END;

    LOCAL PROCEDURE WhseHandlingRequired@7307() : Boolean;
    VAR
      WhseSetup@1000 : Record 5769;
    BEGIN
      IF (SalesLine.Type = SalesLine.Type::Item) AND
         (NOT SalesLine."Drop Shipment")
      THEN BEGIN
        IF SalesLine."Location Code" = '' THEN BEGIN
          WhseSetup.GET;
          IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN
            EXIT(WhseSetup."Require Receive")
          ELSE
            EXIT(WhseSetup."Require Pick");
        END ELSE BEGIN
          GetLocation(SalesLine."Location Code");
          IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN
            EXIT(Location."Require Receive")
          ELSE
            EXIT(Location."Require Pick");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE InsertShptEntryRelation@38(VAR SalesShptLine@1002 : Record 111) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
    BEGIN
      TempTrackingSpecificationInv.RESET;
      IF TempTrackingSpecificationInv.FINDSET THEN BEGIN
        REPEAT
          TempHandlingSpecification := TempTrackingSpecificationInv;
          IF TempHandlingSpecification.INSERT THEN;
        UNTIL TempTrackingSpecificationInv.NEXT = 0;
        TempTrackingSpecificationInv.DELETEALL;
      END;

      TempHandlingSpecification.RESET;
      IF TempHandlingSpecification.FINDSET THEN BEGIN
        REPEAT
          ItemEntryRelation.INIT;
          ItemEntryRelation."Item Entry No." := TempHandlingSpecification."Entry No.";
          ItemEntryRelation."Serial No." := TempHandlingSpecification."Serial No.";
          ItemEntryRelation."Lot No." := TempHandlingSpecification."Lot No.";
          ItemEntryRelation.TransferFieldsSalesShptLine(SalesShptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        EXIT(0);
      END ELSE
        EXIT(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE InsertReturnEntryRelation@39(VAR ReturnRcptLine@1002 : Record 6661) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
    BEGIN
      TempTrackingSpecificationInv.RESET;
      IF TempTrackingSpecificationInv.FINDSET THEN BEGIN
        REPEAT
          TempHandlingSpecification := TempTrackingSpecificationInv;
          IF TempHandlingSpecification.INSERT THEN;
        UNTIL TempTrackingSpecificationInv.NEXT = 0;
        TempTrackingSpecificationInv.DELETEALL;
      END;

      TempHandlingSpecification.RESET;
      IF TempHandlingSpecification.FINDSET THEN BEGIN
        REPEAT
          ItemEntryRelation.INIT;
          ItemEntryRelation."Item Entry No." := TempHandlingSpecification."Entry No.";
          ItemEntryRelation."Serial No." := TempHandlingSpecification."Serial No.";
          ItemEntryRelation."Lot No." := TempHandlingSpecification."Lot No.";
          ItemEntryRelation.TransferFieldsReturnRcptLine(ReturnRcptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        EXIT(0);
      END ELSE
        EXIT(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE CheckTrackingSpecification@46(VAR SalesLine@1019 : Record 37);
    VAR
      SalesLineToCheck@1000 : Record 37;
      ReservationEntry@1001 : Record 337;
      ItemTrackingCode@1009 : Record 6502;
      CreateReservEntry@1004 : Codeunit 99000830;
      ItemTrackingManagement@1015 : Codeunit 6500;
      ErrorFieldCaption@1018 : Text[250];
      SignFactor@1005 : Integer;
      SalesLineQtyHandled@1022 : Decimal;
      SalesLineQtyToHandle@1023 : Decimal;
      TrackingQtyHandled@1021 : Decimal;
      TrackingQtyToHandle@1003 : Decimal;
      Inbound@1010 : Boolean;
      SNRequired@1011 : Boolean;
      LotRequired@1012 : Boolean;
      SNInfoRequired@1013 : Boolean;
      LotInfoReguired@1014 : Boolean;
      CheckSalesLine@1008 : Boolean;
    BEGIN
      // if a SalesLine is posted with ItemTracking then the whole quantity of
      // the regarding SalesLine has to be post with Item-Tracking

      IF SalesHeader."Document Type" IN
        [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::"Return Order"] = FALSE
      THEN
        EXIT;

      TrackingQtyToHandle := 0;
      TrackingQtyHandled := 0;

      SalesLineToCheck.COPY(SalesLine);
      SalesLineToCheck.SETRANGE(Type,SalesLineToCheck.Type::Item);
      IF SalesHeader.Ship THEN BEGIN
        SalesLineToCheck.SETFILTER("Quantity Shipped",'<>%1',0);
        ErrorFieldCaption := SalesLineToCheck.FIELDCAPTION("Qty. to Ship");
      END ELSE BEGIN
        SalesLineToCheck.SETFILTER("Return Qty. Received",'<>%1',0);
        ErrorFieldCaption := SalesLineToCheck.FIELDCAPTION("Return Qty. to Receive");
      END;

      IF SalesLineToCheck.FINDSET THEN BEGIN
        ReservationEntry."Source Type" := DATABASE::"Sales Line";
        ReservationEntry."Source Subtype" := SalesHeader."Document Type";
        SignFactor := CreateReservEntry.SignFactor(ReservationEntry);
        REPEAT
          // Only Item where no SerialNo or LotNo is required
          GetItem(SalesLineToCheck);
          IF Item."Item Tracking Code" <> '' THEN BEGIN
            Inbound := (SalesLineToCheck.Quantity * SignFactor) > 0;
            ItemTrackingCode.Code := Item."Item Tracking Code";
            ItemTrackingManagement.GetItemTrackingSettings(ItemTrackingCode,
              ItemJnlLine."Entry Type"::Sale,
              Inbound,
              SNRequired,
              LotRequired,
              SNInfoRequired,
              LotInfoReguired);
            CheckSalesLine := (SNRequired = FALSE) AND (LotRequired = FALSE);
            IF CheckSalesLine THEN
              CheckSalesLine := GetTrackingQuantities(SalesLineToCheck,0,TrackingQtyToHandle,TrackingQtyHandled);
          END ELSE
            CheckSalesLine := FALSE;

          TrackingQtyToHandle := 0;
          TrackingQtyHandled := 0;

          IF CheckSalesLine THEN BEGIN
            GetTrackingQuantities(SalesLineToCheck,1,TrackingQtyToHandle,TrackingQtyHandled);
            TrackingQtyToHandle := TrackingQtyToHandle * SignFactor;
            TrackingQtyHandled := TrackingQtyHandled * SignFactor;
            IF SalesHeader.Ship THEN BEGIN
              SalesLineQtyToHandle := SalesLineToCheck."Qty. to Ship (Base)";
              SalesLineQtyHandled := SalesLineToCheck."Qty. Shipped (Base)";
            END ELSE BEGIN
              SalesLineQtyToHandle := SalesLineToCheck."Return Qty. to Receive (Base)";
              SalesLineQtyHandled := SalesLineToCheck."Return Qty. Received (Base)";
            END;
            IF ((TrackingQtyHandled + TrackingQtyToHandle) <> (SalesLineQtyHandled + SalesLineQtyToHandle)) OR
               (TrackingQtyToHandle <> SalesLineQtyToHandle)
            THEN
              ERROR(STRSUBSTNO(Text046,ErrorFieldCaption));
          END;
        UNTIL SalesLineToCheck.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTrackingQuantities@47(SalesLine@1000 : Record 37;FunctionType@1002 : 'CheckTrackingExists,GetQty';VAR TrackingQtyToHandle@1003 : Decimal;VAR TrackingQtyHandled@1005 : Decimal) : Boolean;
    VAR
      TrackingSpecification@1004 : Record 336;
      ReservEntry@1001 : Record 337;
    BEGIN
      WITH TrackingSpecification DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",SalesLine."Document Type");
        SETRANGE("Source ID",SalesLine."Document No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETRANGE("Source Ref. No.",SalesLine."Line No.");
      END;
      WITH ReservEntry DO BEGIN
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line");
        SETRANGE("Source ID",SalesLine."Document No.");
        SETRANGE("Source Ref. No.",SalesLine."Line No.");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",SalesLine."Document Type");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
      END;

      CASE FunctionType OF
        FunctionType::CheckTrackingExists:
          BEGIN
            TrackingSpecification.SETRANGE(Correction,FALSE);
            IF NOT TrackingSpecification.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETFILTER("Serial No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETRANGE("Serial No.");
            ReservEntry.SETFILTER("Lot No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
          END;
        FunctionType::GetQty:
          BEGIN
            TrackingSpecification.CALCSUMS("Quantity Handled (Base)");
            TrackingQtyHandled := TrackingSpecification."Quantity Handled (Base)";
            IF ReservEntry.FINDSET THEN
              REPEAT
                IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN
                  TrackingQtyToHandle := TrackingQtyToHandle + ReservEntry."Qty. to Handle (Base)";
              UNTIL ReservEntry.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE SaveInvoiceSpecification@37(VAR TempInvoicingSpecification@1000 : TEMPORARY Record 336);
    BEGIN
      TempInvoicingSpecification.RESET;
      IF TempInvoicingSpecification.FINDSET THEN BEGIN
        REPEAT
          TempInvoicingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
          TempTrackingSpecification := TempInvoicingSpecification;
          TempTrackingSpecification."Buffer Status" := TempTrackingSpecification."Buffer Status"::MODIFY;
          TempTrackingSpecification.INSERT;
        UNTIL TempInvoicingSpecification.NEXT = 0;
        TempInvoicingSpecification.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE InsertTrackingSpecification@35();
    VAR
      TrackingSpecification@1000 : Record 336;
    BEGIN
      TempTrackingSpecification.RESET;
      IF TempTrackingSpecification.FINDSET THEN BEGIN
        REPEAT
          TrackingSpecification := TempTrackingSpecification;
          TrackingSpecification."Buffer Status" := 0;
          TrackingSpecification.Correction := FALSE;
          TrackingSpecification.InitQtyToShip;
          TrackingSpecification."Quantity actual Handled (Base)" := 0;
          IF TempTrackingSpecification."Buffer Status" = TempTrackingSpecification."Buffer Status"::MODIFY THEN
            TrackingSpecification.MODIFY
          ELSE
            TrackingSpecification.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;
        TempTrackingSpecification.DELETEALL;
      END;

      ReserveSalesLine.UpdateItemTrackingAfterPosting(SalesHeader);
    END;

    LOCAL PROCEDURE InsertValueEntryRelation@40();
    VAR
      ValueEntryRelation@1000 : Record 6508;
    BEGIN
      TempValueEntryRelation.RESET;
      IF TempValueEntryRelation.FINDSET THEN BEGIN
        REPEAT
          ValueEntryRelation := TempValueEntryRelation;
          ValueEntryRelation.INSERT;
        UNTIL TempValueEntryRelation.NEXT = 0;
        TempValueEntryRelation.DELETEALL;
      END;
    END;

    PROCEDURE PostItemCharge@42(SalesLine@1005 : Record 37;ItemEntryNo@1004 : Integer;QuantityBase@1003 : Decimal;AmountToAssign@1002 : Decimal;QtyToAssign@1001 : Decimal);
    VAR
      DummyTrackingSpecification@1000 : Record 336;
    BEGIN
      WITH TempItemChargeAssgntSales DO BEGIN
        SalesLine."No." := "Item No.";
        SalesLine."Appl.-to Item Entry" := ItemEntryNo;
        IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN
          SalesLine.Amount := -AmountToAssign
        ELSE
          SalesLine.Amount := AmountToAssign;

        IF SalesLine."Currency Code" <> '' THEN
          SalesLine."Unit Cost" := ROUND(
            -SalesLine.Amount / QuantityBase,Currency."Unit-Amount Rounding Precision")
        ELSE
          SalesLine."Unit Cost" := ROUND(
            -SalesLine.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");
        TotalChargeAmt := TotalChargeAmt + SalesLine.Amount;

        IF SalesHeader."Currency Code" <> '' THEN
          SalesLine.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,SalesHeader."Currency Code",TotalChargeAmt,SalesHeader."Currency Factor");
        SalesLine."Inv. Discount Amount" := ROUND(
          SalesLine."Inv. Discount Amount" / SalesLine.Quantity * QtyToAssign,
          GLSetup."Amount Rounding Precision");
        SalesLine.Amount := ROUND(SalesLine.Amount,GLSetup."Amount Rounding Precision") - TotalChargeAmtLCY;
        IF SalesHeader."Currency Code" <> '' THEN
          TotalChargeAmtLCY := TotalChargeAmtLCY + SalesLine.Amount;
        SalesLine."Unit Cost (LCY)" := ROUND(
          SalesLine.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");
        SalesLine."Line No." := "Document Line No.";
        PostItemJnlLine(
          SalesLine,
          0,0,-QuantityBase,-QuantityBase,
          SalesLine."Appl.-to Item Entry",
          TempItemChargeAssgntSales."Item Charge No.",DummyTrackingSpecification);
      END;
    END;

    LOCAL PROCEDURE SaveTempWhseSplitSpec@31(VAR SalesLine3@1000 : Record 37);
    BEGIN
      TempWhseSplitSpecification.RESET;
      TempWhseSplitSpecification.DELETEALL;
      IF TempHandlingSpecification.FINDSET THEN
        REPEAT
          TempWhseSplitSpecification := TempHandlingSpecification;
          TempWhseSplitSpecification."Source Type" := DATABASE::"Sales Line";
          TempWhseSplitSpecification."Source Subtype" := SalesLine3."Document Type";
          TempWhseSplitSpecification."Source ID" := SalesLine3."Document No.";
          TempWhseSplitSpecification."Source Ref. No." := SalesLine3."Line No.";
          TempWhseSplitSpecification.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
    END;

    PROCEDURE TransferReservToItemJnlLine@32(VAR SalesOrderLine@1000 : Record 37;VAR ItemJnlLine@1001 : Record 83;QtyToBeShippedBase@1002 : Decimal;VAR TempTrackingSpecification2@1003 : TEMPORARY Record 336;VAR CheckApplFromItemEntry@1004 : Boolean);
    BEGIN
      // Handle Item Tracking and reservations, also on drop shipment
      IF QtyToBeShippedBase = 0 THEN
        EXIT;

      CLEAR(ReserveSalesLine);
      IF NOT SalesOrderLine."Drop Shipment" THEN
        ReserveSalesLine.TransferSalesLineToItemJnlLine(
          SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry)
      ELSE BEGIN
        TempTrackingSpecification2.RESET;
        TempTrackingSpecification2.SETRANGE("Source Type",DATABASE::"Purchase Line");
        TempTrackingSpecification2.SETRANGE("Source Subtype",1);
        TempTrackingSpecification2.SETRANGE("Source ID",SalesOrderLine."Purchase Order No.");
        TempTrackingSpecification2.SETRANGE("Source Batch Name",'');
        TempTrackingSpecification2.SETRANGE("Source Prod. Order Line",0);
        TempTrackingSpecification2.SETRANGE("Source Ref. No.",SalesOrderLine."Purch. Order Line No.");
        IF TempTrackingSpecification2.ISEMPTY THEN
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry)
        ELSE BEGIN
          ReserveSalesLine.SetApplySpecificItemTracking(TRUE);
          ReserveSalesLine.SetOverruleItemTracking(TRUE);
          ReserveSalesLine.SetItemTrkgAlreadyOverruled(ItemTrkgAlreadyOverruled);
          TempTrackingSpecification2.FINDSET;
          IF TempTrackingSpecification2."Quantity (Base)" / QtyToBeShippedBase < 0 THEN
            ERROR(Text043);
          REPEAT
            ItemJnlLine."Serial No." := TempTrackingSpecification2."Serial No.";
            ItemJnlLine."Lot No." := TempTrackingSpecification2."Lot No.";
            ItemJnlLine."Applies-to Entry" := TempTrackingSpecification2."Appl.-to Item Entry";
            ReserveSalesLine.TransferSalesLineToItemJnlLine(SalesOrderLine,ItemJnlLine,
              TempTrackingSpecification2."Quantity (Base)",CheckApplFromItemEntry);
          UNTIL TempTrackingSpecification2.NEXT = 0;
          ItemJnlLine."Serial No." := '';
          ItemJnlLine."Lot No." := '';
          ItemJnlLine."Applies-to Entry" := 0;
        END;
      END;
    END;

    PROCEDURE TransferReservFromPurchLine@41(VAR PurchOrderLine@1000 : Record 39;VAR ItemJnlLine@1001 : Record 83;QtyToBeShippedBase@1002 : Decimal);
    VAR
      ReservEntry@1004 : Record 337;
      TempTrackingSpecification2@1005 : TEMPORARY Record 336;
      ReservePurchLine@1003 : Codeunit 99000834;
      RemainingQuantity@1006 : Decimal;
      CheckApplToItemEntry@1007 : Boolean;
    BEGIN
      // Handle Item Tracking on Drop Shipment
      ItemTrkgAlreadyOverruled := FALSE;
      IF QtyToBeShippedBase = 0 THEN
        EXIT;

      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line");
      ReservEntry.SETRANGE("Source ID",SalesLine."Document No.");
      ReservEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      ReservEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>0');
      IF NOT ReservEntry.ISEMPTY THEN
        ItemTrackingMgt.SumUpItemTracking(ReservEntry,TempTrackingSpecification2,FALSE,TRUE);
      TempTrackingSpecification2.SETFILTER("Qty. to Handle (Base)",'<>0');
      IF TempTrackingSpecification2.ISEMPTY THEN
        ReservePurchLine.TransferPurchLineToItemJnlLine(
          PurchOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplToItemEntry)
      ELSE BEGIN
        ReservePurchLine.SetOverruleItemTracking(TRUE);
        ItemTrkgAlreadyOverruled := TRUE;
        TempTrackingSpecification2.FINDSET;
        IF -TempTrackingSpecification2."Quantity (Base)" / QtyToBeShippedBase < 0 THEN
          ERROR(Text043);
        REPEAT
          ItemJnlLine."Serial No." := TempTrackingSpecification2."Serial No.";
          ItemJnlLine."Lot No." := TempTrackingSpecification2."Lot No.";
          RemainingQuantity :=
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchOrderLine,ItemJnlLine,
              -TempTrackingSpecification2."Qty. to Handle (Base)",CheckApplToItemEntry);
          IF RemainingQuantity <> 0 THEN
            ERROR(Text044);
        UNTIL TempTrackingSpecification2.NEXT = 0;
        ItemJnlLine."Serial No." := '';
        ItemJnlLine."Lot No." := '';
        ItemJnlLine."Applies-to Entry" := 0;
      END;
    END;

    PROCEDURE SetWhseRcptHeader@43(VAR WhseRcptHeader2@1000 : Record 7316);
    BEGIN
      WhseRcptHeader := WhseRcptHeader2;
      TempWhseRcptHeader := WhseRcptHeader;
      TempWhseRcptHeader.INSERT;
    END;

    PROCEDURE SetWhseShptHeader@44(VAR WhseShptHeader2@1000 : Record 7320);
    BEGIN
      WhseShptHeader := WhseShptHeader2;
      TempWhseShptHeader := WhseShptHeader;
      TempWhseShptHeader.INSERT;
    END;

    LOCAL PROCEDURE CopyPurchCommentLines@148(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      PurchCommentLine@1004 : Record 43;
      PurchCommentLine2@1005 : Record 43;
    BEGIN
      PurchCommentLine.SETRANGE("Document Type",FromDocumentType);
      PurchCommentLine.SETRANGE("No.",FromNumber);
      IF PurchCommentLine.FINDSET THEN
        REPEAT
         PurchCommentLine2 := PurchCommentLine;
         PurchCommentLine2."Document Type" := ToDocumentType;
         PurchCommentLine2."No." := ToNumber;
         PurchCommentLine2.INSERT;
       UNTIL PurchCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetItem@49(SalesLine@1000 : Record 37);
    BEGIN
      WITH SalesLine DO BEGIN
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        IF "No." <> Item."No." THEN
          Item.GET("No.");
      END;
    END;

    LOCAL PROCEDURE GetNextSalesline@50(VAR SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      IF SalesLine.NEXT = 1 THEN
        EXIT(FALSE);
      IF TempPrepaymentSalesLine.FIND('-') THEN BEGIN
        SalesLine := TempPrepaymentSalesLine;
        TempPrepaymentSalesLine.DELETE;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CreatePrepaymentLines@51(SalesHeader@1003 : Record 36;VAR TempPrepmtSalesLine@1004 : Record 37;VAR TempDocDim@1005 : Record 357;CompleteFunctionality@1009 : Boolean);
    VAR
      GLAcc@1002 : Record 15;
      SalesLine@1000 : Record 37;
      DocDim@1007 : Record 357;
      TempExtTextLine@1012 : TEMPORARY Record 280;
      DimMgt@1006 : Codeunit 408;
      TransferExtText@1011 : Codeunit 378;
      NextLineNo@1001 : Integer;
      Fraction@1008 : Decimal;
      VATDifference@1015 : Decimal;
      TempLineFound@1010 : Boolean;
      PrePmtTestRun@1014 : Boolean;
    BEGIN
      GLSetup.GET;
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF NOT FIND('+') THEN
          EXIT;
        NextLineNo := "Line No." + 10000;
        SETFILTER(Quantity,'>0');
        SETFILTER("Qty. to Invoice",'>0');
        TempPrepmtSalesLine.SetHasBeenShown;
        IF FIND('-') THEN
          REPEAT
            IF CompleteFunctionality THEN BEGIN
              IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN BEGIN
                IF NOT SalesHeader.Ship AND ("Qty. to Invoice" = Quantity - "Quantity Invoiced") THEN
                  Fraction := ("Qty. Shipped Not Invoiced" + "Quantity Invoiced") / Quantity
                ELSE
                  Fraction := ("Qty. to Invoice" + "Quantity Invoiced") / Quantity;

                IF (SalesHeader.Ship = FALSE) AND (SalesHeader.Invoice = TRUE) THEN
                  VALIDATE("Qty. to Ship",0);

                CASE TRUE OF
                  ("Prepmt Amt to Deduct" <> 0) AND
                  ("Prepmt Amt to Deduct" > ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision")):
                    FIELDERROR(
                      "Prepmt Amt to Deduct",
                      STRSUBSTNO(Text047,
                        ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision")));
                  ("Prepmt. Amt. Inv." <> 0) AND
                  (ROUND((1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision") <
                   ROUND(
                     ROUND(
                       ROUND("Unit Price" * (Quantity - "Quantity Invoiced" - "Qty. to Invoice"),Currency."Amount Rounding Precision") *
                       (1 - ("Line Discount %" / 100)),Currency."Amount Rounding Precision") *
                     "Prepayment %" / 100,Currency."Amount Rounding Precision")):
                    FIELDERROR(
                      "Prepmt Amt to Deduct",
                      STRSUBSTNO(Text048,
                        ROUND(
                          "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" - (1 - Fraction) * "Line Amount",
                          Currency."Amount Rounding Precision")));
                END;
              END ELSE
                IF NOT PrePmtTestRun THEN BEGIN
                  TestGetShipmentPPmtAmtToDeduct(SalesHeader,SalesLine);
                  PrePmtTestRun := TRUE;
                END;
            END;
            IF "Prepmt Amt to Deduct" <> 0 THEN BEGIN
              IF ("Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
                 ("Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
              THEN BEGIN
                GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                GenPostingSetup.TESTFIELD("Sales Prepayments Account");
              END;
              GLAcc.GET(GenPostingSetup."Sales Prepayments Account");
              TempLineFound := FALSE;
              IF SalesHeader."Compress Prepayment" THEN BEGIN
                TempPrepmtSalesLine.SETRANGE("No.",GLAcc."No.");
                IF TempPrepmtSalesLine.FIND('-') THEN
                  TempLineFound := DocDimMatch(SalesLine,TempPrepmtSalesLine."Line No.",TempDocDim);
                TempPrepmtSalesLine.SETRANGE("No.");
              END;
              IF TempLineFound THEN BEGIN
                IF SalesHeader."Currency Code" <> '' THEN BEGIN
                  TempPrePayDeductLCYSalesLine := SalesLine;
                  TempPrePayDeductLCYSalesLine."Prepmt. Amount Inv. (LCY)" :=
                    ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                      SalesHeader."Posting Date",
                      SalesHeader."Currency Code",
                      TempPrepmtSalesLine."Unit Price" + "Prepmt Amt to Deduct",
                      SalesHeader."Currency Factor")) -
                    ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                      SalesHeader."Posting Date",
                      SalesHeader."Currency Code",
                      TempPrepmtSalesLine."Unit Price",
                      SalesHeader."Currency Factor"));
                  TempPrePayDeductLCYSalesLine.INSERT;
                END;
                VATDifference := TempPrepmtSalesLine."VAT Difference";
                TempPrepmtSalesLine.VALIDATE(
                  "Unit Price",TempPrepmtSalesLine."Unit Price" + "Prepmt Amt to Deduct");
                TempPrepmtSalesLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
                TempPrepmtSalesLine.MODIFY;
              END ELSE BEGIN
                TempPrepmtSalesLine.INIT;
                TempPrepmtSalesLine."Document Type" := SalesHeader."Document Type";
                TempPrepmtSalesLine."Document No." := SalesHeader."No.";
                TempPrepmtSalesLine."Line No." := 0;
                TempPrepmtSalesLine."System-Created Entry" := TRUE;
                IF CompleteFunctionality THEN
                  TempPrepmtSalesLine.VALIDATE(Type,TempPrepmtSalesLine.Type::"G/L Account")
                ELSE
                  TempPrepmtSalesLine.Type := TempPrepmtSalesLine.Type::"G/L Account";
                TempPrepmtSalesLine.VALIDATE("No.",GenPostingSetup."Sales Prepayments Account");
                TempPrepmtSalesLine.VALIDATE(Quantity,-1);
                TempPrepmtSalesLine."Qty. to Ship" := TempPrepmtSalesLine.Quantity;
                TempPrepmtSalesLine."Qty. to Invoice" := TempPrepmtSalesLine.Quantity;
                IF SalesHeader."Currency Code" <> '' THEN BEGIN
                  TempPrePayDeductLCYSalesLine := SalesLine;
                  TempPrePayDeductLCYSalesLine."Prepmt. Amount Inv. (LCY)" :=
                    ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                      SalesHeader."Posting Date",
                      SalesHeader."Currency Code",
                      "Prepmt Amt to Deduct",
                      SalesHeader."Currency Factor"));
                  TempPrePayDeductLCYSalesLine.INSERT;
                END;
                TempPrepmtSalesLine.VALIDATE("Unit Price","Prepmt Amt to Deduct");
                TempPrepmtSalesLine.VALIDATE("VAT Difference",-"Prepmt VAT Diff. to Deduct");
                TempPrepmtSalesLine."Prepayment Line" := TRUE;
                TempPrepmtSalesLine."Line No." := NextLineNo;
                NextLineNo := NextLineNo + 10000;
                DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
                DocDim.SETRANGE("Document Type","Document Type");
                DocDim.SETRANGE("Document No.","Document No.");
                DocDim.SETRANGE("Line No.","Line No.");
                IF DocDim.FIND('-') THEN
                  REPEAT
                    TempDocDim := DocDim;
                    TempDocDim."Line No." := TempPrepmtSalesLine."Line No.";
                    TempDocDim.INSERT;
                    IF TempDocDim."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
                      TempPrepmtSalesLine."Shortcut Dimension 1 Code" := TempDocDim."Dimension Value Code";
                    IF TempDocDim."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
                      TempPrepmtSalesLine."Shortcut Dimension 2 Code" := TempDocDim."Dimension Value Code";
                  UNTIL DocDim.NEXT = 0;
                TempPrepmtSalesLine.INSERT;
                TransferExtText.PrepmtGetAnyExtText(
                  TempPrepmtSalesLine."No.",DATABASE::"Sales Invoice Line",
                  SalesHeader."Document Date",SalesHeader."Language Code",TempExtTextLine);
                IF TempExtTextLine.FIND('-') THEN
                  REPEAT
                    TempPrepmtSalesLine.INIT;
                    TempPrepmtSalesLine.Description := TempExtTextLine.Text;
                    TempPrepmtSalesLine."System-Created Entry" := TRUE;
                    TempPrepmtSalesLine."Prepayment Line" := TRUE;
                    TempPrepmtSalesLine."Line No." := NextLineNo;
                    NextLineNo := NextLineNo + 10000;
                    TempPrepmtSalesLine.INSERT;
                  UNTIL TempExtTextLine.NEXT = 0;
              END;
            END;
          UNTIL NEXT = 0
      END;
    END;

    PROCEDURE MergeSaleslines@52(SalesHeader@1000000004 : Record 36;VAR Salesline@1000 : Record 37;VAR Salesline2@1000000002 : Record 37;VAR MergedSalesline@1000000003 : Record 37);
    BEGIN
      WITH Salesline DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF FIND('-') THEN
          REPEAT
            MergedSalesline := Salesline;
            MergedSalesline.INSERT;
          UNTIL NEXT = 0;
      END;
      WITH Salesline2 DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF FIND('-') THEN
          REPEAT
            MergedSalesline := Salesline2;
            MergedSalesline.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DocDimMatch@53(SalesLine@1000 : Record 37;LineNo2@1001 : Integer;VAR TempDocDim@1002 : Record 357) : Boolean;
    VAR
      DocDim@1003 : Record 357;
      Found@1004 : Boolean;
      Found2@1005 : Boolean;
    BEGIN
      WITH DocDim DO BEGIN
        SETRANGE("Table ID",DATABASE::"Sales Line");
        SETRANGE("Document Type",SalesLine."Document Type");
        SETRANGE("Document No.",SalesLine."Document No.");
        SETRANGE("Line No.",SalesLine."Line No.");
        IF NOT FIND('-') THEN
          CLEAR(DocDim);
      END;
      WITH TempDocDim DO BEGIN
        SETRANGE("Table ID",DATABASE::"Sales Line");
        SETRANGE("Document Type",SalesLine."Document Type");
        SETRANGE("Document No.",SalesLine."Document No.");
        SETRANGE("Line No.",LineNo2);
        IF NOT FIND('-') THEN
          CLEAR(TempDocDim);
      END;

      WHILE (DocDim."Dimension Code" = TempDocDim."Dimension Code") AND
            (DocDim."Dimension Value Code" = TempDocDim."Dimension Value Code") AND
            (DocDim."Dimension Code" <> '')
      DO BEGIN
        IF NOT DocDim.FIND('>') THEN
          CLEAR(DocDim);
        IF NOT TempDocDim.FIND('>') THEN
          CLEAR(TempDocDim);
      END;

      TempDocDim.RESET;
      EXIT((DocDim."Dimension Code" = TempDocDim."Dimension Code") AND
          (DocDim."Dimension Value Code" = TempDocDim."Dimension Value Code"));
    END;

    PROCEDURE PostJobContractLine@54(SalesLine@1000 : Record 37;VAR TempJnlLineDim@1001 : Record 356);
    BEGIN
      IF SalesLine."Job Contract Entry No." = 0 THEN
        EXIT;
      IF (SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice) AND
         (SalesHeader."Document Type" <> SalesHeader."Document Type"::"Credit Memo")
      THEN
        SalesLine.TESTFIELD("Job Contract Entry No.",0);

      SalesLine.TESTFIELD("Job No.");
      SalesLine.TESTFIELD("Job Task No.");

      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN
        SalesLine."Document No." := SalesInvHeader."No.";
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
        SalesLine."Document No." := SalesCrMemoHeader."No.";
      JobPostLine.PostInvoiceContractLine(SalesHeader,SalesLine,TempJnlLineDim);
      JobContractLine := TRUE;
    END;

    LOCAL PROCEDURE InsertICGenJnlLine@150(SalesLine@1000 : Record 37);
    VAR
      ICGLAccount@1001 : Record 410;
      Vend@1002 : Record 23;
      ICPartner@1003 : Record 413;
    BEGIN
      SalesHeader.TESTFIELD("Sell-to IC Partner Code",'');
      SalesHeader.TESTFIELD("Bill-to IC Partner Code",'');
      SalesLine.TESTFIELD("IC Partner Ref. Type",SalesLine."IC Partner Ref. Type"::"G/L Account");
      ICGLAccount.GET(SalesLine."IC Partner Reference");
      ICGenJnlLineNo := ICGenJnlLineNo + 1;
      TempICGenJnlLine.INIT;
      TempICGenJnlLine."Line No." := ICGenJnlLineNo;
      TempICGenJnlLine.VALIDATE("Posting Date",SalesHeader."Posting Date");
      TempICGenJnlLine."Document Date" := SalesHeader."Document Date";
      TempICGenJnlLine.Description := SalesHeader."Posting Description";
      TempICGenJnlLine."Reason Code" := SalesHeader."Reason Code";
      TempICGenJnlLine."Document Type" := GenJnlLineDocType;
      TempICGenJnlLine."Document No." := GenJnlLineDocNo;
      TempICGenJnlLine."External Document No." := GenJnlLineExtDocNo;
      TempICGenJnlLine.VALIDATE("Account Type",TempICGenJnlLine."Account Type"::"IC Partner");
      TempICGenJnlLine.VALIDATE("Account No.",SalesLine."IC Partner Code");
      TempICGenJnlLine."Source Currency Code" := SalesHeader."Currency Code";
      TempICGenJnlLine."Source Currency Amount" := TempICGenJnlLine.Amount;
      TempICGenJnlLine.Correction := SalesHeader.Correction;
      TempICGenJnlLine."Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
      TempICGenJnlLine."Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
      TempICGenJnlLine."Source Code" := SrcCode;
      TempICGenJnlLine."Country/Region Code" := SalesHeader."VAT Country/Region Code";
      TempICGenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
      TempICGenJnlLine."Source No." := SalesHeader."Bill-to Customer No.";
      TempICGenJnlLine."Posting No. Series" := SalesHeader."Posting No. Series";
      TempICGenJnlLine.VALIDATE("Bal. Account Type",TempICGenJnlLine."Bal. Account Type"::"G/L Account");
      TempICGenJnlLine.VALIDATE("Bal. Account No.",SalesLine."No.");
      Vend.SETRANGE("IC Partner Code",SalesLine."IC Partner Code");
      IF Vend.FINDFIRST THEN BEGIN
        TempICGenJnlLine.VALIDATE("Bal. Gen. Bus. Posting Group",Vend."Gen. Bus. Posting Group");
        TempICGenJnlLine.VALIDATE("Bal. VAT Bus. Posting Group",Vend."VAT Bus. Posting Group");
      END;
      TempICGenJnlLine."IC Partner Code" := SalesLine."IC Partner Code";
      TempICGenJnlLine."IC Partner G/L Acc. No." := SalesLine."IC Partner Reference";
      TempICGenJnlLine."IC Direction" := TempICGenJnlLine."IC Direction"::Outgoing;
      ICPartner.GET(SalesLine."IC Partner Code");
      IF ICPartner."Cost Distribution in LCY" AND (SalesLine."Currency Code" <> '') THEN BEGIN
        TempICGenJnlLine."Currency Code" := '';
        TempICGenJnlLine."Currency Factor" := 0;
        Currency.GET(SalesLine."Currency Code");
        IF SalesHeader."Document Type" IN
           [SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"]
        THEN
          TempICGenJnlLine.Amount :=
            -ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                SalesHeader."Posting Date",SalesLine."Currency Code",
                SalesLine.Amount,SalesHeader."Currency Factor"))
        ELSE
          TempICGenJnlLine.Amount :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                SalesHeader."Posting Date",SalesLine."Currency Code",
                SalesLine.Amount,SalesHeader."Currency Factor"));
      END ELSE BEGIN
        Currency.InitRoundingPrecision;
        TempICGenJnlLine."Currency Code" := SalesHeader."Currency Code";
        TempICGenJnlLine."Currency Factor" := SalesHeader."Currency Factor";
        IF SalesHeader."Document Type" IN [SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"] THEN
          TempICGenJnlLine.Amount := -SalesLine.Amount
        ELSE
          TempICGenJnlLine.Amount := SalesLine.Amount;
      END;
      IF TempICGenJnlLine."Bal. VAT %" <> 0 THEN
        TempICGenJnlLine.Amount := ROUND(TempICGenJnlLine.Amount * (1 + TempICGenJnlLine."Bal. VAT %" / 100),
                                               Currency."Amount Rounding Precision");
      TempICGenJnlLine.VALIDATE(Amount);
      TempICGenJnlLine.INSERT;

      TempDocDim.RESET;
      TempDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
      TempDocDim.SETRANGE("Line No.",SalesLine."Line No.");
      IF TempDocDim.FIND('-') THEN
        REPEAT
          TempICJnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
          TempICJnlLineDim."Journal Line No." := ICGenJnlLineNo;
          TempICJnlLineDim."Dimension Code" := TempDocDim."Dimension Code";
          TempICJnlLineDim."Dimension Value Code" := TempDocDim."Dimension Value Code";
          TempICJnlLineDim.INSERT;
        UNTIL TempDocDim.NEXT = 0;
    END;

    LOCAL PROCEDURE PostICGenJnl@151();
    VAR
      ICInOutBoxMgt@1001 : Codeunit 427;
      ICTransactionNo@1000 : Integer;
    BEGIN
      TempICGenJnlLine.RESET;
      IF TempICGenJnlLine.FIND('-') THEN
        REPEAT
          TempICJnlLineDim.RESET;
          TempICJnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
          TempICJnlLineDim.SETRANGE("Journal Line No.",TempICGenJnlLine."Line No.");
          ICTransactionNo := ICInOutBoxMgt.CreateOutboxJnlTransaction(TempICGenJnlLine,FALSE);
          ICInOutBoxMgt.CreateOutboxJnlLine(ICTransactionNo,1,TempICGenJnlLine,TempICJnlLineDim);
          GenJnlPostLine.RunWithCheck(TempICGenJnlLine,TempICJnlLineDim);
        UNTIL TempICGenJnlLine.NEXT = 0;
    END;

    PROCEDURE TestGetShipmentPPmtAmtToDeduct@29(SalesHeader@1004 : Record 36;SalesLine@1005 : Record 37);
    VAR
      TempSalesLine2@1001 : Record 37;
      TempSalesLine3@1003 : TEMPORARY Record 37;
      OrderNo@1000 : Code[20];
      TotalPrePmtAmtToDeduct@1002 : Decimal;
      QtyToInv@1006 : Decimal;
      LineNo@1008 : Decimal;
    BEGIN
      TempSalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      TempSalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF NOT TempSalesLine.FIND('+') THEN
        EXIT;
      TempSalesLine.SETFILTER(Quantity,'>0');
      TempSalesLine.SETFILTER("Qty. to Invoice",'>0');
      TempSalesLine.SETFILTER("Shipment No.",'<>%1','');

      IF TempSalesLine.FINDSET THEN
        REPEAT
          TempSalesLine3 := TempSalesLine;
          TempSalesLine3.INSERT;
        UNTIL TempSalesLine.NEXT = 0;

      IF TempSalesLine.FINDSET THEN
        REPEAT
          IF SalesShptLine.GET(TempSalesLine."Shipment No.",TempSalesLine."Shipment Line No.") THEN BEGIN
            TempSalesLine2.GET(
              TempSalesLine."Document Type"::Order,
              SalesShptLine."Order No.",SalesShptLine."Order Line No.");
            OrderNo := SalesShptLine."Order No.";
            LineNo := SalesShptLine."Line No.";

            IF TempSalesLine3.FINDSET THEN
              REPEAT
                IF SalesShptLine.GET(TempSalesLine3."Shipment No.",TempSalesLine3."Shipment Line No.") THEN
                  IF (SalesShptLine."Order No." = OrderNo) AND (SalesShptLine."Line No." = LineNo)  THEN BEGIN
                    QtyToInv := QtyToInv + TempSalesLine3."Qty. to Invoice";
                    TotalPrePmtAmtToDeduct := TotalPrePmtAmtToDeduct + TempSalesLine3."Prepmt Amt to Deduct";
                  END;
              UNTIL TempSalesLine3.NEXT = 0;
              CASE TRUE OF
                (TotalPrePmtAmtToDeduct > TempSalesLine2."Prepmt. Amt. Inv." - TempSalesLine2."Prepmt Amt Deducted"):
                  ERROR(
                    STRSUBSTNO(Text050,
                      TempSalesLine2.FIELDCAPTION("Prepmt Amt to Deduct"),
                      ROUND(
                        TempSalesLine2."Prepmt. Amt. Inv." - TempSalesLine2."Prepmt Amt Deducted",
                        GLSetup."Amount Rounding Precision")));
                (QtyToInv = TempSalesLine2.Quantity - TempSalesLine2."Quantity Invoiced"):
                  IF NOT (TotalPrePmtAmtToDeduct = TempSalesLine2."Prepmt. Amt. Inv." - TempSalesLine2."Prepmt Amt Deducted") THEN
                    ERROR(
                      STRSUBSTNO(Text051,
                        TempSalesLine2.FIELDCAPTION("Prepmt Amt to Deduct"),
                        ROUND(
                          TempSalesLine2."Prepmt. Amt. Inv." - TempSalesLine2."Prepmt Amt Deducted",
                          GLSetup."Amount Rounding Precision")));
              END;
              TotalPrePmtAmtToDeduct := 0;
              QtyToInv := 0;
          END;
        UNTIL TempSalesLine.NEXT = 0;
    END;

    PROCEDURE ArchiveUnpostedOrder@56();
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      IF NOT SalesSetup."Archive Quotes and Orders" THEN
        EXIT;
      IF NOT (SalesHeader."Document Type" IN [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::"Return Order"]) THEN
        EXIT;
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER(Quantity,'<>0');
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN BEGIN
        SalesLine.SETRANGE("Quantity Shipped",0);
        SalesLine.SETFILTER("Qty. to Ship",'<>0');
      END ELSE BEGIN
        SalesLine.SETRANGE("Return Qty. Received",0);
        SalesLine.SETFILTER("Return Qty. to Receive",'<>0');
      END;
      IF NOT SalesLine.ISEMPTY THEN BEGIN
        ArchiveManagement.ArchSalesDocumentNoConfirm(SalesHeader);
        COMMIT;
      END;
    END;

    PROCEDURE PrepayRealizeGainLoss@26(SalesLine@1000 : Record 37);
    VAR
      TempJnlLineDim@1001 : TEMPORARY Record 356;
      SalesPostPrepayments@1002 : Codeunit 442;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF (SalesLine."Prepmt. Amount Inv. (LCY)" <> 0) THEN BEGIN
          GenJnlLine.INIT;
          GenJnlLine."Posting Date" := "Posting Date";
          GenJnlLine."Document Date" := "Document Date";
          GenJnlLine.Description := "Posting Description";
          GenJnlLine."Reason Code" := "Reason Code";
          GenJnlLine."Document Type" := GenJnlLineDocType;
          GenJnlLine."Document No." := GenJnlLineDocNo;
          GenJnlLine."External Document No." := GenJnlLineExtDocNo;
          DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
          DocDim.SETRANGE("Document Type","Document Type");
          DocDim.SETRANGE("Document No.",SalesLine."Document No.");
          DocDim.SETRANGE("Line No.",SalesLine."Line No.");
          TempJnlLineDim.RESET;
          TempJnlLineDim.DELETEALL;
          DimMgt.CopyDocDimToJnlLineDim(DocDim,TempJnlLineDim);
          GenJnlLine."Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
          GenJnlLine."Source Code" := SrcCode;
          GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
          GenJnlLine."Source No." := "Bill-to Customer No.";
          GenJnlLine."Posting No. Series" := "Posting No. Series";
          GenJnlLine."Source Currency Code" := "Currency Code";
          SalesPostPrepayments.RealizeGainLoss(GenJnlLine,SalesLine);
          GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
        END;
      END;
    END;

    PROCEDURE SynchBOMSerialNo@1204(VAR ServItemTmp3@1200 : TEMPORARY Record 5940;VAR ServItemTmpCmp3@1201 : TEMPORARY Record 5941);
    VAR
      ItemLedgEntry@1000 : Record 32;
      ItemLedgEntry2@1001 : Record 32;
      TempSalesShipMntLine@1002 : TEMPORARY Record 111;
      ServItemTmpCmp4@1003 : TEMPORARY Record 5941;
      ServItemCompLocal@1004 : Record 5941;
      ChildCount@1005 : Integer;
      EndLoop@1006 : Boolean;
      ItemNumberMatch@1007 : Boolean;
    BEGIN
      IF NOT ServItemTmpCmp3.FIND('-') THEN
        EXIT;

      IF NOT ServItemTmp3.FIND('-') THEN
        EXIT;

      TempSalesShipMntLine.DELETEALL;
      REPEAT
        CLEAR(TempSalesShipMntLine);
        TempSalesShipMntLine."Document No." := ServItemTmp3."Sales/Serv. Shpt. Document No.";
        TempSalesShipMntLine."Line No." := ServItemTmp3."Sales/Serv. Shpt. Line No.";
        IF TempSalesShipMntLine.INSERT THEN;
      UNTIL ServItemTmp3.NEXT = 0;

      IF NOT TempSalesShipMntLine.FIND('-') THEN
        EXIT;

      ServItemTmp3.SETCURRENTKEY("Sales/Serv. Shpt. Document No.","Sales/Serv. Shpt. Line No.");
      CLEAR(ItemLedgEntry);
      ItemLedgEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");

      REPEAT
        ChildCount := 0;
        ServItemTmpCmp4.DELETEALL;
        ServItemTmp3.SETRANGE("Sales/Serv. Shpt. Document No.",TempSalesShipMntLine."Document No.");
        ServItemTmp3.SETRANGE("Sales/Serv. Shpt. Line No.",TempSalesShipMntLine."Line No.");
        IF ServItemTmp3.FIND('-') THEN
          REPEAT
            ServItemTmpCmp3.SETRANGE(Active,TRUE);
            ServItemTmpCmp3.SETRANGE("Parent Service Item No.",ServItemTmp3."No.");
            IF ServItemTmpCmp3.FIND('-') THEN
              REPEAT
                ChildCount += 1;
                ServItemTmpCmp4 := ServItemTmpCmp3;
                ServItemTmpCmp4.INSERT;
              UNTIL ServItemTmpCmp3.NEXT = 0;
          UNTIL ServItemTmp3.NEXT = 0;
        ItemLedgEntry.SETRANGE("Document No.",TempSalesShipMntLine."Document No.");
        ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Sales Shipment");
        ItemLedgEntry.SETRANGE("Document Line No.",TempSalesShipMntLine."Line No.");
        IF ItemLedgEntry.FIND('-') AND ServItemTmpCmp4.FIND('-') THEN BEGIN
          CLEAR(ItemLedgEntry2);
          ItemLedgEntry2.GET(ItemLedgEntry."Entry No.");
          EndLoop := FALSE;
          ItemNumberMatch := FALSE;
          REPEAT
            IF ItemLedgEntry2."Item No." = ServItemTmpCmp4."No." THEN BEGIN
              EndLoop := TRUE;
              ItemNumberMatch := TRUE;
            END ELSE
              IF ItemLedgEntry2.NEXT = 0 THEN
                EndLoop := TRUE;
          UNTIL EndLoop;
          IF ItemNumberMatch THEN BEGIN
            ItemLedgEntry2.SETRANGE("Entry No.",ItemLedgEntry2."Entry No.",ItemLedgEntry2."Entry No." + ChildCount - 1);
            IF ItemLedgEntry2.FIND('-') THEN
              REPEAT
                IF ServItemCompLocal.GET(
                     ServItemTmpCmp4.Active,
                     ServItemTmpCmp4."Parent Service Item No.",
                     ServItemTmpCmp4."Line No.")
                THEN BEGIN
                  IF (ServItemCompLocal."Serial No." = '') AND (ItemLedgEntry2."Serial No." <> '') AND
                     (ServItemCompLocal."No." = ItemLedgEntry2."Item No.")
                  THEN BEGIN
                    ServItemCompLocal."Serial No." := ItemLedgEntry2."Serial No.";
                    ServItemCompLocal.MODIFY;
                  END;
                END;
              UNTIL (ItemLedgEntry2.NEXT = 0) OR (ServItemTmpCmp4.NEXT = 0);
          END;
        END;
      UNTIL TempSalesShipMntLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ItemLedgerEntryExist@7(SalesLine2@1000 : Record 37) : Boolean;
    VAR
      HasItemLedgerEntry@1001 : Boolean;
    BEGIN
      IF SalesHeader.Ship OR SalesHeader.Receive THEN
        // item ledger entry will be created during posting in this transaction
        HasItemLedgerEntry :=
          ((SalesLine2."Qty. to Ship" + SalesLine2."Quantity Shipped") <> 0) OR
          ((SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced") <> 0) OR
          ((SalesLine2."Return Qty. to Receive" + SalesLine2."Return Qty. Received") <> 0)
      ELSE
        // item ledger entry must already exist
        HasItemLedgerEntry :=
          (SalesLine2."Quantity Shipped" <> 0) OR
          (SalesLine2."Return Qty. Received" <> 0);

      EXIT(HasItemLedgerEntry);
    END;

    PROCEDURE TestSalesEfects@1100010(SalesHeader@1100011 : Record 36;Cust@1100012 : Record 18);
    VAR
      CustLedgEntry@1100013 : Record 21;
      Text1100000@1100003 : TextConst 'ENU=At least one document of %1 No. %2 is closed or in a Bill Group.;ESP=Al menos un documento de %1 No. %2 est  cerrado o en una remesa.';
      Text1100001@1100004 : TextConst 'ENU=This will avoid the document to be settled.\;ESP=Esto evita que el documento sea liquidado.\';
      Text1100002@1100005 : TextConst 'ENU=The posting process of %3 No. %4 will not settle any document.\;ESP=El registro de %3 n§ %4 no liquidar  ning£n documento.\';
      ShowError@1100014 : Boolean;
      Text1100003@1100006 : TextConst 'ENU=Please remove the lines for the Bill Group before posting.;ESP=Elimine las l¡neas para la Remesa antes del registro.';
    BEGIN
      ShowError := FALSE;
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN BEGIN
        CustLedgEntry.SETCURRENTKEY("Document No.","Document Type","Customer No.");
        CustLedgEntry.SETFILTER("Document Type",'%1|%2',CustLedgEntry."Document Type"::Invoice,
          CustLedgEntry."Document Type"::Bill);
        CustLedgEntry.SETFILTER("Document Situation",'<>%1',CustLedgEntry."Document Situation"::" ");
        CustLedgEntry.SETRANGE("Customer No.",SalesHeader."Bill-to Customer No.");
        CustLedgEntry.SETRANGE(Open,TRUE);

        IF CustLedgEntry.FIND('-') THEN
          REPEAT
            IF CustLedgEntry."Document Situation" <> CustLedgEntry."Document Situation"::Cartera THEN
              IF NOT ((CustLedgEntry."Document Situation" IN
                [CustLedgEntry."Document Situation"::"Closed Documents",
                CustLedgEntry."Document Situation"::"Closed BG/PO"]) AND
                (CustLedgEntry."Document Status" = CustLedgEntry."Document Status"::Rejected)) THEN
                  ShowError := TRUE;
          UNTIL CustLedgEntry.NEXT = 0;

        IF ShowError THEN
          ERROR(Text1100000 +
            Text1100001 +
            Text1100002 +
            Text1100003,
            FORMAT(CustLedgEntry."Document Type"),
            FORMAT(CustLedgEntry."Document No."),
            FORMAT(SalesHeader."Document Type"),
            FORMAT(SalesHeader."No."));
      END;
    END;

    BEGIN
    {
      // INCOMING

      $001 Comprobacion de que el departamento este rellenado, solo si as¡ se ha indicado por parametros de agencia

      $002 Rellenar el campo Regimen (TIPO IVA) en la tabla temporal de lineas de factura (InvPostingBuffer) que se utiliza para registrar

      $003 Rellenar los campos Hotel y "Tipo de clave" en la tabla temporal de lineas de factura que se utiliza para registrar

      $004 Rellenar los campos Regimen, "Tipo de clave" y Hotel en Lin diario general para registrar contabilidad

      $005 Rellenar los campos "Tipo de clave" y Hotel en Lin diario general para registra mov cliente

      $006 AJS 29.12.2006, Comprobantes fiscales
                Rellenar los campos "Cod. Grupo NCF" y "Comprobante Fiscal" de Lin diario general para luego registrar en Mov cliente

      $007 AJS 02042013 El control de departamento no se hace en las anulaciones

      $008 AJS 26082013 Elimino las referencias a Tipo de clave porque es obsoleto

      $009 AJS 09052014 Modifico para que no cambie el campo Posting description nunca

      <changelog>
        <add id="es0001" dev="VGARCA" date="2004-08-27" area="DOCNUM" request="es-start-40"
        releaseversion="ES4.00">Document Numbering</add>
        <add id="es0002" dev="VGARCA" date="2004-08-27" area="EQUIVCHRG" request="es-start-40"
        releaseversion="ES4.00">Equivalence Charge</add>
        <add id="es0003" dev="VGARCA" date="2004-08-27" area="PAYDISC" request="es-start-40"
        releaseversion="ES4.00">Payment Discount</add>
        <add id="es0004" dev="VGARCA" date="2004-08-27" area="SHIPMENT" request="es-start-40"
        releaseversion="ES4.00">Shipment Method</add>
        <add id="es0005" dev="VGARCA" date="2004-08-27" area="TRNSMETH" request="es-start-40"
        releaseversion="ES4.00">Transportation Method, Port/Airport</add>
        <add id="es0006" dev="VGARCA" date="2004-08-27" area="VATECCALC" request="es-start-40"
        releaseversion="ES4.00">VAT+EC % calculation</add>
        <add id="es0007" dev="VGARCA" date="2004-08-27" area="CARTERA" request="es-start-40"
        releaseversion="ES4.00">Cartera Add-On (Spanish)</add>
        <add id="es0008" dev="VGARCA" date="2005-06-20" area="CORRINV" feature="PS-SE-6265"
        releaseversion="ES4.00.A">Corrective Invoices</add>
        <add id="es0009" dev="VGARCA" date="2005-06-20" area="MISCELL" feature="PS-SE-8407"
        releaseversion="ES4.00.A">Miscellaneous</add>
        <change id="es0010" dev="VGARCA" date="2005-06-20" area="CARTERA" feature="PS-SE-9015"
        releaseversion="ES4.00.A" baseversion="ES4.00">Cartera Add-On (Spanish)</change>
        <change id="es0011" dev="VGARCA" date="2005-06-20" area="CARTERA" feature="PS-SE-9018"
        releaseversion="ES4.00.A" baseversion="ES4.00">Cartera Add-On (Spanish)</change>
        <change id="es0012" dev="VGARCA" date="2005-10-19" area="CORRINV" feature="PS-SE-10846"
        releaseversion="ES4.00.02" baseversion="ES4.00.A">Corrective Invoices</change>
        <change id="es0013" dev="VGARCA" date="2005-10-21" area="MISCELL" feature="PS-SE-12120"
        releaseversion="ES4.00.02" baseversion="ES4.00.A">Development Standards</change>
        <change id="es0014" dev="VGARCA" date="2006-03-25" area="CARTERA" feature="PS15836"
        releaseversion="ES4.00.03" baseversion="ES4.00.02">Cartera Add-On (Spanish)</change>
        <change id="es0015" dev="VGARCA" date="2006-09-15" area="CARTERA" feature="NAVCORS4835"
        releaseversion="ES5.00" baseversion="ES4.00.03">Cannot create Credit Memo </change>
        <change id="es0016" dev="VGARCA" date="2006-06-07" area="CARTERA" feature="NAVCORS4753"
        releaseversion="ES5.00" baseversion="ES5.00">Spelling errors </change>
        <change id="es0017" dev="VGARCA" date="2007-09-06" area="CARTERA" feature="NAVCORS13530"
        releaseversion="ES6.00" baseversion="ES5.00">Cannot created Credit Memo with apply to oldest method </change>
        <change id="es0018" dev="mnommens" date="2008-06-26" area="VATECCALC" feature="NAVCORS25237"
        baseversion="ES5.00" releaseversion="ES6.00">Prepayments ES changes</change>
        <add id="es0019" dev="tmarti" date="2008-07-22" area="INTRASTAT" feature="NAVCORS26242"
        releaseversion="ES6.00">C/Track - consolidation of application areas</add>
        <remove id="es0020" dev="TMARTI" date="2008-07-22" area="SHIPMENT"
          baseversion="ES4.00" releaseversion="ES6.00"  feature="NAVCORS26242">
          C/Track - consolidation of application areas
        </remove>
        <remove id="es0021" dev="TMARTI" date="2008-07-24" area="MISCELL"
          baseversion="ES4.00.02" releaseversion="ES6.00"  feature="NAVCORS26647">
          MISCELL - 129 out of 190+ objects should not be part of this area
        </remove>
        <change id="es0022" dev="VGARCA" date="2009-03-23" area="PAYDISC" feature="NAVCORS36262"
        releaseversion="ES6.00.01" baseversion="ES4.00">
        GDL localization: CDCR: VAT 1:1 relationship between VAT and GL Ledger (Spanish localization Payment Discount)</change>
        <change id="es0023" dev="VGARCA" date="2009-06-05" area="PAYDISC" feature="NAVCORS40069"
        releaseversion="ES6.00.01" baseversion="ES4.00">
        Incorrect VAT amount in the G/L entry created with the Payment Discount</change>
      </changelog>
    }
    END.
  }
}
