OBJECT Codeunit 99000772 Prod. Order Route Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="Circular reference in %1 Prod. Order %2 When calculating %3. Counted sequences %4. Max. possible sequences %5. ";ESP="Referencia circular en %1 ord. prod. %2 al calcular %3. Secuencia contadas %4. N§ m x. secuencias posible %5. "';
      Text001@1001 : TextConst 'ENU=Back;ESP=Atr s';
      Text002@1002 : TextConst 'ENU=back;ESP=atr s';
      Text003@1003 : TextConst 'ENU=Actual number of termination processes in prod. order %1 route %2  is %3. They should be 1. Check %4.;ESP=N§ real de procesos de finalizaci¢n en ord. prod. %1 ruta %2 es %3. Deber¡a ser 1. Compruebe %4.';
      Text004@1004 : TextConst 'ENU=Actual Number of start processes in prod. order %1 route %2 is %3. They should be 1. Check %4.;ESP=N§ real de procesos de inicio en ord. prod. %1 ruta %2 es %3. Deber¡a ser 1. Compruebe %4.';
      Text005@1005 : TextConst 'ENU=Not all routing lines are sequenced backwards on routing %1. Check %2.;ESP=No todas las l¡neas de ruta se ordenan hacia atr s en ruta %1. Compruebe %2.';
      Text006@1006 : TextConst 'ENU=Not all routing lines are sequenced forward on routing %1. Check %2.;ESP=No todas las l¡neas de ruta se ordenan hacia adelante en linea %1. Compruebe %2.';
      Text007@1007 : TextConst 'ENU=Previous operations for %1 cannot be found.;ESP=No se encontraron operaciones anteriores para %1.';
      Text008@1008 : TextConst 'ENU=Next operations for %1 cannot be found.;ESP=No se encontraron operaciones posteriores para %1.';
      ErrList@1009 : Text[50];

    PROCEDURE NeedsCalculation@8(Status@1000 : 'Simulated,Planned,Firm Planned,Released';ProdOrderNo@1001 : Code[20];RoutingRefNo@1002 : Integer;RoutingNo@1003 : Code[20]) : Boolean;
    VAR
      ProdOrderRtngLine@1004 : Record 5409;
    BEGIN
      ProdOrderRtngLine.SETRANGE(Status,Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",RoutingRefNo);
      ProdOrderRtngLine.SETRANGE("Routing No.",RoutingNo);
      ProdOrderRtngLine.SETRANGE(Recalculate,TRUE);
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

      EXIT(ProdOrderRtngLine.FIND('-'));
    END;

    LOCAL PROCEDURE ErrorInRouting@1(Status@1000 : 'Simulated,Planned,Firm Planned,Released';ProdOrderNo@1001 : Code[20];RoutingNo@1002 : Code[20];Direction@1003 : Text[20];"Actual Sequence"@1004 : Integer;"Max. Sequences"@1005 : Integer);
    VAR
      LocalText000@1006 : TextConst 'ENU=Simulated,Planned,Firm Planned,Released;ESP=Simulada,Planificada,Planificada en firme,Lanzada';
    BEGIN
      ERROR(
        Text000,
        SELECTSTR(Status + 1,LocalText000),
        ProdOrderNo,
        RoutingNo,
        Direction,
        "Actual Sequence",
        "Max. Sequences");
    END;

    LOCAL PROCEDURE InsertInErrList@10(ProdOrderRtngLine@1000 : Record 5409);
    BEGIN
      IF (STRLEN(ErrList) + STRLEN(ProdOrderRtngLine."Operation No.") + 1) > MAXSTRLEN(ErrList) THEN
        EXIT;

      IF STRLEN(ErrList) > 0 THEN
        ErrList := ErrList + ',' + ProdOrderRtngLine."Operation No."
      ELSE
        ErrList := ProdOrderRtngLine."Operation No.";
    END;

    PROCEDURE SetNextOperations@12(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      ProdOrderRtngLine2@1002 : Record 5409;
    BEGIN
      ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.MODIFYALL("Next Operation No.",'');
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);


      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          ProdOrderRtngLine2 := ProdOrderRtngLine;
          ProdOrderRtngLine2.SETRANGE(Status,ProdOrderLine.Status);
          ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
          ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
          ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
          ProdOrderRtngLine2.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine2."Routing Status"::Finished);
          IF ProdOrderRtngLine2.FIND('>') THEN BEGIN
            ProdOrderRtngLine."Next Operation No." := ProdOrderRtngLine2."Operation No.";
            ProdOrderRtngLine.MODIFY;
          END;
        UNTIL ProdOrderRtngLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcPreviousOperations@11(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      ProdOrderRtngLine2@1002 : Record 5409;
    BEGIN
      ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.MODIFYALL("Previous Operation No.",'');
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          IF ProdOrderRtngLine."Next Operation No." <> '' THEN BEGIN
            ProdOrderRtngLine2.SETRANGE(Status,ProdOrderLine.Status);
            ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
            ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
            ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
            ProdOrderRtngLine2.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine2."Routing Status"::Finished);
            ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
            IF ProdOrderRtngLine2.FIND('-') THEN
              REPEAT
                IF ProdOrderRtngLine2."Previous Operation No." <> '' THEN
                  ProdOrderRtngLine2."Previous Operation No." :=
                    ProdOrderRtngLine2."Previous Operation No." + '|';
                ProdOrderRtngLine2."Previous Operation No." :=
                  ProdOrderRtngLine2."Previous Operation No." +
                  ProdOrderRtngLine."Operation No.";
                ProdOrderRtngLine2.MODIFY;
              UNTIL ProdOrderRtngLine2.NEXT = 0;
          END;
        UNTIL ProdOrderRtngLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SetRtngLineSequenceBack@6(RoutingType@1000 : 'Serial,Parallel';ProdOrderRtngLine@1001 : Record 5409;Maxsequences@1002 : Integer;Actsequences@1003 : Integer;TotalCalculation@1004 : Boolean);
    VAR
      ProdOrderRtngLine2@1005 : Record 5409;
      SequenceNo@1006 : Integer;
    BEGIN
      IF RoutingType = RoutingType::Parallel THEN BEGIN
        IF (Actsequences - 1) > Maxsequences THEN
          ErrorInRouting(
            ProdOrderRtngLine.Status,
            ProdOrderRtngLine."Prod. Order No.",
            ProdOrderRtngLine."Routing No.",
            Text001,
            Actsequences,
            Maxsequences);

        IF TotalCalculation THEN
          ProdOrderRtngLine."Sequence No. (Backward)" := 1
        ELSE
          ProdOrderRtngLine."Sequence No. (Actual)" := 1;

        ProdOrderRtngLine2.SETRANGE(Status,ProdOrderRtngLine.Status);
        ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
        ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
        ProdOrderRtngLine2.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine2."Routing Status"::Finished);
        IF ProdOrderRtngLine."Next Operation No." <> '' THEN BEGIN
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
          IF ProdOrderRtngLine2.FIND('-') THEN
            REPEAT
              IF TotalCalculation THEN BEGIN
                IF (ProdOrderRtngLine2."Sequence No. (Backward)" + 1) > ProdOrderRtngLine."Sequence No. (Backward)" THEN
                  ProdOrderRtngLine."Sequence No. (Backward)" := ProdOrderRtngLine2."Sequence No. (Backward)" + 1;
              END ELSE BEGIN
                IF (ProdOrderRtngLine2."Sequence No. (Actual)" + 1) > ProdOrderRtngLine."Sequence No. (Actual)" THEN
                  ProdOrderRtngLine."Sequence No. (Actual)" := ProdOrderRtngLine2."Sequence No. (Actual)" + 1;
              END;
            UNTIL ProdOrderRtngLine2.NEXT = 0;
        END;
        ProdOrderRtngLine.MODIFY;

        IF ProdOrderRtngLine."Previous Operation No." <> '' THEN BEGIN
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Previous Operation No.");
          IF ProdOrderRtngLine2.FIND('-') THEN
            REPEAT
              SetRtngLineSequenceBack(
                RoutingType,
                ProdOrderRtngLine2,
                Maxsequences,
                Actsequences + 1,
                TotalCalculation);
            UNTIL ProdOrderRtngLine2.NEXT = 0;
        END;
      END ELSE BEGIN
        SequenceNo := 1;
        ProdOrderRtngLine2 := ProdOrderRtngLine;
        ProdOrderRtngLine2.SETRANGE(Status,ProdOrderRtngLine.Status);
        ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
        ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
        ProdOrderRtngLine2.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine2."Routing Status"::Finished);
        IF ProdOrderRtngLine2.FIND THEN REPEAT
          IF TotalCalculation THEN
            ProdOrderRtngLine2."Sequence No. (Backward)" := SequenceNo
          ELSE
            ProdOrderRtngLine2."Sequence No. (Actual)" := SequenceNo;
          ProdOrderRtngLine2.MODIFY;
          SequenceNo := SequenceNo + 1;
        UNTIL ProdOrderRtngLine2.NEXT(-1) = 0;
      END;
    END;

    LOCAL PROCEDURE SetRtngLineSequenceForward@7(RoutingType@1000 : 'Serial,Parallel';ProdOrderRtngLine@1001 : Record 5409;MaxSequences@1002 : Integer;ActSequences@1003 : Integer;TotalCalculation@1004 : Boolean);
    VAR
      ProdOrderRtngLine2@1005 : Record 5409;
      SequenceNo@1006 : Integer;
    BEGIN
      IF RoutingType = RoutingType::Parallel THEN BEGIN
        IF ActSequences > MaxSequences THEN
          ErrorInRouting(
            ProdOrderRtngLine.Status,
            ProdOrderRtngLine."Prod. Order No.",
            ProdOrderRtngLine."Routing No.",
            Text002,
            ActSequences,
            MaxSequences);

        IF TotalCalculation THEN
          ProdOrderRtngLine."Sequence No. (Forward)" := 1
        ELSE
          ProdOrderRtngLine."Sequence No. (Actual)" := 1;

        ProdOrderRtngLine2.SETRANGE(Status,ProdOrderRtngLine.Status);
        ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
        ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
        ProdOrderRtngLine2.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine2."Routing Status"::Finished);
        IF ProdOrderRtngLine."Previous Operation No." <> '' THEN BEGIN
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Previous Operation No.");
          IF ProdOrderRtngLine2.FIND('-') THEN
            REPEAT
              IF TotalCalculation THEN BEGIN
                IF (ProdOrderRtngLine2."Sequence No. (Forward)" + 1) > ProdOrderRtngLine."Sequence No. (Forward)" THEN
                  ProdOrderRtngLine."Sequence No. (Forward)" := ProdOrderRtngLine2."Sequence No. (Forward)" + 1;
              END ELSE BEGIN
                IF (ProdOrderRtngLine2."Sequence No. (Actual)" + 1) > ProdOrderRtngLine."Sequence No. (Actual)" THEN
                  ProdOrderRtngLine."Sequence No. (Actual)" :=
                    ProdOrderRtngLine."Sequence No. (Actual)" + 1;
              END;
            UNTIL ProdOrderRtngLine2.NEXT = 0;
        END;
        ProdOrderRtngLine.MODIFY;

        IF ProdOrderRtngLine."Next Operation No." <> '' THEN BEGIN
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
          IF ProdOrderRtngLine2.FIND('-') THEN
            REPEAT
              SetRtngLineSequenceForward(
                RoutingType,
                ProdOrderRtngLine2,
                MaxSequences,
                ActSequences + 1,
                TotalCalculation);
            UNTIL ProdOrderRtngLine2.NEXT = 0;
        END;
      END ELSE BEGIN
        SequenceNo := 1;
        ProdOrderRtngLine2 := ProdOrderRtngLine;
        ProdOrderRtngLine2.SETRANGE(Status,ProdOrderRtngLine.Status);
        ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
        ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
        ProdOrderRtngLine2.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine2."Routing Status"::Finished);
        IF ProdOrderRtngLine2.FIND THEN REPEAT
          IF TotalCalculation THEN
            ProdOrderRtngLine2."Sequence No. (Forward)" := SequenceNo
          ELSE
            ProdOrderRtngLine2."Sequence No. (Actual)" := SequenceNo;
          ProdOrderRtngLine2.MODIFY;
          SequenceNo := SequenceNo + 1;
        UNTIL ProdOrderRtngLine2.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcSequenceBack@2(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      MaxSeq@1002 : Integer;
    BEGIN
      ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          ProdOrderRtngLine."Sequence No. (Backward)" := 0;
          ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)" := 0;
          ProdOrderRtngLine."Scrap Factor % (Accumulated)" := 0;
          ProdOrderRtngLine.MODIFY;
        UNTIL ProdOrderRtngLine.NEXT = 0;

      MaxSeq := ProdOrderRtngLine.COUNT;

      ProdOrderRtngLine.SETFILTER("Next Operation No.",'%1','');
      ProdOrderRtngLine.FIND('-');
      SetRtngLineSequenceBack(ProdOrderLine."Routing Type",ProdOrderRtngLine,MaxSeq,1,TRUE);
    END;

    PROCEDURE CalcSequenceForward@3(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      MaxSeq@1002 : Integer;
    BEGIN
      ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.MODIFYALL("Sequence No. (Forward)",0);
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

      MaxSeq := ProdOrderRtngLine.COUNT;

      ProdOrderRtngLine.SETFILTER(ProdOrderRtngLine."Previous Operation No.", '%1', '');
      ProdOrderRtngLine.FIND('-');
      SetRtngLineSequenceForward(ProdOrderLine."Routing Type",ProdOrderRtngLine,MaxSeq,1,TRUE);
    END;

    PROCEDURE CalcSequenceFromActual@9(ProdOrderRtngLine@1000 : Record 5409;Direction@1001 : 'Forward,Backward');
    VAR
      ProdOrderLine@1002 : Record 5406;
      ProdOrderRtngLine2@1003 : Record 5409;
      MaxSeq@1004 : Integer;
    BEGIN
      IF NeedsCalculation(
           ProdOrderRtngLine.Status,
           ProdOrderRtngLine."Prod. Order No.",
           ProdOrderRtngLine."Routing Reference No.",
           ProdOrderRtngLine."Routing No.")
      THEN BEGIN
        ProdOrderLine.SETRANGE(Status,ProdOrderRtngLine.Status);
        ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
        ProdOrderLine.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
        ProdOrderLine.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        ProdOrderLine.FIND('-');

        Calculate(ProdOrderLine);
      END;
      ProdOrderRtngLine2.SETRANGE(Status,ProdOrderRtngLine.Status);
      ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
      ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
      ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
      ProdOrderRtngLine2.MODIFYALL("Sequence No. (Actual)",0);
      ProdOrderRtngLine2.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine2."Routing Status"::Finished);

      MaxSeq := ProdOrderRtngLine2.COUNT;

      CASE Direction OF
        Direction::Forward:
          SetRtngLineSequenceForward(ProdOrderLine."Routing Type",ProdOrderRtngLine,MaxSeq,1,FALSE);
        Direction::Backward:
          SetRtngLineSequenceBack(ProdOrderLine."Routing Type",ProdOrderRtngLine,MaxSeq,1,FALSE);
      END;
    END;

    PROCEDURE Calculate@4(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      ProdOrderRtngLine2@1002 : Record 5409;
      CalcScrapFactor@1003 : Decimal;
      CalcScrapQty@1004 : Decimal;
      ScrapFactorThis@1005 : Decimal;
      ScrapQtyThis@1006 : Decimal;
    BEGIN
      IF ProdOrderLine."Routing Type" = ProdOrderLine."Routing Type"::Serial THEN
        SetNextOperations(ProdOrderLine);

      CalcPreviousOperations(ProdOrderLine);
      CalcSequenceBack(ProdOrderLine);
      CalcSequenceForward(ProdOrderLine);

      ProdOrderRtngLine.SETCURRENTKEY(
        Status,"Prod. Order No.","Routing Reference No.","Routing No.","Sequence No. (Backward)");
      ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          IF ProdOrderRtngLine."Next Operation No." <> '' THEN BEGIN
            ProdOrderRtngLine2.SETRANGE(Status,ProdOrderRtngLine.Status);
            ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
            ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
            ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
            ProdOrderRtngLine2.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine2."Routing Status"::Finished);
            ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
            CalcScrapFactor := 0;
            CalcScrapQty := 0;
            IF ProdOrderRtngLine2.FIND('-') THEN
              REPEAT
                ScrapFactorThis :=
                  ProdOrderRtngLine2."Scrap Factor % (Accumulated)";
                ScrapQtyThis :=
                  ProdOrderRtngLine2."Fixed Scrap Qty. (Accum.)";
                IF CalcScrapFactor < ScrapFactorThis THEN
                  CalcScrapFactor := ScrapFactorThis;
                IF CalcScrapQty < ScrapQtyThis THEN
                  CalcScrapQty := ScrapQtyThis;
              UNTIL ProdOrderRtngLine2.NEXT = 0;
          END;
          IF (CalcScrapFactor <> 0) THEN BEGIN
            IF ProdOrderRtngLine."Scrap Factor %" <> 0 THEN
              CalcScrapFactor :=
                ROUND(
                  ((1 + CalcScrapFactor) *
                   (1 + ProdOrderRtngLine."Scrap Factor %" / 100)),0.00001) - 1;
          END ELSE
            CalcScrapFactor :=
              ROUND((1 + ProdOrderRtngLine."Scrap Factor %" / 100),0.00001) - 1;
          CalcScrapQty := CalcScrapQty +
            ProdOrderRtngLine."Fixed Scrap Quantity";
          ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)" := CalcScrapQty;
          ProdOrderRtngLine."Scrap Factor % (Accumulated)" := CalcScrapFactor;
          ProdOrderRtngLine.MODIFY;
        UNTIL ProdOrderRtngLine.NEXT = 0;

      ProdOrderRtngLine.MODIFYALL(Recalculate,FALSE);
      Check(ProdOrderLine);
    END;

    PROCEDURE Check@5(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      ProdOrderRtngLine2@1002 : Record 5409;
      NoOfProcesses@1003 : Integer;
    BEGIN
      ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);

      ProdOrderRtngLine.SETFILTER("Next Operation No.",'%1','');

      NoOfProcesses := ProdOrderRtngLine.COUNT;
      IF NoOfProcesses <> 1 THEN BEGIN
        REPEAT
          InsertInErrList(ProdOrderRtngLine);
        UNTIL ProdOrderRtngLine.NEXT = 0;
        ERROR(
          Text003,
          ProdOrderLine."Prod. Order No.",
          ProdOrderLine."Routing No.",
          NoOfProcesses,
          ErrList);
      END;

      ProdOrderRtngLine.SETFILTER("Previous Operation No.",'%1','');
      ProdOrderRtngLine.SETRANGE("Next Operation No.");
      NoOfProcesses := ProdOrderRtngLine.COUNT;
      IF NoOfProcesses <> 1 THEN BEGIN
        REPEAT
          InsertInErrList(ProdOrderRtngLine);
        UNTIL ProdOrderRtngLine.NEXT = 0;
        ERROR(
          Text004,
          ProdOrderLine."Prod. Order No.",
          ProdOrderLine."Routing No.",
          NoOfProcesses,
          ErrList);
      END;
      ProdOrderRtngLine.SETRANGE("Previous Operation No.");

      ProdOrderRtngLine.SETRANGE(ProdOrderRtngLine."Sequence No. (Backward)",0);
      IF ProdOrderRtngLine.FIND('-') THEN BEGIN
        REPEAT
          InsertInErrList(ProdOrderRtngLine);
        UNTIL ProdOrderRtngLine.NEXT = 0;
        ERROR(
          Text005,
          ProdOrderRtngLine."Routing No.",
          ErrList);
      END;
      ProdOrderRtngLine.SETRANGE("Sequence No. (Backward)");

      ProdOrderRtngLine.SETRANGE("Sequence No. (Forward)",0);
      IF ProdOrderRtngLine.FIND('-') THEN BEGIN
        REPEAT
          InsertInErrList(ProdOrderRtngLine);
        UNTIL ProdOrderRtngLine.NEXT = 0;
        ERROR(
          Text006,
          ProdOrderRtngLine."Routing No.",
          ErrList);
      END;
      ProdOrderRtngLine.SETRANGE("Sequence No. (Forward)");

      ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
        "Routing No.","Sequence No. (Backward)");
      ProdOrderRtngLine.SETFILTER("Previous Operation No.",'<>%1','');

      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          ProdOrderRtngLine2.SETRANGE(Status,ProdOrderRtngLine.Status);
          ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
          ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
          ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
          ProdOrderRtngLine2.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine2."Routing Status"::Finished);
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Previous Operation No.");
          IF NOT ProdOrderRtngLine2.FIND('-') THEN
            ERROR(
              Text007,
              ProdOrderRtngLine."Routing No.");
        UNTIL ProdOrderRtngLine.NEXT = 0;

      ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
        "Routing No.","Sequence No. (Forward)");
      ProdOrderRtngLine.SETFILTER("Next Operation No.",'<>%1','');
      ProdOrderRtngLine.SETRANGE("Operation No.");


      IF ProdOrderRtngLine.FIND('-') THEN
        REPEAT
          ProdOrderRtngLine2.SETRANGE(Status,ProdOrderRtngLine.Status);
          ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
          ProdOrderRtngLine2.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
          ProdOrderRtngLine2.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
          ProdOrderRtngLine2.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine2."Routing Status"::Finished);
          ProdOrderRtngLine2.SETFILTER("Operation No.",ProdOrderRtngLine."Next Operation No.");
          IF NOT ProdOrderRtngLine2.FIND('-') THEN
            ERROR(Text008, ProdOrderRtngLine."Routing No.");
        UNTIL ProdOrderRtngLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}
