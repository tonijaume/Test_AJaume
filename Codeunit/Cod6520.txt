OBJECT Codeunit 6520 Item Tracing Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TrackFilters@1028 : Record 6520;
      FirstLevelEntries@1027 : TEMPORARY Record 6520;
      TempTraceHistory@1000 : TEMPORARY Record 6521;
      SearchCriteria@1013 : 'None,Lot,Serial,Both,Item';
      TempLineNo@1007 : Integer;
      CurrentLevel@1006 : Integer;
      NextLineNo@1001 : Integer;
      CurrentHistoryEntryNo@1002 : Integer;

    PROCEDURE FindRecords@1000000001(VAR TempTrackEntry@1005 : Record 6520;VAR TempTrackEntry2@1004 : Record 6520;SerialNoFilter@1003 : Code[1000];LotNoFilter@1002 : Code[1000];ItemNoFilter@1001 : Code[1000];VariantFilter@1000 : Code[1000];Direction@1006 : 'Forward,Backward';ShowComponents@1007 : 'No,Item-tracked only,All');
    BEGIN
      DeleteTempTables(TempTrackEntry,TempTrackEntry2);
      InitSearchCriteria(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter);
      FirstLevel(TempTrackEntry,SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter,Direction,ShowComponents);
      IF TempLineNo > 0 THEN
        InitTempTable(TempTrackEntry,TempTrackEntry2);
      TempTrackEntry.RESET;
      UpdateHistory(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter,Direction,ShowComponents);
    END;

    PROCEDURE FirstLevel@1(VAR TempTrackEntry@1007 : Record 6520;SerialNoFilter@1006 : Code[1000];LotNoFilter@1005 : Code[1000];ItemNoFilter@1004 : Code[1000];VariantFilter@1003 : Code[1000];Direction@1008 : 'Forward,Backward';ShowComponents@1009 : 'No,Item-tracked only,All');
    VAR
      ItemLedgEntry@1001 : Record 32;
      ItemLedgEntry2@1000 : Record 32;
      ItemApplnEntry@1002 : Record 339;
    BEGIN
      TempLineNo := 0;
      CurrentLevel := 0;

      ItemLedgEntry.RESET;
      CASE SearchCriteria OF
        SearchCriteria::None :
          EXIT;
        SearchCriteria::Serial :
          IF NOT ItemLedgEntry.SETCURRENTKEY("Serial No.") THEN
            IF ItemNoFilter <> '' THEN
              ItemLedgEntry.SETCURRENTKEY("Item No.")
            ELSE
              ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,
                "Location Code","Posting Date","Expiration Date","Lot No.","Serial No.");
        SearchCriteria::Lot,
        SearchCriteria::Both :
          IF NOT ItemLedgEntry.SETCURRENTKEY("Lot No.") THEN
            IF ItemNoFilter <> '' THEN
              ItemLedgEntry.SETCURRENTKEY("Item No.")
            ELSE
              ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,
                "Location Code","Posting Date","Expiration Date","Lot No.","Serial No.");
        SearchCriteria::Item :
          ItemLedgEntry.SETCURRENTKEY("Item No.");
      END;

      ItemLedgEntry.SETFILTER("Lot No.",LotNoFilter);
      ItemLedgEntry.SETFILTER("Serial No.",SerialNoFilter);
      ItemLedgEntry.SETFILTER("Item No.",ItemNoFilter);
      ItemLedgEntry.SETFILTER("Variant Code",VariantFilter);
      IF Direction = Direction::Forward THEN
        ItemLedgEntry.SETRANGE(Positive,TRUE);

      CLEAR(FirstLevelEntries);
      FirstLevelEntries.DELETEALL;
      NextLineNo := 0;
      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          NextLineNo += 1;
          FirstLevelEntries."Line No." := NextLineNo;
          FirstLevelEntries."Item No." := ItemLedgEntry."Item No.";
          FirstLevelEntries."Serial No." := ItemLedgEntry."Serial No.";
          FirstLevelEntries."Lot No." := ItemLedgEntry."Lot No.";
          FirstLevelEntries."Item Ledger Entry No." := ItemLedgEntry."Entry No.";
          FirstLevelEntries.INSERT;
        UNTIL ItemLedgEntry.NEXT = 0;

      CASE SearchCriteria OF
        SearchCriteria::None :
          EXIT;
        SearchCriteria::Serial :
          FirstLevelEntries.SETCURRENTKEY("Serial No.","Item Ledger Entry No.");
        SearchCriteria::Lot,
        SearchCriteria::Both :
          FirstLevelEntries.SETCURRENTKEY("Lot No.","Item Ledger Entry No.");
        SearchCriteria::Item :
          FirstLevelEntries.SETCURRENTKEY("Item No.","Item Ledger Entry No.");
      END;

      FirstLevelEntries.ASCENDING(Direction = Direction::Forward);
      IF FirstLevelEntries.FIND('-') THEN
        REPEAT
          ItemLedgEntry.GET(FirstLevelEntries."Item Ledger Entry No.");
          IF (ItemLedgEntry."Serial No." <> '') OR (ItemLedgEntry."Lot No." <> '') THEN BEGIN
            ItemLedgEntry2 := ItemLedgEntry;

            // Test for Reclass
            IF (Direction = Direction::Backward) AND
              (ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Transfer) AND
              NOT ItemLedgEntry.Positive THEN BEGIN
              ItemApplnEntry.RESET;
              ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.");
              ItemApplnEntry.SETRANGE("Outbound Item Entry No.",ItemLedgEntry2."Entry No.");
              ItemApplnEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry2."Entry No.");
              ItemApplnEntry.SETRANGE("Transferred-from Entry No.",0);
              IF ItemApplnEntry.FIND('-') THEN BEGIN
                ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',ItemLedgEntry2."Entry No.");
                ItemApplnEntry.SETRANGE("Transferred-from Entry No.",ItemApplnEntry."Inbound Item Entry No.");
                IF ItemApplnEntry.FIND('-') THEN BEGIN
                  ItemLedgEntry2.RESET;
                  IF NOT ItemLedgEntry2.GET(ItemApplnEntry."Item Ledger Entry No.") THEN
                    ItemLedgEntry2 := ItemLedgEntry;
                END;
              END;
            END;

            IF SearchCriteria = SearchCriteria::Item THEN
              ItemLedgEntry2.SETRANGE("Item No.",ItemLedgEntry."Item No.");
            TransferData(ItemLedgEntry2,TempTrackEntry);
            IF InsertRecord(TempTrackEntry,0) THEN BEGIN
              FindComponents(ItemLedgEntry2,TempTrackEntry,Direction,ShowComponents,ItemLedgEntry2."Entry No.");
              NextLevel(TempTrackEntry,TempTrackEntry,Direction,ShowComponents,ItemLedgEntry2."Entry No.");
            END;
          END;
        UNTIL (FirstLevelEntries.NEXT = 0) OR (CurrentLevel > 50);
    END;

    PROCEDURE NextLevel@1000000000(VAR TempTrackEntry@1000 : Record 6520;TempTrackEntry2@1004 : Record 6520;Direction@1002 : 'Forward,Backward';ShowComponents@1003 : 'No,Item-tracked only,All';ParentID@1005 : Integer);
    VAR
      ItemLedgEntry@1000000004 : Record 32;
      ItemApplnEntry@1000000005 : Record 339;
      TestTransfer@1000000000 : Boolean;
      TrackNo@1001 : Integer;
    BEGIN
      WITH TempTrackEntry2 DO BEGIN
        IF ExitLevel(TempTrackEntry) THEN
          EXIT;
        CurrentLevel += 1;

        ItemApplnEntry.RESET;
        // Test for if we have reached lowest level possible - if so exit
        IF (Direction = Direction::Backward) AND Positive THEN BEGIN
          ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.");
          ItemApplnEntry.SETRANGE("Inbound Item Entry No.","Item Ledger Entry No.");
          ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Item Ledger Entry No.");
          ItemApplnEntry.SETRANGE("Outbound Item Entry No.",0);
          IF ItemApplnEntry.FIND('-') THEN BEGIN
            CurrentLevel -= 1;
            EXIT;
          END ELSE
            ItemApplnEntry.RESET;
        END;

        IF Positive THEN BEGIN
          ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.");
          ItemApplnEntry.SETRANGE("Inbound Item Entry No.","Item Ledger Entry No.");
        END ELSE BEGIN
          ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.");
          ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Item Ledger Entry No.");
        END;

        IF Direction = Direction::Forward THEN
          ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',"Item Ledger Entry No.")
        ELSE
          ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Item Ledger Entry No.");

        ItemApplnEntry.ASCENDING(Direction = Direction::Forward);
        IF ItemApplnEntry.FIND('-') THEN
          REPEAT
            IF Positive THEN
              TrackNo := ItemApplnEntry."Outbound Item Entry No."
            ELSE
              TrackNo := ItemApplnEntry."Inbound Item Entry No.";

            IF TrackNo <> 0 THEN BEGIN
              IF ItemLedgEntry.GET(TrackNo) THEN BEGIN
                TransferData(ItemLedgEntry,TempTrackEntry);
                IF InsertRecord(TempTrackEntry,ParentID) THEN BEGIN
                  FindComponents(ItemLedgEntry,TempTrackEntry,Direction,ShowComponents,ItemLedgEntry."Entry No.");
                  NextLevel(TempTrackEntry,TempTrackEntry,Direction,ShowComponents,ItemLedgEntry."Entry No.");
                END;
              END;
            END;
          UNTIL (TrackNo = 0) OR (ItemApplnEntry.NEXT = 0);
      END;
      CurrentLevel -= 1;
    END;

    PROCEDURE FindComponents@2(VAR ItemLedgEntry2@1000 : Record 32;VAR TempTrackEntry@1002 : Record 6520;Direction@1003 : 'Forward,Backward';ShowComponents@1004 : 'No,Item-tracked only,All';ParentID@1005 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry2 DO BEGIN
        IF "Prod. Order No." = '' THEN
          EXIT;

        IF (("Entry Type" = "Entry Type"::Consumption) AND (Direction = Direction::Forward) ) OR
          (("Entry Type" = "Entry Type"::Output) AND (Direction = Direction::Backward)) THEN BEGIN
          ItemLedgEntry.RESET;
          ItemLedgEntry.SETCURRENTKEY("Document No.");
          ItemLedgEntry.SETRANGE("Document No.","Document No.");
          ItemLedgEntry.SETRANGE("Prod. Order No.","Prod. Order No.");
          ItemLedgEntry.SETRANGE("Prod. Order Line No.","Prod. Order Line No.");
          ItemLedgEntry.SETFILTER("Entry No.",'<>%1',ParentID);
          IF "Entry Type" = "Entry Type"::Consumption THEN BEGIN
            IF ShowComponents <> ShowComponents::No THEN BEGIN
              ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Consumption);
              ItemLedgEntry.SETRANGE(Positive,FALSE);
              IF ItemLedgEntry.FIND('-') THEN
                REPEAT
                  IF (ShowComponents = ShowComponents::All) OR
                    (ItemLedgEntry."Lot No." <> '') OR
                    (ItemLedgEntry."Serial No." <> '') THEN BEGIN
                    CurrentLevel += 1;
                    TransferData(ItemLedgEntry,TempTrackEntry);
                    IF InsertRecord(TempTrackEntry,ParentID) THEN
                      NextLevel(TempTrackEntry,TempTrackEntry,Direction,ShowComponents,ItemLedgEntry."Entry No.");
                    CurrentLevel -= 1;
                  END;
                UNTIL ItemLedgEntry.NEXT = 0;
              END;
            ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
            ItemLedgEntry.SETRANGE(Positive,TRUE);
          END ELSE BEGIN
            IF ShowComponents = ShowComponents::No THEN
              EXIT;
            ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Consumption);
            ItemLedgEntry.SETRANGE(Positive,FALSE);
          END;
          CurrentLevel += 1;
          IF ItemLedgEntry.FIND('-') THEN
            REPEAT
              IF (ShowComponents = ShowComponents::All) OR
                (ItemLedgEntry."Lot No." <> '') OR
                (ItemLedgEntry."Serial No." <> '') THEN BEGIN
                TransferData(ItemLedgEntry,TempTrackEntry);
                IF InsertRecord(TempTrackEntry,ParentID) THEN
                  NextLevel(TempTrackEntry,TempTrackEntry,Direction,ShowComponents,ItemLedgEntry."Entry No.");
              END;
            UNTIL ItemLedgEntry.NEXT = 0;
          CurrentLevel -= 1;
        END;
      END;
    END;

    PROCEDURE InsertRecord@1000000004(VAR TempTrackEntry@1002 : Record 6520;ParentID@1003 : Integer) : Boolean;
    VAR
      TempTrackEntry2@1004 : Record 6520;
      ProductionOrder@1000 : Record 5405;
      RecRef@1001 : RecordRef;
      ItemLedgerEntry@1005 : Record 32;
      Job@1006 : Record 167;
    BEGIN
      WITH TempTrackEntry DO BEGIN
        TempTrackEntry2 := TempTrackEntry;
        RESET;
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.","Item Ledger Entry No.");
        IF CurrentLevel = 1 THEN BEGIN
          SETRANGE("Parent Item Ledger Entry No.",ParentID);
          SETFILTER(Level,'<>%1',CurrentLevel);
        END;

        IF (CurrentLevel > 1) OR NOT FIND('-') THEN BEGIN
          TempTrackEntry2.RESET;
          TempTrackEntry := TempTrackEntry2;
          TempLineNo += 1;
          "Line No." := TempLineNo;
          SetRecordID(TempTrackEntry);
          "Parent Item Ledger Entry No." := ParentID;
          IF FORMAT("Record Identifier") = '' THEN
            Description := STRSUBSTNO('%1 %2',TempTrackEntry."Entry Type","Document No.")
          ELSE BEGIN
            IF RecRef.GET("Record Identifier") THEN BEGIN
              IF RecRef.NUMBER = DATABASE::"Production Order" THEN BEGIN
                RecRef.SETTABLE(ProductionOrder);
                Description := STRSUBSTNO('%1 %2 %3 %4',ProductionOrder.Status,RecRef.CAPTION,TempTrackEntry."Entry Type","Document No."
      );
              END;
              IF RecRef.NUMBER = DATABASE::"Item Ledger Entry" THEN BEGIN
                RecRef.SETTABLE(ItemLedgerEntry);
                IF ItemLedgerEntry."Job No." <> '' THEN BEGIN
                  Job.GET(ItemLedgerEntry."Job No.");
                  Description := FORMAT(STRSUBSTNO('%1 %2',Job.TABLECAPTION,ItemLedgerEntry."Job No."),-50);
                END;
              END;
              IF Description = '' THEN
                Description := STRSUBSTNO('%1 %2',RecRef.CAPTION,"Document No.");
             END;
          END;
          INSERT;
          EXIT(TRUE);
        END ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE InitTempTable@3(VAR TempTrackEntry@1000 : Record 6520;VAR TempTrackEntry2@1001 : Record 6520);
    BEGIN
      TempTrackEntry2.RESET;
      TempTrackEntry2.DELETEALL;
      TempTrackEntry.RESET;
      TempTrackEntry.SETRANGE(Level,0);
      IF TempTrackEntry.FIND('-') THEN
        REPEAT
          TempTrackEntry2 := TempTrackEntry;
          TempTrackEntry2.INSERT;
        UNTIL TempTrackEntry.NEXT = 0;
    END;

    PROCEDURE DeleteTempTables@1000000002(VAR TempTrackEntry@1002 : Record 6520;VAR TempTrackEntry2@1001 : Record 6520);
    BEGIN
      CLEAR(TempTrackEntry);
      IF NOT TempTrackEntry.ISEMPTY THEN
        TempTrackEntry.DELETEALL;

      CLEAR(TempTrackEntry2);
      IF NOT TempTrackEntry2.ISEMPTY THEN
        TempTrackEntry2.DELETEALL;
    END;

    PROCEDURE ExpandAll@1000000009(VAR TempTrackEntry@1001 : Record 6520;VAR TempTrackEntry2@1000 : Record 6520);
    BEGIN
      TempTrackEntry2.RESET;
      TempTrackEntry2.DELETEALL;
      TempTrackEntry.RESET;
      IF TempTrackEntry.FINDSET THEN
        REPEAT
          TempTrackEntry2 := TempTrackEntry;
          TempTrackEntry2.INSERT;
        UNTIL TempTrackEntry.NEXT = 0;
    END;

    PROCEDURE IsExpanded@5(ActualTrackingLine@1000 : Record 6520;VAR TempTrackEntry2@1001 : Record 6520) : Boolean;
    VAR
      xTrackEntry@1002 : Record 6520;
      Found@1003 : Boolean;
    BEGIN
      xTrackEntry.COPY(TempTrackEntry2);
      TempTrackEntry2.RESET;
      TempTrackEntry2 := ActualTrackingLine;
      Found := (TempTrackEntry2.NEXT <> 0);
      IF Found THEN
        Found := (TempTrackEntry2.Level > ActualTrackingLine.Level);
      TempTrackEntry2.COPY(xTrackEntry);
      EXIT(Found);
    END;

    PROCEDURE HasChildren@6(ActualTrackingLine@1000 : Record 6520;VAR TempTrackEntry@1001 : Record 6520) : Boolean;
    BEGIN
      TempTrackEntry.RESET;
      TempTrackEntry := ActualTrackingLine;
      IF TempTrackEntry.NEXT = 0 THEN
        EXIT(FALSE)
      ELSE
        EXIT(TempTrackEntry.Level > ActualTrackingLine.Level);
    END;

    PROCEDURE ToggleExpandCollapse@1000000005(TempRec@1002 : Record 6520;VAR TempTrackEntry@1000 : Record 6520;VAR TempTrackEntry2@1001 : Record 6520;VAR ActualExpansionStatus@1003 : 'Has Children,Expanded,No Children');
    VAR
      xTrackEntry@1004 : Record 6520;
    BEGIN
      WITH TempRec DO BEGIN
        xTrackEntry.COPY(TempTrackEntry2);
        TempTrackEntry2.RESET;
        IF ActualExpansionStatus = 0 THEN BEGIN // Has children, but not expanded
          TempTrackEntry.SETRANGE(Level,Level,Level + 1);
          TempTrackEntry := TempRec;
          IF TempTrackEntry.NEXT <> 0 THEN
            REPEAT
              IF TempTrackEntry.Level > Level THEN BEGIN
                TempTrackEntry2 := TempTrackEntry;
                IF TempTrackEntry2.INSERT THEN;
              END;
            UNTIL (TempTrackEntry.NEXT = 0) OR (TempTrackEntry.Level = Level);
        END ELSE
          IF ActualExpansionStatus = 1 THEN BEGIN // Has children and is already expanded
            TempTrackEntry2 := TempRec;
            WHILE (TempTrackEntry2.NEXT <> 0) AND (TempTrackEntry2.Level > Level) DO
              TempTrackEntry2.DELETE;
          END;
        TempTrackEntry2.COPY(xTrackEntry);
      END;
    END;

    PROCEDURE TransferData@1000000003(VAR ItemLedgEntry@1000000000 : Record 32;VAR TempTrackEntry@1000 : Record 6520);
    VAR
      Customer@1000000002 : Record 18;
      Vendor@1000000003 : Record 23;
      ValueEntry@1001 : Record 5802;
    BEGIN
      TempTrackEntry.INIT;
      TempTrackEntry."Line No." := 9999999;
      TempTrackEntry.Level := CurrentLevel;
      TempTrackEntry."Item No." := ItemLedgEntry."Item No.";
      TempTrackEntry."Item Description" := GetItemDescription(ItemLedgEntry."Item No.");
      TempTrackEntry."Posting Date" := ItemLedgEntry."Posting Date";
      TempTrackEntry."Entry Type" := ItemLedgEntry."Entry Type";
      TempTrackEntry."Source Type" := ItemLedgEntry."Source Type";
      TempTrackEntry."Source No." := ItemLedgEntry."Source No.";
      TempTrackEntry."Source Name" := '';
      CASE TempTrackEntry."Source Type" OF
        TempTrackEntry."Source Type"::Customer :
          IF Customer.GET(TempTrackEntry."Source No.") THEN
            TempTrackEntry."Source Name" := Customer.Name;
        TempTrackEntry."Source Type"::Vendor :
          IF Vendor.GET(TempTrackEntry."Source No.") THEN
            TempTrackEntry."Source Name" := Vendor.Name;
      END;
      TempTrackEntry."Document No." := ItemLedgEntry."Document No.";
      TempTrackEntry.Description := ItemLedgEntry.Description;
      TempTrackEntry."Location Code" := ItemLedgEntry."Location Code";
      TempTrackEntry.Quantity := ItemLedgEntry.Quantity;
      TempTrackEntry."Remaining Quantity" := ItemLedgEntry."Remaining Quantity";
      TempTrackEntry.Open := ItemLedgEntry.Open;
      TempTrackEntry.Positive := ItemLedgEntry.Positive;
      TempTrackEntry."Variant Code" := ItemLedgEntry."Variant Code";
      TempTrackEntry."Serial No." := ItemLedgEntry."Serial No.";
      TempTrackEntry."Lot No." := ItemLedgEntry."Lot No.";
      TempTrackEntry."Item Ledger Entry No." := ItemLedgEntry."Entry No.";

      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Document No.");
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
      IF NOT ValueEntry.FINDFIRST THEN
        CLEAR(ValueEntry);
      TempTrackEntry."Created by" := ValueEntry."User ID";
      TempTrackEntry."Created on" := ValueEntry."Posting Date";
    END;

    PROCEDURE InitSearchCriteria@1000000006(SerialNoFilter@1003 : Code[1000];LotNoFilter@1002 : Code[1000];ItemNoFilter@1001 : Code[1000];VariantFilter@1000 : Code[1000]);
    BEGIN
      IF (SerialNoFilter = '') AND (LotNoFilter = '') AND (ItemNoFilter = '') THEN
        SearchCriteria := SearchCriteria::None
      ELSE
        IF LotNoFilter <> '' THEN BEGIN
          IF SerialNoFilter = '' THEN
            SearchCriteria := SearchCriteria::Lot
          ELSE
            SearchCriteria := SearchCriteria::Both;
        END ELSE
          IF SerialNoFilter <> '' THEN
            SearchCriteria := SearchCriteria::Serial
          ELSE
            IF ItemNoFilter <> '' THEN
              SearchCriteria := SearchCriteria::Item;
    END;

    PROCEDURE InitSearchParm@1000000007(VAR Rec@1001 : Record 6520;VAR SerialNoFilter@1003 : Code[1000];VAR LotNoFilter@1002 : Code[1000];VAR ItemNoFilter@1004 : Code[1000];VAR VariantFilter@1000 : Code[1000]);
    VAR
      ItemTrackingEntry@1005 : Record 6520;
    BEGIN
      WITH Rec DO BEGIN
        ItemTrackingEntry.SETRANGE("Serial No.","Serial No.");
        ItemTrackingEntry.SETRANGE("Lot No.","Lot No.");
        ItemTrackingEntry.SETRANGE("Item No.","Item No.");
        ItemTrackingEntry.SETRANGE("Variant Code","Variant Code");
        SerialNoFilter := ItemTrackingEntry.GETFILTER("Serial No.");
        LotNoFilter := ItemTrackingEntry.GETFILTER("Lot No.");
        ItemNoFilter := ItemTrackingEntry.GETFILTER("Item No.");
        VariantFilter := ItemTrackingEntry.GETFILTER("Variant Code");
      END;
    END;

    PROCEDURE SetRecordID@1000000010(VAR TrackingEntry@1000000010 : Record 6520);
    VAR
      ItemLedgEntry@1000 : Record 32;
      PurchRcptHeader@1000000006 : Record 120;
      PurchInvHeader@1000000005 : Record 122;
      PurchCrMemoHeader@1000000004 : Record 124;
      SalesShptHeader@1000000003 : Record 110;
      SalesInvHeader@1000000002 : Record 112;
      SalesCrMemoHeader@1000000001 : Record 114;
      ReturnShipHeader@1001 : Record 6650;
      ReturnRcptHeader@1002 : Record 6660;
      TransShipHeader@1000000007 : Record 5744;
      TransRcptHeader@1000000008 : Record 5746;
      ProductionOrder@1000000000 : Record 5405;
      ServShptHeader@1005 : Record 5990;
      ServInvHeader@1004 : Record 5992;
      ServCrMemoHeader@1003 : Record 5994;
      RecRef@1000000011 : RecordRef;
    BEGIN
      WITH TrackingEntry DO BEGIN
        CLEAR(RecRef);

        CASE "Entry Type" OF
          "Entry Type"::Purchase:
            IF NOT Positive THEN BEGIN
              IF PurchCrMemoHeader.GET("Document No.") THEN BEGIN
                RecRef.GETTABLE(PurchCrMemoHeader);
                "Record Identifier" := RecRef.RECORDID;
              END ELSE
                IF ReturnShipHeader.GET("Document No.") THEN BEGIN
                  RecRef.GETTABLE(ReturnShipHeader);
                  "Record Identifier" := RecRef.RECORDID;
                END ELSE
                  IF ItemLedgEntry.GET("Item Ledger Entry No.") THEN BEGIN
                    RecRef.GETTABLE(ItemLedgEntry);
                    "Record Identifier" := RecRef.RECORDID;
                  END;
            END ELSE
              IF PurchRcptHeader.GET("Document No.") THEN BEGIN
                RecRef.GETTABLE(PurchRcptHeader);
                "Record Identifier" := RecRef.RECORDID;
              END ELSE
                IF PurchInvHeader.GET("Document No.") THEN BEGIN
                  RecRef.GETTABLE(PurchInvHeader);
                  "Record Identifier" := RecRef.RECORDID;
                END ELSE
                  IF ItemLedgEntry.GET("Item Ledger Entry No.") THEN BEGIN
                    RecRef.GETTABLE(ItemLedgEntry);
                    "Record Identifier" := RecRef.RECORDID;
                  END;
          "Entry Type"::Sale:
            IF IsServiceDocument("Item Ledger Entry No.",ItemLedgEntry) THEN
              CASE ItemLedgEntry."Document Type" OF
                ItemLedgEntry."Document Type"::"Service Shipment":
                  IF ServShptHeader.GET("Document No.") THEN BEGIN
                    RecRef.GETTABLE(ServShptHeader);
                    "Record Identifier" := RecRef.RECORDID;
                  END ELSE
                    BEGIN
                      RecRef.GETTABLE(ItemLedgEntry);
                      "Record Identifier" := RecRef.RECORDID;
                    END;
                ItemLedgEntry."Document Type"::"Service Invoice":
                  IF ServInvHeader.GET("Document No.") THEN BEGIN
                    RecRef.GETTABLE(ServInvHeader);
                    "Record Identifier" := RecRef.RECORDID;
                  END ELSE BEGIN
                    RecRef.GETTABLE(ItemLedgEntry);
                    "Record Identifier" := RecRef.RECORDID;
                  END;
                ItemLedgEntry."Document Type"::"Service Credit Memo":
                  IF ServCrMemoHeader.GET("Document No.") THEN BEGIN
                    RecRef.GETTABLE(ServCrMemoHeader);
                    "Record Identifier" := RecRef.RECORDID;
                  END ELSE BEGIN
                    RecRef.GETTABLE(ItemLedgEntry);
                    "Record Identifier" := RecRef.RECORDID;
                  END;
              END
            ELSE
              IF Positive THEN BEGIN
                IF SalesCrMemoHeader.GET("Document No.") THEN BEGIN
                  RecRef.GETTABLE(SalesCrMemoHeader);
                  "Record Identifier" := RecRef.RECORDID;
                END ELSE
                  IF ReturnRcptHeader.GET("Document No.") THEN BEGIN
                    RecRef.GETTABLE(ReturnRcptHeader);
                    "Record Identifier" := RecRef.RECORDID;
                  END ELSE
                    IF ItemLedgEntry.GET("Item Ledger Entry No.") THEN BEGIN
                      RecRef.GETTABLE(ItemLedgEntry);
                      "Record Identifier" := RecRef.RECORDID;
                    END;
              END ELSE
                IF SalesShptHeader.GET("Document No.") THEN BEGIN
                  RecRef.GETTABLE(SalesShptHeader);
                  "Record Identifier" := RecRef.RECORDID;
                END ELSE
                  IF SalesInvHeader.GET("Document No.") THEN BEGIN
                    RecRef.GETTABLE(SalesInvHeader);
                    "Record Identifier" := RecRef.RECORDID;
                  END ELSE
                    IF ItemLedgEntry.GET("Item Ledger Entry No.") THEN BEGIN
                      RecRef.GETTABLE(ItemLedgEntry);
                      "Record Identifier" := RecRef.RECORDID;
                    END;
          "Entry Type"::"Positive Adjmt.",
          "Entry Type"::"Negative Adjmt.":
            IF ItemLedgEntry.GET("Item Ledger Entry No.") THEN BEGIN
              RecRef.GETTABLE(ItemLedgEntry);
              "Record Identifier" := RecRef.RECORDID;
            END;
          "Entry Type"::Transfer:
            IF TransShipHeader.GET("Document No.") THEN BEGIN
              RecRef.GETTABLE(TransShipHeader);
              "Record Identifier" := RecRef.RECORDID;
            END ELSE
              IF TransRcptHeader.GET("Document No.") THEN BEGIN
                RecRef.GETTABLE(TransRcptHeader);
                "Record Identifier" := RecRef.RECORDID;
              END ELSE
                IF ItemLedgEntry.GET("Item Ledger Entry No.") THEN BEGIN
                  RecRef.GETTABLE(ItemLedgEntry);
                  "Record Identifier" := RecRef.RECORDID;
                END;
          "Entry Type"::Consumption,
          "Entry Type"::Output:
            BEGIN
              ProductionOrder.SETFILTER(Status,'>=%1',ProductionOrder.Status::Released);
              ProductionOrder.SETRANGE("No.","Document No.");
              IF ProductionOrder.FIND('-') THEN BEGIN
                RecRef.GETTABLE(ProductionOrder);
                "Record Identifier" := RecRef.RECORDID;
              END;
            END;
        END;
      END;
    END;

    PROCEDURE ShowDocument@1000000008(RecordID@1000000010 : RecordID);
    VAR
      ItemLedgEntry@1000 : Record 32;
      SalesShptHeader@1000000003 : Record 110;
      SalesInvHeader@1000000000 : Record 112;
      SalesCrMemoHeader@1000000002 : Record 114;
      ServShptHeader@1005 : Record 5990;
      ServInvHeader@1004 : Record 5992;
      ServCrMemoHeader@1003 : Record 5994;
      PurchRcptHeader@1000000006 : Record 120;
      PurchInvHeader@1000000005 : Record 122;
      PurchCrMemoHeader@1000000004 : Record 124;
      ReturnShipHeader@1002 : Record 6650;
      ReturnRcptHeader@1001 : Record 6660;
      TransShipHeader@1000000009 : Record 5744;
      TransRcptHeader@1000000008 : Record 5746;
      ProductionOrder@1000000001 : Record 5405;
      RecRef@1000000007 : RecordRef;
    BEGIN
      IF FORMAT(RecordID) = '' THEN
        EXIT;

      RecRef := RecordID.GETRECORD;

      CASE RecordID.TABLENO OF
        DATABASE::"Item Ledger Entry" :
          BEGIN
            RecRef.SETTABLE(ItemLedgEntry);
            FORM.RUNMODAL(FORM::"Item Ledger Entries",ItemLedgEntry);
          END;
        DATABASE::"Sales Shipment Header" :
          BEGIN
            RecRef.SETTABLE(SalesShptHeader);
            FORM.RUNMODAL(FORM::"Posted Sales Shipment",SalesShptHeader);
          END;
        DATABASE::"Sales Invoice Header" :
          BEGIN
            RecRef.SETTABLE(SalesInvHeader);
            FORM.RUNMODAL(FORM::"Posted Sales Invoice",SalesInvHeader);
          END;
        DATABASE::"Sales Cr.Memo Header" :
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            FORM.RUNMODAL(FORM::"Posted Sales Credit Memo",SalesCrMemoHeader);
          END;
        DATABASE::"Service Shipment Header" :
          BEGIN
            RecRef.SETTABLE(ServShptHeader);
            FORM.RUNMODAL(FORM::"Posted Service Shipment",ServShptHeader);
          END;
        DATABASE::"Service Invoice Header" :
          BEGIN
            RecRef.SETTABLE(ServInvHeader);
            FORM.RUNMODAL(FORM::"Posted Service Invoice",ServInvHeader);
          END;
        DATABASE::"Service Cr.Memo Header" :
          BEGIN
            RecRef.SETTABLE(ServCrMemoHeader);
            FORM.RUNMODAL(FORM::"Posted Service Credit Memo",ServCrMemoHeader);
          END;
        DATABASE::"Purch. Rcpt. Header" :
          BEGIN
            RecRef.SETTABLE(PurchRcptHeader);
            FORM.RUNMODAL(FORM::"Posted Purchase Receipt",PurchRcptHeader);
          END;
        DATABASE::"Purch. Inv. Header" :
          BEGIN
            RecRef.SETTABLE(PurchInvHeader);
            FORM.RUNMODAL(FORM::"Posted Purchase Invoice",PurchInvHeader);
          END;
        DATABASE::"Purch. Cr. Memo Hdr." :
          BEGIN
            RecRef.SETTABLE(PurchCrMemoHeader);
            FORM.RUNMODAL(FORM::"Posted Purchase Credit Memo",PurchCrMemoHeader);
          END;
        DATABASE::"Return Shipment Header":
          BEGIN
            RecRef.SETTABLE(ReturnShipHeader);
            FORM.RUNMODAL(FORM::"Posted Return Shipment",ReturnShipHeader);
          END;
        DATABASE::"Return Receipt Header":
          BEGIN
            RecRef.SETTABLE(ReturnRcptHeader);
            FORM.RUNMODAL(FORM::"Posted Return Receipt",ReturnRcptHeader);
          END;
        DATABASE::"Transfer Shipment Header" :
          BEGIN
            RecRef.SETTABLE(TransShipHeader);
            FORM.RUNMODAL(FORM::"Posted Transfer Shipment",TransShipHeader);
          END;
        DATABASE::"Transfer Receipt Header" :
          BEGIN
            RecRef.SETTABLE(TransRcptHeader);
            FORM.RUNMODAL(FORM::"Posted Transfer Receipt",TransRcptHeader);
          END;
        DATABASE::"Production Order" :
          BEGIN
            RecRef.SETTABLE(ProductionOrder);
            IF ProductionOrder.Status = ProductionOrder.Status::Released THEN
              FORM.RUNMODAL(FORM::"Released Production Order",ProductionOrder)
            ELSE
              IF ProductionOrder.Status = ProductionOrder.Status::Finished THEN
                FORM.RUNMODAL(FORM::"Finished Production Order",ProductionOrder);
          END;
      END;
    END;

    PROCEDURE SetExpansionStatus@16(Rec@1001 : Record 6520;VAR TempTrackEntry@1002 : Record 6520;VAR TempTrackEntry2@1004 : Record 6520;VAR ActualExpansionStatus@1000 : 'Has Children,Expanded,No Children');
    BEGIN
      IF IsExpanded(Rec,TempTrackEntry2) THEN
        ActualExpansionStatus := ActualExpansionStatus::Expanded
      ELSE
        IF HasChildren(Rec,TempTrackEntry) THEN
          ActualExpansionStatus := ActualExpansionStatus::"Has Children"
        ELSE
          ActualExpansionStatus := ActualExpansionStatus::"No Children";
    END;

    PROCEDURE GetItem@8(VAR Item@1000 : Record 27;ItemNo@1001 : Code[20]);
    BEGIN
      IF ItemNo <> Item."No." THEN
        IF NOT Item.GET(ItemNo) THEN
          CLEAR(Item);
    END;

    PROCEDURE GetItemDescription@4(ItemNo@1000 : Code[20]) : Text[50];
    VAR
      Item@1001 : Record 27;
    BEGIN
      GetItem(Item,ItemNo);
      EXIT(Item.Description);
    END;

    PROCEDURE GetItemTrackingCode@9(VAR ItemTrackingCode@1000 : Record 6502;ItemNo@1002 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      GetItem(Item,ItemNo);
      IF Item."Item Tracking Code" <> '' THEN BEGIN
        IF NOT ItemTrackingCode.GET(Item."Item Tracking Code") THEN
          CLEAR(ItemTrackingCode);
      END ELSE
        CLEAR(ItemTrackingCode);
    END;

    PROCEDURE SpecificTracking@10(ItemNo@1003 : Code[20];SerialNo@1001 : Code[20];LotNo@1002 : Code[20]) : Boolean;
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      GetItemTrackingCode(ItemTrackingCode,ItemNo);
      IF ((SerialNo <> '') AND ItemTrackingCode."SN Specific Tracking") OR
        ((LotNo <> '') AND ItemTrackingCode."Lot Specific Tracking") THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE ExitLevel@7(TempTrackEntry@1000 : Record 6520) : Boolean;
    BEGIN
      WITH TempTrackEntry DO BEGIN
        IF ("Serial No." = '') AND ("Lot No." = '') THEN
          EXIT(TRUE);
        IF CurrentLevel > 50 THEN
          EXIT(TRUE);
        IF NOT SpecificTracking("Item No.","Serial No.","Lot No.") THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateHistory@11(SerialNoFilter@1005 : Code[1000];LotNoFilter@1004 : Code[1000];ItemNoFilter@1003 : Code[1000];VariantFilter@1002 : Code[1000];TraceMethod@1001 : 'Origin->Usage,Usage->Origin';ShowComponents@1000 : 'No,Item-tracked only,All') OK : Boolean;
    VAR
      LevelCount@1006 : Integer;
    BEGIN
      WITH TempTraceHistory DO BEGIN
        RESET;
        SETFILTER("Entry No.",'>%1',CurrentHistoryEntryNo);
        DELETEALL;

        REPEAT
          INIT;
          "Entry No." := CurrentHistoryEntryNo + 1;
          Level := LevelCount;

          "Serial No. Filter" := COPYSTR(SerialNoFilter,1,MAXSTRLEN("Serial No. Filter"));
          "Lot No. Filter" := COPYSTR(LotNoFilter,1,MAXSTRLEN("Lot No. Filter"));
          "Item No. Filter" := COPYSTR(ItemNoFilter,1,MAXSTRLEN("Item No. Filter"));
          "Variant Filter" := COPYSTR(VariantFilter,1,MAXSTRLEN("Variant Filter"));

          IF Level = 0 THEN BEGIN
            "Trace Method" := TraceMethod;
            "Show Components" := ShowComponents;
          END;
          INSERT;

          LevelCount +=1;
          SerialNoFilter := DELSTR(SerialNoFilter,1,MAXSTRLEN("Serial No. Filter"));
          LotNoFilter := DELSTR(LotNoFilter,1,MAXSTRLEN("Lot No. Filter"));
          ItemNoFilter := DELSTR(ItemNoFilter,1,MAXSTRLEN("Item No. Filter"));
          VariantFilter := DELSTR(VariantFilter,1,MAXSTRLEN("Variant Filter"));
        UNTIL (SerialNoFilter = '') AND (LotNoFilter = '') AND (ItemNoFilter = '') AND (VariantFilter = '');
        CurrentHistoryEntryNo := "Entry No.";
      END;
      OK := TRUE;
    END;

    PROCEDURE RecallHistory@14(Steps@1000 : Integer;VAR TempTrackEntry@1002 : Record 6520;VAR TempTrackEntry2@1001 : Record 6520;VAR SerialNoFilter@1008 : Code[1000];VAR LotNoFilter@1007 : Code[1000];VAR ItemNoFilter@1006 : Code[1000];VAR VariantFilter@1005 : Code[1000];VAR TraceMethod@1004 : 'Origin->Usage,Usage->Origin';VAR ShowComponents@1003 : 'No,Item-tracked only,All') : Boolean;
    BEGIN
      IF NOT RetrieveHistoryData(CurrentHistoryEntryNo + Steps,
        SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter,TraceMethod,ShowComponents)
      THEN
        EXIT(FALSE);
      DeleteTempTables(TempTrackEntry,TempTrackEntry2);
      InitSearchCriteria(SerialNoFilter,LotNoFilter,ItemNoFilter,VariantFilter);
      FirstLevel(TempTrackEntry,SerialNoFilter,LotNoFilter,ItemNoFilter,
        VariantFilter,TraceMethod,ShowComponents);
      IF TempLineNo > 0 THEN
        InitTempTable(TempTrackEntry,TempTrackEntry2);
      TempTrackEntry.RESET;
      CurrentHistoryEntryNo := CurrentHistoryEntryNo + Steps;
      EXIT(TRUE);
    END;

    PROCEDURE RetrieveHistoryData@15(EntryNo@1006 : Integer;VAR SerialNoFilter@1005 : Code[1000];VAR LotNoFilter@1004 : Code[1000];VAR ItemNoFilter@1003 : Code[1000];VAR VariantFilter@1002 : Code[1000];VAR TraceMethod@1001 : 'Origin->Usage,Usage->Origin';VAR ShowComponents@1000 : 'No,Item-tracked only,All') : Boolean;
    BEGIN
      WITH TempTraceHistory DO BEGIN
        RESET;
        SETCURRENTKEY("Entry No.",Level);
        SETRANGE("Entry No.",EntryNo);
        IF NOT FINDSET THEN
          EXIT(FALSE);
        REPEAT
          IF Level = 0 THEN BEGIN
            SerialNoFilter := "Serial No. Filter";
            LotNoFilter := "Lot No. Filter";
            ItemNoFilter := "Item No. Filter";
            VariantFilter := "Variant Filter";
            TraceMethod := "Trace Method";
            ShowComponents := "Show Components";
          END ELSE BEGIN
            SerialNoFilter := SerialNoFilter + "Serial No. Filter";
            LotNoFilter := LotNoFilter + "Lot No. Filter";
            ItemNoFilter := ItemNoFilter + "Item No. Filter";
            VariantFilter := VariantFilter + "Variant Filter";
          END;
        UNTIL NEXT = 0;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetHistoryStatus@12(VAR PreviousExists@1001 : Boolean;VAR NextExists@1000 : Boolean);
    BEGIN
      TempTraceHistory.RESET;
      TempTraceHistory.SETFILTER("Entry No.",'>%1',CurrentHistoryEntryNo);
      NextExists := NOT TempTraceHistory.ISEMPTY;
      TempTraceHistory.SETFILTER("Entry No.",'<%1',CurrentHistoryEntryNo);
      PreviousExists := NOT TempTraceHistory.ISEMPTY;
    END;

    LOCAL PROCEDURE IsServiceDocument@13(ItemLedgEntryNo@1000 : Integer;VAR ItemLedgEntry@1002 : Record 32) : Boolean;
    BEGIN
      WITH ItemLedgEntry DO
        IF GET(ItemLedgEntryNo) THEN
          IF "Document Type" IN [
            "Document Type"::"Service Shipment","Document Type"::"Service Invoice","Document Type"::"Service Credit Memo"]
          THEN
            EXIT(TRUE);
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}
