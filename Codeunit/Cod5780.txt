OBJECT Codeunit 5780 Whse. Cross-Dock Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SalesLine@1000 : Record 37;
      TransLine@1007 : Record 5741;
      PurchaseLine@1006 : Record 39;
      ProdOrderComp@1008 : Record 5407;
      Location@1009 : Record 14;
      WhseMgt@1002 : Codeunit 5775;
      CrossDockDate@1001 : Date;
      QtyNeededBase2@1003 : Decimal;
      QtyOnPickBase2@1004 : Decimal;
      QtyPickedBase2@1005 : Decimal;
      SourceType2@1010 : Integer;
      UseCrossDocking@1011 : Boolean;
      TemplateName@1014 : Code[10];
      NameNo@1013 : Code[20];
      LocationCode@1012 : Code[10];

    PROCEDURE GetUseCrossDock@1(VAR UseCrossDock@1000 : Boolean;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20]);
    VAR
      Item@1003 : Record 27;
      SKU@1004 : Record 5700;
      Location@1005 : Record 14;
    BEGIN
      Location.GET(LocationCode);
      Item.GET(ItemNo);
      IF SKU.GET(LocationCode,ItemNo) THEN
        Item."Use Cross-Docking" := SKU."Use Cross-Docking";

      IF Item."Use Cross-Docking" AND Location."Use Cross-Docking" THEN
        UseCrossDock := TRUE
      ELSE
        UseCrossDock := FALSE;
    END;

    PROCEDURE CalculateCrossDockLines@2(VAR CrossDockOpp@1000 : Record 5768;NewTemplateName@1001 : Code[10];NewNameNo@1002 : Code[20];NewLocationCode@1003 : Code[10]);
    VAR
      WhseRcptLine@1004 : Record 7317;
      QtyToCrossDockBase@1005 : Decimal;
      QtyNeededBase@1006 : Decimal;
      QtyOnCrossDockBase@1007 : Decimal;
    BEGIN
      SetTemplate(NewTemplateName,NewNameNo,NewLocationCode);

      WITH WhseRcptLine DO BEGIN
        IF TemplateName = '' THEN BEGIN
          SETRANGE("No.",NameNo);
          SETRANGE("Location Code",LocationCode);
          SETFILTER("Qty. to Receive",'>0');
          IF FIND('-') THEN
            REPEAT
              GetUseCrossDock(UseCrossDocking,"Location Code","Item No.");
              IF UseCrossDocking THEN BEGIN
                GetSourceLine("Source Type","Source Subtype","Source No.","Source Line No.");
                CalculateCrossDockLine(
                  CrossDockOpp,"Item No.",
                  "Variant Code",
                  QtyNeededBase,QtyToCrossDockBase,QtyOnCrossDockBase,
                  "Line No.",
                  "Qty. to Receive (Base)");
                VALIDATE("Qty. to Cross-Dock",ROUND(QtyToCrossDockBase / "Qty. per Unit of Measure",0.00001));
                MODIFY;
              END;
            UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CalculateCrossDockLine@3(VAR CrossDockOpp@1000 : Record 5768;ItemNo@1004 : Code[20];VariantCode@1003 : Code[10];VAR QtyNeededBase@1006 : Decimal;VAR QtyToCrossDockBase@1005 : Decimal;VAR QtyOnCrossDockBase@1001 : Decimal;LineNo@1010 : Integer;QtyToHandleBase@1011 : Decimal);
    VAR
      QtyOnPickBase@1007 : Decimal;
      QtyPickedBase@1013 : Decimal;
      Dummy@1012 : Decimal;
    BEGIN
      CrossDockOpp.SETRANGE("Source Template Name",TemplateName);
      CrossDockOpp.SETRANGE("Source Name/No.",NameNo);
      CrossDockOpp.SETRANGE("Location Code",LocationCode);
      CrossDockOpp.SETRANGE("Source Line No.",LineNo);
      CrossDockOpp.DELETEALL;

      CalculateCrossDock(
        CrossDockOpp,ItemNo,VariantCode,LocationCode,QtyNeededBase,QtyOnPickBase,QtyPickedBase,LineNo);

      CalcCrossDockedItems(ItemNo,VariantCode,'',LocationCode,Dummy,QtyOnCrossDockBase);

      QtyToCrossDockBase := QtyNeededBase - QtyOnCrossDockBase;
      IF QtyToHandleBase < QtyToCrossDockBase THEN
        QtyToCrossDockBase := QtyToHandleBase;
      IF QtyToCrossDockBase < 0 THEN
        QtyToCrossDockBase := 0;
    END;

    PROCEDURE CalculateCrossDock@4(VAR CrossDockOpp@1000 : Record 5768;ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];LocationCode@1003 : Code[10];VAR QtyNeededSumBase@1007 : Decimal;VAR QtyOnPickSumBase@1008 : Decimal;VAR QtyPickedSumBase@1013 : Decimal;LineNo@1009 : Integer);
    VAR
      WhseRequest@1004 : Record 5765;
      QtyOnPick@1005 : Decimal;
      QtyOnPickBase@1006 : Decimal;
      QtyPicked@1014 : Decimal;
      QtyPickedBase@1012 : Decimal;
    BEGIN
      // Init
      QtyNeededBase2 := 0;
      QtyOnPickBase2 := 0;
      QtyPickedBase2 := 0;
      Location.GET(LocationCode);
      IF FORMAT(Location."Cross-Dock Due Date Calc.") <> '' THEN
        CrossDockDate := CALCDATE(Location."Cross-Dock Due Date Calc.",WORKDATE)
      ELSE
        CrossDockDate := WORKDATE;

      // SalesLine
      SalesLine.RESET;
      SalesLine.SETCURRENTKEY(
        "Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("No.",ItemNo);
      SalesLine.SETRANGE("Variant Code",VariantCode);
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      SalesLine.SETRANGE("Location Code",LocationCode);
      SalesLine.SETRANGE("Shipment Date",0D,CrossDockDate);
      SalesLine.SETFILTER("Outstanding Quantity",'>0');
      IF (SourceType2 = 39) AND PurchaseLine."Special Order" THEN BEGIN
        SalesLine.SETRANGE("Document No.",PurchaseLine."Special Order Sales No.");
        SalesLine.SETRANGE("Line No.",PurchaseLine."Special Order Sales Line No.");
      END ELSE
        SalesLine.SETRANGE("Special Order",FALSE);
      IF SalesLine.FIND('-') THEN
        REPEAT
          IF WhseRequest.GET(1,SalesLine."Location Code",37,
               SalesLine."Document Type",SalesLine."Document No.") AND
             (WhseRequest."Document Status" = 1)
          THEN BEGIN
            IF SalesLine."Outstanding Qty. (Base)" > 0 THEN BEGIN
              CalculatePickQty(
                37,SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
                QtyOnPick,QtyOnPickBase,QtyPicked,QtyPickedBase);
              InsertCrossDockLine(CrossDockOpp,
                37,
                SalesLine."Document Type",
                SalesLine."Document No.",
                SalesLine."Line No.",
                0,
                SalesLine.Quantity,
                SalesLine."Quantity (Base)",
                QtyOnPick,QtyOnPickBase,QtyPicked,QtyPickedBase,
                SalesLine."Unit of Measure Code",
                SalesLine."Qty. per Unit of Measure",
                SalesLine."Shipment Date",
                SalesLine."No.",
                SalesLine."Variant Code",
                LineNo);
            END;
          END;
        UNTIL SalesLine.NEXT = 0;

      // Transfer Line
      TransLine.RESET;
      TransLine.SETCURRENTKEY(
        "Transfer-from Code",Status,"Derived From Line No.",
        "Item No.","Variant Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
        "Shipment Date","In-Transit Code");
      TransLine.SETRANGE("Transfer-from Code",LocationCode);
      TransLine.SETRANGE(Status,TransLine.Status::Released);
      TransLine.SETRANGE("Derived From Line No.",0);
      TransLine.SETRANGE("Item No.",ItemNo);
      TransLine.SETRANGE("Variant Code",VariantCode);
      TransLine.SETRANGE("Shipment Date",0D,CrossDockDate);
      TransLine.SETFILTER("Outstanding Qty. (Base)",'>0');
      IF TransLine.FIND('-') THEN
        REPEAT
          IF WhseRequest.GET(1,TransLine."Transfer-from Code",5741,
               0,TransLine."Document No.") AND
             (WhseRequest."Document Status" = 1)
          THEN BEGIN
            CalculatePickQty(
              5741,0,TransLine."Document No.",TransLine."Line No.",
              QtyOnPick,QtyOnPickBase,QtyPicked,QtyPickedBase);
            IF TransLine."Outstanding Qty. (Base)" > 0 THEN
              InsertCrossDockLine(CrossDockOpp,
                5741,
                0,
                TransLine."Document No.",
                TransLine."Line No.",
                0,
                TransLine.Quantity,
                TransLine."Quantity (Base)",
                QtyOnPick,QtyOnPickBase,QtyPicked,QtyPickedBase,
                TransLine."Unit of Measure Code",
                TransLine."Qty. per Unit of Measure",
                TransLine."Shipment Date",
                TransLine."Item No.",
                TransLine."Variant Code",
                LineNo);
          END;
        UNTIL TransLine.NEXT = 0;

      // Production Line
      ProdOrderComp.RESET;
      ProdOrderComp.SETCURRENTKEY(Status,"Item No.","Variant Code","Location Code","Due Date");
      ProdOrderComp.SETRANGE(Status,ProdOrderComp.Status::Released);
      ProdOrderComp.SETRANGE("Item No.",ItemNo);
      ProdOrderComp.SETRANGE("Variant Code",VariantCode);
      ProdOrderComp.SETRANGE("Location Code",LocationCode);
      ProdOrderComp.SETRANGE("Due Date",0D,CrossDockDate);
      ProdOrderComp.SETRANGE("Flushing Method",ProdOrderComp."Flushing Method"::Manual);
      ProdOrderComp.SETRANGE("Planning Level Code",0);
      ProdOrderComp.SETFILTER("Remaining Qty. (Base)",'>0');
      IF ProdOrderComp.FIND('-') THEN
        REPEAT
          IF ProdOrderComp."Remaining Qty. (Base)" > 0 THEN BEGIN
            ProdOrderComp.CALCFIELDS("Pick Qty. (Base)");
            InsertCrossDockLine(CrossDockOpp,
              5407,
              ProdOrderComp.Status,
              ProdOrderComp."Prod. Order No.",
              ProdOrderComp."Line No.",
              ProdOrderComp."Prod. Order Line No.",
              ProdOrderComp."Remaining Quantity",
              ProdOrderComp."Remaining Qty. (Base)",
              ProdOrderComp."Pick Qty.",
              ProdOrderComp."Pick Qty. (Base)",
              ProdOrderComp."Qty. Picked",
              ProdOrderComp."Qty. Picked (Base)",
              ProdOrderComp."Unit of Measure Code",
              ProdOrderComp."Qty. per Unit of Measure",
              ProdOrderComp."Due Date",
              ProdOrderComp."Item No.",
              ProdOrderComp."Variant Code",
              LineNo);
          END;
        UNTIL ProdOrderComp.NEXT = 0;

      // Post code
      QtyNeededSumBase := QtyNeededBase2;
      QtyOnPickSumBase := QtyOnPickBase2;
      QtyPickedSumBase := QtyPickedBase2;
    END;

    PROCEDURE InsertCrossDockLine@5(VAR CrossDockOpp@1000 : Record 5768;SourceType@1001 : Integer;SourceSubType@1002 : Integer;SourceNo@1003 : Code[20];SourceLineNo@1004 : Integer;SourceSubLineNo@1015 : Integer;QtyOutstanding@1011 : Decimal;QtyOutstandingBase@1005 : Decimal;QtyOnPick@1018 : Decimal;QtyOnPickBase@1016 : Decimal;QtyPicked@1019 : Decimal;QtyPickedBase@1017 : Decimal;UOMCode@1006 : Code[10];QtyPerUOM@1007 : Decimal;DueDate@1008 : Date;ItemNo@1009 : Code[20];VariantCode@1010 : Code[10];LineNo@1012 : Integer);
    BEGIN
      IF (SourceType2 = 39) AND PurchaseLine."Special Order" AND (SourceType <> 37) THEN
        EXIT;
      IF (QtyOutstandingBase - QtyOnPickBase - QtyPickedBase) <= 0 THEN
        EXIT;

      WITH CrossDockOpp DO BEGIN
        INIT;
        "Source Template Name" := TemplateName;
        "Source Name/No." := NameNo;
        "Source Line No." := LineNo;
        "Line No." := "Line No." + 10000;
        "To Source Type" := SourceType;
        "To Source Subtype" := SourceSubType;
        "To Source No." := SourceNo;
        "To Source Line No." := SourceLineNo;
        "To Source Subline No." := SourceSubLineNo;
        WhseMgt.GetSourceDocument("To Source Document","To Source Type","To Source Subtype");
        "Due Date" := DueDate;

        "Qty. Needed (Base)" := QtyOutstandingBase - QtyOnPickBase - QtyPickedBase;
        "Qty. Needed" := QtyOutstanding - QtyOnPick - QtyPicked;

        "Pick Qty. (Base)" := QtyOnPickBase;
        "Pick Qty." := QtyOnPickBase;

        "Picked Qty. (Base)" := QtyPickedBase;
        "Picked Qty." := QtyPicked;

        "To-Src. Unit of Measure Code" := UOMCode;
        "To-Src. Qty. per Unit of Meas." := QtyPerUOM;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        "Location Code" := LocationCode;
        INSERT;
        QtyNeededBase2 := QtyNeededBase2 + "Qty. Needed (Base)";
        QtyOnPickBase2 := QtyOnPickBase2 + QtyOnPickBase;
        QtyPickedBase2 := QtyPickedBase2 + QtyPickedBase;
      END;
    END;

    PROCEDURE ShowCrossDock@6(VAR CrossDockOpp@1000 : Record 5768;SourceTemplateName@1001 : Code[10];SourceNameNo@1002 : Code[20];SourceLineNo@1003 : Integer;LocationCode@1004 : Code[10];ItemNo@1006 : Code[20];VariantCode@1007 : Code[10]);
    VAR
      ReceiptLine@1009 : Record 7317;
      CrossDockForm@1005 : Form 5783;
      QtyToCrossDock@1008 : Decimal;
    BEGIN
      CrossDockOpp.FILTERGROUP(2);
      CrossDockOpp.SETRANGE("Source Template Name",SourceTemplateName);
      CrossDockOpp.SETRANGE("Source Name/No.",SourceNameNo);
      CrossDockOpp.SETRANGE("Location Code",LocationCode);
      CrossDockOpp.SETRANGE("Source Line No.",SourceLineNo);
      CrossDockOpp.FILTERGROUP(0);
      ReceiptLine.GET(SourceNameNo,SourceLineNo);
      CrossDockForm.SetValues(ItemNo,VariantCode,LocationCode,SourceTemplateName,SourceNameNo,SourceLineNo,
        ReceiptLine."Unit of Measure Code",ReceiptLine."Qty. per Unit of Measure");
      CrossDockForm.LOOKUPMODE(TRUE);
      CrossDockForm.SETTABLEVIEW(CrossDockOpp);
      IF CrossDockForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        CrossDockForm.GetValues(QtyToCrossDock);
        QtyToCrossDock := QtyToCrossDock / ReceiptLine."Qty. per Unit of Measure";
        IF ReceiptLine."Qty. to Receive" < QtyToCrossDock THEN
          QtyToCrossDock := ReceiptLine."Qty. to Receive";
        ReceiptLine.VALIDATE("Qty. to Cross-Dock",QtyToCrossDock);
        ReceiptLine.MODIFY;
      END;
    END;

    PROCEDURE CalcCrossDockedItems@7(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];UOMCode@1002 : Code[10];LocationCode@1003 : Code[10];VAR QtyCrossDockedUOMBase@1007 : Decimal;VAR QtyCrossDockedAllUOMBase@1005 : Decimal);
    VAR
      BinContent@1004 : Record 7302;
      QtyAvailToPickBase@1006 : Decimal;
    BEGIN
      QtyCrossDockedUOMBase := 0;
      QtyCrossDockedAllUOMBase := 0;
      BinContent.RESET;
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      BinContent.SETRANGE("Cross-Dock Bin",TRUE);
      IF BinContent.FIND('-') THEN
        REPEAT
          QtyAvailToPickBase := BinContent.CalcQtyAvailToPick(0);
          IF BinContent."Unit of Measure Code" = UOMCode THEN
            QtyCrossDockedUOMBase := QtyCrossDockedUOMBase + QtyAvailToPickBase;
          QtyCrossDockedAllUOMBase := QtyCrossDockedAllUOMBase + QtyAvailToPickBase;
        UNTIL BinContent.NEXT = 0;
    END;

    PROCEDURE ShowBinContentsCrossDocked@8(ItemNo@1003 : Code[20];VariantCode@1004 : Code[10];UOMCode@1005 : Code[10];LocationCode@1002 : Code[10];FilterOnUOM@1006 : Boolean);
    VAR
      BinContent@1000 : Record 7302;
      BinContentLookup@1001 : Form 7305;
    BEGIN
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      BinContent.SETRANGE("Cross-Dock Bin",TRUE);
      IF FilterOnUOM THEN
        BinContent.SETRANGE("Unit of Measure Code",UOMCode)
      ELSE
        BinContent.SETRANGE("Unit of Measure Code");
      BinContentLookup.SETTABLEVIEW(BinContent);
      BinContentLookup.Initialize(LocationCode);
      BinContentLookup.RUNMODAL;
      CLEAR(BinContentLookup);
    END;

    PROCEDURE GetSourceLine@11(SourceType@1000 : Option;SourceSubtype@1001 : Option;SourceNo@1002 : Code[20];SourceLineNo@1003 : Integer);
    BEGIN
      CASE SourceType OF
        39:
          BEGIN
            PurchaseLine.GET(SourceSubtype,SourceNo,SourceLineNo);
            SourceType2 := SourceType;
          END;
      END;
    END;

    PROCEDURE CalculatePickQty@9(SourceType@1001 : Integer;SourceSubtype@1002 : Integer;SourceNo@1003 : Code[20];SourceLineNo@1004 : Integer;VAR QtyOnPick@1007 : Decimal;VAR QtyOnPickBase@1005 : Decimal;VAR QtyPicked@1008 : Decimal;VAR QtyPickedBase@1006 : Decimal);
    VAR
      WhseShptLine@1000 : Record 7321;
    BEGIN
      QtyOnPickBase := 0;
      QtyPickedBase := 0;
      WITH WhseShptLine DO BEGIN
        RESET;
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Source Line No.",SourceLineNo);
        IF FIND('-') THEN
          REPEAT
            CALCFIELDS("Pick Qty. (Base)","Pick Qty.");
            QtyOnPick := QtyOnPick + "Pick Qty.";
            QtyOnPickBase := QtyOnPickBase + "Pick Qty. (Base)";
            QtyPicked := QtyPicked + "Qty. Picked";
            QtyPickedBase := QtyPickedBase + "Qty. Picked (Base)";
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE SetTemplate@10(NewTemplateName@1002 : Code[10];NewNameNo@1001 : Code[20];NewLocationCode@1000 : Code[10]);
    BEGIN
      TemplateName := NewTemplateName;
      NameNo := NewNameNo;
      LocationCode := NewLocationCode;
    END;

    BEGIN
    END.
  }
}
