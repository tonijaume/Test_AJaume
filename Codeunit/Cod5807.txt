OBJECT Codeunit 5807 Item Charge Assgnt. (Sales)
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 36=r,
                TableData 37=r,
                TableData 111=r,
                TableData 5809=imd,
                TableData 6661=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=&Equally,&Amount;ESP=&Igualmente,I&mporte';

    PROCEDURE InsertItemChargeAssgnt@1(ItemChargeAssgntSales@1000 : Record 5809;ApplToDocType@1001 : Option;ApplToDocNo2@1002 : Code[20];ApplToDocLineNo2@1003 : Integer;ItemNo2@1004 : Code[20];Description2@1005 : Text[50];VAR NextLineNo@1006 : Integer);
    VAR
      ItemChargeAssgntSales2@1007 : Record 5809;
    BEGIN
      NextLineNo := NextLineNo + 10000;

      ItemChargeAssgntSales2.INIT;
      ItemChargeAssgntSales2."Document Type" := ItemChargeAssgntSales."Document Type";
      ItemChargeAssgntSales2."Document No." := ItemChargeAssgntSales."Document No.";
      ItemChargeAssgntSales2."Document Line No." := ItemChargeAssgntSales."Document Line No.";
      ItemChargeAssgntSales2."Line No." := NextLineNo;
      ItemChargeAssgntSales2."Item Charge No." := ItemChargeAssgntSales."Item Charge No.";
      ItemChargeAssgntSales2."Applies-to Doc. Type" := ApplToDocType;
      ItemChargeAssgntSales2."Applies-to Doc. No." := ApplToDocNo2;
      ItemChargeAssgntSales2."Applies-to Doc. Line No." := ApplToDocLineNo2;
      ItemChargeAssgntSales2."Item No." := ItemNo2;
      ItemChargeAssgntSales2.Description := Description2;
      ItemChargeAssgntSales2."Unit Cost" := ItemChargeAssgntSales."Unit Cost";
      ItemChargeAssgntSales2."Item Charge No." := ItemChargeAssgntSales."Item Charge No.";
      ItemChargeAssgntSales2.INSERT;
    END;

    PROCEDURE CreateDocChargeAssgn@2(LastItemChargeAssgntSales@1000 : Record 5809;ShipmentNo@1001 : Code[20]);
    VAR
      FromSalesLine@1002 : Record 37;
      ItemChargeAssgntSales@1003 : Record 5809;
      NextLineNo@1004 : Integer;
    BEGIN
      WITH LastItemChargeAssgntSales DO BEGIN
        FromSalesLine.SETRANGE("Document Type","Document Type");
        FromSalesLine.SETRANGE("Document No.","Document No.");
        FromSalesLine.SETRANGE(Type,FromSalesLine.Type::Item);
        IF FromSalesLine.FIND('-') THEN BEGIN
          IF NOT ItemChargeAssgntSales.RECORDLEVELLOCKING THEN
            ItemChargeAssgntSales.LOCKTABLE(TRUE,TRUE);
          NextLineNo := "Line No.";
          ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
          ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
          ItemChargeAssgntSales.SETRANGE("Document Line No.","Document Line No.");
          ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
          REPEAT
            IF (FromSalesLine.Quantity <> 0) AND
               (FromSalesLine.Quantity <> FromSalesLine."Quantity Invoiced") AND
               (FromSalesLine."Job No." = '') AND
               ((ShipmentNo = '') OR (FromSalesLine."Shipment No." = ShipmentNo)) AND
               FromSalesLine."Allow Item Charge Assignment"
             THEN BEGIN
              ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",FromSalesLine."Line No.");
              IF NOT ItemChargeAssgntSales.FIND('-') THEN
                InsertItemChargeAssgnt(
                  LastItemChargeAssgntSales,FromSalesLine."Document Type",
                  FromSalesLine."Document No.",FromSalesLine."Line No.",
                  FromSalesLine."No.",FromSalesLine.Description,NextLineNo);
            END;
          UNTIL FromSalesLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CreateShptChargeAssgnt@3(VAR FromSalesShptLine@1000 : Record 111;ItemChargeAssgntSales@1001 : Record 5809);
    VAR
      ItemChargeAssgntSales2@1002 : Record 5809;
      Nextline@1003 : Integer;
    BEGIN
      IF NOT ItemChargeAssgntSales.RECORDLEVELLOCKING THEN
        ItemChargeAssgntSales.LOCKTABLE(TRUE,TRUE);
      Nextline := ItemChargeAssgntSales."Line No.";
      ItemChargeAssgntSales2.SETRANGE("Document Type",ItemChargeAssgntSales."Document Type");
      ItemChargeAssgntSales2.SETRANGE("Document No.",ItemChargeAssgntSales."Document No.");
      ItemChargeAssgntSales2.SETRANGE("Document Line No.",ItemChargeAssgntSales."Document Line No.");
      ItemChargeAssgntSales2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntSales2."Applies-to Doc. Type"::Shipment);
      REPEAT
        FromSalesShptLine.TESTFIELD("Job No.",'');
        ItemChargeAssgntSales2.SETRANGE("Applies-to Doc. No.",FromSalesShptLine."Document No.");
        ItemChargeAssgntSales2.SETRANGE("Applies-to Doc. Line No.",FromSalesShptLine."Line No.");
        IF NOT ItemChargeAssgntSales2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntSales,ItemChargeAssgntSales2."Applies-to Doc. Type"::Shipment,
            FromSalesShptLine."Document No.",FromSalesShptLine."Line No.",
            FromSalesShptLine."No.",FromSalesShptLine.Description,Nextline);
      UNTIL FromSalesShptLine.NEXT = 0;
    END;

    PROCEDURE CreateRcptChargeAssgnt@4(VAR FromReturnRcptLine@1000 : Record 6661;ItemChargeAssgntSales@1001 : Record 5809);
    VAR
      ItemChargeAssgntSales2@1002 : Record 5809;
      Nextline@1003 : Integer;
    BEGIN
      IF NOT ItemChargeAssgntSales.RECORDLEVELLOCKING THEN
        ItemChargeAssgntSales.LOCKTABLE(TRUE,TRUE);
      Nextline := ItemChargeAssgntSales."Line No.";
      ItemChargeAssgntSales2.SETRANGE("Document Type",ItemChargeAssgntSales."Document Type");
      ItemChargeAssgntSales2.SETRANGE("Document No.",ItemChargeAssgntSales."Document No.");
      ItemChargeAssgntSales2.SETRANGE("Document Line No.",ItemChargeAssgntSales."Document Line No.");
      ItemChargeAssgntSales2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntSales2."Applies-to Doc. Type"::"Return Receipt");
      REPEAT
        FromReturnRcptLine.TESTFIELD("Job No.",'');
        ItemChargeAssgntSales2.SETRANGE("Applies-to Doc. No.",FromReturnRcptLine."Document No.");
        ItemChargeAssgntSales2.SETRANGE("Applies-to Doc. Line No.",FromReturnRcptLine."Line No.");
        IF NOT ItemChargeAssgntSales2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntSales,ItemChargeAssgntSales2."Applies-to Doc. Type"::"Return Receipt",
            FromReturnRcptLine."Document No.",FromReturnRcptLine."Line No.",
            FromReturnRcptLine."No.",FromReturnRcptLine.Description,Nextline);
      UNTIL FromReturnRcptLine.NEXT = 0;
    END;

    PROCEDURE SuggestAssignment@5(SalesLine2@1000 : Record 37;TotalQtyToAssign@1001 : Decimal);
    VAR
      Selection@1014 : Integer;
    BEGIN
      Selection := STRMENU(Text000,2);
      IF Selection = 0 THEN
        EXIT;
      SuggestAssignment2(SalesLine2,TotalQtyToAssign,Selection);
    END;

    PROCEDURE SuggestAssignment2@6(SalesLine2@1000 : Record 37;TotalQtyToAssign@1001 : Decimal;Selection@1014 : Integer);
    VAR
      Currency@1016 : Record 4;
      CurrExchRate@1002 : Record 330;
      GLSetup@1017 : Record 98;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      SalesShptLine@1005 : Record 111;
      ReturnRcptLine@1006 : Record 6661;
      ItemChargeAssgntSales2@1007 : Record 5809;
      TempItemChargeAssgntSales@1008 : TEMPORARY Record 5809;
      CurrencyCode@1009 : Code[10];
      TotalAmount@1010 : Decimal;
      QtyToAssign@1011 : Decimal;
      QtyRemainder@1012 : Decimal;
      AmountRemainder@1013 : Decimal;
      RoundingPrecision@1018 : Decimal;
      TotalLines@1015 : Integer;
    BEGIN
      WITH SalesLine2 DO BEGIN
        SalesHeader.GET("Document Type","Document No.");
        IF (SalesHeader."Currency Code" <> '') THEN BEGIN
          Currency.GET(SalesHeader."Currency Code");
          RoundingPrecision := Currency."Amount Rounding Precision";
        END ELSE BEGIN
          GLSetup.GET;
          RoundingPrecision := GLSetup."Amount Rounding Precision";
        END;
        ItemChargeAssgntSales2.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntSales2.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntSales2.SETRANGE("Document Line No.","Line No.");
        IF ItemChargeAssgntSales2.FIND('-') THEN BEGIN
          IF Selection = 1 THEN BEGIN
            REPEAT
              IF NOT ItemChargeAssgntSales2.SalesLineInvoiced THEN BEGIN
                TempItemChargeAssgntSales.INIT;
                TempItemChargeAssgntSales := ItemChargeAssgntSales2;
                TempItemChargeAssgntSales.INSERT;
              END;
            UNTIL ItemChargeAssgntSales2.NEXT = 0;

            IF TempItemChargeAssgntSales.FIND('-') THEN BEGIN
              TotalLines := TempItemChargeAssgntSales.COUNT;
              REPEAT
                QtyToAssign := TotalQtyToAssign / TotalLines + QtyRemainder;
                QtyRemainder := QtyToAssign - ROUND(QtyToAssign,0.00001);
                ItemChargeAssgntSales2.GET(
                  TempItemChargeAssgntSales."Document Type",
                  TempItemChargeAssgntSales."Document No.",
                  TempItemChargeAssgntSales."Document Line No.",
                  TempItemChargeAssgntSales."Line No.");
                ItemChargeAssgntSales2."Qty. to Assign" := ROUND(QtyToAssign,0.00001);
                ItemChargeAssgntSales2."Amount to Assign" :=
                  ItemChargeAssgntSales2."Qty. to Assign" * ItemChargeAssgntSales2."Unit Cost" +
                  AmountRemainder;
                AmountRemainder :=
                  ItemChargeAssgntSales2."Amount to Assign" -
                  ROUND(ItemChargeAssgntSales2."Amount to Assign",RoundingPrecision);
                ItemChargeAssgntSales2."Amount to Assign" :=
                  ROUND(ItemChargeAssgntSales2."Amount to Assign",RoundingPrecision);
                ItemChargeAssgntSales2.MODIFY;
              UNTIL TempItemChargeAssgntSales.NEXT = 0;
            END;
          END ELSE BEGIN
            REPEAT
              IF NOT ItemChargeAssgntSales2.SalesLineInvoiced THEN BEGIN
                TempItemChargeAssgntSales.INIT;
                TempItemChargeAssgntSales := ItemChargeAssgntSales2;
                CASE ItemChargeAssgntSales2."Applies-to Doc. Type" OF
                  ItemChargeAssgntSales2."Applies-to Doc. Type"::Quote,
                  ItemChargeAssgntSales2."Applies-to Doc. Type"::Order,
                  ItemChargeAssgntSales2."Applies-to Doc. Type"::Invoice,
                  ItemChargeAssgntSales2."Applies-to Doc. Type"::"Return Order",
                  ItemChargeAssgntSales2."Applies-to Doc. Type"::"Credit Memo":
                    BEGIN
                      SalesLine.GET(
                        ItemChargeAssgntSales2."Applies-to Doc. Type",
                        ItemChargeAssgntSales2."Applies-to Doc. No.",
                        ItemChargeAssgntSales2."Applies-to Doc. Line No.");
                      TempItemChargeAssgntSales."Applies-to Doc. Line Amount" :=
                        ABS(SalesLine."Line Amount");
                    END;
                  ItemChargeAssgntSales2."Applies-to Doc. Type"::"Return Receipt":
                    BEGIN
                      ReturnRcptLine.GET(
                        ItemChargeAssgntSales2."Applies-to Doc. No.",
                        ItemChargeAssgntSales2."Applies-to Doc. Line No.");
                      CurrencyCode := ReturnRcptLine.GetCurrencyCode;
                      IF CurrencyCode = SalesHeader."Currency Code" THEN
                        TempItemChargeAssgntSales."Applies-to Doc. Line Amount" :=
                          ABS(ReturnRcptLine."Item Charge Base Amount")
                      ELSE
                        TempItemChargeAssgntSales."Applies-to Doc. Line Amount" :=
                          CurrExchRate.ExchangeAmtFCYToFCY(
                            SalesHeader."Posting Date",CurrencyCode,SalesHeader."Currency Code",
                            ABS(ReturnRcptLine."Item Charge Base Amount"));
                    END;
                  ItemChargeAssgntSales2."Applies-to Doc. Type"::Shipment:
                    BEGIN
                      SalesShptLine.GET(
                        ItemChargeAssgntSales2."Applies-to Doc. No.",
                        ItemChargeAssgntSales2."Applies-to Doc. Line No.");
                      CurrencyCode := SalesShptLine.GetCurrencyCode;
                      IF CurrencyCode = SalesHeader."Currency Code" THEN
                        TempItemChargeAssgntSales."Applies-to Doc. Line Amount" :=
                          ABS(SalesShptLine."Item Charge Base Amount")
                      ELSE
                        TempItemChargeAssgntSales."Applies-to Doc. Line Amount" :=
                          CurrExchRate.ExchangeAmtFCYToFCY(
                            SalesHeader."Posting Date",CurrencyCode,SalesHeader."Currency Code",
                            ABS(SalesShptLine."Item Charge Base Amount"));
                    END;
                END;
                IF TempItemChargeAssgntSales."Applies-to Doc. Line Amount" <> 0 THEN
                  TempItemChargeAssgntSales.INSERT
                ELSE BEGIN
                  ItemChargeAssgntSales2."Amount to Assign" := 0;
                  ItemChargeAssgntSales2."Qty. to Assign" := 0;
                  ItemChargeAssgntSales2.MODIFY;
                END;
                TotalAmount := TotalAmount + TempItemChargeAssgntSales."Applies-to Doc. Line Amount";
              END;
            UNTIL ItemChargeAssgntSales2.NEXT = 0;

            IF TempItemChargeAssgntSales.FIND('-') THEN
              REPEAT
                TempItemChargeAssgntSales."Qty. to Assign" :=
                  TempItemChargeAssgntSales."Applies-to Doc. Line Amount" / TotalAmount * TotalQtyToAssign + QtyRemainder;
                ItemChargeAssgntSales2.GET(
                  TempItemChargeAssgntSales."Document Type",
                  TempItemChargeAssgntSales."Document No.",
                  TempItemChargeAssgntSales."Document Line No.",
                  TempItemChargeAssgntSales."Line No.");
                ItemChargeAssgntSales2."Qty. to Assign" :=
                  ROUND(TempItemChargeAssgntSales."Qty. to Assign",0.00001);
                ItemChargeAssgntSales2."Amount to Assign" :=
                  ItemChargeAssgntSales2."Qty. to Assign" * ItemChargeAssgntSales2."Unit Cost" + AmountRemainder;
                AmountRemainder :=
                  ItemChargeAssgntSales2."Amount to Assign" -
                  ROUND(ItemChargeAssgntSales2."Amount to Assign",RoundingPrecision);
                QtyRemainder :=
                  TempItemChargeAssgntSales."Qty. to Assign" - ItemChargeAssgntSales2."Qty. to Assign";
                ItemChargeAssgntSales2."Amount to Assign" :=
                  ROUND(ItemChargeAssgntSales2."Amount to Assign",RoundingPrecision);
                ItemChargeAssgntSales2.MODIFY;
              UNTIL TempItemChargeAssgntSales.NEXT = 0;
          END;
          TempItemChargeAssgntSales.DELETEALL;
        END;
      END;
    END;

    BEGIN
    END.
  }
}
