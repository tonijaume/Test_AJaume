OBJECT Codeunit 99000778 OrderTrackingManagement
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 37=r,
                TableData 39=r,
                TableData 99000799=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Counting records...;ESP=Contando registros...';
      Text003@1001 : TextConst 'ENU=CURRENT LINE;ESP=LINEA ACTUAL';
      Text004@1002 : TextConst 'ENU=CANCELLATION;ESP=CANCELAR';
      Text005@1003 : TextConst 'ENU="NON-PEGGED ";ESP="NO TRAZADO "';
      Text006@1004 : TextConst 'ENU=SHIPMENT;ESP=ENVIO';
      Text007@1005 : TextConst 'ENU=RECEIPT;ESP=ALBARAN';
      Text008@1006 : TextConst 'ENU=There are no order tracking entries for this line.;ESP=No hay movimientos de seguimiento para esta l¡nea.';
      Text009@1007 : TextConst 'ENU=The order tracking entries for this line have a date conflict.;ESP=Movimientos seguimiento para esta l¡nea tienen conflicto fecha.';
      ItemLedgEntry@1008 : Record 32;
      ItemLedgEntry2@1009 : Record 32;
      ItemLedgEntry3@1010 : Record 32;
      SalesLine@1011 : Record 37;
      PurchLine@1012 : Record 39;
      ItemJnlLine@1013 : Record 83;
      ReqLine@1014 : Record 246;
      ProdOrderLine@1015 : Record 5406;
      ProdOrderComp@1016 : Record 5407;
      PlanningComponent@1017 : Record 99000829;
      ServiceInvLine@1018 : Record 5902;
      ReservEntry@1019 : Record 337;
      TempReservEntryList@1020 : TEMPORARY Record 337;
      ActualTrackingEntry@1021 : Record 99000799;
      TrackingEntry@1022 : TEMPORARY Record 99000799;
      CreateReservEntry@1023 : Codeunit 99000830;
      ReservEngineMgt@1024 : Codeunit 99000831;
      ReserveSalesLine@1025 : Codeunit 99000832;
      ReserveReqLine@1026 : Codeunit 99000833;
      ReservePurchLine@1027 : Codeunit 99000834;
      ReserveProdOrderLine@1029 : Codeunit 99000837;
      ReserveProdOrderComp@1030 : Codeunit 99000838;
      ReservePlanningComponent@1031 : Codeunit 99000840;
      ReserveItemLedgEntry@1032 : Codeunit 99000841;
      ReserveServiceInvLine@1033 : Codeunit 99000842;
      CaptionText@1034 : Text[80];
      Window@1035 : Dialog;
      Type@1036 : ' ,Sales,Req. Line,Purchase,Item Jnl,BOM Jnl,Item Ledg. Entry,Prod. Order Line,Prod. Order Comp.,Planning Line,Planning Comp.,Transfer,Service Order';
      ID@1037 : Code[20];
      BatchName@1038 : Code[20];
      Subtype@1039 : Integer;
      ProdOrderLineNo@1040 : Integer;
      RefNo@1041 : Integer;
      EntryNo@1042 : Integer;
      MultipleSummedUpQty@1048 : Decimal;
      SearchUp@1043 : Boolean;
      ItemOnInventory@1044 : Boolean;
      IsPlanning@1045 : Boolean;
      DateWarning@1046 : Boolean;
      SearchUpIsSet@1047 : Boolean;
      MultipleItemLedgEntries@1028 : Boolean;

    PROCEDURE IsSearchUp@11() : Boolean;
    BEGIN
      EXIT(SearchUp);
    END;

    PROCEDURE GetCaption@7() : Text[80];
    BEGIN
      EXIT(CaptionText);
    END;

    PROCEDURE SetSalesLine@24(VAR CurrentSalesLine@1000 : Record 37);
    VAR
      SaleShptLine@1001 : Record 111;
    BEGIN
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      SalesLine := CurrentSalesLine;
      ReservEntry."Source Type" := DATABASE::"Sales Line";

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);

      CaptionText := ReserveSalesLine.Caption(SalesLine);

      IF CurrentSalesLine."Qty. Shipped (Base)" <> 0 THEN BEGIN
        SaleShptLine.SETCURRENTKEY("Order No.","Order Line No.");
        SaleShptLine.SETRANGE("Order No.",CurrentSalesLine."Document No.");
        SaleShptLine.SETRANGE("Order Line No.",CurrentSalesLine."Line No.");
        IF SaleShptLine.FIND('-') THEN BEGIN
          ItemOnInventory := TRUE;
          REPEAT
            IF ItemLedgEntry2.GET(SaleShptLine."Item Shpt. Entry No.") THEN
              ItemLedgEntry2.MARK(TRUE);
          UNTIL SaleShptLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SetReqLine@23(VAR CurrentReqLine@1000 : Record 246);
    BEGIN
      ReqLine := CurrentReqLine;
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReserveReqLine.FilterReservFor(ReservEntry,ReqLine);
      CaptionText := ReserveReqLine.Caption(ReqLine);

      IsPlanning := ReqLine."Planning Line Origin" <> ReqLine."Planning Line Origin"::" ";
    END;

    PROCEDURE SetPurchLine@22(VAR CurrentPurchLine@1000 : Record 39);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      PurchLine := CurrentPurchLine;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReservePurchLine.FilterReservFor(ReservEntry,PurchLine);
      CaptionText := ReservePurchLine.Caption(PurchLine);

      IF CurrentPurchLine."Qty. Received (Base)" <> 0 THEN BEGIN
        PurchRcptLine.SETCURRENTKEY("Order No.","Order Line No.");
        PurchRcptLine.SETRANGE("Order No.",CurrentPurchLine."Document No.");
        PurchRcptLine.SETRANGE("Order Line No.",CurrentPurchLine."Line No.");
        IF PurchRcptLine.FIND('-') THEN BEGIN
          ItemOnInventory := TRUE;
          REPEAT
            IF ItemLedgEntry2.GET(PurchRcptLine."Item Rcpt. Entry No.") THEN
              ItemLedgEntry2.MARK(TRUE);
          UNTIL PurchRcptLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SetProdOrderLine@19(VAR CurrentProdOrderLine@1000 : Record 5406);
    BEGIN
      ProdOrderLine := CurrentProdOrderLine;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);

      IF CurrentProdOrderLine."Finished Quantity" <> 0 THEN BEGIN
        ItemLedgEntry2.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.","Entry Type");
        ItemLedgEntry2.SETRANGE("Prod. Order No.",CurrentProdOrderLine."Prod. Order No.");
        ItemLedgEntry2.SETRANGE("Prod. Order Line No.",CurrentProdOrderLine."Line No.");
        ItemLedgEntry2.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
        ItemLedgEntry2.SETRANGE("Item No.",CurrentProdOrderLine."Item No.");

        IF ItemLedgEntry2.FIND('-') THEN BEGIN
          ItemOnInventory := TRUE;
          REPEAT
            ItemLedgEntry2.MARK(TRUE);
          UNTIL ItemLedgEntry2.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SetProdOrderComp@18(VAR CurrentProdOrderComp@1000 : Record 5407);
    BEGIN
      ProdOrderComp := CurrentProdOrderComp;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);

      IF (CurrentProdOrderComp."Remaining Quantity" <> CurrentProdOrderComp."Expected Quantity") AND
         (CurrentProdOrderComp.Status IN
          [CurrentProdOrderComp.Status::Released,CurrentProdOrderComp.Status::Finished])
      THEN BEGIN
        ProdOrderLine.GET(
          CurrentProdOrderComp.Status,
          CurrentProdOrderComp."Prod. Order No.",
          CurrentProdOrderComp."Prod. Order Line No.");

        ItemLedgEntry2.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.","Entry Type","Prod. Order Comp. Line No.");
        ItemLedgEntry2.SETRANGE("Prod. Order No.",CurrentProdOrderComp."Prod. Order No.");
        ItemLedgEntry2.SETRANGE("Prod. Order Line No.",CurrentProdOrderComp."Prod. Order Line No.");
        ItemLedgEntry2.SETRANGE("Prod. Order Comp. Line No.",CurrentProdOrderComp."Line No.");
        ItemLedgEntry2.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Consumption);
        ItemLedgEntry2.SETRANGE("Item No.",CurrentProdOrderComp."Item No.");
        IF ItemLedgEntry2.FIND('-') THEN BEGIN
          ItemOnInventory := TRUE;
          REPEAT
            ItemLedgEntry2.MARK(TRUE);
          UNTIL ItemLedgEntry2.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SetPlanningComponent@6(VAR CurrentPlanningComponent@1000 : Record 99000829);
    BEGIN
      PlanningComponent := CurrentPlanningComponent;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanningComponent);
      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
      IsPlanning := TRUE;
    END;

    PROCEDURE SetItemLedgEntry@10(VAR CurrentItemLedgEntry@1000 : Record 32);
    BEGIN
      ItemLedgEntry := CurrentItemLedgEntry;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReserveItemLedgEntry.FilterReservFor(ReservEntry,ItemLedgEntry);
      CaptionText := ReserveItemLedgEntry.Caption(ItemLedgEntry);
      ItemLedgEntry2 := ItemLedgEntry;
      ItemLedgEntry2.MARK(TRUE);
    END;

    PROCEDURE SetMultipleItemLedgEntries@16(VAR TempItemLedgEntry@1007 : TEMPORARY Record 32;SourceType@1006 : Integer;SourceSubtype@1005 : '0,1,2,3,4,5,6,7,8,9,10';SourceID@1004 : Code[20];SourceBatchName@1003 : Code[10];SourceProdOrderLine@1002 : Integer;SourceRefNo@1000 : Integer);
    VAR
      ItemTrackingMgt@1001 : Codeunit 6500;
    BEGIN
      // Used from posted shipment and receipt with item tracking.

      ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,SourceType,SourceSubtype,SourceID,
        SourceBatchName,SourceProdOrderLine,SourceRefNo,0);

      TempItemLedgEntry.SETFILTER("Remaining Quantity",'<>%1',0);
      IF NOT TempItemLedgEntry.FIND('-') THEN
        EXIT;

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReserveItemLedgEntry.FilterReservFor(ReservEntry,TempItemLedgEntry);
      CaptionText := ReserveItemLedgEntry.Caption(TempItemLedgEntry);

      REPEAT
        ItemLedgEntry2 := TempItemLedgEntry;
        ItemLedgEntry2.MARK(TRUE);
        MultipleSummedUpQty += TempItemLedgEntry."Remaining Quantity";
      UNTIL TempItemLedgEntry.NEXT = 0;

      MultipleItemLedgEntries := (TempItemLedgEntry.COUNT > 1);
    END;

    PROCEDURE SetServiceInvLine@15(VAR CurrentServiceInvLine@1000 : Record 5902);
    BEGIN
      CurrentServiceInvLine.TESTFIELD(Type,CurrentServiceInvLine.Type::Item);
      ServiceInvLine := CurrentServiceInvLine;
      ReservEntry."Source Type" := DATABASE::"Service Line";

      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReserveServiceInvLine.FilterReservFor(ReservEntry,ServiceInvLine);

      CaptionText := ReserveServiceInvLine.Caption(ServiceInvLine);
    END;

    PROCEDURE TrackedQuantity@4() : Decimal;
    VAR
      FilterReservEntry@1000 : Record 337;
      QtyTracked1@1001 : Decimal;
      QtyTracked2@1002 : Decimal;
    BEGIN
      IF MultipleItemLedgEntries THEN
        EXIT(MultipleSummedUpQty);
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation,
        ReservEntry."Reservation Status"::Tracking);
      IF ReservEntry.FIND('-') THEN
        REPEAT
          QtyTracked1 += ReservEntry."Quantity (Base)";
        UNTIL ReservEntry.NEXT = 0;
      IF IsPlanning THEN
        IF DerivePlanningFilter(ReservEntry,FilterReservEntry) THEN BEGIN
          FilterReservEntry.SETRANGE("Reservation Status",FilterReservEntry."Reservation Status"::Reservation,
            FilterReservEntry."Reservation Status"::Tracking);
          IF FilterReservEntry.FIND('-') THEN
            REPEAT
              QtyTracked2 += FilterReservEntry."Quantity (Base)";
            UNTIL FilterReservEntry.NEXT = 0;
          EXIT((QtyTracked1 + QtyTracked2) * CreateReservEntry.SignFactor(FilterReservEntry));
        END;
      EXIT(QtyTracked1 * CreateReservEntry.SignFactor(ReservEntry));
    END;

    PROCEDURE FindRecord@9(Which@1000 : Text[250];VAR TrackingEntry2@1001 : Record 99000799) : Boolean;
    BEGIN
      TrackingEntry := TrackingEntry2;
      IF NOT TrackingEntry.FIND(Which) THEN
        EXIT(FALSE);
      TrackingEntry2 := TrackingEntry;
      EXIT(TRUE);
    END;

    PROCEDURE GetNextRecord@8(Steps@1001 : Integer;VAR TrackingEntry2@1002 : Record 99000799) CurrentSteps@1000 : Integer;
    BEGIN
      TrackingEntry := TrackingEntry2;
      CurrentSteps := TrackingEntry.NEXT(Steps);
      IF CurrentSteps <> 0 THEN
        TrackingEntry2 := TrackingEntry;
      EXIT(CurrentSteps);
    END;

    PROCEDURE FindRecords@2() TrackingExists@1000 : Boolean;
    BEGIN
      TempReservEntryList.DELETEALL;
      TrackingEntry.DELETEALL;
      EntryNo := 1;

      WITH TrackingEntry DO BEGIN
        Window.OPEN(Text000);
        INIT;
        "Entry No." := 0;
        DrillOrdersUp(ReservEntry,1);
        ItemLedgEntry2.SETCURRENTKEY("Entry No.");
        ItemLedgEntry2.MARKEDONLY(TRUE);
        IF ItemLedgEntry2.FIND('-') THEN
          REPEAT
            InsertItemLedgTrackEntry(1,ItemLedgEntry2,ItemLedgEntry2."Remaining Quantity",ItemLedgEntry2);
          UNTIL ItemLedgEntry2.NEXT = 0;
        TrackingExists := FIND('-');
        ActualTrackingEntry := TrackingEntry;
        IF NOT TrackingExists THEN
          MESSAGE(Text008);
        IF DateWarning THEN
          MESSAGE(Text009);
        Window.CLOSE;
      END;
      EXIT(TrackingExists);
    END;

    PROCEDURE DrillOrdersUp@5(VAR ReservEntry@1000 : Record 337;Level@1001 : Integer);
    VAR
      ReservEntry2@1002 : Record 337;
      ReservEntry3@1003 : Record 337;
      FilterReservEntry@1004 : Record 337;
    BEGIN
      IF Level > 20 THEN
        EXIT;

      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation,
        ReservEntry."Reservation Status"::Tracking);

      IF ReservEntry.FIND('-') THEN BEGIN
        IF Level = 1 THEN
          IF NOT SearchUpIsSet THEN BEGIN
            SearchUp := NOT ReservEntry.Positive;
            SearchUpIsSet := TRUE;
          END;

        REPEAT
          ReservEntry3.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive);
          InsertTrackingEntry(ReservEntry,ReservEntry3,Level);
          WITH ReservEntry3 DO BEGIN
            CASE "Source Type" OF
              DATABASE::"Item Ledger Entry":
                BEGIN
                  ItemLedgEntry3.GET(ReservEntry3."Source Ref. No.");
                  DrillItemLedgEntries(Level + 1,ItemLedgEntry3);
                END;
              DATABASE::"Prod. Order Component",
              DATABASE::"Planning Component":
                BEGIN
                  ReservEntry2.RESET;
                  IF "Source Type" = DATABASE::"Prod. Order Component" THEN BEGIN
                    ReservEntry2.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
                    ReservEntry2.SETRANGE("Source Subtype","Source Subtype");
                    ReservEntry2.SETRANGE("Source Prod. Order Line","Source Prod. Order Line");
                  END ELSE BEGIN
                    ReservEntry2.SETRANGE("Source Type",DATABASE::"Requisition Line");
                    ReservEntry2.SETRANGE("Source Ref. No.","Source Prod. Order Line");
                  END;
                  ReservEntry2.SETRANGE("Source ID","Source ID");
                  ReservEntry2.SETRANGE("Source Batch Name","Source Batch Name");

                  DrillOrdersUp(ReservEntry2,Level + 1);
                  IF DerivePlanningFilter(ReservEntry3,FilterReservEntry) THEN
                    DrillOrdersUp(FilterReservEntry,Level + 1);
                END;

              DATABASE::"Prod. Order Line",
              DATABASE::"Requisition Line":
                BEGIN
                  ReservEntry2.RESET;
                  IF "Source Type" = DATABASE::"Prod. Order Line" THEN BEGIN
                    ReservEntry2.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
                    ReservEntry2.SETRANGE("Source Subtype","Source Subtype");
                  END ELSE
                    ReservEntry2.SETRANGE("Source Type",DATABASE::"Planning Component");
                  ReservEntry2.SETRANGE("Source ID","Source ID");
                  ReservEntry2.SETRANGE("Source Batch Name","Source Batch Name");
                  ReservEntry2.SETRANGE("Source Prod. Order Line","Source Ref. No.");
                  DrillOrdersUp(ReservEntry2,Level + 1);
                  IF DerivePlanningFilter(ReservEntry3,FilterReservEntry) THEN
                    DrillOrdersUp(FilterReservEntry,Level + 1);
                END;
            END;
          END;
        UNTIL ReservEntry.NEXT = 0;

      END;

      IF Level = 1 THEN
        IF DerivePlanningFilter(ReservEntry,FilterReservEntry) THEN BEGIN
          IF NOT SearchUpIsSet THEN BEGIN
            SearchUp := NOT FilterReservEntry.Positive;
            SearchUpIsSet := TRUE;
          END;
          DrillOrdersUp(FilterReservEntry,Level);
        END;
    END;

    PROCEDURE DrillItemLedgEntries@12(Level@1000 : Integer;ItemLedgEntry4@1001 : Record 32);
    VAR
      ItemLedgEntry5@1002 : Record 32;
      ItemLedgEntry6@1003 : Record 32;
      ItemApplnEntry@1004 : Record 339;
      SignFactor@1005 : Integer;
    BEGIN
      IF Level > 20 THEN
        EXIT;

      IF ItemLedgEntry4.Positive THEN BEGIN
        ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.");
        ItemApplnEntry.SETRANGE("Inbound Item Entry No.",ItemLedgEntry4."Entry No.");
        ItemApplnEntry.SETFILTER("Outbound Item Entry No.",'<>0');
        ItemApplnEntry.SETRANGE("Item Ledger Entry No.");
      END ELSE BEGIN
        ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.");
        ItemApplnEntry.SETRANGE("Outbound Item Entry No.",ItemLedgEntry4."Entry No.");
        ItemApplnEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry4."Entry No.");
        ItemApplnEntry.SETRANGE("Inbound Item Entry No.");
      END;
      IF ItemApplnEntry.FIND('-') THEN
        REPEAT
          IF ItemLedgEntry4.Positive THEN BEGIN
            SignFactor := -1;
            ItemLedgEntry5.GET(ItemApplnEntry."Outbound Item Entry No.")
          END ELSE BEGIN
            SignFactor := 1;
            ItemLedgEntry5.GET(ItemApplnEntry."Inbound Item Entry No.");
          END;
          IF SearchUp = ItemLedgEntry5.Positive THEN BEGIN
            InsertItemLedgTrackEntry(Level,ItemLedgEntry5,ItemApplnEntry.Quantity * SignFactor,ItemLedgEntry4);
            IF ItemLedgEntry5."Prod. Order No." <> '' THEN BEGIN
              ItemLedgEntry6.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.","Entry Type");
              ItemLedgEntry6.SETRANGE("Source Type",ItemLedgEntry4."Source Type"::Item);
              IF ItemLedgEntry5."Entry Type" = ItemLedgEntry5."Entry Type"::Consumption THEN
                ItemLedgEntry6.SETRANGE("Entry Type",ItemLedgEntry4."Entry Type"::Output)
              ELSE
                ItemLedgEntry6.SETRANGE("Entry Type",ItemLedgEntry4."Entry Type"::Consumption);
              IF NOT SearchUp THEN
                ItemLedgEntry6.SETRANGE("Item No.",ItemLedgEntry5."Source No.")
              ELSE
                ItemLedgEntry6.SETRANGE("Item No.",ItemLedgEntry5."Item No.");
              ItemLedgEntry6.SETRANGE("Prod. Order No.",ItemLedgEntry5."Prod. Order No.");
              IF ItemLedgEntry6.FIND('-') THEN
                REPEAT
                  InsertItemLedgTrackEntry(Level + 1,ItemLedgEntry6,ItemLedgEntry6.Quantity,ItemLedgEntry4);
                  DrillItemLedgEntries(Level + 1,ItemLedgEntry6);
                UNTIL ItemLedgEntry6.NEXT = 0;
            END;
          END;
        UNTIL ItemApplnEntry.NEXT = 0;

      IF ItemLedgEntry4."Prod. Order No." <> '' THEN BEGIN
        ItemLedgEntry6.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.","Entry Type");
        ItemLedgEntry6.SETRANGE("Source Type",ItemLedgEntry4."Source Type"::Item);
        IF ItemLedgEntry5."Entry Type" = ItemLedgEntry5."Entry Type"::Consumption THEN
          ItemLedgEntry6.SETRANGE("Entry Type",ItemLedgEntry4."Entry Type"::Output)
        ELSE
          ItemLedgEntry6.SETRANGE("Entry Type",ItemLedgEntry4."Entry Type"::Consumption);
        ItemLedgEntry6.SETRANGE("Prod. Order No.",ItemLedgEntry4."Prod. Order No.");
        IF NOT SearchUp THEN
          ItemLedgEntry6.SETRANGE("Item No.",ItemLedgEntry5."Source No.")
        ELSE
          ItemLedgEntry6.SETRANGE("Item No.",ItemLedgEntry5."Item No.");
        IF ItemLedgEntry6.FIND('-') THEN
          REPEAT
            IF ItemLedgEntry4."Entry No." <> ItemLedgEntry6."Entry No." THEN BEGIN
              InsertItemLedgTrackEntry(Level + 1,ItemLedgEntry6,ItemLedgEntry6.Quantity,ItemLedgEntry4);
              DrillItemLedgEntries(Level + 1,ItemLedgEntry6);
            END;
          UNTIL ItemLedgEntry6.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertTrackingEntry@3(VAR ReservEntry@1000 : Record 337;VAR ReservEntry2@1001 : Record 337;Level@1002 : Integer);
    BEGIN
      TempReservEntryList := ReservEntry;
      TempReservEntryList.Positive := FALSE;
      IF NOT TempReservEntryList.INSERT THEN
        EXIT;

      TrackingEntry.RESET;
      TrackingEntry.INIT;

      TrackingEntry.Level := Level;
      TrackingEntry."For Type" := ReservEntry."Source Type";
      TrackingEntry."For Subtype" := ReservEntry."Source Subtype";
      TrackingEntry."For ID" := ReservEntry."Source ID";
      TrackingEntry."For Batch Name" := ReservEntry."Source Batch Name";
      TrackingEntry."For Prod. Order Line" := ReservEntry."Source Prod. Order Line";
      TrackingEntry."For Ref. No." := ReservEntry."Source Ref. No.";

      TrackingEntry."From Type" := ReservEntry2."Source Type";
      TrackingEntry."From Subtype" := ReservEntry2."Source Subtype";
      TrackingEntry."From ID" := ReservEntry2."Source ID";
      TrackingEntry."From Batch Name" := ReservEntry2."Source Batch Name";
      TrackingEntry."From Prod. Order Line" := ReservEntry2."Source Prod. Order Line";
      TrackingEntry."From Ref. No." := ReservEntry2."Source Ref. No.";

      IF ReservEntry."Expected Receipt Date" > ReservEntry."Shipment Date" THEN BEGIN
        TrackingEntry.Warning := TRUE;
        DateWarning := TRUE;
      END;

      IF TrackingEntryExists THEN BEGIN
        TrackingEntry.Quantity += ReservEntry."Quantity (Base)";
        TrackingEntry.MODIFY;
        EXIT;
      END;

      TrackingEntry."Entry No." := EntryNo;
      TrackingEntry."Demanded by" :=
        ReservEngineMgt.CreateForText(ReservEntry);
      TrackingEntry."Supplied by" :=
        ReservEngineMgt.CreateFromText(ReservEntry);
      TrackingEntry."Item No." := ReservEntry."Item No.";
      TrackingEntry."Shipment Date" := ReservEntry."Shipment Date";
      TrackingEntry."Expected Receipt Date" := ReservEntry."Expected Receipt Date";
      IF MultipleItemLedgEntries THEN
        TrackingEntry.Quantity := MultipleSummedUpQty
      ELSE
        TrackingEntry.Quantity := ReservEntry."Quantity (Base)";

      IF SearchUp THEN
        TrackingEntry.Name := TrackingEntry."Supplied by"
      ELSE
        TrackingEntry.Name := TrackingEntry."Demanded by";

      IF Level = 1 THEN
        IF SearchUp THEN
          TrackingEntry."Demanded by" := Text003
        ELSE
          TrackingEntry."Supplied by" := Text003;

      Type := TrackingEntry."For Type";
      Subtype := TrackingEntry."For Subtype";
      ID := TrackingEntry."For ID";
      BatchName := TrackingEntry."For Batch Name";
      ProdOrderLineNo := TrackingEntry."For Prod. Order Line";
      RefNo := TrackingEntry."For Ref. No.";

      CASE Type OF
        DATABASE::"Sales Line":
          IF SalesLine.GET(Subtype,ID,RefNo) THEN BEGIN
            TrackingEntry."Starting Date" := SalesLine."Shipment Date";
            TrackingEntry."Ending Date" := SalesLine."Shipment Date";
          END;
        DATABASE::"Purchase Line":
          IF PurchLine.GET(Subtype,ID,RefNo) THEN BEGIN
            TrackingEntry."Starting Date" := PurchLine."Expected Receipt Date";
            TrackingEntry."Ending Date" := PurchLine."Expected Receipt Date";
          END;
        DATABASE::"Requisition Line":
          IF ReqLine.GET(ID,BatchName,RefNo) THEN BEGIN
            TrackingEntry."Starting Date" := ReqLine."Due Date";
            TrackingEntry."Ending Date" := ReqLine."Due Date";
          END;
        DATABASE::"Item Journal Line":
          IF ItemJnlLine.GET(ID,BatchName,RefNo) THEN BEGIN
            TrackingEntry."Starting Date" := ItemJnlLine."Posting Date";
            TrackingEntry."Ending Date" := ItemJnlLine."Posting Date";
          END;
        DATABASE::"Item Ledger Entry":
          IF ItemLedgEntry.GET(RefNo) THEN BEGIN
            TrackingEntry."Starting Date" := WORKDATE;
            TrackingEntry."Ending Date" := WORKDATE;
          END;
        DATABASE::"Prod. Order Line":
          IF ProdOrderLine.GET(Subtype,ID,ProdOrderLineNo) THEN BEGIN
            TrackingEntry."Starting Date" := ProdOrderLine."Starting Date";
            TrackingEntry."Ending Date" := ProdOrderLine."Ending Date";
          END;
        DATABASE::"Prod. Order Component":
          IF ProdOrderComp.GET(Subtype,ID,ProdOrderLineNo,RefNo) THEN BEGIN
            TrackingEntry."Starting Date" := ProdOrderComp."Due Date";
            IF ProdOrderLine.GET(Subtype,ID,ProdOrderLineNo) THEN
              TrackingEntry."Ending Date" := ProdOrderLine."Ending Date";
          END;
        DATABASE::"Planning Component":
          IF PlanningComponent.GET(ID,BatchName,ProdOrderLineNo,RefNo) THEN BEGIN
            TrackingEntry."Starting Date" := PlanningComponent."Due Date";
            IF ReqLine.GET(ID,BatchName,ProdOrderLineNo) THEN
              TrackingEntry."Ending Date" := ReqLine."Ending Date";
          END;
        DATABASE::"Service Line":
          IF ServiceInvLine.GET(Subtype,ID,RefNo) THEN BEGIN
            TrackingEntry."Starting Date" := ServiceInvLine."Posting Date";
            TrackingEntry."Ending Date" := ServiceInvLine."Posting Date";
          END;
      END;

      IF TrackingEntry."From Type" = DATABASE::"Requisition Line" THEN
        IF ReqLine.GET(TrackingEntry."From ID",TrackingEntry."From Batch Name",
          TrackingEntry."From Ref. No.") THEN
            IF ReqLine."Action Message" = ReqLine."Action Message"::Cancel THEN
              TrackingEntry.Name := Text004;

      TrackingEntry.INSERT;
      EntryNo := EntryNo + 1;
    END;

    PROCEDURE InsertItemLedgTrackEntry@14(Level@1000 : Integer;ToItemLedgEntry@1001 : Record 32;TrackQuantity@1002 : Decimal;FromItemLedgEntry@1003 : Record 32);
    VAR
      PeggingText@1004 : Text[30];
    BEGIN
      IF TrackQuantity = 0 THEN
        EXIT;
      TrackingEntry.RESET;
      TrackingEntry.INIT;
      TrackingEntry."Entry No." := EntryNo;
      IF SearchUp THEN BEGIN
        TrackingEntry."Demanded by" :=
          STRSUBSTNO(
            '%1 %2',FromItemLedgEntry.TABLECAPTION,FromItemLedgEntry."Entry No.");
        TrackingEntry."Supplied by" :=
          STRSUBSTNO(
            '%1 %2',ToItemLedgEntry.TABLECAPTION,ToItemLedgEntry."Entry No.");
      END ELSE BEGIN
        TrackingEntry."Supplied by" :=
          STRSUBSTNO(
            '%1 %2',FromItemLedgEntry.TABLECAPTION,FromItemLedgEntry."Entry No.");
        TrackingEntry."Demanded by" :=
          STRSUBSTNO(
            '%1 %2',ToItemLedgEntry.TABLECAPTION,ToItemLedgEntry."Entry No.");
      END;

      IF Level = 1 THEN BEGIN
        IF ToItemLedgEntry."Entry No." = FromItemLedgEntry."Entry No." THEN
          PeggingText := Text005
        ELSE
          PeggingText := '';

        IF SearchUp THEN
          TrackingEntry."Demanded by" := PeggingText + Text006
        ELSE
          TrackingEntry."Supplied by" := PeggingText + Text007;

      END;

      TrackingEntry."Item No." := ToItemLedgEntry."Item No.";
      TrackingEntry.Quantity := TrackQuantity;
      TrackingEntry.Level := Level;

      TrackingEntry."For Type" := DATABASE::"Item Ledger Entry";
      TrackingEntry."For Ref. No." := FromItemLedgEntry."Entry No.";
      TrackingEntry."From Type" := DATABASE::"Item Ledger Entry";
      TrackingEntry."From Ref. No." := ToItemLedgEntry."Entry No.";

      IF SearchUp THEN
        TrackingEntry.Name := TrackingEntry."Supplied by"
      ELSE
        TrackingEntry.Name := TrackingEntry."Demanded by";


      Type := TrackingEntry."For Type";
      RefNo := ToItemLedgEntry."Entry No.";

      TrackingEntry."Starting Date" := 0D;
      TrackingEntry."Ending Date" := 0D;

      TrackingEntry.INSERT;
      EntryNo := EntryNo + 1;
    END;

    PROCEDURE TrackingEntryExists@1() : Boolean;
    VAR
      TrackingEntry2@1000 : Record 99000799;
    BEGIN
      TrackingEntry2 := TrackingEntry;

      TrackingEntry.SETRANGE(Level,TrackingEntry.Level);
      TrackingEntry.SETRANGE("For Type",TrackingEntry."For Type");
      TrackingEntry.SETRANGE("For Subtype",TrackingEntry."For Subtype");
      TrackingEntry.SETRANGE("For ID",TrackingEntry."For ID");
      TrackingEntry.SETRANGE("For Batch Name",TrackingEntry."For Batch Name");
      TrackingEntry.SETRANGE("For Prod. Order Line",TrackingEntry."For Prod. Order Line");
      TrackingEntry.SETRANGE("For Ref. No.",TrackingEntry."For Ref. No.");

      TrackingEntry.SETRANGE("From Type",TrackingEntry."From Type");
      TrackingEntry.SETRANGE("From Subtype",TrackingEntry."From Subtype");
      TrackingEntry.SETRANGE("From ID",TrackingEntry."From ID");
      TrackingEntry.SETRANGE("From Batch Name",TrackingEntry."From Batch Name");
      TrackingEntry.SETRANGE("From Prod. Order Line",TrackingEntry."From Prod. Order Line");
      TrackingEntry.SETRANGE("From Ref. No.",TrackingEntry."From Ref. No.");

      IF TrackingEntry.FIND('-') THEN BEGIN
        TrackingEntry.RESET;
        EXIT(TRUE);
      END ELSE BEGIN
        TrackingEntry.RESET;
        TrackingEntry := TrackingEntry2;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE DerivePlanningFilter@13(VAR FromReservEntry@1001 : Record 337;VAR ToReservEntry@1002 : Record 337) OK@1000 : Boolean;
    VAR
      FilterReqLine@1003 : Record 246;
      FilterPlanningComponent@1004 : Record 99000829;
    BEGIN
      WITH ToReservEntry DO BEGIN
        OK := FALSE;
        SETRANGE("Source Type",DATABASE::"Planning Component");
        IF FromReservEntry.GETFILTER("Source Type") = GETFILTER("Source Type") THEN BEGIN
          EVALUATE(FilterPlanningComponent."Line No.",FromReservEntry.GETFILTER("Source Ref. No."));
          EVALUATE(FilterPlanningComponent."Worksheet Line No.",FromReservEntry.GETFILTER("Source Prod. Order Line"));

          IF NOT FilterPlanningComponent.GET(FromReservEntry.GETFILTER("Source ID"),FromReservEntry.GETFILTER("Source Batch Name"),
            FilterPlanningComponent."Worksheet Line No.",FilterPlanningComponent."Line No.")
          THEN
            EXIT(FALSE);

          SETCURRENTKEY(
            "Source ID","Source Ref. No.","Source Type","Source Subtype",
            "Source Batch Name","Source Prod. Order Line","Reservation Status",
            "Shipment Date","Expected Receipt Date");
          SETRANGE("Source ID",FilterPlanningComponent."Ref. Order No.");
          SETRANGE("Source Ref. No.",FilterPlanningComponent."Line No.");
          SETRANGE("Source Type",DATABASE::"Prod. Order Component");
          SETRANGE("Source Subtype",FilterPlanningComponent."Ref. Order Status");
          SETRANGE("Source Prod. Order Line",FilterPlanningComponent."Ref. Order Line No.");
          OK := FIND('-');
        END ELSE BEGIN
          SETRANGE("Source Type",DATABASE::"Requisition Line");
          IF FromReservEntry.GETFILTER("Source Type") = GETFILTER("Source Type") THEN BEGIN
            EVALUATE(FilterReqLine."Line No.",FromReservEntry.GETFILTER("Source Ref. No."));
            IF NOT FilterReqLine.GET(FromReservEntry.GETFILTER("Source ID"),
              FromReservEntry.GETFILTER("Source Batch Name"),FilterReqLine."Line No.")
            THEN
              EXIT(FALSE);
            IF FilterReqLine."Action Message" > FilterReqLine."Action Message"::New THEN BEGIN
              SETCURRENTKEY(
                "Source ID","Source Ref. No.","Source Type","Source Subtype",
                "Source Batch Name","Source Prod. Order Line");
              CASE FilterReqLine."Ref. Order Type" OF
                FilterReqLine."Ref. Order Type"::Purchase:
                  BEGIN
                    SETRANGE("Source ID",FilterReqLine."Ref. Order No.");
                    SETRANGE("Source Ref. No.",FilterReqLine."Ref. Line No.");
                    SETRANGE("Source Type",DATABASE::"Purchase Line");
                    SETRANGE("Source Subtype",1);
                    OK := FIND('-');
                  END;
                FilterReqLine."Ref. Order Type"::"Prod. Order":
                  BEGIN
                    SETRANGE("Source ID",FilterReqLine."Ref. Order No.");
                    SETRANGE("Source Type",DATABASE::"Prod. Order Line");
                    SETRANGE("Source Subtype",FilterReqLine."Ref. Order Status");
                    SETRANGE("Source Prod. Order Line",FilterReqLine."Ref. Line No.");
                    OK := FIND('-');
                  END;
                FilterReqLine."Ref. Order Type"::Transfer:
                  BEGIN
                    SETRANGE("Source ID",FilterReqLine."Ref. Order No.");
                    SETRANGE("Source Ref. No.",FilterReqLine."Ref. Line No.");
                    SETRANGE("Source Type",DATABASE::"Transfer Line");
                    SETRANGE("Source Subtype",1); // Inbound
                    SETRANGE("Source Prod. Order Line",0);
                    OK := FIND('-');
                  END;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE FindRecordsWithoutMessage@17() TrackingExists@1000 : Boolean;
    BEGIN
      TempReservEntryList.DELETEALL;
      TrackingEntry.DELETEALL;
      EntryNo := 1;

      WITH TrackingEntry DO BEGIN
        INIT;
        "Entry No." := 0;
        DrillOrdersUp(ReservEntry,1);
        ItemLedgEntry2.SETCURRENTKEY("Entry No.");
        ItemLedgEntry2.MARKEDONLY(TRUE);
        IF ItemLedgEntry2.FIND('-') THEN
          REPEAT
            InsertItemLedgTrackEntry(1,ItemLedgEntry2,ItemLedgEntry2."Remaining Quantity",ItemLedgEntry2);
          UNTIL ItemLedgEntry2.NEXT = 0;
        TrackingExists := FIND('-');
        ActualTrackingEntry := TrackingEntry;
      END;
      EXIT(TrackingExists);
    END;

    BEGIN
    END.
  }
}
