OBJECT Codeunit 99008504 Purchase Invoice-Accept
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    TableNo=99008502;
    OnRun=VAR
            InboundPurchaseDocumentHeader@1000 : Record 99008502;
          BEGIN
            InboundPurchaseDocumentHeader := Rec;
            IF NOT Validation(InboundPurchaseDocumentHeader) THEN
              EXIT;
            IF FindReferenced AND ReferencedFound THEN BEGIN
              IF UpdatePurchaseDocument(InboundPurchaseDocumentHeader) AND NOT HideDialogBox THEN
                MESSAGE(Text000);
            END ELSE BEGIN
              CreatePurchaseDocument(InboundPurchaseDocumentHeader);
              IF NOT HideDialogBox THEN
                MESSAGE(Text001+
                  Text002,InboundPurchaseDocumentHeader."Corresp. Accepted Document No.");
            END;
            Rec := InboundPurchaseDocumentHeader;
          END;

  }
  CODE
  {
    VAR
      Text000@1005 : TextConst 'ENU=The referenced purchase order has been updated with the BizTalk purchase invoice.;ESP=Se ha actualizado el pedido de compra referido con la factura de compra BizTalk.';
      Text001@1006 : TextConst 'ENU="A purchase invoice number %1 that is based on the ";ESP="Se ha creado una factura de compra, con el n£mero %1, "';
      Text002@1007 : TextConst 'ENU=BizTalk purchase invoice has been created.;ESP=basada en la factura de compra BizTalk.';
      Text003@1008 : TextConst 'ENU=A BizTalk partner with the number %1 does not exist.;ESP=No existe un socio BizTalk con el n£mero %1.';
      Text004@1009 : TextConst 'ENU=A purchase invoice has already been created from a similar BizTalk purchase invoice.;ESP=Ya se ha creado una factura de compra a partir de una factura de compra BizTalk similar.';
      Text005@1010 : TextConst 'ENU=A posted purchase invoice that is based on a similar BizTalk purchase invoice already exists.;ESP=Ya existe una factura de compra registrada basada en una factura de compra BizTalk similar.';
      Text006@1011 : TextConst 'ENU=A purchase order has already been updated from a similar BizTalk purchase invoice.;ESP=Ya se ha actualizado una factura de compra a partir de una factura de compra BizTalk similar.';
      Text007@1012 : TextConst 'ENU=The referenced purchase order cannot be updated because it already contains a vendor invoice number.;ESP=No se puede actualizar el pedido de compra referido porque ya tiene un n£mero de factura de proveedor.';
      Text008@1013 : TextConst 'ENU=The referenced purchase order does not exist. Do you want to create a new invoice?;ESP=No existe el pedido de compra referido. ¨Confirma que desea crear una nueva factura?';
      Text009@1014 : TextConst 'ENU=A new purchase invoice could not be created because a reference to an existing purchase order exists.;ESP=No se ha podido crear una nueva factura de compra debido a una referencia a un pedido de compra existente.';
      Text010@1015 : TextConst 'ENU=A reference to a nonexisting purchase order exists. Do you want to continue?;ESP=Existe una referencia a un pedido de compra inexistente. ¨Confirma que desea continuar?';
      Text011@1016 : TextConst 'ENU=The currency code on the inbound purchase document header does not map to any currency specified for the Partner.;ESP=El c¢digo de divisa en la cabecera del documento de compra saliente no tiene equivalencia con ninguna divisa especificada para el socio.';
      Text012@1017 : TextConst 'ENU=Commerce Gateway does not support the acceptance of a %1 whose %2 is %3;ESP=Commerce Gateway no permite aceptar un documento %1 en el que %2 es %3';
      Text014@1019 : TextConst 'ENU=There is a discrepancy between the inbound quantity and the quantity to invoice;ESP=Existe discrepancia entre la cantidad entrada y la cantidad a facturar';
      Text015@1020 : TextConst 'ENU=" on the referenced purchase order line in line number %1.";ESP=" en la l¡nea n£mero %1 del pedido de compra referido."';
      Text016@1021 : TextConst 'ENU=There is a discrepancy with the %1 in line number %2.;ESP=Existe una discrepancia con la %1 en la l¡nea n£mero %2.';
      Text017@1022 : TextConst 'ENU=Do you want to continue?;ESP=¨Confirma que desea continuar?';
      Text018@1023 : TextConst 'ENU=\Do you want to continue?;ESP=\¨Confirma que desea continuar?';
      Text019@1024 : TextConst 'ENU=There are discrepancies between inbound invoice lines and the referenced order lines.;ESP=Existen discrepancias entre las l¡neas de la factura entrada y las l¡neas del pedido referido.';
      Text020@1025 : TextConst 'ENU=Could not update referenced order lines because of comment lines in the referenced order.;ESP=No se ha podido actualizar las l¡neas del pedido referido debido a la existencia de l¡neas de comentario en el pedido referido.';
      Text023@1028 : TextConst 'ENU=A vendor item number is not defined for item number %1;ESP=No se ha definido un n£mero de producto proveedor para el producto n£mero %1.';
      Text024@1029 : TextConst 'ENU=The corresponding vendor item number %1 in quote line no. %2 \;ESP=No se puede encontrar el n£mero producto proveedor %1 correspondiente en la l¡nea de oferta n£m %2 \';
      Text025@1030 : TextConst 'ENU=could not be found in the BizTalk purchase invoice;ESP=en la l¡nea de oferta n§. %2 en la factura de compra BizTalk.';
      Text026@1031 : TextConst 'ENU=A common item number is not defined for item number %1;ESP=No se definido un n£mero producto com£n  para el producto n£mero %1.';
      Text027@1032 : TextConst 'ENU=The corresponding common item number %1 in quote line no. %2 \;ESP=No se puede encontrar el n£mero producto com£n %1 correspondiente en la l¡nea de oferta n£m %2 \';
      BizTalkPartnerSetup@1000 : Record 99008513;
      PurchOrderHeader@1001 : Record 38;
      Item@1033 : Record 27;
      FindReferenced@1002 : Boolean;
      ReferenceExists@1003 : Boolean;
      ReferencedFound@1004 : Boolean;
      Text028@1034 : TextConst 'ENU="You must specify %1 for %2 %3 = ''''%4'''' in order to accept a %5 with a %6";ESP="Debe especificar %1 para %2 %3 = ''''%4'''' para aceptar un(a) %5 con %6"';
      HideDialogBox@1018 : Boolean;
      Text029@1026 : TextConst 'ENU="The referenced purchase order does not exist. ";ESP="El pedido de compra al que se hace referencia no existe. "';
      Text030@1027 : TextConst 'ENU="A reference to a nonexisting purchase order exists. ";ESP="Se ha realizado una referencia a un pedido de compra que no existe. "';

    PROCEDURE Validation@1(VAR InboundPurchaseDocumentHeader@1000 : Record 99008502) : Boolean;
    VAR
      PostedPurchaseHeader@1001 : Record 122;
      BizTalkPartnerCurrencyMap@1002 : Record 99008532;
    BEGIN
      BizTalkPartnerSetup.SETCURRENTKEY("Partner Type","Partner No.");
      BizTalkPartnerSetup.SETRANGE("Partner Type", BizTalkPartnerSetup."Partner Type"::Vendor);
      BizTalkPartnerSetup.SETRANGE("Partner No.", InboundPurchaseDocumentHeader."Buy-from Vendor No.");
      IF NOT BizTalkPartnerSetup.FIND('-') THEN
        ERROR(Text003,InboundPurchaseDocumentHeader."Buy-from Vendor No.");

      IF BizTalkPartnerSetup."Purchase Invoice" = BizTalkPartnerSetup."Purchase Invoice"::"Update Referenced" THEN
        FindReferenced := TRUE
      ELSE
        FindReferenced := FALSE;

      IF InboundPurchaseDocumentHeader."Vendor Invoice No." <> '' THEN BEGIN
        PurchOrderHeader.SETCURRENTKEY("Document Type","Buy-from Vendor No.");
        PurchOrderHeader.SETRANGE("Document Type",PurchOrderHeader."Document Type"::Invoice);
        PurchOrderHeader.SETRANGE("Buy-from Vendor No.",InboundPurchaseDocumentHeader."Buy-from Vendor No.");
        PurchOrderHeader.SETRANGE("Vendor Invoice No.",InboundPurchaseDocumentHeader."Vendor Invoice No.");
        IF PurchOrderHeader.FIND('-') THEN
          ERROR(Text004);

        PostedPurchaseHeader.SETRANGE("Buy-from Vendor No.",InboundPurchaseDocumentHeader."Buy-from Vendor No.");
        PostedPurchaseHeader.SETRANGE("Vendor Invoice No.",InboundPurchaseDocumentHeader."Vendor Invoice No.");
        IF PostedPurchaseHeader.FIND('-') THEN
          ERROR(Text005);

        PurchOrderHeader.RESET;
        PurchOrderHeader.SETCURRENTKEY("Document Type","Buy-from Vendor No.");
        PurchOrderHeader.SETRANGE("Document Type",PurchOrderHeader."Document Type"::Order);
        PurchOrderHeader.SETRANGE("Buy-from Vendor No.",InboundPurchaseDocumentHeader."Buy-from Vendor No.");
        PurchOrderHeader.SETRANGE("Vendor Invoice No.",InboundPurchaseDocumentHeader."Vendor Invoice No.");
        IF PurchOrderHeader.FIND('-') THEN
          ERROR(Text006);
      END;

      IF InboundPurchaseDocumentHeader."Currency Code" <> '' THEN BEGIN
        IF BizTalkPartnerCurrencyMap.GET(
          BizTalkPartnerSetup."BizTalk Partner No.",InboundPurchaseDocumentHeader."Currency Code") THEN
          InboundPurchaseDocumentHeader."Currency Code" := BizTalkPartnerCurrencyMap."Currency Code"
        ELSE
          ERROR(Text011);
      END;

      ReferenceExists := FALSE;
      ReferencedFound := FALSE;

      PurchOrderHeader.RESET;
      IF InboundPurchaseDocumentHeader."Reference Order No." <> '' THEN BEGIN
        ReferenceExists := TRUE;
        PurchOrderHeader.SETCURRENTKEY("Document Type","Buy-from Vendor No.");
        PurchOrderHeader.SETRANGE("Document Type",PurchOrderHeader."Document Type"::Order);
        PurchOrderHeader.SETRANGE("Buy-from Vendor No.",InboundPurchaseDocumentHeader."Buy-from Vendor No.");
        PurchOrderHeader.SETRANGE("No.",InboundPurchaseDocumentHeader."Reference Order No.");
        IF PurchOrderHeader.FIND('-') THEN BEGIN
          ReferencedFound := TRUE;
          IF PurchOrderHeader."Vendor Invoice No." <> '' THEN
            ERROR(Text007);
        END ELSE BEGIN
          IF FindReferenced THEN
            IF NOT HideDialogBox THEN BEGIN
              IF NOT CONFIRM(Text008) THEN
                EXIT(FALSE);
            END ELSE
              ERROR(Text029);
          ReferencedFound := FALSE;
        END;
      END;

      IF (NOT FindReferenced) AND ReferenceExists THEN
        IF ReferencedFound THEN
          ERROR(Text009)
        ELSE
          IF NOT HideDialogBox THEN BEGIN
            IF NOT CONFIRM(Text010) THEN
              EXIT(FALSE);
          END ELSE
            ERROR(Text030);

      EXIT(TRUE);
    END;

    PROCEDURE CreatePurchaseDocument@2(VAR InboundPurchaseDocumentHeader@1000 : Record 99008502);
    VAR
      PurchaseHeader@1001 : Record 38;
      InboundPurchaseDocumentLine@1002 : Record 99008503;
      PurchaseLine@1003 : Record 39;
      BizTalkPartnerCurrencyMap@1004 : Record 99008532;
      BizTalkReservEntry@1008 : Record 99008533;
      BizTalkManagement@1005 : Codeunit 99008508;
      CreateReservEntry@1009 : Codeunit 99000830;
      ItemNo@1006 : Code[20];
      NextLineNo@1007 : Integer;
    BEGIN
      PurchaseLine.LOCKTABLE;
      PurchaseHeader.LOCKTABLE;
      PurchaseHeader.INIT;
      PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
      PurchaseHeader.INSERT(TRUE);

      IF (InboundPurchaseDocumentHeader."Payment Terms Code" <> '') THEN
        PurchaseHeader.VALIDATE("Payment Terms Code",InboundPurchaseDocumentHeader."Payment Terms Code");
      IF (InboundPurchaseDocumentHeader."Payment Method Code" <> '') THEN
        PurchaseHeader.VALIDATE("Payment Method Code",InboundPurchaseDocumentHeader."Payment Method Code");
      IF (InboundPurchaseDocumentHeader."Payment Discount %" <> 0) THEN
        PurchaseHeader.VALIDATE("Payment Discount %",InboundPurchaseDocumentHeader."Payment Discount %");
      IF (InboundPurchaseDocumentHeader."Pay-to Vendor No." <> '') THEN
        PurchaseHeader.VALIDATE("Pay-to Vendor No.", InboundPurchaseDocumentHeader."Pay-to Vendor No.");
      IF (InboundPurchaseDocumentHeader."Ship-to Code" <> '') THEN
        PurchaseHeader.VALIDATE("Ship-to Code", InboundPurchaseDocumentHeader."Ship-to Code");
      IF (InboundPurchaseDocumentHeader."Sell-to Customer No." <> '') THEN
        PurchaseHeader.VALIDATE("Sell-to Customer No.",InboundPurchaseDocumentHeader."Sell-to Customer No.");
      IF (InboundPurchaseDocumentHeader."Buy-from Vendor No." <> '') THEN
        PurchaseHeader.VALIDATE("Buy-from Vendor No.",InboundPurchaseDocumentHeader."Buy-from Vendor No.");

      IF (InboundPurchaseDocumentHeader."Buy-from Vendor Name" <> '') THEN
        PurchaseHeader.VALIDATE("Buy-from Vendor Name",InboundPurchaseDocumentHeader."Buy-from Vendor Name");
      IF  (InboundPurchaseDocumentHeader."Buy-from Vendor Name 2" <> '') THEN
        PurchaseHeader.VALIDATE("Buy-from Vendor Name 2",InboundPurchaseDocumentHeader."Buy-from Vendor Name 2");
      IF (InboundPurchaseDocumentHeader."Buy-from Address" <> '') THEN
        PurchaseHeader.VALIDATE("Buy-from Address",InboundPurchaseDocumentHeader."Buy-from Address");
      IF (InboundPurchaseDocumentHeader."Buy-from Address 2" <> '') THEN
        PurchaseHeader.VALIDATE("Buy-from Address 2",InboundPurchaseDocumentHeader."Buy-from Address 2");
      IF (InboundPurchaseDocumentHeader."Buy-from Contact" <> '') THEN
        PurchaseHeader.VALIDATE("Buy-from Contact",InboundPurchaseDocumentHeader."Buy-from Contact");
      IF (InboundPurchaseDocumentHeader."Buy-from County" <> '') THEN
        PurchaseHeader.VALIDATE("Buy-from County",InboundPurchaseDocumentHeader."Buy-from County");
      IF (InboundPurchaseDocumentHeader."Buy-from Country/Region Code" <> '') THEN
        PurchaseHeader.VALIDATE("Buy-from Country/Region Code",InboundPurchaseDocumentHeader."Buy-from Country/Region Code");

      IF (InboundPurchaseDocumentHeader."Ship-to Name" <> '') THEN
        PurchaseHeader.VALIDATE("Ship-to Name",InboundPurchaseDocumentHeader."Ship-to Name");
      IF (InboundPurchaseDocumentHeader."Ship-to Name 2" <> '') THEN
        PurchaseHeader.VALIDATE("Ship-to Name 2",InboundPurchaseDocumentHeader."Ship-to Name 2");
      IF (InboundPurchaseDocumentHeader."Ship-to Address" <> '') THEN
        PurchaseHeader.VALIDATE("Ship-to Address",InboundPurchaseDocumentHeader."Ship-to Address");
      IF (InboundPurchaseDocumentHeader."Ship-to Address 2" <> '') THEN
        PurchaseHeader.VALIDATE("Ship-to Address 2",InboundPurchaseDocumentHeader."Ship-to Address 2");
      IF (InboundPurchaseDocumentHeader."Ship-to County" <> '') THEN
        PurchaseHeader.VALIDATE("Ship-to County",InboundPurchaseDocumentHeader."Ship-to County");
      IF (InboundPurchaseDocumentHeader."Ship-to Country/Region Code" <> '') THEN
        PurchaseHeader.VALIDATE("Ship-to Country/Region Code",InboundPurchaseDocumentHeader."Ship-to Country/Region Code");
      IF (InboundPurchaseDocumentHeader."Ship-to Contact" <> '') THEN
        PurchaseHeader.VALIDATE("Ship-to Contact",InboundPurchaseDocumentHeader."Ship-to Contact");

      IF (InboundPurchaseDocumentHeader."Pay-to Name" <> '') THEN
        PurchaseHeader.VALIDATE("Pay-to Name",InboundPurchaseDocumentHeader."Pay-to Name");
      IF (InboundPurchaseDocumentHeader."Pay-to Name 2" <> '') THEN
        PurchaseHeader.VALIDATE("Pay-to Name 2",InboundPurchaseDocumentHeader."Pay-to Name 2");
      IF (InboundPurchaseDocumentHeader."Pay-to Address" <> '') THEN
        PurchaseHeader.VALIDATE("Pay-to Address",InboundPurchaseDocumentHeader."Pay-to Address");
      IF (InboundPurchaseDocumentHeader."Pay-to Address 2" <> '') THEN
        PurchaseHeader.VALIDATE("Pay-to Address 2",InboundPurchaseDocumentHeader."Pay-to Address 2");
      IF (InboundPurchaseDocumentHeader."Pay-to Contact" <> '') THEN
        PurchaseHeader.VALIDATE("Pay-to Contact",InboundPurchaseDocumentHeader."Pay-to Contact");
      IF (InboundPurchaseDocumentHeader."Pay-to County" <> '') THEN
        PurchaseHeader.VALIDATE("Pay-to County",InboundPurchaseDocumentHeader."Pay-to County");
      IF (InboundPurchaseDocumentHeader."Pay-to Country/Region Code" <> '') THEN
        PurchaseHeader.VALIDATE("Pay-to Country/Region Code",InboundPurchaseDocumentHeader."Pay-to Country/Region Code");
      IF (InboundPurchaseDocumentHeader."Your Reference" <> '') THEN
        PurchaseHeader.VALIDATE("Your Reference",InboundPurchaseDocumentHeader."Your Reference");

      IF (InboundPurchaseDocumentHeader."Shortcut Dimension 1 Code" <> '') THEN
        PurchaseHeader.VALIDATE("Shortcut Dimension 1 Code",InboundPurchaseDocumentHeader."Shortcut Dimension 1 Code");
      IF (InboundPurchaseDocumentHeader."Shortcut Dimension 2 Code" <> '') THEN
        PurchaseHeader.VALIDATE("Shortcut Dimension 2 Code",InboundPurchaseDocumentHeader."Shortcut Dimension 2 Code");
      IF (InboundPurchaseDocumentHeader."Transaction Type" <> '') THEN
        PurchaseHeader.VALIDATE("Transaction Type",InboundPurchaseDocumentHeader."Transaction Type");
      IF (InboundPurchaseDocumentHeader."Transport Method" <> '') THEN
        PurchaseHeader.VALIDATE("Transport Method",InboundPurchaseDocumentHeader."Transport Method");
      IF (InboundPurchaseDocumentHeader."Document Date" <> 0D) THEN
        PurchaseHeader.VALIDATE("Document Date",InboundPurchaseDocumentHeader."Document Date");

      IF (InboundPurchaseDocumentHeader."Due Date" <> 0D) THEN
        PurchaseHeader.VALIDATE("Due Date",InboundPurchaseDocumentHeader."Due Date");
      IF (InboundPurchaseDocumentHeader."Pmt. Discount Date" <> 0D) THEN
        PurchaseHeader.VALIDATE("Pmt. Discount Date",InboundPurchaseDocumentHeader."Pmt. Discount Date");
      IF (InboundPurchaseDocumentHeader."Shipment Method Code" <> '') THEN
        PurchaseHeader.VALIDATE("Shipment Method Code",InboundPurchaseDocumentHeader."Shipment Method Code");
      IF (InboundPurchaseDocumentHeader."Purchaser Code" <> '') THEN
        PurchaseHeader.VALIDATE("Purchaser Code",InboundPurchaseDocumentHeader."Purchaser Code");
      IF (InboundPurchaseDocumentHeader."Expected Receipt Date" <> 0D) THEN
        PurchaseHeader.VALIDATE("Expected Receipt Date",InboundPurchaseDocumentHeader."Expected Receipt Date");
      IF (InboundPurchaseDocumentHeader."VAT Registration No." <> '') THEN
        PurchaseHeader.VALIDATE("VAT Registration No.",InboundPurchaseDocumentHeader."VAT Registration No.");
      IF (InboundPurchaseDocumentHeader."Vendor Invoice No." <> '') THEN
        PurchaseHeader.VALIDATE("Vendor Invoice No.",InboundPurchaseDocumentHeader."Vendor Invoice No.");

      PurchaseHeader.VALIDATE("Currency Code",InboundPurchaseDocumentHeader."Currency Code");

      PurchaseHeader.VALIDATE("Date Received",InboundPurchaseDocumentHeader."Date Received");
      PurchaseHeader.VALIDATE("Time Received",InboundPurchaseDocumentHeader."Time Received");
      PurchaseHeader.VALIDATE("BizTalk Purchase Invoice",TRUE);
      IF (InboundPurchaseDocumentHeader."Buy-from Post Code" <> '') THEN
        PurchaseHeader.VALIDATE("Buy-from Post Code",InboundPurchaseDocumentHeader."Buy-from Post Code");
      IF (InboundPurchaseDocumentHeader."Buy-from City" <> '') THEN
        PurchaseHeader.VALIDATE("Buy-from City",InboundPurchaseDocumentHeader."Buy-from City");
      IF (InboundPurchaseDocumentHeader."Ship-to Post Code" <> '') THEN
        PurchaseHeader.VALIDATE("Ship-to Post Code",InboundPurchaseDocumentHeader."Ship-to Post Code");
      IF (InboundPurchaseDocumentHeader."Ship-to City" <> '') THEN
        PurchaseHeader.VALIDATE("Ship-to City",InboundPurchaseDocumentHeader."Ship-to City");
      IF (InboundPurchaseDocumentHeader."Pay-to Post Code" <> '') THEN
        PurchaseHeader.VALIDATE("Pay-to Post Code",InboundPurchaseDocumentHeader."Pay-to Post Code");
      IF (InboundPurchaseDocumentHeader."Pay-to City" <> '') THEN
        PurchaseHeader.VALIDATE("Pay-to City",InboundPurchaseDocumentHeader."Pay-to City");
      PurchaseHeader.MODIFY;

      NextLineNo := 10000;
      InboundPurchaseDocumentLine.SETCURRENTKEY("Inbound Document No.");
      InboundPurchaseDocumentLine.SETRANGE("Inbound Document No.", InboundPurchaseDocumentHeader."Inbound Document No.");
      IF InboundPurchaseDocumentLine.FIND('-') THEN
        REPEAT
          PurchaseLine.INIT;
          PurchaseLine."Document Type" := PurchaseHeader."Document Type";
          PurchaseLine."Document No." := PurchaseHeader."No.";
          PurchaseLine."Line No." := NextLineNo;
          NextLineNo := NextLineNo + 10000;
          PurchaseLine.VALIDATE(Type,InboundPurchaseDocumentLine.Type);
          PurchaseLine.INSERT(TRUE);
          CASE InboundPurchaseDocumentLine.Type OF
            InboundPurchaseDocumentLine.Type::" ":
              PurchaseLine.Description := InboundPurchaseDocumentLine.Description;
            InboundPurchaseDocumentLine.Type::Item:
              BEGIN
                CASE BizTalkPartnerSetup."Purchase Item Number Type" OF
                  BizTalkPartnerSetup."Purchase Item Number Type"::"Internal Item No.":
                    BEGIN
                      InboundPurchaseDocumentLine.TESTFIELD("No.");
                      ItemNo := InboundPurchaseDocumentLine."No.";
                    END;
                  BizTalkPartnerSetup."Purchase Item Number Type"::"Vendor Item No.":
                    BEGIN
                      InboundPurchaseDocumentHeader.TESTFIELD("Buy-from Vendor No.");
                      InboundPurchaseDocumentLine.TESTFIELD("Vendor Item No.");
                      ItemNo := BizTalkManagement.ConvertVendorItemNo(
                        InboundPurchaseDocumentLine."Vendor Item No.",
                        InboundPurchaseDocumentHeader."Buy-from Vendor No.");
                    END;
                  BizTalkPartnerSetup."Purchase Item Number Type"::"Common Item No.":
                    BEGIN
                      InboundPurchaseDocumentLine.TESTFIELD("Common Item No.");
                      ItemNo := BizTalkManagement.ConvertCommonItemNo(InboundPurchaseDocumentLine."Common Item No.");
                    END;
                END;
                PurchaseLine.VALIDATE("No.",ItemNo);

                IF (InboundPurchaseDocumentLine.Quantity <> 0) THEN
                  PurchaseLine.VALIDATE(Quantity,InboundPurchaseDocumentLine.Quantity);
                IF (InboundPurchaseDocumentLine."Gross Weight" <> 0) THEN
                  PurchaseLine.VALIDATE("Gross Weight",InboundPurchaseDocumentLine."Gross Weight");
                IF (InboundPurchaseDocumentLine."Net Weight" <> 0) THEN
                  PurchaseLine.VALIDATE("Net Weight",InboundPurchaseDocumentLine."Net Weight");
                IF (InboundPurchaseDocumentLine."Unit Volume" <> 0) THEN
                  PurchaseLine.VALIDATE("Unit Volume",InboundPurchaseDocumentLine."Unit Volume");
                IF (InboundPurchaseDocumentLine."Unit of Measure" <> '') THEN
                  PurchaseLine.VALIDATE("Unit of Measure",InboundPurchaseDocumentLine."Unit of Measure");
                IF (InboundPurchaseDocumentLine."Unit of Measure Code" <> '') THEN
                  PurchaseLine.VALIDATE("Unit of Measure Code",InboundPurchaseDocumentLine."Unit of Measure Code");
                IF (InboundPurchaseDocumentLine."Line Discount %" <> 0) THEN
                  PurchaseLine.VALIDATE("Line Discount %",InboundPurchaseDocumentLine."Line Discount %");
                IF (InboundPurchaseDocumentLine."Line Discount Amount" <> 0) THEN
                  PurchaseLine.VALIDATE("Line Discount Amount",InboundPurchaseDocumentLine."Line Discount Amount");
                IF (InboundPurchaseDocumentLine."Inv. Discount Amount" <> 0) THEN
                  PurchaseLine.VALIDATE("Inv. Discount Amount",InboundPurchaseDocumentLine."Inv. Discount Amount");
                IF (InboundPurchaseDocumentLine."Amount Including VAT" <> 0) THEN
                  PurchaseLine.VALIDATE("Amount Including VAT",InboundPurchaseDocumentLine."Amount Including VAT");
                IF (InboundPurchaseDocumentLine."Units per Parcel" <> 0) THEN
                  PurchaseLine.VALIDATE("Units per Parcel",InboundPurchaseDocumentLine."Units per Parcel");

                IF (InboundPurchaseDocumentLine.Description <> '') THEN
                  PurchaseLine.VALIDATE(Description,InboundPurchaseDocumentLine.Description);
                IF (InboundPurchaseDocumentLine."Description 2" <> '') THEN
                  PurchaseLine.VALIDATE("Description 2",InboundPurchaseDocumentLine."Description 2");
                IF (InboundPurchaseDocumentLine."Shortcut Dimension 1 Code" <> '') THEN
                  PurchaseLine.VALIDATE("Shortcut Dimension 1 Code",InboundPurchaseDocumentLine."Shortcut Dimension 1 Code");
                IF (InboundPurchaseDocumentLine."Shortcut Dimension 2 Code" <> '') THEN
                  PurchaseLine.VALIDATE("Shortcut Dimension 2 Code",InboundPurchaseDocumentLine."Shortcut Dimension 2 Code");
                IF (InboundPurchaseDocumentLine."Job No." <> '') THEN
                  PurchaseLine.VALIDATE("Job No.",InboundPurchaseDocumentLine."Job No.");

                IF (InboundPurchaseDocumentLine."Variant Code" <> '') THEN
                  PurchaseLine.VALIDATE("Variant Code",InboundPurchaseDocumentLine."Variant Code");

                IF (InboundPurchaseDocumentLine."Expected Receipt Date" <> 0D) THEN
                  PurchaseLine.VALIDATE("Expected Receipt Date",InboundPurchaseDocumentLine."Expected Receipt Date");

                IF (InboundPurchaseDocumentLine."Direct Unit Cost" <> 0) THEN
                  PurchaseLine.VALIDATE("Direct Unit Cost",InboundPurchaseDocumentLine."Direct Unit Cost");
                IF (InboundPurchaseDocumentLine.Amount <> 0) THEN
                  PurchaseLine.VALIDATE(Amount,InboundPurchaseDocumentLine.Amount);

                IF (InboundPurchaseDocumentLine."Vendor Item No." <> '') THEN
                  PurchaseLine.VALIDATE("Vendor Item No.",InboundPurchaseDocumentLine."Vendor Item No.");
                IF (InboundPurchaseDocumentLine."Bin Code" <> '') THEN
                  PurchaseLine.VALIDATE("Bin Code",InboundPurchaseDocumentLine."Bin Code");
                IF (InboundPurchaseDocumentLine."Qty. per Unit of Measure" <> 0) THEN
                  PurchaseLine.VALIDATE("Qty. per Unit of Measure",InboundPurchaseDocumentLine."Qty. per Unit of Measure");
                IF (InboundPurchaseDocumentLine."Unit Price (LCY)" <> 0) THEN
                  PurchaseLine.VALIDATE("Unit Price (LCY)",InboundPurchaseDocumentLine."Unit Price (LCY)");
              END;
            ELSE
              ERROR(Text012,PurchaseLine.TABLECAPTION,PurchaseLine.FIELDCAPTION(Type),FORMAT(PurchaseLine.Type));
          END;
          PurchaseLine.MODIFY;

          BizTalkReservEntry.SETRANGE("BizTalk Document No.",
            InboundPurchaseDocumentHeader."Inbound Document No.");
          BizTalkReservEntry.SETRANGE("Biztalk Document Direction",
            BizTalkReservEntry."Biztalk Document Direction"::Inbound);
          BizTalkReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
          BizTalkReservEntry.SETRANGE("BizTalk Document Line No.",
            InboundPurchaseDocumentLine."Line No.");
          IF BizTalkReservEntry.FIND('-') THEN
            REPEAT
              Item.GET(ItemNo);
              IF Item."Item Tracking Code" = '' THEN
                ERROR(Text028,Item.FIELDCAPTION("Item Tracking Code"),Item.TABLECAPTION,Item.FIELDCAPTION("No."),
                  Item."No.",FORMAT(PurchaseHeader."Document Type"),BizTalkReservEntry.TABLECAPTION);
              CreateReservEntry.CreateReservEntryFor(
                DATABASE::"Purchase Line",PurchaseLine."Document Type",
                PurchaseLine."Document No.",'',0,PurchaseLine."Line No.",PurchaseLine."Qty. per Unit of Measure",
                BizTalkReservEntry.Quantity,BizTalkReservEntry."Serial No.",BizTalkReservEntry."Lot No.");
              CreateReservEntry.CreateEntry(ItemNo,
                PurchaseLine."Variant Code",PurchaseLine."Location Code",
                BizTalkReservEntry.Description,
                BizTalkReservEntry."Expected Receipt Date",
                BizTalkReservEntry."Shipment Date",0,BizTalkReservEntry."Reservation Status");
            UNTIL BizTalkReservEntry.NEXT = 0;

        UNTIL InboundPurchaseDocumentLine.NEXT = 0;
      InboundPurchaseDocumentHeader.Status := InboundPurchaseDocumentHeader.Status::Accepted;
      InboundPurchaseDocumentHeader."Date Processed" := TODAY;
      InboundPurchaseDocumentHeader."Time Processed" := TIME;
      InboundPurchaseDocumentHeader."Corresp. Accepted Document No." := PurchaseHeader."No.";
      InboundPurchaseDocumentHeader.MODIFY;
    END;

    PROCEDURE UpdatePurchaseDocument@4(VAR InboundPurchaseDocumentHeader@1000 : Record 99008502) : Boolean;
    VAR
      InboundPurchaseDocumentLine@1001 : Record 99008503;
      PurchOrderLine@1002 : Record 39;
      Currency@1003 : Record 4;
      ReservEntry@1010 : Record 337;
      BizTalkReservEntry@1011 : Record 99008533;
      BizTalkManagement@1004 : Codeunit 99008508;
      CreateReservEntry@1012 : Codeunit 99000830;
      ItemNo@1005 : Code[20];
      LineNo@1006 : Code[4];
      PreviousItemNo@1009 : Code[20];
      PreviousLineNo@1008 : Integer;
      RoundedAmount@1007 : Decimal;
    BEGIN
      PurchOrderHeader.VALIDATE("BizTalk Purchase Invoice",TRUE);
      PurchOrderHeader.VALIDATE("Vendor Invoice No.",InboundPurchaseDocumentHeader."Vendor Invoice No.");
      PurchOrderHeader.VALIDATE("Currency Code",InboundPurchaseDocumentHeader."Currency Code");

      CheckLines(InboundPurchaseDocumentHeader);

      PurchOrderLine.SETCURRENTKEY("Document Type","Document No.");
      PurchOrderLine.SETRANGE("Document Type", PurchOrderHeader."Document Type");
      PurchOrderLine.SETRANGE("Document No.", PurchOrderHeader."No.");

      CASE BizTalkPartnerSetup."Purchase Item Number Type" OF
        BizTalkPartnerSetup."Purchase Item Number Type"::"Internal Item No.":
          InboundPurchaseDocumentLine.SETCURRENTKEY("Inbound Document No.","No.");
        BizTalkPartnerSetup."Purchase Item Number Type"::"Vendor Item No.":
          InboundPurchaseDocumentLine.SETCURRENTKEY("Inbound Document No.","Vendor Item No.");
        BizTalkPartnerSetup."Purchase Item Number Type"::"Common Item No.":
          InboundPurchaseDocumentLine.SETCURRENTKEY("Inbound Document No.","Common Item No.");
      END;
      InboundPurchaseDocumentLine.SETRANGE("Inbound Document No.", InboundPurchaseDocumentHeader."Inbound Document No.");

      LineNo := '0';
      IF InboundPurchaseDocumentLine.FIND('-') THEN
        REPEAT
          LineNo := INCSTR(LineNo);
          CASE BizTalkPartnerSetup."Purchase Item Number Type" OF
            BizTalkPartnerSetup."Purchase Item Number Type"::"Internal Item No.":
              BEGIN
                InboundPurchaseDocumentHeader.TESTFIELD("No.");
                ItemNo := InboundPurchaseDocumentLine."No.";
              END;
            BizTalkPartnerSetup."Purchase Item Number Type"::"Vendor Item No.":
              BEGIN
                InboundPurchaseDocumentHeader.TESTFIELD("Buy-from Vendor No.");
                InboundPurchaseDocumentLine.TESTFIELD("Vendor Item No.");
                ItemNo := BizTalkManagement.ConvertVendorItemNo(
                  InboundPurchaseDocumentLine."Vendor Item No.",
                  InboundPurchaseDocumentHeader."Buy-from Vendor No.");
              END;
            BizTalkPartnerSetup."Purchase Item Number Type"::"Common Item No.":
              BEGIN
                InboundPurchaseDocumentLine.TESTFIELD("Common Item No.");
                ItemNo := BizTalkManagement.ConvertCommonItemNo(
                  InboundPurchaseDocumentLine."Common Item No.");
              END;
          END;
          IF PreviousItemNo <> ItemNo THEN
            PreviousLineNo := 0;
          PreviousItemNo := ItemNo;

          PurchOrderLine.SETRANGE("No.",ItemNo);
          PurchOrderLine.SETFILTER("Line No.",'>%1',PreviousLineNo);
          IF PurchOrderLine.FIND('-') THEN BEGIN
            IF InboundPurchaseDocumentLine.Quantity <> PurchOrderLine."Qty. to Invoice" THEN
                ERROR(Text014 + Text015,LineNo);

            CASE BizTalkPartnerSetup."Inv. Combined Amt/Cost/Disc." OF
              BizTalkPartnerSetup."Inv. Combined Amt/Cost/Disc."::Validate:
              BEGIN
                IF PurchOrderLine."Direct Unit Cost" <> InboundPurchaseDocumentLine."Direct Unit Cost" THEN
                  IF NOT HideDialogBox THEN BEGIN
                    IF NOT CONFIRM(Text016 + Text017,FALSE,
                      InboundPurchaseDocumentLine.FIELDCAPTION("Direct Unit Cost"),LineNo) THEN
                      EXIT(FALSE);
                  END ELSE
                    ERROR(Text016,InboundPurchaseDocumentLine.FIELDCAPTION("Direct Unit Cost"),LineNo);
                IF PurchOrderHeader."Currency Code" = '' THEN
                  Currency.InitRoundingPrecision
                ELSE
                  Currency.GET(PurchOrderHeader."Currency Code");
                Currency.TESTFIELD("Amount Rounding Precision");
                RoundedAmount := ROUND(InboundPurchaseDocumentLine.Amount,Currency."Amount Rounding Precision");
                IF PurchOrderLine.Amount <> RoundedAmount THEN
                  IF NOT HideDialogBox THEN BEGIN
                    IF NOT CONFIRM(Text016 + Text018,FALSE,
                      InboundPurchaseDocumentLine.FIELDCAPTION(Amount),LineNo) THEN
                      EXIT(FALSE);
                  END ELSE
                    ERROR(Text016,InboundPurchaseDocumentLine.FIELDCAPTION(Amount),LineNo);
                IF PurchOrderLine."Line Discount %" <> InboundPurchaseDocumentLine."Line Discount %" THEN
                  IF NOT HideDialogBox THEN BEGIN
                    IF NOT CONFIRM(Text016 + Text018,FALSE,
                      InboundPurchaseDocumentLine.FIELDCAPTION("Line Discount %"),LineNo) THEN
                      EXIT(FALSE);
                  END ELSE
                    ERROR(Text016,InboundPurchaseDocumentLine.FIELDCAPTION("Line Discount %"),LineNo);
                PurchOrderLine.VALIDATE("Direct Unit Cost",InboundPurchaseDocumentLine."Direct Unit Cost");
                PurchOrderLine.VALIDATE(Amount,InboundPurchaseDocumentLine.Amount);
                PurchOrderLine.VALIDATE("Line Discount %",InboundPurchaseDocumentLine."Line Discount %");
              END;
              BizTalkPartnerSetup."Inv. Combined Amt/Cost/Disc."::Adjust:
              BEGIN
                PurchOrderLine.VALIDATE("Direct Unit Cost",InboundPurchaseDocumentLine."Direct Unit Cost");
                PurchOrderLine.VALIDATE(Amount,InboundPurchaseDocumentLine.Amount);
                PurchOrderLine.VALIDATE("Line Discount %",InboundPurchaseDocumentLine."Line Discount %");
              END;
            END;

            PurchOrderLine.MODIFY;
            PreviousLineNo := PurchOrderLine."Line No.";

            BizTalkReservEntry.SETRANGE("BizTalk Document No.",
              InboundPurchaseDocumentHeader."Inbound Document No.");
            BizTalkReservEntry.SETRANGE("Biztalk Document Direction",
            BizTalkReservEntry."Biztalk Document Direction"::Inbound);
            BizTalkReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
            BizTalkReservEntry.SETRANGE("BizTalk Document Line No.",
              InboundPurchaseDocumentLine."Line No.");
            IF BizTalkReservEntry.FIND('-') THEN
              BEGIN
                ReservEntry.SETCURRENTKEY(
                  "Source ID","Source Ref. No.","Source Type","Source Subtype",
                  "Source Batch Name","Source Prod. Order Line","Reservation Status");
                ReservEntry.SETRANGE("Source ID",PurchOrderLine."No.");
                ReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
                ReservEntry.SETRANGE("Source Subtype",PurchOrderLine."Document Type");
                ReservEntry.DELETEALL(TRUE);
                REPEAT
                  Item.GET(ItemNo);
                  IF Item."Item Tracking Code" = '' THEN
                    ERROR(Text028,Item.FIELDCAPTION("Item Tracking Code"),Item.TABLECAPTION,Item.FIELDCAPTION("No."),
                      Item."No.",FORMAT(PurchOrderHeader."Document Type"),BizTalkReservEntry.TABLECAPTION);
                  CreateReservEntry.CreateReservEntryFor(
                    DATABASE::"Purchase Line",PurchOrderLine."Document Type",
                    PurchOrderHeader."No.",'',0,PurchOrderLine."Line No.",PurchOrderLine."Qty. per Unit of Measure",
                    BizTalkReservEntry.Quantity,BizTalkReservEntry."Serial No.",BizTalkReservEntry."Lot No.");
                  CreateReservEntry.CreateEntry(ItemNo,
                    PurchOrderLine."Variant Code",PurchOrderLine."Location Code",
                    BizTalkReservEntry.Description,
                    BizTalkReservEntry."Expected Receipt Date",
                    BizTalkReservEntry."Shipment Date",0,BizTalkReservEntry."Reservation Status");
                UNTIL BizTalkReservEntry.NEXT = 0;
              END;

          END ELSE
            ERROR(Text019);
        UNTIL InboundPurchaseDocumentLine.NEXT = 0;
      InboundPurchaseDocumentHeader.Status := InboundPurchaseDocumentHeader.Status::Accepted;
      InboundPurchaseDocumentHeader."Date Processed" := TODAY;
      InboundPurchaseDocumentHeader."Time Processed" := TIME;
      InboundPurchaseDocumentHeader."Corresp. Accepted Document No." := PurchOrderHeader."No.";
      InboundPurchaseDocumentHeader.MODIFY;
      PurchOrderHeader.MODIFY;
      EXIT(TRUE);
    END;

    PROCEDURE CheckLines@3(InboundPurchaseDocumentHeader@1000 : Record 99008502);
    VAR
      InboundPurchaseDocumentLine@1001 : Record 99008503;
      PurchOrderLine@1002 : Record 39;
      BizTalkManagement@1003 : Codeunit 99008508;
      LineNo@1004 : Code[4];
      ItemNo@1005 : Code[20];
      VendorItemNo@1006 : Text[20];
      CommonItemNo@1007 : Code[20];
    BEGIN
      LineNo := '0';
      PurchOrderLine.SETRANGE("Document Type",PurchOrderHeader."Document Type");
      PurchOrderLine.SETRANGE("Document No.", PurchOrderHeader."No.");
      PurchOrderLine.FIND('-');
      REPEAT
        LineNo := INCSTR(LineNo);
        CASE PurchOrderLine.Type OF
          PurchOrderLine.Type::" ":
            ERROR(
              Text020);
          PurchOrderLine.Type::Item:
            BEGIN
              InboundPurchaseDocumentLine.SETCURRENTKEY("Inbound Document No.");
              InboundPurchaseDocumentLine.SETRANGE("Inbound Document No.", InboundPurchaseDocumentHeader."Inbound Document No.");
              CASE BizTalkPartnerSetup."Purchase Item Number Type" OF
                BizTalkPartnerSetup."Purchase Item Number Type"::"Internal Item No.":
                  InboundPurchaseDocumentLine.SETRANGE("No.",PurchOrderLine."No.");
                BizTalkPartnerSetup."Purchase Item Number Type"::"Vendor Item No.":
                  BEGIN
                    VendorItemNo := BizTalkManagement.GetVendorItemNumber(
                      PurchOrderLine."No.",PurchOrderHeader."Buy-from Vendor No.");
                    IF VendorItemNo = '' THEN
                      ERROR(Text023,PurchOrderLine."No.");
                    InboundPurchaseDocumentLine.SETRANGE("Vendor Item No.",VendorItemNo);
                    IF NOT InboundPurchaseDocumentLine.FIND('-') THEN
                      ERROR(Text024 + Text025,VendorItemNo,LineNo);
                  END;
                BizTalkPartnerSetup."Purchase Item Number Type"::"Common Item No.":
                  BEGIN
                    CommonItemNo := BizTalkManagement.GetCommonItemNumber(PurchOrderLine."No.");
                    IF CommonItemNo = '' THEN
                      ERROR(Text026,PurchOrderLine."No.");
                    InboundPurchaseDocumentLine.SETRANGE("Common Item No.",CommonItemNo);
                    IF NOT InboundPurchaseDocumentLine.FIND('-') THEN
                      ERROR(Text027 + Text025,CommonItemNo,LineNo);
                  END;
              END;
            END;
          ELSE
            ERROR(Text012,PurchOrderLine.TABLECAPTION,PurchOrderLine.FIELDCAPTION(Type),FORMAT(PurchOrderLine.Type));
        END;
      UNTIL PurchOrderLine.NEXT = 0;
    END;

    PROCEDURE SetHideDialogBox@5(NewHideDialogBox@1000 : Boolean);
    BEGIN
      HideDialogBox := NewHideDialogBox;
    END;

    BEGIN
    END.
  }
}
