OBJECT Codeunit 408 DimensionManagement
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES6.00;
  }
  PROPERTIES
  {
    Permissions=TableData 80=imd,
                TableData 232=imd,
                TableData 355=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Dimensions %1 and %2 can''t be used concurrently.;ESP=Dimensiones %1 y %2 no pueden usarse simult neam.';
      Text001@1001 : TextConst 'ENU=Dimension combinations %1 - %2 and %3 - %4 can''t be used concurrently.;ESP=Combin. dimensi¢n %1 - %2 y %3 - %4 no pueden usarse al mismo tiempo.';
      Text002@1002 : TextConst 'ENU=This Shortcut Dimension is not defined in the %1.;ESP=Este Shortcut de dimensi¢n no est  def. en el %1.';
      Text003@1003 : TextConst 'ENU=%1 is not an available %2 for that dimension.;ESP=%1 no est  disponible %2 para esa dimensi¢n.';
      Text004@1004 : TextConst 'ENU=Select a %1 for the %2 %3.;ESP=Selecc. %1 para el %2 %3.';
      Text005@1005 : TextConst 'ENU=Select a %1 for the %2 %3 for %4 %5.;ESP=Selecc. %1 para el %2 %3 para %4 %5.';
      Text006@1006 : TextConst 'ENU=Select %1 %2 for the %3 %4.;ESP=Selecc. %1 %2 para el %3 %4.';
      Text007@1007 : TextConst 'ENU=Select %1 %2 for the %3 %4 for %5 %6.;ESP=Selecc. %1 %2 para el %3 %4 para %5 %6.';
      Text008@1008 : TextConst 'ENU=%1 %2 must be blank.;ESP=%1 %2 debe ser blanco.';
      Text009@1009 : TextConst 'ENU=%1 %2 must be blank for %3 %4.;ESP=%1 %2 debe ser blanco para %3 %4.';
      Text010@1010 : TextConst 'ENU=%1 %2 must not be mentioned.;ESP=%1 %2 no debe ser mencionado.';
      Text011@1011 : TextConst 'ENU=%1 %2 must not be mentioned for %3 %4.;ESP=%1 %2 no debe ser mencionado para %3 %4.';
      Text012@1012 : TextConst 'ENU=A %1 used in %2 has not been used in %3.;ESP=Un %1 usado en %2 no ha sido usado en %3.';
      Text013@1013 : TextConst 'ENU=%1 for %2 %3 is not the same in %4 and %5.;ESP=%1 para %2 %3 no es lo mismo en %4 y %5.';
      Text014@1014 : TextConst 'ENU=%1 %2 is blocked.;ESP=%1 %2 est  bloqueado.';
      Text015@1015 : TextConst 'ENU=%1 %2 can''t be found.;ESP=%1 %2 no puede encontrarse.';
      Text016@1016 : TextConst 'ENU=%1 %2 - %3 is blocked.;ESP=%1 %2 - %3 est  bloq.';
      Text017@1017 : TextConst 'ENU=%1 for %2 %3 - %4 must not be %5.;ESP=%1 para %2 %3 - %4 no debe ser %5.';
      Text018@1018 : TextConst 'ENU=%1 for %2 is missing.;ESP=%1 para %2 se pierde.';
      TempDimBuf1@1019 : TEMPORARY Record 360;
      TempDimBuf2@1020 : TEMPORARY Record 360;
      ObjTransl@1027 : Record 377;
      DimValComb@1032 : Record 351;
      JobTaskDimTemp@1033 : TEMPORARY Record 1002;
      TempDimCombInitialized@1031 : Boolean;
      TempDimCombEmpty@1030 : Boolean;
      DimCombErr@1021 : Text[250];
      DimValuePostingErr@1022 : Text[250];
      DimErr@1023 : Text[250];
      DocDimConsistencyErr@1024 : Text[250];
      HasGotGLSetup@1025 : Boolean;
      GLSetupShortcutDimCode@1026 : ARRAY [8] OF Code[20];
      DimensionChanged@1028 : Boolean;
      CheckNewDimValue@1029 : Boolean;

    LOCAL PROCEDURE GetGLSetup@52();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      IF NOT HasGotGLSetup THEN BEGIN
        GLSetup.GET;
        GLSetupShortcutDimCode[1] := GLSetup."Shortcut Dimension 1 Code";
        GLSetupShortcutDimCode[2] := GLSetup."Shortcut Dimension 2 Code";
        GLSetupShortcutDimCode[3] := GLSetup."Shortcut Dimension 3 Code";
        GLSetupShortcutDimCode[4] := GLSetup."Shortcut Dimension 4 Code";
        GLSetupShortcutDimCode[5] := GLSetup."Shortcut Dimension 5 Code";
        GLSetupShortcutDimCode[6] := GLSetup."Shortcut Dimension 6 Code";
        GLSetupShortcutDimCode[7] := GLSetup."Shortcut Dimension 7 Code";
        GLSetupShortcutDimCode[8] := GLSetup."Shortcut Dimension 8 Code";
        HasGotGLSetup := TRUE;
      END;
    END;

    PROCEDURE CheckJnlLineDimComb@10(VAR JnlLineDim@1000 : Record 356) : Boolean;
    BEGIN
      IF NOT TestDimValue(JnlLineDim) THEN
        EXIT(FALSE);
      IF CheckNewDimValue THEN
        IF NOT TestNewDimValue(JnlLineDim) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE CheckDocDimComb@14(VAR DocDim@1000 : Record 357) : Boolean;
    VAR
      i@1001 : Integer;
    BEGIN
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;
      IF DocDim.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := DATABASE::"Document Dimension";
          TempDimBuf1."Entry No." := i;
          TempDimBuf1."Dimension Code" := DocDim."Dimension Code";
          TempDimBuf1."Dimension Value Code" := DocDim."Dimension Value Code";
          TempDimBuf1.INSERT;
          i := i + 1;
        UNTIL DocDim.NEXT = 0;
      END;
      EXIT(CheckDimComb);
    END;

    PROCEDURE CheckServContractDimComb@91(VAR ServContractDim@1000 : Record 389) : Boolean;
    VAR
      i@1001 : Integer;
    BEGIN
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;
      IF ServContractDim.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := DATABASE::"Service Contract Dimension";
          TempDimBuf1."Entry No." := i;
          TempDimBuf1."Dimension Code" := ServContractDim."Dimension Code";
          TempDimBuf1."Dimension Value Code" := ServContractDim."Dimension Value Code";
          TempDimBuf1.INSERT;
          i := i + 1;
        UNTIL ServContractDim.NEXT = 0;
      END;
      EXIT(CheckDimComb);
    END;

    PROCEDURE CheckDimBuffer@64(VAR DimBuffer@1000 : Record 360) : Boolean;
    VAR
      i@1001 : Integer;
    BEGIN
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;
      IF DimBuffer.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := DATABASE::"Dimension Buffer";
          TempDimBuf1."Entry No." := i;
          TempDimBuf1."Dimension Code" := DimBuffer."Dimension Code";
          TempDimBuf1."Dimension Value Code" := DimBuffer."Dimension Value Code";
          TempDimBuf1.INSERT;
          i := i + 1;
        UNTIL DimBuffer.NEXT = 0;
      END;
      EXIT(CheckDimComb);
    END;

    LOCAL PROCEDURE CheckDimComb@3() : Boolean;
    VAR
      DimComb@1004 : Record 350;
      DimValComb@1003 : Record 351;
      CurrentDimCode@1001 : Code[20];
      CurrentDimValCode@1002 : Code[20];
      DimFilter@1005 : Text[1024];
      FilterTooLong@1000 : Boolean;
    BEGIN
      IF NOT TempDimCombInitialized THEN BEGIN
        TempDimCombInitialized := TRUE;
        IF DimComb.ISEMPTY THEN
          TempDimCombEmpty := TRUE;
      END;

      IF TempDimCombEmpty THEN
        EXIT(TRUE);

      IF NOT TempDimBuf1.FINDSET THEN
        EXIT(TRUE)
      ELSE
        REPEAT
          IF STRLEN(DimFilter) + 1 + STRLEN(TempDimBuf1."Dimension Code") > MAXSTRLEN(DimFilter) THEN
            FilterTooLong := TRUE
          ELSE
            IF DimFilter = '' THEN
              DimFilter := TempDimBuf1."Dimension Code"
            ELSE
              DimFilter := DimFilter + '|' + TempDimBuf1."Dimension Code";
        UNTIL FilterTooLong OR (TempDimBuf1.NEXT = 0);

      IF NOT FilterTooLong THEN BEGIN
        DimComb.SETFILTER("Dimension 1 Code",DimFilter);
        DimComb.SETFILTER("Dimension 2 Code",DimFilter);
        IF DimComb.FINDSET THEN
          REPEAT
            IF DimComb."Combination Restriction" = DimComb."Combination Restriction"::Blocked THEN BEGIN
              DimCombErr := STRSUBSTNO(Text000,DimComb."Dimension 1 Code",DimComb."Dimension 2 Code");
              EXIT(FALSE);
            END ELSE BEGIN
              TempDimBuf1.SETRANGE("Dimension Code",DimComb."Dimension 1 Code");
              TempDimBuf1.FINDFIRST;
              CurrentDimCode := TempDimBuf1."Dimension Code";
              CurrentDimValCode := TempDimBuf1."Dimension Value Code";
              TempDimBuf1.SETRANGE("Dimension Code",DimComb."Dimension 2 Code");
              TempDimBuf1.FINDFIRST;
              IF NOT
                CheckDimValueComb(
                  TempDimBuf1."Dimension Code",TempDimBuf1."Dimension Value Code",
                  CurrentDimCode,CurrentDimValCode)
                THEN
                  EXIT(FALSE);
              IF NOT
                CheckDimValueComb(
                  CurrentDimCode,CurrentDimValCode,
                  TempDimBuf1."Dimension Code",TempDimBuf1."Dimension Value Code")
                THEN
                  EXIT(FALSE);
            END;
          UNTIL DimComb.NEXT = 0;
        EXIT(TRUE);
      END;

      WHILE TempDimBuf1.FINDFIRST DO BEGIN
        CurrentDimCode := TempDimBuf1."Dimension Code";
        CurrentDimValCode := TempDimBuf1."Dimension Value Code";
        TempDimBuf1.DELETE;
        IF TempDimBuf1.FINDSET THEN
          REPEAT
            IF CurrentDimCode > TempDimBuf1."Dimension Code" THEN BEGIN
              IF DimComb.GET(TempDimBuf1."Dimension Code",CurrentDimCode) THEN BEGIN
                IF DimComb."Combination Restriction" = DimComb."Combination Restriction"::Blocked THEN BEGIN
                  DimCombErr :=
                    STRSUBSTNO(
                      Text000,
                      TempDimBuf1."Dimension Code",CurrentDimCode);
                  EXIT(FALSE);
                END ELSE
                  IF NOT
                    CheckDimValueComb(
                      TempDimBuf1."Dimension Code",TempDimBuf1."Dimension Value Code",
                      CurrentDimCode,CurrentDimValCode)
                  THEN
                    EXIT(FALSE);
              END;
            END ELSE BEGIN
              IF DimComb.GET(CurrentDimCode,TempDimBuf1."Dimension Code") THEN BEGIN
                IF DimComb."Combination Restriction" = DimComb."Combination Restriction"::Blocked THEN BEGIN
                  DimCombErr :=
                    STRSUBSTNO(
                      Text000,
                      CurrentDimCode,TempDimBuf1."Dimension Code");
                  EXIT(FALSE);
                END ELSE
                  IF NOT
                     CheckDimValueComb(
                       CurrentDimCode,CurrentDimValCode,TempDimBuf1."Dimension Code",
                       TempDimBuf1."Dimension Value Code")
                  THEN
                    EXIT(FALSE);
              END;
            END;
          UNTIL TempDimBuf1.NEXT = 0;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckDimValueComb@9(Dim1@1000 : Code[20];Dim1Value@1001 : Code[20];Dim2@1002 : Code[20];Dim2Value@1003 : Code[20]) : Boolean;
    BEGIN
      IF DimValComb.GET(Dim1,Dim1Value,Dim2,Dim2Value) THEN BEGIN
        DimCombErr :=
          STRSUBSTNO(Text001,
            Dim1,Dim1Value,Dim2,Dim2Value);
        EXIT(FALSE);
      END ELSE
        EXIT(TRUE);
    END;

    PROCEDURE GetDimCombErr@41() : Text[250];
    BEGIN
      EXIT(DimCombErr);
    END;

    PROCEDURE UpdateDefaultDim@59(TableID@1000 : Integer;No@1001 : Code[20];VAR GlobalDim1Code@1002 : Code[20];VAR GlobalDim2Code@1003 : Code[20]);
    VAR
      DefaultDim@1004 : Record 352;
    BEGIN
      GetGLSetup;
      IF DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[1]) THEN
        GlobalDim1Code := DefaultDim."Dimension Value Code"
      ELSE
        GlobalDim1Code := '';
      IF DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[2]) THEN
        GlobalDim2Code := DefaultDim."Dimension Value Code"
      ELSE
        GlobalDim2Code := '';
    END;

    PROCEDURE InsertJnlLineDim@82(TableID@1006 : Integer;JnlTemplateName@1005 : Code[10];JnlBatchName@1004 : Code[10];JnlLineNo@1003 : Integer;AllocationLineNo@1002 : Integer;VAR GlobalDim1Code@1001 : Code[20];VAR GlobalDim2Code@1000 : Code[20]);
    BEGIN
      IF TempDimBuf2.FINDFIRST THEN
        UpdateJnlLineDefaultDim(TableID,JnlTemplateName,JnlBatchName,JnlLineNo,AllocationLineNo,GlobalDim1Code,GlobalDim2Code);
    END;

    PROCEDURE UpdateJnlLineDefaultDim@115(TableID@1000 : Integer;JnlTemplateName@1001 : Code[10];JnlBatchName@1002 : Code[10];JnlLineNo@1003 : Integer;AllocationLineNo@1004 : Integer;VAR GlobalDim1Code@1005 : Code[20];VAR GlobalDim2Code@1006 : Code[20]);
    VAR
      JnlLineDim@1007 : Record 356;
      Dim@1012 : Record 348;
      DimValue@1013 : Record 349;
      RecRef@1008 : RecordRef;
      ChangeLogMgt@1009 : Codeunit 423;
    BEGIN
      GetGLSetup;
      JnlLineDim.SETRANGE("Table ID",TableID);
      JnlLineDim.SETRANGE("Journal Template Name",JnlTemplateName);
      JnlLineDim.SETRANGE("Journal Batch Name",JnlBatchName);
      JnlLineDim.SETRANGE("Journal Line No.",JnlLineNo);
      JnlLineDim.SETRANGE("Allocation Line No.",AllocationLineNo);
      IF NOT JnlLineDim.ISEMPTY THEN
        JnlLineDim.DELETEALL;
      GlobalDim1Code := '';
      GlobalDim2Code := '';
      IF TempDimBuf2.FINDSET THEN BEGIN
        REPEAT
          JnlLineDim.INIT;
          JnlLineDim.VALIDATE("Table ID",TableID);
          JnlLineDim.VALIDATE("Journal Template Name",JnlTemplateName);
          JnlLineDim.VALIDATE("Journal Batch Name",JnlBatchName);
          JnlLineDim.VALIDATE("Journal Line No.",JnlLineNo);
          JnlLineDim.VALIDATE("Allocation Line No.",AllocationLineNo);
          JnlLineDim."Dimension Code" := TempDimBuf2."Dimension Code";
          JnlLineDim."Dimension Value Code" := TempDimBuf2."Dimension Value Code";
          JnlLineDim."New Dimension Value Code" := TempDimBuf2."New Dimension Value Code";
          JnlLineDim.INSERT;
          RecRef.GETTABLE(JnlLineDim);
          ChangeLogMgt.LogInsertion(RecRef);
          IF JnlLineDim."Dimension Code" = GLSetupShortcutDimCode[1] THEN
            GlobalDim1Code := JnlLineDim."Dimension Value Code";
          IF JnlLineDim."Dimension Code" = GLSetupShortcutDimCode[2] THEN
            GlobalDim2Code := JnlLineDim."Dimension Value Code";
        UNTIL TempDimBuf2.NEXT = 0;
        TempDimBuf2.RESET;
        TempDimBuf2.DELETEALL;
      END;
    END;

    PROCEDURE GetJnlLineDefaultDim@72(VAR JnlLineDim@1000 : Record 356);
    BEGIN
      IF NOT JnlLineDim.ISEMPTY THEN
        JnlLineDim.DELETEALL;
      IF TempDimBuf2.FINDSET THEN
        REPEAT
          JnlLineDim."Dimension Code" := TempDimBuf2."Dimension Code";
          JnlLineDim."Dimension Value Code" := TempDimBuf2."Dimension Value Code";
          JnlLineDim."New Dimension Value Code" := TempDimBuf2."New Dimension Value Code";
          JnlLineDim.INSERT;
        UNTIL TempDimBuf2.NEXT = 0;
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
    END;

    PROCEDURE GetPreviousDocDefaultDim@37(TableID@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];LineNo@1003 : Integer;FromTableID@1004 : Integer;VAR GlobalDim1Code@1005 : Code[20];VAR GlobalDim2Code@1006 : Code[20]);
    VAR
      DocDim@1007 : Record 357;
    BEGIN
      GetGLSetup;
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;
      DocDim.SETRANGE("Table ID",TableID);
      DocDim.SETRANGE("Document Type",DocType);
      DocDim.SETRANGE("Document No.",DocNo);
      DocDim.SETRANGE("Line No.",LineNo);
      IF DocDim.FINDSET THEN BEGIN
        REPEAT
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := FromTableID;
          TempDimBuf1."Entry No." := 0;
          TempDimBuf1."Dimension Code" := DocDim."Dimension Code";
          TempDimBuf1."Dimension Value Code" := DocDim."Dimension Value Code";
          TempDimBuf1.INSERT;
          IF GLSetupShortcutDimCode[1] = TempDimBuf1."Dimension Code" THEN
            GlobalDim1Code :=  TempDimBuf1."Dimension Value Code";
          IF GLSetupShortcutDimCode[2] = TempDimBuf1."Dimension Code" THEN
            GlobalDim2Code :=  TempDimBuf1."Dimension Value Code";
        UNTIL DocDim.NEXT = 0;
      END;
    END;

    PROCEDURE GetPreviousProdDocDefaultDim@27(TableID@1000 : Integer;DocStatus@1001 : Option;DocNo@1002 : Code[20];DocLineNo@1003 : Integer;LineNo@1004 : Integer;VAR GlobalDim1Code@1005 : Code[20];VAR GlobalDim2Code@1006 : Code[20]);
    VAR
      ProdDocDim@1007 : Record 358;
    BEGIN
      GetGLSetup;
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;
      ProdDocDim.SETRANGE("Table ID",TableID);
      ProdDocDim.SETRANGE("Document Status",DocStatus);
      ProdDocDim.SETRANGE("Document No.",DocNo);
      ProdDocDim.SETRANGE("Document Line No.",DocLineNo);
      ProdDocDim.SETRANGE("Line No.",LineNo);
      IF ProdDocDim.FINDSET THEN BEGIN
        REPEAT
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := 0;
          TempDimBuf1."Entry No." := 0;
          TempDimBuf1."Dimension Code" := ProdDocDim."Dimension Code";
          TempDimBuf1."Dimension Value Code" := ProdDocDim."Dimension Value Code";
          TempDimBuf1.INSERT;
          IF GLSetupShortcutDimCode[1] = TempDimBuf1."Dimension Code" THEN
            GlobalDim1Code :=  TempDimBuf1."Dimension Value Code";
          IF GLSetupShortcutDimCode[2] = TempDimBuf1."Dimension Code" THEN
            GlobalDim2Code :=  TempDimBuf1."Dimension Value Code";
        UNTIL ProdDocDim.NEXT = 0;
      END;
    END;

    PROCEDURE InsertDocDim@83(TableID@1005 : Integer;DocType@1004 : Option;DocNo@1003 : Code[20];LineNo@1002 : Integer;VAR GlobalDim1Code@1001 : Code[20];VAR GlobalDim2Code@1000 : Code[20]);
    BEGIN
      IF TempDimBuf2.FINDFIRST THEN
        UpdateDocDefaultDim(TableID,DocType,DocNo,LineNo,GlobalDim1Code,GlobalDim2Code);
    END;

    PROCEDURE UpdateDocDefaultDim@19(TableID@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];LineNo@1003 : Integer;VAR GlobalDim1Code@1004 : Code[20];VAR GlobalDim2Code@1005 : Code[20]);
    VAR
      DocDim@1006 : Record 357;
      RecRef@1008 : RecordRef;
      ChangeLogMgt@1007 : Codeunit 423;
    BEGIN
      GetGLSetup;
      DocDim.SETRANGE("Table ID",TableID);
      DocDim.SETRANGE("Document Type",DocType);
      DocDim.SETRANGE("Document No.",DocNo);
      DocDim.SETRANGE("Line No.",LineNo);
      IF NOT DocDim.ISEMPTY THEN
        DocDim.DELETEALL;
      GlobalDim1Code := '';
      GlobalDim2Code := '';
      IF TempDimBuf2.FINDSET THEN BEGIN
        REPEAT
          DocDim.INIT;
          DocDim.VALIDATE("Table ID",TableID);
          DocDim.VALIDATE("Document Type",DocType);
          DocDim.VALIDATE("Document No.",DocNo);
          DocDim.VALIDATE("Line No.",LineNo);
          DocDim."Dimension Code" := TempDimBuf2."Dimension Code";
          DocDim."Dimension Value Code" := TempDimBuf2."Dimension Value Code";
          DocDim.INSERT;
          RecRef.GETTABLE(DocDim);
          ChangeLogMgt.LogInsertion(RecRef);
          IF DocDim."Dimension Code" = GLSetupShortcutDimCode[1] THEN
            GlobalDim1Code := DocDim."Dimension Value Code";
          IF DocDim."Dimension Code" = GLSetupShortcutDimCode[2] THEN
            GlobalDim2Code := DocDim."Dimension Value Code";
        UNTIL TempDimBuf2.NEXT = 0;
        TempDimBuf2.RESET;
        TempDimBuf2.DELETEALL;
      END;
    END;

    PROCEDURE ExtractDocDefaultDim@122(TableID@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];LineNo@1003 : Integer;VAR DocDim@1009 : Record 357);
    BEGIN
      GetGLSetup;
      IF TempDimBuf2.FINDSET THEN BEGIN
        REPEAT
          DocDim.INIT;
          DocDim.VALIDATE("Table ID",TableID);
          DocDim.VALIDATE("Document Type",DocType);
          DocDim.VALIDATE("Document No.",DocNo);
          DocDim.VALIDATE("Line No.",LineNo);
          DocDim."Dimension Code" := TempDimBuf2."Dimension Code";
          DocDim."Dimension Value Code" := TempDimBuf2."Dimension Value Code";
          DocDim.INSERT;
        UNTIL TempDimBuf2.NEXT = 0;
        TempDimBuf2.RESET;
        TempDimBuf2.DELETEALL;
      END;
    END;

    PROCEDURE InsertProdDocDim@84(TableID@1006 : Integer;DocStatus@1005 : Option;DocNo@1004 : Code[20];DocLineNo@1003 : Integer;LineNo@1002 : Integer;VAR GlobalDim1Code@1001 : Code[20];VAR GlobalDim2Code@1000 : Code[20]);
    BEGIN
      IF TempDimBuf2.FINDFIRST THEN
        UpdateProdDocDefaultDim(TableID,DocStatus,DocNo,DocLineNo,LineNo,GlobalDim1Code,GlobalDim2Code);
    END;

    PROCEDURE UpdateProdDocDefaultDim@12(TableID@1000 : Integer;DocStatus@1001 : Option;DocNo@1002 : Code[20];DocLineNo@1003 : Integer;LineNo@1004 : Integer;VAR GlobalDim1Code@1005 : Code[20];VAR GlobalDim2Code@1006 : Code[20]);
    VAR
      ProdDocDim@1007 : Record 358;
      RecRef@1009 : RecordRef;
      ChangeLogMgt@1008 : Codeunit 423;
    BEGIN
      GetGLSetup;
      ProdDocDim.SETRANGE("Table ID",TableID);
      ProdDocDim.SETRANGE("Document Status",DocStatus);
      ProdDocDim.SETRANGE("Document No.",DocNo);
      ProdDocDim.SETRANGE("Document Line No.",DocLineNo);
      ProdDocDim.SETRANGE("Line No.",LineNo);
      IF NOT ProdDocDim.ISEMPTY THEN
        ProdDocDim.DELETEALL;
      GlobalDim1Code := '';
      GlobalDim2Code := '';
      IF TempDimBuf2.FINDSET THEN BEGIN
        REPEAT
          ProdDocDim.INIT;
          ProdDocDim.VALIDATE("Table ID",TableID);
          ProdDocDim.VALIDATE("Document Status",DocStatus);
          ProdDocDim.VALIDATE("Document No.",DocNo);
          ProdDocDim.VALIDATE("Document Line No.",DocLineNo);
          ProdDocDim.VALIDATE("Line No.",LineNo);
          ProdDocDim."Dimension Code" := TempDimBuf2."Dimension Code";
          ProdDocDim."Dimension Value Code" := TempDimBuf2."Dimension Value Code";
          ProdDocDim.INSERT;
          RecRef.GETTABLE(ProdDocDim);
          ChangeLogMgt.LogInsertion(RecRef);
          IF ProdDocDim."Dimension Code" = GLSetupShortcutDimCode[1] THEN
            GlobalDim1Code := ProdDocDim."Dimension Value Code";
          IF ProdDocDim."Dimension Code" = GLSetupShortcutDimCode[2] THEN
            GlobalDim2Code := ProdDocDim."Dimension Value Code";
        UNTIL TempDimBuf2.NEXT = 0;
        TempDimBuf2.RESET;
        TempDimBuf2.DELETEALL;
      END;
    END;

    PROCEDURE InsertServContractDim@90(TableID@1006 : Integer;Type@1002 : Option;No@1004 : Code[20];LineNo@1003 : Integer;VAR GlobalDim1Code@1001 : Code[20];VAR GlobalDim2Code@1000 : Code[20]);
    BEGIN
      IF TempDimBuf2.FINDFIRST THEN
        UpdateServcontractDim(TableID,Type,No,LineNo,GlobalDim1Code,GlobalDim2Code);
    END;

    PROCEDURE UpdateServcontractDim@89(TableID@1000 : Integer;Type@1001 : Option;No@1002 : Code[20];LineNo@1004 : Integer;VAR GlobalDim1Code@1005 : Code[20];VAR GlobalDim2Code@1006 : Code[20]);
    VAR
      ServContractDim@1007 : Record 389;
      RecRef@1008 : RecordRef;
      ChangeLogMgt@1003 : Codeunit 423;
    BEGIN
      GetGLSetup;
      ServContractDim.SETRANGE("Table ID",TableID);
      ServContractDim.SETRANGE(Type,Type);
      ServContractDim.SETRANGE("No.",No);
      ServContractDim.SETRANGE("Line No.",LineNo);
      IF NOT ServContractDim.ISEMPTY THEN
        ServContractDim.DELETEALL;
      GlobalDim1Code := '';
      GlobalDim2Code := '';
      IF TempDimBuf2.FINDSET THEN BEGIN
        REPEAT
          ServContractDim.INIT;
          ServContractDim.VALIDATE("Table ID",TableID);
          ServContractDim.VALIDATE(Type,Type);
          ServContractDim.VALIDATE("No.",No);
          ServContractDim.VALIDATE("Line No.",LineNo);
          ServContractDim."Dimension Code" := TempDimBuf2."Dimension Code";
          ServContractDim."Dimension Value Code" := TempDimBuf2."Dimension Value Code";
          ServContractDim.INSERT;
          RecRef.GETTABLE(ServContractDim);
          ChangeLogMgt.LogInsertion(RecRef);
          IF ServContractDim."Dimension Code" = GLSetupShortcutDimCode[1] THEN
            GlobalDim1Code := ServContractDim."Dimension Value Code";
          IF ServContractDim."Dimension Code" = GLSetupShortcutDimCode[2] THEN
            GlobalDim2Code := ServContractDim."Dimension Value Code";
        UNTIL TempDimBuf2.NEXT = 0;
        TempDimBuf2.RESET;
        TempDimBuf2.DELETEALL;
      END;
    END;

    PROCEDURE UpdateDefaultDimNewDimValue@94();
    BEGIN
      WITH TempDimBuf2 DO
        IF FINDSET THEN
          REPEAT
            "New Dimension Value Code" := "Dimension Value Code";
            MODIFY;
          UNTIL NEXT = 0;
    END;

    PROCEDURE GetDefaultDim@8(TableID@1000 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20];"Source Code"@1002 : Code[20];VAR GlobalDim1Code@1003 : Code[20];VAR GlobalDim2Code@1004 : Code[20]);
    VAR
      DefaultDimPriority1@1005 : Record 354;
      DefaultDimPriority2@1006 : Record 354;
      DefaultDim@1007 : Record 352;
      i@1008 : Integer;
      j@1009 : Integer;
      NoFilter@1010 : ARRAY [2] OF Code[20];
    BEGIN
      GetGLSetup;
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
      IF TempDimBuf1.FINDSET THEN BEGIN
        REPEAT
          TempDimBuf2.INIT;
          TempDimBuf2 := TempDimBuf1;
          TempDimBuf2.INSERT;
        UNTIL TempDimBuf1.NEXT = 0;
      END;
      NoFilter[2] := '';
      FOR i := 1 TO ARRAYLEN(TableID) DO BEGIN
        IF (TableID[i] <> 0) AND (No[i] <> '') THEN BEGIN
          DefaultDim.SETRANGE("Table ID",TableID[i]);
          NoFilter[1] := No[i];
          FOR j := 1 TO 2 DO BEGIN
            DefaultDim.SETRANGE("No.",NoFilter[j]);
            IF DefaultDim.FINDSET THEN BEGIN
              REPEAT
                IF DefaultDim."Dimension Value Code" <> '' THEN BEGIN
                  TempDimBuf2.SETRANGE("Dimension Code",DefaultDim."Dimension Code");
                  IF NOT TempDimBuf2.FINDFIRST THEN BEGIN
                    TempDimBuf2.INIT;
                    TempDimBuf2."Table ID" := DefaultDim."Table ID";
                    TempDimBuf2."Entry No." := 0;
                    TempDimBuf2."Dimension Code" := DefaultDim."Dimension Code";
                    TempDimBuf2."Dimension Value Code" := DefaultDim."Dimension Value Code";
                    TempDimBuf2.INSERT;
                  END ELSE BEGIN
                    IF DefaultDimPriority1.GET("Source Code",DefaultDim."Table ID") THEN BEGIN
                      IF DefaultDimPriority2.GET("Source Code",TempDimBuf2."Table ID") THEN BEGIN
                        IF DefaultDimPriority1.Priority < DefaultDimPriority2.Priority THEN BEGIN
                          TempDimBuf2.DELETE;
                          TempDimBuf2."Table ID" := DefaultDim."Table ID";
                          TempDimBuf2."Entry No." := 0;
                          TempDimBuf2."Dimension Value Code" := DefaultDim."Dimension Value Code";
                          TempDimBuf2.INSERT;
                        END;
                      END ELSE BEGIN
                        TempDimBuf2.DELETE;
                        TempDimBuf2."Table ID" := DefaultDim."Table ID";
                        TempDimBuf2."Entry No." := 0;
                        TempDimBuf2."Dimension Value Code" := DefaultDim."Dimension Value Code";
                        TempDimBuf2.INSERT;
                      END;
                    END;
                  END;
                  IF GLSetupShortcutDimCode[1] = TempDimBuf2."Dimension Code" THEN
                    GlobalDim1Code :=  TempDimBuf2."Dimension Value Code";
                  IF GLSetupShortcutDimCode[2] = TempDimBuf2."Dimension Code" THEN
                    GlobalDim2Code :=  TempDimBuf2."Dimension Value Code";
                END;
              UNTIL DefaultDim.NEXT = 0;
            END;
          END;
        END;
      END;
      TempDimBuf2.RESET;
    END;

    PROCEDURE GetDocDim@74(TableID@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];DocLineNo@1003 : Integer;"Source Code"@1004 : Code[20];VAR GlobalDim1Code@1005 : Code[20];VAR GlobalDim2Code@1006 : Code[20]);
    VAR
      DocDim@1007 : Record 357;
    BEGIN
      GetGLSetup;
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
      IF TempDimBuf1.FINDSET THEN BEGIN
        REPEAT
          TempDimBuf2.INIT;
          TempDimBuf2 := TempDimBuf1;
          TempDimBuf2.INSERT;
        UNTIL TempDimBuf1.NEXT = 0;
      END;
      IF (TableID <> 0) AND (DocNo <> '') THEN BEGIN
        DocDim.SETRANGE("Table ID",TableID);
        DocDim.SETRANGE("Document Type",DocType);
        DocDim.SETRANGE("Document No.",DocNo);
        DocDim.SETRANGE("Line No.",DocLineNo);
        IF DocDim.FINDSET THEN BEGIN
          REPEAT
            IF DocDim."Dimension Value Code" <> '' THEN BEGIN
              TempDimBuf2.SETRANGE("Dimension Code",DocDim."Dimension Code");
              IF NOT TempDimBuf2.FINDFIRST THEN BEGIN
                TempDimBuf2.INIT;
                TempDimBuf2."Table ID" := DocDim."Table ID";
                TempDimBuf2."Entry No." := 0;
                TempDimBuf2."Dimension Code" := DocDim."Dimension Code";
                TempDimBuf2."Dimension Value Code" := DocDim."Dimension Value Code";
                TempDimBuf2.INSERT;
              END;
              IF GLSetupShortcutDimCode[1] = TempDimBuf2."Dimension Code" THEN
                GlobalDim1Code :=  TempDimBuf2."Dimension Value Code";
              IF GLSetupShortcutDimCode[2] = TempDimBuf2."Dimension Code" THEN
                GlobalDim2Code :=  TempDimBuf2."Dimension Value Code";
            END;
          UNTIL DocDim.NEXT = 0;
        END;
      END;
      TempDimBuf2.RESET;
    END;

    PROCEDURE GetProdDocDim@7(TableID@1004 : ARRAY [10] OF Integer;No@1003 : ARRAY [10] OF Code[20];VAR GlobalDim1Code@1001 : Code[20];VAR GlobalDim2Code@1000 : Code[20]);
    VAR
      ProdDocDim@1008 : Record 358;
      i@1006 : Integer;
      No2@1002 : Integer;
    BEGIN
      GetGLSetup;
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
      IF TempDimBuf1.FINDSET THEN BEGIN
        REPEAT
          TempDimBuf2.INIT;
          TempDimBuf2 := TempDimBuf1;
          TempDimBuf2.INSERT;
        UNTIL TempDimBuf1.NEXT = 0;
      END;

      ProdDocDim.SETRANGE("Document Status",ProdDocDim."Document Status"::Released);

      FOR i := 1 TO ARRAYLEN(TableID) DO BEGIN
        IF (TableID[i] <> 0) AND (No[i] <> '') THEN BEGIN
          CASE i OF
            1: BEGIN
                 ProdDocDim.SETRANGE("Table ID",TableID[i]);
                 ProdDocDim.SETRANGE("Document No.",No[i]);
                 ProdDocDim.SETRANGE("Document Line No.",0);
               END;
            2: BEGIN
                 ProdDocDim.SETRANGE("Table ID",TableID[i]);
                 EVALUATE(No2,No[i]);
                 ProdDocDim.SETRANGE("Document Line No.",No2);
               END;
            3: BEGIN
                 ProdDocDim.SETRANGE("Table ID",TableID[i]);
                 EVALUATE(No2,No[i]);
                 ProdDocDim.SETRANGE("Line No.",No2);
               END;
          END;

          IF ProdDocDim.FINDSET THEN BEGIN
            REPEAT
              IF ProdDocDim."Dimension Value Code" <> '' THEN BEGIN
                TempDimBuf2.SETRANGE("Dimension Code",ProdDocDim."Dimension Code");

                IF TempDimBuf2.FINDFIRST THEN
                  TempDimBuf2.DELETE;
                TempDimBuf2.INIT;
                TempDimBuf2."Table ID" := ProdDocDim."Table ID";
                TempDimBuf2."Entry No." := 0;
                TempDimBuf2."Dimension Code" := ProdDocDim."Dimension Code";
                TempDimBuf2."Dimension Value Code" := ProdDocDim."Dimension Value Code";
                TempDimBuf2.INSERT;

                IF GLSetupShortcutDimCode[1] = TempDimBuf2."Dimension Code" THEN
                   GlobalDim1Code :=  TempDimBuf2."Dimension Value Code";
                IF GLSetupShortcutDimCode[2] = TempDimBuf2."Dimension Code" THEN
                   GlobalDim2Code :=  TempDimBuf2."Dimension Value Code";
                END;
            UNTIL ProdDocDim.NEXT = 0;
          END;
        END;
      END;
      TempDimBuf2.RESET;
    END;

    PROCEDURE TypeToTableID1@11(Type@1000 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner') : Integer;
    BEGIN
      CASE Type OF
        Type::"G/L Account":
          EXIT(DATABASE::"G/L Account");
        Type::Customer:
          EXIT(DATABASE::Customer);
        Type::Vendor:
          EXIT(DATABASE::Vendor);
        Type::"Bank Account":
          EXIT(DATABASE::"Bank Account");
        Type::"Fixed Asset":
          EXIT(DATABASE::"Fixed Asset");
        Type::"IC Partner":
          EXIT(DATABASE::"IC Partner");
      END;
    END;

    PROCEDURE TypeToTableID2@13(Type@1000 : 'Resource,Item,G/L Account') : Integer;
    BEGIN
      CASE Type OF
        Type::Resource:
          EXIT(DATABASE::Resource);
        Type::Item:
          EXIT(DATABASE::Item);
        Type::"G/L Account":
          EXIT(DATABASE::"G/L Account");
      END;
    END;

    PROCEDURE TypeToTableID3@16(Type@1000 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)') : Integer;
    BEGIN
      CASE Type OF
        Type::" ":
          EXIT(0);
        Type::"G/L Account":
          EXIT(DATABASE::"G/L Account");
        Type::Item:
          EXIT(DATABASE::Item);
        Type::Resource:
          EXIT(DATABASE::Resource);
        Type::"Fixed Asset":
          EXIT(DATABASE::"Fixed Asset");
        Type::"Charge (Item)":
          EXIT(DATABASE::"Item Charge");
      END;
    END;

    PROCEDURE TypeToTableID4@1(Type@1000 : ' ,Item,Resource,Cost') : Integer;
    BEGIN
      CASE Type OF
        Type::" ":
          EXIT(0);
        Type::Item:
          EXIT(DATABASE::Item);
        Type::Resource:
          EXIT(DATABASE::Resource);
        Type::Cost:
          EXIT(DATABASE::"Service Cost");
      END;
    END;

    PROCEDURE TypeToTableID5@119(Type@1000 : ' ,Item,Resource,Cost,G/L Account') : Integer;
    BEGIN
      CASE Type OF
        Type::" ":
          EXIT(0);
        Type::Item:
          EXIT(DATABASE::Item);
        Type::Resource:
          EXIT(DATABASE::Resource);
        Type::Cost:
          EXIT(DATABASE::"Service Cost");
        Type::"G/L Account":
          EXIT(DATABASE::"G/L Account");
      END;
    END;

    PROCEDURE DeleteDefaultDim@58(TableID@1000 : Integer;No@1001 : Code[20]);
    VAR
      DefaultDim@1002 : Record 352;
    BEGIN
      DefaultDim.SETRANGE("Table ID",TableID);
      DefaultDim.SETRANGE("No.",No);
      IF NOT DefaultDim.ISEMPTY THEN
        DefaultDim.DELETEALL;
    END;

    PROCEDURE DeleteJnlLineDim@15(TableID@1000 : Integer;JnlTemplateName@1001 : Code[10];JnlBatchName@1002 : Code[10];JnlLineNo@1003 : Integer;AllocationLineNo@1004 : Integer);
    VAR
      JnlLineDim@1005 : Record 356;
    BEGIN
      JnlLineDim.SETRANGE("Table ID",TableID);
      JnlLineDim.SETRANGE("Journal Template Name",JnlTemplateName);
      JnlLineDim.SETRANGE("Journal Batch Name",JnlBatchName);
      JnlLineDim.SETRANGE("Journal Line No.",JnlLineNo);
      JnlLineDim.SETRANGE("Allocation Line No.",AllocationLineNo);
      IF NOT JnlLineDim.ISEMPTY THEN
        JnlLineDim.DELETEALL;
    END;

    PROCEDURE DeleteDocDim@17(TableID@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];LineNo@1003 : Integer);
    VAR
      DocDim@1004 : Record 357;
    BEGIN
      DocDim.SETRANGE("Table ID",TableID);
      DocDim.SETRANGE("Document Type",DocType);
      DocDim.SETRANGE("Document No.",DocNo);
      DocDim.SETRANGE("Line No.",LineNo);
      IF NOT DocDim.ISEMPTY THEN
        DocDim.DELETEALL;
    END;

    PROCEDURE DeletePostedDocDim@34(TableID@1000 : Integer;DocNo@1001 : Code[20];LineNo@1002 : Integer);
    VAR
      PostedDocDim@1003 : Record 359;
    BEGIN
      PostedDocDim.SETRANGE("Table ID",TableID);
      PostedDocDim.SETRANGE("Document No.",DocNo);
      PostedDocDim.SETRANGE("Line No.",LineNo);
      IF NOT PostedDocDim.ISEMPTY THEN
        PostedDocDim.DELETEALL;
    END;

    PROCEDURE DeleteProdDocDim@18(TableID@1000 : Integer;DocStatus@1001 : Option;DocNo@1002 : Code[20];DocLineNo@1003 : Integer;LineNo@1004 : Integer);
    VAR
      ProdDocDim@1005 : Record 358;
    BEGIN
      ProdDocDim.SETRANGE("Table ID",TableID);
      ProdDocDim.SETRANGE("Document Status",DocStatus);
      ProdDocDim.SETRANGE("Document No.",DocNo);
      ProdDocDim.SETRANGE("Document Line No.",DocLineNo);
      ProdDocDim.SETRANGE("Line No.",LineNo);
      IF NOT ProdDocDim.ISEMPTY THEN
        ProdDocDim.DELETEALL;
    END;

    PROCEDURE DeleteServContractDim@88(TableId@1000 : Integer;Type@1003 : Option;ServContractNo@1001 : Code[20]);
    VAR
      ServContractDim@1002 : Record 389;
    BEGIN
      ServContractDim.SETRANGE("Table ID",TableId);
      ServContractDim.SETRANGE(Type,Type);
      ServContractDim.SETRANGE("No.",ServContractNo);
      IF NOT ServContractDim.ISEMPTY THEN
        ServContractDim.DELETEALL;
    END;

    PROCEDURE LookupDimValueCode@21(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimVal@1002 : Record 349;
      GLSetup@1003 : Record 98;
    BEGIN
      GetGLSetup;
      IF GLSetupShortcutDimCode[FieldNumber] = '' THEN
        ERROR(Text002,GLSetup.TABLECAPTION);
      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      DimVal."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
      DimVal.Code := ShortcutDimCode;
      IF FORM.RUNMODAL(0,DimVal) = ACTION::LookupOK THEN BEGIN
        CheckDim(DimVal."Dimension Code");
        CheckDimValue(DimVal."Dimension Code",DimVal.Code);
        ShortcutDimCode := DimVal.Code;
      END;
    END;

    PROCEDURE ValidateDimValueCode@22(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimVal@1002 : Record 349;
      GLSetup@1003 : Record 98;
    BEGIN
      GetGLSetup;
      IF (GLSetupShortcutDimCode[FieldNumber] = '') AND (ShortcutDimCode <> '') THEN
        ERROR(Text002,GLSetup.TABLECAPTION);
      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      IF ShortcutDimCode <> '' THEN BEGIN
        DimVal.SETRANGE(Code,ShortcutDimCode);
        IF NOT DimVal.FINDFIRST THEN BEGIN
          DimVal.SETFILTER(Code,STRSUBSTNO('%1*',ShortcutDimCode));
          IF DimVal.FINDFIRST THEN
            ShortcutDimCode := DimVal.Code
          ELSE
            ERROR(
              STRSUBSTNO(Text003,
              ShortcutDimCode,DimVal.FIELDCAPTION(Code)));
        END;
      END;
    END;

    PROCEDURE SaveDefaultDim@53(TableID@1000 : Integer;No@1001 : Code[20];FieldNumber@1002 : Integer;ShortcutDimCode@1003 : Code[20]);
    VAR
      DefaultDim@1004 : Record 352;
      RecRef@1006 : RecordRef;
      xRecRef@1007 : RecordRef;
      ChangeLogMgt@1005 : Codeunit 423;
    BEGIN
      GetGLSetup;
      IF ShortcutDimCode <> '' THEN BEGIN
        IF DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          xRecRef.GETTABLE(DefaultDim);
          DefaultDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          DefaultDim.MODIFY;
          RecRef.GETTABLE(DefaultDim);
          ChangeLogMgt.LogModification(RecRef,xRecRef);
        END ELSE BEGIN
          DefaultDim.INIT;
          DefaultDim.VALIDATE("Table ID",TableID);
          DefaultDim.VALIDATE("No.",No);
          DefaultDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          DefaultDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          DefaultDim.INSERT;
          RecRef.GETTABLE(DefaultDim);
          ChangeLogMgt.LogInsertion(RecRef);
        END;
      END ELSE
        IF DefaultDim.GET(TableID,No,GLSetupShortcutDimCode[FieldNumber]) THEN BEGIN
          RecRef.GETTABLE(DefaultDim);
          DefaultDim.DELETE;
          ChangeLogMgt.LogDeletion(RecRef)
        END;
    END;

    PROCEDURE ShowJnlLineDim@23(TableID@1000 : Integer;JnlTemplateName@1001 : Code[10];JnlBatchName@1002 : Code[10];JnlLineNo@1003 : Integer;AllocationLineNo@1004 : Integer;VAR ShortcutDimCode@1005 : ARRAY [8] OF Code[20]);
    VAR
      JnlLineDim@1006 : Record 356;
      i@1007 : Integer;
    BEGIN
      GetGLSetup;
      FOR i := 3 TO 8 DO BEGIN
        ShortcutDimCode[i] := '';
        IF GLSetupShortcutDimCode[i] <> '' THEN
          IF JnlLineDim.GET(
               TableID,JnlTemplateName,JnlBatchName,
               JnlLineNo,AllocationLineNo,GLSetupShortcutDimCode[i])
          THEN
            ShortcutDimCode[i] := JnlLineDim."Dimension Value Code";
      END;
    END;

    PROCEDURE SaveJnlLineDim@24(TableID@1000 : Integer;JnlTemplateName@1001 : Code[10];JnlBatchName@1002 : Code[10];JnlLineNo@1003 : Integer;AllocationLineNo@1004 : Integer;FieldNumber@1005 : Integer;ShortcutDimCode@1006 : Code[20]);
    VAR
      JnlLineDim@1007 : Record 356;
      RecRef@1010 : RecordRef;
      xRecRef@1009 : RecordRef;
      ChangeLogMgt@1008 : Codeunit 423;
    BEGIN
      GetGLSetup;
      IF ShortcutDimCode <> '' THEN BEGIN
        IF JnlLineDim.GET(
          TableID,JnlTemplateName,JnlBatchName,
          JnlLineNo,AllocationLineNo,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          xRecRef.GETTABLE(JnlLineDim);
          JnlLineDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          JnlLineDim.MODIFY;
          RecRef.GETTABLE(JnlLineDim);
          ChangeLogMgt.LogModification(RecRef,xRecRef);
        END ELSE BEGIN
          JnlLineDim.INIT;
          JnlLineDim.VALIDATE("Table ID",TableID);
          JnlLineDim.VALIDATE("Journal Template Name",JnlTemplateName);
          JnlLineDim.VALIDATE("Journal Batch Name",JnlBatchName);
          JnlLineDim.VALIDATE("Journal Line No.",JnlLineNo);
          JnlLineDim.VALIDATE("Allocation Line No.",AllocationLineNo);
          JnlLineDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          JnlLineDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          JnlLineDim.INSERT;
          RecRef.GETTABLE(JnlLineDim);
          ChangeLogMgt.LogInsertion(RecRef);
        END;
      END ELSE
        IF JnlLineDim.GET(
          TableID,JnlTemplateName,JnlBatchName,
          JnlLineNo,AllocationLineNo,GLSetupShortcutDimCode[FieldNumber])
        THEN
          IF JnlLineDim."New Dimension Value Code" = '' THEN BEGIN
            RecRef.GETTABLE(JnlLineDim);
            JnlLineDim.DELETE;
            ChangeLogMgt.LogDeletion(RecRef);
          END ELSE BEGIN
            xRecRef.GETTABLE(JnlLineDim);
            JnlLineDim."Dimension Value Code" := '';
            JnlLineDim.MODIFY;
            RecRef.GETTABLE(JnlLineDim);
            ChangeLogMgt.LogModification(RecRef,xRecRef);
          END;
    END;

    PROCEDURE ShowJnlLineNewDim@47(TableID@1000 : Integer;JnlTemplateName@1001 : Code[10];JnlBatchName@1002 : Code[10];JnlLineNo@1003 : Integer;AllocationLineNo@1004 : Integer;VAR ShortcutNewDimCode@1005 : ARRAY [8] OF Code[20]);
    VAR
      JnlLineDim@1006 : Record 356;
      i@1007 : Integer;
    BEGIN
      GetGLSetup;
      FOR i := 3 TO 8 DO BEGIN
        ShortcutNewDimCode[i] := '';
        IF GLSetupShortcutDimCode[i] <> '' THEN
          IF JnlLineDim.GET(
               TableID,JnlTemplateName,JnlBatchName,
               JnlLineNo,AllocationLineNo,GLSetupShortcutDimCode[i])
          THEN
            ShortcutNewDimCode[i] := JnlLineDim."New Dimension Value Code";
      END;
    END;

    PROCEDURE SaveJnlLineNewDim@45(TableID@1000 : Integer;JnlTemplateName@1001 : Code[10];JnlBatchName@1002 : Code[10];JnlLineNo@1003 : Integer;AllocationLineNo@1004 : Integer;FieldNumber@1005 : Integer;ShortcutNewDimCode@1006 : Code[20]);
    VAR
      JnlLineDim@1007 : Record 356;
      RecRef@1010 : RecordRef;
      xRecRef@1009 : RecordRef;
      ChangeLogMgt@1008 : Codeunit 423;
    BEGIN
      GetGLSetup;
      IF ShortcutNewDimCode <> '' THEN BEGIN
        IF JnlLineDim.GET(
          TableID,JnlTemplateName,JnlBatchName,
          JnlLineNo,AllocationLineNo,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          xRecRef.GETTABLE(JnlLineDim);
          JnlLineDim.VALIDATE("New Dimension Value Code",ShortcutNewDimCode);
          JnlLineDim.MODIFY;
          RecRef.GETTABLE(JnlLineDim);
          ChangeLogMgt.LogModification(RecRef,xRecRef);
        END ELSE BEGIN
          JnlLineDim.INIT;
          JnlLineDim.VALIDATE("Table ID",TableID);
          JnlLineDim.VALIDATE("Journal Template Name",JnlTemplateName);
          JnlLineDim.VALIDATE("Journal Batch Name",JnlBatchName);
          JnlLineDim.VALIDATE("Journal Line No.",JnlLineNo);
          JnlLineDim.VALIDATE("Allocation Line No.",AllocationLineNo);
          JnlLineDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          JnlLineDim.VALIDATE("New Dimension Value Code",ShortcutNewDimCode);
          JnlLineDim.INSERT;
          RecRef.GETTABLE(JnlLineDim);
          ChangeLogMgt.LogInsertion(RecRef);
        END;
      END ELSE
        IF JnlLineDim.GET(
          TableID,JnlTemplateName,JnlBatchName,
          JnlLineNo,AllocationLineNo,GLSetupShortcutDimCode[FieldNumber])
        THEN
          IF JnlLineDim."Dimension Value Code" = '' THEN BEGIN
            RecRef.GETTABLE(JnlLineDim);
            JnlLineDim.DELETE;
            ChangeLogMgt.LogDeletion(RecRef);
          END ELSE BEGIN
            xRecRef.GETTABLE(JnlLineDim);
            JnlLineDim."New Dimension Value Code" := '';
            JnlLineDim.MODIFY;
            RecRef.GETTABLE(JnlLineDim);
            ChangeLogMgt.LogModification(RecRef,xRecRef);
          END;
    END;

    PROCEDURE ShowDocDim@29(TableID@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];LineNo@1003 : Integer;VAR ShortcutDimCode@1004 : ARRAY [8] OF Code[20]);
    VAR
      DocDim@1005 : Record 357;
      i@1006 : Integer;
    BEGIN
      GetGLSetup;
      FOR i := 3 TO 8 DO BEGIN
        ShortcutDimCode[i] := '';
        IF GLSetupShortcutDimCode[i] <> '' THEN
          IF DocDim.GET(TableID,DocType,DocNo,LineNo,GLSetupShortcutDimCode[i]) THEN
            ShortcutDimCode[i] := DocDim."Dimension Value Code";
      END;
    END;

    PROCEDURE SaveDocDim@28(TableID@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];LineNo@1003 : Integer;FieldNumber@1004 : Integer;ShortcutDimCode@1005 : Code[20]);
    VAR
      DocDim@1006 : Record 357;
      RecRef@1009 : RecordRef;
      xRecRef@1008 : RecordRef;
      ChangeLogMgt@1007 : Codeunit 423;
    BEGIN
      GetGLSetup;
      IF ShortcutDimCode <> '' THEN BEGIN
        IF DocDim.GET(
          TableID,DocType,DocNo,
          LineNo,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          xRecRef.GETTABLE(DocDim);
          DocDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          DocDim.UpdateLineDim(DocDim,FALSE);
          DocDim.MODIFY;
          RecRef.GETTABLE(DocDim);
          ChangeLogMgt.LogModification(RecRef,xRecRef);
        END ELSE BEGIN
          DocDim.INIT;
          DocDim.VALIDATE("Table ID",TableID);
          DocDim.VALIDATE("Document Type",DocType);
          DocDim.VALIDATE("Document No.",DocNo);
          DocDim.VALIDATE("Line No.",LineNo);
          DocDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          DocDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          DocDim.UpdateLineDim(DocDim,FALSE);
          DocDim.INSERT;
          RecRef.GETTABLE(DocDim);
          ChangeLogMgt.LogInsertion(RecRef);
        END;
      END ELSE
        IF DocDim.GET(
          TableID,DocType,DocNo,LineNo,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          RecRef.GETTABLE(DocDim);
          DocDim.UpdateLineDim(DocDim,TRUE);
          DocDim.DELETE;
          ChangeLogMgt.LogDeletion(RecRef);
        END;
    END;

    PROCEDURE ShowProdDocDim@32(TableID@1000 : Integer;DocStatus@1001 : Option;DocNo@1002 : Code[20];DocLineNo@1003 : Integer;LineNo@1004 : Integer;VAR ShortcutDimCode@1005 : ARRAY [8] OF Code[20]);
    VAR
      ProdDocDim@1006 : Record 358;
      i@1007 : Integer;
    BEGIN
      GetGLSetup;
      FOR i := 3 TO 8 DO BEGIN
        ShortcutDimCode[i] := '';
        IF GLSetupShortcutDimCode[i] <> '' THEN
          IF ProdDocDim.GET(TableID,DocStatus,DocNo,DocLineNo,LineNo,GLSetupShortcutDimCode[i]) THEN
            ShortcutDimCode[i] := ProdDocDim."Dimension Value Code";
      END;
    END;

    PROCEDURE SaveProdDocDim@30(TableID@1000 : Integer;DocStatus@1001 : Option;DocNo@1002 : Code[20];DocLineNo@1003 : Integer;LineNo@1004 : Integer;FieldNumber@1005 : Integer;ShortcutDimCode@1006 : Code[20]);
    VAR
      ProdDocDim@1007 : Record 358;
      RecRef@1010 : RecordRef;
      xRecRef@1009 : RecordRef;
      ChangeLogMgt@1008 : Codeunit 423;
    BEGIN
      GetGLSetup;
      IF ShortcutDimCode <> '' THEN BEGIN
        IF ProdDocDim.GET(
          TableID,DocStatus,DocNo,
          DocLineNo,LineNo,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          xRecRef.GETTABLE(ProdDocDim);
          ProdDocDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          ProdDocDim.UpdateLineDim(ProdDocDim,FALSE);
          ProdDocDim.MODIFY;
          RecRef.GETTABLE(ProdDocDim);
          ChangeLogMgt.LogModification(RecRef,xRecRef);
        END ELSE BEGIN
          ProdDocDim.INIT;
          ProdDocDim.VALIDATE("Table ID",TableID);
          ProdDocDim.VALIDATE("Document Status",DocStatus);
          ProdDocDim.VALIDATE("Document No.",DocNo);
          ProdDocDim.VALIDATE("Document Line No.",DocLineNo);
          ProdDocDim.VALIDATE("Line No.",LineNo);
          ProdDocDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          ProdDocDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          ProdDocDim.UpdateLineDim(ProdDocDim,FALSE);
          ProdDocDim.INSERT;
          RecRef.GETTABLE(ProdDocDim);
          ChangeLogMgt.LogInsertion(RecRef);
        END;
      END ELSE
        IF ProdDocDim.GET(
          TableID,DocStatus,DocNo,
          DocLineNo,LineNo,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          RecRef.GETTABLE(ProdDocDim);
          ProdDocDim.UpdateLineDim(ProdDocDim,TRUE);
          ProdDocDim.DELETE;
          ChangeLogMgt.LogDeletion(RecRef);
        END;
    END;

    PROCEDURE ShowTempDim@26(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    VAR
      i@1002 : Integer;
    BEGIN
      GetGLSetup;
      FOR i := 3 TO 8 DO BEGIN
        ShortcutDimCode[i] := '';
        IF GLSetupShortcutDimCode[i] <> '' THEN BEGIN
          TempDimBuf2.SETRANGE("Dimension Code",GLSetupShortcutDimCode[i]);
          IF TempDimBuf2.FINDFIRST THEN
            ShortcutDimCode[i] := TempDimBuf2."Dimension Value Code";
        END;
      END;
      TempDimBuf2.RESET;
    END;

    PROCEDURE SaveTempDim@25(FieldNumber@1000 : Integer;ShortcutDimCode@1001 : Code[20]);
    BEGIN
      GetGLSetup;
      TempDimBuf2.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      IF ShortcutDimCode <> '' THEN BEGIN
        IF TempDimBuf2.FINDFIRST THEN BEGIN
          TempDimBuf2.VALIDATE("Dimension Value Code",ShortcutDimCode);
          TempDimBuf2.MODIFY;
        END ELSE BEGIN
          TempDimBuf2.INIT;
          TempDimBuf2.VALIDATE("Table ID",0);
          TempDimBuf2.VALIDATE("Entry No.",0);
          TempDimBuf2.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          TempDimBuf2.VALIDATE("Dimension Value Code",ShortcutDimCode);
          TempDimBuf2.INSERT;
        END;
      END ELSE
        IF TempDimBuf2.FINDFIRST THEN
          IF TempDimBuf2."New Dimension Value Code" = '' THEN
            TempDimBuf2.DELETE
          ELSE BEGIN
            TempDimBuf2."Dimension Value Code" := '';
            TempDimBuf2.MODIFY;
          END;
      TempDimBuf2.RESET;
    END;

    PROCEDURE ShowTempNewDim@49(VAR ShortcutNewDimCode@1000 : ARRAY [8] OF Code[20]);
    VAR
      i@1002 : Integer;
    BEGIN
      GetGLSetup;
      FOR i := 3 TO 8 DO BEGIN
        ShortcutNewDimCode[i] := '';
        IF GLSetupShortcutDimCode[i] <> '' THEN BEGIN
          TempDimBuf2.SETRANGE("Dimension Code",GLSetupShortcutDimCode[i]);
          IF TempDimBuf2.FINDFIRST THEN
            ShortcutNewDimCode[i] := TempDimBuf2."New Dimension Value Code";
        END;
      END;
      TempDimBuf2.RESET;
    END;

    PROCEDURE SaveTempNewDim@48(FieldNumber@1000 : Integer;ShortcutNewDimCode@1001 : Code[20]);
    BEGIN
      GetGLSetup;
      TempDimBuf2.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      IF ShortcutNewDimCode <> '' THEN BEGIN
        IF TempDimBuf2.FINDFIRST THEN BEGIN
          TempDimBuf2.VALIDATE("New Dimension Value Code",ShortcutNewDimCode);
          TempDimBuf2.MODIFY;
        END ELSE BEGIN
          TempDimBuf2.INIT;
          TempDimBuf2.VALIDATE("Table ID",0);
          TempDimBuf2.VALIDATE("Entry No.",0);
          TempDimBuf2.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          TempDimBuf2.VALIDATE("New Dimension Value Code",ShortcutNewDimCode);
          TempDimBuf2.INSERT;
        END;
      END ELSE
        IF TempDimBuf2.FINDFIRST THEN
          IF TempDimBuf2."Dimension Value Code" = '' THEN
            TempDimBuf2.DELETE
          ELSE BEGIN
            TempDimBuf2."New Dimension Value Code" := '';
            TempDimBuf2.MODIFY;
          END;
      TempDimBuf2.RESET;
    END;

    PROCEDURE SaveServContractDim@85(TableID@1000 : Integer;Type@1001 : Option;No@1002 : Code[20];LineNo@1003 : Integer;FieldNumber@1004 : Integer;ShortcutDimCode@1005 : Code[20]);
    VAR
      ServContrDim@1006 : Record 389;
      RecRef@1009 : RecordRef;
      xRecRef@1008 : RecordRef;
      ChangeLogMgt@1007 : Codeunit 423;
    BEGIN
      GetGLSetup;
      IF ShortcutDimCode <> '' THEN BEGIN
        IF ServContrDim.GET(
          TableID,Type,No,
          LineNo,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          xRecRef.GETTABLE(ServContrDim);
          ServContrDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          ServContrDim.MODIFY;
          RecRef.GETTABLE(ServContrDim);
          ChangeLogMgt.LogModification(RecRef,xRecRef);
        END ELSE BEGIN
          ServContrDim.INIT;
          ServContrDim.VALIDATE("Table ID",TableID);
          ServContrDim.VALIDATE(Type,Type);
          ServContrDim.VALIDATE("No.",No);
          ServContrDim.VALIDATE("Line No.",LineNo);
          ServContrDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          ServContrDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          ServContrDim.INSERT;
          RecRef.GETTABLE(ServContrDim);
          ChangeLogMgt.LogInsertion(RecRef);
        END;
      END ELSE
        IF ServContrDim.GET(
          TableID,Type,No,LineNo,GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          RecRef.GETTABLE(ServContrDim);
          ServContrDim.DELETE;
          ChangeLogMgt.LogDeletion(RecRef);
        END;
    END;

    PROCEDURE CheckDimBufferValuePosting@68(VAR DimBuffer@1000 : Record 360;TableID@1001 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]) : Boolean;
    VAR
      i@1005 : Integer;
    BEGIN
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
      IF DimBuffer.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          IF (NOT CheckDimValue(
            DimBuffer."Dimension Code",DimBuffer."Dimension Value Code")) OR
            (NOT CheckDim(DimBuffer."Dimension Code"))
          THEN BEGIN
            DimValuePostingErr := DimErr;
            EXIT(FALSE);
          END;
          TempDimBuf2.INIT;
          TempDimBuf2."Table ID" := DATABASE::"Document Dimension";
          TempDimBuf2."Entry No." := i;
          TempDimBuf2."Dimension Code" := DimBuffer."Dimension Code";
          TempDimBuf2."Dimension Value Code" := DimBuffer."Dimension Value Code";
          TempDimBuf2.INSERT;
          i := i + 1;
        UNTIL DimBuffer.NEXT = 0;
      END;
      EXIT(CheckValuePosting(TableID,No));
    END;

    PROCEDURE CheckJnlLineDimValuePosting@35(VAR JnlLineDim@1000 : Record 356;TableID@1001 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]) : Boolean;
    VAR
      i@1005 : Integer;
    BEGIN
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
      IF JnlLineDim.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          IF (NOT CheckDimValue(JnlLineDim."Dimension Code",JnlLineDim."Dimension Value Code")) OR
            (NOT CheckDim(JnlLineDim."Dimension Code"))
          THEN BEGIN
            DimValuePostingErr := DimErr;
            EXIT(FALSE);
          END;
          TempDimBuf2.INIT;
          TempDimBuf2."Table ID" := DATABASE::"Journal Line Dimension";
          TempDimBuf2."Dimension Code" := JnlLineDim."Dimension Code";
          IF JnlLineDim."Dimension Value Code" <> '' THEN BEGIN
            TempDimBuf2."Entry No." := i;
            TempDimBuf2."Dimension Value Code" := JnlLineDim."Dimension Value Code";
            TempDimBuf2.INSERT;
            i := i + 1;
          END;
          IF JnlLineDim."New Dimension Value Code" <> '' THEN BEGIN
            TempDimBuf2."Entry No." := i;
            TempDimBuf2."Dimension Value Code" := JnlLineDim."Dimension Value Code";
            TempDimBuf2.INSERT;
            i := i + 1;
          END;
        UNTIL JnlLineDim.NEXT = 0;
      END;
      EXIT(CheckValuePosting(TableID,No));
    END;

    PROCEDURE CheckJnlLineNewDimValuePosting@75(VAR JnlLineDim@1002 : Record 356;TableID@1001 : ARRAY [10] OF Integer;No@1000 : ARRAY [10] OF Code[20]) : Boolean;
    VAR
      i@1003 : Integer;
    BEGIN
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
      IF JnlLineDim.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          IF (NOT CheckDimValue(JnlLineDim."Dimension Code",JnlLineDim."New Dimension Value Code")) OR
            (NOT CheckDim(JnlLineDim."Dimension Code"))
          THEN BEGIN
            DimValuePostingErr := DimErr;
            EXIT(FALSE);
          END;
          TempDimBuf2.INIT;
          TempDimBuf2."Table ID" := DATABASE::"Journal Line Dimension";
          TempDimBuf2."Dimension Code" := JnlLineDim."Dimension Code";
          IF JnlLineDim."New Dimension Value Code" <> '' THEN BEGIN
            TempDimBuf2."Entry No." := i;
            TempDimBuf2."Dimension Value Code" := JnlLineDim."New Dimension Value Code";
            TempDimBuf2.INSERT;
            i := i + 1;
          END;
        UNTIL JnlLineDim.NEXT = 0;
      END;
      EXIT(CheckValuePosting(TableID,No));
    END;

    PROCEDURE CheckDocDimValuePosting@38(VAR DocDim@1000 : Record 357;TableID@1001 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]) : Boolean;
    VAR
      i@1005 : Integer;
    BEGIN
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
      IF DocDim.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          IF (NOT CheckDimValue(DocDim."Dimension Code",DocDim."Dimension Value Code")) OR
            (NOT CheckDim(DocDim."Dimension Code"))
          THEN BEGIN
            DimValuePostingErr := DimErr;
            EXIT(FALSE);
          END;
          TempDimBuf2.INIT;
          TempDimBuf2."Table ID" := DATABASE::"Document Dimension";
          TempDimBuf2."Entry No." := i;
          TempDimBuf2."Dimension Code" := DocDim."Dimension Code";
          TempDimBuf2."Dimension Value Code" := DocDim."Dimension Value Code";
          TempDimBuf2.INSERT;
          i := i + 1;
        UNTIL DocDim.NEXT = 0;
      END;
      EXIT(CheckValuePosting(TableID,No));
    END;

    PROCEDURE CheckServContrDimValuePosting@87(VAR ServContractDim@1000 : Record 389;TableID@1001 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]) : Boolean;
    VAR
      i@1005 : Integer;
    BEGIN
      TempDimBuf2.RESET;
      TempDimBuf2.DELETEALL;
      IF ServContractDim.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          IF (NOT CheckDimValue(ServContractDim."Dimension Code",ServContractDim."Dimension Value Code")) OR
            (NOT CheckDim(ServContractDim."Dimension Code"))
          THEN BEGIN
            DimValuePostingErr := DimErr;
            EXIT(FALSE);
          END;
          TempDimBuf2.INIT;
          TempDimBuf2."Table ID" := DATABASE::"Service Contract Dimension";
          TempDimBuf2."Entry No." := i;
          TempDimBuf2."Dimension Code" := ServContractDim."Dimension Code";
          TempDimBuf2."Dimension Value Code" := ServContractDim."Dimension Value Code";
          TempDimBuf2.INSERT;
          i := i + 1;
        UNTIL ServContractDim.NEXT = 0;
      END;
      EXIT(CheckValuePosting(TableID,No));
    END;

    LOCAL PROCEDURE CheckValuePosting@36(TableID@1000 : ARRAY [10] OF Integer;No@1001 : ARRAY [10] OF Code[20]) : Boolean;
    VAR
      DefaultDim@1002 : Record 352;
      i@1004 : Integer;
      j@1005 : Integer;
      NoFilter@1006 : ARRAY [2] OF Text[250];
    BEGIN
      DefaultDim.SETFILTER("Value Posting",'<>%1',DefaultDim."Value Posting"::" ");
      NoFilter[2] := '';
      FOR i := 1 TO ARRAYLEN(TableID) DO BEGIN
        IF (TableID[i] <> 0) AND (No[i] <> '') THEN BEGIN
          DefaultDim.SETRANGE("Table ID",TableID[i]);
          NoFilter[1] := No[i];
          FOR j := 1 TO 2 DO BEGIN
            DefaultDim.SETRANGE("No.",NoFilter[j]);
            IF DefaultDim.FINDSET THEN BEGIN
              REPEAT
                TempDimBuf2.SETRANGE("Dimension Code",DefaultDim."Dimension Code");
                CASE DefaultDim."Value Posting" OF
                  DefaultDim."Value Posting"::"Code Mandatory":
                    BEGIN
                      IF (NOT TempDimBuf2.FINDFIRST) OR
                           (TempDimBuf2."Dimension Value Code" = '')
                      THEN BEGIN
                        IF DefaultDim."No." = '' THEN
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text004,
                              DefaultDim.FIELDCAPTION("Dimension Value Code"),
                              DefaultDim.FIELDCAPTION("Dimension Code"),DefaultDim."Dimension Code")
                        ELSE
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text005,
                              DefaultDim.FIELDCAPTION("Dimension Value Code"),
                              DefaultDim.FIELDCAPTION("Dimension Code"),
                              DefaultDim."Dimension Code",
                              ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                              DefaultDim."No.");
                        EXIT(FALSE);
                      END;
                    END;
                  DefaultDim."Value Posting"::"Same Code":
                    BEGIN
                      IF (DefaultDim."Dimension Value Code" <> '') THEN BEGIN
                        IF (NOT TempDimBuf2.FINDFIRST) OR
                          (DefaultDim."Dimension Value Code" <> TempDimBuf2."Dimension Value Code")
                        THEN BEGIN
                          IF DefaultDim."No." = '' THEN
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text006,
                                DefaultDim.FIELDCAPTION("Dimension Value Code"),DefaultDim."Dimension Value Code",
                                DefaultDim.FIELDCAPTION("Dimension Code"),DefaultDim."Dimension Code")
                          ELSE
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text007,
                                DefaultDim.FIELDCAPTION("Dimension Value Code"),
                                DefaultDim."Dimension Value Code",
                                DefaultDim.FIELDCAPTION("Dimension Code"),
                                DefaultDim."Dimension Code",
                                ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                                DefaultDim."No.");
                          EXIT(FALSE);
                        END;
                      END ELSE BEGIN
                        IF TempDimBuf2.FINDFIRST THEN BEGIN
                          IF DefaultDim."No." = '' THEN
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text008,
                                TempDimBuf2.FIELDCAPTION("Dimension Code"),TempDimBuf2."Dimension Code")
                          ELSE
                            DimValuePostingErr :=
                              STRSUBSTNO(
                                Text009,
                                TempDimBuf2.FIELDCAPTION("Dimension Code"),
                                TempDimBuf2."Dimension Code",
                                ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                                DefaultDim."No.");
                          EXIT(FALSE);
                        END;
                      END;
                    END;
                  DefaultDim."Value Posting"::"No Code":
                    BEGIN
                      IF TempDimBuf2.FINDFIRST THEN BEGIN
                        IF DefaultDim."No." = '' THEN
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text010,
                              TempDimBuf2.FIELDCAPTION("Dimension Code"),TempDimBuf2."Dimension Code")
                        ELSE
                          DimValuePostingErr :=
                            STRSUBSTNO(
                              Text011,
                              TempDimBuf2.FIELDCAPTION("Dimension Code"),
                              TempDimBuf2."Dimension Code",
                              ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DefaultDim."Table ID"),
                              DefaultDim."No.");
                        EXIT(FALSE);
                      END;
                    END;
                END;
              UNTIL DefaultDim.NEXT = 0;
              TempDimBuf2.RESET;
            END;
          END;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetDimValuePostingErr@98() : Text[250];
    BEGIN
      EXIT(DimValuePostingErr);
    END;

    PROCEDURE SetupObjectNoList@40(VAR TempObject@1000 : TEMPORARY Record 2000000001);
    VAR
      Object@1001 : Record 2000000001;
      TableIDArray@1003 : ARRAY [26] OF Integer;
      Index@1004 : Integer;
    BEGIN
      TableIDArray[1] := DATABASE::"Salesperson/Purchaser";
      TableIDArray[2] := DATABASE::"G/L Account";
      TableIDArray[3] := DATABASE::Customer;
      TableIDArray[4] := DATABASE::Vendor;
      TableIDArray[5] := DATABASE::Item;
      TableIDArray[6] := DATABASE::"Resource Group";
      TableIDArray[7] := DATABASE::Resource;
      TableIDArray[8] := DATABASE::Job;
      TableIDArray[9] := DATABASE::"Bank Account";
      TableIDArray[10] := DATABASE::Campaign;
      TableIDArray[11] := DATABASE::Employee;
      TableIDArray[12] := DATABASE::"Fixed Asset";
      TableIDArray[13] := DATABASE::Insurance;
      TableIDArray[14] := DATABASE::"Responsibility Center";
      TableIDArray[15] := DATABASE::"Item Charge";
      TableIDArray[16] := DATABASE::"Work Center";
      TableIDArray[17] := DATABASE::"Service Contract Header";
      TableIDArray[18] := DATABASE::"Customer Template";
      TableIDArray[19] := DATABASE::"Service Contract Template";
      TableIDArray[20] := DATABASE::"IC Partner";
      TableIDArray[21] := DATABASE::"Service Order Type";
      TableIDArray[22] := DATABASE::"Service Item Group";
      TableIDArray[23] := DATABASE::"Service Item";
      TableIDArray[25] := DATABASE::"Historic G/L Account";
      TableIDArray[26] := DATABASE::"New G/L Account";

      Object.SETRANGE(Type,Object.Type::Table);

      FOR Index := 1 TO ARRAYLEN(TableIDArray) DO BEGIN
        Object.SETRANGE(Object.ID,TableIDArray[Index]);
        IF Object.FINDFIRST THEN BEGIN
          TempObject := Object;
          TempObject.INSERT;
        END;
      END;
    END;

    PROCEDURE MoveJnlLineDimToLedgEntryDim@42(VAR JnlLineDim@1000 : Record 356;ToTableID@1001 : Integer;ToEntryNo@1002 : Integer);
    VAR
      LedgEntryDim@1003 : Record 355;
    BEGIN
      WITH JnlLineDim DO
        IF FINDSET THEN
          REPEAT
            LedgEntryDim.INIT;
            LedgEntryDim."Table ID" := ToTableID;
            LedgEntryDim."Entry No." := ToEntryNo;
            LedgEntryDim."Dimension Code" := "Dimension Code";
            LedgEntryDim."Dimension Value Code" := "Dimension Value Code";
            LedgEntryDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveDocDimToPostedDocDim@62(VAR DocDim@1000 : Record 357;ToTableID@1001 : Integer;ToNo@1002 : Code[20]);
    VAR
      PostedDocDim@1003 : Record 359;
    BEGIN
      WITH DocDim DO
        IF FINDSET THEN
          REPEAT
            PostedDocDim.INIT;
            PostedDocDim."Table ID" := ToTableID;
            PostedDocDim."Document No." := ToNo;
            PostedDocDim."Line No." := "Line No.";
            PostedDocDim."Dimension Code" := "Dimension Code";
            PostedDocDim."Dimension Value Code" := "Dimension Value Code";
            PostedDocDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveOneDocDimToPostedDocDim@63(VAR FromDocDim@1000 : Record 357;FromTableID@1001 : Integer;FromDocType@1002 : Integer;FromDocNo@1003 : Code[20];FromLineNo@1004 : Integer;ToTableID@1005 : Integer;ToDocNo@1006 : Code[20]);
    VAR
      ToPostedDocDim@1007 : Record 359;
    BEGIN
      WITH FromDocDim DO BEGIN
        SETRANGE("Table ID",FromTableID);
        SETRANGE("Document Type",FromDocType);
        SETRANGE("Document No.",FromDocNo);
        SETRANGE("Line No.",FromLineNo);
        IF FINDSET THEN
          REPEAT
            ToPostedDocDim.INIT;
            ToPostedDocDim."Table ID" := ToTableID;
            ToPostedDocDim."Document No." := ToDocNo;
            ToPostedDocDim."Line No." := "Line No.";
            ToPostedDocDim."Dimension Code" := "Dimension Code";
            ToPostedDocDim."Dimension Value Code" := "Dimension Value Code";
            ToPostedDocDim.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE MoveLedgEntryDimToJnlLineDim@66(VAR FromLedgEntryDim@1000 : Record 355;VAR ToJnlLineDim@1001 : Record 356;ToTableID@1002 : Integer;ToJnlTemplateName@1003 : Code[10];ToJnlBatchName@1004 : Code[10];ToJnlLineNo@1005 : Integer;ToAllocLineNo@1006 : Integer);
    BEGIN
      WITH FromLedgEntryDim DO
        IF FINDSET THEN
          REPEAT
            ToJnlLineDim."Table ID" := ToTableID;
            ToJnlLineDim."Journal Template Name" := ToJnlTemplateName;
            ToJnlLineDim."Journal Batch Name" := ToJnlBatchName;
            ToJnlLineDim."Journal Line No." := ToJnlLineNo;
            ToJnlLineDim."Allocation Line No." := ToAllocLineNo;
            ToJnlLineDim."Dimension Code" := "Dimension Code";
            ToJnlLineDim."Dimension Value Code" := "Dimension Value Code";
            ToJnlLineDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveDimBufToJnlLineDim@67(VAR FromDimBuf@1000 : Record 360;VAR ToJnlLineDim@1001 : Record 356;TableID@1002 : Integer;JnlTemplateName@1003 : Code[10];JnlBatchName@1004 : Code[10];JnlLineNo@1005 : Integer);
    BEGIN
      WITH FromDimBuf DO
        IF FINDSET THEN
          REPEAT
            ToJnlLineDim."Table ID" := TableID;
            ToJnlLineDim."Journal Template Name" := JnlTemplateName;
            ToJnlLineDim."Journal Batch Name" := JnlBatchName;
            ToJnlLineDim."Journal Line No." := JnlLineNo;
            ToJnlLineDim."Dimension Code" := "Dimension Code";
            ToJnlLineDim."Dimension Value Code" := "Dimension Value Code";
            ToJnlLineDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveDimBufToLedgEntryDim@70(VAR FromDimBuf@1000 : Record 360;ToTableID@1001 : Integer;ToEntryNo@1002 : Integer);
    VAR
      LedgEntryDim@1003 : Record 355;
    BEGIN
      WITH FromDimBuf DO
        IF FINDSET THEN
          REPEAT
            LedgEntryDim."Table ID" := ToTableID;
            LedgEntryDim."Entry No." := ToEntryNo;
            LedgEntryDim."Dimension Code" := "Dimension Code";
            LedgEntryDim."Dimension Value Code" := "Dimension Value Code";
            LedgEntryDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveDimBufToPostedDocDim@117(VAR FromDimBuf@1000 : Record 360;ToTableID@1001 : Integer;ToDocNo@1002 : Code[20];ToLineNo@1004 : Integer);
    VAR
      PostedDocDim@1003 : Record 359;
    BEGIN
      WITH FromDimBuf DO
        IF FIND('-') THEN
          REPEAT
            PostedDocDim."Table ID" := ToTableID;
            PostedDocDim."Document No." := ToDocNo;
            PostedDocDim."Line No." := ToLineNo;
            PostedDocDim."Dimension Code" := "Dimension Code";
            PostedDocDim."Dimension Value Code" := "Dimension Value Code";
            PostedDocDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveDimBufToGLBudgetDim@69(VAR FromDimBuf@1000 : Record 360;ToEntryNo@1001 : Integer);
    VAR
      GLBudgetDim@1002 : Record 361;
    BEGIN
      WITH FromDimBuf DO
        IF FINDSET THEN
          REPEAT
            GLBudgetDim."Entry No." := ToEntryNo;
            GLBudgetDim."Dimension Code" := "Dimension Code";
            GLBudgetDim."Dimension Value Code" := "Dimension Value Code";
            GLBudgetDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE CopyJnlLineDimToJnlLineDim@43(VAR FromJnlLineDim@1000 : Record 356;VAR ToJnlLineDim@1001 : Record 356) : Boolean;
    BEGIN
      DimensionChanged := FALSE;
      IF FromJnlLineDim.FINDSET THEN
        REPEAT
          ToJnlLineDim := FromJnlLineDim;
          ToJnlLineDim.INSERT;
          IF NOT DimensionChanged THEN
            DimensionChanged :=
              ToJnlLineDim."Dimension Value Code" <> ToJnlLineDim."New Dimension Value Code";
        UNTIL FromJnlLineDim.NEXT = 0;
      EXIT(DimensionChanged);
    END;

    PROCEDURE CopyLedgEntryDimToJnlLineDim@44(VAR FromLedgEntryDim@1000 : Record 355;VAR ToJnlLineDim@1001 : Record 356);
    BEGIN
      WITH FromLedgEntryDim DO
        IF FINDSET THEN
          REPEAT
            ToJnlLineDim."Table ID" := "Table ID";
            ToJnlLineDim."Dimension Code" := "Dimension Code";
            ToJnlLineDim."Dimension Value Code" := "Dimension Value Code";
            ToJnlLineDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE CopyDocDimToDocDim@50(VAR FromDocDim@1000 : Record 357;VAR ToDocDim@1001 : Record 357);
    BEGIN
      IF FromDocDim.FINDSET THEN
        REPEAT
          ToDocDim := FromDocDim;
          ToDocDim.INSERT;
        UNTIL FromDocDim.NEXT = 0;
    END;

    PROCEDURE CopyPostedDocDimToPostedDocDim@57(VAR FromPostedDocDim@1000 : Record 359;VAR ToPostedDocDim@1001 : Record 359);
    BEGIN
      IF FromPostedDocDim.FINDSET THEN
        REPEAT
          ToPostedDocDim := FromPostedDocDim;
          ToPostedDocDim.INSERT;
        UNTIL FromPostedDocDim.NEXT = 0;
    END;

    PROCEDURE CopyDocDimToJnlLineDim@51(VAR FromDocDim@1000 : Record 357;VAR ToJnlLineDim@1001 : Record 356);
    BEGIN
      WITH FromDocDim DO
        IF FINDSET THEN
          REPEAT
            ToJnlLineDim."Table ID" := "Table ID";
            ToJnlLineDim."Dimension Code" := "Dimension Code";
            ToJnlLineDim."Dimension Value Code" := "Dimension Value Code";
            ToJnlLineDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE CopyDimBufToJnlLineDim@65(VAR FromDimBuf@1000 : Record 360;VAR ToJnlLineDim@1001 : Record 356;JnlTemplateName@1002 : Code[10];JnlBatchName@1003 : Code[10];JnlLineNo@1004 : Integer);
    BEGIN
      WITH FromDimBuf DO
        IF FINDSET THEN
          REPEAT
            ToJnlLineDim."Table ID" := "Table ID";
            ToJnlLineDim."Journal Template Name" := JnlTemplateName;
            ToJnlLineDim."Journal Batch Name" := JnlBatchName;
            ToJnlLineDim."Journal Line No." := JnlLineNo;
            ToJnlLineDim."Dimension Code" := "Dimension Code";
            ToJnlLineDim."Dimension Value Code" := "Dimension Value Code";
            ToJnlLineDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE CopyDimBufToDocDim@120(VAR FromDimBuf@1000 : Record 360;ToTableID@1001 : Integer;ToDocNo@1002 : Code[20];ToLineNo@1004 : Integer;VAR ToDocDim@1005 : Record 357);
    BEGIN
      WITH FromDimBuf DO
        IF FIND('-') THEN
          REPEAT
            ToDocDim."Table ID" := ToTableID;
            ToDocDim."Document No." := ToDocNo;
            ToDocDim."Line No." := ToLineNo;
            ToDocDim."Dimension Code" := "Dimension Code";
            ToDocDim."Dimension Value Code" := "Dimension Value Code";
            ToDocDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE CopySCDimToDocDim@92(VAR FromServContractDim@1000 : Record 389;TableId@1001 : Integer;DocumentType@1002 : Option;DocumentNo@1003 : Code[20];LineNo@1004 : Integer);
    VAR
      ToDocDim@1005 : Record 357;
    BEGIN
      WITH FromServContractDim DO
        IF FINDSET THEN
          REPEAT
            ToDocDim."Table ID" := TableId;
            ToDocDim."Document Type" := DocumentType;
            ToDocDim."Document No." := DocumentNo;
            ToDocDim."Line No." := LineNo;
            ToDocDim."Dimension Code" := "Dimension Code";
            ToDocDim."Dimension Value Code" := "Dimension Value Code";
            ToDocDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE CheckDocDimConsistency@55(VAR DocDim@1000 : Record 357;VAR PostedDocDim@1001 : Record 359;DocTableID@1002 : Integer;PostedDocTableID@1003 : Integer) : Boolean;
    BEGIN
      IF DocDim.FINDSET THEN;
      IF PostedDocDim.FINDSET THEN;
      REPEAT
        CASE TRUE OF
          DocDim."Dimension Code" > PostedDocDim."Dimension Code":
          BEGIN
            DocDimConsistencyErr :=
              STRSUBSTNO(
                Text012,
                DocDim.FIELDCAPTION("Dimension Code"),
                ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DocTableID),
                ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,PostedDocTableID));
            EXIT(FALSE);
          END;
          DocDim."Dimension Code" < PostedDocDim."Dimension Code":
          BEGIN
            DocDimConsistencyErr :=
              STRSUBSTNO(
                Text012,
                PostedDocDim.FIELDCAPTION("Dimension Code"),
                ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,PostedDocTableID),
                ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DocTableID));
            EXIT(FALSE);
          END;
          DocDim."Dimension Code" = PostedDocDim."Dimension Code":
          BEGIN
            IF DocDim."Dimension Value Code" <> PostedDocDim."Dimension Value Code" THEN BEGIN
              DocDimConsistencyErr :=
                STRSUBSTNO(
                  Text013,
                  DocDim.FIELDCAPTION("Dimension Value Code"),
                  DocDim.FIELDCAPTION("Dimension Code"),
                  DocDim."Dimension Code",
                  ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DocTableID),
                  ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,PostedDocTableID));
              EXIT(FALSE);
            END;
          END;
        END;
      UNTIL (DocDim.NEXT = 0) AND (PostedDocDim.NEXT = 0);
      EXIT(TRUE);
    END;

    PROCEDURE GetDocDimConsistencyErr@56() : Text[250];
    BEGIN
      EXIT(DocDimConsistencyErr);
    END;

    PROCEDURE CheckDim@60(DimCode@1000 : Code[20]) : Boolean;
    VAR
      Dim@1001 : Record 348;
    BEGIN
      IF Dim.GET(DimCode) THEN BEGIN
        IF Dim.Blocked THEN BEGIN
          DimErr :=
            STRSUBSTNO(Text014,Dim.TABLECAPTION,DimCode);
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        DimErr :=
          STRSUBSTNO(Text015,Dim.TABLECAPTION,DimCode);
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckDimValue@61(DimCode@1000 : Code[20];DimValCode@1001 : Code[20]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
    BEGIN
      IF (DimCode <> '') AND (DimValCode <> '') THEN BEGIN
        IF DimVal.GET(DimCode,DimValCode) THEN BEGIN
          IF DimVal.Blocked THEN BEGIN
            DimErr :=
              STRSUBSTNO(
                Text016,DimVal.TABLECAPTION,DimCode,DimValCode);
            EXIT(FALSE);
          END;
          IF NOT (DimVal."Dimension Value Type" IN
            [DimVal."Dimension Value Type"::Standard,
             DimVal."Dimension Value Type"::"Begin-Total"])
          THEN BEGIN
            DimErr :=
              STRSUBSTNO(Text017,DimVal.FIELDCAPTION("Dimension Value Type"),
              DimVal.TABLECAPTION,DimCode,DimValCode,FORMAT(DimVal."Dimension Value Type"));
            EXIT(FALSE);
          END;
        END ELSE BEGIN
          DimErr :=
            STRSUBSTNO(
              Text018,DimVal.TABLECAPTION,DimCode);
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetDimErr@71() : Text[250];
    BEGIN
      EXIT(DimErr);
    END;

    PROCEDURE MoveDocDimToLedgEntryDim@4(VAR DocDim@1000 : Record 357;ToTableID@1001 : Integer;ToEntryNo@1002 : Integer);
    VAR
      LedgEntryDim@1003 : Record 355;
    BEGIN
      WITH DocDim DO
        IF FINDSET THEN
          REPEAT
            LedgEntryDim.INIT;
            LedgEntryDim."Table ID" := ToTableID;
            LedgEntryDim."Entry No." := ToEntryNo;
            LedgEntryDim."Dimension Code" := "Dimension Code";
            LedgEntryDim."Dimension Value Code" := "Dimension Value Code";
            LedgEntryDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveDocDimToDocDim@6(VAR FromDocDim@1000 : Record 357;ToTableID@1001 : Integer;ToNo@1002 : Code[20];ToType@1003 : Integer;ToLineNo@1004 : Integer);
    VAR
      DocDim@1005 : Record 357;
    BEGIN
      WITH FromDocDim DO
        IF FINDSET THEN
          REPEAT
            DocDim.INIT;
            DocDim."Table ID" := ToTableID;
            DocDim."Document Type" := ToType;
            DocDim."Document No." := ToNo;
            DocDim."Line No." := ToLineNo;
            DocDim."Dimension Code" := "Dimension Code";
            DocDim."Dimension Value Code" := "Dimension Value Code";
            DocDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveDocDimArchvToDocDim@118(VAR DocDimArchv@1000 : Record 5106;ToTableID@1001 : Integer;ToNo@1002 : Code[20];ToType@1003 : Integer;ToLineNo@1004 : Integer);
    VAR
      DocDim@1005 : Record 357;
    BEGIN
      WITH DocDimArchv DO
        IF FINDSET THEN
          REPEAT
            DocDim.INIT;
            DocDim."Table ID" := ToTableID;
            DocDim."Document Type" := ToType;
            DocDim."Document No." := ToNo;
            DocDim."Line No." := ToLineNo;
            DocDim."Dimension Code" := "Dimension Code";
            DocDim."Dimension Value Code" := "Dimension Value Code";
            DocDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveLedgEntryDimToDocDim@5(VAR LedgEntryDim@1000 : Record 355;ToTableID@1001 : Integer;ToNo@1002 : Code[20];ToLineNo@1003 : Integer;ToType@1004 : Integer);
    VAR
      DocDim@1005 : Record 357;
    BEGIN
      WITH LedgEntryDim DO
        IF FINDSET THEN
          REPEAT
            DocDim.INIT;
            DocDim."Table ID" := ToTableID;
            DocDim."Document Type" := ToType;
            DocDim."Document No." := ToNo;
            DocDim."Line No." := ToLineNo;
            DocDim."Dimension Code" := "Dimension Code";
            DocDim."Dimension Value Code" := "Dimension Value Code";
            DocDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveProdDocDimToProdDocDim@73(VAR FromProdDocDim@1000 : Record 358;ToTableID@1001 : Integer;ToStatus@1002 : Option;ToNo@1003 : Code[20]);
    VAR
      ProdDocDim@1004 : Record 358;
    BEGIN
      WITH FromProdDocDim DO
        IF FINDSET THEN
          REPEAT
            ProdDocDim.INIT;
            ProdDocDim."Table ID" := ToTableID;
            ProdDocDim."Document Status" := ToStatus;
            ProdDocDim."Document No." := ToNo;
            ProdDocDim."Document Line No." := "Document Line No.";
            ProdDocDim."Line No." := "Line No.";
            ProdDocDim."Dimension Code" := "Dimension Code";
            ProdDocDim."Dimension Value Code" := "Dimension Value Code";
            ProdDocDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveJnlLineDimToProdDocDim@78(VAR JnlLineDim@1000 : Record 356;ToTableID@1001 : Integer;ToStatus@1002 : Option;ToNo@1003 : Code[20];ToDocLineNo@1004 : Integer;ToLineNo@1005 : Integer);
    VAR
      ProdDocDim@1006 : Record 358;
    BEGIN
      WITH JnlLineDim DO
        IF FINDSET THEN
          REPEAT
            ProdDocDim.INIT;
            ProdDocDim."Table ID" := ToTableID;
            ProdDocDim."Document Status" := ToStatus;
            ProdDocDim."Document No." := ToNo;
            ProdDocDim."Document Line No." := ToDocLineNo;
            ProdDocDim."Line No." := ToLineNo;
            ProdDocDim."Dimension Code" := "Dimension Code";
            ProdDocDim."Dimension Value Code" := "Dimension Value Code";
            ProdDocDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveJnlLineDimToDocDim@79(VAR JnlLineDim@1000 : Record 356;ToTableID@1001 : Integer;ToType@1002 : Integer;ToNo@1003 : Code[20];ToLineNo@1004 : Integer);
    VAR
      DocDim@1005 : Record 357;
    BEGIN
      WITH JnlLineDim DO
        IF FINDSET THEN
          REPEAT
            DocDim.INIT;
            DocDim."Table ID" := ToTableID;
            DocDim."Document Type" := ToType;
            DocDim."Document No." := ToNo;
            DocDim."Line No." := ToLineNo;
            DocDim."Dimension Code" := "Dimension Code";
            DocDim."Dimension Value Code" := "Dimension Value Code";
            DocDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE MoveJnlLineDimToJnlLineDim@80(VAR JnlLineDim@1000 : Record 356;ToTableID@1001 : Integer;JnlTemplateName@1002 : Code[10];JnlBatchName@1003 : Code[10];JnlLineNo@1004 : Integer);
    VAR
      ToJnlLineDim@1005 : Record 356;
    BEGIN
      WITH JnlLineDim DO
        IF FINDSET THEN
          REPEAT
            ToJnlLineDim.INIT;
            ToJnlLineDim."Table ID" := ToTableID;
            ToJnlLineDim."Journal Template Name" := JnlTemplateName;
            ToJnlLineDim."Journal Batch Name" := JnlBatchName;
            ToJnlLineDim."Journal Line No." := JnlLineNo;
            ToJnlLineDim."Dimension Code" := "Dimension Code";
            ToJnlLineDim."Dimension Value Code" := "Dimension Value Code";
            ToJnlLineDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE CopyLedgEntryDimToLedgEntryDim@106(FromTableID@1000 : Integer;FromEntryNo@1001 : Integer;ToTableID@1002 : Integer;ToEntryNo@1003 : Integer);
    VAR
      FromLedgEntryDim@1004 : Record 355;
      ToLedgEntryDim@1005 : Record 355;
    BEGIN
      WITH FromLedgEntryDim DO BEGIN
        SETRANGE("Table ID",FromTableID);
        SETRANGE("Entry No.",FromEntryNo);
        IF FINDSET THEN BEGIN
          REPEAT
            ToLedgEntryDim := FromLedgEntryDim;
            ToLedgEntryDim."Table ID" := ToTableID;
            ToLedgEntryDim."Entry No." := ToEntryNo;
            ToLedgEntryDim.INSERT;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE MoveTempFromDimToTempToDim@104(VAR TempFromLineDim@1000 : TEMPORARY Record 357;VAR TempToLineDim@1001 : TEMPORARY Record 357);
    BEGIN
      IF TempFromLineDim.FINDSET THEN
        REPEAT
          TempToLineDim.INIT;
          TempToLineDim := TempFromLineDim;
          TempToLineDim.INSERT;
        UNTIL TempFromLineDim.NEXT = 0;
      TempFromLineDim.DELETEALL;
    END;

    PROCEDURE TransferTempToDimToDocDim@105(VAR TempToLineDim@1000 : TEMPORARY Record 357);
    VAR
      ToDocDim@1001 : Record 357;
    BEGIN
      IF TempToLineDim.FINDSET THEN
        REPEAT
          ToDocDim := TempToLineDim;
          ToDocDim.INSERT;
        UNTIL TempToLineDim.NEXT = 0;
      TempToLineDim.DELETEALL;
    END;

    PROCEDURE LookupDimValueCodeNoUpdate@20(FieldNumber@1000 : Integer);
    VAR
      DimVal@1001 : Record 349;
      GLSetup@1002 : Record 98;
    BEGIN
      GetGLSetup;
      IF GLSetupShortcutDimCode[FieldNumber] = '' THEN
        ERROR(Text002,GLSetup.TABLECAPTION);
      DimVal.SETRANGE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
      IF FORM.RUNMODAL(0,DimVal) = ACTION::LookupOK THEN;
    END;

    PROCEDURE GlobalDimNo@2(DimensionCode@1001 : Code[20]) : Integer;
    VAR
      Index@1000 : Integer;
    BEGIN
      GetGLSetup;

      FOR Index := 1 TO ARRAYLEN(GLSetupShortcutDimCode) DO
        IF GLSetupShortcutDimCode[Index] = DimensionCode THEN
          EXIT(Index);

      EXIT(0);
    END;

    PROCEDURE MoveJnlLineDimToBuf@81(VAR JnlLineDim@1000 : Record 356);
    BEGIN
      IF JnlLineDim.FINDSET THEN BEGIN
        TempDimBuf1.RESET;
        TempDimBuf1.DELETEALL;
        REPEAT
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := JnlLineDim."Table ID";
          TempDimBuf1."Dimension Code" := JnlLineDim."Dimension Code";
          TempDimBuf1."Dimension Value Code" := JnlLineDim."Dimension Value Code";
          TempDimBuf1.INSERT;
        UNTIL JnlLineDim.NEXT = 0;
        JnlLineDim.DELETEALL;
      END;
    END;

    PROCEDURE CopyJnlLineDimToICJnlDim@93(TableID@1000 : Integer;TransactionNo@1001 : Integer;PartnerCode@1002 : Code[20];TransactionSource@1008 : 'Rejected,Created';LineNo@1003 : Integer;VAR TempJnlLineDim@1004 : TEMPORARY Record 356);
    VAR
      InOutBoxJnlLineDim@1005 : Record 423;
      ICDim@1006 : Code[20];
      ICDimValue@1007 : Code[20];
    BEGIN
      IF TempJnlLineDim.FINDSET THEN
        REPEAT
          ICDim := ConvertDimtoICDim(TempJnlLineDim."Dimension Code");
          ICDimValue := ConvertDimValuetoICDimVal(TempJnlLineDim."Dimension Code",TempJnlLineDim."Dimension Value Code");
          IF (ICDim <> '') AND (ICDimValue <> '') THEN BEGIN
            InOutBoxJnlLineDim."Table ID" := TableID;
            InOutBoxJnlLineDim."IC Partner Code" := PartnerCode;
            InOutBoxJnlLineDim."Transaction No." := TransactionNo;
            InOutBoxJnlLineDim."Transaction Source" := TransactionSource;
            InOutBoxJnlLineDim."Line No." := LineNo;
            InOutBoxJnlLineDim."Dimension Code" := ICDim;
            InOutBoxJnlLineDim."Dimension Value Code" := ICDimValue;
            InOutBoxJnlLineDim.INSERT;
          END;
        UNTIL TempJnlLineDim.NEXT = 0;
    END;

    PROCEDURE CopyICJnlDimToJnlLineDim@96(TableID@1004 : Integer;VAR TempICInOutBoxJnlLineDim@1000 : TEMPORARY Record 423;GenJnlLine@1006 : Record 81);
    VAR
      JournalLineDim@1005 : Record 356;
      GLSetup@1001 : Record 98;
    BEGIN
      GLSetup.GET;
      IF TempICInOutBoxJnlLineDim.FINDSET THEN
        REPEAT
          JournalLineDim."Table ID" := TableID;
          JournalLineDim."Journal Template Name" := GenJnlLine."Journal Template Name";
          JournalLineDim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
          JournalLineDim."Journal Line No." := GenJnlLine."Line No.";
          JournalLineDim."Dimension Code" := ConvertICDimtoDim(TempICInOutBoxJnlLineDim."Dimension Code");
          JournalLineDim."Dimension Value Code" := ConvertICDimValuetoDimValue(
            TempICInOutBoxJnlLineDim."Dimension Code",TempICInOutBoxJnlLineDim."Dimension Value Code");
          IF (JournalLineDim."Dimension Code" <> '') AND (JournalLineDim."Dimension Value Code" <> '') THEN
            IF NOT JournalLineDim.INSERT THEN
              JournalLineDim.MODIFY;
          IF GLSetup."Shortcut Dimension 1 Code" = JournalLineDim."Dimension Code" THEN BEGIN
            GenJnlLine."Shortcut Dimension 1 Code" := JournalLineDim."Dimension Value Code";
            GenJnlLine.MODIFY;
          END
          ELSE IF GLSetup."Shortcut Dimension 2 Code" = JournalLineDim."Dimension Code" THEN BEGIN
            GenJnlLine."Shortcut Dimension 2 Code" := JournalLineDim."Dimension Value Code";
            GenJnlLine.MODIFY;
          END;
        UNTIL TempICInOutBoxJnlLineDim.NEXT = 0;
    END;

    PROCEDURE CopyICJnlDimToICJnlDim@97(VAR FromInOutBoxLineDim@1001 : Record 423;VAR ToInOutBoxlineDim@1000 : Record 423);
    BEGIN
      IF FromInOutBoxLineDim.FINDSET THEN
        REPEAT
          ToInOutBoxlineDim := FromInOutBoxLineDim;
          ToInOutBoxlineDim.INSERT;
        UNTIL FromInOutBoxLineDim.NEXT = 0;
    END;

    PROCEDURE CopyDocDimtoICDocDim@107(TableID@1005 : Integer;TransactionNo@1004 : Integer;PartnerCode@1003 : Code[20];TransactionSource@1002 : 'Rejected,Created';LineNo@1001 : Integer;VAR TempDocDim@1000 : TEMPORARY Record 357);
    VAR
      InOutBoxDocDim@1008 : Record 442;
      ICDim@1007 : Code[20];
      ICDimValue@1006 : Code[20];
    BEGIN
      IF TempDocDim.FINDSET THEN
        REPEAT
          ICDim := ConvertDimtoICDim(TempDocDim."Dimension Code");
          ICDimValue := ConvertDimValuetoICDimVal(TempDocDim."Dimension Code",TempDocDim."Dimension Value Code");
          IF (ICDim <> '') AND (ICDimValue <> '') THEN BEGIN
            InOutBoxDocDim."Table ID" := TableID;
            InOutBoxDocDim."IC Partner Code" := PartnerCode;
            InOutBoxDocDim."Transaction No." := TransactionNo;
            InOutBoxDocDim."Transaction Source" := TransactionSource;
            InOutBoxDocDim."Line No." := LineNo;
            InOutBoxDocDim."Dimension Code" := ICDim;
            InOutBoxDocDim."Dimension Value Code" := ICDimValue;
            InOutBoxDocDim.INSERT;
          END;
        UNTIL TempDocDim.NEXT = 0;
    END;

    PROCEDURE CopyICDocDimtoICDocDim@108(FromSourceICDocDim@1003 : Record 442;VAR ToSourceICDocDim@1002 : Record 442;ToTableID@1001 : Integer;ToTransactionSource@1000 : Integer);
    BEGIN
      WITH FromSourceICDocDim DO BEGIN
        SetICDocDimFilters(FromSourceICDocDim,"Table ID","Transaction No.","IC Partner Code","Transaction Source","Line No.");
        IF FromSourceICDocDim.FINDSET THEN
          REPEAT
            ToSourceICDocDim := FromSourceICDocDim;
            ToSourceICDocDim."Table ID" := ToTableID;
            ToSourceICDocDim."Transaction Source" := ToTransactionSource;
            ToSourceICDocDim.INSERT;
          UNTIL FromSourceICDocDim.NEXT = 0;
      END;
    END;

    PROCEDURE MoveICDocDimtoICDocDim@112(FromSourceICDocDim@1003 : Record 442;VAR ToSourceICDocDim@1002 : Record 442;ToTableID@1001 : Integer;ToTransactionSource@1000 : Integer);
    BEGIN
      WITH FromSourceICDocDim DO BEGIN
        SetICDocDimFilters(FromSourceICDocDim,"Table ID","Transaction No.","IC Partner Code","Transaction Source","Line No.");
        IF FromSourceICDocDim.FINDSET THEN
          REPEAT
            ToSourceICDocDim := FromSourceICDocDim;
            ToSourceICDocDim."Table ID" := ToTableID;
            ToSourceICDocDim."Transaction Source" := ToTransactionSource;
            ToSourceICDocDim.INSERT;
            FromSourceICDocDim.DELETE;
          UNTIL FromSourceICDocDim.NEXT = 0;
      END;
    END;

    PROCEDURE SetICDocDimFilters@110(VAR ICDocDim@1000 : Record 442;TableID@1001 : Integer;TransactionNo@1002 : Integer;PartnerCode@1003 : Code[20];TransactionSource@1004 : Integer;LineNo@1005 : Integer);
    BEGIN
      ICDocDim.RESET;
      ICDocDim.SETRANGE("Table ID",TableID);
      ICDocDim.SETRANGE("Transaction No.",TransactionNo);
      ICDocDim.SETRANGE("IC Partner Code",PartnerCode);
      ICDocDim.SETRANGE("Transaction Source",TransactionSource);
      ICDocDim.SETRANGE("Line No.",LineNo);
    END;

    PROCEDURE DeleteICDocDim@109("Table ID"@1000 : Integer;"IC Transaction No."@1001 : Integer;"IC Partner Code"@1002 : Code[20];"Transaction Source"@1003 : 'Rejected,Created';LineNo@1005 : Integer);
    VAR
      ICDocDim@1004 : Record 442;
    BEGIN
      SetICDocDimFilters(ICDocDim,"Table ID","IC Transaction No.","IC Partner Code","Transaction Source",LineNo);
      IF NOT ICDocDim.ISEMPTY THEN
        ICDocDim.DELETEALL;
    END;

    PROCEDURE DeleteICJnlDim@116("Table ID"@1000 : Integer;"IC Transaction No."@1001 : Integer;"IC Partner Code"@1002 : Code[20];"Transaction Source"@1003 : 'Rejected,Created';LineNo@1005 : Integer);
    VAR
      ICJnlDim@1004 : Record 423;
    BEGIN
      ICJnlDim.SETRANGE("Table ID","Table ID");
      ICJnlDim.SETRANGE("Transaction No.","IC Transaction No.");
      ICJnlDim.SETRANGE("IC Partner Code","IC Partner Code");
      ICJnlDim.SETRANGE("Transaction Source","Transaction Source");
      ICJnlDim.SETRANGE("Line No.",LineNo);
      IF NOT ICJnlDim.ISEMPTY THEN
        ICJnlDim.DELETEALL;
    END;

    PROCEDURE ConvertICDimtoDim@99(FromICDim@1000 : Code[20]) DimCode : Code[20];
    VAR
      ICDim@1002 : Record 411;
    BEGIN
      IF ICDim.GET(FromICDim) THEN
        DimCode := ICDim."Map-to Dimension Code";
    END;

    PROCEDURE ConvertICDimValuetoDimValue@100(FromICDim@1000 : Code[20];FromICDimValue@1001 : Code[20]) DimValueCode : Code[20];
    VAR
      ICDimValue@1002 : Record 412;
    BEGIN
      IF ICDimValue.GET(FromICDim,FromICDimValue) THEN
        DimValueCode := ICDimValue."Map-to Dimension Value Code";
    END;

    PROCEDURE ConvertDimtoICDim@102(FromDim@1001 : Code[20]) ICDimCode : Code[20];
    VAR
      Dim@1000 : Record 348;
    BEGIN
      IF Dim.GET(FromDim) THEN
        ICDimCode := Dim."Map-to IC Dimension Code";
    END;

    PROCEDURE ConvertDimValuetoICDimVal@103(FromDim@1000 : Code[20];FromDimValue@1001 : Code[20]) ICDimValueCode : Code[20];
    VAR
      DimValue@1002 : Record 349;
    BEGIN
        IF DimValue.GET(FromDim,FromDimValue) THEN
        ICDimValueCode := DimValue."Map-to IC Dimension Value Code";
    END;

    PROCEDURE TestDimValue@95(VAR JnlLineDim@1000 : Record 356) : Boolean;
    VAR
      i@1001 : Integer;
    BEGIN
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;
      IF JnlLineDim.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := DATABASE::"Journal Line Dimension";
          TempDimBuf1."Dimension Code" := JnlLineDim."Dimension Code";
          IF JnlLineDim."Dimension Value Code" <> '' THEN BEGIN
            TempDimBuf1."Entry No." := i;
            TempDimBuf1."Dimension Value Code" := JnlLineDim."Dimension Value Code";
            TempDimBuf1.INSERT;
            i := i + 1;
          END;
          IF JnlLineDim."New Dimension Value Code" <> '' THEN
            CheckNewDimValue := TRUE;
        UNTIL JnlLineDim.NEXT = 0;
      END;
      EXIT(CheckDimComb);
    END;

    PROCEDURE TestNewDimValue@101(VAR JnlLineDim@1000 : Record 356) : Boolean;
    VAR
      i@1001 : Integer;
    BEGIN
      TempDimBuf1.RESET;
      TempDimBuf1.DELETEALL;
      IF JnlLineDim.FINDSET THEN BEGIN
        i := 1;
        REPEAT
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := DATABASE::"Journal Line Dimension";
          TempDimBuf1."Dimension Code" := JnlLineDim."Dimension Code";
          IF JnlLineDim."New Dimension Value Code" <> '' THEN BEGIN
            TempDimBuf1."Entry No." := i;
            TempDimBuf1."Dimension Value Code" := JnlLineDim."New Dimension Value Code";
            TempDimBuf1.INSERT;
            i := i + 1;
          END;
        UNTIL JnlLineDim.NEXT = 0;
      END;
      EXIT(CheckDimComb);
    END;

    PROCEDURE MoveDimBufToItemBudgetDim@111(VAR FromDimBuf@1001 : Record 360;ToEntryNo@1000 : Integer);
    VAR
      ItemBudgetDim@1002 : Record 7135;
    BEGIN
      WITH FromDimBuf DO
        IF FINDSET THEN
          REPEAT
            ItemBudgetDim."Entry No." := ToEntryNo;
            ItemBudgetDim."Dimension Code" := "Dimension Code";
            ItemBudgetDim."Dimension Value Code" := "Dimension Value Code";
            ItemBudgetDim.INSERT;
          UNTIL NEXT = 0;
    END;

    PROCEDURE CheckICDimValue@113(ICDimCode@1001 : Code[20];ICDimValCode@1000 : Code[20]) : Boolean;
    VAR
      ICDimVal@1002 : Record 412;
    BEGIN
      IF (ICDimCode <> '') AND (ICDimValCode <> '') THEN BEGIN
        IF ICDimVal.GET(ICDimCode,ICDimValCode) THEN BEGIN
          IF ICDimVal.Blocked THEN BEGIN
            DimErr :=
              STRSUBSTNO(
                Text016,ICDimVal.TABLECAPTION,ICDimCode,ICDimValCode);
            EXIT(FALSE);
          END;
          IF NOT (ICDimVal."Dimension Value Type" IN
            [ICDimVal."Dimension Value Type"::Standard,
             ICDimVal."Dimension Value Type"::"Begin-Total"])
          THEN BEGIN
            DimErr :=
              STRSUBSTNO(Text017,ICDimVal.FIELDCAPTION("Dimension Value Type"),
              ICDimVal.TABLECAPTION,ICDimCode,ICDimValCode,FORMAT(ICDimVal."Dimension Value Type"));
            EXIT(FALSE);
          END;
        END ELSE BEGIN
          DimErr :=
            STRSUBSTNO(
              Text018,ICDimVal.TABLECAPTION,ICDimCode);
          EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckICDim@114(ICDimCode@1000 : Code[20]) : Boolean;
    VAR
      ICDim@1001 : Record 411;
    BEGIN
      IF ICDim.GET(ICDimCode) THEN BEGIN
        IF ICDim.Blocked THEN BEGIN
          DimErr :=
            STRSUBSTNO(Text014,ICDim.TABLECAPTION,ICDimCode);
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        DimErr :=
          STRSUBSTNO(Text015,ICDim.TABLECAPTION,ICDimCode);
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetServContractDim@121(TableID@1000 : Integer;DocType@1001 : Option;DocNo@1002 : Code[20];DocLineNo@1003 : Integer;"Source Code"@1004 : Code[20];VAR GlobalDim1Code@1005 : Code[20];VAR GlobalDim2Code@1006 : Code[20]);
    VAR
      ServContrDim@1008 : Record 389;
    BEGIN
      GetGLSetup;
      IF TempDimBuf1.FIND('-') THEN BEGIN
        REPEAT
          TempDimBuf2.INIT;
          TempDimBuf2 := TempDimBuf1;
          TempDimBuf2.INSERT;
        UNTIL TempDimBuf1.NEXT = 0;
      END;
      IF (TableID <> 0) AND (DocNo <> '') THEN BEGIN
        ServContrDim.SETRANGE("Table ID",TableID);
        ServContrDim.SETRANGE(Type,DocType);
        ServContrDim.SETRANGE("No.",DocNo);
        ServContrDim.SETRANGE("Line No.",DocLineNo);
        IF ServContrDim.FIND('-') THEN BEGIN
          REPEAT
            IF ServContrDim."Dimension Value Code" <> '' THEN BEGIN
              TempDimBuf2.SETRANGE("Dimension Code",ServContrDim."Dimension Code");
              IF NOT TempDimBuf2.FIND('-') THEN BEGIN
                TempDimBuf2.INIT;
                TempDimBuf2."Table ID" := ServContrDim."Table ID";
                TempDimBuf2."Entry No." := 0;
                TempDimBuf2."Dimension Code" := ServContrDim."Dimension Code";
                TempDimBuf2."Dimension Value Code" := ServContrDim."Dimension Value Code";
                TempDimBuf2.INSERT;
              END;
              IF GLSetupShortcutDimCode[1] = TempDimBuf2."Dimension Code" THEN
                GlobalDim1Code := TempDimBuf2."Dimension Value Code";
              IF GLSetupShortcutDimCode[2] = TempDimBuf2."Dimension Code" THEN
                GlobalDim2Code := TempDimBuf2."Dimension Value Code";
            END;
          UNTIL ServContrDim.NEXT = 0;
        END;
      END;
      TempDimBuf2.RESET;
    END;

    PROCEDURE MoveTempDimToBuf@31();
    BEGIN
      IF TempDimBuf2.FINDSET THEN BEGIN
        TempDimBuf1.RESET;
        TempDimBuf1.DELETEALL;
        REPEAT
          TempDimBuf1.INIT;
          TempDimBuf1."Table ID" := TempDimBuf2."Table ID";
          TempDimBuf1."Dimension Code" := TempDimBuf2."Dimension Code";
          TempDimBuf1."Dimension Value Code" := TempDimBuf2."Dimension Value Code";
          TempDimBuf1.INSERT;
        UNTIL TempDimBuf2.NEXT = 0;
        TempDimBuf2.DELETEALL;
      END;
    END;

    PROCEDURE SaveJobTaskDim@39("Job No."@1000 : Code[20];"Job Task No."@1001 : Code[20];FieldNumber@1003 : Integer;ShortcutDimCode@1002 : Code[20]);
    VAR
      JobTaskDim@1004 : Record 1002;
      RecRef@1007 : RecordRef;
      xRecRef@1006 : RecordRef;
      ChangeLogMgt@1005 : Codeunit 423;
    BEGIN
      GetGLSetup;
      IF ShortcutDimCode <> '' THEN BEGIN
        IF JobTaskDim.GET("Job No.","Job Task No.",GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          xRecRef.GETTABLE(JobTaskDim);
          JobTaskDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          JobTaskDim.MODIFY;
          RecRef.GETTABLE(JobTaskDim);
          ChangeLogMgt.LogModification(RecRef,xRecRef);
        END ELSE BEGIN
          JobTaskDim.INIT;
          JobTaskDim.VALIDATE("Job No.","Job No.");
          JobTaskDim.VALIDATE("Job Task No.","Job Task No.");
          JobTaskDim.VALIDATE("Dimension Code",GLSetupShortcutDimCode[FieldNumber]);
          JobTaskDim.VALIDATE("Dimension Value Code",ShortcutDimCode);
          JobTaskDim.INSERT;
          RecRef.GETTABLE(JobTaskDim);
          ChangeLogMgt.LogInsertion(RecRef);
        END;
      END ELSE
        IF JobTaskDim.GET("Job No.","Job Task No.",GLSetupShortcutDimCode[FieldNumber]) THEN BEGIN
          RecRef.GETTABLE(JobTaskDim);
          JobTaskDim.DELETE;
          ChangeLogMgt.LogDeletion(RecRef)
        END;
    END;

    PROCEDURE SaveJobTaskTempDim@46(FieldNumber@1001 : Integer;ShortcutDimCode@1000 : Code[20]);
    BEGIN
      GetGLSetup;
      IF ShortcutDimCode <> '' THEN BEGIN
        IF JobTaskDimTemp.GET('','',GLSetupShortcutDimCode[FieldNumber])
        THEN BEGIN
          JobTaskDimTemp."Dimension Value Code" := ShortcutDimCode;
          JobTaskDimTemp.MODIFY;
        END ELSE BEGIN
          JobTaskDimTemp.INIT;
          JobTaskDimTemp."Dimension Code" := GLSetupShortcutDimCode[FieldNumber];
          JobTaskDimTemp."Dimension Value Code" := ShortcutDimCode;
          JobTaskDimTemp.INSERT;
        END;
      END ELSE
        IF JobTaskDimTemp.GET('','',GLSetupShortcutDimCode[FieldNumber]) THEN
          JobTaskDimTemp.DELETE;
    END;

    PROCEDURE InsertJobTaskDim@54("Job No."@1000 : Code[20];"Job Task No."@1001 : Code[20];VAR GlobalDim1Code@1005 : Code[20];VAR GlobalDim2Code@1004 : Code[20]);
    VAR
      DefaultDim@1002 : Record 352;
      JobTaskDim@1003 : Record 1002;
    BEGIN
      GetGLSetup;
      DefaultDim.SETRANGE("Table ID",DATABASE::Job);
      DefaultDim.SETRANGE("No.","Job No.");
      IF DefaultDim.FINDSET(FALSE,FALSE) THEN
        REPEAT
          IF DefaultDim."Dimension Value Code" <> '' THEN BEGIN
            JobTaskDim.INIT;
            JobTaskDim."Job No." := "Job No.";
            JobTaskDim."Job Task No." := "Job Task No.";
            JobTaskDim."Dimension Code" := DefaultDim."Dimension Code";
            JobTaskDim."Dimension Value Code" := DefaultDim."Dimension Value Code";
            JobTaskDim.INSERT;
            IF JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[1] THEN
              GlobalDim1Code := JobTaskDim."Dimension Value Code";
            IF JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[2] THEN
              GlobalDim2Code := JobTaskDim."Dimension Value Code";
          END;
        UNTIL DefaultDim.NEXT = 0;

      JobTaskDimTemp.RESET;
      IF JobTaskDimTemp.FINDSET THEN
        REPEAT
          IF NOT JobTaskDim.GET("Job No.","Job Task No.",JobTaskDimTemp."Dimension Code") THEN BEGIN
            JobTaskDim.INIT;
            JobTaskDim."Job No." := "Job No.";
            JobTaskDim."Job Task No." := "Job Task No.";
            JobTaskDim."Dimension Code" := JobTaskDimTemp."Dimension Code";
            JobTaskDim."Dimension Value Code" := JobTaskDimTemp."Dimension Value Code";
            JobTaskDim.INSERT;
            IF JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[1] THEN
              GlobalDim1Code := JobTaskDim."Dimension Value Code";
            IF JobTaskDim."Dimension Code" = GLSetupShortcutDimCode[2] THEN
              GlobalDim2Code := JobTaskDim."Dimension Value Code";
          END;
        UNTIL JobTaskDimTemp.NEXT = 0;
      JobTaskDimTemp.DELETEALL;
    END;

    PROCEDURE DeleteJobTaskTempDim@76();
    VAR
      JobTaskDim@1002 : Record 1002;
    BEGIN
      JobTaskDimTemp.RESET;
      JobTaskDimTemp.DELETEALL;
    END;

    PROCEDURE UpdateSCInvLineDim@200(VAR ServContractDim@1000 : Record 389;VAR DocDim@1001 : Record 357;ServLine@1002 : Record 5902;ServContractHeader@1003 : Record 5965;VAR GlobalDim1Code@1004 : Code[20];VAR GlobalDim2Code@1005 : Code[20]);
    BEGIN
      GetGLSetup;
      IF ServContractDim.FIND('-') THEN BEGIN
        REPEAT
          DocDim.SETRANGE("Dimension Code",ServContractDim."Dimension Code");
          IF DocDim.FIND('-') THEN BEGIN
            DocDim."Dimension Value Code" := ServContractDim."Dimension Value Code";
          DocDim.MODIFY;
          END ELSE BEGIN
            DocDim.INIT;
            DocDim."Table ID" := DATABASE::"Service Line";
            DocDim."Document Type" := ServLine."Document Type";
            DocDim."Document No." := ServLine."Document No.";
            DocDim."Line No." := ServLine."Line No.";
            DocDim."Dimension Code" := ServContractDim."Dimension Code";
            DocDim."Dimension Value Code" := ServContractDim."Dimension Value Code";
            DocDim.INSERT;
          END;
          IF DocDim."Dimension Code" = GLSetupShortcutDimCode[1] THEN
            GlobalDim1Code := DocDim."Dimension Value Code";
          IF DocDim."Dimension Code" = GLSetupShortcutDimCode[2] THEN
            GlobalDim2Code := DocDim."Dimension Value Code";
        UNTIL ServContractDim.NEXT = 0;
      END;
    END;

    PROCEDURE CopyJnlLineDimToBuffer@86(TableID@1007 : Integer;JnlTemplateName@1005 : Code[10];JnlBatchName@1004 : Code[10];JnlLineNo@1003 : Integer;AllocationLineNo@1002 : Integer;VAR GlobalDim1Code@1001 : Code[20];VAR GlobalDim2Code@1000 : Code[20]);
    VAR
      FromJnlLineDim@1006 : Record 356;
    BEGIN
      GetGLSetup;
      WITH FromJnlLineDim DO BEGIN
        SETRANGE("Table ID",TableID);
        SETRANGE("Journal Template Name",JnlTemplateName);
        SETRANGE("Journal Batch Name",JnlBatchName);
        SETRANGE("Journal Line No.",JnlLineNo);
        SETRANGE("Allocation Line No.",0);
        TempDimBuf1.RESET;
        TempDimBuf1.DELETEALL;
        IF FINDSET THEN
          REPEAT
            TempDimBuf1.INIT;
            TempDimBuf1."Table ID" := 0;
            TempDimBuf1."Entry No." := 0;
            TempDimBuf1."Dimension Code" := "Dimension Code";
            TempDimBuf1."Dimension Value Code" := "Dimension Value Code";
            TempDimBuf1.INSERT;
            IF GLSetupShortcutDimCode[1] = TempDimBuf1."Dimension Code" THEN
              GlobalDim1Code :=  TempDimBuf1."Dimension Value Code";
            IF GLSetupShortcutDimCode[2] = TempDimBuf1."Dimension Code" THEN
              GlobalDim2Code :=  TempDimBuf1."Dimension Value Code";
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE UpdateDocDefaultDim2@33(VAR DocDim@1006 : Record 357;TableID@1005 : Integer;DocType@1004 : Option;DocNo@1003 : Code[20];LineNo@1002 : Integer;VAR GlobalDim1Code@1001 : Code[20];VAR GlobalDim2Code@1000 : Code[20]);
    BEGIN
      GetGLSetup;
      DocDim.SETRANGE("Table ID",TableID);
      DocDim.SETRANGE("Document Type",DocType);
      DocDim.SETRANGE("Document No.",DocNo);
      DocDim.SETRANGE("Line No.",LineNo);
      DocDim.DELETEALL;
      GlobalDim1Code := '';
      GlobalDim2Code := '';
      IF TempDimBuf2.FIND('-') THEN BEGIN
        REPEAT
          DocDim.INIT;
          DocDim.VALIDATE("Table ID",TableID);
          DocDim.VALIDATE("Document Type",DocType);
          DocDim.VALIDATE("Document No.",DocNo);
          DocDim.VALIDATE("Line No.",LineNo);
          DocDim."Dimension Code" := TempDimBuf2."Dimension Code";
          DocDim."Dimension Value Code" := TempDimBuf2."Dimension Value Code";
          DocDim.INSERT;
          IF DocDim."Dimension Code" = GLSetupShortcutDimCode[1] THEN
            GlobalDim1Code := DocDim."Dimension Value Code";
          IF DocDim."Dimension Code" = GLSetupShortcutDimCode[2] THEN
            GlobalDim2Code := DocDim."Dimension Value Code";
        UNTIL TempDimBuf2.NEXT = 0;
        TempDimBuf2.RESET;
        TempDimBuf2.DELETEALL;
      END;
    END;

    BEGIN
    END.
  }
}
