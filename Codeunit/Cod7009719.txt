OBJECT Codeunit 7009719 Funciones Hotel
{
  OBJECT-PROPERTIES
  {
    Date=29/04/14;
    Time=20:31:52;
    Modified=Yes;
    Version List=AIC2009,CNT-OC-14035;
  }
  PROPERTIES
  {
    OnRun=VAR
            fecha@1103355000 : Date;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355000 : TextConst 'ENU=0D;ESP=0D';
      Text001@1103355001 : TextConst 'ENU=An error has occurred during the process;ESP=Ha habido un error inesperado durante el proceso.';
      Text002@1103355002 : TextConst 'ENU=Hotel must be indicated in order to filter;ESP=Se debe indicar un hotel para filtrar.';
      Text003@1103355003 : TextConst 'ENU=Must indicate a check-in date in order to filter;ESP=Se debe indicar una fecha de entrada para filtrar.';
      Text004@1103355004 : TextConst 'ENU=Must indicate the surcharge;ESP=Se debe indicar el cargo a imputar.';
      Text005@1103355005 : TextConst 'ENU=Must indicate the hotel to charge;ESP=Se debe indicar el Hotel a cargar.';
      Text006@1103355006 : TextConst 'ENU=Must indicate the charge amount;ESP=Se debe indicar el importe del cargo.';
      Text007@1103355007 : TextConst 'ENU=Charge %1 does not exist;ESP=No existe el cargo %1.';
      Text008@1103355008 : TextConst 'ENU=Attributing charges massively \;ESP=Imputando cargos masivamente \';
      Text009@1103355009 : TextConst 'ENU=Booking #1#####\;ESP=Reserva #1#####\';
      Text010@1103355010 : TextConst 'ENU=Charge   #2############################;ESP=Cargo   #2############################';
      Text011@1103355011 : TextConst 'ENU=Any booking which fulfills the indicated conditions exists;ESP=No se ha encontrado ninguna reserva que cumpla las condiciones indicadas';
      Text012@1103355012 : TextConst 'ENU=Information does not exist in agency parameters folder;ESP=No existe informacion en el fichero de parametros Agencia.';
      Text013@1103355013 : TextConst 'ENU=There is no information in the Interface Parameters file;ESP=No existe informacion en el fichero de Parametros Interfase.';
      Text014@1103355014 : TextConst 'ENU=%1D;ESP=%1D';
      Text015@1103355015 : TextConst 'ENU=Trying to start importation'';ESP=Intentando inciar importacion...';
      Text016@1103355016 : TextConst 'ENU=Information does not exist in the folder of Interface parameters;ESP=No existe informacion en el fichero de Parametros de interfase.';
      Text017@1103355017 : TextConst 'ENU=Touroperator %1 does not exist;ESP=No existe el Touroperador %1.';
      Text018@1103355018 : TextConst 'ENU=\ltuok.dat;ESP=\ltuok.dat';
      Text019@1103355019 : TextConst 'ENU=Any file has been imported correctly today;ESP=No se ha importado correctamente ningun fichero hoy.';
      Text020@1103355020 : TextConst 'ENU=.old;ESP=.old';
      Text021@1103355021 : TextConst 'ENU=This operation is only possible on the responsibles;ESP=Esta operacion solo es posible sobre los responsables.';
      Text022@1103355022 : TextConst 'ENU=Must indicate a hotel.;ESP=Debe indicar un hotel.';
      Text023@1103355023 : TextConst 'ENU=Hotel %1 does not exist;ESP=No existe el Hotel %1.';
      Text024@1103355024 : TextConst 'ENU=Current ,;ESP=Actual ,';
      Text025@1103355025 : TextConst 'ENU=All hotel;ESP=Todas Hotel';
      Text026@1103355026 : TextConst 'ENU=" ASSIGNING BOOKINGS \";ESP=" ASIGNANDO  RESERVAS \"';
      Text027@1103355027 : TextConst 'ENU=" Booking: #1#####    \";ESP=" Reserva: #1#####    \"';
      Text028@1103355028 : TextConst 'ENU=" Voucher...: #2########";ESP=" Bono...: #2########"';
      Text029@1103355029 : TextConst 'ENU=Header of the related booking does not exist;ESP=No existe la cabecera de reserva asociada.';
      Text030@1103355030 : TextConst 'ENU=Room type %1 does notexist in the contract %2;ESP=No existe el tipo de habitacion %1 en el contrato %2.';
      Text031@1103355031 : TextConst 'ENU=Would you like to settle the booking %1 with the request %2?;ESP=¨Desea liquidar la reserva %1 con el request %2?';
      Text032@1103355032 : TextConst 'ENU=Request settled;ESP=Liquidado Request';
      Text033@1103355033 : TextConst 'ENU=Booking %1;ESP=Reserva %1';
      Text034@1100253000 : TextConst 'ENU=Must indicate a Touroperator;ESP=Debe de indicar un Touroperador';
      Text035@1100253001 : TextConst 'ENU=Must indicate a dates range;ESP=Debe de indicar un rango de fechas';
      wVent@1100253002 : Dialog;
      rPar@1100253003 : Record 7009700;
      Text036@1100253004 : TextConst 'ENU=There are %1 remaining bookings to be confirmed for the next %2 days.\ Would you like to view them?;ESP=Existen %1 Reservas Pendientes de confirmar para los pr¢ximos %2 d¡as.\¨Desea verlas?';

    PROCEDURE cargos_masivos@1();
    VAR
      rCond@1103355000 : Record 7010085;
      rRsv@1103355001 : Record 7009743;
      rCar@1103355002 : Record 7009749;
      rCar2@1103355003 : Record 7009749;
      rCod@1103355004 : Record 7009759;
      ventana@1103355005 : Dialog;
    BEGIN
      // cargos_masivos
      //
      IF NOT rCond.GET(USERID) THEN BEGIN
        rCond.Usuario := USERID;
        rCond.INSERT;
      END;
      rCond.INIT;
      rCond.Usuario := USERID;
      rCond.MODIFY;
      COMMIT;
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario, USERID);
      rCond.FILTERGROUP(0);
      FORM.RUNMODAL(FORM::"Ficha cargos masivos", rCond);
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario);
      rCond.FILTERGROUP(0);
      IF NOT rCond.GET(USERID) THEN
        ERROR(Text001);
      IF NOT rCond.Correcto THEN
        EXIT;
      IF rCond.Hotel = '' THEN
        ERROR(Text002);
      IF rCond."Fecha Entrada" = 0D THEN
        ERROR(Text003);
      IF rCond.Cargo = '' THEN
        ERROR(Text004);
      IF rCond."Hotel a cargar" = '' THEN
        ERROR(Text005);
      // Reutilizamos el campo "Precio manual compra" en el formulario para no crear mas
      // campos en el fichero de condiciones temporales
      //
      IF rCond."Precio Manual Compra" = 0 THEN
        ERROR(Text006);
      IF NOT rCod.GET(rCond.Cargo) THEN
        ERROR(Text007, rCond.Cargo);
      rRsv.RESET;
      rRsv.SETCURRENTKEY("Hotel booking",
                         "Fecha entrada");
      IF rCond.TourOperador <> '' THEN
        rRsv.SETRANGE(TourOperador, rCond.TourOperador);
      rRsv.SETRANGE("Hotel booking", rCond.Hotel);
      rRsv.SETRANGE("Fecha entrada", rCond."Fecha Entrada");
      IF rCond.Habitacion <> '' THEN
        rRsv.SETRANGE(Habitacion, rCond.Habitacion);
      IF rCond.Regimen <> '' THEN
        rRsv.SETRANGE(Regimen, rCond.Regimen);
      rRsv.SETRANGE(Responsable, TRUE);
      IF rRsv.FIND('-') THEN BEGIN
        ventana.OPEN(Text008+
                     '\'+
                     Text009+
                     Text010);
        ventana.UPDATE(2, rCod.Descripcion);
        REPEAT
           ventana.UPDATE(1, rRsv."N§ Reserva");
           // Buscar el ultimo cargo de la reserva
           //
           rCar2.RESET;
           rCar2.SETRANGE(Delegacion  , rRsv.Delegacion);
           rCar2.SETRANGE("N§ Reserva", rRsv."N§ Reserva");
           IF NOT rCar2.FIND('+') THEN
             rCar2."N§ Cargo" := 1;
           // Grabar el nuevo cargo
           //
           rCar.INIT;
           rCar.Delegacion := rRsv.Delegacion;
           rCar."N§ Reserva" := rRsv."N§ Reserva";
           rCar."N§ Cargo" := rCar2."N§ Cargo";
           rCar.Cargo := rCond.Cargo;
           rCar."Hotel a cargar" := rCond."Hotel a cargar";
           rCar.Importe := rCond."Precio Manual Compra";
           rCar."N§ Interno" := rRsv."N§ Interno";
           rCar."N§ Periodo" := rRsv."N§ Periodo";
           rCar.INSERT;
        UNTIL rRsv.NEXT = 0;
        ventana.CLOSE;
      END
      ELSE
        ERROR(Text011);
    END;

    PROCEDURE busca_contrato@3(VAR par_contrato@1103355000 : Record 7009723;par_touroperador@1103355001 : Code[10];par_fecha@1103355002 : Date;par_hotel@1103355003 : Code[20]);
    BEGIN
      // busca_contrato
      //
      CLEAR(par_contrato);
      par_contrato.SETCURRENTKEY(Hotel,
                                 TourOperador,
                                 "Fecha inicio contrato");
      par_contrato.SETRANGE (Hotel                  , par_hotel);
      par_contrato.SETRANGE (TourOperador           , par_touroperador);
      par_contrato.SETFILTER("Fecha inicio contrato", '<=%1', par_fecha);
      par_contrato.SETFILTER("Fecha final contrato" , '>=%1', par_fecha);
      IF par_contrato.FIND('-') THEN
        ;
    END;

    PROCEDURE busca_habitaciones@7(par_contrato@1103355000 : Record 7009723;VAR tab_hab@1103355001 : ARRAY [50] OF Code[10];VAR tab_rel@1103355002 : ARRAY [50] OF Integer;par_fecha@1103355003 : Date);
    VAR
      rHab@1103355004 : Record 7009731;
      rCupo@1103355005 : Record 7009739;
      ind_hab@1103355006 : Integer;
    BEGIN
      // busca_habitaciones
      CLEAR(tab_hab);
      CLEAR(tab_rel);
      CLEAR(rHab);
      ind_hab := 0;
      rHab.SETRANGE(Delegacion     , par_contrato.Delegacion);
      rHab.SETRANGE("N§ Contrato"  , par_contrato."N§ Contrato compra");
      rHab.SETRANGE("Tipo contrato", rHab."Tipo contrato"::Compra);
      IF rHab.FIND('-') THEN BEGIN
        REPEAT
          ind_hab := ind_hab + 1;
          tab_hab[ind_hab] := rHab."Habitacion cupo";
          CLEAR(rCupo);
          rCupo.SETRANGE (Delegacion          , par_contrato.Delegacion);
          rCupo.SETRANGE ("N§ Contrato compra", par_contrato."N§ Contrato compra");
          rCupo.SETRANGE ("Habitacion cupo"   , rHab."Habitacion cupo");
          rCupo.SETFILTER("Fecha desde"       , '<=%1', par_fecha);
          rCupo.SETFILTER("Fecha hasta"       , '>=%1', par_fecha);
          IF rCupo.FIND('-') THEN
            ;
          tab_rel[ind_hab] := rCupo.Release;
        UNTIL rHab.NEXT = 0;
      END;
    END;

    PROCEDURE ordena_release@4(VAR tab_rel@1103355000 : ARRAY [50] OF Integer;VAR tab_hab@1103355001 : ARRAY [50] OF Code[10];VAR habit@1103355002 : Integer);
    VAR
      x@1103355003 : Integer;
      j@1103355004 : Integer;
      max@1103355005 : Integer;
      aux_rel@1103355006 : Integer;
      aux_hab@1103355007 : Code[10];
    BEGIN
      // ordena_release
      //
      x := 1;
      max := 0;
      WHILE tab_hab[x] <> '' DO BEGIN
        max := max + 1;
        x := x + 1;
      END;
      FOR x := 1 TO max DO BEGIN
        FOR j := x + 1 TO max DO BEGIN
          IF tab_rel[j] < tab_rel[x] THEN BEGIN
            aux_rel := tab_rel[j];
            tab_rel[j] := tab_rel[x];
            tab_rel[x] := aux_rel;

            aux_hab := tab_hab[j];
            tab_hab[j] := tab_hab[x];
            tab_hab[x] := aux_hab;
          END;
        END;
      END;
      habit := max;
    END;

    PROCEDURE montar_filtro_habitacion@18(tab_hab@1103355000 : ARRAY [50] OF Code[10];tab_rel@1103355001 : ARRAY [50] OF Integer;VAR tab_filtro@1103355002 : ARRAY [10] OF Text[250];VAR tab_rel_filtro@1103355003 : ARRAY [10] OF Integer);
    VAR
      ind_hab@1103355004 : Integer;
      ind_filtro@1103355005 : Integer;
      release@1103355006 : Integer;
    BEGIN
      // montar_filtro_habitacion
      //
      CLEAR(tab_filtro);
      CLEAR(tab_rel_filtro);
      ind_hab := 1;
      ind_filtro := 1;
      release := tab_rel[ind_hab];
      WHILE tab_hab[ind_hab] <> '' DO BEGIN
        IF release <> tab_rel[ind_hab] THEN
          ind_filtro := ind_filtro + 1;

        IF tab_filtro[ind_filtro] = '' THEN BEGIN
          tab_filtro[ind_filtro] := tab_hab[ind_hab];
          tab_rel_filtro[ind_filtro] := tab_rel[ind_hab];
        END
        ELSE BEGIN
          tab_filtro[ind_filtro] := tab_filtro[ind_filtro] + '|' + tab_hab[ind_hab];
          tab_rel_filtro[ind_filtro] := tab_rel[ind_hab];
        END;
        ind_hab := ind_hab + 1;
      END;
    END;

    PROCEDURE cambiar_booking@9(VAR rRsv@1103355000 : Record 7009743;asignacion@1103355001 : Boolean);
    VAR
      rHot@1103355002 : Record 7009724;
      rReg@1103355003 : Record 7009712;
      rCond@1103355004 : Record 7010085;
      rRsv2@1103355005 : Record 7009743;
      rRsv_Aux@1103355006 : Record 7009743;
      rPer@1103355007 : Record 7009742;
      rCab@1103355008 : Record 7009741;
      cCon@1103355009 : Codeunit 7009701;
      opcion@1103355010 : Integer;
      ventana@1103355011 : Dialog;
      cambios@1103355012 : 'habitacion,regimen,hotel,habitacion+regimen,hotel+habitacion,hotel+regimen,hotel+habitacion+regimen';
    BEGIN
      // cambiar_booking
      //
      IF NOT rRsv.Responsable THEN
        ERROR(Text021);
      CLEAR(rHot);
      CLEAR(rReg);
      IF rCond.GET(USERID()) THEN
        rCond.DELETE;
      rCond.INIT;
      rCond.Usuario := USERID();
      rCond.Delegacion := rRsv.Delegacion;
      rCond."N§ Reserva" := rRsv."N§ Reserva";
      rCond."Fecha desde" := rRsv."Fecha entrada";
      rCond."Fecha hasta" := rRsv."Fecha salida";
      rCond."Habitacion actual" := rRsv.Habitacion;
      rCond."Regimen actual" := rRsv.Regimen;
      rCond."Cambiar Hotel Origen Precios" := FALSE;
      rCond."Cambia booking" := TRUE;
      rCond.INSERT;
      COMMIT;
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario, USERID());
      rCond.FILTERGROUP(0);
      FORM.RUNMODAL(7010110, rCond);
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario);
      rCond.FILTERGROUP(0);
      rCond.GET(USERID());
      IF NOT rCond.Correcto THEN
        EXIT;
      IF (rCond.Hotel = '') THEN
        ERROR(Text022);
      IF NOT rHot.GET(rCond.Hotel) THEN
        ERROR(Text023, rCond.Hotel);
      // Tratar el campo de cambios
      //
      IF rCond.Hotel <> '' THEN BEGIN
        IF rCond.Habitacion <> '' THEN BEGIN
          IF rCond.Regimen <> '' THEN BEGIN
            cambios := cambios::"hotel+habitacion+regimen"
          END
          ELSE BEGIN
            cambios := cambios::"hotel+habitacion"
          END;
        END
        ELSE BEGIN
          IF rCond.Regimen <> '' THEN BEGIN
            cambios := cambios::"hotel+regimen";
          END
          ELSE BEGIN
            cambios := cambios::hotel;
          END;
        END;
      END
      ELSE BEGIN
        IF rCond.Habitacion <> '' THEN BEGIN
          IF rCond.Regimen <> '' THEN BEGIN
            cambios := cambios::"habitacion+regimen"
          END
          ELSE BEGIN
            cambios := cambios::habitacion
          END;
        END
        ELSE BEGIN
          IF rCond.Regimen <> '' THEN
            cambios := cambios::regimen
        END;
      END;
      // Modificacion Periodo
      //
      IF asignacion THEN
        opcion := STRMENU(Text024 + Text025)
      ELSE
        opcion := 1;
      IF opcion = 0 THEN
        EXIT;
      IF opcion = 1 THEN BEGIN
        rRsv_Aux := rRsv;
        rRsv_Aux.SETRECFILTER;
      END
      ELSE BEGIN
        rRsv_Aux.SETCURRENTKEY(Responsable,
                               "Pendiente asignar",
                               "TourOperador Venta",
                               "Hotel booking",
                               "Fecha entrada",
                               "Fecha salida",
                               Regimen,
                               Habitacion);
        rRsv_Aux.COPYFILTERS(rRsv);
        rRsv_Aux.SETRANGE("Hotel booking"    , rRsv."Hotel booking");
      END;
      IF rRsv_Aux.FINDSET THEN
      BEGIN
        ventana.OPEN(Text026+
                     '\'+
                     Text027+
                     Text028);
        REPEAT
          ventana.UPDATE(1, rRsv_Aux."N§ Reserva");
          ventana.UPDATE(2, rRsv_Aux.Bono);
          rPer.RESET;
          rPer.SETRANGE(Delegacion  , rRsv_Aux.Delegacion);
          rPer.SETRANGE("N§ Interno", rRsv_Aux."N§ Interno");
          rPer.SETRANGE("N§ Periodo", rRsv_Aux."N§ Periodo");
          IF rPer.FINDFIRST THEN
          BEGIN
            IF NOT rCab.GET(rPer.Delegacion, rPer."N§ Interno") THEN
              ERROR(Text029);

            IF rCond.Habitacion <> '' THEN
            BEGIN
              IF cambios = cambios::habitacion THEN
              BEGIN
                rPer.VALIDATE(Habitacion, rCond.Habitacion);
              END
              ELSE
              BEGIN
                cambiar_habitacion(rPer, rCond.Habitacion, rCond."Contrato compra");
              END;
            END;
            IF rCond.Regimen <> '' THEN
            BEGIN
              IF (cambios = cambios::regimen) OR (cambios = cambios::"habitacion+regimen") THEN
              BEGIN
                rPer.VALIDATE(Regimen, rCond.Regimen);
              END
              ELSE
              BEGIN
                cambiar_regimen(rPer, rCond.Regimen);
              END;
            END;
            rPer.VALIDATE("Hotel Booking", rCond.Hotel);
            IF rCond."Cambiar Hotel Origen Precios" THEN
            BEGIN
              rPer."Hotel venta" := rCond.Hotel;

              rPer.VALIDATE("Hotel origen precios", rCond.Hotel);
              rPer.VALIDATE("Hotel venta"         , rCond.Hotel);
            END;
            rPer.CheckEnvioConfirmacion(FALSE); //+$004
            rPer.MODIFY;
          END;
          rPer.RESET;
        UNTIL rRsv_Aux.NEXT = 0;
        ventana.CLOSE;
      END;
      rRsv_Aux.RESET;
    END;

    PROCEDURE cambiar_habitacion@14(VAR par_per@1103355000 : Record 7009742;par_hab@1103355001 : Code[10];nuevo_contrato@1103355002 : Code[10]);
    VAR
      rHab@1103355003 : Record 7009731;
      rRsvHot@1103355004 : Record 7009743;
      cPar@1103355005 : Codeunit 7009700;
    BEGIN
      // cambiar_habitacion
      //
      // Historico
      //
      cPar.intro_historic(par_per.Delegacion, par_per."N§ Interno", par_per."N§ Periodo", 0, 1,
                          par_per.FIELDCAPTION(Habitacion), par_per.Habitacion, par_hab);
      rHab.RESET;
      rHab.SETRANGE(Delegacion       , par_per.Delegacion);
      rHab.SETRANGE("N§ Contrato"    , nuevo_contrato);
      rHab.SETRANGE("Tipo contrato"  , rHab."Tipo contrato"::Compra);
      rHab.SETRANGE("Habitacion cupo", par_hab);
      IF NOT rHab.FIND('-') THEN
        ERROR(Text030, par_per.Habitacion, par_per."Contrato compra");
      par_per."Habitacion TO"    := rHab."Habitacion TO";
      par_per."Habitacion basica":= rHab."Habitacion basica";
      par_per.Habitacion         := rHab."Habitacion cupo";
      // Bajar a reserva hotel
      //
      rRsvHot.RESET;
      rRsvHot.SETCURRENTKEY(Delegacion,
                            "N§ Interno",
                            "N§ Periodo");
      rRsvHot.SETRANGE(Delegacion  , par_per.Delegacion);
      rRsvHot.SETRANGE("N§ Interno", par_per."N§ Interno");
      rRsvHot.SETRANGE("N§ Periodo", par_per."N§ Periodo");
      rRsvHot.SETRANGE(Responsable , TRUE);
      IF rRsvHot.FIND('-') THEN BEGIN
        REPEAT
          rRsvHot.Habitacion             := par_per.Habitacion;
          rRsvHot."Habitacion basica"    := par_per."Habitacion basica";
          rRsvHot."Habitacion TO"        := '';
          rRsvHot."Cambiar booking"      := TRUE;
          rRsvHot."Modificacion critica" := TRUE;
          rRsvHot.MODIFY(TRUE);
        UNTIL rRsvHot.NEXT = 0;
      END;
      rRsvHot.RESET;
    END;

    PROCEDURE cambiar_regimen@21(VAR par_per@1103355000 : Record 7009742;par_reg@1103355001 : Code[10]);
    VAR
      rAco@1103355002 : Record 7009748;
      rRsvHot@1103355003 : Record 7009743;
      cPar@1103355004 : Codeunit 7009700;
    BEGIN
      // cambiar_regimen
      //
      // Historico
      //
      cPar.intro_historic(par_per.Delegacion, par_per."N§ Interno", par_per."N§ Periodo", 0, 1,
                          par_per.FIELDCAPTION(Regimen), par_per.Regimen, par_reg);
      par_per.Regimen := par_reg;
      // Bajar a reserva hotel
      //
      rRsvHot.RESET;
      rRsvHot.SETCURRENTKEY(Delegacion,
                            "N§ Interno",
                            "N§ Periodo");
      rRsvHot.SETRANGE(Delegacion  , par_per.Delegacion);
      rRsvHot.SETRANGE("N§ Interno", par_per."N§ Interno");
      rRsvHot.SETRANGE("N§ Periodo", par_per."N§ Periodo");
      IF rRsvHot.FIND('-') THEN BEGIN
        REPEAT
          rRsvHot.Regimen                := par_per.Regimen;
          rRsvHot."Cambiar booking"      := TRUE;
          rRsvHot."Modificacion critica" := TRUE;
          rRsvHot.MODIFY(TRUE);
        UNTIL rRsvHot.NEXT = 0;
      END;
      rRsvHot.RESET;
      // Bajar a los acompa¤antes
      //
      rAco.RESET;
      rAco.SETRANGE(Delegacion  , par_per.Delegacion);
      rAco.SETRANGE("N§ Interno", par_per."N§ Interno");
      IF rAco.FIND('-') THEN
        rAco.MODIFYALL(Regimen, par_per.Regimen);
      rAco.RESET;
    END;

    PROCEDURE LiquidarRequest@1103355000(VAR prResReal@1103355000 : Record 7009743;prResRequest@1103355001 : Record 7009743);
    VAR
      lrConfEnvio@1103355002 : Record 7009832;
      lrConfEnvio2@1103355003 : Record 7009832;
      lrPer@1103355004 : Record 7009742;
      lrCab@1103355005 : Record 7009741;
      lrRes2@1103355006 : Record 7009743;
      cFunPar@1103355007 : Codeunit 7009700;
    BEGIN
      // LiquidarRequest

      // JPT 29/01/09 Mediante esta funci¢n llamada desde el formulario 50636 Se liquida una reserva
      // Request contra una reserva real.

      IF NOT CONFIRM(Text031, FALSE, prResReal."N§ Reserva", prResRequest."N§ Reserva" ) THEN
        EXIT;

      prResReal."Comunicado hotel"       := prResRequest."Comunicado hotel";
      prResReal."Confirmacion hotel"     := prResRequest."Confirmacion hotel";
      prResReal."Num confirmacion hotel" := prResRequest."Num confirmacion hotel";
      prResReal."N§ envio hotel"         := prResRequest."N§ envio hotel";
      prResReal.MODIFY;

      CLEAR(lrConfEnvio);
      lrConfEnvio.SETRANGE(Delegacion     , prResRequest.Delegacion);
      lrConfEnvio.SETRANGE("Num. Reserva" , prResRequest."N§ Reserva");
      IF lrConfEnvio.FINDSET(TRUE) THEN BEGIN
        REPEAT
          // Al estar en la clave primaria debemos borra y reinsertar
          lrConfEnvio2 := lrConfEnvio;
          lrConfEnvio2.DELETE;
          lrConfEnvio2."Num. Reserva" := prResReal."N§ Reserva";
          lrConfEnvio2.INSERT;
        UNTIL lrConfEnvio.NEXT=0;
      END;

      // Cambiamos el numero de envio para todos los ocupantes de la reserva real
      CLEAR(lrRes2);
      lrRes2.RESET;
      lrRes2.SETCURRENTKEY(Delegacion, "N§ Responsable");
      lrRes2.SETRANGE(Delegacion      , prResReal.Delegacion);
      lrRes2.SETRANGE("N§ Responsable", prResReal."N§ Reserva");
      IF lrRes2.FINDSET THEN BEGIN
        REPEAT
          lrRes2."N§ envio hotel"      := prResRequest."N§ envio hotel";
          lrRes2."Confirmacion hotel"  := prResRequest."Confirmacion hotel";
          lrRes2."Comunicado hotel"    := prResRequest."Comunicado hotel";
          lrRes2.MODIFY;
        UNTIL lrRes2.NEXT=0;
      END;

      // Borramos la reserva Request. Para ello miramos si la reserva tiene un unico periodo borramos
      // la cabecera de reserva, si no solo el periodo.
      // Eso provocara el borrado de la reserva hotel y todas las tablas relacionadas

      // Esta modificaci¢n previa es para evitar que la reserva vaya al buzon de anulaciones
      CLEAR(lrRes2);
      lrRes2 := prResRequest;
      lrRes2."Confirmacion hotel" := FALSE;
      lrRes2.MODIFY;

      CLEAR(lrPer);
      IF lrPer.GET(prResRequest.Delegacion, prResRequest."N§ Interno", prResRequest."N§ Periodo") THEN
        lrPer.DELETE(TRUE);

      lrPer.SETRANGE(Delegacion  , prResRequest.Delegacion);
      lrPer.SETRANGE("N§ Interno", prResRequest."N§ Interno");
      IF lrPer.COUNT = 0 THEN BEGIN
        lrCab.GET(prResRequest.Delegacion, prResRequest."N§ Interno");
        lrCab.DELETE(TRUE);
      END;

      // Creamos un registro Historico
      cFunPar.intro_historic(prResReal.Delegacion, prResReal."N§ Interno", prResReal."N§ Periodo", prResReal."N§ Reserva", 2,
                            Text032, STRSUBSTNO(Text033, prResRequest."N§ Reserva"), '');
    END;

    PROCEDURE GetGrupoTouroperador@1100253000(pwTTOO@1100253000 : Code[10]) : Code[10];
    VAR
      lrTTOO@1100253001 : Record 7009717;
    BEGIN
      // GetGrupoTouroperador

      EXIT(lrTTOO.GetGrupoTouroperador(pwTTOO));
    END;

    PROCEDURE LanzaIncCupos@1100253012(VAR prTemp@1100253004 : TEMPORARY Record 7009757;pwTTOO@1100253003 : Code[10];pwFechas@1100253002 : ARRAY [2] OF Date;pwMargen@1100253001 : Decimal;pwMinHabs@1100253000 : Integer);
    VAR
      lwFecha@1100253005 : Date;
      lwTotal@1100253006 : Integer;
      lwCont@1100253007 : Integer;
    BEGIN
      // LanzaIncCupos

      // Limpiamos el temporal
      CLEAR(prTemp);
      prTemp.DELETEALL;

      CompsBuscaIncCupos(pwTTOO,pwFechas);
      wVent.OPEN(STRSUBSTNO('#1######\@2@@@@@@@@@@@\#3#########\@4@@@@@@@@@@@'));
      lwTotal := (pwFechas[2] - pwFechas[1]) +1;
      CLEAR(lwCont);
      FOR lwFecha := pwFechas[1] TO pwFechas[2] DO BEGIN
        wVent.UPDATE(1, lwFecha);
        BuscaIncCupos(prTemp,pwTTOO,lwFecha, pwMargen, pwMinHabs);
        lwCont +=1;
        wVent.UPDATE(2, ROUND(lwCont/lwTotal*10000,1));
      END;
      wVent.CLOSE;
    END;

    PROCEDURE BuscaIncCupos@1100253001(VAR prTemp@1100253009 : TEMPORARY Record 7009757;pwTTOO@1100253000 : Code[10];pwFecha@1100253001 : Date;pwMargen@1100253002 : Decimal;pwMinHabs@1100253003 : Integer);
    VAR
      lrHotel@1100253004 : Record 7009724;
      lrContrato@1100253012 : Record 7009723;
      lrHabs@1100253014 : Record 7009731;
      lrTmpHabs@1100253013 : TEMPORARY Record 7009711;
      lwTTOOGrp@1100253005 : Code[10];
      lwPctg@1100253006 : Decimal;
      lwHbsLib@1100253008 : Decimal;
      lwInc@1100253007 : Boolean;
      lwTotal@1100253011 : Integer;
      lwCont@1100253010 : Integer;
    BEGIN
      // BuscaIncCupos
      // Funcion que busca a partir de los parametros dados los hoteles con problemas de cupo

      lwTTOOGrp := GetGrupoTouroperador(pwTTOO);

      CLEAR(lrHotel);
      lrHotel.SETRANGE("Hotel Ficticio"     , FALSE);
      lrHotel.SETRANGE(NoName               , FALSE);
      lrHotel.SETRANGE("Filtro fecha"       , pwFecha);
      //-$003lrHotel.SETRANGE("Filtro touroperador", lwTTOOGrp);
      lrHotel.SETFILTER("Filtro touroperador", '%1|%2', lwTTOOGrp, ''); //+$003
      lrHotel.SETRANGE(Catalogo             , TRUE); //+$002
      IF lrHotel.FINDSET THEN BEGIN
        lwTotal := lrHotel.COUNT;
        CLEAR(lwCont);
        REPEAT
          wVent.UPDATE(3, lrHotel.Hotel);
          CLEAR(lwPctg);

          // JPT 04/10/10 Ahora realizamos la busqueda por tipo de habitaci¢n
          // JPT 04/10/10 Primero buscamos el contrato, si no tiene ya no seguimos
          lrContrato.RESET;
          lrContrato.SETRANGE (TourOperador           , lwTTOOGrp);
          lrContrato.SETRANGE (Hotel                  , lrHotel.Hotel);
          lrContrato.SETFILTER("Fecha inicio contrato", '<=%1', pwFecha);
          lrContrato.SETFILTER("Fecha final contrato" , '>=%1', pwFecha);
          lrContrato.SETRANGE (Confirmado             , TRUE);
          lwInc := lrContrato.FINDFIRST;

          IF lwInc THEN BEGIN
            // Por tipo de habitaci¢n basica del contrato
            // Para ello montamos un temporal

            CLEAR(lrTmpHabs); // Temporal a Habitacion Basica
            lrTmpHabs.DELETEALL;

            CLEAR(lrHabs);
            lrHabs.SETRANGE(Delegacion   , lrContrato.Delegacion);
            lrHabs.SETRANGE("N§ Contrato", lrContrato."N§ Contrato compra");
            lrHabs.SETRANGE("Tipo contrato", lrHabs."Tipo contrato"::Compra);
            IF lrHabs.FINDSET THEN BEGIN
              REPEAT
                IF NOT lrTmpHabs.GET(lrHabs."Habitacion basica")  THEN BEGIN
                  lrTmpHabs."Codigo Habitacion" := lrHabs."Habitacion basica";
                  lrTmpHabs.INSERT;
                END;
              UNTIL lrHabs.NEXT=0;
            END;

            CLEAR(lrTmpHabs);
            IF lrTmpHabs.FINDSET THEN BEGIN
              REPEAT
                lrHotel.SETFILTER("Filtro Habitacion", lrTmpHabs."Codigo Habitacion");
                lrHotel.CALCFIELDS("Cupo compra", "Reservas compra");
                // Porcentage de habitaciones libres
                lwHbsLib := lrHotel."Cupo compra" - lrHotel."Reservas compra"; // Habitaciones libres
                IF lrHotel."Cupo compra" <> 0 THEN
                  lwPctg := ROUND(lwHbsLib/lrHotel."Cupo compra"* 100, 1);

                lwInc := lwPctg < pwMargen;
                lwInc := lwInc OR (lwHbsLib < pwMinHabs);
                lwInc := lwInc OR (lrHotel."Cupo compra" = 0);

                lwInc := lwInc AND ( (lrHotel."Cupo compra" <> 0) OR (lrHotel."Reservas compra" <> 0) );

                IF lwInc THEN BEGIN
                  CLEAR(prTemp);
                  prTemp.Hotel              := lrHotel.Hotel;
                  prTemp.TourOperador       := pwTTOO;
                  prTemp.Dia                := pwFecha;
                  prTemp."Cupo contratado"  := lrHotel."Cupo compra";
                  prTemp."Cupo garantizado" := lwHbsLib;
                  prTemp.Release            := lwPctg;
                  prTemp.Habitacion         := lrTmpHabs."Codigo Habitacion";
                  prTemp.INSERT;
                END;
              UNTIL lrTmpHabs.NEXT=0;
            END;
          END;
          lwCont +=1;
          wVent.UPDATE(4, ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrHotel.NEXT=0;
      END;
    END;

    PROCEDURE CompsBuscaIncCupos@1100253007(pwTTOO@1100253003 : Code[10];pwFechas@1100253002 : ARRAY [2] OF Date);
    BEGIN
      // CompsBuscaIncCupos

      IF pwTTOO = '' THEN
        ERROR(Text034);
      IF (pwFechas[1]=0D) OR (pwFechas[2]=0D) THEN
        ERROR(Text035);
    END;

    PROCEDURE ContrlEntradas@1100253002();
    VAR
      lrUser@1100253000 : Record 91;
      lrResHot@1100253001 : Record 7009743;
      lrTemp@1100253002 : TEMPORARY Record 7009743;
      lwFechas@1100253003 : ARRAY [2] OF Date;
      lwEnc@1100253004 : Boolean;
      lfForm@1100253005 : Form 7010139;
    BEGIN
      // ContrlEntradas
      // JPT 12/08/10
      // Funcion por la cual se controla en la entrada de un usuario si existe alguna reserva no confirmada para los
      // siguientes dias. Solo en Usuarios con la marca "Control Llegadas".

      IF lrUser.GET(USERID) THEN BEGIN
        IF NOT lrUser."Control Llegadas" THEN
          EXIT;
      END
      ELSE
        EXIT;

      rPar.FINDFIRST;
      IF rPar."Dias Preaviso reservas No Conf" =0 THEN
        EXIT;

      CLEAR(lrTemp);
      lrTemp.DELETEALL;

      CLEAR(lwFechas);
      lwFechas[1] := TODAY;
      lwFechas[2] := lwFechas[1] + rPar."Dias Preaviso reservas No Conf";

      // Si encuentra alguna reserva sin confimar la introduce en el temporal para ense¤ar
      CLEAR(lrResHot);
      lrResHot.SETCURRENTKEY("Fecha entrada","Fecha salida","TourOperador Venta",Bono,"N§ Responsable");
      lrResHot.SETRANGE("Fecha entrada", lwFechas[1],lwFechas[2]);
      lrResHot.SETRANGE(Responsable, TRUE);
      lrResHot.SETRANGE("Num confirmacion hotel", '');
      lwEnc := lrResHot.FIND('-');
      IF lwEnc THEN BEGIN
        REPEAT
          lrTemp := lrResHot;
          lrTemp.INSERT;
        UNTIL lrResHot.NEXT=0;
      END;

      COMMIT;

      IF lwEnc THEN BEGIN
        IF NOT CONFIRM(Text036, FALSE, lrTemp.COUNT, rPar."Dias Preaviso reservas No Conf") THEN
          EXIT;

        CLEAR(lfForm);
        lfForm.PasaTemp(lrTemp);
        lfForm.RUN;
      END;
    END;

    BEGIN
    {
      ## AJF 29/06/09

        .- Modificados varios par metros que hacen referencia a c¢digo de hotel de code10 a code20.

      JPT 12/08/10 GOC-OC-10007 Funcion para controlar las reseras hotel no confirmadas para los proximos dias "ContrlEntradas"

      $001 AJS 100909 En la funcion BuscaIncCupos incluyo controles para que no muestre los hoteles que no tienen contrato en la fecha
                      o aquellos que no tienen ni cupos ni estancias.

      JPT 04/10/10 Ahora realizamos la busqueda en BuscaIncCupos por tipo de habitaci¢n

      $002 AJS 12072012 Modifico la funcion BuscaIncCupos para que solo trabaje con los hoteles que tienen la marca
                        de catalogo para eliminar los hoteles obsoletos

      $003 AJS 12072012 Modifico la funcion BuscaIncCupos para que sume tambien los cupos de los touroperadores que
                        no tienen grupo

      $004 AJS 17032014 CNT-OC-14035, al modificar periodo reserva compruebo si hay que marcar para volver a enviar al Touroperador
    }
    END.
  }
}
