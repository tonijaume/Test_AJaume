OBJECT Codeunit 700 BA Overview Form Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=Table relations;ESP=Relaciones de tabla';
      Text002@1001 : TextConst 'ENU=Measures;ESP=Medidas';
      Text003@1002 : TextConst 'ENU=Functions;ESP=Funciones';
      Text004@1003 : TextConst 'ENU=Dimensions;ESP=Dimensiones';
      Text005@1004 : TextConst 'ENU=per;ESP=por';
      Text006@1005 : TextConst 'ENU=Member Cubes;ESP=Cubos miembro';
      Text008@1007 : TextConst 'ENU=Foreign Keys;ESP=Claves externas';
      Text009@1008 : TextConst 'ENU=Levels;ESP=Niveles';
      Text011@1011 : TextConst 'ENU=DEFAULT;ESP=GENERICO';
      BAPostingDateDim@1016 : Record 706;
      BAGenBusPostingGrpDim@1017 : Record 706;
      BAGenProdPostingGrpDim@1018 : Record 706;
      BASourceDim@1015 : Record 706;
      BAJobDim@1019 : Record 706;
      BAJobPhaseDim@1048 : Record 706;
      BAJobTaskDim@1049 : Record 706;
      BAJobStepDim@1050 : Record 706;
      BACustDim@1012 : Record 706;
      BAVendDim@1021 : Record 706;
      BACustCountryDim@1013 : Record 706;
      BAVendCountryDim@1035 : Record 706;
      BACustTerritoryDim@1014 : Record 706;
      BAVendTerritoryDim@1034 : Record 706;
      BAIncomeBalanceDim@1020 : Record 706;
      BAAccountDim@1031 : Record 706;
      BAAccountNoDim@1032 : Record 706;
      BAGLBudgetNameDim@1033 : Record 706;
      BAItemDim@1044 : Record 706;
      BALocationDim@1030 : Record 706;
      BAInvPostingGrpDim@1036 : Record 706;
      BAItemEntryTypeDim@1043 : Record 706;
      BAVEItemEntryTypeDim@1047 : Record 706;
      BAVEEntryTypeDim@1046 : Record 706;
      BAResDim@1051 : Record 706;
      BASalesPersonPurchaserDim@1052 : Record 706;
      BACampaignDim@1053 : Record 706;
      BACampaignStatusDim@1054 : Record 706;
      BAOpportunityDim@1055 : Record 706;
      BASalesCycleDim@1057 : Record 706;
      BASalesCycleStageDim@1058 : Record 706;
      BAOpportunityEntryActiveDim@1062 : Record 706;
      BAContactDim@1059 : Record 706;
      BADim1@1022 : Record 706;
      BADim2@1023 : Record 706;
      BADim3@1024 : Record 706;
      BADim4@1025 : Record 706;
      BADim5@1026 : Record 706;
      BADim6@1027 : Record 706;
      BADim7@1028 : Record 706;
      BADim8@1029 : Record 706;
      Text015@1039 : TextConst 'ENU=General Ledger;ESP=Contabilidad';
      Text017@1041 : TextConst 'ENU=Customer Ledger;ESP=Movs. clientes';
      Text018@1042 : TextConst 'ENU=Vendor Ledger;ESP=Movs. proveedores';
      Text019@1045 : TextConst 'ENU=Inventory;ESP=Inventario';
      GLCubePostingDateDim@1056 : Record 713;
      Text020@1009 : TextConst 'ENU=Balance at Date,Year to Date;ESP=Saldo a la fecha,Hasta la fecha';

    PROCEDURE InitiateBALines@1(VAR BALine@1000 : Record 703;BADbCode@1001 : Code[10]);
    BEGIN
      BALine.RESET;
      BALine.DELETEALL;
      InitiateBALines_Cubes(BALine,BADbCode);
      InitiateBALines_VirtCubes(BALine,BADbCode);
      InitiateBALines_Dimensions(BALine,BADbCode);
      InitiateBALines_NumLists(BALine,BADbCode);
    END;

    LOCAL PROCEDURE InitiateBALines_Cubes@3(VAR BALine@1000 : Record 703;BADbCode@1001 : Code[10]);
    VAR
      BACube@1002 : Record 709;
      BACubeTabRel@1003 : Record 710;
      BACubeMeasure@1004 : Record 711;
      BACubeFunc@1005 : Record 712;
      BACubeDim@1006 : Record 713;
      LineNo@1007 : Integer;
    BEGIN
      BALine.INIT;
      BALine."BA Db. Code" := BADbCode;
      BALine.Type := BALine.Type::Cube;
      LineNo := LineNo + 10000;
      BALine."Line No." := LineNo;
      BALine.Description := FORMAT(BALine.Type);
      BALine.INSERT;

      BACube.SETRANGE("BA Db. Code",BADbCode);
      IF BACube.FIND('-') THEN
        REPEAT
          BACube.CALCFIELDS("Fact Table Name");
          LineNo := LineNo + 10000;
          BALine."Line No." := LineNo;
          BALine.Indentation := 1;
          BALine.Name := BACube.Name;
          BALine.Description := STRSUBSTNO('%1 ("%2")',BALine.Name,BACube."Fact Table Name");
          BALine."Source Line No." := BACube."Line No.";
          BALine."Source Parent Line No." := 0;
          BALine."Source Table No." := DATABASE::"BA Db. Cube";
          BALine.INSERT;

          BACubeTabRel.SETRANGE("BA Db. Code",BACube."BA Db. Code");
          BACubeTabRel.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
          IF BACubeTabRel.FIND('-') THEN BEGIN
            LineNo := LineNo + 10000;
            BALine."Line No." := LineNo;
            BALine.Indentation := 2;
            BALine.Name := BACube.Name;
            BALine.Description := Text001;
            BALine."Source Line No." := 0;
            BALine."Source Parent Line No." := 0;
            BALine."Source Table No." := 0;
            BALine.INSERT;
            BALine.Indentation := 3;
            REPEAT
              BACubeTabRel.CALCFIELDS("Relates-to Table Name","Relates-from Table Name");
              LineNo := LineNo + 10000;
              BALine."Line No." := LineNo;
              BALine.Description :=
                STRSUBSTNO('"%1" <-> "%2"',BACubeTabRel."Relates-from Table Name",BACubeTabRel."Relates-to Table Name");
              BALine."Source Line No." := BACubeTabRel."Line No.";
              BALine."Source Parent Line No." := BACubeTabRel."BA Db. Cube Line No.";
              BALine."Source Table No." := DATABASE::"BA Db. Cube Table Relation";
              BALine.INSERT;
            UNTIL BACubeTabRel.NEXT = 0;
          END;

          BACubeMeasure.SETRANGE("BA Db. Code",BACube."BA Db. Code");
          BACubeMeasure.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
          IF BACubeMeasure.FIND('-') THEN BEGIN
            LineNo := LineNo + 10000;
            BALine."Line No." := LineNo;
            BALine.Indentation := 2;
            BALine.Name := BACube.Name;
            BALine.Description := Text002;
            BALine."Source Line No." := 0;
            BALine."Source Parent Line No." := 0;
            BALine."Source Table No." := 0;
            BALine.INSERT;
            BALine.Indentation := 3;
            REPEAT
              BACubeMeasure.CALCFIELDS("Table Name","Field Name");
              LineNo := LineNo + 10000;
              BALine."Line No." := LineNo;
              BALine.Name := BACubeMeasure.Name;
              IF BALine.Name <> '' THEN
                BALine.Description := BALine.Name
              ELSE
                BALine.Description :=
                  STRSUBSTNO('"%1"."%2"',BACubeMeasure."Table Name",BACubeMeasure."Field Name");
              BALine."Source Line No." := BACubeMeasure."Line No.";
              BALine."Source Parent Line No." := BACubeMeasure."BA Db. Cube Line No.";
              BALine."Source Table No." := DATABASE::"BA Db. Cube Measure";
              BALine.INSERT;
            UNTIL BACubeMeasure.NEXT = 0;
          END;

          BACubeFunc.SETRANGE("BA Db. Code",BACube."BA Db. Code");
          BACubeFunc.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
          IF BACubeFunc.FIND('-') THEN BEGIN
            LineNo := LineNo + 10000;
            BALine."Line No." := LineNo;
            BALine.Indentation := 2;
            BALine.Name := BACube.Name;
            BALine.Description := Text003;
            BALine."Source Line No." := 0;
            BALine."Source Parent Line No." := 0;
            BALine."Source Table No." := 0;
            BALine.INSERT;
            BALine.Indentation := 3;
            REPEAT
              BACubeFunc.CALCFIELDS("Measure Name","Time Dimension Name");
              LineNo := LineNo + 10000;
              BALine."Line No." := LineNo;
              BALine.Name := BACubeFunc.Name;
              BALine.Description :=
                STRSUBSTNO(
                  '%1: "%2" %3 "%4"',BACubeFunc.Name,BACubeFunc."Measure Name",
                  Text005,BACubeFunc."Time Dimension Name");
              BALine."Source Line No." := BACubeFunc."Line No.";
              BALine."Source Parent Line No." := BACubeFunc."BA Db. Cube Line No.";
              BALine."Source Table No." := DATABASE::"BA Db. Cube Function";
              BALine.INSERT;
            UNTIL BACubeFunc.NEXT = 0;
          END;

          BACubeDim.SETRANGE("BA Db. Code",BACube."BA Db. Code");
          BACubeDim.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
          IF BACubeDim.FIND('-') THEN BEGIN
            LineNo := LineNo + 10000;
            BALine."Line No." := LineNo;
            BALine.Indentation := 2;
            BALine.Name := BACube.Name;
            BALine.Description := Text004;
            BALine."Source Line No." := 0;
            BALine."Source Parent Line No." := 0;
            BALine."Source Table No." := 0;
            BALine.INSERT;
            BALine.Indentation := 3;
            REPEAT
              BACubeDim.CALCFIELDS(
                "Table Name","Field Name","BA Db. Dimension Name","Dimension Name","Dimension Entry Table Name");
              LineNo := LineNo + 10000;
              BALine."Line No." := LineNo;
              BALine.Name := BACubeDim.Name;
              IF BACubeDim."BA Db. Dimension Line" <> 0 THEN
                BALine.Description :=
                  STRSUBSTNO(
                    '"%1"."%2" <-> "%3"',BACubeDim."Table Name",BACubeDim."Field Name",BACubeDim."BA Db. Dimension Name")
              ELSE
                BALine.Description :=
                  STRSUBSTNO(
                    '"%1"."%2" <-> "%3" (%4)',
                    BACubeDim."Table Name",BACubeDim."Field Name",BACubeDim."Dimension Entry Table Name",
                    BACubeDim."Dimension Name");
              BALine."Source Line No." := BACubeDim."Line No.";
              BALine."Source Parent Line No." := BACubeDim."BA Db. Cube Line No.";
              BALine."Source Table No." := DATABASE::"BA Db. Cube Dimension";
              BALine.INSERT;
            UNTIL BACubeDim.NEXT = 0;
          END;

        UNTIL BACube.NEXT = 0;
    END;

    LOCAL PROCEDURE InitiateBALines_VirtCubes@4(VAR BALine@1000 : Record 703;BADbCode@1001 : Code[10]);
    VAR
      BAVirtCube@1003 : Record 714;
      BAVirtCubeMember@1004 : Record 715;
      LineNo@1002 : Integer;
    BEGIN
      BALine.INIT;
      BALine."BA Db. Code" := BADbCode;
      LineNo := LineNo + 10000;
      BALine."Line No." := LineNo;
      BALine.Type := BALine.Type::"Virtual Cube";
      BALine.Description := FORMAT(BALine.Type);
      BALine.INSERT;

      BAVirtCube.SETRANGE("BA Db. Code",BADbCode);
      IF BAVirtCube.FIND('-') THEN
        REPEAT
          LineNo := LineNo + 10000;
          BALine."Line No." := LineNo;
          BALine.Indentation := 1;
          BALine.Name := BAVirtCube.Name;
          BALine.Description := BALine.Name;
          BALine."Source Line No." := BAVirtCube."Line No.";
          BALine."Source Parent Line No." := 0;
          BALine."Source Table No." := DATABASE::"BA Db. Virtual Cube";
          BALine.INSERT;

          BAVirtCubeMember.SETRANGE("BA Db. Code",BAVirtCube."BA Db. Code");
          BAVirtCubeMember.SETRANGE("BA Db. Virt. Cube Line No.",BAVirtCube."Line No.");
          IF BAVirtCubeMember.FIND('-') THEN BEGIN
            LineNo := LineNo + 10000;
            BALine."Line No." := LineNo;
            BALine.Indentation := 2;
            BALine.Name := BAVirtCube.Name;
            BALine.Description := Text006;
            BALine."Source Line No." := 0;
            BALine."Source Parent Line No." := 0;
            BALine."Source Table No." := 0;
            BALine.INSERT;
            BALine.Indentation := 3;
            REPEAT
              BAVirtCubeMember.CALCFIELDS("Cube Name");
              LineNo := LineNo + 10000;
              BALine."Line No." := LineNo;
              BALine.Description := BAVirtCubeMember."Cube Name";
              BALine."Source Line No." := BAVirtCubeMember."Line No.";
              BALine."Source Parent Line No." := BAVirtCubeMember."BA Db. Virt. Cube Line No.";
              BALine."Source Table No." := DATABASE::"BA Db. Virtual Cube Member";
              BALine.INSERT;
            UNTIL BAVirtCubeMember.NEXT = 0;
          END;
        UNTIL BAVirtCube.NEXT = 0;
    END;

    LOCAL PROCEDURE InitiateBALines_Dimensions@5(VAR BALine@1000 : Record 703;BADbCode@1001 : Code[10]);
    VAR
      BADim@1002 : Record 706;
      BADimForKey@1003 : Record 707;
      BADimLevel@1004 : Record 708;
      LineNo@1005 : Integer;
    BEGIN
      BALine.INIT;
      BALine."BA Db. Code" := BADbCode;
      BALine.Type := BALine.Type::Dimension;
      LineNo := LineNo + 10000;
      BALine."Line No." := LineNo;
      BALine.Description := FORMAT(BALine.Type);
      BALine.INSERT;

      BADim.SETRANGE("BA Db. Code",BADbCode);
      IF BADim.FIND('-') THEN
        REPEAT
          BADim.CALCFIELDS("Table Name","Numbered List Name");
          LineNo := LineNo + 10000;
          BALine."Line No." := LineNo;
          BALine.Indentation := 1;
          BALine.Name := BADim.Name;
          IF BADim.Type = BADim.Type::Time THEN
            BALine.Description := STRSUBSTNO('%1 (%2)',BADim.Name,BADim.Type)
          ELSE
            IF BADim."Standard Type" = BADim."Standard Type"::Table THEN
              BALine.Description := STRSUBSTNO('%1 ("%2")',BADim.Name,BADim."Table Name")
            ELSE
              BALine.Description := STRSUBSTNO('%1 ("%2")',BADim.Name,BADim."Numbered List Name");
          BALine."Source Line No." := BADim."Line No.";
          BALine."Source Parent Line No." := 0;
          BALine."Source Table No." := DATABASE::"BA Db. Dimension";
          BALine.INSERT;

          BADimForKey.SETRANGE("BA Db. Code",BADim."BA Db. Code");
          BADimForKey.SETRANGE("BA Db. Dimension Line No.",BADim."Line No.");
          IF BADimForKey.FIND('-') THEN BEGIN
            LineNo := LineNo + 10000;
            BALine."Line No." := LineNo;
            BALine.Indentation := 2;
            BALine.Name := BADim.Name;
            BALine.Description := Text008;
            BALine."Source Line No." := 0;
            BALine."Source Parent Line No." := 0;
            BALine."Source Table No." := 0;
            BALine.INSERT;
            BALine.Indentation := 3;
            REPEAT
              BADimForKey.CALCFIELDS("Relates-to Table Name","Numbered List Name");
              LineNo := LineNo + 10000;
              BALine."Line No." := LineNo;
              BALine.Description :=
                STRSUBSTNO(
                  '%1 %2%3',FORMAT(BADimForKey."Standard Type"),
                  BADimForKey."Relates-to Table Name",BADimForKey."Numbered List Name");
              BALine."Source Line No." := BADimForKey."Line No.";
              BALine."Source Parent Line No." := BADimForKey."BA Db. Dimension Line No.";
              BALine."Source Table No." := DATABASE::"BA Db. Dimension Relation";
              BALine.INSERT;
            UNTIL BADimForKey.NEXT = 0;
          END;

          BADimLevel.SETRANGE("BA Db. Code",BADim."BA Db. Code");
          BADimLevel.SETRANGE("BA Db. Dimension Line No.",BADim."Line No.");
          IF BADimLevel.FIND('-') THEN BEGIN
            LineNo := LineNo + 10000;
            BALine."Line No." := LineNo;
            BALine.Indentation := 2;
            BALine.Name := BADim.Name;
            BALine.Description := Text009;
            BALine."Source Line No." := 0;
            BALine."Source Parent Line No." := 0;
            BALine."Source Table No." := 0;
            BALine.INSERT;
            BALine.Indentation := 3;
            REPEAT
              BADimLevel.CALCFIELDS("Table Name","Field Name","Numbered List Name");
              LineNo := LineNo + 10000;
              BALine."Line No." := LineNo;
              IF BADimLevel."Standard Type" = BADimLevel."Standard Type"::Table THEN
                BALine.Description :=STRSUBSTNO('"%1"."%2"',BADimLevel."Table Name",BADimLevel."Field Name")
              ELSE
                BALine.Description :=BADimLevel."Numbered List Name";
              BALine."Source Line No." := BADimLevel."Line No.";
              BALine."Source Parent Line No." := BADimLevel."BA Db. Dimension Line No.";
              BALine."Source Table No." := DATABASE::"BA Db. Dimension Level";
              BALine.INSERT;
            UNTIL BADimLevel.NEXT = 0;
          END;
        UNTIL BADim.NEXT = 0;
    END;

    LOCAL PROCEDURE InitiateBALines_NumLists@6(VAR BALine@1000 : Record 703;BADbCode@1001 : Code[10]);
    VAR
      BANumList@1002 : Record 704;
      BANumListValue@1003 : Record 705;
      LineNo@1004 : Integer;
    BEGIN
      BALine.INIT;
      BALine."BA Db. Code" := BADbCode;
      BALine.Type := BALine.Type::"Numbered List";
      LineNo := LineNo + 10000;
      BALine."Line No." := LineNo;
      BALine.Description := FORMAT(BALine.Type);
      BALine.INSERT;

      BANumList.SETRANGE("BA Db. Code",BADbCode);
      IF BANumList.FIND('-') THEN
        REPEAT
          LineNo := LineNo + 10000;
          BALine."Line No." := LineNo;
          BALine.Indentation := 1;
          BALine.Name := BANumList.Name;
          BALine.Description := BANumList.Name;
          BALine."Source Line No." := BANumList."Line No.";
          BALine."Source Parent Line No." := 0;
          BALine."Source Table No." := DATABASE::"BA Db. Numbered List";
          BALine.INSERT;

          BANumListValue.SETRANGE("BA Db. Code",BANumList."BA Db. Code");
          BANumListValue.SETRANGE("BA Db. Num. List Line No.",BANumList."Line No.");
          IF BANumListValue.FIND('-') THEN BEGIN
            BALine.Indentation := 2;
            BALine.Name := BANumList.Name;
            REPEAT
              LineNo := LineNo + 10000;
              BALine."Line No." := LineNo;
              BALine.Description := STRSUBSTNO('%1 %2',FORMAT(BANumListValue.Value),BANumListValue.Name);
              BALine."Source Line No." := BANumListValue.Value;
              BALine."Source Parent Line No." := BANumListValue."BA Db. Num. List Line No.";
              BALine."Source Table No." := DATABASE::"BA Db. Numbered List Value";
              BALine.INSERT;
            UNTIL BANumListValue.NEXT = 0;
          END;
        UNTIL BANumList.NEXT = 0;
    END;

    PROCEDURE BACubeDimSelectFields@7(VAR BACubeDim@1008 : Record 713);
    VAR
      TempField@1001 : TEMPORARY Record 2000000041;
      BACubeDim2@1002 : Record 713;
      BACube@1004 : Record 709;
      BACubeTabRel@1005 : Record 710;
      BAFieldSelection@1003 : Form 720;
      BAOverviewNewElement@1007 : Codeunit 701;
      TableFilter@1000 : Text[250];
      FieldTypeFilter@1006 : Text[250];
      BADim@1009 : Record 706;
    BEGIN
      BACubeDim2.COPY(BACubeDim);
      IF BACubeDim2.FIND('-') THEN
        REPEAT
          TempField.INIT;
          TempField.TableNo := BACubeDim2."Table No.";
          TempField."No." := BACubeDim2."Field No.";
          IF TempField.INSERT THEN;
        UNTIL BACubeDim2.NEXT = 0;

      BACube.GET(BACubeDim.GETRANGEMIN("BA Db. Code"),BACubeDim.GETRANGEMIN("BA Db. Cube Line No."));
      TableFilter := FORMAT(BACube."Fact Table No.");
      BACubeTabRel.SETRANGE("BA Db. Code",BACube."BA Db. Code");
      BACubeTabRel.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
      IF BACubeTabRel.FIND('-') THEN
         REPEAT
           TableFilter := TableFilter + STRSUBSTNO('|%1',BACubeTabRel."Relates-to Table No.");
         UNTIL BACubeTabRel.NEXT = 0;
      FieldTypeFilter := STRSUBSTNO('<>%1',TempField.Type::Decimal);

      BAFieldSelection.SetSelectedFields(TableFilter,FieldTypeFilter,'',TempField);
      BAFieldSelection.LOOKUPMODE := TRUE;
      IF BAFieldSelection.RUNMODAL = ACTION::LookupOK THEN BEGIN
        BAFieldSelection.GetSelectedFields(TempField);
        IF TempField.FIND('-') THEN
          REPEAT
            BACubeDim2.SETRANGE("Table No.",TempField.TableNo);
            BACubeDim2.SETRANGE("Field No.",TempField."No.");
            IF NOT BACubeDim2.FIND('-') THEN BEGIN
              BACubeDim2."BA Db. Code" := BACube."BA Db. Code";
              BACubeDim2."BA Db. Cube Line No." := BACube."Line No.";
              BACubeDim2.RESET;
              BACubeDim2.SETRANGE("BA Db. Code",BACubeDim2."BA Db. Code");
              BACubeDim2.SETRANGE("BA Db. Cube Line No.",BACubeDim2."BA Db. Cube Line No.");
              IF NOT BACubeDim2.FIND('+') THEN
                BACubeDim2."Line No." := 0;
              BACubeDim2.INIT;
              BACubeDim2."Line No." := BACubeDim2."Line No." + 10000;
              BACubeDim2."Table No." := TempField.TableNo;
              BACubeDim2."Field No." := TempField."No.";
              BACubeDim2.VALIDATE(Name,TempField."Field Caption");
              BACubeDim2."BA Db. Dimension Line" :=
                BAOverviewNewElement.GetDimensionLine(BACube."BA Db. Code",TempField);
              BACubeDim2.INSERT;
            END;
          UNTIL TempField.NEXT = 0;
      END;
    END;

    PROCEDURE BACubeDimSelectDims@2(VAR BACubeDim@1010 : Record 713);
    VAR
      Dim@1008 : Record 348;
      TempDim@1003 : TEMPORARY Record 348;
      DimSelBuf@1001 : TEMPORARY Record 368;
      BACubeDim2@1002 : Record 713;
      BACube@1004 : Record 709;
      BACubeTabRel@1005 : Record 710;
      DimSelection@1009 : Form 562;
      BAOverviewNewElement@1007 : Codeunit 701;
      TableFilter@1000 : Text[250];
      FieldTypeFilter@1006 : Text[250];
    BEGIN
      BACubeDim2.COPY(BACubeDim);
      BACubeDim2.SETFILTER("Dimension Code",'<>%1','');
      IF BACubeDim2.FIND('-') THEN
        REPEAT
          Dim.GET(BACubeDim2."Dimension Code");
          TempDim := Dim;
          IF TempDim.INSERT THEN;
        UNTIL BACubeDim2.NEXT = 0;
      IF Dim.FIND('-') THEN
        REPEAT
          DimSelection.InsertDimSelBuf(TempDim.GET(Dim.Code),Dim.Code,Dim.Description);
        UNTIL Dim.NEXT = 0;

      BACube.GET(BACubeDim.GETRANGEMIN("BA Db. Code"),BACubeDim.GETRANGEMIN("BA Db. Cube Line No."));

      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimSelection.GetDimSelBuf(DimSelBuf);
        DimSelBuf.SETRANGE(Selected,TRUE);
        IF DimSelBuf.FIND('-') THEN
          REPEAT
            BACubeDim2.SETRANGE("Table No.",BACube."Fact Table No.");
            BACubeDim2.SETRANGE(BACubeDim2."Dimension Code",DimSelBuf.Code);
            IF NOT BACubeDim2.FIND('-') THEN BEGIN
              BACubeDim2."BA Db. Code" := BACube."BA Db. Code";
              BACubeDim2."BA Db. Cube Line No." := BACube."Line No.";
              BACubeDim2.RESET;
              BACubeDim2.SETRANGE("BA Db. Code",BACubeDim2."BA Db. Code");
              BACubeDim2.SETRANGE("BA Db. Cube Line No.",BACubeDim2."BA Db. Cube Line No.");
              IF NOT BACubeDim2.FIND('+') THEN
                BACubeDim2."Line No." := 0;
              BACubeDim2.INIT;
              BACubeDim2."Line No." := BACubeDim2."Line No." + 10000;
              BACubeDim2."Table No." := BACube."Fact Table No.";
              CASE BACubeDim2."Table No." OF
                DATABASE::"G/L Entry",
                DATABASE::"Cust. Ledger Entry",
                DATABASE::"Vendor Ledger Entry",
                DATABASE::"Item Ledger Entry",
                DATABASE::"Job Ledger Entry",
                DATABASE::"Res. Ledger Entry",
                DATABASE::"Bank Account Ledger Entry",
                DATABASE::"Phys. Inventory Ledger Entry",
                DATABASE::"Reminder/Fin. Charge Entry",
                DATABASE::"Detailed Cust. Ledg. Entry",
                DATABASE::"Detailed Vendor Ledg. Entry",
                DATABASE::"FA Ledger Entry",
                DATABASE::"Maintenance Ledger Entry",
                DATABASE::"Ins. Coverage Ledger Entry",
                DATABASE::"Value Entry",
                DATABASE::"Service Ledger Entry":
                  BEGIN
                    BACubeDim2."Field No." := 1;  // Entry No.
                    BACubeDim2."Dimension Entry Table No." := DATABASE::"Ledger Entry Dimension";
                  END;
                DATABASE::"Sales Shipment Line",
                DATABASE::"Sales Invoice Line",
                DATABASE::"Sales Cr.Memo Line",
                DATABASE::"Purch. Rcpt. Line",
                DATABASE::"Purch. Inv. Line",
                DATABASE::"Purch. Cr. Memo Line":
                  BEGIN
                    BACubeDim2."Field No." := 4; // Line No.
                    BACubeDim2."Dimension Entry Table No." := DATABASE::"Posted Document Dimension";
                  END;
                DATABASE::"G/L Budget Entry":
                  BEGIN
                    BACubeDim2."Field No." := 1; // Entry No.
                    BACubeDim2."Dimension Entry Table No." := DATABASE::"G/L Budget Dimension";
                  END;
              END;

              BACubeDim2."Dimension Code" := DimSelBuf.Code;
              BACubeDim2.VALIDATE(Name,DimSelBuf.Description);
              BACubeDim2."BA Db. Dimension Line" :=
                BAOverviewNewElement.GetDimensionLineFromDim(BACube."BA Db. Code",DimSelBuf.Code);
              BACubeDim2.INSERT;
            END;
          UNTIL DimSelBuf.NEXT = 0;
      END;
    END;

    PROCEDURE BACubeMeasureSelectFields@8(VAR BACubeMeasure@1007 : Record 711);
    VAR
      TempField@1001 : TEMPORARY Record 2000000041;
      BACubeMeasure2@1002 : Record 711;
      BACube@1004 : Record 709;
      BAFieldSelection@1003 : Form 720;
      TableFilter@1000 : Text[250];
      FieldTypeFilter@1006 : Text[250];
    BEGIN
      BACubeMeasure2.COPY(BACubeMeasure);
      IF BACubeMeasure2.FIND('-') THEN
        REPEAT
          TempField.INIT;
          TempField.TableNo := BACubeMeasure2."Table No.";
          TempField."No." := BACubeMeasure2."Field No.";
          IF TempField.INSERT THEN;
        UNTIL BACubeMeasure2.NEXT = 0;

      BACube.GET(BACubeMeasure.GETRANGEMIN("BA Db. Code"),BACubeMeasure.GETRANGEMIN("BA Db. Cube Line No."));
      TableFilter := FORMAT(BACube."Fact Table No.");
      FieldTypeFilter := STRSUBSTNO('%1|%2',TempField.Type::Integer,TempField.Type::Decimal);

      BAFieldSelection.SetSelectedFields(TableFilter,FieldTypeFilter,'=0',TempField);
      BAFieldSelection.LOOKUPMODE := TRUE;
      IF BAFieldSelection.RUNMODAL = ACTION::LookupOK THEN BEGIN
        BAFieldSelection.GetSelectedFields(TempField);
        IF TempField.FIND('-') THEN
          REPEAT
            BACubeMeasure2.SETRANGE("Table No.",TempField.TableNo);
            BACubeMeasure2.SETRANGE("Field No.",TempField."No.");
            IF NOT BACubeMeasure2.FIND('-') THEN BEGIN
              BACubeMeasure2."BA Db. Code" := BACube."BA Db. Code";
              BACubeMeasure2."BA Db. Cube Line No." := BACube."Line No.";
              BACubeMeasure2.RESET;
              BACubeMeasure2.SETRANGE("BA Db. Code",BACubeMeasure2."BA Db. Code");
              BACubeMeasure2.SETRANGE("BA Db. Cube Line No.",BACubeMeasure2."BA Db. Cube Line No.");
              IF NOT BACubeMeasure2.FIND('+') THEN
                BACubeMeasure2."Line No." := 0;
              BACubeMeasure2."Line No." := BACubeMeasure2."Line No." + 10000;
              BACubeMeasure2."Table No." := TempField.TableNo;
              BACubeMeasure2."Field No." := TempField."No.";
              BACubeMeasure2.VALIDATE(Name,TempField."Field Caption");
              BACubeMeasure2.INSERT;
            END;
          UNTIL TempField.NEXT = 0;
      END;
    END;

    PROCEDURE BACubeTableRelSelectFields@9(VAR BACubeTabRel@1007 : Record 710);
    VAR
      TempField@1001 : TEMPORARY Record 2000000041;
      BACubeTabRel2@1002 : Record 710;
      BACube@1004 : Record 709;
      BAFieldSelection@1003 : Form 720;
      TableFilter@1000 : Text[250];
      FieldTypeFilter@1006 : Text[250];
    BEGIN
      BACube.GET(BACubeTabRel.GETRANGEMIN("BA Db. Code"),BACubeTabRel.GETRANGEMIN("BA Db. Cube Line No."));
      TableFilter := FORMAT(BACube."Fact Table No.");
      BACubeTabRel2.COPY(BACubeTabRel);
      IF BACubeTabRel2.FIND('-') THEN
        REPEAT
          TempField.INIT;
          TempField.TableNo := BACubeTabRel2."Relates-from Table No.";
          TempField."No." := BACubeTabRel2."Relates-from Field No.";
          IF TempField.INSERT THEN;
          TableFilter := TableFilter + STRSUBSTNO('|%1',BACubeTabRel2."Relates-to Table No.");
        UNTIL BACubeTabRel2.NEXT = 0;

      FieldTypeFilter := STRSUBSTNO('<>%1',TempField.Type::Decimal);

      BAFieldSelection.SetSelectedFields(TableFilter,FieldTypeFilter,'<>0',TempField);
      BAFieldSelection.LOOKUPMODE := TRUE;
      IF BAFieldSelection.RUNMODAL = ACTION::LookupOK THEN BEGIN
        BAFieldSelection.GetSelectedFields(TempField);
        IF TempField.FIND('-') THEN
          REPEAT
            BACubeTabRel2.SETRANGE("Relates-from Table No.",TempField.TableNo);
            BACubeTabRel2.SETRANGE("Relates-from Field No.",TempField."No.");
            IF NOT BACubeTabRel2.FIND('-') THEN BEGIN
              BACubeTabRel2."BA Db. Code" := BACube."BA Db. Code";
              BACubeTabRel2."BA Db. Cube Line No." := BACube."Line No.";
              BACubeTabRel2.RESET;
              BACubeTabRel2.SETRANGE("BA Db. Code",BACubeTabRel2."BA Db. Code");
              BACubeTabRel2.SETRANGE("BA Db. Cube Line No.",BACubeTabRel2."BA Db. Cube Line No.");
              IF NOT BACubeTabRel2.FIND('+') THEN
                BACubeTabRel2."Line No." := 0;
              BACubeTabRel2."Line No." := BACubeTabRel2."Line No." + 10000;
              BACubeTabRel2."Relates-from Table No." := TempField.TableNo;
              BACubeTabRel2."Relates-from Field No." := TempField."No.";
              BACubeTabRel2."Relates-to Table No." := TempField.RelationTableNo;
              BACubeTabRel2.INSERT;
            END;
          UNTIL TempField.NEXT = 0;
      END;
    END;

    PROCEDURE CreateDefaultDatabase@11(VAR BADatabase@1002 : Record 700);
    VAR
      GLEntryCube@1000 : Record 709;
      GLBudgetEntryCube@1001 : Record 709;
      CustomerCube@1005 : Record 709;
      VendorCube@1009 : Record 709;
      CustLedgerEntryCube@1007 : Record 709;
      VendLedgerEntryCube@1010 : Record 709;
      ItemLedgerEntryCube@1008 : Record 709;
      ValueEntryCube@1012 : Record 709;
      JobLedgerEntryCube@1014 : Record 709;
      ResLedgerEntryCube@1015 : Record 709;
      OpportunityEntryCube@1016 : Record 709;
      GLVirtualCube@1003 : Record 714;
      CustLedgerVirtualCube@1006 : Record 714;
      VendLedgerVirtualCube@1011 : Record 714;
      InventoryVirtualCube@1013 : Record 714;
      BAVirtualCubeMember@1004 : Record 715;
    BEGIN
      CreateBADatabase(Text011,BADatabase);

      CreateSharedDimensions(BADatabase);

      CreateGLEntryCube(BADatabase,GLEntryCube);
      CreateGLBudgetEntryCube(BADatabase,GLBudgetEntryCube);
      CreateCustomerCube(BADatabase,CustomerCube);
      CreateCustLedgerEntryCube(BADatabase,CustLedgerEntryCube);
      CreateVendorCube(BADatabase,VendorCube);
      CreateVendLedgerEntryCube(BADatabase,VendLedgerEntryCube);
      CreateItemLedgerEntryCube(BADatabase,ItemLedgerEntryCube);
      CreateValueEntryCube(BADatabase,ValueEntryCube);
      CreateJobLedgerEntryCube(BADatabase,JobLedgerEntryCube);
      CreateResLedgerEntryCube(BADatabase,ResLedgerEntryCube);
      CreateOpportunityEntryCube(BADatabase,OpportunityEntryCube);

      CreateVirtualCube(Text015,BADatabase,GLVirtualCube);
      CreateVirtualCubeMember(GLVirtualCube,GLEntryCube,BAVirtualCubeMember);
      CreateVirtualCubeMember(GLVirtualCube,GLBudgetEntryCube,BAVirtualCubeMember);

      CreateVirtualCube(Text017,BADatabase,CustLedgerVirtualCube);
      CreateVirtualCubeMember(CustLedgerVirtualCube,CustomerCube,BAVirtualCubeMember);
      CreateVirtualCubeMember(CustLedgerVirtualCube,CustLedgerEntryCube,BAVirtualCubeMember);

      CreateVirtualCube(Text018,BADatabase,VendLedgerVirtualCube);
      CreateVirtualCubeMember(VendLedgerVirtualCube,VendorCube,BAVirtualCubeMember);
      CreateVirtualCubeMember(VendLedgerVirtualCube,VendLedgerEntryCube,BAVirtualCubeMember);

      CreateVirtualCube(Text019,BADatabase,InventoryVirtualCube);
      CreateVirtualCubeMember(InventoryVirtualCube,ValueEntryCube,BAVirtualCubeMember);
      CreateVirtualCubeMember(InventoryVirtualCube,ItemLedgerEntryCube,BAVirtualCubeMember);
    END;

    LOCAL PROCEDURE CreateSharedDimensions@56(BADatabase@1010 : Record 700);
    VAR
      GenBusPostingGrp@1012 : Record 250;
      GenProdPostingGrp@1013 : Record 251;
      InvPostingGrp@1021 : Record 94;
      Source@1011 : Record 230;
      Job@1014 : Record 167;
      Resource@1026 : Record 156;
      Cust@1007 : Record 18;
      Vend@1018 : Record 23;
      Country@1006 : Record 9;
      Territory@1005 : Record 286;
      GLEntry@1004 : Record 17;
      ItemLedgerEntry@1020 : Record 32;
      ValueEntry@1022 : Record 5802;
      GLAccount@1003 : Record 15;
      Item@1015 : Record 27;
      Location@1019 : Record 14;
      GLBudgetName@1016 : Record 95;
      SalespersonPurchaser@1027 : Record 13;
      Campaign@1028 : Record 5071;
      CampaignStatus@1034 : Record 5073;
      Opportunity@1029 : Record 5092;
      OpportunityEntry@1030 : Record 5093;
      SalesCycle@1032 : Record 5090;
      SalesCycleStage@1033 : Record 5091;
      Contact@1035 : Record 5050;
      FromField@1002 : Record 2000000041;
      ToField@1001 : Record 2000000041;
      BADimRel@1009 : Record 707;
      BADimLevel@1008 : Record 708;
      GLSetup@1017 : Record 98;
      Fields@1000 : Text[30];
    BEGIN
      // Business Posting Group Dim
      CreateBADimWithTable(BADatabase,DATABASE::"Gen. Business Posting Group",
        FORMAT(GenBusPostingGrp.FIELDNO(Code)),BAGenBusPostingGrpDim);
      CreateBADimLevel(BAGenBusPostingGrpDim,DATABASE::"Gen. Business Posting Group",
        GenBusPostingGrp.FIELDNO(Description),BADimLevel);

      // Product Posting Group Dim
      CreateBADimWithTable(BADatabase,DATABASE::"Gen. Product Posting Group",
        FORMAT(GenProdPostingGrp.FIELDNO(Code)),BAGenProdPostingGrpDim);
      CreateBADimLevel(BAGenProdPostingGrpDim,DATABASE::"Gen. Product Posting Group",
        GenProdPostingGrp.FIELDNO(Description),BADimLevel);

      // Source Dim
      CreateBADimWithTable(BADatabase,DATABASE::"Source Code",FORMAT(Source.FIELDNO(Code)),BASourceDim);
      CreateBADimLevel(BASourceDim,DATABASE::"Source Code",
        Source.FIELDNO(Description),BADimLevel);

      // Job Dim
      Fields := FORMAT(Job.FIELDNO("No.")) + ',' + FORMAT(Job.FIELDNO(Description));
      CreateBADimWithTable(BADatabase,DATABASE::Job,Fields,BAJobDim);

      // Resource Dim
      Fields := FORMAT(Resource.FIELDNO("No.")) + ',' + FORMAT(Resource.FIELDNO(Name));
      CreateBADimWithTable(BADatabase,DATABASE::Resource,Fields,BAResDim);

      // IncomeBalance Dim
      CreateBADimWithTable(BADatabase,DATABASE::"G/L Account",
        FORMAT(GLAccount.FIELDNO("Income/Balance")),BAIncomeBalanceDim);

      // Account Dim
      Fields := FORMAT(GLAccount.FIELDNO("No.")) + ',' + FORMAT(GLAccount.FIELDNO(Name));
      CreateBADimWithTable(BADatabase,DATABASE::"G/L Account",Fields,BAAccountDim);

      // Item Dim
      Fields := FORMAT(Item.FIELDNO("No.")) + ',' + FORMAT(Item.FIELDNO(Description));
      CreateBADimWithTable(BADatabase,DATABASE::Item,Fields,BAItemDim);

      // Location Dim
      Fields := FORMAT(Location.FIELDNO(Code)) + ',' + FORMAT(Location.FIELDNO(Location.Name));
      CreateBADimWithTable(BADatabase,DATABASE::Location,Fields,BALocationDim);

      // Item Ledger Entry Type Dim
      CreateBADimWithTable(BADatabase,DATABASE::"Item Ledger Entry",
        FORMAT(ItemLedgerEntry.FIELDNO("Entry Type")),BAItemEntryTypeDim);

      // "Value Entry" Item Entry Type Dim
      CreateBADimWithTable(BADatabase,DATABASE::"Value Entry",
        FORMAT(ValueEntry.FIELDNO("Item Ledger Entry Type")),BAVEItemEntryTypeDim);

      // "Value Entry" Entry Type Dim
      CreateBADimWithTable(BADatabase,DATABASE::"Value Entry",
        FORMAT(ValueEntry.FIELDNO("Entry Type")),BAVEEntryTypeDim);

      // BudgetName Dim
      CreateBADimWithTable(BADatabase,DATABASE::"G/L Budget Name",
        FORMAT(GLBudgetName.FIELDNO(Name)),BAGLBudgetNameDim);
      CreateBADimLevel(BAGLBudgetNameDim,DATABASE::"G/L Budget Name",
        GLBudgetName.FIELDNO(Description),BADimLevel);

      // Customer Dim
      Fields := FORMAT(Cust.FIELDNO("No.")) + ',' + FORMAT(Cust.FIELDNO(Name));
      CreateBADimWithTable(BADatabase,DATABASE::Customer,Fields,BACustDim);

      // Customer Country Dim
      CreateBADimWithTable(BADatabase,DATABASE::Customer,Fields,BACustCountryDim);

      FromField.GET(DATABASE::Customer,Cust.FIELDNO("Country/Region Code"));
      ToField.GET(FromField.RelationTableNo,Country.FIELDNO(Code));
      CreateBADimTableRelation(BACustCountryDim,FromField,ToField,BADimRel);
      UpdateDimName(BACustCountryDim,BADimRel);
      CreateBADimLevel(BACustCountryDim,DATABASE::"Country/Region",Country.FIELDNO(Name),BADimLevel);
      CreateBADimLevel(BACustCountryDim,DATABASE::Customer,Cust.FIELDNO("No."),BADimLevel);

      // Customer Territory Dim
      CreateBADimWithTable(BADatabase,DATABASE::Customer,Fields,BACustTerritoryDim);

      FromField.GET(DATABASE::Customer,Cust.FIELDNO("Territory Code"));
      ToField.GET(FromField.RelationTableNo,Territory.FIELDNO(Code));
      CreateBADimTableRelation(BACustTerritoryDim,FromField,ToField,BADimRel);
      UpdateDimName(BACustTerritoryDim,BADimRel);

      CreateBADimLevel(BACustTerritoryDim,DATABASE::Territory,Territory.FIELDNO(Name),BADimLevel);
      CreateBADimLevel(BACustTerritoryDim,DATABASE::Customer,Cust.FIELDNO("No."),BADimLevel);

      // Vendor Dim
      Fields := FORMAT(Vend.FIELDNO("No.")) + ',' + FORMAT(Vend.FIELDNO(Name));
      CreateBADimWithTable(BADatabase,DATABASE::Vendor,Fields,BAVendDim);

      // Vendor Country Dim
      CreateBADimWithTable(BADatabase,DATABASE::Vendor,Fields,BAVendCountryDim);

      FromField.GET(DATABASE::Vendor,Vend.FIELDNO("Country/Region Code"));
      ToField.GET(FromField.RelationTableNo,Country.FIELDNO(Code));
      CreateBADimTableRelation(BAVendCountryDim,FromField,ToField,BADimRel);
      UpdateDimName(BAVendCountryDim,BADimRel);
      CreateBADimLevel(BAVendCountryDim,DATABASE::"Country/Region",Country.FIELDNO(Name),BADimLevel);
      CreateBADimLevel(BAVendCountryDim,DATABASE::Vendor,Vend.FIELDNO("No."),BADimLevel);

      // Vendor Territory Dim
      CreateBADimWithTable(BADatabase,DATABASE::Vendor,Fields,BAVendTerritoryDim);

      FromField.GET(DATABASE::Vendor,Vend.FIELDNO("Territory Code"));
      ToField.GET(FromField.RelationTableNo,Territory.FIELDNO(Code));
      CreateBADimTableRelation(BAVendTerritoryDim,FromField,ToField,BADimRel);
      UpdateDimName(BAVendTerritoryDim,BADimRel);

      CreateBADimLevel(BAVendTerritoryDim,DATABASE::Territory,Territory.FIELDNO(Name),BADimLevel);
      CreateBADimLevel(BAVendTerritoryDim,DATABASE::Vendor,Vend.FIELDNO("No."),BADimLevel);

      //SalespersonPurchaser Dim
      CreateBADimWithTable(BADatabase,DATABASE::"Salesperson/Purchaser",
        FORMAT(SalespersonPurchaser.FIELDNO(Code)),BASalesPersonPurchaserDim);
      CreateBADimLevel(BASalesPersonPurchaserDim,DATABASE::"Salesperson/Purchaser",
        SalespersonPurchaser.FIELDNO(Name),BADimLevel);

      // Campaign Dim
      CreateBADimWithTable(BADatabase,DATABASE::Campaign,
        FORMAT(Campaign.FIELDNO("No.")),BACampaignDim);
      CreateBADimLevel(BACampaignDim,DATABASE::Campaign,
        Campaign.FIELDNO(Description),BADimLevel);

      // Campaign Status Dim
      Fields := FORMAT(Campaign.FIELDNO("No.")) + ',' + FORMAT(Campaign.FIELDNO(Description));
      CreateBADimWithTable(BADatabase,DATABASE::Campaign,Fields,BACampaignStatusDim);

      FromField.GET(DATABASE::Campaign,Campaign.FIELDNO("Status Code"));
      ToField.GET(FromField.RelationTableNo,CampaignStatus.FIELDNO(Code));
      CreateBADimTableRelation(BACampaignStatusDim,FromField,ToField,BADimRel);
      UpdateDimName(BACampaignStatusDim,BADimRel);
      CreateBADimLevel(BACampaignStatusDim,DATABASE::"Campaign Status",CampaignStatus.FIELDNO(Code),BADimLevel);
      CreateBADimLevel(BACampaignStatusDim,DATABASE::Campaign,Campaign.FIELDNO(Description),BADimLevel);

      // Opportunity Dim
      CreateBADimWithTable(BADatabase,DATABASE::Opportunity,
        FORMAT(Opportunity.FIELDNO("No.")),BAOpportunityDim);
      CreateBADimLevel(BAOpportunityDim,DATABASE::Opportunity,
        Campaign.FIELDNO(Description),BADimLevel);

      // Sales Cycle
      CreateBADimWithTable(BADatabase,DATABASE::"Sales Cycle",
        FORMAT(SalesCycle.FIELDNO(Code)),BASalesCycleDim);
      CreateBADimLevel(BASalesCycleDim,DATABASE::"Sales Cycle",
        SalesCycle.FIELDNO(Description),BADimLevel);

      // Sales Cycle Stage Dim
      CreateBADimWithTable(BADatabase,DATABASE::"Sales Cycle Stage",
        FORMAT(SalesCycleStage.FIELDNO("Sales Cycle Code")),BASalesCycleStageDim);
      CreateBADimLevel(BASalesCycleStageDim,DATABASE::"Sales Cycle Stage",
        SalesCycleStage.FIELDNO(Description),BADimLevel);

      // Opportunity Entry Active dim
      CreateBADimWithTable(BADatabase,DATABASE::"Opportunity Entry",
        FORMAT(OpportunityEntry.FIELDNO(Active)),BAOpportunityEntryActiveDim);
      CreateBADimLevel(BAOpportunityEntryActiveDim,DATABASE::"Opportunity Entry",
        OpportunityEntry.FIELDNO(Active),BADimLevel);

      // Contact Dim
      Fields := FORMAT(Contact.FIELDNO("No.")) + ',' + FORMAT(Contact.FIELDNO(Name));
      CreateBADimWithTable(BADatabase,DATABASE::Contact,Fields,BAContactDim);

      // Inventory Posting Group Dim
      CreateBADimWithTable(BADatabase,DATABASE::"Inventory Posting Group",
        FORMAT(InvPostingGrp.FIELDNO(Code)),BAInvPostingGrpDim);
      CreateBADimLevel(BAInvPostingGrpDim,DATABASE::"Inventory Posting Group",
        InvPostingGrp.FIELDNO(Description),BADimLevel);

      // Navision Dim
      GLSetup.GET;
      CreateBADimWithDim(BADatabase,GLSetup."Shortcut Dimension 1 Code",BADim1);
      CreateBADimWithDim(BADatabase,GLSetup."Shortcut Dimension 2 Code",BADim2);
      CreateBADimWithDim(BADatabase,GLSetup."Shortcut Dimension 3 Code",BADim3);
      CreateBADimWithDim(BADatabase,GLSetup."Shortcut Dimension 4 Code",BADim4);
      CreateBADimWithDim(BADatabase,GLSetup."Shortcut Dimension 5 Code",BADim5);
      CreateBADimWithDim(BADatabase,GLSetup."Shortcut Dimension 6 Code",BADim6);
      CreateBADimWithDim(BADatabase,GLSetup."Shortcut Dimension 7 Code",BADim7);
      CreateBADimWithDim(BADatabase,GLSetup."Shortcut Dimension 8 Code",BADim8);
    END;

    LOCAL PROCEDURE CreateGLEntryCube@37(BADatabase@1000 : Record 700;VAR BACube@1001 : Record 709);
    VAR
      BACubeTableRelation@1011 : Record 710;
      BACubeDimension@1010 : Record 713;
      BACubeMeasure@1008 : Record 711;
      AmountMeasure@1007 : Record 711;
      BACubeFunction@1006 : Record 712;
      GLEntry@1005 : Record 17;
      GLAccount@1004 : Record 15;
      FromField@1003 : Record 2000000041;
      ToField@1002 : Record 2000000041;
    BEGIN
      CreateBACube(BADatabase,DATABASE::"G/L Entry",BACube);

      FromField.GET(BACube."Fact Table No.",GLEntry.FIELDNO("G/L Account No."));
      ToField.GET(FromField.RelationTableNo,GLAccount.FIELDNO("No."));
      CreateBACubeTableRelation(BACube,FromField,ToField,BACubeTableRelation);

      CreateBACubeDimWithField(BACube,DATABASE::"G/L Entry",GLEntry.FIELDNO("Posting Date"),GLCubePostingDateDim);

      CreateBACubeDimWithDbDim(BACube,BAGenBusPostingGrpDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAGenProdPostingGrpDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BASourceDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAJobDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAIncomeBalanceDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAAccountDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim1,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim2,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim3,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim4,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim5,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim6,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim7,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim8,BACubeDimension);

      CreateBACubeMeasure(BACube,DATABASE::"G/L Entry",GLEntry.FIELDNO(Amount),'',AmountMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"G/L Entry",GLEntry.FIELDNO("Credit Amount"),'',BACubeMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"G/L Entry",GLEntry.FIELDNO("Debit Amount"),'',BACubeMeasure);

      CreateBACubeFunction(BACube,AmountMeasure,GLCubePostingDateDim,BACubeFunction.Type::"Balance at Date",BACubeFunction);
    END;

    LOCAL PROCEDURE CreateGLBudgetEntryCube@42(BADatabase@1000 : Record 700;VAR BACube@1001 : Record 709);
    VAR
      BACubeTableRelation@1011 : Record 710;
      BACubeDimension@1010 : Record 713;
      BACubeMeasure@1008 : Record 711;
      BACubeFunction@1006 : Record 712;
      GLBudgetEntry@1005 : Record 96;
      GLAccount@1004 : Record 15;
      PostingDateDim@1007 : Record 713;
      FromField@1003 : Record 2000000041;
      ToField@1002 : Record 2000000041;
    BEGIN
      CreateBACube(BADatabase,DATABASE::"G/L Budget Entry",BACube);

      FromField.GET(BACube."Fact Table No.",GLBudgetEntry.FIELDNO("G/L Account No."));
      ToField.GET(FromField.RelationTableNo,GLAccount.FIELDNO("No."));
      CreateBACubeTableRelation(BACube,FromField,ToField,BACubeTableRelation);

      CreateBACubeDimWithField(BACube,DATABASE::"G/L Budget Entry",GLBudgetEntry.FIELDNO(Date),PostingDateDim);

      CreateBACubeDimWithDbDim(BACube,BAIncomeBalanceDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAAccountDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAGLBudgetNameDim,BACubeDimension);

      CreateBACubeDimWithDbDim(BACube,BADim1,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim2,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim3,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim4,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim5,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim6,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim7,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim8,BACubeDimension);

      CreateBACubeMeasure(BACube,DATABASE::"G/L Budget Entry",GLBudgetEntry.FIELDNO(Amount),'',BACubeMeasure);
    END;

    LOCAL PROCEDURE CreateItemLedgerEntryCube@17(BADatabase@1000 : Record 700;VAR BACube@1001 : Record 709);
    VAR
      BACubeTableRelation@1011 : Record 710;
      BACubeDimension@1010 : Record 713;
      PostingDateDim@1009 : Record 713;
      BACubeMeasure@1008 : Record 711;
      QuantityMeasure@1007 : Record 711;
      BACubeFunction@1006 : Record 712;
      ItemLedgerEntry@1005 : Record 32;
      Item@1004 : Record 27;
      FromField@1003 : Record 2000000041;
      ToField@1002 : Record 2000000041;
    BEGIN
      CreateBACube(BADatabase,DATABASE::"Item Ledger Entry",BACube);

      FromField.GET(BACube."Fact Table No.",ItemLedgerEntry.FIELDNO("Item No."));
      ToField.GET(FromField.RelationTableNo,Item.FIELDNO("No."));
      CreateBACubeTableRelation(BACube,FromField,ToField,BACubeTableRelation);

      CreateBACubeDimWithField(BACube,DATABASE::"Item Ledger Entry",ItemLedgerEntry.FIELDNO("Posting Date"),PostingDateDim);
      CreateBACubeDimWithDbDim(BACube,BAItemDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BALocationDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAVendDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAInvPostingGrpDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAItemEntryTypeDim,BACubeDimension);

      CreateBACubeDimWithDbDim(BACube,BADim1,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim2,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim3,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim4,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim5,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim6,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim7,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim8,BACubeDimension);

      CreateBACubeMeasure(BACube,DATABASE::"Item Ledger Entry",ItemLedgerEntry.FIELDNO(Quantity),'',QuantityMeasure);
      CreateBACubeFunction(BACube,QuantityMeasure,PostingDateDim,BACubeFunction.Type::"Balance at Date",BACubeFunction);
    END;

    LOCAL PROCEDURE CreateValueEntryCube@62(BADatabase@1000 : Record 700;VAR BACube@1001 : Record 709);
    VAR
      BACubeTableRelation@1011 : Record 710;
      BACubeDimension@1010 : Record 713;
      PostingDateDim@1009 : Record 713;
      BACubeMeasure@1008 : Record 711;
      CostAmountActualMeasure@1007 : Record 711;
      ValuedQuantityMeasure@1012 : Record 711;
      InvoicedQuantityMeasure@1013 : Record 711;
      CostPostedToGLMeasure@1014 : Record 711;
      BACubeFunction@1006 : Record 712;
      ValueEntry@1005 : Record 5802;
      Item@1004 : Record 27;
      FromField@1003 : Record 2000000041;
      ToField@1002 : Record 2000000041;
    BEGIN
      CreateBACube(BADatabase,DATABASE::"Value Entry",BACube);

      FromField.GET(BACube."Fact Table No.",ValueEntry.FIELDNO("Item No."));
      ToField.GET(FromField.RelationTableNo,Item.FIELDNO("No."));
      CreateBACubeTableRelation(BACube,FromField,ToField,BACubeTableRelation);

      CreateBACubeDimWithField(BACube,DATABASE::"Value Entry",ValueEntry.FIELDNO("Posting Date"),PostingDateDim);
      CreateBACubeDimWithDbDim(BACube,BAItemDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BALocationDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BASourceDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAVendDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAInvPostingGrpDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAVEItemEntryTypeDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAVEEntryTypeDim,BACubeDimension);

      CreateBACubeDimWithDbDim(BACube,BADim1,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim2,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim3,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim4,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim5,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim6,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim7,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim8,BACubeDimension);

      CreateBACubeMeasure(BACube,DATABASE::"Value Entry",ValueEntry.FIELDNO("Cost Amount (Actual)"),'',CostAmountActualMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Value Entry",ValueEntry.FIELDNO("Valued Quantity"),'',ValuedQuantityMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Value Entry",ValueEntry.FIELDNO("Invoiced Quantity"),'',InvoicedQuantityMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Value Entry",ValueEntry.FIELDNO("Cost Posted to G/L"),'',CostPostedToGLMeasure);

      CreateBACubeFunction(BACube,CostAmountActualMeasure,PostingDateDim,BACubeFunction.Type::"Balance at Date",BACubeFunction);
    END;

    LOCAL PROCEDURE CreateJobLedgerEntryCube@21(BADatabase@1000 : Record 700;VAR BACube@1001 : Record 709);
    VAR
      BACubeTableRelation@1011 : Record 710;
      BACubeDimension@1010 : Record 713;
      PostingDateDim@1009 : Record 713;
      BACubeMeasure@1008 : Record 711;
      TotalCostMeasure@1007 : Record 711;
      QuantityMeasure@1012 : Record 711;
      TotalPriceMeasure@1013 : Record 711;
      JobLedgerEntry@1005 : Record 169;
      Job@1004 : Record 167;
      FromField@1003 : Record 2000000041;
      ToField@1002 : Record 2000000041;
    BEGIN
      CreateBACube(BADatabase,DATABASE::"Job Ledger Entry",BACube);

      FromField.GET(BACube."Fact Table No.",JobLedgerEntry.FIELDNO("Job No."));
      ToField.GET(FromField.RelationTableNo,Job.FIELDNO("No."));
      CreateBACubeTableRelation(BACube,FromField,ToField,BACubeTableRelation);

      CreateBACubeDimWithField(BACube,DATABASE::"Job Ledger Entry",JobLedgerEntry.FIELDNO("Posting Date"),PostingDateDim);
      CreateBACubeDimWithDbDim(BACube,BAGenBusPostingGrpDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAGenProdPostingGrpDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BASourceDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BACustDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BACustCountryDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BACustTerritoryDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAJobDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAJobPhaseDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAJobTaskDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAJobStepDim,BACubeDimension);

      CreateBACubeDimWithDbDim(BACube,BADim1,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim2,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim3,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim4,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim5,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim6,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim7,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim8,BACubeDimension);

      CreateBACubeMeasure(BACube,DATABASE::"Job Ledger Entry",JobLedgerEntry.FIELDNO("Total Cost (LCY)"),'',TotalCostMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Job Ledger Entry",JobLedgerEntry.FIELDNO(Quantity),'',QuantityMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Job Ledger Entry",JobLedgerEntry.FIELDNO("Total Price (LCY)"),'',TotalPriceMeasure);
    END;

    LOCAL PROCEDURE CreateResLedgerEntryCube@25(BADatabase@1000 : Record 700;VAR BACube@1001 : Record 709);
    VAR
      BACubeTableRelation@1011 : Record 710;
      BACubeDimension@1010 : Record 713;
      PostingDateDim@1009 : Record 713;
      BACubeMeasure@1008 : Record 711;
      TotalCostMeasure@1007 : Record 711;
      QuantityMeasure@1012 : Record 711;
      TotalPriceMeasure@1013 : Record 711;
      ResLedgerEntry@1005 : Record 203;
      Resource@1004 : Record 156;
      FromField@1003 : Record 2000000041;
      ToField@1002 : Record 2000000041;
    BEGIN
      CreateBACube(BADatabase,DATABASE::"Res. Ledger Entry",BACube);

      FromField.GET(BACube."Fact Table No.",ResLedgerEntry.FIELDNO("Resource No."));
      ToField.GET(FromField.RelationTableNo,Resource.FIELDNO("No."));
      CreateBACubeTableRelation(BACube,FromField,ToField,BACubeTableRelation);

      CreateBACubeDimWithField(BACube,DATABASE::"Res. Ledger Entry",ResLedgerEntry.FIELDNO("Posting Date"),PostingDateDim);
      CreateBACubeDimWithDbDim(BACube,BAGenBusPostingGrpDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAGenProdPostingGrpDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BASourceDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAResDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAJobDim,BACubeDimension);

      CreateBACubeDimWithDbDim(BACube,BADim1,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim2,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim3,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim4,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim5,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim6,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim7,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim8,BACubeDimension);

      CreateBACubeMeasure(BACube,DATABASE::"Res. Ledger Entry",ResLedgerEntry.FIELDNO("Total Cost"),'',TotalCostMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Res. Ledger Entry",ResLedgerEntry.FIELDNO(Quantity),'',QuantityMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Res. Ledger Entry",ResLedgerEntry.FIELDNO("Total Price"),'',TotalPriceMeasure);
    END;

    LOCAL PROCEDURE CreateOpportunityEntryCube@31(BADatabase@1000 : Record 700;VAR BACube@1001 : Record 709);
    VAR
      BACubeTableRelation@1011 : Record 710;
      BACubeDimension@1010 : Record 713;
      PostingDateDim@1009 : Record 713;
      BACubeMeasure@1008 : Record 711;
      EstimatedValueMeasure@1007 : Record 711;
      CalcCurrentValueMeasure@1012 : Record 711;
      OpportunityEntryCount@1013 : Record 711;
      BACubeFunction@1006 : Record 712;
      OpportunityEntry@1005 : Record 5093;
      Campaign@1004 : Record 5071;
      FromField@1003 : Record 2000000041;
      ToField@1002 : Record 2000000041;
    BEGIN
      CreateBACube(BADatabase,DATABASE::"Opportunity Entry",BACube);

      FromField.GET(BACube."Fact Table No.",OpportunityEntry.FIELDNO("Campaign No."));
      ToField.GET(FromField.RelationTableNo,Campaign.FIELDNO("No."));
      CreateBACubeTableRelation(BACube,FromField,ToField,BACubeTableRelation);

      CreateBACubeDimWithField(BACube,DATABASE::"Opportunity Entry",
        OpportunityEntry.FIELDNO("Estimated Close Date"),PostingDateDim);
      CreateBACubeDimWithDbDim(BACube,BASalesPersonPurchaserDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BACampaignDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BACampaignStatusDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAOpportunityDim,BACubeDimension);
      CreateBACubeDimWithField(BACube,DATABASE::"Opportunity Entry",
        OpportunityEntry.FIELDNO("Close Opportunity Code"),BACubeDimension);

      CreateBACubeDimWithField(BACube,DATABASE::"Opportunity Entry",
        OpportunityEntry.FIELDNO("Chances of Success %"),BACubeDimension);
      CreateBACubeDimWithField(BACube,DATABASE::"Opportunity Entry",
        OpportunityEntry.FIELDNO("Completed %"),BACubeDimension);

      CreateBACubeDimWithDbDim(BACube,BASalesCycleDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAOpportunityEntryActiveDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAContactDim,BACubeDimension);

      CreateBACubeDimWithDbDim(BACube,BADim1,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim2,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim3,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim4,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim5,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim6,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim7,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim8,BACubeDimension);

      CreateBACubeMeasure(BACube,DATABASE::"Opportunity Entry",
        OpportunityEntry.FIELDNO("Estimated Value (LCY)"),'',EstimatedValueMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Opportunity Entry",
        OpportunityEntry.FIELDNO("Calcd. Current Value (LCY)"),'',CalcCurrentValueMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Opportunity Entry",1,'1',OpportunityEntryCount);
    END;

    LOCAL PROCEDURE CreateCustomerCube@39(BADatabase@1001 : Record 700;VAR BACube@1000 : Record 709);
    VAR
      Cust@1002 : Record 18;
      BACubeDimension@1004 : Record 713;
      BACubeMeasure@1003 : Record 711;
    BEGIN
      CreateBACube(BADatabase,DATABASE::Customer,BACube);

      CreateBACubeDimWithDbDim(BACube,BACustDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BACustCountryDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BACustTerritoryDim,BACubeDimension);
      CreateBACubeMeasure(BACube,DATABASE::Customer,Cust.FIELDNO("Credit Limit (LCY)"),'',BACubeMeasure);
    END;

    LOCAL PROCEDURE CreateCustLedgerEntryCube@46(BADatabase@1000 : Record 700;VAR BACube@1001 : Record 709);
    VAR
      BACubeDimension@1010 : Record 713;
      PostingDateDim@1009 : Record 713;
      BACubeMeasure@1008 : Record 711;
      AmountMeasure@1007 : Record 711;
      BACubeFunction@1006 : Record 712;
      DetailedCustLedgEntry@1002 : Record 379;
    BEGIN
      CreateBACube(BADatabase,DATABASE::"Detailed Cust. Ledg. Entry",BACube);

      CreateBACubeDimWithField(BACube,DATABASE::"Detailed Cust. Ledg. Entry",
        DetailedCustLedgEntry.FIELDNO("Posting Date"),PostingDateDim);
      CreateBACubeDimWithDbDim(BACube,BASourceDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BACustDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BACustCountryDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BACustTerritoryDim,BACubeDimension);

      CreateBACubeDimWithDbDim(BACube,BADim1,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim2,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim3,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim4,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim5,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim6,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim7,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim8,BACubeDimension);

      CreateBACubeMeasure(BACube,DATABASE::"Detailed Cust. Ledg. Entry",
        DetailedCustLedgEntry.FIELDNO("Amount (LCY)"),'',AmountMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Detailed Cust. Ledg. Entry",
        DetailedCustLedgEntry.FIELDNO("Debit Amount (LCY)"),'',BACubeMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Detailed Cust. Ledg. Entry",
        DetailedCustLedgEntry.FIELDNO("Credit Amount (LCY)"),'',BACubeMeasure);

      CreateBACubeFunction(BACube,AmountMeasure,PostingDateDim,
        BACubeFunction.Type::"Balance at Date",BACubeFunction);
    END;

    LOCAL PROCEDURE CreateVendorCube@30(BADatabase@1001 : Record 700;VAR BACube@1000 : Record 709);
    VAR
      Vend@1002 : Record 23;
      BACubeDimension@1004 : Record 713;
      BACubeMeasure@1003 : Record 711;
    BEGIN
      CreateBACube(BADatabase,DATABASE::Vendor,BACube);

      CreateBACubeDimWithDbDim(BACube,BAVendDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAVendCountryDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAVendTerritoryDim,BACubeDimension);

      CreateBACubeMeasure(BACube,DATABASE::Vendor,Vend.FIELDNO("Budgeted Amount"),'',BACubeMeasure);
    END;

    LOCAL PROCEDURE CreateVendLedgerEntryCube@29(BADatabase@1000 : Record 700;VAR BACube@1001 : Record 709);
    VAR
      BACubeDimension@1010 : Record 713;
      PostingDateDim@1009 : Record 713;
      BACubeMeasure@1008 : Record 711;
      AmountMeasure@1007 : Record 711;
      BACubeFunction@1006 : Record 712;
      DetailedVendLedgEntry@1005 : Record 380;
    BEGIN
      CreateBACube(BADatabase,DATABASE::"Detailed Vendor Ledg. Entry",BACube);

      CreateBACubeDimWithField(BACube,DATABASE::"Detailed Vendor Ledg. Entry",
        DetailedVendLedgEntry.FIELDNO("Posting Date"),PostingDateDim);
      CreateBACubeDimWithDbDim(BACube,BASourceDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAVendDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAVendCountryDim,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BAVendTerritoryDim,BACubeDimension);

      CreateBACubeDimWithDbDim(BACube,BADim1,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim2,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim3,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim4,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim5,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim6,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim7,BACubeDimension);
      CreateBACubeDimWithDbDim(BACube,BADim8,BACubeDimension);

      CreateBACubeMeasure(BACube,DATABASE::"Detailed Vendor Ledg. Entry",
        DetailedVendLedgEntry.FIELDNO("Amount (LCY)"),'',AmountMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Detailed Vendor Ledg. Entry",
        DetailedVendLedgEntry.FIELDNO("Debit Amount (LCY)"),'',BACubeMeasure);
      CreateBACubeMeasure(BACube,DATABASE::"Detailed Vendor Ledg. Entry",
        DetailedVendLedgEntry.FIELDNO("Credit Amount (LCY)"),'',BACubeMeasure);

      CreateBACubeFunction(BACube,AmountMeasure,PostingDateDim,
        BACubeFunction.Type::"Balance at Date",BACubeFunction);
    END;

    PROCEDURE CreateBADatabase@10(Code@1000 : Code[10];VAR BADatabase@1005 : Record 700);
    BEGIN
      BADatabase.INIT;

      BADatabase.VALIDATE(Code,Code);
      BADatabase.VALIDATE(Name,Code + ' ' + BADatabase.TABLECAPTION);
      BADatabase.VALIDATE(Active,TRUE);

      BADatabase.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateBACube@13(BADatabase@1004 : Record 700;FactTableNo@1002 : Integer;VAR BACube@1000 : Record 709);
    BEGIN
      BACube.INIT;

      BACube.VALIDATE("BA Db. Code",BADatabase.Code);
      BACube.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Cube",
        BACube.FIELDNO("Line No."),BADatabase.Code,0));
      BACube.VALIDATE("Fact Table No.",FactTableNo);

      BACube.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateBACubeTableRelation@16(BACube@1000 : Record 709;FromField@1001 : Record 2000000041;ToField@1002 : Record 2000000041;VAR BACubeTabRel@1004 : Record 710);
    BEGIN
      BACubeTabRel.INIT;

      BACubeTabRel.VALIDATE("BA Db. Code",BACube."BA Db. Code");
      BACubeTabRel.VALIDATE("BA Db. Cube Line No.",BACube."Line No.");
      BACubeTabRel.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Cube Table Relation",
        BACubeTabRel.FIELDNO("Line No."),BACube."BA Db. Code",BACube."Line No."));
      BACubeTabRel.VALIDATE("Relates-to Table No.",ToField.TableNo);
      BACubeTabRel.VALIDATE("Relates-from Table No.",FromField.TableNo);
      BACubeTabRel.VALIDATE("Relates-from Field No.",FromField."No.");

      BACubeTabRel.INSERT(TRUE);
    END;

    PROCEDURE CreateBACubeDimWithField@12(BACube@1006 : Record 709;DimTable@1003 : Integer;DimFieldNo@1005 : Integer;VAR BACubeDimension@1000 : Record 713);
    VAR
      DimField@1001 : Record 2000000041;
      BADim@1004 : Record 706;
      GLBudgetEntry@1007 : Record 96;
      BAOverviewNewElement@1002 : Codeunit 701;
    BEGIN
      BACubeDimension.INIT;

      BACubeDimension.VALIDATE("BA Db. Code",BACube."BA Db. Code");
      BACubeDimension.VALIDATE("BA Db. Cube Line No.",BACube."Line No.");
      BACubeDimension.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Cube Dimension",
        BACubeDimension.FIELDNO("Line No."),BACube."BA Db. Code",BACube."Line No."));

      BACubeDimension.VALIDATE("Table No.",DimTable);
      BACubeDimension.VALIDATE("Field No.",DimFieldNo);

      IF (DimTable = DATABASE::"G/L Budget Entry") AND (DimFieldNo = GLBudgetEntry.FIELDNO(Date)) THEN
        BACubeDimension.VALIDATE("BA Db. Dimension Line",GLCubePostingDateDim."BA Db. Dimension Line")
      ELSE BEGIN
        DimField.GET(DimTable,DimFieldNo);
        BACubeDimension.VALIDATE("BA Db. Dimension Line",
          BAOverviewNewElement.GetDimensionLine(BACube."BA Db. Code",DimField));
      END;

      IF (DimField.Type = DimField.Type::Date) OR (DimField.Type = DimField.Type::DateTime) THEN BEGIN
        BADim.GET(BACube."BA Db. Code",BACubeDimension."BA Db. Dimension Line");
        BACubeDimension.VALIDATE(Name,BADim.Name);
      END;

      BACubeDimension.INSERT(TRUE);
    END;

    PROCEDURE CreateBACubeDimWithDim@18(BACube@1006 : Record 709;DimCode@1005 : Code[20];VAR BACubeDimension@1000 : Record 713);
    VAR
      DimField@1001 : Record 2000000041;
      BAOverviewNewElement@1002 : Codeunit 701;
    BEGIN
      BACubeDimension.INIT;

      BACubeDimension.VALIDATE("BA Db. Code",BACube."BA Db. Code");
      BACubeDimension.VALIDATE("BA Db. Cube Line No.",BACube."Line No.");
      BACubeDimension.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Cube Dimension",
        BACubeDimension.FIELDNO("Line No."),BACube."BA Db. Code",BACube."Line No."));
      BACubeDimension.VALIDATE("Table No.",BACube."Fact Table No.");
      BACubeDimension.VALIDATE("Field No.",GetDimFieldNo(BACube."Fact Table No."));

      DimField.GET(BACube."Fact Table No.",BACubeDimension."Field No.");
      BACubeDimension.VALIDATE("BA Db. Dimension Line",
        BAOverviewNewElement.GetDimensionLineFromDim(BACube."BA Db. Code",DimCode));
      BACubeDimension.VALIDATE("Dimension Code",DimCode);
      BACubeDimension.VALIDATE("Dimension Entry Table No.",GetDimEntryTableNo(BACube."Fact Table No."));

      BACubeDimension.INSERT(TRUE);
    END;

    PROCEDURE CreateBACubeDimWithDbDim@45(BACube@1002 : Record 709;BADim@1001 : Record 706;VAR BACubeDim@1000 : Record 713);
    VAR
      RelatedField@1003 : Record 2000000041;
      BANumList@1004 : Record 704;
    BEGIN
      IF BADim."Line No." = 0 THEN
        EXIT;

      BACubeDim.INIT;

      BACubeDim.VALIDATE("BA Db. Code",BACube."BA Db. Code");
      BACubeDim.VALIDATE("BA Db. Cube Line No.",BACube."Line No.");
      BACubeDim.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Cube Dimension",
        BACubeDim.FIELDNO("Line No."),BACube."BA Db. Code",BACube."Line No."));
      BACubeDim.VALIDATE("BA Db. Dimension Line",BADim."Line No.");

      CASE BADim."Standard Type" OF
        BADim."Standard Type"::Table:
          BEGIN
            GetRelatedField(BACube,BADim,RelatedField);
            BACubeDim.VALIDATE(Name,RelatedField."Field Caption");
            BACubeDim.VALIDATE("Table No.",RelatedField.TableNo);
            BACubeDim.VALIDATE("Field No.",RelatedField."No.");
          END;
        BADim."Standard Type"::"Numbered List":
          BEGIN
            BANumList.GET(BADim."BA Db. Code",BADim."Numbered List Line No.");
            BANumList.CALCFIELDS("Field Name");
            BACubeDim.VALIDATE(Name,BANumList."Field Name");
            BACubeDim.VALIDATE("Table No.",BANumList."Table No.");
            BACubeDim.VALIDATE("Field No.",BANumList."Field No.");
          END;
        BADim."Standard Type"::Dimension:
          BEGIN
            BADim.CALCFIELDS("Dimension Name");
            BACubeDim.VALIDATE(Name,BADim."Dimension Name");
            BACubeDim.VALIDATE("Table No.",BACube."Fact Table No.");
            BACubeDim.VALIDATE("Field No.",GetDimFieldNo(BACube."Fact Table No."));
            BACubeDim.VALIDATE("Dimension Code",BADim."Dimension Code");
            BACubeDim.VALIDATE("Dimension Entry Table No.",GetDimEntryTableNo(BACube."Fact Table No."));
          END
      END;

      BACubeDim.INSERT(TRUE);
    END;

    PROCEDURE CreateBACubeMeasure@15(BACube@1006 : Record 709;MeasureTable@1001 : Integer;MeasureFieldNo@1005 : Integer;Expression@1002 : Text[250];VAR BADbCubeMeasure@1000 : Record 711);
    BEGIN
      BADbCubeMeasure.INIT;

      BADbCubeMeasure.VALIDATE("BA Db. Code",BACube."BA Db. Code");
      BADbCubeMeasure.VALIDATE("BA Db. Cube Line No.",BACube."Line No.");
      BADbCubeMeasure.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Cube Measure",
        BADbCubeMeasure.FIELDNO("Line No."),BACube."BA Db. Code",BACube."Line No."));
      BADbCubeMeasure.VALIDATE("Table No.",MeasureTable);
      BADbCubeMeasure.VALIDATE("Field No.",MeasureFieldNo);
      IF Expression <> '' THEN
        BADbCubeMeasure.VALIDATE(Expression,Expression);
      BADbCubeMeasure.INSERT(TRUE);
    END;

    PROCEDURE CreateBACubeFunction@14(BACube@1001 : Record 709;BACubeMeasure@1004 : Record 711;BACubeTimeDim@1003 : Record 713;FunctionType@1002 : 'Balance at Date,Year to Date';VAR BACubeFunc@1000 : Record 712);
    BEGIN
      BACubeFunc.INIT;

      BACubeFunc.VALIDATE("BA Db. Code",BACubeTimeDim."BA Db. Code");
      BACubeFunc.VALIDATE("BA Db. Cube Line No.",BACubeTimeDim."BA Db. Cube Line No.");
      BACubeFunc.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Cube Function",
        BACubeFunc.FIELDNO("Line No."),BACube."BA Db. Code",BACube."Line No."));
      BACubeFunc.VALIDATE(Type,FunctionType);
      BACubeFunc.VALIDATE("Measure Line No.",BACubeMeasure."Line No.");
      BACubeFunc.VALIDATE("Time Dimension Line No.",BACubeTimeDim."Line No.");

      BACubeMeasure.CALCFIELDS("Field Name");
      IF STRLEN(FORMAT(SELECTSTR(FunctionType + 1,Text020)) + ' ' + BACubeMeasure."Field Name") <=
        FieldLength(DATABASE::"BA Db. Cube Function",BACubeFunc.FIELDNO(Name))
      THEN
        BACubeFunc.VALIDATE(Name,FORMAT(SELECTSTR(FunctionType + 1,Text020)) + ' ' + BACubeMeasure."Field Name")
      ELSE
        BACubeFunc.VALIDATE(Name,FORMAT(SELECTSTR(FunctionType + 1,Text020)));

      BACubeFunc.INSERT(TRUE);
    END;

    PROCEDURE CreateVirtualCube@20(VirtualCubeName@1000 : Text[50];BADatabase@1002 : Record 700;VAR BAVirtualCube@1001 : Record 714);
    BEGIN
      BAVirtualCube.INIT;

      BAVirtualCube.VALIDATE("BA Db. Code",BADatabase.Code);
      BAVirtualCube.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Virtual Cube",
        BAVirtualCube.FIELDNO("Line No."),BADatabase.Code,0));
      BAVirtualCube.VALIDATE(Name,VirtualCubeName);

      BAVirtualCube.INSERT(TRUE);
    END;

    PROCEDURE CreateVirtualCubeMember@34(BAVirtualCube@1003 : Record 714;BACube@1002 : Record 709;VAR BAVirtualCubeMember@1001 : Record 715);
    BEGIN
      BAVirtualCubeMember.INIT;

      BAVirtualCubeMember.VALIDATE("BA Db. Code",BAVirtualCube."BA Db. Code");
      BAVirtualCubeMember.VALIDATE("BA Db. Virt. Cube Line No.",BAVirtualCube."Line No.");
      BAVirtualCubeMember.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Virtual Cube Member",
        BAVirtualCubeMember.FIELDNO("Line No."),BAVirtualCube."BA Db. Code",BAVirtualCube."Line No."));
      BAVirtualCubeMember.VALIDATE("Cube Line No.",BACube."Line No.");

      BAVirtualCubeMember.INSERT(TRUE);
    END;

    PROCEDURE CreateBADimWithTable@22(BADatabase@1000 : Record 700;TableID@1001 : Integer;Fields@1002 : Text[50];VAR BADim@1003 : Record 706);
    VAR
      Field@1004 : Record 2000000041;
      FieldNo@1005 : Integer;
      AllObjWithCaption@1006 : Record 2000000058;
      BANumList@1007 : Record 704;
    BEGIN
      BADim.INIT;
      BADim.VALIDATE("BA Db. Code",BADatabase.Code);
      BADim.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Dimension",
        BADim.FIELDNO("Line No."),BADatabase.Code,0));

      EVALUATE(FieldNo,SELECTSTR(1,Fields));
      Field.GET(TableID,FieldNo);
      CASE Field.Type OF
        Field.Type::Option,Field.Type::Boolean:
          BEGIN
            CreateBANumList(BADatabase,TableID,FieldNo,BANumList);
            CreateBADimWithNumList(BADatabase,BANumList,BADim);
            EXIT;
          END;
        Field.Type::Date,Field.Type::DateTime:
          BEGIN
            BADim.Type := BADim.Type::Time;
            AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table,TableID);
            IF STRLEN(AllObjWithCaption."Object Caption" + Field."Field Caption") + 1 > 24 THEN
              BADim.VALIDATE(Name,Field."Field Caption")
            ELSE
              BADim.VALIDATE(Name,AllObjWithCaption."Object Caption" + ' ' + Field."Field Caption");
          END;
        ELSE
          BEGIN
            BADim.Type := BADim.Type::Standard;
            BADim.VALIDATE("Table No.",TableID);
            BADim.VALIDATE("Field Numbers",Fields);
            BADim.CALCFIELDS("Table Name");
            BADim.VALIDATE(Name,BADim."Table Name");
          END
      END;

      BADim.INSERT(TRUE);
    END;

    PROCEDURE CreateBADimWithDim@38(BADatabase@1003 : Record 700;DimCode@1002 : Code[20];VAR BADim@1000 : Record 706);
    VAR
      Dim@1004 : Record 348;
    BEGIN
      IF DimCode = '' THEN
        EXIT;

      BADim.INIT;

      BADim.VALIDATE("BA Db. Code",BADatabase.Code);
      BADim.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Dimension",
        BADim.FIELDNO("Line No."),BADatabase.Code,0));

      BADim.VALIDATE(Type,BADim.Type::Standard);
      BADim.VALIDATE("Standard Type",BADim."Standard Type"::Dimension);
      BADim."Table No." := DATABASE::Dimension;
      BADim."Field Numbers" := '2';
      Dim.GET(DimCode);
      BADim.VALIDATE("Dimension Code",Dim.Code);
      BADim.VALIDATE(Name,Dim.Name);

      BADim.INSERT;
    END;

    PROCEDURE CreateBADimWithNumList@40(BADatabase@1000 : Record 700;BANumList@1001 : Record 704;VAR BADim@1003 : Record 706);
    BEGIN
      BADim.INIT;

      BADim.VALIDATE("BA Db. Code",BADatabase.Code);
      BADim.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Dimension",
        BADim.FIELDNO("Line No."),BADatabase.Code,0));
      BADim.VALIDATE(Type,BADim.Type::Standard);
      BADim.VALIDATE("Standard Type",BADim."Standard Type"::"Numbered List");
      BADim."Numbered List Line No." := BANumList."Line No.";
      BADim.VALIDATE(Name,BANumList.Name);

      BADim.INSERT(TRUE);
    END;

    PROCEDURE CreateBADimTableRelation@41(BADim@1003 : Record 706;FromField@1002 : Record 2000000041;ToField@1001 : Record 2000000041;VAR BADimRel@1000 : Record 707);
    BEGIN
      BADimRel.INIT;

      BADimRel.VALIDATE("BA Db. Code",BADim."BA Db. Code");
      BADimRel.VALIDATE("BA Db. Dimension Line No.",BADim."Line No.");
      BADimRel.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Dimension Relation",
        BADimRel.FIELDNO("Line No."),BADim."BA Db. Code",BADim."Line No."));
      BADimRel.VALIDATE("Relates-to Table No.",ToField.TableNo);
      BADimRel."Relates-from Table No." := FromField.TableNo;
      BADimRel.VALIDATE("Relates-from Field Numbers",FORMAT(FromField."No."));
      BADimRel.VALIDATE("Relates-from Field Numbers",FORMAT(FromField."No."));

      BADimRel.INSERT(TRUE);
    END;

    PROCEDURE CreateBADimLevel@43(BADim@1003 : Record 706;TableID@1002 : Integer;FieldNo@1001 : Integer;VAR BADimLevel@1000 : Record 708);
    BEGIN
      BADimLevel.INIT;

      BADimLevel.VALIDATE("BA Db. Code",BADim."BA Db. Code");
      BADimLevel.VALIDATE("BA Db. Dimension Line No.",BADim."Line No.");
      BADimLevel.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Dimension Level",
        BADimLevel.FIELDNO("Line No."),BADim."BA Db. Code",BADim."Line No."));
      BADimLevel.VALIDATE("Table No.",TableID);
      BADimLevel.VALIDATE("Field No.",FieldNo);

      BADimLevel.INSERT(TRUE);
    END;

    PROCEDURE CreateBANumList@33(BADatabase@1000 : Record 700;TableNo@1002 : Integer;FieldNo@1003 : Integer;VAR BANumList@1001 : Record 704);
    BEGIN
      BANumList.INIT;

      BANumList.VALIDATE("BA Db. Code",BADatabase.Code);
      BANumList.VALIDATE("Line No.",GetNextNo(DATABASE::"BA Db. Numbered List",
        BANumList.FIELDNO("Line No."),BADatabase.Code,0));
      BANumList.VALIDATE("Table No.",TableNo);
      BANumList.VALIDATE("Field No.",FieldNo);
      BANumList.CALCFIELDS("Table Name","Field Name");
      IF STRLEN(BANumList."Table Name" + BANumList."Field Name") + 1 > 24 THEN
        BANumList.VALIDATE(Name,BANumList."Field Name")
      ELSE
        BANumList.VALIDATE(Name,BANumList."Table Name" + ' ' + BANumList."Field Name");

      BANumList.INSERT(TRUE);
    END;

    PROCEDURE GetNextNo@47(TableID@1003 : Integer;FieldNo@1004 : Integer;ParentKeyVal1@1002 : Code[10];ParentKeyVal2@1006 : Integer) : Integer;
    VAR
      RecRef@1001 : RecordRef;
      FieldRef@1000 : FieldRef;
      LastNo@1005 : Integer;
    BEGIN
      RecRef.OPEN(TableID);
      IF ParentKeyVal1 <> '' THEN
        RecRef.SETVIEW(STRSUBSTNO('WHERE(%1=FILTER(%2))',1,ParentKeyVal1));

      IF ParentKeyVal2 <> 0 THEN
        RecRef.SETVIEW(STRSUBSTNO('WHERE(%1=FILTER(%2))',2,ParentKeyVal2));

      IF NOT RecRef.FIND('+') THEN
        EXIT(10000);

      FieldRef := RecRef.FIELD(FieldNo);
      EVALUATE(LastNo,FORMAT(FieldRef.VALUE));
      EXIT(LastNo + 10000);
    END;

    LOCAL PROCEDURE GetRelatedField@52(BACube@1000 : Record 709;BADim@1001 : Record 706;VAR RelatedField@1004 : Record 2000000041);
    VAR
      BACubeRel@1003 : Record 710;
    BEGIN
      IF BACube."Fact Table No." = BADim."Table No." THEN BEGIN
        EVALUATE(RelatedField."No.",SELECTSTR(1, BADim."Field Numbers"));
        RelatedField.GET(BACube."Fact Table No.",RelatedField."No.");
        EXIT;
      END;

      RelatedField.SETRANGE(TableNo,BACube."Fact Table No.");
      RelatedField.SETRANGE(RelationTableNo,BADim."Table No.");

      IF RelatedField.FIND('-') THEN
        EXIT;

      BACubeRel.SETRANGE("BA Db. Code",BACube."BA Db. Code");
      BACubeRel.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");

      IF BACubeRel.FIND('-') THEN
        REPEAT
          RelatedField.SETRANGE(TableNo,BACubeRel."Relates-to Table No.");
          RelatedField.SETRANGE(RelationTableNo,BADim."Table No.");

          IF RelatedField.FIND('-') THEN
            EXIT;
        UNTIL BACubeRel.NEXT = 0;
    END;

    LOCAL PROCEDURE GetDimEntryTableNo@24(TableID@1000 : Integer) : Integer;
    BEGIN
      CASE TRUE OF
        isLedgerEntryTable(TableID):
          EXIT(DATABASE::"Ledger Entry Dimension");
        isPostedDocumentTable(TableID):
          EXIT(DATABASE::"Posted Document Dimension");
        isGLBudgetTable(TableID):
          EXIT(DATABASE::"G/L Budget Dimension");
      END;
    END;

    LOCAL PROCEDURE GetDimFieldNo@23(TableID@1002 : Integer) : Integer;
    BEGIN
      CASE TRUE OF
        isLedgerEntryTable(TableID) OR isGLBudgetTable(TableID):
          EXIT(1); //"Entry No."
        isPostedDocumentTable(TableID):
          EXIT(4); //"Line No.";
      END;

      EXIT(0);
    END;

    PROCEDURE UpdateDimName@19(VAR BADim@1000 : Record 706;BADimRel@1002 : Record 707);
    BEGIN
      BADimRel.CALCFIELDS("Relates-to Table Name");
      IF STRLEN(BADim.Name + ' ' + BADimRel."Relates-to Table Name") >
        FieldLength(DATABASE::"BA Db. Dimension",BADim.FIELDNO(Name))
      THEN
        EXIT;
      BADim.VALIDATE(Name,BADim.Name + ' ' + BADimRel."Relates-to Table Name");

      BADim.MODIFY;
    END;

    LOCAL PROCEDURE isLedgerEntryTable@26(TableID@1000 : Integer) : Boolean;
    BEGIN
      EXIT(
        TableID IN [DATABASE::"G/L Entry",DATABASE::"Cust. Ledger Entry",DATABASE::"Vendor Ledger Entry",
          DATABASE::"Item Ledger Entry",DATABASE::"Job Ledger Entry",
          DATABASE::"Res. Ledger Entry",DATABASE::"Bank Account Ledger Entry",
          DATABASE::"Phys. Inventory Ledger Entry",DATABASE::"Reminder/Fin. Charge Entry",
          DATABASE::"Detailed Cust. Ledg. Entry",DATABASE::"Detailed Vendor Ledg. Entry",
          DATABASE::"FA Ledger Entry",DATABASE::"Maintenance Ledger Entry",
          DATABASE::"Ins. Coverage Ledger Entry",DATABASE::"Value Entry",
          DATABASE::"Service Ledger Entry",DATABASE::"Opportunity Entry"])
    END;

    LOCAL PROCEDURE isPostedDocumentTable@27(TableID@1000 : Integer) : Boolean;
    BEGIN
      EXIT(
        TableID IN [
          DATABASE::"Sales Shipment Line",
          DATABASE::"Sales Invoice Line",
          DATABASE::"Sales Cr.Memo Line",
          DATABASE::"Purch. Rcpt. Line",
          DATABASE::"Purch. Inv. Line",
          DATABASE::"Purch. Cr. Memo Line"])
    END;

    LOCAL PROCEDURE isGLBudgetTable@28(TableID@1000 : Integer) : Boolean;
    BEGIN
      EXIT(TableID IN [DATABASE::"G/L Budget Entry"])
    END;

    LOCAL PROCEDURE FieldLength@53(TableID@1000 : Integer;FieldNo@1001 : Integer) : Integer;
    VAR
      RecRef@1002 : RecordRef;
      FldRef@1003 : FieldRef;
    BEGIN
      RecRef.OPEN(TableID);
      FldRef := RecRef.FIELD(FieldNo);
      EXIT(FldRef.LENGTH);
    END;

    BEGIN
    END.
  }
}
