OBJECT Codeunit 6825 EP Modify Line Data Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=25/05/05;
    Time=12:00:00;
    Version List=NAVW14.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DecodeXML@1000000000 : Codeunit 6813;
      EncodeXML@1000000004 : Codeunit 6814;
      SupportFunctions@1000000001 : Codeunit 6815;
      FormatFunctions@1000000002 : Codeunit 6817;
      XMLDocValField@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";

    PROCEDURE ModifyLine@1000000004(VAR XMLDocInLine@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";TableNo@1000000001 : Integer;GUID@1000000003 : Text[50];GroupCode@1000000000 : Code[20];OrgRequestType@1000000004 : Code[20];UserID@1000000009 : Code[20]) ReturnCode : Integer;
    VAR
      ChangeLogMgt@1001 : Codeunit 423;
      LineRecordRef@1000000007 : RecordRef;
      xLineRecordRef@1000000002 : RecordRef;
      AdditionalValues@1000 : ARRAY [2] OF Code[20];
    BEGIN
      AdditionalValues[1] := GroupCode;
      AdditionalValues[2] := OrgRequestType;

      EncodeXML.CreateValidationDoc(XMLDocValField);

      CASE TableNo OF
        DATABASE::"Sales Line":
          ReturnCode := ModifySalesLine(XMLDocInLine,GUID,AdditionalValues,LineRecordRef,xLineRecordRef);
        DATABASE::"Purchase Line":
          ReturnCode := ModifyPurchaseLine(XMLDocInLine,GUID,AdditionalValues,LineRecordRef,xLineRecordRef);
        DATABASE::"Production BOM Line":
          ReturnCode := ModifyProdBOMLine(XMLDocInLine,GUID,AdditionalValues,LineRecordRef,xLineRecordRef);
        DATABASE::"Routing Line":
          ReturnCode := ModifyRoutingLine(XMLDocInLine,GUID,AdditionalValues,LineRecordRef,xLineRecordRef);
      END;

      EncodeXML.ClearValidationDoc(XMLDocValField);

      // Make ChangeLog Entry
      IF SupportFunctions.CheckChangeLogInLic THEN
        IF ChangeLogMgt.GetTableTriggerMask(LineRecordRef.NUMBER) IN [10,11,14,15] THEN BEGIN // All Maskvalues for Modify
          ChangeLogMgt.SetLogEmployeePortalActivity(UserID);
          ChangeLogMgt.LogModification(LineRecordRef,xLineRecordRef);
        END;
    END;

    PROCEDURE ModifySalesLine@1000000000(VAR XMLDocInLine@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];AdditionalValues@1000000001 : ARRAY [2] OF Code[20];VAR LineRecordRef@1000000007 : RecordRef;VAR xLineRecordRef@1000000010 : RecordRef) ReturnCode : Integer;
    VAR
      SalesLine@1000 : Record 37;
      LineFieldRef@1000000006 : FieldRef;
      FilterString@1000000005 : Text[1024];
      tmpValue@1000000004 : Text[200];
      tmpOption@1000000002 : Option;
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1),3=CONST(%2),4=CONST(%3))',
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,SalesLine.FIELDNO("Document Type")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,SalesLine.FIELDNO("Document No.")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,SalesLine.FIELDNO("Line No.")));

      LineRecordRef.OPEN(DATABASE::"Sales Line",FALSE);
      LineRecordRef.SETVIEW(FilterString);

      xLineRecordRef.OPEN(DATABASE::"Sales Line",FALSE);
      xLineRecordRef.SETVIEW(FilterString);
      IF xLineRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInLine),LineRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesLine.FIELDNO("No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesLine.FIELDNO("Location Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesLine.FIELDNO(Description));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesLine.FIELDNO(Quantity));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesLine.FIELDNO("Unit of Measure Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesLine.FIELDNO("Unit Price"));

        DecodeXML.ModifyRecord(XMLDocInLine,LineRecordRef,XMLDocValField,DATABASE::"Sales Line",
          FALSE,TRUE,AdditionalValues[1],AdditionalValues[2]);

        LineRecordRef.MODIFY(TRUE);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      LineFieldRef := LineRecordRef.FIELD(SalesLine.FIELDNO("Document Type"));
      tmpOption := LineFieldRef.VALUE;
      tmpValue := FormatFunctions.OptionToText(tmpOption);
      SupportFunctions.CreateTempHeadFilterTable(SalesLine.FIELDNO("Document Type"),tmpValue,GUID);
      LineFieldRef := LineRecordRef.FIELD(SalesLine.FIELDNO("Document No."));
      tmpValue := LineFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(SalesLine.FIELDNO("Document No."),tmpValue,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(SalesLine.FIELDNO("Document Type"),GUID);
      SupportFunctions.CreateTempHeadFilterKeys(SalesLine.FIELDNO("Document No."),GUID);
    END;

    PROCEDURE ModifyPurchaseLine@7(VAR XMLDocInLine@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];AdditionalValues@1000000001 : ARRAY [2] OF Code[20];VAR LineRecordRef@1000000007 : RecordRef;VAR xLineRecordRef@1000000010 : RecordRef) ReturnCode : Integer;
    VAR
      PurchaseLine@1000 : Record 39;
      LineFieldRef@1000000006 : FieldRef;
      FilterString@1000000005 : Text[1024];
      tmpValue@1000000004 : Text[200];
      tmpOption@1000000002 : Option;
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1),3=CONST(%2),4=CONST(%3))',
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,PurchaseLine.FIELDNO("Document Type")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,PurchaseLine.FIELDNO("Document No.")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,PurchaseLine.FIELDNO("Line No.")));

      LineRecordRef.OPEN(DATABASE::"Purchase Line",FALSE);
      LineRecordRef.SETVIEW(FilterString);

      xLineRecordRef.OPEN(DATABASE::"Purchase Line",FALSE);
      xLineRecordRef.SETVIEW(FilterString);
      IF xLineRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInLine),LineRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseLine.FIELDNO("No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseLine.FIELDNO("Location Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseLine.FIELDNO(Description));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseLine.FIELDNO(Quantity));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseLine.FIELDNO("Unit of Measure Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseLine.FIELDNO("Direct Unit Cost"));

        DecodeXML.ModifyRecord(XMLDocInLine,LineRecordRef,XMLDocValField,DATABASE::"Purchase Line",
          FALSE,TRUE,AdditionalValues[1],AdditionalValues[2]);

        LineRecordRef.MODIFY(TRUE);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      LineFieldRef := LineRecordRef.FIELD(PurchaseLine.FIELDNO("Document Type"));
      tmpOption := LineFieldRef.VALUE;
      tmpValue := FormatFunctions.OptionToText(tmpOption);
      SupportFunctions.CreateTempHeadFilterTable(PurchaseLine.FIELDNO("Document Type"),tmpValue,GUID);
      LineFieldRef := LineRecordRef.FIELD(PurchaseLine.FIELDNO("Document No."));
      tmpValue := LineFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(PurchaseLine.FIELDNO("Document No."),tmpValue,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(PurchaseLine.FIELDNO("Document Type"),GUID);
      SupportFunctions.CreateTempHeadFilterKeys(PurchaseLine.FIELDNO("Document No."),GUID);
    END;

    PROCEDURE ModifyProdBOMLine@8(VAR XMLDocInLine@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];AdditionalValues@1000000001 : ARRAY [2] OF Code[20];VAR LineRecordRef@1000000007 : RecordRef;VAR xLineRecordRef@1000000010 : RecordRef) ReturnCode : Integer;
    VAR
      ProdBOMVersion@1001 : Record 99000779;
      ProdBOMLine@1000 : Record 99000772;
      LineFieldRef@1000000006 : FieldRef;
      FilterString@1000000005 : Text[1024];
      tmpValue@1000000004 : Text[200];
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1),3=CONST(%2),2=CONST(%3))',
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,ProdBOMLine.FIELDNO("Production BOM No.")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,ProdBOMLine.FIELDNO("Version Code")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,ProdBOMLine.FIELDNO("Line No.")));

      LineRecordRef.OPEN(DATABASE::"Production BOM Line",FALSE);
      LineRecordRef.SETVIEW(FilterString);

      xLineRecordRef.OPEN(DATABASE::"Production BOM Line",FALSE);
      xLineRecordRef.SETVIEW(FilterString);
      IF xLineRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInLine),LineRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,ProdBOMLine.FIELDNO(Type));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,ProdBOMLine.FIELDNO("No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,ProdBOMLine.FIELDNO(Description));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,ProdBOMLine.FIELDNO("Unit of Measure Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,ProdBOMLine.FIELDNO("Quantity per"));

        DecodeXML.ModifyRecord(XMLDocInLine,LineRecordRef,XMLDocValField,DATABASE::"Production BOM Line",
          FALSE,TRUE,AdditionalValues[1],AdditionalValues[2]);

        LineRecordRef.MODIFY(TRUE);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      LineFieldRef := LineRecordRef.FIELD(ProdBOMLine.FIELDNO("Production BOM No."));
      tmpValue := LineFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(ProdBOMVersion.FIELDNO("Production BOM No."),tmpValue,GUID);
      LineFieldRef := LineRecordRef.FIELD(ProdBOMLine.FIELDNO("Version Code"));
      tmpValue := LineFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(ProdBOMVersion.FIELDNO("Version Code"),tmpValue,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(ProdBOMVersion.FIELDNO("Production BOM No."),GUID);
      SupportFunctions.CreateTempHeadFilterKeys(ProdBOMVersion.FIELDNO("Version Code"),GUID);
    END;

    PROCEDURE ModifyRoutingLine@9(VAR XMLDocInLine@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];AdditionalValues@1000000001 : ARRAY [2] OF Code[20];VAR LineRecordRef@1000000007 : RecordRef;VAR xLineRecordRef@1000000010 : RecordRef) ReturnCode : Integer;
    VAR
      RoutingVersion@1001 : Record 99000786;
      RoutingLine@1000 : Record 99000764;
      LineFieldRef@1000000006 : FieldRef;
      FilterString@1000000005 : Text[1024];
      tmpValue@1000000004 : Text[200];
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1),2=CONST(%2),4=CONST(%3))',
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,RoutingLine.FIELDNO("Routing No.")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,RoutingLine.FIELDNO("Version Code")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,RoutingLine.FIELDNO("Operation No.")));

      LineRecordRef.OPEN(DATABASE::"Routing Line",FALSE);
      LineRecordRef.SETVIEW(FilterString);

      xLineRecordRef.OPEN(DATABASE::"Routing Line",FALSE);
      xLineRecordRef.SETVIEW(FilterString);
      IF xLineRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInLine),LineRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,RoutingLine.FIELDNO(Description));

        DecodeXML.ModifyRecord(XMLDocInLine,LineRecordRef,XMLDocValField,DATABASE::"Routing Line",
          FALSE,TRUE,AdditionalValues[1],AdditionalValues[2]);

        LineRecordRef.MODIFY(TRUE);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      LineFieldRef := LineRecordRef.FIELD(RoutingLine.FIELDNO("Routing No."));
      tmpValue := LineFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(RoutingVersion.FIELDNO("Routing No."),tmpValue,GUID);
      LineFieldRef := LineRecordRef.FIELD(RoutingLine.FIELDNO("Version Code"));
      tmpValue := LineFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(RoutingVersion.FIELDNO("Version Code"),tmpValue,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(RoutingVersion.FIELDNO("Routing No."),GUID);
      SupportFunctions.CreateTempHeadFilterKeys(RoutingVersion.FIELDNO("Version Code"),GUID);
    END;

    EVENT XMLDocValField@1000000003::ondataavailable@198();
    BEGIN
    END;

    EVENT XMLDocValField@1000000003::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}
