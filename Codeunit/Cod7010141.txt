OBJECT Codeunit 7010141 Funciones Excursiones
{
  OBJECT-PROPERTIES
  {
    Date=10/06/15;
    Time=16:49:23;
    Modified=Yes;
    Version List=AIC2009,OC-14044,CNT-OC-14047;
  }
  PROPERTIES
  {
    OnRun=VAR
            fEntRes@1000000000 : Form 7009711;
          BEGIN
            // Abrimos el formulario de entradas reserva para reservas a cr‚dito

            CLEAR(fEntRes);
            fEntRes.SetCredito(TRUE);
            fEntRes.RUN;
          END;

  }
  CODE
  {
    VAR
      Text000@1103355003 : TextConst 'ENU=Agency parameters folder does not exist;ESP=No existe el fichero parametros agencia';
      Text001@1103355004 : TextConst 'ENU=This process has created some errors, \;ESP=Este proceso ha producido algunos errores,\';
      Text002@1103355005 : TextConst 'ENU=review contracts before calculating the margins;ESP=revise los contratos antes de hacer margenes.';
      Text003@1103355006 : TextConst 'ENU=There is no bookings for this excursion;ESP=No existen reservas para esta excursion';
      Text004@1103355007 : TextConst 'ENU=Must specify a correct date;ESP=Tiene que especificar una fecha correcta';
      Text005@1103355008 : TextConst 'ENU=There is nothing to prepare;ESP=No hay nada para preparar';
      Text006@1103355009 : TextConst 'ENU=Must indicate a ticket no. Before assign\;ESP=Debe indicar un n§ de ticket antes de asignar\';
      Text007@1103355010 : TextConst 'ENU=a new service;ESP=un nuevo servicio';
      Text008@1103355011 : TextConst 'ENU=Unable to assign service to one cancelled or refunded booking;ESP=No se puede asignar servicio a una reserva anulada o reembolsada.';
      Text009@1103355012 : TextConst 'ENU=This booking is assigned to one service, assign again?;ESP=Esta reserva esta asignada a un servicio, reasignar?';
      Text010@1103355013 : TextConst 'ENU=Service %1 does not exist;ESP=No existe el servicio %1.';
      Text011@1103355014 : TextConst 'ENU=Would you like this modification to affect the booked paxes of service %1.;ESP=Desea que esta modificaci¢n afecte a los paxes reservados del servicio %1.';
      Text012@1103355015 : TextConst 'ENU=Bookings has been assigned to a confirmed service, remember to recalculate;ESP=Ha asignado la reserva a un servicio confirmado, recuerde que hay que recalcular';
      Text013@1103355016 : TextConst 'ENU=the service before settling, invoicing or validating.;ESP=el servicio antes de liquidar, facturar o validar.';
      Text014@1103355017 : TextConst 'ENU=Some booking of this service has been\;ESP=Alguna reserva de este servicio ha sido\';
      Text015@1103355018 : TextConst 'ENU=settled. Would you like to recalculate them?;ESP=liquidada. Desea recalcular?';
      Text019@1103355022 : TextConst 'ENU=Guide name.: #1###########################;ESP=Nombre Guia.: #1###########################';
      Text020@1103355023 : TextConst 'ENU=GV;ESP=GV';
      Text021@1103355024 : TextConst 'ENU=Agency parameters folder does not exist;ESP=No existe el fichero par metros agencia';
      Text022@1103355025 : TextConst 'ENU=There is not contract %1, TourOperator-%2, Date-%3;ESP=No existe contrato %1, TourOperador-%2, Fecha-%3';
      Text023@1103355026 : TextConst 'ENU=Must review the provision;ESP=Debe repasar la prestaci¢n';
      Text024@1103355027 : TextConst 'ENU=Must review the services before recording the excursion;ESP=Debe repasar los servicios antes de grabar la excursion';
      Text025@1103355028 : TextConst 'ENU=EXCI;ESP=EXCI';
      Text026@1103355029 : TextConst 'ENU=Unable to recalculate the cost of this grouping.\;ESP=Es imposible recalcular el coste de esta agrupacion.\';
      Text027@1103355030 : TextConst 'ENU=Some Cost lines are already invoiced;ESP=Algunas lineas de Coste ya estan facturadas.';
      Text028@1103355031 : TextConst 'ENU=Agency parameters card does not exist;ESP=No existe ficha par metros agencia';
      Text029@1103355032 : TextConst 'ENU=This booking is not assigned to any service;ESP=Esta reserva no esta asignada a ningun servicio.';
      Text030@1103355033 : TextConst 'ENU=Unable to cancel assignment service to cancelled or refunded booking;ESP=No se puede desasignar servicio a una reserva anulada o reembolsada.';
      Text031@1103355034 : TextConst 'ENU=Would you like to change guide %1 the checkbook of %2 to %3 \;ESP=Desea cambiar al guia %1 el talonario del %2 al %3 \';
      Text032@1103355035 : TextConst 'ENU=current assigned to guide %4;ESP=actualmente asignado al guia %4.';
      Text033@1103355036 : TextConst 'ENU=This checkbook already has assigned bookings, would you like to change guide in \;ESP=Este talonario tiene reservas ya asignadas, desea cambiar el guia en \';
      Text034@1103355037 : TextConst 'ENU=bookings;ESP=las reservas.';
      Text035@1103355038 : TextConst 'ENU=Booking does not have any assigned service;ESP=La reserva no tiene ningun servicio asignado.';
      Text036@1103355039 : TextConst 'ENU=Service %1 is not remaining;ESP=El servicio %1 no esta pendiente.';
      Text037@1103355040 : TextConst 'ENU=Service %1 has been generated;ESP=El servicio %1 ha sido generado.';
      Text038@1103355041 : TextConst 'ENU=Ticket has already been cancelled;ESP=Este ticket ya ha sido Anulado.';
      Text039@1103355042 : TextConst 'ENU=Ticket has been partial refunded.;ESP=Este ticket ya ha sido Reembolsado parcialmente.';
      Text040@1103355043 : TextConst 'ENU=Unable to cancel a booking which has been settled to sale guide;ESP=No se puede anular una reserva que ha sido liquidada al guia de venta.';
      Text041@1103355044 : TextConst 'ENU=Would you like to cancel ticket %1;ESP=Desea anular el ticket %1.';
      Text042@1103355045 : TextConst 'ENU=Unable to refund a booking which has not been settled to sale guide;ESP=No se puede reembolsar una reserva que no ha sido liquidada al guia de venta.';
      Text043@1103355046 : TextConst 'ENU=Would you like to refund the ticket %1;ESP=Desea reembolsar el ticket %1.';
      Text044@1103355047 : TextConst 'ENU=No. %1 service does not exist;ESP=No existe el servicio n§ %1';
      Text045@1103355048 : TextConst 'ENU=An associated line of Cost/Income to this service has already been validated or invoiced;ESP=Alguna linea de Coste/Ingreso asociada a este servicio ya ha sido validada o facturada';
      Text046@1103355049 : TextConst 'ENU=Must indicate a new Sale guide;ESP=Debe indicar un nuevo Guia de Venta.';
      Text047@1103355050 : TextConst 'ENU=Must indicate a number of division ticket;ESP=Debe indicar un numero de Ticket de division.';
      Text048@1103355051 : TextConst 'ENU=Ticket is not in the checkbook;ESP=El ticket no se encuentra en el talonario.';
      Text049@1103355052 : TextConst 'ENU=Unable to do this function on the checkbook;ESP=No se puede ejecutar esta funcion sobre este talonario.';
      Text050@1103355053 : TextConst 'ENU=Ticket %1 is going to be activated again, continue?;ESP=Se va a reactivar el ticket %1, desea continuar.';
      Text051@1103355054 : TextConst 'ENU=Only cancelled ticket can be activated again.;ESP=Solo se pueden reactivar tickets previamente anulados.';
      Text052@1103355055 : TextConst 'ENU=Unable to activate again settled tickets;ESP=No se pueden reactivar tickets liquidados.';
      Text053@1103355056 : TextConst 'ENU=Unable to activate again associated tickets to confirmed service;ESP=No se pueden reactivar tickets asociados a un servicio confirmado';
      Text054@1103355057 : TextConst 'ENU=" cancel confirmation of service before activating again.";ESP=" desconfirme el servicio antes de reactivar."';
      Text055@1103355058 : TextConst 'ENU=Income line is not invoiced, unable to print again tickets from non-invoiced lines;ESP=Esta linea de ingreso no esta facturada, no se pueden reimprimir los tickets de lineas no facturadas.';
      Text056@1103355059 : TextConst 'ENU=Would you like to print again tickets of invoice %1;ESP=Desea reimprimir los tickets de la factura %1.';
      Text057@1103355060 : TextConst 'ENU=ENTER PERIOD TO CONSULT\;ESP=INTRODUZCA PERIODO A CONSULTAR\';
      Text058@1103355061 : TextConst 'ENU=INITIAL DATE #1######\;ESP=FECHA INICIO #1######\';
      Text059@1103355062 : TextConst 'ENU=FINAL DATE #2######;ESP=FECHA FINAL  #2######';
      Text060@1103355063 : TextConst 'ENU=NUMBERS OF SETTLEMENT IN INDICATED PERIOD\;ESP=NUMEROS DE LIQUIDACION EN EL PERIODO INDICADO\';
      Text061@1103355064 : TextConst 'ENU=FIRST SETTLEMENT  #1########\;ESP=PRIMERA LIQUIDACION #1########\';
      Text062@1103355065 : TextConst 'ENU=LAST SETTLEMENT  #2########;ESP=ULTIMA LIQUIDACION  #2########';
      rPar@1103355000 : Record 7009700;
      rParPer@1100253010 : Record 7009701;
      rCondicionGlobal@1000000010 : Record 7010085;
      tFiltroTO@1103355001 : Text[250];
      TTOO@1103355002 : ARRAY [50] OF Code[10];
      Text063@1100253000 : TextConst 'ENU=Unable to cancel a ticket from confirmed service. Cancel confirmation of service before cancelling ticket;ESP=No se puede anular un ticket de un servicio confirmado. Desconfirme el servicio antes de anular el ticket.';
      Text064@1100253001 : TextConst 'ENU=Minimum information has not been entered. Fill up all fields in the form showed previously;ESP=No se ha introducido la informacion minima. Rellene todos los campos en el formulario anteriormente mostrado.';
      Text065@1100253002 : TextConst 'ENU=Unable to refund an invoiced ticket;ESP=No se puede reembolsar un ticket ya facturado.';
      Text066@1100253003 : TextConst 'ENU=Unable to refund ticket of confirmed service. Cancel service confirmation before refunding the ticket;ESP=No se puede reembolsar un ticket de un servicio confirmado. Desconfirme el servicio antes de reembolsar el ticket.';
      Text067@1100253004 : TextConst 'ENU=Unable to modify the date of cancelled booking;ESP=No se puede modificar la fecha de una reserva anulada.';
      Text068@1100253005 : TextConst 'ENU=Unable to modify the date of refunded booking;ESP=No se puede modificar la fecha de una reserva reembolsada.';
      Text069@1100253006 : TextConst 'ENU=Booking has not been settled yet, able to modify excursion date directly on booking card;ESP=La reserva aun no ha sido liquidada, se puede modificar la fecha de excursion directamente en la ficha de la reserva.';
      Text070@1100253007 : TextConst 'ENU=Booking is associated to service, firstly must cancel assignment to booking;ESP=La reserva esta asociada con un servicio, primero debe desasignar la reserva.';
      Text071@1100253008 : TextConst 'ENU=ENTER A NEW EXCURSION DATE: #1########;ESP=INTRODUZCA NUEVA FECHA DE EXCURSION: #1########';
      Text072@1100253009 : TextConst 'ENU=There is a price change, unable to modify excursion date;ESP=Existe un cambio de precios, no se puede cambiar la fecha de la excursion.';
      Text073@1100253011 : TextConst 'ENU=VOID;ESP=VOID';
      Text074@1100253012 : TextConst 'ENU=Refunded amount is about to be corrected. Continue?;ESP=Se va a proceder a corregir el importe reembolsado. ¨Desea continuar?';
      Text075@1100253013 : TextConst 'ENU=Do you want to take the ticket % out of the service %2.;ESP=Desea sacar el ticket %1 del servicio %2.';
      cFunSeg@1100253014 : Codeunit 7009751;
      Text076@1100253015 : TextConst 'ENU=Are you sure you want to cancel the service?;ESP=Seguro que quiere desasignar el servicio?';
      Text077@1100253016 : TextConst 'ENU=A reservation for this service has been billed. You can not recalculate.;ESP=Alguna reserva de este servicio ha sido facturada. No es posible recalcular.';
      Text078@1100217000 : TextConst 'ENU=Do you want to create the service %1 of the excursion %2?;ESP=Confirma que desea crear el servicio %1 de la excursion %2?';
      Text079@1100217001 : TextConst 'ENU=The excursion  %1 doesn''t have office code;ESP=La excursi¢n %1 No tiene codigo de oficina';
      Text080@1100217002 : TextConst 'ENU=User %1 not authorized to use the  office %2;ESP=El usuario %1 No est  autorizado a trabajar con la oficina %2';
      Text081@1100217003 : TextConst 'ENU=Enter the provider confirmation #1##################;ESP=Introduzca confirmacion proveedor #1##################';
      Text082@1100217004 : TextConst 'ENU=You cannot modify a confirmed or cancelled reservation.;ESP=No se puede modificar una reserva confirmada o anulada.';
      Text083@1100217005 : TextConst 'ENU=This ticket has been invoiced it cannot be cancelled.;ESP=No se puede anular un ticket facturado.';
      Text084@1100217008 : TextConst 'ENU=You must fill Excursion, Touroperator and Date;ESP=Debe rellenar Excursion, Touroperador y Fecha.';
      Text085@1100217009 : TextConst 'ENU=You must specify a date later than today.;ESP=Debe especificar una fecha posterior a hoy.';
      Text086@1100217010 : TextConst 'ENU=You must select at least one guide.;ESP=Debe seleccionar por lo menos un guia.';
      Text087@1100217011 : TextConst 'ENU=Do you want to apply a commission of %1 percent to the excursion %2 with touroperator %3 from day %4 for the selected guides.;ESP=Desea aplicar una comision del %1 porciento en la excursion %2 a partir del dia %3 para los TTOO y guias seleccionados?';
      Text088@1100217012 : TextConst 'ENU=Process completed.;ESP=Proceso finalizado.';
      Text089@1100217006 : TextConst 'ENU=This ticket cannot be refund, cost has been validated.;ESP=No se puede reembolsar este ticket, ya se ha validado su coste.';
      Text090@1100217007 : TextConst 'ENU=You have to select, at least, one touroperator.;ESP=Debe seleccionar por lo menos un touroperador.';
      Text091@1000000000 : TextConst 'ENU=You have not indicated any refund amount.;ESP=No ha indicado ning£n importe a reembolsar.';
      Text092@1000000001 : TextConst 'ENU=The amount entered does not match the amount calculated per pax.;ESP=El importe introducido no coincide con el importe de las personas indicadas.';
      Text093@1000000002 : TextConst 'ENU=The total amount of the refunds exceeds the amount of the reservation.;ESP=El total de reembolsos supera al importe de la reserva.';
      Text094@1000000003 : TextConst 'ENU=Do you want the refund to affect the service costs?;ESP=¨Desea que el reembolso afecte al coste del servicio?';
      Text095@1000000004 : TextConst 'ENU=Reserves have been selected different day or shift.;ESP=Se han seleccionado reservas de distinto dia/turno.';
      Text096@1000000005 : TextConst 'ENU=You musn''t specify a date before than actual date.;ESP=No se puede indicar una fecha anterior a la fecha actual.';
      Text097@1000000006 : TextConst 'ENU=The new date exceeds one week apart. Do you want to continue?;ESP=La fecha indicada supera una semana de diferencia. ¨Desea continuar?';
      Text098@1000000007 : TextConst 'ENU=Were selected excursion bookings differently.;ESP=Se han seleccionado reservas de distinta excursi¢n.';
      Text099@1000000008 : TextConst 'ENU=None found calendar for this tour date and shift.;ESP=No se ha encontrado calendario excursi¢n para esta fecha y turno.';
      Text100@1000000009 : TextConst 'ENU=Process canceled;ESP=Proceso cancelado.';
      Text101@1000000011 : TextConst 'ENU=You can not change the reservation because valuation changes.;ESP=No se puede modificar la reserva porque cambia de valoraci¢n.';

    PROCEDURE Selecciona_Excursion@2(VAR rReserva@1103355000 : Record 7010162;pwMasivo@1100217003 : Boolean);
    VAR
      rCondicion@1103355001 : Record 7010085;
      rServicio@1103355002 : Record 7010163;
      rZonaEx@1103355003 : Record 7010169;
      rPar@1100217002 : Record 7009700;
      rError@1100217001 : Record 7010175;
      cCalculo@1000000000 : Codeunit 7010143;
      aux@1103355004 : Integer;
      vAdultoExc@1103355005 : Decimal;
      vNinoExc@1103355006 : Decimal;
      tText@1103355007 : Text[60];
      lwTransportePropio@1100217000 : Boolean;
    BEGIN
      // Selecciona_Excursion

      rPar.FINDFIRST;

      //$018
      lwTransportePropio := TransportePropio(rReserva.Producto);

      Pedir_Datos(rReserva, rCondicion, lwTransportePropio); //$018
      IF NOT rCondicion.Correcto THEN
        EXIT;

      rServicio.RESET;
      rServicio.INIT;
      rServicio."N§ Servicio"     := Ultimo_Servicio + 1;
      rServicio.Delegacion        := rPar.Delegacion;
      rServicio."Turno excursion" := rReserva."Turno Excursion";

      Mostrar_Zonas(rCondicion, rReserva, rZonaEx, rServicio, lwTransportePropio); //+$018

      Modificar_Reservas(rReserva, rZonaEx, rCondicion, vAdultoExc, vNinoExc);

      rReserva.SETCURRENTKEY(TourOperador,
                             "Fecha Excursion",
                             Producto,

                             "Zona Servicio");
      rReserva.SETRANGE("Fecha Excursion", rCondicion.Fecha);
      rReserva.SETRANGE(Producto         , rCondicion.Excursion);
      rReserva.SETRANGE("Zona Servicio"  , STRSUBSTNO('%1', rServicio."N§ Servicio"));
      rReserva.SETRANGE("N§ Servicio"    , 0);
      rReserva.SETRANGE(Anulada          , FALSE);
      rReserva.SETRANGE(Reembolsada      , FALSE);
      IF rReserva.FINDFIRST THEN
      BEGIN
        aux := rReserva.COUNT;

        rServicio.RESET;

        Crear_Servicio(rReserva, rServicio, rCondicion);

        rReserva.MODIFYALL("N§ Servicio", rServicio."N§ Servicio");

        rServicio.CALCFIELDS("N§ Adultos", "N§ Ni¤os");
        rServicio."Adultos Reservados" := rServicio."N§ Adultos";
        rServicio."Ni¤os Reservados" := rServicio."N§ Ni¤os";
        rServicio.MODIFY;
        COMMIT;

        //+$030 <
        IF pwMasivo THEN
        BEGIN
          rServicio.Estado := rServicio.Estado::Generada;
          rServicio.MODIFY;

          cCalculo.CostesIngresosExcursion(rServicio, FALSE); //+$063
          EXIT;
        END;
        //+$030 >

        rReserva.RESET;
        rReserva.SETCURRENTKEY("N§ Servicio",
                               "Liquidado GV",
                               "Guia Venta",
                               TourOperador,
                               "Fecha Excursion");
        rReserva.SETRANGE("N§ Servicio", rServicio."N§ Servicio");

        rError.RESET;
        rError.SETRANGE(Servicio, rServicio."N§ Servicio");
        IF NOT rError.ISEMPTY THEN
          MESSAGE(Text001 +
                  Text002);

        IF lwTransportePropio THEN
        BEGIN
          FORM.RUNMODAL(7010192, rReserva);
          IF rServicio.GET(rReserva.Delegacion, rServicio."N§ Servicio") THEN
            IF rServicio.Estado = rServicio.Estado::Pendiente THEN BEGIN  // no esta confirmada y se borra
              Resto_Datos(rServicio, rReserva);
              rServicio.DELETE;
            END;
        END
        ELSE
        //+$018
        BEGIN
          IF NOT CONFIRM(Text078, FALSE, rServicio."N§ Servicio", rServicio.Excursion) THEN
          BEGIN
            Resto_Datos(rServicio, rReserva);
            rServicio.DELETE;
          END
          ELSE
          BEGIN
            rServicio.Estado := rServicio.Estado::Generada;
            rServicio.MODIFY;
            COMMIT; //+$082

            cCalculo.CostesIngresosExcursion(rServicio, FALSE); //+$063
          END;
        END;
        //+$018
      END
      ELSE
      BEGIN
        rReserva.RESET;
        ERROR(Text003);
      END;
      rReserva.RESET;
    END;

    PROCEDURE Pedir_Datos@3(VAR rReserva@1103355000 : Record 7010162;VAR rCondicion@1103355001 : Record 7010085;pwTransportePropio@1100217000 : Boolean);
    VAR
      lrExc@1100217001 : Record 7009710;
    BEGIN
      // Pedir_Datos

      rCondicion.SETRANGE(Usuario, USERID());
      IF NOT rCondicion.GET(USERID()) THEN BEGIN
        rCondicion.INIT;
        rCondicion.Usuario := USERID();
        rCondicion.INSERT;
      END;

      //+$036 <
      IF NOT lrExc.GET(rReserva.Producto) THEN
        CLEAR(lrExc);
      //+$036 >

      rCondicion.INIT;
      rCondicion.Usuario                 := USERID;
      rCondicion.Fecha                   := rReserva."Fecha Excursion";
      rCondicion.Excursion               := rReserva.Producto;
      rCondicion.Duracion                := lrExc.Duracion; //+$036
      rCondicion."Pax Maximos"           := 0;
      rCondicion."Vehiculo exclusivo"    := FALSE;
      //-$050rCondicion."o_Minimos Guia Oficial"  := TRUE;
      //-$050rCondicion."o_Minimos Transportista" := TRUE;
      rCondicion.Correcto                := NOT pwTransportePropio; //$018
      rCondicion.MODIFY;
      COMMIT;

      IF pwTransportePropio THEN //$018
      BEGIN
        FORM.RUNMODAL(7010289, rCondicion);
        IF rCondicion.GET(USERID()) THEN
          IF rCondicion.Fecha = 0D THEN
            ERROR(Text004);
      END;
    END;

    PROCEDURE Ultimo_Servicio@5() : Integer;
    VAR
      rServicio@1103355000 : Record 7010163;
    BEGIN
      // Ultimo_Servicio

      rServicio.RESET;
      IF rServicio.FINDLAST THEN
        EXIT(rServicio."N§ Servicio");
      EXIT(0);
    END;

    PROCEDURE Mostrar_Zonas@9(rCondicion@1103355000 : Record 7010085;VAR rReserva@1103355001 : Record 7010162;VAR rZonaEx@1103355002 : Record 7010169;rServicio@1103355003 : Record 7010163;pwTransportePropio@1100217000 : Boolean);
    VAR
      rZonaFisica@1103355004 : Record 7009713;
      tFiltroTicket@1103355005 : Text[250];
      tFiltroHotel@1103355006 : Text[250];
    BEGIN
      // Mostrar_Zonas

      tFiltroTO     := rReserva.GETFILTER(TourOperador);
      tFiltroHotel  := rReserva.GETFILTER("Hotel Cliente");
      tFiltroTicket := rReserva.GETFILTER("N§ Ticket");

      rReserva.SETCURRENTKEY("Fecha Excursion",
                             Producto,
                             "Zona Hotel",
                             "Hotel Cliente",
                             TourOperador);
      rZonaFisica.SETRANGE("Rango Fechas"  , rCondicion.Fecha);
      rZonaFisica.SETRANGE("Rango Producto", rCondicion.Excursion);
      IF tFiltroTO <> '' THEN
        rZonaFisica.SETFILTER("Rango TO", tFiltroTO);
      IF tFiltroTicket <> '' THEN
        rZonaFisica.SETFILTER("Rango Ticket", tFiltroTicket);
      IF tFiltroHotel <> '' THEN
        rZonaFisica.SETFILTER("Rango Hotel", tFiltroHotel);
      IF rZonaFisica.FINDSET THEN
        REPEAT
          rZonaFisica.CALCFIELDS(Adultos, Ni¤os, Bebes, Reservas);
          IF rZonaFisica.Reservas <> 0 THEN
            rZonaFisica.Pasar := TRUE
          ELSE
            rZonaFisica.Pasar := FALSE;
          rZonaFisica.MODIFY;
        UNTIL rZonaFisica.NEXT = 0;
      rZonaFisica.SETRANGE(Pasar, TRUE);
      COMMIT;

      IF NOT rZonaFisica.FINDFIRST THEN
        ERROR(Text005);

      IF pwTransportePropio THEN
        FORM.RUNMODAL(7010190, rZonaFisica);

      rZonaFisica.SETRANGE(Pasar, TRUE);
      IF rZonaFisica.FINDSET THEN
        REPEAT
          rZonaEx.INIT;
          rZonaEx.Delegacion      := rReserva.Delegacion;
          rZonaEx."Num. Servicio"            := STRSUBSTNO('%1', rServicio."N§ Servicio");
          rZonaEx."Zona Fisica"   := rZonaFisica."Zona Fisica";
          rZonaEx.INSERT;

          rZonaFisica.Usuario := '';
          rZonaFisica.MODIFY;
          rZonaFisica.Pasar := FALSE;
        UNTIL rZonaFisica.NEXT = 0;
      rZonaFisica.SETRANGE("Rango Fechas");
      rZonaFisica.SETRANGE("Rango Producto");
      rZonaFisica.MARKEDONLY(FALSE);
    END;

    PROCEDURE Modificar_Reservas@17(VAR rReserva@1103355000 : Record 7010162;rZonaEx@1103355001 : Record 7010169;rCondicion@1103355002 : Record 7010085;VAR vAdultoExc@1103355003 : Decimal;VAR vNinoExc@1103355004 : Decimal);
    VAR
      rReserva2@1103355005 : Record 7010162;
      rReserva3@1103355006 : Record 7010162;
      vPaxExcursion@1103355007 : Decimal;
    BEGIN
      // Modificar_Reservas

      rReserva2.RESET;
      rReserva2.COPYFILTERS(rReserva);

      rZonaEx.RESET;
      rZonaEx.SETRANGE("Num. Servicio", rZonaEx."Num. Servicio");
      IF rZonaEx.FINDSET THEN BEGIN
        rReserva2.SETCURRENTKEY("Fecha Excursion",
                                Producto,
                                "Zona Hotel",
                                "Hotel Cliente",
                                TourOperador);
        rReserva2.SETRANGE(Delegacion, rReserva.Delegacion);
        REPEAT
          IF tFiltroTO <> '' THEN
            rReserva2.SETFILTER(TourOperador   , tFiltroTO); //+064
          rReserva2.SETRANGE("Fecha Excursion", rCondicion.Fecha);
          rReserva2.SETRANGE(Producto         , rCondicion.Excursion);
          rReserva2.SETRANGE("Zona Hotel"     , rZonaEx."Zona Fisica");
          rReserva2.SETRANGE("N§ Servicio"    , 0);
          rReserva2.SETRANGE(Anulada          , FALSE); //+$034
          rReserva2.SETRANGE(Reembolsada      , FALSE); //+$034
          IF rReserva2.FINDSET THEN
            REPEAT
              rReserva2.TESTFIELD("N§ Ticket");
              IF (rCondicion."Pax Maximos" = 0) OR
                 ((vPaxExcursion + rReserva2."N§ Personas") <= rCondicion."Pax Maximos") THEN BEGIN
                rReserva3 := rReserva2;
                rReserva3."Zona Servicio" := rZonaEx."Num. Servicio";
                rReserva3.MODIFY;

                vAdultoExc    := vAdultoExc + rReserva3.Adultos;
                vNinoExc      := vNinoExc + rReserva3.Ni¤os;
                vPaxExcursion := vPaxExcursion + rReserva3."N§ Personas";
              END;
            UNTIL rReserva2.NEXT = 0;
        UNTIL rZonaEx.NEXT = 0;
      END;
    END;

    PROCEDURE Crear_Servicio@14(VAR rReserva@1103355000 : Record 7010162;VAR rServicio@1103355001 : Record 7010163;rCondicion@1103355002 : Record 7010085);
    VAR
      rPrestProducto@1103355003 : Record 7010140;
      rPrestProducto2@1103355004 : Record 7010140;
      rPrestaciones@1103355005 : Record 7010170;
      rContGo@1103355006 : Record 7010142;
      rPrest_Cont@1103355007 : Record 7010141;
      Orden@1103355008 : Integer;
    BEGIN
      // Crear_Servicio

      Orden := 0;
      rServicio.Delegacion           := rReserva.Delegacion;
      rServicio.Fecha                := rReserva."Fecha Excursion";
      rServicio.Excursion            := rReserva.Producto;
      rServicio.Oficina              := rReserva.Oficina; // $019
      rServicio."Zona Excursion"     := rReserva."Zona Servicio";
      rServicio.Estado               := rServicio.Estado::Pendiente;
      rServicio."Vehiculo exclusivo" := rCondicion."Vehiculo exclusivo";
      rServicio.Duracion             := rCondicion.Duracion;
      //-$050rServicio."Minimos GO"         := rCondicion."o_Minimos Guia Oficial";
      //-$050rServicio.Minimos              := rCondicion."o_Minimos Transportista";
      rServicio.Buses                := 1;
      rServicio.INSERT;

      rPrestProducto.RESET;
      rPrestProducto.SETRANGE("Codigo producto", rReserva.Producto);
      IF rPrestProducto.FINDSET THEN
      BEGIN
        REPEAT
          CLEAR(rPrestaciones);
          rPrestaciones.Delegacion         := rServicio.Delegacion;
          rPrestaciones."N§ Servicio"      := rServicio."N§ Servicio";
          rPrestaciones."Orden Prestacion" := rPrestProducto.Orden;
          rPrestaciones.Descripcion        := rPrestProducto.Descripcion;
          rPrestaciones."Tipo Contrato"    := rPrestProducto."Tipo Contrato";
          rPrestaciones."Pago Contado"     := rPrestProducto."Pago Contado"; // $017
          rPrestaciones.INSERT;
          IF rPrestProducto.Obligatorio THEN
          BEGIN
            rPrestaciones.Aplicacion := TRUE;
            rPrestaciones."N§ Personas" := 1;
            rPrestaciones.MODIFY;

            //. En el OnValidate de "Prestacion excursion".Aplicacion, asigna los contratos que tienen
            //. asociados todas las prestaciones

            rPrestaciones.VALIDATE(Aplicacion);
          END;
        UNTIL rPrestProducto.NEXT = 0;
      END;
    END;

    PROCEDURE Resto_Datos@11(rServicio@1103355000 : Record 7010163;rReserva@1103355001 : Record 7010162);
    VAR
      rPrestaciones@1103355002 : Record 7010170;
      rZona@1103355003 : Record 7010173;
      rMargenes@1103355004 : Record 7010174;
      rCI@1103355005 : Record 7010166;
      rSupleServ@1103355006 : Record 7010171;
      rSupleGO@1103355007 : Record 7010172;
      rZonaExc@1103355008 : Record 7010169;
      rReserva2@1103355009 : Record 7010162;
      rError@1103355010 : Record 7010175;
    BEGIN
      // Resto_Datos

      rPrestaciones.RESET;
      rPrestaciones.SETRANGE(Delegacion   , rServicio.Delegacion);
      rPrestaciones.SETRANGE("N§ Servicio", rServicio."N§ Servicio");
      IF rPrestaciones.FINDSET(TRUE) THEN
        rPrestaciones.DELETEALL;

      rZona.RESET;
      rZona.SETRANGE(Delegacion           , rServicio.Delegacion);
      rZona.SETRANGE("N§ Servicio"        , rServicio."N§ Servicio");
      IF rZona.FINDSET(TRUE) THEN
        rZona.DELETEALL;

      rMargenes.RESET;
      rMargenes.SETRANGE(Delegacion       , rServicio.Delegacion);
      rMargenes.SETRANGE("N§ Servicio"    , rServicio."N§ Servicio");
      IF rMargenes.FINDSET(TRUE) THEN
        rMargenes.DELETEALL;

      rSupleServ.RESET;
      rSupleServ.SETRANGE(Delegacion      , rServicio.Delegacion);
      rSupleServ.SETRANGE("N§ Servicio"   , rServicio."N§ Servicio");
      IF rSupleServ.FINDSET(TRUE) THEN
        rSupleServ.DELETEALL;

      rSupleGO.RESET;
      rSupleGO.SETRANGE(Delegacion        , rServicio.Delegacion);
      rSupleGO.SETRANGE("N§ Servicio"     , rServicio."N§ Servicio");
      IF rSupleGO.FINDSET(TRUE) THEN
        rSupleGO.DELETEALL;

      rZonaExc.RESET;
      rZonaExc.SETRANGE(Delegacion, rServicio.Delegacion);
      rZonaExc.SETRANGE("Num. Servicio"      , STRSUBSTNO('%1', rServicio."N§ Servicio"));
      IF rZonaExc.FINDSET(TRUE) THEN
        rZonaExc.DELETEALL;

      rError.RESET;
      rError.SETRANGE(Servicio, rServicio."N§ Servicio");
      IF rError.FINDSET(TRUE) THEN
        rError.DELETEALL;

      rReserva.RESET;
      rReserva.SETRANGE(Delegacion   , rServicio.Delegacion);
      rReserva.SETRANGE("N§ Servicio", rServicio."N§ Servicio");
      IF rReserva.FINDSET THEN
        REPEAT
          rReserva2                 := rReserva;
          rReserva2."N§ Servicio"   := 0;
          rReserva2."Zona Servicio" := '';
          rReserva2."Zona Compra"   := '';
          rReserva2.MODIFY;
        UNTIL rReserva.NEXT = 0
    END;

    PROCEDURE Asignar_Servicio@4(rReserva@1103355000 : Record 7010162);
    VAR
      rServicio@1103355001 : Record 7010163;
    BEGIN
      // Asignar_Servicio

      IF (rReserva."N§ Ticket" = '') THEN
        ERROR(Text006 + Text007);

      IF rReserva.Anulada OR rReserva.Reembolsada THEN
        ERROR(Text008);

      IF rReserva."N§ Servicio" <> 0 THEN BEGIN
        IF NOT CONFIRM(Text009) THEN
          EXIT;
      END;

      rServicio.RESET;
      rServicio.FILTERGROUP(2);
      rServicio.SETFILTER(Estado   , '<>%1', rServicio.Estado::Confirmada);
      rServicio.SETRANGE (Fecha    , rReserva."Fecha Excursion");
      rServicio.SETRANGE (Excursion, rReserva.Producto);
      rServicio.SETRANGE ("Turno excursion", rReserva."Turno Excursion");
      rServicio.FILTERGROUP(0);
      IF FORM.RUNMODAL(7010191, rServicio) = ACTION::LookupOK THEN
        AsignaReservaServicio(rReserva, rServicio);
    END;

    PROCEDURE AsignaReservaServicio@1100217011(VAR prReserva@1100217000 : Record 7010162;VAR prServicio@1100217001 : Record 7010163);
    VAR
      lcCalculo@1000000000 : Codeunit 7010143;
    BEGIN
      // AsignaReservaServicio

      IF prReserva."N§ Servicio" <> 0 THEN
      BEGIN
        _GestionPaxReservadoServicio(prReserva.Delegacion, prReserva."N§ Servicio", -prReserva.Adultos, -prReserva.Ni¤os);
        Sacar_Anterior(prReserva."N§ Servicio", prReserva);
      END;

      prReserva.VALIDATE("N§ Servicio", prServicio."N§ Servicio");
      prReserva.MODIFY;

      _GestionPaxReservadoServicio(prReserva.Delegacion, prReserva."N§ Servicio", prReserva.Adultos, prReserva.Ni¤os);

      //. Recuperamos el apuntador del servicio
      prServicio.GET(prServicio.Delegacion, prServicio."N§ Servicio");
      prServicio."Pendiente Recalcular" := TRUE;
      prServicio.MODIFY;

      COMMIT;

      lcCalculo.CostesIngresosExcursion(prServicio, FALSE); //+$063
    END;

    PROCEDURE Sacar_Anterior@13(Servicio_Anterior@1103355000 : Integer;rReserva@1103355001 : Record 7010162);
    VAR
      lrResv2@1100253000 : Record 7010162;
    BEGIN
      // Sacar_Anterior

      // $014 Eliminamos los registros de  reserva Soporte si existen
      lrResv2 := rReserva;
      lrResv2."N§ Servicio" := Servicio_Anterior;
      lrResv2.BorraReservasSoporte;
    END;

    PROCEDURE Buscar_Guia@7(VAR rTal@1103355000 : Record 7010146);
    VAR
      lrRespE@1100253000 : Record 7010241;
      ventana@1103355002 : Dialog;
      w_texto@1103355003 : Text[80];
      Trobat@1103355004 : Boolean;
    BEGIN
      // Buscar_Guia

      ventana.OPEN(Text019);
      ventana.INPUT(1, w_texto);
      ventana.CLOSE;
      IF w_texto = '' THEN
        EXIT;
      w_texto := '@*' + w_texto + '*';
      Trobat := FALSE;

      CLEAR(lrRespE);
      lrRespE.SETCURRENTKEY(Nombre);
      lrRespE.SETFILTER(Nombre       , w_texto);
      IF NOT lrRespE.FINDSET THEN
        EXIT;
      REPEAT
        rTal.SETRANGE("Guia Venta", lrRespE.Codigo);
        IF rTal.FIND('-') THEN
          Trobat := TRUE;
      UNTIL Trobat OR (lrRespE.NEXT = 0);
      IF NOT Trobat THEN
        rTal.SETRANGE("Guia Venta");
    END;

    PROCEDURE Inserta_Error@15(Error@1103355000 : Text[80];Servicio@1103355001 : Integer);
    VAR
      rError@1103355002 : Record 7010175;
      rError2@1103355003 : Record 7010175;
    BEGIN
      // Inserta_Error

      CLEAR(rError);
      rError.Servicio := Servicio;

      //. Buscar el orden del error

      rError2.RESET;
      rError2.SETRANGE(Servicio, Servicio);
      IF rError2.FINDLAST THEN
        rError.Orden := rError2.Orden + 10000
      ELSE
        rError.Orden := 10000;

      rError.Error   := Error;
      rError.Hora    := TIME;
      rError.Fecha   := TODAY;
      rError.Usuario := USERID();
      rError.INSERT;
    END;

    PROCEDURE Recalculo_Costes@16(par_rSer@1103355000 : Record 7010163;pwVerbose@1100217002 : Boolean);
    VAR
      lrSer@1103355001 : Record 7010163;
      lrRsv@1103355002 : Record 7010162;
      lrCoste@1103355003 : Record 7010166;
      lrICD@1100217004 : Record 7010264;
      lcodCalcular@1100217001 : Codeunit 7010143;
      lcFacturar@1100217003 : Codeunit 7010140;
      lwGenerarFPR@1100217000 : Boolean;
    BEGIN
      // Recalculo_Costes

      lrSer.COPY(par_rSer);

      rPar.FINDFIRST;
      IF NOT rPar."Liquidar antes de confirmar" THEN
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("N§ Servicio",
                            TourOperador,
                            "Zona Hotel");
        lrRsv.SETRANGE("N§ Servicio" , lrSer."N§ Servicio");
        lrRsv.SETRANGE("Liquidado GV", TRUE);
        IF NOT lrRsv.ISEMPTY THEN
          IF NOT CONFIRM(Text014 +
                         Text015, TRUE) THEN
            EXIT;
      END;

      lrCoste.RESET;
      lrCoste.SETRANGE (Delegacion   , lrSer.Delegacion);
      lrCoste.SETRANGE ("N§ Servicio", lrSer."N§ Servicio");
      lrCoste.SETFILTER(Concepto     , '%1|%2|%3', 'EXAC', 'EXCC', 'EXGO');
      lrCoste.SETFILTER("N§ Factura" , '<>%1', '');
      IF lrCoste.FINDFIRST THEN
        ERROR(Text026 + Text027);

      lrSer."Tipo Calculo":= lrSer."Tipo Calculo"::Coste;
      lrSer.MODIFY;

      //. Si el servicio ya ha generado el FPR vamos a crear el contra-asiento

      //+$024 <
      lwGenerarFPR := FALSE;

      lrCoste.RESET;
      lrCoste.SETRANGE (Delegacion     , lrSer.Delegacion);
      lrCoste.SETRANGE ("N§ Servicio"  , lrSer."N§ Servicio");
      lrCoste.SETFILTER(Concepto       , '%1|%2|%3', 'EXAC', 'EXCC', 'EXGO');
      lrCoste.SETRANGE ("Pendiente FPR", FALSE);
      IF NOT lrCoste.ISEMPTY THEN
      BEGIN
        lwGenerarFPR := TRUE;
        lcFacturar.GeneraFPR(lrSer.Delegacion, lrSer."N§ Servicio", '', lrSer.Oficina, TRUE);
      END;
      //+$024 >

      lcodCalcular.CostesIngresosExcursion(lrSer, pwVerbose);

      //+$024 <
      IF rPar."Facturar tickets x fecha venta" OR lwGenerarFPR THEN //+$046
        lcFacturar.GeneraFPR(lrSer.Delegacion, lrSer."N§ Servicio", '', lrSer.Oficina, FALSE); //+$040
      //+$024 >

      IF lrSer.GET(par_rSer.Delegacion, par_rSer."N§ Servicio") THEN
      BEGIN
        lrSer."Tipo Calculo":= lrSer."Tipo Calculo"::"C/I";
        lrSer.MODIFY;
      END;

      //+$054
      lrICD.MarkPeriodExc(lrSer.Fecha);
    END;

    PROCEDURE Desasigna_reserva@21(prReserva@1103355000 : Record 7010162);
    VAR
      lrSer@1103355002 : Record 7010163;
      lrReserva2@1103355003 : Record 7010162;
    BEGIN
      // Desasigna_reserva

      IF prReserva."N§ Servicio" = 0 THEN
        ERROR(Text029);

      prReserva.TESTFIELD(Confirmada, FALSE); //+$033

      //+$038 <
      rPar.FINDFIRST;
      IF NOT rPar."Facturar tickets x fecha venta" THEN
        prReserva.TESTFIELD(Facturada, FALSE);
      //+$038 >

      IF prReserva.Anulada OR prReserva.Reembolsada THEN
        ERROR(Text030);

      IF NOT lrSer.GET(prReserva.Delegacion, prReserva."N§ Servicio") THEN
        ERROR(Text010, prReserva."N§ Servicio");

      //+$013
      IF NOT CONFIRM(Text075, FALSE, prReserva."N§ Ticket", prReserva."N§ Servicio") THEN
        EXIT;
      //+$013

      _GestionPaxReservadoServicio(prReserva.Delegacion, prReserva."N§ Servicio", -prReserva.Adultos, -prReserva.Ni¤os);

      lrReserva2 := prReserva;
      lrReserva2.VALIDATE("N§ Servicio", 0);
      lrReserva2.MODIFY;

      Sacar_Anterior(prReserva."N§ Servicio", lrReserva2);

      //+$071 <
      // Si el servicio se queda sin gente lo eliminamos
      lrReserva2.RESET;
      lrReserva2.SETCURRENTKEY("N§ Servicio");
      lrReserva2.SETRANGE("N§ Servicio", prReserva."N§ Servicio");
      IF lrReserva2.ISEMPTY THEN
      BEGIN
        IF lrSer.GET(prReserva.Delegacion, prReserva."N§ Servicio") THEN //+$075
          DeshacerServicio(lrSer);
      END;
      //+$071 >
    END;

    PROCEDURE cambia_guia_venta@22(VAR par_tal@1103355000 : Record 7010146);
    VAR
      rRsv@1103355001 : Record 7010162;
      rTal@1103355002 : Record 7010146;
      rCond@1103355003 : Record 7010085;
      cNom@1103355004 : Codeunit 7009702;
      texto_confirm@1103355005 : Text[250];
    BEGIN
      // cambia_guia_venta

      IF rCond.GET(USERID()) THEN
        rCond.DELETE;
      CLEAR(rCond);
      rCond.Usuario      :=USERID();
      rCond.Correcto     := FALSE;
      rCond."Guia Venta" := '';
      rCond.INSERT;
      COMMIT;
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario, USERID());
      rCond.FILTERGROUP(0);
      FORM.RUNMODAL(7010290, rCond);
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario);
      rCond.FILTERGROUP(0);
      rCond.GET(USERID());
      IF rCond.Correcto AND (rCond."Guia Venta" <> '') THEN BEGIN
        texto_confirm := STRSUBSTNO(Text031 +
                                    Text032,
                                    cNom.nom_proveedor(rCond."Guia Venta"),
                                    par_tal."N§ Ticket inicial", par_tal."N§ Ticket final",
                                    cNom.nom_proveedor(par_tal."Guia Venta"));
        IF NOT CONFIRM(texto_confirm) THEN
          EXIT;
        CLEAR(rTal);
        rTal := par_tal;
        rTal."Guia Venta" := rCond."Guia Venta";
        rTal.INSERT(TRUE);
        par_tal.DELETE;
        CLEAR(rRsv); rRsv.RESET;
        rRsv.SETCURRENTKEY("N§ Ticket");
        rRsv.SETRANGE("N§ Ticket", par_tal."N§ Ticket inicial", par_tal."N§ Ticket final");
        IF rRsv.FINDSET THEN BEGIN
          IF NOT CONFIRM(Text033 +
                         Text034) THEN
            EXIT;

          // $015
          // Modifico para que ejecute la nueva funci¢n AsignaGuia que comprueba el Touroperador
          // rRsv.MODIFYALL("Guia Venta", rCond."Guia Venta");
          REPEAT
            rRsv.AsignaGuia(rCond."Guia Venta");
            rRsv.MODIFY;
          UNTIL rRsv.NEXT=0;
        END;
      END;
    END;

    PROCEDURE recupera_excursion_pendiente@23(par_res@1103355000 : Record 7010162);
    VAR
      rSer@1103355001 : Record 7010163;
    BEGIN
      // recupera_excursion_pendiente

      IF par_res."N§ Servicio" = 0 THEN
        ERROR(Text035);
      IF NOT rSer.GET(par_res.Delegacion, par_res."N§ Servicio") THEN
        ERROR(Text010, par_res."N§ Servicio");
      IF rSer.Estado <> rSer.Estado::Pendiente THEN
        ERROR(Text036, rSer."N§ Servicio");
      rSer.Estado := rSer.Estado::Generada;
      rSer.MODIFY;
      MESSAGE(Text037);
    END;

    PROCEDURE divide_talonario@25(pTal@1103355000 : Record 7010146);
    VAR
      rCond@1103355001 : Record 7010085;
      rTal@1103355002 : Record 7010146;
      auxiliar@1103355003 : Integer;
      auxiliar_code@1103355004 : Code[10];
    BEGIN
      // divide_talonario

      // Esta funcion toma como parametro un talonario, solicita al usuario un numero de ticket y
      // un guia de venta y crea tres talonarios:
      // 1 - Primer n§ ticket hasta N§ Ticket menos uno al guia original
      // 2 - N§ Ticket al nuevo guia
      // 3 - N§ Ticket mas uno hasta el ultimo ticket al guia original.

      // Emplearemos el campo N§ Factura proveedor de condiciones temporales.

      pTal.TESTFIELD("Guia Venta");
      pTal.TESTFIELD("N§ Ticket inicial");
      pTal.TESTFIELD("N§ Ticket final");

      IF rCond.GET(USERID) THEN
        rCond.DELETE;
      rCond.INIT;
      rCond.Usuario := USERID;
      rCond.INSERT;
      COMMIT;

      rCond.SETRECFILTER;
      IF FORM.RUNMODAL(7010300, rCond) <> ACTION::OK THEN
        EXIT;
      rCond.GET(USERID);
      IF rCond."Guia Venta" = '' THEN
        ERROR(Text046);
      IF rCond."N§ Factura proveedor" = '' THEN
        ERROR(Text047);
      pTal.a¤ade_ceros(rCond."N§ Factura proveedor", pTal.Oficina);
      IF (rCond."N§ Factura proveedor" < pTal."N§ Ticket inicial") OR
         (pTal."N§ Ticket final" < rCond."N§ Factura proveedor") THEN
        ERROR(Text048);

      IF NOT EVALUATE(auxiliar, rCond."N§ Factura proveedor") THEN
        ERROR(Text049);
      auxiliar := auxiliar - 1;
      auxiliar_code := STRSUBSTNO('%1', auxiliar);
      pTal.a¤ade_ceros(auxiliar_code, pTal.Oficina);

      IF rCond."N§ Factura proveedor" <> pTal."N§ Ticket inicial" THEN BEGIN
        rTal.RESET; rTal.INIT;
        rTal.VALIDATE(Delegacion  , pTal.Delegacion);
        rTal."Guia Venta" := pTal."Guia Venta";
        rTal.INSERT(TRUE);
        rTal.VALIDATE("N§ Ticket inicial", pTal."N§ Ticket inicial");
        rTal.VALIDATE("N§ Ticket final"  , STRSUBSTNO('%1', auxiliar));
        rTal.VALIDATE(TourOperador       , pTal.TourOperador);
        rTal.MODIFY;
      END;

      // Nuevo talonario para el nuevo guia

      rTal.RESET; rTal.INIT;
      rTal.VALIDATE(Delegacion  , pTal.Delegacion);
      rTal."Guia Venta" := rCond."Guia Venta";
      rTal.INSERT(TRUE);
      rTal.VALIDATE("N§ Ticket inicial", rCond."N§ Factura proveedor");
      rTal.VALIDATE("N§ Ticket final"  , rCond."N§ Factura proveedor");
      rTal.VALIDATE(TourOperador       , pTal.TourOperador);
      rTal.MODIFY;

      // Tercer talonario para el guia original

      IF rCond."N§ Factura proveedor" <> pTal."N§ Ticket final" THEN BEGIN
        rTal.RESET; rTal.INIT;
        rTal.VALIDATE(Delegacion  , pTal.Delegacion);
        rTal."Guia Venta" := pTal."Guia Venta";
        rTal.INSERT(TRUE);
        rTal.VALIDATE("N§ Ticket inicial", INCSTR(rCond."N§ Factura proveedor"));
        rTal.VALIDATE("N§ Ticket final"  , pTal."N§ Ticket final");
        rTal.VALIDATE(TourOperador       , pTal.TourOperador);
        rTal.MODIFY;
      END;

      pTal.DELETE;
    END;

    PROCEDURE reactiva_ticket@26(VAR prRsv@1103355000 : Record 7010162);
    BEGIN
      // reactiva_ticket

      // $061
      IF (prRsv."Reserva online") AND (GUIALLOWED) THEN
        cFunSeg.TienePermiso('EXC-ONL-MAN', TRUE);

      IF NOT CONFIRM(Text050, FALSE, prRsv."N§ Ticket") THEN
        EXIT;

      IF NOT prRsv.Anulada THEN
        ERROR(Text051);

      IF prRsv."Liquidado GV" THEN
        ERROR(Text052);

      IF prRsv.Confirmada THEN
        ERROR(Text053 +
              Text054);

      prRsv.VALIDATE(Anulada, FALSE);
      prRsv.VALIDATE("N§ Servicio anulado", 0);
      prRsv.VALIDATE("Importe reembolso", 0);
      prRsv.VALIDATE("Importe reembolso comisionable", 0);
      prRsv.MODIFY(TRUE);
    END;

    PROCEDURE retorna_numliquidaciones@28(prRsvExc@1103355000 : Record 7010162);
    VAR
      lwVentana@1103355001 : Dialog;
      lwFechaDesde@1103355002 : Date;
      lwFechaHasta@1103355003 : Date;
      lwNumPrimero@1103355004 : Integer;
      lwNumUltimo@1103355005 : Integer;
      lrRsvExc@1103355006 : Record 7010162;
    BEGIN
      // retorna_numliquidaciones

      lwVentana.OPEN(Text057 +
                     '\' +
                     Text058 +
                     Text059);
      lwVentana.INPUT(1, lwFechaDesde);
      lwVentana.INPUT(2, lwFechaHasta);
      lwVentana.CLOSE;

      IF ( lwFechaDesde = 0D ) OR ( lwFechaHasta = 0D ) THEN
        EXIT;

      IF lwFechaDesde > lwFechaHasta THEN
        EXIT;

      lwNumPrimero := 999999999;
      lwNumUltimo  := 0;

      lrRsvExc.RESET;
      lrRsvExc.SETCURRENTKEY(TourOperador,
                             "Fecha Excursion");
      lrRsvExc.SETRANGE(TourOperador     , prRsvExc.TourOperador);
      lrRsvExc.SETRANGE("Fecha Excursion", lwFechaDesde, lwFechaHasta);
      IF lrRsvExc.FIND('-') THEN BEGIN
        REPEAT
          IF ( lrRsvExc."N§ liquidacion GV" < lwNumPrimero ) AND ( lrRsvExc."N§ liquidacion GV" <> 0 )THEN
            lwNumPrimero := lrRsvExc."N§ liquidacion GV";

          IF ( lrRsvExc."N§ liquidacion GV" > lwNumUltimo ) AND ( lrRsvExc."N§ liquidacion GV" <> 0 )THEN
            lwNumUltimo := lrRsvExc."N§ liquidacion GV";

          IF ( lrRsvExc."N§ liquidacion GV reembolso" < lwNumPrimero ) AND ( lrRsvExc."N§ liquidacion GV reembolso" <> 0 )THEN
            lwNumPrimero := lrRsvExc."N§ liquidacion GV reembolso";

          IF ( lrRsvExc."N§ liquidacion GV reembolso" > lwNumUltimo ) AND ( lrRsvExc."N§ liquidacion GV reembolso" <> 0 )THEN
            lwNumUltimo := lrRsvExc."N§ liquidacion GV reembolso";

        UNTIL lrRsvExc.NEXT = 0;
      END;

      IF lwNumPrimero <> 0 THEN
        MESSAGE(Text060 +
                '\' +
                Text061 +
                Text062, lwNumPrimero, lwNumUltimo);
    END;

    PROCEDURE AnularTicket@1100253000(VAR prRsv@1100253000 : Record 7010162;pwLlamadaExterna@1100217002 : Boolean);
    VAR
      lrServicio@1100253001 : Record 7010163;
      lrxRsv@1100253004 : Record 7010162;
      lrCond@1100253006 : Record 7010085;
      lrCobro@1100217000 : Record 7010240;
      lrCobro2@1100217003 : Record 7010240;
      lrDetEco@1100217001 : Record 7010245;
      lfFicha@1100253005 : Form 7010301;
    BEGIN
      // AnularTicket

      //. Creada por: AJS
      //. Creada dia: 17.01.2011
      //. Marcamos una reserva de excursion como anulada o la borramos si no tienen los datos minimos introducidos

      // $061
      IF (prRsv."Reserva online") AND (GUIALLOWED) THEN
        cFunSeg.TienePermiso('EXC-ONL-MAN', TRUE);

      IF prRsv.Anulada THEN
        ERROR(Text038);

      IF prRsv."N§ liquidacion GV" <> 0 THEN
        ERROR(Text040);

      IF prRsv.Confirmada THEN
        ERROR(Text063);

      IF prRsv.Facturada THEN
        ERROR(Text083);

      //. Si no tiene los datos minimos rellenados borramos la reserva
      IF ((prRsv.Producto = '') OR (prRsv."Fecha Excursion" = 0D)) AND (prRsv."N§ Ticket" = '') THEN //+$026
      BEGIN
        prRsv.DELETE(TRUE);
        EXIT;
      END;

      //+$042
      IF NOT pwLlamadaExterna THEN
      BEGIN
        IF NOT CONFIRM(Text041, FALSE, prRsv."N§ Ticket") THEN
          EXIT;

        //. Abrimos una ficha para que el usuario introduzca el texto de anulacion

        IF lrCond.GET(USERID) THEN
          lrCond.DELETE;

        lrCond.INIT;
        lrCond.Usuario                   := USERID;
        lrCond.Fecha                     := TODAY;
        lrCond.TourOperador              := prRsv.TourOperador;
        lrCond."N§ Factura proveedor"    := prRsv."N§ Ticket";
        lrCond."Fecha emision proveedor" := prRsv."Fecha cambio";
        lrCond.INSERT;
        COMMIT;

        CLEAR(lfFicha);
        lfFicha.SETRECORD(lrCond);
        lfFicha.SETTABLEVIEW(lrCond);
        lfFicha.PasaParametros(0); // 0 = Anular
        lfFicha.RUNMODAL;

        //. Recogemos el registro temporal y comprobamos los datos

        lrCond.GET(USERID);
        IF lrCond.Texto = '' THEN
          lrCond.Texto := 'CXL';
      END
      ELSE
        lrCond.Texto := 'CXL'; //+$043

      lrxRsv := prRsv;

      //. Aumentar el contador de reservas anuladas del servicio

      IF prRsv."N§ Servicio" <> 0 THEN BEGIN
        lrServicio.GET(prRsv.Delegacion, prRsv."N§ Servicio");
        lrServicio."Reservas Anuladas" += 1;
        lrServicio."Pendiente Recalcular" := TRUE;
        lrServicio.MODIFY;
      END;

      //. Modificamos la reserva

      IF prRsv.Divisa = '' THEN
      BEGIN
        rPar.FINDFIRST;
        prRsv.Divisa := rPar."Divisa venta excursiones";
      END;

      prRsv.VALIDATE(Anulada, TRUE);
      prRsv."Fecha anulaci¢n/Reembolso" := TODAY;
      prRsv."Usuario Modificacion"      := USERID;
      prRsv."N§ Servicio"               := 0;
      prRsv."Comentarios Reembolso"     := lrCond.Texto;
      //-$043prRsv."Fecha cambio" := lrCond."Fecha emision proveedor";
      prRsv.TipoCambioDivisa;

      prRsv."Ingreso reserva"           := 0;
      prRsv."Ingreso comisionable"      := 0;
      prRsv."Ingreso Adulto"            := 0;
      prRsv."Ingreso Ni¤o"              := 0;
      prRsv."Ingreso reserva neto"      := 0;
      prRsv."Ingreso comisionable neto" := 0;
      prRsv."Ingreso adulto neto"       := 0;
      prRsv."Ingreso ni¤o neto"         := 0;
      prRsv."Comision Guia Venta"       := 0;
      prRsv."Comision Touroperador"     := 0;
      prRsv."Num. Prefactura"           := '';
      prRsv."Coste Reserva"             := 0; //+$047
      prRsv.MODIFY;

      //. Vaciamos el detalle economico
      IF lrDetEco.GET(prRsv.Delegacion, prRsv."N§ Reserva") THEN
      BEGIN
        lrDetEco.INIT;
        lrDetEco."Cod. Divisa" := prRsv.Divisa;
        lrDetEco."Guia Venta"  := prRsv."Guia Venta";
        lrDetEco."Fecha venta" := prRsv."Fecha Venta";
        lrDetEco.MODIFY;
      END;

      // $014 Eliminamos la reseva Soporte si existe
      prRsv.BorraReservasSoporte;

      //. Dejamos a cero el importe recibido del cobro
      //+$023 <
      lrCobro.RESET;
      lrCobro.SETRANGE(Delegacion   , prRsv.Delegacion);
      lrCobro.SETRANGE("Num Reserva", prRsv."N§ Reserva");
      IF lrCobro.FINDSET(TRUE) THEN
      BEGIN
        REPEAT
          //. Eliminamos si hay lineas de cobro con informacion que falte
          IF (lrCobro."Forma de Pago" <> '') AND (lrCobro."Cod. Divisa" = '') THEN
          BEGIN
            lrCobro.VALIDATE("Importe Recibido", 0);
            lrCobro.MODIFY;
          END
          ELSE
          BEGIN
            lrCobro2 := lrCobro;
            lrCobro2.DELETE;
          END;
        UNTIL lrCobro.NEXT = 0;
      END;
      //+$023 >
    END;

    PROCEDURE CreaTicketAnulado@1100253001();
    VAR
      lrCond@1100253000 : Record 7010085;
      lrRsv@1100253002 : Record 7010162;
      lrDetEco@1100217000 : Record 7010245;
      lrTal@1100253003 : Record 7010146;
      lrTar@1100253004 : Record 7010147;
      lrUser@1100217001 : Record 91;
      lfFicha@1100253001 : Form 7010301;
    BEGIN
      // CreaTicketAnulado

      //. Creada por: AJS
      //. Creada dia: 17.01.2011
      //. Crear una reserva de excursion directamente como anulada

      rPar.FINDFIRST;

      IF lrCond.GET(USERID) THEN
        lrCond.DELETE;

      lrCond.INIT;
      lrCond.Usuario                   := USERID;
      lrCond.Fecha                     := WORKDATE;
      //-$031lrCond."Fecha emision proveedor" := TODAY;
      lrCond.Texto                     := Text073; //$009
      lrCond.INSERT;
      COMMIT;

      CLEAR(lfFicha);
      lfFicha.SETRECORD(lrCond);
      lfFicha.SETTABLEVIEW(lrCond);
      lfFicha.PasaParametros(1); // 1 = Crear anulado
      IF lfFicha.RUNMODAL <> ACTION::OK THEN
        EXIT;

      //. Recogemos el registro temporal y comprobamos los datos

      lrCond.GET(USERID);

      IF (lrCond.Fecha = 0D) OR
         (lrCond."N§ Factura proveedor" = '') OR
         (lrCond.TourOperador = '') OR
         (lrCond.Texto = '') THEN
        ERROR(Text064);

      lrUser.GET(USERID);
      lrTal.a¤ade_ceros(lrCond."N§ Factura proveedor", lrUser."Oficina Excursiones");

      CLEAR(lrRsv);
      lrRsv.INSERT(TRUE); //$007
      lrRsv.VALIDATE("Fecha Excursion"          , lrCond.Fecha);
      lrRsv.VALIDATE(TourOperador               , lrCond.TourOperador);
      lrRsv.VALIDATE("N§ Ticket"                , lrCond."N§ Factura proveedor");

      //-$009lrRsv.busca_tarifa(lrTar);

      //+$009
      //-$031lrTar.RESET;
      //-$031lrTar.SETRANGE (Delegacion    , lrRsv.Delegacion);
      //-$031IF rPar."Busca tarifa por fecha venta" THEN
      //-$031BEGIN
      //-$031  lrTar.SETFILTER("Fecha Inicio", '<=%1', lrRsv."Fecha Venta");
      //-$031  lrTar.SETFILTER("Fecha Final" , '>=%1', lrRsv."Fecha Venta");
      //-$031END
      //-$031ELSE
      //-$031BEGIN
      //-$031  lrTar.SETFILTER("Fecha Inicio", '<=%1', lrRsv."Fecha Excursion");
      //-$031  lrTar.SETFILTER("Fecha Final" , '>=%1', lrRsv."Fecha Excursion");
      //-$031END;
      //-$031lrTar.FINDFIRST;
      //+$009

      //-$031lrRsv.Divisa := lrTar."o_C¢d. divisa";

      //-$031lrRsv.VALIDATE("Fecha cambio"             , lrCond."Fecha emision proveedor");
      lrRsv.VALIDATE("Comentarios Reembolso"    , lrCond.Texto);
      lrRsv.VALIDATE(Anulada                    , TRUE);
      lrRsv.VALIDATE("Fecha anulaci¢n/Reembolso", WORKDATE); //+$035
      lrRsv.VALIDATE("Usuario Modificacion"     , USERID);

      lrRsv.MODIFY; //$007

      lrDetEco.INIT;
      lrDetEco.Delegacion     := lrRsv.Delegacion;
      lrDetEco."Num. Reserva" := lrRsv."N§ Reserva";
      lrDetEco."Cod. Divisa"  := lrRsv.Divisa;
      lrDetEco."Fecha venta"  := lrRsv."Fecha Venta";
      lrDetEco."Guia Venta"   := lrRsv."Guia Venta";
      lrDetEco.INSERT;
    END;

    PROCEDURE CambiaFechaReserva@1100253003(VAR prRsv@1100253000 : Record 7010162);
    VAR
      lwDialog@1100253001 : Dialog;
      lwFecha@1100253002 : Date;
      lrTar@1100253003 : Record 7010147;
      lrPrecio@1100253004 : Record 7010148;
      lwPrecioAD@1100253005 : Decimal;
      lwPrecioNI@1100253006 : Decimal;
    BEGIN
      // CambiaFechaReserva

      //. Creada por: AJS
      //. Creada dia: 08.02.2011
      //. Modificar la fecha de una reserva liquidada

      //. Controlamos que el estado de la reserva sea el correcto

      // $061
      IF (prRsv."Reserva online") AND (GUIALLOWED) THEN
        cFunSeg.TienePermiso('EXC-ONL-MAN', TRUE);

      IF prRsv.Anulada THEN
        ERROR(Text067);

      IF prRsv.Reembolsada THEN
        ERROR(Text068);

      IF NOT prRsv."Liquidado GV" THEN
        ERROR(Text069);

      IF prRsv."N§ Servicio" <> 0 THEN
        ERROR(Text070);

      //+$066 <
      rPar.FINDFIRST;
      IF NOT rPar."Facturar tickets x fecha venta" THEN
        prRsv.TESTFIELD(Facturada, FALSE); //+$039
      //+$066 >

      //. Pedimos la nueva fecha al usuario
      CLEAR(lwFecha);
      lwDialog.OPEN(Text071);
      lwDialog.INPUT(1, lwFecha);
      lwDialog.CLOSE;

      IF lwFecha = 0D THEN
        EXIT;

      //. Si la tarifa se aplica en funcion de la fecha de venta no hay posibles cambios
      //. de tarifa por lo que cambiamos la fecha de excursion y salimos.
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        prRsv.VALIDATE("Fecha Excursion", lwFecha);
        prRsv.MODIFY;
        EXIT;
      END;

      //. Busco la tarifa para la nueva fecha
      lrTar.RESET;
      lrTar.SETRANGE (Delegacion    , prRsv.Delegacion);
      lrTar.SETRANGE (Excursion     , prRsv.Producto);
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        lrTar.SETFILTER("Fecha Inicio", '<=%1', prRsv."Fecha Venta");
        lrTar.SETFILTER("Fecha Final" , '>=%1', prRsv."Fecha Venta");
      END
      ELSE
      BEGIN
        lrTar.SETFILTER("Fecha Inicio", '<=%1', lwFecha);
        lrTar.SETFILTER("Fecha Final" , '>=%1', lwFecha);
      END;

      lrTar.FINDFIRST;

      //. Buscamos el precio base correspondiente a la nueva fecha

      rParPer.FINDFIRST;

      lrPrecio.RESET;
      lrPrecio.SETRANGE (Delegacion        , lrTar.Delegacion);
      lrPrecio.SETRANGE (Excursion         , lrTar.Excursion);
      lrPrecio.SETRANGE ("ID Tarifa"       , lrTar."ID Tarifa"); //+$027
      lrPrecio.SETRANGE ("Temporada Tarifa", lrTar.Temporada);
      lrPrecio.SETRANGE ("Tipo precio"     , lrPrecio."Tipo precio"::"Precio Base");
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        lrPrecio.SETFILTER("Fecha Desde", '<=%1', prRsv."Fecha Venta");
        lrPrecio.SETFILTER("Fecha Hasta", '>=%1', prRsv."Fecha Venta");
      END
      ELSE
      BEGIN
        lrPrecio.SETFILTER("Fecha Desde", '<=%1', lwFecha);
        lrPrecio.SETFILTER("Fecha Hasta", '>=%1', lwFecha);
      END;

      //. Comparar el precio obtenido con el precio de la reserva, si es diferente mostrar error
      lrPrecio.SETRANGE (Codigo            ,rParPer."Codigo Adulto");
      lrPrecio.FINDFIRST;

      lwPrecioAD := lrPrecio.Precio; //$006

      lrPrecio.SETRANGE (Codigo            ,rParPer."Codigo Ni¤o");
      lrPrecio.FINDFIRST;

      lwPrecioNI := lrPrecio.Precio; //$006

      _CalculoSuplementosZona(prRsv, lrTar, lwPrecioAD, lwPrecioNI);
      _CalculoOfertaOnline(prRsv, lrTar, lwPrecioAD, lwPrecioNI); // $062
      _CalculoSuplementosVarios(prRsv, lrTar, lwPrecioAD, lwPrecioNI);

      IF lwPrecioAD <> prRsv."Precio Adulto" THEN
        ERROR(Text072);

      IF lwPrecioNI <> prRsv."Precio Ni¤o" THEN
        ERROR(Text072);

      //. Modificamos la reserva sin TRUE para evitar el error de reserva ya liquidada

      prRsv.VALIDATE("Fecha Excursion", lwFecha);
      prRsv.MODIFY;
    END;

    LOCAL PROCEDURE _CalculoSuplementosZona@1100253004(prRsv@1100253000 : Record 7010162;prTar@1100253004 : Record 7010147;VAR pwPrecioAD@1100253001 : Decimal;VAR pwPrecioNI@1100253002 : Decimal);
    VAR
      lrPrecio@1100253003 : Record 7010148;
    BEGIN
      // _CalculoSuplementosZona

      //. Creada por: AJS
      //. Creada dia: 14.04.2011
      //. Obtenemos el precio Adulto y Ni¤o con los suplementos de zona aplicados

      //. @prRsv      : Reserva que estamos calculando
      //. @prTar      : Tarifa que se aplica sobre la reserva
      //. @pwPrecioAD : Precio base AD que se retorna con los suplementos aplicados
      //. @pwPrecioNI : Precio base NI que se retorna con los suplementos aplicados

      lrPrecio.RESET;
      lrPrecio.SETRANGE (Delegacion        , prRsv.Delegacion);
      lrPrecio.SETRANGE (Excursion         , prTar.Excursion);
      lrPrecio.SETRANGE ("Temporada Tarifa", prTar.Temporada);
      lrPrecio.SETRANGE ("ID Tarifa"       , prTar."ID Tarifa"); //+$027
      lrPrecio.SETRANGE ("Tipo precio"     , lrPrecio."Tipo precio"::"Suplemento Zona");
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        lrPrecio.SETFILTER("Fecha Desde", '<=%1', prRsv."Fecha Venta");
        lrPrecio.SETFILTER("Fecha Hasta", '>=%1', prRsv."Fecha Venta");
      END
      ELSE
      BEGIN
        lrPrecio.SETFILTER("Fecha Desde", '<=%1', prRsv."Fecha Excursion");
        lrPrecio.SETFILTER("Fecha Hasta", '>=%1', prRsv."Fecha Excursion");
      END;
      lrPrecio.SETRANGE(Codigo             , prRsv."Zona Venta");
      IF lrPrecio.FINDFIRST THEN BEGIN
        pwPrecioAD += lrPrecio."Precio Adulto";
        pwPrecioNI += lrPrecio."Precio Ni¤o";
      END;
    END;

    LOCAL PROCEDURE _CalculoOfertaOnline@1000000004(prRsv@1100253000 : Record 7010162;prTar@1100253004 : Record 7010147;VAR pwPrecioAD@1100253001 : Decimal;VAR pwPrecioNI@1100253002 : Decimal);
    VAR
      rOferta@1100253003 : Record 7010269;
      w_DescAdulto@1000000000 : Decimal;
      w_DescNi¤o@1000000001 : Decimal;
    BEGIN
      // _CalculoOfertaOnline

      //. Creada por: ARM    $062
      //. Creada dia: 29.08.2014
      //. Obtenemos el precio Adulto y Ni¤o con las ofertas

      //. @prRsv      : Reserva que estamos calculando
      //. @prTar      : Tarifa que se aplica sobre la reserva
      //. @pwPrecioAD : Precio base AD que se retorna con los suplementos aplicados
      //. @pwPrecioNI : Precio base NI que se retorna con los suplementos aplicados

      IF prRsv."Reserva online" THEN
      BEGIN
        rOferta.RESET;
        rOferta.SETCURRENTKEY(TourOperador, Excursion, "Turno Excursion", "Fecha servicio desde",
                              "Fecha servicio hasta", "Fecha venta desde", "Fecha venta hasta");
        rOferta.SETRANGE (TourOperador          , prRsv.TourOperador);
        rOferta.SETRANGE (Excursion             , prRsv.Producto);
        rOferta.SETRANGE ("Turno Excursion"     , prRsv."Turno Excursion");
        rOferta.SETFILTER("Fecha servicio desde", '<=%1', prRsv."Fecha Excursion");
        rOferta.SETFILTER("Fecha servicio hasta", '>=%1', prRsv."Fecha Excursion");
        rOferta.SETFILTER("Fecha venta desde"   , '<=%1', prRsv."Fecha Venta");
        rOferta.SETFILTER("Fecha venta hasta"   , '>=%1', prRsv."Fecha Venta");
        IF NOT rOferta.FINDFIRST THEN
          rOferta.SETRANGE(rOferta.TourOperador, '');

        IF rOferta.FINDFIRST THEN
        BEGIN
          IF rOferta.Porcentaje THEN
          BEGIN
            w_DescAdulto:= ROUND(prRsv."Precio Adulto" * rOferta."Precio adulto" / 100);
            w_DescNi¤o:= ROUND(prRsv."Precio Ni¤o" * rOferta."Precio ni¤o" / 100);
          END
          ELSE
          BEGIN
            w_DescAdulto:= rOferta."Precio adulto";
            w_DescNi¤o:= rOferta."Precio ni¤o";
          END;
          pwPrecioAD += w_DescAdulto;
          pwPrecioNI += w_DescNi¤o;
        END;
      END;
    END;

    LOCAL PROCEDURE _CalculoSuplementosVarios@1100253009(prRsv@1100253003 : Record 7010162;prTar@1100253002 : Record 7010147;VAR pwPrecioAD@1100253001 : Decimal;VAR pwPrecioNI@1100253000 : Decimal);
    VAR
      lrPrecio@1100253004 : Record 7010148;
      lrSupl@1100253005 : Record 7010165;
    BEGIN
      // _CalculoSuplementosVarios

      //. Creada por: AJS
      //. Creada dia: 14.04.2011
      //. Obtenemos el precio Adulto y Ni¤o con los suplementos varios aplicados

      //. @prRsv      : Reserva que estamos calculando
      //. @prTar      : Tarifa que se aplica sobre la reserva
      //. @pwPrecioAD : Precio AD que se retorna con los suplementos aplicados
      //. @pwPrecioNI : Precio NI que se retorna con los suplementos aplicados

      //. Buscar los suplementos asociados a la reserva

      lrSupl.RESET;
      lrSupl.SETRANGE(Delegacion  , prRsv.Delegacion);
      lrSupl.SETRANGE("N§ Reserva", prRsv."N§ Reserva");
      lrSupl.SETRANGE(Aplicacion  , TRUE);
      IF lrSupl.FINDSET THEN
      BEGIN
        lrPrecio.RESET;
        lrPrecio.SETRANGE (Delegacion        , prTar.Delegacion);
        lrPrecio.SETRANGE (Excursion         , prTar.Excursion);
        lrPrecio.SETRANGE ("Temporada Tarifa", prTar.Temporada);
        lrPrecio.SETRANGE ("ID Tarifa"       , prTar."ID Tarifa"); //+$027
        lrPrecio.SETRANGE ("Tipo precio"     , lrPrecio."Tipo precio"::"Suplemento Varios");

        IF rPar."Busca tarifa por fecha venta" THEN
        BEGIN
          lrPrecio.SETFILTER("Fecha Desde", '<=%1', prRsv."Fecha Venta");
          lrPrecio.SETFILTER("Fecha Hasta", '>=%1', prRsv."Fecha Venta");
        END
        ELSE
        BEGIN
          lrPrecio.SETFILTER("Fecha Desde", '<=%1', prRsv."Fecha Excursion");
          lrPrecio.SETFILTER("Fecha Hasta", '>=%1', prRsv."Fecha Excursion");
        END;
        REPEAT
          lrPrecio.SETRANGE(Codigo, lrSupl."Codigo Suplemento");
          IF lrPrecio.FINDFIRST THEN
          BEGIN
            REPEAT
              IF lrPrecio."% Porcentaje" THEN
                _SuplementoPorcentaje(lrPrecio, pwPrecioAD, pwPrecioNI)
              ELSE
                _SuplementoImporte(lrPrecio, pwPrecioAD, pwPrecioNI);
            UNTIL lrPrecio.NEXT = 0;
          END;
        UNTIL lrSupl.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _SuplementoPorcentaje@1100253011(prPrecio@1100253002 : Record 7010148;VAR pwPrecioAD@1100253001 : Decimal;VAR pwPrecioNI@1100253000 : Decimal);
    BEGIN
      // _SuplementoPorcentaje

      //. Creada por: AJS
      //. Creada dia: 14.04.2011
      //. Aplicar el suplemento en caso de que sea un porcentaje

      //. @prPrecio   : Registro del suplemento
      //. @pwPrecioAD : Precio base AD que se retorna con los suplementos aplicados
      //. @pwPrecioNI : Precio base NI que se retorna con los suplementos aplicados

      IF prPrecio."Acumula al precio" THEN
      BEGIN
        pwPrecioAD += ROUND((pwPrecioAD * prPrecio."Precio Adulto") / 100);
        pwPrecioNI += ROUND((pwPrecioNI * prPrecio."Precio Ni¤o") / 100);
      END
      ELSE
      BEGIN
        pwPrecioAD := ROUND((pwPrecioAD * prPrecio."Precio Adulto") / 100);
        pwPrecioNI := ROUND((pwPrecioNI * prPrecio."Precio Ni¤o") / 100);
      END;
    END;

    LOCAL PROCEDURE _SuplementoImporte@1100253012(prPrecio@1100253002 : Record 7010148;VAR pwPrecioAD@1100253001 : Decimal;VAR pwPrecioNI@1100253000 : Decimal);
    BEGIN
      // _SuplementoImporte

      //. Creada por: AJS
      //. Creada dia: 14.04.2011
      //. Aplicar el suplemento en caso de que sea un importe

      //. @prPrecio   : Registro del suplemento
      //. @pwPrecioAD : Precio base AD que se retorna con los suplementos aplicados
      //. @pwPrecioNI : Precio base NI que se retorna con los suplementos aplicados

      IF prPrecio."Acumula al precio" THEN
      BEGIN
        pwPrecioAD += prPrecio."Precio Adulto";
        pwPrecioNI += prPrecio."Precio Ni¤o";
      END
      ELSE
      BEGIN
        pwPrecioAD := prPrecio."Precio Adulto";
        pwPrecioNI := prPrecio."Precio Ni¤o";
      END;
    END;

    PROCEDURE DeshacerServicio@1100253014(VAR prServ@1100253000 : Record 7010163);
    VAR
      lrReserva@1100253008 : Record 7010162;
      lrPrestaciones@1100253007 : Record 7010170;
      lrMargenes@1100253006 : Record 7010174;
      lrZonas@1100253005 : Record 7010173;
      lrSuplCom@1100253004 : Record 7010171;
      lrZonaExc@1100253003 : Record 7010169;
      lrErr@1100253002 : Record 7010175;
      lrSuplGo@1100253001 : Record 7010172;
    BEGIN
      // DeshacerServicio

      IF CONFIRM (Text076, FALSE) THEN
      BEGIN
        lrReserva.SETCURRENTKEY("N§ Servicio",
                               TourOperador);
        lrReserva.SETRANGE("N§ Servicio"      , prServ."N§ Servicio");
        IF lrReserva.FINDFIRST THEN
        BEGIN
          lrReserva.MODIFYALL("Zona Servicio", '');
          lrReserva.MODIFYALL("N§ Servicio"  , 0);
        END;

        lrPrestaciones.RESET;
        lrPrestaciones.SETRANGE("N§ Servicio", prServ."N§ Servicio");
        lrPrestaciones.SETRANGE(Delegacion   , prServ.Delegacion);
        IF lrPrestaciones.FINDFIRST THEN
          lrPrestaciones.DELETEALL;

        lrMargenes.RESET;
        lrMargenes.SETRANGE(Delegacion   , prServ.Delegacion);
        lrMargenes.SETRANGE("N§ Servicio", prServ."N§ Servicio");
        IF lrMargenes.FINDFIRST THEN
          lrMargenes.DELETEALL;

        lrZonas.RESET;
        lrZonas.SETRANGE(Delegacion   , prServ.Delegacion);
        lrZonas.SETRANGE("N§ Servicio", prServ."N§ Servicio");
        IF lrZonas.FINDFIRST THEN
          lrZonas.DELETEALL;

        lrSuplCom.SETRANGE(Delegacion   , prServ.Delegacion);
        lrSuplCom.SETRANGE("N§ Servicio", prServ."N§ Servicio");
        IF lrSuplCom.FINDFIRST THEN
          lrSuplCom.DELETEALL;

        lrSuplGo.RESET;
        lrSuplGo.SETRANGE(Delegacion   , prServ.Delegacion);
        lrSuplGo.SETRANGE("N§ Servicio", prServ."N§ Servicio");
        IF lrSuplGo.FINDFIRST THEN
          lrSuplGo.DELETEALL;

        lrZonaExc.RESET;
        lrZonaExc.SETRANGE(Delegacion, prServ.Delegacion);
        lrZonaExc.SETRANGE("Num. Servicio"      , STRSUBSTNO('%1', prServ."N§ Servicio"));
        IF lrZonaExc.FINDFIRST THEN
          lrZonaExc.DELETEALL;

        lrErr.RESET;
        lrErr.SETRANGE(Servicio, prServ."N§ Servicio");
        IF lrErr.FINDFIRST THEN
          lrErr.DELETEALL;

        // $014
        // Borra registros relacionados de soporte
        prServ.BorraRegistrosSOP;

        prServ.DELETE(TRUE);
      END;
    END;

    LOCAL PROCEDURE _GestionPaxReservadoServicio@1100217000(pwDelegacion@1100217000 : Code[20];pwServicio@1100217001 : Integer;pwNumAdultos@1100217002 : Integer;pwNumChilds@1100217003 : Integer);
    VAR
      lrPrestacion@1100217004 : Record 7010170;
      lrSer@1100217005 : Record 7010163;
      lrContrato@1100217008 : Record 7010142;
      lwPideConfirmacion@1100217007 : Boolean;
    BEGIN
      // _GestionPaxReservadoServicio

      //. @pwDelegacion
      //. @Servicio, Es el servicio del se van a modificar los paxes reservados
      //. @pwNumAdultos, Cantidad de adultos que se van a sumar/restar (ya vienen con el signo puesto)
      //. @pwNumChilds, Cantidad de ni¤os que se van a sumar/restar (ya vienen con el signo puesto)

      IF NOT lrSer.GET(pwDelegacion, pwServicio) THEN
        ERROR(Text010, pwServicio);

      //. Vamos a comprobar si alguna de las prestaciones de los proveedores de servicio tiene el contrato por
      //. paxes reservados porque de lo contrario no se muestra el confirm

      //-$072lwPideConfirmacion := FALSE;

      //-$072lrPrestacion.RESET;
      //-$072lrPrestacion.SETRANGE(Delegacion     , lrSer.Delegacion);
      //-$072lrPrestacion.SETRANGE("N§ Servicio"  , lrSer."N§ Servicio");
      //-$072lrPrestacion.SETRANGE(Aplicacion     , TRUE);
      //-$072lrPrestacion.SETRANGE("Tipo Contrato", lrPrestacion."Tipo Contrato"::Excursion);
      //-$072IF lrPrestacion.FINDSET THEN
      //-$072BEGIN
      //-$072  REPEAT
      //-$072    IF lrContrato.GET(pwDelegacion, lrPrestacion."N§ Contrato", lrContrato."Tipo Contrato"::Excursion) THEN
      //-$072      lwPideConfirmacion := (lrContrato."old_Tipo Facturacion" = lrContrato."old_Tipo Facturacion"::"Pax Reservados");
      //-$072  UNTIL lrPrestacion.NEXT = 0;
      //-$072END;

      //. Si el contrato lo hace necesario le pedimos un confirm al usuario

      //-$072IF lwPideConfirmacion THEN
      //-$072BEGIN
      //-$072  IF CONFIRM(Text011, FALSE, pwServicio) THEN BEGIN
      //-$072    lrSer."Adultos Reservados" += pwNumAdultos;
      //-$072    lrSer."Ni¤os Reservados"   += pwNumChilds;
      //-$072    lrSer.MODIFY;
      //-$072  END;
      //-$072END
      //-$072ELSE
      //-$072BEGIN
        lrSer."Adultos Reservados" += pwNumAdultos;
        lrSer."Ni¤os Reservados"   += pwNumChilds;
        lrSer.MODIFY;
      //-$072END;
    END;

    PROCEDURE TransportePropio@1100217001(pwExcursion@1100217000 : Code[10]) : Boolean;
    VAR
      lrProd@1100217001 : Record 7009710;
    BEGIN
      // TransportePropio

      //. Esta funcion retorna TRUE si la excursion tiene transporte propio

      lrProd.GET(pwExcursion);
      EXIT(lrProd."Transporte organizado agencia");
    END;

    PROCEDURE ControlOficinaExcursion@1100217002(pwCodExc@1100217001 : Code[10];pwError@1100217003 : Boolean) : Boolean;
    VAR
      lwOk@1100217002 : Boolean;
    BEGIN
      // ControlOficinaExcursion
      // Devuelve True si la excursi¢n Tiene oficina o no la precisa
      // y el usuario est  autorizado a usarla
      // Si esta marcado pwError y devuelve False se genera un mensaje de error
      // $019

      lwOk := ControlExcursionConOficina(pwCodExc,pwError, TRUE);

      EXIT(lwOk);
    END;

    PROCEDURE ControlExcursionConOficina@1100217009(pwCodExc@1100217001 : Code[10];pwError@1100217003 : Boolean;pwCntrlUsr@1100217004 : Boolean) : Boolean;
    VAR
      lwOk@1100217002 : Boolean;
      lrProdAge@1100217000 : Record 7009710;
    BEGIN
      // ControlExcursionConOficina
      // Devuelve True si la excursi¢n Tiene oficina o no la precisa
      // Si esta marcado pwError y devuelve False se genera un mensaje de error
      // pwCntrlUsr Indica que tambien controlamos que el usario tenga permisos para esa excursion
      // $019

      lwOk := TRUE;
      IF pwCodExc='' THEN
        EXIT(lwOk);

      CLEAR(lrProdAge);
      IF lrProdAge.GET(pwCodExc) THEN
        lwOk := ControlExcursionConOficinaProd(lrProdAge,pwError, pwCntrlUsr);

      EXIT(lwOk);
    END;

    PROCEDURE ControlExcursionConOficinaProd@1100217003(VAR prProdAge@1100217001 : Record 7009710;pwError@1100217003 : Boolean;pwCntrlUsr@1100217000 : Boolean) : Boolean;
    VAR
      lwOk@1100217002 : Boolean;
    BEGIN
      // ControlExcursionConOficinaProd
      // Esta funci¢n complementa a la anterior
      // Se ha separado en dos por conveniencia
      // Devuelve True si la excursi¢n Tiene oficina o no la precisa
      // pwCntrlUsr Indica que tambien controlamos que el usario tenga permisos para esa excursion
      // $019

      lwOk := TRUE;
      rPar.FINDFIRST;
      IF NOT rPar."Oficina Excursion Obligatoria" THEN
        EXIT(lwOk);

      IF prProdAge."Tipo Producto" <> prProdAge."Tipo Producto"::Excursion THEN
        EXIT(lwOk);

      lwOk := prProdAge.Oficina <> '';

      IF pwError AND (NOT lwOk) THEN
        ERROR(Text079, prProdAge.Codigo);

      IF pwCntrlUsr THEN
        lwOk := lwOk AND ControlOficinaUsuario(prProdAge.Oficina, pwError);

      EXIT(lwOk);
    END;

    PROCEDURE ControlOficinaUsuario@1100217004(pwOficina@1100217000 : Code[20];pwError@1100217001 : Boolean) : Boolean;
    VAR
      lrUserSt@1100217002 : Record 91;
      lwOk@1100217003 : Boolean;
    BEGIN
      // ControlOficinaUsuario
      // Devuelve false si el usuario tiene oficina y es distinta a la pasada por parametro

      rPar.FINDFIRST;
      IF NOT rPar."Oficina Excursion Obligatoria" THEN
        EXIT(lwOk);

      lwOk := TRUE;
      IF pwOficina='' THEN
        EXIT(lwOk);

      IF lrUserSt.GET(USERID) THEN BEGIN
        IF lrUserSt."Oficina Excursiones" <> '' THEN BEGIN
          lwOk := lrUserSt."Oficina Excursiones" = pwOficina;
        END;
      END;

      IF (NOT lwOk) AND pwError THEN
        ERROR(Text080, USERID, pwOficina);

      EXIT(lwOk);
    END;

    PROCEDURE MarcarProblemaCobros@1100217006(VAR prRsv@1100217000 : Record 7010162);
    BEGIN
      // MarcarProblemaCobros

      prRsv.VALIDATE("Cobros con problemas", NOT prRsv."Cobros con problemas");
      prRsv.MODIFY;
    END;

    PROCEDURE GetContratoTouroperador@1100217007(prRsv@1100217000 : Record 7010162;VAR prCont@1100217001 : Record 7010142);
    BEGIN
      // GetContratoTouroperador

      rPar.FINDFIRST;

      prCont.RESET;
      prCont.SETRANGE ("Tipo Contrato"        , prCont."Tipo Contrato"::TourOperador);
      //+$069 <
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        prCont.SETFILTER("Fecha inicio contrato", '<=%1', prRsv."Fecha Venta");
        prCont.SETFILTER("Fecha final contrato" , '>=%1', prRsv."Fecha Venta");
      END
      ELSE
      BEGIN
        prCont.SETFILTER("Fecha inicio contrato", '<=%1', prRsv."Fecha Excursion");
        prCont.SETFILTER("Fecha final contrato" , '>=%1', prRsv."Fecha Excursion");
      END;
      //+$069 >
      prCont.SETRANGE (TourOperador           , prRsv.TourOperador);
      prCont.SETRANGE (Confirmado             , TRUE);
      IF NOT prCont.FINDFIRST THEN //+$067
        CLEAR(prCont);
    END;

    PROCEDURE SeleccionOficina@1100217008();
    VAR
      lrUserSetup@1100217000 : Record 91;
      lrOficina@1100217001 : Record 7009720;
    BEGIN
      // SeleccionOficina

      cFunSeg.TienePermiso('EXC-CAM-OFI', TRUE);

      lrOficina.RESET;
      IF FORM.RUNMODAL(0, lrOficina) <> ACTION::LookupOK THEN
        EXIT;

      lrUserSetup.GET(USERID);
      lrUserSetup."Oficina Excursiones" := lrOficina.Codigo;
      lrUserSetup.MODIFY;
    END;

    PROCEDURE CambioMasivoComision@1100217010(prExc@1100217000 : Record 7009710);
    VAR
      lrRep@1100217001 : Record 7010241;
      lrCond@1100217002 : Record 7010243;
      lrCont@1100217004 : Record 7010142;
      lrPre@1100217005 : Record 7010152;
      lrPre2@1100217006 : Record 7010152;
      lrTTOOTemp@1000000000 : TEMPORARY Record 7009717;
      lfCond@1100217003 : Form 7010228;
    BEGIN
      // CambioMasivoComision

      //. Si no hay un contrato por guia de venta no sirve esta funcion
      rPar.FINDFIRST;
      IF NOT rPar."Contrato x Guia venta" THEN
        EXIT;

      //. Desmarcamos el campo seleccionado para que procesos anteriores no ocasiones problemas
      lrRep.RESET;
      lrRep.MODIFYALL(Seleccionado, FALSE);

      //. Preparamos las condiciones temporales del proceso
      IF NOT lrCond.GET(USERID) THEN
      BEGIN
        lrCond.INIT;
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      lrCond.INIT;
      lrCond.Excursion := prExc.Codigo;
      lrCond.MODIFY;
      COMMIT;

      lrCond.FILTERGROUP(2);
      lrCond.SETRANGE(Usuario, USERID);
      lrCond.FILTERGROUP(0);

      //. Llamamos al formulario de condiciones
      CLEAR(lfCond);
      lfCond.SETTABLEVIEW(lrCond);
      lfCond.RUNMODAL;

      IF NOT lfCond.Retorno THEN
        EXIT;

      //. Verificar que se hayan rellenado los datos obligatorios
      lrCond.GET(USERID);
      IF (lrCond.Excursion = '') OR
         //(lrCond.Touroperador = '') OR   Comento para $055
         (lrCond."Fecha desde" = 0D) THEN
        ERROR(Text084);

      //. Hay que meter comisiones posteriores a hoy
      IF lrCond."Fecha desde" < TODAY THEN
        ERROR(Text085);

      //. Recoger el temporal de touroperadores
      lfCond.GetTempTO(lrTTOOTemp);

      IF NOT CONFIRM(Text087, FALSE, lrCond."Importe a validar", lrCond.Excursion, lrCond."Fecha desde") THEN
        EXIT;

      //$055 Repeat por TTOO
      IF NOT lrTTOOTemp.FINDSET THEN
        ERROR(Text090);
      REPEAT

        //. Comprobar si se ha seleccionado al menos un representante
        lrRep.SETRANGE(Seleccionado, TRUE);
        IF NOT lrRep.FINDSET THEN
          ERROR(Text086);


        REPEAT
          //. Buscamos para cada guia seleccionado si tiene contrato de comisiones con el touroperador
          //. en caso contrario mostrar mensaje de error
          lrCont.RESET;
          lrCont.SETRANGE ("Tipo Contrato"        , lrCont."Tipo Contrato"::"Guia Venta");
          lrCont.SETFILTER("Fecha inicio contrato", '<=%1', lrCond."Fecha desde");
          lrCont.SETFILTER("Fecha final contrato" , '>=%1', lrCond."Fecha desde");
          // $055 lrCont.SETRANGE (TourOperador           , lrCond.Touroperador);
          //lrCont.SETRANGE (TourOperador           , lrTTOOTemp.TourOperador);    //+$055
          lrCont.SETRANGE ("Guia Venta"           , lrRep.Codigo);
          lrCont.FINDFIRST;

          //. Buscamos si la excursion tiene precio
          lrPre.RESET;
          lrPre.SETRANGE(Delegacion   , lrCont.Delegacion);
          lrPre.SETRANGE("N§ Contrato", lrCont."N§ Contrato compra");
          lrPre.SETRANGE(Excursion    , lrCond.Excursion);
          lrPre.SETRANGE(TourOperador , lrTTOOTemp.TourOperador);
          IF NOT lrPre.FINDFIRST THEN
            lrPre.SETRANGE(TourOperador , '');
          IF NOT lrPre.FINDFIRST THEN
          BEGIN
            lrPre.INIT; //+$044
            lrPre.Delegacion    := lrCont.Delegacion;
            lrPre."N§ Contrato" := lrCont."N§ Contrato compra";
            lrPre.TourOperador  := lrTTOOTemp.TourOperador;
            lrPre.INSERT(TRUE);
            lrPre.VALIDATE(Excursion    , lrCond.Excursion);
            lrPre.VALIDATE(Precio       , lrCond."Importe a validar");
            lrPre.MODIFY(TRUE);
          END
          //. Si existia el precio lo partimos
          ELSE
          BEGIN
            //. Si la fecha desde del precio coincide con la fecha entrada por parametros quiere decir
            //. que estamos cambiando la comision no creando un periodo nuevo

            IF lrPre."Fecha desde" = lrCond."Fecha desde" THEN
            BEGIN
              lrPre.VALIDATE(Precio, lrCond."Importe a validar");
              lrPre.MODIFY(TRUE);
            END
            ELSE
            BEGIN
              lrPre2 := lrPre;
              lrPre2."Fecha hasta" := lrCond."Fecha desde" - 1;
              lrPre2.MODIFY;

              lrPre."Fecha desde"  := lrCond."Fecha desde";
              lrPre.Precio         := lrCond."Importe a validar";
              lrPre."Orden precio" := 0;
              lrPre.INSERT(TRUE);
            END;
          END;
        UNTIL lrRep.NEXT = 0;
      UNTIL lrTTOOTemp.NEXT = 0;


      MESSAGE(Text088);
    END;

    PROCEDURE QuitarFiltroUsuario@1100217012(VAR prRsv@1100217000 : Record 7010162);
    BEGIN
      // QuitarFiltroUsuario

      prRsv.FILTERGROUP(2);
      prRsv.SETRANGE("Usuario Creacion");
      prRsv.FILTERGROUP(0);
    END;

    PROCEDURE SeleccionRepresentantes@1100217013();
    VAR
      lrRep@1100217001 : Record 7010241;
      lfSelecReps@1100217000 : Form 7010234;
    BEGIN
      // SeleccionRepresentantes

      lrRep.RESET;
      lrRep.SETRANGE(Bloqueado          , FALSE);
      lrRep.SETRANGE("Trabaja a credito", FALSE);

      CLEAR(lfSelecReps);
      lfSelecReps.PasaParametros(1); // Modo Seleccion
      lfSelecReps.SETTABLEVIEW(lrRep);
      lfSelecReps.RUNMODAL;
    END;

    PROCEDURE CrearRegReembolso@1000000001(VAR prRsv@1000000000 : Record 7010162;VAR prReemb@1000000003 : Record 7010266;pTipo@1000000002 : 'Total,Parcial importe,Parcial Persona';pAd@1000000001 : Decimal;pNi@1000000004 : Decimal;pVe@1000000005 : Decimal);
    VAR
      rTo@1000000006 : Record 7009717;
    BEGIN
      // CrearReembolso
      // $056

      prReemb.RESET;
      prReemb.INIT;
      prReemb.Delegacion                      := prRsv.Delegacion;
      prReemb."Num Reserva"                   := prRsv."N§ Reserva";
      prReemb."Tipo Reembolso"                := pTipo;
      prReemb."Adultos Reembolsados"          := pAd;
      prReemb."Ni¤os Reembolsados"            := pNi;
      prReemb."Vehiculos Reembolsados"        := pVe;
      prReemb."Fecha Reembolso"               := WORKDATE; //+$058 //+$073
      prReemb."Hora Reembolso"                := TIME; //+$058
      prReemb."Usuario Reembolso"             := USERID;
      prReemb.Comentario                      := prRsv."Comentarios Reembolso";
      prReemb."Importe Adulto divisa reserva" := prReemb."Adultos Reembolsados" * prRsv."Precio Adulto";
      prReemb."Importe ni¤os divisa reserva"  := prReemb."Ni¤os Reembolsados" * prRsv."Precio Ni¤o";
      prReemb."Guia Venta"                    := prRsv."Guia Venta";
      prReemb."Fecha venta"                   := prRsv."Fecha Venta"; //+$076
      prReemb.CalcNeto;

      // Calculamos el importe de comision a reembolsar
      IF prRsv."Precio Descuento Touroperador" <> 0 THEN BEGIN
      rTo.RESET;
      rTo.GET(prRsv.TourOperador);
        IF rTo."Descuento sobre importes" = rTo."Descuento sobre importes"::"Con impuestos" THEN BEGIN
          prReemb."Comision to reembolso" := ROUND(-(((prReemb."Importe Adulto divisa reserva" + prReemb."Importe ni¤os divisa reserva") *
           prRsv."Precio Descuento Touroperador" ) / 100));
        END
        ELSE BEGIN
          prReemb."Comision to reembolso" := ROUND(-(((prReemb."Importe neto adulto div rsv" + prReemb."Importe neto ni¤os div rsv") *
           prRsv."Precio Descuento Touroperador" ) / 100));
        END;
      END;
      prReemb.INSERT(TRUE);
    END;

    PROCEDURE CrearCobroReembolso@1000000002(VAR prRsv@1000000000 : Record 7010162;VAR prCobRsvTmp@1000000001 : TEMPORARY Record 7010267;VAR prReembolso@1000000002 : Record 7010266);
    VAR
      rCobReemb@1000000003 : Record 7010267;
    BEGIN
      // CrearCobroReembolso
      // $056

      rCobReemb.RESET;
      rCobReemb.INIT;
      rCobReemb.Delegacion               := prReembolso.Delegacion;
      rCobReemb."Num Reserva"            := prReembolso."Num Reserva";
      rCobReemb."Id Reembolso"           := prReembolso."ID Reembolso";
      rCobReemb."Forma de Pago"          := prCobRsvTmp."Forma de Pago";
      rCobReemb.Importe                  := prCobRsvTmp."Importe a reembolsar";
      rCobReemb."Cod. Divisa"            := prCobRsvTmp."Cod. Divisa";
      rCobReemb."Fecha reembolso"        := prReembolso."Fecha Reembolso"; //+$070
      rCobReemb."Importe Divisa Reserva" := CambioDivisa(rCobReemb."Cod. Divisa", prRsv.Divisa, rCobReemb.Importe,
                                                         prRsv."Fecha cambio");
      rCobReemb."Reserva Credito"        := prCobRsvTmp."Reserva Credito";
      rCobReemb."Guia Venta"             := prRsv."Guia Venta";
      rCobReemb.INSERT(TRUE);
    END;

    PROCEDURE CambioDivisa@1000000003(pwDivOrigen@1100217000 : Code[10];pwDivDestino@1100217001 : Code[10];pwImporte@1100217003 : Decimal;pwFecha@1000000000 : Date) : Decimal;
    VAR
      lwImporte@1100217002 : Decimal;
      lrDivisa@1100217004 : Record 4;
      rCamb@1000000001 : Record 330;
    BEGIN
      // CambioDivisa

      IF pwDivOrigen = pwDivDestino THEN
        EXIT(pwImporte);

      CLEAR(lrDivisa);
      IF pwDivDestino <> '' THEN
        lrDivisa.GET(pwDivDestino);

      lwImporte  := ROUND(rCamb.ExchangeAmtFCYToFCY(pwFecha, pwDivOrigen, pwDivDestino, pwImporte),
                       lrDivisa."Amount Rounding Precision");

      EXIT(lwImporte);
    END;

    PROCEDURE ReembolsarTicket@1000000000(VAR prRsv@1100253000 : Record 7010162;pTipo@1000000002 : 'Total,Parcial importe,Parcial personas');
    VAR
      lrCond@1100253001 : Record 7010085;
      lrCobro@1100253004 : Record 7010240;
      lrDetEco@1100253007 : Record 7010245;
      lrServicio@1100253005 : Record 7010163;
      lrRsv@1100217001 : Record 7010162;
      lrCurrExc@1100217002 : Record 330;
      lrCoste@1100217003 : Record 7010166;
      lrExcursion@1100217004 : Record 7009710;
      lrICD@1100217005 : Record 7010264;
      lrReemb@1000000000 : Record 7010266;
      lrReembDet@1000000008 : Record 7010267;
      lrCobroTMP@1000000001 : TEMPORARY Record 7010267;
      lrExc@1000000006 : Record 7009710;
      lfFicha@1100253002 : Form 7010301;
      lfCobro@1100253003 : Form 7010243;
      lcFac@1100217000 : Codeunit 7010140;
      lwImporteReembolso@1100253006 : Decimal;
      lwImpCobro@1000000003 : Decimal;
      lwImpReembTotal@1000000004 : Decimal;
      lwImpReemb@1000000005 : Decimal;
      lwImpReemb_Div@1000000007 : Decimal;
      lcCosteReserva@1000000009 : Codeunit 7010170;
    BEGIN
      // ReembolsarTicket

      //. Creada por: ARM
      //. Creada dia: 23.07.2014
      //. $056

      rPar.FINDFIRST;

      // JPT 19/04/12 CNT-CAR-12004-03 Permision to refund excursion
      IF GUIALLOWED THEN
        cFunSeg.TienePermiso('EXC-RSV-REM', TRUE);
      // $061
      IF (prRsv."Reserva online") AND (GUIALLOWED) THEN
        cFunSeg.TienePermiso('EXC-ONL-MAN', TRUE);

      IF (pTipo = pTipo::Total) AND (prRsv.Anulada OR prRsv.Reembolsada) THEN
        ERROR(Text038);

      // +$056 <
      IF (pTipo = pTipo::Total) THEN
      BEGIN
        lrReemb.RESET;
        lrReemb.SETRANGE(Delegacion   , prRsv.Delegacion);
        lrReemb.SETRANGE("Num Reserva", prRsv."N§ Reserva");
        IF lrReemb.FINDFIRST THEN
          ERROR(Text039);
      END;
      // $056 >

      //+$021 <
      IF rPar."Facturar tickets x fecha venta" THEN
      BEGIN
        IF NOT prRsv.Facturada THEN
          IF NOT prRsv."Liquidado GV" THEN
            ERROR(Text042);
      END
      //+$021 >
      ELSE
      BEGIN
        IF NOT prRsv."Liquidado GV" THEN
          ERROR(Text042);

        IF prRsv.Confirmada THEN //+010
          ERROR(Text066);

        IF prRsv.Facturada THEN
          ERROR(Text065);
      END;

      //+$074 Si es un reembolso parcial de importe no comprobamos que este validado
      IF pTipo <> pTipo::"Parcial importe" THEN
      BEGIN
        //. Comprobamos si el ticket se ha validado
        //+$049 <
        lrExcursion.GET(prRsv.Producto);
        IF lrExcursion."Coste x ticket" THEN
        BEGIN
          lrCoste.RESET;
          lrCoste.SETRANGE (Delegacion   , prRsv.Delegacion);
          lrCoste.SETRANGE ("N§ Servicio", prRsv."N§ Servicio");
          lrCoste.SETRANGE ("Num. Ticket", prRsv."N§ Ticket");
          lrCoste.SETFILTER("N§ Factura" , '<>%1', '');
          IF NOT lrCoste.ISEMPTY THEN
            ERROR(Text089);
        END
        ELSE
        BEGIN
          lrCoste.RESET;
          lrCoste.SETRANGE (Delegacion   , prRsv.Delegacion);
          lrCoste.SETRANGE ("N§ Servicio", prRsv."N§ Servicio");
          lrCoste.SETFILTER("N§ Factura" , '<>%1', '');
          IF NOT lrCoste.ISEMPTY THEN
            ERROR(Text089);
        END;
        //+$049 >
      END;

      IF prRsv."Reserva a credito" THEN
      BEGIN
        lrCobroTMP.INIT;
        lrCobroTMP.Delegacion                := prRsv.Delegacion;
        lrCobroTMP."Num Reserva"             := prRsv."N§ Reserva";
        lrCobroTMP."Cod. Divisa"             := prRsv.Divisa;
        lrCobroTMP."Importe total cobro"     := prRsv."Ingreso reserva";
        lrCobroTMP."Importe reembolsado ant" := lrCobro."Importe Reembolsado";
        IF pTipo = pTipo::Total THEN
          lrCobroTMP."Importe a reembolsar" := prRsv."Ingreso reserva";
        lrCobroTMP."Reserva Credito" := TRUE;
        lrCobroTMP.INSERT;
      END
      ELSE
      BEGIN
        //. Buscamos el registro de cobro
        lrCobro.RESET;
        lrCobro.SETRANGE(Delegacion   , prRsv.Delegacion);
        lrCobro.SETRANGE("Num Reserva", prRsv."N§ Reserva");
        lrCobro.FINDFIRST;

        CLEAR(lrCobroTMP);
        lrCobroTMP.DELETEALL;

        lrCobro.RESET;
        lrCobro.SETRANGE(Delegacion   , prRsv.Delegacion);
        lrCobro.SETRANGE("Num Reserva", prRsv."N§ Reserva");
        IF lrCobro.FINDSET THEN
        BEGIN
          REPEAT
            lrCobroTMP.INIT;
            lrCobroTMP.Delegacion                := lrCobro.Delegacion;
            lrCobroTMP."Num Reserva"             := lrCobro."Num Reserva";
            lrCobroTMP."ID Cobro"                := lrCobro."ID Cobro";
            lrCobroTMP."Forma de Pago"           := lrCobro."Forma de Pago";
            lrCobroTMP."Cod. Divisa"             := lrCobro."Cod. Divisa";
            lrCobroTMP."Importe total cobro"     := lrCobro."Importe Recibido";

            //. Buscamos el importe reembolsado en la tabla de detalle
            //+$077 <
            lrReembDet.RESET;
            lrReembDet.SETCURRENTKEY("Cod. Divisa", "Forma de Pago", "Guia Venta", "Fecha reembolso");
            lrReembDet.SETRANGE(Delegacion     , lrCobro.Delegacion);
            lrReembDet.SETRANGE("Num Reserva"  , lrCobro."Num Reserva");
            lrReembDet.SETRANGE("Forma de Pago", lrCobro."Forma de Pago");
            lrReembDet.SETRANGE("Cod. Divisa"  , lrCobro."Cod. Divisa");
            IF lrReembDet.FINDSET THEN
              lrReembDet.CALCSUMS(Importe)
            ELSE
              CLEAR(lrReembDet);
            lrCobroTMP."Importe reembolsado ant" := lrReembDet.Importe;
            //+$077 >

            //-$077lrCobroTMP."Importe reembolsado ant" := lrCobro."Importe Reembolsado";
            IF pTipo = pTipo::Total THEN
              lrCobroTMP."Importe a reembolsar"  := lrCobro."Importe Recibido";
            lrCobroTMP.INSERT;
          UNTIL lrCobro.NEXT = 0;
        END;
      END;

      //. Pedir al usuario un comentario del reembolso
      IF lrCond.GET(USERID) THEN
        lrCond.DELETE;

      lrCond.INIT;
      lrCond.Usuario                   := USERID;
      lrCond.Delegacion                := prRsv.Delegacion;
      lrCond."N§ Reserva"              := prRsv."N§ Reserva";
      lrCond."N§ Factura proveedor"    := prRsv."N§ Ticket";
      lrCond.TourOperador              := prRsv.TourOperador;
      lrCond.Fecha                     := TODAY;
      lrCond."Fecha emision proveedor" := 0D;
      lrCond."Adultos Reembolso"       := 0;
      lrCond."Ni¤os Reembolso"         := 0;
      lrCond."Vehiculos Reembolso"     := 0;
      //+$059 Guardamos la cantidad de personas/vehiculos de la reserva para los parciales
      lrCond."Adultos Reserva"         := prRsv.Adultos;
      lrCond."Ni¤os Reserva"           := prRsv.Ni¤os;
      lrCond."Vehiculos Reserva"       := prRsv."Num. Vehiculos";
      lrCond.INSERT;
      COMMIT;

      CLEAR(lfFicha);
      lfFicha.SETRECORD(lrCond);
      lfFicha.SETTABLEVIEW(lrCond);
      lfFicha.PasaParametros(0); // 0 = Anular
      lfFicha.PasaTipo(pTipo);
      IF lfFicha.RUNMODAL = ACTION::Cancel THEN //+$065
        EXIT;

      lrCond.GET(USERID);
      IF lrCond.Texto = '' THEN
        lrCond.Texto := 'VOID';

      lrRsv := prRsv;
      lrRsv."Comentarios Reembolso"     := lrCond.Texto;

      IF pTipo <> pTipo::Total THEN
        IF NOT (FORM.RUNMODAL(7010243,lrCobroTMP) = ACTION::LookupOK) THEN
          EXIT;

      // Si no hay importe a reembolsar damos error
      lwImpCobro      := 0;
      lwImpReemb      := 0;
      lwImpReembTotal := 0;
      lwImpReemb_Div  := 0;

      lrCobroTMP.RESET;
      lrCobroTMP.SETRANGE(Delegacion   , lrRsv.Delegacion);
      lrCobroTMP.SETRANGE("Num Reserva", lrRsv."N§ Reserva");
      IF lrCobroTMP.FINDSET THEN
      BEGIN
        REPEAT
          lwImpCobro      += lrCobroTMP."Importe total cobro";
          lwImpReemb      += lrCobroTMP."Importe a reembolsar";
          lwImpReembTotal += (lrCobroTMP."Importe reembolsado ant" + lrCobroTMP."Importe a reembolsar");
          IF lrCobroTMP."Cod. Divisa" <> prRsv.Divisa THEN
            lwImpReemb_Div += CambioDivisa(lrCobroTMP."Cod. Divisa", prRsv.Divisa,
                                           lrCobroTMP."Importe a reembolsar", prRsv."Fecha cambio")
          ELSE
            lwImpReemb_Div += lrCobroTMP."Importe a reembolsar";
        UNTIL lrCobroTMP.NEXT = 0;

        IF lwImpReemb = 0 THEN
          ERROR(Text091);
      END;

      IF lwImpReembTotal > lwImpCobro THEN
        ERROR(Text093);

      // Comprobamos si el importe indicado en cobros corresponde con el importe de adultos y ni¤os
      IF pTipo = pTipo::"Parcial personas" THEN
      BEGIN
        lwImporteReembolso := (lrCond."Adultos Reembolso" * lrRsv."Precio Adulto") + (lrCond."Ni¤os Reembolso" * lrRsv."Precio Ni¤o");
        IF lwImporteReembolso <> lwImpReemb_Div THEN
          ERROR(Text092);
      END;

      //. Creamos el reembolso
      lrReemb.RESET;
      CASE pTipo OF
        pTipo::Total:
           CrearRegReembolso(lrRsv, lrReemb, pTipo, lrRsv.Adultos, lrRsv.Ni¤os, lrRsv."Num. Vehiculos");
        pTipo::"Parcial importe":
           CrearRegReembolso(lrRsv, lrReemb, pTipo, 0, 0, 0);
        pTipo::"Parcial personas":
           CrearRegReembolso(lrRsv, lrReemb, pTipo, lrCond."Adultos Reembolso", lrCond."Ni¤os Reembolso", lrCond."Vehiculos Reembolso");
      END;

      //. Recuperamos el registro de cobro para ver si el usuario ha indicado importe reembolsado
      lrCobroTMP.RESET;
      lrCobroTMP.SETRANGE(Delegacion   , lrRsv.Delegacion);
      lrCobroTMP.SETRANGE("Num Reserva", lrRsv."N§ Reserva");
      IF lrCobroTMP.FINDSET THEN
      BEGIN
        REPEAT
          IF lrCobroTMP."Importe a reembolsar" <> 0 THEN
          BEGIN
            CrearCobroReembolso(lrRsv, lrCobroTMP, lrReemb);

            lrCobro.RESET;
            IF lrCobro.GET(lrCobroTMP.Delegacion,lrCobroTMP."Num Reserva",lrCobroTMP."ID Cobro") THEN
            BEGIN
              lrCobro."Importe Reembolsado" := lrCobro."Importe Reembolsado" + lrCobroTMP."Importe a reembolsar";
              lrCobro.Reembolsado           := TRUE;
              lrCobro."Fecha reembolso"     := WORKDATE;
              lrCobro.MODIFY;
            END;
          END;
        UNTIL lrCobroTMP.NEXT = 0;
      END;
      // $056 >

      //. Aumentar el contador de reservas anuladas del servicio
      IF (pTipo = pTipo::Total) OR (lwImpCobro = lwImpReembTotal) THEN
      BEGIN
        IF lrRsv."N§ Servicio" <> 0 THEN
        BEGIN
          lrServicio.GET(lrRsv.Delegacion, lrRsv."N§ Servicio");
          lrServicio."Reservas Anuladas"    += 1;
          lrServicio."Pendiente Recalcular" := TRUE;
          lrServicio.MODIFY;
        END;
      END;
      //. Modificamos la reserva

      lrRsv.VALIDATE(Reembolsada, TRUE);
      lrRsv."Fecha anulaci¢n/Reembolso" := WORKDATE; //+$035
      lrRsv."Usuario Modificacion"      := USERID;
      lrRsv."Liquidado GV"              := FALSE;
      IF (pTipo = pTipo::Total) OR (lwImpCobro = lwImpReembTotal) THEN
      BEGIN
        lrRsv."N§ Servicio anulado"       := lrRsv."N§ Servicio";
        lrRsv."N§ Servicio"               := 0;
        // $014 Eliminamos la reseva de los servicios de soporte de transporte si existe
        lrRsv.BorraReservasSoporte;
      END;
      lrRsv."Comentarios Reembolso"     := lrCond.Texto;
      //+$029 <
      IF NOT lrRsv.Facturada THEN
        lrRsv."Num. Prefactura" := '';
      //+$029 >

      CASE pTipo OF
        pTipo::Total:
        BEGIN
          lrRsv."Adultos Reembolsados" := lrRsv."Adultos Reembolsados" + lrRsv.Adultos;
          lrRsv."Ni¤os Reembolsados" := lrRsv."Ni¤os Reembolsados" + lrRsv.Ni¤os;
          lrRsv."Vehiculos Reembolsados" := lrRsv."Vehiculos Reembolsados" + lrRsv."Num. Vehiculos";
          lrRsv."Personas Reembolsadas" := lrRsv."Personas Reembolsadas" + lrRsv.Adultos + lrRsv.Ni¤os;
        END;
        pTipo::"Parcial personas":
        BEGIN
          lrRsv."Adultos Reembolsados" := lrRsv."Adultos Reembolsados" + lrCond."Adultos Reembolso";
          lrRsv."Ni¤os Reembolsados" := lrRsv."Ni¤os Reembolsados" + lrCond."Ni¤os Reembolso";
          lrRsv."Vehiculos Reembolsados" := lrRsv."Vehiculos Reembolsados" + lrCond."Vehiculos Reembolso";
          lrRsv."Personas Reembolsadas" := lrRsv."Personas Reembolsadas" + lrCond."Adultos Reembolso" + lrCond."Ni¤os Reembolso";
        END;
      END;

      lrRsv."Importe Reembolsado" := lrRsv."Importe Reembolsado" + lwImpReemb_Div;
      lrRsv.CalcReembNeto;
      lrRsv.MODIFY;
      COMMIT;

      //+$021
      //. Si la reserva esta facturada y se esta facturando sin confirmar, hay que crear un documento de abono
      IF (rPar."Facturar tickets x fecha venta") AND (lrRsv.Facturada) THEN
      BEGIN
        IF (pTipo = pTipo::Total) THEN
        BEGIN
          lcFac.AbonarReserva(lrRsv, lrReemb); //+$079
        END
        ELSE
        BEGIN
          lcFac.AbonarReservaParcial(lrRsv, lrReemb);
        END;
        lrRsv.GET(prRsv.Delegacion, prRsv."N§ Reserva");
      END;

      IF (pTipo = pTipo::Total) OR (pTipo = pTipo::"Parcial personas") THEN
      BEGIN
        IF CONFIRM(Text094, FALSE) THEN
        BEGIN
          IF lrServicio.Estado = lrServicio.Estado::Confirmada THEN
          BEGIN
            lrExc.GET(lrServicio.Excursion);
            IF lrExc."Coste x ticket" THEN
            BEGIN
              //+$081 <
              IF (pTipo = pTipo::Total) THEN
                lcCosteReserva.BorrarCoste(prRsv)
              ELSE
                lcCosteReserva.CosteReservas(lrServicio, prRsv."N§ Reserva");
              //+$081 >

              //-$081Recalculo_Costes(lrServicio, FALSE);
            END;
          END
          ELSE
          BEGIN
            lrRsv."Coste Reserva" := lrRsv."Coste Reserva" - lwImpReemb;
            lrRsv.MODIFY;
          END;
        END;
      END;

      //+$053
      //. Comprobamos si hay que recalcular el periodo ICD
      lrICD.MarkPeriodExc(lrRsv."Fecha anulaci¢n/Reembolso");
    END;

    PROCEDURE EditarReserva@1000000005(VAR prRsv@1000000000 : Record 7010162);
    VAR
      lfEditar@1000000001 : Form 7010249;
      lrCond@1000000002 : Record 7010243;
    BEGIN
      // EditarReserva

      lrCond.RESET;
      IF NOT lrCond.GET(USERID) THEN
      BEGIN
        lrCond.INIT;
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END
      ELSE
        lrCond.INIT;

      lrCond."N§ Ticket"              := prRsv."N§ Ticket";
      lrCond.Excursion                := prRsv.Producto;
      lrCond.Fecha                    := prRsv."Fecha Excursion";
      lrCond."Nombre Cliente"         := prRsv."Nombre Cliente";
      lrCond."N§ Habitacion"          := prRsv."N§ Habitacion";
      lrCond.Observaciones            := prRsv.Observaciones;
      lrCond."Confirmacion proveedor" := prRsv."Confirmacion proveedor";
      lrCond."Punto Recogida"         := prRsv."Punto Recogida";
      lrCond."Hora Recogida"          := prRsv."Hora Recogida";
      lrCond."Turno Excursion"        := prRsv."Turno Excursion";
      lrCond.MODIFY;

      COMMIT;

      lrCond.FILTERGROUP(2);
      lrCond.SETRANGE(Usuario, USERID);
      lrCond.FILTERGROUP(0);

      CLEAR(lfEditar);
      lfEditar.SETRECORD(lrCond);
      lfEditar.RUNMODAL;
      lfEditar.GETRECORD(lrCond);

      prRsv.VALIDATE("Nombre Cliente"        , lrCond."Nombre Cliente");
      prRsv.VALIDATE("N§ Habitacion"         , lrCond."N§ Habitacion");
      prRsv.VALIDATE(Observaciones           , lrCond.Observaciones);
      prRsv.VALIDATE("Confirmacion proveedor", lrCond."Confirmacion proveedor");
      prRsv.VALIDATE("Punto Recogida"        , lrCond."Punto Recogida");
      prRsv.VALIDATE("Turno Excursion"       , lrCond."Turno Excursion");
      prRsv."Hora Recogida"                  := lrCond."Hora Recogida";
      prRsv.MODIFY;
    END;

    PROCEDURE CambioDiaServicio@1000000006(VAR prServ@1000000000 : Record 7010163);
    VAR
      lrResExc@1000000001 : Record 7010162;
    BEGIN
      // Cambiar dia servicio

      lrResExc.CLEARMARKS;

      lrResExc.RESET;
      lrResExc.SETRANGE(Delegacion   , prServ.Delegacion);
      lrResExc.SETRANGE("N§ Servicio", prServ."N§ Servicio");
      IF lrResExc.FINDSET THEN
      BEGIN
        REPEAT
          lrResExc.MARK(TRUE);
        UNTIL lrResExc.NEXT = 0;

        lrResExc.MARKEDONLY(TRUE);

        CambioDiaReservas(lrResExc, FALSE);

        prServ.Fecha             := rCondicionGlobal.Fecha;
        prServ."Turno excursion" := rCondicionGlobal."Turno Excursion";
        prServ.MODIFY;
      END;
    END;

    PROCEDURE CambioDiaReservas@1000000007(VAR prRsv@1000000000 : Record 7010162;prCambiaServ@1000000010 : Boolean);
    VAR
      lrResExc@1000000001 : Record 7010162;
      lrCalExc@1000000007 : Record 7010254;
      lrHis@1000000009 : Record 7010255;
      lrServ@1000000011 : Record 7010163;
      lrHoja@1000000013 : Record 7010168;
      vNewFec@1000000002 : Date;
      vNewTur@1000000003 : Integer;
      vRecalcula@1000000004 : Boolean;
      vDiaAnt@1000000005 : Date;
      vTurnoAnt@1000000006 : Integer;
      vExcAnt@1000000008 : Code[10];
      vNewServ@1000000012 : Integer;
    BEGIN
      // Cambiar dia reservas excursiones

      IF prRsv.FINDSET THEN
      BEGIN
        Pedir_Datos_Cambio(prRsv, rCondicionGlobal);

        vNewFec := rCondicionGlobal.Fecha;
        vNewTur := rCondicionGlobal."Turno Excursion";
        vRecalcula := rCondicionGlobal."Calculo Unico";

        vDiaAnt   := prRsv."Fecha Excursion";
        vTurnoAnt := prRsv."Turno Excursion";
        vExcAnt   := prRsv.Producto;

        IF (vNewFec = vDiaAnt) AND (vNewTur = vTurnoAnt) THEN
          EXIT;

        // Comprobar que la fecha sea igual o posterior a la anterior
        IF vNewFec < vDiaAnt THEN
          ERROR(Text096);

        // Si la fecha cambia mas de una semana pedimos confirmaci¢n
        IF vNewFec - vDiaAnt > 7 THEN
          IF NOT CONFIRM(Text097, FALSE) THEN
            EXIT;

        // Comprobar que est  dentro de calendario de la excursi¢n
        lrCalExc.RESET;
        lrCalExc.SETRANGE (Excursion     , prRsv.Producto);
        lrCalExc.SETFILTER("Fecha inicio", '<=%1', vNewFec);
        lrCalExc.SETFILTER("Fecha final" , '>=%1', vNewFec);
        lrCalExc.SETRANGE (Turno         , vNewTur);
        CASE DATE2DWY(vNewFec, 1) OF
          1: lrCalExc.SETRANGE(Lunes    , TRUE);
          2: lrCalExc.SETRANGE(Martes   , TRUE);
          3: lrCalExc.SETRANGE(Miercoles, TRUE);
          4: lrCalExc.SETRANGE(Jueves   , TRUE);
          5: lrCalExc.SETRANGE(Viernes  , TRUE);
          6: lrCalExc.SETRANGE(Sabado   , TRUE);
          7: lrCalExc.SETRANGE(Domingo  , TRUE);
        END;

        IF NOT lrCalExc.FINDFIRST THEN
          ERROR(Text099);

        // Comprobamos si hay servicio para el d¡a seleccionado
        IF prCambiaServ THEN
        BEGIN
          vNewServ := 0;
          lrServ.RESET;
          lrServ.SETCURRENTKEY(Estado, Fecha, "Zona Excursion", Excursion);
          lrServ.SETRANGE(lrServ.Estado, lrServ.Estado::Generada);
          lrServ.SETRANGE(Fecha, vNewFec);
          lrServ.SETRANGE(lrServ.Excursion, prRsv.Producto);
          lrServ.SETRANGE(lrServ."Turno excursion", vNewTur);
          IF lrServ.FINDFIRST THEN
            vNewServ := lrServ."N§ Servicio";
        END;

        REPEAT
          // Comprobamos que todas son del mismo dia/turno
          IF (vDiaAnt <> prRsv."Fecha Excursion") OR (vTurnoAnt <> prRsv."Turno Excursion") THEN
            ERROR(Text095);
          IF (vExcAnt <> prRsv.Producto) THEN
            ERROR(Text098);

          lrResExc.RESET;
          IF lrResExc.GET(prRsv.Delegacion, prRsv."N§ Reserva") THEN
          BEGIN
            lrResExc."Fecha Excursion" := vNewFec;
            lrResExc."Turno Excursion" := vNewTur;
            IF prCambiaServ THEN
              lrResExc."N§ Servicio" := vNewServ;

            lrResExc.CheckFueraCupo(FALSE, TRUE);

            IF NOT vRecalcula THEN
              lrResExc."Calculo bloqueado" := TRUE
            ELSE
            BEGIN
              IF (lrResExc."Liquidado GV") OR (lrResExc."Reserva online") THEN
              BEGIN
                IF (lrResExc.calcular_reserva(TRUE) <> lrResExc."Ingreso reserva") THEN
                  ERROR(Text101);
              END;
              lrResExc.calcular_reserva(FALSE);
            END;
            lrResExc.MODIFY;

            lrHis.NewRecord(lrResExc.Delegacion, lrResExc."N§ Reserva", lrHis."Tipo Registro"::Reserva,
                            lrResExc.FIELDCAPTION(lrResExc."Fecha Excursion"),
                            FORMAT(vDiaAnt), FORMAT(lrResExc."Fecha Excursion"));

            lrHis.NewRecord(lrResExc.Delegacion, lrResExc."N§ Reserva", lrHis."Tipo Registro"::Reserva,
                            lrResExc.FIELDCAPTION(lrResExc."Turno Excursion"),
                            FORMAT(vTurnoAnt), FORMAT(lrResExc."Turno Excursion"));

            //. Comprobamos la hoja de excursion
            IF NOT lrHoja.GET(prRsv.Delegacion, prRsv."Fecha Excursion", prRsv.Producto, prRsv."Turno Excursion") THEN
            BEGIN
              CLEAR(lrHoja);
              lrHoja.Delegacion := prRsv.Delegacion;
              lrHoja.Fecha      := prRsv."Fecha Excursion";
              lrHoja.Producto   := prRsv.Producto;
              lrHoja.Turno      := prRsv."Turno Excursion";
              lrHoja.INSERT;
            END;
          END;
        UNTIL prRsv.NEXT = 0;
      END;
    END;

    PROCEDURE Pedir_Datos_Cambio@1000000008(VAR rReserva@1103355000 : Record 7010162;VAR rCondicion@1103355001 : Record 7010085);
    VAR
      lrExc@1100217001 : Record 7009710;
    BEGIN
      // Pedir_Datos_Cambio

      rCondicion.SETRANGE(Usuario, USERID());
      IF NOT rCondicion.GET(USERID()) THEN BEGIN
        rCondicion.INIT;
        rCondicion.Usuario := USERID();
        rCondicion.INSERT;
      END;

      //+$036 <
      IF NOT lrExc.GET(rReserva.Producto) THEN
        CLEAR(lrExc);
      //+$036 >

      rCondicion.INIT;
      rCondicion.Usuario                 := USERID;
      rCondicion.Fecha                   := rReserva."Fecha Excursion";
      rCondicion.Excursion               := rReserva.Producto;
      rCondicion."Turno Excursion"       := rReserva."Turno Excursion";
      rCondicion."Calculo Unico"         := FALSE;
      rCondicion.MODIFY;
      COMMIT;

      IF FORM.RUNMODAL(7010293, rCondicion) = ACTION::LookupOK THEN BEGIN
        IF rCondicion.GET(USERID()) THEN
          IF rCondicion.Fecha = 0D THEN
            ERROR(Text004);
      END ELSE
        ERROR(Text100);
    END;

    BEGIN
    {
      $001 AJS 17012011 He creado la funcion AnularTicket

      $002 AJS 17012011 He creado la funcion CreaTicketAnulado

      $003 AJS 17012011 He creado la funcion ReembolsarTicket

      $004 AJS 01022011 Modifico la funcion divide_talonario porque el numero de formulario de condiciones estaba errado

      $005 AJS 08022011 He creado la funcion CambiaFechaReserva

      $006 AJS 14042011 Modifico la funcion CambiaFechaReserva para incluir los suplemento

      $007 AJS 09052011 Modifico la funcion CreaTicketAnulado para hacer el INSERT antes para evitar un error de
                        ticket repetido. Hay que rellenar la divisa.

      $008 AJS 11052011 Modifico la funcion ReembolsarTicket para que la reserva se marque como confirmada si es un reembolso
                        parcial. Hay que recalcular la comision del touroperador

      $009 AJS 11052011 Modifico la funcion CreaTicketAnulado para que se propongo VOID como texto de anulacion y para poner
                        la divisa y que de esta manera se comporte igual al resto de ticket en la liquidacion

      $011 AJS 09092011 Modifico la funcion Selecciona_Excursion para que no tome las reservas reembolsadas

      $012 AJS 29122011 Elimino la funcion Reimprimir_Tickets

      $013 AJS 13032012 Modifico la funcion Desasigna_reserva para que solicite un confirm al usuario

      $014 JPT 16/05/12 CNT-CAR-12004 / EXC-08 Transport support service
                        - AnularTicket : Borramos el registro de la reserva Soporte
                        - ReembolsarTicket: Borramos el registro de la reserva Soporte
                        - Sacar_Anterior  : Borramos el registro de la reserva Soporte
                        - DeshacerServicio : Borramos los servicios de soporte relacionados

      $015 JPT 16/05/12 CNT-CAR-12004 / Exc-13 Establish relation Sales Guides - Touroperator

      $016 AJS 29052012 Modifico la funcion ReembolsarTicket para que a partir de ahora se hagan por el total de la reserva

      $017 JPT 28/05/12 CNT-CAR-12004/EXC-14 Cash receipt to pay excursions services

      $018 AJS 06082012 Nueva funcion TranportePropio para que las excursiones que no tienen transporte propio puedan
                        crear el servicio sin hacer mas preguntas al usuario

      $019 JPT 08/08/12 CNT-OC-12004 Incluir filtro por oficina en las excursiones. Funcion ControlOficinaExcursion

      $020 AJS 22082012 Nueva funcion AsignaConfirmacionProveedor para poder rellenar este dato en reservas
                        que no permitan la edicion

      $021 AJS 21092012 Modificar la funcion de reembolso para el caso de facturar sin confirmar, en este caso lo que hacemos
                        es crear un abono si la reserva ya esta facturada

      $022 AJS 21092012 Nueva funcion MarcarProblemaCobros para poder rellenar este dato en reservas que no permitan la
                        edicion

      $023 AJS 16102012 Modificar la funcion AnularTicket para dejar a cero los cobros

      $024 AJS 18102012 Cuando se recalcula el coste de una agrupacion que ya tiene el FPR generado hacemos el contra-asiento
                        del coste anteriormente calculado y el asiento del nuevo coste

      $025 AJS 14112012 Nueva funcion GetContratoTouroperador para retornar el registro de contrato de comisiones de touroperador
                        que aplica sobre una reserva en concreto

      $026 AJS 19112012 Desde el momento en que se rellena el numero de ticket, ya no se puede borrar la reserva

      $027 AJS 28122012 Cambio en la clave primaria de tarifa venta excursiones

      $028 AJS 10012013 Al reembolsar un ticket no se recalculan las comisiones de Guia Venta / Touroperador

      $029 AJS 16012013 Cuando se reembolsa un ticket vaciamos el campo N§ Prefactura por si estaba preparado para facturar

      $030 AJS 03022013 Nuevo parametro en la funcion Selecciona_Excursion para que se pueda llamar de forma masiva y no presente
                        mensajes al usuario

      $031 AJS 13022013 Modificar la funcion CreaTicketAnulado para que la divisa no se tome de la tarifa de venta

      $032 AJS 04032013 CNT-OC-12010 Nueva funcion CambioMasivoComision para el cambio masivo de comisiones de guia venta

      $033 AJS 06032013 Modifico la funcion Desasigna_reserva para controlar que no se pueda hacer con una reserva confirmada

      $034 AJS 07032013 Modifico la funcion Modificar_Reservas para no tratar anuladas ni reembolsadas

      $035 AJS 11042013 Modifico para que la fecha de anulacion/reembolso sea la fecha de trabajo en lugar de la fecha de sistema

      $036 AJS 11062013 Modifico la funcion PedirDatos para tomar la duracion por defecto de la excursion

      $037 AJS 16062013 Modifico la funcion ReembolsarTicket para marcar las lineas de cobro como reembolsadas

      $038 AJS 28062013 Modifico la funcion Desasigna_reserva para que compruebe si la reserva esta facturada, segun parametro

      $039 AJS 28062013 Modifico la funcion CambiaFechaReserva para que compruebe si la reserva esta facturada

      $040 AJS 03092013 Los nuevos asientos de FPR cuando se recalcula un servicio no se estaban creando

      $041 AJS 02102013 Nueva funcion para quitar el filtro de usuario desde la ventana de entrada rapida

      $042 AJS 17102013 Modificar la anulacion de tickets para poner un nuevo parametro que indica que se llama desde fuera
                        de Atennea

      $043 AJS 20112013 Modifico la anulacion de tickets para corregir un problema si se anula un ticket desde fuera

      $044 AJS 20112013 Modifico la funcion de cambio masivo de comision para corregir un error de fechas

      $045 AJS 08012014 Elimino la funcion Recalculo_Servicio porque es obsoleta

      $046 AJS 08012014 Modifico la funcion Recalculo_Costes para generar el asiento de FPR si el facturamos antes de confirmar
                        aunque antes no tuviera coste calculado

      $047 AJS 24032014 CNT-OC-14033, Modifico la funcion AnularTicket para dejar el coste a cero

      $048 AJS 030520214 Nueva funcion SeleccionRepresentantes para permitir a varios procesos seleccionar Guias de venta

      $049 AJS 05052014 Modifico la funcion ReembolsarTicket para que de un error si esta validado el coste

      $050 AJS 11052014 Elimino los campos de Minimos de los servicios porque son obsoletos

      $051 AJS 13052014 Modifico la funcion ReembolsarTicket para recalcular el coste si el servicio esta confirmado

      $052 AJS 13052014 Modifico la funcion Recalculo_Coste para tener un parametro para recalcular sin confirmacion de usuario

      $053 AJS 28052014 CNT-OC-14044, Modifico la funcion ReembolsarTicket para incluir el control de periodo ICD

      $054 AJS 28052014 CNT-OC-14044, Modifico la funcion Recalculo_Costes para incluir el control de periodo ICD

      $055 MNC 30062014 CNT-OC-13026, creo funcion SeleccionTTOO copiada de SeleccionRepresentantes

      $056 ARM 21072014 CNT-OC-14049, modificaci¢n de reembolsos totales y parciales de tickets

      $057 AJS 29072014 He tenido que pasar la funcion SeleccionTTOO al formulario

      $058 AJS 07082014 Modifico la fecha reembolso para que solo sea Date

      $059 AJS 07082014 Modifico la funcion ReembolsarTicket para pasar a la tabla temporal el numero de personas de la reserva

      $060 ARM 26082014 CNT-CAR-14073 Se a¤ade el turno alos servicios

      $061 ARM 28082014 CNT-CAR-14073 Permiso para modificar reservas online

      $062 ARM 29082014 CNT_CAR_14073 Ofertas online

      $063 AJS 25092014 Modifico la funcion de crear servicio y asignar reserva a servicio para recalcular el servicio

      $064 AJS 28092014 Modifico la funcion Modificar_Reservas para corregir un error en el filtro de Touroperador

      $065 AJS 29092014 Modifico la funcion ReembolsarTicket para controlar si dan escape en la primera ventana y no continuar

      $066 AJS 30092014 Modifico la funcion CambiaFechaReserva para dejar cambiar aunque esta faturada

      $067 AJS 01102014 Modifico la funcion GetContratoTouroperador para que no de error si no encuentra contrato

      $068 AJS 04102014 Elimino la funcion Confirmacion proveedor porque ahora existe un formulario de edicion limitada de
                        reservas liquidadas

      $069 AJS 05102014 Modifico la funcion GetContratoTouroperador para trabajar en funcion de un parametro

      $070 AJS 10102014 Rellenar la fecha de reembolso en la tabla auxiliar de cobros

      $071 AJS 11102014 Modifico la funcion Desasigna_reserva para borrar el servicio si se queda sin reservas

      $072 AJS 16102014 Se elimina el campo Tipo facturacion de los contratos de compra excursiones

      $073 AJS 08122014 Modifico para que la fecha de reembolso sea la fecha de trabajo

      $074 AJS 09122014 Los reembolsos parciales de importe deben permitirse aunque el ticket este validado

      $075 AJS 10122014 Corregir error en Desasigna_reserva cuando es la ultima reserva del servicio

      $076 AJS 11122014 Rellenar la fecha de venta en los reembolsos

      $077 AJS 17122014 Cambio en reembolsos para tomar el importe reembolsado desde el detalle de los anteriores

      $078 AJS 17122014 No controlar los permisos de usuario cuando la modificacion la hace directamente la APP

      $079 AJS 23122014 Modificar la llamada a la funcion AbonarReserva para que se guarde el numero de abono en el
                        registro de reembolso

      $080 AJS 27012015 Traduccion TextConstants

      $081 AJS 29012015 Modifico la funcion ReembolsarTicket para recalcular correctamente los costes

      $082 AJS 12022015 Modifico la funcion Selecciona_Excursion para evitar que errores de calculo me dejes servicios en estado pendiente

      $083 ARM 30032015 CNT-OC-14053 Se utiliza el OnRun para abrir el form de entrada reservas a cr‚dito

      $084 ARM 22042015 CNT-OC-14098 Cambi de fechas de servicios

      $085 AJS 10062015 Borro la funcion Localizar_GV porque es obsoleta
    }
    END.
  }
}
