OBJECT Codeunit 7035324 Exportacion Facturas
{
  OBJECT-PROPERTIES
  {
    Date=06/10/10;
    Time=12:16:59;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            //Exportar(0,FALSE);
          END;

  }
  CODE
  {
    VAR
      Text50000@1103355000 : TextConst 'ESP=DBO.APUEXT';
      Text50001@1103355001 : TextConst 'ESP=DBO.TIVREP';
      Text50002@1103355002 : TextConst 'ESP=lsiuser.APUEXT';
      Text50003@1103355003 : TextConst 'ESP=lsiuser.TIVREP';
      Text50004@1103355004 : TextConst 'ESP=EmpCod,SerCod,Ivpany,IvpNro,IvpOrdOrg,IvpOrdNro';
      Text50005@1103355005 : TextConst 'ESP=NAV';
      Text50006@1103355006 : TextConst 'ESP=INSERT INTO %1 (%2) VALUES(%3)';
      Text50007@1103355007 : TextConst 'ESP="IvpNro=%1 AND EmpCod=%4 AND Ivpany=%2 AND SerCod=%3"';
      Text50008@1103355008 : TextConst 'ESP=IvpFfr';
      Text50009@1103355009 : TextConst 'ESP=IvpNom';
      Text50010@1103355010 : TextConst 'ESP=IvpCif';
      Text50011@1103355011 : TextConst 'ESP=IvpMay';
      Text50012@1103355012 : TextConst 'ESP=IvpCue';
      Text50013@1103355013 : TextConst 'ESP=IvpMayCue';
      Text50014@1103355014 : TextConst 'ESP=UPDATE %1 SET %2 WHERE %3';
      Text50015@1103355015 : TextConst 'ESP=IvpBa1';
      Text50016@1103355016 : TextConst 'ESP=IvpPi1';
      Text50017@1103355017 : TextConst 'ESP=IvpIi1';
      Text50018@1103355018 : TextConst 'ESP=IvpPr1';
      Text50019@1103355019 : TextConst 'ESP=IvpIr1';
      Text50020@1103355020 : TextConst 'ESP=IvpBa2';
      Text50021@1103355021 : TextConst 'ESP=IvpPi2';
      Text50022@1103355022 : TextConst 'ESP=IvpIi2';
      Text50023@1103355023 : TextConst 'ESP=IvpPr2';
      Text50024@1103355024 : TextConst 'ESP=IvpIr2';
      Text50025@1103355025 : TextConst 'ESP=IvpBa3';
      Text50026@1103355026 : TextConst 'ESP=IvpPi3';
      Text50027@1103355027 : TextConst 'ESP=IvpIi3';
      Text50028@1103355028 : TextConst 'ESP=IvpPr3';
      Text50029@1103355029 : TextConst 'ESP=IvpIr3';
      Text50030@1103355030 : TextConst 'ESP=IvpBa4';
      Text50031@1103355031 : TextConst 'ESP=IvpPi4';
      Text50032@1103355032 : TextConst 'ESP=IvpIi4';
      Text50033@1103355033 : TextConst 'ESP=IvpPr4';
      Text50034@1103355034 : TextConst 'ESP=IvpIr4';
      Text50035@1103355035 : TextConst 'ESP=IvpTor';
      Text50036@1103355036 : TextConst 'ESP=IvpOrdOrg';
      Text50037@1103355037 : TextConst 'ESP=IvpOrdNro';
      Text50038@1103355038 : TextConst 'ESP=EmpCod,TraCla,TraArcNro,TraOrdOrg';
      Text50039@1103355039 : TextConst 'ESP=TraAsiFec';
      Text50040@1103355040 : TextConst 'ESP=TraTdiCod';
      Text50041@1103355041 : TextConst 'ESP=TraAsiNro';
      Text50042@1103355042 : TextConst 'ESP=TraMayCod';
      Text50043@1103355043 : TextConst 'ESP=TraCueNro';
      Text50044@1103355044 : TextConst 'ESP=TraImpDeb';
      Text50045@1103355045 : TextConst 'ESP=TraImpHab';
      Text50046@1103355046 : TextConst 'ESP=TraCcoCod';
      Text50047@1103355047 : TextConst 'ESP=TraConDes';
      Text50048@1103355048 : TextConst 'ESP=%1Fact:%2%1';
      Text50049@1103355049 : TextConst 'ESP=TraSerCod';
      Text50050@1103355050 : TextConst 'ESP=TraDocNro';
      Text50051@1103355051 : TextConst 'ESP=TraFecDoc';
      Text50052@1103355052 : TextConst 'ESP=TraFecVto';
      Text50053@1103355053 : TextConst 'ESP=TraSucCod';
      Text50054@1103355054 : TextConst 'ESP=TraDepCod';
      Text50055@1103355055 : TextConst 'ESP=TraArcNro';
      Text50056@1103355056 : TextConst 'ESP=TraOrdOrg';
      Text50057@1103355057 : TextConst 'ESP=TraOrdNro';
      Text50058@1103355058 : TextConst 'ESP="UPDATE %1 SET %2 WHERE TraCla=%3 AND EmpCod=%4%5%4"';
      Text50059@1103355059 : TextConst 'ESP="SELECT * FROM %1 WHERE EmpCod=%2 ORDER BY TraCla"';
      Text50060@1103355060 : TextConst 'ESP=TraCla';
      Text50061@1103355061 : TextConst 'ESP="DELETE FROM %1 WHERE TraArcNro=%2 AND TraOrdOrg=%3NAV%3 AND EmpCod=%4"';
      Text50062@1103355062 : TextConst 'ESP="DELETE FROM %1 WHERE IvpOrdNro=%2 AND IvpOrdOrg=%3NAV%3 AND EmpCod=%4"';
      Text50063@1103355063 : TextConst 'ESP="SELECT * FROM %1 WHERE TraArcNro=%2 AND TraOrdOrg=%3NAV%3 AND EmpCod=%4 AND Traspasado=TRUE"';
      Text50064@1103355064 : TextConst 'ESP=<SIGN><Integer>';
      Text50065@1103355065 : TextConst 'ESP=<Decimals>';
      Text50066@1103355066 : TextConst 'ESP=<Month,2>-<Day,2>-<Year,2>';
      Text50067@1103355067 : TextConst 'ESP=<Day,2>/<Month,2>/<Year,2>';
      Text000@1100244017 : TextConst 'ESP=.TXT';
      Text001@1100244018 : TextConst 'ESP=P';
      Text002@1100244019 : TextConst 'ESP=EXTRA';
      Text003@1100244020 : TextConst 'ESP=SUPLEMENTO';
      Text004@1100244021 : TextConst 'ESP=MALETAS';
      Text005@1100244022 : TextConst 'ESP=+1M-1D';
      Text006@1100244023 : TextConst 'ESP=<integer>';
      rPar@1100244024 : Record 7010311;
      rParUEX@1100244000 : Record 7035332;
      Text0001@1100244001 : TextConst 'ESP="¨Desea Realmente Comenzar el proceso de exportaci¢n? "';
      Text0002@1100244002 : TextConst 'ESP=Fecha Desde no puede ser Superior a Fecha Hasta';
      rParTRN@1100244027 : Record 7010433;
      wArchivo@1100244003 : File;
      Text0003@1100244004 : TextConst 'ESP=Ya existe el archivo %1, ¨Desea sobreescribirlo?';
      Text0004@1100244005 : TextConst 'ESP=No pudo crearse el archivo %1';
      Text0005@1100244006 : TextConst 'ESP=El c¢digo de cliente de exportaci¢n (Cliente/TTOO Cliente facturaci¢n) No puede tener m s de 7 caracteres';
      cFunUex@1100244007 : Codeunit 7035320;
      Text0006@1100244008 : TextConst 'ESP=
    ';
      Text0007@1100244009 : TextConst 'ESP=No se encontro ning£na factura a traspasar';
      Text0008@1100244010 : TextConst 'ESP=Exportaci¢n completada';
      wFinestra@1100244011 : Dialog;
      Text0009@1100244012 : TextConst 'ESP="Procesando exportaci¢n  "';
      Text0010@1100244013 : TextConst 'ESP=El c¢digo de Cliente %1 tiene m s de 7 car cteres';
      Text0011@1100244014 : TextConst 'ESP=Este proceso grabar  TODAS las facturas entre las fechas se¤aladas, incluso las que ya habian sido exportadas.\¨Desea Continuar?';
      Text0012@1100244015 : TextConst 'ESP=No pueden introducirse fechas posteriores a hoy';
      Text0013@1100244016 : TextConst 'ESP=El Codigo tiene m s de %1 caracteres';
      connect@1100244026 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Connection";
      connectC@1100244033 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Connection";
      RecordSet@1100244025 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000535-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Recordset";
      Text0014@1100244028 : TextConst 'ESP="Provider=SQLOLEDB;Data Source=%1;Initial Catalog=%2;Integrated Security=SSPI;"';
      Text0015@1100244031 : TextConst 'ESP="No se encuentra la conversi¢n exportaci¢n para el codigo %1 Tipo= %2"';
      Text0016@1100244032 : TextConst 'ESP="Provider=SQLOLEDB;Data Source=%1;Initial Catalog=%2;"';
      Text0017@1103350000 : TextConst 'ESP=El CIF de la factura %1 tiene una longitud superior a 15 caracteres';
      Text0018@1100253000 : TextConst 'ESP=Ya existen movimientos contabilizados de la importaci¢n %1.\Consulte con su proveedor';
      TxtNombreTabla1@1100244029 : TextConst;
      wNomTabla@1100244030 : ARRAY [3] OF Text[50];
      wCodSerFact@1100244034 : Code[2];

    PROCEDURE Exportar@1100244000(pwNo@1100244001 : Integer;pwRehacer@1100244000 : Boolean);
    BEGIN
      // Exportar
      // Direccion al exportaci¢n seg£n la empresa real
      rPar.GET;

      CASE rPar."Empresa Real" OF
        rPar."Empresa Real"::UEX: ExportarUEX(pwNo,pwRehacer);
        rPar."Empresa Real"::TRN: ExportarTRN(pwNo,pwRehacer);
      END;
    END;

    PROCEDURE ExportarUEX@4(pwNo@1100244000 : Integer;pwRehacer@1100244001 : Boolean);
    VAR
      lrHist@1100244002 : Record 7035353;
      lfExpt@1100244003 : Form 7035376;
      lrCabVent@1100244004 : Record 36;
      lrLinPref@1103355002 : Record 7010417;
      lrClientTTOO@1100244006 : Record 7010313;
      lrCodServ@1100244007 : Record 7010320;
      lrCI@1100244009 : Record 7010414;
      lrParte@1100244010 : Record 7010360;
      lrTTOO@1100244011 : Record 7010312;
      lrPref@1103355001 : Record 7010415;
      lwTotal@1100244012 : Integer;
      lwCont@1100244013 : Integer;
      lwNumLinea@1100244022 : Integer;
      lwNomArch@1100244014 : Text[150];
      lwText@1100244015 : Text[30];
      lwCod@1100244016 : Code[20];
      lwNArc@1100244017 : Text[30];
      lwOk@1100244018 : Boolean;
      lwEspropio@1100244019 : Boolean;
      lwCliente@1100244020 : Code[7];
      lwDescripSer@1100244021 : Text[50];
      lwBol@1103350000 : Boolean;
      lwInt@1103350001 : Integer;
      lwOpt@1103350002 : Option;
      lwCode@1103350003 : Code[20];
      lwImp@1103355000 : Decimal;
    BEGIN
      // ExportarUEX    ULTRAMAR EXPRES
      // Comienza el proceso de exportaci¢n de factuaci¢n
      // pwNo Es el numero de exportaci¢n que se quiere reexportar. Si est  a 0  se crea una expotaci¢n nueva
      // pwRehacer Indica si debe rehacerse la exportaci¢n por fechas aunque las facturas ya estuviesen exportadas


      { { Funcion completamente obsoleta }

      // JPT 16/08/06 Ahora las lineas las cojemos de la prefactura ya que necesitamos de informaci¢n
      // que ya no est  en las lineas de factura Navision

      CLEAR(lrHist);
      CLEAR(lfExpt);
      IF pwNo <> 0 THEN BEGIN
         lrHist.GET(pwNo, lrHist."Tipo Exportacion"::Facturas);
         lfExpt.SetDatos(lrHist."Fecha Desde",lrHist."Fecha Hasta",lrHist."N§",0,0,FALSE,'',FALSE);
         lfExpt.Editar(FALSE);
      END
      ELSE
        lfExpt.Editar(TRUE);

      // Ense¤amos el formulario por primera vez para introducir fechas
      lfExpt.LOOKUPMODE(TRUE);

      IF NOT (lfExpt.RUNMODAL= ACTION::OK) THEN
        EXIT;

      IF pwRehacer THEN
        lwOk := CONFIRM(Text0011)
      ELSE
        lwOk := CONFIRM(Text0001);

      IF NOT lwOk THEN
        EXIT;
      // lwCode y lwBol no sirve para nada, sol es por compatibilidad funci¢n
      lfExpt.GetDatos(lrHist."Fecha Desde",lrHist."Fecha Hasta",lwOpt,lwBol,lwCode,lwBol);

      // Comprobamos fechas
      lrHist.TESTFIELD("Fecha Desde");
      lrHist.TESTFIELD("Fecha Hasta");
      IF lrHist."Fecha Hasta" < lrHist."Fecha Desde" THEN
        ERROR(Text0002);

      IF lrHist."Fecha Hasta" > TODAY THEN
        ERROR(Text0012);

      // Nos aseguramos que los parametros estn bien rellenados
      "Asegura Parametros";

      IF rParUEX."Ruta de Fichero"[STRLEN(rParUEX."Ruta de Fichero")] <>'\' THEN
        rParUEX."Ruta de Fichero" := rParUEX."Ruta de Fichero" +'\';

      lwNArc := Montafecha(TODAY) + Text000;
      lwNomArch := rParUEX."Ruta de Fichero" + lwNArc;

      wArchivo.QUERYREPLACE(TRUE);

      CLEAR(lwTotal);
      CLEAR(lwCont);
      lrCabVent.RESET;
      lrCabVent.SETRANGE("Posting Date",lrHist."Fecha Desde",lrHist."Fecha Hasta");
      IF NOT pwRehacer THEN
        lrCabVent.SETRANGE("Num Traspaso",lrHist."N§");
      IF lrCabVent.FINDSET(TRUE) THEN BEGIN
        IF pwNo = 0 THEN BEGIN
          lrHist.INSERT(TRUE);
        END;
        IF NOT wArchivo.CREATE(lwNomArch) THEN
          ERROR(Text0004,lwNomArch);
        lwTotal := lrCabVent.COUNTAPPROX;
        wFinestra.OPEN(Text0009 + lwNArc + ' @1@@@@@@@@@@@@@@');
        REPEAT
          // 16/08/06 Encontramos la prefactura
          CLEAR(lrPref);
          lrPref.SETCURRENTKEY("N§ Factura","Tipo Documento");
          lrPref.SETRANGE("N§ Factura"    , lrCabVent."No.");
          lrPref.SETRANGE("Tipo Documento", lrCabVent."Document Type");
          lrPref.FINDFIRST;


          CLEAR(lrParte);
          lwOk := TRUE;
          // No se exportaran las facturas provinientes de Autofactura.  Segun T de Juan  14/11/03
          // Para ello utilizamos el campo Traspasado de la Factura
          lwOk := NOT lrCabVent.Traspasado;

          IF lwOk THEN BEGIN
            // Para Rellenar el cliente juntamos el proveedor con el No cliente facturacion
            CLEAR(lwCliente);
            lrCI.RESET;
            lrCI.INIT;
            lrCI.SETCURRENTKEY("N§ Factura");
            lrCI.SETRANGE("N§ Factura", lrCabVent."No.");
            IF lrCI.FINDFIRST THEN BEGIN
              IF lrClientTTOO.GET(lrCI.Cliente, lrCI.Touroperador) THEN BEGIN
                lrTTOO.GET(lrClientTTOO.TTOO);
                lrTTOO.TESTFIELD("Codigo Contable");
                IF STRLEN(lrTTOO."Codigo Contable") > 2 THEN
                  lrTTOO.FIELDERROR("Codigo Contable",STRSUBSTNO(Text0013,2));
                lrClientTTOO.TESTFIELD("Cliente facturacion");
                IF STRLEN(lrClientTTOO."Cliente facturacion") > 5 THEN
                  lrClientTTOO.FIELDERROR("Cliente facturacion",STRSUBSTNO(Text0013,5));

                lwCliente:= lrTTOO."Codigo Contable" + lrClientTTOO."Cliente facturacion";
              END;
            END;

            IF STRLEN(lrCabVent."Bill-to Customer No.") > 7 THEN
              ERROR(Text0010,lrCabVent."Bill-to Customer No.");

            lrLinPref.SETRANGE("N§ Prefactura"   , lrPref."N§ Prefactura");

            // AJS 28.01.2004
            // Solo se exportan las lineas con importe
            lrLinPref.SETFILTER("Importe sin impuestos", '<>%1', 0);
            IF lrLinPref.FINDSET THEN BEGIN

              // AJS 28.01.2004
              // Las lineas de factura se numeran en el mismo proceso porque al tomar solo 5 caracteres la numeracion
              // de navision de 10000 en 10000 les da problemas
              lwNumLinea := 0;
              REPEAT
                Escribe(wArchivo,rParUEX."Origen Facturas",10);  // Origen
                Escribe(wArchivo,Montafecha(lrCabVent."Posting Date"),8); // Fecha Contable
                Escribe(wArchivo,BuscaAsientoControl,7);  // N§ Asiento de control
                Escribe(wArchivo,rParUEX."Tipo Factura",1); // Tipo Factura
                Escribe(wArchivo,lrCabVent."No.",11);        // N§ Factura
                Escribe(wArchivo,rParUEX."N§ Oficina",5);   // N§ Oficina
                Escribe(wArchivo,Text001,1);                    // Area Gestion Oficina
                Escribe(wArchivo,rParUEX."N§ Oficina",5);   // N§ Oficina Venta
                Escribe(wArchivo,Text001,1);                    // Area Gestion Oficina Venta

                Escribe(wArchivo, Rellena(lwCliente,7,' ', 0),7);  // Cliente

                // AJS 28.01.2004
                // Numeracion de las lineas
                lwNumLinea += 1;
                Escribe(wArchivo, Rellena(FORMAT(lwNumLinea), 5, '0', 0), 5);       // N§ de Linea
                // Para encontrar el producto debemos encontrar el codigo de servicio, a travs de l
                // el tipo de servicio y a traves de el producto
                CLEAR(lrCovProd);
                IF lrCodServ.GET(lrLinPref."Codigo Servicio") THEN BEGIN
                  lrCovProd.GET(lrCodServ."Tipo servicio" , lrCabVent."Bill-to Customer No.");
                END;
                // Tambin buscamos si el servicio es propio o no
                lwEspropio:=TRUE;
                IF lrParte.GET(lrLinPref.Parte) THEN
                  lwEspropio := lrParte.Proveedor ='';
                IF lwEspropio THEN
                  Escribe(wArchivo, lrCovProd."Producto Oracle Propio", 4)  // Producto
                ELSE
                  Escribe(wArchivo, lrCovProd."Producto Oracle Subcontratado", 4);  // Producto
                Escribe(wArchivo,'1',1);   // Extensi¢n Producto
                Escribe(wArchivo,'',7);   // Expediente (Blancos)

                // Se crea la descripcion
                lrCodServ.RESET;
                IF lrCodServ.GET(lrLinPref."Codigo Servicio") THEN
                  lwDescripSer := lrCodServ.Descripcion
                ELSE
                  CLEAR(lwDescripSer);

                lwDescripSer += lrLinPref.Descripcion;

                Escribe(wArchivo,lwDescripSer,50);  // Concepto
                Escribe(wArchivo,'001',3);  // Cantidad
                Escribe(wArchivo,'',10); // Unidad Medida
                // Escribe(wArchivo,FormatoImporte(lrLinVent."VAT Base Amount"),13); // Importe Unitario con el signo al final
                // Lo cambio porque le estaba saliendeo a 0
                // JPT 04/08/06 Pues... lo volvemos a cambiar otra vez
                //Escribe(wArchivo,FormatoImporte(lrLinVent."Importe Impresion"),13); // Importe Unitario con el signo al final
                CLEAR(lwImp);
                lwImp := lrLinPref."Importe sin impuestos";
                Escribe(wArchivo,FormatoImporte(lwImp),13); // Importe Unitario con el signo al final

                Escribe(wArchivo,'23',2); // Divisa, a pi¤on Euros
                Escribe(wArchivo,rParUEX.FormatoCambioUnitario , 8);   // Cambio unitario
                Escribe(wArchivo,Montafecha(lrCabVent."Posting Date"),8); // Fecha Factura
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo, rParUEX.Organizaci¢n,2); // Organizaci¢n
                Escribe(wArchivo,'',1);  // Estado Registro
                Escribe(wArchivo,'',15); // Codigo Error
                Escribe(wArchivo, Montafecha(lrCabVent."Posting Date"),8); // Fecha Factura Integraci¢n
                Escribe(wArchivo,' ',10); // Integraci¢n Oracle
                Escribe(wArchivo, Text0006,2); // Salto de linea
              UNTIL lrLinPref.NEXT=0;
            END;
            lrCabVent."Num Traspaso" := lrHist."N§";
            lrCabVent.MODIFY;
          END;
          lwCont +=1;
          wFinestra.UPDATE(1,ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrCabVent.NEXT=0;
        wFinestra.CLOSE;
        wArchivo.CLOSE;
        MESSAGE(Text0008);
      END ELSE
        ERROR(Text0007);

      {fin funcion obsoleta} }
    END;

    PROCEDURE ExportarUEX_Anterior@1103355000(pwNo@1100244000 : Integer;pwRehacer@1100244001 : Boolean);
    VAR
      lrHist@1100244002 : Record 7035353;
      lfExpt@1100244003 : Form 7035376;
      lrCabVent@1100244004 : Record 36;
      lrLinVent@1100244005 : Record 37;
      lrClientTTOO@1100244006 : Record 7010313;
      lrCodServ@1100244007 : Record 7010320;
      lrCI@1100244009 : Record 7010414;
      lrParte@1100244010 : Record 7010360;
      lrTTOO@1100244011 : Record 7010312;
      lwTotal@1100244012 : Integer;
      lwCont@1100244013 : Integer;
      lwNumLinea@1100244022 : Integer;
      lwNomArch@1100244014 : Text[150];
      lwText@1100244015 : Text[30];
      lwCod@1100244016 : Code[20];
      lwNArc@1100244017 : Text[30];
      lwOk@1100244018 : Boolean;
      lwEspropio@1100244019 : Boolean;
      lwCliente@1100244020 : Code[7];
      lwDescripSer@1100244021 : Text[50];
      lwBol@1103350000 : Boolean;
      lwInt@1103350001 : Integer;
      lwOpt@1103350002 : Option;
      lwCode@1103350003 : Code[20];
      lwImp@1103355000 : Decimal;
    BEGIN
      // ExportarUEX_Anterior    ULTRAMAR EXPRES
      // OJO NO SE UTILIZA. SE GUARDA POR SEGURIDAD- JPT 16/08/06
      //
      // Comienza el proceso de exportaci¢n de factuaci¢n
      // pwNo Es el numero de exportaci¢n que se quiere reexportar. Si est  a 0  se crea una expotaci¢n nueva
      // pwRehacer Indica si debe rehacerse la exportaci¢n por fechas aunque las facturas ya estuviesen exportadas

      { {funcion obsoleta}

      CLEAR(lrHist);
      CLEAR(lfExpt);
      IF pwNo <> 0 THEN BEGIN
         lrHist.GET(pwNo, lrHist."Tipo Exportacion"::Facturas);
         lfExpt.SetDatos(lrHist."Fecha Desde",lrHist."Fecha Hasta",lrHist."N§",0,0,FALSE,'',FALSE);
         lfExpt.Editar(FALSE);
      END
      ELSE
        lfExpt.Editar(TRUE);

      // Ense¤amos el formulario por primera vez para introducir fechas
      lfExpt.LOOKUPMODE(TRUE);

      IF NOT (lfExpt.RUNMODAL= ACTION::OK) THEN
        EXIT;

      IF pwRehacer THEN
        lwOk := CONFIRM(Text0011)
      ELSE
        lwOk := CONFIRM(Text0001);

      IF NOT lwOk THEN
        EXIT;
      // lwCode y lwBol no sirve para nada, sol es por compatibilidad funci¢n
      lfExpt.GetDatos(lrHist."Fecha Desde",lrHist."Fecha Hasta",lwOpt,lwBol,lwCode,lwBol);

      // Comprobamos fechas
      lrHist.TESTFIELD("Fecha Desde");
      lrHist.TESTFIELD("Fecha Hasta");
      IF lrHist."Fecha Hasta" < lrHist."Fecha Desde" THEN
        ERROR(Text0002);

      IF lrHist."Fecha Hasta" > TODAY THEN
        ERROR(Text0012);

      // Nos aseguramos que los parametros estn bien rellenados
      "Asegura Parametros";

      IF rParUEX."Ruta de Fichero"[STRLEN(rParUEX."Ruta de Fichero")] <>'\' THEN
        rParUEX."Ruta de Fichero" := rParUEX."Ruta de Fichero" +'\';

      lwNArc := Montafecha(TODAY) + Text000;
      lwNomArch := rParUEX."Ruta de Fichero" + lwNArc;

      wArchivo.QUERYREPLACE(TRUE);

      CLEAR(lwTotal);
      CLEAR(lwCont);
      lrLinVent.RESET;
      lrCabVent.RESET;
      lrCabVent.SETRANGE("Posting Date",lrHist."Fecha Desde",lrHist."Fecha Hasta");
      IF NOT pwRehacer THEN
        lrCabVent.SETRANGE("Num Traspaso",lrHist."N§");
      IF lrCabVent.FINDSET(TRUE) THEN BEGIN
        IF pwNo = 0 THEN BEGIN
          lrHist.INSERT(TRUE);
        END;
        IF NOT wArchivo.CREATE(lwNomArch) THEN
          ERROR(Text0004,lwNomArch);
        lwTotal := lrCabVent.COUNTAPPROX;
        wFinestra.OPEN(Text0009 + lwNArc + ' @1@@@@@@@@@@@@@@');
        REPEAT
          CLEAR(lrParte);
          lwOk := TRUE;
          // No se exportaran las facturas provinientes de Autofactura.  Segun T de Juan  14/11/03
          // Para ello utilizamos el campo Traspasado de la Factura
          lwOk := NOT lrCabVent.Traspasado;

          IF lwOk THEN BEGIN
            // Para Rellenar el cliente juntamos el proveedor con el No cliente facturacion
            CLEAR(lwCliente);
            lrCI.RESET;
            lrCI.INIT;
            lrCI.SETCURRENTKEY("N§ Factura");
            lrCI.SETRANGE("N§ Factura", lrCabVent."No.");
            IF lrCI.FINDFIRST THEN BEGIN
              IF lrClientTTOO.GET(lrCI.Cliente, lrCI.Touroperador) THEN BEGIN
                lrTTOO.GET(lrClientTTOO.TTOO);
                lrTTOO.TESTFIELD("Codigo Contable");
                IF STRLEN(lrTTOO."Codigo Contable") > 2 THEN
                  lrTTOO.FIELDERROR("Codigo Contable",STRSUBSTNO(Text0013,2));
                lrClientTTOO.TESTFIELD("Cliente facturacion");
                IF STRLEN(lrClientTTOO."Cliente facturacion") > 5 THEN
                  lrClientTTOO.FIELDERROR("Cliente facturacion",STRSUBSTNO(Text0013,5));

                lwCliente:= lrTTOO."Codigo Contable" + lrClientTTOO."Cliente facturacion";
              END;
            END;

            IF STRLEN(lrCabVent."Bill-to Customer No.") > 7 THEN
              ERROR(Text0010,lrCabVent."Bill-to Customer No.");
            lrLinVent.SETRANGE("Document Type" , lrCabVent."Document Type");
            lrLinVent.SETRANGE("Document No."   , lrCabVent."No.");

            // AJS 28.01.2004
            // Solo se exportan las lineas con importe
            lrLinVent.SETFILTER("Unit Price", '<>%1', 0);
            IF lrLinVent.FINDSET THEN BEGIN

              // AJS 28.01.2004
              // Las lineas de factura se numeran en el mismo proceso porque al tomar solo 5 caracteres la numeracion
              // de navision de 10000 en 10000 les da problemas
              lwNumLinea := 0;
              REPEAT
                Escribe(wArchivo,rParUEX."Origen Facturas",10);  // Origen
                Escribe(wArchivo,Montafecha(lrCabVent."Posting Date"),8); // Fecha Contable
                Escribe(wArchivo,BuscaAsientoControl,7);  // N§ Asiento de control
                Escribe(wArchivo,rParUEX."Tipo Factura",1); // Tipo Factura
                Escribe(wArchivo,lrCabVent."No.",11);        // N§ Factura
                Escribe(wArchivo,rParUEX."N§ Oficina",5);   // N§ Oficina
                Escribe(wArchivo,Text001,1);                    // Area Gestion Oficina
                Escribe(wArchivo,rParUEX."N§ Oficina",5);   // N§ Oficina Venta
                Escribe(wArchivo,Text001,1);                    // Area Gestion Oficina Venta

                Escribe(wArchivo, Rellena(lwCliente,7,' ', 0),7);  // Cliente

                // AJS 28.01.2004
                // Numeracion de las lineas
                lwNumLinea += 1;
                Escribe(wArchivo, Rellena(FORMAT(lwNumLinea), 5, '0', 0), 5);       // N§ de Linea
                // Para encontrar el producto debemos encontrar el codigo de servicio, a travs de l
                // el tipo de servicio y a traves de el producto
                CLEAR(lrCovProd);
                IF lrCodServ.GET(lrLinVent.Servicio) THEN BEGIN
                  lrCovProd.GET(lrCodServ."Tipo servicio" , lrLinVent."Bill-to Customer No.");
                END;
                // Tambin buscamos si el servicio es propio o no
                lwEspropio:=TRUE;
                IF lrParte.GET(lrLinVent."N§ Parte") THEN
                  lwEspropio := lrParte.Proveedor ='';
                IF lwEspropio THEN
                  Escribe(wArchivo, lrCovProd."Producto Oracle Propio", 4)  // Producto
                ELSE
                  Escribe(wArchivo, lrCovProd."Producto Oracle Subcontratado", 4);  // Producto
                Escribe(wArchivo,'1',1);   // Extensi¢n Producto
                Escribe(wArchivo,'',7);   // Expediente (Blancos)

                // Se crea la descripcion
                lrCodServ.RESET;
                IF lrCodServ.GET(lrLinVent.Servicio) THEN
                  lwDescripSer := lrCodServ.Descripcion
                ELSE
                  CLEAR(lwDescripSer);
                // JPT 04/08/06.. Ahora "Description 2" viene en blanco por lo que ponemos Description (aunque no sea muy descriptiva)
                {
                IF  lrLinVent."Description 2" IN [Text002,Text003,Text004] THEN
                  lwDescripSer += '  (' + lrLinVent."Description 2" + ')'
                ELSE
                  lwDescripSer += '  (' +  lrLinVent.Zona + ')';
                }
                lwDescripSer += lrLinVent.Description;

                Escribe(wArchivo,lwDescripSer,50);  // Concepto
                Escribe(wArchivo,'001',3);  // Cantidad
                Escribe(wArchivo,'',10); // Unidad Medida
                // Escribe(wArchivo,FormatoImporte(lrLinVent."VAT Base Amount"),13); // Importe Unitario con el signo al final
                // Lo cambio porque le estaba saliendeo a 0
                // JPT 04/08/06 Pues... lo volvemos a cambiar otra vez
                //Escribe(wArchivo,FormatoImporte(lrLinVent."Importe Impresion"),13); // Importe Unitario con el signo al final
                CLEAR(lwImp);
                lwImp := lrLinVent."Unit Price" * lrLinVent.Quantity;
                IF lrCabVent."Prices Including VAT" THEN // Si el precio incluye IVA se lo quitamos
                  lwImp := ROUND (lwImp / ((100 + lrLinVent."VAT %") / 100));
                Escribe(wArchivo,FormatoImporte(lwImp),13); // Importe Unitario con el signo al final

                Escribe(wArchivo,'23',2); // Divisa, a pi¤on Euros
                Escribe(wArchivo,rParUEX.FormatoCambioUnitario , 8);   // Cambio unitario
                Escribe(wArchivo,Montafecha(lrCabVent."Posting Date"),8); // Fecha Factura
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo,'',30); // Blancos
                Escribe(wArchivo, rParUEX.Organizaci¢n,2); // Organizaci¢n
                Escribe(wArchivo,'',1);  // Estado Registro
                Escribe(wArchivo,'',15); // Codigo Error
                Escribe(wArchivo, Montafecha(lrCabVent."Posting Date"),8); // Fecha Factura Integraci¢n
                Escribe(wArchivo,' ',10); // Integraci¢n Oracle
                Escribe(wArchivo, Text0006,2); // Salto de linea
              UNTIL lrLinVent.NEXT=0;
            END;
            lrCabVent."Num Traspaso" := lrHist."N§";
            lrCabVent.MODIFY;
          END;
          lwCont +=1;
          wFinestra.UPDATE(1,ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrCabVent.NEXT=0;
        wFinestra.CLOSE;
        wArchivo.CLOSE;
        MESSAGE(Text0008);
      END ELSE
        ERROR(Text0007);

      {fin funcion obsoleta} }
    END;

    PROCEDURE ExportarTRN@1100244001(pwNo@1100244000 : Integer;pwRehacer@1100244001 : Boolean);
    VAR
      lrHist@1100244002 : Record 7035353;
      lfExpt@1100244003 : Form 7035376;
      lrCabVent@1100244004 : Record 36;
      lrLinVent@1100244005 : Record 37;
      lrCodServ@1100244007 : Record 7010320;
      lrParte@1100244010 : Record 7010360;
      lrTTOO@1100244011 : Record 7010312;
      lrConfVC@1100244026 : Record 311;
      lrNSerie@1100244025 : Record 309;
      lwTotal@1100244012 : Integer;
      lwCont@1100244013 : Integer;
      lwNumLinea@1100244022 : Integer;
      lwText@1100244015 : Text[30];
      lwCod@1100244016 : Code[20];
      lwNArc@1100244017 : Text[30];
      lwOk@1100244018 : Boolean;
      lwEspropio@1100244019 : Boolean;
      lwCliente@1100244020 : Code[7];
      lwDescripSer@1100244021 : Text[50];
      lwTexto@1100244006 : Text[1024];
      lwClave@1100244014 : Integer;
      lwClave2@1100244023 : Integer;
      lwEmp@1100244024 : Code[2];
      lwNoSerieIVA@1100244027 : Code[2];
      lwOpt@1103350000 : Option;
      lwBol@1103350001 : Boolean;
      lwCode@1103350002 : Code[20];
    BEGIN
      // ExportarTRN    TRANSUNION
      // Comienza el proceso de exportaci¢n de factuaci¢n
      // pwNo Es el numero de exportaci¢n que se quiere reexportar. Si est  a 0  se crea una expotaci¢n nueva
      // pwRehacer Indica si debe rehacerse la exportaci¢n por fechas aunque las facturas ya estuviesen exportadas
      // No exportamos a un archivo sino que lo grabamos directamente en la tabla SQL

      rParTRN.GET;
      lrHist.RESET;
      lrHist.INIT;
      CLEAR(lfExpt);
      // lwCode y lwBol no sirve para nada, sol es por compatibilidad funci¢n
      IF pwNo <> 0 THEN BEGIN
        lrHist.GET(pwNo, lrHist."Tipo Exportacion"::Facturas);
        lfExpt.SetDatos(lrHist."Fecha Desde",lrHist."Fecha Hasta",lrHist."N§",0,lwOpt,lwBol,lwCode,lwBol);
        lfExpt.Editar(FALSE);
      END
      ELSE
        lfExpt.Editar(TRUE);

      // Ense¤amos el formulario por primera vez para introducir fechas
      lfExpt.LOOKUPMODE(TRUE);

      IF NOT (lfExpt.RUNMODAL= ACTION::OK) THEN
        EXIT;

      IF pwRehacer THEN
        lwOk := CONFIRM(Text0011)
      ELSE
        lwOk := CONFIRM(Text0001);

      IF NOT lwOk THEN
        EXIT;

      lfExpt.GetDatos(lrHist."Fecha Desde",lrHist."Fecha Hasta",lwOpt,lwBol,lwCode,lwBol);

      // Comprobamos fechas
      lrHist.TESTFIELD("Fecha Desde");
      lrHist.TESTFIELD("Fecha Hasta");
      IF lrHist."Fecha Hasta" < lrHist."Fecha Desde" THEN
        ERROR(Text0002);

      IF lrHist."Fecha Hasta" > TODAY THEN
        ERROR(Text0012);

      // Comprobamos que los parametros est n bien rellenados
      rParTRN.TESTFIELD("Servidor Exportacion");
      rParTRN.TESTFIELD("BD Exportacion");
      rParTRN.TESTFIELD("BD Exportacion Cobros");
      rParTRN.TESTFIELD("Usuario Exportacion");
      rParTRN.TESTFIELD("Contrase¤a Exportacion");
      rParTRN.TESTFIELD("Cod Empresa Exp. Facturas");

      // Los nombres de las tablas se definen aqu¡
      CLEAR(wNomTabla);
      //wNomTabla[1]:= Text50000; // Pruebas en SGB
      //wNomTabla[2]:= Text50001; // Pruebas en SGB
      wNomTabla[1]:= Text50002; // En TRn
      wNomTabla[2]:= Text50003; // En TRn
      wNomTabla[3]:= Text50000; // En la Base de cobros

      // Buscamos los dos primeros digitos de la serie de factura - wCodFact
      CLEAR(wCodSerFact);
      lrConfVC.GET;
      lrConfVC.TESTFIELD("Invoice Nos.");
      lrNSerie.SETCURRENTKEY("Series Code","Starting Date","Starting No.");
      lrNSerie.ASCENDING(FALSE);
      lrNSerie.SETRANGE("Series Code" , lrConfVC."Invoice Nos.");
      lrNSerie.SETFILTER("Starting Date", '<=%1', TODAY);
      IF lrNSerie.FINDFIRST THEN
        wCodSerFact:= COPYSTR(lrNSerie."Starting No.",1,2);

      CLEAR(lwTotal);
      CLEAR(lwCont);
      lrLinVent.RESET;
      lrCabVent.RESET;
      lrCabVent.SETRANGE("Posting Date",lrHist."Fecha Desde",lrHist."Fecha Hasta");

      lrCabVent.SETFILTER("Document Type",'%1|%2',lrCabVent."Document Type"::Invoice,lrCabVent."Document Type"::"Credit Memo");
      IF NOT pwRehacer THEN BEGIN
        lrCabVent.SETRANGE("Num Traspaso",lrHist."N§");
        lrCabVent.SETRANGE(Traspasado,FALSE);
      END;

      IF lrCabVent.FINDSET THEN BEGIN
        CLEAR(connect);
        CLEAR(connectC);
        CREATE(connect);
        CREATE(connectC);
        CLEAR(RecordSet);
        CREATE(RecordSet);
        // Aqui se define el codigo de empresa que ser  fijo 50. Segun email J.Esteban 05/03/04
        // JPT 10/03/06 Dado la inclusi¢n de Regina parametrizamos este codigo
        lwEmp:= rParTRN."Cod Empresa Exp. Facturas";

        lwTexto :=STRSUBSTNO(Text0016,rParTRN."Servidor Exportacion",rParTRN."BD Exportacion");
        connect.Open(lwTexto,rParTRN."Usuario Exportacion",rParTRN."Contrase¤a Exportacion");

        // Cobros
        // connectC // Hace referencia a una segunda base de datos de cobros
        lwTexto :=STRSUBSTNO(Text0016,rParTRN."Servidor Exportacion",rParTRN."BD Exportacion Cobros");
        connectC.Open(lwTexto,rParTRN."Usuario Exportacion",rParTRN."Contrase¤a Exportacion");

        IF pwNo = 0 THEN
          lrHist.INSERT(TRUE);

        BorraAnts(lrHist."N§", lwEmp); // Borramos lineas con el mismo numero de importacion
        BuscaUltNos(connect,lwEmp,lwClave,wNomTabla[1]);
        BuscaUltNos(connectC,lwEmp,lwClave2,wNomTabla[3]); // Cobros

        lwTotal := lrCabVent.COUNTAPPROX;
        wFinestra.OPEN(Text0009 + lwNArc + ' @1@@@@@@@@@@@@@@');
        REPEAT
          lwCont +=1;

          // JPT 12/07/04 El numero de serie de factura sera blanco para todas las facturas genericas (serie fact ventas y cobros)
          // para todas las dem s se insertar  los dos primeros digitos del numero de factura (P.e. Autofacturas)
          CLEAR(lwNoSerieIVA);
          IF COPYSTR(lrCabVent."No.",1,2) <> wCodSerFact THEN
            lwNoSerieIVA := COPYSTR(lrCabVent."No.",1,2);
          GrabarFac2(lrCabVent,lrHist."N§",lwClave,lwClave2,lwCont,lwNoSerieIVA, lwEmp);

          wFinestra.UPDATE(1,ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrCabVent.NEXT=0;

        lrCabVent.MODIFYALL("Num Traspaso", lrHist."N§");
        lrCabVent.MODIFYALL(Traspasado,TRUE);

        wFinestra.CLOSE;
        MESSAGE(Text0008);

        connect.Close;
        connectC.Close;
      END ELSE
        ERROR(Text0007);
    END;

    PROCEDURE "Asegura Parametros"@1();
    BEGIN
      // Asegura Parametros

      // Cheque que la tabla de parametros est bien rellenada

      rParUEX.FINDFIRST;
      rParUEX.TESTFIELD("Origen Facturas");
      rParUEX.TESTFIELD("Tipo Factura");
      rParUEX.TESTFIELD("Extension del producto");
      rParUEX.TESTFIELD(Divisa);
      rParUEX.TESTFIELD("Cambio Unitario");
      rParUEX.TESTFIELD(Organizaci¢n);
      rParUEX.TESTFIELD("N§ Oficina");
      rParUEX.TESTFIELD("Ruta de Fichero");
    END;

    PROCEDURE Montafecha@2(pwFecha@1100244000 : Date) : Text[8];
    VAR
      lwTexto@1100244001 : Text[8];
      lwText2@1100244002 : Text[2];
    BEGIN
      // Montafecha
      // Devuelve la fecha en formato AAAAMMDD


      lwTexto := FORMAT(DATE2DMY(pwFecha,3));
      lwText2 := FORMAT(DATE2DMY(pwFecha,2));
      IF STRLEN(lwText2)=1 THEN
        lwText2 := '0' + lwText2;
      lwTexto := lwTexto + lwText2;

      lwText2 := FORMAT(DATE2DMY(pwFecha,1));
      IF STRLEN(lwText2)=1 THEN
        lwText2 := '0' + lwText2;
      lwTexto := lwTexto + lwText2;

      EXIT(lwTexto);
    END;

    PROCEDURE BuscaAsientoControl@11() : Code[7];
    VAR
      lrHist@1100244000 : Record 7035353;
      lwTexto@1100244001 : Text[7];
      lwText2@1100244002 : Text[10];
      lwCont@1100244003 : Integer;
      lwFecha1@1100244004 : Date;
      lwFecha2@1100244005 : Date;
    BEGIN
      // BuscaAsientoControl


      lwTexto := FORMAT(DATE2DMY(TODAY,3));
      lwText2 := FORMAT(DATE2DMY(TODAY,2));
      IF STRLEN(lwText2)=1 THEN
        lwText2 := '0' + lwText2;
      lwTexto := lwTexto + lwText2;

      // Ahora busca el numero de importaci¢n del mes

      //  Se busca el primer y el £ltimo dia del mes
      lwFecha1 := DMY2DATE(1,DATE2DMY(TODAY,2),DATE2DMY(TODAY,3));
      lwFecha2 := CALCDATE(Text005,lwFecha1);

      lrHist.RESET;
      lrHist.SETRANGE(Fecha,lwFecha1, lwFecha2);
      lwCont := lrHist.COUNT +1;
      IF lwCont > 9 THEN
        lwCont:= 0;
      lwTexto := lwTexto + FORMAT(lwCont);
      EXIT(lwTexto);
    END;

    PROCEDURE Escribe@3(VAR pwArchivo@1100244000 : File;pwTexto@1100244001 : Text[100];pwLargo@1100244002 : Integer);
    VAR
      lwC@1100244003 : Char;
      lwCont@1100244004 : Integer;
    BEGIN
      // Escribe
      // Escribe en el archivo indicado el texto pasado como parametro en los espacios indicados

      FOR lwCont:=1 TO pwLargo DO BEGIN
        IF lwCont <= STRLEN(pwTexto) THEN
          lwC := pwTexto[lwCont]
        ELSE
          lwC := ' ';
        pwArchivo.WRITE(lwC);
      END;
    END;

    PROCEDURE Rellena@6(pwTexto@1100244000 : Text[30];pwLargo@1100244001 : Integer;pwChar@1100244002 : Char;pwDonde@1100244003 : 'Delante,Detras') : Text[30];
    VAR
      lwCont@1100244004 : Integer;
    BEGIN
      // Rellena
      // Rellena el texto pasado como parametro con el caracter pwChar hasta completar pwLargo caracteres

      IF STRLEN(pwTexto) > pwLargo THEN
        pwTexto := COPYSTR(pwTexto ,1, pwLargo);

      WHILE STRLEN(pwTexto) < pwLargo DO
        CASE pwDonde OF
          0: pwTexto := FORMAT(pwChar) + pwTexto;
          1: pwTexto := pwTexto + FORMAT(pwChar) ;
        END;

      EXIT(pwTexto);
    END;

    PROCEDURE FormatoImporte@13(pwImp@1100244000 : Decimal) : Text[30];
    VAR
      lwTexto@1100244001 : Text[13];
      lwSigno@1100244002 : Text[1];
    BEGIN
      // FormatoImporte

      IF pwImp >= 0 THEN
        lwSigno :='+'
      ELSE
        lwSigno :='-';
      pwImp := ABS(ROUND(pwImp * 1000,1));

      lwTexto := Rellena(FORMAT(pwImp,0,Text006),12,'0',0) + lwSigno;
      EXIT(lwTexto)
    END;

    PROCEDURE GrabarFac2@1100244010(prCabVent@1100244000 : Record 36;pwNoImp@1100244003 : Integer;VAR pwClave@1100244001 : Integer;VAR pwClave2@1100244033 : Integer;pwNOrden@1100244009 : Integer;pwNoSerieIVA@1100244034 : Code[10];pwEmp@1100253000 : Code[2]);
    VAR
      lrGCClient@1100244006 : Record 92;
      lrTempIVA@1100244008 : TEMPORARY Record 290;
      lrConfIVA@1100244022 : Record 325;
      lrPrefact@1100244030 : Record 7010415;
      lwCta@1100244007 : Code[20];
      lwCtaClient@1100244029 : Code[20];
      lwTotal@1100244010 : Decimal;
      Tcms@1100244011 : TextConst 'ESP=''';
      lwTotalSin@1100244025 : Decimal;
      lwTotalIVA@1100244028 : Decimal;
      TempSalesLine@1100244012 : TEMPORARY Record 37;
      lrSalesLine@1100244014 : Record 37;
      TotalSalesLine@1100244016 : Record 37;
      TotalSalesLineLCY@1100244015 : Record 37;
      lcSalesPost@1100244013 : Codeunit 80;
      VATAmount@1100244018 : Decimal;
      VATAmountText@1100244017 : Text[30];
      ProfitLCY@1100244020 : Decimal;
      ProfitPct@1100244019 : Decimal;
      wlserCod@1100244023 : Text[30];
      wlCod@1100244024 : Code[10];
      wlNomCampos@1100244002 : Text[1024];
      wlValores@1100244004 : Text[1024];
      wlTexto@1100244005 : Text[1024];
      lwVal@1100244026 : Text[200];
      lwSing@1100244027 : Integer;
      lwNoFra@1100244021 : Text[7];
      lwA¤o@1100244031 : Text[10];
      lwFiltro@1100244032 : Text[1024];
      lwDummy@1103355000 : Decimal;
    BEGIN
      // GrabarFac2
      // TRN-SQL
      // Graba la factura pasada como parametro en la tabla SQl

      CLEAR(lrConfIVA);


      // JPT 05/11/04 Si el CIF es m s largo de 15 caracteres generamos un error aqu¡ ya que esta el la longitud en la tabla SQL
      IF STRLEN(prCabVent."VAT Registration No.") > 15 THEN
        ERROR(Text0017,prCabVent."No.");

      // Buscamos la cuenta del cliente
      prCabVent.TESTFIELD("Customer Posting Group");
      lrGCClient.GET(prCabVent."Customer Posting Group");
      lrGCClient.TESTFIELD("Receivables Account");
      lwCta := lrGCClient."Receivables Account";
      lwCtaClient := lwCta;

      // Buscamos el total IVA *****
      CLEAR(lrSalesLine);
      CLEAR(TotalSalesLine);
      CLEAR(TotalSalesLineLCY);
      CLEAR(lcSalesPost);

      lcSalesPost.GetSalesLines(prCabVent,TempSalesLine,0);
      CLEAR(lcSalesPost);
      // AJF 18/09/08 - Migracion 5.01
      // A¤ado parametro nuevo.
      lcSalesPost.SumSalesLinesTemp(
        prCabVent,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,lwDummy);

      lrSalesLine.CalcVATAmountLines(1,prCabVent,TempSalesLine,lrTempIVA);
      // Modificamos el temporal para que no separe el iva en negativo
      lrPrefact.AgrupaLin(lrTempIVA);
      lrTempIVA.MODIFYALL(Modified,FALSE);



      CASE prCabVent."Document Type" OF
        prCabVent."Document Type"::Invoice      : lwSing :=  1;
        prCabVent."Document Type"::"Credit Memo": lwSing := -1;
        ELSE lwSing:=1;
      END;

      // IVA *****************
      CLEAR(lwTotal);
      CLEAR(lwTotalSin);
      IF lrTempIVA.FINDSET THEN BEGIN
        REPEAT
          lwTotal    += lrTempIVA."Amount Including VAT+EC" * lwSing;
          // lwTotalSin += lrTempIVA."Line Amount" * lwSing;
          lwTotalSin += lrTempIVA."VAT+EC Base" * lwSing;
        UNTIL lrTempIVA.NEXT=0;
      END;

      // No se deja pasar facturas a 0
      IF lwTotal=0 THEN
        EXIT;

      InsertLinApuext(connect,prCabVent,pwNoImp,pwClave,pwNOrden,lwTotal,0,lwCta,wNomTabla[1], pwNoSerieIVA, pwEmp);
      // La misma linea viaja a cobros
      InsertLinApuext(connectC,prCabVent,pwNoImp,pwClave2,pwNOrden,lwTotal,0,lwCta,wNomTabla[3], pwNoSerieIVA, pwEmp);

      // Buscamos la Cta Contrapartida
      // rPar.TESTFIELD("Cuenta Ventas");
      lrGCClient.TESTFIELD("Service Charge Acc.");
      lwCta := lrGCClient."Service Charge Acc.";

      InsertLinApuext(connect,prCabVent,pwNoImp,pwClave,pwNOrden,0,lwTotalSin,lwCta,wNomTabla[1],pwNoSerieIVA, pwEmp);

      lrSalesLine.RESET;
      lrSalesLine.SETRANGE("Document Type", prCabVent."Document Type");
      lrSalesLine.SETRANGE("Document No." , prCabVent."No.");
      lrSalesLine.FINDFIRST;
      lrConfIVA.GET(lrSalesLine."VAT Bus. Posting Group",lrSalesLine."VAT Prod. Posting Group");
      lrConfIVA.TESTFIELD("Sales VAT Account");
      lwCta := lrConfIVA."Sales VAT Account";

      // IVA
      lwTotalIVA := lwTotal-lwTotalSin;
      IF lwTotalIVA<> 0 THEN
        InsertLinApuext(connect,prCabVent,pwNoImp,pwClave,pwNOrden,0,lwTotalIVA,lwCta,wNomTabla[1], pwNoSerieIVA, pwEmp);


      // TABLA DE IVA - TIVREP

      IF lrTempIVA.FINDFIRST THEN BEGIN
        // JPT 19/10/06 introucimos todos los campos identificativos para poder eliminar las lineas si ha ocurrido algun fallo
        lwNoFra     :=  FormatoFra(prCabVent."No.");
        wlNomCampos := Text50004;
        wlValores +=  pwEmp + ',';                  // EmpCod - Codigo Empresa
        wlserCod := STRSUBSTNO('%1%2%1',Tcms,pwNoSerieIVA);
        wlValores +=  wlserCod + ',';    // SerCod - Serie de IVA repercutido
        lwA¤o := FORMAT(DATE2DMY(prCabVent."Posting Date",3));
        wlValores += lwA¤o + ',';     // IvpAny - A¤o
        wlValores += lwNoFra + ',';
        wlValores += STRSUBSTNO('%1%2%1',Tcms,Text50005) + ','; //- Origen N§ Interno
        wlValores += FORMAT(pwNoImp); //- N§ Interno
                                                       // IvpNro - N§ Orden (No Fra)
        connect.Execute(STRSUBSTNO(Text50006,wNomTabla[2],wlNomCampos,wlValores));

        lwFiltro := STRSUBSTNO(Text50007,lwNoFra,lwA¤o,wlserCod, pwEmp);

        CLEAR(wlValores);
        wlValores +=  STRSUBSTNO('%1=%2,' , Text50008 , FormatoFecha(prCabVent."Posting Date"));   //- Fecha Factura
        lwVal := prCabVent."Sell-to Customer Name";
        IF lwVal='' THEN
          lwVal := prCabVent."Bill-to Customer No.";
        lwVal := DELCHR(lwVal,'=',Tcms);
        wlValores +=  STRSUBSTNO('%1=%2%3%2,' , Text50009 , Tcms ,lwVal);                 //- Nombre
        wlValores +=  STRSUBSTNO('%1=%2%3%2,' , Text50010 , Tcms, prCabVent."VAT Registration No."); // - C.I.F.

        // La cuenta no ser  la cuenta del iva si no del cliente (Javier 05/05/04)
        wlValores +=  STRSUBSTNO('%1=%2,' ,Text50011 , COPYSTR(lwCtaClient,1,4)); //- Mayor
        wlValores +=  STRSUBSTNO('%1=%2,' ,Text50012 , COPYSTR(lwCtaClient,4,STRLEN(lwCta))); //- Subcuenta
        wlValores +=  STRSUBSTNO('%1=%2' ,Text50013, lwCtaClient); //- Subcuenta
        wlTexto   := STRSUBSTNO(Text50014,wNomTabla[2],wlValores,lwFiltro);
        connect.Execute(wlTexto);
        CLEAR(wlValores);

        wlValores +=  STRSUBSTNO('%1=%2,' ,Text50015 ,FormatoDec(lrTempIVA."VAT+EC Base" * lwSing)); //- Base1
        wlValores +=  STRSUBSTNO('%1=%2,' ,Text50016 ,FormatoDec(lrTempIVA."VAT %")); //- Porcentaje1
        wlValores +=  STRSUBSTNO('%1=%2,' ,Text50017 ,FormatoDec(lrTempIVA."VAT Amount" * lwSing)); //- Importe IVA1
        wlValores +=  STRSUBSTNO('%1=%2,' ,Text50018 ,FormatoDec(lrTempIVA."EC %")); //- Porcentaje Recargo Equivalencia1
        wlValores +=  STRSUBSTNO('%1=%2' ,Text50019 ,FormatoDec(lrTempIVA."EC Amount" * lwSing)); //- Importe Recargo Equivalencia1
        wlTexto   := STRSUBSTNO(Text50014,wNomTabla[2],wlValores,lwFiltro);
        connect.Execute(wlTexto);
        CLEAR(wlValores);

        IF lrTempIVA.NEXT<>0 THEN BEGIN
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50020 ,FormatoDec(lrTempIVA."VAT+EC Base" * lwSing)); //- Base2
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50021 ,FormatoDec(lrTempIVA."VAT %")); //- Porcentaje2
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50022 ,FormatoDec(lrTempIVA."VAT Amount" * lwSing)); //- Importe IVA2
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50023 ,FormatoDec(lrTempIVA."EC %")); //- Porcentaje Recargo Equivalencia2
          wlValores +=  STRSUBSTNO('%1=%2' ,Text50024 ,FormatoDec(lrTempIVA."EC Amount" * lwSing)); //- Importe Recargo Equivalencia2
          wlTexto   := STRSUBSTNO(Text50014,wNomTabla[2],wlValores,lwFiltro);
          connect.Execute(wlTexto);
          CLEAR(wlValores);
        END;

        IF lrTempIVA.NEXT<>0 THEN BEGIN
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50025 ,FormatoDec(lrTempIVA."VAT+EC Base" * lwSing)); //- Base3
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50026 ,FormatoDec(lrTempIVA."VAT %")); //- Porcentaje3
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50027 ,FormatoDec(lrTempIVA."VAT Amount" * lwSing)); //- Importe IVA3
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50028 ,FormatoDec(lrTempIVA."EC %")); //- Porcentaje Recargo Equivalencia3
          wlValores +=  STRSUBSTNO('%1=%2' ,Text50029 ,FormatoDec(lrTempIVA."EC Amount" * lwSing)); //- Importe Recargo Equivalencia3
          wlTexto   := STRSUBSTNO(Text50014,wNomTabla[2],wlValores,lwFiltro);
          connect.Execute(wlTexto);
          CLEAR(wlValores);
        END;

        IF lrTempIVA.NEXT<>0 THEN BEGIN
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50030 ,FormatoDec(lrTempIVA."VAT+EC Base" * lwSing)); //- Base4
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50031 ,FormatoDec(lrTempIVA."VAT %")); //- Porcentaje4
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50032 ,FormatoDec(lrTempIVA."VAT Amount" * lwSing)); //- Importe IVA4
          wlValores +=  STRSUBSTNO('%1=%2,' ,Text50033 ,FormatoDec(lrTempIVA."EC %")); //- Porcentaje Recargo Equivalencia4
          wlValores +=  STRSUBSTNO('%1=%2' ,Text50034 ,FormatoDec(lrTempIVA."EC Amount" * lwSing)); //- Importe Recargo Equivalencia4
          wlTexto   := STRSUBSTNO(Text50014,wNomTabla[2],wlValores,lwFiltro);
          connect.Execute(wlTexto);
          CLEAR(wlValores);
        END;

        wlValores +=  STRSUBSTNO('%1=%2' ,Text50035 , FormatoDec(lwTotal)); //- Total Factura
        // JPT 19/10/06 estos campos ya se han introducido
        //wlValores +=  STRSUBSTNO('%1=%2,' ,Text50036 , STRSUBSTNO('%1%2%1',Tcms,Text50005)); //- Origen N§ Interno
        //wlValores +=  STRSUBSTNO('%1=%2' ,Text50037 , pwNoImp); //- N§ Interno
        wlTexto   := STRSUBSTNO(Text50014,wNomTabla[2],wlValores,lwFiltro);
        connect.Execute(wlTexto);
      END;
    END;

    PROCEDURE InsertLinApuext@1100244007(VAR pwconnect@1100244010 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Connection";prCabVent@1100244000 : Record 36;pwNoImp@1100244003 : Integer;VAR pwClave@1100244001 : Integer;pwNOrden@1100244009 : Integer;pwImporteDebe@1100244021 : Decimal;pwImporteHaber@1100244006 : Decimal;pwCta@1100244026 : Code[10];pwNomtabla@1100244012 : Text[50];pwNoSerieIVA@1100244013 : Code[10];pwEmp@1100253000 : Code[2]);
    VAR
      wlNomCampos@1100244004 : Text[1024];
      wlValores@1100244005 : Text[1024];
      wlTexto@1100244002 : Text[1024];
      Tcms@1100244011 : TextConst 'ESP=''';
      wlserCod@1100244023 : Code[2];
      wlCod@1100244024 : Code[10];
      lwNoFra@1100244007 : Text[7];
      lwFiltro@1100244008 : Text[1024];
    BEGIN
      // InsertLinApuext
      // TRN-SQL
      // Graba una linea de la factura pasada como parametro en la tabla SQl

      CLEAR(wlValores);


      wlNomCampos := Text50038;

      wlValores +=  pwEmp            + ','; // EmpCod - Codigo Empresa
      pwClave+=1;
      wlValores +=  FORMAT(pwClave)  + ','; // TraCla - No Clave
      // JPT 19/10/06 Introducimos todos los identificadores al principio para que se pueda borrar si hay fallos
      wlValores +=  FORMAT(pwNoImp)  + ','; // N§ Archivo
      wlValores +=  STRSUBSTNO('%1%2%1',Tcms,Text50005); // Origen N§ Orden
      wlTexto := STRSUBSTNO(Text50006,pwNomtabla,wlNomCampos,wlValores);
      pwconnect.Execute(wlTexto);

      CLEAR(wlValores);
      wlValores +=  STRSUBSTNO('%1=%2,' , Text50039 , FormatoFecha(prCabVent."Posting Date"));   //- Fecha de Asiento
      wlValores +=  STRSUBSTNO('%1=%2%3%2,' , Text50040 ,Tcms, '3');                  //- Tipo de Diario
      wlValores +=  STRSUBSTNO('%1=%2,' , Text50041 , FORMAT(pwNoImp));     // - Numero de Asiento

      wlValores +=  STRSUBSTNO('%1=%2,' ,Text50042 , COPYSTR(pwCta,1,4)); //- Mayor
      wlValores +=  STRSUBSTNO('%1=%2,' ,Text50043 , COPYSTR(pwCta,5,STRLEN(pwCta))); //- Subcuenta

      pwImporteDebe   :=   ROUND(pwImporteDebe,0.01);
      pwImporteHaber   :=   ROUND(pwImporteHaber,0.01);
      IF pwImporteDebe <>0 THEN
        wlValores +=  STRSUBSTNO('%1=%2,' ,Text50044 , FormatoDec(pwImporteDebe)); //- Importe Debe
      IF pwImporteHaber <>0 THEN
        wlValores +=  STRSUBSTNO('%1=%2,' ,Text50045 , FormatoDec(pwImporteHaber)); //- Importe Haber
      // wlValores +=  STRSUBSTNO('%1=%2,' ,Text50046 , '0'); //- C¢d Concepto // Lo quieren en blanco
      lwNoFra  := COPYSTR(prCabVent."No.",4,7);
      wlValores +=  STRSUBSTNO('%1=%2,' ,Text50047 , STRSUBSTNO(Text50048,Tcms, lwNoFra)); //- Descripcion del concepto
      wlValores +=  STRSUBSTNO('%1=%2,' ,Text50049 , STRSUBSTNO('%1%2%1',Tcms, pwNoSerieIVA)); //- Serie de IVA
      wlValores +=  STRSUBSTNO('%1=%2,' ,Text50050 , STRSUBSTNO('%1%2%1',Tcms,lwNoFra)); //- N§ Documento
      wlValores +=  STRSUBSTNO('%1=%2,' ,Text50051 , FormatoFecha(prCabVent."Posting Date")); //- Fecha de Docuemnto
      IF prCabVent."Due Date"=0D THEN
        prCabVent."Due Date":= prCabVent."Posting Date";
      wlValores +=  STRSUBSTNO('%1=%2,' ,Text50052 , FormatoFecha(prCabVent."Due Date")); //- Fecha de Vencimiento

      { JPT 12/01/06 Comentado. No necesitan analitica. P.O. Toni Carvajal
      wlCod := GetConv(1,prCabVent."Shortcut Dimension 1 Code",TRUE);
      IF wlCod <> '' THEN
        wlValores +=  STRSUBSTNO('%1=%2,' ,Text50053 , wlCod); //- Sucursal
      wlCod := GetConv(2,prCabVent."Shortcut Dimension 2 Code",TRUE);
      IF wlCod <> '' THEN
        wlValores +=  STRSUBSTNO('%1=%2,' ,Text50054 , wlCod); //- Departamento
      }

      // JPT 19/10/06 estos campos ya han sido introducidos
      // wlValores +=  STRSUBSTNO('%1=%2,' ,Text50055 , FORMAT(pwNoImp)); //- N§ Archivo
      // wlValores +=  STRSUBSTNO('%1=%2,' ,Text50056 , STRSUBSTNO('%1%2%1',Tcms,Text50005)); //- Origen N§ Orden
      wlValores +=  STRSUBSTNO('%1=%2' ,Text50057 , FORMAT(pwNOrden)); //- No de orden

      wlTexto := STRSUBSTNO(Text50058,pwNomtabla,wlValores,FORMAT(pwClave),Tcms,pwEmp);
      pwconnect.Execute(wlTexto);
      CLEAR(wlValores);
    END;

    PROCEDURE BuscaUltNos@1100244011(VAR pwconnect@1100244003 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Connection";pwCodEmpres@1100244002 : Text[2];VAR pwClave@1100244000 : Integer;pwNomTabla@1100244004 : Text[50]);
    VAR
      lwInt@1100244001 : Integer;
    BEGIN
      // BuscaUltNos
      // Busca la £ltima numeraci¢n correlativa
      // INPUT -----> pwCodEmpres
      // OUTPUT ----> pwClave

      CLEAR(pwClave);
      // clave
      RecordSet.Open(STRSUBSTNO(Text50059,pwNomTabla  ,pwCodEmpres), pwconnect,1,3);

      lwInt := RecordSet.RecordCount;
      IF lwInt >0 THEN BEGIN
        RecordSet.MoveLast;
        pwClave := RecordSet.Fields.Item(Text50060).Value;
      END
       ELSE
         pwClave:=1;
      RecordSet.Close;
    END;

    PROCEDURE BorraAnts@1100244016(pwImp@1100244001 : Integer;pwEmp@1100253000 : Code[2]);
    VAR
      wlTexto@1100244000 : Text[1024];
      Tcms@1100244002 : TextConst 'ESP=''';
    BEGIN
      // BorraAnts
      // Borra los registro que hayan podido quedar de importaciones erroneas (con el mismo numero de importacion)


      // APUEXT
      wlTexto := STRSUBSTNO(Text50061,wNomTabla[1],pwImp,Tcms,pwEmp);
      connect.Execute(wlTexto);

      // APUEXT (en cobros)
      wlTexto := STRSUBSTNO(Text50061,wNomTabla[3],pwImp,Tcms,pwEmp);
      connectC.Execute(wlTexto);

      // TIVREP
      wlTexto := STRSUBSTNO(Text50062,wNomTabla[2],pwImp,Tcms,pwEmp);
      connect.Execute(wlTexto);
    END;

    PROCEDURE CompRegs@1100253000(VAR pwconnect@1100253003 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000514-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Connection";pwNomTabla@1100253000 : Text[50];pwImp@1100253001 : Integer;pwEmp@1100253005 : Code[2]);
    VAR
      Tcms@1100253002 : TextConst 'ESP=''';
      lwInt@1100253004 : Integer;
    BEGIN
      // CompRegs
      // De momento no se utiliza
      // Comprueba que no haya movimientos con el numero de importaci¢n y ya contabilizados.
      // Esto ha podido suceder si se han traspasado datos a medias (por un error) y se han contabilizado alguno de los asientos
      // traspasados. En este caso se genera un error ya que hay que mirarlo caso por caso

      RecordSet.Open(STRSUBSTNO(Text50063,
                     pwNomTabla,pwImp,Tcms,pwEmp));

      lwInt := RecordSet.RecordCount;
      IF lwInt > 0 THEN
        ERROR(Text0018);

      RecordSet.Close;
    END;

    PROCEDURE GetConv@1100244002(pwTipo@1100244000 : 'Sucursal,Departamento';pwCodigo@1100244001 : Code[20];pwError@1100244002 : Boolean) : Code[10];
    VAR
      lrConv@1100244003 : Record 7010439;
      lwCod@1100244004 : Code[10];
    BEGIN
      // GetConv
      // Devuelve el codigo de conversi¢n correspodiente
      // pwError indica si queremos que se genere un erro si no se encuentra el codigo o que devuelva uno en blanco

      CLEAR(lwCod);
      IF pwCodigo <> '' THEN BEGIN
        lrConv.RESET;
        lrConv.SETCURRENTKEY("Codigo FinBus" , Tipo);
        lrConv.SETRANGE("Codigo FinBus"      , pwCodigo);
        lrConv.SETRANGE(Tipo                 , pwTipo);
        IF lrConv.FINDFIRST THEN
          lwCod := lrConv.Codigo
        ELSE
          IF pwError THEN
            ERROR(Text0015,pwCodigo,pwTipo);
      END;

      EXIT(lwCod);
    END;

    PROCEDURE DiaJuliano@1100244005(pwFecha@1100244000 : Date) : Decimal;
    VAR
      lwDias@1100244002 : Decimal;
    BEGIN
      // DiaJuliano
      // Esta funci¢n devuelve el d¡a juliano seg£n la fecha pasada como parametro
      // El calendario juliano empieza el 24 Nov 4713 AC
      // Por lo que se trata es de calcular el numero de d¡as desde esa fecha
      // Sabemos que el d¡a juliano correspondieten al 01/01/2001 es 2451911
      // seg£n lo cual:

      lwDias :=  2451911 + (pwFecha-010101D);
      EXIT(lwDias);
    END;

    PROCEDURE FormatoDec@1100244004(pwDec@1100244000 : Decimal) : Text[30];
    VAR
      lwText@1100244001 : Text[30];
    BEGIN
      // FormatoDec
      // Para SQL
      lwText :=FORMAT(pwDec,0,Text50064) + '.' + DELCHR(FORMAT(pwDec,0,Text50065),'=',',');
      EXIT(lwText);
    END;

    PROCEDURE FormatoFecha@1100244006(pwFecha@1100244000 : Date) : Text[30];
    VAR
      lwText@1100244001 : Text[30];
      Tcms@1100244002 : TextConst 'ESP=''';
    BEGIN
      // FormatoFecha
      // Devuelve el formato fecha pasado como parametro a formato inteligible para SQL

      //lwText := '#' + FORMAT(pwFecha,0,Text50066) + '#';
      // NOTA: Se ve que algunos SQLs no les gusta las '#'
      //lwText :=  Tcms + FORMAT(pwFecha,0,Text50066) + Tcms;
      // TRN
      lwText :=  Tcms + FORMAT(pwFecha,0,Text50067) + Tcms;
      EXIT(lwText);
    END;

    PROCEDURE FormatoFra@1103350000(pwNo@1103350000 : Code[20]) : Code[20];
    VAR
      lwCod@1103350001 : Code[20];
      lwN@1103350002 : Integer;
    BEGIN
      // FormatoFra
      // Esta funci¢n devuelve solo los ultimos digitos numericos de una factura

      CLEAR(lwCod);
      FOR lwN:= STRLEN(pwNo) DOWNTO 1 DO BEGIN
        IF pwNo[lwN] IN ['0'..'9'] THEN
          lwCod := FORMAT(pwNo[lwN]) + lwCod
        ELSE
          lwN:=1; // Si no es un numero se sale del bucle
      END;

      EXIT(lwCod);
    END;

    EVENT RecordSet@1100244025::WillChangeField@9(cFields@1100244003 : Integer;Fields@1100244002 : Variant;adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT RecordSet@1100244025::FieldChangeComplete@10(cFields@1100244004 : Integer;Fields@1100244003 : Variant;pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT RecordSet@1100244025::WillChangeRecord@11(adReason@1100244003 : Integer;cRecords@1100244002 : Integer;adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT RecordSet@1100244025::RecordChangeComplete@12(adReason@1100244004 : Integer;cRecords@1100244003 : Integer;pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT RecordSet@1100244025::WillChangeRecordset@13(adReason@1100244002 : Integer;adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT RecordSet@1100244025::RecordsetChangeComplete@14(adReason@1100244003 : Integer;pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT RecordSet@1100244025::WillMove@15(adReason@1100244002 : Integer;adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT RecordSet@1100244025::MoveComplete@16(adReason@1100244003 : Integer;pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT RecordSet@1100244025::EndOfRecordset@17(VAR fMoreData@1100244002 : Boolean;adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT RecordSet@1100244025::FetchProgress@18(Progress@1100244003 : Integer;MaxProgress@1100244002 : Integer;adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT RecordSet@1100244025::FetchComplete@19(pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pRecordset@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset");
    BEGIN
    END;

    EVENT connect@1100244026::InfoMessage@0(pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connect@1100244026::BeginTransComplete@1(TransactionLevel@1100244003 : Integer;pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connect@1100244026::CommitTransComplete@3(pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connect@1100244026::RollbackTransComplete@2(pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connect@1100244026::WillExecute@4(VAR Source@1100244007 : Text[1024];CursorType@1100244006 : Integer;LockType@1100244005 : Integer;VAR Options@1100244004 : Integer;adStatus@1100244003 : Integer;pCommand@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{B08400BD-F9D1-4D02-B856-71D5DBA123E9}:'Microsoft ActiveX Data Objects 2.7 Library'._Command";pRecordset@1100244001 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset";pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connect@1100244026::ExecuteComplete@5(RecordsAffected@1100244005 : Integer;pError@1100244004 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244003 : Integer;pCommand@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{B08400BD-F9D1-4D02-B856-71D5DBA123E9}:'Microsoft ActiveX Data Objects 2.7 Library'._Command";pRecordset@1100244001 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset";pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connect@1100244026::WillConnect@6(VAR ConnectionString@1100244005 : Text[1024];VAR UserID@1100244004 : Text[1024];VAR Password@1100244003 : Text[1024];VAR Options@1100244002 : Integer;adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connect@1100244026::ConnectComplete@7(pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connect@1100244026::Disconnect@8(adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connectC@1100244033::InfoMessage@0(pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connectC@1100244033::BeginTransComplete@1(TransactionLevel@1100244003 : Integer;pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connectC@1100244033::CommitTransComplete@3(pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connectC@1100244033::RollbackTransComplete@2(pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connectC@1100244033::WillExecute@4(VAR Source@1100244007 : Text[1024];CursorType@1100244006 : Integer;LockType@1100244005 : Integer;VAR Options@1100244004 : Integer;adStatus@1100244003 : Integer;pCommand@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{B08400BD-F9D1-4D02-B856-71D5DBA123E9}:'Microsoft ActiveX Data Objects 2.7 Library'._Command";pRecordset@1100244001 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset";pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connectC@1100244033::ExecuteComplete@5(RecordsAffected@1100244005 : Integer;pError@1100244004 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244003 : Integer;pCommand@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{B08400BD-F9D1-4D02-B856-71D5DBA123E9}:'Microsoft ActiveX Data Objects 2.7 Library'._Command";pRecordset@1100244001 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000556-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Recordset";pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connectC@1100244033::WillConnect@6(VAR ConnectionString@1100244005 : Text[1024];VAR UserID@1100244004 : Text[1024];VAR Password@1100244003 : Text[1024];VAR Options@1100244002 : Integer;adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connectC@1100244033::ConnectComplete@7(pError@1100244002 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000500-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Error";adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    EVENT connectC@1100244033::Disconnect@8(adStatus@1100244001 : Integer;pConnection@1100244000 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000550-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'._Connection");
    BEGIN
    END;

    BEGIN
    {
      GrabarFac
    }
    END.
  }
}
