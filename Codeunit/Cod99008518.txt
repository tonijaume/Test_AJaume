OBJECT Codeunit 99008518 XML Document-Transform
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BizTalkManagement@1013 : Codeunit 99008508;
      BizTalkReservEntry@1010 : Record 99008533;
      XMLDOMManagement@1006 : Codeunit 99008516;
      NextLineNo@1008 : Integer;
      XMLDOMDocument@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      RootNode@2008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      ReturnedNode@3009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      CurrNode@4010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      NodeList@5011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
      ReservNodeList@1011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
      xmlSchemaCache@1012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F5078F34-C551-11D3-89B9-0000F81FE221}:'Microsoft XML, v3.0'.XMLSchemaCache30";
      TempDecimal@1009 : Decimal;
      Text000@1022 : TextConst 'ENU=No active agreement is associated with the document for a %1.;ESP=No hay ning£n acuerdo activo asociado con el documento para un/a %1.';
      Text001@1021 : TextConst 'ENU=The document has already been delivered to the program. The tracking ID is %1.;ESP=El documento ya ha sido entregado al programa. El Id. de seguimiento es %1.';
      Text002@1020 : TextConst 'ENU=BizTalk request for sales quote;ESP=Petici¢n de oferta venta BizTalk';
      Text003@1019 : TextConst 'ENU=BizTalk purchase quote;ESP=Oferta de compra BizTalk';
      Text004@1018 : TextConst 'ENU=BizTalk sales order;ESP=Pedido de venta BizTalk';
      Text005@1017 : TextConst 'ENU=BizTalk purchase order confirmation;ESP=Confirmaci¢n pedido de compra BizTalk';
      Text006@1016 : TextConst 'ENU=BizTalk purchase invoice;ESP=Factura de compra BizTalk';
      Text007@1015 : TextConst 'ENU=BizTalk purchase credit memo;ESP=Abono compra BizTalk';
      Text008@1014 : TextConst 'ENU=BizTalk product catalog;ESP=Cat logo de productos BizTalk';
      TempBlob@1025 : TEMPORARY Record 99008535;
      instr@1024 : InStream;
      outstr@1023 : OutStream;
      NextInDocNo@1000 : Integer;

    PROCEDURE ValidateXMLDocument@10(xmldom@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";xmlschema@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") : Boolean;
    VAR
      Schema@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      ReceiveXMLDocument@1004 : Codeunit 99008515;
    BEGIN
      CREATE(xmlSchemaCache,TRUE,FALSE);
      CREATE(Schema,TRUE,FALSE);
      xmlschema.save(Schema);
      xmlSchemaCache.add('',Schema);
      CREATE(XMLDOMDocument,TRUE,FALSE);
      XMLDOMDocument.async := FALSE;
      XMLDOMDocument.schemas := xmlSchemaCache;
      IF XMLDOMDocument.load(xmldom) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE LoadXML@14(xmldom@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") : Boolean;
    BEGIN
      IF ISCLEAR(XMLDOMDocument) THEN
        CREATE(XMLDOMDocument,TRUE,FALSE);
      IF XMLDOMDocument.load(xmldom) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE PopulateInSalesDocFields@15(VAR InboundSalesDocHeader@1001 : Record 99008500;TrackingID@1002 : Text[50];PartnerNo@1000 : Code[20];BiztalkDocType@1003 : Integer);
    BEGIN
      InboundSalesDocHeader."Date Received" := TODAY;
      InboundSalesDocHeader."Time Received" := TIME;
      InboundSalesDocHeader.Status := InboundSalesDocHeader.Status::Pending;
      InboundSalesDocHeader."Tracking ID" := TrackingID;
      InboundSalesDocHeader."BizTalk Document Type" := BiztalkDocType;
      InboundSalesDocHeader."Sell-to Customer No." := PartnerNo;
    END;

    PROCEDURE PopulateInPurchDocFields@16(VAR InboundPurchaseDocHeader@1003 : Record 99008502;TrackingID@1002 : Text[50];PartnerNo@1001 : Code[20];BiztalkDocType@1000 : Integer);
    BEGIN
      InboundPurchaseDocHeader."Date Received" := TODAY;
      InboundPurchaseDocHeader."Time Received" := TIME;
      InboundPurchaseDocHeader.Status := InboundPurchaseDocHeader.Status::Pending;
      InboundPurchaseDocHeader."Tracking ID" := TrackingID;
      InboundPurchaseDocHeader."BizTalk Document Type" := BiztalkDocType;
      InboundPurchaseDocHeader."Buy-from Vendor No." := PartnerNo;
    END;

    PROCEDURE PopulateInProdCatDocFields@17(VAR InboundProductCatalogHdr@1003 : Record 99008504;TrackingID@1002 : Text[50];PartnerNo@1001 : Code[20];BiztalkDocType@1000 : Integer);
    BEGIN
      InboundProductCatalogHdr."Date Received" := TODAY;
      InboundProductCatalogHdr."Time Received" := TIME;
      InboundProductCatalogHdr.Status := InboundProductCatalogHdr.Status::Pending;
      InboundProductCatalogHdr."Tracking ID" := TrackingID;
      InboundProductCatalogHdr."BizTalk Document Type" := BiztalkDocType;
      InboundProductCatalogHdr.VALIDATE("Vendor No.",PartnerNo);
    END;

    PROCEDURE PopulateInBizTalkReservEntry@1(VAR BizTalkReservEntry@1000 : Record 99008533;InboundDocNo@1001 : Integer;InboundDocLineNo@1002 : Integer;SourceType@1003 : Integer;InboundPositive@1004 : Boolean);
    BEGIN
      BizTalkReservEntry."BizTalk Document No." := InboundDocNo;
      BizTalkReservEntry."Biztalk Document Direction" := BizTalkReservEntry."Biztalk Document Direction"::Inbound;
      BizTalkReservEntry."Source Type" := SourceType;
      BizTalkReservEntry."BizTalk Document Line No." := InboundDocLineNo;
      BizTalkReservEntry.Positive := InboundPositive;
      IF BizTalkReservEntry."Quantity (Base)" < 0 THEN
          BizTalkReservEntry."Quantity (Base)" := -1 * BizTalkReservEntry."Quantity (Base)";
      IF BizTalkReservEntry.Quantity < 0 THEN
          BizTalkReservEntry.Quantity := -1 * BizTalkReservEntry.Quantity;
      IF BizTalkReservEntry."Qty. to Handle (Base)" < 0 THEN
          BizTalkReservEntry."Qty. to Handle (Base)" := -1 * BizTalkReservEntry."Qty. to Handle (Base)";
      IF BizTalkReservEntry."Qty. to Invoice (Base)" < 0 THEN
          BizTalkReservEntry."Qty. to Invoice (Base)" := -1 * BizTalkReservEntry."Qty. to Invoice (Base)";
      IF BizTalkReservEntry."Quantity Invoiced (Base)" < 0 THEN
          BizTalkReservEntry."Quantity Invoiced (Base)" := -1 * BizTalkReservEntry."Quantity Invoiced (Base)";
    END;

    PROCEDURE TransferReqSalesQuote@19(TrackingID@1001 : Text[50];PartnerID@1002 : Integer) ReturnCode@1000 : Boolean;
    VAR
      InboundReqSalesQuote@1009 : XMLport 99008508;
      BizTalkPartnerNo@1005 : Integer;
      PartnerNo@1004 : Code[20];
    BEGIN
      IF BizTalkManagement.SalesTrackingExists(TrackingID) THEN
        ERROR(Text001,TrackingID);
      BizTalkManagement.GetCustomer(PartnerID,PartnerNo,BizTalkPartnerNo);
      IF NOT BizTalkManagement.IsPartnerAgreementActive(BizTalkPartnerNo,'RSQ') THEN
        ERROR(Text000,Text002);
      ReturnCode := FALSE;
      IF PartnerNo <> '' THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(outstr);
        XMLDOMDocument.save(outstr);
        TempBlob.Blob.CREATEINSTREAM(instr);
        InboundReqSalesQuote.AssignVariables(PartnerNo,TrackingID);
        InboundReqSalesQuote.SETSOURCE(instr);
        ReturnCode :=  InboundReqSalesQuote.IMPORT;
        NextInDocNo := InboundReqSalesQuote.GetInDocNo;
      END;

      EXIT(ReturnCode);
    END;

    PROCEDURE TransferPurchQuote@18(TrackingID@1001 : Text[50];PartnerID@1002 : Integer) ReturnCode@1000 : Boolean;
    VAR
      InboundPurchQuote@1009 : XMLport 99008517;
      BizTalkPartnerNo@1005 : Integer;
      PartnerNo@1004 : Code[20];
    BEGIN
      IF BizTalkManagement.PurchTrackingExists(TrackingID) THEN
        ERROR(Text001,TrackingID);
      BizTalkManagement.GetVendor(PartnerID,PartnerNo,BizTalkPartnerNo);
      IF NOT BizTalkManagement.IsPartnerAgreementActive(BizTalkPartnerNo,'PQ') THEN
        ERROR(Text000,Text003);
      ReturnCode := FALSE;
      IF PartnerNo <> '' THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(outstr);
        XMLDOMDocument.save(outstr);
        TempBlob.Blob.CREATEINSTREAM(instr);
        InboundPurchQuote.AssignVariables(PartnerNo,TrackingID);
        InboundPurchQuote.SETSOURCE(instr);
        ReturnCode := InboundPurchQuote.IMPORT;
        NextInDocNo := InboundPurchQuote.GetInDocNo;
      END;

      EXIT(ReturnCode);
    END;

    PROCEDURE TransferSalesOrder@20(TrackingID@1001 : Text[50];PartnerID@1002 : Integer) ReturnCode@1000 : Boolean;
    VAR
      InboundSalesOrder@1009 : XMLport 99008514;
      BizTalkPartnerNo@1005 : Integer;
      PartnerNo@1004 : Code[20];
    BEGIN
      IF BizTalkManagement.SalesTrackingExists(TrackingID) THEN
        ERROR(Text001,TrackingID);
      BizTalkManagement.GetCustomer(PartnerID,PartnerNo,BizTalkPartnerNo);
      IF NOT BizTalkManagement.IsPartnerAgreementActive(BizTalkPartnerNo,'SO') THEN
        ERROR(Text000,Text004);
      ReturnCode := FALSE;
      IF PartnerNo <> '' THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(outstr);
        XMLDOMDocument.save(outstr);
        TempBlob.Blob.CREATEINSTREAM(instr);
        InboundSalesOrder.AssignVariables(PartnerNo,TrackingID);
        InboundSalesOrder.SETSOURCE(instr);
        ReturnCode :=InboundSalesOrder.IMPORT;
        NextInDocNo := InboundSalesOrder.GetInDocNo;
      END;

      EXIT(ReturnCode);
    END;

    PROCEDURE TransferPurchOrderConfirm@21(TrackingID@1001 : Text[50];PartnerID@1002 : Integer) ReturnCode@1000 : Boolean;
    VAR
      InboundPurchOrderConfirm@1009 : XMLport 99008505;
      BizTalkPartnerNo@1005 : Integer;
      PartnerNo@1004 : Code[20];
    BEGIN
      IF BizTalkManagement.PurchTrackingExists(TrackingID) THEN
        ERROR(Text001,TrackingID);
      BizTalkManagement.GetVendor(PartnerID,PartnerNo,BizTalkPartnerNo);
      IF NOT BizTalkManagement.IsPartnerAgreementActive(BizTalkPartnerNo,'POC') THEN
        ERROR(Text000,Text005);
      ReturnCode := FALSE;
      IF PartnerNo <> '' THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(outstr);
        XMLDOMDocument.save(outstr);
        TempBlob.Blob.CREATEINSTREAM(instr);
        InboundPurchOrderConfirm.AssignVariables(PartnerNo,TrackingID);
        InboundPurchOrderConfirm.SETSOURCE(instr);
        ReturnCode := InboundPurchOrderConfirm.IMPORT;
        NextInDocNo := InboundPurchOrderConfirm.GetInDocNo;
      END;

      EXIT(ReturnCode);
    END;

    PROCEDURE TransferPurchInv@22(TrackingID@1001 : Text[50];PartnerID@1002 : Integer) ReturnCode@1000 : Boolean;
    VAR
      InboundPurchInv@1009 : XMLport 99008503;
      BizTalkPartnerNo@1005 : Integer;
      PartnerNo@1004 : Code[20];
    BEGIN
      IF BizTalkManagement.PurchTrackingExists(TrackingID) THEN
        ERROR(Text001,TrackingID);
      BizTalkManagement.GetVendor(PartnerID,PartnerNo,BizTalkPartnerNo);
      IF NOT BizTalkManagement.IsPartnerAgreementActive(BizTalkPartnerNo,'PI') THEN
        ERROR(Text000,Text006);
      ReturnCode := FALSE;
      IF PartnerNo <> '' THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(outstr);
        XMLDOMDocument.save(outstr);
        TempBlob.Blob.CREATEINSTREAM(instr);
        InboundPurchInv.AssignVariables(PartnerNo,TrackingID);
        InboundPurchInv.SETSOURCE(instr);
        ReturnCode := InboundPurchInv.IMPORT;
        NextInDocNo := InboundPurchInv.GetInDocNo;
      END;

      EXIT(ReturnCode);
    END;

    PROCEDURE TransferPurchReceipt@23(TrackingID@1001 : Text[50];PartnerID@1002 : Integer) ReturnCode@1000 : Boolean;
    VAR
      InboundPurchReceipt@1009 : XMLport 99008506;
      BizTalkPartnerNo@1005 : Integer;
      PartnerNo@1004 : Code[20];
    BEGIN
      IF BizTalkManagement.PurchTrackingExists(TrackingID) THEN
        ERROR(Text001,TrackingID);
      BizTalkManagement.GetVendor(PartnerID,PartnerNo,BizTalkPartnerNo);
      IF NOT BizTalkManagement.IsPartnerAgreementActive(BizTalkPartnerNo,'PR') THEN
        ERROR(Text000,Text006);
      ReturnCode := FALSE;
      IF PartnerNo <> '' THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(outstr);
        XMLDOMDocument.save(outstr);
        TempBlob.Blob.CREATEINSTREAM(instr);
        InboundPurchReceipt.AssignVariables(PartnerNo,TrackingID);
        InboundPurchReceipt.SETSOURCE(instr);
        ReturnCode := InboundPurchReceipt.IMPORT;
        NextInDocNo := InboundPurchReceipt.GetInDocNo;
      END;

      EXIT(ReturnCode);
    END;

    PROCEDURE TransferPurchCreditMemo@24(TrackingID@1001 : Text[50];PartnerID@1002 : Integer) ReturnCode@1000 : Boolean;
    VAR
      InboundPurchCreditMemo@1009 : XMLport 99008502;
      BizTalkPartnerNo@1005 : Integer;
      PartnerNo@1004 : Code[20];
    BEGIN
      IF BizTalkManagement.PurchTrackingExists(TrackingID) THEN
        ERROR(Text001,TrackingID);
      BizTalkManagement.GetVendor(PartnerID,PartnerNo,BizTalkPartnerNo);
      IF NOT BizTalkManagement.IsPartnerAgreementActive(BizTalkPartnerNo,'PCM') THEN
        ERROR(Text003,Text007);
      ReturnCode := FALSE;
      IF PartnerNo <> '' THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(outstr);
        XMLDOMDocument.save(outstr);
        TempBlob.Blob.CREATEINSTREAM(instr);
        InboundPurchCreditMemo.AssignVariables(PartnerNo,TrackingID);
        InboundPurchCreditMemo.SETSOURCE(instr);
        ReturnCode := InboundPurchCreditMemo.IMPORT;
        NextInDocNo := InboundPurchCreditMemo.GetInDocNo;
      END;

      EXIT(ReturnCode);
    END;

    PROCEDURE TransferProdCatalog@25(TrackingID@1001 : Text[50];PartnerID@1002 : Integer) ReturnCode@1000 : Boolean;
    VAR
      InboundProdCatalog@1009 : XMLport 99008501;
      BizTalkPartnerNo@1005 : Integer;
      PartnerNo@1004 : Code[20];
    BEGIN
      IF BizTalkManagement.SalesTrackingExists(TrackingID) THEN
        ERROR(Text001,TrackingID);
      BizTalkManagement.GetVendor(PartnerID,PartnerNo,BizTalkPartnerNo);
      IF NOT BizTalkManagement.IsPartnerAgreementActive(BizTalkPartnerNo,'IPC') THEN
        ERROR(Text000,Text008);
      ReturnCode := FALSE;
      IF PartnerNo <> '' THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(outstr);
        XMLDOMDocument.save(outstr);
        TempBlob.Blob.CREATEINSTREAM(instr);
        InboundProdCatalog.AssignVariables(PartnerNo,TrackingID);
        InboundProdCatalog.SETSOURCE(instr);
        ReturnCode := InboundProdCatalog.IMPORT;
        NextInDocNo := InboundProdCatalog.GetInDocNo;
      END;

      EXIT(ReturnCode);
    END;

    PROCEDURE GetInDocNo@2() : Integer;
    BEGIN
      EXIT(NextInDocNo);
    END;

    EVENT XMLDOMDocument@1007::ondataavailable@198();
    BEGIN
    END;

    EVENT XMLDOMDocument@1007::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}
