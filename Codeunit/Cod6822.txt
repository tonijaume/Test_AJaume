OBJECT Codeunit 6822 EP Insert Head Data Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=25/05/05;
    Time=12:00:00;
    Version List=NAVW14.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EPSupportFunctions@1000000000 : Codeunit 6815;
      EPFormatFunctions@1000000001 : Codeunit 6817;

    PROCEDURE InsertHeader@1000000001(VAR EPTempNewHeadFields@1000000000 : Record 6825;TableNo@1000000001 : Integer;GUID@1000000003 : Text[50];UserID@1000000005 : Code[20]);
    VAR
      ChangeLogMgt@1000 : Codeunit 423;
      HeadRecordRef@1000000002 : RecordRef;
    BEGIN
      CASE TableNo OF
        DATABASE::Customer: InsertCustomer(GUID,HeadRecordRef);
        DATABASE::Vendor: InsertVendor(GUID,HeadRecordRef);
        DATABASE::Item: InsertItem(GUID,HeadRecordRef);
        DATABASE::"Sales Header": InsertSalesHeader(EPTempNewHeadFields,GUID,HeadRecordRef);
        DATABASE::"Purchase Header": InsertPurchaseHeader(EPTempNewHeadFields,GUID,HeadRecordRef);
      END;

      IF EPSupportFunctions.CheckChangeLogInLic THEN
        IF ChangeLogMgt.GetTableTriggerMask(HeadRecordRef.NUMBER) IN [1,5,11,15] THEN BEGIN // All Maskvalues for Insert
          ChangeLogMgt.SetLogEmployeePortalActivity(UserID);
          ChangeLogMgt.LogInsertion(HeadRecordRef);
        END;
    END;

    LOCAL PROCEDURE InsertCustomer@1000000003(GUID@1000000001 : Text[50];VAR HeadRecordRef@1000000002 : RecordRef);
    VAR
      Customer@1000 : Record 18;
      HeadFieldRef@1000000003 : FieldRef;
      tmpCustNo@1000000004 : Code[20];
    BEGIN
      HeadRecordRef.OPEN(DATABASE::Customer,FALSE);

      HeadRecordRef.INIT;
      HeadRecordRef.INSERT(TRUE);

      // Build Records to Create the Filter for Answer (Filter for HEAD)
      HeadFieldRef := HeadRecordRef.FIELD(Customer.FIELDNO("No."));
      tmpCustNo := HeadFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(Customer.FIELDNO("No."),tmpCustNo,GUID);

      // Build Records to Create the Key for Answer (Filter for HEAD)
      EPSupportFunctions.CreateTempHeadFilterKeys(Customer.FIELDNO("No."),GUID);
    END;

    PROCEDURE InsertVendor@1000000004(GUID@1000000001 : Text[50];VAR HeadRecordRef@1000000000 : RecordRef);
    VAR
      Vendor@1000 : Record 23;
      HeadFieldRef@1000000003 : FieldRef;
      tmpVendNo@1000000002 : Code[20];
    BEGIN
      HeadRecordRef.OPEN(DATABASE::Vendor,FALSE);

      HeadRecordRef.INIT;
      HeadRecordRef.INSERT(TRUE);

      // Build Records to Create the Filter for Answer (Filter for HEAD)
      HeadFieldRef := HeadRecordRef.FIELD(Vendor.FIELDNO("No."));
      tmpVendNo := HeadFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(Vendor.FIELDNO("No."),tmpVendNo,GUID);

      // Build Records to Create the Key for Answer (Filter for HEAD)
      EPSupportFunctions.CreateTempHeadFilterKeys(Vendor.FIELDNO("No."),GUID);
    END;

    LOCAL PROCEDURE InsertItem@1000000000(GUID@1000000001 : Text[50];VAR HeadRecordRef@1000000000 : RecordRef);
    VAR
      Item@1000 : Record 27;
      HeadFieldRef@1000000003 : FieldRef;
      tmpItemNo@1000000004 : Code[20];
    BEGIN
      HeadRecordRef.OPEN(DATABASE::Item,FALSE);

      HeadRecordRef.INIT;
      HeadRecordRef.INSERT(TRUE);

      // Build Records to Create the Filter for Answer (Filter for HEAD)
      HeadFieldRef := HeadRecordRef.FIELD(Item.FIELDNO("No."));
      tmpItemNo := HeadFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(Item.FIELDNO("No."),tmpItemNo,GUID);

      // Build Records to Create the Key for Answer (Filter for HEAD)
      EPSupportFunctions.CreateTempHeadFilterKeys(Item.FIELDNO("No."),GUID);
    END;

    LOCAL PROCEDURE InsertSalesHeader@1000000002(VAR EPTempNewHeadFields@1000000001 : Record 6825;GUID@1000000003 : Text[50];VAR HeadRecordRef@1000000006 : RecordRef);
    VAR
      SalesHeader@1000 : Record 36;
      HeadFieldRef@1000000002 : FieldRef;
      tmpValue@1000000004 : Text[200];
      tmpOption@1000000005 : Option;
    BEGIN
      IF EPTempNewHeadFields.FIND('-') THEN;

      HeadRecordRef.OPEN(DATABASE::"Sales Header",FALSE);

      // Create the new Record in table 36 and use default values for the new Head stored in table EPTempNewHeadFields
      // Entries for EPTempNewHeadFields where created before
      HeadRecordRef.INIT;
      IF EPTempNewHeadFields.COUNT > 0 THEN BEGIN
        REPEAT
          HeadFieldRef := HeadRecordRef.FIELD(EPTempNewHeadFields."Field No.");
          EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Sales Header",
            EPTempNewHeadFields."Field No.",EPTempNewHeadFields.Value,HeadFieldRef);
        UNTIL EPTempNewHeadFields.NEXT = 0;
      END;
      HeadRecordRef.INSERT(TRUE);

      // Build Records to Create the Filter for Answer (Filter for HEAD)
      HeadFieldRef := HeadRecordRef.FIELD(SalesHeader.FIELDNO("Document Type"));
      tmpOption := HeadFieldRef.VALUE;
      tmpValue := EPFormatFunctions.OptionToText(tmpOption);
      EPSupportFunctions.CreateTempHeadFilterTable(SalesHeader.FIELDNO("Document Type"),tmpValue,GUID);
      HeadFieldRef := HeadRecordRef.FIELD(SalesHeader.FIELDNO("No."));
      tmpValue := HeadFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(SalesHeader.FIELDNO("No."),tmpValue,GUID);

      // Build Records to Create the Key for Answer (Filter for HEAD)
      EPSupportFunctions.CreateTempHeadFilterKeys(SalesHeader.FIELDNO("Document Type"),GUID);
      EPSupportFunctions.CreateTempHeadFilterKeys(SalesHeader.FIELDNO("No."),GUID);
    END;

    LOCAL PROCEDURE InsertPurchaseHeader@15(VAR EPTempNewHeadFields@1000000001 : Record 6825;GUID@1000000003 : Text[50];VAR HeadRecordRef@1000000006 : RecordRef);
    VAR
      PurchaseHeader@1000 : Record 38;
      HeadFieldRef@1000000002 : FieldRef;
      tmpValue@1000000004 : Text[200];
      tmpOption@1000000005 : Option;
    BEGIN
      IF EPTempNewHeadFields.FIND('-') THEN;

      HeadRecordRef.OPEN(DATABASE::"Purchase Header",FALSE);

      // Create the new Record in table 38 and use default values for the new Head stored in table EPTempNewHeadFields
      // Entries for EPTempNewHeadFields where created before
      HeadRecordRef.INIT;
      IF EPTempNewHeadFields.COUNT > 0 THEN BEGIN
        REPEAT
          HeadFieldRef := HeadRecordRef.FIELD(EPTempNewHeadFields."Field No.");
          EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Purchase Header",
            EPTempNewHeadFields."Field No.",EPTempNewHeadFields.Value,HeadFieldRef);
        UNTIL EPTempNewHeadFields.NEXT = 0;
      END;
      HeadRecordRef.INSERT(TRUE);

      // Build Records to Create the Filter for Answer (Filter for HEAD)
      HeadFieldRef := HeadRecordRef.FIELD(PurchaseHeader.FIELDNO("Document Type"));
      tmpOption := HeadFieldRef.VALUE;
      tmpValue := EPFormatFunctions.OptionToText(tmpOption);
      EPSupportFunctions.CreateTempHeadFilterTable(PurchaseHeader.FIELDNO("Document Type"),tmpValue,GUID);
      HeadFieldRef := HeadRecordRef.FIELD(PurchaseHeader.FIELDNO("No."));
      tmpValue := HeadFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(PurchaseHeader.FIELDNO("No."),tmpValue,GUID);

      // Build Records to Create the Key for Answer (Filter for HEAD)
      EPSupportFunctions.CreateTempHeadFilterKeys(PurchaseHeader.FIELDNO("Document Type"),GUID);
      EPSupportFunctions.CreateTempHeadFilterKeys(PurchaseHeader.FIELDNO("No."),GUID);
    END;

    BEGIN
    END.
  }
}
