OBJECT Codeunit 99000835 Item Jnl. Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1;ESP=La cantidad reservada no puede ser mayor que %1';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved;ESP=se debe rellenar cuando se ha reservado una cantidad';
      Text003@1002 : TextConst 'ENU=must not be filled in when a quantity is reserved;ESP=no se debe rellenar cuando se ha reservado una cantidad';
      Text004@1003 : TextConst 'ENU=must not be changed when a quantity is reserved;ESP=no se debe modificar cuando se ha reservado una cantidad';
      Text005@1004 : TextConst 'ENU=Codeunit is not initialized correctly.;ESP=Codeunit no iniciada correctamente.';
      ReservMgt@1006 : Codeunit 99000845;
      CreateReservEntry@1007 : Codeunit 99000830;
      ReservEngineMgt@1008 : Codeunit 99000831;
      Blocked@1009 : Boolean;
      SetFromType@1010 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';
      SetFromSubtype@1011 : Integer;
      SetFromID@1012 : Code[20];
      SetFromBatchName@1013 : Code[10];
      SetFromProdOrderLine@1014 : Integer;
      SetFromRefNo@1015 : Integer;
      SetFromVariantCode@1016 : Code[10];
      SetFromLocationCode@1017 : Code[10];
      SetFromSerialNo@1019 : Code[20];
      SetFromLotNo@1020 : Code[20];
      SetFromQtyPerUOM@1021 : Decimal;
      Text006@1022 : TextConst 'ENU=You cannot define item tracking on %1 %2;ESP=No puede definir seguimiento pdto. en %1 %2';
      DeleteItemTracking@1005 : Boolean;

    PROCEDURE CreateReservation@4(VAR ItemJnlLine@1000 : Record 83;Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1003 : Decimal;ForSerialNo@1004 : Code[20];ForLotNo@1005 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text005);

      ItemJnlLine.TESTFIELD("Item No.");
      ItemJnlLine.TESTFIELD("Posting Date");
      ItemJnlLine.CALCFIELDS("Reserved Qty. (Base)");
      IF ABS(ItemJnlLine."Quantity (Base)") <
         ABS(ItemJnlLine."Reserved Qty. (Base)") + Quantity
      THEN
        ERROR(
          Text000,
          ABS(ItemJnlLine."Quantity (Base)") - ABS(ItemJnlLine."Reserved Qty. (Base)"));

      ItemJnlLine.TESTFIELD("Location Code",SetFromLocationCode);
      ItemJnlLine.TESTFIELD("Variant Code",SetFromVariantCode);

      IF Quantity > 0 THEN
        ShipmentDate := ItemJnlLine."Posting Date"
      ELSE BEGIN
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := ItemJnlLine."Posting Date";
      END;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Item Journal Line",
        ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
        ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",ItemJnlLine."Qty. per Unit of Measure",
        Quantity,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        ItemJnlLine."Item No.",ItemJnlLine."Variant Code",ItemJnlLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate,0);

      SetFromType := 0;
    END;

    PROCEDURE CreateReservationSetFrom@7(FromType@1000 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';FromSubtype@1001 : Integer;FromID@1002 : Code[20];FromBatchName@1003 : Code[10];FromProdOrderLine@1004 : Integer;FromRefNo@1005 : Integer;FromVariantCode@1006 : Code[10];FromLocationCode@1007 : Code[10];FromSerialNo@1009 : Code[20];FromLotNo@1010 : Code[20];FromQtyPerUOM@1011 : Decimal);
    BEGIN
      SetFromType := FromType;
      SetFromSubtype := FromSubtype;
      SetFromID := FromID;
      SetFromBatchName := FromBatchName;
      SetFromProdOrderLine := FromProdOrderLine;
      SetFromRefNo := FromRefNo;
      SetFromVariantCode := FromVariantCode;
      SetFromLocationCode := FromLocationCode;
      SetFromSerialNo := FromSerialNo;
      SetFromLotNo := FromLotNo;
      SetFromQtyPerUOM := FromQtyPerUOM;
    END;

    PROCEDURE FilterReservFor@9(VAR FilterReservEntry@1000 : Record 337;ItemJnlLine@1001 : Record 83);
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Item Journal Line");
      FilterReservEntry.SETRANGE("Source Subtype",ItemJnlLine."Entry Type");
      FilterReservEntry.SETRANGE("Source ID",ItemJnlLine."Journal Template Name");
      FilterReservEntry.SETRANGE("Source Batch Name",ItemJnlLine."Journal Batch Name");
      FilterReservEntry.SETRANGE("Source Prod. Order Line",0);
      FilterReservEntry.SETRANGE("Source Ref. No.",ItemJnlLine."Line No.");

      FilterReservEntry.SETRANGE("Serial No.",ItemJnlLine."Serial No.");
      FilterReservEntry.SETRANGE("Lot No.",ItemJnlLine."Lot No.");
    END;

    PROCEDURE Caption@27(ItemJnlLine@1001 : Record 83) CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO(
          '%1 %2 %3',ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name",
          ItemJnlLine."Item No.");
    END;

    PROCEDURE FindReservEntry@1(ItemJnlLine@1000 : Record 83;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,ItemJnlLine);

      EXIT(ReservEntry.FINDLAST);
    END;

    PROCEDURE ReservEntryExist@11(ItemJnlLine@1000 : Record 83) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,ItemJnlLine);
      ReservEntry.SETRANGE("Serial No."); // Ignore Serial No
      ReservEntry.SETRANGE("Lot No."); // Ignore Lot No

      EXIT(NOT ReservEntry.ISEMPTY);
    END;

    PROCEDURE VerifyChange@62(VAR NewItemJnlLine@1000 : Record 83;VAR OldItemJnlLine@1001 : Record 83);
    VAR
      ItemJnlLine@1005 : Record 83;
      TempReservEntry@1002 : Record 337;
      ItemTrackManagement@1006 : Codeunit 6500;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
      SNRequired@1007 : Boolean;
      LNRequired@1008 : Boolean;
      PointerChanged@1009 : Boolean;
    BEGIN
      IF Blocked THEN
        EXIT;
      IF NewItemJnlLine."Line No." = 0 THEN
        IF NOT ItemJnlLine.GET(
                 NewItemJnlLine."Journal Template Name",
                 NewItemJnlLine."Journal Batch Name",
                 NewItemJnlLine."Line No.")
        THEN
          EXIT;

      NewItemJnlLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewItemJnlLine."Reserved Qty. (Base)" <> 0;

      IF NewItemJnlLine."Posting Date" = 0D THEN
        IF ShowError THEN
          NewItemJnlLine.FIELDERROR("Posting Date",Text002)
        ELSE
          HasError := TRUE;

      IF NewItemJnlLine."Drop Shipment" THEN
        IF ShowError THEN
          NewItemJnlLine.FIELDERROR("Drop Shipment",Text003)
        ELSE
          HasError := TRUE;

      IF NewItemJnlLine."Item No." <> OldItemJnlLine."Item No." THEN
        IF ShowError THEN
          NewItemJnlLine.FIELDERROR("Item No.",Text004)
        ELSE
          HasError := TRUE;

      IF NewItemJnlLine."Entry Type" <> OldItemJnlLine."Entry Type" THEN
        IF ShowError THEN
          NewItemJnlLine.FIELDERROR("Entry Type",Text004)
        ELSE
          HasError := TRUE;

      IF (NewItemJnlLine."Entry Type" = NewItemJnlLine."Entry Type"::Transfer) AND
         (NewItemJnlLine."Quantity (Base)" < 0)
      THEN BEGIN
        IF (NewItemJnlLine."New Location Code" <> OldItemJnlLine."Location Code") THEN
          IF ShowError THEN
            NewItemJnlLine.FIELDERROR("New Location Code",Text004)
          ELSE
            HasError := TRUE;
        IF NewItemJnlLine."New Bin Code" <> OldItemJnlLine."Bin Code" THEN BEGIN
          ItemTrackManagement.CheckWhseItemTrkgSetup(NewItemJnlLine."Item No.",SNRequired,LNRequired,FALSE);
          IF SNRequired OR LNRequired THEN
            IF ShowError THEN
              NewItemJnlLine.FIELDERROR("New Bin Code",Text004)
            ELSE
              HasError := TRUE;
        END
      END ELSE BEGIN
        IF (NewItemJnlLine."Location Code" <> OldItemJnlLine."Location Code") THEN
          IF ShowError THEN
            NewItemJnlLine.FIELDERROR("Location Code",Text004)
          ELSE
            HasError := TRUE;
        IF NewItemJnlLine."Bin Code" <> OldItemJnlLine."Bin Code" THEN BEGIN
          ItemTrackManagement.CheckWhseItemTrkgSetup(NewItemJnlLine."Item No.",SNRequired,LNRequired,FALSE);
          IF SNRequired OR LNRequired THEN
            IF ShowError THEN
              NewItemJnlLine.FIELDERROR("Bin Code",Text004)
            ELSE
              HasError := TRUE;
        END
      END;
      IF NewItemJnlLine."Variant Code" <> OldItemJnlLine."Variant Code" THEN
        IF ShowError THEN
          NewItemJnlLine.FIELDERROR("Variant Code",Text004)
        ELSE
          HasError := TRUE;
      IF NewItemJnlLine."Line No." <> OldItemJnlLine."Line No." THEN
        HasError := TRUE;

      IF HasError THEN BEGIN
        FindReservEntry(NewItemJnlLine,TempReservEntry);
        TempReservEntry.SETRANGE("Serial No.");
        TempReservEntry.SETRANGE("Lot No.");

        PointerChanged := (NewItemJnlLine."Item No." <> OldItemJnlLine."Item No.") OR
          (NewItemJnlLine."Entry Type" <> OldItemJnlLine."Entry Type");

        IF PointerChanged OR
          (NOT TempReservEntry.ISEMPTY)
        THEN BEGIN
          IF PointerChanged THEN BEGIN
            ReservMgt.SetItemJnlLine(OldItemJnlLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetItemJnlLine(NewItemJnlLine);
          END ELSE BEGIN
            ReservMgt.SetItemJnlLine(NewItemJnlLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewItemJnlLine."Quantity (Base)");
        END;
      END;
    END;

    PROCEDURE VerifyQuantity@3(VAR NewItemJnlLine@1001 : Record 83;VAR OldItemJnlLine@1000 : Record 83);
    VAR
      ItemJnlLine@1002 : Record 83;
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH NewItemJnlLine DO BEGIN
        IF "Line No." = OldItemJnlLine."Line No." THEN
          IF "Quantity (Base)" = OldItemJnlLine."Quantity (Base)" THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT ItemJnlLine.GET("Journal Template Name","Journal Batch Name","Line No.") THEN
            EXIT;
        ReservMgt.SetItemJnlLine(NewItemJnlLine);
        IF "Qty. per Unit of Measure" <> OldItemJnlLine."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        IF "Quantity (Base)" * OldItemJnlLine."Quantity (Base)" < 0 THEN
          ReservMgt.DeleteReservEntries(TRUE,0)
        ELSE
          ReservMgt.DeleteReservEntries(FALSE,"Quantity (Base)");
      END;
    END;

    PROCEDURE TransferItemJnlToItemLedgEntry@34(VAR ItemJnlLine@1000 : Record 83;VAR ItemLedgEntry@1001 : Record 32;TransferQty@1002 : Decimal;SkipInventory@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record 337;
      OldReservEntry2@1005 : Record 337;
      Status@1006 : 'Reservation,Tracking,Surplus,Prospect';
      SkipThisRecord@1007 : Boolean;
    BEGIN
      IF NOT FindReservEntry(ItemJnlLine,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      ItemLedgEntry.TESTFIELD("Item No.",ItemJnlLine."Item No.");
      ItemLedgEntry.TESTFIELD("Variant Code",ItemJnlLine."Variant Code");
      IF ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Transfer THEN BEGIN
        ItemLedgEntry.TESTFIELD("Location Code",ItemJnlLine."New Location Code");
      END ELSE BEGIN
        ItemLedgEntry.TESTFIELD("Location Code",ItemJnlLine."Location Code");
      END;

      FOR Status := Status::Reservation TO Status::Prospect DO BEGIN
        IF TransferQty = 0 THEN
          EXIT;
        OldReservEntry.SETRANGE("Reservation Status",Status);

        IF OldReservEntry.FINDSET THEN
          REPEAT
            OldReservEntry.TESTFIELD("Item No.",ItemJnlLine."Item No.");
            OldReservEntry.TESTFIELD("Variant Code",ItemJnlLine."Variant Code");

            IF SkipInventory THEN
              IF Status < Status::Surplus THEN BEGIN
                OldReservEntry2.GET(OldReservEntry."Entry No.",NOT OldReservEntry.Positive);
                SkipThisRecord := OldReservEntry2."Source Type" = DATABASE::"Item Ledger Entry";
              END ELSE
                SkipThisRecord := FALSE;

            IF NOT SkipThisRecord THEN BEGIN
              IF ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Transfer THEN BEGIN
                IF ItemLedgEntry.Quantity < 0 THEN
                  OldReservEntry.TESTFIELD("Location Code",ItemJnlLine."Location Code");
                CreateReservEntry.SetInbound(TRUE);
              END ELSE
                OldReservEntry.TESTFIELD("Location Code",ItemJnlLine."Location Code");

              TransferQty :=
                CreateReservEntry.TransferReservEntry(
                  DATABASE::"Item Ledger Entry",0,'','',0,
                  ItemLedgEntry."Entry No.",ItemLedgEntry."Qty. per Unit of Measure",
                  OldReservEntry,TransferQty);
            END ELSE
              IF Status = Status::Tracking THEN BEGIN
                OldReservEntry2.DELETE;
                OldReservEntry.DELETE;
                ReservMgt.ModifyActionMessage(OldReservEntry."Entry No.",0,TRUE);
              END;
          UNTIL (OldReservEntry.NEXT = 0) OR (TransferQty = 0);
      END; // DO
    END;

    PROCEDURE RenameLine@10(VAR NewItemJnlLine@1000 : Record 83;VAR OldItemJnlLine@1001 : Record 83);
    BEGIN
      ReservEngineMgt.RenamePointer(DATABASE::"Item Journal Line",
        OldItemJnlLine."Entry Type",
        OldItemJnlLine."Journal Template Name",
        OldItemJnlLine."Journal Batch Name",
        0,
        OldItemJnlLine."Line No.",
        NewItemJnlLine."Entry Type",
        NewItemJnlLine."Journal Template Name",
        NewItemJnlLine."Journal Batch Name",
        0,
        NewItemJnlLine."Line No.");
    END;

    PROCEDURE DeleteLineConfirm@20(VAR ItemJnlLine@1000 : Record 83) : Boolean;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF NOT ReservEntryExist(ItemJnlLine) THEN
          EXIT(TRUE);

        ReservMgt.SetItemJnlLine(ItemJnlLine);
        IF ReservMgt.DeleteItemTrackingConfirm THEN
          DeleteItemTracking := TRUE;
      END;

      EXIT(DeleteItemTracking);
    END;

    PROCEDURE DeleteLine@2(VAR ItemJnlLine@1000 : Record 83);
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH ItemJnlLine DO BEGIN
        ReservMgt.SetItemJnlLine(ItemJnlLine);
        IF DeleteItemTracking THEN
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(TRUE,0);
        CALCFIELDS("Reserved Qty. (Base)");
      END;
    END;

    PROCEDURE AssignForPlanning@5(VAR ItemJnlLine@1000 : Record 83);
    VAR
      PlanningAssignment@1001 : Record 99000850;
    BEGIN
      IF ItemJnlLine."Item No." <> '' THEN
        WITH ItemJnlLine DO BEGIN
          PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Location Code","Posting Date");
          IF ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Transfer THEN
            PlanningAssignment.ChkAssignOne("Item No.","Variant Code","New Location Code","Posting Date");
        END;
    END;

    PROCEDURE Block@6(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    PROCEDURE CallItemTracking@14(VAR ItemJnlLine@1000 : Record 83;IsReclass@1003 : Boolean);
    VAR
      TrackingSpecification@1001 : Record 336;
      ReservEntry@1004 : Record 337;
      ItemTrackingForm@1002 : Form 6510;
    BEGIN
      ItemJnlLine.TESTFIELD("Item No.");
      IF NOT ItemJnlLine.ItemPosting THEN BEGIN
        ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
        FilterReservFor(ReservEntry,ItemJnlLine);
        ReservEntry.SETRANGE("Serial No.");
        ReservEntry.SETRANGE("Lot No.");
        IF NOT ReservEntry.FINDFIRST THEN
          ERROR(Text006,ItemJnlLine.FIELDCAPTION("Operation No."),ItemJnlLine."Operation No.");
      END;
      InitTrackingSpecification(ItemJnlLine,TrackingSpecification);
      IF IsReclass THEN
        ItemTrackingForm.SetFormRunMode(1);
      ItemTrackingForm.SetSource(TrackingSpecification,ItemJnlLine."Posting Date");
      ItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE InitTrackingSpecification@13(VAR ItemJnlLine@1000 : Record 83;VAR TrackingSpecification@1003 : Record 336);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Item Journal Line";
      WITH ItemJnlLine DO BEGIN
        TrackingSpecification."Item No." := "Item No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := "Entry Type";
        TrackingSpecification."Source ID" := "Journal Template Name";
        TrackingSpecification."Source Batch Name" := "Journal Batch Name";
        TrackingSpecification."Source Prod. Order Line" := 0;
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Quantity (Base)" := "Quantity (Base)";
        TrackingSpecification."Qty. to Handle" := Quantity;
        TrackingSpecification."Qty. to Handle (Base)" := "Quantity (Base)";
        TrackingSpecification."Qty. to Invoice" := Quantity;
        TrackingSpecification."Qty. to Invoice (Base)" := "Quantity (Base)";
        TrackingSpecification."Quantity Handled (Base)" := 0;
        TrackingSpecification."Quantity Invoiced (Base)" := 0;
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TrackingSpecification."Bin Code" := "Bin Code";
      END;
    END;

    PROCEDURE RegisterBinContentItemTracking@1203(VAR ItemJournalLine@1003 : Record 83;VAR TempTrackingSpecification@1200 : TEMPORARY Record 336);
    VAR
      SourceTrackingSpecification@1202 : Record 336;
      ItemTrackingForm@1004 : Form 6510;
      FormRunMode@1201 : ',Reclass,Combined Ship/Rcpt,Drop Shipment,Transfer';
    BEGIN
      IF NOT TempTrackingSpecification.FINDSET THEN
        EXIT;
      InitTrackingSpecification(ItemJournalLine,SourceTrackingSpecification);

      CLEAR(ItemTrackingForm);
      ItemTrackingForm.SetFormRunMode(FormRunMode::Reclass);
      ItemTrackingForm.RegisterItemTrackingLines(
        SourceTrackingSpecification,ItemJournalLine."Posting Date",TempTrackingSpecification);
    END;

    BEGIN
    END.
  }
}
