OBJECT Codeunit 801 Online Map Utilities
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1005 : TextConst 'ENU=Table %1 has not been setup to use Online Map.;ESP=La tabla %1 no se ha configurado para utilizar Online Map.';
      Text002@1006 : TextConst 'ENU=The specified record could not be found.;ESP=El registro especificado no se pudo encontrar.';

    PROCEDURE BuildParameters@50(TableNo@1000 : Integer;RecPosition@1001 : Text[1000];AddrCount@1002 : Integer;Web@1003 : Boolean) : Text[250];
    BEGIN
      IF ValidAddresses(TableNo) THEN
        EXIT(GetAddress(TableNo,RecPosition,AddrCount,Web))
      ELSE
        ERROR(STRSUBSTNO(Text001,FORMAT(TableNo)));
    END;

    PROCEDURE GetAddress@51(TableID@1001 : Integer;RecPosition@1002 : Text[1000];Position@1003 : Integer;WebInterface@1004 : Boolean) : Text[250];
    VAR
      RecordRef@1005 : RecordRef;
      FieldRef@1006 : FieldRef;
      CurrentFieldCount@1007 : Integer;
      TotalFieldCount@1008 : Integer;
      Address@1009 : ARRAY [5] OF Text[250];
      ArrayPtr@1010 : Integer;
    BEGIN
      RecordRef.OPEN(TableID);
      RecordRef.SETPOSITION(RecPosition);
      IF NOT RecordRef.FIND('=') THEN
        ERROR(Text002);

      CASE TableID OF
        DATABASE::Location:
          BEGIN
            FieldRef := RecordRef.FIELD(5701);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(5703);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(5715);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(5714);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(5720);
            Address[5] := FORMAT(FieldRef);
          END;
        DATABASE::Customer :
          BEGIN
            FieldRef := RecordRef.FIELD(5);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(7);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(92);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(91);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(35);
            Address[5] := FORMAT(FieldRef);
          END;
        DATABASE::Vendor :
          BEGIN
            FieldRef := RecordRef.FIELD(5);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(7);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(92);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(91);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(35);
            Address[5] := FORMAT(FieldRef);
          END;
        DATABASE::"Company Information" :
          BEGIN
            FieldRef := RecordRef.FIELD(4);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(6);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(31);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(30);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(36);
            Address[5] := FORMAT(FieldRef);
          END;
        DATABASE::Resource:
          BEGIN
            FieldRef := RecordRef.FIELD(6);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(8);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(54);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(53);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(59);
            Address[5] := FORMAT(FieldRef);
          END;
        DATABASE::Job:
          BEGIN
            FieldRef := RecordRef.FIELD(59);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(61);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(63);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(64);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(67);
            Address[5] := FORMAT(FieldRef);
          END;
        DATABASE::"Ship-to Address":
          BEGIN
            FieldRef := RecordRef.FIELD(5);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(7);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(92);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(91);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(35);
            Address[5] := FORMAT(FieldRef);
          END;
        DATABASE::"Order Address":
          BEGIN
            FieldRef := RecordRef.FIELD(5);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(7);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(92);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(91);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(35);
            Address[5] := FORMAT(FieldRef);
          END;
        DATABASE::"Bank Account":
          BEGIN
            FieldRef := RecordRef.FIELD(5);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(7);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(92);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(91);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(35);
            Address[5] := FORMAT(FieldRef);
          END;
        DATABASE::Contact:
          BEGIN
            FieldRef := RecordRef.FIELD(5);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(7);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(92);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(91);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(35);
            Address[5] := FORMAT(FieldRef);
          END;
        DATABASE::Employee:
          BEGIN
            FieldRef := RecordRef.FIELD(8);
            Address[1] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(10);
            Address[2] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(12);
            Address[3] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(11);
            Address[4] := FORMAT(FieldRef);
            FieldRef := RecordRef.FIELD(25);
            Address[5] := FORMAT(FieldRef);
          END;
      END;

      IF WebInterface THEN
        EXIT(BuildMSNParameters(Address[1],Address[2],Address[3],Address[4],Address[5],Position));
    END;

    PROCEDURE BuildMSNParameters@52(Street@1000 : Text[100];City@1001 : Text[50];State@1002 : Text[20];ZipCode@1003 : Text[20];Country@1004 : Text[50];Position@1005 : Integer) : Text[250];
    VAR
      Pos@1006 : Text[5];
    BEGIN
      Pos := FORMAT(Position);

      EXIT(
        'strt' + Pos + '=' + URLEncode(Street) +
        '&city' + Pos + '=' + URLEncode(City) +
        '&stnm' + Pos + '=' + URLEncode(State) +
        '&zipc' + Pos + '=' + URLEncode(ZipCode));
    END;

    PROCEDURE ValidAddresses@53(TableID@1000 : Integer) : Boolean;
    BEGIN
      EXIT(
        (TableID IN
          [DATABASE::"Bank Account",
           DATABASE::"Company Information",
           DATABASE::Contact,
           DATABASE::Customer,
           DATABASE::Employee,
           DATABASE::Job,
           DATABASE::Location,
           DATABASE::Resource,
           DATABASE::"Ship-to Address",
           DATABASE::"Order Address",
           DATABASE::Vendor]));
    END;

    PROCEDURE ParseAddressLine@54(AddressLine@1000 : Text[250];VAR AddressArray@1001 : ARRAY [6] OF Text[250];Seperator@1002 : Text[1]);
    VAR
      AddrCount@1003 : Integer;
      Pos@1004 : Integer;
    BEGIN
      AddrCount := 1;
      WHILE AddressLine <> '' DO BEGIN
        Pos := STRPOS(AddressLine,Seperator);
        IF Pos <> 0 THEN BEGIN
          AddressArray[AddrCount] := COPYSTR(AddressLine,1,Pos - 1);
          AddressLine := COPYSTR(AddressLine,Pos + 1)
        END ELSE BEGIN
          AddressArray[AddrCount] := AddressLine;
          AddressLine := ''
        END;
        AddrCount += 1;
      END;
    END;

    PROCEDURE URLEncode@55(InText@1000 : Text[250]) : Text[250];
    BEGIN
      InText := ConvertString(InText,'%','%25');
      InText := ConvertString(InText,' ','%20');
      InText := ConvertString(InText,'!','%21');
      InText := ConvertString(InText,'#','%23');
      InText := ConvertString(InText,'$','%24');
      InText := ConvertString(InText,'&','%26');
      InText := ConvertString(InText,',','%2c');
      InText := ConvertString(InText,'-','%2d');
      InText := ConvertString(InText,'.','%2e');
      InText := ConvertString(InText,'è','%u00c5');
      InText := ConvertString(InText,'ù','%u00d8');
      InText := ConvertString(InText,'í','%u00c6');
      InText := ConvertString(InText,'Ä','%u00c7');
      InText := ConvertString(InText,'/','%u002f');
      InText := ConvertString(InText,'–','%u00a8');
      InText := ConvertString(InText,'÷','%u00b4');
      InText := ConvertString(InText,'⁄','%u00c0');
      InText := ConvertString(InText,'€','%u00c1');
      InText := ConvertString(InText,'‹','%u00c2');
      InText := ConvertString(InText,'ﬁ','%u00c3');
      InText := ConvertString(InText,'é','%u00c4');
      InText := ConvertString(InText,'ﬂ','%u00c8');
      InText := ConvertString(InText,'ê','%u00c9');
      InText := ConvertString(InText,'‡','%u00ca');
      InText := ConvertString(InText,'‚','%u00cb');
      InText := ConvertString(InText,'„','%u00cc');
      InText := ConvertString(InText,'‰','%u00cd');
      InText := ConvertString(InText,'Â','%u00ce');
      InText := ConvertString(InText,'Á','%u00cf');
      InText := ConvertString(InText,'•','%u00d1');
      InText := ConvertString(InText,'È','%u00d2');
      InText := ConvertString(InText,'Í','%u00d3');
      InText := ConvertString(InText,'Î','%u00d4');
      InText := ConvertString(InText,'Ï','%u00d5');
      InText := ConvertString(InText,'ô','%u00d6');
      InText := ConvertString(InText,'Ô','%u00d9');
      InText := ConvertString(InText,'','%u00da');
      InText := ConvertString(InText,'Ú','%u00db');
      InText := ConvertString(InText,'ö','%u00dc');
      InText := ConvertString(InText,'Û','%u00dd');
      InText := ConvertString(InText,'Ö','%u00e0');
      InText := ConvertString(InText,'†','%u00e1');
      InText := ConvertString(InText,'É','%u00e2');
      InText := ConvertString(InText,'ı','%u00e3');
      InText := ConvertString(InText,'Ñ','%u00e4');
      InText := ConvertString(InText,'Ü','%u00e5');
      InText := ConvertString(InText,'ë','%u00e6');
      InText := ConvertString(InText,'ä','%u00e8');
      InText := ConvertString(InText,'Ç','%u00e9');
      InText := ConvertString(InText,'à','%u00ea');
      InText := ConvertString(InText,'â','%u00eb');
      InText := ConvertString(InText,'ç','%u00ec');
      InText := ConvertString(InText,'°','%u00ed');
      InText := ConvertString(InText,'å','%u00ee');
      InText := ConvertString(InText,'ã','%u00ef');
      InText := ConvertString(InText,'§','%u00f1');
      InText := ConvertString(InText,'ï','%u00f2');
      InText := ConvertString(InText,'¢','%u00f3');
      InText := ConvertString(InText,'ì','%u00f4');
      InText := ConvertString(InText,'˘','%u00f5');
      InText := ConvertString(InText,'î','%u00f6');
      InText := ConvertString(InText,'õ','%u00f8');
      InText := ConvertString(InText,'ó','%u00f9');
      InText := ConvertString(InText,'£','%u00fa');
      InText := ConvertString(InText,'ñ','%u00fb');
      InText := ConvertString(InText,'Å','%u00fc');
      InText := ConvertString(InText,'Ï','%u00fd');
      InText := ConvertString(InText,'ò','%u00ff');
      InText := ConvertString(InText,'≠','%u00a1');
      InText := ConvertString(InText,'–','%u00a8');
      InText := ConvertString(InText,'¶','%u00aa');
      InText := ConvertString(InText,'‘','%u00af');
      InText := ConvertString(InText,'¯','%u00b0');
      InText := ConvertString(InText,'◊','%u00b8');
      InText := ConvertString(InText,'ß','%u00ba');
      InText := ConvertString(InText,'®','%u00bf');
      InText := ConvertString(InText,'Ä','%u00c7');
      InText := ConvertString(InText,'Ë','%u00d0');
      InText := ConvertString(InText,'Ì','%u00d7');
      InText := ConvertString(InText,'Ù','%u00de');
      InText := ConvertString(InText,'·','%u00df');
      InText := ConvertString(InText,'á','%u00e7');
      InText := ConvertString(InText,'˜','%u00f0');
      InText := ConvertString(InText,'ˆ','%u00f7');
      InText := ConvertString(InText,'˛','%u00fe');
      EXIT(InText);
    END;

    PROCEDURE ConvertString@56(InText@1000 : Text[250];FromValue@1001 : Text[10];ToValue@1002 : Text[10]) : Text[250];
    VAR
      ParseText@1003 : Text[261];
      Temp1@1004 : Text[250];
      Temp2@1005 : Text[250];
      Pos@1006 : Integer;
    BEGIN
      Pos := STRPOS(InText,FromValue);

      IF Pos = 0 THEN
        EXIT(InText);

      WHILE STRPOS(InText,FromValue) <> 0 DO BEGIN
        IF Pos <> 0 THEN BEGIN
          Temp1 := COPYSTR(InText,1,Pos - 1);
          Temp2 := COPYSTR(InText,Pos + 1);
          ParseText := ParseText + Temp1 + ToValue;
          InText := Temp2;
        END;
        Pos := STRPOS(InText,FromValue);
      END;

      EXIT(ParseText + InText);
    END;

    BEGIN
    END.
  }
}
