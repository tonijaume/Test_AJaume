OBJECT Codeunit 98001 Re-Calculo transfer
{
  OBJECT-PROPERTIES
  {
    Date=27/05/14;
    Time=16:58:11;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            Recalcular_agrupaciones;
          END;

  }
  CODE
  {
    VAR
      Text000@1103355048 : TextConst 'ENU=" CALCULATING GROUPING MARGINS\";ESP=" CALCULANDO MARGENES AGRUPACION\"';
      Text001@1103355049 : TextConst 'ENU="      Grouping: #1#####\";ESP="      Agrupacion: #1#####\"';
      Text002@1103355050 : TextConst 'ENU=TRNC;ESP=TRNC';
      Text004@1103355052 : TextConst 'ENU=TRNI;ESP=TRNI';
      Text005@1103355053 : TextConst 'ENU=There is no sale price for the Touroperator;ESP=No existe precio de venta para el TourOperador';
      Text006@1103355054 : TextConst 'ENU=" the day";ESP=" el dia"';
      Text007@1103355055 : TextConst 'ENU=" for the range";ESP=" para el rango"';
      Text008@1103355056 : TextConst 'ENU=There is no sale price of;ESP=No existe precio de venta de';
      Text009@1103355057 : TextConst 'ENU=" for TourOperator ";ESP=" para el TourOperador"';
      Text010@1103355058 : TextConst 'ENU=There is no sale price of adults for the touroperator;ESP=No existe precio de venta de adultos para el TourOperador';
      Text011@1103355059 : TextConst 'ENU=There is no sale price of children for the touroperator;ESP=No existe precio de venta de ni¤os para el TourOperador';
      Text012@1103355060 : TextConst 'ENU=There is no sale contract for Touroperator;ESP=No existe contrato de venta para el TourOperador';
      Text013@1103355061 : TextConst 'ENU=There is no %1 with %2 "%3" %4 "%5";ESP=No existe %1 con %2 "%3" %4 "%5"';
      Text014@1103355062 : TextConst 'ENU=There is no sale location for physical location %1 in the contract %2;ESP=No existe zona venta para zona fisica %1 en el contrato %2';
      Text015@1103355063 : TextConst 'ENU=Grouping of check-out has cost 0 when prices by return.;ESP=Una agrupacion de salida tiene coste 0 cuando precios por Ida y Vuelta.';
      Text016@1103355064 : TextConst 'ENU=Cost criterion has been applied: Furthest zone;ESP=Se ha aplicado el criterio de coste: Zona mas alejada.';
      Text017@1103355065 : TextConst 'ENU=Cost criterion has been applied: Pax per each location;ESP=Se ha aplicado el criterio de coste: Pax por cada zona.';
      Text018@1103355066 : TextConst 'ENU=There are no purchase price for routes with;ESP=No hay precios de compra para rutas con';
      Text019@1103355067 : TextConst 'ENU=" differents.";ESP=" distintas."';
      Text020@1103355068 : TextConst 'ENU=There are no prices for;ESP=No hay precios para';
      Text021@1103355069 : TextConst 'ENU=" in the route";ESP=" en la ruta"';
      Text022@1103355070 : TextConst 'ENU=" neither viceversa the day";ESP=" ni viceversa el dia"';
      Text023@1103355071 : TextConst 'ENU=Cost price does not exist for %1 for %2 paxes, with vehicle %3 the day %4;ESP=No existe precio de coste para %1 para %2  paxes, con vehiculo %3 el d¡a %4';
      Text024@1103355072 : TextConst 'ENU=" for";ESP=" para"';
      Text025@1103355073 : TextConst 'ENU=" paxes with vehicle";ESP=" paxes con vehiculo"';
      Text026@1103355074 : TextConst 'ENU=There is no purchase price of adults for;ESP=No existe precio de compra de adultos para';
      Text027@1103355075 : TextConst 'ENU=There is no pruchase price of children for;ESP=No existe precio de compra de ni¤os para';
      Text028@1103355076 : TextConst 'ENU=There is no purchase price for;ESP=No existe precio de compra para';
      Text029@1103355077 : TextConst 'ENU=" in the contract";ESP=" en el contrato"';
      Text030@1103355078 : TextConst 'ENU=There is no purchase contract %1 of day %2;ESP=No hay contrato de compra  %1 el dia %2';
      Text031@1103355079 : TextConst 'ENU=There is no purchase location for physical location %1 in the contract %2;ESP=No existe zona compra para zona fisica %1 en el contrato %2';
      Text033@1103355081 : TextConst 'ENU="WARNING: different prices have been detected in contract %1 for ";ESP=ATENCION: se han detectado tipos de precios diferentes en el contrato %1 para';
      Text034@1103355082 : TextConst 'ENU=the range of %2 paxes, date %3. RESULTANT CALCULATION CAN BE NOT CORRECT;ESP=el rango de %2 paxes, fecha %3. EL CALCULO RESULTANTE PUEDE SER INCORRECTO';
      Text035@1103355083 : TextConst 'ENU=Contract %1 in the local office %2 does not exist;ESP=No existe el contrato %1 en la delegacion %2.';
      Text036@1103355084 : TextConst 'ENU=There is no purchase price for the supplement;ESP=No existe precio de compra para el suplemento';
      cCuad@1103355000 : Codeunit 7009733;
      rRsv@1103355001 : Record 7009744;
      rElem@1103355002 : Record 7009792;
      rCab@1103355003 : Record 7009806;
      rLinTO@1103355004 : Record 7009804;
      rLinZon@1103355005 : Record 7009812;
      rCI@1103355006 : Record 7009805;
      rCI2@1103355007 : Record 7009805;
      rCI3@1103355008 : Record 7009805;
      rMargen@1103355009 : Record 7009808;
      rMargen2@1103355010 : Record 7009808;
      rMargen3@1103355011 : Record 7009808;
      rParPer@1103355012 : Record 7009701;
      rConV@1103355013 : Record 7009788;
      rPreV@1103355014 : Record 7009790;
      rConC@1103355015 : Record 7009787;
      rPreC@1103355016 : Record 7009789;
      rZonTra@1103355019 : Record 7009791;
      rZonAgr@1103355020 : Record 7009799;
      rCli@1103355021 : Record 18;
      rPro@1103355022 : Record 23;
      rIVA@1103355023 : Record 325;
      rTransport@1103355024 : Record 7009801;
      rTipoCambioDivisa@1103355025 : Record 330;
      array_elementos@1103355026 : ARRAY [10,30] OF Code[10];
      zona_fisica_auxiliar@1103355027 : Code[10];
      ultima_zona@1103355028 : Code[10];
      zona_desde@1103355029 : Code[10];
      zona_hasta@1103355030 : Code[10];
      numero_elementos@1103355031 : ARRAY [10,30] OF Integer;
      indice@1103355032 : Integer;
      indice_to@1103355033 : Integer;
      indice_zona@1103355034 : Integer;
      cantidad_elemento@1103355035 : Integer;
      paxes_calculo@1103355036 : Decimal;
      w_importe_total@1103355037 : Decimal;
      w_importe_persona@1103355038 : Decimal;
      importe_total@1103355039 : Decimal;
      porcentaje_touroperador@1103355040 : Decimal;
      encontrado@1103355041 : Boolean;
      ok@1103355042 : Boolean;
      sw_hecho@1103355043 : Boolean;
      criterio_coste@1103355044 : 'Zona mas alejada,Pax por zona';
      wTipoTraslado@1103355085 : 'Normal,Privado';
      elementos_calculo@1103355045 : Integer;
      wPrecRedImp@1103355046 : Decimal;
      wPredRedPrec@1103355047 : Decimal;
      Text037@1100217000 : TextConst 'ENU=You must specify the capacity requested to the supplier.;ESP=Debe especificar la capacidad solicitada al proveedor.';
      Text038@1100217001 : TextConst 'ENU=in the zone;ESP=en la zona';

    PROCEDURE Recalcular_agrupaciones@1100217002();
    VAR
      lrAgr@1100217000 : Record 7009796;
      cAnulAgr@1100217001 : Codeunit 7009740;
    BEGIN
      lrAgr.RESET;
      lrAgr.SETRANGE (Fecha         , 010514D, 310514D);
      lrAgr.SETFILTER(TourOperadores, '%1', '*TUI-UK*');
      lrAgr.SETRANGE (Estado        , lrAgr.Estado::Confirmado);
      IF lrAgr.FINDSET THEN
      BEGIN
        REPEAT
          rCI.RESET;
          rCI.SETRANGE (Agrupacion   , lrAgr."N§ Agrupacion");
          rCI.SETFILTER("N§ Factura" , '<>%1', '');
          rCI.SETRANGE (Concepto     , 'TRNI');
          IF rCI.FINDFIRST THEN
            cAnulAgr.Anular_Agrupacion(lrAgr);

          calcular_agrupacion(lrAgr);
        UNTIL lrAgr.NEXT = 0;
      END;
    END;

    PROCEDURE calcular_agrupacion@1(VAR rAgr@1103355000 : Record 7009796);
    VAR
      ventana@1103355002 : Dialog;
      lcFunSeg@1100217000 : Codeunit 7009751;
      lcCosteSoporte@1100217001 : Codeunit 7009750;
    BEGIN
      // calcular_agrupacion

      lcFunSeg.TienePermiso('TRF-CAL-AGR', TRUE);

      ventana.OPEN(Text000+
                   '\'+
                   Text001);
      ventana.UPDATE(1, rAgr."N§ Agrupacion");

      //. Refrescamos toda la informacion para estar seguros de que calculamos con la mejor informacion
      //. disponible
      borrar_ficheros(rAgr, FALSE);

      _CrearCabeceraCalculo(rAgr);

      crear_fichero_calculo_ingreso(rAgr); //+$008

      //. Calculo de ingresos
      calculo_ingreso_touroperador(rAgr);

      IF rAgr.FIND THEN
        CalcularMargenBeneficio(rAgr);

      ventana.CLOSE;
    END;

    PROCEDURE borrar_ficheros@2(rAgr@1103355000 : Record 7009796;solo_coste@1103355001 : Boolean);
    VAR
      rVueloAgr@1103355002 : Record 7009797;
      rHotelAgr@1103355003 : Record 7009798;
      rZonasAgr@1103355004 : Record 7009799;
      rHorasAgr@1100217000 : Record 7009800;
      lrError@1100217001 : Record 7009807;
    BEGIN
      // borrar_ficheros

      rZonasAgr.RESET;
      rZonasAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
      IF rZonasAgr.FINDSET(TRUE) THEN
        rZonasAgr.DELETEALL;

      rVueloAgr.RESET;
      rVueloAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
      IF rVueloAgr.FINDSET(TRUE) THEN
        rVueloAgr.DELETEALL;

      rHotelAgr.RESET;
      rHotelAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
      IF rHotelAgr.FINDSET(TRUE) THEN
        rHotelAgr.DELETEALL;

      rHorasAgr.RESET;
      rHorasAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
      IF rHorasAgr.FINDSET(TRUE) THEN
        rHorasAgr.DELETEALL;

      rCab.RESET;
      rCab.SETRANGE(Usuario   , USERID());
      rCab.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
      IF rCab.FINDSET(TRUE) THEN
        rCab.DELETEALL;

      rLinTO.RESET;
      rLinTO.SETRANGE(Usuario   , USERID());
      rLinTO.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
      IF rLinTO.FINDSET(TRUE) THEN
        rLinTO.DELETEALL;

      rLinZon.RESET;
      rLinZon.SETRANGE(Usuario   , USERID());
      rLinZon.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
      IF rLinZon.FINDSET(TRUE) THEN
        rLinZon.DELETEALL;

      lrError.RESET;
      lrError.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
      IF lrError.FINDSET(TRUE) THEN
        lrError.DELETEALL;

      rCI.RESET;
      rCI.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
      rCI.SETRANGE(Concepto  , 'TRNI');
      IF rCI.FINDSET(TRUE) THEN
        rCI.DELETEALL;

      COMMIT;
    END;

    PROCEDURE crear_agrupacion@10(rAgr@1103355000 : Record 7009796);
    VAR
      w_zona@1103355002 : Code[10];
      w_origen_destino@1103355003 : Code[10];
    BEGIN
      // crear_agrupacion

      rRsv.RESET;
      IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN BEGIN
        rRsv.SETCURRENTKEY("Agrupacion entrada",
                           "TourOperador facturacion",
                           "Zona entrada");
        rRsv.SETRANGE("Agrupacion entrada", rAgr."N§ Agrupacion");
      END
      ELSE BEGIN
        rRsv.SETCURRENTKEY("Agrupacion salida",
                           "TourOperador facturacion",
                           "Zona salida");
        rRsv.SETRANGE("Agrupacion salida", rAgr."N§ Agrupacion");
      END;
      IF rRsv.FINDSET(TRUE) THEN BEGIN
        rRsv.MODIFYALL("Marca Cuadrante", USERID());
      END;

      // Llamar a Agrupar reservas y refrescar los campos informativos de la agrupacion

      cCuad.Crea_Ficheros_Agr(rAgr);
      IF rRsv.FINDSET(TRUE) THEN BEGIN
        REPEAT
          IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN BEGIN
            w_zona := rRsv."Zona servicio entrada";
            w_origen_destino := rRsv."IATA destino entrada";
          END
          ELSE BEGIN
            w_zona := rRsv."Zona servicio salida";
            w_origen_destino := rRsv."IATA origen salida";
          END;
          rRsv."Marca Cuadrante" := '';
          rRsv.MODIFY;
        UNTIL rRsv.NEXT = 0;
      END;

      // Campo Vuelos
      cCuad.CampoVuelosAgrupacion(rAgr."N§ Agrupacion", rAgr.Vuelos, rAgr."N§ vuelos");

      // Campo TTOO
      cCuad.CampoTouroperadoresAgr(rAgr."N§ Agrupacion", rAgr.TourOperadores);

      // Campo Zonas
      cCuad.CampoZonasAgrupacion(rAgr."N§ Agrupacion", rAgr.Zonas);

      rAgr.Zona := w_zona;

      // ----  He incluido este control para aquellos casos en que el usuario quiera seleccionar de que aeropuerto tomar los
      // ----  los precios

      IF NOT rAgr."Origen/Destino manual" THEN
        rAgr."Origen/Destino transfer" := w_origen_destino;

      rAgr.AseguraHorarioSalidas;
      rAgr.MODIFY;
    END;

    PROCEDURE crear_fichero_calculo_ingreso@12(rAgr@1103355000 : Record 7009796);
    VAR
      TourOperador_auxiliar@1103355001 : Code[10];
    BEGIN
      // crear_fichero_calculo_ingreso

      rParPer.FINDFIRST;

      CLEAR(array_elementos);
      CLEAR(numero_elementos);

      rRsv.RESET;
      IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN BEGIN
        rRsv.SETCURRENTKEY("Agrupacion entrada",
                           "TourOperador facturacion",
                           "Zona entrada");
        rRsv.SETRANGE("Agrupacion entrada", rAgr."N§ Agrupacion");
      END
      ELSE BEGIN
        rRsv.SETCURRENTKEY("Agrupacion salida",
                           "TourOperador facturacion",
                           "Zona salida");
        rRsv.SETRANGE("Agrupacion salida",  rAgr."N§ Agrupacion");
      END;
      indice_to := 0;
      TourOperador_auxiliar := '';
      IF rRsv.FINDSET THEN BEGIN
        REPEAT
          IF TourOperador_auxiliar <> rRsv."TourOperador facturacion" THEN BEGIN
            rLinTO.INIT;
            rLinTO.Usuario := USERID();
            rLinTO.Agrupacion := rAgr."N§ Agrupacion";
            rLinTO.TourOperador := rRsv."TourOperador facturacion";
            rLinTO.INSERT;
            indice_to := indice_to + 1;
            TourOperador_auxiliar := rRsv."TourOperador facturacion";
          END;
          rElem.RESET;
          rElem.SETRANGE(Delegacion  , rRsv.Delegacion);
          rElem.SETRANGE("N§ Reserva", rRsv."N§ Reserva");
          IF rElem.FINDSET THEN BEGIN
            REPEAT
              IF rElem.Humano THEN BEGIN
                CASE rElem."Tipo elemento" OF
                  rParPer."Codigo Adulto":
                  BEGIN
                    IF NOT rRsv."Invitado TourOperador" THEN BEGIN
                      rLinTO."Adultos venta" := rLinTO."Adultos venta" + rElem."Numero elementos";
                      rCab."Adulto venta" := rCab."Adulto venta" + rElem."Numero elementos";
                    END;
                    IF NOT rRsv."Invitado Transportista" THEN
                      rLinTO."Adultos compra" := rLinTO."Adultos compra" + rElem."Numero elementos";
                  END;
                  rParPer."Codigo Ni¤o":
                  BEGIN
                    IF NOT rRsv."Invitado TourOperador" THEN BEGIN
                      rLinTO."Ni¤os venta" := rLinTO."Ni¤os venta" + rElem."Numero elementos";
                      rCab."Ni¤os venta" := rCab."Ni¤os venta" + rElem."Numero elementos";
                    END;
                    IF NOT rRsv."Invitado Transportista" THEN
                      rLinTO."Ni¤os compra" := rLinTO."Ni¤os compra" + rElem."Numero elementos";
                  END;
                  rParPer."Codigo Infant":
                  BEGIN
                    IF NOT rRsv."Invitado TourOperador" THEN BEGIN
                      rLinTO."Infants venta" := rLinTO."Infants venta" + rElem."Numero elementos";
                      rCab."Infants venta" := rCab."Infants venta" + rElem."Numero elementos";
                    END;
                    IF NOT rRsv."Invitado Transportista" THEN
                      rLinTO."Infants compra" := rLinTO."Infants compra" + rElem."Numero elementos";
                  END;
                END;
              END
              ELSE BEGIN
                IF NOT rRsv."Invitado TourOperador" THEN BEGIN
                  rLinTO."Elementos venta" := rLinTO."Elementos venta" + rElem."Numero elementos";
                  rCab."Elementos venta" := rCab."Elementos venta" + rElem."Numero elementos";
                  busca_elemento(rElem."Tipo elemento", indice_to, rElem."Numero elementos");
                END;
              END;
            UNTIL rElem.NEXT = 0;
          END;
          rElem.RESET;
          rCab.MODIFY;
          rLinTO.MODIFY;
        UNTIL rRsv.NEXT = 0;
      END;
      COMMIT;
    END;

    PROCEDURE busca_elemento@18(elemento@1103355000 : Code[10];VAR indice_temporal@1103355001 : Integer;nElem@1103355002 : Integer);
    BEGIN
      // busca_elemento

      encontrado := FALSE;
      indice := 1;
      WHILE NOT encontrado DO BEGIN
        IF array_elementos[indice_temporal][indice] = '' THEN BEGIN
          array_elementos[indice_temporal][indice] := elemento;
          numero_elementos[indice_temporal][indice] := nElem;
          encontrado := TRUE;
        END
        ELSE BEGIN
          IF array_elementos[indice_temporal][indice] = elemento THEN BEGIN
            numero_elementos[indice_temporal][indice] := numero_elementos[indice_temporal][indice] + nElem;
            encontrado := TRUE;
          END
          ELSE BEGIN
            indice := indice + 1;
          END;
        END;
      END;
    END;

    PROCEDURE calculo_ingreso_touroperador@5(rAgr@1103355000 : Record 7009796);
    BEGIN
      // calculo_ingreso_touroperador

      indice    := 1;
      indice_to := 0;

      rLinTO.RESET;
      rLinTO.SETRANGE(Usuario   , USERID());
      rLinTO.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
      IF rLinTO.FINDSET THEN BEGIN
        REPEAT
          indice_to := indice_to + 1;
          ok := busca_contrato_venta(rAgr, rConV, rLinTO.TourOperador, TRUE);
          IF ok THEN BEGIN
            rLinTO."Contrato venta" := rConV."N§ Contrato Venta";
            rLinTO."C¢d. divisa"    := rConV."C¢d. divisa";
            rLinTO.MODIFY;

            traduce_zona_venta(rAgr);
            calculo_ingreso(rAgr);
          END;
        UNTIL rLinTO.NEXT = 0;
      END;
    END;

    PROCEDURE calculo_ingreso@4(rAgr@1103355000 : Record 7009796);
    BEGIN
      // calculo_ingreso

      CASE rConV."Tipo de Facturacion" OF
        rConV."Tipo de Facturacion"::Separado:
          CASE rConV."Tipo Precio" OF
            rConV."Tipo Precio"::"Una via":      ingreso_normal(rAgr, TRUE);
            rConV."Tipo Precio"::"Ida y Vuelta": dividir_ingreso(rAgr);
          END;
        rConV."Tipo de Facturacion"::Llegada:
          CASE rConV."Tipo Precio" OF
            rConV."Tipo Precio"::"Una via":      multiplicar_ingreso(rAgr);
            rConV."Tipo Precio"::"Ida y Vuelta": facturar_juntos_ingreso(rAgr);
          END;
      END;
    END;

    PROCEDURE ingreso_normal@6(rAgr@1103355000 : Record 7009796;calculo_salida@1103355001 : Boolean);
    BEGIN
      // ingreso_normal

      rPreV.RESET;
      rPreV.SETRANGE(Delegacion     , rConV.Delegacion);
      rPreV.SETRANGE("N§ Contrato"  , rConV."N§ Contrato Venta");
      rPreV.SETRANGE(Activo         , TRUE);

      // Tomamos los precios por zona de venta

      rZonAgr.SETCURRENTKEY("Orden zona");
      rZonAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
      rZonAgr.SETRANGE("Tipo transfer", rZonAgr."Tipo transfer"::Entrada);
      rZonAgr.SETRANGE("Tipo zona"    , rZonAgr."Tipo zona"::Venta);
      rZonAgr.SETRANGE(TourOperador   , rLinTO.TourOperador);
      IF rZonAgr.FINDSET  THEN BEGIN
        REPEAT
          rPreV.SETRANGE("Codigo precio", rPreV."Codigo precio"::"Precio Base");
          rPreV.SETRANGE(Destino, rZonAgr.Zona);
          ingreso_base(rAgr);
          rPreV.SETRANGE("Codigo precio", rPreV."Codigo precio"::Suplemento);
          suplemento_ingreso(rAgr);
          rMargen.RESET;
        UNTIL rZonAgr.NEXT = 0;
      END;

      // calculo ingreso salidas

      IF calculo_salida THEN BEGIN
        rZonAgr.SETRANGE("Tipo transfer", rZonAgr."Tipo transfer"::Salida);
        IF rZonAgr.FINDSET THEN BEGIN
          REPEAT
            rPreV.SETRANGE("Codigo precio", rPreV."Codigo precio"::"Precio Base");
            rPreV.SETRANGE(Destino, rZonAgr.Zona);
            ingreso_base(rAgr);
            rPreV.SETRANGE("Codigo precio", rPreV."Codigo precio"::Suplemento);
            suplemento_ingreso(rAgr);
            rMargen.RESET;
          UNTIL rZonAgr.NEXT = 0;
        END;
      END;
      rPreV.RESET;
    END;

    PROCEDURE dividir_ingreso@29(rAgr@1103355000 : Record 7009796);
    BEGIN
      // dividir_ingreso

      //. Primero hacemos el calculo normal
      ingreso_normal(rAgr, FALSE);

      rZonAgr.SETCURRENTKEY("Orden zona");
      rZonAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
      rZonAgr.SETRANGE("Tipo transfer", rAgr."Tipo transfer");
      rZonAgr.SETRANGE("Tipo zona"    , rZonAgr."Tipo zona"::Venta);
      rZonAgr.SETRANGE(TourOperador   , rLinTO.TourOperador);
      IF rZonAgr.FINDSET  THEN BEGIN
        REPEAT
          CASE rAgr."Tipo transfer" OF
            rAgr."Tipo transfer"::Entrada:
            BEGIN
              CASE rAgr."Tipo Calculo" OF
                rAgr."Tipo Calculo"::Margenes:
                BEGIN
                  rMargen.RESET;
                  rMargen.SETCURRENTKEY(Usuario,
                                        Agrupacion,
                                        TourOperador,
                                        Zona,
                                        Concepto);
                  rMargen.SETRANGE(Usuario     , USERID());
                  rMargen.SETRANGE(Agrupacion  , rAgr."N§ Agrupacion");
                  rMargen.SETRANGE(TourOperador, rLinTO.TourOperador);
                  rMargen.SETRANGE(Zona        , rZonAgr.Zona);
                  rMargen.SETRANGE(Concepto    , Text004);
                  IF rMargen.FINDSET THEN BEGIN
                    rMargen.CALCSUMS(Importe);
                    w_importe_total := rMargen.Importe / 2;
                    paxes_calculo := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    IF paxes_calculo <> 0 THEN
                      w_importe_persona := w_importe_total / paxes_calculo;
                    CLEAR(rMargen);
                    rMargen.FINDSET(TRUE);
                    REPEAT
                      // Presici¢n redondeo
                      wPrecRedImp := Precision(rMargen."C¢d. divisa",1);
                      wPredRedPrec:= Precision(rMargen."C¢d. divisa",2);
                      IF rMargen."Precio x Pax" <> 0 THEN
                        rMargen."Precio x Pax" := ROUND(rMargen."Precio x Pax" / 2, wPredRedPrec);
                      IF rMargen."Precio x Vehiculo" <> 0 THEN
                        rMargen."Precio x Vehiculo" := ROUND(rMargen."Precio x Vehiculo" / 2, wPredRedPrec);
                      IF rMargen.Importe <> 0 THEN
                        rMargen.Importe := ROUND(rMargen.Importe / 2, wPrecRedImp);
                      IF rMargen."Importe sin impuesto" <> 0 THEN
                        rMargen."Importe sin impuesto" := ROUND(rMargen."Importe sin impuesto" / 2, wPrecRedImp);
                      IF rMargen."Importe con impuesto" <> 0 THEN
                        rMargen."Importe con impuesto" := ROUND(rMargen."Importe con impuesto" / 2, wPrecRedImp);
                      IF rMargen."Importe sin impuesto DL" <> 0 THEN
                        rMargen."Importe sin impuesto DL" := ROUND(rMargen."Importe sin impuesto DL"/ 2);
                      IF rMargen."Importe con impuesto DL" <> 0 THEN
                        rMargen."Importe con impuesto DL" := ROUND(rMargen."Importe con impuesto DL"/ 2);
                      rMargen.MODIFY;
                    UNTIL rMargen.NEXT = 0;
                  END;
                  rMargen.RESET;

                  rRsv.RESET;
                  rRsv.SETCURRENTKEY("Agrupacion entrada",
                                     "TourOperador facturacion");
                  rRsv.SETRANGE("Agrupacion entrada"      , rAgr."N§ Agrupacion");
                  rRsv.SETRANGE("TourOperador facturacion", rLinTO.TourOperador);
                  rRsv.SETRANGE("Zona venta entrada"      , rZonAgr.Zona);
                  rRsv.SETRANGE("Invitado TourOperador"   , FALSE);
                  IF rRsv.FINDSET(TRUE) THEN
                  BEGIN
                    REPEAT
                      rRsv.CALCFIELDS(o_Personas);
                      rRsv."Importe margen" := ROUND(w_importe_persona * rRsv.o_Personas, Precision(rRsv."C¢d. divisa",1));
                      rRsv.MODIFY;
                    UNTIL rRsv.NEXT = 0;
                  END;
                END;

                rAgr."Tipo Calculo"::"Coste/Ingreso":
                BEGIN
                  rCI.RESET;
                  rCI.SETCURRENTKEY(Agrupacion,
                                       TourOperador,
                                       Destino,
                                       Concepto);
                  rCI.SETRANGE(Agrupacion  , rAgr."N§ Agrupacion");
                  rCI.SETRANGE(TourOperador, rLinTO.TourOperador);
                  rCI.SETRANGE(Destino        , rZonAgr.Zona);
                  rCI.SETRANGE(Concepto    , Text004);
                  IF rCI.FINDSET THEN BEGIN
                    rCI.CALCSUMS(Importe);
                    w_importe_total := rCI.Importe / 2;
                    paxes_calculo := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    IF paxes_calculo <> 0 THEN
                      w_importe_persona := w_importe_total / paxes_calculo;
                 //   CLEAR(rCI);
                    rCI.FINDSET(TRUE);
                    REPEAT
                      wPrecRedImp := Precision(rCI."Cod. divisa",1);
                      wPredRedPrec:= Precision(rCI."Cod. divisa",2);

                      IF rCI."Precio x Pax" <> 0 THEN
                        rCI."Precio x Pax" := ROUND(rCI."Precio x Pax" / 2, wPredRedPrec);
                      IF rCI."Precio x Vehiculo" <> 0 THEN
                        rCI."Precio x Vehiculo" := ROUND(rCI."Precio x Vehiculo" / 2, wPredRedPrec);
                      IF rCI.Importe <> 0 THEN
                        rCI.Importe := ROUND(rCI.Importe / 2 , wPrecRedImp);
                      IF rCI."Importe sin impuesto" <> 0 THEN BEGIN
                        rCI."Importe sin impuesto"    := ROUND(rCI."Importe sin impuesto" / 2, wPrecRedImp);
                      END;
                      IF rCI."Importe sin impuestos (DL)" <> 0 THEN BEGIN
                        rCI."Importe sin impuestos (DL)" := ROUND(rCI."Importe sin impuestos (DL)" / 2);
                      END;
                      IF rCI."Importe con impuesto" <> 0 THEN BEGIN
                        rCI."Importe con impuesto"    := ROUND(rCI."Importe con impuesto"    / 2, wPrecRedImp);
                      END;
                      IF rCI."Importe con impuestos (DL)" <> 0 THEN BEGIN
                        rCI."Importe con impuestos (DL)" := ROUND(rCI."Importe con impuestos (DL)" / 2);
                      END;
                      rCI.MODIFY;
                    UNTIL rCI.NEXT = 0;
                  END;
                  rCI.RESET;

                  rRsv.RESET;
                  rRsv.SETCURRENTKEY("Agrupacion entrada",
                                     "TourOperador facturacion");
                  rRsv.SETRANGE("Agrupacion entrada"      , rAgr."N§ Agrupacion");
                  rRsv.SETRANGE("TourOperador facturacion", rLinTO.TourOperador);
                  rRsv.SETRANGE("Zona venta entrada"      , rZonAgr.Zona);
                  rRsv.SETRANGE("Invitado TourOperador"   , FALSE);
                  IF rRsv.FINDSET(TRUE) THEN BEGIN
                    REPEAT
                      rRsv.CALCFIELDS(o_Personas);
                      rRsv."Importe Ingreso" := ROUND(w_importe_persona * rRsv.o_Personas, Precision(rRsv."C¢d. divisa",1));
                      rRsv.MODIFY;
                    UNTIL rRsv.NEXT = 0;
                  END;
                  rRsv.RESET;
                END;
              END;
            END;

            // Calculando la salida
            rAgr."Tipo transfer"::Salida: {* Ya esta calculado en la entrada *}
            BEGIN
              rRsv.RESET;
              rRsv.SETCURRENTKEY("Agrupacion salida",
                                 "TourOperador facturacion",
                                 "Zona venta salida");
              rRsv.SETRANGE("Agrupacion salida"       , rAgr."N§ Agrupacion");
              rRsv.SETRANGE("TourOperador facturacion", rLinTO.TourOperador);
              rRsv.SETRANGE("Zona venta salida"       , rZonAgr.Zona);
              IF rRsv.FINDSET THEN BEGIN
                CASE rAgr."Tipo Calculo" OF
                  rAgr."Tipo Calculo"::Margenes:
                  BEGIN
                    rRsv.CALCSUMS("Importe margen");
                    w_importe_total := rRsv."Importe margen";
                    CLEAR(rMargen);
                    rMargen."Tipo elemento" := rMargen."Tipo elemento"::Persona;
                    rMargen."N§ Vehiculos" := 1;
                    rMargen."Tipo Vehiculo" := rAgr."Tipo vehiculo";
                    rMargen."Cantidad aplicada" := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    rMargen."Cantidad Real" := rMargen."Cantidad aplicada";
                    rMargen."Tipo Pax" := '';
                    rMargen."Precio x Pax" := 0;
                    rMargen.Importe := w_importe_total;
                  END;
                  rAgr."Tipo Calculo"::"Coste/Ingreso":
                  BEGIN
                    rRsv.CALCSUMS("Importe Ingreso");
                    w_importe_total := rRsv."Importe Ingreso";
                    CLEAR(rCI);
                    rCI."Tipo linea"     := rCI."Tipo linea"::Persona;
                    rCI."N§ Vehiculos"      := 1;
                    rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
                    rCI."Cantidad aplicada" := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    rCI."Cantidad Real"     := rCI."Cantidad aplicada";
                    rCI."Tipo Pax"          := '';
                    rCI."Precio x Pax"      := 0;
                    rCI.Importe             := w_importe_total;
                  END;
                END;
                comunes_ingreso(rAgr);
              END;
              rRsv.RESET;
            END;
          END;
        UNTIL rZonAgr.NEXT = 0;
      END;
    END;

    PROCEDURE multiplicar_ingreso@31(rAgr@1103355000 : Record 7009796);
    BEGIN
      // multiplicar_ingreso

      //. Primero hacemos el calculo normal

      ingreso_normal(rAgr, FALSE);

      rZonAgr.SETCURRENTKEY("Orden zona");
      rZonAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
      rZonAgr.SETRANGE("Tipo transfer", rAgr."Tipo transfer");
      rZonAgr.SETRANGE("Tipo zona"    , rZonAgr."Tipo zona"::Venta);
      rZonAgr.SETRANGE(TourOperador   , rLinTO.TourOperador);
      IF rZonAgr.FINDSET  THEN BEGIN
        REPEAT
          CASE rAgr."Tipo transfer" OF
            rAgr."Tipo transfer"::Entrada:
            BEGIN
              CASE rAgr."Tipo Calculo" OF
                rAgr."Tipo Calculo"::Margenes:
                BEGIN
                  rMargen.RESET;
                  rMargen.SETCURRENTKEY(Usuario,
                                        Agrupacion,
                                        TourOperador,
                                        Zona,
                                        Concepto);
                  rMargen.SETRANGE(Usuario     , USERID());
                  rMargen.SETRANGE(Agrupacion  , rAgr."N§ Agrupacion");
                  rMargen.SETRANGE(TourOperador, rLinTO.TourOperador);
                  rMargen.SETRANGE(Zona        , rZonAgr.Zona);
                  rMargen.SETRANGE(Concepto    , Text004);
                  IF rMargen.FINDSET THEN BEGIN
                    rMargen.CALCSUMS(Importe);
                    w_importe_total := rMargen.Importe;
                    paxes_calculo := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    IF paxes_calculo <> 0 THEN
                      w_importe_persona := w_importe_total / paxes_calculo;
                    CLEAR(rMargen);
                  END;
                  rMargen.RESET;
                END;
                rAgr."Tipo Calculo"::"Coste/Ingreso":
                BEGIN
                  rCI.RESET;
                  rCI.SETCURRENTKEY(Agrupacion,
                                       TourOperador,
                                       Destino,
                                       Concepto);
                  rCI.SETRANGE(Agrupacion  , rAgr."N§ Agrupacion");
                  rCI.SETRANGE(TourOperador, rLinTO.TourOperador);
                  rCI.SETRANGE(Destino        , rZonAgr.Zona);
                  rCI.SETRANGE(Concepto    , Text004);

                  //JPT 05/07/05 En CI tambien rellenamos el importe margen en reservas ******************************
                  IF rCI.FINDSET THEN BEGIN
                    rCI.CALCSUMS(Importe);
                    w_importe_total := rCI.Importe;
                    paxes_calculo := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    IF paxes_calculo <> 0 THEN
                      w_importe_persona := w_importe_total / paxes_calculo;
                  END;
                  //****************************************************************************************

                  IF rCI.FINDSET(TRUE) THEN BEGIN
                    REPEAT
                      wPrecRedImp := Precision(rCI."Cod. divisa",1);
                      wPredRedPrec:= Precision(rCI."Cod. divisa",2);

                      IF rCI."Precio x Pax" <> 0 THEN
                        rCI."Precio x Pax" := ROUND(rCI."Precio x Pax" * 2, wPredRedPrec);
                      IF rCI."Precio x Vehiculo" <> 0 THEN
                        rCI."Precio x Vehiculo" := ROUND(rCI."Precio x Vehiculo" * 2, wPredRedPrec);
                      IF rCI.Importe <> 0 THEN
                        rCI.Importe := ROUND(rCI.Importe * 2, wPrecRedImp);
                      IF rCI."Importe sin impuesto" <> 0 THEN
                        rCI."Importe sin impuesto" := ROUND(rCI."Importe sin impuesto" * 2, wPrecRedImp);
                      IF rCI."Importe con impuesto" <> 0 THEN
                        rCI."Importe con impuesto" := ROUND(rCI."Importe con impuesto" * 2, wPrecRedImp);
                      IF rCI."Importe sin impuestos (DL)" <> 0 THEN
                        rCI."Importe sin impuestos (DL)" := ROUND(rCI."Importe sin impuestos (DL)" * 2);
                      IF rCI."Importe con impuestos (DL)" <> 0 THEN
                        rCI."Importe con impuestos (DL)" := ROUND(rCI."Importe con impuestos (DL)" * 2);
                      rCI.MODIFY;
                    UNTIL rCI.NEXT = 0;
                  END;
                  rCI.RESET;
                END;
              END;

              rRsv.RESET;
              rRsv.SETCURRENTKEY("Agrupacion entrada",
                                 "TourOperador facturacion");
              rRsv.SETRANGE("Agrupacion entrada"      , rAgr."N§ Agrupacion");
              rRsv.SETRANGE("TourOperador facturacion", rLinTO.TourOperador);
              rRsv.SETRANGE("Zona venta entrada"      , rZonAgr.Zona);
              rRsv.SETRANGE("Invitado TourOperador"   , FALSE);
              IF rRsv.FINDSET(TRUE) THEN BEGIN
                REPEAT
                  rRsv.CALCFIELDS(o_Personas);
                  rRsv."Importe margen" := ROUND(w_importe_persona * rRsv.o_Personas, Precision(rRsv."C¢d. divisa",1));
                  rRsv.MODIFY;
                UNTIL rRsv.NEXT = 0;
              END;

            END;

            //. Calculo de la salida
            rAgr."Tipo transfer"::Salida: {* Ya esta calculado en la entrada *}
            BEGIN
              rRsv.RESET;
              rRsv.SETCURRENTKEY("Agrupacion salida",
                                 "TourOperador facturacion",
                                 "Zona venta salida");
              rRsv.SETRANGE("Agrupacion salida"       , rAgr."N§ Agrupacion");
              rRsv.SETRANGE("TourOperador facturacion", rLinTO.TourOperador);
              rRsv.SETRANGE("Zona venta salida"       , rZonAgr.Zona);
              IF rRsv.FINDSET THEN BEGIN
                rRsv.CALCSUMS("Importe margen");
                w_importe_total := rRsv."Importe margen";
                CASE rAgr."Tipo Calculo" OF
                  rAgr."Tipo Calculo"::Margenes:
                  BEGIN
                    CLEAR(rMargen);
                    rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Persona;
                    rMargen."N§ Vehiculos"      := 1;
                    rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
                    rMargen."Cantidad aplicada" := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    rMargen."Cantidad Real"     := rMargen."Cantidad aplicada";
                    rMargen."Tipo Pax"          := '';
                    rMargen."Precio x Pax"      := 0;
                    rMargen.Importe             := w_importe_total;
                  END;
                  rAgr."Tipo Calculo"::"Coste/Ingreso":
                  BEGIN
                    rRsv.CALCSUMS("Importe Ingreso");
                    w_importe_total := rRsv."Importe Ingreso";
                    CLEAR(rCI);
                    rCI."Tipo linea"     := rCI."Tipo linea"::Persona;
                    rCI."N§ Vehiculos"      := 1;
                    rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
                    rCI."Cantidad aplicada" := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    rCI."Cantidad Real"     := rCI."Cantidad aplicada";
                    rCI."Tipo Pax"          := '';
                    rCI."Precio x Pax"      := 0;
                    rCI.Importe             := 0;
                    rCI.Destino                := rZonAgr.Zona;
                  END;
                END;
                comunes_ingreso(rAgr);
              END;
              rRsv.RESET;
            END;
          END;
        UNTIL rZonAgr.NEXT = 0;
      END;
    END;

    PROCEDURE facturar_juntos_ingreso@35(rAgr@1103355000 : Record 7009796);
    BEGIN
      // facturar_juntos_ingreso

      ingreso_normal(rAgr, FALSE);

      rZonAgr.SETCURRENTKEY("Orden zona");
      rZonAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
      rZonAgr.SETRANGE("Tipo transfer", rAgr."Tipo transfer");
      rZonAgr.SETRANGE("Tipo zona"    , rZonAgr."Tipo zona"::Venta);
      rZonAgr.SETRANGE(TourOperador   , rLinTO.TourOperador);
      IF rZonAgr.FINDSET  THEN BEGIN
        REPEAT
          CASE rAgr."Tipo transfer" OF
            rAgr."Tipo transfer"::Entrada:
            BEGIN
              CASE rAgr."Tipo Calculo" OF
                rAgr."Tipo Calculo"::Margenes:
                BEGIN
                  rMargen.RESET;
                  rMargen.SETCURRENTKEY(Usuario,
                                        Agrupacion,
                                        TourOperador,
                                        Zona,
                                        Concepto);
                  rMargen.SETRANGE(Usuario     , USERID());
                  rMargen.SETRANGE(Agrupacion  , rAgr."N§ Agrupacion");
                  rMargen.SETRANGE(TourOperador, rLinTO.TourOperador);
                  rMargen.SETRANGE(Zona        , rZonAgr.Zona);
                  rMargen.SETRANGE(Concepto    , Text004);
                  IF rMargen.FINDFIRST THEN BEGIN
                    rMargen.CALCSUMS(Importe);
                    w_importe_total := rMargen.Importe / 2;
                    paxes_calculo := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    IF paxes_calculo <> 0 THEN
                      w_importe_persona := w_importe_total / paxes_calculo;
                    rMargen.FINDSET;
                    REPEAT
                      wPrecRedImp := Precision(rMargen."C¢d. divisa",1);
                      wPredRedPrec:= Precision(rMargen."C¢d. divisa",2);

                      IF rMargen.Importe <> 0 THEN
                        rMargen.Importe := ROUND(rMargen.Importe / 2, wPrecRedImp);
                      IF rMargen."Importe sin impuesto" <> 0 THEN
                        rMargen."Importe sin impuesto" := ROUND(rMargen."Importe sin impuesto" / 2, wPrecRedImp);
                      IF rMargen."Importe con impuesto" <> 0 THEN
                        rMargen."Importe con impuesto" := ROUND(rMargen."Importe con impuesto" / 2, wPrecRedImp);
                      IF rMargen."Importe sin impuesto DL" <> 0 THEN
                        rMargen."Importe sin impuesto DL" := ROUND(rMargen."Importe sin impuesto DL" / 2);
                      IF rMargen."Importe con impuesto DL" <> 0 THEN
                        rMargen."Importe con impuesto DL" := ROUND(rMargen."Importe con impuesto DL" / 2);
                      rMargen.MODIFY;
                    UNTIL rMargen.NEXT = 0;
                  END;
                  rMargen.RESET;
                END;
                // JPT 05/07/05 En CI tambien rellenamos el importe margen en reservas
                rAgr."Tipo Calculo"::"Coste/Ingreso": BEGIN
                  rCI.RESET;
                  rCI.SETCURRENTKEY(Agrupacion,
                                       TourOperador,
                                       Destino,
                                       Concepto);
                  rCI.SETRANGE(Agrupacion  , rAgr."N§ Agrupacion");
                  rCI.SETRANGE(TourOperador, rLinTO.TourOperador);
                  rCI.SETRANGE(Destino        , rZonAgr.Zona);
                  rCI.SETRANGE(Concepto    , Text004);
                  IF rCI.FINDFIRST THEN BEGIN
                    rCI.CALCSUMS(Importe);
                    w_importe_total := rCI.Importe / 2;
                    paxes_calculo := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    IF paxes_calculo <> 0 THEN
                      w_importe_persona := w_importe_total / paxes_calculo;
                  END;
                END;
                // **************************************************************************************************
              END;

              rRsv.RESET;
              rRsv.SETCURRENTKEY("Agrupacion entrada",
                                     "TourOperador facturacion");
              rRsv.SETRANGE("Agrupacion entrada"      , rAgr."N§ Agrupacion");
              rRsv.SETRANGE("TourOperador facturacion", rLinTO.TourOperador);
              rRsv.SETRANGE("Zona venta entrada"      , rZonAgr.Zona);
              rRsv.SETRANGE("Invitado TourOperador"   , FALSE);
              IF rRsv.FINDSET THEN BEGIN
                REPEAT
                  rRsv.CALCFIELDS(o_Personas);
                  rRsv."Importe margen" := ROUND(w_importe_persona * rRsv.o_Personas, Precision(rRsv."C¢d. divisa",1));
                  rRsv.MODIFY;
                UNTIL rRsv.NEXT = 0;
              END;

            END;
            rAgr."Tipo transfer"::Salida: {* Ya esta calculado en la entrada *}
            BEGIN
              rRsv.RESET;
              rRsv.SETCURRENTKEY("Agrupacion salida",
                                 "TourOperador facturacion",
                                 "Zona venta salida");
              rRsv.SETRANGE("Agrupacion salida"       , rAgr."N§ Agrupacion");
              rRsv.SETRANGE("TourOperador facturacion", rLinTO.TourOperador);
              rRsv.SETRANGE("Zona venta salida"       , rZonAgr.Zona);
              IF rRsv.FINDSET THEN BEGIN
                CASE rAgr."Tipo Calculo" OF
                  rAgr."Tipo Calculo"::Margenes:
                  BEGIN
                    rRsv.CALCSUMS("Importe margen");
                    w_importe_total := ROUND(rRsv."Importe margen", Precision(rRsv."C¢d. divisa",1));
                    paxes_calculo := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    CLEAR(rMargen);
                    rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Persona;
                    rMargen."N§ Vehiculos"      := 1;
                    rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
                    rMargen."Cantidad aplicada" := paxes_calculo;
                    rMargen."Cantidad Real"     := paxes_calculo;
                    rMargen."Tipo Pax"          := '';
                    rMargen."Precio x Pax"      := 0;
                    rMargen.Importe             := w_importe_total;
                  END;
                  rAgr."Tipo Calculo"::"Coste/Ingreso":
                  BEGIN
                    paxes_calculo := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
                    CLEAR(rCI);
                    rCI."Tipo linea"     := rCI."Tipo linea"::Persona;
                    rCI."N§ Vehiculos"      := 1;
                    rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
                    rCI."Cantidad aplicada" := paxes_calculo;
                    rCI."Cantidad Real"     := paxes_calculo;
                    rCI."Tipo Pax"          := '';
                    rCI."Precio x Pax"      := 0;
                    rCI.Importe             := 0;
                    rCI.Destino                := rZonAgr.Zona;
                  END;
                END;
                comunes_ingreso(rAgr);
              END;
              rRsv.RESET;
            END;
          END;
        UNTIL rZonAgr.NEXT = 0;
      END;
    END;

    PROCEDURE ingreso_base@15(rAgr@1103355000 : Record 7009796);
    VAR
      lwPaxesPrecio@1100217000 : Decimal;
    BEGIN
      // ingreso_base

      CLEAR(rMargen);
      CLEAR(rCI);
      sw_hecho := FALSE;

      IF rAgr."Sumar pasaje touroperadores" THEN
      BEGIN
        //+$013 <
        IF rConV."Buscar precio multizona" = rConV."Buscar precio multizona"::Servicio THEN
        BEGIN
          IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN
          BEGIN
            rAgr.CALCFIELDS("Personas entrada");
            lwPaxesPrecio := rAgr."Personas entrada";
          END
          ELSE
          BEGIN
            rAgr.CALCFIELDS("Personas salida");
            lwPaxesPrecio := rAgr."Personas salida";
          END;
        END
        ELSE
          lwPaxesPrecio := adultos_to_zona(rZonAgr, TRUE, FALSE) + ni¤os_to_zona(rZonAgr, TRUE, FALSE);
        //+$013 >
      END
      ELSE
      BEGIN
        // Por contrato se puede indicar si se quiere buscar el precio por los paxes que van en el servicio o por los paxes
        // de entrada del Touroperador en el mismo aeropuerto

        IF rConV."Busca precios por" = rConV."Busca precios por"::"Pasaje servicio" THEN
        BEGIN
          //+$013
          IF rConV."Buscar precio multizona" = rConV."Buscar precio multizona"::Servicio THEN
            lwPaxesPrecio := rLinTO."Adultos venta" + rLinTO."Ni¤os venta"
          ELSE
            lwPaxesPrecio := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);
        END
        ELSE
        BEGIN
          //+$013
          IF rConV."Buscar precio multizona" = rConV."Buscar precio multizona"::Servicio THEN
            lwPaxesPrecio := BuscaEntradasTouroperador(rLinTO, '')
          ELSE
            lwPaxesPrecio := BuscaEntradasTouroperador(rLinTO, rZonAgr.Zona);
        END;
      END;

      IF rAgr."Transfer Privado" THEN
        wTipoTraslado := wTipoTraslado::Privado
      ELSE
        wTipoTraslado := wTipoTraslado::Normal;

      rPreV.SETFILTER("Fecha desde"  , '<=%1', rAgr.Fecha);
      rPreV.SETFILTER("Fecha hasta"  , '>=%1', rAgr.Fecha);
      rPreV.SETFILTER("Rango desde"  , '<=%1', lwPaxesPrecio);
      rPreV.SETFILTER("Rango hasta"  , '>=%1', lwPaxesPrecio);
      rPreV.SETRANGE ("Tipo vehiculo", rAgr."Tipo vehiculo");
      rPreV.SETRANGE ("Tipo elemento", '');
      rPreV.SETRANGE ("Tipo Traslado", wTipoTraslado);
      rPreV.SETRANGE (Activo         , TRUE);
      IF NOT rPreV.FINDFIRST THEN
      BEGIN
        rPreV.SETRANGE ("Tipo vehiculo", ''); //. Buscamos precio sin vehiculo rellenado (Generico)
        IF NOT rPreV.FINDFIRST THEN
        BEGIN
          inserta_error(Text005 + ' ' + rLinTO.TourOperador + ' ' +
                        Text006 + ' ' + FORMAT(rAgr.Fecha) + ' ' + Text007 + ' ' +
                        STRSUBSTNO('%1 %2', lwPaxesPrecio, wTipoTraslado) + ' ' +
                        Text038 + ' ' + rZonAgr.Zona, rAgr."N§ Agrupacion", TRUE);
          EXIT;
        END;
      END;

      IF rPreV."Tipo Aplicacion" = rPreV."Tipo Aplicacion"::Vehiculo THEN
        precio_vehiculo_ingreso(rAgr)
      ELSE
        precio_pax_ingreso(rAgr);
    END;

    PROCEDURE suplemento_ingreso@17(rAgr@1103355000 : Record 7009796);
    BEGIN
      // suplemento_ingreso

      rPreV.SETRANGE ("Tipo Traslado"); // Los suplementos no van por tipo de traslado
      indice := 1;
      WHILE array_elementos[indice_to][indice] <> '' DO BEGIN
        CLEAR(rMargen);
        CLEAR(rCI);
        elementos_calculo := elementos_to_zona(array_elementos[indice_to][indice], rZonAgr);
        rPreV.SETRANGE ("Tipo elemento", array_elementos[indice_to][indice]);
        rPreV.SETFILTER("Rango desde"  , '<=%1', numero_elementos[indice_to][indice]);
        rPreV.SETFILTER("Rango hasta"  , '>=%1', numero_elementos[indice_to][indice]);
        rPreV.SETRANGE("Tipo vehiculo");
        IF NOT rPreV.FINDFIRST THEN
        BEGIN
          rPreV.SETRANGE(Destino);  // Buscamos si existe un precio generico del suplemento
          IF NOT rPreV.FINDFIRST THEN
          BEGIN
            inserta_error(Text008 + ' ' + array_elementos[indice_to][indice] + ' ' +
                          Text009 + ' ' + rLinTO.TourOperador + ' ' +
                          Text006 + ' ' + STRSUBSTNO('%1', rAgr.Fecha) + ' ' + Text007 + ' ' +
                          STRSUBSTNO('%1', paxes_calculo), rAgr."N§ Agrupacion", FALSE);
          END
          ELSE BEGIN
            CASE rAgr."Tipo Calculo" OF
              rAgr."Tipo Calculo"::Margenes:
              BEGIN
                rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
                rMargen."Cantidad aplicada" := elementos_calculo;
                rMargen."Cantidad Real"     := elementos_calculo;
                rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Suplemento;
                rMargen."Tipo Pax"          := array_elementos[indice_to][indice];
                rMargen."Precio x Pax"      := rPreV.Precio;
                rMargen.Importe             := elementos_calculo * rPreV.Precio;
              END;
              rAgr."Tipo Calculo"::"Coste/Ingreso":
              BEGIN
                rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
                rCI."Cantidad aplicada" := elementos_calculo;
                rCI."Cantidad Real"     := elementos_calculo;
                rCI."Tipo linea"     := rCI."Tipo linea"::Suplemento;
                rCI."Tipo Pax"          := array_elementos[indice_to][indice];
                rCI."Precio x Pax"      := rPreV.Precio;
                rCI.Importe             := elementos_calculo * rPreV.Precio;
              END;
            END;
            comunes_ingreso(rAgr);
          END;
        END
        ELSE BEGIN
          CASE rAgr."Tipo Calculo" OF
            rAgr."Tipo Calculo"::Margenes:
            BEGIN
              rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rMargen."Cantidad aplicada" := elementos_calculo;
              rMargen."Cantidad Real"     := elementos_calculo;
              rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Suplemento;
              rMargen."Tipo Pax"          := array_elementos[indice_to][indice];
              rMargen."Precio x Pax"      := rPreV.Precio;
              rMargen.Importe             := elementos_calculo * rPreV.Precio;
            END;
            rAgr."Tipo Calculo"::"Coste/Ingreso":
            BEGIN
              rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rCI."Cantidad aplicada" := elementos_calculo;
              rCI."Cantidad Real"     := elementos_calculo;
              rCI."Tipo linea"     := rCI."Tipo linea"::Suplemento;
              rCI."Tipo Pax"          := array_elementos[indice_to][indice];
              rCI."Precio x Pax"      := rPreV.Precio;
              rCI.Importe             := elementos_calculo * rPreV.Precio;
            END;
          END;
          comunes_ingreso(rAgr);
        END;
        rPreV.SETRANGE(Destino, rZonAgr.Zona);
        indice := indice + 1;
      END;
    END;

    PROCEDURE precio_vehiculo_ingreso@8(rAgr@1103355000 : Record 7009796);
    BEGIN
      // precio_vehiculo_ingreso

      paxes_calculo := adultos_to_zona(rZonAgr, TRUE, TRUE) + ni¤os_to_zona(rZonAgr, TRUE, TRUE);

      CASE rAgr."Tipo Calculo" OF
        rAgr."Tipo Calculo"::Margenes:
        BEGIN
          rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Vehiculo;
          rMargen."N§ Vehiculos"      := 1;
          rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
          rMargen."Precio x Vehiculo" := rPreV.Precio;
          rMargen."Cantidad aplicada" := paxes_calculo;
          rMargen."Cantidad Real"     := paxes_calculo;
          rMargen.Importe             := rPreV.Precio;
        END;
        rAgr."Tipo Calculo"::"Coste/Ingreso":
        BEGIN
          rCI."Tipo linea"     := rCI."Tipo linea"::Vehiculo;
          rCI."N§ Vehiculos"      := 1;
          rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
          rCI."Precio x Vehiculo" := rPreV.Precio;
          rCI.Importe             := rPreV.Precio;
          rCI."Cantidad Real"     := paxes_calculo;
          rCI."Cantidad aplicada" := paxes_calculo;
        END;
      END;

      comunes_ingreso(rAgr);
    END;

    PROCEDURE precio_pax_ingreso@16(rAgr@1103355000 : Record 7009796);
    BEGIN
      // precio_pax_ingreso

      paxes_calculo := adultos_to_zona(rZonAgr, TRUE, TRUE);

      IF paxes_calculo <> 0 THEN
      BEGIN
        rPreV.SETRANGE ("Tipo elemento", rParPer."Codigo Adulto");
        IF rPreV.FINDFIRST THEN
        BEGIN
          CASE rAgr."Tipo Calculo" OF
            rAgr."Tipo Calculo"::Margenes:
            BEGIN
              rMargen."Cantidad aplicada" := paxes_calculo;
              rMargen."Cantidad Real"     := paxes_calculo;
              rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Persona;
              rMargen."N§ Vehiculos"      := 1;
              rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rMargen."Tipo Pax"          := rParPer."Codigo Adulto";
              rMargen."Precio x Pax"      := rPreV.Precio;
              rMargen.Importe             := rPreV.Precio * paxes_calculo;
            END;
            rAgr."Tipo Calculo"::"Coste/Ingreso":
            BEGIN
              rCI."Cantidad aplicada" := paxes_calculo;
              rCI."Cantidad Real"     := paxes_calculo;
              rCI."Tipo linea"        := rCI."Tipo linea"::Persona;
              rCI."N§ Vehiculos"      := 1;
              rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rCI."Tipo Pax"          := rParPer."Codigo Adulto";
              rCI."Precio x Pax"      := rPreV.Precio;
              rCI.Importe             := rPreV.Precio * paxes_calculo;
            END;
          END;
          comunes_ingreso(rAgr);
        END
        ELSE BEGIN
          inserta_error(Text010 + ' ' + rLinTO.TourOperador + ' ' +
                        Text006 + ' ' + FORMAT(rAgr.Fecha) + ' ' + Text007 + ' ' +
                        STRSUBSTNO('%1 %2', paxes_calculo, rPreV.GETFILTER("Tipo Traslado")) + ' ' +
                        Text038 + ' ' + rZonAgr.Zona, rAgr."N§ Agrupacion", TRUE);
        END;
      END;

      CLEAR(rMargen);
      CLEAR(rCI);
      paxes_calculo := ni¤os_to_zona(rZonAgr, TRUE, TRUE);
      IF paxes_calculo <> 0 THEN
      BEGIN
        rPreV.SETRANGE ("Tipo elemento", rParPer."Codigo Ni¤o");
        IF rPreV.FINDFIRST THEN
        BEGIN
          CASE rAgr."Tipo Calculo" OF
            rAgr."Tipo Calculo"::Margenes:
            BEGIN
              rMargen."Cantidad aplicada" := paxes_calculo;
              rMargen."Cantidad Real"     := paxes_calculo;
              rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Persona;
              rMargen."N§ Vehiculos"      := 1;
              rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rMargen."Tipo Pax"          := rParPer."Codigo Ni¤o";
              rMargen."Precio x Pax"      := rPreV.Precio;
              rMargen.Importe             := rPreV.Precio * paxes_calculo;
            END;
            rAgr."Tipo Calculo"::"Coste/Ingreso":
            BEGIN
              rCI."Cantidad aplicada" := paxes_calculo;
              rCI."Cantidad Real"     := paxes_calculo;
              rCI."Tipo linea"     := rCI."Tipo linea"::Persona;
              rCI."N§ Vehiculos"      := 1;
              rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rCI."Tipo Pax"          := rParPer."Codigo Ni¤o";
              rCI."Precio x Pax"      := rPreV.Precio;
              rCI.Importe             := rPreV.Precio * paxes_calculo;
            END;
          END;
          comunes_ingreso(rAgr);
        END
        ELSE BEGIN
          inserta_error(Text011 + ' ' + rLinTO.TourOperador + ' ' +
                        Text006 + ' ' + FORMAT(rAgr.Fecha) + ' ' + Text007 + ' ' +
                        STRSUBSTNO('%1', paxes_calculo) + ' ' +
                        Text038 + ' ' + rZonAgr.Zona, rAgr."N§ Agrupacion", TRUE);
        END;
      END;
    END;

    PROCEDURE comunes_ingreso@20(rAgr@1103355000 : Record 7009796);
    VAR
      lwNumVuelos@1100217000 : Integer;
    BEGIN
      // comunes_ingreso

      CASE rAgr."Tipo Calculo" OF
        rAgr."Tipo Calculo"::Margenes:
        BEGIN
          rMargen."C¢d. divisa" := rConV."C¢d. divisa";
          wPrecRedImp           := Precision(rMargen."C¢d. divisa",1);
          wPredRedPrec          := Precision(rMargen."C¢d. divisa",2);

          rMargen.Agrupacion := rAgr."N§ Agrupacion";
          rMargen."Tipo Vehiculo" := rAgr."Tipo vehiculo";
          rMargen2.RESET;
          rMargen2.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
          IF rMargen2.FINDLAST THEN
            rMargen."N§ Linea" := rMargen2."N§ Linea" + 1
          ELSE
            rMargen."N§ Linea" := 1;

          rMargen.Usuario         := USERID();
          rMargen.Fecha           := rAgr.Fecha;
          rMargen.TourOperador    := rLinTO.TourOperador;
          rMargen.Zona            := rZonAgr.Zona;
          rMargen."Tipo transfer" := rAgr."Tipo transfer";
          rMargen.Concepto        := Text004;
          rMargen.Vuelos          := COPYSTR(rAgr.Vuelos, 1, 80);
          rMargen."N§ Vuelos"     := rAgr."N§ vuelos";
          rMargen."Transfer Privado" := rAgr."Transfer Privado";
          IF rCli.GET(rConV.Cliente) THEN BEGIN

            IF rIVA.GET(rCli."VAT Bus. Posting Group", rConV."Gr. Registro IVA Producto") THEN BEGIN
              IF rConV."Impuestos incluidos" THEN BEGIN
                rMargen."Importe con impuesto" := ROUND(rMargen.Importe, wPrecRedImp);
                rMargen."Importe sin impuesto" := ROUND((rMargen.Importe / ((rIVA."VAT+EC %" / 100) + 1)), wPrecRedImp);
              END
              ELSE BEGIN
                rMargen."Importe sin impuesto" := ROUND(rMargen.Importe, wPrecRedImp);
                rMargen."Importe con impuesto" := ROUND(rMargen.Importe + ((rMargen.Importe * rIVA."VAT+EC %") / 100), wPrecRedImp);
              END;
            END;

            // JPT-Incluyo los importes en divisa local
            rMargen."Importe sin impuesto DL" := ValorDL(rConV."C¢d. divisa",TODAY,
                                                                            rMargen."Importe sin impuesto");
            rMargen."Importe con impuesto DL" := ValorDL(rConV."C¢d. divisa",TODAY,
                                                                            rMargen."Importe con impuesto");
          END;
          rMargen.INSERT;
        END;
        rAgr."Tipo Calculo"::"Coste/Ingreso":
        BEGIN
          rCI."Cod. divisa" := rConV."C¢d. divisa";
          wPrecRedImp       := Precision(rCI."Cod. divisa",1);
          wPredRedPrec      := Precision(rCI."Cod. divisa",2);

          rCI.Agrupacion := rAgr."N§ Agrupacion";

          rCI2.RESET;
          rCI2.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
          IF rCI2.FINDLAST THEN
            rCI."N§ Linea" := rCI2."N§ Linea" + 1
          ELSE
            rCI."N§ Linea" := 1;

          rCI.Fecha                     := rAgr.Fecha;
          rCI.TourOperador              := rLinTO.TourOperador;

          IF rCI.Importe <> 0 THEN
            rCI.Destino := rZonAgr.Zona;

          rCI."Tipo transfer"           := rAgr."Tipo transfer";
          rCI."Tipo Vehiculo"           := rAgr."Tipo vehiculo";
          rCI.Concepto                  := Text004;
          //-$009rCI.Vuelos                    := COPYSTR(rAgr.Vuelos, 1, 200);
          //-$009rCI."N§ Vuelos"               := rAgr."N§ vuelos";
          rCI.Vuelos                    := _VuelosTouroperador(rCI, lwNumVuelos); //+$009
          rCI."N§ Vuelos"               := lwNumVuelos; //+$009

          rCI."Transfer Privado"        := rAgr."Transfer Privado";

          // AJS 23.10.2003
          // Se incluye un nuevo campo Origen/Destino para que se pueda filtrar por el en la facturacion de los transfers

          rCI."Origen/Destino transfer" := rAgr."Origen/Destino transfer";

          rCI."Num. Contrato" := rConV."N§ Contrato Venta"; //+$011
          IF rCli.GET(rConV.Cliente) THEN BEGIN
            IF rIVA.GET(rCli."VAT Bus. Posting Group", rConV."Gr. Registro IVA Producto") THEN BEGIN
              IF rConV."Impuestos incluidos" THEN BEGIN
                rCI."Importe con impuesto" := ROUND(rCI.Importe, wPrecRedImp);
                rCI."Importe sin impuesto" := ROUND((rCI.Importe / ((rIVA."VAT+EC %" / 100) + 1)), wPrecRedImp);
              END
              ELSE BEGIN
                rCI."Importe sin impuesto" := ROUND(rCI.Importe, wPrecRedImp);
                rCI."Importe con impuesto" := ROUND(rCI.Importe + ((rCI.Importe * rIVA."VAT+EC %") / 100), wPrecRedImp);
              END;
            END;
            rCI."Impuestos Incluido" := rConV."Impuestos incluidos";
            rCI."% Impuestos"        := rIVA."VAT %";

            // JPT-Incluyo los importes en divisa local

            rCI."Importe sin impuestos (DL)" := ValorDL(rCI."Cod. divisa",TODAY,
                                                                          rCI."Importe sin impuesto");
            rCI."Importe con impuestos (DL)" := ValorDL(rCI."Cod. divisa",TODAY,
                                                                          rCI."Importe con impuesto");
          END;
          rCI.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE busca_contrato_venta@11(rAgr@1103355000 : Record 7009796;VAR prConV@1100217000 : Record 7009788;pwTouroperador@1100217001 : Code[10];pwInsertaError@1100217002 : Boolean) : Boolean;
    BEGIN
      // busca_contrato_venta

      ok := FALSE;

      prConV.RESET;
      prConV.SETCURRENTKEY(TourOperador,
                           "Fecha inicio contrato",
                           "Fecha final contrato");
      prConV.SETRANGE (TourOperador           , pwTouroperador);
      prConV.SETFILTER("Fecha inicio contrato", '<=%1', rAgr.Fecha);
      prConV.SETFILTER("Fecha final contrato" , '>=%1', rAgr.Fecha);
      prConV.SETRANGE ("OLD_Punto Origen/Destino" , rAgr."Origen/Destino transfer");
      prConV.SETRANGE ("Tipo Precio"          , rAgr."Tipo precio ingreso");
      prConV.SETRANGE (Confirmado             , TRUE);
      IF NOT prConV.FINDFIRST THEN
      BEGIN
        //. Primero quitamos el filtro de Tipo precio

        prConV.SETRANGE ("Tipo Precio");
        IF NOT prConV.FINDFIRST THEN
        BEGIN
          //. Intentamos sin el filtro de Aeropuerto

          prConV.SETRANGE("Tipo Precio", rAgr."Tipo precio ingreso");
          prConV.SETRANGE("OLD_Punto Origen/Destino");
          IF NOT prConV.FINDFIRST THEN
          BEGIN
            //. Buscamos sin ninguno de los 2 condicionantes

            prConV.SETRANGE("Tipo Precio");
            prConV.SETRANGE("OLD_Punto Origen/Destino");
            IF NOT prConV.FINDFIRST THEN
            BEGIN
              IF pwInsertaError THEN
                inserta_error(Text012 + ' ' + pwTouroperador + ' ' +
                              Text006 + ' ' + STRSUBSTNO('%1', rAgr.Fecha), rAgr."N§ Agrupacion", TRUE);
              EXIT(FALSE);
            END;
          END;
        END;
      END;

      rCli.GET(prConV.Cliente);
      IF NOT rIVA.GET(rCli."VAT Bus. Posting Group", prConV."Gr. Registro IVA Producto") THEN
        inserta_error(STRSUBSTNO(Text013,
                                  rIVA.TABLECAPTION,
                                  rIVA.FIELDCAPTION("VAT Bus. Posting Group"),
                                  rCli."VAT Bus. Posting Group",
                                  rIVA.FIELDCAPTION("VAT Prod. Posting Group"),
                                  prConV."Gr. Registro IVA Producto"),
                      rAgr."N§ Agrupacion", TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE traduce_zona_venta@13(rAgr@1103355000 : Record 7009796);
    BEGIN
      // traduce_zona_venta
      //
      zona_fisica_auxiliar := '';
      rZonTra.RESET;
      rZonTra.SETRANGE(Contrato       , rConV."N§ Contrato Venta");
      rZonTra.SETRANGE("Tipo contrato", rZonTra."Tipo contrato"::Venta);
      rRsv.RESET;
      IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN BEGIN
        rRsv.SETCURRENTKEY("Agrupacion entrada",
                           "TourOperador facturacion",
                           "Zona entrada");
        rRsv.SETRANGE("Agrupacion entrada", rAgr."N§ Agrupacion");
      END
      ELSE BEGIN
        rRsv.SETCURRENTKEY("Agrupacion salida",
                           "TourOperador facturacion",
                           "Zona salida");
        rRsv.SETRANGE("Agrupacion salida", rAgr."N§ Agrupacion");
      END;
      rRsv.SETRANGE("TourOperador facturacion", rLinTO.TourOperador);
      IF rRsv.FINDSET THEN BEGIN
        REPEAT
          CASE rAgr."Tipo transfer" OF
            rAgr."Tipo transfer"::Entrada:
            BEGIN
              IF zona_fisica_auxiliar <> rRsv."Zona entrada" THEN BEGIN
                zona_fisica_auxiliar := rRsv."Zona entrada";
                rZonTra.SETRANGE("Zona fisica", rRsv."Zona entrada");
                IF rZonTra.FINDFIRST THEN
                BEGIN
                  rRsv."Zona venta entrada" := rZonTra.Zona;
                  rRsv.MODIFY;

                  CLEAR(rZonAgr);
                  rZonAgr."N§ Agrupacion" := rAgr."N§ Agrupacion";
                  rZonAgr.Zona            := rZonTra.Zona;
                  rZonAgr."Tipo transfer" := rAgr."Tipo transfer";
                  rZonAgr."Tipo zona"     := rZonAgr."Tipo zona"::Venta;
                  rZonAgr."Orden zona"    := rZonTra."Orden entrada zona";
                  rZonAgr.TourOperador    := rLinTO.TourOperador;
                  IF NOT rZonAgr.FIND THEN
                    rZonAgr.INSERT;
                END
                ELSE
                BEGIN
                  zona_fisica_auxiliar := '';
                  inserta_error(STRSUBSTNO(Text014,
                                           rRsv."Zona entrada", rConV."N§ Contrato Venta"), rAgr."N§ Agrupacion", TRUE);
                  rRsv."Zona venta entrada" := '';
                  rRsv.MODIFY;
                END;
              END
              ELSE
              BEGIN
                rRsv."Zona venta entrada" := rZonTra.Zona;
                rRsv.MODIFY;
              END;
            END;
            rAgr."Tipo transfer"::Salida:
            BEGIN
              IF zona_fisica_auxiliar <> rRsv."Zona salida" THEN BEGIN
                zona_fisica_auxiliar := rRsv."Zona salida";
                rZonTra.SETRANGE("Zona fisica", rRsv."Zona salida");
                IF rZonTra.FINDFIRST THEN
                BEGIN
                  rRsv."Zona venta salida" := rZonTra.Zona;
                  rRsv.MODIFY;
                  CLEAR(rZonAgr);
                  rZonAgr."N§ Agrupacion" := rAgr."N§ Agrupacion";
                  rZonAgr.Zona := rZonTra.Zona;
                  rZonAgr."Tipo transfer" := rAgr."Tipo transfer";
                  rZonAgr."Tipo zona" := rZonAgr."Tipo zona"::Venta;
                  rZonAgr."Orden zona" := rZonTra."Orden entrada zona";
                  rZonAgr.TourOperador := rLinTO.TourOperador;
                  IF NOT rZonAgr.INSERT THEN
                    rZonAgr.MODIFY;
                END
                ELSE
                BEGIN
                  zona_fisica_auxiliar := '';
                  inserta_error(STRSUBSTNO(Text014,
                                            rRsv."Zona salida", rConV."N§ Contrato Venta"), rAgr."N§ Agrupacion", TRUE);
                  rRsv."Zona venta salida" := '';
                  rRsv.MODIFY;
                END;
              END
              ELSE
              BEGIN
                rRsv."Zona venta salida" := rZonTra.Zona;
                rRsv.MODIFY;
              END;
            END;
          END;
        UNTIL rRsv.NEXT = 0;
      END;
      rZonTra.RESET;
    END;

    PROCEDURE crear_fichero_calculo_coste@14(rAgr@1103355000 : Record 7009796);
    VAR
      zona_auxiliar@1103355001 : Code[10];
    BEGIN
      // crear_fichero_calculo_coste

      rParPer.FINDFIRST;

      CLEAR(array_elementos);
      CLEAR(numero_elementos);

      rRsv.RESET;
      IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN BEGIN
        rRsv.SETCURRENTKEY("Agrupacion entrada");
        rRsv.SETRANGE("Agrupacion entrada", rAgr."N§ Agrupacion");
      END
      ELSE BEGIN
        rRsv.SETCURRENTKEY("Agrupacion salida");
        rRsv.SETRANGE("Agrupacion salida",  rAgr."N§ Agrupacion");
      END;

      indice_zona := 0;
      zona_auxiliar := '';
      rZonAgr.RESET;
      rZonAgr.SETCURRENTKEY("Orden zona");
      rZonAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
      rZonAgr.SETRANGE("Tipo transfer", rAgr."Tipo transfer");
      rZonAgr.SETRANGE("Tipo zona"    , rZonAgr."Tipo zona"::Compra);
      IF rZonAgr.FINDSET THEN BEGIN
        REPEAT
          rLinZon.INIT;
          rLinZon.Usuario       := USERID();
          rLinZon.Agrupacion    := rAgr."N§ Agrupacion";
          rLinZon.Zona          := rZonAgr.Zona;
          rLinZon."C¢d. divisa" := rConC."C¢d. divisa";
          rLinZon.INSERT;
          indice_zona := indice_zona + 1;
        UNTIL rZonAgr.NEXT = 0 ;
      END;
      IF rZonAgr.FINDSET THEN BEGIN
        REPEAT
          IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN
            rRsv.SETRANGE("Zona compra entrada", rZonAgr.Zona)
          ELSE
            rRsv.SETRANGE("Zona compra salida", rZonAgr.Zona);
          IF rRsv.FINDSET THEN BEGIN
            REPEAT
              IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN
                rLinZon.GET(USERID, rAgr."N§ Agrupacion", rRsv."Zona compra entrada")
              ELSE
                rLinZon.GET(USERID, rAgr."N§ Agrupacion", rRsv."Zona compra salida");
              rElem.RESET;
              rElem.SETRANGE(Delegacion  , rRsv.Delegacion);
              rElem.SETRANGE("N§ Reserva", rRsv."N§ Reserva");
              IF rElem.FINDSET THEN BEGIN
                REPEAT
                  IF rElem.Humano THEN BEGIN
                    CASE rElem."Tipo elemento" OF
                      rParPer."Codigo Adulto":
                      BEGIN
                        IF NOT rRsv."Invitado Transportista" THEN BEGIN
                          rLinZon."Adultos compra" := rLinZon."Adultos compra" + rElem."Numero elementos";
                          rCab."Adulto compra" := rCab."Adulto compra" + rElem."Numero elementos";
                        END;
                      END;
                      rParPer."Codigo Ni¤o":
                      BEGIN
                        IF NOT rRsv."Invitado Transportista" THEN BEGIN
                          rLinZon."Ni¤os compra" := rLinZon."Ni¤os compra" + rElem."Numero elementos";
                          rCab."Ni¤os compra" := rCab."Ni¤os compra" + rElem."Numero elementos";
                        END
                      END;
                      rParPer."Codigo Infant":
                      BEGIN
                        IF NOT rRsv."Invitado Transportista" THEN BEGIN
                          rLinZon."Infants compra" := rLinZon."Infants compra" + rElem."Numero elementos";
                          rCab."Infants compra" := rCab."Infants compra" + rElem."Numero elementos";
                        END;
                      END;
                    END;
                  END
                  ELSE BEGIN
                    IF NOT rRsv."Invitado Transportista" THEN BEGIN
                      rLinZon."Elementos compra" := rLinZon."Elementos compra" + rElem."Numero elementos";
                      rCab."Elementos compra" := rCab."Elementos compra" + rElem."Numero elementos";

                      //. Hay que buscar realmente el valor para indice_zona en funcion del orden de rLinZon.
                      IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN
                        devuelve_orden_zona(indice_zona, rRsv."Zona compra entrada", rAgr."N§ Agrupacion")
                      ELSE
                        devuelve_orden_zona(indice_zona, rRsv."Zona compra salida", rAgr."N§ Agrupacion");
                      busca_elemento(rElem."Tipo elemento", indice_zona, rElem."Numero elementos");
                    END;
                  END;
                UNTIL rElem.NEXT = 0;
              END;
              rElem.RESET;
              rCab.MODIFY;
              rLinZon.MODIFY;
            UNTIL rRsv.NEXT = 0;
          END;
        UNTIL rZonAgr.NEXT = 0;
      END;
      COMMIT;
    END;

    PROCEDURE calculo_coste_zona@9(rAgr@1103355000 : Record 7009796);
    BEGIN
      // calculo_coste_zona

      //+$004
      //. Si el contrato de compra es por capacidad hay que buscar siempre la zona mas alejada

      IF rConC."Buscar precios por" = rConC."Buscar precios por"::"Capacidad solicitada" THEN
        criterio_coste := criterio_coste::"Zona mas alejada"
      ELSE
      BEGIN
        //. Comprobar si el criterio debe ser por zona mas alejada o precio por zona,
        //. en funcion de que exista precio por pax o no

        rPreC.RESET;
        rPreC.SETRANGE ("N§ Contrato"  , rConC."N§ Contrato compra");
        rPreC.SETRANGE ("Codigo precio", rPreC."Codigo precio"::"Precio base");
        rPreC.SETFILTER("Fecha desde"  , '<=%1', rAgr.Fecha);
        rPreC.SETFILTER("Fecha hasta"  , '>=%1', rAgr.Fecha);
        rPreC.SETRANGE ("Tipo vehiculo", rAgr."Tipo vehiculo");
        rPreC.SETRANGE ("Tipo aplicacion"  , rPreC."Tipo aplicacion"::Pax);
        rPreC.SETRANGE (Activo         , TRUE);
        rPreC.SETFILTER("Rango desde"  , '<=%1', rCab."Adulto compra" + rCab."Ni¤os compra");
        rPreC.SETFILTER("Rango hasta"  , '>=%1', rCab."Adulto compra" + rCab."Ni¤os compra");
        rPreC.SETRANGE ("Tipo servicio", rAgr."Tipo servicio transportista"); //+$003
        IF rPreC.FINDFIRST THEN
          criterio_coste := criterio_coste::"Pax por zona";
        rPreC.SETRANGE("Tipo aplicacion"  , rPreC."Tipo aplicacion"::Vehiculo);
        IF rPreC.FINDFIRST THEN
          criterio_coste := criterio_coste::"Zona mas alejada";
      END;

      CASE criterio_coste OF
        criterio_coste::"Zona mas alejada":
        BEGIN
          rZonAgr.RESET;
          rZonAgr.SETCURRENTKEY("Orden zona");
          rZonAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
          rZonAgr.SETRANGE("Tipo zona"    , rZonAgr."Tipo zona"::Compra);
          rZonAgr.SETRANGE("Tipo transfer", rAgr."Tipo transfer");
          IF rZonAgr.FINDLAST THEN
            calculo_coste(rAgr, rCab."Adulto compra", rCab."Ni¤os compra", rZonAgr.Zona);

        END;
        criterio_coste::"Pax por zona":
        BEGIN
          rZonAgr.RESET;
          rZonAgr.SETCURRENTKEY("Orden zona");
          rZonAgr.SETRANGE("N§ Agrupacion", rAgr."N§ Agrupacion");
          rZonAgr.SETRANGE("Tipo zona"    , rZonAgr."Tipo zona"::Compra);
          rZonAgr.SETRANGE("Tipo transfer", rAgr."Tipo transfer");
          IF rZonAgr.FINDLAST THEN
            ultima_zona := rZonAgr.Zona;
          indice_zona := 0;
          IF rZonAgr.FINDFIRST THEN BEGIN
            REPEAT
              indice_zona := indice_zona + 1;
              IF rLinZon.GET(USERID(), rAgr."N§ Agrupacion", rZonAgr.Zona) THEN
                calculo_coste(rAgr, rCab."Adulto compra", rCab."Ni¤os compra", rZonAgr.Zona);
            UNTIL rZonAgr.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE calculo_coste@39(rAgr@1103355000 : Record 7009796;adultos_calculo@1103355001 : Integer;ni¤os_calculo@1103355002 : Integer;zona_calculo@1103355003 : Code[10]);
    VAR
      zonas_compra@1103355004 : Integer;
    BEGIN
      // calculo_coste

      rPreC.RESET;
      rPreC.SETRANGE("N§ Contrato"   , rConC."N§ Contrato compra");
      rPreC.SETRANGE("Codigo precio" , rPreC."Codigo precio"::"Precio base");
      rPreC.SETRANGE(Destino          , zona_calculo);
      rPreC.SETRANGE(Activo          , TRUE);
      linea_coste(rAgr, adultos_calculo, ni¤os_calculo, zona_calculo, rLinZon."Adultos compra", rLinZon."Ni¤os compra");
      rPreC.SETRANGE("Codigo precio", rPreC."Codigo precio"::Suplemento);
      coste_suplemento(rAgr, adultos_calculo, ni¤os_calculo, zona_calculo);
    END;

    PROCEDURE linea_coste@47(rAgr@1103355000 : Record 7009796;adultos_calculo@1103355001 : Integer;ni¤os_calculo@1103355002 : Integer;zona_calculo@1103355003 : Code[10];adultos_aplicados@1103355004 : Integer;ni¤os_aplicados@1103355005 : Integer);
    BEGIN
      // linea_coste

      CLEAR(rMargen);
      CLEAR(rCI);

      rPreC.SETRANGE ("Tipo vehiculo", rAgr."Tipo vehiculo");
      rPreC.SETFILTER("Fecha desde"  , '<=%1', rAgr.Fecha);
      rPreC.SETFILTER("Fecha hasta"  , '>=%1', rAgr.Fecha);
      rPreC.SETRANGE("Tipo elemento" , '');
      //+$004
      IF rConC."Buscar precios por" = rConC."Buscar precios por"::"Capacidad solicitada" THEN
      BEGIN
        rPreC.SETFILTER("Rango desde"  , '<=%1', rAgr."Capacidad Vehiculo");
        rPreC.SETFILTER("Rango hasta"  , '>=%1', rAgr."Capacidad Vehiculo");
      END
      ELSE
      BEGIN
        rPreC.SETFILTER("Rango desde"  , '<=%1', adultos_calculo + ni¤os_calculo);
        rPreC.SETFILTER("Rango hasta"  , '>=%1', adultos_calculo + ni¤os_calculo);
      END;
      //+$004
      rPreC.SETRANGE ("Tipo servicio", rAgr."Tipo servicio transportista"); //+$003
      IF rPreC.FINDFIRST THEN BEGIN
        IF rPreC."Tipo aplicacion" = rPreC."Tipo aplicacion"::Vehiculo THEN
          precio_vehiculo_coste(rAgr, adultos_calculo, ni¤os_calculo, adultos_aplicados, ni¤os_aplicados)
        ELSE
          precio_pax_coste(rAgr, adultos_calculo, ni¤os_calculo, adultos_aplicados, ni¤os_aplicados);
      END
      ELSE
      BEGIN
        //+$004
        IF rConC."Buscar precios por" = rConC."Buscar precios por"::"Capacidad solicitada" THEN
          inserta_error(STRSUBSTNO(Text023, rAgr.Transportista, rAgr."Capacidad Vehiculo", rAgr."Tipo vehiculo",
                        rAgr.Fecha), rAgr."N§ Agrupacion", TRUE)
        ELSE
          inserta_error(STRSUBSTNO(Text023, rAgr.Transportista, adultos_calculo + ni¤os_calculo, rAgr."Tipo vehiculo",
                        rAgr.Fecha), rAgr."N§ Agrupacion", TRUE);
      END;
    END;

    PROCEDURE precio_vehiculo_coste@55(rAgr@1103355000 : Record 7009796;adultos_calculo@1103355001 : Integer;ni¤os_calculo@1103355002 : Integer;adultos_aplicados@1103355003 : Integer;ni¤os_aplicados@1103355004 : Integer);
    BEGIN
      // precio_vehiculo_coste

      //. Si estamos calculando un servicio de salida y aplica un tipo de servicio "Ida y Vuelta"
      //. entonces el precio lo dejamos a cero

      IF (rAgr."Tipo transfer" = rAgr."Tipo transfer"::Salida) AND
         (rAgr."Tipo servicio transportista" = rAgr."Tipo servicio transportista"::"Doble via") THEN
        rPreC.Precio := 0;

      CASE rAgr."Tipo Calculo" OF
        rAgr."Tipo Calculo"::Margenes:
        BEGIN
          rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Vehiculo;
          rMargen."N§ Vehiculos"      := rAgr."N§ vehiculos";
          rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
          rMargen."Precio x Vehiculo" := -(rPreC.Precio);
          rMargen.Importe             := -(rPreC.Precio * rAgr."N§ vehiculos");
          rMargen.Proveedor           := rAgr.Transportista;
          rMargen.PaxAuxiliar         := adultos_calculo + ni¤os_calculo;
        END;
        rAgr."Tipo Calculo"::"Coste/Ingreso":
        BEGIN
          rCI."Tipo linea"     := rCI."Tipo linea"::Vehiculo;
          rCI."N§ Vehiculos"      := rAgr."N§ vehiculos";
          rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
          rCI."Precio x Vehiculo" := -(rPreC.Precio);
          rCI.Importe             := -(rPreC.Precio * rAgr."N§ vehiculos");
          rCI.PaxAuxiliar         := adultos_calculo + ni¤os_calculo;
          rCI.Transportista       := rAgr.Transportista;
        END;
      END;

      comunes_coste(rAgr);

      // pondremos el coste repartido en cada reserva - mas tarde se emplear  en
      // el m¢dulo de circuitos

      Coste_Reserva(rAgr, adultos_calculo, ni¤os_calculo, rPreC.Precio, 0, 0);
    END;

    PROCEDURE precio_pax_coste@56(rAgr@1103355000 : Record 7009796;adultos_calculo@1103355001 : Integer;ni¤os_calculo@1103355002 : Integer;adultos_aplicados@1103355003 : Integer;ni¤os_aplicados@1103355004 : Integer);
    VAR
      PrecioAdulto@1103355005 : Decimal;
      PrecioNin@1103355006 : Decimal;
    BEGIN
      // precio_pax_coste

      //. Si estamos calculando un servicio de salida y aplica un tipo de servicio "Ida y Vuelta"
      //. entonces el precio lo dejamos a cero

      IF (rAgr."Tipo transfer" = rAgr."Tipo transfer"::Salida) AND
         (rAgr."Tipo servicio transportista" = rAgr."Tipo servicio transportista"::"Doble via") THEN
        rPreC.Precio := 0;

      IF adultos_aplicados <> 0 THEN BEGIN
        rPreC.SETRANGE ("Tipo elemento", rParPer."Codigo Adulto");
        IF rPreC.FINDFIRST THEN
        BEGIN
          CASE rAgr."Tipo Calculo" OF
            rAgr."Tipo Calculo"::Margenes:
            BEGIN
              rMargen."Cantidad aplicada" := adultos_aplicados;
              rMargen.PaxAuxiliar         := adultos_aplicados;
              rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Persona;
              rMargen."N§ Vehiculos"      := rAgr."N§ vehiculos";
              rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rMargen."Tipo Pax"          := rParPer."Codigo Adulto";
              rMargen."Precio x Pax"      := - (rPreC.Precio);
              rMargen.Importe             := - (rPreC.Precio * adultos_aplicados);
            END;
            rAgr."Tipo Calculo"::"Coste/Ingreso":
            BEGIN
              rCI."Cantidad aplicada" := adultos_aplicados;
              rCI.PaxAuxiliar         := adultos_aplicados;
              rCI."Tipo linea"     := rCI."Tipo linea"::Persona;
              rCI."N§ Vehiculos"      := rAgr."N§ vehiculos";
              rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rCI."Tipo Pax"          := rParPer."Codigo Adulto";
              rCI."Precio x Pax"      := - (rPreC.Precio);
              rCI.Importe             := - (rPreC.Precio * adultos_aplicados);
              rCI.Transportista       := rAgr.Transportista;
            END;
          END;
          PrecioAdulto := rPreC.Precio;

          comunes_coste(rAgr);
        END
        ELSE BEGIN
          inserta_error(Text026 + ' ' + rAgr.Transportista + ' ' +
                        Text006 + ' ' + STRSUBSTNO('%1', rAgr.Fecha) + ' ' + Text007 + ' ' +
                        STRSUBSTNO('%1', adultos_calculo + ni¤os_calculo), rAgr."N§ Agrupacion", TRUE);
        END;
      END;

      IF ni¤os_aplicados <> 0 THEN BEGIN
        rPreC.SETRANGE ("Tipo elemento", rParPer."Codigo Ni¤o");
        IF rPreC.FINDFIRST THEN BEGIN
          CASE rAgr."Tipo Calculo" OF
            rAgr."Tipo Calculo"::Margenes:
            BEGIN
              rMargen."Cantidad aplicada" := ni¤os_aplicados;
              rMargen.PaxAuxiliar         := ni¤os_aplicados;
              rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Persona;
              rMargen."N§ Vehiculos"      := rAgr."N§ vehiculos";
              rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rMargen."Tipo Pax"          := rParPer."Codigo Ni¤o";
              rMargen.Proveedor           := rAgr.Transportista;
              rMargen."Precio x Pax"      := - (rPreC.Precio);
              rMargen.Importe             := - (rPreC.Precio * ni¤os_aplicados);
            END;
            rAgr."Tipo Calculo"::"Coste/Ingreso":
            BEGIN
              rCI."Cantidad aplicada" := ni¤os_aplicados;
              rCI.PaxAuxiliar         := ni¤os_aplicados;
              rCI."Tipo linea"     := rCI."Tipo linea"::Persona;
              rCI."N§ Vehiculos"      := rAgr."N§ vehiculos";
              rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rCI."Tipo Pax"          := rParPer."Codigo Ni¤o";
              rCI."Precio x Pax"      := - (rPreC.Precio);
              rCI.Importe             := - (rPreC.Precio * ni¤os_aplicados);
              rCI.Transportista       := rAgr.Transportista;
            END;
          END;
          PrecioNin := rPreC.Precio;

          comunes_coste(rAgr);
        END
        ELSE BEGIN
          inserta_error(Text027 + ' ' + rAgr.Transportista + ' ' +
                        Text006 + ' ' + STRSUBSTNO('%1', rAgr.Fecha) + ' ' + Text007 + ' ' +
                        STRSUBSTNO('%1', adultos_calculo + ni¤os_calculo), rAgr."N§ Agrupacion", TRUE);
        END;
      END;

      Coste_Reserva(rAgr, adultos_calculo, ni¤os_calculo, PrecioAdulto, PrecioNin, 1); // 0-> vehiculo  1-> pax
    END;

    PROCEDURE coste_suplemento@48(rAgr@1103355000 : Record 7009796;adultos_calculo@1103355001 : Integer;ni¤os_calculo@1103355002 : Integer;zona_calculo@1103355003 : Code[10]);
    BEGIN
      // coste_suplemento

      IF criterio_coste = criterio_coste::"Zona mas alejada" THEN BEGIN
        indice_zona := 0;

        rLinZon.RESET;
        rLinZon.SETRANGE(Usuario   , USERID());
        rLinZon.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
        IF rLinZon.FINDSET THEN
        BEGIN
          REPEAT
            devuelve_orden_zona(indice_zona, rLinZon.Zona, rAgr."N§ Agrupacion");

            coste_suplemento_zona(rAgr, adultos_calculo, ni¤os_calculo, rLinZon.Zona);
          UNTIL rLinZon.NEXT = 0;
        END;
      END
      ELSE
      BEGIN
        devuelve_orden_zona(indice_zona, zona_calculo, rAgr."N§ Agrupacion");
        coste_suplemento_zona(rAgr, adultos_calculo, ni¤os_calculo, zona_calculo);
      END;
    END;

    PROCEDURE coste_suplemento_zona@24(rAgr@1103355000 : Record 7009796;adultos_calculo@1103355001 : Integer;ni¤os_calculo@1103355002 : Integer;zona_calculo@1103355003 : Code[10]);
    BEGIN
      // coste_suplemento_zona

      rPreC.SETRANGE ("Tipo vehiculo");
      rPreC.SETFILTER("Fecha desde"  , '<=%1', rAgr.Fecha);
      rPreC.SETFILTER("Fecha hasta"  , '>=%1', rAgr.Fecha);
      rPreC.SETRANGE (Destino         , rLinZon.Zona);

      indice := 1;
      WHILE array_elementos[indice_zona][indice] <> '' DO BEGIN
        CLEAR(rMargen);
        CLEAR(rCI);
        rPreC.SETRANGE ("Tipo elemento", array_elementos[indice_zona][indice]);
        rPreC.SETFILTER("Rango desde"  , '<=%1', numero_elementos[indice_zona][indice]);
        rPreC.SETFILTER("Rango hasta"  , '>=%1', numero_elementos[indice_zona][indice]);
        IF rPreC.FINDFIRST THEN BEGIN
          CASE rAgr."Tipo Calculo" OF
            rAgr."Tipo Calculo"::Margenes:
            BEGIN
              rMargen."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rMargen."Cantidad aplicada" := numero_elementos[indice_zona][indice];
              rMargen.PaxAuxiliar         := numero_elementos[indice_zona][indice];
              rMargen."Tipo elemento"     := rMargen."Tipo elemento"::Suplemento;
              rMargen."Tipo Pax"          := array_elementos[indice_zona][indice];
              rMargen.Proveedor           := rAgr.Transportista;
              rMargen."Precio x Pax"      := - (rPreC.Precio);
              rMargen.Importe             := - (numero_elementos[indice_zona][indice] * rPreC.Precio);
            END;
            rAgr."Tipo Calculo"::"Coste/Ingreso":
            BEGIN
              rCI."Tipo Vehiculo"     := rAgr."Tipo vehiculo";
              rCI."Cantidad aplicada" := numero_elementos[indice_zona][indice];
              rCI.PaxAuxiliar         := numero_elementos[indice_zona][indice];
              rCI."Tipo linea"     := rCI."Tipo linea"::Suplemento;
              rCI."Tipo Pax"          := array_elementos[indice_zona][indice];
              rCI."Precio x Pax"      := - (rPreC.Precio);
              rCI.Importe             := - (numero_elementos[indice_zona][indice] * rPreC.Precio);
              rCI.Transportista           := rAgr.Transportista;
            END;
          END;
          comunes_coste(rAgr);

          Coste_Suplemento_Reserva(rAgr, array_elementos[indice_zona][indice], rPreC.Precio);
        END
        ELSE BEGIN
          inserta_error(Text028 + ' ' + array_elementos[indice_zona][indice] + ' ' +
                        Text029 + ' ' + rPreC."N§ Contrato" + ' ' + Text006 + ' ' +
                        STRSUBSTNO('%1', rAgr.Fecha), rAgr."N§ Agrupacion", FALSE);
        END;
        indice := indice + 1;
      END;
    END;

    PROCEDURE comunes_coste@44(rAgr@1103355000 : Record 7009796);
    VAR
      lwVuelos@1100217000 : Integer;
    BEGIN
      // comunes_coste

      CASE rAgr."Tipo Calculo" OF
        rAgr."Tipo Calculo"::Margenes:
        BEGIN
          rMargen.Agrupacion := rAgr."N§ Agrupacion";
          rMargen."Tipo Vehiculo" := rAgr."Tipo vehiculo";
          rMargen2.RESET;
          rMargen2.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
          IF rMargen2.FINDLAST THEN
            rMargen."N§ Linea" := rMargen2."N§ Linea" + 1
          ELSE
            rMargen."N§ Linea" := 1;
          rMargen.Usuario := USERID();
          rMargen.Fecha := rAgr.Fecha;
          IF rPreC."Codigo precio" = rPreC."Codigo precio"::"Precio ruta" THEN BEGIN
            rMargen.Ruta := TRUE;
            rMargen.Zona := rPreC."old_Zona 1" + '-' + rPreC."old_Zona 2";
          END
          ELSE BEGIN
            rMargen.Ruta := FALSE;
            rMargen.Zona := rPreC.Destino;
          END;
          rMargen."C¢d. divisa"   := rConC."C¢d. divisa";
          rMargen."Tipo transfer" := rAgr."Tipo transfer";
          rMargen.Concepto := Text002;
          rMargen.Vuelos := COPYSTR(rAgr.Vuelos, 1, 80);
          rMargen."N§ Vuelos" := rAgr."N§ vuelos";
          wPrecRedImp := Precision(rMargen."C¢d. divisa",1);
          wPredRedPrec:= Precision(rMargen."C¢d. divisa",2);

          IF rPro.GET(rConC.Proveedor) THEN BEGIN
            IF rIVA.GET(rPro."VAT Bus. Posting Group", rConC."Gr. registro IVA Producto") THEN BEGIN
              IF rConC."Impuestos incluidos" THEN BEGIN
                rMargen."Importe con impuesto" := ROUND(rMargen.Importe, wPrecRedImp);
                rMargen."Importe sin impuesto" := ROUND(rMargen.Importe / ((rIVA."VAT+EC %" / 100) + 1),wPrecRedImp);
              END
              ELSE BEGIN
                rMargen."Importe sin impuesto" := ROUND(rMargen.Importe, wPrecRedImp);
                rMargen."Importe con impuesto" := ROUND(rMargen.Importe + ((rMargen.Importe * rIVA."VAT+EC %") / 100), wPrecRedImp);
              END;
            // JPT-Incluyo los importes en divisa local
            rMargen."Importe sin impuesto DL" := ValorDL(rMargen."C¢d. divisa",TODAY,
                                                                          rMargen."Importe sin impuesto");
            rMargen."Importe con impuesto DL" := ValorDL(rMargen."C¢d. divisa",TODAY,
                                                                          rMargen."Importe con impuesto");

            END;
          END;
          rMargen.INSERT;
        END;
        rAgr."Tipo Calculo"::"Coste/Ingreso":
        BEGIN
          rCI."Cod. divisa" := rConC."C¢d. divisa";

          wPrecRedImp := Precision(rCI."Cod. divisa",1);
          wPredRedPrec:= Precision(rCI."Cod. divisa",2);

          rCI.Agrupacion := rAgr."N§ Agrupacion";
          rCI."Tipo Vehiculo" := rAgr."Tipo vehiculo";
          rCI2.RESET;
          rCI2.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
          IF rCI2.FINDLAST THEN
            rCI."N§ Linea" := rCI2."N§ Linea" + 1
          ELSE
            rCI."N§ Linea" := 1;
          rCI.Fecha := rAgr.Fecha;
          IF rPreC."Codigo precio" = rPreC."Codigo precio"::"Precio ruta" THEN BEGIN
            rCI.Ruta := TRUE;
            rCI.Destino := rPreC."old_Zona 1" + '-' + rPreC."old_Zona 2";
          END
          ELSE BEGIN
            rCI.Ruta := FALSE;
            rCI.Destino := rPreC.Destino;
          END;
          rCI."Tipo transfer" := rAgr."Tipo transfer";
          rCI.Concepto        := Text002;

          rCI.Vuelos := COPYSTR(rAgr.Vuelos, 1, 200);
          rCI."N§ Vuelos" := rAgr."N§ vuelos";

          rCI."Num. Contrato" := rConC."N§ Contrato compra"; //+$011
          IF rPro.GET(rConC.Proveedor) THEN BEGIN
            IF rIVA.GET(rPro."VAT Bus. Posting Group", rConC."Gr. registro IVA Producto") THEN BEGIN
              IF rConC."Impuestos incluidos" THEN BEGIN
                rCI."Importe con impuesto" := ROUND(rCI.Importe,wPrecRedImp);
                rCI."Importe sin impuesto" := ROUND(rCI.Importe / ((rIVA."VAT+EC %" / 100) + 1),wPrecRedImp);
              END
              ELSE BEGIN
                rCI."Importe sin impuesto" := ROUND(rCI.Importe,wPrecRedImp);
                rCI."Importe con impuesto" := ROUND(rCI.Importe + ((rCI.Importe * rIVA."VAT+EC %") / 100),wPrecRedImp);
              END;
            END;

            // JPT-Incluyo los importes en divisa local

            rCI."Importe sin impuestos (DL)" := ValorDL(rCI."Cod. divisa",TODAY,
                                                                          rCI."Importe sin impuesto");
            rCI."Importe con impuestos (DL)" := ValorDL(rCI."Cod. divisa",TODAY,
                                                                          rCI."Importe con impuesto");

          END;
          rCI."Transfer Privado"   := rAgr."Transfer Privado"; //+$014
          rCI."Proveedor contable" := rPro."No.";
          rCI.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE busca_contrato_compra@27(rAgr@1103355000 : Record 7009796) : Boolean;
    BEGIN
      // busca_contrato_compra

      IF rTransport.GET(rAgr.Transportista) THEN BEGIN
        rConC.RESET;
        rConC.SETCURRENTKEY(Proveedor,
                            "Fecha inicio contrato",
                            "Fecha final contrato");
        rConC.SETRANGE (Proveedor              , rTransport.Proveedor);
        rConC.SETFILTER("Fecha inicio contrato", '<=%1', rAgr.Fecha);
        rConC.SETFILTER("Fecha final contrato" , '>=%1', rAgr.Fecha);
        rConC.SETRANGE (Transportista          , rAgr.Transportista);
        rConC.SETRANGE (Confirmado             , TRUE);
        rConC.SETFILTER("OLD_Punto Origen/Destino" , rAgr."Origen/Destino transfer");
        IF NOT rConC.FINDFIRST THEN BEGIN
          rConC.SETRANGE(rConC."OLD_Punto Origen/Destino");
          IF NOT rConC.FINDFIRST THEN BEGIN
            inserta_error(STRSUBSTNO(Text030, rAgr.Transportista, rAgr.Fecha), rAgr."N§ Agrupacion", TRUE);

            rConC.RESET;
            EXIT(FALSE);
          END;
        END;
        rCab."Contrato compra" := rConC."N§ Contrato compra";
        rCab.MODIFY;

        //+$004
        IF rConC."Buscar precios por" = rConC."Buscar precios por"::"Capacidad solicitada" THEN
          IF rAgr."Capacidad Vehiculo" = 0 THEN
          BEGIN
            inserta_error(Text037, rAgr."N§ Agrupacion", TRUE);
            EXIT(FALSE);
          END;
        //+$004

        rPro.GET(rConC.Proveedor);
        IF NOT rIVA.GET(rPro."VAT Bus. Posting Group", rConC."Gr. registro IVA Producto") THEN
          inserta_error(STRSUBSTNO(Text013,
                                    rIVA.TABLECAPTION,
                                    rIVA.FIELDCAPTION("VAT Bus. Posting Group"),
                                    rPro."VAT Bus. Posting Group",
                                    rIVA.FIELDCAPTION("VAT Prod. Posting Group"),
                                    rConC."Gr. registro IVA Producto"),
                        rAgr."N§ Agrupacion", TRUE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE traduce_zona_compra@28(rAgr@1103355000 : Record 7009796);
    BEGIN
      // traduce_zona_compra

      rZonTra.RESET;
      rZonTra.SETRANGE(Contrato       , rConC."N§ Contrato compra");
      rZonTra.SETRANGE("Tipo contrato", rZonTra."Tipo contrato"::Compra);
      CASE rAgr."Tipo transfer" OF
        rAgr."Tipo transfer"::Entrada:
        BEGIN
          zona_fisica_auxiliar := '';
          rRsv.RESET;
          rRsv.SETCURRENTKEY("Agrupacion entrada",
                             "TourOperador facturacion",
                             "Zona entrada");
          rRsv.SETRANGE("Agrupacion entrada", rAgr."N§ Agrupacion");
          IF rRsv.FINDSET THEN BEGIN
            REPEAT
              IF rRsv."Zona entrada" <> zona_fisica_auxiliar THEN BEGIN
                zona_fisica_auxiliar := rRsv."Zona entrada";
                rZonTra.SETRANGE("Zona fisica", rRsv."Zona entrada");
                IF rZonTra.FINDFIRST THEN
                BEGIN
                  rRsv."Zona compra entrada" := rZonTra.Zona;
                  rRsv.MODIFY;

                  CLEAR(rZonAgr);
                  rZonAgr."N§ Agrupacion" := rAgr."N§ Agrupacion";
                  rZonAgr.Zona            := rZonTra.Zona;
                  rZonAgr."Tipo transfer" := rZonAgr."Tipo transfer"::Entrada;
                  rZonAgr."Tipo zona"     := rZonAgr."Tipo zona"::Compra;
                  rZonAgr."Orden zona"    := rZonTra."Orden entrada zona";
                  IF NOT rZonAgr.FIND THEN
                    rZonAgr.INSERT;
                END
                ELSE
                BEGIN
                  zona_fisica_auxiliar := '';
                  inserta_error(STRSUBSTNO(Text031,
                                           rRsv."Zona entrada", rConC."N§ Contrato compra"), rAgr."N§ Agrupacion", TRUE);
                  rRsv."Zona compra entrada" := '';
                  rRsv.MODIFY;
                END;
              END
              ELSE
              BEGIN
                rRsv."Zona compra entrada" := rZonTra.Zona;
                rRsv.MODIFY;
              END;
            UNTIL rRsv.NEXT = 0;
          END;
        END;
        rAgr."Tipo transfer"::Salida:
        BEGIN
          zona_fisica_auxiliar := '';
          rRsv.RESET;
          rRsv.SETCURRENTKEY("Agrupacion salida",
                             "TourOperador facturacion",
                             "Zona salida");
          rRsv.SETRANGE("Agrupacion salida", rAgr."N§ Agrupacion");
          IF rRsv.FINDSET THEN BEGIN
            REPEAT
              IF rRsv."Zona salida" <> zona_fisica_auxiliar THEN BEGIN
                zona_fisica_auxiliar := rRsv."Zona salida";
                rZonTra.SETRANGE("Zona fisica", rRsv."Zona salida");
                IF rZonTra.FINDFIRST THEN BEGIN
                  rRsv."Zona compra salida" := rZonTra.Zona;
                  rRsv.MODIFY;

                  CLEAR(rZonAgr);
                  rZonAgr."N§ Agrupacion" := rAgr."N§ Agrupacion";
                  rZonAgr.Zona            := rZonTra.Zona;
                  rZonAgr."Tipo transfer" := rZonAgr."Tipo transfer"::Salida;
                  rZonAgr."Tipo zona"     := rZonAgr."Tipo zona"::Compra;
                  rZonAgr."Orden zona"    := rZonTra."Orden entrada zona";
                  IF NOT rZonAgr.FIND THEN
                    rZonAgr.INSERT;
                END
                ELSE BEGIN
                  zona_fisica_auxiliar := '';
                  inserta_error(STRSUBSTNO(Text031,
                                           rRsv."Zona salida", rConC."N§ Contrato compra"), rAgr."N§ Agrupacion", TRUE);
                  rRsv."Zona compra salida" := '';
                  rRsv.MODIFY;
                END;
              END
              ELSE BEGIN
                rRsv."Zona compra salida" := rZonTra.Zona;
                rRsv.MODIFY;
              END;
            UNTIL rRsv.NEXT = 0;
          END;
        END;
      END;
      rZonTra.RESET;
    END;

    PROCEDURE separa_coste_touroperador@7(rAgr@1103355000 : Record 7009796);
    VAR
      adultos_to@1103355001 : Integer;
      ni¤os_to@1103355002 : Integer;
    BEGIN
      // separa_coste_touroperador
      //
      CASE rAgr."Tipo Calculo" OF
        rAgr."Tipo Calculo"::Margenes:
        BEGIN
          rMargen.RESET;
          rMargen.SETRANGE(Agrupacion    , rAgr."N§ Agrupacion");
          rMargen.SETRANGE(Concepto      , Text002);
          rMargen.SETRANGE("% Reparto TO", 0);
          IF rMargen.FINDSET THEN
          BEGIN
            REPEAT
              IF (rMargen."Tipo elemento" = rMargen."Tipo elemento"::Vehiculo) OR rMargen."Suplemento agrupacion" THEN BEGIN
                importe_total := 0;

                rLinTO.RESET;
                rLinTO.SETRANGE(Usuario   , USERID());
                rLinTO.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
                IF rLinTO.FINDSET THEN
                BEGIN
                  REPEAT
                    separa_margen(rLinTO."Adultos compra" + rLinTO."Ni¤os compra");
                  UNTIL rLinTO.NEXT = 0;

                  IF importe_total <> rMargen."Importe con impuesto" THEN
                  BEGIN
                    rMargen2."Importe con impuesto" := rMargen2."Importe con impuesto" +
                                                       (rMargen."Importe con impuesto" - importe_total);
                    rMargen2."Importe con impuesto DL" := ValorDL(rMargen2."C¢d. divisa", TODAY, rMargen2."Importe con impuesto");
                    rMargen2.MODIFY;
                  END;
                  rMargen.DELETE;
                END;
                rLinTO.RESET;
              END
              ELSE
              BEGIN
                importe_total := 0;

                rLinTO.RESET;
                rLinTO.SETRANGE(Usuario   , USERID());
                rLinTO.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
                IF rLinTO.FINDSET THEN
                BEGIN
                  REPEAT
                    CASE rMargen."Tipo Pax" OF
                      rParPer."Codigo Adulto":
                      BEGIN
                        adultos_to := cuenta_reservas_to(rAgr, rLinTO, rMargen.Zona, rMargen.Ruta, rMargen."Tipo Pax");
                        IF adultos_to <> 0 THEN
                          separa_margen(adultos_to);
                      END;
                      rParPer."Codigo Ni¤o":
                      BEGIN
                        ni¤os_to := cuenta_reservas_to(rAgr, rLinTO, rMargen.Zona, rMargen.Ruta, rMargen."Tipo Pax");
                        IF ni¤os_to <> 0 THEN
                          separa_margen(ni¤os_to);
                      END;
                      ELSE
                      BEGIN
                        cantidad_elemento := suma_elementos(rAgr,
                                                            rMargen."Tipo Pax",
                                                            rMargen.Zona,
                                                            rMargen.Ruta, rLinTO.TourOperador);
                        IF cantidad_elemento <> 0 THEN
                          separa_margen(cantidad_elemento);
                      END;
                    END;
                  UNTIL rLinTO.NEXT = 0;
                  IF importe_total <> rMargen."Importe con impuesto" THEN
                  BEGIN
                    rMargen2."Importe con impuesto" := rMargen2."Importe con impuesto" +
                                                       (rMargen."Importe con impuesto" - importe_total);
                    rMargen2."Importe con impuesto DL" := ValorDL(rMargen2."C¢d. divisa", TODAY, rMargen2."Importe con impuesto");
                    rMargen2.MODIFY;
                  END;
                  rMargen.DELETE;
                END;
                rLinTO.RESET;
              END;
            UNTIL rMargen.NEXT = 0;
          END;
          rMargen.RESET;
        END;

        // Misma rutina que para margenes pero con Costes/Ingresos

        rAgr."Tipo Calculo"::"Coste/Ingreso":
        BEGIN
          rCI.RESET;
          rCI.SETRANGE(Agrupacion    , rAgr."N§ Agrupacion");
          rCI.SETRANGE(Concepto      , Text002);
          rCI.SETRANGE("% Reparto TO", 0);
          IF rCI.FINDSET THEN
          BEGIN
            REPEAT
              IF (rCI."Tipo linea" = rCI."Tipo linea"::Vehiculo) OR (rCI."Suplemento agrupacion") THEN BEGIN
                importe_total := 0;
                rLinTO.RESET;
                rLinTO.SETRANGE(Usuario   , USERID());
                rLinTO.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
                IF rLinTO.FINDSET THEN
                BEGIN
                  REPEAT
                    separa_coste(rLinTO."Adultos compra" + rLinTO."Ni¤os compra");
                  UNTIL rLinTO.NEXT = 0;

                  IF importe_total <> rCI."Importe con impuesto" THEN BEGIN
                    rCI2."Importe con impuesto" := rCI2."Importe con impuesto" +
                                                      (rCI."Importe con impuesto" - importe_total);
                    rCI2."Importe con impuestos (DL)" := ValorDL(rCI2."Cod. divisa", TODAY, rCI2."Importe con impuesto");
                    rCI2.MODIFY;
                  END;
                  rCI.DELETE;
                END;
                rLinTO.RESET;
              END
              ELSE BEGIN
                importe_total := 0;
                rLinTO.RESET;
                rLinTO.SETRANGE(Usuario   , USERID());
                rLinTO.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
                IF rLinTO.FINDSET THEN
                BEGIN
                  REPEAT
                    CASE rCI."Tipo Pax" OF
                      rParPer."Codigo Adulto":
                      BEGIN
                        adultos_to := cuenta_reservas_to(rAgr, rLinTO, rCI.Destino, rCI.Ruta, rCI."Tipo Pax");
                        IF adultos_to <> 0 THEN
                          separa_coste(adultos_to);
                      END;
                      rParPer."Codigo Ni¤o":
                      BEGIN
                        ni¤os_to := cuenta_reservas_to(rAgr, rLinTO, rCI.Destino, rCI.Ruta, rCI."Tipo Pax");
                        IF ni¤os_to <> 0 THEN
                          separa_coste(ni¤os_to);
                      END;
                      ELSE
                      BEGIN
                        cantidad_elemento := suma_elementos(rAgr, rCI."Tipo Pax", rCI.Destino, rCI.Ruta, rLinTO.TourOperador);
                        IF cantidad_elemento <> 0 THEN
                          separa_coste(cantidad_elemento);
                      END;
                    END;
                  UNTIL rLinTO.NEXT = 0;
                  IF importe_total <> rCI."Importe con impuesto" THEN BEGIN
                    rCI2."Importe con impuesto" := rCI2."Importe con impuesto" +
                                                      (rCI."Importe con impuesto" - importe_total);
                    rCI2."Importe con impuestos (DL)" := ValorDL(rCI2."Cod. divisa", TODAY, rCI2."Importe con impuesto");
                    rCI2.MODIFY;
                  END;
                  rCI.DELETE;
                END;
                rLinTO.RESET;
              END;
            UNTIL rCI.NEXT = 0;
          END;
          rCI.RESET;
        END;
      END;
    END;

    PROCEDURE separa_margen@54(cantidad@1103355000 : Decimal);
    BEGIN
      // separa_margen

      IF cantidad = 0 THEN
        EXIT;

      porcentaje_touroperador := ROUND(((cantidad * 100) / rMargen.PaxAuxiliar), 0.00001);

      CLEAR(rMargen2);
      rMargen2 := rMargen;

      // ----  AJS 08.05.2003 Modificacion para los suplementos de agrupacion  ----

      rMargen2."C¢d. divisa" := rConC."C¢d. divisa";
      wPrecRedImp := Precision(rMargen2."C¢d. divisa",1);
      wPredRedPrec:= Precision(rMargen2."C¢d. divisa",2);

      IF rMargen."Suplemento agrupacion" THEN
        rMargen2."Cantidad Real" := rMargen."Cantidad aplicada"
      ELSE
        rMargen2."Cantidad Real" := cantidad;

      rMargen2.TourOperador := rLinTO.TourOperador;
      rMargen2."% Reparto TO" := porcentaje_touroperador;
      rMargen2."Importe Original SIN" := rMargen."Importe sin impuesto";
      rMargen2."Importe Original CON" := rMargen."Importe con impuesto";
      rMargen2."Importe sin impuesto" := ROUND((rMargen2."Importe Original SIN" * porcentaje_touroperador) / 100, wPrecRedImp);
      rMargen2."Importe con impuesto" := ROUND((rMargen2."Importe Original CON" * porcentaje_touroperador) / 100, wPrecRedImp);
      rMargen2."Importe sin impuesto DL" := ValorDL(rMargen2."C¢d. divisa",TODAY, rMargen2."Importe sin impuesto");
      rMargen2."Importe con impuesto DL" := ValorDL(rMargen2."C¢d. divisa",TODAY, rMargen2."Importe con impuesto");

      importe_total := importe_total + rMargen2."Importe con impuesto";

      rMargen3.RESET;
      rMargen3.SETRANGE(Agrupacion, rMargen2.Agrupacion);
      IF rMargen3.FINDLAST THEN
        rMargen2."N§ Linea" := rMargen3."N§ Linea" + 1;
      rMargen3.RESET;
      rMargen2.INSERT;
    END;

    PROCEDURE separa_coste@67(cantidad@1103355000 : Decimal);
    BEGIN
      // separa_coste

      IF cantidad = 0 THEN
        EXIT;

      porcentaje_touroperador := ROUND(((cantidad * 100) / rCI.PaxAuxiliar), 0.00001);

      CLEAR(rCI2);
      rCI2 := rCI;

      // ----  AJS 08.05.2003 Modificacion para los suplementos de agrupacion  ----

      IF rCI."Suplemento agrupacion" THEN BEGIN
        rCI2."Cantidad Real" := rCI."Cantidad aplicada";
        rCI2.PaxAuxiliar     := cantidad;
      END
      ELSE
        rCI2."Cantidad Real" := cantidad;

      wPrecRedImp := Precision(rCI2."Cod. divisa",1);
      wPredRedPrec:= Precision(rCI2."Cod. divisa",2);

      rCI2.TourOperador := rLinTO.TourOperador;
      rCI2."% Reparto TO" := porcentaje_touroperador;
      rCI2."Importe Original SIN" := rCI."Importe sin impuesto";
      rCI2."Importe Original CON" := rCI."Importe con impuesto";
      rCI2."Importe sin impuesto" := ROUND((rCI2."Importe Original SIN" * porcentaje_touroperador) / 100, wPrecRedImp);
      rCI2."Importe con impuesto" := ROUND((rCI2."Importe Original CON" * porcentaje_touroperador) / 100, wPrecRedImp);
      rCI2."Importe sin impuestos (DL)" := ValorDL(rCI2."Cod. divisa", TODAY, rCI2."Importe sin impuesto");
      rCI2."Importe con impuestos (DL)" := ValorDL(rCI2."Cod. divisa", TODAY, rCI2."Importe con impuesto");

      importe_total := importe_total + rCI2."Importe con impuesto";

      rCI3.RESET;
      rCI3.SETRANGE(Agrupacion, rCI2.Agrupacion);
      IF rCI3.FINDLAST THEN
        rCI2."N§ Linea" := rCI3."N§ Linea" + 1;
      rCI3.RESET;
      rCI2.INSERT(TRUE);
    END;

    PROCEDURE suma_elementos@63(rAgr@1103355000 : Record 7009796;par_elemento@1103355001 : Code[10];par_zona@1103355002 : Code[10];par_ruta@1103355003 : Boolean;par_to@1103355004 : Code[10]) : Integer;
    VAR
      aux_cantidad@1103355005 : Integer;
    BEGIN
      // suma_elementos

      aux_cantidad := 0;
      rRsv.RESET;
      CASE rAgr."Tipo transfer" OF
        rAgr."Tipo transfer"::Entrada:
        BEGIN
          rRsv.SETCURRENTKEY("Agrupacion entrada",
                             "TourOperador facturacion");
          rRsv.SETRANGE("Agrupacion entrada"      , rAgr."N§ Agrupacion");
          IF NOT par_ruta THEN
            rRsv.SETRANGE("Zona compra entrada"     , par_zona);
        END;
        rAgr."Tipo transfer"::Salida:
        BEGIN
          rRsv.SETCURRENTKEY("Agrupacion salida",
                             "TourOperador facturacion");
          rRsv.SETRANGE("Agrupacion salida"       , rAgr."N§ Agrupacion");
          IF NOT par_ruta THEN
            rRsv.SETRANGE("Zona compra salida"      , par_zona);
        END;
      END;
      rRsv.SETRANGE("TourOperador facturacion", par_to);
      rRsv.SETRANGE("Invitado Transportista", FALSE);
      IF rRsv.FINDSET THEN BEGIN
        REPEAT
          rElem.RESET;
          rElem.SETRANGE(Delegacion     , rRsv.Delegacion);
          rElem.SETRANGE("N§ Reserva"   , rRsv."N§ Reserva");
          rElem.SETRANGE("Tipo elemento", par_elemento);
          IF rElem.FINDSET THEN BEGIN
            REPEAT
              aux_cantidad := aux_cantidad + rElem."Numero elementos";
            UNTIL rElem.NEXT = 0;
          END;
          rElem.RESET;
        UNTIL rRsv.NEXT = 0;
      END;
      rRsv.RESET;
      EXIT(aux_cantidad);
    END;

    PROCEDURE inserta_error@3(texto_error@1103355000 : Text[250];agrupacion@1103355001 : Integer;pwErrorCritico@1100217000 : Boolean);
    VAR
      lrError@1100217001 : Record 7009807;
      lrError2@1100217002 : Record 7009807;
    BEGIN
      // inserta_error

      lrError.INIT;

      CLEAR(lrError2);
      lrError2.SETRANGE(Agrupacion, agrupacion);
      IF lrError2.FINDLAST THEN
        lrError."N§ Error" := lrError2."N§ Error" + 1
      ELSE
        lrError."N§ Error" := 1;

      lrError.Agrupacion      := agrupacion;
      lrError.Error           := texto_error;
      lrError.Fecha           := TODAY;
      lrError.Hora            := TIME;
      lrError."Error critico" := pwErrorCritico;
      lrError.INSERT;
    END;

    PROCEDURE cuenta_reservas_to@21(par_agrupacion@1103355000 : Record 7009796;par_linea@1103355001 : Record 7009804;par_zona@1103355002 : Code[10];par_ruta@1103355003 : Boolean;par_tipo_pax@1103355004 : Code[10]) : Integer;
    VAR
      reserva@1103355005 : Record 7009744;
      aux_paxes@1103355006 : Integer;
    BEGIN
      // cuenta_reservas_to
      //
      aux_paxes := 0;
      reserva.RESET;
      IF par_agrupacion."Tipo transfer" = par_agrupacion."Tipo transfer"::Entrada THEN BEGIN
        reserva.SETCURRENTKEY("Agrupacion entrada");
        reserva.SETRANGE("Agrupacion entrada" , par_agrupacion."N§ Agrupacion");
        IF NOT par_ruta THEN
          reserva.SETRANGE("Zona compra entrada", par_zona);
      END
      ELSE BEGIN
        reserva.SETCURRENTKEY("Agrupacion salida");
        reserva.SETRANGE("Agrupacion salida", par_agrupacion."N§ Agrupacion");
        IF NOT par_ruta THEN
          reserva.SETRANGE("Zona compra salida", par_zona);
      END;
      reserva.SETRANGE("TourOperador facturacion", par_linea.TourOperador);
      reserva.SETRANGE("Invitado Transportista"  , FALSE);
      IF reserva.FINDSET THEN
      BEGIN
        REPEAT
          rElem.SETRANGE(Delegacion     , reserva.Delegacion);
          rElem.SETRANGE("N§ Reserva"   , reserva."N§ Reserva");
          rElem.SETRANGE("Tipo elemento", par_tipo_pax);
          IF rElem.FINDFIRST THEN
            aux_paxes := aux_paxes + rElem."Numero elementos";
        UNTIL reserva.NEXT = 0;
      END;
      reserva.RESET;
      EXIT(aux_paxes);
    END;

    PROCEDURE adultos_to_zona@22(par_zona@1103355000 : Record 7009799;pwFiltrarZona@1100217001 : Boolean;pwFiltrarTouroperador@1100217000 : Boolean) : Integer;
    VAR
      lrRsv@1103355001 : Record 7009744;
      aux_paxes@1103355002 : Integer;
    BEGIN
      // adultos_to_zona

      aux_paxes := 0;

      lrRsv.RESET;
      IF par_zona."Tipo transfer" = par_zona."Tipo transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Agrupacion entrada");
        lrRsv.SETRANGE("Agrupacion entrada", par_zona."N§ Agrupacion");
        IF pwFiltrarZona THEN
          lrRsv.SETRANGE("Zona venta entrada", par_zona.Zona);
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Agrupacion salida");
        lrRsv.SETRANGE("Agrupacion salida", par_zona."N§ Agrupacion");
        IF pwFiltrarZona THEN
          lrRsv.SETRANGE("Zona venta salida", par_zona.Zona);
      END;
      IF pwFiltrarTouroperador THEN
        lrRsv.SETRANGE("TourOperador facturacion", par_zona.TourOperador);
      lrRsv.SETRANGE("Invitado TourOperador"   , FALSE);
      IF lrRsv.FINDSET THEN
      BEGIN
        REPEAT
          lrRsv.CALCFIELDS(o_Personas, o_Ni¤os);
          aux_paxes := aux_paxes + lrRsv.o_Personas - lrRsv.o_Ni¤os;
        UNTIL lrRsv.NEXT = 0;
      END;

      EXIT(aux_paxes);
    END;

    PROCEDURE ni¤os_to_zona@32(par_zona@1103355000 : Record 7009799;pwFiltrarZona@1100217002 : Boolean;pwFiltrarTouroperador@1100217001 : Boolean) : Integer;
    VAR
      lrRsv@1103355001 : Record 7009744;
      aux_paxes@1103355002 : Integer;
    BEGIN
      // ni¤os_to_zona

      aux_paxes := 0;

      lrRsv.RESET;
      IF par_zona."Tipo transfer" = par_zona."Tipo transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Agrupacion entrada");
        lrRsv.SETRANGE("Agrupacion entrada" , par_zona."N§ Agrupacion");
        IF pwFiltrarZona THEN
          lrRsv.SETRANGE("Zona venta entrada", par_zona.Zona);
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Agrupacion salida");
        lrRsv.SETRANGE("Agrupacion salida", par_zona."N§ Agrupacion");
        IF pwFiltrarZona THEN
          lrRsv.SETRANGE("Zona venta salida", par_zona.Zona);
      END;
      IF pwFiltrarTouroperador THEN
        lrRsv.SETRANGE("TourOperador facturacion", par_zona.TourOperador);
      lrRsv.SETRANGE("Invitado TourOperador"   , FALSE);
      IF lrRsv.FINDSET THEN
      BEGIN
        REPEAT
          lrRsv.CALCFIELDS(o_Ni¤os);
          aux_paxes := aux_paxes + lrRsv.o_Ni¤os;
        UNTIL lrRsv.NEXT = 0;
      END;

      EXIT(aux_paxes);
    END;

    PROCEDURE elementos_to_zona@38(par_elemento@1103355000 : Code[10];par_zona@1103355001 : Record 7009799) : Integer;
    VAR
      rRsv@1103355002 : Record 7009744;
      rElem@1103355003 : Record 7009792;
      aux_paxes@1103355004 : Integer;
    BEGIN
      // elementos_to_zona

      rRsv.RESET;
      aux_paxes := 0;
      IF par_zona."Tipo transfer" = par_zona."Tipo transfer"::Entrada THEN BEGIN
        rRsv.SETCURRENTKEY("Agrupacion entrada");
        rRsv.SETRANGE("Agrupacion entrada" , par_zona."N§ Agrupacion");
        rRsv.SETRANGE("Zona venta entrada", par_zona.Zona);
      END
      ELSE BEGIN
        rRsv.SETCURRENTKEY("Agrupacion salida");
        rRsv.SETRANGE("Agrupacion salida", par_zona."N§ Agrupacion");
        rRsv.SETRANGE("Zona venta salida", par_zona.Zona);
      END;
      rRsv.SETRANGE("TourOperador facturacion", par_zona.TourOperador);
      rRsv.SETRANGE("Invitado TourOperador", FALSE);
      IF rRsv.FINDSET THEN BEGIN
        REPEAT
          rElem.RESET;
          rElem.SETRANGE(Delegacion     , rRsv.Delegacion);
          rElem.SETRANGE("N§ Reserva"   , rRsv."N§ Reserva");
          rElem.SETRANGE("Tipo elemento", par_elemento);
          rElem.SETRANGE(Humano         , FALSE);
          IF rElem.FINDFIRST THEN BEGIN
            REPEAT
              aux_paxes := aux_paxes + rElem."Numero elementos";
            UNTIL rElem.NEXT = 0;
          END;
        UNTIL rRsv.NEXT = 0;
      END;
      rRsv.RESET;
      EXIT(aux_paxes);
    END;

    PROCEDURE Comprobar_Tipo_Precio_Zona@19(nAgrup@1103355000 : Integer;Fecha@1103355001 : Date;TipVeh@1103355002 : Code[10];nCont@1103355003 : Code[10];nAdul@1103355004 : Integer;nNin@1103355005 : Integer);
    VAR
      rPreC@1103355006 : Record 7009789;
      rPreC2@1103355007 : Record 7009789;
      rZonasAgrupacion@1103355008 : Record 7009799;
      rPar@1103355009 : Record 7009700;
      fil_Zonas@1103355010 : Text[109];
    BEGIN
      rPar.FINDFIRST;

      rZonasAgrupacion.RESET;
      rZonasAgrupacion.SETRANGE("N§ Agrupacion", nAgrup);
      rZonasAgrupacion.SETRANGE("Tipo zona"    , rZonasAgrupacion."Tipo zona"::Compra);
      IF rZonasAgrupacion.FINDSET THEN
        REPEAT
          IF STRPOS(fil_Zonas, rZonasAgrupacion.Zona) = 0 THEN BEGIN
            IF fil_Zonas = '' THEN
              fil_Zonas := rZonasAgrupacion.Zona
            ELSE
              fil_Zonas := fil_Zonas + '|' + rZonasAgrupacion.Zona;
          END;
        UNTIL rZonasAgrupacion.NEXT = 0;

      rPreC.RESET;
      rPreC.SETRANGE (Delegacion     , rPar.Delegacion);
      rPreC.SETRANGE ("N§ Contrato"  , nCont);
      rPreC.SETRANGE ("Codigo precio", rPreC."Codigo precio"::"Precio base");
      rPreC.SETRANGE ("Tipo vehiculo", TipVeh);
      rPreC.SETRANGE ("Tipo elemento", '');
      rPreC.SETFILTER("Fecha desde"  , '<=%1', Fecha);
      rPreC.SETFILTER("Fecha hasta"  , '>=%1', Fecha);
      rPreC.SETFILTER("Rango desde"  , '<=%1', nAdul + nNin);
      rPreC.SETFILTER("Rango hasta"  , '>=%1', nAdul + nNin);
      rPreC.SETFILTER(Destino         , fil_Zonas);
      IF rPreC.FINDSET THEN BEGIN
        rPreC2 := rPreC;
        REPEAT
          IF rPreC."Tipo aplicacion" <> rPreC2."Tipo aplicacion" THEN BEGIN
            inserta_error(STRSUBSTNO(Text033 +
                          Text034, nCont, nAdul + nNin, Fecha)
                          , nAgrup, TRUE);
            EXIT;
          END;
        UNTIL rPreC.NEXT = 0;
      END;
    END;

    PROCEDURE Coste_Reserva@23(rAgr@1103355000 : Record 7009796;Adultos@1103355001 : Integer;Nins@1103355002 : Integer;PrecioAdultos@1103355003 : Decimal;PrecioNins@1103355004 : Decimal;TipoPrecio@1103355005 : 'Vehiculo,Pax');
    VAR
      rRsvAux@1103355006 : Record 7009744;
      Precio@1103355007 : Decimal;
    BEGIN
      // Coste_Reserva

      IF (rAgr."Tipo Calculo" = rAgr."Tipo Calculo"::Margenes) AND (rAgr.Estado = rAgr.Estado::Confirmado) THEN
        EXIT;

      IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN BEGIN
        rRsvAux.SETCURRENTKEY("Agrupacion entrada",
                              "TourOperador facturacion",
                              "Zona entrada");
        rRsvAux.SETRANGE("Agrupacion entrada", rAgr."N§ Agrupacion");
      END
      ELSE BEGIN
        rRsvAux.SETCURRENTKEY("Agrupacion salida",
                              "TourOperador facturacion",
                              "Zona salida");
        rRsvAux.SETRANGE("Agrupacion salida", rAgr."N§ Agrupacion");
      END;
      rRsvAux.SETRANGE("Invitado Transportista", FALSE);

      IF TipoPrecio = TipoPrecio::Vehiculo THEN
        Precio := (PrecioAdultos * rAgr."N§ vehiculos") / (Adultos + Nins);

      rRsvAux.MODIFYALL("Importe Coste Entrada", 0);
      rRsvAux.MODIFYALL("Importe Coste Salida", 0);
      IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN BEGIN
        IF TipoPrecio = TipoPrecio::Vehiculo THEN
          rRsvAux.MODIFYALL("Importe Coste Entrada", Precio)
        ELSE BEGIN
          rRsvAux.SETRANGE("Tipo Persona", rParPer."Codigo Adulto" );
          rRsvAux.MODIFYALL("Importe Coste Entrada", PrecioAdultos);
          rRsvAux.SETRANGE("Tipo Persona", rParPer."Codigo Ni¤o");
          rRsvAux.MODIFYALL("Importe Coste Entrada", PrecioNins);
        END;
      END
      ELSE BEGIN
        IF TipoPrecio = TipoPrecio::Vehiculo THEN
          rRsvAux.MODIFYALL("Importe Coste Salida", Precio)
        ELSE BEGIN
          rRsvAux.SETRANGE("Tipo Persona", rParPer."Codigo Adulto");
          rRsvAux.MODIFYALL("Importe Coste Salida", PrecioAdultos);
          rRsvAux.SETRANGE("Tipo Persona", rParPer."Codigo Ni¤o");
          rRsvAux.MODIFYALL("Importe Coste Salida", PrecioNins);
        END;
      END;
    END;

    PROCEDURE Coste_Suplemento_Reserva@30(rAgr@1103355000 : Record 7009796;Suplemento@1103355001 : Code[10];Precio@1103355002 : Decimal);
    VAR
      rRsvAux@1103355003 : Record 7009744;
      rElem@1103355004 : Record 7009792;
    BEGIN
      // Coste_Suplemento_Reserva
      //
      // PLB 05/07/99

      IF (rAgr."Tipo Calculo" = rAgr."Tipo Calculo"::Margenes) AND (rAgr.Estado = rAgr.Estado::Confirmado) THEN
        EXIT;

      IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN BEGIN
        rRsvAux.SETCURRENTKEY("Agrupacion entrada",
                              "TourOperador facturacion",
                              "Zona entrada");
        rRsvAux.SETRANGE("Agrupacion entrada", rAgr."N§ Agrupacion");
      END
      ELSE BEGIN
        rRsvAux.SETCURRENTKEY("Agrupacion salida",
                              "TourOperador facturacion",
                              "Zona salida");
        rRsvAux.SETRANGE("Agrupacion salida", rAgr."N§ Agrupacion");
      END;
      rRsvAux.SETRANGE("Invitado Transportista", FALSE);

      IF rRsvAux.FINDSET THEN
      BEGIN
        IF rRsvAux."N§ Elementos accesorios" > 0 THEN
        BEGIN
          rElem.SETRANGE(Delegacion     , rRsvAux.Delegacion);
          rElem.SETRANGE("N§ Reserva"   , rRsvAux."N§ Reserva");
          rElem.SETRANGE("Tipo elemento", Suplemento);
          IF rElem.FINDFIRST THEN
          BEGIN
            IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN
              rRsvAux."Importe Coste Entrada" := rRsvAux."Importe Coste Entrada" + rElem."Numero elementos" * Precio
            ELSE
              rRsvAux."Importe Coste Salida" := rRsvAux."Importe Coste Salida" + rElem."Numero elementos" * Precio;
            rRsvAux.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE separa_coste_circuito@37(par_agr@1103355000 : Record 7009796);
    VAR
      adultos_circuito@1103355001 : Integer;
      ni¤os_circuito@1103355002 : Integer;
      lwHayCircuito@1100217000 : Boolean;
    BEGIN
      // separa_coste_circuito

      rCI.RESET;
      rCI.SETRANGE(Agrupacion          , par_agr."N§ Agrupacion");
      rCI.SETRANGE(Concepto            , Text002);
      rCI.SETRANGE("% Reparto Circuito", 0);
      IF rCI.FINDSET(TRUE) THEN BEGIN
        REPEAT
          IF (rCI."Tipo linea" = rCI."Tipo linea"::Vehiculo) OR rCI."Suplemento agrupacion" THEN BEGIN
            importe_total := 0;

            //. Calculamos el coste de las reservas de circuito

            adultos_circuito := cuenta_reservas_circuito(par_agr, TRUE, '', TRUE,
                                                         rParPer."Codigo Adulto", rCI.TourOperador);
            ni¤os_circuito := cuenta_reservas_circuito(par_agr, TRUE, '', TRUE,
                                                       rParPer."Codigo Ni¤o", rCI.TourOperador);
            IF (adultos_circuito + ni¤os_circuito) <> 0 THEN
            BEGIN
               separa_linea_circuito(adultos_circuito + ni¤os_circuito, TRUE);

              //. Calculamos el coste de las reservas de no circuito

              adultos_circuito := 0;
              adultos_circuito := cuenta_reservas_circuito(par_agr, FALSE, '', TRUE,
                                                           rParPer."Codigo Adulto", rCI.TourOperador);
              ni¤os_circuito := 0;
              ni¤os_circuito := cuenta_reservas_circuito(par_agr, FALSE, '', TRUE,
                                                         rParPer."Codigo Ni¤o", rCI.TourOperador);
              IF (adultos_circuito + ni¤os_circuito) <> 0 THEN
                separa_linea_circuito(adultos_circuito + ni¤os_circuito, FALSE);

              //. Comprobamos si el importe de las lineas suma el total de linea que hemos dividido

              IF importe_total <> rCI."Importe con impuesto" THEN BEGIN
                rCI2."Importe con impuesto" := rCI2."Importe con impuesto" +
                                               (rCI."Importe con impuesto" - importe_total);
                rCI2.MODIFY;
              END;

              rCI.DELETE;
            END;
          END
          ELSE BEGIN
            lwHayCircuito := FALSE;
            importe_total := 0;

            CASE rCI."Tipo Pax" OF
              rParPer."Codigo Adulto":
              BEGIN
                adultos_circuito := 0;
                adultos_circuito := cuenta_reservas_circuito(par_agr, TRUE, rCI.Destino, rCI.Ruta,
                                                             rCI."Tipo Pax", rCI.TourOperador);
                IF adultos_circuito <> 0 THEN
                BEGIN
                  lwHayCircuito := TRUE;
                  separa_linea_circuito(adultos_circuito, TRUE);

                  adultos_circuito := 0;
                  adultos_circuito := cuenta_reservas_circuito(par_agr, FALSE, rCI.Destino, rCI.Ruta,
                                                               rCI."Tipo Pax", rCI.TourOperador);
                  IF adultos_circuito <> 0 THEN
                    separa_linea_circuito(adultos_circuito, FALSE);
                END;
              END;
              rParPer."Codigo Ni¤o":
              BEGIN
                ni¤os_circuito := 0;
                ni¤os_circuito := cuenta_reservas_circuito(par_agr, TRUE, rCI.Destino, rCI.Ruta,
                                                           rCI."Tipo Pax", rCI.TourOperador);
                IF ni¤os_circuito <> 0 THEN
                BEGIN
                  lwHayCircuito := TRUE;
                  separa_linea_circuito(ni¤os_circuito, TRUE);

                  ni¤os_circuito := 0;
                  ni¤os_circuito := cuenta_reservas_circuito(par_agr, FALSE, rCI.Destino, rCI.Ruta,
                                                             rCI."Tipo Pax", rCI.TourOperador);
                  IF ni¤os_circuito <> 0 THEN
                    separa_linea_circuito(ni¤os_circuito, FALSE);
                END;
              END;
              ELSE
              BEGIN
                cantidad_elemento := 0;
                cantidad_elemento := cuenta_reservas_circuito(par_agr, TRUE, rCI.Destino, FALSE,
                                                              rCI."Tipo Pax", rCI.TourOperador);
                IF cantidad_elemento <> 0 THEN
                BEGIN
                  lwHayCircuito := TRUE;
                  separa_linea_circuito(cantidad_elemento, TRUE);

                  cantidad_elemento := 0;
                  cantidad_elemento := cuenta_reservas_circuito(par_agr, FALSE, rCI.Destino, FALSE,
                                                                rCI."Tipo Pax", rCI.TourOperador);
                  IF cantidad_elemento <> 0 THEN
                    separa_linea_circuito(cantidad_elemento, FALSE);
                END;
              END;
            END;

            IF lwHayCircuito THEN
            BEGIN
              IF importe_total <> rCI."Importe con impuesto" THEN BEGIN
                rCI2."Importe con impuesto" := rCI2."Importe con impuesto" +
                                               (rCI."Importe con impuesto" - importe_total);
                rCI2.MODIFY;
              END;
              rCI.DELETE;
            END;
          END;
        UNTIL rCI.NEXT = 0;
      END;
    END;

    PROCEDURE separa_linea_circuito@36(cantidad@1103355000 : Integer;circuito@1103355001 : Boolean);
    VAR
      porcentaje_circuito@1103355002 : Decimal;
    BEGIN
      // separa_linea_circuito

      IF rCI."Suplemento agrupacion" THEN
        porcentaje_circuito := ROUND(((cantidad * 100) / rCI.PaxAuxiliar), 0.00001)
      ELSE
        porcentaje_circuito := ROUND(((cantidad * 100) / rCI."Cantidad Real"), 0.00001);
      CLEAR(rCI2);
      rCI2 := rCI;
      rCI2.Circuito               := circuito;

      IF rCI."Suplemento agrupacion" THEN
        rCI2."Cantidad Real"        := rCI."Cantidad aplicada"
      ELSE
        rCI2."Cantidad Real"        := cantidad;


      wPrecRedImp := Precision(rCI2."Cod. divisa",1);
      wPredRedPrec:= Precision(rCI2."Cod. divisa",2);

      rCI2.TourOperador           := rCI.TourOperador;
      rCI2."% Reparto Circuito"   := porcentaje_circuito;
      rCI2."Importe Original SIN" := rCI."Importe sin impuesto";
      rCI2."Importe Original CON" := rCI."Importe con impuesto";
      rCI2."Importe sin impuesto" := ROUND((rCI2."Importe Original SIN" * porcentaje_circuito) / 100,wPrecRedImp);
      rCI2."Importe con impuesto" := ROUND((rCI2."Importe Original CON" * porcentaje_circuito) / 100,wPrecRedImp);
      importe_total := importe_total + rCI2."Importe con impuesto";

      // JPT-Incluyo los importes en divisa local
      rCI2."Importe sin impuestos (DL)" := ValorDL(rCI2."Cod. divisa",TODAY,
                                                                    rCI2."Importe sin impuesto");
      rCI2."Importe con impuestos (DL)" := ValorDL(rCI2."Cod. divisa",TODAY,
                                                                    rCI2."Importe con impuesto");

      rCI3.RESET;
      rCI3.SETRANGE(Agrupacion, rCI2.Agrupacion);
      IF rCI3.FINDLAST THEN
        rCI2."N§ Linea" := rCI3."N§ Linea" + 1;
      rCI3.RESET;
      rCI2.INSERT(TRUE);
    END;

    PROCEDURE cuenta_reservas_circuito@26(par_agr@1103355000 : Record 7009796;par_circuito@1103355001 : Boolean;par_zona@1103355002 : Code[10];par_ruta@1103355003 : Boolean;par_tipo_pax@1103355004 : Code[10];par_to@1103355005 : Code[10]) : Integer;
    VAR
      aux_paxes@1103355006 : Integer;
      reserva@1103355007 : Record 7009744;
    BEGIN
      // cuenta_reservas_circuito

      aux_paxes := 0;

      reserva.RESET;
      IF par_agr."Tipo transfer" = par_agr."Tipo transfer"::Entrada THEN BEGIN
        reserva.SETCURRENTKEY("Agrupacion entrada");
        reserva.SETRANGE("Agrupacion entrada" , par_agr."N§ Agrupacion");
        IF NOT par_ruta THEN
          reserva.SETRANGE("Zona compra entrada", par_zona);
      END
      ELSE BEGIN
        reserva.SETCURRENTKEY("Agrupacion salida");
        reserva.SETRANGE("Agrupacion salida", par_agr."N§ Agrupacion");
        IF NOT par_ruta THEN
          reserva.SETRANGE("Zona compra salida", par_zona);
      END;
      reserva.SETRANGE("Invitado Transportista" , FALSE);
      reserva.SETRANGE("TourOperador facturacion", par_to);
      IF par_circuito THEN
        reserva.SETFILTER(Circuito, '<>%1', '')
      ELSE
        reserva.SETRANGE(Circuito, '');
      IF reserva.FINDSET THEN BEGIN
        REPEAT
          rElem.SETRANGE(Delegacion     , reserva.Delegacion);
          rElem.SETRANGE("N§ Reserva"   , reserva."N§ Reserva");
          rElem.SETRANGE("Tipo elemento", par_tipo_pax);
          IF rElem.FINDFIRST THEN
            aux_paxes := aux_paxes + rElem."Numero elementos";
        UNTIL reserva.NEXT = 0;
      END;
      reserva.RESET;
      EXIT(aux_paxes);
    END;

    PROCEDURE devuelve_orden_zona@33(VAR par_indice@1103355000 : Integer;par_zona@1103355001 : Code[10];par_agr@1103355002 : Integer);
    VAR
      rZonCal@1103355003 : Record 7009812;
    BEGIN
      // devuelve_orden_zona

      indice_zona := 0;
      rZonCal.RESET;
      rZonCal.SETRANGE(Usuario   , USERID());
      rZonCal.SETRANGE(Agrupacion, par_agr);
      IF rZonCal.FINDSET THEN BEGIN
        REPEAT
          indice_zona := indice_zona + 1;
          IF rZonCal.Zona = par_zona THEN
            EXIT;
        UNTIL (rZonCal.NEXT = 0);
      END;
    END;

    PROCEDURE coste_suplemento_agrupacion@25(prAgr@1103355000 : Record 7009796);
    VAR
      lrSupAgr@1103355001 : Record 7009816;
      lrPar@1103355002 : Record 7009700;
    BEGIN
      // coste_suplemento_agrupacion
      //

      lrPar.FINDFIRST;

      rPreC.RESET;
      rPreC.SETCURRENTKEY(Delegacion,
                          "N§ Contrato",
                          "Codigo precio",
                          Destino,
                          "Tipo vehiculo",
                          "Fecha desde",
                          "Fecha hasta");
      rPreC.SETRANGE (Delegacion     , lrPar.Delegacion);
      rPreC.SETRANGE ("Codigo precio", rPreC."Codigo precio"::Suplemento);
      rPreC.SETFILTER("Fecha desde"  , '<=%1', prAgr.Fecha);
      rPreC.SETFILTER("Fecha hasta"  , '>=%1', prAgr.Fecha);
      rPreC.SETRANGE (Activo         , TRUE);

      // ----  Recorrido sobre los suplementos que tengan cantidad y zona de precios  ----

      lrSupAgr.RESET;
      lrSupAgr.SETRANGE ("Num Agrupacion", prAgr."N§ Agrupacion");
      lrSupAgr.SETFILTER(Cantidad        , '<>%1', 0);
      lrSupAgr.SETFILTER(Zona            , '<>%1', '');
      IF lrSupAgr.FINDSET THEN BEGIN
        REPEAT

          // ----  Tomar el contrato  ----

          rConC.RESET;
          IF NOT rConC.GET(lrPar.Delegacion, lrSupAgr."Num Contrato") THEN
            ERROR(Text035, lrPar.Delegacion, lrSupAgr."Num Contrato");

          // ----  Buscar el precio en el contrato  ----

          rPreC.SETRANGE ("N§ Contrato"  , lrSupAgr."Num Contrato");
          rPreC.SETRANGE (Destino         , lrSupAgr.Zona);
          rPreC.SETRANGE ("Tipo elemento", lrSupAgr."Cod Suplemento");
          rPreC.SETFILTER("Rango desde"  , '<=%1', lrSupAgr.Cantidad);
          rPreC.SETFILTER("Rango hasta"  , '>=%1', lrSupAgr.Cantidad);
          IF rPreC.FINDFIRST THEN BEGIN

            CASE prAgr."Tipo Calculo" OF
              prAgr."Tipo Calculo"::Margenes:
              BEGIN
                CLEAR(rMargen);
                rMargen."Tipo Vehiculo"         := prAgr."Tipo vehiculo";
                rMargen."Cantidad aplicada"     := lrSupAgr.Cantidad;
                rMargen.PaxAuxiliar             := rCab."Adulto compra" + rCab."Ni¤os compra";
                rMargen."Tipo elemento"         := rMargen."Tipo elemento"::Suplemento;
                rMargen."Tipo Pax"              := lrSupAgr."Cod Suplemento";
                rMargen."Precio x Pax"          := - (rPreC.Precio);
                rMargen.Importe                 := - (lrSupAgr.Cantidad * rPreC.Precio);
                rMargen.Proveedor               := rConC.Transportista;
                rMargen."Suplemento agrupacion" := TRUE;
              END;
              prAgr."Tipo Calculo"::"Coste/Ingreso":
              BEGIN

                CLEAR(rCI);
                rCI."Tipo Vehiculo"         := prAgr."Tipo vehiculo";
                rCI."Cantidad aplicada"     := lrSupAgr.Cantidad;
                rCI.PaxAuxiliar             := rCab."Adulto compra" + rCab."Ni¤os compra";
                rCI."Tipo linea"         := rCI."Tipo linea"::Suplemento;
                rCI."Tipo Pax"              := lrSupAgr."Cod Suplemento";
                rCI."Precio x Pax"          := - (rPreC.Precio);
                rCI.Importe                 := - (lrSupAgr.Cantidad * rPreC.Precio);
                rCI.Transportista               := rConC.Transportista;
                rCI."Suplemento agrupacion" := TRUE;
              END;
            END;
            comunes_coste(prAgr);

          END
          ELSE
            inserta_error(Text036 + ' ' + lrSupAgr."Cod Suplemento" + ' ' +
                          Text006 + ' ' + STRSUBSTNO('%1', prAgr.Fecha) + ' ' + Text007 + ' ' +
                          STRSUBSTNO('%1', lrSupAgr.Cantidad) + ' ' + Text029 + ' ' + lrSupAgr."Num Contrato",
                          prAgr."N§ Agrupacion", FALSE);


        UNTIL lrSupAgr.NEXT = 0;
      END;
    END;

    PROCEDURE ValorDL@34(pwDivisa@1103355000 : Code[10];pwFecha@1103355001 : Date;pwPrecio@1103355002 : Decimal) : Decimal;
    VAR
      lwPrecio@1103355003 : Decimal;
    BEGIN
      // ValorDL

      CLEAR(lwPrecio);
      lwPrecio := ROUND(rTipoCambioDivisa.ExchangeAmtFCYToFCY(pwFecha, pwDivisa, '', pwPrecio));

      EXIT(lwPrecio);
    END;

    PROCEDURE Precision@40(pwDivisa@1103355000 : Code[10];pwTipo@1103355001 : ',Importe,Precio') : Decimal;
    VAR
      lrDiv@1103355002 : Record 4;
      lwPrec@1103355003 : Decimal;
      lwConfCont@1103355004 : Record 98;
    BEGIN
      // Precision
      // Devuelve la presici¢n de la divisa pasada como parametro

      CLEAR(lwPrec);

      IF pwDivisa = '' THEN BEGIN
        lwConfCont.GET;
        CASE pwTipo OF
          pwTipo::Importe : lwPrec := lwConfCont."Amount Rounding Precision";
          pwTipo::Precio  : lwPrec := lwConfCont."Unit-Amount Rounding Precision";
        END;
      END
      ELSE BEGIN
        lrDiv.GET(pwDivisa);
        CASE pwTipo OF
          pwTipo::Importe : lwPrec := lrDiv."Amount Rounding Precision";
          pwTipo::Precio  : lwPrec := lrDiv."Unit-Amount Rounding Precision";
        END;
      END;

      EXIT(lwPrec);
    END;

    PROCEDURE BuscaEntradasTouroperador@42(VAR prLinTO@1103355000 : Record 7009804;pwCodZona@1100217000 : Code[10]) : Decimal;
    VAR
      lrRsv@1103355001 : Record 7009744;
      aux_paxes@1100217001 : Decimal;
    BEGIN
      // BuscaEntradasTouroperador
      //
      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("Agrupacion entrada");
      lrRsv.SETRANGE("Agrupacion entrada"      , prLinTO.Agrupacion);
      lrRsv.SETRANGE("TourOperador facturacion", prLinTO.TourOperador);
      IF NOT lrRsv.FINDFIRST THEN
        EXIT(0);

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("Fecha entrada",
                          "TourOperador facturacion",
                          "Hotel entrada");
      lrRsv.SETRANGE("Fecha entrada"           , lrRsv."Fecha entrada");
      lrRsv.SETRANGE("TourOperador facturacion", lrRsv."TourOperador facturacion");
      lrRsv.SETRANGE("IATA destino entrada"    , lrRsv."IATA destino entrada");
      //+$013
      IF pwCodZona <> '' THEN
        lrRsv.SETRANGE("Zona venta entrada", pwCodZona);
      IF lrRsv.FINDFIRST THEN
      BEGIN
        IF pwCodZona = '' THEN
        BEGIN
          lrRsv.CALCSUMS("N§ Personas");
          EXIT(lrRsv."N§ Personas");
        END
        ELSE
        BEGIN
          //. Para no complicar la formula del campo calculado hago un recorrido
          aux_paxes := 0;
          REPEAT
            aux_paxes := aux_paxes + lrRsv."N§ Personas";
          UNTIL lrRsv.NEXT = 0;
          EXIT(aux_paxes);
        END;
      END;
    END;

    PROCEDURE CalcularMargenBeneficio@41(VAR prAgr@1103355000 : Record 7009796);
    VAR
      lwTotalCoste@1103355001 : Decimal;
      lwTotalIngreso@1103355002 : Decimal;
      lwBenef@1103355003 : Decimal;
      lwImporteReserva@1103355004 : Decimal;
    BEGIN
      // CalcularMargenBeneficio

      CLEAR(lwTotalCoste);
      CLEAR(lwTotalIngreso);
      CASE prAgr."Tipo Calculo" OF

        prAgr."Tipo Calculo"::Margenes: BEGIN
          CLEAR(rMargen);
          rMargen.SETCURRENTKEY(Agrupacion,Concepto);
          rMargen.SETRANGE(Agrupacion , prAgr."N§ Agrupacion");
          // Ingreso
          rMargen.SETRANGE(Concepto   , Text004);
          IF rMargen.FINDSET THEN
          BEGIN
            REPEAT
              lwTotalIngreso += rMargen."Importe sin impuesto DL";
            UNTIL rMargen.NEXT=0;
          END;
          // Coste
          rMargen.SETRANGE(Concepto   , Text002);
          IF rMargen.FINDSET THEN
          BEGIN
            REPEAT
              lwTotalCoste += rMargen."Importe sin impuesto DL";
            UNTIL rMargen.NEXT=0;
          END;

        END;

        prAgr."Tipo Calculo":: "Coste/Ingreso": BEGIN
          CLEAR(rCI);
          rCI.SETCURRENTKEY(Concepto,
                            Agrupacion,
                            TourOperador,
                            Destino);
          rCI.SETRANGE(Agrupacion, prAgr."N§ Agrupacion");

          // Ingreso
          rCI.SETRANGE(Concepto   , Text004);
          IF rCI.FINDSET THEN
          BEGIN
            REPEAT
              lwTotalIngreso += rCI."Importe sin impuestos (DL)";
            UNTIL rCI.NEXT=0;
          END;

          CLEAR(lwImporteReserva);
          CLEAR(rRsv);
          CASE prAgr."Tipo transfer" OF
            prAgr."Tipo transfer"::Entrada : BEGIN
              rRsv.SETCURRENTKEY("Agrupacion entrada",TourOperador,"Zona servicio entrada");
              rRsv.SETRANGE("Agrupacion entrada"       , prAgr."N§ Agrupacion");
            END;
            prAgr."Tipo transfer"::Salida : BEGIN
              rRsv.SETCURRENTKEY("Agrupacion salida","TourOperador facturacion","Zona salida");
              rRsv.SETRANGE("Agrupacion salida"        , prAgr."N§ Agrupacion");
            END;
          END;
          IF rRsv.FINDFIRST THEN
          BEGIN
            rRsv.CALCSUMS("Importe margen");
            lwImporteReserva := rRsv."Importe margen";
          END;

          CASE prAgr."Tipo transfer" OF
            prAgr."Tipo transfer"::Entrada : lwTotalIngreso -= lwImporteReserva;
            prAgr."Tipo transfer"::Salida  : lwTotalIngreso += lwImporteReserva;
          END;

          // Coste
          rCI.SETRANGE(Concepto   , Text002);
          IF rCI.FINDSET THEN BEGIN
            REPEAT
              lwTotalCoste += rCI."Importe sin impuestos (DL)";
            UNTIL rCI.NEXT=0;
          END;

        END;
      END;

      lwTotalCoste := -lwTotalCoste; // Se le cambia el signo ya que por defecto es negativo
      IF (lwTotalIngreso <> 0) THEN
        lwBenef := ROUND(((lwTotalIngreso - lwTotalCoste) / lwTotalIngreso) * 100,0.02)
      ELSE
        lwBenef := 0;

      prAgr."Margen Beneficio" := lwBenef;
      prAgr.MODIFY;
    END;

    PROCEDURE LimpiaImporteMargen@59(prAgr@1103355000 : Record 7009796);
    BEGIN
      // LimpiaImporteMargen
      // JPT 07/06/05 Resetea el campo Importe Margen de las Reservas

      rRsv.RESET;
      rRsv.SETCURRENTKEY("Agrupacion entrada", "TourOperador facturacion");
      rRsv.SETRANGE("Agrupacion entrada", prAgr."N§ Agrupacion");
      IF rRsv.FINDSET(TRUE) THEN BEGIN
        rRsv.MODIFYALL("Importe margen",0);
      END;
    END;

    LOCAL PROCEDURE _CrearCabeceraCalculo@1100217000(prAgr@1100217000 : Record 7009796);
    BEGIN
      // _CrearCabeceraCalculo

      rCab.INIT;
      rCab.Usuario         := USERID();
      rCab.Agrupacion      := prAgr."N§ Agrupacion";
      rCab.Transportista   := prAgr.Transportista;
      rCab."Tipo Vehiculo" := prAgr."Tipo vehiculo";
      rCab."N§ Vehiculos"  := prAgr."N§ vehiculos";
      rCab.INSERT;
    END;

    PROCEDURE _VuelosTouroperador@1100217001(prCI@1100217000 : Record 7009805;VAR pwVuelos@1100217004 : Integer) : Text[200];
    VAR
      lrRsv@1100217001 : Record 7009744;
      lwVuelos@1100217002 : Text[200];
      lwVuelo@1100217003 : Text[30];
    BEGIN
      // _VuelosTouroperador

      //. Esta funcion devuelve una cadena de texto con los vuelos de las reservas del touroperador
      //. de la linea que estamos calculando

      //. @pwVuelos, variable que utilizamos para devolver cuantos vuelos tiene el touroperador en
      //.            la agrupacion

      pwVuelos := 0;

      lrRsv.RESET;
      IF prCI."Tipo transfer" = prCI."Tipo transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Agrupacion entrada");
        lrRsv.SETRANGE("Agrupacion entrada", prCI.Agrupacion);
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Agrupacion salida");
        lrRsv.SETRANGE("Agrupacion salida", prCI.Agrupacion);
      END;
      lrRsv.SETRANGE("TourOperador facturacion", prCI.TourOperador);
      IF lrRsv.FINDSET THEN
      BEGIN
        REPEAT
          IF prCI."Tipo transfer" = prCI."Tipo transfer"::Entrada THEN
            lwVuelo := lrRsv."Compa¤ia entrada" + ' ' + lrRsv."Vuelo entrada"
          ELSE
            lwVuelo := lrRsv."Compa¤ia salida" + ' ' + lrRsv."Vuelo salida";

          IF lwVuelos = '' THEN
          BEGIN
            pwVuelos  := 1;
            lwVuelos := lwVuelo
          END
          ELSE
          BEGIN
            IF STRPOS(lwVuelos, lwVuelo) = 0 THEN
            BEGIN
              pwVuelos += 1;
              lwVuelos := lwVuelos + '|' + lwVuelo
            END;
          END;
        UNTIL lrRsv.NEXT = 0;
      END;

      EXIT(lwVuelos);
    END;

    BEGIN
    END.
  }
}
