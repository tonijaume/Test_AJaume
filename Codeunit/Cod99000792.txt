OBJECT Codeunit 99000792 Create Prod. Order from Sale
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 Prod. Order %2 has been created.;ESP=Se ha creado la orden de producci¢n %1 %2.';
      HideValidationDialog@1001 : Boolean;

    PROCEDURE CreateProdOrder@1(SalesLine@1000 : Record 37;ProdOrderStatus@1001 : 'Quote,Planned,Firm Planned,Released';OrderType@1002 : 'ItemOrder,ProjectOrder');
    VAR
      ReservEntry@1003 : Record 337;
      ProdOrder@1004 : Record 5405;
      ProdOrderLine@1005 : Record 5406;
      ReserveSalesLine@1007 : Codeunit 99000832;
      CreateProdOrderLines@1008 : Codeunit 99000787;
      ProdOrderStatusMgt@1009 : Codeunit 5407;
      LeadTimeMgt@1011 : Codeunit 5404;
      ItemTrackingMgt@1012 : Codeunit 6500;
      ReservQty@1010 : Decimal;
      ProdOrderRowID@1006 : Text[250];
    BEGIN
      ProdOrder.INIT;
      ProdOrder.Status := ProdOrderStatus;
      ProdOrder."No." := '';
      ProdOrder.INSERT(TRUE);

      ProdOrder."Starting Date" := WORKDATE;
      ProdOrder."Creation Date" := WORKDATE;
      ProdOrder."Low-Level Code" := 0;
      ProdOrder."Gen. Bus. Posting Group" := SalesLine."Gen. Bus. Posting Group";
      IF OrderType = OrderType::ProjectOrder THEN BEGIN
        ProdOrder."Source Type" := ProdOrder."Source Type"::"Sales Header";
        ProdOrder.VALIDATE("Source No.",SalesLine."Document No.");
        ProdOrder."Due Date" := SalesLine."Shipment Date";
        ProdOrder."Ending Date" :=
          LeadTimeMgt.PlannedEndingDate(
            SalesLine."No.",
            SalesLine."Location Code",
            '',
            ProdOrder."Due Date",
            '',
            2);
      END ELSE BEGIN
        ProdOrder."Due Date" := SalesLine."Shipment Date";
        ProdOrder."Source Type" := ProdOrder."Source Type"::Item;
        ProdOrder."Location Code" := SalesLine."Location Code";
        ProdOrder."Bin Code" := SalesLine."Bin Code";
        ProdOrder.VALIDATE("Source No.",SalesLine."No.");
        ProdOrder.VALIDATE(Description,SalesLine.Description);
        SalesLine.CALCFIELDS("Reserved Qty. (Base)");
        ProdOrder.Quantity :=  SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)";
      END;
      ProdOrder.MODIFY;

      ProdOrder.SETRANGE("No.",ProdOrder."No.");
      CreateProdOrderLines.SetSalesLine(SalesLine);
      CreateProdOrderLines.Copy(ProdOrder,1,SalesLine."Variant Code");

      IF ProdOrder."Source Type" = ProdOrder."Source Type"::Item THEN BEGIN
        ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
        ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");

        IF ProdOrderLine.FIND('-') THEN BEGIN

          ProdOrderRowID :=
            ItemTrackingMgt.ComposeRowID(
              DATABASE::"Prod. Order Line",ProdOrderLine.Status,
              ProdOrderLine."Prod. Order No.",'',ProdOrderLine."Line No.",0);
          ItemTrackingMgt.CopyItemTracking2(SalesLine.RowID1,ProdOrderRowID,TRUE,TRUE); //*** SE 13910

          SalesLine.CALCFIELDS("Reserved Qty. (Base)");
          IF ProdOrderLine."Remaining Qty. (Base)" > (SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)") THEN
            ReservQty := (SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)")
          ELSE
            ReservQty := ProdOrderLine."Remaining Qty. (Base)";
          ReserveSalesLine.SetBinding(ReservEntry.Binding::"Order-to-Order");
          ReserveSalesLine.CreateReservationSetFrom(
            DATABASE::"Prod. Order Line",
            ProdOrderLine.Status,
            ProdOrderLine."Prod. Order No.",
            '',
            ProdOrderLine."Line No.",0,
            ProdOrderLine."Variant Code",
            ProdOrderLine."Location Code",'','',
            ProdOrderLine."Qty. per Unit of Measure");
          ReserveSalesLine.CreateReservation(
            SalesLine,
            ProdOrderLine.Description,
            ProdOrderLine."Ending Date",
            ReservQty,
            '','');
          IF SalesLine.Reserve = SalesLine.Reserve::Never THEN
            SalesLine.Reserve := SalesLine.Reserve::Optional;
          SalesLine.MODIFY;
          ProdOrderLine.MODIFY;
          IF OrderType = OrderType::ItemOrder THEN
            CreateProdOrderLines.CopyDimFromSalesLine(SalesLine,ProdOrderLine);
        END;
      END;
      IF ProdOrder.Status = ProdOrder.Status::Released THEN
        ProdOrderStatusMgt.FlushProdOrder(ProdOrder,ProdOrder.Status,WORKDATE);

      IF NOT HideValidationDialog THEN
        MESSAGE(
          Text000,
          ProdOrder.Status,ProdOrder."No.");
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    BEGIN
    END.
  }
}
