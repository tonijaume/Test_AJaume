OBJECT Codeunit 8725 Mobile Sales Document Handler
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    TableNo=8705;
    OnRun=VAR
            MessageIn@1003 : BigText;
            MessageOut@1001 : BigText;
          BEGIN
            MobDocQueue := Rec;
            IsNotWebServiceCall := TRUE;

            CONSISTENT(FALSE);

            CASE "Document Type" OF
              'CreateActivity':
                CreateActivityHandle(MessageIn, "Mobile User ID", MessageOut);
              'DeleteActivity':
                DeleteActivityHandle(MessageIn, "Mobile User ID", MessageOut);
              'EditActivity':
                ModifyActivityHandle(MessageIn, "Mobile User ID", MessageOut);
              'CreateSalesOrder':
                CreateOrderHandle(MessageIn, "Mobile User ID", MessageOut);
              ELSE
                ERROR(Text001,"Document Type");
            END;

            MobDocMgt.UpdateResult(Rec, XMLResultDoc);

            CONSISTENT(TRUE);
          END;

  }
  CODE
  {
    VAR
      MobDocMgt@1002 : Codeunit 8701;
      MobXMLMgt@1003 : Codeunit 8704;
      Text001@1006 : TextConst 'ENU=No document handler is available for "%1".;ESP=No est  disponible ning£n controlador de documentos para "%1".';
      Text002@1007 : TextConst 'ENU=The document request has been handled successfully.;ESP=La solicitud de documento se ha procesado correctamente.';
      MobPermissionMgt@1000 : Codeunit 8705;
      MobSalesMgt@1001 : Codeunit 8726;
      MobDocQueue@1004 : Record 8705;
      XMLResultDoc@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      IsNotWebServiceCall@1008 : Boolean;

    PROCEDURE CreateActivityHandle@14(MessageIn@1002 : BigText;MobileUserID@1000 : Text[65];VAR MessageOut@1009 : BigText);
    VAR
      Todo@1001 : Record 5080;
      Permission@1008 : Record 2000000005;
      XMLRequestDoc@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      XMLRootNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLNodeList@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      XMLCurrNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLActivityListNode@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      AttributeValue@1010 : Text[250];
      i@1011 : Integer;
    BEGIN
      WITH Permission DO BEGIN
        MobPermissionMgt.CheckPermission(
          MobileUserID,"Object Type"::"Table Data",DATABASE::"To-do",
          "Read Permission"::" ","Insert Permission"::Yes,"Modify Permission"::" ",
          "Delete Permission"::" ","Execute Permission"::" ");

        MobPermissionMgt.CheckPermission(
          MobileUserID,"Object Type"::"Table Data",DATABASE::"Mobile Sales Activity",
          "Read Permission"::" ","Insert Permission"::Yes,"Modify Permission"::" ",
          "Delete Permission"::" ","Execute Permission"::" ");
      END;

      IF ISSERVICETIER AND NOT IsNotWebServiceCall THEN
        MobDocMgt.GetXMLFromBigText(MessageIn, XMLRequestDoc)
      ELSE
        MobDocQueue.LoadXMLRequestDoc(XMLRequestDoc);

      XMLRootNode := XMLRequestDoc.documentElement;
      XMLNodeList := XMLRootNode.childNodes;

      FOR i := 1 TO XMLNodeList.length DO BEGIN
        XMLCurrNode := XMLNodeList.item(i - 1);
        MobXMLMgt.GetAttribute(XMLCurrNode,'name',AttributeValue);
        CASE AttributeValue OF
          'CreateActivity': XMLActivityListNode := XMLCurrNode.firstChild;
          ELSE
            ERROR(Text001,AttributeValue);
        END;
      END;

      CreateActivityNodeHandle(MobileUserID,XMLActivityListNode,Todo);
      CreateResponse(MessageOut);
    END;

    PROCEDURE ModifyActivityHandle@24(MessageIn@1002 : BigText;MobileUserID@1000 : Text[65];VAR MessageOut@1009 : BigText);
    VAR
      Todo@1001 : Record 5080;
      Permission@1008 : Record 2000000005;
      XMLRequestDoc@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      XMLRootNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLNodeList@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      XMLCurrNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLActivityListNode@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      AttributeValue@1010 : Text[250];
      i@1011 : Integer;
    BEGIN
      WITH Permission DO
        MobPermissionMgt.CheckPermission(
          MobileUserID,"Object Type"::"Table Data",DATABASE::"To-do",
          "Read Permission"::" ","Insert Permission"::" ","Modify Permission"::Yes,
          "Delete Permission"::" ","Execute Permission"::" ");

      IF ISSERVICETIER AND NOT IsNotWebServiceCall THEN
        MobDocMgt.GetXMLFromBigText(MessageIn, XMLRequestDoc)
      ELSE
        MobDocQueue.LoadXMLRequestDoc(XMLRequestDoc);

      XMLRootNode := XMLRequestDoc.documentElement;
      XMLNodeList := XMLRootNode.childNodes;

      FOR i := 1 TO XMLNodeList.length DO BEGIN
        XMLCurrNode := XMLNodeList.item(i - 1);
        MobXMLMgt.GetAttribute(XMLCurrNode,'name',AttributeValue);
        CASE AttributeValue OF
          'Edit': XMLActivityListNode := XMLCurrNode.firstChild;
          ELSE
            ERROR(Text001,AttributeValue);
        END;
      END;

      ModifyActivityNodeHandle(MobileUserID,XMLActivityListNode,Todo);
      CreateResponse(MessageOut);
    END;

    PROCEDURE DeleteActivityHandle@3(MessageIn@1002 : BigText;MobileUserID@1000 : Text[65];VAR MessageOut@1009 : BigText);
    VAR
      Todo@1001 : Record 5080;
      Permission@1008 : Record 2000000005;
      XMLRequestDoc@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      XMLRootNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLNodeList@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      XMLCurrNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLActivityListNode@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      AttributeValue@1010 : Text[250];
      i@1011 : Integer;
    BEGIN
      WITH Permission DO BEGIN
        MobPermissionMgt.CheckPermission(
          MobileUserID,"Object Type"::"Table Data",DATABASE::"To-do",
          "Read Permission"::" ","Insert Permission"::" ","Modify Permission"::" ",
          "Delete Permission"::Yes,"Execute Permission"::" ");

        MobPermissionMgt.CheckPermission(
          MobileUserID,"Object Type"::"Table Data",DATABASE::"Mobile Sales Activity",
          "Read Permission"::" ","Insert Permission"::" ","Modify Permission"::" ",
          "Delete Permission"::Yes,"Execute Permission"::" ");
      END;

      IF ISSERVICETIER AND NOT IsNotWebServiceCall THEN
        MobDocMgt.GetXMLFromBigText(MessageIn, XMLRequestDoc)
      ELSE
        MobDocQueue.LoadXMLRequestDoc(XMLRequestDoc);

      XMLRootNode := XMLRequestDoc.documentElement;
      XMLNodeList := XMLRootNode.childNodes;

      FOR i := 1 TO XMLNodeList.length DO BEGIN
        XMLCurrNode := XMLNodeList.item(i - 1);
        MobXMLMgt.GetAttribute(XMLCurrNode,'name',AttributeValue);
        CASE AttributeValue OF
          'Delete': XMLActivityListNode := XMLCurrNode.firstChild;
          ELSE
            ERROR(Text001,AttributeValue);
        END;
      END;

      DeleteActivityNodeHandle(MobileUserID,XMLActivityListNode,Todo);
      CreateResponse(MessageOut);
    END;

    PROCEDURE CreateOrderHandle@4(MessageIn@1002 : BigText;MobileUserID@1000 : Text[65];VAR MessageOut@1012 : BigText);
    VAR
      SalesHeader@1009 : Record 36;
      Permission@1001 : Record 2000000005;
      XMLRequestDoc@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      XMLRootNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLNodeList@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      XMLCurrNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLOrderNode@1008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLOrderSignatureNode@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      AttributeValue@1010 : Text[250];
      i@1011 : Integer;
    BEGIN
      WITH Permission DO BEGIN
        MobPermissionMgt.CheckPermission(
          MobileUserID,"Object Type"::"Table Data",DATABASE::"Sales Header",
          "Read Permission"::" ","Insert Permission"::Yes,"Modify Permission"::" ",
          "Delete Permission"::" ","Execute Permission"::" ");

        MobPermissionMgt.CheckPermission(
          MobileUserID,"Object Type"::"Table Data",DATABASE::"Sales Line",
          "Read Permission"::" ","Insert Permission"::Yes,"Modify Permission"::" ",
          "Delete Permission"::" ","Execute Permission"::" ");
      END;

      IF ISSERVICETIER AND NOT IsNotWebServiceCall THEN
        MobDocMgt.GetXMLFromBigText(MessageIn, XMLRequestDoc)
      ELSE
        MobDocQueue.LoadXMLRequestDoc(XMLRequestDoc);

      XMLRootNode := XMLRequestDoc.documentElement;
      XMLNodeList := XMLRootNode.childNodes;

      FOR i := 1 TO XMLNodeList.length DO BEGIN
        XMLCurrNode := XMLNodeList.item(i - 1);
        MobXMLMgt.GetAttribute(XMLCurrNode,'name',AttributeValue);
        CASE AttributeValue OF
          'OrderOverview': XMLOrderNode := XMLCurrNode.firstChild;
          'Signature': XMLOrderSignatureNode := XMLCurrNode.firstChild;
          ELSE
            ERROR(Text001,AttributeValue);
        END;
      END;

      CreateOrderNodeHandle(MobileUserID,XMLOrderNode,XMLOrderSignatureNode,SalesHeader);
      CreateResponse(MessageOut);
    END;

    LOCAL PROCEDURE CreateActivityNodeHandle@1(MobileUserID@1001 : Text[65];VAR XMLActivityListNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR Todo@1009 : Record 5080);
    VAR
      TempMobileSalesActivity@1015 : TEMPORARY Record 8727;
      Attendee@1004 : Record 5199;
      RecRef@1000 : RecordRef;
    BEGIN
      GetActivityProperties(XMLActivityListNode,TempMobileSalesActivity);

      Todo.INIT;
      Todo.VALIDATE("Salesperson Code",GetSalesPersonCode(MobileUserID));
      Todo.Type := Todo.Type::Meeting;
      Todo.VALIDATE(Description,TempMobileSalesActivity.Description);
      Todo.VALIDATE(Date,TempMobileSalesActivity.Date);
      Todo.VALIDATE("Start Time",TempMobileSalesActivity."Start Time");
      IF TempMobileSalesActivity."End Time" > TempMobileSalesActivity."Start Time" THEN
        Todo.VALIDATE(
          Duration,
          CREATEDATETIME(Todo.Date,TempMobileSalesActivity."End Time") -
          CREATEDATETIME(Todo.Date,TempMobileSalesActivity."Start Time"))
      ELSE
        Todo.VALIDATE(
          Duration,
          CREATEDATETIME(Todo.Date + 1,TempMobileSalesActivity."End Time") -
          CREATEDATETIME(Todo.Date,TempMobileSalesActivity."Start Time"));

      IF TempMobileSalesActivity.Completed THEN BEGIN
        Todo.Closed := TRUE;
        Todo."Date Closed" := TODAY;
        Todo.Status := Todo.Status::Completed;
      END;

      Todo.INSERT(TRUE);

      Attendee.CreateAttendee(
        Attendee,Todo."No.",10000,
        Attendee."Attendance Type"::"To-do Organizer",
        Attendee."Attendee Type"::Salesperson,
        Todo."Salesperson Code",FALSE);
      Todo.CreateSubTodo(Attendee,Todo);

      Attendee.CreateAttendee(
        Attendee,Todo."No.",20000,Attendee."Attendance Type"::Required,
        Attendee."Attendee Type"::Contact,
        TempMobileSalesActivity."Contact No.",FALSE);
      Todo.CreateSubTodo(Attendee,Todo);

      MobSalesMgt.TodoOnInsert(Todo);

      RecRef.GETTABLE(Todo);
      MobDocMgt.LogInsertion(MobileUserID,RecRef)
    END;

    LOCAL PROCEDURE ModifyActivityNodeHandle@7(MobileUserID@1001 : Text[65];VAR XMLActivityListNode@1009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR Todo@1002 : Record 5080);
    VAR
      TempMobileSalesActivity@1000 : TEMPORARY Record 8727;
      xRecRef@1008 : RecordRef;
      RecRef@1007 : RecordRef;
    BEGIN
      GetActivityProperties(XMLActivityListNode,TempMobileSalesActivity);

      Todo.GET(TempMobileSalesActivity."To-do No.");
      xRecRef.GETTABLE(Todo);

      Todo.VALIDATE(Description,COPYSTR(TempMobileSalesActivity.Description,1,MAXSTRLEN(Todo.Description)));
      Todo.VALIDATE(Date,TempMobileSalesActivity.Date);
      Todo.VALIDATE("Start Time",TempMobileSalesActivity."Start Time");
      IF TempMobileSalesActivity."End Time" > TempMobileSalesActivity."Start Time" THEN
        Todo.VALIDATE(
          Duration,
          CREATEDATETIME(Todo.Date,TempMobileSalesActivity."End Time") -
          CREATEDATETIME(Todo.Date,TempMobileSalesActivity."Start Time"))
      ELSE
        Todo.VALIDATE(
          Duration,
          CREATEDATETIME(Todo.Date + 1,TempMobileSalesActivity."End Time") -
          CREATEDATETIME(Todo.Date,TempMobileSalesActivity."Start Time"));

      IF TempMobileSalesActivity.Completed AND (Todo.Status <> Todo.Status::Completed) THEN BEGIN
        Todo.Closed := TRUE;
        Todo."Date Closed" := TODAY;
        Todo.Status := Todo.Status::Completed;
        IF Todo.Recurring THEN BEGIN
          Todo.CreateRecurringTodo;
        END;
      END;

      IF NOT TempMobileSalesActivity.Completed AND (Todo.Status = Todo.Status::Completed) THEN BEGIN
        Todo.Closed := FALSE;
        Todo."Date Closed" := 0D;
        Todo.Status := Todo.Status::"In Progress";
      END;

      Todo.MODIFY(TRUE);

      RecRef.GETTABLE(Todo);
      MobDocMgt.LogModification(MobileUserID,RecRef,xRecRef);
    END;

    LOCAL PROCEDURE DeleteActivityNodeHandle@2(MobileUserID@1001 : Text[65];VAR XMLActivityListNode@1009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR Todo@1002 : Record 5080);
    VAR
      TempMobileSalesActivity@1000 : TEMPORARY Record 8727;
      RecRef@1006 : RecordRef;
      xRecRef@1007 : RecordRef;
    BEGIN
      GetActivityProperties(XMLActivityListNode,TempMobileSalesActivity);

      Todo.GET(TempMobileSalesActivity."To-do No.");
      xRecRef.GETTABLE(Todo);

      Todo.VALIDATE(Canceled,TRUE);
      Todo.MODIFY(TRUE);

      RecRef.GETTABLE(Todo);
      MobDocMgt.LogModification(MobileUserID,RecRef,xRecRef);
    END;

    LOCAL PROCEDURE CreateOrderNodeHandle@5(MobileUserID@1012 : Text[65];VAR XMLOrderNode@1009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR XMLOrderSignatureNode@1008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR SalesHeader@1002 : Record 36);
    VAR
      SalesLine@1007 : Record 37;
      RecRef@1000 : RecordRef;
      XMLOutStream@1011 : OutStream;
      XMLCurrNode@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLFoundNode@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLNodeList@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      NextLineNo@1006 : Integer;
      i@1005 : Integer;
    BEGIN
      MobXMLMgt.FindNode(XMLOrderNode,'header',XMLCurrNode);
      MobXMLMgt.FindNode(XMLCurrNode,'headerProperties',XMLCurrNode);

      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.INSERT(TRUE);

      MobXMLMgt.FindNode(XMLCurrNode,'accountNumber',XMLFoundNode);
      SalesHeader.VALIDATE("Sell-to Customer No.",XMLFoundNode.text);

      MobXMLMgt.FindNode(XMLCurrNode,'orderReference',XMLFoundNode);
      SalesHeader.VALIDATE("External Document No.",XMLFoundNode.text);

      MobXMLMgt.FindNode(XMLCurrNode,'customerRefNumber',XMLFoundNode);
      SalesHeader.VALIDATE("Your Reference",XMLFoundNode.text);

      MobXMLMgt.FindNode(XMLCurrNode,'deliveryDate',XMLFoundNode);
      SalesHeader.VALIDATE("Requested Delivery Date",Text2Date(XMLFoundNode.text));

      MobXMLMgt.FindNode(XMLCurrNode,'orderDate',XMLFoundNode);
      SalesHeader.VALIDATE("Posting Date",Text2Date(XMLFoundNode.text));
      SalesHeader.VALIDATE("Order Date",Text2Date(XMLFoundNode.text));

      MobXMLMgt.FindNode(XMLCurrNode,'currency',XMLFoundNode);
      SalesHeader.VALIDATE("Currency Code",XMLFoundNode.text);

      SalesHeader."Salesperson Code" := GetSalesPersonCode(MobileUserID);

      IF NOT ISCLEAR(XMLOrderSignatureNode) THEN BEGIN
        MobXMLMgt.FindNode(XMLOrderSignatureNode,'orderSignature',XMLCurrNode);

        MobXMLMgt.FindNode(XMLCurrNode,'comment',XMLFoundNode);
        InsertComment(MobileUserID,SalesHeader,XMLFoundNode);

        MobXMLMgt.FindNode(XMLCurrNode,'signature',XMLFoundNode);
        SalesHeader.Signature.CREATEOUTSTREAM(XMLOutStream);
        MobXMLMgt.Base64SaveNode(XMLFoundNode,XMLOutStream);
      END;

      SalesHeader.MODIFY(TRUE);

      RecRef.GETTABLE(SalesHeader);
      MobDocMgt.LogInsertion(MobileUserID,RecRef);

      MobXMLMgt.FindNode(XMLOrderNode,'orderlines',XMLCurrNode);
      XMLNodeList := XMLCurrNode.childNodes;

      FOR i := 1 TO XMLNodeList.length DO BEGIN
        XMLCurrNode := XMLNodeList.item(i - 1);
        MobXMLMgt.FindNode(XMLCurrNode,'orderLineProperties',XMLCurrNode);

        NextLineNo := NextLineNo + 10000;
        SalesLine.INIT;
        SalesLine.VALIDATE("Document Type",SalesHeader."Document Type");
        SalesLine.VALIDATE("Document No.",SalesHeader."No.");
        SalesLine.VALIDATE(Type,SalesLine.Type::Item);
        SalesLine."Line No." := NextLineNo;
        SalesLine.INSERT(TRUE);

        MobXMLMgt.FindNode(XMLCurrNode,'itemId',XMLFoundNode);
        SalesLine.VALIDATE("No.",XMLFoundNode.text);

        MobXMLMgt.FindNode(XMLCurrNode,'quantity',XMLFoundNode);
        SalesLine.VALIDATE(Quantity,Text2Decimal(XMLFoundNode.text));

        SalesLine.MODIFY(TRUE);
        RecRef.GETTABLE(SalesLine);
        MobDocMgt.LogInsertion(MobileUserID,RecRef);
      END;
    END;

    LOCAL PROCEDURE GetSalesPersonCode@8(UserId@1000 : Text[65]) : Code[10];
    VAR
      MobileUser@1001 : Record 8700;
    BEGIN
      MobileUser.SETFILTER("User ID",'@' + UserId);
      IF MobileUser.FINDFIRST THEN BEGIN
        MobileUser.TESTFIELD("Salesperson Code");
        EXIT(MobileUser."Salesperson Code");
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE GetActivityProperties@16(VAR XMLNode@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR MobileSalesActivity@1003 : Record 8727);
    VAR
      XMLNodeList@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      XMLCurrNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      i@1004 : Integer;
    BEGIN
      MobXMLMgt.FindNode(XMLNode,'activity',XMLCurrNode);
      MobXMLMgt.FindNode(XMLCurrNode,'properties',XMLCurrNode);

      XMLNodeList := XMLCurrNode.childNodes;

      FOR i := 1 TO XMLNodeList.length DO BEGIN
        XMLCurrNode := XMLNodeList.item(i - 1);
        CASE XMLCurrNode.nodeName OF
          'accountNumber': MobileSalesActivity.VALIDATE("Customer No.",XMLCurrNode.text);
          'activityId': MobileSalesActivity."To-do No." := XMLCurrNode.text;
          'start':
            BEGIN
              MobileSalesActivity.Date := Text2Date(XMLCurrNode.text);
              MobileSalesActivity."Start Time" := Text2Time(XMLCurrNode.text);
            END;
          'end': MobileSalesActivity."End Time" := Text2Time(XMLCurrNode.text);
          'type': ;
          'purpose': MobileSalesActivity.Description := XMLCurrNode.text;
          'completed': MobileSalesActivity.Completed := XMLCurrNode.text = '1';
          ELSE
            ERROR(Text001,XMLCurrNode.nodeName);
        END;
      END;
    END;

    LOCAL PROCEDURE InsertComment@9(MobileUserID@1011 : Text[65];VAR SalesHeader@1004 : Record 36;VAR XMLNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode");
    VAR
      SalesComment@1001 : Record 44;
      Permission@1010 : Record 2000000005;
      RecRef@1008 : RecordRef;
      XMLText@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF87-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMText";
      NextChar@1002 : Text[1];
      CharCounter@1003 : Integer;
      LineCharCount@1006 : Integer;
      NextLineNo@1007 : Integer;
    BEGIN
      XMLText := XMLNode.firstChild;
      IF ISCLEAR(XMLText) THEN
        EXIT;

      SalesComment.INIT;
      SalesComment.VALIDATE("Document Type",SalesHeader."Document Type"::Order);
      SalesComment.VALIDATE("No.",SalesHeader."No.");
      SalesComment.VALIDATE(Date,SalesHeader."Order Date");
      SalesComment."Line No." := 10000;
      NextLineNo := SalesComment."Line No." + 10000;

      FOR CharCounter := 0 TO (XMLText.length - 1) DO BEGIN
        NextChar := XMLText.substringData(CharCounter,1);
        IF (LineCharCount = MAXSTRLEN(SalesComment.Comment)) OR (NextChar[1] IN [10,13]) THEN BEGIN
          IF SalesComment.Comment <> '' THEN BEGIN
            WITH Permission DO
              MobPermissionMgt.CheckPermission(
                MobileUserID,"Object Type"::"Table Data",DATABASE::"Sales Comment Line",
                "Read Permission"::" ","Insert Permission"::Yes,"Modify Permission"::" ",
                "Delete Permission"::" ","Execute Permission"::" ");

            SalesComment.VALIDATE(Comment);
            SalesComment.INSERT(TRUE);
            RecRef.GETTABLE(SalesComment);
            MobDocMgt.LogInsertion(MobileUserID,RecRef);
            SalesComment.INIT;
            SalesComment.VALIDATE("Document Type",SalesHeader."Document Type"::Order);
            SalesComment.VALIDATE("No.",SalesHeader."No.");
            SalesComment."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 10000;
          END;
          LineCharCount := 0;
        END;
        IF NOT (NextChar[1] IN [10,13]) THEN BEGIN
          LineCharCount := LineCharCount + 1;
          SalesComment.Comment := SalesComment.Comment + NextChar;
        END;
      END;

      IF SalesComment.Comment <> '' THEN BEGIN
        WITH Permission DO
          MobPermissionMgt.CheckPermission(
            MobileUserID,"Object Type"::"Table Data",DATABASE::"Sales Comment Line",
            "Read Permission"::" ","Insert Permission"::Yes,"Modify Permission"::" ",
            "Delete Permission"::" ","Execute Permission"::" ");

        SalesComment.INSERT(TRUE);
        RecRef.GETTABLE(SalesComment);
        MobDocMgt.LogInsertion(MobileUserID,RecRef);
      END;
    END;

    LOCAL PROCEDURE CreateResponse@11(VAR MessageOut@1001 : BigText);
    VAR
      XMLRootNode@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLCreatedNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      MobDocMgt.InitializeResponseDoc(XMLResultDoc);
      XMLRootNode := XMLResultDoc.documentElement;
      MobXMLMgt.AddElement(XMLRootNode,'description', Text002,XMLRootNode.namespaceURI,XMLCreatedNode);

      IF ISSERVICETIER THEN
        MobDocMgt.GetBigTextFromXML(XMLResultDoc,MessageOut);
    END;

    LOCAL PROCEDURE Text2Date@39(TextDate@1000 : Text[25]) : Date;
    VAR
      Day@1001 : Integer;
      Month@1002 : Integer;
      Year@1003 : Integer;
    BEGIN
      IF EVALUATE(Day,COPYSTR(TextDate,9,2)) AND
         EVALUATE(Month,COPYSTR(TextDate,6,2)) AND
         EVALUATE(Year,COPYSTR(TextDate,1,4))
      THEN
        EXIT(DMY2DATE(Day,Month,Year));
      EXIT(0D);
    END;

    LOCAL PROCEDURE Text2Time@44(TextTime@1000 : Text[25]) : Time;
    VAR
      TempDateTime@1001 : DateTime;
      TempTime@1002 : Time;
      ResultTime@1003 : Time;
    BEGIN
      IF EVALUATE(TempTime,COPYSTR(TextTime,12,8)) THEN BEGIN
        TempDateTime := CREATEDATETIME(TODAY,TempTime);
        ResultTime := DT2TIME(TempDateTime);
        EXIT(ResultTime);
      END;
      EXIT(0T);
    END;

    LOCAL PROCEDURE Text2Decimal@17(DecimalText@1000 : Text[30]) Result : Decimal;
    BEGIN
      IF EVALUATE(Result,DecimalText,9) THEN
        EXIT(Result);
      EXIT(0);
    END;

    EVENT XMLResultDoc@1005::ondataavailable@198();
    BEGIN
    END;

    EVENT XMLResultDoc@1005::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}
