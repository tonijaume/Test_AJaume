OBJECT Codeunit 5944 SignServContractDoc
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    TableNo=5965;
    Permissions=TableData 5970=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLAcc@1057 : Record 15;
      DocDim@1041 : Record 357;
      ServHeader@1043 : Record 5900;
      ServMgtSetup@1006 : Record 5911;
      FromServContractHeader@1050 : Record 5965;
      FromServContractLine@1034 : Record 5964;
      ToServContractLine@1033 : Record 5964;
      ServContractAccGr@1003 : Record 5973;
      FiledServContractHeader@1016 : Record 5970;
      ToServContractDim@1031 : Record 389;
      FromServContractDim@1030 : Record 389;
      FromContractServDisc@1037 : Record 5972;
      ToContractServDisc@1036 : Record 5972;
      ContractChangeLog@1029 : Record 5967;
      ContractGainLossEntry@1038 : Record 5969;
      ServItemBufferToAdd@1032 : TEMPORARY Record 5940;
      FromServHour@1051 : Record 5910;
      ToServHour@1052 : Record 5910;
      FromServCommentLine@1053 : Record 5906;
      ToServCommentLine@1054 : Record 5906;
      ServContractMgt@1000 : Codeunit 5940;
      ServLogMgt@1035 : Codeunit 5906;
      ServHeaderNo@1039 : Code[20];
      SigningQuotation@1001 : Boolean;
      InvoicingStartingPeriod@1019 : Boolean;
      InvoiceNow@1021 : Boolean;
      GoOut@1024 : Boolean;
      AmountNow@1028 : Decimal;
      InvoiceAmountDueToSigning@1002 : Decimal;
      Text001@1005 : TextConst 'ENU=You cannot convert the service contract quote %1 to a contract,\because some Service Contract Lines have a missing %2.;ESP=No puede convertir la oferta contrato servicio %1 en un contrato,\porque algunas l¡neas contrato servicio no tienen un %2.';
      Text003@1007 : TextConst 'ENU=%1 must be the first day of the month.;ESP=%1 debe ser el primer d¡a del mes.';
      Text004@1046 : TextConst 'ENU=You cannot sign service contract %1,\because some Service Contract Lines have a missing %2.;ESP=No puede firmar el contrato servicio %1,\porque algunas l¡neas contrato servicio no tienen un %2.';
      Text005@1008 : TextConst 'ENU=%1 is not the last day of the month.\\Confirm that this is the correct date.;ESP=%1 no es el £ltimo d¡a del mes.\\¨Confirma que es la fecha correcta?';
      Text010@1048 : TextConst 'ENU=Do you want to sign service contract %1?;ESP=¨Desea firmar el contrato servicio %1?';
      Text011@1014 : TextConst 'ENU=Do you want to convert the contract quote into a contract?;ESP=¨Desea convertir la oferta contrato en un contrato?';
      Text012@1013 : TextConst 'ENU=Signing contract          #1######\;ESP=Firmando contrato         #1######\';
      Text013@1012 : TextConst 'ENU=Processing contract lines #2######\;ESP=Procesando l¡ns. contrato #2######\';
      Window@1015 : Dialog;
      WPostLine@1018 : Integer;
      Text015@1020 : TextConst 'ENU=Do you want to create an invoice for the period %1 .. %2?;ESP=¨Confirma que desea crear una factura para el periodo %1 .. %2?';
      AppliedEntry@1044 : Integer;
      InvoiceFrom@1023 : Date;
      InvoiceTo@1022 : Date;
      FirstPrepaidPostingDate@1026 : Date;
      LastPrepaidPostingDate@1025 : Date;
      PostingDate@1027 : Date;
      Text016@1040 : TextConst 'ENU=Service Invoice %1 was created.;ESP=Se ha creado la factura de venta %1.';
      Text018@1055 : TextConst 'ENU=It is not possible to add new lines to this service contract with the current working date\because it will cause a gap in the invoice period.;ESP=No es posible a¤adir nuevas l¡neas a este contrato servicio con la fecha trabajo actual\porque causar¡a un salto en el periodo factura.';
      HideDialog@1056 : Boolean;
      Text019@1058 : TextConst 'ENU=You cannot sign service contract with negative annual amount.;ESP=No puede firmar un contrato servicio con un importe anual negativo.';
      Text020@1059 : TextConst 'ENU=You cannot sign service contract with zero annual amount when invoice period is different from None.;ESP=No puede firmar el contrato servicio con un importe anual de cero cuando el periodo factura es diferente de Ninguno.';
      Text021@1004 : TextConst 'ENU=One or more service items on contract quote %1 does not belong to customer %2.;ESP=Uno o m s prods. servicio en la oferta contrato %1 no pertenece/n al cliente %2.';
      Text022@1009 : TextConst 'ENU=The %1 field is empty on one or more service contract lines, and service orders cannot be created automatically. Do you want to continue?;ESP=El campo %1 est  vac¡o en al menos una l¡nea de contracto de servicio, no es posible crear autom ticamente pedidos de servicio. ¨Desea continuar?';
      Text023@1010 : TextConst 'ENU=You cannot sign a service contract if its %1 is not equal to the %2 value.;ESP=No es posible firmar un contrato de servicio si el valor de %1 no es igual al valor de %2.';
      Text024@1011 : TextConst 'ENU=You cannot sign a canceled service contract.;ESP=No es posible firmar un contrato de servicio cancelado.';

    PROCEDURE SignContractQuote@2(FromServContractHeader@1000 : Record 5965);
    VAR
      FromServContractLine@1008 : Record 5964;
      ToServContractHeader@1007 : Record 5965;
      FiledServContractHeader2@1009 : Record 5970;
      ServItem@1006 : Record 5940;
      InvFrom@1003 : Date;
      InvTo@1004 : Date;
      TempDate@1005 : Date;
      InvAmountRounded@1010 : Decimal;
    BEGIN
      IF NOT HideDialog THEN
        CLEARALL;
      FromServContractHeader.TESTFIELD("Serv. Contract Acc. Gr. Code");
      FromServContractHeader.TESTFIELD("Service Period");
      FromServContractHeader.CALCFIELDS("Calcd. Annual Amount");
      IF FromServContractHeader."Calcd. Annual Amount" < 0 THEN
        ERROR(Text019);
      FromServContractHeader.TESTFIELD("Annual Amount", FromServContractHeader."Calcd. Annual Amount");
      ServContractAccGr.GET(FromServContractHeader."Serv. Contract Acc. Gr. Code");
      ServContractAccGr.TESTFIELD("Non-Prepaid Contract Acc.");
      GLAcc.GET(ServContractAccGr."Non-Prepaid Contract Acc.");
      GLAcc.TESTFIELD("Direct Posting");

      IF (FromServContractHeader.Prepaid) THEN BEGIN
        ServContractAccGr.TESTFIELD("Prepaid Contract Acc.");
        GLAcc.GET(ServContractAccGr."Prepaid Contract Acc.");
        GLAcc.TESTFIELD("Direct Posting");
      END;

      FromServContractLine.RESET;
      FromServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
      FromServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
      FromServContractLine.SETRANGE("Line Amount",0);
      IF FromServContractLine.FIND('-') THEN
        ERROR(
          Text001,
          FromServContractHeader."Contract No.",
          FromServContractLine.FIELDCAPTION("Line Amount"));

      FromServContractHeader.TESTFIELD("Starting Date");
      IF FromServContractHeader."Invoice Period" <> FromServContractHeader."Invoice Period"::None THEN BEGIN
        IF FromServContractHeader."Annual Amount" = 0 THEN
          ERROR(Text020);
        FromServContractHeader.TESTFIELD("Amount per Period");
      END;

      FromServContractLine.RESET;
      FromServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
      FromServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
      FromServContractLine.SETFILTER("Service Item No.",'<>%1','');
      IF FromServContractLine.FIND('-') THEN
        REPEAT
          ServItem.GET(FromServContractLine."Service Item No.");
          IF ServItem."Customer No." <> FromServContractHeader."Customer No." THEN
            ERROR(
              Text021,
              FromServContractHeader."Contract No.",
              FromServContractHeader."Customer No.");
        UNTIL FromServContractLine.NEXT = 0;

      ServMgtSetup.GET;
      IF ServMgtSetup."Salesperson Mandatory" THEN
        FromServContractHeader.TESTFIELD("Salesperson Code");
      IF FromServContractHeader."Invoice Period" <> FromServContractHeader."Invoice Period"::None THEN BEGIN
        IF FromServContractHeader.Prepaid THEN BEGIN
          IF CALCDATE(
            '<-CM>',FromServContractHeader."Next Invoice Date")
            <> FromServContractHeader."Next Invoice Date"
          THEN
            ERROR(Text003,FromServContractHeader.FIELDCAPTION("Next Invoice Date"));
        END ELSE BEGIN
          IF
            CALCDATE('<CM>',FromServContractHeader."Next Invoice Date")
            <> FromServContractHeader."Next Invoice Date"
          THEN
            IF NOT HideDialog THEN
              IF NOT CONFIRM(
                STRSUBSTNO(
                  Text005,
                  FromServContractHeader.FIELDCAPTION("Next Invoice Date")))
              THEN
                EXIT;
        END;
      END;

      FromServContractLine.RESET;
      FromServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
      FromServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
      IF FromServContractLine.FIND('-') THEN
        REPEAT
          IF ServMgtSetup."Contract Rsp. Time Mandatory" THEN
            FromServContractLine.TESTFIELD("Response Time (Hours)");
        UNTIL FromServContractLine.NEXT = 0;

      ServContractMgt.CopyCheckSCDimToTempSCDim(FromServContractHeader);
      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text011,TRUE) THEN
          EXIT;

      IF NOT HideDialog THEN BEGIN
        FromServContractLine.RESET;
        FromServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
        FromServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
        FromServContractLine.SETRANGE("Next Planned Service Date",0D);
        IF FromServContractLine.FIND('-') THEN
          IF NOT
             CONFIRM(
               Text022,
               TRUE,
               FromServContractLine.FIELDCAPTION("Next Planned Service Date"))
          THEN
            EXIT;
      END;

      Window.OPEN(
        Text012 +
        Text013);

      FiledServContractHeader.FileQuotationBeforeSigning(FromServContractHeader);

      Window.UPDATE(1,1);
      WPostLine := 0;
      InvoicingStartingPeriod := FALSE;
      IF FromServContractHeader."Invoice Period" <> FromServContractHeader."Invoice Period"::None THEN BEGIN
        IF FromServContractHeader.Prepaid THEN BEGIN
          IF FromServContractHeader."Starting Date" < FromServContractHeader."Next Invoice Date" THEN BEGIN
            IF HideDialog THEN
              InvoiceNow := TRUE
            ELSE
              IF CONFIRM(Text015,TRUE,
                 FromServContractHeader."Starting Date",FromServContractHeader."Next Invoice Date" - 1)
              THEN
                InvoiceNow := TRUE;
            InvoiceFrom := FromServContractHeader."Starting Date";
            InvoiceTo := FromServContractHeader."Next Invoice Date" - 1;
          END;
        END ELSE BEGIN
          GoOut := TRUE;
          TempDate := FromServContractHeader."Next Invoice Period Start";
          IF FromServContractHeader."Starting Date" < TempDate THEN BEGIN
            TempDate := TempDate -1;
            GoOut := FALSE;
          END;
          IF NOT GoOut THEN BEGIN
            IF HideDialog THEN
              InvoiceNow := TRUE
            ELSE
              IF CONFIRM(
                Text015,TRUE,
                FromServContractHeader."Starting Date",TempDate)
              THEN
                InvoiceNow := TRUE;
            InvoiceFrom := FromServContractHeader."Starting Date";
            InvoiceTo := TempDate;
            InvoicingStartingPeriod := TRUE;
          END;
        END;
      END;

      FirstPrepaidPostingDate := 0D;
      LastPrepaidPostingDate := 0D;

      ToServContractHeader.TRANSFERFIELDS(FromServContractHeader);

      IF InvoiceNow THEN BEGIN
        PostingDate := InvoiceFrom;
        AmountNow := ServContractMgt.CalcContractAmount(FromServContractHeader,InvoiceFrom,InvoiceTo);
        InvoiceAmountDueToSigning := AmountNow;
      END;

      ToServContractHeader."Contract Type" := ToServContractHeader."Contract Type"::Contract;
      ToServContractHeader.Status := ToServContractHeader.Status::Signed;
      IF InvoiceNow THEN BEGIN
        ToServContractHeader."Last Invoice Date" := ToServContractHeader."Starting Date";
        ToServContractHeader.VALIDATE("Last Invoice Period End",InvoiceTo);
      END;
      ToServContractHeader.INSERT;
      IF ServMgtSetup."Register Contract Changes" THEN
        ContractChangeLog.LogContractChange(
          ToServContractHeader."Contract No.",0,ToServContractHeader.FIELDCAPTION(Status),0,
          '',FORMAT(ToServContractHeader.Status),'',0);

      FiledServContractHeader.RESET;
      FiledServContractHeader.SETCURRENTKEY("Contract Type Relation","Contract No. Relation");
      FiledServContractHeader.SETRANGE("Contract Type Relation",FromServContractHeader."Contract Type");
      FiledServContractHeader.SETRANGE("Contract No. Relation",FromServContractHeader."Contract No.");
      IF FiledServContractHeader.FIND('-') THEN BEGIN
        REPEAT
          FiledServContractHeader2 := FiledServContractHeader;
          FiledServContractHeader2."Contract Type Relation" := ToServContractHeader."Contract Type";
          FiledServContractHeader2."Contract No. Relation" := ToServContractHeader."Contract No.";
          FiledServContractHeader2.MODIFY;
        UNTIL FiledServContractHeader.NEXT = 0;
      END;

      ToServContractDim.SETRANGE("Table ID",DATABASE::"Service Contract Header");
      ToServContractDim.SETRANGE(Type,ToServContractDim.Type::Contract);
      ToServContractDim.SETRANGE("No.",FromServContractHeader."Contract No.");
      ToServContractDim.DELETEALL;

      FromServContractDim.SETRANGE("Table ID",DATABASE::"Service Contract Header");
      FromServContractDim.SETRANGE(Type,FromServContractHeader."Contract Type");
      FromServContractDim.SETRANGE("No.",FromServContractHeader."Contract No.");
      IF FromServContractDim.FIND('-') THEN BEGIN
        REPEAT
          ToServContractDim.INIT;
          ToServContractDim."Table ID" := DATABASE::"Service Contract Header";
          ToServContractDim.Type := FromServContractDim.Type::Contract;
          ToServContractDim."No." := FromServContractDim."No.";
          ToServContractDim."Line No." := 0;
          ToServContractDim."Dimension Code" := FromServContractDim."Dimension Code";
          ToServContractDim."Dimension Value Code" := FromServContractDim."Dimension Value Code";
          ToServContractDim.INSERT;
        UNTIL FromServContractDim.NEXT = 0;
      END;
      FromServContractDim.DELETEALL;

      FromServContractLine.RESET;
      FromServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
      FromServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
      IF FromServContractLine.FIND('-') THEN
        REPEAT
          ToServContractLine := FromServContractLine;
          ToServContractLine."Contract Type" := ToServContractLine."Contract Type"::Contract;
          ToServContractLine."Contract No." := FromServContractLine."Contract No.";
          ToServContractLine."Contract Status" := FromServContractLine."Contract Status"::Signed;
          ToServContractLine.INSERT(TRUE);
          CLEAR(ServLogMgt);
          WPostLine := WPostLine + 1;
          Window.UPDATE(2,WPostLine);
        UNTIL FromServContractLine.NEXT = 0;

      FromServCommentLine.SETRANGE("Table Name",FromServCommentLine."Table Name"::"Service Contract");
      FromServCommentLine.SETRANGE("Table Subtype",FromServContractHeader."Contract Type");
      FromServCommentLine.SETRANGE("No.",FromServContractHeader."Contract No.");
      IF FromServCommentLine.FIND('-') THEN
        REPEAT
          ToServCommentLine."Table Name" := ToServCommentLine."Table Name"::"Service Contract";
          ToServCommentLine."Table Subtype" := ToServContractHeader."Contract Type"::Contract;
          ToServCommentLine."Table Line No." := FromServCommentLine."Table Line No.";
          ToServCommentLine."No." := ToServContractHeader."Contract No.";
          ToServCommentLine."Line No." := FromServCommentLine."Line No.";
          ToServCommentLine.Comment := FromServCommentLine.Comment;
          ToServCommentLine.Date := FromServCommentLine.Date;
          ToServCommentLine.INSERT;
        UNTIL FromServCommentLine.NEXT = 0;
      FromServCommentLine.DELETEALL;

      IF InvoicingStartingPeriod AND
        NOT ToServContractHeader.Prepaid AND
        InvoiceNow
      THEN BEGIN
        ToServContractHeader.VALIDATE("Last Invoice Date",InvoiceTo);
        ToServContractHeader.MODIFY;
      END;

      ToServContractHeader."Change Status" := ToServContractHeader."Change Status"::Locked;
      ToServContractHeader.MODIFY;


      IF InvoiceNow THEN BEGIN
        ServContractMgt.InitCodeUnit;
        ServHeaderNo :=
          ServContractMgt.CreateServHeader(ToServContractHeader,PostingDate,FALSE);

        ServHeader.GET(ServHeader."Document Type"::Invoice,ServHeaderNo);
        ServMgtSetup.GET;
        AppliedEntry :=
          ServContractMgt.CreateServiceLedgerEntry(
            ServHeader,ToServContractHeader."Contract Type",
            ToServContractHeader."Contract No.",InvoiceFrom,
            InvoiceTo,AmountNow,TRUE,FALSE,InvAmountRounded);

        IF ToServContractHeader."Contract Lines on Invoice" THEN BEGIN
          ToServContractLine.RESET;
          ToServContractLine.SETRANGE("Contract Type",ToServContractHeader."Contract Type");
          ToServContractLine.SETRANGE("Contract No.",ToServContractHeader."Contract No.");
          IF ToServContractLine.FIND('-') THEN
            REPEAT
              ServContractMgt.CreateDetailedServLine(
                ServHeader,ToServContractLine,
                ToServContractHeader."Contract Type",
                ToServContractHeader."Contract No.");
            UNTIL ToServContractLine.NEXT = 0;
        END ELSE
          ServContractMgt.CreateHeadingServLine(
            ServHeader,
            ToServContractHeader."Contract Type",
            ToServContractHeader."Contract No.");

        ServContractMgt.CreateServLine(
          ServHeader,
          ToServContractHeader."Contract Type",
          ToServContractHeader."Contract No.",
          InvoiceFrom,InvoiceTo,InvAmountRounded,AppliedEntry,TRUE);

        ToServContractHeader.MODIFY;
        ServContractMgt.FinishCodeunit;
      END;

      FromContractServDisc.RESET;
      FromContractServDisc.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
      FromContractServDisc.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
      IF FromContractServDisc.FIND('-') THEN
        REPEAT
          ToContractServDisc.COPY(FromContractServDisc);
          ToContractServDisc."Contract Type" := FromContractServDisc."Contract Type"::Contract;
          ToContractServDisc."Contract No." := ToServContractHeader."Contract No.";
          IF ToContractServDisc.INSERT THEN;
          FromContractServDisc.DELETE;
        UNTIL FromContractServDisc.NEXT = 0;

      ContractGainLossEntry.AddEntry(
        2,ToServContractHeader."Contract Type",
        ToServContractHeader."Contract No.",
        FromServContractHeader."Annual Amount",'');

      ToServContractLine.RESET;
      ToServContractLine.SETRANGE("Contract Type",ToServContractHeader."Contract Type");
      ToServContractLine.SETRANGE("Contract No.",ToServContractHeader."Contract No.");
      IF ToServContractLine.FIND('-') THEN BEGIN
        REPEAT
          ToServContractLine."New Line" := FALSE;
          ToServContractLine.MODIFY;
        UNTIL ToServContractLine.NEXT = 0;
      END;

      FromServContractLine.RESET;
      FromServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
      FromServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
      FromServContractLine.DELETEALL;
      FromServContractHeader.DELETE;

      FromServHour.RESET;
      FromServHour.SETRANGE("Service Contract Type",FromServHour."Service Contract Type"::Quote);
      FromServHour.SETRANGE("Service Contract No.",ToServContractHeader."Contract No.");
      IF FromServHour.FIND('-') THEN BEGIN
        REPEAT
          ToServHour := FromServHour;
          ToServHour."Service Contract Type" := FromServHour."Service Contract Type"::Contract;
          ToServHour."Service Contract No." := ToServContractHeader."Contract No.";
          ToServHour.INSERT;
        UNTIL FromServHour.NEXT = 0;
      END;
      FromServHour.DELETEALL;

      Window.CLOSE;

      IF NOT HideDialog THEN
        IF ServHeaderNo <> '' THEN
          MESSAGE(Text016,ServHeaderNo);
    END;

    PROCEDURE SignContract@1(FromServContractHeader@1000 : Record 5965);
    VAR
      ServContractLine@1008 : Record 5964;
      ServContractHeader@1007 : Record 5965;
      ServItem@1006 : Record 5940;
      InvFrom@1003 : Date;
      InvTo@1004 : Date;
      TempDate@1005 : Date;
      InvNo@1009 : Code[20];
      InvAmountRounded@1010 : Decimal;
    BEGIN
      IF NOT HideDialog THEN
        CLEARALL;
      ServContractHeader := FromServContractHeader;
      IF ServContractHeader.Status = ServContractHeader.Status::Signed THEN
        EXIT;
      IF ServContractHeader.Status = ServContractHeader.Status::Canceled THEN
        ERROR(Text024);
      ServContractHeader.TESTFIELD("Serv. Contract Acc. Gr. Code");
      ServContractHeader.TESTFIELD("Service Period");
      ServContractHeader.CALCFIELDS("Calcd. Annual Amount");

      IF ServContractHeader."Annual Amount" <> ServContractHeader."Calcd. Annual Amount" THEN
        ERROR(Text023,ServContractHeader.FIELDCAPTION("Annual Amount"),
               ServContractHeader.FIELDCAPTION("Calcd. Annual Amount"));

      IF ServContractHeader."Annual Amount" < 0 THEN
        ERROR(Text019);
      ServContractAccGr.GET(ServContractHeader."Serv. Contract Acc. Gr. Code");
      ServContractAccGr.TESTFIELD("Non-Prepaid Contract Acc.");
      GLAcc.GET(ServContractAccGr."Non-Prepaid Contract Acc.");
      GLAcc.TESTFIELD("Direct Posting");

      IF (ServContractHeader.Prepaid) THEN BEGIN
        ServContractAccGr.TESTFIELD("Prepaid Contract Acc.");
        GLAcc.GET(ServContractAccGr."Prepaid Contract Acc.");
        GLAcc.TESTFIELD("Direct Posting");
      END;

      ServContractLine.RESET;
      ServContractLine.SETRANGE("Contract Type",ServContractHeader."Contract Type");
      ServContractLine.SETRANGE("Contract No.",ServContractHeader."Contract No.");
      ServContractLine.SETRANGE("Line Amount",0);
      IF ServContractLine.FIND('-') THEN
        ERROR(
          Text004,
          ServContractHeader."Contract No.",
          ServContractLine.FIELDCAPTION("Line Amount"));

      ServContractHeader.TESTFIELD("Starting Date");
      IF ServContractHeader."Invoice Period" <> ServContractHeader."Invoice Period"::None THEN BEGIN
        IF ServContractHeader."Annual Amount" = 0 THEN
          ERROR(Text020);
        ServContractHeader.TESTFIELD("Amount per Period");
      END;

      ServMgtSetup.GET;
      IF ServMgtSetup."Salesperson Mandatory" THEN
        ServContractHeader.TESTFIELD("Salesperson Code");
      IF ServContractHeader."Invoice Period" <> ServContractHeader."Invoice Period"::None THEN BEGIN
        IF ServContractHeader.Prepaid THEN BEGIN
          IF CALCDATE(
            '<-CM>',ServContractHeader."Next Invoice Date")
            <> ServContractHeader."Next Invoice Date"
          THEN
            ERROR(Text003,ServContractHeader.FIELDCAPTION("Next Invoice Date"));
        END ELSE BEGIN
          IF
            CALCDATE('<CM>',ServContractHeader."Next Invoice Date")
            <> ServContractHeader."Next Invoice Date"
          THEN
            IF NOT HideDialog THEN
              IF NOT CONFIRM(
                STRSUBSTNO(
                  Text005,
                  ServContractHeader.FIELDCAPTION("Next Invoice Date")))
              THEN
                EXIT;
        END;
      END;

      IF ServMgtSetup."Contract Rsp. Time Mandatory" THEN BEGIN
        ServContractLine.RESET;
        ServContractLine.SETRANGE("Contract Type",ServContractHeader."Contract Type");
        ServContractLine.SETRANGE("Contract No.",ServContractHeader."Contract No.");
        ServContractLine.SETRANGE("Response Time (Hours)",0);
        IF ServContractLine.FIND('-') THEN
          ServContractLine.FIELDERROR("Response Time (Hours)");
      END;
      ServContractMgt.CopyCheckSCDimToTempSCDim(ServContractHeader);

      IF NOT HideDialog THEN
        IF NOT CONFIRM(Text010,TRUE,ServContractHeader."Contract No.") THEN
          EXIT;

      IF NOT HideDialog THEN BEGIN
        FromServContractLine.RESET;
        FromServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
        FromServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
        FromServContractLine.SETRANGE("Next Planned Service Date",0D);
        IF FromServContractLine.FIND('-') THEN
          IF NOT
             CONFIRM(
               Text022,
               TRUE,
               FromServContractLine.FIELDCAPTION("Next Planned Service Date"))
          THEN
            EXIT;
      END;

      Window.OPEN(
        Text012 +
        Text013);

      FiledServContractHeader.FileQuotationBeforeSigning(ServContractHeader);

      Window.UPDATE(1,1);
      WPostLine := 0;
      InvoicingStartingPeriod := FALSE;
      IF ServContractHeader."Invoice Period" <> ServContractHeader."Invoice Period"::None THEN BEGIN
        IF ServContractHeader.Prepaid THEN BEGIN
          IF ServContractHeader."Starting Date" < ServContractHeader."Next Invoice Date" THEN BEGIN
            IF HideDialog THEN
              InvoiceNow := TRUE
            ELSE
              IF CONFIRM(Text015,TRUE,
                 ServContractHeader."Starting Date",ServContractHeader."Next Invoice Date" - 1)
              THEN
                InvoiceNow := TRUE;
            InvoiceFrom := ServContractHeader."Starting Date";
            InvoiceTo := ServContractHeader."Next Invoice Date" - 1;
          END;
        END ELSE BEGIN
          GoOut := TRUE;
          TempDate := ServContractHeader."Next Invoice Period Start";
          IF ServContractHeader."Starting Date" < TempDate THEN BEGIN
            TempDate := TempDate -1;
            GoOut := FALSE;
          END;
          IF NOT GoOut THEN BEGIN
            IF HideDialog THEN
              InvoiceNow := TRUE
            ELSE
              IF CONFIRM(
                Text015,TRUE,
                ServContractHeader."Starting Date",TempDate)
              THEN
                InvoiceNow := TRUE;
            InvoiceFrom := ServContractHeader."Starting Date";
            InvoiceTo := TempDate;
            InvoicingStartingPeriod := TRUE;
          END;
        END;
      END;

      IF InvoiceNow THEN BEGIN
        PostingDate := InvoiceFrom;
        AmountNow := ServContractMgt.CalcContractAmount(ServContractHeader,InvoiceFrom,InvoiceTo);
      END;

      IF InvoiceNow THEN BEGIN
        ServContractHeader."Last Invoice Date" := ServContractHeader."Starting Date";
        ServContractHeader.VALIDATE("Last Invoice Period End",InvoiceTo);
      END;

      ServContractLine.RESET;
      ServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
      ServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
      IF ServContractLine.FIND('-') THEN REPEAT
        ServContractLine."Contract Status" := ServContractLine."Contract Status"::Signed;
        ServContractLine.MODIFY;
        CLEAR(ServLogMgt);
        WPostLine := WPostLine + 1;
        Window.UPDATE(2,WPostLine);
      UNTIL ServContractLine.NEXT = 0;

      IF InvoicingStartingPeriod AND
        NOT ServContractHeader.Prepaid AND
        InvoiceNow
      THEN BEGIN
        ServContractHeader.VALIDATE("Last Invoice Date",InvoiceTo);
        ServContractHeader.MODIFY;
      END;

      IF InvoiceNow THEN BEGIN
        ServContractMgt.InitCodeUnit;

        ServHeaderNo :=
          ServContractMgt.CreateServHeader(ServContractHeader,PostingDate,FALSE);

        ServHeader.GET(ServHeader."Document Type"::Invoice,ServHeaderNo);
        ServMgtSetup.GET;
        AppliedEntry :=
          ServContractMgt.CreateServiceLedgerEntry(
            ServHeader,ServContractHeader."Contract Type",
            ServContractHeader."Contract No.",InvoiceFrom,
            InvoiceTo,AmountNow,TRUE,FALSE,InvAmountRounded);

        IF ServContractHeader."Contract Lines on Invoice" THEN BEGIN
          ServContractLine.RESET;
          ServContractLine.SETRANGE("Contract Type",ServContractHeader."Contract Type");
          ServContractLine.SETRANGE("Contract No.",ServContractHeader."Contract No.");
          IF ServContractLine.FIND('-') THEN
            REPEAT
              ServContractMgt.CreateDetailedServLine(
                ServHeader,
                ServContractLine,
                ServContractHeader."Contract Type",
                ServContractHeader."Contract No.");
             UNTIL ServContractLine.NEXT = 0;
        END ELSE
          ServContractMgt.CreateHeadingServLine(
            ServHeader,
            ServContractHeader."Contract Type",
            ServContractHeader."Contract No.");
        ServContractMgt.CreateServLine(
          ServHeader,
          ServContractHeader."Contract Type",
          ServContractHeader."Contract No.",
          InvoiceFrom,InvoiceTo,InvAmountRounded,AppliedEntry,TRUE);

        ServContractHeader.MODIFY;
        ServContractMgt.FinishCodeunit;
      END;

      ContractGainLossEntry.AddEntry(
        2,ServContractHeader."Contract Type",
        ServContractHeader."Contract No.",
        ServContractHeader."Annual Amount",'');

      ServContractHeader.Status := ServContractHeader.Status::Signed;
      ServContractHeader."Change Status" := ServContractHeader."Change Status"::Locked;
      ServContractHeader.MODIFY;

      ServContractLine.RESET;
      ServContractLine.SETRANGE("Contract Type",ServContractHeader."Contract Type");
      ServContractLine.SETRANGE("Contract No.",ServContractHeader."Contract No.");
      IF ServContractLine.FIND('-') THEN BEGIN
        REPEAT
          ServContractLine."New Line" := FALSE;
          ServContractLine.MODIFY;
        UNTIL ServContractLine.NEXT = 0;
      END;

      IF ServMgtSetup."Register Contract Changes" THEN
        ContractChangeLog.LogContractChange(
          ServContractHeader."Contract No.",0,ServContractHeader.FIELDCAPTION(Status),0,
          '',FORMAT(ServContractHeader.Status),'',0);

      CLEAR(FromServContractHeader);

      Window.CLOSE;

      IF NOT HideDialog THEN
        IF ServHeaderNo <> '' THEN
          MESSAGE(Text016,ServHeaderNo);
    END;

    PROCEDURE AddendumToContract@4(ServContractHeader@1000 : Record 5965);
    VAR
      ServContractLine@1008 : Record 5964;
      TempDate@1005 : Date;
      StartingDate@1010 : Date;
      RemainingAmt@1011 : Decimal;
      InvoicePrepaid@1007 : Boolean;
      Currency@1013 : Record 4;
      NonExpiredContractLineExists@1003 : Boolean;
      NoOfMonthsAndMParts@1004 : Decimal;
      InvAmountRounded@1006 : Decimal;
    BEGIN
      IF NOT HideDialog THEN
        CLEARALL;
      FromServContractHeader := ServContractHeader;
      IF (FromServContractHeader."Invoice Period" = FromServContractHeader."Invoice Period"::None) OR
         (FromServContractHeader."Next Invoice Date" = 0D)
      THEN
        EXIT;
      FromServContractHeader.TESTFIELD("Serv. Contract Acc. Gr. Code");
      ServContractAccGr.GET(FromServContractHeader."Serv. Contract Acc. Gr. Code");
      ServContractAccGr.TESTFIELD("Non-Prepaid Contract Acc.");
      GLAcc.GET(ServContractAccGr."Non-Prepaid Contract Acc.");
      GLAcc.TESTFIELD("Direct Posting");

      IF (FromServContractHeader.Prepaid) THEN BEGIN
        ServContractAccGr.TESTFIELD("Prepaid Contract Acc.");
        GLAcc.GET(ServContractAccGr."Prepaid Contract Acc.");
        GLAcc.TESTFIELD("Direct Posting");
      END;

      ServMgtSetup.GET;
      Currency.InitRoundingPrecision;

      ServContractLine.RESET;
      ServContractLine.SETCURRENTKEY("Contract Type","Contract No.",Credited,"New Line");
      ServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
      ServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
      ServContractLine.SETRANGE("New Line",TRUE);
      StartingDate := WORKDATE;
      IF ServContractLine.FIND('-') THEN
        REPEAT
          IF ServMgtSetup."Contract Rsp. Time Mandatory" THEN
            ServContractLine.TESTFIELD("Response Time (Hours)");
          ServContractLine."Starting Date" := StartingDate;
          IF (ServContractLine."Next Planned Service Date" <> 0D) AND
             (ServContractLine."Next Planned Service Date" < StartingDate)
          THEN
            ServContractLine."Next Planned Service Date" := StartingDate;
          ServContractLine.MODIFY;
        UNTIL ServContractLine.NEXT = 0;

      IF NOT HideDialog THEN BEGIN
        ServContractLine.RESET;
        ServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
        ServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
        ServContractLine.SETRANGE("New Line",TRUE);
        ServContractLine.SETRANGE("Next Planned Service Date",0D);
        IF ServContractLine.FIND('-') THEN
          IF NOT
             CONFIRM(
               Text022,
               TRUE,
               ServContractLine.FIELDCAPTION("Next Planned Service Date"))
          THEN
            ERROR('');
      END;

      Window.OPEN(
        Text012 +
        Text013);

      FiledServContractHeader.FileQuotationBeforeSigning(FromServContractHeader);

      Window.UPDATE(1,1);
      WPostLine := 0;

      InvoicePrepaid := FromServContractHeader.Prepaid;

      TempDate := FromServContractHeader."Next Invoice Period Start";
      IF StartingDate < TempDate THEN BEGIN
        TempDate := TempDate -1;
      END ELSE BEGIN
        IF StartingDate > CALCDATE('<CM>',TempDate) THEN BEGIN
          Window.CLOSE;
          ERROR(Text018)
        END ELSE BEGIN
          TempDate := CALCDATE('<CM>',StartingDate);
          InvoicePrepaid := TRUE;
        END;
      END;

      IF (FromServContractHeader.Prepaid) AND
         (StartingDate = FromServContractHeader."Next Invoice Date")
      THEN BEGIN
        GoOut := TRUE;
        InvoicePrepaid := FALSE;
      END;

      IF NOT GoOut THEN BEGIN
        InvoiceFrom := StartingDate;
        InvoiceTo := TempDate;
        InvoicingStartingPeriod := TRUE;
      END;

      IF FromServContractHeader.Prepaid AND InvoicePrepaid THEN BEGIN
        FirstPrepaidPostingDate := ServContractMgt.FindFirstPrepaidTransaction(FromServContractHeader."Contract No.");
        IF FirstPrepaidPostingDate <> 0D THEN BEGIN
          IF StartingDate < FromServContractHeader."Next Invoice Date" THEN
            LastPrepaidPostingDate := FromServContractHeader."Next Invoice Date" - 1
          ELSE
            LastPrepaidPostingDate := FromServContractHeader."Next Invoice Period End";
          CASE TRUE OF
            InvoiceFrom < FirstPrepaidPostingDate:
              InvoiceTo := FirstPrepaidPostingDate - 1;
            InvoiceFrom > FirstPrepaidPostingDate:
              IF LastPrepaidPostingDate = CALCDATE('<CM>',InvoiceFrom) THEN
                InvoicePrepaid := FALSE
              ELSE BEGIN
                InvoiceTo := CALCDATE('<CM>',InvoiceFrom);
                FirstPrepaidPostingDate := InvoiceTo + 1;
                IF InvoiceFrom > LastPrepaidPostingDate
                  THEN LastPrepaidPostingDate := FromServContractHeader."Next Invoice Period End";
              END;
          END;
        END ELSE IF InvoiceFrom > FromServContractHeader."Next Invoice Period Start" THEN BEGIN
          FirstPrepaidPostingDate := CALCDATE('<CM>',InvoiceFrom) + 1;
          IF FirstPrepaidPostingDate < FromServContractHeader."Next Invoice Period End" THEN
            LastPrepaidPostingDate := FromServContractHeader."Next Invoice Period End"
          ELSE
            InvoicePrepaid := FALSE;
        END ELSE
          InvoicePrepaid := FALSE;
      END;

      IF NOT GoOut THEN
        IF HideDialog THEN
          InvoiceNow := TRUE
        ELSE BEGIN
          IF (InvoicePrepaid) AND (LastPrepaidPostingDate <> 0D)
          THEN
            TempDate := LastPrepaidPostingDate;
          IF CONFIRM(
            Text015,TRUE,
            StartingDate,TempDate)
          THEN
            InvoiceNow := TRUE
          ELSE InvoicePrepaid := FALSE;
        END;

      IF FromServContractHeader.Prepaid AND InvoicePrepaid THEN
        IF InvoiceFrom = ServContractMgt.FindFirstPrepaidTransaction(FromServContractHeader."Contract No.")
          THEN
            InvoiceNow := FALSE;

      IF InvoiceNow THEN BEGIN
        PostingDate := InvoiceFrom;
        ServContractLine.RESET;
        ServContractLine.SETCURRENTKEY("Contract Type","Contract No.",Credited,"New Line");
        ServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
        ServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
        ServContractLine.SETRANGE("New Line",TRUE);
        IF ServContractLine.FIND('-') THEN
          REPEAT
            IF (ServContractLine."Contract Expiration Date" <> 0D) AND
               (ServContractLine."Contract Expiration Date" < InvoiceTo)
            THEN
              NoOfMonthsAndMParts := ServContractMgt.NoOfMonthsAndMPartsInPeriod(
                InvoiceFrom,ServContractLine."Contract Expiration Date")
            ELSE IF (FromServContractHeader."Expiration Date" <> 0D) AND
                    (FromServContractHeader."Expiration Date" < InvoiceTo)
            THEN
              NoOfMonthsAndMParts := ServContractMgt.NoOfMonthsAndMPartsInPeriod(
                InvoiceFrom,FromServContractHeader."Expiration Date")
            ELSE
              NoOfMonthsAndMParts :=
                ServContractMgt.NoOfMonthsAndMPartsInPeriod(InvoiceFrom,InvoiceTo);
            RemainingAmt :=
              RemainingAmt +
              ROUND(
                ServContractLine."Line Amount" / 12 * NoOfMonthsAndMParts,Currency."Amount Rounding Precision");
          UNTIL ServContractLine.NEXT = 0;
      END;

      IF InvoiceNow THEN BEGIN
        ServContractMgt.InitCodeUnit;
        ServHeaderNo :=
          ServContractMgt.CreateServHeader(FromServContractHeader,PostingDate,FALSE);
        ServHeader.GET(ServHeader."Document Type"::Invoice,ServHeaderNo);
        AppliedEntry :=
          ServContractMgt.CreateServiceLedgerEntry(
            ServHeader,FromServContractHeader."Contract Type",
            FromServContractHeader."Contract No.",InvoiceFrom,InvoiceTo,RemainingAmt,TRUE,TRUE,InvAmountRounded);

        IF FromServContractHeader."Contract Lines on Invoice" THEN BEGIN
          ServContractLine.RESET;
          ServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
          ServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
          ServContractLine.SETRANGE("New Line",TRUE);
          IF ServContractLine.FIND('-') THEN
            REPEAT
              IF FromServContractHeader."Contract Lines on Invoice" THEN BEGIN
                ServContractMgt.CreateDetailedServLine(
                  ServHeader,
                  ServContractLine,
                  FromServContractHeader."Contract Type",
                  FromServContractHeader."Contract No.");
              END;
          UNTIL ServContractLine.NEXT = 0;
        END ELSE
          ServContractMgt.CreateHeadingServLine(
            ServHeader,
            FromServContractHeader."Contract Type",
            FromServContractHeader."Contract No.");

        ServContractMgt.CreateServLine(
          ServHeader,FromServContractHeader."Contract Type",
          FromServContractHeader."Contract No.",InvoiceFrom,InvoiceTo,InvAmountRounded,AppliedEntry,TRUE);
        ServContractMgt.FinishCodeunit;
      END;

      IF InvoicePrepaid AND FromServContractHeader.Prepaid THEN BEGIN
        ServContractMgt.InitCodeUnit;
        IF ServHeaderNo = '' THEN
          ServHeaderNo :=
            ServContractMgt.CreateServHeader(FromServContractHeader,PostingDate,FALSE);

        RemainingAmt := 0;
        ServContractLine.RESET;
        ServContractLine.SETCURRENTKEY("Contract Type","Contract No.",Credited,"New Line");
        ServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
        ServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
        ServContractLine.SETRANGE("New Line",TRUE);

        IF ServContractLine.FIND('-') THEN
          REPEAT
            InvoiceFrom := FirstPrepaidPostingDate;
            InvoiceTo := LastPrepaidPostingDate;
            IF (ServContractLine."Contract Expiration Date" <> 0D) AND
               (ServContractLine."Contract Expiration Date" < InvoiceTo)
            THEN
              InvoiceTo := ServContractLine."Contract Expiration Date";
            IF (FromServContractHeader."Expiration Date" <> 0D) AND
               (FromServContractHeader."Expiration Date" < InvoiceTo)
            THEN
              InvoiceTo := FromServContractHeader."Expiration Date";
            IF ServContractLine."Starting Date" > InvoiceFrom THEN
              InvoiceFrom := ServContractLine."Starting Date";
            NoOfMonthsAndMParts :=
              ServContractMgt.NoOfMonthsAndMPartsInPeriod(InvoiceFrom,InvoiceTo);
            RemainingAmt :=
              RemainingAmt +
              ROUND(
                ServContractLine."Line Amount" / 12 * NoOfMonthsAndMParts,Currency."Amount Rounding Precision");
          UNTIL ServContractLine.NEXT = 0;
        IF RemainingAmt <> 0 THEN BEGIN
          ServHeader.GET(ServHeader."Document Type"::Invoice,ServHeaderNo);
          AppliedEntry :=
            ServContractMgt.CreateServiceLedgerEntry(
              ServHeader,FromServContractHeader."Contract Type",
              FromServContractHeader."Contract No.",FirstPrepaidPostingDate,
              LastPrepaidPostingDate,RemainingAmt,FALSE,TRUE,InvAmountRounded);
          IF FromServContractHeader."Contract Lines on Invoice" THEN BEGIN
            ServContractLine.RESET;
            ServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
            ServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
            ServContractLine.SETRANGE("New Line",TRUE);
            IF ServContractLine.FIND('-') THEN
              REPEAT
                IF FromServContractHeader."Contract Lines on Invoice" THEN BEGIN
                  ServContractMgt.CreateDetailedServLine(
                    ServHeader,
                    ServContractLine,
                    FromServContractHeader."Contract Type",
                    FromServContractHeader."Contract No.");
                END;
            UNTIL ServContractLine.NEXT = 0;
          END ELSE
            ServContractMgt.CreateHeadingServLine(
              ServHeader,
              FromServContractHeader."Contract Type",
              FromServContractHeader."Contract No.");
          ServContractMgt.CreateServLine(
            ServHeader,
            FromServContractHeader."Contract Type",
            FromServContractHeader."Contract No.",
            FirstPrepaidPostingDate,LastPrepaidPostingDate,
            InvAmountRounded,AppliedEntry,FALSE);
        END;
        ServContractMgt.FinishCodeunit;
      END;

      ServContractLine.RESET;
      ServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
      ServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
      IF ServContractLine.FIND('-') THEN
        REPEAT
          IF (ServContractLine."Contract Expiration Date" > ServContractHeader."Last Invoice Date") OR
             (ServContractLine."Contract Expiration Date" = 0D) THEN
            NonExpiredContractLineExists := TRUE;
        UNTIL ServContractLine.NEXT = 0;
      IF InvoiceNow  AND (NOT NonExpiredContractLineExists) THEN BEGIN
        IF NOT FromServContractHeader.Prepaid THEN
          FromServContractHeader.VALIDATE("Last Invoice Date",InvoiceTo)
        ELSE
          FromServContractHeader.VALIDATE("Last Invoice Date",FromServContractHeader."Next Invoice Date");
        FromServContractHeader.MODIFY;
      END;

      FromServContractHeader.GET(ServContractHeader."Contract Type",ServContractHeader."Contract No.");
      FromServContractHeader."Change Status" := FromServContractHeader."Change Status"::Locked;
      FromServContractHeader.MODIFY;

      ServContractLine.RESET;
      ServContractLine.SETRANGE("Contract Type",FromServContractHeader."Contract Type");
      ServContractLine.SETRANGE("Contract No.",FromServContractHeader."Contract No.");
      ServContractLine.MODIFYALL("New Line",FALSE);
      Window.CLOSE;

      IF NOT HideDialog THEN
        IF ServHeaderNo <> '' THEN
          MESSAGE(Text016,ServHeaderNo);
    END;

    PROCEDURE SetHideDialog@3(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    BEGIN
    END.
  }
}
