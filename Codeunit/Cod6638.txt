OBJECT Codeunit 6638 Sales-Get Return Receipts
{
  OBJECT-PROPERTIES
  {
    Date=15/09/04;
    Time=12:00:00;
    Version List=NAVW14.00;
  }
  PROPERTIES
  {
    TableNo=37;
    OnRun=BEGIN
            SalesHeader.GET("Document Type","Document No.");
            SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::"Credit Memo");
            SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);

            ReturnRcptLine.SETCURRENTKEY("Bill-to Customer No.");
            ReturnRcptLine.SETRANGE("Bill-to Customer No.",SalesHeader."Bill-to Customer No.");
            ReturnRcptLine.SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');
            ReturnRcptLine.SETRANGE("Currency Code",SalesHeader."Currency Code");

            GetReturnRcptLines.SETTABLEVIEW(ReturnRcptLine);
            GetReturnRcptLines.LOOKUPMODE := TRUE;
            GetReturnRcptLines.SetSalesHeader(SalesHeader);
            GetReturnRcptLines.RUNMODAL;
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=The %1 on the %2 %3 and the %4 %5 must be the same.;ESP=El %1 en el %2 %3 y el %4 %5 debe ser el mismo.';
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      ReturnRcptHeader@1003 : Record 6660;
      ReturnRcptLine@1004 : Record 6661;
      GetReturnRcptLines@1005 : Form 6638;

    PROCEDURE CreateInvLines@1(VAR ReturnRcptLine2@1000 : Record 6661);
    VAR
      DifferentCurrencies@1001 : Boolean;
      TempFromLineDim@1002 : TEMPORARY Record 357;
      TempToLineDim@1003 : TEMPORARY Record 357;
      DimMgt@1004 : Codeunit 408;
    BEGIN
      WITH ReturnRcptLine2 DO BEGIN
        SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');
        IF FIND('-') THEN BEGIN
          SalesLine.LOCKTABLE;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine."Document Type" := SalesHeader."Document Type";
          SalesLine."Document No." := SalesHeader."No.";

          REPEAT
            IF ReturnRcptHeader."No." <> "Document No." THEN BEGIN
              ReturnRcptHeader.GET("Document No.");
              ReturnRcptHeader.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
              DifferentCurrencies := FALSE;
              IF ReturnRcptHeader."Currency Code" <> SalesHeader."Currency Code" THEN BEGIN
                MESSAGE(Text001,
                  SalesHeader.FIELDCAPTION("Currency Code"),
                  SalesHeader.TABLECAPTION, SalesHeader."No.",
                  ReturnRcptHeader.TABLECAPTION,ReturnRcptHeader."No.");
                DifferentCurrencies := TRUE;
              END;
            END;
            IF NOT DifferentCurrencies THEN BEGIN
              ReturnRcptLine := ReturnRcptLine2;
              ReturnRcptLine.InsertInvLineFromRetRcptLine(SalesLine,TempFromLineDim);
              DimMgt.MoveTempFromDimToTempToDim(TempFromLineDim,TempToLineDim);
            END;
          UNTIL NEXT = 0;
          GetItemChargeAssgnt(ReturnRcptLine2);
          DimMgt.TransferTempToDimToDocDim(TempToLineDim);
        END;
      END;
    END;

    PROCEDURE SetSalesHeader@2(VAR SalesHeader2@1000 : Record 36);
    BEGIN
      SalesHeader.GET(SalesHeader2."Document Type",SalesHeader2."No.");
      SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::"Credit Memo");
    END;

    PROCEDURE GetItemChargeAssgnt@5800(VAR ReturnRcptLine@1000 : Record 6661);
    VAR
      SalesOrderLine@1001 : Record 37;
      ItemChargeAssgntSales@1002 : Record 5809;
    BEGIN
      WITH ReturnRcptLine DO BEGIN
        SETRANGE(Type,Type::"Charge (Item)");
        IF FIND('-') THEN
          REPEAT
            IF SalesOrderLine.GET(SalesOrderLine."Document Type"::"Return Order","Return Order No.","Return Order Line No.")
            THEN BEGIN
              ItemChargeAssgntSales.LOCKTABLE;
              ItemChargeAssgntSales.RESET;
              ItemChargeAssgntSales.SETRANGE("Document Type",SalesOrderLine."Document Type");
              ItemChargeAssgntSales.SETRANGE("Document No.",SalesOrderLine."Document No.");
              ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesOrderLine."Line No.");
              IF ItemChargeAssgntSales.FIND('-') THEN BEGIN
                ItemChargeAssgntSales.CALCSUMS("Qty. to Assign");
                IF ItemChargeAssgntSales."Qty. to Assign" <> 0 THEN
                  CopyItemChargeAssgnt(SalesOrderLine,ReturnRcptLine,ItemChargeAssgntSales."Qty. to Assign");
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyItemChargeAssgnt@5801(SalesOrderLine@1000 : Record 37;ReturnRcptLine@1001 : Record 6661;QtyToAssign@1002 : Decimal);
    VAR
      ReturnRcptLine2@1003 : Record 6661;
      SalesLine2@1004 : Record 37;
      ItemChargeAssgntSales@1005 : Record 5809;
      ItemChargeAssgntSales2@1006 : Record 5809;
      InsertChargeAssgnt@1007 : Boolean;
    BEGIN
      WITH SalesOrderLine DO BEGIN
        ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
        IF ItemChargeAssgntSales.FIND('-') THEN
          REPEAT
            IF ItemChargeAssgntSales."Qty. to Assign" <> 0 THEN BEGIN
              ItemChargeAssgntSales2 := ItemChargeAssgntSales;
              SalesLine2.SETRANGE("Return Receipt No.",ReturnRcptLine."Document No.");
              SalesLine2.SETRANGE("Return Receipt Line No.",ReturnRcptLine."Line No.");
              IF SalesLine2.FIND('-') THEN
                REPEAT
                  SalesLine2.CALCFIELDS("Qty. to Assign");
                  InsertChargeAssgnt := SalesLine2."Qty. to Assign" <> SalesLine2.Quantity;
                UNTIL (SalesLine2.NEXT = 0) OR InsertChargeAssgnt;

              IF InsertChargeAssgnt THEN BEGIN
                ItemChargeAssgntSales2."Document Type" := SalesLine2."Document Type";
                ItemChargeAssgntSales2."Document No." := SalesLine2."Document No.";
                ItemChargeAssgntSales2."Document Line No." := SalesLine2."Line No.";
                ItemChargeAssgntSales2."Qty. Assigned" := 0;
                IF ABS(QtyToAssign) < ABS(ItemChargeAssgntSales2."Qty. to Assign") THEN
                  ItemChargeAssgntSales2."Qty. to Assign" := QtyToAssign;
                IF ABS(SalesLine2.Quantity - SalesLine2."Qty. to Assign") <
                   ABS(ItemChargeAssgntSales2."Qty. to Assign")
                THEN
                  ItemChargeAssgntSales2."Qty. to Assign" :=
                    SalesLine2.Quantity - SalesLine2."Qty. to Assign";
                ItemChargeAssgntSales2.VALIDATE("Unit Cost");

                IF ItemChargeAssgntSales2."Applies-to Doc. Type" = "Document Type" THEN BEGIN
                  ItemChargeAssgntSales2."Applies-to Doc. Type" := SalesLine2."Document Type";
                  ItemChargeAssgntSales2."Applies-to Doc. No." := SalesLine2."Document No.";
                  ReturnRcptLine2.SETCURRENTKEY("Return Order No.","Return Order Line No.");
                  ReturnRcptLine2.SETRANGE("Return Order No.",ItemChargeAssgntSales."Applies-to Doc. No.");
                  ReturnRcptLine2.SETRANGE("Return Order Line No.",ItemChargeAssgntSales."Applies-to Doc. Line No.");
                  ReturnRcptLine2.SETRANGE("Document No.",ReturnRcptLine."Document No.");
                  IF ReturnRcptLine2.FIND('-') THEN BEGIN
                    SalesLine2.SETCURRENTKEY("Document Type","Shipment No.","Shipment Line No.");
                    SalesLine2.SETRANGE("Document Type",SalesOrderLine."Document Type"::"Credit Memo");
                    SalesLine2.SETRANGE("Return Receipt No.",ReturnRcptLine2."Document No.");
                    SalesLine2.SETRANGE("Return Receipt Line No.",ReturnRcptLine2."Line No.");
                    IF SalesLine2.FIND('-') AND (SalesLine2.Quantity <> 0) THEN
                      ItemChargeAssgntSales2."Applies-to Doc. Line No." := SalesLine2."Line No."
                    ELSE
                     InsertChargeAssgnt := FALSE;
                  END ELSE
                    InsertChargeAssgnt := FALSE;
                END;
              END;

              IF InsertChargeAssgnt AND (ItemChargeAssgntSales2."Qty. to Assign" <> 0) THEN BEGIN
                ItemChargeAssgntSales2.INSERT;
                QtyToAssign := QtyToAssign - ItemChargeAssgntSales2."Qty. to Assign";
              END;
            END;
          UNTIL ItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}
