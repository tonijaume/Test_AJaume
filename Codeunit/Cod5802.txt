OBJECT Codeunit 5802 Inventory Posting To G/L
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    TableNo=5802;
    Permissions=TableData 48=rimd,
                TableData 5802=r,
                TableData 5823=rimd;
    OnRun=VAR
            GenJnlLine@1000 : Record 81;
          BEGIN
            IF GlobalPostPerPostGroup THEN
              PostInvtPostBuf(Rec,"Document No.",'','',TRUE)
            ELSE
              PostInvtPostBuf(
                Rec,
                "Document No.",
                "External Document No.",
                COPYSTR(
                  STRSUBSTNO(Text000,"Entry Type","Source No.","Posting Date"),
                  1,MAXSTRLEN(GenJnlLine.Description)),
                FALSE);
          END;

  }
  CODE
  {
    VAR
      GLSetup@1009 : Record 98;
      InvtSetup@1008 : Record 313;
      Currency@1007 : Record 4;
      SourceCodeSetup@1006 : Record 242;
      GlobalInvtPostBuf@1005 : TEMPORARY Record 48;
      TempInvtPostBuf@1029 : ARRAY [4] OF TEMPORARY Record 48;
      TempInvtPostToGLTestBuf@1014 : TEMPORARY Record 5822;
      TempJnlLineDim2@1019 : TEMPORARY Record 356;
      TempGLItemLedgRelation@1026 : TEMPORARY Record 5823;
      GenJnlPostLine@1002 : Codeunit 12;
      GenJnlCheckLine@1004 : Codeunit 11;
      DimBufMgt@1001 : Codeunit 411;
      COGSAmt@1048 : Decimal;
      InvtAdjmtAmt@1047 : Decimal;
      DirCostAmt@1046 : Decimal;
      OvhdCostAmt@1045 : Decimal;
      VarPurchCostAmt@1044 : Decimal;
      VarMfgDirCostAmt@1049 : Decimal;
      VarMfgOvhdCostAmt@1039 : Decimal;
      WIPInvtAmt@1038 : Decimal;
      InvtAmt@1037 : Decimal;
      TotalCOGSAmt@1036 : Decimal;
      TotalInvtAdjmtAmt@1035 : Decimal;
      TotalDirCostAmt@1034 : Decimal;
      TotalOvhdCostAmt@1033 : Decimal;
      TotalVarPurchCostAmt@1032 : Decimal;
      TotalVarMfgDirCostAmt@1040 : Decimal;
      TotalVarMfgOvhdCostAmt@1017 : Decimal;
      TotalWIPInvtAmt@1016 : Decimal;
      TotalInvtAmt@1015 : Decimal;
      TotalExpCOGSAmt@1041 : Decimal;
      TotalExpInvtAdjmtAmt@1028 : Decimal;
      GlobalInvtPostBufEntryNo@1025 : Integer;
      PostBufDimNo@1030 : Integer;
      GLSetupRead@1012 : Boolean;
      SourceCodeSetupRead@1011 : Boolean;
      InvtSetupRead@1010 : Boolean;
      Text000@1000 : TextConst 'ENU=%1 %2 on %3;ESP=%1 %2 en %3';
      Text001@1031 : TextConst 'ENU=%1 - %2, %3,%4,%5,%6;ESP=%1 - %2, %3,%4,%5,%6';
      Text002@1018 : TextConst 'ENU="The following combination %1 = %2, %3 = %4, and %5 = %6 is not allowed.";ESP="No est  permitida la siguiente combinaci¢n %1 = %2, %3 = %4, y %5 = %6."';
      RunOnlyCheck@1003 : Boolean;
      CalledFromItemPosting@1021 : Boolean;
      CalledFromTestReport@1013 : Boolean;
      GlobalPostPerPostGroup@1023 : Boolean;
      Text003@1020 : TextConst 'ENU=%1 %2;ESP=%1 %2';

    PROCEDURE Initialize@31(PostPerPostGroup@1002 : Boolean);
    BEGIN
      GlobalPostPerPostGroup := PostPerPostGroup;
      GlobalInvtPostBufEntryNo := 0;
    END;

    PROCEDURE SetRunOnlyCheck@17(SetCalledFromItemPosting@1002 : Boolean;SetCheckOnly@1000 : Boolean;SetCalledFromTestReport@1001 : Boolean);
    BEGIN
      CalledFromItemPosting := SetCalledFromItemPosting;
      RunOnlyCheck := SetCheckOnly;
      CalledFromTestReport := SetCalledFromTestReport;

      TempGLItemLedgRelation.RESET;
      TempGLItemLedgRelation.DELETEALL;
    END;

    PROCEDURE BufferInvtPosting@1(VAR ValueEntry@1000 : Record 5802) : Boolean;
    VAR
      CostToPost@1003 : Decimal;
      CostToPostACY@1004 : Decimal;
      ExpCostToPost@1001 : Decimal;
      ExpCostToPostACY@1002 : Decimal;
      PostToGL@1005 : Boolean;
    BEGIN
      WITH ValueEntry DO BEGIN
        GetGLSetup;
        GetInvtSetup;
        IF (NOT InvtSetup."Expected Cost Posting to G/L") AND
           ("Expected Cost Posted to G/L" = 0) AND
           "Expected Cost"
        THEN
          EXIT(FALSE);

        IF NOT ("Entry Type" IN ["Entry Type"::"Direct Cost","Entry Type"::Revaluation]) AND
           NOT CalledFromTestReport
        THEN BEGIN
          TESTFIELD("Expected Cost",FALSE);
          TESTFIELD("Cost Amount (Expected)",0);
          TESTFIELD("Cost Amount (Expected) (ACY)",0);
        END;

        IF InvtSetup."Expected Cost Posting to G/L" THEN BEGIN
          CalcCostToPost(ExpCostToPost,"Cost Amount (Expected)","Expected Cost Posted to G/L",PostToGL);
          CalcCostToPost(ExpCostToPostACY,"Cost Amount (Expected) (ACY)","Exp. Cost Posted to G/L (ACY)",PostToGL);
        END;
        CalcCostToPost(CostToPost,"Cost Amount (Actual)","Cost Posted to G/L",PostToGL);
        CalcCostToPost(CostToPostACY,"Cost Amount (Actual) (ACY)","Cost Posted to G/L (ACY)",PostToGL);
        PostBufDimNo := 0;

        IF NOT PostToGL THEN
          EXIT(FALSE);

        CASE "Item Ledger Entry Type" OF
          "Item Ledger Entry Type"::Purchase:
            BEGIN
              CASE "Entry Type" OF
                "Entry Type"::"Direct Cost":
                  BEGIN
                    IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                        GlobalInvtPostBuf."Account Type"::"Invt. Accrual (Interim)",
                        ExpCostToPost,ExpCostToPostACY,TRUE);
                    IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::Inventory,
                        GlobalInvtPostBuf."Account Type"::"Direct Cost Applied",
                        CostToPost,CostToPostACY,FALSE);
                  END;
                "Entry Type"::"Indirect Cost":
                  InitInvtPostBuf(
                    ValueEntry,
                    GlobalInvtPostBuf."Account Type"::Inventory,
                    GlobalInvtPostBuf."Account Type"::"Overhead Applied",
                    CostToPost,CostToPostACY,FALSE);
                "Entry Type"::Variance:
                  BEGIN
                    TESTFIELD("Variance Type","Variance Type"::Purchase);
                    InitInvtPostBuf(
                      ValueEntry,
                      GlobalInvtPostBuf."Account Type"::Inventory,
                      GlobalInvtPostBuf."Account Type"::"Purchase Variance",
                      CostToPost,CostToPostACY,FALSE);
                  END;
                "Entry Type"::Revaluation:
                  BEGIN
                    IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                        GlobalInvtPostBuf."Account Type"::"Invt. Accrual (Interim)",
                        ExpCostToPost,ExpCostToPostACY,TRUE);
                    IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::Inventory,
                        GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                        CostToPost,CostToPostACY,FALSE);
                  END;
                "Entry Type"::Rounding:
                  InitInvtPostBuf(
                    ValueEntry,
                    GlobalInvtPostBuf."Account Type"::Inventory,
                    GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                    CostToPost,CostToPostACY,FALSE);
                ELSE
                  ErrorNonValidCombination(ValueEntry);
              END;
            END;
          "Item Ledger Entry Type"::Sale:
            BEGIN
              CASE "Entry Type" OF
                "Entry Type"::"Direct Cost":
                  BEGIN
                    IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                        GlobalInvtPostBuf."Account Type"::"COGS (Interim)",
                        ExpCostToPost,ExpCostToPostACY,TRUE);
                    IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::Inventory,
                        GlobalInvtPostBuf."Account Type"::COGS,
                        CostToPost,CostToPostACY,FALSE);
                  END;
                "Entry Type"::Revaluation:
                  BEGIN
                    IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                        GlobalInvtPostBuf."Account Type"::"COGS (Interim)",
                        ExpCostToPost,ExpCostToPostACY,TRUE);
                    IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::Inventory,
                        GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                        CostToPost,CostToPostACY,FALSE);
                  END;
                "Entry Type"::Rounding:
                  InitInvtPostBuf(
                    ValueEntry,
                    GlobalInvtPostBuf."Account Type"::Inventory,
                    GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                    CostToPost,CostToPostACY,FALSE);
                ELSE
                  ErrorNonValidCombination(ValueEntry);
              END;
            END;
          "Item Ledger Entry Type"::"Positive Adjmt.",
          "Item Ledger Entry Type"::"Negative Adjmt.",
          "Item Ledger Entry Type"::Transfer:
            BEGIN
              CASE "Entry Type" OF
                "Entry Type"::"Direct Cost":
                  BEGIN
                    // Posting adjustments to Interim accounts (Service)
                    IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                        GlobalInvtPostBuf."Account Type"::"COGS (Interim)",
                        ExpCostToPost,ExpCostToPostACY,TRUE);
                    IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::Inventory,
                        GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                        CostToPost,CostToPostACY,FALSE);
                  END;
                "Entry Type"::Revaluation,
                "Entry Type"::Rounding:
                  InitInvtPostBuf(
                    ValueEntry,
                    GlobalInvtPostBuf."Account Type"::Inventory,
                    GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                    CostToPost,CostToPostACY,FALSE);
                ELSE
                  ErrorNonValidCombination(ValueEntry);
              END;
            END;
          "Item Ledger Entry Type"::Consumption:
            BEGIN
              CASE "Entry Type" OF
                "Entry Type"::"Direct Cost":
                  InitInvtPostBuf(
                    ValueEntry,
                    GlobalInvtPostBuf."Account Type"::Inventory,
                    GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                    CostToPost,CostToPostACY,FALSE);
                "Entry Type"::Revaluation,
                "Entry Type"::Rounding:
                  InitInvtPostBuf(
                    ValueEntry,
                    GlobalInvtPostBuf."Account Type"::Inventory,
                    GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                    CostToPost,CostToPostACY,FALSE);
                ELSE
                  ErrorNonValidCombination(ValueEntry);
              END;
            END;
          "Item Ledger Entry Type"::Output:
            BEGIN
              CASE "Entry Type" OF
                "Entry Type"::"Direct Cost":
                  BEGIN
                    IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                        GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                        ExpCostToPost,ExpCostToPostACY,TRUE);
                    IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::Inventory,
                        GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                        CostToPost,CostToPostACY,FALSE);
                  END;
                "Entry Type"::"Indirect Cost":
                  InitInvtPostBuf(
                    ValueEntry,
                    GlobalInvtPostBuf."Account Type"::Inventory,
                    GlobalInvtPostBuf."Account Type"::"Overhead Applied",
                    CostToPost,CostToPostACY,FALSE);
                "Entry Type"::Variance:
                  BEGIN
                    CASE "Variance Type" OF
                      "Variance Type"::Material:
                        InitInvtPostBuf(
                          ValueEntry,
                          GlobalInvtPostBuf."Account Type"::Inventory,
                          GlobalInvtPostBuf."Account Type"::"Material Variance",
                          CostToPost,CostToPostACY,FALSE);
                      "Variance Type"::Capacity:
                        InitInvtPostBuf(
                          ValueEntry,
                          GlobalInvtPostBuf."Account Type"::Inventory,
                          GlobalInvtPostBuf."Account Type"::"Capacity Variance",
                          CostToPost,CostToPostACY,FALSE);
                      "Variance Type"::Subcontracted:
                        InitInvtPostBuf(
                          ValueEntry,
                          GlobalInvtPostBuf."Account Type"::Inventory,
                          GlobalInvtPostBuf."Account Type"::"Subcontracted Variance",
                          CostToPost,CostToPostACY,FALSE);
                      "Variance Type"::"Capacity Overhead":
                        InitInvtPostBuf(
                          ValueEntry,
                          GlobalInvtPostBuf."Account Type"::Inventory,
                          GlobalInvtPostBuf."Account Type"::"Cap. Overhead Variance",
                          CostToPost,CostToPostACY,FALSE);
                      "Variance Type"::"Manufacturing Overhead":
                        InitInvtPostBuf(
                          ValueEntry,
                          GlobalInvtPostBuf."Account Type"::Inventory,
                          GlobalInvtPostBuf."Account Type"::"Mfg. Overhead Variance",
                          CostToPost,CostToPostACY,FALSE);
                      ELSE
                        ErrorNonValidCombination(ValueEntry);
                    END;
                  END;
                "Entry Type"::Revaluation:
                  BEGIN
                    IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                        GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                        ExpCostToPost,ExpCostToPostACY,TRUE);
                    IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                      InitInvtPostBuf(
                        ValueEntry,
                        GlobalInvtPostBuf."Account Type"::Inventory,
                        GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                        CostToPost,CostToPostACY,FALSE);
                  END;
                "Entry Type"::Rounding:
                  InitInvtPostBuf(
                    ValueEntry,
                    GlobalInvtPostBuf."Account Type"::Inventory,
                    GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                    CostToPost,CostToPostACY,FALSE);
                ELSE
                  ErrorNonValidCombination(ValueEntry);
              END;
            END;
          "Item Ledger Entry Type"::" ":
            BEGIN
              CASE "Entry Type" OF
                "Entry Type"::"Direct Cost":
                  InitInvtPostBuf(
                    ValueEntry,
                    GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                    GlobalInvtPostBuf."Account Type"::"Direct Cost Applied",
                    CostToPost,CostToPostACY,FALSE);
                "Entry Type"::"Indirect Cost":
                  InitInvtPostBuf(
                    ValueEntry,
                    GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                    GlobalInvtPostBuf."Account Type"::"Overhead Applied",
                    CostToPost,CostToPostACY,FALSE);
                ELSE
                  ErrorNonValidCombination(ValueEntry);
              END;
            END;
          ELSE
            ErrorNonValidCombination(ValueEntry);
        END;
      END;

      IF UpdateGlobalInvtPostBuf(ValueEntry."Entry No.") THEN
        EXIT(TRUE);
      EXIT(CalledFromTestReport);
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        IF GLSetup."Additional Reporting Currency" <> '' THEN
          Currency.GET(GLSetup."Additional Reporting Currency");
      END;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetInvtSetup@4();
    BEGIN
      IF NOT InvtSetupRead THEN
        InvtSetup.GET;
      InvtSetupRead := TRUE;
    END;

    LOCAL PROCEDURE CalcCostToPost@8(VAR CostToPost@1000 : Decimal;AdjdCost@1001 : Decimal;VAR PostedCost@1002 : Decimal;VAR PostToGL@1005 : Boolean);
    BEGIN
      CostToPost := AdjdCost - PostedCost;

      IF CostToPost <> 0 THEN BEGIN
        IF NOT RunOnlyCheck THEN
          PostedCost := AdjdCost;
        PostToGL := TRUE;
      END;
    END;

    LOCAL PROCEDURE InitInvtPostBuf@10(ValueEntry@1000 : Record 5802;AccType@1001 : Option;BalAccType@1002 : Option;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;InterimAccount@1007 : Boolean);
    BEGIN
      PostBufDimNo := PostBufDimNo + 1;
      SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,AccType,BalAccType);
      SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],CostToPost,CostToPostACY,InterimAccount);
      TempInvtPostBuf[PostBufDimNo]."Job No." := ValueEntry."Job No.";

      PostBufDimNo := PostBufDimNo + 1;
      SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
      SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],-CostToPost,-CostToPostACY,InterimAccount);
      TempInvtPostBuf[PostBufDimNo]."Job No." := ValueEntry."Job No.";
    END;

    LOCAL PROCEDURE SetAccNo@18(VAR InvtPostBuf@1001 : Record 48;ValueEntry@1006 : Record 5802;AccType@1005 : Option;BalAccType@1000 : Option);
    VAR
      InvtPostSetup@1003 : Record 5813;
      GenPostingSetup@1004 : Record 252;
      GLAccount@1002 : Record 15;
    BEGIN
      WITH InvtPostBuf DO BEGIN
        "Account No." := '';
        "Account Type" := AccType;
        "Bal. Account Type" := BalAccType;
        "Location Code" := ValueEntry."Location Code";
        "Inventory Posting Group" :=
          GetInvPostingGroupCode(ValueEntry,AccType = "Account Type"::"WIP Inventory",ValueEntry."Inventory Posting Group");
        "Gen. Bus. Posting Group" := ValueEntry."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := ValueEntry."Gen. Prod. Posting Group";
        "Posting Date" := ValueEntry."Posting Date";

        IF UseInvtPostSetup THEN BEGIN
          IF CalledFromItemPosting THEN
            InvtPostSetup.GET("Location Code","Inventory Posting Group")
          ELSE
            IF NOT InvtPostSetup.GET("Location Code","Inventory Posting Group") THEN
              EXIT;
        END ELSE BEGIN
          IF CalledFromItemPosting THEN
            GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group")
          ELSE
            IF NOT GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group") THEN
              EXIT;
        END;

        CASE "Account Type" OF
          "Account Type"::Inventory:
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Inventory Account");
              "Account No." := InvtPostSetup."Inventory Account";
            END;
          "Account Type"::"Inventory (Interim)":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Inventory Account (Interim)");
              "Account No." := InvtPostSetup."Inventory Account (Interim)";
            END;
          "Account Type"::"WIP Inventory":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("WIP Account");
              "Account No." := InvtPostSetup."WIP Account";
            END;
          "Account Type"::"Material Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Material Variance Account");
              "Account No." := InvtPostSetup."Material Variance Account";
            END;
          "Account Type"::"Capacity Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Capacity Variance Account");
              "Account No." := InvtPostSetup."Capacity Variance Account";
            END;
          "Account Type"::"Subcontracted Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Subcontracted Variance Account");
              "Account No." := InvtPostSetup."Subcontracted Variance Account";
            END;
          "Account Type"::"Cap. Overhead Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Cap. Overhead Variance Account");
              "Account No." := InvtPostSetup."Cap. Overhead Variance Account";
            END;
          "Account Type"::"Mfg. Overhead Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Mfg. Overhead Variance Account");
              "Account No." := InvtPostSetup."Mfg. Overhead Variance Account";
            END;
          "Account Type"::"Inventory Adjmt.":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("Inventory Adjmt. Account");
              "Account No." := GenPostingSetup."Inventory Adjmt. Account";
            END;
          "Account Type"::"Direct Cost Applied":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("Direct Cost Applied Account");
              "Account No." := GenPostingSetup."Direct Cost Applied Account";
            END;
          "Account Type"::"Overhead Applied":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("Overhead Applied Account");
              "Account No." := GenPostingSetup."Overhead Applied Account";
            END;
          "Account Type"::"Purchase Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("Purchase Variance Account");
              "Account No." := GenPostingSetup."Purchase Variance Account";
            END;
          "Account Type"::COGS:
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("COGS Account");
              "Account No." := GenPostingSetup."COGS Account";
            END;
          "Account Type"::"COGS (Interim)":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("COGS Account (Interim)");
              "Account No." := GenPostingSetup."COGS Account (Interim)";
            END;
          "Account Type"::"Invt. Accrual (Interim)":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("Invt. Accrual Acc. (Interim)");
              "Account No." := GenPostingSetup."Invt. Accrual Acc. (Interim)";
            END;
        END;
        IF "Account No." <> '' THEN BEGIN
          GLAccount.GET("Account No.");
          IF GLAccount.Blocked THEN BEGIN
            IF CalledFromItemPosting THEN
              GLAccount.TESTFIELD(Blocked,FALSE);
            IF NOT CalledFromTestReport THEN
              "Account No." := '';
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE SetPostBufAmounts@30(VAR InvtPostBuf@1004 : Record 48;CostToPost@1000 : Decimal;CostToPostACY@1001 : Decimal;InterimAccount@1003 : Boolean);
    BEGIN
      WITH InvtPostBuf DO BEGIN
        "Interim Account" := InterimAccount;
        Amount := CostToPost;
        "Amount (ACY)" := CostToPostACY;
      END;
    END;

    LOCAL PROCEDURE UpdateGlobalInvtPostBuf@28(ValueEntryNo@1002 : Integer) : Boolean;
    VAR
      DimEntryNo@1001 : Integer;
      i@1000 : Integer;
    BEGIN
      WITH GlobalInvtPostBuf DO BEGIN
        DimEntryNo := GetDimEntryNo(ValueEntryNo);
        IF NOT CalledFromTestReport THEN
          FOR i := 1 TO PostBufDimNo DO BEGIN
            IF TempInvtPostBuf[i]."Account No." = '' THEN BEGIN
              CLEAR(TempInvtPostBuf);
              EXIT(FALSE);
            END;
          END;
        FOR i := 1 TO PostBufDimNo DO BEGIN
          GlobalInvtPostBuf := TempInvtPostBuf[i];
          "Dimension Entry No." := DimEntryNo;
          Negative := (TempInvtPostBuf[i].Amount < 0) OR (TempInvtPostBuf[i]."Amount (ACY)" < 0);

          UpdateReportAmounts;
          IF FIND THEN BEGIN
            Amount := Amount + TempInvtPostBuf[i].Amount;
            "Amount (ACY)" := "Amount (ACY)" + TempInvtPostBuf[i]."Amount (ACY)";
            MODIFY;
          END ELSE BEGIN
            GlobalInvtPostBufEntryNo := GlobalInvtPostBufEntryNo + 1;
            "Entry No." := GlobalInvtPostBufEntryNo;
            INSERT;
          END;

          IF NOT (RunOnlyCheck OR CalledFromTestReport) THEN BEGIN
            TempGLItemLedgRelation.INIT;
            TempGLItemLedgRelation."G/L Entry No." := "Entry No.";
            TempGLItemLedgRelation."Value Entry No." := ValueEntryNo;
            TempGLItemLedgRelation.INSERT;
          END;
        END;
      END;
      CLEAR(TempInvtPostBuf);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetDimEntryNo@37(ValueEntryNo@1002 : Integer) : Integer;
    VAR
      LedgEntryDim@1001 : Record 355;
      TempDimBufIn@1000 : TEMPORARY Record 360;
      DimEntryNo@1003 : Integer;
    BEGIN
      WITH LedgEntryDim DO BEGIN
        SETRANGE("Table ID",DATABASE::"Value Entry");
        SETRANGE("Entry No.",ValueEntryNo);
        IF FIND('-') THEN
          REPEAT
            IF NOT TempDimBufIn.GET("Table ID","Entry No.","Dimension Code") THEN BEGIN
              TempDimBufIn.INIT;
              TempDimBufIn."Table ID" := "Table ID";
              TempDimBufIn."Entry No." := "Entry No.";
              TempDimBufIn."Dimension Code" := "Dimension Code";
              TempDimBufIn."Dimension Value Code" := "Dimension Value Code";
              TempDimBufIn.INSERT;
            END;
          UNTIL NEXT = 0;
      END;
      IF TempDimBufIn.FIND('-') THEN BEGIN
        DimEntryNo := DimBufMgt.FindDimensions(TempDimBufIn);
          IF DimEntryNo = 0 THEN
            DimEntryNo := DimBufMgt.InsertDimensions(TempDimBufIn);
      END ELSE
        DimEntryNo := 0;

      EXIT(DimEntryNo);
    END;

    LOCAL PROCEDURE UpdateReportAmounts@24();
    BEGIN
      WITH GlobalInvtPostBuf DO BEGIN
        CASE "Account Type" OF
          "Account Type"::Inventory,"Account Type"::"Inventory (Interim)":
            InvtAmt += Amount;
          "Account Type"::"WIP Inventory":
            WIPInvtAmt += Amount;
          "Account Type"::"Inventory Adjmt.":
            InvtAdjmtAmt += Amount;
          "Account Type"::"Invt. Accrual (Interim)":
            InvtAdjmtAmt += Amount;
          "Account Type"::"Direct Cost Applied":
            DirCostAmt += Amount;
          "Account Type"::"Overhead Applied":
            OvhdCostAmt += Amount;
          "Account Type"::"Purchase Variance":
            VarPurchCostAmt += Amount;
          "Account Type"::COGS:
            COGSAmt += Amount;
          "Account Type"::"COGS (Interim)":
            COGSAmt += Amount;
          "Account Type"::"Material Variance","Account Type"::"Capacity Variance",
          "Account Type"::"Subcontracted Variance","Account Type"::"Cap. Overhead Variance":
            VarMfgDirCostAmt += Amount;
          "Account Type"::"Mfg. Overhead Variance":
            VarMfgOvhdCostAmt += Amount;
        END;
      END;
    END;

    LOCAL PROCEDURE ErrorNonValidCombination@2(ValueEntry@1000 : Record 5802);
    BEGIN
      WITH ValueEntry DO
        IF CalledFromTestReport THEN
          InsertTempInvtPostToGLTestBuf2(ValueEntry)
        ELSE
          ERROR(
            Text002,
            FIELDCAPTION("Item Ledger Entry Type"),"Item Ledger Entry Type",
            FIELDCAPTION("Entry Type"),"Entry Type",
            FIELDCAPTION("Expected Cost"),"Expected Cost")
    END;

    LOCAL PROCEDURE InsertTempInvtPostToGLTestBuf2@23(ValueEntry@1000 : Record 5802);
    BEGIN
      WITH ValueEntry DO BEGIN
        TempInvtPostToGLTestBuf."Line No." := GetNextLineNo;
        TempInvtPostToGLTestBuf."Posting Date" := "Posting Date";
        TempInvtPostToGLTestBuf.Description := STRSUBSTNO(Text003,TABLECAPTION,"Entry No.");
        TempInvtPostToGLTestBuf.Amount := "Cost Amount (Actual)";
        TempInvtPostToGLTestBuf."Value Entry No." := "Entry No.";
        TempInvtPostToGLTestBuf.INSERT;
      END;
    END;

    LOCAL PROCEDURE GetNextLineNo@26() : Integer;
    BEGIN
      IF TempInvtPostToGLTestBuf.FINDLAST THEN
        EXIT(TempInvtPostToGLTestBuf."Line No." + 10000);

      EXIT(10000);
    END;

    PROCEDURE PostInvtPostBufPerEntry@20(VAR ValueEntry@1001 : Record 5802);
    VAR
      GenJnlLine@1002 : Record 81;
    BEGIN
      WITH ValueEntry DO BEGIN
        PostInvtPostBuf(
          ValueEntry,
          "Document No.",
          "External Document No.",
          COPYSTR(
            STRSUBSTNO(Text000,"Entry Type","Source No.","Posting Date"),
            1,MAXSTRLEN(GenJnlLine.Description)),
          FALSE);
      END;
    END;

    PROCEDURE PostInvtPostBufPerPostGrp@19(DocNo@1001 : Code[20];Desc@1000 : Text[50]);
    VAR
      ValueEntry@1003 : Record 5802;
    BEGIN
      PostInvtPostBuf(ValueEntry,DocNo,'',Desc,TRUE);
    END;

    LOCAL PROCEDURE PostInvtPostBuf@3(VAR ValueEntry@1008 : Record 5802;DocNo@1002 : Code[20];ExternalDocNo@1007 : Code[20];Desc@1003 : Text[50];PostPerPostGrp@1001 : Boolean);
    VAR
      GenJnlLine@1004 : Record 81;
      TempJnlLineDim@1005 : TEMPORARY Record 356;
    BEGIN
      WITH GlobalInvtPostBuf DO BEGIN
        RESET;
        IF NOT FINDSET THEN
          EXIT;

        GenJnlLine.INIT;
        GenJnlLine."Document No." := DocNo;
        GenJnlLine."External Document No." := ExternalDocNo;
        GenJnlLine.Description := Desc;
        GetSourceCodeSetup;
        GenJnlLine."Source Code" := SourceCodeSetup."Inventory Post Cost";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Job No." := "Job No.";
        REPEAT
          GenJnlLine.VALIDATE("Posting Date","Posting Date");
          IF SetAmt(GenJnlLine,Amount,"Amount (ACY)") THEN BEGIN
            IF PostPerPostGrp THEN
              SetDesc(GenJnlLine,GlobalInvtPostBuf);
            GenJnlLine."Account No." := "Account No.";
            InsertJnlLineDim(GenJnlLine,TempJnlLineDim,"Dimension Entry No.");
            IF NOT CalledFromTestReport THEN
              IF NOT RunOnlyCheck THEN BEGIN
                IF NOT CalledFromItemPosting THEN
                  GenJnlPostLine.SetOverDimErr;
                GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim)
              END ELSE
                GenJnlCheckLine.RunCheck(GenJnlLine,TempJnlLineDim)
            ELSE
              InsertTempInvtPostToGLTestBuf(GenJnlLine,TempJnlLineDim,ValueEntry);
          END;
          IF NOT CalledFromTestReport AND NOT RunOnlyCheck THEN
            CreateGLItemLedgRelation(ValueEntry);
        UNTIL NEXT = 0;

        DELETEALL;
      END;
    END;

    LOCAL PROCEDURE GetSourceCodeSetup@15();
    BEGIN
      IF NOT SourceCodeSetupRead THEN
        SourceCodeSetup.GET;
      SourceCodeSetupRead := TRUE;
    END;

    LOCAL PROCEDURE SetAmt@22(VAR GenJnlLine@1000 : Record 81;Amt@1001 : Decimal;AmtACY@1002 : Decimal) : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        "Additional-Currency Posting" := "Additional-Currency Posting"::None;
        VALIDATE(Amount,Amt);

        GetGLSetup;
        IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
          "Source Currency Code" := GLSetup."Additional Reporting Currency";
          "Source Currency Amount" := AmtACY;
          IF (Amount = 0) AND ("Source Currency Amount" <> 0) THEN BEGIN
            "Additional-Currency Posting" :=
              "Additional-Currency Posting"::"Additional-Currency Amount Only";
            VALIDATE(Amount,"Source Currency Amount");
            "Source Currency Amount" := 0;
          END;
        END;
      END;

      EXIT((Amt <> 0) OR (AmtACY <> 0));
    END;

    PROCEDURE SetDesc@27(VAR GenJnlLine@1006 : Record 81;InvtPostBuf@1004 : Record 48);
    BEGIN
      WITH InvtPostBuf DO BEGIN
        GenJnlLine.Description :=
          COPYSTR(
            STRSUBSTNO(
              Text001,
              "Account Type","Bal. Account Type",
              "Location Code","Inventory Posting Group",
              "Gen. Bus. Posting Group","Gen. Prod. Posting Group"),
            1,MAXSTRLEN(GenJnlLine.Description));
      END;
    END;

    LOCAL PROCEDURE InsertJnlLineDim@16(VAR GenJnlLine@1000 : Record 81;VAR TempJnlLineDim@1001 : TEMPORARY Record 356;DimEntryNo@1002 : Integer);
    VAR
      TempDimBufOut@1003 : TEMPORARY Record 360;
    BEGIN
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBufOut);

      WITH GenJnlLine DO BEGIN
        "Shortcut Dimension 1 Code" := '';
        "Shortcut Dimension 2 Code" := '';

        TempJnlLineDim.DELETEALL;
        IF TempDimBufOut.FINDSET THEN
          REPEAT
            TempJnlLineDim.INIT;
            TempJnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
            TempJnlLineDim."Journal Template Name" := "Journal Template Name";
            TempJnlLineDim."Journal Batch Name" := "Journal Batch Name";
            TempJnlLineDim."Journal Line No." := "Line No.";
            TempJnlLineDim."Allocation Line No." := 0;
            TempJnlLineDim."Dimension Code" := TempDimBufOut."Dimension Code";
            TempJnlLineDim."Dimension Value Code" := TempDimBufOut."Dimension Value Code";
            TempJnlLineDim.INSERT;
            IF TempDimBufOut."Dimension Code" = GLSetup."Shortcut Dimension 1 Code" THEN
              "Shortcut Dimension 1 Code" := TempDimBufOut."Dimension Value Code";
            IF TempDimBufOut."Dimension Code" = GLSetup."Shortcut Dimension 2 Code" THEN
              "Shortcut Dimension 2 Code" := TempDimBufOut."Dimension Value Code";
          UNTIL TempDimBufOut.NEXT = 0
      END;
    END;

    LOCAL PROCEDURE InsertTempInvtPostToGLTestBuf@25(GenJnlLine@1000 : Record 81;VAR JnlLineDim@1002 : Record 356;ValueEntry@1001 : Record 5802);
    BEGIN
      WITH GenJnlLine DO BEGIN
        TempInvtPostToGLTestBuf."Line No." := GetNextLineNo;
        TempInvtPostToGLTestBuf."Posting Date" := "Posting Date";
        TempInvtPostToGLTestBuf."Document No." := "Document No.";
        TempInvtPostToGLTestBuf.Description := Description;
        TempInvtPostToGLTestBuf."Account No." := "Account No.";
        TempInvtPostToGLTestBuf.Amount := Amount;
        TempInvtPostToGLTestBuf."Source Code" := "Source Code";
        TempInvtPostToGLTestBuf."System-Created Entry" := TRUE;
        TempInvtPostToGLTestBuf."Value Entry No." := ValueEntry."Entry No.";
        TempInvtPostToGLTestBuf."Additional-Currency Posting" := "Additional-Currency Posting";
        TempInvtPostToGLTestBuf."Source Currency Code" := "Source Currency Code";
        TempInvtPostToGLTestBuf."Source Currency Amount" := "Source Currency Amount";
        TempInvtPostToGLTestBuf."Inventory Account Type" := GlobalInvtPostBuf."Account Type";
        IF GlobalInvtPostBuf.UseInvtPostSetup THEN BEGIN
          TempInvtPostToGLTestBuf."Location Code" := GlobalInvtPostBuf."Location Code";
          TempInvtPostToGLTestBuf."Invt. Posting Group Code" :=
            GetInvPostingGroupCode(
              ValueEntry,
              TempInvtPostToGLTestBuf."Inventory Account Type" = TempInvtPostToGLTestBuf."Inventory Account Type"::"WIP Inventory",
              GlobalInvtPostBuf."Inventory Posting Group")
        END ELSE BEGIN
          TempInvtPostToGLTestBuf."Gen. Bus. Posting Group" := GlobalInvtPostBuf."Gen. Bus. Posting Group";
          TempInvtPostToGLTestBuf."Gen. Prod. Posting Group" := GlobalInvtPostBuf."Gen. Prod. Posting Group";
        END;
        TempInvtPostToGLTestBuf.INSERT;
      END;

      IF NOT JnlLineDim.FINDSET THEN
        EXIT;

      REPEAT
        TempJnlLineDim2 := JnlLineDim;
        TempJnlLineDim2."Journal Line No." := TempInvtPostToGLTestBuf."Line No.";
        TempJnlLineDim2.INSERT;
      UNTIL JnlLineDim.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateGLItemLedgRelation@33(VAR ValueEntry@1000 : Record 5802);
    VAR
      GLReg@1001 : Record 45;
    BEGIN
      GenJnlPostLine.GetGLReg(GLReg);
      IF GlobalPostPerPostGroup THEN BEGIN
        TempGLItemLedgRelation.RESET;
        TempGLItemLedgRelation.SETRANGE("G/L Entry No.",GlobalInvtPostBuf."Entry No.");
        TempGLItemLedgRelation.FINDSET;
        REPEAT
          ValueEntry.GET(TempGLItemLedgRelation."Value Entry No.");
          UpdateValueEntry(ValueEntry);
          CreateGLItemLedgRelationEntry(GLReg);
        UNTIL TempGLItemLedgRelation.NEXT = 0;
      END ELSE BEGIN
        UpdateValueEntry(ValueEntry);
        CreateGLItemLedgRelationEntry(GLReg);
      END;
    END;

    PROCEDURE CreateGLItemLedgRelationEntry@35(GLReg@1003 : Record 45);
    VAR
      GLItemLedgRelation@1002 : Record 5823;
    BEGIN
      GLItemLedgRelation.INIT;
      GLItemLedgRelation."G/L Entry No." := GLReg."To Entry No.";
      GLItemLedgRelation."Value Entry No." := TempGLItemLedgRelation."Value Entry No.";
      GLItemLedgRelation."G/L Register No." := GLReg."No.";
      GLItemLedgRelation.INSERT;
      TempGLItemLedgRelation."G/L Entry No." := GlobalInvtPostBuf."Entry No.";
      TempGLItemLedgRelation.DELETE;
    END;

    LOCAL PROCEDURE UpdateValueEntry@13(VAR ValueEntry@1000 : Record 5802);
    BEGIN
      WITH ValueEntry DO BEGIN
        IF GlobalInvtPostBuf."Interim Account" THEN BEGIN
          "Expected Cost Posted to G/L" := "Cost Amount (Expected)";
          "Exp. Cost Posted to G/L (ACY)" := "Cost Amount (Expected) (ACY)";
        END ELSE BEGIN
          "Cost Posted to G/L" := "Cost Amount (Actual)";
          "Cost Posted to G/L (ACY)" := "Cost Amount (Actual) (ACY)";
        END;
        IF NOT CalledFromItemPosting THEN
          MODIFY;
      END;
    END;

    PROCEDURE GetTempInvtPostToGLTestBuf@29(VAR InvtPostToGLTestBuf@1001 : Record 5822;VAR JnlLineDim@1000 : Record 356);
    BEGIN
      InvtPostToGLTestBuf.DELETEALL;
      JnlLineDim.DELETEALL;
      IF NOT TempInvtPostToGLTestBuf.FINDSET THEN
        EXIT;

      REPEAT
        InvtPostToGLTestBuf := TempInvtPostToGLTestBuf;
        InvtPostToGLTestBuf.INSERT;
      UNTIL TempInvtPostToGLTestBuf.NEXT = 0;

      IF NOT TempJnlLineDim2.FINDSET THEN
        EXIT;

      REPEAT
        JnlLineDim := TempJnlLineDim2;
        JnlLineDim.INSERT;
      UNTIL TempJnlLineDim2.NEXT = 0;
    END;

    PROCEDURE GetAmtToPost@11(VAR NewCOGSAmt@1000 : Decimal;VAR NewInvtAdjmtAmt@1001 : Decimal;VAR NewDirCostAmt@1002 : Decimal;VAR NewOvhdCostAmt@1003 : Decimal;VAR NewVarPurchCostAmt@1004 : Decimal;VAR NewVarMfgDirCostAmt@1013 : Decimal;VAR NewVarMfgOvhdCostAmt@1008 : Decimal;VAR NewWIPInvtAmt@1009 : Decimal;VAR NewInvtAmt@1010 : Decimal;GetTotal@1007 : Boolean);
    BEGIN
      GetAmt(NewInvtAdjmtAmt,InvtAdjmtAmt,TotalInvtAdjmtAmt,GetTotal);
      GetAmt(NewDirCostAmt,DirCostAmt,TotalDirCostAmt,GetTotal);
      GetAmt(NewOvhdCostAmt,OvhdCostAmt,TotalOvhdCostAmt,GetTotal);
      GetAmt(NewVarPurchCostAmt,VarPurchCostAmt,TotalVarPurchCostAmt,GetTotal);
      GetAmt(NewVarMfgDirCostAmt,VarMfgDirCostAmt,TotalVarMfgDirCostAmt,GetTotal);
      GetAmt(NewVarMfgOvhdCostAmt,VarMfgOvhdCostAmt,TotalVarMfgOvhdCostAmt,GetTotal);
      GetAmt(NewWIPInvtAmt,WIPInvtAmt,TotalWIPInvtAmt,GetTotal);
      GetAmt(NewCOGSAmt,COGSAmt,TotalCOGSAmt,GetTotal);
      GetAmt(NewInvtAmt,InvtAmt,TotalInvtAmt,GetTotal);
    END;

    LOCAL PROCEDURE GetAmt@21(VAR NewAmt@1000 : Decimal;VAR Amt@1001 : Decimal;VAR TotalAmt@1002 : Decimal;GetTotal@1003 : Boolean);
    BEGIN
      IF GetTotal THEN
        NewAmt := TotalAmt
      ELSE BEGIN
        NewAmt := Amt;
        TotalAmt := TotalAmt + Amt;
        Amt := 0;
      END;
    END;

    PROCEDURE GetInvtPostBuf@7(VAR InvtPostBuf@1000 : Record 48);
    BEGIN
      InvtPostBuf.DELETEALL;

      GlobalInvtPostBuf.RESET;
      IF GlobalInvtPostBuf.FINDSET THEN
        REPEAT
          InvtPostBuf := GlobalInvtPostBuf;
          InvtPostBuf.INSERT;
        UNTIL GlobalInvtPostBuf.NEXT = 0;
    END;

    PROCEDURE GetDimBuf@12(DimEntryNo@1001 : Integer;VAR TempDimBuf@1000 : Record 360);
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
    END;

    LOCAL PROCEDURE GetInvPostingGroupCode@32(ValueEntry@1000 : Record 5802;WIPInventory@1001 : Boolean;InvPostingGroupCode@1002 : Code[10]) : Code[10];
    VAR
      Item@1003 : Record 27;
    BEGIN
      IF WIPInventory THEN
        IF ValueEntry."Source No." <> ValueEntry."Item No." THEN
          IF Item.GET(ValueEntry."Source No.") THEN
            EXIT(Item."Inventory Posting Group");

      EXIT(InvPostingGroupCode);
    END;

    BEGIN
    END.
  }
}
