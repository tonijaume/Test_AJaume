OBJECT Codeunit 7010317 Rutinas Vehiculos
{
  OBJECT-PROPERTIES
  {
    Date=16/10/09;
    Time=12:35:31;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=VAR
            rSel@1100244000 : Record 7010352;
            rVeh@1100244001 : Record 7010346;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100244005 : TextConst 'ESP=Libro diario producto';
      Text001@1100244006 : TextConst 'ESP=Seccion diario producto';
      Text002@1100244007 : TextConst 'ESP=Gr. contable neg. producto';
      Text0001@1100244000 : TextConst 'ESP=RENUMERAR VEHICULO';
      Text0002@1100244001 : TextConst 'ESP=INDIQUE NUEVO NUMERO #1########';
      Text0003@1100244002 : TextConst 'ESP=Debe indicar un nuevo numero de vehiculo.';
      Text0004@1100244003 : TextConst 'ESP=Este numero ya esta asignado a otro vehiculo.';
      Text0005@1100244004 : TextConst 'ESP=Desea cambiar el numero del vehiculo %1 a numero %2.';
      Text0006@1103350000 : TextConst 'ESP=S¢lo disponemos de unas existencias de %1 para el producto %2';

    PROCEDURE ActualizarSeleccionVehiculos@2();
    VAR
      rSel@1100244000 : Record 7010352;
      rVeh@1100244001 : Record 7010346;
    BEGIN
      // ActualizarSeleccionVehiculos().
      //Vemos si hay que borrar de la tabla Selecci¢n alg£n Registro.
      rSel.RESET;
      rSel.SETRANGE(Usuario,USERID);
      IF rSel.FINDSET(TRUE) THEN REPEAT
        IF NOT rVeh.GET(rSel.Matricula) THEN
          rSel.DELETE(TRUE);
      UNTIL rSel.NEXT=0;

      //Vemos si hay que a¤adir a la tabla Selecci¢n, o cambiar el numero del vehiculo.
      rVeh.RESET;
      rVeh.SETCURRENTKEY(Matricula);
      IF rVeh.FINDSET THEN REPEAT

        IF NOT rSel.GET(USERID,rVeh.Matricula) THEN BEGIN
          rSel.INIT;
          rSel.Usuario           := USERID;
          rSel.Garaje            := rVeh.Garaje;
          rSel.Matricula         := rVeh.Matricula;
          rSel.Numero            := rVeh.Numero;
          rSel."Tipo Vehiculo"   := rVeh."Tipo vehiculo";
          rSel."Vehiculo propio" := rVeh."Vehiculo propio";
          rSel.Bloqueado         := rVeh.Bloqueado;
          rSel.Seleccion:= TRUE;
          rSel.INSERT;
        END
        ELSE BEGIN
          //Mirar si ha cambiado alg£n valor importante.
          IF (rVeh.Numero <> rSel.Numero) OR (rVeh.Garaje <> rSel.Garaje) OR
             (rVeh.Plazas <> rSel.Plazas) OR (rVeh."Tipo vehiculo" <> rSel."Tipo Vehiculo") OR
             (rVeh."Vehiculo propio" <> rSel."Vehiculo propio") OR
             (rVeh.Bloqueado <> rSel.Bloqueado) THEN BEGIN

            rSel.Numero            := rVeh.Numero;
            rSel.Garaje            := rVeh.Garaje;
            rSel.Plazas            := rVeh.Plazas;
            rSel."Tipo Vehiculo"   := rVeh."Tipo vehiculo";
            rSel."Vehiculo propio" := rVeh."Vehiculo propio";
            rSel.Bloqueado         := rVeh.Bloqueado;
            rSel.MODIFY;

          END;

        END;
      UNTIL rVeh.NEXT=0;
    END;

    PROCEDURE ActualizarRangos@1();
    VAR
      rAgrUsu@1100244000 : Record 7010354;
      rAgr@1100244001 : Record 7010353;
    BEGIN
      rAgrUsu.RESET;
      rAgrUsu.SETCURRENTKEY("Id. Usuario");
      rAgrUsu.SETRANGE("Id. Usuario",USERID);
      rAgrUsu.DELETEALL(TRUE);
      rAgrUsu.RESET;

      rAgr.RESET;
      IF rAgr.FINDSET THEN REPEAT
        rAgrUsu.INIT;
        rAgrUsu.Garaje        := rAgr.Garaje;
        rAgrUsu."Rango Desde" := rAgr."Rango Desde";
        rAgrUsu.Agrupar       := rAgr.Agrupar;
        rAgrUsu.INSERT(TRUE);
      UNTIL rAgr.NEXT=0;
    END;

    PROCEDURE ObtenerNumeroVehiculo@3(pMatricula@1100244000 : Code[10]) : Text[10];
    VAR
      vResult@1100244001 : Code[10];
      rVeh@1100244002 : Record 7010346;
    BEGIN
      vResult:='';
      rVeh.RESET;
      IF rVeh.GET(pMatricula) THEN
        vResult:= FORMAT(rVeh.Numero);
      EXIT(vResult);
    END;

    PROCEDURE CrearAgrupacionRangos@4(VAR aRangos@1100244000 : ARRAY [100,3] OF Integer;VAR aRGaraje@1100244001 : ARRAY [100] OF Code[10];VAR vContador@1100244002 : Integer);
    VAR
      rAgrUsu@1100244003 : Record 7010354;
    BEGIN
      //CrearAgrupacionRangos(aRaqngos,aRGaraje,vContador);

      //Inicializamos las variables.
      CLEAR(aRangos);
      CLEAR(aRGaraje);
      vContador := 0;

      //Y a llenarlas.
      rAgrUsu.RESET;
      rAgrUsu.SETCURRENTKEY("Id. Usuario",Garaje,"Rango Desde");
      rAgrUsu.SETRANGE(Usuario,USERID);
      IF rAgrUsu.FINDSET THEN REPEAT

        vContador := vContador + 1;
        aRangos[vContador,1]:=rAgrUsu."Rango Desde";
        aRangos[vContador,2]:=100000000;  //Valor M ximo.
        aRGaraje[vContador] := rAgrUsu.Garaje;

        //Dejamos indicado si tenemos o no que agrupar para ese rango.
        IF rAgrUsu.Agrupar THEN
          aRangos[vContador,3]:=1
        ELSE
          aRangos[vContador,3]:=0;

        IF vContador>1 THEN
          IF aRGaraje[vContador-1]=aRGaraje[vContador] THEN
            aRangos[vContador-1,2] := aRangos[vContador,1]-1;

      UNTIL rAgrUsu.NEXT=0;
    END;

    PROCEDURE ObtenerAgrupacionRango@5(pGaraje@1100244000 : Code[10];aRangos@1100244001 : ARRAY [100,3] OF Integer;aRGaraje@1100244002 : ARRAY [100] OF Code[10];pMaximo@1100244003 : Integer;pPlazas@1100244004 : Integer) : Code[10];
    VAR
      i@1100244005 : Integer;
    BEGIN
      //ObtenerAgrupacionRango(pGaraje,aRangos,aRGaraje,pMaximo,pPlazas);
      //pGaraje->Es el Garaje que estamos buscando.
      //aRangos, aRGaraje, son matrices sincronizadas con la informaci¢n de la agrupaci¢n de plazas.
      //pMaximo es el n£mero de registros activos que tiene cada matriz.
      //pPlazas son las plazas del vehiculo en cuestion.

      FOR i:=1 TO pMaximo DO
        IF (pGaraje=aRGaraje[i]) AND (pPlazas >= aRangos[i,1]) AND (pPlazas <= aRangos[i,2]) THEN BEGIN

          //Revisamos si tenemos que agrupar para ese rango.
          IF aRangos[i,3]=1 THEN
            EXIT(FORMAT(aRangos[i,1]))
          ELSE
            EXIT('');

        END;

      //No lo hemos encontrado.
      EXIT('');
    END;

    PROCEDURE RegistrarPiezas@6(Reg@1100244000 : Record 7010355) vResult : Boolean;
    VAR
      FALTA_ALMACEN@1100244001 : TextConst 'ESP=Falta introducir el almacen';
      FALTA_FECHA@1100244002 : TextConst 'ESP=Falta introducir la fecha';
      FALTA_PRODUCTO@1100244003 : TextConst 'ESP=Falta introducir el producto';
      rLin@1100244004 : Record 83;
      FALTA_CANTIDAD@1100244005 : TextConst 'ESP=Falta introducir la cantidad';
      rLinAux@1103350001 : Record 83;
      rPar@1100244006 : Record 7010311;
      FALTA_PARAMETRO@1100244007 : TextConst 'ESP=Falta especificar %1 en la ficha de parametros';
      rPro@1103350000 : Record 27;
      lwSeHaDeRegistrar@1100244008 : Boolean;
      rConfExistencias@1100244009 : Record 313;
      wTraspasado@1103350002 : Boolean;
    BEGIN
      // RegistrarPiezas(Reg);
      //
      rPar.FINDFIRST;

      vResult := FALSE;

      lwSeHaDeRegistrar := Reg."Tipo de Linea"=Reg."Tipo de Linea"::"Piezas en Stock";

      IF rPar."Libro diario producto" = '' THEN
        ERROR(FALTA_PARAMETRO,Text000);
      IF rPar."Seccion diario producto" = '' THEN
        ERROR(FALTA_PARAMETRO,Text001);
      IF rPar."Gr. contable neg. producto" = '' THEN
        ERROR(FALTA_PARAMETRO,Text002);

      IF Reg.Fecha = 0D THEN
        ERROR(FALTA_FECHA);

      IF Reg."Cod. Producto" = '' THEN
        IF lwSeHaDeRegistrar THEN
          ERROR(FALTA_PRODUCTO);

      IF Reg.Cantidad = 0 THEN
        ERROR(FALTA_CANTIDAD);

      IF rConfExistencias.FINDFIRST THEN
        IF rConfExistencias."Location Mandatory"=TRUE THEN
          IF Reg.Almacen='' THEN ERROR(FALTA_ALMACEN);

      wTraspasado := TRUE;

      IF lwSeHaDeRegistrar THEN BEGIN

        //Validamos que haya suficiente stock.
        IF Reg.Cantidad > 0 THEN BEGIN
          rPro.GET(Reg."Cod. Producto");
          rPro.CALCFIELDS(Inventory);
          IF rPro.Inventory < Reg.Cantidad THEN
            ERROR(Text0006, rPro.Inventory, rPro."No.");
        END;

        rLin.INIT;
        rLin.VALIDATE("Journal Template Name"  , rPar."Libro diario producto");
        rLin.VALIDATE("Journal Batch Name"     , rPar."Seccion diario producto");
        rLin.VALIDATE("Document No."           , Reg."N§ Incidencia");
        rLin.VALIDATE("Posting Date"           , Reg.Fecha);
        rLin.VALIDATE("Entry Type"             , rLin."Entry Type"::"Negative Adjmt.");
        rLin.VALIDATE("Location Code"          , Reg.Almacen);
        rLin.VALIDATE(Quantity                 , Reg.Cantidad);
        rLin.VALIDATE("Item No."               , Reg."Cod. Producto");
        rLin.VALIDATE("Gen. Bus. Posting Group", rPar."Gr. contable neg. producto");

        // Asignamos un numero de linea.
        rLin."Line No."        := ObtenerNumeroLinea(rLin."Journal Template Name",
                                                   rLin."Journal Batch Name");
        rLin.INSERT(TRUE);

        // AJS 31.01.2005
        // Guardar el registro para posterior comprobacion de que este registrado

        rLinAux := rLin;

        //JPT - Registrar Realmente
        rLin.SETRANGE("Journal Template Name",rLin."Journal Template Name");
        rLin.SETRANGE("Journal Batch Name",rLin."Journal Batch Name");
        rLin.SETRANGE("Line No.",rLin."Line No.");
        CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post",rLin);

        // Queremos saber si se ha registrado

        rLin.RESET;
        rLin.SETRANGE("Journal Template Name", rLinAux."Journal Template Name");
        rLin.SETRANGE("Journal Batch Name"   , rLinAux."Journal Batch Name");
        rLin.SETRANGE("Line No."             , rLinAux."Line No.");
        rLin.SETRANGE("Document No."         , rLinAux."Document No.");
        rLin.SETRANGE("Posting Date"         , rLinAux."Posting Date");
        rLin.SETRANGE("Item No."             , rLinAux."Item No.");

        IF rLin.FINDFIRST THEN
          wTraspasado := FALSE;

         // Borramos el rastro que haya podido quedar, para no confundir.

         rLin.SETRANGE("Item No.");
         rLin.SETRANGE("Posting Date");
         rLin.DELETEALL;
      END;

      // Marcamos como traspasado.

      IF wTraspasado THEN BEGIN
        Reg.Traspasado         := TRUE;
        Reg."Usuario Traspaso" := USERID;
        Reg."Fecha Traspaso"   := TODAY;
        Reg."Hora Traspaso"    := TIME;
        Reg.MODIFY;
      END;

      vResult := TRUE;
    END;

    PROCEDURE ObtenerNumeroLinea@7(pLibro@1100244000 : Code[10];pSeccion@1100244001 : Code[10]) : Integer;
    VAR
      rLin@1100244002 : Record 83;
      vResult@1100244003 : Integer;
    BEGIN
      // ObtenerNumeroLinea(pLibro,pSeccion);

      vResult := 10000;

      rLin.RESET;
      rLin.SETRANGE("Journal Template Name"  , pLibro);
      rLin.SETRANGE("Journal Batch Name", pSeccion);

      IF rLin.FINDLAST THEN
        vResult:= rLin."Line No." + 10000;

      EXIT(vResult);
    END;

    PROCEDURE renumera_vehiculo@8(VAR prVeh@1100244000 : Record 7010346);
    VAR
      lrVeh@1100244001 : Record 7010346;
      lrParte@1100244002 : Record 7010360;
      lrRegDia@1100244004 : Record 7035342;
      lrRegDia2@1100244005 : Record 7035342;
      lrRegDia3@1100244006 : Record 7035342;
      lrCierreDia@1100244007 : Record 7035344;
      lrCierreDia2@1100244008 : Record 7035344;
      lrCierreDia3@1100244009 : Record 7035344;
      lwVentana@1100244010 : Dialog;
      lwNumVehiculo@1100244011 : Code[10];
    BEGIN
      // renumera_vehiculo
      //
      lwVentana.OPEN(Text0001 + '\\' + Text0002);
      lwVentana.INPUT(1, lwNumVehiculo);
      lwVentana.CLOSE;

      IF lwNumVehiculo = '' THEN
        ERROR(Text0003);

      lrVeh.RESET;
      lrVeh.SETCURRENTKEY(Numero);
      lrVeh.SETRANGE(Numero, lwNumVehiculo);
      IF lrVeh.FINDFIRST THEN
        ERROR(Text0004);

      IF NOT CONFIRM(Text0005, FALSE, prVeh.Numero, lwNumVehiculo) THEN
        EXIT;

      // ----  Cambiar el numero en los partes de trabajo  ----

      lrParte.RESET;
      lrParte.SETCURRENTKEY(Vehiculo,
                            Fecha);
      lrParte.SETRANGE(Vehiculo, prVeh.Matricula);
      IF lrParte.FINDFIRST THEN
        lrParte.MODIFYALL("N§ Vehiculo", lwNumVehiculo);


      // ----  Cambiar el numero en el registro diario  ----

      lrRegDia.RESET;
      lrRegDia.SETCURRENTKEY(Matricula);
      lrRegDia.SETRANGE(Matricula, prVeh.Matricula);
      IF lrRegDia.FINDSET THEN BEGIN
        REPEAT
          lrRegDia3 := lrRegDia;
          lrRegDia3.DELETE;

          lrRegDia2 := lrRegDia;
          lrRegDia2.Vehiculo := lwNumVehiculo;
          lrRegDia2.INSERT;
        UNTIL lrRegDia.NEXT = 0;
      END;

      // ----  Cambiar el numero en el cierre diario  ----

      lrCierreDia.RESET;
      lrCierreDia.SETCURRENTKEY("Fecha cierre",
                                "Matricula vehiculo");
      lrCierreDia.SETRANGE("Matricula vehiculo", prVeh.Matricula);
      lrCierreDia.SETRANGE("Tipo recurso"      , lrCierreDia."Tipo recurso"::vehiculo);
      lrCierreDia.SETRANGE(Recurso             , prVeh.Numero);
      IF lrCierreDia.FINDSET(TRUE,TRUE) THEN BEGIN
        REPEAT
          lrCierreDia2         := lrCierreDia;
          lrCierreDia2.Recurso := lwNumVehiculo;
          lrCierreDia3         := lrCierreDia2;
          IF lrCierreDia3.FIND THEN  // JPT 08/07/05 Modifico para que pete si existian el registro
            lrCierreDia2.MODIFY
          ELSE
            lrCierreDia2.INSERT;

          lrCierreDia3 := lrCierreDia;
          lrCierreDia3.DELETE;
        UNTIL lrCierreDia.NEXT = 0;
      END;

      // ----  Cambiar el numero de vehiculo en la propia ficha de vehiculo  ----

      prVeh.Numero := lwNumVehiculo;
      prVeh.MODIFY;
    END;

    BEGIN
    {
      //Procedimientos comunes en varios puntos del m¢dulo de Vehiculos.
    }
    END.
  }
}
