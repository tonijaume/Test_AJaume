OBJECT Codeunit 827 DO Payment Card Validation
{
  OBJECT-PROPERTIES
  {
    Date=11/12/10;
    Time=12:00:00;
    Version List=NAVW16.00.10;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=''Invalid card type''.;ESP=''Tipo de tarjeta no v lido''.';
      CreditCard@1001 : Record 827;
      Text002@1002 : TextConst 'ENU=%1 must not contain spaces.;ESP=%1 no debe contener espacios.';
      Text003@1003 : TextConst 'ENU=The specified %1 is not valid.;ESP=%1 que se especific¢ no se admite.';
      Text004@1004 : TextConst 'ENU=%1 can only contain digits.;ESP=%1 s¢lo puede contener d¡gitos.';
      Text005@1005 : TextConst 'ENU=You must specify %1.;ESP=Se debe indicar %1.';
      Text006@1102601000 : TextConst 'ENU=Validation rule does not allow spaces.;ESP=La regla de validaci¢n no admite espacios.';
      Text007@1102601001 : TextConst 'ENU=%1 does not meet the required length;ESP=%1 no cumple la longitud necesaria';
      Text008@1102601002 : TextConst 'ENU=%1 exceeds the maximum length;ESP=%1 supera la longitud m xima';

    PROCEDURE ValidateCreditCard@1(VAR CardNumber@1000 : Text[30];CardTypeName@1001 : Text[20]);
    VAR
      CardType@1002 : Record 830;
    BEGIN
      IF NOT CardType.GET(CardTypeName) THEN
        ERROR(Text001);

      ValidateCreditCardType(CardNumber,CardType);
    END;

    PROCEDURE ValidateCreditCardType@2(VAR CardNumber@1000 : Text[30];CardType@1001 : Record 830);
    VAR
      Integer@1002 : Integer;
      IsValid@1003 : Boolean;
      I@1004 : Integer;
    BEGIN
      IF NOT CardType."Allow Spaces" THEN
        IF STRPOS(CardNumber,' ') > 0 THEN
          ERROR(Text002,CreditCard.FIELDCAPTION("Credit Card Number"));

      IF CardType."Numeric Only" THEN BEGIN
        FOR I:=1 TO STRLEN(CardNumber) DO BEGIN
          IF (COPYSTR(CardNumber,I,1) <> ' ') AND (NOT EVALUATE(Integer,COPYSTR(CardNumber,I,1))) THEN
            ERROR(Text004,CreditCard.FIELDCAPTION("Credit Card Number"));
        END;
      END;

      IF CardType."Min. Length" > 0 THEN
        IF STRLEN(CardNumber) < CardType."Min. Length" THEN
          ERROR(Text007,CreditCard.FIELDCAPTION("Credit Card Number"));

      IF CardType."Max. Length" > 0 THEN
        IF STRLEN(CardNumber) > CardType."Max. Length" THEN
          ERROR(Text008,CreditCard.FIELDCAPTION("Credit Card Number"));

      IsValid := TRUE;
      IF CardType."Validation Rule" > 0 THEN
        CASE CardType."Validation Rule" OF
          1:
            IsValid := IsModulus10(CardNumber);
          ELSE
            ERROR(Text005,CreditCard.FIELDCAPTION(Type));
        END;

      IF NOT IsValid THEN
        ERROR(Text003,CreditCard.FIELDCAPTION("Credit Card Number"));
    END;

    PROCEDURE IsModulus10@3(VAR CardNo@1000 : Text[30]) : Boolean;
    VAR
      I@1001 : Integer;
      IntegerValue@1002 : Integer;
      SumValue@1003 : Integer;
    BEGIN
      WHILE STRLEN(CardNo) MOD 2 <> 0 DO
        CardNo := '0' + CardNo;

      IF STRPOS(CardNo,' ') > 0 THEN
        ERROR(Text006);

      FOR I := 0 TO STRLEN(CardNo)-1 DO BEGIN
        IF I MOD 2 = 0 THEN BEGIN
          EVALUATE(IntegerValue,COPYSTR(CardNo,I + 1,1));
          IF (IntegerValue * 2) > 9 THEN
            SumValue := SumValue + (1 + ((IntegerValue * 2) MOD 10))
          ELSE
            SumValue := SumValue + IntegerValue * 2;
        END ELSE BEGIN
          EVALUATE(IntegerValue,COPYSTR(CardNo,I + 1,1));
          SumValue := SumValue + IntegerValue;
        END;
      END;

      IF SumValue MOD 10 <> 0 THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}
