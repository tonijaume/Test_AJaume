OBJECT Codeunit 7009913 Cotizacion comunes
{
  OBJECT-PROPERTIES
  {
    Date=21/04/15;
    Time=18:06:06;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1103355001 : TextConst 'ENU=C%1;ESP=C%1';
      Text002@1103355002 : TextConst 'ENU=HABITACIOV;ESP=HABITACIOV';
      Text003@1103355003 : TextConst 'ENU=REG HABITV;ESP=REG HABITV';
      Text004@1103355004 : TextConst 'ENU=REGIMENV;ESP=REGIMENV';
      Text005@1103355005 : TextConst 'ENU=REG REGIMV;ESP=REG REGIMV';
      Text006@1103355006 : TextConst 'ENU=SUPLEMENTV;ESP=SUPLEMENTV';
      Text007@1103355007 : TextConst 'ENU=REG SUPLEV;ESP=REG SUPLEV';
      Text008@1103355008 : TextConst 'ENU=OFERTAV;ESP=OFERTAV';
      Text009@1103355009 : TextConst 'ENU=Contract %1 in the local office %2 does not exist;ESP=No existe el contrato %1 en la delegacion %2.';
      Text010@1103355010 : TextConst 'ENU=Deleted prices by surcharges or offers;ESP=Precios borrados por suplementos u ofertas.';
      cCalRes@1103355011 : Codeunit 7009707;
      cCotRegIng@1103355012 : Codeunit 7009990;
      cCotHabIng@1103355013 : Codeunit 7009992;
      cCotSupIng@1103355014 : Codeunit 7010070;
      cCotExtIng@1103355015 : Codeunit 7010072;
      Text011@1103355025 : TextConst 'ENU=REG HABITA;ESP=REG HABITA';
      Text012@1103355024 : TextConst 'ENU=REG REGIME;ESP=REG REGIME';
      Text013@1103355023 : TextConst 'ENU=REG SUPLEM;ESP=REG SUPLEM';
      Text014@1103355022 : TextConst 'ENU=REG EXTRA;ESP=REG EXTRA';
      Text015@1103355021 : TextConst 'ENU=OFFER;ESP=OFERTA';
      Text016@1103355020 : TextConst 'ENU=Room;ESP=Habitacion';
      Text017@1103355019 : TextConst 'ENU=Board;ESP=Regimen';
      Text018@1103355018 : TextConst 'ENU=Supplement;ESP=Suplemento';
      Text019@1103355017 : TextConst 'ENU=EXTRAFIJOS;ESP=EXTRAFIJOS';
      Text020@1103355016 : TextConst 'ENU=EXTRAVARIA;ESP=EXTRAVARIA';
      cCotTraIng@1103355030 : Codeunit 7010074;
      cCotPreIng@1103355041 : Codeunit 7009744;
      cCotRegCost@1103355029 : Codeunit 7009991;
      cCotHabCost@1103355028 : Codeunit 7009993;
      cCotSupCost@1103355027 : Codeunit 7010071;
      cCotExtCost@1103355026 : Codeunit 7010073;
      cCotTraCost@1103355031 : Codeunit 7010075;
      Text021@1103355032 : TextConst 'ENU=Purchase contract does not exist for term from %1 to %2;ESP=No existe contrato de compra para el periodo desde %1 a %2.';
      cCotPreCost@1103355040 : Codeunit 7009745;
      cVarias@1103355033 : Codeunit 7009720;
      Text022@1103355034 : TextConst 'ENU=Sale contract does not exist for term from %1 to %2;ESP=No existe contrato de venta para el periodo desde %1 a %2.';
      Text023@1103355000 : TextConst 'ENU=Rooms overage in the distribution;ESP=Sobran habitaciones en la distribuci¢n.';
      Text024@1103355035 : TextConst 'ENU=There are empty rooms;ESP=Hay habitaciones vac¡as.';
      Text025@1103355036 : TextConst 'ENU=People overage in the distribution;ESP=Sobran personas en la distribuci¢n.';
      Text026@1103355037 : TextConst 'ENU=People order is not correct;ESP=El ord‚n de las personas es incorrecto.';
      Text027@1103355038 : TextConst 'ENU=There is people missing in the distribution;ESP=Faltan personas en la distribuci¢n.';
      Text028@1103355039 : TextConst 'ENU=Distribution:;ESP=Distribucion:';
      Text029@1103355042 : TextConst 'ENU=% of commission does not exist for Touroperator %1 and location %2;ESP=No existe % de comisi¢n para el Touroperador %1 y Zona %2.';
      Text030@1103355043 : TextConst 'ENU=Hotels for pax %1 overlaps between %2 and %3;ESP=Los hoteles para el pax %1 se solapan entre %2 y %3.';
      wGenHotxPer@1103355044 : 'Todos,Sin transfer entrada,Sin transfer salida';
      rError@1103355045 : Record 7009876;
      Text031@1103355046 : TextConst 'ENU=Data is missing in transfers;ESP=Faltan datos en los transfers.';
      Text032@1103355047 : TextConst 'ENU=Would you like to create a new rating;ESP=Desea crear una nueva cotizacion.';

    PROCEDURE NuevaCotizacion@1103355062();
    VAR
      lrCab@1103355001 : Record 7009871;
      lfFicha@1103355000 : Form 7010038;
    BEGIN
      // NuevaCotizacion

      IF NOT CONFIRM(Text032) THEN
        EXIT;

      lrCab.INSERT(TRUE);
      COMMIT;

      lrCab.SETRECFILTER;
      lfFicha.SETTABLEVIEW(lrCab);
      lfFicha.SETRECORD(lrCab);
      lfFicha.RUNMODAL;
    END;

    PROCEDURE CalcularCotizacion@1103355026(VAR prCabCot@1103355000 : Record 7009871);
    VAR
      lrLinCot@1103355001 : Record 7009872;
      lrCabCal@1103355002 : TEMPORARY Record 7009735;
      lrContratos@1103355003 : TEMPORARY Record 7009873;
      lrHoteles@1103355004 : TEMPORARY Record 7009873;
      lrHabitaciones@1103355005 : TEMPORARY Record 7009873;
      lrPersonas@1103355006 : TEMPORARY Record 7009873;
      lrExtras@1103355007 : TEMPORARY Record 7009873;
      lwCosteTO@1103355008 : Decimal;
      lwIngresoTO@1103355009 : Decimal;
      lrTransfer@1103355010 : Record 7009881;
      lwAdultos@1103355011 : Integer;
      lwNi¤os@1103355012 : Integer;
      lrPersosTrans@1103355013 : TEMPORARY Record 7009873;
      lrExcur@1103355014 : Record 7009883;
    BEGIN
      // CalcularCotizacion
      //: Calcula los hoteles y transfers que se han definido en la cotizaci¢n.
      //: @prCabCot: registro de cabecera cotizaci¢n del que se quieren calcular los productos,


      IF prCabCot.Estado IN [prCabCot.Estado::Anulada, prCabCot.Estado::Cerrada] THEN
        EXIT;

      // Actualizamos los contratos por si ha habido alg£n cambio en la cabecera.
      prCabCot.ActualizarContratosHoteles;

      // Hago un temporary de personas para los transfers.
      GenerarPersonasTrans(prCabCot, lrPersosTrans);

      // Generamos o Regeneramos las l¡neas de calculo donde se va a guardar el resultado del c lculo.
      GenerarLineasCotizacion(prCabCot);

      lrLinCot.SETCURRENTKEY("Id Cotizacion");
      lrLinCot.SETRANGE("Id Cotizacion", prCabCot.Id);

      IF lrLinCot.FINDSET THEN BEGIN
        REPEAT

          lwCosteTO   := 0;
          lwIngresoTO := 0;
          CASE lrLinCot.Tipo OF
            lrLinCot.Tipo::Hotel: BEGIN
              // Pasamos la informaci¢n de la cotizaci¢n a temporaries para realizar el c lculo.
              IF PrepararCalculoCotizacion(prCabCot, lrLinCot, lrCabCal, lrHoteles, lrContratos,
                                           lrHabitaciones, lrPersonas, lrExtras, TRUE) THEN BEGIN

                // Si se ha introducido un Importe Touroperador, este tiene preferencia sobre el coste normal
                IF NOT CalcularImporteTO(prCabCot, lrCabCal, lrHabitaciones, lwCosteTO, lwIngresoTO) THEN BEGIN

                  cCotRegCost.CalcularRegimen(lrCabCal,lrHoteles,lrContratos, lrHabitaciones, lrPersonas);
                  cCotHabCost.CalcularHabitacion(lrCabCal, lrHoteles, lrContratos, lrHabitaciones, lrPersonas);
                  cCotSupCost.CalcularSuplementos(prCabCot, lrCabCal, lrHoteles, lrContratos, lrHabitaciones, lrPersonas);
                  cCotExtCost.CacularExtras(prCabCot, lrCabCal, lrHoteles, lrContratos, lrHabitaciones, lrPersonas, lrExtras);

                  cCotPreCost.CalcularPrecioManual(prCabCot, lrCabCal, lrHabitaciones, lrPersonas);

                END;


              END;

              IF lwIngresoTO = 0 THEN BEGIN
                IF PrepararCalculoCotizacion(prCabCot, lrLinCot, lrCabCal, lrHoteles, lrContratos,
                                             lrHabitaciones, lrPersonas, lrExtras, FALSE) THEN BEGIN

                  cCotRegIng.CalcularRegimen(lrCabCal,lrHoteles,lrContratos, lrHabitaciones, lrPersonas);
                  cCotHabIng.CalcularHabitacion(lrCabCal, lrHoteles, lrContratos, lrHabitaciones, lrPersonas);
                  cCotSupIng.CalcularSuplementos(prCabCot, lrCabCal, lrHoteles, lrContratos, lrHabitaciones, lrPersonas);
                  cCotExtIng.CacularExtras(prCabCot, lrCabCal, lrHoteles, lrContratos, lrHabitaciones, lrPersonas, lrExtras);

                  cCotPreIng.CalcularPrecioManual(prCabCot, lrCabCal, lrHabitaciones, lrPersonas);

                END;
              END;

              lrLinCot.ActualizaTotales(lwCosteTO, lwIngresoTO);
              lrLinCot.MODIFY;

            END;

            lrLinCot.Tipo::Transfer: BEGIN
              lrTransfer.GET(lrLinCot."Id Producto");
              ContarPersonasTransfer(lrTransfer, lrPersosTrans, lwAdultos, lwNi¤os);

              lrLinCot."Total Coste"   := cCotTraCost.CalcularTransfer(prCabCot, lrTransfer, lwAdultos, lwNi¤os);
              lrLinCot."Total Ingreso" := cCotTraIng.CalcularTransfer (prCabCot, lrTransfer, lwAdultos, lwNi¤os);

              lrLinCot.MODIFY;

            END;

            lrLinCot.Tipo::Excursion: BEGIN
              lrExcur.GET(lrLinCot."Id Producto");
              //lrLinCot."Total Coste"   := ????;
              lrLinCot."Total Ingreso" := CalculoReservaExcursion(prCabCot, lrExcur);

              lrLinCot.MODIFY;

            END;

          END;
        UNTIL lrLinCot.NEXT = 0;
      END;

      prCabCot.Estado := prCabCot.Estado::Calculada;
      prCabCot.MODIFY;
    END;

    PROCEDURE ObtenerCodigoCalculo@1103355000(VAR prLinCot@1103355000 : Record 7009872) : Code[20];
    BEGIN
      // ObtenerCodigoCalculo
      //: Generamos un Codigo para usar como clave primaria en las tablas de c lculo.
      //: @prLinCot: registro de l¡nea de cotizaci¢n sobre el que se enlaza el c lculo.
      //: @Result  : C¢digo para las tablas de c lculo.

      EXIT(STRSUBSTNO(Text001, prLinCot.Id));
    END;

    PROCEDURE ActualizarLineaCotizacionHotel@1103355007(VAR prCab@1103355003 : Record 7009871;VAR prHotel@1103355000 : Record 7009873;VAR prHab@1103355005 : Record 7009873;VAR prLinCot@1103355001 : Record 7009872;pwNumLinea@1103355004 : Integer);
    BEGIN
      // ActualizarLineaCotizacionHotel

      prLinCot.RESET;
      prLinCot.SETCURRENTKEY("Id Cotizacion", "Id Producto", Hotel);
      prLinCot.SETRANGE ("Id Cotizacion", prHotel."Id cotizacion");
      prLinCot.SETRANGE ("Id Producto"     , prHotel.Id);
      prLinCot.SETRANGE ("Id Habitacion", prHab.Id);
      prLinCot.SETRANGE (Tipo           , prLinCot.Tipo::Hotel);

      IF NOT prLinCot.FINDFIRST THEN BEGIN

        prLinCot.RESET;
        prLinCot.INIT;

        prLinCot."Id Cotizacion" := prHotel."Id cotizacion";

        prLinCot.Tipo            := prLinCot.Tipo::Hotel;
        prLinCot."Id Producto"      := prHotel.Id;
        prLinCot."Id Habitacion" := prHab.Id;
        prLinCot.Hotel           := prHotel.Hotel;
        prLinCot."Fecha desde"   := prCab."Fecha entrada";
        prLinCot."Fecha hasta"   := prCab."Fecha salida";

        prLinCot.INSERT(TRUE);

      END;

      prLinCot."N§ Linea" := pwNumLinea;
      prLinCot.BorrarLineasCalculo;
      prLinCot.MODIFY(TRUE);
    END;

    PROCEDURE ActualizarLineaCotizacionTrans@1103355059(VAR prCab@1103355003 : Record 7009871;VAR prTransfer@1103355000 : Record 7009881;VAR prLinCot@1103355001 : Record 7009872;pwNumLinea@1103355004 : Integer);
    BEGIN
      // ActualizarLineaCotizacionTrans

      prLinCot.RESET;
      prLinCot.SETCURRENTKEY("Id Cotizacion", "Id Producto", Hotel);
      prLinCot.SETRANGE ("Id Cotizacion", prTransfer."Id Cotizacion");
      prLinCot.SETRANGE ("Id Producto"  , prTransfer.Id);
      prLinCot.SETRANGE (Tipo           , prLinCot.Tipo::Transfer);

      IF NOT prLinCot.FINDFIRST THEN BEGIN

        prLinCot.RESET;
        prLinCot.INIT;

        prLinCot."Id Cotizacion" := prTransfer."Id Cotizacion";

        prLinCot.Tipo            := prLinCot.Tipo::Transfer;
        prLinCot."Id Producto"   := prTransfer.Id;
        prLinCot."Id Habitacion" := 0;
        prLinCot.Hotel           := '';
        prLinCot.Tipo            := prLinCot.Tipo::Transfer;
        prLinCot."Fecha desde"   := prTransfer."Fecha inicio";
        prLinCot."Fecha hasta"   := prTransfer."Fecha fin";

        prLinCot.INSERT(TRUE);

      END;

      prLinCot."N§ Linea" := pwNumLinea;
      prLinCot.MODIFY(TRUE);
    END;

    PROCEDURE ActualizarLineaCotizacionExc@1103355064(VAR prCab@1103355003 : Record 7009871;VAR prExcur@1103355000 : Record 7009883;VAR prLinCot@1103355001 : Record 7009872;pwNumLinea@1103355004 : Integer);
    BEGIN
      // ActualizarLineaCotizacionExc

      prLinCot.RESET;
      prLinCot.SETCURRENTKEY("Id Cotizacion", "Id Producto", Hotel);
      prLinCot.SETRANGE ("Id Cotizacion"   , prExcur."Id Cotizacion");
      prLinCot.SETRANGE ("Id Producto"     , prExcur.Id);
      prLinCot.SETRANGE (Tipo              , prLinCot.Tipo::Excursion);

      IF NOT prLinCot.FINDFIRST THEN BEGIN

        prLinCot.RESET;
        prLinCot.INIT;

        prLinCot."Id Cotizacion" := prExcur."Id Cotizacion";

        prLinCot.Tipo            := prLinCot.Tipo::Excursion;
        prLinCot."Id Producto"   := prExcur.Id;
        prLinCot."Id Habitacion" := 0;
        prLinCot.Hotel           := prExcur.Hotel;
        prLinCot."Fecha desde"   := prExcur.Fecha;
        prLinCot."Fecha hasta"   := prExcur.Fecha;

        prLinCot.INSERT(TRUE);

      END;

      prLinCot."N§ Linea" := pwNumLinea;
      prLinCot.MODIFY(TRUE);
    END;

    PROCEDURE GenerarLineasCotizacion@1103355022(VAR prCab@1103355000 : Record 7009871);
    VAR
      lrLinsCot@1103355003 : Record 7009872;
      lrHoteles@1103355002 : Record 7009873;
      lrHabs@1103355001 : Record 7009873;
      lwCont@1103355005 : Integer;
      lrConvHabTMP@1103355004 : TEMPORARY Record 7009731;
      lrTransfers@1103355006 : Record 7009881;
      lrExcursiones@1103355007 : Record 7009883;
    BEGIN
      // GenerarLineasCotizacion
      //:

      // Generamos Las lineas para hoteles.

      lwCont := 0;

      lrHoteles.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHoteles.SETRANGE ("Id cotizacion", prCab.Id);
      lrHoteles.SETRANGE ("Tipo uso"     , lrHoteles."Tipo uso"::Seleccion);
      lrHoteles.SETRANGE ("Tipo linea"   , lrHoteles."Tipo linea"::Hotel);

      IF lrHoteles.FINDSET THEN BEGIN
        REPEAT

          // Hacemos una l¡nea por Tipo de habitaci¢n.

          lrHabs.RESET;
          lrHabs.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
          lrHabs.SETRANGE ("Id cotizacion", prCab.Id);
          lrHabs.SETRANGE ("Tipo uso"     , lrHabs."Tipo uso"::Seleccion);
          lrHabs.SETRANGE ("Tipo linea"   , lrHabs."Tipo linea"::Habitacion);
          lrHabs.SETRANGE ("Id Hotel"     , lrHoteles."Id Hotel");

          IF lrHabs.ISEMPTY THEN BEGIN
            GenerarTempConvHab(lrHoteles, lrConvHabTMP);
            BuscarHabitaciones(prCab, lrHoteles, lrConvHabTMP);
          END;

          IF lrHabs.FINDSET THEN BEGIN
            lwCont += 1;
            REPEAT

              ActualizarLineaCotizacionHotel(prCab, lrHoteles, lrHabs, lrLinsCot, lwCont);
              GenerarPersonasCalculo(prCab, lrLinsCot);

            UNTIL lrHabs.NEXT = 0;
          END;

        UNTIL lrHoteles.NEXT = 0;
      END;

      // Generamos las lineas para Transfers.

      lwCont := 0;

      lrTransfers.SETCURRENTKEY("Id Cotizacion");
      lrTransfers.SETRANGE ("Id Cotizacion", prCab.Id);

      IF lrTransfers.FINDSET THEN BEGIN
        REPEAT

          lwCont += 1;
          ActualizarLineaCotizacionTrans(prCab, lrTransfers, lrLinsCot, lwCont);

        UNTIL lrTransfers.NEXT = 0;
      END;

      // Generamos las l¡neas para Excursiones.
      lrExcursiones.SETCURRENTKEY("Id Cotizacion");
      lrExcursiones.SETRANGE ("Id Cotizacion");

      lwCont := 0;
      IF lrExcursiones.FINDSET THEN BEGIN
        REPEAT

          lwCont += 1;
          ActualizarLineaCotizacionExc(prCab, lrExcursiones, lrLinsCot, lwCont);

        UNTIL lrExcursiones.NEXT = 0;
      END;
    END;

    PROCEDURE CalcularPorcentajeIngreso@1103355011(VAR prCab@1103355001 : Record 7009735;VAR prPreV@1103355002 : TEMPORARY Record 7009732;VAR prPersona@1103355004 : TEMPORARY Record 7009873;pwFiltroFechas@1103355003 : Text[1024]) rvImporte : Decimal;
    VAR
      lrLinCal@1103355000 : Record 7009736;
      lwFiltro@1103355006 : Text[1024];
    BEGIN
      // CalcularPorcentajeIngreso

      rvImporte := 0;

      lwFiltro := '';

      IF prPreV."Aplica a Habitacion" THEN
        lwFiltro := lwFiltro + Text002 + '|' + Text003 + '|';

      IF prPreV."Aplica a Regimen" THEN
        lwFiltro := lwFiltro + Text004 + '|' + Text005 + '|';

      IF prPreV."Aplica a Suplementos" THEN
        lwFiltro := lwFiltro + Text006 + '|' + Text007 + '|';

      lwFiltro := DELCHR(lwFiltro, '>', '|');

      IF lwFiltro <> '' THEN BEGIN
        lrLinCal.RESET;
        lrLinCal.SETCURRENTKEY(Usuario, "Concepto Coste", Fecha, "Coste/Ingreso", Delegacion, "N§ Reserva");
        lrLinCal.SETRANGE (Usuario         , prCab.Usuario);
        lrLinCal.SETFILTER("Concepto Coste", lwFiltro);
        lrLinCal.SETFILTER(Fecha           , pwFiltroFechas);
        lrLinCal.SETRANGE ("Coste/Ingreso" , lrLinCal."Coste/Ingreso"::Ingreso);
        lrLinCal.SETRANGE ("N§ Reserva"    , prPersona."N§ Persona");

        lrLinCal.CALCSUMS (Importe);
        rvImporte += lrLinCal.Importe;
      END;


      rvImporte := ROUND((rvImporte * prPreV.Importe)/ 100);
      EXIT(rvImporte);
    END;

    PROCEDURE CalcularPorcentajeCoste@1103355033(VAR prCab@1103355001 : Record 7009735;VAR prPreC@1103355002 : TEMPORARY Record 7009738;VAR prPersona@1103355004 : TEMPORARY Record 7009873;pwFiltroFechas@1103355003 : Text[1024]) rvImporte : Decimal;
    VAR
      lrLinCal@1103355000 : Record 7009736;
      lwFiltro@1103355006 : Text[1024];
    BEGIN
      // CalcularPorcentajeCoste

      rvImporte := 0;

      lwFiltro := '';

      IF prPreC."Aplica a Habitacion" THEN
        lwFiltro := lwFiltro + Text016 + '|' + Text011 + '|';

      IF prPreC."Aplica a Regimen" THEN
        lwFiltro := lwFiltro + Text017 + '|' + Text012 + '|';

      IF prPreC."Aplica a Suplementos" THEN
        lwFiltro := lwFiltro + Text018 + '|' + Text013 + '|';

      IF prPreC."Aplica a Extras" THEN
        lwFiltro := lwFiltro + Text019 + '|' + Text020 + '|' + Text014 + '|';

      lwFiltro := DELCHR(lwFiltro, '>', '|');

      IF lwFiltro <> '' THEN BEGIN
        lrLinCal.RESET;
        lrLinCal.SETCURRENTKEY(Usuario, "Concepto Coste", Fecha, "Coste/Ingreso", Delegacion, "N§ Reserva");
        lrLinCal.SETRANGE (Usuario         , prCab.Usuario);
        lrLinCal.SETFILTER("Concepto Coste", lwFiltro);
        lrLinCal.SETFILTER(Fecha           , pwFiltroFechas);
        lrLinCal.SETRANGE ("Coste/Ingreso" , lrLinCal."Coste/Ingreso"::Coste);
        lrLinCal.SETRANGE ("N§ Reserva"    , prPersona."N§ Persona");

        lrLinCal.CALCSUMS (Importe);
        rvImporte += lrLinCal.Importe;
      END;


      rvImporte := ROUND((rvImporte * prPreC.Importe)/ 100);
      EXIT(rvImporte);
    END;

    PROCEDURE EliminarOtrosIngresos@1103355013(VAR prCabCal@1103355000 : TEMPORARY Record 7009735;VAR prPreV@1103355001 : TEMPORARY Record 7009732;VAR prPersona@1103355002 : TEMPORARY Record 7009873;pwDia@1103355003 : Date);
    VAR
      lwFiltro@1103355004 : Text[1024];
      lrLinCal@1103355005 : Record 7009736;
      lrLinCal2@1103355006 : Record 7009736;
      lrConV@1103355007 : Record 7009727;
    BEGIN
      // EliminarOtrosIngresos

      IF NOT lrConV.GET(prPreV.Delegacion, prPreV."N§ Contrato") THEN
        ERROR(Text009, prPreV.Delegacion, prPreV."N§ Contrato");

      lwFiltro := '';
      // Borrar lineas regularizaci¢n.
      IF pwDia = 0D THEN BEGIN

        IF prPreV."Anula a Habitacion" THEN
          lwFiltro := lwFiltro + Text003 + '|';

        IF prPreV."Anula a Regimen" THEN
          lwFiltro := lwFiltro + Text005 + '|';

        IF prPreV."Anula a Suplementos" THEN
          lwFiltro := lwFiltro + Text007 + '|';

        IF lwFiltro <> '' THEN BEGIN
          lrLinCal.RESET;
          lrLinCal.SETCURRENTKEY(Usuario, "Concepto Coste", Fecha,
                                 "Coste/Ingreso", Delegacion, "N§ Reserva");
          lrLinCal.SETRANGE (Usuario         , prCabCal.Usuario);
          lrLinCal.SETRANGE (Delegacion      , prPreV.Delegacion);
          lrLinCal.SETRANGE ("N§ Reserva"    , prPersona."N§ Persona");
          lrLinCal.SETRANGE ("Coste/Ingreso" , lrLinCal."Coste/Ingreso"::Ingreso);
          lrLinCal.SETFILTER("Concepto Coste", lwFiltro);

          lrLinCal.DELETEALL;
        END;

        IF prPreV."Anula a Ofertas" THEN BEGIN
          lrLinCal.RESET;
          lrLinCal.SETCURRENTKEY(Usuario, "Concepto Coste", Fecha,
                                 "Coste/Ingreso", Delegacion, "N§ Reserva");
          lrLinCal.SETRANGE (Usuario         , prCabCal.Usuario);
          lrLinCal.SETRANGE (Delegacion      , prPreV.Delegacion);
          lrLinCal.SETRANGE ("N§ Reserva"    , prPersona."N§ Persona");
          lrLinCal.SETRANGE ("Coste/Ingreso" , lrLinCal."Coste/Ingreso"::Ingreso);
          lrLinCal.SETFILTER("Concepto Coste", Text008);
          lrLinCal.SETFILTER(Codigo          , '<>%1', prPreV.Codigo);
          lrLinCal.SETRANGE ("N§ Linea"      , 2000000, 2999999);
          lrLinCal.DELETEALL;
        END;

      END;


      lrLinCal.RESET;
      lrLinCal.SETCURRENTKEY(Usuario, "Concepto Coste", Fecha,
                             "Coste/Ingreso", Delegacion, "N§ Reserva");
      lrLinCal.SETRANGE (Usuario         , prCabCal.Usuario);
      lrLinCal.SETRANGE (Delegacion      , prPreV.Delegacion);
      lrLinCal.SETRANGE ("N§ Reserva"    , prPersona."N§ Persona");
      lrLinCal.SETRANGE ("Coste/Ingreso" , lrLinCal."Coste/Ingreso"::Ingreso);


      IF prPreV."Anula a Habitacion" THEN BEGIN
        lrLinCal.SETRANGE ("Concepto Coste", Text002);
        IF pwDia <> 0D THEN
          lrLinCal.SETRANGE(Fecha, pwDia)
        ELSE
          lrLinCal.SETFILTER(Fecha           , '>=%1', lrConV."Fecha inicio contrato");
        IF lrLinCal.FIND('-') THEN BEGIN
          REPEAT
            lrLinCal2                  := lrLinCal;
            lrLinCal2."N§ Linea"       := lrLinCal2."N§ Linea" + 2000000;
            lrLinCal2."Concepto Coste" := Text003;
            lrLinCal2.Importe          := ROUND(lrLinCal2.Importe * (-1));
            lrLinCal2.Precio           := ROUND(lrLinCal2.Precio * (-1));
            IF NOT lrLinCal2.INSERT THEN
              lrLinCal2.MODIFY;
          UNTIL lrLinCal.NEXT = 0;
        END;
      END;

      IF prPreV."Anula a Regimen" THEN BEGIN
        lrLinCal.SETRANGE ("Concepto Coste", Text004);
        IF pwDia <> 0D THEN
          lrLinCal.SETRANGE(Fecha, pwDia)
        ELSE
          lrLinCal.SETFILTER(Fecha           , '>=%1', lrConV."Fecha inicio contrato");
        IF lrLinCal.FIND('-') THEN BEGIN
          REPEAT
            lrLinCal2                  := lrLinCal;
            lrLinCal2."N§ Linea"       := lrLinCal2."N§ Linea" + 2000000;
            lrLinCal2."Concepto Coste" := Text005;
            lrLinCal2.Importe          := ROUND(lrLinCal2.Importe * (-1));
            lrLinCal2.Precio           := ROUND(lrLinCal2.Precio * (-1));
            IF NOT lrLinCal2.INSERT THEN
              lrLinCal2.MODIFY;
          UNTIL lrLinCal.NEXT = 0;
        END;
      END;

      IF prPreV."Anula a Suplementos" THEN BEGIN
        lrLinCal.SETRANGE ("Concepto Coste", Text006);
        IF pwDia <> 0D THEN
          lrLinCal.SETRANGE(Fecha, pwDia)
        ELSE
          lrLinCal.SETFILTER(Fecha           , '>=%1', lrConV."Fecha inicio contrato");
        IF lrLinCal.FIND('-') THEN BEGIN
          REPEAT
            lrLinCal2                  := lrLinCal;

            lrLinCal2."N§ Linea"       := lrLinCal2."N§ Linea" + 2000000;
            lrLinCal2."Concepto Coste" := Text007;
            lrLinCal2.Importe          := ROUND(lrLinCal2.Importe * (-1));
            lrLinCal2.Precio           := ROUND(lrLinCal2.Precio * (-1));
            IF NOT lrLinCal2.INSERT THEN
              lrLinCal2.MODIFY;
          UNTIL lrLinCal.NEXT = 0;
        END;
      END;

      IF prPreV."Anula a Ofertas" THEN BEGIN
        lrLinCal.SETRANGE ("Concepto Coste", Text008);
        IF pwDia <> 0D THEN
          lrLinCal.SETRANGE(Fecha, pwDia)
        ELSE
          lrLinCal.SETFILTER(Fecha           , '>=%1', lrConV."Fecha inicio contrato");
        lrLinCal.SETFILTER("N§ Linea"      , '<=%1', 2000000);
        lrLinCal.SETFILTER(Codigo          , '<>%1', prPreV.Codigo);
        IF lrLinCal.FIND('-') THEN BEGIN
          REPEAT
            lrLinCal2                  := lrLinCal;

            lrLinCal2."N§ Linea"       := lrLinCal2."N§ Linea" + 2000000;
            lrLinCal2."Concepto Coste" := Text008;
            lrLinCal2.Importe          := ROUND(lrLinCal2.Importe * (-1));
            lrLinCal2.Precio           := ROUND(lrLinCal2.Precio * (-1));

            IF NOT lrLinCal2.INSERT THEN
              lrLinCal2.MODIFY;
          UNTIL lrLinCal.NEXT = 0;
        END;
      END;

      InsertaErrorCot(prCabCal.Usuario, Text010);
    END;

    PROCEDURE EliminarOtrosCostes@1103355034(VAR prCabCal@1103355000 : TEMPORARY Record 7009735;VAR prPreC@1103355001 : TEMPORARY Record 7009738;VAR prPersona@1103355002 : TEMPORARY Record 7009873;pwDia@1103355003 : Date);
    VAR
      lwFiltro@1103355004 : Text[1024];
      lrLinCal@1103355005 : Record 7009736;
      lrLinCal2@1103355006 : Record 7009736;
      lrConC@1103355007 : Record 7009723;
    BEGIN
      // EliminarOtrosCostes

      IF NOT lrConC.GET(prPreC.Delegacion, prPreC."N§ Contrato") THEN
        ERROR(Text009, prPreC.Delegacion, prPreC."N§ Contrato");

      lwFiltro := '';
      // Borrar lineas regularizaci¢n.
      IF pwDia = 0D THEN BEGIN

        IF prPreC."Anula a Habitacion" THEN
          lwFiltro := lwFiltro + Text011 + '|';

        IF prPreC."Anula a Regimen" THEN
          lwFiltro := lwFiltro + Text012 + '|';

        IF prPreC."Anula a Suplementos" THEN
          lwFiltro := lwFiltro + Text013 + '|';

        IF prPreC."Anula a Extras" THEN
          lwFiltro := lwFiltro + Text014 + '|';

        IF lwFiltro <> '' THEN BEGIN
          lrLinCal.RESET;
          lrLinCal.SETCURRENTKEY(Usuario, "Concepto Coste", Fecha,
                                 "Coste/Ingreso", Delegacion, "N§ Reserva");
          lrLinCal.SETRANGE (Usuario         , prCabCal.Usuario);
          lrLinCal.SETRANGE (Delegacion      , prPreC.Delegacion);
          lrLinCal.SETRANGE ("N§ Reserva"    , prPersona."N§ Persona");
          lrLinCal.SETRANGE ("Coste/Ingreso" , lrLinCal."Coste/Ingreso"::Coste);
          lrLinCal.SETFILTER("Concepto Coste", lwFiltro);

          lrLinCal.DELETEALL;
        END;

        IF prPreC."Anula a Ofertas" THEN BEGIN
          lrLinCal.RESET;
          lrLinCal.SETCURRENTKEY(Usuario, "Concepto Coste", Fecha,
                                 "Coste/Ingreso", Delegacion, "N§ Reserva");
          lrLinCal.SETRANGE (Usuario         , prCabCal.Usuario);
          lrLinCal.SETRANGE (Delegacion      , prPreC.Delegacion);
          lrLinCal.SETRANGE ("N§ Reserva"    , prPersona."N§ Persona");
          lrLinCal.SETRANGE ("Coste/Ingreso" , lrLinCal."Coste/Ingreso"::Coste);
          lrLinCal.SETFILTER("Concepto Coste", Text015);
          lrLinCal.SETFILTER(Codigo          , '<>%1', prPreC.Codigo);
          lrLinCal.SETRANGE ("N§ Linea"      , 2000000, 2999999);
          lrLinCal.DELETEALL;
        END;

      END;


      lrLinCal.RESET;
      lrLinCal.SETCURRENTKEY(Usuario, "Concepto Coste", Fecha,
                             "Coste/Ingreso", Delegacion, "N§ Reserva");
      lrLinCal.SETRANGE (Usuario         , prCabCal.Usuario);
      lrLinCal.SETRANGE (Delegacion      , prPreC.Delegacion);
      lrLinCal.SETRANGE ("N§ Reserva"    , prPersona."N§ Persona");
      lrLinCal.SETRANGE ("Coste/Ingreso" , lrLinCal."Coste/Ingreso"::Coste);


      IF prPreC."Anula a Habitacion" THEN BEGIN
        lrLinCal.SETRANGE ("Concepto Coste", Text016);
        IF pwDia <> 0D THEN
          lrLinCal.SETRANGE(Fecha, pwDia)
        ELSE
          lrLinCal.SETFILTER(Fecha           , '>=%1', lrConC."Fecha inicio contrato");
        IF lrLinCal.FIND('-') THEN BEGIN
          REPEAT
            lrLinCal2                  := lrLinCal;
            lrLinCal2."N§ Linea"       := lrLinCal2."N§ Linea" + 2000000;
            lrLinCal2."Concepto Coste" := Text011;
            lrLinCal2.Importe          := ROUND(lrLinCal2.Importe * (-1));
            lrLinCal2.Precio           := ROUND(lrLinCal2.Precio * (-1));
            IF NOT lrLinCal2.INSERT THEN
              lrLinCal2.MODIFY;
          UNTIL lrLinCal.NEXT = 0;
        END;
      END;

      IF prPreC."Anula a Regimen" THEN BEGIN
        lrLinCal.SETRANGE ("Concepto Coste", Text017);
        IF pwDia <> 0D THEN
          lrLinCal.SETRANGE(Fecha, pwDia)
        ELSE
          lrLinCal.SETFILTER(Fecha           , '>=%1', lrConC."Fecha inicio contrato");
        IF lrLinCal.FIND('-') THEN BEGIN
          REPEAT
            lrLinCal2                  := lrLinCal;
            lrLinCal2."N§ Linea"       := lrLinCal2."N§ Linea" + 2000000;
            lrLinCal2."Concepto Coste" := Text012;
            lrLinCal2.Importe          := ROUND(lrLinCal2.Importe * (-1));
            lrLinCal2.Precio           := ROUND(lrLinCal2.Precio * (-1));
            IF NOT lrLinCal2.INSERT THEN
              lrLinCal2.MODIFY;
          UNTIL lrLinCal.NEXT = 0;
        END;
      END;


      IF prPreC."Anula a Suplementos" THEN BEGIN
        lrLinCal.SETRANGE ("Concepto Coste", Text018);
        IF pwDia <> 0D THEN
          lrLinCal.SETRANGE(Fecha, pwDia)
        ELSE
          lrLinCal.SETFILTER(Fecha           , '>=%1', lrConC."Fecha inicio contrato");
        IF lrLinCal.FIND('-') THEN BEGIN
          REPEAT
            lrLinCal2                  := lrLinCal;

            lrLinCal2."N§ Linea"       := lrLinCal2."N§ Linea" + 2000000;
            lrLinCal2."Concepto Coste" := Text013;
            lrLinCal2.Importe          := ROUND(lrLinCal2.Importe * (-1));
            lrLinCal2.Precio           := ROUND(lrLinCal2.Precio * (-1));
            IF NOT lrLinCal2.INSERT THEN
              lrLinCal2.MODIFY;
          UNTIL lrLinCal.NEXT = 0;
        END;
      END;

      IF prPreC."Anula a Extras" THEN BEGIN
        lrLinCal.SETFILTER("Concepto Coste", '%1|%2', Text019, Text020);
        IF pwDia <> 0D THEN
          lrLinCal.SETRANGE(Fecha, pwDia)
        ELSE
          lrLinCal.SETFILTER(Fecha           , '>=%1', lrConC."Fecha inicio contrato");
        IF lrLinCal.FIND('-') THEN BEGIN
          REPEAT
            lrLinCal2                  := lrLinCal;

            lrLinCal2."N§ Linea"       := lrLinCal2."N§ Linea" + 2000000;
            lrLinCal2."Concepto Coste" := Text014;
            lrLinCal2.Importe          := ROUND(lrLinCal2.Importe * (-1));
            lrLinCal2.Precio           := ROUND(lrLinCal2.Precio * (-1));
            IF NOT lrLinCal2.INSERT THEN
              lrLinCal2.MODIFY;
          UNTIL lrLinCal.NEXT = 0;
        END;
      END;


      IF prPreC."Anula a Ofertas" THEN BEGIN
        lrLinCal.SETRANGE ("Concepto Coste", Text015);
        IF pwDia <> 0D THEN
          lrLinCal.SETRANGE(Fecha, pwDia)
        ELSE
          lrLinCal.SETFILTER(Fecha           , '>=%1', lrConC."Fecha inicio contrato");
        lrLinCal.SETFILTER("N§ Linea"      , '<=%1', 2000000);
        lrLinCal.SETFILTER(Codigo          , '<>%1', prPreC.Codigo);
        IF lrLinCal.FIND('-') THEN BEGIN
          REPEAT
            lrLinCal2                  := lrLinCal;

            lrLinCal2."N§ Linea"       := lrLinCal2."N§ Linea" + 2000000;
            lrLinCal2."Concepto Coste" := Text015;
            lrLinCal2.Importe          := ROUND(lrLinCal2.Importe * (-1));
            lrLinCal2.Precio           := ROUND(lrLinCal2.Precio * (-1));

            IF NOT lrLinCal2.INSERT THEN
              lrLinCal2.MODIFY;
          UNTIL lrLinCal.NEXT = 0;
        END;
      END;

      InsertaErrorCot(prCabCal.Usuario, Text010);
    END;

    PROCEDURE GetNumeracionAdulto@1103355016() : Integer;
    BEGIN
      // GetNumeracionAdulto

      EXIT(1000);
    END;

    PROCEDURE GetNumeracionNi¤o@1103355017() : Integer;
    BEGIN
      // GetNumeracionNi¤o

      EXIT(2000);
    END;

    PROCEDURE GetNumeracionInfant@1103355019() : Integer;
    BEGIN
      // GetNumeracionInfant

      EXIT(3000);
    END;

    PROCEDURE GetFiltroAdulto@1103355027() : Text[30];
    BEGIN
      // GetFiltroAdulto

      EXIT(FORMAT(GetNumeracionAdulto) + '..' + FORMAT(GetNumeracionAdulto + 999));
    END;

    PROCEDURE GetFiltroNi¤o@1103355028() : Text[30];
    BEGIN
      // GetFiltroNi¤o

      EXIT(FORMAT(GetNumeracionNi¤o) + '..' + FORMAT(GetNumeracionNi¤o + 999));
    END;

    PROCEDURE GetFiltroInfant@1103355029() : Text[30];
    BEGIN
      // GetFiltroInfant

      EXIT(FORMAT(GetNumeracionInfant) + '..' + FORMAT(GetNumeracionInfant + 999));
    END;

    PROCEDURE GetTipoPersona@1103355012(pwNum@1103355000 : Integer) : Code[10];
    VAR
      lrParPer@1103355001 : Record 7009701;
    BEGIN
      // GetTipoPersona

      lrParPer.FINDFIRST;

      IF (pwNum >= GetNumeracionAdulto) AND (pwNum <= GetNumeracionAdulto + 999) THEN
        EXIT(lrParPer."Codigo Adulto");

      IF (pwNum >= GetNumeracionNi¤o) AND (pwNum <= GetNumeracionNi¤o + 999) THEN
        EXIT(lrParPer."Codigo Ni¤o");

      IF (pwNum >= GetNumeracionInfant) AND (pwNum <= GetNumeracionInfant + 999) THEN
        EXIT(lrParPer."Codigo Infant");
    END;

    PROCEDURE CopiarListaPersonas@1103355015(VAR prPersonas@1103355000 : TEMPORARY Record 7009873;VAR prCopia@1103355001 : TEMPORARY Record 7009873);
    BEGIN
      // CopiarListaPersonas

      prCopia.RESET;
      prCopia.DELETEALL;

      prPersonas.RESET;

      IF prPersonas.FINDSET THEN BEGIN
        REPEAT
         prCopia := prPersonas;
         prCopia.INSERT;
        UNTIL prPersonas.NEXT = 0;
      END;
    END;

    PROCEDURE GenerarPersonas@1103355025(VAR prCab@1103355000 : Record 7009871;VAR prCabAnt@1103355001 : Record 7009871);
    VAR
      lrParPer@1103355002 : Record 7009701;
    BEGIN
      // GenerarPersonas
      //: @prCab    : Cabecera Actual (Rec)
      //: @prCabAnt : Cabecera Actual (xRec)

      lrParPer.FINDFIRST;

      GenerarPersonasxTipo(prCab, prCabAnt, lrParPer, lrParPer."Codigo Adulto");
      GenerarPersonasxTipo(prCab, prCabAnt, lrParPer, lrParPer."Codigo Ni¤o");
      GenerarPersonasxTipo(prCab, prCabAnt, lrParPer, lrParPer."Codigo Infant");
    END;

    LOCAL PROCEDURE GenerarPersonasxTipo@1103355024(VAR prCab@1103355006 : Record 7009871;VAR prCabAnt@1103355001 : Record 7009871;VAR prParPer@1103355004 : Record 7009701;pwTipoPersona@1103355000 : Code[10]);
    VAR
      lrHoteles@1103355011 : Record 7009873;
      lrPersonas@1103355003 : Record 7009873;
      lrPerxHotel@1103355012 : Record 7009873;
      lrDistrib@1103355013 : Record 7009875;
      lwDif@1103355002 : Integer;
      lwAnt@1103355007 : Integer;
      lwNuevo@1103355008 : Integer;
      lwFiltroDel@1103355005 : Text[30];
      lwNum@1103355009 : Integer;
      lwIndex@1103355010 : Integer;
    BEGIN
      // GenerarPersonasxTipo

      CASE pwTipoPersona OF

        prParPer."Codigo Adulto" : BEGIN
          lwAnt   := prCabAnt.Adultos;
          lwNuevo := prCab.Adultos;
          lwDif   := prCab.Adultos - prCabAnt.Adultos;
          lwNum   := GetNumeracionAdulto;
          IF lwDif < 0 THEN
            lwFiltroDel := STRSUBSTNO('%1..%2', lwNum + prCab.Adultos + 1, lwNum + prCabAnt.Adultos);

        END;

        prParPer."Codigo Ni¤o"   : BEGIN
          lwAnt   := prCabAnt.Ni¤os;
          lwNuevo := prCab.Ni¤os;
          lwDif   := prCab.Ni¤os - prCabAnt.Ni¤os;
          lwNum   := GetNumeracionNi¤o;
          IF lwDif < 0 THEN
            lwFiltroDel := STRSUBSTNO('%1..%2', lwNum + prCab.Ni¤os + 1, lwNum + prCabAnt.Ni¤os);

        END;

        prParPer."Codigo Infant" : BEGIN
          lwAnt   := prCabAnt.Infants;
          lwNuevo := prCab.Infants;
          lwDif   := prCab.Infants - prCabAnt.Infants;
          lwNum   := GetNumeracionInfant;
          IF lwDif < 0 THEN
            lwFiltroDel := STRSUBSTNO('%1..%2', lwNum + prCab.Infants + 1, lwNum + prCabAnt.Infants);
        END;

      END;

      IF lwDif < 0 THEN BEGIN
        lrPersonas.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
        lrPersonas.SETRANGE ("Id cotizacion", prCab.Id);
        lrPersonas.SETRANGE ("Tipo uso"     , lrPersonas."Tipo uso"::Seleccion);
        lrPersonas.SETRANGE ("Tipo linea"   , lrPersonas."Tipo linea"::Persona);
        lrPersonas.SETFILTER("N§ Persona"   , lwFiltroDel);

        // Elimino las distribuciones sobrantes.
        IF lrPersonas.FINDSET THEN BEGIN
          REPEAT

            lrDistrib.SETCURRENTKEY("Id persona", "Id habitacion");
            lrDistrib.SETRANGE("Id persona", lrPersonas.Id);
            IF lrDistrib.FINDSET(TRUE) THEN BEGIN
              REPEAT
                IF lrDistrib."Id habitacion" = 0 THEN BEGIN
                  lrDistrib.SacarDeTransfer;
                END;
              UNTIL lrDistrib.NEXT = 0;
            END;
            lrDistrib.DELETEALL;

          UNTIL lrPersonas.NEXT = 0;
        END;

        lrPersonas.DELETEALL;
      END;

      IF lwDif > 0 THEN BEGIN

        FOR lwIndex := lwAnt + 1 TO lwNuevo DO BEGIN

          lrPersonas.INIT;
          lrPersonas."Id cotizacion" := prCab.Id;
          lrPersonas."Tipo linea"    := lrPersonas."Tipo linea"::Persona;
          lrPersonas."N§ Persona"    := lwNum + lwIndex;
          lrPersonas.Edad            := 0;
          lrPersonas.Posicion        := 0;
          lrPersonas."Tipo uso"      := lrPersonas."Tipo uso"::Seleccion;
          lrPersonas.Nombre          := pwTipoPersona + FORMAT(lwIndex);
          lrPersonas.INSERT(TRUE);

        END;
      END;
    END;

    PROCEDURE NumPersonas@1103355023(VAR prHotel@1103355000 : Record 7009873) rvReturn : Text[80];
    VAR
      lrHabs@1103355001 : Record 7009873;
      lrDistribs@1103355007 : Record 7009875;
      lwNumPers@1103355002 : Integer;
      lwCountPers@1103355005 : Integer;
      lrParPer@1103355003 : Record 7009701;
      lwTipo@1103355004 : Code[10];
      lwLinea@1103355006 : Text[1024];
    BEGIN
      // NumPersonas

      IF prHotel.Id = 0 THEN
        EXIT('');

      lrParPer.FINDFIRST;

      // Recuperamos las personas seleccionadas para la l¡nea de hotel.
      lrDistribs.SETCURRENTKEY("Id Hotel", "Id habitacion", "Id persona");
      lrDistribs.SETRANGE("Id Hotel"     , prHotel.Id);
      lrDistribs.SETRANGE("Id habitacion", 0);
      lrDistribs.SETRANGE(Seleccion      , TRUE);

      lwCountPers := lrDistribs.COUNT;

      IF lrDistribs.FINDSET THEN BEGIN
        REPEAT

          lrDistribs.CALCFIELDS("N§ Persona");

          lwTipo := GetTipoPersona(lrDistribs."N§ Persona");

          CASE lwTipo OF
            lrParPer."Codigo Adulto": lwNumPers := lrDistribs."N§ Persona" - GetNumeracionAdulto;
            lrParPer."Codigo Ni¤o"  : lwNumPers := lrDistribs."N§ Persona" - GetNumeracionNi¤o;
            lrParPer."Codigo Infant": lwNumPers := lrDistribs."N§ Persona" - GetNumeracionInfant;
          END;

          lwLinea := COPYSTR((lwLinea + COPYSTR(lwTipo, 1, 1) + FORMAT(lwNumPers) + ', '), 1, MAXSTRLEN(lwLinea));

        UNTIL lrDistribs.NEXT = 0;
      END;

      lwLinea := DELCHR(lwLinea, '>', ', ');

      EXIT(COPYSTR( '(' + FORMAT(lwCountPers) + ') ' + lwLinea, 1, MAXSTRLEN(rvReturn)));
    END;

    PROCEDURE LookUpPersonas@1103355021(VAR prHotel@1103355000 : Record 7009873);
    VAR
      lrDistribs@1103355001 : Record 7009875;
      lfDistribs@1103355002 : Form 7010009;
    BEGIN
      // LookUpPersonas

      // JPT 31/08/09 No ense¤amos nada si a£n no tiene Id Hotel
      IF prHotel.Id = 0 THEN
        EXIT;

      lrDistribs.SETCURRENTKEY("Id Hotel", "Id habitacion", "Id persona");
      lrDistribs.SETRANGE("Id Hotel"     , prHotel.Id);
      lrDistribs.SETRANGE("Id habitacion", 0);

      lfDistribs.SETTABLEVIEW(lrDistribs);
      lfDistribs.SetModo(lfDistribs.ModoSeleccion);
      lfDistribs.RUNMODAL;
    END;

    PROCEDURE MostrarHabitaciones@1103355020(VAR prHotel@1103355000 : Record 7009873) rvText : Text[80];
    VAR
      lrHabs@1103355001 : Record 7009873;
    BEGIN
      // MostrarHabitaciones

      lrHabs.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHabs.SETRANGE ("Id cotizacion", prHotel."Id cotizacion");
      lrHabs.SETRANGE ("Tipo uso"     , lrHabs."Tipo uso"::Seleccion);
      lrHabs.SETRANGE ("Tipo linea"   , lrHabs."Tipo linea"::Habitacion);
      lrHabs.SETRANGE ("Id Hotel"     , prHotel."Id Hotel");

      IF NOT lrHabs.FINDSET THEN
        EXIT('');

      REPEAT

        rvText := COPYSTR(rvText + lrHabs.Habitacion + ' x ' + FORMAT(lrHabs."N§ Habitaciones") + ',',
                          1, MAXSTRLEN(rvText));
      UNTIL lrHabs.NEXT = 0;

      EXIT(DELCHR(rvText, '>', ','));
    END;

    PROCEDURE LookUpHabitaciones@1103355018(VAR prHotel@1103355001 : Record 7009873);
    VAR
      lrHabs@1103355000 : Record 7009873;
      lfHabs@1103355002 : Form 7010045;
    BEGIN
      // LookUpHabitaciones

      // Actualizo los contratos por si no est n actualizados.
      BuscarContratosxHotel(prHotel);
      prHotel.MODIFY;
      COMMIT;

      lrHabs.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHabs.SETRANGE ("Id cotizacion", prHotel."Id cotizacion");
      lrHabs.SETRANGE ("Tipo uso"     , lrHabs."Tipo uso"::Seleccion);
      lrHabs.SETRANGE ("Tipo linea"   , lrHabs."Tipo linea"::Habitacion);
      lrHabs.SETRANGE (Hotel          , prHotel.Hotel);
      lrHabs.SETRANGE ("Id Hotel"     , prHotel."Id Hotel");

      lfHabs.SETTABLEVIEW(lrHabs);
      lfHabs.RUNMODAL;
    END;

    PROCEDURE NumExtras@1103355032(VAR prHotel@1103355000 : Record 7009873) : Integer;
    VAR
      lrExtras@1103355001 : Record 7009873;
    BEGIN
      // NumExtras

      lrExtras.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrExtras.SETRANGE ("Id cotizacion", prHotel."Id cotizacion");
      lrExtras.SETRANGE ("Tipo uso"     , lrExtras."Tipo uso"::Seleccion);
      lrExtras.SETRANGE ("Tipo linea"   , lrExtras."Tipo linea"::Extra);
      lrExtras.SETRANGE (Hotel          , prHotel.Hotel);
      lrExtras.SETRANGE ("Id Hotel"     , prHotel."Id Hotel");

      EXIT(lrExtras.COUNT);
    END;

    PROCEDURE LookUpExtras@1103355031(VAR prHotel@1103355000 : Record 7009873);
    VAR
      lrExtras@1103355001 : Record 7009873;
      lfExtras@1103355002 : Form 7010046;
    BEGIN
      // LookUpExtras

      lrExtras.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrExtras.SETRANGE ("Id cotizacion", prHotel."Id cotizacion");
      lrExtras.SETRANGE ("Tipo uso"     , lrExtras."Tipo uso"::Seleccion);
      lrExtras.SETRANGE ("Tipo linea"   , lrExtras."Tipo linea"::Extra);
      lrExtras.SETRANGE (Hotel          , prHotel.Hotel);
      lrExtras.SETRANGE ("Id Hotel"     , prHotel."Id Hotel");

      lfExtras.SETTABLEVIEW(lrExtras);
      lfExtras.RUNMODAL;
    END;

    PROCEDURE BuscarContratosxHotel@1103355008(VAR prHotel@1103355000 : Record 7009873) : Boolean;
    VAR
      lrCab@1103355001 : Record 7009871;
      lrContratos@1103355002 : Record 7009873;
    BEGIN
      // BuscarContratosxHotel
      //: Buscamos los contratos por hotel. Si buscamos al insertar solo se rellena el campo de contrato compra
      //: en el hotel.
      //: @prHotel: Hotel del que se van a buscar los contratos.
      //: @pwInsert: Indica si se estan buscando los contratos al insertar

      // Borramos los contratos que tenia asignado anteriormente el hotel.
      lrContratos.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrContratos.SETRANGE ("Id cotizacion", prHotel."Id cotizacion");
      lrContratos.SETRANGE ("Tipo uso"     , lrContratos."Tipo uso"::Seleccion);
      lrContratos.SETRANGE ("Tipo linea"   , lrContratos."Tipo linea"::Contrato);
      lrContratos.SETRANGE ("Id Hotel"     , prHotel."Id Hotel");
      lrContratos.DELETEALL;

      lrCab.GET(prHotel."Id cotizacion");

      BuscarContratosCompraxHotel(prHotel, lrCab);
      BuscarContratosVentaxHotel (prHotel, lrCab);
    END;

    LOCAL PROCEDURE InsertarContCompraxHotel@1103355035(VAR prHotel@1103355006 : Record 7009873;VAR prCab@1103355000 : Record 7009871;VAR prContC@1103355004 : Record 7009723;pwFechaIni@1103355003 : Date;pwFechaFin@1103355002 : Date);
    VAR
      lwNum@1103355005 : Integer;
      lrContratos@1103355001 : Record 7009873;
    BEGIN
      // InsertarContCompraxHotel

      lrContratos.RESET;
      lrContratos.SETCURRENTKEY("Id Hotel", "Tipo linea", Contrato, "Tipo Contrato");
      lrContratos.SETRANGE ("Id Hotel"     , prHotel."Id Hotel");
      lrContratos.SETRANGE ("Tipo linea"   , lrContratos."Tipo linea"::Contrato);
      lrContratos.SETRANGE (Contrato       , prContC."N§ Contrato compra");
      lrContratos.SETRANGE ("Tipo Contrato", lrContratos."Tipo Contrato"::Compra);

      IF NOT lrContratos.ISEMPTY THEN
        EXIT;

      lrContratos.RESET;
      lrContratos.INIT;
      lrContratos."Id cotizacion" := prCab.Id;

      lrContratos.Hotel           := prHotel.Hotel;
      lrContratos."Tipo uso"      := lrContratos."Tipo uso"::Seleccion;
      lrContratos."Tipo linea"    := lrContratos."Tipo linea"::Contrato;
      lrContratos.Seleccion       := TRUE;
      lrContratos.Contrato        := prContC."N§ Contrato compra";
      lrContratos."Fecha inicio"  := pwFechaIni;
      lrContratos."Fecha fin"     := pwFechaFin;
      lrContratos."Tipo Contrato" := lrContratos."Tipo Contrato"::Compra;
      lrContratos.Regimen         := prHotel.Regimen;
      lrContratos."Id Hotel"      := prHotel."Id Hotel";

      lrContratos.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InsertarContVentaxHotel@1103355006(VAR prHotel@1103355006 : Record 7009873;VAR prCab@1103355000 : Record 7009871;VAR prContV@1103355002 : Record 7009727;pwFechaIni@1103355003 : Date;pwFechaFin@1103355004 : Date);
    VAR
      lwNum@1103355005 : Integer;
      lrContratos@1103355001 : Record 7009873;
    BEGIN
      // InsertarContVentaxHotel

      lrContratos.RESET;
      lrContratos.SETCURRENTKEY("Id Hotel", "Tipo linea", Contrato, "Tipo Contrato");
      lrContratos.SETRANGE ("Id Hotel"     , prHotel."Id Hotel");
      lrContratos.SETRANGE ("Tipo linea"   , lrContratos."Tipo linea"::Contrato);
      lrContratos.SETRANGE (Contrato       , prContV."N§ Contrato venta");
      lrContratos.SETRANGE ("Tipo Contrato", lrContratos."Tipo Contrato"::Venta);

      IF NOT lrContratos.ISEMPTY THEN
        EXIT;

      lrContratos.RESET;
      lrContratos.INIT;
      lrContratos."Id cotizacion" := prCab.Id;

      lrContratos.Hotel           := prHotel.Hotel;
      lrContratos."Tipo uso"      := lrContratos."Tipo uso"::Seleccion;
      lrContratos."Tipo linea"    := lrContratos."Tipo linea"::Contrato;
      lrContratos.Seleccion       := TRUE;
      lrContratos.Contrato        := prContV."N§ Contrato venta";
      lrContratos."Fecha inicio"  := pwFechaIni;
      lrContratos."Fecha fin"     := pwFechaFin;
      lrContratos."Tipo Contrato" := lrContratos."Tipo Contrato"::Venta;
      lrContratos.Regimen         := prHotel.Regimen;
      lrContratos."Id Hotel"      := prHotel."Id Hotel";

      lrContratos.INSERT(TRUE);
    END;

    PROCEDURE PrepararCalculoCotizacion@1103355009(VAR prCabCot@1103355012 : Record 7009871;VAR prLinCot@1103355005 : Record 7009872;VAR prCabCal@1103355000 : TEMPORARY Record 7009735;VAR prHoteles@1103355001 : TEMPORARY Record 7009873;VAR prContratos@1103355002 : TEMPORARY Record 7009873;VAR prHabitaciones@1103355003 : TEMPORARY Record 7009873;VAR prPersonas@1103355004 : TEMPORARY Record 7009873;VAR prExtras@1103355008 : TEMPORARY Record 7009873;pwCompra@1103355015 : Boolean) rvEncontrado : Boolean;
    VAR
      lrHoteles@1103355016 : Record 7009873;
      lrContratos@1103355006 : Record 7009873;
      lrHabs@1103355009 : Record 7009873;
      lwCont@1103355010 : Integer;
      lrExtras@1103355007 : Record 7009873;
      lrConvHabTMP@1103355013 : TEMPORARY Record 7009731;
      lrPerEstancia@1103355017 : TEMPORARY Record 2000000007;
      lrPerContrato@1103355018 : TEMPORARY Record 2000000007;
      lwDummy@1103355011 : Text[1024];
      lwImporteTO@1103355014 : Decimal;
    BEGIN
      // PrepararCalculoCotizacion

      prCabCal.RESET;
      prCabCal.DELETEALL;
      prContratos.RESET;
      prContratos.DELETEALL;
      prHoteles.RESET;
      prHoteles.DELETEALL;
      prHabitaciones.RESET;
      prHabitaciones.DELETEALL;
      prPersonas.RESET;
      prPersonas.DELETEALL;
      prExtras.RESET;
      prExtras.DELETEALL;

      prCabCal.INIT;
      prCabCal.Usuario         := prLinCot."Codigo calculo";
      prCabCal.Hotel           := prLinCot.Hotel;
      prCabCal."Fecha entrada" := prLinCot."Fecha desde";
      prCabCal."Fecha salida"  := prLinCot."Fecha hasta";
      prCabCal.INSERT;

      lrHoteles.SETCURRENTKEY("Id cotizacion", "Id Hotel");

      lrHoteles.SETRANGE ("Id cotizacion", prLinCot."Id Cotizacion");
      lrHoteles.SETRANGE (Id             , prLinCot."Id Producto");

      IF lrHoteles.FINDFIRST THEN BEGIN

        prHoteles := lrHoteles;
        prHoteles.INSERT;

        // Guardo importe touroperador para comprobaci¢n posterior.
        lwImporteTO := lrHoteles."Importe Touroperador";

        cVarias.IniciarPeriodo(lrPerEstancia, lrHoteles."Fecha inicio", lrHoteles."Fecha fin" - 1);

        // Comprobamos si hay alguna habitaci¢n sin distribucion
        // que se haya generado al iniciar el c lculo.

        lrHabs.RESET;
        lrHabs.SETCURRENTKEY("Id cotizacion", "Id Hotel");
        lrHabs.SETRANGE ("Id cotizacion", prLinCot."Id Cotizacion");
        lrHabs.SETRANGE ("Id Hotel"     , prLinCot."Id Producto");
        lrHabs.SETRANGE ("Tipo linea"   , lrHabs."Tipo linea"::Habitacion);
        lrHabs.SETRANGE ("Tipo uso"     , lrHabs."Tipo uso"::Seleccion);

        IF lrHabs.FINDSET THEN BEGIN
          REPEAT
            IF NOT ComprobarDistribucion(lrHabs, lwDummy) THEN BEGIN
              DistribuirPersonasxHab(prCabCot, lrHabs);
            END;
          UNTIL lrHabs.NEXT = 0;
        END;

      END;

      GenerarTempConvHab(prHoteles, lrConvHabTMP);

      lrContratos.SETCURRENTKEY("Id cotizacion", "Id Hotel");
      lrContratos.SETRANGE ("Id cotizacion", prLinCot."Id Cotizacion");
      lrContratos.SETRANGE ("Id Hotel"     , prLinCot."Id Producto");
      lrContratos.SETRANGE ("Tipo linea"   , lrContratos."Tipo linea"::Contrato);
      lrContratos.SETRANGE ("Tipo uso"     , lrContratos."Tipo uso"::Seleccion);

      IF pwCompra THEN
        lrContratos.SETRANGE ("Tipo Contrato"     , lrContratos."Tipo Contrato"::Compra)
      ELSE
        lrContratos.SETRANGE ("Tipo Contrato"     , lrContratos."Tipo Contrato"::Venta);

      lwCont := 0;

      IF lrContratos.FINDSET THEN BEGIN
        REPEAT

          cVarias.IniciarPeriodo(lrPerContrato, lrContratos."Fecha inicio", lrContratos."Fecha fin");
          lrPerContrato.FINDFIRST;
          cVarias.DiferPerDirecto(lrPerEstancia, lrPerContrato);

          lwCont += 1;
          prContratos            := lrContratos;
          prContratos.Id         := lwCont;
          prContratos."Tipo uso" := prContratos."Tipo uso"::Calculo;

          prContratos."Coste manual"            := prHoteles."Coste manual";
          prContratos."Aplicacion coste manual"       := prHoteles."Aplicacion coste manual";
          prContratos."Ingreso manual"      := prHoteles."Ingreso manual";
          prContratos."Aplicacion ingreso manual" := prHoteles."Aplicacion ingreso manual";
          prContratos."Importe Touroperador"              := prHoteles."Importe Touroperador";

          prContratos.INSERT;

          lrHabs.RESET;
          lrHabs.SETCURRENTKEY("Id cotizacion", "Id Hotel");
          lrHabs.SETRANGE ("Id cotizacion", prLinCot."Id Cotizacion");
          lrHabs.SETRANGE ("Id Hotel"     , prLinCot."Id Producto");
          lrHabs.SETRANGE ("Tipo linea"   , lrHabs."Tipo linea"::Habitacion);
          lrHabs.SETRANGE ("Tipo uso"     , lrHabs."Tipo uso"::Seleccion);
          lrHabs.SETRANGE (Id             , prLinCot."Id Habitacion");

          IF lrHabs.FINDFIRST THEN BEGIN

            lwCont       += 1;

            prHabitaciones                   := prContratos;
            prHabitaciones.Id                := lwCont;
            prHabitaciones.Habitacion        := lrHabs.Habitacion;
            prHabitaciones."N§ Habitaciones" := lrHabs."N§ Habitaciones";
            prHabitaciones.Ocupacion         := lrHabs.Ocupacion;

            IF NOT(lrHabs."Aplicacion coste manual" IN [0,3]) THEN BEGIN
              prHabitaciones."Coste manual"      := lrHabs."Coste manual";
              prHabitaciones."Aplicacion coste manual" := lrHabs."Aplicacion coste manual";
            END;

            IF NOT(lrHabs."Aplicacion ingreso manual" IN [0,3]) THEN BEGIN
              prHabitaciones."Ingreso manual"      := lrHabs."Ingreso manual";
              prHabitaciones."Aplicacion ingreso manual" := lrHabs."Aplicacion ingreso manual";
            END;

            IF lrHabs."Importe Touroperador" <> 0 THEN
              prHabitaciones."Importe Touroperador" :=lrHabs."Importe Touroperador";

            prHabitaciones.INSERT;

            GenerarPersonasxHab(prCabCot, lrHabs, prHabitaciones, prPersonas, lwCont);

          END;

          lrExtras.SETCURRENTKEY("Id cotizacion", "Id Hotel");
          lrExtras.SETRANGE ("Id cotizacion", prLinCot."Id Cotizacion");
          lrExtras.SETRANGE ("Id Hotel"     , prLinCot."Id Producto");
          lrExtras.SETRANGE ("Tipo linea"   , lrHabs."Tipo linea"::Extra);
          lrExtras.SETRANGE ("Tipo uso"     , lrHabs."Tipo uso"::Seleccion);

          // Creamos un registro por persona x hab x extra.
          IF lrExtras.FINDSET THEN BEGIN
            REPEAT
              prPersonas.RESET;
              prPersonas.SETRANGE(Contrato, lrContratos.Contrato);
              IF prPersonas.FINDSET THEN BEGIN
                REPEAT

                  lwCont += 1;
                  prExtras       := prPersonas;
                  prExtras.Id    := lwCont;
                  prExtras.Extra := lrExtras.Extra;
                  prExtras.INSERT;

                UNTIL prPersonas.NEXT = 0;
              END;
            UNTIL lrExtras.NEXT = 0;
          END;

        UNTIL lrContratos.NEXT = 0;
      END;

      lrPerEstancia.RESET;
      IF lrPerEstancia.FINDSET THEN BEGIN
        REPEAT

          IF pwCompra THEN
            InsertaErrorCot(prLinCot."Codigo calculo",
                            STRSUBSTNO(Text021, lrPerEstancia."Period Start", lrPerEstancia."Period End"))
          ELSE BEGIN
            // No nos hace falta contrato venta si hay "Importe Touroperador" introducido.
            IF lwImporteTO <> 0 THEN
              EXIT(TRUE);

            InsertaErrorCot(prLinCot."Codigo calculo",
                            STRSUBSTNO(Text022, lrPerEstancia."Period Start", lrPerEstancia."Period End"));
          END;

          EXIT(FALSE);
        UNTIL lrPerEstancia.NEXT = 0;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DistribuirPersonasxHab@1103355005(VAR prCabCot@1103355003 : Record 7009871;VAR prHab@1103355001 : Record 7009873);
    VAR
      lrPersos@1103355004 : Record 7009873;
      lrDistribs@1103355000 : Record 7009875;
      lwPos@1103355011 : Integer;
      lwNumHab@1103355002 : Integer;
    BEGIN
      // DistribuirPersonasxHab

      lrDistribs.SETCURRENTKEY( "Id Hotel", "Id habitacion", "Id persona");
      lrDistribs.SETRANGE ("Id Hotel"     , prHab."Id Hotel");
      lrDistribs.SETRANGE ("Id habitacion", prHab.Id);
      lrDistribs.SETRANGE (Seleccion      , TRUE);

      lwNumHab      := prHab."N§ Habitaciones";
      lwPos         := 1;

      IF lrDistribs.FINDSET(TRUE) THEN BEGIN

        REPEAT

          lrDistribs."N§ habitacion" := prHab."N§ Habitaciones" - lwNumHab + 1;
          lrDistribs.Posicion        := lwPos;
          lrDistribs.MODIFY;

          lwNumHab -= 1;

          IF (lwNumHab = 0) THEN BEGIN
            lwPos += 1;
            lwNumHab := prHab."N§ Habitaciones";
          END;

        UNTIL lrDistribs.NEXT = 0;

      END;
    END;

    LOCAL PROCEDURE BuscarHabitaciones@1103355002(VAR prCabCot@1103355007 : Record 7009871;VAR prHotel@1103355002 : Record 7009873;VAR prConvHabTMP@1103355003 : TEMPORARY Record 7009731) : Boolean;
    VAR
      lrDistribs@1103355005 : Record 7009875;
      lrConvHab@1103355000 : Record 7009731;
      lrPrecioHab@1103355001 : Record 7009732;
      lwPaxes@1103355004 : Decimal;
      lwNumOrden@1103355006 : Integer;
      lwNumHabs@1103355010 : Integer;
      lrPersTMP@1103355011 : TEMPORARY Record 7009740;
    BEGIN
      // BuscarHabitaciones
      //:

      prConvHabTMP.RESET;
      prConvHabTMP.MODIFYALL("Minimo adultos", 0);

      // Colocamos los paxes.
      lrDistribs.SETCURRENTKEY("Id Hotel", "Id habitacion", "Id persona");
      lrDistribs.SETRANGE("Id Hotel"     , prHotel.Id);
      lrDistribs.SETRANGE("Id habitacion", 0);
      lrDistribs.SETRANGE(Seleccion      , TRUE);
      lwPaxes := lrDistribs.COUNT;

      // Si encontramos una habitaci¢n que casa perfectamente los ponemos ah¡.

      prConvHabTMP.SETRANGE("Ocupacion Maxima", lwPaxes);
      IF prConvHabTMP.FINDSET THEN BEGIN
        prConvHabTMP."Minimo adultos" := 1;
        prConvHabTMP.MODIFY;
        InsertarHabitacion(prHotel, prConvHabTMP);
        EXIT(TRUE);
      END;

      // Cogemos habitaciones de mayor a menor capacidad.

      prConvHabTMP.SETCURRENTKEY(Delegacion, "N§ Contrato", "Tipo contrato", "Ocupacion Maxima");
      prConvHabTMP.ASCENDING(FALSE);
      prConvHabTMP.SETRANGE("Ocupacion Maxima", 1, lwPaxes);

      IF prConvHabTMP.FINDFIRST THEN BEGIN

        prConvHabTMP."Minimo adultos" := lwPaxes DIV prConvHabTMP."Ocupacion Maxima";
        lwPaxes := lwPaxes MOD prConvHabTMP."Ocupacion Maxima";

        IF lwPaxes <> 0 THEN
          prConvHabTMP."Minimo adultos" += 1;

        prConvHabTMP.MODIFY;

        InsertarHabitacion(prHotel, prConvHabTMP);
        EXIT(TRUE);

      END;

      // Lo metemos en una habitaci¢n m s grande como £ltimo recurso.

      prConvHabTMP.RESET;
      prConvHabTMP.SETFILTER("Ocupacion Maxima", '>%1', lwPaxes);
      IF prConvHabTMP.FINDSET THEN BEGIN
        prConvHabTMP."Minimo adultos" := 1;
        prConvHabTMP.MODIFY;
        InsertarHabitacion(prHotel, prConvHabTMP);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GenerarTempConvHab@1103355055(VAR prHotel@1103355006 : Record 7009873;VAR prConvHabsTMP@1103355001 : TEMPORARY Record 7009731);
    VAR
      lrContratos@1103355002 : Record 7009873;
      lrConvHab@1103355003 : Record 7009731;
      lwNumCont@1103355004 : Integer;
      lwAcum@1103355005 : Integer;
    BEGIN
      // GenerarTempConvHab
      //:

      prConvHabsTMP.RESET;
      prConvHabsTMP.DELETEALL;

      lrContratos.SETCURRENTKEY("Id cotizacion", "Id Hotel");
      lrContratos.SETRANGE ("Id cotizacion", prHotel."Id cotizacion");
      lrContratos.SETRANGE ("Id Hotel"     , prHotel."Id Hotel");
      lrContratos.SETRANGE ("Tipo uso"     , lrContratos."Tipo uso"::Seleccion);
      lrContratos.SETRANGE ("Tipo linea"   , lrContratos."Tipo linea"::Contrato);
      lrContratos.SETRANGE ("Tipo Contrato", lrContratos."Tipo Contrato"::Compra);

      IF lrContratos.FINDSET THEN BEGIN
        REPEAT

          lwNumCont += 1;

          lrConvHab.RESET;
          lrConvHab.SETRANGE ("Tipo contrato", lrConvHab."Tipo contrato"::Compra);
          lrConvHab.SETRANGE ("N§ Contrato"  , lrContratos.Contrato);

          IF lrConvHab.FINDSET THEN BEGIN
            REPEAT

              IF NOT prConvHabsTMP.GET('', '', prConvHabsTMP."Tipo contrato"::Compra,
                                       '', lrConvHab."Habitacion cupo") THEN BEGIN
                prConvHabsTMP.Delegacion        := '';
                prConvHabsTMP."N§ Contrato"     := '';
                prConvHabsTMP."Tipo contrato"   := prConvHabsTMP."Tipo contrato"::Compra;
                prConvHabsTMP."Habitacion TO"   := '';
                prConvHabsTMP."Habitacion cupo" := lrConvHab."Habitacion cupo";
                prConvHabsTMP."Ocupacion Maxima" := lrConvHab."Ocupacion Maxima";
                prConvHabsTMP.INSERT;

              END;

              IF prConvHabsTMP."Minimo adultos" < lwNumCont THEN BEGIN
                prConvHabsTMP."Minimo adultos"       += 1;
                prConvHabsTMP.MODIFY;
              END;

            UNTIL lrConvHab.NEXT = 0;
          END;
        UNTIL lrContratos.NEXT = 0;
      END;

      // Borramos los que no est n en todos los contratos.
      prConvHabsTMP.RESET;
      prConvHabsTMP.SETFILTER("Minimo adultos", '<%1', lwNumCont);
      prConvHabsTMP.DELETEALL;
    END;

    LOCAL PROCEDURE InsertarHabitacion@1103355001(VAR prHotel@1103355000 : Record 7009873;VAR prConvHabTMP@1103355001 : TEMPORARY Record 7009731);
    VAR
      lrHabitacion@1103355002 : Record 7009873;
      lrCabCot@1103355003 : Record 7009871;
    BEGIN
      // InsertarHabitacion

      lrHabitacion.INIT;

      lrHabitacion."Id cotizacion"   := prHotel."Id cotizacion";
      lrHabitacion.Hotel             := prHotel.Hotel;
      lrHabitacion.Habitacion        := prConvHabTMP."Habitacion cupo";
      lrHabitacion."N§ Habitaciones" := prConvHabTMP."Minimo adultos";
      lrHabitacion."Tipo linea"      := lrHabitacion."Tipo linea"::Habitacion;
      lrHabitacion.Ocupacion         := prConvHabTMP."Ocupacion Maxima";
      lrHabitacion."Id Hotel"        := prHotel."Id Hotel";
      lrHabitacion."Tipo uso"        := lrHabitacion."Tipo uso"::Seleccion;

      lrHabitacion.INSERT(TRUE);

      lrCabCot.GET(prHotel."Id cotizacion");
      DistribuirPersonasxHab(lrCabCot, lrHabitacion);
    END;

    PROCEDURE GenerarPersonasCalculo@1103355030(VAR prCabCot@1103355003 : Record 7009871;VAR prLinCot@1103355000 : Record 7009872);
    VAR
      lrPerso@1103355001 : Record 7009873;
      lrDistrib@1103355004 : Record 7009875;
      lrPerCal@1103355002 : Record 7009740;
    BEGIN
      // GenerarPersonasCalculo

      lrPerso.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrPerso.SETRANGE ("Id cotizacion", prLinCot."Id Cotizacion");
      lrPerso.SETRANGE ("Tipo linea"   , lrPerso."Tipo linea"::Persona);
      lrPerso.SETRANGE ("Tipo uso"     , lrPerso."Tipo uso"::Seleccion);
      lrPerso.SETRANGE ("Id Hotel"     , prLinCot."Id Producto");

      lrDistrib.SETCURRENTKEY("Id Hotel", "Id habitacion", "Id persona");
      lrDistrib.SETRANGE ("Id Hotel"     ,  prLinCot."Id Producto");
      lrDistrib.SETRANGE ("Id habitacion", 0);
      lrDistrib.SETRANGE (Seleccion      , TRUE);

      IF lrDistrib.FINDSET THEN BEGIN
        REPEAT

          lrDistrib.CALCFIELDS(Nombre, "N§ Persona", Edad);

          lrPerCal.INIT;
          lrPerCal.Usuario          := prLinCot."Codigo calculo";
          lrPerCal.Delegacion       := prCabCot.Delegacion;
          lrPerCal."N§ Reserva"     := lrDistrib."N§ Persona";
          lrPerCal."Hotel booking"  := prLinCot.Hotel;
          lrPerCal."Nombre cliente" := lrDistrib.Nombre;
          lrPerCal.TouOperador      := prCabCot."Touroperador Venta";
          lrPerCal.Regimen          := prCabCot.Regimen;
          lrPerCal."Tipo Persona"   := GetTipoPersona(lrPerso."N§ Persona");
          lrPerCal."N§ Persona"     := lrDistrib."N§ Persona";
          lrPerCal.Edad             := lrDistrib.Edad;
          lrPerCal.INSERT;

        UNTIL lrDistrib.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuscarContratosCompraxHotel@1103355037(VAR prHotel@1103355000 : Record 7009873;VAR prCab@1103355003 : Record 7009871) : Boolean;
    VAR
      lrContC@1103355005 : Record 7009723;
      lwFechaIni@1103355006 : Date;
      lwFechaFin@1103355007 : Date;
      lwAuxFecha@1103355004 : Date;
      lrCab@1103355001 : Record 7009871;
      lrContratos@1103355002 : Record 7009873;
    BEGIN
      // BuscarContratosCompraxHotel

      // Borramos los contratos que tenia asignado anteriormente el hotel

      lrContratos.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrContratos.SETRANGE ("Id cotizacion", prHotel."Id cotizacion");
      lrContratos.SETRANGE ("Tipo uso"     , lrContratos."Tipo uso"::Seleccion);
      lrContratos.SETRANGE ("Tipo linea"   , lrContratos."Tipo linea"::Contrato);
      lrContratos.SETRANGE ("Id Hotel"     , prHotel."Id Hotel");
      lrContratos.DELETEALL;

      lrCab.GET(prHotel."Id cotizacion");

      lrContC.SETCURRENTKEY(Hotel, TourOperador, "Fecha inicio contrato");

      lrContC.SETRANGE(Hotel       , prHotel.Hotel);
      lrContC.SETRANGE(TourOperador, lrCab."Touroperador compra");
      lrContC.SETRANGE(Confirmado  , TRUE);

      // Buscamos un contrato en que el periodo encaje perfectamente con la cotizaci¢n.

      lrContC.SETFILTER("Fecha inicio contrato", '<=%1', prHotel."Fecha inicio");
      lrContC.SETFILTER("Fecha final contrato" , '>=%1', prHotel."Fecha fin");

      IF lrContC.FINDFIRST THEN BEGIN

        InsertarContCompraxHotel(prHotel, lrCab, lrContC, prHotel."Fecha inicio", prHotel."Fecha fin" - 1);

        EXIT(TRUE);
      END;

      // Si no se puede encajar en un contrato buscamos contratos hasta cubrir el periodo dado.

      lwFechaIni := prHotel."Fecha inicio";
      lwFechaFin := prHotel."Fecha fin";

      WHILE lwFechaIni <= lwFechaFin DO BEGIN

        lrContC.SETFILTER("Fecha inicio contrato", '<=%1', lwFechaIni);
        lrContC.SETFILTER("Fecha final contrato" , '>=%1', lwFechaIni);

        // No hay contrato o contratos que coincida con el periodo de la cotizaci¢n.
        IF NOT lrContC.FINDFIRST THEN BEGIN
          prHotel.InsertarAviso(STRSUBSTNO(Text021, lwFechaIni, lwFechaFin));
          EXIT(FALSE);
        END;

        IF lwFechaFin <= lrContC."Fecha final contrato" THEN
          lwAuxFecha := lwFechaFin - 1
        ELSE
          lwAuxFecha := lrContC."Fecha final contrato";

        InsertarContCompraxHotel(prHotel, lrCab, lrContC, lwFechaIni, lwAuxFecha);

        lwFechaIni := lrContC."Fecha final contrato" + 1;

      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE BuscarContratosVentaxHotel@1103355038(VAR prHotel@1103355000 : Record 7009873;VAR prCab@1103355008 : Record 7009871) : Boolean;
    VAR
      lrContV@1103355003 : Record 7009727;
      lwFechaIni@1103355006 : Date;
      lwFechaFin@1103355007 : Date;
      lwAuxFecha@1103355004 : Date;
      lrContratos@1103355002 : Record 7009873;
    BEGIN
      // BuscarContratosVentaxHotel

      lrContV.SETCURRENTKEY(Hotel, TourOperador, "Fecha inicio contrato");

      lrContV.SETRANGE(Hotel       , prHotel.Hotel);
      lrContV.SETRANGE(TourOperador, prCab."Touroperador Venta");
      lrContV.SETRANGE(Confirmado  , TRUE);

      // Buscamos un contrato en que el periodo encaje perfectamente con la cotizaci¢n.

      lrContV.SETFILTER("Fecha inicio contrato", '<=%1', prHotel."Fecha inicio");
      lrContV.SETFILTER("Fecha final contrato" , '>=%1', prHotel."Fecha fin");

      IF lrContV.FINDFIRST THEN BEGIN
        InsertarContVentaxHotel(prHotel, prCab, lrContV, prHotel."Fecha inicio", prHotel."Fecha fin" - 1);
        EXIT(TRUE);
      END;

      // Si no se puede encajar en un contrato buscamos contratos hasta cubrir el periodo dado.

      lwFechaIni := prHotel."Fecha inicio";
      lwFechaFin := prHotel."Fecha fin";

      WHILE lwFechaIni <= lwFechaFin DO BEGIN

        lrContV.SETFILTER("Fecha inicio contrato", '<=%1', lwFechaIni);
        lrContV.SETFILTER("Fecha final contrato" , '>=%1', lwFechaIni);

        // No hay contrato o contratos que coincida con el periodo de la cotizaci¢n.
        IF NOT lrContV.FINDFIRST THEN BEGIN
          prHotel.InsertarAviso(STRSUBSTNO(Text022, lwFechaIni, lwFechaFin));
          EXIT(FALSE);
        END;

        IF lwFechaFin <= lrContV."Fecha final contrato" THEN
          lwAuxFecha := lwFechaFin - 1
        ELSE
          lwAuxFecha := lrContV."Fecha final contrato";

        InsertarContVentaxHotel(prHotel, prCab, lrContV, lwFechaIni, lwAuxFecha);
        lwFechaIni := lrContV."Fecha final contrato" + 1;

      END;

      EXIT(TRUE);
    END;

    PROCEDURE InsertaErrorCot@1103355036(pwCod@1103355003 : Code[20];pwTexto@1103355000 : Text[80]);
    VAR
      lrErr@1103355001 : Record 7009737;
      lrErr2@1103355002 : Record 7009737;
    BEGIN
      // InsertaErrorCot
      //:

      lrErr2.RESET;
      lrErr2.SETRANGE(Usuario, pwCod);
      lrErr2.ASCENDING(FALSE);
      IF lrErr2.FIND('-') THEN
        lrErr."N§ Linea" := lrErr2."N§ Linea" + 10
      ELSE
        lrErr."N§ Linea" := 10;

      lrErr.INIT;
      lrErr.Usuario := pwCod;
      lrErr.Texto := pwTexto;
      lrErr.Contador := 1;
      lrErr.INSERT;
    END;

    PROCEDURE A¤adirPersonasHotel@1103355039(VAR prHotel@1103355000 : Record 7009873);
    VAR
      lrPersosCot@1103355001 : Record 7009873;
      lrDistribs@1103355003 : Record 7009875;
    BEGIN
      // A¤adirPersonasHotel
      // A¤adimos registros especificos con las personas por hotel.

      // Recupero las personas comunes para la cotizaci¢n.
      lrPersosCot.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrPersosCot.SETRANGE ("Id cotizacion", prHotel."Id cotizacion");
      lrPersosCot.SETRANGE ("Tipo uso"     , lrPersosCot."Tipo uso"::Seleccion);
      lrPersosCot.SETRANGE ("Tipo linea"   , lrPersosCot."Tipo linea"::Persona);

      IF lrPersosCot.FINDSET THEN BEGIN
        REPEAT

          lrDistribs.INIT;

          lrDistribs."Id habitacion" := 0;
          lrDistribs."Id persona"    := lrPersosCot.Id;
          lrDistribs."Id Hotel"      := prHotel.Id;

          lrDistribs."N§ habitacion" := 0;
          lrDistribs.Posicion        := 0;

          lrDistribs.Seleccion := TRUE;

          lrDistribs.INSERT(TRUE);

        UNTIL lrPersosCot.NEXT = 0;

      END;
    END;

    PROCEDURE A¤adirHotelesCotizacion@1103355010(VAR prCab@1103355000 : Record 7009871;VAR prCondCot@1103355001 : Record 7009874);
    VAR
      lrHotelesCot@1103355002 : Record 7009873;
      lrHotsTMP@1103355003 : TEMPORARY Record 7009873;
      lrHoteles@1103355005 : Record 7009724;
      lrConvHabTMP@1103355007 : TEMPORARY Record 7009731;
    BEGIN
      // A¤adirHotelesCotizacion

      // Insertamos las l¡neas de hotel.
      // Si se ha indicado un c¢digo de hotel en particular, ignoramos los filtros.


      IF prCondCot.Hotel <> '' THEN BEGIN

        lrHotelesCot.INIT;
        lrHotelesCot."Id cotizacion" := prCab.Id;
        lrHotelesCot.Hotel           := prCondCot.Hotel;
        lrHotelesCot."Fecha inicio"  := prCondCot."Fecha entrada";
        lrHotelesCot."Fecha fin"     := prCondCot."Fecha salida";
        lrHotelesCot.Regimen         := prCondCot.Regimen;
        lrHotelesCot."Tipo linea"    := lrHotelesCot."Tipo linea"::Hotel;
        lrHotelesCot."Tipo uso"      := lrHotelesCot."Tipo uso"::Seleccion;

        lrHotelesCot.INSERT(TRUE);
        lrHotelesCot.MODIFY(TRUE); // Busca los contratos y a¤ade las personas al hotel.

        lrHotsTMP := lrHotelesCot;
        lrHotsTMP.INSERT;

      END
      ELSE BEGIN

        lrHoteles.RESET;
        lrHoteles.SETCURRENTKEY("Zona Fisica", Categoria);

        IF prCondCot."Filtro zona" <> '' THEN
          lrHoteles.SETFILTER("Zona Fisica", prCondCot."Filtro zona");
        IF prCondCot."Filtro categoria" <> '' THEN
          lrHoteles.SETFILTER(Categoria    , prCondCot."Filtro categoria");

        IF lrHoteles.FINDSET THEN BEGIN
          REPEAT

           lrHotelesCot.INIT;
           lrHotelesCot."Id cotizacion" := prCab.Id;
           lrHotelesCot.Hotel           := lrHoteles.Hotel;
           lrHotelesCot."Fecha inicio"  := prCondCot."Fecha entrada";
           lrHotelesCot."Fecha fin"     := prCondCot."Fecha salida";
           lrHotelesCot.Regimen         := prCondCot.Regimen;
           lrHotelesCot."Tipo linea"    := lrHotelesCot."Tipo linea"::Hotel;
           lrHotelesCot."Tipo uso"      := lrHotelesCot."Tipo uso"::Seleccion;

           lrHotelesCot.INSERT(TRUE);
           lrHotelesCot.MODIFY(TRUE); // Busca los contratos y a¤ade las personas al hotel.

           lrHotsTMP := lrHotelesCot;
           lrHotsTMP.INSERT;

          UNTIL lrHoteles.NEXT = 0;
        END;

      END;

      lrHotsTMP.RESET;
      IF lrHotsTMP.FINDSET THEN BEGIN
        REPEAT

          // recuperamos las conversiones de habitacion para el hotel.
          GenerarTempConvHab(lrHotsTMP, lrConvHabTMP);

          CASE prCondCot."Tipo habitacion" OF

            prCondCot."Tipo habitacion"::"Linea x tipo habitacion " : BEGIN
              lrConvHabTMP.RESET;
              lrConvHabTMP.MODIFYALL("Minimo adultos", prCondCot."N§ habitaciones"); // N§ Habitaciones x tipo
              A¤adirHabitacionxTipo(prCab, lrHotsTMP, lrConvHabTMP);
            END;

            prCondCot."Tipo habitacion"::"Habitacion mas adecuada" : BEGIN
              BuscarHabitaciones(prCab, lrHotsTMP, lrConvHabTMP);
            END;

          END;

        UNTIL lrHotsTMP.NEXT = 0;
      END;
    END;

    PROCEDURE A¤adirHabitacionxTipo@1103355043(VAR prCab@1103355000 : Record 7009871;VAR prHotel@1103355001 : Record 7009873;VAR prConvHabsTMP@1103355002 : TEMPORARY Record 7009731);
    BEGIN
      // A¤adirHabitacionxTipo

      prConvHabsTMP.RESET;
      IF prConvHabsTMP.FINDSET THEN BEGIN
        REPEAT
          InsertarHabitacion(prHotel, prConvHabsTMP);
        UNTIL prConvHabsTMP.NEXT = 0;
      END;
    END;

    PROCEDURE MostrarHabitacion@1103355004(VAR prLinCot@1103355000 : Record 7009872) rvText : Text[80];
    VAR
      lrHabs@1103355001 : Record 7009873;
    BEGIN
      // MostrarHabitacion

      IF prLinCot.Tipo <> prLinCot.Tipo::Hotel THEN
        EXIT('');

      lrHabs.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHabs.SETRANGE ("Id cotizacion", prLinCot."Id Cotizacion");
      lrHabs.SETRANGE ("Tipo uso"     , lrHabs."Tipo uso"::Seleccion);
      lrHabs.SETRANGE ("Tipo linea"   , lrHabs."Tipo linea"::Habitacion);
      lrHabs.SETRANGE ("Id Hotel"     , prLinCot."Id Producto");
      lrHabs.SETRANGE (Id             , prLinCot."Id Habitacion");

      IF NOT lrHabs.FINDSET THEN
        EXIT('');

      REPEAT

        rvText := COPYSTR(rvText + lrHabs.Habitacion + ' x ' + FORMAT(lrHabs."N§ Habitaciones") + ',',
                          1, MAXSTRLEN(rvText));
      UNTIL lrHabs.NEXT = 0;

      EXIT(DELCHR(rvText, '>', ','));
    END;

    PROCEDURE LookUpPersonasCabecera@1103355003(VAR prCab@1103355000 : Record 7009871);
    VAR
      lrPersonas@1103355002 : Record 7009873;
      lfPersonas@1103355001 : Form 7010044;
    BEGIN
      // LookUpPersonasCabecera

      lrPersonas.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrPersonas.SETRANGE ("Id cotizacion", prCab.Id);
      lrPersonas.SETRANGE ("Tipo uso"     , lrPersonas."Tipo uso"::Seleccion);
      lrPersonas.SETRANGE ("Tipo linea"   , lrPersonas."Tipo linea"::Persona);
      lrPersonas.SETRANGE ("Id Hotel"     , 0);

      lfPersonas.SETTABLEVIEW(lrPersonas);
      lfPersonas.SetParametros(FALSE);
      lfPersonas.RUNMODAL;
    END;

    LOCAL PROCEDURE GenerarPersonasxHab@1103355014(VAR prCabCot@1103355004 : Record 7009871;VAR prHab@1103355001 : Record 7009873;VAR prHabsTMP@1103355000 : TEMPORARY Record 7009873;VAR prPersosTMP@1103355005 : TEMPORARY Record 7009873;VAR pwCont@1103355002 : Integer);
    VAR
      lrDistr@1103355007 : Record 7009875;
    BEGIN
      // GenerarPersonasxHab


      lrDistr.SETCURRENTKEY("Id Hotel", "Id habitacion", "Id persona");
      lrDistr.SETRANGE ("Id Hotel"     , prHab."Id Hotel");
      lrDistr.SETRANGE ("Id habitacion", prHab.Id);
      lrDistr.SETRANGE (Seleccion      , TRUE);

      IF lrDistr.FINDSET THEN BEGIN

        REPEAT

          lrDistr.CALCFIELDS(Nombre, "N§ Persona", Edad);

          pwCont += 1;

          prPersosTMP              := prHabsTMP;

          prPersosTMP.Id           := pwCont;
          prPersosTMP."Tipo linea" := prPersosTMP."Tipo linea"::Persona;
          prPersosTMP."Tipo uso"   := prPersosTMP."Tipo uso"::Seleccion;
          prPersosTMP.Nombre       := lrDistr.Nombre;
          prPersosTMP."N§ Persona" := lrDistr."N§ Persona";
          prPersosTMP.Posicion     := lrDistr.Posicion;
          prPersosTMP.Responsable  := (lrDistr.Posicion = 1) AND (lrDistr."N§ habitacion" = 1);
          prPersosTMP.Edad         := lrDistr.Edad;

          prPersosTMP.INSERT;

        UNTIL lrDistr.NEXT = 0;

      END;
    END;

    PROCEDURE LooKUpDistribucion@1103355040(VAR prHab@1103355000 : Record 7009873);
    VAR
      lrDistrib@1103355001 : Record 7009875;
      lfDistrib@1103355002 : Form 7010009;
    BEGIN
      // LooKUpDistribucion

      lrDistrib.SETCURRENTKEY("Id habitacion", "N§ habitacion", Posicion);
      lrDistrib.SETRANGE("Id habitacion", prHab.Id);
      lrDistrib.SETRANGE(Seleccion      , TRUE);

      lfDistrib.SETTABLEVIEW(lrDistrib);
      lfDistrib.SetModo(lfDistrib.ModoDistribucion);
      lfDistrib.RUNMODAL;
    END;

    PROCEDURE ComprobarDistribucion@1103355041(VAR prHab@1103355000 : Record 7009873;VAR pwMensaje@1103355006 : Text[50]) : Boolean;
    VAR
      lrDistrib@1103355001 : Record 7009875;
      lwNumHabs@1103355004 : Integer;
      lwNumPos@1103355005 : Integer;
    BEGIN
      // ComprobarDistribucion

      lwNumHabs   := 1;
      lwNumPos := 1;

      lrDistrib.RESET;
      lrDistrib.SETCURRENTKEY("Id habitacion", "N§ habitacion", Posicion);
      lrDistrib.SETRANGE("Id habitacion", prHab.Id);
      lrDistrib.SETRANGE(Seleccion      ,TRUE);

      IF lrDistrib.FINDSET THEN BEGIN
        REPEAT

          //Miramos si el n£mero de habitaci¢n sigue siendo el mismo.
          IF lwNumHabs <> lrDistrib."N§ habitacion" THEN BEGIN

            // hay m s habitaciones de las que toca en la distribuci¢n.
            IF lrDistrib."N§ habitacion" > prHab."N§ Habitaciones" THEN BEGIN
              pwMensaje := Text023;
              EXIT(FALSE);
            END;

            // No hay nadie en la habitacion
            IF (lwNumPos = 1) OR (lwNumHabs + 1 < lrDistrib."N§ habitacion") THEN BEGIN
              pwMensaje := Text024;
              EXIT(FALSE);
            END;
            lwNumHabs   := lrDistrib."N§ habitacion";
            lwNumPos := 1;
          END;

          // las personas no tienen un orden de posicion correcto.
          IF lrDistrib.Posicion <> lwNumPos THEN BEGIN
            pwMensaje := Text026;
            EXIT(FALSE);
          END;
          lwNumPos += 1;

        UNTIL lrDistrib.NEXT = 0;
      END;

      // Hay Habitaciones vacias.
      IF lwNumHabs < lrDistrib."N§ habitacion" THEN BEGIN
        pwMensaje := Text024;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ComprobarCotizacion@1103355042(VAR prCabCot@1103355000 : Record 7009871) : Boolean;
    VAR
      lrHabs@1103355001 : Record 7009873;
      lrHoteles@1103355005 : TEMPORARY Record 7009873;
      lwMensaje@1103355002 : Text[50];
      lwErrores@1103355003 : Integer;
      lrErrores@1103355004 : Record 7009876;
    BEGIN
      // ComprobarCotizacion

      // JPT 02/09/09 Se comprueban las que lines est‚n en el rango de la cabecera
      prCabCot.CompFechasLineas;

      lrErrores.SETCURRENTKEY("Id Cotizacion", "Id Hotel");
      lrErrores.SETRANGE("Id Cotizacion");
      lrErrores.DELETEALL;

      lwErrores := 0;

      // Comprobamos los contratos de hotel
      lrHoteles.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHoteles.SETRANGE ("Id cotizacion", prCabCot.Id);
      lrHoteles.SETRANGE ("Tipo uso"     , lrHoteles."Tipo uso"::Seleccion);
      lrHoteles.SETRANGE ("Tipo linea"   , lrHoteles."Tipo linea"::Hotel);

      IF lrHoteles.FINDSET(TRUE) THEN BEGIN
        REPEAT
          BuscarContratosxHotel(lrHoteles);
          lrHoteles.MODIFY;
        UNTIL lrHoteles.NEXT = 0;
      END;

      // Comprobamos que las Distribuciones en las habitaciones sean correctas.
      lrHabs.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHabs.SETRANGE ("Id cotizacion", prCabCot.Id);
      lrHabs.SETRANGE ("Tipo uso"     , lrHabs."Tipo uso"::Seleccion);
      lrHabs.SETRANGE ("Tipo linea"   , lrHabs."Tipo linea"::Habitacion);

      IF lrHabs.FINDSET THEN BEGIN
        REPEAT
          IF NOT ComprobarDistribucion(lrHabs, lwMensaje) THEN BEGIN
            lwErrores +=1;
            lrHabs.InsertarError(lrHabs.Habitacion + ' x ' + FORMAT(lrHabs."N§ Habitaciones") + ' ' + Text028 + lwMensaje);
          END;
        UNTIL lrHabs.NEXT = 0;
      END;

      // Insertamos avisos, no los contabilizo como errores.
      ComprobarSolapamientoHoteles(prCabCot, TRUE);

      ComprobarTransfersCorrectos(prCabCot);

      EXIT (lwErrores = 0);
    END;

    PROCEDURE DistribuirHabsCotizacion@1103355044(VAR prCabCot@1103355000 : Record 7009871;pwIdHotel@1103355002 : Integer);
    VAR
      lrHabs@1103355001 : Record 7009873;
    BEGIN
      // DistribuirHabsCotizacion


      lrHabs.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHabs.SETRANGE ("Id cotizacion", prCabCot.Id);
      lrHabs.SETRANGE ("Tipo uso"     , lrHabs."Tipo uso"::Seleccion);
      lrHabs.SETRANGE ("Tipo linea"   , lrHabs."Tipo linea"::Habitacion);

      IF pwIdHotel <> 0 THEN
        lrHabs.SETRANGE ("Id Hotel"   , pwIdHotel);

      IF lrHabs.FINDSET THEN BEGIN
        REPEAT
          DistribuirPersonasxHab(prCabCot, lrHabs);
        UNTIL lrHabs.NEXT = 0;
      END;
    END;

    PROCEDURE CalcularImporteTO@1103355060(VAR prCabCot@1103355002 : Record 7009871;VAR prCabCal@1103355007 : TEMPORARY Record 7009735;VAR prHabs@1103355001 : TEMPORARY Record 7009873;VAR pwCoste@1103355000 : Decimal;VAR pwIngreso@1103355005 : Decimal) : Boolean;
    VAR
      lrPar@1103355004 : Record 7009700;
      lwOk@1103355003 : Boolean;
      lwEnc@1103355008 : Boolean;
      lrComision@1103355006 : Record 7009880;
    BEGIN
      // CalcularImporteTO

      pwCoste   := 0;
      pwIngreso := 0;
      lwOk      := FALSE;

      lrPar.FINDFIRST;

      prHabs.RESET;
      IF prHabs.FINDFIRST THEN BEGIN

        prHabs.CALCFIELDS(Zona);

        // Si se ha indicado Importe TO
        IF (prHabs."Importe Touroperador" <> 0) THEN BEGIN
          //pwCoste   := prHabs."Importe Touroperador" * (1 - (lrPar."% descuento sobre importe ITS" / 100));

          pwCoste   := prHabs."Importe Touroperador";
          pwIngreso := prHabs."Importe Touroperador";

          // Buscamos % de beneficio

          lrComision.RESET;
          lrComision.SETCURRENTKEY(Touroperador, "Zona fisica");
          lrComision.SETRANGE (Touroperador , prCabCot."Touroperador compra");
          lrComision.SETRANGE ("Zona fisica", prHabs.Zona);
          lwEnc := lrComision.FINDFIRST;

          // JPT 04/09/09 Se permite dejar la zona fisica en blanco
          IF NOT lwEnc THEN BEGIN
            lrComision.SETRANGE ("Zona fisica", '');
            lwEnc := lrComision.FINDFIRST;
          END;

          IF lwEnc THEN BEGIN
            pwCoste := prHabs."Importe Touroperador" * (1 - (lrComision."% Comision" / 100));
          END
          ELSE
            InsertaErrorCot(prCabCal.Usuario, STRSUBSTNO(Text029, prCabCot."Touroperador compra", prHabs.Zona));

          lwOk := TRUE;

        END;

      END;

      EXIT(lwOk);
    END;

    PROCEDURE ComprobarSolapamientoHoteles@1103355046(VAR prCab@1103355000 : Record 7009871;pwInsertaErrores@1103355009 : Boolean) rvOk : Integer;
    VAR
      lrHoteles@1103355001 : Record 7009873;
      lrPersonas@1103355006 : Record 7009873;
      lrPersxHotelTMP@1103355003 : TEMPORARY Record 7009873;
      lwCont@1103355004 : Integer;
      lrPerActual@1103355005 : TEMPORARY Record 2000000007;
      lrPers@1103355007 : TEMPORARY Record 2000000007;
      lrPerRes@1103355008 : TEMPORARY Record 2000000007;
    BEGIN
      // ComprobarSolapamientoHoteles

      lwCont := 0;
      rvOk   := 0;

      // Generamos un temporary que cruza la informaci¢n de hoteles con los paxes activos
      // en ese hotel.

      GenerarPersxHotel(prCab, lrPersxHotelTMP, wGenHotxPer::Todos);

      // Para cada persona comprobamos si existe alg£n periodo de reserva que se solapa.

      lrPersonas.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrPersonas.SETRANGE ("Id cotizacion", prCab.Id);
      lrPersonas.SETRANGE ("Tipo uso"     , lrPersonas."Tipo uso"::Seleccion);
      lrPersonas.SETRANGE ("Tipo linea"   , lrPersonas."Tipo linea"::Persona);

      IF lrPersonas.FINDSET THEN BEGIN
        REPEAT

          cVarias.PeriodoVacio(lrPers);

          lrPersxHotelTMP.RESET;
          lrPersxHotelTMP.SETCURRENTKEY("Id cotizacion", "Fecha inicio");
          lrPersxHotelTMP.SETRANGE ("N§ Persona", lrPersonas."N§ Persona");
          IF lrPersxHotelTMP.FINDSET THEN BEGIN

            REPEAT

              cVarias.IniciarPeriodo(lrPerActual, lrPersxHotelTMP."Fecha inicio", lrPersxHotelTMP."Fecha fin" - 1);
              cVarias.InterPer(lrPers, lrPerActual, lrPerRes);

              IF NOT cVarias.EstaVacio(lrPerRes) THEN BEGIN
                IF pwInsertaErrores THEN BEGIN
                  lrHoteles.GET(lrPersxHotelTMP."Id Hotel");
                  lrHoteles.InsertarAviso(STRSUBSTNO(Text030,
                                          lrPersonas."N§ Persona", lrPerRes."Period Start", lrPerRes."Period End"));
                END;
                rvOk += 1;
              END;

              cVarias.UnionPerDirecto(lrPers, lrPerActual);

            UNTIL lrPersxHotelTMP.NEXT = 0;
          END;
        UNTIL lrPersonas.NEXT = 0;
      END;
    END;

    PROCEDURE GenerarTransfersHoteles@1103355047(VAR prCab@1103355000 : Record 7009871);
    VAR
      lrZonEntTMP@1103355003 : TEMPORARY Record 7009873;
      lrZonSalTMP@1103355001 : TEMPORARY Record 7009873;
      lrFechas@1103355002 : TEMPORARY Record 2000000007;
      lwZonaAnt@1103355004 : Code[10];
    BEGIN
      // GenerarTransfersHoteles

      // genero un temporary con el cruce entre el hotel y los paxes.
      GenerarPersxHotel(prCab, lrZonEntTMP, wGenHotxPer::"Sin transfer entrada");

      // Limpio la marca de selecci¢n.
      lrZonEntTMP.RESET;
      lrZonEntTMP.MODIFYALL("N§ Linea", 0);

      lrZonEntTMP.RESET;
      IF lrZonEntTMP.FINDSET THEN BEGIN
        REPEAT

          lrZonEntTMP.CALCFIELDS(Zona);
          lrZonEntTMP.Contrato := lrZonEntTMP.Zona;
          lrZonEntTMP.MODIFY;

          // Guardo las fechas donde pueden ocurrir transfers en TMP.
          IF NOT lrFechas.GET(0, lrZonEntTMP."Fecha inicio") THEN BEGIN
            lrFechas.INIT;
            lrFechas."Period Type"  := 0;
            lrFechas."Period Start" := lrZonEntTMP."Fecha inicio";
            lrFechas.INSERT;
          END;

          IF NOT lrFechas.GET(0, lrZonEntTMP."Fecha fin") THEN BEGIN
            lrFechas.INIT;
            lrFechas."Period Type"  := 0;
            lrFechas."Period Start" := lrZonEntTMP."Fecha fin";
            lrFechas.INSERT;
          END;

          // Hago una copia de TMP para las salidas.
          lrZonSalTMP := lrZonEntTMP;
          lrZonSalTMP."Fecha inicio" := lrZonSalTMP."Fecha fin";
          lrZonSalTMP.INSERT;

        UNTIL lrZonEntTMP.NEXT = 0;
      END;

      // Id cotizacion,Fecha inicio,Contrato
      lrFechas.RESET;
      IF lrFechas.FINDSET THEN BEGIN

        REPEAT

          lwZonaAnt := '';



        UNTIL lrFechas.NEXT = 0;

      END;
    END;

    LOCAL PROCEDURE GenerarPersxHotel@1103355052(VAR prCab@1103355000 : Record 7009871;VAR prHotxPersTMP@1103355001 : TEMPORARY Record 7009873;pwTipo@1103355005 : Integer);
    VAR
      lrHoteles@1103355002 : Record 7009873;
      lrDistribs@1103355003 : Record 7009875;
    BEGIN
      // GenerarPersxHotel
      // genero un temporary con el cruce entre el hotel y los paxes.

      prHotxPersTMP.RESET;
      prHotxPersTMP.DELETEALL;

      // Generamos un temporary que cruza la informaci¢n de hoteles con los paxes activos
      // en ese hotel.

      lrHoteles.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHoteles.SETRANGE ("Id cotizacion", prCab.Id);
      lrHoteles.SETRANGE ("Tipo uso"     , lrHoteles."Tipo uso"::Seleccion);
      lrHoteles.SETRANGE ("Tipo linea"   , lrHoteles."Tipo linea"::Hotel);

      IF lrHoteles.FINDSET THEN BEGIN
        REPEAT

          lrDistribs.RESET;
          lrDistribs.SETCURRENTKEY("Id Hotel", "Id habitacion", "Id persona");
          lrDistribs.SETRANGE ("Id Hotel"     , lrHoteles.Id);
          lrDistribs.SETRANGE ("Id habitacion", 0);
          lrDistribs.SETRANGE (Seleccion      , TRUE);

          CASE pwTipo OF
            wGenHotxPer::"Sin transfer entrada": lrDistribs.SETRANGE("Id Transfer Entrada", 0);
            wGenHotxPer::"Sin transfer salida" : lrDistribs.SETRANGE("Id Transfer Salida", 0);
          END;

          IF lrDistribs.FINDSET THEN BEGIN
            REPEAT

              lrDistribs.CALCFIELDS(Nombre, "N§ Persona", Edad);

              prHotxPersTMP              := lrHoteles;

              prHotxPersTMP."N§ Persona" := lrDistribs."N§ Persona";
              prHotxPersTMP.Edad         := lrDistribs.Edad;
              prHotxPersTMP.Nombre       := lrDistribs.Nombre;

              IF pwTipo = wGenHotxPer::"Sin transfer salida" THEN
                prHotxPersTMP."Fecha inicio" := prHotxPersTMP."Fecha fin";

              prHotxPersTMP.Id           := lrDistribs.Id;
              prHotxPersTMP.INSERT;

            UNTIL lrDistribs.NEXT = 0;
          END;

        UNTIL lrHoteles.NEXT = 0;
      END;
    END;

    PROCEDURE GenerarTransfersPeriodo@1103355049(VAR prCab@1103355000 : Record 7009871;pwFechaIni@1103355010 : Date;pwFechaFin@1103355011 : Date;pwTipo@1103355005 : Integer);
    VAR
      lrHotEntTMP@1103355003 : TEMPORARY Record 7009873;
      lrHotSalTMP@1103355001 : TEMPORARY Record 7009873;
      lrTraCot@1103355002 : Record 7009881;
    BEGIN
      // GenerarTransfersPeriodo

      // genero un temporary por persona y hotel para las entradas y salidas de los hoteles.

      CASE pwTipo OF

        lrTraCot."Tipo transfer"::Ambos: BEGIN
          GenerarPersxHotel(prCab, lrHotEntTMP, wGenHotxPer::"Sin transfer entrada");
          GenerarPersxHotel(prCab, lrHotSalTMP, wGenHotxPer::"Sin transfer salida");

          GenerarTransfersPeriodoAmbos(prCab, lrHotEntTMP, lrHotSalTMP, pwFechaIni, pwFechaFin);

        END;

        lrTraCot."Tipo transfer"::Entrada: BEGIN
          GenerarPersxHotel(prCab, lrHotEntTMP, wGenHotxPer::"Sin transfer entrada");
          GenerarTransfersPeriodoUnaDir(prCab, lrHotEntTMP, pwFechaIni, TRUE);
        END;

        lrTraCot."Tipo transfer"::Salida: BEGIN
          GenerarPersxHotel(prCab, lrHotSalTMP, wGenHotxPer::"Sin transfer salida");
          GenerarTransfersPeriodoUnaDir(prCab, lrHotSalTMP, pwFechaFin, FALSE);
        END;

      END;
    END;

    LOCAL PROCEDURE GenerarTransfersPeriodoAmbos@1103355057(VAR prCab@1103355000 : Record 7009871;VAR prHotEntTMP@1103355001 : TEMPORARY Record 7009873;VAR prHotSalTMP@1103355003 : TEMPORARY Record 7009873;pwFechaIni@1103355005 : Date;pwFechaFin@1103355006 : Date);
    VAR
      lrFechas@1103355002 : TEMPORARY Record 2000000007;
      lrHoteles@1103355004 : TEMPORARY Record 353;
      lwNumTransfer@1103355007 : Integer;
      lrParPer@1103355009 : Record 7009701;
      lrTraCot@1103355008 : Record 7009881;
    BEGIN
      // GenerarTransfersPeriodoAmbos

      lwNumTransfer := 0;

      prHotEntTMP.RESET;
      prHotEntTMP.SETCURRENTKEY("Id cotizacion", "Fecha inicio", Contrato);
      prHotEntTMP.SETRANGE ("Fecha inicio", pwFechaIni);

      IF prHotEntTMP.FINDSET(TRUE) THEN BEGIN
        REPEAT

          prHotSalTMP.RESET;
          prHotSalTMP.SETCURRENTKEY("Id cotizacion", "Fecha inicio", Contrato);
          prHotSalTMP.SETRANGE ("Fecha inicio", pwFechaFin);
          prHotSalTMP.SETRANGE ("N§ Persona"  , prHotEntTMP."N§ Persona");
          IF prHotSalTMP.FINDFIRST THEN BEGIN

            IF NOT lrHoteles.GET(prHotEntTMP.Hotel, prHotSalTMP.Hotel) THEN BEGIN
              lwNumTransfer += 1;
              lrHoteles.INIT;
              lrHoteles."Dimension Code"  := prHotEntTMP.Hotel;
              lrHoteles."Dimension Value" := prHotSalTMP.Hotel;
              lrHoteles.ID                := lwNumTransfer;

              lrHoteles.INSERT;

            END;

            prHotEntTMP.Ocupacion := lrHoteles.ID;
            prHotEntTMP.MODIFY;

            prHotSalTMP.Ocupacion := lrHoteles.ID;
            prHotSalTMP.MODIFY;

          END;
        UNTIL prHotEntTMP.NEXT = 0;
      END;

      lrHoteles.RESET;
      IF lrHoteles.FINDSET THEN BEGIN
        REPEAT

          lrTraCot.INIT;
          lrTraCot."Id Cotizacion" := prCab.Id;
          lrTraCot."Fecha inicio"  := pwFechaIni;
          lrTraCot."Fecha fin"     := pwFechaFin;
          lrTraCot."Hotel entrada" := lrHoteles."Dimension Code";
          lrTraCot."Hotel salida"  := lrHoteles."Dimension Value";
          lrTraCot."Tipo Uso"      := lrTraCot."Tipo Uso"::Automatico;

          lrTraCot.INSERT(TRUE);

          prHotEntTMP.RESET;
          prHotEntTMP.SETRANGE (Ocupacion, lrHoteles.ID);
          IF prHotEntTMP.FINDSET THEN BEGIN
            REPEAT

              A¤adirTransferDistrib(lrTraCot, prHotEntTMP, TRUE);

              prHotSalTMP.RESET;
              prHotSalTMP.SETRANGE (Hotel         , lrHoteles."Dimension Value");
              prHotSalTMP.SETRANGE (Ocupacion     , lrHoteles.ID);
              prHotSalTMP.SETRANGE ("N§ Persona"  , prHotEntTMP."N§ Persona");
              IF prHotSalTMP.FINDFIRST THEN BEGIN

                 A¤adirTransferDistrib(lrTraCot, prHotSalTMP, FALSE);

              END;

            UNTIL prHotEntTMP.NEXT = 0;
          END;

          lrTraCot.MODIFY;

        UNTIL lrHoteles.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GenerarTransfersPeriodoUnaDir@1103355056(VAR prCab@1103355000 : Record 7009871;VAR prHotTMP@1103355001 : TEMPORARY Record 7009873;pwFecha@1103355005 : Date;pwEntrada@1103355003 : Boolean);
    VAR
      lrFechas@1103355002 : TEMPORARY Record 2000000007;
      lrHoteles@1103355004 : TEMPORARY Record 353;
      lwNumTransfer@1103355007 : Integer;
      lrParPer@1103355009 : Record 7009701;
      lrTraCot@1103355008 : Record 7009881;
    BEGIN
      // GenerarTransfersPeriodoEntrada

      lwNumTransfer := 0;

      prHotTMP.RESET;
      prHotTMP.SETCURRENTKEY("Id cotizacion", "Fecha inicio", Contrato);
      prHotTMP.SETRANGE ("Fecha inicio", pwFecha);

      IF prHotTMP.FINDSET(TRUE) THEN BEGIN
        REPEAT

          IF NOT lrHoteles.GET(prHotTMP.Hotel, '') THEN BEGIN
            lwNumTransfer += 1;
            lrHoteles.INIT;
            lrHoteles."Dimension Code" := prHotTMP.Hotel;
            lrHoteles.ID               := lwNumTransfer;

            lrHoteles.INSERT;

          END;

          prHotTMP.Ocupacion := lrHoteles.ID;
          prHotTMP.MODIFY;

        UNTIL prHotTMP.NEXT = 0;
      END;

      lrHoteles.RESET;
      IF lrHoteles.FINDSET THEN BEGIN
        REPEAT

          lrTraCot.INIT;
          lrTraCot."Id Cotizacion" := prCab.Id;
          lrTraCot."Fecha inicio"  := pwFecha;
          lrTraCot."Fecha fin"     := pwFecha;
          lrTraCot."Tipo Uso"      := lrTraCot."Tipo Uso"::Automatico;

          IF pwEntrada THEN BEGIN
            lrTraCot."Tipo transfer" := lrTraCot."Tipo transfer"::Entrada;
            lrTraCot."Hotel entrada"  := lrHoteles."Dimension Code";
          END
          ELSE BEGIN
            lrTraCot."Tipo transfer" := lrTraCot."Tipo transfer"::Salida;
            lrTraCot."Hotel salida"  := lrHoteles."Dimension Code";
          END;

          lrTraCot.INSERT(TRUE);

          prHotTMP.RESET;
          prHotTMP.SETRANGE (Ocupacion, lrHoteles.ID);
          IF prHotTMP.FINDSET THEN BEGIN
            REPEAT
              IF pwEntrada THEN
                A¤adirTransferDistrib(lrTraCot, prHotTMP, TRUE)
              ELSE
                A¤adirTransferDistrib(lrTraCot, prHotTMP, FALSE);
            UNTIL prHotTMP.NEXT = 0;
          END;

          lrTraCot.MODIFY;

        UNTIL lrHoteles.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE A¤adirTransferDistrib@1103355065(VAR prTraCot@1103355001 : Record 7009881;VAR prHotxPer@1103355000 : TEMPORARY Record 7009873;pwEntrada@1103355002 : Boolean);
    VAR
      lrDistrib@1103355003 : Record 7009875;
    BEGIN
      // A¤adirTransferDistrib

      IF lrDistrib.GET(prHotxPer.Id) THEN BEGIN

        IF pwEntrada THEN BEGIN

          lrDistrib."Id Transfer Entrada" := prTraCot.Id;
          lrDistrib.MODIFY;

        END
        ELSE BEGIN

          lrDistrib."Id Transfer Salida"  := prTraCot.Id;
          lrDistrib.MODIFY;

        END;

      END;
    END;

    PROCEDURE GenerarTransfersxReserva@1103355048(VAR prCabCot@1103355002 : Record 7009871;pwSeleccion@1103355003 : Boolean;pwTipo@1103355006 : Integer);
    VAR
      lrHoteles@1103355000 : Record 7009873;
      lrDistribs@1103355001 : Record 7009875;
      lrTraCot@1103355004 : Record 7009881;
      lrParPer@1103355005 : Record 7009701;
    BEGIN
      // GenerarTransfersxReserva
      //: Genera un transfer por cada reserva de hotel que encuentre en la cabecera.
      //: @prCabCot: Cabecera de la cotizaci¢n sobre la que se generan los transfers.
      //: @pwSeleccion: Indica si se generan los transfers solo sobre los hoteles seleccionados(TRUE) o todos(FALSE).

      lrParPer.FINDFIRST;

      lrHoteles.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrHoteles.SETRANGE ("Id cotizacion", prCabCot.Id);
      lrHoteles.SETRANGE ("Tipo uso"     , lrHoteles."Tipo uso"::Seleccion);
      lrHoteles.SETRANGE ("Tipo linea"   , lrHoteles."Tipo linea"::Hotel);

      IF pwSeleccion THEN
        lrHoteles.SETRANGE(Seleccion, TRUE);

      IF lrHoteles.FINDSET THEN BEGIN
        REPEAT

          lrTraCot.INIT;

          CASE pwTipo OF

            lrTraCot."Tipo transfer"::Ambos : BEGIN
              lrTraCot."Fecha inicio"  := lrHoteles."Fecha inicio";
              lrTraCot."Fecha fin"     := lrHoteles."Fecha fin";
              lrTraCot."Hotel entrada" := lrHoteles.Hotel;
              lrTraCot."Hotel salida"  := lrHoteles.Hotel;

            END;

            lrTraCot."Tipo transfer"::Entrada : BEGIN
              lrTraCot."Fecha inicio"  := lrHoteles."Fecha inicio";
              lrTraCot."Fecha fin"     := lrHoteles."Fecha inicio";
              lrTraCot."Hotel entrada" := lrHoteles.Hotel;
            END;

            lrTraCot."Tipo transfer"::Salida : BEGIN
              lrTraCot."Fecha inicio"  := lrHoteles."Fecha fin";
              lrTraCot."Fecha fin"     := lrHoteles."Fecha fin";
              lrTraCot."Hotel salida"  := lrHoteles.Hotel;
            END;

          END;

          lrTraCot."Id Cotizacion" := prCabCot.Id;
          lrTraCot."Tipo Uso"      := lrTraCot."Tipo Uso"::Automatico;
          lrTraCot."Tipo transfer" := pwTipo;

          lrTraCot.INSERT(TRUE);

          lrDistribs.RESET;
          lrDistribs.SETCURRENTKEY("Id Hotel", "Id habitacion", "Id persona");
          lrDistribs.SETRANGE ("Id Hotel"     , lrHoteles.Id);
          lrDistribs.SETRANGE ("Id habitacion", 0);
          lrDistribs.SETRANGE (Seleccion      , TRUE);

          IF lrDistribs.FINDSET(TRUE) THEN BEGIN
            REPEAT

              CASE pwTipo OF

                lrTraCot."Tipo transfer"::Ambos: BEGIN
                  // Incluimos el pax si no esta asignado a ningun transfer.
                  IF (lrDistribs."Id Transfer Entrada" = 0) AND (lrDistribs."Id Transfer Salida" = 0) THEN BEGIN

                    lrDistribs."Id Transfer Entrada" := lrTraCot.Id;
                    lrDistribs."Id Transfer Salida"  := lrTraCot.Id;

                    lrDistribs.MODIFY;

                  END;
                END;

                lrTraCot."Tipo transfer"::Entrada: BEGIN
                  // Incluimos el pax si no esta asignado a ningun transfer.
                  IF (lrDistribs."Id Transfer Entrada" = 0) THEN BEGIN

                    lrDistribs."Id Transfer Entrada" := lrTraCot.Id;

                    lrDistribs.MODIFY;

                  END;
                END;

                lrTraCot."Tipo transfer"::Salida: BEGIN
                  // Incluimos el pax si no esta asignado a ningun transfer.
                  IF (lrDistribs."Id Transfer Salida" = 0) THEN BEGIN

                    lrDistribs."Id Transfer Salida" := lrTraCot.Id;

                    lrDistribs.MODIFY;

                  END;
                END;

              END;

            UNTIL lrDistribs.NEXT = 0;
          END;

          lrTraCot.MODIFY;

        UNTIL lrHoteles.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ContarPersonasTransfer@1103355054(VAR prTransfer@1103355000 : Record 7009881;VAR prPersosTMP@1103355003 : TEMPORARY Record 7009873;VAR pwAdultos@1103355001 : Integer;VAR pwNi¤os@1103355002 : Integer);
    VAR
      lrDistribs@1103355004 : Record 7009875;
      lrParPer@1103355005 : Record 7009701;
    BEGIN
      // ContarPersonasTransfer

      prPersosTMP.RESET;

      pwAdultos := 0;
      pwNi¤os   := 0;

      IF prTransfer."Tipo transfer" = prTransfer."Tipo transfer"::Salida THEN BEGIN
        lrDistribs.SETCURRENTKEY("Id Transfer Salida");
        lrDistribs.SETRANGE ("Id Transfer Salida", prTransfer.Id);
      END
      ELSE BEGIN
        lrDistribs.SETCURRENTKEY("Id Transfer Entrada");
        lrDistribs.SETRANGE ("Id Transfer Entrada", prTransfer.Id);
      END;

      lrParPer.FINDFIRST;

      lrDistribs.SETRANGE (Seleccion, TRUE);
      IF lrDistribs.FINDSET THEN BEGIN
        REPEAT

          prPersosTMP.GET(lrDistribs."Id persona");

          CASE GetTipoPersona(prPersosTMP."N§ Persona") OF
            lrParPer."Codigo Adulto": pwAdultos += 1;
            lrParPer."Codigo Ni¤o"  : pwNi¤os   += 1;
          END;

        UNTIL lrDistribs.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GenerarPersonasTrans@1103355063(VAR prCab@1103355000 : Record 7009871;VAR prPersosTMP@1103355001 : TEMPORARY Record 7009873);
    VAR
      lrPersos@1103355002 : Record 7009873;
    BEGIN
      // GenerarPersonasTrans

      prPersosTMP.RESET;
      prPersosTMP.DELETEALL;

      lrPersos.SETCURRENTKEY("Id cotizacion", "Tipo uso", "Tipo linea");
      lrPersos.SETRANGE ("Id cotizacion", prCab.Id);
      lrPersos.SETRANGE ("Tipo uso"     , lrPersos."Tipo uso"::Seleccion);
      lrPersos.SETRANGE ("Tipo linea"   , lrPersos."Tipo linea"::Persona);

      IF lrPersos.FINDSET THEN BEGIN
        REPEAT

          prPersosTMP := lrPersos;
          prPersosTMP.INSERT;

        UNTIL lrPersos.NEXT = 0 ;
      END;
    END;

    PROCEDURE ContarPerTransfer@1103355045(pwIdTra@1103355003 : Integer;VAR pwAdultos@1103355001 : Integer;VAR pwNi¤os@1103355000 : Integer);
    VAR
      lrPersonas@1103355002 : Record 7009873;
      lrDistribs@1103355004 : Record 7009875;
      lrParPer@1103355005 : Record 7009701;
      lrTransfer@1103355007 : Record 7009881;
    BEGIN
      // ContarPerTransfer

      lrTransfer.GET(pwIdTra);

      pwAdultos := 0;
      pwNi¤os   := 0;

      IF lrTransfer."Tipo transfer" = lrTransfer."Tipo transfer"::Salida THEN BEGIN
        lrDistribs.SETCURRENTKEY("Id Transfer Salida");
        lrDistribs.SETRANGE ("Id Transfer Salida", lrTransfer.Id);
      END
      ELSE BEGIN
        lrDistribs.SETCURRENTKEY("Id Transfer Entrada");
        lrDistribs.SETRANGE ("Id Transfer Entrada", lrTransfer.Id);
      END;

      lrParPer.FINDFIRST;

      lrDistribs.SETRANGE (Seleccion, TRUE);
      IF lrDistribs.FINDSET THEN BEGIN
        REPEAT

          lrPersonas.GET(lrDistribs."Id persona");

          CASE GetTipoPersona(lrPersonas."N§ Persona") OF
            lrParPer."Codigo Adulto": pwAdultos += 1;
            lrParPer."Codigo Ni¤o"  : pwNi¤os   += 1;
          END;

        UNTIL lrDistribs.NEXT = 0;
      END;
    END;

    PROCEDURE ContarPerHotel@1103355050(pwIdHotel@1103355000 : Integer;VAR pwAdultos@1103355001 : Integer;VAR pwNi¤os@1103355002 : Integer);
    VAR
      lrDistribs@1103355003 : Record 7009875;
      lrParPer@1103355004 : Record 7009701;
      lrPersonas@1103355006 : Record 7009873;
    BEGIN
      // ContarPerHotel

      pwAdultos := 0;
      pwNi¤os   := 0;

      lrParPer.FINDFIRST;

      lrDistribs.SETCURRENTKEY("Id Hotel", "Id habitacion", "Id persona");
      lrDistribs.SETRANGE ("Id Hotel"     , pwIdHotel);
      lrDistribs.SETRANGE ("Id habitacion", 0);
      lrDistribs.SETRANGE (Seleccion, TRUE);
      IF lrDistribs.FINDSET THEN BEGIN

        REPEAT

          lrPersonas.GET(lrDistribs."Id persona");

          CASE GetTipoPersona(lrPersonas."N§ Persona") OF
            lrParPer."Codigo Adulto": pwAdultos += 1;
            lrParPer."Codigo Ni¤o"  : pwNi¤os   += 1;
          END;

        UNTIL lrDistribs.NEXT = 0;

      END;
    END;

    PROCEDURE CalculoReservaExcursion@1103355051(VAR prCab@1103355002 : Record 7009871;VAR prExcCot@1103355000 : Record 7009883) rvImp : Decimal;
    VAR
      lrResExcTMP@1103355001 : TEMPORARY Record 7010162;
      lrParAg@1103355003 : Record 7009700;
      lwFechaDiv@1103355004 : Date;
      lrCurrExc@1103355005 : Record 330;
    BEGIN
      // CalculoReservaExcursion

      lrParAg.FINDFIRST;

      lrResExcTMP.Delegacion               := prCab.Delegacion;
      lrResExcTMP.Producto                 := prExcCot.Producto;
      lrResExcTMP.TourOperador             := prCab."Touroperador Venta";
      lrResExcTMP."Fecha Excursion"        := prExcCot.Fecha;
      lrResExcTMP."Hotel Cliente"          := prExcCot.Hotel;
      lrResExcTMP.Adultos                  := prExcCot.Adultos;
      lrResExcTMP.Ni¤os                    := prExcCot.Ni¤os;
      lrResExcTMP.Bebes                    := prExcCot.Infants;
      lrResExcTMP.INSERT;

      lrResExcTMP.calcular_reserva(FALSE);

      rvImp := lrResExcTMP."Ingreso reserva";

      IF lrResExcTMP.Divisa <> lrParAg."Divisa TOs cotizacion" THEN BEGIN
        lwFechaDiv := DT2DATE(prCab."Fecha creacion");
        rvImp := ROUND(lrCurrExc.ExchangeAmtFCYToFCY(lwFechaDiv, lrResExcTMP.Divisa, lrParAg."Divisa TOs cotizacion", rvImp));
      END;
    END;

    LOCAL PROCEDURE ComprobarTransfersCorrectos@1103355053(VAR prCabCot@1103355000 : Record 7009871);
    VAR
      lrTraCot@1103355001 : Record 7009881;
    BEGIN
      // ComprobarTransfersCorrectos

      lrTraCot.SETCURRENTKEY("Id Cotizacion");
      lrTraCot.SETRANGE ("Id Cotizacion", prCabCot.Id);

      IF lrTraCot.FINDSET THEN BEGIN
        REPEAT
          CASE lrTraCot."Tipo transfer" OF
            lrTraCot."Tipo transfer"::Ambos, lrTraCot."Tipo transfer"::Entrada: BEGIN
              IF (lrTraCot."Fecha inicio" = 0D) OR (lrTraCot.Origen = '') OR (lrTraCot."Hotel entrada" = '') THEN
                ERROR(Text031);
            END;
            lrTraCot."Tipo transfer"::Ambos, lrTraCot."Tipo transfer"::Salida: BEGIN
              IF (lrTraCot."Fecha fin" = 0D) OR (lrTraCot.Destino = '') OR (lrTraCot."Hotel salida" = '') THEN
                ERROR(Text031);
            END;

          END;

        UNTIL lrTraCot.NEXT = 0;
      END;
    END;

    PROCEDURE LookupHotel@1103355058(pwIdCotizacion@1103355003 : Integer) rvHotel : Code[20];
    VAR
      lrCabCot@1103355000 : Record 7009871;
      lfHoteles@1103355001 : Form 7009731;
      lrHoteles@1103355002 : Record 7009724;
    BEGIN
      // LookupHotel

      IF pwIdCotizacion = 0 THEN
        EXIT('');

      lrCabCot.SETRANGE(Id, pwIdCotizacion);
      lrCabCot.FINDFIRST;

      lrHoteles.SETCURRENTKEY(Pais);
      IF lrCabCot.Pais <> '' THEN BEGIN
        lrHoteles.SETRANGE(Pais, lrCabCot.Pais);
      END;

      lfHoteles.SETTABLEVIEW(lrHoteles);
      lfHoteles.EDITABLE   := FALSE;
      lfHoteles.LOOKUPMODE := TRUE;

      IF lfHoteles.RUNMODAL IN [ACTION::OK, ACTION::LookupOK] THEN BEGIN
        lrHoteles.RESET;
        lfHoteles.GETRECORD(lrHoteles);
        rvHotel := lrHoteles.Hotel;
      END;
    END;

    PROCEDURE ComprobarFechasCabecera@1103355061(pwIdCotizacion@1103355001 : Integer;pwFecha@1103355000 : Date) : Boolean;
    VAR
      lrCab@1103355002 : Record 7009871;
    BEGIN
      // ComprobarFechasCabecera

      lrCab.GET(pwIdCotizacion);
      EXIT((pwFecha >= lrCab."Fecha entrada") AND (pwFecha <= lrCab."Fecha salida"));
    END;

    BEGIN
    {
      ## AJF 15/06/09

        .- (09/00279) Nueva funci¢n LookupHotel para elegir un hotel filtrado por el pais de la
           cabecera cotizaci¢n en diversos campos de la cotizaci¢n.

      ## AJF 29/06/09

        .- (09/00319) cambio c¢digos de hotel de code10 a code20.

      ## AJS 14.01.2010

        .- Nueva funcion NuevaCotizacion para pasar el codigo del formulario, incluye un nuevo confirm

      $001 AJS 21052013 Elimino referencia al campo Argumento Touroperador de la tabla Reserva excursion
    }
    END.
  }
}
