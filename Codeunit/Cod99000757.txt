OBJECT Codeunit 99000757 Update Prod. Order Cost
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SalesLine@1000 : Record 37;
      PurchLine@1001 : Record 39;
      ReqLine@1002 : Record 246;
      ItemJnlLine@1003 : Record 83;
      BOMJnlLine@1004 : Record 89;
      ProdOrderComp@1005 : Record 5407;
      PlanningComponent@1006 : Record 99000829;
      ServiceInvLine@1007 : Record 5902;
      ReservMgt@1008 : Codeunit 99000845;
      ReservEngineMgt@1009 : Codeunit 99000831;
      ReserveProdOrderLine@1010 : Codeunit 99000837;
      ReserveProdOrderComp@1011 : Codeunit 99000838;
      ReservePlanningComponent@1013 : Codeunit 99000840;

    LOCAL PROCEDURE ModifyFor@1(ReservEntry@1000 : Record 337;UnitCost@1001 : Decimal);
    VAR
      ProdOrderLine@1002 : Record 5406;
      ReqLine@1003 : Record 246;
      QtyToReserve@1004 : Decimal;
      QtyReservedThisLine@1005 : Decimal;
    BEGIN
      IF UnitCost = 0 THEN
        EXIT;

      IF NOT ReservEntry.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive) THEN
        EXIT;

      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
            ReservMgt.SetSalesLine(SalesLine);
            ReservMgt.SalesLineUpdateValues(SalesLine,QtyToReserve,QtyReservedThisLine);
            IF SalesLine."Qty. per Unit of Measure" <> 0 THEN
              SalesLine."Unit Cost (LCY)" :=
                ROUND(SalesLine."Unit Cost (LCY)" / SalesLine."Qty. per Unit of Measure");
            IF SalesLine."Quantity (Base)" <> 0 THEN
              SalesLine."Unit Cost (LCY)" :=
                ROUND(
                  (SalesLine."Unit Cost (LCY)" *
                   (SalesLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / SalesLine."Quantity (Base)",0.00001);
            IF SalesLine."Qty. per Unit of Measure" <> 0 THEN
              SalesLine."Unit Cost (LCY)" :=
                ROUND(SalesLine."Unit Cost (LCY)" * SalesLine."Qty. per Unit of Measure");
            SalesLine.VALIDATE("Unit Cost (LCY)");
            SalesLine.MODIFY;
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.GET(ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Ref. No.");
            ReservMgt.ReqLineUpdateValues(ReqLine,QtyToReserve,QtyReservedThisLine);
            IF ReqLine."Qty. per Unit of Measure" <> 0 THEN
              ReqLine."Direct Unit Cost" :=
                ROUND(ReqLine."Direct Unit Cost" / ReqLine."Qty. per Unit of Measure");
            IF ReqLine."Quantity (Base)" <> 0 THEN
              ReqLine."Direct Unit Cost" :=
                ROUND(
                  (ReqLine."Direct Unit Cost" *
                   (ReqLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / ReqLine."Quantity (Base)",0.00001);
            IF ReqLine."Qty. per Unit of Measure" <> 0 THEN
              ReqLine."Direct Unit Cost" :=
                ROUND(ReqLine."Direct Unit Cost" * ReqLine."Qty. per Unit of Measure");
            ReqLine.VALIDATE("Direct Unit Cost");
            ReqLine.MODIFY;
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
            IF PurchLine."Qty. per Unit of Measure" <> 0 THEN
              PurchLine."Unit Cost (LCY)" :=
                ROUND(PurchLine."Unit Cost (LCY)" / PurchLine."Qty. per Unit of Measure");
            IF PurchLine."Quantity (Base)" <> 0 THEN
              PurchLine."Unit Cost (LCY)" :=
                ROUND(
                  (PurchLine."Unit Cost (LCY)" *
                   (PurchLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / PurchLine."Quantity (Base)",0.00001);
            IF PurchLine."Qty. per Unit of Measure" <> 0 THEN
              PurchLine."Unit Cost (LCY)" :=
                ROUND(PurchLine."Unit Cost (LCY)" * PurchLine."Qty. per Unit of Measure");
            PurchLine.VALIDATE("Unit Cost (LCY)");
            PurchLine.MODIFY;
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            ItemJnlLine.GET(
              ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Ref. No.");
            IF ItemJnlLine."Qty. per Unit of Measure" <> 0 THEN
              ItemJnlLine."Unit Cost" :=
                ROUND(ItemJnlLine."Unit Cost" / ItemJnlLine."Qty. per Unit of Measure");
            IF ItemJnlLine."Quantity (Base)" <> 0 THEN
              ItemJnlLine."Unit Cost" :=
                ROUND(
                  (ItemJnlLine."Unit Cost" *
                   (ItemJnlLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / ItemJnlLine."Quantity (Base)",0.00001);
            IF ItemJnlLine."Qty. per Unit of Measure" <> 0 THEN
              ItemJnlLine."Unit Cost" :=
                ROUND(ItemJnlLine."Unit Cost" * ItemJnlLine."Qty. per Unit of Measure");
            ItemJnlLine.VALIDATE("Unit Cost");
            ItemJnlLine.MODIFY;
          END;
        DATABASE::"BOM Journal Line":
          BEGIN
            BOMJnlLine.GET(
              ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Ref. No.");
            IF BOMJnlLine."Qty. per Unit of Measure" <> 0 THEN
              BOMJnlLine."Unit Cost" :=
                ROUND(BOMJnlLine."Unit Cost" / ItemJnlLine."Qty. per Unit of Measure");
            IF BOMJnlLine."Quantity (Base)" <> 0 THEN
              BOMJnlLine."Unit Cost" :=
                ROUND(
                  (BOMJnlLine."Unit Cost" *
                   (BOMJnlLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / BOMJnlLine."Quantity (Base)",0.00001);
            IF BOMJnlLine."Qty. per Unit of Measure" <> 0 THEN
              BOMJnlLine."Unit Cost" :=
                ROUND(BOMJnlLine."Unit Cost" * BOMJnlLine."Qty. per Unit of Measure");
            BOMJnlLine.VALIDATE("Unit Cost");
            BOMJnlLine.MODIFY;
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ProdOrderLine.GET(
              ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Prod. Order Line");
            IF ProdOrderLine."Qty. per Unit of Measure" <> 0 THEN
              ProdOrderLine."Unit Cost" :=
                ROUND(ProdOrderLine."Unit Cost" / ProdOrderLine."Qty. per Unit of Measure");
            IF ProdOrderLine."Quantity (Base)" <> 0 THEN
              ProdOrderLine."Unit Cost" :=
                ROUND(
                  (ProdOrderLine."Unit Cost" *
                   (ProdOrderLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / ProdOrderLine."Quantity (Base)",0.00001);
            IF ProdOrderLine."Qty. per Unit of Measure" <> 0 THEN
              ProdOrderLine."Unit Cost" :=
                ROUND(ProdOrderLine."Unit Cost" * ProdOrderLine."Qty. per Unit of Measure");
            ProdOrderLine.VALIDATE("Unit Cost");
            ProdOrderLine.MODIFY;
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.GET(
              ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Prod. Order Line",ReservEntry."Source Ref. No.");
            ReservMgt.SetProdOrderComponent(ProdOrderComp);
            ReservMgt.ProdOrderCompUpdateValues(ProdOrderComp,QtyToReserve,QtyReservedThisLine);
            IF ProdOrderComp."Qty. per Unit of Measure" <> 0 THEN
              ProdOrderComp."Unit Cost" :=
                ROUND(ProdOrderComp."Unit Cost" / ProdOrderComp."Qty. per Unit of Measure");
            IF ProdOrderComp."Expected Qty. (Base)" <> 0 THEN
              ProdOrderComp."Unit Cost" :=
                ROUND(
                  (ProdOrderComp."Unit Cost" *
                   (ProdOrderComp."Expected Qty. (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / ProdOrderComp."Expected Qty. (Base)",0.00001);
            IF ProdOrderComp."Qty. per Unit of Measure" <> 0 THEN
              ProdOrderComp."Unit Cost" :=
                ROUND(ProdOrderComp."Unit Cost" * ProdOrderComp."Qty. per Unit of Measure");
            ProdOrderComp.VALIDATE("Unit Cost");
            ProdOrderComp.MODIFY;
          END;
        DATABASE::"Planning Component":
          BEGIN
            PlanningComponent.GET(
              ReservEntry."Source ID",
              ReservEntry."Source Batch Name",
              ReservEntry."Source Prod. Order Line",
              ReservEntry."Source Ref. No.");
            IF PlanningComponent."Qty. per Unit of Measure" <> 0 THEN
              PlanningComponent."Unit Cost" :=
                ROUND(PlanningComponent."Unit Cost" / PlanningComponent."Qty. per Unit of Measure");
            IF PlanningComponent."Expected Quantity (Base)" <> 0 THEN
              PlanningComponent."Unit Cost" :=
                ROUND(
                  (PlanningComponent."Unit Cost" *
                   (PlanningComponent."Expected Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / PlanningComponent."Expected Quantity (Base)",0.00001);
            IF PlanningComponent."Qty. per Unit of Measure" <> 0 THEN
              PlanningComponent."Unit Cost" :=
                ROUND(PlanningComponent."Unit Cost" * PlanningComponent."Qty. per Unit of Measure");
            PlanningComponent.VALIDATE("Unit Cost");
            PlanningComponent.MODIFY;
          END;
        DATABASE::"Service Line":
          BEGIN
            ServiceInvLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
            ReservMgt.SetServLine(ServiceInvLine);
            ReservMgt.ServiceInvLineUpdateValues(ServiceInvLine,QtyToReserve,QtyReservedThisLine);
            IF ServiceInvLine."Qty. per Unit of Measure" <> 0 THEN
              ServiceInvLine."Unit Cost (LCY)" :=
                ROUND(ServiceInvLine."Unit Cost (LCY)" / ServiceInvLine."Qty. per Unit of Measure");
            IF ServiceInvLine."Quantity (Base)" <> 0 THEN
              ServiceInvLine."Unit Cost (LCY)" :=
                ROUND(
                  (ServiceInvLine."Unit Cost (LCY)" *
                   (ServiceInvLine."Quantity (Base)" - QtyReservedThisLine) +
                   UnitCost * QtyReservedThisLine) / ServiceInvLine."Quantity (Base)",0.00001);
            IF ServiceInvLine."Qty. per Unit of Measure" <> 0 THEN
              ServiceInvLine."Unit Cost (LCY)" :=
                ROUND(ServiceInvLine."Unit Cost (LCY)" * ServiceInvLine."Qty. per Unit of Measure");
            ServiceInvLine.VALIDATE("Unit Cost (LCY)");
            ServiceInvLine.MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE SumTrackingCosts@9(VAR ReservEntry@1000 : Record 337;VAR TotalUnitCost@1001 : Decimal;VAR TotalCostQty@1002 : Decimal;MultipleLevels@1003 : Boolean;Item@1102601000 : Record 27);
    VAR
      PurchLine@1004 : Record 39;
      ProdOrderLine@1005 : Record 5406;
    BEGIN
      TotalUnitCost := 0;
      TotalCostQty := 0;

      REPEAT
        CASE ReservEntry."Source Type" OF
          DATABASE::"Sales Line":
            BEGIN
              SalesLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
              IF SalesLine."Qty. per Unit of Measure" <> 0 THEN
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(SalesLine."Unit Cost (LCY)" / SalesLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            END;
          DATABASE::"Requisition Line":
            BEGIN
              ReqLine.GET(ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Ref. No.");
              IF ReqLine."Qty. per Unit of Measure" <> 0 THEN
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(ReqLine."Direct Unit Cost" / ReqLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            END;
          DATABASE::"Purchase Line":
            BEGIN
              PurchLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
              IF PurchLine."Qty. per Unit of Measure" <> 0 THEN
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(PurchLine."Unit Cost (LCY)" / PurchLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            END;
          DATABASE::"Item Journal Line":
            BEGIN
              ItemJnlLine.GET(
                ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Ref. No.");
              IF ItemJnlLine."Qty. per Unit of Measure" <> 0 THEN
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(ItemJnlLine."Unit Cost" / ItemJnlLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            END;
          DATABASE::"BOM Journal Line":
            BEGIN
              BOMJnlLine.GET(
                ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Ref. No.");
              IF ItemJnlLine."Qty. per Unit of Measure" <> 0 THEN
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(BOMJnlLine."Unit Cost" / BOMJnlLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            END;
          DATABASE::"Prod. Order Line":
            BEGIN
              ProdOrderLine.GET(
                ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Prod. Order Line");
              IF MultipleLevels THEN BEGIN
                UpdateUnitCostOnProdOrder(ProdOrderLine,MultipleLevels,FALSE);
                ProdOrderLine.GET(
                  ProdOrderLine.Status,
                  ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.");
              END;
              IF ProdOrderLine."Qty. per Unit of Measure" <> 0 THEN
                TotalUnitCost :=
                  ROUND(ProdOrderLine."Unit Cost" / ProdOrderLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            END;
          DATABASE::"Prod. Order Component":
            BEGIN
              ProdOrderComp.GET(
                ReservEntry."Source Subtype",
                ReservEntry."Source ID",
                ReservEntry."Source Prod. Order Line",
                ReservEntry."Source Ref. No.");
              IF ProdOrderComp."Qty. per Unit of Measure" <> 0 THEN
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(Item."Unit Cost" / ProdOrderComp."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            END;
          DATABASE::"Planning Component":
            BEGIN
              PlanningComponent.GET(
                ReservEntry."Source ID",ReservEntry."Source Batch Name",ReservEntry."Source Prod. Order Line",
                ReservEntry."Source Ref. No.");
              IF PlanningComponent."Qty. per Unit of Measure" <> 0 THEN
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(Item."Unit Cost" / PlanningComponent."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            END;
          DATABASE::"Service Line":
            BEGIN
              ServiceInvLine.GET(ReservEntry."Source Subtype",ReservEntry."Source ID",ReservEntry."Source Ref. No.");
              IF ServiceInvLine."Qty. per Unit of Measure" <> 0 THEN
                TotalUnitCost :=
                  TotalUnitCost +
                  ROUND(ServiceInvLine."Unit Cost (LCY)" / ServiceInvLine."Qty. per Unit of Measure",0.00001) *
                  ReservEntry.Quantity;
            END;
        END;
        TotalCostQty := TotalCostQty + ReservEntry.Quantity;
      UNTIL ReservEntry.NEXT = 0;
    END;

    PROCEDURE UpdateUnitCostOnProdOrder@5(VAR ProdOrderLine@1000 : Record 5406;MultipleLevels@1001 : Boolean;UpdateReservation@1002 : Boolean);
    VAR
      Item@1003 : Record 27;
      ProdOrderComp@1004 : Record 5407;
      ReservEntry@1005 : Record 337;
      TotalCostQty@1006 : Decimal;
      TotalUnitCost@1007 : Decimal;
      UnitCost@1008 : Decimal;
    BEGIN
      IF NOT Item.GET(ProdOrderLine."Item No.") THEN
        EXIT;

      IF Item."Costing Method" > Item."Costing Method"::Average THEN
        EXIT;

      ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");

      IF ProdOrderComp.FIND('-') THEN
        REPEAT
          TotalCostQty := 0;
          TotalUnitCost := 0;
          Item.GET(ProdOrderComp."Item No.");
          IF Item."Costing Method" <= Item."Costing Method"::Average THEN BEGIN
            ReservEntry."Source Type" := DATABASE::"Prod. Order Component";
            ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
            ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
            IF ReservEntry.FIND('-') THEN
              SumTrackingCosts(ReservEntry,TotalUnitCost,TotalCostQty,MultipleLevels,Item);
            ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
            TotalUnitCost :=
              TotalUnitCost +
              (Item."Unit Cost" *
               (ProdOrderComp."Expected Qty. (Base)" - ProdOrderComp."Reserved Qty. (Base)"));
            TotalCostQty :=
              TotalCostQty +
              (ProdOrderComp."Expected Qty. (Base)" - ProdOrderComp."Reserved Qty. (Base)");
            IF TotalCostQty <> 0 THEN BEGIN
              UnitCost := TotalUnitCost / TotalCostQty * ProdOrderComp."Qty. per Unit of Measure";
              IF ProdOrderComp."Unit Cost" <> UnitCost THEN BEGIN
                ProdOrderComp.VALIDATE("Unit Cost",UnitCost);
                ProdOrderComp.MODIFY;
              END;
            END;
          END;
        UNTIL ProdOrderComp.NEXT = 0;


      ProdOrderLine.CALCFIELDS(
        "Expected Operation Cost Amt.",
        "Total Exp. Oper. Output (Qty.)",
        "Expected Component Cost Amt.");

      IF ProdOrderLine."Total Exp. Oper. Output (Qty.)" <> 0 THEN
        ProdOrderLine."Expected Operation Cost Amt." :=
          ROUND(
            ProdOrderLine."Expected Operation Cost Amt." /
            ProdOrderLine."Total Exp. Oper. Output (Qty.)" *
            ProdOrderLine.Quantity);

      ProdOrderLine.VALIDATE(
        "Unit Cost",
        (ProdOrderLine."Expected Operation Cost Amt." +
         ProdOrderLine."Expected Component Cost Amt.") /
        ProdOrderLine.Quantity);

      ProdOrderLine.MODIFY;
      IF UpdateReservation THEN BEGIN
        ReservEntry.RESET;
        ReservEntry."Source Type" := DATABASE::"Prod. Order Line";
        ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,FALSE);
        ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
        IF ProdOrderLine."Qty. per Unit of Measure" <> 0 THEN
          UnitCost := ROUND(ProdOrderLine."Unit Cost" / ProdOrderLine."Qty. per Unit of Measure",0.00001)
        ELSE
          UnitCost := ProdOrderLine."Unit Cost";
        IF ReservEntry.FIND('-') THEN
          REPEAT
            ModifyFor(ReservEntry,UnitCost);
          UNTIL ReservEntry.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateUnitCostOnPlanningLine@2(VAR ReqLine@1000 : Record 246;MultipleLevels@1001 : Boolean);
    VAR
      Item@1003 : Record 27;
      PlanningComponent@1004 : Record 99000829;
      ReservEntry@1005 : Record 337;
      TotalCostQty@1006 : Decimal;
      TotalUnitCost@1007 : Decimal;
    BEGIN
      IF NOT Item.GET(ReqLine."No.") THEN
        EXIT;

      IF Item."Costing Method" > Item."Costing Method"::Average THEN
        EXIT;

      PlanningComponent.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
      PlanningComponent.SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
      PlanningComponent.SETRANGE("Worksheet Line No.",ReqLine."Line No.");

      IF PlanningComponent.FIND('-') THEN
        REPEAT
          Item.GET(PlanningComponent."Item No.");
          IF Item."Costing Method" <= Item."Costing Method"::Average THEN BEGIN
            TotalUnitCost := 0;
            TotalCostQty := 0;
            ReservEntry."Source Type" := DATABASE::"Planning Component";
            ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
            ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,FALSE);
            ReservePlanningComponent.FilterReservFor(ReservEntry,PlanningComponent);
            IF ReservEntry.FIND('-') THEN
              SumTrackingCosts(ReservEntry,TotalUnitCost,TotalCostQty,MultipleLevels,Item);
            PlanningComponent.CALCFIELDS("Reserved Qty. (Base)");
            TotalUnitCost :=
              TotalUnitCost +
              (Item."Unit Cost" *
               (PlanningComponent."Expected Quantity (Base)" - PlanningComponent."Reserved Qty. (Base)"));
            TotalCostQty :=
              TotalCostQty +
              (PlanningComponent."Expected Quantity (Base)" - PlanningComponent."Reserved Qty. (Base)");
            IF TotalCostQty <> 0 THEN
              PlanningComponent.VALIDATE(
                "Unit Cost",
                TotalUnitCost / TotalCostQty *
                PlanningComponent."Qty. per Unit of Measure");
            PlanningComponent.MODIFY;
          END;
        UNTIL PlanningComponent.NEXT = 0;


      ReqLine.CALCFIELDS(
        "Expected Operation Cost Amt.",
        "Expected Component Cost Amt.");

      ReqLine.VALIDATE(
        "Unit Cost",
        (ReqLine."Expected Operation Cost Amt." +
         ReqLine."Expected Component Cost Amt.") /
        ReqLine.Quantity);

      ReqLine.MODIFY;
      // Planning Line has been removed ***
      // IF UpdateReservation THEN BEGIN
      // ReservEntry.RESET;
      // ReservEntry."Source Type" := ReservEntry."Source Type"::"Planning Line";
      // ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,FALSE);
      // ReserveReqLine.FilterReservFor(ReservEntry,ReqLine);
      // IF ReqLine."Qty. per Unit of Measure" <> 0 THEN
      // UnitCost := ROUND(ReqLine."Unit Cost" / ReqLine."Qty. per Unit of Measure",0.00001)
      // ELSE
      // UnitCost := ReqLine."Unit Cost";
      // IF ReservEntry.FIND('-') THEN
      // REPEAT
      // ModifyFor(ReservEntry,UnitCost);
      // UNTIL ReservEntry.NEXT = 0;
      // END;
    END;

    BEGIN
    END.
  }
}
