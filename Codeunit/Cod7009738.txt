OBJECT Codeunit 7009738 Validar costes transfer
{
  OBJECT-PROPERTIES
  {
    Date=28/07/15;
    Time=16:13:50;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=VAR
            lrCI@1100253001 : Record 7009805;
            lfValidaCoste@1100253000 : Form 7009944;
            fVal@1000000000 : Form 7010699;
          BEGIN
            CLEAR(fVal);
            fVal.SetModulo(1,'');
            fVal.RUN;
          END;

  }
  CODE
  {
    VAR
      Text000@1103355040 : TextConst 'ENU=Would you like to generate the invoices to be received of the remaining cost lines in the window;ESP=Desea generar el FPR de las lineas de coste pendientes de la ventana';
      Text001@1103355041 : TextConst 'ENU=Generating IBR Transfer'' \;ESP=Generando FPR Transfer...\';
      Text002@1103355042 : TextConst 'ENU=Totalizing per TTOO (1 out of 3);ESP=Totalizando por TTOO (1 de 3)';
      Text003@1103355043 : TextConst 'ENU=Generating ledger entries  (2 out of 3);ESP=Generando asientos   (2 de 3)';
      Text004@1103355044 : TextConst 'ENU=Adjust IBR #1######## Pro. #2#####################;ESP=Ajuste FPR #1######## Pro. #2#####################';
      Text007@1103355047 : TextConst 'ENU=Selecting remaining ones (3 out of 3);ESP=Marcando pendientes  (3 de 3)';
      Text008@1103355048 : TextConst 'ENU=Manual;ESP=Manual';
      Text010@1103355050 : TextConst 'ENU=Accounts for Touroperator %1 does not exist \;ESP=No existen las Cuentas para el Touroperador %1';
      Text011@1103355051 : TextConst 'ENU=in Destination %2.;ESP=en la Delegacion %2.';
      Text012@1103355052 : TextConst 'ENU=Transfer;ESP=Transfer';
      Text013@1103355053 : TextConst 'ENU=Transfer Ledger entries in destination;ESP=Asientos de Transfer en delegacion.';
      Text014@1103355054 : TextConst 'ENU=Cost transfer pruchase inv.;ESP=Coste fras. compra transfers.';
      Text015@1103355055 : TextConst 'ENU=Cost circuit pruchase inv.;ESP=Coste fras. compra circuitos.';
      Text016@1103355056 : TextConst 'ENU=Supplier posting group %1 does not exist;ESP=No existe el Grupo contable proveedor %1.';
      Text017@1103355057 : TextConst 'ENU=Supplier %1 does not exist;ESP=No existe el proveedor %1';
      Text019@1103355059 : TextConst 'ENU=IBR %1-%2;ESP=FPR %1-%2';
      Text021@1103355061 : TextConst 'ENU=TRNI;ESP=TRNI';
      Text022@1103355062 : TextConst 'ENU=Service %1 has not been invoiced, continue?.;ESP=La agrupacion %1 no ha sido facturada, desea continuar.';
      Text023@1103355063 : TextConst 'ENU=Service %1 has not been invoiced;ESP=La agrupacion %1 no ha sido facturada.';
      Text024@1103355064 : TextConst 'ENU=Amount of the lines do not coincide with the invoice.;ESP=Los importes de las lineas no coinciden con el de la factura.';
      Text026@1103355066 : TextConst 'ENU=Purchase contract does not exist for supplier %1 day %2;ESP=No existe contrato compra para el proveedor %1 el dia %2.';
      Text027@1103355067 : TextConst 'ENU=Supplier posting group %1 does not exist;ESP=No existe el grupo contable proveedor %1';
      Text028@1103355068 : TextConst 'ENU=Supplier %1 does not exist;ESP=No existe el proveedor %1.';
      Text030@1103355070 : TextConst 'ENU=Purchase VAT %1 - %2 does not exist;ESP=No existe el IVA de compra %1 - %2.';
      Text031@1103355071 : TextConst 'ENU=Transfers from;ESP=Traslados desde';
      Text032@1103355072 : TextConst 'ENU=" to";ESP=" hasta"';
      rIVACompra@1103355000 : Record 325;
      rConfCmp@1103355001 : Record 312;
      rPar@1103355002 : Record 7009700;
      rLinDiario@1103355003 : Record 81;
      rLinDiario2@1103355004 : Record 81;
      rCtas@1103355005 : Record 7009705;
      rSeccion@1103355006 : Record 232;
      rCli@1103355008 : Record 18;
      rProv@1103355009 : Record 23;
      rGrup@1103355010 : Record 93;
      rCond@1103355012 : Record 7010087;
      rConC@1103355013 : Record 7009787;
      rCabFra@1103355014 : Record 38;
      rLinFra@1103355015 : Record 39;
      rLinFra2@1103355016 : Record 39;
      GLSetup@1103355084 : Record 98;
      CurrExchange@1100217002 : Record 330;
      fConFra@1103355017 : Form 7010113;
      cNom@1103355018 : Codeunit 7009702;
      cNoSeries@1100253002 : Codeunit 396;
      cFunSeg@1100217000 : Codeunit 7009751;
      aux_fecha_desde@1103355019 : ARRAY [150] OF Date;
      aux_fecha_hasta@1103355020 : Date;
      tab_fechas@1103355021 : ARRAY [150,50] OF Date;
      aux_importe_linea@1103355022 : ARRAY [150,50] OF Decimal;
      aux_importe_linea_circuito@1103355023 : ARRAY [150,50] OF Decimal;
      aux_importe_factura@1103355024 : Decimal;
      aux_importe_factura_circuito@1103355025 : Decimal;
      aux_importe_manual@1103355026 : Decimal;
      aux_importe_manual_circuito@1103355027 : Decimal;
      touroperadores@1103355028 : ARRAY [150] OF Code[10];
      tab_proveedor@1103355029 : ARRAY [50] OF Code[10];
      indice@1103355030 : Integer;
      ind_pro@1103355031 : Integer;
      asiento_linea@1103355032 : Integer;
      tab_touroperadores@1103355033 : ARRAY [150] OF Code[10];
      tab_importes@1103355034 : ARRAY [150] OF Decimal;
      tab_importes_circuito@1103355035 : ARRAY [150] OF Decimal;
      indice_to@1103355036 : Integer;
      finestra@1103355037 : Dialog;
      indice_max@1103355038 : Integer;
      signo@1103355039 : Integer;
      Text042@1103355082 : TextConst 'ENU=You have to indicated a barcode associated to the invoice;ESP=No ha especificado un codigo de barras asociado a la factura.';
      Text043@1103355083 : TextConst 'ENU=Costs to validate were not found with the conditions;ESP=No se han encontrado costes a validar con estas condiciones.';
      Text046@1100253000 : TextConst 'ENU=The total of the invoice is higher than the total to validate;ESP=El total de la factura es superior al total a validar.';
      Text047@1100253001 : TextConst 'ENU=Fiscal receipt %1 has been used.;ESP=El comprobante fiscal %1 ya ha sido utilizado.';
      Text048@1100253003 : TextConst 'ENU=Is compulsory to enter the information of fiscal receipt;ESP=Es obligatorio introducir la informacion de comprobante fiscal.';
      wDiarioGeneral@1100217001 : Code[10];
      Text049@1000000000 : TextConst 'ENU=More than one currency have been detected in the lines to validate;ESP=Se ha detectado m s de una divisa en las l¡neas a validar.';
      Text056@1000000001 : TextConst 'ENU=IPR adjustment for differences in exchange rate - Invoice %1;ESP=Ajuste FPR por diferencias de tasa - Factura %1';
      wDivisaCoste@1000000002 : Code[10];
      aux_numdoc_linea@1000000003 : ARRAY [150,50] OF Code[20];
      Text057@1000000005 : TextConst 'ENU=The line selected is already in the invoice;ESP=La l¡nea seleccionada ya forma parte de la factura';
      Text058@1000000004 : TextConst 'ENU=The invoice cannot be validated because is mark to claim.;ESP=La factura no se puede validar porque est  marcada para reclamar.';
      ImpDifPos@1000000006 : Decimal;
      ImpDifNeg@1000000007 : Decimal;
      Text059@1000000008 : TextConst 'ENU=Billing department;ESP=Departamento facturacion';
      Text060@1000000009 : TextConst 'ENU=Do you want to remove the lines selected;ESP=Desea eliminar las lineas seleccionadas';
      Text061@1000000010 : TextConst 'ENU=Invoice already registered;ESP=Factura ya registrada';
      Text062@1000000011 : TextConst 'ENU=Do you want to recalculate the invoice lines;ESP=Desea recalcular las lineas de la factura';
      Text063@1000000012 : TextConst 'ENU=Do you want to add all the pending costs to the invoice;ESP=Desea agregar todos los costes pendientes a la factura';
      Text064@1000000013 : TextConst 'ENU=Service Num.;ESP=Num. Servicio';
      Text065@1000000014 : TextConst 'ENU=vehicle;ESP=vehiculo';
      Text066@1000000015 : TextConst 'ENU=with passage;ESP=con pasaje';
      Text067@1000000016 : TextConst 'ENU=and our amount;ESP=y nuestro importe';
      Text068@1000000017 : TextConst 'ENU=We have found differences in your bill of day %1;ESP=Hemos encontrado diferencias en su factura de dia %1';
      Text069@1000000018 : TextConst 'ENU=We look forward to your reply;ESP=Quedamos a la espera de su respuesta';
      Text070@1000000019 : TextConst 'ENU=Service date;ESP=fecha servicio';
      Text071@1000000020 : TextConst 'ENU=service;ESP=servicio';
      Text072@1000000021 : TextConst 'ENU=The sum of vendor amount in the lines does not match with the header;ESP=La suma de importe proveedor de las lineas no coincide con la cabecera';

    PROCEDURE generar_fpr@1(VAR rLin@1103355000 : Record 7009805;pw_departamento@1103355001 : Code[10]);
    VAR
      lcSincro@1000000000 : Codeunit 7009793;
      rPro@1103355002 : Record 23;
      rLin2@1103355003 : Record 7009805;
      rLin3@1103355004 : Record 7009805;
      nRegs@1103355005 : Integer;
      i@1103355006 : Integer;
      lw_texto@1103355007 : Text[50];
    BEGIN
      // generar_fpr

      //. Existe un parametro para indicar cuando se registra FPR con impuesto y cuando sin impuestos

      rPar.FINDFIRST;

      IF pw_departamento = '' THEN BEGIN
        IF rCond.GET(USERID()) THEN
          rCond.DELETE;
        rCond.INIT;
        rCond.Usuario := USERID();
        rCond.Delegacion := rPar.Delegacion;
        rCond.INSERT;
        COMMIT;
        rCond.FILTERGROUP(2);
        rCond.SETRANGE(Usuario, USERID());
        rCond.FILTERGROUP(0);
        FORM.RUNMODAL(7010126, rCond);
        rCond.GET(USERID);
        IF rCond.Delegacion = '' THEN
          rCond.Delegacion := rPar.Delegacion;
      END;

      indice_max := 0;
      finestra.OPEN(Text001 +
                    '#1############################\' +
                    '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@\');
      rLin2.RESET;
      rLin2.SETCURRENTKEY(Concepto,
                          Fecha,
                          Transportista,
                          Agrupacion);
      rLin2.COPYFILTERS(rLin);
      IF rLin2.FINDSET THEN
      BEGIN
        finestra.UPDATE(1, Text002);
        nRegs := rLin2.COUNT;
        i := 0;
        CLEAR(tab_fechas); // := rLin2.Fecha;
        CLEAR(aux_importe_linea); // := 0;
        CLEAR(aux_importe_linea_circuito);
        REPEAT
          i := i + 1;
          finestra.UPDATE(2, ROUND(i / nRegs * 10000, 1));
          IF rLin2."Pendiente FPR" THEN BEGIN
            busca_touroperador(rLin2.TourOperador, rLin2."Proveedor contable");
            IF ((tab_fechas[indice][ind_pro] > rLin2.Fecha) AND (rLin2.Fecha <> 0D)) OR (tab_fechas[indice][ind_pro] = 0D) THEN
              tab_fechas[indice][ind_pro] := rLin2.Fecha;


            // +$015 ARM 02.09.2014 Buscamos el tipo de cambio y refrescamos los importes DL <
            IF rLin2."Cod. divisa" = '' THEN
            BEGIN
              rLin2."Tipo cambio FPR" := 1;
              rLin2."Importe sin impuestos (DL)" := rLin2."Importe sin impuesto";
              rLin2."Importe con impuestos (DL)" := rLin2."Importe con impuesto";
            END
            ELSE BEGIN
              rLin2."Tipo cambio FPR" := TipoCambioDivisa(rLin2."Cod. divisa", tab_fechas[indice][ind_pro]);

              rLin2."Importe sin impuestos (DL)" := ROUND(CurrExchange.ExchangeAmtFCYToFCY(tab_fechas[indice][ind_pro],
                                                                                           rLin2."Cod. divisa",
                                                                                           '',
                                                                                           rLin2."Importe sin impuesto"));
              rLin2."Importe con impuestos (DL)" := ROUND(CurrExchange.ExchangeAmtFCYToFCY(tab_fechas[indice][ind_pro],
                                                                                           rLin2."Cod. divisa",
                                                                                           '',
                                                                                           rLin2."Importe con impuesto"));
            END;
            rLin2.MODIFY;
            // $015 >

            // AJS 13.11.2003
            // Se ha puesto un parametro para indicar cuando se registra FPR con impuesto y cuando sin impuestos

            IF rLin2.Circuito THEN BEGIN
              IF rPar."Registrar FPR con impuestos" THEN
                aux_importe_linea_circuito[indice][ind_pro] := aux_importe_linea_circuito[indice][ind_pro] +
                                                               rLin2."Importe con impuestos (DL)"
              ELSE
                aux_importe_linea_circuito[indice][ind_pro] := aux_importe_linea_circuito[indice][ind_pro] +
                                                               rLin2."Importe sin impuestos (DL)";
            END
            ELSE BEGIN
              IF rPar."Registrar FPR con impuestos" THEN
                aux_importe_linea[indice][ind_pro] := aux_importe_linea[indice][ind_pro] + rLin2."Importe con impuestos (DL)"
              ELSE
                aux_importe_linea[indice][ind_pro] := aux_importe_linea[indice][ind_pro] + rLin2."Importe sin impuestos (DL)";
            END;

            // < $016 Guardamos el temporal de num doc utilizado por ttoo y fecha
            IF aux_numdoc_linea[indice][ind_pro]  = '' THEN BEGIN
              aux_numdoc_linea[indice][ind_pro] := busca_numdoc(rLin2.Fecha);
            END;
            rLin2."Factura FPR" := aux_numdoc_linea[indice][ind_pro];
            rLin2.MODIFY;
            // $016 >
          END;
        UNTIL rLin2.NEXT = 0;
      END;
      finestra.UPDATE(1, Text003);

      // Recorremos los touroperadores encontrados para generar un asiento con el coste para cada uno

      indice := 1;
      WHILE touroperadores[indice] <> '' DO
      BEGIN
        finestra.UPDATE(2, ROUND(indice / indice_max * 10000, 1));
        ind_pro := 1;
        WHILE tab_proveedor[ind_pro] <> '' DO
        BEGIN

          rPro.GET(tab_proveedor[ind_pro]);

          lw_texto := STRSUBSTNO(Text004,
                                 touroperadores[indice], COPYSTR(rPro.Name, 1, 23));

          IF aux_importe_linea[indice][ind_pro] <> 0 THEN BEGIN
            asegura_cuentas(touroperadores[indice], tab_proveedor[ind_pro]);
            asiento_linea := busca_asiento(wDiarioGeneral, tab_fechas[indice][ind_pro]);

            genera_asiento(0, rCtas."Cta. compra transfer", (-aux_importe_linea[indice][ind_pro]), rCond.Delegacion,
                           tab_fechas[indice][ind_pro], asiento_linea, touroperadores[indice],
                           lw_texto, aux_numdoc_linea[indice][ind_pro], tab_proveedor[ind_pro]); //+$007
            genera_asiento(1, rGrup."Cta. FPR Transfer", (-aux_importe_linea[indice][ind_pro]),
                           rCond.Delegacion, tab_fechas[indice][ind_pro], asiento_linea,
                           touroperadores[indice], lw_texto, aux_numdoc_linea[indice][ind_pro], tab_proveedor[ind_pro]); //+$007

            //+$022 <
            IF rPar."Registrar costes en comerciali" THEN
              lcSincro.SincronizaDiario(rPar.GetLibroDiarioGeneral, 'TRANSFER', '', touroperadores[indice]);
            //+$022 >
          END;
          IF aux_importe_linea_circuito[indice][ind_pro] <> 0 THEN
          BEGIN
            asegura_cuentas(touroperadores[indice], tab_proveedor[ind_pro]);
            asiento_linea := busca_asiento(wDiarioGeneral, tab_fechas[indice][ind_pro]);

            genera_asiento(0, rCtas."Cta. compra circuito", (-aux_importe_linea_circuito[indice][ind_pro]),
                           rCond.Delegacion, tab_fechas[indice][ind_pro], asiento_linea,
                           touroperadores[indice], lw_texto, aux_numdoc_linea[indice][ind_pro], tab_proveedor[ind_pro]); //+$007
            genera_asiento(1, rGrup."Cta. FPR Circuito", (-aux_importe_linea_circuito[indice][ind_pro]),
                           rCond.Delegacion, tab_fechas[indice][ind_pro], asiento_linea,
                           touroperadores[indice], lw_texto, aux_numdoc_linea[indice][ind_pro], tab_proveedor[ind_pro]); //+$007

            //+$022 <
            IF rPar."Registrar costes en comerciali" THEN
              lcSincro.SincronizaDiario(rPar.GetLibroDiarioGeneral, 'TRANSFER', '', touroperadores[indice]);
            //+$022 >
          END;
          ind_pro := ind_pro + 1;
        END;
        indice := indice + 1;
      END;

      // Marcamos las lineas como FPR generado manualmente
      rLin2.SETRANGE("Pendiente FPR", TRUE);
      IF rLin2.FINDSET THEN
      BEGIN
        finestra.UPDATE(1, Text007);
        i := 0;
        REPEAT
          i := i + 1;
          finestra.UPDATE(2, ROUND(i / nRegs * 10000, 1));
          rLin3 := rLin2;
          rLin3."Pendiente FPR" := FALSE;
          //rLin3."Factura FPR"   := Text008;    $016
          rLin3."Fecha FPR"     := TODAY;
          rLin3."Hora FPR"      := TIME;
          rLin3."Usuario FPR"   := USERID;
          rLin3.MODIFY;
        UNTIL rLin2.NEXT = 0;
      END;

      finestra.CLOSE;
    END;

    PROCEDURE asegura_cuentas@2(par_touroperador@1103355000 : Code[10];par_proveedor@1103355001 : Code[10]) : Boolean;
    BEGIN
      // asegura_cuentas

      rPar.FINDFIRST;
      wDiarioGeneral := rPar.GetLibroDiarioGeneral;

      IF NOT rCtas.GET(rPar.Delegacion, par_touroperador) THEN BEGIN
        IF NOT rCtas.GET(rPar.Delegacion, '') THEN
          ERROR(Text010 + ' ' + Text011, par_touroperador, rPar.Delegacion);
      END;

      rCtas.TESTFIELD("Cta. venta transfer");
      rCtas.TESTFIELD("Cta. compra transfer");
      rCtas.TESTFIELD("Cta. compra circuito");
      rCtas.TESTFIELD("Cta. ajuste FPR transfer");

      IF NOT rSeccion.GET(wDiarioGeneral, Text012) THEN BEGIN
        CLEAR(rSeccion);
        rSeccion."Journal Template Name" := wDiarioGeneral;
        rSeccion.Name                    := Text012;
        rSeccion.Description             := Text013;
        rSeccion.INSERT;
      END;

      // asegurar_cuentas

      IF rProv.GET(par_proveedor) THEN
      BEGIN
        IF rGrup.GET(rProv."Vendor Posting Group") THEN
        BEGIN
          rGrup.TESTFIELD("Cta. FPR Transfer");
          rGrup.TESTFIELD("Cta. FPR Circuito");
        END
        ELSE
          ERROR(Text016, rProv."Vendor Posting Group");
      END
      ELSE
        ERROR(Text017, par_proveedor);
    END;

    PROCEDURE busca_touroperador@3(aux_touroperador@1103355000 : Code[10];par_proveedor@1103355001 : Code[10]);
    VAR
      encontrado@1103355002 : Boolean;
    BEGIN
      // busca_touroperador

      indice := 0;
      REPEAT
        indice := indice + 1;
        IF touroperadores[indice] = '' THEN
          touroperadores[indice] := aux_touroperador;
      UNTIL touroperadores[indice] = aux_touroperador;

      IF indice > indice_max THEN
        indice_max := indice;

      ind_pro := 0;
      REPEAT
        ind_pro := ind_pro + 1;
        IF tab_proveedor[ind_pro] = '' THEN
          tab_proveedor[ind_pro] := par_proveedor;
      UNTIL tab_proveedor[ind_pro] = par_proveedor;
    END;

    PROCEDURE busca_asiento@6(pw_libro@1103355000 : Code[10];pw_fecha@1103355001 : Date) : Integer;
    BEGIN
      // busca_asiento

      rLinDiario2.RESET;
      //-$12rLinDiario2.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Posting Date", "Transaction No.");
      rLinDiario2.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Transaction No."); //+$012
      rLinDiario2.SETRANGE("Journal Template Name"  , pw_libro);
      rLinDiario2.SETRANGE("Journal Batch Name", Text012);
      rLinDiario2.SETRANGE("Posting Date"       , pw_fecha);
      IF rLinDiario2.FINDLAST THEN
        EXIT(rLinDiario2."Transaction No." + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE busca_orden@7(pw_libro@1103355000 : Code[20]) : Integer;
    BEGIN
      // busca_orden

      rLinDiario2.RESET;
      rLinDiario2.SETRANGE("Journal Template Name"  , pw_libro);
      rLinDiario2.SETRANGE("Journal Batch Name", Text012);
      IF rLinDiario2.FINDLAST THEN
        EXIT(rLinDiario2."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE genera_asiento@8(par_tipolinea@1103355000 : 'Debe,Haber';par_cuenta@1103355001 : Code[20];par_importe_linea@1103355002 : Decimal;par_departamento@1103355004 : Code[10];par_fecha@1103355005 : Date;par_numasiento@1103355006 : Integer;par_touroperador@1103355007 : Code[10];par_texto_registro@1103355009 : Text[60];par_documento@1103355010 : Code[20];par_proveedor@1100217001 : Code[20]);
    VAR
      lrPar@1103355011 : Record 7009700;
      lrTO@1000000000 : Record 7009717;
      lwDiarioGeneral@1100217000 : Code[10];
    BEGIN
      // genera_asiento

      lrPar.FINDFIRST;
      lwDiarioGeneral := rPar.GetLibroDiarioGeneral;

      CLEAR(rLinDiario);
      rLinDiario."Journal Template Name" := lwDiarioGeneral;
      rLinDiario."Journal Batch Name"    := Text012;
      rLinDiario."Line No."              := busca_orden(lwDiarioGeneral);

      IF lrPar."Fecha registro agencia" = lrPar."Fecha registro agencia"::"Fecha servicio" THEN
        rLinDiario.VALIDATE("Posting Date", par_fecha)
      ELSE
        rLinDiario.VALIDATE("Posting Date", WORKDATE);

      rLinDiario.VALIDATE("Transaction No.", par_numasiento);
      IF par_documento = '' THEN
        rLinDiario.VALIDATE("Document No.", STRSUBSTNO(Text019, rLinDiario."Posting Date",
                                                       par_numasiento))
      ELSE
        rLinDiario.VALIDATE("Document No.", par_documento);
      rLinDiario.VALIDATE("Account Type"             , rLinDiario."Account Type"::"G/L Account");
      rLinDiario.VALIDATE("Account No."              , par_cuenta);
      rLinDiario.VALIDATE("Shortcut Dimension 1 Code", par_departamento);

      //+$024 <
      lrTO.GET(par_touroperador);
      IF lrTO."Codigo en comercializadora" <> '' THEN
        rLinDiario.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
      ELSE
        rLinDiario.VALIDATE("Shortcut Dimension 2 Code", par_touroperador);
      //+$024 >

      rLinDiario.VALIDATE(Description                , par_texto_registro);
      rLinDiario.VALIDATE("Gen. Posting Type"        , 0);
      rLinDiario.VALIDATE("VAT Bus. Posting Group"   , '');
      rLinDiario.VALIDATE("VAT Prod. Posting Group"  , '');
      rLinDiario.VALIDATE("Gen. Bus. Posting Group"  , '');
      rLinDiario.VALIDATE("Gen. Prod. Posting Group" , '');
      rLinDiario.VALIDATE("Currency Code"            , '');
      //+$007 <
      rLinDiario."Source Type" := rLinDiario."Source Type"::Vendor;
      rLinDiario."Source No."  := par_proveedor;
      //+$007 >

      // $004 {
      {
      IF par_tipolinea = par_tipolinea::Debe THEN
        rLinDiario.VALIDATE("Debit Amount", par_importe_linea)
      ELSE
        rLinDiario.VALIDATE("Credit Amount", par_importe_linea);
      }

      IF par_tipolinea = par_tipolinea::Haber THEN
        par_importe_linea := - par_importe_linea;
      rLinDiario.VALIDATE(Amount, par_importe_linea);

      // $004 }

      rLinDiario."System-Created Entry" := TRUE; //+$011
      rLinDiario."Source Code"   := rPar.GetSourceCode(rLinDiario."Journal Template Name"); //+$019
      rLinDiario.INSERT;
    END;

    PROCEDURE validar_factura_coste@4(VAR prCabCoste@1000000002 : Record 7009948);
    VAR
      rLin@1000000003 : Record 7009805;
      rLin2@1103355001 : Record 7009805;
      rLin3@1103355002 : Record 7009805;
      rPro@1103355003 : Record 23;
      texto_confirm@1103355005 : Text[250];
      agrupacion_anterior@1103355006 : Integer;
      lrTMPPrv@1000000000 : TEMPORARY Record 7009805;
      lrDetVal@1000000001 : Record 7009949;
      lwImporteProveedor@1000000004 : Decimal;
    BEGIN
      // validar_factura_coste

      IF prCabCoste.Registrada THEN
        ERROR(Text061);

      cFunSeg.TienePermiso('TRF-VAL-COS', TRUE); // $005

      aux_fecha_hasta              := 0D;
      aux_importe_factura          := 0;
      aux_importe_factura_circuito := 0;
      aux_importe_manual           := 0;

      CLEAR(aux_fecha_desde);
      CLEAR(tab_touroperadores);
      CLEAR(tab_importes);
      CLEAR(tab_importes_circuito);

      //+$001
      IF (prCabCoste."Comprobante Fiscal" = '') AND (prCabCoste."Digitos fijos NCF" <> '') THEN BEGIN //+$003
        ERROR(Text048);
      END;

      // AJS 27.02.2007
      // El codigo de barras es obligatorio al validar
      IF prCabCoste."Codigo de barras" = '' THEN
        ERROR(Text042);

      prCabCoste.TESTFIELD(Departamento);

      // Comprobamos que no se haya reclamado
      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor              , prCabCoste.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabCoste."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro"       , prCabCoste."Fecha registro");
      lrDetVal.SETRANGE(Reclamar               , TRUE);
      IF lrDetVal.FINDFIRST THEN
        ERROR(Text058);

      lrDetVal.SETRANGE(Reclamar);
      IF lrDetVal.FINDSET THEN
      BEGIN
        rLin.RESET;
        rLin.SETRANGE (Concepto           , 'TRNC');
        rLin.SETRANGE (Agrupacion         , lrDetVal.Agrupacion);
        rLin.SETRANGE (Usuario            , prCabCoste."No. Factura proveedor"); //+$027
        rLin.SETRANGE("Proveedor contable", prCabCoste.Proveedor);
        IF rLin.FINDSET THEN;

        agrupacion_anterior := 0;
        lwImporteProveedor  := 0; //+$030
        REPEAT
          rLin2.RESET;
          rLin2.SETRANGE (Concepto           , 'TRNC');
          rLin2.SETRANGE (Agrupacion         , lrDetVal.Agrupacion);
          rLin2.SETRANGE (Usuario            , prCabCoste."No. Factura proveedor"); //+$027
          rLin2.SETRANGE("Proveedor contable", prCabCoste.Proveedor);
          agrupacion_anterior := 0;
          IF rLin2.FINDSET THEN
          BEGIN
            REPEAT
              IF rLin."Cod. divisa" <> rLin2."Cod. divisa" THEN     // $015
                ERROR(Text049);

              IF agrupacion_anterior <> rLin2.Agrupacion THEN
              BEGIN
                rLin3.RESET;
                rLin3.SETRANGE(Agrupacion             , rLin2.Agrupacion);
                rLin3.SETRANGE(Concepto               , Text021);
                rLin3.SETRANGE("N§ Factura"           , '');
                rLin3.SETFILTER("Importe con impuesto", '<>%1', 0);
                IF rLin3.FINDFIRST THEN
                BEGIN
                  texto_confirm := STRSUBSTNO(Text022, rLin2.Agrupacion);
                  IF NOT CONFIRM(texto_confirm) THEN
                    ERROR(Text023, rLin2.Agrupacion);
                END;
                agrupacion_anterior := rLin.Agrupacion;

              END;
            UNTIL rLin2.NEXT = 0;
          END;

          lwImporteProveedor += lrDetVal."Importe proveedor"; //+$030
        UNTIL lrDetVal.NEXT = 0;
      END;

      //. Comprobar el total
      IF lwImporteProveedor <> prCabCoste."Importe proveedor" THEN //+$030
        ERROR(Text072);

      //. Comprobamos si hay que crear un ajuste de FPR
      rLin2.RESET;
      rLin2.SETRANGE(Concepto            , 'TRNC');
      rLin2.SETRANGE("Pendiente FPR"     , TRUE);
      rLin2.SETRANGE("Proveedor contable", prCabCoste.Proveedor);
      rLin2.SETRANGE(Fecha               , prCabCoste."Fecha desde", prCabCoste."Fecha hasta");
      IF rLin2.FINDFIRST THEN
        generar_fpr(rLin2, prCabCoste.Departamento);

      IF lrDetVal.FINDSET THEN
      BEGIN
        REPEAT
          rLin2.RESET;
          rLin2.SETRANGE (Concepto           , 'TRNC');
          rLin2.SETRANGE("Proveedor contable", prCabCoste.Proveedor);
          rLin2.SETRANGE (Agrupacion         , lrDetVal.Agrupacion);
          rLin2.SETRANGE (Usuario            , lrDetVal."No. Factura proveedor");
          IF rLin2.FINDSET THEN
          BEGIN
            aux_fecha_desde[1] := rLin2.Fecha;
            aux_fecha_hasta    := rLin2.Fecha;
            REPEAT
              // Comprobamos que la linea no este incluida en otra factura
              IF rLin2."N§ Factura" = '' THEN
              BEGIN

                // Si la linea es manual sumamos su importe por touroperador para contabilizarlo por separado

                IF rLin2."Tipo creacion" = rLin2."Tipo creacion"::Manual THEN BEGIN
                  buscar_touroperador(rLin2.TourOperador);
                  IF rLin2.Circuito THEN BEGIN
                    aux_importe_manual_circuito := aux_importe_manual_circuito - rLin2."Importe con impuesto";
                    tab_importes_circuito[indice] := tab_importes[indice] + rLin2."Importe con impuesto";
                  END
                  ELSE BEGIN
                    tab_importes[indice] := tab_importes[indice] + rLin2."Importe con impuesto";
                    aux_importe_manual := aux_importe_manual - rLin2."Importe con impuesto";
                  END;
                END;

                IF rLin2.Circuito THEN
                  aux_importe_factura_circuito := aux_importe_factura_circuito - rLin2."Importe con impuesto"
                ELSE
                  aux_importe_factura := aux_importe_factura - rLin2."Importe con impuesto";

                IF (aux_fecha_desde[1] > rLin2.Fecha) AND (rLin2.Fecha <> 0D) THEN
                  aux_fecha_desde[1] := rLin2.Fecha;
                IF (aux_fecha_hasta < rLin2.Fecha) THEN
                  aux_fecha_hasta := rLin2.Fecha;
              END;
            UNTIL rLin2.NEXT = 0;

            // Si hay diferencia creamos ajuste
            IF (lrDetVal.Importe <> lrDetVal."Importe proveedor") OR
               (lrDetVal.Cantidad <> lrDetVal."Cantidad proveedor") THEN
            BEGIN
              CLEAR(rLin);
              IF rLin2.FINDLAST THEN
                rLin."N§ Linea" := rLin2."N§ Linea" + 1
              ELSE
                rLin."N§ Linea" := 1;

              rLin.Agrupacion           := lrDetVal.Agrupacion;
              rLin.Concepto             := rLin2.Concepto;
              rLin.Fecha                := rLin2.Fecha;
              rLin.Transportista        := rLin2.Transportista;
              rLin."Tipo transfer"      := rLin2."Tipo transfer";
              rLin."Tipo creacion"      := rLin."Tipo creacion"::Manual;
              rLin.TourOperador         := rLin2.TourOperador;
              rLin.Destino              := rLin2.Destino;
              rLin."Pendiente FPR"      := FALSE;
              rLin."Cod. divisa"        := rLin2."Cod. divisa"; //+$002
              rLin."Proveedor contable" := rLin2."Proveedor contable"; //+$003
              rLin."Num. Contrato"      := rLin2."Num. Contrato"; //+$003
              rLin."Tipo cambio FPR"    := rLin2."Tipo cambio FPR"; //+$005
              rLin."Impuestos Incluido" := rLin2."Impuestos Incluido";
              rLin.VALIDATE(Importe, lrDetVal.Importe - lrDetVal."Importe proveedor");
              rLin."Cantidad Real"      := lrDetVal.Cantidad - lrDetVal."Cantidad proveedor";
              rLin.INSERT(TRUE);
            END;

            IF (lrDetVal.Importe > lrDetVal."Importe proveedor") THEN
              ImpDifNeg += lrDetVal."Importe proveedor" - lrDetVal.Importe;

            IF (lrDetVal.Importe < lrDetVal."Importe proveedor") THEN
              ImpDifPos += lrDetVal."Importe proveedor" - lrDetVal.Importe;
          END;
        UNTIL lrDetVal.NEXT = 0;
      END;

      busca_proveedor(prCabCoste."Fecha registro", prCabCoste);

      crear_factura(prCabCoste);

      // Almacenar el numero de factura en las lineas de coste/Ingreso

      //+$014
      CLEAR(lrTMPPrv);
      lrTMPPrv.DELETEALL;

      IF lrDetVal.FINDSET THEN
      BEGIN
        REPEAT
          rLin2.RESET;
          rLin2.SETRANGE (Concepto           , 'TRNC');
          rLin2.SETRANGE (Agrupacion         , lrDetVal.Agrupacion);
          rLin2.SETRANGE (Usuario            , lrDetVal."No. Factura proveedor");
          rLin2.SETRANGE("Proveedor contable", prCabCoste.Proveedor);
          IF rLin2.FINDSET THEN
          BEGIN
            REPEAT
              rLin3 := rLin2;
              rLin3."N§ Factura" := prCabCoste."No. Factura proveedor";
              rLin3.Usuario      := '';
              rLin3."Tipo cambio validacion" := prCabCoste."Tasa de cambio"; // $015
              rLin3.MODIFY;

              //. Si tenemos diferencia de tipo de cambio hay que generar un asiento de diferencia
              //+$015 <
              IF rLin3."Tipo cambio FPR" <> rLin3."Tipo cambio validacion" THEN
              BEGIN
                _AcumularImportes(lrTMPPrv, rLin3,
                                  rLin3."Importe sin impuesto" * (rLin3."Tipo cambio validacion" - rLin3."Tipo cambio FPR"))
              END;
              //+$015 >

            UNTIL rLin2.NEXT = 0;
          END;
        UNTIL lrDetVal.NEXT = 0;
      END;

      //+$015 <
      //. Asiento de ajuste de tasa
      _AsientoAjusteTasa(lrTMPPrv, rCabFra."Posting Date", rCabFra."Vendor Invoice No.", rCabFra."Buy-from Vendor No.",
                         rCabFra."Shortcut Dimension 1 Code",prCabCoste);
      //+$015 >
    END;

    PROCEDURE busca_proveedor@12(aux_fecha@1103355000 : Date;VAR prCabCoste@1000000000 : Record 7009948);
    BEGIN
      // busca_proveedor

      IF rProv.GET(prCabCoste.Proveedor) THEN BEGIN
        rConC.RESET;
        rConC.SETCURRENTKEY(Proveedor,
                            "Fecha inicio contrato",
                            "Fecha final contrato");
        rConC.SETRANGE (Proveedor              , rProv."No.");
        rConC.SETFILTER("Fecha inicio contrato", '<=%1', aux_fecha);
        rConC.SETFILTER("Fecha final contrato" , '>=%1', aux_fecha);
        rConC.SETRANGE (Confirmado             , TRUE);
        IF NOT rConC.FINDFIRST THEN
          ERROR(Text026, rProv."No.", aux_fecha);

        IF rGrup.GET(rProv."Vendor Posting Group") THEN BEGIN
          rGrup.TESTFIELD("Payables Account");
          rGrup.TESTFIELD("Cta. FPR Transfer");
          rGrup.TESTFIELD("Cta. FPR Circuito");
        END
        ELSE
          ERROR(Text027, rProv."Vendor Posting Group");
      END
      ELSE
        ERROR(Text028, prCabCoste.Proveedor);
    END;

    PROCEDURE crear_factura@16(VAR prCabCoste@1000000001 : Record 7009948);
    VAR
      lrConfCompra@1103355001 : Record 312;
      rLinea@1000000002 : Record 7009805;
      lrDetVal@1000000003 : Record 7009949;
      lcCheck@1100217000 : Codeunit 11;
      importesin@1103355002 : Decimal;
      importecon@1103355003 : Decimal;
      num_linea@1103355004 : Integer;
      lcRelease@1000000000 : Codeunit 415;
      lcSincro@1000000004 : Codeunit 7009793;
      lrTO@1000000005 : Record 7009717;
    BEGIN
      // crear_factura

      rPar.FINDFIRST;

      // Comprobamos que no se haya reclamado
      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor              , prCabCoste.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabCoste."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro"       , prCabCoste."Fecha registro");
      IF lrDetVal.FINDSET THEN
      BEGIN
        rLinea.RESET;
        rLinea.SETRANGE(Concepto            , 'TRNC');
        rLinea.SETRANGE(Agrupacion          , lrDetVal.Agrupacion);
        rLinea.SETRANGE("Proveedor contable", prCabCoste.Proveedor);
        rLinea.SETRANGE(Usuario             , prCabCoste."No. Factura proveedor");
        rLinea.FINDFIRST;
      END;

      IF NOT rIVACompra.GET(rProv."VAT Bus. Posting Group", rConC."Gr. registro IVA Producto") THEN
        ERROR(Text030, rProv."VAT Bus. Posting Group", rConC."Gr. registro IVA Producto");

      CLEAR(lrConfCompra);
      lrConfCompra.FINDFIRST;

      CLEAR(rCabFra);
      IF prCabCoste."Importe proveedor" > 0 THEN
      BEGIN
        rCabFra.VALIDATE("Document Type", rCabFra."Document Type"::Invoice);
        rCabFra.VALIDATE("No. Series", lrConfCompra."Invoice Nos."); //$006
        signo := 1;
      END
      ELSE
      BEGIN
        rCabFra.VALIDATE("Document Type", rCabFra."Document Type"::"Credit Memo");
        rCabFra.VALIDATE("No. Series", lrConfCompra."Credit Memo Nos.");
        signo := -1;
      END;

      _CheckReasonCode;
      rCabFra.INSERT(TRUE);

      rCabFra.VALIDATE("Buy-from Vendor No.", rConC.Proveedor);
      //+$013 <
      IF prCabCoste."Fecha registro" <> 0D THEN
        rCabFra.VALIDATE("Posting Date"       , prCabCoste."Fecha registro")
      ELSE
        rCabFra.VALIDATE("Posting Date"       , aux_fecha_desde[1]);
      //+$013 >

      lcCheck.DateNotAllowed(rCabFra."Posting Date"); //+$014

      rCabFra.VALIDATE("Posting Description", Text031 + STRSUBSTNO(' %1 ', aux_fecha_desde[1]) +
                                              Text032 + STRSUBSTNO(' %1 ', aux_fecha_hasta));
      rCabFra.VALIDATE("Document Date"      , prCabCoste."Fecha emision proveedor");

      IF prCabCoste."Importe proveedor" > 0 THEN
        rCabFra.VALIDATE("Vendor Invoice No.", prCabCoste."No. Factura proveedor")
      ELSE
        rCabFra.VALIDATE("Vendor Cr. Memo No.", prCabCoste."No. Factura proveedor");

      rCabFra.VALIDATE("Payment Terms Code"       , rConC."Cod. Terminos Pago");
      rCabFra.VALIDATE("Payment Method Code"      , rConC."Cod. Formas Pago");
      rCabFra.VALIDATE("Shortcut Dimension 1 Code", prCabCoste.Departamento);

      //+$024 <
      lrTO.GET(rLinea.TourOperador);
      IF lrTO."Codigo en comercializadora" <> '' THEN
        rCabFra.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
      ELSE
        rCabFra.VALIDATE("Shortcut Dimension 2 Code", rLinea.TourOperador);
      //+$024 >

      //.rCabFra.VALIDATE("Currency Code"            , '');

      // Guardar el codigo de barras en la factura de compra

      rCabFra.VALIDATE("Codigo barras PDF", prCabCoste."Codigo de barras");

      // Rellenar el campo Tipo de factura con un parametro si aplica NCF

      GLSetup.FINDFIRST;
      IF GLSetup."Aplica legislacion NCF" THEN
      BEGIN
        rPar.TESTFIELD("Tipo factura compra Incoming");
        rCabFra."Tipo factura compra" := rPar."Tipo factura compra Incoming";

        // Se incluye el c¢digo del grupo NCF y el n§ de comprobante fiscal.

        IF prCabCoste."Digitos fijos NCF" <> '' THEN
          rCabFra."Comprobante Fiscal" := prCabCoste."Comprobante Fiscal";
      END;

      IF GLSetup."LCY Code" <> rCabFra."Currency Code" THEN
      BEGIN
        //+$015 <
        IF prCabCoste."Tasa de cambio" <> 0 THEN
          rCabFra.VALIDATE("Currency Factor", 1 / prCabCoste."Tasa de cambio");
        //+$015 >
      END;

      rCabFra.MODIFY;

      //. Vamos a controlar la divisa de coste para aquellos casos en que CNT utiliza distintos
      //. codigos para la misma divisa, haciendolo de esta manera no se hace conversion entre el
      //. importe calculado en excursion y el enviado a contabilidad
      wDivisaCoste := rLinea."Cod. divisa";
      IF COPYSTR(wDivisaCoste, 1, 2) = COPYSTR(rCabFra."Currency Code", 1, 2) THEN
        wDivisaCoste := rCabFra."Currency Code";

      // Generar las lineas de factura contra FPR

      rellena_linea_factura(FALSE, rLinea, prCabCoste);  // Creamos la linea de factura del coste de Transfer

      rellena_linea_factura(TRUE, rLinea, prCabCoste);   // Creamos la linea de factura del coste de Circuitos

      linea_factura_diferencia(rLinea, prCabCoste);     // Creamos las lineas de factura por las diferencias

      //+$018 <
      IF rCabFra.GET(rCabFra."Document Type", rCabFra."No.") THEN
        lcRelease.RUN(rCabFra);
      //+$018 >

      //+$021 <
      IF rCabFra.GET(rCabFra."Document Type", rCabFra."No.") THEN
      BEGIN
        rCabFra."Reason Code" := 'ATENNEA';
        rCabFra.MODIFY;
      END;
      //+$021 >

      //+$023 <
      IF rPar."Registrar costes en comerciali" THEN
        lcSincro.SincronizaDocCompra(rCabFra."Document Type", rCabFra."No.", rCabFra."Shortcut Dimension 2 Code");
      //+$023 >

      prCabCoste.Registrada            := TRUE;
      prCabCoste."Usuario registro"    := USERID;
      prCabCoste."Fecha/hora registro" := CURRENTDATETIME;
      prCabCoste.MODIFY;
    END;

    PROCEDURE buscar_touroperador@11(par_touroperador@1103355000 : Code[10]);
    VAR
      encontrado@1103355001 : Boolean;
    BEGIN
      // buscar_touroperador

      encontrado := FALSE;
      indice := 1;
      WHILE NOT encontrado DO BEGIN
        IF tab_touroperadores[indice] = '' THEN BEGIN
          tab_touroperadores[indice] := par_touroperador;
          encontrado := TRUE;
        END
        ELSE BEGIN
          IF tab_touroperadores[indice] = par_touroperador THEN
            encontrado := TRUE
          ELSE
            indice := indice + 1;
        END;
      END;
    END;

    PROCEDURE rellena_linea_factura@22(circuito@1103355000 : Boolean;VAR par_linea@1103355001 : Record 7009805;VAR prCabCoste@1000000000 : Record 7009948);
    VAR
      importesin@1103355002 : Decimal;
      importecon@1103355003 : Decimal;
      num_linea@1103355004 : Integer;
      importe_ajuste@1103355005 : Decimal;
      aux_lin@1103355006 : Record 39;
      lrCtas@1100253000 : Record 7009705;
      lrPar@1100253001 : Record 7009700;
      lrCurrency@1100253002 : Record 4;
      lrTO@1000000001 : Record 7009717;
    BEGIN
      // rellena_linea_factura

      // Buscamos la ultima linea de factura creada

      CLEAR(aux_lin);
      aux_lin.SETRANGE("Document Type", rCabFra."Document Type");
      aux_lin.SETRANGE("Document No." , rCabFra."No.");
      IF aux_lin.FINDLAST THEN
        num_linea := aux_lin."Line No." + 10000
      ELSE
        num_linea := 10000;

      IF circuito THEN
        importecon := signo * (aux_importe_factura_circuito)
      ELSE
        importecon := signo * (aux_importe_factura);

      importesin := ROUND(importecon / (1 + (rIVACompra."VAT+EC %" / 100)), lrCurrency."Amount Rounding Precision");

      CLEAR(rLinFra);
      IF importecon <> 0 THEN
      BEGIN
        rLinFra.VALIDATE("Document Type", rCabFra."Document Type");
        rLinFra.VALIDATE("Document No." , rCabFra."No.");
        rLinFra.VALIDATE("Line No."     , num_linea);
        rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
        rLinFra.INSERT(TRUE);

        IF circuito THEN
          rLinFra.VALIDATE("No.", rGrup."Cta. FPR Circuito")
        ELSE
          rLinFra.VALIDATE("No.", rGrup."Cta. FPR Transfer");

        rLinFra.VALIDATE("Buy-from Vendor No."      , rConC.Proveedor);
        rLinFra.VALIDATE("Shortcut Dimension 1 Code", rCabFra."Shortcut Dimension 1 Code");

        //+$024 <
        lrTO.GET(par_linea.TourOperador);
        IF lrTO."Codigo en comercializadora" <> '' THEN
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
        ELSE
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", par_linea.TourOperador);
        //+$024 >

        rLinFra.VALIDATE("Allow Invoice Disc."    , FALSE);
        rLinFra.VALIDATE(Quantity                 , 1);
        rLinFra.VALIDATE("VAT Prod. Posting Group", rConC."Gr. registro IVA Producto");

        //+$009 <
        IF rCabFra."Prices Including VAT" THEN
        BEGIN
          IF rCabFra."Currency Code" <> wDivisaCoste THEN //+$028
            rLinFra.VALIDATE("Direct Unit Cost", ROUND(importecon * prCabCoste."Tasa de cambio"))
          ELSE
            rLinFra.VALIDATE("Direct Unit Cost", importecon);
        END
        ELSE
        BEGIN
          IF rCabFra."Currency Code" <> wDivisaCoste THEN //+$028
            //+$009 <
            rLinFra.VALIDATE("Direct Unit Cost", ROUND(importesin * prCabCoste."Tasa de cambio"))
          ELSE
            rLinFra.VALIDATE("Direct Unit Cost", importesin);
        END;

        //-$017rLinFra."Amount Including VAT" := CurrExchange.ExchangeAmtFCYToFCY(rCabFra."Posting Date",
        //-$017                                                                   lwDivisaCoste,
        //-$017                                                                   rCabFra."Currency Code",
        //-$017                                                                   importecon);
        //-$017rLinFra.Amount                 := CurrExchange.ExchangeAmtFCYToFCY(rCabFra."Posting Date",
        //-$017                                                                   lwDivisaCoste,
        //-$017                                                                   rCabFra."Currency Code",
        //-$017                                                                   importesin);

        //+$009 >
        rLinFra."Line Discount %"      := 0;
        rLinFra.ActualizaCamposImporte; //+$017
        rLinFra.MODIFY;
      END;
    END;

    PROCEDURE linea_factura_diferencia@1000000007(VAR par_linea@1103355001 : Record 7009805;VAR prCabCoste@1000000000 : Record 7009948);
    VAR
      importesin@1103355002 : Decimal;
      importecon@1103355003 : Decimal;
      num_linea@1103355004 : Integer;
      importe_ajuste@1103355005 : Decimal;
      aux_lin@1103355006 : Record 39;
      lrCtas@1100253000 : Record 7009705;
      lrPar@1100253001 : Record 7009700;
      lrCurrency@1100253002 : Record 4;
      lrTO@1000000001 : Record 7009717;
    BEGIN
      // rellena_linea_factura

      // Buscamos la ultima linea de factura creada

      CLEAR(aux_lin);
      aux_lin.SETRANGE("Document Type", rCabFra."Document Type");
      aux_lin.SETRANGE("Document No." , rCabFra."No.");
      IF aux_lin.FINDLAST THEN
        num_linea := aux_lin."Line No." + 10000
      ELSE
        num_linea := 10000;

      // Diferencia positiva
      IF ImpDifPos <> 0 THEN
      BEGIN
        CLEAR(rLinFra);
        rLinFra.VALIDATE("Document Type", rCabFra."Document Type");
        rLinFra.VALIDATE("Document No." , rCabFra."No.");
        rLinFra.VALIDATE("Line No."     , num_linea + 10000);
        rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
        rLinFra.INSERT(TRUE);

        lrPar.FINDFIRST;
        lrCtas.GET(rPar.Delegacion, par_linea.TourOperador);
        lrCtas.TESTFIELD("Cta. compra transfer");
        rLinFra.VALIDATE("No.", lrCtas."Cta. ajuste FPR transfer");

        rLinFra.VALIDATE("Buy-from Vendor No."      , rConC.Proveedor);
        rLinFra.VALIDATE("Shortcut Dimension 1 Code", rCabFra."Shortcut Dimension 1 Code");

        //+$024 <
        lrTO.GET(par_linea.TourOperador);
        IF lrTO."Codigo en comercializadora" <> '' THEN
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
        ELSE
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", par_linea.TourOperador);
        //+$024 >

        rLinFra.VALIDATE("Allow Invoice Disc."    , FALSE);
        rLinFra.VALIDATE(Quantity                 , 1);
        rLinFra.VALIDATE("VAT Prod. Posting Group", rConC."Gr. registro IVA Producto");

        IF rCabFra."Currency Code" <> wDivisaCoste THEN //+$028
          rLinFra.VALIDATE("Direct Unit Cost", ROUND(ImpDifPos * prCabCoste."Tasa de cambio"))
        ELSE
          rLinFra.VALIDATE("Direct Unit Cost", ImpDifPos);

        rLinFra."Line Discount %"      := 0;
        rLinFra.MODIFY;
        num_linea += 10000;
      END;

      // Diferencia negativa
      IF ImpDifNeg <> 0 THEN
      BEGIN
        CLEAR(rLinFra);
        rLinFra.VALIDATE("Document Type", rCabFra."Document Type");
        rLinFra.VALIDATE("Document No." , rCabFra."No.");
        rLinFra.VALIDATE("Line No."     , num_linea + 10000);
        rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
        rLinFra.INSERT(TRUE);

        lrPar.FINDFIRST;
        lrCtas.GET(rPar.Delegacion, par_linea.TourOperador);
        lrCtas.TESTFIELD("Cta. compra transfer");
        rLinFra.VALIDATE("No.", lrCtas."Cta. compra transfer");

        rLinFra.VALIDATE("Buy-from Vendor No."      , rConC.Proveedor);
        rLinFra.VALIDATE("Shortcut Dimension 1 Code", rCabFra."Shortcut Dimension 1 Code");

        //+$024 <
        lrTO.GET(par_linea.TourOperador);
        IF lrTO."Codigo en comercializadora" <> '' THEN
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
        ELSE
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", par_linea.TourOperador);
        //+$024 >

        rLinFra.VALIDATE("Allow Invoice Disc."    , FALSE);
        rLinFra.VALIDATE(Quantity                 , 1);
        rLinFra.VALIDATE("VAT Prod. Posting Group", rConC."Gr. registro IVA Producto");

        IF rCabFra."Currency Code" <> wDivisaCoste THEN //+$028
          rLinFra.VALIDATE("Direct Unit Cost", ROUND(ImpDifNeg * prCabCoste."Tasa de cambio"))
        ELSE
          rLinFra.VALIDATE("Direct Unit Cost", ImpDifNeg);

        rLinFra."Line Discount %"      := 0;
        rLinFra.MODIFY;
        num_linea += 10000;
      END;
    END;

    LOCAL PROCEDURE _AsientoAjusteTasa@1100217001(VAR prTMPPrv@1100217007 : TEMPORARY Record 7009805;pwFecha@1100217000 : Date;pwFactura@1100217001 : Code[20];pwProveedor@1100217002 : Code[20];pwDepartamento@1100217005 : Code[10];VAR prCabCoste@1000000000 : Record 7009948);
    VAR
      lrCtas@1100217008 : Record 7009705;
      lwDoc@1100217003 : Code[20];
      lwTexto@1100217006 : Text[80];
      lwImporte@1100217004 : Decimal;
      lcSincro@1000000001 : Codeunit 7009793;
    BEGIN
      // Numero de asiento

      lwDoc := 'AJ' + pwFactura;

      lwTexto := STRSUBSTNO(Text056, pwFactura);

      CLEAR(prTMPPrv);
      IF prTMPPrv.FINDSET THEN
      BEGIN
        REPEAT
          asegura_cuentas(prTMPPrv.TourOperador, prTMPPrv."Proveedor contable");
          asiento_linea := busca_asiento(wDiarioGeneral, pwFecha);
          IF prTMPPrv.Circuito THEN BEGIN
            genera_asiento(0, rCtas."Cta. compra circuito", prTMPPrv.Importe, prCabCoste.Departamento,
                           pwFecha, asiento_linea, prTMPPrv.TourOperador,
                           lwTexto, lwDoc, pwProveedor);
            genera_asiento(1, rGrup."Cta. FPR Circuito", prTMPPrv.Importe,
                           prCabCoste.Departamento, pwFecha, asiento_linea,prTMPPrv.TourOperador,
                           lwTexto, lwDoc, pwProveedor);
          END
          ELSE BEGIN
            genera_asiento(0, rCtas."Cta. compra transfer", prTMPPrv.Importe, prCabCoste.Departamento,
                           pwFecha, asiento_linea, prTMPPrv.TourOperador,
                           lwTexto, lwDoc, pwProveedor);
            genera_asiento(1, rGrup."Cta. FPR Transfer", prTMPPrv.Importe,
                           prCabCoste.Departamento, pwFecha, asiento_linea, prTMPPrv.TourOperador,
                           lwTexto, lwDoc, pwProveedor);
          END;

          //+$023 <
          IF rPar."Registrar costes en comerciali" THEN
            lcSincro.SincronizaDiario(rPar.GetLibroDiarioGeneral, Text012, '', prTMPPrv.TourOperador);
          //+$023 >
        UNTIL prTMPPrv.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _AcumularImportes@1100217002(VAR prTMPPrv@1100217000 : TEMPORARY Record 7009805;lrCoste@1100217001 : Record 7009805;pwImporte@1100217002 : Decimal);
    BEGIN
      CLEAR(prTMPPrv);
      prTMPPrv.SETRANGE(TourOperador, lrCoste.TourOperador);
      prTMPPrv.SETRANGE(Circuito    , lrCoste.Circuito);
      IF NOT prTMPPrv.FINDSET THEN
      BEGIN
        CLEAR(prTMPPrv);
        prTMPPrv.Agrupacion           := lrCoste.Agrupacion;     //PK
        prTMPPrv."N§ Linea"           := lrCoste."N§ Linea";  //PK
        prTMPPrv."Proveedor contable" := lrCoste."Proveedor contable";
        prTMPPrv.TourOperador         := lrCoste.TourOperador;
        prTMPPrv.Transportista        := lrCoste.Transportista;
        prTMPPrv.Fecha                := lrCoste.Fecha;
        prTMPPrv.Circuito             := lrCoste.Circuito;
        prTMPPrv.INSERT;
      END;

      prTMPPrv.Importe -= pwImporte;
      prTMPPrv.Fecha := lrCoste.Fecha;
      prTMPPrv.MODIFY;
    END;

    PROCEDURE TipoCambioDivisa@1000000000(pwDivisa@1000000001 : Code[10];pwFecha@1000000002 : Date) : Decimal;
    VAR
      lrCurrExchange@1000000000 : Record 330;
    BEGIN
      // _TipoCambioDivisa

      lrCurrExchange.RESET;
      lrCurrExchange.SETRANGE ("Currency Code"  , pwDivisa);
      lrCurrExchange.SETFILTER("Starting Date", '<=%1', pwFecha);
      lrCurrExchange.FINDLAST;

      EXIT(lrCurrExchange."Relational Exch. Rate Amount")
    END;

    PROCEDURE busca_numdoc@1000000001(vFec@1000000000 : Date) vNum : Code[20];
    BEGIN
      // Resolvemos el n§ de serie para el asiento fpr  $016
      rPar.TESTFIELD(rPar."Serie num. doc. FPR transfer");
      IF rPar."Fecha registro agencia" = rPar."Fecha registro agencia"::"Fecha servicio" THEN
        vNum := cNoSeries.GetNextNo(rPar."Serie num. doc. FPR transfer", vFec, TRUE)
      ELSE
        vNum := cNoSeries.GetNextNo(rPar."Serie num. doc. FPR transfer", WORKDATE, TRUE);
    END;

    LOCAL PROCEDURE _CheckReasonCode@1000000008();
    VAR
      lrReason@1000000000 : Record 231;
      TextCodAu@1000000001 : TextConst 'ENU=ATENNEA;ESP=ATENNEA';
    BEGIN
      // _CheckReasonCode

      IF NOT lrReason.GET(TextCodAu) THEN
      BEGIN
        lrReason.INIT;
        lrReason.Code        := TextCodAu;
        lrReason.Description := lrReason.Code;
        lrReason.INSERT;
      END;
    END;

    PROCEDURE BuscaCosteValidacion@1000000004(VAR prCabCoste@1000000000 : Record 7009948);
    VAR
      lrDetCoste@1000000001 : Record 7009949;
      lrCoste@1000000002 : Record 7009805;
      lrCoste2@1000000004 : Record 7009805;
      lrAgru@1000000003 : Record 7009796;
    BEGIN
      // +$020
      // Si no est  todo relleno salimos
      IF (prCabCoste."Fecha desde" = 0D) OR
         (prCabCoste."Fecha hasta" = 0D) OR
         (prCabCoste.Proveedor = '') OR
         (prCabCoste.Departamento = '') OR
         (prCabCoste."No. Factura proveedor" = '') OR
         (prCabCoste."Fecha registro" = 0D) THEN
         EXIT;

      // Si ya hay alguna l¡nea pide si se recalcula
      lrDetCoste.RESET;
      lrDetCoste.SETRANGE(Proveedor              , prCabCoste.Proveedor);
      lrDetCoste.SETRANGE("No. Factura proveedor", prCabCoste."No. Factura proveedor");
      lrDetCoste.SETRANGE("Fecha registro"       , prCabCoste."Fecha registro");
      IF lrDetCoste.FINDFIRST THEN
      BEGIN
        IF NOT CONFIRM(Text062) THEN
          EXIT
        ELSE
        BEGIN
          lrDetCoste.DELETEALL(TRUE);

          prCabCoste."Importe proveedor"      := 0;
          prCabCoste."Importe proveedor (DL)" := 0;
          prCabCoste."Importe agencia"        := 0;
          prCabCoste."Importe agencia (DL)"   := 0;
          prCabCoste.MODIFY;
        END;
      END
      ELSE
        IF NOT CONFIRM (Text063) THEN
          EXIT;

      // Buscamos los costes que est n dentro de la cabecera de validacion de coste
      lrCoste.RESET;
      lrCoste.SETCURRENTKEY(Concepto, Fecha, "Proveedor contable", Agrupacion);
      lrCoste.SETRANGE ("Proveedor contable", prCabCoste.Proveedor);
      lrCoste.SETRANGE (Fecha               , prCabCoste."Fecha desde", prCabCoste."Fecha hasta");
      lrCoste.SETRANGE (Concepto            , 'TRNC');
      lrCoste.SETFILTER("N§ Factura"        , '%1', '');
      lrCoste.SETRANGE (Usuario             , '');
      IF lrCoste.FINDFIRST THEN BEGIN
        REPEAT
          lrDetCoste.RESET;
          lrDetCoste.SETRANGE(Proveedor                , prCabCoste.Proveedor);
          lrDetCoste.SETRANGE("No. Factura proveedor"  , prCabCoste."No. Factura proveedor");
          lrDetCoste.SETRANGE("Fecha registro"         , prCabCoste."Fecha registro");
          lrDetCoste.SETRANGE("N§ Servicio / N§ Ticket", FORMAT(lrCoste.Agrupacion));
          IF NOT lrDetCoste.FINDFIRST THEN
          BEGIN

            lrDetCoste.INIT;
            lrDetCoste.Proveedor               := prCabCoste.Proveedor;
            lrDetCoste."No. Factura proveedor" := prCabCoste."No. Factura proveedor";
            lrDetCoste."Fecha registro"        := prCabCoste."Fecha registro";

            lrDetCoste."N§ Servicio / N§ Ticket"     := FORMAT(lrCoste.Agrupacion);
            lrDetCoste.Agrupacion                    := lrCoste.Agrupacion;
            lrDetCoste.Fecha                         := lrCoste.Fecha;
            lrDetCoste."Tipo servicio transportista" := lrCoste."Tipo servicio transportista";
            lrDetCoste.Origen                        := lrCoste.Origen;
            lrDetCoste.Destino                       := lrCoste.Destino;
            lrDetCoste."Tipo transfer"               := lrCoste."Tipo transfer";
            lrDetCoste."Tipo Vehiculo"               := lrCoste."Tipo Vehiculo";
            lrDetCoste.Vuelos                        := lrCoste.Vuelos;
            lrDetCoste."Pendiente FPR"               := lrCoste."Pendiente FPR";

            lrAgru.RESET;
            lrAgru.GET(lrCoste.Agrupacion);

            lrDetCoste."Capacidad Vehiculo" := lrAgru."Capacidad Vehiculo";

            lrDetCoste.Cantidad             := lrCoste."Cantidad Real";
            lrDetCoste."Cantidad proveedor" := lrCoste."Cantidad Real";

            //. Dependiendo del proveedor sumaremos el importe con o sin impuestos
            IF prCabCoste."Impuestos incluidos" THEN
            BEGIN
              lrDetCoste.Importe             := (-1) * lrCoste."Importe con impuesto";
              lrDetCoste."Importe proveedor" := (-1) * lrCoste."Importe con impuesto";
              prCabCoste.VALIDATE(prCabCoste."Importe agencia" , prCabCoste."Importe agencia" +
                                  ((-1) * lrCoste."Importe con impuesto"));
            END
            ELSE
            BEGIN
              lrDetCoste.Importe             := (-1) * lrCoste."Importe sin impuesto";
              lrDetCoste."Importe proveedor" := (-1) * lrCoste."Importe sin impuesto";
              prCabCoste.VALIDATE(prCabCoste."Importe agencia" , prCabCoste."Importe agencia" +
                                  ((-1) * lrCoste."Importe sin impuesto"));
            END;
            lrDetCoste.INSERT;

            IF prCabCoste."Cod. Divisa" = '' THEN
              prCabCoste.VALIDATE("Cod. Divisa", lrCoste."Cod. divisa")
            ELSE
              IF prCabCoste."Cod. Divisa" <> lrCoste."Cod. divisa" THEN
                ERROR(Text049);

          END
          ELSE
          BEGIN
            lrDetCoste.Cantidad             += lrCoste."Cantidad Real";
            lrDetCoste."Cantidad proveedor" += lrCoste."Cantidad Real";
            //. Dependiendo del proveedor sumaremos el importe con o sin impuestos
            IF prCabCoste."Impuestos incluidos" THEN
            BEGIN
              lrDetCoste.Importe             += (-1) * lrCoste."Importe con impuesto";
              lrDetCoste."Importe proveedor" += (-1) * lrCoste."Importe con impuesto";
              prCabCoste.VALIDATE(prCabCoste."Importe agencia" , prCabCoste."Importe agencia" +
                                  ((-1) * lrCoste."Importe con impuesto"));
            END
            ELSE
            BEGIN
              lrDetCoste.Importe             += (-1) * lrCoste."Importe sin impuesto";
              lrDetCoste."Importe proveedor" += (-1) * lrCoste."Importe sin impuesto";
              prCabCoste.VALIDATE(prCabCoste."Importe agencia" , prCabCoste."Importe agencia" +
                                  ((-1) * lrCoste."Importe sin impuesto"));
            END;
            lrDetCoste.MODIFY;
          END;

          //. Marcamos las lineas con el codigo de usuario
          lrCoste2 := lrCoste;
          lrCoste2.Usuario := prCabCoste."No. Factura proveedor";
          lrCoste2.MODIFY;
        UNTIL lrCoste.NEXT = 0;
      END;
      prCabCoste.MODIFY;
    END;

    PROCEDURE AgregarCoste@1000000005(VAR prCabCoste@1000000000 : Record 7009948);
    VAR
      lrCoste@1000000002 : Record 7009805;
      lrCoste2@1000000004 : Record 7009805;
      lfCoste@1000000001 : Form 7009944;
      lrDetCoste@1000000005 : Record 7009949;
      lrAgru@1000000003 : Record 7009796;
    BEGIN
      // +$020
      // Si no est  todo relleno salimos
      IF (prCabCoste."Fecha desde" = 0D) OR
         (prCabCoste."Fecha hasta" = 0D) OR
         (prCabCoste.Proveedor = '') OR
         (prCabCoste.Departamento = '') OR
         (prCabCoste."No. Factura proveedor" = '') OR
         (prCabCoste."Fecha registro" = 0D) THEN
        EXIT;

      // Buscamos los costes que est n dentro de la cabecera de validacion de coste
      lrCoste.RESET;
      lrCoste.SETCURRENTKEY(Concepto, Fecha, "Proveedor contable", Agrupacion);
      lrCoste.FILTERGROUP(2);
      lrCoste.SETRANGE ("Proveedor contable", prCabCoste.Proveedor);
      lrCoste.SETRANGE (Fecha               , prCabCoste."Fecha desde", prCabCoste."Fecha hasta");
      lrCoste.SETRANGE (Concepto            , 'TRNC');
      lrCoste.SETFILTER("N§ Factura"        , '%1', '');
      lrCoste.SETFILTER(Usuario             , '%1|%2', '', UPPERCASE(USERID)); //+$029
      lrCoste.FILTERGROUP(0);
      IF lrCoste.FINDFIRST THEN
      BEGIN
        // Mostramos formulario para que seleccionen el coste a a¤adir
        CLEAR(lfCoste);
        lfCoste.SETTABLEVIEW(lrCoste);
        lfCoste.LOOKUPMODE(TRUE);
        IF lfCoste.RUNMODAL = ACTION::LookupOK THEN
        BEGIN
          //-$029lfCoste.GetSeleccion(lrCoste);
          //+$029 <
          lrCoste.FILTERGROUP(2);
          lrCoste.SETRANGE(Usuario, UPPERCASE(USERID));
          lrCoste.FILTERGROUP(0);
          //+$029 >
          IF lrCoste.FINDSET THEN
          BEGIN
            REPEAT
              lrDetCoste.RESET;
              lrDetCoste.SETRANGE(Proveedor                , prCabCoste.Proveedor);
              lrDetCoste.SETRANGE("No. Factura proveedor"  , prCabCoste."No. Factura proveedor");
              lrDetCoste.SETRANGE("Fecha registro"         , prCabCoste."Fecha registro");
              lrDetCoste.SETRANGE("N§ Servicio / N§ Ticket", FORMAT(lrCoste.Agrupacion));
              IF NOT lrDetCoste.FINDFIRST THEN
              BEGIN
                lrDetCoste.INIT;
                lrDetCoste.Proveedor                     := prCabCoste.Proveedor;
                lrDetCoste."No. Factura proveedor"       := prCabCoste."No. Factura proveedor";
                lrDetCoste."Fecha registro"              := prCabCoste."Fecha registro";
                lrDetCoste."N§ Servicio / N§ Ticket"     := FORMAT(lrCoste.Agrupacion);
                lrDetCoste.Agrupacion                    := lrCoste.Agrupacion;
                lrDetCoste.Fecha                         := lrCoste.Fecha;
                lrDetCoste."Tipo servicio transportista" := lrCoste."Tipo servicio transportista";
                lrDetCoste.Origen                        := lrCoste.Origen;
                lrDetCoste.Destino                       := lrCoste.Destino;
                lrDetCoste."Tipo transfer"               := lrCoste."Tipo transfer";
                lrDetCoste."Tipo Vehiculo"               := lrCoste."Tipo Vehiculo";
                lrDetCoste.Vuelos                        := lrCoste.Vuelos;
                lrDetCoste."Pendiente FPR"               := lrCoste."Pendiente FPR";

                lrAgru.RESET;
                lrAgru.GET(lrCoste.Agrupacion);
                lrDetCoste."Capacidad Vehiculo" := lrAgru."Capacidad Vehiculo";

                lrDetCoste.Cantidad             := lrCoste."Cantidad Real";
                lrDetCoste."Cantidad proveedor" := lrCoste."Cantidad Real";
                //. Dependiendo del proveedor sumaremos el importe con o sin impuestos
                IF prCabCoste."Impuestos incluidos" THEN
                BEGIN
                  lrDetCoste.Importe             += (-1) * lrCoste."Importe con impuesto";
                  lrDetCoste."Importe proveedor" += (-1) * lrCoste."Importe con impuesto";
                  prCabCoste.VALIDATE("Importe agencia" , prCabCoste."Importe agencia" +
                                                          ((-1) * lrCoste."Importe con impuesto"));
                END
                ELSE
                BEGIN
                  lrDetCoste.Importe             += (-1) * lrCoste."Importe sin impuesto";
                  lrDetCoste."Importe proveedor" += (-1) * lrCoste."Importe sin impuesto";
                  prCabCoste.VALIDATE("Importe agencia" , prCabCoste."Importe agencia" +
                                                          ((-1) * lrCoste."Importe sin impuesto"));
                END;
                lrDetCoste.INSERT(TRUE);

                IF prCabCoste."Cod. Divisa" = '' THEN
                  prCabCoste.VALIDATE("Cod. Divisa", lrCoste."Cod. divisa")
                ELSE
                  IF prCabCoste."Cod. Divisa" <> lrCoste."Cod. divisa" THEN
                    ERROR(Text049);
              END
              ELSE
              BEGIN
                lrDetCoste.Cantidad             += lrCoste."Cantidad Real";
                lrDetCoste."Cantidad proveedor" += lrCoste."Cantidad Real";
                //. Dependiendo del proveedor sumaremos el importe con o sin impuestos
                IF prCabCoste."Impuestos incluidos" THEN
                BEGIN
                  lrDetCoste.Importe             += (-1) * lrCoste."Importe con impuesto";
                  lrDetCoste."Importe proveedor" += (-1) * lrCoste."Importe con impuesto";

                  prCabCoste.VALIDATE("Importe agencia" , prCabCoste."Importe agencia" +
                                                          ((-1) * lrCoste."Importe con impuesto"));
                END
                ELSE
                BEGIN
                  lrDetCoste.Importe             += (-1) * lrCoste."Importe sin impuesto";
                  lrDetCoste."Importe proveedor" += (-1) * lrCoste."Importe sin impuesto";

                  prCabCoste.VALIDATE("Importe agencia" , prCabCoste."Importe agencia" +
                                                          ((-1) * lrCoste."Importe sin impuesto"));
                END;
                lrDetCoste.MODIFY;

              END;
              //. Marcamos las lineas con el codigo de usuario
              lrCoste2 := lrCoste;
              lrCoste2.Usuario := prCabCoste."No. Factura proveedor";
              lrCoste2.MODIFY;
            UNTIL lrCoste.NEXT = 0;
          END;
        END;
      END;

      prCabCoste.MODIFY;
    END;

    PROCEDURE EliminaCoste@1000000003(VAR prDet@1000000000 : Record 7009949);
    VAR
      lrCabCoste@1000000001 : Record 7009948;
      lrDet2@1000000002 : Record 7009949;
    BEGIN
      // +$020
      IF CONFIRM(Text060) THEN
      BEGIN
        IF prDet.FINDSET(TRUE) THEN
        BEGIN
          REPEAT
            lrCabCoste.RESET;
            IF lrCabCoste.GET(prDet.Proveedor, prDet."No. Factura proveedor", prDet."Fecha registro") THEN
            BEGIN
              lrCabCoste.VALIDATE(lrCabCoste."Importe agencia" , lrCabCoste."Importe agencia" - prDet.Importe);
              lrCabCoste.MODIFY;
            END;

            lrDet2 := prDet;
            lrDet2.DELETE(TRUE);
          UNTIL prDet.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DesmarcarCoste@1000000002(prDetCoste@1000000001 : Record 7009949);
    VAR
      lrCoste@1000000000 : Record 7009805;
    BEGIN
      // DesmarcarCoste

      //. Quitamos la marca de usuario de las lineas de coste para que puedan volver a ser cogidas en otra factura

      lrCoste.RESET;
      lrCoste.SETRANGE("Proveedor contable", prDetCoste.Proveedor);
      lrCoste.SETRANGE(Concepto            , 'TRNC');
      lrCoste.SETRANGE("N§ Factura"        , '');
      lrCoste.SETRANGE(Usuario             , prDetCoste."No. Factura proveedor");
      lrCoste.SETRANGE(Agrupacion          , prDetCoste.Agrupacion);
      IF lrCoste.FINDSET(TRUE) THEN
        lrCoste.MODIFYALL(Usuario, '');
    END;

    PROCEDURE SendReclamacionEmail@1020008(VAR prCabCoste@1000000000 : Record 7009948);
    VAR
      lrDetVal@1000000001 : Record 7009949;
      SMTPMail@1020005 : Codeunit 400;
      lvSubject@1000000002 : Text[200];
      lText001@1000000003 : TextConst 'ENU="Claim Invoice ";ESP="Reclamaci¢n Factura "';
      lvBody@1000000004 : Text[1024];
    BEGIN
      // +$020

      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor, prCabCoste.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabCoste."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro"       , prCabCoste."Fecha registro");
      lrDetVal.SETRANGE(Reclamar               , TRUE);
      IF lrDetVal.FINDSET THEN
      BEGIN
        rPar.FINDFIRST;
        rPar.TESTFIELD(rPar."Email env¡o reclamaciones");

        rProv.RESET;
        rProv.GET(prCabCoste.Proveedor);
        rProv.TESTFIELD(rProv."E-Mail");

        lvSubject := lText001 + prCabCoste."No. Factura proveedor";
        SMTPMail.CreateMessage(Text059, rPar."Email env¡o reclamaciones", rProv."E-Mail", lvSubject,'',TRUE);

        SMTPMail.AppendBody(STRSUBSTNO(Text068, prCabCoste."Fecha emision proveedor") + '<br>' + '<br>');
        REPEAT
          lvBody := Text064 + ' ' + lrDetVal."N§ Servicio / N§ Ticket" + ' ' + Text065 + ' ' + lrDetVal."Tipo Vehiculo" + ' ' +
                    Text070 + ' ' + FORMAT(lrDetVal.Fecha) + ' ' + Text071 + ' (' +
                    STRSUBSTNO('%1-%2', lrDetVal."Tipo transfer", lrDetVal."Tipo servicio transportista") + ') ' +
                    Text066 + ' ' + FORMAT(lrDetVal.Cantidad) + ' ' + Text067 + ' ' + FORMAT(lrDetVal.Importe) + '<br>';
          SMTPMail.AppendBody(lvBody);
        UNTIL lrDetVal.NEXT = 0;
        SMTPMail.AppendBody('<br>' + Text069);

        SMTPMail.Send;

        prCabCoste."Reclamacion enviada" := TRUE;
        prCabCoste."Reclamada dia"       := TODAY;
        prCabCoste."Reclamada usuario"   := USERID;
        prCabCoste.MODIFY;
      END;
    END;

    BEGIN
    {
      $001 AJS 12052011 Modifico el comportamiento a la hora de obtener el NCF para tratar los proveedores que tienen
                        digitos fijos.

      $002 AJS 12052011 Modifico la funcion pedir_datos para que se obtengan todos los datos a partir del   con un
                        validate

      $003 AJS 24052011 La comprobacion de Comprobante fiscal rellenado solo se hace si el proveedor tiene Digitos fijos
      $004 JPT 02/08/12 GOC-LP-12021 Los asientos negativos de FPR deben ser positivos con debe/haber girados

      $005 AJS 23082012 Control de seguridad por usuario

      $006 AJS 22092012 Utilizar siempre la serie de facturacion estandar, no es necesario especificar por contrato

      $007 AJS 22102012 Rellenar el codigo de procedencia en los asientos de FPR

      $008 AJS 31102012 Empleo los campos en divisa local para hacer los asientos de FPR

      $009 AJS 27112012 En algunos casos la divisa del contrato del proveedor no coincide con la divisa de la ficha contable
                        del proveedor, en esos casos hay que pasar el importe de la factura a la de la ficha

      $010 AJS 26082013 Elimino las referencias a la tabla Maestro de claves porque es obsoleta

      $011 AJS 04102013 Marco los asientos de FPR como asiento automatico para impedir que se puedan borrar

      $012 AJS 19112013 Sustituyo la clave a la hora de buscar el ultimo numero de asiento

      $013 AJS 13052014 Nueva opcion para que puedan poner la fecha de registro al validar

      $014 AJS 18062014 Comprobar que la fecha de registro no esta bloqueada en contabilidad

      $015 ARM 02092014 Tipos de cambio en validaci¢n costes (CNT-OC-13023)

      $016 ARM 18092014 A¤adir no serie para el numero de documento del asiento fpr

      $017 AJS 21112014 Utilizo la funcion ActualizaCamposImporte de lineas de factura para rellenar los campos Amount
                        y Amount including VAT

      $018 AJS 21012015 Ejecutar el proceso estandar de Lanzar factura

      $019 AJS 0902015 Rellenar el campo Source code del diario general

      $020 ARM 16042015 CNT-OC-14068 Cambio para validar costes a travs de cabecera y detalle

      $021 AJS 06052015 El campo Reason code no se rellena hasta el final del proceso

      $022 AJS 07052015 CNT-OC-15134, Algunos empresas no registran los costes, se traspasan a la comercializadora

      $023 AJS 08052015 CNT-OC-15134, Algunos empresas no registran las facturas, se traspasan a la comercializadora

      $024 AJS 08062015 Algunos touroperadores tienen que convertir codigo en Offshore

      $025 AJS 30062015 Modifico la funcion AgregarCoste para permitir validaciones parciales de un servicio

      $026 AJS 06072015 En la funci¢n BuscaCosteValidacion si no hay que recalcular las lineas hacemos un exit, no un ERROR

      $027 AJS 09072015 Corregir error en las validaciones parciales de servicio

      $028 AJS 22072015 Cuando hacemos una factura que pasa de Dolares a Moneda Nacional hay que aplicar la tasa de cambio que se
                        pone en el momento de validar, en las lineas de la factura

      $029 AJS 24072015 Modifico la funcion AgregarCoste para traer las lineas con el filtro de USUARIO

      $030 AJS 27072015 Modifico la funcion validar_factura_coste para comprobar que el total de las lineas cuadre con el
                        campo Importe proveedor de la cabecera
    }
    END.
  }
}
