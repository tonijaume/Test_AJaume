OBJECT Codeunit 1002 Job Create-Invoice
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Currency@1005 : Record 4;
      SalesHeader@1001 : Record 36;
      SalesHeader2@1006 : Record 36;
      SalesLine@1000 : Record 37;
      TempJobPlanningLine@1017 : TEMPORARY Record 1003;
      Text000@1008 : TextConst 'ENU=The lines were successfully transferred to an invoice.;ESP=Las l¡neas se transfirieron correctamente a una factura.';
      Text001@1009 : TextConst 'ENU=The lines were not transferred to an invoice.;ESP=Las l¡neas no se transfirieron a una factura.';
      Text002@1010 : TextConst 'ENU=There were no lines to transfer.;ESP=No hab¡a l¡neas que transferir.';
      Text003@1011 : TextConst 'ENU="%1 %2 = %3 "" for %4 were successfully transferred to invoice %5.";ESP="%1 %2 = %3 "" para %4 se transfirieron correctamente a la factura %5."';
      Text004@1015 : TextConst 'ENU=You must specify Invoice No. or New Invoice.;ESP=Debe especificar n§ factura o nueva factura.';
      Text005@1014 : TextConst 'ENU=You must specify Credit Memo No. or New Invoice.;ESP=Debe especificar n§ abono o nueva factura.';
      Text007@1012 : TextConst 'ENU=You must specify %1.;ESP=Se debe indicar %1.';
      TransferExtendedText@1016 : Codeunit 378;
      JobInvCurrency@1002 : Boolean;
      UpdateExchangeRates@1019 : Boolean;
      Text008@1018 : TextConst 'ENU=The lines were successfully transferred to a credit memo.;ESP=Las l¡neas se transfirieron correctamente a un abono.';
      Text009@1003 : TextConst 'ENU=The selected planning lines must have the same %1.;ESP=Las l¡neas de planificaci¢n seleccionadas deben tener el mismo %1.';
      Text010@1004 : TextConst 'ENU=The currency dates on all planning lines will be updated based on the invoice posting date because there is a difference in currency exchange rates. Recalculations will be based on the Exch. Calculation setup for the Cost and Price values for the job. Do you want to continue?;ESP=Las fechas de divisa de todas las l¡neas de planificaci¢n se actualizar n en funci¢n de la fecha de registro de la factura porque existe una diferencia en los tipos de cambio de divisa. Los nuevos c lculos se basar n en la opci¢n C lculo cambio de los valores de Coste y Precio del proyecto. ¨Desea continuar?';

    PROCEDURE CreateSalesInvoice@9(VAR JobPlanningLine@1011 : Record 1003;CrMemo@1000 : Boolean);
    VAR
      SalesHeader@1010 : Record 36;
      JT@1008 : Record 1001;
      GetSalesInvoiceNo@1005 : Report 1094;
      GetSalesCrMemoNo@1009 : Report 1092;
      Done@1004 : Boolean;
      NewInvoice@1003 : Boolean;
      PostingDate@1002 : Date;
      InvoiceNo@1001 : Code[20];
    BEGIN
      JT.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
      IF NOT CrMemo THEN BEGIN
        GetSalesInvoiceNo.SetCustomer(JobPlanningLine."Job No.");
        GetSalesInvoiceNo.RUNMODAL;
        GetSalesInvoiceNo.GetInvoiceNo(Done,NewInvoice,PostingDate,InvoiceNo);
      END ELSE BEGIN
        GetSalesCrMemoNo.SetCustomer(JobPlanningLine."Job No.");
        GetSalesCrMemoNo.RUNMODAL;
        GetSalesCrMemoNo.GetCreditMemoNo(Done,NewInvoice,PostingDate,InvoiceNo);
      END;

      IF Done THEN  BEGIN
        IF (PostingDate = 0D) AND NewInvoice THEN
          ERROR(Text007,SalesHeader.FIELDCAPTION("Posting Date"));
        IF (InvoiceNo = '') AND NOT NewInvoice THEN BEGIN
          IF CrMemo THEN
            ERROR(Text005);
          ERROR(Text004);
        END;
        CreateSalesInvoiceLines(
          JobPlanningLine."Job No.",JobPlanningLine,InvoiceNo,NewInvoice,PostingDate,CrMemo);
      END;
    END;

    PROCEDURE CreateSalesInvoiceLines@1(JobNo@1000 : Code[20];VAR JobPlanningLine@1004 : Record 1003;InvoiceNo@1007 : Code[20];NewInvoice@1001 : Boolean;PostingDate@1006 : Date;CreditMemo@1008 : Boolean);
    VAR
      Cust@1003 : Record 18;
      Job@1002 : Record 167;
      LineCounter@1005 : Integer;
    BEGIN
      CLEARALL;
      Job.GET(JobNo);
      IF Job.Blocked = Job.Blocked::All THEN
        Job.TestBlocked;
      IF Job."Currency Code" = '' THEN
        JobInvCurrency := Job."Invoice Currency Code" <> '';
      Job.TESTFIELD("Bill-to Customer No.");
      Cust.GET(Job."Bill-to Customer No.");
      IF CreditMemo THEN
        SalesHeader2."Document Type" := SalesHeader2."Document Type"::"Credit Memo"
      ELSE
        SalesHeader2."Document Type" := SalesHeader2."Document Type"::Invoice;

      IF NOT NewInvoice THEN
        SalesHeader.GET(SalesHeader2."Document Type",InvoiceNo);

      IF JobPlanningLine.FIND('-') THEN
        REPEAT
          IF JobPlanningLine."Contract Line" AND NOT JobPlanningLine.Transferred THEN BEGIN
            LineCounter := LineCounter + 1;
            IF JobPlanningLine."Job No." <> JobNo THEN
              ERROR(Text009,JobPlanningLine.FIELDCAPTION("Job No."));
            IF NewInvoice THEN
              TestExchangeRate(JobPlanningLine,PostingDate)
            ELSE
              TestExchangeRate(JobPlanningLine,SalesHeader."Posting Date");
          END;
        UNTIL JobPlanningLine.NEXT = 0;
      IF LineCounter = 0 THEN
        ERROR(Text002);
      IF NewInvoice THEN
        CreateSalesheader(Job,PostingDate)
      ELSE
        TestSalesHeader(SalesHeader,Job);
      IF JobPlanningLine.FIND('-') THEN
        REPEAT
          IF JobPlanningLine."Contract Line" AND NOT JobPlanningLine.Transferred THEN BEGIN
            IF JobPlanningLine.Type IN [JobPlanningLine.Type::Resource,JobPlanningLine.Type::Item,
              JobPlanningLine.Type::"G/L Account"] THEN
                JobPlanningLine.TESTFIELD("No.");
            CreateSalesLine(JobPlanningLine);
            IF SalesHeader2."Document Type" = SalesHeader2."Document Type":: Invoice THEN BEGIN
              JobPlanningLine."Invoice Type" := JobPlanningLine."Invoice Type"::Invoice;
              JobPlanningLine."Invoice No." := SalesHeader."No.";
            END;
            IF SalesHeader2."Document Type" = SalesHeader2."Document Type":: "Credit Memo" THEN BEGIN
              JobPlanningLine."Invoice Type" := JobPlanningLine."Invoice Type"::"Credit Memo";
              JobPlanningLine."Invoice No." := SalesHeader."No.";
            END;
            JobPlanningLine.Transferred := TRUE;
            JobPlanningLine."Transferred Date" := PostingDate;
            JobPlanningLine.MODIFY;
          END;
        UNTIL JobPlanningLine.NEXT = 0;
      COMMIT;
      IF CreditMemo THEN
        MESSAGE(Text008)
      ELSE
        MESSAGE(Text000);
    END;

    PROCEDURE DeleteSalesInvoiceBuffer@10();
    BEGIN
      CLEARALL;
      TempJobPlanningLine.DELETEALL;
    END;

    PROCEDURE CreateSalesInvoiceJT@7(VAR JT2@1000 : Record 1001;PostingDate@1006 : Date;InvoicePerTask@1007 : Boolean;VAR NoOfInvoices@1008 : Integer;VAR OldJobNo@1004 : Code[20];VAR OldJTNo@1009 : Code[20];LastJobTask@1010 : Boolean);
    VAR
      Cust@1003 : Record 18;
      Job@1002 : Record 167;
      JT@1011 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      CLEARALL;
      IF NOT LastJobTask THEN BEGIN
        JT := JT2;
        IF JT."Job No." = '' THEN
          EXIT;
        IF JT."Job Task No." = '' THEN
          EXIT;
        JT.FIND;
        IF JT."Job Task Type" <> JT."Job Task Type"::Posting THEN
          EXIT;
        Job.GET(JT."Job No.");
      END;
      IF LastJobTask THEN BEGIN
        IF NOT TempJobPlanningLine.FIND('-') THEN
          EXIT;
        Job.GET(TempJobPlanningLine."Job No.");
        JT.GET(TempJobPlanningLine."Job No.",TempJobPlanningLine."Job Task No.");
      END;
      Job.TESTFIELD("Bill-to Customer No.");
      IF Job.Blocked = Job.Blocked::All THEN
        Job.TestBlocked;
      IF Job."Currency Code" = '' THEN
        JobInvCurrency := Job."Invoice Currency Code" <> '';
      Cust.GET(Job."Bill-to Customer No.");

      IF CreateNewInvoice(JT,InvoicePerTask,OldJobNo,OldJTNo,LastJobTask) THEN BEGIN
        Job.GET(TempJobPlanningLine."Job No.");
        JT.GET(TempJobPlanningLine."Job No.",TempJobPlanningLine."Job Task No.");
        IF Job."Currency Code" = '' THEN
          JobInvCurrency := Job."Invoice Currency Code" <> '';
        Cust.GET(Job."Bill-to Customer No.");
        NoOfInvoices := NoOfInvoices + 1;
        SalesHeader2."Document Type" := SalesHeader2."Document Type"::Invoice;
        CreateSalesheader(Job,PostingDate);
        IF TempJobPlanningLine.FIND('-') THEN
          REPEAT
            JobPlanningLine := TempJobPlanningLine;
            JobPlanningLine.FIND;
            IF JobPlanningLine.Type IN [JobPlanningLine.Type::Resource,JobPlanningLine.Type::Item,
              JobPlanningLine.Type::"G/L Account"] THEN
                JobPlanningLine.TESTFIELD("No.");
            TestExchangeRate(JobPlanningLine,PostingDate);
            CreateSalesLine(JobPlanningLine);
            IF SalesHeader2."Document Type" = SalesHeader2."Document Type":: Invoice THEN BEGIN
              JobPlanningLine."Invoice Type" := JobPlanningLine."Invoice Type"::Invoice;
              JobPlanningLine."Invoice No." := SalesHeader."No.";
            END;
            IF SalesHeader2."Document Type" = SalesHeader2."Document Type":: "Credit Memo" THEN BEGIN
              JobPlanningLine."Invoice Type" := JobPlanningLine."Invoice Type"::"Credit Memo";
              JobPlanningLine."Invoice No." := SalesHeader."No.";
            END;
            JobPlanningLine.Transferred := TRUE;
            JobPlanningLine."Transferred Date" := PostingDate;
            JobPlanningLine.MODIFY;
          UNTIL TempJobPlanningLine.NEXT = 0;
        TempJobPlanningLine.DELETEALL;
      END;
      IF LastJobTask THEN
        EXIT;
      JobPlanningLine.RESET;
      JobPlanningLine.SETCURRENTKEY("Job No.","Job Task No.");
      JobPlanningLine.SETRANGE("Job No.",JT2."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JT2."Job Task No.");
      JobPlanningLine.SETFILTER("Planning Date",JT2.GETFILTER("Planning Date Filter"));

      IF JobPlanningLine.FIND('-') THEN
        REPEAT
          IF JobPlanningLine."Contract Line" AND NOT JobPlanningLine.Transferred THEN BEGIN
            TempJobPlanningLine := JobPlanningLine;
            TempJobPlanningLine.INSERT;
          END;
        UNTIL JobPlanningLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateNewInvoice@11(VAR JT@1003 : Record 1001;InvoicePerTask@1005 : Boolean;VAR OldJobNo@1000 : Code[20];VAR OldJTNo@1001 : Code[20];LastJobTask@1002 : Boolean) : Boolean;
    VAR
      NewInvoice@1004 : Boolean;
    BEGIN
      IF LastJobTask THEN
        NewInvoice := TRUE
      ELSE BEGIN
        IF OldJobNo <> '' THEN BEGIN
          IF InvoicePerTask THEN
            IF (OldJobNo <> JT."Job No.") OR (OldJTNo <> JT."Job Task No.") THEN
              NewInvoice := TRUE;
          IF NOT InvoicePerTask THEN
            IF OldJobNo <> JT."Job No." THEN
              NewInvoice := TRUE;
        END;
        OldJobNo := JT."Job No.";
        OldJTNo := JT."Job Task No.";
      END;
      IF NOT TempJobPlanningLine.FIND('-') THEN
        NewInvoice := FALSE;
      EXIT(NewInvoice);
    END;

    LOCAL PROCEDURE CreateSalesheader@2(Job@1004 : Record 167;PostingDate@1001 : Date);
    VAR
      SalesSetup@1003 : Record 311;
      Cust@1000 : Record 18;
    BEGIN
      CLEAR(SalesHeader);
      SalesHeader."Document Type" := SalesHeader2."Document Type";
      SalesSetup.GET;
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN
        SalesSetup.TESTFIELD("Invoice Nos.");
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
        SalesSetup.TESTFIELD("Credit Memo Nos.");
      SalesHeader."Posting Date" := PostingDate;
      SalesHeader.INSERT(TRUE);
      Cust.GET(Job."Bill-to Customer No.");
      Cust.TESTFIELD("Bill-to Customer No.",'');
      SalesHeader.VALIDATE("Sell-to Customer No.",Job."Bill-to Customer No.");
      IF Job."Currency Code" <> '' THEN
        SalesHeader.VALIDATE("Currency Code",Job."Currency Code")
      ELSE
        SalesHeader.VALIDATE("Currency Code",Job."Invoice Currency Code");
      IF PostingDate <> 0D THEN
        SalesHeader.VALIDATE("Posting Date",PostingDate);
      UpdateSalesHeader(SalesHeader,Job);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@15(VAR JobPlanningLine@1000 : Record 1003);
    VAR
      Job@1003 : Record 167;
      Factor@1002 : Integer;
    BEGIN
      Factor := 1;
      IF SalesHeader2."Document Type" = SalesHeader2."Document Type"::"Credit Memo" THEN
        Factor := -1;
      TestTransferred(JobPlanningLine);
      JobPlanningLine.TESTFIELD("Planning Date");
      Job.GET(JobPlanningLine."Job No.");
      CLEAR(SalesLine);
      SalesLine."Document Type" := SalesHeader2."Document Type";
      SalesLine."Document No." := SalesHeader."No.";

      IF NOT JobInvCurrency THEN BEGIN
        SalesHeader.TESTFIELD("Currency Code",JobPlanningLine."Currency Code");
        IF Job."Currency Code" <> '' THEN
          SalesHeader.TESTFIELD("Currency Factor",JobPlanningLine."Currency Factor");
        SalesHeader.TESTFIELD("Currency Code",Job."Currency Code");
      END;
      IF JobPlanningLine.Type = JobPlanningLine.Type::Text THEN
        SalesLine.VALIDATE(Type,SalesLine.Type::" ");
      IF JobPlanningLine.Type = JobPlanningLine.Type::"G/L Account" THEN
        SalesLine.VALIDATE(Type,SalesLine.Type::"G/L Account");
      IF JobPlanningLine.Type = JobPlanningLine.Type::Item THEN
        SalesLine.VALIDATE(Type,SalesLine.Type::Item);
      IF JobPlanningLine.Type = JobPlanningLine.Type::Resource THEN
        SalesLine.VALIDATE(Type,SalesLine.Type::Resource);

      IF SalesLine.Type = SalesLine.Type::" " THEN BEGIN
        SalesLine.Description := JobPlanningLine.Description;
        SalesLine."Description 2" := JobPlanningLine."Description 2";
      END ELSE BEGIN
        SalesLine.VALIDATE("No.",JobPlanningLine."No.");
        SalesLine.VALIDATE("Location Code",JobPlanningLine."Location Code");
        SalesLine.VALIDATE("Work Type Code",JobPlanningLine."Work Type Code");
        SalesLine.VALIDATE("Variant Code",JobPlanningLine."Variant Code");
        SalesLine.VALIDATE("Unit of Measure Code",JobPlanningLine."Unit of Measure Code");
        SalesLine.VALIDATE(Quantity,Factor * JobPlanningLine.Quantity);
        IF JobInvCurrency THEN BEGIN
          Currency.GET(SalesLine."Currency Code");
          SalesLine.VALIDATE("Unit Price",
            ROUND(JobPlanningLine."Unit Price" * SalesHeader."Currency Factor",
              Currency."Unit-Amount Rounding Precision"));
        END ELSE
          SalesLine.VALIDATE("Unit Price",JobPlanningLine."Unit Price");
        SalesLine.VALIDATE("Unit Cost (LCY)",JobPlanningLine."Unit Cost (LCY)");
        SalesLine.VALIDATE("Line Discount %",JobPlanningLine."Line Discount %");
        SalesLine.Description := JobPlanningLine.Description;
        SalesLine."Description 2" := JobPlanningLine."Description 2";
      END;
      IF NOT SalesHeader."Prices Including VAT" THEN
        SalesLine.VALIDATE("Job Contract Entry No.",JobPlanningLine."Job Contract Entry No.");
      SalesLine."Job No." := JobPlanningLine."Job No.";
      SalesLine."Job Task No." := JobPlanningLine."Job Task No.";
      SalesLine."Line No." := GetNextLineNo(SalesLine);
      SalesLine.INSERT(TRUE);

      IF JobInvCurrency THEN BEGIN
        JobPlanningLine."Invoice Currency" := TRUE;
        JobPlanningLine."Inv. Curr. Unit Price" := SalesLine."Unit Price";
        JobPlanningLine."Inv. Curr. Line Amount" := SalesLine."Line Amount";
        JobPlanningLine."Invoice Currency Code" := Job."Invoice Currency Code";
        JobPlanningLine."Invoice Currency Factor" := SalesHeader."Currency Factor";
      END;

      IF SalesHeader."Prices Including VAT" AND
         (SalesLine.Type <> SalesLine.Type::" ")
      THEN BEGIN
        IF SalesLine."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE
          Currency.GET(SalesLine."Currency Code");
        SalesLine."Unit Price" :=
          ROUND(
            SalesLine."Unit Price" * (1 + (SalesLine."VAT %" / 100)),
            Currency."Unit-Amount Rounding Precision");
        IF SalesLine.Quantity <> 0 THEN BEGIN
          SalesLine."Line Discount Amount" :=
            ROUND(
              SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
              Currency."Amount Rounding Precision");
          SalesLine.VALIDATE("Inv. Discount Amount",
            ROUND(
              SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
              Currency."Amount Rounding Precision"));
        END;
        SalesLine.VALIDATE("Job Contract Entry No.",JobPlanningLine."Job Contract Entry No.");

        SalesLine.MODIFY;
        JobPlanningLine."VAT Unit Price" := SalesLine."Unit Price";
        JobPlanningLine."VAT Line Discount Amount" := SalesLine."Line Discount Amount";
        JobPlanningLine."VAT Line Amount" := SalesLine."Line Amount";
        JobPlanningLine."VAT %" := SalesLine."VAT %";
      END;
      IF TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,FALSE) THEN
        TransferExtendedText.InsertSalesExtText(SalesLine);
    END;

    LOCAL PROCEDURE GetNextLineNo@20(SalesLine@1002 : Record 37) : Integer;
    VAR
      NextLineNo@1000 : Integer;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      NextLineNo := 10000;
      IF SalesLine.FIND('+') THEN
        NextLineNo := SalesLine."Line No." + 10000;
      EXIT(NextLineNo);
    END;

    LOCAL PROCEDURE TestTransferred@3(JobPlanningLine@1001 : Record 1003);
    VAR
      SalesLine@1000 : Record 37;
      JobTransferLine@1002 : Codeunit 1004;
    BEGIN
      SalesLine.SETCURRENTKEY("Job Contract Entry No.");
      SalesLine.SETRANGE("Job Contract Entry No.",JobPlanningLine."Job Contract Entry No.");
      IF SalesLine.FIND('-') THEN
        ERROR(Text003,
          JobPlanningLine.TABLECAPTION,
          JobPlanningLine.FIELDCAPTION("Line No."),
          JobPlanningLine."Line No.",
          JobTransferLine.JTName(JobPlanningLine."Job No.",JobPlanningLine."Job Task No."),
          JobPlanningLine."Job Contract Entry No.",
          SalesLine."Document No.");
      JobPlanningLine.TESTFIELD(Invoiced,FALSE);
    END;

    PROCEDURE DeleteSalesLine@4(SalesLine@1000 : Record 37);
    VAR
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
      JobPlanningLine.SETRANGE("Job Contract Entry No.",SalesLine."Job Contract Entry No.");
      IF JobPlanningLine.FIND('-') THEN BEGIN
        JobPlanningLine.InitJobPlanningLine;
        JobPlanningLine.MODIFY;
      END;
    END;

    PROCEDURE GetSalesInvoice@5(JobPlanningLine@1004 : Record 1003);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      SalesInvHeader@1001 : Record 112;
      SalesInvLine@1000 : Record 113;
      SalesCrMemoHeader@1005 : Record 114;
      SalesCrMemoLine@1006 : Record 115;
    BEGIN
      CLEARALL;
      WITH JobPlanningLine DO BEGIN
        IF "Line No." = 0 THEN
          EXIT;
        TESTFIELD("Job No.");
        TESTFIELD("Job Task No.");
        TESTFIELD(Transferred);
        IF NOT Invoiced THEN BEGIN
          SalesLine.SETCURRENTKEY("Job Contract Entry No.");
          SalesLine.SETRANGE("Job Contract Entry No.","Job Contract Entry No.");
          IF SalesLine.FIND('-') THEN BEGIN
            IF SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") THEN;
            IF SalesLine."Document Type" = SalesLine."Document Type"::Invoice THEN
              FORM.RUNMODAL(FORM::"Sales Invoice",SalesHeader)
            ELSE
              FORM.RUNMODAL(FORM::"Sales Credit Memo",SalesHeader);
          END ELSE
            ERROR(Text001);
        END;
        IF Invoiced THEN BEGIN
          SalesCrMemoLine.SETCURRENTKEY("Job Contract Entry No.");
          SalesCrMemoLine.SETRANGE("Job Contract Entry No.","Job Contract Entry No.");
          IF SalesCrMemoLine.FIND('-') THEN BEGIN;
            IF SalesCrMemoHeader.GET(SalesCrMemoLine."Document No.") THEN;
            FORM.RUNMODAL(FORM::"Posted Sales Credit Memo",SalesCrMemoHeader);
          END ELSE BEGIN
            SalesInvLine.SETCURRENTKEY("Job Contract Entry No.");
            SalesInvLine.SETRANGE("Job Contract Entry No.","Job Contract Entry No.");
            SalesInvLine.FIND('-');
            IF SalesInvHeader.GET(SalesInvLine."Document No.") THEN;
            FORM.RUNMODAL(FORM::"Posted Sales Invoice",SalesInvHeader);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateSalesHeader@6(VAR SalesHeader@1000 : Record 36;Job@1001 : Record 167);
    BEGIN
      SalesHeader."Bill-to Contact No." := Job."Bill-to Contact No.";
      SalesHeader."Bill-to Contact" := Job."Bill-to Contact";
      SalesHeader."Bill-to Name" := Job."Bill-to Name";
      SalesHeader."Bill-to Address" := Job."Bill-to Address";
      SalesHeader."Bill-to Address 2" := Job."Bill-to Address 2";
      SalesHeader."Bill-to City" := Job."Bill-to City";
      SalesHeader."Bill-to Post Code" := Job."Bill-to Post Code";

      SalesHeader."Sell-to Contact No." := Job."Bill-to Contact No.";
      SalesHeader."Sell-to Contact" := Job."Bill-to Contact";
      SalesHeader."Sell-to Customer Name" := Job."Bill-to Name";
      SalesHeader."Sell-to Address" := Job."Bill-to Address";
      SalesHeader."Sell-to Address 2" := Job."Bill-to Address 2";
      SalesHeader."Sell-to City" := Job."Bill-to City";
      SalesHeader."Sell-to Post Code" := Job."Bill-to Post Code";

      SalesHeader."Ship-to Contact" := Job."Bill-to Contact";
      SalesHeader."Ship-to Name" := Job."Bill-to Name";
      SalesHeader."Ship-to Address" := Job."Bill-to Address";
      SalesHeader."Ship-to Address 2" := Job."Bill-to Address 2";
      SalesHeader."Ship-to City" := Job."Bill-to City";
      SalesHeader."Ship-to Post Code" := Job."Bill-to Post Code";
    END;

    LOCAL PROCEDURE TestSalesHeader@8(VAR SalesHeader@1000 : Record 36;VAR Job@1001 : Record 167);
    BEGIN
      SalesHeader.TESTFIELD("Bill-to Customer No.",Job."Bill-to Customer No.");
      SalesHeader.TESTFIELD("Sell-to Customer No.",Job."Bill-to Customer No.");

      IF Job."Currency Code" <> '' THEN
        SalesHeader.TESTFIELD("Currency Code",Job."Currency Code")
      ELSE
        SalesHeader.TESTFIELD("Currency Code",Job."Invoice Currency Code");
    END;

    PROCEDURE TestExchangeRate@12(VAR JobPlanningLine@1001 : Record 1003;PostingDate@1000 : Date);
    VAR
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      IF JobPlanningLine."Currency Code" <> '' THEN
        IF (CurrencyExchangeRate.ExchangeRate(PostingDate,JobPlanningLine."Currency Code") <> JobPlanningLine."Currency Factor")
          THEN BEGIN

          IF UpdateExchangeRates = FALSE THEN
            UpdateExchangeRates := CONFIRM(Text010,TRUE);

          IF UpdateExchangeRates = TRUE THEN BEGIN
            JobPlanningLine."Currency Date" := PostingDate;
            JobPlanningLine."Document Date" := PostingDate;
            JobPlanningLine.VALIDATE("Currency Date");
            JobPlanningLine."Last Date Modified" := TODAY;
            JobPlanningLine."User ID" := USERID;
            JobPlanningLine.MODIFY(TRUE);
          END ELSE BEGIN
            ERROR('')
          END;
        END;
    END;

    BEGIN
    END.
  }
}
