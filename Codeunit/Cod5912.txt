OBJECT Codeunit 5912 ServLedgEntries-Post
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 5907=rimd,
                TableData 5908=rimd,
                TableData 5934=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ServContract@1008 : Record 5965;
      ServLedgEntry@1006 : Record 5907;
      WarrantyLedgEntry@1005 : Record 5908;
      ServiceRegister@1000 : Record 5934;
      DocDim@1011 : Record 357;
      Currency@1002 : Record 4;
      CurrExchRate@1010 : Record 330;
      DimMgt@1009 : Codeunit 408;
      ServOrderMgt@1007 : Codeunit 5900;
      FirstEntryNo@1012 : Integer;
      NextServLedgerEntryNo@1001 : Integer;
      NextWarrantyLedgerEntryNo@1003 : Integer;
      SrcCode@1004 : Code[10];

    PROCEDURE InitServiceRegister@19(VAR PassedServEntryNo@1000 : Integer;VAR PassedWarrantyEntryNo@1001 : Integer);
    VAR
      SrcCodeSetup@1002 : Record 242;
    BEGIN
      NextServLedgerEntryNo := InitServLedgerEntry;
      NextWarrantyLedgerEntryNo := InitWarrantyLedgerEntry;
      PassedServEntryNo := NextServLedgerEntryNo;
      PassedWarrantyEntryNo := NextWarrantyLedgerEntryNo;

      WITH ServiceRegister DO BEGIN
        RESET;
        LOCKTABLE;
        IF FIND('+') THEN
          "No." += 1
        ELSE
          "No." := 1;
        INIT;
        "From Entry No." := NextServLedgerEntryNo;
        "From Warranty Entry No." := NextWarrantyLedgerEntryNo;
        "Creation Date" := TODAY;
        SrcCodeSetup.GET;
        SrcCode := SrcCodeSetup."Service Management";
        "Source Code" := SrcCode;
        "User ID" := USERID;
      END;
    END;

    PROCEDURE FinishServiceRegister@14(VAR PassedServEntryNo@1000 : Integer;VAR PassedWarrantyEntryNo@1001 : Integer);
    BEGIN
      PassedServEntryNo := NextServLedgerEntryNo;
      PassedWarrantyEntryNo := NextWarrantyLedgerEntryNo;

      WITH ServiceRegister DO BEGIN
        "To Warranty Entry No." := NextWarrantyLedgerEntryNo - 1;
        "To Entry No." := NextServLedgerEntryNo - 1;

        IF "To Warranty Entry No." < "From Warranty Entry No." THEN BEGIN
          "To Warranty Entry No." := 0;
          "From Warranty Entry No." := 0;
        END;

        IF "To Entry No." >= "From Entry No." THEN
          INSERT;
      END;
    END;

    PROCEDURE InsertServLedgerEntry@6(VAR NextEntryNo@1002 : Integer;VAR ServHeader@1006 : Record 5900;VAR TempServLine@1000 : Record 5902;VAR ServItemLine@1003 : Record 5901;Qty@1001 : Decimal;DocNo@1005 : Code[20]) : Integer;
    VAR
      ServItem@1007 : Record 5940;
      LineAmount@1004 : Decimal;
    BEGIN
      ServLedgEntry.LOCKTABLE;
      WITH TempServLine DO BEGIN
        ServLedgEntry.INIT;
        ServLedgEntry."Entry No." := NextEntryNo;
        IF ("Contract No." <> '') AND
           ServOrderMgt.InServiceContract(TempServLine,ServHeader)
        THEN BEGIN
          ServLedgEntry."Service Contract No." := "Contract No.";
          ServLedgEntry."Contract Group Code" := ServContract."Contract Group Code";
          IF ServContract.GET(ServContract."Contract Type"::Contract,"Contract No.") THEN
            ServLedgEntry."Serv. Contract Acc. Gr. Code" :=
              ServContract."Serv. Contract Acc. Gr. Code";
        END;
        CASE Type OF
          Type::Item:
            BEGIN
              ServLedgEntry.Type := ServLedgEntry.Type::Item;
              ServLedgEntry."Bin Code" := "Bin Code";
            END;
          Type::Resource:
            ServLedgEntry.Type := ServLedgEntry.Type::Resource;
          Type::Cost:
            ServLedgEntry.Type := ServLedgEntry.Type::"Service Cost";
          Type::"G/L Account":
            ServLedgEntry.Type := ServLedgEntry.Type::"G/L Account";
        END;

        IF "Document Type" = "Document Type"::Order THEN
          ServLedgEntry."Service Order No." := "Document No.";

        ServLedgEntry."Location Code" := "Location Code";
        ServLedgEntry."Job No." := "Job No.";
        ServLedgEntry."Job Task No." := "Job Task No.";
        ServLedgEntry."Job Line Type" := "Job Line Type";

        ServLedgEntry."Document Type" := ServLedgEntry."Document Type"::Shipment;
        ServLedgEntry."Document No." := DocNo;
        ServLedgEntry."Document Line No." := "Line No.";
        ServLedgEntry."Moved from Prepaid Acc." := TRUE;
        ServLedgEntry."Posting Date" := "Posting Date";
        ServLedgEntry."Entry Type" := ServLedgEntry."Entry Type"::Usage;
        ServLedgEntry."Customer No." := ServHeader."Customer No.";
        ServLedgEntry."Bill-to Customer No." := ServHeader."Bill-to Customer No.";
        ServLedgEntry."Ship-to Code" := "Ship-to Code";
        ServLedgEntry."Service Order Type" := ServHeader."Service Order Type";

        IF ServItemLine.GET("Document Type","Document No.","Service Item Line No.") THEN BEGIN
          ServLedgEntry."Service Item No. (Serviced)" := ServItemLine."Service Item No.";
          ServLedgEntry."Item No. (Serviced)" := ServItemLine."Item No.";
          ServLedgEntry."Serial No. (Serviced)" := ServItemLine."Serial No.";
          ServLedgEntry."Variant Code (Serviced)" := ServItemLine."Variant Code";
        END ELSE
          IF ServItem.GET("Service Item No.") THEN BEGIN
            ServLedgEntry."Service Item No. (Serviced)" := ServItem."No.";
            ServLedgEntry."Item No. (Serviced)" := ServItem."Item No.";
            ServLedgEntry."Serial No. (Serviced)" := ServItem."Serial No.";
            ServLedgEntry."Variant Code (Serviced)" := ServItem."Variant Code";
          END;

        ServLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ServLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ServLedgEntry."User ID" := USERID;
        ServLedgEntry."No." := "No.";
        ServLedgEntry.Quantity := Qty;
        ServLedgEntry."Charged Qty." := Qty;
        IF TempServLine."Qty. to Consume" <> 0 THEN
          ServLedgEntry."Charged Qty." := 0;
        ServLedgEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ServLedgEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ServLedgEntry.Description := Description;
        ServLedgEntry."Fault Reason Code" := "Fault Reason Code";
        ServLedgEntry."Unit of Measure Code" := "Unit of Measure Code";
        ServLedgEntry."Work Type Code" := "Work Type Code";
        ServLedgEntry."Serv. Price Adjmt. Gr. Code" := "Serv. Price Adjmt. Gr. Code";
        ServLedgEntry."Service Price Group Code" := "Service Price Group Code";

        ServLedgEntry."Unit Cost" := GetRefinedUnitCost(TempServLine);
        ServLedgEntry."Cost Amount" := ROUND(ServLedgEntry."Unit Cost" * Qty,Currency."Amount Rounding Precision");

        ServLedgEntry."Discount %" := "Line Discount %";
        ServLedgEntry."Responsibility Center" := ServHeader."Responsibility Center";
        ServLedgEntry."Variant Code" := "Variant Code";

        LineAmount := ServLedgEntry."Charged Qty." * "Unit Price";
        IF ServHeader."Currency Code" = '' THEN BEGIN
          IF "Line Discount Type" = "Line Discount Type"::"Contract Disc." THEN
            ServLedgEntry."Contract Disc. Amount" :=
              ROUND("Line Discount Amount",Currency."Amount Rounding Precision");

          IF ServHeader."Prices Including VAT" THEN BEGIN
            ServLedgEntry."Unit Price" :=
              ROUND("Unit Price" / (1 + "VAT %" / 100),Currency."Unit-Amount Rounding Precision");
            ServLedgEntry."Discount Amount" :=
              ROUND("Line Discount Amount" / (1 + "VAT %" / 100),Currency."Amount Rounding Precision");
            ServLedgEntry."Amount (LCY)" :=
              ROUND(LineAmount / (1 + "VAT %" / 100),Currency."Amount Rounding Precision") - ServLedgEntry."Discount Amount";
          END ELSE BEGIN
            ServLedgEntry."Unit Price" :=
              ROUND("Unit Price",Currency."Unit-Amount Rounding Precision");
            ServLedgEntry."Discount Amount" :=
              ROUND("Line Discount Amount",Currency."Amount Rounding Precision");
            ServLedgEntry."Amount (LCY)" :=
              ROUND(LineAmount,Currency."Amount Rounding Precision") - ServLedgEntry."Discount Amount";
          END;
          ServLedgEntry.Amount := ServLedgEntry."Amount (LCY)";

        END ELSE BEGIN
          IF "Line Discount Type" = "Line Discount Type"::"Contract Disc." THEN
            ServLedgEntry."Contract Disc. Amount" := AmountToLCY(ServHeader,"Line Discount Amount");

          IF ServHeader."Prices Including VAT" THEN BEGIN
            ServLedgEntry."Unit Price" := UnitAmountToLCY(ServHeader,"Unit Price" / (1 + "VAT %" / 100));
            ServLedgEntry."Discount Amount" := AmountToLCY(ServHeader,"Line Discount Amount" / (1 + "VAT %" / 100));
            ServLedgEntry."Amount (LCY)" := AmountToLCY(ServHeader,(LineAmount - "Line Discount Amount") / (1 + "VAT %" / 100));
          END ELSE BEGIN
            ServLedgEntry."Unit Price" := UnitAmountToLCY(ServHeader,"Unit Price");
            ServLedgEntry."Discount Amount" := AmountToLCY(ServHeader,"Line Discount Amount");
            ServLedgEntry."Amount (LCY)" := AmountToLCY(ServHeader,LineAmount - "Line Discount Amount");
          END;
          ServLedgEntry.Amount := AmountToFCY(ServHeader,ServLedgEntry."Amount (LCY)");
        END;

        IF TempServLine."Qty. to Consume" <> 0 THEN
          ServLedgEntry."Discount Amount" := 0;

        ServLedgEntry.INSERT;
        NextEntryNo := NextEntryNo + 1;
        NextServLedgerEntryNo := NextEntryNo;

        DocDim.RESET;
        DocDim.SETRANGE("Table ID",DATABASE::"Service Line");
        DocDim.SETRANGE("Document Type","Document Type");
        DocDim.SETRANGE("Document No.","Document No.");
        DocDim.SETRANGE("Line No.","Line No.");
        DimMgt.MoveDocDimToLedgEntryDim(DocDim,DATABASE::"Service Ledger Entry",ServLedgEntry."Entry No.");

        EXIT(ServLedgEntry."Entry No.");
      END;
    END;

    PROCEDURE InsertServLedgerEntrySale@1(VAR PassedNextEntryNo@1009 : Integer;VAR ServHeader@1002 : Record 5900;VAR ServLine@1000 : Record 5902;VAR ServItemLine@1010 : Record 5901;Qty@1007 : Decimal;QtyToCharge@1005 : Decimal;GenJnlLineDocNo@1001 : Code[20];DocLineNo@1008 : Integer);
    VAR
      PServItemLine@1006 : Record 5901;
      ServShptLine@1004 : Record 5991;
      ApplyToServLedgEntry@1003 : Record 5907;
      CurrExchRate@1012 : Record 330;
      ServItem@1011 : Record 5940;
      TotalAmount@1016 : Decimal;
    BEGIN
      IF (ServLine."Document No." = '') AND
         (ServLine."Contract No." = '')
      THEN
        EXIT;

      GetCurrencyRec(ServHeader."Currency Code");

      IF ApplyToServLedgEntry.GET(ServLine."Appl.-to Service Entry") THEN BEGIN
        IF ApplyToServLedgEntry.Type = ApplyToServLedgEntry.Type::"Service Contract" THEN BEGIN
          ServLedgEntry.RESET;
          ServLedgEntry.SETCURRENTKEY(
            "Service Contract No.","Entry No.","Entry Type",Type,"Moved from Prepaid Acc.");
          ServLedgEntry.SETRANGE("Service Contract No.",ApplyToServLedgEntry."Service Contract No.");
          ServLedgEntry.SETRANGE("Entry Type",ApplyToServLedgEntry."Entry Type");
          ServLedgEntry.SETRANGE(Type,ApplyToServLedgEntry.Type);
          ServLedgEntry.SETRANGE("Moved from Prepaid Acc.",ApplyToServLedgEntry."Moved from Prepaid Acc.");
          IF ApplyToServLedgEntry."Apply Until Entry No." = 0 THEN
            ServLedgEntry.SETRANGE("Entry No.",ApplyToServLedgEntry."Entry No.")
          ELSE
            ServLedgEntry.SETRANGE("Entry No.",ApplyToServLedgEntry."Entry No.",ApplyToServLedgEntry."Apply Until Entry No.");
          IF ServLedgEntry.FIND('-') THEN BEGIN
            FirstEntryNo := ServLedgEntry."Entry No.";
            REPEAT
              ServLedgEntry.Open := FALSE;
              IF ServHeader."Document Type" = ServHeader."Document Type"::Invoice THEN BEGIN
                ServLedgEntry."Document Type" := ServLedgEntry."Document Type"::Invoice;
                ServLedgEntry."Document No." := GenJnlLineDocNo;
              END;
              ServLedgEntry.MODIFY;
            UNTIL ServLedgEntry.NEXT = 0;
          END;
          EXIT;
        END ELSE BEGIN
          ApplyToServLedgEntry.Open := FALSE;
          ApplyToServLedgEntry.MODIFY;
        END;
      END;


      ServContract.RESET;
      ServLedgEntry.RESET;
      ServLedgEntry.LOCKTABLE;

      WITH ServLedgEntry DO BEGIN
        INIT;
        NextServLedgerEntryNo := PassedNextEntryNo;
        "Entry No." := NextServLedgerEntryNo;

        IF ServLine."Contract No." <> '' THEN
          IF ServContract.GET(ServContract."Contract Type"::Contract,ServLine."Contract No.") THEN BEGIN
            "Service Contract No." := ServContract."Contract No.";
            "Contract Group Code" := ServContract."Contract Group Code";
            "Serv. Contract Acc. Gr. Code" := ServContract."Serv. Contract Acc. Gr. Code";
          END;

        IF NOT ServItemLine.GET(ServLine."Document Type",ServLine."Document No.",ServLine."Service Item Line No.") THEN BEGIN
          IF (ServLine."Shipment No." <> '') AND (ServLine."Shipment Line No." <> 0) THEN BEGIN
            ServShptLine.GET(ServLine."Shipment No.",ServLine."Shipment Line No.");
            IF NOT
               PServItemLine.GET(ServItemLine."Document Type"::Order,
                 ServShptLine."Order No.",ServShptLine."Service Item Line No.")
            THEN
              CLEAR(PServItemLine);
            "Service Item No. (Serviced)" := PServItemLine."Service Item No.";
            "Item No. (Serviced)" := PServItemLine."Item No.";
            "Serial No. (Serviced)" := PServItemLine."Serial No.";
            "Variant Code (Serviced)" := PServItemLine."Variant Code";
          END ELSE
            IF ServItem.GET(ServLine."Service Item No.") THEN BEGIN
              "Service Item No. (Serviced)" := ServItem."No.";
              "Item No. (Serviced)" := ServItem."Item No.";
              "Serial No. (Serviced)" := ServItem."Serial No.";
              "Variant Code (Serviced)" := ServItem."Variant Code";
            END
        END ELSE BEGIN
          "Service Item No. (Serviced)" := ServItemLine."Service Item No.";
          "Item No. (Serviced)" := ServItemLine."Item No.";
          "Serial No. (Serviced)" := ServItemLine."Serial No.";
          "Variant Code (Serviced)" := ServItemLine."Variant Code";
        END;


        CASE ServHeader."Document Type" OF
          ServHeader."Document Type"::"Credit Memo":
            "Document Type" := "Document Type"::"Credit Memo";
          ELSE BEGIN
            IF (ServHeader."Document Type" = ServHeader."Document Type"::Order) AND
               (ServLine."Qty. to Consume" <> 0)
            THEN
              "Document Type" := "Document Type"::Shipment
            ELSE
              "Document Type" := "Document Type"::Invoice;
          END;
        END;

        "Document No." := GenJnlLineDocNo;
        Open := FALSE;
        IF ServLine."Document No." <> '' THEN BEGIN
          IF ServHeader."Document Type" = ServHeader."Document Type"::Order THEN
            "Service Order No." := ServLine."Document No.";
          "Job No." := ServLine."Job No.";
          "Job Task No." := ServLine."Job Task No.";
          "Job Line Type" := ServLine."Job Line Type";
        END;

        // fill-in Service Order No with the value, taken from the shipment specified in Get Shipment Lines
        IF ("Service Order No." = '') AND
           (ServHeader."Document Type" = ServHeader."Document Type"::Invoice) AND
           (ServLine."Shipment No." <> '')
        THEN
          "Service Order No." := GetOrderNoFromShipment(ServLine."Shipment No.");

        "Moved from Prepaid Acc." := TRUE;
        "Posting Date" := ServHeader."Posting Date";
        IF QtyToCharge = 0 THEN
          "Entry Type" := "Entry Type"::Consume
        ELSE
          "Entry Type" := "Entry Type"::Sale;
        "Bill-to Customer No." := ServHeader."Bill-to Customer No.";
        "Customer No." := ServHeader."Customer No.";
        "Ship-to Code" := ServHeader."Ship-to Code";
        "Service Order Type" := ServHeader."Service Order Type";
        "Global Dimension 1 Code" := ServLine."Shortcut Dimension 1 Code";
        "Global Dimension 2 Code" := ServLine."Shortcut Dimension 2 Code";
        "Gen. Bus. Posting Group" := ServLine."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := ServLine."Gen. Prod. Posting Group";
        "Serv. Price Adjmt. Gr. Code" := ServLine."Serv. Price Adjmt. Gr. Code";
        "Service Price Group Code" := ServLine."Service Price Group Code";
        "Fault Reason Code" := ServLine."Fault Reason Code";
        "Unit of Measure Code" := ServLine."Unit of Measure Code";
        "Work Type Code" := ServLine."Work Type Code";
        "Service Item No. (Serviced)" := ServLine."Service Item No.";
        Description := ServLine.Description;
        "Responsibility Center" := ServHeader."Responsibility Center";
        "User ID" := USERID;
        "Location Code" := ServLine."Location Code";
        CASE ServLine.Type OF
          ServLine.Type::" ":
            Type := Type::" ";
          ServLine.Type::Item:
            BEGIN
              Type := Type::Item;
              "Bin Code" := ServLine."Bin Code";
            END;
          ServLine.Type::Resource:
            Type := Type::Resource;
          ServLine.Type::Cost:
            Type := Type::"Service Cost";
          ServLine.Type::"G/L Account":
            Type := Type::"G/L Account";
        END;
        "No." := ServLine."No.";
        "Document Line No." := DocLineNo;
        Quantity := Qty;
        "Charged Qty." := QtyToCharge;
        "Discount %" := -ServLine."Line Discount %";
        "Unit Cost" := -GetRefinedUnitCost(ServLine);
        "Cost Amount" := -ROUND("Unit Cost" * Qty,Currency."Amount Rounding Precision");
        IF ServHeader."Currency Code" = '' THEN BEGIN
          "Unit Price" := -ServLine."Unit Price";
          "Discount Amount" := ServLine."Line Discount Amount";
          "Amount (LCY)" := ServLine.Amount;
          Amount := "Amount (LCY)";
          IF ServHeader."Prices Including VAT" THEN BEGIN
            "Unit Price" :=
              ROUND("Unit Price" / (1 + ServLine."VAT %" / 100),Currency."Unit-Amount Rounding Precision");
            "Discount Amount" :=
              ROUND("Discount Amount" / (1 + ServLine."VAT %" / 100),Currency."Amount Rounding Precision");
          END;
        END ELSE BEGIN
          "Unit Price" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                ServHeader."Posting Date",ServHeader."Currency Code",
                -ServLine."Unit Price",ServHeader."Currency Factor"),Currency."Unit-Amount Rounding Precision");

          IF ServHeader."Prices Including VAT" THEN
            "Unit Price" := ROUND("Unit Price" / (1 + ServLine."VAT %" / 100),Currency."Unit-Amount Rounding Precision");

          TotalAmount := "Unit Price" * ABS("Charged Qty.");
          IF "Discount %" <> 0 THEN
            "Discount Amount" :=
              -ROUND(TotalAmount * "Discount %" / 100,Currency."Amount Rounding Precision")
          ELSE
            "Discount Amount" := 0;
          "Amount (LCY)" :=
            ROUND(TotalAmount - "Discount Amount",Currency."Amount Rounding Precision");
          Amount :=
            ROUND(
              CurrExchRate.ExchangeAmtLCYToFCY(
                ServHeader."Posting Date",ServHeader."Currency Code",
                "Amount (LCY)",ServHeader."Currency Factor"),Currency."Unit-Amount Rounding Precision");
        END;

        IF ApplyToServLedgEntry.GET(ServLine."Appl.-to Service Entry") THEN
          "Contract Disc. Amount" := ApplyToServLedgEntry."Contract Disc. Amount";

        INSERT;
        NextServLedgerEntryNo += 1;
        PassedNextEntryNo := NextServLedgerEntryNo;
        DocDim.RESET;
        DocDim.SETRANGE("Table ID",DATABASE::"Service Line");
        DocDim.SETRANGE("Document Type",ServLine."Document Type");
        DocDim.SETRANGE("Document No.",ServLine."Document No.");
        DocDim.SETRANGE("Line No.",ServLine."Line No.");
        DimMgt.MoveDocDimToLedgEntryDim(
          DocDim,DATABASE::"Service Ledger Entry","Entry No.");
      END;
    END;

    PROCEDURE InsertServLedgEntryCrMemo@9(VAR PassedNextEntryNo@1003 : Integer;VAR ServHeader@1002 : Record 5900;VAR ServLine@1001 : Record 5902;GenJnlLineDocNo@1004 : Code[20]);
    VAR
      ServItem@1000 : Record 5940;
      TotalAmount@1005 : Decimal;
    BEGIN
      IF ServLine."Qty. to Invoice" = 0 THEN
        EXIT;

      GetCurrencyRec(ServHeader."Currency Code");

      ServLedgEntry.RESET;
      ServLedgEntry.LOCKTABLE;

      WITH ServLedgEntry DO BEGIN
        INIT;
        NextServLedgerEntryNo := PassedNextEntryNo;
        "Entry No." := NextServLedgerEntryNo;

        IF ServItem.GET(ServLine."Service Item No.") THEN BEGIN
          "Service Item No. (Serviced)" := ServItem."No.";
          "Item No. (Serviced)" := ServItem."Item No.";
          "Serial No. (Serviced)" := ServItem."Serial No.";
        END;

        "Document Type" := "Document Type"::"Credit Memo";
        "Document No." := GenJnlLineDocNo;
        "Document Line No." := ServLine."Line No.";
        Open := FALSE;
        "Moved from Prepaid Acc." := TRUE;
        "Posting Date" := ServHeader."Posting Date";
        "Entry Type" := "Entry Type"::Sale;
        "Bill-to Customer No." := ServHeader."Bill-to Customer No.";
        "Customer No." := ServHeader."Customer No.";
        "Ship-to Code" := ServHeader."Ship-to Code";
        "Global Dimension 1 Code" := ServLine."Shortcut Dimension 1 Code";
        "Global Dimension 2 Code" := ServLine."Shortcut Dimension 2 Code";
        "Gen. Bus. Posting Group" := ServLine."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := ServLine."Gen. Prod. Posting Group";
        "Serv. Price Adjmt. Gr. Code" := ServLine."Serv. Price Adjmt. Gr. Code";
        "Service Price Group Code" := ServLine."Service Price Group Code";
        "Fault Reason Code" := ServLine."Fault Reason Code";
        "Location Code" := ServLine."Location Code";
        Description := ServLine.Description;
        "Responsibility Center" := ServHeader."Responsibility Center";
        "User ID" := USERID;
        CASE ServLine.Type OF
          ServLine.Type::" ":
            Type := Type::" ";
          ServLine.Type::Item:
            Type := Type::Item;
          ServLine.Type::Resource:
            Type := Type::Resource;
          ServLine.Type::Cost:
            Type := Type::"Service Cost";
          ServLine.Type::"G/L Account":
            Type := Type::"G/L Account";
        END;
        "No." := ServLine."No.";
        Quantity := ServLine.Quantity;
        "Charged Qty." := ServLine."Qty. to Invoice";
        "Discount %" := ServLine."Line Discount %";
        "Unit Cost" := GetRefinedUnitCost(ServLine);
        "Cost Amount" := ROUND("Unit Cost" * ServLine.Quantity,Currency."Amount Rounding Precision");
        "Job Line Type" := "Job Line Type"::" ";
        IF ServHeader."Currency Code" = '' THEN BEGIN
          "Unit Price" := ServLine."Unit Price";
          "Discount Amount" := ServLine."Line Discount Amount";
          "Amount (LCY)" := ServLine.Amount;
          Amount := "Amount (LCY)";
          IF ServHeader."Prices Including VAT" THEN BEGIN
            "Unit Price" :=
              ROUND("Unit Price" / (1 + ServLine."VAT %" / 100),Currency."Unit-Amount Rounding Precision");
            "Discount Amount" :=
              ROUND("Discount Amount" / (1 + ServLine."VAT %" / 100),Currency."Amount Rounding Precision");
          END;
        END ELSE BEGIN
          "Unit Price" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                ServHeader."Posting Date",ServHeader."Currency Code",
                ServLine."Unit Price",ServHeader."Currency Factor"));

          IF ServHeader."Prices Including VAT" THEN
            "Unit Price" := ROUND("Unit Price" / (1 + ServLine."VAT %" / 100),Currency."Unit-Amount Rounding Precision");

          TotalAmount := "Unit Price" * ABS("Charged Qty.");
          IF "Discount %" <> 0 THEN
            "Discount Amount" :=
              ABS(ROUND(TotalAmount * "Discount %" / 100,Currency."Amount Rounding Precision"))
          ELSE
            "Discount Amount" := 0;
          "Amount (LCY)" :=
            ROUND(TotalAmount - "Discount Amount");
          Amount :=
            ROUND(
              CurrExchRate.ExchangeAmtLCYToFCY(
                ServHeader."Posting Date",ServHeader."Currency Code",
                "Amount (LCY)",ServHeader."Currency Factor"));
        END;

        INSERT;
        NextServLedgerEntryNo += 1;
        PassedNextEntryNo := NextServLedgerEntryNo;
        DocDim.RESET;
        DocDim.SETRANGE("Table ID",DATABASE::"Service Line");
        DocDim.SETRANGE("Document Type",ServLine."Document Type");
        DocDim.SETRANGE("Document No.",ServLine."Document No.");
        DocDim.SETRANGE("Line No.",ServLine."Line No.");
        DimMgt.MoveDocDimToLedgEntryDim(
          DocDim,DATABASE::"Service Ledger Entry","Entry No.");

      END;
    END;

    PROCEDURE InsertServLedgerEntryCrMUsage@1102601000(VAR NextEntryNo@1102601000 : Integer;VAR ServHeader@1102601001 : Record 5900;VAR ServLine@1102601002 : Record 5902;DocNo@1102601003 : Code[20]);
    VAR
      ServItem@1102601004 : Record 5940;
      LineAmount@1102601005 : Decimal;
      ServItemLine@1102601006 : Record 5901;
    BEGIN
      IF ServLine."Qty. to Invoice" = 0 THEN
        EXIT;
      WITH ServLine DO BEGIN
        ServLedgEntry.INIT;
        ServLedgEntry."Entry No." := NextEntryNo;
        CASE Type OF
          Type::Item:
            BEGIN
              ServLedgEntry.Type := ServLedgEntry.Type::Item;
              ServLedgEntry."Bin Code" := "Bin Code";
            END;
          Type::Resource:
            ServLedgEntry.Type := ServLedgEntry.Type::Resource;
          Type::Cost:
            ServLedgEntry.Type := ServLedgEntry.Type::"Service Cost";
          Type::"G/L Account":
            ServLedgEntry.Type := ServLedgEntry.Type::"G/L Account";
        END;

        IF "Document Type" = "Document Type"::Order THEN
          ServLedgEntry."Service Order No." := "Document No.";

        ServLedgEntry."Location Code" := "Location Code";
        ServLedgEntry."Job No." := "Job No.";
        ServLedgEntry."Job Task No." := "Job Task No.";
        ServLedgEntry."Job Line Type" := "Job Line Type";

        ServLedgEntry."Document Type" := ServLedgEntry."Document Type"::Shipment;
        ServLedgEntry."Document No." := DocNo;
        ServLedgEntry."Document Line No." := "Line No.";
        ServLedgEntry."Moved from Prepaid Acc." := TRUE;
        ServLedgEntry."Posting Date" := "Posting Date";
        ServLedgEntry."Entry Type" := ServLedgEntry."Entry Type"::Usage;
        ServLedgEntry."Customer No." := ServHeader."Customer No.";
        ServLedgEntry."Bill-to Customer No." := ServHeader."Bill-to Customer No.";
        ServLedgEntry."Ship-to Code" := "Ship-to Code";
        ServLedgEntry."Service Order Type" := ServHeader."Service Order Type";

        IF ServItemLine.GET("Document Type","Document No.","Service Item Line No.") THEN BEGIN
          ServLedgEntry."Service Item No. (Serviced)" := ServItemLine."Service Item No.";
          ServLedgEntry."Item No. (Serviced)" := ServItemLine."Item No.";
          ServLedgEntry."Serial No. (Serviced)" := ServItemLine."Serial No.";
          ServLedgEntry."Variant Code (Serviced)" := ServItemLine."Variant Code";
        END ELSE
          IF ServItem.GET("Service Item No.") THEN BEGIN
            ServLedgEntry."Service Item No. (Serviced)" := ServItem."No.";
            ServLedgEntry."Item No. (Serviced)" := ServItem."Item No.";
            ServLedgEntry."Serial No. (Serviced)" := ServItem."Serial No.";
            ServLedgEntry."Variant Code (Serviced)" := ServItem."Variant Code";
          END;

        ServLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ServLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ServLedgEntry."User ID" := USERID;
        ServLedgEntry."No." := "No.";
        ServLedgEntry.Quantity := - ServLine.Quantity;
        ServLedgEntry."Charged Qty." := - ServLine.Quantity;
        IF ServLine."Qty. to Consume" <> 0 THEN
          ServLedgEntry."Charged Qty." := 0;
        ServLedgEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ServLedgEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ServLedgEntry.Description := Description;
        ServLedgEntry."Fault Reason Code" := "Fault Reason Code";
        ServLedgEntry."Unit of Measure Code" := "Unit of Measure Code";
        ServLedgEntry."Work Type Code" := "Work Type Code";
        ServLedgEntry."Serv. Price Adjmt. Gr. Code" := "Serv. Price Adjmt. Gr. Code";
        ServLedgEntry."Service Price Group Code" := "Service Price Group Code";

        ServLedgEntry."Unit Cost" := GetRefinedUnitCost(ServLine);
        ServLedgEntry."Cost Amount" := ROUND(ServLedgEntry."Unit Cost" * ServLine.Quantity,Currency."Amount Rounding Precision");

        ServLedgEntry."Discount %" := - "Line Discount %";
        ServLedgEntry."Responsibility Center" := ServHeader."Responsibility Center";
        ServLedgEntry."Variant Code" := "Variant Code";

        LineAmount := ServLedgEntry."Charged Qty." * "Unit Price";
        IF ServHeader."Currency Code" = '' THEN BEGIN
          IF "Line Discount Type" = "Line Discount Type"::"Contract Disc." THEN
            ServLedgEntry."Contract Disc. Amount" :=
              ROUND("Line Discount Amount",Currency."Amount Rounding Precision");

          IF ServHeader."Prices Including VAT" THEN BEGIN
            ServLedgEntry."Unit Price" :=
              ROUND("Unit Price" / (1 + "VAT %" / 100),Currency."Unit-Amount Rounding Precision");
            ServLedgEntry."Discount Amount" :=
              - ROUND("Line Discount Amount" / (1 + "VAT %" / 100),Currency."Amount Rounding Precision");
            ServLedgEntry."Amount (LCY)" :=
              ROUND(LineAmount / (1 + "VAT %" / 100),Currency."Amount Rounding Precision") - ServLedgEntry."Discount Amount";
          END ELSE BEGIN
            ServLedgEntry."Unit Price" :=
              ROUND("Unit Price",Currency."Unit-Amount Rounding Precision");
            ServLedgEntry."Discount Amount" :=
              - ROUND("Line Discount Amount",Currency."Amount Rounding Precision");
            ServLedgEntry."Amount (LCY)" :=
              ROUND(LineAmount,Currency."Amount Rounding Precision") - ServLedgEntry."Discount Amount";
          END;
          ServLedgEntry.Amount := ServLedgEntry."Amount (LCY)";

        END ELSE BEGIN
          IF "Line Discount Type" = "Line Discount Type"::"Contract Disc." THEN
            ServLedgEntry."Contract Disc. Amount" := AmountToLCY(ServHeader,"Line Discount Amount");

          IF ServHeader."Prices Including VAT" THEN BEGIN
            ServLedgEntry."Unit Price" := UnitAmountToLCY(ServHeader,"Unit Price" / (1 + "VAT %" / 100));
            ServLedgEntry."Discount Amount" := - AmountToLCY(ServHeader,"Line Discount Amount" / (1 + "VAT %" / 100));
            ServLedgEntry."Amount (LCY)" := AmountToLCY(ServHeader,(LineAmount - "Line Discount Amount") / (1 + "VAT %" / 100));
          END ELSE BEGIN
            ServLedgEntry."Unit Price" := UnitAmountToLCY(ServHeader,"Unit Price");
            ServLedgEntry."Discount Amount" := - AmountToLCY(ServHeader,"Line Discount Amount");
            ServLedgEntry."Amount (LCY)" := AmountToLCY(ServHeader,LineAmount - "Line Discount Amount");
          END;
          ServLedgEntry.Amount := AmountToFCY(ServHeader,ServLedgEntry."Amount (LCY)");
        END;

        IF ServLine."Qty. to Consume" <> 0 THEN
          ServLedgEntry."Discount Amount" := 0;

        WITH ServLedgEntry DO BEGIN
          "Cost Amount" := - "Cost Amount";
          "Unit Cost" := - "Unit Cost";
          "Unit Price" := - "Unit Price";
          INSERT;
        END;
        NextEntryNo := NextEntryNo + 1;
        NextServLedgerEntryNo := NextEntryNo;

        DocDim.RESET;
        DocDim.SETRANGE("Table ID",DATABASE::"Service Line");
        DocDim.SETRANGE("Document Type","Document Type");
        DocDim.SETRANGE("Document No.","Document No.");
        DocDim.SETRANGE("Line No.","Line No.");
        DimMgt.MoveDocDimToLedgEntryDim(DocDim,DATABASE::"Service Ledger Entry",ServLedgEntry."Entry No.");
      END;
    END;

    PROCEDURE InsertWarrantyLedgerEntry@3(VAR PassedWarrantyEntryNo@1001 : Integer;VAR ServHeader@1002 : Record 5900;VAR TempServLine@1000 : Record 5902;VAR ServItemLine@1003 : Record 5901;Qty@1004 : Decimal;QtyToCharge@1006 : Decimal;GenJnlLineDocNo@1005 : Code[20]) : Integer;
    BEGIN
      WITH TempServLine DO BEGIN
        IF Warranty AND (Type IN [Type::Item,Type::Resource]) AND ("Qty. to Ship" <> 0) THEN BEGIN
          CLEAR(WarrantyLedgEntry);
          WarrantyLedgEntry.LOCKTABLE;

          WarrantyLedgEntry.RESET;
          WarrantyLedgEntry.INIT;
          NextWarrantyLedgerEntryNo := PassedWarrantyEntryNo;
          WarrantyLedgEntry."Entry No." := NextWarrantyLedgerEntryNo;
          WarrantyLedgEntry."Document No." := GenJnlLineDocNo;
          WarrantyLedgEntry."Posting Date" := "Posting Date";
          WarrantyLedgEntry."Customer No." := ServHeader."Customer No.";
          WarrantyLedgEntry."Ship-to Code" := "Ship-to Code";
          WarrantyLedgEntry."Bill-to Customer No." := ServHeader."Bill-to Customer No.";

          IF NOT ServItemLine.GET("Document Type","Document No.","Service Item Line No.") THEN
            CLEAR(ServItemLine);
          WarrantyLedgEntry."Service Item No. (Serviced)" := ServItemLine."Service Item No.";
          WarrantyLedgEntry."Item No. (Serviced)" := ServItemLine."Item No.";
          WarrantyLedgEntry."Variant Code (Serviced)" := ServItemLine."Variant Code";
          WarrantyLedgEntry."Serial No. (Serviced)" := ServItemLine."Serial No.";
          WarrantyLedgEntry."Service Item Group (Serviced)" := ServItemLine."Service Item Group Code";
          WarrantyLedgEntry."Service Order No." := "Document No.";
          WarrantyLedgEntry."Service Contract No." := "Contract No.";
          WarrantyLedgEntry."Fault Reason Code" := "Fault Reason Code";
          WarrantyLedgEntry."Fault Area Code" := "Fault Area Code";
          WarrantyLedgEntry."Symptom Code" := "Symptom Code";
          WarrantyLedgEntry."Fault Code" := "Fault Code";
          WarrantyLedgEntry."Resolution Code" := "Resolution Code";
          WarrantyLedgEntry.Type := Type;
          WarrantyLedgEntry."No." := "No.";
          WarrantyLedgEntry.Quantity := ABS(Qty);
          WarrantyLedgEntry."Work Type Code" := "Work Type Code";
          WarrantyLedgEntry."Unit of Measure Code" := "Unit of Measure Code";
          WarrantyLedgEntry.Description := Description;
          WarrantyLedgEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
          WarrantyLedgEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
          WarrantyLedgEntry."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
          WarrantyLedgEntry."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
          WarrantyLedgEntry.Open := TRUE;
          WarrantyLedgEntry."Vendor No." := ServItemLine."Vendor No.";
          WarrantyLedgEntry."Vendor Item No." := ServItemLine."Vendor Item No.";
          WarrantyLedgEntry."Variant Code" := "Variant Code";

          IF "Line Discount Type" = "Line Discount Type"::"Warranty Disc." THEN BEGIN
            IF ServHeader."Currency Code" = '' THEN
              WarrantyLedgEntry.Amount := "Line Discount Amount"
            ELSE
              WarrantyLedgEntry.Amount := AmountToLCY(ServHeader,"Line Discount Amount");
            WarrantyLedgEntry.Amount := ABS(WarrantyLedgEntry.Amount);
          END;
          WarrantyLedgEntry.INSERT;

          NextWarrantyLedgerEntryNo += 1;
          PassedWarrantyEntryNo := NextWarrantyLedgerEntryNo;

          DocDim.RESET;
          DocDim.SETRANGE("Table ID",DATABASE::"Service Line");
          DocDim.SETRANGE("Document Type","Document Type");
          DocDim.SETRANGE("Document No.","Document No.");
          DocDim.SETRANGE("Line No.","Line No.");
          DimMgt.MoveDocDimToLedgEntryDim(DocDim,DATABASE::"Warranty Ledger Entry",WarrantyLedgEntry."Entry No.");
          EXIT(WarrantyLedgEntry."Entry No.");
        END ELSE
          EXIT(0);
      END;
    END;

    LOCAL PROCEDURE InitServLedgerEntry@8() : Integer;
    BEGIN
      // returns NextEntryNo
      WITH ServLedgEntry DO BEGIN
        RESET;
        LOCKTABLE;
        IF FIND('+') THEN BEGIN
          EXIT("Entry No." + 1)
        END ELSE
          EXIT(1);
      END;
    END;

    LOCAL PROCEDURE InitWarrantyLedgerEntry@18() : Integer;
    BEGIN
      WITH WarrantyLedgEntry DO BEGIN
        RESET;
        LOCKTABLE;
        IF FIND('+') THEN BEGIN
          EXIT("Entry No." + 1)
        END ELSE
          EXIT(1);
      END;
    END;

    PROCEDURE CreateCreditEntry@2(VAR PassedNextEntryNo@1010 : Integer;VAR ServHeader@1016 : Record 5900;VAR ServLine@1000 : Record 5902;GenJnlLineDocNo@1001 : Code[20]);
    VAR
      ServShptHeader@1002 : Record 5990;
      ServItem@1004 : Record 5940;
      ServContractAccGr@1015 : Record 5973;
      ApplyToServLedgEntry@1007 : Record 5907;
      ServDocReg@1009 : Record 5936;
      ServDocType@1013 : Integer;
      ServDocNo@1014 : Code[20];
    BEGIN
      IF ServLine."Contract No." = '' THEN BEGIN
        InsertServLedgEntryCrMemo(PassedNextEntryNo,ServHeader,ServLine,GenJnlLineDocNo);
        IF ServLine."Service Item No." <> '' THEN
          InsertServLedgerEntryCrMUsage(PassedNextEntryNo,ServHeader,ServLine,GenJnlLineDocNo);
        EXIT;
      END;

      IF ServLine.Type = ServLine.Type::" " THEN
        EXIT;

      ServHeader.GET(ServLine."Document Type",ServLine."Document No.");
      IF ServHeader."Document Type" <> ServHeader."Document Type"::"Credit Memo" THEN
        EXIT;

      GetCurrencyRec(ServHeader."Currency Code");
      CLEAR(ServLedgEntry);
      WITH ServLedgEntry DO BEGIN
        INIT;
        NextServLedgerEntryNo := PassedNextEntryNo;
        "Entry No." := NextServLedgerEntryNo;

        IF ServLine."Shipment No." <> '' THEN BEGIN
          ServShptHeader.GET(ServLine."Shipment No.");
          ServLine.TESTFIELD("Contract No.",ServShptHeader."Contract No.");
          IF ServHeader."Document Type" = ServHeader."Document Type"::Order THEN
            "Service Order No." := ServLine."Document No.";
        END;

        IF ServLine."Contract No." <> '' THEN BEGIN
          ServContract.GET(ServContract."Contract Type"::Contract,ServLine."Contract No.");
          "Service Contract No." := ServContract."Contract No.";
          "Contract Group Code" := ServContract."Contract Group Code";
        END ELSE
          IF ServShptHeader."Contract No." <> '' THEN BEGIN
            ServContract.GET(ServContract."Contract Type"::Contract,ServShptHeader."Contract No.");
            "Service Contract No." := ServContract."Contract No.";
            "Contract Group Code" := ServContract."Contract Group Code";
            "Contract Invoice Period" := FORMAT(ServContract."Invoice Period");
          END;

        IF ServLine."Service Item No." <> '' THEN BEGIN
          ServItem.GET(ServLine."Service Item No.");
          "Service Item No. (Serviced)" := ServItem."No.";
          "Item No. (Serviced)" := ServItem."Item No.";
          "Serial No. (Serviced)" := ServItem."Serial No.";
          "Service Item No. (Serviced)" := ServItem."No.";
        END;

        "Document Type" := "Document Type"::" ";
        "Document No." := GenJnlLineDocNo;
        Open := FALSE;
        "Posting Date" := ServHeader."Posting Date";
        "Moved from Prepaid Acc." := TRUE;
        "Entry Type" := "Entry Type"::Usage;
        "Bill-to Customer No." := ServHeader."Bill-to Customer No.";
        "Customer No." := ServHeader."Customer No.";
        "Ship-to Code" := ServHeader."Ship-to Code";
        "Location Code" := ServLine."Location Code";
        "Global Dimension 1 Code" := ServLine."Shortcut Dimension 1 Code";
        "Global Dimension 2 Code" := ServLine."Shortcut Dimension 2 Code";
        "User ID" := USERID;
        "Job Line Type" := "Job Line Type"::" ";

        CLEAR(ServDocReg);
        ServDocReg.ServiceDocument(ServHeader."Document Type",ServHeader."No.",ServDocType,ServDocNo);
        CASE ServDocType OF
          DATABASE::"Service Shipment Header",DATABASE::"Service Header":
            BEGIN
              CASE ServLine.Type OF
                ServLine.Type::Item:
                  Type := Type::Item;
                ServLine.Type::Resource:
                  Type := Type::Resource;
                ServLine.Type::Cost:
                  Type := Type::"Service Cost";
                ServLine.Type::"G/L Account":
                  Type := Type::"G/L Account";
              END;
              "No." := ServLine."No.";
              "Entry Type" := "Entry Type"::Sale;
              "Document Line No." := ServLine."Line No.";
              "Amount (LCY)" := -ServLine.Amount;
              Quantity := -ServLine.Quantity;
              "Charged Qty." := -ServLine."Qty. to Invoice";
              "Discount Amount" := -ServLine."Line Discount Amount";
              "Unit Cost" := -GetRefinedUnitCost(ServLine);
              "Cost Amount" := -ROUND("Unit Cost" * ServLine.Quantity);
              "Discount %" := -ServLine."Line Discount %";
              "Unit Price" :=
                ROUND(
                  -("Amount (LCY)" + "Discount Amount") / Quantity,Currency."Unit-Amount Rounding Precision");
              "Gen. Bus. Posting Group" := ServLine."Gen. Bus. Posting Group";
              "Gen. Prod. Posting Group" := ServLine."Gen. Prod. Posting Group";
              Open := FALSE;
              Description := ServLine.Description;
              INSERT;

              CLEAR(DocDim);
              DocDim.SETRANGE("Table ID",DATABASE::"Service Line");
              DocDim.SETRANGE("Document Type",ServLine."Document Type");
              DocDim.SETRANGE("Document No.",ServLine."Document No.");
              DocDim.SETRANGE("Line No.",ServLine."Line No.");
              DimMgt.MoveDocDimToLedgEntryDim(
                DocDim,DATABASE::"Service Ledger Entry","Entry No.");


              NextServLedgerEntryNo += 1;
              "Entry No." := NextServLedgerEntryNo;
              "Document Type" := "Document Type"::"Credit Memo";
              "Entry Type" := "Entry Type"::Sale;
              "Document Line No." := ServLine."Line No.";
              "Amount (LCY)" := ServLine.Amount;
              IF ServHeader."Currency Code" <> '' THEN
                Amount := AmountToFCY(ServHeader,"Amount (LCY)")
              ELSE
                Amount := "Amount (LCY)";
              Quantity := ServLine.Quantity;
              "Charged Qty." := ServLine."Qty. to Invoice";
              "Discount Amount" := ServLine."Line Discount Amount";
              "Unit Cost" := GetRefinedUnitCost(ServLine);
              "Cost Amount" := ROUND("Unit Cost" * ServLine.Quantity);
              "Discount %" := ServLine."Line Discount %";
              "Unit Price" :=
                ROUND(
                  ("Amount (LCY)" + "Discount Amount") / Quantity,Currency."Unit-Amount Rounding Precision");
              Description := ServLine.Description;
              INSERT;

              CLEAR(DocDim);
              DocDim.SETRANGE("Table ID",DATABASE::"Service Line");
              DocDim.SETRANGE("Document Type",ServLine."Document Type");
              DocDim.SETRANGE("Document No.",ServLine."Document No.");
              DocDim.SETRANGE("Line No.",ServLine."Line No.");
              DimMgt.MoveDocDimToLedgEntryDim(
                DocDim,DATABASE::"Service Ledger Entry","Entry No.");

              NextServLedgerEntryNo += 1;
            END;
          DATABASE::"Service Contract Header":
            BEGIN
              Type := Type::"Service Contract";
              "No." := ServDocNo;
              ServContract.TESTFIELD("Serv. Contract Acc. Gr. Code");
              ServContractAccGr.GET(ServContract."Serv. Contract Acc. Gr. Code");
              IF ServContract.Prepaid AND (ServContractAccGr."Prepaid Contract Acc." = ServLine."No.") THEN BEGIN
                "Moved from Prepaid Acc." := FALSE;
                Prepaid := TRUE;
              END;
              "Serv. Contract Acc. Gr. Code" := ServContract."Serv. Contract Acc. Gr. Code";
              "Entry No." := NextServLedgerEntryNo;
              "Document Type" := "Document Type"::"Credit Memo";
              "Entry Type" := "Entry Type"::Sale;
              "Unit Price" := ServLine."Unit Price";
              "Amount (LCY)" := ServLine.Amount;
              IF ServHeader."Currency Code" <> '' THEN
                Amount := AmountToFCY(ServHeader,"Amount (LCY)")
              ELSE
                Amount := "Amount (LCY)";
              Quantity := 1;
              "Charged Qty." := 1;
              "Contract Disc. Amount" := -ServLine."Line Discount Amount";
              "Unit Cost" := -ServLine."Unit Cost (LCY)";
              "Cost Amount" := -ServLine."Unit Cost (LCY)";
              "Discount Amount" := ServLine."Line Discount Amount";
              "Discount %" := ServLine."Line Discount %";
              "Gen. Bus. Posting Group" := ServLine."Gen. Bus. Posting Group";
              "Gen. Prod. Posting Group" := ServLine."Gen. Prod. Posting Group";
              Description := ServLine.Description;
              IF ServLine."Appl.-to Service Entry" <> 0 THEN
                IF ApplyToServLedgEntry.GET(ServLine."Appl.-to Service Entry") THEN
                  "Posting Date" := ApplyToServLedgEntry."Posting Date";
              "Applies-to Entry No." := ServLine."Appl.-to Service Entry";
              INSERT;

              DocDim.RESET;
              DocDim.SETRANGE("Table ID",DATABASE::"Service Line");
              DocDim.SETRANGE("Document Type",ServLine."Document Type");
              DocDim.SETRANGE("Document No.",ServLine."Document No.");
              DocDim.SETRANGE("Line No.",ServLine."Line No.");
              DimMgt.MoveDocDimToLedgEntryDim(
                DocDim,DATABASE::"Service Ledger Entry","Entry No.");

              NextServLedgerEntryNo += 1;
            END;
        END;
        PassedNextEntryNo := NextServLedgerEntryNo;
      END;
    END;

    PROCEDURE GetCurrencyRec@17(CurrencyCode@1000 : Code[10]);
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Unit-Amount Rounding Precision");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    PROCEDURE CalcDivideAmount@4(Qty@1005 : Decimal;VAR PassedServHeader@1006 : Record 5900;VAR PassedTempServLine@1002 : Record 5902;VAR PassedVATAmountLine@1000 : Record 290);
    VAR
      TempVATAmountLineRemainder@1003 : TEMPORARY Record 290;
      ServAmtsMgt@1001 : Codeunit 5986;
    BEGIN
      TempVATAmountLineRemainder.DELETEALL;
      ServAmtsMgt.DivideAmount(2,Qty,PassedServHeader,PassedTempServLine,PassedVATAmountLine,TempVATAmountLineRemainder);
    END;

    LOCAL PROCEDURE GetOrderNoFromShipment@5(ShipmentNo@1000 : Code[20]) : Code[20];
    VAR
      ServShptHeader@1001 : Record 5990;
    BEGIN
      ServShptHeader.GET(ShipmentNo);
      EXIT(ServShptHeader."Order No.");
    END;

    PROCEDURE AmountToFCY@15(ServiceHeader@1001 : Record 5900;AmountLCY@1000 : Decimal) : Decimal;
    VAR
      Currency@1002 : Record 4;
    BEGIN
      Currency.GET(ServiceHeader."Currency Code");
      Currency.TESTFIELD("Amount Rounding Precision");
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            ServiceHeader."Posting Date",ServiceHeader."Currency Code",
            AmountLCY,ServiceHeader."Currency Factor"),
          Currency."Amount Rounding Precision"));
    END;

    PROCEDURE AmountToLCY@11(ServiceHeader@1001 : Record 5900;FCAmount@1000 : Decimal) : Decimal;
    VAR
      Currency@1002 : Record 4;
    BEGIN
      Currency.GET(ServiceHeader."Currency Code");
      Currency.TESTFIELD("Amount Rounding Precision");
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            ServiceHeader."Posting Date",ServiceHeader."Currency Code",
            FCAmount,ServiceHeader."Currency Factor"),
          Currency."Amount Rounding Precision"));
    END;

    PROCEDURE UnitAmountToLCY@7(VAR ServiceHeader@1002 : Record 5900;FCAmount@1000 : Decimal) : Decimal;
    VAR
      Currency@1003 : Record 4;
    BEGIN
      Currency.GET(ServiceHeader."Currency Code");
      Currency.TESTFIELD("Unit-Amount Rounding Precision");
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            ServiceHeader."Posting Date",ServiceHeader."Currency Code",
            FCAmount,ServiceHeader."Currency Factor"),
          Currency."Unit-Amount Rounding Precision"));
    END;

    PROCEDURE GetRefinedUnitCost@10(ServiceLine@1000 : Record 5902) : Decimal;
    VAR
      Item@1001 : Record 27;
    BEGIN
      IF ServiceLine.Type = ServiceLine.Type::Item THEN
        IF Item.GET(ServiceLine."No.") THEN
          IF Item."Costing Method" = Item."Costing Method"::Standard THEN
            EXIT(Item."Unit Cost");

      EXIT(ServiceLine."Unit Cost (LCY)");
    END;

    BEGIN
    END.
  }
}
