OBJECT Codeunit 6810 EP Request Handler
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=VAR
            XMLConfig@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
            EncodeXML@1001 : Codeunit 6814;
          BEGIN
            IF IsRunning THEN BEGIN
              IF GUIALLOWED THEN
                MESSAGE(Text003);
              EXIT;
            END;

            GetNASSetup;

            CREATE(XMLConfig);
            EncodeXML.CreateListenerConfig(XMLConfig,NASID,FALSE);
            CREATE(QueueListener);
            IF NOT QueueListener.StartListen(XMLConfig) THEN BEGIN
              CLEAR(QueueListener);
              CLEAR(XMLConfig);
              ERROR(Text004);
            END;
            CLEAR(XMLConfig);

            IsRunning := TRUE;

            MESSAGE(Text002);
          END;

  }
  CODE
  {
    VAR
      EPNASSetup@1009 : Record 6870;
      XMLDocumentRecv@1005 : Codeunit 6811;
      XMLDocIn@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOut@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      Text001@1000000004 : TextConst 'ENU=Employee Portal Setup not found.;ESP=No se encontr¢ Configuraci¢n Employee Portal.';
      Text002@1000000008 : TextConst 'ENU=NAS for Employee Portal started.;ESP=Se inici¢ NAS para Employee Portal.';
      QueueListener@1012 : Automation "{10E1E859-EEEA-4676-808B-F3A8A89B4DB2} 2.0:{1E2E223F-CC93-4629-8EA5-9593EF40D072}:Unknown Automation Server.Unknown Class" WITHEVENTS;
      QueueSender@1000 : Automation "{10E1E859-EEEA-4676-808B-F3A8A89B4DB2} 2.0:{55DD38AA-8C73-429D-BFC6-F04701BC0D0F}:Unknown Automation Server.Unknown Class";
      Text003@1002 : TextConst 'ENU=The NAS has already been started for Employee Portal.;ESP=Ya se inici¢ NAS para Employee Portal.';
      Text004@1003 : TextConst 'ENU=There is a problem with the queue listener.;ESP=Problema con la escucha de cola.';
      IsRunning@1007 : Boolean;
      Text005@1008 : TextConst 'ENU=Error sending message.;ESP=Error al enviar mensaje.';
      NASID@1006 : Code[20];
      Text007@1011 : TextConst 'ENU=Error receiving Backend private key.;ESP=Error al recibir clave privada servidor.';
      Text008@1004 : TextConst 'ENU=Error receiving Frontend public key.;ESP=Error al recibir clave privada cliente.';

    PROCEDURE Version@1() : Text[8];
    BEGIN
      EXIT('01.00.00');
    END;

    PROCEDURE AddVersion@2(VAR XMLDoc@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLNode@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNode2@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XMLNode := XMLDoc.documentElement;
      XMLNode2 := XMLNode.selectSingleNode('//GUID');
      XMLNewChild := XMLNode.ownerDocument.createNode('element','VERSION','');
      XMLNewChild.text := Version;

      XMLNode.insertBefore(XMLNewChild,XMLNode2);
    END;

    PROCEDURE CompareVersion@3(VAR XMLDoc@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") : Boolean;
    VAR
      XMLNode@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XMLNode := XMLDoc.documentElement;
      XMLNode := XMLNode.selectSingleNode('//VERSION');

      IF ISCLEAR(XMLNode) THEN
        EXIT(FALSE);

      IF XMLNode.text <> '' THEN
        IF XMLNode.text = Version THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE WrongVersion@4(VAR XMLDocIn1@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocOut1@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      DecodeXML@1006 : Codeunit 6813;
      EncodeXML@1005 : Codeunit 6814;
      SupportFunctions@1004 : Codeunit 6815;
      XMLDocOutData@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocErrors@1008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLNode1@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNode2@1009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      GUID@1002 : Text[50];
    BEGIN
      DecodeXML.GetGUIDFromIn(XMLDocIn1,GUID);
      CREATE(XMLDocOutData);
      CREATE(XMLDocErrors);

      XMLDocOut1.loadXML('<EMPLOYEEPORTAL/>');
      XMLNode1 := XMLDocOut1.documentElement;
      EncodeXML.AddGUID(XMLDocOut1,GUID);

      EncodeXML.CreateErrors(XMLDocErrors);
      EncodeXML.AddErrors(XMLDocErrors,4,'','','');
      XMLDocOutData.loadXML('<DATA/>');
      SupportFunctions.MergeErrorsPartToData(XMLDocOutData,XMLDocErrors);

      XMLNode2 := XMLDocOutData.documentElement;
      XMLNode1.appendChild(XMLNode2);

      CLEAR(XMLDocOutData);
      CLEAR(XMLDocErrors);
    END;

    PROCEDURE SetNASID@1000000003(ID@1000000000 : Code[20]);
    BEGIN
      NASID := ID;
    END;

    LOCAL PROCEDURE GetNASSetup@5();
    BEGIN
      IF NOT EPNASSetup.GET(NASID) THEN
        ERROR(Text001)
    END;

    PROCEDURE GetBackendKey@6(VAR XMLDoc@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      EPSetup@1002 : Record 6800;
      OutStream@1001 : OutStream;
    BEGIN
      EPSetup.GET;
      EPSetup.CALCFIELDS("Back End Private Key");
      IF NOT EPSetup."Back End Private Key".HASVALUE THEN
        ERROR(Text007);

      EPSetup."Back End Private Key".CREATEOUTSTREAM(OutStream);
      XMLDoc.load(OutStream);
    END;

    PROCEDURE GetPublicKey@7(VAR XMLDoc@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";PartnerID@1000 : Text[50]);
    VAR
      TrustedSites@1003 : Record 6872;
      OutStream@1002 : OutStream;
    BEGIN
      TrustedSites.SETCURRENTKEY("Site Identifier");
      TrustedSites.SETRANGE("Site Identifier",PartnerID);
      IF NOT TrustedSites.FIND('-') THEN
        ERROR(Text008);

      TrustedSites.CALCFIELDS("Partner Public Key");
      IF TrustedSites."Partner Public Key".HASVALUE AND TrustedSites."Answer Sent" THEN BEGIN
        TrustedSites."Partner Public Key".CREATEOUTSTREAM(OutStream);
        XMLDoc.load(OutStream);
      END ELSE
        ERROR(Text008);
    END;

    PROCEDURE StopQueue@8();
    BEGIN
      IF NOT ISCLEAR(QueueListener) THEN
        QueueListener.StopListen;
    END;

    EVENT XMLDocIn@1000000001::ondataavailable@198();
    BEGIN
    END;

    EVENT XMLDocIn@1000000001::onreadystatechange@-609();
    BEGIN
    END;

    EVENT XMLDocOut@1000000000::ondataavailable@198();
    BEGIN
    END;

    EVENT XMLDocOut@1000000000::onreadystatechange@-609();
    BEGIN
    END;

    EVENT QueueListener@1012::ComMessageReceived@1(incomingMessage@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF95-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMDocument2");
    VAR
      DecodeXML@1006 : Codeunit 6813;
      EPTrustMgt@1005 : Codeunit 6871;
      GUID@1004 : Text[50];
      PartnerID@1003 : Text[50];
      XMLKey1@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLKey2@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
    BEGIN
      GetNASSetup;

      IF ISCLEAR(XMLDocIn) THEN
        CREATE(XMLDocIn);
      IF ISCLEAR(XMLDocOut) THEN
        CREATE(XMLDocOut);

      XMLDocIn := incomingMessage;
      PartnerID := QueueListener.SiteId;

      IF CompareVersion(XMLDocIn) THEN BEGIN
        // Process Document
        DecodeXML.GetGUIDFromIn(XMLDocIn,GUID);

        // Process Document
        XMLDocumentRecv.ProcessXMLDocument(XMLDocIn,XMLDocOut);
      END ELSE BEGIN
        WrongVersion(XMLDocIn,XMLDocOut);
      END;

      AddVersion(XMLDocOut);

      // Answer
      CREATE(QueueSender);

      CREATE(XMLKey1);
      CREATE(XMLKey2);

      GetBackendKey(XMLKey1);
      IF EPNASSetup."Use Encryption" THEN
        GetPublicKey(XMLKey2,PartnerID);

      IF NOT QueueSender.WriteToMessageQueue(EPNASSetup."Reply Queue",XMLDocOut,TRUE,
        EPNASSetup."Use Encryption",EPNASSetup."Use Compression",XMLKey2,XMLKey1,FALSE) THEN
          ERROR(Text005);

      CLEAR(QueueSender);
      CLEAR(XMLKey1);
      CLEAR(XMLKey2);
      CLEAR(XMLDocIn);
      CLEAR(XMLDocOut);
    END;

    BEGIN
    END.
  }
}
