OBJECT Codeunit 7009776 SMTP Mail - SSL
{
  OBJECT-PROPERTIES
  {
    Date=18/12/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009,NAVW15.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 409=r;
    OnRun=BEGIN
            CreateMessage('Fernando','base2k@gmail.com','fbj@sistemasdegestion.com','test','test',TRUE);
            Send;
          END;

  }
  CODE
  {
    VAR
      SMTPMailSetup@1003 : Record 409;
      Mail@1000 : Automation "{CD000000-8B95-11D1-82DB-00C04FB1625D} 1.0:{CD000001-8B95-11D1-82DB-00C04FB1625D}:'Microsoft CDO for Windows 2000 Library'.Message";
      Text001@1001 : TextConst 'ENU=The email address "%1" is invalid.;ESP=La direcci¢n de correo electr¢nico "%1" no es v lida.';
      Text002@1002 : TextConst 'ENU=Attachment %1 does not exist or can not be accessed from the program.;ESP=El adjunto %1 no existe o no se puede obtener acceso a ‚ste desde el programa.';
      Text003@1005 : TextConst 'ENU=The SMTP mail system returned the following error: %1;ESP=El sistema de correo SMTP devolvi¢ el siguiente error: %1';
      MailBody@1100253000 : Automation "{CD000000-8B95-11D1-82DB-00C04FB1625D} 1.0:{CD000021-8B95-11D1-82DB-00C04FB1625D}:'Microsoft CDO for Windows 2000 Library'.IBodyPart";
      MailBody2@1100253002 : Automation "{CD000000-8B95-11D1-82DB-00C04FB1625D} 1.0:{CD000021-8B95-11D1-82DB-00C04FB1625D}:'Microsoft CDO for Windows 2000 Library'.IBodyPart";
      ADODBStream@1100253001 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Stream";

    PROCEDURE CreateMessage@1(SenderName@1008 : Text[100];SenderAddress@1000 : Text[50];Recipients@1001 : Text[1024];Subject@1004 : Text[200];Body@1005 : Text[1024];HtmlFormatted@1006 : Boolean);
    BEGIN
      IF Recipients <> '' THEN
        CheckValidEmailAddresses(Recipients);
      CheckValidEmailAddresses(SenderAddress);
      SMTPMailSetup.GET;
      SMTPMailSetup.TESTFIELD("SMTP Server");
      IF ISCLEAR(Mail) THEN
        CREATE(Mail);

      IF ISCLEAR(ADODBStream) THEN
        CREATE(ADODBStream);

      Mail.From := SenderName + '<' + SenderAddress + '>';
      Mail."To" := Recipients;
      Mail.Subject := Subject;

      MailBody := Mail.BodyPart;

      MailBody2 := MailBody.AddBodyPart;
      MailBody2.Fields.Item('urn:schemas:mailheader:content-type').Value := 'text/plain; charset="iso-8859-9"';
      MailBody2.Fields.Update;

      MailBody2 := MailBody.AddBodyPart;
      MailBody2.Fields.Item('urn:schemas:mailheader:content-type').Value := 'text/html; charset="iso-8859-9"';
      MailBody2.Fields.Update;

      MailBody.Fields.Item('urn:schemas:mailheader:content-type').Value := 'multipart/alternative';
      MailBody.Fields.Update;

      IF HtmlFormatted THEN
        MailBody2 := MailBody.BodyParts.Item(2)
      ELSE
        MailBody2 := MailBody.BodyParts.Item(1);

      ADODBStream := MailBody2.GetDecodedContentStream;
      ADODBStream.WriteText(Body);
    END;

    PROCEDURE Send@3();
    VAR
      Result@1000 : Text[1024];
      Schema@1100253000 : Text[150];
    BEGIN
      WITH SMTPMailSetup DO BEGIN
        ADODBStream.Flush;

        Schema := 'http://schemas.microsoft.com/cdo/configuration/';

        Mail.Configuration.Fields.Item(Schema + 'sendusing').Value := 2;
        Mail.Configuration.Fields.Item(Schema + 'smtpserver').Value := "SMTP Server";
        Mail.Configuration.Fields.Item(Schema + 'smtpserverport').Value := "Server Port";

        CASE Authentication OF
          SMTPMailSetup.Authentication::Anonymous: Mail.Configuration.Fields.Item(Schema + 'smtpauthenticate').Value := 0;
          SMTPMailSetup.Authentication::NTLM: Mail.Configuration.Fields.Item(Schema + 'smtpauthenticate').Value := 2;
          SMTPMailSetup.Authentication::Basic: Mail.Configuration.Fields.Item(Schema + 'smtpauthenticate').Value := 1;
        END;

        Mail.Configuration.Fields.Item(Schema + 'sendusername').Value := "User ID";
        Mail.Configuration.Fields.Item(Schema + 'sendpassword').Value := Password;

        IF "Use SSL" THEN
          Mail.Configuration.Fields.Item(Schema + 'smtpusessl').Value := 1
        ELSE
          Mail.Configuration.Fields.Item(Schema + 'smtpusessl').Value := 0;

        Mail.Configuration.Fields.Update;
        Mail.Send
      END;

      CLEAR(Mail);
      CLEAR(ADODBStream);
    END;

    PROCEDURE AddRecipients@4(Recipients@1000 : Text[1024]);
    VAR
      Result@1001 : Text[1024];
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Mail."To" := Mail."To" + ';' + Recipients;
    END;

    PROCEDURE AddCC@5(Recipients@1000 : Text[1024]);
    VAR
      Result@1001 : Text[1024];
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Mail.CC := Mail.CC + ';' + Recipients;
    END;

    PROCEDURE AddBCC@6(Recipients@1000 : Text[1024]);
    VAR
      Result@1001 : Text[1024];
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Mail.BCC := Mail.BCC + ';' + Recipients;
    END;

    PROCEDURE AppendBody@7(BodyPart@1000 : Text[1024];HtmlFormatted@1100253000 : Boolean);
    VAR
      Result@1001 : Text[1024];
      Str@1100253001 : OutStream;
      FSO@1100253002 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{C7C3F5B5-88A3-11D0-ABCB-00A0C90FFFC0}:'Microsoft Scripting Runtime'.File";
    BEGIN
      ADODBStream.WriteText(BodyPart);
    END;

    PROCEDURE AddAttachment@2(Attachment@1000 : Text[260]);
    VAR
      Result@1001 : Text[1024];
    BEGIN
      IF Attachment = '' THEN
        EXIT;
      IF NOT EXISTS(Attachment) THEN
        ERROR(Text002,Attachment);
      Mail.AddAttachment(Attachment);
    END;

    LOCAL PROCEDURE CheckValidEmailAddresses@8(Recipients@1000 : Text[1024]);
    VAR
      s@1002 : Text[1024];
    BEGIN
      IF Recipients = '' THEN
        ERROR(Text001,Recipients);

      s := Recipients;
      WHILE STRPOS(s,';') > 1 DO BEGIN
        CheckValidEmailAddress(COPYSTR(s,1,STRPOS(s,';') - 1));
        s := COPYSTR(s,STRPOS(s,';') + 1);
      END;
      CheckValidEmailAddress(s);
    END;

    LOCAL PROCEDURE CheckValidEmailAddress@12(EmailAddress@1000 : Text[250]);
    VAR
      i@1001 : Integer;
      NoOfAtSigns@1002 : Integer;
    BEGIN
      IF EmailAddress = '' THEN
        ERROR(Text001,EmailAddress);

      IF (EmailAddress[1] = '@') OR (EmailAddress[STRLEN(EmailAddress)] = '@') THEN
        ERROR(Text001,EmailAddress);

      FOR i := 1 TO STRLEN(EmailAddress) DO BEGIN
        IF EmailAddress[i] = '@' THEN
          NoOfAtSigns := NoOfAtSigns + 1;
        IF NOT (
          ((EmailAddress[i] >='a') AND (EmailAddress[i] <='z')) OR
          ((EmailAddress[i] >='A') AND (EmailAddress[i] <='Z')) OR
          ((EmailAddress[i] >='0') AND (EmailAddress[i] <='9')) OR
          (EmailAddress[i] IN ['@','.','-','_']))
        THEN
          ERROR(Text001,EmailAddress);
      END;

      IF NoOfAtSigns <> 1 THEN
        ERROR(Text001,EmailAddress);
    END;

    BEGIN
    {
      // Copia de la funcion 400 NAV2009
    }
    END.
  }
}
