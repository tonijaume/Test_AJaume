OBJECT Codeunit 99000771 BOM Matrix Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 27=r,
                TableData 99000771=r,
                TableData 99000779=r,
                TableData 99000788=rimd,
                TableData 99000789=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1000 : Record 27;
      ItemAssembly@1001 : Record 27;
      ProdBOMHeader@1002 : Record 99000771;
      ProdBOMVersion@1003 : Record 99000779;
      ProdBOMVersion2@1004 : Record 99000779;
      ComponentList@1005 : TEMPORARY Record 99000788;
      ComponentEntry@1006 : TEMPORARY Record 99000789;
      ComponentEntry2@1007 : Record 99000789;
      UOMMgt@1008 : Codeunit 5402;
      VersionMgt@1009 : Codeunit 99000756;
      GlobalCalcDate@1010 : Date;
      MatrixType@1011 : 'Version,Item';
      MultiLevel@1012 : Boolean;

    PROCEDURE FindRecord@2(Which@1000 : Text[30];VAR ComponentList2@1001 : Record 99000788) : Boolean;
    BEGIN
      ComponentList := ComponentList2;
      IF NOT ComponentList.FIND(Which) THEN
        EXIT(FALSE);
      ComponentList2 := ComponentList;
      EXIT(TRUE);
    END;

    PROCEDURE NextRecord@3(Steps@1000 : Integer;VAR ComponentList2@1001 : Record 99000788) : Integer;
    VAR
      CurrentSteps@1002 : Integer;
    BEGIN
      ComponentList := ComponentList2;
      CurrentSteps := ComponentList.NEXT(Steps);
      IF CurrentSteps <> 0 THEN
        ComponentList2 := ComponentList;
      EXIT(CurrentSteps);
    END;

    PROCEDURE GetComponentNeed@9(No@1000 : Code[20];VariantCode@1001 : Code[10];ID@1002 : Code[20]) : Decimal;
    BEGIN
      ComponentEntry.SETRANGE("Item No.",No);
      ComponentEntry.SETRANGE("Variant Code",VariantCode);
      ComponentEntry.SETRANGE(ID,ID);
      IF NOT ComponentEntry.FIND('-') THEN
        CLEAR(ComponentEntry);

      EXIT(ComponentEntry.Quantity);
    END;

    PROCEDURE CompareTwoItems@6(Item1@1000 : Record 27;Item2@1001 : Record 27;"Calc.Date"@1002 : Date;NewMultiLevel@1003 : Boolean;VAR VersionCode1@1004 : Code[10];VAR VersionCode2@1005 : Code[10];VAR UnitOfMeasure1@1006 : Code[10];VAR UnitOfMeasure2@1007 : Code[10]);
    BEGIN
      GlobalCalcDate := "Calc.Date";

      ComponentList.DELETEALL;
      ComponentEntry.RESET;
      ComponentEntry.DELETEALL;

      MultiLevel := NewMultiLevel;
      MatrixType := MatrixType::Item;

      VersionCode1 :=
        VersionMgt.GetBOMVersion(
          Item1."Production BOM No.",
          GlobalCalcDate,FALSE);
      UnitOfMeasure1 :=
        VersionMgt.GetBOMUnitOfMeasure(
          Item1."Production BOM No.",VersionCode1);

      ItemAssembly := Item1;
      BuildMatrix(
        Item1."Production BOM No.",
        VersionCode1,1,
        UOMMgt.GetQtyPerUnitOfMeasure(
          Item1,UnitOfMeasure1) /
        UOMMgt.GetQtyPerUnitOfMeasure(
          Item1,Item1."Base Unit of Measure"));

      VersionCode2 :=
        VersionMgt.GetBOMVersion(
          Item2."Production BOM No.",
          GlobalCalcDate,FALSE);
      UnitOfMeasure2 :=
        VersionMgt.GetBOMUnitOfMeasure(
          Item2."Production BOM No.",VersionCode2);

      ItemAssembly := Item2;
      BuildMatrix(
        Item2."Production BOM No.",
        VersionCode2,1,
        UOMMgt.GetQtyPerUnitOfMeasure(
          Item2,UnitOfMeasure2) /
        UOMMgt.GetQtyPerUnitOfMeasure(
          Item2,Item2."Base Unit of Measure"));
    END;

    PROCEDURE BOMMatrixFromBOM@4(ProdBOM@1000 : Record 99000771;NewMultiLevel@1001 : Boolean);
    BEGIN
      ComponentList.DELETEALL;
      ComponentEntry.RESET;
      ComponentEntry.DELETEALL;

      MultiLevel := NewMultiLevel;
      MatrixType := MatrixType::Version;
      BuildMatrix(ProdBOM."No.",'',1,1);
      ProdBOMVersion.SETRANGE("Production BOM No.",ProdBOM."No.");

      IF ProdBOMVersion.FIND('-') THEN
        REPEAT
          GlobalCalcDate := ProdBOMVersion."Starting Date";
          BuildMatrix(ProdBOM."No.",ProdBOMVersion."Version Code",1,1);
        UNTIL ProdBOMVersion.NEXT = 0;
    END;

    LOCAL PROCEDURE BuildMatrix@1(ProdBOMNo@1000 : Code[20];VersionCode@1001 : Code[10];Level@1002 : Integer;Quantity@1003 : Decimal);
    VAR
      ProdBOMComponent@1004 : Record 99000772;
    BEGIN
      IF Level > 20 THEN
        EXIT;

      ProdBOMComponent.SETRANGE("Production BOM No.",ProdBOMNo);
      ProdBOMComponent.SETRANGE("Version Code",VersionCode);
      IF GlobalCalcDate <> 0D THEN BEGIN
        ProdBOMComponent.SETFILTER("Starting Date",'%1|..%2',0D,GlobalCalcDate);
        ProdBOMComponent.SETFILTER("Ending Date", '%1|%2..',0D,GlobalCalcDate);
      END;

      IF ProdBOMComponent.FIND('-') THEN
        REPEAT
          CASE ProdBOMComponent.Type OF
            ProdBOMComponent.Type::Item:
              BEGIN
                IF Item.GET(ProdBOMComponent."No.") THEN BEGIN
                  IF MultiLevel AND (Item."Production BOM No." <> '') THEN BEGIN
                    VersionCode :=
                      VersionMgt.GetBOMVersion(
                        Item."Production BOM No.",
                        GlobalCalcDate,FALSE);
                    BuildMatrix(
                      Item."Production BOM No.",
                      VersionCode,
                      Level + 1,
                      Quantity *
                      UOMMgt.GetQtyPerUnitOfMeasure(
                        Item,
                        ProdBOMComponent."Unit of Measure Code") /
                      UOMMgt.GetQtyPerUnitOfMeasure(
                        Item,
                        Item."Base Unit of Measure") /
                      UOMMgt.GetQtyPerUnitOfMeasure(
                        Item,
                        VersionMgt.GetBOMUnitOfMeasure(
                          Item."Production BOM No.",
                          VersionCode)) *
                      ProdBOMComponent.Quantity);
                  END ELSE BEGIN
                    ComponentList."Item No." := ProdBOMComponent."No.";
                    ComponentList."Variant Code" := ProdBOMComponent."Variant Code";
                    ComponentList.Description := ProdBOMComponent.Description;
                    ComponentList."Unit of Measure Code" := Item."Base Unit of Measure";
                    IF NOT ComponentList.FIND THEN
                      ComponentList.INSERT;
                    ComponentEntry2."Item No." := ProdBOMComponent."No.";
                    ComponentEntry2."Variant Code" := ProdBOMComponent."Variant Code";
                    CASE MatrixType OF
                      MatrixType::Version:
                        ComponentEntry2.ID := ProdBOMVersion."Version Code";
                      MatrixType::Item:
                        ComponentEntry2.ID := ItemAssembly."No.";
                    END;
                    ComponentEntry2.Quantity :=
                      ProdBOMComponent.Quantity *
                      UOMMgt.GetQtyPerUnitOfMeasure(Item,ProdBOMComponent."Unit of Measure Code") /
                      UOMMgt.GetQtyPerUnitOfMeasure(Item,Item."Base Unit of Measure") *
                      Quantity;
                    ComponentEntry := ComponentEntry2;
                    ComponentEntry.SETRANGE("Item No.",ComponentEntry2."Item No.");
                    ComponentEntry.SETRANGE("Variant Code",ComponentEntry2."Variant Code");
                    ComponentEntry.SETRANGE(ID,ComponentEntry2.ID);
                    IF ComponentEntry.FIND('-') THEN BEGIN
                      ComponentEntry.Quantity :=
                        ComponentEntry.Quantity + ComponentEntry2.Quantity;
                      ComponentEntry.MODIFY;
                    END ELSE
                      ComponentEntry.INSERT;
                  END;
                END;
              END;
            ProdBOMComponent.Type::"Production BOM":
              BEGIN
                IF ProdBOMHeader.GET(ProdBOMComponent."No.") THEN BEGIN
                  BuildMatrix(
                    ProdBOMHeader."No.",
                    GetVersion(ProdBOMHeader."No."),
                    Level + 1,
                    Quantity * ProdBOMComponent.Quantity);
                END;
              END;
          END;
        UNTIL ProdBOMComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE GetVersion@7(ProdBOMNo@1000 : Code[20]) : Code[10];
    BEGIN
      ProdBOMVersion2.SETRANGE("Production BOM No.",ProdBOMNo);
      ProdBOMVersion2.SETFILTER("Starting Date",'%1|..%2',0D,GlobalCalcDate);
      IF ProdBOMVersion2.FIND('+') THEN
        EXIT(ProdBOMVersion2."Version Code");

      EXIT('');
    END;

    BEGIN
    END.
  }
}
