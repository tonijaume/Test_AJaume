OBJECT Codeunit 7009725 Facturar ingresos hotel
{
  OBJECT-PROPERTIES
  {
    Date=25/03/15;
    Time=12:50:56;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355031 : TextConst 'ENU=&Invoices,&Proforma invoices;ESP=&Facturas,&Prefacturas';
      Text001@1103355032 : TextConst 'ENU=&Create Proforma invoice,&Reprint Proforma invoice;ESP=&Crear Prefactura,&Reimprimir Prefactura';
      Text003@1103355034 : TextConst 'ENU=Must indicate a Touroperator for the proforma invoice;ESP=Debe indicar un TourOperador para la prefactura';
      Text004@1103355035 : TextConst 'ENU=T.O. Proforma Invoice \\;ESP=PreFactura T.O.\\';
      Text005@1103355036 : TextConst 'ENU=Unable to invoice proforma when total amount is 0;ESP=No se puede prefacturar cuando el importe total es 0';
      Text006@1103355037 : TextConst 'ENU=Consult the invoice;ESP=Consulte la factura';
      Text007@1103355038 : TextConst 'ENU=Proforma invoice is not done;ESP=La Prefactura no est  hecha';
      Text008@1103355039 : TextConst 'ENU=Invoice the proforma invoice No.;ESP=Facturar la prefactura n§';
      Text009@1103355040 : TextConst 'ENU=Invoice incomes\\;ESP=Facturar Ingresos\\';
      Text010@1103355041 : TextConst 'ENU=Checking Data;ESP=Comprobando Datos';
      Text011@1103355042 : TextConst 'ENU=Must clear the invoice of hotel sale in agency parameters.;ESP=Tiene que definir la factura de venta hotel en par metros agencia';
      Text012@1103355043 : TextConst 'ENU=Ledger accounts file does not exist for Local Office\;ESP=No existe el fichero de cuentas para la Delegaci¢n\';
      Text013@1103355044 : TextConst 'ENU=" and the TourOperator";ESP=" y el TourOperador"';
      Text014@1103355045 : TextConst 'ENU=" and the generical card";ESP=" ni la ficha generica."';
      Text015@1103355046 : TextConst 'ENU=There is nothing to invoice.;ESP=No hay nada que facturar.';
      Text016@1103355047 : TextConst 'ENU=Creating invoice;ESP=Creando factura';
      Text018@1103355049 : TextConst 'ENU=Sale configuration file does not exist;ESP=No existe el fichero de configuraci¢n de venta';
      Text021@1103355052 : TextConst 'ENU=" from";ESP=" desde"';
      Text022@1103355053 : TextConst 'ENU=" to";ESP=" hasta"';
      Text023@1103355054 : TextConst 'ENU=Touroperator %1 does not exist;ESP=No existe el tourperador %1.';
      Text025@1103355056 : TextConst 'ENU=Creating invoice lines;ESP=Creando lineas factura';
      Text026@1103355057 : TextConst 'ENU=NORMAL;ESP=NORMAL';
      Text027@1103355058 : TextConst 'ENU=extras;ESP=extras';
      Text028@1103355059 : TextConst 'ENU=Handling;ESP=Handling';
      Text029@1103355060 : TextConst 'ENU=HANDFEEVEN;ESP=HANDFEEVEN';
      Text030@1103355061 : TextConst 'ENU=EXTRAFIXEDS;ESP=EXTRAFIJOV';
      Text031@1103355062 : TextConst 'ENU=EXTRAVARIV;ESP=EXTRAVARIV';
      Text032@1103355063 : TextConst 'ENU=Hotel;ESP=Hotel';
      Text033@1103355064 : TextConst 'ENU=CANCELLATION -;ESP=ANULACION -';
      Text034@1103355065 : TextConst 'ENU=VOUCHER CANCELLATION;ESP=ANULACION BONO';
      Text035@1103355066 : TextConst 'ENU=Voucher;ESP=Bono';
      Text036@1103355067 : TextConst 'ENU=CANCELLATION - Handling fee;ESP=ANULACION - Handling fee';
      Text037@1103355068 : TextConst 'ENU=HANDLING CANCELLATION;ESP=ANULACION HANDLING';
      Text038@1103355069 : TextConst 'ENU=Handling Fee;ESP=Handling fee';
      Text039@1103355070 : TextConst 'ENU=CANCELLATION - Extras;ESP=ANULACION - Extras';
      Text040@1103355071 : TextConst 'ENU=CANCELLATION EXTRAS;ESP=ANULACION EXTRAS';
      Text041@1103355072 : TextConst 'ENU=extras;ESP=extras';
      Text042@1103355073 : TextConst 'ENU=Unable to undo, the invoice is done;ESP=No se puede deshacer, la factura ya est  hecha';
      Text044@1103355075 : TextConst 'ENU=PERSON;ESP=PERSONA';
      Text045@1103355076 : TextConst 'ENU=Adults %1 Children %2 3P %3;ESP=Adultos %1  Ni¤os %2  3P %3';
      rPar@1103355000 : Record 7009700;
      rContVta@1103355001 : Record 7009727;
      rCliente@1103355002 : Record 18;
      rCtas@1103355003 : Record 7009705;
      rBono@1103355005 : Record 7010013;
      rCondiciones@1103355006 : Record 7010085;
      rCabVta@1103355009 : Record 36;
      rDat@1100217001 : Record 7009768;
      rCom@1103355011 : Record 44;
      cFunSeg@1100217000 : Codeunit 7009751;
      vDelegacion@1103355012 : Code[10];
      vTouroperador@1103355013 : Code[10];
      vBono@1103355014 : Code[10];
      vReserva@1103355015 : Integer;
      vSecuencia@1103355016 : Code[10];
      dDialog@1103355017 : Dialog;
      Signo@1103355018 : Integer;
      vHotel@1103355019 : Code[20];
      vHotelAnt@1103355020 : Code[20];
      vFecha@1103355021 : Date;
      vFechaAnt@1103355022 : Date;
      nSerie@1103355024 : Code[10];
      adultos_factura@1103355025 : Integer;
      ni¤os_factura@1103355026 : Integer;
      terceras_personas@1103355027 : Integer;
      minimo_orden@1103355028 : Integer;
      maximo_orden@1103355029 : Integer;
      texto2@1103355030 : Text[50];

    PROCEDURE Facturar_Ingresos@1(VAR rBon@1103355000 : Record 7010013);
    VAR
      iOpcion@1103355001 : Integer;
    BEGIN
      cFunSeg.TienePermiso('HOT-FAC-RSV', TRUE);  //$009

      rBono.SETCURRENTKEY(Delegacion,
                          "N§ Prefactura",
                          TourOperador,
                          Hotel,
                          "Fecha llegada",
                          Facturable);
      rBono := rBon;
      iOpcion := STRMENU(Text000, 2);
      CASE iOpcion OF
        1: IF Busca_Contrato THEN
             Crear_Factura;
        2: BEGIN
             rBono.COPYFILTERS(rBon);
             CLEAR(iOpcion);
             iOpcion := STRMENU(Text001);
             CASE iOpcion OF
               1: Crear_Prefactura(rBono, FALSE);
               2: Reimprimir_Prefactura;
           END;
        END;
      END;
    END;

    PROCEDURE Crear_Prefactura@7(par_bono@1103355000 : Record 7010013;directo@1103355001 : Boolean);
    VAR
      rBono2@1103355002 : Record 7010013;
      rCIbono@1103355003 : Record 7010018;
      rCIbonoCNP@1103355004 : Record 7010019;
      FechaDesde@1103355005 : Date;
      FechaHasta@1103355006 : Date;
      NumPrefactura@1103355007 : Code[10];
      nRegs@1103355008 : Integer;
      i@1103355009 : Integer;
      Importe_Total@1103355010 : Decimal;
    BEGIN
      // Crear_Prefactura
      //
      rPar.LOCKTABLE;
      rPar.FINDFIRST;
      IF rPar."Prefactura hotel" = '' THEN
        rPar."Prefactura hotel" := '0';
      rPar."Prefactura hotel" := INCSTR(rPar."Prefactura hotel");
      rPar.MODIFY;
      NumPrefactura := rPar."Prefactura hotel";
      // Pedimos condiciones de Prefacturacion
      //
      rBono.RESET;
      rBono.SETRANGE("N§ Prefactura",'' );
      IF NOT rCondiciones.GET(USERID()) THEN
      BEGIN
        rCondiciones.INIT;
        rCondiciones.Usuario := USERID();
        rCondiciones.INSERT;
      END
      ELSE
      BEGIN
        rCondiciones.INIT;
        rCondiciones.Usuario := USERID();
      END;
      rCondiciones.SETRANGE(Usuario, USERID());
      rCondiciones.TourOperador := par_bono.TourOperador;
      IF NOT directo THEN
        rCondiciones.Hotel := par_bono.Hotel;
      rCondiciones.Correcto := FALSE;
      rCondiciones."Fecha desde" := par_bono."Fecha llegada";
      rCondiciones."Fecha hasta" := par_bono."Fecha llegada";
      rCondiciones.MODIFY;
      IF NOT directo THEN
      BEGIN
        COMMIT;
        FORM.RUNMODAL(7010114, rCondiciones);
        IF rCondiciones.GET(USERID()) THEN
          IF NOT rCondiciones.Correcto THEN
            EXIT;
      END;
      IF rCondiciones.TourOperador = '' THEN
        ERROR(Text003);

      FechaDesde := rCondiciones."Fecha desde";
      FechaHasta := rCondiciones."Fecha hasta";
      IF FechaHasta = 0D THEN
        FechaHasta := FechaDesde;

      dDialog.OPEN(Text004 +
                   '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@\');
      rBono.SETRANGE(Delegacion     , par_bono.Delegacion);
      rBono.SETRANGE(TourOperador   , rCondiciones.TourOperador);
      rBono.SETRANGE("Fecha llegada", FechaDesde, FechaHasta);
      rBono.SETRANGE(Facturable     , TRUE);
      IF rCondiciones.Hotel <> '' THEN
        rBono.SETRANGE(Hotel, rCondiciones.Hotel);
      IF rBono.FINDSET THEN BEGIN
        i := 0;
        nRegs  := rBono.COUNT;

        rCIbonoCNP.RESET;
        rCIbonoCNP.SETCURRENTKEY("N§ Prefactura",
                                 "Coste/Ingreso",
                                 "Fecha llegada",
                                 TourOperador,
                                 "N§ Reserva",
                                 Concepto);
        rCIbonoCNP.SETRANGE("N§ Prefactura", '');
        rCIbonoCNP.SETRANGE("Coste/Ingreso", rCIbonoCNP."Coste/Ingreso"::Ingreso);
        rCIbonoCNP.SETRANGE(TourOperador   , rCondiciones.TourOperador);
        Importe_Total := 0;
        REPEAT
          rBono2 := rBono;
          rBono2."N§ Prefactura" := NumPrefactura;
          rBono2.MODIFY(TRUE);

          rCIbonoCNP.SETRANGE("N§ Reserva"  , rBono."N§ Reserva");
          rCIbonoCNP.SETRANGE("N§ Secuencia", rBono."N§ Secuencia");
          IF rCIbonoCNP.FINDFIRST THEN
          BEGIN
            rCIbonoCNP.CALCSUMS(Importe);
            Importe_Total := Importe_Total + rCIbonoCNP.Importe;
            rCIbonoCNP.MODIFYALL("N§ Prefactura", NumPrefactura);
          END;
        UNTIL rBono.NEXT = 0;
      END;
      IF Importe_Total = 0 THEN
      BEGIN
        dDialog.CLOSE;
        ERROR(Text005);
      END;
      rBono.RESET;
      rBono.SETRANGE("N§ Prefactura", NumPrefactura);
      COMMIT;
      dDialog.CLOSE;
      IF rBono.FINDFIRST THEN
        REPORT.RUNMODAL(REPORT::"Prefactura Hotel", TRUE, FALSE, rBono);

      rBono.SETRANGE("N§ Prefactura");
      rBono.SETRANGE(TourOperador);
      rBono.SETRANGE("Fecha llegada");
      rBono.SETRANGE(Hotel);
    END;

    PROCEDURE Reimprimir_Prefactura@8();
    BEGIN
      // Reimprimir_Prefactura

      IF rBono."N§ Factura" <> '' THEN
        ERROR(Text006);
      IF rBono."N§ Prefactura" <> '' THEN
      BEGIN
        rBono.SETRANGE("N§ Prefactura", rBono."N§ Prefactura");
        IF rBono.FINDFIRST THEN
          REPORT.RUNMODAL(7009711, TRUE, FALSE, rBono);
      END;
    END;

    PROCEDURE Crear_Factura@12();
    VAR
      Text@1103355000 : Text[80];
      rCIbonoCNP@1103355002 : Record 7010019;
      rCIbono@1103355003 : Record 7010018;
      lrCabInc@1100253000 : Record 7009908;
      lrSeries@1100217000 : Record 7009921;
      ok@1103355004 : Boolean;
      FechaDesde@1103355005 : Date;
      FechaHasta@1103355006 : Date;
      lcRelease@1000000000 : Codeunit 414;
    BEGIN
      // Crear_Factura

      rBono.TESTFIELD("N§ Factura", '');
      IF rBono."N§ Prefactura" = '' THEN
        ERROR(Text007);
      Text := Text008 + rBono."N§ Prefactura" + '?';
      IF CONFIRM(Text, TRUE) THEN
      BEGIN

        dDialog.OPEN(Text009 +
                     '  #1###########################\' +
                     '  @2@@@@@@@@@@@@@@@@@@@@@@@@@@@\' +
                     '  @3@@@@@@@@@@@@@@@@@@@@@@@@@@@');
        dDialog.UPDATE(1, Text010);
        dDialog.UPDATE(2, 3333);
        dDialog.UPDATE(3, 3333);

        rPar.FINDFIRST;
        BEGIN
          IF NOT rCtas.GET(rPar.Delegacion, rBono.TourOperador) THEN
          BEGIN
            dDialog.CLOSE;
            ERROR(Text012 +
                  rPar.Delegacion + Text013 + rBono.TourOperador +
                  Text014);
          END;
        END;
        rCtas.TESTFIELD("Cta. venta hotel");
        rCtas.TESTFIELD("Cta. Handling fee");

        dDialog.UPDATE(3, 6666);

        rCIbonoCNP.RESET;
        rCIbonoCNP.SETCURRENTKEY("N§ Prefactura",
                                 "Coste/Ingreso",
                                 "Fecha llegada",
                                 TourOperador);
        rCIbonoCNP.SETRANGE("N§ Prefactura", rBono."N§ Prefactura");
        rCIbonoCNP.SETRANGE("Coste/Ingreso", rCIbonoCNP."Coste/Ingreso"::Ingreso);
        rCIbonoCNP.SETRANGE(Regularizacion, FALSE);
        IF rCIbonoCNP.FINDFIRST THEN
          FechaDesde := rCIbonoCNP."Fecha llegada";
        IF rCIbonoCNP.FINDLAST THEN
          FechaHasta := rCIbonoCNP."Fecha llegada";

        rCIbonoCNP.SETRANGE(Regularizacion);
        rCIbonoCNP.CALCSUMS(Importe);
        IF rCIbonoCNP.Importe = 0 THEN
        BEGIN
          dDialog.CLOSE;
          ERROR(Text015);
        END;

        dDialog.UPDATE(3, 10000);

        dDialog.UPDATE(1, Text016);
        dDialog.UPDATE(2, 6666);
        dDialog.UPDATE(3, 2000);

        //-$012rConfVta.FINDFIRST;

        //+$012 <
        lrSeries.GET(lrSeries.Modulo::Hotel);
        lrSeries.CheckSeries;
        //+$012 >

        CLEAR(rCabVta);
        rCabVta.INIT;
        IF rCIbonoCNP.Importe > 0 THEN
        BEGIN
          rCabVta.VALIDATE("Document Type",  rCabVta."Document Type"::Invoice);
          Signo := 1;

          //-$012IF rContVta."Cod. Serie" = '' THEN
          //-$012  nSerie := rConfVta."Invoice Nos."
          //-$012ELSE
          //-$012  nSerie := rContVta."Cod. Serie";

          nSerie := lrSeries."Serie facturas"; //+$012
        END
        ELSE BEGIN
          rCabVta.VALIDATE("Document Type",  rCabVta."Document Type"::"Credit Memo");
          Signo := -1;

          //-$012rConfVta.TESTFIELD("Posted Credit Memo Nos.");
          //-$012nSerie := rConfVta."Posted Credit Memo Nos.";

          nSerie := lrSeries."Serie abonos";
        END;
        dDialog.UPDATE(3, 4000);

        rCabVta.VALIDATE("No. Series", nSerie);
        _CheckReasonCode;
        rCabVta.INSERT(TRUE);

        rCabVta.VALIDATE("Posting No. Series"  , nSerie);
        rCabVta.VALIDATE("Sell-to Customer No.", rCliente."No.");

        IF rPar."Fecha registro agencia" = rPar."Fecha registro agencia"::"Fecha servicio" THEN BEGIN
          rCabVta.VALIDATE("Document Date", FechaDesde);
          rCabVta.VALIDATE("Posting Date" , FechaDesde);
        END
        ELSE BEGIN
          rCabVta.VALIDATE("Document Date", WORKDATE); //+$005
          rCabVta.VALIDATE("Posting Date" , WORKDATE); //+$005
        END;
        dDialog.UPDATE(3, 6000);

        COMMIT;

        IF rContVta."Cod. Terminos pago" <> '' THEN
          rCabVta.VALIDATE("Payment Terms Code", rContVta."Cod. Terminos pago");
        IF rContVta."Cod. Formas pago" <> '' THEN
          rCabVta.VALIDATE("Payment Method Code"     , rContVta."Cod. Formas pago");

        rCabVta.VALIDATE("Shortcut Dimension 1 Code", rPar.Delegacion);
        rCabVta.VALIDATE("Shortcut Dimension 2 Code", rBono.TourOperador);
        dDialog.UPDATE(3, 8000);

        rCabVta."Posting Description" := rBono.TourOperador + ' ' + Text021 + ' ' +
                                         STRSUBSTNO('%1', FechaDesde) + ' ' +
                                         Text022 + ' ' +
                                         STRSUBSTNO('%1', FechaHasta);
        rCabVta.VALIDATE("Prices Including VAT", rContVta."Impuestos incluidos");
        rCabVta.VALIDATE(Hotel                 , rBono.Hotel);
        rCabVta.MODIFY;

        // Crea la cabecera de factura incoming
        CLEAR(lrCabInc);
        lrCabInc.SetInf(rCabVta);
        lrCabInc.Modulo           := lrCabInc.Modulo::Hotel;
        lrCabInc."Periodo Desde"  := FechaDesde;
        lrCabInc."Periodo Hasta"  := FechaHasta;
        lrCabInc."Fecha servicio" := FechaDesde;
        lrCabInc.Touroperador     := rBono.TourOperador;
        lrCabInc."Fecha creacion" := CURRENTDATETIME; //+$010
        lrCabInc.INSERT;

        rCabVta.SETRANGE("No.", rCabVta."No.");

        dDialog.UPDATE(3, 10000);

        //. creacion de las lineas de factura

        Crear_Lineas(rBono.Delegacion, rBono."N§ Prefactura");

        // Sumamos los importes de las lineas en la cabecera
        lrCabInc.GetImportes;
        lrCabInc.MODIFY;

        IF rCIbonoCNP.FINDSET(TRUE) THEN
          rCIbonoCNP.MODIFYALL("N§ Factura", rCabVta."No.");

        rBono.RESET;
        rBono.SETCURRENTKEY(Delegacion,
                            "N§ Prefactura",
                            TourOperador,
                            Hotel,
                            "Fecha llegada",
                            Facturable);
        rBono.SETRANGE("N§ Prefactura", rBono."N§ Prefactura");
        IF rBono.FINDSET THEN
        BEGIN
          rCIbono.RESET;
          rCIbono.SETCURRENTKEY(Delegacion,
                                TourOperador,
                                Bono,
                                "N§ Reserva",
                                "N§ Secuencia");
          REPEAT
            rCIbono.SETRANGE(Delegacion    , rBono.Delegacion);
            rCIbono.SETRANGE(TourOperador  , rBono.TourOperador);
            rCIbono.SETRANGE(Bono          , rBono.Bono);
            rCIbono.SETRANGE("N§ Reserva"  , rBono."N§ Reserva");
            rCIbono.SETRANGE("N§ Secuencia", rBono."N§ Secuencia");
            IF rCIbono.FINDSET(TRUE) THEN
              rCIbono.MODIFYALL(Facturado, TRUE);

            rBono.Facturado             := rBono.CompruebaBonoFact;
            rBono."N§ Factura"          := rCabVta."No.";
            rBono."Fecha ultima factura":= TODAY;
            rBono.MODIFY;
          UNTIL rBono.NEXT = 0;
        END;
        COMMIT;
        dDialog.CLOSE;

        rCom.RESET;
        rCom.SETRANGE("Document Type", rCabVta."Document Type");
        rCom.SETRANGE("No."            , rCabVta."No.");
        FORM.RUNMODAL(67, rCom);

        //+$013 <
        //. Recuperamos la cabecera de factura para lanzarla
        IF rCabVta.GET(rCabVta."Document Type", rCabVta."No.") THEN
          lcRelease.RUN(rCabVta);
        //+$013 >

        //+$015 <
        IF rCabVta.GET(rCabVta."Document Type", rCabVta."No.") THEN
        BEGIN
          rCabVta."Reason Code" := 'ATENNEA';
          rCabVta.MODIFY;
        END;
        //+$015 <

        COMMIT;

        lrCabInc.SETRECFILTER;

        // . Lanzar la funcion que imprime la factura segun corresponda
        ImprimirFactura(lrCabInc."Tipo documento", lrCabInc."No.");

        rBono.SETRANGE("N§ Prefactura");
      END;
    END;

    PROCEDURE Busca_Contrato@20() : Boolean;
    VAR
      w_to@1103355000 : Code[10];
      rTO@1103355001 : Record 7009717;
    BEGIN
      // Busca_Contrato

      IF NOT rTO.GET(rBono.TourOperador) THEN
        ERROR(Text023, rBono.TourOperador);

      //-$001IF rTO."Grupo Touroperador" = '' THEN
      //-$001  w_to := rBono.TourOperador
      //-$001ELSE
      //-$001  w_to := rTO."Grupo Touroperador";

      w_to := rBono.TourOperador; //+$001

      rContVta.RESET;
      rContVta.SETCURRENTKEY(TourOperador);
      rContVta.SETRANGE (TourOperador           , w_to);
      rContVta.SETRANGE (Hotel                  , rBono.Hotel);
      rContVta.SETFILTER("Fecha inicio contrato", '<=%1', rBono."Fecha llegada");
      rContVta.SETFILTER("Fecha final contrato" , '>=%1', rBono."Fecha llegada");
      rContVta.SETRANGE(Confirmado              , TRUE);
      IF rContVta.FINDFIRST THEN
        EXIT(rCliente.GET(rContVta.Cliente));
      EXIT(FALSE);
    END;

    PROCEDURE Crear_Lineas@6(pwDelegacion@1100217003 : Code[10];pwNumPrefactura@1100217002 : Code[10]);
    VAR
      lrBono2@1103355000 : Record 7010013;
      lrCIbonoCNP@1103355001 : Record 7010019;
      lrCIBono@1100217001 : Record 7010018;
      TotHandling@1103355002 : Decimal;
      TotImp@1103355003 : Decimal;
      TotExtras@1103355004 : Decimal;
      j@1103355006 : Integer;
      k@1103355007 : Integer;
      sw_personas@1103355008 : Boolean;
      antOrden@1103355009 : Integer;
      vReg@1103355010 : Integer;
      lwCodHF@1100253000 : Code[10];
      lwCodExtra@1100217000 : Code[10];
      lwPrecioHF@1100253001 : Decimal;
    BEGIN
      // Crear_Lineas

      rPar.FINDFIRST;

      vHotelAnt := '';
      vFechaAnt := 0D;

      // La variable rCIbonoCNP es local en este procedimiento
      lrCIbonoCNP.RESET;
      lrCIbonoCNP.SETCURRENTKEY("N§ Prefactura");
      lrCIbonoCNP.SETRANGE("N§ Prefactura", pwNumPrefactura);

      dDialog.UPDATE(1, Text025);
      dDialog.UPDATE(2, 10000);

      j := lrCIbonoCNP.COUNT;
      k := 0;

      // Recorremos los bonos a facturar
      lrBono2.RESET;
      lrBono2.SETCURRENTKEY(Delegacion,
                            "N§ Prefactura",
                            TourOperador,
                            Hotel,
                            "Fecha llegada",
                            Facturable);
      lrBono2.SETRANGE(Delegacion     , pwDelegacion);
      lrBono2.SETRANGE("N§ Prefactura", pwNumPrefactura);
      IF lrBono2.FINDSET THEN
      BEGIN
        REPEAT
          vFecha := lrBono2."Fecha llegada";
          vHotel := lrBono2.Hotel;

          lrCIbonoCNP.RESET;
          lrCIbonoCNP.SETRANGE(Delegacion     , lrBono2.Delegacion);
          lrCIbonoCNP.SETRANGE(TourOperador   , lrBono2.TourOperador);
          lrCIbonoCNP.SETRANGE(Bono           , lrBono2.Bono);
          lrCIbonoCNP.SETRANGE("N§ Reserva"   , lrBono2."N§ Reserva");
          lrCIbonoCNP.SETRANGE("N§ Secuencia" , lrBono2."N§ Secuencia");
          lrCIbonoCNP.SETRANGE("Coste/Ingreso", lrCIbonoCNP."Coste/Ingreso"::Ingreso);
          lrCIbonoCNP.SETRANGE("N§ Prefactura", lrBono2."N§ Prefactura");
          sw_personas := FALSE;
          IF lrCIbonoCNP.FINDSET THEN
          BEGIN
            //. Buscamos el primer y ultimo cierre pendiente de facturar
            busca_max_min(lrCIbonoCNP);

            CLEAR(TotImp);
            CLEAR(TotExtras);
            CLEAR(TotHandling);
            CLEAR(lwCodHF);
            CLEAR(lwPrecioHF); // $006
            CLEAR(lwCodExtra);
            vReg := 0;

            antOrden := lrCIbonoCNP."N§ Orden";
            IF lrCIBono.GET(lrCIbonoCNP.Delegacion,
                            lrCIbonoCNP.TourOperador,
                            lrCIbonoCNP.Bono,
                            lrCIbonoCNP."N§ Reserva",
                            lrCIbonoCNP."N§ Secuencia",
                            lrCIbonoCNP."N§ Orden") THEN
            BEGIN
              IF lrCIBono.Regularizacion THEN
                vReg := 1;
            END;

            vDelegacion   := lrCIbonoCNP.Delegacion;
            vTouroperador := lrCIbonoCNP.TourOperador;
            vBono         := lrCIbonoCNP.Bono;
            vReserva      := lrCIbonoCNP."N§ Reserva";
            vSecuencia    := lrCIbonoCNP."N§ Secuencia";

            REPEAT
              k := k + 1;
              dDialog.UPDATE(3, ROUND((k * 10000) / j, 1));

              IF (antOrden <> lrCIbonoCNP."N§ Orden") THEN
              BEGIN
                IF TotImp <> 0 THEN
                BEGIN
                  Rellena_Linea(lrBono2, rCtas."Cta. venta hotel", TotImp, Text026, vReg,'', 0);
                  sw_personas := TRUE;
                END;
                IF TotExtras <> 0 THEN
                BEGIN
                  IF lwCodExtra = '-1' THEN // Marca que indica que hay mas de un codigo de extra
                    CLEAR(lwCodExtra);
                  Rellena_Linea(lrBono2, rCtas."Cta. venta hotel", TotExtras, Text027, vReg,lwCodExtra, 0);
                  sw_personas := TRUE;
                END;
                IF TotHandling <> 0 THEN
                BEGIN
                  Rellena_Linea(lrBono2, rCtas."Cta. Handling fee", TotHandling, Text028, vReg, lwCodHF, lwPrecioHF);
                  sw_personas := TRUE;
                END;

                CLEAR(TotImp);
                CLEAR(TotExtras);
                CLEAR(TotHandling);
                CLEAR(lwCodHF);
                CLEAR(lwPrecioHF); // $006
                CLEAR(lwCodExtra);
                vReg := 0;
                IF lrCIBono.GET(lrCIbonoCNP.Delegacion,
                                lrCIbonoCNP.TourOperador,
                                lrCIbonoCNP.Bono,
                                lrCIbonoCNP."N§ Reserva",
                                lrCIbonoCNP."N§ Secuencia",
                                lrCIbonoCNP."N§ Orden") THEN
                  IF lrCIBono.Regularizacion THEN
                    vReg := 1;

                vDelegacion   := lrCIbonoCNP.Delegacion;
                vTouroperador := lrCIbonoCNP.TourOperador;
                vBono         := lrCIbonoCNP.Bono;
                vReserva      := lrCIbonoCNP."N§ Reserva";
                vSecuencia    := lrCIbonoCNP."N§ Secuencia";
              END;
              antOrden := lrCIbonoCNP."N§ Orden";

              IF (maximo_orden <> 0) THEN
              BEGIN
                IF (lrCIbonoCNP."N§ Orden" = maximo_orden) OR (lrCIbonoCNP."N§ Orden" = minimo_orden) THEN
                BEGIN
                  CASE lrCIbonoCNP.Concepto OF
                    Text029: BEGIN
                               TotHandling := TotHandling + lrCIbonoCNP.Importe;
                               // JPT 21/11/11 GOC-CAR-10003 (2)
                               IF lwCodHF='' THEN BEGIN
                                 lwCodHF     := lrCIbonoCNP."Cod Handling";
                                 lwPrecioHF  := lrCIbonoCNP.Precio; // $006
                               END;
                             END;
                    Text030, Text031: BEGIN
                                        TotExtras := TotExtras + lrCIbonoCNP.Importe;
                                        IF lwCodExtra = '' THEN
                                          lwCodExtra := lrCIbonoCNP."Codigo Extra";
                                        // Si hay mas de un codigo de extra le ponemos una marca (-1)
                                        // para que se grabe en blanco en la linea de factura
                                        IF lwCodExtra <> lrCIbonoCNP."Codigo Extra" THEN
                                          lwCodExtra := '-1';
                                      END;
                    ELSE TotImp := TotImp + lrCIbonoCNP.Importe;
                  END;
                END;
              END;
            UNTIL lrCIbonoCNP.NEXT = 0;

            IF (antOrden = maximo_orden) OR (antOrden = minimo_orden) THEN
            BEGIN
              IF TotImp <> 0 THEN
              BEGIN
                Rellena_Linea(lrBono2, rCtas."Cta. venta hotel", TotImp, Text026, vReg,'',0 );
                sw_personas := TRUE;
              END;
              IF TotExtras <> 0 THEN
              BEGIN
                IF lwCodExtra = '-1' THEN // Marca que indica que hay mas de un codigo de extra
                  CLEAR(lwCodExtra);
                Rellena_Linea(lrBono2, rCtas."Cta. venta hotel", TotExtras, Text027, vReg, lwCodExtra, 0);
                sw_personas := TRUE;
              END;
              IF TotHandling <> 0 THEN
              BEGIN
                Rellena_Linea(lrBono2, rCtas."Cta. Handling fee", TotHandling, Text028, vReg, lwCodHF, lwPrecioHF);
                sw_personas := TRUE;
              END;
            END;
          END;
          IF sw_personas THEN
            insertar_personas(vDelegacion, vTouroperador, vBono, vReserva, vSecuencia);
        UNTIL lrBono2.NEXT = 0;
      END;
    END;

    PROCEDURE Rellena_Linea@18(prBono@1100253003 : Record 7010013;Cuenta@1103355000 : Code[20];Importe@1103355001 : Decimal;Concepto@1103355002 : Code[10];Tipo@1103355003 : ',Anul';pwCodigo@1100253000 : Code[20];pwPrecio@1100253001 : Decimal);
    VAR
      rLinVta@1103355004 : Record 37;
      rLinVta2@1103355005 : Record 37;
      rReserva@1103355006 : Record 7009743;
      lrLinInc@1100253002 : Record 7009909;
      ok@1103355007 : Boolean;
      cFun@1103355008 : Codeunit 7009702;
      lwAdultos@1100253005 : Integer;
      lwNi¤os@1100253004 : Integer;
    BEGIN
      // Rellena_Linea

      // Si es un nuevo hotel, a¤adir un comentario en la linea de factura
      // con el nombre del hotel
      // JPT 21/11/11 pwCodigo nuevo campo de informacion, de momento solo se utiliza para el Handling Fee
      // $006 JPT 06/03/12 pwPrecio nuevo campo informativo, de momento solo se utiliza para el Handling Fee


      IF (vHotel <> vHotelAnt) OR (vFecha <> vFechaAnt) THEN
      BEGIN
        CLEAR(rLinVta);
        rLinVta.VALIDATE("Document Type", rCabVta."Document Type");
        rLinVta.VALIDATE("Document No."  , rCabVta."No.");

        // Buscamos el n£mero de l¡nea que corresponde
        //

        rLinVta2.RESET;
        rLinVta2.SETRANGE("Document Type", rCabVta."Document Type");
        rLinVta2.SETRANGE("Document No.", rCabVta."No.");
        IF NOT rLinVta2.FINDLAST THEN
          rLinVta.VALIDATE("Line No.", 10000)
        ELSE
          rLinVta.VALIDATE("Line No.", rLinVta2."Line No." + 10000);
        rLinVta.VALIDATE(Type, rLinVta.Type::" ");
        rLinVta.INSERT(TRUE);
        rLinVta.Description := STRSUBSTNO('%1: %2', cFun.nom_hotel(vHotel), vFecha);
        rLinVta."Description 2" := Text032;
        rLinVta.MODIFY;
        vHotelAnt := vHotel;
        vFechaAnt := vFecha;
      END;

      Importe := Signo * Importe;
      CLEAR(rLinVta);
      rLinVta.VALIDATE("Document Type", rCabVta."Document Type");
      rLinVta.VALIDATE("Document No."  , rCabVta."No.");
      // Buscamos el n£mero de l¡nea que corresponde

      rLinVta2.RESET;
      rLinVta2.SETRANGE("Document Type", rCabVta."Document Type");
      rLinVta2.SETRANGE("Document No.", rCabVta."No.");
      IF NOT rLinVta2.FINDLAST THEN
        rLinVta.VALIDATE("Line No.", 10000)
      ELSE
        rLinVta.VALIDATE("Line No.", rLinVta2."Line No." + 10000);
      rLinVta.VALIDATE(Type, rLinVta.Type::"G/L Account");
      rLinVta.INSERT(TRUE);

      rLinVta.VALIDATE("No."                      , Cuenta);
      rLinVta.VALIDATE("Shortcut Dimension 1 Code", rCabVta."Shortcut Dimension 1 Code");
      rLinVta.VALIDATE("Shortcut Dimension 2 Code", rCabVta."Shortcut Dimension 2 Code");
      rLinVta.VALIDATE("Allow Invoice Disc."      , FALSE);
      rLinVta.VALIDATE(Quantity                   , 1);
      rLinVta.VALIDATE("VAT Prod. Posting Group"  , rContVta."Gr. registro IVA producto");
      rLinVta.Description := Rellena_Texto(Concepto, Tipo, pwCodigo, pwPrecio);
      rLinVta."Description 2" := texto2;
      rLinVta.VALIDATE("Unit Price", Importe);

      //+$003
      //. Rellenar los campos Amount y "Amount Including VAT" para que la cabecera de factura muestre
      //. la totalizacion de esos campos.

      IF rCabVta."Prices Including VAT" THEN
      BEGIN
        rLinVta."Amount Including VAT" := rLinVta."Line Amount";
        rLinVta.Amount                 := ROUND(rLinVta."Line Amount" / (1 + ((rLinVta."VAT %" + rLinVta."EC %") / 100) ) );
      END
      ELSE
      BEGIN
        rLinVta.Amount                 := rLinVta."Line Amount";
        rLinVta."Amount Including VAT" := ROUND(rLinVta."Line Amount" * (1 + ((rLinVta."VAT %" + rLinVta."EC %") / 100) ) );
      END;
      //+$003

      rReserva.RESET;
      rReserva.SETCURRENTKEY(Delegacion,
                             "N§ Reserva");
      rReserva.SETRANGE(Delegacion  , rBono.Delegacion);
      rReserva.SETRANGE("N§ Reserva", vReserva);
      IF rReserva.FINDSET THEN
      BEGIN
        rReserva.CALCFIELDS(Paxes);
        rLinVta.VALIDATE(Personas      , rReserva.Paxes);
        rLinVta.VALIDATE(Dias          , rReserva.Estancia);
      END;
      rLinVta.MODIFY(TRUE);

      // Creamos la linea de factura incoming;
      // De momento solo para Handling Fee
      // $007 JPT 25/07/12 Ampliamos para todas las lineas (Antes solo HF)

      CLEAR(lrLinInc);
      lrLinInc.SetInf(rLinVta, rCabVta."Prices Including VAT");
      IF pwPrecio <> 0 THEN
        lrLinInc.Precio        := pwPrecio;
      lrLinInc.TourOperador    := prBono.TourOperador;
      lrLinInc.Bono            := prBono.Bono;
      lrLinInc."N§ Reserva"    := prBono."N§ Reserva";
      IF Concepto = Text028 THEN
        lrLinInc.Concepto      := Text029
      ELSE
        lrLinInc.Concepto      := Concepto;
      lrLinInc.Subconcepto     := pwCodigo;
      lrLinInc.Hotel           := prBono.Hotel;
      lrLinInc.Regularizacion  := Tipo = Tipo::Anul;
      lrLinInc.Fecha := prBono."Fecha llegada";
      GetPax(prBono, lwAdultos,lwNi¤os);
      lrLinInc.Adultos         := lwAdultos;
      lrLinInc.Ni¤os           := lwNi¤os;
      lrLinInc.Personas        := rReserva.Paxes;
      lrLinInc.Dias            := rReserva.Estancia;
      lrLinInc.NoPrefactura    := prBono."N§ Prefactura";
      lrLinInc.Delegacion      := prBono.Delegacion;
      lrLinInc.INSERT;
    END;

    PROCEDURE Rellena_Texto@40(Concepto@1103355000 : Code[10];Tipo@1103355001 : ',Anul';pwCodigo@1100253000 : Code[20];pwPrecio@1100253003 : Decimal) : Text[50];
    VAR
      rBon@1103355002 : Record 7010013;
      rReserva@1103355003 : Record 7009743;
      Texto@1103355004 : Text[50];
      lwAdultos@1100253001 : Integer;
      lwNi¤os@1100253002 : Integer;
    BEGIN
      // Rellena_Texto
      //

      // $006 JPT 06/03/12 pwPrecio nuevo campo informativo, de momento solo se utiliza para el Handling Fee

      rBon.RESET;
      rBon.SETCURRENTKEY(Delegacion,
                         TourOperador,
                         Bono,
                         "N§ Reserva",
                         "N§ Secuencia");
      rBon.SETRANGE(Delegacion    , rBono.Delegacion);
      rBon.SETRANGE(TourOperador  , rBono.TourOperador);
      rBon.SETRANGE(Bono          , vBono);
      rBon.SETRANGE("N§ Reserva"  , vReserva);
      rBon.SETRANGE("N§ Secuencia", vSecuencia);
      IF rBon.FINDLAST THEN
      BEGIN
        IF Concepto = Text026 THEN
        BEGIN
          IF Tipo = Tipo::Anul THEN
          BEGIN
            Texto := Text033 + STRSUBSTNO('#1###### #2#########',
                     COPYSTR(rBon.Bono, 1, 8), COPYSTR(rBon."Nombre Responsable", 1, 11));
            texto2 := Text034;
          END
          ELSE
          BEGIN
            Texto := STRSUBSTNO('#1###### #2#########',
                                COPYSTR(rBon.Bono, 1, 8), COPYSTR(rBon."Nombre Responsable", 1, 11));
            texto2 := Text035;
          END;
          rReserva.SETCURRENTKEY(Delegacion,
                                 "N§ Reserva");
          rReserva.SETRANGE(Delegacion, rBon.Delegacion);
          rReserva.SETRANGE("N§ Reserva", rBon."N§ Reserva");
          IF rReserva.FINDFIRST THEN
          BEGIN
            IF Tipo = Tipo::Anul THEN
              Texto := Texto + STRSUBSTNO(' #1######', rReserva."Fecha salida")
            ELSE
              Texto := Texto + STRSUBSTNO(' #1###### #2#### #3 #4# #5###',
                               rReserva."Fecha salida", rReserva.Habitacion,
                               rReserva.Regimen, rReserva."N§ Habitaciones",
                               rReserva.Estancia);
          END;
        END
        ELSE
        BEGIN
          IF Concepto = Text028 THEN
          BEGIN
            { JPT 21/11/11 GOC-CAR-10003 (2) Modificaciones Handling Fee.Nuevo formato factura hotel

            IF Tipo = Tipo::Anul THEN
            BEGIN
              Texto := Text036 + STRSUBSTNO('#1###### #2##############',
                        COPYSTR(rBon.Bono, 1, 8), COPYSTR(rBon."Nombre Responsable", 1, 16));
              texto2 := Text037;
            END
            ELSE
            BEGIN
              Texto := Text038 + STRSUBSTNO('#1###### #2########################',
                        COPYSTR(rBon.Bono, 1, 8), COPYSTR(rBon."Nombre Responsable", 1, 26));
              texto2 := Text028;
            END;
            }
            // Concatenamos los campos que nos hacen falta
            GetPax(rBon, lwAdultos, lwNi¤os); // Buscamos los paxes
            Texto := 'HFEE';
            Texto += FillTxt(pwCodigo,' ',1,10);  // Codigo Handling Fee
            Texto += FillTxt(rBon.Bono,' ',1,10);
            Texto += FillTxt(rBon.Hotel,' ',1,20);
            Texto += FillTxt(FORMAT(lwAdultos),'0',0,3);
            Texto += FillTxt(FORMAT(lwNi¤os),'0',0,3);
            IF Tipo = Tipo::Anul THEN
              texto2 := Text037
            ELSE
              texto2 := Text028;
            // +006 JPT 06/03/12 Introducimos el precio Handling Fee en la Descripcion 2
            texto2 := FillTxt(texto2,' ',1,20);
            texto2 += FillTxt(FORMAT(pwPrecio),' ',0,10);
            // -006


          END
          ELSE
          BEGIN
            IF Tipo = Tipo::Anul THEN
            BEGIN
              Texto := Text039 + STRSUBSTNO('#1###### #2####################',
                        COPYSTR(rBon.Bono, 1, 8), COPYSTR(rBon."Nombre Responsable", 1, 22));
              texto2 := Text040;
            END
            ELSE
            BEGIN
              Texto := Text041 + STRSUBSTNO('#1###### #2##########################',
                                COPYSTR(rBon.Bono, 1, 8), COPYSTR(rBon."Nombre Responsable", 1, 28));
              texto2 := Text027;
            END;
          END;
        END;
      END;
      EXIT(Texto);
    END;

    PROCEDURE Deshacer_Prefactura@29(VAR rBon@1103355000 : Record 7010013);
    VAR
      rCIbonoCNP@1103355001 : Record 7010019;
    BEGIN
      //Deshacer_Prefactura
      //
      IF rBon."N§ Factura" <> '' THEN
        ERROR(Text042);

      rCIbonoCNP.RESET;
      rCIbonoCNP.SETCURRENTKEY("N§ Prefactura");
      rCIbonoCNP.SETRANGE("N§ Prefactura", rBon."N§ Prefactura");
      rCIbonoCNP.MODIFYALL("N§ Prefactura", '');
      rCIbonoCNP.SETRANGE("N§ Prefactura");

      rBon.RESET;
      rBon.SETCURRENTKEY(Delegacion,
                         "N§ Prefactura");
      rBon.SETRANGE("N§ Prefactura", rBon."N§ Prefactura");
      rBon.MODIFYALL("N§ Prefactura", '');
      rBon.SETRANGE("N§ Prefactura");
    END;

    PROCEDURE insertar_personas@5(par_delegacion@1103355000 : Code[10];par_touroperador@1103355001 : Code[10];par_bono@1103355002 : Code[10];par_reserva@1103355003 : Integer;par_secuencia@1103355004 : Code[10]);
    VAR
      rResum@1103355005 : Record 7009771;
      raux_ci@1103355006 : Record 7010018;
      rLinVta@1103355007 : Record 37;
      rLinVta2@1103355008 : Record 37;
      rParPer@1103355009 : Record 7009701;
      rHab@1103355010 : Record 7009731;
      ok@1103355011 : Boolean;
    BEGIN
      // insertar_personas
      //
      raux_ci.RESET;
      raux_ci.SETRANGE(Delegacion    , par_delegacion);
      raux_ci.SETRANGE(TourOperador  , par_touroperador);
      raux_ci.SETRANGE(Bono          , par_bono);
      raux_ci.SETRANGE("N§ Reserva"  , par_reserva);
      raux_ci.SETRANGE("N§ Secuencia", par_secuencia);
      IF NOT raux_ci.FINDLAST THEN
        EXIT;

      rParPer.FINDFIRST;

      adultos_factura   := 0;
      ni¤os_factura     := 0;
      terceras_personas := 0;

      rResum.RESET;
      rResum.SETCURRENTKEY(Delegacion,
                           "TourOperador Venta",
                           Bono,
                           "N§ Responsable",
                           Nombre);
      rResum.SETRANGE(Delegacion          , raux_ci.Delegacion);
      rResum.SETRANGE("TourOperador Venta", raux_ci.TourOperador);
      rResum.SETRANGE(Bono                , raux_ci.Bono);
      rResum.SETRANGE("N§ Responsable"    , raux_ci."N§ Responsable");
      rResum.SETRANGE("N§ Cierre"         , raux_ci."N§ cierre delegacion");
      rResum.SETRANGE(Responsable         , TRUE);
      IF rResum.FINDFIRST THEN
      BEGIN
        rHab.RESET;
        rHab.SETRANGE(Delegacion       , rResum.Delegacion);
        rHab.SETRANGE("N§ Contrato"    , rResum."Contrato compra");
        rHab.SETRANGE("Tipo contrato"  , rHab."Tipo contrato"::Compra);
        rHab.SETRANGE("Habitacion cupo", rResum.Habitacion);
        ok := rHab.FINDFIRST;
        rHab.RESET;
      END;

      rResum.SETRANGE(Responsable);
      IF rResum.FINDSET THEN
      BEGIN
        REPEAT
          CLEAR(rLinVta);
          rLinVta.VALIDATE("Document Type", rCabVta."Document Type");
          rLinVta.VALIDATE("Document No."  , rCabVta."No.");
          // Buscamos el n£mero de l¡nea que corresponde
          //
          rLinVta2.RESET;
          rLinVta2.SETRANGE("Document Type", rCabVta."Document Type");
          rLinVta2.SETRANGE("Document No.", rCabVta."No.");
          IF NOT rLinVta2.FINDLAST THEN
            rLinVta.VALIDATE("Line No.", 10000)
          ELSE
            rLinVta.VALIDATE("Line No.", rLinVta2."Line No." + 10000);
          rLinVta.VALIDATE(Type                     , rLinVta.Type::" ");
          rLinVta.INSERT(TRUE);
          rLinVta.Description := STRSUBSTNO('#1############################  #2########', rResum.Nombre,
                                            rResum."Tipo Persona Facturacion");
          rLinVta."Description 2" := Text044;
          rLinVta.MODIFY;

          IF rParPer."Codigo Adulto" = rResum."Tipo Persona Facturacion" THEN
          BEGIN
            adultos_factura := adultos_factura + 1;
            IF rResum."N§ persona" > rHab."Minimo adultos" THEN
              terceras_personas := terceras_personas + 1;
          END;

          IF rParPer."Codigo Ni¤o" = rResum."Tipo Persona Facturacion" THEN
            ni¤os_factura := ni¤os_factura + 1;
        UNTIL rResum.NEXT = 0;
        // Insertamos una linea de totales
        //
        CLEAR(rLinVta);
        rLinVta.VALIDATE("Document Type", rCabVta."Document Type");
        rLinVta.VALIDATE("Document No."  , rCabVta."No.");
        // Buscamos el n£mero de l¡nea que corresponde
        //
        rLinVta2.RESET;
        rLinVta2.SETRANGE("Document Type", rCabVta."Document Type");
        rLinVta2.SETRANGE("Document No.", rCabVta."No.");
        IF NOT rLinVta2.FINDLAST THEN
          rLinVta.VALIDATE("Line No.", 10000)
        ELSE
          rLinVta.VALIDATE("Line No.", rLinVta2."Line No." + 10000);
        rLinVta.VALIDATE(Type, rLinVta.Type::" ");
        rLinVta.INSERT(TRUE);
        rLinVta.Description := STRSUBSTNO(Text045, adultos_factura, ni¤os_factura, terceras_personas);
        rLinVta."Description 2" := Text044;
        rLinVta.MODIFY;
      END;
      rResum.RESET;
    END;

    PROCEDURE busca_max_min@2(par_concepto@1103355000 : Record 7010019);
    VAR
      rConcepto@1103355001 : Record 7010019;
      rCIBono@1103355002 : Record 7010018;
      reg_Darrer@1103355003 : Boolean;
      reg_Primer@1103355004 : Boolean;
    BEGIN
      // busca_max_min
      //
      rConcepto.RESET;
      rConcepto.SETRANGE(Delegacion     , par_concepto.Delegacion);
      rConcepto.SETRANGE(TourOperador   , par_concepto.TourOperador);
      rConcepto.SETRANGE(Bono           , par_concepto.Bono);
      rConcepto.SETRANGE("N§ Reserva"   , par_concepto."N§ Reserva");
      rConcepto.SETRANGE("N§ Secuencia" , par_concepto."N§ Secuencia");
      rConcepto.SETRANGE("Coste/Ingreso", rConcepto."Coste/Ingreso"::Ingreso);
      rConcepto.SETRANGE("N§ Prefactura", par_concepto."N§ Prefactura");
      IF rConcepto.FINDLAST THEN
      BEGIN
        maximo_orden := rConcepto."N§ Orden";
        IF rCIBono.GET(rConcepto.Delegacion,
                       rConcepto.TourOperador,
                       rConcepto.Bono,
                       rConcepto."N§ Reserva",
                       rConcepto."N§ Secuencia",
                       rConcepto."N§ Orden") THEN
          IF rCIBono.Regularizacion THEN
            reg_Darrer := TRUE;
      END;

      IF rConcepto.FINDFIRST THEN
      BEGIN
        minimo_orden := rConcepto."N§ Orden";
        IF rCIBono.GET(rConcepto.Delegacion,
                       rConcepto.TourOperador,
                       rConcepto.Bono,
                       rConcepto."N§ Reserva",
                       rConcepto."N§ Secuencia",
                       rConcepto."N§ Orden") THEN
          IF rCIBono.Regularizacion THEN
            reg_Primer := TRUE;
      END;

      IF NOT reg_Primer AND NOT reg_Darrer THEN
        minimo_orden := maximo_orden;
      IF reg_Primer AND reg_Darrer THEN
        maximo_orden := minimo_orden;
      IF NOT reg_Primer AND reg_Darrer THEN
        maximo_orden := 0;
    END;

    PROCEDURE FillTxt@1100253003(pwTexto@1100253000 : Text[1024];pwCar@1100253001 : Text[1];pwModo@1100253002 : 'Delante,Detras';pwLength@1100253003 : Integer) : Text[1024];
    VAR
      lwText2@1100253004 : Text[1024];
      lwLenAct@1100253005 : Integer;
    BEGIN
      // FillTxt
      // JPT 21/11/11 GOC-CAR-10003 (2)
      // Esta funcion devuelve otra cadena que sera el parametro pwTexto dejando una longitud justa de pwLength
      // caracteres. Si la cadena pwTexto es mas larga que pwLength, se cortar  por delante o por detras segun el parametro pwModo
      // Si es mas corta se rellenara con el caracter pwCar por delante o por detras segun el parametro pwModo hasta tener la longitud
      // estipulada en pwLength

      lwLenAct := STRLEN(pwTexto);
      CLEAR(lwText2);
      CASE TRUE OF
        lwLenAct = pwLength: lwText2 := pwTexto;
        lwLenAct > pwLength:
        BEGIN
          CASE pwModo OF
            pwModo::Delante: lwText2 := COPYSTR(pwTexto,1, pwLength);
            pwModo::Detras : lwText2 := COPYSTR(pwTexto, lwLenAct - pwLength + 1);
          END;
        END;
        lwLenAct < pwLength:
        BEGIN
          lwText2 := pwTexto;
          IF pwCar='' THEN
            pwCar := ' ';
          REPEAT
            CASE pwModo OF
              pwModo::Delante: lwText2 := pwCar + lwText2;
              pwModo::Detras : lwText2 := lwText2 + pwCar;
            END;
          UNTIL STRLEN(lwText2) = pwLength;
        END;
      END;

      EXIT(lwText2);
    END;

    PROCEDURE GetPax@1100253004(prBon@1100253000 : Record 7010013;VAR pwAdultos@1100253001 : Integer;VAR pwNi¤os@1100253002 : Integer);
    VAR
      lrResvH@1100253003 : Record 7009743;
      lrParPer@1100253004 : Record 7009701;
    BEGIN
      // GetPax
      // Devuelve el numero de Adultos y Ni¤os de la reserva
      // JPT 21/11/11 GOC-CAR-10003 (2)

      CLEAR(pwAdultos);
      CLEAR(pwNi¤os);

      lrParPer.FINDFIRST;
      CLEAR(lrResvH);
      lrResvH.SETCURRENTKEY(Delegacion,"N§ Responsable","N§ Reserva");
      lrResvH.SETRANGE(Delegacion      , prBon.Delegacion);
      lrResvH.SETRANGE("N§ Responsable", prBon."N§ Reserva");
      IF lrResvH.FINDSET THEN
      BEGIN
        REPEAT
           //-$004CASE lrResvH."Tipo Persona Facturacion" OF
           CASE lrResvH."Tipo Persona" OF //$004
             lrParPer."Codigo Adulto": pwAdultos +=1;
             lrParPer."Codigo Ni¤o"  : pwNi¤os   +=1;
           END;
        UNTIL lrResvH.NEXT=0;
      END;
    END;

    PROCEDURE ImprimirFactura@1100217000(pwTipoDocumento@1100217000 : 'Oferta,Pedido,Factura,Abono,Pedido abierto,Devoluci¢n';pwDocumento@1100217005 : Code[20]);
    VAR
      lrCabVta@1100217001 : Record 36;
      lrFacVta@1100217002 : Record 112;
      lrAboVta@1100217003 : Record 114;
      lrCabAtn@1100217004 : Record 7009908;
    BEGIN
      // ImprimirFactura

      rDat.FINDFIRST;
      IF rDat."Empresa Real" = rDat."Empresa Real"::GOC THEN
      BEGIN
        rPar.FINDFIRST;
        IF lrCabVta.GET(pwTipoDocumento, pwDocumento) THEN
        BEGIN
          lrCabVta.SETRECFILTER;
          REPORT.RUNMODAL(rPar."Factura Venta Hotel", TRUE, FALSE, lrCabVta)
        END
        ELSE
        BEGIN
          IF pwTipoDocumento = pwTipoDocumento::Factura THEN
          BEGIN
            IF lrFacVta.GET(pwDocumento) THEN
            BEGIN
              lrFacVta.SETRECFILTER;
              REPORT.RUNMODAL(rPar."Factura Venta Hotel registrada", TRUE, FALSE, lrFacVta)
            END;
          END
          ELSE
          BEGIN
            IF lrAboVta.GET(pwDocumento) THEN
            BEGIN
              lrAboVta.SETRECFILTER;
              REPORT.RUNMODAL(rPar."Abono Venta Hotel registrado", TRUE, FALSE, lrAboVta)
            END;
          END;
        END;
      END
      ELSE
      BEGIN
        rPar.FINDFIRST;

        lrCabAtn.GET(pwTipoDocumento, pwDocumento);
        lrCabAtn.SETRECFILTER;
        REPORT.RUNMODAL(rPar."Factura Venta Hotel", TRUE, FALSE, lrCabAtn);
      END;
    END;

    LOCAL PROCEDURE _CheckReasonCode@1000000008();
    VAR
      lrReason@1000000000 : Record 231;
      TextCodAu@1000000001 : TextConst 'ENU=ATENNEA;ESP=ATENNEA';
    BEGIN
      // _CheckReasonCode

      IF NOT lrReason.GET(TextCodAu) THEN
      BEGIN
        lrReason.INIT;
        lrReason.Code        := TextCodAu;
        lrReason.Description := lrReason.Code;
        lrReason.INSERT;
      END;
    END;

    BEGIN
    {
      ## AJF 29/06/09

        .- (09/00319) cambio c¢digos de hotel de code10 a code20.

      $001 AJS 25102011 Modifico la funcion Busca_Contrato para no utilizar el grupo touroperador

      JPT 21/11/11 GOC-CAR-10003 (2) Modificaciones Handling Fee.Nuevo formato factura hotel

      $002 AJS 21122011 Modifico la descripcion de la factura para incluir espacios en blanco

      $003 AJS 20012012 Rellenar los campos Amount y "Amount Including VAT" para que la cabecera de factura muestre
                        la totalizacion de esos campos.

      $004 AJS 20012012 Cambio en la funcion GetPax para trabajar sobre el campo Tipo Persona en lugar de Tipo persona Facturacion

      $005 AJS 01022012 Cambio para que las facturas se registren con WORKDATE en lugar de TODAY

      $006 JPT 06/03/12 Introducimos el precio Handling Fee en la Descripcion 2
      $007 JPT 25/07/12 Guardamos las lineas de factura Incoming de todos los conceptos (antes solo HF)
      $008 JPT 27/07/12 Cambiamos las tabla sobre la que se imprime

      $009 AJS 23082012 Control de seguridad por usuario

      $010 AJS 17072013 Incluir la fecha de creacion en las facturas de Atennea

      $011 AJS 26082013 Elimino las referencias a la tabla de maestro de claves porque es obsoleta

      $012 AJS 23062014 He a¤adido una tabla de series de facturacion

      $013 AJS 21012015 Ejecutar el proceso estandar de Lanzar factura

      $014 AJS 16032015 CNT-CAR-14096, Nueva funcion en las lineas de factura del estandar para controlar la edicion manual

      $015 AJS 25032015 El campo Reason code se rellena justo al terminar todo el proceso
    }
    END.
  }
}
