OBJECT Codeunit 7009705 Funciones contabilizar
{
  OBJECT-PROPERTIES
  {
    Date=07/05/15;
    Time=18:13:02;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355031 : TextConst 'ENU=Invoice already posted;ESP=Factura ya contabilizada.';
      Text001@1103355032 : TextConst 'ENU=Accounts for Touroperator %1 does not exist in the\;ESP=No existen las cuentas para el Touroperador %1 en la\';
      Text002@1103355033 : TextConst 'ENU=local office %2 neither in generic card;ESP=delegacion %2 ni la ficha generica.';
      Text003@1103355034 : TextConst 'ENU=Touroperator %1 does not exist;ESP=No existe el Touroperador %1.';
      Text004@1103355035 : TextConst 'ENU=Hotel %1 does not exist;ESP=No existe el Hotel %1.';
      Text005@1103355036 : TextConst 'ENU=Supplier %1 of hotel %2 does not exist;ESP=No existe el proveedor %1 del hotel %2.';
      Text006@1103355037 : TextConst 'ENU=Supplier posting group %1 does not exist;ESP=No existe el Grupo contable proveedor %1.';
      Text007@1103355038 : TextConst 'ENU=Local office parameters does not exist;ESP=No existe el fichero de parametros de la delegacion.';
      Text008@1103355039 : TextConst 'ENU=Accounting diary:;ESP=Diario contabilizacion:';
      Text009@1103355040 : TextConst 'ENU=HOTEL GUARANTEES;ESP=GARANTIAS HOTEL';
      Text010@1103355041 : TextConst 'ENU=GUARANTCIR;ESP=GARANTCIR';
      Text012@1103355043 : TextConst 'ENU=HOTEL INV. %1;ESP=FRAS. HOTEL %1';
      Text013@1103355044 : TextConst 'ENU=FRACOSCIR;ESP=FRACOSCIR';
      Text014@1103355045 : TextConst 'ENU=FRACOS;ESP=FRACOS';
      Text015@1103355046 : TextConst 'ENU=FRAINTCIR;ESP=FRAINTCIR';
      Text016@1103355047 : TextConst 'ENU=FRAINT;ESP=FRAINT';
      Text017@1103355048 : TextConst 'ENU=Current,;ESP=Actual,';
      Text018@1103355049 : TextConst 'ENU=Marked,;ESP=Marcadas,';
      Text019@1103355050 : TextConst 'ENU=All;ESP=Todas';
      Text020@1103355051 : TextConst 'ENU=Hotel code %1 does not exist;ESP=No existe el codigo de Hotel %1.';
      Text021@1103355052 : TextConst 'ENU=Supplier code %1 does not exist;ESP=No existe el codigo de proveedor %1.';
      Text022@1103355053 : TextConst 'ENU=Supplier posting group %1 does not exist;ESP=No existe el Grupo contable proveedor %1.';
      Text023@1103355054 : TextConst 'ENU=Registration accounts does not exist for the TourOperator %1 \;ESP=No existe el registro de cuentas para el TourOperador %1';
      Text024@1103355055 : TextConst 'ENU=in the local office %1 neither in generic card;ESP=en la delegacion %2 ni la ficha generica.';
      Text027@1103355058 : TextConst 'ENU=DB parameters does not exist;ESP=No existe el fichero de parametros de la B.D.';
      Text028@1103355059 : TextConst 'ENU=Must indicate a VAT product posting group for hotel in DB parameters;ESP=Debe indicar un Grupo Registro IVA producto para Hotel en Parametros BD.';
      Text029@1103355060 : TextConst 'ENU=ARRIVALS CLOSURE;ESP=CIERRE LLEGADAS';
      Text030@1103355061 : TextConst 'ENU=PREV;ESP=ANT';
      Text031@1103355062 : TextConst 'ENU=REC;ESP=REC';
      Text032@1103355063 : TextConst 'ENU=RE2;ESP=RE2';
      Text033@1103355064 : TextConst 'ENU=COL;ESP=COL';
      Text034@1103355065 : TextConst 'ENU=PRE;ESP=PRE';
      Text035@1103355066 : TextConst 'ENU=GAC;ESP=GAC';
      Text036@1103355067 : TextConst 'ENU=GAV;ESP=GAV';
      Text037@1103355068 : TextConst 'ENU=TO %1 does not exist;ESP=No exite el T.O. %1';
      Text038@1103355069 : TextConst 'ENU=Hotel %1 does not exist;ESP=No existe el Hotel %1,';
      Text039@1103355070 : TextConst 'ENU=Local office %1 does not exist;ESP=No existe la delegaci¢n %1';
      Text040@1103355071 : TextConst 'ENU=Folder of accounts does not exist for\;ESP=No existe el fichero de cuentas para';
      Text041@1103355072 : TextConst 'ENU=Local Office %1 and TO %2 neither in the generic card;ESP=la delegaci¢n %1 y T.O. %2 ni la ficha generica.';
      Text042@1103355073 : TextConst 'ENU=Company data does not exist;ESP=No existe el fichero de datos de la empresa';
      Text052@1103355083 : TextConst 'ENU=Posting Journal:;ESP=Diario contabilizaci¢n:';
      Text053@1103355084 : TextConst 'ENU=There is no parameters table definition;ESP=Falta definici¢n de tabla par metros';
      Text054@1103355085 : TextConst 'ENU=PREV;ESP=ANT';
      Text055@1103355086 : TextConst 'ENU=Supplier %1 of hotel %2 does not exist;ESP=No existe el proveedor %1 del hotel %2';
      Text056@1103355087 : TextConst 'ENU=There is no group for supplier %1;ESP=No existe grupo para el proveedor %1';
      Text057@1103355088 : TextConst 'ENU=<Year4><Month,2><Day,2>;ESP=<Year4><Month,2><Day,2>';
      Text058@1103355089 : TextConst 'ENU=HOTEL ADVANCE;ESP=ANTICIPO HOTEL';
      Text059@1103355090 : TextConst 'ENU=HOTEL ADVANCE RECOVERY;ESP=RECUPERACION ANTICIPO HOTEL';
      Text060@1103355091 : TextConst 'ENU=CLIENT CLAIMS;ESP=RECLAMACIONES CLIENTES';
      Text061@1103355092 : TextConst 'ENU=Hotel colaboration;ESP=Colaboracion hotel';
      Text062@1103355093 : TextConst 'ENU=%1 partner code does not exist;ESP=No existe el codigo de colaboracion %1.';
      Text063@1103355094 : TextConst 'ENU=Must indicate an associated ledger entry to the partner code %1;ESP=Debe indicar una cuenta contable asociada al codigo de colaboracion %1.';
      Text064@1103355095 : TextConst 'ENU=ACCEPTED LOAN;ESP=CONCESION PRESTAMO';
      Text065@1103355096 : TextConst 'ENU=RECOVERY LOAN;ESP=RECUPERACION PRESTAMO';
      Text066@1103355097 : TextConst 'ENU=GUARANTEES:;ESP=GARANTIAS:';
      Text067@1103355098 : TextConst 'ENU=Purchase contract does not exist for the Touroperator %1, Hotel %2\;ESP=No existe contrato de compra para el TourOperador %1, Hotel %2\';
      Text068@1103355099 : TextConst 'ENU=" in date %3.";ESP=" en fecha %3."';
      Text069@1103355100 : TextConst 'ENU=Purchase contract %1 for local office %2 does not exist;ESP=No existe contrato de compra %1 para la Delegacion %2';
      cNom@1103355000 : Codeunit 7009702;
      rCab@1103355001 : Record 232;
      rLin@1103355002 : Record 81;
      rPar@1103355003 : Record 7009700;
      rHot@1103355004 : Record 7009724;
      rPro@1103355005 : Record 23;
      rGrup@1103355006 : Record 93;
      rCtas@1103355007 : Record 7009705;
      rTO@1103355008 : Record 7009717;
      rDel@1103355009 : Record 7009718;
      rInfEmp@1103355011 : Record 79;
      ABRContab@1103355012 : Boolean;
      CuentaVacia@1103355013 : Code[20];
      vFecha@1103355014 : Text[10];
      vMensa@1103355015 : Text[80];
      w_importe@1103355017 : Decimal;
      w_ult_orden@1103355018 : Decimal;
      w_fra_num@1103355019 : Decimal;
      w_ult_asiento@1103355020 : Integer;
      indice@1103355021 : Integer;
      touroperador_fra@1103355022 : ARRAY [25] OF Code[10];
      importe_hotel@1103355023 : ARRAY [25] OF Decimal;
      importe_hotel_circuito@1103355024 : ARRAY [25] OF Decimal;
      importe_calculado@1103355025 : ARRAY [25] OF Decimal;
      importe_calculado_circuito@1103355026 : ARRAY [25] OF Decimal;
      importe_aportacion@1103355027 : ARRAY [25] OF Decimal;
      importe_fpr@1103355028 : ARRAY [25] OF Decimal;
      importe_fpr_circuito@1103355029 : ARRAY [25] OF Decimal;
      es_circuito@1103355030 : ARRAY [25] OF Boolean;
      Text070@1103355101 : TextConst 'ENU=PDF file associated to invoice does not exist;ESP=No existe el fichero PDF asociado a la factura.';
      Text071@1103355102 : TextConst 'ENU=Specify barcode in the invoice;ESP=Especifique codigo de barras en la factura.';
      wDiarioGeneral@1100217000 : Code[10];

    PROCEDURE situar_diario@5();
    BEGIN
      // situar_diario

      wDiarioGeneral := rPar.GetLibroDiarioGeneral;
      rPar.CreaSeccionUsuario;

      rLin.RESET;
      rLin.SETRANGE("Journal Template Name", wDiarioGeneral);
      rLin.SETRANGE("Journal Batch Name"   , USERID);
      IF rLin.FINDLAST THEN
        w_ult_orden := rLin."Line No."
      ELSE
        w_ult_orden := 0;

      //-$006rLin.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Posting Date", "Transaction No.");
      rLin.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Transaction No."); //+$006

      IF rLin.FINDLAST THEN
        w_ult_asiento := rLin."Transaction No."
      ELSE
        w_ult_asiento := 1;
    END;

    PROCEDURE Contabilizar_prevision@2(VAR rCie@1103355000 : Record 7010012);
    VAR
      opcion@1103355001 : Integer;
      lcSincro@1000000000 : Codeunit 7009793;
    BEGIN
      // Contabilizar_prevision

      opcion := STRMENU(Text017+
                        Text018+
                        Text019, 1);
      IF opcion = 0 THEN
        EXIT;
      rCie.SETRANGE(Contabilizado, FALSE);
      CASE opcion OF
        1:
        BEGIN
          rCie.SETRECFILTER
        END;
        2:
        BEGIN
          rCie.MARKEDONLY(TRUE);
        END;
      END;

      situar_diario;

      comprobar_cuentas_cierre(rCie);

      rPar.FINDFIRST;

      IF rCie.FINDSET THEN
      BEGIN
        REPEAT
          leer_cuentas_cierre(rCie);

          linea_cierre_1(rCie);
          linea_cierre_2(rCie);

          rCie.Contabilizado := TRUE;
          rCie.MODIFY;

          //+$009 <
          IF rPar."Registrar costes en comerciali" THEN
            lcSincro.SincronizaDiario(rPar.GetLibroDiarioGeneral, USERID, '', rCie.TourOperador);
          //+$009 >
        UNTIL rCie.NEXT = 0;
      END;
      rCie.RESET;
      COMMIT;
    END;

    PROCEDURE comprobar_cuentas_cierre@7(VAR rCie@1103355000 : Record 7010012);
    BEGIN
      // comprobar_cuentas_cierre

      IF rCie.FINDSET THEN BEGIN
        REPEAT
          IF NOT rHot.GET(rCie.Hotel) THEN
            ERROR(Text020, rCie.Hotel);
          IF rCie."Tipo bono" = rCie."Tipo bono"::Intermediacion THEN BEGIN
            IF NOT rPro.GET(rHot."Proveedor Intermediacion") THEN
              ERROR(Text021, rHot."Proveedor Intermediacion");
            IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
              ERROR(Text022, rPro."Gen. Bus. Posting Group");
            rGrup.TESTFIELD("Cta. FPR hotel intermediacion");
          END
          ELSE BEGIN
            IF NOT rPro.GET(rHot."Proveedor Cuenta Propia") THEN
              ERROR(Text021, rHot."Proveedor Cuenta Propia");
            IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
              ERROR(Text022, rPro."Gen. Bus. Posting Group");
            rGrup.TESTFIELD("Cta. FPR hotel cuenta propia");
          END;
          IF NOT rCtas.GET(rCie.Delegacion, rCie.TourOperador) THEN BEGIN
            IF NOT rCtas.GET(rCie.Delegacion, '') THEN
              ERROR(Text023 + ' ' + Text024, rCie.Delegacion, rCie.TourOperador);
          END;
          rCtas.TESTFIELD("Cta. compra hotel");
        UNTIL rCie.NEXT = 0;
      END;
    END;

    PROCEDURE leer_cuentas_cierre@3(rCie@1103355000 : Record 7010012);
    BEGIN
      // leer_cuentas_cierre

      IF NOT rHot.GET(rCie.Hotel) THEN
        ERROR(Text020, rCie.Hotel);

      IF rCie."Tipo bono" = rCie."Tipo bono"::Intermediacion THEN BEGIN
        IF NOT rPro.GET(rHot."Proveedor Intermediacion") THEN
          ERROR(Text021, rHot."Proveedor Intermediacion");
        IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
          ERROR(Text022, rPro."Gen. Bus. Posting Group");
      END
      ELSE BEGIN
        IF NOT rPro.GET(rHot."Proveedor Cuenta Propia") THEN
          ERROR(Text021, rHot."Proveedor Cuenta Propia");
        IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
          ERROR(Text022, rPro."Gen. Bus. Posting Group");
      END;
    END;

    PROCEDURE linea_cierre_1@6(rCie@1103355000 : Record 7010012);
    BEGIN
      // linea_cierre_1

      w_ult_orden := w_ult_orden + 100;

      rLin.INIT;
      rLin."Journal Template Name" := wDiarioGeneral;
      rLin."Journal Batch Name"    := USERID;
      rLin."Line No."              := w_ult_orden;

      rLin.VALIDATE("Account Type", rLin."Account Type"::"G/L Account");

      IF (rCie."Tipo bono" = rCie."Tipo bono"::Intermediacion) OR
         (rCie."Tipo bono" = rCie."Tipo bono"::"Nombre Propio") THEN
        rLin.VALIDATE("Account No.", rCtas."Cta. compra hotel")
      ELSE
        rLin.VALIDATE("Account No.", rCtas."Cta. compra circuito");

      rLin.VALIDATE("Posting Date"             , rCie."Fecha cierre");
      rLin.VALIDATE("Document No."             , STRSUBSTNO('%1', rCie."N§ Cierre"));
      rLin.VALIDATE("Shortcut Dimension 1 Code", rCie.Delegacion);
      rLin.VALIDATE("Shortcut Dimension 2 Code", rCie.TourOperador);
      // $001
      // rLin.VALIDATE("Debit Amount"             , rCie."Total coste");
      rLin.VALIDATE(Amount                      , rCie."Total coste");
      rLin.VALIDATE(Description                , Text029 + rCie.Hotel + '-' + rCie.TourOperador +
                                                 STRSUBSTNO('-%1', rCie."Fecha cierre"));
      rLin.VALIDATE("Transaction No."          , w_ult_asiento);
      rLin.VALIDATE("Gen. Posting Type"        , 0);
      rLin.VALIDATE("Gen. Bus. Posting Group"  , '');
      rLin.VALIDATE("Gen. Prod. Posting Group" , '');
      rLin.VALIDATE("VAT Bus. Posting Group"   , '');
      rLin.VALIDATE("VAT Prod. Posting Group"  , '');
      //+$003 <
      rLin."Source Type" := rLin."Source Type"::Vendor;
      rLin."Source No."  := rPro."No.";
      //+$003 >
      rLin."System-Created Entry" := TRUE; //+$005
      rLin."Source Code"          := rPar.GetSourceCode(rLin."Journal Template Name"); //+$008
      rLin.INSERT;
    END;

    PROCEDURE linea_cierre_2@15(rCie@1103355000 : Record 7010012);
    BEGIN
      // linea_cierre_2

      w_ult_orden := w_ult_orden + 100;

      rLin.INIT;
      rLin."Journal Template Name" := wDiarioGeneral;
      rLin."Journal Batch Name"    := USERID;
      rLin."Line No."              := w_ult_orden;

      rLin.VALIDATE("Account Type", rLin."Account Type"::"G/L Account");

      // AJS 17-04-2000 --> Modificacion para utilizar las cuentas de circuitos en los
      //                    casos de reservas de circuitos.

      CASE rCie."Tipo bono" OF
        rCie."Tipo bono"::Intermediacion:
        BEGIN
          rLin.VALIDATE("Account No.", rGrup."Cta. FPR hotel intermediacion")
        END;
        rCie."Tipo bono"::"Nombre Propio":
        BEGIN
          rLin.VALIDATE("Account No.", rGrup."Cta. FPR hotel cuenta propia");
        END;
        rCie."Tipo bono"::"Circuito Intermediacion", rCie."Tipo bono"::"Circuito Nombre Propio":
        BEGIN
          rLin.VALIDATE("Account No.", rGrup."Cta. FPR Circuito");
        END;
      END;

      rLin.VALIDATE("Posting Date"             , rCie."Fecha cierre");
      rLin.VALIDATE("Document No."             , STRSUBSTNO('%1', rCie."N§ Cierre"));
      rLin.VALIDATE("Shortcut Dimension 1 Code", rCie.Delegacion);
      rLin.VALIDATE("Shortcut Dimension 2 Code", rCie.TourOperador);
      // // $001
      // rLin.VALIDATE("Credit Amount"            , rCie."Total coste");
      rLin.VALIDATE(Amount                   , - rCie."Total coste");
      rLin.VALIDATE(Description                , Text029 + rCie.Hotel + '-' + rCie.TourOperador +
                                                 STRSUBSTNO('-%1', rCie."Fecha cierre"));
      rLin.VALIDATE("Transaction No."          , w_ult_asiento);
      rLin.VALIDATE("Gen. Posting Type"        , 0);
      rLin.VALIDATE("Gen. Bus. Posting Group"  , '');
      rLin.VALIDATE("Gen. Prod. Posting Group" , '');
      rLin.VALIDATE("VAT Bus. Posting Group"   , '');
      rLin.VALIDATE("VAT Prod. Posting Group"  , '');
      //+$003 <
      rLin."Source Type" := rLin."Source Type"::Vendor;
      rLin."Source No."  := rPro."No.";
      //+$003 >
      rLin."System-Created Entry" := TRUE; //+$005
      rLin."Source Code"          := rPar.GetSourceCode(rLin."Journal Template Name"); //+$008
      rLin.INSERT;
    END;

    PROCEDURE Contabilizar_ABR@16(VAR Rec@1103355000 : Record 7010017);
    BEGIN
      // Contabilizar_ABR

      IF Rec.FINDSET THEN
        REPEAT
          LeerCuentasABR(Rec);

          SituarDiarioABR;

          ABRContab := FALSE;
          CASE Rec."Concepto ABR" OF
            Text030: ContaAnticipoABR(Rec);
            Text031: ContaReclamacionABR(Rec);
            Text032: ContaRectificacionABR(Rec);
            Text033: ContaColaboracionABR(Rec);
            Text034: ContaPrestamosABR(Rec);
            Text035,Text036: ContaGarantiaABR(Rec);
          END;
          IF ABRContab THEN BEGIN
            Rec."Pasado Diario" := TRUE;
            Rec.MODIFY;
          END;
        UNTIL Rec.NEXT = 0;

      IF ABRContab THEN
      BEGIN
        rLin.RESET;
        rLin.SETRANGE(rLin."Journal Template Name", wDiarioGeneral);
        rLin.SETRANGE(rLin."Journal Batch Name"   , USERID);
        IF rLin.FINDFIRST THEN
          CODEUNIT.RUN(13, rLin);
      END;
    END;

    PROCEDURE LeerCuentasABR@17(Rec@1103355000 : Record 7010017);
    BEGIN
      // LeerCuentasABR

      IF NOT rTO.GET(Rec.TourOperador) THEN
        ERROR (Text037,Rec.TourOperador);
      IF NOT rHot.GET(Rec.Hotel) THEN
        ERROR (Text038,Rec.Hotel);
      IF NOT rDel.GET(Rec.Delegacion) THEN
        ERROR (Text039,Rec.Delegacion);
      IF NOT rCtas.GET(Rec.Delegacion, Rec.TourOperador) THEN BEGIN
        IF NOT rCtas.GET(Rec.Delegacion, '') THEN
          ERROR (Text040 + ' ' + Text041, Rec.Delegacion, Rec.TourOperador);
      END;

      IF NOT rInfEmp.FIND('-') THEN
        ERROR (Text042);
    END;

    PROCEDURE SituarDiarioABR@18();
    BEGIN
      // SituarDiarioABR

      wDiarioGeneral := rPar.GetLibroDiarioGeneral;
      rPar.CreaSeccionUsuario;

      rLin.RESET;
      rLin.SETRANGE("Journal Template Name", wDiarioGeneral);
      rLin.SETRANGE("Journal Batch Name"   , USERID);
      IF rLin.FINDLAST THEN
        w_ult_orden := rLin."Line No." + 100
      ELSE
        w_ult_orden := 100;

      rLin.RESET;
      rLin.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Transaction No.");
      rLin.SETRANGE("Journal Template Name", wDiarioGeneral);
      rLin.SETRANGE("Journal Batch Name"   , USERID);
      IF rLin.FINDLAST THEN
        w_ult_asiento := rLin."Transaction No." + 1
      ELSE
        w_ult_asiento := 1;
    END;

    PROCEDURE LineaDiarioABR@19(Rec@1103355000 : Record 7010017;TipoCuenta@1103355001 : 'Cuenta,Cliente,Proveedor,Banco,Activo';CuentaLinea@1103355002 : Code[20];TipoLinea@1103355003 : 'Debe,Haber';ImporteLinea@1103355004 : Decimal;DocLinea@1103355005 : Text[80];TextLinea@1103355006 : Text[80];CtaInterLinea@1103355008 : Code[20];TipoAsiento@1103355009 : ' ,Pago,Factura,Abono,Intereses,Recordatorio';DocProveedor@1103355010 : Text[80]);
    BEGIN
      // LineaDiarioABR

      w_ult_orden := w_ult_orden + 1;

      rLin.INIT;
      rLin."Journal Template Name" := wDiarioGeneral;
      rLin."Journal Batch Name"    := USERID;
      rLin."Line No."              := w_ult_orden;

      IF Rec."Concepto ABR" = Text054 THEN BEGIN
        rLin.VALIDATE("Posting Date", Rec."Fecha Concesion");
        rLin."Document Date" := Rec.Fecha;
      END
      ELSE
        rLin.VALIDATE("Posting Date", Rec.Fecha);

      rLin.VALIDATE("Transaction No."          , w_ult_asiento);
      rLin.VALIDATE("Account Type"             , TipoCuenta);
      rLin.VALIDATE("Account No."              , CuentaLinea);
      rLin.VALIDATE("Document Type"            , TipoAsiento);
      rLin.VALIDATE("Document No."             , DocLinea);
      rLin.VALIDATE("External Document No."    , DocProveedor);
      rLin.VALIDATE("Shortcut Dimension 1 Code", Rec.Delegacion);
      rLin.VALIDATE("Shortcut Dimension 2 Code", Rec.TourOperador);

      IF TipoLinea = TipoLinea::Debe THEN
        rLin.VALIDATE(rLin."Debit Amount", ImporteLinea)
      ELSE
        rLin.VALIDATE(rLin."Credit Amount", ImporteLinea);

      rLin.Description     := COPYSTR(TextLinea, 1, 50);
      rLin."Due Date"      := Rec.Fecha;
      rLin."Source Code"   := rPar.GetSourceCode(rLin."Journal Template Name"); //+$008
      rLin.INSERT;
    END;

    PROCEDURE ContaAnticipoABR@22(Rec@1103355000 : Record 7010017);
    BEGIN
      // ContaAnticipoABR

      // Comprobacion cuentas

      IF NOT rPro.GET(rHot."Proveedor Intermediacion") THEN
        ERROR (Text055, rHot."Proveedor Intermediacion", rHot.Hotel);
      IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
        ERROR (Text056, rPro."No.");

      // Asientos

      CASE Rec."Tipo anticipo" OF
        // Anticipo Directo T.O.
        //
        Rec."Tipo anticipo"::"Directo TO(Interm)":
          BEGIN
            IF Rec."Tipo movimiento"=Rec."Tipo movimiento"::Concesion THEN BEGIN
              vFecha := FORMAT(Rec.Fecha, 8, Text057);
              vMensa :=Text058 + Rec.Hotel;
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 0, Rec.Importe, Rec."Documento contabilizacion",
                             vMensa, CuentaVacia, 2, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 0, rCtas."Cta. anticipos concedidos", 1, Rec.Importe, Rec."Documento contabilizacion",
                             vMensa, rGrup."Cta. anticipos intermediacion", 2, Rec."Documento contabilizacion");
              ABRContab := TRUE;
            END
            ELSE BEGIN
              vFecha := FORMAT(Rec.Fecha,8,Text057);
              vMensa := Text059+ Rec.Hotel;
              LineaDiarioABR(Rec, 0, rCtas."Cta. anticipos concedidos", 0, ROUND((-1) * Rec.Importe),
                             Rec."Documento contabilizacion", vMensa, rGrup."Cta. hotel intemediacion",
                             2, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 1, ROUND((-1) * Rec.Importe),
                             Rec."Documento contabilizacion", vMensa, CuentaVacia, 2, vFecha);
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 0, ROUND((-1) * Rec.Importe),
                             Rec."Documento contabilizacion", vMensa , CuentaVacia, 3,
                             Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 0, rCtas."Cta. compra hotel", 1, ROUND((-1) * Rec.Importe),
                             Rec."Documento contabilizacion", vMensa, rGrup."Cta. hotel intemediacion",
                             3, Rec."Documento contabilizacion");
              ABRContab := TRUE;
            END;
          END;
        // Anticipo A pagar por agencia
        //
        Rec."Tipo anticipo"::"A pagar por agencia(Interm)":
          BEGIN
            IF Rec."Tipo movimiento" = Rec."Tipo movimiento"::Concesion THEN BEGIN
              vFecha := FORMAT(Rec.Fecha,8,Text057);
              vMensa := Text058 + Rec.Hotel;
              LineaDiarioABR(Rec, 0, rCtas."Cta. recuperacion", 0, Rec.Importe, Rec."Documento contabilizacion", vMensa,
                             CuentaVacia, 3, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 1, Rec.Importe, Rec."Documento contabilizacion", vMensa,
                             rGrup."Cta. anticipos intermediacion", 2, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 0, Rec.Importe, Rec."Documento contabilizacion",
                             vMensa, rGrup."Cta. anticipos intermediacion", 3, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 0, rCtas."Cta. anticipos concedidos", 1, Rec.Importe, Rec."Documento contabilizacion",
                             vMensa, CuentaVacia, 2, Rec."Documento contabilizacion");
              ABRContab:=TRUE;
            END
            ELSE BEGIN
              vFecha := FORMAT(Rec.Fecha,8,Text057);
              vMensa := Text059 + Rec.Hotel;
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 0, ROUND((-1) * Rec.Importe), Rec."Documento contabilizacion",
                             vMensa, rGrup."Cta. anticipos intermediacion", 3, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 0, rCtas."Cta. recuperacion", 1, ROUND((-1) * Rec.Importe), Rec."Documento contabilizacion",
                             vMensa, CuentaVacia, 2, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 0, rCtas."Cta. anticipos concedidos", 0, ROUND((-1) * Rec.Importe), Rec."Documento contabilizacion",
                             vMensa, CuentaVacia, 3, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 1, ROUND((-1) * Rec.Importe), Rec."Documento contabilizacion",
                             vMensa, rGrup."Cta. anticipos intermediacion", 2, Rec."Documento contabilizacion");
              ABRContab:=TRUE;
            END;
          END;
        // Anticipo Por cuenta propia
        //
        Rec."Tipo anticipo"::"Por cuenta propia":
          BEGIN
            IF Rec."Tipo movimiento" = Rec."Tipo movimiento"::Concesion THEN BEGIN
              vFecha := FORMAT(Rec.Fecha,8,Text057);
              vMensa := Text058+Rec.Hotel;
              LineaDiarioABR(Rec, 0, rCtas."Cta. recuperacion agencia", 0, Rec.Importe, Rec."Documento contabilizacion",
                             vMensa, CuentaVacia, 2, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 1, Rec.Importe, Rec."Documento contabilizacion",
                             vMensa, rGrup."Cta. anticipos cuenta propia", 2, Rec."Documento contabilizacion");
              ABRContab := TRUE;
            END
            ELSE BEGIN
              vFecha := FORMAT(Rec.Fecha,8,Text057);
              vMensa := Text059 + Rec.Hotel;
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 0, ROUND((-1) * Rec.Importe), Rec."Documento contabilizacion",
                             vMensa, rGrup."Cta. anticipos cuenta propia", 3, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 0, rCtas."Cta. recuperacion agencia", 1, ROUND((-1) * Rec.Importe), Rec."Documento contabilizacion",
                             vMensa, CuentaVacia, 3, Rec."Documento contabilizacion");
              ABRContab := TRUE;
            END;
          END;
      END;
    END;

    PROCEDURE ContaReclamacionABR@21(Rec@1103355000 : Record 7010017);
    BEGIN
      // ContaReclamacionABR
      //
      // Comprobacion cuentas
      //
      IF Rec."Tipo reclamacion" = Rec."Tipo reclamacion"::Intermediacion THEN BEGIN
        IF NOT rPro.GET(rHot."Proveedor Intermediacion") THEN
          ERROR (Text055, rHot."Proveedor Intermediacion", rHot.Hotel);
        IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
          ERROR (Text056, rPro."No.");
      END
      ELSE BEGIN
        IF NOT rPro.GET(rHot."Proveedor Cuenta Propia") THEN
          ERROR (Text055, rHot."Proveedor Cuenta Propia", rHot.Hotel);
        IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
          ERROR (Text056, rPro."No.");
      END;
      // Asientos
      //
      CASE Rec."Tipo reclamacion" OF
        // Reclamacion Cuenta Propia
        //
        Rec."Tipo reclamacion"::"Cuenta propia":
          BEGIN
            vMensa := Text060;
            LineaDiarioABR(Rec, 2, rHot."Proveedor Cuenta Propia", 0, Rec.Importe,
                           Rec."N§ referencia reclamacion", vMensa,
                           rGrup."Cta. hotel cuenta propia", 3, Rec."N§ referencia reclamacion");
            LineaDiarioABR(Rec, 0, rCtas."Cta. reclamaciones agencia", 1, Rec.Importe,
                           Rec."N§ referencia reclamacion", vMensa, CuentaVacia, 3,
                           Rec."N§ referencia reclamacion");
            ABRContab:=TRUE;
          END;
        // Reclamacion Intermediacion
        //
        Rec."Tipo reclamacion"::Intermediacion:
          BEGIN
            vMensa:=Text060;
            LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 0, Rec.Importe,
                           Rec."N§ referencia reclamacion", vMensa,
                           rGrup."Cta. hotel cuenta propia",  3, Rec."N§ referencia reclamacion");
            LineaDiarioABR(Rec, 0, rCtas."Cta. coste agencia", 1, Rec.Importe,
                           Rec."N§ referencia reclamacion", vMensa, CuentaVacia, 3,
                           Rec."N§ referencia reclamacion");
            ABRContab:=TRUE;
          END;
      END;
    END;

    PROCEDURE ContaRectificacionABR@25(Rec@1103355000 : Record 7010017);
    BEGIN
      // ContaRectificacionABR
      //
      // Comprobacion cuentas
      //
      IF Rec."Tipo reclamacion" = Rec."Tipo reclamacion"::Intermediacion THEN BEGIN
        IF NOT rPro.GET(rHot."Proveedor Intermediacion") THEN
          ERROR (Text055, rHot."Proveedor Intermediacion", rHot.Hotel);
        IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
          ERROR (Text056, rPro."No.");
      END
      ELSE BEGIN
        IF NOT rPro.GET(rHot."Proveedor Cuenta Propia") THEN
          ERROR (Text055, rHot."Proveedor Cuenta Propia", rHot.Hotel);
        IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
          ERROR (Text056, rPro."No.");
      END;
      // Asientos
      //
      CASE Rec."Tipo reclamacion" OF
        // Rectificacion de reclamacion Cuenta Propia
        //
        Rec."Tipo reclamacion"::"Cuenta propia":
          BEGIN
            vMensa:=Text060;
            LineaDiarioABR(Rec, 0, rCtas."Cta. reclamaciones agencia", 0, Rec.Importe,
                           Rec."N§ referencia reclamacion", vMensa, CuentaVacia, 3,
                           Rec."N§ referencia reclamacion");
            LineaDiarioABR(Rec, 2, rHot."Proveedor Cuenta Propia", 1, Rec.Importe,
                           Rec."N§ referencia reclamacion", vMensa,
                           rGrup."Cta. hotel cuenta propia", 3, Rec."N§ referencia reclamacion");
            ABRContab:=TRUE;
          END;
        // Rectificacion de reclamacion Intermediacion
        //
        Rec."Tipo reclamacion"::Intermediacion:
          BEGIN
            vMensa := Text060;
            LineaDiarioABR(Rec, 0, rCtas."Cta. coste agencia", 0, Rec.Importe,
                           Rec."N§ referencia reclamacion", vMensa, CuentaVacia, 2,
                           Rec."N§ referencia reclamacion");
            LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 1, Rec.Importe,
                           Rec."N§ referencia reclamacion", vMensa,
                           rGrup."Cta. hotel cuenta propia", 2, Rec."N§ referencia reclamacion");
            ABRContab:=TRUE;
          END;
      END;
    END;

    PROCEDURE ContaColaboracionABR@29(Rec@1103355000 : Record 7010017);
    VAR
      rCodCol@1103355001 : Record 7009721;
    BEGIN
      // ContaColaboracionABR
      //
      vFecha := FORMAT(Rec.Fecha,0,0);
      vMensa := Text061 + Rec.Hotel;
      IF NOT rCodCol.GET(Rec."Codigo colaboracion") THEN
        ERROR(Text062, Rec."Codigo colaboracion");
      IF rCodCol."Cta. Contable" = '' THEN
        ERROR(Text063, Rec."Codigo colaboracion");

      LineaDiarioABR(Rec, 0, rCodCol."Cta. Contable", 0, -Rec.Importe, Rec."Documento contabilizacion",
                     vMensa, CuentaVacia, 2, Rec."Documento contabilizacion");
      IF Rec."Tipo prestamo" = Rec."Tipo prestamo"::Intermediacion THEN
        LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 1, -Rec.Importe, Rec."Documento contabilizacion",
                       vMensa, CuentaVacia, 3, Rec."Documento contabilizacion")
      ELSE
        LineaDiarioABR(Rec, 2, rHot."Proveedor Cuenta Propia", 1, -Rec.Importe, Rec."Documento contabilizacion",
                       vMensa, CuentaVacia, 3, Rec."Documento contabilizacion");
      ABRContab:=TRUE;
    END;

    PROCEDURE ContaPrestamosABR@20(Rec@1103355000 : Record 7010017);
    BEGIN
      // ContaPrestamosABR

      // Comprobacion cuentas

      IF Rec."Tipo prestamo" = Rec."Tipo prestamo"::Intermediacion THEN BEGIN
        IF NOT rPro.GET(rHot."Proveedor Intermediacion") THEN
          ERROR (Text055, rHot."Proveedor Intermediacion", rHot.Hotel);
        IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
          ERROR (Text056, rPro."No.");
      END
      ELSE BEGIN
        IF NOT rPro.GET(rHot."Proveedor Cuenta Propia") THEN
          ERROR (Text055, rHot."Proveedor Cuenta Propia", rHot.Hotel);
        IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
          ERROR (Text056, rPro."No.");
      END;
      // Asientos
      //
      CASE Rec."Tipo prestamo" OF
        // Prestamos intermediaci¢n
        Rec."Tipo prestamo"::Intermediacion:
          BEGIN
            IF Rec."Tipo movimiento" = Rec."Tipo movimiento"::Concesion THEN BEGIN
              vFecha := FORMAT(Rec.Fecha,8,Text057);
              vMensa := Text064;
              LineaDiarioABR(Rec, 0, rCtas."Cta. compra hotel", 0, Rec.Importe, Rec."Documento contabilizacion",
                             vMensa, CuentaVacia, 2, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 1,
                             (Rec.Importe-Rec."Importe intereses"), Rec."Documento contabilizacion", vMensa,
                             rGrup."Cta. anticipos intermediacion", 2, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 0, rCtas."Cta. intereses pendientes", 1, Rec."Importe intereses",
                             Rec."Documento contabilizacion", vMensa, CuentaVacia,
                             2, Rec."Documento contabilizacion");
              ABRContab:=TRUE;
            END
            ELSE BEGIN
              vFecha := FORMAT(Rec.Fecha, 8, Text057);
              vMensa := Text065;
              LineaDiarioABR(Rec, 2, rHot."Proveedor Intermediacion", 0, ROUND((-1) * Rec.Importe), Rec."Documento contabilizacion",
                             vMensa, rGrup."Cta. anticipos intermediacion", 3, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 0, rCtas."Cta. compra hotel", 1, ROUND((-1) * Rec.Importe), Rec."Documento contabilizacion",
                             vMensa, CuentaVacia, 3, Rec."Documento contabilizacion");
              ABRContab:=TRUE;
            END;
          END;
        // Prestamo Cuenta Propia
        //
        Rec."Tipo prestamo"::"Cuenta propia":
          BEGIN
            IF Rec."Tipo movimiento" = Rec."Tipo movimiento"::Concesion THEN BEGIN
              vFecha := FORMAT(Rec.Fecha,8,Text057);
              vMensa := Text064;
              LineaDiarioABR(Rec, 0, rCtas."Cta. anticipos concedidos", 0, Rec.Importe, Rec."Documento contabilizacion",
                             vMensa, CuentaVacia, 2, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 2, rHot."Proveedor Cuenta Propia", 1,
                             (Rec.Importe-Rec."Importe intereses"), Rec."Documento contabilizacion", vMensa,
                             rGrup."Cta. anticipos cuenta propia", 2, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 0, rCtas."Cta. intereses pendientes", 1, Rec."Importe intereses",
                             Rec."Documento contabilizacion", vMensa, CuentaVacia,
                             2, Rec."Documento contabilizacion");
              ABRContab:=TRUE;
            END
            ELSE BEGIN
              vFecha := FORMAT(Rec.Fecha,8,Text057);
              vMensa := Text065;
              LineaDiarioABR(Rec, 2, rHot."Proveedor Cuenta Propia", 0, ROUND((-1) * Rec.Importe), Rec."Documento contabilizacion",
                             vMensa, rGrup."Cta. anticipos cuenta propia", 3, Rec."Documento contabilizacion");
              LineaDiarioABR(Rec, 0, rCtas."Cta. anticipos concedidos", 1, ROUND((-1) * Rec.Importe), Rec."Documento contabilizacion",
                             vMensa, CuentaVacia, 3, Rec."Documento contabilizacion");
              ABRContab:=TRUE;
            END;
          END;
      END;
    END;

    PROCEDURE ContaGarantiaABR@28(Rec@1103355000 : Record 7010017);
    BEGIN
      // ContaGarantiaABR

      // Comprobacion cuentas

      IF (Rec."Tipo garantias" = Rec."Tipo garantias"::"Interm. (ITS)") OR
         (Rec."Tipo garantias" = Rec."Tipo garantias"::"Interm. (ATT)") THEN BEGIN
        IF NOT rPro.GET(rHot."Proveedor Intermediacion") THEN
          ERROR (Text055, rHot."Proveedor Intermediacion", rHot.Hotel);
        IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
          ERROR (Text056, rPro."No.");
      END
      ELSE BEGIN
        IF NOT rPro.GET(rHot."Proveedor Cuenta Propia") THEN
          ERROR (Text055, rHot."Proveedor Cuenta Propia", rHot.Hotel);
        IF NOT rGrup.GET(rPro."Vendor Posting Group") THEN
          ERROR (Text056, rPro."No.");
      END;
      // Asientos
      //
      CASE Rec."Tipo garantias" OF
        // Garantias ITS y ATT
        Rec."Tipo garantias"::"Interm. (ITS)",Rec."Tipo garantias"::"Interm. (ATT)":
          BEGIN
            vFecha := '';
            vMensa := Text066 + Rec.Hotel;
            LineaDiarioABR(Rec, 0, rCtas."Cta. coste agencia", 0, Rec.Importe, Rec."Documento contabilizacion",
                           vMensa, CuentaVacia, 2, Rec."Documento contabilizacion");
            LineaDiarioABR(Rec, 0, rGrup."Cta. FPR hotel intermediacion", 1, Rec.Importe, Rec."Documento contabilizacion",
                           vMensa, CuentaVacia, 2, Rec."Documento contabilizacion");
            w_ult_asiento := w_ult_asiento + 1;
            ABRContab:=TRUE;
          END;
        // Garantia Cuenta Propia
        Rec."Tipo garantias"::"En nombre Propio":
          BEGIN
            vFecha := '';
            vMensa := Text066 + Rec.Hotel;
            LineaDiarioABR(Rec, 0, rCtas."Cta. coste agencia", 0, Rec.Importe, Rec."Documento contabilizacion",
                           vMensa, CuentaVacia, 2, Rec."Documento contabilizacion");
            LineaDiarioABR(Rec, 0, rGrup."Cta. FPR hotel cuenta propia", 1, Rec.Importe, vFecha,
                           vMensa, CuentaVacia, 2, '');
            ABRContab:=TRUE;
          END
      END;
    END;

    PROCEDURE ComprobacionComprobanteFiscal@1103355000(pwNCF@1103355001 : Code[20];pwTipoFacturaCompra@1103355002 : Code[20]) : Boolean;
    VAR
      GLSetup@1103355000 : Record 98;
    BEGIN
      // ComprobacionComprobanteFiscal

      GLSetup.FINDFIRST;
      IF NOT GLSetup."Aplica legislacion NCF" THEN
        EXIT(TRUE);

      IF pwNCF = '' THEN
        EXIT(FALSE);

      IF STRLEN(pwNCF) <> GLSetup."Digitos NCF" THEN
        EXIT(FALSE);

      IF pwTipoFacturaCompra = '' THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE ComprobarNCFRepetido@1103355001(pwVendor@1103355000 : Code[20];pwNCF@1103355001 : Code[20];pwNoDoc@1103355005 : Code[20]) : Boolean;
    VAR
      GLSetup@1103355003 : Record 98;
      lrMov@1103355002 : Record 25;
      lrCabCompra@1103355004 : Record 38;
    BEGIN
      // ComprobarNCFRepetido

      GLSetup.FINDFIRST;
      IF NOT GLSetup."Aplica legislacion NCF" THEN
        EXIT(TRUE);

      lrMov.RESET;
      lrMov.SETCURRENTKEY("Vendor No.");
      lrMov.SETRANGE("Vendor No."        , pwVendor);
      lrMov.SETRANGE("Comprobante Fiscal", pwNCF);
      IF lrMov.FINDFIRST THEN
        EXIT(FALSE);

      lrCabCompra.RESET;
      lrCabCompra.SETRANGE ("Buy-from Vendor No.", pwVendor);
      lrCabCompra.SETRANGE ("Comprobante Fiscal" , pwNCF);
      lrCabCompra.SETFILTER("No."                , '<>%1', pwNoDoc);
      IF lrCabCompra.FINDFIRST THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE ComprobarCodBarrasRegistro@1103355002(pwCodBarras@1103355000 : Code[20]);
    VAR
      lwNomFichero@1103355001 : Text[250];
    BEGIN
      // ComprobarCodBarrasRegistro

      IF pwCodBarras = '' THEN
        ERROR(Text071);

      rPar.FINDFIRST;
      rPar.TESTFIELD("Ruta ficheros PDF");

      lwNomFichero := rPar."Ruta ficheros PDF" + '\'  + pwCodBarras + '.PDF';
      IF NOT EXISTS(lwNomFichero) THEN
        ERROR(Text070);

      // Intentamos mover el fichero para comprobar que no este en uso
    END;

    BEGIN
    {
      $001 JPT GOC-LP-12021 Los asientos negativos de FPR deben ser positivos con debe/haber girados

      $002 AJS 05092012 Busco el diario general a traves de nueva funcion de parametros generales
                        y elimino funciones obsoletas de validacion de facturas

      $003 AJS 22102012 Rellenar el codigo de procedencia en los movimientos de FPR para permitir el estudio por proveedor

      $004 AJS 26082013 Elimino las referencias a la tabla de maestro de claves porque es obsoleta

      $005 AJS 04102103 Marco las lineas de FPR como "Asiento automatico" para que no se puedan borrar

      $006 AJS 19112013 Sustituyo la clave a la hora de buscar el ultimo numero de asiento

      $007 AJS 21072014 Elimino la variable w_nombre_diario porque estaba obsoleta

      $008 AJS 09022015 Rellenar el campo Source code en las lineas de diario

      $009 AJS 07052015 CNT-OC-15134, algunas empresas no registran costes, se traspasan a comercializadora
    }
    END.
  }
}
