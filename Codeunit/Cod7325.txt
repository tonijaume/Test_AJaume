OBJECT Codeunit 7325 Whse.-Output Prod. Release
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Location@1000 : Record 14;
      WhseRqst@1003 : Record 5765;
      ProdOrderLine@1002 : Record 5406;
      WhseRqstCreated@1001 : Boolean;

    PROCEDURE Release@1(ProdHeader@1000 : Record 5405) : Boolean;
    VAR
      LocationCode2@1001 : Code[10];
    BEGIN
      WhseRqstCreated := FALSE;
      IF ProdHeader.Status <> ProdHeader.Status::Released THEN
        EXIT;

      WITH ProdHeader DO BEGIN
        ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.");
        ProdOrderLine.SETRANGE(Status,Status);
        ProdOrderLine.SETRANGE("Prod. Order No.","No.");
        IF ProdOrderLine.FIND('-') THEN
          CreateWhseRqst(ProdOrderLine,ProdHeader);
        REPEAT
          IF ProdOrderLine."Location Code" <> LocationCode2 THEN
            CreateWhseRqst(ProdOrderLine,ProdHeader);
          LocationCode2 := ProdOrderLine."Location Code";
        UNTIL ProdOrderLine.NEXT = 0;
      END;
      EXIT(WhseRqstCreated);
    END;

    PROCEDURE CreateWhseRqst@3(VAR ProdOrderLine@1000 : Record 5406;VAR ProdHeader@1001 : Record 5405);
    VAR
      ProdOrderLine2@1002 : Record 5406;
    BEGIN
      GetLocation(ProdOrderLine."Location Code");
      IF NOT Location."Require Put-away" OR Location."Directed Put-away and Pick" THEN
        EXIT;

      ProdOrderLine2.COPY(ProdOrderLine);
      ProdOrderLine2.SETRANGE("Location Code",ProdOrderLine."Location Code");
      ProdOrderLine2.SETRANGE("Unit of Measure Code",'');
      IF ProdOrderLine2.FIND('-') THEN
        ProdOrderLine2.TESTFIELD("Unit of Measure Code");

      WhseRqst.INIT;
      WhseRqst.Type := WhseRqst.Type::Inbound;
      WhseRqst."Location Code" := ProdOrderLine."Location Code";
      WhseRqst."Source Type" := DATABASE::"Prod. Order Line";
      WhseRqst."Source No." := ProdOrderLine."Prod. Order No.";
      WhseRqst."Source Subtype" := ProdOrderLine.Status;
      WhseRqst."Source Document" := WhseRqst."Source Document"::"Prod. Output";
      WhseRqst."Document Status" := WhseRqst."Document Status"::Released;
      WhseRqst."Completely Handled" :=
        ProdOrderCompletelyHandled(ProdHeader,ProdOrderLine."Location Code");
      CASE ProdHeader."Source Type" OF
        ProdHeader."Source Type"::Item:
          WhseRqst."Destination Type" := WhseRqst."Destination Type"::Item;
        ProdHeader."Source Type"::Family:
          WhseRqst."Destination Type" := WhseRqst."Destination Type"::Family;
        ProdHeader."Source Type"::"Sales Header":
          WhseRqst."Destination Type" := WhseRqst."Destination Type"::"Sales Order";
      END;
      IF NOT WhseRqst.INSERT THEN
          WhseRqst.MODIFY;

      WhseRqstCreated := TRUE;
    END;

    PROCEDURE DeleteLine@4(ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderLine2@1001 : Record 5406;
      KeepWhseRqst@1002 : Boolean;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        KeepWhseRqst := FALSE;
        GetLocation(ProdOrderLine2."Location Code");
        IF Location."Require Put-away" AND (NOT Location."Directed Put-away and Pick") THEN BEGIN
          ProdOrderLine2.RESET;
          ProdOrderLine2.SETRANGE(Status,Status);
          ProdOrderLine2.SETRANGE("Prod. Order No.","Prod. Order No.");
          ProdOrderLine2.SETRANGE("Location Code","Location Code");
          IF ProdOrderLine2.FIND('-') THEN
            REPEAT
              IF ((ProdOrderLine2.Status <> Status) OR
                  (ProdOrderLine2."Prod. Order No." <> "Prod. Order No.") OR
                  (ProdOrderLine2."Line No." <> "Line No.")) AND
                  (ProdOrderLine2."Remaining Quantity" <> 0)
              THEN
                KeepWhseRqst := TRUE;
            UNTIL (ProdOrderLine2.NEXT = 0) OR KeepWhseRqst;
        END;

        IF NOT KeepWhseRqst THEN
          DeleteWhseRqst(ProdOrderLine,FALSE);
      END;
    END;

    PROCEDURE DeleteWhseRqst@10(ProdOrderLine@1000 : Record 5406;DeleteAllWhseRqst@1003 : Boolean);
    VAR
      WhseRqst@1005 : Record 5765;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        WhseRqst.SETRANGE(Type,WhseRqst.Type::Inbound);
        WhseRqst.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
        WhseRqst.SETRANGE("Source No.","Prod. Order No.");
        IF NOT DeleteAllWhseRqst THEN BEGIN
          WhseRqst.SETRANGE("Source Subtype",Status);
          WhseRqst.SETRANGE("Location Code","Location Code");
        END;
        WhseRqst.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE FinishedDelete@6(VAR ProdHeader@1000 : Record 5405);
    BEGIN
      WITH ProdHeader DO BEGIN
        ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.");
        ProdOrderLine.SETRANGE(Status,Status);
        ProdOrderLine.SETRANGE("Prod. Order No.","No.");
        IF ProdOrderLine.FIND('-') THEN BEGIN
          DeleteWhseRqst(ProdOrderLine,TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE ProdOrderCompletelyHandled@9(ProdOrder@1000 : Record 5405;LocationCode@1001 : Code[10]) : Boolean;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
      ProdOrderLine.SETRANGE("Location Code",LocationCode);
      ProdOrderLine.SETFILTER("Remaining Quantity",'<>0');
      EXIT(NOT ProdOrderLine.FIND('-'));
    END;

    LOCAL PROCEDURE GetLocation@8(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode <> Location.Code THEN BEGIN
        IF LocationCode = '' THEN
          Location.GetLocationSetup(LocationCode,Location)
        ELSE
          Location.GET(LocationCode);
      END;
    END;

    PROCEDURE CheckWhseRqst@2(ProdHeader@1000 : Record 5405) : Boolean;
    VAR
      ProdOrderLine2@1001 : Record 5406;
    BEGIN
      WhseRqstCreated := TRUE;
      WITH ProdHeader DO BEGIN
        ProdOrderLine2.SETCURRENTKEY(Status,"Prod. Order No.");
        ProdOrderLine2.SETRANGE(Status,Status);
        ProdOrderLine2.SETRANGE("Prod. Order No.","No.");
        IF ProdOrderLine2.FIND('-') THEN BEGIN
          REPEAT
            GetLocation(ProdOrderLine2."Location Code");
            IF NOT Location."Require Put-away" OR Location."Directed Put-away and Pick" THEN
              WhseRqstCreated := FALSE;
            IF Location."Require Put-away" THEN BEGIN
              IF NOT WhseRqst.GET(
                WhseRqst.Type::Inbound,
                ProdOrderLine2."Location Code",
                DATABASE::"Prod. Order Line",
                ProdOrderLine2.Status,
                ProdOrderLine2."Prod. Order No.")
              THEN
                WhseRqstCreated := FALSE;
            END;
          UNTIL (ProdOrderLine2.NEXT = 0) OR NOT WhseRqstCreated;
        END;
      END;
      EXIT(WhseRqstCreated);
    END;

    BEGIN
    END.
  }
}
