OBJECT Codeunit 5055260 LiqAccountScheduleManagement
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=LIQEM5.00;
  }
  PROPERTIES
  {
    TableNo=5055262;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text1140000@1140000 : TextConst 'ENU=DEFAULT;ESP=GENERICO';
      Text1140001@1140001 : TextConst 'ENU=Default Schedule;ESP=Previsi¢n gen‚r.';
      Text1140002@1140002 : TextConst 'ENU=Default Columns;ESP=Columnas gen‚r.';
      Text1140003@1140003 : TextConst 'ENU=-1Y;ESP=-1A';
      Text1140004@1140004 : TextConst 'ENU=CM;ESP=PM';
      Text1140005@1140005 : TextConst 'ENU=M;ESP=M';
      Text1140006@1140006 : TextConst 'ENU=Q;ESP=T';
      Text1140007@1140007 : TextConst 'ENU=Y;ESP=A';
      Text1140008@1140008 : TextConst 'ENU=-1D;ESP=-1D';
      Text1140009@1140009 : TextConst 'ENU=+1D;ESP=+1D';
      Text1140010@1140010 : TextConst 'ENU=+1Y-1D;ESP=+1A-1D';
      Text1140011@1140011 : TextConst 'ENU=Because of circular references, the application cannot calculate a formula.;ESP=La aplicaci¢n no puede calcular la f¢rmula debido a las referencias circulares.';
      Text1140012@1140012 : TextConst 'ENU=You have entered an illegal value or a nonexistent row number.;ESP=Ha introducido un valor incorrecto o un n£mero de fila inexistente.';
      Text1140013@1140013 : TextConst 'ENU=You have entered an illegal value or a nonexistent column number.;ESP=Ha introducido un valor incorrecto o un n£mero de columna inexistente.';
      Text1140014@1140014 : TextConst 'ENU=<Precision,;ESP=<Precision,';
      Text1140015@1140015 : TextConst 'ENU=><Standard Format,0>;ESP=><Standard Format,0>';
      Text1140016@1140016 : TextConst 'ENU=<Precision,1><Standard Format,0>;ESP=<Precision,1><Standard Format,0>';
      Text1140017@1140017 : TextConst 'ENU=The error occurred when the program tried to calculate:\;ESP=Se ha producido un error al realizar el siguiente c lculo:\';
      Text1140018@1140018 : TextConst 'ENU="Acc. Sched. Line: Row No. = %1, Line No. = %2, Totaling = %3\";ESP="L¡n. esq. cta.: N§ fila = %1, N§ l¡nea = %2, Total = %3\"';
      Text1140019@1140019 : TextConst 'ENU="Acc. Sched. Column: Column No. = %4, Line No. = %5, Formula  = %6";ESP="Col. esq. cta.: N§ columna = %4, N§ l¡nea = %5, F¢rmula  = %6"';
      Text1140020@1140020 : TextConst 'ENU=Conversion of dimension totaling filter %1 results in a filter that becomes too long.;ESP=La conversi¢n del total del filtro de dimensi¢n %1 pasa a ser un filtro demasiado largo.';
      Text1140042@1140042 : TextConst 'ENU=You cannot have more than %1 lines with %2 of %3.;ESP=No se pueden tener m s de %1 l¡neas con %2 de %3.';
      Text1140043@1140043 : TextConst 'ENU=Formulas ending with a percent sign require %2 %1 on a line before it.;ESP=Las f¢rmulas que terminan con un signo de porcentaje requieren que %2 %1 se incluya en la l¡nea anterior.';
      Text1140044@1140044 : TextConst 'ENU=The %1 %3 on the %2 must equal the %4 %6 on the %5 when any Dimension Totaling is used in any Column.;ESP=%1 %3 en %2 debe ser igual a %4 %6 en %5 cuando se utiliza un sumatorio de dimensiones en cualquier columna.';
      LiqAccSchedName@1140021 : Record 5055261;
      LiqAccountSchedLine@1140022 : Record 5055262;
      LiqAccSchedCellValue@1140023 : TEMPORARY Record 5055265;
      LiquidityAnalysisView@1140024 : Record 5055269;
      GLSetup@1140025 : Record 98;
      LiqAccScheduleLayoutName@1140045 : Record 5055263;
      AnalysisViewRead@1140026 : Boolean;
      StartDate@1140027 : Date;
      EndDate@1140028 : Date;
      FiscalStartDate@1140029 : Date;
      DivisionError@1140030 : Boolean;
      PeriodError@1140031 : Boolean;
      CallLevel@1140032 : Integer;
      CallLiqAccSchedLineID@1140033 : Integer;
      CallLiqAccSchedColumnID@1140034 : Integer;
      BasePercentLine@1140046 : ARRAY [50] OF Integer;
      OldLiqAccSchedLineFilter@1140035 : Text[250];
      OldLiqAccSchedColumnFilter@1140036 : Text[250];
      OldLiqAccSchedLineName@1140037 : Code[10];
      OldLiqAccSchedColumnName@1140038 : Code[10];
      NormalFormatString@1140039 : Text[80];
      NormalPrecision@1140040 : Decimal;
      GLSetupRead@1140041 : Boolean;

    PROCEDURE OpenSchedule@1140000(VAR CurrentSchedName@1140000 : Code[10];VAR LiqAccSchedLine@1140001 : Record 5055262);
    BEGIN
      CheckTemplateName(CurrentSchedName);
      LiqAccSchedLine.FILTERGROUP(2);
      LiqAccSchedLine.SETRANGE("Schedule Name",CurrentSchedName);
      LiqAccSchedLine.FILTERGROUP(0);
    END;

    PROCEDURE CheckTemplateName@1140001(VAR CurrentSchedName@1140000 : Code[10]);
    VAR
      LiqAccSchedName@1140001 : Record 5055261;
    BEGIN
      IF NOT LiqAccSchedName.GET(CurrentSchedName) THEN BEGIN
        IF NOT LiqAccSchedName.FIND('-') THEN BEGIN
          LiqAccSchedName.INIT;
          LiqAccSchedName.Name := Text1140000;
          LiqAccSchedName.Description := Text1140001;
          LiqAccSchedName.INSERT;
          COMMIT;
        END;
        CurrentSchedName := LiqAccSchedName.Name;
      END;
    END;

    PROCEDURE CheckName@1140002(CurrentSchedName@1140000 : Code[10]);
    VAR
      LiqAccSchedName@1140001 : Record 5055261;
    BEGIN
      LiqAccSchedName.GET(CurrentSchedName);
    END;

    PROCEDURE SetName@1140003(CurrentSchedName@1140000 : Code[10];VAR LiqAccSchedLine@1140001 : Record 5055262);
    BEGIN
      LiqAccSchedLine.FILTERGROUP(2);
      LiqAccSchedLine.SETRANGE("Schedule Name",CurrentSchedName);
      LiqAccSchedLine.FILTERGROUP(0);
      IF LiqAccSchedLine.FIND('-') THEN;
    END;

    PROCEDURE LookupName@1140004(CurrentSchedName@1140000 : Code[10];VAR EntrdSchedName@1140001 : Text[10]) : Boolean;
    VAR
      LiqAccSchedName@1140002 : Record 5055261;
    BEGIN
      LiqAccSchedName.Name := CurrentSchedName;
      IF FORM.RUNMODAL(0,LiqAccSchedName) <> ACTION::LookupOK THEN
        EXIT(FALSE);

      EntrdSchedName := LiqAccSchedName.Name;
      EXIT(TRUE);
    END;

    PROCEDURE OpenColumns@1140005(VAR CurrentColumnName@1140000 : Code[10];VAR LiqAccSchedColumn@1140001 : Record 5055264);
    BEGIN
      CheckColumnTemplateName(CurrentColumnName);
      LiqAccSchedColumn.FILTERGROUP(2);
      LiqAccSchedColumn.SETRANGE("Column Layout Name",CurrentColumnName);
      LiqAccSchedColumn.FILTERGROUP(0);
    END;

    PROCEDURE CheckColumnTemplateName@1140006(VAR CurrentColumnName@1140000 : Code[10]);
    VAR
      LiqAccScheduleLayoutName@1140001 : Record 5055263;
    BEGIN
      IF NOT LiqAccScheduleLayoutName.GET(CurrentColumnName) THEN BEGIN
        IF NOT LiqAccScheduleLayoutName.FIND('-') THEN BEGIN
          LiqAccScheduleLayoutName.INIT;
          LiqAccScheduleLayoutName.Name := Text1140000;
          LiqAccScheduleLayoutName.Description := Text1140002;
          LiqAccScheduleLayoutName.INSERT;
          COMMIT;
        END;
        CurrentColumnName := LiqAccScheduleLayoutName.Name;
      END;
    END;

    PROCEDURE CheckColumnName@1140007(CurrentColumnName@1140000 : Code[10]);
    VAR
      LiqAccScheduleLayoutName@1140001 : Record 5055263;
    BEGIN
      LiqAccScheduleLayoutName.GET(CurrentColumnName);
    END;

    PROCEDURE SetColumnName@1140008(CurrentColumnName@1140000 : Code[10];VAR LiqAccSchedColumn@1140001 : Record 5055264);
    BEGIN
      LiqAccSchedColumn.FILTERGROUP(2);
      LiqAccSchedColumn.SETRANGE("Column Layout Name",CurrentColumnName);
      LiqAccSchedColumn.FILTERGROUP(0);
      IF LiqAccSchedColumn.FIND('-') THEN;
    END;

    PROCEDURE CopyColumnsToTemp@1140009(NewColumnName@1140000 : Code[10];VAR TmpLiqAccSchedColumn@1140001 : Record 5055264);
    VAR
      LiqAccSchedColumn@1140002 : Record 5055264;
    BEGIN
      TmpLiqAccSchedColumn.DELETEALL;
      LiqAccSchedColumn.SETRANGE("Column Layout Name",NewColumnName);
      IF LiqAccSchedColumn.FIND('-') THEN
        REPEAT
          TmpLiqAccSchedColumn := LiqAccSchedColumn;
          TmpLiqAccSchedColumn.INSERT;
        UNTIL LiqAccSchedColumn.NEXT = 0;
      IF TmpLiqAccSchedColumn.FIND('-') THEN;
    END;

    PROCEDURE LookupColumnName@1140010(CurrentColumnName@1140000 : Code[10];VAR EntrdColumnName@1140001 : Text[10]) : Boolean;
    VAR
      LiqAccScheduleLayoutName@1140002 : Record 5055263;
    BEGIN
      LiqAccScheduleLayoutName.Name := CurrentColumnName;
      IF FORM.RUNMODAL(0,LiqAccScheduleLayoutName) <> ACTION::LookupOK THEN
        EXIT(FALSE);

      EntrdColumnName := LiqAccScheduleLayoutName.Name;
      EXIT(TRUE);
    END;

    PROCEDURE FindFiscalYear@1140011(BalanceDate@1140000 : Date) : Date;
    VAR
      AccountingPeriod@1140001 : Record 50;
      FiscalStartDate@1140002 : Date;
    BEGIN
      AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
      AccountingPeriod.SETRANGE("Starting Date",0D,BalanceDate);
      IF AccountingPeriod.FIND('+') THEN
        EXIT(AccountingPeriod."Starting Date");
      AccountingPeriod.RESET;
      AccountingPeriod.FIND('-');
      EXIT(AccountingPeriod."Starting Date");
    END;

    LOCAL PROCEDURE FindEndOfFiscalYear@1140012(BalanceDate@1140000 : Date) : Date;
    VAR
      AccountingPeriod@1140001 : Record 50;
    BEGIN
      AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
      AccountingPeriod.SETFILTER("Starting Date",'>%1',FindFiscalYear(BalanceDate));
      IF AccountingPeriod.FIND('-') THEN
        EXIT((CALCDATE('<-1D>',AccountingPeriod."Starting Date")));
      EXIT((31129999D));
    END;

    LOCAL PROCEDURE AccPeriodStartEnd@1140013(Formula@1140000 : Code[20];Date@1140001 : Date;VAR StartDate@1140002 : Date;VAR EndDate@1140003 : Date);
    VAR
      LiqAccountScheduleColumn@1140004 : Record 5055264;
      AccountingPeriod@1140005 : Record 50;
      AccountingPeriodFY@1140006 : Record 50;
      Steps@1140007 : Integer;
      ActualSteps@1140008 : Integer;
      Type@1140009 : ' ,Period,Fiscal year,Fiscal Halfyear,Fiscal Quarter';
      CurrentPeriodNo@1140010 : Integer;
      RangeFromType@1140011 : 'Int,CP,LP';
      RangeToType@1140012 : 'Int,CP,LP';
      RangeFromInt@1140013 : Integer;
      RangeToInt@1140014 : Integer;
    BEGIN
      IF Formula = '' THEN
        EXIT;

      LiqAccountScheduleColumn.ParsePeriodFormula(
        Formula,Steps,Type,RangeFromType,RangeToType,RangeFromInt,RangeToInt);

      // Find current period
      AccountingPeriod.SETFILTER("Starting Date",'<=%1',Date);
      IF NOT AccountingPeriod.FIND('+') THEN BEGIN
        AccountingPeriod.RESET;
        IF Steps < 0 THEN
          AccountingPeriod.FIND('-')
        ELSE
          AccountingPeriod.FIND('+')
      END;
      AccountingPeriod.RESET;

      CASE Type OF
        Type::Period:
          BEGIN
            IF AccountingPeriod.NEXT(Steps) <> Steps THEN
              PeriodError := TRUE;
            StartDate := AccountingPeriod."Starting Date";
            EndDate := AccPeriodEndDate(StartDate);
          END;
        Type::"Fiscal year":
          BEGIN
            AccountingPeriodFY := AccountingPeriod;
            WHILE NOT AccountingPeriodFY."New Fiscal Year" DO
              IF AccountingPeriodFY.FIND('<') THEN
                CurrentPeriodNo += 1
              ELSE
                AccountingPeriodFY."New Fiscal Year" := TRUE;
            AccountingPeriodFY.SETRANGE("New Fiscal Year",TRUE);
            AccountingPeriodFY.NEXT(Steps);

            AccPeriodStartOrEnd(AccountingPeriodFY,CurrentPeriodNo,RangeFromType,RangeFromInt,FALSE,StartDate);
            AccPeriodStartOrEnd(AccountingPeriodFY,CurrentPeriodNo,RangeToType,RangeToInt,TRUE,EndDate);
          END;
      END;
    END;

    LOCAL PROCEDURE AccPeriodEndDate@1140014(StartDate@1140000 : Date) : Date;
    VAR
      AccountingPeriod@1140001 : Record 50;
    BEGIN
      AccountingPeriod."Starting Date" := StartDate;
      IF AccountingPeriod.FIND('>') THEN
        EXIT(AccountingPeriod."Starting Date" - 1);
      EXIT(31129999D);
    END;

    LOCAL PROCEDURE AccPeriodGetPeriod@1140015(VAR AccountingPeriod@1140000 : Record 50;AccPeriodNo@1140001 : Integer) : Date;
    BEGIN
      CASE TRUE OF
        AccPeriodNo > 0:
          BEGIN
            AccountingPeriod.NEXT(AccPeriodNo);
            EXIT;
          END;
        AccPeriodNo = 0:
          EXIT;
        AccPeriodNo < 0:
          BEGIN
            AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
            IF NOT AccountingPeriod.FIND('>') THEN BEGIN
              AccountingPeriod.RESET;
              AccountingPeriod.FIND('+');
              EXIT;
            END;
            AccountingPeriod.RESET;
            AccountingPeriod.FIND('<');
            EXIT;
          END;
      END;
    END;

    LOCAL PROCEDURE AccPeriodStartOrEnd@1140016(AccountingPeriod@1140000 : Record 50;CurrentPeriodNo@1140001 : Integer;RangeType@114002 : 'Int,CP,LP';RangeInt@1140003 : Integer;EndDate@1140004 : Boolean;VAR Date@1140005 : Date);
    BEGIN
      CASE RangeType OF
        RangeType::CP:
          AccPeriodGetPeriod(AccountingPeriod,CurrentPeriodNo);
        RangeType::LP:
          AccPeriodGetPeriod(AccountingPeriod,-1);
        RangeType::Int:
          AccPeriodGetPeriod(AccountingPeriod,RangeInt - 1);
      END;
      IF EndDate THEN
        Date := AccPeriodEndDate(AccountingPeriod."Starting Date")
      ELSE
        Date := AccountingPeriod."Starting Date";
    END;

    PROCEDURE CalcCell@1140017(VAR LiqAccSchedLine@1140000 : Record 5055262;VAR LiqAccSchedColumn@1140001 : Record 5055264) : Decimal;
    VAR
      Result@1140002 : Decimal;
    BEGIN
      LiqAccountSchedLine.COPYFILTERS(LiqAccSchedLine);
      StartDate := LiqAccountSchedLine.GETRANGEMIN("Date Filter");
      IF EndDate <> LiqAccountSchedLine.GETRANGEMAX("Date Filter") THEN BEGIN
        EndDate := LiqAccountSchedLine.GETRANGEMAX("Date Filter");
        FiscalStartDate := FindFiscalYear(EndDate);
      END;
      DivisionError := FALSE;
      PeriodError := FALSE;
      CallLevel := 0;
      CallLiqAccSchedLineID := LiqAccSchedLine."Line No.";
      CallLiqAccSchedColumnID := LiqAccSchedColumn."Line No.";

      IF (OldLiqAccSchedLineFilter <> LiqAccSchedLine.GETFILTERS) OR
         (OldLiqAccSchedColumnFilter <> LiqAccSchedColumn.GETFILTERS) OR
         (OldLiqAccSchedLineName <> LiqAccSchedLine."Schedule Name") OR
         (OldLiqAccSchedColumnName <> LiqAccSchedColumn."Column Layout Name")
      THEN BEGIN
        LiqAccSchedCellValue.RESET;
        LiqAccSchedCellValue.DELETEALL;
        CLEAR(BasePercentLine);
        OldLiqAccSchedLineFilter := LiqAccSchedLine.GETFILTERS;
        OldLiqAccSchedColumnFilter := LiqAccSchedColumn.GETFILTERS;
        OldLiqAccSchedLineName := LiqAccSchedLine."Schedule Name";
        OldLiqAccSchedColumnName := LiqAccSchedColumn."Column Layout Name";
      END;

      Result := CalcCellValue(LiqAccSchedLine,LiqAccSchedColumn);
      WITH LiqAccSchedColumn DO BEGIN
        CASE Show OF
          Show::"When Positive" :
            IF Result < 0 THEN
              Result := 0;
          Show::"When Negative" :
            IF Result > 0 THEN
              Result := 0;
        END;
        IF "Show Opposite Sign" THEN
          Result := -Result;
      END;
      IF LiqAccSchedLine."Show Opposite Sign" THEN
        Result := -Result;
      EXIT(Result);
    END;

    PROCEDURE CalcCellValue@1140018(LiqAccSchedLine@1140000 : Record 5055262;LiqAccSchedColumn@1140001 : Record 5055264) : Decimal;
    VAR
      Result@1140002 : Decimal;
      LiqAcc@1140003 : Record 5055251;
    BEGIN
      Result := 0;
      IF LiqAccSchedLine.Totaling <> '' THEN
        IF LiqAccSchedCellValue.GET(LiqAccSchedLine."Line No.",LiqAccSchedColumn."Line No.") THEN BEGIN
          Result := LiqAccSchedCellValue.Value;
          DivisionError := DivisionError OR LiqAccSchedCellValue.Error;
          PeriodError := PeriodError OR LiqAccSchedCellValue."Period Error";
        END ELSE BEGIN
          IF LiqAccSchedColumn."Column Type" = LiqAccSchedColumn."Column Type"::Formula THEN
            Result := EvaluateExpression(FALSE, LiqAccSchedColumn.Formula, LiqAccSchedLine, LiqAccSchedColumn)
          ELSE
            IF LiqAccSchedLine."Totaling Type" IN
              [LiqAccSchedLine."Totaling Type"::Formula,LiqAccSchedLine."Totaling Type"::"Set Base For Percent"]
            THEN
              Result := EvaluateExpression(TRUE, LiqAccSchedLine.Totaling, LiqAccSchedLine, LiqAccSchedColumn)
            ELSE IF (StartDate = 0D) OR (EndDate = 0D) OR (EndDate = 31129999D) THEN BEGIN
              Result := 0;
              PeriodError := TRUE;
            END ELSE BEGIN
              LiqAccSchedLine.COPYFILTERS(LiqAccountSchedLine);
              SetLiqAccRowFilter(LiqAcc,LiqAccSchedLine);
              SetLiqAccColumnFilter(LiqAcc,LiqAccSchedLine,LiqAccSchedColumn);
             IF (LiqAccSchedLine."Totaling Type" = LiqAccSchedLine."Totaling Type"::"Posting Accounts") AND
                (STRLEN(LiqAccSchedLine.Totaling) <= 30)
             THEN BEGIN
               LiqAcc."Account Type" := LiqAcc."Account Type"::Total;
               LiqAcc.Totaling := LiqAccSchedLine.Totaling;
               Result := Result + CalcLiqAccount(LiqAcc,LiqAccSchedLine,LiqAccSchedColumn);
             END ELSE
              IF LiqAcc.FIND('-') THEN
                REPEAT
                  Result := Result + CalcLiqAccount(LiqAcc,LiqAccSchedLine,LiqAccSchedColumn);
                UNTIL LiqAcc.NEXT = 0;
            END;

          LiqAccSchedCellValue."Row No." := LiqAccSchedLine."Line No.";
          LiqAccSchedCellValue."Column No." := LiqAccSchedColumn."Line No.";
          LiqAccSchedCellValue.Value := Result;
          LiqAccSchedCellValue.Error := DivisionError;
          LiqAccSchedCellValue."Period Error" := PeriodError;
          LiqAccSchedCellValue.INSERT;
        END;
      EXIT(Result);
    END;

    PROCEDURE CalcLiqAccount@1140019(VAR LiqAcc@1140000 : Record 5055251;VAR LiqAccountScheduleLine@1140001 : Record 5055262;VAR LiqAccountScheduleColumn2@1140002 : Record 5055264) ColValue@1140003 : Decimal;
    VAR
      LiquidityLedgerEntry@1140004 : Record 5055257;
      LiquidityAnalysisViewEntry@1140005 : Record 5055271;
      FromDate@1140006 : Date;
      ToDate@1140007 : Date;
      FiscalStartDate2@1140008 : Date;
      AmountType@1140009 : 'Net Amount,Debit Amount,Credit Amount';
      TestBalance@1140010 : Boolean;
      Balance@1140011 : Decimal;
      UseBusUnitFilter@1140012 : Boolean;
      UseDimFilter@1140013 : Boolean;
    BEGIN
      ColValue := 0;
      IF LiqAccSchedName.Name <> LiqAccountScheduleLine."Schedule Name" THEN
        LiqAccSchedName.GET(LiqAccountScheduleLine."Schedule Name");
      AmountType :=  LiqAccountScheduleColumn2."Amount Type";
      CASE LiqAccountScheduleLine."Amount Type" OF
        LiqAccountScheduleLine."Amount Type"::"Debit Amount":
          CASE AmountType OF
            AmountType::"Net Amount":
              AmountType := AmountType::"Debit Amount";
            AmountType::"Credit Amount":
              EXIT(0);
          END;
        LiqAccountScheduleLine."Amount Type"::"Credit Amount":
          CASE AmountType OF
            AmountType::"Net Amount":
              AmountType := AmountType::"Credit Amount";
            AmountType::"Debit Amount":
              EXIT(0);
          END;
      END;
      TestBalance :=
        LiqAccountScheduleLine.Show IN [LiqAccountScheduleLine.Show::"When Positive Balance",
                                        LiqAccountScheduleLine.Show::"When Negative Balance"];
      IF LiqAccountScheduleColumn2."Column Type" <> LiqAccountScheduleColumn2."Column Type"::Formula THEN BEGIN
        UseDimFilter :=
          (LiqAccountScheduleLine."Dimension 1 Totaling" <> '') OR
          (LiqAccountScheduleLine."Dimension 2 Totaling" <> '') OR
          (LiqAccountScheduleLine."Dimension 3 Totaling" <> '') OR
          (LiqAccountScheduleLine."Dimension 4 Totaling" <> '') OR
          (LiqAccountScheduleLine.GETFILTER("Dimension 1 Filter") <> '') OR
          (LiqAccountScheduleLine.GETFILTER("Dimension 2 Filter") <> '') OR
          (LiqAccountScheduleLine.GETFILTER("Dimension 3 Filter") <> '') OR
          (LiqAccountScheduleLine.GETFILTER("Dimension 4 Filter") <> '') OR
          (LiqAccountScheduleColumn2."Dimension 1 Totaling" <> '') OR
          (LiqAccountScheduleColumn2."Dimension 2 Totaling" <> '') OR
          (LiqAccountScheduleColumn2."Dimension 3 Totaling" <> '') OR
          (LiqAccountScheduleColumn2."Dimension 4 Totaling" <> '');
        CASE LiqAccountScheduleColumn2."Entry Type" OF
          LiqAccountScheduleColumn2."Entry Type"::"Liquidity Ledger Entry" :
            BEGIN
              IF LiqAccSchedName."Liq. Analysis View Name" = '' THEN
                WITH LiquidityLedgerEntry DO BEGIN
                  SETCURRENTKEY(
                     "Liquidity Account No.","Liquidity No.","Global Dimension 1 Code",
                     "Global Dimension 2 Code","Liquidity Date");
                  IF LiqAcc.Totaling = '' THEN
                    SETRANGE("Liquidity Account No.",LiqAcc."No.")
                  ELSE
                    SETFILTER("Liquidity Account No.",LiqAcc.Totaling);
                  LiqAcc.COPYFILTER("Date Filter","Liquidity Date");
                  LiqAccountScheduleLine.COPYFILTER("Liquidity Filter","Liquidity No.");
                  LiqAccountScheduleLine.COPYFILTER("Dimension 1 Filter","Global Dimension 1 Code");
                  LiqAccountScheduleLine.COPYFILTER("Dimension 2 Filter","Global Dimension 2 Code");
                  FILTERGROUP(2);
                  SETFILTER("Global Dimension 1 Code",LiqAccountScheduleLine."Dimension 1 Totaling");
                  SETFILTER("Global Dimension 2 Code",LiqAccountScheduleLine."Dimension 2 Totaling");
                  FILTERGROUP(6);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,LiqAccountScheduleColumn2."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,LiqAccountScheduleColumn2."Dimension 2 Totaling"));
                  FILTERGROUP(0);
                  CASE LiqAccountScheduleColumn2."Amount Type" OF
                    LiqAccountScheduleColumn2."Amount Type"::Amount :
                      BEGIN
                        CALCSUMS(Amount);
                        ColValue := Amount;
                      END;
                  END;
                END
              ELSE
                WITH LiquidityAnalysisViewEntry DO BEGIN
                  SETRANGE("Analysis View Code",LiqAccSchedName."Liq. Analysis View Name");
                  IF LiqAcc.Totaling = '' THEN
                    SETRANGE("Liquidity Account No.",LiqAcc."No.")
                  ELSE
                    SETFILTER("Liquidity Account No.",LiqAcc.Totaling);
                  LiqAcc.COPYFILTER("Date Filter","Liquidity Date");
                  LiqAccountScheduleLine.COPYFILTER("Liquidity Filter","Liquidity No.");
                  LiqAccountScheduleLine.COPYFILTER("Dimension 1 Filter","Dimension 1 Value Code");
                  LiqAccountScheduleLine.COPYFILTER("Dimension 2 Filter","Dimension 2 Value Code");
                  LiqAccountScheduleLine.COPYFILTER("Dimension 3 Filter","Dimension 3 Value Code");
                  LiqAccountScheduleLine.COPYFILTER("Dimension 4 Filter","Dimension 4 Value Code");
                  FILTERGROUP(2);
                  SETFILTER("Dimension 1 Value Code",GetDimTotalingFilter(1,LiqAccountScheduleLine."Dimension 1 Totaling"));
                  SETFILTER("Dimension 2 Value Code",GetDimTotalingFilter(2,LiqAccountScheduleLine."Dimension 2 Totaling"));
                  SETFILTER("Dimension 3 Value Code",GetDimTotalingFilter(3,LiqAccountScheduleLine."Dimension 3 Totaling"));
                  SETFILTER("Dimension 4 Value Code",GetDimTotalingFilter(4,LiqAccountScheduleLine."Dimension 4 Totaling"));
                  FILTERGROUP(6);
                  SETFILTER("Dimension 1 Value Code",GetDimTotalingFilter(1,LiqAccountScheduleColumn2."Dimension 1 Totaling"));
                  SETFILTER("Dimension 2 Value Code",GetDimTotalingFilter(2,LiqAccountScheduleColumn2."Dimension 2 Totaling"));
                  SETFILTER("Dimension 3 Value Code",GetDimTotalingFilter(3,LiqAccountScheduleColumn2."Dimension 3 Totaling"));
                  SETFILTER("Dimension 4 Value Code",GetDimTotalingFilter(4,LiqAccountScheduleColumn2."Dimension 4 Totaling"));
                  FILTERGROUP(0);

                  CASE LiqAccountScheduleColumn2."Amount Type" OF
                     LiqAccountScheduleColumn2."Amount Type"::Amount :
                      BEGIN
                        CALCSUMS(Amount);
                        ColValue := Amount;
                      END;
                  END;
                END;
            END;
        END;
        IF TestBalance THEN BEGIN
          IF LiqAccountScheduleLine.Show = LiqAccountScheduleLine.Show::"When Positive Balance" THEN
            IF Balance < 0 THEN
              EXIT(0);
          IF LiqAccountScheduleLine.Show = LiqAccountScheduleLine.Show::"When Negative Balance" THEN
            IF Balance > 0 THEN
              EXIT(0);
        END;
      END;
      EXIT(ColValue);
    END;

    PROCEDURE SetLiqAccRowFilter@1140020(VAR LiqAcc@1140000 : Record 5055251;VAR LiqAccSchedLine2@1140001 : Record 5055262);
    VAR
      FromDate@1140002 : Date;
      ToDate@1140003 : Date;
      FiscalStartDate2@1140004 : Date;
    BEGIN
      WITH LiqAccSchedLine2 DO BEGIN
        COPYFILTER("Liquidity Filter",LiqAcc."Liquidity Filter");

        CASE "Totaling Type" OF
          "Totaling Type"::"Posting Accounts":
          BEGIN
            LiqAcc.SETFILTER("No.",Totaling);
            LiqAcc.SETRANGE("Account Type",LiqAcc."Account Type"::Posting);
          END;
          "Totaling Type"::"Total Accounts":
          BEGIN
            LiqAcc.SETFILTER("No.",Totaling);
            LiqAcc.SETFILTER("Account Type",'<>%1',LiqAcc."Account Type"::Posting);
          END;
        END;
      END;
    END;

    PROCEDURE SetLiqAccColumnFilter@1140021(VAR LiqAcc@1140000 : Record 5055251;LiqAccSchedLine2@1140005 : Record 5055262;VAR LiqAccountScheduleColumn2@1140001 : Record 5055264);
    VAR
      FromDate@1140002 : Date;
      ToDate@1140003 : Date;
      FiscalStartDate2@1140004 : Date;
    BEGIN
      WITH LiqAccountScheduleColumn2 DO BEGIN
        IF (FORMAT("Comparison Date Formula") <> '0') AND (FORMAT("Comparison Date Formula") <> '') THEN BEGIN
          FromDate := CALCDATE("Comparison Date Formula",StartDate);
          IF (EndDate = CALCDATE(Text1140004,EndDate)) AND
             ((STRPOS(FORMAT("Comparison Date Formula"),Text1140005) > 0) OR
              (STRPOS(FORMAT("Comparison Date Formula"),Text1140006) > 0) OR
              (STRPOS(FORMAT("Comparison Date Formula"),Text1140007) > 0))
          THEN
            ToDate := CALCDATE(Text1140004,CALCDATE("Comparison Date Formula",EndDate))
          ELSE
            ToDate := CALCDATE("Comparison Date Formula",EndDate);
          FiscalStartDate2 := FindFiscalYear(ToDate);
        END ELSE IF "Comparison Period Formula" <> '' THEN BEGIN
          AccPeriodStartEnd("Comparison Period Formula",StartDate,FromDate,ToDate);
          FiscalStartDate2 := FindFiscalYear(ToDate);
        END ELSE BEGIN
          FromDate := StartDate;
          ToDate := EndDate;
          FiscalStartDate2 := FiscalStartDate;
        END;
        CASE "Column Type" OF
          "Column Type"::"Net Change" :
            CASE LiqAccSchedLine2."Row Type" OF
              LiqAccSchedLine2."Row Type"::"Net Change":
                LiqAcc.SETRANGE("Date Filter",FromDate,ToDate);
              LiqAccSchedLine2."Row Type"::"Beginning Balance":
                LiqAcc.SETFILTER("Date Filter",'<%1',FromDate);
              LiqAccSchedLine2."Row Type"::"Balance at Date":
                LiqAcc.SETRANGE("Date Filter",0D,ToDate);
            END;
          "Column Type"::"Balance at Date" :
            IF LiqAccSchedLine2."Row Type" = LiqAccSchedLine2."Row Type"::"Beginning Balance" THEN
              LiqAcc.SETRANGE("Date Filter",0D)   // Force a zero return
            ELSE
              LiqAcc.SETRANGE("Date Filter",0D,ToDate);
          "Column Type"::"Beginning Balance" :
            IF LiqAccSchedLine2."Row Type" = LiqAccSchedLine2."Row Type"::"Balance at Date" THEN
              LiqAcc.SETRANGE("Date Filter",0D)   // Force a zero return
            ELSE
              LiqAcc.SETRANGE(
                "Date Filter",0D,CALCDATE('<-1D>',FromDate));
          "Column Type"::"Year to Date" :
            CASE LiqAccSchedLine2."Row Type" OF
              LiqAccSchedLine2."Row Type"::"Net Change":
                LiqAcc.SETRANGE("Date Filter",FiscalStartDate2,ToDate);
              LiqAccSchedLine2."Row Type"::"Beginning Balance":
                LiqAcc.SETFILTER("Date Filter",'<%1',FiscalStartDate2);
              LiqAccSchedLine2."Row Type"::"Balance at Date":
                LiqAcc.SETRANGE("Date Filter",0D,ToDate);
            END;
          "Column Type"::"Rest of Fiscal Year" :
            CASE LiqAccSchedLine2."Row Type" OF
              LiqAccSchedLine2."Row Type"::"Net Change":
                LiqAcc.SETRANGE(
                  "Date Filter",
                  CALCDATE('<+1D>',ToDate),FindEndOfFiscalYear(FiscalStartDate2));
              LiqAccSchedLine2."Row Type"::"Beginning Balance":
                LiqAcc.SETRANGE("Date Filter",0D,ToDate);
              LiqAccSchedLine2."Row Type"::"Balance at Date":
                LiqAcc.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            END;
          "Column Type"::"Entire Fiscal Year" :
            CASE LiqAccSchedLine2."Row Type" OF
              LiqAccSchedLine2."Row Type"::"Net Change":
                LiqAcc.SETRANGE(
                  "Date Filter",
                  FiscalStartDate2,FindEndOfFiscalYear(FiscalStartDate2));
              LiqAccSchedLine2."Row Type"::"Beginning Balance":
                LiqAcc.SETFILTER("Date Filter",'<%1',FiscalStartDate2);
              LiqAccSchedLine2."Row Type"::"Balance at Date":
                LiqAcc.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            END;
        END;
      END;
    END;

    PROCEDURE EvaluateExpression@1140022(IsAccSchedLineExpression@1140000 : Boolean;Expression@1140001 : Text[80];LiqAccSchedLine@1140002 : Record 5055262;LiqAccSchedColumn@1140003 : Record 5055264) : Decimal;
    VAR
      LiqAccSchedLine2@1140017 : Record 5055262;
      Result@1140004 : Decimal;
      Parantheses@1140005 : Integer;
      Operator@1140006 : Char;
      LeftOperand@1140007 : Text[80];
      RightOperand@1140008 : Text[80];
      LeftResult@1140009 : Decimal;
      RightResult@1140010 : Decimal;
      i@1140011 : Integer;
      IsExpression@1140012 : Boolean;
      IsFilter@1140013 : Boolean;
      Operators@1140014 : Text[8];
      OperatorNo@1140015 : Integer;
      LigAccSchedLineID@1140016 : Integer;
    BEGIN
      Result := 0;

      CallLevel := CallLevel + 1;
      IF CallLevel > 25 THEN
        ShowError(Text1140011,
                   LiqAccSchedLine,LiqAccSchedColumn);

      Expression := DELCHR(Expression,'<>',' ');
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^%';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN
            LeftOperand := COPYSTR(Expression,1,i - 1)
          ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN
            RightOperand := COPYSTR(Expression,i + 1)
          ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpression(IsAccSchedLineExpression,LeftOperand,LiqAccSchedLine,LiqAccSchedColumn);
          IF (RightOperand = '') AND (Operator = '%') AND NOT IsAccSchedLineExpression AND
             (LiqAccSchedLine."Totaling Type" <> LiqAccSchedLine."Totaling Type"::"Set Base For Percent")
          THEN BEGIN
            LiqAccSchedLine2.COPY(LiqAccSchedLine);
            LiqAccSchedLine2."Line No." := GetBasePercentLine(LiqAccSchedLine,LiqAccSchedColumn);
            LiqAccSchedLine2.FIND;
            RightResult :=
              EvaluateExpression(
                IsAccSchedLineExpression,LeftOperand,LiqAccSchedLine2,LiqAccSchedColumn);
          END ELSE
            RightResult :=
              EvaluateExpression(
                IsAccSchedLineExpression,RightOperand,LiqAccSchedLine,LiqAccSchedColumn);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '%' :
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := 100 * LeftResult / RightResult;
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpression(
                IsAccSchedLineExpression,
                COPYSTR(Expression,2,STRLEN(Expression) - 2),
                LiqAccSchedLine,
                LiqAccSchedColumn)
          ELSE BEGIN
            IsFilter :=
               (STRPOS(Expression,'..') +
                STRPOS(Expression,'|') +
                STRPOS(Expression,'<') +
                STRPOS(Expression,'>') +
                STRPOS(Expression,'&') +
                STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsAccSchedLineExpression THEN BEGIN
                LiqAccSchedLine.SETRANGE("Schedule Name",LiqAccSchedLine."Schedule Name");
                LiqAccSchedLine.SETFILTER("Row No.",Expression);
                LigAccSchedLineID := LiqAccSchedLine."Line No.";
                IF LiqAccSchedLine.FIND('-') THEN
                  REPEAT
                    IF LiqAccSchedLine."Line No." <> LigAccSchedLineID THEN
                      Result := Result + CalcCellValue(LiqAccSchedLine,LiqAccSchedColumn);
                  UNTIL LiqAccSchedLine.NEXT = 0
                ELSE
                  IF IsFilter OR (NOT EVALUATE(Result,Expression)) THEN
                    ShowError(Text1140012,
                              LiqAccSchedLine,LiqAccSchedColumn);
              END ELSE BEGIN
                LiqAccSchedColumn.SETRANGE("Column Layout Name",LiqAccSchedColumn."Column Layout Name");
                LiqAccSchedColumn.SETFILTER("Column No.",Expression);
                LigAccSchedLineID := LiqAccSchedColumn."Line No.";
                IF LiqAccSchedColumn.FIND('-') THEN
                  REPEAT
                    IF LiqAccSchedColumn."Line No." <> LigAccSchedLineID THEN
                      Result := Result + CalcCellValue(LiqAccSchedLine,LiqAccSchedColumn);
                  UNTIL LiqAccSchedColumn.NEXT = 0
                ELSE
                  IF IsFilter OR (NOT EVALUATE(Result,Expression)) THEN
                    ShowError(Text1140013,
                              LiqAccSchedLine,LiqAccSchedColumn);
              END;
          END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    PROCEDURE FormatCellAsText@1140023(VAR LiqAccSchedColumn2@1140000 : Record 5055264;Value@1140001 : Decimal) : Text[30];
    VAR
      GLSetup@1140002 : Record 98;
      ValueAsText@1140003 : Text[30];
    BEGIN
      IF NormalFormatString = '' THEN BEGIN
        IF NOT GLSetupRead THEN BEGIN
          GLSetup.GET;
          GLSetupRead := TRUE;
        END;
        NormalFormatString := Text1140014 + GLSetup."Amount Decimal Places" + Text1140015;
      END;
      WITH LiqAccSchedColumn2 DO
        IF Value <> 0 THEN BEGIN
          CASE "Rounding Factor" OF
            "Rounding Factor"::None :
              ValueAsText := FORMAT(Value,0,NormalFormatString);
            "Rounding Factor"::"1" :
              ValueAsText := FORMAT(ROUND(Value,1));
            "Rounding Factor"::"1000" :
              ValueAsText := FORMAT(ROUND(Value/1000,0.1),0,Text1140016);
            "Rounding Factor"::"1000000" :
              ValueAsText := FORMAT(ROUND(Value/1000000,0.1),0,Text1140016);
          END;
          IF (LiqAccSchedColumn2."Column Type" = LiqAccSchedColumn2."Column Type"::Formula) AND
             (STRPOS(LiqAccSchedColumn2.Formula,'%') > 1) THEN
            ValueAsText := ValueAsText + '%';
        END;
      EXIT(ValueAsText);
    END;

    PROCEDURE GetDivisionError@1140024() : Boolean;
    BEGIN
      EXIT(DivisionError);
    END;

    PROCEDURE GetPeriodError@1140025() : Boolean;
    BEGIN
      EXIT(PeriodError);
    END;

    PROCEDURE ShowError@1140026(MessageLine@1140000 : Text[100];VAR LiqAccSchedLine@1140001 : Record 5055262;VAR LiqAccSchedColumn@1140002 : Record 5055264);
    BEGIN
      LiqAccSchedLine.SETRANGE("Schedule Name",LiqAccSchedLine."Schedule Name");
      LiqAccSchedLine.SETRANGE("Line No.",CallLiqAccSchedLineID);
      IF LiqAccSchedLine.FIND('-') THEN;
      LiqAccSchedColumn.SETRANGE("Column Layout Name",LiqAccSchedColumn."Column Layout Name");
      LiqAccSchedColumn.SETRANGE("Line No.",CallLiqAccSchedColumnID);
      IF LiqAccSchedColumn.FIND('-') THEN;
      ERROR(
        MessageLine +'\\' +
        Text1140017 +
        Text1140018 +
        Text1140019,
        LiqAccSchedLine."Row No.", LiqAccSchedLine."Line No.",LiqAccSchedLine.Totaling,
        LiqAccSchedColumn."Column No.",LiqAccSchedColumn."Line No.",LiqAccSchedColumn.Formula);
    END;

    PROCEDURE InsertLiqAccounts@1140027(VAR LiqAccSchedLine@1140000 : Record 5055262);
    VAR
      LiqAcc@1140001 : Record 5055251;
      RecRef@1140002 : RecordRef;
      LiqAccList@11400032 : Form 5055265;
      ChangeLogMgt@1140004 : Codeunit 423;
      LiqAccCounter@1140005 : Integer;
      LiqAccSchedLineNo@1140006 : Integer;
      i@1140007 : Integer;
    BEGIN
      LiqAccList.LOOKUPMODE(TRUE);
      IF LiqAccList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        LiqAccList.SetSelection(LiqAcc);
        LiqAccCounter := LiqAcc.COUNT;
        IF LiqAccCounter > 0 THEN BEGIN
          LiqAccSchedLineNo := LiqAccSchedLine."Line No.";
          LiqAccSchedLine.SETRANGE("Schedule Name",LiqAccSchedLine."Schedule Name");
          IF LiqAccSchedLine.FIND('+') THEN
            REPEAT
              i := LiqAccSchedLine."Line No.";
              IF i >= LiqAccSchedLineNo THEN BEGIN
                LiqAccSchedLine.DELETE;
                LiqAccSchedLine."Line No." := i + 10000 * LiqAccCounter;
                LiqAccSchedLine.INSERT;
              END;
            UNTIL (i <= LiqAccSchedLineNo) OR (LiqAccSchedLine.NEXT(-1) = 0);

          IF LiqAccSchedLineNo = 0 THEN
            LiqAccSchedLineNo := 10000;

          IF LiqAcc.FIND('-') THEN
            REPEAT
              LiqAccSchedLine.INIT;
              LiqAccSchedLine."Line No." := LiqAccSchedLineNo;
              LiqAccSchedLineNo := LiqAccSchedLineNo + 10000;
              LiqAccSchedLine.Description := LiqAcc.Name;

              IF LiqAcc."Account Type" IN
                 [LiqAcc."Account Type"::Posting,LiqAcc."Account Type"::Total,LiqAcc."Account Type"::"End-Total"]
              THEN BEGIN
                LiqAccSchedLine.Totaling := LiqAcc."No.";
                LiqAccSchedLine."Row No." := COPYSTR(LiqAcc."No.",1,MAXSTRLEN(LiqAccSchedLine."Row No."));
              END;
              IF LiqAcc."Account Type" IN
                 [LiqAcc."Account Type"::Total,LiqAcc."Account Type"::"End-Total"]
              THEN
                LiqAccSchedLine."Totaling Type" := LiqAccSchedLine."Totaling Type"::"Total Accounts"
              ELSE
                LiqAccSchedLine."Totaling Type" := LiqAccSchedLine."Totaling Type"::"Posting Accounts";
              LiqAccSchedLine.INSERT;
              RecRef.GETTABLE(LiqAccSchedLine);
              ChangeLogMgt.LogInsertion(RecRef);
            UNTIL LiqAcc.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SetAccSchedName@1140028(VAR NewAccSchedName@1140000 : Record 5055261);
    BEGIN
      LiqAccSchedName := NewAccSchedName;
    END;

    LOCAL PROCEDURE IncludeClosingDate@1140029(Date@1140000 : Date;UseClosingDate@1140001 : Boolean) : Date;
    BEGIN
      IF UseClosingDate THEN
        EXIT(CLOSINGDATE(Date));
      EXIT(Date);
    END;

    PROCEDURE GetDimTotalingFilter@1140030(DimNo@1140000 : Integer;DimTotaling@1140001 : Text[80]) : Text[1024];
    VAR
      DimTotaling2@1140002 : Text[80];
      DimTotalPart@1140003 : Text[80];
      ResultFilter@114004 : Text[1024];
      ResultFilter2@1140005 : Text[1024];
      i@1140006 : Integer;
    BEGIN
      IF DimTotaling = '' THEN
        EXIT(DimTotaling);
      DimTotaling2 := DimTotaling;
      REPEAT
        i := STRPOS(DimTotaling2,'|');
        IF i > 0 THEN BEGIN
          DimTotalPart := COPYSTR(DimTotaling2,1,i - 1);
          IF i < STRLEN(DimTotaling2) THEN
            DimTotaling2 := COPYSTR(DimTotaling2,i + 1)
          ELSE
            DimTotaling2 := '';
        END ELSE
          DimTotalPart := DimTotaling2;
        ResultFilter2 := ConvDimTotalingFilter(DimNo,DimTotalPart);
        IF ResultFilter2 <> '' THEN
          IF STRLEN(ResultFilter) + STRLEN(ResultFilter2) + 1 > MAXSTRLEN(ResultFilter) THEN
            ERROR(Text1140020,DimTotaling)
          ELSE BEGIN
            IF ResultFilter <> '' THEN
              ResultFilter := ResultFilter + '|';
            ResultFilter := ResultFilter + ResultFilter2;
          END;
      UNTIL i <= 0;
      EXIT(ResultFilter);
    END;

    LOCAL PROCEDURE ConvDimTotalingFilter@1140031(DimNo@1140000 : Integer;DimTotaling@1140001 : Text[80]) : Text[1024];
    VAR
      DimVal@1140002 : Record 349;
      DimCode@1140003 : Code[20];
      ResultFilter@1140004 : Text[1024];
      DimValTotaling@1140005 : Boolean;
    BEGIN
      IF DimTotaling = '' THEN
        EXIT(DimTotaling);

      CheckAnalysisView(LiqAccSchedName.Name,'',FALSE);

      CASE DimNo OF
        1: DimCode := LiquidityAnalysisView."Dimension 1 Code";
        2: DimCode := LiquidityAnalysisView."Dimension 2 Code";
        3: DimCode := LiquidityAnalysisView."Dimension 3 Code";
        4: DimCode := LiquidityAnalysisView."Dimension 4 Code";
      END;
      IF DimCode = '' THEN
        EXIT(DimTotaling);

      DimVal.SETRANGE("Dimension Code",DimCode);
      DimVal.SETFILTER(Code,DimTotaling);
      IF DimVal.FIND('-') THEN
        REPEAT
          DimValTotaling :=
            DimVal."Dimension Value Type" IN
            [DimVal."Dimension Value Type"::Total,DimVal."Dimension Value Type"::"End-Total"];
          IF DimValTotaling AND (DimVal.Totaling <> '') THEN BEGIN
            IF STRLEN(ResultFilter) + STRLEN(DimVal.Totaling) + 1 > MAXSTRLEN(ResultFilter) THEN
              ERROR(Text1140020,DimTotaling);
            IF ResultFilter <> '' THEN
              ResultFilter := ResultFilter + '|';
            ResultFilter := ResultFilter + DimVal.Totaling;
          END;
        UNTIL (DimVal.NEXT = 0) OR NOT (DimValTotaling);

      IF DimValTotaling THEN
        EXIT(ResultFilter)
      ELSE
        EXIT(DimTotaling);
    END;

    PROCEDURE CheckAnalysisView@1140032(CurrentSchedName@1140000 : Code[10];CurrentColumnName@1140001 : Code[10];TestColumnName@1140002 : Boolean);
    VAR
      LiqAccountScheduleColumn2@1140003 : Record 5055264;
      AnyColumnDimensions@1140004 : Boolean;
    BEGIN
      IF NOT AnalysisViewRead THEN BEGIN
        AnalysisViewRead := TRUE;
        IF CurrentSchedName <> LiqAccSchedName.Name THEN BEGIN
          CheckTemplateName(CurrentSchedName);
          LiqAccSchedName.GET(CurrentSchedName);
        END;
        IF TestColumnName THEN
          IF CurrentColumnName <> LiqAccScheduleLayoutName.Name THEN BEGIN
            CheckColumnTemplateName(CurrentColumnName);
            LiqAccScheduleLayoutName.GET(CurrentColumnName);
          END;
        IF LiqAccSchedName."Liq. Analysis View Name" = '' THEN BEGIN
          IF NOT GLSetupRead THEN
            GLSetup.GET;
          GLSetupRead := TRUE;
          LiquidityAnalysisView.INIT;
          LiquidityAnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          LiquidityAnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        END ELSE
          LiquidityAnalysisView.GET(LiqAccSchedName."Liq. Analysis View Name");
        IF (LiqAccSchedName."Liq. Analysis View Name" <> LiqAccScheduleLayoutName."Liq. Analysis View Name") THEN BEGIN
          AnyColumnDimensions := FALSE;
          LiqAccountScheduleColumn2.SETRANGE("Column Layout Name",LiqAccScheduleLayoutName.Name);
          IF LiqAccountScheduleColumn2.FIND('-') THEN
            REPEAT
              AnyColumnDimensions :=
                (LiqAccountScheduleColumn2."Dimension 1 Totaling" <> '') OR
                (LiqAccountScheduleColumn2."Dimension 2 Totaling" <> '') OR
                (LiqAccountScheduleColumn2."Dimension 3 Totaling" <> '') OR
                (LiqAccountScheduleColumn2."Dimension 4 Totaling" <> '');
            UNTIL AnyColumnDimensions OR (LiqAccountScheduleColumn2.NEXT = 0);
          IF AnyColumnDimensions THEN
            ERROR(
              Text1140044,
              LiqAccSchedName.FIELDCAPTION("Liq. Analysis View Name"),
              LiqAccSchedName.TABLECAPTION,
              LiqAccSchedName."Liq. Analysis View Name",
              LiqAccScheduleLayoutName.FIELDCAPTION("Liq. Analysis View Name"),
              LiqAccScheduleLayoutName.TABLECAPTION,
              LiqAccScheduleLayoutName."Liq. Analysis View Name");
        END;
      END;
    END;

    LOCAL PROCEDURE InitBasePercents@1140033(LiqAccSchedLine@1140000 : Record 5055262;LiqAccountScheduleColumn@1140001 : Record 5055264);
    VAR
      BaseIdx@1140002 : Integer;
    BEGIN
      CLEAR(BasePercentLine);
      BaseIdx := 0;

      WITH LiqAccSchedLine DO BEGIN
        SETRANGE("Schedule Name","Schedule Name");
        IF FIND('-') THEN
          REPEAT
            IF "Totaling Type" = "Totaling Type"::"Set Base For Percent" THEN BEGIN
              BaseIdx := BaseIdx + 1;
              IF BaseIdx > ARRAYLEN(BasePercentLine) THEN
                ShowError(
                  STRSUBSTNO(Text1140042,ARRAYLEN(BasePercentLine),FIELDCAPTION("Totaling Type"),"Totaling Type"),
                  LiqAccSchedLine,LiqAccountScheduleColumn);
              BasePercentLine[BaseIdx] := "Line No.";
            END;
          UNTIL NEXT = 0;
      END;

      IF BaseIdx = 0 THEN BEGIN
        LiqAccSchedLine."Totaling Type" := LiqAccSchedLine."Totaling Type"::"Set Base For Percent";
        ShowError(
          STRSUBSTNO(Text1140043,LiqAccSchedLine.FIELDCAPTION("Totaling Type"),LiqAccSchedLine."Totaling Type"),
          LiqAccSchedLine,LiqAccountScheduleColumn);
      END;
    END;

    LOCAL PROCEDURE GetBasePercentLine@1140034(LiqAccSchedLine@1140000 : Record 5055262;LiqAccountScheduleColumn@1140001 : Record 5055264) : Integer;
    VAR
      BaseIdx@1140002 : Integer;
    BEGIN
      IF BasePercentLine[1] = 0 THEN
        InitBasePercents(LiqAccSchedLine,LiqAccountScheduleColumn);

      BaseIdx := ARRAYLEN(BasePercentLine);
      REPEAT
        IF BasePercentLine[BaseIdx] <> 0 THEN
          IF BasePercentLine[BaseIdx] < LiqAccSchedLine."Line No." THEN
            EXIT(BasePercentLine[BaseIdx]);
        BaseIdx := BaseIdx - 1;
      UNTIL BaseIdx = 0;

      LiqAccSchedLine."Totaling Type" := LiqAccSchedLine."Totaling Type"::"Set Base For Percent";
      ShowError(
        STRSUBSTNO(Text1140043,LiqAccSchedLine.FIELDNAME("Totaling Type"),LiqAccSchedLine."Totaling Type"),
        LiqAccSchedLine,LiqAccountScheduleColumn);
    END;

    BEGIN
    END.
  }
}
