OBJECT Codeunit 7312 Create Pick
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES4.00.02;
  }
  PROPERTIES
  {
    Permissions=TableData 6550=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WhseActivHeader@1003 : Record 5766;
      TempWhseActivLine@1001 : TEMPORARY Record 5767;
      TempWhseItemTrkgLine@1033 : TEMPORARY Record 6550;
      TotalTempItemTrkgLine@1036 : TEMPORARY Record 6550;
      SourceTempItemTrkgLine@1047 : TEMPORARY Record 6550;
      WhseShptLine@1016 : Record 7321;
      WhseInternalPickLine@1004 : Record 7334;
      ProdOrderCompLine@1028 : Record 5407;
      WhseWkshLine@1006 : Record 7326;
      WhseSetup@1008 : Record 5769;
      Location@1000 : Record 14;
      WhseSetupLocation@1044 : Record 14;
      Item@1002 : Record 27;
      Bin@1020 : Record 7354;
      BinType@1026 : Record 7303;
      SKU@1019 : Record 5700;
      WhseMgt@1030 : Codeunit 5775;
      WMSMgt@1037 : Codeunit 7302;
      ItemTrackingMgt@1017 : Codeunit 6500;
      WhseSource@1005 : 'Pick Worksheet,Shipment,Movement Worksheet,Internal Pick,Production';
      SortPick@1011 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';
      WhseDocType@1024 : 'Put-away,Pick,Movement';
      SourceSubType@1041 : '0,1,2,3,4,5,6,7,8,9,10';
      SourceNo@1040 : Code[20];
      AssignedID@1010 : Code[20];
      ShippingAgentCode@1022 : Code[10];
      ShippingAgentServiceCode@1021 : Code[10];
      ShipmentMethodCode@1018 : Code[10];
      TransferRemQtyToPickBase@1200 : Decimal;
      TempNo@1007 : Integer;
      MaxNoOfLines@1015 : Integer;
      BreakbulkNo@1023 : Integer;
      TempLineNo@1029 : Integer;
      MaxNoOfSourceDoc@1014 : Integer;
      SourceType@1042 : Integer;
      SourceLineNo@1039 : Integer;
      SourceSubLineNo@1038 : Integer;
      LastWhseItemTrkgLineNo@1048 : Integer;
      WhseItemTrkgLineCount@1049 : Integer;
      PerZone@1013 : Boolean;
      Text000@1012 : TextConst 'ENU=Nothing to handle.;ESP=Nada a manipular.';
      PerBin@1032 : Boolean;
      DoNotFillQtytoHandle@1025 : Boolean;
      BreakbulkFilter@1031 : Boolean;
      WhseItemTrkgExists@1034 : Boolean;
      SNRequired@1035 : Boolean;
      LNRequired@1027 : Boolean;
      CrossDock@1043 : Boolean;
      ReservationExists@1046 : Boolean;
      ReservedForItemLedgEntry@1045 : Boolean;
      CalledFromPickWksh@1009 : Boolean;
      CalledFromMoveWksh@1050 : Boolean;
      CalledFromWksh@1051 : Boolean;
      ReqFEFOPick@1052 : Boolean;

    PROCEDURE CreateTempLine@29(LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];VariantCode@1004 : Code[10];UnitofMeasureCode@1005 : Code[10];FromBinCode@1000 : Code[20];ToBinCode@1007 : Code[20];QtyPerUnitofMeasure@1010 : Decimal;VAR TotalQtytoPick@1001 : Decimal;VAR TotalQtytoPickBase@1000000000 : Decimal);
    VAR
      QtyToPick@1006 : Decimal;
      RemQtyToPick@1008 : Decimal;
      i@1012 : Integer;
      RemQtyToPickBase@1000000002 : Decimal;
      QtyToPickBase@1000000001 : Decimal;
      QtyToTrackBase@1009 : Decimal;
      QtyBaseMaxAvailToPick@1011 : Decimal;
    BEGIN
      GetLocation(LocationCode);
      IF Location."Directed Put-away and Pick" THEN
        QtyBaseMaxAvailToPick := // Total qty (excl. Receive bin content) that are not assigned to any activity/ order
          CalcTotalQtyOnBinType('',LocationCode,ItemNo,VariantCode) -
          CalcTotalQtyAssgndOnWhse(LocationCode,ItemNo,VariantCode) +
          CalcTotalQtyAssgndOnWhseAct(TempWhseActivLine."Activity Type"::"Put-away",LocationCode,ItemNo,VariantCode) -
          CalcTotalQtyOnBinType(GetBinTypeFilter(0),LocationCode,ItemNo,VariantCode) // Receive area
      ELSE
        QtyBaseMaxAvailToPick :=
          CalcAvailableQty(ItemNo,VariantCode) -
          CalcPickQtyAssigned(LocationCode,ItemNo,VariantCode,UnitofMeasureCode,FromBinCode,TempWhseItemTrkgLine);

      CheckReservation(
        QtyBaseMaxAvailToPick,LocationCode,SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,
        QtyPerUnitofMeasure,TotalQtytoPick,TotalQtytoPickBase);

      RemQtyToPick := TotalQtytoPick;
      RemQtyToPickBase := TotalQtytoPickBase;
      ItemTrackingMgt.CheckWhseItemTrkgSetup(ItemNo,SNRequired,LNRequired,FALSE);

      ReqFEFOPick := FALSE;
      IF PickAccordingToFEFO(LocationCode,ItemNo) THEN BEGIN
        QtyToTrackBase := RemQtyToPickBase;
        IF UndefinedItemTrkg(QtyToTrackBase) THEN BEGIN
          CreateTempItemTrkgLines(ItemNo,VariantCode,QtyToTrackBase,TRUE);
          CreateTempItemTrkgLines(ItemNo,VariantCode,TransferRemQtyToPickBase,FALSE);
        END;
      END;

      IF TotalQtytoPickBase <> 0 THEN BEGIN
        TempWhseItemTrkgLine.RESET;
        TempWhseItemTrkgLine.SETFILTER("Qty. to Handle",'<> 0');
        IF TempWhseItemTrkgLine.FIND('-') THEN BEGIN
          REPEAT
            IF TempWhseItemTrkgLine."Qty. to Handle (Base)" <> 0 THEN BEGIN
              IF TempWhseItemTrkgLine."Qty. to Handle" > RemQtyToPick THEN BEGIN
                TempWhseItemTrkgLine."Qty. to Handle" := RemQtyToPick * QtyPerUnitofMeasure;
                TempWhseItemTrkgLine.MODIFY;
              END;
              IF TempWhseItemTrkgLine."Qty. to Handle (Base)" > RemQtyToPickBase THEN BEGIN
                TempWhseItemTrkgLine."Qty. to Handle (Base)" := RemQtyToPickBase;
                TempWhseItemTrkgLine.MODIFY;
              END;
              QtyToPick := TempWhseItemTrkgLine."Qty. to Handle";
              QtyToPickBase := TempWhseItemTrkgLine."Qty. to Handle (Base)";
              CreateTempLine2(LocationCode,ItemNo,VariantCode,UnitofMeasureCode,FromBinCode,ToBinCode,
                QtyPerUnitofMeasure,QtyToPick,TempWhseItemTrkgLine,QtyToPickBase);
              RemQtyToPickBase -= TempWhseItemTrkgLine."Qty. to Handle (Base)" - QtyToPickBase;
              RemQtyToPick -= (TempWhseItemTrkgLine."Qty. to Handle" / QtyPerUnitofMeasure) - QtyToPick;
            END;
          UNTIL (TempWhseItemTrkgLine.NEXT = 0) OR (RemQtyToPickBase = 0);
          TotalQtytoPick := RemQtyToPick;
          TotalQtytoPickBase := RemQtyToPickBase;

        END ELSE BEGIN
          IF SNRequired THEN BEGIN
            FOR i := 1 TO TotalQtytoPick DO BEGIN
              QtyToPick := 1;
              CreateTempLine2(LocationCode,ItemNo,VariantCode,UnitofMeasureCode,
                FromBinCode,ToBinCode,QtyPerUnitofMeasure,QtyToPick,TempWhseItemTrkgLine,QtyToPick);
            END;
            TotalQtytoPick := 0;
          END ELSE
            CreateTempLine2(LocationCode,ItemNo,VariantCode,UnitofMeasureCode,
              FromBinCode,ToBinCode,QtyPerUnitofMeasure,TotalQtytoPick,TempWhseItemTrkgLine,TotalQtytoPickBase);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateTempLine2@21(LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];VariantCode@1004 : Code[10];UnitofMeasureCode@1005 : Code[10];FromBinCode@1000 : Code[20];ToBinCode@1007 : Code[20];QtyPerUnitofMeasure@1010 : Decimal;VAR TotalQtytoPick@1001 : Decimal;VAR TempWhseItemTrkgLine@1006 : TEMPORARY Record 6550;VAR TotalQtytoPickBase@1000000000 : Decimal);
    VAR
      QtytoPick@1016 : Decimal;
      QtytoPickBase@1000000001 : Decimal;
      QtyAvailableBase@1008 : Decimal;
    BEGIN
      GetLocation(LocationCode);
      IF Location."Bin Mandatory" THEN BEGIN
        IF NOT Location."Directed Put-away and Pick" THEN BEGIN
          QtyAvailableBase :=
            CalcAvailableQty(ItemNo,VariantCode) -
            CalcPickQtyAssigned(LocationCode,ItemNo,VariantCode,UnitofMeasureCode,'',TempWhseItemTrkgLine);

          IF QtyAvailableBase > 0 THEN BEGIN
            IF TotalQtytoPickBase > QtyAvailableBase THEN
              TotalQtytoPickBase := QtyAvailableBase;
            CalcBWPickBin(
              LocationCode,ItemNo,VariantCode,UnitofMeasureCode,
              QtyPerUnitofMeasure,TotalQtytoPick,TotalQtytoPickBase,TempWhseItemTrkgLine);
          END;
          EXIT;
        END;

        IF (WhseSource = WhseSource::"Movement Worksheet") AND (FromBinCode <> '') THEN BEGIN
          InsertTmpActLnFromMovWkshLine(
            LocationCode,ItemNo,VariantCode,FromBinCode,
            QtyPerUnitofMeasure,TotalQtytoPick,TempWhseItemTrkgLine,TotalQtytoPickBase);
          EXIT;
        END;

        IF (ReservationExists AND ReservedForItemLedgEntry) OR NOT ReservationExists THEN BEGIN
          IF Location."Use Cross-Docking" THEN
            CalcPickBin(
              LocationCode,ItemNo,VariantCode,UnitofMeasureCode,
              ToBinCode,QtyPerUnitofMeasure,
              TotalQtytoPick,TempWhseItemTrkgLine,TRUE,TotalQtytoPickBase);
          IF TotalQtytoPickBase > 0 THEN
            CalcPickBin(
              LocationCode,ItemNo,VariantCode,UnitofMeasureCode,
              ToBinCode,QtyPerUnitofMeasure,
              TotalQtytoPick,TempWhseItemTrkgLine,FALSE,TotalQtytoPickBase);
        END;
        IF (TotalQtytoPickBase > 0) AND Location."Always Create Pick Line" THEN BEGIN
          UpdateQuantitiesToPick(
            TotalQtytoPickBase,
            QtyPerUnitofMeasure,QtytoPick,QtytoPickBase,
            QtyPerUnitofMeasure,QtytoPick,QtytoPickBase,
            TotalQtytoPick,TotalQtytoPickBase);

          CreateTempActivityLine(
            LocationCode,'',UnitofMeasureCode,QtyPerUnitofMeasure,QtytoPick,QtytoPickBase,1,0);
          CreateTempActivityLine(
            LocationCode,ToBinCode,UnitofMeasureCode,QtyPerUnitofMeasure,QtytoPick,QtytoPickBase,2,0);
        END;
        EXIT;
      END;

      QtyAvailableBase :=
        CalcAvailableQty(ItemNo,VariantCode) -
        CalcPickQtyAssigned(LocationCode,ItemNo,VariantCode,UnitofMeasureCode,'',TempWhseItemTrkgLine);

      IF QtyAvailableBase > 0 THEN BEGIN
        UpdateQuantitiesToPick(
          QtyAvailableBase,
          QtyPerUnitofMeasure,QtytoPick,QtytoPickBase,
          QtyPerUnitofMeasure,QtytoPick,QtytoPickBase,
          TotalQtytoPick,TotalQtytoPickBase);

        CreateTempActivityLine(LocationCode,'',UnitofMeasureCode,QtyPerUnitofMeasure,QtytoPick,QtytoPickBase,0,0);
      END;
    END;

    LOCAL PROCEDURE InsertTmpActLnFromMovWkshLine@19(LocationCode@1007 : Code[10];ItemNo@1006 : Code[20];VariantCode@1005 : Code[10];FromBinCode@1003 : Code[20];QtyPerUnitofMeasure@1001 : Decimal;VAR TotalQtytoPick@1000 : Decimal;VAR TempWhseItemTrkgLine@1012 : Record 6550;VAR TotalQtyToPickBase@1000000000 : Decimal);
    VAR
      FromBinContent@1008 : Record 7302;
      FromItemUOM@1011 : Record 5404;
      FromQtyToPick@1017 : Decimal;
      FromQtyToPickBase@1016 : Decimal;
      ToQtyToPick@1015 : Decimal;
      ToQtyToPickBase@1014 : Decimal;
      QtyAvailableBase@1013 : Decimal;
    BEGIN
      QtyAvailableBase := TotalQtyToPickBase;

      IF WhseWkshLine."From Unit of Measure Code" <> WhseWkshLine."Unit of Measure Code" THEN BEGIN
        FromBinContent.GET(
          LocationCode,FromBinCode,ItemNo,VariantCode,WhseWkshLine."From Unit of Measure Code");
        FromBinContent.CALCFIELDS("Quantity (Base)","Pick Quantity (Base)","Negative Adjmt. Qty. (Base)");

        QtyAvailableBase :=
          FromBinContent."Quantity (Base)" - FromBinContent."Pick Quantity (Base)" -
          FromBinContent."Negative Adjmt. Qty. (Base)" -
          CalcPickQtyAssigned(
            LocationCode,ItemNo,VariantCode,
            WhseWkshLine."From Unit of Measure Code",
            WhseWkshLine."From Bin Code",TempWhseItemTrkgLine);

        FromItemUOM.GET(ItemNo,FromBinContent."Unit of Measure Code");

        BreakbulkNo := BreakbulkNo + 1;
      END;

      UpdateQuantitiesToPick(
        QtyAvailableBase,
        WhseWkshLine."Qty. per From Unit of Measure",FromQtyToPick,FromQtyToPickBase,
        QtyPerUnitofMeasure,ToQtyToPick,ToQtyToPickBase,
        TotalQtytoPick,TotalQtyToPickBase);

      CreateBreakBulkTempLines(
        WhseWkshLine."Location Code",
        WhseWkshLine."From Unit of Measure Code",
        WhseWkshLine."Unit of Measure Code",
        FromBinCode,
        WhseWkshLine."To Bin Code",
        WhseWkshLine."Qty. per From Unit of Measure",
        WhseWkshLine."Qty. per Unit of Measure",
        BreakbulkNo,
        ToQtyToPick,ToQtyToPickBase,FromQtyToPick,FromQtyToPickBase);

      TotalQtyToPickBase := 0;
      TotalQtytoPick := 0;
    END;

    LOCAL PROCEDURE CalcMaxQtytoPlace@33(VAR QtytoHandle@1001 : Decimal;QtyOutstanding@1003 : Decimal;VAR QtytoHandleBase@1000000000 : Decimal;QtyOutstandingBase@1000000001 : Decimal);
    VAR
      TempWhseActivLine2@1004 : TEMPORARY Record 5767;
    BEGIN
      TempWhseActivLine2.INIT;
      TempWhseActivLine2.COPY(TempWhseActivLine);
      WITH TempWhseActivLine DO BEGIN
        SETCURRENTKEY(
          "Whse. Document No.","Whse. Document Type","Activity Type","Whse. Document Line No.");
        SETRANGE("Whse. Document Type","Whse. Document Type");
        SETRANGE("Whse. Document No.","Whse. Document No.");
        SETRANGE("Activity Type","Activity Type");
        SETRANGE("Whse. Document Line No.","Whse. Document Line No.");
        SETRANGE("Source Subline No.","Source Subline No.");
        SETRANGE("Action Type","Action Type"::Place);
        SETRANGE("Breakbulk No.",0);
        IF FIND('-') THEN BEGIN
          CALCSUMS(Quantity);
          IF QtyOutstanding < Quantity + QtytoHandle THEN
            QtytoHandle := QtyOutstanding - Quantity;
          IF QtytoHandle < 0 THEN
            QtytoHandle := 0;
          CALCSUMS("Qty. (Base)");
          IF QtyOutstandingBase < "Qty. (Base)" + QtytoHandleBase THEN
            QtytoHandleBase := QtyOutstandingBase - "Qty. (Base)";
          IF QtytoHandleBase < 0 THEN
            QtytoHandleBase := 0;
        END;
      END;
      TempWhseActivLine.COPY(TempWhseActivLine2);
    END;

    LOCAL PROCEDURE CalcBWPickBin@36(LocationCode@1017 : Code[10];ItemNo@1016 : Code[20];VariantCode@1015 : Code[10];UnitofMeasureCode@1014 : Code[10];QtyPerUnitofMeasure@1012 : Decimal;VAR TotalQtyToPick@1000 : Decimal;VAR TotalQtytoPickBase@1010 : Decimal;VAR TempWhseItemTrkgLine@1009 : Record 6550);
    BEGIN
      //Basic warehousing
      // find pick qty. for bin code of source line
      IF TotalQtytoPickBase > 0 THEN BEGIN
        CASE WhseSource OF
          WhseSource::"Pick Worksheet":
            FindBWPickBin(
              LocationCode,ItemNo,VariantCode,WhseWkshLine."To Bin Code",
              WhseWkshLine."To Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,FALSE,
              TotalQtyToPick,TotalQtytoPickBase,TempWhseItemTrkgLine);
          WhseSource::Shipment:
            FindBWPickBin(
              LocationCode,ItemNo,VariantCode,WhseShptLine."Bin Code",
              WhseShptLine."Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,FALSE,
              TotalQtyToPick,TotalQtytoPickBase,TempWhseItemTrkgLine);
          WhseSource::Production:
            FindBWPickBin(
              LocationCode,ItemNo,VariantCode,ProdOrderCompLine."Bin Code",
              ProdOrderCompLine."Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,FALSE,
              TotalQtyToPick,TotalQtytoPickBase,TempWhseItemTrkgLine);
        END;
      END;

      // find pick qty. for default bin
      IF TotalQtytoPickBase > 0 THEN BEGIN
        CASE WhseSource OF
          WhseSource::"Pick Worksheet":
            FindBWPickBin(
              LocationCode,ItemNo,VariantCode,'',
              WhseWkshLine."To Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,TRUE,
              TotalQtyToPick,TotalQtytoPickBase,TempWhseItemTrkgLine);
          WhseSource::Shipment:
            FindBWPickBin(
              LocationCode,ItemNo,VariantCode,'',
              WhseShptLine."Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,TRUE,
              TotalQtyToPick,TotalQtytoPickBase,TempWhseItemTrkgLine);
          WhseSource::Production:
            FindBWPickBin(
              LocationCode,ItemNo,VariantCode,'',
              ProdOrderCompLine."Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,TRUE,
              TotalQtyToPick,TotalQtytoPickBase,TempWhseItemTrkgLine);
        END;
      END;

      // find pick qty. for other bins
      IF TotalQtytoPickBase > 0 THEN BEGIN
        CASE WhseSource OF
          WhseSource::"Pick Worksheet":
            FindBWPickBin(
              LocationCode,ItemNo,VariantCode,'',
              WhseWkshLine."To Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,FALSE,
              TotalQtyToPick,TotalQtytoPickBase,TempWhseItemTrkgLine);
          WhseSource::Shipment:
            FindBWPickBin(
              LocationCode,ItemNo,VariantCode,'',
              WhseShptLine."Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,FALSE,
              TotalQtyToPick,TotalQtytoPickBase,TempWhseItemTrkgLine);
          WhseSource::Production:
            FindBWPickBin(
              LocationCode,ItemNo,VariantCode,'',
              ProdOrderCompLine."Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,FALSE,
              TotalQtyToPick,TotalQtytoPickBase,TempWhseItemTrkgLine);
        END;
      END;
    END;

    LOCAL PROCEDURE FindBWPickBin@38(LocationCode@1012 : Code[10];ItemNo@1011 : Code[20];VariantCode@1010 : Code[10];FromBinCode@1003 : Code[20];ToBinCode@1008 : Code[20];UnitofMeasureCode@1005 : Code[10];QtyPerUnitofMeasure@1013 : Decimal;DefaultBin@1000 : Boolean;VAR TotalQtyToPick@1007 : Decimal;VAR TotalQtyToPickBase@1006 : Decimal;VAR TempWhseItemTrkgLine@1004 : Record 6550);
    VAR
      FromBinContent@1002 : Record 7302;
      QtyAvailableBase@1015 : Decimal;
      QtyToPickBase@1001 : Decimal;
      QtytoPick@1009 : Decimal;
    BEGIN
      //Basic warehousing
      WITH FromBinContent DO BEGIN
        SETCURRENTKEY(Default,"Location Code","Item No.","Variant Code","Bin Code");
        SETRANGE(Default,DefaultBin);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Variant Code",VariantCode);
        IF FromBinCode <> '' THEN
          SETRANGE("Bin Code",FromBinCode);
        IF WhseItemTrkgExists THEN BEGIN
          SETRANGE("Lot No. Filter",TempWhseItemTrkgLine."Lot No.");
          SETRANGE("Serial No. Filter",TempWhseItemTrkgLine."Serial No.");
        END;
        IF FIND('-') THEN BEGIN
          REPEAT
            QtyAvailableBase :=
              CalcQtyAvailToPick(0) -
              CalcPickQtyAssigned(LocationCode,ItemNo,VariantCode,"Unit of Measure Code","Bin Code",TempWhseItemTrkgLine);

            IF QtyAvailableBase > 0 THEN BEGIN
              IF SNRequired THEN
                QtyAvailableBase := 1;

              UpdateQuantitiesToPick(
                QtyAvailableBase,
                QtyPerUnitofMeasure,QtytoPick,QtyToPickBase,
                QtyPerUnitofMeasure,QtytoPick,QtyToPickBase,
                TotalQtyToPick,TotalQtyToPickBase);

              CreateTempActivityLine(
                LocationCode,"Bin Code",UnitofMeasureCode,QtyPerUnitofMeasure,QtytoPick,QtyToPickBase,1,0);
              CreateTempActivityLine(
                LocationCode,ToBinCode,UnitofMeasureCode,QtyPerUnitofMeasure,QtytoPick,QtyToPickBase,2,0);
            END;
          UNTIL (NEXT = 0) OR (TotalQtyToPickBase = 0);
        END;
      END;
    END;

    LOCAL PROCEDURE CalcPickBin@37(LocationCode@1008 : Code[10];ItemNo@1007 : Code[20];VariantCode@1006 : Code[10];UnitofMeasureCode@1005 : Code[10];ToBinCode@1004 : Code[20];QtyPerUnitofMeasure@1009 : Decimal;VAR TotalQtytoPick@1002 : Decimal;VAR TempWhseItemTrkgLine@1001 : Record 6550;CrossDock@1000 : Boolean;VAR TotalQtytoPickBase@1000000000 : Decimal);
    BEGIN
      //Directed put-away and pick
      ItemTrackingMgt.CheckWhseItemTrkgSetup(ItemNo,SNRequired,LNRequired,FALSE);
      FindPickBin(
        LocationCode,ItemNo,VariantCode,UnitofMeasureCode,
        ToBinCode,TempWhseActivLine,TotalQtytoPick,TempWhseItemTrkgLine,CrossDock,TotalQtytoPickBase);
      IF (TotalQtytoPickBase > 0) AND Location."Allow Breakbulk" THEN BEGIN
        FindBreakBulkBin(
          LocationCode,ItemNo,VariantCode,UnitofMeasureCode,ToBinCode,
          QtyPerUnitofMeasure,TempWhseActivLine,TotalQtytoPick,TempWhseItemTrkgLine,CrossDock,TotalQtytoPickBase);
        IF TotalQtytoPickBase > 0 THEN
          FindSmallerUOMBin(
            LocationCode,ItemNo,VariantCode,UnitofMeasureCode,ToBinCode,
            QtyPerUnitofMeasure,TotalQtytoPick,TempWhseItemTrkgLine,CrossDock,TotalQtytoPickBase);
      END;
    END;

    PROCEDURE BinContentExists@14(VAR BinContent@1000 : Record 7302;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];UOMCode@1003 : Code[10];VariantCode@1004 : Code[10];CrossDock@1005 : Boolean;LNRequired@1006 : Boolean;SNRequired@1007 : Boolean) : Boolean;
    BEGIN
      WITH BinContent DO BEGIN
        SETCURRENTKEY("Location Code","Item No.","Variant Code","Cross-Dock Bin","Qty. per Unit of Measure","Bin Ranking");
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE("Cross-Dock Bin",CrossDock);
        SETRANGE("Unit of Measure Code",UOMCode);
        IF WhseSource = WhseSource::"Movement Worksheet" THEN
          SETFILTER("Bin Ranking",'<%1',Bin."Bin Ranking");
        IF WhseItemTrkgExists THEN BEGIN
          IF LNRequired THEN
            SETRANGE("Lot No. Filter",TempWhseItemTrkgLine."Lot No.")
          ELSE
            SETFILTER("Lot No. Filter",'%1|%2',TempWhseItemTrkgLine."Lot No.",'');
          IF SNRequired THEN
            SETRANGE("Serial No. Filter",TempWhseItemTrkgLine."Serial No.")
          ELSE
            SETFILTER("Serial No. Filter",'%1|%2',TempWhseItemTrkgLine."Serial No.",'');
        END;
        ASCENDING(FALSE);
        EXIT(FIND('-'));
      END;
    END;

    LOCAL PROCEDURE FindPickBin@6(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10];UnitofMeasureCode@1004 : Code[10];ToBinCode@1011 : Code[20];VAR TempWhseActivLine2@1000 : TEMPORARY Record 5767;VAR TotalQtytoPick@1005 : Decimal;VAR TempWhseItemTrkgLine@1007 : Record 6550;CrossDock@1008 : Boolean;VAR TotalQtytoPickBase@1000000000 : Decimal);
    VAR
      FromBinContent@1006 : Record 7302;
      FromQtyToPick@1009 : Decimal;
      FromQtyToPickBase@1000000003 : Decimal;
      ToQtyToPick@1014 : Decimal;
      ToQtyToPickBase@1015 : Decimal;
      TotalAvailQtyToPickBase@1013 : Decimal;
      AvailableQtyBase@1010 : Decimal;
    BEGIN
      //Directed put-away and pick
      GetBin(LocationCode,ToBinCode);
      GetLocation(LocationCode);
      WITH FromBinContent DO BEGIN
        IF BinContentExists(FromBinContent,ItemNo,LocationCode,UnitofMeasureCode,VariantCode,CrossDock,TRUE,TRUE) THEN BEGIN
          TotalAvailQtyToPickBase :=
            CalcTotalAvailQtyToPick(
              LocationCode,ItemNo,VariantCode,
              TempWhseItemTrkgLine."Lot No.",TempWhseItemTrkgLine."Serial No.",
              SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,TotalQtytoPickBase);
          IF TotalAvailQtyToPickBase < 0 THEN
            TotalAvailQtyToPickBase := 0;

          REPEAT
            IF ("Bin Code" <> ToBinCode) AND
               ((UseForPick(FromBinContent) AND (WhseSource <> WhseSource::"Movement Worksheet")) OR
                (UseForReplenishment(FromBinContent) AND (WhseSource = WhseSource::"Movement Worksheet")))
            THEN BEGIN
              CalcBinAvailQtyToPick(AvailableQtyBase,FromBinContent,TempWhseActivLine2);
              IF TotalQtytoPickBase < AvailableQtyBase THEN
                AvailableQtyBase := TotalQtytoPickBase;

              IF AvailableQtyBase > 0 THEN BEGIN
                ToQtyToPickBase := CalcQtyToPickBase(FromBinContent,AvailableQtyBase,TempWhseActivLine2."Qty. (Base)");
                IF AvailableQtyBase > ToQtyToPickBase THEN
                  AvailableQtyBase := ToQtyToPickBase;

                UpdateQuantitiesToPick(
                  AvailableQtyBase,
                  "Qty. per Unit of Measure",FromQtyToPick,FromQtyToPickBase,
                  "Qty. per Unit of Measure",ToQtyToPick,ToQtyToPickBase,
                  TotalQtytoPick,TotalQtytoPickBase);

                CreateTempActivityLine(
                  LocationCode,"Bin Code",UnitofMeasureCode,"Qty. per Unit of Measure",FromQtyToPick,FromQtyToPickBase,1,0);
                CreateTempActivityLine(
                  LocationCode,ToBinCode,UnitofMeasureCode,"Qty. per Unit of Measure",ToQtyToPick,ToQtyToPickBase,2,0);

                TotalAvailQtyToPickBase := TotalAvailQtyToPickBase - ToQtyToPickBase;
              END;
            END;
          UNTIL (NEXT = 0) OR (TotalQtytoPickBase = 0);
        END;
      END;
    END;

    LOCAL PROCEDURE FindBreakBulkBin@15(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10];ToUOMCode@1014 : Code[10];ToBinCode@1011 : Code[20];ToQtyPerUOM@1004 : Decimal;VAR TempWhseActivLine2@1012 : TEMPORARY Record 5767;VAR TotalQtytoPick@1005 : Decimal;VAR TempWhseItemTrkgLine@1017 : Record 6550;CrossDock@1008 : Boolean;VAR TotalQtytoPickBase@1000000000 : Decimal);
    VAR
      FromItemUOM@1000 : Record 5404;
      FromBinContent@1006 : Record 7302;
      FromQtyToPick@1015 : Decimal;
      FromQtyToPickBase@1009 : Decimal;
      ToQtyToPick@1021 : Decimal;
      ToQtyToPickBase@1020 : Decimal;
      QtyAvailableBase@1010 : Decimal;
      TotalAvailQtyToPickBase@1019 : Decimal;
    BEGIN
      //Directed put-away and pick
      GetBin(LocationCode,ToBinCode);

      TotalAvailQtyToPickBase :=
        CalcTotalAvailQtyToPick(
          LocationCode,ItemNo,VariantCode,TempWhseItemTrkgLine."Lot No.",TempWhseItemTrkgLine."Serial No.",
          SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,0);
      IF TotalAvailQtyToPickBase < 0 THEN
        TotalAvailQtyToPickBase := 0;

      FromItemUOM.SETCURRENTKEY("Item No.","Qty. per Unit of Measure");
      FromItemUOM.SETRANGE("Item No.",ItemNo);
      FromItemUOM.SETFILTER("Qty. per Unit of Measure",'>=%1',ToQtyPerUOM);
      FromItemUOM.SETFILTER(Code,'<>%1',ToUOMCode);
      IF FromItemUOM.FIND('-') THEN BEGIN
        WITH FromBinContent DO BEGIN
          REPEAT
            IF BinContentExists(
                 FromBinContent,ItemNo,LocationCode,FromItemUOM.Code,VariantCode,CrossDock,LNRequired,SNRequired)
            THEN
              REPEAT
                IF ("Bin Code" <> ToBinCode) AND
                   ((UseForPick(FromBinContent) AND (WhseSource <> WhseSource::"Movement Worksheet")) OR
                    (UseForReplenishment(FromBinContent) AND (WhseSource = WhseSource::"Movement Worksheet")))
                THEN BEGIN
                  // Check and use bulk that has previously been broken
                  QtyAvailableBase := CalcBinAvailQtyInBreakbulk(TempWhseActivLine2,FromBinContent,ToUOMCode);
                  IF QtyAvailableBase > 0 THEN BEGIN
                    UpdateQuantitiesToPick(
                      QtyAvailableBase,
                      ToQtyPerUOM,FromQtyToPick,FromQtyToPickBase,
                      ToQtyPerUOM,ToQtyToPick,ToQtyToPickBase,
                      TotalQtytoPick,TotalQtytoPickBase);

                    CreateBreakBulkTempLines(
                      "Location Code",ToUOMCode,ToUOMCode,
                      "Bin Code",ToBinCode,ToQtyPerUOM,ToQtyPerUOM,
                      0,FromQtyToPick,FromQtyToPickBase,ToQtyToPick,ToQtyToPickBase);
                  END;
                  IF TotalQtytoPickBase <= 0 THEN
                    EXIT;

                  // Now break bulk and use
                  QtyAvailableBase := CalcBinAvailQtyToBreakbulk(TempWhseActivLine2,FromBinContent);
                  IF QtyAvailableBase > 0 THEN BEGIN
                    FromItemUOM.GET(ItemNo,"Unit of Measure Code");
                    UpdateQuantitiesToPick(
                      QtyAvailableBase,
                      FromItemUOM."Qty. per Unit of Measure",FromQtyToPick,FromQtyToPickBase,
                      ToQtyPerUOM,ToQtyToPick,ToQtyToPickBase,
                      TotalQtytoPick,TotalQtytoPickBase);

                    BreakbulkNo := BreakbulkNo + 1;
                    CreateBreakBulkTempLines(
                      "Location Code","Unit of Measure Code",ToUOMCode,
                      "Bin Code",ToBinCode,"Qty. per Unit of Measure",ToQtyPerUOM,
                      BreakbulkNo,ToQtyToPick,ToQtyToPickBase,FromQtyToPick,FromQtyToPickBase);
                  END;
                  IF TotalQtytoPickBase <= 0 THEN
                    EXIT;
                END;
              UNTIL NEXT = 0;
          UNTIL FromItemUOM.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE FindSmallerUOMBin@26(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10];UnitofMeasureCode@1014 : Code[10];ToBinCode@1011 : Code[20];QtyPerUnitOfMeasure@1004 : Decimal;VAR TotalQtytoPick@1005 : Decimal;VAR TempWhseItemTrkgLine@1010 : Record 6550;CrossDock@1000 : Boolean;VAR TotalQtytoPickBase@1000000000 : Decimal);
    VAR
      ItemUOM@1007 : Record 5404;
      FromBinContent@1006 : Record 7302;
      FromQtyToPick@1018 : Decimal;
      FromQtyToPickBase@1013 : Decimal;
      ToQtyToPick@1015 : Decimal;
      ToQtyToPickBase@1009 : Decimal;
      QtyAvailableBase@1016 : Decimal;
      TotalAvailQtyToPickBase@1017 : Decimal;
    BEGIN
      //Directed put-away and pick
      TotalAvailQtyToPickBase :=
        CalcTotalAvailQtyToPick(
          LocationCode,ItemNo,VariantCode,
          TempWhseItemTrkgLine."Lot No.",TempWhseItemTrkgLine."Serial No.",
          SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,0);
      IF TotalAvailQtyToPickBase < 0 THEN
        TotalAvailQtyToPickBase := 0;

      GetBin(LocationCode,ToBinCode);

      ItemUOM.SETCURRENTKEY("Item No.","Qty. per Unit of Measure");
      ItemUOM.SETRANGE("Item No.",ItemNo);
      ItemUOM.SETFILTER("Qty. per Unit of Measure",'<%1',QtyPerUnitOfMeasure);
      ItemUOM.SETFILTER(Code,'<>%1',UnitofMeasureCode);
      ItemUOM.ASCENDING(FALSE);
      IF ItemUOM.FIND('-') THEN
        WITH FromBinContent DO
          REPEAT
            IF BinContentExists(FromBinContent,ItemNo,LocationCode,ItemUOM.Code,VariantCode,CrossDock,LNRequired,SNRequired) THEN
              REPEAT
                IF ("Bin Code" <> ToBinCode) AND
                   ((UseForPick(FromBinContent) AND (WhseSource <> WhseSource::"Movement Worksheet")) OR
                    (UseForReplenishment(FromBinContent) AND (WhseSource = WhseSource::"Movement Worksheet")))
                THEN BEGIN
                  CalcBinAvailQtyFromSmallerUOM(QtyAvailableBase,FromBinContent);
                  IF QtyAvailableBase > 0 THEN BEGIN
                    UpdateQuantitiesToPick(
                      QtyAvailableBase,
                      ItemUOM."Qty. per Unit of Measure",FromQtyToPick,FromQtyToPickBase,
                      QtyPerUnitOfMeasure,ToQtyToPick,ToQtyToPickBase,
                      TotalQtytoPick,TotalQtytoPickBase);

                    CreateTempActivityLine(
                      LocationCode,"Bin Code","Unit of Measure Code",
                      ItemUOM."Qty. per Unit of Measure",FromQtyToPick,FromQtyToPickBase,1,0);
                    CreateTempActivityLine(
                      LocationCode,ToBinCode,UnitofMeasureCode,
                      QtyPerUnitOfMeasure,ToQtyToPick,ToQtyToPickBase,2,0);

                    TotalAvailQtyToPickBase := TotalAvailQtyToPickBase - ToQtyToPickBase;
                  END;
                END;
              UNTIL (NEXT = 0) OR (TotalQtytoPickBase = 0);
          UNTIL (ItemUOM.NEXT = 0) OR (TotalQtytoPickBase = 0);
    END;

    PROCEDURE CalcBinAvailQtyToPick@5(VAR QtyToPickBase@1001 : Decimal;VAR BinContent@1002 : Record 7302;VAR TempWhseActivLine@1000 : Record 5767);
    VAR
      AvailableQtyBase@1004 : Decimal;
    BEGIN
      WITH TempWhseActivLine DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type",
          "Variant Code","Unit of Measure Code","Breakbulk No.");
        SETRANGE("Item No.",BinContent."Item No.");
        SETRANGE("Bin Code",BinContent."Bin Code");
        SETRANGE("Location Code",BinContent."Location Code");
        SETRANGE("Unit of Measure Code",BinContent."Unit of Measure Code");
        SETRANGE("Variant Code",BinContent."Variant Code");
        IF WhseItemTrkgExists THEN BEGIN
          IF LNRequired THEN
            SETRANGE("Lot No.",TempWhseItemTrkgLine."Lot No.")
          ELSE
            SETFILTER("Lot No.",'%1|%2',TempWhseItemTrkgLine."Lot No.",'');
          IF SNRequired THEN
            SETRANGE("Serial No.",TempWhseItemTrkgLine."Serial No.")
          ELSE
            SETFILTER("Serial No.",'%1|%2',TempWhseItemTrkgLine."Serial No.",'');
        END;

        IF Location."Allow Breakbulk" THEN BEGIN
          SETRANGE("Action Type","Action Type"::Place);
          SETFILTER("Breakbulk No.",'<>0');
          CALCSUMS("Qty. (Base)");
          AvailableQtyBase := "Qty. (Base)";
        END;

        SETRANGE("Action Type","Action Type"::Take);
        SETRANGE("Breakbulk No.",0);
        CALCSUMS("Qty. (Base)");
      END;

      QtyToPickBase := BinContent.CalcQtyAvailToPick(AvailableQtyBase - TempWhseActivLine."Qty. (Base)");
    END;

    PROCEDURE CalcBinAvailQtyToBreakbulk@83(VAR TempWhseActivLine2@1001 : Record 5767;VAR BinContent@1000 : Record 7302) QtyToPickBase : Decimal;
    BEGIN
      WITH BinContent DO BEGIN
        CALCFIELDS("Quantity (Base)","Pick Quantity (Base)","Negative Adjmt. Qty. (Base)");
        QtyToPickBase := "Quantity (Base)" - "Pick Quantity (Base)" - "Negative Adjmt. Qty. (Base)";
      END;
      IF QtyToPickBase <= 0 THEN
        EXIT(0);

      WITH TempWhseActivLine2 DO BEGIN
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type",
          "Variant Code","Unit of Measure Code","Breakbulk No.");
        SETRANGE("Action Type","Action Type"::Take);
        SETRANGE("Location Code",BinContent."Location Code");
        SETRANGE("Bin Code",BinContent."Bin Code");
        SETRANGE("Item No.",BinContent."Item No.");
        SETRANGE("Unit of Measure Code",BinContent."Unit of Measure Code");
        SETRANGE("Variant Code",BinContent."Variant Code");
        IF WhseItemTrkgExists THEN BEGIN
          IF LNRequired THEN
            SETRANGE("Lot No.",TempWhseItemTrkgLine."Lot No.")
          ELSE
            SETFILTER("Lot No.",'%1|%2',TempWhseItemTrkgLine."Lot No.",'');
          IF SNRequired THEN
            SETRANGE("Serial No.",TempWhseItemTrkgLine."Serial No.")
          ELSE
            SETFILTER("Serial No.",'%1|%2',TempWhseItemTrkgLine."Serial No.",'');
        END ELSE BEGIN
          SETRANGE("Lot No.");
          SETRANGE("Serial No.");
        END;
        SETRANGE("Breakbulk No.");
        CALCSUMS("Qty. (Base)");
        QtyToPickBase := QtyToPickBase - "Qty. (Base)";
        EXIT(QtyToPickBase);
      END;
    END;

    PROCEDURE CalcBinAvailQtyInBreakbulk@18(VAR TempWhseActivLine2@1000 : Record 5767;VAR BinContent@1001 : Record 7302;ToUOMCode@1003 : Code[10]) QtyToPickBase : Decimal;
    BEGIN
      WITH TempWhseActivLine2 DO BEGIN
        IF (MaxNoOfSourceDoc > 1) OR (MaxNoOfLines <> 0) THEN
          EXIT(0);

        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type",
          "Variant Code","Unit of Measure Code","Breakbulk No.");
        SETRANGE("Action Type","Action Type"::Take);
        SETRANGE("Location Code",BinContent."Location Code");
        SETRANGE("Bin Code",BinContent."Bin Code");
        SETRANGE("Item No.",BinContent."Item No.");
        SETRANGE("Unit of Measure Code",ToUOMCode);
        SETRANGE("Variant Code",BinContent."Variant Code");
        IF WhseItemTrkgExists THEN BEGIN
          IF LNRequired THEN
            SETRANGE("Lot No.",TempWhseItemTrkgLine."Lot No.")
          ELSE
            SETFILTER("Lot No.",'%1|%2',TempWhseItemTrkgLine."Lot No.",'');
          IF SNRequired THEN
            SETRANGE("Serial No.",TempWhseItemTrkgLine."Serial No.")
          ELSE
            SETFILTER("Serial No.",'%1|%2',TempWhseItemTrkgLine."Serial No.",'');
        END ELSE BEGIN
          SETRANGE("Lot No.");
          SETRANGE("Serial No.");
        END;
        SETRANGE("Breakbulk No.",0);
        CALCSUMS("Qty. (Base)");
        QtyToPickBase := "Qty. (Base)";

        SETRANGE("Action Type","Action Type"::Place);
        SETFILTER("Breakbulk No.",'<>0');
        SETRANGE("No.",FORMAT(TempNo));
        IF MaxNoOfSourceDoc = 1 THEN BEGIN
          SETRANGE("Source Type",WhseWkshLine."Source Type");
          SETRANGE("Source Subtype",WhseWkshLine."Source Subtype");
          SETRANGE("Source No.",WhseWkshLine."Source No.");
        END;
        CALCSUMS("Qty. (Base)");
        QtyToPickBase := "Qty. (Base)" - QtyToPickBase;
        EXIT(QtyToPickBase);
      END;
    END;

    PROCEDURE CalcBinAvailQtyFromSmallerUOM@24(VAR AvailableQtyBase@1001 : Decimal;VAR BinContent@1000 : Record 7302);
    BEGIN
      WITH BinContent DO BEGIN
        CALCFIELDS("Quantity (Base)","Pick Quantity (Base)","Negative Adjmt. Qty. (Base)");
        AvailableQtyBase := "Quantity (Base)" - "Pick Quantity (Base)" - "Negative Adjmt. Qty. (Base)";
      END;
      IF AvailableQtyBase <= 0 THEN
        EXIT;

      WITH TempWhseActivLine DO BEGIN
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type",
          "Variant Code","Unit of Measure Code","Breakbulk No.");

        SETRANGE("Item No.",BinContent."Item No.");
        SETRANGE("Bin Code",BinContent."Bin Code");
        SETRANGE("Location Code",BinContent."Location Code");
        SETRANGE("Action Type","Action Type"::Take);
        SETRANGE("Variant Code",BinContent."Variant Code");
        SETRANGE("Unit of Measure Code",BinContent."Unit of Measure Code");
        IF WhseItemTrkgExists THEN BEGIN
          IF LNRequired THEN
            SETRANGE("Lot No.",TempWhseItemTrkgLine."Lot No.")
          ELSE
            SETFILTER("Lot No.",'%1|%2',TempWhseItemTrkgLine."Lot No.",'');
          IF SNRequired THEN
            SETRANGE("Serial No.",TempWhseItemTrkgLine."Serial No.")
          ELSE
            SETFILTER("Serial No.",'%1|%2',TempWhseItemTrkgLine."Serial No.",'');
        END ELSE BEGIN
          SETRANGE("Lot No.");
          SETRANGE("Serial No.");
        END;
        CALCSUMS("Qty. (Base)");
        AvailableQtyBase := AvailableQtyBase - "Qty. (Base)";

        SETRANGE("Action Type","Action Type"::Place);
        SETFILTER("Breakbulk No.",'<>0');
        CALCSUMS("Qty. (Base)");
        AvailableQtyBase := AvailableQtyBase + "Qty. (Base)";
      END;
    END;

    LOCAL PROCEDURE CreateBreakBulkTempLines@34(LocationCode@1008 : Code[10];FromUOMCode@1007 : Code[10];ToUOMCode@1005 : Code[10];FromBinCode@1006 : Code[20];ToBinCode@1004 : Code[20];FromQtyPerUOM@1009 : Decimal;ToQtyPerUOM@1003 : Decimal;BreakbulkNo2@1010 : Integer;ToQtyToPick@1012 : Decimal;ToQtyToPickBase@1001 : Decimal;FromQtyToPick@1002 : Decimal;FromQtyToPickBase@1000000000 : Decimal);
    VAR
      QtyToBreakBulk@1000000001 : Decimal;
    BEGIN
      //Directed put-away and pick
      IF FromUOMCode <> ToUOMCode THEN BEGIN
        CreateTempActivityLine(
          LocationCode,FromBinCode,FromUOMCode,FromQtyPerUOM,FromQtyToPick,FromQtyToPickBase,1,BreakbulkNo2);

        IF FromQtyToPickBase = ToQtyToPickBase THEN
          QtyToBreakBulk := ToQtyToPick
        ELSE
          QtyToBreakBulk := ROUND(FromQtyToPick * FromQtyPerUOM / ToQtyPerUOM,0.00001);
        CreateTempActivityLine(
          LocationCode,FromBinCode,ToUOMCode,ToQtyPerUOM,QtyToBreakBulk,FromQtyToPickBase,2,BreakbulkNo2);
      END;
      CreateTempActivityLine(LocationCode,FromBinCode,ToUOMCode,ToQtyPerUOM,ToQtyToPick,ToQtyToPickBase,1,0);
      CreateTempActivityLine(LocationCode,ToBinCode,ToUOMCode,ToQtyPerUOM,ToQtyToPick,ToQtyToPickBase,2,0);
    END;

    PROCEDURE CreateWhseDocument@4(VAR FirstWhseDocNo@1009 : Code[20];VAR LastWhseDocNo@1008 : Code[20]);
    VAR
      WhseActivLine@1006 : Record 5767;
      OldNo@1002 : Code[20];
      OldSourceNo@1001 : Code[20];
      OldLocationCode@1010 : Code[10];
      OldBinCode@1007 : Code[20];
      OldZoneCode@1000 : Code[10];
      NoOfLines@1004 : Integer;
      NoOfSourceDoc@1005 : Integer;
      WhseDocCreated@1003 : Boolean;
    BEGIN
      TempWhseActivLine.RESET;
      IF NOT TempWhseActivLine.FIND('-') THEN
        ERROR(Text000);
      WhseActivHeader.LOCKTABLE;
      IF WhseActivHeader.FIND('+') THEN;
      WhseActivLine.LOCKTABLE;
      IF WhseActivLine.FIND('+') THEN;

      TempWhseActivLine.SETCURRENTKEY(
        "Activity Type","No.","Location Code","Source Document",
        "Source No.","Action Type","Zone Code");
      IF WhseSource = WhseSource::"Movement Worksheet" THEN
        TempWhseActivLine.SETRANGE("Activity Type",TempWhseActivLine."Activity Type"::Movement)
      ELSE
        TempWhseActivLine.SETRANGE("Activity Type",TempWhseActivLine."Activity Type"::Pick);

      NoOfLines := 0;
      NoOfSourceDoc := 0;

      REPEAT
        GetLocation(TempWhseActivLine."Location Code");
        TempWhseActivLine.SETRANGE("Location Code",TempWhseActivLine."Location Code");
        IF Location."Bin Mandatory" THEN
          TempWhseActivLine.SETRANGE("Action Type",TempWhseActivLine."Action Type"::Take)
        ELSE
          TempWhseActivLine.SETRANGE("Action Type",TempWhseActivLine."Action Type"::" ");

        IF NOT TempWhseActivLine.FIND('-') THEN
          EXIT;

        IF PerBin THEN
          TempWhseActivLine.SETRANGE("Bin Code",TempWhseActivLine."Bin Code");
        IF PerZone THEN
          TempWhseActivLine.SETRANGE("Zone Code",TempWhseActivLine."Zone Code");

        REPEAT
          IF PerBin THEN BEGIN
            IF TempWhseActivLine."Bin Code" <> OldBinCode THEN BEGIN
              CreateWhseActivHeader(
                TempWhseActivLine."Location Code",FirstWhseDocNo,LastWhseDocNo,
                NoOfSourceDoc,NoOfLines,WhseDocCreated);
              CreateWhseDocLine;
            END ELSE
              CreateNewWhseDoc(
                OldNo,OldSourceNo,OldLocationCode,FirstWhseDocNo,LastWhseDocNo,
                NoOfSourceDoc,NoOfLines,WhseDocCreated);
          END ELSE BEGIN
            IF PerZone THEN BEGIN
              IF TempWhseActivLine."Zone Code" <> OldZoneCode THEN BEGIN
                CreateWhseActivHeader(
                  TempWhseActivLine."Location Code",FirstWhseDocNo,LastWhseDocNo,
                  NoOfSourceDoc,NoOfLines,WhseDocCreated);
                CreateWhseDocLine;
              END ELSE
                CreateNewWhseDoc(
                  OldNo,OldSourceNo,OldLocationCode,FirstWhseDocNo,LastWhseDocNo,
                  NoOfSourceDoc,NoOfLines,WhseDocCreated);
            END ELSE
              CreateNewWhseDoc(
                OldNo,OldSourceNo,OldLocationCode,FirstWhseDocNo,LastWhseDocNo,
                NoOfSourceDoc,NoOfLines,WhseDocCreated);
          END;

          OldZoneCode := TempWhseActivLine."Zone Code";
          OldBinCode := TempWhseActivLine."Bin Code";
          OldNo := TempWhseActivLine."No.";
          OldSourceNo := TempWhseActivLine."Source No.";
          OldLocationCode := TempWhseActivLine."Location Code";
        UNTIL TempWhseActivLine.NEXT = 0;
        TempWhseActivLine.SETRANGE("Bin Code");
        TempWhseActivLine.SETRANGE("Zone Code");
        TempWhseActivLine.SETRANGE("Location Code");
        TempWhseActivLine.SETRANGE("Action Type");
        IF NOT TempWhseActivLine.FIND('-') THEN
          EXIT;

      UNTIL FALSE;
    END;

    LOCAL PROCEDURE CreateNewWhseDoc@12(OldNo@1001 : Code[20];OldSourceNo@1004 : Code[20];OldLocationCode@1007 : Code[10];VAR FirstWhseDocNo@1005 : Code[20];VAR LastWhseDocNo@1006 : Code[20];VAR NoOfSourceDoc@1002 : Integer;VAR NoOfLines@1000 : Integer;VAR WhseDocCreated@1003 : Boolean);
    BEGIN
      IF (TempWhseActivLine."No." <> OldNo) OR
         (TempWhseActivLine."Location Code" <> OldLocationCode)
      THEN BEGIN
        CreateWhseActivHeader(
          TempWhseActivLine."Location Code",FirstWhseDocNo,LastWhseDocNo,
          NoOfSourceDoc,NoOfLines,WhseDocCreated);
        CreateWhseDocLine;
      END ELSE BEGIN
        NoOfLines := NoOfLines + 1;
        IF TempWhseActivLine."Source No." <> OldSourceNo THEN
          NoOfSourceDoc := NoOfSourceDoc + 1;
        IF (MaxNoOfSourceDoc > 0) AND (NoOfSourceDoc > MaxNoOfSourceDoc) THEN
          CreateWhseActivHeader(
            TempWhseActivLine."Location Code",FirstWhseDocNo,LastWhseDocNo,
            NoOfSourceDoc,NoOfLines,WhseDocCreated);
        IF (MaxNoOfLines > 0) AND (NoOfLines > MaxNoOfLines) THEN
          CreateWhseActivHeader(
            TempWhseActivLine."Location Code",FirstWhseDocNo,LastWhseDocNo,
            NoOfSourceDoc,NoOfLines,WhseDocCreated);
        CreateWhseDocLine;
      END;
    END;

    LOCAL PROCEDURE CreateWhseActivHeader@7(LocationCode@1005 : Code[10];VAR FirstWhseDocNo@1004 : Code[20];VAR LastWhseDocNo@1003 : Code[20];VAR NoOfSourceDoc@1001 : Integer;VAR NoOfLines@1002 : Integer;VAR WhseDocCreated@1000 : Boolean);
    BEGIN
      WhseActivHeader.INIT;
      WhseActivHeader."No." := '';

      IF WhseDocType = WhseDocType::Movement THEN
        WhseActivHeader.Type := WhseActivHeader.Type::Movement
      ELSE
        WhseActivHeader.Type := WhseActivHeader.Type::Pick;

      WhseActivHeader."Location Code" := LocationCode;
      IF AssignedID <> '' THEN
        WhseActivHeader.VALIDATE("Assigned User ID",AssignedID);
      WhseActivHeader."Sorting Method" := SortPick;
      WhseActivHeader."Breakbulk Filter" := BreakbulkFilter;
      WhseActivHeader.INSERT(TRUE);

      NoOfLines := 1 ;
      NoOfSourceDoc := 1;

      IF NOT WhseDocCreated THEN BEGIN
        FirstWhseDocNo := WhseActivHeader."No.";
        WhseDocCreated := TRUE;
      END;
      LastWhseDocNo := WhseActivHeader."No.";
    END;

    LOCAL PROCEDURE CreateWhseDocLine@8();
    VAR
      WhseActivLine@1003 : Record 5767;
      LineNo@1002 : Integer;
    BEGIN
      TempWhseActivLine.SETRANGE("Breakbulk No.",0);
      TempWhseActivLine.FIND('-');
      WhseActivLine.SETRANGE("Activity Type",WhseActivHeader.Type);
      WhseActivLine.SETRANGE("No.",WhseActivHeader."No.");
      IF WhseActivLine.FIND('+') THEN
        LineNo := WhseActivLine."Line No."
      ELSE
        LineNo := 0;

      ItemTrackingMgt.CheckWhseItemTrkgSetup(
        TempWhseActivLine."Item No.",SNRequired,LNRequired,FALSE);

      LineNo := LineNo + 10000;
      WhseActivLine.INIT;
      WhseActivLine := TempWhseActivLine;
      WhseActivLine."No." := WhseActivHeader."No.";
      IF NOT (WhseActivLine."Whse. Document Type" IN [
              WhseActivLine."Whse. Document Type"::"Internal Pick",
              WhseActivLine."Whse. Document Type"::"Movement Worksheet"])
      THEN
        WhseMgt.GetSourceDocument(
          WhseActivLine."Source Document",
          WhseActivLine."Source Type",
          WhseActivLine."Source Subtype");

      IF Location."Bin Mandatory" AND (NOT SNRequired) THEN
        CreateWhseDocTakeLine(WhseActivLine,LineNo)
      ELSE
        TempWhseActivLine.DELETE;

      WhseActivLine."Line No." := LineNo;
      IF DoNotFillQtytoHandle THEN BEGIN
        WhseActivLine."Qty. to Handle" := 0;
        WhseActivLine."Qty. to Handle (Base)" := 0;
        WhseActivLine.Cubage := 0;
        WhseActivLine.Weight := 0;
      END;
      WhseActivLine.INSERT;

      IF Location."Bin Mandatory" THEN
        CreateWhseDocPlaceLine(WhseActivLine.Quantity,WhseActivLine."Qty. (Base)",LineNo);
    END;

    LOCAL PROCEDURE CreateWhseDocTakeLine@25(VAR WhseActivLine@1000 : Record 5767;VAR LineNo@1002 : Integer);
    VAR
      WhseActivLine2@1004 : Record 5767;
      TempWhseActivLine2@1003 : TEMPORARY Record 5767;
      TempWhseActivLine3@1005 : TEMPORARY Record 5767;
    BEGIN
      TempWhseActivLine2.COPY(TempWhseActivLine);
      TempWhseActivLine.SETCURRENTKEY(
        "Whse. Document No.","Whse. Document Type","Activity Type","Whse. Document Line No.","Action Type");
      TempWhseActivLine.DELETE;

      TempWhseActivLine.SETRANGE("Whse. Document Type",TempWhseActivLine2."Whse. Document Type");
      TempWhseActivLine.SETRANGE("Whse. Document No.",TempWhseActivLine2."Whse. Document No.");
      TempWhseActivLine.SETRANGE("Activity Type",TempWhseActivLine2."Activity Type");
      TempWhseActivLine.SETRANGE("Whse. Document Line No.",TempWhseActivLine2."Whse. Document Line No.");
      TempWhseActivLine.SETRANGE("Action Type",TempWhseActivLine2."Action Type"::Take);
      TempWhseActivLine.SETRANGE("Source Subline No.",TempWhseActivLine2."Source Subline No.");
      TempWhseActivLine.SETRANGE("No.",TempWhseActivLine2."No.");
      TempWhseActivLine.SETFILTER("Line No.",'>%1',TempWhseActivLine2."Line No.");
      TempWhseActivLine.SETRANGE("Bin Code",TempWhseActivLine2."Bin Code");
      TempWhseActivLine.SETRANGE("Unit of Measure Code",WhseActivLine."Unit of Measure Code");
      TempWhseActivLine.SETRANGE("Zone Code");
      TempWhseActivLine.SETRANGE("Breakbulk No.",0);
      TempWhseActivLine.SETRANGE("Serial No.",TempWhseActivLine2."Serial No.");
      TempWhseActivLine.SETRANGE("Lot No.",TempWhseActivLine2."Lot No.");

      IF TempWhseActivLine.FIND('-') THEN BEGIN
        REPEAT
          WhseActivLine.Quantity := WhseActivLine.Quantity + TempWhseActivLine.Quantity;
        UNTIL TempWhseActivLine.NEXT = 0;
        TempWhseActivLine.DELETEALL;
        WhseActivLine.VALIDATE(Quantity);
      END;

      // insert breakbulk lines
      IF Location."Directed Put-away and Pick" THEN BEGIN
        TempWhseActivLine.SETRANGE("Line No.");
        TempWhseActivLine.SETRANGE("Unit of Measure Code");
        TempWhseActivLine.SETFILTER("Breakbulk No.",'<>0');
        IF TempWhseActivLine.FIND('-') THEN BEGIN
          REPEAT
            WhseActivLine2.INIT;
            WhseActivLine2 := TempWhseActivLine;
            WhseActivLine2."No." := WhseActivHeader."No.";
            WhseActivLine2."Line No." := LineNo;
            WhseActivLine2."Source Document" := WhseActivLine."Source Document";

            IF DoNotFillQtytoHandle THEN BEGIN
              WhseActivLine2."Qty. to Handle" := 0;
              WhseActivLine2."Qty. to Handle (Base)" := 0;
              WhseActivLine2.Cubage := 0;
              WhseActivLine2.Weight := 0;
            END;
            WhseActivLine2.INSERT;

            TempWhseActivLine.DELETE;
            LineNo := LineNo + 10000;

            TempWhseActivLine3.COPY(TempWhseActivLine);
            TempWhseActivLine.SETRANGE("Action Type",TempWhseActivLine."Action Type"::Place);
            TempWhseActivLine.SETRANGE("Line No.");
            TempWhseActivLine.SETRANGE("Unit of Measure Code",WhseActivLine."Unit of Measure Code");
            TempWhseActivLine.SETRANGE("Breakbulk No.",TempWhseActivLine."Breakbulk No.");
            TempWhseActivLine.FIND('-');

            WhseActivLine2.INIT;
            WhseActivLine2 := TempWhseActivLine;
            WhseActivLine2."No." := WhseActivHeader."No.";
            WhseActivLine2."Line No." := LineNo;
            WhseActivLine2."Source Document" := WhseActivLine."Source Document";

            IF DoNotFillQtytoHandle THEN BEGIN
              WhseActivLine2."Qty. to Handle" := 0;
              WhseActivLine2."Qty. to Handle (Base)" := 0;
              WhseActivLine2.Cubage := 0;
              WhseActivLine2.Weight := 0;
            END;

            WhseActivLine2."Original Breakbulk" :=
              WhseActivLine."Qty. (Base)" = WhseActivLine2."Qty. (Base)";
            IF BreakbulkFilter THEN
              WhseActivLine2.Breakbulk := WhseActivLine2."Original Breakbulk";
            WhseActivLine2.INSERT;

            TempWhseActivLine.DELETE;
            LineNo := LineNo + 10000;

            TempWhseActivLine.COPY(TempWhseActivLine3);
            WhseActivLine."Original Breakbulk" := WhseActivLine2."Original Breakbulk";
            IF BreakbulkFilter THEN
              WhseActivLine.Breakbulk := WhseActivLine."Original Breakbulk";
          UNTIL TempWhseActivLine.NEXT = 0;
        END;
      END;

      TempWhseActivLine.COPY(TempWhseActivLine2);
    END;

    LOCAL PROCEDURE CreateWhseDocPlaceLine@27(PickQty@1004 : Decimal;PickQtyBase@1005 : Decimal;VAR LineNo@1001 : Integer);
    VAR
      WhseActivLine@1000 : Record 5767;
      TempWhseActivLine2@1002 : TEMPORARY Record 5767;
      TempWhseActivLine3@1003 : TEMPORARY Record 5767;
    BEGIN
      TempWhseActivLine2.COPY(TempWhseActivLine);
      TempWhseActivLine.SETCURRENTKEY(
        "Whse. Document No.","Whse. Document Type","Activity Type","Whse. Document Line No.","Action Type");
      TempWhseActivLine.SETRANGE("Whse. Document No.",TempWhseActivLine2."Whse. Document No.");
      TempWhseActivLine.SETRANGE("Whse. Document Type",TempWhseActivLine2."Whse. Document Type");
      TempWhseActivLine.SETRANGE("Activity Type",TempWhseActivLine2."Activity Type");
      TempWhseActivLine.SETRANGE("Whse. Document Line No.",TempWhseActivLine2."Whse. Document Line No.");
      TempWhseActivLine.SETRANGE("Source Subline No.",TempWhseActivLine2."Source Subline No.");
      TempWhseActivLine.SETRANGE("No.",TempWhseActivLine2."No.");
      TempWhseActivLine.SETRANGE("Action Type",TempWhseActivLine2."Action Type"::Place);
      TempWhseActivLine.SETFILTER("Line No.",'>%1',TempWhseActivLine2."Line No.");
      TempWhseActivLine.SETRANGE("Bin Code");
      TempWhseActivLine.SETRANGE("Zone Code");
      TempWhseActivLine.SETRANGE("Item No.",TempWhseActivLine2."Item No.");
      TempWhseActivLine.SETRANGE("Variant Code",TempWhseActivLine2."Variant Code");
      TempWhseActivLine.SETRANGE("Breakbulk No.",0);
      TempWhseActivLine.SETRANGE("Serial No.",TempWhseActivLine2."Serial No.");
      TempWhseActivLine.SETRANGE("Lot No.",TempWhseActivLine2."Lot No.");

      IF TempWhseActivLine.FIND('-') THEN
        REPEAT
          LineNo := LineNo + 10000;
          WhseActivLine.INIT;
          WhseActivLine := TempWhseActivLine;

          PickQtyBase := PickQtyBase - WhseActivLine."Qty. (Base)";
          PickQty := PickQty - WhseActivLine.Quantity;

          WhseActivLine."No." := WhseActivHeader."No.";
          WhseActivLine."Line No." := LineNo;

          IF NOT (WhseActivLine."Whse. Document Type" IN [
                  WhseActivLine."Whse. Document Type"::"Internal Pick",
                  WhseActivLine."Whse. Document Type"::"Movement Worksheet"])
          THEN
            WhseMgt.GetSourceDocument(
              WhseActivLine."Source Document",
              WhseActivLine."Source Type",
              WhseActivLine."Source Subtype");

          TempWhseActivLine.DELETE;
          IF PickQtyBase > 0 THEN BEGIN
            TempWhseActivLine3.COPY(TempWhseActivLine);
            TempWhseActivLine.SETRANGE(
              "Unit of Measure Code",WhseActivLine."Unit of Measure Code");
            TempWhseActivLine.SETFILTER("Line No.",'>%1',TempWhseActivLine."Line No.");
            TempWhseActivLine.SETRANGE("No.",TempWhseActivLine2."No.");
            TempWhseActivLine.SETRANGE("Bin Code",WhseActivLine."Bin Code");
            IF TempWhseActivLine.FIND('-') THEN BEGIN
              REPEAT
                IF TempWhseActivLine."Qty. (Base)" >= PickQtyBase THEN BEGIN
                  WhseActivLine.Quantity := WhseActivLine.Quantity + PickQty;
                  WhseActivLine."Qty. (Base)" := WhseActivLine."Qty. (Base)" + PickQtyBase;
                  TempWhseActivLine.VALIDATE(Quantity,TempWhseActivLine.Quantity - PickQty);
                  TempWhseActivLine.MODIFY;
                  PickQty := 0;
                  PickQtyBase := 0;
                END ELSE BEGIN
                  WhseActivLine.Quantity := WhseActivLine.Quantity + TempWhseActivLine.Quantity;
                  WhseActivLine."Qty. (Base)" := WhseActivLine."Qty. (Base)" + TempWhseActivLine."Qty. (Base)";
                  PickQty := PickQty - TempWhseActivLine.Quantity;
                  PickQtyBase := PickQtyBase - TempWhseActivLine."Qty. (Base)";
                  TempWhseActivLine.DELETE;
                END;
              UNTIL (TempWhseActivLine.NEXT = 0) OR (PickQtyBase = 0);
            END ELSE
              IF TempWhseActivLine.DELETE THEN;
            TempWhseActivLine.COPY(TempWhseActivLine3);
          END;

          IF WhseActivLine.Quantity > 0 THEN BEGIN
            TempWhseActivLine3 := WhseActivLine;
            WhseActivLine.VALIDATE(Quantity);
            WhseActivLine."Qty. (Base)" := TempWhseActivLine3."Qty. (Base)";
            WhseActivLine."Qty. Outstanding (Base)" := TempWhseActivLine3."Qty. (Base)";
            WhseActivLine."Qty. to Handle (Base)" := TempWhseActivLine3."Qty. (Base)";;
            IF DoNotFillQtytoHandle THEN BEGIN
              WhseActivLine."Qty. to Handle" := 0;
              WhseActivLine."Qty. to Handle (Base)" := 0;
              WhseActivLine.Cubage := 0;
              WhseActivLine.Weight := 0;
            END;
            WhseActivLine.INSERT;
          END;
        UNTIL (TempWhseActivLine.NEXT = 0) OR (PickQtyBase = 0);

      TempWhseActivLine.COPY(TempWhseActivLine2);
    END;

    LOCAL PROCEDURE AssignSpecEquipment@10(LocationCode@1000 : Code[10];BinCode@1002 : Code[20];ItemNo@1003 : Code[20];VariantCode@1004 : Code[10]) : Code[10];
    BEGIN
      IF (BinCode <> '') AND
         (Location."Special Equipment" =
          Location."Special Equipment"::"According to Bin")
      THEN BEGIN
        GetBin(LocationCode,BinCode);
        IF Bin."Special Equipment Code" <> '' THEN
          EXIT(Bin."Special Equipment Code")
        ELSE BEGIN
          GetSKU(LocationCode,ItemNo,VariantCode);
          IF SKU."Special Equipment Code" <> '' THEN
            EXIT(SKU."Special Equipment Code")
          ELSE BEGIN
            GetItem(ItemNo);
            EXIT(Item."Special Equipment Code");
          END;
        END;
      END ELSE BEGIN
        GetSKU(LocationCode,ItemNo,VariantCode);
        IF SKU."Special Equipment Code" <> '' THEN
          EXIT(SKU."Special Equipment Code")
        ELSE BEGIN
          GetItem(ItemNo);
          IF Item."Special Equipment Code" <> '' THEN
            EXIT(Item."Special Equipment Code")
          ELSE BEGIN
            GetBin(LocationCode,BinCode);
            EXIT(Bin."Special Equipment Code");
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcAvailableQty@48(ItemNo@1002 : Code[20];VariantCode@1001 : Code[10]) : Decimal;
    VAR
      AvailableQtyBase@1004 : Decimal;
      LineReservedQty@1005 : Decimal;
      QtyReservedOnPickShip@1006 : Decimal;
    BEGIN
      GetItem(ItemNo);
      AvailableQtyBase := WMSMgt.CalcInvtAvailQty(Item,Location,VariantCode);

      CASE WhseSource OF
        WhseSource::"Pick Worksheet",WhseSource::"Movement Worksheet":
          LineReservedQty :=
            WMSMgt.CalcLineReservedQtyonInvt(
              WhseWkshLine."Source Type",
              WhseWkshLine."Source Subtype",
              WhseWkshLine."Source No.",
              WhseWkshLine."Source Line No.",
              WhseWkshLine."Source Subline No.",
              '','');
        WhseSource::Shipment:
          LineReservedQty :=
            WMSMgt.CalcLineReservedQtyonInvt(
              WhseShptLine."Source Type",
              WhseShptLine."Source Subtype",
              WhseShptLine."Source No.",
              WhseShptLine."Source Line No.",
              0,
              '','');
        WhseSource::Production:
          LineReservedQty :=
            WMSMgt.CalcLineReservedQtyonInvt(
              DATABASE::"Prod. Order Component",
              ProdOrderCompLine.Status,
              ProdOrderCompLine."Prod. Order No.",
              ProdOrderCompLine."Prod. Order Line No.",
              ProdOrderCompLine."Line No.",
              '','');
      END;

      QtyReservedOnPickShip := CalcReservQtyOnPicksShips(Location.Code,ItemNo,VariantCode);

      EXIT(AvailableQtyBase + LineReservedQty + QtyReservedOnPickShip);
    END;

    PROCEDURE CalcLineReservedQtyonInvt@32(SourceType@1000 : Integer;SourceSubType@1004 : Option;SourceNo@1001 : Code[20];SourceLineNo@1002 : Integer;SourceSubLineNo@1003 : Integer;HandleResPickAndShipQty@1008 : Boolean) : Decimal;
    VAR
      ReservEntry@1005 : Record 337;
      ReservEntry2@1007 : Record 337;
      ReservQtyonInvt@1006 : Decimal;
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");
      ReservEntry.SETRANGE("Source ID",SourceNo);
      IF SourceType = DATABASE::"Prod. Order Component" THEN BEGIN
        ReservEntry.SETRANGE("Source Ref. No.",SourceSubLineNo);
        ReservEntry.SETRANGE("Source Prod. Order Line",SourceLineNo);
      END ELSE
        ReservEntry.SETRANGE("Source Ref. No.",SourceLineNo);
      ReservEntry.SETRANGE("Source Type",SourceType);
      ReservEntry.SETRANGE("Source Subtype",SourceSubType);
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      IF ReservEntry.FIND('-') THEN
        REPEAT
          ReservEntry2.SETRANGE("Entry No.",ReservEntry."Entry No.");
          ReservEntry2.SETRANGE(Positive,TRUE);
          ReservEntry2.SETRANGE("Source Type",DATABASE::"Item Ledger Entry");
          ReservEntry2.SETRANGE(
            "Reservation Status",ReservEntry2."Reservation Status"::Reservation);
          IF ReservEntry2.FIND('-') THEN
            REPEAT
              IF HandleResPickAndShipQty THEN
                ReservQtyonInvt := ReservQtyonInvt + (ReservEntry2."Quantity (Base)" - ReservEntry2."Reserved Pick & Ship Qty.")
              ELSE
                ReservQtyonInvt := ReservQtyonInvt + ReservEntry2."Quantity (Base)";
            UNTIL ReservEntry2.NEXT = 0;
        UNTIL ReservEntry.NEXT = 0;
      EXIT(ReservQtyonInvt);
    END;

    LOCAL PROCEDURE CalcPickQtyAssigned@40(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];UOMCode@1004 : Code[10];BinCode@1005 : Code[20];VAR TempWhseItemTrkgLine@1006 : Record 6550) PickQtyAssigned : Decimal;
    VAR
      TempWhseActivLine2@1003 : TEMPORARY Record 5767;
    BEGIN
      TempWhseActivLine2.COPY(TempWhseActivLine);
      WITH TempWhseActivLine DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type","Variant Code",
          "Unit of Measure Code","Breakbulk No.","Activity Type","Lot No.","Serial No.");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        IF Location."Bin Mandatory" THEN BEGIN
          SETRANGE("Action Type","Action Type"::Take);
          IF BinCode <> '' THEN
            SETRANGE("Bin Code",BinCode)
          ELSE
            SETFILTER("Bin Code",'<>%1','');
        END ELSE BEGIN
          SETRANGE("Action Type","Action Type"::" ");
          SETRANGE("Bin Code",'');
        END;
        SETRANGE("Variant Code",VariantCode);
        IF UOMCode <> '' THEN
          SETRANGE("Unit of Measure Code",UOMCode);
        SETRANGE("Activity Type","Activity Type");
        SETRANGE("Breakbulk No.",0);
        IF WhseItemTrkgExists THEN BEGIN
          SETRANGE("Lot No.",TempWhseItemTrkgLine."Lot No.");
          SETRANGE("Serial No.",TempWhseItemTrkgLine."Serial No.");
        END;
        CALCSUMS("Qty. Outstanding (Base)");
        PickQtyAssigned := "Qty. Outstanding (Base)";
      END;
      TempWhseActivLine.COPY(TempWhseActivLine2);
      EXIT(PickQtyAssigned);
    END;

    LOCAL PROCEDURE UseForPick@35(FromBinContent@1000 : Record 7302) : Boolean;
    BEGIN
      WITH FromBinContent DO BEGIN
        IF "Block Movement" IN ["Block Movement"::Outbound,"Block Movement"::All] THEN
          EXIT(FALSE);

        GetBinType("Bin Type Code");
        EXIT(BinType.Pick);
      END;
    END;

    LOCAL PROCEDURE UseForReplenishment@60(FromBinContent@1000 : Record 7302) : Boolean;
    BEGIN
      WITH FromBinContent DO BEGIN
        IF "Block Movement" IN ["Block Movement"::Outbound,"Block Movement"::All] THEN
          EXIT(FALSE);

        GetBinType("Bin Type Code");
        EXIT(NOT (BinType.Receive OR BinType.Ship));
      END;
    END;

    LOCAL PROCEDURE GetLocation@3(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location := WhseSetupLocation
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBinType@62(BinTypeCode@1000 : Code[10]);
    BEGIN
      IF BinTypeCode = '' THEN
        BinType.INIT
      ELSE
        IF BinType.Code <> BinTypeCode THEN
          BinType.GET(BinTypeCode);
    END;

    LOCAL PROCEDURE GetBin@9(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      IF (Bin."Location Code" <> LocationCode) OR
         (Bin.Code <> BinCode)
      THEN
        IF NOT Bin.GET(LocationCode,BinCode) THEN
          CLEAR(Bin);
    END;

    LOCAL PROCEDURE GetItem@17(ItemNo@1000 : Code[20]);
    BEGIN
      IF Item."No." <> ItemNo THEN
        Item.GET(ItemNo);
    END;

    LOCAL PROCEDURE GetSKU@11(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10]) : Boolean;
    BEGIN
      IF (SKU."Location Code" <> LocationCode) OR
         (SKU."Item No." <> ItemNo) OR
         (SKU."Variant Code" <> VariantCode)
      THEN
        IF NOT SKU.GET(LocationCode,ItemNo,VariantCode) THEN BEGIN
          CLEAR(SKU);
          EXIT(FALSE)
        END;
      EXIT(TRUE);
    END;

    PROCEDURE SetValues@1(AssignedID2@1002 : Code[20];WhseDocument2@1001 : 'Pick Worksheet,Shipment,Movement Worksheet,Internal Pick,Production';SortPick2@1003 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';WhseDocType2@1000 : 'Put-away,Pick,Movement';MaxNoOfSourceDoc2@1005 : Integer;MaxNoOfLines2@1006 : Integer;PerZone2@1004 : Boolean;DoNotFillQtytoHandle2@1009 : Boolean;BreakbulkFilter2@1010 : Boolean;PerBin2@1011 : Boolean);
    BEGIN
      WhseSource := WhseDocument2;
      AssignedID := AssignedID2;
      SortPick := SortPick2;
      WhseDocType := WhseDocType2;
      PerBin := PerBin2;
      IF PerBin THEN
        PerZone := FALSE
      ELSE
        PerZone := PerZone2;
      DoNotFillQtytoHandle := DoNotFillQtytoHandle2;
      MaxNoOfSourceDoc := MaxNoOfSourceDoc2;
      MaxNoOfLines := MaxNoOfLines2;
      BreakbulkFilter := BreakbulkFilter2;
      WhseSetup.GET;
      WhseSetupLocation.GetLocationSetup('',WhseSetupLocation);
      CLEAR(TempWhseActivLine);
      LastWhseItemTrkgLineNo := 0;
    END;

    PROCEDURE SetWhseWkshLine@2(WhseWkshLine2@1000 : Record 7326;TempNo2@1001 : Integer);
    BEGIN
      WhseWkshLine := WhseWkshLine2;
      TempNo := TempNo2;
      SetSource(
        WhseWkshLine2."Source Type",
        WhseWkshLine2."Source Subtype",
        WhseWkshLine2."Source No.",
        WhseWkshLine2."Source Line No.",
        WhseWkshLine2."Source Subline No.");
    END;

    PROCEDURE SetWhseShipment@16(WhseShptLine2@1000 : Record 7321;TempNo2@1001 : Integer;ShippingAgentCode2@1004 : Code[10];ShippingAgentServiceCode2@1003 : Code[10];ShipmentMethodCode2@1002 : Code[10]);
    BEGIN
      WhseShptLine := WhseShptLine2;
      TempNo := TempNo2;
      ShippingAgentCode := ShippingAgentCode2;
      ShippingAgentServiceCode := ShippingAgentServiceCode2;
      ShipmentMethodCode := ShipmentMethodCode2;
      SetSource(
        WhseShptLine2."Source Type",
        WhseShptLine2."Source Subtype",
        WhseShptLine2."Source No.",
        WhseShptLine2."Source Line No.",
        0);
    END;

    PROCEDURE SetWhseInternalPickLine@23(WhseInternalPickLine2@1000 : Record 7334;TempNo2@1001 : Integer);
    BEGIN
      WhseInternalPickLine := WhseInternalPickLine2;
      TempNo := TempNo2;
    END;

    PROCEDURE SetProdOrderCompLine@22(ProdOrderCompLine2@1000 : Record 5407;TempNo2@1001 : Integer);
    BEGIN
      ProdOrderCompLine := ProdOrderCompLine2;
      TempNo := TempNo2;
      SetSource(
        DATABASE::"Prod. Order Component",
        ProdOrderCompLine2.Status,
        ProdOrderCompLine2."Prod. Order No.",
        ProdOrderCompLine2."Prod. Order Line No.",
        ProdOrderCompLine2."Line No.");
    END;

    PROCEDURE SetTempWhseItemTrkgLine@28(SourceID@1001 : Code[20];SourceType@1002 : Integer;SourceBatchName@1003 : Code[10];SourceProdOrderLine@1004 : Integer;SourceRefNo@1005 : Integer;LocationCode@1006 : Code[10]);
    VAR
      WhseItemTrkgLine@1000 : Record 6550;
    BEGIN
      TempWhseItemTrkgLine.DELETEALL;
      TempWhseItemTrkgLine.INIT;
      WhseItemTrkgLineCount := 0;
      WhseItemTrkgExists := FALSE;
      WhseItemTrkgLine.RESET;
      WhseItemTrkgLine.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.","Location Code");
      WhseItemTrkgLine.SETRANGE("Source ID",SourceID);
      WhseItemTrkgLine.SETRANGE("Source Type",SourceType);
      WhseItemTrkgLine.SETRANGE("Source Batch Name",SourceBatchName);
      WhseItemTrkgLine.SETRANGE("Source Prod. Order Line",SourceProdOrderLine);
      WhseItemTrkgLine.SETRANGE("Source Ref. No.",SourceRefNo);
      WhseItemTrkgLine.SETRANGE("Location Code",LocationCode);
      IF WhseItemTrkgLine.FIND('-') THEN
        REPEAT
          IF WhseItemTrkgLine."Qty. to Handle (Base)" > 0 THEN BEGIN
            TempWhseItemTrkgLine := WhseItemTrkgLine;
            TempWhseItemTrkgLine."Entry No." := LastWhseItemTrkgLineNo + 1;
            TempWhseItemTrkgLine.INSERT;
            LastWhseItemTrkgLineNo := TempWhseItemTrkgLine."Entry No.";
            WhseItemTrkgExists := TRUE;
            WhseItemTrkgLineCount += 1;
          END;
        UNTIL WhseItemTrkgLine.NEXT = 0;

      SourceTempItemTrkgLine.INIT;
      SourceTempItemTrkgLine."Source Type" := SourceType;
      SourceTempItemTrkgLine."Source ID" := SourceID;
      SourceTempItemTrkgLine."Source Batch Name" := SourceBatchName;
      SourceTempItemTrkgLine."Source Prod. Order Line" := SourceProdOrderLine;
      SourceTempItemTrkgLine."Source Ref. No." := SourceRefNo;
    END;

    PROCEDURE SaveTempItemTrkgLines@31();
    VAR
      i@1000 : Integer;
    BEGIN
      IF WhseItemTrkgLineCount = 0 THEN
        EXIT;

      i := 0;
      TempWhseItemTrkgLine.RESET;
      IF TempWhseItemTrkgLine.FIND('-') THEN
        REPEAT
          TotalTempItemTrkgLine := TempWhseItemTrkgLine;
          TotalTempItemTrkgLine.INSERT;
          i += 1;
        UNTIL (TempWhseItemTrkgLine.NEXT = 0) OR (i = WhseItemTrkgLineCount);
    END;

    PROCEDURE ReturnTempItemTrkgLines@30(VAR TempWhseItemTrkgLine2@1002 : Record 6550);
    BEGIN
      IF TotalTempItemTrkgLine.FIND('-') THEN
        REPEAT
          TempWhseItemTrkgLine2 := TotalTempItemTrkgLine;
          TempWhseItemTrkgLine2.INSERT;
        UNTIL TotalTempItemTrkgLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateTempItemTrkgLines@51(ItemNo@1005 : Code[20];VariantCode@1004 : Code[10];TotalQtytoPickBase@1002 : Decimal;HasExpiryDate@1220 : Boolean);
    VAR
      EntrySummary@1007 : Record 338;
      EntrySummary2@1200 : Record 338;
      ItemTrackingDataCollection@1001 : Codeunit 6501;
      TotalAvailQtyToPickBase@1006 : Decimal;
      RemQtyToPickBase@1009 : Decimal;
      QtyToPickBase@1008 : Decimal;
      QtyTracked@1000 : Decimal;
      FromBinContentQty@1102601000 : Decimal;
    BEGIN
      IF NOT HasExpiryDate THEN
        IF TotalQtytoPickBase <= 0 THEN
          EXIT;

      ItemTrackingDataCollection.CreateEntrySummaryFEFO(Location,ItemNo,VariantCode,HasExpiryDate);

      RemQtyToPickBase := TotalQtytoPickBase;
      IF HasExpiryDate THEN
        TransferRemQtyToPickBase := TotalQtytoPickBase;

      IF ItemTrackingDataCollection.FindFirstEntrySummaryFEFO(EntrySummary) THEN BEGIN
        ReqFEFOPick := TRUE;
        REPEAT
          IF ((EntrySummary."Expiration Date" <> 0D) AND HasExpiryDate) OR
             ((EntrySummary."Expiration Date" = 0D) AND (NOT HasExpiryDate))
          THEN BEGIN
            QtyTracked := ItemTrackedQuantity(EntrySummary."Lot No.",EntrySummary."Serial No.");

            IF NOT ((EntrySummary."Serial No." <> '') AND (QtyTracked > 0)) THEN BEGIN
              TotalAvailQtyToPickBase :=
                CalcTotalAvailQtyToPick(
                  Location.Code,ItemNo,VariantCode,
                  EntrySummary."Lot No.",EntrySummary."Serial No.",
                  SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,0);

              IF CalledFromWksh AND (WhseWkshLine."From Bin Code" <> '') THEN BEGIN
                FromBinContentQty := 0;
                FromBinContentQty :=
                  GetFromBinContentQty(
                    WhseWkshLine."Location Code",WhseWkshLine."From Bin Code",WhseWkshLine."Item No.",
                    WhseWkshLine."Variant Code",WhseWkshLine."Unit of Measure Code",
                    EntrySummary."Lot No.",EntrySummary."Serial No.");
                IF TotalAvailQtyToPickBase > FromBinContentQty THEN
                  TotalAvailQtyToPickBase := FromBinContentQty;
              END;

              TotalAvailQtyToPickBase := TotalAvailQtyToPickBase - QtyTracked;
              QtyToPickBase := 0;

              IF TotalAvailQtyToPickBase > 0 THEN
                IF TotalAvailQtyToPickBase >= RemQtyToPickBase THEN BEGIN
                  QtyToPickBase := RemQtyToPickBase;
                  RemQtyToPickBase := 0
                END ELSE BEGIN
                  QtyToPickBase := TotalAvailQtyToPickBase;
                  RemQtyToPickBase := RemQtyToPickBase - QtyToPickBase;
                END;

              IF QtyToPickBase > 0 THEN
                InsertTempItemTrkgLine(Location.Code,ItemNo,VariantCode,EntrySummary,QtyToPickBase);
            END;
          END;
        UNTIL NOT ItemTrackingDataCollection.FindNextEntrySummaryFEFO(EntrySummary) OR (RemQtyToPickBase = 0);
        IF HasExpiryDate THEN
          TransferRemQtyToPickBase := RemQtyToPickBase;
      END;
      IF NOT HasExpiryDate THEN
        IF RemQtyToPickBase > 0 THEN
          IF Location."Always Create Pick Line" THEN BEGIN
            CLEAR(EntrySummary2);
            InsertTempItemTrkgLine(Location.Code,ItemNo,VariantCode,EntrySummary2,RemQtyToPickBase);
          END;
    END;

    LOCAL PROCEDURE ItemTrackedQuantity@63(LotNo@1003 : Code[20];SerialNo@1002 : Code[20]) : Decimal;
    VAR
      WhseItemTrkgLine@1000 : Record 6550;
    BEGIN
      WITH TempWhseItemTrkgLine DO BEGIN
        RESET;
        IF (LotNo = '') AND (SerialNo = '') THEN
          IF ISEMPTY THEN
            EXIT(0);

        IF SerialNo <> '' THEN BEGIN
          SETCURRENTKEY("Serial No.","Lot No.");
          SETRANGE("Serial No.",SerialNo);
          IF ISEMPTY THEN
            EXIT(0);

          EXIT(1);
        END;

        IF LotNo <> '' THEN BEGIN
          SETCURRENTKEY("Serial No.","Lot No.");
          SETRANGE("Lot No.",LotNo);
          IF ISEMPTY THEN
            EXIT(0);
        END;

        SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.","Location Code");
        IF LotNo <> '' THEN
          SETRANGE("Lot No.",LotNo);
        CALCSUMS("Qty. to Handle (Base)");
        EXIT("Qty. to Handle (Base)");
      END;
    END;

    LOCAL PROCEDURE InsertTempItemTrkgLine@59(LocationCode@1003 : Code[10];ItemNo@1002 : Code[20];VariantCode@1000 : Code[10];EntrySummary@1004 : Record 338;QuantityBase@1001 : Decimal);
    BEGIN
      WITH TempWhseItemTrkgLine DO BEGIN
        INIT;
        "Entry No." := LastWhseItemTrkgLineNo + 1;
        "Location Code" := LocationCode;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        "Lot No." := EntrySummary."Lot No.";
        "Serial No." := EntrySummary."Serial No.";
        "Expiration Date" := EntrySummary."Expiration Date";
        "Source ID" := SourceTempItemTrkgLine."Source ID";
        "Source Type" := SourceTempItemTrkgLine."Source Type";
        "Source Batch Name" := SourceTempItemTrkgLine."Source Batch Name";
        "Source Prod. Order Line" := SourceTempItemTrkgLine."Source Prod. Order Line";
        "Source Ref. No." := SourceTempItemTrkgLine."Source Ref. No.";
        VALIDATE("Quantity (Base)",QuantityBase);
        INSERT;
        LastWhseItemTrkgLineNo := "Entry No.";
        WhseItemTrkgExists := TRUE;
      END;
    END;

    PROCEDURE TransferItemTrkgFields@13(VAR WhseActivLine2@1000 : Record 5767;TempWhseItemTrkgLine@1001 : TEMPORARY Record 6550);
    VAR
      EntriesExist@1002 : Boolean;
    BEGIN
      IF WhseItemTrkgExists THEN BEGIN
        IF TempWhseItemTrkgLine."Serial No." <> '' THEN
          TempWhseItemTrkgLine.TESTFIELD("Qty. per Unit of Measure",1);
        WhseActivLine2."Serial No." := TempWhseItemTrkgLine."Serial No.";
        WhseActivLine2."Lot No." := TempWhseItemTrkgLine."Lot No.";
        WhseActivLine2."Warranty Date" := TempWhseItemTrkgLine."Warranty Date";
        IF (TempWhseItemTrkgLine."Lot No." <> '') OR (TempWhseItemTrkgLine."Serial No." <> '') THEN
          WhseActivLine2."Expiration Date" :=
            ItemTrackingMgt.ExistingExpirationDate(
              TempWhseItemTrkgLine."Item No.",TempWhseItemTrkgLine."Variant Code",
              TempWhseItemTrkgLine."Lot No.",TempWhseItemTrkgLine."Serial No.",
              FALSE,EntriesExist);
      END ELSE
        IF SNRequired THEN
          WhseActivLine2.TESTFIELD("Qty. per Unit of Measure",1);
    END;

    PROCEDURE SetSource@57(SourceType2@1004 : Integer;SourceSubType2@1003 : '0,1,2,3,4,5,6,7,8,9,10';SourceNo2@1002 : Code[20];SourceLineNo2@1001 : Integer;SourceSubLineNo2@1000 : Integer);
    BEGIN
      SourceType := SourceType2;
      SourceSubType := SourceSubType2;
      SourceNo := SourceNo2;
      SourceLineNo := SourceLineNo2;
      SourceSubLineNo := SourceSubLineNo2;
    END;

    PROCEDURE AdjustReservation@54(Quantity@1002 : Decimal;SourceType@1001 : Integer;SourceSubType@1003 : '0,1,2,3,4,5,6,7,8,9,10';SourceNo@1004 : Code[20];SourceLineNo@1005 : Integer;SourceSubLineNo@1010 : Integer;Action@1011 : 'Modify,Delete');
    VAR
      ReservEntry@1000 : Record 337;
      ReservEntry2@1012 : Record 337;
      CreateReservEntry@1006 : Codeunit 99000830;
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");
      ReservEntry.SETRANGE("Source ID",SourceNo);
      IF SourceType = DATABASE::"Prod. Order Component" THEN BEGIN
        ReservEntry.SETRANGE("Source Ref. No.",SourceSubLineNo);
        ReservEntry.SETRANGE("Source Prod. Order Line",SourceLineNo);
      END ELSE
        ReservEntry.SETRANGE("Source Ref. No.",SourceLineNo);
      ReservEntry.SETRANGE("Source Type",SourceType);
      ReservEntry.SETRANGE("Source Subtype",SourceSubType);
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      IF ReservEntry.FIND('-') THEN
        REPEAT
          IF ReservEntry2.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive) AND
            (ReservEntry2."Source Type" = DATABASE::"Item Ledger Entry")
          THEN BEGIN
            CASE Action OF
              Action::Modify:
                BEGIN
                  IF ABS(ReservEntry."Reserved Pick & Ship Qty.") < ABS(ReservEntry."Quantity (Base)") THEN BEGIN
                    IF Quantity > ABS(ReservEntry."Quantity (Base)") - ABS(ReservEntry."Reserved Pick & Ship Qty.") THEN
                      ReservEntry."Reserved Pick & Ship Qty." :=
                        ReservEntry."Reserved Pick & Ship Qty." + ReservEntry."Quantity (Base)"
                    ELSE
                      ReservEntry."Reserved Pick & Ship Qty." :=
                        ReservEntry."Reserved Pick & Ship Qty." + CreateReservEntry.SignFactor(ReservEntry) * Quantity;
                    IF ABS(ReservEntry."Quantity (Base)") < ABS(ReservEntry."Reserved Pick & Ship Qty.") THEN
                      ReservEntry."Reserved Pick & Ship Qty." := ReservEntry."Quantity (Base)";
                    AdjustReservation2(ReservEntry);
                    Quantity := Quantity - ABS(ReservEntry."Reserved Pick & Ship Qty.");
                  END;
                END;
              Action::Delete:
                BEGIN
                  IF ReservEntry."Reserved Pick & Ship Qty." <> 0 THEN BEGIN
                    IF Quantity > ABS(ReservEntry."Reserved Pick & Ship Qty.") THEN BEGIN
                      Quantity := Quantity - ABS(ReservEntry."Reserved Pick & Ship Qty.");
                      ReservEntry."Reserved Pick & Ship Qty." := 0
                    END ELSE BEGIN
                      ReservEntry."Reserved Pick & Ship Qty." :=
                        ReservEntry."Reserved Pick & Ship Qty." + Quantity;
                      Quantity := 0;
                    END;
                    AdjustReservation2(ReservEntry);
                  END;
                END;
            END;
            ReservEntry.MODIFY;
          END;
        UNTIL (ReservEntry.NEXT = 0) OR (Quantity = 0);
    END;

    LOCAL PROCEDURE AdjustReservation2@55(ReservEntry2@1001 : Record 337);
    VAR
      ReservEntry3@1002 : Record 337;
    BEGIN
      IF ReservEntry3.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive) THEN BEGIN
        ReservEntry3."Reserved Pick & Ship Qty." := - ReservEntry2."Reserved Pick & Ship Qty.";
        ReservEntry3.MODIFY;
      END;
    END;

    PROCEDURE CheckReservation@45(QtyBaseAvailToPick@1000 : Decimal;LocationCode@1007 : Code[10];SourceType@1005 : Integer;SourceSubType@1004 : '0,1,2,3,4,5,6,7,8,9,10';SourceNo@1003 : Code[20];SourceLineNo@1002 : Integer;SourceSubLineNo@1001 : Integer;QtyPerUnitOfMeasure@1013 : Decimal;VAR Quantity@1006 : Decimal;VAR QuantityBase@1008 : Decimal);
    VAR
      ReservEntry@1010 : Record 337;
      ReservEntry2@1011 : Record 337;
      WhseManagement@1014 : Codeunit 5775;
      Quantity2@1012 : Decimal;
      QuantityBase2@1009 : Decimal;
      QtyBaseResvdNotOnILE@1015 : Decimal;
      QtyResvdNotOnILE@1016 : Decimal;
      SrcDocQtyBaseToBeFilledByInvt@1017 : Decimal;
      SrcDocQtyToBeFilledByInvt@1018 : Decimal;
    BEGIN
      ReservationExists := FALSE;
      ReservedForItemLedgEntry := FALSE;
      Quantity2 := Quantity;
      QuantityBase2 := QuantityBase;

      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");
      ReservEntry.SETRANGE("Source ID",SourceNo);
      IF SourceType = DATABASE::"Prod. Order Component" THEN BEGIN
        ReservEntry.SETRANGE("Source Ref. No.",SourceSubLineNo);
        ReservEntry.SETRANGE("Source Prod. Order Line",SourceLineNo);
      END ELSE
        ReservEntry.SETRANGE("Source Ref. No.",SourceLineNo);
      ReservEntry.SETRANGE("Source Type",SourceType);
      ReservEntry.SETRANGE("Source Subtype",SourceSubType);
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      IF ReservEntry.FIND('-') THEN BEGIN
        ReservationExists := TRUE;
        REPEAT
          IF ReservEntry2.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive) THEN
            IF ReservEntry2."Source Type" <> DATABASE::"Item Ledger Entry" THEN BEGIN
              QtyBaseResvdNotOnILE += ReservEntry2."Quantity (Base)";
              QtyResvdNotOnILE += ReservEntry2.Quantity;
            END;
        UNTIL ReservEntry.NEXT = 0;

        WhseManagement.GetOutboundDocLineQtyOtsdg(SourceType,SourceSubType,
          SourceNo,SourceLineNo,SourceSubLineNo,SrcDocQtyToBeFilledByInvt,SrcDocQtyBaseToBeFilledByInvt);
        SrcDocQtyBaseToBeFilledByInvt := SrcDocQtyBaseToBeFilledByInvt - QtyBaseResvdNotOnILE;
        SrcDocQtyToBeFilledByInvt := SrcDocQtyToBeFilledByInvt - QtyResvdNotOnILE;

        IF QuantityBase > SrcDocQtyBaseToBeFilledByInvt THEN BEGIN
          QuantityBase := SrcDocQtyBaseToBeFilledByInvt;
          Quantity := SrcDocQtyToBeFilledByInvt;
        END;

        IF QuantityBase <= SrcDocQtyBaseToBeFilledByInvt THEN
          IF QuantityBase > QtyBaseAvailToPick THEN BEGIN
            QuantityBase := QtyBaseAvailToPick;
            Quantity := ROUND(QtyBaseAvailToPick / QtyPerUnitOfMeasure,0.00001);
          END;

        IF QuantityBase = 0 THEN BEGIN
          GetLocation(LocationCode);
          IF Location."Always Create Pick Line" THEN BEGIN
            Quantity := Quantity2;
            QuantityBase := QuantityBase2;
          END;
        END ELSE
          ReservedForItemLedgEntry := TRUE;
      END ELSE
        ReservationExists := FALSE;
    END;

    PROCEDURE CalcTotalAvailQtyToPick@56(LocationCode@1003 : Code[10];ItemNo@1002 : Code[20];VariantCode@1001 : Code[10];LotNo@1013 : Code[20];SerialNo@1019 : Code[20];SourceType@1018 : Integer;SourceSubType@1017 : '0,1,2,3,4,5,6,7,8,9,10';SourceNo@1016 : Code[20];SourceLineNo@1015 : Integer;SourceSubLineNo@1014 : Integer;NeededQtyBase@1022 : Decimal) : Decimal;
    VAR
      WhseEntry@1006 : Record 7312;
      WhseActivLine@1020 : Record 5767;
      TempWhseItemTrkgLine2@1100 : Record 6550;
      LateBindingMgt@1023 : Codeunit 6502;
      TotalAvailQtyBase@1004 : Decimal;
      QtyInWhse@1008 : Decimal;
      QtyOnPickBins@1007 : Decimal;
      QtyOnPutAwayBins@1025 : Decimal;
      QtyOnOutboundBins@1009 : Decimal;
      QtyOnReceiveBins@1000 : Decimal;
      SubTotal@1010 : Decimal;
      QtyReservedOnPickShip@1011 : Decimal;
      LineReservedQty@1005 : Decimal;
      QtyAssignedPick@1012 : Decimal;
      QtyAssignedToPick@1021 : Decimal;
      AvailableAfterReshuffle@1024 : Decimal;
      ResetWhseItemTrkgExists@1101 : Boolean;
    BEGIN
      GetLocation(LocationCode);

      GetItem(ItemNo);
      ItemTrackingMgt.CheckWhseItemTrkgSetup(ItemNo,SNRequired,LNRequired,FALSE);
      WITH Item DO BEGIN
        SETRANGE("Location Filter",LocationCode);
        SETRANGE("Variant Filter",VariantCode);
        IF LotNo <> '' THEN BEGIN
          IF LNRequired THEN
            SETRANGE("Lot No. Filter",LotNo)
          ELSE
            SETFILTER("Lot No. Filter",'%1|%2',LotNo,'')
        END ELSE
          SETRANGE("Lot No. Filter");
        IF SerialNo <> '' THEN BEGIN
          IF SNRequired THEN
            SETRANGE("Serial No. Filter",SerialNo)
          ELSE
            SETFILTER("Serial No. Filter",'%1|%2',SerialNo,'');
        END ELSE
          SETRANGE("Serial No. Filter");
        CALCFIELDS("Reserved Qty. on Inventory");
      END;

      WITH WhseActivLine DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Item No.","Location Code","Activity Type","Bin Type Code",
          "Unit of Measure Code","Variant Code","Breakbulk No.","Action Type");

        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Activity Type",WhseActivLine."Activity Type"::Pick);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE("Breakbulk No.",0);
        SETFILTER("Action Type",'%1|%2',"Action Type"::" ","Action Type"::Take);
        IF LotNo <> '' THEN
          IF LNRequired THEN
            SETRANGE("Lot No.",LotNo)
          ELSE
            SETFILTER("Lot No.",'%1|%2',LotNo,'');
        IF SerialNo <> '' THEN
          IF SNRequired THEN
            SETRANGE("Serial No.",SerialNo)
          ELSE
            SETFILTER("Serial No.",'%1|%2',SerialNo,'');
        CALCSUMS("Qty. Outstanding (Base)");
        QtyAssignedToPick := WhseActivLine."Qty. Outstanding (Base)";
      END;

      WITH WhseEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Item No.","Location Code","Variant Code","Bin Type Code");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Variant Code",VariantCode);
        IF LotNo <> '' THEN
          IF LNRequired THEN
            SETRANGE("Lot No.",LotNo)
          ELSE
            SETFILTER("Lot No.",'%1|%2',LotNo,'');
        IF SerialNo <> '' THEN
          IF SNRequired THEN
            SETRANGE("Serial No.",SerialNo)
          ELSE
            SETFILTER("Serial No.",'%1|%2',SerialNo,'');
        CALCSUMS("Qty. (Base)");
        QtyInWhse := "Qty. (Base)";

        SETFILTER("Bin Type Code",'<>%1',GetBinTypeFilter(0)); // Pick from all but Receive area
        CALCSUMS("Qty. (Base)");
        QtyOnPickBins := "Qty. (Base)";

        IF CalledFromMoveWksh THEN BEGIN
          SETFILTER("Bin Type Code",GetBinTypeFilter(4)); // Put-Away only
          CALCSUMS("Qty. (Base)");
          QtyOnPutAwayBins := "Qty. (Base)";
        END;

        SETFILTER("Bin Type Code",GetBinTypeFilter(0)); // Receive
        CALCSUMS("Qty. (Base)");
        QtyOnReceiveBins := "Qty. (Base)";

        QtyOnOutboundBins :=
          CalcQtyOnOutboundBins(
            LocationCode,ItemNo,VariantCode,LotNo,SerialNo);
      END;

      TempWhseItemTrkgLine2.COPY(TempWhseItemTrkgLine);
      IF ReqFEFOPick AND CalledFromWksh THEN BEGIN
        TempWhseItemTrkgLine2."Entry No." := TempWhseItemTrkgLine2."Entry No." + 1;
        TempWhseItemTrkgLine2."Lot No." := LotNo;
        TempWhseItemTrkgLine2."Serial No." := SerialNo;
        IF NOT WhseItemTrkgExists THEN BEGIN
          WhseItemTrkgExists := TRUE;
          ResetWhseItemTrkgExists := TRUE;
        END;
      END;

      QtyAssignedPick := CalcPickQtyAssigned(LocationCode,ItemNo,VariantCode,'','',TempWhseItemTrkgLine2);

      IF ResetWhseItemTrkgExists THEN BEGIN
        WhseItemTrkgExists := FALSE;
        ResetWhseItemTrkgExists := FALSE;
      END;

      IF Location."Always Create Pick Line" OR CrossDock THEN BEGIN
        WhseActivLine.RESET;
        WhseActivLine.SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type","Variant Code",
          "Unit of Measure Code","Breakbulk No.","Activity Type");

        WhseActivLine.SETRANGE("Item No.",ItemNo);
        WhseActivLine.SETRANGE("Bin Code",'');
        WhseActivLine.SETRANGE("Location Code",LocationCode);
        WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Take);
        WhseActivLine.SETRANGE("Variant Code",VariantCode);
        IF LotNo <> '' THEN
          IF LNRequired THEN
            WhseActivLine.SETRANGE("Lot No.",LotNo)
          ELSE
            WhseActivLine.SETFILTER("Lot No.",'%1|%2',LotNo,'');
        IF SerialNo <> '' THEN
          IF SNRequired THEN
            WhseActivLine.SETRANGE("Serial No.",SerialNo)
          ELSE
            WhseActivLine.SETFILTER("Serial No.",'%1|%2',SerialNo,'');
        WhseActivLine.SETRANGE("Breakbulk No.",0);
        WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Pick);
        WhseActivLine.CALCSUMS("Qty. Outstanding (Base)");
        QtyAssignedPick := QtyAssignedPick - WhseActivLine."Qty. Outstanding (Base)";
      END;

      SubTotal :=
        QtyInWhse - QtyOnPickBins - QtyOnPutAwayBins - QtyOnOutboundBins - QtyOnReceiveBins - ABS(Item."Reserved Qty. on Inventory");

      IF (SubTotal < 0) OR CalledFromPickWksh OR CalledFromMoveWksh THEN BEGIN
        QtyReservedOnPickShip :=
          CalcReservQtyOnPicksShips(
            LocationCode,ItemNo,VariantCode);

        LineReservedQty :=
          CalcLineReservedQtyonInvt(
            SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,TRUE);

        IF SubTotal < 0 THEN
          IF ABS(SubTotal) < QtyReservedOnPickShip + LineReservedQty THEN
            QtyReservedOnPickShip := ABS(SubTotal) - LineReservedQty;

        CASE TRUE OF

          CalledFromPickWksh:
            TotalAvailQtyBase :=
              QtyOnPickBins - QtyAssignedToPick - ABS(Item."Reserved Qty. on Inventory") +
              QtyReservedOnPickShip + LineReservedQty;

          CalledFromMoveWksh:
            BEGIN
              TotalAvailQtyBase :=
                QtyOnPickBins + QtyOnPutAwayBins - QtyAssignedToPick - ABS(Item."Reserved Qty. on Inventory") +
                QtyReservedOnPickShip + LineReservedQty;
              IF CalledFromWksh THEN
                TotalAvailQtyBase := TotalAvailQtyBase - QtyAssignedPick;
            END;

          ELSE
            TotalAvailQtyBase :=
              QtyOnPickBins -
              QtyAssignedPick - QtyAssignedToPick +
              SubTotal +
              QtyReservedOnPickShip +
              LineReservedQty;
        END
      END ELSE
        TotalAvailQtyBase := QtyOnPickBins - QtyAssignedPick - QtyAssignedToPick;

      IF (NeededQtyBase <> 0) AND (NeededQtyBase > TotalAvailQtyBase) THEN
        IF ReleaseNonSpecificReservations(
          LocationCode,ItemNo,VariantCode,LotNo,SerialNo,NeededQtyBase - TotalAvailQtyBase)
        THEN BEGIN
          AvailableAfterReshuffle :=
            CalcTotalAvailQtyToPick(
              LocationCode,ItemNo,VariantCode,
              TempWhseItemTrkgLine."Lot No.",TempWhseItemTrkgLine."Serial No.",
              SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo,0);
           EXIT(AvailableAfterReshuffle);
        END;

      EXIT(TotalAvailQtyBase);
    END;

    PROCEDURE CalcReservQtyOnPicksShips@53(LocationCode@1004 : Code[10];ItemNo@1003 : Code[20];VariantCode@1002 : Code[10]) : Decimal;
    VAR
      ReservEntry@1000 : Record 337;
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Item No.","Variant Code","Location Code","Reservation Status");
      ReservEntry.SETRANGE("Item No.",ItemNo);
      ReservEntry.SETRANGE("Variant Code",VariantCode);
      ReservEntry.SETRANGE("Location Code",LocationCode);
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      ReservEntry.SETRANGE(Positive,TRUE);
      ReservEntry.CALCSUMS("Reserved Pick & Ship Qty.");
      EXIT(ReservEntry."Reserved Pick & Ship Qty.");
    END;

    PROCEDURE CalcQtyOnOutboundBins@43(LocationCode@1003 : Code[10];ItemNo@1002 : Code[20];VariantCode@1001 : Code[10];LotNo@1000 : Code[20];SerialNo@1008 : Code[20]) : Decimal;
    VAR
      WhseEntry@1005 : Record 7312;
      WhseShptLine@1009 : Record 7321;
      QtyOnOutboundBins1@1004 : Decimal;
      QtyOnOutboundBins2@1006 : Decimal;
      OutBoundFilter@1007 : Text[1024];
    BEGIN
      GetLocation(LocationCode);

      IF Location."Directed Put-away and Pick" THEN
        WITH WhseEntry DO BEGIN
          RESET;
          SETCURRENTKEY(
            "Item No.","Location Code","Variant Code","Bin Type Code",
            "Unit of Measure Code","Lot No.","Serial No.");

          SETRANGE("Item No.",ItemNo);
          SETRANGE("Location Code",LocationCode);
          SETRANGE("Variant Code",VariantCode);
          SETFILTER("Bin Type Code",GetBinTypeFilter(1)); // Shipping area
          IF LotNo <> '' THEN
            SETRANGE("Lot No.",LotNo);
          IF SerialNo <> '' THEN
            SETRANGE("Serial No.",SerialNo);
          CALCSUMS("Qty. (Base)");
          QtyOnOutboundBins1 := "Qty. (Base)";

          OutBoundFilter := SetOutBoundFilter(Location);
          IF OutBoundFilter <> '' THEN BEGIN
            RESET;
            SETCURRENTKEY(
              "Item No.","Bin Code","Location Code","Variant Code",
              "Unit of Measure Code","Lot No.","Serial No.");

            SETRANGE("Item No.",ItemNo);
            SETFILTER("Bin Code",OutBoundFilter);
            SETRANGE("Location Code",LocationCode);
            SETRANGE("Variant Code",VariantCode);
            IF LotNo <> '' THEN
              SETRANGE("Lot No.",LotNo);
            IF SerialNo <> '' THEN
              SETRANGE("Serial No.",SerialNo);
            CALCSUMS("Qty. (Base)");
            QtyOnOutboundBins2 := "Qty. (Base)";
          END ELSE
            QtyOnOutboundBins2 := 0;
        END
      ELSE IF Location."Require Pick" THEN BEGIN
        WhseShptLine.RESET;
        WhseShptLine.SETCURRENTKEY("Item No.","Location Code","Variant Code");
        WhseShptLine.SETRANGE("Item No.",ItemNo);
        WhseShptLine.SETRANGE("Location Code",LocationCode);
        WhseShptLine.SETRANGE("Variant Code",VariantCode);
        WhseShptLine.CALCSUMS("Qty. Outstanding (Base)","Qty. Picked (Base)");
        IF WhseShptLine."Qty. Outstanding (Base)" < WhseShptLine."Qty. Picked (Base)" THEN
          QtyOnOutboundBins1 := WhseShptLine."Qty. Outstanding (Base)"
        ELSE
          QtyOnOutboundBins1 := WhseShptLine."Qty. Picked (Base)";
      END;
      EXIT(QtyOnOutboundBins1 + QtyOnOutboundBins2);
    END;

    PROCEDURE GetBinTypeFilter@41(Type@1000 : 'Receive,Ship,Put Away,Pick,Put Away only') : Text[1024];
    VAR
      BinType@1001 : Record 7303;
      Filter@1002 : Text[1024];
    BEGIN
      WITH BinType DO BEGIN
        CASE Type OF
          Type::Receive: SETRANGE(Receive,TRUE);
          Type::Ship: SETRANGE(Ship,TRUE);
          Type::"Put Away": SETRANGE("Put Away",TRUE);
          Type::Pick: SETRANGE(Pick,TRUE);
          Type::"Put Away only":
            BEGIN
              SETRANGE("Put Away",TRUE);
              SETRANGE(Pick,FALSE);
            END;
        END;
        IF FIND('-') THEN
          REPEAT
            Filter := STRSUBSTNO('%1|%2',Filter,BinType.Code);
          UNTIL NEXT = 0;
        IF Filter <> '' THEN
          Filter := COPYSTR(Filter,2);
      END;
      EXIT(Filter);
    END;

    LOCAL PROCEDURE SetOutBoundFilter@42(Location2@1000 : Record 14) : Text[1024];
    VAR
      Filter@1001 : Text[1024];
    BEGIN
      WITH Location2 DO BEGIN
        IF "Open Shop Floor Bin Code" <> '' THEN
          Filter := "Open Shop Floor Bin Code";
        IF "Inbound Production Bin Code" <> '' THEN
          IF Filter <> '' THEN
            Filter := STRSUBSTNO('%1|%2',Filter,"Inbound Production Bin Code")
          ELSE
            Filter := "Inbound Production Bin Code";
        IF "Adjustment Bin Code" <> '' THEN
          IF Filter <> '' THEN
            Filter := STRSUBSTNO('%1|%2',Filter,"Adjustment Bin Code")
          ELSE
            Filter := "Adjustment Bin Code";
      END;
      EXIT(Filter);
    END;

    PROCEDURE CheckOutBound@44(SourceType@1006 : Integer;SourceSubType@1005 : '0,1,2,3,4,5,6,7,8,9,10';SourceNo@1004 : Code[20];SourceLineNo@1003 : Integer;SourceSubLineNo@1000 : Integer) : Decimal;
    VAR
      WhseShipLine@1001 : Record 7321;
      WhseActLine@1008 : Record 5767;
      ProdOrderComp@1007 : Record 5407;
      OutBoundQty@1002 : Decimal;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line",DATABASE::"Purchase Line",DATABASE::"Transfer Line":
          BEGIN
            WhseShipLine.RESET;
            WhseShipLine.SETCURRENTKEY(
              "Source Type","Source Subtype","Source No.","Source Line No.");
            WhseShipLine.SETRANGE("Source Type",SourceType);
            WhseShipLine.SETRANGE("Source Subtype",SourceSubType);
            WhseShipLine.SETRANGE("Source No.",SourceNo);
            WhseShipLine.SETRANGE("Source Line No.",SourceLineNo);
            IF WhseShipLine.FIND('-') THEN BEGIN
              WhseShipLine.CALCFIELDS("Pick Qty. (Base)");
              OutBoundQty := WhseShipLine."Pick Qty. (Base)" + WhseShipLine."Qty. Picked (Base)";
            END ELSE BEGIN
              WhseActLine.RESET;
              WhseActLine.SETCURRENTKEY(
                "Source Type","Source Subtype","Source No.","Source Line No.");
              WhseActLine.SETRANGE("Source Type",SourceType);
              WhseActLine.SETRANGE("Source Subtype",SourceSubType);
              WhseActLine.SETRANGE("Source No.",SourceNo);
              WhseActLine.SETRANGE("Source Line No.",SourceLineNo);
              IF WhseActLine.FIND('-') THEN
                OutBoundQty := WhseActLine."Qty. Outstanding (Base)"
              ELSE
                OutBoundQty := 0;
            END;
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.RESET;
            ProdOrderComp.SETRANGE(Status,SourceSubType);
            ProdOrderComp.SETRANGE("Prod. Order No.",SourceNo);
            ProdOrderComp.SETRANGE("Prod. Order Line No.",SourceSubLineNo);
            ProdOrderComp.SETRANGE("Line No.",SourceLineNo);
            IF ProdOrderComp.FIND('-') THEN BEGIN
              ProdOrderComp.CALCFIELDS("Pick Qty. (Base)");
              OutBoundQty := ProdOrderComp."Pick Qty. (Base)" + ProdOrderComp."Qty. Picked (Base)";
            END ELSE
              OutBoundQty := 0;
          END;
      END;
      EXIT(OutBoundQty);
    END;

    PROCEDURE SetCrossDock@39(CrossDock2@1000 : Boolean);
    BEGIN
      CrossDock := CrossDock2;
    END;

    PROCEDURE GetReservationStatus@46(VAR ReservationExists2@1000 : Boolean;VAR ReservedForItemLedgEntry2@1001 : Boolean);
    BEGIN
      ReservationExists2 := ReservationExists;
      ReservedForItemLedgEntry2 := ReservedForItemLedgEntry;
    END;

    PROCEDURE SetCalledFromPickWksh@61(CalledFromPickWksh2@1000 : Boolean);
    BEGIN
      CalledFromPickWksh := CalledFromPickWksh2;
    END;

    PROCEDURE SetCalledFromMoveWksh@64(CalledFromMoveWksh2@1000 : Boolean);
    BEGIN
      CalledFromMoveWksh := CalledFromMoveWksh2;
    END;

    PROCEDURE CalcQtyToPickBase@49(VAR BinContent@1002 : Record 7302;AvailableQtyBase@1000 : Decimal;VAR QtyBase@1001 : Decimal) : Decimal;
    VAR
      WhseEntry@1003 : Record 7312;
      WhseActivLine@1004 : Record 5767;
      WhseJrnl@1005 : Record 7311;
    BEGIN
      WITH BinContent DO BEGIN
        WhseEntry.SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code","Lot No.","Serial No.");
        WhseEntry.SETRANGE("Location Code","Location Code");
        WhseEntry.SETRANGE("Bin Code","Bin Code");
        WhseEntry.SETRANGE("Item No.","Item No.");
        WhseEntry.SETRANGE("Variant Code","Variant Code");
        WhseEntry.SETRANGE("Unit of Measure Code","Unit of Measure Code");
        COPYFILTER("Serial No. Filter",WhseEntry."Serial No.");
        COPYFILTER("Lot No. Filter",WhseEntry."Lot No.");
        WhseEntry.CALCSUMS("Qty. (Base)");

        WhseActivLine.SETCURRENTKEY(
          "Item No.","Bin Code","Location Code",
          "Action Type","Variant Code","Unit of Measure Code","Breakbulk No.","Activity Type","Lot No.","Serial No.");
        WhseActivLine.SETRANGE("Location Code","Location Code");
        WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Take);
        WhseActivLine.SETRANGE("Bin Code","Bin Code");
        WhseActivLine.SETRANGE("Item No.","Item No." );
        WhseActivLine.SETRANGE("Variant Code","Variant Code");
        WhseActivLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
        COPYFILTER("Lot No. Filter",WhseActivLine."Lot No.");
        COPYFILTER("Serial No. Filter",WhseActivLine."Serial No.");
        WhseActivLine.CALCSUMS("Qty. Outstanding (Base)");

        WhseJrnl.SETCURRENTKEY(
          "Item No.","From Bin Code","Location Code","Entry Type","Variant Code","Unit of Measure Code","Lot No.","Serial No.");
        WhseJrnl.SETRANGE("Location Code","Location Code");
        WhseJrnl.SETRANGE("From Bin Code","Bin Code");
        WhseJrnl.SETRANGE("Item No.","Item No." );
        WhseJrnl.SETRANGE("Variant Code","Variant Code");
        WhseJrnl.SETRANGE("Unit of Measure Code","Unit of Measure Code");
        COPYFILTER("Lot No. Filter",WhseJrnl."Lot No.");
        COPYFILTER("Serial No. Filter",WhseJrnl."Serial No.");
        WhseJrnl.CALCSUMS("Qty. (Absolute, Base)");

        EXIT(
          WhseEntry."Qty. (Base)" -
          (WhseActivLine."Qty. Outstanding (Base)" - (AvailableQtyBase - QtyBase)) +
          WhseJrnl."Qty. (Absolute, Base)")
      END;
    END;

    LOCAL PROCEDURE PickAccordingToFEFO@50(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20]) : Boolean;
    BEGIN
      GetLocation(LocationCode);
      EXIT(Location."Pick According to FEFO" AND (SNRequired OR LNRequired));
    END;

    PROCEDURE UndefinedItemTrkg@58(VAR QtyToTrackBase@1000 : Decimal) : Boolean;
    BEGIN
      QtyToTrackBase := QtyToTrackBase - ItemTrackedQuantity('','');
      EXIT(QtyToTrackBase > 0);
    END;

    PROCEDURE ReleaseNonSpecificReservations@52(LocationCode@1008 : Code[10];ItemNo@1007 : Code[20];VariantCode@1006 : Code[10];LotNo@1004 : Code[20];SerialNo@1003 : Code[20];QtyToRelease@1000 : Decimal) : Boolean;
    VAR
      LateBindingMgt@1002 : Codeunit 6502;
      xReservedQty@1001 : Decimal;
    BEGIN
      IF QtyToRelease <= 0 THEN
        EXIT;

      IF LNRequired OR SNRequired THEN
        IF Item."Reserved Qty. on Inventory" > 0 THEN BEGIN
          xReservedQty := Item."Reserved Qty. on Inventory";
          LateBindingMgt.ReleaseForReservation(ItemNo,VariantCode,LocationCode,SerialNo,LotNo,QtyToRelease);
          Item.CALCFIELDS("Reserved Qty. on Inventory");
        END;

      EXIT(xReservedQty > Item."Reserved Qty. on Inventory");
    END;

    PROCEDURE SetCalledFromWksh@117(NewCalledFromWksh@1102601000 : Boolean);
    BEGIN
      CalledFromWksh := NewCalledFromWksh;
    END;

    PROCEDURE GetFromBinContentQty@118(LocCode@1102601006 : Code[10];FromBinCode@1102601005 : Code[20];ItemNo@1102601004 : Code[20];Variant@1102601003 : Code[20];UoMCode@1102601002 : Code[10];LotNo@1102601001 : Code[20];SerialNo@1102601000 : Code[20]) : Decimal;
    VAR
      BinContent@1102601007 : Record 7302;
    BEGIN
      BinContent.GET(LocCode,FromBinCode,ItemNo,Variant,UoMCode);
      BinContent.SETRANGE("Lot No. Filter",LotNo);
      BinContent.SETRANGE("Serial No. Filter",SerialNo);
      BinContent.CALCFIELDS("Quantity (Base)");
      EXIT(BinContent."Quantity (Base)");
    END;

    PROCEDURE CreateTempActivityLine@68(LocationCode@1002 : Code[10];BinCode@1003 : Code[20];UOMCode@1004 : Code[10];QtyPerUOM@1005 : Decimal;QtyToPick@1000 : Decimal;QtyToPickBase@1001 : Decimal;ActionType@1006 : Integer;BreakBulkNo@1007 : Integer);
    BEGIN
      IF Location."Directed Put-away and Pick" THEN
        GetBin(LocationCode,BinCode);

      TempLineNo := TempLineNo + 10000;
      WITH TempWhseActivLine DO BEGIN
        RESET;
        INIT;

        "No." := FORMAT(TempNo);
        "Location Code" := LocationCode;
        "Unit of Measure Code" := UOMCode;
        "Qty. per Unit of Measure" := QtyPerUOM;
        "Starting Date" := WORKDATE;
        "Bin Code" := BinCode;
        "Action Type" := ActionType;
        "Breakbulk No." := BreakBulkNo;
        "Line No." := TempLineNo;

        CASE WhseSource OF
          WhseSource::"Pick Worksheet":
            TransferFromPickWkshLine(WhseWkshLine);
          WhseSource::Shipment:
            TransferFromShptLine(WhseShptLine);
          WhseSource::"Internal Pick":
            TransferFromIntPickLine(WhseInternalPickLine);
          WhseSource::Production:
            TranferFromCompLine(ProdOrderCompLine);
          WhseSource::"Movement Worksheet":
            TransferFromMovWkshLine(WhseWkshLine);
        END;

        IF (BreakBulkNo = 0) AND ("Action Type" = "Action Type"::Place) THEN
          CASE WhseSource OF
            WhseSource::"Pick Worksheet",WhseSource::"Movement Worksheet":
              CalcMaxQtytoPlace(
                QtyToPick,WhseWkshLine."Qty. to Handle",QtyToPickBase,WhseWkshLine."Qty. to Handle (Base)");
            WhseSource::Shipment:
              BEGIN
                WhseShptLine.CALCFIELDS("Pick Qty.","Pick Qty. (Base)");
                CalcMaxQtytoPlace(
                  QtyToPick,
                  WhseShptLine.Quantity -
                  WhseShptLine."Qty. Picked" -
                  WhseShptLine."Pick Qty.",
                  QtyToPickBase,
                  WhseShptLine."Qty. (Base)" -
                  WhseShptLine."Qty. Picked (Base)" -
                  WhseShptLine."Pick Qty. (Base)");
              END;
            WhseSource::"Internal Pick":
              BEGIN
                WhseInternalPickLine.CALCFIELDS("Pick Qty.","Pick Qty. (Base)");
                CalcMaxQtytoPlace(
                  QtyToPick,
                  WhseInternalPickLine.Quantity -
                  WhseInternalPickLine."Qty. Picked" -
                  WhseInternalPickLine."Pick Qty.",
                  QtyToPickBase,
                  WhseInternalPickLine."Qty. (Base)" -
                  WhseInternalPickLine."Qty. Picked (Base)" -
                  WhseInternalPickLine."Pick Qty. (Base)");
              END;
            WhseSource::Production:
              BEGIN
                ProdOrderCompLine.CALCFIELDS("Pick Qty.","Pick Qty. (Base)");
                CalcMaxQtytoPlace(
                  QtyToPick,
                  ProdOrderCompLine."Expected Quantity" -
                  ProdOrderCompLine."Qty. Picked" -
                  ProdOrderCompLine."Pick Qty.",
                  QtyToPickBase,
                  ProdOrderCompLine."Expected Qty. (Base)" -
                  ProdOrderCompLine."Qty. Picked (Base)" -
                  ProdOrderCompLine."Pick Qty. (Base)");
              END;
          END;

        IF Location."Directed Put-away and Pick" THEN BEGIN
          GetBin(LocationCode,BinCode);
          "Zone Code" := Bin."Zone Code";
          "Bin Ranking" := Bin."Bin Ranking";
          "Bin Type Code" := Bin."Bin Type Code";
          IF Location."Special Equipment" <> Location."Special Equipment"::" " THEN
            "Special Equipment Code" :=
              AssignSpecEquipment(LocationCode,BinCode,"Item No.","Variant Code");
        END;

        VALIDATE(Quantity,QtyToPick);
        IF QtyToPickBase <> 0 THEN BEGIN
          "Qty. (Base)" := QtyToPickBase;
          "Qty. to Handle (Base)" := QtyToPickBase;
          "Qty. Outstanding (Base)" := QtyToPickBase;
        END;

        IF WhseSource IN [WhseSource::Production,WhseSource::Shipment,WhseSource::"Pick Worksheet"] THEN
          IF "Action Type" <> "Action Type"::Place THEN
            AdjustReservation(
              "Qty. to Handle (Base)","Source Type","Source Subtype",
              "Source No.","Source Line No.","Source Subline No.",0);

        CASE WhseSource OF
          WhseSource::Shipment:
            BEGIN
              "Shipping Agent Code" := ShippingAgentCode;
              "Shipping Agent Service Code" := ShippingAgentServiceCode;
              "Shipment Method Code" := ShipmentMethodCode;
              "Shipping Advice" := "Shipping Advice";
            END;
          WhseSource::Production:
            IF "Shelf No." = '' THEN BEGIN
              Item."No." := "Item No.";
              Item.ItemSKUGet(Item,"Location Code","Variant Code");
              "Shelf No." := Item."Shelf/Bin No.";
            END;
          WhseSource::"Movement Worksheet":
            IF (WhseWkshLine."Qty. Outstanding" <> QtyToPick) AND (BreakBulkNo = 0) THEN BEGIN
              "Source Type" := DATABASE::"Whse. Worksheet Line";
              "Source No." := WhseWkshLine."Worksheet Template Name";
              "Source Line No." := "Line No.";
            END;
        END;

        TransferItemTrkgFields(TempWhseActivLine,TempWhseItemTrkgLine);

        INSERT;
      END;
    END;

    PROCEDURE UpdateQuantitiesToPick@65(QtyAvailableBase@1006 : Decimal;FromQtyPerUOM@1007 : Decimal;VAR FromQtyToPick@1005 : Decimal;VAR FromQtyToPickBase@1004 : Decimal;ToQtyPerUOM@1008 : Decimal;VAR ToQtyToPick@1000 : Decimal;VAR ToQtyToPickBase@1001 : Decimal;VAR TotalQtyToPick@1002 : Decimal;VAR TotalQtyToPickBase@1003 : Decimal);
    BEGIN
      UpdateToQtyToPick(QtyAvailableBase,ToQtyPerUOM,ToQtyToPick,ToQtyToPickBase,TotalQtyToPick,TotalQtyToPickBase);
      UpdateFromQtyToPick(QtyAvailableBase,FromQtyPerUOM,FromQtyToPick,FromQtyToPickBase,ToQtyPerUOM,ToQtyToPick,ToQtyToPickBase);
      UpdateTotalQtyToPick(ToQtyToPick,ToQtyToPickBase,TotalQtyToPick,TotalQtyToPickBase)
    END;

    PROCEDURE UpdateFromQtyToPick@70(QtyAvailableBase@1008 : Decimal;FromQtyPerUOM@1007 : Decimal;VAR FromQtyToPick@1006 : Decimal;VAR FromQtyToPickBase@1005 : Decimal;ToQtyPerUOM@1001 : Decimal;ToQtyToPick@1002 : Decimal;ToQtyToPickBase@1000 : Decimal);
    BEGIN
      CASE FromQtyPerUOM OF
        ToQtyPerUOM:
          BEGIN
            FromQtyToPick := ToQtyToPick;
            FromQtyToPickBase := ToQtyToPickBase;
          END;
        0..ToQtyPerUOM:
          BEGIN
            FromQtyToPick := ROUND(ToQtyToPickBase / FromQtyPerUOM,0.00001);
            FromQtyToPickBase := ToQtyToPickBase;
          END;
        ELSE
          FromQtyToPick := ROUND(ToQtyToPickBase / FromQtyPerUOM,1,'>');
          FromQtyToPickBase := FromQtyToPick * FromQtyPerUOM;
          IF FromQtyToPickBase > QtyAvailableBase THEN BEGIN
            FromQtyToPickBase := ToQtyToPickBase;
            FromQtyToPick := ROUND(FromQtyToPickBase / FromQtyPerUOM,0.00001);
          END;
      END;
    END;

    PROCEDURE UpdateToQtyToPick@71(QtyAvailableBase@1008 : Decimal;ToQtyPerUOM@1004 : Decimal;VAR ToQtyToPick@1003 : Decimal;VAR ToQtyToPickBase@1002 : Decimal;TotalQtyToPick@1001 : Decimal;TotalQtyToPickBase@1000 : Decimal);
    BEGIN
      ToQtyToPickBase := QtyAvailableBase;
      IF ToQtyToPickBase > TotalQtyToPickBase THEN
        ToQtyToPickBase := TotalQtyToPickBase;

      ToQtyToPick := ROUND(ToQtyToPickBase / ToQtyPerUOM,0.00001);
      IF (ToQtyToPick = TotalQtyToPick) AND (ToQtyToPickBase <> TotalQtyToPickBase) THEN
        ToQtyToPick := ToQtyToPick - 0.00001;
      IF (ToQtyToPick <> TotalQtyToPick) AND (ToQtyToPickBase = TotalQtyToPickBase) THEN
        IF ToQtyToPickBase = ROUND(TotalQtyToPick * ToQtyPerUOM,0.00001) THEN
          ToQtyToPick := TotalQtyToPick;
    END;

    PROCEDURE UpdateTotalQtyToPick@72(ToQtyToPick@1003 : Decimal;ToQtyToPickBase@1002 : Decimal;VAR TotalQtyToPick@1001 : Decimal;VAR TotalQtyToPickBase@1000 : Decimal);
    BEGIN
      TotalQtyToPick := TotalQtyToPick - ToQtyToPick;
      TotalQtyToPickBase := TotalQtyToPickBase - ToQtyToPickBase;
    END;

    LOCAL PROCEDURE CalcTotalQtyAssgndOnWhse@20(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10]) : Decimal;
    VAR
      WhseShipmentLine@1010 : Record 7321;
      ProdOrderComp@1011 : Record 5407;
      QtyAssgndToWhseAct@1003 : Decimal;
      QtyAssgndToShipment@1009 : Decimal;
      QtyAssgndToProdComp@1007 : Decimal;
    BEGIN
      QtyAssgndToWhseAct +=
        CalcTotalQtyAssgndOnWhseAct(TempWhseActivLine."Activity Type"::" ",LocationCode,ItemNo,VariantCode);
      QtyAssgndToWhseAct +=
        CalcTotalQtyAssgndOnWhseAct(TempWhseActivLine."Activity Type"::"Put-away",LocationCode,ItemNo,VariantCode);
      QtyAssgndToWhseAct +=
        CalcTotalQtyAssgndOnWhseAct(TempWhseActivLine."Activity Type"::Pick,LocationCode,ItemNo,VariantCode);
      QtyAssgndToWhseAct +=
        CalcTotalQtyAssgndOnWhseAct(TempWhseActivLine."Activity Type"::Movement,LocationCode,ItemNo,VariantCode);
      QtyAssgndToWhseAct +=
        CalcTotalQtyAssgndOnWhseAct(TempWhseActivLine."Activity Type"::"Invt. Put-away",LocationCode,ItemNo,VariantCode);
      QtyAssgndToWhseAct +=
        CalcTotalQtyAssgndOnWhseAct(TempWhseActivLine."Activity Type"::"Invt. Pick",LocationCode,ItemNo,VariantCode);

      WITH WhseShipmentLine DO BEGIN
        SETCURRENTKEY("Item No.","Location Code","Variant Code","Due Date");
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Variant Code",VariantCode);
        CALCSUMS("Qty. Picked (Base)");
        QtyAssgndToShipment := "Qty. Picked (Base)";
      END;

      WITH ProdOrderComp DO BEGIN
        SETCURRENTKEY("Item No.","Variant Code","Location Code",Status,"Due Date");
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Variant Code",VariantCode);
        CALCSUMS("Qty. Picked (Base)");
        QtyAssgndToProdComp := "Qty. Picked (Base)";
      END;

      EXIT(QtyAssgndToWhseAct + QtyAssgndToShipment + QtyAssgndToProdComp);
    END;

    LOCAL PROCEDURE CalcTotalQtyAssgndOnWhseAct@86(ActivityType@1003 : Option;LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10]) : Decimal;
    VAR
      WhseActivLine@1004 : Record 5767;
    BEGIN
      WITH WhseActivLine DO BEGIN
        SETCURRENTKEY(
          "Item No.","Location Code","Activity Type","Bin Type Code",
          "Unit of Measure Code","Variant Code","Breakbulk No.","Action Type");
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE("Activity Type",ActivityType);
        SETRANGE("Breakbulk No.",0);
        SETFILTER("Action Type",'%1|%2',"Action Type"::" ","Action Type"::Take);
        CALCSUMS("Qty. Outstanding (Base)");
        EXIT("Qty. Outstanding (Base)");
      END;
    END;

    LOCAL PROCEDURE CalcTotalQtyOnBinType@104(BinTypeFilter@1004 : Text[1024];LocationCode@1003 : Code[10];ItemNo@1002 : Code[20];VariantCode@1001 : Code[10]) : Decimal;
    VAR
      WhseEntry@1000 : Record 7312;
    BEGIN
      WITH WhseEntry DO BEGIN
        SETCURRENTKEY("Item No.","Location Code","Variant Code","Bin Type Code");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Variant Code",VariantCode);
        IF BinTypeFilter <> '' THEN
          SETFILTER("Bin Type Code",BinTypeFilter);
        CALCSUMS("Qty. (Base)");
        EXIT("Qty. (Base)");
      END;
    END;

    BEGIN
    END.
  }
}
