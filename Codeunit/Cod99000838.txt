OBJECT Codeunit 99000838 Prod. Order Comp.-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd,
                TableData 99000849=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1;ESP=La cantidad reservada no puede ser mayor que %1';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved;ESP=se debe rellenar cuando se ha reservado una cantidad';
      Text003@1002 : TextConst 'ENU=must not be changed when a quantity is reserved;ESP=no se debe modificar cuando se ha reservado una cantidad';
      Text004@1003 : TextConst 'ENU=Codeunit is not initialized correctly.;ESP=Codeunit no iniciada correctamente.';
      CreateReservEntry@1005 : Codeunit 99000830;
      ReservEngineMgt@1006 : Codeunit 99000831;
      ReservMgt@1007 : Codeunit 99000845;
      Blocked@1008 : Boolean;
      SetFromType@1009 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[20];
      SetFromLotNo@1019 : Code[20];
      SetFromQtyPerUOM@1020 : Decimal;
      DeleteItemTracking@1017 : Boolean;

    PROCEDURE CreateReservation@1(VAR ProdOrderComp@1000 : Record 5407;Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1003 : Decimal;ForSerialNo@1005 : Code[20];ForLotNo@1004 : Code[20]);
    VAR
      Location@1009 : Record 14;
      CreatePick@1006 : Codeunit 7312;
      ShipmentDate@1007 : Date;
      OutBoundQty@1008 : Decimal;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text004);

      ProdOrderComp.TESTFIELD("Item No.");
      ProdOrderComp.TESTFIELD("Due Date");
      ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
      IF ABS(ProdOrderComp."Remaining Qty. (Base)") < ABS(ProdOrderComp."Reserved Qty. (Base)") + Quantity THEN
        ERROR(
          Text000,
          ABS(ProdOrderComp."Remaining Qty. (Base)") - ABS(ProdOrderComp."Reserved Qty. (Base)"));

      ProdOrderComp.TESTFIELD("Location Code",SetFromLocationCode);
      ProdOrderComp.TESTFIELD("Variant Code",SetFromVariantCode);
      IF Quantity > 0 THEN
        ShipmentDate := ProdOrderComp."Due Date"
      ELSE BEGIN
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := ProdOrderComp."Due Date";
      END;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Prod. Order Component",ProdOrderComp.Status,
        ProdOrderComp."Prod. Order No.",'',ProdOrderComp."Prod. Order Line No.",
        ProdOrderComp."Line No.",ProdOrderComp."Qty. per Unit of Measure",
        Quantity,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        ProdOrderComp."Item No.",ProdOrderComp."Variant Code",ProdOrderComp."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate,0);

      IF Location.GET(ProdOrderComp."Location Code") AND
         (Location."Bin Mandatory" OR Location."Require Pick")
      THEN BEGIN
        OutBoundQty :=
          CreatePick.CheckOutBound(
            DATABASE::"Prod. Order Component",ProdOrderComp.Status,ProdOrderComp."Prod. Order No.",
            ProdOrderComp."Line No.",ProdOrderComp."Prod. Order Line No.");
        IF (OutBoundQty <> 0) AND
           (OutBoundQty >= (ProdOrderComp."Reserved Qty. (Base)" + Quantity))
        THEN
          CreatePick.AdjustReservation(
            OutBoundQty,DATABASE::"Prod. Order Component",ProdOrderComp.Status,
            ProdOrderComp."Prod. Order No.",ProdOrderComp."Prod. Order Line No.",ProdOrderComp."Line No.",0);
      END;

      SetFromType := 0;
    END;

    PROCEDURE CreateReservationSetFrom@2(FromType@1000 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';FromSubtype@1001 : Integer;FromID@1002 : Code[20];FromBatchName@1003 : Code[10];FromProdOrderLine@1004 : Integer;FromRefNo@1005 : Integer;FromVariantCode@1006 : Code[10];FromLocationCode@1007 : Code[10];FromSerialNo@1009 : Code[20];FromLotNo@1010 : Code[20];FromQtyPerUOM@1011 : Decimal);
    BEGIN
      SetFromType := FromType;
      SetFromSubtype := FromSubtype;
      SetFromID := FromID;
      SetFromBatchName := FromBatchName;
      SetFromProdOrderLine := FromProdOrderLine;
      SetFromRefNo := FromRefNo;
      SetFromVariantCode := FromVariantCode;
      SetFromLocationCode := FromLocationCode;
      SetFromSerialNo := FromSerialNo;
      SetFromLotNo := FromLotNo;
      SetFromQtyPerUOM := FromQtyPerUOM;
    END;

    PROCEDURE SetBinding@9(Binding@1000 : ' ,Order-to-Order');
    BEGIN
      CreateReservEntry.SetBinding(Binding);
    END;

    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record 337;ProdOrderComp@1001 : Record 5407);
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      FilterReservEntry.SETRANGE("Source Subtype",ProdOrderComp.Status);
      FilterReservEntry.SETRANGE("Source ID",ProdOrderComp."Prod. Order No.");
      FilterReservEntry.SETRANGE("Source Batch Name",'');
      FilterReservEntry.SETRANGE("Source Prod. Order Line",ProdOrderComp."Prod. Order Line No.");
      FilterReservEntry.SETRANGE("Source Ref. No.",ProdOrderComp."Line No.");
    END;

    PROCEDURE Caption@30(ProdOrderComp@1001 : Record 5407) CaptionText@1000 : Text[80];
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      ProdOrderLine.GET(
        ProdOrderComp.Status,
        ProdOrderComp."Prod. Order No.",ProdOrderComp."Prod. Order Line No.");
      CaptionText :=
        COPYSTR(
          STRSUBSTNO('%1 %2 %3 %4 %5',
            ProdOrderComp.Status,ProdOrderComp.TABLECAPTION,
            ProdOrderComp."Prod. Order No.",ProdOrderComp."Item No.",ProdOrderLine."Item No.")
          ,1,MAXSTRLEN(CaptionText));
    END;

    PROCEDURE FindReservEntry@5(ProdOrderComp@1000 : Record 5407;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,ProdOrderComp);
      EXIT(ReservEntry.FINDLAST);
    END;

    PROCEDURE ReservEntryExist@11(ProdOrderComp@1000 : Record 5407) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,ProdOrderComp);
      EXIT(NOT ReservEntry.ISEMPTY);
    END;

    PROCEDURE VerifyChange@59(VAR NewProdOrderComp@1000 : Record 5407;VAR OldProdOrderComp@1001 : Record 5407);
    VAR
      ProdOrderComp@1005 : Record 5407;
      TempReservEntry@1002 : Record 337;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      IF NewProdOrderComp.Status = NewProdOrderComp.Status::Finished THEN
        EXIT;
      IF Blocked THEN
        EXIT;
      IF NewProdOrderComp."Line No." = 0 THEN
        IF NOT ProdOrderComp.GET(
                 NewProdOrderComp.Status,
                 NewProdOrderComp."Prod. Order No.",
                 NewProdOrderComp."Prod. Order Line No.",
                 NewProdOrderComp."Line No.")
        THEN
          EXIT;

      NewProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewProdOrderComp."Reserved Qty. (Base)" <> 0;

      IF NewProdOrderComp."Due Date" = 0D THEN
        IF ShowError THEN
          NewProdOrderComp.FIELDERROR("Due Date",Text002)
        ELSE
          HasError := TRUE;

      IF NewProdOrderComp."Item No." <> OldProdOrderComp."Item No." THEN
        IF ShowError THEN
          NewProdOrderComp.FIELDERROR("Item No.",Text003)
        ELSE
          HasError := TRUE;
      IF (NewProdOrderComp."Location Code" <> OldProdOrderComp."Location Code") THEN
        IF ShowError THEN
          NewProdOrderComp.FIELDERROR("Location Code",Text003)
        ELSE
          HasError := TRUE;
      IF NewProdOrderComp."Variant Code" <> OldProdOrderComp."Variant Code" THEN
        IF ShowError THEN
          NewProdOrderComp.FIELDERROR("Variant Code",Text003)
        ELSE
          HasError := TRUE;
      IF NewProdOrderComp."Line No." <> OldProdOrderComp."Line No." THEN
        HasError := TRUE;

      IF HasError THEN
        IF (NewProdOrderComp."Item No." <> OldProdOrderComp."Item No.") OR
           FindReservEntry(NewProdOrderComp,TempReservEntry)
        THEN BEGIN
          IF (NewProdOrderComp."Item No." <> OldProdOrderComp."Item No.") THEN BEGIN
            ReservMgt.SetProdOrderComponent(OldProdOrderComp);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetProdOrderComponent(NewProdOrderComp);
          END ELSE BEGIN
            ReservMgt.SetProdOrderComponent(NewProdOrderComp);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewProdOrderComp."Remaining Qty. (Base)");
        END;

      IF HasError OR (NewProdOrderComp."Due Date" <> OldProdOrderComp."Due Date")
      THEN BEGIN
        AssignForPlanning(NewProdOrderComp);
        IF (NewProdOrderComp."Item No." <> OldProdOrderComp."Item No.") OR
             (NewProdOrderComp."Variant Code" <> OldProdOrderComp."Variant Code") OR
             (NewProdOrderComp."Location Code" <> OldProdOrderComp."Location Code")
          THEN
            AssignForPlanning(OldProdOrderComp);
      END;
    END;

    PROCEDURE VerifyQuantity@4(VAR NewProdOrderComp@1000 : Record 5407;VAR OldProdOrderComp@1001 : Record 5407);
    VAR
      ProdOrderComp@1002 : Record 5407;
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH NewProdOrderComp DO BEGIN
        IF Status = Status::Finished THEN
          EXIT;
        IF "Line No." = OldProdOrderComp."Line No." THEN
          IF "Remaining Qty. (Base)" = OldProdOrderComp."Remaining Qty. (Base)" THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT ProdOrderComp.GET(Status,"Prod. Order No.","Prod. Order Line No.","Line No.") THEN
            EXIT;
        ReservMgt.SetProdOrderComponent(NewProdOrderComp);
        IF "Qty. per Unit of Measure" <> OldProdOrderComp."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        IF "Remaining Qty. (Base)" * OldProdOrderComp."Remaining Qty. (Base)" < 0 THEN
          ReservMgt.DeleteReservEntries(TRUE,0)
        ELSE
          ReservMgt.DeleteReservEntries(FALSE,"Remaining Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Remaining Qty. (Base)");
        AssignForPlanning(NewProdOrderComp);
      END;
    END;

    PROCEDURE TransferPOCompToPOComp@31(VAR OldProdOrderComp@1000 : Record 5407;VAR NewProdOrderComp@1001 : Record 5407;TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record 337;
      OldReservEntry2@1005 : Record 337;
      NewReservEntry@1006 : Record 337;
      ActionMessageEntry@1007 : Record 99000849;
      ActionMessageEntry2@1008 : Record 99000849;
      Status@1009 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      IF NOT FindReservEntry(OldProdOrderComp,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      NewProdOrderComp.TESTFIELD("Item No.",OldProdOrderComp."Item No.");
      NewProdOrderComp.TESTFIELD("Variant Code",OldProdOrderComp."Variant Code");
      NewProdOrderComp.TESTFIELD("Location Code",OldProdOrderComp."Location Code");

      IF TransferAll THEN BEGIN
        OldReservEntry.FINDSET;
        OldReservEntry.TESTFIELD("Qty. per Unit of Measure",NewProdOrderComp."Qty. per Unit of Measure");
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",OldProdOrderComp."Item No.");
          OldReservEntry.TESTFIELD("Variant Code",OldProdOrderComp."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",OldProdOrderComp."Location Code");

          NewReservEntry := OldReservEntry;
          NewReservEntry."Source Type" := DATABASE::"Prod. Order Component";
          NewReservEntry."Source Subtype" := NewProdOrderComp.Status;
          NewReservEntry."Source ID" := NewProdOrderComp."Prod. Order No.";
          NewReservEntry."Source Batch Name" := '';
          NewReservEntry."Source Prod. Order Line" := NewProdOrderComp."Prod. Order Line No.";
          NewReservEntry."Source Ref. No." := NewProdOrderComp."Line No.";

          IF OldReservEntry."Reservation Status" = OldReservEntry."Reservation Status"::Surplus THEN BEGIN
            ActionMessageEntry.FilterFromReservEntry(OldReservEntry);
            IF ActionMessageEntry.FINDSET THEN REPEAT
              ActionMessageEntry2 := ActionMessageEntry;
              ActionMessageEntry2.TransferFromReservEntry(NewReservEntry);
              ActionMessageEntry2.MODIFY;
            UNTIL ActionMessageEntry.NEXT = 0;
            NewReservEntry.MODIFY;
          END ELSE
            IF OldReservEntry2.GET(OldReservEntry."Entry No.",NOT OldReservEntry.Positive) THEN BEGIN
              IF CreateReservEntry.HasSamePointer(OldReservEntry2,NewReservEntry) THEN BEGIN
                OldReservEntry2.DELETE;
                NewReservEntry.DELETE;
              END ELSE
                NewReservEntry.MODIFY;
            END ELSE
              NewReservEntry.MODIFY;

        UNTIL (OldReservEntry.NEXT = 0);
      END ELSE

      FOR Status := Status::Reservation TO Status::Prospect DO BEGIN
        IF TransferQty = 0 THEN
          EXIT;
        OldReservEntry.SETRANGE("Reservation Status",Status);

        IF OldReservEntry.FINDSET THEN
          REPEAT
            OldReservEntry.TESTFIELD("Item No.",OldProdOrderComp."Item No.");
            OldReservEntry.TESTFIELD("Variant Code",OldProdOrderComp."Variant Code");
            OldReservEntry.TESTFIELD("Location Code",OldProdOrderComp."Location Code");

            TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Prod. Order Component",
              NewProdOrderComp.Status,NewProdOrderComp."Prod. Order No.",'',
              NewProdOrderComp."Prod. Order Line No.",NewProdOrderComp."Line No.",
              NewProdOrderComp."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          UNTIL (OldReservEntry.NEXT = 0) OR (TransferQty = 0);
      END; //DO
    END;

    PROCEDURE TransferPOCompToItemJnlLine@3(VAR OldProdOrderComp@1000 : Record 5407;VAR NewItemJnlLine@1001 : Record 83;TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record 337;
      ItemTrackingFilterIsSet@1006 : Boolean;
      EndLoop@1005 : Boolean;
      TrackedQty@1004 : Decimal;
      UnTrackedQty@1008 : Decimal;
      xTransferQty@1007 : Decimal;
    BEGIN
      IF NOT FindReservEntry(OldProdOrderComp,OldReservEntry) THEN
        EXIT;

      // Store initial values
      OldReservEntry.CALCSUMS("Quantity (Base)");
      TrackedQty := -OldReservEntry."Quantity (Base)";
      xTransferQty := TransferQty;

      OldReservEntry.Lock;

      // Handle Item Tracking on consumption:
      CLEAR(CreateReservEntry);
      IF NewItemJnlLine."Entry Type" = NewItemJnlLine."Entry Type"::Consumption THEN
        IF (NewItemJnlLine."Serial No." <> '') OR (NewItemJnlLine."Lot No." <> '') THEN BEGIN
          CreateReservEntry.SetNewSerialLotNo(NewItemJnlLine."Serial No.",NewItemJnlLine."Lot No.");
          // Try to match against Item Tracking on the prod. order line:
          OldReservEntry.SETRANGE("Serial No.",NewItemJnlLine."Serial No.");
          OldReservEntry.SETRANGE("Lot No.",NewItemJnlLine."Lot No.");
          IF OldReservEntry.ISEMPTY THEN BEGIN
            OldReservEntry.SETRANGE("Serial No.");
            OldReservEntry.SETRANGE("Lot No.");
          END ELSE
            ItemTrackingFilterIsSet := TRUE;
        END;

      NewItemJnlLine.TESTFIELD("Item No.",OldProdOrderComp."Item No.");
      NewItemJnlLine.TESTFIELD("Variant Code",OldProdOrderComp."Variant Code");
      NewItemJnlLine.TESTFIELD("Location Code",OldProdOrderComp."Location Code");

      IF TransferQty = 0 THEN
        EXIT;

      IF ReservEngineMgt.InitRecordSet2(OldReservEntry,NewItemJnlLine."Serial No.",NewItemJnlLine."Lot No.") THEN
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",OldProdOrderComp."Item No.");
          OldReservEntry.TESTFIELD("Variant Code",OldProdOrderComp."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",OldProdOrderComp."Location Code");


          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
            NewItemJnlLine."Entry Type",NewItemJnlLine."Journal Template Name",NewItemJnlLine."Journal Batch Name",0,
            NewItemJnlLine."Line No.",NewItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          IF ReservEngineMgt.NEXTRecord(OldReservEntry) = 0 THEN
            IF ItemTrackingFilterIsSet THEN BEGIN
              OldReservEntry.SETRANGE("Serial No.");
              OldReservEntry.SETRANGE("Lot No.");
              ItemTrackingFilterIsSet := FALSE;
              EndLoop := NOT ReservEngineMgt.InitRecordSet(OldReservEntry);
            END ELSE
              EndLoop := TRUE;
        UNTIL EndLoop OR (TransferQty = 0);

      // Handle remaining transfer quantity
      IF TransferQty <> 0 THEN BEGIN
        TrackedQty -= (xTransferQty - TransferQty);
        UnTrackedQty := OldProdOrderComp."Remaining Qty. (Base)" - TrackedQty;
        IF TransferQty > UnTrackedQty THEN BEGIN
          ReservMgt.SetProdOrderComponent(OldProdOrderComp);
          ReservMgt.DeleteReservEntries(FALSE,OldProdOrderComp."Remaining Qty. (Base)");
        END;
      END;
    END;

    PROCEDURE RenameLine@10(VAR NewProdOrderComp@1001 : Record 5407;VAR OldProdOrderComp@1000 : Record 5407);
    BEGIN
      ReservEngineMgt.RenamePointer(DATABASE::"Prod. Order Component",
        OldProdOrderComp.Status,
        OldProdOrderComp."Prod. Order No.",
        '',
        OldProdOrderComp."Prod. Order Line No.",
        OldProdOrderComp."Line No.",
        NewProdOrderComp.Status,
        NewProdOrderComp."Prod. Order No.",
        '',
        NewProdOrderComp."Prod. Order Line No.",
        NewProdOrderComp."Line No.");
    END;

    PROCEDURE DeleteLineConfirm@20(VAR ProdOrderComp@1000 : Record 5407) : Boolean;
    BEGIN
      WITH ProdOrderComp DO BEGIN
        IF NOT ReservEntryExist(ProdOrderComp) THEN
          EXIT(TRUE);

        ReservMgt.SetProdOrderComponent(ProdOrderComp);
        IF ReservMgt.DeleteItemTrackingConfirm THEN
          DeleteItemTracking := TRUE;
      END;

      EXIT(DeleteItemTracking);
    END;

    PROCEDURE DeleteLine@6(VAR ProdOrderComp@1000 : Record 5407);
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH ProdOrderComp DO BEGIN
        CLEAR(ReservMgt);
        ReservMgt.SetProdOrderComponent(ProdOrderComp);
        IF DeleteItemTracking THEN
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(TRUE,0);
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(ProdOrderComp);
      END;
    END;

    PROCEDURE AssignForPlanning@7(VAR ProdOrderComp@1000 : Record 5407);
    VAR
      PlanningAssignment@1001 : Record 99000850;
    BEGIN
      WITH ProdOrderComp DO BEGIN
        IF Status = Status::Simulated THEN
          EXIT;
        IF "Item No." <> '' THEN
          PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Location Code","Due Date");
      END;
    END;

    PROCEDURE Block@8(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    PROCEDURE CallItemTracking@14(VAR ProdOrderComp@1000 : Record 5407);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Form 6510;
      ItemTrackingMgt@1003 : Codeunit 6500;
    BEGIN
      IF ProdOrderComp.Status = ProdOrderComp.Status::Finished THEN
        ItemTrackingMgt.CallPostedItemTrackingForm4(DATABASE::"Prod. Order Component",
          ProdOrderComp."Prod. Order No.",ProdOrderComp."Prod. Order Line No.",ProdOrderComp."Line No.")
      ELSE BEGIN
        ProdOrderComp.TESTFIELD("Item No.");
        InitTrackingSpecification(ProdOrderComp,TrackingSpecification);
        ItemTrackingForm.SetSource(TrackingSpecification,ProdOrderComp."Due Date");
        ItemTrackingForm.RUNMODAL;
      END;
    END;

    PROCEDURE InitTrackingSpecification@13(VAR ProdOrderComp@1000 : Record 5407;VAR TrackingSpecification@1003 : Record 336);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Prod. Order Component";
      WITH ProdOrderComp DO BEGIN
        TrackingSpecification."Item No." := "Item No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification."Bin Code" := "Bin Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := Status;
        TrackingSpecification."Source ID" := "Prod. Order No.";
        TrackingSpecification."Source Batch Name" := '';
        TrackingSpecification."Source Prod. Order Line" := "Prod. Order Line No.";
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Quantity (Base)" := "Remaining Qty. (Base)";
        TrackingSpecification."Qty. to Handle" := "Remaining Quantity";
        TrackingSpecification."Qty. to Handle (Base)" := "Remaining Qty. (Base)";
        TrackingSpecification."Qty. to Invoice" := "Remaining Quantity";
        TrackingSpecification."Qty. to Invoice (Base)" := "Remaining Qty. (Base)";
        TrackingSpecification."Quantity Handled (Base)" := "Expected Qty. (Base)" - "Remaining Qty. (Base)";
        TrackingSpecification."Quantity Invoiced (Base)" := "Expected Qty. (Base)" - "Remaining Qty. (Base)";
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      END;
    END;

    PROCEDURE UpdateItemTrackingAfterPosting@15(ProdOrderComponent@1000 : Record 5407);
    VAR
      ReservEntry@1001 : Record 337;
      CreateReservEntry@1002 : Codeunit 99000830;
    BEGIN
      // Used for updating Quantity to Handle after posting;
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      ReservEntry.SETRANGE("Source Subtype",ProdOrderComponent.Status);
      ReservEntry.SETRANGE("Source ID",ProdOrderComponent."Prod. Order No.");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",ProdOrderComponent."Line No.");
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    BEGIN
    END.
  }
}
