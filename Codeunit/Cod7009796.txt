OBJECT Codeunit 7009796 Gestion excursiones COM
{
  OBJECT-PROPERTIES
  {
    Date=23/07/15;
    Time=10:49:28;
    Modified=Yes;
    Version List=AIC2009,COM;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=Do you want to post the offshore purchase documento %1.;ESP=Desea registrar el documento de compra comercializadora %1.';
      Text002@1000000002 : TextConst 'ENU=Specify a  correct dates;ESP=Especifique unas fechas correctas';
      Text003@1000000001 : TextConst 'ENU=This calculation overlaps with another entered;ESP=Este calculo se solapa con otro ya introducido.';
      Text004@1000000003 : TextConst 'ESP=No se puede recalcular porque reservas ya facturadas.';
      rParAg@1000000004 : Record 7009700;
      rCustomerComision@1000000017 : Record 18;
      rCtaToDel@1000000016 : Record 7009705;
      rDatIns@1000000015 : Record 7009768;
      rSerie@1000000014 : Record 7009921;
      rTouroperador@1000000013 : Record 7009717;
      rTipCam@1000000018 : Record 330;
      cFunSeg@1000000005 : Codeunit 7009751;
      Text005@1000000006 : TextConst 'ENU=Proformas %1 have been created;ESP=Se han creado la prefactura %1';
      Text006@1000000007 : TextConst 'ENU=Must indicate a number of proforma invoice;ESP=Debe de indicar un n£mero de Prefactura';
      Text0008@1000000012 : TextConst 'ENU=Booking %1 has already been invoiced;ESP=La Reserva %1 YA ha sido Facturada';
      Text0009@1000000011 : TextConst 'ENU=Booking %1 has not been proforma invoiced;ESP=La Reserva %1 NO ha sido Prefacturada';
      Text0011@1000000010 : TextConst 'ENU=Would you like to invoice the proforma %1?;ESP=¨Desea realmente facturar la prefactura %1?';
      Text0013@1000000009 : TextConst 'ENU=Total of proforma is 0./Would you like to mark it as invoiced?;ESP=El total de la prefactura es 0./¨Desea marcarla como facturada?';
      Text0014@1000000008 : TextConst 'ENU=Do you want to undo the proforma %1.;ESP=Desea deshacer la prefactura %1.';
      Text0012@1000000019 : TextConst 'ENU=INVOICERO;ESP=FACTURACERO';
      Text0004@1000000020 : TextConst 'ENU=Must indicate an invoice number;ESP=Debe de indicar un n£mero de factura';
      Text007@1000000021 : TextConst 'ENU=Initial date;ESP=Fecha desde';
      Text008@1000000022 : TextConst 'ENU=Final date;ESP=Fecha hasta';
      pwd@1000000024 : TextConst 'ENU=ATNSEC;ESP=ATNSEC';
      Text009@1000000023 : TextConst 'ENU=Do you want to post the selected commision lines?;ESP=¨Desea registrar las l¡neas de comisi¢n selecionadas?';
      Text010@1000000025 : TextConst 'ENU=Excursions from %1 to %2;ESP=Excursiones desde %1 a %2';
      Text011@1000000026 : TextConst 'ENU=Do you want to cancel the calculation of the period (%1-%2) for Destination (%3) - Touroperator (%4);ESP=Desea deshacer el calculo del periodo (%1-%2) para Delegacion (%3) - Touroperador (%4)';
      Text012@1000000027 : TextConst 'ENU=Calculation record no deleted because all the associated incomes are invoiced.;ESP=No se ha borrado el registro de calculo porque todos los ingresos asociados estan facturados.';

    PROCEDURE RegistrarCompra@1000000000(prCabCOM@1000000000 : Record 7009934);
    VAR
      lcCheck@1000000001 : Codeunit 11;
      lrCab@1000000002 : Record 38;
      lrCabCOM@1000000003 : Record 7009934;
    BEGIN
      // RegistrarCompra

      //. Vamos a crear la factura de compra a partir de la informacion que nos han pasado desde
      //. la delegacion

      IF prCabCOM."Num. Documento" = '' THEN
        EXIT;

      IF prCabCOM.Registrada THEN
        EXIT;

      IF NOT CONFIRM(Text001, FALSE, prCabCOM."Num. Documento") THEN
        EXIT;

      lcCheck.DateNotAllowed(prCabCOM."Fecha registro");

      _CheckReasonCode;

      _CabeceraCompra(prCabCOM, lrCab);

      _LineaCompra(prCabCOM, lrCab);

      lrCabCOM := prCabCOM;
      lrCabCOM.VALIDATE(Registrada, TRUE);
      lrCabCOM.MODIFY;
    END;

    LOCAL PROCEDURE _CabeceraCompra@1000000001(prCabCOM@1000000000 : Record 7009934;VAR prCab@1000000003 : Record 38);
    VAR
      lrSalesSetup@1000000002 : Record 311;
    BEGIN
      // _CabeceraCompra

      //. Crear el registro en la tabla 38

      lrSalesSetup.RESET;
      lrSalesSetup.FINDFIRST;

      prCab.INIT;
      prCab.VALIDATE("Document Type", prCabCOM."Tipo Documento");
      prCab.VALIDATE("No. Series"   , lrSalesSetup."Invoice Nos.");
      prCab.INSERT(TRUE);

      prCab.VALIDATE("Buy-from Vendor No."      , prCabCOM."Cod. Proveedor");
      prCab.VALIDATE("Posting Date"             , prCabCOM."Fecha registro");
      prCab.VALIDATE("Posting Description"      , prCabCOM."Texto registro");
      prCab.VALIDATE("Document Date"            , prCabCOM."Fecha emision");
      IF prCab."Document Type" = prCab."Document Type"::Invoice THEN
        prCab.VALIDATE("Vendor Invoice No.", prCabCOM."Num. Documento proveedor")
      ELSE
        prCab.VALIDATE("Vendor Cr. Memo No.", prCabCOM."Num. Documento proveedor");

      prCab.VALIDATE("Shortcut Dimension 1 Code", prCabCOM.Destino);
      prCab.VALIDATE("Shortcut Dimension 2 Code", prCabCOM.Touroperador);
      prCab."Reason Code" := 'ATENNEA';
      prCab.VALIDATE("Prices Including VAT", prCabCOM."Precios impuestos incl.");
      prCab.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE _LineaCompra@1000000005(prCabCOM@1000000002 : Record 7009934;prCab@1000000000 : Record 38);
    VAR
      lrLinCOM@1000000001 : Record 7009935;
      lrLin@1000000003 : Record 39;
      lwLinea@1000000004 : Integer;
    BEGIN
      // _LineaCompra

      lrLinCOM.RESET;
      lrLinCOM.SETRANGE("Tipo Documento", prCabCOM."Tipo Documento");
      lrLinCOM.SETRANGE("Num. Documento", prCabCOM."Num. Documento");
      IF lrLinCOM.FINDSET THEN
      BEGIN
        lwLinea := 0;
        REPEAT
          lwLinea += 10000;

          lrLin.INIT;
          lrLin.VALIDATE("Document Type", prCab."Document Type");
          lrLin.VALIDATE("Document No." , prCab."No.");
          lrLin.VALIDATE("Line No."     , lwLinea);
          lrLin.INSERT(TRUE);

          lrLin.VALIDATE(Type                       , lrLin.Type::"G/L Account");
          lrLin.VALIDATE("No."                      , lrLinCOM."Num. Cuenta");
          lrLin.VALIDATE(Quantity                   , 1);
          lrLin.VALIDATE("Direct Unit Cost"         , lrLinCOM.Importe);
          lrLin.MODIFY(TRUE);
        UNTIL lrLinCOM.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _CheckReasonCode@1000000008();
    VAR
      lrReason@1000000000 : Record 231;
      TextCodAu@1000000001 : TextConst 'ENU=ATENNEA;ESP=ATENNEA';
    BEGIN
      // _CheckReasonCode

      IF NOT lrReason.GET(TextCodAu) THEN
      BEGIN
        lrReason.INIT;
        lrReason.Code        := TextCodAu;
        lrReason.Description := lrReason.Code;
        lrReason.INSERT;
      END;
    END;

    PROCEDURE CalcularExcursion@1000000002();
    VAR
      lrCalculo@1000000001 : Record 7009942;
      rResCOM@1000000002 : Record 7009940;
      rResCOM2@1000000000 : Record 7009940;
      rResCOMDet@1000000004 : Record 7009941;
      rErrCal@1000000003 : Record 7009943;
      lrCond@1000000005 : Record 7010085;
      lwFechaDesde@1000000006 : Date;
      lwFechaHasta@1000000007 : Date;
      lwTouroperador@1000000009 : Code[10];
      lwDelegacion@1000000008 : Code[10];
    BEGIN
      // CalcularExcursion

      //. Pedir los datos de filtro al usuario
      IF NOT _PedirDatos THEN
        EXIT;

      lrCond.GET(USERID);

      lwFechaDesde := lrCond."Fecha desde";
      lwFechaHasta := lrCond."Fecha hasta";
      lwTouroperador := lrCond.TourOperador;
      lwDelegacion := lrCond.Delegacion;

      IF (lwFechaDesde = 0D) OR (lwFechaHasta = 0D) THEN
        ERROR(Text002);

      // Comprobamos si ya existe o se solapa con otro registro

      //-$003lrCalculo.RESET;
      //-$003lrCalculo.SETCURRENTKEY(Modulo, Delegacion, Touroperador, "Fecha desde", "Fecha hasta");
      //-$003lrCalculo.SETRANGE (Modulo       , lrCalculo.Modulo::Excursion);
      //-$003lrCalculo.SETRANGE (Delegacion   , lwDelegacion);
      //-$003lrCalculo.SETRANGE (Touroperador , lwTouroperador);
      //-$003lrCalculo.SETFILTER("Fecha desde", '<=%1', lwFechaHasta);
      //-$003lrCalculo.SETFILTER("Fecha hasta", '>=%1', lwFechaDesde);
      //-$003IF lrCalculo.FINDFIRST THEN
      //-$003  ERROR(Text003);

      CLEAR(lrCalculo);
      lrCalculo.Modulo             := lrCalculo.Modulo::Excursion;
      lrCalculo.Delegacion         := lwDelegacion;
      lrCalculo.Touroperador       := lwTouroperador;
      lrCalculo."Fecha desde"      := lwFechaDesde;
      lrCalculo."Fecha hasta"      := lwFechaHasta;
      lrCalculo."Ultimo recalculo" := CURRENTDATETIME;
      lrCalculo.INSERT(TRUE);

      // Realizamos el calculo
      rResCOM.RESET;
      rResCOM.SETCURRENTKEY(Destino,TourOperador,"Fecha Excursion",Calculada);
      //+$005 <
      IF lrCalculo.Delegacion <> '' THEN
        rResCOM.SETRANGE(Destino          , lrCalculo.Delegacion);
      //+$005 >
      rResCOM.SETRANGE(TourOperador     , lrCalculo.Touroperador);
      rResCOM.SETRANGE("Fecha Excursion", lrCalculo."Fecha desde", lrCalculo."Fecha hasta");
      rResCOM.SETRANGE(Calculada        , FALSE);
      rResCOM.SETRANGE(Facturada        , FALSE);
      IF rResCOM.FINDSET THEN
      BEGIN
        REPEAT
          IF rResCOM.calcula_comisionTO(lrCalculo."Id registro") THEN
          BEGIN
            rResCOM2 := rResCOM;
            rResCOM2.Calculada := TRUE;
            rResCOM2.MODIFY;

            rResCOMDet.RESET;
            rResCOMDet.SETRANGE(Destino         , rResCOM.Destino);
            rResCOMDet.SETRANGE("N§ Reserva"    , rResCOM."N§ Reserva");
            rResCOMDet.SETRANGE("Num. Calculo"  , 0);
            IF rResCOMDet.FINDSET(TRUE) THEN
              rResCOMDet.MODIFYALL("Num. Calculo" , lrCalculo."Id registro");

            lrCalculo.Importe := lrCalculo.Importe + rResCOM."Importe a Facturar";
            lrCalculo.MODIFY;
          END;
        UNTIL rResCOM.NEXT = 0;
      END;

      rErrCal.RESET;
      rErrCal.SETRANGE("ID calculo", lrCalculo."Id registro");
      IF rErrCal.FINDFIRST THEN
      BEGIN
        COMMIT;
        FORM.RUNMODAL(0,rErrCal);
      END;
    END;

    PROCEDURE ReCalcularExcursion@1000000007(prCalculo@1000000000 : Record 7009942);
    VAR
      rResCOM@1000000004 : Record 7009940;
      rResCOM2@1000000002 : Record 7009940;
      rResCOMDet@1000000003 : Record 7009941;
      rErrCal@1000000001 : Record 7009943;
    BEGIN
      // ReCalcularExcursion

      rErrCal.RESET;
      rErrCal.SETRANGE("ID calculo", prCalculo."Id registro");
      rErrCal.DELETEALL;

      prCalculo."Ultimo recalculo" := CURRENTDATETIME;
      prCalculo.Importe := 0;

      // Realizamos el calculo
      rResCOM.RESET;
      rResCOM.SETCURRENTKEY(Destino, TourOperador, "Fecha Excursion", Calculada);
      //+$005 <
      IF prCalculo.Delegacion <> '' THEN
        rResCOM.SETRANGE(Destino          , prCalculo.Delegacion);
      //+$005 >
      rResCOM.SETRANGE(TourOperador     , prCalculo.Touroperador);
      rResCOM.SETRANGE("Fecha Excursion", prCalculo."Fecha desde", prCalculo."Fecha hasta");
      rResCOM.SETRANGE(Facturada        , FALSE);
      IF rResCOM.FINDSET THEN
      BEGIN
        REPEAT
          IF NOT rResCOM.Calculada THEN
          BEGIN
            IF rResCOM.calcula_comisionTO(prCalculo."Id registro") THEN
            BEGIN
              rResCOM2 := rResCOM;
              rResCOM2.Calculada := TRUE;
              rResCOM2.MODIFY;

              rResCOMDet.RESET;
              rResCOMDet.SETRANGE(Destino       , rResCOM.Destino);
              rResCOMDet.SETRANGE("N§ Reserva"  , rResCOM."N§ Reserva");
              rResCOMDet.SETRANGE("Num. Calculo", 0);
              IF rResCOMDet.FINDSET(TRUE) THEN
                rResCOMDet.MODIFYALL("Num. Calculo" , prCalculo."Id registro");
            END;
          END;
          prCalculo.Importe := prCalculo.Importe + rResCOM."Importe a Facturar";
          prCalculo.MODIFY;
        UNTIL rResCOM.NEXT = 0;
      END;
    END;

    PROCEDURE DeshacerCalculo@1000000004(VAR prCalculo@1000000000 : Record 7009942);
    VAR
      lrResCOM@1000000001 : Record 7009940;
      lrResCOM2@1000000003 : Record 7009940;
      lrResCOMDet@1000000002 : Record 7009941;
    BEGIN
      // DeshacerCalculo

      //. Pedir confirmacion al usuario
      IF NOT CONFIRM(Text011, FALSE, prCalculo."Fecha desde", prCalculo."Fecha hasta", prCalculo.Delegacion, prCalculo.Touroperador) THEN
        EXIT;

      lrResCOM.RESET;
      lrResCOM.SETCURRENTKEY(Destino, TourOperador, "Fecha Excursion", Calculada);
      //+$005 <
      IF prCalculo.Delegacion <> '' THEN
        lrResCOM.SETRANGE(Destino          , prCalculo.Delegacion);
      //+$005 >
      lrResCOM.SETRANGE(TourOperador     , prCalculo.Touroperador);
      lrResCOM.SETRANGE("Fecha Excursion", prCalculo."Fecha desde", prCalculo."Fecha hasta");
      lrResCOM.SETRANGE(Calculada        , TRUE);
      lrResCOM.SETRANGE("Num. Factura"   , '');
      IF lrResCOM.FINDSET THEN
      BEGIN
        REPEAT
          lrResCOMDet.RESET;
          lrResCOMDet.SETRANGE(Destino       , lrResCOM.Destino);
          lrResCOMDet.SETRANGE("N§ Reserva"  , lrResCOM."N§ Reserva");
          lrResCOMDet.SETRANGE("Num. Calculo", prCalculo."Id registro");
          IF lrResCOMDet.FINDSET(TRUE) THEN
          BEGIN
            lrResCOM2 := lrResCOM;
            lrResCOM2.Calculada := FALSE;
            lrResCOM2."Importe a Facturar" := 0;
            lrResCOM2.MODIFY;

            lrResCOMDet.MODIFYALL("Num. Calculo", 0);
          END;
        UNTIL lrResCOM.NEXT = 0;

        prCalculo.DELETE;
      END
      ELSE
      BEGIN
        lrResCOMDet.RESET;
        lrResCOMDet.SETRANGE(Destino       , lrResCOM.Destino);
        lrResCOMDet.SETRANGE("Num. Calculo", prCalculo."Id registro");
        IF lrResCOMDet.FINDFIRST THEN
          ERROR(Text012)
        ELSE
          prCalculo.DELETE;
      END;
    END;

    PROCEDURE LlamarFacturacion@1100217002(prRsv@1100217000 : Record 7009940);
    BEGIN
      // LlamarFacturacion

      rParAg.FINDFIRST;

      cFunSeg.TienePermiso('EXC-FAC-RSV', TRUE);

      IF prRsv."Num. Prefactura" = '' THEN
        _PrefacturarExcursiones
      ELSE
        _FacturarExcursiones(prRsv);
    END;

    LOCAL PROCEDURE _PrefacturarExcursiones@1100253000();
    VAR
      lrRsv@1100253006 : Record 7009940;
      lrGuia@1100217000 : Record 7010241;
      lrCond@1100253001 : Record 7010085;
      lwFechaDesde@1100253005 : Date;
      lwFechaHasta@1100253004 : Date;
      lwFechaCambio@1100253002 : Date;
      lwTouroperador@1100217001 : Code[10];
      lwDelegacion@1000000000 : Code[10];
    BEGIN
      // PrefacturarExcursiones

      //. Pedir los datos de filtro al usuario
      IF NOT _PedirDatos THEN
        EXIT;

      lrCond.GET(USERID);

      lwFechaDesde := lrCond."Fecha desde";
      lwFechaHasta := lrCond."Fecha hasta";
      lwTouroperador := lrCond.TourOperador;
      lwDelegacion := lrCond.Delegacion;

      CLEAR(lrRsv);
      lrRsv.SETCURRENTKEY(Destino, TourOperador, "Fecha Excursion", Calculada);
      //+$002 <
      IF lwDelegacion <> '' THEN
        lrRsv.SETRANGE(Destino, lwDelegacion);
      //+$002 >
      lrRsv.SETRANGE(Calculada        , TRUE);
      lrRsv.SETRANGE("Fecha Excursion", lwFechaDesde, lwFechaHasta);
      lrRsv.SETRANGE(TourOperador     , lwTouroperador);
      lrRsv.SETFILTER(Excursion       , '<>%1', '');
      lrRsv.SETFILTER("Hotel Cliente" , '<>%1', '');
      lrRsv.SETRANGE(Facturada        , FALSE);
      lrRsv.SETRANGE("Num. Prefactura", '');

      _CrearPrefactura(lrRsv);
    END;

    LOCAL PROCEDURE _CrearPrefactura@1100253015(VAR prRsv@1100253000 : Record 7009940) : Code[20];
    VAR
      lrRsv@1100253002 : Record 7009940;
      lrRsv2@1100217000 : Record 7009940;
      lwTxt@1000000000 : Text[250];
    BEGIN
      // _CrearPrefactura

      CLEAR(rParAg);
      rParAg.LOCKTABLE;
      rParAg.FINDFIRST;
      IF rParAg."Prefactura excursion" = '' THEN
        rParAg."Prefactura excursion" := 'PFE0000000';
      rParAg."Prefactura excursion" := INCSTR(rParAg."Prefactura excursion");
      rParAg.MODIFY;

      CLEAR(lrRsv); // Dejamos la clave primaria
      lrRsv.COPY(prRsv);
      IF lrRsv.FINDSET(TRUE) THEN
      BEGIN
        REPEAT
          lrRsv2 := lrRsv;
          lrRsv2.VALIDATE("Num. Prefactura", rParAg."Prefactura excursion");
          lrRsv2.MODIFY;
        UNTIL lrRsv.NEXT = 0;

        _ImprimirPrefactura(rParAg."Prefactura excursion");

        lwTxt := STRSUBSTNO(Text005, rParAg."Prefactura excursion");
        MESSAGE(lwTxt);
      END;
    END;

    LOCAL PROCEDURE _ComprobarFicheros@1100253038(prRsv@1100253000 : Record 7009940);
    BEGIN
      // _ComprobarFicheros

      rParAg.FINDFIRST;
      rDatIns.FINDFIRST;

      rSerie.GET(rSerie.Modulo::Excursion);
      rSerie.CheckSeries;

      CLEAR(rCtaToDel);
      rCtaToDel.GET(prRsv.Destino, prRsv.TourOperador);
      rCtaToDel.TESTFIELD(rCtaToDel."Cta. venta exc. COM");
      rCtaToDel.TESTFIELD(rCtaToDel."Cliente comercializadora");

      rCustomerComision.GET(rCtaToDel."Cliente comercializadora"); //$006

      //. Buscamos la ficha de touroperador
      rTouroperador.RESET;
      rTouroperador.GET(prRsv.TourOperador);
    END;

    LOCAL PROCEDURE _FacturarExcursiones@1100253041(prRsv@1100253000 : Record 7009940);
    VAR
      lrRsv@1100253001 : Record 7009940;
      lrRsv2@1100253006 : Record 7009940;
      lrCabFact@1100253005 : Record 36;
      lrImpsTMP@1100253008 : TEMPORARY Record 88000;
      lrCabInc@1100217002 : Record 7009908;
      lwImpFacLoc@1100253002 : Decimal;
      lwTotFac@1000000000 : Decimal;
      lwNoDoc@1100253010 : Code[20];
      lwFechaDesde@1100217000 : Date;
      lwFechaHasta@1100217001 : Date;
      lcRelease@1000000001 : Codeunit 414;
    BEGIN
      // _FacturarExcursiones

      IF prRsv."Num. Factura" <> '' THEN
        ERROR(Text0008, prRsv."N§ Reserva");

      IF prRsv."Num. Prefactura" ='' THEN
        ERROR(Text0009, prRsv."N§ Reserva");

      _ComprobarFicheros(prRsv);

      IF NOT CONFIRM (Text0011, FALSE, prRsv."Num. Prefactura") THEN
        EXIT;

      CLEAR(lrImpsTMP);
      lrImpsTMP.DELETEALL;

      CLEAR(lwFechaDesde);
      CLEAR(lwFechaHasta);

      lwTotFac := 0;
      CLEAR(lrRsv);
      lrRsv.SETCURRENTKEY("Num. Prefactura");
      lrRsv.SETRANGE("Num. Prefactura", prRsv."Num. Prefactura");
      lrRsv.SETRANGE(Facturada, FALSE);
      IF lrRsv.FINDSET THEN
      BEGIN
        REPEAT
          IF lrRsv."Importe a Facturar" <> 0 THEN BEGIN
            lrImpsTMP.RESET;
            lrImpsTMP.SETRANGE("Grupo IVA Producto", lrRsv."Gr. Registro IVA Producto");
            IF NOT lrImpsTMP.FINDFIRST THEN
            BEGIN
              lrImpsTMP.INIT;
              lrImpsTMP.Dia := lrRsv."Fecha Excursion";
              lrImpsTMP.Excursion := lrRsv.Excursion;
              lrImpsTMP."Grupo IVA Producto"       := lrRsv."Gr. Registro IVA Producto";
              lrImpsTMP."% IVA"                    := _BuscaPorcentajeIVA(lrImpsTMP."Grupo IVA Producto");
              lrImpsTMP.INSERT;
            END;

            lwImpFacLoc := lrRsv."Importe a Facturar";
            IF COPYSTR(lrRsv.Divisa, 1, 2) <> COPYSTR(rCustomerComision."Currency Code", 1, 2) THEN
              lwImpFacLoc     := rTipCam.ExchangeAmtFCYToFCY(WORKDATE,
                                                             lrRsv.Divisa,
                                                             rCustomerComision."Currency Code",
                                                             lwImpFacLoc);
            lrImpsTMP.Importe := lrImpsTMP.Importe + lwImpFacLoc;
            lwTotFac := lwTotFac + lwImpFacLoc;
            lrImpsTMP.MODIFY;
          END;
        UNTIL lrRsv.NEXT = 0;
      END;

      // No se cree el documento contable si el total es cero
      CLEAR(lwNoDoc);
      IF lwTotFac <> 0 THEN BEGIN
        _CabeceraFacturaVenta(lrRsv, lrCabFact, lrCabInc, lwTotFac, lwFechaDesde, lwFechaHasta);
        _LineaFacturaVenta(lrCabFact, lwTotFac, lrRsv, lrImpsTMP);

        lrCabInc.GetImportes;
        lrCabInc.MODIFY;

        //+$065 <
        IF lrCabFact.GET(lrCabFact."Document Type", lrCabFact."No.") THEN
          lcRelease.RUN(lrCabFact);
        //+$065 >

        lwNoDoc := lrCabFact."No.";
      END
      ELSE BEGIN
        IF NOT CONFIRM(Text0013) THEN
          EXIT;
        lwNoDoc := Text0012;
      END;

      // Marcamos las reservas
      IF lrRsv.FINDSET THEN BEGIN
        REPEAT
          lrRsv2 := lrRsv;
          lrRsv2.VALIDATE("Num. Factura", lwNoDoc);
          lrRsv2.Facturada      := TRUE;
          lrRsv2.MODIFY;
        UNTIL lrRsv.NEXT = 0;
      END;

      IF lwTotFac <> 0 THEN
        _ImprimirFactura(lrCabFact."No.");
    END;

    LOCAL PROCEDURE _CabeceraFacturaVenta@1100253004(prRsv@1100253000 : Record 7009940;VAR prCabFact@1100253001 : Record 36;VAR prCabInc@1100217003 : Record 7009908;pwTotalFactura@1100253002 : Decimal;pwFechaDesde@1100217001 : Date;pwFechaHasta@1100217002 : Date);
    VAR
      lwFecha@1100253003 : Date;
      lrTipoCambio@1100217000 : Record 330;
      lwTextoRegistro@1100217004 : Text[80];
      lwCli@1000000000 : Code[20];
    BEGIN
      // _CabeceraFacturaVenta

      CLEAR(prCabFact);

      IF pwTotalFactura >= 0 THEN
        prCabFact.VALIDATE("Document Type", prCabFact."Document Type"::Invoice)
      ELSE
        prCabFact.VALIDATE("Document Type", prCabFact."Document Type"::"Credit Memo");

      prCabFact.VALIDATE("No. Series" , rSerie."Serie facturas");

      _CheckReasonCode;
      prCabFact."Reason Code" := 'ATENNEA';
      prCabFact.INSERT(TRUE);

      prCabFact.VALIDATE("Posting No. Series"  , rSerie."Serie facturas");
      prCabFact.VALIDATE("Posting Date", WORKDATE);
      prCabFact.VALIDATE("Sell-to Customer No.", rCustomerComision."No.");
      prCabFact.VALIDATE("Shortcut Dimension 1 Code", prRsv.Destino);
      prCabFact.VALIDATE("Shortcut Dimension 2 Code", prRsv.TourOperador);

      //. La marca de precios IVA incluidos siempre debe estar a TRUE por el modo en que se calculan las reservas
      prCabFact.VALIDATE("Prices Including VAT", TRUE);

      IF prCabFact."Currency Code" <> '' THEN
        prCabFact.VALIDATE("Currency Factor", lrTipoCambio.ExchangeRate(prCabFact."Posting Date", prCabFact."Currency Code"));

      lwTextoRegistro := STRSUBSTNO(Text010, pwFechaDesde, pwFechaHasta); //+$001
      prCabFact."Posting Description" := lwTextoRegistro;

      prCabFact.MODIFY(TRUE);

      // Introducimos la cabecera de factura Incoming
      CLEAR(prCabInc);
      prCabInc.SetInf(prCabFact);
      prCabInc.Modulo           := prCabInc.Modulo::Excursion;
      prCabInc."Fecha servicio" := pwFechaDesde;
      prCabInc."Periodo Desde"  := pwFechaDesde;
      prCabInc."Periodo Hasta"  := pwFechaHasta;
      prCabInc.Touroperador     := prRsv.TourOperador;
      prCabInc."Fecha creacion" := CURRENTDATETIME; //+$044
      prCabInc.INSERT;
    END;

    LOCAL PROCEDURE _LineaFacturaVenta@1100253011(prCabFact@1100253001 : Record 36;pwTotFac@1000000000 : Decimal;VAR prRsv@1000000001 : Record 7009940;VAR prImpTMP@1000000003 : TEMPORARY Record 88000);
    VAR
      lrLinVta@1100253002 : Record 37;
      lrLinInc@1000000004 : Record 7009909;
      lwDescripcion@1100217001 : Text[80];
      lwNumLin@1000000002 : Integer;
      lrVATSetup@1000000005 : Record 325;
    BEGIN
      // _LineaFacturaVenta

      lwNumLin := 0;
      prImpTMP.RESET;
      IF prImpTMP.FINDSET THEN BEGIN
        REPEAT
          lwNumLin += 10000;
          CLEAR(lrLinVta);
          lrLinVta."Document Type" := prCabFact."Document Type";
          lrLinVta."Document No."  := prCabFact."No.";
          lrLinVta."Line No."      := 10000;
          lrLinVta.VALIDATE("Sell-to Customer No." , prCabFact."Sell-to Customer No.");
          lrLinVta.INSERT(TRUE);

          lrLinVta.VALIDATE(Type   , lrLinVta.Type::"G/L Account");

          lrLinVta.VALIDATE("No."  , rCtaToDel."Cta. venta exc. COM");
          lrLinVta.VALIDATE("VAT Prod. Posting Group", prImpTMP."Grupo IVA Producto");

          //lrLinVta.Description := lwDescripcion;

          lrLinVta.VALIDATE(Quantity, 1);
          lrLinVta.VALIDATE("Unit Price", pwTotFac);

          IF prCabFact."Prices Including VAT" THEN BEGIN
            lrLinVta."Amount Including VAT" := lrLinVta."Line Amount";
            lrLinVta.Amount                 := ROUND(lrLinVta."Line Amount" / (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
          END
          ELSE BEGIN
            lrLinVta.Amount                 := lrLinVta."Line Amount";
            lrLinVta."Amount Including VAT" := ROUND(lrLinVta."Line Amount" * (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
          END;
          lrLinVta.MODIFY;
        UNTIL prImpTMP.NEXT = 0;
      END;


      // Creamos las lineas de factura Incoming
      IF prRsv.FINDFIRST THEN
      BEGIN
        REPEAT
          prRsv.CALCFIELDS(prRsv.Adultos, prRsv.Ni¤os);
          CLEAR(lrLinInc);
          lrLinInc."Tipo documento":= prCabFact."Document Type";
          lrLinInc."N§ documento"  := prCabFact."No.";
          lrLinInc.Concepto        := prRsv.Excursion;
          lrLinInc.Delegacion      := prRsv.Destino;
          lrLinInc.TourOperador    := prRsv.TourOperador;
          lrLinInc.Fecha           := prRsv."Fecha Excursion";
          lrLinInc.Adultos         := prRsv.Adultos;
          lrLinInc.Ni¤os           := prRsv.Ni¤os;
          lrLinInc.Personas        := prRsv.Adultos + prRsv.Ni¤os;
          lrLinInc.Bono            := prRsv."Booking Touroperador";
          lrLinInc.Nombre          := prRsv."Nombre Cliente";

          //. Campos de informacion IVA
          lrLinInc."Grupo registro IVA neg."  := rCustomerComision."VAT Bus. Posting Group";
          lrLinInc."Grupo registro IVA prod." := prRsv."Gr. Registro IVA Producto";
          lrVATSetup.GET(lrLinInc."Grupo registro IVA neg.", lrLinInc."Grupo registro IVA prod.");
          lrLinInc."% IVA"         := _BuscaPorcentajeIVA(prRsv."Gr. Registro IVA Producto");
          lrLinInc."VAT Identifier"           := lrVATSetup."VAT Identifier";

          lrLinInc.Descripcion     := '';
          lrLinInc.Cantidad        := 1;
          lrLinInc.Precio          := prRsv."Importe a Facturar";
          lrLinInc.Importe         := prRsv."Importe a Facturar";
          lrLinInc."Cod. divisa"   := prRsv.Divisa;
          lrLinInc."Impuesto Incluidos"       := TRUE;

          lrLinInc.SetImportes;

          lrLinInc.INSERT(TRUE);

        UNTIL prRsv.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ImprimirFactura@1100253001(pwNoFact@1100253000 : Code[20]);
    VAR
      lrCab@1100217000 : Record 7009908;
    BEGIN
      // ImprimirFactura

      IF pwNoFact = '' THEN
        ERROR(Text0004);

      rParAg.FINDFIRST;
      rParAg.TESTFIELD("Factura Venta Excursion");

      CLEAR(lrCab);
      lrCab.SETRANGE("No.", pwNoFact);
      IF lrCab.FINDFIRST THEN
        REPORT.RUN(rParAg."Factura Venta Excursion", TRUE, TRUE, lrCab);
    END;

    LOCAL PROCEDURE _PedirDatos@1000000003() : Boolean;
    VAR
      lrCond@1000000000 : Record 7010085;
      lfSeleccion@1000000001 : Form 7010029;
    BEGIN
      // _PedirDatos
      //. Pedir los datos de filtro al usuario

      lrCond.InicializaRegistro;
      lrCond.GET(USERID);
      lrCond.FILTERGROUP(2);
      lrCond.SETRECFILTER;
      lrCond.FILTERGROUP(0);
      COMMIT;

      CLEAR(lfSeleccion);
      lfSeleccion.SETTABLEVIEW(lrCond);
      IF lfSeleccion.RUNMODAL <> ACTION::OK THEN
        EXIT(FALSE);

      //. Comprobamos si los datos estan correctamente rellenados
      lrCond.GET(USERID);
      //lrCond.TESTFIELD(Delegacion);
      lrCond.TESTFIELD(TourOperador);
      lrCond.TESTFIELD("Fecha desde");
      lrCond.TESTFIELD("Fecha hasta");

      EXIT(TRUE);
    END;

    PROCEDURE LlamarImpresion@1100217003(prRsv@1100217000 : Record 7009940);
    BEGIN
      // LlamarImpresion

      IF (prRsv."Num. Prefactura" = '') AND
         (prRsv."Num. Factura" = '') THEN
        EXIT;

      IF prRsv."Num. Factura" = '' THEN
        _ImprimirPrefactura(prRsv."Num. Prefactura")
      //ELSE
      //  _ImprimirFactura(prRsv."Num. Factura");
    END;

    LOCAL PROCEDURE _ImprimirPrefactura@1100217016(pwNPrefact@1000000002 : Code[20]);
    VAR
      lrRsv@1000000003 : Record 7009940;
      lrCompanyInfo@1100217016 : Record 79;
      lcExcel@1100217006 : Codeunit 7009755;
      lcNom@1100217015 : Codeunit 7009702;
      lwFila@1100217007 : Integer;
      lwSigno@1100217013 : Integer;
      lwEstado@1100217009 : Text[2];
      lwTextoSuplementos@1100217011 : Text[250];
      lwTexto@1100217014 : Text[30];
      lwTotalVenta@1000000000 : Decimal;
      lwTextFormula@1000000001 : Text[30];
      lwFechaDesde@1000000005 : Date;
      lwFechaHasta@1000000004 : Date;
    BEGIN
      // _GenerarExcel

      IF pwNPrefact = '' THEN
        ERROR(Text006);

      CLEAR(lrRsv);
      lrRsv.SETCURRENTKEY("Num. Prefactura");
      lrRsv.SETRANGE("Num. Prefactura", pwNPrefact);
      lrRsv.SETRANGE(lrRsv.Facturada, FALSE);
      IF lrRsv.FINDLAST THEN
        lwFechaHasta := lrRsv."Fecha Excursion";
      IF lrRsv.FINDFIRST THEN
      BEGIN
        lrCompanyInfo.FINDFIRST;
        lwTotalVenta := 0;
        lwFechaDesde := lrRsv."Fecha Excursion";

        //. Vamos a crear un libro excel

        lcExcel.Nuevo;

        lcExcel.ValorCelda(1, 1, lrCompanyInfo.Name, FALSE, FALSE, FALSE);
        lcExcel.Rango(1, 1, 1, 3);
        lcExcel.CombinarSinCentrar;
        lcExcel.Rango(1, 1, 1, 1);

        lcExcel.ValorCelda(3, 1, lrRsv.FIELDCAPTION(TourOperador), TRUE, FALSE, FALSE);
        lcExcel.ValorCelda(3, 2, lrRsv.TourOperador, FALSE, FALSE, FALSE);
        lcExcel.ValorCelda(4, 1, Text007, TRUE, FALSE, FALSE);
        lcExcel.ValorCelda(4, 2, FORMAT(lwFechaDesde), FALSE, FALSE, FALSE);
        lcExcel.ValorCelda(5, 1, Text008, TRUE, FALSE, FALSE);
        lcExcel.ValorCelda(5, 2, FORMAT(lwFechaHasta), FALSE, FALSE, FALSE);

        lcExcel.ValorCelda(7, 1, lrRsv.FIELDCAPTION("Fecha Excursion"), TRUE, FALSE, FALSE); //. fecha excursi¢n
        lcExcel.FormatoTexto('', 0, 0, 0, 4, 0);
        lcExcel.AnchoColumna(20);
        lcExcel.ValorCelda(7, 2, lrRsv.FIELDCAPTION(lrRsv."N§ Ticket"), TRUE, FALSE, FALSE); //. Bono
        lcExcel.AnchoColumna(40);
        lcExcel.ValorCelda(7, 3, lrRsv.FIELDCAPTION(Excursion), TRUE, FALSE, FALSE); //. Excursion
        lcExcel.AnchoColumna(40);
        lcExcel.ValorCelda(7, 4, lrRsv.FIELDCAPTION(Adultos), TRUE, FALSE, FALSE); //. ADULTOS
        lcExcel.AnchoColumna(8);
        lcExcel.CentrarTexto;
        lcExcel.ValorCelda(7, 5, lrRsv.FIELDCAPTION(Ni¤os), TRUE, FALSE, FALSE); //. NI¥OS
        lcExcel.AnchoColumna(8);
        lcExcel.CentrarTexto;
        lcExcel.ValorCelda(7, 6, lrRsv.FIELDCAPTION("Importe a Facturar"), TRUE, FALSE, FALSE); //. Importe
        lcExcel.AnchoColumna(10);

        lwFila := 7;
        REPEAT
          lwFila += 1;
          lrRsv.CALCFIELDS(lrRsv.Adultos, lrRsv.Ni¤os);

          lcExcel.ValorCelda(lwFila, 1, FORMAT(lrRsv."Fecha Excursion"), FALSE, FALSE, FALSE); //. FECHA SERVICIO
          lcExcel.ValorCelda(lwFila, 2, lrRsv."Booking Touroperador", FALSE, FALSE, FALSE); //. Bono
          lcExcel.ValorCelda(lwFila, 3, lcNom.nom_producto(lrRsv.Excursion), FALSE, FALSE, FALSE); //. EXCURSION
          lcExcel.ValorCelda(lwFila, 4, FORMAT(lrRsv.Adultos), FALSE, FALSE, FALSE); //. ADULTOS
          lcExcel.CentrarTexto;
          lcExcel.ValorCelda(lwFila, 5, FORMAT(lrRsv.Ni¤os) , FALSE, FALSE, FALSE); //. NI¥OS
          lcExcel.CentrarTexto;
          lcExcel.ValorCelda(lwFila, 6, FORMAT(lrRsv."Importe a Facturar"), FALSE, FALSE, FALSE); //. IMPORTE

        UNTIL lrRsv.NEXT = 0;

        //. Proteger y Mostrar al usuario
        lcExcel.AjustarTexto;
        lcExcel.ProtegerHoja(pwd);
        lcExcel.Mostrar;
      END;
    END;

    LOCAL PROCEDURE _BuscaPorcentajeIVA@1100217011(pwIVAProducto@1100217000 : Code[10]) : Decimal;
    VAR
      lrVATSetup@1100217001 : Record 325;
    BEGIN
      // _BuscaPorcentajeIVA

      // Retornamos el valor que nos servira para obtener la base del impuesto

      lrVATSetup.GET(rCustomerComision."VAT Bus. Posting Group", pwIVAProducto);
      EXIT(lrVATSetup."VAT+EC %");
    END;

    PROCEDURE DeshacerPrefactura@1100217000(prRsv@1100217000 : Record 7009940);
    VAR
      lrRsv@1100217001 : Record 7009940;
      lrRsv2@1100217002 : Record 7009940;
    BEGIN
      // DeshacerPrefactura

      IF prRsv."Num. Prefactura" = '' THEN
        EXIT;

      IF prRsv."Num. Factura" <> '' THEN
        ERROR(Text0008, prRsv."N§ Reserva");

      IF NOT CONFIRM(Text0014, FALSE, prRsv."Num. Prefactura") THEN
        EXIT;

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("Num. Prefactura");
      lrRsv.SETRANGE("Num. Prefactura", prRsv."Num. Prefactura");
      IF lrRsv.FINDSET(TRUE) THEN
      BEGIN
        REPEAT
          lrRsv2 := lrRsv;
          lrRsv2.VALIDATE("Num. Prefactura", '');
          lrRsv2.MODIFY;
        UNTIL lrRsv.NEXT = 0;
      END;
    END;

    PROCEDURE ComisionComercializadora@1000000006(prLinCom@1000000009 : Record 7009947);
    VAR
      lText01@1100253008 : TextConst 'ENU=CTO_;ESP=CTO_';
      lrLind@1000000004 : Record 81;
      lrSec@1000000003 : Record 232;
      LTEXT0002@1000000005 : TextConst 'ENU=Excrusions diary;ESP=Diario Excursiones';
      lrLibro@1000000008 : Record 80;
      TempJnlLineDim@1000000010 : TEMPORARY Record 356;
      JnlLineDim@1000000011 : Record 356;
      GenJnlPostLine@1000000007 : Codeunit 12;
      DimMgt@1000000012 : Codeunit 408;
      lrPar@1000000013 : Record 7009700;
      wDiarioGeneral@1000000000 : Code[10];
      lText02@1000000001 : TextConst 'ENU=EXCUR;ESP=EXCUR';
      wPrimeraLinea@1000000002 : Integer;
      wUltLinea@1000000006 : Integer;
    BEGIN
      // _ComisionComercializadora

      IF NOT CONFIRM(Text009, FALSE) THEN
        EXIT;

      lrPar.GetLibroDiarioGeneral;

      lrLibro.RESET;
      lrLibro.SETRANGE(Type     , lrLibro.Type::General);
      lrLibro.SETRANGE(Recurring, FALSE);
      lrLibro.FINDFIRST;
      wDiarioGeneral := lrLibro.Name;

      CLEAR(lrSec);
      lrSec.RESET;
      IF NOT lrSec.GET(wDiarioGeneral, lText02) THEN
      BEGIN
        lrSec."Journal Template Name" := wDiarioGeneral;
        lrSec.Name                    := lText02;
        lrSec.Description             := LTEXT0002;
        lrSec.INSERT;
      END;

      IF prLinCom.FINDFIRST THEN
      BEGIN
        REPEAT
          // Lineas de diario
          CLEAR(lrLind);
          lrLind.VALIDATE("Line No."                 , _LastGLLine(wDiarioGeneral , lText02) + 1);
          IF wPrimeraLinea = 0 THEN
            wPrimeraLinea := lrLind."Line No.";
          wUltLinea :=  lrLind."Line No.";
          lrLind.VALIDATE("Journal Template Name"    , wDiarioGeneral);
          lrLind.VALIDATE("Journal Batch Name"       , lText02);
          lrLind.VALIDATE("Transaction No."          , _LastTrsc(wDiarioGeneral , lText02) + 1);
          lrLind.VALIDATE("Document Type"            , lrLind."Document Type"::"Credit Memo");
          lrLind.VALIDATE("Document No."             , prLinCom."Document No.");
          lrLind.VALIDATE("Posting Date"             , prLinCom."Posting Date");
          lrLind.VALIDATE("Account Type"             , prLinCom."Account Type");
          lrLind.VALIDATE("Account No."              , prLinCom."Account No.");
          lrLind.VALIDATE("Shortcut Dimension 1 Code", prLinCom."Shortcut Dimension 1 Code");
          lrLind.VALIDATE("Shortcut Dimension 2 Code", prLinCom."Shortcut Dimension 2 Code");
          lrLind.VALIDATE(Description                , prLinCom.Description);
          lrLind.VALIDATE("Bal. Account Type"        , prLinCom."Bal. Account Type");
          lrLind.VALIDATE("Bal. Account No."         , prLinCom."Bal. Account No.");

          //. Forzamos que la informacion de IVA este en blanco
          lrLind."Gen. Posting Type"        := 0;
          lrLind."VAT Bus. Posting Group"   := '';
          lrLind."VAT Prod. Posting Group"  := '';
          lrLind."Gen. Bus. Posting Group"  := '';
          lrLind."Gen. Prod. Posting Group" := '';

          lrLind.VALIDATE("Currency Code", prLinCom."Currency Code");
          lrLind.VALIDATE(Amount , prLinCom.Amount);

          lrLind."System-Created Entry" := TRUE;
          lrLind."Source Code"   := lrLibro."Source Code";
          lrLind.INSERT(TRUE);
        UNTIL prLinCom.NEXT = 0;

        // registramos la l¡neas
        lrLind.RESET;
        lrLind.SETRANGE("Journal Template Name", wDiarioGeneral);
        lrLind.SETRANGE("Journal Batch Name", lText02);
        lrLind.SETRANGE("Line No.", wPrimeraLinea, wUltLinea);
        IF lrLind.FINDSET THEN
        BEGIN
          REPEAT
            JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
            JnlLineDim.SETRANGE("Journal Template Name",lrLind."Journal Template Name");
            JnlLineDim.SETRANGE("Journal Batch Name",lrLind."Journal Batch Name");
            JnlLineDim.SETRANGE("Journal Line No.",lrLind."Line No.");
            JnlLineDim.SETRANGE("Allocation Line No.",0);
            TempJnlLineDim.DELETEALL;
            DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDim,TempJnlLineDim);
            GenJnlPostLine.RunWithCheck(lrLind,TempJnlLineDim);
          UNTIL lrLind.NEXT = 0;
          lrLind.DELETEALL;
        END;

        prLinCom.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE _LastGLLine@1100253021(pwLibroDiario@1100253002 : Code[10];pwSeccion@1100253001 : Code[10]) : Integer;
    VAR
      lrLin@1100253000 : Record 81;
    BEGIN
      // _LastGLLine

      CLEAR(lrLin);
      lrLin.SETRANGE("Journal Template Name", pwLibroDiario);
      lrLin.SETRANGE("Journal Batch Name"   , pwSeccion);
      IF lrLin.FINDLAST THEN
        EXIT(lrLin."Line No.")
    END;

    LOCAL PROCEDURE _LastTrsc@1100253025(pwLibroDiario@1100253002 : Code[10];pwSeccion@1100253001 : Code[10]) : Integer;
    VAR
      lrLin@1100253000 : Record 81;
    BEGIN
      // _LastTrsc
      // Devuelve el ultimo asiento del diario

      CLEAR(lrLin);
      lrLin.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Transaction No.");
      lrLin.SETRANGE("Journal Template Name", pwLibroDiario);
      lrLin.SETRANGE("Journal Batch Name"   , pwSeccion);
      IF lrLin.FINDLAST THEN
        EXIT(lrLin."Transaction No.");
    END;

    BEGIN
    {
      $000 AJS 16032015 Repositorio de las funciones que se van a ejecutar en la empresa comercializadora

      $001 AJS 05062015 No se estaba rellenando el texto de registro de la factura

      $002 AJS 09052015 Permitir facturar sin filtro de destino

      $003 AJS 03072015 Permitirmos calculos que se solapen

      $004 AJS 10072015 Nueva funcion DeshacerCalculo

      $005 AJS 23072015 El filtro por Delegacion no ser  obligatorio en el calculo
    }
    END.
  }
}
