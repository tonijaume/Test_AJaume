OBJECT Codeunit 1 ApplicationManagement
{
  OBJECT-PROPERTIES
  {
    Date=21/11/14;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009,TRF2009,NAVW16.00.10,LIQEM5.00,CACEM5.00,NAVES6.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 17=r,
                TableData 51=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=CRONUS;ESP=CRONUS';
      Text001@1003 : TextConst 'ENU=This is the demonstration company %1\\;ESP=Esta es la empresa de demostraci¢n %1\\';
      Text002@1002 : TextConst 'ENU=You can try out program features on the data in the demonstration company before using the features with your real data.\The program has set the work date to %2.\\;ESP=Puede probar caracter¡sticas del programa en los datos de la empresa de demostraci¢n antes de utilizar las caracter¡sticas con los datos reales.\El programa estableci¢ esta fecha de trabajo: %2.\\';
      Text003@1001 : TextConst 'ENU=To close the demonstration company and set up a new company, click File, Company, New. \To open an existing company, click File, Company, Open.;ESP=Para cerrar la empresa de demostraci¢n y configurar una nueva, haga clic en Archivo, Empresa, Nueva.\Para abrir una empresa existente, haga clic en Archivo, Empresa, Abrir.';
      Text005@1004 : TextConst 'ENU=TODAY;ESP=HOY';
      Text006@1005 : TextConst 'ENU=WORKDATE;ESP=TRABAJO';
      Text007@1006 : TextConst 'ENU=TIME;ESP=HORA';
      Text008@1007 : TextConst 'ENU=PERIOD;ESP=PERIODO';
      Text009@1008 : TextConst 'ENU=YEAR;ESP=A¥O';
      Text010@1009 : TextConst 'ENU=ABCDEFGHIJKLMNOPQRSTUVWXYZ;ESP=ABCDEFGHIJKLMN¥OPQRSTUVWXYZ';
      Text011@1010 : TextConst 'ENU=When specifying periods and years you can use numbers from 1 - 999, such as P-1, P1, Y2 or Y+3.;ESP=Cuando se indican periodos y a¤os se pueden utilizar n£meros desde 1 a 999, tales como P-1, P2, A2, A+3.';
      Text012@1011 : TextConst 'ENU=<Precision,%1><Standard format,0>;ESP=<Precision,%1><Standard format,0>';
      Text016@1013 : TextConst 'ENU=Excl. VAT;ESP=excl. IVA';
      Text017@1014 : TextConst 'ENU=Incl. VAT;ESP=incl. IVA';
      Currency@1025 : Record 4;
      GLSetup@1018 : Record 98;
      AccountingPeriod@1019 : Record 50;
      StdTxt@1020 : Record 7;
      Dim@1026 : Record 348;
      EmployeePortalApplSrv@1017 : Codeunit 6810;
      LogInWorkDate@1021 : Date;
      LogInDate@1022 : Date;
      LogInTime@1023 : Time;
      Sign@1028 : Text[1];
      PartOfText@1029 : Text[132];
      Date@1030 : Date;
      Date1@1031 : Date;
      Date2@1032 : Date;
      Text1@1033 : Text[30];
      Text2@1034 : Text[30];
      Numeral@1035 : Integer;
      i@1036 : Integer;
      OK@1037 : Boolean;
      Text019@1016 : TextConst 'ENU=End User License Agreement has not been accepted.;ESP=No se ha aceptado el contrato de licencia para el usuario final.';
      Text020@1015 : TextConst 'ENU=The Go Live date is %1.;ESP=La fecha publicaci¢n es %1.';
      Text021@1012 : TextConst 'ENU=To close the demonstration company and open another company, click Microsoft Dynamics NAV, Select Company.;ESP=Para cerrar la empresa de demostraci¢n y abrir otra empresa, haga clic en Microsoft Dynamics NAV, Seleccionar empresa.';
      GLSetupRead@1024 : Boolean;
      Text7010310@1000000000 : TextConst 'ENU=CALENDAR;ESP=CALENDARIO';

    PROCEDURE CompanyOpen@30();
    VAR
      lfLabelDelegacion@1100217000 : Form 7009832;
    BEGIN
      IF GUIALLOWED THEN
      BEGIN
        LogInStart;

        //$006 <
        IF NOT ISSERVICETIER THEN
          lfLabelDelegacion.RUN;
        //$006 >
      END;
    END;

    PROCEDURE GetSystemIndicator@51(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    VAR
      CompanyInformation@1002 : Record 79;
    BEGIN
      IF CompanyInformation.GET THEN
        CompanyInformation.GetSystemIndicator(Text,Style)
    END;

    PROCEDURE CompanyClose@31();
    VAR
      MobDocDispatcher@1000 : Codeunit 8700;
      BizTalkApplnSrvStartup@1001 : Codeunit 99008528;
    BEGIN
      EmployeePortalApplSrv.StopQueue;
      MobDocDispatcher.Stop;
      BizTalkApplnSrvStartup.StopTcpListen;
      IF GUIALLOWED THEN
        LogInEnd;
    END;

    PROCEDURE FindPrinter@11(ReportID@1000 : Integer) : Text[250];
    VAR
      PrinterSelection@1001 : Record 78;
      cUsoInformes@1100217000 : Codeunit 7009779;
    BEGIN
      //+$007 <
      cUsoInformes.UsoInforme(ReportID);
      //+$007 >

      CLEAR(PrinterSelection);

      IF NOT PrinterSelection.GET(USERID,ReportID) THEN
        IF NOT PrinterSelection.GET('',ReportID) THEN
          IF NOT PrinterSelection.GET(USERID,0) THEN
            IF PrinterSelection.GET('',0) THEN;

      EXIT(PrinterSelection."Printer Name");
    END;

    LOCAL PROCEDURE LogInStart@10001();
    VAR
      GLSetup@1000 : Record 98;
      GLEntry@1001 : Record 17;
      RMSetup@1002 : Record 5079;
      Profile@1006 : Record 2000000072;
      LicenseAgreement@1008 : Record 140;
      CompanyInitialize@1003 : Codeunit 2;
      ConfPersMgt@1004 : Codeunit 9170;
      Language@1005 : Record 2000000045;
      lcFunHot@1100253000 : Codeunit 7009719;
      lcFunVar@1100253003 : Codeunit 7009720;
      lrControlRV@1100253001 : Record 7009843;
      lrControlPor@1100253002 : Record 7009844;
      lrSupl@1100217000 : Record 7010165;
    BEGIN
      IF (STRPOS(COMPANYNAME,Text000) < 1) AND LicenseAgreement.GET THEN
        IF (TODAY >= LicenseAgreement."Effective Date") AND NOT LicenseAgreement.Accepted THEN BEGIN
          FORM.RUNMODAL(FORM::"License Agreement Accept");
          LicenseAgreement.GET;
          IF NOT LicenseAgreement.Accepted THEN
            MESSAGE(Text019);
        END ELSE
          IF TODAY < LicenseAgreement."Effective Date" THEN
            MESSAGE(Text020,LicenseAgreement."Effective Date");

      Language.SETRANGE("STX File Exist",TRUE);
      Language.SETRANGE("Globally Enabled",TRUE);
      Language."Language ID" := GLOBALLANGUAGE;
      IF NOT Language.FIND THEN BEGIN
        Language."Language ID" := WINDOWSLANGUAGE;
        IF NOT Language.FIND THEN
          Language."Language ID" := ApplicationLanguage;
      END;
      GLOBALLANGUAGE := Language."Language ID";

      IF NOT GLSetup.GET THEN BEGIN
        CompanyInitialize.RUN;
        COMMIT;
        CLEAR(CompanyInitialize);
      END;

      IF Profile.ISEMPTY THEN BEGIN
        ConfPersMgt.RUN;
        COMMIT;
        CLEAR(ConfPersMgt);
      END;

      LogInDate := TODAY;
      LogInTime := TIME;
      LogInWorkDate := 0D;
      IF STRPOS(COMPANYNAME,Text000) = 1 THEN
        IF GLEntry.READPERMISSION THEN BEGIN
          GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
          OK := TRUE;
          REPEAT
            GLEntry.SETFILTER("G/L Account No.",'>%1',GLEntry."G/L Account No.");
            GLEntry.SETFILTER("Posting Date",'>%1',GLEntry."Posting Date");
            IF GLEntry.FINDFIRST THEN BEGIN
              GLEntry.SETRANGE("G/L Account No.",GLEntry."G/L Account No.");
              GLEntry.SETRANGE("Posting Date");
              GLEntry.FINDLAST;
            END ELSE
              OK := FALSE
          UNTIL NOT OK;
          IF NOT (GLEntry."Posting Date" IN [0D,WORKDATE]) THEN BEGIN
            IF NOT ISSERVICETIER THEN
              MESSAGE(
                Text001 +
                Text002 +
                Text003,
                COMPANYNAME,NORMALDATE(GLEntry."Posting Date"))
            ELSE
              MESSAGE(
                Text001 +
                Text002 +
                Text021,
                COMPANYNAME,NORMALDATE(GLEntry."Posting Date"));
            LogInWorkDate := WORKDATE;
            WORKDATE := NORMALDATE(GLEntry."Posting Date");
          END;
        END;

      RMSetup.GET;
      IF (RMSetup."E-Mail Logging User ID" <> '') AND (RMSetup."E-Mail Logging User ID" = UPPERCASE(USERID)) THEN
        CODEUNIT.RUN(CODEUNIT::"E-Mail Dispatcher");

      // $002 JPT 12/08/10 Funcion para controlar las reseras hotel no confirmadas para los proximos dias
      // GOC-OC-10007
      lcFunHot.ContrlEntradas;
      // $003 AJF 17/09/10 Mostramos las reservas futuras con vuelos en blanco.
      // GOC-OC-10010
      lrControlRV.MostrarVuelosIncompletos;
      lrControlPor.AbrirVentanaControl; //+$001
      lcFunVar.ComprobarCalendarioImpuestos; //+$004

      lrSupl.VerSinAutorizar; //+$005
    END;

    LOCAL PROCEDURE LogInEnd@10002();
    VAR
      UserSetup@1000 : Record 91;
      UserTimeRegister@1001 : Record 51;
      cUsoInformes@1100217000 : Codeunit 7009779;
      LogOutDate@1002 : Date;
      LogOutTime@1003 : Time;
      Minutes@1004 : Integer;
      UserSetupFound@1005 : Boolean;
      RegisterTime@1006 : Boolean;
    BEGIN
      IF LogInWorkDate <> 0D THEN
        IF LogInWorkDate = LogInDate THEN
          WORKDATE := TODAY
        ELSE
          WORKDATE := LogInWorkDate;

      IF USERID <> '' THEN BEGIN
        IF UserSetup.GET(USERID) THEN BEGIN
          UserSetupFound := TRUE;
          RegisterTime := UserSetup."Register Time";
        END;
        IF NOT UserSetupFound THEN
          IF GetGLSetup THEN
            RegisterTime := GLSetup."Register Time";
        IF RegisterTime THEN BEGIN
          LogOutDate := TODAY;
          LogOutTime := TIME;
          IF (LogOutDate > LogInDate) OR (LogOutDate = LogInDate) AND (LogOutTime > LogInTime) THEN
            Minutes := ROUND((1440 * (LogOutDate - LogInDate)) + ((LogOutTime - LogInTime) / 60000),1);
          IF Minutes = 0 THEN
            Minutes := 1;
          UserTimeRegister.INIT;
          UserTimeRegister."User ID" := USERID;
          UserTimeRegister.Date := LogInDate;
          IF UserTimeRegister.FIND THEN BEGIN
            UserTimeRegister.Minutes := UserTimeRegister.Minutes + Minutes;
            UserTimeRegister.MODIFY;
          END ELSE BEGIN
            UserTimeRegister.Minutes := Minutes;
            UserTimeRegister.INSERT;
          END;
        END;
      END;

      //+$007 <
      cUsoInformes.SalvarUsoInforme;
      //+$007 >
    END;

    PROCEDURE ApplicationVersion@2() : Text[80];
    BEGIN
      EXIT('ES Dynamics NAV 6.0 R2');
    END;

    PROCEDURE ApplicationBuild@3() : Text[80];
    BEGIN
      EXIT('32012');
    END;

    PROCEDURE BaseApplicationBuild@1000000() : Text[80];
    BEGIN
       EXIT('32012');
    END;

    PROCEDURE ApplicationLanguage@4() : Integer;
    BEGIN
      EXIT(1033);
    END;

    PROCEDURE DefaultRoleCenter@50() : Integer;
    VAR
      ConfPersMgt@1000 : Codeunit 9170;
    BEGIN
      EXIT(ConfPersMgt.DefaultRoleCenterID);
    END;

    PROCEDURE CodeCoverage@6();
    BEGIN
      FORM.RUN(FORM::"Code Coverage");
    END;

    PROCEDURE MakeDateTimeText@114(VAR DateTimeText@1000 : Text[250]) : Integer;
    VAR
      Date@1001 : Date;
      Time@1002 : Time;
    BEGIN
      IF GetSeparateDateTime(DateTimeText,Date,Time) THEN BEGIN
        IF Date = 0D THEN
          EXIT;
        IF Time = 0T THEN
          Time := 000000T;
        DateTimeText := FORMAT(CREATEDATETIME(Date,Time),0,1);
      END;
    END;

    PROCEDURE GetSeparateDateTime@10011(DateTimeText@1000 : Text[250];VAR Date@1005 : Date;VAR Time@1006 : Time) : Boolean;
    VAR
      DateText@1001 : Text[250];
      TimeText@1002 : Text[250];
      Position@1008 : Integer;
      Length@1007 : Integer;
    BEGIN
      Date := 0D;
      Time := 0T;
      Position := 1;
      Length := STRLEN(DateTimeText);
      ReadCharacter(' ',DateTimeText,Position,Length);
      ReadUntilCharacter(' ',DateTimeText,Position,Length);
      DateText := DELCHR(COPYSTR(DateTimeText,1,Position - 1),'<>');
      TimeText := DELCHR(COPYSTR(DateTimeText,Position),'<>');
      IF DateText = '' THEN
        EXIT(TRUE);

      IF MakeDateText(DateText) = 0 THEN;
      IF NOT EVALUATE(Date,DateText) THEN
        EXIT(FALSE);

      IF TimeText = '' THEN
        EXIT(TRUE);

      IF MakeTimeText(TimeText) = 0 THEN;
      IF EVALUATE(Time,TimeText) THEN
        EXIT(TRUE);
    END;

    PROCEDURE MakeDateText@105(VAR DateText@1000 : Text[250]) : Integer;
    VAR
      Position@1004 : Integer;
      Length@1003 : Integer;
      fCalendar@1000000000 : Form 7035306;
    BEGIN
      Position := 1;
      Length := STRLEN(DateText);
      ReadCharacter(' ',DateText,Position,Length);
      IF NOT FindText(PartOfText,DateText,Position,Length) THEN
        EXIT(0);

      CASE PartOfText OF
        COPYSTR(Text005,1,STRLEN(PartOfText)):
          Date := TODAY;
        COPYSTR(Text006,1,STRLEN(PartOfText)):
          Date := WORKDATE;
        //. TRANSFER
        COPYSTR(Text7010310, 1, STRLEN(PartOfText)):
        BEGIN
          CLEAR(fCalendar);
          fCalendar.RUNMODAL;
          Date := fCalendar.GetChosenDate;
        END
        ELSE
          EXIT(0);
      END;
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',DateText,Position,Length);
      IF Position > Length THEN BEGIN
        DateText := FORMAT(Date);
        EXIT(0);
      END;
      EXIT(Position);
    END;

    PROCEDURE MakeTimeText@106(VAR TimeText@1000 : Text[250]) : Integer;
    VAR
      Position@1004 : Integer;
      Length@1003 : Integer;
    BEGIN
      Position := 1;
      Length := STRLEN(TimeText);
      ReadCharacter(' ',TimeText,Position,Length);
      IF NOT FindText(PartOfText,TimeText,Position,Length) THEN
        EXIT(0);
      IF PartOfText <> COPYSTR(Text007,1,STRLEN(PartOfText)) THEN
        EXIT(0);
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',TimeText,Position,Length);
      IF Position <= Length THEN
        EXIT(Position);
      TimeText := FORMAT(000000T + ROUND(TIME - 000000T,1000));
      EXIT(0);
    END;

    PROCEDURE MakeText@107(VAR Text@1000 : Text[250]) : Integer;
    VAR
      Position@1004 : Integer;
      Length@1003 : Integer;
    BEGIN
      Position := 1;
      Length := STRLEN(Text);
      ReadCharacter(' ',Text,Position,Length);
      IF NOT ReadSymbol('?',Text,Position,Length) THEN
        EXIT(0);
      PartOfText := COPYSTR(Text,Position);
      IF PartOfText = '' THEN BEGIN
        IF FORM.RUNMODAL(0,StdTxt) = ACTION::LookupOK THEN
          Text := StdTxt.Description;
        EXIT(0);
      END;
      StdTxt.Code := COPYSTR(Text,Position,MAXSTRLEN(StdTxt.Code));
      IF NOT StdTxt.FIND('=>') OR
         (UPPERCASE(PartOfText) <> COPYSTR(StdTxt.Code,1,STRLEN(PartOfText)))
      THEN
        EXIT(Position);
      Text := StdTxt.Description;
      EXIT(0);
    END;

    PROCEDURE MakeDateTimeFilter@214(VAR DateTimeFilterText@1000 : Text[250]) : Integer;
    VAR
      Head@1006 : Text[250];
      Tail@1008 : Text[250];
      Position@1012 : Integer;
      Length@1011 : Integer;
    BEGIN
      Position := 1;
      Length := STRLEN(DateTimeFilterText);
      WHILE Length <> 0 DO BEGIN
        ReadCharacter(' |()',DateTimeFilterText,Position,Length);
        IF Position > 1 THEN BEGIN
          Head := Head + COPYSTR(DateTimeFilterText,1,Position - 1);
          DateTimeFilterText := COPYSTR(DateTimeFilterText,Position);
          Position := 1;
          Length := STRLEN(DateTimeFilterText);
        END;
        IF Length <> 0 THEN BEGIN
          ReadUntilCharacter('|()',DateTimeFilterText,Position,Length);
          IF Position > 1 THEN BEGIN
            Tail := COPYSTR(DateTimeFilterText,Position);
            DateTimeFilterText := COPYSTR(DateTimeFilterText,1,Position - 1);
            MakeDateTimeFilter2(DateTimeFilterText);
            Head := Head + DateTimeFilterText;
            DateTimeFilterText := Tail;
            Position := 1;
            Length := STRLEN(DateTimeFilterText);
          END;
        END;
      END;
      DateTimeFilterText := Head;
    END;

    LOCAL PROCEDURE MakeDateTimeFilter2@10014(VAR DateTimeFilterText@1000 : Text[250]);
    VAR
      DateTime1@1002 : DateTime;
      DateTime2@1005 : DateTime;
      Date1@1007 : Date;
      Date2@1003 : Date;
      Time1@1004 : Time;
      Time2@1001 : Time;
      StringPosition@1011 : Integer;
    BEGIN
      StringPosition := STRPOS(DateTimeFilterText,'..');
      IF StringPosition = 0 THEN BEGIN
        IF NOT GetSeparateDateTime(DateTimeFilterText,Date1,Time1) THEN
          EXIT;
        IF Date1 = 0D THEN
          EXIT;
        IF Time1 = 0T THEN BEGIN
          IF GLSetup.RECORDLEVELLOCKING THEN
            DateTimeFilterText := FORMAT(CREATEDATETIME(Date1,000000T)) + '..' + FORMAT(CREATEDATETIME(Date1,235959.995T),0,1)
          ELSE
            DateTimeFilterText := FORMAT(CREATEDATETIME(Date1,000000T)) + '..' + FORMAT(CREATEDATETIME(Date1,235959.999T),0,1);
          EXIT;
        END;
        DateTimeFilterText := FORMAT(CREATEDATETIME(Date1,Time1),0,1);
        EXIT;
      END;

      IF NOT GetSeparateDateTime(COPYSTR(DateTimeFilterText,1,StringPosition - 1),Date1,Time1) THEN
        EXIT;
      IF NOT GetSeparateDateTime(COPYSTR(DateTimeFilterText,StringPosition + 2),Date2,Time2) THEN
        EXIT;

      IF (Date1 = 0D) AND (Date2 = 0D) THEN
        EXIT;

      IF (Date1 <> 0D) THEN BEGIN
        IF Time1 = 0T THEN
          Time1 := 000000T;
        DateTime1 := CREATEDATETIME(Date1,Time1);
      END;
      IF (Date2 <> 0D) THEN BEGIN
        IF Time2 = 0T THEN
          Time2 := 235959T;
        DateTime2 := CREATEDATETIME(Date2,Time2);
      END;
      DateTimeFilterText := FORMAT(DateTime1,0,1) + '..' + FORMAT(DateTime2,0,1);
    END;

    PROCEDURE MakeDateFilter@205(VAR DateFilterText@1000 : Text[250]) : Integer;
    VAR
      StringPosition@1001 : Integer;
    BEGIN
      StringPosition := STRPOS(DateFilterText,'..');
      IF StringPosition = 0 THEN BEGIN
        i := MakeDateFilter2(OK,Date1,Date2,DateFilterText);
        IF i <> 0 THEN
          EXIT(i);
        IF OK THEN
          IF Date1 = Date2 THEN
            DateFilterText := FORMAT(Date1)
          ELSE
            DateFilterText := STRSUBSTNO('%1..%2',Date1,Date2);
        EXIT(0);
      END;

      Text1 := COPYSTR(DateFilterText,1,StringPosition - 1);
      i := MakeDateFilter2(OK,Date1,Date2,Text1);
      IF i <> 0 THEN
        EXIT(i);
      IF OK THEN
        Text1 := FORMAT(Date1);

      ReadCharacter('.',DateFilterText,StringPosition,STRLEN(DateFilterText));

      Text2 := COPYSTR(DateFilterText,StringPosition);
      i := MakeDateFilter2(OK,Date1,Date2,Text2);
      IF i <> 0 THEN
        EXIT(StringPosition + i - 1);
      IF OK THEN
        Text2 := FORMAT(Date2);

      DateFilterText := Text1 + '..' + Text2;
      EXIT(0);
    END;

    LOCAL PROCEDURE MakeDateFilter2@10003(VAR OK@1000 : Boolean;VAR Date1@1001 : Date;VAR Date2@1002 : Date;VAR DateFilterText@1003 : Text[250]) : Integer;
    VAR
      Position@1007 : Integer;
      Length@1006 : Integer;
    BEGIN
      Position := 1;
      Length := STRLEN(DateFilterText);
      ReadCharacter(' ',DateFilterText,Position,Length);
      IF FindText(PartOfText,DateFilterText,Position,Length) THEN
        CASE PartOfText OF
          COPYSTR(Text008,1,STRLEN(PartOfText)):
            BEGIN
              OK := TRUE;
              Position := Position + STRLEN(PartOfText);
              EXIT(FindPeriod(Date1,Date2,FALSE,DateFilterText,Position,Length));
            END;
          COPYSTR(Text009,1,STRLEN(PartOfText)):
            BEGIN
              OK := TRUE;
              Position := Position + STRLEN(PartOfText);
              EXIT(FindPeriod(Date1,Date2,TRUE,DateFilterText,Position,Length));
            END;
          COPYSTR(Text005,1,STRLEN(PartOfText)):
            BEGIN
              OK := TRUE;
              Position := Position + STRLEN(PartOfText);
              ReadCharacter(' ',DateFilterText,Position,Length);
              IF Position <= Length THEN
                EXIT(Position);
              Date1 := TODAY;
              Date2 := Date1;
              EXIT(0);
            END;
          COPYSTR(Text006,1,STRLEN(PartOfText)):
            BEGIN
              OK := TRUE;
              Position := Position + STRLEN(PartOfText);
              ReadCharacter(' ',DateFilterText,Position,Length);
              IF Position <= Length THEN
                EXIT(Position);
              Date1 := WORKDATE;
              Date2 := Date1;
              EXIT(0);
            END;
        END;
      OK := FALSE;
      EXIT(0);
    END;

    LOCAL PROCEDURE FindPeriod@10004(VAR Date1@1000 : Date;VAR Date2@1001 : Date;FindYear@1002 : Boolean;VAR DateFilterText@1003 : Text[250];VAR Position@1004 : Integer;Length@1005 : Integer) : Integer;
    BEGIN
      ReadCharacter(' ',DateFilterText,Position,Length);
      IF FindYear THEN
        AccountingPeriod.SETRANGE("New Fiscal Year",TRUE)
      ELSE
        AccountingPeriod.SETRANGE("New Fiscal Year");
      Sign := '';
      IF ReadSymbol('+',DateFilterText,Position,Length) THEN
        Sign := '+'
      ELSE
        IF ReadSymbol('-',DateFilterText,Position,Length) THEN
          Sign := '-';
      IF Sign = '' THEN
        IF ReadNumeral(Numeral,DateFilterText,Position,Length) THEN BEGIN
          IF FindYear THEN
            AccountingPeriod.FINDFIRST
          ELSE BEGIN
            AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
            AccountingPeriod."Starting Date" := WORKDATE;
            AccountingPeriod.FIND('=<');
            AccountingPeriod.SETRANGE("New Fiscal Year");
          END;
          AccountingPeriod.NEXT(Numeral - 1);
        END ELSE BEGIN
          AccountingPeriod."Starting Date" := WORKDATE;
          AccountingPeriod.FIND('=<');
        END
      ELSE BEGIN
        IF NOT ReadNumeral(Numeral,DateFilterText,Position,Length) THEN
          EXIT(Position);
        IF Sign = '-' THEN
          Numeral := -Numeral;
        AccountingPeriod."Starting Date" := WORKDATE;
        AccountingPeriod.FIND('=<');
        AccountingPeriod.NEXT(Numeral);
      END;
      Date1 := AccountingPeriod."Starting Date";
      IF AccountingPeriod.NEXT = 0 THEN
        Date2 := 31129999D
      ELSE
        Date2 := AccountingPeriod."Starting Date" - 1;
      ReadCharacter(' ',DateFilterText,Position,Length);
      IF Position <= Length THEN
        EXIT(Position);
      EXIT(0);
    END;

    LOCAL PROCEDURE FindText@10005(VAR PartOfText@1000 : Text[250];VAR Text@1001 : Text[250];Position@1002 : Integer;Length@1003 : Integer) : Boolean;
    VAR
      Position2@1005 : Integer;
    BEGIN
      Position2 := Position;
      ReadCharacter(Text010,Text,Position,Length);
      IF Position = Position2 THEN
        EXIT(FALSE);
      PartOfText := UPPERCASE(COPYSTR(Text,Position2,Position - Position2));
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadSymbol@10006(Token@1000 : Text[30];VAR Text@1001 : Text[250];VAR Position@1002 : Integer;Length@1003 : Integer) : Boolean;
    BEGIN
      IF Token <> COPYSTR(Text,Position,STRLEN(Token)) THEN
        EXIT(FALSE);
      Position := Position + STRLEN(Token);
      ReadCharacter(' ',Text,Position,Length);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadNumeral@10007(VAR Numeral@1000 : Integer;VAR Text@1001 : Text[250];VAR Position@1002 : Integer;Length@1003 : Integer) : Boolean;
    VAR
      Position2@1005 : Integer;
    BEGIN
      Position2 := Position;
      ReadCharacter('0123456789',Text,Position,Length);
      IF Position2 = Position THEN
        EXIT(FALSE);
      Numeral := 0;
      FOR i := Position2 TO Position - 1 DO
        IF Numeral < 1000 THEN
          Numeral := Numeral * 10 + STRPOS('0123456789',COPYSTR(Text,i,1)) - 1;
      IF (Numeral < 1) OR (Numeral > 999) THEN
        ERROR(Text011);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadCharacter@10008(Character@1000 : Text[50];VAR Text@1001 : Text[250];VAR Position@1002 : Integer;Length@1003 : Integer);
    BEGIN
      WHILE (Position <= Length) AND (STRPOS(Character,UPPERCASE(COPYSTR(Text,Position,1))) <> 0) DO
        Position := Position + 1;
    END;

    LOCAL PROCEDURE ReadUntilCharacter@10010(Character@1000 : Text[50];VAR Text@1001 : Text[250];VAR Position@1002 : Integer;Length@1003 : Integer);
    BEGIN
      WHILE (Position <= Length) AND (STRPOS(Character,UPPERCASE(COPYSTR(Text,Position,1))) = 0) DO
        Position := Position + 1;
    END;

    PROCEDURE AutoFormatTranslate@12(AutoFormatType@1000 : Integer;AutoFormatExpr@1001 : Text[80]) : Text[80];
    BEGIN
      IF AutoFormatType = 0 THEN
        EXIT('');

      IF NOT GetGLSetup THEN
        EXIT('');

      CASE AutoFormatType OF
        1: // Amount
          IF AutoFormatExpr = '' THEN
            EXIT(STRSUBSTNO(Text012,GLSetup."Amount Decimal Places"))
          ELSE BEGIN
            IF GetCurrency(COPYSTR(AutoFormatExpr,1,10)) AND
               (Currency."Amount Decimal Places" <> '')
            THEN
              EXIT(STRSUBSTNO(Text012,Currency."Amount Decimal Places"))
            ELSE
              EXIT(STRSUBSTNO(Text012,GLSetup."Amount Decimal Places"));
          END;

        2: // Unit Amount
          IF AutoFormatExpr = '' THEN
            EXIT(STRSUBSTNO(Text012,GLSetup."Unit-Amount Decimal Places"))
          ELSE BEGIN
            IF GetCurrency(COPYSTR(AutoFormatExpr,1,10)) AND
               (Currency."Unit-Amount Decimal Places" <> '')
            THEN
              EXIT(STRSUBSTNO(Text012,Currency."Unit-Amount Decimal Places"))
            ELSE
              EXIT(STRSUBSTNO(Text012,GLSetup."Unit-Amount Decimal Places"));
          END;
        10: EXIT('<Custom,' + AutoFormatExpr + '>');
      END;
    END;

    PROCEDURE ReadRounding@14() Rounding@1000 : Decimal;
    BEGIN
      GetGLSetup;
      EXIT(GLSetup."Amount Rounding Precision");
    END;

    PROCEDURE CaptionClassTranslate@15(Language@1000 : Integer;CaptionExpr@1001 : Text[1024]) : Text[1024];
    VAR
      CaptionArea@1002 : Text[80];
      CaptionRef@1003 : Text[1024];
      CommaPosition@1004 : Integer;
    BEGIN
      CommaPosition := STRPOS(CaptionExpr,',');
      IF (CommaPosition > 0) AND (CommaPosition < 80) THEN BEGIN
        CaptionArea := COPYSTR(CaptionExpr,1,CommaPosition - 1);
        CaptionRef := COPYSTR(CaptionExpr,CommaPosition + 1);
        CASE CaptionArea OF
          '1' : EXIT(DimCaptionClassTranslate(Language,COPYSTR(CaptionRef,1,80)));
          '2' : EXIT(VATCaptionClassTranslate(Language,COPYSTR(CaptionRef,1,80)));
          '3' : EXIT(CaptionRef);

          //. TRANSFER
          '50': EXIT(SuplementCaptionClassTranslate(Language,CaptionRef));
        END;
      END;
      EXIT(CaptionExpr);
    END;

    LOCAL PROCEDURE DimCaptionClassTranslate@10009(Language@1000 : Integer;CaptionExpr@1001 : Text[80]) : Text[80];
    VAR
      DimCaptionType@1003 : Text[80];
      DimCaptionRef@1004 : Text[80];
      DimOptionalParam1@1005 : Text[80];
      DimOptionalParam2@1006 : Text[80];
      CommaPosition@1007 : Integer;
    BEGIN
      IF NOT GetGLSetup THEN
        EXIT('');

      CommaPosition := STRPOS(CaptionExpr,',');
      IF (CommaPosition > 0) THEN BEGIN
        DimCaptionType := COPYSTR(CaptionExpr,1,CommaPosition - 1);
        DimCaptionRef := COPYSTR(CaptionExpr,CommaPosition + 1);
        CommaPosition := STRPOS(DimCaptionRef,',');
        IF (CommaPosition > 0) THEN BEGIN
          DimOptionalParam1 := COPYSTR(DimCaptionRef,CommaPosition + 1);
          DimCaptionRef := COPYSTR(DimCaptionRef,1,CommaPosition - 1);
          CommaPosition := STRPOS(DimOptionalParam1,',');
          IF (CommaPosition > 0) THEN BEGIN
            DimOptionalParam2 := COPYSTR(DimOptionalParam1,CommaPosition + 1);
            DimOptionalParam1 := COPYSTR(DimOptionalParam1,1,CommaPosition - 1);
          END ELSE BEGIN
            DimOptionalParam2 := '';
          END;
        END ELSE BEGIN
          DimOptionalParam1 := '';
          DimOptionalParam2 := '';
        END;
        CASE DimCaptionType OF
          '1':  // Code Caption - Global Dimension using No. as Reference
            BEGIN
              CASE DimCaptionRef OF
                '1':
                  BEGIN
                    IF Dim.GET(GLSetup."Global Dimension 1 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Global Dimension 1 Code") +
                        DimOptionalParam2);
                  END;
                '2':
                  BEGIN
                    IF Dim.GET(GLSetup."Global Dimension 2 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Global Dimension 2 Code") +
                        DimOptionalParam2);
                  END;
              END;
            END;
          '2':  // Code Caption - Shortcut Dimension using No. as Reference
            BEGIN
              CASE DimCaptionRef OF
                '1':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 1 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 1 Code") +
                        DimOptionalParam2);
                  END;
                '2':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 2 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 2 Code") +
                        DimOptionalParam2);
                  END;
                '3':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 3 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 3 Code") +
                        DimOptionalParam2);
                  END;
                '4':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 4 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 4 Code") +
                        DimOptionalParam2);
                  END;
                '5':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 5 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 5 Code") +
                        DimOptionalParam2);
                  END;
                '6':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 6 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 6 Code") +
                        DimOptionalParam2);
                  END;
                '7':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 7 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 7 Code") +
                        DimOptionalParam2);
                  END;
                '8':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 8 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 8 Code") +
                        DimOptionalParam2);
                  END;
              END;
            END;
          '3':  // Filter Caption - Global Dimension using No. as Reference
            BEGIN
              CASE DimCaptionRef OF
                '1':
                  BEGIN
                    IF Dim.GET(GLSetup."Global Dimension 1 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Global Dimension 1 Filter") +
                        DimOptionalParam2);
                  END;
                '2':
                  BEGIN
                    IF Dim.GET(GLSetup."Global Dimension 2 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Global Dimension 2 Filter") +
                        DimOptionalParam2);
                  END;
              END;
            END;
          '4':  // Filter Caption - Shortcut Dimension using No. as Reference
            BEGIN
              CASE DimCaptionRef OF
                '1':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 1 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 1 Code") +
                        DimOptionalParam2);
                  END;
                '2':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 2 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 2 Code") +
                        DimOptionalParam2);
                  END;
                '3':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 3 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 3 Code") +
                        DimOptionalParam2);
                  END;
                '4':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 4 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 4 Code") +
                        DimOptionalParam2);
                  END;
                '5':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 5 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 5 Code") +
                        DimOptionalParam2);
                  END;
                '6':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 6 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 6 Code") +
                        DimOptionalParam2);
                  END;
                '7':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 7 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 7 Code") +
                        DimOptionalParam2);
                  END;
                '8':
                  BEGIN
                    IF Dim.GET(GLSetup."Shortcut Dimension 8 Code") THEN
                      EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
                    ELSE
                      EXIT(
                        DimOptionalParam1 +
                        GLSetup.FIELDCAPTION("Shortcut Dimension 8 Code") +
                        DimOptionalParam2);
                  END;
              END;
            END;
          '5':  // Code Caption - using Dimension Code as Reference
            BEGIN
              IF Dim.GET(DimCaptionRef) THEN
                EXIT(DimOptionalParam1 + Dim.GetMLCodeCaption(Language) + DimOptionalParam2)
              ELSE
                EXIT(DimOptionalParam1);
            END;
          '6':  // Filter Caption - using Dimension Code as Reference
            BEGIN
              IF Dim.GET(DimCaptionRef) THEN
                EXIT(DimOptionalParam1 + Dim.GetMLFilterCaption(Language) + DimOptionalParam2)
              ELSE
                EXIT(DimOptionalParam1);
            END;
        END;
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE VATCaptionClassTranslate@100010(Language@1000 : Integer;CaptionExpr@1001 : Text[80]) : Text[80];
    VAR
      VATCaptionType@1002 : Text[80];
      VATCaptionRef@1003 : Text[80];
      CommaPosition@1004 : Integer;
    BEGIN
      CommaPosition := STRPOS(CaptionExpr,',');
      IF (CommaPosition > 0) THEN BEGIN
        VATCaptionType := COPYSTR(CaptionExpr,1,CommaPosition - 1);
        VATCaptionRef := COPYSTR(CaptionExpr,CommaPosition + 1);
        CASE VATCaptionType OF
          '0':
            EXIT(COPYSTR(STRSUBSTNO('%1 %2',VATCaptionRef,Text016),1,80));
          '1':
            EXIT(COPYSTR(STRSUBSTNO('%1 %2',VATCaptionRef,Text017),1,80));
        END;
      END;
      EXIT('');
    END;

    PROCEDURE SetGlobalLanguage@5();
    VAR
      TempLanguage@1001 : TEMPORARY Record 2000000045;
    BEGIN
      GetApplicationLanguages(TempLanguage);

      WITH TempLanguage DO BEGIN
        SETCURRENTKEY(Name);
        IF GET(GLOBALLANGUAGE) THEN;
        FORM.RUN(FORM::"Application Languages",TempLanguage);
      END;
    END;

    LOCAL PROCEDURE GetApplicationLanguages@1033(VAR TempLanguage@1034 : TEMPORARY Record 2000000045);
    VAR
      Language@1035 : Record 2000000045;
    BEGIN
      WITH Language DO BEGIN
        SETRANGE("STX File Exist",TRUE);
        SETRANGE("Globally Enabled",TRUE);
        IF FINDSET THEN
          REPEAT
            TempLanguage := Language;
            TempLanguage.INSERT;
          UNTIL NEXT = 0;
        IF GET(ApplicationLanguage) THEN BEGIN
          TempLanguage := Language;
          IF TempLanguage.INSERT THEN;
        END;
      END;
    END;

    PROCEDURE ValidateApplicationlLanguage@1102601001(LanguageID@1037 : Integer);
    VAR
      TempLanguage@1038 : TEMPORARY Record 2000000045;
    BEGIN
      GetApplicationLanguages(TempLanguage);

      WITH TempLanguage DO BEGIN
        SETRANGE("Language ID",LanguageID);
        FINDFIRST;
      END;
    END;

    PROCEDURE LookupApplicationlLanguage@1102601005(VAR LanguageID@1040 : Integer);
    VAR
      TempLanguage@1039 : TEMPORARY Record 2000000045;
    BEGIN
      GetApplicationLanguages(TempLanguage);

      WITH TempLanguage DO BEGIN
        IF GET(LanguageID) THEN;
        IF FORM.RUNMODAL(FORM::"Windows Languages",TempLanguage) = ACTION::LookupOK THEN
          LanguageID := TempLanguage."Language ID";
      END;
    END;

    PROCEDURE NASHandler@99(NASID@1000 : Text[260]);
    VAR
      BizTalkNASStartup@1009 : Codeunit 99008528;
      ADCSNASStartup@1011 : Codeunit 7700;
      MobDocDispatcher@1002 : Codeunit 8700;
      JobQueueSetup@1001 : Record 470;
      Parameter@1008 : Text[260];
      ParamStr@1007 : Text[260];
      SepPosition@1006 : Integer;
      PortNumber@1010 : Integer;
      CGNASStartedinLoop@1012 : Boolean;
      ADCSID@1013 : Text[260];
      EmployeePortalTrustNAS@1015 : Codeunit 6870;
      EPNASSetup@1016 : Record 6870;
    BEGIN
      ParamStr := UPPERCASE(NASID);
      REPEAT
        SepPosition := STRPOS(ParamStr,',');
        IF SepPosition > 0 THEN
          Parameter := COPYSTR(ParamStr,1,SepPosition - 1)
        ELSE
          Parameter := COPYSTR(ParamStr,1);
          IF (COPYSTR(Parameter,1,2) = 'CG') THEN BEGIN
            IF STRPOS(Parameter,' PORT=') > 0 THEN
              IF EVALUATE(PortNumber,COPYSTR(Parameter,STRPOS(Parameter,'=') + 1)) THEN BEGIN
                IF (PortNumber >= 1) AND (PortNumber <= 65535) THEN
                BEGIN
                   BizTalkNASStartup.RUN;
                   IF BizTalkNASStartup.StartTcpListen(PortNumber) THEN
                     CGNASStartedinLoop := TRUE
                   ELSE
                     CGNASStartedinLoop := FALSE
                 END ELSE
                   CGNASStartedinLoop := FALSE;
                END;
                IF (STRLEN(Parameter) = 2) THEN BEGIN
                  BizTalkNASStartup.RUN;
                  IF BizTalkNASStartup.StartTcpListen(0) THEN
                    CGNASStartedinLoop := TRUE
                  ELSE
                    CGNASStartedinLoop := FALSE;
                END;
          END;
        IF (COPYSTR(Parameter,1,4) = 'ADCS') THEN BEGIN
          IF STRPOS(Parameter,' ADCSID=') > 0 THEN
            IF EVALUATE(ADCSID,COPYSTR(Parameter,STRPOS(Parameter,'=') + 1)) THEN
              ADCSNASStartup.SetNASID(ADCSID)
            ELSE
              ADCSNASStartup.SetNASID('NAS1');
          ADCSNASStartup.RUN;
          CGNASStartedinLoop := TRUE;
        END;
        IF (COPYSTR(Parameter,1,4) = 'NEP-') THEN BEGIN
          EPNASSetup.GET(Parameter);
          IF EPNASSetup."Front End Processing" THEN BEGIN
            EmployeePortalApplSrv.SetNASID(Parameter);
            EmployeePortalApplSrv.RUN;
            CGNASStartedinLoop := TRUE;
          END;
          IF EPNASSetup."Handle Key Exchange" THEN BEGIN
            EmployeePortalTrustNAS.SetNASID(Parameter);
            EmployeePortalTrustNAS.RUN;
            CGNASStartedinLoop := TRUE;
          END;
        END;
        IF COPYSTR(Parameter,1,3) = 'MOB' THEN BEGIN
          MobDocDispatcher.Start(Parameter);
          CGNASStartedinLoop := TRUE;
        END;
        IF CGNASStartedinLoop = FALSE THEN
          CASE Parameter OF
            'OSYNCH','JOBQUEUE':
              BEGIN
                IF NOT JobQueueSetup.GET THEN BEGIN
                  JobQueueSetup.INIT;
                  JobQueueSetup.INSERT;
                END;
                IF NOT JobQueueSetup."Job Queue Active" THEN BEGIN
                  JobQueueSetup.VALIDATE("Job Queue Active",TRUE);
                  JobQueueSetup.MODIFY;
                END;
                CODEUNIT.RUN(CODEUNIT::"Job Queue Dispacher");
              END;
          END;
        ParamStr := COPYSTR(ParamStr,SepPosition + 1);
        CGNASStartedinLoop := FALSE;
      UNTIL SepPosition = 0;
    END;

    PROCEDURE GetGlobalTableTriggerMask@20(TableID@1000 : Integer) : Integer;
    VAR
      ChangeLogMgt@1001 : Codeunit 423;
    BEGIN
      EXIT(ChangeLogMgt.GetTableTriggerMask(TableID));
    END;

    PROCEDURE OnGlobalInsert@21(RecRef@1000 : RecordRef);
    VAR
      ChangLogMgt@1001 : Codeunit 423;
    BEGIN
      ChangLogMgt.LogInsertion(RecRef);
    END;

    PROCEDURE OnGlobalModify@22(RecRef@1000 : RecordRef;xRecRef@1002 : RecordRef);
    VAR
      ChangLogMgt@1001 : Codeunit 423;
    BEGIN
      ChangLogMgt.LogModification(RecRef,xRecRef);
    END;

    PROCEDURE OnGlobalDelete@23(RecRef@1000 : RecordRef);
    VAR
      ChangLogMgt@1001 : Codeunit 423;
    BEGIN
      ChangLogMgt.LogDeletion(RecRef);
    END;

    PROCEDURE OnGlobalRename@24(RecRef@1000 : RecordRef;xRecRef@1002 : RecordRef);
    VAR
      ChangLogMgt@1001 : Codeunit 423;
    BEGIN
      ChangLogMgt.LogRename(RecRef,xRecRef);
    END;

    PROCEDURE GetDatabaseTableTriggerSetup@25(TableId@1000 : Integer;VAR Insert@1001 : Boolean;VAR Modify@1002 : Boolean;VAR Delete@1003 : Boolean;VAR Rename@1004 : Boolean);
    VAR
      IntegrationManagement@1005 : Codeunit 5150;
    BEGIN
      IntegrationManagement.GetDatabaseTableTriggerSetup(TableId,Insert,Modify,Delete,Rename);
    END;

    PROCEDURE OnDatabaseInsert@26(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
    BEGIN
      IntegrationManagement.OnDatabaseInsert(RecRef);
    END;

    PROCEDURE OnDatabaseModify@27(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
    BEGIN
      IntegrationManagement.OnDatabaseModify(RecRef);
    END;

    PROCEDURE OnDatabaseDelete@28(RecRef@1000 : RecordRef);
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
    BEGIN
      IntegrationManagement.OnDatabaseDelete(RecRef);
    END;

    PROCEDURE OnDatabaseRename@29(RecRef@1000 : RecordRef;xRecRef@1001 : RecordRef);
    VAR
      IntegrationManagement@1002 : Codeunit 5150;
    BEGIN
      IntegrationManagement.OnDatabaseRename(RecRef,xRecRef);
    END;

    PROCEDURE LaunchApp@116(DataXML@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";StylesheetID@1001 : GUID;ApplicationXML@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60") : Boolean;
    VAR
      AppLaunchMgt@1010 : Codeunit 403;
    BEGIN
      EXIT(AppLaunchMgt.LaunchApp(DataXML,StylesheetID,ApplicationXML));
    END;

    PROCEDURE SelectStyleSheet@117(ObjectType@1000 : Integer;ObjectID@1001 : Integer;VAR StyleSheetID@1002 : GUID) : Boolean;
    VAR
      AppLaunchMgt@1003 : Codeunit 403;
    BEGIN
      EXIT(AppLaunchMgt.SelectStyleSheet(ObjectType,ObjectID,StyleSheetID));
    END;

    PROCEDURE ManageStyleSheets@118(ObjectType@1000 : Integer;ObjectID@1001 : Integer);
    VAR
      StyleSheets@1002 : Form 690;
    BEGIN
      StyleSheets.SetObject(ObjectType,ObjectID);
      StyleSheets.RUN;
    END;

    LOCAL PROCEDURE GetGLSetup@10015() : Boolean;
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetupRead := GLSetup.GET;
      EXIT(GLSetupRead);
    END;

    LOCAL PROCEDURE GetCurrency@1(CurrencyCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF CurrencyCode = Currency.Code THEN
        EXIT(TRUE);
      IF CurrencyCode = '' THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision;
        EXIT(TRUE);
      END;
      EXIT(Currency.GET(CurrencyCode));
    END;

    PROCEDURE AccessToCartera@1100000() : Boolean;
    VAR
      CarteraSetup@1100000 : Record 7000016;
      LicensePermission@1100001 : Record 2000000043;
    BEGIN
      // es0009.begin
      IF LicensePermission.GET(LicensePermission."Object Type"::Table, DATABASE::"Cartera Setup") THEN
        IF LicensePermission."Execute Permission" <> LicensePermission."Execute Permission"::" " THEN
          EXIT(CarteraSetup.READPERMISSION);
      // es0009.end
    END;

    LOCAL PROCEDURE SuplementCaptionClassTranslate@1100253000(Language@1000 : Integer;CaptionExpr@1001 : Text[80]) : Text[80];
    VAR
      lwText@1100253000 : Text[80];
      lwCod@1100253001 : Code[10];
      lrPar@1000000000 : Record 7010311;
      lrSupl@1000000001 : Record 7010318;
    BEGIN
      // SuplementCaptionClassTranslate

      CLEAR(lrPar);
      IF NOT lrPar.FINDFIRST THEN
        EXIT;

      CASE CaptionExpr OF
        '1': lwCod:= lrPar."Cod. Suplemento Rapido 1";
        '2': lwCod:= lrPar."Cod. Suplemento Rapido 2";
      END;

      IF lwCod <> '' THEN BEGIN
        CLEAR(lrSupl);
        IF lrSupl.GET(lwCod) THEN
          lwText := lrSupl.Descripcion;
      END;

      EXIT(lwText);
    END;

    BEGIN
    {
      <changelog>
        <add id="es0001" dev="VGARCA" date="2004-08-27" area="DATEEXPR" request="es-start-40"
        releaseversion="ES4.00">Localization of Date Expressions</add>
        <add id="es0002" dev="VGARCA" date="2004-08-27" area="VERSION" request="es-start-40"
        releaseversion="ES4.00">Localization of Version Number</add>
        <add id="es0003" dev="VGARCA" date="2004-08-27" area="CARTERA" request="es-start-40"
        releaseversion="ES4.00">Cartera Add-On (Spanish)</add>
        <change id="es0004" dev="VGARCA" date="2004-06-20" area="VERSION" request="ES-START-40A"
        releaseversion="ES4.00.A" baseversion="ES4.00">Localization of Version Number</change>
        <add id="es0005" dev="VGARCA" date="2005-10-21" area="MISCELL" feature="PS-SE-12120"
        releaseversion="ES4.00.02">Development Standards</add>
        <add id="es0006" dev="jhoek" date="2006-09-04" area="UID" feature="NAVCORS3374"
        releaseversion="ES5.00">Added GetUIDOffset function</add>
        <change id="es0007" dev="VGARCA" date="2006-11-01" area="VERSION" feature="ES-START-5.00"
        releaseversion="ES5.00" baseversion="ES5.00">Localization of Version Number</change>
        <add id="CA0001" dev="SRYSER" feature="PSCORS417" date="2006-01-30" area="COSTACCTNG"
          releaseversion="CACEM5.00">
          COD1</add>
        <add id="CF0001" dev="TMARTI" feature="PSCORS339" date="2006-04-25" area="LIQUIDITY"
          releaseversion="LIQEM5.00">
          Liquidity</add>
        <remove id="es0008" dev="TMARTI" date="2008-07-24" area="MISCELL"
          baseversion="ES4.00.02" releaseversion="ES6.00"  feature="NAVCORS26647">
          MISCELL - 129 out of 190+ objects should not be part of this area
        </remove>
        <change id="es0009" dev="all-e" date="2009-03-03" area="CARTERA" feature="NAVCORS35301"
        releaseversion="ES6.00.01" baseversion="ES4.00">
        Not possible to post invoice with customer license that contain granule 7300</change>
      </changelog>

      [Procedure]CaptionClassTranslate (<LANGUAGE>;<CAPTIONEXPR>)
        LANGUAGE
          <DataType>   := [Integer]
          <DataValue>  := // Automatically mentioned by the system
        CAPTIONEXPR
          <DataType>   := [String]
          <Length>     <= 80
          <DataValue>  := <CAPTIONAREA>,<CAPTIONREF>
        CAPTIONAREA
          <DataType>   := [SubString]
          <Length>     <= 10
          <DataValue>  := 1..9999999999
                          // 1 for Dimension Area
                          // 2 for VAT
        CAPTIONREF
          <DataType>   := [SubString]
          <Length>     <= 10
          <DataValue>  := IF (<CAPTIONAREA> = 1) <DIMCAPTIONTYPE>,<DIMCAPTIONREF>
          <DataValue>  := IF (<CAPTIONAREA> = 2) <VATCAPTIONTYPE>
        DIMCAPTIONTYPE
          <DataType>   := [SubString]
          <Length>     <= 10
          <DataValue>  := 1..6
                          // 1 to retrieve Code Caption of Global Dimension
                          // 2 to retrieve Code Caption of Shortcut Dimension
                          // 3 to retrieve Filter Caption of Global Dimension
                          // 4 to retrieve Filter Caption of Shortcut Dimension
                          // 5 to retrieve Code Caption of any kind of Dimensions
                          // 6 to retrieve Filter Caption of any kind of Dimensions
        DIMCAPTIONREF
          <DataType>   := [SubString]
          <Length>     <= 10
          <DataValue>  := IF (<DIMCAPTIONTYPE> = 1) 1..2,<DIMOPTIONALPARAM1>,<DIMOPTIONALPARAM2>
                          IF (<DIMCAPTIONTYPE> = 2) 1..8,<DIMOPTIONALPARAM1>,<DIMOPTIONALPARAM2>
                          IF (<DIMCAPTIONTYPE> = 3) 1..2,<DIMOPTIONALPARAM1>,<DIMOPTIONALPARAM2>
                          IF (<DIMCAPTIONTYPE> = 4) 1..8,<DIMOPTIONALPARAM1>,<DIMOPTIONALPARAM2>
                          IF (<DIMCAPTIONTYPE> = 5) [Table]Dimension.[Field]Code,<DIMOPTIONALPARAM1>,<DIMOPTIONALPARAM2>
                          IF (<DIMCAPTIONTYPE> = 6) [Table]Dimension.[Field]Code,<DIMOPTIONALPARAM1>,<DIMOPTIONALPARAM2>
        DIMOPTIONALPARAM1
          <DataType>   := [SubString]
          <Length>     <= 30
          <DataValue>  := [String]

                                              // a string added before the dimension name
        DIMOPTIONALPARAM2
          <DataType>   := [SubString]
          <Length>     <= 30
          <DataValue>  := [String]
                          // a string added after the dimension name
        VATCAPTIONTYPE
          <DataType>   := [SubString]
          <Length>     =  1
          <DataValue>  := '0' -> <field caption + 'Excl. VAT'>
                          '1' -> <field caption + 'Incl. VAT'>

      $001 AJF 01072011 (GOC-OC-11018) Se a¤ade una ventana para controlar los porcentajes EBB excedidos.

      $002 JPT 12/08/10 Funcion para controlar las reseras hotel no confirmadas para los proximos dias

      $003 AJF 17/09/10 Mostramos las reservas futuras con vuelos en blanco.

      $004 AJS 03022012 Se a¤ade una funcion para controlar el calendario de impuestos

      $005 AJS 27112012 Nueva funcion para controlar los suplementos de excursiones sin autorizar

      $006 AJS 11122012 Mostrar un formulario que indique que delegacion esta abierta

      $007 AJS 06032013 Modifico las funciones FindPrinter y logInEnd para almacenar el uso de cada informe

      $008 AJS 21112014 Integracion Atennea Transfer, hemos modificado la rutina MakeDateText para incluir la posibilidad
                        de que se abra el formulario de calendario de Atennea-Transfer si el usuario introduce una C en
                        el campo de tipo Fecha

      $009 AJS 21112014 Integracion Atennea Transfer, nueva funcion SuplementCaptionClassTranslate para gestionar los suplementos
                        m s habituales en los servicios

      $010 AJS 21112014 Integracion Atennea Transfer, modifico la funcion CaptionClassTranslate para agregar una llamada a
                        la funcion SuplementCaptionClassTranslate
    }
    END.
  }
}
