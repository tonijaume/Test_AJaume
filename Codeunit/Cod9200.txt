OBJECT Codeunit 9200 Matrix Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=The previous column set could not be found.;ESP=No se pudo encontrar el conjunto de columnas anterior.';
      Text002@1001 : TextConst 'ENU=The period could not be found.;ESP=No se pudo encontrar el periodo.';

    PROCEDURE SetPeriodColumnSet@3(DateFilter@1012 : Text[1024];PeriodType@1013 : 'Day,Week,Month,Quarter,Year,Accounting Period';Direction@1010 : 'Backward,Forward';VAR FirstColumn@1009 : Date;VAR LastColumn@1007 : Date;NoOfColumns@1006 : Integer);
    VAR
      Period@1008 : Record 2000000007;
      PeriodFormMgt@1005 : Codeunit 359;
      Steps@1004 : Integer;
      TmpFirstColumn@1001 : Date;
      TmpLastColumn@1000 : Date;
    BEGIN
      Period.SETRANGE("Period Type",PeriodType);
      IF DateFilter = '' THEN BEGIN
        Period."Period Start" := WORKDATE;
        IF PeriodFormMgt.FindDate('<=',Period,PeriodType) THEN
          Steps := 1;
        PeriodFormMgt.NextDate(Steps,Period,PeriodType);
        DateFilter := '>=' + FORMAT(Period."Period Start");
      END ELSE BEGIN
        Period.SETFILTER("Period Start",DateFilter);
        Period.FIND('-');
      END;

      IF (FORMAT(FirstColumn) = '') AND (FORMAT(LastColumn) = '') THEN BEGIN
          FirstColumn := Period."Period Start";
          Period.NEXT(NoOfColumns - 1);
          LastColumn := Period."Period Start";
          EXIT;
      END;

      IF Direction = Direction::Forward THEN BEGIN
        Period.SETFILTER("Period Start",DateFilter);
        IF Period.GET(PeriodType,LastColumn) THEN
          Period.NEXT;
        TmpFirstColumn := Period."Period Start";
        Period.NEXT(NoOfColumns - 1);
        TmpLastColumn := Period."Period Start";
        IF (TmpFirstColumn <> LastColumn) THEN BEGIN
          FirstColumn := TmpFirstColumn;
          LastColumn := TmpLastColumn;
        END;
        EXIT;
      END;

      IF Direction = Direction::Backward THEN BEGIN
        IF Period.GET(PeriodType,FirstColumn) THEN
          Period.NEXT(-1);
        TmpLastColumn := Period."Period Start";
        Period.NEXT(-NoOfColumns + 1);
        TmpFirstColumn := Period."Period Start";
        IF (TmpLastColumn <> FirstColumn) THEN BEGIN
          FirstColumn := TmpFirstColumn;
          LastColumn := TmpLastColumn;
        END;
      END;
    END;

    PROCEDURE SetDimColumnSet@17(DimensionCode@1003 : Code[20];DimFilter@1002 : Text[1024];SetWanted@1008 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';VAR PKFirstRecInCurrSet@1010 : Text[1024];VAR FirstColumn@1007 : Text[1024];VAR LastColumn@1006 : Text[1024];NoOfColumns@1004 : Integer);
    VAR
      DimVal@1005 : Record 349;
      TmpFirstColumn@1001 : Text[1024];
      TmpLastColumn@1000 : Text[1024];
      TmpSteps@1009 : Integer;
    BEGIN
      DimVal.SETRANGE("Dimension Code",DimensionCode);
      IF DimFilter <> '' THEN
        DimVal.SETFILTER(Code,DimFilter);

      CASE SetWanted OF
        SetWanted::Initial:
          BEGIN
            IF DimVal.FIND('-') THEN BEGIN
              PKFirstRecInCurrSet := DimVal.GETPOSITION;
              FirstColumn := DimVal.Code;
              TmpSteps := DimVal.NEXT(NoOfColumns - 1);
              LastColumn := DimVal.Code;
            END;
          END;

        SetWanted::Same:
          BEGIN
            IF PKFirstRecInCurrSet <> '' THEN BEGIN
              DimVal.SETPOSITION(PKFirstRecInCurrSet);
              DimVal.FIND('=');
              FirstColumn := DimVal.Code;
              TmpSteps := DimVal.NEXT(NoOfColumns - 1);
              LastColumn := DimVal.Code;
            END;
          END;

        SetWanted::Next:
          BEGIN
            IF PKFirstRecInCurrSet <> '' THEN BEGIN
              DimVal.SETPOSITION(PKFirstRecInCurrSet);
              DimVal.FIND('=');
              IF DimVal.NEXT(NoOfColumns) <> 0 THEN BEGIN
                PKFirstRecInCurrSet := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(NoOfColumns - 1);
                TmpLastColumn := DimVal.Code;
                IF (TmpFirstColumn <> LastColumn) THEN BEGIN
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                END;
              END ELSE
                SetDimColumnSet(DimensionCode,DimFilter,SetWanted::Same,PKFirstRecInCurrSet,FirstColumn,LastColumn,NoOfColumns);
            END;
          END;

        SetWanted::Previous:
          BEGIN
            IF PKFirstRecInCurrSet <> '' THEN BEGIN
              DimVal.SETPOSITION(PKFirstRecInCurrSet);
              DimVal.FIND('=');
              IF DimVal.NEXT(-1) <> 0 THEN BEGIN
                TmpLastColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(-NoOfColumns + 1);
                PKFirstRecInCurrSet := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                IF (TmpLastColumn <> FirstColumn) THEN BEGIN
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                END;
              END ELSE
                SetDimColumnSet(DimensionCode,DimFilter,SetWanted::Same,PKFirstRecInCurrSet,FirstColumn,LastColumn,NoOfColumns);
            END;
          END;

        SetWanted::NextColumn:
          BEGIN
            IF PKFirstRecInCurrSet <> '' THEN BEGIN
              DimVal.SETPOSITION(PKFirstRecInCurrSet);
              DimVal.FIND('=');
              IF DimVal.NEXT <> 0 THEN BEGIN
                PKFirstRecInCurrSet := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(NoOfColumns - 1);
                TmpLastColumn := DimVal.Code;
                IF (TmpFirstColumn <> LastColumn) THEN BEGIN
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                END;
              END ELSE
                SetDimColumnSet(DimensionCode,DimFilter,SetWanted::Same,PKFirstRecInCurrSet,FirstColumn,LastColumn,NoOfColumns);
            END;
          END;

        SetWanted::PreviousColumn:
          BEGIN
            IF PKFirstRecInCurrSet <> '' THEN BEGIN
              DimVal.SETPOSITION(PKFirstRecInCurrSet);
              DimVal.FIND('=');
              IF DimVal.NEXT(-1) <> 0 THEN BEGIN
                PKFirstRecInCurrSet := DimVal.GETPOSITION;
                TmpFirstColumn := DimVal.Code;
                TmpSteps := DimVal.NEXT(NoOfColumns - 1);
                TmpLastColumn := DimVal.Code;
                IF (TmpLastColumn <> FirstColumn) THEN BEGIN
                  FirstColumn := TmpFirstColumn;
                  LastColumn := TmpLastColumn;
                END;
              END ELSE
                SetDimColumnSet(DimensionCode,DimFilter,SetWanted::Same,PKFirstRecInCurrSet,FirstColumn,LastColumn,NoOfColumns);
            END;
          END;
      END;

      IF ABS(TmpSteps) <> NoOfColumns THEN
        NoOfColumns := ABS(TmpSteps);
    END;

    PROCEDURE DimToCaptions@9(VAR CaptionSet@1000 : ARRAY [32] OF Text[1024];VAR MatrixRecords@1007 : ARRAY [32] OF Record 367;DimensionCode@1001 : Text[30];FirstColumn@1002 : Text[1024];LastColumn@1003 : Text[1024];VAR NumberOfColumns@1006 : Integer;ShowColumnName@1008 : Boolean;VAR CaptionRange@1009 : Text[1024]);
    VAR
      DimensionValue@1004 : Record 349;
      i@1005 : Integer;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETRANGE(Code,FirstColumn,LastColumn);
      i := 0;
      IF DimensionValue.FINDSET THEN
        REPEAT
          i := i + 1;
          MatrixRecords[i].Code := DimensionValue.Code;
          MatrixRecords[i].Name := DimensionValue.Name;
          IF ShowColumnName THEN
            CaptionSet[i] := DimensionValue.Name
          ELSE
            CaptionSet[i] := DimensionValue.Code
        UNTIL (i = ARRAYLEN(CaptionSet)) OR (DimensionValue.NEXT = 0);

      NumberOfColumns := i;

      IF NumberOfColumns = 1 THEN
        CaptionRange := CaptionSet[1]
      ELSE
        CaptionRange := CaptionSet[1] + '..' + CaptionSet[NumberOfColumns];
    END;

    PROCEDURE FillPeriodColumns@5(PeriodType@1004 : 'Day,Week,Month,Quarter,Year,Accounting Period';VAR MatrixColumnCaptions@1001 : ARRAY [32] OF Text[1024];VAR MatrixRecords@1007 : ARRAY [32] OF Record 2000000007;FirstColumn@1002 : Date;LastColumn@1000 : Date;ShowColumnName@1005 : Boolean);
    VAR
      Period@1008 : Record 2000000007;
      PeriodFormMgt@1006 : Codeunit 359;
      i@1003 : Integer;
    BEGIN
      Period.SETRANGE("Period Start",FirstColumn,LastColumn);
      Period.SETRANGE("Period Type",PeriodType);
      i := 1;
      IF Period.FIND('-') THEN BEGIN
        REPEAT
          IF ShowColumnName THEN
            MatrixColumnCaptions[i] := FORMAT(Period."Period Name")
          ELSE
            MatrixColumnCaptions[i] := PeriodFormMgt.CreatePeriodFormat(PeriodType,Period."Period Start");

          MatrixRecords[i].COPY(Period);
          i := i + 1;
        UNTIL (Period.NEXT = 0) OR (i = ARRAYLEN(MatrixColumnCaptions));
      END;
    END;

    PROCEDURE CreateCaptionSet@2(VAR RecRef@1000 : RecordRef;SetWanted@1007 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';MaximumNoOfCaptions@1001 : Integer;CaptionFieldNo@1002 : Integer;VAR PrimaryKeyFirstCaptionInCurrSe@1006 : Text[1024];VAR CaptionSet@1005 : ARRAY [32] OF Text[1024];VAR CaptionRange@1004 : Text[1024]) : Integer;
    VAR
      CurrentCaptionOrdinal@1003 : Integer;
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';

      CurrentCaptionOrdinal := 0;

      CASE SetWanted OF
        SetWanted::Initial:
          BEGIN
            RecRef.FIND('=><')
          END;
        SetWanted::Previous:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            RecRef.FIND('=');
            RecRef.NEXT(-MaximumNoOfCaptions);
          END;
        SetWanted::Same:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            RecRef.FIND('=');
          END;
        SetWanted::Next:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            RecRef.FIND('=');
            IF NOT (RecRef.NEXT(MaximumNoOfCaptions) = MaximumNoOfCaptions) THEN BEGIN
              RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
              RecRef.FIND('=')
            END;
          END;
        SetWanted::PreviousColumn:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            RecRef.FIND('=');
            RecRef.NEXT(-1);
          END;
        SetWanted::NextColumn:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            RecRef.FIND('=');
            IF NOT (RecRef.NEXT = 1) THEN BEGIN
              RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
              RecRef.FIND('=')
            END;
          END;

      END;

      PrimaryKeyFirstCaptionInCurrSe := RecRef.GETPOSITION;

      REPEAT
        CurrentCaptionOrdinal := CurrentCaptionOrdinal + 1;
        CaptionSet[CurrentCaptionOrdinal] := FORMAT(RecRef.FIELD(CaptionFieldNo).VALUE);
      UNTIL (CurrentCaptionOrdinal = MaximumNoOfCaptions) OR (RecRef.NEXT <> 1);

      IF CurrentCaptionOrdinal = 1 THEN
        CaptionRange := CaptionSet[1]
      ELSE
        CaptionRange := CaptionSet[1] + '..' + CaptionSet[CurrentCaptionOrdinal];
    END;

    PROCEDURE GenerateMatrixData@7(VAR RecRef@1000 : RecordRef;SetWanted@1008 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';MaximumSetLength@1001 : Integer;CaptionFieldNo@1002 : Integer;VAR PKFirstRecInCurrSet@1006 : Text[1024];VAR CaptionSet@1005 : ARRAY [32] OF Text[1024];VAR CaptionRange@1004 : Text[1024];VAR CurrSetLength@1007 : Integer);
    VAR
      Steps@1009 : Integer;
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';
      CurrSetLength := 0;

      IF RecRef.ISEMPTY THEN BEGIN
        PKFirstRecInCurrSet := '';
        EXIT;
      END;

      CASE SetWanted OF
        SetWanted::Initial:
          BEGIN
            RecRef.FINDFIRST;
          END;
        SetWanted::Previous:
          BEGIN
            RecRef.SETPOSITION(PKFirstRecInCurrSet);
            RecRef.FIND('=');
            Steps := RecRef.NEXT(-MaximumSetLength);
            IF NOT (Steps IN [-MaximumSetLength,0]) THEN
              ERROR(Text001);
          END;
        SetWanted::Same:
          BEGIN
            RecRef.SETPOSITION(PKFirstRecInCurrSet);
            RecRef.FIND('=')
          END;
        SetWanted::Next:
          BEGIN
            RecRef.SETPOSITION(PKFirstRecInCurrSet);
            RecRef.FIND('=');
            IF NOT (RecRef.NEXT(MaximumSetLength) = MaximumSetLength) THEN BEGIN
              RecRef.SETPOSITION(PKFirstRecInCurrSet);
              RecRef.FIND('=');
            END;
          END;
        SetWanted::PreviousColumn:
          BEGIN
            RecRef.SETPOSITION(PKFirstRecInCurrSet);
            RecRef.FIND('=');
            Steps := RecRef.NEXT(-1);
            IF NOT (Steps IN [-1,0]) THEN
              ERROR(Text001);
          END;
        SetWanted::NextColumn:
          BEGIN
            RecRef.SETPOSITION(PKFirstRecInCurrSet);
            RecRef.FIND('=');
            IF NOT (RecRef.NEXT(1) = 1) THEN BEGIN
              RecRef.SETPOSITION(PKFirstRecInCurrSet);
              RecRef.FIND('=');
            END;
          END;
      END;

      PKFirstRecInCurrSet := RecRef.GETPOSITION;

      REPEAT
        CurrSetLength := CurrSetLength + 1;
        CaptionSet[CurrSetLength] := FORMAT(RecRef.FIELD(CaptionFieldNo).VALUE);
      UNTIL (CurrSetLength = MaximumSetLength) OR (RecRef.NEXT <> 1);

      IF CurrSetLength = 1 THEN
        CaptionRange := CaptionSet[1]
      ELSE
        CaptionRange := CaptionSet[1] + '..' + CaptionSet[CurrSetLength];
    END;

    PROCEDURE GeneratePeriodMatrixData@1(SetWanted@1008 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';MaximumSetLength@1001 : Integer;UseNameForCaption@1002 : Boolean;PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';DateFilter@1000 : Text[30];VAR PKFirstRecInCurrSet@1006 : Text[100];VAR CaptionSet@1005 : ARRAY [32] OF Text[200];VAR CaptionRange@1004 : Text[100];VAR CurrSetLength@1007 : Integer;VAR PeriodRecords@1011 : ARRAY [32] OF TEMPORARY Record 2000000007);
    VAR
      Steps@1009 : Integer;
      Calendar@1010 : Record 2000000007;
      PeriodFormMgt@1012 : Codeunit 359;
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';
      CurrSetLength := 0;
      CLEAR(PeriodRecords);
      CLEAR(Calendar);
      CLEAR(PeriodFormMgt);

      Calendar.SETFILTER("Period Start",DateFilter);
      IF NOT FindDate('-',Calendar,PeriodType,FALSE) THEN BEGIN
        PKFirstRecInCurrSet := '';
        EXIT;
      END;

      CASE SetWanted OF
        SetWanted::Initial:
          BEGIN
            IF (PeriodType = PeriodType::"Accounting Period") OR (DateFilter <> '') THEN BEGIN
              FindDate('-',Calendar,PeriodType,TRUE);
            END ELSE
              Calendar."Period Start" := 0D;
            FindDate('=><',Calendar,PeriodType,TRUE);
          END;
        SetWanted::Previous:
          BEGIN
            Calendar.SETPOSITION(PKFirstRecInCurrSet);
            FindDate('=',Calendar,PeriodType,TRUE);
            Steps := PeriodFormMgt.NextDate(-MaximumSetLength,Calendar,PeriodType);
            IF NOT (Steps IN [-MaximumSetLength,0]) THEN
              ERROR(Text001);
          END;
        SetWanted::PreviousColumn:
          BEGIN
            Calendar.SETPOSITION(PKFirstRecInCurrSet);
            FindDate('=',Calendar,PeriodType,TRUE);
            Steps := PeriodFormMgt.NextDate(-1,Calendar,PeriodType);
            IF NOT (Steps IN [-1,0]) THEN
              ERROR(Text001);
          END;
        SetWanted::NextColumn:
          BEGIN
            Calendar.SETPOSITION(PKFirstRecInCurrSet);
            FindDate('=',Calendar,PeriodType,TRUE);
            IF NOT (PeriodFormMgt.NextDate(1,Calendar,PeriodType) = 1) THEN BEGIN
              Calendar.SETPOSITION(PKFirstRecInCurrSet);
              FindDate('=',Calendar,PeriodType,TRUE);
            END;
          END;
        SetWanted::Same:
          BEGIN
            Calendar.SETPOSITION(PKFirstRecInCurrSet);
            FindDate('=',Calendar,PeriodType,TRUE)
          END;
        SetWanted::Next:
          BEGIN
            Calendar.SETPOSITION(PKFirstRecInCurrSet);
            FindDate('=',Calendar,PeriodType,TRUE);
            IF NOT (PeriodFormMgt.NextDate(MaximumSetLength,Calendar,PeriodType) = MaximumSetLength) THEN BEGIN
              Calendar.SETPOSITION(PKFirstRecInCurrSet);
              FindDate('=',Calendar,PeriodType,TRUE);
            END;
          END;
      END;

      PKFirstRecInCurrSet := Calendar.GETPOSITION;

      REPEAT
        CurrSetLength := CurrSetLength + 1;
        IF UseNameForCaption THEN
          CaptionSet[CurrSetLength] := FORMAT(Calendar."Period Name")
        ELSE
          CaptionSet[CurrSetLength] := PeriodFormMgt.CreatePeriodFormat(PeriodType,Calendar."Period Start");
        PeriodRecords[CurrSetLength].COPY(Calendar);
      UNTIL (CurrSetLength = MaximumSetLength) OR (PeriodFormMgt.NextDate(1,Calendar,PeriodType) <> 1);

      IF CurrSetLength = 1 THEN
        CaptionRange := CaptionSet[1]
      ELSE
        CaptionRange := CaptionSet[1] + '..' + CaptionSet[CurrSetLength];
    END;

    PROCEDURE CreateTextAmount@6(Amount@1000 : Text[1024];DecimalPoint@1001 : 'Period,Comma') TextAmount : Text[1024];
    VAR
      FormattedAmount@1002 : Text[1024];
      Position@1003 : Integer;
      Decimals@1004 : Code[10];
      DecimalLenght@1005 : Integer;
    BEGIN
      IF DecimalPoint = DecimalPoint::Comma THEN BEGIN
        Position := 0;
        FormattedAmount := Amount;
        Position := STRPOS(FormattedAmount,',');
        IF Position > 0 THEN BEGIN
          Decimals := COPYSTR(FormattedAmount,Position,STRLEN(FormattedAmount));
          IF STRLEN(Decimals) > 3 THEN
            TextAmount := COPYSTR(FormattedAmount,1,Position - 1) + COPYSTR(Decimals,1,3);
          IF STRLEN(Decimals) <= 3 THEN
            TextAmount := COPYSTR(FormattedAmount,1,Position - 1) + Decimals;
          IF STRLEN(Decimals) <= 2 THEN
            TextAmount := COPYSTR(FormattedAmount,1,Position - 1) + Decimals + '0';
          IF STRLEN(Decimals) <= 1 THEN
            TextAmount := COPYSTR(FormattedAmount,1,Position - 1) + '00';
        END ELSE
          TextAmount := FormattedAmount + ',00';
      END ELSE BEGIN
        Position := 0;
        FormattedAmount := Amount;
        Position := STRPOS(FormattedAmount,'.');
        IF Position > 0 THEN BEGIN
          Decimals := COPYSTR(FormattedAmount,Position,STRLEN(FormattedAmount));
          IF STRLEN(Decimals) > 3 THEN
            TextAmount := COPYSTR(FormattedAmount,1,Position - 1) + COPYSTR(Decimals,1,3);
          IF STRLEN(Decimals) <= 3 THEN
            TextAmount := COPYSTR(FormattedAmount,1,Position - 1) + Decimals;
          IF STRLEN(Decimals) <= 2 THEN
            TextAmount := COPYSTR(FormattedAmount,1,Position - 1) + Decimals + '0';
          IF STRLEN(Decimals) <= 1 THEN
            TextAmount := COPYSTR(FormattedAmount,1,Position - 1) + '00';
        END ELSE
          TextAmount := FormattedAmount + '.00';
      END;
    END;

    LOCAL PROCEDURE FindDate@10(SearchString@1000 : Text[3];VAR Calendar@1001 : Record 2000000007;PeriodType@1002 : 'Day,Week,Month,Quarter,Year,Accounting Period';ErrorWhenNotFound@1005 : Boolean) : Boolean;
    VAR
      Found@1003 : Boolean;
      PeriodFormMgt@1004 : Codeunit 359;
    BEGIN
      CLEAR(PeriodFormMgt);
      Found := PeriodFormMgt.FindDate(SearchString,Calendar,PeriodType);
      IF ErrorWhenNotFound AND NOT Found THEN
        ERROR(Text002);
      EXIT(Found);
    END;

    PROCEDURE SetIndentation@8(VAR TextString@1000 : Text[1024];Indentation@1001 : Integer);
    VAR
      Substr@1002 : Text[1024];
    BEGIN
      Substr := PADSTR(Substr,Indentation * 2,' ');
      TextString := Substr + TextString;
    END;

    BEGIN
    END.
  }
}
