OBJECT Codeunit 7010140 Facturar reservas excursiones
{
  OBJECT-PROPERTIES
  {
    Date=09/07/15;
    Time=12:46:25;
    Modified=Yes;
    Version List=AIC2009,CNT-OC-14047,COM;
  }
  PROPERTIES
  {
    OnRun=VAR
            lfLiqGuia@1100217000 : Form 7010209;
            lrLiq@1100217001 : Record 7010178;
          BEGIN
            lrLiq.RESET;
            lrLiq.SETRANGE("Venta prefacturada", FALSE);

            CLEAR(lfLiqGuia);
            lfLiqGuia.SETTABLEVIEW(lrLiq);
            lfLiqGuia.RUN;
          END;

  }
  CODE
  {
    VAR
      Text0001@1100253000 : TextConst 'ENU=Must establish a dates range;ESP=Debe de establecerse un rango de fechas';
      rParAg@1100253001 : Record 7009700;
      Text0002@1100253002 : TextConst 'ENU=%1 proformas:%2 have been created;ESP=Se han creado %1 prefacturas:%2';
      rParPer@1100253015 : Record 7009701;
      rReprs@1100253003 : Record 7010241;
      rCustomer@1100253016 : Record 18;
      rCustomerComision@1100253017 : Record 18;
      rTarExc@1100253004 : Record 7010147;
      rTipCam@1100253005 : Record 330;
      rCtaToDel@1100253006 : Record 7009705;
      Text0003@1100253007 : TextConst 'ENU=Must indicate a number of proforma invoice;ESP=Debe de indicar un n£mero de Prefactura';
      Text0004@1100253008 : TextConst 'ENU=Must indicate an invoice number;ESP=Debe de indicar un n£mero de factura';
      Text0005@1100253009 : TextConst 'ENU=IPR;ESP=FPR';
      Text0006@1100253010 : TextConst 'ENU=EXCUR;ESP=EXCUR';
      Text0008@1100253011 : TextConst 'ENU=Booking %1 has already been invoiced;ESP=La Reserva %1 YA ha sido Facturada';
      Text0009@1100253012 : TextConst 'ENU=Booking %1 has not been proforma invoiced;ESP=La Reserva %1 NO ha sido Prefacturada';
      Text0010@1100253013 : TextConst 'ENU=TO Claim Inv Exc:;ESP=Reclamacion TO Fac Exc:';
      Text0011@1100253014 : TextConst 'ENU=Would you like to invoice the proforma %1?;ESP=¨Desea realmente facturar la prefactura %1?';
      Text0012@1100253018 : TextConst 'ENU=INVOICERO;ESP=FACTURACERO';
      Text0013@1100253019 : TextConst 'ENU=Total of proforma is 0./Would you like to mark it as invoiced?;ESP=El total de la prefactura es 0./¨Desea marcarla como facturada?';
      rDatIns@1100253020 : Record 7009768;
      Text0014@1100217000 : TextConst 'ENU=Do you want to undo the proforma %1.;ESP=Desea deshacer la prefactura %1.';
      Text0015@1100217001 : TextConst 'ESP=EXENTO';
      Text0016@1100217002 : TextConst 'ENU=You can''t include two office codes on an invoice;ESP="No se pueden incluir dos c¢digos de oficina en una factura "';
      rSerie@1100217005 : Record 7009921;
      rTouroperador@1100217015 : Record 7009717;
      cFunSeg@1100217003 : Codeunit 7009751;
      wDiarioGeneral@1100217004 : Code[10];
      Text0017@1100217006 : TextConst 'ENU=Refund ticket No. %1 (Guide %2);ESP=Reembolso de ticket %1 (Guia %2)';
      Text0018@1100217007 : TextConst 'ENU=CANCEL IPR;ESP=CANCEL FPR';
      wCodDim@1100217008 : Code[20];
      Text0019@1100217009 : TextConst 'ENU=INVOICE #1########;ESP=FACTURA #1########';
      wDialog@1100217010 : Dialog;
      wNumFactura@1100217011 : Code[20];
      wComprobante@1100217012 : Code[20];
      Text0020@1100217013 : TextConst 'ENU=Sales period %1-%2 (Touroperator %3);ESP=Ventas periodo %1-%2 (Touroperador %3)';
      Text0021@1100217014 : TextConst 'ENU=Sales liquidation %1 (Guide %2);ESP=Ventas liquidacion %1 (Guia %2)';
      Text0022@1100217016 : TextConst 'ENU=Workdate must be in the sale dates month.;ESP=La fecha de trabajo debe estar dentro del mes de fechas de ventas';
      Text0023@1000000000 : TextConst 'ENU=OFFSHORE EXC PURCHASE DOCUMENT;ESP=DOCS. COMPRA  EXC COMERCIALIZADORA';

    PROCEDURE LlamarFacturacion@1100217002(prRsv@1100217000 : Record 7010162);
    BEGIN
      // LlamarFacturacion

      rParAg.FINDFIRST;

      cFunSeg.TienePermiso('EXC-FAC-RSV', TRUE); //$024

      IF prRsv."Num. Prefactura" = '' THEN
        _PrefacturarExcursiones(prRsv)
      ELSE
        _FacturarExcursiones(prRsv);
    END;

    LOCAL PROCEDURE _PrefacturarExcursiones@1100253000(prRsv@1100253000 : Record 7010162);
    VAR
      lrRsv@1100253006 : Record 7010162;
      lrGuia@1100217000 : Record 7010241;
      lFSel@1100253001 : Form 7010235;
      lwFechaDesde@1100253005 : Date;
      lwFechaHasta@1100253004 : Date;
      lwRepresentante@1100253003 : Code[20];
      lwFechaCambio@1100253002 : Date;
      lwTouroperador@1100217001 : Code[10];
    BEGIN
      // PrefacturarExcursiones

      //+$027
      IF rParAg."Facturar tickets x fecha venta" THEN
      BEGIN
        lwFechaDesde    := prRsv."Fecha Venta";
        lwFechaHasta    := prRsv."Fecha Venta";
      END
      //+$027
      ELSE
      BEGIN
        lwFechaDesde    := prRsv."Fecha Excursion";
        lwFechaHasta    := prRsv."Fecha Excursion";
      END;
      lwRepresentante := prRsv."Guia Venta";
      lwFechaCambio   := prRsv."Fecha cambio";
      lwTouroperador  := prRsv.TourOperador;

      CLEAR(lFSel);
      lFSel.LOOKUPMODE := TRUE;
      lFSel.PasarParametros(lwFechaDesde, lwFechaHasta, lwRepresentante, lwFechaCambio, lwTouroperador);
      IF lFSel.RUNMODAL <> ACTION::LookupOK THEN
        EXIT;

      lFSel.DevolverParametros(lwFechaDesde, lwFechaHasta, lwRepresentante, lwFechaCambio, lwTouroperador);

      IF (lwFechaDesde = 0D) AND (lwFechaHasta = 0D) THEN
        ERROR(Text0001);

      CLEAR(lrRsv);

      //+$027
      IF rParAg."Facturar tickets x fecha venta" THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Guia Venta", "Fecha Venta");
        IF lwFechaHasta = 0D THEN
          lrRsv.SETFILTER("Fecha Venta",'%1..', lwFechaDesde)
        ELSE
          lrRsv.SETFILTER("Fecha Venta",'%1..%2', lwFechaDesde, lwFechaHasta);

        lrRsv.SETFILTER(Producto        , '<>%1', '');
        lrRsv.SETFILTER("Hotel Cliente" , '<>%1', '');
      //  lrGuia.GET(lwRepresentante);        -$069
      //  IF lrGuia."Trabaja a credito" THEN  -$069
      IF prRsv."Reserva a credito" THEN   // +$069
        BEGIN
          lrRsv.SETRANGE(Confirmada, TRUE);
          lrRsv.SETRANGE(TourOperador, lwTouroperador);
        END
        ELSE BEGIN
          lrGuia.GET(lwRepresentante);        // +$069
          lrRsv.SETFILTER("N§ liquidacion GV", '<>%1', 0);
        END;
      END
      //+$027
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha Excursion", Producto, "Zona Hotel", "N§ Servicio");
        IF lwFechaHasta = 0D THEN
          lrRsv.SETFILTER("Fecha Excursion",'%1..', lwFechaDesde)
        ELSE
          lrRsv.SETFILTER("Fecha Excursion",'%1..%2', lwFechaDesde, lwFechaHasta);

        lrRsv.SETRANGE(Confirmada       , TRUE); //$010
      END;

      IF lwRepresentante <> '' THEN
        lrRsv.SETRANGE("Guia Venta", lwRepresentante);
      IF lwFechaCambio <> 0D THEN
        lrRsv.SETRANGE("Fecha cambio", lwFechaCambio);
      lrRsv.SETRANGE("Num. Prefactura", '');
      lrRsv.SETRANGE("Num. Factura"   , '');

      _CrearPrefacturas(lrRsv);
    END;

    LOCAL PROCEDURE _CrearPrefacturas@1100253009(VAR prRsv@1100253000 : Record 7010162);
    VAR
      lrTmp@1100253001 : TEMPORARY Record 7010162;
      lrRsv@1100253002 : Record 7010162;
      lrNPrefs@1100253003 : Integer;
      lwTxt@1100253004 : Text[1024];
    BEGIN
      // _CrearPrefacturas

      CLEAR(lrTmp);
      CLEAR(lwTxt);

      //. Creamos un temporal por cada combinacion de guia de venta y fecha de cambio para crear
      //. una prefactura para cada uno.
      //. Si la oficina es obligatoria tambien lo incluimos en los criterios de distincion

      prRsv.SETRANGE(Anulada    , FALSE);
      //prRsv.SETRANGE(Reembolsada, FALSE);  // $058
      IF prRsv.FINDSET THEN BEGIN
        REPEAT
          // $058
          IF (prRsv."Ingreso reserva" - prRsv."Importe Reembolsado") <> 0 THEN BEGIN
            lrTmp.SETRANGE("Guia Venta"  , prRsv."Guia Venta");
            lrTmp.SETRANGE("Fecha cambio", prRsv."Fecha cambio");
            // $022 Nos aseguramos de que no haya dos oficinas distintas en la misma prefactura
            IF rParAg."Oficina Excursion Obligatoria" THEN BEGIN
              prRsv.TESTFIELD(Oficina);
              lrTmp.SETRANGE(Oficina, prRsv.Oficina);
            END;
            IF NOT lrTmp.FINDFIRST THEN BEGIN
              lrTmp := prRsv;
              lrTmp.INSERT;
            END;
          END;
        UNTIL prRsv.NEXT = 0;
      END;

      CLEAR(lrNPrefs); // Cantidad de prefacturas creadas
      CLEAR(lrTmp);
      IF lrTmp.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrRsv);
          lrRsv.COPYFILTERS(prRsv);
          lrRsv.SETCURRENTKEY("Guia Venta");
          lrRsv.SETRANGE("Guia Venta"  , lrTmp."Guia Venta");
          lrRsv.SETRANGE("Fecha cambio", lrTmp."Fecha cambio");
          //+$059 <
          IF rParAg."Oficina Excursion Obligatoria" THEN
            lrRsv.SETRANGE(Oficina, lrTmp.Oficina);
          //+$059 >
          lwTxt += _CrearPrefactura (lrRsv) + '\';
          lrNPrefs +=1;
        UNTIL lrTmp.NEXT=0;
      END;

      lwTxt := STRSUBSTNO(Text0002, lrNPrefs,lwTxt);
      MESSAGE(lwTxt);
    END;

    LOCAL PROCEDURE _CrearPrefactura@1100253015(VAR prRsv@1100253000 : Record 7010162) : Code[20];
    VAR
      lwNPrefact@1100253001 : Code[20];
      lrRsv@1100253002 : Record 7010162;
      lrRsv2@1100217000 : Record 7010162;
    BEGIN
      // _CrearPrefactura

      CLEAR(rParAg);
      rParAg.LOCKTABLE;
      rParAg.FINDFIRST;
      IF rParAg."Prefactura excursion" = '' THEN
        rParAg."Prefactura excursion" := 'PFE0000000';
      //.rParAg.TESTFIELD("Prefactura excursion");
      rParAg."Prefactura excursion" := INCSTR(rParAg."Prefactura excursion");
      rParAg.MODIFY;

      CLEAR(lrRsv); // Dejamos la clave primaria
      lrRsv.COPY(prRsv);
      //+$045 <
      IF lrRsv.FINDSET(TRUE) THEN
      BEGIN
        REPEAT
          lrRsv2 := lrRsv;
          lrRsv2.VALIDATE("Num. Prefactura", rParAg."Prefactura excursion");
          lrRsv2.MODIFY;
        UNTIL lrRsv.NEXT = 0;
      END;
      //+$045 >
      //-$045lrRsv.MODIFYALL("Num. Prefactura", rParAg."Prefactura excursion");

      IF lwNPrefact <> '' THEN
        _ImprimirPrefactura(rParAg."Prefactura excursion");

      EXIT(rParAg."Prefactura excursion");
    END;

    PROCEDURE LlamarImpresion@1100217003(prRsv@1100217000 : Record 7010162);
    BEGIN
      // LlamarImpresion

      IF (prRsv."Num. Prefactura" = '') AND
         (prRsv."Num. Factura" = '') THEN
        EXIT;

      IF prRsv."Num. Factura" = '' THEN
        _ImprimirPrefactura(prRsv."Num. Prefactura")
      //ELSE
      //  _ImprimirFactura(prRsv."Num. Factura");
    END;

    LOCAL PROCEDURE _ImprimirPrefactura@1100253026(pwNPrefact@1100253000 : Code[20]);
    VAR
      lrRsv@1100253001 : Record 7010162;
    BEGIN
      // ImprimirPrefactura

      IF pwNPrefact = '' THEN
        ERROR(Text0003);

      CLEAR(lrRsv);
      lrRsv.SETCURRENTKEY("Num. Prefactura");
      lrRsv.SETRANGE("Num. Prefactura", pwNPrefact);
      REPORT.RUN(7010141, TRUE, TRUE, lrRsv);
    END;

    LOCAL PROCEDURE _ComprobarFicheros@1100253038(prRsv@1100253000 : Record 7010162;VAR prCont@1100217000 : Record 7010142);
    BEGIN
      // _ComprobarFicheros

      rParAg.FINDFIRST;
      rParPer.FINDFIRST; //+$003

      //+$057 <
      rSerie.GET(rSerie.Modulo::Excursion);
      rSerie.CheckSeries;
      //+$057 <

      rDatIns.FINDFIRST;

      CLEAR(rReprs);
      rReprs.GET(prRsv."Guia Venta");
      rReprs.TESTFIELD("Cliente Facturacion");
      rReprs.TESTFIELD(Bloqueado, FALSE);

      rCustomer.GET(rReprs."Cliente Facturacion"); //$004

      CLEAR(rTarExc);
      rTarExc.SETRANGE(Delegacion      , prRsv.Delegacion);
      rTarExc.SETRANGE(Excursion       , prRsv.Producto);
      IF rParAg."Busca tarifa por fecha venta" THEN
      BEGIN
        rTarExc.SETFILTER("Fecha Inicio" , '<=%1' , prRsv."Fecha Venta");
        rTarExc.SETFILTER("Fecha Final"  , '>=%1' , prRsv."Fecha Venta");
      END
      ELSE
      BEGIN
        rTarExc.SETFILTER("Fecha Inicio" , '<=%1' , prRsv."Fecha Excursion");
        rTarExc.SETFILTER("Fecha Final"  , '>=%1' , prRsv."Fecha Excursion");
      END;
      rTarExc.FINDFIRST;
      //$-057rTarExc.TESTFIELD("Codigo Serie");

      CLEAR(rCtaToDel);
      rCtaToDel.GET(prRsv.Delegacion, prRsv.TourOperador);
      rCtaToDel.TESTFIELD("Cta. venta excursiones");

      rCustomerComision.GET(rCtaToDel."Cliente Comisiones TO"); //$006

      wDiarioGeneral := rParAg.GetLibroDiarioGeneral;

      //. Buscamos el contrato de comisiones de touroperador
      //. $026
      prCont.RESET;
      prCont.SETRANGE (Delegacion             , prRsv.Delegacion);
      prCont.SETRANGE (TourOperador           , prRsv.TourOperador);
      prCont.SETRANGE ("Tipo Contrato"        , prCont."Tipo Contrato"::TourOperador);
      prCont.SETFILTER("Fecha inicio contrato", '<=%1' , prRsv."Fecha Excursion");
      prCont.SETFILTER("Fecha final contrato" , '>=%1' , prRsv."Fecha Excursion");
      prCont.SETRANGE (Comercializadora       , FALSE);
      prCont.SETRANGE (Confirmado             , TRUE); //+$067
      IF NOT prCont.FINDFIRST THEN
        CLEAR(prCont);

      rCtaToDel.TESTFIELD("Cliente Comisiones TO");

      //. Buscamos la ficha de touroperador
      rTouroperador.GET(prRsv.TourOperador);

      // +$068
      IF prRsv."Reserva a credito" THEN
      BEGIN
        rCtaToDel.TESTFIELD("Cliente credito excursiones");
        IF rCtaToDel."Cliente credito excursiones" <> '' THEN
          rCustomer.GET(rCtaToDel."Cliente credito excursiones");
      END;
    END;

    LOCAL PROCEDURE _FacturarExcursiones@1100253041(prRsv@1100253000 : Record 7010162);
    VAR
      lrRsv@1100253001 : Record 7010162;
      lrRsv2@1100253006 : Record 7010162;
      lrCabFact@1100253005 : Record 36;
      lrDetEco@1100253007 : Record 7010245;
      lrExc@1100253014 : Record 7009710;
      lrImpsTMP@1100253008 : TEMPORARY Record 88000;
      lrCabInc@1100217002 : Record 7009908;
      lrContTO@1100217005 : Record 7010142;
      lwImp@1100253002 : Decimal;
      lwTotalFactura@1100253003 : Decimal;
      lwAcumCT@1100253004 : Decimal;
      lwAcumCTDiv@1000000001 : Decimal;
      lwReembolsoRsvA@1100253009 : Decimal;
      lwReembolsoRsvN@1100253011 : Decimal;
      lwImporteAd@1100253012 : Decimal;
      lwImporteNi@1100253013 : Decimal;
      lwCosteReservaAd@1100253016 : Decimal;
      lwCosteReservaNi@1100253017 : Decimal;
      lwNoDoc@1100253010 : Code[20];
      lwCuenta@1100253015 : Text[20];
      lwCuentaExenta@1100217007 : Text[20];
      lwFechaDesde@1100217000 : Date;
      lwFechaHasta@1100217001 : Date;
      lwOficina@1100217003 : Code[20];
      lwOK@1100217004 : Boolean;
      lwNumLiquidacion@1100217006 : Integer;
      lcRelease@1000000000 : Codeunit 414;
    BEGIN
      // _FacturarExcursiones

      IF prRsv."Num. Factura" <> '' THEN
        ERROR(Text0008, prRsv."N§ Reserva");

      IF prRsv."Num. Prefactura" ='' THEN
        ERROR(Text0009, prRsv."N§ Reserva");

      _ComprobarFicheros(prRsv, lrContTO); //+$026

      IF NOT CONFIRM (Text0011, FALSE, prRsv."Num. Prefactura") THEN
        EXIT;

      IF (rDatIns."Empresa Real" = rDatIns."Empresa Real"::CNT) AND (COMPANYNAME IN ['AID', 'TDC', 'TNX']) THEN //. Solo Mexico
      BEGIN
        wDialog.OPEN(Text0019);
        wDialog.INPUT(1, wNumFactura);
        wDialog.CLOSE;

        IF wNumFactura <> '' THEN
          IF STRLEN(wNumFactura) <> 10 THEN
            ERROR('El numero de factura debe ser de 10 digitos');
      END;

      //+002
      CLEAR(lrImpsTMP);
      lrImpsTMP.DELETEALL;

      CLEAR(lwImp);
      CLEAR(lwTotalFactura);    // Importe acumulado
      CLEAR(lwAcumCT);  // Acumulado de Comision Touroperador
      CLEAR(lwAcumCTDiv); //+$070 // Acumulado comision touroperador en la divisa de venta
      CLEAR(lwFechaDesde);
      CLEAR(lwFechaHasta);

      CLEAR(lrRsv);
      lrRsv.SETCURRENTKEY("Num. Prefactura");
      lrRsv.SETRANGE("Num. Prefactura", prRsv."Num. Prefactura");
      lrRsv.SETRANGE("Num. Factura"   , '');
      IF lrRsv.FINDSET THEN
      BEGIN
        lwNumLiquidacion := lrRsv."N§ liquidacion GV"; //+$042

        //. Seleccionamos la dimension departamento
        IF rParAg."Oficina Excursion Obligatoria" THEN
          wCodDim := lrRsv.Oficina
        ELSE
        BEGIN
          IF lrRsv.Oficina <> '' THEN
            wCodDim := lrRsv.Oficina
          ELSE
            wCodDim := SeleccionarDepartamento;
          IF wCodDim = '' THEN
            wCodDim := rParAg.Delegacion;
        END;

        // $022
        lwOficina := prRsv.Oficina;

        //+$054 <
        //. Control de fecha de venta
        IF rParAg."Facturar tickets x fecha venta" THEN
        BEGIN
          IF DATE2DMY(WORKDATE, 2) <> DATE2DMY(prRsv."Fecha Venta", 2) THEN
            ERROR(Text0022);
        END;
        //+$054 >

        REPEAT
          //+$042 <
          //. Si hay diferentes liquidaciones no ponemos ninguna
          IF lrRsv."N§ liquidacion GV" <> lwNumLiquidacion THEN
            lwNumLiquidacion := 0;
          //+$042 >

          // $022
          IF rParAg."Oficina Excursion Obligatoria" THEN BEGIN
            lrRsv.TESTFIELD(Oficina);
            IF lwOficina <> lrRsv.Oficina THEN
              ERROR(Text0016);
          END;

          //+$003
          //-$033lrRsv.CALCFIELDS("Adultos Reembolsados", "Ni¤os Reembolsados");

          _BuscaCuentaIngresos(lrRsv, lwCuenta, lwCosteReservaAd, lwCosteReservaNi, 0, lwCuentaExenta); //+$040, +$048

          // $023
          lrDetEco.GET(lrRsv.Delegacion, lrRsv."N§ Reserva");

          CLEAR(lrImpsTMP);
          lrImpsTMP.Dia       := lrRsv."Fecha Excursion";
          lrImpsTMP.Excursion := lrRsv.Producto;
          //+$049 <
          IF (lrContTO."Aplica comision en factura") AND (lrRsv."Reserva a credito") THEN
            lrImpsTMP."Descuento Touroperador" := lrRsv."Precio Descuento Touroperador";
          //+$049 >

          // $023
          //-$033lwOK := (lrRsv.Adultos - lrRsv."Adultos Reembolsados"  - lrDetEco."Free Adultos") > 0;
          // IF lrRsv.Adultos - lrRsv."Adultos Reembolsados" <> 0 THEN BEGIN

          lwOK := (lrRsv.Adultos - lrDetEco."Free Adultos") > 0;
          IF lwOK THEN
          BEGIN
            lrImpsTMP."Tipo Persona" := rParPer."Codigo Adulto";
            IF NOT lrImpsTMP.FIND THEN
            BEGIN
              lrImpsTMP.INIT;
              lrImpsTMP."Cuenta contable"          := lwCuenta; //+$018
              lrImpsTMP."Cuenta exenta"            := lwCuentaExenta; //+$048
              lrImpsTMP.Zona                       := lrRsv."Zona Hotel"; //+$049
              lrImpsTMP."Grupo IVA Producto"       := _RetornaIVAProducto(lrImpsTMP.Excursion, lrImpsTMP.Dia); //+$049
              lrImpsTMP."% IVA"                    := _BuscaPorcentajeIVA(lrImpsTMP."Grupo IVA Producto"); //+$049
              lrImpsTMP."Usar impuestos incluidos" :=
                      (rTouroperador."Descuento sobre importes" = rTouroperador."Descuento sobre importes"::"Con impuestos");
              lrImpsTMP.INSERT;
            END;

            // lrDetEco.GET(lrRsv.Delegacion, lrRsv."N§ Reserva"); //+$017

            //-$033lwReembolsoRsvA := lrRsv.GetReembolso(rCustomer."Currency Code", 1); //Adultos, $004 , $016

            //+$026
            //-$049IF lrContTO."No descontar en factura" THEN
            //-$049  lwImporteAd := lrDetEco."Ingreso adultos"
            //-$049ELSE
            //-$049  lwImporteAd := lrDetEco."Ingreso adultos" + lrRsv."Comision Touroperador";

            lwImporteAd := lrDetEco."Ingreso adultos" - lrRsv."Importe reembolsado adultos"; //+$049
            //+$026

            //. Convertimos a la divisa del cliente de la factura
            //. CNT utiliza dos tasas de cambio para la misma divisa, por tanto aunque el codigo
            //. es diferente, el realidad no hay que convertir
            //+$034
            IF COPYSTR(lrRsv.Divisa, 1, 2) <> COPYSTR(rCustomer."Currency Code", 1, 2) THEN
              lwImporteAd     := rTipCam.ExchangeAmtFCYToFCY(lrRsv."Fecha cambio",
                                                             lrRsv.Divisa,
                                                             rCustomer."Currency Code",
                                                             lwImporteAd); //$004

            lwTotalFactura    += (lwImporteAd - lwCosteReservaAd); //+$018 //-$033
            lrImpsTMP.Importe += (lwImporteAd - lwCosteReservaAd); //+$018 //-$033

            //+$017
            //-$033lwReembolsoRsvA := lrRsv.GetReembolsoExento(rCustomer."Currency Code",1);

            //+$034
            IF COPYSTR(lrRsv.Divisa, 1, 2) <> COPYSTR(rCustomer."Currency Code", 1, 2) THEN
              lwImporteAd     := rTipCam.ExchangeAmtFCYToFCY(lrRsv."Fecha cambio",
                                                             lrRsv.Divisa,
                                                             rCustomer."Currency Code",
                                                             lrDetEco."Ingreso adultos exento")
            ELSE
              lwImporteAd := lrDetEco."Ingreso adultos exento";

            lrImpsTMP."Importe exento" += (lwImporteAd); //-$033
            //+$017

            lrImpsTMP.Plazas += (lrRsv.Adultos - lrDetEco."Free Adultos" - lrRsv."Adultos Reembolsados"); //-$033
            lrImpsTMP.MODIFY;
          END;

          CLEAR(lrImpsTMP);
          lrImpsTMP.Dia       := lrRsv."Fecha Excursion";
          lrImpsTMP.Excursion := lrRsv.Producto;
          //+$049 <
          IF (lrContTO."Aplica comision en factura") AND (lrRsv."Reserva a credito") THEN
            lrImpsTMP."Descuento Touroperador" := lrRsv."Precio Descuento Touroperador";
          //+$049 >

          // $023
          //-$033lwOK := (lrRsv.Ni¤os - lrRsv."Ni¤os Reembolsados"  - lrDetEco."Free Ni¤os") > 0;
          // IF lrRsv.Ni¤os - lrRsv."Ni¤os Reembolsados" <> 0 THEN BEGIN
          lwOK := (lrRsv.Ni¤os - lrDetEco."Free Ni¤os" - lrRsv."Ni¤os Reembolsados") > 0;
          IF lwOK THEN BEGIN
            lrImpsTMP."Tipo Persona" := rParPer."Codigo Ni¤o";
            IF NOT lrImpsTMP.FIND THEN
            BEGIN
              lrImpsTMP.INIT;
              lrImpsTMP."Cuenta contable"          := lwCuenta; //+$018
              lrImpsTMP."Cuenta exenta"            := lwCuentaExenta; //+$048
              lrImpsTMP.Zona                       := lrRsv."Zona Hotel"; //+$049
              lrImpsTMP."Grupo IVA Producto"       := _RetornaIVAProducto(lrImpsTMP.Excursion, lrImpsTMP.Dia); //+$049
              lrImpsTMP."% IVA"                    := _BuscaPorcentajeIVA(lrImpsTMP."Grupo IVA Producto"); //+$049
              lrImpsTMP."Usar impuestos incluidos" :=
                        (rTouroperador."Descuento sobre importes" = rTouroperador."Descuento sobre importes"::"Con impuestos");
              lrImpsTMP.INSERT;
            END;

            //-$033lwReembolsoRsvN := lrRsv.GetReembolso(rCustomer."Currency Code",2); // Ni¤os - $016

            //. Convertimos a la divisa del cliente de la factura
            //+$034
            //+$049 <
            lwImporteNi := lrDetEco."Ingreso ni¤os" - lrRsv."Importe reembolsado ni¤os";
            //+$049 >

            IF COPYSTR(lrRsv.Divisa, 1, 2) <> COPYSTR(rCustomer."Currency Code", 1, 2) THEN
              lwImporteNi     := rTipCam.ExchangeAmtFCYToFCY(lrRsv."Fecha cambio",
                                                             lrRsv.Divisa,
                                                             rCustomer."Currency Code",
                                                             lwImporteNi); //$004

            lwTotalFactura    += (lwImporteNi - lwCosteReservaNi); //+$018 //-$033
            lrImpsTMP.Importe += (lwImporteNi - lwCosteReservaNi); //+$018

            //+$017
            //-$033lwReembolsoRsvN := lrRsv.GetReembolsoExento(rCustomer."Currency Code", 2);
            //+$034
            IF COPYSTR(lrRsv.Divisa, 1, 2) <> COPYSTR(rCustomer."Currency Code", 1, 2) THEN
              lwImporteNi     := rTipCam.ExchangeAmtFCYToFCY(lrRsv."Fecha cambio",
                                                             lrRsv.Divisa,
                                                             rCustomer."Currency Code",
                                                             lrDetEco."Ingreso ni¤os exento")
            ELSE
              lwImporteNi := lrDetEco."Ingreso ni¤os exento";

            lrImpsTMP."Importe exento" += (lwImporteNi); //-$033
            //+$017

            lrImpsTMP.Plazas += (lrRsv.Ni¤os - lrDetEco."Free Ni¤os" - lrRsv."Ni¤os Reembolsados"); //+$033
            lrImpsTMP.MODIFY;
          END;

          //+$027
          IF rParAg."Facturar tickets x fecha venta" THEN
          BEGIN
            IF (lwFechaDesde < lrRsv."Fecha Venta") THEN
              lwFechaDesde    := lrRsv."Fecha Venta";
            IF lwFechaHasta > lrRsv."Fecha Venta"  THEN
              lwFechaHasta    := lrRsv."Fecha Venta";
          END
          ELSE
          BEGIN
            IF (lwFechaDesde < lrRsv."Fecha Excursion") OR (lrRsv."Fecha Excursion"=0D) THEN
              lwFechaDesde    := lrRsv."Fecha Excursion";
            IF lwFechaHasta > lrRsv."Fecha Excursion"  THEN
              lwFechaHasta    := lrRsv."Fecha Excursion";
          END;

          lwAcumCT += rTipCam.ExchangeAmtFCYToFCY(lrRsv."Fecha cambio",
                                                  lrRsv.Divisa,
                                                  '',
                                                  -lrRsv."Comision Touroperador"); //$001 //$004
          //-$003
          lwAcumCTDiv -= lrRsv."Comision Touroperador"; //+$070
        UNTIL lrRsv.NEXT = 0;
      END;
      //-002

      // $015 JPT 15/02/12 GOC-LP-11008 Modificar facturacion de excursiones para que no se cree el documento contable si el total es cero
      CLEAR(lwNoDoc);
      IF lwTotalFactura <> 0 THEN BEGIN
        // $020
        _CabeceraFacturaVenta(lrRsv, lrCabFact, lrCabInc, lwTotalFactura, lwFechaDesde, lwFechaHasta, lrRsv."Guia Venta",
                              lwNumLiquidacion);
        _LineaFacturaVenta(lrCabFact, lrImpsTMP);

        lrCabInc.GetImportes;
        lrCabInc.MODIFY;

        //+$065 <
        IF lrCabFact.GET(lrCabFact."Document Type", lrCabFact."No.") THEN
          lcRelease.RUN(lrCabFact);
        //+$065 >

        //+$072 <
        IF lrCabFact.GET(lrCabFact."Document Type", lrCabFact."No.") THEN
        BEGIN
          lrCabFact."Reason Code" := 'ATENNEA';
          lrCabFact.MODIFY;
        END;
        //+$072 >

        lwNoDoc := lrCabFact."No.";
      END
      ELSE
      BEGIN
        IF NOT CONFIRM(Text0013) THEN
          EXIT;
        lwNoDoc := Text0012;
        lwAcumCT := 0;
        lwAcumCTDiv := 0; //+$070
      END;

      // Generamos asiento FPR y marcamos las reservas
      IF lrRsv.FINDSET THEN BEGIN
        REPEAT
          //+$027
          //. Si estamos facturando reservas no confirmadas no generamos FPR
          IF NOT rParAg."Facturar tickets x fecha venta" THEN
            GeneraFPR(lrRsv.Delegacion, lrRsv."N§ Servicio", lrCabFact."No.", lrRsv.Oficina, FALSE);

          lrRsv2 := lrRsv;
          lrRsv2.VALIDATE("Num. Factura", lwNoDoc); //+$045
          lrRsv2.Facturada      := TRUE;
          lrRsv2.MODIFY;
        UNTIL lrRsv.NEXT = 0;
      END;

      // Asiento Comision Touroperador
      _MovComisionTO(lwAcumCT, lrCabFact, prRsv);

      // Traspaso a empresa comercializadora
      _TraspasarCOM(lrCabFact, prRsv);

      // Asiento Comision Touroperador comercializadora
      _ComisionComercializadora(lwAcumCTDiv, '', lrCabFact, prRsv); //+$070

      IF lwTotalFactura <> 0 THEN
        _ImprimirFactura(lrCabFact."No.");
    END;

    LOCAL PROCEDURE _CabeceraFacturaVenta@1100253004(prRsv@1100253000 : Record 7010162;VAR prCabFact@1100253001 : Record 36;VAR prCabInc@1100217003 : Record 7009908;pwTotalFactura@1100253002 : Decimal;pwFechaDesde@1100217001 : Date;pwFechaHasta@1100217002 : Date;pwGuia@1100217005 : Code[10];pwLiquidacion@1100217006 : Integer);
    VAR
      lwFecha@1100253003 : Date;
      lrTipoCambio@1100217000 : Record 330;
      lwTextoRegistro@1100217004 : Text[80];
      lwCli@1000000000 : Code[20];
    BEGIN
      // _CabeceraFacturaVenta

      CLEAR(prCabFact);

      IF pwTotalFactura >= 0 THEN
        prCabFact.VALIDATE("Document Type", prCabFact."Document Type"::Invoice)
      ELSE
        prCabFact.VALIDATE("Document Type", prCabFact."Document Type"::"Credit Memo");

      //-$057prCabFact.VALIDATE("No. Series" , rTarExc."Codigo Serie");
      prCabFact.VALIDATE("No. Series" , rSerie."Serie facturas"); //+$057

      //. Codigo temporal, recuerda que hay codigo en la tabla 36, en la validacion de comprobante fiscal
      IF wNumFactura <> '' THEN
        prCabFact."No." := wNumFactura;

      _CheckReasonCode;
      prCabFact.INSERT(TRUE);

      //. Codigo temporal, recuerda que hay codigo en la tabla 36, en la validacion de comprobante fiscal
      IF wComprobante <> '' THEN
        prCabFact."Comprobante Fiscal" := wComprobante;

      //-$057prCabFact.VALIDATE("Posting No. Series"  , rTarExc."Codigo Serie");
      prCabFact.VALIDATE("Posting No. Series"  , rSerie."Serie facturas"); //+$057

      //-$004CLEAR(lwFecha);
      //-$004CASE rParAg."Fecha registro agencia" OF
      //-$004   rParAg."Fecha registro agencia"::"Fecha servicio" : lwFecha:= prRsv."Fecha Excursion";
      //-$004   rParAg."Fecha registro agencia"::"Fecha emision"  : lwFecha:= TODAY;
      //-$004END;
      //-$004prCabFact.VALIDATE("Posting Date", lwFecha);

      //-$007prCabFact.VALIDATE("Posting Date"             , prRsv."Fecha cambio");
      //-$008prCabFact.VALIDATE("Posting Date", TODAY); //+$007

      prCabFact.VALIDATE("Posting Date", WORKDATE); //+$008

      lwCli := rReprs."Cliente Facturacion";
      // +$068
      IF prRsv."Reserva a credito" THEN BEGIN
        lwCli := rCtaToDel."Cliente credito excursiones";
      END;

      prCabFact.VALIDATE("Sell-to Customer No.", lwCli);

      // $022 <
      // prCabFact.VALIDATE("Shortcut Dimension 1 Code", rParAg.Delegacion);
      prCabFact.VALIDATE("Shortcut Dimension 1 Code", wCodDim);
      // $022 >
      prCabFact.VALIDATE("Shortcut Dimension 2 Code", prRsv.TourOperador);

      //. La marca de precios IVA incluidos siempre debe estar a TRUE por el modo en que se calculan las reservas
      //.prCabFact.VALIDATE("Prices Including VAT"     , rTarExc."Impuestos Incluidos");

      prCabFact.VALIDATE("Prices Including VAT", TRUE);

      //+$032 <
      IF rDatIns."Empresa Real" = rDatIns."Empresa Real"::GOC THEN
      BEGIN
        //+$007
        IF prCabFact."Currency Code" <> '' THEN
          prCabFact.VALIDATE("Currency Factor", 1 / prRsv."Tipo cambio"); //$009
        //+$007
      END
      ELSE
      BEGIN
        IF prCabFact."Currency Code" <> '' THEN
          prCabFact.VALIDATE("Currency Factor", lrTipoCambio.ExchangeRate(prCabFact."Posting Date", prCabFact."Currency Code")); //$034
      END;
      //+$032 >

      //+$035 <
      //+$042 <
      IF (pwLiquidacion <> 0) AND (NOT rReprs."Trabaja a credito") THEN
        lwTextoRegistro := STRSUBSTNO(Text0021, pwLiquidacion, pwGuia)
      ELSE
        lwTextoRegistro := STRSUBSTNO(Text0020, pwFechaDesde, pwFechaHasta, prRsv.TourOperador);
      prCabFact."Posting Description" := lwTextoRegistro;
      //+$042 >
      //+$035 >

      prCabFact.MODIFY(TRUE);

      // $020 JPT 25/07/12 Introducimos la cabecera de factura Incoming
      CLEAR(prCabInc);
      prCabInc.SetInf(prCabFact);
      prCabInc.Modulo           := prCabInc.Modulo::Excursion;
      prCabInc."Fecha servicio" := pwFechaDesde;
      prCabInc."Periodo Desde"  := pwFechaDesde;
      prCabInc."Periodo Hasta"  := pwFechaHasta;
      prCabInc.Touroperador     := prRsv.TourOperador;
      prCabInc."Fecha creacion" := CURRENTDATETIME; //+$044
      prCabInc.INSERT;
    END;

    LOCAL PROCEDURE _LineaFacturaVenta@1100253011(prCabFact@1100253001 : Record 36;VAR prImpTMP@1100253003 : TEMPORARY Record 88000);
    VAR
      lrLinVta@1100253002 : Record 37;
      lwNumLin@1100253000 : Integer;
      lrProd@1100253004 : Record 7009710;
      lrLinInc@1100217000 : Record 7009909;
      lwDescripcion@1100217001 : Text[80];
    BEGIN
      // _LineaFacturaVenta

      //+002
      lwNumLin := 0;
      CLEAR(prImpTMP);
      IF prImpTMP.FINDSET THEN BEGIN
        REPEAT
          lwNumLin += 10000;
          CLEAR(lrLinVta);
          lrLinVta."Document Type" := prCabFact."Document Type";
          lrLinVta."Document No."  := prCabFact."No.";
          lrLinVta."Line No."      := lwNumLin;
          lrLinVta.VALIDATE("Sell-to Customer No." , prCabFact."Sell-to Customer No.");
          lrLinVta.INSERT(TRUE);

          lrLinVta.VALIDATE(Type   , lrLinVta.Type::"G/L Account");

          //-$018lrLinVta.VALIDATE("No."  , rCtaToDel."Cta. venta excursiones");
          lrLinVta.VALIDATE("No."  , prImpTMP."Cuenta contable"); //+$018

          lrLinVta.VALIDATE("VAT Prod. Posting Group", prImpTMP."Grupo IVA Producto");

          IF NOT lrProd.GET(prImpTMP.Excursion) THEN
            CLEAR(lrProd);

      //-$003lrLinVta.Description := COPYSTR(FORMAT(prImpTMP.Dia) + ' - ' + lrProd.Descripcion, 1, MAXSTRLEN(lrLinVta."Description 2"));

          lwDescripcion := STRSUBSTNO('#1###### #2################## #3### #4########',
                                      prImpTMP.Dia, prImpTMP.Excursion, prImpTMP.Plazas, prImpTMP."Tipo Persona"); //+$003

          lrLinVta.Description := COPYSTR(lwDescripcion,1,50);

          lrLinVta.VALIDATE(Quantity, 1);
          lrLinVta.VALIDATE("Unit Price", prImpTMP.Importe - prImpTMP."Importe exento"); //+$017

          //+$049 <
          IF prImpTMP."Descuento Touroperador" <> 0 THEN
          BEGIN
            IF prImpTMP."Usar impuestos incluidos" THEN
              lrLinVta.VALIDATE("Line Discount %", prImpTMP."Descuento Touroperador")
            ELSE
              lrLinVta.VALIDATE("Line Discount Amount", _CalculaComisionLinea(prImpTMP, FALSE));
          END;
          //+$049 >

          //+$012
          //. Rellenar los campos Amount y "Amount Including VAT" para que la cabecera de factura muestre
          //. la totalizacion de esos campos.

          IF prCabFact."Prices Including VAT" THEN BEGIN
            lrLinVta."Amount Including VAT" := lrLinVta."Line Amount";
            lrLinVta.Amount                 := ROUND(lrLinVta."Line Amount" / (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
          END
          ELSE BEGIN
            lrLinVta.Amount                 := lrLinVta."Line Amount";
            lrLinVta."Amount Including VAT" := ROUND(lrLinVta."Line Amount" * (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
          END;
          lrLinVta.MODIFY;
          //+$012

          // $020 Crea la linea de factura Incoming
          CLEAR(lrLinInc);
          lrLinInc.Concepto        := prImpTMP.Excursion;
          lrLinInc.Fecha           := prImpTMP.Dia;
          lrLinInc.Personas        := prImpTMP.Plazas;
          lrLinInc."Tipo Pax"      := prImpTMP."Tipo Persona";
          lrLinInc.Zona            := prImpTMP.Zona; //+$049
          lrLinInc.SetInf(lrLinVta, prCabFact."Prices Including VAT");
          lrLinInc.INSERT;

          //+$017
          //. Crear una segunda linea de factura por el importe EXENTO
          IF prImpTMP."Importe exento" <> 0 THEN
          BEGIN
            lwNumLin += 10000;
            lrLinVta."Line No."      := lwNumLin;
            lrLinVta.VALIDATE("Sell-to Customer No." , prCabFact."Sell-to Customer No.");
            lrLinVta.INSERT(TRUE);

            lrLinVta.VALIDATE("No."                    , prImpTMP."Cuenta exenta"); //+$048
            lrLinVta.VALIDATE(Description              , lwDescripcion); //+$048
            lrLinVta.VALIDATE("VAT Prod. Posting Group", rParAg."Grupo Registro IVA Prod.Exento");
            lrLinVta.VALIDATE("Unit Price"             , prImpTMP."Importe exento"); //+$017

            //+$049 <
            IF prImpTMP."Descuento Touroperador" <> 0 THEN
            BEGIN
              IF prImpTMP."Usar impuestos incluidos" THEN
                lrLinVta.VALIDATE("Line Discount %", prImpTMP."Descuento Touroperador")
              ELSE
                lrLinVta.VALIDATE("Line Discount Amount", _CalculaComisionLinea(prImpTMP, TRUE));
            END;
            //+$049 >

            IF prCabFact."Prices Including VAT" THEN BEGIN
              lrLinVta."Amount Including VAT" := lrLinVta."Line Amount";
              lrLinVta.Amount                 := ROUND(lrLinVta."Line Amount" / (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
            END
            ELSE BEGIN
              lrLinVta.Amount                 := lrLinVta."Line Amount";
              lrLinVta."Amount Including VAT" := ROUND(lrLinVta."Line Amount" * (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
            END;
            lrLinVta.MODIFY;

            // $020 Crea la linea de factura Incoming
            CLEAR(lrLinInc);
            lrLinInc.Concepto        := prImpTMP.Excursion;
            lrLinInc.Subconcepto     := Text0015;
            lrLinInc.Fecha           := prImpTMP.Dia;
            lrLinInc.Personas        := prImpTMP.Plazas;
            lrLinInc."Tipo Pax"      := prImpTMP."Tipo Persona";
            lrLinInc.Zona            := prImpTMP.Zona; //+$049
            lrLinInc.SetInf(lrLinVta, prCabFact."Prices Including VAT");
            lrLinInc.INSERT;
          END;
          //+$017

        UNTIL prImpTMP.NEXT = 0;
      END;
      //-002
    END;

    LOCAL PROCEDURE _CalculaComisionLinea@1100217013(VAR prBufferTMP@1100217001 : TEMPORARY Record 88000;pwLineaExenta@1100217002 : Boolean) : Decimal;
    VAR
      lwImporte@1100217000 : Decimal;
    BEGIN
      // _CalculaComisionExenta

      //. Esta funcion calcula la comision de la linea de factura
      //. Solo se aplica si estamos trabajando con los importes sin impuestos
      //. Para obtener la base de la comision quitaremos los impuestos generales del importe de la linea

      IF pwLineaExenta THEN
        lwImporte := ROUND(prBufferTMP."Importe exento" / prBufferTMP."% IVA")
      ELSE
        lwImporte := ROUND((prBufferTMP.Importe - prBufferTMP."Importe exento") / prBufferTMP."% IVA");

      //. Una vez obtenida la base aplicamos la comision

      lwImporte := ROUND(lwImporte * prBufferTMP."Descuento Touroperador" / 100);

      //. Retornamos esta comision para utilizarla como Importe descuento linea
      EXIT(lwImporte);
    END;

    LOCAL PROCEDURE _ImprimirFactura@1100253001(pwNoFact@1100253000 : Code[20]);
    VAR
      lrCab@1100217000 : Record 7009908;
    BEGIN
      // ImprimirFactura

      IF pwNoFact = '' THEN
        ERROR(Text0004);

      // $025 JPT 03/09/12 En GOC de momento imprimimos la factura estandard
      rDatIns.FINDFIRST;
      IF rDatIns."Empresa Real" = rDatIns."Empresa Real"::GOC THEN BEGIN
        ImprimirFacturaStd(pwNoFact);
        EXIT;
      END;

      //$005
      rParAg.FINDFIRST;
      rParAg.TESTFIELD("Factura Venta Excursion");

      CLEAR(lrCab);
      lrCab.SETRANGE("No.", pwNoFact);
      IF lrCab.FINDFIRST THEN
        REPORT.RUN(rParAg."Factura Venta Excursion", TRUE, TRUE, lrCab);
    END;

    PROCEDURE ImprimirFacturaStd@1100217001(pwNoFact@1100253000 : Code[20]);
    VAR
      lrSalesHead@1100253002 : Record 112;
      lrSalesCmHead@1100253003 : Record 114;
      lrCabVta@1100253001 : Record 36;
    BEGIN
      // ImprimirFacturaStd
      // Utiliza la factura registrada

      IF pwNoFact = '' THEN
        ERROR(Text0004);

      //$005
      rParAg.FINDFIRST;

      CLEAR(lrSalesHead); // Historico factura
      lrSalesHead.SETRANGE("No.", pwNoFact);
      IF lrSalesHead.FINDFIRST THEN BEGIN
        REPORT.RUN(rParAg."Factura Venta Exc registrada", TRUE, TRUE, lrSalesHead);
      END
      ELSE BEGIN
        CLEAR(lrSalesCmHead); // Historico abono
        lrSalesCmHead.SETRANGE("No.", pwNoFact);
        IF lrSalesCmHead.FINDFIRST THEN BEGIN
          REPORT.RUN(rParAg."Abono Venta Exc registrado", TRUE, TRUE, lrSalesCmHead);
        END
        ELSE BEGIN
          CLEAR(lrCabVta); // Cab Vta.
          lrCabVta.SETRANGE("No.", pwNoFact);
          IF lrCabVta.FINDFIRST THEN BEGIN
            REPORT.RUN(rParAg."Factura Venta Excursion", TRUE, TRUE, lrCabVta);
          END;
        END;
      END;
    END;

    PROCEDURE GeneraFPR@1100253002(pwDelegacion@1100217002 : Code[10];pwServicio@1100217003 : Integer;pwFactura@1100253007 : Code[20];pwOficina@1100217004 : Code[10];pwRetrocederAsiento@1100217005 : Boolean);
    VAR
      lrCI@1100253001 : Record 7010166;
      lrCI2@1100253010 : Record 7010166;
      lrTmpPrv@1100253003 : TEMPORARY Record 7010166;
      lrProv@1100253002 : Record 23;
      lrGCP@1100253004 : Record 93;
      lrCtaToDel@1100253013 : Record 7009705;
      lrContTO@1100217001 : Record 7010142;
      lcSincroCOM@1000000000 : Codeunit 7009793;
      lwFecha@1100253005 : Date;
      lwImp@1100253006 : Decimal;
      lwAsient@1100253008 : Integer;
      lwDoc@1100253009 : Code[20];
      lwDescrpt@1100253011 : Text[80];
      LText01@1100253012 : TextConst 'ENU=IBR_;ESP=FPR_';
    BEGIN
      // GeneraFPR

      rParAg.FINDFIRST;

      // $022
      IF wCodDim = '' THEN
      BEGIN
        IF rParAg."Oficina Excursion Obligatoria" THEN
          wCodDim := pwOficina
        ELSE
        BEGIN
          IF pwOficina <> '' THEN
            wCodDim := pwOficina
          ELSE
          BEGIN
            COMMIT; //+$051
            wCodDim := SeleccionarDepartamento;
          END;

          IF wCodDim = '' THEN
            wCodDim := pwDelegacion;
        END;
      END;

      wDiarioGeneral := rParAg.GetLibroDiarioGeneral;

      // Se Genera el FPR de todo el servicio no solo de la reserva y por todos los conceptos

      CLEAR(lwDoc);
      IF (rParAg."Facturar tickets x fecha venta") OR (pwRetrocederAsiento) THEN
        lwDoc := STRSUBSTNO('%1%2', LText01, pwServicio)
      ELSE
        lwDoc := STRSUBSTNO('%1%2', LText01, pwFactura);

      CLEAR(lrCI); // Utilizamos la clave primaria
      lrCI.SETRANGE (Delegacion     , pwDelegacion);
      lrCI.SETRANGE ("N§ Servicio"  , pwServicio);
      IF pwRetrocederAsiento THEN
        lrCI.SETRANGE("Pendiente FPR", FALSE)
      ELSE
        lrCI.SETRANGE ("Pendiente FPR", TRUE);

      // Utilizamos un temporal para acumular por proveedor y touroperador "lrTmpPrv"
      IF lrCI.FINDSET THEN BEGIN
        REPEAT
          lrCI.TESTFIELD(Proveedor);
          CLEAR(lrTmpPrv);
          lrTmpPrv.SETRANGE(Proveedor    , lrCI.Proveedor);
          lrTmpPrv.SETRANGE(TourOperador , lrCI.TourOperador);
          IF NOT lrTmpPrv.FINDSET THEN BEGIN
            CLEAR(lrTmpPrv);
            lrTmpPrv.Delegacion    := lrCI.Delegacion;     //PK
            lrTmpPrv."N§ Servicio" := lrCI."N§ Servicio";  //PK
            lrTmpPrv."Orden Linea" := lrCI."Orden Linea";  //PK
            lrTmpPrv.Proveedor     := lrCI.Proveedor;
            lrTmpPrv.TourOperador  := lrCI.TourOperador;
            lrTmpPrv.Fecha         := lrCI.Fecha;
            lrTmpPrv.INSERT;
          END;

          //-011lrTmpPrv."Importe sin Impuesto" += lrCI."Importe sin Impuesto";
          //-011lrTmpPrv."Importe con Impuesto" += lrCI."Importe sin Impuesto";
          lrTmpPrv."Importe sin Impuesto" -= lrCI."Importe sin impuestos (DL)"; //+011
          lrTmpPrv."Importe con Impuesto" -= lrCI."Importe con impuestos (DL)"; //+011

          lrTmpPrv.Fecha := lrCI.Fecha;
          lrTmpPrv.MODIFY;

          // Marcamos la lineas de Coste-Ingreso
          lrCI2 := lrCI;
          lrCI2."Pendiente FPR" := FALSE;
          IF pwFactura <> '' THEN
            lrCI2."Factura FPR"   := pwFactura
          ELSE
            lrCI2."Factura FPR"   := FORMAT(pwServicio);
          lrCI2.MODIFY;
        UNTIL lrCI.NEXT = 0;
      END
      ELSE
        EXIT; // Salimos si no hay nada que pelar


      // Empezamos con el temporal generando un asiento por Proveedor y Touroperador
      lrTmpPrv.RESET; //+$046
      IF lrTmpPrv.FINDSET THEN BEGIN
        REPEAT
          // Buscamos las cuentas por touroperador y delegacion
          CLEAR(lrCtaToDel);
          lrCtaToDel.GET(lrTmpPrv.Delegacion, lrTmpPrv.TourOperador);
          lrCtaToDel.TESTFIELD("Cta. compra excursiones");

          CLEAR(lrProv);
          lrProv.GET(lrTmpPrv.Proveedor);
          lrProv.TESTFIELD("Vendor Posting Group");
          CLEAR(lrGCP);
          lrGCP.GET(lrProv."Vendor Posting Group");
          lrGCP.TESTFIELD("Cta. FPR Excursiones");

          IF rParAg."Registrar FPR con impuestos" THEN
            lwImp := lrTmpPrv."Importe con Impuesto"
          ELSE
            lwImp := lrTmpPrv."Importe sin Impuesto";

          //. Los importes de coste est n en negativo, los giramos
          //. Salvo que estemos retrocediendo el asiento
          IF pwRetrocederAsiento THEN //+$029
          BEGIN
            lwImp := -lwImp;
            lwDescrpt := Text0018 + ' ' + lrProv.Name;
          END
          ELSE
            lwDescrpt := Text0005 + ' ' + lrProv.Name;

          // Numero de asiento
          lwAsient := _LastTrsc(wDiarioGeneral , Text0006) + 1;

          // Debe
          GenerarAsiento(0, 0, lrCtaToDel."Cta. compra excursiones", lwImp, wCodDim,
                         lrTmpPrv.TourOperador, lwDoc, lrTmpPrv.Fecha, lwAsient, lwDescrpt, '', lrProv."No."); //+$030
          // Haber
          GenerarAsiento(1, 0, lrGCP."Cta. FPR Excursiones", lwImp, wCodDim,
                         lrTmpPrv.TourOperador, lwDoc, lrTmpPrv.Fecha, lwAsient, lwDescrpt, '', lrProv."No."); //+$030

          //+$073 <
          IF rParAg."Registrar costes en comerciali" THEN
            lcSincroCOM.SincronizaDiario(wDiarioGeneral, Text0006, lwDoc, lrTmpPrv.TourOperador);
          //+$073 >
        UNTIL lrTmpPrv.NEXT = 0;
      END;
    END;

    PROCEDURE GenerarAsiento@22(pwTipo@1103355000 : 'Debe,Haber';pwTipoCta@1100253001 : 'Cuenta,Cliente,Proveedor';pwCta@1103355001 : Code[10];pwImp@1103355002 : Decimal;pwDim1@1103355004 : Code[20];pwDim2@1100253005 : Code[20];pwDoc@1103355006 : Code[20];pwFecha@1100253003 : Date;pwAsient@1100253002 : Integer;pwDescrpt@1100253004 : Text[80];pwDiv@1100253006 : Code[10];pwProveedor@1100217000 : Code[20]);
    VAR
      lrLind@1103355008 : Record 81;
      lrSec@1103355010 : Record 232;
      LTEXT0002@1100253000 : TextConst 'ENU=Excrusions diary;ESP=Diario Excursiones';
      lrTO@1000000000 : Record 7009717;
    BEGIN
      // _GenerarAsiento

      IF pwImp = 0 THEN
        EXIT;

      CLEAR(rParAg);
      rParAg.FINDFIRST;
      wDiarioGeneral := rParAg.GetLibroDiarioGeneral;

      CLEAR(lrSec);
      IF NOT lrSec.GET(wDiarioGeneral, Text0006) THEN BEGIN
        lrSec."Journal Template Name" := wDiarioGeneral;
        lrSec.Name                    := Text0006;
        lrSec.Description             := LTEXT0002;
        lrSec.INSERT;
      END;

      // Si el importe es negativo giramos el asiento
      IF pwImp < 0 THEN BEGIN
        pwImp := -pwImp;
        pwTipo := ABS(pwTipo - 1); // Debe sera Haber y viceversa.
      END;

      // Lineas de diario
      CLEAR(lrLind);
      lrLind.VALIDATE("Line No."                 , _LastGLLine(wDiarioGeneral , Text0006) + 1);
      lrLind.VALIDATE("Journal Template Name"    , wDiarioGeneral);
      lrLind.VALIDATE("Journal Batch Name"       , Text0006);
      lrLind.VALIDATE("Transaction No."          , pwAsient);
      lrLind.VALIDATE("Document No."             , pwDoc);
      lrLind.VALIDATE("Posting Date"             , pwFecha);
      lrLind.VALIDATE("Account Type"             , pwTipoCta);
      lrLind.VALIDATE("Account No."              , pwCta);
      lrLind.VALIDATE("Shortcut Dimension 1 Code", pwDim1);

      //+$075 <
      lrTO.GET(pwDim2);
      IF lrTO."Codigo en comercializadora" <> '' THEN
        lrLind.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
      ELSE
        lrLind.VALIDATE("Shortcut Dimension 2 Code", pwDim2);
      //+$075 >

      lrLind.VALIDATE(Description                , pwDescrpt);

      //. Forzamos que la informacion de IVA este en blanco
      lrLind."Gen. Posting Type"        := 0;
      lrLind."VAT Bus. Posting Group"   := '';
      lrLind."VAT Prod. Posting Group"  := '';
      lrLind."Gen. Bus. Posting Group"  := '';
      lrLind."Gen. Prod. Posting Group" := '';

      lrLind.VALIDATE("Currency Code", pwDiv); //$006

      // $021 {
      {
      CASE pwTipo OF
        pwTipo::Debe : lrLind.VALIDATE("Debit Amount" , pwImp);
        pwTipo::Haber: lrLind.VALIDATE("Credit Amount", pwImp);
      END;
      }

      IF pwTipo = pwTipo::Haber THEN
        pwImp := -pwImp;
      lrLind.VALIDATE(Amount , pwImp);
      // $021}

      //+$030 <
      IF pwProveedor <> '' THEN
      BEGIN
        lrLind."Source Type" := lrLind."Source Type"::Vendor;
        lrLind."Source No."  := pwProveedor;
      END;
      //+$030 >

      lrLind."System-Created Entry" := TRUE; //+$047
      lrLind."Source Code"   := rParAg.GetSourceCode(lrLind."Journal Template Name"); //+$066
      lrLind.INSERT(TRUE);
    END;

    LOCAL PROCEDURE _LastGLLine@1100253021(pwLibroDiario@1100253002 : Code[10];pwSeccion@1100253001 : Code[10]) : Integer;
    VAR
      lrLin@1100253000 : Record 81;
    BEGIN
      // _LastGLLine

      CLEAR(lrLin);
      lrLin.SETRANGE("Journal Template Name", pwLibroDiario);
      lrLin.SETRANGE("Journal Batch Name"   , pwSeccion);
      IF lrLin.FINDLAST THEN
        EXIT(lrLin."Line No.")
    END;

    LOCAL PROCEDURE _LastTrsc@1100253025(pwLibroDiario@1100253002 : Code[10];pwSeccion@1100253001 : Code[10]) : Integer;
    VAR
      lrLin@1100253000 : Record 81;
    BEGIN
      // _LastTrsc
      // Devuelve el ultimo asiento del diario

      CLEAR(lrLin);
      //-$052lrLin.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Transaction No.");
      lrLin.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Transaction No."); //+$052
      lrLin.SETRANGE("Journal Template Name", pwLibroDiario);
      lrLin.SETRANGE("Journal Batch Name"   , pwSeccion);
      IF lrLin.FINDLAST THEN
        EXIT(lrLin."Transaction No.");
    END;

    LOCAL PROCEDURE _MovComisionTO@1100253010(pwImp@1100253001 : Decimal;prCabVta@1100253006 : Record 36;prRsv@1000000001 : Record 7010162);
    VAR
      lwDoc@1100253002 : Code[20];
      lwDescrpt@1100253004 : Text[80];
      lwFecha@1100253000 : Date;
      lwAsient@1100253003 : Integer;
      lwDim1@1100253005 : Code[20];
      lwDim2@1100253007 : Code[20];
      lText01@1100253008 : TextConst 'ENU=CTO_;ESP=CTO_';
      lwImp@1100253009 : Decimal;
      lwCli@1000000000 : Code[20];
    BEGIN
      // _MovComisionTO

      //. @pwImp   , Importe de la comision del touroperador, viene en expresado Divisa Local
      //. @prCabVta, Registro de la factura asociada a la comision

      IF pwImp = 0 THEN
        EXIT;

      //+$014
      //-$053IF rReprs."Cliente Facturacion" = rCtaToDel."Cliente Comisiones TO" THEN
      IF NOT rTouroperador."Crear asiento comision" THEN //+$053
        EXIT;
      //+$014

      lwFecha   := prCabVta."Posting Date";
      lwDim1    := prCabVta."Shortcut Dimension 1 Code";
      lwDim2    := prCabVta."Shortcut Dimension 2 Code";
      lwAsient  := _LastTrsc(wDiarioGeneral , Text0006) + 1;
      lwDescrpt := Text0010 + prCabVta."No.";
      lwDoc     := COPYSTR(lText01 + prCabVta."No.",1,20);

      lwImp := rTipCam.ExchangeAmtFCYToFCY(lwFecha,
                                           '',
                                           rCustomer."Currency Code",
                                           pwImp); //$006

      lwCli := rReprs."Cliente Facturacion";
      // +$068
      IF prRsv."Reserva a credito" THEN BEGIN
        IF rCtaToDel."Cliente credito excursiones" <> '' THEN
          lwCli := rCtaToDel."Cliente credito excursiones";
      END;

      // Debe
      GenerarAsiento(0, 1, lwCli, lwImp, lwDim1,
                     lwDim2, lwDoc, lwFecha, lwAsient, lwDescrpt, rCustomer."Currency Code", ''); //+$030

      lwImp := rTipCam.ExchangeAmtFCYToFCY(lwFecha,
                                           '',
                                           rCustomerComision."Currency Code",
                                           pwImp); //$006

      // Haber
      GenerarAsiento(1, 1, rCtaToDel."Cliente Comisiones TO", lwImp, lwDim1,
                     lwDim2, lwDoc, lwFecha, lwAsient, lwDescrpt, rCustomerComision."Currency Code", ''); //+$030
    END;

    LOCAL PROCEDURE _RetornaIVAProducto@1100253003(pwExcursion@1100253000 : Code[10];pwDia@1100253001 : Date) : Code[10];
    VAR
      lrTar@1100253002 : Record 7010147;
    BEGIN
      // _RetornaIVAProducto

      lrTar.RESET;
      lrTar.SETRANGE (Excursion      , pwExcursion);
      lrTar.SETFILTER("Fecha Inicio", '<=%1', pwDia);
      lrTar.SETFILTER("Fecha Final" , '>=%1', pwDia);
      lrTar.FINDFIRST;

      lrTar.TESTFIELD("Gr. Registro IVA Producto");
      EXIT(lrTar."Gr. Registro IVA Producto");
    END;

    LOCAL PROCEDURE _BuscaPorcentajeIVA@1100217011(pwIVAProducto@1100217000 : Code[10]) : Decimal;
    VAR
      lrVATSetup@1100217001 : Record 325;
    BEGIN
      // _BuscaPorcentajeIVA

      // Retornamos el valor que nos servira para obtener la base del impuesto

      lrVATSetup.GET(rCustomer."VAT Bus. Posting Group", pwIVAProducto);
      EXIT( 1 + ROUND(lrVATSetup."VAT+EC %" / 100) );
    END;

    LOCAL PROCEDURE _ProrrateaCoste@1100253005(prRsv@1100253000 : Record 7010162;pwTipoImporte@1100253001 : 'Adultos,Ni¤os') : Decimal;
    VAR
      lrCoste@1100253002 : Record 7010166;
      lrServicio@1100253004 : Record 7010163;
      lwCosteReserva@1100253003 : Decimal;
    BEGIN
      // _ProrrateaCoste

      IF NOT lrServicio.GET(prRsv.Delegacion, prRsv."N§ Servicio") THEN
        EXIT;
      lrServicio.CALCFIELDS("N§ Adultos", "N§ Ni¤os");

      lwCosteReserva := 0;

      lrCoste.RESET;
      lrCoste.SETRANGE(Delegacion   , prRsv.Delegacion);
      lrCoste.SETRANGE("N§ Servicio", prRsv."N§ Servicio");
      lrCoste.SETRANGE(Concepto     , 'EXCC');
      lrCoste.SETRANGE(TourOperador , prRsv.TourOperador);
      IF pwTipoImporte = pwTipoImporte::Adultos THEN
        lrCoste.SETRANGE("Tipo Pax", rParPer."Codigo Adulto")
      ELSE
        lrCoste.SETRANGE("Tipo Pax", rParPer."Codigo Ni¤o");
      IF lrCoste.FINDSET THEN
      BEGIN
        REPEAT
          lwCosteReserva += (-1) * lrCoste."Importe con Impuesto";
        UNTIL lrCoste.NEXT = 0;

        IF pwTipoImporte = pwTipoImporte::Adultos THEN
        BEGIN
          IF (prRsv.Adultos - prRsv."Venta - Invitados Adultos") <> 0 THEN
          BEGIN
            lwCosteReserva := ROUND(lwCosteReserva / lrServicio."N§ Adultos");
            lwCosteReserva := lwCosteReserva * (prRsv.Adultos - prRsv."Venta - Invitados Adultos");
          END
          ELSE
            lwCosteReserva := 0;
        END
        ELSE
        BEGIN
          IF (prRsv.Ni¤os - prRsv."Venta - Invitados ni¤os") <> 0 THEN
          BEGIN
            lwCosteReserva := ROUND(lwCosteReserva / lrServicio."N§ Ni¤os");
            lwCosteReserva := lwCosteReserva * (prRsv.Ni¤os - prRsv."Venta - Invitados ni¤os");
          END
          ELSE
            lwCosteReserva := 0;
        END;

        IF lwCosteReserva <> 0 THEN
          lwCosteReserva := rTipCam.ExchangeAmtFCYToFCY(prRsv."Fecha cambio",
                                                        lrCoste."Cod. divisa",
                                                        rCustomer."Currency Code",
                                                        lwCosteReserva);
        EXIT(lwCosteReserva);
      END;
    END;

    PROCEDURE DeshacerPrefactura@1100217000(prRsv@1100217000 : Record 7010162);
    VAR
      lrRsv@1100217001 : Record 7010162;
      lrRsv2@1100217002 : Record 7010162;
    BEGIN
      // DeshacerPrefactura

      IF prRsv."Num. Prefactura" = '' THEN
        EXIT;

      IF prRsv."Num. Factura" <> '' THEN
        ERROR(Text0008, prRsv."N§ Reserva");

      IF NOT CONFIRM(Text0014, FALSE, prRsv."Num. Prefactura") THEN
        EXIT;

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("Num. Prefactura");
      lrRsv.SETRANGE("Num. Prefactura", prRsv."Num. Prefactura");
      IF lrRsv.FINDSET(TRUE) THEN
      //+$045 <
      BEGIN
        REPEAT
          lrRsv2 := lrRsv;
          lrRsv2.VALIDATE("Num. Prefactura", '');
          lrRsv2.MODIFY;
        UNTIL lrRsv.NEXT = 0;
      END;
      //+$045 >
      //-$045lrRsv.MODIFYALL("Num. Prefactura", '');
    END;

    PROCEDURE AbonarReserva@1100217004(prRsv@1100217000 : Record 7010162;prReemb@1000000000 : Record 7010266);
    VAR
      lrCabVta@1100217001 : Record 36;
      lrCabInc@1100217002 : Record 7009908;
      lrContTO@1100217003 : Record 7010142;
      lwComision@1100217004 : Decimal;
      lcRelease@1000000001 : Codeunit 414;
    BEGIN
      // AbonarReserva

      //. Comprobamos las tablas de configuracion
      _ComprobarFicheros(prRsv, lrContTO);

      //. Crear la cabecera del abono de venta
      _CabeceraAbonoVenta(prRsv, lrCabVta, lrCabInc);

      //. Crear las lineas de abono de venta
      _LineaAbonoVenta(prRsv, lrCabVta, lrContTO);

      //. Totalizamos importes en la cabecera de factura de incoming
      lrCabInc.GetImportes;
      lrCabInc.MODIFY;

      //+$065 <
      IF lrCabVta.GET(lrCabVta."Document Type", lrCabVta."No.") THEN
        lcRelease.RUN(lrCabVta);
      //+$065 >

      //+$072 <
      IF lrCabVta.GET(lrCabVta."Document Type", lrCabVta."No.") THEN
      BEGIN
        lrCabVta."Reason Code" := 'ATENNEA';
        lrCabVta.MODIFY;
      END;
      //+$072 >

      //. Aplicamos la comision del touroperador
      lwComision := rTipCam.ExchangeAmtFCYToFCY(prRsv."Fecha cambio",
                                                prRsv.Divisa,
                                                '',
                                                prRsv."Comision Touroperador");

      IF rTouroperador."Crear asiento comision" THEN
        _MovComisionTO(lwComision, lrCabVta, prRsv);

      // Asiento Comision Touroperador comercializadora
      _ComisionComercializadora(-prReemb."Comision to reembolso", prRsv.Divisa, lrCabVta, prRsv);

      //. Guardamos el numero de reserva en la reserva
      prRsv.VALIDATE("Num. abono reembolso", lrCabVta."No."); //+$045
      prRsv.MODIFY;

      //+$064 <
      //. Guardamos el numero de abono en el registro de reembolso
      prReemb."Num. abono reembolso" := lrCabVta."No.";
      prReemb.MODIFY;
      //+$064 >

      // Traspaso a empresa comercializadora
      _TraspasarAbonoCOM(lrCabVta, prRsv, prReemb);

      //. Imprimir el abono que acabamos de crear
      _ImprimirFactura(lrCabVta."No.");
    END;

    LOCAL PROCEDURE _CabeceraAbonoVenta@1100217005(prRsv@1100217000 : Record 7010162;VAR prCabVta@1100217001 : Record 36;VAR prCabInc@1100217003 : Record 7009908);
    VAR
      lwTextoRegistro@1100217006 : Text[80];
      lrCont@1100217004 : Record 7010142;
      lrTipoCambio@1100217005 : Record 330;
      lwCli@1000000000 : Code[20];
    BEGIN
      // _CabeceraAbonoVenta

      //. Gestion de la dimension oficina/departamento
      IF rParAg."Oficina Excursion Obligatoria" THEN
        wCodDim := prRsv.Oficina
      ELSE
      BEGIN
        IF prRsv.Oficina <> '' THEN
          wCodDim := prRsv.Oficina
        ELSE
        BEGIN
          COMMIT;
          wCodDim := SeleccionarDepartamento;
        END;
        IF wCodDim = '' THEN
          wCodDim := rParAg.Delegacion;
      END;

      lwCli := rReprs."Cliente Facturacion";
      // +$068
      IF prRsv."Reserva a credito" THEN BEGIN
        IF rCtaToDel."Cliente credito excursiones" <> '' THEN
          lwCli := rCtaToDel."Cliente credito excursiones";
      END;

      //. Montar el texto de registro
      lwTextoRegistro := STRSUBSTNO(Text0017, prRsv."N§ Ticket", prRsv."Guia Venta");

      CLEAR(prCabVta);
      prCabVta.VALIDATE("Document Type", prCabVta."Document Type"::"Credit Memo");
      //-$057prCabVta.VALIDATE("No. Series"   , rSalesSetup."Credit Memo Nos.");
      prCabVta.VALIDATE("No. Series"   , rSerie."Serie abonos"); //+$057
      _CheckReasonCode;
      prCabVta.INSERT(TRUE);
      //-$057prCabVta.VALIDATE("Posting No. Series"       , rSalesSetup."Credit Memo Nos.");
      prCabVta.VALIDATE("Posting No. Series"       , rSerie."Serie abonos"); //+$057
      prCabVta.VALIDATE("Sell-to Customer No."     , lwCli);
      prCabVta.VALIDATE("Posting Date"             , WORKDATE);
      prCabVta.VALIDATE("Shortcut Dimension 1 Code", wCodDim);
      prCabVta.VALIDATE("Shortcut Dimension 2 Code", prRsv.TourOperador);
      prCabVta.VALIDATE("Posting Description"      , lwTextoRegistro);

      //. Este campo lo marcamos siempre a TRUE por el modo en que se calculan precios en este modulo
      prCabVta.VALIDATE("Prices Including VAT"    , TRUE);

      //+$032 <
      IF rDatIns."Empresa Real" = rDatIns."Empresa Real"::GOC THEN
      BEGIN
        IF prCabVta."Currency Code" <> '' THEN
          prCabVta.VALIDATE("Currency Factor", lrTipoCambio.ExchangeRate(prRsv."Fecha cambio", prRsv.Divisa));
      END
      ELSE
      BEGIN
        IF prCabVta."Currency Code" <> '' THEN
          prCabVta.VALIDATE("Currency Factor", lrTipoCambio.ExchangeRate(prCabVta."Posting Date", prCabVta."Currency Code"));
      END;
      //+$032 >

      prCabVta."Corrected Invoice No." := prRsv."Num. Factura";
      prCabVta.MODIFY(TRUE);

      // $020 JPT 25/07/12 Introducimos la cabecera de factura Incoming
      CLEAR(prCabInc);
      prCabInc.SetInf(prCabVta);
      prCabInc.Modulo := prCabInc.Modulo::Excursion;
      prCabInc."Fecha servicio" := prRsv."Fecha anulaci¢n/Reembolso";
      prCabInc."Periodo Desde"  := prRsv."Fecha anulaci¢n/Reembolso";
      prCabInc."Periodo Hasta"  := prRsv."Fecha anulaci¢n/Reembolso";
      prCabInc.Touroperador     := prRsv.TourOperador;
      prCabInc.INSERT;
    END;

    LOCAL PROCEDURE _LineaAbonoVenta@1100217006(prRsv@1100217000 : Record 7010162;prCabVta@1100217001 : Record 36;prContTO@1100217008 : Record 7010142);
    VAR
      lwCosteAd@1100217010 : Decimal;
      lwCosteNi@1100217011 : Decimal;
      lwImporteLinea@1100217009 : Decimal;
      lwImporteExento@1100217012 : Decimal;
      lwNumLin@1100217002 : Integer;
      lwPlazas@1100217006 : Integer;
      lwCuenta@1100217003 : Text[20];
      lwCuentaExenta@1100217013 : Text[20];
      lrDetEco@1100217004 : Record 7010245;
      lrLinVta@1100217005 : Record 37;
      lrLinInc@1100217007 : Record 7009909;
    BEGIN

      lwNumLin := 10000;

      _BuscaCuentaIngresos(prRsv, lwCuenta, lwCosteAd, lwCosteNi, 1, lwCuentaExenta); //+$040, +$048

      lrDetEco.GET(prRsv.Delegacion, prRsv."N§ Reserva");

      //. Creamos una linea de adultos
      lwPlazas := (prRsv.Adultos - lrDetEco."Free Adultos");
      IF lwPlazas <> 0 THEN
      BEGIN

        //. Calculamos los importes
        //-$049IF prContTO."No descontar en factura" THEN
        //-$049  lwImporteLinea := lrDetEco."Ingreso adultos"
        //-$049ELSE
        //-$049  lwImporteLinea := lrDetEco."Ingreso adultos" + prRsv."Comision Touroperador";
        lwImporteLinea := lrDetEco."Ingreso adultos"; //+$049

        IF COPYSTR(prRsv.Divisa, 1, 2) <> COPYSTR(rCustomer."Currency Code", 1, 2) THEN
          lwImporteLinea := rTipCam.ExchangeAmtFCYToFCY(prRsv."Fecha cambio",
                                                        prRsv.Divisa,
                                                        rCustomer."Currency Code",
                                                        lwImporteLinea);

        lwImporteLinea := (lwImporteLinea - lwCosteAd);

        //. Parte Exenta
        lwImporteExento := lrDetEco."Ingreso adultos exento";
        IF COPYSTR(prRsv.Divisa, 1, 2) <> COPYSTR(rCustomer."Currency Code", 1, 2) THEN
          lwImporteExento := rTipCam.ExchangeAmtFCYToFCY(prRsv."Fecha cambio",
                                                         prRsv.Divisa,
                                                         rCustomer."Currency Code",
                                                         lrDetEco."Ingreso adultos exento");

        //. Creamos la linea de factura
        CLEAR(lrLinVta);
        lrLinVta."Document Type" := prCabVta."Document Type";
        lrLinVta."Document No."  := prCabVta."No.";
        lrLinVta."Line No."      := lwNumLin;
        lrLinVta.VALIDATE("Sell-to Customer No." , prCabVta."Sell-to Customer No.");
        lrLinVta.INSERT(TRUE);

        lrLinVta.VALIDATE(Type                     , lrLinVta.Type::"G/L Account");
        lrLinVta.VALIDATE("No."                    , lwCuenta);
        lrLinVta.VALIDATE("VAT Prod. Posting Group", _RetornaIVAProducto(prRsv.Producto, prRsv."Fecha Excursion"));
        lrLinVta.VALIDATE(Description              , STRSUBSTNO('#1###### #2################## #3### #4########',
                                                                prRsv."Fecha Venta", prRsv.Producto,
                                                                lwPlazas, rParPer."Codigo Adulto"));
        //lrLinVta.VALIDATE(Description              , STRSUBSTNO(Text0017, prRsv."N§ Ticket"));
        lrLinVta.VALIDATE(Quantity                 , 1);
        lrLinVta.VALIDATE("Unit Price"             , lwImporteLinea - lwImporteExento);

        //. Rellenar los campos Amount y "Amount Including VAT" para que la cabecera de factura muestre
        //. la totalizacion de esos campos.

        IF prCabVta."Prices Including VAT" THEN BEGIN
          lrLinVta."Amount Including VAT" := lrLinVta."Line Amount";
          lrLinVta.Amount                 := ROUND(lrLinVta."Line Amount" / (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
        END
        ELSE BEGIN
          lrLinVta.Amount                 := lrLinVta."Line Amount";
          lrLinVta."Amount Including VAT" := ROUND(lrLinVta."Line Amount" * (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
        END;
        lrLinVta.MODIFY;

        //. Crea las lineas de factura Incoming
        CLEAR(lrLinInc);
        lrLinInc.Concepto        := prRsv.Producto;
        lrLinInc.Fecha           := prRsv."Fecha Excursion";
        lrLinInc.Personas        := lwPlazas;
        lrLinInc."Tipo Pax"      := rParPer."Codigo Adulto";
        lrLinInc.SetInf(lrLinVta, prCabVta."Prices Including VAT");
        lrLinInc.INSERT;

        //. Crear una segunda linea de factura por el importe exento
        IF lwImporteExento <> 0 THEN
        BEGIN
          lwNumLin += 10000;
          lrLinVta."Line No."      := lwNumLin;
          lrLinVta.VALIDATE("Sell-to Customer No.", prCabVta."Sell-to Customer No.");
          lrLinVta.INSERT(TRUE);

          lrLinVta.VALIDATE("VAT Prod. Posting Group", rParAg."Grupo Registro IVA Prod.Exento");
          lrLinVta.VALIDATE(Quantity                 , 1);
          lrLinVta.VALIDATE("Unit Price"             , lwImporteExento); //+$017

          IF prCabVta."Prices Including VAT" THEN BEGIN
            lrLinVta."Amount Including VAT" := lrLinVta."Line Amount";
            lrLinVta.Amount                 := ROUND(lrLinVta."Line Amount" / (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
          END
          ELSE BEGIN
            lrLinVta.Amount                 := lrLinVta."Line Amount";
            lrLinVta."Amount Including VAT" := ROUND(lrLinVta."Line Amount" * (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
          END;
          lrLinVta.MODIFY;

          //. Crea las lineas de factura Incoming

          CLEAR(lrLinInc);
          lrLinInc.Concepto        := prRsv.Producto;
          lrLinInc.Subconcepto     := Text0015;
          lrLinInc.Fecha           := prRsv."Fecha Excursion";
          lrLinInc.Personas        := lwPlazas;
          lrLinInc."Tipo Pax"      := rParPer."Codigo Adulto";
          lrLinInc.SetInf(lrLinVta, prCabVta."Prices Including VAT");
          lrLinInc.INSERT;
        END;
      END;

      //. Creamos una linea de ni¤os
      lwPlazas := (prRsv.Ni¤os - lrDetEco."Free Ni¤os");
      IF lwPlazas <> 0 THEN
      BEGIN
        lwNumLin += 10000;

        //. Calculamos los importes
        lwImporteLinea := lrDetEco."Ingreso ni¤os";
        IF COPYSTR(prRsv.Divisa, 1, 2) <> COPYSTR(rCustomer."Currency Code", 1, 2) THEN
          lwImporteLinea := rTipCam.ExchangeAmtFCYToFCY(prRsv."Fecha cambio",
                                                        prRsv.Divisa,
                                                        rCustomer."Currency Code",
                                                        lwImporteLinea);
        lwImporteLinea := (lwImporteLinea - lwCosteNi);

        //. Parte Exenta
        lwImporteExento := lrDetEco."Ingreso ni¤os exento";
        IF COPYSTR(prRsv.Divisa, 1, 2) <> COPYSTR(rCustomer."Currency Code", 1, 2) THEN
          lwImporteExento := rTipCam.ExchangeAmtFCYToFCY(prRsv."Fecha cambio",
                                                         prRsv.Divisa,
                                                         rCustomer."Currency Code",
                                                         lrDetEco."Ingreso ni¤os exento");

        //. Creamos la linea de factura
        CLEAR(lrLinVta);
        lrLinVta."Document Type" := prCabVta."Document Type";
        lrLinVta."Document No."  := prCabVta."No.";
        lrLinVta."Line No."      := lwNumLin;
        lrLinVta.VALIDATE("Sell-to Customer No." , prCabVta."Sell-to Customer No.");
        lrLinVta.INSERT(TRUE);

        lrLinVta.VALIDATE(Type                     , lrLinVta.Type::"G/L Account");
        lrLinVta.VALIDATE("No."                    , lwCuenta);
        lrLinVta.VALIDATE("VAT Prod. Posting Group", _RetornaIVAProducto(prRsv.Producto, prRsv."Fecha Excursion"));
        lrLinVta.VALIDATE(Description              , STRSUBSTNO('#1###### #2################## #3### #4########',
                                                                prRsv."Fecha Venta", prRsv.Producto,
                                                                lwPlazas, rParPer."Codigo Ni¤o"));
        //lrLinVta.VALIDATE(Description              , STRSUBSTNO(Text0017, prRsv."N§ Ticket"));
        lrLinVta.VALIDATE(Quantity                 , 1);
        lrLinVta.VALIDATE("Unit Price"             , lwImporteLinea - lwImporteExento);

        //. Rellenar los campos Amount y "Amount Including VAT" para que la cabecera de factura muestre
        //. la totalizacion de esos campos.

        IF prCabVta."Prices Including VAT" THEN BEGIN
          lrLinVta."Amount Including VAT" := lrLinVta."Line Amount";
          lrLinVta.Amount                 := ROUND(lrLinVta."Line Amount" / (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
        END
        ELSE BEGIN
          lrLinVta.Amount                 := lrLinVta."Line Amount";
          lrLinVta."Amount Including VAT" := ROUND(lrLinVta."Line Amount" * (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
        END;
        lrLinVta.MODIFY;

        //. Crea las lineas de factura Incoming
        CLEAR(lrLinInc);
        lrLinInc.Concepto        := prRsv.Producto;
        lrLinInc.Fecha           := prRsv."Fecha Excursion";
        lrLinInc.Personas        := lwPlazas;
        lrLinInc."Tipo Pax"      := rParPer."Codigo Ni¤o";
        lrLinInc.SetInf(lrLinVta, prCabVta."Prices Including VAT");
        lrLinInc.INSERT;

        //. Crear una segunda linea de factura por el importe exento
        IF lwImporteExento <> 0 THEN
        BEGIN
          lwNumLin += 10000;
          lrLinVta."Line No."      := lwNumLin;
          lrLinVta.VALIDATE("Sell-to Customer No.", prCabVta."Sell-to Customer No.");
          lrLinVta.INSERT(TRUE);

          lrLinVta.VALIDATE("VAT Prod. Posting Group", rParAg."Grupo Registro IVA Prod.Exento");
          lrLinVta.VALIDATE(Quantity                 , 1);
          lrLinVta.VALIDATE("Unit Price"             , lwImporteExento); //+$017

          IF prCabVta."Prices Including VAT" THEN BEGIN
            lrLinVta."Amount Including VAT" := lrLinVta."Line Amount";
            lrLinVta.Amount                 := ROUND(lrLinVta."Line Amount" / (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
          END
          ELSE BEGIN
            lrLinVta.Amount                 := lrLinVta."Line Amount";
            lrLinVta."Amount Including VAT" := ROUND(lrLinVta."Line Amount" * (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
          END;
          lrLinVta.MODIFY;

          //. Crea las lineas de factura Incoming

          CLEAR(lrLinInc);
          lrLinInc.Concepto        := prRsv.Producto;
          lrLinInc.Subconcepto     := Text0015;
          lrLinInc.Fecha           := prRsv."Fecha Excursion";
          lrLinInc.Personas        := lwPlazas;
          lrLinInc."Tipo Pax"      := rParPer."Codigo Ni¤o";
          lrLinInc.SetInf(lrLinVta, prCabVta."Prices Including VAT");
          lrLinInc.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE _BuscaCuentaIngresos@1100217010(prRsv@1100217000 : Record 7010162;VAR pwCuenta@1100217001 : Text[20];VAR pwCosteAd@1100217002 : Decimal;VAR pwCosteNi@1100217003 : Decimal;pwTipoDocumento@1100217005 : 'Factura,Abono';VAR pwCuentaExenta@1100217006 : Text[20]);
    VAR
      lrExc@1100217004 : Record 7009710;
    BEGIN
      // _BuscaCuentaIngresos

      //. Buscamos la cuenta contable que aplica y si es de comision mercantil calculamos el coste prorrateado

      pwCosteAd := 0;
      pwCosteNi := 0;

      lrExc.GET(prRsv.Producto);
      IF lrExc."Proveedor comision mercantil" THEN
      BEGIN
        //+$040 <
        IF (pwTipoDocumento = pwTipoDocumento::Abono) AND
           (rCtaToDel."Cta. Reembolsos excursiones" <> '') THEN
          pwCuenta := rCtaToDel."Cta. Reembolsos excursiones"
        ELSE
        BEGIN
          rCtaToDel.TESTFIELD("Cta. Ingreso comision mercanti");
          pwCuenta := rCtaToDel."Cta. Ingreso comision mercanti";
        END;
        //+$040 >

        pwCosteAd := _ProrrateaCoste(prRsv, 0);
        pwCosteNi := _ProrrateaCoste(prRsv, 1);
      END
      ELSE
      BEGIN
        //+$040 <
        IF (pwTipoDocumento = pwTipoDocumento::Abono) AND
           (rCtaToDel."Cta. Reembolsos excursiones" <> '') THEN
          pwCuenta := rCtaToDel."Cta. Reembolsos excursiones"
        ELSE
        BEGIN
          pwCuenta := rCtaToDel."Cta. venta excursiones";
          //+$048 <
          IF rCtaToDel."Cta. venta excursiones exento" <> '' THEN
            pwCuentaExenta := rCtaToDel."Cta. venta excursiones exento"
          ELSE
            pwCuentaExenta := rCtaToDel."Cta. venta excursiones";
          //+$048 >
        END;
        //+$040 >
      END;
    END;

    PROCEDURE SeleccionarDepartamento@1100217007() : Code[20];
    VAR
      lrDep@1100217000 : Record 349;
    BEGIN
      // SeleccionarDepartamento

      lrDep.RESET;
      lrDep.FILTERGROUP(2);
      lrDep.SETRANGE("Global Dimension No.", 1);
      lrDep.SETRANGE(Blocked               , FALSE);
      lrDep.SETRANGE("Dimension Value Type", lrDep."Dimension Value Type"::Standard);
      lrDep.FILTERGROUP(0);

      IF FORM.RUNMODAL(0, lrDep) = ACTION::LookupOK THEN
        EXIT(lrDep.Code);
    END;

    PROCEDURE PrefacturarLiquidacion@1100217008(VAR prLiquidacion@1100217000 : Record 7010178);
    VAR
      lrRsv@1100217001 : Record 7010162;
      lrTMPFecha@1100217002 : TEMPORARY Record 2000000007;
      lrTMPTouroperador@1000000000 : TEMPORARY Record 7009717;
      lwAuxFecha@1100217003 : Date;
      lwFechaInicio@1100217004 : Date;
      lwFechaFinal@1100217005 : Date;
    BEGIN
      // PrefacturarLiquidacion

      IF prLiquidacion."N§ Liquidacion" = 0 THEN
        EXIT;

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("Guia Venta", "Fecha Venta");
      lrRsv.SETRANGE("Guia Venta"       , prLiquidacion."Guia Venta");
      lrRsv.SETRANGE("N§ liquidacion GV", prLiquidacion."N§ Liquidacion");
      lrRsv.SETRANGE(Anulada            , FALSE);
      lrRsv.SETRANGE("Num. Prefactura"  , '');
      lrRsv.SETRANGE("Num. Factura"     , '');

      //. Un temporal de meses de excursion
      lrTMPFecha.RESET;
      lrTMPFecha.DELETEALL;

      //. Un temporal de touroperadores
      lrTMPTouroperador.RESET;
      lrTMPTouroperador.DELETEALL;

      IF lrRsv.FINDSET THEN
      BEGIN
        REPEAT
          lwAuxFecha := DMY2DATE(1, DATE2DMY(lrRsv."Fecha Excursion", 2), DATE2DMY(lrRsv."Fecha Excursion", 3));

          IF NOT lrTMPFecha.GET(lrTMPFecha."Period Type"::Date, lwAuxFecha) THEN
          BEGIN
            lrTMPFecha."Period Type"  := lrTMPFecha."Period Type"::Date;
            lrTMPFecha."Period Start" := lwAuxFecha;
            lrTMPFecha.INSERT;
          END;

          //+$063 <
          IF NOT lrTMPTouroperador.GET(lrRsv.TourOperador) THEN
          BEGIN
            lrTMPTouroperador.TourOperador := lrRsv.TourOperador;
            lrTMPTouroperador.INSERT;
          END;
          //+$063 >
        UNTIL lrRsv.NEXT = 0;
      END;

      lrTMPFecha.RESET;
      IF lrTMPFecha.FINDSET THEN
      BEGIN
        REPEAT
          lwFechaInicio := lrTMPFecha."Period Start";
          lwFechaFinal  := CALCDATE('<+1M-1D>', lwFechaInicio);

          IF lrTMPTouroperador.FINDSET THEN
          BEGIN
            REPEAT
              //. Crear una prefactura por cada mes de excursion

              lrRsv.RESET;
              lrRsv.SETCURRENTKEY("Guia Venta", "Fecha Venta");
              lrRsv.SETRANGE("Guia Venta"       , prLiquidacion."Guia Venta");
              lrRsv.SETRANGE("N§ liquidacion GV", prLiquidacion."N§ Liquidacion");
              lrRsv.SETRANGE(Anulada            , FALSE);
              lrRsv.SETRANGE(Reembolsada        , FALSE);
              lrRsv.SETRANGE("Num. Prefactura"  , '');
              lrRsv.SETRANGE("Num. Factura"     , '');
              lrRsv.SETRANGE("Fecha Excursion"  , lwFechaInicio, lwFechaFinal);
              lrRsv.SETRANGE(TourOperador       , lrTMPTouroperador.TourOperador); //+$063

              _CrearPrefacturas(lrRsv);

              lrRsv.RESET;
              lrRsv.SETCURRENTKEY("Guia Venta", "Fecha Venta");
              lrRsv.SETRANGE("Guia Venta"       , prLiquidacion."Guia Venta");
              lrRsv.SETRANGE("N§ liquidacion GV", prLiquidacion."N§ Liquidacion");
              lrRsv.SETRANGE("Fecha Excursion"  , lwFechaInicio, lwFechaFinal);
              lrRsv.SETRANGE(Anulada            , FALSE);
              lrRsv.SETRANGE(Reembolsada        , FALSE);
              lrRsv.SETRANGE(TourOperador       , lrTMPTouroperador.TourOperador); //+$063
              IF lrRsv.FINDSET THEN
              BEGIN
                LlamarImpresion(lrRsv);

                //+$037 <
                //. Si la prefactura esta dentro del mes de trabajo vamos a pedir al usuario si quiere
                //. crear la factura
                IF ( DATE2DMY(TODAY, 2) >= DATE2DMY(lwFechaFinal, 2) ) AND
                   ( (COMPANYNAME <> 'TDC') AND (COMPANYNAME <> 'AID') AND (COMPANYNAME <> 'TNX')) THEN //+$061
                  _FacturarExcursiones(lrRsv);
                //+$037 >
              END;
            UNTIL lrTMPTouroperador.NEXT = 0;
          END;
        UNTIL lrTMPFecha.NEXT = 0;

        //. Marcamos la liquidacion como prefactura generada
        prLiquidacion."Venta prefacturada" := TRUE;
        prLiquidacion.MODIFY;
      END
      //+$039 <
      ELSE
      BEGIN
        //. Marcamos la liquidacion como prefactura generada
        prLiquidacion."Venta prefacturada" := TRUE;
        prLiquidacion.MODIFY;
      END;
      //+$039 >
    END;

    PROCEDURE AbonarReservaParcial@1000000000(prRsv@1100217000 : Record 7010162;prReemb@1000000000 : Record 7010266);
    VAR
      lrCabVta@1100217001 : Record 36;
      lrCabInc@1100217002 : Record 7009908;
      lrContTO@1100217003 : Record 7010142;
      lwComision@1100217004 : Decimal;
    BEGIN
      // AbonarReserva

      //. Comprobamos las tablas de configuracion
      _ComprobarFicheros(prRsv, lrContTO);

      //. Crear la cabecera del abono de venta
      _CabeceraAbonoVenta(prRsv, lrCabVta, lrCabInc);

      //. Crear las lineas de abono de venta
      _LineaAbonoVentaParcial(prRsv, prReemb, lrCabVta, lrContTO);

      //. Totalizamos importes en la cabecera de factura de incoming
      lrCabInc.GetImportes;
      lrCabInc.MODIFY;

      //. Aplicamos la comision del touroperador
      lwComision := rTipCam.ExchangeAmtFCYToFCY(prRsv."Fecha cambio",
                                                prRsv.Divisa,
                                                '',
                                                prRsv."Comision Touroperador");

      IF rTouroperador."Crear asiento comision" THEN
        _MovComisionTO(lwComision, lrCabVta,prRsv);

      // Asiento Comision Touroperador comercializadora
      _ComisionComercializadora(-prReemb."Comision to reembolso", prRsv.Divisa, lrCabVta, prRsv);

      //. Guardamos el numero de abono en la reserva
      prRsv.VALIDATE("Num. abono reembolso", lrCabVta."No."); //+$045
      prRsv.MODIFY;

      //+$064 <
      //. Guardamos el numero de abono en el registro de reembolso
      prReemb."Num. abono reembolso" := lrCabVta."No.";
      prReemb.MODIFY;
      //+$064 >

      // Traspaso a empresa comercializadora
      _TraspasarAbonoCOM(lrCabVta, prRsv, prReemb);

      //. Imprimir el abono que acabamos de crear
      _ImprimirFactura(lrCabVta."No.");
    END;

    LOCAL PROCEDURE _LineaAbonoVentaParcial@1000000001(prRsv@1100217000 : Record 7010162;prReemb@1000000000 : Record 7010266;prCabVta@1100217001 : Record 36;prContTO@1100217008 : Record 7010142);
    VAR
      lwCosteAd@1100217010 : Decimal;
      lwCosteNi@1100217011 : Decimal;
      lwImporteLinea@1100217009 : Decimal;
      lwImporteExento@1100217012 : Decimal;
      lwNumLin@1100217002 : Integer;
      lwPlazas@1100217006 : Integer;
      lwCuenta@1100217003 : Text[20];
      lwCuentaExenta@1100217013 : Text[20];
      lrDetEco@1100217004 : Record 7010245;
      lrLinVta@1100217005 : Record 37;
      lrLinInc@1100217007 : Record 7009909;
    BEGIN

      lwNumLin := 10000;

      _BuscaCuentaIngresos(prRsv, lwCuenta, lwCosteAd, lwCosteNi, 1, lwCuentaExenta); //+$040, +$048

      lrDetEco.GET(prRsv.Delegacion, prRsv."N§ Reserva");

      prReemb.CALCFIELDS(prReemb."Importe Reembolsado");

      lwImporteLinea := prReemb."Importe Reembolsado";

      IF COPYSTR(prRsv.Divisa, 1, 2) <> COPYSTR(rCustomer."Currency Code", 1, 2) THEN
        lwImporteLinea := rTipCam.ExchangeAmtFCYToFCY(prRsv."Fecha cambio",
                                                      prRsv.Divisa,
                                                      rCustomer."Currency Code",
                                                      lwImporteLinea);

      //. Creamos la linea de factura
      CLEAR(lrLinVta);
      lrLinVta."Document Type" := prCabVta."Document Type";
      lrLinVta."Document No."  := prCabVta."No.";
      lrLinVta."Line No."      := lwNumLin;
      lrLinVta.VALIDATE("Sell-to Customer No." , prCabVta."Sell-to Customer No.");
      lrLinVta.INSERT(TRUE);

      lrLinVta.VALIDATE(Type                     , lrLinVta.Type::"G/L Account");
      lrLinVta.VALIDATE("No."                    , lwCuenta);
      lrLinVta.VALIDATE("VAT Prod. Posting Group", _RetornaIVAProducto(prRsv.Producto, prRsv."Fecha Excursion"));
      lrLinVta.VALIDATE(Description              , STRSUBSTNO('#1###### #2################## #3###',
                                                              prRsv."Fecha Venta", prRsv.Producto,
                                                              prReemb."Adultos Reembolsados" + prReemb."Ni¤os Reembolsados"));
      //lrLinVta.VALIDATE(Description              , STRSUBSTNO(Text0017, prRsv."N§ Ticket"));
      lrLinVta.VALIDATE(Quantity                 , 1);
      lrLinVta.VALIDATE("Unit Price"             , lwImporteLinea);

      //. Rellenar los campos Amount y "Amount Including VAT" para que la cabecera de factura muestre
      //. la totalizacion de esos campos.

      IF prCabVta."Prices Including VAT" THEN BEGIN
        lrLinVta."Amount Including VAT" := lrLinVta."Line Amount";
        lrLinVta.Amount                 := ROUND(lrLinVta."Line Amount" / (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
      END
      ELSE BEGIN
        lrLinVta.Amount                 := lrLinVta."Line Amount";
        lrLinVta."Amount Including VAT" := ROUND(lrLinVta."Line Amount" * (1 + ((lrLinVta."VAT %" + lrLinVta."EC %") / 100) ) );
      END;
      lrLinVta.MODIFY;

      //. Crea las lineas de factura Incoming
      CLEAR(lrLinInc);
      lrLinInc.Concepto        := prRsv.Producto;
      lrLinInc.Fecha           := prRsv."Fecha Excursion";
      lrLinInc.Personas        := prReemb."Adultos Reembolsados" + prReemb."Ni¤os Reembolsados";
      //lrLinInc."Tipo Pax"      := rParPer."Codigo Adulto";
      lrLinInc.SetInf(lrLinVta, prCabVta."Prices Including VAT");
      lrLinInc.INSERT;
    END;

    LOCAL PROCEDURE _CheckReasonCode@1000000008();
    VAR
      lrReason@1000000000 : Record 231;
      TextCodAu@1000000001 : TextConst 'ENU=ATENNEA;ESP=ATENNEA';
    BEGIN
      // _CheckReasonCode

      IF NOT lrReason.GET(TextCodAu) THEN
      BEGIN
        lrReason.INIT;
        lrReason.Code        := TextCodAu;
        lrReason.Description := lrReason.Code;
        lrReason.INSERT;
      END;
    END;

    LOCAL PROCEDURE _TraspasarCOM@1000000004(prCabVta@1000000000 : Record 36;prRsv@1000000002 : Record 7010162);
    VAR
      rResExc@1000000003 : Record 7010162;
    BEGIN
      // _TraspasarCOM

      //. Solo las reservas a credito traspasan a la comercializadora
      IF NOT prRsv."Reserva a credito" THEN
        EXIT;

      //. Solo los touroperadores configurados traspasan informaci¢n a la comercializadora
      IF rTouroperador."Empresa comercializadora" = '' THEN
        EXIT;

      rResExc.RESET;
      rResExc.SETCURRENTKEY("Num. Factura","Fecha Excursion");
      rResExc.SETRANGE("Num. Factura", prCabVta."No.");
      IF rResExc.FINDSET THEN
      BEGIN
        REPEAT
          _SincronizaReservas(rResExc, rTouroperador."Empresa comercializadora", prCabVta."Shortcut Dimension 1 Code");
        UNTIL rResExc.NEXT = 0;
      END;

      _CrearCompraCOM(prCabVta, rTouroperador."Empresa comercializadora");
    END;

    LOCAL PROCEDURE _SincronizaReservas@1000000002(prResExc@1000000000 : Record 7010162;pwEmpresa@1000000003 : Text[30];pwDestino@1000000006 : Code[20]);
    VAR
      rResCom@1000000001 : Record 7009940;
      rResComDet@1000000002 : Record 7009941;
      lrTO@1000000005 : Record 7009717;
      pNum@1000000004 : Integer;
    BEGIN

      rResCom.RESET;
      rResCom.CHANGECOMPANY(pwEmpresa);
      rResCom.INIT;
      //-$076rResCom.Delegacion                  := prResExc.Delegacion;
      rResCom.Destino       := pwDestino;
      rResCom."N§ Reserva"  := prResExc."N§ Reserva";
      rResCom."Fecha Venta" := prResExc."Fecha Venta";
      //+$075 <
      lrTO.GET(prResExc.TourOperador);
      IF lrTO."Codigo en comercializadora" <> '' THEN
        rResCom.TourOperador := lrTO."Codigo en comercializadora"
      ELSE
        rResCom.TourOperador := prResExc.TourOperador;
      //+$075 <
      rResCom."N§ Ticket"                 := prResExc."N§ Ticket";
      rResCom."Booking Touroperador"      := prResExc."Booking Touroperador";
      rResCom.Excursion                   := prResExc.Producto;
      rResCom."Fecha Excursion"           := prResExc."Fecha Excursion";
      rResCom."Turno Excursion"           := prResExc."Turno Excursion";
      rResCom."Nombre Cliente"            := prResExc."Nombre Cliente";
      rResCom."Hotel Cliente"             := prResExc."Hotel Cliente";
      rResCom."Precio Adulto"             := prResExc."Precio Adulto";
      rResCom."Precio Ni¤o"               := prResExc."Precio Ni¤o";
      rResCom."Canal venta"               := prResExc."Canal venta";
      rResCom.Divisa                      := prResExc.Divisa;
      rResCom."Gr. Registro IVA Producto" := _RetornaIVAProducto(prResExc.Producto, prResExc."Fecha Excursion");
      rResCom."Oficina venta"             := prResExc.Oficina; //+$074
      //+$077 <
      rResCom."Reserva online"            := prResExc."Reserva online";
      IF prResExc."Reserva online" THEN
        rResCom."Num. Operacion tarjeta credito" := _GetCobroOnline(prResExc);
      //+$077 >
      rResCom."Delegacion Atennea" := prResExc.Delegacion; //+$078
      rResCom.INSERT(TRUE);

      rResComDet.RESET;
      rResComDet.CHANGECOMPANY(pwEmpresa);
      rResComDet.SETRANGE(Destino     , rResCom.Destino);
      rResComDet.SETRANGE("N§ Reserva", rResCom."N§ Reserva");
      IF rResComDet.FINDLAST THEN
        pNum := rResComDet."ID Detalle" + 1
      ELSE
        pNum := 1;

      rResComDet.INIT;
      rResComDet.Destino                := rResCom.Destino;
      rResComDet."N§ Reserva"           := rResCom."N§ Reserva";
      rResComDet."ID Detalle"           := pNum;
      rResComDet."Ingreso reserva"      := prResExc."Ingreso reserva";
      rResComDet."Ingreso reserva neto" := prResExc."Ingreso reserva neto";
      rResComDet.Adultos                := prResExc.Adultos;
      rResComDet.Ni¤os                  := prResExc.Ni¤os;
      rResComDet."Invitados Adultos"    := prResExc."Venta - Invitados Adultos";
      rResComDet."Invitados ni¤os"      := prResExc."Venta - Invitados ni¤os";
      rResComDet.INSERT(TRUE);

      _SincronizaMaestrosCOM(prResExc, pwEmpresa);
    END;

    LOCAL PROCEDURE _SincronizaMaestrosCOM@1000000005(prResExc@1000000000 : Record 7010162;pwEmpresa@1000000001 : Text[30]);
    VAR
      lrRecRef@1000000003 : RecordRef;
      lcSincroCOM@1000000004 : Codeunit 7009793;
      lrHotel@1000000005 : Record 7009724;
      lrCanalVta@1000000006 : Record 7009923;
      lrExcursion@1000000002 : Record 7009710;
    BEGIN
      // _SincronizaMaestrosCOM

      //. Esta funci¢n sincroniza los registros de las tablas maestras necesarias con la empresa comercializadora

      IF lrHotel.GET(prResExc."Hotel Cliente") THEN
      BEGIN
        lrRecRef.GETTABLE(lrHotel);
        lcSincroCOM.SincronizaTabla(lrRecRef, lrRecRef, lcSincroCOM.OpInsert, pwEmpresa);
      END;

      IF lrCanalVta.GET(prResExc."Canal venta") THEN
      BEGIN
        lrRecRef.GETTABLE(lrCanalVta);
        lcSincroCOM.SincronizaTabla(lrRecRef, lrRecRef, lcSincroCOM.OpInsert, pwEmpresa);
      END;

      IF lrExcursion.GET(prResExc.Producto) THEN
      BEGIN
        lrRecRef.GETTABLE(lrExcursion);
        lcSincroCOM.SincronizaTabla(lrRecRef, lrRecRef, lcSincroCOM.OpInsert, pwEmpresa);
      END;
    END;

    LOCAL PROCEDURE _CrearCompraCOM@1000000003(prCabVenta@1000000005 : Record 36;pwEmpresa@1000000000 : Text[30]);
    VAR
      lcPar@1000000001 : Codeunit 7009700;
      lcNoSeriesMgt@1000000004 : Codeunit 396;
      lrCabCOM@1000000002 : Record 7009934;
      lrLinCOM@1000000003 : Record 7009935;
      lrDel@1000000006 : Record 7009718;
      lrTO@1000000007 : Record 7009717;
    BEGIN
      // _CrearCompraCOM

      //. Creamos una serie para numerar estos documentos que luego traspasaremos a la comercializadora
      lcPar.CrearSerieEstandar('ATFACEXCOM', Text0023, 'EX', TRUE, TRUE);

      prCabVenta.CALCFIELDS(prCabVenta."Amount Including VAT");

      lrDel.GET(rParAg.Delegacion);

      lrCabCOM.RESET;
      lrCabCOM.INIT;
      lrCabCOM.CHANGECOMPANY(pwEmpresa);
      lrCabCOM."Tipo Documento"           := prCabVenta."Document Type";
      lrCabCOM."Num. Documento"           := lcNoSeriesMgt.GetNextNo('ATFACEXCOM', TODAY, TRUE);
      lrCabCOM."Cod. Proveedor"           := lrDel."Proveedor comercializadora";
      lrCabCOM."Fecha registro"           := prCabVenta."Posting Date";
      lrCabCOM."Fecha emision"            := prCabVenta."Document Date";
      lrCabCOM."Texto registro"           := prCabVenta."Posting Description";
      lrCabCOM."Num. Documento proveedor" := prCabVenta."No.";
      lrCabCOM.Destino                    := prCabVenta."Shortcut Dimension 1 Code";
      //+$075 <
      lrTO.GET(prCabVenta."Shortcut Dimension 2 Code");
      IF lrTO."Codigo en comercializadora" <> '' THEN
        lrCabCOM.Touroperador := lrTO."Codigo en comercializadora"
      ELSE
        lrCabCOM.Touroperador := prCabVenta."Shortcut Dimension 2 Code";
      //+$075 <
      lrCabCOM."Precios impuestos incl."  := prCabVenta."Prices Including VAT";
      lrCabCOM.INSERT(TRUE);

      lrLinCOM.RESET;
      lrLinCOM.INIT;
      lrLinCOM.CHANGECOMPANY(pwEmpresa);
      lrLinCOM."Tipo Documento" := lrCabCOM."Tipo Documento";
      lrLinCOM."Num. Documento" := lrCabCOM."Num. Documento";
      lrLinCOM."Num. Linea"     := 10000;
      lrLinCOM."Num. Cuenta"    := rCtaToDel."Cta. compra excursion COM";
      lrLinCOM.Importe          := prCabVenta."Amount Including VAT";
      lrLinCOM.INSERT(TRUE);
    END;

    LOCAL PROCEDURE _TraspasarAbonoCOM@1000000009(prCabVta@1000000000 : Record 36;prRsv@1000000002 : Record 7010162;prReemb@1000000003 : Record 7010266);
    VAR
      rResCom@1000000006 : Record 7009940;
      rResComDet@1000000005 : Record 7009941;
      pNum@1000000004 : Integer;
    BEGIN
      // _TraspasarCOM

      //. Solo las reservas a credito traspasan a la comercializadora
      IF NOT prRsv."Reserva a credito" THEN
        EXIT;

      //. Solo los touroperadores configurados traspasan informaci¢n a la comercializadora
      IF rTouroperador."Empresa comercializadora" = '' THEN
        EXIT;

      rResCom.RESET;
      rResCom.CHANGECOMPANY(rTouroperador."Empresa comercializadora");
      rResCom.SETRANGE(Destino     , prRsv.Delegacion);
      rResCom.SETRANGE("N§ Reserva", prRsv."N§ Reserva");
      IF rResCom.FINDFIRST THEN
      BEGIN
        rResComDet.RESET;
        rResComDet.CHANGECOMPANY(rTouroperador."Empresa comercializadora");
        rResComDet.SETRANGE(Destino     , rResCom.Destino);
        rResComDet.SETRANGE("N§ Reserva", rResCom."N§ Reserva");
        IF rResComDet.FINDLAST THEN
          pNum := rResComDet."ID Detalle" + 1
        ELSE
          pNum := 1;

        rResComDet.INIT;
        rResComDet.Destino                := rResCom.Destino;
        rResComDet."N§ Reserva"           := rResCom."N§ Reserva";
        rResComDet."ID Detalle"           := pNum;
        rResComDet."Ingreso reserva"      := - prReemb."Importe Reembolsado";
        rResComDet."Ingreso reserva neto" := - prReemb."Importe reembolsado neto";
        rResComDet.Adultos                := - prReemb."Adultos Reembolsados";
        rResComDet.Ni¤os                  := - prReemb."Ni¤os Reembolsados";
        rResComDet.INSERT(TRUE);

        // Desmarcamos la reserva como calculada
        rResCom.Calculada := FALSE;
        rResCom."% Comision Touroperador" := 0;
        rResCom."Comision Touroperador"   := 0;
        rResCom."Importe a Facturar"      := 0;
        rResCom.MODIFY;
      END;

      _CrearCompraCOM(prCabVta, rTouroperador."Empresa comercializadora");
    END;

    LOCAL PROCEDURE _ComisionComercializadora@1000000006(pwImp@1100253001 : Decimal;pwDivisa@1000000006 : Code[10];prCabVta@1100253006 : Record 36;prRsv@1000000001 : Record 7010162);
    VAR
      lrCont@1000000002 : Record 7010142;
      lwDoc@1100253002 : Code[20];
      lwDescrpt@1100253004 : Text[80];
      lwFecha@1100253000 : Date;
      lwAsient@1100253003 : Integer;
      lwDim1@1100253005 : Code[20];
      lwDim2@1100253007 : Code[20];
      lText01@1100253008 : TextConst 'ENU=CTO_;ESP=CTO_';
      lwImp@1100253009 : Decimal;
      lwCli@1000000000 : Code[20];
      lrLind@1000000004 : Record 7009947;
      lrSec@1000000003 : Record 232;
      LTEXT0002@1000000005 : TextConst 'ENU=Excrusions diary;ESP=Diario Excursiones';
      lrSetTo@1000000007 : Record 7009705;
      lrLibro@1000000008 : Record 80;
      vNumLin@1000000009 : Integer;
      lText02@1000000010 : TextConst 'ENU=CTO_;ESP="Comision Touroperador documento "';
      lrTO@1000000011 : Record 7009717;
      lrCustomerCOM@1000000012 : Record 18;
    BEGIN
      // _ComisionComercializadora

      //. @pwImp   , Importe de la comision del touroperador, viene en expresado Divisa Local
      //. @prCabVta, Registro de la factura asociada a la comision

      IF pwImp = 0 THEN
        EXIT;

      IF prRsv."Reserva a credito" THEN
        EXIT;

      //. Buscamos el contrato de comisiones de touroperador
      lrCont.RESET;
      lrCont.SETRANGE (Delegacion             , prRsv.Delegacion);
      lrCont.SETRANGE (TourOperador           , prRsv.TourOperador);
      lrCont.SETRANGE ("Tipo Contrato"        , lrCont."Tipo Contrato"::TourOperador);
      lrCont.SETFILTER("Fecha inicio contrato", '<=%1' , prRsv."Fecha Excursion");
      lrCont.SETFILTER("Fecha final contrato" , '>=%1' , prRsv."Fecha Excursion");
      lrCont.SETRANGE (Comercializadora       , FALSE); //+$079
      lrCont.SETRANGE (Confirmado             , TRUE);
      IF NOT lrCont.FINDFIRST THEN
        EXIT;

      IF lrCont."Aplica comision en factura" THEN
        EXIT;

      IF rTouroperador."Empresa comercializadora" = '' THEN
        EXIT;

      CLEAR(lrSetTo);
      lrSetTo.CHANGECOMPANY(rTouroperador."Empresa comercializadora");
      lrSetTo.RESET;;
      lrSetTo.GET(prRsv.Delegacion, prRsv.TourOperador);
      lrSetTo.TESTFIELD("Cta. venta excursiones");

      // Lineas de diario
      CLEAR(lrLind);
      lrLind.CHANGECOMPANY(rTouroperador."Empresa comercializadora");
      lrLind.RESET;
      IF lrLind.FINDLAST THEN
        vNumLin := lrLind."Line No." + 1
      ELSE
        vNumLin := 1;

      lrLind.INIT;
      lrLind.VALIDATE("Line No."                 , vNumLin);
      lrLind.VALIDATE("Document No."             , COPYSTR(lText01 + prCabVta."No.",1,20));
      lrLind.VALIDATE("Posting Date"             , prCabVta."Posting Date");
      lrLind.VALIDATE("Account Type"             , 0);
      lrLind.VALIDATE("Account No."              , lrSetTo."Cta. compra excursiones");
      lrLind.VALIDATE("Shortcut Dimension 1 Code", prCabVta."Shortcut Dimension 1 Code");
      //+$075 <
      lrTO.GET(prCabVta."Shortcut Dimension 2 Code");
      IF lrTO."Codigo en comercializadora" <> '' THEN
        lrLind.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
      ELSE
        lrLind.VALIDATE("Shortcut Dimension 2 Code", prCabVta."Shortcut Dimension 2 Code");
      //+$075 <
      lrLind.VALIDATE(Description                , lText02 + prCabVta."No.");
      lrLind.VALIDATE("Bal. Account Type"        , lrLind."Bal. Account Type"::Customer);
      lrLind.VALIDATE("Bal. Account No."         , lrSetTo."Cliente comercializadora");

      lrCustomerCOM.CHANGECOMPANY(rTouroperador."Empresa comercializadora");
      IF NOT lrCustomerCOM.GET(lrSetTo."Cliente comercializadora") THEN
        CLEAR(lrCustomerCOM);
      lrLind.VALIDATE("Currency Code"            , lrCustomerCOM."Currency Code");
      lrLind.VALIDATE(Amount                     , pwImp);
      lrLind.INSERT(TRUE);
    END;

    LOCAL PROCEDURE _GetCobroOnline@1000000007(prResExc@1000000000 : Record 7010162) : Code[20];
    VAR
      lrCobro@1000000001 : Record 7010240;
    BEGIN
      // _GetCobroOnline

      lrCobro.RESET;
      lrCobro.SETRANGE(Delegacion   , prResExc.Delegacion);
      lrCobro.SETRANGE("Num Reserva", prResExc."N§ Reserva");
      IF lrCobro.FINDFIRST THEN
        EXIT(lrCobro."Autorizacion operacion");
    END;

    BEGIN
    {
      $001 AJS 09032011 La comision del touroperador se guarda en negativo, por tanto hay que sumar al ingreso reserva
      $002 AJF 14032011 La factura se desglosa por d¡a y excursi¢n.
      $003 AJS 24032011 Modifico la descripcion de las lineas para adaptarla al formato de impresion, el temporal utilizado
                        para rellenar las lineas de factura ahora agrupa por tipo de persona
      $004 AJS 25032011 Modifico para que la facturacion se haga en la divisa de la ficha del cliente
                        Modifico la funcion GeneraAsiento para que tenga un parametro mas para indicar Divisa
                        Modifico la funcion _CabeceraFacturaVenta para que la fecha de la factura sea la fecha de cambio
                        de este modo los tipos de cambio funcionan correctamente.
      $005 AJS 28032011 Modifico la funcion ImprimirFactura para incluir el uso de los parametros

      $006 AJS 29032011 Modifico para contemplar que la divisa del cliente de comisiones sea diferente de la divisa del
                        cliente de facturacion

      $007 AJS 10052011 Modifico la facturacion para que la fecha de registro sea la fecha de sistema y para incluir el
                        factor de la divisa.

      $008 AJS 12052011 Modifico la facturacion para que la fecha de registro sea WORKDATE

      $009 AJS 16052011 Modifico la gestion del factor divisa porque hay que introducirlo como 1/Factor divisa

      $010 AJS 21052011 Incluir el filtro de reserva confirmada a la hora de crear las prefacturas

      $011 AJF 04072011 (GOC-OC-11016) Se modifica la funci¢n _GeneraFPR para que coja siempre los importes con divisa
                        Local.

      $012 AJS 06102011 Modifico la funcion de crear lineas de factura para rellenar Amount y Amount including VAT

      $013 AJS 13102011 Nueva funcion _RetornaIVAProducto para buscar el grupo de iva producto en la tarifa de compra

      $014 AJS 19122011 En la funcion _MovComisionTO he puesto un control para que no se genere asiento si el cliente de
                        facturaci¢n del guia de venta coincide con el cliente de comisiones del guia de venta

      $015 JPT 15/02/12 GOC-LP-11008 Modificar facturacion de excursiones para que no se cree el documento contable si el total es cero

      $016 JPT 21/03/12 INC-59916 Separar el importe reembolsado en Adultos y Ni¤os

      $017 AJS 29052012 CNT-CAR-12004, EXC-09 - Parte del ingreso se puede considerar como exento de impuestos

      $018 AJS 31052012 CNT-CAR-12004, EXC-11 - En las excursiones en que trabajamos con proveedores por comision comercial solo
                        se factura la diferencia entre el precio de venta y el coste.

      $019 JPT 06/06/12  CNT-CAR-12004/EXC-16 - Sales Guides Cash liquidation customizations
                                                Cambiamos la cta de venta a ingreso diferido (Solo para Nexus)
      $020 JPT 25/07/12 Introducimos la cabecera de factura Incoming y las lineas
      $021 JPT 02/08/12 GOC-LP-12021 Los asientos negativos de FPR deben ser positivos con debe/haber girados
      $022 JPT 08/08/12 CNT-OC-12004 Incluir filtro por oficina en las excursiones. Dimension Departamento ser  Oficina
      $023 JPT 17/08/12 GOC-LP-12025 Hacer que los free no se reflejen en las facturas de venta de excursiones

      $024 AJS 23082012 Control de seguridad por usuario
      $025 JPT 03/09/12 En GOC de momento imprimimos la factura estandard

      $026 AJS 15092012 En funcion del contrato de comisiones del touroperador, la comision no se descuenta en la factura

      $027 AJS 20092012 CNT quiere facturar las reservas sin confirmar ni liquidar, en base a su fecha de venta

      $028 AJS 21092012 Nuevas funciones para abonar una reserva que se esta reembolsando

      $029 AJS 21092012 Modifico la funcion GeneraFPR para poder retroceder los asientos creados al confirmar

      $030 AJS 22102012 Modifico la funcion GeneraFPR para rellenar el codigo de procedencia con el proveedor

      $031 AJS 12112012 Nexus deja de trabajar con la cuenta de ingresos diferidos, utilizan la facturaci¢n de reservas sin
                        confirmar.

      $032 AJS 16012013 Nexus quiere que la factura de venta no se cree con la tasa de la venta

      $033 AJS 16012013 Eliminamos las referencias a la informacion de reembolso, las reservas reembolsadas no se facturan

      $034 AJS 30012013 CNT utiliza dos tasas de cambio para una misma divisa por tanto en esos casos no hay que convertir
                        a la divisa del cliente

      $035 AJS 09022013 Modifico la facturacion de excursiones para incluir el texto de registro

      $036 AJS 22022013 Amplio la modificacion para CNT de dia 30/01/13 para el abono de reembolso

      $037 AJS 04032013 Modifico la funcion PrefacturarLiquidacion para pedir al usuario si quiere crear el borrador de
                        factura directamente en ese momento.

      $038 AJS 04032013 Utilizo OnRun para llamar a las prefacturas sin prefacturar

      $039 AJS 10042013 Modifico la funcion PrefacturarLiquidacion para que se marque como prefacturada si solo tiene reservas
                        reembolsadas/anuladas

      $040 AJS 12062013 Los reembolsos en Mexico van contra una cuenta diferente de la venta

      $041 AJS 18062013 Los asientos de FPR se haran en la fecha del servicio

      $042 AJS 18062013 Mostrar el numero de liquidacion en la factura de excursion

      $043 AJS 03072013 Incluyo un filtro por touroperador cuando se pre-facturan reservas a credito

      $044 AJS 17072013 Se ha a¤adido la fecha de creacion en las facturas de agencia

      $045 AJS 28082013 Relleno el numero de prefactura con un validate para que quede en el historico de la reserva

      $046 AJS 27092013 Corrijo un error en la funcion GeneraFPR que hacia que solo se creara el asiento para un proveedor

      $047 AJS 04102013 Marco los asientos de FPR como Asiento automatico para que no se puedan borrar

      $048 AJS 07102013 GOC-OC-13036, nuevo campo para configurar una cuenta para los ingresos exentos

      $049 AJS 18102013 GOC-OC-13037, El descuento de touroperador se trata como un descuento linea

      $050 AJS 18102013 Para poder aplicar esta modificacion vamos a crear las facturas como precios sin impuestos incluidos

      $051 AJS 07112013 Pongo un commit antes de la llamada a SeleccionarDepartamento en la creacion de FPR porque en GOC
                        saltaba un error

      $052 AJS 19112013 Sustituyo la clave a la hora de buscar el ultimo numero de asiento

      $053 AJS 26022014 El asiento de comision solo se hace si el touroperador esta configurado

      $054 AJS 10032014 Cuando se factura sobre fecha de venta, la fecha de trabajo debe estar en el mes de venta

      $055 AJS 07502014 Dejo de rellenar el campo "Corrected Invoice No." para que la descripcion del abono pase correcta a
                        contabilidad

      $056 AJS 09052014 Volvemos a rellenar el campo "Corrected Invoice No." porque lo necesitan

      $057 AJS 23062014 He creado una tabla de series de facturacion

      $058 ARM 28072014 Tenemos en cuenta los reembolsos

      $059 AJS 01092014 Corregir error al crear varias prefacturas separando por oficina de venta

      $060 AJS 11102014 Traducciones

      $061 AJS 21102014 Lanzar la facturacion al prefacturar, menos para Mexico por la facturacion automatica

      $062 AJS 05112014 Solo tiene que pedir el numero de factura manual en las oficinas de Mexico

      $063 AJS 08122014 Modifico la funcion PrefacturarLiquidacion para crear una prefactura por cada touroperador

      $064 AJS 23122014 Modifico las funciones AbonarReservaParcial y AbonarReserva para guardar el numero de abono
                        en el registro de reembolso

      $065 AJS 21012015 Ejecutar el proceso estandar de Lanzar factura

      $066 AJS 09022015 Rellenar el campo Source code del diario general

      $067 AJS 06032015 Agregar filtro de que el contrato este confirmado

      $068 ARM 12032015 CNT-CAR-14096 Comercializadora

      $069 ARM 31032015 CNT-OC-14053 Representante no obligatorio si es reserva a credito, y utilizar Cliente credito excursiones del setu

      $070 AJS 17042015 La comision a comercializadora pasa en la divisa de la venta

      $071 AJS 18042015 Cambio en el sentido del campo Aplicar comision touroperador

      $072 AJS 06052015 Solo rellenamos el campo Reason code al final de la facturacion

      $073 AJS 07050215 CNT-OC-15134, Si estamos en una empresa sin contabilidad, pasamos los asientos de coste a otra empresa

      $074 AJS 05062015 Pasamos la oficina de venta a comercializadora

      $075 AJS 08062015 Algunos codigos de touroperador pasan convertidos a la comercializadora

      $076 AJS 08062015 La dimension departamento debe pasar como delegacion a comercializadora

      $077 AJS 15062015 El n£mero de autorizacion de tarjeta de credito tiene que pasar a la comercializadora

      $078 AJS 26062015 La delegacion la almacenamos en un nuevo campo para la busqueda de contratos para comercializadora

      $079 AJS 29062015 En esta funcion trabajamos con los contratos de touroperador que no estan marcados como comercializadora
    }
    END.
  }
}
