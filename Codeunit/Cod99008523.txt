OBJECT Codeunit 99008523 BizTalk Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The sales invoice number %1 has already been sent as a BizTalk document.;ESP=Ya se ha enviado la factura de venta n£mero %1 como documento BizTalk.';
      Text001@1001 : TextConst 'ENU=There are no lines to send.;ESP=No hay l¡neas para enviar.';

    PROCEDURE ValidateData@3(SalesInvoiceHeader@1000 : Record 112);
    VAR
      SalesInvoiceLine@1001 : Record 113;
    BEGIN
      IF SalesInvoiceHeader."BizTalk Sales Invoice" THEN
        ERROR(Text000,SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETCURRENTKEY("Document No.");
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      IF NOT SalesInvoiceLine.FIND('-') THEN
        ERROR(Text001);
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Resource);
      IF SalesInvoiceLine.FIND('-') THEN
        SalesInvoiceLine.FIELDERROR(Type);
    END;

    PROCEDURE TransferData@2(SalesInvoiceHeader@1001 : Record 112) NextOutboundNo@1000 : Integer;
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      OutboundSalesDocumentHeader@1003 : Record 99008506;
      OutboundSalesDocumentLine@1004 : Record 99008507;
      SalesInvoiceLine@1005 : Record 113;
      Item@1006 : Record 27;
      NextLineNo@1007 : Integer;
    BEGIN
      OutboundSalesDocumentLine.LOCKTABLE;
      OutboundSalesDocumentHeader.LOCKTABLE;
      IF OutboundSalesDocumentHeader.FIND('+') THEN
        NextOutboundNo := OutboundSalesDocumentHeader."Outbound Document No." + 1
      ELSE
        NextOutboundNo := 1;
      WITH OutboundSalesDocumentHeader DO BEGIN
        INIT;
        "Outbound Document No." := NextOutboundNo;
        "No." := SalesInvoiceHeader."No.";
        "Sell-to Customer No." := SalesInvoiceHeader."Sell-to Customer No.";
        "Bill-to Customer No." := SalesInvoiceHeader."Bill-to Customer No.";
        "Bill-to Name" := SalesInvoiceHeader."Bill-to Name";
        "Bill-to Name 2" := SalesInvoiceHeader."Bill-to Name 2";
        "Bill-to Address" := SalesInvoiceHeader."Bill-to Address";
        "Bill-to Address 2" := SalesInvoiceHeader."Bill-to Address 2";
        "Bill-to City" := SalesInvoiceHeader."Bill-to City";
        "Bill-to Contact" := SalesInvoiceHeader."Bill-to Contact";
        "Your Reference" := SalesInvoiceHeader."Your Reference";
        "Ship-to Code" := SalesInvoiceHeader."Ship-to Code";
        "Ship-to Name" := SalesInvoiceHeader."Ship-to Name";
        "Ship-to Name 2" := SalesInvoiceHeader."Ship-to Name 2";
        "Ship-to Address" := SalesInvoiceHeader."Ship-to Address";
        "Ship-to Address 2" := SalesInvoiceHeader."Ship-to Address 2";
        "Ship-to City" := SalesInvoiceHeader."Ship-to City";
        "Ship-to Contact" := SalesInvoiceHeader."Ship-to Contact";
        "Order Date" := SalesInvoiceHeader."Order Date";
        "Posting Date" := SalesInvoiceHeader."Posting Date";
        "Shipment Date" := SalesInvoiceHeader."Shipment Date";
        "Posting Description" := SalesInvoiceHeader."Posting Description";
        "Payment Terms Code" := SalesInvoiceHeader."Payment Terms Code";
        "Due Date" := SalesInvoiceHeader."Due Date";
        "Payment Discount %" := SalesInvoiceHeader."Payment Discount %";
        "Pmt. Discount Date" := SalesInvoiceHeader."Pmt. Discount Date";
        "Shipment Method Code" := SalesInvoiceHeader."Shipment Method Code";
        "Location Code" := SalesInvoiceHeader."Location Code";
        "Shortcut Dimension 1 Code" := SalesInvoiceHeader."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := SalesInvoiceHeader."Shortcut Dimension 2 Code";
        "Customer Posting Group" := SalesInvoiceHeader."Customer Posting Group";
        IF SalesInvoiceHeader."Currency Code" <> '' THEN
          "Currency Code" := SalesInvoiceHeader."Currency Code"
        ELSE BEGIN
          GeneralLedgerSetup.FIND('-');
          "Currency Code" := GeneralLedgerSetup."LCY Code"
        END;
        "Currency Factor" := SalesInvoiceHeader."Currency Factor";
        "Price Group Code" := SalesInvoiceHeader."Customer Price Group";
        "Prices Including VAT" := SalesInvoiceHeader."Prices Including VAT";
        "Invoice Disc. Code" := SalesInvoiceHeader."Invoice Disc. Code";
        "Cust./Item Disc. Gr." := SalesInvoiceHeader."Customer Disc. Group";
        "Language Code" := SalesInvoiceHeader."Language Code";
        "Salesperson Code" := SalesInvoiceHeader."Salesperson Code";
        "Order No." := SalesInvoiceHeader."Order No.";
        "No. Printed" := SalesInvoiceHeader."No. Printed";
        "On Hold" := SalesInvoiceHeader."On Hold";
        "Applies-to Doc. Type" := SalesInvoiceHeader."Applies-to Doc. Type";
        "Applies-to Doc. No." := SalesInvoiceHeader."Applies-to Doc. No.";
        "Bal. Account No." := SalesInvoiceHeader."Bal. Account No.";
        "VAT Registration No." := SalesInvoiceHeader."VAT Registration No.";
        "Reason Code" := SalesInvoiceHeader."Reason Code";
        "Gen. Bus. Posting Group" := SalesInvoiceHeader."Gen. Bus. Posting Group";
        "EU 3-Party Trade" := SalesInvoiceHeader."EU 3-Party Trade";
        "Transaction Type" := SalesInvoiceHeader."Transaction Type";
        "Transport Method" := SalesInvoiceHeader."Transport Method";
        "VAT Country/Region Code" := SalesInvoiceHeader."VAT Country/Region Code";
        "Sell-to Customer Name" := SalesInvoiceHeader."Sell-to Customer Name";
        "Sell-to Customer Name 2" := SalesInvoiceHeader."Sell-to Customer Name 2";
        "Sell-to Address" := SalesInvoiceHeader."Sell-to Address";
        "Sell-to Address 2" := SalesInvoiceHeader."Sell-to Address 2";
        "Sell-to City" := SalesInvoiceHeader."Sell-to City";
        "Sell-to Contact" := SalesInvoiceHeader."Sell-to Contact";
        "Bill-to Post Code" := SalesInvoiceHeader."Bill-to Post Code";
        "Bill-to County" := SalesInvoiceHeader."Bill-to County";
        "Bill-to Country/Region Code" := SalesInvoiceHeader."Bill-to Country/Region Code";
        "Sell-to Post Code" := SalesInvoiceHeader."Sell-to Post Code";
        "Sell-to County" := SalesInvoiceHeader."Sell-to County";
        "Sell-to Country/Region Code" := SalesInvoiceHeader."Sell-to Country/Region Code";
        "Ship-to Post Code" := SalesInvoiceHeader."Ship-to Post Code";
        "Ship-to Country/Region Code" := SalesInvoiceHeader."Ship-to Country/Region Code";
        "Bal. Account Type" := SalesInvoiceHeader."Bal. Account Type";
        "Exit Point" := SalesInvoiceHeader."Exit Point";
        Correction := SalesInvoiceHeader.Correction;
        "Document Date" := SalesInvoiceHeader."Document Date";
        "External Document No." := SalesInvoiceHeader."External Document No.";
        Area := SalesInvoiceHeader.Area;
        "Transaction Specification" := SalesInvoiceHeader."Transaction Specification";
        "Payment Method Code" := SalesInvoiceHeader."Payment Method Code";
        "Shipping Agent Code" := SalesInvoiceHeader."Shipping Agent Code";
        "Package Tracking No." := SalesInvoiceHeader."Package Tracking No.";
        "No. Series" := SalesInvoiceHeader."No. Series";
        "Order No. Series" := SalesInvoiceHeader."Order No. Series";
        "Pre-Assigned No. Series" := SalesInvoiceHeader."Pre-Assigned No. Series";
        "User ID" := SalesInvoiceHeader."User ID";
        "Source Code" := SalesInvoiceHeader."Source Code";
        "Tax Area Code" := SalesInvoiceHeader."Tax Area Code";
        "Tax Liable" := SalesInvoiceHeader."Tax Liable";
        "VAT Bus. Posting Group" := SalesInvoiceHeader."VAT Bus. Posting Group";
        "VAT Base Discount %" := SalesInvoiceHeader."VAT Base Discount %";
        "Customer Order No." := SalesInvoiceHeader."Customer Order No.";
        Comment := SalesInvoiceHeader.Comment;
        SalesInvoiceHeader.CALCFIELDS(Amount,"Amount Including VAT");
        Amount := SalesInvoiceHeader.Amount;
        "Amount Including VAT" := SalesInvoiceHeader."Amount Including VAT";
        Status := Status::Unsent;
        "BizTalk Document Type" := "BizTalk Document Type"::Invoice;
        INSERT;

        OutboundSalesDocumentLine.SETCURRENTKEY("Outbound Document No.");
        OutboundSalesDocumentLine.SETRANGE("Outbound Document No.",NextOutboundNo);
        IF OutboundSalesDocumentLine.FIND('+') THEN
          NextLineNo := OutboundSalesDocumentLine."Line No."
        ELSE
          NextLineNo := 0;
        WITH OutboundSalesDocumentLine DO BEGIN
          SalesInvoiceLine.SETCURRENTKEY("Document No.");
          SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          IF SalesInvoiceLine.FIND('-') THEN
          REPEAT
            INIT;
            NextLineNo := NextLineNo +1;
            "Line No." := NextLineNo;
            "Outbound Document No." := NextOutboundNo;
            "Document No." := SalesInvoiceLine."Document No.";
            "Sell-to Customer No." := SalesInvoiceLine."Sell-to Customer No.";
            Type := SalesInvoiceLine.Type;
            "No." := SalesInvoiceLine."No.";
            IF Item.GET(SalesInvoiceLine."No.") THEN BEGIN
              "Vendor Item No." := Item."Vendor Item No.";
              "Common Item No." := Item."Common Item No.";
            END;
            "Location Code" := SalesInvoiceLine."Location Code";
            "Posting Group" := SalesInvoiceLine."Posting Group";
            "Shipment Date" := SalesInvoiceLine."Shipment Date";
            Description := SalesInvoiceLine.Description;
            "Description 2" := SalesInvoiceLine."Description 2";
            "Unit of Measure" := SalesInvoiceLine."Unit of Measure";
            Quantity := SalesInvoiceLine.Quantity;
            "Unit Price" := SalesInvoiceLine."Unit Price";
            "Unit Cost (LCY)" := SalesInvoiceLine."Unit Cost (LCY)";
            "VAT %" := SalesInvoiceLine."VAT %";
            "Line Discount %" := SalesInvoiceLine."Line Discount %";
            "Line Discount Amount" := SalesInvoiceLine."Line Discount Amount";
            Amount := SalesInvoiceLine.Amount;
            "Amount Including VAT" := SalesInvoiceLine."Amount Including VAT";
            "Allow Invoice Disc." := SalesInvoiceLine."Allow Invoice Disc.";
            "Gross Weight" := SalesInvoiceLine."Gross Weight";
            "Net Weight" := SalesInvoiceLine."Net Weight";
            "Units per Parcel" := SalesInvoiceLine."Units per Parcel";
            "Unit Volume" := SalesInvoiceLine."Unit Volume";
            "Appl.-to Item Entry" := SalesInvoiceLine."Appl.-to Item Entry";
            "Shortcut Dimension 1 Code" := SalesInvoiceLine."Shortcut Dimension 1 Code";
            "Shortcut Dimension 2 Code" := SalesInvoiceLine."Shortcut Dimension 2 Code";
            "Price Group Code" := SalesInvoiceLine."Customer Price Group";
            "Job No." := SalesInvoiceLine."Job No.";
            "Work Type Code" := SalesInvoiceLine."Work Type Code";
            "Inv. Discount Amount" := SalesInvoiceLine."Inv. Discount Amount";
            "Drop Shipment" := SalesInvoiceLine."Drop Shipment";
            "Gen. Bus. Posting Group" := SalesInvoiceLine."Gen. Bus. Posting Group";
            "Gen. Prod. Posting Group" := SalesInvoiceLine."Gen. Prod. Posting Group";
            "VAT Calculation Type" := SalesInvoiceLine."VAT Calculation Type";
            "Transaction Type" := SalesInvoiceLine."Transaction Type";
            "Transport Method" := SalesInvoiceLine."Transport Method";
            "Attached to Line No." := SalesInvoiceLine."Attached to Line No.";
            "Exit Point" := SalesInvoiceLine."Exit Point";
            Area := SalesInvoiceLine.Area;
            "Transaction Specification" :=SalesInvoiceLine."Transaction Specification";
            "Tax Area Code" := SalesInvoiceLine."Tax Area Code";
            "Tax Liable" := SalesInvoiceLine."Tax Liable";
            "Tax Group Code" := SalesInvoiceLine."Tax Group Code";
            "VAT Bus. Posting Group" := SalesInvoiceLine."VAT Bus. Posting Group";
            "VAT Prod. Posting Group" := SalesInvoiceLine."VAT Prod. Posting Group";
            "Blanket Order No." := SalesInvoiceLine."Blanket Order No.";
            "Blanket Order Line No." := SalesInvoiceLine."Blanket Order Line No.";
            "VAT Base Amount" := SalesInvoiceLine."VAT Base Amount";
            "Unit Cost" := SalesInvoiceLine."Unit Cost";
            "Variant Code" := SalesInvoiceLine."Variant Code";
            "Bin Code" := SalesInvoiceLine."Bin Code";
            "Qty. per Unit of Measure" := SalesInvoiceLine."Qty. per Unit of Measure";
            "Unit of Measure Code" := SalesInvoiceLine."Unit of Measure Code";
            "Quantity (Base)" := SalesInvoiceLine."Quantity (Base)";
            INSERT;
          UNTIL SalesInvoiceLine.NEXT = 0;
        END;
      END;
    END;

    BEGIN
    END.
  }
}
