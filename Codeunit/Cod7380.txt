OBJECT Codeunit 7380 Phys. Invt. Count.-Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES4.00.02;
  }
  PROPERTIES
  {
    OnRun=VAR
            Item@1003 : Record 27;
            SKU@1002 : Record 5700;
          BEGIN
            WITH Item DO BEGIN
              SETFILTER("Phys Invt Counting Period Code",'<>''''');
              SETFILTER("Next Counting Period",'<>''''');
              IF FIND('-') THEN
                REPEAT
                  Calendar.RESET;
                  Calendar.SETFILTER("Period Start","Next Counting Period");
                  StartDate := Calendar.GETRANGEMIN("Period Start");
                  EndDate := Calendar.GETRANGEMAX("Period Start");
                  IF ("Last Counting Period Update" < StartDate) AND
                     (WORKDATE >= StartDate) AND (WORKDATE <= EndDate)
                  THEN BEGIN
                    InsertTempPhysCountBuffer(
                      "No.",'','',"Shelf/Bin No.","Phys Invt Counting Period Code",
                      Description,"Next Counting Period","Last Counting Period Update",1);
                  END;
                UNTIL NEXT = 0;
            END;

            WITH SKU DO BEGIN
              SETFILTER("Phys Invt Counting Period Code",'<>''''');
              SETFILTER("Next Counting Period",'<>''''');
              IF SourceJnl = SourceJnl::WhseJnl THEN
                SETRANGE("Location Code",WhseJnlLine."Location Code");
              IF FIND('-') THEN
                REPEAT
                  Calendar.RESET;
                  Calendar.SETFILTER("Period Start","Next Counting Period");
                  StartDate := Calendar.GETRANGEMIN("Period Start");
                  EndDate := Calendar.GETRANGEMAX("Period Start");
                  IF ("Last Counting Period Update" < StartDate) AND
                     (WORKDATE >= StartDate) AND (WORKDATE <= EndDate)
                  THEN BEGIN
                    InsertTempPhysCountBuffer(
                      "Item No.","Variant Code","Location Code",
                      "Shelf No.","Phys Invt Counting Period Code",Description,
                      "Next Counting Period","Last Counting Period Update",2);
                  END;
                UNTIL NEXT = 0;
            END;

            IF FORM.RUNMODAL(
              FORM::"Phys. Invt. Item Selection",TempPhysInvtItemSel) <> ACTION::LookupOK
            THEN
              EXIT;

            TempPhysInvtItemSel.SETRANGE(Selected,TRUE);
            IF TempPhysInvtItemSel.FIND('-') THEN BEGIN
              IF SourceJnl = SourceJnl::ItemJnl THEN
                CreatePhysInvtItemJnl
              ELSE
                CreatePhysInvtWhseJnl;
            END;
          END;

  }
  CODE
  {
    VAR
      TempPhysInvtItemSel@1000 : TEMPORARY Record 7380;
      PhysInvtCount@1007 : Record 7381;
      ItemJnlLine@1002 : Record 83;
      WhseJnlLine@1003 : Record 7311;
      Calendar@1004 : Record 2000000007;
      TempItem@1013 : TEMPORARY Record 27;
      TempSKU@1014 : TEMPORARY Record 5700;
      StartDate@1006 : Date;
      EndDate@1005 : Date;
      SourceJnl@1001 : 'ItemJnl,WhseJnl';
      Text000@1008 : TextConst 'ENU=Processing items    #1##########;ESP=Procesando prods.   #1##########';
      SortingMethod@1010 : ' ,Item,Bin';
      Text001@1009 : TextConst 'ENU=Do you want to update the %1 of the %2?;ESP=¨Confirma que desea actualizar el %1 del %2?';
      Text002@1011 : TextConst 'ENU=Cancelled.;ESP=Cancelado.';
      HideValidationDialog@1012 : Boolean;

    LOCAL PROCEDURE InsertTempPhysCountBuffer@3(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];ShelfBin@1007 : Text[30];PhysInvtCountCode@1003 : Code[10];Description@1004 : Text[30];CountingPeriod@1005 : Text[250];LastCountDate@1006 : Date;SourceType@1008 : 'Item,SKU');
    BEGIN
      TempPhysInvtItemSel.INIT;
      TempPhysInvtItemSel."Item No." := ItemNo;
      TempPhysInvtItemSel."Variant Code" := VariantCode;
      TempPhysInvtItemSel."Location Code" := LocationCode;
      TempPhysInvtItemSel."Phys Invt Counting Period Code" := PhysInvtCountCode;
      TempPhysInvtItemSel."Phys Invt Counting Period Type" := SourceType;
      TempPhysInvtItemSel."Shelf No." := ShelfBin;
      TempPhysInvtItemSel."Last Counting Date" := LastCountDate;
      TempPhysInvtItemSel."Next Counting Period" := CountingPeriod;
      GetPhysInvtCount(PhysInvtCountCode);
      TempPhysInvtItemSel."Count Frequency per Year" :=
        PhysInvtCount."Count Frequency per Year";
      TempPhysInvtItemSel.Description := Description;
      IF TempPhysInvtItemSel.INSERT THEN;
    END;

    LOCAL PROCEDURE CreatePhysInvtItemJnl@6();
    VAR
      Item@1008 : Record 27;
      ItemJnlBatch@1009 : Record 233;
      PhysInvtCountRep@1002 : Report 7380;
      CalcQtyOnHand@1001 : Report 790;
      PhysInvtList@1000 : Report 722;
      Window@1007 : Dialog;
      PostingDate@1006 : Date;
      DocNo@1004 : Code[20];
      PrintDoc@1005 : Boolean;
      PrintDocPerItem@1011 : Boolean;
      ZeroQty@1003 : Boolean;
      PrintQtyCalculated@1010 : Boolean;
    BEGIN
      ItemJnlBatch.GET(
        ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
      PhysInvtCountRep.SetItemJnlLine(ItemJnlLine,ItemJnlBatch);
      PhysInvtCountRep.RUNMODAL;

      IF PhysInvtCountRep.GetRequest(
        PostingDate,DocNo,SortingMethod,PrintDoc,PrintDocPerItem,ZeroQty,PrintQtyCalculated)
      THEN BEGIN
        Window.OPEN(Text000,TempPhysInvtItemSel."Item No.");
        REPEAT
          Window.UPDATE;
          CalcQtyOnHand.InitializeRequest(PostingDate,DocNo,ZeroQty);
          CalcQtyOnHand.SetItemJnlLine(ItemJnlLine);
          CalcQtyOnHand.InitializePhysInvtCount(
            TempPhysInvtItemSel."Phys Invt Counting Period Code",
            TempPhysInvtItemSel."Phys Invt Counting Period Type");
          CalcQtyOnHand.USEREQUESTFORM(FALSE);
          CalcQtyOnHand.SetHideValidationDialog(TRUE);
          Item.SETRANGE("No.",TempPhysInvtItemSel."Item No.");
          IF TempPhysInvtItemSel."Phys Invt Counting Period Type" =
             TempPhysInvtItemSel."Phys Invt Counting Period Type"::SKU
          THEN BEGIN
            Item.SETRANGE("Variant Filter",TempPhysInvtItemSel."Variant Code");
            Item.SETRANGE("Location Filter",TempPhysInvtItemSel."Location Code");
          END;
          CalcQtyOnHand.SETTABLEVIEW(Item);
          CalcQtyOnHand.RUNMODAL;
          CLEAR(CalcQtyOnHand);
        UNTIL TempPhysInvtItemSel.NEXT = 0;
        Window.CLOSE;

        IF PrintDoc THEN BEGIN
          IF NOT PrintDocPerItem THEN BEGIN
            ItemJnlBatch.SETRECFILTER;
            ItemJnlLine.SETRANGE(
              "Journal Template Name",ItemJnlLine."Journal Template Name");
            ItemJnlLine.SETRANGE(
              "Journal Batch Name",ItemJnlLine."Journal Batch Name");
            PhysInvtList.USEREQUESTFORM(FALSE);
            PhysInvtList.Initialize(PrintQtyCalculated);
            PhysInvtList.SETTABLEVIEW(ItemJnlBatch);
            PhysInvtList.SETTABLEVIEW(ItemJnlLine);
            PhysInvtList.RUN;
          END ELSE BEGIN
            TempPhysInvtItemSel.FIND('-');
            REPEAT
              ItemJnlBatch.SETRECFILTER;
              PhysInvtList.SETTABLEVIEW(ItemJnlBatch);
              ItemJnlLine.SETRANGE(
                "Journal Template Name",ItemJnlLine."Journal Template Name");
              ItemJnlLine.SETRANGE(
                "Journal Batch Name",ItemJnlLine."Journal Batch Name");
              ItemJnlLine.SETRANGE("Item No.",TempPhysInvtItemSel."Item No.");
              PhysInvtList.USEREQUESTFORM(FALSE);
              PhysInvtList.Initialize(PrintQtyCalculated);
              PhysInvtList.SETTABLEVIEW(ItemJnlLine);
              PhysInvtList.RUN;
              TempPhysInvtItemSel.SETRANGE("Item No.",
                TempPhysInvtItemSel."Item No.");
              TempPhysInvtItemSel.FIND('+');
              TempPhysInvtItemSel.SETRANGE("Item No.");
            UNTIL TempPhysInvtItemSel.NEXT = 0;
          END;
          CLEAR(PhysInvtList);
        END;
      END;
    END;

    LOCAL PROCEDURE CreatePhysInvtWhseJnl@13();
    VAR
      BinContent@1008 : Record 7302;
      WhseJnlBatch@1009 : Record 7310;
      PhysInvtCountRep@1002 : Report 7380;
      CalcWhseQtyOnHand@1001 : Report 7390;
      WhsePhysInvtList@1000 : Report 7307;
      Window@1007 : Dialog;
      PostingDate@1006 : Date;
      DocNo@1004 : Code[20];
      PrintDoc@1012 : Boolean;
      PrintDocPerItem@1011 : Boolean;
      ZeroQty@1003 : Boolean;
      PrintQtyCalculated@1010 : Boolean;
    BEGIN
      WhseJnlBatch.GET(
        WhseJnlLine."Journal Template Name",WhseJnlLine."Journal Batch Name",WhseJnlLine."Location Code");
      PhysInvtCountRep.SetWhseJnlLine(WhseJnlLine,WhseJnlBatch);
      PhysInvtCountRep.RUNMODAL;

      IF PhysInvtCountRep.GetRequest(
        PostingDate,DocNo,SortingMethod,PrintDoc,PrintDocPerItem,ZeroQty,PrintQtyCalculated)
      THEN BEGIN
        Window.OPEN(Text000,TempPhysInvtItemSel."Item No.");
        REPEAT
          Window.UPDATE;
          CalcWhseQtyOnHand.InitializeRequest(PostingDate,DocNo,ZeroQty);

          CalcWhseQtyOnHand.InitializePhysInvtCount(
            TempPhysInvtItemSel."Phys Invt Counting Period Code",
            TempPhysInvtItemSel."Phys Invt Counting Period Type");
          CalcWhseQtyOnHand.SetWhseJnlLine(WhseJnlLine);
          CalcWhseQtyOnHand.USEREQUESTFORM(FALSE);
          CalcWhseQtyOnHand.SetHideValidationDialog(TRUE);
          BinContent.SETRANGE("Location Code",TempPhysInvtItemSel."Location Code");
          BinContent.SETRANGE("Item No.",TempPhysInvtItemSel."Item No.");
          IF TempPhysInvtItemSel."Phys Invt Counting Period Type" =
             TempPhysInvtItemSel."Phys Invt Counting Period Type"::SKU
           THEN
            BinContent.SETRANGE("Variant Code",TempPhysInvtItemSel."Variant Code");
          CalcWhseQtyOnHand.SETTABLEVIEW(BinContent);
          CalcWhseQtyOnHand.RUNMODAL;
          CLEAR(CalcWhseQtyOnHand);
        UNTIL TempPhysInvtItemSel.NEXT = 0;
        Window.CLOSE;

        IF PrintDoc THEN BEGIN
          IF NOT PrintDocPerItem THEN BEGIN
            WhseJnlBatch.SETRECFILTER;
            CASE SortingMethod OF
              SortingMethod::Item:
                WhseJnlLine.SETCURRENTKEY("Location Code","Item No.","Variant Code");
              SortingMethod::Bin:
                WhseJnlLine.SETCURRENTKEY("Location Code","Bin Code");
            END;
            WhseJnlLine.SETRANGE(
              "Journal Template Name",WhseJnlLine."Journal Template Name");
            WhseJnlLine.SETRANGE(
              "Journal Batch Name",WhseJnlLine."Journal Batch Name");
            WhseJnlLine.SETRANGE(
              "Journal Template Name",WhseJnlLine."Journal Template Name");
            WhseJnlLine.SETRANGE(
              "Journal Batch Name",WhseJnlLine."Journal Batch Name");
            WhseJnlLine.SETRANGE("Location Code",WhseJnlBatch."Location Code");
            WhsePhysInvtList.USEREQUESTFORM(FALSE);
            WhsePhysInvtList.Initialize(PrintQtyCalculated);
            WhsePhysInvtList.SETTABLEVIEW(WhseJnlBatch);
            WhsePhysInvtList.SETTABLEVIEW(WhseJnlLine);
            WhsePhysInvtList.RUN;
          END ELSE BEGIN
            TempPhysInvtItemSel.FIND('-');
            REPEAT
              WhseJnlBatch.SETRECFILTER;
              CASE SortingMethod OF
                SortingMethod::Item:
                  WhseJnlLine.SETCURRENTKEY("Location Code","Item No.","Variant Code");
                SortingMethod::Bin:
                  WhseJnlLine.SETCURRENTKEY("Location Code","Bin Code");
              END;
              WhseJnlLine.SETRANGE(
                "Journal Template Name",WhseJnlLine."Journal Template Name");
              WhseJnlLine.SETRANGE(
                "Journal Batch Name",WhseJnlLine."Journal Batch Name");
              WhseJnlLine.SETRANGE("Item No.",TempPhysInvtItemSel."Item No.");
              WhseJnlLine.SETRANGE("Location Code",TempPhysInvtItemSel."Location Code");
              WhsePhysInvtList.USEREQUESTFORM(FALSE);
              WhsePhysInvtList.Initialize(PrintQtyCalculated);
              WhsePhysInvtList.SETTABLEVIEW(WhseJnlBatch);
              WhsePhysInvtList.SETTABLEVIEW(WhseJnlLine);
              WhsePhysInvtList.RUN;
              TempPhysInvtItemSel.SETRANGE("Item No.",
                TempPhysInvtItemSel."Item No.");
              TempPhysInvtItemSel.FIND('+');
              TempPhysInvtItemSel.SETRANGE("Item No.");
            UNTIL TempPhysInvtItemSel.NEXT = 0;
          END;
          CLEAR(WhsePhysInvtList);
        END;
      END;
    END;

    PROCEDURE CalcPeriod@1(LastDate@1004 : Date;NextCountingPeriod@1005 : Text[250];CountFrequency@1002 : Integer;UpdateCountingPeriod@1006 : Boolean) : Text[250];
    VAR
      OldStartDate@1009 : Date;
      LastCountDate@1003 : Date;
      NextStartDate@1008 : Date;
      YearEndDate@1007 : Date;
      Days@1000 : Decimal;
      i@1010 : Integer;
    BEGIN
      IF LastDate = 0D THEN
        LastCountDate := WORKDATE
      ELSE
        LastCountDate := LastDate;

      i := DATE2DMY(WORKDATE,3);
      Calendar.RESET;
      Calendar.SETRANGE("Period Type",Calendar."Period Type"::Year);
      Calendar.SETRANGE("Period No.",i);
      Calendar.FIND('-');
      StartDate := Calendar."Period Start";
      YearEndDate := NORMALDATE(Calendar."Period End");

      CASE CountFrequency OF
        1,2,3,4,6,12:
          BEGIN
            IF StartDate > LastCountDate THEN BEGIN
              i := DATE2DMY(LastCountDate,3);
              Calendar.RESET;
              Calendar.SETRANGE("Period Type",Calendar."Period Type"::Year);
              Calendar.SETRANGE("Period No.",i);
              Calendar.FIND('-');
              StartDate := Calendar."Period Start";
            END;

            Calendar.RESET;
            Calendar.SETRANGE("Period Type",Calendar."Period Type"::Month);
            Calendar.SETFILTER("Period Start",'>= %1',StartDate);
            Calendar.FIND('-');

            WHILE StartDate <= LastCountDate DO BEGIN
              OldStartDate := StartDate;
              Calendar.NEXT(12 / CountFrequency);
              StartDate := Calendar."Period Start";
              EndDate := NORMALDATE(Calendar."Period Start") - 1;
            END;
            StartDate := OldStartDate;

            IF UpdateCountingPeriod THEN BEGIN
              IF LastDate <> 0D THEN BEGIN
                Calendar.NEXT(12 / CountFrequency);
                StartDate := EndDate + 1;
                EndDate := NORMALDATE(Calendar."Period Start") - 1;
              END;
              EXIT(FORMAT(StartDate) + '..' + FORMAT(EndDate))
            END ELSE
              EXIT(NextCountingPeriod);

          END ELSE BEGIN
            Calendar.RESET;
            Calendar.SETRANGE("Period Type",Calendar."Period Type"::Date);
            Calendar.SETRANGE("Period Start",StartDate,YearEndDate);
            Calendar.SETRANGE("Period No.");
            Days := (Calendar.COUNT DIV CountFrequency);

            IF NextCountingPeriod <> '' THEN BEGIN
              Calendar.RESET;
              Calendar.SETFILTER("Period Start",NextCountingPeriod);
              StartDate := CALCDATE('<+1D>',Calendar.GETRANGEMAX("Period Start"));
              OldStartDate := CALCDATE('<-1D>',Calendar.GETRANGEMIN("Period Start"));
              IF LastCountDate < OldStartDate THEN
                UpdateCountingPeriod := FALSE;
            END;

            OldStartDate := StartDate;
            IF StartDate <= LastCountDate THEN BEGIN
              WHILE StartDate <= LastCountDate DO BEGIN
                IF i = 0 THEN
                  i := 1
                ELSE
                 i := 0;
               OldStartDate := StartDate;
                StartDate := CALCDATE('<+'+FORMAT(Days + i)+'D>',StartDate);
                NextStartDate := CALCDATE('<+'+FORMAT(Days - 1)+'D>',StartDate);
                IF NextStartDate > YearEndDate THEN
                  StartDate := CALCDATE('<+1D>',YearEndDate);
              END;
            END ELSE
              IF StartDate > YearEndDate THEN
                StartDate := CALCDATE('<+1D>',YearEndDate);
            IF UpdateCountingPeriod THEN BEGIN
              IF LastDate = 0D THEN BEGIN
                EndDate := CALCDATE('<+'+FORMAT(Days)+'D>',OldStartDate);
                EXIT(FORMAT(OldStartDate) + '..' + FORMAT(EndDate));
              END ELSE BEGIN
                EndDate := CALCDATE('<+'+FORMAT(Days)+'D>',StartDate);
                EXIT(FORMAT(StartDate) + '..' + FORMAT(EndDate));
              END;
            END ELSE
              EXIT(NextCountingPeriod);
          END;
      END;
    END;

    LOCAL PROCEDURE GetPhysInvtCount@5(PhysInvtCountCode@1000 : Code[10]);
    BEGIN
      IF PhysInvtCount.Code <> PhysInvtCountCode THEN
        PhysInvtCount.GET(PhysInvtCountCode);
    END;

    PROCEDURE InitFromItemJnl@2(ItemJnlLine2@1000 : Record 83);
    BEGIN
      ItemJnlLine := ItemJnlLine2;
      SourceJnl := SourceJnl::ItemJnl;
    END;

    PROCEDURE InitFromWhseJnl@4(WhseJnlLine2@1000 : Record 7311);
    BEGIN
      WhseJnlLine := WhseJnlLine2;
      SourceJnl := SourceJnl::WhseJnl;
    END;

    PROCEDURE GetSortingMethod@8(VAR SortingMethod2@1000 : ' ,Item,Bin');
    BEGIN
      SortingMethod2 := SortingMethod;
    END;

    PROCEDURE UpdateSKUPhysInvtCount@12(VAR SKU@1000 : Record 5700);
    BEGIN
      SKU.TESTFIELD("Phys Invt Counting Period Code");
      IF NOT HideValidationDialog THEN
        IF NOT CONFIRM(
          Text001,FALSE,SKU.FIELDCAPTION("Next Counting Period"),SKU.TABLECAPTION)
        THEN
          ERROR(Text002);

      GetPhysInvtCount(SKU."Phys Invt Counting Period Code");
      PhysInvtCount.TESTFIELD("Count Frequency per Year");
      SKU."Last Counting Period Update" := WORKDATE;
      SKU."Next Counting Period" :=
        CalcPeriod(
          SKU."Last Counting Period Update",SKU."Next Counting Period",
          PhysInvtCount."Count Frequency per Year",TRUE);
      SKU.MODIFY;
    END;

    PROCEDURE UpdateItemPhysInvtCount@7(VAR Item@1000 : Record 27);
    BEGIN
      Item.TESTFIELD("Phys Invt Counting Period Code");
      IF NOT HideValidationDialog THEN
        IF NOT CONFIRM(
          Text001,FALSE,Item.FIELDCAPTION("Next Counting Period"),Item.TABLECAPTION)
        THEN
          ERROR(Text002);

      GetPhysInvtCount(Item."Phys Invt Counting Period Code");
      PhysInvtCount.TESTFIELD("Count Frequency per Year");
      Item."Last Counting Period Update" := WORKDATE;
      Item."Next Counting Period" :=
        CalcPeriod(
          Item."Last Counting Period Update",Item."Next Counting Period",
          PhysInvtCount."Count Frequency per Year",TRUE);
      Item.MODIFY;
    END;

    PROCEDURE UpdateItemSKUListPhysInvtCount@15();
    VAR
      Item@1000 : Record 27;
      SKU@1001 : Record 5700;
    BEGIN
      WITH TempItem DO BEGIN
        IF FINDSET THEN
          REPEAT
            Item.GET("No.");
            UpdateItemPhysInvtCount(Item);
          UNTIL NEXT = 0;
      END;

      WITH TempSKU DO BEGIN
        IF FINDSET THEN
          REPEAT
            SKU.GET("Location Code","Item No.","Variant Code");
            UpdateSKUPhysInvtCount(SKU);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE AddToTempItemSKUList@9(ItemNo@1000 : Code[20];LocationCode@1004 : Code[10];VariantCode@1005 : Code[10];PhysInvtCountingPeriodType@1003 : ' ,Item,SKU');
    BEGIN
      CASE PhysInvtCountingPeriodType OF
        PhysInvtCountingPeriodType::Item:
          InsertTempItem(ItemNo);
        PhysInvtCountingPeriodType::SKU:
          InsertTempSKU(ItemNo,LocationCode,VariantCode);
      END;
    END;

    LOCAL PROCEDURE InsertTempItem@11(ItemNo@1000 : Code[20]);
    BEGIN
      WITH TempItem DO BEGIN
        IF GET(ItemNo) THEN
          EXIT;

        INIT;
        "No." := ItemNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertTempSKU@21(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1003 : Code[10]);
    BEGIN
      WITH TempSKU DO BEGIN
        IF GET(LocationCode,ItemNo,VariantCode) THEN
          EXIT;

        INIT;
        "Location Code" := LocationCode;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        INSERT;
      END;
    END;

    PROCEDURE InitTempItemSKUList@33();
    BEGIN
      SetHideValidationDialog(TRUE);

      TempItem.DELETEALL;
      TempSKU.DELETEALL;
    END;

    PROCEDURE SetHideValidationDialog@7380(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    BEGIN
    END.
  }
}
