OBJECT Codeunit 99008521 BizTalk Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 number %2 has already been sent as a BizTalk document.;ESP=Ya se ha enviado %1 n£mero %2 como documento BizTalk.';
      Text001@1001 : TextConst 'ENU=There are no lines to send.;ESP=No hay l¡neas para enviar.';

    PROCEDURE ValidateData@1(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      IF PurchaseHeader."BizTalk Purchase Order" THEN
        ERROR(Text000,PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseLine.SETCURRENTKEY("Document Type","Document No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      IF NOT PurchaseLine.FIND('-') THEN
        ERROR(Text001);
    END;

    PROCEDURE TransferData@2(PurchaseHeader@1001 : Record 38) NextOutboundNo@1000 : Integer;
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      OutboundPurchaseDocumentHeader@1003 : Record 99008508;
      OutboundPurchaseDocumentLine@1004 : Record 99008509;
      PurchaseLine@1005 : Record 39;
      Item@1006 : Record 27;
      ReservEntry@1008 : Record 337;
      BizTalkReservEntry@1009 : Record 99008533;
      AmountPurchHeader@1013 : TEMPORARY Record 38;
      AmountPurchLine@1012 : TEMPORARY Record 39;
      TempVATAmountLine0@1011 : TEMPORARY Record 290;
      TempVATAmountLine1@1010 : TEMPORARY Record 290;
      BizTalkManagement@1015 : Codeunit 99008508;
      NextLineNo@1007 : Integer;
    BEGIN
      OutboundPurchaseDocumentLine.LOCKTABLE;
      OutboundPurchaseDocumentHeader.LOCKTABLE;
      IF OutboundPurchaseDocumentHeader.FIND('+') THEN
        NextOutboundNo := OutboundPurchaseDocumentHeader."Outbound Document No." + 1
      ELSE
        NextOutboundNo := 1;
      WITH OutboundPurchaseDocumentHeader DO BEGIN
        INIT;
        "Outbound Document No." := NextOutboundNo;
        "Document Type" := PurchaseHeader."Document Type";
        "No."  := PurchaseHeader."No.";
        "Buy-from Vendor No." := PurchaseHeader."Buy-from Vendor No.";
        "Pay-to Vendor No." := PurchaseHeader."Pay-to Vendor No.";
        "Pay-to Name" := PurchaseHeader."Pay-to Name";
        "Pay-to Name 2" := PurchaseHeader."Pay-to Name 2";
        "Pay-to Address" := PurchaseHeader."Pay-to Address";
        "Pay-to Address 2" := PurchaseHeader."Pay-to Address 2";
        "Pay-to City" := PurchaseHeader."Pay-to City";
        "Pay-to Contact" := PurchaseHeader."Pay-to Contact";
        "Your Reference" := PurchaseHeader."Your Reference";
        "Ship-to Code" := PurchaseHeader."Ship-to Code";
        "Ship-to Name" := PurchaseHeader."Ship-to Name";
        "Ship-to Name 2" := PurchaseHeader."Ship-to Name 2";
        "Ship-to Address" := PurchaseHeader."Ship-to Address";
        "Ship-to Address 2" := PurchaseHeader."Ship-to Address 2";
        "Ship-to City" :=  PurchaseHeader."Ship-to City";
        "Ship-to Contact" := PurchaseHeader."Ship-to Contact";
        "Order Date" := PurchaseHeader."Order Date";
        "Posting Date" := PurchaseHeader."Posting Date";
        "Expected Receipt Date" := PurchaseHeader."Expected Receipt Date";
        "Posting Description" := PurchaseHeader."Posting Description";
        "Payment Terms Code" := PurchaseHeader."Payment Terms Code";
        "Due Date" := PurchaseHeader."Due Date";
        "Payment Discount %" := PurchaseHeader."Payment Discount %";
        "Pmt. Discount Date" := PurchaseHeader."Pmt. Discount Date";
        "Shipment Method Code" := PurchaseHeader."Shipment Method Code";
        "Location Code" := PurchaseHeader."Location Code";
        "Shortcut Dimension 1 Code" := PurchaseHeader."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := PurchaseHeader."Shortcut Dimension 2 Code";
        "Vendor Posting Group" := PurchaseHeader."Vendor Posting Group";
        IF PurchaseHeader."Currency Code" <> '' THEN
          "Currency Code" := PurchaseHeader."Currency Code"
        ELSE BEGIN
          GeneralLedgerSetup.FIND('-');
          "Currency Code" := GeneralLedgerSetup."LCY Code"
        END;
        "Currency Factor" := PurchaseHeader."Currency Factor";
        "Invoice Disc. Code" := PurchaseHeader."Invoice Disc. Code";
        "Language Code" := PurchaseHeader."Language Code";
        "Purchaser Code" := PurchaseHeader."Purchaser Code";
        "Order Class" := PurchaseHeader."Order Class";
        "No. Printed" := PurchaseHeader."No. Printed";
        "On Hold" := PurchaseHeader."On Hold";
        "Applies-to Doc. Type" := PurchaseHeader."Applies-to Doc. Type";
        "Applies-to Doc. No." := PurchaseHeader."Applies-to Doc. No.";
        "Bal. Account No." := PurchaseHeader."Bal. Account No.";
        Receive := PurchaseHeader.Receive;
        Invoice := PurchaseHeader.Invoice;
        "Receiving No." := PurchaseHeader."Receiving No.";
        "Posting No." := PurchaseHeader."Posting No.";
        "Last Receiving No." := PurchaseHeader."Last Receiving No.";
        "Last Posting No." := PurchaseHeader."Last Posting No.";
        "Vendor Order No." := PurchaseHeader."Vendor Order No.";
        "Vendor Shipment No." := PurchaseHeader."Vendor Shipment No.";
        "Vendor Invoice No." := PurchaseHeader."Vendor Invoice No.";
        "Vendor Cr. Memo No." := PurchaseHeader."Vendor Cr. Memo No.";
        "VAT Registration No." := PurchaseHeader."VAT Registration No.";
        "Sell-to Customer No." := PurchaseHeader."Sell-to Customer No.";
        "Reason Code" := PurchaseHeader."Reason Code";
        "Gen. Bus. Posting Group" := PurchaseHeader."Gen. Bus. Posting Group";
        "Transaction Type" := PurchaseHeader."Transaction Type";
        "Transport Method" := PurchaseHeader."Transport Method";
        "VAT Country/Region Code" := PurchaseHeader."VAT Country/Region Code";
        "Buy-from Vendor Name" := PurchaseHeader."Buy-from Vendor Name";
        "Buy-from Vendor Name 2" := PurchaseHeader."Buy-from Vendor Name 2";
        "Buy-from Address" := PurchaseHeader."Buy-from Address";
        "Buy-from Address 2" := PurchaseHeader."Buy-from Address 2";
        "Buy-from City" := PurchaseHeader."Buy-from City";
        "Buy-from Contact" := PurchaseHeader."Buy-from Contact";
        "Pay-to Post Code" := PurchaseHeader."Pay-to Post Code";
        "Pay-to County" := PurchaseHeader."Pay-to County";
        "Pay-to Country/Region Code" := PurchaseHeader."Pay-to Country/Region Code";
        "Buy-from Post Code" := PurchaseHeader."Buy-from Post Code";
        "Buy-from County" := PurchaseHeader."Buy-from County";
        "Buy-from Country/Region Code" := PurchaseHeader."Buy-from Country/Region Code";
        "Ship-to Post Code" := PurchaseHeader."Ship-to Post Code";
        "Ship-to County" := PurchaseHeader."Ship-to County";
        "Ship-to Country/Region Code" := PurchaseHeader."Ship-to Country/Region Code";
        "Bal. Account Type" := PurchaseHeader."Bal. Account Type";
        "Order Address Code":= PurchaseHeader."Order Address Code";
        "Entry Point" := PurchaseHeader."Entry Point";
        Correction := PurchaseHeader.Correction;
        "Document Date" := PurchaseHeader."Document Date";
        Area := PurchaseHeader.Area;
        "Transaction Specification" := PurchaseHeader."Transaction Specification";
        "Payment Method Code" := PurchaseHeader."Payment Method Code";
        "No. Series" := PurchaseHeader."No. Series";
        "Posting No. Series" := PurchaseHeader."Posting No. Series";
        "Receiving No. Series" := PurchaseHeader."Receiving No. Series";
        "Tax Area Code" := PurchaseHeader."Tax Area Code";
        "Tax Liable" := PurchaseHeader."Tax Liable";
        "VAT Bus. Posting Group" := PurchaseHeader."VAT Bus. Posting Group";
        "Applies-to ID" := PurchaseHeader."Applies-to ID";
        "VAT Base Discount %" := PurchaseHeader."VAT Base Discount %";
        Comment := PurchaseHeader.Comment;
        PurchaseHeader.CALCFIELDS(Amount,"Amount Including VAT");
        Amount := PurchaseHeader.Amount;
        "Amount Including VAT" := PurchaseHeader."Amount Including VAT";
        Status := Status::Unsent;
        "BizTalk Document Type" := "BizTalk Document Type"::Order;
        "Vendor Quote No." := PurchaseHeader."Vendor Quote No.";
        INSERT;

        OutboundPurchaseDocumentLine.SETCURRENTKEY("Outbound Document No.");
        OutboundPurchaseDocumentLine.SETRANGE("Outbound Document No.",NextOutboundNo);
        IF OutboundPurchaseDocumentLine.FIND('+') THEN
          NextLineNo := OutboundPurchaseDocumentLine."Line No."
        ELSE
          NextLineNo := 0;
        WITH OutboundPurchaseDocumentLine DO BEGIN
          PurchaseLine.SETCURRENTKEY("Document Type","Document No.");
          PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
          PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
          IF PurchaseLine.FIND('-') THEN
          REPEAT
            INIT;
            NextLineNo := NextLineNo +1;
            "Line No." := NextLineNo;
            "Outbound Document No." := NextOutboundNo;
            "Document Type" := PurchaseLine."Document Type";
            "Buy-from Vendor No." := PurchaseLine."Buy-from Vendor No.";
            "Document No." := PurchaseLine."Document No.";
            Type := PurchaseLine.Type;
            "No." := PurchaseLine."No.";
            IF Item.GET(PurchaseLine."No.") THEN BEGIN
              "Common Item No." := Item."Common Item No.";
            END;
            "Location Code":= PurchaseLine."Location Code";
            "Posting Group" := PurchaseLine."Posting Group";
            "Expected Receipt Date" := PurchaseLine."Expected Receipt Date";
            Description := PurchaseLine.Description;
            "Description 2" := PurchaseLine."Description 2";
            "Unit of Measure" := PurchaseLine."Unit of Measure";
            Quantity := PurchaseLine.Quantity;
            "Outstanding Quantity" := PurchaseLine."Outstanding Quantity";
            "Qty. to Invoice" := PurchaseLine."Qty. to Invoice";
            "Qty. to Receive" := PurchaseLine."Qty. to Receive";
            "Direct Unit Cost" := PurchaseLine."Direct Unit Cost";
            "Unit Cost (LCY)" := PurchaseLine."Unit Cost (LCY)";
            "VAT %" := PurchaseLine."VAT %";

            IF PurchaseLine.Type = PurchaseLine.Type::Item THEN BEGIN
              AmountPurchLine := PurchaseLine;
              AmountPurchLine.INSERT;
              IF PurchaseHeader.Status = PurchaseHeader.Status::Open THEN BEGIN
                AmountPurchHeader := PurchaseHeader;
                AmountPurchHeader.INSERT;
                AmountPurchHeader.Status := AmountPurchHeader.Status::Released;
                AmountPurchLine.SetPurchHeader(AmountPurchHeader);
                AmountPurchLine.CalcVATAmountLines(0,AmountPurchHeader,AmountPurchLine,TempVATAmountLine0);
                AmountPurchLine.CalcVATAmountLines(1,AmountPurchHeader,AmountPurchLine,TempVATAmountLine1);
                AmountPurchLine.UpdateVATOnLines(0,AmountPurchHeader,AmountPurchLine,TempVATAmountLine0);
                AmountPurchLine.UpdateVATOnLines(1,AmountPurchHeader,AmountPurchLine,TempVATAmountLine1);
                AmountPurchHeader.DELETE;
              END;
              OutboundPurchaseDocumentLine."Line Discount %" := AmountPurchLine."Line Discount %";
              OutboundPurchaseDocumentLine."Line Discount Amount" := AmountPurchLine."Line Discount Amount";
              OutboundPurchaseDocumentLine.Amount := AmountPurchLine.Amount;
              OutboundPurchaseDocumentLine."Amount Including VAT" := AmountPurchLine."Amount Including VAT";
            END;

            "Unit Price (LCY)" := PurchaseLine."Unit Price (LCY)";
            "Allow Invoice Disc." := PurchaseLine."Allow Invoice Disc.";
            "Gross Weight" := PurchaseLine."Gross Weight";
            "Net Weight" := PurchaseLine."Net Weight";
            "Units per Parcel" := PurchaseLine."Units per Parcel";
            "Unit Volume" := PurchaseLine."Unit Volume";
            "Appl.-to Item Entry" := PurchaseLine."Appl.-to Item Entry";
            "Shortcut Dimension 1 Code" := PurchaseLine."Shortcut Dimension 1 Code";
            "Shortcut Dimension 2 Code" := PurchaseLine."Shortcut Dimension 2 Code";
            "Job No." := PurchaseLine."Job No.";
            "Indirect Cost %" := PurchaseLine."Indirect Cost %";
            "Outstanding Amount" := PurchaseLine."Outstanding Amount";
            "Qty. Rcd. Not Invoiced" := PurchaseLine."Qty. Rcd. Not Invoiced";
            "Amt. Rcd. Not Invoiced" := PurchaseLine."Amt. Rcd. Not Invoiced";
            "Quantity Received" := PurchaseLine."Quantity Received";
            "Quantity Invoiced" := PurchaseLine."Quantity Invoiced";
            "Receipt No." := PurchaseLine."Receipt No.";
            "Receipt Line No." := PurchaseLine."Receipt Line No.";
            "Profit %" := PurchaseLine."Profit %";
            "Pay-to Vendor No." := PurchaseLine."Pay-to Vendor No.";
            "Inv. Discount Amount" := PurchaseLine."Inv. Discount Amount";
            "Vendor Item No." := PurchaseLine."Vendor Item No.";
            "Sales Order No." := PurchaseLine."Sales Order No.";
            "Sales Order Line No." := PurchaseLine."Sales Order Line No.";
            "Drop Shipment" := PurchaseLine."Drop Shipment";
            "Gen. Bus. Posting Group" := PurchaseLine."Gen. Bus. Posting Group";
            "Gen. Prod. Posting Group" := PurchaseLine."Gen. Prod. Posting Group";
            "VAT Calculation Type" := PurchaseLine."VAT Calculation Type";
            "Transaction Type" := PurchaseLine."Transaction Type";
            "Transport Method" := PurchaseLine."Transport Method";
            "Attached to Line No." := PurchaseLine."Attached to Line No.";
            "Entry Point" := PurchaseLine."Entry Point";
            Area := PurchaseLine.Area;
            "Transaction Specification" := PurchaseLine."Transaction Specification";
            "Tax Area Code" := PurchaseLine."Tax Area Code";
            "Tax Liable" := PurchaseLine."Tax Liable";
            "Tax Group Code" := PurchaseLine."Tax Group Code";
            "Use Tax" := PurchaseLine."Use Tax";
            "VAT Bus. Posting Group" := PurchaseLine."VAT Bus. Posting Group";
            "VAT Prod. Posting Group" := PurchaseLine."VAT Prod. Posting Group";
            "Outstanding Amount (LCY)" := PurchaseLine."Outstanding Amount (LCY)";
            "Amt. Rcd. Not Invoiced (LCY)" := PurchaseLine."Amt. Rcd. Not Invoiced (LCY)";
            "Blanket Order No." := PurchaseLine."Blanket Order No.";
            "Blanket Order Line No." := PurchaseLine."Blanket Order Line No.";
            "VAT Base Amount" := PurchaseLine."VAT Base Amount";
            "Unit Cost" := PurchaseLine."Unit Cost";
            "System-Created Entry" := PurchaseLine."System-Created Entry";
            "Prod. Order No." := PurchaseLine."Prod. Order No.";
            "Variant Code" := PurchaseLine."Variant Code";
            "Bin Code" := PurchaseLine."Bin Code";
            "Qty. per Unit of Measure" := PurchaseLine."Qty. per Unit of Measure";
            "Unit of Measure Code" := PurchaseLine."Unit of Measure Code";
            "Quantity (Base)" := PurchaseLine."Quantity (Base)";
            "Outstanding Qty. (Base)" := PurchaseLine."Outstanding Qty. (Base)";
            "Qty. to Invoice (Base)" := PurchaseLine."Qty. to Invoice (Base)";
            "Qty. to Receive (Base)" := PurchaseLine."Qty. to Receive (Base)";
            "Qty. Rcd. Not Invoiced (Base)" := PurchaseLine."Qty. Rcd. Not Invoiced (Base)";
            "Qty. Received (Base)" := PurchaseLine."Qty. Received (Base)";
            "Qty. Invoiced (Base)" := PurchaseLine."Qty. Invoiced (Base)";
            "Reserved Qty. (Base)" := PurchaseLine."Reserved Qty. (Base)";
            "FA Posting Date" := PurchaseLine."FA Posting Date";
            "FA Posting Type" := PurchaseLine."FA Posting Type";
            "Depreciation Book Code" := PurchaseLine."Depreciation Book Code";
            "Salvage Value" := PurchaseLine."Salvage Value";
            "Depr. until FA Posting Date" := PurchaseLine."Depr. until FA Posting Date";
            "Depr. Acquisition Cost" := PurchaseLine."Depr. Acquisition Cost";
            "Maintenance Code" := PurchaseLine."Maintenance Code";
            "Insurance No." := PurchaseLine."Insurance No.";
            "Budgeted FA No." := PurchaseLine."Budgeted FA No.";
            "Duplicate in Depreciation Book" := PurchaseLine."Duplicate in Depreciation Book";
            "Use Duplication List" := PurchaseLine."Use Duplication List";
            INSERT;

            ReservEntry.SETCURRENTKEY(
              "Source ID","Source Ref. No.","Source Type","Source Subtype",
              "Source Batch Name","Source Prod. Order Line","Reservation Status");
            ReservEntry.SETRANGE("Source ID",PurchaseHeader."No.");
            ReservEntry.SETRANGE("Source Ref. No.",PurchaseLine."Line No.");
            ReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
            ReservEntry.SETRANGE("Source Subtype",PurchaseHeader."Document Type");
            IF ReservEntry.FIND('-') THEN
              REPEAT
                IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN BEGIN
                  BizTalkReservEntry.INIT;
                  BizTalkReservEntry."BizTalk Document No." :=
                    OutboundPurchaseDocumentHeader."Outbound Document No.";
                  BizTalkReservEntry."Biztalk Document Direction" :=
                    BizTalkReservEntry."Biztalk Document Direction"::Outbound;
                  BizTalkReservEntry."Source Type" := DATABASE::"Purchase Line";
                  BizTalkReservEntry."BizTalk Document Line No." :=
                    OutboundPurchaseDocumentLine."Line No.";
                  BizTalkReservEntry.TRANSFERFIELDS(ReservEntry);
                  BizTalkReservEntry."Item No." :=
                    BizTalkManagement.SetItemNoOnPurchBizReservEntry(
                      OutboundPurchaseDocumentLine,
                      OutboundPurchaseDocumentLine."Buy-from Vendor No.");
                  BizTalkReservEntry.INSERT;
                END;
              UNTIL ReservEntry.NEXT = 0;

          UNTIL PurchaseLine.NEXT = 0;
        END;
      END;
    END;

    BEGIN
    END.
  }
}
