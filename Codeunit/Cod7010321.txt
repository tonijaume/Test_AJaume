OBJECT Codeunit 7010321 Facturacion ingresos
{
  OBJECT-PROPERTIES
  {
    Date=10/06/15;
    Time=15:56:26;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100244033 : TextConst 'ESP=FACTURAR';
      Text001@1100244034 : TextConst 'ESP=Comprobando datos #1#\';
      Text002@1100244035 : TextConst 'ESP=Creando cabecera  #2#\';
      Text003@1100244036 : TextConst 'ESP=Creando lineas    @3@@@@@@@@';
      Text004@1100244037 : TextConst 'ESP=OK';
      Text005@1100244038 : TextConst 'ESP=LINEA BASE';
      Text006@1100244039 : TextConst 'ESP=LINEA ZONA';
      Text007@1100244040 : TextConst 'ESP=IMPORTE DE LAS MALETAS INCLUIDAS';
      Text008@1100244041 : TextConst 'ESP=MALETAS';
      Text009@1100244042 : TextConst 'ESP=SUPLEMENTO';
      Text010@1100244043 : TextConst 'ESP="RESUMEN ZONA "';
      Text011@1100244044 : TextConst 'ESP=RESUMEN ZONA';
      Text012@1100244045 : TextConst 'ESP=EXTRA';
      Text013@1100244046 : TextConst 'ESP=No hay ning£n servicio pendiente de facturar por los siguientes conceptos: \';
      Text014@1100244047 : TextConst 'ESP="Garaje=  %1"';
      Text015@1100244048 : TextConst 'ESP="Cliente= %1"';
      Text016@1100244049 : TextConst 'ESP="Touroperador= %1"';
      Text017@1100244050 : TextConst 'ESP="Fechas= %1 - %2"';
      Text018@1100244051 : TextConst 'ESP="Tipo de Servicio= %1"';
      Text019@1100244052 : TextConst 'ESP="Codigos de Servicio= %1"';
      Text020@1100244053 : TextConst 'ESP="Tipo de Vehiculo= %1"';
      Text021@1100244054 : TextConst 'ESP="Zona de Precios= %1"';
      Text022@1100244055 : TextConst 'ESP=EXTRAS';
      Text023@1100244056 : TextConst 'ESP=ZONA';
      Text024@1100244057 : TextConst 'ESP=%1/%2 Tiene asignado un grupo de facturacion. No puede facturarse directamente';
      Text025@1103350003 : TextConst 'ESP=El total a facturar es 0. No se va a generar prefactura\¨Desea marcar las lineas de ingreso como Facturadas?';
      Text026@1103350004 : TextConst 'ESP=FACTURADO 0';
      Text027@1100253000 : TextConst 'ESP=Abono Factura %1';
      text_menu1@1100244000 : TextConst 'ESP=&Prefacturar,&Facturar';
      no_cliente@1100244001 : TextConst 'ESP=No se ha especificado cliente.';
      no_touroperador@1100244002 : TextConst 'ESP=No se ha especificado Touroperador.';
      no_garaje@1100244003 : TextConst 'ESP=No se ha especificado Garaje.';
      no_fecha_desde@1100244004 : TextConst 'ESP=No se ha especificado fecha de inicio de periodo.';
      no_fecha_hasta@1100244005 : TextConst 'ESP=No se ha especificado fecha de final de periodo.';
      no_composicion@1100244006 : TextConst 'ESP=No existe la composicion cliente %1 Touroperador %2.';
      no_servicios1@1100244007 : TextConst 'ESP=No hay servicios pendientes de facturar para el garaje %1 cliente %2 touroperador %3 y fechas %4-%5';
      no_servicios2@1100244008 : TextConst 'ESP=No hay servicios pendientes de facturar para el garaje %1 cliente %2 touroperador %3 de tipo %4 y fechas %5-%6';
      no_servicios3@1100244009 : TextConst 'ESP=No hay servicios pendientes de facturar para el garaje %1 cliente %2 touroperador %3 de fechas %4-%5 y servicios %6';
      no_servicios4@1100244010 : TextConst 'ESP=No hay servicios pendientes de facturar para el garaje %1 cliente %2 touroperador %3 de tipo %4 de fechas %5-%6 y servicios %7';
      no_servicios_marca@1100244011 : TextConst 'ESP=No hay servicios pendientes de facturar para el garaje %1 cliente %2 touroperador %3 marcados con usuario %4';
      no_prevision@1100244012 : TextConst 'ESP=Algun servicio no han generado la prevision de coste-ingreso.';
      no_condicion@1100244013 : TextConst 'ESP=No existe ninguna definicion de condiciones de facturacion para el cliente %1 Touroperador %2.';
      confirma1@1100244014 : TextConst 'ESP=Desea facturar la prefactura N§ %1.';
      pre_ya_facturada@1100244015 : TextConst 'ESP=No se puede facturar una prefactura ya facturada.';
      no_contrato@1100244016 : TextConst 'ESP=No existe contrato para Cliente %1, Touroperador %2 en la fecha %3.';
      texto_registro@1100244017 : TextConst 'ESP=Servicios del dia %1 al dia %2';
      no_juntar_servicios@1100244018 : TextConst 'ESP=No se pueden juntar tipos de servicio en una factura.';
      especificar_un_tipo@1100244019 : TextConst 'ESP=Debe especificar un tipo de servicio para la factura.';
      descrip1@1100244020 : TextConst 'ESP=del dia';
      descrip2@1100244021 : TextConst 'ESP=Ingreso por Maletas';
      descrip3@1100244022 : TextConst 'ESP=Ingresos zona';
      ventana@1100244023 : Dialog;
      w_tipolinea@1100244024 : 'Base,Suplemento,Maletas,Comentario,Zona,Resumen Zona,Solo Resumen Zona,Extra';
      descrip4@1100244025 : TextConst 'ESP=Servicios dia';
      descrip5@1100244026 : TextConst 'ESP=Codigo';
      descrip6@1100244027 : TextConst 'ESP=zona';
      mismo_contrato@1100244028 : TextConst 'ESP=Todos los servicios deben pertenecer al mismo contrato ya que hay condiciones como los impuestos y maletas que dependen del contrato.';
      no_prefacturas@1100244029 : TextConst 'ESP=No se ha encontrado ninguna prefactura con los parametros indicados';
      confirma2@1100244030 : TextConst 'ESP=Desea facturar las prefacturas indicadas';
      No_iguales1@1100244031 : TextConst 'ESP=Se han encontrado prefacturas con N§ de contrato distinto';
      No_iguales2@1100244032 : TextConst 'ESP=Se han encontrado prefacturas con Garaje  Distinto';
      rLinFac@1100244058 : Record 7010417;
      Text_LinMaletas@1103350000 : TextConst 'ESP=MALETAS';
      rPar@1103350001 : Record 7010311;
      cFunFact@1103350002 : Codeunit 7010406;
      cFunAuto@1103350005 : Codeunit 7035326;
      cFunBas@1103355000 : Codeunit 7010310;

    PROCEDURE facturacion_ingresos@1(VAR prPI@1100244000 : Record 7035392);
    VAR
      lrCond@1100244004 : Record 7010420;
      w_opcion@1100244001 : Integer;
      OPCION_RESTRINGIDA@1100244002 : TextConst 'ESP=Se ha restringido el uso de esta acci¢n. Dirijase a su administrador.';
      cFunBas@1100244003 : Codeunit 7010310;
    BEGIN
      // facturacion_ingresos
      //
      // AJS --> Rutina encargada de crear primero la prefactura de venta para posteriormente crear
      //         la factura de venta para el cliente.

      IF cFunBas.TestRestriccion(Text000) THEN
        ERROR(OPCION_RESTRINGIDA);

      IF prPI."N§ Prefactura"='' THEN
        w_opcion :=1
      ELSE
        w_opcion :=2;

      w_opcion := STRMENU(text_menu1, w_opcion);
      IF w_opcion = 0 THEN
        EXIT;
      IF w_opcion = 1 THEN
        crear_prefactura(prPI,lrCond,FALSE);
      IF w_opcion = 2 THEN
        crear_factura(prPI,lrCond, FALSE);
    END;

    PROCEDURE crear_prefactura@4(VAR prPI@1100244000 : Record 7035392;VAR rCond@1100244001 : Record 7010420;pwAuto@1100244014 : Boolean) : Boolean;
    VAR
      rPI@1100244002 : Record 7035392;
      rPI2@1000000000 : Record 7035392;
      rPreFact@1100244004 : Record 7010415;
      rPar@1100244005 : Record 7010311;
      rCondFra@1100244007 : Record 7010416;
      rCon@1100244008 : Record 7010403;
      w_importe_maletas@1100244009 : Decimal;
      w_importe_maletas_sin@1100244010 : Decimal;
      w_grupo_iva_maletas@1100244011 : Code[10];
      lrZonPref@1100244012 : Record 7010418;
      lwFecha@1100244013 : Date;
    BEGIN
      // crear_prefactura
      //
      // AJS --> Crear prefacturas, hay que solicitar del usuario, el cliente, touroperador, garaje,
      //         las fechas desde-hasta los servicios que se desean facturar y el metodo de
      //         facturacion que en principio sera el especificado en la composicion de cliente-TO
      //         para el tipo de servicio.
      //         pwAuto- Indica si se la facturar automaticamente, con lo cual la tabla de condiciones ya estara rellenada
      //         En caso de facturaci¢n automatica si no encuentra nada que facturar devuelve false

      rPar.FINDFIRST;
      CASE rPar."Empresa Real" OF
        rPar."Empresa Real"::TRN, rPar."Empresa Real"::UEX,
        rPar."Empresa Real"::TER, rPar."Empresa Real"::CNT : EXIT(cFunFact.CrearPrefactura(prPI,rCond,pwAuto));
      END;

      IF NOT pwAuto THEN BEGIN

        // AJF 07/01/09
        // Evito borrar el registro, ya que ahora tiene datos permanentes.
        IF rCond.GET(USERID) THEN
          rCond.LimpiaRegistro
        ELSE BEGIN
          rCond.INIT;
          rCond.Usuario := USERID;
          rCond.INSERT;
        END;

        // ---- Localizar las condiciones de facturacion de cliente-to para el tipo de servicio  ----
        // ---- que se intenta facturar.                                                         ----

        rCondFra.RESET;
        IF rCondFra.GET(prPI."Cliente Operativo", prPI.Touroperador, prPI."Tipo Servicio Fijo") THEN BEGIN
          rCond."Tipo prefactura" := rCondFra."Tipo prefactura";
          rCond."Tipo factura"    := rCondFra."Tipo factura";
        END;
        rPar.FINDFIRST;
        rCond.Facturando       := TRUE;
        rCond.Cliente          := prPI."Cliente Operativo";
        rCond.Touroperador     := prPI.Touroperador;
        rCond.Garaje           := prPI.Garaje;
        rCond."Fecha desde"    := prPI.Fecha;
        rCond."Fecha hasta"    := prPI.Fecha;
        rCond."Tipos servicio" := prPI."Tipo servicio";
        rCond.Referencia       := prPI.Referencia;

        // AJF 13/03/08 - DRF 07002
        // Sugerimos el descuento predeterminado que aparece en el Contrato de Venta.
        // Tenemos que recuperar el contrato ya que la variable no se inicializa hasta que se ejecuta errores_previos.

        rCon.SETFILTER(Garaje, '%1|%2', prPI.Garaje, rPar."Todos los garajes");
        rCon.SETRANGE ("N§ Contrato" , prPI."N§ Contrato");
        rCon.FINDFIRST;

        rCond."% Dto" := rCon."% Descuento";

        // ----  AJS 4.03.2002  Abrir la posibilidad de que el usuario pueda indicar la fecha de registro de la factura
        { JPT 14/07/05 La fecha de factura vendr  dada por la ultima fecha facturada
        rCond."Fecha Factura" := prPI.Fecha;}
        rCond."Fecha Factura" := cFunAuto.BuscaFechaFactura;

        IF rPar."Tipo Vehiculo en prefactura" THEN
          rCond."Tipos Vehiculo"  := prPI."Tipo Vehiculo";

        rCond.MODIFY;
        rCond.FILTERGROUP(2);
        rCond.SETRANGE(Usuario, USERID);
        rCond.FILTERGROUP(0);

        COMMIT;
        IF FORM.RUNMODAL(7035253, rCond) <> ACTION::OK THEN
          EXIT;
        rCond.GET(USERID);

      END;

      // Comprobar que se han rellenado los campos necesarios para hacer la prefactura
      // Si es pwAuto y no encuentra nada a facturar devuelve false
      IF NOT errores_previos(rCond, rPI, rCondFra, rCon) THEN
        EXIT(FALSE);

      IF NOT ComprobarImporte0(rPI) THEN
        EXIT(FALSE);

      // Crear un registro en el fichero de prefacturas
      //
      rPreFact.RESET; rPreFact.INIT;
      rPreFact.INSERT(TRUE);
      rPreFact.Cliente                := rCond.Cliente;
      rPreFact.Touroperador           := rCond.Touroperador;
      // rPreFact.Garaje                 := rCond.Garaje;
      rPreFact."Texto Registro"       := rCond."Texto Registro";
      rPreFact."% Dto"                := rCond."% Dto";
      //rPreFact."Mostrar Descuentos"   := rCond."Imprimir Descuentos";
      IF NOT rCond."Facturar sobre marca" THEN BEGIN
        rPreFact."Fecha desde"          := rCond."Fecha desde";
        rPreFact."Fecha hasta"          := rCond."Fecha hasta";
        rPreFact."Tipos Servicio"       := rCond."Tipos servicio";
        rPreFact."Codigos Servicio"     := rCond."Codigos Servicio";
        rPreFact."Zonas de Precio"      := rCond."Zonas Precio";
        rPreFact."Tipos Vehiculo"    := rCond."Tipos Vehiculo";
        // AJS 24.02.2004
        // Utilizamos el campo Referencia para marcar lo que deseamos prefacturar

        rPreFact."Referencia cliente" := rCond.Referencia;
      END
      ELSE BEGIN
        // AJS 17.08.2005
        // Eliminar este codigo para mejorar el rendimiento, cogeremos las fechas de condiciones temporales como en
        // el resto de facturas

        //rPI.SETCURRENTKEY(Fecha);
        //IF rPI.FINDFIRST THEN
        //  rPreFact."Fecha desde" := rPI.Fecha;
        //IF rPI.FINDLAST THEN
        //  rPreFact."Fecha hasta" := rPI.Fecha;

        rPreFact."Fecha desde"          := rCond."Fecha desde";
        rPreFact."Fecha hasta"          := rCond."Fecha hasta";
      END;

      rPreFact."Facturar sobre marca" := rCond."Facturar sobre marca";
      // Rellenar la informacion de las condiciones de facturacion a partir de la informacion en
      // la composicion Cliente/TTOO para el tipo de servicio a facturar.
      //
      rPreFact."Tipo prefactura"   := rCond."Tipo prefactura";
      rPreFact."Tipo factura"      := rCond."Tipo factura";

      // ----  AJS 4.03.2002  Abrir la posibilidad de que el usuario pueda indicar la fecha de registro de la factura

      IF rCond."Fecha Factura" <> 0D THEN
        rPreFact."Fecha Registro factura" := rCond."Fecha Factura"
      ELSE
        rPreFact."Fecha Registro factura" := TODAY;

      // ----  AJS 29.05.2003 Incluir la posibilidad de seleccionar los servicios en funcion de la propiedad del vehiculo  ----
      // ----  para facturar por separado los servicios realizados por la flota propia y los subcontratados                ----

      rPreFact."Propiedad vehiculos" := rCond."Propiedad vehiculos";

      rPreFact."N§ Contrato"       := rCon."N§ Contrato";
      rPreFact.Garaje              := rCon.Garaje;
      rPreFact."Texto alternativo" := rCond."Texto alternativo";
      rPreFact."Cod. Divisa"       := rCon."Cod. Divisa";
      rPreFact."Impuesto Incluidos":= rCon."Impuestos incluidos";
      rPreFact."Modo Desglose Transportados" := rCond."Modo Desglose Transportados";
      rPreFact."N§ factura agencia":= rCond."N§ factura agencia";
      rPreFact."Servicio Regular" := rCond."Servicio Repetitivo";
      rPreFact."Zona Trabajo"        := prPI."Zona facturacion";
      //rPreFact."Tipos Servicio"    :=
      rPreFact.MODIFY;
      // Llamar al proceso de creacion de las lineas de prefactura.
      //
      rPar.FINDFIRST;
      CASE rPreFact."Tipo prefactura" OF
        rPreFact."Tipo prefactura"::"Sin resumen",
        rPreFact."Tipo prefactura"::"Texto alternativo",
        rPreFact."Tipo prefactura"::"Resumen x Referencia": BEGIN
          w_importe_maletas     := 0;
          w_importe_maletas_sin := 0;
          w_grupo_iva_maletas   := '';
          rPI.SETCURRENTKEY("N§ Prefactura",Garaje,"Cliente Operativo",Touroperador,Fecha,"N§ Parte","Zona Precios");

          prefactura_sin_resumen(rPreFact, rPI, rPar, w_importe_maletas, TRUE,
                                  w_importe_maletas_sin, w_grupo_iva_maletas, TRUE,lrZonPref);
        END;
        rPreFact."Tipo prefactura"::"Resumen x Codigo":
          prefactura_resumen_codigo(rPreFact, rPI, rPar);
        rPreFact."Tipo prefactura"::"Resumen x Zona":
          prefactura_resumen_zona(rPreFact, rPI, rPar);
        rPreFact."Tipo prefactura"::"Resumen x Vuelo":
          prefactura_resumen_vuelo(rPreFact, rPI, rPar);
        rPreFact."Tipo prefactura"::"Resumen x Dia-Codigo":
          prefactura_resumen_dia_codigo(rPreFact, rPI, rPar);
        rPreFact."Tipo prefactura"::"Resumen x Zona-Detalle":
          prefactura_resumen_zona_detall(rPreFact, rPI, rPar);
        rPreFact."Tipo prefactura"::"Resumen x Zona Dia-Codigo":
          prefac_resumen_zona_dia_codigo(rPreFact, rPI, rPar);
      END;

      // TRN agrupa por concepto facturacion
      // AJS MOMENTANEAMENTE NO SE HACE
      //IF rPar."Empresa Real"=rPar."Empresa Real"::TRN THEN
      //  AgrupaLinPrefact(rPreFact);

      // Si solo es una factura de prueba no la tenemos en cuenta
      IF rCond."Prefactura Prueba" THEN
        rPreFact.Desactiva
      ELSE
      BEGIN
        // Marcar todas las lineas de coste-ingreso con el n§ de prefactura.
        IF rPI.FINDSET(TRUE,TRUE) THEN
        BEGIN
          rPI.LimpiaTemp;
          REPEAT
            rPI2 := rPI;
            rPI2.VALIDATE("N§ Prefactura", rPreFact."N§ Prefactura");
            rPI2.MODIFY;
          UNTIL rPI.NEXT = 0;
        END;
      END;

      // JPT 31/07/09 Indicamos un orden a las lineas
      rPreFact.Reordena;

      IF rCond.Imprimir THEN
      BEGIN
        rPreFact.SETRECFILTER;
        ImprimePrefact(rPreFact);
      END;

      // JPT- Desmarca todos todas las marcas de usuario
      // ----  AJS 05.06.2003  Filtramos por numero de prefactura porque sino la rutina no pilla las lineas  ----
      // ----  recien marcadas                                                                               ----

      rPI.SETRANGE("N§ Prefactura", rPreFact."N§ Prefactura");
      rPI.MarcaTodo('', rPI);

      IF pwAuto THEN
      BEGIN // Si es automatica anotamos el numero de prefactura a facturar
        rCond."N§ Prefactura" := rPreFact."N§ Prefactura";
        rCond.MODIFY;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE crear_factura@5(prPI@1100244000 : Record 7035392;VAR rCond@1100244022 : Record 7010420;pwAuto@1100244020 : Boolean);
    VAR
      rCab@1100244001 : Record 36;
      rCli@1100244002 : Record 18;
      rCon@1100244003 : Record 7010403;
      rConf@1100244004 : Record 311;
      rPreFact@1100244006 : Record 7010415;
      rPI@1100244007 : Record 7035392;
      rCom@1100244008 : Record 44;
      rPar@1100244009 : Record 7010311;
      rLista@1100244010 : Record 7035384;
      lrDescuento@1103355000 : Record 19;
      lrLinFra@1103355001 : Record 37;
      lwTextAux@1100244012 : Text[250];
      rPreFact2@1100244013 : Record 7010415;
      lwVariasPrefacturas@1100244014 : Boolean;
      lwGarajeAux@1100244015 : Code[10];
      lwContratoAux@1100244016 : Code[10];
      lwTipoServicio@1100244017 : Code[10];
      rPI2@1100244018 : Record 7035392;
      lwTextodeRegistro@1100244019 : Text[90];
      lwImprime@1100244021 : Boolean;
      lcRelease@1000000000 : Codeunit 414;
    BEGIN
      // crear_factura
      //
      // AJS --> Solicita del usuario que prefactura facturar, comprobar que no este facturada
      //         y en funcion del sistema de facturacion de la prefactura crear la cabecera y las
      //         lineas.
      //         pwAuto- Indica si se la facturar automaticamente, con lo cual la tabla de condiciones ya estara rellenada
      //

      CLEAR(rPar);
      rPar.FINDFIRST;

      CASE rPar."Empresa Real" OF
        rPar."Empresa Real"::TRN, rPar."Empresa Real"::UEX,
        rPar."Empresa Real"::TER, rPar."Empresa Real"::CNT :
        BEGIN
          cFunFact.CrearFactura(prPI,rCond,pwAuto,FALSE);
          EXIT;
        END;
      END;

      IF NOT pwAuto THEN BEGIN

        // AJF 07/01/09
        // Evito borrar el registro, ya que ahora tiene datos permanentes.
        IF rCond.GET(USERID) THEN
          rCond.LimpiaRegistro
        ELSE BEGIN
          rCond.INIT;
          rCond.Usuario := USERID;
          rCond.INSERT;
        END;

        rCond."N§ Prefactura" := prPI."N§ Prefactura";
        rPreFact2.RESET;
        IF rPreFact2.GET(prPI."N§ Prefactura") THEN BEGIN
          rCond.Facturando := TRUE;
          rCond.Cliente := rPreFact2.Cliente;
          rCond.Touroperador :=  rPreFact2.Touroperador;
          rCond."Fecha desde" := rPreFact2."Fecha desde";
          rCond."Fecha hasta" := rPreFact2."Fecha hasta";
          rCond."Tipo factura":= rPreFact2."Tipo factura";
          rCond."N§ factura agencia" := rPreFact2."N§ factura agencia";
          END;
        rCond.MODIFY;

        rCond.FILTERGROUP(2);
        rCond.SETRANGE(Usuario, USERID);
        rCond.FILTERGROUP(0);
        COMMIT;
        IF FORM.RUNMODAL(7035252, rCond) <> ACTION::OK THEN
          EXIT;
        rCond.GET(USERID);
      END;

      // Si no encuentra n§prefactura en Condiciones temporales, busca la selecci¢n
      // y crea una prefactura con todas ellas

      IF NOT pwAuto THEN
        lwVariasPrefacturas := rCond."N§ Prefactura" = ''
      ELSE
        lwVariasPrefacturas := FALSE;

      IF lwVariasPrefacturas  THEN BEGIN
        rPreFact2.RESET;
        rPreFact2.SETCURRENTKEY(Fecha,Cliente,Touroperador,Facturada);
        rPreFact2.SETRANGE (Facturada, FALSE);
        rPreFact2.SETRANGE (Cliente , rCond.Cliente);
        rPreFact2.SETRANGE (Touroperador , rCond.Touroperador);
        IF rCond."Fecha desde" <> 0D THEN
          rPreFact2.SETFILTER ("Fecha desde", '>= %1' , rCond."Fecha desde");
        IF rCond."Fecha hasta" <> 0D THEN
          rPreFact2.SETFILTER ("Fecha hasta", '<= %1' , rCond."Fecha hasta");
        IF NOT CONFIRM(confirma2, TRUE) THEN
          EXIT;
        IF NOT rPreFact2.FINDSET THEN
          ERROR (no_prefacturas);

        // comprueba que en la relaci¢n de prefacturas no haya dos con
        // Garaje  N§ Contrato distinto
        lwGarajeAux   := rPreFact2.Garaje;
        lwContratoAux := rPreFact2."N§ Contrato";
        lwTextodeRegistro :='';
        REPEAT
          IF lwContratoAux <> rPreFact2."N§ Contrato" THEN
            ERROR(No_iguales1);
          IF lwGarajeAux <> rPreFact2.Garaje THEN
            ERROR(No_iguales2);
          IF STRLEN(lwTextodeRegistro) + STRLEN(rPreFact2."Texto Registro") +1 <90 THEN BEGIN
            IF lwTextodeRegistro<>'' THEN
              lwTextodeRegistro := lwTextodeRegistro +'-';
            lwTextodeRegistro := lwTextodeRegistro + rPreFact2."Texto Registro";
          END;

        UNTIL rPreFact2.NEXT = 0;

        rPreFact2.FINDSET;

        // Crea la nueva prefactura que englobar  a las anteriores

        rPreFact.RESET;
        rPreFact.INIT;
        rPreFact.INSERT(TRUE);
        rPreFact.Cliente           := rCond.Cliente;
        rPreFact.Touroperador      := rCond.Touroperador;
        rPreFact.Garaje            := rPreFact2.Garaje;
        rPreFact."Tipo prefactura" := rCond."Tipo factura";
        rPreFact."Tipo factura"    := rCond."Tipo factura";
        rPreFact."Fecha desde"     := rCond."Fecha desde";
        rPreFact."Fecha hasta"     := rCond."Fecha hasta";
        rPreFact."N§ Contrato"     := rPreFact2."N§ Contrato";
        rPreFact."Texto Registro"  := lwTextodeRegistro;
        rPreFact.MODIFY;
        rPreFact.SETRANGE ("N§ Prefactura" , rPreFact."N§ Prefactura");
      END
      ELSE BEGIN
      // Si encuentra n§Prefactura en "Condiciones Temporales" factura solo esa
        rPreFact.SETRANGE ("N§ Prefactura" , rCond."N§ Prefactura");
        IF NOT pwAuto THEN
          IF NOT CONFIRM(confirma1, TRUE, rCond."N§ Prefactura") THEN
            EXIT;
        rPreFact.GET(rCond."N§ Prefactura");
        IF rPreFact.Facturada THEN
          ERROR(pre_ya_facturada);
        IF rCond."Tipo factura" <> rPreFact."Tipo factura" THEN BEGIN
          rPreFact."Tipo factura" := rCond."Tipo factura";
          rPreFact.MODIFY;
        END;
      END;

      rPI.RESET;
      rPI.SETCURRENTKEY("N§ Prefactura");
      IF NOT lwVariasPrefacturas THEN BEGIN
        rPI.SETRANGE("N§ Prefactura", rCond."N§ Prefactura");
      END
      ELSE BEGIN
        // FILTRA rPI POR LAS PREFACTURAS SELECCIONADAS
        // Para ello prepara un filtro con todas las prefacturas (que caben en una  cadena de 250)
        lwTextAux := '';
        IF rPreFact.FINDSET THEN
          REPEAT
            IF STRLEN(lwTextAux) + STRLEN(rPreFact2."N§ Prefactura") + 1 < 250 THEN BEGIN
              IF lwTextAux <> '' THEN
                lwTextAux := lwTextAux + ' | ';
              lwTextAux := lwTextAux + rPreFact2."N§ Prefactura";
            END;
          UNTIL rPreFact2.NEXT = 0;
        rPI.SETFILTER ("N§ Prefactura" , lwTextAux);
        rPI.MODIFYALL("N§ Prefactura", rPreFact."N§ Prefactura",TRUE);
        rPI.SETRANGE ("N§ Prefactura", rPreFact."N§ Prefactura");
      END;

      IF rPI.FINDSET THEN BEGIN
        IF NOT pwAuto THEN
          ventana.OPEN(Text001 +
                       Text002 +
                       Text003);
        // Hay comprobar que exista el contrato, la configuracion basica de ventas y cobros y el
        // cliente de facturacion de la composicion Cliente/TTOO.
        //
        comprobar_datos_factura(rPI, rPreFact, rCli, rCon, rConf, rPar);
        IF NOT pwAuto THEN
          ventana.UPDATE(1, Text004);
        // Crear la cabecera de factura de venta, comprobando si tiene que ser una factura
        // o un abono.

        rPI.CALCSUMS("Importe sin impuesto");

        // ----  Se pasa por parametro el campo de factura agencia que si esta rellenado sera  ----
        // ----  el numero de factura financials                                               ----

        IF rPI."Importe sin impuesto" > 0 THEN
          crear_cabecera(rCab, rCli, rCon, rConf, rPreFact, FALSE, rCond."N§ factura agencia", rCond."Facturar sobre marca")
        ELSE
          crear_cabecera(rCab, rCli, rCon, rConf, rPreFact, TRUE, rCond."N§ factura agencia", rCond."Facturar sobre marca");

        lwImprime := rCond.Imprimir;

        // AJF 26/03/08 - IBZ DRF 07002
        // A¤adimos el descuento a tabla 19 - Cust. Invoice Disc.

        lrDescuento.INIT;
        lrDescuento.Code         := rPreFact."N§ Prefactura";
        lrDescuento."Discount %" := rPreFact."% Dto";
        lrDescuento.INSERT;

        rPreFact.Facturada        := TRUE;
        rPreFact."N§ Factura"     := rCab."No.";
        rPreFact."Tipo Documento" := rCab."Document Type";
        rPreFact."N§ factura agencia" := rCond."N§ factura agencia";
        rPreFact.MODIFY;

        IF NOT pwAuto THEN
          ventana.UPDATE(2, Text004);

        CASE rPreFact."Tipo factura" OF
          rPreFact."Tipo factura"::"Sin resumen",
          rPreFact."Tipo factura"::"Texto alternativo",
          rPreFact."Tipo factura"::"Resumen x Referencia":lineas_detalladas(rCab, rPI, rCon, rPar, rPreFact,lwVariasPrefacturas);

          rPreFact."Tipo factura"::"Resumen x Codigo"    : lineas_resumen_codigo(rCab, rPI, rCon, rPar, rPreFact, lwVariasPrefacturas);
          rPreFact."Tipo factura"::"Resumen x Zona"      : lineas_resumen_zona(rCab, rPI, rCon, rPar, rPreFact, lwVariasPrefacturas);
          rPreFact."Tipo factura"::"Resumen x Vuelo"     : lineas_resumen_vuelo(rCab, rPI, rCon, rPar, rPreFact, lwVariasPrefacturas);
          rPreFact."Tipo factura"::"Resumen x Dia-Codigo": lineas_resumen_fecha(rCab, rPI, rCon, rPar, rPreFact, lwVariasPrefacturas);
          rPreFact."Tipo factura"::"Resumen x Zona-Detalle":
                                    lineas_resumen_zona_detalle(rCab, rPI, rCon, rPar, rPreFact, lwVariasPrefacturas);
          rPreFact."Tipo factura"::"Resumen x Zona Dia-Codigo":
                                    lineas_resumen_zona_dia_codigo(rCab, rPI, rCon, rPar, rPreFact, lwVariasPrefacturas);
        END;

        // AJF 26/03/08 IBZ DRF 07002
        // Lanzamos el calculo de descuento sobre la factura.

        IF rPreFact."% Dto" <> 0 THEN BEGIN
          lrLinFra.RESET;
          lrLinFra.SETRANGE("Document Type", rCab."Document Type");
          lrLinFra.SETRANGE("Document No." , rCab."No.");
          IF lrLinFra.FINDFIRST THEN
            CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount", lrLinFra);
        END;

        //. Recuperamos la cabecera de factura para ejecutar el proceso Lanzar factura
        //+$008 <
        rCab.GET(rCab."Document Type", rCab."No.");
        lcRelease.RUN(rCab);
        //+$008 >

        // Registrar el n§ de factura en las lineas de coste-ingreso y como facturada la prefactura

        IF rPI.FINDSET(TRUE,TRUE) THEN
        BEGIN
          rPI.LimpiaTemp;
          REPEAT
            rPI.MarcaFactura(rCab."No.", rPreFact."Fecha Registro factura", TRUE); // Pasa de producci¢n a facturaci¢n
          UNTIL rPI.NEXT = 0;
        END;

        IF NOT pwAuto THEN
          ventana.CLOSE;

        IF lwImprime THEN
        BEGIN
          rPreFact.SETRECFILTER;
          rPreFact.SETRANGE("Tipo Documento", rPreFact."Tipo Documento"); // Para que la funci¢n de impresi¢n filtre por este campo
          ImprimeFact(rPreFact);
        END;

      END;
    END;

    PROCEDURE crear_cabecera@2(VAR prCab@1100244000 : Record 36;prCli@1100244001 : Record 18;prCon@1100244002 : Record 7010403;prConf@1100244003 : Record 311;prPrefact@1100244004 : Record 7010415;pw_abono@1100244005 : Boolean;pw_fraagencia@1100244006 : Code[20];pwNoExportar@1100244007 : Boolean);
    VAR
      lwTipoServ@1103350000 : Code[10];
    BEGIN
      // crear_cabecera
      //
      // AJS --> Crear la cab. venta, con los datos del cliente y el contrato.
      //
      rPar.FINDFIRST;

      IF pw_abono THEN BEGIN
        prCab.VALIDATE("Document Type"    , prCab."Document Type"::"Credit Memo");

        // ----  Si se ha indicado N§ factura agencia este debe convertirse en el numero de fra  ----
        // ----  de Navision                                                                     ----

        IF pw_fraagencia <> '' THEN BEGIN
          prCab.VALIDATE("No.", pw_fraagencia);
          pwNoExportar      := TRUE;  // Si se introduce numero de factura agencia se tiene que marcar para no traspasar
        END;

        // AJS 22.09.2004
        // Este problema lo detecto RRT, si el contrato tiene serie hay que utilizarla tambien en los abonos

        IF prCon."Cod. Serie" = '' THEN
          prCab.VALIDATE("No. Series", prConf."Credit Memo Nos.")
        ELSE
          prCab.VALIDATE("No. Series", prCon."Cod. Serie");

        prCab.INSERT(TRUE);

        // ----  Si se ha indicado N§ factura agencia la serie de registro debe ser igual a la   ----
        // ----  serie normal para que asi se conserve el numero al registrar                    ----

        // AJS 22.09.2004
        // Mismo problema en la serie registro

        IF pw_fraagencia = '' THEN BEGIN

          IF prCon."Cod. Serie" = '' THEN
            prCab.VALIDATE("Posting No. Series" , prConf."Posted Credit Memo Nos.")
          ELSE
            prCab.VALIDATE("Posting No. Series" , prCon."Cod. Serie");

        END
        ELSE
          prCab.VALIDATE("Posting No. Series" , prCab."No. Series");
      END
      ELSE BEGIN
        prCab.VALIDATE("Document Type"   , prCab."Document Type"::Invoice);

        // ----  Si se ha indicado N§ factura agencia este debe convertirse en el numero de fra  ----
        // ----  de Navision                                                                     ----

        IF pw_fraagencia <> '' THEN BEGIN
          prCab.VALIDATE("No.", pw_fraagencia);
          pwNoExportar      := TRUE;  // Si se introduce numero de factura agencia se tiene que marcar para no traspasar
        END;

        IF prCon."Cod. Serie" = '' THEN
          prCab.VALIDATE("No. Series"         , prConf."Invoice Nos.")
        ELSE
          prCab.VALIDATE("No. Series"         , prCon."Cod. Serie");

        prCab.INSERT(TRUE);

        // ----  Si se ha indicado N§ factura agencia la serie de registro debe ser igual a la   ----
        // ----  serie normal para que asi se conserve el numero al registrar                    ----

        IF pw_fraagencia = '' THEN BEGIN
          IF prCon."Cod. Serie" = '' THEN
            prCab.VALIDATE("Posting No. Series", prConf."Posted Invoice Nos.")
          ELSE
            prCab.VALIDATE("Posting No. Series", prCon."Cod. Serie")
        END
        ELSE
          prCab.VALIDATE("Posting No. Series", prConf."Invoice Nos.")

      END;

      // AJS 20.02.2004
      // La factura se marca como No exportar por el usuario para evitar que entre en el proceso de exportacion a contabilidad
      // siempre que se haya rellenado el numero de factura agencia (TRANSUNION)

      prCab.Traspasado := pwNoExportar;

      prCab.VALIDATE("Sell-to Customer No.", prCon.Cliente);  //  Indicamos el cliente de servicio
      prCab.SetHideValidationDialog(TRUE);                    //  Ocultamos el dialogo para cambiar
                                                              //  el cliente de facturacion.
      prCab.VALIDATE("Bill-to Customer No.", prCli."No.");

      // ----  AJS 4.03.2002  Abrir la posibilidad de que el usuario pueda indicar la fecha de registro de la factura

      prCab.VALIDATE("Posting Date" , prPrefact."Fecha Registro factura");
      prCab.VALIDATE("Document Date", prPrefact."Fecha Registro factura");

      // ----  FIN AJS 4.03.2002  ----

      IF prCon."Cod. Terminos Pago" <> '' THEN
        prCab.VALIDATE("Payment Terms Code", prCon."Cod. Terminos Pago");
      IF prCon."Cod. Formas Pago" <> '' THEN
        prCab.VALIDATE("Payment Method Code"   , prCon."Cod. Formas Pago");

      prCab.VALIDATE("Shortcut Dimension 1 Code", prPrefact.Garaje);
      prCab.VALIDATE("Shortcut Dimension 2 Code", prPrefact.Touroperador);

      // JPT 20/12/04 Entramos el tipo de servicio como dimension

      IF rPar."Tipo Servicio Como Dimension" THEN BEGIN
        CLEAR(lwTipoServ);
        lwTipoServ := BuscaTipoServCab(prPrefact);
        IF lwTipoServ <> '' THEN BEGIN
          rPar.TESTFIELD("Dimensi¢n Tipo Servicio");
          InsertaDimCab(prCab, rPar."Dimensi¢n Tipo Servicio", lwTipoServ);
        END;
      END;

      IF prPrefact."Texto Registro" = '' THEN
        prCab.VALIDATE("Posting Description"   , STRSUBSTNO(texto_registro, prPrefact."Fecha desde",
                                                                        prPrefact."Fecha hasta"))
      ELSE
        prCab.VALIDATE("Posting Description"   , COPYSTR(prPrefact."Texto Registro",1,MAXSTRLEN(prCab."Posting Description")));

      prCab.VALIDATE("Prices Including VAT", prCon."Impuestos incluidos");
      prCab.VALIDATE("Currency Code"       , prCon."Cod. Divisa");

      // AJF 26/03/08 - IBZ DRF 07002
      // Incluimos el c¢digo de prefactura para calcular el descuento.

      prCab.VALIDATE("Invoice Disc. Code", prPrefact."N§ Prefactura");

      prCab.MODIFY(TRUE);
    END;

    PROCEDURE comprobar_datos_factura@11(prPI@1100244000 : Record 7035392;VAR rPreFact@1100244001 : Record 7010415;VAR prCli@1100244002 : Record 18;VAR prCon@1100244003 : Record 7010403;VAR prConf@1100244004 : Record 311;VAR prPar@1100244005 : Record 7010311);
    VAR
      rComp@1100244006 : Record 7010313;
    BEGIN
      // comprobar_datos_factura
      //
      prConf.FINDFIRST;
      prConf.TESTFIELD("Invoice Nos.");
      prConf.TESTFIELD("Posted Invoice Nos.");

      prCon.RESET; prCon.INIT;
      prCon.SETCURRENTKEY(Cliente,
                          Touroperador,
                          "Fecha inicio contrato",
                          "Fecha final contrato");
      prCon.SETRANGE (Cliente                , rPreFact.Cliente);
      prCon.SETRANGE (Touroperador           , rPreFact.Touroperador);
      prCon.SETFILTER("Fecha inicio contrato", '<=%1', rPreFact."Fecha desde");
      prCon.SETFILTER("Fecha final contrato" , '>=%1', rPreFact."Fecha desde");
      IF NOT prCon.FINDFIRST THEN
        ERROR(no_contrato, rPreFact.Cliente, rPreFact.Touroperador, rPreFact."Fecha desde");


      rComp.RESET; rComp.INIT;
      rComp.GET(rPreFact.Cliente, rPreFact.Touroperador);
      rComp.TESTFIELD("Cliente facturacion");

      prCli.GET(rComp."Cliente facturacion");

      prPar.FINDFIRST;
      // Faltan los testfield de los numeros de informe para las facturas.
      //
    END;

    PROCEDURE lineas_detalladas@9(prCab@1100244000 : Record 36;VAR prPI@1100244001 : Record 7035392;prCon@1100244002 : Record 7010403;prPar@1100244003 : Record 7010311;prPreFact@1100244004 : Record 7010415;pRehacerLineas@1100244005 : Boolean);
    VAR
      rLin@1100244006 : Record 7010417;
      w_parte@1100244007 : Code[10];
      w_zona@1100244008 : Code[10];
      w_importe@1100244009 : Decimal;
      w_importe_maletas@1100244010 : Decimal;
      w_importe_maletas_sin@1100244011 : Decimal;
      w_lineas_totales@1100244012 : Decimal;
      w_linea_actual@1100244013 : Decimal;
      w_porcen@1100244014 : Integer;
      w_primer_grupo@1100244015 : Boolean;
      w_grupo_iva_maletas@1100244016 : Code[10];
      lrZonPref@1100244017 : Record 7010418;
    BEGIN
      // lineas_detalladas
      //
      // AJS --> Se crea una linea de factura por cada Parte.
      //
      IF (prPreFact."Tipo factura" <> prPreFact."Tipo prefactura") OR pRehacerLineas THEN BEGIN
        rLin.RESET; rLin.INIT;
        rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
        rLin.DELETEALL;
        w_importe_maletas     := 0;
        w_importe_maletas_sin := 0;
        w_grupo_iva_maletas   := '';
        prPI.SETCURRENTKEY("N§ Prefactura",Garaje,"Cliente Operativo",Touroperador,Fecha,"N§ Parte","Zona Precios");
        prefactura_sin_resumen(prPreFact, prPI, prPar, w_importe_maletas, TRUE,
                                w_importe_maletas_sin, w_grupo_iva_maletas, TRUE, lrZonPref);
      END;

      // JPT 31/07/09 Indicamos un orden a las lineas
      prPreFact.Reordena;

      rLin.RESET; rLin.INIT;
      { JPT 31/07/09 Cambimos la clave
      rLin.SETCURRENTKEY("N§ Prefactura",
                         Fecha,
                         "Codigo Servicio",
                         Hora,
                         Parte);
      }
      rLin.SETCURRENTKEY("N§ Prefactura", Orden);


      rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
      IF rLin.FINDSET THEN BEGIN
        REPEAT
          IF prCon."Impuestos incluidos" THEN
            inserta_linea(prCab, prCon, rLin."Importe con impuestos", prPar, rLin.Tipo, w_parte,
                          rLin.Destino, rLin)
          ELSE
            inserta_linea(prCab, prCon, rLin."Importe sin impuestos", prPar, rLin.Tipo, w_parte,
                          rLin.Destino, rLin);
        UNTIL rLin.NEXT = 0;
      END;
    END;

    PROCEDURE lineas_resumen_codigo@3(prCab@1100244000 : Record 36;VAR prPI@1100244001 : Record 7035392;prCon@1100244002 : Record 7010403;prPar@1100244003 : Record 7010311;prPreFact@1100244004 : Record 7010415;pRehacerLineas@1100244005 : Boolean);
    VAR
      rLin@1100244006 : Record 7010417;
    BEGIN
      // lineas_resumen_codigo
      //
      // AJS --> Se crea una linea de factura por cada linea de prefactura.
      //
      IF (prPreFact."Tipo factura" <> prPreFact."Tipo prefactura") OR pRehacerLineas THEN BEGIN
        rLin.RESET; rLin.INIT;
        rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
        rLin.DELETEALL;
        prefactura_resumen_codigo(prPreFact, prPI, prPar);
      END;

      rLin.RESET; rLin.INIT;
      rLin.SETCURRENTKEY("N§ Prefactura",
                         "Codigo Servicio",
                         Fecha,
                         Hora,
                         Parte);

      rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
      IF rLin.FINDSET THEN BEGIN
        REPEAT
          IF prCon."Impuestos incluidos" THEN
            inserta_linea(prCab, prCon, rLin."Importe con impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin)
          ELSE
            inserta_linea(prCab, prCon, rLin."Importe sin impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin);
        UNTIL rLin.NEXT = 0;
      END;
    END;

    PROCEDURE lineas_resumen_zona@20(prCab@1100244000 : Record 36;VAR prPI@1100244001 : Record 7035392;prCon@1100244002 : Record 7010403;prPar@1100244003 : Record 7010311;prPreFact@1100244004 : Record 7010415;pRehacerLineas@1100244005 : Boolean);
    VAR
      rLin@1100244006 : Record 7010417;
    BEGIN
      // lineas_resumen_zona
      //
      // AJS --> Se crea una linea de factura por resumen de codigos de servicio x Fecha
      //
      IF (prPreFact."Tipo factura" <> prPreFact."Tipo prefactura") OR pRehacerLineas THEN BEGIN
        rLin.RESET; rLin.INIT;
        rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
        rLin.DELETEALL;
        prefactura_resumen_zona(prPreFact, prPI, prPar);
      END;

      rLin.RESET; rLin.INIT;
      rLin.SETCURRENTKEY("N§ Prefactura",
                         Hora,
                         Fecha);
      rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
      IF rLin.FINDSET THEN BEGIN
        REPEAT
          IF prCon."Impuestos incluidos" THEN
            inserta_linea(prCab, prCon, rLin."Importe con impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin)
          ELSE
            inserta_linea(prCab, prCon, rLin."Importe sin impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin);
        UNTIL rLin.NEXT = 0;
      END;
    END;

    PROCEDURE lineas_resumen_vuelo@25(prCab@1100244000 : Record 36;VAR prPI@1100244001 : Record 7035392;prCon@1100244002 : Record 7010403;prPar@1100244003 : Record 7010311;prPreFact@1100244004 : Record 7010415;pRehacerLineas@1100244005 : Boolean);
    VAR
      rLin@1100244006 : Record 7010417;
    BEGIN
      // lineas_resumen_vuelo
      //
      IF (prPreFact."Tipo factura" <> prPreFact."Tipo prefactura") OR pRehacerLineas THEN BEGIN
        rLin.RESET; rLin.INIT;
        rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
        rLin.DELETEALL;
        prefactura_resumen_vuelo(prPreFact, prPI, prPar);
      END;

      rLin.RESET; rLin.INIT;
      rLin.SETCURRENTKEY("N§ Prefactura",
                         Vuelo,
                         Hora,
                         Fecha);
      rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
      IF rLin.FINDSET THEN BEGIN
        REPEAT
          IF prCon."Impuestos incluidos" THEN
            inserta_linea(prCab, prCon, rLin."Importe con impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin)
          ELSE
            inserta_linea(prCab, prCon, rLin."Importe sin impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin);
        UNTIL rLin.NEXT = 0;
      END;
    END;

    PROCEDURE lineas_resumen_fecha@7(prCab@1100244000 : Record 36;VAR prPI@1100244001 : Record 7035392;prCon@1100244002 : Record 7010403;prPar@1100244003 : Record 7010311;prPreFact@1100244004 : Record 7010415;pRehacerLineas@1100244005 : Boolean);
    VAR
      rLin@1100244006 : Record 7010417;
      w_lineas_totales@1100244007 : Decimal;
      w_linea_actual@1100244008 : Decimal;
      w_porcen@1100244009 : Integer;
      w_fecha@1100244010 : Date;
      w_codigo@1100244011 : Code[10];
      w_importe@1100244012 : Decimal;
      w_importe_maletas@1100244013 : Decimal;
    BEGIN
      // lineas_resumen_fecha
      //
      // AJS --> Se crea una linea de factura por resumen de codigos de servicio x Fecha
      //
      IF (prPreFact."Tipo factura" <> prPreFact."Tipo prefactura") OR pRehacerLineas THEN BEGIN
        rLin.RESET; rLin.INIT;
        rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
        rLin.DELETEALL;
        prefactura_resumen_dia_codigo(prPreFact, prPI, prPar);
      END;

      rLin.RESET; rLin.INIT;
      {*rLin.SETCURRENTKEY("N§ Prefactura",
                         "Codigo Servicio",
                         Hora,
                         Fecha);  *}

      rLin.SETCURRENTKEY("N§ Prefactura","N§ Linea");
      rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
      IF rLin.FINDSET THEN BEGIN
        REPEAT
          IF prCon."Impuestos incluidos" THEN
            inserta_linea(prCab, prCon, rLin."Importe con impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin)
          ELSE
            inserta_linea(prCab, prCon, rLin."Importe sin impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin);
        UNTIL rLin.NEXT = 0;
      END;
    END;

    PROCEDURE lineas_resumen_zona_detalle@23(prCab@1100244000 : Record 36;VAR prPI@1100244001 : Record 7035392;prCon@1100244002 : Record 7010403;prPar@1100244003 : Record 7010311;prPreFact@1100244004 : Record 7010415;pRehacerLineas@1100244005 : Boolean);
    VAR
      rLin@1100244006 : Record 7010417;
      w_importe_maletas@1100244007 : Decimal;
      tab_zona@1100244008 : ARRAY [50] OF Code[10];
      tab_paxes@1100244009 : ARRAY [50] OF Integer;
      tab_plazas@1100244010 : ARRAY [50] OF Integer;
      tab_importe@1100244011 : ARRAY [50] OF Decimal;
      ind@1100244012 : Integer;
      w_lineas_totales@1100244013 : Decimal;
      w_linea_actual@1100244014 : Decimal;
      w_porcen@1100244015 : Integer;
    BEGIN
      // lineas_resumen_zona_detalle
      //
      // AJS --> Se crea una linea de factura por cada linea de prefactura y un resumen x zona.
      //
      IF (prPreFact."Tipo factura" <> prPreFact."Tipo prefactura") OR pRehacerLineas THEN BEGIN
        rLin.RESET; rLin.INIT;
        rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
        rLin.DELETEALL;
        prefactura_resumen_zona_detall(prPreFact, prPI, prPar);
      END;

      rLin.RESET; rLin.INIT;

      rLin.SETCURRENTKEY("N§ Prefactura","N§ Linea");

      rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
      IF rLin.FINDSET THEN BEGIN
        REPEAT
          IF prCon."Impuestos incluidos" THEN
            inserta_linea(prCab, prCon, rLin."Importe con impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin)
          ELSE
            inserta_linea(prCab, prCon, rLin."Importe sin impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin);
        UNTIL rLin.NEXT = 0;
      END;
    END;

    PROCEDURE lineas_resumen_zona_dia_codigo@26(prCab@1100244000 : Record 36;VAR prPI@1100244001 : Record 7035392;prCon@1100244002 : Record 7010403;prPar@1100244003 : Record 7010311;prPreFact@1100244004 : Record 7010415;pRehacerLineas@1100244005 : Boolean);
    VAR
      rLin@1100244006 : Record 7010417;
    BEGIN
      // lineas_resumen_zona_dia_codigo
      //
      // AJS --> Se crea una linea de factura por cada linea de prefactura.
      //
      IF (prPreFact."Tipo factura" <> prPreFact."Tipo prefactura") OR pRehacerLineas THEN BEGIN
        rLin.RESET; rLin.INIT;
        rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
        rLin.DELETEALL;
        prefac_resumen_zona_dia_codigo(prPreFact, prPI, prPar);
      END;

      rLin.RESET; rLin.INIT;
      rLin.SETCURRENTKEY("N§ Prefactura",
                         Fecha,
                         "Codigo Servicio",
                         Hora,
                         Parte);
      rLin.SETRANGE("N§ Prefactura", prPreFact."N§ Prefactura");
      IF rLin.FINDSET THEN BEGIN
        REPEAT
          IF prCon."Impuestos incluidos" THEN
            inserta_linea(prCab, prCon, rLin."Importe con impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin)
          ELSE
            inserta_linea(prCab, prCon, rLin."Importe sin impuestos", prPar, rLin.Tipo, '',
                          rLin.Destino, rLin);
        UNTIL rLin.NEXT = 0;
      END;
    END;

    PROCEDURE inserta_linea@16(prCab@1100244000 : Record 36;prCon@1100244001 : Record 7010403;pw_importe@1100244002 : Decimal;prPar@1100244003 : Record 7010311;pw_tipolinea@1100244004 : 'Base,Suplemento,Maletas,Comentario,Zona,Resumen Zona,Solo Resumen Zona,Extra';pw_parte@1100244005 : Code[10];pw_zona@1100244006 : Code[10];prlinpre@1100244007 : Record 7010417);
    VAR
      rLin@1100244008 : Record 37;
      rLin2@1100244009 : Record 37;
      rParte@1100244010 : Record 7010360;
      iPreDet@1100244011 : Report 7010342;
      w_linea@1100244012 : Integer;
      ok@1100244013 : Boolean;
      lrConfRegistroIVA@1100244014 : Record 325;
      lwGrupo_registro_IVA_neg@1100244015 : Code[10];
      lwTipSer@1103350000 : Code[10];
    BEGIN
      // inserta_linea
      //
      // AJS --> Rellenar una linea de Lin. Venta, siempre con el importe con IVA incluido
      //         Protejo el GET para aquellos casos como las maletas y los resumenes de zona
      //         en que los datos no salen de un parte en concreto
      //
      rParte.INIT;
      ok := rParte.GET(pw_parte);

      rLin2.RESET; rLin2.INIT;
      rLin2.SETRANGE("Document Type", prCab."Document Type");
      rLin2.SETRANGE("Document No."  , prCab."No.");
      IF rLin2.FINDLAST THEN
        w_linea := rLin2."Line No." + 10000
      ELSE
        w_linea := 10000;

      rLin.INIT;
      rLin.VALIDATE("Document Type"    , prCab."Document Type");
      rLin.VALIDATE("Document No."      , prCab."No.");
      rLin.VALIDATE("Line No."          , w_linea);
      rLin.VALIDATE("Sell-to Customer No.", prCab."Sell-to Customer No.");
      rLin.VALIDATE(Type                , rLin.Type::"G/L Account");
      rLin.INSERT(TRUE);

      rLin.VALIDATE("No."                      , prPar."Cuenta Ventas");
      rLin.VALIDATE(Quantity                  , 1);
      rLin.VALIDATE("VAT Prod. Posting Group", prlinpre."Grupo registro IVA producto");
      rLin.VALIDATE("Shortcut Dimension 1 Code"       , rParte.Garaje);
      rLin.VALIDATE("Shortcut Dimension 2 Code"       , prlinpre.Touroperador);

      // JPT 20/12/04 Introducimos el tipo de servicio como dimensi¢n
      IF rPar."Tipo Servicio Como Dimension" THEN BEGIN
        lwTipSer := BuscaTipoServ(prlinpre);
        IF lwTipSer <> '' THEN BEGIN
          rPar.TESTFIELD("Dimensi¢n Tipo Servicio");
            InsertaDimLin(rLin,rPar."Dimensi¢n Tipo Servicio", lwTipSer);
        END;
      END;

      // AJF 26/03/08 - IBZ DRF 07002
      // Activamos descuento dependiendo del tipo de l¡nea y la condiciones del contrato.
      //rLin.VALIDATE("Allow Invoice Disc."    , FALSE);

      IF (pw_tipolinea <> pw_tipolinea::Maletas) THEN
        rLin.VALIDATE("Allow Invoice Disc."    , TRUE)
      ELSE
        IF prCon."Descuento sobre maletas" THEN
          rLin.VALIDATE("Allow Invoice Disc."    , TRUE)
        ELSE
          rLin.VALIDATE("Allow Invoice Disc."    , FALSE);

      CASE pw_tipolinea OF
        pw_tipolinea::Base: BEGIN
          rLin.VALIDATE("Description 2", Text005);
          IF prCon."Impuestos incluidos" THEN BEGIN
            rLin.VALIDATE("Unit Price" , prlinpre."Importe Con IVA Sin Dto");
            rLin."Amount Including VAT" := pw_importe;
          END
          ELSE BEGIN
            rLin.VALIDATE("Unit Price" , prlinpre."Importe Sin IVA Sin Dto");
            rLin.Amount := pw_importe;
          END;
          //rLin."Line Discount %"      := prlinpre."% Dto";            // AJF 09/04/08
        END;
        pw_tipolinea::Zona: BEGIN
          rLin.VALIDATE("Description 2", Text006);
          IF prCon."Impuestos incluidos" THEN BEGIN
            rLin.VALIDATE("Unit Price" , prlinpre."Importe Con IVA Sin Dto");
            rLin."Amount Including VAT" := pw_importe;
          END
          ELSE BEGIN
            rLin.VALIDATE("Unit Price" , prlinpre."Importe Sin IVA Sin Dto");
            rLin.Amount := pw_importe;
          END;
          //rLin."Line Discount %"      := prlinpre."% Dto";            // AJF 09/04/08
        END;
        pw_tipolinea::Maletas: BEGIN
          IF prCon."Maletas incluidas" THEN BEGIN
            lwGrupo_registro_IVA_neg := rLin."VAT Bus. Posting Group";
            rLin.VALIDATE(Type           , rLin.Type::" ");
            rLin.VALIDATE(Description    , Text007);
            rLin.VALIDATE("Description 2", Text008);
            rLin."VAT Prod. Posting Group" := prlinpre."Grupo registro IVA producto";
            IF lrConfRegistroIVA.GET(lwGrupo_registro_IVA_neg , prlinpre."Grupo registro IVA producto") THEN
              rLin."VAT %" := lrConfRegistroIVA."VAT+EC %";
          END
          ELSE BEGIN
            rLin.VALIDATE("Description 2", Text008);
            IF prCon."Impuestos incluidos" THEN BEGIN
              rLin.VALIDATE("Unit Price" , prlinpre."Importe Con IVA Sin Dto");
              rLin."Amount Including VAT" := pw_importe;
            END
            ELSE BEGIN
              rLin.VALIDATE("Unit Price" , prlinpre."Importe Sin IVA Sin Dto");
              rLin.Amount := pw_importe;
            END;
            //rLin."Line Discount %"      := prlinpre."% Dto";          // AJF 09/04/08
          END;
        END;
        pw_tipolinea::Suplemento: BEGIN
          rLin.VALIDATE(Description    , prlinpre.Descripcion);
          rLin.VALIDATE("Description 2", Text009);
          IF prCon."Impuestos incluidos" THEN BEGIN
            rLin.VALIDATE("Unit Price" , prlinpre."Importe Con IVA Sin Dto");
            rLin."Amount Including VAT" := pw_importe;
          END
          ELSE BEGIN
            rLin.VALIDATE("Unit Price" , prlinpre."Importe Sin IVA Sin Dto");
            rLin.Amount := pw_importe;
          END;
          //rLin."Line Discount %"      := prlinpre."% Dto";             // AJF 09/04/08
        END;
        pw_tipolinea::"Resumen Zona": BEGIN
          rLin.VALIDATE(Type           , rLin.Type::" ");
          rLin.VALIDATE(Description    , Text010 + prlinpre.Zona);
          rLin.VALIDATE("Description 2", Text011);
        END;
        pw_tipolinea::Extra : BEGIN
          rLin.VALIDATE(Description    , prlinpre.Descripcion);
          rLin.VALIDATE("Description 2", Text012);
          IF prCon."Impuestos incluidos" THEN BEGIN
            rLin.VALIDATE("Unit Price" , prlinpre."Importe Con IVA Sin Dto");
            rLin."Amount Including VAT" := pw_importe
          END
          ELSE BEGIN
            rLin.VALIDATE("Unit Price" , prlinpre."Importe Sin IVA Sin Dto");
            rLin.Amount := pw_importe;
          END;
          //rLin."Line Discount %"      := prlinpre."% Dto";              // AJF 09/04/08
        END;
      END;
      // A partir de aqui son todos campos a¤adidos para la impresion de la factura no tienen que
      // influir en su contabilizacion.
      //
      rLin.Vuelo                   := prlinpre.Vuelo;
      rLin.Letra                   := prlinpre.Letra;
      rLin."N§ Parte"              := prlinpre.Parte;
      rLin.Zona                    := pw_zona;
      rLin.Bus                     := prlinpre.Bus;
      rLin.Origen                  := prlinpre.Origen;
      rLin.Destino                 := prlinpre.Destino;
      rLin.Paxes                   := prlinpre.Pax;
      rLin.Plazas                  := prlinpre.Plazas;

      // AJF 13/03/08 - DRF 07002
      // A¤adir "Ni¤os Facturados" a Sales Line.

      rLin."Ni¤os Facturados"      := prlinpre."Ni¤os Facturados";
      rLin.Servicio                := prlinpre."Codigo Servicio";
      rLin."Fecha servicio"        := prlinpre.Fecha;
      rLin.Hora                    := prlinpre.Hora;
      rLin."Importe Impresion"     := prlinpre."Importe sin impuestos";
      rLin."Importe Impresion con" := prlinpre."Importe con impuestos";
      rLin."Precio Impresion"      := prlinpre."Precio sin impuestos";
      rLin."Precio Impresion con"  := prlinpre."Precio con impuestos";
      rLin."Tipo aplicacion"       := prlinpre."Tipo aplicacion";
      rLin."N§ Servicios"          := prlinpre."N§ de Servicios";
      rLin.MODIFY(TRUE);
    END;

    PROCEDURE errores_previos@6(prCond@1100244000 : Record 7010420;VAR prPI@1100244001 : Record 7035392;VAR prCondFra@1100244002 : Record 7010416;VAR prCon@1100244003 : Record 7010403) : Boolean;
    VAR
      rPar@1100244004 : Record 7010311;
      rCliTo@1100244005 : Record 7010313;
      lrRangos@1100244009 : Record 7010430;
      contrato_factura@1100244006 : Code[10];
      lw_Mensajerror@1100244007 : Text[250];
      lwEncontrado@1100244008 : Boolean;
      lwTTOOs@1100244010 : Text[1000];
    BEGIN
      // errores_previos
      //

      // Si esta marcada esta opci¢n no se seleccionan las lineas Si no que se consideraran las filtradas
      IF prCond."Anular Seleccion CI" THEN
        EXIT(TRUE);

      IF prCond.Cliente = '' THEN
        ERROR(no_cliente);

      IF prCond.Touroperador = '' THEN
        ERROR(no_touroperador);

      { JPT 09/02/04
      IF prCond.Garaje = '' THEN
        ERROR(no_garaje);
      }

      IF NOT rCliTo.GET(prCond.Cliente, prCond.Touroperador) THEN
        ERROR(no_composicion, prCond.Cliente, prCond.Touroperador);
      rCliTo.TESTFIELD("Cliente facturacion");

      {*
      prCondFra.RESET; prCondFra.INIT;
      IF NOT prCondFra.GET(rCliTo.Cliente, rCliTo.TTOO, prCond."Tipos servicio Fijo") THEN BEGIN
        prCondFra.SETRANGE(Cliente, rCliTo.Cliente);
        prCondFra.SETRANGE(TTOO   , rCliTo.TTOO);
        IF NOT prCondFra.FINDFIRST THEN
          ERROR(no_condicion, rCliTo.Cliente, rCliTo.TTOO);
      END;
      *}

      rPar.FINDFIRST;

      IF NOT prCond."Facturar sobre marca" THEN BEGIN
        IF prCond."Fecha desde" = 0D THEN
          ERROR(no_fecha_desde);
        IF prCond."Fecha hasta" = 0D THEN
          ERROR(no_fecha_hasta);

        // Comprobar que si no esta activado el parametro no se puedan juntar distintos
        // tipos de servicio

        IF NOT rPar."Juntar Tipos en facturacion" THEN BEGIN
          IF (STRPOS(prCond."Tipos servicio", '|') <> 0) OR
             (STRPOS(prCond."Tipos servicio", '..') <> 0) OR
             (STRPOS(prCond."Tipos servicio", '&') <> 0) THEN
            ERROR(no_juntar_servicios);
          IF (prCond."Tipos servicio" = '') AND NOT (prCond."Facturacion Automatica") THEN
            ERROR(especificar_un_tipo);
        END;
      END;
      // Comprobar que existen lineas de servicio que prefacturar con los rangos establecidos.
      //
      prPI.RESET; prPI.INIT;
      prPI.SETCURRENTKEY("N§ Prefactura",Garaje,"Cliente Operativo",Touroperador,Fecha,"N§ Parte","Zona Precios");
      IF prCond.Garaje <> '' THEN
        prPI.SETRANGE (Garaje         , prCond.Garaje);
      prPI.SETRANGE ("Cliente Operativo"        , prCond.Cliente);
      lwTTOOs := FiltroTTOO(rCliTo);
      prPI.SETFILTER (Touroperador  , lwTTOOs);
      prPI.SETRANGE ("N§ Prefactura", '');
      prPI.SETRANGE (Facturable     , TRUE);
      IF NOT prCond."Facturar sobre marca"  THEN BEGIN
        prPI.SETRANGE (Fecha          , prCond."Fecha desde", prCond."Fecha hasta");
        IF prCond."Tipos servicio" <> '' THEN
          prPI.SETFILTER("Tipo servicio", prCond."Tipos servicio");
        IF prCond."Codigos Servicio" <> '' THEN
          prPI.SETFILTER("Codigo servicio", prCond."Codigos Servicio");
        IF prCond."Tipos Vehiculo" <> '' THEN
          prPI.SETFILTER ("Tipo Vehiculo", prCond."Tipos Vehiculo");
        IF prCond."Zonas Precio" <> '' THEN
          prPI.SETFILTER ("Zona Precios" , prCond."Zonas Precio");

        // ----  AJS 29.05.2003  Filtros por propiedad de vehiculos  ----

        CASE prCond."Propiedad vehiculos" OF
          prCond."Propiedad vehiculos"::Propios: prPI.SETRANGE("Servicio propio", TRUE);

          prCond."Propiedad vehiculos"::Externos: prPI.SETRANGE("Servicio propio", FALSE);
        END;

        // JPT -06/02/04 - Filtramos por mas campos para TRN

        IF prCond."Zona trabajo" <> '' THEN
          prPI.SETRANGE("Zona facturacion", prCond."Zona trabajo");

        IF prCond."Tipo Servicio Fijo" <> prCond."Tipo Servicio Fijo"::Todos THEN
          prPI.SETRANGE("Tipo Servicio Fijo", prCond."Tipo Servicio Fijo");

        IF (prCond."Rango Plazas Desde"<>0) AND (prCond."Rango Plazas Hasta"<>0) THEN
          prPI.SETFILTER("Paxes Servicio" , lrRangos.EstableceFiltro(prCond."Rango Plazas Desde", prCond."Rango Plazas Hasta"));

        IF prCond."Punto recogida" <> '' THEN
          prPI.SETRANGE("Origen/Destino", prCond."Punto recogida");

        IF prCond.Referencia <> '' THEN
          prPI.SETRANGE(Referencia , prCond.Referencia);

        IF prCond."Codigo Suplemento" <> '' THEN
          prPI.SETRANGE("Tipo elemento", prCond."Codigo Suplemento");

      END
      ELSE
        prPI.SETRANGE(Marca, USERID);

      //BRM 26/05/04 Solo vamos a facturar lineas q no pertenezcan a un grupo en proceso facturacion
      //             normal.
      prPI.SETRANGE("Cod Grupo",prCond."Cod. Grupo");

      // JPT 14/07/04 Servicios Repetitivos
      prPI.SETRANGE("Servicio Regular" , prCond."Servicio Repetitivo");


      lwEncontrado := prPI.FINDFIRST;

      // 22.03.2004
      // AJS

      // Si no se encuentra nada y es facturaci¢n automatica Salimos con false
      IF prCond."Facturacion Automatica" AND (NOT lwEncontrado) THEN
        EXIT(FALSE);

      IF NOT lwEncontrado THEN BEGIN
        IF prCond."Facturar sobre marca" THEN
          ERROR(no_servicios_marca, prCond.Garaje, prCond.Cliente, lwTTOOs, USERID);

        lw_Mensajerror := Text013;

        lw_Mensajerror := lw_Mensajerror + STRSUBSTNO(Text014, prCond.Garaje) +'\';
        lw_Mensajerror := lw_Mensajerror + STRSUBSTNO(Text015 , prCond.Cliente) + '\';
        lw_Mensajerror := lw_Mensajerror + STRSUBSTNO(Text016 , lwTTOOs) + '\';
        lw_Mensajerror := lw_Mensajerror + STRSUBSTNO(Text017 ,prCond."Fecha desde", prCond."Fecha hasta") + '\';
        IF prCond."Tipos servicio" <> '' THEN
          lw_Mensajerror := lw_Mensajerror + STRSUBSTNO(Text018 , prCond."Tipos servicio") + '\' ;
        IF prCond."Codigos Servicio" <> '' THEN
          lw_Mensajerror := lw_Mensajerror + STRSUBSTNO(Text019 , prCond."Codigos Servicio") + '\';
        IF prCond."Tipos Vehiculo" <> '' THEN
          lw_Mensajerror := lw_Mensajerror + STRSUBSTNO(Text020 , prCond."Tipos Vehiculo") + '\';
        IF prCond."Zonas Precio" <> '' THEN
          lw_Mensajerror := lw_Mensajerror + STRSUBSTNO(Text021 , prCond."Zonas Precio") + '\';
        ERROR(lw_Mensajerror);
      END;

      // ---- Comprobar que los servicios tienen la prevision de coste/ingreso generada  ----
      // ---- si no se ha indicado lo contrario en parametros.                           ----

      IF rPar."Crear prevision antes facturar" THEN BEGIN
        prPI.SETRANGE("Generada prevision", FALSE);
        IF prPI.FINDFIRST THEN
          ERROR(no_prevision);
        prPI.SETRANGE("Generada prevision");
      END;

      // ---- Comprobar que todos corresponden al mismo contrato y obtener el registro   ----
      // ---- del contrato                                                               ----
      //
      // JPT-18/02/04 Comentado ya que a partir de ahora podr n facturarse varios touroperadores juntos
      {
      IF prPI.FINDFIRST THEN BEGIN
        contrato_factura := prPI."N§ Contrato";
        REPEAT
          IF prPI."N§ Contrato" <> contrato_factura THEN
            ERROR(mismo_contrato);
        UNTIL prPI.NEXT = 0;
      END;
      }

      // AJS 06.02.2004
      // El contrato puede ir contra el garaje del parte o contra el garaje TODOS

      // AJF 19/03/08 - El contrato ya est  filtrado
      // JPT 10/06/09 Elimino el Comentacion ya que conviene SIEMPRE volver a buscar el contrato
      // Eso es as¡ ya que la linea CI sobbre la cual estaba el usuario puede no coincidir con los filtro puestos posteriormente

      prCon.SETFILTER(Garaje, '%1|%2', prPI.Garaje, rPar."Todos los garajes");
      prCon.SETRANGE ("N§ Contrato" , prPI."N§ Contrato");
      prCon.FINDFIRST;

      EXIT(TRUE);
    END;

    PROCEDURE prefactura_sin_resumen@8(prPreFact@1100244000 : Record 7010415;VAR prPI@1100244001 : Record 7035392;prPar@1100244002 : Record 7010311;VAR pw_importe_maletas@1100244003 : Decimal;pw_linea_maletas@1100244004 : Boolean;VAR pw_importe_maletas_sin@1100244005 : Decimal;VAR pw_grupo_iva_maletas@1100244006 : Code[10];pw_linea_por_parte@1100244007 : Boolean;VAR prZonPref@1100244008 : Record 7010418);
    VAR
      rCon@1100244009 : Record 7010403;
      rParte@1100244010 : Record 7010360;
      w_parte@1100244011 : Code[10];
      w_zona@1100244012 : Code[10];
      w_grupo_iva_base@1100244013 : Code[10];
      w_codigo@1100244014 : Code[10];
      w_vuelos@1100244015 : Code[30];
      w_importe@1100244016 : Decimal;
      w_importe_supl@1100244017 : Decimal;
      w_importe_supl_sin@1100244018 : Decimal;
      w_pax@1100244019 : Decimal;
      w_plazas@1100244020 : Decimal;
      w_importe_sin@1100244021 : Decimal;
      w_primer_grupo@1100244022 : Boolean;
      w_hora@1100244023 : Time;
      lw_precio@1100244024 : Decimal;
      lw_PrecioMaleta@1100244037 : Decimal;
      lw_TipoAplicacion@1100244025 : 'Vehiculo,Pax';
      lw_precio_sin@1100244026 : Decimal;
      lw_Imp_Supl_Total@1100244027 : Decimal;
      lw_Imp_Supl_Total_Sin@1100244028 : Decimal;
      lw_Imp_Extra_Total@1100244029 : Decimal;
      lw_Imp_Extra_Total_Sin@1100244030 : Decimal;
      lw_cantMaletas@1100244036 : Decimal;
      lwTipo_linea@1100244031 : 'Base,Suplemento,Manual,Extra,Ajuste';
      lw_Extra@1100244032 : Decimal;
      lw_Extra_sin@1100244033 : Decimal;
      lw_Ni¤osFact@1100244034 : Decimal;
      lrLinPre@1100244035 : Record 7010417;
      lwConceptoFacturacion@1100244038 : Text[30];
    BEGIN
      // prefactura_sin_resumen
      //
      // AJS --> Crear una linea de prefactura por Parte de trabajo, dentro del parte por cada zona
      //         y tambien una linea extra si hay suplementos.
      //         Prefactura, Coste-ingreso, Parametros, importe_maletas, linea_maletas, tzonas,
      //         tpax, tplazas, timporte, iva_maletas, linea_por_parte, tiva
      //
      IF prPI.FINDSET THEN
      BEGIN
        inicia_variables(w_pax, w_plazas, w_importe, w_importe_sin, w_grupo_iva_base,
                         pw_grupo_iva_maletas, w_importe_supl, w_importe_supl_sin , lw_Extra , lw_Extra_sin );
        w_parte        := prPI."N§ Parte";
        w_zona         := prPI."Zona Precios";
        w_codigo       := prPI."Codigo servicio";
        w_vuelos       := prPI.Vuelos;
        w_hora         := prPI."Hora vuelo";
        lwConceptoFacturacion := prPI."Concepto facturacion";
        w_primer_grupo := TRUE;
        lw_precio      := 0;
        lw_precio_sin  := 0;
        lw_Ni¤osFact   := 0;
        lw_cantMaletas := 0;
        lw_PrecioMaleta := 0;

        lw_Imp_Supl_Total      := 0;
        lw_Imp_Supl_Total_Sin  := 0;
        lw_Imp_Extra_Total     := 0;
        lw_Imp_Extra_Total_Sin := 0;

        REPEAT

          IF (w_parte <> prPI."N§ Parte") OR (w_zona <> prPI."Zona Precios") THEN BEGIN
            IF rParte.GET(w_parte) THEN ; //$003
            IF w_primer_grupo THEN BEGIN
              IF (pw_linea_por_parte) AND (w_importe <> 0) THEN BEGIN
                inserta_linea_prefactura(prPreFact, rParte, lw_precio, w_importe, w_pax, w_plazas, '', w_zona,
                                         prPI, w_importe_sin, w_tipolinea::Base, prPar,
                                         w_grupo_iva_base, w_codigo, w_vuelos, w_hora, lw_precio_sin ,
                                         lw_TipoAplicacion, lrLinPre);
                Actualiza_Linea_Prefactura(lrLinPre, 0, lw_Ni¤osFact, lwConceptoFacturacion, rParte.Referencia);
              END;
            END
            ELSE BEGIN
              IF (pw_linea_por_parte) AND (w_importe <> 0) THEN BEGIN
                inserta_linea_prefactura(prPreFact, rParte, lw_precio, w_importe, w_pax, w_plazas, '', w_zona,
                                         prPI, w_importe_sin, w_tipolinea::Zona, prPar,
                                         w_grupo_iva_base, w_codigo, w_vuelos, w_hora, lw_precio_sin ,
                                         lw_TipoAplicacion, lrLinPre);
                Actualiza_Linea_Prefactura(lrLinPre, 0, lw_Ni¤osFact, lwConceptoFacturacion, rParte.Referencia);
              END;
            END;
            IF w_importe_supl <> 0 THEN BEGIN
              IF pw_linea_por_parte THEN BEGIN
                inserta_linea_prefactura(prPreFact, rParte, lw_precio, w_importe_supl, 0, 0,
                                         Text009, w_zona, prPI, w_importe_supl_sin,
                                         w_tipolinea::Suplemento,  prPar, w_grupo_iva_base,
                                         w_codigo, w_vuelos, w_hora, lw_precio_sin ,lw_TipoAplicacion, lrLinPre);
                Actualiza_Linea_Prefactura(lrLinPre, 0, 0, lwConceptoFacturacion, rParte.Referencia);
              END;
            END;


            IF (lw_Extra <> 0) AND (pw_linea_por_parte) THEN BEGIN
              inserta_linea_prefactura(prPreFact, rParte, lw_precio, lw_Extra, 0, 0, Text012, w_zona,
                                         prPI, lw_Extra_sin, w_tipolinea::Extra, prPar,
                                         w_grupo_iva_base, w_codigo, w_vuelos, w_hora, lw_precio_sin ,lw_TipoAplicacion,
                                         lrLinPre);
              Actualiza_Linea_Prefactura(lrLinPre, 0, 0, lwConceptoFacturacion, rParte.Referencia);
            END;



            IF (w_importe <> 0) AND (lwTipo_linea=lwTipo_linea::Base) THEN
              busca_zona(prZonPref , w_zona , w_importe , w_importe_sin , lw_precio , lw_precio_sin , prPreFact."N§ Prefactura" ,
                          w_plazas , w_pax , w_grupo_iva_base , lw_TipoAplicacion, lw_Ni¤osFact);


            // JPT 05/04/05 Para considerarlo zona miramos que no sean maletas
            //IF (w_parte = prPI."N§ Parte") AND (prPI."Tipo elemento" <> prPar."Codigo Maletas") THEN
            IF w_parte = prPI."N§ Parte" THEN
              w_primer_grupo := FALSE
            ELSE
              w_primer_grupo := TRUE;


            w_parte        := prPI."N§ Parte";
            w_zona         := prPI."Zona Precios";
            w_codigo       := prPI."Codigo servicio";
            w_vuelos       := prPI.Vuelos;
            lwTipo_linea   := prPI."Tipo linea";
            // JPT 11/04/05 IF NOT (lwTipo_linea IN [lwTipo_linea::Suplemento,lwTipo_linea::Extra]) THEN
            IF NOT (lwTipo_linea IN [lwTipo_linea::Extra]) THEN
              w_hora         := prPI."Hora vuelo";
            lwTipo_linea   := prPI."Tipo linea";
            lwConceptoFacturacion := prPI."Concepto facturacion";
            lw_precio      := 0;
            lw_precio_sin  := 0;
            lw_Ni¤osFact   := 0;

            // ----  AJS 4.03.2002  Antes la rutina inicia_variables limpiaba la variable de iva de maletas por cada parte  ----
            // ----  cuando esta variable funciona a nivel global de la prefactura                                          ----

            inicia_variables(w_pax, w_plazas, w_importe, w_importe_sin, w_grupo_iva_base,
                             w_grupo_iva_base, w_importe_supl, w_importe_supl_sin , lw_Extra , lw_Extra_sin);

          END;


          // AJS 06.02.2004
          // El contrato puede ir contra el garaje del parte o contra el garaje TODOS

          rCon.SETFILTER(Garaje, '%1|%2', prPI.Garaje, prPar."Todos los garajes");
          rCon.SETRANGE ("N§ Contrato" , prPI."N§ Contrato");
          rCon.FINDFIRST;

          //rCon.GET(prPI.Garaje, prPI."N§ Contrato");

          CASE prPI."Tipo linea" OF
            prPI."Tipo linea"::Suplemento: BEGIN
              IF prPI."Tipo elemento" = prPar."Codigo Maletas" THEN BEGIN
                pw_importe_maletas     := pw_importe_maletas + prPI."Importe con impuesto";
                pw_importe_maletas_sin := pw_importe_maletas_sin + prPI."Importe sin impuesto";
                pw_grupo_iva_maletas   := prPI."Grupo registro IVA Producto";

                IF rCon."Maletas sobre" = rCon."Maletas sobre"::Transportados THEN
                  lw_cantMaletas := lw_cantMaletas + prPI."Pax Transportados"
                ELSE
                  lw_cantMaletas := lw_cantMaletas + prPI."Pax Facturados";

                // ---- Si las maletas estan incluidas en la base del contrato hay que sumarlas ----
                // ---- a la base base                                                          ----

                IF rCon."Maletas incluidas" THEN BEGIN
                  w_importe_sin    := w_importe_sin + prPI."Importe sin impuesto";
                  w_importe        := w_importe + prPI."Importe con impuesto";
                  IF w_grupo_iva_base='' THEN
                    w_grupo_iva_base := prPI."Grupo registro IVA Producto";

                  IF lw_TipoAplicacion = lw_TipoAplicacion::Pax THEN BEGIN
                    lw_precio       := lw_precio + prPI."Precio Pax";
                    lw_precio_sin   := lw_precio_sin + prPI."Precio Pax sin impuestos";
                    lw_PrecioMaleta := prPI."Precio Pax sin impuestos";
                  END
                  ELSE
                    IF lw_TipoAplicacion = lw_TipoAplicacion::Vehiculo THEN BEGIN
                      lw_precio := lw_precio + prPI."Importe con impuesto";
                      lw_precio_sin := lw_precio_sin + prPI."Importe sin impuesto";
                    END;
                END;
              END
              ELSE BEGIN
                w_pax              := w_pax + prPI."Pax Transportados";
                w_importe_supl     := w_importe_supl + prPI."Importe con impuesto";
                w_importe_supl_sin := w_importe_supl_sin + prPI."Importe sin impuesto";
                w_grupo_iva_base   := prPI."Grupo registro IVA Producto";
                lw_Imp_Supl_Total  := lw_Imp_Supl_Total + prPI."Importe con impuesto";
                lw_Imp_Supl_Total_Sin := lw_Imp_Supl_Total_Sin + prPI."Importe sin impuesto";
              END;
            END;

            prPI."Tipo linea"::Base: BEGIN
              w_importe_sin    := w_importe_sin + prPI."Importe sin impuesto";
              w_importe        := w_importe + prPI."Importe con impuesto";
              w_grupo_iva_base := prPI."Grupo registro IVA Producto";
              w_pax    := w_pax + prPI."Pax Transportados";
              w_plazas := w_plazas + prPI."Pax Facturados";
              // Si es Ni¤o, se le a¤ade a Ni¤os facturados
              IF prPar."Codigo Ni¤o" = prPI."Tipo elemento" THEN
                lw_Ni¤osFact := lw_Ni¤osFact + prPI."Pax Facturados";
            END;

            prPI."Tipo linea"::Extra: BEGIN
              w_grupo_iva_base := prPI."Grupo registro IVA Producto";
              lw_Extra_sin     := lw_Extra_sin + prPI."Importe sin impuesto";
              lw_Extra         := lw_Extra + prPI."Importe con impuesto";
            END;
          END;

      // JPT - Seg£n sea 'Precio por Pax o por Vehiculo - Si hay adults y ni¤os solo pilla el primero

          IF prPI."Tipo linea" = prPI."Tipo linea"::Base THEN
            IF prPI."Precio Pax" <> 0 THEN BEGIN
              IF lw_precio = 0 THEN BEGIN
                lw_precio    := prPI."Precio Pax";
                lw_precio_sin:= prPI."Precio Pax sin impuestos";
              END;
              lw_TipoAplicacion := lw_TipoAplicacion::Pax;
            END
            ELSE BEGIN
              lw_precio         := prPI."Precio Vehiculo";
              lw_precio_sin     := prPI."Precio Vehiculo sin impuestos";
              lw_TipoAplicacion := lw_TipoAplicacion::Vehiculo;
            END;

          IF prPI."Tipo linea" = prPI."Tipo linea"::Extra THEN BEGIN
            lw_Imp_Extra_Total     :=  lw_Imp_Extra_Total + prPI."Importe con impuesto";
            lw_Imp_Extra_Total_Sin :=  lw_Imp_Extra_Total_Sin + prPI."Importe sin impuesto";
          END;
        UNTIL prPI.NEXT = 0;


        IF rParte.GET(w_parte) THEN ; //$003
        IF (w_importe <> 0) AND (pw_linea_por_parte) THEN BEGIN

          IF w_primer_grupo THEN BEGIN
            inserta_linea_prefactura(prPreFact, rParte, lw_precio, w_importe, w_pax, w_plazas, '', w_zona,
                                     prPI, w_importe_sin, w_tipolinea::Base, prPar,
                                     w_grupo_iva_base, w_codigo, w_vuelos, w_hora, lw_precio_sin, lw_TipoAplicacion, lrLinPre );
          END
          ELSE BEGIN
            inserta_linea_prefactura(prPreFact, rParte, lw_precio, w_importe, w_pax, w_plazas, '', w_zona,
                                     prPI, w_importe_sin, w_tipolinea::Zona, prPar,
                                     w_grupo_iva_base, w_codigo, w_vuelos, w_hora, lw_precio_sin ,lw_TipoAplicacion, lrLinPre);
          END;
          //-$007Actualiza_Linea_Prefactura(lrLinPre, 0, 0, lwConceptoFacturacion, rParte.Referencia);
          Actualiza_Linea_Prefactura(lrLinPre, 0, lw_Ni¤osFact, lwConceptoFacturacion, rParte.Referencia); //+$007
        END;
        IF (w_importe_supl <> 0) AND (pw_linea_por_parte) THEN BEGIN
          inserta_linea_prefactura(prPreFact, rParte, w_importe_supl, w_importe_supl, w_pax, 0,
                                   Text009, w_zona, prPI, w_importe_supl_sin,
                                   w_tipolinea::Suplemento, prPar, w_grupo_iva_base, w_codigo, w_vuelos,
                                   w_hora, w_importe_supl_sin ,lw_TipoAplicacion, lrLinPre );
          Actualiza_Linea_Prefactura(lrLinPre, 0, 0, lwConceptoFacturacion, rParte.Referencia);
        END;
        IF (lw_Extra <> 0) AND (pw_linea_por_parte) THEN BEGIN
          inserta_linea_prefactura(prPreFact, rParte, lw_precio, lw_Extra, 0, 0, Text012, w_zona,
                                         prPI, lw_Extra_sin, w_tipolinea::Extra, prPar,
                                         w_grupo_iva_base, w_codigo, w_vuelos, w_hora, lw_precio_sin ,lw_TipoAplicacion, lrLinPre);
          Actualiza_Linea_Prefactura(lrLinPre, 0, 0, lwConceptoFacturacion, rParte.Referencia);
        END;

        IF (pw_importe_maletas <> 0) AND (pw_linea_maletas) THEN
          inserta_linea_prefactura(prPreFact, rParte, lw_precio, pw_importe_maletas, lw_cantMaletas, 0, Text008, '',
                                   prPI, pw_importe_maletas_sin, w_tipolinea::Maletas, prPar,
                                   pw_grupo_iva_maletas, w_codigo, '', 0T, lw_PrecioMaleta ,lw_TipoAplicacion, lrLinPre);

        IF (w_importe <> 0) AND (lwTipo_linea = lwTipo_linea::Base) THEN
          busca_zona(prZonPref , w_zona , w_importe , w_importe_sin , lw_precio , lw_precio_sin , prPreFact."N§ Prefactura" ,
                     w_plazas , w_pax , w_grupo_iva_base , lw_TipoAplicacion, lw_Ni¤osFact);

      // JPT  - A¤ade al final de la TABLA de zonas una linea llamada Text009 con los totales de los suplementos

        IF lw_Imp_Supl_Total <> 0 THEN BEGIN
          prZonPref.INIT;
          prZonPref.VALIDATE (Plazas        , 0);
          prZonPref.VALIDATE (Zona          , Text009);
          prZonPref.VALIDATE (Importe       , lw_Imp_Supl_Total);
          prZonPref.VALIDATE ("Importe Sin" , lw_Imp_Supl_Total_Sin);
          prZonPref.VALIDATE (Paxes         , 0);
          prZonPref.VALIDATE  ("Grupo IVA"  , w_grupo_iva_base);
          EVALUATE (prZonPref.Hora , '23:58');
          prZonPref.INSERT (TRUE);
        END;

      // Idem EXTRA

        IF lw_Imp_Extra_Total <> 0 THEN BEGIN
          prZonPref.INIT;
          prZonPref.VALIDATE (Plazas        , 0);
          prZonPref.VALIDATE (Zona          , Text022);
          prZonPref.VALIDATE (Importe       , lw_Imp_Extra_Total);
          prZonPref.VALIDATE ("Importe Sin" , lw_Imp_Extra_Total_Sin);
          prZonPref.VALIDATE (Paxes         , 0);
          prZonPref.VALIDATE  ("Grupo IVA"  , w_grupo_iva_base);
          EVALUATE (prZonPref.Hora , '23:58');
          prZonPref.INSERT (TRUE);
        END;
      END;
    END;

    PROCEDURE prefactura_resumen_codigo@14(prPreFact@1100244000 : Record 7010415;VAR prPI@1100244001 : Record 7035392;prPar@1100244002 : Record 7010311);
    VAR
      rPI@1100244003 : Record 7035392;
      rParte@1100244004 : Record 7010360;
      w_codigo@1100244005 : Code[10];
      w_primera@1100244006 : Boolean;
      w_importe_maletas@1100244007 : Decimal;
      w_importe_maletas_sin@1100244008 : Decimal;
      w_grupo_iva_maletas@1100244009 : Code[10];
      lw_TipoAplicacion@1100244010 : 'Vehiculo,Pax';
      rZonPref@1100244011 : Record 7010418;
      lrLinPre@1100244012 : Record 7010417;
    BEGIN
      // prefactura_resumen_codigo
      //
      // AJS --> Esta prefactura consta de detalle de cada parte y un resumen por cada codigo de
      //         servicio de manera que las lineas de detalle estaran agrupadas por codigo.
      //         Despues de las lineas de detalle hay un resumen de pax e importe por zona de precios.
      //
      prPI.SETCURRENTKEY("N§ Prefactura",Garaje,"Cliente Operativo",Touroperador,"Codigo servicio",Fecha);
      IF prPI.FINDSET THEN BEGIN
        w_codigo              := prPI."Codigo servicio";
        w_primera             := TRUE;
        w_importe_maletas     := 0;
        w_importe_maletas_sin := 0;
        w_grupo_iva_maletas   := '';
        rZonPref.RESET;
        rZonPref.SETRANGE ("N§ Prefactura" , prPreFact."N§ Prefactura");
        rZonPref.DELETEALL;

        REPEAT

          IF w_codigo <> prPI."Codigo servicio" THEN BEGIN


          IF rZonPref.FINDSET THEN
            REPEAT
              CLEAR (rParte);
              IF rParte.GET(rPI."N§ Parte") THEN;
              IF rZonPref.Importe <> 0 THEN BEGIN
                inserta_linea_prefactura(prPreFact, rParte,rZonPref.Precio,
                                         rZonPref.Importe, rZonPref.Paxes, rZonPref.Plazas, Text011,
                                         rZonPref.Zona, prPI, rZonPref."Importe Sin",
                                         w_tipolinea::"Resumen Zona", prPar, rZonPref."Grupo IVA", w_codigo, '', rZonPref.Hora,
                                         rZonPref."Precio Sin",rZonPref."Tipo aplicacion", lrLinPre);

                Actualiza_Linea_Prefactura (lrLinPre, rZonPref.Servicios , rZonPref."Ni¤os Facturados", '', '');
              END;

            UNTIL rZonPref.NEXT = 0;

            w_codigo := prPI."Codigo servicio";

            rZonPref.DELETEALL;
            w_primera := TRUE;
          END;
          IF w_primera THEN BEGIN
            w_primera := FALSE;
            rPI.RESET; rPI.INIT;
            rPI.COPY(prPI);
            rPI.SETRANGE("Codigo servicio", w_codigo);
            prefactura_sin_resumen(prPreFact, rPI, prPar, w_importe_maletas, FALSE,
                                    w_importe_maletas_sin, w_grupo_iva_maletas, TRUE, rZonPref);
          END;
        UNTIL prPI.NEXT = 0;
        IF w_primera THEN BEGIN
          w_primera := FALSE;
          rPI.RESET; rPI.INIT;
          rPI.COPY(prPI);
          rPI.SETRANGE("Codigo servicio", w_codigo);
          prefactura_sin_resumen(prPreFact, rPI, prPar, w_importe_maletas, FALSE,
                                 w_importe_maletas_sin, w_grupo_iva_maletas, TRUE, rZonPref);
        END;

        IF rZonPref.FINDSET THEN
          REPEAT
            CLEAR (rParte);
            IF rParte.GET(rPI."N§ Parte") THEN;
            IF rZonPref.Importe <> 0 THEN BEGIN
              inserta_linea_prefactura(prPreFact, rParte, rZonPref.Precio,
                                     rZonPref.Importe, rZonPref.Paxes, rZonPref.Plazas, Text011,
                                     rZonPref.Zona, prPI, rZonPref."Importe Sin",
                                     w_tipolinea::"Resumen Zona", prPar, rZonPref."Grupo IVA", w_codigo, '', rZonPref.Hora,
                                     rZonPref."Precio Sin", rZonPref."Tipo aplicacion", lrLinPre );

              Actualiza_Linea_Prefactura (lrLinPre ,rZonPref.Servicios ,rZonPref."Ni¤os Facturados", '', '');
            END;

          UNTIL rZonPref.NEXT = 0;
        rZonPref.DELETEALL;
        CLEAR(rParte);
        IF w_importe_maletas <> 0 THEN BEGIN
          // AJS 06.06.2008
          // Si el grupo de iva maletas esta vacio, tomamos el de la tabla de parametros

          IF w_grupo_iva_maletas = '' THEN
            w_grupo_iva_maletas := prPar."Grupo Registro IVA Maletas";

          inserta_linea_prefactura(prPreFact, rParte, 0, w_importe_maletas, 0, 0, '', '',
                                   prPI, w_importe_maletas_sin, w_tipolinea::Maletas, prPar,
                                   w_grupo_iva_maletas, rParte."Codigo Servicio", '', 0T, 0, lw_TipoAplicacion, lrLinPre);
        END;
      END;
    END;

    PROCEDURE prefactura_resumen_zona@17(prPreFact@1100244000 : Record 7010415;VAR prPI@1100244001 : Record 7035392;prPar@1100244002 : Record 7010311);
    VAR
      rParte@1100244003 : Record 7010360;
      w_codigo@1100244004 : Code[10];
      w_primera@1100244005 : Boolean;
      w_importe_maletas@1100244006 : Decimal;
      w_importe_maletas_sin@1100244007 : Decimal;
      w_grupo_iva_maletas@1100244008 : Code[10];
      lw_TipoAplicacion@1100244009 : 'Vehiculo,Pax';
      lrZonPref@1100244010 : Record 7010418;
      lrLinPre@1100244011 : Record 7010417;
    BEGIN
      // prefactura_resumen_zona
      //
      // AJS --> Esta prefactura unicamente consta de lineas de resumen por zonas de precios.
      //
      rParte.INIT;
      prPI.SETCURRENTKEY("N§ Prefactura",Garaje,"Cliente Operativo",Touroperador,Fecha,"N§ Parte","Zona Precios");
      lrZonPref.RESET;
      lrZonPref.SETRANGE ("N§ Prefactura" , prPreFact."N§ Prefactura");
      lrZonPref.DELETEALL;
      w_importe_maletas     := 0;
      w_importe_maletas_sin := 0;
      w_grupo_iva_maletas   := '';
      IF prPI.FINDSET THEN BEGIN
        prefactura_sin_resumen(prPreFact, prPI, prPar, w_importe_maletas, FALSE,
                               w_importe_maletas_sin, w_grupo_iva_maletas, FALSE, lrZonPref);



        IF lrZonPref.FINDSET THEN
          REPEAT
            CLEAR (rParte);
            IF rParte.GET(prPI."N§ Parte") THEN;

            inserta_linea_prefactura(prPreFact, rParte, lrZonPref.Precio,
                                   lrZonPref.Importe, lrZonPref.Paxes, lrZonPref.Plazas, Text023,
                                   lrZonPref.Zona, prPI, lrZonPref."Importe Sin",
                                   w_tipolinea::Base, prPar, lrZonPref."Grupo IVA", w_codigo, '', lrZonPref.Hora,
                                   lrZonPref."Precio Sin",lrZonPref."Tipo aplicacion",  lrLinPre);

            Actualiza_Linea_Prefactura (lrLinPre, lrZonPref.Servicios ,lrZonPref."Ni¤os Facturados", '', '');

          UNTIL lrZonPref.NEXT = 0;

        lrZonPref.DELETEALL;
        IF w_importe_maletas <> 0 THEN
          inserta_linea_prefactura(prPreFact, rParte, 0, w_importe_maletas, 0, 0, '', '',
                                   prPI, w_importe_maletas_sin, w_tipolinea::Maletas, prPar,
                                   w_grupo_iva_maletas, rParte."Codigo Servicio", '', 0T, 0, lw_TipoAplicacion, lrLinPre);

      END;
    END;

    PROCEDURE prefactura_resumen_vuelo@18(prPreFact@1100244000 : Record 7010415;VAR prPI@1100244001 : Record 7035392;prPar@1100244002 : Record 7010311);
    VAR
      rPI@1100244003 : Record 7035392;
      rParte@1100244004 : Record 7010360;
      w_primera@1100244005 : Boolean;
      w_importe_maletas@1100244006 : Decimal;
      w_importe_maletas_sin@1100244007 : Decimal;
      w_grupo_iva_maletas@1100244008 : Code[10];
      w_vuelo@1100244009 : Code[30];
      w_hora@1100244010 : Time;
      lw_TipoAplicacion@1100244011 : 'Vehiculo,Pax';
      lrZonPref@1100244012 : Record 7010418;
      lrLinPre@1100244013 : Record 7010417;
    BEGIN
      // prefactura_resumen_vuelo
      //
      // AJS --> Esta prefactura consta de detalle de cada parte y un resumen por cada Vuelo
      //         de manera que las lineas de detalle estaran agrupadas por vuelo.
      //         Despues de las lineas de detalle hay un resumen de pax e importe por zona de precios.
      //

      prPI.SETCURRENTKEY("N§ Prefactura",Garaje,"Cliente Operativo",Touroperador,Vuelos,Fecha);

      IF prPI.FINDSET THEN BEGIN
        w_vuelo               := prPI.Vuelos;
        w_hora                := prPI."Hora vuelo";
        w_primera             := TRUE;
        w_importe_maletas     := 0;
        w_importe_maletas_sin := 0;
        w_grupo_iva_maletas   := '';
        lrZonPref.RESET;
        lrZonPref.SETRANGE ("N§ Prefactura" , prPreFact."N§ Prefactura");
        lrZonPref.DELETEALL;
        REPEAT

          IF prPI."Precio Pax"<>0 THEN
            lw_TipoAplicacion:=lw_TipoAplicacion::Pax
          ELSE
            lw_TipoAplicacion:=lw_TipoAplicacion::Vehiculo;

          IF w_vuelo <> prPI.Vuelos THEN BEGIN

            IF lrZonPref.FINDSET THEN
              REPEAT
                IF lrZonPref.Importe <> 0 THEN BEGIN
                  inserta_linea_prefactura(prPreFact, rParte, lrZonPref.Precio,
                                         lrZonPref.Importe, lrZonPref.Paxes, lrZonPref.Plazas, Text011,
                                         lrZonPref.Zona, prPI, lrZonPref."Importe Sin",
                                         w_tipolinea::"Resumen Zona", prPar, lrZonPref."Grupo IVA", prPI."Codigo servicio",
                                         w_vuelo, w_hora, lrZonPref."Precio Sin", lrZonPref."Tipo aplicacion", lrLinPre);

                  Actualiza_Linea_Prefactura (lrLinPre, lrZonPref.Servicios ,lrZonPref."Ni¤os Facturados", '', '');
                END;

              UNTIL lrZonPref.NEXT = 0;


            w_vuelo := prPI.Vuelos;
            w_hora  := prPI."Hora vuelo";

            lrZonPref.DELETEALL;
            w_primera := TRUE;
          END;
          IF w_primera THEN BEGIN
            w_primera := FALSE;
            rPI.RESET; rPI.INIT;
            rPI.COPY(prPI);
            rPI.SETRANGE(Vuelos, w_vuelo);
            prefactura_sin_resumen(prPreFact, rPI, prPar, w_importe_maletas, FALSE,
                                    w_importe_maletas_sin, w_grupo_iva_maletas, TRUE, lrZonPref);
          END;
        UNTIL prPI.NEXT = 0;
        IF w_primera THEN BEGIN
          w_primera := FALSE;
          rPI.RESET; rPI.INIT;
          rPI.COPY(prPI);
          rPI.SETRANGE(Vuelos, w_vuelo);
          prefactura_sin_resumen(prPreFact, rPI, prPar, w_importe_maletas, FALSE,
                                 w_importe_maletas_sin, w_grupo_iva_maletas, TRUE, lrZonPref);
        END;

        IF lrZonPref.FINDSET THEN
          REPEAT
            IF lrZonPref.Importe <> 0 THEN BEGIN
              inserta_linea_prefactura(prPreFact, rParte, lrZonPref.Precio,
                                     lrZonPref.Importe, lrZonPref.Paxes, lrZonPref.Plazas, Text011,
                                     lrZonPref.Zona, prPI, lrZonPref."Importe Sin",
                                     w_tipolinea::"Resumen Zona", prPar, lrZonPref."Grupo IVA", prPI."Codigo servicio", w_vuelo,
                                     w_hora, lrZonPref."Precio Sin", lrZonPref."Tipo aplicacion", lrLinPre);

              Actualiza_Linea_Prefactura (lrLinPre, lrZonPref.Servicios ,lrZonPref."Ni¤os Facturados", '', '');
            END;

          UNTIL lrZonPref.NEXT = 0;
          lrZonPref.DELETEALL;
        IF w_importe_maletas <> 0 THEN
          inserta_linea_prefactura(prPreFact, rParte, 0, w_importe_maletas, 0, 0, '', '',
                                   prPI, w_importe_maletas_sin, w_tipolinea::Maletas, prPar,
                                   w_grupo_iva_maletas, rParte."Codigo Servicio", '', 0T, 0, lw_TipoAplicacion, lrLinPre);
      END;
    END;

    PROCEDURE prefactura_resumen_dia_codigo@21(prPreFact@1100244000 : Record 7010415;VAR prPI@1100244001 : Record 7035392;prPar@1100244002 : Record 7010311);
    VAR
      rCon@1100244003 : Record 7010403;
      rParte@1100244004 : Record 7010360;
      w_importe@1100244005 : Decimal;
      w_importe_supl@1100244006 : Decimal;
      w_importe_supl_sin@1100244007 : Decimal;
      w_pax@1100244008 : Decimal;
      w_plazas@1100244009 : Decimal;
      w_importe_sin@1100244010 : Decimal;
      w_importe_maletas@1100244011 : Decimal;
      w_importe_maletas_sin@1100244012 : Decimal;
      w_grupo_iva_base@1100244013 : Code[10];
      w_grupo_iva_maletas@1100244014 : Code[10];
      w_codigo@1100244015 : Code[10];
      w_dia@1100244016 : Date;
      lw_TipoAplicacion@1100244017 : 'Vehiculo,Pax';
      lw_Extra@1100244018 : Decimal;
      lw_Extra_Sin@1100244019 : Decimal;
      lrLinPre@1100244020 : Record 7010417;
    BEGIN
      // prefactura_resumen_dia_codigo
      //
      // AJS --> Crear una linea por cada grupo de Dia y Codigo Servicio.
      //
      prPI.SETCURRENTKEY("N§ Prefactura",Garaje,"Cliente Operativo",Touroperador,Fecha,"Codigo servicio");
      IF prPI.FINDSET THEN BEGIN
        inicia_variables(w_pax, w_plazas, w_importe, w_importe_sin, w_grupo_iva_base,
                         w_grupo_iva_maletas, w_importe_supl, w_importe_supl_sin, lw_Extra , lw_Extra_Sin);
        w_codigo       := prPI."Codigo servicio";
        w_dia          := prPI.Fecha;
        IF rParte.GET(prPI."N§ Parte") THEN ; //$003
        REPEAT

          IF prPI."Precio Pax"<>0 THEN
            lw_TipoAplicacion:=lw_TipoAplicacion::Pax
          ELSE
            lw_TipoAplicacion:=lw_TipoAplicacion::Vehiculo;

          IF (w_codigo <> prPI."Codigo servicio") OR (w_dia <> prPI.Fecha) THEN BEGIN
            IF w_importe <> 0 THEN
              inserta_linea_prefactura(prPreFact, rParte, 0, w_importe, w_pax, w_plazas, '', '',
                                       prPI, w_importe_sin, w_tipolinea::Base, prPar,
                                       w_grupo_iva_base, w_codigo, '', 0T, 0, lw_TipoAplicacion, lrLinPre);
            w_codigo := prPI."Codigo servicio";
            w_dia    := prPI.Fecha;
            IF rParte.GET(prPI."N§ Parte") THEN ; //$003
            inicia_variables(w_pax, w_plazas, w_importe, w_importe_sin, w_grupo_iva_base,
                             w_grupo_iva_maletas, w_importe_supl, w_importe_supl_sin, lw_Extra , lw_Extra_Sin);
          END;

          // ---- Tomamos el contrato de la linea que vamos a sumar                  ----

          // AJS 06.02.2004
          // El contrato puede ir contra el garaje del parte o contra el garaje TODOS

          rCon.SETFILTER(Garaje, '%1|%2', prPI.Garaje, prPar."Todos los garajes");
          rCon.SETRANGE ("N§ Contrato" , prPI."N§ Contrato");
          rCon.FINDFIRST;

          //rCon.GET(prPI.Garaje, prPI."N§ Contrato");

          IF prPI."Tipo elemento" = prPar."Codigo Maletas" THEN BEGIN
            w_importe_maletas     := w_importe_maletas + prPI."Importe con impuesto";
            w_importe_maletas_sin := w_importe_maletas_sin + prPI."Importe sin impuesto";
            w_grupo_iva_maletas   := prPI."Grupo registro IVA Producto";

            // ---- Si las maletas estan incluidas en la base del contrato hay que sumarlas ----
            // ---- a la base base                                                          ----

            IF rCon."Maletas incluidas" THEN BEGIN
              w_importe_sin    := w_importe_sin + prPI."Importe sin impuesto";
              w_importe        := w_importe + prPI."Importe con impuesto";
            END;
          END
          ELSE BEGIN
            w_importe_sin    := w_importe_sin + prPI."Importe sin impuesto";
            w_importe        := w_importe + prPI."Importe con impuesto";
            w_grupo_iva_base := prPI."Grupo registro IVA Producto";
          END;
          IF prPI."Tipo linea" = prPI."Tipo linea"::Base THEN BEGIN
            w_pax    := w_pax + prPI."Pax Transportados";
            w_plazas := w_plazas + prPI."Pax Facturados";
          END;
        UNTIL prPI.NEXT = 0;
        IF w_importe <> 0 THEN BEGIN
          inserta_linea_prefactura(prPreFact, rParte, 0, w_importe, w_pax, w_plazas, '', '',
                                   prPI, w_importe_sin, w_tipolinea::Base, prPar,
                                   w_grupo_iva_base, w_codigo, '', 0T, 0 , lw_TipoAplicacion, lrLinPre);
        END;
        IF w_importe_maletas <> 0 THEN
          inserta_linea_prefactura(prPreFact, rParte, 0, w_importe_maletas, 0, 0, Text008, '',
                                   prPI, w_importe_maletas_sin, w_tipolinea::Maletas, prPar,
                                   w_grupo_iva_maletas, w_codigo, '', 0T, 0 , lw_TipoAplicacion, lrLinPre);
      END;
    END;

    PROCEDURE prefactura_resumen_zona_detall@22(prPreFact@1100244000 : Record 7010415;VAR prPI@1100244001 : Record 7035392;prPar@1100244002 : Record 7010311);
    VAR
      rParte@1100244004 : Record 7010360;
      w_primera@1100244005 : Boolean;
      w_importe_maletas@1100244006 : Decimal;
      w_importe_maletas_sin@1100244007 : Decimal;
      w_grupo_iva_maletas@1100244008 : Code[10];
      w_vuelo@1100244009 : Code[30];
      w_hora@1100244010 : Time;
      lw_TipoAplicacion@1100244011 : 'Vehiculo,Pax';
      lrZonPref@1100244012 : Record 7010418;
      lrLinPre@1100244013 : Record 7010417;
    BEGIN
      // prefactura_resumen_zona_detall
      //
      // AJS --> Esta prefactura consta de detalle de cada parte y un resumen por cada Zona de precios.
      //
      rParte.INIT;
      prPI.SETCURRENTKEY("N§ Prefactura", Garaje, "Cliente Operativo", Touroperador, Fecha, "Codigo servicio");
      lrZonPref.RESET;
      lrZonPref.SETRANGE ("N§ Prefactura" , prPI."N§ Prefactura");
      lrZonPref.DELETEALL;
      w_importe_maletas     := 0;
      w_importe_maletas_sin := 0;
      w_grupo_iva_maletas   := '';
      IF prPI.FINDSET THEN BEGIN
        prefactura_sin_resumen(prPreFact, prPI, prPar, w_importe_maletas, FALSE, w_importe_maletas_sin,
                               w_grupo_iva_maletas, TRUE, lrZonPref);


        IF prPI."Precio Pax"<>0 THEN
          lw_TipoAplicacion:=lw_TipoAplicacion::Pax
        ELSE
          lw_TipoAplicacion:=lw_TipoAplicacion::Vehiculo;

        lrZonPref.SETCURRENTKEY(Hora);
        IF lrZonPref.FINDSET THEN
          REPEAT
            CLEAR (rParte);
            IF rParte.GET(prPI."N§ Parte") THEN;
            inserta_linea_prefactura(prPreFact, rParte, lrZonPref.Precio,
                                   lrZonPref.Importe, lrZonPref.Paxes, lrZonPref.Plazas, Text011,
                                   lrZonPref.Zona, prPI, lrZonPref."Importe Sin",
                                   w_tipolinea::"Resumen Zona", prPar, lrZonPref."Grupo IVA", rParte."Codigo Servicio",
                                   '', lrZonPref.Hora, lrZonPref."Precio Sin", lrZonPref."Tipo aplicacion", lrLinPre);

            Actualiza_Linea_Prefactura (lrLinPre, lrZonPref.Servicios ,lrZonPref."Ni¤os Facturados", '', '');

          UNTIL lrZonPref.NEXT = 0;
        lrZonPref.DELETEALL;
        IF w_importe_maletas <> 0 THEN
          inserta_linea_prefactura(prPreFact, rParte, 0, w_importe_maletas, 0, 0, '', '',
                                   prPI, w_importe_maletas_sin, w_tipolinea::Maletas, prPar,
                                   w_grupo_iva_maletas, rParte."Codigo Servicio", '', 0T, 0 , lw_TipoAplicacion, lrLinPre);
      END;
    END;

    PROCEDURE prefac_resumen_zona_dia_codigo@24(prPreFact@1100244000 : Record 7010415;VAR prPI@1100244001 : Record 7035392;prPar@1100244002 : Record 7010311);
    VAR
      rPI@1100244003 : Record 7035392;
      rParte@1100244004 : Record 7010360;
      w_codigo@1100244005 : Code[10];
      w_grupo_iva_maletas@1100244006 : Code[10];
      w_grupo_iva_maletas2@1103350000 : Code[10];
      w_primera@1100244007 : Boolean;
      w_importe_maletas@1100244008 : Decimal;
      w_importe_maletas_sin@1100244009 : Decimal;
      w_fecha@1100244010 : Date;
      lw_TipoAplicacion@1100244011 : 'Vehiculo,Pax';
      lrZonPref@1100244012 : Record 7010418;
      lrLinPre@1100244013 : Record 7010417;
    BEGIN
      // prefac_resumen_zona_dia_codigo
      //
      // AJS --> Este tipo de prefactura funciona igual que la prefactura x codigo pero ademas separa
      //         por dia.
      //
      prPI.SETCURRENTKEY("N§ Prefactura",Garaje,"Cliente Operativo",Touroperador,Fecha,"Codigo servicio");
      IF prPI.FINDSET THEN BEGIN
        w_codigo              := prPI."Codigo servicio";
        w_fecha               := prPI.Fecha;
        w_primera             := TRUE;
        w_importe_maletas     := 0;
        w_importe_maletas_sin := 0;
        w_grupo_iva_maletas   := '';
        IF rParte.GET(prPI."N§ Parte") THEN ; //$003

        lrZonPref.RESET;
        lrZonPref.SETRANGE ("N§ Prefactura" , prPI."N§ Prefactura");
        lrZonPref.DELETEALL;

          REPEAT
      // JPT - Seg£n sea 'Precio por Pax o por Vehiculo -
          IF prPI."Precio Pax"<>0 THEN
            lw_TipoAplicacion:=lw_TipoAplicacion::Pax
          ELSE
            lw_TipoAplicacion:=lw_TipoAplicacion::Vehiculo;

          IF (w_codigo <> prPI."Codigo servicio") OR  (w_fecha <> prPI.Fecha) THEN BEGIN
            IF lrZonPref.FINDSET THEN
              REPEAT
              CLEAR (rParte);
              IF rParte.GET(rPI."N§ Parte") THEN;
                IF lrZonPref.Importe <> 0 THEN BEGIN
                  inserta_linea_prefactura(prPreFact, rParte,lrZonPref.Precio,
                                         lrZonPref.Importe, lrZonPref.Paxes, lrZonPref.Plazas, Text011,
                                         lrZonPref.Zona, prPI, lrZonPref."Importe Sin",
                                         w_tipolinea::"Resumen Zona", prPar,lrZonPref."Grupo IVA", w_codigo, '', lrZonPref.Hora,
                                         lrZonPref."Precio Sin", lrZonPref."Tipo aplicacion", lrLinPre );

                  Actualiza_Linea_Prefactura (lrLinPre, lrZonPref.Servicios ,lrZonPref."Ni¤os Facturados", '', '');
                END;

              UNTIL lrZonPref.NEXT = 0;


            IF rParte.GET(prPI."N§ Parte") THEN ; //$003
            w_codigo := prPI."Codigo servicio";
            w_fecha  := prPI.Fecha;
            lrZonPref.DELETEALL;
            w_primera := TRUE;
          END;
          IF w_primera THEN BEGIN
            w_primera := FALSE;
            rPI.RESET; rPI.INIT;
            rPI.COPY(prPI);
            rPI.SETRANGE("Codigo servicio", w_codigo);
            rPI.SETRANGE(Fecha            , w_fecha);
            prefactura_sin_resumen(prPreFact, rPI, prPar, w_importe_maletas, FALSE,
                                   w_importe_maletas_sin, w_grupo_iva_maletas, TRUE, lrZonPref);

            IF w_grupo_iva_maletas2='' THEN
              w_grupo_iva_maletas2 := w_grupo_iva_maletas;
          END;
        UNTIL prPI.NEXT = 0;
        IF w_primera THEN BEGIN
          w_primera := FALSE;
          rPI.RESET; rPI.INIT;
          rPI.COPY(prPI);
          rPI.SETRANGE("Codigo servicio", w_codigo);
          rPI.SETRANGE(Fecha            , w_fecha);
          prefactura_sin_resumen(prPreFact, rPI, prPar, w_importe_maletas, FALSE,
                                  w_importe_maletas_sin, w_grupo_iva_maletas, TRUE, lrZonPref);
          IF w_grupo_iva_maletas2='' THEN
            w_grupo_iva_maletas2 := w_grupo_iva_maletas;
        END;


        IF lrZonPref.FINDSET THEN
          REPEAT
            CLEAR (rParte);
            IF rParte.GET(rPI."N§ Parte") THEN;
            IF lrZonPref.Importe <> 0 THEN BEGIN
              inserta_linea_prefactura(prPreFact, rParte, lrZonPref.Precio,
                                     lrZonPref.Importe, lrZonPref.Paxes, lrZonPref.Plazas, Text011,
                                     lrZonPref.Zona, prPI, lrZonPref."Importe Sin",
                                     w_tipolinea::"Resumen Zona", prPar, lrZonPref."Grupo IVA", w_codigo, '', lrZonPref.Hora,
                                     lrZonPref."Precio Sin", lrZonPref."Tipo aplicacion", lrLinPre);

              Actualiza_Linea_Prefactura (lrLinPre, lrZonPref.Servicios ,lrZonPref."Ni¤os Facturados", '', '');
            END;

          UNTIL lrZonPref.NEXT = 0;
          lrZonPref.DELETEALL;
        IF w_importe_maletas <> 0 THEN
          inserta_linea_prefactura(prPreFact, rParte, 0, w_importe_maletas, 0, 0, '', '',
                                   prPI, w_importe_maletas_sin, w_tipolinea::Maletas, prPar,
                                   w_grupo_iva_maletas2, rParte."Codigo Servicio", '', 0T, 0, lw_TipoAplicacion, lrLinPre);
      END;
    END;

    PROCEDURE inserta_linea_prefactura@13(prPrefact@1100244000 : Record 7010415;prParte@1100244001 : Record 7010360;pw_precio@1100244002 : Decimal;pw_importe@1100244003 : Decimal;pw_pax@1100244004 : Decimal;pw_plaza@1100244005 : Decimal;pw_descripcion@1100244006 : Text[15];pw_zona@1100244007 : Code[10];VAR prPI@1100244008 : Record 7035392;pw_importe_sin@1100244009 : Decimal;pw_tipo_linea@1100244010 : 'Base,Suplemento,Maletas,Comentario,Zona,Resumen Zona,Solo Resumen Zona,Extra';prPar@1100244011 : Record 7010311;pw_grupo_iva@1100244012 : Code[10];pw_codigo_servicio@1100244013 : Code[10];pw_vuelo@1100244014 : Text[30];pw_hora@1100244015 : Time;pw_precio_sin@1100244016 : Decimal;pw_TipoAplicacion@1100244017 : 'Vehiculo,Pax';VAR prLinPre@1100244018 : Record 7010417) : Decimal;
    VAR
      rLin@1100244019 : Record 7010417;
      rLinBusca@1103350000 : Record 7010417;
      lrCon@1100244020 : Record 7010403;
      lrTipoSer@1100244021 : Record 7010319;
      lrCodSer@1100244023 : Record 7010320;
      lw_EsExcursion@1100244022 : Boolean;
    BEGIN
      // inserta_linea_prefactura
      //
      // AJS --> Crear una linea en el fichero de lineas prefactura
      //
      // Prefactura, Parte, Precio, Importe, Pax, Plazas, Descripcion, Zona, Touroperador, Importe Sin,
      // Tipo linea, parametros, grupo IVA, codigo servicio, Vuelo, Hora Vuelo, precio sin,
      // tipo aplicacion
      //
      rLin.RESET; rLin.INIT;
      rLin."N§ Prefactura" := prPrefact."N§ Prefactura";
      rLin.INSERT(TRUE);

      // AJS 17.08.2005
      // Cuando la linea sea de tipo ZONA vamos a comprobar que exista al menos una linea de tipo BASE para ese parte, en
      // caso contrario transformamos la linea en tipo BASE

      IF pw_tipo_linea = pw_tipo_linea::Zona THEN BEGIN
        rLinBusca.SETCURRENTKEY("N§ Prefactura",
                                Hora,
                                Fecha,
                                Parte);
        rLinBusca.SETRANGE("N§ Prefactura", prPrefact."N§ Prefactura");
        rLinBusca.SETRANGE(Parte          , prParte."N§ Parte");
        rLinBusca.SETRANGE(Tipo           , rLinBusca.Tipo::Base);
        IF NOT rLinBusca.FINDFIRST THEN
          pw_tipo_linea := pw_tipo_linea::Base;
      END;


      IF pw_codigo_servicio='' THEN
        pw_codigo_servicio := prPI."Codigo servicio";

      rLin.Tipo                    := pw_tipo_linea;
      rLin.Fecha                   := prParte.Fecha;
      IF prParte."N§ Parte" <> '' THEN BEGIN
        IF pw_tipo_linea = pw_tipo_linea::Maletas THEN
          EVALUATE(rLin.Hora, '23:59')
        ELSE
          rLin.Hora := pw_hora;
        rLin.Vuelo             := pw_vuelo;
        rLin."Codigo Servicio" := prParte."Codigo Servicio";
      END
      ELSE BEGIN
        EVALUATE(rLin.Hora, '23:59');
        rLin.Vuelo             := pw_vuelo;
        rLin."Codigo Servicio" := pw_codigo_servicio;
      END;

      {*
      // ----  Sumamos un segundo a las lineas de suplementos y extras para que aparezcan como  ----
      // ----  la ultima zona cuando los ordenamos por hora                                     ----

      IF (pw_tipo_linea = pw_tipo_linea::Suplemento) OR (pw_tipo_linea = pw_tipo_linea::Extra) THEN
        rLin.Hora := rLin.Hora + 1000;
      *}

      rLin.Letra                   := prParte.Letra;
      rLin.Bus                     := prParte."N§ Vehiculo";
      rLin.Parte                   := prParte."N§ Parte";

      // ----  AJS 22.01.2002  ----
      // ----  Para saber si se trata de una excursion hay que consultar el tipo de servicio  ----

      // lw_EsExcursion := prPar."Codigo Tipo Excursiones" = prParte."Tipo Servicio";

      lrCodSer.RESET;
      lrCodSer.GET(rLin."Codigo Servicio");

      lrTipoSer.RESET;
      lrTipoSer.GET(lrCodSer."Tipo servicio");

      rLin."Tipo Servicio Fijo" := lrTipoSer."Tipo fijo";
      lw_EsExcursion := lrTipoSer."Tipo fijo" = lrTipoSer."Tipo fijo"::Excursion;

      IF rLin."Codigo Servicio" = prPar."Codigo Salidas" THEN BEGIN
        IF lw_EsExcursion AND (rLin.Tipo = rLin.Tipo::Zona)  THEN
          rLin.Origen  := ''
        ELSE
          rLin.Origen  := pw_zona;
        IF (rLin.Tipo = rLin.Tipo::Base) OR (rLin.Tipo = rLin.Tipo::Zona)  THEN
          rLin.Destino := prParte."Origen/Destino";
      END
      ELSE BEGIN
        IF lw_EsExcursion AND (rLin.Tipo = rLin.Tipo::Zona) THEN
          rLin.Origen  := ''
        ELSE
        IF (rLin.Tipo = rLin.Tipo::Base) OR (rLin.Tipo = rLin.Tipo::Zona) THEN
          rLin.Origen  := prParte."Origen/Destino";
        rLin.Destino := pw_zona;
      END;

      // ----  AJS 5.10.2001  Buscamos el contrato para saber si lo precios se han introducido  ----
      // ----  IVA o sin IVA incluido y luego entrar los precios con impuestos o sin ellos      ----

      lrCon.RESET;

      // AJS 06.02.2004
      // El contrato puede ir contra el garaje del parte o contra el garaje TODOS

      lrCon.SETFILTER(Garaje, '%1|%2', prPrefact.Garaje, prPar."Todos los garajes");
      lrCon.SETRANGE ("N§ Contrato" , prPrefact."N§ Contrato");
      lrCon.FINDFIRST;

      //lrCon.GET(prPrefact.Garaje, prPrefact."N§ Contrato");

      rLin."Grupo registro IVA producto" := pw_grupo_iva;
      IF lrCon."Impuestos incluidos" THEN BEGIN
        rLin.VALIDATE("Precio con impuestos" , pw_precio);
        rLin.VALIDATE("Importe con impuestos", pw_importe);
      END ELSE
      BEGIN
        rLin.VALIDATE("Precio sin impuestos" , pw_precio_sin);
        rLin.VALIDATE("Importe sin impuestos", pw_importe_sin);
      END;

      // Aplica descuentos

      // AJF 13/03/08 - DRF 07002
      // Si el Contrato de Venta indica que se debe aplicar el dto a las maletas se lo aplicamos.

      rLin."Importe Sin IVA Sin Dto" := rLin."Importe sin impuestos";
      rLin."Importe Con IVA Sin Dto" := rLin."Importe con impuestos";
      IF prPrefact."% Dto" <> 0 THEN BEGIN
        IF pw_tipo_linea <> pw_tipo_linea::Maletas THEN
          rLin.VALIDATE("% Dto", prPrefact."% Dto")
        ELSE BEGIN
          IF lrCon."Descuento sobre maletas" THEN BEGIN
            rLin.VALIDATE("% Dto", prPrefact."% Dto");
          END;
        END;
      END;


      // ----  FIN AJS 5.10.2001  ----

      // Para los partes de recogida no sumamos los paxes, ya que se duplican.
      IF prParte."Origen creacion" = prParte."Origen creacion"::"Recogida Automatica" THEN
        rLin.Pax                         := 0
      ELSE
        rLin.Pax                         := pw_pax;

      rLin.Plazas                        := pw_plaza;
      rLin.Descripcion                   := pw_descripcion;
      rLin.Zona                          := pw_zona;
      rLin."Tipo aplicacion"             := pw_TipoAplicacion;
      rLin."Cod. Divisa"                 := prPrefact."Cod. Divisa";
      rLin."Zona Trabajo"                := prPI."Zona facturacion";
      rLin.Touroperador                  := prPI.Touroperador;
      rLin."Precio manual"               := prPI."Precio manual";
      rLin.MODIFY;

      prLinPre := rLin;
    END;

    PROCEDURE inicia_variables@19(VAR pw_pax@1100244000 : Decimal;VAR pw_plazas@1100244001 : Decimal;VAR pw_importe@1100244002 : Decimal;VAR pw_importe_sin@1100244003 : Decimal;VAR pw_grupo_iva_base@1100244004 : Code[10];VAR pw_grupo_iva_maletas@1100244005 : Code[10];VAR pw_importe_supl@1100244006 : Decimal;VAR pw_importe_supl_sin@1100244007 : Decimal;VAR pw_importe_extra@1100244008 : Decimal;VAR pw_importe_extra_sin@1100244009 : Decimal);
    BEGIN
      // inicia_variables
      //
      pw_pax               := 0;
      pw_plazas            := 0;
      pw_importe           := 0;
      pw_importe_sin       := 0;
      pw_grupo_iva_base    := '';
      pw_grupo_iva_maletas := '';
      pw_importe_supl      := 0;
      pw_importe_supl_sin  := 0;
      pw_importe_extra     := 0;
      pw_importe_extra_sin := 0;
    END;

    PROCEDURE busca_zona@27(VAR prZonPref@1100244000 : Record 7010418;pwZona@1100244001 : Code[10];pwImporte@1100244002 : Decimal;pwImporte_sin@1100244003 : Decimal;pwPrecio@1100244004 : Decimal;pwPrecio_sin@1100244005 : Decimal;"pwN§_de_Prefactura"@1100244006 : Code[20];pwPlazas@1100244007 : Decimal;pwPaxes@1100244008 : Decimal;pwGrupo_IVA@1100244009 : Code[10];pwTipoAplicacion@1100244010 : 'Vehiculo,Pax';pwNi¤osFact@1100244011 : Decimal);
    VAR
      lrPref@1100244012 : Record 7010415;
      lwZonaPlazas@1100244013 : Boolean;
      lwNumReg@1100244014 : Integer;
    BEGIN
      // busca_zona
      //
      // Seg£n sea el tipo de prefactura se resumira por zona o por zona - plazas


      IF lrPref.GET("pwN§_de_Prefactura") THEN
        BEGIN
          lwZonaPlazas := lrPref."Tipo prefactura" = lrPref."Tipo prefactura"::"Resumen x Codigo";
        END
        ELSE
        lwZonaPlazas := FALSE;

      prZonPref.SETRANGE (Zona , pwZona);
      prZonPref.SETRANGE ("N§ Prefactura" , "pwN§_de_Prefactura" );
      lwNumReg := prZonPref.COUNT;
      IF lwZonaPlazas THEN
        prZonPref.SETRANGE (Plazas , pwPlazas);

      IF prZonPref.FINDFIRST THEN BEGIN
        prZonPref.VALIDATE(Servicios , prZonPref.Servicios + 1);
        IF NOT lwZonaPlazas THEN
          prZonPref.VALIDATE(Plazas    , prZonPref.Plazas +  pwPlazas);
      END
      ELSE BEGIN
        prZonPref.INIT;
        prZonPref.Zona            := pwZona;
        prZonPref.Plazas          := pwPlazas;
        prZonPref."N§ Prefactura" := "pwN§_de_Prefactura";
        prZonPref.Servicios       := 1;
        prZonPref.NumLinea        := lwNumReg;
        EVALUATE (prZonPref.Hora , '23:57');
        prZonPref.INSERT (TRUE);
      END;

      prZonPref.VALIDATE (Paxes           , prZonPref.Paxes +  pwPaxes);
      prZonPref.VALIDATE (Importe         , prZonPref.Importe + pwImporte);
      prZonPref.VALIDATE ("Importe Sin"   , prZonPref."Importe Sin" + pwImporte_sin);
      prZonPref.VALIDATE ("Grupo IVA"     , pwGrupo_IVA);
      prZonPref.VALIDATE (Precio          , pwPrecio);
      prZonPref.VALIDATE ("Precio Sin"    , pwPrecio_sin);
      prZonPref.VALIDATE ("Ni¤os Facturados"   , prZonPref."Ni¤os Facturados" +  pwNi¤osFact);

      prZonPref.MODIFY (TRUE);

      prZonPref.SETRANGE (Zona);
      prZonPref.SETRANGE (Plazas);
    END;

    PROCEDURE Actualiza_Linea_Prefactura@28(VAR prLinPre@1100244000 : Record 7010417;pwServicios@1100244001 : Decimal;pwNi¤osFact@1100244002 : Decimal;pwConceptoFacturacion@1100244003 : Text[30];pwReferencia@1100244004 : Text[30]);
    BEGIN
      // Actualiza_Linea_Prefactura
      //
      // Resulta que la funci¢n Inserta_Linea_Prefactura no puede absorber m s variables. Es por ello
      // que se cre¢ esta funci¢n para acabar de rellenar los campos que no caben.
      // Nota: la funci¢n  Inserta_Linea_Prefactura devuelve la l¡nea creada.

      prLinPre.VALIDATE ("N§ de Servicios", pwServicios);
      prLinPre.VALIDATE ("Ni¤os Facturados", pwNi¤osFact);
      prLinPre."Concepto facturacion" := pwConceptoFacturacion;
      prLinPre.Referencia             := pwReferencia;
      prLinPre.MODIFY(TRUE);
    END;

    PROCEDURE FiltroTTOO@1100244000(VAR prCliTo@1100244002 : Record 7010313) : Text[1000];
    VAR
      lwTexto@1100244000 : Text[1000];
      lrCliTo@1100244001 : Record 7010313;
    BEGIN
      // FiltroTTOO
      // Devuelve la concatenacion de touroperadores relacionados para facturacion con este cliente
      // Por el campo "Grupo Facturacion"

      CLEAR(lwTexto);
      IF prCliTo."Grupo Facturacion" = '' THEN
        lwTexto:= prCliTo.TTOO
      ELSE
        IF prCliTo.TTOO = prCliTo."Grupo Facturacion" THEN BEGIN // Si es maestro
          lrCliTo.RESET;
          lrCliTo.SETCURRENTKEY("Grupo Facturacion");
          lrCliTo.SETRANGE("Grupo Facturacion", prCliTo.TTOO);
          IF lrCliTo.FINDSET THEN BEGIN
            REPEAT
              IF lwTexto <>'' THEN
                lwTexto +='|';
              lwTexto += lrCliTo.TTOO;
            UNTIL lrCliTo.NEXT=0;
          END;
        END
        ELSE
          ERROR(Text024,prCliTo.Cliente,prCliTo.TTOO);
      EXIT(lwTexto);
    END;

    PROCEDURE AgrupaLinPrefact@1100244001(prPrefact@1100244001 : Record 7010415);
    VAR
      lrLinPre@1100244000 : Record 7010417;
      lrLinPre2@1100244002 : Record 7010417;
      lwAgrup@1100244003 : Boolean;
    BEGIN
      // AgrupaLinPrefact
      // Esta funci¢n se encarga de agrupar las lineas de prefactura que se acaba de crear por :
      // - Concepto de facturacion
      // - Precio


      CLEAR(lrLinPre);
      CLEAR(lrLinPre2);
      lrLinPre.SETRANGE("N§ Prefactura", prPrefact."N§ Prefactura");
      lrLinPre2.COPY(lrLinPre);
      IF lrLinPre.FINDLAST THEN BEGIN
        REPEAT
          lrLinPre2.SETFILTER("N§ Linea",'<>%1',lrLinPre."N§ Linea");
          IF lrLinPre2.FINDSET THEN
            CLEAR(lwAgrup);
            REPEAT
              lwAgrup := (lrLinPre."Concepto facturacion" = lrLinPre2."Concepto facturacion") AND
                         (lrLinPre."Precio con impuestos" = lrLinPre2."Precio con impuestos") AND
                         (lrLinPre."% Dto"                = lrLinPre2."% Dto" )AND
                         (lrLinPre.Fecha                  = lrLinPre2.Fecha) AND
                         (lrLinPre.Referencia             = lrLinPre2.Referencia);

              IF lwAgrup THEN BEGIN
                lrLinPre2."Importe con impuestos"   += lrLinPre."Importe con impuestos";
                lrLinPre2."Importe sin impuestos"   += lrLinPre."Importe sin impuestos";
                lrLinPre2.Pax                       += lrLinPre.Pax;
                lrLinPre2.Plazas                    += lrLinPre.Plazas;
                lrLinPre2."N§ de Servicios"         += lrLinPre."N§ de Servicios";
                lrLinPre2."Ni¤os Facturados"        += lrLinPre."Ni¤os Facturados";
                lrLinPre2."Importe Sin IVA Sin Dto" += lrLinPre."Importe Sin IVA Sin Dto";
                lrLinPre2."Importe Con IVA Sin Dto" += lrLinPre."Importe Con IVA Sin Dto";
                lrLinPre2."Cantidad Dto"            += lrLinPre."Cantidad Dto";
                lrLinPre2.MODIFY;
                lrLinPre.DELETE;
              END;
            UNTIL (lrLinPre2.NEXT=0) OR lwAgrup;
        UNTIL lrLinPre.NEXT(-1)=0;
      END;
    END;

    PROCEDURE ImprimeFact@1100244002(VAR prPreFact@1100244001 : Record 7010415);
    VAR
      lrLista@1100244000 : Record 2000000001;
      lrCom@1100244002 : Record 44;
      lrPar@1100244004 : Record 7010311;
      lrCab@1103350000 : Record 36;
      lwNoFra@1100244005 : Integer;
    BEGIN
      // ImprimeFact

      prPreFact."Imprime Mail":= FALSE;
      prPreFact.MODIFY;

      COMMIT;

      lrPar.GET;
      CLEAR(lwNoFra);
      CASE prPreFact."Tipo factura" OF
        prPreFact."Tipo factura"::"Sin resumen": BEGIN
          lrPar.TESTFIELD("Factura sin resumen");
          lwNoFra := lrPar."Factura sin resumen";
        END;

        prPreFact."Tipo factura"::"Texto alternativo",
        prPreFact."Tipo factura"::"Resumen x Referencia": BEGIN
          lrPar.TESTFIELD("Factura Texto alternativo");
          lwNoFra := lrPar."Factura Texto alternativo";
        END;

        prPreFact."Tipo factura"::"Resumen x Codigo": BEGIN
          lrPar.TESTFIELD("Factura Resumen-Codigo");
          lwNoFra := lrPar."Factura Resumen-Codigo";
        END;

        prPreFact."Tipo factura"::"Resumen x Zona": BEGIN
          lrPar.TESTFIELD("Factura Resumen-Zona");
          lwNoFra := lrPar."Factura Resumen-Zona";
        END;

        prPreFact."Tipo factura"::"Resumen x Vuelo": BEGIN
          lrPar.TESTFIELD("Factura Resumen-Vuelo");
          lwNoFra := lrPar."Factura Resumen-Vuelo";
        END;

        prPreFact."Tipo factura"::"Resumen x Dia-Codigo" : BEGIN
          lrPar.TESTFIELD("Factura Resumen Dia-Codigo");
          lwNoFra := lrPar."Factura Resumen Dia-Codigo";
        END;

        prPreFact."Tipo factura"::"Resumen x Zona-Detalle"   : BEGIN
          lrPar.TESTFIELD("Factura Zona-Detalle");
          lwNoFra := lrPar."Factura Zona-Detalle";
        END;

        prPreFact."Tipo factura"::"Resumen x Zona Dia-Codigo": BEGIN
          lrPar.TESTFIELD("Factura Zona-Dia-Codigo");
          lwNoFra := lrPar."Factura Zona-Dia-Codigo";
        END;
      END;

      CASE lrPar."Empresa Real" OF
        // En TransUnion, Ultramar y San Jose Imprimimos por Prefactura
        lrPar."Empresa Real"::TRN, lrPar."Empresa Real"::SJO, lrPar."Empresa Real"::UEX, rPar."Empresa Real"::CNT :
        BEGIN
          lrLista.RESET;
          IF lrLista.GET(lrLista.Type::Report, '', lwNoFra) THEN
            REPORT.RUNMODAL(lrLista.ID, TRUE, TRUE, prPreFact);
        END;
        ELSE
        BEGIN // Para todas las dem s empresas
          // Filtramos la cabecera de factura a partir de la prefactura
          CLEAR(lrCab);
          IF prPreFact.GETFILTER("Tipo Documento") <> '' THEN
            lrCab.SETFILTER("Document Type", prPreFact.GETFILTER("Tipo Documento"));

          IF prPreFact.GETFILTER("N§ Factura") <> '' THEN
            lrCab.SETFILTER(lrCab."No.", prPreFact.GETFILTER("N§ Factura"))
          ELSE
            lrCab.SETRANGE(lrCab."No.", prPreFact."N§ Factura");

          // Comentarios
          IF lrCab.FINDFIRST AND (lrCab.COUNT=1) THEN
          BEGIN
            lrCom.RESET;
            lrCom.INIT;
            lrCom.SETRANGE("Document Type", lrCab."Document Type");
            lrCom.SETRANGE("No."          , lrCab."No.");
            FORM.RUNMODAL(67, lrCom);
          END;

          IF lwNoFra <> 0 THEN
          BEGIN
            lrLista.RESET;
            IF lrLista.GET(lrLista.Type::Report, '', lwNoFra) THEN BEGIN
              lrCab."Imprime Logo" := prPreFact."Imprime Mail";
              REPORT.RUNMODAL(lrLista.ID, TRUE, TRUE, lrCab);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE ImprimePrefact@1103350000(VAR prPreFact@1103350002 : Record 7010415);
    VAR
      lrLista@1103350003 : Record 2000000001;
      lrPar@1103350001 : Record 7010311;
      lwNoPrefact@1103350000 : Integer;
    BEGIN
      // ImprimePrefact

      prPreFact."Imprime Mail":= FALSE;
      prPreFact.MODIFY;
      COMMIT;

      lrPar.GET;
      CLEAR(lwNoPrefact);

      CASE prPreFact."Tipo prefactura" OF
        prPreFact."Tipo prefactura"::"Sin resumen",prPreFact."Tipo prefactura"::"Resumen x Referencia": BEGIN
          lrPar.TESTFIELD("Prefactura Sin resumen");
          lwNoPrefact:= lrPar."Prefactura Sin resumen";
        END;

        prPreFact."Tipo prefactura"::"Resumen x Codigo": BEGIN
          lrPar.TESTFIELD("Prefactura Resumen-Codigo");
          lwNoPrefact:= lrPar."Prefactura Resumen-Codigo";
        END;

        prPreFact."Tipo prefactura"::"Resumen x Zona": BEGIN
          lrPar.TESTFIELD("Prefactura Resumen-Zona");
          lwNoPrefact:= lrPar."Prefactura Resumen-Zona";
        END;

        prPreFact."Tipo prefactura"::"Resumen x Vuelo": BEGIN
          lrPar.TESTFIELD("Prefactura Resumen-Vuelo");
          lwNoPrefact:= lrPar."Prefactura Resumen-Vuelo";
        END;

        prPreFact."Tipo prefactura"::"Resumen x Dia-Codigo": BEGIN
          lrPar.TESTFIELD("Prefactura Resumen Dia-Codigo");
          lwNoPrefact:= lrPar."Prefactura Resumen Dia-Codigo";
        END;

        prPreFact."Tipo prefactura"::"Resumen x Zona-Detalle": BEGIN
          lrPar.TESTFIELD("Prefactura Zona-Detalle");
          lwNoPrefact:= lrPar."Prefactura Zona-Detalle";
        END;

        prPreFact."Tipo prefactura"::"Resumen x Zona Dia-Codigo": BEGIN
          lrPar.TESTFIELD("Prefactura Zona-Dia-Codigo");
          lwNoPrefact:= lrPar."Prefactura Zona-Dia-Codigo";
        END;

        prPreFact."Tipo prefactura"::"Texto alternativo": BEGIN
          lrPar.TESTFIELD("Prefactura Texto alternativo");
          lwNoPrefact:= lrPar."Prefactura Texto alternativo";
        END;
      END;

      lrLista.RESET;
      lrLista.INIT;
      IF lwNoPrefact <> 0 THEN BEGIN
        IF lrLista.GET(lrLista.Type::Report, '', lwNoPrefact) THEN
          REPORT.RUNMODAL(lrLista.ID, TRUE, TRUE, prPreFact);
      END;
    END;

    PROCEDURE GetIvaFactura@1103350001(VAR prCabvta@1103350000 : Record 36;pwTipo@1103350001 : 'Todos,Base,Maletas';VAR prLinIVA@1103350005 : TEMPORARY Record 290;pwMaletasInc@1103350006 : Boolean);
    VAR
      lrLinVta@1103350002 : Record 37;
      lrTempLinVta@1103350003 : TEMPORARY Record 37;
      lrPrefac@1103350007 : Record 7010415;
      lwOK@1103350004 : Boolean;
    BEGIN
      // GetIvaFactura
      // Esta funci¢n devuelve el temporal de IVA de la factura pasado como parametro
      // pwTipo definira si queremos optener el IVA de las lineas base, de las lineas de maletas o ambos
      // pwMaletasInc Indica el si el contrato tiene las maletas incluidas
      // Si las maletas est n incluidas en el contrato hay que descontar de la base el importe correspondiente a las maletas

      rPar.FINDFIRST;
      // Limpiamos el temporal de IVA
      prLinIVA.RESET;
      IF prLinIVA.FINDSET THEN
        prLinIVA.DELETEALL;

      // Pasamos la informaci¢n a un temporal, filtrando seg£n se pida por lineas Base,Maletas o Ambas
      CLEAR(lrLinVta);
      lrLinVta.SETRANGE("Document Type" , prCabvta."Document Type");
      lrLinVta.SETRANGE("Document No."  , prCabvta."No.");
      IF lrLinVta.FINDSET THEN BEGIN
        REPEAT
          CASE pwTipo OF
            pwTipo::Base    : lwOK := lrLinVta."Description 2" <> Text_LinMaletas;
            pwTipo::Maletas : lwOK := lrLinVta."Description 2" = Text_LinMaletas;
            ELSE lwOK := TRUE;
          END;

          IF (pwTipo = pwTipo::Base) AND pwMaletasInc AND (NOT lwOK) THEN BEGIN
            lwOK := TRUE;

            lrLinVta.Type := lrLinVta.Type::"G/L Account";
            lrLinVta.VALIDATE("VAT Bus. Posting Group"  , prCabvta."VAT Bus. Posting Group");
            //-$001lrLinVta.VALIDATE("VAT Prod. Posting Group" , rPar."Grupo Registro IVA Maletas");
            IF  prCabvta."Prices Including VAT" THEN
            BEGIN
              //+$006 <
              IF prCabvta."Document Type" = prCabvta."Document Type"::Invoice THEN
              BEGIN
                lrLinVta."Line Amount" := - lrLinVta."Importe Impresion con";
              lrLinVta."Unit Price"  := - lrLinVta."Importe Impresion con";
            END
              ELSE
              BEGIN
                lrLinVta."Line Amount" := lrLinVta."Importe Impresion con";
                lrLinVta."Unit Price"  := lrLinVta."Importe Impresion con";
              END;
              //+$006 >
            END
            ELSE
            BEGIN
              //+$006 <
              IF prCabvta."Document Type" = prCabvta."Document Type"::Invoice THEN
              BEGIN
                lrLinVta."Line Amount" := - lrLinVta."Importe Impresion con";
              lrLinVta."Unit Price"  := - lrLinVta."Importe Impresion";
              END
              ELSE
              BEGIN
                lrLinVta."Line Amount" := lrLinVta."Importe Impresion con";
                lrLinVta."Unit Price"  := lrLinVta."Importe Impresion";
              END;
              //+$006 >
            END;
            lrLinVta.SetHideValidationDialog(TRUE); //+$009
            lrLinVta.VALIDATE(Quantity ,1);
          END;

          // JPT 27/06/05 Necesitamos el desglose aun cuando las maletas sea precio incluido
          // Si las maletas estan incluidas le ponemos el precio a la linea temporal
          IF (pwTipo = pwTipo::Maletas) {AND pwMaletasInc}  AND lwOK THEN BEGIN
            lrLinVta.Type := lrLinVta.Type::"G/L Account";

            lrLinVta.VALIDATE("VAT Bus. Posting Group"  , prCabvta."VAT Bus. Posting Group");
            //-$001lrLinVta.VALIDATE("VAT Prod. Posting Group" , rPar."Grupo Registro IVA Maletas");

            // AJS 19.05.2008
            // Le ponemos importes a la linea para que descuente del IVA total

            //+$005 <
            IF prCabvta."Document Type" = prCabvta."Document Type"::"Credit Memo" THEN
            BEGIN
              IF prCabvta."Prices Including VAT" THEN BEGIN
                lrLinVta.VALIDATE("Unit Price" , - lrLinVta."Importe Impresion con");
                lrLinVta."Amount Including VAT" := - lrLinVta."Importe Impresion con";
              END
              ELSE BEGIN
                lrLinVta.VALIDATE("Unit Price" , - lrLinVta."Importe Impresion");
                lrLinVta.Amount := - lrLinVta."Importe Impresion";
              END;
            END
            ELSE
            BEGIN
            IF  prCabvta."Prices Including VAT" THEN BEGIN
              lrLinVta.VALIDATE("Unit Price" , lrLinVta."Importe Impresion con");
              lrLinVta."Amount Including VAT" := lrLinVta."Importe Impresion con";
            END
            ELSE BEGIN
              lrLinVta.VALIDATE("Unit Price" , lrLinVta."Importe Impresion");
              lrLinVta.Amount := lrLinVta."Importe Impresion";
            END;
            END;
            //+$005 >
            lrLinVta.SetHideValidationDialog(TRUE); //+$009
            lrLinVta.VALIDATE(Quantity ,1);
          END;
          // FIN JPT 27/06/05

          IF lwOK THEN
          BEGIN
            lrTempLinVta := lrLinVta;
            lrTempLinVta.INSERT;
          END;
        UNTIL lrLinVta.NEXT=0;
      END;

      IF lrTempLinVta.FINDFIRST THEN
      BEGIN
        lrLinVta.CalcVATAmountLines(1,prCabvta,lrTempLinVta,prLinIVA);
        lrTempLinVta.UpdateVATOnLines(1, prCabvta, lrTempLinVta,prLinIVA);
      END;

      // Se agrupan las lineas para que no haya lineas de iva positivo y negativo
      lrPrefac.AgrupaLin(prLinIVA);
    END;

    PROCEDURE InsertaDimCab@1103350002(VAR prCab@1103350000 : Record 36;pwDimension@1103350001 : Code[20];pwValor@1103350002 : Code[20]);
    VAR
      lrDocDim@1103350003 : Record 357;
    BEGIN
      // InsertaDimCab
      // Inserta dimension a la cabecera de factura

      IF pwValor='' THEN
        EXIT;

      CLEAR(lrDocDim);
      lrDocDim.VALIDATE("Table ID"            , DATABASE::"Sales Header");
      lrDocDim.VALIDATE("Document Type"       , prCab."Document Type");
      lrDocDim.VALIDATE("Document No."        , prCab."No.");
      lrDocDim.VALIDATE("Dimension Code"      , pwDimension);
      lrDocDim.VALIDATE("Dimension Value Code", pwValor);
      lrDocDim.INSERT(TRUE);
    END;

    PROCEDURE InsertaDimLin@1103350005(VAR prLin@1103350000 : Record 37;pwDimension@1103350001 : Code[20];pwValor@1103350002 : Code[20]);
    VAR
      lrDocDim@1103350003 : Record 357;
      lrDocDim2@1103350004 : Record 357;
    BEGIN
      // InsertaDimLin
      // Inserta dimension a la linea de factura

      IF pwValor='' THEN
        EXIT;

      CLEAR(lrDocDim);
      lrDocDim.VALIDATE("Table ID"            , DATABASE::"Sales Line");
      lrDocDim.VALIDATE("Document Type"       , prLin."Document Type");
      lrDocDim.VALIDATE("Document No."        , prLin."Document No.");
      lrDocDim.VALIDATE("Line No."            , prLin."Line No.");
      lrDocDim.VALIDATE("Dimension Code"      , pwDimension);
      lrDocDim.VALIDATE("Dimension Value Code", pwValor);

      lrDocDim2 := lrDocDim;
      IF lrDocDim.FIND THEN BEGIN
        IF lrDocDim2."Dimension Value Code" <> lrDocDim."Dimension Value Code" THEN
          lrDocDim.MODIFY(TRUE)
      END ELSE
        lrDocDim.INSERT(TRUE);
    END;

    PROCEDURE BuscaTipoServ@1103350003(prLInPref@1103350000 : Record 7010417) : Code[10];
    VAR
      lrCodSer@1103350001 : Record 7010320;
    BEGIN
      // BuscaTipoServ
      CLEAR(lrCodSer);
      IF lrCodSer.GET(prLInPref."Codigo Servicio") THEN
        EXIT(lrCodSer."Tipo servicio");
    END;

    PROCEDURE BuscaTipoServCab@1103350008(VAR prPref@1103350000 : Record 7010415) : Code[10];
    VAR
      lrLInPref@1103350001 : Record 7010417;
    BEGIN
      // BuscaTipoServCab

      CLEAR(lrLInPref);
      lrLInPref.SETRANGE("N§ Prefactura"   , prPref."N§ Prefactura");
      lrLInPref.SETFILTER("Codigo Servicio",'<>%1','');
      IF lrLInPref.FINDFIRST THEN
        EXIT(BuscaTipoServ(lrLInPref));
    END;

    PROCEDURE AgrupaLineas@1103350004(prCab@1103350002 : Record 36);
    VAR
      lrLin@1103350000 : Record 37;
      lrLin2@1103350001 : Record 37;
      lrLin3@1103350004 : Record 37;
      lwOk@1103350003 : Boolean;
    BEGIN
      // AgrupaLineas
      //
      // JPT 20/12/04 Agrupa las lineas de factura x Tipo Servicio, TTOO, y GARAJE
      // DE momento no se utiliza.

      CLEAR(lrLin);
      lrLin.SETRANGE("Document Type" , prCab."Document Type");
      lrLin.SETRANGE("Document No."  , prCab."No.");
      IF lrLin.FINDSET(TRUE) THEN BEGIN
        REPEAT
          lrLin2.COPY(lrLin);
          IF lrLin2.FIND THEN BEGIN
            REPEAT
              lwOk := lrLin."Line No." <> lrLin2."Line No.";
              lwOk := lwOk AND (lrLin."Shortcut Dimension 2 Code" = lrLin2."Shortcut Dimension 2 Code" ); // TTOO
              lwOk := lwOk AND (lrLin."Shortcut Dimension 1 Code" = lrLin2."Shortcut Dimension 1 Code" ); // Garaje
              lwOk := lwOk AND (TipoServ(lrLin.Servicio) = TipoServ(lrLin2.Servicio));
              IF lwOk THEN BEGIN
                lrLin."Unit Price"            := lrLin."Unit Price" + lrLin2."Unit Price";
                lrLin."Outstanding Amount"    := lrLin."Outstanding Amount" + lrLin2."Outstanding Amount";
                lrLin."Line Amount"           := lrLin."Line Amount" + lrLin2."Line Amount";
                lrLin."Importe Impresion"     := lrLin."Importe Impresion" + lrLin2."Importe Impresion";
                lrLin."Importe Impresion con" := lrLin."Importe Impresion con" + lrLin2."Importe Impresion con";
                IF lrLin."Precio Impresion" <> lrLin2."Precio Impresion" THEN BEGIN
                  CLEAR(lrLin."Precio Impresion");
                  CLEAR(lrLin."Precio Impresion con");
                END;
                lrLin.MODIFY;
                // Se borra la linea
                lrLin3 := lrLin2;
                lrLin3.DELETE(TRUE);
              END;
            UNTIL lrLin2.NEXT=0;
          END;
        UNTIL lrLin.NEXT=0;
        // Al final valida los resultados.
        lrLin.VALIDATE("Unit Price");
        lrLin.VALIDATE("Outstanding Amount");
        lrLin.VALIDATE("Line Amount");
        lrLin.VALIDATE("Importe Impresion");
        lrLin.VALIDATE("Importe Impresion con");
        lrLin.Amount:= lrLin."Line Amount"; // este campo no es necesario, lo igualo para no confundir
        lrLin.MODIFY(TRUE);
      END;
    END;

    PROCEDURE TipoServ@1103350009(pwCodSer@1103350000 : Code[10]) : Code[10];
    VAR
      lrCodSer@1103350001 : Record 7010320;
    BEGIN
      // TipoServ
      CLEAR(lrCodSer);
      IF lrCodSer.GET(pwCodSer) THEN
        EXIT(lrCodSer."Tipo servicio");
    END;

    PROCEDURE FiltraTTOOParte@1103350006(VAR prTTOOxParte@1103350000 : Record 7010365) : Boolean;
    VAR
      lfConFact@1103350001 : Form 7035360;
      lrCond@1103350002 : Record 7010420;
      lwSetClave@1103350003 : Boolean;
      lwClv@1103350004 : ARRAY [15] OF Boolean;
      lwrTabla@1103355000 : RecordRef;
      lwTextView@1103355001 : Text[1024];
    BEGIN
      // FiltraTTOOParte
      // Propone un filtrado inicial de la tabla TTOO x Parte antes de ense¤ar la ventana de facturaci¢n

      CLEAR(lfConFact);

      // AJF 07/01/09
      // Evito borrar el registro, ya que ahora tiene datos permanentes.
      IF lrCond.GET(USERID) THEN
        lrCond.LimpiaRegistro
      ELSE BEGIN
        lrCond.INIT;
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      lrCond.FILTERGROUP(2);
      lrCond.SETRECFILTER;
      lrCond.FILTERGROUP(0);

      COMMIT;

      lfConFact.SETTABLEVIEW(lrCond);

      lfConFact.Presentar(FALSE,TRUE,TRUE,FALSE);
      // lfConFact.MAXIMIZEDONOPEN:= TRUE;
      lfConFact.LOOKUPMODE:= TRUE;
      //IF lfConFact.RUNMODAL <> ACTION::LookupOK THEN
      IF lfConFact.RUNMODAL <> ACTION::OK THEN
        EXIT(FALSE);

      lrCond.FIND;
      prTTOOxParte.RESET;

      // Establecemos la clave idonea
      CLEAR(lwClv);
      lwClv[1]  := lrCond.Cliente <> '';
      lwClv[2]  := lrCond.Touroperador <> '';
      lwClv[3]  := lrCond.Garaje <>'';
      lwClv[4]  := (lrCond."Fecha desde" <>0D) OR (lrCond."Fecha hasta" <>0D);
      lwClv[5]  := lrCond."Tipos servicio" <>'';
      lwClv[6]  := lrCond."Codigos Servicio" <>'';
      lwClv[7]  := (lrCond."Rango Desde" <> 0) OR (lrCond."Rango Hasta" <> 0);
      lwClv[8]  := lrCond."N§ Parte" <> '';

      CLEAR(lwSetClave);
      // CLAVE 1
      lwSetClave := lwClv[8];
      // Si no se ha filtrado nada
      lwSetClave := lwSetClave OR NOT(lwClv[1] OR lwClv[3] OR lwClv[4] OR lwClv[5] OR lwClv[6]);
      lwSetClave := lwSetClave OR (lwClv[2] AND NOT(lwClv[1] OR lwClv[3] OR lwClv[5] OR lwClv[6] )); // Solo TTOO
      IF lwSetClave THEN
        prTTOOxParte.SETCURRENTKEY("N§ Parte",Touroperador);

      // CLAVE 2
      IF NOT lwSetClave THEN BEGIN
        lwSetClave := (lwClv[1] AND lwClv[2]) AND NOT(lwClv[3] OR lwClv[4] OR lwClv[5] OR lwClv[6] OR lwClv[8]);
      IF lwSetClave THEN
        prTTOOxParte.SETCURRENTKEY(Confirmado,"Cliente operativo",Touroperador,"N§ Factura");
      END;

      // CLAVE
      { Esta clave no esta activada
      IF NOT lwSetClave THEN BEGIN
        lwSetClave := (lwClv[3] AND NOT(lwClv[1] OR lwClv[2] OR lwClv[5] OR lwClv[6])); // Solo garaje
        lwSetClave := lwSetClave OR ((lwClv[3] AND lwClv[2] AND (lwClv[5]) AND (lwClv[6]))); // Todos los campos implicados
        IF lwSetClave THEN
          prTTOOxParte.SETCURRENTKEY(Garaje,"Fecha Facturacion",Touroperador,"Tipo Servicio","Codigo Servicio");
      END;
      }

      // CLAVE 3
      IF NOT lwSetClave THEN BEGIN
        lwSetClave := (lwClv[1] OR lwClv[2] OR lwClv[5] OR lwClv[6]) AND NOT(lwClv[3] OR lwClv[7]);
        lwSetClave := lwSetClave OR ((lwClv[1] AND lwClv[2]) AND NOT(lwClv[3]) OR (lwClv[7]));
        IF lwSetClave THEN
          prTTOOxParte.SETCURRENTKEY(Confirmado,"Cliente operativo",Touroperador,"Tipo Servicio","Codigo Servicio","Fecha Facturacion");
      END;

      // CLAVE 4
      IF NOT lwSetClave THEN BEGIN // Si solo se filtra por fecha
        lwSetClave := lwClv[4] AND NOT(lwClv[1] OR lwClv[2] OR lwClv[3] OR lwClv[5] OR lwClv[6]);
        IF lwSetClave THEN
          // Al no filtrarse por cliente podemos dejar la clave de cliente estad¡stico.
          prTTOOxParte.SETCURRENTKEY(Confirmado,"Cliente operativo",Touroperador,"Tipo Servicio","Fecha Facturacion");
      END;

      // CLAVE 5
      // Si no esta en ninguna de las anteriores e aplica la siguiente
      IF NOT lwSetClave THEN
        prTTOOxParte.SETCURRENTKEY(Confirmado,
                                   "Cliente estadistico",
                                 Touroperador,
                          "Fecha Facturacion",
                                       Garaje,
                              "Tipo Servicio",
                            "Codigo Servicio",
                          "Pax Transportados",
                       "Fecha Servicio Parte");

      // Filtros

      prTTOOxParte.FILTERGROUP(2);
      // prTTOOxParte.SETFILTER(Gestor,'%1|%2',USERID,''); JPT 03/08/05 Lo pasamos a la ventana
      prTTOOxParte.SETRANGE(Confirmado, TRUE);
      prTTOOxParte.FILTERGROUP(0);

      IF lrCond.Cliente <> '' THEN
        prTTOOxParte.SETRANGE("Cliente operativo", lrCond.Cliente);

      IF lrCond.Touroperador <> '' THEN
        prTTOOxParte.SETRANGE(Touroperador , lrCond.Touroperador);

      IF lrCond.Garaje <> '' THEN
        prTTOOxParte.SETRANGE(Garaje , lrCond.Garaje);

      IF lrCond."Tipos servicio" <> '' THEN
        prTTOOxParte.SETFILTER("Tipo Servicio" ,lrCond."Tipos servicio");

      IF lrCond."Codigos Servicio" <> '' THEN
        prTTOOxParte.SETFILTER("Codigo Servicio", lrCond."Codigos Servicio");

      IF lrCond."Tipos Vehiculo" <> '' THEN
        prTTOOxParte.SETFILTER("Tipo Vehiculo", lrCond."Tipos Vehiculo");

      {
      IF  lrCond."Zonas Precio" <> '' THEN
        prTTOOxParte.SETRANGE("Zona trabajo", lrCond."Zonas Precio");
      }

      IF  lrCond."N§ Parte" <> '' THEN
        prTTOOxParte.SETRANGE("N§ Parte" , lrCond."N§ Parte");

      IF lrCond.Referencia  <> '' THEN
        prTTOOxParte.SETRANGE(Referencia , lrCond.Referencia);

      IF (lrCond."Fecha desde" <> 0D) OR (lrCond."Fecha hasta" <> 0D) THEN
        prTTOOxParte.SETFILTER("Fecha Facturacion", '%1..%2' ,lrCond."Fecha desde" ,lrCond."Fecha hasta" );

      IF (lrCond."Rango Desde" <> 0) OR  (lrCond."Rango Hasta" <> 0) THEN
          prTTOOxParte.SETFILTER("Pax Transportados", '%1..%2' ,lrCond."Rango Desde", lrCond."Rango Hasta");

      prTTOOxParte.SETRANGE(Confirmado, TRUE);

      // JPT 17/10/06 Buscamos la clave
      lwrTabla.GETTABLE(prTTOOxParte);
      cFunBas.DeterminaClave(lwrTabla);
      lwTextView := lwrTabla.GETVIEW;
      prTTOOxParte.SETVIEW(lwTextView);

      EXIT(TRUE);
    END;

    PROCEDURE ComprobarImporte0@1103350007(VAR prPI@1103350001 : Record 7035392) : Boolean;
    VAR
      lrPI@1103350000 : Record 7035392;
      lwTotal@1103350002 : Decimal;
    BEGIN
      // ComprobarImporte0
      // Se comprueba que el importe es distinto a 0
      // En caso de que lo sea, se pedir  si se quiere marcar las l¡neas C/I como facturadas y se abandonar  el proceso de prefacturacion
      // JPT 25/05/05 A peticion de IBZ

      rPar.FINDFIRST;
      IF NOT rPar."No permitir Facturar a 0" THEN
        EXIT(TRUE);

      CLEAR(lwTotal);
      lrPI.COPY(prPI);
      IF lrPI.FINDSET THEN BEGIN
        REPEAT
          lwTotal += lrPI."Importe con impuesto";
        UNTIL lrPI.NEXT=0;
      END;

      IF lwTotal = 0 THEN BEGIN
        IF CONFIRM(Text025) THEN BEGIN
          IF lrPI.FINDSET(TRUE, TRUE) THEN BEGIN
            prPI.LimpiaTemp;
            REPEAT
              lrPI.MarcaFactura(Text026, 0D, TRUE); // pasa de produccion a facturacion
            UNTIL lrPI.NEXT=0;
          END;
        END;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE RappelFactura@1100253000(VAR prPrefac@1100244000 : Record 7010415;VAR prCond@1100244016 : Record 7010420;pwFecha@1100244001 : Date;pwAutomatica@1100244002 : Boolean;pwTipoServFijo@1100253000 : 'Excursion,Traslado';pwTipoAplicacion@1100253003 : 'Por Factura,Mensual');
    VAR
      lrServ@1100244010 : Record 7010358;
      lrPrefac@1100244003 : Record 7010415;
      lrTempPrefac@1100253005 : TEMPORARY Record 7010415;
      lrLinPref@1100244004 : Record 7010417;
      lrCondRpl@1100244005 : Record 7010375;
      lrCodSer@1100253007 : Record 7010320;
      lrTipoSer@1100253008 : Record 7010319;
      lwTotal@1100244007 : Decimal;
      lwTotalRap@1100253002 : Decimal;
      lrPI@1100244014 : Record 7035392;
      lrCond@1100244015 : Record 7010420;
      lwTextReg@1100244006 : Text[250];
      lwOk@1100253004 : Boolean;
      lwNoLin@1100253001 : ARRAY [2] OF Integer;
      lwFechasServ@1100253006 : ARRAY [2] OF Date;
      lwFechaReg@1100253009 : ARRAY [2] OF Date;
      lrParte@1100253010 : Record 7010360;
    BEGIN
      // RappelFactura
      // La variable de prefactura tiene que venir ya filtrada

      rPar.FINDFIRST;
      rPar.TESTFIELD("Codigo Servicio Rappel");

      // Si no encuentra condiciones de Rappel sale
      lrCondRpl.RESET;
      lrCondRpl.SETCURRENTKEY(Cliente,TTOO,"Tipo Servicio Fijo","Tipo Aplicacion","Fecha Desde","Fecha Hasta");
      lrCondRpl.SETRANGE(Cliente              , prCond.Cliente);
      lrCondRpl.SETRANGE(TTOO                 , prCond.Touroperador);
      lrCondRpl.SETRANGE("Tipo Servicio Fijo" , pwTipoServFijo);
      lrCondRpl.SETRANGE("Tipo Aplicacion"    , pwTipoAplicacion);
      lrCondRpl.SETFILTER("Fecha Desde"       , '<=%1', prCond."Fecha hasta");
      lrCondRpl.SETFILTER("Fecha Hasta"       , '>=%1', prCond."Fecha desde");
      IF NOT lrCondRpl.FINDFIRST THEN
        EXIT;

      IF lrCondRpl.Porcentaje=0 THEN
        EXIT;

      lrCondRpl.TESTFIELD("Texto Registro");

      CLEAR(lwTotalRap);
      CLEAR(lrPI);
      CLEAR(lwNoLin);
      CLEAR(lwFechasServ);
      CLEAR(lwFechaReg);

      lrPrefac.COPY(prPrefac);
      lrPrefac.SETRANGE(Facturada, TRUE);
      lrPrefac.SETFILTER("Prefactura Rappel",'=%1','');
      //No dejamos que se realice un rappel sobre una factura a la que ya se ha aplicado
      IF lrPrefac.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrLinPref);
          // De momento no hay ninguna comprobacion previa de la coherencia de las prefacturas pasadas
          // El rappel se facturara al cliente/TTO0 indicado en los parametros

          lrLinPref.RESET;
          CLEAR(lwTotal);
          lwOk := FALSE;

          // Establecemos la primer y £ltima fecha de regsitro de factura
          IF (lwFechaReg[1]=0D) OR (lrPrefac."Fecha Registro factura" < lwFechaReg[1]) THEN
            lwFechaReg[1] := lrPrefac."Fecha Registro factura";
          IF lrPrefac."Fecha Registro factura" > lwFechaReg[2] THEN
            lwFechaReg[2] := lrPrefac."Fecha Registro factura";

          lrLinPref.SETRANGE("N§ Prefactura",lrPrefac."N§ Prefactura");
          IF NOT lrCondRpl."Incluir Maletas" THEN
            lrLinPref.SETFILTER(Tipo,'<>%1', lrLinPref.Tipo::Maletas);
          IF lrLinPref.FINDSET THEN BEGIN
            IF lwFechasServ[1] = 0D THEN         // Buscamos la primera y ultima fecha servicio
              lwFechasServ[1] := lrLinPref.Fecha;
            IF lwFechasServ[2] = 0D THEN
              lwFechasServ[2] := lrLinPref.Fecha;
            REPEAT
              lwTotal += lrLinPref."Importe sin impuestos";
              lwOk := lwOk OR (lrLinPref."Tipo Servicio Fijo"= pwTipoServFijo);

              IF lrLinPref.Fecha < lwFechasServ[1] THEN
                lwFechasServ[1] := lrLinPref.Fecha;
              IF lrLinPref.Fecha > lwFechasServ[2] THEN
                lwFechasServ[2] := lrLinPref.Fecha;

            UNTIL lrLinPref.NEXT=0;
          END;

          // JPT 10/10/05 Comprobamos que el tipo de servicio fijo concuerde con alguna linea de la prefactura
          // Si no borramos el total para que no se tenga en consideracion.
          IF NOT lwOk THEN
            CLEAR(lwTotal);


          // No se hacen Rappels de abonos. Lo cual tambien evita bucles infitos
          IF lwTotal > 0 THEN BEGIN

            // Este es el total del rappel para esa linea de prefactura
            lwTotal := lwTotal * lrCondRpl.Porcentaje / 100 * -1;

            lrPI.INIT;
            // Marcamos el no parte como usuario para poder filtrar luego por la clave primaria
            lrPI."N§ Parte"    := COPYSTR(USERID,1,MAXSTRLEN(lrPI."N§ Parte"));
            lrPI.INSERT(TRUE);
            IF lwNoLin[1]=0 THEN // Guardamos el primer y ultimo numero de linea para poder filtrar
              lwNoLin[1] := lrPI."N§ Linea";
            lwNoLin[2] := lrPI."N§ Linea";

            // AJS 20.10.2005
            // Adjudicamos la linea de ingreso a la primera fecha de las lineas implicadas en la prefactura
            //lrPI.Fecha                         := pwFecha;

            lrPI.Fecha                         := lrPrefac."Fecha Registro factura";

            lrPI.Garaje                        := lrPrefac.Garaje;
            lrPI."Cod. Divisa"                 := lrPrefac."Cod. Divisa";
            lrPI."N§ Contrato"                 := lrPrefac."N§ Contrato";
            lrPI."Cliente Operativo"           := prCond.Cliente;

            lrParte.Cliente := prCond.Cliente;
            lrPI."Cliente estadistico"         := lrParte.GetClienteEstadistico(prCond.Touroperador);

            lrPI.Touroperador                  := prCond.Touroperador;
            lrPI."N§ Contrato"                 := lrPrefac."N§ Contrato";
            lrPI."Codigo servicio"             := rPar."Codigo Servicio Rappel";
            lrPI."Concepto facturacion"        := STRSUBSTNO(Text027, lrPrefac."N§ Factura");
            lrPI."Grupo registro IVA Producto" := lrLinPref."Grupo registro IVA producto";
            lrPI."Precio manual"               := TRUE;

            // AJS 20.10.2005
            // Incluyo mas campos para que las lineas de coste ingreso sean mas utiles a la hora de estadisticas

            lrCodSer.GET(lrPI."Codigo servicio");
            lrTipoSer.GET(lrCodSer."Tipo servicio");

            lrPI."Tipo servicio"      := lrTipoSer.Codigo;
            lrPI."Tipo Servicio Fijo" := lrTipoSer."Tipo fijo";
            lrPI."Zona facturacion"       := lrPrefac."Zona Trabajo";
            lrPI.Facturable           := TRUE;

            lrPI.VALIDATE(Importe, lwTotal);
            lrPI.VALIDATE("Importe sin impuesto", lwTotal);
            lrPI."Cod. Divisa" := lrPrefac."Cod. Divisa";
            lrPI.divisa_ingreso(pwFecha);

            lrPI."Generada prevision" := TRUE; //$002

            lrPI.MODIFY;

            lwTotalRap += lwTotal;

            // Guardamos un temporal con todos las prefacturas afectadas
            lrTempPrefac:=lrPrefac;
            lrTempPrefac.INSERT;
          END;
        UNTIL lrPrefac.NEXT=0;
      END;

      IF lwTotalRap=0 THEN  // No hacemos rappels a 0
        EXIT;

      // AJF 07/01/09
      // Evito borrar el registro, ya que ahora tiene datos permanentes.
      IF lrCond.GET(USERID) THEN
        lrCond.LimpiaRegistro
      ELSE BEGIN
        lrCond.INIT;
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      lrCond.Cliente          := prCond.Cliente;
      lrCond.Touroperador     := prCond.Touroperador;

      lwTextReg := lrCondRpl."Texto Registro";
      IF lwTextReg='' THEN
        lwTextReg := lrPrefac."Texto Registro";

      lrCond."Texto Registro"         := lwTextReg;
      lrCond.Garaje                   := prPrefac.Garaje;
      lrCond."Fecha Factura"          := pwFecha;
      lrCond."Fecha desde"            := lwFechaReg[1];
      lrCond."Fecha hasta"            := lwFechaReg[2];
      lrCond."Codigos Servicio"       := rPar."Codigo Servicio Rappel";
      lrCond."Facturacion Automatica" := pwAutomatica;
      lrCond.Imprimir:= FALSE;

      //$004
      IF rPar."Empresa Real" = rPar."Empresa Real"::IBZ THEN BEGIN
        lrCond."Tipo factura" := lrCond."Tipo factura"::"Texto alternativo";
        lrCond."Tipo prefactura" := lrCond."Tipo prefactura"::"Texto alternativo";
      END;

      lrCond.MODIFY;

      lrPI.SETRANGE("N§ Parte", COPYSTR(USERID,1,MAXSTRLEN(lrPI."N§ Parte")));
      lrPI.SETRANGE("N§ Linea", lwNoLin[1], lwNoLin[2]);

      IF crear_prefactura(lrPI,lrCond,TRUE) THEN BEGIN
        lrCond.Imprimir := NOT pwAutomatica; // Solo lo imprimiremos cuando sea facturacion manual
        crear_factura(lrPI,lrCond,TRUE);

      // Marcamos todas las prefacturas afectadas
        IF lrTempPrefac.FINDSET THEN BEGIN
          lrPrefac.RESET;
          REPEAT
            lrPrefac := lrTempPrefac;
            lrPrefac."Prefactura Rappel" := lrCond."N§ Prefactura";
            lrPrefac.MODIFY;
          UNTIL lrTempPrefac.NEXT=0;
        END;

        // Marcamos el mismo rappel
        lrPrefac.RESET;
        IF lrPrefac.GET(lrCond."N§ Prefactura") THEN BEGIN
          lrPrefac."Prefactura Rappel" := lrCond."N§ Prefactura";
          lrPrefac.MODIFY;
        END;
      END;

      // Esto es para la facturaci¢n automatica. Para que incluya la factura en la lista de impresion
      prCond."N§ Prefactura":= lrCond."N§ Prefactura";
      // prCond.MODIFY;
    END;

    BEGIN
    {
      $001 AJS 21072010 En la funcion GetIVAFactura elimino la utilizacion del parametro de Grupo registro IVA producto maletas
                        porque estaba ocasionando un problema con el cambio de IVA

      $002 AJS 14092010 Al crear la linea de ingreso para Rappel la marco como Generada prevision

      $003 AJS 14092010 Cuando hay un GET de Parte lo protejo con un IF para evitar errores al facturar el RAPPEL

      $004 AJS 15092010 Para IBIZATOURS las facturas de Rappel se crean como Texto alternativo

      $005 AJS 14052014 Modifico funcion GetIVAFactura para corregir un problema con los abonos que tienen maletas

      $006 AJS 23052014 Modificar la funcion GetIVAFactura para separar abonos de facturas

      $007 AJS 30062014 Modifico la funcion prefactura_sin_resumen para que el ultimo parte de la factura desglose bien los ni¤os

      $008 AJS 20012014 Ejecutar el proceso estandar de Lanzar factura

      $009 AJS 26012015 Modifico la funcion GetIVAFactura para que no muestre mensaje de fecha de pedido

      $010 AJS 10062015 Corrijo un error pasando la llamada a la funcion MarcaFactura al final del proceso
    }
    END.
  }
}
