OBJECT Codeunit 99008515 XML Document-Receive
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=VAR
            XMLDOMMgmt@1000 : Codeunit 99008516;
            RequestType@1001 : Text[30];
            XMLNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
          BEGIN

            //Extract Request Type from Request
            IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/RequestType',XMLNode) THEN
              RequestType := XMLNode.attributes.item(0).nodeValue
            ELSE
              RequestType := '';

            CASE RequestType OF
              'ReceiveDocument' :
                ReceiveDocument();
              'ReceiveTest' :
                ReceiveTest();
              'ReceiveBizTalkTrackingID' :
                ReceiveBizTalkTrackingID();
              ELSE
                EXIT;
            END;
          END;

  }
  CODE
  {
    VAR
      xmlin@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      xmlout@2005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      InboundSalesDocumentHeader@1000 : Record 99008500;
      InboundPurchaseDocumentHeader@1001 : Record 99008502;
      InboundProductCatalogHdr@1002 : Record 99008504;
      BizTalkPartnerSetupHdr@1003 : Record 99008513;
      BizTalkMgmtSetup@1005 : Record 99008512;
      TransformXMLDocument@1006 : Codeunit 99008518;
      BizTalkManagement@1007 : Codeunit 99008508;
      NextInboundDocNo@1008 : Integer;
      BizTalkSalesDocType@1009 : 'Request for Quote,Order';
      BizTalkPurchaseDocType@1010 : 'Quote,Order Confirmation,Invoice,Receipt,Credit Memo';
      BizTalkProdCtlgDocType@1011 : 'Product Catalog,Price List';
      InbDocumentType@1012 : 'Sales,Purchase,Product Catalog';
      Text000@1013 : TextConst 'ENU=A company must be supplied.;ESP=Debe proporcionarse una empresa.';
      Text001@1014 : TextConst 'ENU=A SendID must be supplied.;ESP=Debe proporcionarse una Id. de env¡o.';
      Text002@1015 : TextConst 'ENU=Company %1 is incorrect. It must be %2.;ESP=La empresa %1 no es correcta. Debe ser %2.';
      Text003@1016 : TextConst 'ENU=Send ID %1 does not exist for company %2.;ESP=No existe Send ID %1 para la empresa %2.';
      Text004@1017 : TextConst 'ENU=A partner ID must be supplied.;ESP=Debe proporcionarse un Id. de socio.';
      Text005@1018 : TextConst 'ENU=A document name must be supplied.;ESP=Debe proporcionarse un nombre de documento.';
      Text007@1020 : TextConst 'ENU=A tracking ID must be supplied.;ESP=Debe proporcionarse un Id. de seguimiento.‡';
      Text008@1021 : TextConst 'ENU=No document has been specified.;ESP=No se ha especificado ning£n documento.';
      Text010@1023 : TextConst 'ENU=The document type cannot be extracted from %1.;ESP=No puede obtenerse el tipo de documento desde %1.';
      Text011@1024 : TextConst 'ENU=The document is not valid according to the schema.;ESP=El documento no es v lido seg£n el esquema.';
      Text012@1025 : TextConst 'ENU=The document has not been transferred.;ESP=No se ha transferido el documento.';
      Text022@1035 : TextConst 'ENU=" Contact the Microsoft Certified Business Solutions Partner that you purchased Commerce Gateway from.";ESP=" Contacte con el Microsoft Certified Business Solutions Partner al que compr¢ Commerce Gateway."';
      Text023@1036 : TextConst 'ENU=The type of the document to be received is not a valid Commerce Gateway Document Type;ESP=El tipo de documento que se va a recibir no es un tipo de documento Commerce Gateway v lido.';
      Text024@1037 : TextConst 'ENU=A GUID must be supplied.;ESP=Debe proporcionarse un GUID.';
      Text025@1038 : TextConst 'ENU=Could not load the xml document for transformation.;ESP=No se pudo cargar el documento xml para la transformaci¢n.';

    PROCEDURE PutXMLIn@1(xmldom@3006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    BEGIN
      xmlin := xmldom;
    END;

    PROCEDURE GetInboundDocumentNo@22(VAR InboundDocumentNo@1000 : Integer);
    BEGIN
      InboundDocumentNo := NextInboundDocNo;
    END;

    PROCEDURE GetInboundDocumentType@23(VAR DocumentType@1000 : 'Sales,Purchase,Product Catalog');
    BEGIN
      DocumentType := InbDocumentType;
    END;

    LOCAL PROCEDURE ReceiveTest@2();
    VAR
      CheckReceive@1000 : Record 99008522;
      Company@1001 : Record 2000000006;
      XMLDOMMgmt@1002 : Codeunit 99008516;
      CompName@1003 : Text[30];
      SendID@1004 : Integer;
      XMLNode@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Extract data from request
      CompName := '';
      SendID := 0;
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/RequestType/Company',XMLNode) THEN
        CompName := XMLNode.text;
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/RequestType/SendID',XMLNode) THEN
        IF NOT EVALUATE(SendID,XMLNode.text) THEN
          SendID := 0;

      IF CompName = '' THEN
        ERROR(Text000 + Text022);
      IF SendID = 0 THEN
        ERROR(Text001 + Text022);

      //Check that the company matches this company.
      IF UPPERCASE(CompName) <> UPPERCASE(COMPANYNAME) THEN
        ERROR(Text002,CompName,COMPANYNAME);

      IF CheckReceive.GET(SendID) THEN BEGIN
        CheckReceive."Document Received" := TRUE;
        CheckReceive.MODIFY;
      END
      ELSE
        ERROR(Text003,SendID,CompName);
    END;

    LOCAL PROCEDURE ReceiveDocument@14();
    VAR
      Company@1000 : Record 2000000006;
      XMLDOMMgmt@1001 : Codeunit 99008516;
      BizTalkManagement@1003 : Codeunit 99008508;
      DocumentName@1004 : Text[30];
      SchemaName@1005 : Text[30];
      CompName@1006 : Text[30];
      TrackingID@1007 : Text[50];
      DocumentTypeCode@1008 : Text[30];
      PartnerNo@1010 : Code[20];
      PartnerID@1011 : Integer;
      ReturnCode@1013 : Boolean;
      XMLNode@1014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLDocument@1015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocNode@1016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLSchema@1017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
    BEGIN
      // Extract data from request
      CompName := '';
      PartnerID := 0;
      DocumentName := '';
      TrackingID := '';
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/RequestType/Company',XMLNode) THEN
        CompName := XMLNode.text;
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/RequestType/PartnerID',XMLNode) THEN
        IF NOT EVALUATE(PartnerID,XMLNode.text) THEN
          PartnerID := 0;
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/RequestType/DocumentName',XMLNode) THEN
        DocumentName := XMLNode.text;
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/RequestType/SchemaName',XMLNode) THEN
        SchemaName := XMLNode.text;
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/RequestType/TrackingID',XMLNode) THEN
        TrackingID := XMLNode.text;
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/RequestType/Document',XMLNode) THEN BEGIN
        CREATE(XMLDocument,TRUE,FALSE);
        XMLDocNode := XMLNode.firstChild;
        XMLDocument.appendChild(XMLDocNode);
      END;

      IF CompName = '' THEN
        ERROR(Text000 + Text022);
      IF PartnerID = 0 THEN
        ERROR(Text004 + Text022);
      IF DocumentName = '' THEN
        ERROR(Text005 + Text022);
      IF TrackingID = '' THEN
        ERROR(Text007 + Text022);
      IF ISCLEAR(XMLDocument) THEN
        ERROR(Text008 + Text022);;

      //Check that the company matches this company.
      IF UPPERCASE(CompName) <> UPPERCASE(COMPANYNAME) THEN
        ERROR(Text002,CompName,COMPANYNAME);

      // Check that the document is valid according to the schema
      BizTalkMgmtSetup.GET;
      // Extract the agreement type code from the document name.
      DocumentTypeCode := BizTalkManagement.GetDocumentTypeCode(DocumentName);
      IF NOT ISCLEAR(XMLSchema) THEN BEGIN
        IF NOT TransformXMLDocument.ValidateXMLDocument(XMLDocument,XMLSchema) THEN
          ERROR(Text011);
      END ELSE BEGIN
        IF NOT TransformXMLDocument.LoadXML(XMLDocument) THEN
          ERROR(Text025);
      END;

      //Check the DocumentTypeCode
      IF DocumentTypeCode = '' THEN
        ERROR(Text010,DocumentName);

      // Check the tracking ID. If it already exists, it will not be imported again.
      // Find the partner number.
      ReturnCode := FALSE;


      CASE DocumentTypeCode OF
        'RSQ':
          BEGIN
            ReturnCode := TransformXMLDocument.TransferReqSalesQuote(TrackingID,PartnerID);
            InbDocumentType := InbDocumentType::Sales;
          END;
        'PQ':
          BEGIN
            ReturnCode := TransformXMLDocument.TransferPurchQuote(TrackingID,PartnerID);
            InbDocumentType := InbDocumentType::Purchase;
          END;
        'SO':
          BEGIN
            ReturnCode := TransformXMLDocument.TransferSalesOrder(TrackingID,PartnerID);
            InbDocumentType := InbDocumentType::Sales;
          END;
        'POC':
          BEGIN
            ReturnCode := TransformXMLDocument.TransferPurchOrderConfirm(TrackingID,PartnerID);
            InbDocumentType := InbDocumentType::Purchase;
          END;
        'PI':
          BEGIN
            ReturnCode := TransformXMLDocument.TransferPurchInv(TrackingID,PartnerID);
            InbDocumentType := InbDocumentType::Purchase;
          END;
        'PR':
          BEGIN
            ReturnCode := TransformXMLDocument.TransferPurchReceipt(TrackingID,PartnerID);
            InbDocumentType := InbDocumentType::Purchase;
          END;
        'PCM':
          BEGIN
            ReturnCode := TransformXMLDocument.TransferPurchCreditMemo(TrackingID,PartnerID);
            InbDocumentType := InbDocumentType::Purchase;
          END;
        'IPC':
          BEGIN
            ReturnCode := TransformXMLDocument.TransferProdCatalog(TrackingID,PartnerID);
            InbDocumentType := InbDocumentType::"Product Catalog";
          END;
        ELSE
          ERROR(Text023);
      END;

      NextInboundDocNo := TransformXMLDocument.GetInDocNo;

      IF NOT ReturnCode THEN
        ERROR(Text012);
    END;

    LOCAL PROCEDURE ReceiveBizTalkTrackingID@24();
    VAR
      Company@1000 : Record 2000000006;
      OutboundDocument@1005 : Record 99008511;
      XMLDOMMgmt@1001 : Codeunit 99008516;
      BizTalkManagement@1003 : Codeunit 99008508;
      CompName@1006 : Text[30];
      TrackingID@1002 : Text[50];
      NavisionGUID@1004 : Text[50];
      XMLNode@1014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // ReceiveBiztalkTrackingID
      CompName := '';
      TrackingID := '';
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/Result/Company',XMLNode) THEN
        CompName := XMLNode.text;
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/Result/TrackingID',XMLNode) THEN
        TrackingID := XMLNode.text;
      IF XMLDOMMgmt.FindNode(xmlin,'/NFRequest/Result/NavisionGUID',XMLNode) THEN
        NavisionGUID := XMLNode.text;

      IF CompName = '' THEN
        ERROR(Text000 + Text022);
      IF TrackingID = '' THEN
        ERROR(Text007 + Text022);
      IF TrackingID = '' THEN
        ERROR(Text024 + Text022);

      // Change the status of the Document received by the BTS
      OutboundDocument.CHANGECOMPANY(CompName);
      OutboundDocument.SETRANGE("NAV GUID",NavisionGUID);
      OutboundDocument.SETRANGE(Status,OutboundDocument.Status::"Received by CGRS");
      IF OutboundDocument.FIND('-') THEN BEGIN
        OutboundDocument."Tracking ID" := TrackingID;
        OutboundDocument.Status := OutboundDocument.Status::"Received by BTS";
        OutboundDocument.MODIFY
      END;
    END;

    EVENT xmlin@1004::ondataavailable@198();
    BEGIN
    END;

    EVENT xmlin@1004::onreadystatechange@-609();
    BEGIN
    END;

    EVENT xmlout@2005::ondataavailable@198();
    BEGIN
    END;

    EVENT xmlout@2005::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}
