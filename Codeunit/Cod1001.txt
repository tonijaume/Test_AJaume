OBJECT Codeunit 1001 Job Post-Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 1003=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempJobJnlLine@1006 : TEMPORARY Record 210;
      JobJnlPostLine@1003 : Codeunit 1012;
      JobTransferLine@1001 : Codeunit 1004;
      Text000@1011 : TextConst 'ENU="has been changed (initial a %1: %2= %3, %4= %5)";ESP="se ha cambiado (inicial a %1: %2= %3, %4= %5)"';
      Text001@1012 : TextConst 'ENU="You should consume %1 %2 in %3 %4 before you post %8 %5 %6 = %7.";ESP="Debe consumir %1 %2 en %3 %4 antes de registrar %8 %5 %6 = %7."';
      Text003@1000 : TextConst 'ENU=You cannot change the sales line because it is linked to\;ESP=No puede cambiar la l¡n. venta porque est  vinculada a\';
      Text004@1014 : TextConst 'ENU=" %1: %2= %3, %4= %5.";ESP=" %1: %2= %3, %4= %5."';
      Text005@1015 : TextConst 'ENU="You must post more usage or credit the sale of %1 %2 in %3 %4 before you can post purchase credit memo %5 %6 = %7.";ESP="Debe registrar m s uso o ingresar la venta de %1 %2 en %3 %4 antes de registrar el abono compra %5 %6 = %7."';

    PROCEDURE InsertPlanningLine@8(JobJnlLine@1003 : Record 210);
    VAR
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      IF JobJnlLine."Line Type" = JobJnlLine."Line Type"::" " THEN
        EXIT;
      CLEAR(JobPlanningLine);
      JobPlanningLine."Job No." := JobJnlLine."Job No.";
      JobPlanningLine."Job Task No." := JobJnlLine."Job Task No.";
      JobPlanningLine.SETRANGE("Job No.",JobPlanningLine."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
      IF JobPlanningLine.FIND('+') THEN;
      JobPlanningLine."Line No." := JobPlanningLine."Line No." + 10000;
      JobPlanningLine.INIT;
      JobPlanningLine.RESET;
      CLEAR(JobTransferLine);
      JobTransferLine.FromJnlToPlanningLine(JobJnlLine,JobPlanningLine);
      PostPlanningLine(JobPlanningLine);
    END;

    PROCEDURE InsertPlLineFromLedgEntry@2(JobLedgEntry@1003 : Record 169);
    VAR
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      IF JobLedgEntry."Line Type" = JobLedgEntry."Line Type"::" " THEN
        EXIT;
      CLEARALL;
      JobPlanningLine."Job No." := JobLedgEntry."Job No.";
      JobPlanningLine."Job Task No." := JobLedgEntry."Job Task No.";
      JobPlanningLine.SETRANGE("Job No.",JobPlanningLine."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
      IF JobPlanningLine.FIND('+') THEN;
      JobPlanningLine."Line No." := JobPlanningLine."Line No." + 10000;
      JobPlanningLine.INIT;
      JobPlanningLine.RESET;
      CLEAR(JobTransferLine);
      JobTransferLine.FromJobLedgEntryToPlanningLine(JobLedgEntry,JobPlanningLine);
      PostPlanningLine(JobPlanningLine);
    END;

    LOCAL PROCEDURE PostPlanningLine@9(JobPlanningLine@1000 : Record 1003);
    VAR
      Job@1001 : Record 167;
    BEGIN
      IF JobPlanningLine."Line Type" = JobPlanningLine."Line Type"::"Both Schedule and Contract" THEN BEGIN
        Job.GET(JobPlanningLine."Job No.");
        IF NOT Job."Allow Schedule/Contract Lines" OR
           (JobPlanningLine.Type = JobPlanningLine.Type::"G/L Account")
        THEN BEGIN
          JobPlanningLine.VALIDATE("Line Type",JobPlanningLine."Line Type"::Schedule);
          JobPlanningLine.INSERT(TRUE);
          JobPlanningLine."Job Contract Entry No." := 0;
          JobPlanningLine.VALIDATE("Line Type",JobPlanningLine."Line Type"::Contract);
          JobPlanningLine."Line No." := JobPlanningLine."Line No." + 10000;
        END;
      END;
      IF (JobPlanningLine.Type = JobPlanningLine.Type::"G/L Account") AND
         (JobPlanningLine."Line Type" = JobPlanningLine."Line Type"::Contract)
      THEN
        ChangeGLNo(JobPlanningLine);
      JobPlanningLine.INSERT(TRUE);
    END;

    PROCEDURE PostInvoiceContractLine@14(SalesHeader@1006 : Record 36;SalesLine@1000 : Record 37;VAR TempJnlLineDim@1005 : Record 356) : Boolean;
    VAR
      Job@1003 : Record 167;
      JT@1008 : Record 1001;
      JobLedgEntry@1007 : Record 169;
      JobPlanningLine@1001 : Record 1003;
      Factor@1004 : Integer;
      Txt@1009 : Text[500];
    BEGIN
      Factor := 1;
      IF SalesLine."Document Type" = SalesLine."Document Type"::"Credit Memo" THEN
        Factor := -1;
      JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
      JobPlanningLine.SETRANGE("Job Contract Entry No.",SalesLine."Job Contract Entry No.");
      JobPlanningLine.FIND('-');
      Job.GET(JobPlanningLine."Job No.");
      JT.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
      Txt := STRSUBSTNO(Text000,
          JT.TABLECAPTION,JT.FIELDCAPTION("Job No."),JT."Job No.",
          JT.FIELDCAPTION("Job Task No."),JT."Job Task No.");

      IF NOT JobPlanningLine."Invoice Currency" THEN BEGIN
        Job.TESTFIELD("Currency Code",SalesHeader."Currency Code");
        Job.TESTFIELD("Currency Code",JobPlanningLine."Currency Code");
        SalesHeader.TESTFIELD("Currency Code",JobPlanningLine."Currency Code");
        SalesHeader.TESTFIELD("Currency Factor",JobPlanningLine."Currency Factor");
      END ELSE BEGIN
        Job.TESTFIELD("Currency Code",'');
        JobPlanningLine.TESTFIELD("Currency Code",'');
      END;
      SalesHeader.TESTFIELD("Bill-to Customer No.",Job."Bill-to Customer No.");
      JobPlanningLine.TESTFIELD(Invoiced,FALSE);
      JobPlanningLine.TESTFIELD(Transferred);

      IF JobPlanningLine.Type = JobPlanningLine.Type::Text THEN
        IF SalesLine.Type <> SalesLine.Type::" " THEN
          SalesLine.FIELDERROR(Type,Txt);
      IF JobPlanningLine.Type = JobPlanningLine.Type::Resource THEN
        IF SalesLine.Type <> SalesLine.Type::Resource THEN
          SalesLine.FIELDERROR(Type,Txt);
      IF JobPlanningLine.Type = JobPlanningLine.Type::Item THEN
        IF SalesLine.Type <> SalesLine.Type::Item THEN
          SalesLine.FIELDERROR(Type,Txt);
      IF JobPlanningLine.Type = JobPlanningLine.Type::"G/L Account" THEN
        IF SalesLine.Type <> SalesLine.Type::"G/L Account" THEN
          SalesLine.FIELDERROR(Type,Txt);

      IF SalesLine."No." <> JobPlanningLine."No." THEN
        SalesLine.FIELDERROR("No.",Txt);
      IF SalesLine."Location Code" <> JobPlanningLine."Location Code" THEN
        SalesLine.FIELDERROR("Location Code",Txt);
      IF SalesLine."Unit of Measure Code" <> JobPlanningLine."Unit of Measure Code" THEN
        SalesLine.FIELDERROR("Unit of Measure Code",Txt);
      IF SalesLine."Variant Code" <> JobPlanningLine."Variant Code" THEN
        SalesLine.FIELDERROR("Variant Code",Txt);
      IF  SalesLine.Quantity <> Factor * JobPlanningLine.Quantity THEN
        SalesLine.FIELDERROR(Quantity,Txt);
      IF SalesLine."Gen. Prod. Posting Group" <> JobPlanningLine."Gen. Prod. Posting Group" THEN
        SalesLine.FIELDERROR("Gen. Prod. Posting Group",Txt);
      IF SalesLine."Line Discount %" <> JobPlanningLine."Line Discount %" THEN
        SalesLine.FIELDERROR("Line Discount %",Txt);
      IF  SalesLine."Quantity (Base)" <> Factor * JobPlanningLine."Quantity (Base)" THEN
        SalesLine.FIELDERROR("Quantity (Base)",Txt);
      IF SalesLine.Type = SalesLine.Type::" " THEN
        IF SalesLine."Line Amount" <> 0 THEN
          SalesLine.FIELDERROR("Line Amount",Txt);
      IF JobPlanningLine."Unit Cost (LCY)" <> SalesLine."Unit Cost (LCY)" THEN
        SalesLine.FIELDERROR("Unit Cost (LCY)",Txt);

      IF SalesHeader."Prices Including VAT" THEN BEGIN
        IF JobPlanningLine."VAT Unit Price" <> SalesLine."Unit Price" THEN
          SalesLine.FIELDERROR("Unit Price",Txt);
        IF JobPlanningLine."VAT Line Discount Amount" <> SalesLine."Line Discount Amount" THEN
          SalesLine.FIELDERROR("Line Amount",Txt);
        IF JobPlanningLine."VAT Line Amount" <> SalesLine."Line Amount" THEN
          SalesLine.FIELDERROR("Line Amount",Txt);
        IF JobPlanningLine."VAT %" <> SalesLine."VAT %" THEN
          SalesLine.FIELDERROR("VAT %",Txt);
      END ELSE BEGIN
        IF JobPlanningLine."Invoice Currency" THEN BEGIN
          IF JobPlanningLine."Inv. Curr. Line Amount" <> SalesLine."Line Amount" THEN
            SalesLine.FIELDERROR("Line Amount",Txt);
          IF JobPlanningLine."Inv. Curr. Unit Price" <> SalesLine."Unit Price" THEN
            SalesLine.FIELDERROR("Unit Price",Txt);
        END ELSE BEGIN
          IF JobPlanningLine."Line Amount" <> Factor * SalesLine."Line Amount" THEN
            SalesLine.FIELDERROR("Line Amount",Txt);
          IF JobPlanningLine."Unit Price" <> SalesLine."Unit Price" THEN
            SalesLine.FIELDERROR("Unit Price",Txt);
        END;
      END;
      JobPlanningLine."Invoiced Amount (LCY)" := JobPlanningLine."Line Amount (LCY)";
      JobPlanningLine."Invoiced Cost Amount (LCY)" := JobPlanningLine."Total Cost (LCY)";
      JobPlanningLine.Invoiced := TRUE;
      JobPlanningLine."Invoiced Date" := SalesHeader."Posting Date";
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN BEGIN
        JobPlanningLine."Invoice Type" := JobPlanningLine."Invoice Type"::"Posted Invoice";
        JobPlanningLine."Invoice No." := SalesLine."Document No.";
      END;
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN BEGIN
        JobPlanningLine."Invoice Type" := JobPlanningLine."Invoice Type"::"Posted Credit Memo";
        JobPlanningLine."Invoice No." := SalesLine."Document No.";
      END;
      IF JobLedgEntry.FIND('+') THEN;
      JobPlanningLine."Job Ledger Entry No." := JobLedgEntry."Entry No." + 1;
      JobPlanningLine.MODIFY;

      IF JobPlanningLine.Type = JobPlanningLine.Type::Item THEN
        CheckItemQuantity(JobPlanningLine,SalesHeader,SalesLine);

      IF JobPlanningLine.Type <> JobPlanningLine.Type::Text THEN
        InsertJobLedgEntry(JobPlanningLine,SalesHeader,SalesLine,TempJnlLineDim);
    END;

    LOCAL PROCEDURE InsertJobLedgEntry@3(JobPlanningLine@1000 : Record 1003;SalesHeader@1003 : Record 36;SalesLine@1002 : Record 37;VAR TempJnlLineDim@1004 : Record 356);
    VAR
      JobJnlLine@1001 : Record 210;
    BEGIN
      JobTransferLine.FromPlanningSalesLinetoJnlLine(JobPlanningLine,SalesHeader,SalesLine,JobJnlLine);
      JobJnlPostLine.RunWithCheck(JobJnlLine,TempJnlLineDim);
    END;

    LOCAL PROCEDURE CheckItemQuantity@5(JobPlanningLine@1002 : Record 1003;VAR Salesheader@1006 : Record 36;VAR Salesline@1001 : Record 37);
    VAR
      Item@1003 : Record 27;
      Job@1007 : Record 167;
    BEGIN
      Job.GET(JobPlanningLine."Job No.");
      IF JobPlanningLine."Quantity (Base)" > 0 THEN BEGIN
        IF (Job.GetQuantityAvailable(JobPlanningLine."No.",JobPlanningLine."Location Code",JobPlanningLine."Variant Code",0,0) +
            Job.GetQuantityAvailable(JobPlanningLine."No.",JobPlanningLine."Location Code",JobPlanningLine."Variant Code",1,1)) <
            JobPlanningLine."Quantity (Base)" THEN
          ERROR(
            Text001,Item.TABLECAPTION,JobPlanningLine."No.",Job.TABLECAPTION,
            JobPlanningLine."Job No.",Salesheader."No.",
            Salesline.FIELDCAPTION("Line No."),Salesline."Line No.",Salesheader."Document Type");
      END ELSE BEGIN
        IF (Job.GetQuantityAvailable(JobPlanningLine."No.",JobPlanningLine."Location Code",JobPlanningLine."Variant Code",0,1) +
            Job.GetQuantityAvailable(JobPlanningLine."No.",JobPlanningLine."Location Code",JobPlanningLine."Variant Code",1,0)) >
            JobPlanningLine."Quantity (Base)" THEN
          ERROR(
            Text001,Item.TABLECAPTION,JobPlanningLine."No.",Job.TABLECAPTION,
            JobPlanningLine."Job No.",Salesheader."No.",
            Salesline.FIELDCAPTION("Line No."),Salesline."Line No.",Salesheader."Document Type");
      END;
    END;

    PROCEDURE PostGenJnlLine@1(GenJnlLine@1000 : Record 81;GLEntry@1002 : Record 17;VAR TempJnlLineDim@1006 : Record 356);
    VAR
      JobJnlLine@1001 : Record 210;
      Job@1004 : Record 167;
      JT@1003 : Record 1001;
      SourceCodeSetup@1007 : Record 242;
      JobTransferLine@1005 : Codeunit 1004;
    BEGIN
      IF GenJnlLine."System-Created Entry" THEN
        EXIT;
      IF GenJnlLine."Job No." = '' THEN
        EXIT;
      SourceCodeSetup.GET;
      IF GenJnlLine."Source Code" = SourceCodeSetup."Job G/L WIP" THEN
        EXIT;
      GenJnlLine.TESTFIELD("Job Task No.");
      GenJnlLine.TESTFIELD("Job Quantity");
      Job.LOCKTABLE;
      JT.LOCKTABLE;
      Job.GET(GenJnlLine."Job No.");
      GenJnlLine.TESTFIELD("Job Currency Code",Job."Currency Code");
      JT.GET(GenJnlLine."Job No.",GenJnlLine."Job Task No.");
      JT.TESTFIELD("Job Task Type",JT."Job Task Type"::Posting);
      JobTransferLine.FromGenJnlLineToJnlLine(GenJnlLine,JobJnlLine);

      JobJnlPostLine.SetGLEntryNo(GLEntry."Entry No.");
      JobJnlPostLine.RunWithCheck(JobJnlLine,TempJnlLineDim);
      JobJnlPostLine.SetGLEntryNo(0);
    END;

    PROCEDURE InitPostPurchLine@10();
    BEGIN
      TempJobJnlLine.DELETEALL;
    END;

    PROCEDURE InsertPurchLine@6(VAR PurchHeader@1006 : Record 38;VAR PurchInvHeader@1004 : Record 122;VAR PurchCrMemoHeader@1005 : Record 124;PurchLine@1000 : Record 39;Sourcecode@1007 : Code[10];VAR TempJnlLineDim@1010 : Record 356);
    VAR
      JobJnlLine@1003 : Record 210;
      Job@1001 : Record 167;
      JT@1002 : Record 1001;
    BEGIN
      IF (PurchLine.Type <> PurchLine.Type::Item) AND (PurchLine.Type <> PurchLine.Type::"G/L Account") THEN
        EXIT;
      CLEAR(JobJnlLine);
      PurchLine.TESTFIELD("Job No.");
      PurchLine.TESTFIELD("Job Task No.");
      Job.LOCKTABLE;
      JT.LOCKTABLE;
      Job.GET(PurchLine."Job No.");
      PurchLine.TESTFIELD("Job Currency Code",Job."Currency Code");
      JT.GET(PurchLine."Job No.",PurchLine."Job Task No.");
      JobTransferLine.FromPurchaseLineToJnlLine(
        PurchHeader,PurchInvHeader,PurchCrMemoHeader,PurchLine,Sourcecode,JobJnlLine);
      JobJnlLine."Job Posting Only" := TRUE;
      JobJnlPostLine.RunWithCheck(JobJnlLine,TempJnlLineDim);
    END;

    PROCEDURE TestSalesLine@11(VAR SalesLine@1000 : Record 37);
    VAR
      JT@1003 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      Txt@1002 : Text[250];
    BEGIN
      IF SalesLine."Job Contract Entry No." = 0 THEN
        EXIT;
      JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
      JobPlanningLine.SETRANGE("Job Contract Entry No.",SalesLine."Job Contract Entry No.");
      IF JobPlanningLine.FIND('-') THEN BEGIN
        JT.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
        Txt := Text003 + STRSUBSTNO(Text004,
            JT.TABLECAPTION,JT.FIELDCAPTION("Job No."),JT."Job No.",
            JT.FIELDCAPTION("Job Task No."),JT."Job Task No.");
        ERROR(Txt);
      END;
    END;

    PROCEDURE ChangeGLNo@13(VAR JobPlanningLine@1000 : Record 1003);
    VAR
      GLAcc@1003 : Record 15;
      Job@1001 : Record 167;
      JT@1002 : Record 1001;
      JobPostingGr@1004 : Record 208;
      Cust@1005 : Record 18;
    BEGIN
      JT.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
      Job.GET(JobPlanningLine."Job No.");
      Cust.GET(Job."Bill-to Customer No.");
      IF JT."Job Posting Group" <> '' THEN
        JobPostingGr.GET(JT."Job Posting Group")
      ELSE BEGIN
        Job.TESTFIELD("Job Posting Group");
        JobPostingGr.GET(Job."Job Posting Group");
      END;
      IF JobPostingGr."G/L Expense Acc. (Contract)" = '' THEN
        EXIT;
      GLAcc.GET(JobPostingGr."G/L Expense Acc. (Contract)");
      GLAcc.CheckGLAcc;
      JobPlanningLine."No." := GLAcc."No.";
      JobPlanningLine."Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
      JobPlanningLine."Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
    END;

    PROCEDURE CheckItemQuantityPurchCredit@15(VAR Purchheader@1006 : Record 38;VAR Purchline@1001 : Record 39);
    VAR
      Item@1003 : Record 27;
      Job@1007 : Record 167;
    BEGIN
      Job.GET(Purchline."Job No.");
      IF Job.GetQuantityAvailable(
           Purchline."No.",Purchline."Location Code",Purchline."Variant Code",0,2) < Purchline."Quantity (Base)"
      THEN
        ERROR(
          Text005,Item.TABLECAPTION,Purchline."No.",Job.TABLECAPTION,
          Purchline."Job No.",Purchheader."No.",
          Purchline.FIELDCAPTION("Line No."),Purchline."Line No.");
    END;

    BEGIN
    END.
  }
}
