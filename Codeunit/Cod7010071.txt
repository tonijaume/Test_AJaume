OBJECT Codeunit 7010071 Cotizacion suplementos coste
{
  OBJECT-PROPERTIES
  {
    Date=02/10/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      cVarias@1103355002 : Codeunit 7009720;
      cCotCom@1103355001 : Codeunit 7009913;
      cCalRes@1103355000 : Codeunit 7009707;
      Text001@1103355003 : TextConst 'ENU=Supplement;ESP=Suplemento';

    PROCEDURE CalcularSuplementos@1103355010(VAR prCabCot@1103355005 : Record 7009871;VAR prCabCal@1103355000 : Record 7009735;VAR prHoteles@1103355001 : TEMPORARY Record 7009873;VAR prContratos@1103355003 : TEMPORARY Record 7009873;VAR prHabitaciones@1103355002 : TEMPORARY Record 7009873;VAR prPersonas@1103355004 : TEMPORARY Record 7009873);
    VAR
      lrPreCTMP@1103355007 : TEMPORARY Record 7009738;
      lrPersHab@1103355009 : TEMPORARY Record 2000000007;
      lrPersHabAnt@1103355010 : TEMPORARY Record 2000000007;
      lrPersRes@1103355011 : TEMPORARY Record 2000000007;
      lwAdultos@1103355006 : Integer;
      lwFechaVenta@1103355008 : Date;
      lrPersAux@1103355012 : TEMPORARY Record 7009873;
    BEGIN
      // CalcularSuplementos


      lwFechaVenta := DT2DATE(prCabCot."Fecha creacion");
      cCotCom.CopiarListaPersonas(prPersonas,lrPersAux);

      prHabitaciones.RESET;

      IF prHabitaciones.FINDSET THEN BEGIN
        REPEAT

          IF prHabitaciones."Aplicacion coste manual" IN [0,3] THEN BEGIN

            lwAdultos    := ContarAdultos(prHabitaciones, prPersonas);
            BuscarPreciosSuplementos(prHabitaciones, lrPreCTMP, lwFechaVenta, prHabitaciones."Fecha fin");

            prPersonas.RESET;
            prPersonas.SETRANGE(Habitacion, prHabitaciones.Habitacion);
            prPersonas.SETRANGE(Contrato  , prHabitaciones.Contrato);
            IF prPersonas.FINDSET THEN BEGIN
              REPEAT

                cVarias.IniciarPeriodo(lrPersHab,prHabitaciones."Fecha inicio", prHabitaciones."Fecha fin");
                cVarias.PeriodoVacio(lrPersHabAnt);

                WHILE NOT(cVarias.EstaVacio(lrPersHab) OR cVarias.CompararPeriodos(lrPersHab,lrPersHabAnt)) DO BEGIN
                  cVarias.CopiaPeriodos (lrPersHab,lrPersHabAnt);
                  cVarias.PeriodoVacio(lrPersRes);
                  IF ExisteSuplemento(prPersonas, lrPreCTMP, lrPersHab, lrPersRes, lrPersAux, lwAdultos, lwFechaVenta) THEN BEGIN

                    AplicarSuplemento(prCabCal, prPersonas, lrPreCTMP, lrPersHab, lrPersRes);

                    // Quito los periodos calculados de los periodos de la reserva.
                    lrPersRes.RESET;
                    IF lrPersRes.FINDSET THEN BEGIN
                      REPEAT
                        cVarias.DiferPerDirecto(lrPersHab, lrPersRes);
                      UNTIL lrPersRes.NEXT = 0;
                    END;

                  END;
                END;
              UNTIL prPersonas.NEXT = 0;
            END;

          END;

        UNTIL prHabitaciones.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuscarPreciosSuplementos@1103355011(VAR prHabitacion@1103355004 : Record 7009873;VAR prPreC@1103355000 : TEMPORARY Record 7009738;lwFechaIni@1103355002 : Date;lwFechaFin@1103355003 : Date);
    VAR
      lrPreC@1103355001 : Record 7009738;
    BEGIN
      // BuscarPreciosSuplementos

      prPreC.RESET;
      prPreC.DELETEALL;

      lrPreC.RESET;
      lrPreC.SETCURRENTKEY(Delegacion   , "N§ Contrato", "Codigo Precio", Codigo,
                           "Fecha desde", "Fecha hasta", "Edad desde"   , "Edad hasta");

      lrPreC.SETRANGE ("N§ Contrato"    , prHabitacion.Contrato);
      lrPreC.SETRANGE ("Codigo Precio"  , lrPreC."Codigo Precio"::Suplementos);
      lrPreC.SETFILTER("Fecha desde"    , '<=%1', lwFechaFin);
      lrPreC.SETFILTER("Fecha hasta"    , '>=%1', lwFechaIni);
      lrPreC.SETRANGE (Activo           , TRUE);
      IF lrPreC.FINDSET THEN BEGIN
        REPEAT
          prPreC := lrPreC;
          prPreC.INSERT;
        UNTIL lrPreC.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ExisteSuplemento@1103355019(VAR prPersona@1103355000 : TEMPORARY Record 7009873;VAR prPreC@1103355001 : TEMPORARY Record 7009738;VAR prPeriodos@1103355002 : TEMPORARY Record 2000000007;VAR prPerRes@1103355007 : TEMPORARY Record 2000000007;VAR prPersAux@1103355003 : TEMPORARY Record 7009873;pwAdultos@1103355004 : Integer;pwFechaVenta@1103355005 : Date) : Boolean;
    VAR
      lwCodPersona@1103355006 : Code[10];
    BEGIN
      // ExisteSuplemento

      // Buscamos suplementos restringidos por Tipo de habitacion

      lwCodPersona := cCotCom.GetTipoPersona(prPersona."N§ Persona");

      prPreC.RESET;
      prPreC.SETRANGE (Codigo           , lwCodPersona);
      prPreC.SETFILTER("Tipo Habitacion", '<>%1', '');

      IF prPreC.FINDSET THEN BEGIN
        REPEAT
          IF ComprobarCriteriosAplicacion(prPersona, prPersAux, pwAdultos, prPreC, prPeriodos, prPerRes, pwFechaVenta) THEN
            EXIT(TRUE);
        UNTIL prPreC.NEXT = 0;
      END;
      // Buscamos suplementos restringidos por Tipo de Regimen

      prPreC.RESET;
      prPreC.SETRANGE (Codigo         , lwCodPersona);
      prPreC.SETFILTER("Tipo Regimen" , '<>%1', '');

      IF prPreC.FINDSET THEN BEGIN
        REPEAT
          IF ComprobarCriteriosAplicacion(prPersona, prPersAux, pwAdultos, prPreC, prPeriodos, prPerRes, pwFechaVenta) THEN
            EXIT(TRUE);
        UNTIL prPreC.NEXT = 0;
      END;

      // Buscamos suplementos sin restricci¢n

      prPreC.RESET;
      prPreC.SETRANGE(Codigo, lwCodPersona);

      IF prPreC.FINDSET THEN BEGIN
        REPEAT
          IF ComprobarCriteriosAplicacion(prPersona, prPersAux, pwAdultos, prPreC, prPeriodos, prPerRes, pwFechaVenta) THEN
            EXIT(TRUE);
        UNTIL prPreC.NEXT = 0;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE AplicarSuplemento@1103355028(VAR prCabCal@1103355004 : TEMPORARY Record 7009735;VAR prPersona@1103355000 : TEMPORARY Record 7009873;VAR prPreCTMP@1103355001 : TEMPORARY Record 7009738;VAR prPersHab@1103355002 : TEMPORARY Record 2000000007;VAR prPersRes@1103355003 : TEMPORARY Record 2000000007);
    VAR
      lwDia@1103355005 : Date;
      lwImporte@1103355006 : Decimal;
      lrLinCal@1103355007 : Record 7009736;
    BEGIN
      // AplicarSuplemento

      prPersRes.RESET;

      IF prPersRes.FINDSET THEN BEGIN
        REPEAT
          FOR lwDia := prPersRes."Period Start" TO prPersRes."Period End" DO BEGIN

            IF prPreCTMP.Porcentaje THEN
              lwImporte := cCotCom.CalcularPorcentajeCoste(prCabCal, prPreCTMP, prPersona, FORMAT(lwDia))
            ELSE
              lwImporte := prPreCTMP.Importe;

            cCalRes.inserta_linea_calculo(lrLinCal, prCabCal.Usuario, Text001, prPersona.Contrato,
                                          lwImporte, prPersona."N§ Persona", lwDia,
                                          cCotCom.GetTipoPersona(prPersona."N§ Persona"), 1,
                                          lwImporte, prPreCTMP.Garantizable, prPreCTMP."Importe HP");
            cCalRes.fijos_linea_calculo  (lrLinCal, lrLinCal."Coste/Ingreso"::Coste, '',
                                          prPreCTMP."N§ Persona", prPersona.Hotel,
                                          1, prPersona.Hotel, prPreCTMP.Delegacion, prPreCTMP."Validacion HP especial");

            IF NOT prPreCTMP."Acumular al total" THEN
              cCotCom.EliminarOtrosCostes(prCabCal, prPreCTMP, prPersona, lwDia);


          END;
        UNTIL prPersRes.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ContarAdultos@1103355007(VAR prHabitaciones@1103355000 : TEMPORARY Record 7009873;VAR prPersonas@1103355001 : TEMPORARY Record 7009873) : Integer;
    BEGIN
      // ContarAdultos

      prPersonas.RESET;
      prPersonas.SETRANGE (Contrato    , prHabitaciones.Contrato);
      prPersonas.SETFILTER("N§ Persona", cCotCom.GetFiltroAdulto);
      EXIT(prPersonas.COUNT);
    END;

    LOCAL PROCEDURE ComprobarCriteriosAplicacion@1103355061(VAR prPersona@1103355000 : TEMPORARY Record 7009873;VAR prPersonas@1103355001 : TEMPORARY Record 7009873;pwAdultos@1103355002 : Integer;VAR prPreC@1103355003 : TEMPORARY Record 7009738;VAR prPeriodos@1103355006 : TEMPORARY Record 2000000007;VAR prResPeriodo@1103355007 : TEMPORARY Record 2000000007;pwFechaVenta@1103355008 : Date) rvAplic : Boolean;
    VAR
      lwAcaba@1103355004 : Boolean;
      lwNumCrit@1103355005 : Integer;
    BEGIN
      // ComprobarCriteriosAplicacion

      rvAplic   := TRUE;
      lwAcaba   := FALSE;
      lwNumCrit := 0;

      WHILE rvAplic AND NOT lwAcaba DO BEGIN
        lwNumCrit += 1;
        CASE lwNumCrit OF

          1: rvAplic := ComprobarEdades             (prPersona, prPreC);
          2: rvAplic := ComprobarNumPersona         (prPersona, prPreC, prPersonas);
          3: rvAplic := ComprobarFechas             (prPreC, prPersona, pwFechaVenta, prPeriodos, prResPeriodo);
          4: rvAplic := ComprobarAcompa¤antes       (prPersona, prPreC, pwAdultos);
          5: rvAplic := ComprobarTipoHabitacion     (prPersona, prPreC);
          6: rvAplic := ComprobarTipoRegimen        (prPersona, prPreC);
          7: rvAplic := ComprobarHotelOFertaEspecial(prPersona, prPreC);
          ELSE
            lwAcaba := TRUE;
        END;
      END;
    END;

    LOCAL PROCEDURE ComprobarEdades@1103355000(VAR prPersona@1103355000 : TEMPORARY Record 7009873;VAR prPreC@1103355001 : TEMPORARY Record 7009738) : Boolean;
    VAR
      lwEdadHasta@1103355002 : Integer;
    BEGIN
      // ComprobarEdades
      // comprobamos si el pax entra dentro del rango de edades.

      IF prPreC."Edad hasta" = 0 THEN
        lwEdadHasta := 999
      ELSE
        lwEdadHasta := prPreC."Edad hasta";

      EXIT((prPersona.Edad >= prPreC."Edad desde") AND (prPersona.Edad <= lwEdadHasta));
    END;

    LOCAL PROCEDURE ComprobarNumPersona@1103355001(VAR prPersona@1103355000 : TEMPORARY Record 7009873;VAR prPreC@1103355001 : TEMPORARY Record 7009738;VAR prPersonas@1103355002 : TEMPORARY Record 7009873) : Boolean;
    BEGIN
      // ComprobarNumPersona
      //: Comprobamos que la posicion en la habitacion coincida con la indicada en el suplemento.
      //: En caso de que el precio tenga un rango de edades, la posicion es dentro de ese rango de edades.

      IF prPreC."Edad hasta" = 0 THEN
        EXIT((prPreC."N§ Persona" = 0) OR (prPersona.Posicion = prPreC."N§ Persona"))
      ELSE
        EXIT((prPreC."N§ Persona" = 0) OR
             (GetNumPersonaxEdad(prPersona, prPersonas, prPreC."Edad desde", prPreC."Edad hasta") = prPreC."N§ Persona"));
    END;

    LOCAL PROCEDURE GetNumPersonaxEdad@1103355025(VAR prPersona@1103355000 : TEMPORARY Record 7009873;VAR prPersonas@1103355001 : TEMPORARY Record 7009873;pwEdadDesde@1103355003 : Integer;pwEdadHasta@1103355004 : Integer) rvNum : Integer;
    VAR
      lwAcaba@1103355002 : Boolean;
    BEGIN
      // GetNumPersonaxEdad

      prPersonas.RESET;
      prPersonas.SETCURRENTKEY("Id cotizacion", Edad);

      lwAcaba := FALSE;
      rvNum   := 0;

      IF prPersonas.FINDLAST THEN BEGIN
        REPEAT
          IF (prPersonas.Edad >= pwEdadDesde) AND (prPersonas.Edad <= pwEdadHasta) THEN
            rvNum += 1;
          lwAcaba :=  (prPersona."N§ Persona" = prPersonas."N§ Persona") OR (prPersonas.NEXT(-1) = 0);
        UNTIL lwAcaba;
      END;

      IF prPersona."N§ Habitaciones" <> 0 THEN
        rvNum := ROUND(rvNum / prPersona."N§ Habitaciones", 1);

      IF rvNum = 0 THEN
        rvNum := 1;
    END;

    LOCAL PROCEDURE ComprobarFechas@1103355002(VAR prPreC@1103355001 : TEMPORARY Record 7009738;VAR prPersona@1103355000 : TEMPORARY Record 7009873;pwFechaVenta@1103355002 : Date;VAR prPeriodos@1103355003 : TEMPORARY Record 2000000007;VAR prResPeriodo@1103355004 : TEMPORARY Record 2000000007) rvRes : Boolean;
    VAR
      lrPerPrecio@1103355005 : TEMPORARY Record 2000000007;
    BEGIN
      // ComprobarFechas

      CASE prPreC."Tipo Fechas" OF

        prPreC."Tipo Fechas"::"Fecha venta"          : BEGIN
          rvRes := ((pwFechaVenta >= prPreC."Fecha desde") AND (pwFechaVenta <= prPreC."Fecha hasta"));
          IF rvRes THEN
            cVarias.CopiaPeriodos(prPeriodos, prResPeriodo);
          EXIT(rvRes);
        END;

        prPreC."Tipo Fechas"::"Fecha entrada"        : BEGIN
          rvRes := ((prPersona."Fecha inicio" >= prPreC."Fecha desde") AND (prPersona."Fecha inicio" <= prPreC."Fecha hasta"));
          IF rvRes THEN
            cVarias.CopiaPeriodos(prPeriodos, prResPeriodo);
          EXIT(rvRes);
        END;

        prPreC."Tipo Fechas"::"Fecha estancia"       : BEGIN
          cVarias.IniciarPeriodo(lrPerPrecio, prPreC."Fecha desde", prPreC."Fecha hasta");
          cVarias.InterPer(prPeriodos, lrPerPrecio, prResPeriodo);
          EXIT(NOT cVarias.EstaVacio(prResPeriodo));
        END;

        prPreC."Tipo Fechas"::"Fecha venta+entrada"  : BEGIN

          rvRes := ((pwFechaVenta >= prPreC."Fecha desde") AND (pwFechaVenta <= prPreC."Fecha hasta")) AND
                   ((prPersona."Fecha inicio" >= prPreC."2¦ Fecha desde") AND (prPersona."Fecha inicio" <= prPreC."2¦ Fecha hasta"));

          IF rvRes THEN
            cVarias.CopiaPeriodos(prPeriodos, prResPeriodo);

          EXIT(rvRes);

        END;

        prPreC."Tipo Fechas"::"Fecha venta+estancia" : BEGIN

          rvRes := ((pwFechaVenta >= prPreC."Fecha desde") AND (pwFechaVenta <= prPreC."Fecha hasta"));

          IF rvRes THEN BEGIN
            cVarias.IniciarPeriodo(lrPerPrecio, prPreC."2¦ Fecha desde", prPreC."2¦ Fecha hasta");
            cVarias.InterPer(prPeriodos, lrPerPrecio, prResPeriodo);
            EXIT(NOT cVarias.EstaVacio(prResPeriodo));
          END;

          EXIT(rvRes);

        END;

        prPreC."Tipo Fechas"::"Fecha salida"         : BEGIN

          rvRes := ((prPersona."Fecha fin" >= prPreC."Fecha desde") AND (prPersona."Fecha fin" <= prPreC."Fecha hasta"));

          IF rvRes THEN
            cVarias.CopiaPeriodos(prPeriodos, prResPeriodo);

          EXIT(rvRes);

        END;

        prPreC."Tipo Fechas"::"Fecha venta+salida"   : BEGIN

          rvRes := ((pwFechaVenta >= prPreC."Fecha desde") AND (pwFechaVenta <= prPreC."Fecha hasta")) AND
                   ((prPersona."Fecha fin" >= prPreC."2¦ Fecha desde") AND (prPersona."Fecha fin" <= prPreC."2¦ Fecha hasta"));

          IF rvRes THEN
            cVarias.CopiaPeriodos(prPeriodos, prResPeriodo);

          EXIT(rvRes);

        END;

        prPreC."Tipo Fechas"::"Fecha entrada+salida" : BEGIN

          rvRes := ((prPersona."Fecha inicio" >= prPreC."Fecha desde") AND (prPersona."Fecha inicio" <= prPreC."Fecha hasta")) AND
                    ((prPersona."Fecha fin" >= prPreC."2¦ Fecha desde") AND (prPersona."Fecha fin" <= prPreC."2¦ Fecha hasta"));

          IF rvRes THEN
            cVarias.CopiaPeriodos(prPeriodos, prResPeriodo);

          EXIT(rvRes);

        END;

      END;
    END;

    LOCAL PROCEDURE ComprobarAcompa¤antes@1103355003(VAR prPersona@1103355001 : TEMPORARY Record 7009873;VAR prPreC@1103355000 : TEMPORARY Record 7009738;pwAdultos@1103355002 : Integer) : Boolean;
    BEGIN
      // ComprobarAcompa¤antes

      IF prPreC."N§ Personas acompa¤ante" = 0 THEN
        EXIT(TRUE);

      IF prPreC."N§ Acompa¤antes exacto" THEN
        EXIT(prPreC."N§ Personas acompa¤ante" = ROUND(pwAdultos / prPersona."N§ Habitaciones", 1))
      ELSE
        EXIT(prPreC."N§ Personas acompa¤ante" <= pwAdultos);
    END;

    LOCAL PROCEDURE ComprobarTipoHabitacion@1103355004(VAR prPersona@1103355001 : TEMPORARY Record 7009873;VAR prPreC@1103355000 : TEMPORARY Record 7009738) : Boolean;
    BEGIN
      // ComprobarTipoHabitacion

      IF prPreC."Tipo Habitacion" = '' THEN
        EXIT(TRUE);

      EXIT(prPreC."Tipo Habitacion" = prPersona.Habitacion);
    END;

    LOCAL PROCEDURE ComprobarTipoRegimen@1103355005(VAR prPersona@1103355001 : TEMPORARY Record 7009873;VAR prPreC@1103355000 : TEMPORARY Record 7009738) : Boolean;
    BEGIN
      // ComprobarTipoRegimen

      IF prPreC."Tipo Regimen" = '' THEN
        EXIT(TRUE);

      EXIT(prPreC."Tipo Regimen" = prPersona.Regimen);
    END;

    LOCAL PROCEDURE ComprobarHotelOFertaEspecial@1103355006(VAR prPersona@1103355001 : TEMPORARY Record 7009873;VAR prPreC@1103355000 : TEMPORARY Record 7009738) : Boolean;
    BEGIN
      // ComprobarHotelOFertaEspecial

      IF prPreC."Hotel oferta especial" = '' THEN
        EXIT(TRUE);

      EXIT(prPreC."Hotel oferta especial" = prPersona.Hotel);
    END;

    BEGIN
    END.
  }
}
