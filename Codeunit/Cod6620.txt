OBJECT Codeunit 6620 Copy Document Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=02/10/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009,NAVW16.00.01,NAVES6.00;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rim;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1034 : TextConst 'ENU=Please enter a Document No.;ESP=Introduzca un n§ documento.';
      Text001@1033 : TextConst 'ENU=%1 %2 cannot be copied onto itself.;ESP=%1 %2. No se puede copiar sobre si misma.';
      Text002@1032 : TextConst 'ENU=The existing lines for %1 %2 will be deleted.\\;ESP=Se eliminar n las l¡neas existentes para %1 %2.\\';
      Text003@1031 : TextConst 'ENU=Do you want to continue?;ESP=¨Confirma que desea continuar?';
      Text004@1030 : TextConst 'ENU=The document line(s) with a G/L account where direct posting is not allowed have not been copied to the new document by the Copy Document batch job.;ESP=La l¡nea(s) del doc. con una cta. contable donde no est  permitida la entrada directa no tienen que copiarse a un nuevo doc. por el proceso Copiar doc.';
      Text006@1028 : TextConst 'ENU=NOTE: A Payment Discount was Granted by %1 %2.;ESP=NOTA: Un descuento P.P. fue concedido %1 %2.';
      Text007@1027 : TextConst 'ENU=Quote,Blanket Order,Order,Invoice,Credit Memo,Posted Shipment,Posted Invoice,Posted Credit Memo,Posted Return Receipt;ESP=Oferta,Pedido abierto,Pedido,Factura,Abono,Albar n registrado,Factura registrada,Abono registrado,Recep. devol. regis.';
      Currency@1024 : Record 4;
      Item@1023 : Record 27;
      CustCheckCreditLimit@1006 : Codeunit 312;
      ItemCheckAvail@1005 : Codeunit 311;
      TransferExtendedText@1015 : Codeunit 378;
      TransferOldExtLines@1004 : Codeunit 379;
      Window@1043 : Dialog;
      WindowUpdateTime@1044 : Time;
      SalesDocType@1002 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      PurchDocType@1003 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      ServDocType@1016 : 'Quote,Contract';
      IncludeHeader@1001 : Boolean;
      RecalculateLines@1000 : Boolean;
      MoveNegLines@1009 : Boolean;
      Text008@1010 : TextConst 'ENU=There are no negative sales lines to move.;ESP=No hay l¡neas ventas negativas para mover.';
      Text009@1007 : TextConst 'ENU=NOTE: A Payment Discount was Received by %1 %2.;ESP=NOTA: Un descuento P.P. fue recibido por %1 %2.';
      Text010@1008 : TextConst 'ENU=There are no negative purchase lines to move.;ESP=No hay l¡neas compra negativas para mover.';
      CreateToHeader@1011 : Boolean;
      Text011@1012 : TextConst 'ENU=Please enter a Vendor No.;ESP=Introduzca un n§ proveedor';
      HideDialog@1013 : Boolean;
      Text012@1014 : TextConst 'ENU=There are no sales lines to copy.;ESP=No hay l¡neas venta para copiar.';
      Text013@1018 : TextConst 'ENU=Shipment No.,Invoice No.,Return Receipt No.,Credit Memo No.;ESP=N§ env¡o,N§ factura,N§ recep. devol.,N§ abono';
      Text014@1022 : TextConst 'ENU=Receipt No.,Invoice No.,Return Shipment No.,Credit Memo No.;ESP=N§ recibo,N§ factura,N§ env¡o devol.,N§ abono';
      Text015@1019 : TextConst 'ENU=%1 %2:;ESP=%1 %2:';
      Text016@1026 : TextConst 'ENU="Inv. No. ,Shpt. No. ,Cr. Memo No. ,Rtrn. Rcpt. No. ";ESP="N§ fac.,N§ env¡o ,N§ abono,N§ recep. devol. "';
      Text017@1035 : TextConst 'ENU="Inv. No. ,Rcpt. No. ,Cr. Memo No. ,Rtrn. Shpt. No. ";ESP="N§ fac.,N§ recep.,N§ abono,N§ env¡o devol. "';
      Text018@1029 : TextConst 'ENU=%1 - %2:;ESP=%1 - %2:';
      Text019@1037 : TextConst 'ENU=Exact Cost Reversing Link has not been created for all copied document lines.;ESP=El v¡nculo de reversi¢n de coste exacto no se ha creado para todas las l¡neas de documento copiadas.';
      Text020@1036 : TextConst 'ENU=\;ESP=\';
      Text022@1039 : TextConst 'ENU=Copying document lines...\;ESP=Copiando l¡ns. documento...\';
      Text023@1041 : TextConst 'ENU=Processing source lines      #1######\;ESP=Procesando l¡neas origen     #1######\';
      Text024@1040 : TextConst 'ENU=Creating new lines           #2######;ESP=Creando nuevas l¡neas        #2######';
      ExactCostRevMandatory@1042 : Boolean;
      ApplyFully@1017 : Boolean;
      AskApply@1020 : Boolean;
      ReappDone@1021 : Boolean;
      Text025@1046 : TextConst 'ENU=For one or more return document lines, you chose to return the original quantity, which is already fully applied. Therefore, when you post the return document, the program will reapply relevant entries. Beware that this may change the cost of existing entries. To avoid this, you must delete the affected return document lines before posting.;ESP=Para una o m s l¡neas de documentos de devoluci¢n, ha elegido devolver la cantidad original, que ya est  totalmente liquidada. Por lo tanto, cuando registre el documento de devoluci¢n, el programa volver  a liquidar las entradas relevantes. Tenga en cuenta que esto puede modificar el coste de las entradas existentes. Para evitarlo, debe eliminar las l¡neas afectadas del documento de devoluci¢n antes del registro.';
      SkippedLine@1047 : Boolean;
      Text029@1048 : TextConst 'ENU=One or more return document lines were not inserted or they contain only the remaining quantity of the original document line. This is because quantities on the posted document line are already fully or partially applied. If you want to reverse the full quantity, you must select Return Original Quantity before getting the posted document lines.;ESP=No se han insertado una o m s l¡neas del documento de devoluci¢n o contienen s¢lo la cantidad restante de la l¡nea de documento original. Esto se debe a que las cantidades en la l¡nea de documento registrada ya est n total o parcialmente liquidadas. Si desea invertir la cantidad ¡ntegra, debe seleccionar Devolver cantidad original antes de obtener las l¡neas de documento registradas.';
      Text030@1025 : TextConst 'ENU=%1 %2, line no. %3 is not copied because the full quantity on the posted document line is already manually applied.;ESP=%1 %2, l¡nea n§ %3 no se ha copiado porque la cantidad completa de la l¡nea del documento registrado ya se ha liquidado manualmente.';
      Text031@1038 : TextConst 'ENU=Return document line contains only the original document line quantity, that is not already manually applied.;ESP=La l¡nea de documento de devoluci¢n s¢lo contiene la cantidad de l¡nea del documento original, que no se ha liquidado manualmente a£n.';
      SomeAreFixed@1045 : Boolean;
      Text1100000@1100000 : TextConst 'ENU=At least one document of %1 No. %2 is closed or in a Bill Group;ESP=Al menos un documento de %1 No. %2 est  cerrado o en una remesa';
      Text1100001@1100001 : TextConst 'ENU=This will avoid the document to be settled;ESP=Esto evita que el documento sea liquidado';
      Text1100002@1100002 : TextConst 'ENU=The posting process of %3 No. %4 wont settle any document;ESP=El registro de %3 n§ %4 no liquidar  ning£n documento';

    PROCEDURE SetProperties@2(NewIncludeHeader@1001 : Boolean;NewRecalculateLines@1000 : Boolean;NewMoveNegLines@1006 : Boolean;NewCreateToHeader@1002 : Boolean;NewHideDialog@1003 : Boolean;NewExactCostRevMandatory@1004 : Boolean;NewApplyFully@1005 : Boolean);
    BEGIN
      IncludeHeader := NewIncludeHeader;
      RecalculateLines := NewRecalculateLines;
      MoveNegLines := NewMoveNegLines;
      CreateToHeader := NewCreateToHeader;
      HideDialog := NewHideDialog;
      ExactCostRevMandatory := NewExactCostRevMandatory;
      ApplyFully := NewApplyFully;
      AskApply := FALSE;
      ReappDone := FALSE;
      SkippedLine := FALSE;
      SomeAreFixed := FALSE;
    END;

    PROCEDURE SalesHeaderDocType@1(DocType@1001 : Option) : Integer;
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      CASE DocType OF
        SalesDocType::Quote:
          EXIT(SalesHeader."Document Type"::Quote);
        SalesDocType::"Blanket Order":
          EXIT(SalesHeader."Document Type"::"Blanket Order");
        SalesDocType::Order:
          EXIT(SalesHeader."Document Type"::Order);
        SalesDocType::Invoice:
          EXIT(SalesHeader."Document Type"::Invoice);
        SalesDocType::"Return Order":
          EXIT(SalesHeader."Document Type"::"Return Order");
        SalesDocType::"Credit Memo":
          EXIT(SalesHeader."Document Type"::"Credit Memo");
      END;
    END;

    PROCEDURE PurchHeaderDocType@19(DocType@1001 : Option) : Integer;
    VAR
      FromPurchHeader@1000 : Record 38;
    BEGIN
      CASE DocType OF
        PurchDocType::Quote:
          EXIT(FromPurchHeader."Document Type"::Quote);
        PurchDocType::"Blanket Order":
          EXIT(FromPurchHeader."Document Type"::"Blanket Order");
        PurchDocType::Order:
          EXIT(FromPurchHeader."Document Type"::Order);
        PurchDocType::Invoice:
          EXIT(FromPurchHeader."Document Type"::Invoice);
        PurchDocType::"Return Order":
          EXIT(FromPurchHeader."Document Type"::"Return Order");
        PurchDocType::"Credit Memo":
          EXIT(FromPurchHeader."Document Type"::"Credit Memo");
      END;
    END;

    PROCEDURE CopySalesDoc@16(FromDocType@1007 : Option;FromDocNo@1006 : Code[20];VAR ToSalesHeader@1008 : Record 36);
    VAR
      PaymentTerms@1009 : Record 3;
      ToSalesLine@1025 : Record 37;
      OldSalesHeader@1024 : Record 36;
      FromSalesHeader@1023 : Record 36;
      FromSalesLine@1022 : Record 37;
      FromSalesShptHeader@1021 : Record 110;
      FromSalesShptLine@1020 : Record 111;
      FromSalesInvHeader@1019 : Record 112;
      FromSalesInvLine@1018 : Record 113;
      FromReturnRcptHeader@1017 : Record 6660;
      FromReturnRcptLine@1016 : Record 6661;
      FromSalesCrMemoHeader@1015 : Record 114;
      FromSalesCrMemoLine@1014 : Record 115;
      DocDim@1001 : Record 357;
      CustLedgEntry@1013 : Record 21;
      GLSetUp@1010 : Record 98;
      Cust@1011 : Record 18;
      NextLineNo@1003 : Integer;
      ItemChargeAssgntNextLineNo@1002 : Integer;
      LinesNotCopied@1000 : Integer;
      MissingExCostRevLink@1012 : Boolean;
      ReleaseSalesDocument@1004 : Codeunit 414;
      ReleaseDocument@1005 : Boolean;
    BEGIN
      WITH ToSalesHeader DO BEGIN
        IF NOT CreateToHeader THEN BEGIN
          TESTFIELD(Status,Status::Open);
          IF FromDocNo = '' THEN
            ERROR(Text000);
          FIND;
        END;
        TransferOldExtLines.ClearLineNumbers;
        CASE FromDocType OF
          SalesDocType::Quote,
          SalesDocType::"Blanket Order",
          SalesDocType::Order,
          SalesDocType::Invoice,
          SalesDocType::"Return Order",
          SalesDocType::"Credit Memo":
            BEGIN
              FromSalesHeader.GET(SalesHeaderDocType(FromDocType),FromDocNo);
              IF MoveNegLines THEN
                DeleteSalesLinesWithNegQty(FromSalesHeader,TRUE);
              IF (FromSalesHeader."Document Type" = "Document Type") AND
                 (FromSalesHeader."No." = "No.")
              THEN
                ERROR(
                  Text001,
                  "Document Type","No.");

              IF "Document Type" <= "Document Type"::Invoice THEN BEGIN
                FromSalesHeader.CALCFIELDS("Amount Including VAT");
                "Amount Including VAT" := FromSalesHeader."Amount Including VAT";
                IF IncludeHeader THEN
                  IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                  CustCheckCreditLimit.SalesHeaderCheck(FromSalesHeader)
                ELSE
                  IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                  CustCheckCreditLimit.SalesHeaderCheck(ToSalesHeader);
              END;
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                FromSalesLine.SETRANGE("Document Type",FromSalesHeader."Document Type");
                FromSalesLine.SETRANGE("Document No.",FromSalesHeader."No.");
                FromSalesLine.SETRANGE(Type,FromSalesLine.Type::Item);
                FromSalesLine.SETFILTER("No.",'<>%1','');
                IF FromSalesLine.FIND('-') THEN
                  REPEAT
                    IF FromSalesLine.Quantity > 0 THEN BEGIN
                      ToSalesLine."No." := FromSalesLine."No.";
                      ToSalesLine."Variant Code" := FromSalesLine."Variant Code";
                      ToSalesLine."Location Code" := FromSalesLine."Location Code";
                      ToSalesLine."Bin Code" := FromSalesLine."Bin Code";
                      ToSalesLine."Unit of Measure Code" := FromSalesLine."Unit of Measure Code";
                      ToSalesLine."Qty. per Unit of Measure" := FromSalesLine."Qty. per Unit of Measure";
                      ToSalesLine."Outstanding Quantity" := FromSalesLine.Quantity;
                      ToSalesLine."Drop Shipment" := FromSalesLine."Drop Shipment";
                      IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                      CheckItemAvailable(ToSalesHeader,ToSalesLine);
                    END;
                  UNTIL FromSalesLine.NEXT = 0;
              END;
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromSalesHeader.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                FromSalesHeader.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                FromSalesHeader.TESTFIELD("Customer Posting Group","Customer Posting Group");
                FromSalesHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromSalesHeader.TESTFIELD("Currency Code","Currency Code");
                FromSalesHeader.TESTFIELD("Prices Including VAT","Prices Including VAT");
              END;
            END;
          SalesDocType::"Posted Shipment":
            BEGIN
              FromSalesShptHeader.GET(FromDocNo);
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                FromSalesShptLine.SETRANGE("Document No.",FromSalesShptHeader."No.");
                FromSalesShptLine.SETRANGE(Type,FromSalesShptLine.Type::Item);
                FromSalesShptLine.SETFILTER("No.",'<>%1','');
                IF FromSalesShptLine.FIND('-') THEN
                  REPEAT
                    IF FromSalesShptLine.Quantity > 0 THEN BEGIN
                      ToSalesLine."No." := FromSalesShptLine."No.";
                      ToSalesLine."Variant Code" := FromSalesShptLine."Variant Code";
                      ToSalesLine."Location Code" := FromSalesShptLine."Location Code";
                      ToSalesLine."Bin Code" := FromSalesShptLine."Bin Code";
                      ToSalesLine."Unit of Measure Code" := FromSalesShptLine."Unit of Measure Code";
                      ToSalesLine."Qty. per Unit of Measure" := FromSalesShptLine."Qty. per Unit of Measure";
                      ToSalesLine."Outstanding Quantity" := FromSalesShptLine.Quantity;
                      ToSalesLine."Drop Shipment" := FromSalesShptLine."Drop Shipment";
                      IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                      CheckItemAvailable(ToSalesHeader,ToSalesLine);
                    END;
                  UNTIL FromSalesShptLine.NEXT = 0;
              END;
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromSalesShptHeader.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                FromSalesShptHeader.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                FromSalesShptHeader.TESTFIELD("Customer Posting Group","Customer Posting Group");
                FromSalesShptHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromSalesShptHeader.TESTFIELD("Currency Code","Currency Code");
                FromSalesShptHeader.TESTFIELD("Prices Including VAT","Prices Including VAT");
              END;
            END;
          SalesDocType::"Posted Invoice":
            BEGIN
              FromSalesInvHeader.GET(FromDocNo);
              FromSalesInvHeader.TESTFIELD("Prepayment Invoice",FALSE);
              WarnSalesInvoicePmtDisc(ToSalesHeader,FromSalesHeader,FromDocType,FromDocNo);
              IF "Document Type" <= "Document Type"::Invoice THEN BEGIN
                FromSalesInvHeader.CALCFIELDS("Amount Including VAT");
                "Amount Including VAT" := FromSalesInvHeader."Amount Including VAT";
                IF IncludeHeader THEN BEGIN
                  FromSalesHeader.TRANSFERFIELDS(FromSalesInvHeader);
                  IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                  CustCheckCreditLimit.SalesHeaderCheck(FromSalesHeader)
                END ELSE
                  IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                  CustCheckCreditLimit.SalesHeaderCheck(ToSalesHeader);
              END;
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                FromSalesInvLine.SETRANGE("Document No.",FromSalesInvHeader."No.");
                FromSalesInvLine.SETRANGE(Type,FromSalesInvLine.Type::Item);
                FromSalesInvLine.SETFILTER("No.",'<>%1','');
                FromSalesInvLine.SETRANGE("Prepayment Line",FALSE);
                IF FromSalesInvLine.FIND('-') THEN
                  REPEAT
                    IF FromSalesInvLine.Quantity > 0 THEN BEGIN
                      ToSalesLine."No." := FromSalesInvLine."No.";
                      ToSalesLine."Variant Code" := FromSalesInvLine."Variant Code";
                      ToSalesLine."Location Code" := FromSalesInvLine."Location Code";
                      ToSalesLine."Bin Code" := FromSalesInvLine."Bin Code";
                      ToSalesLine."Unit of Measure Code" := FromSalesInvLine."Unit of Measure Code";
                      ToSalesLine."Qty. per Unit of Measure" := FromSalesInvLine."Qty. per Unit of Measure";
                      ToSalesLine."Outstanding Quantity" := FromSalesInvLine.Quantity;
                      ToSalesLine."Drop Shipment" := FromSalesInvLine."Drop Shipment";
                        IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                      CheckItemAvailable(ToSalesHeader,ToSalesLine);
                    END;
                  UNTIL FromSalesInvLine.NEXT = 0;
              END;
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromSalesInvHeader.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                FromSalesInvHeader.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                FromSalesInvHeader.TESTFIELD("Customer Posting Group","Customer Posting Group");
                FromSalesInvHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromSalesInvHeader.TESTFIELD("Currency Code","Currency Code");
                FromSalesInvHeader.TESTFIELD("Prices Including VAT","Prices Including VAT");
              END;
            END;
          SalesDocType::"Posted Return Receipt":
            BEGIN
              FromReturnRcptHeader.GET(FromDocNo);
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                FromReturnRcptLine.SETRANGE("Document No.",FromReturnRcptHeader."No.");
                FromReturnRcptLine.SETRANGE(Type,FromReturnRcptLine.Type::Item);
                FromReturnRcptLine.SETFILTER("No.",'<>%1','');
                IF FromReturnRcptLine.FIND('-') THEN
                  REPEAT
                    IF FromReturnRcptLine.Quantity > 0 THEN BEGIN
                      ToSalesLine."No." := FromReturnRcptLine."No.";
                      ToSalesLine."Variant Code" := FromReturnRcptLine."Variant Code";
                      ToSalesLine."Location Code" := FromReturnRcptLine."Location Code";
                      ToSalesLine."Bin Code" := FromReturnRcptLine."Bin Code";
                      ToSalesLine."Unit of Measure Code" := FromReturnRcptLine."Unit of Measure Code";
                      ToSalesLine."Qty. per Unit of Measure" := FromReturnRcptLine."Qty. per Unit of Measure";
                      ToSalesLine."Outstanding Quantity" := FromReturnRcptLine.Quantity;
                      ToSalesLine."Drop Shipment" := FALSE;
                      IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                      CheckItemAvailable(ToSalesHeader,ToSalesLine);
                    END;
                  UNTIL FromReturnRcptLine.NEXT = 0;
              END;
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromReturnRcptHeader.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                FromReturnRcptHeader.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                FromReturnRcptHeader.TESTFIELD("Customer Posting Group","Customer Posting Group");
                FromReturnRcptHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromReturnRcptHeader.TESTFIELD("Currency Code","Currency Code");
                FromReturnRcptHeader.TESTFIELD("Prices Including VAT","Prices Including VAT");
              END;
            END;
          SalesDocType::"Posted Credit Memo":
            BEGIN
              FromSalesCrMemoHeader.GET(FromDocNo);
              WarnSalesInvoicePmtDisc(ToSalesHeader,FromSalesHeader,FromDocType,FromDocNo);
              IF "Document Type" <= "Document Type"::Invoice THEN BEGIN
                FromSalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
                "Amount Including VAT" := FromSalesCrMemoHeader."Amount Including VAT";
                IF IncludeHeader THEN BEGIN
                  FromSalesHeader.TRANSFERFIELDS(FromSalesInvHeader);
                  IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                  CustCheckCreditLimit.SalesHeaderCheck(FromSalesHeader)
                END ELSE
                  IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                  CustCheckCreditLimit.SalesHeaderCheck(ToSalesHeader);
              END;
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                FromSalesCrMemoLine.SETRANGE("Document No.",FromSalesCrMemoHeader."No.");
                FromSalesCrMemoLine.SETRANGE(Type,FromSalesCrMemoLine.Type::Item);
                FromSalesCrMemoLine.SETFILTER("No.",'<>%1','');
                FromSalesCrMemoLine.SETRANGE("Prepayment Line",FALSE);
                IF FromSalesCrMemoLine.FIND('-') THEN
                  REPEAT
                    IF FromSalesCrMemoLine.Quantity > 0 THEN BEGIN
                      ToSalesLine."No." := FromSalesCrMemoLine."No.";
                      ToSalesLine."Variant Code" := FromSalesCrMemoLine."Variant Code";
                      ToSalesLine."Location Code" := FromSalesCrMemoLine."Location Code";
                      ToSalesLine."Bin Code" := FromSalesCrMemoLine."Bin Code";
                      ToSalesLine."Unit of Measure Code" := FromSalesCrMemoLine."Unit of Measure Code";
                      ToSalesLine."Qty. per Unit of Measure" := FromSalesCrMemoLine."Qty. per Unit of Measure";
                      ToSalesLine."Outstanding Quantity" := FromSalesCrMemoLine.Quantity;
                      ToSalesLine."Drop Shipment" := FALSE;
                      IF NOT ToSalesHeader."Creado por anulaci¢n" THEN            //AF3.70
                      CheckItemAvailable(ToSalesHeader,ToSalesLine);
                    END;
                  UNTIL FromSalesCrMemoLine.NEXT = 0;
              END;
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromSalesCrMemoHeader.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                FromSalesCrMemoHeader.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                FromSalesCrMemoHeader.TESTFIELD("Customer Posting Group","Customer Posting Group");
                FromSalesCrMemoHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromSalesCrMemoHeader.TESTFIELD("Currency Code","Currency Code");
                FromSalesCrMemoHeader.TESTFIELD("Prices Including VAT","Prices Including VAT");
              END;
            END;
        END;

        DocDim.LOCKTABLE;
        ToSalesLine.LOCKTABLE;

        IF CreateToHeader THEN BEGIN
          INSERT(TRUE);
          ToSalesLine.SETRANGE("Document Type","Document Type");
          ToSalesLine.SETRANGE("Document No.","No.");
        END ELSE BEGIN
          ToSalesLine.SETRANGE("Document Type","Document Type");
          ToSalesLine.SETRANGE("Document No.","No.");
          IF IncludeHeader THEN BEGIN
            IF ToSalesLine.FIND('-') THEN BEGIN
              COMMIT;
              IF NOT
                 CONFIRM(
                   Text002 +
                   Text003,TRUE,
                   "Document Type","No.")
              THEN
                EXIT;
              ToSalesLine.DELETEALL(TRUE);
            END;
          END;
        END;

        IF ToSalesLine.FIND('+') THEN
          NextLineNo := ToSalesLine."Line No."
        ELSE
          NextLineNo := 0;

        IF NOT RECORDLEVELLOCKING THEN
          LOCKTABLE(TRUE,TRUE);

        IF IncludeHeader THEN BEGIN
          IF Cust.GET(FromSalesHeader."Sell-to Customer No.") THEN
            Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
          IF Cust.GET(FromSalesHeader."Bill-to Customer No.") THEN
            Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
          OldSalesHeader := ToSalesHeader;
          CASE FromDocType OF
            SalesDocType::Quote,
            SalesDocType::"Blanket Order",
            SalesDocType::Order,
            SalesDocType::Invoice,
            SalesDocType::"Return Order",
            SalesDocType::"Credit Memo":
              BEGIN
                TRANSFERFIELDS(FromSalesHeader,FALSE);
                Status := Status::Open;
                IF "Document Type" <> "Document Type"::Order THEN
                  ToSalesHeader."Prepayment %" := 0;
                IF FromDocType = SalesDocType::"Return Order" THEN
                  VALIDATE("Ship-to Code");
                IF FromDocType IN [SalesDocType::Quote,SalesDocType::"Blanket Order"] THEN
                  IF OldSalesHeader."Posting Date" = 0D THEN
                    "Posting Date" := WORKDATE
                  ELSE
                    "Posting Date" := OldSalesHeader."Posting Date";
                CopyFromSalesDocDimToHeader(ToSalesHeader,FromSalesHeader);

                // $001 INCOMING

                CopyFromSalesComentToHeader(ToSalesHeader,FromSalesHeader);
              END;
            SalesDocType::"Posted Shipment":
              BEGIN
                ToSalesHeader.VALIDATE("Sell-to Customer No.",FromSalesShptHeader."Sell-to Customer No.");
                TRANSFERFIELDS(FromSalesShptHeader,FALSE);
                CopyFromPstdSalesDocDimToHdr(
                  ToSalesHeader,FromDocType,FromSalesShptHeader,FromSalesInvHeader,
                  FromReturnRcptHeader,FromSalesCrMemoHeader);
              END;
            SalesDocType::"Posted Invoice":
              BEGIN
                ToSalesHeader.VALIDATE("Sell-to Customer No.",FromSalesInvHeader."Sell-to Customer No.");
                TRANSFERFIELDS(FromSalesInvHeader,FALSE);
                CopyFromPstdSalesDocDimToHdr(
                  ToSalesHeader,FromDocType,FromSalesShptHeader,FromSalesInvHeader,
                  FromReturnRcptHeader,FromSalesCrMemoHeader);
              END;
            SalesDocType::"Posted Return Receipt":
              BEGIN
                ToSalesHeader.VALIDATE("Sell-to Customer No.",FromReturnRcptHeader."Sell-to Customer No.");
                TRANSFERFIELDS(FromReturnRcptHeader,FALSE);
                CopyFromPstdSalesDocDimToHdr(
                  ToSalesHeader,FromDocType,FromSalesShptHeader,FromSalesInvHeader,
                  FromReturnRcptHeader,FromSalesCrMemoHeader);
              END;
            SalesDocType::"Posted Credit Memo":
              BEGIN
                ToSalesHeader.VALIDATE("Sell-to Customer No.",FromSalesCrMemoHeader."Sell-to Customer No.");
                TRANSFERFIELDS(FromSalesCrMemoHeader,FALSE);
                CopyFromPstdSalesDocDimToHdr(
                  ToSalesHeader,FromDocType,FromSalesShptHeader,FromSalesInvHeader,
                  FromReturnRcptHeader,FromSalesCrMemoHeader);
              END;
          END;
          IF Status = Status::Released THEN BEGIN
            Status := Status::Open;
            ReleaseDocument := TRUE;
          END;
          IF MoveNegLines OR IncludeHeader THEN
            ToSalesHeader.VALIDATE("Location Code");

          "Document Type" := OldSalesHeader."Document Type";
          "No." := OldSalesHeader."No.";
          "No. Series" := OldSalesHeader."No. Series";
          "Posting Description" := OldSalesHeader."Posting Description";
          "Posting No." := OldSalesHeader."Posting No.";
          "Posting No. Series" := OldSalesHeader."Posting No. Series";
          "Shipping No." := OldSalesHeader."Shipping No.";
          "Shipping No. Series" := OldSalesHeader."Shipping No. Series";
          "Return Receipt No." := OldSalesHeader."Return Receipt No.";
          "Return Receipt No. Series" := OldSalesHeader."Return Receipt No. Series";
          "Prepayment No. Series" := OldSalesHeader."Prepayment No. Series";
          "Prepayment No." := OldSalesHeader."Prepayment No.";
          "Prepmt. Posting Description" := OldSalesHeader."Prepmt. Posting Description";
          "Prepmt. Cr. Memo No. Series" := OldSalesHeader."Prepmt. Cr. Memo No. Series";
          "Prepmt. Cr. Memo No." := OldSalesHeader."Prepmt. Cr. Memo No.";
          "Prepmt. Posting Description" := OldSalesHeader."Prepmt. Posting Description";
          "No. Printed" := 0;
          "Applies-to Doc. Type" := "Applies-to Doc. Type"::" ";
          "Applies-to Doc. No." := '';
          "Applies-to ID" := '';
          "Opportunity No." := '';
          ClearSalesBizTalkFields(ToSalesHeader);
          IF ((FromDocType = SalesDocType::"Posted Invoice") AND
              ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"])) OR
             ((FromDocType = SalesDocType::"Posted Credit Memo") AND
              NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]))
          THEN BEGIN
            CustLedgEntry.SETCURRENTKEY("Document No.");
            IF FromDocType = SalesDocType::"Posted Invoice" THEN
              CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice)
            ELSE
              CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::"Credit Memo");
            CustLedgEntry.SETRANGE("Document No.",FromDocNo);
            CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
            CustLedgEntry.SETRANGE(Open,TRUE);
            CustLedgEntry.SETRANGE("Document Situation",CustLedgEntry."Document Situation"::" ");
            IF CustLedgEntry.FIND('-') THEN BEGIN
              IF FromDocType = SalesDocType::"Posted Invoice" THEN BEGIN
                "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;
                "Applies-to Doc. No." := FromDocNo;
              END ELSE BEGIN
                "Applies-to Doc. Type" := "Applies-to Doc. Type"::"Credit Memo";
                "Applies-to Doc. No." := FromDocNo;
              END;
              CustLedgEntry.CALCFIELDS("Remaining Amount");
              CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
              CustLedgEntry."Accepted Payment Tolerance" := 0;
              CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
              CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
            END ELSE
              IF FromDocType = SalesDocType::"Posted Invoice" THEN
                TestSalesEfecs(FromDocType, ToSalesHeader, FromSalesInvHeader, CustLedgEntry);
          END;

          IF "Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote] THEN
            "Posting Date" := 0D;

          Correction := FALSE;
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
            "Shipment Date" := 0D;
            "Due Date" := 0D;
            GLSetUp.GET;
            Correction := GLSetUp."Mark Cr. Memos as Corrections";
            IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN
              PaymentTerms.GET("Payment Terms Code")
            ELSE
              CLEAR(PaymentTerms);
            IF NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
              "Payment Terms Code" := '';
              "Due Date" := 0D;
              "Payment Discount %" := 0;
              "Pmt. Discount Date" := 0D;
            END;
          END;

          IF CreateToHeader THEN BEGIN
            VALIDATE("Payment Terms Code");
            MODIFY(TRUE);
          END ELSE
            MODIFY;
        END;

        LinesNotCopied := 0;
        CASE FromDocType OF
          SalesDocType::Quote,
          SalesDocType::"Blanket Order",
          SalesDocType::Order,
          SalesDocType::Invoice,
          SalesDocType::"Return Order",
          SalesDocType::"Credit Memo":
            BEGIN
              ItemChargeAssgntNextLineNo := 0;
              FromSalesLine.RESET;
              FromSalesLine.SETRANGE("Document Type",FromSalesHeader."Document Type");
              FromSalesLine.SETRANGE("Document No.",FromSalesHeader."No.");
              IF MoveNegLines THEN
                FromSalesLine.SETFILTER(Quantity,'<=0');
              IF FromSalesLine.FIND('-') THEN
                REPEAT
                  IF CopySalesLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,NextLineNo,LinesNotCopied,FALSE) THEN BEGIN
                    CopyFromSalesDocDimToLine(ToSalesLine,FromSalesLine);
                    IF FromSalesLine.Type = FromSalesLine.Type::"Charge (Item)" THEN
                      CopyFromSalesDocAssgntToLine(ToSalesLine,FromSalesLine,ItemChargeAssgntNextLineNo);
                  END;
                UNTIL FromSalesLine.NEXT = 0;
            END;
          SalesDocType::"Posted Shipment":
            BEGIN
              FromSalesHeader.TRANSFERFIELDS(FromSalesShptHeader);
              FromSalesShptLine.RESET;
              FromSalesShptLine.SETRANGE("Document No.",FromSalesShptHeader."No.");
              IF MoveNegLines THEN
                FromSalesShptLine.SETFILTER(Quantity,'<=0');
              CopySalesShptLinesToDoc(ToSalesHeader,FromSalesShptLine,LinesNotCopied,MissingExCostRevLink);
            END;
          SalesDocType::"Posted Invoice":
            BEGIN
              FromSalesHeader.TRANSFERFIELDS(FromSalesInvHeader);
              FromSalesInvLine.RESET;
              FromSalesInvLine.SETRANGE("Document No.",FromSalesInvHeader."No.");
              IF MoveNegLines THEN
                FromSalesInvLine.SETFILTER(Quantity,'<=0');
              CopySalesInvLinesToDoc(ToSalesHeader,FromSalesInvLine,LinesNotCopied,MissingExCostRevLink);
            END;
          SalesDocType::"Posted Return Receipt":
            BEGIN
              FromSalesHeader.TRANSFERFIELDS(FromReturnRcptHeader);
              FromReturnRcptLine.RESET;
              FromReturnRcptLine.SETRANGE("Document No.",FromReturnRcptHeader."No.");
              IF MoveNegLines THEN
                FromReturnRcptLine.SETFILTER(Quantity,'<=0');
              CopySalesReturnRcptLinesToDoc(ToSalesHeader,FromReturnRcptLine,LinesNotCopied,MissingExCostRevLink);
            END;
          SalesDocType::"Posted Credit Memo":
            BEGIN
              FromSalesHeader.TRANSFERFIELDS(FromSalesCrMemoHeader);
              FromSalesCrMemoLine.RESET;
              FromSalesCrMemoLine.SETRANGE("Document No.",FromSalesCrMemoHeader."No.");
              IF MoveNegLines THEN
                FromSalesCrMemoLine.SETFILTER(Quantity,'<=0');
              CopySalesCrMemoLinesToDoc(ToSalesHeader,FromSalesCrMemoLine,LinesNotCopied,MissingExCostRevLink);
            END;
        END;
      END;

      IF MoveNegLines THEN
        DeleteSalesLinesWithNegQty(FromSalesHeader,FALSE);

      IF ReleaseDocument THEN BEGIN
        ToSalesHeader.Status := ToSalesHeader.Status::Released;
        ReleaseSalesDocument.Reopen(ToSalesHeader);
      END ELSE IF (FromDocType IN
        [SalesDocType::Quote,
         SalesDocType::"Blanket Order",
         SalesDocType::Order,
         SalesDocType::Invoice,
         SalesDocType::"Return Order",
         SalesDocType::"Credit Memo"])
         AND NOT IncludeHeader AND NOT RecalculateLines THEN
           IF FromSalesHeader.Status = FromSalesHeader.Status::Released THEN BEGIN
             ReleaseSalesDocument.RUN(ToSalesHeader);
             ReleaseSalesDocument.Reopen(ToSalesHeader);
           END;
      CASE TRUE OF
        MissingExCostRevLink AND (LinesNotCopied <> 0): MESSAGE(Text019 + Text020 + Text004);
        MissingExCostRevLink: MESSAGE(Text019);
        LinesNotCopied <> 0: MESSAGE(Text004);
      END;
    END;

    PROCEDURE CopyPurchDoc@22(FromDocType@1005 : Option;FromDocNo@1004 : Code[20];VAR ToPurchHeader@1017 : Record 38);
    VAR
      PaymentTerms@1022 : Record 3;
      ToPurchLine@1015 : Record 39;
      OldPurchHeader@1014 : Record 38;
      FromPurchHeader@1013 : Record 38;
      FromPurchLine@1012 : Record 39;
      FromPurchRcptHeader@1011 : Record 120;
      FromPurchRcptLine@1010 : Record 121;
      FromPurchInvHeader@1009 : Record 122;
      FromPurchInvLine@1008 : Record 123;
      FromReturnShptHeader@1002 : Record 6650;
      FromReturnShptLine@1001 : Record 6651;
      FromPurchCrMemoHeader@1007 : Record 124;
      FromPurchCrMemoLine@1006 : Record 125;
      DocDim@1000 : Record 357;
      VendLedgEntry@1003 : Record 25;
      GLSetup@1023 : Record 98;
      Vend@1024 : Record 23;
      NextLineNo@1020 : Integer;
      ItemChargeAssgntNextLineNo@1016 : Integer;
      LinesNotCopied@1018 : Integer;
      MissingExCostRevLink@1025 : Boolean;
      ReleasePurchaseDocument@1019 : Codeunit 415;
      ReleaseDocument@1021 : Boolean;
    BEGIN
      WITH ToPurchHeader DO BEGIN
        IF NOT CreateToHeader THEN BEGIN
          TESTFIELD(Status,Status::Open);
          IF FromDocNo = '' THEN
            ERROR(Text000);
          FIND;
        END;
        TransferOldExtLines.ClearLineNumbers;
        CASE FromDocType OF
          PurchDocType::Quote,
          PurchDocType::"Blanket Order",
          PurchDocType::Order,
          PurchDocType::Invoice,
          PurchDocType::"Return Order",
          PurchDocType::"Credit Memo":
            BEGIN
              FromPurchHeader.GET(PurchHeaderDocType(FromDocType),FromDocNo);
              IF MoveNegLines THEN
                DeletePurchLinesWithNegQty(FromPurchHeader,TRUE);
              IF (FromPurchHeader."Document Type" = "Document Type") AND
                 (FromPurchHeader."No." = "No.")
              THEN
                ERROR(
                  Text001,
                  "Document Type","No.");
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromPurchHeader.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                FromPurchHeader.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                FromPurchHeader.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
                FromPurchHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromPurchHeader.TESTFIELD("Currency Code","Currency Code");
              END;
            END;
          PurchDocType::"Posted Receipt":
            BEGIN
              FromPurchRcptHeader.GET(FromDocNo);
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromPurchRcptHeader.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                FromPurchRcptHeader.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                FromPurchRcptHeader.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
                FromPurchRcptHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromPurchRcptHeader.TESTFIELD("Currency Code","Currency Code");
              END;
            END;
          PurchDocType::"Posted Invoice":
            BEGIN
              FromPurchInvHeader.GET(FromDocNo);
              FromPurchInvHeader.TESTFIELD("Prepayment Invoice",FALSE);
              WarnPurchInvoicePmtDisc(ToPurchHeader,FromPurchHeader,FromDocType,FromDocNo);
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromPurchInvHeader.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                FromPurchInvHeader.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                FromPurchInvHeader.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
                FromPurchInvHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromPurchInvHeader.TESTFIELD("Currency Code","Currency Code");
              END;
            END;
          PurchDocType::"Posted Return Shipment":
            BEGIN
              FromReturnShptHeader.GET(FromDocNo);
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromReturnShptHeader.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                FromReturnShptHeader.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                FromReturnShptHeader.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
                FromReturnShptHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromReturnShptHeader.TESTFIELD("Currency Code","Currency Code");
              END;
            END;
          PurchDocType::"Posted Credit Memo":
            BEGIN
              FromPurchCrMemoHeader.GET(FromDocNo);
              WarnPurchInvoicePmtDisc(ToPurchHeader,FromPurchHeader,FromDocType,FromDocNo);
              IF NOT IncludeHeader AND NOT RecalculateLines THEN BEGIN
                FromPurchCrMemoHeader.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                FromPurchCrMemoHeader.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                FromPurchCrMemoHeader.TESTFIELD("Vendor Posting Group","Vendor Posting Group");
                FromPurchCrMemoHeader.TESTFIELD("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                FromPurchCrMemoHeader.TESTFIELD("Currency Code","Currency Code");
              END;
            END;
        END;

        DocDim.LOCKTABLE;
        ToPurchLine.LOCKTABLE;

        IF CreateToHeader THEN BEGIN
          INSERT(TRUE);
          ToPurchLine.SETRANGE("Document Type","Document Type");
          ToPurchLine.SETRANGE("Document No.","No.");
        END ELSE BEGIN
          ToPurchLine.SETRANGE("Document Type","Document Type");
          ToPurchLine.SETRANGE("Document No.","No.");
          IF IncludeHeader THEN BEGIN
            IF ToPurchLine.FIND('-') THEN BEGIN
              COMMIT;
              IF NOT
                 CONFIRM(
                   Text002 +
                   Text003,TRUE,
                   "Document Type","No.")
              THEN
                EXIT;
              ToPurchLine.DELETEALL(TRUE);
            END;
          END;
        END;

        IF ToPurchLine.FIND('+') THEN
          NextLineNo := ToPurchLine."Line No."
        ELSE
          NextLineNo := 0;

        IF NOT RECORDLEVELLOCKING THEN
          LOCKTABLE(TRUE,TRUE);

        IF IncludeHeader THEN BEGIN
          IF Vend.GET(FromPurchHeader."Buy-from Vendor No.") THEN
            Vend.CheckBlockedVendOnDocs(Vend,FALSE);
          IF Vend.GET(FromPurchHeader."Pay-to Vendor No.") THEN
            Vend.CheckBlockedVendOnDocs(Vend,FALSE);
          OldPurchHeader := ToPurchHeader;
          CASE FromDocType OF
            PurchDocType::Quote,
            PurchDocType::"Blanket Order",
            PurchDocType::Order,
            PurchDocType::Invoice,
            PurchDocType::"Return Order",
            PurchDocType::"Credit Memo":
              BEGIN
                TRANSFERFIELDS(FromPurchHeader,FALSE);
                IF "Document Type" <> "Document Type"::Order THEN
                  "Prepayment %" := 0;
                IF FromDocType IN [PurchDocType::Quote,PurchDocType::"Blanket Order"] THEN
                  IF OldPurchHeader."Posting Date" = 0D THEN
                    "Posting Date" := WORKDATE
                  ELSE
                    "Posting Date" := OldPurchHeader."Posting Date";
                CopyFromPurchDocDimToHeader(ToPurchHeader,FromPurchHeader);

                // $002 INCOMING

                CopyFromPurchComentToHeader(ToPurchHeader,FromPurchHeader);
              END;
            PurchDocType::"Posted Receipt":
              BEGIN
                ToPurchHeader.VALIDATE("Buy-from Vendor No.",FromPurchRcptHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromPurchRcptHeader,FALSE);
                CopyFromPstdPurchDocDimToHdr(
                  ToPurchHeader,FromDocType,FromPurchRcptHeader,FromPurchInvHeader,
                  FromReturnShptHeader,FromPurchCrMemoHeader);
              END;
            PurchDocType::"Posted Invoice":
              BEGIN
                ToPurchHeader.VALIDATE("Buy-from Vendor No.",FromPurchInvHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromPurchInvHeader,FALSE);
                CopyFromPstdPurchDocDimToHdr(
                  ToPurchHeader,FromDocType,FromPurchRcptHeader,FromPurchInvHeader,
                  FromReturnShptHeader,FromPurchCrMemoHeader);
              END;
            PurchDocType::"Posted Return Shipment":
              BEGIN
                ToPurchHeader.VALIDATE("Buy-from Vendor No.",FromReturnShptHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromReturnShptHeader,FALSE);
                CopyFromPstdPurchDocDimToHdr(
                  ToPurchHeader,FromDocType,FromPurchRcptHeader,FromPurchInvHeader,
                  FromReturnShptHeader,FromPurchCrMemoHeader);
              END;
            PurchDocType::"Posted Credit Memo":
              BEGIN
                ToPurchHeader.VALIDATE("Buy-from Vendor No.",FromPurchCrMemoHeader."Buy-from Vendor No.");
                TRANSFERFIELDS(FromPurchCrMemoHeader,FALSE);
                CopyFromPstdPurchDocDimToHdr(
                  ToPurchHeader,FromDocType,FromPurchRcptHeader,FromPurchInvHeader,
                  FromReturnShptHeader,FromPurchCrMemoHeader);
              END;
          END;
          IF Status = Status::Released THEN BEGIN
            Status := Status::Open;
            ReleaseDocument := TRUE;
          END;
          IF MoveNegLines OR IncludeHeader THEN
            ToPurchHeader.VALIDATE("Location Code");
          IF MoveNegLines THEN
            VALIDATE("Order Address Code");

          "Document Type" := OldPurchHeader."Document Type";
          "No." := OldPurchHeader."No.";
          "No. Series" := OldPurchHeader."No. Series";
          "Posting Description" := OldPurchHeader."Posting Description";
          "Posting No." := OldPurchHeader."Posting No.";
          "Posting No. Series" := OldPurchHeader."Posting No. Series";
          "Receiving No." := OldPurchHeader."Receiving No.";
          "Receiving No. Series" := OldPurchHeader."Receiving No. Series";
          "Return Shipment No." := OldPurchHeader."Return Shipment No.";
          "Return Shipment No. Series" := OldPurchHeader."Return Shipment No. Series";
          "Prepayment No. Series" := OldPurchHeader."Prepayment No. Series";
          "Prepayment No." := OldPurchHeader."Prepayment No.";
          "Prepmt. Posting Description" := OldPurchHeader."Prepmt. Posting Description";
          "Prepmt. Cr. Memo No. Series" := OldPurchHeader."Prepmt. Cr. Memo No. Series";
          "Prepmt. Cr. Memo No." := OldPurchHeader."Prepmt. Cr. Memo No.";
          "Prepmt. Posting Description" := OldPurchHeader."Prepmt. Posting Description";
          "No. Printed" := 0;
          "Applies-to Doc. Type" := "Applies-to Doc. Type"::" ";
          "Applies-to Doc. No." := '';
          "Applies-to ID" := '';
          ClearPurchBizTalkFields(ToPurchHeader);
          IF ((FromDocType = PurchDocType::"Posted Invoice") AND
              ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"])) OR
             ((FromDocType = PurchDocType::"Posted Credit Memo") AND
              NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]))
          THEN BEGIN
            VendLedgEntry.SETCURRENTKEY("Document No.");
            IF FromDocType = PurchDocType::"Posted Invoice" THEN
              VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice)
            ELSE
              VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
            VendLedgEntry.SETRANGE("Document No.",FromDocNo);
            VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
            VendLedgEntry.SETRANGE(Open,TRUE);
            VendLedgEntry.SETRANGE("Document Situation",VendLedgEntry."Document Situation"::" ");
            IF VendLedgEntry.FIND('-') THEN BEGIN
              IF FromDocType = PurchDocType::"Posted Invoice" THEN BEGIN
                "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;
                "Applies-to Doc. No." := FromDocNo;
              END ELSE BEGIN
                "Applies-to Doc. Type" := "Applies-to Doc. Type"::"Credit Memo";
                "Applies-to Doc. No." := FromDocNo;
              END;
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              VendLedgEntry."Accepted Payment Tolerance" := 0;
              VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            END ELSE
              IF FromDocType = PurchDocType::"Posted Invoice" THEN
                TestPurchEfecs(FromDocType, ToPurchHeader, FromPurchInvHeader, VendLedgEntry);
          END;

          IF "Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote] THEN
            "Posting Date" := 0D;

          Correction := FALSE;
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
            "Expected Receipt Date" := 0D;
            "Due Date" := 0D;
            GLSetup.GET;
            Correction := GLSetup."Mark Cr. Memos as Corrections";
            IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN
              PaymentTerms.GET("Payment Terms Code")
            ELSE
              CLEAR(PaymentTerms);
            IF NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
              "Payment Terms Code" := '';
              "Due Date" := 0D;
              "Payment Discount %" := 0;
              "Pmt. Discount Date" := 0D;
            END;
          END;

          IF CreateToHeader THEN BEGIN
            VALIDATE("Payment Terms Code");
            MODIFY(TRUE);
          END ELSE
            MODIFY;
        END;

        LinesNotCopied := 0;
        CASE FromDocType OF
          PurchDocType::Quote,
          PurchDocType::"Blanket Order",
          PurchDocType::Order,
          PurchDocType::Invoice,
          PurchDocType::"Return Order",
          PurchDocType::"Credit Memo":
            BEGIN
              ItemChargeAssgntNextLineNo := 0;
              FromPurchLine.RESET;
              FromPurchLine.SETRANGE("Document Type",FromPurchHeader."Document Type");
              FromPurchLine.SETRANGE("Document No.",FromPurchHeader."No.");
              IF MoveNegLines THEN
                FromPurchLine.SETFILTER(Quantity,'<=0');
              IF FromPurchLine.FIND('-') THEN
                REPEAT
                  IF CopyPurchLine(
                    ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,
                    NextLineNo,LinesNotCopied,FALSE)
                  THEN BEGIN
                    CopyFromPurchDocDimToLine(ToPurchLine,FromPurchLine);
                    IF FromPurchLine.Type = FromPurchLine.Type::"Charge (Item)" THEN
                      CopyFromPurchDocAssgntToLine(ToPurchLine,FromPurchLine,ItemChargeAssgntNextLineNo);
                  END;
                UNTIL FromPurchLine.NEXT = 0;
            END;
          PurchDocType::"Posted Receipt":
            BEGIN
              FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
              FromPurchRcptLine.RESET;
              FromPurchRcptLine.SETRANGE("Document No.",FromPurchRcptHeader."No.");
              IF MoveNegLines THEN
                FromPurchRcptLine.SETFILTER(Quantity,'<=0');
              CopyPurchRcptLinesToDoc(ToPurchHeader,FromPurchRcptLine,LinesNotCopied,MissingExCostRevLink);
            END;
          PurchDocType::"Posted Invoice":
            BEGIN
              FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
              FromPurchInvLine.RESET;
              FromPurchInvLine.SETRANGE("Document No.",FromPurchInvHeader."No.");
              IF MoveNegLines THEN
                FromPurchInvLine.SETFILTER(Quantity,'<=0');
              CopyPurchInvLinesToDoc(ToPurchHeader,FromPurchInvLine,LinesNotCopied,MissingExCostRevLink);
            END;
          PurchDocType::"Posted Return Shipment":
            BEGIN
              FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
              FromReturnShptLine.RESET;
              FromReturnShptLine.SETRANGE("Document No.",FromReturnShptHeader."No.");
              IF MoveNegLines THEN
                FromReturnShptLine.SETFILTER(Quantity,'<=0');
              CopyPurchReturnShptLinesToDoc(ToPurchHeader,FromReturnShptLine,LinesNotCopied,MissingExCostRevLink);
            END;
          PurchDocType::"Posted Credit Memo":
            BEGIN
              FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
              FromPurchCrMemoLine.RESET;
              FromPurchCrMemoLine.SETRANGE("Document No.",FromPurchCrMemoHeader."No.");
              IF MoveNegLines THEN
                FromPurchCrMemoLine.SETFILTER(Quantity,'<=0');
              CopyPurchCrMemoLinesToDoc(ToPurchHeader,FromPurchCrMemoLine,LinesNotCopied,MissingExCostRevLink);
            END;
        END;
      END;

      IF MoveNegLines THEN
        DeletePurchLinesWithNegQty(FromPurchHeader,FALSE);

      IF ReleaseDocument THEN BEGIN
        ToPurchHeader.Status := ToPurchHeader.Status::Released;
        ReleasePurchaseDocument.Reopen(ToPurchHeader);
      END ELSE IF (FromDocType IN
        [PurchDocType::Quote,
         PurchDocType::"Blanket Order",
         PurchDocType::Order,
         PurchDocType::Invoice,
         PurchDocType::"Return Order",
         PurchDocType::"Credit Memo"])
         AND NOT IncludeHeader AND NOT RecalculateLines THEN
           IF FromPurchHeader.Status = FromPurchHeader.Status::Released THEN BEGIN
             ReleasePurchaseDocument.RUN(ToPurchHeader);
             ReleasePurchaseDocument.Reopen(ToPurchHeader);
           END;


      CASE TRUE OF
        MissingExCostRevLink AND (LinesNotCopied <> 0): MESSAGE(Text019 + Text020 + Text004);
        MissingExCostRevLink: MESSAGE(Text019);
        LinesNotCopied <> 0: MESSAGE(Text004);
      END;
    END;

    PROCEDURE ShowSalesDoc@15(ToSalesHeader@1000 : Record 36);
    BEGIN
      WITH ToSalesHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            FORM.RUN(FORM::"Sales Order",ToSalesHeader);
          "Document Type"::Invoice:
            FORM.RUN(FORM::"Sales Invoice",ToSalesHeader);
          "Document Type"::"Return Order":
            FORM.RUN(FORM::"Sales Return Order",ToSalesHeader);
          "Document Type"::"Credit Memo":
            FORM.RUN(FORM::"Sales Credit Memo",ToSalesHeader);
        END;
      END;
    END;

    PROCEDURE ShowPurchDoc@24(ToPurchHeader@1000 : Record 38);
    BEGIN
      WITH ToPurchHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            FORM.RUN(FORM::"Purchase Order",ToPurchHeader);
          "Document Type"::Invoice:
            FORM.RUN(FORM::"Purchase Invoice",ToPurchHeader);
          "Document Type"::"Return Order":
            FORM.RUN(FORM::"Purchase Return Order",ToPurchHeader);
          "Document Type"::"Credit Memo":
            FORM.RUN(FORM::"Purchase Credit Memo",ToPurchHeader);
        END;
      END;
    END;

    PROCEDURE CopyFromSalesToPurchDoc@23(VendorNo@1004 : Code[20];FromSalesHeader@1000 : Record 36;VAR ToPurchHeader@1001 : Record 38);
    VAR
      FromSalesLine@1003 : Record 37;
      ToPurchLine@1002 : Record 39;
      NextLineNo@1005 : Integer;
    BEGIN
      IF VendorNo = '' THEN
        ERROR(Text011);

      WITH ToPurchLine DO BEGIN
        LOCKTABLE;
        ToPurchHeader.INSERT(TRUE);
        ToPurchHeader.VALIDATE("Buy-from Vendor No.",VendorNo);
        ToPurchHeader.MODIFY(TRUE);
        FromSalesLine.SETRANGE("Document Type",FromSalesHeader."Document Type");
        FromSalesLine.SETRANGE("Document No.",FromSalesHeader."No.");
        IF NOT FromSalesLine.FIND('-') THEN
          ERROR(Text012);
        REPEAT
          NextLineNo := NextLineNo + 10000;
          CLEAR(ToPurchLine);
          INIT;
          "Document Type" := ToPurchHeader."Document Type";
          "Document No." := ToPurchHeader."No.";
          IF FromSalesLine.Type = FromSalesLine.Type::" " THEN
            Description := FromSalesLine.Description
          ELSE
            TransfldsFromSalesToPurchLine(FromSalesLine,ToPurchLine);
          "Line No." := NextLineNo;
          INSERT(TRUE);
        UNTIL FromSalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE TransfldsFromSalesToPurchLine@3(VAR FromSalesLine@1000 : Record 37;VAR ToPurchLine@1001 : Record 39);
    BEGIN
      WITH ToPurchLine DO BEGIN
        VALIDATE(Type,FromSalesLine.Type);
        VALIDATE("No.",FromSalesLine."No.");
        VALIDATE("Variant Code",FromSalesLine."Variant Code");
        VALIDATE("Location Code",FromSalesLine."Location Code");
        VALIDATE("Unit of Measure Code",FromSalesLine."Unit of Measure Code");
        IF (Type = Type::Item) AND ("No." <> '') THEN
          UpdateUOMQtyPerStockQty;
        "Expected Receipt Date" := FromSalesLine."Shipment Date";
        "Bin Code" := FromSalesLine."Bin Code";
        VALIDATE(Quantity,FromSalesLine."Outstanding Quantity");
        VALIDATE("Return Reason Code",FromSalesLine."Return Reason Code");
        VALIDATE("Direct Unit Cost");
      END;
    END;

    LOCAL PROCEDURE DeleteSalesLinesWithNegQty@12(FromSalesHeader@1001 : Record 36;OnlyTest@1002 : Boolean);
    VAR
      FromSalesLine@1000 : Record 37;
    BEGIN
      WITH FromSalesLine DO BEGIN
        SETRANGE("Document Type",FromSalesHeader."Document Type");
        SETRANGE("Document No.",FromSalesHeader."No.");
        SETFILTER(Quantity,'<0');
        IF OnlyTest THEN BEGIN
          IF NOT FIND('-') THEN
            ERROR(Text008);
          REPEAT
            TESTFIELD("Shipment No.",'');
            TESTFIELD("Return Receipt No.",'');
            TESTFIELD("Quantity Shipped",0);
            TESTFIELD("Quantity Invoiced",0);
          UNTIL NEXT = 0;
        END ELSE
          DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE DeletePurchLinesWithNegQty@30(FromPurchHeader@1001 : Record 38;OnlyTest@1002 : Boolean);
    VAR
      FromPurchLine@1000 : Record 39;
    BEGIN
      WITH FromPurchLine DO BEGIN
        SETRANGE("Document Type",FromPurchHeader."Document Type");
        SETRANGE("Document No.",FromPurchHeader."No.");
        SETFILTER(Quantity,'<0');
        IF OnlyTest THEN BEGIN
          IF NOT FIND('-') THEN
            ERROR(Text010);
          REPEAT
            TESTFIELD("Receipt No.",'');
            TESTFIELD("Return Shipment No.",'');
            TESTFIELD("Quantity Received",0);
            TESTFIELD("Quantity Invoiced",0);
          UNTIL NEXT = 0;
        END ELSE
          DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE CopySalesLine@7(VAR ToSalesHeader@1004 : Record 36;VAR ToSalesLine@1001 : Record 37;VAR FromSalesHeader@1005 : Record 36;VAR FromSalesLine@1002 : Record 37;VAR NextLineNo@1003 : Integer;VAR LinesNotCopied@1006 : Integer;RecalculateAmount@1008 : Boolean) : Boolean;
    VAR
      GLAcc@1007 : Record 15;
      ToSalesLine2@1009 : Record 37;
      CopyThisLine@1000 : Boolean;
    BEGIN
      CopyThisLine := TRUE;
      IF ((ToSalesHeader."Language Code" <> FromSalesHeader."Language Code") OR RecalculateLines) AND
         (FromSalesLine."Attached to Line No." <> 0) OR
         FromSalesLine."Prepayment Line"
      THEN
        EXIT(FALSE);
      ToSalesLine.SetSalesHeader(ToSalesHeader);
      IF RecalculateLines AND NOT FromSalesLine."System-Created Entry" THEN
        ToSalesLine.INIT
      ELSE
        ToSalesLine := FromSalesLine;
      NextLineNo := NextLineNo + 10000;
      ToSalesLine."Document Type" := ToSalesHeader."Document Type";
      ToSalesLine."Document No." := ToSalesHeader."No.";
      ToSalesLine."Line No." := NextLineNo;
      ToSalesLine.VALIDATE("Currency Code",FromSalesHeader."Currency Code");
      IF RecalculateLines AND NOT FromSalesLine."System-Created Entry" THEN BEGIN
        ToSalesLine.VALIDATE(Type,FromSalesLine.Type);
        ToSalesLine.VALIDATE(Description,FromSalesLine.Description);
        ToSalesLine.VALIDATE("Description 2",FromSalesLine."Description 2");
        IF (FromSalesLine.Type <> 0) AND (FromSalesLine."No." <> '') THEN BEGIN
          IF ToSalesLine.Type = ToSalesLine.Type::"G/L Account" THEN BEGIN
            ToSalesLine."No." := FromSalesLine."No.";
            IF GLAcc."No." <> FromSalesLine."No." THEN
              GLAcc.GET(FromSalesLine."No.");
            CopyThisLine := GLAcc."Direct Posting";
            IF CopyThisLine THEN
              ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
          END ELSE
            ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
          ToSalesLine.VALIDATE("Variant Code",FromSalesLine."Variant Code");
          ToSalesLine.VALIDATE("Location Code",FromSalesLine."Location Code");
          ToSalesLine.VALIDATE("Unit of Measure",FromSalesLine."Unit of Measure");
          ToSalesLine.VALIDATE("Unit of Measure Code",FromSalesLine."Unit of Measure Code");
          ToSalesLine.VALIDATE(Quantity,FromSalesLine.Quantity);
          IF NOT (FromSalesLine.Type IN [FromSalesLine.Type::Item,FromSalesLine.Type::Resource]) THEN BEGIN
            IF (FromSalesHeader."Currency Code" <> ToSalesHeader."Currency Code") OR
               (FromSalesHeader."Prices Including VAT" <> ToSalesHeader."Prices Including VAT")
            THEN BEGIN
              ToSalesLine."Unit Price" := 0;
              ToSalesLine."Line Discount %" := 0;
            END ELSE BEGIN
              ToSalesLine.VALIDATE("Unit Price",FromSalesLine."Unit Price");
              ToSalesLine.VALIDATE("Line Discount %",FromSalesLine."Line Discount %");
            END;
            IF ToSalesLine.Quantity <> 0 THEN
              ToSalesLine.VALIDATE("Line Discount Amount",FromSalesLine."Line Discount Amount");
          END;
          ToSalesLine.VALIDATE("Work Type Code",FromSalesLine."Work Type Code");
          IF (ToSalesLine."Document Type" = ToSalesLine."Document Type"::Order) AND
             (FromSalesLine."Purchasing Code" <> '')
          THEN
            ToSalesLine.VALIDATE("Purchasing Code",FromSalesLine."Purchasing Code");
        END;
        IF (FromSalesLine.Type = FromSalesLine.Type::" ") AND (FromSalesLine."No." <> '') THEN
          ToSalesLine.VALIDATE("No.",FromSalesLine."No.");
      END ELSE BEGIN
        IF ToSalesLine."Document Type" <> ToSalesLine."Document Type"::Order THEN BEGIN
          ToSalesLine."Prepayment %" := 0;
          ToSalesLine."Prepayment VAT %" := 0;
          ToSalesLine."Prepayment EC %" := 0;
          ToSalesLine."Prepmt. VAT Calc. Type" := 0;
          ToSalesLine."Prepayment VAT Identifier" := '';
          ToSalesLine."Prepayment VAT %" := 0;
          ToSalesLine."Prepayment Tax Group Code" := '';
          ToSalesLine."Prepmt. Line Amount" := 0;
          ToSalesLine."Prepmt. Amt. Incl. VAT" := 0;
        END;
        ToSalesLine."Prepmt. Amt. Inv." := 0;
        ToSalesLine."Prepayment Amount"  := 0;
        ToSalesLine."Prepmt. VAT Base Amt." := 0;
        ToSalesLine."Prepmt Amt to Deduct" := 0;
        ToSalesLine."Prepmt Amt Deducted" := 0;
        ToSalesLine."Prepmt. Amount Inv. Incl. VAT" := 0;
        ToSalesLine."Prepayment VAT Difference" := 0;
        ToSalesLine."Prepmt VAT Diff. to Deduct" := 0;
        ToSalesLine."Prepmt VAT Diff. Deducted" := 0;
        ToSalesLine."Quantity Shipped" := 0;
        ToSalesLine."Qty. Shipped (Base)" := 0;
        ToSalesLine."Return Qty. Received" := 0;
        ToSalesLine."Return Qty. Received (Base)" := 0;
        ToSalesLine."Quantity Invoiced" := 0;
        ToSalesLine."Qty. Invoiced (Base)" := 0;
        ToSalesLine."Reserved Quantity" := 0;
        ToSalesLine."Reserved Qty. (Base)" := 0;
        ToSalesLine."Qty. to Ship" := 0;
        ToSalesLine."Qty. to Ship (Base)" := 0;
        ToSalesLine."Return Qty. to Receive" := 0;
        ToSalesLine."Return Qty. to Receive (Base)" := 0;
        ToSalesLine."Qty. to Invoice" := 0;
        ToSalesLine."Qty. to Invoice (Base)" := 0;
        ToSalesLine."Qty. Shipped Not Invoiced" := 0;
        ToSalesLine."Return Qty. Rcd. Not Invd." := 0;
        ToSalesLine."Shipped Not Invoiced" := 0;
        ToSalesLine."Return Rcd. Not Invd." := 0;
        ToSalesLine."Qty. Shipped Not Invd. (Base)" := 0;
        ToSalesLine."Ret. Qty. Rcd. Not Invd.(Base)" := 0;
        ToSalesLine."Shipped Not Invoiced (LCY)" := 0;
        ToSalesLine."Return Rcd. Not Invd. (LCY)" := 0;
        ToSalesLine."Job No." := '';
        ToSalesLine."Job Task No." := '';
        ToSalesLine."Job Contract Entry No." := 0;

        ToSalesLine.InitOutstanding;
        IF ToSalesLine."Document Type" IN
           [ToSalesLine."Document Type"::"Return Order",ToSalesLine."Document Type"::"Credit Memo"]
        THEN
          ToSalesLine.InitQtyToReceive
        ELSE
          ToSalesLine.InitQtyToShip;
        ToSalesLine."VAT Difference" := FromSalesLine."VAT Difference";
        IF NOT CreateToHeader THEN
          ToSalesLine."Shipment Date" := ToSalesHeader."Shipment Date";
        ToSalesLine."Appl.-from Item Entry" := 0;
        ToSalesLine."Appl.-to Item Entry" := 0;

        ToSalesLine."Purchase Order No." := '';
        ToSalesLine."Purch. Order Line No." := 0;
        ToSalesLine."Special Order Purchase No." := '';
        ToSalesLine."Special Order Purch. Line No." := 0;
        IF ToSalesLine."Document Type" <> ToSalesLine."Document Type"::Order THEN BEGIN
          ToSalesLine."Drop Shipment" := FALSE;
          ToSalesLine."Special Order" := FALSE;
        END;
        IF RecalculateAmount AND (FromSalesLine."Appl.-from Item Entry" = 0) THEN BEGIN
          ToSalesLine.VALIDATE("Line Discount %",FromSalesLine."Line Discount %");
          ToSalesLine.VALIDATE(
            "Inv. Discount Amount",
            ROUND(FromSalesLine."Inv. Discount Amount",Currency."Amount Rounding Precision"));
          ToSalesLine.VALIDATE("Unit Cost (LCY)",FromSalesLine."Unit Cost (LCY)");
        END;

        ToSalesLine.UpdateWithWarehouseShip;
        IF (ToSalesLine.Type = ToSalesLine.Type::Item) AND (ToSalesLine."No." <> '') THEN BEGIN
          GetItem(ToSalesLine."No.");
          IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT ToSalesLine.IsShipment THEN
            ToSalesLine.GetUnitCost;

          IF Item.Reserve = Item.Reserve::Optional THEN
            ToSalesLine.Reserve := ToSalesHeader.Reserve
          ELSE
            ToSalesLine.Reserve := Item.Reserve;
          IF ToSalesLine.Reserve = ToSalesLine.Reserve::Always THEN
            IF ToSalesHeader."Shipment Date" <> 0D THEN
              ToSalesLine."Shipment Date" := ToSalesHeader."Shipment Date"
            ELSE
              ToSalesLine."Shipment Date" := WORKDATE;
        END;

      END;

      IF ExactCostRevMandatory AND
         (FromSalesLine.Type = FromSalesLine.Type::Item) AND
         (FromSalesLine."Appl.-from Item Entry" <> 0) AND
         NOT MoveNegLines
      THEN BEGIN
        IF RecalculateAmount THEN BEGIN
          ToSalesLine.VALIDATE("Unit Price",FromSalesLine."Unit Price");
          ToSalesLine.VALIDATE(
            "Line Discount Amount",
            ROUND(FromSalesLine."Line Discount Amount",Currency."Amount Rounding Precision"));
          ToSalesLine.VALIDATE(
            "Inv. Discount Amount",
            ROUND(FromSalesLine."Inv. Discount Amount",Currency."Amount Rounding Precision"));
        END;
        ToSalesLine.VALIDATE("Appl.-from Item Entry",FromSalesLine."Appl.-from Item Entry");
        IF NOT CreateToHeader THEN
          IF ToSalesLine."Shipment Date" = 0D THEN BEGIN
            IF ToSalesHeader."Shipment Date" <> 0D THEN
              ToSalesLine."Shipment Date" := ToSalesHeader."Shipment Date"
            ELSE
              ToSalesLine."Shipment Date" := WORKDATE;
          END;
      END;

      IF MoveNegLines AND (ToSalesLine.Type <> ToSalesLine.Type::" ") THEN BEGIN
        ToSalesLine.VALIDATE(Quantity,-FromSalesLine.Quantity);
        ToSalesLine.VALIDATE("Line Discount %", FromSalesLine."Line Discount %");
        ToSalesLine."Appl.-to Item Entry" := FromSalesLine."Appl.-to Item Entry";
        ToSalesLine."Appl.-from Item Entry" := FromSalesLine."Appl.-from Item Entry";
      END;

      IF (ToSalesHeader."Language Code" <> FromSalesHeader."Language Code") OR RecalculateLines THEN BEGIN
        IF TransferExtendedText.SalesCheckIfAnyExtText(ToSalesLine,FALSE) THEN BEGIN
          TransferExtendedText.InsertSalesExtText(ToSalesLine);
          ToSalesLine2.SETRANGE("Document Type",ToSalesLine."Document Type");
          ToSalesLine2.SETRANGE("Document No.",ToSalesLine."Document No.");
          ToSalesLine2.FIND('+');
          NextLineNo := ToSalesLine2."Line No.";
        END;
      END ELSE
        ToSalesLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            FromSalesLine."Line No.",
            NextLineNo,
            FromSalesLine."Attached to Line No.");

      IF CopyThisLine THEN BEGIN
        ToSalesLine.INSERT;
        IF ToSalesLine.Reserve = ToSalesLine.Reserve::Always THEN
          ToSalesLine.AutoReserve;
      END ELSE
        LinesNotCopied := LinesNotCopied + 1;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CopyPurchLine@20(VAR ToPurchHeader@1011 : Record 38;VAR ToPurchLine@1001 : Record 39;VAR FromPurchHeader@1012 : Record 38;VAR FromPurchLine@1003 : Record 39;VAR NextLineNo@1006 : Integer;VAR LinesNotCopied@1005 : Integer;RecalculateAmount@1004 : Boolean) : Boolean;
    VAR
      GLAcc@1002 : Record 15;
      ToPurchLine2@1007 : Record 39;
      CopyThisLine@1000 : Boolean;
    BEGIN
      CopyThisLine := TRUE;
      IF ((ToPurchHeader."Language Code" <> FromPurchHeader."Language Code") OR RecalculateLines) AND
         (FromPurchLine."Attached to Line No." <> 0) OR
         FromPurchLine."Prepayment Line"
      THEN
        EXIT(FALSE);

      IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN
        ToPurchLine.INIT
      ELSE
        ToPurchLine := FromPurchLine;
      NextLineNo := NextLineNo + 10000;
      ToPurchLine."Document Type" := ToPurchHeader."Document Type";
      ToPurchLine."Document No." := ToPurchHeader."No.";
      ToPurchLine."Line No." := NextLineNo;
      ToPurchLine.VALIDATE("Currency Code",FromPurchHeader."Currency Code");

      IF RecalculateLines AND NOT FromPurchLine."System-Created Entry" THEN BEGIN
        ToPurchLine.VALIDATE(Type,FromPurchLine.Type);
        ToPurchLine.VALIDATE(Description,FromPurchLine.Description);
        ToPurchLine.VALIDATE("Description 2",FromPurchLine."Description 2");
        IF (FromPurchLine.Type <> 0) AND (FromPurchLine."No." <> '') THEN BEGIN
          IF ToPurchLine.Type = ToPurchLine.Type::"G/L Account" THEN BEGIN
            ToPurchLine."No." := FromPurchLine."No.";
            IF GLAcc."No." <> FromPurchLine."No." THEN
              GLAcc.GET(FromPurchLine."No.");
            CopyThisLine := GLAcc."Direct Posting";
            IF CopyThisLine THEN
              ToPurchLine.VALIDATE("No.",FromPurchLine."No.");
          END ELSE
            ToPurchLine.VALIDATE("No.",FromPurchLine."No.");
          ToPurchLine.VALIDATE("Variant Code",FromPurchLine."Variant Code");
          ToPurchLine.VALIDATE("Location Code",FromPurchLine."Location Code");
          ToPurchLine.VALIDATE("Unit of Measure",FromPurchLine."Unit of Measure");
          ToPurchLine.VALIDATE("Unit of Measure Code",FromPurchLine."Unit of Measure Code");
          ToPurchLine.VALIDATE(Quantity,FromPurchLine.Quantity);
          IF FromPurchLine.Type <> FromPurchLine.Type::Item THEN BEGIN
            FromPurchHeader.TESTFIELD("Currency Code",ToPurchHeader."Currency Code");
            ToPurchLine.VALIDATE("Direct Unit Cost",FromPurchLine."Direct Unit Cost");
            ToPurchLine.VALIDATE("Line Discount %",FromPurchLine."Line Discount %");
            IF ToPurchLine.Quantity <> 0 THEN
              ToPurchLine.VALIDATE("Line Discount Amount",FromPurchLine."Line Discount Amount");
          END;
          IF (ToPurchLine."Document Type" = ToPurchLine."Document Type"::Order) AND
             (FromPurchLine."Purchasing Code" <> '') AND NOT FromPurchLine."Drop Shipment" AND
             NOT FromPurchLine."Special Order"
          THEN
            ToPurchLine.VALIDATE("Purchasing Code",FromPurchLine."Purchasing Code");
        END;
        IF (FromPurchLine.Type = FromPurchLine.Type::" ") AND (FromPurchLine."No." <> '') THEN
          ToPurchLine.VALIDATE("No.",FromPurchLine."No.");
      END ELSE BEGIN
        IF ToPurchLine."Document Type" <> ToPurchLine."Document Type"::Order THEN BEGIN
          ToPurchLine."Prepayment %" := 0;
          ToPurchLine."Prepayment VAT %" := 0;
          ToPurchLine."Prepayment EC %" := 0;
          ToPurchLine."Prepmt. VAT Calc. Type" := 0;
          ToPurchLine."Prepayment VAT Identifier" := '';
          ToPurchLine."Prepayment VAT %" := 0;
          ToPurchLine."Prepayment Tax Group Code" := '';
          ToPurchLine."Prepmt. Line Amount" := 0;
          ToPurchLine."Prepmt. Amt. Incl. VAT" := 0;
        END;
        ToPurchLine."Prepmt. Amt. Inv." := 0;
        ToPurchLine."Prepayment Amount"  := 0;
        ToPurchLine."Prepmt. VAT Base Amt." := 0;
        ToPurchLine."Prepmt Amt to Deduct" := 0;
        ToPurchLine."Prepmt Amt Deducted" := 0;
        ToPurchLine."Prepmt. Amount Inv. Incl. VAT" := 0;
        ToPurchLine."Prepayment VAT Difference" := 0;
        ToPurchLine."Prepmt VAT Diff. to Deduct" := 0;
        ToPurchLine."Prepmt VAT Diff. Deducted" := 0;
        ToPurchLine."Quantity Received" := 0;
        ToPurchLine."Qty. Received (Base)" := 0;
        ToPurchLine."Return Qty. Shipped" := 0;
        ToPurchLine."Return Qty. Shipped (Base)" := 0;
        ToPurchLine."Quantity Invoiced" := 0;
        ToPurchLine."Qty. Invoiced (Base)" := 0;
        ToPurchLine."Reserved Quantity" := 0;
        ToPurchLine."Reserved Qty. (Base)" := 0;
        ToPurchLine."Qty. Rcd. Not Invoiced" := 0;
        ToPurchLine."Qty. Rcd. Not Invoiced (Base)" := 0;
        ToPurchLine."Return Qty. Shipped Not Invd." := 0;
        ToPurchLine."Ret. Qty. Shpd Not Invd.(Base)" := 0;
        ToPurchLine."Qty. to Receive" := 0;
        ToPurchLine."Qty. to Receive (Base)" := 0;
        ToPurchLine."Return Qty. to Ship" := 0;
        ToPurchLine."Return Qty. to Ship (Base)" := 0;
        ToPurchLine."Qty. to Invoice" := 0;
        ToPurchLine."Qty. to Invoice (Base)" := 0;
        ToPurchLine."Amt. Rcd. Not Invoiced" := 0;
        ToPurchLine."Amt. Rcd. Not Invoiced (LCY)" := 0;
        ToPurchLine."Return Shpd. Not Invd." := 0;
        ToPurchLine."Return Shpd. Not Invd. (LCY)" := 0;

        ToPurchLine.InitOutstanding;
        IF ToPurchLine."Document Type" IN
           [ToPurchLine."Document Type"::"Return Order",ToPurchLine."Document Type"::"Credit Memo"]
        THEN
          ToPurchLine.InitQtyToShip
        ELSE
          ToPurchLine.InitQtyToReceive;
        ToPurchLine."VAT Difference" := FromPurchLine."VAT Difference";
        ToPurchLine."Receipt No." := '';
        ToPurchLine."Receipt Line No." := 0;
        IF NOT CreateToHeader THEN
          ToPurchLine."Expected Receipt Date" := ToPurchHeader."Expected Receipt Date";
        ToPurchLine."Appl.-to Item Entry" := 0;

        ToPurchLine."Sales Order No." := '';
        ToPurchLine."Sales Order Line No." := 0;
        ToPurchLine."Special Order Sales No." := '';
        ToPurchLine."Special Order Sales Line No." := 0;
        IF FromPurchLine."Drop Shipment" OR FromPurchLine."Special Order" THEN
          ToPurchLine."Purchasing Code" := '';
        ToPurchLine."Drop Shipment" := FALSE;
        ToPurchLine."Special Order" := FALSE;

        IF RecalculateAmount THEN BEGIN
          ToPurchLine.VALIDATE("Line Discount %",FromPurchLine."Line Discount %");
          ToPurchLine.VALIDATE(
            "Inv. Discount Amount",
            ROUND(FromPurchLine."Inv. Discount Amount",Currency."Amount Rounding Precision"));
        END;

        ToPurchLine.UpdateWithWarehouseReceive;
        ToPurchLine."Pay-to Vendor No." := ToPurchHeader."Pay-to Vendor No.";
      END;

      IF ExactCostRevMandatory AND
         (FromPurchLine.Type = FromPurchLine.Type::Item) AND
         (FromPurchLine."Appl.-to Item Entry" <> 0) AND
         NOT MoveNegLines
      THEN BEGIN
        IF RecalculateAmount THEN BEGIN
          ToPurchLine.VALIDATE("Direct Unit Cost",FromPurchLine."Direct Unit Cost");
          ToPurchLine.VALIDATE(
            "Line Discount Amount",
            ROUND(FromPurchLine."Line Discount Amount",Currency."Amount Rounding Precision"));
          ToPurchLine.VALIDATE(
            "Inv. Discount Amount",
            ROUND(FromPurchLine."Inv. Discount Amount",Currency."Amount Rounding Precision"));
        END;
        ToPurchLine.VALIDATE("Appl.-to Item Entry",FromPurchLine."Appl.-to Item Entry");
        IF NOT CreateToHeader THEN
          IF ToPurchLine."Expected Receipt Date" = 0D THEN BEGIN
            IF ToPurchHeader."Expected Receipt Date" <> 0D THEN
              ToPurchLine."Expected Receipt Date" := ToPurchHeader."Expected Receipt Date"
            ELSE
              ToPurchLine."Expected Receipt Date" := WORKDATE;
          END;
      END;

      IF MoveNegLines AND (ToPurchLine.Type <> ToPurchLine.Type::" ") THEN BEGIN
        ToPurchLine.VALIDATE(Quantity,-FromPurchLine.Quantity);
        ToPurchLine."Appl.-to Item Entry" := FromPurchLine."Appl.-to Item Entry"
      END;

      IF (ToPurchHeader."Language Code" <> FromPurchHeader."Language Code") OR RecalculateLines THEN BEGIN
        IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN BEGIN
          TransferExtendedText.InsertPurchExtText(ToPurchLine);
          ToPurchLine2.SETRANGE("Document Type",ToPurchLine."Document Type");
          ToPurchLine2.SETRANGE("Document No.",ToPurchLine."Document No.");
          ToPurchLine2.FIND('+');
          NextLineNo := ToPurchLine2."Line No.";
        END;
      END ELSE
        ToPurchLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            FromPurchLine."Line No.",
            NextLineNo,
            FromPurchLine."Attached to Line No.");

      IF CopyThisLine THEN
        ToPurchLine.INSERT
      ELSE
        LinesNotCopied := LinesNotCopied + 1;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CopyFromSalesDocDimToHeader@9(VAR ToSalesHeader@1002 : Record 36;VAR FromSalesHeader@1003 : Record 36);
    VAR
      DocDim@1001 : Record 357;
      FromDocDim@1000 : Record 357;
    BEGIN
      DocDim.SETRANGE("Table ID",DATABASE::"Sales Header");
      DocDim.SETRANGE("Document Type",ToSalesHeader."Document Type");
      DocDim.SETRANGE("Document No.",ToSalesHeader."No.");
      DocDim.SETRANGE("Line No.",0);
      DocDim.DELETEALL;
      ToSalesHeader."Shortcut Dimension 1 Code" := FromSalesHeader."Shortcut Dimension 1 Code";
      ToSalesHeader."Shortcut Dimension 2 Code" := FromSalesHeader."Shortcut Dimension 2 Code";
      FromDocDim.SETRANGE("Table ID",DATABASE::"Sales Header");
      FromDocDim.SETRANGE("Document Type",FromSalesHeader."Document Type");
      FromDocDim.SETRANGE("Document No.",FromSalesHeader."No.");
      IF FromDocDim.FIND('-') THEN BEGIN
        REPEAT
          DocDim.INIT;
          DocDim."Table ID" := DATABASE::"Sales Header";
          DocDim."Document Type" := ToSalesHeader."Document Type";
          DocDim."Document No." := ToSalesHeader."No.";
          DocDim."Line No." := 0;
          DocDim."Dimension Code" := FromDocDim."Dimension Code";
          DocDim."Dimension Value Code" := FromDocDim."Dimension Value Code";
          DocDim.INSERT;
        UNTIL FromDocDim.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyFromPurchDocDimToHeader@18(VAR ToPurchHeader@1002 : Record 38;VAR FromPurchHeader@1004 : Record 38);
    VAR
      DocDim@1001 : Record 357;
      FromDocDim@1000 : Record 357;
    BEGIN
      DocDim.SETRANGE("Table ID",DATABASE::"Purchase Header");
      DocDim.SETRANGE("Document Type",ToPurchHeader."Document Type");
      DocDim.SETRANGE("Document No.",ToPurchHeader."No.");
      DocDim.SETRANGE("Line No.",0);
      DocDim.DELETEALL;
      ToPurchHeader."Shortcut Dimension 1 Code" := FromPurchHeader."Shortcut Dimension 1 Code";
      ToPurchHeader."Shortcut Dimension 2 Code" := FromPurchHeader."Shortcut Dimension 2 Code";
      FromDocDim.SETRANGE("Table ID",DATABASE::"Purchase Header");
      FromDocDim.SETRANGE("Document Type",FromPurchHeader."Document Type");
      FromDocDim.SETRANGE("Document No.",FromPurchHeader."No.");
      IF FromDocDim.FIND('-') THEN BEGIN
        REPEAT
          DocDim.INIT;
          DocDim."Table ID" := DATABASE::"Purchase Header";
          DocDim."Document Type" := ToPurchHeader."Document Type";
          DocDim."Document No." := ToPurchHeader."No.";
          DocDim."Line No." := 0;
          DocDim."Dimension Code" := FromDocDim."Dimension Code";
          DocDim."Dimension Value Code" := FromDocDim."Dimension Value Code";
          DocDim.INSERT;
        UNTIL FromDocDim.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyFromPstdSalesDocDimToHdr@8(VAR ToSalesHeader@1002 : Record 36;FromDocType@1004 : Option;VAR FromSalesShptHeader@1003 : Record 110;VAR FromSalesInvHeader@1009 : Record 112;VAR FromReturnRcptHeader@1007 : Record 6660;VAR FromSalesCrMemoHeader@1005 : Record 114);
    VAR
      DocDim@1001 : Record 357;
      FromPostedDocDim@1000 : Record 359;
    BEGIN
      DocDim.SETRANGE("Table ID",DATABASE::"Sales Header");
      DocDim.SETRANGE("Document Type",ToSalesHeader."Document Type");
      DocDim.SETRANGE("Document No.",ToSalesHeader."No.");
      DocDim.SETRANGE("Line No.",0);
      DocDim.DELETEALL;
      CASE FromDocType OF
        SalesDocType::"Posted Shipment":
          BEGIN
            ToSalesHeader."Shortcut Dimension 1 Code" := FromSalesShptHeader."Shortcut Dimension 1 Code";
            ToSalesHeader."Shortcut Dimension 2 Code" := FromSalesShptHeader."Shortcut Dimension 2 Code";
            FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Sales Shipment Header");
            FromPostedDocDim.SETRANGE("Document No.",FromSalesShptHeader."No.");
          END;
        SalesDocType::"Posted Invoice":
          BEGIN
            ToSalesHeader."Shortcut Dimension 1 Code" := FromSalesInvHeader."Shortcut Dimension 1 Code";
            ToSalesHeader."Shortcut Dimension 2 Code" := FromSalesInvHeader."Shortcut Dimension 2 Code";
            FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Sales Invoice Header");
            FromPostedDocDim.SETRANGE("Document No.",FromSalesInvHeader."No.");
          END;
        SalesDocType::"Posted Return Receipt":
          BEGIN
            ToSalesHeader."Shortcut Dimension 1 Code" := FromReturnRcptHeader."Shortcut Dimension 1 Code";
            ToSalesHeader."Shortcut Dimension 2 Code" := FromReturnRcptHeader."Shortcut Dimension 2 Code";
            FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Return Receipt Header");
            FromPostedDocDim.SETRANGE("Document No.",FromReturnRcptHeader."No.");
          END;
        SalesDocType::"Posted Credit Memo":
          BEGIN
            ToSalesHeader."Shortcut Dimension 1 Code" := FromSalesCrMemoHeader."Shortcut Dimension 1 Code";
            ToSalesHeader."Shortcut Dimension 2 Code" := FromSalesCrMemoHeader."Shortcut Dimension 2 Code";
            FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Sales Cr.Memo Header");
            FromPostedDocDim.SETRANGE("Document No.",FromSalesCrMemoHeader."No.");
          END;
      END;
      IF FromPostedDocDim.FIND('-') THEN BEGIN
        REPEAT
          DocDim.INIT;
          DocDim."Table ID" := DATABASE::"Sales Header";
          DocDim."Document Type" := ToSalesHeader."Document Type";
          DocDim."Document No." := ToSalesHeader."No.";
          DocDim."Line No." := 0;
          DocDim."Dimension Code" := FromPostedDocDim."Dimension Code";
          DocDim."Dimension Value Code" := FromPostedDocDim."Dimension Value Code";
          DocDim.INSERT;
        UNTIL FromPostedDocDim.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyFromPstdPurchDocDimToHdr@17(VAR ToPurchHeader@1011 : Record 38;FromDocType@1003 : Option;VAR FromPurchRcptHeader@1009 : Record 120;VAR FromPurchInvHeader@1007 : Record 122;VAR FromReturnShptHeader@1000 : Record 6650;VAR FromPurchCrMemoHeader@1005 : Record 124);
    VAR
      DocDim@1002 : Record 357;
      FromPostedDocDim@1001 : Record 359;
    BEGIN
      DocDim.SETRANGE("Table ID",DATABASE::"Purchase Header");
      DocDim.SETRANGE("Document Type",ToPurchHeader."Document Type");
      DocDim.SETRANGE("Document No.",ToPurchHeader."No.");
      DocDim.SETRANGE("Line No.",0);
      DocDim.DELETEALL;
      CASE FromDocType OF
        PurchDocType::"Posted Receipt":
          BEGIN
            ToPurchHeader."Shortcut Dimension 1 Code" := FromPurchRcptHeader."Shortcut Dimension 1 Code";
            ToPurchHeader."Shortcut Dimension 2 Code" := FromPurchRcptHeader."Shortcut Dimension 2 Code";
            FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Purch. Rcpt. Header");
            FromPostedDocDim.SETRANGE("Document No.",FromPurchRcptHeader."No.");
          END;
        PurchDocType::"Posted Invoice":
          BEGIN
            ToPurchHeader."Shortcut Dimension 1 Code" := FromPurchInvHeader."Shortcut Dimension 1 Code";
            ToPurchHeader."Shortcut Dimension 2 Code" := FromPurchInvHeader."Shortcut Dimension 2 Code";
            FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Purch. Inv. Header");
            FromPostedDocDim.SETRANGE("Document No.",FromPurchInvHeader."No.");
          END;
        PurchDocType::"Posted Return Shipment":
          BEGIN
            ToPurchHeader."Shortcut Dimension 1 Code" := FromReturnShptHeader."Shortcut Dimension 1 Code";
            ToPurchHeader."Shortcut Dimension 2 Code" := FromReturnShptHeader."Shortcut Dimension 2 Code";
            FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Return Shipment Header");
            FromPostedDocDim.SETRANGE("Document No.",FromReturnShptHeader."No.");
          END;
        PurchDocType::"Posted Credit Memo":
          BEGIN
            ToPurchHeader."Shortcut Dimension 1 Code" := FromPurchCrMemoHeader."Shortcut Dimension 1 Code";
            ToPurchHeader."Shortcut Dimension 2 Code" := FromPurchCrMemoHeader."Shortcut Dimension 2 Code";
            FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
            FromPostedDocDim.SETRANGE("Document No.",FromPurchCrMemoHeader."No.");
          END;
      END;
      IF FromPostedDocDim.FIND('-') THEN BEGIN
        REPEAT
          DocDim.INIT;
          DocDim."Table ID" := DATABASE::"Purchase Header";
          DocDim."Document Type" := ToPurchHeader."Document Type";
          DocDim."Document No." := ToPurchHeader."No.";
          DocDim."Line No." := 0;
          DocDim."Dimension Code" := FromPostedDocDim."Dimension Code";
          DocDim."Dimension Value Code" := FromPostedDocDim."Dimension Value Code";
          DocDim.INSERT;
        UNTIL FromPostedDocDim.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyFromSalesDocDimToLine@6(VAR ToSalesLine@1002 : Record 37;VAR FromSalesLine@1003 : Record 37);
    VAR
      DocDim@1001 : Record 357;
      FromDocDim@1000 : Record 357;
    BEGIN
      IF NOT RecalculateLines THEN BEGIN
        DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
        DocDim.SETRANGE("Document Type",ToSalesLine."Document Type");
        DocDim.SETRANGE("Document No.",ToSalesLine."Document No.");
        DocDim.SETRANGE("Line No.",ToSalesLine."Line No.");
        DocDim.DELETEALL;
        ToSalesLine."Shortcut Dimension 1 Code" := FromSalesLine."Shortcut Dimension 1 Code";
        ToSalesLine."Shortcut Dimension 2 Code" := FromSalesLine."Shortcut Dimension 2 Code";
        FromDocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
        FromDocDim.SETRANGE("Document Type",FromSalesLine."Document Type");
        FromDocDim.SETRANGE("Document No.",FromSalesLine."Document No.");
        FromDocDim.SETRANGE("Line No.",FromSalesLine."Line No.");
        IF FromDocDim.FIND('-') THEN BEGIN
          REPEAT
            DocDim.INIT;
            DocDim."Table ID" := DATABASE::"Sales Line";
            DocDim."Document Type" := ToSalesLine."Document Type";
            DocDim."Document No." := ToSalesLine."Document No.";
            DocDim."Line No." := ToSalesLine."Line No.";
            DocDim."Dimension Code" := FromDocDim."Dimension Code";
            DocDim."Dimension Value Code" := FromDocDim."Dimension Value Code";
            DocDim.INSERT;
          UNTIL FromDocDim.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CopyFromPurchDocDimToLine@14(VAR ToPurchLine@1003 : Record 39;VAR FromPurchLine@1002 : Record 39);
    VAR
      DocDim@1001 : Record 357;
      FromDocDim@1000 : Record 357;
    BEGIN
      IF NOT RecalculateLines THEN BEGIN
        DocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
        DocDim.SETRANGE("Document Type",ToPurchLine."Document Type");
        DocDim.SETRANGE("Document No.",ToPurchLine."Document No.");
        DocDim.SETRANGE("Line No.",ToPurchLine."Line No.");
        DocDim.DELETEALL;
        ToPurchLine."Shortcut Dimension 1 Code" := FromPurchLine."Shortcut Dimension 1 Code";
        ToPurchLine."Shortcut Dimension 2 Code" := FromPurchLine."Shortcut Dimension 2 Code";
        FromDocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
        FromDocDim.SETRANGE("Document Type",FromPurchLine."Document Type");
        FromDocDim.SETRANGE("Document No.",FromPurchLine."Document No.");
        FromDocDim.SETRANGE("Line No.",FromPurchLine."Line No.");
        IF FromDocDim.FIND('-') THEN BEGIN
          REPEAT
            DocDim.INIT;
            DocDim."Table ID" := DATABASE::"Purchase Line";
            DocDim."Document Type" := ToPurchLine."Document Type";
            DocDim."Document No." := ToPurchLine."Document No.";
            DocDim."Line No." := ToPurchLine."Line No.";
            DocDim."Dimension Code" := FromDocDim."Dimension Code";
            DocDim."Dimension Value Code" := FromDocDim."Dimension Value Code";
            DocDim.INSERT;
          UNTIL FromDocDim.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CopyFromPstdSalesDocDimToLine@21(VAR ToSalesLine@1009 : Record 37;FromDocType@1004 : Option;VAR FromSalesShptLine@1007 : Record 111;VAR FromSalesInvLine@1005 : Record 113;VAR FromReturnRcptLine@1003 : Record 6661;VAR FromSalesCrMemoLine@1001 : Record 115);
    VAR
      DocDim@1002 : Record 357;
      FromPostedDocDim@1000 : Record 359;
    BEGIN
      IF NOT RecalculateLines THEN BEGIN
        DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
        DocDim.SETRANGE("Document Type",ToSalesLine."Document Type");
        DocDim.SETRANGE("Document No.",ToSalesLine."Document No.");
        DocDim.SETRANGE("Line No.",ToSalesLine."Line No.");
        DocDim.DELETEALL;
        CASE FromDocType OF
          SalesDocType::"Posted Shipment":
            BEGIN
              ToSalesLine."Shortcut Dimension 1 Code" := FromSalesShptLine."Shortcut Dimension 1 Code";
              ToSalesLine."Shortcut Dimension 2 Code" := FromSalesShptLine."Shortcut Dimension 2 Code";
              FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Sales Shipment Line");
              FromPostedDocDim.SETRANGE("Document No.",FromSalesShptLine."Document No.");
              FromPostedDocDim.SETRANGE("Line No.",FromSalesShptLine."Line No.");
            END;
          SalesDocType::"Posted Invoice":
            BEGIN
              ToSalesLine."Shortcut Dimension 1 Code" := FromSalesInvLine."Shortcut Dimension 1 Code";
              ToSalesLine."Shortcut Dimension 2 Code" := FromSalesInvLine."Shortcut Dimension 2 Code";
              FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Sales Invoice Line");
              FromPostedDocDim.SETRANGE("Document No.",FromSalesInvLine."Document No.");
              FromPostedDocDim.SETRANGE("Line No.",FromSalesInvLine."Line No.");
            END;
          SalesDocType::"Posted Return Receipt":
            BEGIN
              ToSalesLine."Shortcut Dimension 1 Code" := FromReturnRcptLine."Shortcut Dimension 1 Code";
              ToSalesLine."Shortcut Dimension 2 Code" := FromReturnRcptLine."Shortcut Dimension 2 Code";
              FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Return Receipt Line");
              FromPostedDocDim.SETRANGE("Document No.",FromReturnRcptLine."Document No.");
              FromPostedDocDim.SETRANGE("Line No.",FromReturnRcptLine."Line No.");
            END;
          SalesDocType::"Posted Credit Memo":
            BEGIN
              ToSalesLine."Shortcut Dimension 1 Code" := FromSalesCrMemoLine."Shortcut Dimension 1 Code";
              ToSalesLine."Shortcut Dimension 2 Code" := FromSalesCrMemoLine."Shortcut Dimension 2 Code";
              FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Sales Cr.Memo Line");
              FromPostedDocDim.SETRANGE("Document No.",FromSalesCrMemoLine."Document No.");
              FromPostedDocDim.SETRANGE("Line No.",FromSalesCrMemoLine."Line No.");
            END;
        END;
        IF FromPostedDocDim.FIND('-') THEN BEGIN
          REPEAT
            DocDim.INIT;
            DocDim."Table ID" := DATABASE::"Sales Line";
            DocDim."Document Type" := ToSalesLine."Document Type";
            DocDim."Document No." := ToSalesLine."Document No.";
            DocDim."Line No." := ToSalesLine."Line No.";
            DocDim."Dimension Code" := FromPostedDocDim."Dimension Code";
            DocDim."Dimension Value Code" := FromPostedDocDim."Dimension Value Code";
            DocDim.INSERT;
          UNTIL FromPostedDocDim.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CopyFromPstdPurchDocDimToLine@13(VAR ToPurchLine@1002 : Record 39;FromDocType@1004 : Option;VAR FromPurchRcptLine@1009 : Record 121;VAR FromPurchInvLine@1007 : Record 123;VAR FromReturnShptLine@1005 : Record 6651;VAR FromPurchCrMemoLine@1003 : Record 125);
    VAR
      DocDim@1001 : Record 357;
      FromPostedDocDim@1000 : Record 359;
    BEGIN
      IF NOT RecalculateLines THEN BEGIN
        DocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
        DocDim.SETRANGE("Document Type",ToPurchLine."Document Type");
        DocDim.SETRANGE("Document No.",ToPurchLine."Document No.");
        DocDim.SETRANGE("Line No.",ToPurchLine."Line No.");
        DocDim.DELETEALL;
        CASE FromDocType OF
          PurchDocType::"Posted Receipt":
            BEGIN
              ToPurchLine."Shortcut Dimension 1 Code" := FromPurchRcptLine."Shortcut Dimension 1 Code";
              ToPurchLine."Shortcut Dimension 2 Code" := FromPurchRcptLine."Shortcut Dimension 2 Code";
              FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Purch. Rcpt. Line");
              FromPostedDocDim.SETRANGE("Document No.",FromPurchRcptLine."Document No.");
              FromPostedDocDim.SETRANGE("Line No.",FromPurchRcptLine."Line No.");
            END;
          PurchDocType::"Posted Invoice":
            BEGIN
              ToPurchLine."Shortcut Dimension 1 Code" := FromPurchInvLine."Shortcut Dimension 1 Code";
              ToPurchLine."Shortcut Dimension 2 Code" := FromPurchInvLine."Shortcut Dimension 2 Code";
              FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Purch. Inv. Line");
              FromPostedDocDim.SETRANGE("Document No.",FromPurchInvLine."Document No.");
              FromPostedDocDim.SETRANGE("Line No.",FromPurchInvLine."Line No.");
            END;
          PurchDocType::"Posted Return Shipment":
            BEGIN
              ToPurchLine."Shortcut Dimension 1 Code" := FromReturnShptLine."Shortcut Dimension 1 Code";
              ToPurchLine."Shortcut Dimension 2 Code" := FromReturnShptLine."Shortcut Dimension 2 Code";
              FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Return Shipment Line");
              FromPostedDocDim.SETRANGE("Document No.",FromReturnShptLine."Document No.");
              FromPostedDocDim.SETRANGE("Line No.",FromReturnShptLine."Line No.");
            END;
          PurchDocType::"Posted Credit Memo":
            BEGIN
              ToPurchLine."Shortcut Dimension 1 Code" := FromPurchCrMemoLine."Shortcut Dimension 1 Code";
              ToPurchLine."Shortcut Dimension 2 Code" := FromPurchCrMemoLine."Shortcut Dimension 2 Code";
              FromPostedDocDim.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Line");
              FromPostedDocDim.SETRANGE("Document No.",FromPurchCrMemoLine."Document No.");
              FromPostedDocDim.SETRANGE("Line No.",FromPurchCrMemoLine."Line No.");
            END;
        END;
        IF FromPostedDocDim.FIND('-') THEN BEGIN
          REPEAT
            DocDim.INIT;
            DocDim."Table ID" := DATABASE::"Purchase Line";
            DocDim."Document Type" := ToPurchLine."Document Type";
            DocDim."Document No." := ToPurchLine."Document No.";
            DocDim."Line No." := ToPurchLine."Line No.";
            DocDim."Dimension Code" := FromPostedDocDim."Dimension Code";
            DocDim."Dimension Value Code" := FromPostedDocDim."Dimension Value Code";
            DocDim.INSERT;
          UNTIL FromPostedDocDim.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CopyFromSalesDocAssgntToLine@5800(VAR ToSalesLine@1005 : Record 37;FromSalesLine@1000 : Record 37;VAR ItemChargeAssgntNextLineNo@1001 : Integer);
    VAR
      FromItemChargeAssgntSales@1002 : Record 5809;
      ToItemChargeAssgntSales@1003 : Record 5809;
      AssignItemChargeSales@1004 : Codeunit 5807;
    BEGIN
      WITH FromSalesLine DO BEGIN
        IF NOT FromItemChargeAssgntSales.RECORDLEVELLOCKING THEN
          FromItemChargeAssgntSales.LOCKTABLE(TRUE,TRUE);
        FromItemChargeAssgntSales.RESET;
        FromItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        FromItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        FromItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
        FromItemChargeAssgntSales.SETFILTER(
          "Applies-to Doc. Type",'<>%1',"Document Type");
        IF FromItemChargeAssgntSales.FIND('-') THEN
          REPEAT
            ToItemChargeAssgntSales.COPY(FromItemChargeAssgntSales);
            ToItemChargeAssgntSales."Document Type" := ToSalesLine."Document Type";
            ToItemChargeAssgntSales."Document No." := ToSalesLine."Document No.";
            ToItemChargeAssgntSales."Document Line No." := ToSalesLine."Line No.";
            AssignItemChargeSales.InsertItemChargeAssgnt(
              ToItemChargeAssgntSales,ToItemChargeAssgntSales."Applies-to Doc. Type",
              ToItemChargeAssgntSales."Applies-to Doc. No.",ToItemChargeAssgntSales."Applies-to Doc. Line No.",
              ToItemChargeAssgntSales."Item No.",ToItemChargeAssgntSales.Description,ItemChargeAssgntNextLineNo);
          UNTIL FromItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyFromPurchDocAssgntToLine@4(VAR ToPurchLine@1008 : Record 39;FromPurchLine@1000 : Record 39;VAR ItemChargeAssgntNextLineNo@1001 : Integer);
    VAR
      FromItemChargeAssgntPurch@1002 : Record 5805;
      ToItemChargeAssgntPurch@1003 : Record 5805;
      AssignItemChargePurch@1004 : Codeunit 5805;
    BEGIN
      WITH FromPurchLine DO BEGIN
        IF NOT FromItemChargeAssgntPurch.RECORDLEVELLOCKING THEN
          FromItemChargeAssgntPurch.LOCKTABLE(TRUE,TRUE);
        FromItemChargeAssgntPurch.RESET;
        FromItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        FromItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        FromItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
        FromItemChargeAssgntPurch.SETFILTER(
          "Applies-to Doc. Type",'<>%1',"Document Type");
        IF FromItemChargeAssgntPurch.FIND('-') THEN
          REPEAT
            ToItemChargeAssgntPurch.COPY(FromItemChargeAssgntPurch);
            ToItemChargeAssgntPurch."Document Type" := ToPurchLine."Document Type";
            ToItemChargeAssgntPurch."Document No." := ToPurchLine."Document No.";
            ToItemChargeAssgntPurch."Document Line No." := ToPurchLine."Line No.";
            AssignItemChargePurch.InsertItemChargeAssgnt(
              ToItemChargeAssgntPurch,ToItemChargeAssgntPurch."Applies-to Doc. Type",
              ToItemChargeAssgntPurch."Applies-to Doc. No.",ToItemChargeAssgntPurch."Applies-to Doc. Line No.",
              ToItemChargeAssgntPurch."Item No.",ToItemChargeAssgntPurch.Description,ItemChargeAssgntNextLineNo);
          UNTIL FromItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE WarnSalesInvoicePmtDisc@11(VAR ToSalesHeader@1001 : Record 36;VAR FromSalesHeader@1002 : Record 36;FromDocType@1004 : Option;FromDocNo@1003 : Code[20]);
    VAR
      CustLedgEntry@1000 : Record 21;
    BEGIN
      IF HideDialog THEN
        EXIT;

      IF IncludeHeader AND
         (ToSalesHeader."Document Type" IN
          [ToSalesHeader."Document Type"::"Return Order",ToSalesHeader."Document Type"::"Credit Memo"])
      THEN BEGIN
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETRANGE("Document Type",FromSalesHeader."Document Type"::Invoice);
        CustLedgEntry.SETRANGE("Document No.",FromDocNo);
        IF CustLedgEntry.FIND('-') THEN BEGIN
          IF (CustLedgEntry."Pmt. Disc. Given (LCY)" <> 0) AND
             (CustLedgEntry."Journal Batch Name" = '')
          THEN
            MESSAGE(Text006,SELECTSTR(FromDocType,Text007), FromDocNo);
        END;
      END;

      IF IncludeHeader AND
         (ToSalesHeader."Document Type" IN
          [ToSalesHeader."Document Type"::Invoice,ToSalesHeader."Document Type"::Order,
           ToSalesHeader."Document Type"::Quote,ToSalesHeader."Document Type"::"Blanket Order"]) AND
         (FromDocType = FromDocType::"9")
      THEN BEGIN
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETRANGE("Document Type",FromSalesHeader."Document Type"::"Credit Memo");
        CustLedgEntry.SETRANGE("Document No.",FromDocNo);
        IF CustLedgEntry.FIND('-') THEN BEGIN
          IF (CustLedgEntry."Pmt. Disc. Given (LCY)" <> 0) AND
             (CustLedgEntry."Journal Batch Name" = '')
          THEN
            MESSAGE(Text006,SELECTSTR(FromDocType - 1,Text007), FromDocNo);
        END;
      END;
    END;

    LOCAL PROCEDURE WarnPurchInvoicePmtDisc@10(VAR ToPurchHeader@1001 : Record 38;VAR FromPurchHeader@1002 : Record 38;FromDocType@1004 : Option;FromDocNo@1003 : Code[20]);
    VAR
      VendLedgEntry@1000 : Record 25;
    BEGIN
      IF HideDialog THEN
        EXIT;

      IF IncludeHeader AND
         (ToPurchHeader."Document Type" IN
          [ToPurchHeader."Document Type"::"Return Order",ToPurchHeader."Document Type"::"Credit Memo"])
      THEN BEGIN
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETRANGE("Document Type",FromPurchHeader."Document Type"::Invoice);
        VendLedgEntry.SETRANGE("Document No.",FromDocNo);
        IF VendLedgEntry.FIND('-') THEN BEGIN
          IF (VendLedgEntry."Pmt. Disc. Rcd.(LCY)" <> 0) AND
             (VendLedgEntry."Journal Batch Name" = '')
          THEN
            MESSAGE(Text009,SELECTSTR(FromDocType,Text007), FromDocNo);
        END;
      END;

      IF IncludeHeader AND
         (ToPurchHeader."Document Type" IN
          [ToPurchHeader."Document Type"::Invoice,ToPurchHeader."Document Type"::Order,
           ToPurchHeader."Document Type"::Quote,ToPurchHeader."Document Type"::"Blanket Order"]) AND
         (FromDocType = FromDocType::"9")
      THEN BEGIN
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETRANGE("Document Type",FromPurchHeader."Document Type"::"Credit Memo");
        VendLedgEntry.SETRANGE("Document No.",FromDocNo);
        IF VendLedgEntry.FIND('-') THEN BEGIN
          IF (VendLedgEntry."Pmt. Disc. Rcd.(LCY)" <> 0) AND
             (VendLedgEntry."Journal Batch Name" = '')
          THEN
            MESSAGE(Text006,SELECTSTR(FromDocType - 1,Text007), FromDocNo);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckItemAvailable@5(VAR ToSalesHeader@1001 : Record 36;VAR ToSalesLine@1000 : Record 37);
    BEGIN
      IF HideDialog THEN
        EXIT;

      ToSalesLine."Document Type" := ToSalesHeader."Document Type";
      ToSalesLine."Document No." := ToSalesHeader."No.";
      ToSalesLine."Line No." := 0;
      ToSalesLine.Type := ToSalesLine.Type::Item;
      ToSalesLine."Purchase Order No." := '';
      ToSalesLine."Purch. Order Line No." := 0;
      ToSalesLine."Drop Shipment" :=
        NOT RecalculateLines AND ToSalesLine."Drop Shipment" AND
        (ToSalesHeader."Document Type" = ToSalesHeader."Document Type"::Order);

      IF ToSalesLine."Shipment Date" = 0D THEN BEGIN
        IF ToSalesHeader."Shipment Date" <> 0D THEN
          ToSalesLine.VALIDATE("Shipment Date",ToSalesHeader."Shipment Date")
        ELSE
          ToSalesLine.VALIDATE("Shipment Date",WORKDATE);
      END;

      ItemCheckAvail.SalesLineCheck(ToSalesLine);
    END;

    LOCAL PROCEDURE ClearSalesBizTalkFields@25(VAR NewSalesHeader@1000 : Record 36);
    BEGIN
      WITH NewSalesHeader DO BEGIN
        "Date Received" := 0D;
        "Time Received" := 0T;
        "BizTalk Request for Sales Qte." := FALSE;
        "BizTalk Sales Order" := FALSE;
        "Date Sent" := 0D;
        "Time Sent" := 0T;
        "BizTalk Sales Quote" := FALSE;
        "BizTalk Sales Order Cnfmn." := FALSE;
        "Customer Quote No." := '';
        "Customer Order No." := '';
        "BizTalk Document Sent" := FALSE;
      END
    END;

    LOCAL PROCEDURE ClearPurchBizTalkFields@26(VAR NewPurchHeader@1000 : Record 38);
    BEGIN
      WITH NewPurchHeader DO BEGIN
        "Date Received" := 0D;
        "Time Received" := 0T;
        "BizTalk Purchase Quote" := FALSE;
        "BizTalk Purch. Order Cnfmn." := FALSE;
        "BizTalk Purchase Invoice" := FALSE;
        "BizTalk Purchase Receipt" := FALSE;
        "BizTalk Purchase Credit Memo" := FALSE;
        "Date Sent" := 0D;
        "Time Sent" := 0T;
        "BizTalk Request for Purch. Qte" := FALSE;
        "BizTalk Purchase Order" := FALSE;
        "Vendor Quote No." := '';
        "BizTalk Document Sent" := FALSE;
      END
    END;

    PROCEDURE CopyServContractLines@27(ToServContractHeader@1002 : Record 5965;FromDocType@1000 : Option;FromDocNo@1003 : Code[20];VAR FromServContractLine@1005 : Record 5964) AllLinesCopied : Boolean;
    VAR
      ExistingServContractLine@1001 : Record 5964;
      LineNo@1004 : Integer;
    BEGIN
      IF FromDocNo = '' THEN
        ERROR(Text000);

      ExistingServContractLine.LOCKTABLE;
      ExistingServContractLine.RESET;
      ExistingServContractLine.SETRANGE("Contract Type",ToServContractHeader."Contract Type");
      ExistingServContractLine.SETRANGE("Contract No.",ToServContractHeader."Contract No.");
      IF ExistingServContractLine.FIND('+') THEN
        LineNo := ExistingServContractLine."Line No." + 10000
      ELSE
        LineNo := 10000;

      AllLinesCopied := TRUE;
      FromServContractLine.RESET;
      FromServContractLine.SETRANGE("Contract Type",FromDocType);
      FromServContractLine.SETRANGE("Contract No.",FromDocNo);
      IF FromServContractLine.FIND('-') THEN
        REPEAT
          IF NOT ProcessServContractLine(
            ToServContractHeader,
            FromServContractLine,
            LineNo)
          THEN BEGIN
            AllLinesCopied := FALSE;
            FromServContractLine.MARK(TRUE)
          END ELSE
            LineNo := LineNo + 10000
        UNTIL FromServContractLine.NEXT = 0;
    END;

    PROCEDURE ServContractHeaderDocType@28(DocType@1001 : Option) : Integer;
    VAR
      ServContractHeader@1000 : Record 5965;
    BEGIN
      CASE DocType OF
        ServDocType::Quote:
          EXIT(ServContractHeader."Contract Type"::Quote);
        ServDocType::Contract:
          EXIT(ServContractHeader."Contract Type"::Contract);
      END;
    END;

    PROCEDURE ProcessServContractLine@29(ToServContractHeader@1003 : Record 5965;VAR FromServContractLine@1000 : Record 5964;LineNo@1005 : Integer) : Boolean;
    VAR
      ToServContractLine@1007 : Record 5964;
      ExistingServContractLine@1006 : Record 5964;
      ServItem@1004 : Record 5940;
    BEGIN
      IF FromServContractLine."Service Item No." <> '' THEN BEGIN
        ServItem.GET(FromServContractLine."Service Item No.");
        IF ServItem."Customer No." <> ToServContractHeader."Customer No." THEN
          EXIT(FALSE);

        ExistingServContractLine.RESET;
        ExistingServContractLine.SETCURRENTKEY("Service Item No.","Contract Status");
        ExistingServContractLine.SETRANGE("Service Item No.",FromServContractLine."Service Item No.");
        ExistingServContractLine.SETRANGE("Contract Type",ToServContractHeader."Contract Type");
        ExistingServContractLine.SETRANGE("Contract No.",ToServContractHeader."Contract No.");
        IF ExistingServContractLine.FIND('-') THEN
          EXIT(FALSE);
      END;

      ToServContractLine := FromServContractLine;
      ToServContractLine."Last Planned Service Date" := 0D;
      ToServContractLine."Last Service Date" := 0D;
      ToServContractLine."Last Preventive Maint. Date" := 0D;
      ToServContractLine."Invoiced to Date" := 0D;
      ToServContractLine."Contract Type" := ToServContractHeader."Contract Type";
      ToServContractLine."Contract No." := ToServContractHeader."Contract No.";
      ToServContractLine."Line No." := LineNo;
      ToServContractLine."New Line" := TRUE;
      ToServContractLine.Credited := FALSE;
      ToServContractLine.SetupNewLine;
      ToServContractLine.INSERT(TRUE);
      EXIT(TRUE);
    END;

    PROCEDURE CopySalesShptLinesToDoc@39(ToSalesHeader@1002 : Record 36;VAR FromSalesShptLine@1001 : Record 111;VAR LinesNotCopied@1018 : Integer;VAR MissingExCostRevLink@1009 : Boolean);
    VAR
      ItemLedgEntry@1008 : Record 32;
      TempTrkgItemLedgEntry@1017 : TEMPORARY Record 32;
      FromSalesHeader@1006 : Record 36;
      FromSalesLine@1003 : Record 37;
      ToSalesLine@1010 : Record 37;
      FromSalesLineBuf@1007 : TEMPORARY Record 37;
      FromSalesShptHeader@1005 : Record 110;
      FromSalesInvLine@1014 : Record 113;
      FromReturnRcptLine@1013 : Record 6661;
      FromSalesCrMemoLine@1012 : Record 115;
      TempItemTrkgEntry@1021 : TEMPORARY Record 337;
      ItemTrackingMgt@1016 : Codeunit 6500;
      OldDocNo@1011 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1019 : Integer;
      FromLineCounter@1023 : Integer;
      ToLineCounter@1022 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1020 : Boolean;
      FillExactCostRevLink@1015 : Boolean;
      CopyLine@1024 : Boolean;
      InsertDocNoLine@1025 : Boolean;
    BEGIN
      MissingExCostRevLink := FALSE;
      InitCurrency(ToSalesHeader."Currency Code");
      OpenWindow;

      WITH FromSalesShptLine DO
        IF FINDSET THEN
          REPEAT
            FromLineCounter := FromLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(1,FromLineCounter);
            IF FromSalesShptHeader."No." <> "Document No." THEN BEGIN
              FromSalesShptHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            END;
            FromSalesHeader.TRANSFERFIELDS(FromSalesShptHeader);
            FillExactCostRevLink :=
              IsSalesFillExactCostRevLink(ToSalesHeader,0,FromSalesHeader."Currency Code");
            FromSalesLine.TRANSFERFIELDS(FromSalesShptLine);
            FromSalesLine."Appl.-from Item Entry" := 0;

            IF "Document No." <> OldDocNo THEN BEGIN
              OldDocNo := "Document No.";
              InsertDocNoLine := TRUE;
            END;

            SplitLine := TRUE;
            FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
            IF NOT SplitPstdSalesLinesPerILE(
                 ToSalesHeader,FromSalesHeader,ItemLedgEntry,FromSalesLineBuf,
                 FromSalesLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,TRUE)
            THEN
              IF CopyItemTrkg THEN
                SplitLine :=
                  SplitSalesDocLinesPerItemTrkg(
                    ItemLedgEntry,TempItemTrkgEntry,FromSalesLineBuf,
                    FromSalesLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,TRUE)
              ELSE
                SplitLine := FALSE;

            IF NOT SplitLine THEN BEGIN
              FromSalesLineBuf := FromSalesLine;
              CopyLine := TRUE;
            END ELSE
              CopyLine := FromSalesLineBuf.FINDSET AND FillExactCostRevLink;


            Window.UPDATE(1,FromLineCounter);
            IF CopyLine THEN BEGIN
              NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
              IF InsertDocNoLine THEN BEGIN
                InsertOldSalesDocNoLine(ToSalesHeader,"Document No.",1,NextLineNo);
                InsertDocNoLine := FALSE;
              END;
              IF (FromSalesLineBuf.Type <> FromSalesLineBuf.Type::" ") OR
                 (FromSalesLineBuf."Attached to Line No." = 0)
              THEN
                REPEAT
                  ToLineCounter := ToLineCounter + 1;
                  IF IsTimeForUpdate THEN
                    Window.UPDATE(2,ToLineCounter);
                  IF CopySalesLine(
                    ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLineBuf,NextLineNo,LinesNotCopied,FALSE)
                  THEN BEGIN
                    CopyFromPstdSalesDocDimToLine(
                      ToSalesLine,SalesDocType::"Posted Shipment",
                      FromSalesShptLine,FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine);

                    IF CopyItemTrkg THEN BEGIN
                      IF SplitLine THEN BEGIN
                        TempItemTrkgEntry.RESET;
                        TempItemTrkgEntry.SETCURRENTKEY("Source ID","Source Ref. No.");
                        TempItemTrkgEntry.SETRANGE("Source ID",FromSalesLineBuf."Document No.");
                        TempItemTrkgEntry.SETRANGE("Source Ref. No.",FromSalesLineBuf."Line No.");
                        CollectItemTrkgPerPstDocLine(TempItemTrkgEntry,TempTrkgItemLedgEntry,FALSE);
                      END ELSE
                        ItemTrackingMgt.CollectItemTrkgPerPstdDocLine(TempTrkgItemLedgEntry,ItemLedgEntry);

                      ItemTrackingMgt.CopyItemLedgEntryTrkgToSalesLn(
                        TempTrkgItemLedgEntry,ToSalesLine,
                        FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                        FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",TRUE);
                    END;

                    CopySalesShptExtTextToDoc(
                      ToSalesHeader,ToSalesLine,FromSalesShptLine,FromSalesHeader."Language Code",
                      NextLineNo,FromSalesLineBuf."Appl.-from Item Entry" <> 0);
                  END;
                UNTIL FromSalesLineBuf.NEXT = 0;
            END;
          UNTIL NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CopySalesShptExtTextToDoc@71(ToSalesHeader@1003 : Record 36;ToSalesLine@1002 : Record 37;FromSalesShptLine@1004 : Record 111;FromLanguageCode@1000 : Code[10];VAR NextLineNo@1006 : Integer;ExactCostReverse@1005 : Boolean);
    VAR
      ToSalesLine2@1001 : Record 37;
      FromSalesInvLine@1009 : Record 113;
      FromReturnRcptLine@1008 : Record 6661;
      FromSalesCrMemoLine@1007 : Record 115;
    BEGIN
      ToSalesLine2.SETRANGE("Document No.",ToSalesLine."Document No.");
      ToSalesLine2.SETRANGE("Attached to Line No.",ToSalesLine."Line No.");
      IF ToSalesLine2.ISEMPTY THEN
        WITH FromSalesShptLine DO BEGIN
          SETRANGE("Document No.","Document No.");
          SETRANGE("Attached to Line No.","Line No.");
          IF FINDSET THEN
            REPEAT
              IF (ToSalesHeader."Language Code" <> FromLanguageCode) OR
                 (RecalculateLines AND NOT ExactCostReverse)
              THEN BEGIN
                IF TransferExtendedText.SalesCheckIfAnyExtText(ToSalesLine,FALSE) THEN BEGIN
                  TransferExtendedText.InsertSalesExtText(ToSalesLine);
                  NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
                END;
              END ELSE BEGIN
                CopySalesExtTextLines(
                  ToSalesLine2,ToSalesLine,Description,"Description 2",NextLineNo);
                CopyFromPstdSalesDocDimToLine(
                  ToSalesLine2,SalesDocType::"Posted Shipment",FromSalesShptLine,
                  FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine);
              END;
            UNTIL NEXT = 0;
        END;
    END;

    PROCEDURE CopySalesInvLinesToDoc@34(ToSalesHeader@1002 : Record 36;VAR FromSalesInvLine@1001 : Record 113;VAR LinesNotCopied@1020 : Integer;VAR MissingExCostRevLink@1019 : Boolean);
    VAR
      ItemLedgEntryBuf@1008 : TEMPORARY Record 32;
      TempTrkgItemLedgEntry@1012 : TEMPORARY Record 32;
      FromSalesHeader@1006 : Record 36;
      FromSalesLine@1003 : Record 37;
      FromSalesLine2@1022 : Record 37;
      ToSalesLine@1010 : Record 37;
      FromSalesLineBuf@1007 : TEMPORARY Record 37;
      FromSalesInvHeader@1005 : Record 112;
      FromSalesShptLine@1017 : Record 111;
      FromReturnRcptLine@1016 : Record 6661;
      FromSalesCrMemoLine@1015 : Record 115;
      TempItemTrkgEntry@1009 : TEMPORARY Record 337;
      ItemTrackingMgt@1018 : Codeunit 6500;
      OldInvDocNo@1011 : Code[20];
      OldShptDocNo@1014 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1023 : Integer;
      FromLineCounter@1025 : Integer;
      ToLineCounter@1024 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1021 : Boolean;
      FillExactCostRevLink@1013 : Boolean;
    BEGIN
      MissingExCostRevLink := FALSE;
      InitCurrency(ToSalesHeader."Currency Code");
      FromSalesLineBuf.RESET;
      FromSalesLineBuf.DELETEALL;
      TempItemTrkgEntry.RESET;
      TempItemTrkgEntry.DELETEALL;
      OpenWindow;

      // Fill sales line buffer
      WITH FromSalesInvLine DO
        IF FINDSET THEN
          REPEAT
            FromLineCounter := FromLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(1,FromLineCounter);
            IF FromSalesInvHeader."No." <> "Document No." THEN BEGIN
              FromSalesInvHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            END;
            FromSalesHeader.TRANSFERFIELDS(FromSalesInvHeader);
            FillExactCostRevLink :=
              IsSalesFillExactCostRevLink(ToSalesHeader,1,FromSalesHeader."Currency Code");
            FromSalesLine.TRANSFERFIELDS(FromSalesInvLine);
            FromSalesLine."Appl.-from Item Entry" := 0;
            // Reuse fields to buffer invoice line information
            FromSalesLine."Shipment No." := "Document No.";
            FromSalesLine."Shipment Line No." := 0;
            FromSalesLine."Return Receipt No." := '';
            FromSalesLine."Return Receipt Line No." := "Line No.";

            SplitLine := TRUE;
            GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
            IF NOT SplitPstdSalesLinesPerILE(
                 ToSalesHeader,FromSalesHeader,ItemLedgEntryBuf,FromSalesLineBuf,
                 FromSalesLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,FALSE)
            THEN
              IF CopyItemTrkg THEN
                SplitLine :=
                  SplitSalesDocLinesPerItemTrkg(
                    ItemLedgEntryBuf,TempItemTrkgEntry,FromSalesLineBuf,
                    FromSalesLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,FALSE)
              ELSE
                SplitLine := FALSE;

            IF NOT SplitLine THEN BEGIN
              FromSalesLine2 := FromSalesLineBuf;
              FromSalesLineBuf := FromSalesLine;
              FromSalesLineBuf."Document No." := FromSalesLine2."Document No.";
              FromSalesLineBuf."Shipment Line No." := FromSalesLine2."Shipment Line No.";
              FromSalesLineBuf."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 1;
              IF NOT IsRecalculateAmount(
                   FromSalesHeader."Currency Code",ToSalesHeader."Currency Code",
                   FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT")
              THEN
                FromSalesLineBuf."Return Receipt No." := "Document No.";
              ReCalcSalesLine(FromSalesHeader,ToSalesHeader,FromSalesLineBuf);
              FromSalesLineBuf.INSERT;
            END;
          UNTIL NEXT = 0;

      // Create sales line from buffer
      Window.UPDATE(1,FromLineCounter);
      WITH FromSalesLineBuf DO BEGIN
        // Sorting according to Sales Line Document No.,Line No.
        SETCURRENTKEY("Document Type","Document No.","Line No.");
        IF FINDSET THEN BEGIN
          NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
          REPEAT
            ToLineCounter := ToLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(2,ToLineCounter);
            IF "Shipment No." <> OldInvDocNo THEN BEGIN
              OldInvDocNo := "Shipment No.";
              OldShptDocNo := '';
              InsertOldSalesDocNoLine(ToSalesHeader,OldInvDocNo,2,NextLineNo);
            END;
            IF ("Document No." <> OldShptDocNo) AND ("Shipment Line No." > 0) THEN BEGIN
              OldShptDocNo := "Document No.";
              InsertOldSalesCombDocNoLine(ToSalesHeader,OldInvDocNo,OldShptDocNo,NextLineNo,TRUE);
            END;

            IF (Type <> Type::" ") OR ("Attached to Line No." = 0) THEN BEGIN
              // Empty buffer fields
              FromSalesLine2 := FromSalesLineBuf;
              FromSalesLine2."Shipment No." := '';
              FromSalesLine2."Shipment Line No." := 0;
              FromSalesLine2."Return Receipt No." := '';
              FromSalesLine2."Return Receipt Line No." := 0;

              IF CopySalesLine(
                ToSalesHeader,ToSalesLine,FromSalesHeader,
                FromSalesLine2,NextLineNo,LinesNotCopied,"Return Receipt No." = '')
              THEN BEGIN
                FromSalesInvLine.GET("Shipment No.","Return Receipt Line No.");
                CopyFromPstdSalesDocDimToLine(
                  ToSalesLine,SalesDocType::"Posted Invoice",
                  FromSalesShptLine,FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine);

                // copy item tracking
                IF (Type = Type::Item) AND (Quantity <> 0) THEN BEGIN
                  FromSalesInvLine."Document No." := OldInvDocNo;
                  FromSalesInvLine."Line No." := "Return Receipt Line No.";
                  FromSalesInvLine.GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
                  IF IsCopyItemTrkg(ItemLedgEntryBuf,CopyItemTrkg,FillExactCostRevLink) THEN BEGIN
                    IF MoveNegLines OR NOT ExactCostRevMandatory THEN
                      ItemTrackingMgt.CollectItemTrkgPerPstdDocLine(TempTrkgItemLedgEntry,ItemLedgEntryBuf)
                    ELSE BEGIN
                      TempItemTrkgEntry.RESET;
                      TempItemTrkgEntry.SETCURRENTKEY("Source ID","Source Ref. No.");
                      TempItemTrkgEntry.SETRANGE("Source ID","Document No.");
                      TempItemTrkgEntry.SETRANGE("Source Ref. No.","Line No.");
                      CollectItemTrkgPerPstDocLine(TempItemTrkgEntry,TempTrkgItemLedgEntry,FALSE);
                    END;

                    ItemTrackingMgt.CopyItemLedgEntryTrkgToSalesLn(
                      TempTrkgItemLedgEntry,ToSalesLine,
                      FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                      FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",FALSE);
                  END;
                END;

                CopySalesInvExtTextToDoc(
                  ToSalesHeader,ToSalesLine,FromSalesHeader."Language Code","Shipment No.",
                  "Return Receipt Line No.",NextLineNo,"Appl.-from Item Entry" <> 0);
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CopySalesInvExtTextToDoc@69(ToSalesHeader@1003 : Record 36;ToSalesLine@1002 : Record 37;FromLanguageCode@1000 : Code[10];FromInvDocNo@1004 : Code[20];FromInvDocLineNo@1011 : Integer;VAR NextLineNo@1006 : Integer;ExactCostReverse@1005 : Boolean);
    VAR
      ToSalesLine2@1001 : Record 37;
      FromSalesInvLine@1010 : Record 113;
      FromSalesShptLine@1009 : Record 111;
      FromReturnRcptLine@1008 : Record 6661;
      FromSalesCrMemoLine@1007 : Record 115;
    BEGIN
      ToSalesLine2.SETRANGE("Document No.",ToSalesLine."Document No.");
      ToSalesLine2.SETRANGE("Attached to Line No.",ToSalesLine."Line No.");
      IF ToSalesLine2.ISEMPTY THEN
        WITH FromSalesInvLine DO BEGIN
          SETRANGE("Document No.",FromInvDocNo);
          SETRANGE("Attached to Line No.",FromInvDocLineNo);
          IF FINDSET THEN
            REPEAT
              IF (ToSalesHeader."Language Code" <> FromLanguageCode) OR
                 (RecalculateLines AND NOT ExactCostReverse)
              THEN BEGIN
                IF TransferExtendedText.SalesCheckIfAnyExtText(ToSalesLine,FALSE) THEN BEGIN
                  TransferExtendedText.InsertSalesExtText(ToSalesLine);
                  NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
                END;
              END ELSE BEGIN
                CopySalesExtTextLines(
                  ToSalesLine2,ToSalesLine,Description,"Description 2",NextLineNo);
                CopyFromPstdSalesDocDimToLine(
                  ToSalesLine2,SalesDocType::"Posted Invoice",FromSalesShptLine,
                  FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine);
              END;
            UNTIL NEXT = 0;
        END;
    END;

    PROCEDURE CopySalesCrMemoLinesToDoc@31(ToSalesHeader@1002 : Record 36;VAR FromSalesCrMemoLine@1001 : Record 115;VAR LinesNotCopied@1020 : Integer;VAR MissingExCostRevLink@1019 : Boolean);
    VAR
      ItemLedgEntryBuf@1008 : TEMPORARY Record 32;
      TempTrkgItemLedgEntry@1012 : TEMPORARY Record 32;
      FromSalesHeader@1006 : Record 36;
      FromSalesLine@1003 : Record 37;
      FromSalesLine2@1022 : Record 37;
      ToSalesLine@1010 : Record 37;
      FromSalesLineBuf@1007 : TEMPORARY Record 37;
      FromSalesCrMemoHeader@1005 : Record 114;
      FromSalesShptLine@1017 : Record 111;
      FromReturnRcptLine@1016 : Record 6661;
      FromSalesInvLine@1015 : Record 113;
      TempItemTrkgEntry@1009 : TEMPORARY Record 337;
      ItemTrackingMgt@1018 : Codeunit 6500;
      OldCrMemoDocNo@1011 : Code[20];
      OldReturnRcptDocNo@1014 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1023 : Integer;
      FromLineCounter@1025 : Integer;
      ToLineCounter@1024 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1021 : Boolean;
      FillExactCostRevLink@1013 : Boolean;
    BEGIN
      MissingExCostRevLink := FALSE;
      InitCurrency(ToSalesHeader."Currency Code");
      FromSalesLineBuf.RESET;
      FromSalesLineBuf.DELETEALL;
      TempItemTrkgEntry.RESET;
      TempItemTrkgEntry.DELETEALL;
      OpenWindow;

      // Fill sales line buffer
      WITH FromSalesCrMemoLine DO
        IF FINDSET THEN
          REPEAT
            FromLineCounter := FromLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(1,FromLineCounter);
            IF FromSalesCrMemoHeader."No." <> "Document No." THEN BEGIN
              FromSalesCrMemoHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            END;
            FromSalesHeader.TRANSFERFIELDS(FromSalesCrMemoHeader);
            FillExactCostRevLink :=
              IsSalesFillExactCostRevLink(ToSalesHeader,3,FromSalesHeader."Currency Code");
            FromSalesLine.TRANSFERFIELDS(FromSalesCrMemoLine);
            FromSalesLine."Appl.-from Item Entry" := 0;
            // Reuse fields to buffer credit memo line information
            FromSalesLine."Shipment No." := "Document No.";
            FromSalesLine."Shipment Line No." := 0;
            FromSalesLine."Return Receipt No." := '';
            FromSalesLine."Return Receipt Line No." := "Line No.";

            SplitLine := TRUE;
            GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
            IF NOT SplitPstdSalesLinesPerILE(
                 ToSalesHeader,FromSalesHeader,ItemLedgEntryBuf,FromSalesLineBuf,
                 FromSalesLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,FALSE)
            THEN
              IF CopyItemTrkg THEN
                SplitLine :=
                  SplitSalesDocLinesPerItemTrkg(
                    ItemLedgEntryBuf,TempItemTrkgEntry,FromSalesLineBuf,
                    FromSalesLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,FALSE)
              ELSE
                SplitLine := FALSE;

            IF NOT SplitLine THEN BEGIN
              FromSalesLine2 := FromSalesLineBuf;
              FromSalesLineBuf := FromSalesLine;
              FromSalesLineBuf."Document No." := FromSalesLine2."Document No.";
              FromSalesLineBuf."Shipment Line No." := FromSalesLine2."Shipment Line No.";
              FromSalesLineBuf."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 1;
              IF NOT IsRecalculateAmount(
                   FromSalesHeader."Currency Code",ToSalesHeader."Currency Code",
                   FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT")
              THEN
                FromSalesLineBuf."Return Receipt No." := "Document No.";
              ReCalcSalesLine(FromSalesHeader,ToSalesHeader,FromSalesLineBuf);
              FromSalesLineBuf.INSERT;
            END;

          UNTIL NEXT = 0;

      // Create sales line from buffer
      Window.UPDATE(1,FromLineCounter);
      WITH FromSalesLineBuf DO BEGIN
        // Sorting according to Sales Line Document No.,Line No.
        SETCURRENTKEY("Document Type","Document No.","Line No.");
        IF FINDSET THEN BEGIN
          NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
          REPEAT
            ToLineCounter := ToLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(2,ToLineCounter);
            IF "Shipment No." <> OldCrMemoDocNo THEN BEGIN
              OldCrMemoDocNo := "Shipment No.";
              OldReturnRcptDocNo := '';
              InsertOldSalesDocNoLine(ToSalesHeader,OldCrMemoDocNo,4,NextLineNo);
            END;
            IF ("Document No." <> OldReturnRcptDocNo) AND ("Shipment Line No." > 0) THEN BEGIN
              OldReturnRcptDocNo := "Document No.";
              InsertOldSalesCombDocNoLine(ToSalesHeader,OldCrMemoDocNo,OldReturnRcptDocNo,NextLineNo,FALSE);
            END;

            IF (Type <> Type::" ") OR ("Attached to Line No." = 0) THEN BEGIN
              // Empty buffer fields
              FromSalesLine2 := FromSalesLineBuf;
              FromSalesLine2."Shipment No." := '';
              FromSalesLine2."Shipment Line No." := 0;
              FromSalesLine2."Return Receipt No." := '';
              FromSalesLine2."Return Receipt Line No." := 0;

              IF CopySalesLine(
                ToSalesHeader,ToSalesLine,FromSalesHeader,
                FromSalesLine2,NextLineNo,LinesNotCopied,"Return Receipt No." = '')
              THEN BEGIN
                FromSalesCrMemoLine.GET("Shipment No.","Return Receipt Line No.");
                CopyFromPstdSalesDocDimToLine(
                  ToSalesLine,SalesDocType::"Posted Credit Memo",
                  FromSalesShptLine,FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine);

                // copy item tracking
                IF (Type = Type::Item) AND (Quantity <> 0) THEN BEGIN
                  FromSalesCrMemoLine."Document No." := OldCrMemoDocNo;
                  FromSalesCrMemoLine."Line No." := "Return Receipt Line No.";
                  FromSalesCrMemoLine.GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
                  IF IsCopyItemTrkg(ItemLedgEntryBuf,CopyItemTrkg,FillExactCostRevLink) THEN BEGIN
                    IF MoveNegLines OR NOT ExactCostRevMandatory THEN
                      ItemTrackingMgt.CollectItemTrkgPerPstdDocLine(TempTrkgItemLedgEntry,ItemLedgEntryBuf)
                    ELSE BEGIN
                      TempItemTrkgEntry.RESET;
                      TempItemTrkgEntry.SETCURRENTKEY("Source ID","Source Ref. No.");
                      TempItemTrkgEntry.SETRANGE("Source ID","Document No.");
                      TempItemTrkgEntry.SETRANGE("Source Ref. No.","Line No.");
                      CollectItemTrkgPerPstDocLine(TempItemTrkgEntry,TempTrkgItemLedgEntry,FALSE);
                    END;

                    ItemTrackingMgt.CopyItemLedgEntryTrkgToSalesLn(
                      TempTrkgItemLedgEntry,ToSalesLine,
                      FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                      FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",FALSE);
                  END;
                END;
                CopySalesCrMemoExtTextToDoc(
                  ToSalesHeader,ToSalesLine,FromSalesHeader."Language Code","Shipment No.",
                  "Return Receipt Line No.",NextLineNo,"Appl.-from Item Entry" <> 0);
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CopySalesCrMemoExtTextToDoc@58(ToSalesHeader@1003 : Record 36;ToSalesLine@1002 : Record 37;FromLanguageCode@1000 : Code[10];FromCrMemoDocNo@1011 : Code[20];FromCrMemoDocLineNo@1010 : Integer;VAR NextLineNo@1006 : Integer;ExactCostReverse@1005 : Boolean);
    VAR
      ToSalesLine2@1001 : Record 37;
      FromSalesShptLine@1007 : Record 111;
      FromSalesInvLine@1009 : Record 113;
      FromSalesCrMemoLine@1004 : Record 115;
      FromReturnRcptLine@1008 : Record 6661;
    BEGIN
      ToSalesLine2.SETRANGE("Document No.",ToSalesLine."Document No.");
      ToSalesLine2.SETRANGE("Attached to Line No.",ToSalesLine."Line No.");
      IF ToSalesLine2.ISEMPTY THEN
        WITH FromSalesCrMemoLine DO BEGIN
          SETRANGE("Document No.",FromCrMemoDocNo);
          SETRANGE("Attached to Line No.",FromCrMemoDocLineNo);
          IF FINDSET THEN
            REPEAT
              IF (ToSalesHeader."Language Code" <> FromLanguageCode) OR
                 (RecalculateLines AND NOT ExactCostReverse)
              THEN BEGIN
                IF TransferExtendedText.SalesCheckIfAnyExtText(ToSalesLine,FALSE) THEN BEGIN
                  TransferExtendedText.InsertSalesExtText(ToSalesLine);
                  NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
                END;
              END ELSE BEGIN
                CopySalesExtTextLines(
                  ToSalesLine2,ToSalesLine,Description,"Description 2",NextLineNo);
                CopyFromPstdSalesDocDimToLine(
                  ToSalesLine2,SalesDocType::"Posted Credit Memo",FromSalesShptLine,
                  FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine);
              END;
            UNTIL NEXT = 0;
        END;
    END;

    PROCEDURE CopySalesReturnRcptLinesToDoc@40(ToSalesHeader@1002 : Record 36;VAR FromReturnRcptLine@1001 : Record 6661;VAR LinesNotCopied@1018 : Integer;VAR MissingExCostRevLink@1009 : Boolean);
    VAR
      ItemLedgEntry@1008 : Record 32;
      TempTrkgItemLedgEntry@1019 : TEMPORARY Record 32;
      FromSalesHeader@1006 : Record 36;
      FromSalesLine@1003 : Record 37;
      ToSalesLine@1010 : Record 37;
      FromSalesLineBuf@1007 : TEMPORARY Record 37;
      FromReturnRcptHeader@1005 : Record 6660;
      FromSalesShptLine@1014 : Record 111;
      FromSalesInvLine@1016 : Record 113;
      FromSalesCrMemoLine@1013 : Record 115;
      TempItemTrkgEntry@1015 : TEMPORARY Record 337;
      ItemTrackingMgt@1020 : Codeunit 6500;
      OldDocNo@1011 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1021 : Integer;
      FromLineCounter@1023 : Integer;
      ToLineCounter@1022 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1017 : Boolean;
      FillExactCostRevLink@1012 : Boolean;
      CopyLine@1024 : Boolean;
      InsertDocNoLine@1025 : Boolean;
    BEGIN
      MissingExCostRevLink := FALSE;
      InitCurrency(ToSalesHeader."Currency Code");
      OpenWindow;

      WITH FromReturnRcptLine DO
        IF FINDSET THEN
          REPEAT
            FromLineCounter := FromLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(1,FromLineCounter);
            IF FromReturnRcptHeader."No." <> "Document No." THEN BEGIN
              FromReturnRcptHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            END;
            FromSalesHeader.TRANSFERFIELDS(FromReturnRcptHeader);
            FillExactCostRevLink :=
              IsSalesFillExactCostRevLink(ToSalesHeader,2,FromSalesHeader."Currency Code");
            FromSalesLine.TRANSFERFIELDS(FromReturnRcptLine);
            FromSalesLine."Appl.-from Item Entry" := 0;

            IF "Document No." <> OldDocNo THEN BEGIN
              OldDocNo := "Document No.";
              InsertDocNoLine := TRUE;
            END;

            SplitLine := TRUE;
            FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
            IF NOT SplitPstdSalesLinesPerILE(
                 ToSalesHeader,FromSalesHeader,ItemLedgEntry,FromSalesLineBuf,
                 FromSalesLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,TRUE)
            THEN
              IF CopyItemTrkg THEN
                SplitLine :=
                  SplitSalesDocLinesPerItemTrkg(
                    ItemLedgEntry,TempItemTrkgEntry,FromSalesLineBuf,
                    FromSalesLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,TRUE)
              ELSE
                SplitLine := FALSE;

            IF NOT SplitLine THEN BEGIN
              FromSalesLineBuf := FromSalesLine;
              CopyLine := TRUE;
            END ELSE
              CopyLine := FromSalesLineBuf.FINDSET AND FillExactCostRevLink;

            Window.UPDATE(1,FromLineCounter);
            IF CopyLine THEN BEGIN
              NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
              IF InsertDocNoLine THEN BEGIN
                InsertOldSalesDocNoLine(ToSalesHeader,"Document No.",3,NextLineNo);
                InsertDocNoLine := FALSE;
              END;
              IF (FromSalesLineBuf.Type <> FromSalesLineBuf.Type::" ") OR
                 (FromSalesLineBuf."Attached to Line No." = 0)
              THEN
                REPEAT
                  ToLineCounter := ToLineCounter + 1;
                  IF IsTimeForUpdate THEN
                    Window.UPDATE(2,ToLineCounter);
                  IF CopySalesLine(
                    ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLineBuf,NextLineNo,LinesNotCopied,FALSE)
                  THEN BEGIN
                    CopyFromPstdSalesDocDimToLine(
                      ToSalesLine,SalesDocType::"Posted Return Receipt",
                      FromSalesShptLine,FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine);

                    IF CopyItemTrkg THEN BEGIN
                      IF SplitLine THEN BEGIN
                        TempItemTrkgEntry.RESET;
                        TempItemTrkgEntry.SETCURRENTKEY("Source ID","Source Ref. No.");
                        TempItemTrkgEntry.SETRANGE("Source ID",FromSalesLineBuf."Document No.");
                        TempItemTrkgEntry.SETRANGE("Source Ref. No.",FromSalesLineBuf."Line No.");
                        CollectItemTrkgPerPstDocLine(TempItemTrkgEntry,TempTrkgItemLedgEntry,FALSE);
                      END ELSE
                        ItemTrackingMgt.CollectItemTrkgPerPstdDocLine(TempTrkgItemLedgEntry,ItemLedgEntry);

                      ItemTrackingMgt.CopyItemLedgEntryTrkgToSalesLn(
                        TempTrkgItemLedgEntry,ToSalesLine,
                        FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                        FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT",TRUE);
                    END;

                    CopyReturnRcptExtTextToDoc(
                      ToSalesHeader,ToSalesLine,FromReturnRcptLine,FromSalesHeader."Language Code",
                      NextLineNo,FromSalesLineBuf."Appl.-from Item Entry" <> 0);
                  END;
                UNTIL FromSalesLineBuf.NEXT = 0
            END;
          UNTIL NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CopyReturnRcptExtTextToDoc@66(ToSalesHeader@1003 : Record 36;ToSalesLine@1002 : Record 37;FromReturnRcptLine@1008 : Record 6661;FromLanguageCode@1000 : Code[10];VAR NextLineNo@1006 : Integer;ExactCostReverse@1005 : Boolean);
    VAR
      ToSalesLine2@1001 : Record 37;
      FromSalesShptLine@1004 : Record 111;
      FromSalesInvLine@1009 : Record 113;
      FromSalesCrMemoLine@1007 : Record 115;
    BEGIN
      ToSalesLine2.SETRANGE("Document No.",ToSalesLine."Document No.");
      ToSalesLine2.SETRANGE("Attached to Line No.",ToSalesLine."Line No.");
      IF ToSalesLine2.ISEMPTY THEN
        WITH FromReturnRcptLine DO BEGIN
          SETRANGE("Document No.","Document No.");
          SETRANGE("Attached to Line No.","Line No.");
          IF FINDSET THEN
            REPEAT
              IF (ToSalesHeader."Language Code" <> FromLanguageCode) OR
                 (RecalculateLines AND NOT ExactCostReverse)
              THEN BEGIN
                IF TransferExtendedText.SalesCheckIfAnyExtText(ToSalesLine,FALSE) THEN BEGIN
                  TransferExtendedText.InsertSalesExtText(ToSalesLine);
                  NextLineNo := GetLastToSalesLineNo(ToSalesHeader);
                END;
              END ELSE BEGIN
                CopySalesExtTextLines(
                  ToSalesLine2,ToSalesLine,Description,"Description 2",NextLineNo);
                CopyFromPstdSalesDocDimToLine(
                  ToSalesLine2,SalesDocType::"Posted Return Receipt",FromSalesShptLine,
                  FromSalesInvLine,FromReturnRcptLine,FromSalesCrMemoLine);
              END;
            UNTIL NEXT = 0;
        END;
    END;

    LOCAL PROCEDURE SplitPstdSalesLinesPerILE@35(ToSalesHeader@1011 : Record 36;FromSalesHeader@1017 : Record 36;VAR ItemLedgEntry@1003 : Record 32;VAR FromSalesLineBuf@1004 : Record 37;FromSalesLine@1001 : Record 37;VAR NextLineNo@1006 : Integer;VAR CopyItemTrkg@1002 : Boolean;VAR MissingExCostRevLink@1005 : Boolean;FillExactCostRevLink@1000 : Boolean;FromShptOrRcpt@1016 : Boolean) : Boolean;
    VAR
      OrgQtyBase@1007 : Decimal;
    BEGIN
      IF FromShptOrRcpt THEN BEGIN
        FromSalesLineBuf.RESET;
        FromSalesLineBuf.DELETEALL;
      END ELSE
        FromSalesLineBuf.INIT;

      CopyItemTrkg := FALSE;

      IF (FromSalesLine.Type <> FromSalesLine.Type::Item) OR (FromSalesLine.Quantity = 0) THEN
        EXIT(FALSE);
      IF IsCopyItemTrkg(ItemLedgEntry,CopyItemTrkg,FillExactCostRevLink) OR
         NOT FillExactCostRevLink OR MoveNegLines OR
         NOT ExactCostRevMandatory
      THEN
        EXIT(FALSE);

      WITH ItemLedgEntry DO BEGIN
        FINDSET;
        IF Quantity >= 0 THEN BEGIN
          FromSalesLineBuf."Document No." := "Document No.";
          IF GetSalesDocType(ItemLedgEntry) IN
             [FromSalesLineBuf."Document Type"::Order,FromSalesLineBuf."Document Type"::"Return Order"]
          THEN
            FromSalesLineBuf."Shipment Line No." := 1;
          EXIT(FALSE);
        END;
        OrgQtyBase := FromSalesLine."Quantity (Base)";
        REPEAT
          IF "Shipped Qty. Not Returned" = 0 THEN
            ERROR(Text030,"Document Type","Document No.","Document Line No.");
          FromSalesLineBuf := FromSalesLine;

          IF -"Shipped Qty. Not Returned" < ABS(FromSalesLine."Quantity (Base)") THEN BEGIN
            IF FromSalesLine."Quantity (Base)" > 0 THEN
              FromSalesLineBuf."Quantity (Base)" := -"Shipped Qty. Not Returned"
            ELSE
              FromSalesLineBuf."Quantity (Base)" := "Shipped Qty. Not Returned";
            IF FromSalesLineBuf."Qty. per Unit of Measure" = 0 THEN
              FromSalesLineBuf.Quantity := FromSalesLineBuf."Quantity (Base)"
            ELSE
              FromSalesLineBuf.Quantity :=
                ROUND(FromSalesLineBuf."Quantity (Base)" / FromSalesLineBuf."Qty. per Unit of Measure",0.00001);
          END;
          FromSalesLine."Quantity (Base)" := FromSalesLine."Quantity (Base)" - FromSalesLineBuf."Quantity (Base)";
          FromSalesLine.Quantity := FromSalesLine.Quantity - FromSalesLineBuf.Quantity;
          FromSalesLineBuf."Appl.-from Item Entry" := "Entry No.";
          FromSalesLineBuf."Line No." := NextLineNo;
          NextLineNo := NextLineNo + 1;
          FromSalesLineBuf."Document No." := "Document No.";
          IF GetSalesDocType(ItemLedgEntry) IN
             [FromSalesLineBuf."Document Type"::Order,FromSalesLineBuf."Document Type"::"Return Order"]
          THEN
            FromSalesLineBuf."Shipment Line No." := 1;

          IF NOT FromShptOrRcpt THEN
            UpdateRevSalesLineAmount(
              FromSalesLineBuf,OrgQtyBase,
              FromSalesHeader."Prices Including VAT",ToSalesHeader."Prices Including VAT");

          FromSalesLineBuf.INSERT;
        UNTIL (NEXT = 0) OR (FromSalesLine."Quantity (Base)" = 0);

        IF (FromSalesLine."Quantity (Base)" <> 0) AND FillExactCostRevLink THEN
          MissingExCostRevLink := TRUE;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SplitSalesDocLinesPerItemTrkg@57(VAR ItemLedgEntry@1003 : Record 32;VAR TempItemTrkgEntry@1002 : TEMPORARY Record 337;VAR FromSalesLineBuf@1004 : Record 37;FromSalesLine@1001 : Record 37;VAR NextLineNo@1009 : Integer;VAR NextItemTrkgEntryNo@1007 : Integer;VAR MissingExCostRevLink@1005 : Boolean;FromShptOrRcpt@1010 : Boolean) : Boolean;
    VAR
      SalesLineBuf@1008 : ARRAY [2] OF TEMPORARY Record 37;
      ReversibleQtyBase@1000 : Decimal;
      SignFactor@1006 : Integer;
      i@1012 : Integer;
    BEGIN
      IF FromShptOrRcpt THEN BEGIN
        FromSalesLineBuf.RESET;
        FromSalesLineBuf.DELETEALL;
        TempItemTrkgEntry.RESET;
        TempItemTrkgEntry.DELETEALL;
      END ELSE
        FromSalesLineBuf.INIT;

      IF MoveNegLines OR NOT ExactCostRevMandatory THEN
        EXIT(FALSE);

      IF FromSalesLine."Quantity (Base)" < 0 THEN
        SignFactor := -1
      ELSE
        SignFactor := 1;

      WITH ItemLedgEntry DO BEGIN
        SETCURRENTKEY("Document No.","Document Type","Document Line No.");
        FINDSET;
        REPEAT
          SalesLineBuf[1] := FromSalesLine;
          SalesLineBuf[1]."Line No." := NextLineNo;
          SalesLineBuf[1]."Quantity (Base)" := 0;
          SalesLineBuf[1].Quantity := 0;
          SalesLineBuf[1]."Document No." := "Document No.";
          IF GetSalesDocType(ItemLedgEntry) IN
             [SalesLineBuf[1]."Document Type"::Order,SalesLineBuf[1]."Document Type"::"Return Order"]
          THEN
            SalesLineBuf[1]."Shipment Line No." := 1;
          SalesLineBuf[2] := SalesLineBuf[1];
          SalesLineBuf[2]."Line No." := SalesLineBuf[2]."Line No." + 1;

          IF NOT FromShptOrRcpt THEN BEGIN
            SETRANGE("Document No.","Document No.");
            SETRANGE("Document Type","Document Type");
            SETRANGE("Document Line No.","Document Line No.");
          END;
          REPEAT
            i := 1;
            IF NOT Positive THEN
              "Shipped Qty. Not Returned" :=
                "Shipped Qty. Not Returned" -
                CalcDistributedQty(TempItemTrkgEntry,ItemLedgEntry,SalesLineBuf[2]."Line No." + 1);

            IF -"Shipped Qty. Not Returned" < FromSalesLine."Quantity (Base)" * SignFactor THEN
              ReversibleQtyBase := -"Shipped Qty. Not Returned" * SignFactor
            ELSE
              ReversibleQtyBase := FromSalesLine."Quantity (Base)";

            IF ReversibleQtyBase <> 0 THEN BEGIN
              IF NOT Positive THEN
                IF IsSplitItemLedgEntry(ItemLedgEntry) THEN
                  i := 2;

              SalesLineBuf[i]."Quantity (Base)" := SalesLineBuf[i]."Quantity (Base)" + ReversibleQtyBase;
              IF SalesLineBuf[i]."Qty. per Unit of Measure" = 0 THEN
                SalesLineBuf[i].Quantity := SalesLineBuf[i]."Quantity (Base)"
              ELSE
                SalesLineBuf[i].Quantity :=
                  ROUND(SalesLineBuf[i]."Quantity (Base)" / SalesLineBuf[i]."Qty. per Unit of Measure",0.00001);
              FromSalesLine."Quantity (Base)" := FromSalesLine."Quantity (Base)" - ReversibleQtyBase;

              // Fill buffer with exact cost reversing link
              InsertTempItemTrkgEntry(
                ItemLedgEntry,TempItemTrkgEntry,-ABS(ReversibleQtyBase),
                SalesLineBuf[i]."Line No.",NextItemTrkgEntryNo,TRUE);
            END;
          UNTIL (NEXT = 0) OR (FromSalesLine."Quantity (Base)" = 0);

          FOR i := 1 TO 2 DO
            IF SalesLineBuf[i]."Quantity (Base)" <> 0 THEN BEGIN
              FromSalesLineBuf := SalesLineBuf[i];
              FromSalesLineBuf.INSERT;
              NextLineNo := SalesLineBuf[i]."Line No." + 1;
            END;

          IF NOT FromShptOrRcpt THEN BEGIN
            SETRANGE("Document No.");
            SETRANGE("Document Type");
            SETRANGE("Document Line No.");
          END;
        UNTIL (NEXT = 0) OR FromShptOrRcpt;

        IF (FromSalesLine."Quantity (Base)" <> 0) AND NOT Positive AND TempItemTrkgEntry.ISEMPTY THEN
          MissingExCostRevLink := TRUE;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE CopyPurchRcptLinesToDoc@53(ToPurchHeader@1002 : Record 38;VAR FromPurchRcptLine@1001 : Record 121;VAR LinesNotCopied@1018 : Integer;VAR MissingExCostRevLink@1009 : Boolean);
    VAR
      ItemLedgEntry@1008 : Record 32;
      TempTrkgItemLedgEntry@1019 : TEMPORARY Record 32;
      FromPurchHeader@1006 : Record 38;
      FromPurchLine@1003 : Record 39;
      ToPurchLine@1010 : Record 39;
      FromPurchLineBuf@1007 : TEMPORARY Record 39;
      FromPurchRcptHeader@1005 : Record 120;
      FromPurchInvLine@1016 : Record 123;
      FromReturnShptLine@1014 : Record 6651;
      FromPurchCrMemoLine@1013 : Record 125;
      TempItemTrkgEntry@1022 : TEMPORARY Record 337;
      ItemTrackingMgt@1020 : Codeunit 6500;
      OldDocNo@1011 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1021 : Integer;
      FromLineCounter@1023 : Integer;
      ToLineCounter@1012 : Integer;
      CopyItemTrkg@1004 : Boolean;
      FillExactCostRevLink@1015 : Boolean;
      SplitLine@1017 : Boolean;
      CopyLine@1024 : Boolean;
      InsertDocNoLine@1025 : Boolean;
    BEGIN
      MissingExCostRevLink := FALSE;
      InitCurrency(ToPurchHeader."Currency Code");
      OpenWindow;

      WITH FromPurchRcptLine DO
        IF FINDSET THEN
          REPEAT
            FromLineCounter := FromLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(1,FromLineCounter);
            IF FromPurchRcptHeader."No." <> "Document No." THEN BEGIN
              FromPurchRcptHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            END;
            FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
            FillExactCostRevLink :=
              IsPurchFillExactCostRevLink(ToPurchHeader,0,FromPurchHeader."Currency Code");
            FromPurchLine.TRANSFERFIELDS(FromPurchRcptLine);
            FromPurchLine."Appl.-to Item Entry" := 0;

            IF "Document No." <> OldDocNo THEN BEGIN
              OldDocNo := "Document No.";
              InsertDocNoLine := TRUE;
            END;

            SplitLine := TRUE;
            FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
            IF NOT SplitPstdPurchLinesPerILE(
                 ToPurchHeader,FromPurchHeader,ItemLedgEntry,FromPurchLineBuf,
                 FromPurchLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,TRUE)
            THEN
              IF CopyItemTrkg THEN
                SplitLine :=
                  SplitPurchDocLinesPerItemTrkg(
                    ItemLedgEntry,TempItemTrkgEntry,FromPurchLineBuf,
                    FromPurchLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,TRUE)
              ELSE
                SplitLine := FALSE;

            IF NOT SplitLine THEN BEGIN
              FromPurchLineBuf := FromPurchLine;
              CopyLine := TRUE;
            END ELSE
              CopyLine := FromPurchLineBuf.FINDSET AND FillExactCostRevLink;

            Window.UPDATE(1,FromLineCounter);
            IF CopyLine THEN BEGIN
              NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
              IF InsertDocNoLine THEN BEGIN
                InsertOldPurchDocNoLine(ToPurchHeader,"Document No.",1,NextLineNo);
                InsertDocNoLine := FALSE;
              END;
              IF (FromPurchLineBuf.Type <> FromPurchLineBuf.Type::" ") OR
                 (FromPurchLineBuf."Attached to Line No." = 0)
              THEN
                REPEAT
                  ToLineCounter := ToLineCounter + 1;
                  IF IsTimeForUpdate THEN
                    Window.UPDATE(2,ToLineCounter);
                  IF FromPurchLine."Prod. Order No." <> '' THEN
                    FromPurchLine."Quantity (Base)" := 0;
                  IF CopyPurchLine(
                    ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLineBuf,NextLineNo,LinesNotCopied,FALSE)
                  THEN BEGIN
                    CopyFromPstdPurchDocDimToLine(
                      ToPurchLine,PurchDocType::"Posted Receipt",
                      FromPurchRcptLine,FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine);

                    IF CopyItemTrkg THEN BEGIN
                      IF SplitLine THEN BEGIN
                        TempItemTrkgEntry.RESET;
                        TempItemTrkgEntry.SETCURRENTKEY("Source ID","Source Ref. No.");
                        TempItemTrkgEntry.SETRANGE("Source ID",FromPurchLineBuf."Document No.");
                        TempItemTrkgEntry.SETRANGE("Source Ref. No.",FromPurchLineBuf."Line No.");
                        CollectItemTrkgPerPstDocLine(TempItemTrkgEntry,TempTrkgItemLedgEntry,TRUE);
                      END ELSE
                        ItemTrackingMgt.CollectItemTrkgPerPstdDocLine(TempTrkgItemLedgEntry,ItemLedgEntry);

                      ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(
                        TempTrkgItemLedgEntry,ToPurchLine,
                        FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                        FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",TRUE);
                    END;

                    CopyPurchRcptExtTextToDoc(
                      ToPurchHeader,ToPurchLine,FromPurchRcptLine,FromPurchHeader."Language Code",
                      NextLineNo,FromPurchLineBuf."Appl.-to Item Entry" <> 0);
                  END;
                UNTIL FromPurchLineBuf.NEXT = 0
            END;
          UNTIL NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CopyPurchRcptExtTextToDoc@49(ToPurchHeader@1003 : Record 38;ToPurchLine@1002 : Record 39;FromPurchRcptLine@1004 : Record 121;FromLanguageCode@1000 : Code[10];VAR NextLineNo@1006 : Integer;ExactCostReverse@1005 : Boolean);
    VAR
      ToPurchLine2@1001 : Record 39;
      FromPurchInvLine@1009 : Record 123;
      FromReturnShptLine@1008 : Record 6651;
      FromPurchCrMemoLine@1007 : Record 125;
    BEGIN
      ToPurchLine2.SETRANGE("Document No.",ToPurchLine."Document No.");
      ToPurchLine2.SETRANGE("Attached to Line No.",ToPurchLine."Line No.");
      IF ToPurchLine2.ISEMPTY THEN
        WITH FromPurchRcptLine DO BEGIN
          SETRANGE("Document No.","Document No.");
          SETRANGE("Attached to Line No.","Line No.");
          IF FINDSET THEN
            REPEAT
              IF (ToPurchHeader."Language Code" <> FromLanguageCode) OR
                 (RecalculateLines AND NOT ExactCostReverse)
              THEN BEGIN
                IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN BEGIN
                  TransferExtendedText.InsertPurchExtText(ToPurchLine);
                  NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
                END;
              END ELSE BEGIN
                CopyPurchExtTextLines(
                  ToPurchLine2,ToPurchLine,Description,"Description 2",NextLineNo);
                CopyFromPstdPurchDocDimToLine(
                  ToPurchLine2,PurchDocType::"Posted Receipt",FromPurchRcptLine,
                  FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine);
              END;
            UNTIL NEXT = 0;
        END;
    END;

    PROCEDURE CopyPurchInvLinesToDoc@52(ToPurchHeader@1002 : Record 38;VAR FromPurchInvLine@1001 : Record 123;VAR LinesNotCopied@1020 : Integer;VAR MissingExCostRevLink@1019 : Boolean);
    VAR
      ItemLedgEntryBuf@1018 : TEMPORARY Record 32;
      TempTrkgItemLedgEntry@1012 : TEMPORARY Record 32;
      FromPurchHeader@1006 : Record 38;
      FromPurchLine@1003 : Record 39;
      FromPurchLine2@1022 : Record 39;
      ToPurchLine@1010 : Record 39;
      FromPurchLineBuf@1007 : TEMPORARY Record 39;
      FromPurchInvHeader@1005 : Record 122;
      FromPurchRcptLine@1017 : Record 121;
      FromReturnShptLine@1016 : Record 6651;
      FromPurchCrMemoLine@1015 : Record 125;
      TempItemTrkgEntry@1009 : TEMPORARY Record 337;
      ItemTrackingMgt@1021 : Codeunit 6500;
      OldInvDocNo@1011 : Code[20];
      OldRcptDocNo@1023 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1024 : Integer;
      FromLineCounter@1025 : Integer;
      ToLineCounter@1013 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1008 : Boolean;
      FillExactCostRevLink@1014 : Boolean;
    BEGIN
      MissingExCostRevLink := FALSE;
      InitCurrency(ToPurchHeader."Currency Code");
      FromPurchLineBuf.RESET;
      FromPurchLineBuf.DELETEALL;
      TempItemTrkgEntry.RESET;
      TempItemTrkgEntry.DELETEALL;
      OpenWindow;

      // Fill purchase line buffer
      WITH FromPurchInvLine DO
        IF FINDSET THEN
          REPEAT
            FromLineCounter := FromLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(1,FromLineCounter);
            IF FromPurchInvHeader."No." <> "Document No." THEN BEGIN
              FromPurchInvHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            END;
            FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
            FillExactCostRevLink :=
              IsPurchFillExactCostRevLink(ToPurchHeader,1,FromPurchHeader."Currency Code");
            FromPurchLine.TRANSFERFIELDS(FromPurchInvLine);
            FromPurchLine."Appl.-to Item Entry" := 0;
            // Reuse fields to buffer invoice line information
            FromPurchLine."Receipt No." := "Document No.";
            FromPurchLine."Receipt Line No." := 0;
            FromPurchLine."Return Shipment No." := '';
            FromPurchLine."Return Shipment Line No." := "Line No.";

            SplitLine := TRUE;
            GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
            IF NOT SplitPstdPurchLinesPerILE(
                 ToPurchHeader,FromPurchHeader,ItemLedgEntryBuf,FromPurchLineBuf,
                 FromPurchLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,FALSE)
            THEN
              IF CopyItemTrkg THEN
                SplitLine :=
                  SplitPurchDocLinesPerItemTrkg(
                    ItemLedgEntryBuf,TempItemTrkgEntry,FromPurchLineBuf,
                    FromPurchLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,FALSE)
              ELSE
                SplitLine := FALSE;

            IF NOT SplitLine THEN BEGIN
              FromPurchLine2 := FromPurchLineBuf;
              FromPurchLineBuf := FromPurchLine;
              FromPurchLineBuf."Document No." := FromPurchLine2."Document No.";
              FromPurchLineBuf."Receipt Line No." := FromPurchLine2."Receipt Line No.";
              FromPurchLineBuf."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 1;
              IF NOT IsRecalculateAmount(
                   FromPurchHeader."Currency Code",ToPurchHeader."Currency Code",
                   FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT")
              THEN
                FromPurchLineBuf."Return Shipment No." := "Document No.";
              ReCalcPurchLine(FromPurchHeader,ToPurchHeader,FromPurchLineBuf);
              FromPurchLineBuf.INSERT;
            END;
          UNTIL NEXT = 0;

      // Create purchase line from buffer
      Window.UPDATE(1,FromLineCounter);
      WITH FromPurchLineBuf DO BEGIN
        // Sorting according to Purchase Line Document No.,Line No.
        SETCURRENTKEY("Document Type","Document No.","Line No.");
        IF FINDSET THEN BEGIN
          NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
          REPEAT
            ToLineCounter := ToLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(2,ToLineCounter);
            IF "Receipt No." <> OldInvDocNo THEN BEGIN
              OldInvDocNo := "Receipt No.";
              OldRcptDocNo := '';
              InsertOldPurchDocNoLine(ToPurchHeader,OldInvDocNo,2,NextLineNo);
            END;
            IF "Document No." <> OldRcptDocNo THEN BEGIN
              OldRcptDocNo := "Document No.";
              InsertOldPurchCombDocNoLine(ToPurchHeader,OldInvDocNo,OldRcptDocNo,NextLineNo,TRUE);
            END;

            IF (Type <> Type::" ") OR ("Attached to Line No." = 0) THEN BEGIN
              // Empty buffer fields
              FromPurchLine2 := FromPurchLineBuf;
              FromPurchLine2."Receipt No." := '';
              FromPurchLine2."Receipt Line No." := 0;
              FromPurchLine2."Return Shipment No." := '';
              FromPurchLine2."Return Shipment Line No." := 0;

              IF CopyPurchLine(
                ToPurchHeader,ToPurchLine,FromPurchHeader,
                FromPurchLine2,NextLineNo,LinesNotCopied,"Return Shipment No." = '')
              THEN BEGIN
                FromPurchInvLine.GET("Receipt No.","Return Shipment Line No.");
                CopyFromPstdPurchDocDimToLine(
                  ToPurchLine,PurchDocType::"Posted Invoice",
                  FromPurchRcptLine,FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine);

                // copy item tracking
                IF (Type = Type::Item) AND (Quantity <> 0) AND ("Prod. Order No." = '') THEN BEGIN
                  FromPurchInvLine."Document No." := OldInvDocNo;
                  FromPurchInvLine."Line No." := "Return Shipment Line No.";
                  FromPurchInvLine.GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
                  IF IsCopyItemTrkg(ItemLedgEntryBuf,CopyItemTrkg,FillExactCostRevLink) THEN BEGIN
                    IF ("Job No." <> '') THEN
                      ItemLedgEntryBuf.SETFILTER("Entry Type",'<> %1',ItemLedgEntryBuf."Entry Type"::"Negative Adjmt.");
                    IF MoveNegLines OR NOT ExactCostRevMandatory THEN
                      ItemTrackingMgt.CollectItemTrkgPerPstdDocLine(TempTrkgItemLedgEntry,ItemLedgEntryBuf)
                    ELSE BEGIN
                      TempItemTrkgEntry.RESET;
                      TempItemTrkgEntry.SETCURRENTKEY("Source ID","Source Ref. No.");
                      TempItemTrkgEntry.SETRANGE("Source ID","Document No.");
                      TempItemTrkgEntry.SETRANGE("Source Ref. No.","Line No.");
                      CollectItemTrkgPerPstDocLine(TempItemTrkgEntry,TempTrkgItemLedgEntry,TRUE);
                    END;

                    ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(
                      TempTrkgItemLedgEntry,ToPurchLine,
                      FillExactCostRevLink AND ExactCostRevMandatory,
                      MissingExCostRevLink,FromPurchHeader."Prices Including VAT",
                      ToPurchHeader."Prices Including VAT",FALSE);
                  END;
                END;

                CopyPurchInvExtTextToDoc(
                  ToPurchHeader,ToPurchLine,FromPurchHeader."Language Code","Receipt No.",
                  "Return Shipment Line No.",NextLineNo,"Appl.-to Item Entry" <> 0);
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CopyPurchInvExtTextToDoc@64(ToPurchHeader@1003 : Record 38;ToPurchLine@1002 : Record 39;FromLanguageCode@1000 : Code[10];FromInvDocNo@1010 : Code[20];FromInvDocLineNo@1004 : Integer;VAR NextLineNo@1006 : Integer;ExactCostReverse@1005 : Boolean);
    VAR
      ToPurchLine2@1001 : Record 39;
      FromPurchRcptLine@1009 : Record 121;
      FromPurchInvLine@1011 : Record 123;
      FromReturnShptLine@1008 : Record 6651;
      FromPurchCrMemoLine@1007 : Record 125;
    BEGIN
      ToPurchLine2.SETRANGE("Document No.",ToPurchLine."Document No.");
      ToPurchLine2.SETRANGE("Attached to Line No.",ToPurchLine."Line No.");
      IF ToPurchLine2.ISEMPTY THEN
        WITH FromPurchInvLine DO BEGIN
          SETRANGE("Document No.",FromInvDocNo);
          SETRANGE("Attached to Line No.",FromInvDocLineNo);
          IF FINDSET THEN
            REPEAT
              IF (ToPurchHeader."Language Code" <> FromLanguageCode) OR
                 (RecalculateLines AND NOT ExactCostReverse)
              THEN BEGIN
                IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN BEGIN
                  TransferExtendedText.InsertPurchExtText(ToPurchLine);
                  NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
                END;
              END ELSE BEGIN
                CopyPurchExtTextLines(
                  ToPurchLine2,ToPurchLine,Description,"Description 2",NextLineNo);
                CopyFromPstdPurchDocDimToLine(
                  ToPurchLine2,PurchDocType::"Posted Invoice",FromPurchRcptLine,
                  FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine);
              END;
            UNTIL NEXT = 0;
        END;
    END;

    PROCEDURE CopyPurchCrMemoLinesToDoc@51(ToPurchHeader@1002 : Record 38;VAR FromPurchCrMemoLine@1001 : Record 125;VAR LinesNotCopied@1020 : Integer;VAR MissingExCostRevLink@1019 : Boolean);
    VAR
      ItemLedgEntryBuf@1008 : TEMPORARY Record 32;
      TempTrkgItemLedgEntry@1018 : TEMPORARY Record 32;
      FromPurchHeader@1006 : Record 38;
      FromPurchLine@1003 : Record 39;
      FromPurchLine2@1022 : Record 39;
      ToPurchLine@1010 : Record 39;
      FromPurchLineBuf@1007 : TEMPORARY Record 39;
      FromPurchCrMemoHeader@1005 : Record 124;
      FromPurchRcptLine@1017 : Record 121;
      FromReturnShptLine@1016 : Record 6651;
      FromPurchInvLine@1015 : Record 123;
      TempItemTrkgEntry@1021 : TEMPORARY Record 337;
      ItemTrackingMgt@1009 : Codeunit 6500;
      OldCrMemoDocNo@1011 : Code[20];
      OldReturnShptDocNo@1023 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1024 : Integer;
      FromLineCounter@1025 : Integer;
      ToLineCounter@1013 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1012 : Boolean;
      FillExactCostRevLink@1014 : Boolean;
    BEGIN
      MissingExCostRevLink := FALSE;
      InitCurrency(ToPurchHeader."Currency Code");
      FromPurchLineBuf.RESET;
      FromPurchLineBuf.DELETEALL;
      TempItemTrkgEntry.RESET;
      TempItemTrkgEntry.DELETEALL;
      OpenWindow;

      // Fill purchase line buffer
      WITH FromPurchCrMemoLine DO
        IF FINDSET THEN
          REPEAT
            FromLineCounter := FromLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(1,FromLineCounter);
            IF FromPurchCrMemoHeader."No." <> "Document No." THEN BEGIN
              FromPurchCrMemoHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            END;
            FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
            FillExactCostRevLink :=
              IsPurchFillExactCostRevLink(ToPurchHeader,3,FromPurchHeader."Currency Code");
            FromPurchLine.TRANSFERFIELDS(FromPurchCrMemoLine);
            FromPurchLine."Appl.-to Item Entry" := 0;
            // Reuse fields to buffer credit memo line information
            FromPurchLine."Receipt No." := "Document No.";
            FromPurchLine."Receipt Line No." := 0;
            FromPurchLine."Return Shipment No." := '';
            FromPurchLine."Return Shipment Line No." := "Line No.";

            SplitLine := TRUE;
            GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
            IF NOT SplitPstdPurchLinesPerILE(
                 ToPurchHeader,FromPurchHeader,ItemLedgEntryBuf,FromPurchLineBuf,
                 FromPurchLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,FALSE)
            THEN
              IF CopyItemTrkg THEN
                SplitLine :=
                  SplitPurchDocLinesPerItemTrkg(
                    ItemLedgEntryBuf,TempItemTrkgEntry,FromPurchLineBuf,
                    FromPurchLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,FALSE)
              ELSE
                SplitLine := FALSE;

            IF NOT SplitLine THEN BEGIN
              FromPurchLine2 := FromPurchLineBuf;
              FromPurchLineBuf := FromPurchLine;
              FromPurchLineBuf."Document No." := FromPurchLine2."Document No.";
              FromPurchLineBuf."Receipt Line No." := FromPurchLine2."Receipt Line No.";
              FromPurchLineBuf."Line No." := NextLineNo;
              NextLineNo := NextLineNo + 1;
              IF NOT IsRecalculateAmount(
                   FromPurchHeader."Currency Code",ToPurchHeader."Currency Code",
                   FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT")
              THEN
                FromPurchLineBuf."Return Shipment No." := "Document No.";
              ReCalcPurchLine(FromPurchHeader,ToPurchHeader,FromPurchLineBuf);
              FromPurchLineBuf.INSERT;
            END;

          UNTIL NEXT = 0;

      // Create purchase line from buffer
      Window.UPDATE(1,FromLineCounter);
      WITH FromPurchLineBuf DO BEGIN
        // Sorting according to Purchase Line Document No.,Line No.
        SETCURRENTKEY("Document Type","Document No.","Line No.");
        IF FINDSET THEN BEGIN
          NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
          REPEAT
            ToLineCounter := ToLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(2,ToLineCounter);
            IF "Receipt No." <> OldCrMemoDocNo THEN BEGIN
              OldCrMemoDocNo := "Receipt No.";
              OldReturnShptDocNo := '';
              InsertOldPurchDocNoLine(ToPurchHeader,OldCrMemoDocNo,4,NextLineNo);
            END;
            IF "Document No." <> OldReturnShptDocNo THEN BEGIN
              OldReturnShptDocNo := "Document No.";
              InsertOldPurchCombDocNoLine(ToPurchHeader,OldCrMemoDocNo,OldReturnShptDocNo,NextLineNo,FALSE);
            END;

            IF (Type <> Type::" ") OR ("Attached to Line No." = 0) THEN BEGIN
              // Empty buffer fields
              FromPurchLine2 := FromPurchLineBuf;
              FromPurchLine2."Receipt No." := '';
              FromPurchLine2."Receipt Line No." := 0;
              FromPurchLine2."Return Shipment No." := '';
              FromPurchLine2."Return Shipment Line No." := 0;

              IF CopyPurchLine(
                ToPurchHeader,ToPurchLine,FromPurchHeader,
                FromPurchLine2,NextLineNo,LinesNotCopied,"Return Shipment No." = '')
              THEN BEGIN
                FromPurchCrMemoLine.GET("Receipt No.","Return Shipment Line No.");
                CopyFromPstdPurchDocDimToLine(
                  ToPurchLine,PurchDocType::"Posted Credit Memo",
                  FromPurchRcptLine,FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine);

                // copy item tracking
                IF (Type = Type::Item) AND (Quantity <> 0) AND ("Prod. Order No." = '') THEN BEGIN
                  FromPurchCrMemoLine."Document No." := OldCrMemoDocNo;
                  FromPurchCrMemoLine."Line No." := "Return Shipment Line No.";
                  FromPurchCrMemoLine.GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
                  IF IsCopyItemTrkg(ItemLedgEntryBuf,CopyItemTrkg,FillExactCostRevLink) THEN BEGIN
                    IF ("Job No." <> '') THEN
                      ItemLedgEntryBuf.SETFILTER("Entry Type",'<> %1',ItemLedgEntryBuf."Entry Type"::"Negative Adjmt.");
                    IF MoveNegLines OR NOT ExactCostRevMandatory THEN
                      ItemTrackingMgt.CollectItemTrkgPerPstdDocLine(TempTrkgItemLedgEntry,ItemLedgEntryBuf)
                    ELSE BEGIN
                      TempItemTrkgEntry.RESET;
                      TempItemTrkgEntry.SETCURRENTKEY("Source ID","Source Ref. No.");
                      TempItemTrkgEntry.SETRANGE("Source ID","Document No.");
                      TempItemTrkgEntry.SETRANGE("Source Ref. No.","Line No.");
                      CollectItemTrkgPerPstDocLine(TempItemTrkgEntry,TempTrkgItemLedgEntry,TRUE);
                    END;

                    ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(
                      TempTrkgItemLedgEntry,ToPurchLine,
                      FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                      FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",FALSE);
                  END;
                END;

                CopyPurchInvExtTextToDoc(
                  ToPurchHeader,ToPurchLine,FromPurchHeader."Language Code","Receipt No.",
                  "Return Shipment Line No.",NextLineNo,"Appl.-to Item Entry" <> 0);

              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CopyPurchCrMemoExtTextToDoc@73(ToPurchHeader@1003 : Record 38;ToPurchLine@1002 : Record 39;FromLanguageCode@1000 : Code[10];FromCrMemoDocNo@1011 : Code[20];FromCrMemoDocLineNo@1004 : Integer;VAR NextLineNo@1006 : Integer;ExactCostReverse@1005 : Boolean);
    VAR
      ToPurchLine2@1001 : Record 39;
      FromPurchRcptLine@1009 : Record 121;
      FromPurchInvLine@1010 : Record 123;
      FromPurchCrMemoLine@1007 : Record 125;
      FromReturnShptLine@1008 : Record 6651;
    BEGIN
      ToPurchLine2.SETRANGE("Document No.",ToPurchLine."Document No.");
      ToPurchLine2.SETRANGE("Attached to Line No.",ToPurchLine."Line No.");
      IF ToPurchLine2.ISEMPTY THEN
        WITH FromPurchCrMemoLine DO BEGIN
          SETRANGE("Document No.",FromCrMemoDocNo);
          SETRANGE("Attached to Line No.",FromCrMemoDocLineNo);
          IF FINDSET THEN
            REPEAT
              IF (ToPurchHeader."Language Code" <> FromLanguageCode) OR
                 (RecalculateLines AND NOT ExactCostReverse)
              THEN BEGIN
                IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN BEGIN
                  TransferExtendedText.InsertPurchExtText(ToPurchLine);
                  NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
                END;
              END ELSE BEGIN
                CopyPurchExtTextLines(
                  ToPurchLine2,ToPurchLine,Description,"Description 2",NextLineNo);
                CopyFromPstdPurchDocDimToLine(
                  ToPurchLine2,PurchDocType::"Posted Credit Memo",FromPurchRcptLine,
                  FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine);
              END;
            UNTIL NEXT = 0;
        END;
    END;

    PROCEDURE CopyPurchReturnShptLinesToDoc@50(ToPurchHeader@1002 : Record 38;VAR FromReturnShptLine@1001 : Record 6651;VAR LinesNotCopied@1018 : Integer;VAR MissingExCostRevLink@1009 : Boolean);
    VAR
      ItemLedgEntry@1008 : Record 32;
      TempTrkgItemLedgEntry@1020 : TEMPORARY Record 32;
      FromPurchHeader@1006 : Record 38;
      FromPurchLine@1003 : Record 39;
      ToPurchLine@1010 : Record 39;
      FromPurchLineBuf@1007 : TEMPORARY Record 39;
      FromReturnShptHeader@1005 : Record 6650;
      FromPurchRcptLine@1014 : Record 121;
      FromPurchInvLine@1016 : Record 123;
      FromPurchCrMemoLine@1013 : Record 125;
      TempItemTrkgEntry@1022 : TEMPORARY Record 337;
      ItemTrackingMgt@1019 : Codeunit 6500;
      OldDocNo@1011 : Code[20];
      NextLineNo@1000 : Integer;
      NextItemTrkgEntryNo@1021 : Integer;
      FromLineCounter@1023 : Integer;
      ToLineCounter@1012 : Integer;
      CopyItemTrkg@1004 : Boolean;
      SplitLine@1017 : Boolean;
      FillExactCostRevLink@1015 : Boolean;
      CopyLine@1025 : Boolean;
      InsertDocNoLine@1024 : Boolean;
    BEGIN
      MissingExCostRevLink := FALSE;
      InitCurrency(ToPurchHeader."Currency Code");
      OpenWindow;

      WITH FromReturnShptLine DO
        IF FINDSET THEN
          REPEAT
            FromLineCounter := FromLineCounter + 1;
            IF IsTimeForUpdate THEN
              Window.UPDATE(1,FromLineCounter);
            IF FromReturnShptHeader."No." <> "Document No." THEN BEGIN
              FromReturnShptHeader.GET("Document No.");
              TransferOldExtLines.ClearLineNumbers;
            END;
            FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
            FillExactCostRevLink :=
              IsPurchFillExactCostRevLink(ToPurchHeader,2,FromPurchHeader."Currency Code");
            FromPurchLine.TRANSFERFIELDS(FromReturnShptLine);
            FromPurchLine."Appl.-to Item Entry" := 0;

            IF "Document No." <> OldDocNo THEN BEGIN
              OldDocNo := "Document No.";
              InsertDocNoLine := TRUE;
            END;

            SplitLine := TRUE;
            FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
            IF NOT SplitPstdPurchLinesPerILE(
                 ToPurchHeader,FromPurchHeader,ItemLedgEntry,FromPurchLineBuf,
                 FromPurchLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,FillExactCostRevLink,TRUE)
            THEN
              IF CopyItemTrkg THEN
                SplitLine :=
                  SplitPurchDocLinesPerItemTrkg(
                    ItemLedgEntry,TempItemTrkgEntry,FromPurchLineBuf,
                    FromPurchLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,TRUE)
              ELSE
                SplitLine := FALSE;

            IF NOT SplitLine THEN BEGIN
              FromPurchLineBuf := FromPurchLine;
              CopyLine := TRUE;
            END ELSE
              CopyLine := FromPurchLineBuf.FINDSET AND FillExactCostRevLink;

            Window.UPDATE(1,FromLineCounter);
            IF CopyLine THEN BEGIN
              NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
              IF InsertDocNoLine THEN BEGIN
                InsertOldPurchDocNoLine(ToPurchHeader,"Document No.",3,NextLineNo);
                InsertDocNoLine := FALSE;
              END;
              IF (FromPurchLineBuf.Type <> FromPurchLineBuf.Type::" ") OR
                 (FromPurchLineBuf."Attached to Line No." = 0)
              THEN
                REPEAT
                  ToLineCounter := ToLineCounter + 1;
                  IF IsTimeForUpdate THEN
                    Window.UPDATE(2,ToLineCounter);
                  IF CopyPurchLine(
                    ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLineBuf,NextLineNo,LinesNotCopied,FALSE)
                  THEN BEGIN
                    CopyFromPstdPurchDocDimToLine(
                      ToPurchLine,PurchDocType::"Posted Return Shipment",
                      FromPurchRcptLine,FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine);

                    IF CopyItemTrkg THEN BEGIN
                      IF SplitLine THEN BEGIN
                        TempItemTrkgEntry.RESET;
                        TempItemTrkgEntry.SETCURRENTKEY("Source ID","Source Ref. No.");
                        TempItemTrkgEntry.SETRANGE("Source ID",FromPurchLineBuf."Document No.");
                        TempItemTrkgEntry.SETRANGE("Source Ref. No.",FromPurchLineBuf."Line No.");
                        CollectItemTrkgPerPstDocLine(TempItemTrkgEntry,TempTrkgItemLedgEntry,TRUE);
                      END ELSE
                        ItemTrackingMgt.CollectItemTrkgPerPstdDocLine(TempTrkgItemLedgEntry,ItemLedgEntry);

                      ItemTrackingMgt.CopyItemLedgEntryTrkgToPurchLn(
                        TempTrkgItemLedgEntry,ToPurchLine,
                        FillExactCostRevLink AND ExactCostRevMandatory,MissingExCostRevLink,
                        FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT",TRUE);
                    END;

                    CopyPurchReturnShptExtTxtToDoc(
                      ToPurchHeader,ToPurchLine,FromReturnShptLine,FromPurchHeader."Language Code",
                      NextLineNo,FromPurchLineBuf."Appl.-to Item Entry" <> 0);
                  END;
                UNTIL FromPurchLineBuf.NEXT = 0
            END;
          UNTIL NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE CopyPurchReturnShptExtTxtToDoc@78(ToPurchHeader@1003 : Record 38;ToPurchLine@1002 : Record 39;FromReturnShptLine@1004 : Record 6651;FromLanguageCode@1000 : Code[10];VAR NextLineNo@1006 : Integer;ExactCostReverse@1005 : Boolean);
    VAR
      ToPurchLine2@1001 : Record 39;
      FromPurchRcptLine@1009 : Record 121;
      FromPurchInvLine@1008 : Record 123;
      FromPurchCrMemoLine@1007 : Record 125;
    BEGIN
      ToPurchLine2.SETRANGE("Document No.",ToPurchLine."Document No.");
      ToPurchLine2.SETRANGE("Attached to Line No.",ToPurchLine."Line No.");
      IF ToPurchLine2.ISEMPTY THEN
        WITH FromReturnShptLine DO BEGIN
          SETRANGE("Document No.","Document No.");
          SETRANGE("Attached to Line No.","Line No.");
          IF FINDSET THEN
            REPEAT
              IF (ToPurchHeader."Language Code" <> FromLanguageCode) OR
                 (RecalculateLines AND NOT ExactCostReverse)
              THEN BEGIN
                IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN BEGIN
                  TransferExtendedText.InsertPurchExtText(ToPurchLine);
                  NextLineNo := GetLastToPurchLineNo(ToPurchHeader);
                END;
              END ELSE BEGIN
                CopyPurchExtTextLines(
                  ToPurchLine2,ToPurchLine,Description,"Description 2",NextLineNo);
                CopyFromPstdPurchDocDimToLine(
                  ToPurchLine2,PurchDocType::"Posted Return Shipment",FromPurchRcptLine,
                  FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine);
              END;
            UNTIL NEXT = 0;
        END;
    END;

    LOCAL PROCEDURE SplitPstdPurchLinesPerILE@55(ToPurchHeader@1008 : Record 38;FromPurchHeader@1009 : Record 38;VAR ItemLedgEntry@1003 : Record 32;VAR FromPurchLineBuf@1004 : Record 39;FromPurchLine@1001 : Record 39;VAR NextLineNo@1006 : Integer;VAR CopyItemTrkg@1002 : Boolean;VAR MissingExCostRevLink@1005 : Boolean;FillExactCostRevLink@1000 : Boolean;FromShptOrRcpt@1010 : Boolean) : Boolean;
    VAR
      OrgQtyBase@1007 : Decimal;
      ApplyRec@1011 : Record 339;
      AllAreFixed@1012 : Boolean;
    BEGIN
      IF FromShptOrRcpt THEN BEGIN
        FromPurchLineBuf.RESET;
        FromPurchLineBuf.DELETEALL;
      END ELSE
        FromPurchLineBuf.INIT;

      CopyItemTrkg := FALSE;

      IF (FromPurchLine.Type <> FromPurchLine.Type::Item) OR (FromPurchLine.Quantity = 0) OR
         (FromPurchLine."Job No." <> '') OR (FromPurchLine."Prod. Order No." <> '')
      THEN
        EXIT(FALSE);
      IF IsCopyItemTrkg(ItemLedgEntry,CopyItemTrkg,FillExactCostRevLink) OR
         NOT FillExactCostRevLink OR MoveNegLines OR
         NOT ExactCostRevMandatory
      THEN
        EXIT(FALSE);

      WITH ItemLedgEntry DO BEGIN
        FINDSET;
        IF Quantity <= 0 THEN BEGIN
          FromPurchLineBuf."Document No." := "Document No.";
          IF GetPurchDocType(ItemLedgEntry) IN
             [FromPurchLineBuf."Document Type"::Order,FromPurchLineBuf."Document Type"::"Return Order"]
          THEN
            FromPurchLineBuf."Receipt Line No." := 1;
          EXIT(FALSE);
        END;
        OrgQtyBase := FromPurchLine."Quantity (Base)";
        REPEAT
          IF "Remaining Quantity" = 0 THEN BEGIN
            AllAreFixed := TRUE;
            ApplyRec.AppliedOutbndEntryExists("Entry No.",FALSE);
            IF ApplyRec.FINDFIRST THEN
              REPEAT
                AllAreFixed := AllAreFixed AND ApplyRec.Fixed;
              UNTIL ApplyRec.NEXT = 0;
            IF AllAreFixed THEN
              ERROR(Text030,"Document Type","Document No.","Document Line No.");
          END;
          IF NOT ApplyFully THEN BEGIN
            ApplyRec.AppliedOutbndEntryExists("Entry No.",FALSE);
            IF ApplyRec.FINDFIRST THEN
              SkippedLine := SkippedLine OR ApplyRec.FINDFIRST;
          END;
          IF ApplyFully THEN BEGIN
            ApplyRec.AppliedOutbndEntryExists("Entry No.",FALSE);
            IF ApplyRec.FINDFIRST THEN
              REPEAT
                SomeAreFixed := SomeAreFixed OR ApplyRec.Fixed;
              UNTIL ApplyRec.NEXT = 0;
          END;

          IF AskApply AND ("Item Tracking" = "Item Tracking"::None) THEN
            IF NOT ("Remaining Quantity" > 0) OR ("Item Tracking"<>"Item Tracking"::None) THEN ConfirmApply;
          IF AskApply THEN
            IF "Remaining Quantity" < ABS(FromPurchLine."Quantity (Base)") THEN ConfirmApply;
          IF ("Remaining Quantity" > 0) OR ApplyFully THEN BEGIN
            FromPurchLineBuf := FromPurchLine;
            IF "Remaining Quantity" < ABS(FromPurchLine."Quantity (Base)") THEN BEGIN
              IF NOT ApplyFully THEN BEGIN
                IF FromPurchLine."Quantity (Base)" > 0 THEN
                  FromPurchLineBuf."Quantity (Base)" := "Remaining Quantity"
                ELSE
                  FromPurchLineBuf."Quantity (Base)" := -"Remaining Quantity";
                ConvertFromBase(
                  FromPurchLineBuf.Quantity,FromPurchLineBuf."Quantity (Base)",FromPurchLineBuf."Qty. per Unit of Measure");
              END
              ELSE
              BEGIN
                ReappDone := TRUE;
                FromPurchLineBuf."Quantity (Base)" := FromPurchLine."Quantity (Base)" - ApplyRec.Returned("Entry No.");
                FromPurchLineBuf."Quantity (Base)" :=
                  Sign(ItemLedgEntry.Quantity) * ItemLedgEntry.Quantity - ApplyRec.Returned("Entry No.");
                ConvertFromBase(
                  FromPurchLineBuf.Quantity,FromPurchLineBuf."Quantity (Base)",FromPurchLineBuf."Qty. per Unit of Measure");
              END;
            END;
            FromPurchLine."Quantity (Base)" := FromPurchLine."Quantity (Base)" - FromPurchLineBuf."Quantity (Base)";
            FromPurchLine.Quantity := FromPurchLine.Quantity - FromPurchLineBuf.Quantity;
            FromPurchLineBuf."Appl.-to Item Entry" := "Entry No.";
            FromPurchLineBuf."Line No." := NextLineNo;
            NextLineNo := NextLineNo + 1;
            FromPurchLineBuf."Document No." := "Document No.";
            IF GetPurchDocType(ItemLedgEntry) IN
               [FromPurchLineBuf."Document Type"::Order,FromPurchLineBuf."Document Type"::"Return Order"]
            THEN
              FromPurchLineBuf."Receipt Line No." := 1;

            IF NOT FromShptOrRcpt THEN
              UpdateRevPurchLineAmount(
                FromPurchLineBuf,OrgQtyBase,
                FromPurchHeader."Prices Including VAT",ToPurchHeader."Prices Including VAT");
            IF (FromPurchLineBuf.Quantity <> 0) THEN
              FromPurchLineBuf.INSERT
            ELSE
              SkippedLine := TRUE;
          END
          ELSE
          IF "Remaining Quantity" = 0 THEN
            SkippedLine := TRUE;
        UNTIL (NEXT = 0) OR (FromPurchLine."Quantity (Base)" = 0);

        IF (FromPurchLine."Quantity (Base)" <> 0) AND FillExactCostRevLink THEN
          MissingExCostRevLink := TRUE;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SplitPurchDocLinesPerItemTrkg@59(VAR ItemLedgEntry@1003 : Record 32;VAR TempItemTrkgEntry@1009 : TEMPORARY Record 337;VAR FromPurchLineBuf@1004 : Record 39;FromPurchLine@1001 : Record 39;VAR NextLineNo@1008 : Integer;VAR NextItemTrkgEntryNo@1002 : Integer;VAR MissingExCostRevLink@1005 : Boolean;FromShptOrRcpt@1007 : Boolean) : Boolean;
    VAR
      PurchLineBuf@1012 : ARRAY [2] OF TEMPORARY Record 39;
      RemainingQtyBase@1000 : Decimal;
      SignFactor@1006 : Integer;
      i@1013 : Integer;
      ApplyRec@1010 : Record 339;
    BEGIN
      IF FromShptOrRcpt THEN BEGIN
        FromPurchLineBuf.RESET;
        FromPurchLineBuf.DELETEALL;
        TempItemTrkgEntry.RESET;
        TempItemTrkgEntry.DELETEALL;
      END ELSE
        FromPurchLineBuf.INIT;

      IF MoveNegLines OR NOT ExactCostRevMandatory THEN
        EXIT(FALSE);

      IF FromPurchLine."Quantity (Base)" < 0 THEN
        SignFactor := -1
      ELSE
        SignFactor := 1;

      WITH ItemLedgEntry DO BEGIN
        SETCURRENTKEY("Document No.","Document Type","Document Line No.");
        FINDSET;
        REPEAT
          PurchLineBuf[1] := FromPurchLine;
          PurchLineBuf[1]."Line No." := NextLineNo;
          PurchLineBuf[1]."Quantity (Base)" := 0;
          PurchLineBuf[1].Quantity := 0;
          PurchLineBuf[1]."Document No." := "Document No.";
          IF GetPurchDocType(ItemLedgEntry) IN
             [PurchLineBuf[1]."Document Type"::Order,PurchLineBuf[1]."Document Type"::"Return Order"]
          THEN
            PurchLineBuf[1]."Receipt Line No." := 1;
          PurchLineBuf[2] := PurchLineBuf[1];
          PurchLineBuf[2]."Line No." := PurchLineBuf[2]."Line No." + 1;

          IF NOT FromShptOrRcpt THEN BEGIN
            SETRANGE("Document No.","Document No.");
            SETRANGE("Document Type","Document Type");
            SETRANGE("Document Line No.","Document Line No.");
          END;
          REPEAT
            i := 1;
            IF Positive THEN
              "Remaining Quantity" :=
                "Remaining Quantity" -
                CalcDistributedQty(TempItemTrkgEntry,ItemLedgEntry,PurchLineBuf[2]."Line No." + 1);

            IF "Remaining Quantity" < FromPurchLine."Quantity (Base)" * SignFactor THEN BEGIN
              IF ("Item Tracking"="Item Tracking"::None) AND AskApply THEN ConfirmApply;
              IF (NOT ApplyFully) OR ("Item Tracking"<>"Item Tracking"::None) THEN
                RemainingQtyBase := "Remaining Quantity" * SignFactor
              ELSE
                RemainingQtyBase := FromPurchLine."Quantity (Base)" - ApplyRec.Returned("Entry No.");
            END ELSE
              RemainingQtyBase := FromPurchLine."Quantity (Base)";

            IF RemainingQtyBase <> 0 THEN BEGIN
              IF Positive THEN
                IF IsSplitItemLedgEntry(ItemLedgEntry) THEN
                  i := 2;

              PurchLineBuf[i]."Quantity (Base)" := PurchLineBuf[i]."Quantity (Base)" + RemainingQtyBase;
              IF PurchLineBuf[i]."Qty. per Unit of Measure" = 0 THEN
                PurchLineBuf[i].Quantity := PurchLineBuf[i]."Quantity (Base)"
              ELSE
                PurchLineBuf[i].Quantity :=
                  ROUND(PurchLineBuf[i]."Quantity (Base)" / PurchLineBuf[i]."Qty. per Unit of Measure",0.00001);
              FromPurchLine."Quantity (Base)" := FromPurchLine."Quantity (Base)" - RemainingQtyBase;

              // Fill buffer with exact cost reversing link for remaining quantity
              InsertTempItemTrkgEntry(
                ItemLedgEntry,TempItemTrkgEntry,ABS(RemainingQtyBase),
                PurchLineBuf[i]."Line No.",NextItemTrkgEntryNo,TRUE);
            END;
          UNTIL (NEXT = 0) OR (FromPurchLine."Quantity (Base)" = 0);

          FOR i := 1 TO 2 DO
            IF PurchLineBuf[i]."Quantity (Base)" <> 0 THEN BEGIN
              FromPurchLineBuf := PurchLineBuf[i];
              FromPurchLineBuf.INSERT;
              NextLineNo := PurchLineBuf[i]."Line No." + 1;
            END;

          IF NOT FromShptOrRcpt THEN BEGIN
            SETRANGE("Document No.");
            SETRANGE("Document Type");
            SETRANGE("Document Line No.");
          END;
        UNTIL (NEXT = 0) OR FromShptOrRcpt;
        IF (FromPurchLine."Quantity (Base)" <> 0) AND Positive AND TempItemTrkgEntry.ISEMPTY THEN
          MissingExCostRevLink := TRUE;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CalcDistributedQty@76(VAR TempItemTrkgEntry@1000 : TEMPORARY Record 337;ItemLedgEntry@1002 : Record 32;NextLineNo@1001 : Integer) : Decimal;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        TempItemTrkgEntry.RESET;
        TempItemTrkgEntry.SETCURRENTKEY("Source ID","Source Ref. No.");
        TempItemTrkgEntry.SETRANGE("Source ID","Document No.");
        TempItemTrkgEntry.SETFILTER("Source Ref. No.",'<%1',NextLineNo);
        TempItemTrkgEntry.SETRANGE("Appl.-to Item Entry","Entry No.");
        TempItemTrkgEntry.CALCSUMS("Quantity (Base)");
        TempItemTrkgEntry.RESET;
        EXIT(TempItemTrkgEntry."Quantity (Base)");
      END;
    END;

    LOCAL PROCEDURE IsSplitItemLedgEntry@83(OrgItemLedgEntry@1000 : Record 32) : Boolean;
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH OrgItemLedgEntry DO BEGIN
        ItemLedgEntry.SETCURRENTKEY("Document No.");
        ItemLedgEntry.SETRANGE("Document No.","Document No.");
        ItemLedgEntry.SETRANGE("Document Type","Document Type");
        ItemLedgEntry.SETRANGE("Document Line No.","Document Line No.");
        ItemLedgEntry.SETRANGE("Lot No.","Lot No.");
        ItemLedgEntry.SETRANGE("Serial No.","Serial No.");
        ItemLedgEntry.SETFILTER("Entry No.",'<%1',"Entry No.");
        EXIT(NOT ItemLedgEntry.ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE IsCopyItemTrkg@33(VAR ItemLedgEntry@1000 : Record 32;VAR CopyItemTrkg@1001 : Boolean;FillExactCostRevLink@1002 : Boolean) : Boolean;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        IF ISEMPTY THEN
          EXIT(TRUE);
        SETFILTER("Lot No.",'<>''''');
        IF NOT ISEMPTY THEN BEGIN
          IF FillExactCostRevLink THEN
            CopyItemTrkg := TRUE;
          EXIT(TRUE);
        END;
        SETRANGE("Lot No.");
        SETFILTER("Serial No.",'<>''''');
        IF NOT ISEMPTY THEN BEGIN
          IF FillExactCostRevLink THEN
            CopyItemTrkg := TRUE;
          EXIT(TRUE);
        END;
        SETRANGE("Serial No.");
      END;
      EXIT(FALSE);
    END;

    PROCEDURE InsertTempItemTrkgEntry@70(ItemLedgEntry@1001 : Record 32;VAR TempItemTrkgEntry@1000 : Record 337;QtyBase@1002 : Decimal;DocLineNo@1004 : Integer;VAR NextEntryNo@1003 : Integer;FillExactCostRevLink@1005 : Boolean);
    BEGIN
      IF QtyBase = 0 THEN
        EXIT;

      WITH ItemLedgEntry DO BEGIN
        TempItemTrkgEntry.INIT;
        TempItemTrkgEntry."Entry No." := NextEntryNo;
        NextEntryNo := NextEntryNo + 1;
        IF NOT FillExactCostRevLink THEN
          TempItemTrkgEntry."Reservation Status" := TempItemTrkgEntry."Reservation Status"::Prospect;
        TempItemTrkgEntry."Source ID" := "Document No.";
        TempItemTrkgEntry."Source Ref. No." := DocLineNo;
        TempItemTrkgEntry."Appl.-to Item Entry" := "Entry No.";
        TempItemTrkgEntry."Quantity (Base)" := QtyBase;
        TempItemTrkgEntry.INSERT;
      END;
    END;

    PROCEDURE CollectItemTrkgPerPstDocLine@74(VAR TempItemTrkgEntry@1000 : TEMPORARY Record 337;VAR TempTrkgItemLedgEntry@1001 : TEMPORARY Record 32;FromPurchase@1002 : Boolean);
    VAR
      ItemLedgEntry@1006 : Record 32;
    BEGIN
      TempTrkgItemLedgEntry.RESET;
      TempTrkgItemLedgEntry.DELETEALL;

      WITH TempItemTrkgEntry DO
        IF FINDSET THEN
          REPEAT
            ItemLedgEntry.GET("Appl.-to Item Entry");
            TempTrkgItemLedgEntry := ItemLedgEntry;
            IF "Reservation Status" = "Reservation Status"::Prospect THEN
              TempTrkgItemLedgEntry."Entry No." := -TempTrkgItemLedgEntry."Entry No.";
            IF FromPurchase THEN
              TempTrkgItemLedgEntry."Remaining Quantity" := "Quantity (Base)"
            ELSE
              TempTrkgItemLedgEntry."Shipped Qty. Not Returned" := "Quantity (Base)";
            TempTrkgItemLedgEntry."Document No." := "Source ID";
            TempTrkgItemLedgEntry."Document Line No." := "Source Ref. No.";
            TempTrkgItemLedgEntry.INSERT;
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE GetLastToSalesLineNo@36(ToSalesHeader@1000 : Record 36) : Decimal;
    VAR
      ToSalesLine@1001 : Record 37;
    BEGIN
      ToSalesLine.LOCKTABLE;
      ToSalesLine.SETRANGE("Document Type",ToSalesHeader."Document Type");
      ToSalesLine.SETRANGE("Document No.",ToSalesHeader."No.");
      IF ToSalesLine.FINDLAST THEN
        EXIT(ToSalesLine."Line No.");
      EXIT(0);
    END;

    LOCAL PROCEDURE GetLastToPurchLineNo@54(ToPurchHeader@1000 : Record 38) : Decimal;
    VAR
      ToPurchLine@1001 : Record 39;
    BEGIN
      ToPurchLine.LOCKTABLE;
      ToPurchLine.SETRANGE("Document Type",ToPurchHeader."Document Type");
      ToPurchLine.SETRANGE("Document No.",ToPurchHeader."No.");
      IF ToPurchLine.FINDLAST THEN
        EXIT(ToPurchLine."Line No.");
      EXIT(0);
    END;

    LOCAL PROCEDURE CopySalesExtTextLines@37(VAR ToSalesLine2@1004 : Record 37;ToSalesLine@1000 : Record 37;Description@1001 : Text[50];Description2@1002 : Text[50];VAR NextLineNo@1003 : Integer);
    BEGIN
      NextLineNo := NextLineNo + 10000;
      ToSalesLine2.INIT;
      ToSalesLine2."Line No." := NextLineNo;
      ToSalesLine2."Document Type" := ToSalesLine."Document Type";
      ToSalesLine2."Document No." := ToSalesLine."Document No.";
      ToSalesLine2.Description := Description;
      ToSalesLine2."Description 2" := Description2;
      ToSalesLine2."Attached to Line No." := ToSalesLine."Line No.";
      ToSalesLine2.INSERT;
    END;

    LOCAL PROCEDURE CopyPurchExtTextLines@43(VAR ToPurchLine2@1004 : Record 39;ToPurchLine@1000 : Record 39;Description@1001 : Text[50];Description2@1002 : Text[50];VAR NextLineNo@1003 : Integer);
    BEGIN
      NextLineNo := NextLineNo + 10000;
      ToPurchLine2.INIT;
      ToPurchLine2."Line No." := NextLineNo;
      ToPurchLine2."Document Type" := ToPurchLine."Document Type";
      ToPurchLine2."Document No." := ToPurchLine."Document No.";
      ToPurchLine2.Description := Description;
      ToPurchLine2."Description 2" := Description2;
      ToPurchLine2."Attached to Line No." := ToPurchLine."Line No.";
      ToPurchLine2.INSERT;
    END;

    LOCAL PROCEDURE InsertOldSalesDocNoLine@41(ToSalesHeader@1001 : Record 36;OldDocNo@1000 : Code[20];OldDocType@1004 : Integer;VAR NextLineNo@1002 : Integer);
    VAR
      ToSalesLine2@1003 : Record 37;
    BEGIN
      NextLineNo := NextLineNo + 10000;
      ToSalesLine2.INIT;
      ToSalesLine2."Line No." := NextLineNo;
      ToSalesLine2."Document Type" := ToSalesHeader."Document Type";
      ToSalesLine2."Document No." := ToSalesHeader."No.";
      ToSalesLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text013),OldDocNo);
      ToSalesLine2.INSERT;
    END;

    LOCAL PROCEDURE InsertOldSalesCombDocNoLine@62(ToSalesHeader@1001 : Record 36;OldDocNo@1000 : Code[20];OldDocNo2@1005 : Code[20];VAR NextLineNo@1002 : Integer;CopyFromInvoice@1004 : Boolean);
    VAR
      ToSalesLine2@1003 : Record 37;
    BEGIN
      NextLineNo := NextLineNo + 10000;
      ToSalesLine2.INIT;
      ToSalesLine2."Line No." := NextLineNo;
      ToSalesLine2."Document Type" := ToSalesHeader."Document Type";
      ToSalesLine2."Document No." := ToSalesHeader."No.";
      IF CopyFromInvoice THEN
        ToSalesLine2.Description :=
          STRSUBSTNO(
            Text018,
            COPYSTR(SELECTSTR(1,Text016) + OldDocNo,1,23),
            COPYSTR(SELECTSTR(2,Text016) + OldDocNo2,1,23))
      ELSE
        ToSalesLine2.Description :=
          STRSUBSTNO(
            Text018,
            COPYSTR(SELECTSTR(3,Text016) + OldDocNo,1,23),
            COPYSTR(SELECTSTR(4,Text016) + OldDocNo2,1,23));
      ToSalesLine2.INSERT;
    END;

    LOCAL PROCEDURE InsertOldPurchDocNoLine@56(ToPurchHeader@1001 : Record 38;OldDocNo@1000 : Code[20];OldDocType@1004 : Integer;VAR NextLineNo@1002 : Integer);
    VAR
      ToPurchLine2@1003 : Record 39;
    BEGIN
      NextLineNo := NextLineNo + 10000;
      ToPurchLine2.INIT;
      ToPurchLine2."Line No." := NextLineNo;
      ToPurchLine2."Document Type" := ToPurchHeader."Document Type";
      ToPurchLine2."Document No." := ToPurchHeader."No.";
      ToPurchLine2.Description := STRSUBSTNO(Text015,SELECTSTR(OldDocType,Text014),OldDocNo);
      ToPurchLine2.INSERT;
    END;

    LOCAL PROCEDURE InsertOldPurchCombDocNoLine@72(ToPurchHeader@1001 : Record 38;OldDocNo@1000 : Code[20];OldDocNo2@1005 : Code[20];VAR NextLineNo@1002 : Integer;CopyFromInvoice@1004 : Boolean);
    VAR
      ToPurchLine2@1003 : Record 39;
    BEGIN
      NextLineNo := NextLineNo + 10000;
      ToPurchLine2.INIT;
      ToPurchLine2."Line No." := NextLineNo;
      ToPurchLine2."Document Type" := ToPurchHeader."Document Type";
      ToPurchLine2."Document No." := ToPurchHeader."No.";
      IF CopyFromInvoice THEN
        ToPurchLine2.Description :=
          STRSUBSTNO(
            Text018,
            COPYSTR(SELECTSTR(1,Text017) + OldDocNo,1,23),
            COPYSTR(SELECTSTR(2,Text017) + OldDocNo2,1,23))
      ELSE
        ToPurchLine2.Description :=
          STRSUBSTNO(
            Text018,
            COPYSTR(SELECTSTR(3,Text017) + OldDocNo,1,23),
            COPYSTR(SELECTSTR(4,Text017) + OldDocNo2,1,23));
      ToPurchLine2.INSERT;
    END;

    PROCEDURE IsSalesFillExactCostRevLink@38(ToSalesHeader@1000 : Record 36;FromDocType@1001 : 'Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo';CurrencyCode@1002 : Code[10]) : Boolean;
    BEGIN
      WITH ToSalesHeader DO
        CASE FromDocType OF
          FromDocType::"Sales Shipment":
            EXIT("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
          FromDocType::"Sales Invoice":
            EXIT(
              ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
              ("Currency Code" = CurrencyCode));
          FromDocType::"Sales Return Receipt":
            EXIT("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]);
          FromDocType::"Sales Credit Memo":
            EXIT(
              ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
              ("Currency Code" = CurrencyCode));
        END;
      EXIT(FALSE);
    END;

    PROCEDURE IsPurchFillExactCostRevLink@44(ToPurchHeader@1000 : Record 38;FromDocType@1001 : 'Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo';CurrencyCode@1002 : Code[10]) : Boolean;
    BEGIN
      WITH ToPurchHeader DO
        CASE FromDocType OF
          FromDocType::"Purchase Receipt":
            EXIT("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
          FromDocType::"Purchase Invoice":
            EXIT(
              ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
              ("Currency Code" = CurrencyCode));
          FromDocType::"Purchase Return Shipment":
            EXIT("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]);
          FromDocType::"Purchase Credit Memo":
            EXIT(
              ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
              ("Currency Code" = CurrencyCode));
        END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetSalesDocType@68(ItemLedgEntry@1000 : Record 32) : Integer;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH ItemLedgEntry DO
        CASE "Document Type" OF
          "Document Type"::"Sales Shipment":
            EXIT(SalesLine."Document Type"::Order);
          "Document Type"::"Sales Invoice":
            EXIT(SalesLine."Document Type"::Invoice);
          "Document Type"::"Sales Credit Memo":
            EXIT(SalesLine."Document Type"::"Credit Memo");
          "Document Type"::"Sales Return Receipt":
            EXIT(SalesLine."Document Type"::"Return Order");
        END;
    END;

    LOCAL PROCEDURE GetPurchDocType@45(ItemLedgEntry@1000 : Record 32) : Integer;
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      WITH ItemLedgEntry DO
        CASE "Document Type" OF
          "Document Type"::"Purchase Receipt":
            EXIT(PurchLine."Document Type"::Order);
          "Document Type"::"Purchase Invoice":
            EXIT(PurchLine."Document Type"::Invoice);
          "Document Type"::"Purchase Credit Memo":
            EXIT(PurchLine."Document Type"::"Credit Memo");
          "Document Type"::"Purchase Return Shipment":
            EXIT(PurchLine."Document Type"::"Return Order");
        END;
    END;

    LOCAL PROCEDURE GetItem@42(ItemNo@1000 : Code[20]);
    BEGIN
      IF ItemNo <> Item."No." THEN
        IF NOT Item.GET(ItemNo) THEN
          Item.INIT;
    END;

    PROCEDURE CalcVAT@48(VAR Value@1003 : Decimal;VATPercentage@1005 : Decimal;FromPricesInclVAT@1000 : Boolean;ToPricesInclVAT@1002 : Boolean;RndgPrecision@1001 : Decimal);
    BEGIN
      IF (ToPricesInclVAT = FromPricesInclVAT) OR (Value = 0) THEN
        EXIT;

      IF ToPricesInclVAT THEN
        Value := ROUND(Value * (100 + VATPercentage) / 100,RndgPrecision)
      ELSE
        Value := ROUND(Value * 100 / (100 + VATPercentage),RndgPrecision);
    END;

    LOCAL PROCEDURE ReCalcSalesLine@46(FromSalesHeader@1001 : Record 36;ToSalesHeader@1002 : Record 36;VAR SalesLine@1003 : Record 37);
    VAR
      CurrExchRate@1004 : Record 330;
      SalesLineAmount@1000 : Decimal;
    BEGIN
      WITH ToSalesHeader DO BEGIN
        IF NOT IsRecalculateAmount(
             FromSalesHeader."Currency Code","Currency Code",
             FromSalesHeader."Prices Including VAT","Prices Including VAT")
        THEN
          EXIT;

        IF FromSalesHeader."Currency Code" <> "Currency Code" THEN BEGIN
          IF SalesLine.Quantity <> 0 THEN
            SalesLineAmount := SalesLine."Unit Price" * SalesLine.Quantity
          ELSE
            SalesLineAmount := SalesLine."Unit Price";
          IF FromSalesHeader."Currency Code" <> '' THEN BEGIN
            SalesLineAmount :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromSalesHeader."Posting Date",FromSalesHeader."Currency Code",
                SalesLineAmount,FromSalesHeader."Currency Factor");
            SalesLine."Line Discount Amount" :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromSalesHeader."Posting Date",FromSalesHeader."Currency Code",
                SalesLine."Line Discount Amount",FromSalesHeader."Currency Factor");
            SalesLine."Inv. Discount Amount" :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromSalesHeader."Posting Date",FromSalesHeader."Currency Code",
                SalesLine."Inv. Discount Amount",FromSalesHeader."Currency Factor");
          END;

          IF "Currency Code" <> '' THEN BEGIN
            SalesLineAmount :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",SalesLineAmount,"Currency Factor");
            SalesLine."Line Discount Amount" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",SalesLine."Line Discount Amount","Currency Factor");
            SalesLine."Inv. Discount Amount" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",SalesLine."Inv. Discount Amount","Currency Factor");
          END;
        END;

        SalesLine."Currency Code" := "Currency Code";
        IF SalesLine.Quantity <> 0 THEN BEGIN
          SalesLineAmount := ROUND(SalesLineAmount,Currency."Amount Rounding Precision");
          SalesLine."Unit Price" := ROUND(SalesLineAmount / SalesLine.Quantity,Currency."Unit-Amount Rounding Precision");
        END ELSE
          SalesLine."Unit Price" := ROUND(SalesLineAmount,Currency."Unit-Amount Rounding Precision");
        SalesLine."Line Discount Amount" := ROUND(SalesLine."Line Discount Amount",Currency."Amount Rounding Precision");
        SalesLine."Inv. Discount Amount" := ROUND(SalesLine."Inv. Discount Amount",Currency."Amount Rounding Precision");

        CalcVAT(
          SalesLine."Unit Price",SalesLine."VAT %",FromSalesHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Unit-Amount Rounding Precision");
        CalcVAT(
          SalesLine."Line Discount Amount",SalesLine."VAT %",FromSalesHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Amount Rounding Precision");
        CalcVAT(
          SalesLine."Inv. Discount Amount",SalesLine."VAT %",FromSalesHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE ReCalcPurchLine@61(FromPurchHeader@1001 : Record 38;ToPurchHeader@1002 : Record 38;VAR PurchLine@1003 : Record 39);
    VAR
      CurrExchRate@1004 : Record 330;
      PurchLineAmount@1000 : Decimal;
    BEGIN
      WITH ToPurchHeader DO BEGIN
        IF NOT IsRecalculateAmount(
             FromPurchHeader."Currency Code","Currency Code",
             FromPurchHeader."Prices Including VAT","Prices Including VAT")
        THEN
          EXIT;

        IF FromPurchHeader."Currency Code" <> "Currency Code" THEN BEGIN
          IF PurchLine.Quantity <> 0 THEN
            PurchLineAmount := PurchLine."Direct Unit Cost" * PurchLine.Quantity
          ELSE
            PurchLineAmount := PurchLine."Direct Unit Cost";
          IF FromPurchHeader."Currency Code" <> '' THEN BEGIN
            PurchLineAmount :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromPurchHeader."Posting Date",FromPurchHeader."Currency Code",
                PurchLineAmount,FromPurchHeader."Currency Factor");
            PurchLine."Line Discount Amount" :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromPurchHeader."Posting Date",FromPurchHeader."Currency Code",
                PurchLine."Line Discount Amount",FromPurchHeader."Currency Factor");
            PurchLine."Inv. Discount Amount" :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                FromPurchHeader."Posting Date",FromPurchHeader."Currency Code",
                PurchLine."Inv. Discount Amount",FromPurchHeader."Currency Factor");
          END;

          IF "Currency Code" <> '' THEN BEGIN
            PurchLineAmount :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",PurchLineAmount,"Currency Factor");
            PurchLine."Line Discount Amount" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",PurchLine."Line Discount Amount","Currency Factor");
            PurchLine."Inv. Discount Amount" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date","Currency Code",PurchLine."Inv. Discount Amount","Currency Factor");
          END;
        END;

        PurchLine."Currency Code" := "Currency Code";
        IF PurchLine.Quantity <> 0 THEN BEGIN
          PurchLineAmount := ROUND(PurchLineAmount,Currency."Amount Rounding Precision");
          PurchLine."Direct Unit Cost" := ROUND(PurchLineAmount / PurchLine.Quantity,Currency."Unit-Amount Rounding Precision");
        END ELSE
          PurchLine."Direct Unit Cost" := ROUND(PurchLineAmount,Currency."Unit-Amount Rounding Precision");
        PurchLine."Line Discount Amount" := ROUND(PurchLine."Line Discount Amount",Currency."Amount Rounding Precision");
        PurchLine."Inv. Discount Amount" := ROUND(PurchLine."Inv. Discount Amount",Currency."Amount Rounding Precision");

        CalcVAT(
          PurchLine."Direct Unit Cost",PurchLine."VAT %",FromPurchHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Unit-Amount Rounding Precision");
        CalcVAT(
          PurchLine."Line Discount Amount",PurchLine."VAT %",FromPurchHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Amount Rounding Precision");
        CalcVAT(
          PurchLine."Inv. Discount Amount",PurchLine."VAT %",FromPurchHeader."Prices Including VAT",
          "Prices Including VAT",Currency."Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE IsRecalculateAmount@63(FromCurrencyCode@1000 : Code[10];ToCurrencyCode@1002 : Code[10];FromPricesInclVAT@1001 : Boolean;ToPricesInclVAT@1003 : Boolean) : Boolean;
    BEGIN
      EXIT(
        (FromCurrencyCode <> ToCurrencyCode) OR
        (FromPricesInclVAT <> ToPricesInclVAT));
    END;

    PROCEDURE UpdateRevSalesLineAmount@67(VAR SalesLine@1000 : Record 37;OrgQtyBase@1009 : Decimal;FromPricesInclVAT@1005 : Boolean;ToPricesInclVAT@1006 : Boolean);
    VAR
      Amount@1007 : Decimal;
    BEGIN
      IF (OrgQtyBase = 0) OR (SalesLine.Quantity = 0) THEN
        EXIT;

      Amount := SalesLine.Quantity * SalesLine."Unit Price";
      CalcVAT(
        Amount,SalesLine."VAT %",FromPricesInclVAT,ToPricesInclVAT,Currency."Amount Rounding Precision");
      SalesLine."Unit Price" := Amount / SalesLine.Quantity;
      SalesLine."Line Discount Amount" :=
        SalesLine.Quantity * SalesLine."Unit Price" * (SalesLine."Line Discount %" / 100);
      Amount := ROUND(SalesLine."Inv. Discount Amount" / OrgQtyBase * SalesLine."Quantity (Base)",Currency."Amount Rounding Precision");
      CalcVAT(
        Amount,SalesLine."VAT %",FromPricesInclVAT,ToPricesInclVAT,Currency."Amount Rounding Precision");
      SalesLine."Inv. Discount Amount" := Amount;
    END;

    PROCEDURE CalculateRevSalesLineAmount@84(VAR SalesLine@1000 : Record 37;OrgQtyBase@1009 : Decimal;FromPricesInclVAT@1005 : Boolean;ToPricesInclVAT@1006 : Boolean);
    VAR
      UnitPrice@1007 : Decimal;
      LineDiscAmt@1001 : Decimal;
      InvDiscAmt@1002 : Decimal;
    BEGIN
      UpdateRevSalesLineAmount(SalesLine,OrgQtyBase,FromPricesInclVAT,ToPricesInclVAT);

      UnitPrice := SalesLine."Unit Price";
      LineDiscAmt := SalesLine."Line Discount Amount";
      InvDiscAmt := SalesLine."Inv. Discount Amount";

      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.VALIDATE("Line Discount Amount",LineDiscAmt);
      SalesLine.VALIDATE("Inv. Discount Amount",InvDiscAmt);
    END;

    PROCEDURE UpdateRevPurchLineAmount@65(VAR PurchLine@1000 : Record 39;OrgQtyBase@1009 : Decimal;FromPricesInclVAT@1005 : Boolean;ToPricesInclVAT@1006 : Boolean);
    VAR
      Amount@1007 : Decimal;
    BEGIN
      IF (OrgQtyBase = 0) OR (PurchLine.Quantity = 0) THEN
        EXIT;

      Amount := PurchLine.Quantity * PurchLine."Direct Unit Cost";
      CalcVAT(
        Amount,PurchLine."VAT %",FromPricesInclVAT,ToPricesInclVAT,Currency."Amount Rounding Precision");
      PurchLine."Direct Unit Cost" := Amount / PurchLine.Quantity;
      PurchLine."Line Discount Amount" :=
        PurchLine.Quantity * PurchLine."Direct Unit Cost" * (PurchLine."Line Discount %" / 100);
      Amount := ROUND(PurchLine."Inv. Discount Amount" / OrgQtyBase * PurchLine."Quantity (Base)",Currency."Amount Rounding Precision");
      CalcVAT(
        Amount,PurchLine."VAT %",FromPricesInclVAT,ToPricesInclVAT,Currency."Amount Rounding Precision");
      PurchLine."Inv. Discount Amount" := Amount;
    END;

    PROCEDURE CalculateRevPurchLineAmount@82(VAR PurchLine@1000 : Record 39;OrgQtyBase@1009 : Decimal;FromPricesInclVAT@1005 : Boolean;ToPricesInclVAT@1006 : Boolean);
    VAR
      DirectUnitCost@1007 : Decimal;
      LineDiscAmt@1001 : Decimal;
      InvDiscAmt@1002 : Decimal;
    BEGIN
      UpdateRevPurchLineAmount(PurchLine,OrgQtyBase,FromPricesInclVAT,ToPricesInclVAT);

      DirectUnitCost := PurchLine."Direct Unit Cost";
      LineDiscAmt := PurchLine."Line Discount Amount";
      InvDiscAmt := PurchLine."Inv. Discount Amount";

      PurchLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchLine.VALIDATE("Line Discount Amount",LineDiscAmt);
      PurchLine.VALIDATE("Inv. Discount Amount",InvDiscAmt);
    END;

    LOCAL PROCEDURE InitCurrency@81(CurrencyCode@1000 : Code[10]);
    BEGIN
      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;

      Currency.TESTFIELD("Unit-Amount Rounding Precision");
      Currency.TESTFIELD("Amount Rounding Precision");
    END;

    LOCAL PROCEDURE OpenWindow@79();
    BEGIN
      Window.OPEN(
        Text022 +
        Text023 +
        Text024);
      WindowUpdateTime := TIME;
    END;

    LOCAL PROCEDURE IsTimeForUpdate@75() : Boolean;
    BEGIN
      IF TIME - WindowUpdateTime >= 1000 THEN BEGIN
        WindowUpdateTime := TIME;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE UTlocalCall@60(localFunctionName@1000 : Text[30];VAR param@1001 : ARRAY [20] OF Variant;VAR return@1002 : Variant);
    VAR
      ItemLedgEntry@1014 : Record 32;
      ItemLedgEntryBuf@1007 : TEMPORARY Record 32;
      ToSalesHeader@1003 : Record 36;
      FromSalesHeader@1004 : Record 36;
      FromSalesLineBuf@1005 : TEMPORARY Record 37;
      FromSalesLine@1006 : Record 37;
      ToPurchHeader@1018 : Record 38;
      FromPurchHeader@1019 : Record 38;
      FromPurchLineBuf@1021 : TEMPORARY Record 39;
      FromPurchLine@1020 : Record 39;
      FromSalesShptLine@1008 : Record 111;
      FromSalesInvLine@1013 : Record 113;
      FromReturnRcptLine@1017 : Record 6661;
      FromPurchRcptLine@1022 : Record 121;
      FromPurchInvLine@1023 : Record 123;
      FromReturnShptLine@1024 : Record 6651;
      TempItemTrkgEntry@1026 : TEMPORARY Record 337;
      FromDocType@1010 : Integer;
      i@1009 : Integer;
      NextLineNo@1025 : Integer;
      NextItemTrkgEntryNo@1027 : Integer;
      CopyItemTrkg@1011 : Boolean;
      MissingExCostRevLink@1012 : Boolean;
      IsSplitILE@1015 : Boolean;
    BEGIN
      CASE localFunctionName OF
        'SplitPstdSalesLinesPerILE':
          BEGIN
            ToSalesHeader := param[1];
            FromSalesHeader := param[2];
            FromDocType := param[3];
            FromDocType := FromDocType - 1;
            CASE FromDocType OF
              0:
                BEGIN
                  FromSalesShptLine := param[4];
                  FromSalesLine.TRANSFERFIELDS(FromSalesShptLine);
                  FromSalesShptLine.FilterPstdDocLnItemLedgEntries(ItemLedgEntry);

                  IsSplitILE :=
                    SplitPstdSalesLinesPerILE(
                      ToSalesHeader,FromSalesHeader,ItemLedgEntry,
                      FromSalesLineBuf,FromSalesLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,
                      IsSalesFillExactCostRevLink(ToSalesHeader,FromDocType,FromSalesHeader."Currency Code"),TRUE);
                END;
              1:
                BEGIN
                  FromSalesInvLine := param[4];
                  FromSalesLine.TRANSFERFIELDS(FromSalesInvLine);
                  FromSalesInvLine.GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
                  IsSplitILE :=
                    SplitPstdSalesLinesPerILE(
                      ToSalesHeader,FromSalesHeader,ItemLedgEntryBuf,
                      FromSalesLineBuf,FromSalesLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,
                      IsSalesFillExactCostRevLink(ToSalesHeader,FromDocType,FromSalesHeader."Currency Code"),FALSE);
                END;
            END;
            param[5] := CopyItemTrkg;
            param[6] := MissingExCostRevLink;
            i := 10;
            IF IsSplitILE THEN BEGIN
              return := TRUE;
              FromSalesLineBuf.FINDSET;
              REPEAT
                param[i] := FromSalesLineBuf;
                i := i + 1;
              UNTIL FromSalesLineBuf.NEXT = 0;
              param[8] := i - 10;
            END ELSE BEGIN
              return := FALSE;
              param[8] := 1;
              param[i] := FromSalesLineBuf;
            END;
          END;

        'SplitSalesDocLinesPerItemTrkg':
          BEGIN
            FromDocType := param[1];
            CASE FromDocType OF
              1:
                BEGIN
                  FromSalesShptLine := param[2];
                  FromSalesLine.TRANSFERFIELDS(FromSalesShptLine);
                  FromSalesShptLine.FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                  IsSplitILE :=
                    SplitSalesDocLinesPerItemTrkg(
                      ItemLedgEntry,TempItemTrkgEntry,FromSalesLineBuf,FromSalesLine,
                      NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,TRUE);
                END;
              2:
                BEGIN
                  FromSalesInvLine := param[2];
                  FromSalesLine.TRANSFERFIELDS(FromSalesInvLine);
                  FromSalesInvLine.GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
                  IsSplitILE :=
                    SplitSalesDocLinesPerItemTrkg(
                      ItemLedgEntryBuf,TempItemTrkgEntry,FromSalesLineBuf,
                      FromSalesLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,FALSE);
                END;
              3:
                BEGIN
                  FromReturnRcptLine := param[2];
                  FromSalesLine.TRANSFERFIELDS(FromReturnRcptLine);
                  FromReturnRcptLine.FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                  IsSplitILE :=
                    SplitSalesDocLinesPerItemTrkg(
                      ItemLedgEntry,TempItemTrkgEntry,FromSalesLineBuf,
                      FromSalesLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,TRUE);
                END;
            END;
            param[3] := MissingExCostRevLink;
            i := 5;
            TempItemTrkgEntry.RESET;
            TempItemTrkgEntry.FINDSET;
            REPEAT
              param[i] := TempItemTrkgEntry;
              i := i + 1;
            UNTIL TempItemTrkgEntry.NEXT = 0;
            param[4] := i - 5;

            IF IsSplitILE THEN BEGIN
              return := TRUE;
              i := 12;
              FromSalesLineBuf.FINDSET;
              REPEAT
                param[i] := FromSalesLineBuf;
                i := i + 1;
              UNTIL FromSalesLineBuf.NEXT = 0;
              param[11] := i - 12;
            END ELSE BEGIN
              return := FALSE;
              param[11] := 1;
              param[12] := FromSalesLineBuf;
            END;
          END;
        'SplitPstdPurchLinesPerILE':
          BEGIN
            ToPurchHeader := param[1];
            FromPurchHeader := param[2];
            FromDocType := param[3];
            FromDocType := FromDocType - 1;
            CASE FromDocType OF
              0:
                BEGIN
                  FromPurchRcptLine := param[4];
                  FromPurchLine.TRANSFERFIELDS(FromPurchRcptLine);
                  FromPurchRcptLine.FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                  IsSplitILE :=
                    SplitPstdPurchLinesPerILE(
                      ToPurchHeader,FromPurchHeader,ItemLedgEntry,
                      FromPurchLineBuf,FromPurchLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,
                      IsPurchFillExactCostRevLink(ToPurchHeader,FromDocType,FromPurchHeader."Currency Code"),TRUE);
                END;
              1:
                BEGIN
                  FromPurchInvLine := param[4];
                  FromPurchLine.TRANSFERFIELDS(FromPurchInvLine);
                  FromPurchInvLine.GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
                  IsSplitILE :=
                    SplitPstdPurchLinesPerILE(
                      ToPurchHeader,FromPurchHeader,ItemLedgEntryBuf,
                      FromPurchLineBuf,FromPurchLine,NextLineNo,CopyItemTrkg,MissingExCostRevLink,
                      IsPurchFillExactCostRevLink(ToPurchHeader,FromDocType,FromPurchHeader."Currency Code"),FALSE);
                END;
            END;
            param[5] := CopyItemTrkg;
            param[6] := MissingExCostRevLink;
            i := 10;
            IF IsSplitILE THEN BEGIN
              return := TRUE;
              FromPurchLineBuf.FINDSET;
              REPEAT
                param[i] := FromPurchLineBuf;
                i := i + 1;
              UNTIL FromPurchLineBuf.NEXT = 0;
              param[8] := i - 10;
            END ELSE BEGIN
              return := FALSE;
              param[8] := 1;
              param[i] := FromPurchLineBuf;
            END;
          END;
        'SplitPurchDocLinesPerItemTrkg':
          BEGIN
            FromDocType := param[1];
            CASE FromDocType OF
              1:
                BEGIN
                  FromPurchRcptLine := param[2];
                  FromPurchLine.TRANSFERFIELDS(FromPurchRcptLine);
                  FromPurchRcptLine.FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                  IsSplitILE :=
                    SplitPurchDocLinesPerItemTrkg(
                      ItemLedgEntry,TempItemTrkgEntry,FromPurchLineBuf,
                      FromPurchLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,TRUE);
                END;
              2:
                BEGIN
                  FromPurchInvLine := param[2];
                  FromPurchLine.TRANSFERFIELDS(FromPurchInvLine);
                  FromPurchInvLine.GetItemLedgEntries(ItemLedgEntryBuf,TRUE);
                  IsSplitILE :=
                    SplitPurchDocLinesPerItemTrkg(
                      ItemLedgEntryBuf,TempItemTrkgEntry,FromPurchLineBuf,
                      FromPurchLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,FALSE);
                END;
              3:
                BEGIN
                  FromReturnShptLine := param[2];
                  FromPurchLine.TRANSFERFIELDS(FromReturnShptLine);
                  FromReturnShptLine.FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                  IsSplitILE :=
                    SplitPurchDocLinesPerItemTrkg(
                      ItemLedgEntry,TempItemTrkgEntry,FromPurchLineBuf,
                      FromPurchLine,NextLineNo,NextItemTrkgEntryNo,MissingExCostRevLink,TRUE);
                END;
            END;
            param[3] := MissingExCostRevLink;
            i := 5;
            TempItemTrkgEntry.RESET;
            TempItemTrkgEntry.FINDSET;
            REPEAT
              param[i] := TempItemTrkgEntry;
              i := i + 1;
            UNTIL TempItemTrkgEntry.NEXT = 0;
            param[4] := i - 5;

            IF IsSplitILE THEN BEGIN
              return := TRUE;
              i := 13;
              FromPurchLineBuf.FINDSET;
              REPEAT
                param[i] := FromPurchLineBuf;
                i := i + 1;
              UNTIL FromPurchLineBuf.NEXT = 0;
              param[12] := i - 13;
            END ELSE BEGIN
              return := FALSE;
              param[12] := 1;
              param[13] := FromPurchLineBuf;
            END;
          END;
        ELSE
          ERROR('Local function %1 is not included for test.',localFunctionName);
      END;
    END;

    PROCEDURE ConfirmApply@32();
    BEGIN
      AskApply := FALSE;
      ApplyFully := FALSE;
    END;

    PROCEDURE ConvertFromBase@47(VAR Quantity@1000 : Decimal;"Quantity (Base)"@1001 : Decimal;"Qty. per Unit of Measure"@1002 : Decimal);
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        Quantity := "Quantity (Base)"
      ELSE
        Quantity :=
          ROUND("Quantity (Base)" / "Qty. per Unit of Measure",0.00001);
    END;

    PROCEDURE Sign@77(Quantity@1000 : Decimal) : Decimal;
    BEGIN
      IF Quantity<0 THEN
        EXIT(-1);
      EXIT(1);
    END;

    PROCEDURE ShowMessageReapply@80(OriginalQuantity@1000 : Boolean);
    VAR
      Text@1001 : Text[1024];
    BEGIN
      Text := '';
      IF SkippedLine THEN
        Text := Text029;
      IF OriginalQuantity AND ReappDone THEN
        IF Text = '' THEN
          Text := Text025;
      IF SomeAreFixed THEN
        MESSAGE(Text031);
      IF Text <> '' THEN
        MESSAGE(Text);
    END;

    LOCAL PROCEDURE TestPurchEfecs@1100001(VAR FromDocType@1100001 : Option;VAR ToPurchHeader@1100002 : Record 38;VAR FromPurchInvHeader@1100003 : Record 122;VAR VendorLedgEntries@1100004 : Record 25);
    VAR
      ErrorCount@1100005 : Integer;
      ApplyVendorEntries@1100006 : Form 233;
    BEGIN
      ErrorCount := 0;
      VendorLedgEntries.SETFILTER("Document Type",'%1|%2',VendorLedgEntries."Document Type"::Invoice,
                                  VendorLedgEntries."Document Type"::Bill);
      VendorLedgEntries.SETFILTER("Document Situation",'<>%1',VendorLedgEntries."Document Situation"::" ");
      IF NOT VendorLedgEntries.FIND('-') THEN
        EXIT;
      REPEAT
        IF VendorLedgEntries."Document Situation" <> VendorLedgEntries."Document Situation"::Cartera THEN
          IF NOT ((VendorLedgEntries."Document Situation" IN
               [VendorLedgEntries."Document Situation"::"Closed Documents",
               VendorLedgEntries."Document Situation"::"Closed BG/PO"]) AND
             (VendorLedgEntries."Document Status" = VendorLedgEntries."Document Status"::Rejected)) THEN
               ErrorCount := ErrorCount + 1;
      UNTIL VendorLedgEntries.NEXT = 0;
      IF ErrorCount = 0 THEN
        IF VendorLedgEntries.FIND('-') THEN
          REPEAT
            IF VendorLedgEntries."Document Type" = VendorLedgEntries."Document Type"::Bill THEN BEGIN
              ToPurchHeader."Applies-to ID" := FromPurchInvHeader."No.";
              ApplyVendorEntries.SetPurch(ToPurchHeader,VendorLedgEntries,ToPurchHeader.FIELDNO("Applies-to ID"));
              ApplyVendorEntries.SETRECORD(VendorLedgEntries);
              ApplyVendorEntries.SETTABLEVIEW(VendorLedgEntries);
              ApplyVendorEntries.SetVendApplId;
            END ELSE BEGIN
              ToPurchHeader."Applies-to Doc. Type" := ToPurchHeader."Applies-to Doc. Type"::Invoice;
              ToPurchHeader."Applies-to Doc. No." := FromPurchInvHeader."No.";
            END
          UNTIL VendorLedgEntries.NEXT = 0
        ELSE
          MESSAGE(Text1100000 +
                  Text1100001 +
                  Text1100002,
                  FORMAT(FromDocType),
                  FORMAT(FromPurchInvHeader."No."),
                  FORMAT(ToPurchHeader."Document Type"),
                  FORMAT(ToPurchHeader."No."));
    END;

    LOCAL PROCEDURE TestSalesEfecs@1100002(VAR FromDocType@1100001 : Option;VAR ToSalesHeader@1100002 : Record 36;VAR FromSalesInvHeader@1100003 : Record 112;VAR CustLedgerEntries@1100004 : Record 21);
    VAR
      ErrorCount@1100005 : Integer;
      ApplyCustEntries@1100006 : Form 232;
    BEGIN
      ErrorCount := 0;
      CustLedgerEntries.SETFILTER("Document Type",'%1|%2',CustLedgerEntries."Document Type"::Invoice,
                                   CustLedgerEntries."Document Type"::Bill);
      CustLedgerEntries.SETFILTER("Document Situation",'<>%1',CustLedgerEntries."Document Situation"::" ");
      IF NOT CustLedgerEntries.FIND('-') THEN
        EXIT;
      REPEAT
        IF CustLedgerEntries."Document Situation" <> CustLedgerEntries."Document Situation"::Cartera THEN
          IF NOT ((CustLedgerEntries."Document Situation" IN
               [CustLedgerEntries."Document Situation"::"Closed Documents",
               CustLedgerEntries."Document Situation"::"Closed BG/PO"]) AND
             (CustLedgerEntries."Document Status" = CustLedgerEntries."Document Status"::Rejected)) THEN BEGIN
               ErrorCount := ErrorCount + 1;
          END;
      UNTIL CustLedgerEntries.NEXT = 0;
      IF ErrorCount = 0 THEN
        IF CustLedgerEntries.FIND('-') THEN
          REPEAT
            IF CustLedgerEntries."Document Type" = CustLedgerEntries."Document Type"::Bill THEN BEGIN
              ToSalesHeader."Applies-to ID" := FromSalesInvHeader."No.";
              ApplyCustEntries.SetSales(ToSalesHeader,CustLedgerEntries,ToSalesHeader.FIELDNO("Applies-to ID"));
              ApplyCustEntries.SETRECORD(CustLedgerEntries);
              ApplyCustEntries.SETTABLEVIEW(CustLedgerEntries);
              ApplyCustEntries.SetCustApplId;
            END ELSE BEGIN
              ToSalesHeader."Applies-to Doc. Type" := ToSalesHeader."Applies-to Doc. Type"::Invoice;
              ToSalesHeader."Applies-to Doc. No." := FromSalesInvHeader."No.";
            END
          UNTIL CustLedgerEntries.NEXT = 0
        ELSE
          MESSAGE(Text1100000 +
                  Text1100001 +
                  Text1100002,
                  FORMAT(FromDocType),
                  FORMAT(FromSalesInvHeader."No."),
                  FORMAT(ToSalesHeader."Document Type"),
                  FORMAT(ToSalesHeader."No."));
    END;

    PROCEDURE CopyFromSalesComentToHeader@1103355000(ToSalesHeader@1103355005 : Record 36;FromSalesHeader@1103355004 : Record 36);
    VAR
      lrFromComent@1103355002 : Record 44;
      lrToComent@1103355003 : Record 44;
    BEGIN
      // $001 CopyFromSalesComentToHeader

      lrFromComent.RESET;
      lrFromComent.SETRANGE("Document Type", FromSalesHeader."Document Type");
      lrFromComent.SETRANGE("No."          , FromSalesHeader."No.");
      IF lrFromComent.FINDSET THEN BEGIN
        REPEAT
          lrToComent := lrFromComent;
          lrToComent."Document Type" := ToSalesHeader."Document Type";
          lrToComent."No."           := ToSalesHeader."No.";
          lrToComent.INSERT;
        UNTIL lrFromComent.NEXT = 0;
      END;
    END;

    PROCEDURE CopyFromPurchComentToHeader@1103355001(ToPurchHeader@1103355000 : Record 38;FromPurchHeader@1103355001 : Record 38);
    VAR
      lrFromComent@1103355002 : Record 43;
      lrToComent@1103355003 : Record 43;
    BEGIN
      // $002 CopyFromSalesComentToHeader

      lrFromComent.RESET;
      lrFromComent.SETRANGE("Document Type", FromPurchHeader."Document Type");
      lrFromComent.SETRANGE("No."          , FromPurchHeader."No.");
      IF lrFromComent.FINDSET THEN BEGIN
        REPEAT
          lrToComent := lrFromComent;
          lrToComent."Document Type" := ToPurchHeader."Document Type";
          lrToComent."No."           := ToPurchHeader."No.";
          lrToComent.INSERT;
        UNTIL lrFromComent.NEXT = 0;
      END;
    END;

    BEGIN
    {
      // INCOMING

      $001  Se ha creado la funcion CopyFromSalesComentToHeader para pasar los comentarios del documento de venta original
          al documento de venta nuevo o copiado

      $002  Se ha creado la funcion CopyFromPurchComentToHeader para pasar los comentarios del documento de compra original
          al documento de compra nuevo o copiado
    }
    END.
  }
}
