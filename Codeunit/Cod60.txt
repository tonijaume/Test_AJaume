OBJECT Codeunit 60 Sales-Calc. Discount
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES6.00.01;
  }
  PROPERTIES
  {
    TableNo=37;
    OnRun=BEGIN
            SalesLine.COPY(Rec);

            TempSalesHeader.GET("Document Type","Document No.");
            TemporaryHeader := FALSE;
            CalculateInvoiceDiscount(TempSalesHeader,TempSalesLine);

            Rec := SalesLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Service Charge;ESP=Cargo servicio';
      TempSalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      TempSalesLine@1003 : Record 37;
      CustInvDisc@1004 : Record 19;
      CustPostingGr@1005 : Record 92;
      Currency@1006 : Record 4;
      InvDiscBase@1008 : Decimal;
      ChargeBase@1009 : Decimal;
      CurrencyDate@1011 : Date;
      TemporaryHeader@1012 : Boolean;
      GLSetup@1100000 : Record 98;
      CustInvDiscFound@1100001 : Boolean;
      InvAllow@1100100 : Boolean;

    LOCAL PROCEDURE CalculateInvoiceDiscount@1(VAR SalesHeader@1000 : Record 36;VAR SalesLine2@1001 : Record 37);
    VAR
      TempVATAmountLine@1002 : TEMPORARY Record 290;
      SalesSetup@1003 : Record 311;
      TempServiceChargeLine@1005 : TEMPORARY Record 37;
      GLAcc@1100000 : Record 15;
    BEGIN
      SalesSetup.GET;
      WITH SalesLine DO BEGIN
        IF RECORDLEVELLOCKING THEN
          LOCKTABLE;
        SalesHeader.TESTFIELD("Customer Posting Group");
        CustPostingGr.GET(SalesHeader."Customer Posting Group");

        SalesLine2.RESET;
        SalesLine2.SETRANGE("Document Type","Document Type");
        SalesLine2.SETRANGE("Document No.","Document No.");
        SalesLine2.SETRANGE("System-Created Entry",TRUE);
        SalesLine2.SETRANGE(Type,SalesLine2.Type::"G/L Account");
        SalesLine2.SETRANGE("No.",CustPostingGr."Service Charge Acc.");
        IF SalesLine2.FINDSET(TRUE,FALSE) THEN
          REPEAT
            SalesLine2.VALIDATE("Unit Price",0);
            SalesLine2.MODIFY;
            TempServiceChargeLine := SalesLine2;
            TempServiceChargeLine.INSERT;
          UNTIL SalesLine2.NEXT = 0;

        SalesLine2.RESET;
        SalesLine2.SETRANGE("Document Type","Document Type");
        SalesLine2.SETRANGE("Document No.","Document No.");
        SalesLine2.SETFILTER(Type,'<>0');
        IF SalesLine2.FINDFIRST THEN;
        SalesLine2.CalcVATAmountLines(0,SalesHeader,SalesLine2,TempVATAmountLine);
        InvDiscBase :=
          TempVATAmountLine.GetTotalInvDiscBaseAmount(
            SalesHeader."Prices Including VAT",SalesHeader."Currency Code");
        ChargeBase :=
          TempVATAmountLine.GetTotalLineAmount(
            SalesHeader."Prices Including VAT",SalesHeader."Currency Code");

        IF NOT TemporaryHeader THEN BEGIN
          IF NOT RECORDLEVELLOCKING THEN
            SalesLine2.LOCKTABLE(TRUE,TRUE);
          SalesHeader.MODIFY;
        END;

        IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
           (SalesHeader."Posting Date" = 0D)
        THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := SalesHeader."Posting Date";

        CustInvDiscFound := FALSE;

        CustInvDisc.GetRec(
          SalesHeader."Invoice Disc. Code",SalesHeader."Currency Code",CurrencyDate,ChargeBase,CustInvDiscFound);

        IF CustInvDiscFound AND (CustInvDisc."Service Charge" <> 0) THEN BEGIN
          CustPostingGr.TESTFIELD("Service Charge Acc.");
          IF SalesHeader."Currency Code" = '' THEN
            Currency.InitRoundingPrecision
          ELSE
            Currency.GET(SalesHeader."Currency Code");
          IF TemporaryHeader THEN
            SalesLine2.SetSalesHeader(SalesHeader);
          IF NOT TempServiceChargeLine.ISEMPTY THEN BEGIN
            TempServiceChargeLine.FINDLAST;
            SalesLine2.GET("Document Type","Document No.",TempServiceChargeLine."Line No.");
            IF SalesHeader."Prices Including VAT" THEN
              SalesLine2.VALIDATE(
                "Unit Price",
                ROUND(
                  (1 + SalesLine2."VAT %" / 100) * CustInvDisc."Service Charge",
                  Currency."Unit-Amount Rounding Precision"))
            ELSE
              SalesLine2.VALIDATE("Unit Price",CustInvDisc."Service Charge");
            SalesLine2.MODIFY;
          END ELSE BEGIN
            SalesLine2.RESET;
            SalesLine2.SETRANGE("Document Type","Document Type");
            SalesLine2.SETRANGE("Document No.","Document No.");
            SalesLine2.FINDLAST;
            SalesLine2.INIT;
            IF TemporaryHeader THEN
              SalesLine2.SetSalesHeader(SalesHeader);
            SalesLine2."Line No." := SalesLine2."Line No." + 10000;
            SalesLine2."System-Created Entry" := TRUE;
            SalesLine2.Type := SalesLine2.Type::"G/L Account";
            SalesLine2.VALIDATE("No.",CustPostingGr."Service Charge Acc.");
            SalesLine2.Description := Text000;
            SalesLine2.VALIDATE(Quantity,1);
            IF SalesLine2."Document Type" IN
               [SalesLine2."Document Type"::"Return Order", SalesLine2."Document Type"::"Credit Memo"] THEN
              SalesLine2.VALIDATE("Return Qty. to Receive",SalesLine2.Quantity)
            ELSE
              SalesLine2.VALIDATE("Qty. to Ship",SalesLine2.Quantity);
            IF SalesHeader."Prices Including VAT" THEN
              SalesLine2.VALIDATE(
                "Unit Price",
                ROUND(
                  (1 + SalesLine2."VAT %" / 100) * CustInvDisc."Service Charge",
                  Currency."Unit-Amount Rounding Precision"))
            ELSE
              SalesLine2.VALIDATE("Unit Price",CustInvDisc."Service Charge");
            SalesLine2.INSERT;
          END;
          SalesLine2.CalcVATAmountLines(0,SalesHeader,SalesLine2,TempVATAmountLine);
        END ELSE
          IF TempServiceChargeLine.FINDSET(FALSE,FALSE) THEN
            REPEAT
              IF (TempServiceChargeLine."Shipment No." = '') AND (TempServiceChargeLine."Qty. Shipped Not Invoiced" = 0) THEN BEGIN
                SalesLine2 := TempServiceChargeLine;
                SalesLine2.DELETE(TRUE);
              END;
            UNTIL TempServiceChargeLine.NEXT = 0;

        GLSetup.GET;
        IF GLSetup."Payment Discount Type" <> GLSetup."Payment Discount Type"::"Calc. Pmt. Disc. on Lines"
        THEN
          SalesLine2.SETRANGE("Allow Invoice Disc.",TRUE);
        IF SalesLine2.FIND('-') THEN BEGIN
          IF TemporaryHeader THEN
            SalesLine2.SetSalesHeader(SalesHeader);
          REPEAT
            InvAllow := FALSE;
            IF SalesLine2.Type = SalesLine2.Type::"G/L Account" THEN
              InvAllow := GLAcc.InvoiceDiscountAllowed(SalesLine2."No.");
            IF (SalesLine2.Quantity <> 0) AND NOT InvAllow THEN BEGIN
              SalesLine2."Pmt. Disc. Given Amount" := 0;
              IF (SalesLine2.Type <> SalesLine2.Type::"Charge (Item)") AND
                (SalesLine2."Prepayment %" = 0)
              THEN
                SalesLine2.VALIDATE("Inv. Discount Amount");
              IF SalesLine2."Allow Invoice Disc." THEN
                CASE GLSetup."Discount Calculation" OF
                  GLSetup."Discount Calculation"::" ",
                  GLSetup."Discount Calculation"::"Line Disc. * Inv. Disc. + Payment Disc.",
                  GLSetup."Discount Calculation"::"Line Disc. * Inv. Disc. * Payment Disc.":
                  SalesLine2."Inv. Discount Amount" :=
                    ROUND(SalesLine2."Line Amount" * CustInvDisc."Discount %" / 100,0.000001);
                  GLSetup."Discount Calculation"::"Line Disc. + Inv. Disc. + Payment Disc.",
                  GLSetup."Discount Calculation"::"Line Disc. + Inv. Disc. * Payment Disc.":
                    SalesLine2."Inv. Discount Amount" :=
                      ROUND(
                        (SalesLine2."Line Amount" + SalesLine2."Line Discount Amount" ) *
                        CustInvDisc."Discount %" / 100,0.000001);
                      END;
                  IF GLSetup."Payment Discount Type" =
                     GLSetup."Payment Discount Type"::"Calc. Pmt. Disc. on Lines"
                  THEN BEGIN
                    GLSetup.TESTFIELD("Discount Calculation");
                    CASE GLSetup."Discount Calculation" OF
                      GLSetup."Discount Calculation"::"Line Disc. + Inv. Disc. + Payment Disc.",
                      GLSetup."Discount Calculation"::"Line Disc. * Inv. Disc. + Payment Disc.":
                        SalesLine2."Pmt. Disc. Given Amount" :=
                          ROUND(
                            (SalesLine2."Line Amount" + SalesLine2."Line Discount Amount")
                            * SalesHeader."Payment Discount %" / 100,0.01);
                      GLSetup."Discount Calculation"::"Line Disc. + Inv. Disc. * Payment Disc.",
                      GLSetup."Discount Calculation"::"Line Disc. * Inv. Disc. * Payment Disc.":
                        SalesLine2."Pmt. Disc. Given Amount" :=
                          ROUND(
                            (SalesLine2."Line Amount" - SalesLine2."Inv. Discount Amount") *
                            SalesHeader."Payment Discount %" / 100,0.01);
                    END;
                  END;

              IF (SalesLine2.Type <> SalesLine2.Type::"Charge (Item)") AND
                (SalesLine2."Prepayment %" = 0)
              THEN
                SalesLine2.VALIDATE("Inv. Discount Amount");
              SalesLine2.MODIFY;
            END;
          UNTIL SalesLine2.NEXT = 0;
        END;


        IF CustInvDiscRecExists(SalesHeader."Invoice Disc. Code") THEN BEGIN
          IF InvDiscBase <> ChargeBase THEN
            CustInvDisc.GetRec(
              SalesHeader."Invoice Disc. Code",SalesHeader."Currency Code",CurrencyDate,InvDiscBase,CustInvDiscFound);

          SalesHeader."Invoice Discount Calculation" := SalesHeader."Invoice Discount Calculation"::"%";
          SalesHeader."Invoice Discount Value" := CustInvDisc."Discount %";
          IF NOT TemporaryHeader THEN
            SalesHeader.MODIFY;

          TempVATAmountLine.SetInvoiceDiscountPercent(
            CustInvDisc."Discount %",SalesHeader."Currency Code",
            SalesHeader."Prices Including VAT",SalesSetup."Calc. Inv. Disc. per VAT ID",
            SalesHeader."VAT Base Discount %");

          SalesLine2.SetSalesHeader(SalesHeader);
          SalesLine2.UpdateVATOnLines(0,SalesHeader,SalesLine2,TempVATAmountLine);
        END ELSE BEGIN
          SalesHeader."Invoice Discount Calculation" := SalesHeader."Invoice Discount Calculation"::"%";
          SalesHeader."Invoice Discount Value" := CustInvDisc."Discount %";
          IF NOT TemporaryHeader THEN
            SalesHeader.MODIFY;

          TempVATAmountLine.SetInvoiceDiscountPercent(
            CustInvDisc."Discount %",SalesHeader."Currency Code",
            SalesHeader."Prices Including VAT",SalesSetup."Calc. Inv. Disc. per VAT ID",
            SalesHeader."VAT Base Discount %");

          SalesLine2.SetSalesHeader(SalesHeader);
          SalesLine2.UpdateVATOnLines(0,SalesHeader,SalesLine2,TempVATAmountLine);
        END;
      END;
    END;

    LOCAL PROCEDURE CustInvDiscRecExists@2(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      CustInvDisc@1001 : Record 19;
    BEGIN
      CustInvDisc.SETRANGE(Code,InvDiscCode);
      EXIT(CustInvDisc.FINDFIRST);
    END;

    PROCEDURE CalculateWithSalesHeader@24(VAR TempSalesHeader@1000 : Record 36;VAR TempSalesLine@1001 : Record 37);
    VAR
      FilterSalesLine@1002 : Record 37;
    BEGIN
      FilterSalesLine.COPY(TempSalesLine);
      SalesLine := TempSalesLine;

      TemporaryHeader := TRUE;
      CalculateInvoiceDiscount(TempSalesHeader,TempSalesLine);

      TempSalesLine.COPY(FilterSalesLine);
    END;

    PROCEDURE CalculateIncDiscForHeader@3(VAR TempSalesHeader@1000 : Record 36);
    VAR
      SalesSetup@1003 : Record 311;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Calc. Inv. Discount" THEN EXIT;
      WITH TempSalesHeader DO BEGIN
        SalesLine."Document Type" := "Document Type";
        SalesLine."Document No." := "No.";
        CalculateInvoiceDiscount(TempSalesHeader,TempSalesLine);
      END;
    END;

    BEGIN
    END.
  }
}
