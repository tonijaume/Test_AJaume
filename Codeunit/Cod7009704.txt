OBJECT Codeunit 7009704 Funciones Hotel Payment
{
  OBJECT-PROPERTIES
  {
    Date=09/10/12;
    Time=15:40:03;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355002 : TextConst 'ENU=Totalize vouchers   \;ESP=Totalizacion bonos   \';
      Text001@1103355003 : TextConst 'ENU=Amount                #1###############\;ESP=Importe                #1###############\';
      Text002@1103355004 : TextConst 'ENU=Marked voucher amount #2###############;ESP=Importe bonos marcados #2###############';
      Text003@1103355005 : TextConst 'ENU=An error has occurred;ESP=Ha ocurrido un error inesperado.';
      Text004@1103355006 : TextConst 'ENU=Agency parameters folder do not exist;ESP=No existe el fichero de parametros agencia.';
      Text005@1103355007 : TextConst 'ENU=It already is in ABR diary;ESP=Ya est  en el diario ABR';
      Text006@1103355008 : TextConst 'ENU=Issue date must be indicated;ESP=Se debe indicar una fecha de concesi¢n';
      Text007@1103355009 : TextConst 'ENU=Amount must be indicated;ESP=Se debe indicar un importe';
      Text008@1103355010 : TextConst 'ENU=Payment date must be indicated;ESP=Se debe indicar una fecha de pago';
      Text009@1103355011 : TextConst 'ENU=PREV;ESP=ANT';
      Text010@1103355012 : TextConst 'ENU=PRE;ESP=PRE';
      Text011@1103355013 : TextConst 'ENU=Any voucher has been marked, to mark it use Ctrl+F1;ESP=No ha marcado ningun bono, para marcar utilice Ctrl+F1.';
      Text012@1103355014 : TextConst 'ENU=Lines are related to different local offices;ESP=Las lineas corresponden a Delegaciones diferentes.';
      Text013@1103355015 : TextConst 'ENU=Lines are related to different hotels;ESP=Las lineas corresponden a Hoteles diferentes.';
      Text014@1103355016 : TextConst 'ENU=Contract %1 of local office %2 does not exist;ESP=No existe el contrato %1 de la delegacion %2.';
      Text015@1103355017 : TextConst 'ENU=Hotel %1 does not exist;ESP=No existe el Hotel %1.';
      Text016@1103355018 : TextConst 'ENU=Supplier %1 does not exist;ESP=No existe el proveedor %1.';
      Text017@1103355019 : TextConst 'ENU=Error, Supplier posting group %1 does not exist;ESP=Error no existe el Grupo contable proveedor %1.';
      Text018@1103355020 : TextConst 'ENU=%1 department does not exist.;ESP=No existe el departamento %1.';
      Text019@1103355021 : TextConst 'ENU=Program %1 does not exist;ESP=No existe el Programa %1.';
      Text020@1103355022 : TextConst 'ENU=FRACOS;ESP=FRACOS';
      Text021@1103355023 : TextConst 'ENU=Own account hotel invoice;ESP=Fra. Hotel Cta. Propia';
      Text022@1103355024 : TextConst 'ENU=FRAINT;ESP=FRAINT';
      Text023@1103355025 : TextConst 'ENU=Intermediary account hotel inv.;ESP=Fra. Hotel Cta. Intermediacion';
      Text024@1103355026 : TextConst 'ENU=Guarantee;ESP=Garantia';
      Text025@1103355027 : TextConst 'ENU=Guarantees invoice;ESP=Factura Garantias';
      Text026@1103355028 : TextConst 'ENU=GUARANTCIR;ESP=GARANTCIR';
      Text027@1103355029 : TextConst 'ENU=Circuit bookings Guarantees invoice;ESP=Factura Garantias reservas Circuito';
      Text028@1103355030 : TextConst 'ENU=FRACOSCIR;ESP=FRACOSCIR';
      Text029@1103355031 : TextConst 'ENU=Own circuit account hotel Invoice;ESP=Factura Hotel Cta. Propia Circuito';
      Text030@1103355032 : TextConst 'ENU=FRAINTCIR;ESP=FRAINTCIR';
      Text031@1103355033 : TextConst 'ENU=Intermediary circuit hotel Invoice;ESP=Factura Hotel Intermediacion Circuito';
      Text032@1103355034 : TextConst 'ENU=Invoice is not recorded. Incomplete data;ESP=La Factura no se graba. Datos incompletos.';
      Text033@1103355035 : TextConst 'ENU=This invoice is remaining to be reviewed in remaining invoices;ESP=Esta factura ha quedado pendiente de revision en facturas pendientes.';
      Text034@1103355036 : TextConst 'ENU=Purchase contract does not exist for the Touroperator %1, Hotel %2\;ESP=No existe contrato de compra para el TourOperador %1, Hotel %2\';
      Text035@1103355037 : TextConst 'ENU=" in date %3.";ESP=" en fecha %3."';
      Text036@1103355038 : TextConst 'ENU=New final amount: #1###########;ESP=Nuevo importe final: #1###########';
      Text037@1103355039 : TextConst 'ENU=Unable to indicate a final amount lower than the validated current one;ESP=No puede indicar un importe final inferior al importe ya validado actual.';
      Text038@1103355040 : TextConst 'ENU=Validation amount: #1###########;ESP=Importe validacion: #1###########';
      Text039@1103355041 : TextConst 'ENU=Would you like to not validate this voucher with amount null;ESP=Desea dejar de validar este bono por importe cero';
      Text040@1103355042 : TextConst 'ENU=Would you like to validate this voucher by amount null;ESP=Desea validar este bono por importe cero';
      Text041@1103355043 : TextConst 'ENU=Own account supplier,;ESP=Proveedor Cuenta Propia,';
      Text042@1103355044 : TextConst 'ENU=Intermediary supplier,;ESP=Proveedor Intermediacion,';
      Text043@1103355045 : TextConst 'ENU=Would you like to return the current invoice;ESP=Desea retroceder la factura actual';
      Text044@1103355046 : TextConst 'ENU=Undoing the invoice %1.;ESP=Deshaciendo la factura %1.';
      Text045@1103355047 : TextConst 'ENU=Record current recovery,;ESP=Grabar recuperaci¢n Actual,';
      Text046@1103355048 : TextConst 'ENU=Record all the recoveries;ESP=Grabar Todas las recuperaciones';
      Text047@1103355049 : TextConst 'ENU=Cannot be recoveries without advances/loans;ESP=No puede haber recuperaciones sin Anticipos/pr‚stamos';
      Text048@1103355050 : TextConst 'ENU=Unable to transfer the recoveries to the diary ABR before;ESP=No se pueden pasar las recuperaciones al diario ABR antes';
      Text049@1103355051 : TextConst 'ENU=advance payments and loans;ESP=que los anticipos o pr‚stamos';
      Text050@1103355052 : TextConst 'ENU=Must indicate an amount of the recovery;ESP=Debe indicar el importe de la recuperaci¢n';
      Text051@1103355053 : TextConst 'ENU=Confirm all marked registrations;ESP=Confirmar todos los registros marcados';
      Text052@1103355054 : TextConst 'ENU=Confirm current registrations,;ESP=Confirmar registro actual,';
      Text053@1103355055 : TextConst 'ENU=Confirm all marked registrations;ESP=Confirmar todos los registros marcados,';
      Text054@1103355056 : TextConst 'ENU=Confirm all registrations;ESP=Confirmar todos los registros';
      Text055@1103355057 : TextConst 'ENU=Confirmation is already posted;ESP=Ya esta contabilizada la confirmacion';
      Text056@1103355058 : TextConst 'ENU=Must specify a confirmed amount;ESP=Hay que especificar un importe confirmado';
      Text057@1103355059 : TextConst 'ENU=Must specify a confirmation date;ESP=Hay que especificar una fecha de confirmacion';
      Text058@1103355060 : TextConst 'ENU=Confirmation;ESP=Confirmacion';
      Text059@1103355061 : TextConst 'ENU=There are no marked claims to post confirmation;ESP=No hay reclamaciones marcadas para contabilizar confirmacion';
      Text060@1103355062 : TextConst 'ENU=Correct all marked registrations;ESP=Rectificar todos los registros marcados';
      Text061@1103355063 : TextConst 'ENU=Correct &current registration;ESP=Rectificar registro &actual,';
      Text062@1103355064 : TextConst 'ENU=Correct all the marked registrations,;ESP=Rectificar todos los registros &marcados,';
      Text063@1103355065 : TextConst 'ENU=Correct &all the registrations;ESP=Rectificar &todos los registros';
      Text064@1103355066 : TextConst 'ENU=Correction is already posted;ESP=Ya esta contabilizada la rectificaci¢n';
      Text065@1103355067 : TextConst 'ENU=Must specify a corrected amount;ESP=Hay que especificar un importe rectificado';
      Text066@1103355068 : TextConst 'ENU=Must specify a correction date;ESP=Hay que especificar una fecha de rectificaci¢n';
      Text067@1103355069 : TextConst 'ENU=Correction;ESP=Rectificacion';
      Text068@1103355070 : TextConst 'ENU=There are no marked claims to post correction;ESP=No hay reclamaciones marcadas para contabilizar rectificaci¢n';
      Text069@1103355071 : TextConst 'ENU=REC;ESP=REC';
      Text070@1103355072 : TextConst 'ENU=RE2;ESP=RE2';
      Text071@1103355073 : TextConst 'ENU=Print letter of current registration;ESP=Imprimir carta del registro actual,';
      Text072@1103355074 : TextConst 'ENU=Print letter of all marked registrations;ESP=Imprimir carta de todos los registros marcados,';
      Text073@1103355075 : TextConst 'ENU=Print letter of current hotel;ESP=Imprimir carta del hotel actual';
      Text074@1103355076 : TextConst 'ENU=Reprint letter of current registration;ESP=Reimprimir carta del registro actual,';
      Text075@1103355077 : TextConst 'ENU=There are no remaining letters;ESP=No hay cartas pendientes';
      Text076@1103355078 : TextConst 'ENU=Was the print correct?;ESP=Ha sido correcta la impresi¢n?';
      Text077@1103355079 : TextConst 'ENU=Current hotel,;ESP=Hotel actual,';
      Text078@1103355080 : TextConst 'ENU=All hotels;ESP=Todos los Hoteles';
      Text079@1103355081 : TextConst 'ENU=There is nothing to print;ESP=No hay nada para imprimir';
      Text080@1103355082 : TextConst 'ENU=Marked lines are going to be transferred to ABR diary;ESP=Se van a pasar al diario ABR las lineas marcadas.';
      Text081@1103355083 : TextConst 'ENU=Contract %1 - %2 does not exist;ESP=No existe el contrato %1 - %2.';
      Text082@1103355084 : TextConst 'ENU=GAC;ESP=GAC';
      Text083@1103355085 : TextConst 'ENU=Agency parameters folder do not exist;ESP=No existe el fichero de parametros agencia.';
      Text084@1103355086 : TextConst 'ENU=Sale contract %1 - %2 does not exist;ESP=No existe el contrato de venta %1 - %2.';
      Text085@1103355087 : TextConst 'ENU=GAV;ESP=GAV';
      Text086@1103355088 : TextConst 'ENU=It has already been transferred to ABR diary;ESP=Ya se ha pasado al diario ABR.';
      Text087@1103355089 : TextConst 'ENU=Agency parameters folder does not exist;ESP=No existe el fichero de Parametros Agencia';
      Text088@1103355090 : TextConst 'ENU=COL;ESP=COL';
      Text089@1103355091 : TextConst 'ENU=Purchase contract %1 for local office %2 does not exist;ESP=No existe el contrato de compra %1 para la delegacion %2.';
      GestNoSer@1103355000 : Codeunit 396;
      GLSetup@1103355092 : Record 98;
      rPar@1103355001 : Record 7009700;

    PROCEDURE Totalizar_bono@1(VAR pBono@1103355000 : Record 7010013);
    VAR
      rBono@1103355001 : Record 7010013;
      ventana@1103355002 : Dialog;
      ImporteBono@1103355003 : Decimal;
      ImporteBonoMarcado@1103355004 : Decimal;
      w_clave_actual@1103355005 : Text[250];
    BEGIN
      // Totalizar_bono

      ImporteBono := 0;
      ImporteBonoMarcado := 0;
      w_clave_actual := pBono.CURRENTKEY;
      rBono.COPYFILTERS(pBono);
      IF rBono.FIND('-') THEN BEGIN
        REPEAT
          rBono.CALCFIELDS("Importe coste");
          IF rBono."Importe validacion" <> 0 THEN
            ImporteBono := ImporteBono + rBono."Importe validacion"
          ELSE
            ImporteBono := ImporteBono + rBono."Coste final";
          IF rBono.Usuario = USERID() THEN BEGIN
            IF rBono."Importe validacion" <> 0 THEN
              ImporteBonoMarcado := ImporteBonoMarcado + rBono."Importe validacion"
            ELSE
              ImporteBonoMarcado := ImporteBonoMarcado + rBono."Coste final";
          END;
        UNTIL rBono.NEXT = 0;
      END;
      MESSAGE(Text000+
              '\'+
              Text001+
              Text002, ImporteBono, ImporteBonoMarcado);
    END;

    PROCEDURE "Grabar_ABR_Anticipo/prestamo"@3("rAnticipo/Prestamo"@1103355000 : Record 7010005);
    VAR
      ult_n_orden@1103355001 : Integer;
      rABR@1103355002 : Record 7010017;
    BEGIN
      // Grabar_ABR_Anticipo/prestamo
      //
      IF NOT rPar.FIND('-') THEN
        ERROR(Text004);
      IF "rAnticipo/Prestamo"."Pasado ABR" THEN
        ERROR(Text005);
      IF "rAnticipo/Prestamo"."Fecha concesion" = 0D THEN
        ERROR(Text006);
      IF "rAnticipo/Prestamo".Importe = 0 THEN
        ERROR(Text007);
      IF "rAnticipo/Prestamo"."Fecha Pago" = 0D THEN
        ERROR(Text008);

      rABR.SETCURRENTKEY("N§ Orden");
      rABR.SETRANGE("N§ Orden");
      IF rABR.FIND('+') THEN
        ult_n_orden := rABR."N§ Orden"
      ELSE
        ult_n_orden := 0;

      rABR.INIT;
      rABR.TourOperador := "rAnticipo/Prestamo".TourOperador;
      rABR."N§ Orden" := ult_n_orden + 10000;
      rABR.Fecha := "rAnticipo/Prestamo"."Fecha Pago";
      rABR.Importe := "rAnticipo/Prestamo".Importe + "rAnticipo/Prestamo"."Importe intereses";
      IF "rAnticipo/Prestamo".Tipo = "rAnticipo/Prestamo".Tipo::Anticipo THEN BEGIN
        rABR."Concepto ABR" := Text009;
        rABR."Tipo anticipo" := "rAnticipo/Prestamo"."Tipo Anticipo";
        rABR."Tipo prestamo" := 0;
      END
      ELSE BEGIN
        rABR."Concepto ABR" := Text010;
        rABR."Tipo anticipo" := 0;
        rABR."Tipo prestamo" := "rAnticipo/Prestamo"."Tipo Prestamo";
        rABR."Importe intereses" := "rAnticipo/Prestamo"."Importe intereses";
      END;
      rABR.Contrato := "rAnticipo/Prestamo".Contrato;
      rABR.Hotel := "rAnticipo/Prestamo".Hotel;
      rABR."Fecha Concesion" := "rAnticipo/Prestamo"."Fecha concesion";
      rABR."Pasado Diario" := FALSE;
      rABR."Tipo movimiento" := rABR."Tipo movimiento"::Concesion;
      rABR.Delegacion := "rAnticipo/Prestamo".Delegacion;
      IF "rAnticipo/Prestamo".Tipo = "rAnticipo/Prestamo".Tipo::Anticipo THEN BEGIN
        rPar.TESTFIELD("Serie documentos anticipos");
        GestNoSer.InitSeries(rPar."Serie documentos anticipos", rPar."Serie documentos anticipos",
                            rABR.Fecha, rABR."Documento contabilizacion", rPar."Serie documentos anticipos");
      END
      ELSE BEGIN
        rPar.TESTFIELD("Serie documentos prestamos");
        GestNoSer.InitSeries(rPar."Serie documentos prestamos", rPar."Serie documentos prestamos",
                            rABR.Fecha, rABR."Documento contabilizacion", rPar."Serie documentos prestamos");
      END;
      rABR.INSERT;

      "rAnticipo/Prestamo"."Pasado ABR" := TRUE;
      "rAnticipo/Prestamo"."Documento contabilizacion" := rABR."Documento contabilizacion";
      "rAnticipo/Prestamo".MODIFY;
    END;

    PROCEDURE Busca_contrato@6(rBono@1103355000 : Record 7010013;VAR rCon@1103355001 : Record 7009723);
    BEGIN
      // Busca_contrato
      //
      rCon.SETCURRENTKEY(Hotel,
                         TourOperador,
                         "Fecha inicio contrato");
      rCon.SETRANGE (Hotel                  , rBono.Hotel);
      rCon.SETRANGE (TourOperador           , rBono."TourOperador Compra");
      rCon.SETFILTER("Fecha inicio contrato", '<=%1', rBono."Fecha llegada");
      rCon.SETFILTER("Fecha final contrato" , '>=%1', rBono."Fecha llegada");
      IF NOT rCon.FIND('-') THEN
        ERROR(Text034+
              Text035, rBono.TourOperador, rBono.Hotel, rBono."Fecha llegada");
    END;

    PROCEDURE cambia_importe_final@7(VAR rBono@1103355000 : Record 7010013);
    VAR
      importe_nuevo@1103355001 : Decimal;
      importe_anterior@1103355002 : Decimal;
      ventana@1103355003 : Dialog;
      cPar@1103355004 : Codeunit 7009700;
    BEGIN
      // cambia_importe_final
      //
      importe_anterior := rBono."Coste final";
      importe_nuevo := rBono."Coste final";
      rBono.VALIDATE("Importe ya validado");
      ventana.OPEN(Text036);
      ventana.INPUT(1, importe_nuevo);
      ventana.CLOSE;
      IF rBono."Coste final" <> importe_nuevo THEN
        rBono."Tipo importe" := rBono."Tipo importe"::Manual;
      IF importe_nuevo < (rBono."Importe ya validado" + rBono."Importe validacion") THEN
        ERROR(Text037);
      rBono."Coste final" := importe_nuevo;
      rBono.MODIFY;
      cPar.intro_historico_bono(rBono.Delegacion, rBono.TourOperador, rBono.Bono, rBono."N§ Reserva",
                                rBono."N§ Secuencia", rBono.FIELDCAPTION("Coste final"), STRSUBSTNO('%1', importe_anterior),
                                STRSUBSTNO('%1', importe_nuevo));
    END;

    PROCEDURE cambia_importe_validacion@8(VAR rBono@1103355000 : Record 7010013);
    VAR
      importe_nuevo@1103355001 : Decimal;
      importe_anterior@1103355002 : Decimal;
      ventana@1103355003 : Dialog;
      cPar@1103355004 : Codeunit 7009700;
    BEGIN
      // cambia_importe_validacion
      //
      importe_anterior := rBono."Importe validacion";
      importe_nuevo := rBono."Importe validacion";
      ventana.OPEN(Text038);
      ventana.INPUT(1, importe_nuevo);
      ventana.CLOSE();
      rBono.VALIDATE("Importe validacion", importe_nuevo);
      rBono.MODIFY;
      cPar.intro_historico_bono(rBono.Delegacion, rBono.TourOperador, rBono.Bono, rBono."N§ Reserva",
                                rBono."N§ Secuencia", rBono.FIELDCAPTION("Importe validacion"), STRSUBSTNO('%1', importe_anterior),
                                STRSUBSTNO('%1', importe_nuevo));
    END;

    PROCEDURE poner_bote_directo@9(VAR rBono@1103355000 : Record 7010013);
    BEGIN
      // poner_bote_directo
      //
      IF rBono."Bote directo" THEN BEGIN
        IF CONFIRM(Text039) THEN BEGIN
          rBono."Bote directo":= FALSE;
          rBono.MODIFY;
        END;
      END
      ELSE BEGIN
        IF CONFIRM(Text040) THEN BEGIN
          rBono."Bote directo":= TRUE;
          rBono.MODIFY;
        END;
      END;
    END;

    PROCEDURE Localizar_asiento@11(rFra@1103355000 : Record 7010014);
    VAR
      rHot@1103355001 : Record 7009724;
      fCont@1103355002 : Form 29;
      rContProv@1103355003 : Record 25;
    BEGIN
      // Localizar_asiento
      //
      IF NOT rHot.GET(rFra.Hotel) THEN
        ERROR(Text015, rFra.Hotel);
      rContProv.RESET;
      IF rFra."Tipo contrato" = rFra."Tipo contrato"::"En nombre propio" THEN
        rContProv.SETRANGE("Vendor No.", rHot."Proveedor Cuenta Propia")
      ELSE
        rContProv.SETRANGE("Vendor No.", rHot."Proveedor Intermediacion");
      rContProv.SETRANGE("External Document No.", rFra."Num. Factura");
      fCont.SETTABLEVIEW(rContProv);
      fCont.EDITABLE(FALSE);
      fCont.RUN;
      CLEAR(fCont);
      rContProv.SETRANGE("Document No.");
      rContProv.SETRANGE("Vendor No.");
    END;

    PROCEDURE Localizar_pagos_pendientes@12(VAR rFra@1103355000 : Record 7010014);
    VAR
      rContProv@1103355001 : Record 25;
      rHot@1103355002 : Record 7009724;
      fCont@1103355003 : Form 29;
      opcion@1103355004 : Integer;
    BEGIN
      // Localizar_pagos_pendientes
      //
      IF NOT rHot.GET(rFra.Hotel) THEN
        ERROR(Text015, rFra.Hotel);
      opcion := STRMENU(Text041+
                        Text042, 1);
      IF opcion = 0 THEN
        EXIT;
      rContProv.RESET;
      IF opcion = 1 THEN
        rContProv.SETRANGE("Vendor No.", rHot."Proveedor Cuenta Propia")
      ELSE
        rContProv.SETRANGE("Vendor No.", rHot."Proveedor Intermediacion");
      rContProv.SETRANGE(Open, TRUE);
      fCont.SETTABLEVIEW(rContProv);
      fCont.EDITABLE(FALSE);
      fCont.RUN;
      CLEAR(fCont);
      rContProv.SETRANGE("Vendor No.");
      rContProv.SETRANGE(Open);
    END;

    PROCEDURE Deshacer_factura_pendiente@16(VAR rFra@1103355000 : Record 7010014);
    VAR
      rVal@1103355001 : Record 7010022;
    BEGIN
      // Deshacer_factura_pendiente
      //
      IF NOT CONFIRM(Text043) THEN
        EXIT;
      MESSAGE(Text044, rFra."Num. Factura");
      rVal.RESET;
      rVal.SETRANGE("Hotel Factura", rFra.Hotel);
      rVal.SETRANGE("N§ Factura"   , rFra."Num. Factura");
      IF rVal.FIND('-') THEN BEGIN
        rVal.DELETEALL;
      END;
      rVal.SETRANGE("Hotel Factura");
      rVal.SETRANGE("N§ Factura");

      rFra.DELETE;
      COMMIT;
    END;

    PROCEDURE Procesar_Recuperacion@5(VAR rRecuperacion@1103355000 : Record 7010006);
    VAR
      Opcion@1103355001 : Integer;
      rAnt_Pre@1103355002 : Record 7010005;
      rABR@1103355003 : Record 7010017;
      ult_n_orden@1103355004 : Integer;
    BEGIN
      // Procesar_Recuperacion
      //
      rRecuperacion.SETRANGE(Tipo, rRecuperacion.Tipo);
      rRecuperacion.SETRANGE(Hotel, rRecuperacion.Hotel);
      rRecuperacion.SETRANGE(Contrato, rRecuperacion.Contrato);
      rRecuperacion.SETRANGE("Fecha concesion", rRecuperacion."Fecha concesion");
      rRecuperacion.SETRANGE("Pasado ABR", FALSE);

      Opcion := STRMENU(Text045 +
                 Text046, 1);

      CASE Opcion OF
        0: EXIT;
        1: rRecuperacion.SETRANGE("Fecha recuperacion", rRecuperacion."Fecha recuperacion");
      END;

      IF NOT rAnt_Pre.GET(rRecuperacion.Tipo, rRecuperacion.Hotel, rRecuperacion.Contrato, rRecuperacion."Fecha concesion") THEN
        ERROR(Text047);

      IF NOT rAnt_Pre."Pasado ABR" THEN
        ERROR(Text048 +
              Text049);
      IF NOT rPar.FIND('-') THEN
        ERROR(Text004);
      IF rRecuperacion.FIND('-') THEN
        REPEAT
          IF rRecuperacion.Importe = 0 THEN
            ERROR(Text050);

          rABR.SETCURRENTKEY("N§ Orden");
          rABR.SETRANGE("N§ Orden");
          IF rABR.FIND('+') THEN
            ult_n_orden := rABR."N§ Orden"
          ELSE
            ult_n_orden := 0;
          rABR.INIT;
          rABR.TourOperador := rRecuperacion.TourOperador;
          rABR.Delegacion := rRecuperacion.Delegacion;
          rABR."N§ Orden" := ult_n_orden + 10000;
          rABR.Fecha := rRecuperacion."Fecha recuperacion";
          IF rRecuperacion.Tipo= 0 THEN BEGIN
            rABR."Concepto ABR" := Text009;
            rABR."Tipo anticipo" := rAnt_Pre."Tipo Anticipo";
            rABR."Tipo prestamo" := 0;
          END
          ELSE BEGIN
            rABR."Concepto ABR" := Text010;
            rABR."Tipo anticipo" := 0;
            rABR."Tipo prestamo" := rAnt_Pre."Tipo Prestamo";
          END;
          rABR.Importe := rRecuperacion.Importe * (-1);
          rABR.Contrato := rRecuperacion.Contrato;
          rABR.Hotel := rRecuperacion.Hotel;
          rABR."Fecha Concesion" := rRecuperacion."Fecha concesion";
          rABR."Pasado Diario" := FALSE;
          rABR."Tipo movimiento" := rABR."Tipo movimiento"::Recuperacion;
          rPar.TESTFIELD("Serie documentos recuperacion");
          GestNoSer.InitSeries(rPar."Serie documentos recuperacion", rPar."Serie documentos recuperacion",
                              rABR.Fecha, rABR."Documento contabilizacion", rPar."Serie documentos recuperacion");
          rABR.INSERT;
          rRecuperacion."Pasado ABR" := TRUE;
          rRecuperacion."Documento contabilizacion" := rABR."Documento contabilizacion";
          rRecuperacion.MODIFY;
        UNTIL rRecuperacion.NEXT = 0
      ELSE
        MESSAGE(Text005);
      rRecuperacion.SETRANGE("Pasado ABR");
    END;

    PROCEDURE Procesar_Confirmacion@10(VAR rReclamaciones@1103355000 : Record 7010011);
    VAR
      iOpcion@1103355001 : Integer;
    BEGIN
      // Procesar_Confirmacion
      //
      IF rReclamaciones.Pendiente THEN
        IF CONFIRM(Text051) THEN
          iOpcion := 2
        ELSE
          EXIT
      ELSE
        iOpcion := STRMENU(Text052 +
                           Text053 +
                           Text054);

      CASE iOpcion OF
        1: BEGIN
          IF rReclamaciones."Contabilizado confirmacion" THEN
            ERROR(Text055);
          IF rReclamaciones."Importe confirmado" = 0 THEN
            ERROR(Text056);
          IF rReclamaciones."Fecha confirmacion" = 0D THEN
            ERROR(Text057);

          Grabar_ABR_Rec_Conf(rReclamaciones, Text058);
          rReclamaciones."Contabilizado confirmacion" := TRUE;
          rReclamaciones."Emitido TourOperador" := FALSE;
          rReclamaciones.MODIFY;
        END;

        2,3: BEGIN
          IF iOpcion = 2 THEN
            rReclamaciones.MARKEDONLY(TRUE);
          rReclamaciones.SETFILTER("Fecha confirmacion", '<>%1',0D);
          rReclamaciones.SETFILTER("Importe confirmado", '>0');
          rReclamaciones.SETRANGE("Contabilizado confirmacion", FALSE);
          IF rReclamaciones.FIND('-') THEN
            REPEAT BEGIN
              Grabar_ABR_Rec_Conf(rReclamaciones, Text058);
              rReclamaciones."Contabilizado confirmacion" := TRUE;
              rReclamaciones."Emitido TourOperador" := FALSE;
              rReclamaciones.MODIFY;
            END UNTIL rReclamaciones.NEXT = 0
          ELSE
            ERROR(Text059);
          rReclamaciones.MARKEDONLY(FALSE);
          rReclamaciones.SETRANGE("Fecha confirmacion");
          rReclamaciones.SETRANGE("Importe confirmado");
          rReclamaciones.SETRANGE("Contabilizado confirmacion");
        END;
      END;
    END;

    PROCEDURE Procesar_Rectificacion@15(VAR rReclamaciones@1103355000 : Record 7010011);
    VAR
      iOpcion@1103355001 : Integer;
    BEGIN
      // Procesar_Rectificacion
      //
      IF rReclamaciones.Pendiente THEN
        IF CONFIRM(Text060) THEN
          iOpcion := 2
        ELSE
          EXIT
      ELSE
        iOpcion := STRMENU(Text061 +
                           Text062 +
                           Text063);

      CASE iOpcion OF
        1: BEGIN
          IF rReclamaciones."Contabilizado rectificacion" THEN
            ERROR(Text064);
          IF rReclamaciones."Importe rectificado" = 0 THEN
            ERROR(Text065);
          IF rReclamaciones."Fecha rectificacion" = 0D THEN
            ERROR(Text066);

          Grabar_ABR_Rec_Conf(rReclamaciones, Text067);
          rReclamaciones."Contabilizado rectificacion" := TRUE;
          rReclamaciones."Emitido TourOperador" := FALSE;
          rReclamaciones.MODIFY;
        END;

        2,3: BEGIN
          IF iOpcion = 2 THEN
            rReclamaciones.MARKEDONLY(TRUE);
          rReclamaciones.SETFILTER("Fecha rectificacion", '<>%1',0D);
          rReclamaciones.SETFILTER("Importe rectificado", '>0');
          rReclamaciones.SETRANGE("Contabilizado rectificacion", FALSE);
          IF rReclamaciones.FIND('-') THEN
            REPEAT BEGIN
              Grabar_ABR_Rec_Conf(rReclamaciones, Text067);
              rReclamaciones."Contabilizado rectificacion" := TRUE;
              rReclamaciones."Emitido TourOperador" := FALSE;
              rReclamaciones.MODIFY;
            END UNTIL rReclamaciones.NEXT = 0
          ELSE
            ERROR(Text068);
          rReclamaciones.MARKEDONLY(FALSE);
          rReclamaciones.SETRANGE("Fecha rectificacion");
          rReclamaciones.SETRANGE("Importe rectificado");
          rReclamaciones.SETRANGE("Contabilizado rectificacion");
        END;
      END;
    END;

    PROCEDURE Grabar_ABR_Rec_Conf@13(VAR rReclamaciones@1103355000 : Record 7010011;tTipo@1103355001 : Text[15]);
    VAR
      rABR@1103355002 : Record 7010017;
      ult_n_orden@1103355003 : Integer;
    BEGIN
      // Grabar_ABR_Rec_Conf
      //
      rABR.SETCURRENTKEY("N§ Orden");
      rABR.SETRANGE("N§ Orden");
      IF rABR.FIND('+') THEN
        ult_n_orden := rABR."N§ Orden"
      ELSE
        ult_n_orden := 0;

      rABR.INIT;
      rABR."N§ Orden" := ult_n_orden + 10000;
      rABR.TourOperador := rReclamaciones.TourOperador;
      CASE tTipo OF
        Text058: BEGIN
          rABR."Concepto ABR" := Text069;
          rABR.Fecha := rReclamaciones."Fecha confirmacion";
          rABR.Importe := rReclamaciones."Importe confirmado DL";
          rABR."Fecha Concesion" := rReclamaciones."Fecha confirmacion";
        END;
        Text067: BEGIN
          rABR."Concepto ABR" := Text070;
          rABR.Fecha := rReclamaciones."Fecha rectificacion";
          rABR.Importe := rReclamaciones."Importe rectificacion DL";
          rABR."Fecha Concesion" := rReclamaciones."Fecha rectificacion";
        END;
      END;
      rABR."N§ referencia reclamacion" := FORMAT(rReclamaciones."N§ Referencia");
      rABR.Hotel := rReclamaciones.Hotel;
      rABR.Delegacion := rReclamaciones.Delegacion;
      rABR."Tipo reclamacion" := rReclamaciones."Tipo reclamacion";
      rABR.INSERT;
    END;

    PROCEDURE Emitir_Carta@14(VAR rReclamaciones@1103355000 : Record 7010011);
    VAR
      iOpcion@1103355001 : Integer;
    BEGIN
      // Emitir_Carta
      //
      IF rReclamaciones.Pendiente THEN
        iOpcion := STRMENU(Text071 +
                           Text072 +
                           Text073)
      ELSE
        iOpcion := STRMENU(Text074 +
                           Text072 +
                           Text073);

      CASE iOpcion OF
        0: EXIT;
        1: BEGIN
          rReclamaciones.CLEARMARKS;
          rReclamaciones.MARK(TRUE);
          rReclamaciones.MARKEDONLY(TRUE);
        END;
        2: rReclamaciones.MARKEDONLY(TRUE);
        3: BEGIN
          rReclamaciones.SETRANGE(Hotel,rReclamaciones.Hotel)
        END;
      END;

      IF iOpcion <> 1 THEN
        rReclamaciones.SETRANGE(Pendiente, TRUE);

      IF NOT rReclamaciones.FIND('-') THEN BEGIN
        rReclamaciones.SETRANGE(Hotel);
        rReclamaciones.SETRANGE(Pendiente);
        rReclamaciones.CLEARMARKS;
        rReclamaciones.MARKEDONLY(FALSE);
        ERROR(Text075);
      END;

      REPORT.RUNMODAL(7009995, TRUE, TRUE, rReclamaciones);
      IF CONFIRM(Text076) THEN
        rReclamaciones.MODIFYALL(Pendiente, FALSE);

      rReclamaciones.SETRANGE(Hotel);
      rReclamaciones.SETRANGE(Pendiente);
      rReclamaciones.CLEARMARKS;
      rReclamaciones.MARKEDONLY(FALSE);
    END;

    PROCEDURE Informe_TourOperador@17(rReclamaciones@1103355000 : Record 7010011);
    VAR
      iOpcion@1103355001 : Integer;
    BEGIN
      // Informe TourOperador
      //
      iOpcion := STRMENU(Text077 +
                         Text078);
      CASE iOpcion OF
        0: EXIT;
        1: rReclamaciones.SETRANGE(Hotel, rReclamaciones.Hotel);
      END;

      rReclamaciones.SETRANGE(TourOperador, rReclamaciones.TourOperador);
      rReclamaciones.SETRANGE("Contabilizado confirmacion", TRUE);
      rReclamaciones.SETRANGE("Emitido TourOperador", FALSE);

      IF NOT rReclamaciones.FIND('-') THEN
        ERROR(Text079);

      REPORT.RUNMODAL(7009996, FALSE, TRUE, rReclamaciones);

      IF CONFIRM(Text076) THEN
        rReclamaciones.MODIFYALL("Emitido TourOperador", TRUE);
    END;

    PROCEDURE grabar_garantia_compra@18(VAR rGar@1103355000 : Record 7009726);
    BEGIN
      // Grabar_garantia_compra
      //
      IF NOT CONFIRM(Text080, TRUE) THEN
        EXIT;
      IF NOT rPar.FIND('-') THEN
        ERROR(Text004);
      rGar.MARKEDONLY(TRUE);
      IF rGar.FIND('-') THEN BEGIN
        REPEAT
          IF NOT rGar.Pagada THEN BEGIN
            graba_ABR_garantia_compra(rGar);
            rGar.Pagada := TRUE;
            rGar.MODIFY;
            rGar.MARK(FALSE);
          END;
        UNTIL rGar.NEXT = 0;
      END;
      rGar.MARKEDONLY(FALSE);
    END;

    PROCEDURE graba_ABR_garantia_compra@21(VAR rGar@1103355000 : Record 7009726);
    VAR
      rABR@1103355001 : Record 7010017;
      rABR2@1103355002 : Record 7010017;
      rConC@1103355003 : Record 7009723;
    BEGIN
      // graba_ABR_garantia_compra
      //
      IF NOT rConC.GET(rGar.Delegacion, rGar."N§ Contrato") THEN
        ERROR(Text081, rGar.Delegacion, rGar."N§ Contrato");
      CLEAR(rABR);
      rABR2.RESET;
      IF rABR2.FIND('+') THEN
        rABR."N§ Orden" := rABR2."N§ Orden" + 100
      ELSE
        rABR."N§ Orden" := 1;
      rABR.Fecha := rGar."Fecha pago";
      rABR."Concepto ABR" := Text082;
      rABR.Importe := rGar.Importe;
      rABR.Contrato := rGar."N§ Contrato";
      rABR.Hotel := rConC.Hotel;
      rABR."Fecha Concesion" := rGar."Fecha pago";
      rABR.TourOperador := rConC.TourOperador;
      rABR.Delegacion := rGar.Delegacion;
      rABR."Tipo garantias" := rConC."Tipo de Contrato" + 1;
      rPar.TESTFIELD("Serie documentos garantias com");
      GestNoSer.InitSeries(rPar."Serie documentos garantias com", rPar."Serie documentos garantias com",
                          rABR.Fecha, rABR."Documento contabilizacion", rPar."Serie documentos garantias com");
      rABR.INSERT;
      rGar."Documento contabilizacion" := rABR."Documento contabilizacion";
    END;

    PROCEDURE graba_ABR_colaboracion@19(par_col@1103355000 : Record 7010008);
    VAR
      rAbr@1103355001 : Record 7010017;
      rAbr2@1103355002 : Record 7010017;
    BEGIN
      // graba_ABR_colaboracion
      //
      IF par_col."Pasado ABR" THEN
        ERROR(Text086);
      IF NOT rPar.FIND('-') THEN
        ERROR(Text087);
      rAbr.INIT;
      rAbr2.RESET;
      IF rAbr2.FIND('+') THEN
        rAbr."N§ Orden" := rAbr2."N§ Orden" + 100
      ELSE
        rAbr."N§ Orden" := 1;
      rAbr.Fecha := par_col."Fecha a descontar";
      rAbr."Concepto ABR" := Text088;
      rAbr.Importe := par_col."Importe DL";
      rAbr.Hotel := par_col.Hotel;
      rAbr."Fecha Concesion" := par_col."Fecha colaboracion";
      rAbr."Pasado Diario" := FALSE;
      rAbr.TourOperador := par_col.TourOperador;
      rAbr."Tipo movimiento" := rAbr."Tipo movimiento"::Concesion;
      rAbr.Delegacion := par_col.Delegacion;
      rAbr."Tipo prestamo" := par_col."Tipo colaboracion";
      rAbr."Codigo colaboracion" := par_col.Codigo;
      rPar.TESTFIELD("Serie documentos colaboracion");
      GestNoSer.InitSeries(rPar."Serie documentos colaboracion", rPar."Serie documentos colaboracion",
                          rAbr.Fecha, rAbr."Documento contabilizacion", rPar."Serie documentos colaboracion");
      rAbr.INSERT;
      par_col."Pasado ABR" := TRUE;
      par_col."Documento contabilizacion" := rAbr."Documento contabilizacion";
      par_col.MODIFY;
    END;

    PROCEDURE marcar_masivo_bonos@20(VAR par_bono@1103355000 : Record 7010013);
    BEGIN
      // marcar_masivo_bonos
      //
      IF par_bono.FIND('-') THEN BEGIN
        REPEAT
          IF par_bono.Usuario = USERID() THEN
            par_bono.Usuario := ''
          ELSE
            par_bono.Usuario := USERID();
          par_bono.MODIFY;
        UNTIL par_bono.NEXT = 0;
      END;
    END;

    PROCEDURE calculo_aportacion@22(VAR par_fra@1103355000 : Record 7010014;par_val@1103355001 : Record 7010022);
    VAR
      rCon@1103355002 : Record 7009723;
      rAport@1103355003 : Record 7010007;
      aux_bono@1103355004 : Record 7010013;
      ok@1103355005 : Boolean;
    BEGIN
      // calculo_aportacion
      //
      ok := aux_bono.GET(par_val.Delegacion, par_val.TourOperador, par_val.Bono, par_val."N§ Reserva", par_val."N§ Secuencia");
      IF aux_bono."Creado por" <> aux_bono."Creado por"::Regularizacion THEN BEGIN
        rCon.SETCURRENTKEY(Hotel,
                           TourOperador,
                           "Fecha inicio contrato");
        rCon.SETRANGE (Hotel                  , par_fra.Hotel);
        rCon.SETRANGE (TourOperador           , par_val."TourOperador Compra");
        rCon.SETFILTER("Fecha inicio contrato", '<=%1', par_fra."Fecha llegada");
        rCon.SETFILTER("Fecha final contrato" , '>=%1', par_fra."Fecha llegada");
        IF NOT rCon.FIND('-') THEN
          ERROR(Text034+
                Text035, par_val."TourOperador Compra", par_fra.Hotel, par_fra."Fecha llegada");
      END
      ELSE BEGIN
        IF NOT rCon.GET(aux_bono.Delegacion, aux_bono."N§ Contrato") THEN
          ERROR(Text089,
                aux_bono."N§ Contrato", aux_bono.Delegacion);
      END;
      // Calculamos Aportacion guias
      //
      rAport.RESET;
      rAport.SETRANGE (Delegacion   , par_val.Delegacion);
      rAport.SETRANGE ("N§ Contrato", rCon."N§ Contrato compra");
      rAport.SETFILTER("Fecha desde", '<=%1', par_fra."Fecha aportacion");
      rAport.SETFILTER("Fecha hasta", '>=%1', par_fra."Fecha aportacion");
      rAport.SETRANGE (Activo       , TRUE);
      IF rAport.FIND('+') THEN BEGIN
        par_fra."Aportacion teorica guias" := par_fra."Aportacion teorica guias" +
                                              ROUND((par_val."Importe validacion" * rAport.Porcentaje) / 100, 0.00001);
      END;
      rAport.RESET;
    END;

    BEGIN
    {

      ## AJF 29/06/09

        .- (09/00319) cambio c¢digos de hotel de code10 a code20.
    }
    END.
  }
}
