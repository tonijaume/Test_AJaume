OBJECT Codeunit 99000845 Reservation Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 32=rm,
                TableData 337=rimd,
                TableData 99000849=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Firm Planned %1;ESP=Planif. firme %1';
      Text001@1001 : TextConst 'ENU=Released %1;ESP=Lanzada %1';
      Text003@1002 : TextConst 'ENU=CU99000845: CalculateRemainingQty - Source type missing;ESP=CU99000845: CalculateRemainingQty - Source type missing';
      Text004@1003 : TextConst 'ENU=Codeunit 99000845: Illegal FieldFilter parameter;ESP=Codeunit 99000845: Illegal FieldFilter parameter';
      Text006@1005 : TextConst 'ENU=Outbound,Inbound;ESP=Salida,Entrada';
      Text007@1006 : TextConst 'ENU=CU99000845 DeleteReservEntries2: Surplus order tracking double record detected.;ESP=CU99000845 DeleteReservEntries2: Surplus order tracking double record detected.';
      CalcReservEntry@1007 : Record 337;
      CalcReservEntry2@1008 : Record 337;
      ForItemLedgEntry@1009 : Record 32;
      CalcItemLedgEntry@1010 : Record 32;
      ForSalesLine@1011 : Record 37;
      CalcSalesLine@1012 : Record 37;
      ForPurchLine@1013 : Record 39;
      CalcPurchLine@1014 : Record 39;
      ForItemJnlLine@1015 : Record 83;
      ForReqLine@1016 : Record 246;
      CalcReqLine@1017 : Record 246;
      ForProdOrderLine@1018 : Record 5406;
      CalcProdOrderLine@1019 : Record 5406;
      ForProdOrderComp@1020 : Record 5407;
      CalcProdOrderComp@1021 : Record 5407;
      ForPlanningComponent@1022 : Record 99000829;
      CalcPlanningComponent@1023 : Record 99000829;
      ForTransLine@1024 : Record 5741;
      CalcTransLine@1025 : Record 5741;
      ForServiceInvLine@1026 : Record 5902;
      CalcServiceInvLine@1027 : Record 5902;
      ForBOMJnlLine@1056 : Record 89;
      ActionMessageEntry@1028 : Record 99000849;
      Item@1029 : Record 27;
      Location@1061 : Record 14;
      MfgSetup@1030 : Record 99000765;
      SKU@1031 : Record 5700;
      ItemTrackingCode@1004 : Record 6502;
      TempTrackingSpecification@1055 : TEMPORARY Record 336;
      ForJobJnlLine@1065 : Record 210;
      CreateReservEntry@1032 : Codeunit 99000830;
      ReservEngineMgt@1033 : Codeunit 99000831;
      ReserveSalesLine@1034 : Codeunit 99000832;
      ReserveReqLine@1035 : Codeunit 99000833;
      ReservePurchLine@1036 : Codeunit 99000834;
      ReserveItemJnlLine@1037 : Codeunit 99000835;
      ReserveProdOrderLine@1038 : Codeunit 99000837;
      ReserveProdOrderComp@1039 : Codeunit 99000838;
      ReservePlanningComponent@1040 : Codeunit 99000840;
      ReserveServiceInvLine@1041 : Codeunit 99000842;
      ReserveTransLine@1042 : Codeunit 99000836;
      GetPlanningParameters@1043 : Codeunit 99000855;
      CreatePick@1058 : Codeunit 7312;
      ReserveJobJnlLine@1064 : Codeunit 99000844;
      Positive@1044 : Boolean;
      CurrentBindingIsSet@1045 : Boolean;
      HandleItemTracking@1060 : Boolean;
      InvSearch@1046 : Text[1];
      FieldFilter@1047 : Text[80];
      InvNextStep@1048 : Integer;
      ValueArray@1049 : ARRAY [18] OF Integer;
      CurrentBinding@1050 : ',Order-to-Order';
      ItemTrackingHandling@1051 : 'None,Allow deletion,Match';
      Text008@1053 : TextConst 'ENU=Item tracking defined for item %1 in the %2 accounts for more than the quantity you have entered.\You must adjust the existing item tracking and then reenter the new quantity.;ESP=Seguim. prod. definido para el producto %1 en las cuentas de %2 tiene una cdad. mayor que la que ha introducido.\Debe ajustar el seguim. prod. actual y volver a introducir la nueva cantidad.';
      Text009@1052 : TextConst 'ENU=Item Tracking cannot be fully matched.\Serial No.: %1, Lot No.: %2, outstanding quantity: %3.;ESP=Seguim. producto no coincide totalmente.\N§ serie: %1, N§ lote: %2, cdad. pendiente: %3.';
      Text010@1054 : TextConst 'ENU=Item tracking is defined for item %1 in the %2.\You must delete the existing item tracking before modifying or deleting the %2.;ESP=Seguim. prod. est  definido para el producto %1 en las cuentas del %2.\Debe eliminar el seguim. prod. actual antes de modificar o eliminar el %2.';
      TotalAvailQty@1062 : Decimal;
      QtyAllocInWhse@1057 : Decimal;
      QtyOnOutBound@1059 : Decimal;
      Text011@1063 : TextConst 'ENU=Item tracking is defined for item %1 in the %2.\Do you want to delete the %2 and the item tracking lines?;ESP=Seguim. prod. est  definido para el producto %1 en las cuentas del %2.\¨Desea eliminar el %2 y las l¡ns. seguim. prod.?';

    PROCEDURE IsPositive@18() : Boolean;
    BEGIN
      EXIT(Positive);
    END;

    PROCEDURE FormatQty@22(Quantity@1000 : Decimal) : Decimal;
    BEGIN
      IF Positive THEN
        EXIT(Quantity);

      EXIT(-Quantity);
    END;

    PROCEDURE SetCalcReservEntry@70(TrackingSpecification@1000 : Record 336;VAR ReservEntry@1001 : Record 337);
    BEGIN
      // Late Binding
      CalcReservEntry.TRANSFERFIELDS(TrackingSpecification);
      SourceQuantity(CalcReservEntry,TRUE);
      CalcReservEntry."Serial No." := TrackingSpecification."Serial No.";
      CalcReservEntry."Lot No." := TrackingSpecification."Lot No.";
      ReservEntry := CalcReservEntry;
      HandleItemTracking := TRUE;
    END;

    PROCEDURE SetSalesLine@1(NewSalesLine@1000 : Record 37);
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForSalesLine := NewSalesLine;

      CalcReservEntry."Source Type" := DATABASE::"Sales Line";
      CalcReservEntry."Source Subtype" := ForSalesLine."Document Type";
      CalcReservEntry."Source ID" := NewSalesLine."Document No.";
      CalcReservEntry."Source Ref. No." := NewSalesLine."Line No.";

      IF NewSalesLine.Type = NewSalesLine.Type::Item THEN
        CalcReservEntry."Item No." := NewSalesLine."No.";
      CalcReservEntry."Variant Code" := NewSalesLine."Variant Code";
      CalcReservEntry."Location Code" := NewSalesLine."Location Code";
      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewSalesLine."Qty. per Unit of Measure";
      CalcReservEntry."Expected Receipt Date" := NewSalesLine."Shipment Date";
      CalcReservEntry."Shipment Date" := NewSalesLine."Shipment Date";
      CalcReservEntry.Description := NewSalesLine.Description;
      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      Positive :=
        ((CreateReservEntry.SignFactor(CalcReservEntry) * ForSalesLine."Outstanding Qty. (Base)") <= 0);

      SetPointerFilter(CalcReservEntry2);

      IF (CalcReservEntry."Location Code" <> '') AND
         Location.GET(CalcReservEntry."Location Code") AND
         (Location."Bin Mandatory" OR Location."Require Pick")
      THEN
        CalcReservedQtyOnPick(TotalAvailQty,QtyAllocInWhse);
    END;

    PROCEDURE SetReqLine@13(NewReqLine@1000 : Record 246);
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForReqLine := NewReqLine;

      CalcReservEntry."Source Type" := DATABASE::"Requisition Line";
      CalcReservEntry."Source ID" := NewReqLine."Worksheet Template Name";
      CalcReservEntry."Source Batch Name" := NewReqLine."Journal Batch Name";
      CalcReservEntry."Source Ref. No." := NewReqLine."Line No.";

      IF NewReqLine.Type = NewReqLine.Type::Item THEN
        CalcReservEntry."Item No." := NewReqLine."No.";
      CalcReservEntry."Variant Code" := NewReqLine."Variant Code";
      CalcReservEntry."Location Code" := NewReqLine."Location Code";
      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewReqLine."Qty. per Unit of Measure";
      CalcReservEntry."Expected Receipt Date" := NewReqLine."Due Date";
      CalcReservEntry."Shipment Date" := NewReqLine."Due Date";
      CalcReservEntry."Planning Flexibility" := NewReqLine."Planning Flexibility";
      CalcReservEntry.Description := NewReqLine.Description;

      CalcReservEntry2 := CalcReservEntry;

      Positive := ForReqLine."Net Quantity (Base)" < 0;

      GetItemSetup(CalcReservEntry);

      SetPointerFilter(CalcReservEntry2);
    END;

    PROCEDURE SetPurchLine@2(NewPurchLine@1000 : Record 39);
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForPurchLine := NewPurchLine;

      CalcReservEntry."Source Type" := DATABASE::"Purchase Line";
      CalcReservEntry."Source Subtype" := ForPurchLine."Document Type";
      CalcReservEntry."Source ID" := NewPurchLine."Document No.";
      CalcReservEntry."Source Ref. No." := NewPurchLine."Line No.";

      IF NewPurchLine.Type = NewPurchLine.Type::Item THEN
        CalcReservEntry."Item No." := NewPurchLine."No.";
      CalcReservEntry."Variant Code" := NewPurchLine."Variant Code";
      CalcReservEntry."Location Code" := NewPurchLine."Location Code";
      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewPurchLine."Qty. per Unit of Measure";
      CalcReservEntry."Expected Receipt Date" := NewPurchLine."Expected Receipt Date";
      CalcReservEntry."Shipment Date" := NewPurchLine."Expected Receipt Date";
      CalcReservEntry."Planning Flexibility" := NewPurchLine."Planning Flexibility";
      CalcReservEntry.Description := NewPurchLine.Description;

      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      Positive :=
        ((CreateReservEntry.SignFactor(CalcReservEntry) * ForPurchLine."Outstanding Qty. (Base)") < 0);

      SetPointerFilter(CalcReservEntry2);
    END;

    PROCEDURE SetItemJnlLine@3(NewItemJnlLine@1000 : Record 83);
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForItemJnlLine := NewItemJnlLine;

      CalcReservEntry."Source Type" := DATABASE::"Item Journal Line";
      CalcReservEntry."Source Subtype" := ForItemJnlLine."Entry Type";
      CalcReservEntry."Source ID" := NewItemJnlLine."Journal Template Name";
      CalcReservEntry."Source Batch Name" := NewItemJnlLine."Journal Batch Name";
      CalcReservEntry."Source Ref. No." := NewItemJnlLine."Line No.";

      CalcReservEntry."Item No." := NewItemJnlLine."Item No.";
      CalcReservEntry."Variant Code" := NewItemJnlLine."Variant Code";
      CalcReservEntry."Location Code" := NewItemJnlLine."Location Code";
      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewItemJnlLine."Qty. per Unit of Measure";
      CalcReservEntry."Expected Receipt Date" := NewItemJnlLine."Posting Date";
      CalcReservEntry."Shipment Date" := NewItemJnlLine."Posting Date";
      CalcReservEntry.Description := NewItemJnlLine.Description;

      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      Positive :=
        ((CreateReservEntry.SignFactor(CalcReservEntry) * ForItemJnlLine."Quantity (Base)") < 0);

      SetPointerFilter(CalcReservEntry2);
    END;

    PROCEDURE SetProdOrderLine@9(NewProdOrderLine@1000 : Record 5406);
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForProdOrderLine := NewProdOrderLine;

      CalcReservEntry."Source Type" := DATABASE::"Prod. Order Line";
      CalcReservEntry."Source Subtype" := ForProdOrderLine.Status;
      CalcReservEntry."Source ID" := ForProdOrderLine."Prod. Order No.";
      CalcReservEntry."Source Prod. Order Line" := NewProdOrderLine."Line No.";

      CalcReservEntry."Item No." := NewProdOrderLine."Item No.";
      CalcReservEntry."Variant Code" := NewProdOrderLine."Variant Code";
      CalcReservEntry."Location Code" := NewProdOrderLine."Location Code";
      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewProdOrderLine."Qty. per Unit of Measure";
      CalcReservEntry."Expected Receipt Date" := NewProdOrderLine."Due Date";
      CalcReservEntry."Shipment Date" := NewProdOrderLine."Due Date";
      CalcReservEntry."Planning Flexibility" := NewProdOrderLine."Planning Flexibility";
      CalcReservEntry.Description := NewProdOrderLine.Description;

      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      Positive := ForProdOrderLine."Remaining Qty. (Base)" < 0;

      SetPointerFilter(CalcReservEntry2);
    END;

    PROCEDURE SetProdOrderComponent@11(NewProdOrderComp@1000 : Record 5407);
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForProdOrderComp := NewProdOrderComp;

      CalcReservEntry."Source Type" := DATABASE::"Prod. Order Component";
      CalcReservEntry."Source Subtype" := NewProdOrderComp.Status;
      CalcReservEntry."Source ID" := NewProdOrderComp."Prod. Order No.";
      CalcReservEntry."Source Prod. Order Line" := NewProdOrderComp."Prod. Order Line No.";
      CalcReservEntry."Source Ref. No." := NewProdOrderComp."Line No.";

      CalcReservEntry."Item No." := NewProdOrderComp."Item No.";
      CalcReservEntry."Variant Code" := NewProdOrderComp."Variant Code";
      CalcReservEntry."Location Code" := NewProdOrderComp."Location Code";
      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewProdOrderComp."Qty. per Unit of Measure";
      CalcReservEntry."Expected Receipt Date" := NewProdOrderComp."Due Date";
      CalcReservEntry."Shipment Date" := NewProdOrderComp."Due Date";
      CalcReservEntry.Description := NewProdOrderComp.Description;

      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      Positive := ForProdOrderComp."Remaining Qty. (Base)" > 0;

      SetPointerFilter(CalcReservEntry2);
    END;

    PROCEDURE SetPlanningComponent@12(NewPlanningComponent@1000 : Record 99000829);
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForPlanningComponent := NewPlanningComponent;

      CalcReservEntry."Source Type" := DATABASE::"Planning Component";
      CalcReservEntry."Source ID" := NewPlanningComponent."Worksheet Template Name";
      CalcReservEntry."Source Batch Name" := NewPlanningComponent."Worksheet Batch Name";
      CalcReservEntry."Source Prod. Order Line" := NewPlanningComponent."Worksheet Line No.";
      CalcReservEntry."Source Ref. No." := NewPlanningComponent."Line No.";

      CalcReservEntry."Item No." := NewPlanningComponent."Item No.";
      CalcReservEntry."Variant Code" := NewPlanningComponent."Variant Code";
      CalcReservEntry."Location Code" := NewPlanningComponent."Location Code";
      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewPlanningComponent."Qty. per Unit of Measure";
      CalcReservEntry."Expected Receipt Date" := NewPlanningComponent."Due Date";
      CalcReservEntry."Shipment Date" := NewPlanningComponent."Due Date";
      CalcReservEntry.Description := NewPlanningComponent.Description;

      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      Positive := ForPlanningComponent."Net Quantity (Base)" > 0;

      SetPointerFilter(CalcReservEntry2);
    END;

    PROCEDURE SetItemLedgEntry@34(NewItemLedgEntry@1000 : Record 32);
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForItemLedgEntry := NewItemLedgEntry;

      CalcReservEntry."Source Type" := DATABASE::"Item Ledger Entry";
      CalcReservEntry."Source Ref. No." := NewItemLedgEntry."Entry No.";

      CalcReservEntry."Item No." := NewItemLedgEntry."Item No.";
      CalcReservEntry."Variant Code" := NewItemLedgEntry."Variant Code";
      CalcReservEntry."Location Code" := NewItemLedgEntry."Location Code";
      CalcReservEntry."Serial No." := NewItemLedgEntry."Serial No.";
      CalcReservEntry."Lot No." := NewItemLedgEntry."Lot No.";
      CalcReservEntry."Qty. per Unit of Measure" := NewItemLedgEntry."Qty. per Unit of Measure";
      CalcReservEntry.Description := NewItemLedgEntry.Description;
      CalcReservEntry."Serial No." := NewItemLedgEntry."Serial No.";
      CalcReservEntry."Lot No." := NewItemLedgEntry."Lot No.";
      Positive := ForItemLedgEntry."Remaining Quantity" <= 0;

      IF Positive THEN BEGIN
        CalcReservEntry."Expected Receipt Date" := 31129999D;
        CalcReservEntry."Shipment Date" := 31129999D;
      END ELSE BEGIN
        CalcReservEntry."Expected Receipt Date" := 0D;
        CalcReservEntry."Shipment Date" := 0D;
      END;

      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      SetPointerFilter(CalcReservEntry2);
    END;

    PROCEDURE SetTransferLine@47(NewTransLine@1000 : Record 5741;Direction@1001 : 'Outbound,Inbound');
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForTransLine := NewTransLine;

      CalcReservEntry."Source Type" := DATABASE::"Transfer Line";
      CalcReservEntry."Source Subtype" := Direction;
      CalcReservEntry."Source ID" := NewTransLine."Document No.";
      CalcReservEntry."Source Prod. Order Line" := NewTransLine."Derived From Line No.";
      CalcReservEntry."Source Ref. No." := NewTransLine."Line No.";

      CalcReservEntry."Item No." := NewTransLine."Item No.";
      CalcReservEntry."Variant Code" := NewTransLine."Variant Code";
      CASE Direction OF
        Direction::Outbound:
          BEGIN
            CalcReservEntry."Location Code" := NewTransLine."Transfer-from Code";
            CalcReservEntry."Shipment Date" := NewTransLine."Shipment Date";
          END;
        Direction::Inbound:
          BEGIN
            CalcReservEntry."Location Code" := NewTransLine."Transfer-to Code";
            CalcReservEntry."Expected Receipt Date" := NewTransLine."Receipt Date";
          END;

      END;

      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewTransLine."Qty. per Unit of Measure";
      CalcReservEntry.Description := NewTransLine.Description;
      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      Positive :=
        ((CreateReservEntry.SignFactor(CalcReservEntry) * ForTransLine."Outstanding Qty. (Base)") <= 0);
      GetItemSetup(CalcReservEntry);

      SetPointerFilter(CalcReservEntry2);
    END;

    PROCEDURE SetServLine@48(NewServiceInvLine@1000 : Record 5902);
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForServiceInvLine := NewServiceInvLine;

      CalcReservEntry."Source Type" := DATABASE::"Service Line";
      CalcReservEntry."Source Subtype" := ForServiceInvLine."Document Type";
      CalcReservEntry."Source ID" := ForServiceInvLine."Document No.";
      CalcReservEntry."Source Ref. No." := NewServiceInvLine."Line No.";

      IF NewServiceInvLine.Type = NewServiceInvLine.Type::Item THEN
        CalcReservEntry."Item No." := NewServiceInvLine."No.";
      CalcReservEntry."Variant Code" := NewServiceInvLine."Variant Code";
      CalcReservEntry."Location Code" := NewServiceInvLine."Location Code";
      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewServiceInvLine."Qty. per Unit of Measure";
      CalcReservEntry."Expected Receipt Date" := NewServiceInvLine."Posting Date";
      CalcReservEntry."Shipment Date" := NewServiceInvLine."Posting Date";
      CalcReservEntry.Description := NewServiceInvLine.Description;
      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      Positive :=
        ((CreateReservEntry.SignFactor(CalcReservEntry) * ForServiceInvLine."Outstanding Qty. (Base)") <= 0);
      GetItemSetup(CalcReservEntry);

      SetPointerFilter(CalcReservEntry2);

      IF (CalcReservEntry."Location Code" <> '') AND
         Location.GET(CalcReservEntry."Location Code") AND
         (Location."Bin Mandatory" OR Location."Require Pick")
      THEN
        CalcReservedQtyOnPick(TotalAvailQty,QtyAllocInWhse);
    END;

    PROCEDURE SetBOMJnlLine@61(NewBOMJnlLine@1000 : Record 89);
    BEGIN
      CLEARALL;
      TempTrackingSpecification.DELETEALL;

      ForBOMJnlLine := NewBOMJnlLine;

      CalcReservEntry."Source Type" := DATABASE::"BOM Journal Line";
      CalcReservEntry."Source ID" := NewBOMJnlLine."Journal Template Name";
      CalcReservEntry."Source Batch Name" := NewBOMJnlLine."Journal Batch Name";
      CalcReservEntry."Source Ref. No." := NewBOMJnlLine."Line No.";

      CalcReservEntry."Item No." := NewBOMJnlLine."Item No.";
      CalcReservEntry."Variant Code" := NewBOMJnlLine."Variant Code";
      CalcReservEntry."Location Code" := NewBOMJnlLine."Location Code";
      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewBOMJnlLine."Qty. per Unit of Measure";
      CalcReservEntry."Expected Receipt Date" := NewBOMJnlLine."Posting Date";
      CalcReservEntry."Shipment Date" := NewBOMJnlLine."Posting Date";
      CalcReservEntry.Description := NewBOMJnlLine.Description;

      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      Positive :=
      ((CreateReservEntry.SignFactor(CalcReservEntry) * ForBOMJnlLine."Quantity (Base)") < 0);

      SetPointerFilter(CalcReservEntry2);
    END;

    PROCEDURE SetJobJnlLine@20(NewJobJnlLine@1000 : Record 210);
    BEGIN
      CLEARALL;
      ForJobJnlLine := NewJobJnlLine;

      CalcReservEntry."Source Type" := DATABASE::"Job Journal Line";
      CalcReservEntry."Source Subtype" := ForJobJnlLine."Entry Type";
      CalcReservEntry."Source ID" := NewJobJnlLine."Journal Template Name";
      CalcReservEntry."Source Batch Name" := NewJobJnlLine."Journal Batch Name";
      CalcReservEntry."Source Ref. No." := NewJobJnlLine."Line No.";

      CalcReservEntry."Item No." := NewJobJnlLine."No.";
      CalcReservEntry."Variant Code" := NewJobJnlLine."Variant Code";
      CalcReservEntry."Location Code" := NewJobJnlLine."Location Code";
      CalcReservEntry."Serial No." := '';
      CalcReservEntry."Lot No." := '';
      CalcReservEntry."Qty. per Unit of Measure" := NewJobJnlLine."Qty. per Unit of Measure";
      CalcReservEntry."Expected Receipt Date" := NewJobJnlLine."Posting Date";
      CalcReservEntry."Shipment Date" := NewJobJnlLine."Posting Date";
      CalcReservEntry.Description := NewJobJnlLine.Description;

      CalcReservEntry2 := CalcReservEntry;

      GetItemSetup(CalcReservEntry);

      Positive :=
        ((CreateReservEntry.SignFactor(CalcReservEntry) * ForJobJnlLine."Quantity (Base)") < 0);

      SetPointerFilter(CalcReservEntry2);
    END;

    PROCEDURE SalesLineUpdateValues@54(VAR CurrentSalesLine@1000 : Record 37;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal);
    BEGIN
      WITH CurrentSalesLine DO BEGIN
        CALCFIELDS("Reserved Qty. (Base)");
        IF "Document Type" = "Document Type"::"Return Order" THEN
          "Reserved Qty. (Base)" := -"Reserved Qty. (Base)";
        QtyReservedThisLine := "Reserved Qty. (Base)";
        QtyToReserve := "Outstanding Qty. (Base)" - "Reserved Qty. (Base)";
      END;
    END;

    PROCEDURE ReqLineUpdateValues@56(VAR CurrentReqLine@1000 : Record 246;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal);
    BEGIN
      WITH CurrentReqLine DO BEGIN
        CALCFIELDS("Reserved Qty. (Base)");
        QtyReservedThisLine := "Reserved Qty. (Base)";
        QtyToReserve := "Quantity (Base)" - "Reserved Qty. (Base)";
      END;
    END;

    PROCEDURE PurchLineUpdateValues@44(VAR CurrentPurchLine@1000 : Record 39;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal);
    BEGIN
      WITH CurrentPurchLine DO BEGIN
        CALCFIELDS("Reserved Qty. (Base)");
        IF "Document Type" = "Document Type"::"Return Order" THEN
          "Reserved Qty. (Base)" := -"Reserved Qty. (Base)";
        QtyReservedThisLine := "Reserved Qty. (Base)";
        QtyToReserve := "Outstanding Qty. (Base)" - "Reserved Qty. (Base)";
      END;
    END;

    PROCEDURE ItemJnlLineUpdateValues@53(VAR CurrentItemJnlLine@1000 : Record 83;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal);
    BEGIN
      WITH CurrentItemJnlLine DO BEGIN
        CALCFIELDS("Reserved Qty. (Base)");
        QtyReservedThisLine := "Reserved Qty. (Base)";
        QtyToReserve := "Quantity (Base)" - "Reserved Qty. (Base)";
      END;
    END;

    PROCEDURE ProdOrderLineUpdateValues@15(VAR CurrentProdOrderLine@1000 : Record 5406;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal);
    BEGIN
      WITH CurrentProdOrderLine DO BEGIN
        CALCFIELDS("Reserved Qty. (Base)");
        QtyReservedThisLine := "Reserved Qty. (Base)";
        QtyToReserve := "Remaining Qty. (Base)" - "Reserved Qty. (Base)";
      END;
    END;

    PROCEDURE ProdOrderCompUpdateValues@16(VAR CurrentProdOrderComp@1000 : Record 5407;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal);
    BEGIN
      WITH CurrentProdOrderComp DO BEGIN
        CALCFIELDS("Reserved Qty. (Base)");
        QtyReservedThisLine := "Reserved Qty. (Base)";
        QtyToReserve := "Remaining Qty. (Base)" - "Reserved Qty. (Base)";
      END;
    END;

    PROCEDURE PlanningComponentUpdateValues@19(VAR CurrentPlanningComponent@1000 : Record 99000829;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal);
    BEGIN
      WITH CurrentPlanningComponent DO BEGIN
        CALCFIELDS("Reserved Qty. (Base)");
        QtyReservedThisLine := "Reserved Qty. (Base)";
        QtyToReserve := "Net Quantity (Base)" - "Reserved Qty. (Base)";
      END;
    END;

    PROCEDURE ItemLedgEntryUpdateValues@55(VAR CurrentItemLedgEntry@1000 : Record 32;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal);
    BEGIN
      WITH CurrentItemLedgEntry DO BEGIN
        CALCFIELDS("Reserved Quantity");
        QtyReservedThisLine := "Reserved Quantity";
        QtyToReserve := "Remaining Quantity" - "Reserved Quantity";
      END;
    END;

    PROCEDURE ServiceInvLineUpdateValues@50(VAR CurrentServiceInvLine@1000 : Record 5902;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal);
    BEGIN
      WITH CurrentServiceInvLine DO BEGIN
        CALCFIELDS("Reserved Qty. (Base)");
        QtyReservedThisLine := "Reserved Qty. (Base)";
        QtyToReserve := "Outstanding Qty. (Base)" - "Reserved Qty. (Base)";
      END;
    END;

    PROCEDURE TransferLineUpdateValues@49(VAR CurrentTransLine@1000 : Record 5741;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal;Direction@1003 : 'Outbound,Inbound');
    BEGIN
      WITH CurrentTransLine DO BEGIN
        CASE Direction OF
          Direction::Outbound:
            BEGIN
              CALCFIELDS("Reserved Qty. Outbnd. (Base)");
              QtyReservedThisLine := "Reserved Qty. Outbnd. (Base)";
              QtyToReserve := -"Outstanding Qty. (Base)" + "Reserved Qty. Outbnd. (Base)";
            END;
          Direction::Inbound:
            BEGIN
              CALCFIELDS("Reserved Qty. Inbnd. (Base)");
              QtyReservedThisLine := "Reserved Qty. Inbnd. (Base)";
              QtyToReserve := "Outstanding Qty. (Base)" - "Reserved Qty. Inbnd. (Base)";
            END;
        END;
      END;
    END;

    PROCEDURE UpdateStatistics@7(VAR ReservSummEntry@1000 : Record 338;AvailabilityDate@1001 : Date;HandleItemTracking2@1006 : Boolean);
    VAR
      ReservEntry@1005 : Record 337;
      LateBindingMgt@1010 : Codeunit 6502;
      ReservForm@1008 : Form 498;
      i@1002 : Integer;
      CurrentEntryNo@1003 : Integer;
      ValueArrayNo@1007 : Integer;
      CalcSumValue@1004 : Decimal;
      CurrReservedQty@1009 : Decimal;
    BEGIN
      CurrentEntryNo := ReservSummEntry."Entry No.";
      CalcReservEntry.TESTFIELD("Source Type");
      ReservSummEntry.DELETEALL;
      HandleItemTracking := HandleItemTracking2;
      IF HandleItemTracking2 THEN
        ValueArrayNo := 3;
      FOR i := 1 TO SetValueArray(ValueArrayNo) DO BEGIN
        CalcSumValue := 0;
        ReservSummEntry.INIT;
        ReservSummEntry."Entry No." := ValueArray[i];

        CASE ValueArray[i] OF
          1: // Item Ledger Entry
            IF CalcItemLedgEntry.READPERMISSION
            THEN BEGIN
              InitFilter(ValueArray[i],AvailabilityDate);
              IF CalcItemLedgEntry.FINDSET THEN
                REPEAT
                  CalcItemLedgEntry.CALCFIELDS("Reserved Quantity");
                  ReservSummEntry."Total Reserved Quantity" += CalcItemLedgEntry."Reserved Quantity";
                  CalcSumValue += CalcItemLedgEntry."Remaining Quantity";
                UNTIL CalcItemLedgEntry.NEXT = 0;
              IF HandleItemTracking2 THEN
                IF ReservSummEntry."Total Reserved Quantity" > 0 THEN BEGIN
                  ReservSummEntry."Non-specific Reserved Qty." := LateBindingMgt.NonspecificReservedQty(CalcItemLedgEntry);
                END;

              IF CalcSumValue <> 0 THEN
                IF (CalcSumValue > 0) = Positive THEN BEGIN
                  IF Location.GET(CalcItemLedgEntry."Location Code") AND
                     (Location."Bin Mandatory" OR Location."Require Pick")
                  THEN BEGIN
                    CalcReservedQtyOnPick(TotalAvailQty,QtyAllocInWhse);
                    QtyOnOutBound :=
                      CreatePick.CheckOutBound(
                        CalcReservEntry."Source Type",CalcReservEntry."Source Subtype",
                        CalcReservEntry."Source ID",CalcReservEntry."Source Ref. No.",
                        CalcReservEntry."Source Prod. Order Line");
                  END ELSE BEGIN
                    QtyAllocInWhse := 0;
                    QtyOnOutBound := 0;
                  END;
                  IF QtyAllocInWhse < 0 THEN
                    QtyAllocInWhse := 0;
                  ReservSummEntry."Table ID" := DATABASE::"Item Ledger Entry";
                  ReservSummEntry."Summary Type" :=
                    COPYSTR(CalcItemLedgEntry.TABLECAPTION,1,MAXSTRLEN(ReservSummEntry."Summary Type"));
                  ReservSummEntry."Total Quantity" := CalcSumValue;
                  ReservSummEntry."Total Available Quantity" :=
                    ReservSummEntry."Total Quantity" - ReservSummEntry."Total Reserved Quantity";

                  CLEAR(ReservForm);
                  ReservForm.SetReservEntry(CalcReservEntry);
                  CurrReservedQty := ReservForm.ReservedThisLine(ReservSummEntry);
                  IF (CurrReservedQty <> 0) AND (QtyOnOutBound <> 0) THEN
                    IF QtyOnOutBound > CurrReservedQty THEN
                      QtyOnOutBound := QtyOnOutBound - CurrReservedQty
                    ELSE
                      QtyOnOutBound := 0;

                  IF (Location."Bin Mandatory" OR Location."Require Pick") THEN BEGIN
                    IF TotalAvailQty + QtyOnOutBound < ReservSummEntry."Total Available Quantity" THEN
                      ReservSummEntry."Total Available Quantity" := TotalAvailQty + QtyOnOutBound;
                    ReservSummEntry."Qty. Alloc. in Warehouse" := QtyAllocInWhse;
                  END ELSE
                    ReservSummEntry."Qty. Alloc. in Warehouse" := 0;
                  IF NOT ReservSummEntry.INSERT THEN
                    ReservSummEntry.MODIFY;
                END;
            END;
          12,16: // Purchase Order, Purchase Return Order
            IF CalcPurchLine.READPERMISSION
            THEN BEGIN
              InitFilter(ValueArray[i],AvailabilityDate);
              IF CalcPurchLine.FINDSET THEN
                REPEAT
                  CalcPurchLine.CALCFIELDS("Reserved Qty. (Base)");
                  ReservSummEntry."Total Reserved Quantity" += CalcPurchLine."Reserved Qty. (Base)";
                  CalcSumValue += CalcPurchLine."Outstanding Qty. (Base)";
                UNTIL CalcPurchLine.NEXT = 0;

              IF CalcSumValue <> 0 THEN
                IF (Positive = (CalcSumValue > 0)) AND (ValueArray[i] <> 16) OR
                  (Positive = (CalcSumValue < 0)) AND (ValueArray[i] = 16)
                THEN BEGIN
                  ReservSummEntry."Table ID" := DATABASE::"Purchase Line";
                  ReservSummEntry."Summary Type" :=
                    COPYSTR(
                      STRSUBSTNO('%1, %2',CalcPurchLine.TABLECAPTION,CalcPurchLine."Document Type"),
                      1,MAXSTRLEN(ReservSummEntry."Summary Type"));
                  IF ValueArray[i] = 16 THEN
                    ReservSummEntry."Total Quantity" := -CalcSumValue
                  ELSE
                    ReservSummEntry."Total Quantity" := CalcSumValue;
                  ReservSummEntry."Total Available Quantity" :=
                    ReservSummEntry."Total Quantity" - ReservSummEntry."Total Reserved Quantity";
                  IF NOT ReservSummEntry.INSERT THEN
                    ReservSummEntry.MODIFY;
                END;
            END;
          32,36: // Sales Order, Sales Return Order
            IF CalcSalesLine.READPERMISSION
            THEN BEGIN
              InitFilter(ValueArray[i],AvailabilityDate);
              IF CalcSalesLine.FINDSET THEN
                REPEAT
                  CalcSalesLine.CALCFIELDS("Reserved Qty. (Base)");
                  ReservSummEntry."Total Reserved Quantity" -= CalcSalesLine."Reserved Qty. (Base)";
                  CalcSumValue += CalcSalesLine."Outstanding Qty. (Base)";
                UNTIL CalcSalesLine.NEXT = 0;

              IF CalcSumValue <> 0 THEN
                IF (Positive = (CalcSumValue < 0)) AND (ValueArray[i] <> 36) OR
                  (Positive = (CalcSumValue > 0)) AND (ValueArray[i] = 36)
                THEN BEGIN
                  ReservSummEntry."Table ID" := DATABASE::"Sales Line";
                  ReservSummEntry."Summary Type" :=
                    COPYSTR(
                      STRSUBSTNO('%1, %2',CalcSalesLine.TABLECAPTION,CalcSalesLine."Document Type"),
                      1,MAXSTRLEN(ReservSummEntry."Summary Type"));
                  IF ValueArray[i] = 36 THEN
                    ReservSummEntry."Total Quantity" := CalcSumValue
                  ELSE
                    ReservSummEntry."Total Quantity" := -CalcSumValue;
                  ReservSummEntry."Total Available Quantity" :=
                    ReservSummEntry."Total Quantity" - ReservSummEntry."Total Reserved Quantity";
                  IF NOT ReservSummEntry.INSERT THEN
                    ReservSummEntry.MODIFY;
                END;
            END;
          63: // Firm Planned Prod. Order Line
            IF CalcProdOrderLine.READPERMISSION THEN BEGIN
              InitFilter(ValueArray[i],AvailabilityDate);
              IF CalcProdOrderLine.FINDSET THEN
                REPEAT
                  CalcProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
                  ReservSummEntry."Total Reserved Quantity" += CalcProdOrderLine."Reserved Qty. (Base)";
                  CalcSumValue += CalcProdOrderLine."Remaining Qty. (Base)";
                UNTIL CalcProdOrderLine.NEXT = 0;

              IF CalcSumValue <> 0 THEN
                IF (CalcSumValue > 0) = Positive THEN BEGIN
                  ReservSummEntry."Table ID" := DATABASE::"Prod. Order Line";
                  ReservSummEntry."Summary Type" :=
                    COPYSTR(
                      STRSUBSTNO(Text000,CalcProdOrderLine.TABLECAPTION),
                      1,MAXSTRLEN(ReservSummEntry."Summary Type"));
                  ReservSummEntry."Total Quantity" := CalcSumValue;
                  ReservSummEntry."Total Available Quantity" :=
                    ReservSummEntry."Total Quantity" - ReservSummEntry."Total Reserved Quantity";
                  IF NOT ReservSummEntry.INSERT THEN
                    ReservSummEntry.MODIFY;
                END;
            END;
          64: // Released Prod. Order Line
            IF CalcProdOrderLine.READPERMISSION THEN BEGIN
              InitFilter(ValueArray[i],AvailabilityDate);
              IF CalcProdOrderLine.FINDSET THEN
                REPEAT
                  CalcProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
                  ReservSummEntry."Total Reserved Quantity" += CalcProdOrderLine."Reserved Qty. (Base)";
                  CalcSumValue += CalcProdOrderLine."Remaining Qty. (Base)";
                UNTIL CalcProdOrderLine.NEXT = 0;

              IF CalcSumValue <> 0 THEN
                IF (CalcSumValue > 0) = Positive THEN BEGIN
                  ReservSummEntry."Table ID" := DATABASE::"Prod. Order Line";
                  ReservSummEntry."Summary Type" :=
                    COPYSTR(
                      STRSUBSTNO(Text001,CalcProdOrderLine.TABLECAPTION),
                      1,MAXSTRLEN(ReservSummEntry."Summary Type"));
                  ReservSummEntry."Total Quantity" := CalcSumValue;
                  ReservSummEntry."Total Available Quantity" :=
                    ReservSummEntry."Total Quantity" - ReservSummEntry."Total Reserved Quantity";
                  IF NOT ReservSummEntry.INSERT THEN
                    ReservSummEntry.MODIFY;
                END;
            END;
          73: // Firm Planned Component Line
            IF CalcProdOrderComp.READPERMISSION THEN BEGIN
              InitFilter(ValueArray[i],AvailabilityDate);
              IF CalcProdOrderComp.FINDSET THEN
                REPEAT
                  CalcProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
                  ReservSummEntry."Total Reserved Quantity" -= CalcProdOrderComp."Reserved Qty. (Base)";
                  CalcSumValue += CalcProdOrderComp."Remaining Qty. (Base)";
                UNTIL CalcProdOrderComp.NEXT = 0;

              IF CalcSumValue <> 0 THEN
                IF (CalcSumValue < 0) = Positive THEN BEGIN
                  ReservSummEntry."Table ID" := DATABASE::"Prod. Order Component";
                  ReservSummEntry."Summary Type" :=
                    COPYSTR(
                      STRSUBSTNO(Text000,CalcProdOrderComp.TABLECAPTION),
                      1,MAXSTRLEN(ReservSummEntry."Summary Type"));
                  ReservSummEntry."Total Quantity" := -CalcSumValue;
                  ReservSummEntry."Total Available Quantity" :=
                    ReservSummEntry."Total Quantity" - ReservSummEntry."Total Reserved Quantity";
                  IF NOT ReservSummEntry.INSERT THEN
                    ReservSummEntry.MODIFY;
                END;
            END;
          74: // Released Component Line
              IF CalcProdOrderComp.READPERMISSION THEN BEGIN
                InitFilter(ValueArray[i],AvailabilityDate);
                IF CalcProdOrderComp.FINDSET THEN
                  REPEAT
                    CalcProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
                    ReservSummEntry."Total Reserved Quantity" -= CalcProdOrderComp."Reserved Qty. (Base)";
                    CalcSumValue += CalcProdOrderComp."Remaining Qty. (Base)";
                  UNTIL CalcProdOrderComp.NEXT = 0;

                IF CalcSumValue <> 0 THEN
                  IF (CalcSumValue < 0) = Positive THEN BEGIN
                    ReservSummEntry."Table ID" := DATABASE::"Prod. Order Component";
                    ReservSummEntry."Summary Type" :=
                      COPYSTR(
                        STRSUBSTNO(Text001,CalcProdOrderComp.TABLECAPTION),
                        1,MAXSTRLEN(ReservSummEntry."Summary Type"));
                    ReservSummEntry."Total Quantity" := -CalcSumValue;
                    ReservSummEntry."Total Available Quantity" :=
                      ReservSummEntry."Total Quantity" - ReservSummEntry."Total Reserved Quantity";
                    IF NOT ReservSummEntry.INSERT THEN
                      ReservSummEntry.MODIFY;
                  END;
              END;
          101,102: // Transfer Line
              IF CalcTransLine.READPERMISSION THEN BEGIN
                InitFilter(ValueArray[i],AvailabilityDate);
                IF CalcTransLine.FINDSET THEN
                  REPEAT
                    CASE ValueArray[i] OF
                      101 : BEGIN
                        CalcTransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)");
                        ReservSummEntry."Total Reserved Quantity" -= CalcTransLine."Reserved Qty. Outbnd. (Base)";
                        CalcSumValue -= CalcTransLine."Outstanding Qty. (Base)";
                      END;
                      102 : BEGIN
                        CalcTransLine.CALCFIELDS("Reserved Qty. Inbnd. (Base)");
                        ReservSummEntry."Total Reserved Quantity" += CalcTransLine."Reserved Qty. Inbnd. (Base)";
                        CalcSumValue += CalcTransLine."Outstanding Qty. (Base)";
                      END;
                    END;
                  UNTIL CalcTransLine.NEXT = 0;

                IF CalcSumValue <> 0 THEN
                  IF (CalcSumValue > 0) = Positive THEN BEGIN
                    ReservSummEntry."Table ID" := DATABASE::"Transfer Line";
                    ReservSummEntry."Summary Type" :=
                      COPYSTR(
                        STRSUBSTNO('%1, %2',CalcTransLine.TABLECAPTION,SELECTSTR(ValueArray[i] - 100,Text006)),
                        1,MAXSTRLEN(ReservSummEntry."Summary Type"));
                    ReservSummEntry."Total Quantity" := CalcSumValue;
                    ReservSummEntry."Total Available Quantity" :=
                      ReservSummEntry."Total Quantity" - ReservSummEntry."Total Reserved Quantity";
                    IF NOT ReservSummEntry.INSERT THEN
                      ReservSummEntry.MODIFY;
                  END;
              END;
          110: // Service Line
            IF CalcServiceInvLine.READPERMISSION
            THEN BEGIN
              InitFilter(ValueArray[i],AvailabilityDate);
              IF CalcServiceInvLine.FINDSET THEN
                REPEAT
                  CalcServiceInvLine.CALCFIELDS("Reserved Qty. (Base)");
                  ReservSummEntry."Total Reserved Quantity" -= CalcServiceInvLine."Reserved Qty. (Base)";
                  CalcSumValue += CalcServiceInvLine."Outstanding Qty. (Base)";
                UNTIL CalcServiceInvLine.NEXT = 0;

              IF CalcSumValue <> 0 THEN
                IF (CalcSumValue < 0) = Positive THEN BEGIN
                  ReservSummEntry."Table ID" := 5902;
                  ReservSummEntry."Summary Type" :=
                    COPYSTR(
                      STRSUBSTNO('%1',CalcServiceInvLine.TABLECAPTION),
                      1,MAXSTRLEN(ReservSummEntry."Summary Type"));
                  ReservSummEntry."Total Quantity" := -CalcSumValue;
                  ReservSummEntry."Total Available Quantity" :=
                    ReservSummEntry."Total Quantity" - ReservSummEntry."Total Reserved Quantity";
                  IF NOT ReservSummEntry.INSERT THEN
                    ReservSummEntry.MODIFY;
                END;
            END;

          6500: // Item Tracking
            BEGIN
              ReservEntry.RESET;
              ReservEntry.SETCURRENTKEY(
                "Item No.","Source Type","Source Subtype","Reservation Status","Location Code",
                "Variant Code","Shipment Date","Expected Receipt Date","Serial No.","Lot No.");
              ReservEntry.SETRANGE("Item No.",CalcReservEntry."Item No.");
              ReservEntry.SETFILTER("Source Type",'<> %1',DATABASE::"Item Ledger Entry");
              ReservEntry.SETRANGE("Reservation Status",
                ReservEntry."Reservation Status"::Reservation,ReservEntry."Reservation Status"::Surplus);
              ReservEntry.SETRANGE("Location Code",CalcReservEntry."Location Code");
              ReservEntry.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
              IF Positive THEN
                ReservEntry.SETFILTER("Expected Receipt Date",'..%1',AvailabilityDate)
              ELSE
                ReservEntry.SETFILTER("Shipment Date",'>=%1',AvailabilityDate);
              ReservEntry.SETRANGE("Serial No.",CalcReservEntry."Serial No.");
              ReservEntry.SETRANGE("Lot No.",CalcReservEntry."Lot No.");
              ReservEntry.SETRANGE(Positive,Positive);
              IF ReservEntry.FINDSET THEN
                REPEAT
                  ReservEntry.SETRANGE("Source Type",ReservEntry."Source Type");
                  ReservEntry.SETRANGE("Source Subtype",ReservEntry."Source Subtype");
                  ReservSummEntry.INIT;
                  ReservSummEntry."Entry No." := ReservEntry.SummEntryNo;
                  ReservSummEntry."Table ID" := ReservEntry."Source Type";
                  ReservSummEntry."Summary Type" :=
                    COPYSTR(ReservEntry.TextCaption,1,MAXSTRLEN(ReservSummEntry."Summary Type"));
                  ReservSummEntry."Source Subtype" := ReservEntry."Source Subtype";
                  ReservSummEntry."Serial No." := ReservEntry."Serial No.";
                  ReservSummEntry."Lot No." := ReservEntry."Lot No.";
                  IF ReservEntry.FINDSET THEN
                    REPEAT
                      ReservSummEntry."Total Quantity" += ReservEntry."Quantity (Base)";
                      IF ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Reservation THEN
                        ReservSummEntry."Total Reserved Quantity" += ReservEntry."Quantity (Base)";
                      IF CreateReservEntry.HasSamePointer(ReservEntry,CalcReservEntry) THEN
                        ReservSummEntry."Current Reserved Quantity" += ReservEntry."Quantity (Base)";
                    UNTIL ReservEntry.NEXT = 0;
                  ReservSummEntry."Total Available Quantity" :=
                    ReservSummEntry."Total Quantity" - ReservSummEntry."Total Reserved Quantity";
                  ReservSummEntry.INSERT;
                  ReservEntry.SETRANGE("Source Type");
                  ReservEntry.SETRANGE("Source Subtype");
                UNTIL ReservEntry.NEXT = 0;
            END;

        END;
      END;
      IF NOT ReservSummEntry.GET(CurrentEntryNo) THEN;
    END;

    PROCEDURE AutoReserve@5(VAR FullAutoReservation@1000 : Boolean;Description@1001 : Text[50];AvailabilityDate@1002 : Date;MaxQtyToReserve@1006 : Decimal);
    VAR
      RemainingQtyToReserve@1003 : Decimal;
      i@1004 : Integer;
      StopReservation@1005 : Boolean;
    BEGIN
      CalcReservEntry.TESTFIELD("Source Type");

      IF CalcReservEntry."Source Type" IN[DATABASE::"Sales Line",DATABASE::"Purchase Line",DATABASE::"Service Line"] THEN
        StopReservation := NOT (CalcReservEntry."Source Subtype" IN [1,5]); // Only order and return order

      IF CalcReservEntry."Source Type" IN[DATABASE::"Prod. Order Line",DATABASE::"Prod. Order Component"]
      THEN
        StopReservation :=  CalcReservEntry."Source Subtype" < 2; // Not simulated or planned

      IF (CalcReservEntry."Source Type" = DATABASE::"Sales Line") THEN
        IF ((CalcReservEntry."Source Subtype" = 1) AND (ForSalesLine.Quantity < 0)) THEN
          StopReservation := TRUE;

      IF (CalcReservEntry."Source Type" = DATABASE::"Sales Line") THEN
        IF ((CalcReservEntry."Source Subtype" = 5) AND (ForSalesLine.Quantity >= 0)) THEN
          StopReservation := TRUE;

      IF StopReservation THEN BEGIN
        FullAutoReservation := TRUE;
        EXIT;
      END;

      RemainingQtyToReserve := CalculateRemainingQty;
      IF (MaxQtyToReserve <> 0) AND (ABS(MaxQtyToReserve) < ABS(RemainingQtyToReserve)) THEN
        RemainingQtyToReserve := MaxQtyToReserve;

      IF (RemainingQtyToReserve <> 0) AND
         HandleItemTracking AND
         ItemTrackingCode."SN Specific Tracking"
      THEN
        RemainingQtyToReserve := 1;
      FullAutoReservation := FALSE;

      IF RemainingQtyToReserve = 0 THEN BEGIN
        FullAutoReservation := TRUE;
        EXIT;
      END;

      FOR i := 1 TO SetValueArray(0) DO
        AutoReserveOneLine(ValueArray[i],RemainingQtyToReserve,Description,AvailabilityDate);

      FullAutoReservation := (RemainingQtyToReserve = 0);
    END;

    PROCEDURE AutoReserveOneLine@4(ReservSummEntryNo@1000 : Integer;VAR RemainingQtyToReserve@1001 : Decimal;Description@1002 : Text[50];AvailabilityDate@1003 : Date);
    VAR
      Item@1004 : Record 27;
      LateBindingMgt@1011 : Codeunit 6502;
      QtyThisLine@1005 : Decimal;
      ReservQty@1006 : Decimal;
      Search@1007 : Text[1];
      NextStep@1008 : Integer;
      LocationCode@1009 : Code[10];
      EntryDate@1010 : Date;
      AllocationsChanged@1012 : Boolean;
    BEGIN
      CalcReservEntry.TESTFIELD("Source Type");

      IF RemainingQtyToReserve = 0 THEN
        EXIT;

      IF NOT Item.GET(CalcReservEntry."Item No.") THEN
        CLEAR(Item);
      IF NOT Location.GET(CalcReservEntry."Location Code") THEN
        CLEAR(Location);

      CalcReservEntry.Lock;

      IF Positive THEN BEGIN
        Search := '+';
        NextStep := -1;
        IF Item."Costing Method" = Item."Costing Method"::LIFO THEN BEGIN
          InvSearch := '+';
          InvNextStep := -1;
        END ELSE BEGIN
          InvSearch := '-';
          InvNextStep := 1;
        END;
      END ELSE BEGIN
        Search := '-';
        NextStep := 1;
        InvSearch := '-';
        InvNextStep := 1;
      END;

      CASE ReservSummEntryNo OF
        1:
          BEGIN // Item Ledger Entry
            InitFilter(ReservSummEntryNo,AvailabilityDate);
            // Late Binding
            IF HandleItemTracking THEN
              AllocationsChanged :=
                LateBindingMgt.ReleaseForReservation3(CalcItemLedgEntry,CalcReservEntry,RemainingQtyToReserve);

            IF CalcItemLedgEntry.FIND(InvSearch) THEN BEGIN
              IF (Location."Bin Mandatory" OR Location."Require Pick") THEN BEGIN
                QtyOnOutBound :=
                  CreatePick.CheckOutBound(
                    CalcReservEntry."Source Type",CalcReservEntry."Source Subtype",
                    CalcReservEntry."Source ID",CalcReservEntry."Source Ref. No.",
                    CalcReservEntry."Source Prod. Order Line");
                IF AllocationsChanged THEN
                  CalcReservedQtyOnPick(TotalAvailQty,QtyAllocInWhse); // If allocations have changed we must recalculate
              END;
              REPEAT
                CalcItemLedgEntry.CALCFIELDS("Reserved Quantity");
                IF (CalcItemLedgEntry."Remaining Quantity" -
                    CalcItemLedgEntry."Reserved Quantity") <> 0
                THEN BEGIN
                  IF ABS(CalcItemLedgEntry."Remaining Quantity" -
                      CalcItemLedgEntry."Reserved Quantity") > ABS(RemainingQtyToReserve)
                  THEN
                    QtyThisLine := ABS(RemainingQtyToReserve)
                  ELSE
                    QtyThisLine :=
                      CalcItemLedgEntry."Remaining Quantity" - CalcItemLedgEntry."Reserved Quantity";
                  IF Positive = (QtyThisLine < 0) THEN
                    QtyThisLine := 0;
                  IF (Location."Bin Mandatory" OR Location."Require Pick") AND
                     (TotalAvailQty + QtyOnOutBound < QtyThisLine)
                  THEN
                    QtyThisLine := TotalAvailQty + QtyOnOutBound;
                  IF QtyThisLine <> 0 THEN BEGIN
                    CopySign(RemainingQtyToReserve,QtyThisLine);
                    CreateReservation(
                      Description,0D,QtyThisLine,
                      DATABASE::"Item Ledger Entry",0,'','',0,
                      CalcItemLedgEntry."Entry No.",CalcItemLedgEntry."Variant Code",
                      CalcItemLedgEntry."Location Code",
                      CalcItemLedgEntry."Serial No.",CalcItemLedgEntry."Lot No.",
                      CalcItemLedgEntry."Qty. per Unit of Measure");
                    RemainingQtyToReserve := RemainingQtyToReserve - QtyThisLine;
                    IF (Location."Bin Mandatory" OR Location."Require Pick") THEN
                      TotalAvailQty := TotalAvailQty - QtyThisLine;
                  END;
                END;
              UNTIL (CalcItemLedgEntry.NEXT(InvNextStep) = 0) OR (RemainingQtyToReserve = 0);
            END;
          END;
        12,16:
          BEGIN // Purchase Line, Purchase Return Line
            InitFilter(ReservSummEntryNo,AvailabilityDate);
            IF CalcPurchLine.FIND(Search) THEN
              REPEAT
                CalcPurchLine.CALCFIELDS("Reserved Qty. (Base)");
                QtyThisLine := CalcPurchLine."Outstanding Qty. (Base)";
                IF ReservSummEntryNo = 16 THEN // Return Order
                  ReservQty := -CalcPurchLine."Reserved Qty. (Base)"
                ELSE
                  ReservQty := CalcPurchLine."Reserved Qty. (Base)";
                IF (Positive = (QtyThisLine < 0)) AND (ReservSummEntryNo <> 16) OR
                  (Positive = (QtyThisLine > 0)) AND (ReservSummEntryNo = 16)
                THEN
                  QtyThisLine := 0;
                IF QtyThisLine <> 0 THEN BEGIN
                  IF ABS(QtyThisLine - ReservQty) > 0 THEN BEGIN
                    IF ABS(QtyThisLine - ReservQty) > ABS(RemainingQtyToReserve) THEN
                      QtyThisLine := RemainingQtyToReserve
                    ELSE
                      QtyThisLine := QtyThisLine - ReservQty;
                    CopySign(RemainingQtyToReserve,QtyThisLine);
                    CreateReservation(
                      Description,CalcPurchLine."Expected Receipt Date",QtyThisLine,
                      DATABASE::"Purchase Line",
                      CalcPurchLine."Document Type",CalcPurchLine."Document No.",'',0,
                      CalcPurchLine."Line No.",CalcPurchLine."Variant Code",
                      CalcPurchLine."Location Code",
                      CalcReservEntry."Serial No.",CalcReservEntry."Lot No.",
                      CalcPurchLine."Qty. per Unit of Measure");
                    RemainingQtyToReserve := RemainingQtyToReserve - QtyThisLine;
                  END;
                END;
              UNTIL (CalcPurchLine.NEXT(NextStep) = 0) OR (RemainingQtyToReserve = 0);
          END;
        21:
          BEGIN // Requisition Line
            InitFilter(ReservSummEntryNo,AvailabilityDate);
          END;
        31,32,36:
          BEGIN // Sales Line, Sales Return Line
            InitFilter(ReservSummEntryNo,AvailabilityDate);
            IF CalcSalesLine.FIND(Search) THEN
              REPEAT
                CalcSalesLine.CALCFIELDS("Reserved Qty. (Base)");
                QtyThisLine := CalcSalesLine."Outstanding Qty. (Base)";
                IF ReservSummEntryNo = 36 THEN // Return Order
                  ReservQty := -CalcSalesLine."Reserved Qty. (Base)"
                ELSE
                  ReservQty := CalcSalesLine."Reserved Qty. (Base)";
                IF (Positive = (QtyThisLine > 0)) AND (ReservSummEntryNo <> 36) OR
                  (Positive = (QtyThisLine < 0)) AND (ReservSummEntryNo = 36)
                THEN
                  QtyThisLine := 0;
                IF QtyThisLine <> 0 THEN BEGIN
                  IF ABS(QtyThisLine - ReservQty) > ABS(RemainingQtyToReserve) THEN
                    QtyThisLine := RemainingQtyToReserve
                  ELSE
                    QtyThisLine := QtyThisLine - ReservQty;
                  CopySign(RemainingQtyToReserve,QtyThisLine);
                  CreateReservation(
                    Description,CalcSalesLine."Shipment Date",QtyThisLine,
                    DATABASE::"Sales Line",
                    CalcSalesLine."Document Type",CalcSalesLine."Document No.",'',0,
                    CalcSalesLine."Line No.",CalcSalesLine."Variant Code",
                    CalcSalesLine."Location Code",
                    CalcReservEntry."Serial No.",CalcReservEntry."Lot No.",
                    CalcSalesLine."Qty. per Unit of Measure");
                  RemainingQtyToReserve := RemainingQtyToReserve - QtyThisLine;
                END;
              UNTIL (CalcSalesLine.NEXT(NextStep) = 0) OR (RemainingQtyToReserve = 0);
          END;
        61,62,63,64:
          BEGIN // Prod. Order
            InitFilter(ReservSummEntryNo,AvailabilityDate);
            IF CalcProdOrderLine.FIND(Search) THEN
              REPEAT
                CalcProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
                QtyThisLine := CalcProdOrderLine."Remaining Qty. (Base)";
                IF Positive = (QtyThisLine < 0) THEN
                  QtyThisLine := 0;
                IF QtyThisLine <> 0 THEN BEGIN
                  IF (QtyThisLine - CalcProdOrderLine."Reserved Qty. (Base)") <> 0 THEN BEGIN
                    IF ABS(QtyThisLine - CalcProdOrderLine."Reserved Qty. (Base)") > ABS(RemainingQtyToReserve) THEN
                      QtyThisLine := RemainingQtyToReserve
                    ELSE
                      QtyThisLine := QtyThisLine - CalcProdOrderLine."Reserved Qty. (Base)";
                    CopySign(RemainingQtyToReserve,QtyThisLine);
                    CreateReservation(
                      Description,CalcProdOrderLine."Due Date",QtyThisLine,
                      DATABASE::"Prod. Order Line",
                      CalcProdOrderLine.Status,
                      CalcProdOrderLine."Prod. Order No.",'',
                      CalcProdOrderLine."Line No.",0,CalcProdOrderLine."Variant Code",
                      CalcProdOrderLine."Location Code",
                      CalcReservEntry."Serial No.",CalcReservEntry."Lot No.",
                      CalcProdOrderLine."Qty. per Unit of Measure");
                    RemainingQtyToReserve := RemainingQtyToReserve - QtyThisLine;
                  END;
                END;
              UNTIL (CalcProdOrderLine.NEXT(NextStep) = 0) OR (RemainingQtyToReserve = 0);
            END;
        71,72,73,74:
          BEGIN // Prod. Order Component
            InitFilter(ReservSummEntryNo,AvailabilityDate);
            IF CalcProdOrderComp.FIND(Search) THEN
              REPEAT
                CalcProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
                QtyThisLine := CalcProdOrderComp."Remaining Qty. (Base)";
                ReservQty := CalcProdOrderComp."Reserved Qty. (Base)";
                IF Positive = (QtyThisLine > 0) THEN
                  QtyThisLine := 0;
                IF QtyThisLine <> 0 THEN BEGIN
                  IF ABS(QtyThisLine - ReservQty) > 0 THEN BEGIN
                    IF ABS(QtyThisLine - ReservQty) > ABS(RemainingQtyToReserve) THEN
                      QtyThisLine := RemainingQtyToReserve
                    ELSE
                      QtyThisLine := QtyThisLine - ReservQty;
                    CopySign(RemainingQtyToReserve,QtyThisLine);
                    CreateReservation(
                      Description,CalcProdOrderComp."Due Date",QtyThisLine,
                      DATABASE::"Prod. Order Component",
                      CalcProdOrderComp.Status,
                      CalcProdOrderComp."Prod. Order No.",'',
                      CalcProdOrderComp."Prod. Order Line No.",
                      CalcProdOrderComp."Line No.",CalcProdOrderComp."Variant Code",
                      CalcProdOrderComp."Location Code",
                      CalcReservEntry."Serial No.",CalcReservEntry."Lot No.",
                      CalcProdOrderComp."Qty. per Unit of Measure");
                    RemainingQtyToReserve := RemainingQtyToReserve - QtyThisLine;
                  END;
                END;
              UNTIL (CalcProdOrderComp.NEXT(NextStep) = 0) OR (RemainingQtyToReserve = 0);
          END;
        91:
          BEGIN // Planning Component
            InitFilter(ReservSummEntryNo,AvailabilityDate);
          END;
        101,102:
          BEGIN // Transfer
            InitFilter(ReservSummEntryNo,AvailabilityDate);
            IF CalcTransLine.FIND(Search) THEN
              REPEAT
                CASE ReservSummEntryNo OF
                  101: // Outbound
                    BEGIN
                      CalcTransLine.CALCFIELDS(CalcTransLine."Reserved Qty. Outbnd. (Base)");
                      QtyThisLine := -CalcTransLine."Outstanding Qty. (Base)";
                      ReservQty := -CalcTransLine."Reserved Qty. Outbnd. (Base)";
                      EntryDate := CalcTransLine."Shipment Date";
                      LocationCode := CalcTransLine."Transfer-from Code";
                      IF Positive = (QtyThisLine < 0) THEN
                        QtyThisLine := 0;
                    END;
                  102: // Inbound
                    BEGIN
                      CalcTransLine.CALCFIELDS(CalcTransLine."Reserved Qty. Inbnd. (Base)");
                      QtyThisLine := CalcTransLine."Outstanding Qty. (Base)";
                      ReservQty := CalcTransLine."Reserved Qty. Inbnd. (Base)";
                      EntryDate := CalcTransLine."Receipt Date";
                      LocationCode := CalcTransLine."Transfer-to Code";
                      IF Positive = (QtyThisLine < 0) THEN
                        QtyThisLine := 0;
                    END;
                END;
                IF QtyThisLine <> 0 THEN BEGIN
                  IF ABS(QtyThisLine - ReservQty) > 0 THEN BEGIN
                    IF ABS(QtyThisLine - ReservQty) > ABS(RemainingQtyToReserve) THEN
                      QtyThisLine := RemainingQtyToReserve
                    ELSE
                      QtyThisLine := QtyThisLine - ReservQty;
                    CopySign(RemainingQtyToReserve,QtyThisLine);
                    CreateReservation(
                      Description,EntryDate,QtyThisLine,
                      DATABASE::"Transfer Line",
                      ReservSummEntryNo - 101,
                      CalcTransLine."Document No.",'',
                      CalcTransLine."Derived From Line No.",
                      CalcTransLine."Line No.",CalcTransLine."Variant Code",
                      LocationCode,
                      CalcReservEntry."Serial No.",CalcReservEntry."Lot No.",
                      CalcTransLine."Qty. per Unit of Measure");
                    RemainingQtyToReserve := RemainingQtyToReserve - QtyThisLine;
                  END;
                END;
              UNTIL (CalcTransLine.NEXT(NextStep) = 0) OR (RemainingQtyToReserve = 0);
          END;
        110:
          BEGIN // Service Invoice Line
            InitFilter(ReservSummEntryNo,AvailabilityDate);
            IF CalcServiceInvLine.FIND(Search) THEN
              REPEAT
                CalcServiceInvLine.CALCFIELDS("Reserved Qty. (Base)");
                QtyThisLine := CalcServiceInvLine."Outstanding Qty. (Base)";
                ReservQty := CalcServiceInvLine."Reserved Qty. (Base)";
                IF Positive = (QtyThisLine > 0) THEN
                  QtyThisLine := 0;
                IF QtyThisLine <> 0 THEN BEGIN
                  IF ABS(QtyThisLine - ReservQty) > ABS(RemainingQtyToReserve) THEN
                    QtyThisLine := RemainingQtyToReserve
                  ELSE
                    QtyThisLine := QtyThisLine - ReservQty;
                  CopySign(RemainingQtyToReserve,QtyThisLine);
                  CreateReservation(
                    Description,
                    CalcServiceInvLine."Posting Date",
                    QtyThisLine,
                    DATABASE::"Service Line",
                    CalcServiceInvLine."Document Type",
                    CalcServiceInvLine."Document No.",
                    '',
                    0,
                    CalcServiceInvLine."Line No.",
                    CalcServiceInvLine."Variant Code",
                    CalcServiceInvLine."Location Code",
                    CalcReservEntry."Serial No.",CalcReservEntry."Lot No.",
                    CalcServiceInvLine."Qty. per Unit of Measure");
                  RemainingQtyToReserve := RemainingQtyToReserve - QtyThisLine;
                END;
              UNTIL (CalcServiceInvLine.NEXT(NextStep) = 0) OR (RemainingQtyToReserve = 0);
          END;
      END;
    END;

    PROCEDURE CreateReservation@39(Description@1000 : Text[50];ExpectedDate@1001 : Date;Quantity@1002 : Decimal;FromType@1003 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal';FromSubtype@1004 : Integer;FromID@1005 : Code[20];FromBatchName@1006 : Code[10];FromProdOrderLine@1007 : Integer;FromRefNo@1008 : Integer;FromVariantCode@1009 : Code[10];FromLocationCode@1010 : Code[10];FromSerialNo@1012 : Code[20];FromLotNo@1013 : Code[20];FromQtyPerUOM@1015 : Decimal);
    BEGIN
      CalcReservEntry.TESTFIELD("Source Type");

      CASE CalcReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            ReserveSalesLine.CreateReservationSetFrom(
              FromType,FromSubtype,FromID,FromBatchName,FromProdOrderLine,FromRefNo,
              FromVariantCode,FromLocationCode,FromSerialNo,FromLotNo,FromQtyPerUOM);
            ReserveSalesLine.CreateReservation(
              ForSalesLine,Description,ExpectedDate,Quantity,
              CalcReservEntry."Serial No.",
              CalcReservEntry."Lot No.");
            ForSalesLine.CALCFIELDS("Reserved Qty. (Base)");
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReserveReqLine.CreateReservationSetFrom(
              FromType,FromSubtype,FromID,FromBatchName,FromProdOrderLine,FromRefNo,
              FromVariantCode,FromLocationCode,FromSerialNo,FromLotNo,FromQtyPerUOM);
            ReserveReqLine.CreateReservation(
              ForReqLine,Description,ExpectedDate,Quantity,
              CalcReservEntry."Serial No.",
              CalcReservEntry."Lot No.");
            ForReqLine.CALCFIELDS("Reserved Qty. (Base)");
          END;
        DATABASE::"Purchase Line":
          BEGIN
            ReservePurchLine.CreateReservationSetFrom(
              FromType,FromSubtype,FromID,FromBatchName,FromProdOrderLine,FromRefNo,
              FromVariantCode,FromLocationCode,FromSerialNo,FromLotNo,FromQtyPerUOM);
            ReservePurchLine.CreateReservation(
              ForPurchLine,Description,ExpectedDate,Quantity,
              CalcReservEntry."Serial No.",
              CalcReservEntry."Lot No.");
            ForPurchLine.CALCFIELDS("Reserved Qty. (Base)");
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            ReserveItemJnlLine.CreateReservationSetFrom(
              FromType,FromSubtype,FromID,FromBatchName,FromProdOrderLine,FromRefNo,
              FromVariantCode,FromLocationCode,FromSerialNo,FromLotNo,FromQtyPerUOM);
            ReserveItemJnlLine.CreateReservation(
              ForItemJnlLine,Description,ExpectedDate,Quantity,
              CalcReservEntry."Serial No.",
              CalcReservEntry."Lot No.");
            ForItemJnlLine.CALCFIELDS("Reserved Qty. (Base)");
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ReserveProdOrderLine.CreateReservationSetFrom(
              FromType,FromSubtype,FromID,FromBatchName,FromProdOrderLine,FromRefNo,
              FromVariantCode,FromLocationCode,FromSerialNo,FromLotNo,FromQtyPerUOM);
            ReserveProdOrderLine.CreateReservation(
              ForProdOrderLine,Description,ExpectedDate,Quantity,
              CalcReservEntry."Serial No.",
              CalcReservEntry."Lot No.");
            ForProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ReserveProdOrderComp.CreateReservationSetFrom(
              FromType,FromSubtype,FromID,FromBatchName,FromProdOrderLine,FromRefNo,
              FromVariantCode,FromLocationCode,FromSerialNo,FromLotNo,
              FromQtyPerUOM);
            ReserveProdOrderComp.CreateReservation(
              ForProdOrderComp,Description,ExpectedDate,Quantity,
              CalcReservEntry."Serial No.",
              CalcReservEntry."Lot No.");
            ForProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
          END;
        DATABASE::"Planning Component":
          BEGIN
            ReservePlanningComponent.CreateReservationSetFrom(
              FromType,FromSubtype,FromID,FromBatchName,FromProdOrderLine,FromRefNo,
              FromVariantCode,FromLocationCode,FromSerialNo,FromLotNo,
              FromQtyPerUOM);
            ReservePlanningComponent.CreateReservation(
              ForPlanningComponent,Description,ExpectedDate,Quantity,
              CalcReservEntry."Serial No.",
              CalcReservEntry."Lot No.");
            ForPlanningComponent.CALCFIELDS("Reserved Qty. (Base)");
          END;
        DATABASE::"Transfer Line":
          BEGIN
            ReserveTransLine.CreateReservationSetFrom(
              FromType,FromSubtype,FromID,FromBatchName,FromProdOrderLine,FromRefNo,
              FromVariantCode,FromLocationCode,FromSerialNo,FromLotNo,
              FromQtyPerUOM);
            ReserveTransLine.CreateReservation(
              ForTransLine,Description,ExpectedDate,Quantity,
              CalcReservEntry."Serial No.",
              CalcReservEntry."Lot No.",
              CalcReservEntry."Source Subtype");
            ForTransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)");
            ForTransLine.CALCFIELDS("Reserved Qty. Inbnd. (Base)");
          END;
        DATABASE::"Service Line":
          BEGIN
            ReserveServiceInvLine.CreateReservationSetFrom(
              FromType,FromSubtype,FromID,FromBatchName,FromProdOrderLine,FromRefNo,
              FromVariantCode,FromLocationCode,FromSerialNo,FromLotNo,
              FromQtyPerUOM);
            ReserveServiceInvLine.CreateReservation(
              ForServiceInvLine,Description,ExpectedDate,Quantity,
              CalcReservEntry."Serial No.",
              CalcReservEntry."Lot No.");
            ForServiceInvLine.CALCFIELDS("Reserved Qty. (Base)");
          END;
      END;
    END;

    PROCEDURE DeleteReservEntries@30(DeleteAll@1000 : Boolean;DownToQuantity@1001 : Decimal);
    VAR
      TrackingMgt@1002 : Codeunit 99000778;
      ReservMgt@1003 : Codeunit 99000845;
      CalcReservEntry4@1004 : Record 337;
      QtyToReTrack@1005 : Decimal;
      QtyTracked@1006 : Decimal;
    BEGIN
      DeleteReservEntries2(DeleteAll,DownToQuantity,CalcReservEntry2);

      // Handle both sides of a req. line related to a transfer line:
      IF ((CalcReservEntry."Source Type" = DATABASE::"Requisition Line") AND
        (ForReqLine."Ref. Order Type" = ForReqLine."Ref. Order Type"::Transfer))
      THEN BEGIN
        CalcReservEntry4 := CalcReservEntry;
        CalcReservEntry4."Source Subtype" := 1;
        SetPointerFilter(CalcReservEntry4);
        DeleteReservEntries2(DeleteAll,DownToQuantity,CalcReservEntry4);
      END;

      IF DeleteAll THEN
        IF ((CalcReservEntry."Source Type" = DATABASE::"Requisition Line") AND
            (ForReqLine."Planning Line Origin" <> ForReqLine."Planning Line Origin"::" ")) OR
           (CalcReservEntry."Source Type" = DATABASE::"Planning Component")
        THEN BEGIN
          CalcReservEntry4.RESET;
          IF TrackingMgt.DerivePlanningFilter(CalcReservEntry2,CalcReservEntry4) THEN
            IF CalcReservEntry4.FINDFIRST THEN BEGIN
              QtyToReTrack := ReservMgt.SourceQuantity(CalcReservEntry4,TRUE);
              CalcReservEntry4.SETRANGE("Reservation Status",CalcReservEntry4."Reservation Status"::Reservation);
              IF CalcReservEntry4.FINDSET THEN
                REPEAT
                  QtyTracked += CalcReservEntry4."Quantity (Base)";
                UNTIL CalcReservEntry4.NEXT = 0;

              CalcReservEntry4.SETFILTER("Reservation Status",'<>%1',CalcReservEntry4."Reservation Status"::Reservation);
              CalcReservEntry4.SETFILTER("Item Tracking",'<>%1',CalcReservEntry4."Item Tracking"::None);
              IF CalcReservEntry4.FINDSET THEN
                REPEAT
                  QtyTracked += CalcReservEntry4."Quantity (Base)";
                UNTIL CalcReservEntry4.NEXT = 0;

              IF CalcReservEntry."Source Type" = DATABASE::"Planning Component" THEN
                QtyTracked := - QtyTracked;
              ReservMgt.DeleteReservEntries(QtyTracked=0,QtyTracked);
              ReservMgt.AutoTrack(QtyToReTrack);
            END;
        END;
    END;

    PROCEDURE DeleteReservEntries2@31(DeleteAll@1000 : Boolean;DownToQuantity@1001 : Decimal;VAR ReservEntry@1002 : Record 337);
    VAR
      CalcReservEntry4@1003 : Record 337;
      SurplusEntry@1004 : Record 337;
      DummyEntry@1005 : Record 337;
      Status@1006 : 'Reservation,Tracking,Surplus,Prospect';
      QtyToRelease@1007 : Decimal;
      QtyTracked@1008 : Decimal;
      QtyToReleaseForLotSN@1017 : Decimal;
      CurrentQty@1016 : Decimal;
      CurrentSerialNo@1014 : Code[20];
      CurrentLotNo@1015 : Code[20];
      AvailabilityDate@1009 : Date;
      Release@1010 : 'Non-Inventory,Inventory';
      RunThroughActionMsg@1011 : Boolean;
      HandleItemTracking2@1013 : Boolean;
      SignFactor@1012 : Integer;
      QuantityIsValidated@1066 : Boolean;
    BEGIN
      ReservEntry.SETRANGE("Reservation Status");
      IF ReservEntry.ISEMPTY THEN
        EXIT;
      CurrentSerialNo := ReservEntry."Serial No.";
      CurrentLotNo := ReservEntry."Lot No.";
      CurrentQty := ReservEntry."Quantity (Base)";

      GetItemSetup(ReservEntry);
      ReservEntry.TESTFIELD("Source Type");
      ReservEntry.Lock;
      SignFactor := CreateReservEntry.SignFactor(ReservEntry);
      QtyTracked := QuantityTracked(ReservEntry);
      CurrentBinding := ReservEntry.Binding;
      CurrentBindingIsSet := TRUE;

      // Item Tracking:
      IF ItemTrackingCode."SN Specific Tracking" OR ItemTrackingCode."Lot Specific Tracking" THEN BEGIN
        HandleItemTracking2 := TRUE;
        CASE ItemTrackingHandling OF
          ItemTrackingHandling::None:
            BEGIN
              ReservEntry.SETRANGE("Serial No.",'');
              ReservEntry.SETRANGE("Lot No.",'');
            END;
          ItemTrackingHandling::Match:
            BEGIN
              IF NOT ((CurrentSerialNo = '') AND (CurrentLotNo = '')) THEN BEGIN
                QtyToReleaseForLotSN := QuantityTracked2(ReservEntry);
                IF ABS(QtyToReleaseForLotSN) > ABS(CurrentQty) THEN
                  QtyToReleaseForLotSN := CurrentQty;
                DownToQuantity := (QtyTracked - QtyToReleaseForLotSN) * SignFactor;
                ReservEntry.SETRANGE("Serial No.",CurrentSerialNo);
                ReservEntry.SETRANGE("Lot No.",CurrentLotNo);
              END;
            END;
        END;
      END;

      IF SignFactor * QtyTracked * DownToQuantity < 0 THEN
        DeleteAll := TRUE
      ELSE
        IF ABS(QtyTracked) < ABS(DownToQuantity) THEN
          EXIT;

      QtyToRelease := QtyTracked - (DownToQuantity * SignFactor);

      FOR Status := Status::Prospect DOWNTO Status::Reservation DO BEGIN
        ReservEntry.SETRANGE("Reservation Status",Status);
        IF ReservEntry.FINDSET AND (QtyToRelease <> 0) THEN
          CASE Status OF
            Status::Prospect:
              BEGIN
                REPEAT
                  IF (ABS(ReservEntry."Quantity (Base)") <= ABS(QtyToRelease)) OR DeleteAll THEN BEGIN
                    ReservEntry.DELETE;
                    SaveTrackingSpecification(ReservEntry,ReservEntry."Quantity (Base)");
                    QtyToRelease := QtyToRelease - ReservEntry."Quantity (Base)";
                  END ELSE BEGIN
                    ReservEntry.VALIDATE("Quantity (Base)",ReservEntry."Quantity (Base)" - QtyToRelease);
                    ReservEntry.MODIFY;
                    SaveTrackingSpecification(ReservEntry,QtyToRelease);
                    QtyToRelease := 0;
                  END;
                UNTIL (ReservEntry.NEXT = 0) OR ((NOT DeleteAll) AND (QtyToRelease = 0));
              END;

            Status::Surplus:
              BEGIN
                REPEAT
                  IF CalcReservEntry4.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive) THEN // Find related entry
                    ERROR(Text007);
                  IF (ABS(ReservEntry."Quantity (Base)") <= ABS(QtyToRelease)) OR DeleteAll THEN BEGIN
                    ReservEngineMgt.CloseReservEntry(ReservEntry,FALSE,DeleteAll);
                    SaveTrackingSpecification(ReservEntry,ReservEntry."Quantity (Base)");
                    QtyToRelease := QtyToRelease - ReservEntry."Quantity (Base)";
                    IF NOT DeleteAll AND
                      ((CalcReservEntry4."Lot No." <> '') OR (CalcReservEntry4."Serial No." <> '')) THEN BEGIN
                      CalcReservEntry4."Reservation Status" := CalcReservEntry4."Reservation Status"::Surplus;
                      CalcReservEntry4.INSERT;
                    END;
                    ModifyActionMessage(ReservEntry."Entry No.",0,TRUE); // Delete action messages
                  END ELSE BEGIN
                    ReservEntry.VALIDATE("Quantity (Base)",ReservEntry."Quantity (Base)" - QtyToRelease);
                    ReservEntry.MODIFY;
                    SaveTrackingSpecification(ReservEntry,QtyToRelease);
                    ModifyActionMessage(ReservEntry."Entry No.",QtyToRelease,FALSE); // Modify action messages
                    QtyToRelease := 0;
                  END;
                UNTIL (ReservEntry.NEXT = 0) OR ((NOT DeleteAll) AND (QtyToRelease = 0));
              END;

            Status::Tracking,Status::Reservation:
              BEGIN
                FOR Release := Release::"Non-Inventory" TO Release::Inventory DO BEGIN
      // Release non-inventory reservations in first cycle
                  REPEAT
                    CalcReservEntry4.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive); // Find related entry
                    IF (Release = Release::Inventory) = (CalcReservEntry4."Source Type" = DATABASE::"Item Ledger Entry") THEN BEGIN
                      IF (ABS(ReservEntry."Quantity (Base)") <= ABS(QtyToRelease)) OR DeleteAll THEN BEGIN
                        ReservEngineMgt.CloseReservEntry(ReservEntry,FALSE,DeleteAll);
                        SaveTrackingSpecification(ReservEntry,ReservEntry."Quantity (Base)");
                        QtyToRelease := QtyToRelease - ReservEntry."Quantity (Base)";
                      END ELSE BEGIN
                        ReservEntry.VALIDATE("Quantity (Base)",ReservEntry."Quantity (Base)" - QtyToRelease);
                        ReservEntry.MODIFY;
                        SaveTrackingSpecification(ReservEntry,QtyToRelease);

                        IF Item."Order Tracking Policy" <> Item."Order Tracking Policy"::None THEN BEGIN
                          IF CalcReservEntry4."Quantity (Base)" > 0 THEN
                            AvailabilityDate := CalcReservEntry4."Shipment Date"
                          ELSE
                            AvailabilityDate := CalcReservEntry4."Expected Receipt Date";

                          QtyToRelease := -MatchSurplus(CalcReservEntry4,SurplusEntry,-QtyToRelease,
                            CalcReservEntry4."Quantity (Base)" < 0,AvailabilityDate,Item."Order Tracking Policy");

                          // Make residual surplus record:
                          IF QtyToRelease <> 0 THEN BEGIN
                            MakeConnection(CalcReservEntry4,CalcReservEntry4,-QtyToRelease,2,
                              AvailabilityDate,CalcReservEntry4.Binding);
                            IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN BEGIN
                              CreateReservEntry.GetLastEntry(SurplusEntry); // Get the surplus-entry just inserted
                              IssueActionMessage(SurplusEntry,FALSE,DummyEntry);
                            END;
                          END;
                        END ELSE
                          IF ItemTrackingHandling = ItemTrackingHandling::None THEN
                            QuantityIsValidated := SaveItemTrackingAsSurplus(CalcReservEntry4,-ReservEntry."Quantity (Base)");

                        IF NOT QuantityIsValidated THEN
                          CalcReservEntry4.VALIDATE("Quantity (Base)",-ReservEntry."Quantity (Base)");

                        CalcReservEntry4.MODIFY;
                        QtyToRelease := 0;
                        QuantityIsValidated := FALSE;
                      END;
                    END;
                  UNTIL (ReservEntry.NEXT = 0) OR ((NOT DeleteAll) AND (QtyToRelease = 0));
                  IF NOT ReservEntry.FINDFIRST THEN // Rewind for second cycle
                    Release := Release::Inventory;
                END;
              END;
          END;
      END;

      IF HandleItemTracking2 THEN
        IF QtyToRelease <> 0 THEN BEGIN
          IF ItemTrackingHandling = ItemTrackingHandling::None THEN
            IF DeleteAll THEN
              ERROR(Text010,ReservEntry."Item No.",ReservEntry.TextCaption)
            ELSE
              ERROR(Text008,ReservEntry."Item No.",ReservEntry.TextCaption);
          IF ItemTrackingHandling = ItemTrackingHandling::Match THEN
            ERROR(Text009,CurrentSerialNo,CurrentLotNo,ABS(QtyToRelease));
        END;
      IF RunThroughActionMsg THEN
        REPEAT
          IF ActionMessageEntry.DELETE THEN;
            IF SurplusEntry.GET(ActionMessageEntry."Reservation Entry",FALSE) THEN
              IssueActionMessage(SurplusEntry,FALSE,DummyEntry);
        UNTIL ActionMessageEntry.NEXT = 0;
    END;

    PROCEDURE CalculateRemainingQty@52() : Decimal;
    BEGIN
      CalcReservEntry.TESTFIELD("Source Type");

      CASE CalcReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            ForSalesLine.CALCFIELDS("Reserved Qty. (Base)");
            EXIT(ForSalesLine."Outstanding Qty. (Base)" - ABS(ForSalesLine."Reserved Qty. (Base)"));
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ForReqLine.CALCFIELDS("Reserved Qty. (Base)");
            EXIT(ForReqLine."Net Quantity (Base)" - ABS(ForReqLine."Reserved Qty. (Base)"));
           END;
        DATABASE::"Purchase Line":
          BEGIN
            ForPurchLine.CALCFIELDS("Reserved Qty. (Base)");
            EXIT(ForPurchLine."Outstanding Qty. (Base)" - ABS(ForPurchLine."Reserved Qty. (Base)"));
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            ForItemJnlLine.CALCFIELDS("Reserved Qty. (Base)");
            EXIT(ForItemJnlLine.Quantity - ABS(ForItemJnlLine."Reserved Qty. (Base)"));
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ForProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
            EXIT(ForProdOrderLine."Remaining Qty. (Base)" - ABS(ForProdOrderLine."Reserved Qty. (Base)"));
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ForProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
            EXIT(ForProdOrderComp."Remaining Qty. (Base)" - ABS(ForProdOrderComp."Reserved Qty. (Base)"));
          END;
        DATABASE::"Planning Component":
          BEGIN
            ForPlanningComponent.CALCFIELDS("Reserved Qty. (Base)");
            EXIT(ForPlanningComponent."Net Quantity (Base)" - ABS(ForPlanningComponent."Reserved Qty. (Base)"));
          END;
        DATABASE::"Transfer Line":
          BEGIN
            CASE CalcReservEntry."Source Subtype" OF
              0: // Outbound
                BEGIN
                  ForTransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)");
                  EXIT(ForTransLine."Outstanding Qty. (Base)" - ABS(ForTransLine."Reserved Qty. Outbnd. (Base)"));
                END;
              1: // Inbound
                BEGIN
                  ForTransLine.CALCFIELDS("Reserved Qty. Inbnd. (Base)");
                  EXIT(ForTransLine."Outstanding Qty. (Base)" - ABS(ForTransLine."Reserved Qty. Inbnd. (Base)"));
                END;
            END;
          END;
        DATABASE::"Service Line":
          BEGIN
            ForServiceInvLine.CALCFIELDS("Reserved Qty. (Base)");
            EXIT(ForServiceInvLine."Outstanding Qty. (Base)" - ABS(ForServiceInvLine."Reserved Qty. (Base)"));
          END;
        ELSE
          ERROR(Text003);
      END;
    END;

    PROCEDURE FieldFilterNeeded@6(VAR ReservEntry@1000 : Record 337;Field@1001 : 'Lot No.,Serial No.') : Boolean;
    BEGIN
      EXIT(FieldFilterNeeded2(ReservEntry,Positive,Field));
    END;

    PROCEDURE FieldFilterNeeded2@42(VAR ReservEntry@1000 : Record 337;SearchForSupply@1001 : Boolean;Field@1002 : 'Lot No.,Serial No.') : Boolean;
    VAR
      ReservEntry2@1003 : Record 337;
      FieldValue@1004 : Code[20];
    BEGIN
      FieldFilter := '';

      FieldValue := '';
      GetItemSetup(ReservEntry);
      CASE Field OF
        0: BEGIN
             IF NOT ItemTrackingCode."Lot Specific Tracking" THEN
               EXIT(FALSE);
             FieldValue := ReservEntry."Lot No.";
           END;
        1: BEGIN
             IF NOT ItemTrackingCode."SN Specific Tracking" THEN
               EXIT(FALSE);
             FieldValue := ReservEntry."Serial No.";
           END;
      ELSE
        ERROR(Text004);
      END;

      // The field "Lot No." is used a foundation for building up the filter:

      IF FieldValue <> '' THEN BEGIN
        IF SearchForSupply THEN // Demand
          ReservEntry2.SETRANGE("Lot No.",FieldValue)
        ELSE // Supply
          ReservEntry2.SETFILTER("Lot No.",'%1|%2',FieldValue,'');
        FieldFilter := ReservEntry2.GETFILTER("Lot No.");
      END ELSE //FieldValue = ''
        IF SearchForSupply THEN // Demand
          EXIT(FALSE)
        ELSE
          FieldFilter := STRSUBSTNO('''%1''','');

      EXIT(TRUE);
    END;

    PROCEDURE GetFieldFilter@8() : Text[80];
    BEGIN
      EXIT(FieldFilter);
    END;

    PROCEDURE GetAvailabilityFilter@24(AvailabilityDate@1000 : Date) : Text[80];
    BEGIN
      EXIT(GetAvailabilityFilter2(AvailabilityDate,Positive));
    END;

    PROCEDURE GetAvailabilityFilter2@41(AvailabilityDate@1000 : Date;SearchForSupply@1001 : Boolean) : Text[80];
    VAR
      ReservEntry2@1002 : Record 337;
    BEGIN
      IF SearchForSupply THEN
        ReservEntry2.SETFILTER("Expected Receipt Date",'..%1',AvailabilityDate)
      ELSE
        ReservEntry2.SETFILTER("Expected Receipt Date",'>=%1',AvailabilityDate);

      EXIT(ReservEntry2.GETFILTER("Expected Receipt Date"));
    END;

    PROCEDURE CopySign@14(FromValue@1000 : Decimal;VAR ToValue@1001 : Decimal);
    BEGIN
      IF FromValue * ToValue < 0 THEN
        ToValue := -ToValue;
    END;

    LOCAL PROCEDURE InitFilter@23(EntryID@1000 : Integer;AvailabilityDate@1001 : Date);
    BEGIN
      CASE EntryID OF
        1:
          BEGIN // Item Ledger Entry
            CalcItemLedgEntry.RESET;
            CalcItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code");
            CalcItemLedgEntry.SETRANGE("Item No.",CalcReservEntry."Item No.");
            CalcItemLedgEntry.SETRANGE(Open,TRUE);
            CalcItemLedgEntry.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
            CalcItemLedgEntry.SETRANGE(Positive,Positive);
            CalcItemLedgEntry.SETRANGE("Location Code",CalcReservEntry."Location Code");
            CalcItemLedgEntry.SETRANGE("Drop Shipment",FALSE);
            IF FieldFilterNeeded2(CalcReservEntry,Positive,0) THEN
              CalcItemLedgEntry.SETFILTER("Lot No.",GetFieldFilter);
            IF FieldFilterNeeded2(CalcReservEntry,Positive,1) THEN
              CalcItemLedgEntry.SETFILTER("Serial No.",GetFieldFilter);
          END;
        12,16:
          BEGIN // Purchase Line
            CalcPurchLine.RESET;
            CalcPurchLine.SETCURRENTKEY(
              "Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Expected Receipt Date");
            CalcPurchLine.SETRANGE("Document Type",EntryID - 11);
            CalcPurchLine.SETRANGE(Type,CalcPurchLine.Type::Item);
            CalcPurchLine.SETRANGE("No.",CalcReservEntry."Item No.");
            CalcPurchLine.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
            CalcPurchLine.SETRANGE("Drop Shipment",FALSE);
            CalcPurchLine.SETRANGE("Location Code",CalcReservEntry."Location Code");
            CalcPurchLine.SETFILTER("Expected Receipt Date",GetAvailabilityFilter(AvailabilityDate));
            IF Positive AND (EntryID <> 16) THEN
              CalcPurchLine.SETFILTER("Quantity (Base)",'>0')
            ELSE
              CalcPurchLine.SETFILTER("Quantity (Base)",'<0');
            CalcPurchLine.SETRANGE("Job No.",' ');
          END;
        21:
          BEGIN // Requisition Line
            CalcReqLine.RESET;
            CalcReqLine.SETCURRENTKEY(
              Type,"No.","Variant Code","Location Code","Sales Order No.","Planning Line Origin","Due Date");
            CalcReqLine.SETRANGE(Type,CalcReqLine.Type::Item);
            CalcReqLine.SETRANGE("No.",CalcReservEntry."Item No.");
            CalcReqLine.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
            CalcReqLine.SETRANGE("Location Code",CalcReservEntry."Location Code");
            CalcReqLine.SETRANGE("Sales Order No.",'');
            CalcReqLine.SETFILTER("Due Date",GetAvailabilityFilter(AvailabilityDate));
            IF Positive THEN
              CalcReqLine.SETFILTER("Quantity (Base)",'>0')
            ELSE
              CalcReqLine.SETFILTER("Quantity (Base)",'<0');
          END;
        31,32,36:
          BEGIN // Sales Line
            CalcSalesLine.RESET;
            CalcSalesLine.SETCURRENTKEY(
              "Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Shipment Date");
            CalcSalesLine.SETRANGE("Document Type",EntryID - 31);
            CalcSalesLine.SETRANGE(Type,CalcSalesLine.Type::Item);
            CalcSalesLine.SETRANGE("No.",CalcReservEntry."Item No.");
            CalcSalesLine.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
            CalcSalesLine.SETRANGE("Drop Shipment",FALSE);
            CalcSalesLine.SETRANGE("Location Code",CalcReservEntry."Location Code");
            CalcSalesLine.SETFILTER("Shipment Date",GetAvailabilityFilter(AvailabilityDate));
            IF EntryID = 36 THEN
              IF Positive THEN
                CalcSalesLine.SETFILTER("Quantity (Base)",'>0')
              ELSE
                CalcSalesLine.SETFILTER("Quantity (Base)",'<0')
            ELSE
              IF Positive THEN
                CalcSalesLine.SETFILTER("Quantity (Base)",'<0')
              ELSE
                CalcSalesLine.SETFILTER("Quantity (Base)",'>0');
            CalcSalesLine.SETRANGE("Job No.",' ');
          END;
        61,62,63,64:
          BEGIN // Prod. Order
            CalcProdOrderLine.RESET;
            CalcProdOrderLine.SETCURRENTKEY(Status,"Item No.","Variant Code","Location Code","Due Date");
            CalcProdOrderLine.SETRANGE(Status,EntryID - 61);
            CalcProdOrderLine.SETRANGE("Item No.",CalcReservEntry."Item No.");
            CalcProdOrderLine.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
            CalcProdOrderLine.SETRANGE("Location Code",CalcReservEntry."Location Code");
            CalcProdOrderLine.SETFILTER("Due Date",GetAvailabilityFilter(AvailabilityDate));
            IF Positive THEN
              CalcProdOrderLine.SETFILTER("Remaining Qty. (Base)",'>0')
            ELSE
              CalcProdOrderLine.SETFILTER("Remaining Qty. (Base)",'<0');
            END;
        71,72,73,74:
          BEGIN // Prod. Order Component
            CalcProdOrderComp.RESET;
            CalcProdOrderComp.SETCURRENTKEY(Status,"Item No.","Variant Code","Location Code","Due Date");
            CalcProdOrderComp.SETRANGE(Status,EntryID - 71);
            CalcProdOrderComp.SETRANGE("Item No.",CalcReservEntry."Item No.");
            CalcProdOrderComp.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
            CalcProdOrderComp.SETRANGE("Location Code",CalcReservEntry."Location Code");
            CalcProdOrderComp.SETFILTER("Due Date",GetAvailabilityFilter(AvailabilityDate));
            IF Positive THEN
              CalcProdOrderComp.SETFILTER("Remaining Qty. (Base)",'<0')
            ELSE
              CalcProdOrderComp.SETFILTER("Remaining Qty. (Base)",'>0');
          END;
        91:
          BEGIN // Planning Component
            CalcPlanningComponent.RESET;
            CalcPlanningComponent.SETCURRENTKEY("Item No.","Variant Code","Location Code","Due Date");
            CalcPlanningComponent.SETRANGE("Item No.",CalcReservEntry."Item No.");
            CalcPlanningComponent.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
            CalcPlanningComponent.SETRANGE("Location Code",CalcReservEntry."Location Code");
            CalcPlanningComponent.SETFILTER("Due Date",GetAvailabilityFilter(AvailabilityDate));
            IF Positive THEN
              CalcPlanningComponent.SETFILTER("Net Quantity (Base)",'<0')
            ELSE
              CalcPlanningComponent.SETFILTER("Net Quantity (Base)",'>0');
          END;
        101:
          BEGIN // Transfer, Outbound
            CalcTransLine.RESET;
            CalcTransLine.SETCURRENTKEY("Transfer-from Code");
            CalcTransLine.SETRANGE("Item No.",CalcReservEntry."Item No.");
            CalcTransLine.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
            CalcTransLine.SETRANGE("Transfer-from Code",CalcReservEntry."Location Code");
            CalcTransLine.SETFILTER("Shipment Date",GetAvailabilityFilter(AvailabilityDate));
            IF Positive THEN
              CalcTransLine.SETFILTER("Outstanding Qty. (Base)",'<0')
            ELSE
              CalcTransLine.SETFILTER("Outstanding Qty. (Base)",'>0');
          END;
        102:
          BEGIN // Transfer, Inbound
            CalcTransLine.RESET;
            CalcTransLine.SETCURRENTKEY("Transfer-to Code");
            CalcTransLine.SETRANGE("Item No.",CalcReservEntry."Item No.");
            CalcTransLine.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
            CalcTransLine.SETRANGE("Transfer-to Code",CalcReservEntry."Location Code");
            CalcTransLine.SETFILTER("Receipt Date",GetAvailabilityFilter(AvailabilityDate));
            IF Positive THEN
              CalcTransLine.SETFILTER("Outstanding Qty. (Base)",'>0')
            ELSE
              CalcTransLine.SETFILTER("Outstanding Qty. (Base)",'<0');
          END;
        110:
          BEGIN // Service Invoice Line
            CalcServiceInvLine.RESET;
            CalcServiceInvLine.SETCURRENTKEY(
              Type,"No.","Variant Code","Location Code","Posting Date");
            CalcServiceInvLine.SETRANGE(Type,CalcServiceInvLine.Type::Item);
            CalcServiceInvLine.SETRANGE("No.",CalcReservEntry."Item No.");
            CalcServiceInvLine.SETRANGE("Variant Code",CalcReservEntry."Variant Code");
            CalcServiceInvLine.SETRANGE("Location Code",CalcReservEntry."Location Code");
            CalcServiceInvLine.SETFILTER("Posting Date",GetAvailabilityFilter(AvailabilityDate));
            IF Positive THEN
              CalcServiceInvLine.SETFILTER("Quantity (Base)",'<0')
            ELSE
              CalcServiceInvLine.SETFILTER("Quantity (Base)",'>0');
            CalcServiceInvLine.SETRANGE("Job No.",' ');
          END;
      END;
    END;

    LOCAL PROCEDURE SetValueArray@25(EntryStatus@1000 : 'Reservation,Tracking,Simulation') : Integer;
    BEGIN
      CLEAR(ValueArray);
      CASE EntryStatus OF
        0:
        BEGIN // Reservation
          ValueArray[1] := 1;
          ValueArray[2] := 12;
          ValueArray[3] := 16;
          ValueArray[4] := 32;
          ValueArray[5] := 36;
          ValueArray[6] := 63;
          ValueArray[7] := 64;
          ValueArray[8] := 73;
          ValueArray[9] := 74;
          ValueArray[10] := 101;
          ValueArray[11] := 102;
          ValueArray[12] := 110;
          EXIT(12);
        END;
        1:
        BEGIN // Order Tracking
          ValueArray[1] := 1;
          ValueArray[2] := 12;
          ValueArray[3] := 16;
          ValueArray[4] := 21;
          ValueArray[5] := 32;
          ValueArray[6] := 36;
          ValueArray[7] := 62;
          ValueArray[8] := 63;
          ValueArray[9] := 64;
          ValueArray[10] := 72;
          ValueArray[11] := 73;
          ValueArray[12] := 74;
          ValueArray[13] := 101;
          ValueArray[14] := 102;
          ValueArray[15] := 110;
          EXIT(15);
        END;
        2:
        BEGIN // Simulation order tracking
          ValueArray[1] := 31;
          ValueArray[2] := 61;
          ValueArray[3] := 71;
          EXIT(3);
        END;
        3:
        BEGIN // Item Tracking
          ValueArray[1] := 1;
          ValueArray[2] := 6500;
          EXIT(2);
        END;


      END;
    END;

    PROCEDURE SetPointerFilter@21(VAR ReservEntry@1000 : Record 337);
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");
      ReservEntry.SETRANGE("Source ID",ReservEntry."Source ID");
      ReservEntry.SETRANGE("Source Ref. No.",ReservEntry."Source Ref. No.");
      ReservEntry.SETRANGE("Source Type",ReservEntry."Source Type");
      ReservEntry.SETRANGE("Source Subtype",ReservEntry."Source Subtype");
      ReservEntry.SETRANGE("Source Batch Name",ReservEntry."Source Batch Name");
      ReservEntry.SETRANGE("Source Prod. Order Line",ReservEntry."Source Prod. Order Line");
    END;

    PROCEDURE ClearSurplus@36();
    VAR
      ReservEntry2@1000 : Record 337;
    BEGIN
      CalcReservEntry.TESTFIELD("Source Type");
      ReservEntry2 := CalcReservEntry;
      SetPointerFilter(ReservEntry2);
      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Surplus);
      // Item Tracking
      IF ItemTrackingHandling = ItemTrackingHandling::None THEN BEGIN
        ReservEntry2.SETRANGE("Serial No.",'');
        ReservEntry2.SETRANGE("Lot No.",'');
      END;

      IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN BEGIN
        ReservEntry2.Lock;
        IF NOT ReservEntry2.FINDSET THEN
          EXIT;
        ActionMessageEntry.RESET;
        ActionMessageEntry.SETCURRENTKEY("Reservation Entry");
        REPEAT
          ActionMessageEntry.SETRANGE("Reservation Entry",ReservEntry2."Entry No.");
          ActionMessageEntry.DELETEALL;
        UNTIL ReservEntry2.NEXT = 0;
      END;

      IF ReservEntry2.FINDSET THEN
        REPEAT
          ReservEntry2.DELETE;
        UNTIL ReservEntry2.NEXT = 0;

      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Prospect);
      IF ReservEntry2.FINDSET THEN
        REPEAT
          ReservEntry2.DELETE;
        UNTIL ReservEntry2.NEXT = 0;
    END;

    PROCEDURE QuantityTracked@28(VAR ReservEntry@1000 : Record 337) : Decimal;
    VAR
      ReservEntry2@1001 : Record 337;
      QtyTracked@1004 : Decimal;
    BEGIN
      ReservEntry2 := ReservEntry;
      SetPointerFilter(ReservEntry2);
      ReservEntry.COPYFILTER("Serial No.",ReservEntry2."Serial No.");
      ReservEntry.COPYFILTER("Lot No.",ReservEntry2."Lot No.");

      IF ReservEntry2.FINDSET THEN BEGIN
        ReservEntry.Binding := ReservEntry2.Binding;
        REPEAT
          QtyTracked += ReservEntry2."Quantity (Base)";
        UNTIL ReservEntry2.NEXT = 0;
      END;
      EXIT(QtyTracked);
    END;

    PROCEDURE QuantityTracked2@57(VAR ReservEntry@1000 : Record 337) : Decimal;
    VAR
      ReservEntry2@1001 : Record 337;
      QtyTracked@1004 : Decimal;
    BEGIN
      ReservEntry2 := ReservEntry;
      SetPointerFilter(ReservEntry2);
      ReservEntry2.SETRANGE("Serial No.",ReservEntry."Serial No.");
      ReservEntry2.SETRANGE("Lot No.",ReservEntry."Lot No.");
      ReservEntry2.SETRANGE("Reservation Status",
        ReservEntry2."Reservation Status"::Tracking,ReservEntry2."Reservation Status"::Prospect);
      IF ReservEntry2.FINDSET THEN BEGIN
        REPEAT
          QtyTracked += ReservEntry2."Quantity (Base)";
        UNTIL ReservEntry2.NEXT = 0;
      END;
      EXIT(QtyTracked);
    END;

    PROCEDURE AutoTrack@27(TotalQty@1000 : Decimal);
    VAR
      SurplusEntry@1001 : Record 337;
      DummyEntry@1002 : Record 337;
      AvailabilityDate@1003 : Date;
      QtyToTrack@1004 : Decimal;
    BEGIN
      CalcReservEntry.TESTFIELD("Source Type");
      IF CalcReservEntry."Item No." = '' THEN
        EXIT;

      GetItemSetup(CalcReservEntry);
      IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN
        EXIT;

      IF CalcReservEntry."Source Type" IN[DATABASE::"Sales Line",DATABASE::"Purchase Line",DATABASE::"Service Line"] THEN
        IF NOT (CalcReservEntry."Source Subtype" IN [1,5]) THEN
          EXIT; // Only order, return order

      IF CalcReservEntry."Source Type" IN[DATABASE::"Prod. Order Line",DATABASE::"Prod. Order Component"]
      THEN
        IF CalcReservEntry."Source Subtype" = 0 THEN
          EXIT; // Not simulation

      CalcReservEntry.Lock;

      QtyToTrack := CreateReservEntry.SignFactor(CalcReservEntry) * TotalQty - QuantityTracked(CalcReservEntry);

      IF QtyToTrack = 0 THEN BEGIN
        UpdateDating;
        EXIT;
      END;

      QtyToTrack := MatchSurplus(CalcReservEntry,SurplusEntry,QtyToTrack,Positive,AvailabilityDate,Item."Order Tracking Policy");

      // Make residual surplus record:
      IF QtyToTrack <> 0 THEN BEGIN
        IF CurrentBindingIsSet THEN
          MakeConnection(CalcReservEntry,SurplusEntry,QtyToTrack,2,AvailabilityDate,CurrentBinding)
        ELSE
          MakeConnection(CalcReservEntry,SurplusEntry,QtyToTrack,2,AvailabilityDate,CalcReservEntry.Binding);
        IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN BEGIN // Issue Action Message
          CreateReservEntry.GetLastEntry(SurplusEntry); // Get the surplus-entry just inserted
          IssueActionMessage(SurplusEntry,TRUE,DummyEntry);
        END;
      END ELSE
        UpdateDating;
    END;

    PROCEDURE MatchSurplus@40(VAR ReservEntry@1000 : Record 337;VAR SurplusEntry@1001 : Record 337;QtyToTrack@1002 : Decimal;SearchForSupply@1003 : Boolean;VAR AvailabilityDate@1004 : Date;TrackingPolicy@1005 : 'None,Tracking Only,Tracking & Action Msg.') : Decimal;
    VAR
      Search@1006 : Text[1];
      NextStep@1007 : Integer;
      ReservationStatus@1008 : 'Reservation,Tracking';
      ReservEntry2@1009 : Record 337;
    BEGIN
      IF QtyToTrack = 0 THEN
        EXIT;

      ReservEntry.Lock;
      SurplusEntry.SETCURRENTKEY(
        "Item No.","Variant Code","Location Code","Reservation Status",
        "Shipment Date","Expected Receipt Date","Serial No.","Lot No.");
      SurplusEntry.SETRANGE("Item No.",ReservEntry."Item No.");
      SurplusEntry.SETRANGE("Variant Code",ReservEntry."Variant Code");
      SurplusEntry.SETRANGE("Location Code",ReservEntry."Location Code");
      SurplusEntry.SETRANGE("Reservation Status",SurplusEntry."Reservation Status"::Surplus);
      IF SearchForSupply THEN BEGIN
        AvailabilityDate := ReservEntry."Shipment Date";
        Search := '+';
        NextStep := -1;
        SurplusEntry.SETFILTER("Expected Receipt Date",GetAvailabilityFilter2(AvailabilityDate,SearchForSupply));
        SurplusEntry.SETFILTER("Quantity (Base)",'>0');
      END ELSE BEGIN
        AvailabilityDate := ReservEntry."Expected Receipt Date";
        Search := '-';
        NextStep := 1;
        SurplusEntry.SETFILTER("Shipment Date",GetAvailabilityFilter2(AvailabilityDate,SearchForSupply));
        SurplusEntry.SETFILTER("Quantity (Base)",'<0')
      END;
      IF FieldFilterNeeded2(ReservEntry,SearchForSupply,0) THEN
        SurplusEntry.SETFILTER("Lot No.",GetFieldFilter);
      IF FieldFilterNeeded2(ReservEntry,SearchForSupply,1) THEN
        SurplusEntry.SETFILTER("Serial No.",GetFieldFilter);
      IF SurplusEntry.FIND(Search) THEN
        REPEAT
          ReservationStatus := ReservationStatus::Tracking;
          IF (ABS(SurplusEntry."Quantity (Base)") <= ABS(QtyToTrack)) THEN BEGIN
            ReservEntry2 := SurplusEntry;
            MakeConnection(ReservEntry,SurplusEntry,-SurplusEntry."Quantity (Base)",ReservationStatus,
              AvailabilityDate,SurplusEntry.Binding);
            QtyToTrack := QtyToTrack + SurplusEntry."Quantity (Base)";
            SurplusEntry := ReservEntry2;
            SurplusEntry.DELETE;
            IF TrackingPolicy = TrackingPolicy::"Tracking & Action Msg." THEN
              ModifyActionMessage(SurplusEntry."Entry No.",0,TRUE); // Delete related Action Message
          END ELSE BEGIN
            SurplusEntry.VALIDATE("Quantity (Base)",SurplusEntry."Quantity (Base)" + QtyToTrack);
            SurplusEntry.MODIFY;
            MakeConnection(ReservEntry,SurplusEntry,QtyToTrack,ReservationStatus,AvailabilityDate,SurplusEntry.Binding);
            IF TrackingPolicy = TrackingPolicy::"Tracking & Action Msg." THEN
              ModifyActionMessage(SurplusEntry."Entry No.",QtyToTrack,FALSE); // Modify related Action Message
            QtyToTrack := 0;
          END;
        UNTIL (SurplusEntry.NEXT(NextStep) = 0) OR (QtyToTrack = 0);

      EXIT(QtyToTrack);
    END;

    LOCAL PROCEDURE MakeConnection@26(VAR FromReservEntry@1000 : Record 337;VAR ToReservEntry@1001 : Record 337;Quantity@1002 : Decimal;ReservationStatus@1003 : 'Reservation,Tracking,Surplus';AvailabilityDate@1004 : Date;Binding@1005 : ',Order-to-Order');
    BEGIN
      IF Quantity < 0 THEN
        ToReservEntry."Shipment Date" := AvailabilityDate
      ELSE
        ToReservEntry."Expected Receipt Date" := AvailabilityDate;

      CreateReservEntry.SetBinding(Binding);

      IF FromReservEntry."Planning Flexibility" <> FromReservEntry."Planning Flexibility"::Unlimited THEN
        CreateReservEntry.SetPlanningFlexibility(FromReservEntry."Planning Flexibility");

      CreateReservEntry.CreateReservEntryFor(
        FromReservEntry."Source Type",FromReservEntry."Source Subtype",FromReservEntry."Source ID",
        FromReservEntry."Source Batch Name",FromReservEntry."Source Prod. Order Line",FromReservEntry."Source Ref. No.",
        FromReservEntry."Qty. per Unit of Measure",CreateReservEntry.SignFactor(FromReservEntry) * Quantity,
        FromReservEntry."Serial No.",FromReservEntry."Lot No.");
      CreateReservEntry.CreateReservEntryFrom(
        ToReservEntry."Source Type",ToReservEntry."Source Subtype",ToReservEntry."Source ID",ToReservEntry."Source Batch Name",
        ToReservEntry."Source Prod. Order Line",ToReservEntry."Source Ref. No.",ToReservEntry."Qty. per Unit of Measure",
        ToReservEntry."Serial No.",ToReservEntry."Lot No.");
      CreateReservEntry.SetApplyFromEntryNo(FromReservEntry."Appl.-from Item Entry");
      CreateReservEntry.CreateEntry(
        FromReservEntry."Item No.",FromReservEntry."Variant Code",FromReservEntry."Location Code",
        FromReservEntry.Description,ToReservEntry."Expected Receipt Date",ToReservEntry."Shipment Date",0,ReservationStatus);
    END;

    PROCEDURE ModifyUnitOfMeasure@29();
    BEGIN
      ReservEngineMgt.ModifyUnitOfMeasure(CalcReservEntry,CalcReservEntry."Qty. per Unit of Measure");
    END;

    PROCEDURE MakeRoomForReservation@66(VAR ReservEntry@1000 : Record 337) : Decimal;
    VAR
      ReservEntry2@1001 : Record 337;
      TotalQuantity@1002 : Decimal;
    BEGIN
      TotalQuantity := SourceQuantity(ReservEntry,FALSE);
      ReservEntry2 := ReservEntry;
      SetPointerFilter(ReservEntry2);
      ItemTrackingHandling := ItemTrackingHandling::Match;
      DeleteReservEntries2(FALSE,TotalQuantity - (ReservEntry."Quantity (Base)" * CreateReservEntry.SignFactor(ReservEntry)),
        ReservEntry2);
    END;

    LOCAL PROCEDURE SaveTrackingSpecification@60(VAR ReservEntry@1000 : Record 337;QtyReleased@1001 : Decimal);
    BEGIN
      // Used when creating reservations.
      IF ItemTrackingHandling = ItemTrackingHandling::None THEN
        EXIT;
      IF (ReservEntry."Serial No." = '') AND (ReservEntry."Lot No." = '') THEN
        EXIT;
      TempTrackingSpecification.SETRANGE("Serial No.",ReservEntry."Serial No.");
      TempTrackingSpecification.SETRANGE("Lot No.",ReservEntry."Lot No.");
      IF TempTrackingSpecification.FINDSET THEN BEGIN
        TempTrackingSpecification.VALIDATE("Quantity (Base)",
          TempTrackingSpecification."Quantity (Base)" + QtyReleased);
        TempTrackingSpecification.MODIFY;
      END ELSE BEGIN
        TempTrackingSpecification.TRANSFERFIELDS(ReservEntry);
        TempTrackingSpecification.VALIDATE("Quantity (Base)",QtyReleased);
        TempTrackingSpecification.INSERT;
      END;
      TempTrackingSpecification.RESET;
    END;

    PROCEDURE CollectTrackingSpecification@64(VAR TargetTrackingSpecification@1001 : TEMPORARY Record 336) @1000 : Boolean;
    BEGIN
      // Used when creating reservations.
      TempTrackingSpecification.RESET;
      TargetTrackingSpecification.RESET;

      IF NOT TempTrackingSpecification.FINDSET THEN
        EXIT(FALSE)
      ELSE
        REPEAT
          TargetTrackingSpecification := TempTrackingSpecification;
          TargetTrackingSpecification.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;

      TempTrackingSpecification.DELETEALL;

      EXIT(TRUE);
    END;

    PROCEDURE SourceQuantity@32(VAR ReservEntry@1000 : Record 337;SetAsCurrent@1001 : Boolean) : Decimal;
    BEGIN
      EXIT(GetSourceRecordValue(ReservEntry,SetAsCurrent,0));
    END;

    PROCEDURE GetSourceRecordValue@62(VAR ReservEntry@1000 : Record 337;SetAsCurrent@1001 : Boolean;ReturnOption@1012 : 'Net Qty. (Base),Gross Qty. (Base)') : Decimal;
    VAR
      ItemLedgEntry@1002 : Record 32;
      SalesLine@1003 : Record 37;
      ReqLine@1004 : Record 246;
      PurchLine@1005 : Record 39;
      ItemJnlLine@1006 : Record 83;
      BOMJnlLine@1013 : Record 89;
      ProdOrderLine@1007 : Record 5406;
      ProdOrderComp@1008 : Record 5407;
      PlanningComponent@1009 : Record 99000829;
      TransLine@1010 : Record 5741;
      ServiceInvLine@1011 : Record 5902;
      JobJnlLine@1014 : Record 210;
    BEGIN
      WITH ReservEntry DO BEGIN
        CASE "Source Type" OF
          DATABASE::"Item Ledger Entry":
            BEGIN
              ItemLedgEntry.GET("Source Ref. No.");
              IF SetAsCurrent THEN
                SetItemLedgEntry(ItemLedgEntry);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(ItemLedgEntry."Remaining Quantity");
                ReturnOption::"Gross Qty. (Base)": EXIT(ItemLedgEntry.Quantity);
              END;
            END;
          DATABASE::"Sales Line":
            BEGIN
              SalesLine.GET("Source Subtype","Source ID","Source Ref. No.");
              IF SetAsCurrent THEN
                SetSalesLine(SalesLine);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(SalesLine."Outstanding Qty. (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(SalesLine."Quantity (Base)");
              END;
            END;
          DATABASE::"Requisition Line":
            BEGIN
              ReqLine.GET("Source ID","Source Batch Name","Source Ref. No.");
              IF SetAsCurrent THEN
                SetReqLine(ReqLine);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(ReqLine."Net Quantity (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(ReqLine."Quantity (Base)");
              END;
            END;
          DATABASE::"Purchase Line":
            BEGIN
              PurchLine.GET("Source Subtype","Source ID","Source Ref. No.");
              IF SetAsCurrent THEN
                SetPurchLine(PurchLine);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(PurchLine."Outstanding Qty. (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(PurchLine."Quantity (Base)");
              END;
            END;
          DATABASE::"Item Journal Line":
            BEGIN
              ItemJnlLine.GET("Source ID","Source Batch Name","Source Ref. No.");
              IF SetAsCurrent THEN
                SetItemJnlLine(ItemJnlLine);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(ItemJnlLine."Quantity (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(ItemJnlLine."Quantity (Base)");
              END;
            END;
          DATABASE::"Job Journal Line":
            BEGIN
              JobJnlLine.GET("Source ID","Source Batch Name","Source Ref. No.");
              IF SetAsCurrent THEN
                SetJobJnlLine(JobJnlLine);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(JobJnlLine."Quantity (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(JobJnlLine."Quantity (Base)");
              END;
            END;
          DATABASE::"BOM Journal Line":
            BEGIN
              BOMJnlLine.GET("Source ID","Source Batch Name","Source Ref. No.");
              IF SetAsCurrent THEN
                SetBOMJnlLine(BOMJnlLine);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(BOMJnlLine."Quantity (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(BOMJnlLine."Quantity (Base)");
              END;
            END;
          DATABASE::"Prod. Order Line":
            BEGIN
              ProdOrderLine.GET("Source Subtype","Source ID","Source Prod. Order Line");
              IF SetAsCurrent THEN
                SetProdOrderLine(ProdOrderLine);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(ProdOrderLine."Remaining Qty. (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(ProdOrderLine."Quantity (Base)");
              END;
            END;
          DATABASE::"Prod. Order Component":
            BEGIN
              ProdOrderComp.GET("Source Subtype","Source ID","Source Prod. Order Line","Source Ref. No.");
              IF SetAsCurrent THEN
                SetProdOrderComponent(ProdOrderComp);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(ProdOrderComp."Remaining Qty. (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(ProdOrderComp."Expected Qty. (Base)");
              END;
            END;
          DATABASE::"Planning Component":
            BEGIN
              PlanningComponent.GET("Source ID","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
              IF SetAsCurrent THEN
                SetPlanningComponent(PlanningComponent);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(PlanningComponent."Net Quantity (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(PlanningComponent."Expected Quantity (Base)");
              END;
            END;
          DATABASE::"Transfer Line":
            BEGIN
              TransLine.GET("Source ID","Source Ref. No.");
              IF SetAsCurrent THEN
                SetTransferLine(TransLine,"Source Subtype");
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(TransLine."Outstanding Qty. (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(TransLine."Quantity (Base)");
              END;
            END;
          DATABASE::"Service Line":
            BEGIN
              ServiceInvLine.GET("Source Subtype","Source ID","Source Ref. No.");
              IF SetAsCurrent THEN
                SetServLine(ServiceInvLine);
              CASE ReturnOption OF
                ReturnOption::"Net Qty. (Base)": EXIT(ServiceInvLine."Outstanding Qty. (Base)");
                ReturnOption::"Gross Qty. (Base)": EXIT(ServiceInvLine."Quantity (Base)");
              END;
            END;
        END;
      END; // WITH
    END;

    LOCAL PROCEDURE GetItemSetup@33(VAR ReservEntry@1000 : Record 337);
    BEGIN
      IF ReservEntry."Item No." <> Item."No." THEN BEGIN
        Item.GET(ReservEntry."Item No.");
        IF Item."Item Tracking Code" <> '' THEN
          ItemTrackingCode.GET(Item."Item Tracking Code")
        ELSE
          ItemTrackingCode.INIT;
        GetPlanningParameters.AtSKU(SKU,ReservEntry."Item No.",
          ReservEntry."Variant Code",ReservEntry."Location Code");
        MfgSetup.GET;
      END;
    END;

    PROCEDURE MarkReservConnection@35(VAR ReservEntry@1001 : Record 337;TargetReservEntry@1002 : Record 337) ReservedQuantity@1000 : Decimal;
    VAR
      ReservEntry2@1003 : Record 337;
      SignFactor@1004 : Integer;
    BEGIN
      IF NOT ReservEntry.FINDSET THEN
        EXIT;
      SignFactor := CreateReservEntry.SignFactor(ReservEntry);

      REPEAT
        IF ReservEntry2.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive) THEN
          IF ((ReservEntry2."Source Type" = TargetReservEntry."Source Type") AND
              (ReservEntry2."Source Subtype" = TargetReservEntry."Source Subtype") AND
              (ReservEntry2."Source ID" = TargetReservEntry."Source ID") AND
              (ReservEntry2."Source Batch Name" = TargetReservEntry."Source Batch Name") AND
              (ReservEntry2."Source Prod. Order Line" = TargetReservEntry."Source Prod. Order Line") AND
              (ReservEntry2."Source Ref. No." =  TargetReservEntry."Source Ref. No."))
          THEN BEGIN
            ReservEntry.MARK(TRUE);
            ReservedQuantity += ReservEntry."Quantity (Base)" * SignFactor;
          END;
      UNTIL ReservEntry.NEXT = 0;
      ReservEntry.MARKEDONLY(TRUE);
    END;

    PROCEDURE IssueActionMessage@37(VAR SurplusEntry@1000 : Record 337;UseGlobalSettings@1001 : Boolean;AllDeletedEntry@1002 : Record 337);
    VAR
      ReservEntry@1003 : Record 337;
      ReservEntry2@1004 : Record 337;
      ReservEntry3@1005 : Record 337;
      ActionMessageEntry2@1006 : Record 99000849;
      NextEntryNo@1007 : Integer;
      FirstDate@1008 : Date;
      Found@1009 : Boolean;
      FreeBinding@1010 : Boolean;
      NoMoreData@1011 : Boolean;
    BEGIN
      SurplusEntry.TESTFIELD("Quantity (Base)");
      IF SurplusEntry."Reservation Status" < SurplusEntry."Reservation Status"::Surplus THEN
        SurplusEntry.FIELDERROR("Reservation Status");
      SurplusEntry.CALCFIELDS("Action Message Adjustment");
      IF SurplusEntry."Quantity (Base)" + SurplusEntry."Action Message Adjustment" = 0 THEN
        EXIT;

      ActionMessageEntry.RESET;

      IF ActionMessageEntry.FINDLAST THEN
        NextEntryNo := ActionMessageEntry."Entry No." + 1
      ELSE
        NextEntryNo := 1;

      ActionMessageEntry.INIT;
      ActionMessageEntry."Entry No." := NextEntryNo;

      IF SurplusEntry."Quantity (Base)" > 0 THEN BEGIN // Supply: Issue AM directly
        IF SurplusEntry."Planning Flexibility" = SurplusEntry."Planning Flexibility"::None THEN
          EXIT;
        IF NOT (SurplusEntry."Source Type" IN [DATABASE::"Prod. Order Line",DATABASE::"Purchase Line"])
        THEN
          EXIT;

        ActionMessageEntry.TransferFromReservEntry(SurplusEntry);
        ActionMessageEntry.Quantity := -(SurplusEntry."Quantity (Base)" + SurplusEntry."Action Message Adjustment");
        ActionMessageEntry.Type := ActionMessageEntry.Type::New;
        ReservEntry2 := SurplusEntry;
      END ELSE BEGIN // Demand: Find supply and issue AM
        CASE SurplusEntry.Binding OF
          SurplusEntry.Binding::" ": BEGIN
            IF UseGlobalSettings THEN BEGIN
              ReservEntry.COPY(SurplusEntry); // Copy filter and sorting
              ReservEntry.SETRANGE("Reservation Status"); // Remove filter on Reservation Status
            END ELSE BEGIN
              GetItemSetup(SurplusEntry);
              Positive := TRUE;
              ReservEntry.SETCURRENTKEY(
                "Item No.","Variant Code","Location Code","Reservation Status",
                "Shipment Date","Expected Receipt Date","Serial No.","Lot No.");
              ReservEntry.SETRANGE("Item No.",SurplusEntry."Item No.");
              ReservEntry.SETRANGE("Variant Code",SurplusEntry."Variant Code");
              ReservEntry.SETRANGE("Location Code",SurplusEntry."Location Code");
              ReservEntry.SETFILTER("Expected Receipt Date",GetAvailabilityFilter(SurplusEntry."Shipment Date"));
              IF FieldFilterNeeded(SurplusEntry,0) THEN
                ReservEntry.SETFILTER("Lot No.",GetFieldFilter);
              IF FieldFilterNeeded(SurplusEntry,1) THEN
                ReservEntry.SETFILTER("Serial No.",GetFieldFilter);
              ReservEntry.SETRANGE(Positive,TRUE);
            END;
            ReservEntry.SETRANGE(Binding,ReservEntry.Binding::" ");
            ReservEntry.SETRANGE("Planning Flexibility",ReservEntry."Planning Flexibility"::Unlimited);
            ReservEntry.SETFILTER("Source Type",'=%1|=%2',DATABASE::"Purchase Line",DATABASE::"Prod. Order Line");
          END;

          SurplusEntry.Binding::"Order-to-Order": BEGIN
            ReservEntry3 := SurplusEntry;
            SetPointerFilter(ReservEntry3);
            ReservEntry3.SETRANGE(
              "Reservation Status",ReservEntry3."Reservation Status"::Reservation,ReservEntry3."Reservation Status"::Tracking);
            ReservEntry3.SETRANGE(Binding,ReservEntry3.Binding::"Order-to-Order");
            IF ReservEntry3.FINDFIRST THEN BEGIN
              ReservEntry3.GET(ReservEntry3."Entry No.",NOT ReservEntry3.Positive);
              ReservEntry := ReservEntry3;
              ReservEntry.SETRECFILTER;
              Found := TRUE;
            END ELSE BEGIN
              Found := FALSE;
              FreeBinding := TRUE;
            END;
          END;

        END;

        ActionMessageEntry.Quantity := -(SurplusEntry."Quantity (Base)" + SurplusEntry."Action Message Adjustment");

        IF NOT FreeBinding THEN
          IF ReservEntry.FIND('+') THEN BEGIN
            IF AllDeletedEntry."Entry No." > 0 THEN // The supply record has been deleted and cannot be reused.
              REPEAT
                Found := NOT(
                  (AllDeletedEntry."Source Type" = ReservEntry."Source Type") AND
                  (AllDeletedEntry."Source Subtype" = ReservEntry."Source Subtype") AND
                  (AllDeletedEntry."Source ID" = ReservEntry."Source ID") AND
                  (AllDeletedEntry."Source Batch Name" = ReservEntry."Source Batch Name") AND
                  (AllDeletedEntry."Source Prod. Order Line" = ReservEntry."Source Prod. Order Line") AND
                  (AllDeletedEntry."Source Ref. No." = ReservEntry."Source Ref. No."));
                IF NOT Found THEN
                  NoMoreData := ReservEntry.NEXT(-1) = 0;
              UNTIL Found OR NoMoreData
            ELSE
              Found := TRUE;
          END;

        IF Found THEN BEGIN
          ActionMessageEntry.TransferFromReservEntry(ReservEntry);
          ActionMessageEntry.Type := ActionMessageEntry.Type::"Change Qty.";
          ReservEntry2 := ReservEntry;
        END ELSE BEGIN
          ActionMessageEntry."Location Code" := SurplusEntry."Location Code";
          ActionMessageEntry."Variant Code" := SurplusEntry."Variant Code";
          ActionMessageEntry."Item No." := SurplusEntry."Item No.";

          CASE SKU."Replenishment System" OF
            SKU."Replenishment System"::Purchase: BEGIN
              ActionMessageEntry."Source Type" := DATABASE::"Purchase Line"
            END;
            SKU."Replenishment System"::"Prod. Order": BEGIN
              ActionMessageEntry."Source Type" := DATABASE::"Prod. Order Line"
            END;
            SKU."Replenishment System"::Transfer: BEGIN
              ActionMessageEntry."Source Type" := DATABASE::"Transfer Line"
            END;
          END;

          ActionMessageEntry.Type := ActionMessageEntry.Type::New;
        END;
        ActionMessageEntry."Reservation Entry" := SurplusEntry."Entry No.";
      END;

      SetPointerFilter(ReservEntry2);
      ReservEntry2.SETRANGE(
        "Reservation Status",ReservEntry2."Reservation Status"::Reservation,ReservEntry2."Reservation Status"::Tracking);

      IF ReservEntry2."Source Type" <> DATABASE::"Item Ledger Entry" THEN
        IF ReservEntry2.FINDFIRST THEN BEGIN
          FirstDate := FindDate(ReservEntry2,0,TRUE);
          IF FirstDate <> 0D THEN BEGIN
            IF (FORMAT(MfgSetup."Dampener (Time)") = '') OR
              ((ReservEntry2.Binding = ReservEntry2.Binding::"Order-to-Order") AND
              (ReservEntry2."Reservation Status" = ReservEntry2."Reservation Status"::Reservation))
            THEN
              EVALUATE(MfgSetup."Dampener (Time)",'<0D>');
            IF CALCDATE('-' + FORMAT(MfgSetup."Dampener (Time)"),FirstDate) > ReservEntry2."Expected Receipt Date" THEN BEGIN
              ActionMessageEntry2.SETCURRENTKEY(
               "Source Type","Source Subtype","Source ID","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
              ActionMessageEntry2.SETRANGE("Source Type",ActionMessageEntry."Source Type");
              ActionMessageEntry2.SETRANGE("Source Subtype",ActionMessageEntry."Source Subtype");
              ActionMessageEntry2.SETRANGE("Source ID",ActionMessageEntry."Source ID");
              ActionMessageEntry2.SETRANGE("Source Batch Name",ActionMessageEntry."Source Batch Name");
              ActionMessageEntry2.SETRANGE("Source Prod. Order Line",ActionMessageEntry."Source Prod. Order Line");
              ActionMessageEntry2.SETRANGE("Source Ref. No.",ActionMessageEntry."Source Ref. No.");
              ActionMessageEntry2.SETRANGE(Quantity,0);
              ActionMessageEntry2.DELETEALL;
              ActionMessageEntry2.RESET;
              ActionMessageEntry2 := ActionMessageEntry;
              ActionMessageEntry2.Quantity := 0;
              ActionMessageEntry2."New Date" := FirstDate;
              ActionMessageEntry2.Type := ActionMessageEntry.Type::Reschedule;
              ActionMessageEntry2."Reservation Entry" := ReservEntry2."Entry No.";
              WHILE NOT ActionMessageEntry2.INSERT DO
                ActionMessageEntry2."Entry No." += 1;
              ActionMessageEntry."Entry No." := ActionMessageEntry2."Entry No." + 1;
            END;
          END;
        END;

      WHILE NOT ActionMessageEntry.INSERT DO
        ActionMessageEntry."Entry No." += 1;
    END;

    PROCEDURE ModifyActionMessage@38(RelatedToEntryNo@1000 : Integer;Quantity@1001 : Decimal;Delete@1002 : Boolean);
    BEGIN
      ActionMessageEntry.RESET;
      ActionMessageEntry.SETCURRENTKEY("Reservation Entry");
      ActionMessageEntry.SETRANGE("Reservation Entry",RelatedToEntryNo);

      IF Delete THEN BEGIN
        ActionMessageEntry.DELETEALL;
        EXIT;
      END ELSE
        ActionMessageEntry.SETRANGE("New Date",0D);

      IF ActionMessageEntry.FINDFIRST THEN BEGIN
        ActionMessageEntry.Quantity -= Quantity;
        IF (ActionMessageEntry.Quantity = 0) THEN
          ActionMessageEntry.DELETE
        ELSE
          ActionMessageEntry.MODIFY;
      END;
    END;

    PROCEDURE FindDate@43(VAR ReservEntry@1000 : Record 337;Which@1001 : 'Earliest Shipment,Latest Receipt';ReturnRecord@1002 : Boolean) : Date;
    VAR
      ReservEntry2@1003 : Record 337;
      LastDate@1004 : Date;
    BEGIN
      ReservEntry2.COPY(ReservEntry); // Copy filter and sorting

      IF NOT ReservEntry2.FINDSET THEN
        EXIT;

      CASE Which OF
        0: BEGIN
          LastDate := 31129999D;
          REPEAT
            IF ReservEntry2."Shipment Date" < LastDate THEN BEGIN
              LastDate := ReservEntry2."Shipment Date";
              IF ReturnRecord THEN
                ReservEntry := ReservEntry2;
            END;
          UNTIL ReservEntry2.NEXT = 0;
        END;
        1: BEGIN
          LastDate := 0D;
          REPEAT
            IF ReservEntry2."Expected Receipt Date" > LastDate THEN BEGIN
              LastDate := ReservEntry2."Expected Receipt Date";
              IF ReturnRecord THEN
                ReservEntry := ReservEntry2;
            END;
          UNTIL ReservEntry2.NEXT = 0;
        END;
      END;
      EXIT(LastDate);
    END;

    PROCEDURE UpdateDating@45();
    VAR
      FilterReservEntry@1000 : Record 337;
      ReservEntry2@1001 : Record 337;
    BEGIN
      IF CalcReservEntry2."Source Type" = DATABASE::"Planning Component" THEN
        EXIT;

      IF Item."Order Tracking Policy" <> Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
        EXIT;

      IF CalcReservEntry2."Source Type" = DATABASE::"Requisition Line" THEN
        IF ForReqLine."Planning Line Origin" <> ForReqLine."Planning Line Origin"::" " THEN
          EXIT;

      FilterReservEntry := CalcReservEntry2;
      SetPointerFilter(FilterReservEntry);

      IF NOT FilterReservEntry.FINDFIRST THEN
        EXIT;

      IF CalcReservEntry2."Source Type" IN [DATABASE::"Prod. Order Line",DATABASE::"Purchase Line"]
      THEN
        ReservEngineMgt.ModifyActionMessageDating(FilterReservEntry)
      ELSE BEGIN
        IF FilterReservEntry.Positive THEN
          EXIT;
        FilterReservEntry.SETRANGE("Reservation Status",FilterReservEntry."Reservation Status"::Reservation,
          FilterReservEntry."Reservation Status"::Tracking);
        IF NOT FilterReservEntry.FINDSET THEN
          EXIT;
        REPEAT
          IF ReservEntry2.GET(FilterReservEntry."Entry No.",NOT FilterReservEntry.Positive) THEN
            ReservEngineMgt.ModifyActionMessageDating(ReservEntry2);
        UNTIL FilterReservEntry.NEXT = 0;
      END;
    END;

    PROCEDURE ClearActionMessageReferences@46();
    VAR
      ActionMessageEntry2@1000 : Record 99000849;
    BEGIN
      ActionMessageEntry.RESET;
      ActionMessageEntry.FilterFromReservEntry(CalcReservEntry);
      IF ActionMessageEntry.FINDSET THEN
        REPEAT
          ActionMessageEntry2 := ActionMessageEntry;
          IF ActionMessageEntry2.Quantity = 0 THEN
            ActionMessageEntry2.DELETE
          ELSE BEGIN
            ActionMessageEntry2."Source Subtype" := 0;
            ActionMessageEntry2."Source ID" := '';
            ActionMessageEntry2."Source Batch Name" := '';
            ActionMessageEntry2."Source Prod. Order Line" := 0;
            ActionMessageEntry2."Source Ref. No." := 0;
            ActionMessageEntry2."New Date" := 0D;
            ActionMessageEntry2.MODIFY;
          END;
        UNTIL ActionMessageEntry.NEXT = 0;
    END;

    PROCEDURE SetItemTrackingHandling@10(Mode@1000 : 'None,Allow deletion,Match');
    BEGIN
      ItemTrackingHandling := Mode;
    END;

    PROCEDURE DeleteItemTrackingConfirm@65() : Boolean;
    BEGIN
      IF NOT ItemTrackingExist(CalcReservEntry2) THEN
        EXIT(TRUE);

      IF CONFIRM(Text011, FALSE, CalcReservEntry2."Item No.", CalcReservEntry2.TextCaption) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ItemTrackingExist@67(VAR ReservEntry@1000 : Record 337) : Boolean;
    VAR
      ReservEntry2@1001 : Record 337;
    BEGIN
      ReservEntry2.COPY(ReservEntry);
      ReservEntry2.SETFILTER("Item Tracking", '> %1', ReservEntry2."Item Tracking"::None);
      EXIT(NOT ReservEntry2.ISEMPTY);
    END;

    PROCEDURE SetSerialLotNo@17(SerialNo@1001 : Code[20];LotNo@1000 : Code[20]);
    BEGIN
      CalcReservEntry."Serial No." := SerialNo;
      CalcReservEntry."Lot No." := LotNo;
    END;

    PROCEDURE SetMatchFilter@51(VAR ReservEntry@1000 : Record 337;VAR FilterReservEntry@1001 : Record 337;SearchForSupply@1002 : Boolean;AvailabilityDate@1003 : Date);
    BEGIN
      FilterReservEntry.RESET;
      FilterReservEntry.SETCURRENTKEY(
        "Item No.","Variant Code","Location Code","Reservation Status",
        "Shipment Date","Expected Receipt Date","Serial No.","Lot No.");
      FilterReservEntry.SETRANGE("Item No.",ReservEntry."Item No.");
      FilterReservEntry.SETRANGE("Variant Code",ReservEntry."Variant Code");
      FilterReservEntry.SETRANGE("Location Code",ReservEntry."Location Code");
      FilterReservEntry.SETRANGE("Reservation Status",
        FilterReservEntry."Reservation Status"::Reservation,FilterReservEntry."Reservation Status"::Surplus);
      IF SearchForSupply THEN
        FilterReservEntry.SETFILTER("Expected Receipt Date",'..%1',AvailabilityDate)
      ELSE
        FilterReservEntry.SETFILTER("Shipment Date",'>=%1',AvailabilityDate);
      IF FieldFilterNeeded2(ReservEntry,SearchForSupply,0) THEN
        FilterReservEntry.SETFILTER("Lot No.",GetFieldFilter);
      IF FieldFilterNeeded2(ReservEntry,SearchForSupply,1) THEN
        FilterReservEntry.SETFILTER("Serial No.",GetFieldFilter);
      FilterReservEntry.SETRANGE(Positive,SearchForSupply);
    END;

    PROCEDURE LookupLine@59(SourceType@1005 : Integer;SourceSubtype@1004 : Integer;SourceID@1003 : Code[20];SourceBatchName@1002 : Code[10];SourceProdOrderLine@1001 : Integer;SourceRefNo@1000 : Integer);
    VAR
      ItemLedgEntry@1020 : Record 32;
      SalesLine@1018 : Record 37;
      PurchLine@1016 : Record 39;
      ItemJnlLine@1015 : Record 83;
      BOMJnlLine@1014 : Record 89;
      ReqLine@1013 : Record 246;
      ProdOrderLine@1011 : Record 5406;
      ProdOrderComp@1010 : Record 5407;
      PlanningComponent@1009 : Record 99000829;
      ServiceInvLine@1006 : Record 5902;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.RESET;
            SalesLine.SETRANGE("Document Type",SourceSubtype);
            SalesLine.SETRANGE("Document No.",SourceID);
            SalesLine.SETRANGE("Line No.",SourceRefNo);
            FORM.RUN(FORM::"Sales Lines",SalesLine);
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.RESET;
            ReqLine.SETRANGE("Worksheet Template Name",SourceID);
            ReqLine.SETRANGE("Journal Batch Name",SourceBatchName);
            ReqLine.SETRANGE("Line No.",SourceRefNo);
            FORM.RUN(FORM::"Requisition Lines",ReqLine);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.RESET;
            PurchLine.SETRANGE("Document Type",SourceSubtype);
            PurchLine.SETRANGE("Document No.",SourceID);
            PurchLine.SETRANGE("Line No.",SourceRefNo);
            FORM.RUN(FORM::"Purchase Lines",PurchLine);
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            ItemJnlLine.RESET;
            ItemJnlLine.SETRANGE("Journal Template Name",SourceID);
            ItemJnlLine.SETRANGE("Journal Batch Name",SourceBatchName);
            ItemJnlLine.SETRANGE("Line No.",SourceRefNo);
            ItemJnlLine.SETRANGE("Entry Type",SourceSubtype);
            FORM.RUN(FORM::"Item Journal Lines",ItemJnlLine);
          END;
        DATABASE::"BOM Journal Line":
          BEGIN
            BOMJnlLine.RESET;
            BOMJnlLine.SETRANGE("Journal Template Name",SourceID);
            BOMJnlLine.SETRANGE("Journal Batch Name",SourceBatchName);
            BOMJnlLine.SETRANGE("Line No.",SourceRefNo);
            FORM.RUN(FORM::"BOM Journal Lines",BOMJnlLine);
          END;
        DATABASE::"Item Ledger Entry":
          BEGIN
            ItemLedgEntry.RESET;
            ItemLedgEntry.SETRANGE("Entry No.",SourceRefNo);
            FORM.RUN(0,ItemLedgEntry);
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ProdOrderLine.RESET;
            ProdOrderLine.SETRANGE(Status,SourceSubtype);
            ProdOrderLine.SETRANGE("Prod. Order No.",SourceID);
            ProdOrderLine.SETRANGE("Line No.",SourceProdOrderLine);
            FORM.RUN(0,ProdOrderLine);
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.RESET;
            ProdOrderComp.SETRANGE(Status,SourceSubtype);
            ProdOrderComp.SETRANGE("Prod. Order No.",SourceID);
            ProdOrderComp.SETRANGE("Prod. Order Line No.",SourceProdOrderLine);
            ProdOrderComp.SETRANGE("Line No.",SourceRefNo);
            FORM.RUN(0,ProdOrderComp);
          END;
        DATABASE::"Planning Component":
          BEGIN
            PlanningComponent.RESET;
            PlanningComponent.SETRANGE("Worksheet Template Name",SourceID);
            PlanningComponent.SETRANGE("Worksheet Batch Name",SourceBatchName);
            PlanningComponent.SETRANGE("Worksheet Line No.",SourceProdOrderLine);
            PlanningComponent.SETRANGE("Line No.",SourceRefNo);
            FORM.RUN(0,PlanningComponent);
          END;
        DATABASE::"Service Line":
          BEGIN
            ServiceInvLine.RESET;
            ServiceInvLine.SETRANGE("Document Type",SourceSubtype);
            ServiceInvLine.SETRANGE("Document No.",SourceID);
            ServiceInvLine.SETRANGE("Line No.",SourceRefNo);
            FORM.RUN(0,ServiceInvLine);
          END;
      END;
    END;

    PROCEDURE LookupDocument@58(SourceType@1005 : Integer;SourceSubtype@1004 : Integer;SourceID@1003 : Code[20];SourceBatchName@1002 : Code[10];SourceProdOrderLine@1001 : Integer;SourceRefNo@1000 : Integer);
    VAR
      SalesHeader@1019 : Record 36;
      PurchHeader@1017 : Record 38;
      ReqLine@1006 : Record 246;
      ItemJnlLine@1009 : Record 83;
      ItemLedgEntry@1010 : Record 32;
      ProdOrder@1012 : Record 5405;
      TransHeader@1008 : Record 5740;
      ServiceHeader@1007 : Record 5900;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          BEGIN
            SalesHeader.RESET;
            SalesHeader.SETRANGE("Document Type",SourceSubtype);
            SalesHeader.SETRANGE("No.",SourceID);
            CASE SourceSubtype OF
              0: FORM.RUNMODAL(FORM::"Sales Quote",SalesHeader);
              1: FORM.RUNMODAL(FORM::"Sales Order",SalesHeader);
              2: FORM.RUNMODAL(FORM::"Sales Invoice",SalesHeader);
              3: FORM.RUNMODAL(FORM::"Sales Credit Memo",SalesHeader);
            END;
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.RESET;
            ReqLine.SETRANGE("Worksheet Template Name",SourceID);
            ReqLine.SETRANGE("Journal Batch Name",SourceBatchName);
            ReqLine.SETRANGE("Line No.",SourceRefNo);
            FORM.RUNMODAL(FORM::"Requisition Lines",ReqLine);
          END;
        DATABASE::"Planning Component":
          BEGIN
            ReqLine.RESET;
            ReqLine.SETRANGE("Worksheet Template Name",SourceID);
            ReqLine.SETRANGE("Journal Batch Name",SourceBatchName);
            ReqLine.SETRANGE("Line No.",SourceProdOrderLine);
            FORM.RUNMODAL(FORM::"Requisition Lines",ReqLine);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchHeader.RESET;
            PurchHeader.SETRANGE("Document Type",SourceSubtype);
            PurchHeader.SETRANGE("No.",SourceID);
            CASE SourceSubtype OF
              0:
                FORM.RUNMODAL(FORM::"Purchase Quote",PurchHeader);
              1:
                FORM.RUNMODAL(FORM::"Purchase Order",PurchHeader);
              2:
                FORM.RUNMODAL(FORM::"Purchase Invoice",PurchHeader);
              3:
                FORM.RUNMODAL(FORM::"Purchase Credit Memo",PurchHeader);
            END;
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            ItemJnlLine.RESET;
            ItemJnlLine.SETRANGE("Journal Template Name",SourceID);
            ItemJnlLine.SETRANGE("Journal Batch Name",SourceBatchName);
            ItemJnlLine.SETRANGE("Line No.",SourceRefNo);
            ItemJnlLine.SETRANGE("Entry Type",SourceSubtype);
            FORM.RUNMODAL(FORM::"Item Journal Lines",ItemJnlLine);
          END;
        DATABASE::"Item Ledger Entry":
          BEGIN
            ItemLedgEntry.RESET;
            ItemLedgEntry.SETRANGE("Entry No.",SourceRefNo);
            FORM.RUNMODAL(0,ItemLedgEntry);
          END;
        DATABASE::"Prod. Order Line",
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrder.RESET;
            ProdOrder.SETRANGE(Status,SourceSubtype);
            ProdOrder.SETRANGE("No.",SourceID);
            CASE SourceSubtype OF
              0:
                FORM.RUNMODAL(FORM::"Simulated Production Order",ProdOrder);
              1:
                FORM.RUNMODAL(FORM::"Planned Production Order",ProdOrder);
              2:
                FORM.RUNMODAL(FORM::"Firm Planned Prod. Order",ProdOrder);
              3:
                FORM.RUNMODAL(FORM::"Released Production Order",ProdOrder);
            END;
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransHeader.RESET;
            TransHeader.SETRANGE("No.",SourceID);
            FORM.RUNMODAL(FORM::"Transfer Order",TransHeader);
          END;
        DATABASE::"Service Line":
          BEGIN
            ServiceHeader.RESET;
            ServiceHeader.SETRANGE("Document Type",SourceSubtype);
            ServiceHeader.SETRANGE("No.",SourceID);
            IF SourceSubtype = 0 THEN
              FORM.RUNMODAL(FORM::"Service Quote",ServiceHeader)
            ELSE
              FORM.RUNMODAL(FORM::"Service Order",ServiceHeader);
          END;
      END;
    END;

    PROCEDURE CalcReservedQtyOnPick@63(VAR AvailQty@1004 : Decimal;VAR AllocQty@1001 : Decimal);
    VAR
      WhseActivLine@1003 : Record 5767;
      QtyOnOutboundBins@1002 : Decimal;
      QtyReservedOnPickShip@1000 : Decimal;
      ReservEntry@1005 : Record 337;
      ReservEntry2@1006 : Record 337;
      PickQty@1007 : Decimal;
      PartialPickQty@1008 : Decimal;
    BEGIN
      WITH CalcReservEntry DO BEGIN
        GetItemSetup(CalcReservEntry);
        Item.SETRANGE("Location Filter","Location Code");
        Item.SETRANGE("Variant Filter","Variant Code");
        IF "Lot No." <> '' THEN
          Item.SETRANGE("Lot No. Filter","Lot No.");
        IF "Serial No." <> '' THEN
          Item.SETRANGE("Serial No. Filter","Serial No.");
        Item.CALCFIELDS(
          Inventory,"Reserved Qty. on Inventory");

        WhseActivLine.SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type","Variant Code",
          "Unit of Measure Code","Breakbulk No.","Activity Type","Lot No.","Serial No.");

        WhseActivLine.SETRANGE("Item No.","Item No.");
        IF Location."Bin Mandatory" THEN
          WhseActivLine.SETFILTER("Bin Code",'<>%1','');
        WhseActivLine.SETRANGE("Location Code","Location Code");
        WhseActivLine.SETFILTER(
          "Action Type",'%1|%2',WhseActivLine."Action Type"::" ",WhseActivLine."Action Type"::Take);
        WhseActivLine.SETRANGE("Variant Code","Variant Code");
        WhseActivLine.SETRANGE("Breakbulk No.",0);
        WhseActivLine.SETFILTER(
          "Activity Type",'%1|%2',WhseActivLine."Activity Type"::Pick,WhseActivLine."Activity Type"::"Invt. Pick");
        IF "Lot No." <> '' THEN
          WhseActivLine.SETRANGE("Lot No.","Lot No.");
        IF "Serial No." <> '' THEN
          WhseActivLine.SETRANGE("Serial No.","Serial No.");
        WhseActivLine.CALCSUMS("Qty. Outstanding (Base)");

        IF Location."Require Pick" THEN BEGIN
          QtyOnOutboundBins :=
            CreatePick.CalcQtyOnOutboundBins(
              "Location Code","Item No.","Variant Code","Lot No.","Serial No.");

          QtyReservedOnPickShip :=
            CreatePick.CalcReservQtyOnPicksShips(
              "Location Code","Item No.","Variant Code");
        END;
        AllocQty := WhseActivLine."Qty. Outstanding (Base)" + QtyOnOutboundBins - QtyReservedOnPickShip;
        PickQty := WhseActivLine."Qty. Outstanding (Base)";

        IF (Item."Reserved Qty. on Inventory" <> 0) AND (WhseActivLine."Qty. Outstanding (Base)" <> 0) THEN BEGIN
          ReservEntry.SETCURRENTKEY("Item No.","Source Type","Source Subtype","Reservation Status");
          ReservEntry.SETRANGE("Item No.","Item No.");
          ReservEntry.SETRANGE("Source Type",DATABASE::"Item Ledger Entry");
          ReservEntry.SETRANGE("Source Subtype",0);
          ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
          ReservEntry.SETRANGE("Location Code","Location Code");
          ReservEntry.SETRANGE("Variant Code","Variant Code");
          IF "Lot No." <> '' THEN
            ReservEntry.SETRANGE("Lot No.","Lot No.");
          IF "Serial No." <> '' THEN
            ReservEntry.SETRANGE("Serial No.","Serial No.");
          IF ReservEntry.FINDSET THEN BEGIN
            WhseActivLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
            REPEAT
              ReservEntry2.GET(ReservEntry."Entry No.",NOT(ReservEntry.Positive));
              WhseActivLine.SETRANGE("Source Type",ReservEntry2."Source Type");
              WhseActivLine.SETRANGE("Source Subtype",ReservEntry2."Source Subtype");
              WhseActivLine.SETRANGE("Source No.",ReservEntry2."Source ID");
              WhseActivLine.SETRANGE("Source Line No.",ReservEntry2."Source Ref. No.");
              PartialPickQty := 0;
              IF WhseActivLine.FINDSET THEN
                REPEAT
                  PartialPickQty += WhseActivLine."Qty. Outstanding (Base)";
                UNTIL WhseActivLine.NEXT = 0;

              IF ReservEntry."Quantity (Base)" > PartialPickQty THEN
                PickQty -= PartialPickQty
              ELSE
                PickQty -= ReservEntry."Quantity (Base)";
            UNTIL ReservEntry.NEXT = 0;
          END;
        END;
        AvailQty :=
          Item.Inventory - PickQty - QtyOnOutboundBins -
          Item."Reserved Qty. on Inventory" + QtyReservedOnPickShip;
      END;
    END;

    PROCEDURE JobJnlLineUpdateValues@68(VAR CurrentJobJnlLine@1000 : Record 210;VAR QtyToReserve@1001 : Decimal;VAR QtyReservedThisLine@1002 : Decimal);
    BEGIN
      WITH CurrentJobJnlLine DO BEGIN
        CALCFIELDS("Reserved Qty. (Base)");
        QtyReservedThisLine := "Reserved Qty. (Base)";
        QtyToReserve := "Quantity (Base)" - "Reserved Qty. (Base)";
      END;
    END;

    PROCEDURE SaveItemTrackingAsSurplus@1000000000(VAR ReservEntry@1000000004 : Record 337;NewQtyBase@1000000000 : Decimal) QuantityIsValidated : Boolean;
    VAR
      SurplusEntry@1000000003 : Record 337;
      CreateReservEntry2@1000000006 : Codeunit 99000830;
      QtyToSave@1000000007 : Decimal;
      QtyToHandleThisLine@1000000002 : Decimal;
      QtyToInvoiceThisLine@1000000001 : Decimal;
      SignFactor@1000000005 : Integer;
    BEGIN
      QtyToSave := ReservEntry."Quantity (Base)" - NewQtyBase;

      IF QtyToSave = 0 THEN
        EXIT;

      IF ReservEntry."Item Tracking" = ReservEntry."Item Tracking"::None THEN
        EXIT;

      IF ReservEntry."Source Type" = DATABASE::"Item Ledger Entry" THEN
        EXIT;

      IF QtyToSave * ReservEntry."Quantity (Base)" < 0 THEN
        ReservEntry.FIELDERROR("Quantity (Base)");

      SignFactor := ReservEntry."Quantity (Base)" / ABS(ReservEntry."Quantity (Base)");

      IF SignFactor * QtyToSave > SignFactor * ReservEntry."Quantity (Base)" THEN
        ReservEntry.FIELDERROR("Quantity (Base)");

      QtyToHandleThisLine := ReservEntry."Qty. to Handle (Base)" - NewQtyBase;
      QtyToInvoiceThisLine := ReservEntry."Qty. to Invoice (Base)" - NewQtyBase;

      ReservEntry.VALIDATE("Quantity (Base)",NewQtyBase);

      IF SignFactor * QtyToHandleThisLine < 0 THEN BEGIN
        ReservEntry.VALIDATE("Qty. to Handle (Base)",ReservEntry."Qty. to Handle (Base)" + QtyToHandleThisLine);
        QtyToHandleThisLine := 0;
      END;

      IF SignFactor * QtyToInvoiceThisLine < 0 THEN BEGIN
        ReservEntry.VALIDATE("Qty. to Invoice (Base)",ReservEntry."Qty. to Invoice (Base)" + QtyToInvoiceThisLine);
        QtyToInvoiceThisLine := 0;
      END;

      QuantityIsValidated := TRUE;

      SurplusEntry := ReservEntry;
      SurplusEntry."Reservation Status" := SurplusEntry."Reservation Status"::Surplus;
      IF SurplusEntry.Positive THEN
        SurplusEntry."Shipment Date" := 0D
      ELSE
        SurplusEntry."Expected Receipt Date" := 0D;
      CreateReservEntry2.SetQtyToHandleAndInvoice(QtyToHandleThisLine,QtyToInvoiceThisLine);
      CreateReservEntry2.CreateRemainingReservEntry(SurplusEntry,QtyToSave);
    END;

    BEGIN
    END.
  }
}
