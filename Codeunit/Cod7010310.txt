OBJECT Codeunit 7010310 Funciones basicas
{
  OBJECT-PROPERTIES
  {
    Date=12/02/15;
    Time=15:12:12;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            BorraTemporales
          END;

  }
  CODE
  {
    VAR
      Text50001@1103355001 : TextConst 'ESP=VEHICULO';
      Text50002@1103355002 : TextConst 'ESP=MANUAL';
      Text50003@1103355003 : TextConst 'ESP=SmtpMailX Element';
      Text50004@1103355004 : TextConst 'ESP=.pdf';
      Text50005@1103355005 : TextConst 'ESP=TMP';
      Text50006@1103355006 : TextConst 'ESP=TEMP';
      Text000@1100244004 : TextConst 'ESP=Base';
      Text001@1100244005 : TextConst 'ESP=Suplemento';
      Text002@1100244006 : TextConst 'ESP=Manual';
      Text003@1100244007 : TextConst 'ESP=Extra';
      Text004@1100244008 : TextConst 'ESP=Ajuste';
      Text005@1100244009 : TextConst 'ESP=Comodines';
      Text006@1100244010 : TextConst 'ESP=TOTAL';
      wVentana@1100244000 : Dialog;
      wActual@1100244001 : Integer;
      wTotal@1100244002 : Integer;
      Text007@1100244003 : TextConst 'ESP=Creando temporal consulta coste/ingreso @1@@@@@@@@@@@@@';
      Text008@1100244011 : TextConst 'ESP=Debe facturar la prefactura antes de poder enviarla por correo electronico.';
      Text009@1100244012 : TextConst 'ESP=Impresion incorrecta.';
      Text011@1103350000 : TextConst 'ESP=Error en el envio de correo.';
      Text012@1103350001 : TextConst 'ESP=Correo enviado';
      Text013@1103350002 : TextConst 'ESP=SELECCIONAR RANGO DE PLAZAS\';
      Text014@1103350003 : TextConst 'ESP=DESDE N§ PLAZAS #1##\';
      Text015@1103350004 : TextConst 'ESP=HASTA N§ PLAZAS #2##\';
      Text016@1103350005 : TextConst 'ESP=AGRUPA SERVICIO X HORA #3#';
      Text017@1103350006 : TextConst 'ESP=Cuando se selecciona la agrupacion x hora solo se puede pedir un cliente cada vez';
      Text018@1103350007 : TextConst 'ESP=No se encuentra listado';
      rPar@1103350008 : Record 7010311;
      Text019@1103350009 : TextConst 'ESP=La ficha de contacto tiene que ser de tipo Persona';
      Text020@1100253000 : TextConst 'ESP=Generando vista con los datos @1@@@@@@@@@@@@@';
      cFactCli@1100253001 : Codeunit 7010406;
      Text021@1100253002 : TextConst 'ESP=Desea Realmente enviar %3 %1 a:\%2';
      Text022@1100253003 : TextConst 'ESP=Prefactura';
      wDialog@1100253004 : OCX "{F9043C85-F6F2-101A-A3C9-08002B2F49FB}:'Microsoft Common Dialog Control, version 6.0'";
      wWApp@1100253008 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{000209FF-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Application";
      wWSel@1100253007 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020975-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Selection";
      wWDoc@1100253006 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";
      wWords@1100253005 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{0002095C-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Words";
      Text023@1100253009 : TextConst 'ESP=No existe el documento\%1';
      wEject@1100253010 : Automation "{F2E81D45-8445-48CD-9D69-D9DE9DC6C4C3} 1.0:{55624511-2E4C-414D-BFAA-1F6BB129F4D5}:Unknown Automation Server.Unknown Class";
      Text024@1103355000 : TextConst 'ESP=¨Desea filtrar por un touroperador en concreto?';

    PROCEDURE "Garajes restringidos"@2() : Code[200];
    VAR
      rGxP@1100244000 : Record 7010424;
      rUsu@1100244001 : Record 7010420;
      rPer@1100244002 : Record 7010423;
      vGarajes@1100244003 : Code[200];
    BEGIN
      // Garajes_restringidos

      vGarajes := '';
      IF (NOT rUsu.GET(USERID)) THEN
        EXIT(vGarajes);

      IF rUsu."Perfil Transfer" = '' THEN
        EXIT(vGarajes);

      IF NOT rPer.GET(rUsu."Perfil Transfer") THEN
        EXIT(vGarajes);

      rGxP.SETRANGE(rGxP.Perfil,rUsu."Perfil Transfer");
      IF rGxP.FINDSET THEN
        REPEAT
          IF vGarajes = '' THEN
            vGarajes := '<>' + rGxP.Garaje
          ELSE
            vGarajes := vGarajes + '&<>' + rGxP.Garaje;
        UNTIL rGxP.NEXT = 0;

      EXIT(vGarajes);
    END;

    PROCEDURE ObtenerGaraje@5() : Code[10];
    VAR
      rPar@1100244000 : Record 7010311;
      rUsu@1100244001 : Record 7010420;
      Result@1100244002 : Code[10];
    BEGIN
      // ObtenerGaraje

      Result := '';

      rPar.FINDFIRST;
      rUsu.GET(USERID);
      IF (rUsu."Garaje de trabajo" <> '') AND (rUsu."Garaje de trabajo" <> rPar."Todos los garajes") THEN
        Result := rUsu."Garaje de trabajo";
      EXIT(Result);
    END;

    PROCEDURE CambiarGaraje@6();
    BEGIN
      // CambiarGaraje();
      FORM.RUNMODAL(7010364);
    END;

    PROCEDURE fdom@7(pFecha@1100244000 : Date;pMeses@1100244001 : Integer) : Date;
    VAR
      Result@1100244002 : Date;
      vFactor@1100244003 : Integer;
      i@1100244004 : Integer;
    BEGIN
      // fdom(pFecha,pMeses);
      // Calculo del primer d¡a del mes, dada una fecha y un numero de meses, que puede ser en
      // positivo o en negativo.
      //Ejemplo1: fdom(311299D,-2) -> Result: 311099D
      //Ejemplo2: fdom(311099D,2)  -> Result: 311299D

      Result := pFecha;

      IF pMeses > 0 THEN
        vFactor := 32
      ELSE
        vFactor := -1;


      FOR i:=0 TO ABS(pMeses) DO BEGIN

        //Obtenemos el primer d¡a del mes, de la fecha que hemos pasado por parametro.
        Result := DMY2DATE(1, DATE2DMY(Result,2), DATE2DMY(Result,3));

        IF i <> ABS(pMeses) THEN
          Result := Result + vFactor;

      END;

      EXIT(Result);
    END;

    PROCEDURE ldom@8(pFecha@1100244000 : Date;pMeses@1100244001 : Integer) : Date;
    VAR
      Result@1100244002 : Date;
    BEGIN
      //ldom(pFecha,pMeses);
      //Calculo del £ltimo d¡a del mes, dada una fecha y un numero de meses, que puede ser en
      //positivo o en negativo.
      //Ejemplo1: ldom(311299D,-2) -> Result: 011099D
      //Ejemplo2: ldom(311099D,2)  -> Result: 011299D

      Result := fdom(pFecha,pMeses+1);
      Result := Result - 1;
      EXIT(Result);
    END;

    PROCEDURE TestRestringido@10(pFiltro@1100244000 : Code[10]);
    VAR
      rPar@1100244001 : Record 7010311;
      vFiltro@1100244002 : Code[10];
      GARAJE_RESTRINGIDO@1100244003 : TextConst 'ESP=Garaje Restringido';
    BEGIN
      rPar.FINDFIRST;
      vFiltro := pFiltro;
      IF pFiltro='' THEN
       vFiltro := rPar."Todos los garajes";

      IF STRPOS("Garajes restringidos",vFiltro)  > 0 THEN
        ERROR(GARAJE_RESTRINGIDO);
    END;

    PROCEDURE TestGarajeTodos@11(pGaraje@1100244000 : Code[10]);
    VAR
      rPar@1100244001 : Record 7010311;
      NO_VALE_GARAJE_TODOS@1100244002 : TextConst 'ESP=No podemos especificar este garaje';
    BEGIN
      rPar.FINDFIRST;
      IF pGaraje = rPar."Todos los garajes" THEN
        ERROR(NO_VALE_GARAJE_TODOS);
    END;

    PROCEDURE GarajesNoTrabajo@12() : Code[200];
    VAR
      rUsu@1100244000 : Record 7010420;
      rGar@1100244001 : Record 7010310;
      rPar@1100244002 : Record 7010311;
      vGarajes@1100244003 : Code[200];
      vAux@1100244004 : Code[200];
    BEGIN
      vGarajes:="Garajes restringidos";

      IF (NOT rUsu.GET(USERID)) THEN
        EXIT(vGarajes);

      rPar.FINDFIRST;

      IF rUsu."Garaje de trabajo"<>rPar."Todos los garajes" THEN BEGIN
        //En este punto se podr¡a aplicar lo de SOLO GARAJE DE TRABAJO.
        rGar.RESET;
        IF rGar.FINDSET THEN REPEAT
          IF rUsu."Garaje de trabajo"<>rGar.Garaje THEN
            IF vGarajes = '' THEN
              vGarajes := '<>'+rGar.Garaje
            ELSE
              vGarajes := vGarajes+'&<>'+rGar.Garaje;
        UNTIL rGar.NEXT=0;
      END;

      EXIT (vGarajes);
    END;

    PROCEDURE Tipo_Lineas_Estadisticas@16() : Text[50];
    VAR
      rPar@1100244000 : Record 7010311;
      vResult@1100244001 : Text[50];
    BEGIN
      rPar.FINDFIRST;
      vResult := '';

      IF rPar."Tipo Base" THEN
        vResult := vResult + '|'+Text000;

      IF rPar."Tipo Suplemento" <> rPar."Tipo Suplemento"::Ninguno THEN
        vResult := vResult + '|'+Text001;

      IF rPar."Tipo Manual" THEN
        vResult := vResult + '|'+Text002;

      IF rPar."Tipo Extra" THEN
        vResult := vResult + '|'+Text003;

      IF rPar."Tipo Ajuste" THEN
        vResult := vResult + '|'+Text004;


      IF STRLEN(vResult) >= 2 THEN
        vResult := COPYSTR(vResult,2);

      EXIT(vResult);
    END;

    PROCEDURE MaletasyEstadisticas@13() : Text[50];
    VAR
      rPar@1100244000 : Record 7010311;
      vResult@1100244001 : Text[50];
    BEGIN
      //TestDescarteMaletas
      rPar.FINDFIRST;
      vResult := '';

      //Basta considerar estas dos porque si el valor es TODOS o NINGUNO ya hemos ajustado el
      //filtro en la funci¢n Tipo_Linea_Estadisticas.
      IF rPar."Tipo Suplemento" = rPar."Tipo Suplemento"::"Todos menos las maletas" THEN
        vResult := '<>'+rPar."Codigo Maletas";

      EXIT(vResult);
    END;

    PROCEDURE TestRestriccion@17(pRest@1100244000 : Code[14]) : Boolean;
    VAR
      rUsu@1100244001 : Record 7010420;
      rAcc@1100244002 : Record 7010422;
      vResult@1100244003 : Boolean;
    BEGIN
      vResult := FALSE;
      IF rUsu.GET(USERID) THEN
        IF rAcc.GET(rUsu."Perfil Transfer", pRest) THEN
          vResult := TRUE;

      EXIT(vResult);
    END;

    PROCEDURE DLaDESinRedondeo@24(par_importe@1100244000 : Decimal;par_CodDivisa@1100244001 : Code[10];par_Fecha@1100244002 : Date) : Decimal;
    VAR
      rDiv@1100244003 : Record 4;
    BEGIN
      // DLaDESinRedondeo.
      // Esta funci¢n se llama desde los informes para no perder precisi¢n en los acumulados.
      IF par_CodDivisa = '' THEN
        EXIT(par_importe);

      IF rDiv.GET(par_CodDivisa) THEN BEGIN
        IF par_Fecha = 0D THEN
          EXIT(0);
        EXIT(ImpCambioDLaDE(par_Fecha, par_CodDivisa, par_importe, TipoCambio(par_Fecha, par_CodDivisa)));
      END;

      EXIT(0);
    END;

    PROCEDURE CambiarDLaDE@18(par_importe@1100244000 : Decimal;par_CodDivisa@1100244001 : Code[10];par_Fecha@1100244002 : Date) : Decimal;
    VAR
      rDiv@1100244003 : Record 4;
    BEGIN
      // CambiarDLaDE
      //
      IF par_CodDivisa = '' THEN
        EXIT(par_importe);

      IF rDiv.GET(par_CodDivisa) THEN BEGIN
        IF par_Fecha = 0D THEN
          EXIT(0);
        EXIT(ROUND(ImpCambioDLaDE(par_Fecha, par_CodDivisa, par_importe, TipoCambio(par_Fecha, par_CodDivisa)),
             rDiv."Amount Rounding Precision"));
      END;

      EXIT(0);
    END;

    PROCEDURE ImpCambioDLaDE@19(Fecha@1100244000 : Date;CodDivisa@1100244001 : Code[10];Importe@1100244002 : Decimal;Factor@1100244003 : Decimal) : Decimal;
    VAR
      rTipCam@1100244004 : Record 330;
      TipoCambDivisa2@1100244005 : ARRAY [2] OF Record 330;
      ImpTipoCambio@1100244006 : Decimal;
      CodDivisaRelac@1100244007 : Code[10];
      ImpFijoTipoCambio@1100244008 : Option;
      FactorDivisa@1100244009 : Decimal;
      UtilAjusImps@1100244010 : Boolean;
      FechaInicial2@1100244011 : Date;
      CodDivisa2@1100244012 : Code[10];
      Fecha2@1100244013 : Date;
      ImpTipCambioRelac@1100244014 : Decimal;
    BEGIN
      // ImpCambioDLaDE
      //
      IF CodDivisa = '' THEN
        EXIT(Importe);
      IF NOT BuscarDivisa(Fecha,CodDivisa,1, rTipCam, TipoCambDivisa2) THEN
        EXIT(0);

      rTipCam.TESTFIELD("Exchange Rate Amount");
      rTipCam.TESTFIELD("Relational Exch. Rate Amount");
      IF rTipCam."Relational Currency Code" = '' THEN
        IF rTipCam."Fix Exchange Rate Amount" = rTipCam."Fix Exchange Rate Amount"::Both THEN
          Importe := (Importe / rTipCam."Relational Exch. Rate Amount") * rTipCam."Exchange Rate Amount"
        ELSE
          Importe := Importe * Factor
      ELSE BEGIN
        ImpTipCambioRelac := rTipCam."Relational Exch. Rate Amount";
        ImpTipoCambio := rTipCam."Exchange Rate Amount";
        CodDivisaRelac := rTipCam."Relational Currency Code";
        ImpFijoTipoCambio := rTipCam."Fix Exchange Rate Amount";
        IF NOT BuscarDivisa(Fecha,CodDivisaRelac,2, rTipCam, TipoCambDivisa2) THEN
          EXIT(0);

        rTipCam.TESTFIELD("Exchange Rate Amount");
        rTipCam.TESTFIELD("Relational Exch. Rate Amount");
        CASE ImpFijoTipoCambio OF
          rTipCam."Fix Exchange Rate Amount"::"Relational Currency" :
            ImpTipoCambio :=
              (Factor * ImpTipCambioRelac * rTipCam."Relational Exch. Rate Amount") /
              rTipCam."Exchange Rate Amount";
          rTipCam."Fix Exchange Rate Amount"::Currency :
              ImpTipCambioRelac :=
                (ImpTipoCambio * rTipCam."Exchange Rate Amount") /
                (Factor * rTipCam."Relational Exch. Rate Amount");
          rTipCam."Fix Exchange Rate Amount"::Both :
            CASE rTipCam."Fix Exchange Rate Amount" OF
              rTipCam."Fix Exchange Rate Amount"::"Relational Currency" :
                rTipCam."Exchange Rate Amount" :=
                  (Factor * ImpTipCambioRelac * rTipCam."Relational Exch. Rate Amount") /
                  ImpTipoCambio;
              rTipCam."Fix Exchange Rate Amount"::Currency :
                rTipCam."Relational Exch. Rate Amount" :=
                  (ImpTipoCambio * rTipCam."Exchange Rate Amount") /
                  (Factor * ImpTipCambioRelac);
            END;
        END;
        Importe := (Importe / ImpTipCambioRelac) * ImpTipoCambio;
        Importe := (Importe / rTipCam."Relational Exch. Rate Amount") * rTipCam."Exchange Rate Amount";
      END;
      EXIT(Importe);
    END;

    PROCEDURE TipoCambio@21(Fecha@1100244000 : Date;CodDivisa@1100244001 : Code[10]) : Decimal;
    VAR
      ImpTipCambioRelac@1100244002 : Decimal;
      ImpTipoCambio@1100244003 : Decimal;
      CodDivisaRelac@1100244004 : Code[10];
      FactorDivisa@1100244005 : Decimal;
      rTipCam@1100244006 : Record 330;
      TipoCambDivisa2@1100244007 : ARRAY [2] OF Record 330;
    BEGIN
      // TipoCambio
      //
      IF CodDivisa = '' THEN
        EXIT(1);

      IF NOT BuscarDivisa(Fecha,CodDivisa,1, rTipCam, TipoCambDivisa2) THEN
        EXIT(0);

      rTipCam.TESTFIELD("Exchange Rate Amount");
      rTipCam.TESTFIELD("Relational Exch. Rate Amount");

      ImpTipCambioRelac := rTipCam."Relational Exch. Rate Amount";
      ImpTipoCambio := rTipCam."Exchange Rate Amount";
      CodDivisaRelac := rTipCam."Relational Currency Code";
      IF rTipCam."Relational Currency Code" = '' THEN
        FactorDivisa := rTipCam."Exchange Rate Amount" / rTipCam."Relational Exch. Rate Amount"
      ELSE BEGIN
        IF NOT BuscarDivisa(Fecha,CodDivisaRelac,2, rTipCam, TipoCambDivisa2) THEN
        rTipCam.TESTFIELD("Exchange Rate Amount");
        rTipCam.TESTFIELD("Relational Exch. Rate Amount");
        FactorDivisa := (ImpTipoCambio * rTipCam."Exchange Rate Amount") /
                        (ImpTipCambioRelac * rTipCam."Relational Exch. Rate Amount");
      END;
      EXIT(FactorDivisa);
    END;

    PROCEDURE BuscarDivisa@22(Fecha@1100244000 : Date;CodDivisa@1100244001 : Code[10];NoCache@1100244002 : Integer;VAR Par_TipCam@1100244003 : Record 330;VAR Par_TipoCambDivisa2@1100244004 : ARRAY [2] OF Record 330) : Boolean;
    VAR
      FechaInicial2@1100244005 : Date;
      CodDivisa2@1100244006 : ARRAY [2] OF Code[10];
      Fecha2@1100244007 : ARRAY [2] OF Date;
    BEGIN
      // BuscarDivisa
      //
      IF (CodDivisa2[NoCache] = CodDivisa) AND (Fecha2[NoCache] = Fecha) THEN
        Par_TipCam := Par_TipoCambDivisa2[NoCache]
      ELSE BEGIN
        Par_TipoCambDivisa2[NoCache].SETRANGE("Currency Code",CodDivisa);
        Par_TipoCambDivisa2[NoCache].SETRANGE("Starting Date",0D,Fecha);
        IF NOT Par_TipoCambDivisa2[NoCache].FINDLAST THEN
          EXIT(FALSE);
        Par_TipCam := Par_TipoCambDivisa2[NoCache];
        CodDivisa2[NoCache] := CodDivisa;
        Fecha2[NoCache] := Fecha;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE NotificarCambioDivisa@20(pDivisa@1100244000 : Code[10]);
    VAR
      rCT@1100244001 : Record 7010420;
    BEGIN
      //NotificarCambioDivisa(pDivisa);
      //Apuntamos que en las estadisticas el usuario USERID va a usar la divisa pDivisa.
      //Esta operacion se hace para la navegaci¢n por coste-ingreso, para que los importes se
      //ajusten a la divisa seleccionada.

      rCT.RESET;
      IF NOT rCT.GET(USERID) THEN BEGIN
        rCT.INIT;
        rCT.Usuario := USERID;
        rCT."C¢d. Divisa" := pDivisa;
        rCT.INSERT;
      END
      ELSE BEGIN
        rCT."C¢d. Divisa" := pDivisa;
        rCT.MODIFY;
      END;
    END;

    PROCEDURE ObtenerPrecisionDivisa@23(pDivisa@1100244000 : Code[10]) : Decimal;
    VAR
      rConf@1100244001 : Record 98;
      rDiv@1100244002 : Record 4;
      Result@1100244003 : Decimal;
    BEGIN
      Result := 1;
      IF pDivisa = '' THEN BEGIN
        rConf.FINDFIRST;
        Result := rConf."Amount Rounding Precision";
      END
      ELSE BEGIN
        IF rDiv.GET(pDivisa) THEN
          Result := rDiv."Amount Rounding Precision";
      END;
      EXIT(Result);
    END;

    PROCEDURE CambiarFechasContratoVenta@9(VAR prPreContrVenta@1100244000 : Record 7010405);
    VAR
      lfCambFecha@1100244001 : Form 7010435;
      lrCondTemp@1100244002 : Record 7010420;
      lrConv@1100244003 : Record 7010403;
      err1@1100244004 : TextConst 'ESP=La fecha desde esta fuera de los limites del contrato que son desde %1 hasta %2';
      err2@1100244005 : TextConst 'ESP=La fecha hasta esta fuera de los limites del contrato que son desde %1 hasta %2';
      lrPreContrVenta2@1100244006 : Record 7010405;
    BEGIN
      // CambiarFechasContratoVenta
      // Cambia todas las fechas desde y fechas hasta, de las lineas de precios del contrato de venta
      // He utilizado los campos "Fecha Factura" y "Fecha Registro Actividad" como
      // Text005 para un uso distinto al cual fueron pensados inicialmente
      // concretamente para las fechas desde y fecha hasta de origen

      lrCondTemp.SETRANGE(Usuario , USERID);
      IF lrCondTemp.FINDFIRST THEN
        lrCondTemp.DELETEALL;

      lrCondTemp.INIT;
      lrCondTemp.Usuario                    := USERID;
      lrCondTemp."Fecha Factura"            := prPreContrVenta."Fecha desde";
      lrCondTemp."Fecha Registro Actividad" := prPreContrVenta."Fecha hasta";
      lrCondTemp.INSERT;
      COMMIT;

      //lfCambFecha.SETTABLEVIEW(lrCondTemp);
      //IF lfCambFecha.RUNMODAL = ACTION::OK THEN BEGIN
      IF FORM.RUNMODAL( 7010435 ,lrCondTemp) = ACTION::OK THEN BEGIN
        lrCondTemp.GET (USERID);


        // Comprueba que las fechas pasadas sean correctas --------------------
        lrConv.GET(prPreContrVenta.Garaje , prPreContrVenta."N§ Contrato");
        IF lrCondTemp."Fecha desde" <> 0D THEN BEGIN
          IF (lrCondTemp."Fecha desde" < lrConv."Fecha inicio contrato") OR
                       (lrCondTemp."Fecha desde" > lrConv."Fecha final contrato") THEN BEGIN
            ERROR(err1, lrConv."Fecha inicio contrato", lrConv."Fecha final contrato");
          END;
        END;
        IF lrCondTemp."Fecha hasta" <> 0D THEN BEGIN
          IF (lrCondTemp."Fecha hasta" < lrConv."Fecha inicio contrato") OR
                       (lrCondTemp."Fecha hasta" > lrConv."Fecha final contrato") THEN BEGIN
            ERROR(err2, lrConv."Fecha inicio contrato", lrConv."Fecha final contrato");
          END;
        END;
        //------------------------------------------------------------


        lrPreContrVenta2.COPY(prPreContrVenta);
        IF lrPreContrVenta2.FINDSET(TRUE) THEN
          REPEAT
            IF (lrPreContrVenta2."Fecha hasta" = lrCondTemp."Fecha Registro Actividad")
                                             AND (lrCondTemp."Fecha hasta" <> 0D) THEN
              lrPreContrVenta2.VALIDATE ("Fecha hasta" , lrCondTemp."Fecha hasta");
            IF (lrPreContrVenta2."Fecha desde" = lrCondTemp."Fecha Factura")
                                             AND (lrCondTemp."Fecha desde" <> 0D) THEN
              lrPreContrVenta2.VALIDATE ("Fecha desde" , lrCondTemp."Fecha desde");
            lrPreContrVenta2.MODIFY(TRUE);
        UNTIL lrPreContrVenta2.NEXT = 0;
        lrPreContrVenta2.GET(prPreContrVenta.Garaje, prPreContrVenta."N§ Contrato",
                             prPreContrVenta."Tipo precio", prPreContrVenta.Orden);
        prPreContrVenta.COPY (lrPreContrVenta2);
      END;
    END;

    PROCEDURE CambiarFechasContratoCompra@26(VAR prPreContrCompra@1100244000 : Record 7010409);
    VAR
      lfCambFecha@1100244001 : Form 7010435;
      lrCondTemp@1100244002 : Record 7010420;
      lrConComp@1100244003 : Record 7010408;
      err1@1100244004 : TextConst 'ESP=La fecha desde esta fuera de los limites del contrato que son desde %1 hasta %2';
      err2@1100244005 : TextConst 'ESP=La fecha hasta esta fuera de los limites del contrato que son desde %1 hasta %2';
      lrPreContrCompra2@1100244006 : Record 7010409;
    BEGIN
      // CambiarFechasContratoCompra
      // Cambia todas las fechas desde y fechas hasta, de las lineas de precios del contrato de compra
      // He utilizado los campos "Fecha Factura" y "Fecha Registro Actividad" como
      // Text005 para un uso distinto al cual fueron pensados inicialmente
      // concretamente para las fechas desde y fecha hasta de origen

      lrCondTemp.SETRANGE(Usuario , USERID);
      IF lrCondTemp.FINDFIRST THEN
        lrCondTemp.DELETEALL;

      lrCondTemp.INIT;
      lrCondTemp.Usuario                    := USERID;
      lrCondTemp."Fecha Factura"            := prPreContrCompra."Fecha desde";
      lrCondTemp."Fecha Registro Actividad" := prPreContrCompra."Fecha hasta";
      lrCondTemp.INSERT;
      COMMIT;

      //lfCambFecha.SETTABLEVIEW(lrCondTemp);
      //IF lfCambFecha.RUNMODAL = ACTION::OK THEN BEGIN
      IF FORM.RUNMODAL( 7010435 ,lrCondTemp) = ACTION::OK THEN BEGIN
        lrCondTemp.GET (USERID);


        // Comprueba que las fechas pasadas sean correctas --------------------
        lrConComp.GET(prPreContrCompra.Garaje , prPreContrCompra."N§ Contrato");
        IF lrCondTemp."Fecha desde" <> 0D THEN BEGIN
          IF (lrCondTemp."Fecha desde" < lrConComp."Fecha inicio contrato") OR
                       (lrCondTemp."Fecha desde" > lrConComp."Fecha final contrato") THEN BEGIN
            ERROR(err1, lrConComp."Fecha inicio contrato", lrConComp."Fecha final contrato");
          END;
        END;
        IF lrCondTemp."Fecha hasta" <> 0D THEN BEGIN
          IF (lrCondTemp."Fecha hasta" < lrConComp."Fecha inicio contrato") OR
                       (lrCondTemp."Fecha hasta" > lrConComp."Fecha final contrato") THEN BEGIN
            ERROR(err2, lrConComp."Fecha inicio contrato", lrConComp."Fecha final contrato");
          END;
        END;
        //------------------------------------------------------------


        lrPreContrCompra2.COPY (prPreContrCompra);
        IF lrPreContrCompra2.FINDSET(TRUE) THEN
          REPEAT
            IF (lrPreContrCompra2."Fecha hasta" = lrCondTemp."Fecha Registro Actividad")
                                             AND (lrCondTemp."Fecha hasta" <> 0D) THEN
              lrPreContrCompra2.VALIDATE ("Fecha hasta" , lrCondTemp."Fecha hasta");
            IF (lrPreContrCompra2."Fecha desde" = lrCondTemp."Fecha Factura")
                                             AND (lrCondTemp."Fecha desde" <> 0D) THEN
              lrPreContrCompra2.VALIDATE ("Fecha desde" , lrCondTemp."Fecha desde");
            lrPreContrCompra2.MODIFY(TRUE);
          UNTIL lrPreContrCompra2.NEXT = 0;
         lrPreContrCompra2.GET(prPreContrCompra.Garaje, prPreContrCompra."N§ Contrato", prPreContrCompra."Tipo precio",
                                                                                               prPreContrCompra.Orden);
         prPreContrCompra.COPY(lrPreContrCompra2);
      END;
    END;

    PROCEDURE CreaTemporalConsulta@1(VAR prParte@1100244000 : Record 7010360);
    VAR
      lrPar@1103350004 : Record 7010311;
      lrTmpCI@1100244001 : TEMPORARY Record 7010414;
      lrTemp@1100244002 : TEMPORARY Record 7010427;
      lrTemp2@1100244003 : Record 7010427;
      lrTmpDsgl@1103355004 : TEMPORARY Record 7010427;
      lrToPar@1100244004 : Record 7010365;
      lrCli@1103350008 : Record 18;
      lrSerPar@1103355000 : Record 7010359;
      lrTempZon@1103355003 : TEMPORARY Record 7010314;
      lfConsulta@1100244005 : Form 7010384;
      lwVentana@1103350000 : Dialog;
      lwParte@1100244006 : Code[10];
      lwConductorAnt@1103350009 : Code[10];
      lwPlazasDesde@1103350001 : Integer;
      lwPlazasHasta@1103350002 : Integer;
      lwAdInvitadosParte@1103350006 : Integer;
      lwNiInvitadosParte@1103350005 : Integer;
      lwSumaServicio@1103350011 : Integer;
      lwClaveTemporal@1103350012 : Integer;
      lwPlazasParte@1103350003 : Decimal;
      lwAgrupaServicioHora@1103350007 : Boolean;
      lwHoraAnt@1103350010 : Time;
      lwCont@1103355001 : Integer;
      lwPrim@1103355002 : Boolean;
      lrTTOO@1103355007 : Record 7010312;
      lfTTOO@1103355006 : Form 7010326;
      lwTTOO@1103355005 : Code[10];
    BEGIN
      // CreaTemporalConsulta
      //

      // AJF - 18/06/08
      // Movidos las ventanas de input al principio de la funcion y a¤adido
      // form para pedir TTOO
      lwVentana.OPEN(Text013 +
                     '\' +
                     Text014 +
                     Text015 +
                     '\' +
                     Text016);

      lwVentana.INPUT(1, lwPlazasDesde);
      lwVentana.INPUT(2, lwPlazasHasta);
      lwVentana.INPUT(3, lwAgrupaServicioHora);
      lwVentana.CLOSE;

      IF ( lwPlazasDesde = 0 ) OR ( lwPlazasHasta = 0 ) THEN
        EXIT;

      IF CONFIRM(Text024, FALSE) THEN BEGIN
        lfTTOO.LOOKUPMODE := TRUE;
        IF NOT (lfTTOO.RUNMODAL IN [ACTION::LookupOK, ACTION::OK]) THEN
          EXIT;
        lfTTOO.GETRECORD(lrTTOO);
        lwTTOO := lrTTOO.Codigo;
      END;

      // AJF fin


      lrTemp2.RESET;
      lrTemp2.SETCURRENTKEY(Usuario,
                           Orden,
                           "Tipo registro",
                           Codigo);
      lrTemp2.SETRANGE(Usuario, USERID);
      IF lrTemp2.FINDFIRST THEN
        lrTemp2.DELETEALL;

      // AJS 06.10.2005
      // Para trabajar con mas de un usuario hay que obtener el ultimo ID global

      lrTemp2.RESET;
      lrTemp2.ASCENDING(FALSE);
      IF lrTemp2.FINDFIRST THEN
        lwClaveTemporal := lrTemp2.Id
      ELSE
        lwClaveTemporal := 0;


      // AJS 27.09.2004
      // Posibilidad de filtrar por rango de plazas, como no hay un campo en Parte que sume Adultos + Ni¤os lo hago por
      // codigo dentro del IF

      // AJS 29.11.2004
      // Para el Touroperador ALLSUN en Transunion se crea un parte de trabajo para cada vuelo aunque luego operativamente se hagan en el
      // mismo servicio, para que luego esto no desvirtue esta estadistica, he incluido un boolean que cuando este marcado controlara
      // que los servicios que se hacen con el mismo chofer y tengan un margen menor de una hora cuenten como uno

      lrPar.FINDFIRST;

      // AJS 29.11.2004
      // Si se agrupan los servicios por hora, restrinjo que solo se pueda hacer para un cliente y tengo que cambiar la clave por una
      // que orden por conductor y hora para controlar los saltos

      IF lwAgrupaServicioHora THEN BEGIN
        lrCli.RESET;
        prParte.COPYFILTER(Cliente, lrCli."No.");
        IF lrCli.COUNT <> 1 THEN
          ERROR(Text017);

        prParte.SETCURRENTKEY(Fecha,
                              "Cod Conductor",
                              "Dia siguiente",
                              "Hora inicio");
      END;

      prParte.SETRANGE(Facturable, TRUE);
      IF prParte.FINDSET THEN BEGIN
        wVentana.OPEN(Text007);
        wActual := 0;
        wTotal := prParte.COUNTAPPROX;

        // -----------------------------------------------------------------
        // Creamos un registro para guardar el filtro de fecha y de plazas
        // -----------------------------------------------------------------

        lrTemp.INIT;
        lrTemp."Tipo registro" := lrTemp."Tipo registro"::Filtros;
        lrTemp.Codigo          := '';
        lrTemp.Usuario         := USERID;
        lrTemp."Filtro Fecha"  := prParte.GETFILTER(Fecha);
        lrTemp."Filtro Plazas" := STRSUBSTNO('%1 - %2', lwPlazasDesde, lwPlazasHasta);

        lwClaveTemporal += 1;
        lrTemp.Id := lwClaveTemporal;
        lrTemp.INSERT;

        // AJS 29.11.2004
        // Limpiar las variables de trabajo que conservan el conductor y la hora de inicio del parte anterior para controlar
        // los saltos en caso de que se haya seleccionado agrupar x hora

        lwConductorAnt := '';
        lwHoraAnt      := 235959T;

        REPEAT
          wActual += 1;
          wVentana.UPDATE(1, ROUND(wActual / wTotal * 10000, 1));

          prParte.CALCFIELDS("Adultos transportados", "Ni¤os transportados");

          lwPlazasParte := prParte."Adultos transportados" + prParte."Ni¤os transportados";
          IF (lwPlazasDesde <= lwPlazasParte) AND (lwPlazasParte <= lwPlazasHasta) THEN BEGIN

            // JPT 17/10/06 Ahora unificamos las tres tablas en un temporal
            //CreaTempCI(lrTmpCI, prParte."N§ Parte", TRUE);
            // AJF 18/06/08 A¤ado el parametro para que filtre la lineas por ttoo.
            CreaTempCI(lrTmpCI, prParte."N§ Parte", TRUE, lwTTOO);
            IF lrTmpCI.FINDSET THEN BEGIN
              CLEAR(lwParte);
              InvitadosParteIngreso(prParte."N§ Parte", lwAdInvitadosParte, lwNiInvitadosParte);

              // AJS 29.11.2004
              // Si se quiere agrupar x hora solo se cuenta como un servicio si se cambia de conductor o hay mas de una de
              // diferencia entre las horas de inicio

              IF lwAgrupaServicioHora THEN BEGIN
                IF (lwConductorAnt <> prParte."Cod Conductor") OR ( (prParte."Hora inicio" - lwHoraAnt ) > 3600000) THEN
                  lwSumaServicio := 1
                ELSE
                  lwSumaServicio := 0;
              END
              ELSE
                lwSumaServicio := 1;

              REPEAT
                // -----------------------------------
                // ----  Registro por Tipo de servicio
                // -----------------------------------
                lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::"Tipo servicio");
                lrTemp.SETRANGE(Codigo         , prParte."Tipo Servicio");
                IF NOT lrTemp.FINDFIRST THEN BEGIN
                  lrTemp.INIT;
                  lrTemp."Tipo registro" := lrTemp."Tipo registro"::"Tipo servicio";
                  lrTemp.Codigo          := prParte."Tipo Servicio";
                  lrTemp.Usuario         := USERID;

                  lwClaveTemporal += 1;
                  lrTemp.Id := lwClaveTemporal;
                  lrTemp.INSERT;
                END;

                // ----  Solo sumaremos un servicio por parte

                IF lwParte <> lrTmpCI."N§ Parte" THEN BEGIN
                  lrTemp.Servicios += lwSumaServicio;

                  lrTemp."Adultos invitados" += lwAdInvitadosParte;
                  lrTemp."Ni¤os invitados" += lwNiInvitadosParte;
                END;

                // ---- Sumar el coste y el ingreso por separado

                IF lrTmpCI.Concepto IN [lrTmpCI.Concepto::Ingreso, lrTmpCI.Concepto::Produccion] THEN BEGIN

                  // ----  Solo sumaremos los paxes para las lineas de tipo Base o Manual, separando por adulto y ni¤o

                  CASE lrTmpCI."Tipo linea" OF
                    lrTmpCI."Tipo linea"::Base:
                    BEGIN
                      lrTemp.Pasaje += lrTmpCI."Pax Transportados";
                      IF (lrTmpCI."Tipo elemento" = lrPar."Codigo Adulto") OR (lrTmpCI."Tipo elemento" = Text50001) OR
                         (lrTmpCI."Tipo elemento" = Text50002) THEN
                        lrTemp.Adultos += lrTmpCI."Pax Transportados"
                      ELSE
                        lrTemp.Ni¤os += lrTmpCI."Pax Transportados";
                    END;
                    lrTmpCI."Tipo linea"::Manual:
                    BEGIN
                      lrTemp.Pasaje  += lrTmpCI."Pax Transportados";
                      lrTemp.Adultos += lrTmpCI."Pax Transportados";
                    END;
                  END;

                  lrTemp.Ingreso += lrTmpCI."Importe sin impuesto DL";
                END
                ELSE
                  lrTemp.Coste += lrTmpCI."Importe sin impuesto DL";
                lrTemp.MODIFY;

                // JPT 04/10/06 Se introduce el desglose por zona precios

                SetDesglose(lrTemp, lrTmpCI, lrTmpDsgl, lwClaveTemporal, lwSumaServicio);

                // -------------------------------------
                // ----  Registro por Codigo de servicio
                // -------------------------------------
                lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::"Codigo Servicio");
                lrTemp.SETRANGE(Codigo         , prParte."Codigo Servicio");
                IF NOT lrTemp.FINDFIRST THEN BEGIN
                  lrTemp.INIT;
                  lrTemp."Tipo registro" := lrTemp."Tipo registro"::"Codigo Servicio";
                  lrTemp.Codigo          := prParte."Codigo Servicio";
                  lrTemp.Usuario         := USERID;

                  lwClaveTemporal += 1;
                  lrTemp.Id := lwClaveTemporal;
                  lrTemp.INSERT;
                END;

                // ----  Solo sumaremos un servicio por parte

                IF lwParte <> lrTmpCI."N§ Parte" THEN BEGIN
                  lrTemp.Servicios += lwSumaServicio;
                  lrTemp."Adultos invitados" += lwAdInvitadosParte;
                  lrTemp."Ni¤os invitados" += lwNiInvitadosParte;
                END;

                // ---- Sumar el coste y el ingreso por separado

                IF lrTmpCI.Concepto IN  [lrTmpCI.Concepto::Ingreso, lrTmpCI.Concepto::Produccion] THEN BEGIN

                  // ----  Solo sumaremos los paxes para las lineas de tipo Base o Manual, separando por adulto y ni¤o

                  CASE lrTmpCI."Tipo linea" OF
                    lrTmpCI."Tipo linea"::Base:
                    BEGIN
                      lrTemp.Pasaje += lrTmpCI."Pax Transportados";
                      IF (lrTmpCI."Tipo elemento" = lrPar."Codigo Adulto") OR (lrTmpCI."Tipo elemento" = Text50001) OR
                         (lrTmpCI."Tipo elemento" = Text50002) THEN
                        lrTemp.Adultos += lrTmpCI."Pax Transportados"
                      ELSE
                        lrTemp.Ni¤os += lrTmpCI."Pax Transportados";
                    END;
                    lrTmpCI."Tipo linea"::Manual:
                    BEGIN
                      lrTemp.Pasaje  += lrTmpCI."Pax Transportados";
                      lrTemp.Adultos += lrTmpCI."Pax Transportados";
                    END;
                  END;

                  lrTemp.Ingreso += lrTmpCI."Importe sin impuesto DL";
                END
                ELSE
                  lrTemp.Coste += lrTmpCI."Importe sin impuesto DL";
                lrTemp.MODIFY;

                // JPT 04/10/06 Se introduce el desglose por zona precios
                SetDesglose(lrTemp, lrTmpCI, lrTmpDsgl, lwClaveTemporal, lwSumaServicio);
                // -------------------------------------
                // ----  Registro por Cliente
                // -------------------------------------

                IF lrTmpCI.Concepto IN [lrTmpCI.Concepto::Ingreso,lrTmpCI.Concepto::Produccion] THEN BEGIN

                  lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::Cliente);
                  lrTemp.SETRANGE(Codigo         , prParte.Cliente);
                  IF NOT lrTemp.FINDFIRST THEN BEGIN
                    lrTemp.INIT;
                    lrTemp."Tipo registro" := lrTemp."Tipo registro"::Cliente;
                    lrTemp.Codigo          := prParte.Cliente;
                    lrTemp.Usuario         := USERID;

                    lwClaveTemporal += 1;
                    lrTemp.Id := lwClaveTemporal;
                    lrTemp.INSERT;
                  END;

                  // ----  Solo sumaremos un servicio por parte

                  IF lwParte <> lrTmpCI."N§ Parte" THEN BEGIN
                    lrTemp.Servicios += lwSumaServicio;
                    lrTemp."Adultos invitados" += lwAdInvitadosParte;
                    lrTemp."Ni¤os invitados" += lwNiInvitadosParte;
                  END;

                  // ----  Solo sumaremos los paxes para las lineas de tipo Base o Manual, separando por adulto y ni¤o

                  CASE lrTmpCI."Tipo linea" OF
                    lrTmpCI."Tipo linea"::Base:
                    BEGIN
                      lrTemp.Pasaje += lrTmpCI."Pax Transportados";
                      IF (lrTmpCI."Tipo elemento" = lrPar."Codigo Adulto") OR (lrTmpCI."Tipo elemento" = Text50001) OR
                         (lrTmpCI."Tipo elemento" = Text50002) THEN
                        lrTemp.Adultos += lrTmpCI."Pax Transportados"
                      ELSE
                        lrTemp.Ni¤os += lrTmpCI."Pax Transportados";
                    END;
                    lrTmpCI."Tipo linea"::Manual:
                    BEGIN
                      lrTemp.Pasaje  += lrTmpCI."Pax Transportados";
                      lrTemp.Adultos += lrTmpCI."Pax Transportados";
                    END;
                  END;

                  // ---- Sumar el ingreso facturado  y el total por separado

                  lrTemp.Ingreso += lrTmpCI."Importe sin impuesto DL";
                  IF lrTmpCI."N§ Factura" <> '' THEN
                    lrTemp."Importe facturado" += lrTmpCI."Importe sin impuesto DL";
                  lrTemp.MODIFY;

                  // JPT 04/10/06 Se introduce el desglose por zona precios
                  SetDesglose(lrTemp, lrTmpCI, lrTmpDsgl, lwClaveTemporal, lwSumaServicio);

                  // -------------------------------------
                  // ----  Registro por Touroperador
                  // -------------------------------------

                  lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::Touroperador);
                  lrTemp.SETRANGE(Codigo         , lrTmpCI.Touroperador);
                  IF NOT lrTemp.FINDFIRST THEN BEGIN
                    lrTemp.INIT;
                    lrTemp."Tipo registro" := lrTemp."Tipo registro"::Touroperador;
                    lrTemp.Codigo          := lrTmpCI.Touroperador;
                    lrTemp.Usuario         := USERID;

                    lwClaveTemporal += 1;
                    lrTemp.Id := lwClaveTemporal;
                    lrTemp.INSERT;
                  END;

                  // ----  Acumular los invitados

                  IF lwParte <> lrTmpCI."N§ Parte" THEN BEGIN
                    IF lrToPar.GET(prParte."N§ Parte", lrTmpCI.Touroperador) THEN BEGIN
                      lrTemp."Adultos invitados" += lrToPar."Adultos invitados ingreso";
                      lrTemp."Ni¤os invitados" += lrToPar."Ni¤os invitados ingreso";
                    END;
                  END;

                  // ----  Solo sumaremos los paxes para las lineas de tipo Base o Manual, separando por adulto y ni¤o

                  CASE lrTmpCI."Tipo linea" OF
                    lrTmpCI."Tipo linea"::Base:
                    BEGIN
                      lrTemp.Pasaje += lrTmpCI."Pax Transportados";
                      IF (lrTmpCI."Tipo elemento" = lrPar."Codigo Adulto") OR (lrTmpCI."Tipo elemento" = Text50001) OR
                         (lrTmpCI."Tipo elemento" = Text50002) THEN
                        lrTemp.Adultos += lrTmpCI."Pax Transportados"
                      ELSE
                        lrTemp.Ni¤os += lrTmpCI."Pax Transportados";
                    END;
                    lrTmpCI."Tipo linea"::Manual:
                    BEGIN
                      lrTemp.Pasaje  += lrTmpCI."Pax Transportados";
                      lrTemp.Adultos += lrTmpCI."Pax Transportados";
                    END;
                  END;

                  // ---- Sumar el ingreso facturado  y el total por separado

                  lrTemp.Ingreso += lrTmpCI."Importe sin impuesto DL";
                  IF lrTmpCI."N§ Factura" <> '' THEN
                    lrTemp."Importe facturado" += lrTmpCI."Importe sin impuesto DL";
                  lrTemp.MODIFY;
                END;

                // -------------------------------------
                // ----  Registro por Proveedor
                // -------------------------------------

                IF prParte.Proveedor <> '' THEN BEGIN
                  lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::Proveedor);
                  lrTemp.SETRANGE(Codigo         , prParte.Proveedor);
                  IF NOT lrTemp.FINDFIRST THEN BEGIN
                    lrTemp.INIT;
                    lrTemp."Tipo registro" := lrTemp."Tipo registro"::Proveedor;
                    lrTemp.Codigo          := prParte.Proveedor;
                    lrTemp.Usuario         := USERID;

                    lwClaveTemporal += 1;
                    lrTemp.Id := lwClaveTemporal;
                    lrTemp.INSERT;
                  END;

                  // ----  Solo sumaremos los paxes para las lineas de tipo Base o Manual, separando por adulto y ni¤o

                  //CASE lrTmpCI."Tipo linea" OF
                  //  lrTmpCI."Tipo linea"::Base:
                  //  BEGIN
                  //    lrTemp.Pasaje += lrTmpCI."Pax Transportados";
                  //    IF (lrTmpCI."Tipo elemento" = lrPar."Codigo Adulto") OR (lrTmpCI."Tipo elemento" = Text50001) OR
                  //       (lrTmpCI."Tipo elemento" = Text50002) THEN
                  //      lrTemp.Adultos += lrTmpCI."Pax Transportados"
                  //    ELSE
                  //      lrTemp.Ni¤os += lrTmpCI."Pax Transportados";
                  //  END;
                  //  lrTmpCI."Tipo linea"::Manual:
                  //  BEGIN
                  //    lrTemp.Pasaje  += lrTmpCI."Pax Transportados";
                  //    lrTemp.Adultos += lrTmpCI."Pax Transportados";
                  //  END;
                  //END;

                  // ---- Sumar el ingreso facturado  y el total por separado

                  IF lrTmpCI.Concepto = lrTmpCI.Concepto::Coste THEN BEGIN

                    // ----  Solo sumaremos los paxes para las lineas de tipo Base o Manual, separando por adulto y ni¤o

                    CASE lrTmpCI."Tipo linea" OF
                      lrTmpCI."Tipo linea"::Base:
                      BEGIN
                        lrTemp.Pasaje += lrTmpCI."Pax Transportados";
                        IF (lrTmpCI."Tipo elemento" = lrPar."Codigo Adulto") OR (lrTmpCI."Tipo elemento" = Text50001) OR
                           (lrTmpCI."Tipo elemento" = Text50002) THEN
                          lrTemp.Adultos += lrTmpCI."Pax Transportados"
                        ELSE
                          lrTemp.Ni¤os += lrTmpCI."Pax Transportados";
                      END;
                      lrTmpCI."Tipo linea"::Manual:
                      BEGIN
                        lrTemp.Pasaje  += lrTmpCI."Pax Transportados";
                        lrTemp.Adultos += lrTmpCI."Pax Transportados";
                      END;
                    END;

                    lrTemp.Ingreso += lrTmpCI."Importe sin impuesto DL";
                    IF lrTmpCI."N§ Factura" <> '' THEN
                      lrTemp."Importe facturado" += lrTmpCI."Importe sin impuesto DL";
                  END;
                  lrTemp.MODIFY;
                END;

                lwParte := lrTmpCI."N§ Parte";
              UNTIL lrTmpCI.NEXT = 0;
            END;

            // ----  Recorrido por Touroperador x parte para acumular los servicios

            lrToPar.SETRANGE("N§ Parte", prParte."N§ Parte");
            IF lrToPar.FINDSET THEN BEGIN
              REPEAT
                lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::Touroperador);
                lrTemp.SETRANGE(Codigo         , lrToPar.Touroperador);
                IF lrTemp.FINDFIRST THEN BEGIN
                  lrTemp.Servicios += lwSumaServicio;
                  lrTemp.MODIFY;
                END;
              UNTIL lrToPar.NEXT = 0;
            END;

          END;

          // -------------------------------------
          // ----  Registro por Zona Fisica
          // -------------------------------------

          // JPT 02/10/06
          // Recorrido por Sevicios Partes para buscar las zonas fisicas
          CLEAR(lrSerPar);
          lrSerPar.SETRANGE("N§ Parte", prParte."N§ Parte");
          // AJF 18/06/08 A¤ado el parametro para que filtre la lineas por ttoo.
          IF lwTTOO <> '' THEN
            lrSerPar.SETRANGE(Touroperador, lwTTOO);
          // Lo utilizamos para guardar la zona fisica del parte, de forma de no marcar dos viajes si se repite
          // zona en mismo parte
          CLEAR(lrTempZon);
          lrTempZon.DELETEALL;
          IF lrSerPar.FINDSET THEN BEGIN
            lwPrim:= TRUE;
            REPEAT
              lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::"Zona Fisica");
              lrTemp.SETRANGE(Codigo         , lrSerPar."Zona fisica");
              IF NOT lrTemp.FINDFIRST THEN BEGIN
                lrTemp.INIT;
                lrTemp."Tipo registro" := lrTemp."Tipo registro"::"Zona Fisica";
                lrTemp.Codigo          := lrSerPar."Zona fisica";
                lrTemp.Usuario         := USERID;

                lwClaveTemporal += 1;
                lrTemp.Id := lwClaveTemporal;
                lrTemp.INSERT;
              END;

              // Solo debemos de marcar un viaje por parte (por si se repite zona en el parte)
              IF NOT lrTempZon.GET(lrSerPar."Zona fisica") THEN BEGIN
                lrTemp.Servicios  +=1;
                lrTempZon.Codigo := lrSerPar."Zona fisica";
                lrTempZon.INSERT;
              END;
              lrTemp.Adultos             += lrSerPar."Adultos transportados";
              lrTemp.Ni¤os               += lrSerPar."Ni¤os transportados";
              lrTemp."Adultos invitados" += lrSerPar."Adultos invitados ingreso";
              lrTemp."Ni¤os invitados"   += lrSerPar."Ni¤os invitados ingreso";
              lrTemp.Pasaje              += lrSerPar."Adultos transportados" + lrSerPar."Ni¤os transportados";
              lrTemp.MODIFY;

              lwPrim := FALSE;
            UNTIL lrSerPar.NEXT = 0;
          END;

          lwConductorAnt := prParte."Cod Conductor";
          lwHoraAnt      := prParte."Hora inicio";

        UNTIL prParte.NEXT = 0;
        wVentana.CLOSE;

        // JPT 04/10/06 Sumamos el desglose al temporal
        lrTmpDsgl.RESET;
        IF lrTmpDsgl.FINDSET THEN BEGIN
          REPEAT
            lrTemp := lrTmpDsgl;
            lrTemp.INSERT;
          UNTIL lrTmpDsgl.NEXT=0;
        END;

        // Pasamos de la variable temporal a la que no lo es
        lrTemp.RESET;
        IF lrTemp.FINDSET THEN  BEGIN
          wVentana.OPEN(Text020);
          wActual := 0;
          wTotal := lrTemp.COUNT;
          REPEAT
            wActual += 1;
            wVentana.UPDATE(1, ROUND(wActual / wTotal * 10000, 1));

            lrTemp2 := lrTemp;
            lrTemp2.INSERT;
          UNTIL lrTemp.NEXT = 0;
          wVentana.CLOSE;
        END;

        // JPT Totales x Tipo
        CLEAR(lrTemp);
        lrTemp.SETRANGE(Desglose, 0);
        FOR lwCont:= 0 TO 6 DO BEGIN
          IF lwCont <> 5 THEN BEGIN // No se hace totales de filtros
            lrTemp.SETRANGE("Tipo registro", lwCont);
            IF lrTemp.FINDSET THEN BEGIN
              lrTemp2.INIT;
              lrTemp2.Usuario         := USERID;
              lrTemp2."Tipo registro" := lwCont;
              lrTemp2.Codigo          := Text006;
              lrTemp2.Orden           := 2;
              lrTemp2.INSERT(TRUE);
              REPEAT
                lrTemp2."Importe facturado" += lrTemp."Importe facturado";
                lrTemp2.Coste               += lrTemp.Coste;
                lrTemp2.Ingreso             += lrTemp.Ingreso;
                lrTemp2.Servicios           += lrTemp.Servicios;
                lrTemp2.Pasaje              += lrTemp.Pasaje;
                lrTemp2.Adultos             += lrTemp.Adultos;
                lrTemp2.Ni¤os               += lrTemp.Ni¤os;
                lrTemp2."Adultos invitados" += lrTemp."Adultos invitados";
                lrTemp2."Ni¤os invitados"   += lrTemp."Ni¤os invitados";
              UNTIL lrTemp.NEXT = 0;
              lrTemp2.MODIFY;
            END;
          END;
        END;

        { JPT 02/10/06 Dado que todas las intrucciones de total son iguales he puesto un bucle
        // ----  Recorremos los temporales para totalizar Codigo servicio

        lrTemp.SETRANGE(Codigo);
        lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::"Codigo Servicio");
        IF lrTemp.FINDSET THEN BEGIN
          lrTemp2.INIT;
          lrTemp2.Usuario         := USERID;
          lrTemp2."Tipo registro" := lrTemp2."Tipo registro"::"Codigo Servicio";
          lrTemp2.Codigo          := Text006;
          lrTemp2.Orden           := 2;
          lrTemp2.INSERT(TRUE);
          REPEAT
            lrTemp2."Importe facturado" += lrTemp."Importe facturado";
            lrTemp2.Coste               += lrTemp.Coste;
            lrTemp2.Ingreso             += lrTemp.Ingreso;
            lrTemp2.Servicios           += lrTemp.Servicios;
            lrTemp2.Pasaje              += lrTemp.Pasaje;
            lrTemp2.Adultos             += lrTemp.Adultos;
            lrTemp2.Ni¤os               += lrTemp.Ni¤os;
            lrTemp2."Adultos invitados" += lrTemp."Adultos invitados";
            lrTemp2."Ni¤os invitados"   += lrTemp."Ni¤os invitados";
          UNTIL lrTemp.NEXT = 0;
          lrTemp2.MODIFY;
        END;

        // ----  Recorremos los temporales para totalizar tipo servicio

        lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::"Tipo servicio");
        IF lrTemp.FINDSET THEN BEGIN
          lrTemp2.INIT;
          lrTemp2.Usuario         := USERID;
          lrTemp2."Tipo registro" := lrTemp2."Tipo registro"::"Tipo servicio";
          lrTemp2.Codigo          := Text006;
          lrTemp2.Orden           := 2;
          lrTemp2.INSERT(TRUE);
          REPEAT
            lrTemp2."Importe facturado" += lrTemp."Importe facturado";
            lrTemp2.Coste               += lrTemp.Coste;
            lrTemp2.Ingreso             += lrTemp.Ingreso;
            lrTemp2.Servicios           += lrTemp.Servicios;
            lrTemp2.Pasaje              += lrTemp.Pasaje;
            lrTemp2.Adultos             += lrTemp.Adultos;
            lrTemp2.Ni¤os               += lrTemp.Ni¤os;
            lrTemp2."Adultos invitados" += lrTemp."Adultos invitados";
            lrTemp2."Ni¤os invitados"   += lrTemp."Ni¤os invitados";
          UNTIL lrTemp.NEXT = 0;
          lrTemp2.MODIFY;
        END;

        // ----  Recorremos los temporales para totalizar Cliente

        lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::Cliente);
        IF lrTemp.FINDSET THEN BEGIN
          lrTemp2.INIT;
          lrTemp2.Usuario         := USERID;
          lrTemp2."Tipo registro" := lrTemp2."Tipo registro"::Cliente;
          lrTemp2.Codigo          := Text006;
          lrTemp2.Orden           := 2;
          lrTemp2.INSERT(TRUE);
          REPEAT
            lrTemp2."Importe facturado" += lrTemp."Importe facturado";
            lrTemp2.Coste               += lrTemp.Coste;
            lrTemp2.Ingreso             += lrTemp.Ingreso;
            lrTemp2.Servicios           += lrTemp.Servicios;
            lrTemp2.Pasaje              += lrTemp.Pasaje;
            lrTemp2.Adultos             += lrTemp.Adultos;
            lrTemp2.Ni¤os               += lrTemp.Ni¤os;
            lrTemp2."Adultos invitados" += lrTemp."Adultos invitados";
            lrTemp2."Ni¤os invitados"   += lrTemp."Ni¤os invitados";
          UNTIL lrTemp.NEXT = 0;
          lrTemp2.MODIFY;
        END;

        // ----  Recorremos los temporales para totalizar Proveedor

        lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::Proveedor);
        IF lrTemp.FINDSET THEN BEGIN
          lrTemp2.INIT;
          lrTemp2.Usuario         := USERID;
          lrTemp2."Tipo registro" := lrTemp2."Tipo registro"::Proveedor;
          lrTemp2.Codigo          := Text006;
          lrTemp2.Orden           := 2;
          lrTemp2.INSERT(TRUE);
          REPEAT
            lrTemp2."Importe facturado" += lrTemp."Importe facturado";
            lrTemp2.Coste               += lrTemp.Coste;
            lrTemp2.Ingreso             += lrTemp.Ingreso;
            lrTemp2.Servicios           += lrTemp.Servicios;
            lrTemp2.Pasaje              += lrTemp.Pasaje;
            lrTemp2.Adultos             += lrTemp.Adultos;
            lrTemp2.Ni¤os               += lrTemp.Ni¤os;
            lrTemp2."Adultos invitados" += lrTemp."Adultos invitados";
            lrTemp2."Ni¤os invitados"   += lrTemp."Ni¤os invitados";
          UNTIL lrTemp.NEXT = 0;
          lrTemp2.MODIFY;
        END;

        // ----  Recorremos los temporales para totalizar Touroperador

        lrTemp.SETRANGE("Tipo registro", lrTemp."Tipo registro"::Touroperador);
        IF lrTemp.FINDSET THEN BEGIN
          lrTemp2.INIT;
          lrTemp2.Usuario         := USERID;
          lrTemp2."Tipo registro" := lrTemp2."Tipo registro"::Touroperador;
          lrTemp2.Codigo          := Text006;
          lrTemp2.Orden           := 2;
          lrTemp2.INSERT(TRUE);
          REPEAT
            lrTemp2."Importe facturado" += lrTemp."Importe facturado";
            lrTemp2.Coste               += lrTemp.Coste;
            lrTemp2.Ingreso             += lrTemp.Ingreso;
            lrTemp2.Servicios           += lrTemp.Servicios;
            lrTemp2.Pasaje              += lrTemp.Pasaje;
            lrTemp2.Adultos             += lrTemp.Adultos;
            lrTemp2.Ni¤os               += lrTemp.Ni¤os;
            lrTemp2."Adultos invitados" += lrTemp."Adultos invitados";
            lrTemp2."Ni¤os invitados"   += lrTemp."Ni¤os invitados";
          UNTIL lrTemp.NEXT = 0;
          lrTemp2.MODIFY;
        END;
        JPT }

        // ----  Llamar a la ventana de resumen

        COMMIT;
        CLEAR(lfConsulta);
        lfConsulta.RUNMODAL;
      END;
    END;

    LOCAL PROCEDURE SetDesglose@1103355000(VAR prTemp@1103355000 : TEMPORARY Record 7010427;prCI@1103355001 : Record 7010414;VAR prTmpDesg@1103355002 : TEMPORARY Record 7010427;VAR pwId@1103355003 : Integer;pwSumaServ@1103355004 : Integer);
    BEGIN
      // SetDesglose

      CLEAR(prTmpDesg);

      prTmpDesg.SETRANGE("Tipo registro", prTemp."Tipo registro");
      prTmpDesg.SETRANGE(Codigo         , prTemp.Codigo);
      prTmpDesg.SETRANGE("Zona Precio"  , prCI."Zona Precios");
      prTmpDesg.SETRANGE(Desglose       , 1);

      IF NOT prTmpDesg.FINDFIRST THEN BEGIN
        pwId +=1;
        prTemp.Orden              := 1;
        prTmpDesg.Id              := pwId;
        prTmpDesg."Tipo registro" := prTemp."Tipo registro";
        prTmpDesg.Codigo          := prTemp.Codigo;
        prTmpDesg."Zona Precio"   := prCI."Zona Precios";
        prTmpDesg.Desglose        := 1;
        prTmpDesg.Usuario         := USERID;
        prTmpDesg.Visible         := FALSE;
        prTmpDesg.INSERT;
      END;

      IF prCI."N§ Factura" <> '' THEN
        prTmpDesg."Importe facturado" += prCI."Importe sin impuesto DL";
      CASE prCI.Concepto OF
        prCI.Concepto::Coste   : prTmpDesg.Coste   += prCI."Importe sin impuesto DL";
        prCI.Concepto::Ingreso : prTmpDesg.Ingreso += prCI."Importe sin impuesto DL";
      END;
      CASE prCI."Tipo linea" OF
        prCI."Tipo linea"::Base: BEGIN
          IF prCI."Tipo elemento" = rPar."Codigo Ni¤o" THEN
            prTmpDesg.Ni¤os     += prCI."Pax Transportados"
          ELSE
            prTmpDesg.Adultos   += prCI."Pax Transportados";
          prTmpDesg.Pasaje      += prCI."Pax Transportados";
        END;
        prCI."Tipo linea"::Manual : BEGIN
          prTmpDesg.Pasaje      += prCI."Pax Transportados";
          prTmpDesg.Adultos     += prCI."Pax Transportados";
        END;
      END;

      IF prTmpDesg.Parte <> prCI."N§ Parte" THEN
        prTmpDesg.Servicios += pwSumaServ;
      prTmpDesg.Parte          := prCI."N§ Parte"; // Se guarda el campo parte para no repetir servicios del mismo parte
      prTmpDesg.MODIFY;
    END;

    PROCEDURE EnviaFacturaEmail@1100244000(VAR prPref@1100244000 : Record 7010415;pwTipoImp@1100253000 : 'Prefactura,Factura');
    VAR
      lrPar@1100244001 : Record 7010433;
      lrSMTP@1000000001 : Record 409;
      lrCli@1100244002 : Record 18;
      lcCodPar@1100244003 : Codeunit 7010318;
      lcMail@1000000000 : Codeunit 400;
      lwNomFichero@1100244005 : Text[250];
      lwNomfichero2@1100244006 : Text[250];
      lwAsunto@1100244008 : Text[80];
      lwNomListado@1103350000 : Text[30];
      lwTexto@1100253001 : Text[250];
    BEGIN
      // EnviaFacturaEmail
      // Sirve para enviar Facturas y Prefacturas por correo

      // Solo se envian por correo las facturas

      // Comprobamos los parametros

      lrPar.FINDFIRST;
      lrPar.TESTFIELD("Ruta facturas PDF");
      lrPar.TESTFIELD("Direccion envio facturas");
      lrPar.TESTFIELD("Asunto envio facturas");
      //-$001lrPar.TESTFIELD("Host SMTP");

      lrCli.GET(prPref.Cliente);
      lrCli.TESTFIELD("E-Mail");

      // JPT 13/12/05 Pedimos confirmaci¢n ya que en la impresi¢n por mail no hay ventana previa
      CASE pwTipoImp OF
        pwTipoImp::Factura   : lwTexto := STRSUBSTNO(Text021, prPref."N§ Factura",lrCli."E-Mail", prPref."Tipo Documento");
        pwTipoImp::Prefactura: lwTexto := STRSUBSTNO(Text021, prPref."N§ Prefactura", lrCli."E-Mail", Text022);
      END;

      IF NOT CONFIRM (lwTexto) THEN
        EXIT;

      // Lanzamos la impresion por la impresora PDF
      prPref."Imprime Mail":= TRUE;
      CASE pwTipoImp OF
        pwTipoImp::Factura   : cFactCli.ImprimeRegistroFactura(prPref);
        pwTipoImp::Prefactura: cFactCli.ImprimirRegistroPrefactura(prPref);
      END;

      SLEEP(2000);

      // Renombramos el fichero

      // Buscamos el nombre del listado para saber el nombre que tendr  el archivo
      lwNomListado := NombreReport(lcCodPar.BuscaNoReport(prPref, pwTipoImp));
      IF lwNomListado='' THEN
        ERROR(Text018);

      IF lrPar."Ruta facturas PDF"[STRLEN(lrPar."Ruta facturas PDF")] <> '\' THEN
        lrPar."Ruta facturas PDF":= lrPar."Ruta facturas PDF" +'\';
      lwNomFichero  := lrPar."Ruta facturas PDF" + lwNomListado + Text50004;

      CASE pwTipoImp OF
        pwTipoImp::Factura   : lwNomfichero2 := lrPar."Ruta facturas PDF" + prPref."N§ Factura"    + Text50004;
        pwTipoImp::Prefactura: lwNomfichero2 := lrPar."Ruta facturas PDF" + prPref."N§ Prefactura" + Text50004;
      END;

      lwNomfichero2 := LimpiaFileName(lwNomfichero2); // Le quitamos los caracteres no validos

      IF EXISTS(lwNomFichero) THEN BEGIN
        IF EXISTS(lwNomfichero2) THEN
          ERASE(lwNomfichero2);
        RENAME(lwNomFichero, lwNomfichero2);
      END
      ELSE
        ERROR(Text009);

      // Enviamos el correo con la factura anexada

      CASE pwTipoImp OF
        pwTipoImp::Factura   : lwAsunto := lrPar."Asunto envio facturas" + ' ' + prPref."N§ Factura";
        pwTipoImp::Prefactura: lwAsunto := lrPar."Asunto envio Prefacturas" + ' ' + prPref."N§ Prefactura";
      END;

      //-$001CLEAR(ocxCorreo);
      //-$001ocxCorreo.NewMessage(lrPar."Direccion envio facturas", lwAsunto);
      //-$001ocxCorreo.SetWorkMode();
      //-$001ocxCorreo.SetHost(lrPar."Host SMTP");
      //-$001ocxCorreo.SetUserID(lrPar."Direccion envio facturas");
      //-$001ocxCorreo.SetSubType(1);
      //-$001ocxCorreo.SetToAdress   := lrCli."E-Mail";
      //-$001ocxCorreo.AddAttachment(lwNomfichero2);
      //-$001ocxCorreo.AddLine(lwAsunto);
      //-$001ocxCorreo.Send;
      //-$001IF NOT ocxCorreo.WasSuccessful THEN
      //-$001  ERROR(ocxCorreo.LastError);

      //+$001 <
      lrSMTP.FINDFIRST;
      lcMail.CreateMessage(lrPar."Direccion envio facturas", lrSMTP."User ID", lrCli."E-Mail",
                           lwAsunto, lwAsunto, FALSE);
      lcMail.AddAttachment(lwNomfichero2);
      lcMail.Send();
      //+$001 >
    END;

    PROCEDURE EnviaDocumentoEmail@1103350000(pwHostSMTP@1103350006 : Text[250];pwDireccionOr@1103350000 : Text[250];pwDireccionDest@1103350004 : Text[250];pwAsunto@1103350001 : Text[250];pwArchivos@1103350002 : ARRAY [5] OF Text[250];pwCuerpo@1103350003 : ARRAY [5] OF Text[250];pwMensaje@1103350007 : Boolean) : Boolean;
    VAR
      lcMail@1000000000 : Codeunit 400;
      lwCont@1103350005 : Integer;
    BEGIN
      // EnviaDocumentoEmail
      // Devuelve TRUE Si ha tenido exito

      // Enviar documentos por correo
      // pwArchivos es un array de 5. Para poder insertar hasta 5 documentos distintos
      // Del mismo modo pwCuerpo tambien es array de 5, Permitiendo introducir hasta 5 lineas

      //-$001CLEAR(ocxCorreo);
      //-$001ocxCorreo.NewMessage(pwDireccionOr, pwAsunto);

      //-$001ocxCorreo.SetWorkMode();
      //-$001ocxCorreo.SetHost(pwHostSMTP);
      //-$001ocxCorreo.SetUserID(pwDireccionOr);

      //-$001ocxCorreo.SetSubType(1);
      //-$001ocxCorreo.SetToAdress(pwDireccionDest);

      //-$001FOR lwCont:=1 TO 5 DO BEGIN
      //-$001  IF EXISTS(pwArchivos[lwCont]) THEN
      //-$001    ocxCorreo.AddAttachment(pwArchivos[lwCont]);
      //-$001  ocxCorreo.AddLine(pwCuerpo[lwCont]);
      //-$001END;

      //-$001ocxCorreo.Send;

      //-$001IF pwMensaje THEN BEGIN
      //-$001  IF ocxCorreo.WasSuccessful THEN
      //-$001    MESSAGE(Text012)
      //-$001  ELSE
      //-$001    ERROR(ocxCorreo.LastError);
      //-$001END;

      //-$001EXIT(ocxCorreo.WasSuccessful);


      //+$001 <
      lcMail.CreateMessage(pwDireccionOr, pwDireccionOr, pwDireccionDest,
                           pwAsunto, pwAsunto, FALSE);
      FOR lwCont:=1 TO 5 DO
      BEGIN
        IF EXISTS(pwArchivos[lwCont]) THEN
          lcMail.AddAttachment(pwArchivos[lwCont]);
        lcMail.AppendBody(pwCuerpo[lwCont]);
      END;
      lcMail.Send();
      //+$001 >

      EXIT(TRUE);
    END;

    PROCEDURE CambiarDEaDL@1100244002(par_importe@1100244000 : Decimal;par_CodDivisa@1100244001 : Code[10];par_Fecha@1100244002 : Date) : Decimal;
    VAR
      rDiv@1100244003 : Record 4;
      lrPar@1100244004 : Record 7010311;
    BEGIN
      // BRM 02/06/04 CambiarDEaDL
      //
      lrPar.FINDFIRST;

      IF par_CodDivisa = '' THEN
        EXIT(par_importe);

      IF rDiv.GET(par_CodDivisa) THEN BEGIN
        IF par_Fecha = 0D THEN
          EXIT(0);
        EXIT(ROUND(ImpCambioDEaDL(par_Fecha, par_CodDivisa, par_importe, TipoCambio(par_Fecha, par_CodDivisa)),
             POWER(10,(-1*lrPar."Precision Decimales"))));
      END;

      EXIT(0);
    END;

    PROCEDURE ImpCambioDEaDL@1100244001(Fecha@1100244000 : Date;CodDivisa@1100244001 : Code[10];Importe@1100244002 : Decimal;Factor@1100244003 : Decimal) : Decimal;
    VAR
      rTipCam@1100244004 : Record 330;
      TipoCambDivisa2@1100244005 : ARRAY [2] OF Record 330;
      ImpTipoCambio@1100244006 : Decimal;
      CodDivisaRelac@1100244007 : Code[10];
      ImpFijoTipoCambio@1100244008 : Option;
      FactorDivisa@1100244009 : Decimal;
      UtilAjusImps@1100244010 : Boolean;
      FechaInicial2@1100244011 : Date;
      CodDivisa2@1100244012 : Code[10];
      Fecha2@1100244013 : Date;
      ImpTipCambioRelac@1100244014 : Decimal;
    BEGIN
      // BRM 02/06/04
      // FUNCION CAMBIO DE A DL SIN REDONDEO

      IF CodDivisa = '' THEN
        EXIT(Importe);
      IF NOT BuscarDivisa(Fecha,CodDivisa,1, rTipCam, TipoCambDivisa2) THEN
        EXIT(0);

      rTipCam.TESTFIELD("Exchange Rate Amount");
      rTipCam.TESTFIELD("Relational Exch. Rate Amount");
      IF rTipCam."Relational Currency Code" = '' THEN
        IF rTipCam."Fix Exchange Rate Amount" = rTipCam."Fix Exchange Rate Amount"::Both THEN
          Importe := (Importe / rTipCam."Exchange Rate Amount") * rTipCam."Relational Exch. Rate Amount"
        ELSE
          Importe := Importe / Factor
      ELSE BEGIN
        ImpTipCambioRelac := rTipCam."Relational Exch. Rate Amount";
        ImpTipoCambio := rTipCam."Exchange Rate Amount";
        CodDivisaRelac := rTipCam."Relational Currency Code";
        ImpFijoTipoCambio := rTipCam."Fix Exchange Rate Amount";
        IF NOT BuscarDivisa(Fecha,CodDivisaRelac,2, rTipCam, TipoCambDivisa2) THEN
          EXIT(0);

        rTipCam.TESTFIELD("Exchange Rate Amount");
        rTipCam.TESTFIELD("Relational Exch. Rate Amount");
        CASE ImpFijoTipoCambio OF
          rTipCam."Fix Exchange Rate Amount"::"Relational Currency" :
            ImpTipoCambio :=
              (ImpTipCambioRelac * rTipCam."Exchange Rate Amount") /
              (rTipCam."Relational Exch. Rate Amount" * Factor);
          rTipCam."Fix Exchange Rate Amount"::Currency :
              ImpTipCambioRelac :=
                (Factor * ImpTipoCambio * rTipCam."Exchange Rate Amount") /
                (rTipCam."Relational Exch. Rate Amount");
          rTipCam."Fix Exchange Rate Amount"::Both :
            CASE rTipCam."Fix Exchange Rate Amount" OF
              rTipCam."Fix Exchange Rate Amount"::"Relational Currency" :
                rTipCam."Exchange Rate Amount" :=
                  (ImpTipCambioRelac * rTipCam."Relational Exch. Rate Amount") /
                  (ImpTipoCambio * Factor);
              rTipCam."Fix Exchange Rate Amount"::Currency :
                rTipCam."Relational Exch. Rate Amount" :=
                  (Factor * ImpTipoCambio * rTipCam."Exchange Rate Amount") /
                  (ImpTipCambioRelac);
              rTipCam."Fix Exchange Rate Amount"::Both :
               BEGIN
                Importe := (Importe / ImpTipoCambio) * ImpTipCambioRelac;
                Importe := (Importe / rTipCam."Exchange Rate Amount") * rTipCam."Relational Exch. Rate Amount";
                EXIT(Importe);
               END;
            END;

        END;
        Importe := (Importe / ImpTipCambioRelac) * ImpTipoCambio;
        Importe := (Importe / rTipCam."Relational Exch. Rate Amount") * rTipCam."Exchange Rate Amount";
      END;
      EXIT(Importe);
    END;

    PROCEDURE InvitadosParteIngreso@1103350001(pwParte@1103350000 : Code[20];VAR pwAdInvitados@1103350001 : Integer;VAR pwNiInvitados@1103350002 : Integer);
    VAR
      lrSerPar@1103350003 : Record 7010359;
    BEGIN
      // InvitadosParteIngreso
      //
      pwAdInvitados := 0;
      pwNiInvitados := 0;

      lrSerPar.RESET;
      lrSerPar.SETCURRENTKEY("N§ Parte");
      lrSerPar.SETRANGE("N§ Parte", pwParte);
      IF lrSerPar.FINDSET THEN BEGIN
        REPEAT
          pwAdInvitados += lrSerPar."Adultos invitados ingreso";
          pwNiInvitados += lrSerPar."Ni¤os invitados ingreso";
        UNTIL lrSerPar.NEXT = 0;
      END;
    END;

    PROCEDURE NombreReport@1103350002(pwNo@1103350000 : Integer) : Text[30];
    VAR
      lrObj@1103350001 : Record 2000000001;
    BEGIN
      // NombreReport
      // Devuelve el nombre del report a partir del parametro

      lrObj.RESET;
      lrObj.SETRANGE(Type , lrObj.Type::Report);
      lrObj.SETRANGE(ID, pwNo);
      IF lrObj.FINDFIRST THEN
        EXIT(lrObj.Name);
    END;

    PROCEDURE ValidaGuia@1103350003(pwGuia@1103350001 : Text[30]);
    VAR
      lrResc@1103350000 : Record 156;
    BEGIN
      // ValidaGuia
      rPar.FINDFIRST;
      IF NOT (rPar."Empresa Real" IN [rPar."Empresa Real"::TER]) THEN
        EXIT;

      // Lo recortamos a un m ximo de 20 caracteres

      pwGuia := COPYSTR(pwGuia, 1, 20);

      CLEAR(lrResc);
      lrResc.GET(pwGuia);
      IF lrResc.Type <> lrResc.Type::Person THEN
        lrResc.FIELDERROR(Type, Text019);
    END;

    PROCEDURE LookUpGuia@1103350004(VAR pwGuia@1103350001 : Text[30]) : Boolean;
    VAR
      lrResc@1103350000 : Record 156;
    BEGIN
      // LookUpGuia

      rPar.FINDFIRST;
      IF NOT (rPar."Empresa Real" IN [rPar."Empresa Real"::TER]) THEN
        EXIT;

      // Lo recortamos a un m ximo de 20
      pwGuia := COPYSTR(pwGuia,1,20);

      CLEAR(lrResc);
      lrResc.FILTERGROUP(2);
      lrResc.SETRANGE(Type , lrResc.Type::Person);
      lrResc.FILTERGROUP(0);

      IF lrResc.GET(pwGuia) THEN;
      IF FORM.RUNMODAL(0,lrResc) = ACTION::LookupOK THEN BEGIN
        pwGuia := lrResc."No.";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE LimpiaFileName@1100253000(pwNombre@1100253001 : Text[1024]) : Text[1024];
    VAR
      lwTexto@1100253000 : Text[1024];
      lwChar@1100253002 : Char;
      lwCont@1100253003 : Integer;
    BEGIN
      // LimpiaFileName
      // Elimina del nombre del archivo los caracteres No validos

      CLEAR(lwTexto);
      FOR lwCont:=1 TO STRLEN(pwNombre)  DO BEGIN
        lwChar:= pwNombre[lwCont];
        IF NOT (lwChar IN ['/','(',')',',','-']) THEN
          lwTexto += FORMAT(lwChar);
      END;
      EXIT(lwTexto);
    END;

    PROCEDURE DeterminaClave@1103350009(VAR prrTabla@1103350000 : RecordRef) : Integer;
    VAR
      lrFieldT@1103350001 : FieldRef;
      lrFieldK@1103350004 : FieldRef;
      lrKey@1103350002 : KeyRef;
      lwNumK@1103350003 : Integer;
      lwNumFK@1103350009 : Integer;
      lwNumF@1103350005 : Integer;
      lwNumCamps@1103350006 : ARRAY [2] OF Integer;
      lwNumCampsKv@1103350010 : ARRAY [2] OF Integer;
      lwPosCamps@1103350007 : ARRAY [2] OF Integer;
      lwNumClave@1103350008 : Integer;
      lwOK@1103350011 : Boolean;
    BEGIN
      // DeterminaClave
      //
      // JPT 28/12/04
      // Esta funci¢n determina la clave optima para la tabla
      // Tambien devuelve el numero de orden de la clave
      // En teoria un SETTABLE sobre el puntero record permitiria traspasar la clave, pero he comprobado que no es as¡

      CLEAR(lwNumCamps); // Numero de campos coincidentes
      CLEAR(lwPosCamps); // Suma de las posiciones de los campos coincidentes
      CLEAR(lwNumCampsKv); // Numero total de campos que tiene la clave
      lwNumClave:=1;
      FOR lwNumK:=1 TO prrTabla.KEYCOUNT DO BEGIN
        lwNumCamps[2]  :=0;
        lwPosCamps[2]  :=0;
        lwNumCampsKv[2]:=0;
        lrKey:= prrTabla.KEYINDEX(lwNumK);
        IF lrKey.ACTIVE THEN BEGIN
          lwNumCampsKv[2] := lrKey.FIELDCOUNT; // Numero de campos de la clave
          FOR lwNumF:=1 TO prrTabla.FIELDCOUNT DO BEGIN
            lrFieldT := prrTabla.FIELDINDEX(lwNumF);
            IF lrFieldT.GETFILTER <> '' THEN BEGIN
              FOR lwNumFK := 1 TO lrKey.FIELDCOUNT DO BEGIN
                lrFieldK := lrKey.FIELDINDEX(lwNumFK);
                IF lrFieldT.NUMBER = lrFieldK.NUMBER THEN BEGIN
                  lwNumCamps[2] += 1;       // Numero de campos Coincidentes
                  lwPosCamps[2] += lwNumFK;  // Posicion de campos
                END;
              END;
            END;
          END;
        END;
        // Seleccionamos la clave si tiene m s campos coincidentes, o si est n en un orden mejor
        // o que la clave tenga en total menos campos en caso de que tengan los mismos coincidentes

        lwOK := (lwNumCamps[2] > lwNumCamps[1]);
        IF NOT lwOK THEN BEGIN
          IF ((lwNumCamps[2] = lwNumCamps[1]) AND (lwNumCampsKv[2] < lwNumCampsKv[1])) THEN
            lwOK := TRUE
          ELSE
            lwOK := ((lwNumCamps[2] = lwNumCamps[1]) AND (lwPosCamps[2] < lwPosCamps[1]));
        END;

        IF lwOK THEN BEGIN
          lwNumClave := lwNumK;
          lwNumCamps[1]   := lwNumCamps[2];
          lwPosCamps[1]   := lwPosCamps[2];
          lwNumCampsKv[1] := lwNumCampsKv[2];
        END;
      END;

      prrTabla.CURRENTKEYINDEX(lwNumClave);

      EXIT(lwNumClave);
    END;

    PROCEDURE GetDocumento@1100253001(pwNonbreArch@1100253000 : Text[250];pwFiltro@1100253001 : Text[30];pwDescripcion@1100253003 : Text[250]) : Text[250];
    VAR
      lwNuevoDoc@1100253002 : Text[250];
    BEGIN
      // GetDocumento

      wDialog.FileName := pwNonbreArch;
      wDialog.Filter   := pwFiltro;
      IF pwDescripcion <> '' THEN
        wDialog.DialogTitle := pwDescripcion;

      wDialog.ShowOpen;
      lwNuevoDoc := COPYSTR(wDialog.FileName,1,MAXSTRLEN(lwNuevoDoc));
      EXIT(lwNuevoDoc);
    END;

    PROCEDURE ImprimeDocumentoWord@1100253003(pwNombreArchivo@1100253001 : Text[250];pwTexto@1100253000 : ARRAY [5] OF Text[250]);
    VAR
      lwCont@1100253002 : Integer;
      lwBol@1100253003 : Boolean;
    BEGIN
      // ImprimeDocumentoDescriptivo
      // pwTexto es una matriz con los texto a insertar al documento

      IF NOT EXISTS(pwNombreArchivo) THEN
        ERROR(Text023, pwNombreArchivo);


      IF ISCLEAR(wWApp) THEN
        CREATE(wWApp);

      wWDoc := wWApp.Documents.Open(pwNombreArchivo);
      wWSel:=wWApp.Selection;

      FOR lwCont:= 1 TO ARRAYLEN(pwTexto) DO BEGIN
        IF pwTexto[lwCont] <> '' THEN BEGIN
          wWSel.TypeParagraph;
          wWSel.TypeText(pwTexto[lwCont]);
        END;
      END;
      wWApp.PrintOut;
      lwBol:=FALSE; // Para que no guarde los cambios
      wWDoc.Close(lwBol);
      CLEAR(wWApp);
    END;

    PROCEDURE Ense¤aDocumentoWord@1100253002(pwNombreArchivo@1100253000 : Text[250]);
    BEGIN
      // Ense¤aDocumentoDescriptivo

      IF NOT EXISTS(pwNombreArchivo) THEN
        ERROR(Text023, pwNombreArchivo);


      IF ISCLEAR(wWApp) THEN
        CREATE(wWApp);
      wWDoc := wWApp.Documents.Open(pwNombreArchivo);
      wWApp.Visible := TRUE;
      wWApp.ShowMe;
      CLEAR(wWApp);
    END;

    PROCEDURE ImprimeDocumento@1100253004(pwNombreArchivo@1100253000 : Text[250]);
    BEGIN
      // ImprimeDocumento

      IF NOT EXISTS(pwNombreArchivo) THEN
        ERROR(Text023, pwNombreArchivo);

      IF ISCLEAR(wEject) THEN
        CREATE(wEject);
      wEject.Ejecuta(2,pwNombreArchivo,'',1);
      CLEAR(wEject);
    END;

    PROCEDURE Ense¤aDocumento@1100253005(pwNombreArchivo@1100253000 : Text[250]);
    BEGIN
      // Ense¤aDocumento

      IF NOT EXISTS(pwNombreArchivo) THEN
        ERROR(Text023, pwNombreArchivo);

      IF ISCLEAR(wEject) THEN
        CREATE(wEject);
      wEject.Ejecuta(1,pwNombreArchivo,'',12);
      CLEAR(wEject);
    END;

    PROCEDURE ExploraDir@1100253006(pwDirectorio@1100253000 : Text[250]);
    BEGIN
      // ExploraDir
      // Explora el Directorio especificado
      // Debe ser un Directorio, No la ruta de un archivo

      IF ISCLEAR(wEject) THEN
        CREATE(wEject);
      wEject.Ejecuta(3,pwDirectorio,'',12);
      CLEAR(wEject);
    END;

    PROCEDURE CreaTempCI@1103355001(VAR prTempCI@1103355000 : TEMPORARY Record 7010414;pwNParte@1103355001 : Code[10];pwIncCoste@1103355006 : Boolean;pwTTOO@1103355007 : Code[10]);
    VAR
      lrCI@1103355002 : Record 7010414;
      lrPI@1103355004 : Record 7035392;
      lrPC@1103355005 : Record 7035393;
      lwNo@1103355003 : Integer;
    BEGIN
      // CreaTempCI
      // Crea un temporal con todas las lineas de Coste, Facturaci¢n y producci¢n Juntas
      // pwIncCoste indica si se incluye el coste o solo el ingreso (facturacion + produccion)

      CLEAR(prTempCI);
      prTempCI.DELETEALL;
      CLEAR(lwNo);

      IF pwNParte = '' THEN // Sin numero de parte salimos
        EXIT;

      // Ingreso Facturado
      CLEAR(lrCI);
      lrCI.SETRANGE("N§ Parte", pwNParte);
      // AJF 18/06/08 A¤ado el parametro para que filtre la lineas por ttoo.
      IF pwTTOO <> '' THEN
        lrCI.SETRANGE(Touroperador, pwTTOO);

      IF lrCI.FINDSET THEN BEGIN
        REPEAT
          lwNo +=1;
          prTempCI := lrCI;
          prTempCI."N§ Linea" := lwNo;
          prTempCI.Concepto   := prTempCI.Concepto::Ingreso;
          prTempCI.INSERT;
        UNTIL lrCI.NEXT = 0;
      END;

      // Producci¢n Ingreso
      CLEAR(lrPI);
      lrPI.SETRANGE("N§ Parte", pwNParte);
      // AJF 18/06/08 A¤ado el parametro para que filtre la lineas por ttoo.
      IF pwTTOO <> '' THEN
        lrPI.SETRANGE(Touroperador, pwTTOO);

      IF lrPI.FINDSET THEN BEGIN
        REPEAT
          lwNo +=1;
          prTempCI.TRANSFERFIELDS(lrPI);
          prTempCI."N§ Linea" := lwNo;
          prTempCI.Concepto := prTempCI.Concepto::Produccion;
          prTempCI.INSERT;
        UNTIL lrPI.NEXT=0;
      END;

      IF pwIncCoste THEN BEGIN
        // Produccion Coste
        CLEAR(lrPC);
        lrPC.SETRANGE("N§ Parte", pwNParte);
        // AJF 18/06/08 A¤ado el parametro para que filtre la lineas por ttoo.
        IF pwTTOO <> '' THEN
          lrPC.SETRANGE(Touroperador, pwTTOO);

        IF lrPC.FINDSET THEN BEGIN
          REPEAT
            lwNo +=1;
            prTempCI.TRANSFERFIELDS(lrPC);
            prTempCI."N§ Linea" := lwNo;
            prTempCI.Concepto   := prTempCI.Concepto::Coste;
            prTempCI.INSERT;
          UNTIL lrPC.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE BorraTemporales@1103355002();
    VAR
      lwDire@1103355000 : Text[1024];
      lrArch@1103355001 : Record 2000000022;
      lwOk@1103355002 : Boolean;
    BEGIN
      // BorraTemporales
      // Borra los temporales que puediesen quedar de otras veces

      rPar.FINDFIRST; // Esta funci¢n esta parametrizada
      IF NOT rPar."Elimina Temporales" THEN
        EXIT;

      lwDire:=ENVIRON(Text50005);
      IF lwDire='' THEN
        EXIT;

      CLEAR(lrArch);
      lrArch.SETRANGE(Path,lwDire);
      lrArch.SETRANGE("Is a file", TRUE);
      IF lrArch.FINDSET THEN BEGIN
        REPEAT
          IF STRPOS(lrArch.Name, Text50006) <> 0 THEN BEGIN // Solo borramos los remporales de Navision
            lwOk := ERASE(lwDire + '\' + lrArch.Name);
          END;
        UNTIL lrArch.NEXT=0;
      END;
    END;

    PROCEDURE DTtoBIGINT@1103355003(pwDT@1103355000 : DateTime) : BigInteger;
    VAR
      lwBI@1103355001 : BigInteger;
      lwBIT@1103355002 : Text[30];
    BEGIN
      // DTtoBIGINT
      // JPT 02/02/10 Se traspasa un DateTime a BigInteger en el formato
      // <A¥O,4 d¡gitos><MES,2 d¡gitos><DIA,2 d¡gitos><HORA(de 0 a 24),2 d¡gitos ><MINUTOS,2 d¡gitos >

      IF (pwDT = 0DT) THEN
        EXIT;

      CLEAR(lwBI);
      CLEAR(lwBIT);
      lwBIT := FORMAT(pwDT, 0, '<Year4><Month,2><Day,2><Hours24,2><Minutes,2>');
      EVALUATE(lwBI, lwBIT);
      EXIT(lwBI)
    END;

    PROCEDURE DTtoBIGINT2@1103355004(pwDT@1103355000 : DateTime) : BigInteger;
    VAR
      lwBI@1103355002 : BigInteger;
      lwT@1103355001 : Time;
      lwD@1103355003 : Date;
      lwInt@1103355004 : Integer;
    BEGIN
      // DTtoBIGINT2
      // Otra manera de hacer lo mismo
      // JPT 02/02/10 Se traspasa un DateTime a BigInteger en el formato
      // <A¥O,4 d¡gitos><MES,2 d¡gitos><DIA,2 d¡gitos><HORA(de 0 a 24),2 d¡gitos ><MINUTOS,2 d¡gitos >

      IF (pwDT = 0DT) THEN
        EXIT;

      lwD := DT2DATE(pwDT);
      lwT := DT2TIME(pwDT);
      CLEAR(lwBI);
      lwBI := DATE2DMY(lwD,3);
      lwBI := lwBI * 100000000;
      lwBI += DATE2DMY(lwD,2) * 1000000;
      lwBI += DATE2DMY(lwD,1) * 10000;
      lwInt := (lwT - 000000T) DIV 3600000;
      lwBI += lwInt * 100;
      lwInt := ((lwT - 000000T)- (lwInt * 3600000)) DIV 60000;
      lwBI += lwInt;

      EXIT(lwBI)
    END;

    PROCEDURE BIGINTtoDT@1103355005(pwBI@1103355000 : BigInteger) : DateTime;
    VAR
      lwDT@1103355001 : DateTime;
      lwDTtx@1103355002 : Text[30];
      lwBItx@1103355003 : Text[30];
    BEGIN
      // BIGINTtoDT
      // JPT 02/02/10 Se traspasa un BigInteger en el formato
      // <A¥O,4 d¡gitos><MES,2 d¡gitos><DIA,2 d¡gitos><HORA(de 0 a 24),2 d¡gitos ><MINUTOS,2 d¡gitos >
      // a DateTime

      IF pwBI=0 THEN
        EXIT;

      lwBItx := FORMAT(pwBI);
      WHILE STRLEN(lwBItx) < 12 DO
        lwBItx := '0' + lwBItx;

      lwDTtx := COPYSTR(lwBItx,7,2) + COPYSTR(lwBItx,5,2) + COPYSTR(lwBItx,1,4) + ' ' + COPYSTR(lwBItx,9,2) + COPYSTR(lwBItx,11,2);
      EVALUATE(lwDT, lwDTtx);
      EXIT(lwDT);
    END;

    PROCEDURE BIGINTtoDT2@1103355006(pwBI@1103355000 : BigInteger) : DateTime;
    VAR
      lwInts@1103355001 : ARRAY [5] OF Decimal;
      lwBI@1103355002 : BigInteger;
      lwDT@1103355003 : DateTime;
    BEGIN
      // BIGINTtoDT2
      // Otra manera de hacer lo mismo
      // JPT 02/02/10 Se traspasa un BigInteger en el formato
      // <A¥O,4 d¡gitos><MES,2 d¡gitos><DIA,2 d¡gitos><HORA(de 0 a 24),2 d¡gitos ><MINUTOS,2 d¡gitos >
      // a DateTime

      IF pwBI=0 THEN
        EXIT;

      CLEAR(lwInts);
      lwBI := pwBI;

      lwInts[1] := lwBI DIV 100000000;
      lwBI -=  lwInts[1] * 100000000;
      lwInts[2] := lwBI DIV 1000000;
      lwBI -=  lwInts[2] * 1000000;
      lwInts[3] := lwBI DIV 10000;
      lwBI -=  lwInts[3] * 10000;
      lwInts[4] := lwBI DIV 100;
      lwBI -=  lwInts[4] * 100;
      lwInts[5] := lwBI;
      lwDT := CREATEDATETIME(DMY2DATE(lwInts[3],lwInts[2],lwInts[1]), 000000T+(((lwInts[4]*60)+lwInts[5]) * 60000));

      EXIT(lwDT)
    END;

    EVENT wWApp@1100253008::Quit@2();
    BEGIN
    END;

    EVENT wWApp@1100253008::DocumentChange@3();
    BEGIN
    END;

    EVENT wWApp@1100253008::DocumentOpen@4(Doc@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document");
    BEGIN
    END;

    EVENT wWApp@1100253008::DocumentBeforeClose@6(Doc@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::DocumentBeforePrint@7(Doc@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::DocumentBeforeSave@8(Doc@1000000002 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";VAR SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::NewDocument@9(Doc@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document");
    BEGIN
    END;

    EVENT wWApp@1100253008::WindowActivate@10(Doc@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";Wn@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020962-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Window");
    BEGIN
    END;

    EVENT wWApp@1100253008::WindowDeactivate@11(Doc@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";Wn@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020962-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Window");
    BEGIN
    END;

    EVENT wWApp@1100253008::WindowSelectionChange@12(Sel@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020975-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Selection");
    BEGIN
    END;

    EVENT wWApp@1100253008::WindowBeforeRightClick@13(Sel@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020975-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Selection";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::WindowBeforeDoubleClick@14(Sel@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020975-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Selection";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::EPostagePropertyDialog@15(Doc@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document");
    BEGIN
    END;

    EVENT wWApp@1100253008::EPostageInsert@16(Doc@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document");
    BEGIN
    END;

    EVENT wWApp@1100253008::MailMergeAfterMerge@17(Doc@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";DocResult@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document");
    BEGIN
    END;

    EVENT wWApp@1100253008::MailMergeAfterRecordMerge@18(Doc@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document");
    BEGIN
    END;

    EVENT wWApp@1100253008::MailMergeBeforeMerge@19(Doc@1000000003 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";StartRecord@1000000002 : Integer;EndRecord@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::MailMergeBeforeRecordMerge@20(Doc@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::MailMergeDataSourceLoad@21(Doc@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document");
    BEGIN
    END;

    EVENT wWApp@1100253008::MailMergeDataSourceValidate@22(Doc@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";VAR Handled@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::MailMergeWizardSendToCustom@23(Doc@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document");
    BEGIN
    END;

    EVENT wWApp@1100253008::MailMergeWizardStateChange@24(Doc@1000000003 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";VAR FromState@1000000002 : Variant;VAR ToState@1000000001 : Variant;VAR Handled@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::WindowSize@25(Doc@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";Wn@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020962-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Window");
    BEGIN
    END;

    EVENT wWApp@1100253008::XMLSelectionChange@26(Sel@1000000003 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020975-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Selection";OldXMLNode@1000000002 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{09760240-0B89-49F7-A79D-479F24723F56}:'Microsoft Word 15.0 Object Library'.XMLNode";NewXMLNode@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{09760240-0B89-49F7-A79D-479F24723F56}:'Microsoft Word 15.0 Object Library'.XMLNode";VAR Reason@1000000000 : Integer);
    BEGIN
    END;

    EVENT wWApp@1100253008::XMLValidationError@27(XMLNode@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{09760240-0B89-49F7-A79D-479F24723F56}:'Microsoft Word 15.0 Object Library'.XMLNode");
    BEGIN
    END;

    EVENT wWApp@1100253008::DocumentSync@28(Doc@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT wWApp@1100253008::EPostageInsertEx@29(Doc@1000000010 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";cpDeliveryAddrStart@1000000009 : Variant;cpDeliveryAddrEnd@1000000008 : Variant;cpReturnAddrStart@1000000007 : Variant;cpReturnAddrEnd@1000000006 : Variant;xaWidth@1000000005 : Variant;yaHeight@1000000004 : Variant;bstrPrinterName@1000000003 : Text[1024];bstrPaperFeed@1000000002 : Text[1024];fPrint@1000000001 : Boolean;VAR fCancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::MailMergeDataSourceValidate2@30(Doc@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{00020906-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Document";VAR Handled@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::ProtectedViewWindowOpen@31(PvWindow@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{F743EDD0-9B97-4B09-89CC-77BE19B51481}:'Microsoft Word 15.0 Object Library'.ProtectedViewWindow");
    BEGIN
    END;

    EVENT wWApp@1100253008::ProtectedViewWindowBeforeEdit@32(PvWindow@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{F743EDD0-9B97-4B09-89CC-77BE19B51481}:'Microsoft Word 15.0 Object Library'.ProtectedViewWindow";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::ProtectedViewWindowBeforeClose@33(PvWindow@1000000002 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{F743EDD0-9B97-4B09-89CC-77BE19B51481}:'Microsoft Word 15.0 Object Library'.ProtectedViewWindow";CloseReason@1000000001 : Variant;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWApp@1100253008::ProtectedViewWindowSize@34(PvWindow@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{F743EDD0-9B97-4B09-89CC-77BE19B51481}:'Microsoft Word 15.0 Object Library'.ProtectedViewWindow");
    BEGIN
    END;

    EVENT wWApp@1100253008::ProtectedViewWindowActivate@35(PvWindow@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{F743EDD0-9B97-4B09-89CC-77BE19B51481}:'Microsoft Word 15.0 Object Library'.ProtectedViewWindow");
    BEGIN
    END;

    EVENT wWApp@1100253008::ProtectedViewWindowDeactivate@36(PvWindow@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{F743EDD0-9B97-4B09-89CC-77BE19B51481}:'Microsoft Word 15.0 Object Library'.ProtectedViewWindow");
    BEGIN
    END;

    EVENT wWDoc@1100253006::New@4();
    BEGIN
    END;

    EVENT wWDoc@1100253006::Open@5();
    BEGIN
    END;

    EVENT wWDoc@1100253006::Close@6();
    BEGIN
    END;

    EVENT wWDoc@1100253006::Sync@7(SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT wWDoc@1100253006::XMLAfterInsert@8(NewXMLNode@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{09760240-0B89-49F7-A79D-479F24723F56}:'Microsoft Word 15.0 Object Library'.XMLNode";InUndoRedo@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWDoc@1100253006::XMLBeforeDelete@9(DeletedRange@1000000002 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{0002095E-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Range";OldXMLNode@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{09760240-0B89-49F7-A79D-479F24723F56}:'Microsoft Word 15.0 Object Library'.XMLNode";InUndoRedo@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWDoc@1100253006::ContentControlAfterAdd@12(NewContentControl@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{EE95AFE3-3026-4172-B078-0E79DAB5CC3D}:'Microsoft Word 15.0 Object Library'.ContentControl";InUndoRedo@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWDoc@1100253006::ContentControlBeforeDelete@13(OldContentControl@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{EE95AFE3-3026-4172-B078-0E79DAB5CC3D}:'Microsoft Word 15.0 Object Library'.ContentControl";InUndoRedo@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWDoc@1100253006::ContentControlOnExit@14(ContentControl@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{EE95AFE3-3026-4172-B078-0E79DAB5CC3D}:'Microsoft Word 15.0 Object Library'.ContentControl";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT wWDoc@1100253006::ContentControlOnEnter@15(ContentControl@1000000000 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{EE95AFE3-3026-4172-B078-0E79DAB5CC3D}:'Microsoft Word 15.0 Object Library'.ContentControl");
    BEGIN
    END;

    EVENT wWDoc@1100253006::ContentControlBeforeStoreUpdate@16(ContentControl@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{EE95AFE3-3026-4172-B078-0E79DAB5CC3D}:'Microsoft Word 15.0 Object Library'.ContentControl";VAR Content@1000000000 : Text[1024]);
    BEGIN
    END;

    EVENT wWDoc@1100253006::ContentControlBeforeContentUpdate@17(ContentControl@1000000001 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{EE95AFE3-3026-4172-B078-0E79DAB5CC3D}:'Microsoft Word 15.0 Object Library'.ContentControl";VAR Content@1000000000 : Text[1024]);
    BEGIN
    END;

    EVENT wWDoc@1100253006::BuildingBlockInsert@18(Range@1000000004 : Automation "{00020905-0000-0000-C000-000000000046} 8.6:{0002095E-0000-0000-C000-000000000046}:'Microsoft Word 15.0 Object Library'.Range";Name@1000000003 : Text[1024];Category@1000000002 : Text[1024];BlockType@1000000001 : Text[1024];Template@1000000000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      JPT 02/02/10 Datetime a Biginteger
      Los campos Datetime tienen ahora un Biginteger analogo para evitar las modificaciones en el cambio horario

      //. Automation utilizados como globales
      Name      DataType      Subtype
      wDialog   OCX           Microsoft Common Dialog Control, version 6.0
      wWApp     Automation    'Microsoft Word 15.0 Object Library'.Application
      wWSel     Automation    'Microsoft Word 15.0 Object Library'.Selection
      wWDoc     Automation    'Microsoft Word 15.0 Object Library'.Document
      wWords    Automation    'Microsoft Word 15.0 Object Library'.Words
      wEject    Automation    'EjectXXL Library'.ExecXXL

      $001 AJS 12022015 Sustituyo el uso de la OCX de enviar mail por la codeunit SMTP Mail del estandar
    }
    END.
  }
}
