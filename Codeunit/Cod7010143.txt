OBJECT Codeunit 7010143 Calcular servicios excursiones
{
  OBJECT-PROPERTIES
  {
    Date=28/05/15;
    Time=10:56:42;
    Modified=Yes;
    Version List=AIC2009,CNT-OC-14047;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100217000 : TextConst 'ENU=There is no rate for excursion %1 day %2.;ESP=No existe tarifa para la excursion %1 el dia %2.';
      Text002@1103355092 : TextConst 'ENU=Calculating cost and incomes from excursions;ESP=Calculando costes e ingresos de excursiones';
      Text003@1103355093 : TextConst 'ENU=Service #1#####;ESP=Servicio #1#####';
      Text004@1103355094 : TextConst 'ENU=Provisions for this service has not been marked;ESP=No se han marcado prestaciones para este servicio';
      Text005@1103355095 : TextConst 'ENU=Purchase zones do not exist in contract;ESP=No existen zonas de compra en contrato';
      Text006@1103355096 : TextConst 'ENU=There are no purchase prices for carrier contract;ESP=No hay precios de compra para el contrato transportista';
      Text007@1103355097 : TextConst 'ENU=There is no purchase data for transfer;ESP=No se han encontrado datos de compra para el traslado.';
      Text008@1103355098 : TextConst 'ENU=EXAC;ESP=EXAC';
      Text009@1103355099 : TextConst 'ENU=There are prices for adults but not for childrens. Clear it;ESP=Existe precios para adultos pero no para ni¤os. Definalo';
      Text020@1103355110 : TextConst 'ENU=EXCC;ESP=EXCC';
      Text021@1103355111 : TextConst 'ENU=Base;ESP=Base';
      Text022@1103355112 : TextConst 'ENU=There are no prices for dates or ranges, contr:;ESP=No hay precios para las fechas o rangos, contr:';
      Text023@1103355113 : TextConst 'ENU=" Suppl:";ESP=" Prov:"';
      Text024@1103355114 : TextConst 'ENU=There are no exc prices, Contr.;ESP=No hay precios de exc., Contr.';
      Text025@1103355115 : TextConst 'ENU=OFFER;ESP=OFERTA';
      Text026@1103355116 : TextConst 'ENU=Must indicate the affected paxes by supplement %1;ESP=Se deben indicar los paxes afectados por el suplemento %1';
      Text027@1103355117 : TextConst 'ENU=Contract for Official Guide was not found;ESP=No se ha encontrado contrato para el guia oficial.';
      Text028@1103355118 : TextConst 'ENU=There are no prices of Official Guide for service date;ESP=No existen precios de Guia Oficial para la fecha del servicio';
      Text029@1103355119 : TextConst 'ENU=There are no prices for supplement;ESP=No existen precios para el suplemento';
      Text030@1103355120 : TextConst 'ENU=SURCHARGE;ESP=SUPLEMEN';
      Text031@1103355121 : TextConst 'ENU=EXGO;ESP=EXGO';
      Text032@1103355122 : TextConst 'ENU=There is no cleared purchase VAT;ESP=No hay IVA de compra definido';
      Text037@1103355127 : TextConst 'ENU=EXCI;ESP=EXCI';
      Text038@1103355128 : TextConst 'ENU=Sure about to calculate the service again?;ESP=¨Seguro que desea recalcular el servicio?';
      Text049@1103355139 : TextConst 'ENU=There is no price for surcharge;ESP=No tenemos precio para suplemento';
      Text050@1103355140 : TextConst 'ENU=,contract;ESP=,contrato';
      Text051@1103355141 : TextConst 'ENU=Surcharge was not found;ESP=No se encuentra el suplemento';
      Text052@1103355142 : TextConst 'ENU=" in contract";ESP=" en contrato"';
      Text053@1103355143 : TextConst 'ENU=There is no contract;ESP=No tenemos contrato';
      Text056@1103355146 : TextConst 'ENU=Would you like to calculate all filtered services?;ESP=¨Desea realmente calcular todas los servicios filtrados?';
      Text058@1103355148 : TextConst 'ENU=Any booking was found;ESP=No se encontr¢ ninguna reserva';
      rPar@1103355000 : Record 7009700;
      rErr@1103355001 : Record 7010175;
      rTOTmp@1100217004 : TEMPORARY Record 7010162;
      rTOTmpSop@1100217005 : TEMPORARY Record 7010162;
      rRsv@1103355005 : Record 7010162;
      rRsv2@1103355006 : Record 7010162;
      rZonExcCon@1103355009 : Record 7010149;
      rConCom@1103355010 : Record 7010142;
      rPreComTra@1103355011 : Record 7010150;
      rPreComTra2@1103355012 : Record 7010150;
      rPreComTra3@1103355013 : Record 7010150;
      rPreComPrv@1103355016 : Record 7010151;
      rPreGO@1103355017 : Record 7010154;
      rSupSer@1103355018 : Record 7010171;
      rMar@1103355020 : Record 7010174;
      rCI@1103355021 : Record 7010166;
      rPrs@1103355022 : Record 7010170;
      rZonSer@1103355023 : Record 7010173;
      rParPer@1103355024 : Record 7009701;
      cFunExc@1100217003 : Codeunit 7010141;
      Window@1103355047 : Dialog;
      J@1100217001 : Integer;
      "N.Adultos"@1103355060 : Integer;
      "N.Ni¤os"@1103355061 : Integer;
      CantAdultos@1103355065 : Integer;
      CantNi¤os@1103355066 : Integer;
      Cant_Real@1100217006 : Decimal;
      wNumPaxLiqTra@1103355080 : Decimal;
      wNumPaxLiqGO@1103355081 : Decimal;
      w_rango_busca_precio@1103355088 : Decimal;
      Text059@1100253000 : TextConst 'ENU=There are no reservations for the support service %1;ESP=No existen reservas para el servicio soporte %1';
      Text060@1100253001 : TextConst 'ESP=No se ha encontrado contrato de compra %1';
      Text061@1100253002 : TextConst 'ESP=No hay Zona Compra para %1 en Contrato %2';
      Text062@1100253003 : TextConst 'ESP=No se ha encontrado precio de compra %1';
      Text063@1100253004 : TextConst 'ENU=zone:;ESP=zona:';
      ImporteProv@1100253005 : Decimal;
      Text070@1100253006 : TextConst 'ESP=TRNS_SUPRT';
      Text071@1100217002 : TextConst 'ENU=You have indicated adults in the supplement %1 but there are no billing adults in the service.;ESP=Ha especificado adultos en el suplemento %1 pero no hay adultos facturables en el servicio.';
      Text072@1100217007 : TextConst 'ENU=You have indicated childs in the supplement %1 but there are no billing childs in the service.;ESP=Ha especificado ni¤os en el suplemento %1 pero no hay ni¤os facturables en el servicio.';
      vOfertaAplicada@1000000000 : Boolean;

    PROCEDURE CostesIngresosExcursion@3(rSer@1103355000 : Record 7010163;pwVerbose@1100217003 : Boolean);
    VAR
      lcFunSeg@1100217000 : Codeunit 7009751;
      lcCosteTicket@1100217002 : Codeunit 7010170;
      lrExc@1100217001 : Record 7009710;
    BEGIN
      // CostesIngresosExcursion

      CLEARALL();

      lcFunSeg.TienePermiso('EXC-CAL-SER', TRUE); //+$018

      rPar.FINDFIRST;
      rParPer.FINDFIRST;

      Window.OPEN(Text002 + '\' + Text003);
      Window.UPDATE(1, rSer."N§ Servicio");

      RegeneraZonasServicio(rSer);
      COMMIT;

      BorraRegistros(rSer, pwVerbose); //+$040

      IF rSer."Tipo Calculo" <> rSer."Tipo Calculo"::Coste THEN
        IngresosExcursion(rSer);

      //+$021 <
      lrExc.GET(rSer.Excursion);
      IF NOT lrExc."Excursion sin coste" THEN //+$044
      BEGIN
        IF lrExc."Coste x ticket" THEN
          lcCosteTicket.CosteReservas(rSer, 0) //+$047
        ELSE
        //+$021 >
        BEGIN
          CostesExcursion(rSer);

          _RepartirCosteTouroperador(rSer);
        END;
      END;

      rSer."Pendiente Recalcular":= FALSE;

      //. Rellenamos el % Margen Beneficio
      rSer.VALIDATE("Margen Beneficio", CalculaBeneficio(rSer));
      rSer.MODIFY;

      Window.CLOSE;
    END;

    PROCEDURE CostesExcursion@1(rSer@1103355000 : Record 7010163);
    VAR
      lrSop@1100253000 : Record 7010206;
      lrExc@1100217000 : Record 7009710;
    BEGIN
      // CostesExcursion

      rSer.CALCFIELDS(rSer."Num personas servicio", "N§ Adultos", "N§ Ni¤os");

      rPrs.RESET;
      rPrs.SETRANGE("N§ Servicio", rSer."N§ Servicio");
      rPrs.SETRANGE(Aplicacion   , TRUE);
      IF rPrs.FINDSET THEN
        REPEAT
          BuscaContratoCompra(rSer);

          CASE rSer."Tipo Calculo" OF
            rSer."Tipo Calculo"::Margenes: CLEAR(rMar);
            rSer."Tipo Calculo"::"C/I", rSer."Tipo Calculo"::Coste: CLEAR(rCI);
          END;

          CASE rPrs."Tipo Contrato" OF
          rPrs."Tipo Contrato"::Transportista:
               BEGIN
                 TR_Traduce_Compra(rSer);
                 TR_Autocar(rSer);
               END;
          rPrs."Tipo Contrato"::Excursion:
               BEGIN
                 EX_ProveedorExcursion(rSer);
               END;
          rPrs."Tipo Contrato"::"Guia Oficial":
               BEGIN
                 GO_Cond_GO(rSer);
               END;
          END;

          //+033 <
          rPrs."N§ Personas" := rSer."Num personas servicio";
          rPrs.Adultos       := rSer."N§ Adultos";
          rPrs.Ni¤os         := rSer."N§ Ni¤os";
          rPrs.Proveedor     := rConCom.Proveedor;
          rPrs.MODIFY;
          //+033 >
        UNTIL rPrs.NEXT = 0
      ELSE
      BEGIN
        //+$037
        lrExc.GET(rSer.Excursion);
        IF NOT lrExc."Excursion sin coste" THEN
          _InsertaError(rSer, Text004);
        //+$037
      END;

      EX_SuplemExc(rSer);

      // $012
      CLEAR(lrSop);
      lrSop.SETRANGE(Delegacion   , rSer.Delegacion);
      lrSop.SETRANGE("N§ Servicio", rSer."N§ Servicio");
      IF lrSop.FINDSET THEN BEGIN
        REPEAT
          _CalculaTransporteSoporte(lrSop);
        UNTIL lrSop.NEXT=0;
      END;
    END;

    PROCEDURE BuscaContratoCompra@12(rSer@1103355000 : Record 7010163);
    BEGIN
      // BuscaContratoCompra

      CLEAR(rConCom);
      rConCom.RESET;
      rConCom.SETRANGE(Delegacion          , rPrs.Delegacion);
      rConCom.SETRANGE("N§ Contrato compra", rPrs."N§ Contrato");
      rConCom.SETRANGE("Tipo Contrato"     , rPrs."Tipo Contrato");
      rConCom.SETRANGE(Confirmado          , TRUE);
      IF rConCom.FINDSET THEN REPEAT
        IF (rSer.Fecha >= rConCom."Fecha inicio contrato") AND
           (rSer.Fecha <= rConCom."Fecha final contrato") THEN
          EXIT;
      UNTIL rConCom.NEXT = 0;
    END;

    PROCEDURE TR_Traduce_Compra@9(rSer@1103355000 : Record 7010163);
    VAR
      ZonaFisAux@1103355001 : Code[10];
    BEGIN
      // TR_Traduce_Compra

      rZonExcCon.RESET;
      rZonExcCon.SETRANGE("Codigo Contrato", rConCom."N§ Contrato compra");
      rZonExcCon.SETRANGE("Tipo Contrato"  , rZonExcCon."Tipo Contrato"::Compra);

      CLEAR(ZonaFisAux);

      rRsv.RESET;
      rRsv.SETCURRENTKEY("N§ Servicio",
                         TourOperador,
                         "Zona Hotel");
      rRsv.SETRANGE("N§ Servicio", rSer."N§ Servicio");
      IF rRsv.FINDSET(TRUE) THEN REPEAT
        IF (rRsv."Zona Hotel" <> ZonaFisAux) THEN
        BEGIN
          ZonaFisAux := rRsv."Zona Hotel";

          rZonExcCon.SETRANGE("Zona Fisica", rRsv."Zona Hotel");
          IF rZonExcCon.FINDFIRST THEN
          BEGIN
            //-$041rRsv."Zona Compra"   := rZonExcCon.Zona;
            //-$041rRsv.MODIFY;

            //-002rZonSer.INIT;
            CLEAR(rZonSer);
            rZonSer.Delegacion   := rSer.Delegacion;
            rZonSer."N§ Servicio":= rRsv."N§ Servicio";
            rZonSer.Zona         := rZonExcCon.Zona;
            rZonSer."Tipo zona"  := rZonSer."Tipo zona"::Compra;
            rZonSer.Alejamiento  := rZonExcCon.Orden;
            IF NOT rZonSer.FIND THEN //+002
              rZonSer.INSERT;    //+002
            //-002IF NOT rZonSer.INSERT THEN
          END;
        END
        ELSE
        BEGIN
          //-$041rRsv."Zona Compra":= rZonExcCon.Zona;
          //-$041rRsv.MODIFY;
        END;
      UNTIL rRsv.NEXT= 0;
    END;

    PROCEDURE TR_Autocar@11(rSer@1103355000 : Record 7010163);
    BEGIN
      // TR_Autocar

      TR_Busca_Zona_Compra(rSer);

      rPreComTra.RESET;
      rPreComTra.SETRANGE("Tipo precio", rPreComTra."Tipo precio"::"Precio zona");
      rPreComTra.SETRANGE("N§ Contrato", rConCom."N§ Contrato compra");
      rPreComTra.SETRANGE(Producto     , rSer.Excursion);
      rPreComTra.SETRANGE(Zona         , rZonSer.Zona);
      TR_LineaCoste(rSer);
    END;

    PROCEDURE TR_Busca_Zona_Compra@13(rSer@1103355000 : Record 7010163);
    BEGIN
      // TR_Busca_Zona_Compra

      rZonSer.RESET;
      rZonSer.SETCURRENTKEY(Alejamiento);
      rZonSer.SETRANGE(Delegacion   , rSer.Delegacion);
      rZonSer.SETRANGE("N§ Servicio", rSer."N§ Servicio");
      rZonSer.SETRANGE("Tipo zona"  , rZonSer."Tipo zona"::Compra);

      IF NOT rZonSer.FINDLAST THEN
        _InsertaError(rSer, Text005+ STRSUBSTNO('%1', rConCom."N§ Contrato compra"));
    END;

    PROCEDURE TR_LineaCoste@14(rSer@1103355000 : Record 7010163);
    VAR
      lwEncontrado@1100217000 : Boolean;
    BEGIN
      // TR_LineaCoste

      TR_Com_Minimo(rSer);

      lwEncontrado := FALSE;

      rPreComTra.SETRANGE("Tipo vehiculo", rSer."Tipo Vehiculo");
      rPreComTra.SETRANGE("Codigo suplemento", '');
      rPreComTra.SETFILTER("Fecha desde" , '<=%1', rSer.Fecha);
      rPreComTra.SETFILTER("Fecha hasta" , '>=%1', rSer.Fecha);
      rPreComTra.SETFILTER("Rango desde" , '<=%1', ROUND(w_rango_busca_precio, 1));
      rPreComTra.SETFILTER("Rango hasta" , '>=%1', ROUND(w_rango_busca_precio, 1));
      IF NOT rPreComTra.FINDFIRST THEN
      BEGIN
        rPreComTra.SETRANGE("Tipo vehiculo", '');
        IF NOT rPreComTra.FINDFIRST THEN
        BEGIN
          IF wNumPaxLiqTra <> 0 THEN
            _InsertaError(rSer, Text006 + ' ' + rConCom."N§ Contrato compra");
        END
        ELSE
          lwEncontrado := TRUE;
      END
      ELSE
        lwEncontrado := TRUE;

      IF lwEncontrado THEN
      BEGIN
        //-$039IF (rSer.Minimos) AND (rConCom.OLD_Minimos <> 0) AND
        //-$039   (rConCom.OLD_Minimos > wNumPaxLiqTra) THEN
        //-$039BEGIN
        //-$039  wNumPaxLiqTra := rConCom.OLD_Minimos;
        //-$039  //-003TR_Linea_Transportista(rSer, wNumPaxLiqTra, 0, '', rPreComTra."Precio (DL)", TRUE, Cant_Real);
        //-$039  TR_Linea_Transportista(rSer, wNumPaxLiqTra, 0, '', rPreComTra.Precio, TRUE, Cant_Real); //+003
        //-$039END
        //-$039ELSE
        //-$039BEGIN

        CASE rPreComTra."Tipo aplicacion" OF
          rPreComTra."Tipo aplicacion"::Pax     : TR_Precio_Pax(rSer);
          rPreComTra."Tipo aplicacion"::Vehiculo: TR_Precio_Vehiculo(rSer);
        END

        //-$039END;
      END;

      IF wNumPaxLiqTra <> 0 THEN
      BEGIN
        CASE rSer."Tipo Calculo" OF
          rSer."Tipo Calculo"::Margenes:
          BEGIN
            IF rMar.Importe = 0 THEN
            BEGIN
              _InsertaError(rSer, Text007);
            END;
          END;
          rSer."Tipo Calculo"::"C/I", rSer."Tipo Calculo"::Coste: BEGIN
            IF rCI.Importe = 0 THEN
            BEGIN
              _InsertaError(rSer, Text007);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE TR_Com_Minimo@15(rSer@1103355000 : Record 7010163);
    BEGIN
      // TR_Com_Minimo

      IF rConCom."old_Modo contar ni¤os" = rConCom."old_Modo contar ni¤os"::Medio THEN
      BEGIN
        rSer.CALCFIELDS("N§ Adultos", "N§ Ni¤os", "Compra - Adultos Invitados", "Compra - Ni¤os Invitados");

        wNumPaxLiqTra :=  ROUND((rSer."N§ Adultos" - rSer."Compra - Adultos Invitados") +
                                ((rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados") / 2), 0.1);

        //-$039IF (rConCom.OLD_Minimos > wNumPaxLiqTra) AND (rSer.Minimos) THEN
        //-$039  Cant_Real := wNumPaxLiqTra;

        w_rango_busca_precio := ROUND(rSer."N§ Adultos" + (rSer."N§ Ni¤os" / 2), 0.1);
      END
      ELSE
      BEGIN
        rSer.CALCFIELDS("N§ Adultos", "N§ Ni¤os", "Compra - Adultos Invitados", "Compra - Ni¤os Invitados");

        wNumPaxLiqTra :=  ROUND((rSer."N§ Adultos" - rSer."Compra - Adultos Invitados") +
                                (rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados"), 0.1);

        //-$039IF (rConCom.OLD_Minimos > wNumPaxLiqTra) AND (rSer.Minimos) THEN
        //-$039  Cant_Real := wNumPaxLiqTra;

        w_rango_busca_precio := rSer."N§ Adultos" + rSer."N§ Ni¤os";
      END;
    END;

    PROCEDURE TR_Linea_Transportista@16(rSer@1103355000 : Record 7010163;CantidadLinea@1103355001 : Decimal;TipoElementoLinea@1103355002 : Integer;TipoPaxLinea@1103355003 : Code[10];PrecioLinea@1103355004 : Decimal;MinimoLinea@1103355005 : Boolean;PaxAuxiliarLinea@1103355006 : Decimal);
    BEGIN
      // TR_Linea_Transportista

      CASE rSer."Tipo Calculo" OF
        rSer."Tipo Calculo"::Margenes: BEGIN
          rMar.INIT;
          rMar.Delegacion          := rSer.Delegacion;
          rMar."Cantidad Aplicada" := ROUND(CantidadLinea, 0.1);
          rMar.Concepto            := Text008;
          rMar."Personas servicio" := PaxAuxiliarLinea;
          rMar."Tipo Veh¡culos"    := rPreComTra."Tipo vehiculo";
          rMar."Tipo Elemento"     := TipoElementoLinea;
          rMar."Tipo Pax"          := TipoPaxLinea;
          rMar."Precio x Pax"          := -(PrecioLinea);
          rMar.Importe             := -(CantidadLinea * PrecioLinea);
          //-$039rMar.Minimo              := MinimoLinea;
        END;
        rSer."Tipo Calculo"::"C/I", rSer."Tipo Calculo"::Coste: BEGIN
          rCI.INIT;
          rCI.Delegacion          := rSer.Delegacion;
          rCI."Cantidad Aplicada" := CantidadLinea;
          rCI.Concepto            := Text008;
          rCI."Personas servicio" := PaxAuxiliarLinea;
          rCI."Tipo Vehiculo"    := rPreComTra."Tipo vehiculo";
          rCI."Tipo Elemento"     := TipoElementoLinea;
          rCI."Tipo Pax"          := TipoPaxLinea;
          rCI."Precio Pax"        := -(PrecioLinea);
          rCI.Importe             := -(CantidadLinea * PrecioLinea);
          //-$039rCI.Minimo              := MinimoLinea;
        END;
      END;

      ComunesCoste(rSer, rZonSer.Zona);
    END;

    PROCEDURE TR_Precio_Pax@20(rSer@1103355000 : Record 7010163);
    BEGIN
      // TR_Precio_Pax

      rPreComTra2.COPYFILTERS(rPreComTra);
      rSer.CALCFIELDS("N§ Adultos", "N§ Ni¤os", "Compra - Adultos Invitados", "Compra - Ni¤os Invitados");

      rPreComTra2.SETRANGE("Codigo suplemento", rParPer."Codigo Adulto");
      IF rPreComTra2.FINDFIRST THEN
      BEGIN
        rPreComTra3.COPYFILTERS(rPreComTra);
        rPreComTra3.SETRANGE("Codigo suplemento", rParPer."Codigo Ni¤o");
        IF rPreComTra3.FINDFIRST THEN
        BEGIN
          IF (rSer."N§ Adultos" - rSer."Compra - Adultos Invitados") <> 0 THEN
      //-003      TR_Linea_Transportista(rSer, (rSer."N§ Adultos" - rSer."Adultos Invitados"), 0, rParPer."Codigo Adulto",
      //-003                             rPreComTra2."Precio (DL)", FALSE,
      //-003                             (rSer."N§ Adultos" - rSer."Adultos Invitados"));
            TR_Linea_Transportista(rSer, (rSer."N§ Adultos" - rSer."Compra - Adultos Invitados"), 0, rParPer."Codigo Adulto", //+003
                                   rPreComTra2.Precio, FALSE,                                                        //+003
                                   (rSer."N§ Adultos" - rSer."Compra - Adultos Invitados"));                                  //+003

          IF (rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados") <> 0 THEN
      //-003      TR_Linea_Transportista(rSer, (rSer."N§ Ni¤os" - rSer."Ni¤os Invitados"), 0, rParPer."Codigo Ni¤o",
      //-003                             rPreComTra3."Precio (DL)", FALSE,
      //-003                             (rSer."N§ Ni¤os" - rSer."Ni¤os Invitados"));
            TR_Linea_Transportista(rSer, (rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados"), 0, rParPer."Codigo Ni¤o", //+003
                                   rPreComTra3.Precio, FALSE,                                                  //+003
                                   (rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados"));                                //+003
        END
        ELSE
        BEGIN
          _InsertaError(rSer,Text009);
        END;
      END
      ELSE
      BEGIN
      //-003  TR_Linea_Transportista(rSer, wNumPaxLiqTra, 0, '',
      //-003                         rPreComTra."Precio (DL)", FALSE,
      //-003                         ROUND((rSer."N§ Adultos" - rSer."Adultos Invitados") +
      //-003                         ((rSer."N§ Ni¤os" - rSer."Ni¤os Invitados") / 2), 0.01));

        TR_Linea_Transportista(rSer, wNumPaxLiqTra, 0, '',                               //+003
                               rPreComTra.Precio, FALSE,                                 //+003
                               ROUND((rSer."N§ Adultos" - rSer."Compra - Adultos Invitados") +    //+003
                                    ((rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados")), 0.1)); //+003

      END;
    END;

    PROCEDURE TR_Precio_Vehiculo@21(rSer@1103355000 : Record 7010163);
    BEGIN
      // TR_Precio_Vehiculo

      //-003TR_Linea_Transportista(rSer, 1, 0, '', rPreComTra."Precio (DL)", FALSE,
      //-003                        ROUND(rSer."N§ Adultos" + (rSer."N§ Ni¤os" / 2), 0.01));

      TR_Linea_Transportista(rSer, 1, 3, '', rPreComTra.Precio, FALSE, ROUND(rSer."N§ Adultos" + rSer."N§ Ni¤os", 0.1)); //+003
    END;

    PROCEDURE EX_ProveedorExcursion@27(rSer@1103355000 : Record 7010163);
    BEGIN
      // EX_ProveedorExcursion

      rPreComPrv.RESET;
      rPreComPrv.SETRANGE("N§ Contrato"  , rConCom."N§ Contrato compra");
      rPreComPrv.SETRANGE("Tipo precio", rPreComPrv."Tipo precio"::"Precio Excursion");
      EX_PrecioBaseExc(rSer);
      vOfertaAplicada := FALSE;
      rPreComPrv.SETRANGE("Tipo precio", rPreComPrv."Tipo precio"::Promocion); // +$043
      EX_OfertasExc(rSer);                                                     // +$043
      rPreComPrv.SETRANGE("Tipo precio", rPreComPrv."Tipo precio"::Oferta);
      EX_OfertasExc(rSer);
    END;

    PROCEDURE EX_PrecioBaseExc@31(rSer@1103355000 : Record 7010163);
    VAR
      personas_coste@1103355001 : Integer;
      lwImp@1100253000 : Decimal;
      lwImpAd@1100253002 : Decimal;
      lwImpNi@1100253003 : Decimal;
      lwPax@1100253005 : Decimal;
      lwPax2@1100253006 : Decimal;
      lwOK@1100253001 : Boolean;
      lwVuelta@1100253004 : ',Adultos,Ni¤os';
      lwTipoPax@1100253007 : Code[10];
    BEGIN
      // EX_PrecioBaseExc
      // // $013
      // $016 Separamos en Adultos y Ni¤os

      personas_coste := 0;

      CLEAR("N.Adultos");
      CLEAR("N.Ni¤os");

      //-$045CASE rConCom."old_Tipo Facturacion" OF
      //-$045  rConCom."old_Tipo Facturacion"::"Pax Entrados":BEGIN   // pax entrados
          rSer.CALCFIELDS("N§ Adultos", "N§ Ni¤os", "Compra - Adultos Invitados", "Compra - Ni¤os Invitados");
          "N.Adultos":= rSer."N§ Adultos" - rSer."Compra - Adultos Invitados";
          "N.Ni¤os"  := rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados";
      //-$045  END;
      //-$045  rConCom."old_Tipo Facturacion"::"Pax Reservados":BEGIN   // pax reservados
      //-$045    rSer.CALCFIELDS("Adultos Invitados", "Ni¤os Invitados");
      //-$045    "N.Adultos":= rSer."Adultos Reservados" - rSer."Adultos Invitados";
      //-$045    "N.Ni¤os"  := rSer."Ni¤os Reservados" - rSer."Ni¤os Invitados";
      //-$045  END;
      //-$045END;

      personas_coste := "N.Adultos" + "N.Ni¤os";

      rPreComPrv.SETFILTER("Fecha desde", '<=%1', rSer.Fecha);
      rPreComPrv.SETFILTER("Fecha hasta", '>=%1', rSer.Fecha);
      rPreComPrv.SETFILTER("Rango desde", '<=%1', personas_coste);
      rPreComPrv.SETFILTER("Rango hasta", '>=%1', personas_coste);
      rPreComPrv.SETRANGE ("Tipo aplicacion", rPreComPrv."Tipo aplicacion"::Servicio);
      lwOK := rPreComPrv.FINDFIRST;
      IF lwOK THEN BEGIN // Prorrateamos adultos y ni¤os
          lwImp   := - rPreComPrv.Precio;
          lwImpAd := ROUND((lwImp / personas_coste) * "N.Adultos");
          lwImpNi := ROUND((lwImp / personas_coste) * "N.Ni¤os");
      END
      ELSE
        lwOK := EX_PrecioBaseExcPax(rSer, lwImpAd, lwImpNi);

      IF lwOK THEN BEGIN
        FOR lwVuelta := 1 TO 2 DO BEGIN // $016 Separamos adultos/Ni¤os
          CASE lwVuelta OF
            lwVuelta::Adultos : BEGIN
                                  lwImp     := lwImpAd;
                                  lwPax     := "N.Adultos";
                                  lwPax2    := lwPax;
                                  lwTipoPax := rParPer."Codigo Adulto";
                                END;
            lwVuelta::Ni¤os : BEGIN
                                lwImp     := lwImpNi;
                                lwPax     := "N.Ni¤os";
                                // JPT 17/07/12 Cambio Los ni¤os no cuentan como medios
                                // lwPax2    := lwPax / 2;
                                lwPax2    := lwPax;
                                lwTipoPax := rParPer."Codigo Ni¤o";
                              END;
          END;

          CASE rSer."Tipo Calculo" OF
            rSer."Tipo Calculo"::Margenes: BEGIN
                CLEAR(rMar);
                rMar.Importe                 := lwImp;
                ImporteProv                  := -(rMar.Importe);
                rMar.Delegacion              := rSer.Delegacion;
                rMar."Tipo Elemento"         := 3;
                rMar."N§ Servicio"           := rSer."N§ Servicio";
                rMar.Excursion               := rSer.Excursion;
                rMar.Concepto                := Text020;
                rMar."Cantidad Aplicada"     := lwPax;
                rMar."Personas servicio"     := lwPax2;
                rMar."N§ Contrato Excursion" := rConCom."N§ Contrato compra";
                rMar."Tipo Precio"           := Text021;
                rMar."Tipo Pax"              := lwTipoPax;
                IF lwPax2 <> 0 THEN
                  rMar."Precio x Pax" := ROUND(lwImp / lwPax2);
            END;

            rSer."Tipo Calculo"::"C/I", rSer."Tipo Calculo"::Coste: BEGIN
                CLEAR(rCI);
                rCI.Importe                 := lwImp;
                ImporteProv                 := -(rCI.Importe);
                rCI.Delegacion              := rSer.Delegacion;
                rCI."Tipo Elemento"         := 0;
                rCI."N§ Servicio"           := rSer."N§ Servicio";
                rCI.Excursion               := rSer.Excursion;
                rCI.Concepto                := Text020;
                rCI."Cantidad Aplicada"     := lwPax;
                rCI."Personas servicio"     := lwPax2;
                rCI."N§ Contrato Excursion" := rConCom."N§ Contrato compra";
                rCI."Tipo Precio"           := Text021;
                rCI."Pendiente FPR"         := TRUE;
                rCI."Tipo Pax"              := lwTipoPax;
                IF lwPax2 <> 0 THEN
                  rCI."Precio Pax" := ROUND(lwImp / lwPax2);
            END;
          END;

          IF lwImp <> 0 THEN //+$025
            ComunesCoste(rSer, '');

          //+$027
          //. Hay excursiones que no tienen precio para el ni¤o, aunque los ni¤os pueden hacer la excursion
          //. Solo hacemos la comprobacion de precio en los adultos
          IF (lwImp = 0) AND (lwPax <> 0) AND (lwVuelta = lwVuelta::Adultos) THEN
            _InsertaError(rSer, STRSUBSTNO('%1 %2 %3', Text022, rConCom."N§ Contrato compra", lwVuelta));
        END;
      END
      ELSE
      BEGIN
        IF personas_coste <> 0 THEN
          _InsertaError(rSer, Text024 + ' ' + rConCom."N§ Contrato compra" + Text023 + ' ' + rConCom.Proveedor);
      END;
    END;

    PROCEDURE EX_PrecioBaseExcPax@1100253015(prSer@1100253000 : Record 7010163;VAR pwImpAd@1100253001 : Decimal;VAR pwImpNi@1100253004 : Decimal) : Boolean;
    VAR
      lrResEx@1100253002 : Record 7010162;
      lwEnc@1100253003 : Boolean;
    BEGIN
      // EX_PrecioBaseExcPax
      // $013,
      // $016 Separamos los importes en Adultos y Ni¤os
      // pwImpAd : Importe Adultos
      // pwImpNi : Importe Ni¤os

      CLEAR(pwImpAd);
      CLEAR(pwImpNi);
      rPreComPrv.SETRANGE("Tipo aplicacion", rPreComPrv."Tipo aplicacion"::Pax);

      CLEAR(lrResEx);
      lrResEx.SETCURRENTKEY("N§ Servicio");
      lrResEx.SETRANGE(Delegacion   , prSer.Delegacion);
      lrResEx.SETRANGE("N§ Servicio", prSer."N§ Servicio");
      lrResEx.SETRANGE(Anulada      , FALSE);
      IF lrResEx.FINDSET THEN BEGIN
        REPEAT
          rPreComPrv.SETRANGE("Zona Hotel", lrResEx."Zona Hotel");
          lwEnc := rPreComPrv.FINDFIRST;
          IF NOT lwEnc THEN BEGIN
            rPreComPrv.SETRANGE("Zona Hotel", '');
            lwEnc := rPreComPrv.FINDFIRST;
          END;
          IF lwEnc THEN BEGIN
            pwImpAd += (lrResEx.Adultos - lrResEx."Compra - Invitados Adultos") * rPreComPrv."Precio Adulto";
            pwImpNi += (lrResEx.Ni¤os - lrResEx."Compra - Invitados ni¤os") * rPreComPrv."Precio Ni¤o";
          END
          ELSE
          BEGIN
            IF ( (lrResEx.Adultos - lrResEx."Compra - Invitados Adultos") <> 0) OR
               ( (lrResEx.Ni¤os - lrResEx."Compra - Invitados ni¤os") <> 0) THEN
              _InsertaError(prSer, STRSUBSTNO('%1%2 %3%4', Text022, rConCom."N§ Contrato compra", Text063, lrResEx."Zona Hotel"));
          END;
        UNTIL lrResEx.NEXT=0;
      END;

      // Invertimos los importes
      pwImpAd := -pwImpAd;
      pwImpNi := -pwImpNi;

      EXIT(pwImpAd + pwImpNi  <> 0);
    END;

    PROCEDURE EX_OfertasExc@28(rSer@1103355000 : Record 7010163);
    VAR
      lwImp@1100253000 : Decimal;
      lwVuelta@1100253001 : ',Adultos,Ni¤os';
      lwPax@1100253002 : Integer;
      lwPax2@1100253003 : Integer;
      lwTipoPax@1100253004 : Code[10];
    BEGIN
      // EX_OfertasExc
      //
      // $016 Separo importe adultos y ni¤os
      rSer.CALCFIELDS("N§ Adultos","N§ Ni¤os", "Compra - Adultos Invitados", "Compra - Ni¤os Invitados");

      "N.Adultos":= rSer."N§ Adultos" - rSer."Compra - Adultos Invitados";
      "N.Ni¤os"  := rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados";

      rPreComPrv.SETFILTER("Fecha desde", '<=%1', rSer.Fecha);
      rPreComPrv.SETFILTER("Fecha hasta", '>=%1', rSer.Fecha);
      rPreComPrv.SETFILTER("Rango desde", '<=%1', "N.Adultos" + "N.Ni¤os");
      rPreComPrv.SETFILTER("Rango hasta", '>=%1', "N.Adultos" + "N.Ni¤os");
      IF rPreComPrv.FINDSET THEN BEGIN
        REPEAT
          // < $043  Enel caso de promociones hay que tener en cuentala fecha venta
          IF rPreComPrv."Tipo precio" = rPreComPrv."Tipo precio"::Promocion THEN BEGIN
            rSer.SETRANGE(rSer."Filtro fecha venta reserva",rPreComPrv."Fecha venta desde",rPreComPrv."Fecha venta hasta");

            rSer.CALCFIELDS("N§ Adultos","N§ Ni¤os", "Compra - Adultos Invitados", "Compra - Ni¤os Invitados");

            "N.Adultos":= rSer."N§ Adultos" - rSer."Compra - Adultos Invitados";
            "N.Ni¤os"  := rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados";
          END;
          IF (rPreComPrv."Rango desde" <= "N.Adultos" + "N.Ni¤os") AND
             (rPreComPrv."Rango hasta" >= "N.Adultos" + "N.Ni¤os") AND
             (NOT vOfertaAplicada) THEN BEGIN
          // $043 >
            FOR lwVuelta := 1 TO 2 DO BEGIN // $016 Separamos adultos/Ni¤os
              CLEAR(lwImp);
              CASE lwVuelta OF
                lwVuelta::Adultos: BEGIN
                                     lwPax     := "N.Adultos";
                                     lwPax2    := lwPax;
                                     lwTipoPax := rParPer."Codigo Adulto";
                                   END;
                lwVuelta::Ni¤os: BEGIN
                                   lwPax     := "N.Ni¤os";
                                   lwPax2    := lwPax / 2;
                                   lwTipoPax := rParPer."Codigo Ni¤o";
                                 END;
              END;

              IF rPreComPrv.Acumula OR rPreComPrv.Porcentaje THEN
                lwImp := - rPreComPrv.Precio;
              IF rPreComPrv.Porcentaje THEN
                lwImp:= ROUND(ImporteProv * lwImp / 100)
              ELSE
                IF rPreComPrv."Tipo aplicacion" <> rPreComPrv."Tipo aplicacion"::Servicio THEN
                  lwImp := lwImp * lwPax;

              IF lwImp <> 0 THEN BEGIN
                CASE rSer."Tipo Calculo" OF
                  rSer."Tipo Calculo"::Margenes: BEGIN
                    CLEAR(rMar);
                    rMar.Importe                 := lwImp;
                    rMar.Delegacion              := rSer.Delegacion;
                    rMar."Tipo Elemento"         := 3;
                    rMar."N§ Servicio"           := rSer."N§ Servicio";
                    rMar.Excursion               := rSer.Excursion;
                    rMar.Concepto                := Text020;
                    rMar."Cantidad Aplicada"     := lwPax;
                    rMar."Personas servicio"     := lwPax2;
                    rMar."N§ Contrato Excursion" := rConCom."N§ Contrato compra";
                    rMar."Tipo Precio"           := Text025;
                    rMar."Tipo Pax"              := lwTipoPax;
                  END;
                  rSer."Tipo Calculo"::"C/I", rSer."Tipo Calculo"::Coste: BEGIN
                    CLEAR(rCI);
                    rCI.Importe                 := lwImp;
                    rCI.Delegacion              := rSer.Delegacion;
                    rCI."Tipo Elemento"         := 0;
                    rCI."N§ Servicio"           := rSer."N§ Servicio";
                    rCI.Fecha                   := rSer.Fecha;
                    rCI.Excursion               := rSer.Excursion;
                    rCI.Concepto                := Text020;
                    rCI."Cantidad Aplicada"     := lwPax;
                    rCI."Personas servicio"     := lwPax2;
                    rCI."N§ Contrato Excursion" := rConCom."N§ Contrato compra";
                    rCI."Tipo Precio"           := Text025;
                    rCI."Pendiente FPR"         := TRUE;
                    rCI."Tipo Pax"              := lwTipoPax;
                  END;
                END;
                ComunesCoste(rSer, '');
                vOfertaAplicada := TRUE;
              END;
            END;
          END;
        UNTIL rPreComPrv.NEXT=0;
      END;
    END;

    PROCEDURE EX_SuplemExc@29(rSer@1103355000 : Record 7010163);
    VAR
      lrSupSer@1103355001 : Record 7010171;
    BEGIN
      // EX_SuplemEXC

      rConCom.RESET;

      rSupSer.RESET;
      rSupSer.SETRANGE("N§ Servicio", rSer."N§ Servicio");
      IF rSupSer.FINDSET THEN BEGIN
        REPEAT

          // AJS 14.11.2006
          // Cambio para que los suplementos que no tengan pasaje asignado no se calculen
          // y cuando se confirme el servicio se borren
          //IF (rSupSer."N§ Adultos" + rSupSer."N§ Ni¤os" = 0) THEN
          //  ERROR(Text026,rSupSer."Codigo Suplemento");

          IF (rSupSer."N§ Adultos" + rSupSer."N§ Ni¤os" = 0) THEN BEGIN
            IF rSer."Tipo Calculo" <> rSer."Tipo Calculo"::Margenes THEN BEGIN
              lrSupSer := rSupSer;
              lrSupSer.DELETE;
            END;
          END
          ELSE BEGIN
            rSupSer.TESTFIELD("Contrato Compra");
            CASE rSupSer."Tipo contrato" OF
              rSupSer."Tipo contrato"::Excursion    : EX_Suplemento_Proveedor(rSupSer, rSer);
              rSupSer."Tipo contrato"::Transportista: EX_Suplemento_Transportista(rSupSer, rSer);
            END;
          END;
        UNTIL rSupSer.NEXT = 0;
      END;
    END;

    PROCEDURE GO_Cond_GO@30(rSer@1103355000 : Record 7010163);
    BEGIN
      // GO_Cond_GO
      //
      ImporteProv := 0;

      rSer.CALCFIELDS("N§ Adultos", "N§ Ni¤os", "Compra - Adultos Invitados", "Compra - Ni¤os Invitados");

      rConCom.RESET;
      rConCom.SETRANGE(Delegacion          , rSer.Delegacion);
      rConCom.SETRANGE("N§ Contrato compra", rPrs."N§ Contrato");
      rConCom.SETRANGE("Tipo Contrato"     , rConCom."Tipo Contrato"::"Guia Oficial");
      rConCom.SETRANGE(Confirmado          , TRUE);
      IF rConCom.FINDFIRST THEN
      BEGIN
        GO_Calc_Pax(rSer);
        GO_PBase(rSer);
        GO_PSupl(rSer);
      END
      ELSE
        _InsertaError(rSer, Text027);
    END;

    PROCEDURE GO_Calc_Pax@35(rSer@1103355000 : Record 7010163);
    VAR
      paxes_servicio@1103355001 : Decimal;
      buses_servicio@1103355002 : Decimal;
    BEGIN
      // GO_Calc_Pax

      IF rSer.Buses <> 0 THEN
        buses_servicio := rSer.Buses
      ELSE
        buses_servicio := 1;

      rSer.CALCFIELDS("N§ Adultos", "N§ Ni¤os", "Compra - Adultos Invitados", "Compra - Ni¤os Invitados");

      paxes_servicio := (rSer."N§ Adultos" - rSer."Compra - Adultos Invitados") +
                        (rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados");

      //-$039IF (rConCom.OLD_Minimos > paxes_servicio) AND (rSer."Minimos GO") THEN
      //-$039BEGIN
      //-$039  wNumPaxLiqGO := rConCom.OLD_Minimos * buses_servicio;
      //-$039  Cant_Real := paxes_servicio;
      //-$039END
      //-$039ELSE
      //-$039BEGIN
        wNumPaxLiqGO :=  paxes_servicio;
        Cant_Real    := paxes_servicio;
      //-$039END;
    END;

    PROCEDURE GO_PBase@38(rSer@1103355000 : Record 7010163);
    BEGIN
      // GO_PBase

      rPreGO.RESET;
      rPreGO.SETRANGE (Delegacion     , rConCom.Delegacion);
      rPreGO.SETRANGE ("N§ Contrato"  , rConCom."N§ Contrato compra");
      rPreGO.SETRANGE ("Tipo precio"  , rPreGO."Tipo precio"::"Precio Base"); {* Precio Base *}
      rPreGO.SETFILTER("Fecha desde"  , '<=%1', rSer.Fecha);
      rPreGO.SETFILTER("Fecha hasta"  , '>=%1', rSer.Fecha);
      rPreGO.SETFILTER("Rango desde"  , '<=%1', ROUND(wNumPaxLiqGO, 1));
      rPreGO.SETFILTER("Rango hasta"  , '>=%1', ROUND(wNumPaxLiqGO, 1));
      rPreGO.SETRANGE (Excursion      , rSer.Excursion);
      IF rPreGO.FINDFIRST THEN
      BEGIN
        //-$039IF (rSer."Minimos GO") AND (rConCom.OLD_Minimos <> 0) THEN
        //-$039BEGIN
        //-$039  CASE rPreGO."Tipo Aplicacion" OF
        //-$039    //-003rPreGO."Tipo precio"::Fijo: ImporteProv := rPreGO."Precio (DL)";  {* Fijo *}
        //-$039    //-003rPreGO."Tipo precio"::Pax : ImporteProv := ROUND(rPreGO."Precio Adulto (DL)" * wNumPaxLiqGO);
        //-$039    rPreGO."Tipo Aplicacion"::Servicio: ImporteProv := rPreGO.Precio;  {* Fijo *}                    //+003
        //-$039    rPreGO."Tipo Aplicacion"::Pax : ImporteProv := ROUND(rPreGO."Precio Adulto" * wNumPaxLiqGO); //+003
        //-$039  END;
        //-$039  GO_Linea(rSer, wNumPaxLiqGO, 0, FORMAT(rPreGO."Tipo Aplicacion"), ImporteProv, TRUE, Cant_Real, Text021, rPreGO.Zona);
        //-$039END
        //-$039ELSE BEGIN

          CASE rPreGO."Tipo Aplicacion" OF
            //-003rPreGO."Tipo precio"::Fijo: ImporteProv := rPreGO."Precio (DL)"; {* Fijo *}
            //-003rPreGO."Tipo precio"::Pax : ImporteProv := ROUND((rPreGO."Precio Adulto (DL)" *
            //-003                                                 (rSer."N§ Adultos"- rSer."Adultos Invitados")) +
            //-003                            (rPreGO."Precio Ni¤o (DL)" * (rSer."N§ Ni¤os" - rSer."Ni¤os Invitados")));
            rPreGO."Tipo Aplicacion"::Servicio:
            BEGIN
              ImporteProv := rPreGO.Precio; {* Fijo *}                              //+003
              GO_Linea(rSer, Cant_Real, 3, FORMAT(rPreGO."Tipo Aplicacion"), ImporteProv, TRUE, Cant_Real, Text021, rPreGO.Zona);
            END;
            rPreGO."Tipo Aplicacion"::Pax :
            BEGIN
              ImporteProv := ROUND((rPreGO."Precio Adulto" * (rSer."N§ Adultos"- rSer."Compra - Adultos Invitados")) + //+003
                                   (rPreGO."Precio Ni¤o" * (rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados"))); //+003
              GO_Linea(rSer, Cant_Real, 0, FORMAT(rPreGO."Tipo Aplicacion"), ImporteProv, TRUE, Cant_Real, Text021, rPreGO.Zona);
            END;
          END;

        //-$039END;
      END
      ELSE
      BEGIN
        rPreGO.SETRANGE (Excursion, '');
        rPreGO.SETRANGE (Duracion       , rSer.Duracion);
        IF rPreGO.FINDFIRST THEN
        BEGIN
          //-$039IF (rSer."Minimos GO") AND (rConCom.OLD_Minimos <> 0) THEN
          //-$039BEGIN
          //-$039  CASE rPreGO."Tipo Aplicacion" OF
          //-$039    //-003rPreGO."Tipo precio"::Fijo: ImporteProv := rPreGO."Precio (DL)";  {* Fijo *}
          //-$039    //-003rPreGO."Tipo precio"::Pax : ImporteProv := ROUND(rPreGO."Precio Adulto (DL)" * wNumPaxLiqGO);
          //-$039    rPreGO."Tipo Aplicacion"::Servicio: ImporteProv := rPreGO.Precio;  {* Fijo *}                    //+003
          //-$039    rPreGO."Tipo Aplicacion"::Pax : ImporteProv := ROUND(rPreGO."Precio Adulto" * wNumPaxLiqGO); //+003
          //-$039  END;
          //-$039  GO_Linea(rSer,wNumPaxLiqGO, 0, FORMAT(rPreGO."Tipo Aplicacion"), ImporteProv, TRUE, Cant_Real, Text021, rPreGO.Zona);
          //-$039END
          //-$039ELSE BEGIN

            CASE rPreGO."Tipo Aplicacion" OF
              //-003rPreGO."Tipo precio"::Fijo: ImporteProv := rPreGO."Precio (DL)"; {* Fijo *}
              //-003rPreGO."Tipo precio"::Pax : ImporteProv := ROUND((rPreGO."Precio Adulto (DL)" * (rSer."N§ Adultos" -
              //-003                                           rSer."Adultos Invitados")) + (rPreGO."Precio Ni¤o (DL)" *
              //-003                                           (rSer."N§ Ni¤os" - rSer."Ni¤os Invitados")));
              rPreGO."Tipo Aplicacion"::Servicio:
              BEGIN
                ImporteProv := rPreGO.Precio; {* Fijo *}                            //+003
                GO_Linea(rSer, Cant_Real, 3, FORMAT(rPreGO."Tipo Aplicacion"), ImporteProv, TRUE, Cant_Real, Text021, rPreGO.Zona);
              END;
              rPreGO."Tipo Aplicacion"::Pax :
              BEGIN
                ImporteProv := ROUND((rPreGO."Precio Adulto" * (rSer."N§ Adultos" - rSer."Compra - Adultos Invitados")) +
                                     (rPreGO."Precio Ni¤o" * (rSer."N§ Ni¤os" - rSer."Compra - Ni¤os Invitados")));        //+003
                GO_Linea(rSer,Cant_Real, 0, FORMAT(rPreGO."Tipo Aplicacion"), ImporteProv, TRUE, Cant_Real, Text021, rPreGO.Zona);
              END;
            END;

          //-$039END;
        END
        ELSE
        BEGIN
          IF wNumPaxLiqGO <> 0 THEN
            _InsertaError(rSer,Text028);
        END;
      END;
      rPreGO.SETRANGE(Duracion);
      rPreGO.SETRANGE(Excursion);
      rPreGO.SETRANGE("Rango desde");
      rPreGO.SETRANGE("Rango hasta");
    END;

    PROCEDURE GO_PSupl@36(rSer@1103355000 : Record 7010163);
    VAR
      lrSupGO@1100217000 : Record 7010172;
      lwTienePrecio@1100217001 : Boolean;
      lwImporteSuplemento@1100217002 : Decimal;
    BEGIN
      // GO_PSupl

      lrSupGO.RESET;
      lrSupGO.SETRANGE("N§ Servicio", rSer."N§ Servicio");
      IF lrSupGO.FINDSET THEN
      BEGIN
        rPreGO.RESET;
        rPreGO.SETRANGE(Delegacion   , lrSupGO.Delegacion);        //+$024
        rPreGO.SETRANGE("N§ Contrato", lrSupGO."Contrato Compra"); //+$024
        rPreGO.SETRANGE("Tipo precio", rPreGO."Tipo precio"::Suplemento);
        REPEAT
          GO_Calcul_Pers(rSer, lrSupGO.Zona);

          lwTienePrecio       := FALSE;
          lwImporteSuplemento := 0;

          rPreGO.SETRANGE ("Codigo Suplemento", lrSupGO."Codigo Suplemento");
          rPreGO.SETRANGE (Excursion          , lrSupGO.Excursion);
          rPreGO.SETFILTER("Fecha desde"      , '<=%1', rSer.Fecha);
          rPreGO.SETFILTER("Fecha hasta"      , '>=%1', rSer.Fecha);
          rPreGO.SETFILTER("Rango desde"      , '<=%1', CantAdultos + CantNi¤os);
          rPreGO.SETFILTER("Rango hasta"      , '>=%1', CantAdultos + CantNi¤os);
          rPreGO.SETRANGE (Zona               , lrSupGO.Zona);
          IF NOT rPreGO.FINDFIRST THEN
          BEGIN
            rPreGO.SETRANGE (Excursion);
            rPreGO.SETRANGE (Duracion, lrSupGO.Duracion);
            IF NOT rPreGO.FINDFIRST THEN
              _InsertaError(rSer, Text029 + ' ' + lrSupGO."Codigo Suplemento" + ' ' + Text063 + ' ' + lrSupGO.Zona)
            ELSE
              lwTienePrecio := TRUE;
          END
          ELSE
            lwTienePrecio := TRUE;

          //. Solo calculamos si hemos encontrado personas en la zona del suplemento
          IF J = 0 THEN
            lwTienePrecio := FALSE;

          IF lwTienePrecio THEN
          BEGIN
            CASE rPreGO."Tipo Aplicacion" OF
              rPreGO."Tipo Aplicacion"::Servicio:
                lwImporteSuplemento := rPreGO.Precio;
              rPreGO."Tipo Aplicacion"::Pax:
                lwImporteSuplemento := (rPreGO."Precio Adulto" * CantAdultos) +
                                       (rPreGO."Precio Ni¤o" * CantNi¤os);
            END;

            IF lwImporteSuplemento <> 0 THEN
              GO_Linea(rSer, J, 1, lrSupGO."Codigo Suplemento", lwImporteSuplemento, FALSE, Cant_Real, Text030, rPreGO.Zona);
          END;
        UNTIL lrSupGO.NEXT = 0;
      END;
    END;

    PROCEDURE GO_Linea@32(rSer@1103355000 : Record 7010163;CantidadLinea@1103355001 : Decimal;TipoElementoLinea@1103355002 : Integer;TipoPaxLinea@1103355003 : Code[10];PrecioLinea@1103355004 : Decimal;MinimoLinea@1103355005 : Boolean;PaxAuxiliarLinea@1103355006 : Decimal;pwTipoPrecio@1100217000 : Code[10];pwCodZona@1100217001 : Code[10]);
    BEGIN
      // GO_Linea

      CASE rSer."Tipo Calculo" OF
      rSer."Tipo Calculo"::Margenes:
        BEGIN
          CLEAR(rMar);
          rMar.Delegacion          := rSer.Delegacion;
          rMar."Tipo Elemento"     := TipoElementoLinea;
          rMar."N§ Servicio"       := rSer."N§ Servicio";
          rMar.Excursion           := rSer.Excursion;
          rMar.Concepto            := Text031;
          rMar."Cantidad Aplicada" := CantidadLinea;
          rMar."Personas servicio" := PaxAuxiliarLinea;
          rMar.Importe             := -PrecioLinea;
          //-$039rMar.Minimo              := MinimoLinea;
          rMar."Tipo Precio"       := pwTipoPrecio;
          rMar."Tipo Pax"          := TipoPaxLinea; //+$030

          ComunesCoste(rSer, pwCodZona);
        END;
        rSer."Tipo Calculo"::"C/I", rSer."Tipo Calculo"::Coste:
        BEGIN
          CLEAR(rCI);
          rCI.Delegacion          := rSer.Delegacion;
          rCI."Tipo Elemento"     := TipoElementoLinea;
          rCI."N§ Servicio"       := rSer."N§ Servicio";
          rCI.Excursion           := rSer.Excursion;
          rCI.Fecha               := rSer.Fecha;
          rCI.Concepto            := Text031;
          rCI."Cantidad Aplicada" := CantidadLinea;
          rCI."Personas servicio" := PaxAuxiliarLinea;
          rCI.Importe             := -PrecioLinea;
          //-$039rCI.Minimo              := MinimoLinea;
          rCI."Tipo Precio"       := pwTipoPrecio;
          rCI."Pendiente FPR"     := TRUE;
          rCI."Tipo Pax"          := TipoPaxLinea; //+$030

          ComunesCoste(rSer, pwCodZona);
        END;
      END;
    END;

    PROCEDURE GO_Calcul_Pers@40(rSer@1103355000 : Record 7010163;pwCodZona@1100217000 : Code[10]);
    BEGIN
      // GO_Calcul_Pers

      J := 0;

      CantAdultos := 0;
      CantNi¤os   := 0;

      rRsv.RESET;
      rRsv.SETCURRENTKEY("N§ Servicio",
                         TourOperador,
                         "Zona Hotel");
      rRsv.SETRANGE("N§ Servicio", rSer."N§ Servicio");
      //+$034 <
      IF pwCodZona <> '' THEN
        rRsv.SETRANGE("Zona Hotel" , pwCodZona);
      //+$034 >
      IF rRsv.FINDSET THEN
      BEGIN
        REPEAT
          J := J + (rRsv.Adultos - rRsv."Compra - Invitados Adultos") +
                   (rRsv.Ni¤os - rRsv."Compra - Invitados ni¤os");

          CantAdultos := CantAdultos + (rRsv.Adultos - rRsv."Compra - Invitados Adultos");
          CantNi¤os := CantNi¤os + (rRsv.Ni¤os - rRsv."Compra - Invitados ni¤os");
        UNTIL rRsv.NEXT = 0;
      END;
    END;

    PROCEDURE ComunesCoste@17(rSer@1103355000 : Record 7010163;zona_linea@1103355001 : Code[10]);
    BEGIN
      // ComunesCoste

      CASE rSer."Tipo Calculo" OF
        rSer."Tipo Calculo"::Margenes:
        BEGIN
          rMar."N§ Servicio"           := rSer."N§ Servicio";
          rMar."Orden Linea"           := busca_ultima_linea_margen(rMar);
          rMar.Excursion               := rSer.Excursion;
          rMar.Zona                    := zona_linea;
          rMar."N§ Contrato Excursion" := rConCom."N§ Contrato compra";
          rMar."Cod. divisa"           := rConCom."Cod. divisa"; //+$005

          rMar.VALIDATE(Importe); //+$042
          //-$042_DesgloseImpuesto_M(rMar);
          //-$042rMar.VALIDATE("Cod. divisa"); //+$005

          rMar."Cod. divisa" := '';
          rMar."Orden Prestacion"      := rPrs."Orden Prestacion"; // $014
          rMar.INSERT;
        END;

        rSer."Tipo Calculo"::"C/I", rSer."Tipo Calculo"::Coste:
        BEGIN
          rCI.Delegacion              := rSer.Delegacion;
          rCI."N§ Servicio"           := rSer."N§ Servicio";
          rCI."Orden Linea"           := busca_ultima_linea(rCI);
          rCI.Excursion               := rSer.Excursion;
          rCI.Fecha                   := rSer.Fecha;
          rCI.Zona                    := zona_linea;
          rCI."N§ Contrato Excursion" := rConCom."N§ Contrato compra";
          rCI.Proveedor               := rConCom.Proveedor;
          rCI."Cod. divisa"           := rConCom."Cod. divisa"; //+004
          rCI."Fecha cambio divisa"   := _UltimaFechaCambio(rConCom."Cod. divisa", rSer); //+004
          rCI."Tipo cambio FPR"       := _GetTipoCambio(rCI."Cod. divisa", rCI."Fecha cambio divisa"); //+$020
          rCI.Prestacion              := rPrs."Orden Prestacion";
          rCI."Pendiente FPR"         := TRUE;

          rCI.VALIDATE(Importe); //$042

          //-$042_DesgloseImpuesto_CI(rSer);
          //-$042rCI.VALIDATE("Cod. divisa"); //+004

          rCI.Oficina := rSer.Oficina; // $017
          rCI.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE RegeneraZonasServicio@2(rSer@1103355000 : Record 7010163);
    BEGIN
      // RegeneraZonasServicios

      rZonSer.RESET;
      rZonSer.SETCURRENTKEY(Delegacion,
                            "N§ Servicio");
      rZonSer.SETRANGE(Delegacion   , rSer.Delegacion);
      rZonSer.SETRANGE("N§ Servicio", rSer."N§ Servicio");
      IF rZonSer.FINDSET(TRUE) THEN
        rZonSer.DELETEALL;

      rTOTmp.RESET;
      rTOTmp.DELETEALL;

      rRsv2.RESET;
      rRsv2.SETCURRENTKEY("N§ Servicio");
      rRsv2.SETRANGE("N§ Servicio", rSer."N§ Servicio");
      IF rRsv2.FINDSET THEN
      BEGIN
        REPEAT
          //. Vamos a crear un temporal de los touroperadores

          rTOTmp.SETRANGE(TourOperador, rRsv2.TourOperador);
          IF NOT rTOTmp.FINDFIRST THEN
          BEGIN
            rTOTmp.INIT;
            rTOTmp.Delegacion   := rRsv2.Delegacion;
            rTOTmp."N§ Reserva" := rRsv2."N§ Reserva";
            rTOTmp.TourOperador := rRsv2.TourOperador;
            rTOTmp.INSERT;
          END;

          rTOTmp.Adultos       += (rRsv2.Adultos - rRsv2."Compra - Invitados Adultos");
          rTOTmp.Ni¤os         += (rRsv2.Ni¤os - rRsv2."Compra - Invitados ni¤os");
          rTOTmp."N§ Personas" += ((rRsv2.Adultos - rRsv2."Compra - Invitados Adultos") +
                                   (rRsv2.Ni¤os - rRsv2."Compra - Invitados ni¤os"));
          rTOTmp.MODIFY;
        UNTIL rRsv2.NEXT = 0;
      END;
    END;

    PROCEDURE BorraRegistros@5(rSer@1103355000 : Record 7010163;pwVerbose@1100217001 : Boolean);
    VAR
      lrDet@1100217000 : Record 7010256;
    BEGIN
      // BorraRegistros

      CASE rSer."Tipo Calculo" OF
       rSer."Tipo Calculo"::Margenes:
       BEGIN  {Margenes}
          rMar.RESET;
          rMar.SETRANGE(Delegacion   , rSer.Delegacion);
          rMar.SETRANGE("N§ Servicio", rSer."N§ Servicio");
          IF rMar.FINDSET(TRUE) THEN
            rMar.DELETEALL;
          rMar.RESET;
       END;
       rSer."Tipo Calculo"::"C/I", rSer."Tipo Calculo"::Coste:
       BEGIN
         rCI.RESET;
         rCI.SETRANGE(Delegacion   , rSer.Delegacion);
         rCI.SETRANGE("N§ Servicio", rSer."N§ Servicio");
         IF rSer."Tipo Calculo" = rSer."Tipo Calculo"::Coste THEN
           rCI.SETFILTER(Concepto     , '<>%1', Text037);
         IF rCI.FINDSET(TRUE) THEN
         BEGIN
           IF pwVerbose THEN //+$040
             IF NOT CONFIRM(Text038) THEN
               ERROR('');
           rCI.DELETEALL(TRUE);
         END;
         rCI.RESET;
       END;
      END;

      rErr.RESET;
      rErr.SETRANGE(Servicio, rSer."N§ Servicio");
      IF rErr.FINDSET(TRUE) THEN
        rErr.DELETEALL;
    END;

    LOCAL PROCEDURE _InsertaError@7(rSer@1103355000 : Record 7010163;TxtErr@1103355001 : Text[80]);
    BEGIN
      // _InsertaError

      CLEAR(rErr);
      rErr.Servicio := rSer."N§ Servicio";
      rErr.Error    := TxtErr;
      rErr.INSERT(TRUE);
    END;

    PROCEDURE IngresosExcursion@33(rSer@1103355000 : Record 7010163);
    VAR
      lrTar@1100217000 : Record 7010147;
    BEGIN
      // IngresosExcursion

      rRsv.RESET;
      rRsv.SETCURRENTKEY("N§ Servicio");
      rRsv.SETRANGE("N§ Servicio" , rSer."N§ Servicio");
      rRsv.SETRANGE("Liquidado GV", FALSE); //+$019
      IF rRsv.FINDSET THEN
      BEGIN
        //+$035 <
        IF NOT rRsv.busca_tarifa(lrTar) THEN
        BEGIN
          IF rPar."Busca tarifa por fecha venta" THEN
            _InsertaError(rSer, STRSUBSTNO(Text001, rRsv.Producto, rRsv."Fecha Venta"))
          ELSE
            _InsertaError(rSer, STRSUBSTNO(Text001, rRsv.Producto, rRsv."Fecha Excursion"));
        END;
        //+$035 >

        REPEAT
          rRsv.calcular_reserva(FALSE);
        UNTIL rRsv.NEXT = 0;
      END;
    END;

    PROCEDURE busca_ultima_linea@44(par_CI@1103355000 : Record 7010166) : Integer;
    VAR
      rCI2@1103355001 : Record 7010166;
    BEGIN
      // busca_ultima_linea

      rCI2.RESET;
      rCI2.SETRANGE(Delegacion   , par_CI.Delegacion);
      rCI2.SETRANGE("N§ Servicio", par_CI."N§ Servicio");
      IF rCI2.FINDLAST THEN
        EXIT(rCI2."Orden Linea" + 1)
      ELSE
        EXIT(1);
      rCI2.RESET;
    END;

    PROCEDURE busca_ultima_linea_margen@46(margen@1103355000 : Record 7010174) : Integer;
    VAR
      margen2@1103355001 : Record 7010174;
    BEGIN
      // busca_ultima_linea_margen

      margen2.RESET;
      margen2.SETRANGE(Delegacion   , margen.Delegacion);
      margen2.SETRANGE("N§ Servicio", margen."N§ Servicio");
      IF margen2.FINDLAST THEN
        EXIT(margen2."Orden Linea" + 1)
      ELSE
        EXIT(1);
      margen2.RESET;
    END;

    PROCEDURE EX_Suplemento_Proveedor@54(par_supl@1103355000 : Record 7010171;par_ser@1103355001 : Record 7010163);
    VAR
      lwImp@1100253000 : Decimal;
      lwImpAd@1100253007 : Decimal;
      lwImpNi@1100253006 : Decimal;
      lwPax@1100253005 : Integer;
      lwPax2@1100253004 : Decimal;
      lwTotalPax@1100253008 : Integer;
      lwOK@1100253003 : Boolean;
      lwVuelta@1100253002 : ',Adultos,Ni¤os';
      lwTipoPax@1100253001 : Code[10];
    BEGIN
      // EX_Suplemento_Proveedor
      //

      //. Cuenta de paxes para poner el pax auxliar para el reparto del coste por touroperador

      par_ser.CALCFIELDS("N§ Adultos","N§ Ni¤os", "Compra - Adultos Invitados", "Compra - Ni¤os Invitados");
      "N.Adultos":= par_ser."N§ Adultos" - par_ser."Compra - Adultos Invitados";
      "N.Ni¤os"  := par_ser."N§ Ni¤os" - par_ser."Compra - Ni¤os Invitados";

      lwTotalPax := rSupSer."N§ Adultos" + rSupSer."N§ Ni¤os";

      CLEAR(rConCom);
      rConCom.SETRANGE ("N§ Contrato compra"   , par_supl."Contrato Compra");
      rConCom.SETRANGE ("Tipo Contrato"        , rConCom."Tipo Contrato"::Excursion);
      rConCom.SETFILTER("Fecha inicio contrato", '<=%1', par_ser.Fecha);
      rConCom.SETFILTER("Fecha final contrato" , '>=%1', par_ser.Fecha);
      rConCom.SETRANGE (Confirmado             , TRUE);
      IF rConCom.FINDFIRST THEN BEGIN
        CLEAR(rPreComPrv);
        rPreComPrv.SETRANGE ("N§ Contrato"      , rConCom."N§ Contrato compra");
        rPreComPrv.SETRANGE ("Tipo precio"    , rPreComPrv."Tipo precio"::Suplemento);
        rPreComPrv.SETRANGE ("Codigo Suplemento", rSupSer."Codigo Suplemento");
        rPreComPrv.SETFILTER("Rango desde"      , '<=%1', lwTotalPax);
        rPreComPrv.SETFILTER("Rango hasta"      , '>=%1', lwTotalPax);
        rPreComPrv.SETFILTER("Fecha desde"      , '<=%1', par_ser.Fecha);
        rPreComPrv.SETFILTER("Fecha hasta"      , '>=%1', par_ser.Fecha);
        IF rPreComPrv.FINDSET THEN BEGIN
          REPEAT
            FOR lwVuelta := 1 TO 2 DO
            BEGIN // $016 Separamos adultos/Ni¤os
              CASE lwVuelta OF
                lwVuelta::Adultos :
                BEGIN
                  //+$038 <
                  IF (rSupSer."N§ Adultos" <> 0) AND
                     ("N.Adultos" = 0) THEN
                    _InsertaError(par_ser, STRSUBSTNO(Text071, rSupSer."Codigo Suplemento"));
                  //+$038 >

                  lwPax     := rSupSer."N§ Adultos";
                  lwPax2    := "N.Adultos";
                  lwImp     := - rPreComPrv."Precio Adulto" * lwPax;
                  lwTipoPax := rParPer."Codigo Adulto";
                END;
                lwVuelta::Ni¤os :
                BEGIN
                  //+$038 <
                  IF (rSupSer."N§ Ni¤os" <> 0) AND
                     ("N.Ni¤os" = 0) THEN
                    _InsertaError(par_ser, STRSUBSTNO(Text072, rSupSer."Codigo Suplemento"));
                  //+$038 >

                  lwPax     := rSupSer."N§ Ni¤os";
                  lwPax2    := "N.Ni¤os";
                  lwImp     := - rPreComPrv."Precio Ni¤o" * lwPax;
                  lwTipoPax := rParPer."Codigo Ni¤o";
                END;
              END;

              IF rPreComPrv."Tipo aplicacion" = rPreComPrv."Tipo aplicacion"::Servicio THEN
              BEGIN
                CLEAR(lwImp);
                IF lwTotalPax <> 0 THEN
                  lwImp := ROUND((- rPreComPrv.Precio / lwTotalPax) * lwPax);
              END;

              CASE par_ser."Tipo Calculo" OF
                par_ser."Tipo Calculo"::Margenes: BEGIN
                  CLEAR(rMar);
                  rMar.Importe                 := lwImp;
                  rMar.Delegacion              := par_ser.Delegacion;
                  rMar."Tipo Elemento"         := 3;
                  rMar."N§ Servicio"           := par_ser."N§ Servicio";
                  rMar.Excursion               := par_ser.Excursion;
                  rMar.Concepto                := Text020;
                  rMar."Cantidad Aplicada"     := lwPax;
                  rMar."Personas servicio"     := lwPax2;
                  rMar."N§ Contrato Excursion" := rConCom."N§ Contrato compra";
                  rMar."Tipo Precio"           := rSupSer."Codigo Suplemento";
                  rMar."Tipo Pax"              := lwTipoPax;
                END;
                par_ser."Tipo Calculo"::"C/I", par_ser."Tipo Calculo"::Coste: BEGIN
                  CLEAR(rCI);
                  rCI.Importe                 := lwImp;
                  rCI.Delegacion              := par_ser.Delegacion;
                  rCI."Tipo Elemento"         := rCI."Tipo Elemento"::Suplemento;
                  rCI.Fecha                   := par_ser.Fecha;
                  rCI.Excursion               := par_ser.Excursion;
                  rCI.Concepto                := Text020;
                  rCI."Cantidad Aplicada"     := lwPax;
                  rCI."Personas servicio"     := lwPax2;
                  rCI."N§ Contrato Excursion" := rConCom."N§ Contrato compra";
                  rCI."Tipo Precio"           := rSupSer."Codigo Suplemento";
                  rCI."Pendiente FPR"         := TRUE;
                  rCI."Tipo Pax"              := lwTipoPax;
                END;
              END;

              IF lwImp <> 0 THEN
                ComunesCoste(par_ser, '');

              IF (lwImp = 0) AND (lwPax <> 0) THEN
                _InsertaError(par_ser, Text049 + ' ' + rSupSer."Codigo Suplemento" +
                                       Text050 + ' ' + rConCom."N§ Contrato compra");
            END;
          UNTIL rPreComPrv.NEXT = 0;
        END
        ELSE
        BEGIN
          _InsertaError(par_ser, Text051 + ' ' + rSupSer."Codigo Suplemento" +
                                 Text052 + ' ' + rConCom."N§ Contrato compra");
        END;
      END
      ELSE
      BEGIN
        _InsertaError(par_ser, Text053 + ' ' + rConCom."N§ Contrato compra");
      END;
    END;

    PROCEDURE EX_Suplemento_Transportista@55(par_supl@1103355000 : Record 7010171;par_ser@1103355001 : Record 7010163);
    BEGIN
      // EX_Suplemento_Transportista

      //. Cuenta de paxes para poner el pax auxliar para el reparto del coste por touroperador

      par_ser.CALCFIELDS("N§ Adultos","N§ Ni¤os", "Compra - Adultos Invitados", "Compra - Ni¤os Invitados");
      "N.Adultos":= par_ser."N§ Adultos" - par_ser."Compra - Adultos Invitados";
      "N.Ni¤os"  := par_ser."N§ Ni¤os" - par_ser."Compra - Ni¤os Invitados";

      CASE par_ser."Tipo Calculo" OF
        par_ser."Tipo Calculo"::Margenes: CLEAR(rMar);
        par_ser."Tipo Calculo"::"C/I", par_ser."Tipo Calculo"::Coste: CLEAR(rCI);
      END;

      CLEAR(rConCom);
      rConCom.SETRANGE ("N§ Contrato compra"   , par_supl."Contrato Compra");
      rConCom.SETRANGE ("Tipo Contrato"        , rConCom."Tipo Contrato"::Transportista);
      rConCom.SETRANGE (Confirmado             , TRUE);
      rConCom.SETFILTER("Fecha inicio contrato", '<=%1', par_ser.Fecha);
      rConCom.SETFILTER("Fecha final contrato" , '>=%1', par_ser.Fecha);
      IF rConCom.FINDFIRST THEN BEGIN
        CLEAR(rPreComTra);
        rPreComTra.SETRANGE ("N§ Contrato"  , rConCom."N§ Contrato compra");
        rPreComTra.SETRANGE ("Tipo precio", rPreComTra."Tipo precio"::Suplemento);
        rPreComTra.SETRANGE ("Codigo suplemento", rSupSer."Codigo Suplemento");
        rPreComTra.SETFILTER("Rango desde"  , '<=%1', rSupSer."N§ Adultos" + rSupSer."N§ Ni¤os");
        rPreComTra.SETFILTER("Rango hasta"  , '>=%1', rSupSer."N§ Adultos" + rSupSer."N§ Ni¤os");
        rPreComTra.SETFILTER("Fecha desde"  , '<=%1', par_ser.Fecha);
        rPreComTra.SETFILTER("Fecha hasta"  , '>=%1', par_ser.Fecha);
        IF rPreComTra.FINDSET THEN BEGIN
          REPEAT
            IF (rPreComTra."Tipo aplicacion" = rPreComTra."Tipo aplicacion"::Vehiculo) THEN BEGIN
              //-003CASE par_ser."Tipo Calculo" OF
              //-003  par_ser."Tipo Calculo"::Margenes:
              //-003    rMar.Importe := - (rPreComTra."Precio (DL)");
              //-003  par_ser."Tipo Calculo"::"C/I", par_ser."Tipo Calculo"::Coste:
              //-003    rCI.Importe := - (rPreComTra."Precio (DL)");
              //-003END;
              CASE par_ser."Tipo Calculo" OF                                  //+003
                par_ser."Tipo Calculo"::Margenes:                             //+003
                  rMar.Importe := - (rPreComTra.Precio);                      //+003
                par_ser."Tipo Calculo"::"C/I", par_ser."Tipo Calculo"::Coste: //+003
                  rCI.Importe := - (rPreComTra.Precio);                       //+003
              END;                                                            //+003
            END;
            IF (rPreComTra."Tipo aplicacion" = rPreComTra."Tipo aplicacion"::Pax) THEN BEGIN
              //-003CASE par_ser."Tipo Calculo" OF
              //-003  par_ser."Tipo Calculo"::Margenes:
              //-003    rMar.Importe := - ((rSupSer."N§ Adultos" + (rSupSer."N§ Ni¤os" / 2)) * rPreComTra."Precio (DL)");
              //-003  par_ser."Tipo Calculo"::"C/I", par_ser."Tipo Calculo"::Coste:
              //-003    rCI.Importe := - ((rSupSer."N§ Adultos" + (rSupSer."N§ Ni¤os" / 2)) * rPreComTra."Precio (DL)");
              //-003END;
              CASE par_ser."Tipo Calculo" OF                                                                 //+003
                par_ser."Tipo Calculo"::Margenes:                                                            //+003
                  rMar.Importe := - ((rSupSer."N§ Adultos" + (rSupSer."N§ Ni¤os" / 2)) * rPreComTra.Precio); //+003
                par_ser."Tipo Calculo"::"C/I", par_ser."Tipo Calculo"::Coste:                                //+003
                  rCI.Importe := - ((rSupSer."N§ Adultos" + (rSupSer."N§ Ni¤os" / 2)) * rPreComTra.Precio);  //+003
              END;                                                                                           //+003
            END;
            CASE par_ser."Tipo Calculo" OF
              par_ser."Tipo Calculo"::Margenes: BEGIN
                rMar.Delegacion              := par_ser.Delegacion;
                rMar."Tipo Elemento"         := 3;
                rMar."N§ Servicio"           := par_ser."N§ Servicio";
                rMar.Excursion               := par_ser.Excursion;
                rMar.Concepto                := Text008;
                rMar."Cantidad Aplicada"     := rSupSer."N§ Adultos" + rSupSer."N§ Ni¤os";
                rMar."Personas servicio"     := "N.Adultos" + "N.Ni¤os";
                rMar."N§ Contrato Excursion" := rConCom."N§ Contrato compra";
                rMar."Tipo Precio"           := rSupSer."Codigo Suplemento";

                ComunesCoste(par_ser, '');
              END;
              par_ser."Tipo Calculo"::"C/I", par_ser."Tipo Calculo"::Coste: BEGIN
                rCI.Delegacion              := par_ser.Delegacion;
                rCI."Tipo Elemento"         := rCI."Tipo Elemento"::Suplemento;
                rCI.Fecha                   := par_ser.Fecha;
                rCI.Excursion               := par_ser.Excursion;
                rCI.Concepto                := Text008;
                rCI."Cantidad Aplicada"     := rSupSer."N§ Adultos" + rSupSer."N§ Ni¤os";
                rCI."Personas servicio"     := "N.Adultos" + "N.Ni¤os";
                rCI."N§ Contrato Excursion" := rConCom."N§ Contrato compra";
                rCI."Tipo Precio"           := rSupSer."Codigo Suplemento";
                rCI."Pendiente FPR"         := TRUE;

                ComunesCoste(par_ser, '');
              END;
            END;
          UNTIL rPreComTra.NEXT = 0;
          IF (rMar.Importe=0) AND (rCI.Importe=0) THEN BEGIN
            _InsertaError(par_ser, Text049 + ' ' + rSupSer."Codigo Suplemento" +
                                   Text050 + ' ' + rConCom."N§ Contrato compra");
          END
        END
        ELSE BEGIN
          _InsertaError(par_ser, Text051 + ' ' + rSupSer."Codigo Suplemento" +
                                 Text052 + ' ' + rConCom."N§ Contrato compra");
        END;
      END
      ELSE BEGIN
        _InsertaError(par_ser, Text053 + ' ' + rConCom."N§ Contrato compra");
      END;
    END;

    PROCEDURE CalculaBeneficio@72(VAR prServ@1103355000 : Record 7010163) : Decimal;
    VAR
      lwBenef@1103355001 : Decimal;
    BEGIN
      // CalculaBeneficio

      CLEAR(lwBenef);
      CASE prServ."Tipo Calculo" OF
        prServ."Tipo Calculo"::Margenes: lwBenef := CalculaBeneficioMarg(prServ);
        prServ."Tipo Calculo"::"C/I", prServ."Tipo Calculo"::Coste   : lwBenef := CalculaBeneficioCI(prServ);
      END;

      EXIT(lwBenef);
    END;

    PROCEDURE CalculaBeneficioMarg@56(VAR prServ@1103355000 : Record 7010163) : Decimal;
    VAR
      lrServ2@1103355002 : Record 7010163;
      lcMargen@1100253000 : Codeunit 7010148;
      lwIngr@1103355003 : Decimal;
      lwCoste@1103355004 : Decimal;
      lwBenef@1103355005 : Decimal;
      lwTemp@1103355006 : Decimal;
      lwCosteAutocar@1100253001 : Decimal;
      lwCosteProveedor@1100253002 : Decimal;
      lwCosteGuiaOficial@1100253003 : Decimal;
      lwCosteTouroperador@1100253004 : Decimal;
      lwCosteGuiaVenta@1100253005 : Decimal;
      lwFecha@1103355007 : Date;
    BEGIN
      // CalculaBeneficioMarg

      CLEAR(lwIngr);
      CLEAR(lwTemp);
      CLEAR(lwCoste);
      CLEAR(lwBenef);
      CLEAR(lrServ2);
      lwFecha := TODAY;

      lrServ2 := prServ;
      IF lrServ2.FIND THEN BEGIN

        lcMargen.TotalesPorServicio(lrServ2, lwIngr, lwCoste, lwCosteAutocar, lwCosteProveedor, lwCosteGuiaOficial, lwCosteTouroperador,
                                    lwCosteGuiaVenta);

        IF (lwIngr <> 0) THEN
          lwBenef := ROUND(((lwIngr - lwCoste) / lwIngr) * 100, 0.01)
        ELSE
          lwBenef := 0;
      END;

      EXIT(lwBenef);
    END;

    PROCEDURE CalculaBeneficioCI@62(VAR prServ@1103355000 : Record 7010163) : Decimal;
    VAR
      lrServ2@1103355002 : Record 7010163;
      lcMargen@1100253000 : Codeunit 7010148;
      lwIngr@1103355003 : Decimal;
      lwTemp@1103355004 : Decimal;
      lwCoste@1103355005 : Decimal;
      lwBenef@1103355006 : Decimal;
      lwCosteAutocar@1100253005 : Decimal;
      lwCosteProveedor@1100253004 : Decimal;
      lwCosteGuiaOficial@1100253003 : Decimal;
      lwCosteTouroperador@1100253002 : Decimal;
      lwCosteGuiaVenta@1100253001 : Decimal;
      lwFecha@1103355007 : Date;
      lwDivisaIngreso@1103355008 : Code[10];
    BEGIN
      // CalculaBeneficioCI

      CLEAR(lwIngr);
      CLEAR(lwCoste);
      CLEAR(lwBenef);
      CLEAR(lrServ2);

      //-$007lwFecha := TODAY;
      lwFecha := prServ.Fecha; //+$007

      lrServ2 := prServ;
      IF lrServ2.FIND THEN BEGIN

        lcMargen.TotalesPorServicio(lrServ2, lwIngr, lwCoste, lwCosteAutocar, lwCosteProveedor, lwCosteGuiaOficial, lwCosteTouroperador,
                                    lwCosteGuiaVenta);

        IF (lwIngr <> 0) THEN
          lwBenef := ROUND(((lwIngr - lwCoste) / lwIngr) * 100, 0.01)
        ELSE
          lwBenef := 0;
      END;

      EXIT(lwBenef);
    END;

    PROCEDURE CalculaFiltradas@59(VAR prServicio@1103355000 : Record 7010163);
    VAR
      lrServicio2@1103355001 : Record 7010163;
      lwTotal@1103355002 : Integer;
      lwCont@1103355003 : Integer;
      lwVent2@1103355004 : Dialog;
    BEGIN
      // CalculaFiltradas

      // Calcula todos los servicios que vienen filtrados desde la ventana de generadas

      lrServicio2.COPY(prServicio);

      IF NOT CONFIRM(Text056) THEN
        EXIT;

      IF lrServicio2.FINDSET THEN BEGIN
        CLEAR(lwCont);
        lwTotal:= lrServicio2.COUNT;
        REPEAT
          lrServicio2."Tipo Calculo" := lrServicio2."Tipo Calculo"::Margenes;
          CostesIngresosExcursion(lrServicio2, TRUE);
          lwCont += 1;
        UNTIL lrServicio2.NEXT = 0;
      END
      ELSE
        ERROR(Text058);
    END;

    PROCEDURE BuscarIVAVenta@1100253000(prRsv@1100253000 : Record 7010162;VAR prIVAVenta@1100253002 : Record 325);
    VAR
      lrTar@1100253001 : Record 7010147;
      lrCust@1100253003 : Record 18;
      lrRep@1100253004 : Record 7010241;
    BEGIN
      // BuscarIVAVenta

      //. Creada por : AJS
      //. Creada dia : 11/05/2011

      //. Localizar el porcentaje de IVA que debe aplicarse en la venta

      lrRep.GET(prRsv."Guia Venta");
      lrCust.GET(lrRep."Cliente Facturacion");

      //. Para que la funci¢n se pueda llamar externamente buscamos la tarifa

      rPar.FINDFIRST;

      lrTar.RESET;
      lrTar.SETRANGE (Delegacion    , prRsv.Delegacion);
      lrTar.SETRANGE (Excursion      , prRsv.Producto);
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        lrTar.SETFILTER("Fecha Inicio", '<=%1', prRsv."Fecha Venta");
        lrTar.SETFILTER("Fecha Final" , '>=%1', prRsv."Fecha Venta");
      END
      ELSE
      BEGIN
        lrTar.SETFILTER("Fecha Inicio", '<=%1', prRsv."Fecha Excursion");
        lrTar.SETFILTER("Fecha Final" , '>=%1', prRsv."Fecha Excursion");
      END;
      lrTar.FINDFIRST;

      prIVAVenta.GET(lrCust."VAT Bus. Posting Group", lrTar."Gr. Registro IVA Producto");
    END;

    LOCAL PROCEDURE _UltimaFechaCambio@1100253006(pwDivisa@1100253002 : Code[10];VAR prSer@1100253001 : Record 7010163) rvFechaCamb : Date;
    VAR
      lrCurrExch@1100253000 : Record 330;
    BEGIN
      // _UltimaFechaCambio
      //+004
      IF pwDivisa = '' THEN
        EXIT;

      lrCurrExch.RESET;
      lrCurrExch.SETRANGE ("Currency Code", pwDivisa);
      lrCurrExch.SETFILTER("Starting Date", '<=%1', prSer.Fecha);
      lrCurrExch.FINDLAST;

      EXIT(lrCurrExch."Starting Date");
      //-004
    END;

    LOCAL PROCEDURE _CalculaTransporteSoporte@1100253001(VAR prTransporte@1100253000 : Record 7010206);
    VAR
      lrPersSop@1100253001 : Record 7010214;
      lrServ@1100253002 : Record 7010163;
      lrZonaSop@1100253003 : Record 7010215;
      lrPrecio@1100253004 : Record 7010150;
      lwPax@1100253005 : Decimal;
      lwAdultos@1100253006 : Decimal;
      lwNi¤os@1100253007 : Decimal;
    BEGIN
      // _CalculaTransporteSoporte
      // $012

      prTransporte.Coste := 0;

      CLEAR(lrPersSop);
      lrPersSop.SETRANGE(Delegacion   , prTransporte.Delegacion);
      lrPersSop.SETRANGE("N§ Servicio", prTransporte."N§ Servicio");
      lrPersSop.SETRANGE("Id Soporte" , prTransporte."ID Soporte");
      IF NOT lrPersSop.FINDFIRST THEN
        ERROR(Text059, prTransporte.GETPOSITION);

      CLEAR(lrServ);
      lrServ.GET(prTransporte.Delegacion, prTransporte."N§ Servicio");

      prTransporte.TESTFIELD("Proveedor Transporte");
      IF NOT _BuscarContratoTransporte(prTransporte."Proveedor Transporte", lrServ.Fecha) THEN
      BEGIN
        _InsertaError(lrServ, COPYSTR(STRSUBSTNO(Text060, rConCom.GETFILTERS),1,80));
        EXIT;
      END;

      _ZonaCompraTransporte(prTransporte);

      CLEAR(lrZonaSop);
      lrZonaSop.SETRANGE(Delegacion    , prTransporte.Delegacion);
      lrZonaSop.SETRANGE("N§ Servicio" , prTransporte."N§ Servicio");
      lrZonaSop.SETRANGE("ID Soporte"  , prTransporte."ID Soporte");

      CLEAR(lwPax);
      CLEAR(lwAdultos);
      CLEAR(lwNi¤os);
      IF lrZonaSop.FINDSET THEN
      BEGIN
        REPEAT
          lwAdultos += lrZonaSop.Adultos;
          lwNi¤os   += lrZonaSop.Ni¤os;
          lwPax     += lrZonaSop.Adultos + lrZonaSop.Ni¤os;
        UNTIL lrZonaSop.NEXT=0;
      END;

      IF lrZonaSop.FINDLAST THEN
      BEGIN
        IF NOT _BuscaPrecioTransporte(lrPrecio, rConCom."N§ Contrato compra", lrServ.Excursion,
                                      lrZonaSop."Zona Compra",  lrServ.Fecha, lwPax , prTransporte."Tipo Vehiculo") THEN
        BEGIN
          _InsertaError(lrServ, COPYSTR(STRSUBSTNO(Text062, lrPrecio.GETFILTERS), 1,80));
          EXIT;
        END;

        CASE lrPrecio."Tipo aplicacion" OF
          lrPrecio."Tipo aplicacion"::Pax      : _TransportePrecioPax(lrPrecio, prTransporte, lrServ,  lwAdultos, lwNi¤os,
                                                                   lrZonaSop."Zona Compra", Text070);
          lrPrecio."Tipo aplicacion"::Vehiculo : _InsertaLineaTransporte(lrServ, prTransporte, 1, 1, lrPrecio.Precio, lwPax,
                                                                     prTransporte."Tipo Vehiculo", 0, '',  lrZonaSop."Zona Compra",
                                                                     Text070);
        END
      END;

      prTransporte."Cod. Divisa" := rConCom."Cod. divisa";
      prTransporte.MODIFY;
    END;

    LOCAL PROCEDURE _BuscarContratoTransporte@1100253002(pwProveedor@1100253000 : Code[20];pwFecha@1100253001 : Date) Encontrado : Boolean;
    BEGIN
      // _BuscarContratoTransporte
      // $012

      CLEAR(rConCom);
      rConCom.SETCURRENTKEY(Proveedor, "Fecha inicio contrato", "Fecha final contrato");
      rConCom.SETRANGE ("Tipo Contrato"        , rConCom."Tipo Contrato"::Transportista);
      rConCom.SETRANGE (Proveedor              , pwProveedor);
      rConCom.SETFILTER("Fecha inicio contrato", '<=%1', pwFecha);
      rConCom.SETFILTER("Fecha final contrato" , '>=%1', pwFecha);
      rConCom.SETRANGE (Confirmado             , TRUE);
      Encontrado := rConCom.FINDFIRST;
    END;

    LOCAL PROCEDURE _ZonaCompraTransporte@1100253003(VAR prTransporte@1100253000 : Record 7010206);
    VAR
      lrZonaSop@1100253001 : Record 7010215;
      lrPersSop@1100253002 : Record 7010214;
      lrResExc@1100253003 : Record 7010162;
      lrZonas@1100253004 : Record 7010149;
      lrServ@1100253005 : Record 7010163;
    BEGIN
      // _ZonaCompraTransporte
      // $012

      CLEAR(lrZonaSop);
      lrZonaSop.SETRANGE(Delegacion    , prTransporte.Delegacion);
      lrZonaSop.SETRANGE("N§ Servicio" , prTransporte."N§ Servicio");
      lrZonaSop.SETRANGE("ID Soporte"  , prTransporte."ID Soporte");
      IF lrZonaSop.FINDFIRST THEN
        lrZonaSop.DELETEALL;

      CLEAR(lrServ);
      lrServ.GET(prTransporte.Delegacion, prTransporte."N§ Servicio");

      CLEAR(lrPersSop);
      lrPersSop.SETRANGE(Delegacion   , prTransporte.Delegacion);
      lrPersSop.SETRANGE("N§ Servicio", prTransporte."N§ Servicio");
      lrPersSop.SETRANGE("Id Soporte" , prTransporte."ID Soporte");
      IF lrPersSop.FINDSET THEN
      BEGIN
        CLEAR(lrZonas);
        lrZonas.SETRANGE("Tipo Contrato"  , lrZonas."Tipo Contrato"::Compra);
        lrZonas.SETRANGE("Codigo Contrato", rConCom."N§ Contrato compra");
        REPEAT
          CLEAR(lrResExc);
          lrResExc.GET(lrPersSop.Delegacion, lrPersSop."N§ Reserva");

          lrZonas.SETRANGE("Zona Fisica", lrResExc."Zona Hotel");
          IF lrZonas.FINDFIRST THEN
          BEGIN
            lrZonas.TESTFIELD(Zona);
            lrZonaSop.SETRANGE("Zona Compra", lrZonas.Zona);
            IF NOT lrZonaSop.FINDFIRST THEN
            BEGIN
              lrZonaSop.INIT;
              lrZonaSop.Delegacion    := prTransporte.Delegacion;
              lrZonaSop."N§ Servicio" := prTransporte."N§ Servicio";
              lrZonaSop."ID Soporte"  := prTransporte."ID Soporte";
              lrZonaSop."Zona Compra" := lrZonas.Zona;
              lrZonaSop.Orden         := lrZonas.Orden;
              lrZonaSop.INSERT(TRUE);
            END;
            lrZonaSop.Adultos += lrResExc.Adultos;
            lrZonaSop.Ni¤os   += lrResExc.Ni¤os;
            lrZonaSop.MODIFY;
          END
          ELSE
            _InsertaError(lrServ, STRSUBSTNO(Text061, lrResExc."Zona Hotel", rConCom."N§ Contrato compra"));

        UNTIL lrPersSop.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _BuscaPrecioTransporte@1100253004(VAR prPrecio@1100253000 : Record 7010150;pwContrato@1100253001 : Code[20];pwProducto@1100253006 : Code[10];pwZona@1100253002 : Code[10];pwFecha@1100253003 : Date;pwPaxes@1100253004 : Decimal;pwTipoVehiculo@1100253005 : Code[10]) encontrado : Boolean;
    BEGIN
      // _BuscaPrecioTransporte
      // $012

      CLEAR(prPrecio);
      prPrecio.SETRANGE ("N§ Contrato"    , pwContrato);
      prPrecio.SETRANGE ("Tipo precio"    , prPrecio."Tipo precio"::"Precio zona");
      prPrecio.SETRANGE (Producto         , pwProducto);
      prPrecio.SETFILTER("Fecha desde"    , '<=%1', pwFecha); //+$026
      prPrecio.SETFILTER("Fecha hasta"    , '>=%1', pwFecha); //+$026
      prPrecio.SETFILTER(Zona             , pwZona);
      prPrecio.SETFILTER("Tipo vehiculo"  , pwTipoVehiculo);
      prPrecio.SETFILTER("Rango desde"    , '<=%1', pwPaxes); //+$026
      prPrecio.SETFILTER("Rango hasta"    , '>=%1', pwPaxes); //+$026
      prPrecio.SETRANGE ("Tipo aplicacion", prPrecio."Tipo aplicacion"::Pax, prPrecio."Tipo aplicacion"::Vehiculo);
      prPrecio.SETRANGE (Activo           , TRUE);
      IF NOT prPrecio.FINDFIRST THEN
      BEGIN
        prPrecio.SETFILTER("Tipo vehiculo", '');
        encontrado:= prPrecio.FINDFIRST;
      END;

      encontrado := prPrecio.FINDFIRST;
    END;

    LOCAL PROCEDURE _TransportePrecioPax@1100253005(VAR prPrecio@1100253000 : Record 7010150;VAR prTransporte@1100253001 : Record 7010206;prSer@1100253005 : Record 7010163;pwAdultos@1100253006 : Decimal;pwNI¤os@1100253007 : Decimal;pwZona@1100253008 : Code[10];pwOrigenConcepto@1100253010 : Code[10]) encontrado : Boolean;
    VAR
      lwEnc@1100253002 : Boolean;
      lrPrecioA@1100253003 : Record 7010150;
      lrPrecioN@1100253004 : Record 7010150;
      lwOk@1100253009 : Boolean;
      lwPax@1100253011 : Decimal;
    BEGIN
      // _TransportePrecioPax
      // $012
      lrPrecioA.COPY(prPrecio);
      lrPrecioA.SETRANGE("Codigo suplemento"    , rParPer."Codigo Adulto");
      lrPrecioA.SETFILTER("Rango desde"  , '<=%1', pwAdultos); //+$026
      lrPrecioA.SETFILTER("Rango hasta"  , '>=%1', pwAdultos); //+$026
      lrPrecioA.SETRANGE("Tipo aplicacion", prPrecio."Tipo aplicacion"::"0", prPrecio."Tipo aplicacion"::Pax);
      IF lrPrecioA.FINDFIRST THEN
      BEGIN
        lwOk := TRUE;
        IF pwNI¤os <> 0 THEN
        BEGIN
          lrPrecioN.COPY(prPrecio);
          lrPrecioN.SETRANGE("Codigo suplemento"  , rParPer."Codigo Ni¤o");
          lrPrecioN.SETFILTER("Rango desde"  , '<=%1', pwNI¤os); //+$026
          lrPrecioN.SETFILTER("Rango hasta"  , '>=%1', pwNI¤os); //+$026
          lrPrecioN.SETRANGE("Tipo aplicacion", prPrecio."Tipo aplicacion"::"0", prPrecio."Tipo aplicacion"::Pax);
          lwOk := lrPrecioN.FINDFIRST;
          IF NOT lwOk THEN
            _InsertaError(prSer, COPYSTR(STRSUBSTNO(Text062, lrPrecioN.GETFILTERS), 1,80));
        END;
        IF lwOk THEN
        BEGIN
          _InsertaLineaTransporte(prSer, prTransporte, pwAdultos, 0, lrPrecioA.Precio, pwAdultos, prTransporte."Tipo Vehiculo",
                                  0, rParPer."Codigo Adulto",  pwZona, pwOrigenConcepto);
          _InsertaLineaTransporte(prSer, prTransporte, pwNI¤os, 0, lrPrecioN.Precio, pwNI¤os, prTransporte."Tipo Vehiculo",
                                  0, rParPer."Codigo Ni¤o",  pwZona, pwOrigenConcepto);
        END;
      END
      ELSE
      BEGIN
         lwPax := pwAdultos + pwNI¤os;

         _InsertaLineaTransporte(prSer, prTransporte, lwPax, 0,  prPrecio.Precio, lwPax,
                                 prTransporte."Tipo Vehiculo", 0, rParPer."Codigo Adulto",  pwZona, pwOrigenConcepto);
      END;
    END;

    LOCAL PROCEDURE _InsertaLineaTransporte@1100253007(prSer@1100253000 : Record 7010163;VAR prTransporte@1100253001 : Record 7010206;pwCantidadLinea@1100253002 : Decimal;pwTipoPrecio@1100253010 : 'Pax,Vehiculo';pwPrecioLinea@1100253003 : Decimal;pwPaxLinea@1100253004 : Decimal;pwTipoVehiculo@1100253005 : Code[10];pwTipoElemento@1100253006 : Integer;pwTipoPax@1100253007 : Code[10];pwZona@1100253008 : Code[10];pwOrigenConcepto@1100253011 : Code[10]);
    VAR
      lwImpt@1100253009 : Decimal;
    BEGIN
      // _InsertaLineaTransporte
      // $012

      IF pwCantidadLinea = 0 THEN
        EXIT;

      lwImpt := -(pwCantidadLinea * pwPrecioLinea);

      CASE prSer."Tipo Calculo" OF
        prSer."Tipo Calculo"::Margenes: BEGIN
          CLEAR(rMar);
          rMar.Delegacion          := prSer.Delegacion;
          rMar."Cantidad Aplicada" := pwCantidadLinea;
          rMar.Concepto            := Text008;
          rMar."Origen Concepto"   := pwOrigenConcepto;
          rMar."Personas servicio" := pwPaxLinea;
          rMar."Tipo Veh¡culos"    := pwTipoVehiculo;
          rMar."Tipo Elemento"     := pwTipoElemento;
          rMar."Tipo Pax"          := pwTipoPax;
          rMar."Id Soporte"        := prTransporte."ID Soporte";
          CASE pwTipoPrecio OF
            pwTipoPrecio::Pax      :  rMar."Precio x Pax"      := -(pwPrecioLinea);
            pwTipoPrecio::Vehiculo :  rMar."Precio x Vehiculo" := -(pwPrecioLinea);
          END;
          rMar.Importe             := lwImpt;
        END;
        prSer."Tipo Calculo"::"C/I", prSer."Tipo Calculo"::Coste: BEGIN
          rCI.INIT;
          rCI.Delegacion          := prSer.Delegacion;
          rCI."Cantidad Aplicada" := pwCantidadLinea;
          rCI.Concepto            := Text008;
          rCI."Origen Concepto"   := pwOrigenConcepto;
          rCI."Personas servicio" := pwPaxLinea;;
          rCI."Tipo Vehiculo"    := pwTipoVehiculo;
          rCI."Tipo Pax"          := pwTipoPax;
          rCI."Id Soporte"        := prTransporte."ID Soporte";
          CASE pwTipoPrecio OF
            pwTipoPrecio::Pax:
            BEGIN
              rCI."Precio Pax"    := -(pwPrecioLinea);
              rCI."Tipo Elemento" := rCI."Tipo Elemento"::Paxes;
            END;
            pwTipoPrecio::Vehiculo :
            BEGIN
              rCI."Precio x Vehiculo" := -(pwPrecioLinea);
              rCI."Tipo Elemento" := rCI."Tipo Elemento"::Servicio;
            END;
          END;
          rCI.Importe := lwImpt;
        END;
      END;
      ComunesCoste(prSer, pwZona);

      prTransporte.Coste += lwImpt;
    END;

    PROCEDURE GetConcepts@1100253016(pwTipo@1100253002 : 'Coste,Ingreso';pwSep@1100253003 : Text[1]) : Text[250];
    VAR
      lwFiltro@1100253000 : Text[250];
      lrCpt@1100253001 : Record 7009716;
    BEGIN
      // GetConcepts
      // JPT 30/05/12 Devuelve una cadena de los conceptos por tipo,
      // pwSep indica el separador entre conceptos

      CLEAR(lwFiltro);
      CLEAR(lrCpt);
      lrCpt.SETRANGE(Modulo          , lrCpt.Modulo::Excursions);
      lrCpt.SETRANGE("Coste/Ingreso" , pwTipo);
      IF lrCpt.FINDSET THEN BEGIN
        REPEAT
          IF lwFiltro <> '' THEN
            lwFiltro += pwSep;
          lwFiltro += lrCpt.Concepto;
        UNTIL lrCpt.NEXT = 0;
      END;
      EXIT(lwFiltro);
    END;

    PROCEDURE _GetTipoCambio@1100217000(pwDivisa@1100217001 : Code[10];pwFecha@1100217002 : Date) : Decimal;
    VAR
      lrCurrExch@1100217000 : Record 330;
      lrGLSetup@1100217003 : Record 98;
    BEGIN
      // _GetTipoCambio

      //. Creada dia 13.05.2013
      //. Retornar el tipo de cambio que se va a utilizar para convertir a DL

      lrGLSetup.FINDFIRST;
      IF (pwDivisa = lrGLSetup."LCY Code") OR (pwDivisa = '') THEN
        EXIT(1);

      lrCurrExch.SETRANGE ("Currency Code", pwDivisa);
      lrCurrExch.SETFILTER("Starting Date", '<=%1', pwFecha);
      lrCurrExch.FINDLAST;

      EXIT(lrCurrExch."Relational Exch. Rate Amount");
    END;

    LOCAL PROCEDURE _RepartirCosteTouroperador@1100217001(prSer@1100217000 : Record 7010163);
    VAR
      lrCoste@1100217001 : Record 7010166;
      lrCoste2@1100217004 : Record 7010166;
      lwAcumulado@1100217002 : Decimal;
      lwPaxesTo@1100217003 : Decimal;
      lwAjuste@1100217005 : Decimal;
    BEGIN
      // _RepartirCosteTouroperador

      rTOTmp.RESET;

      lrCoste.RESET;
      lrCoste.SETRANGE (Delegacion              , prSer.Delegacion);
      lrCoste.SETRANGE ("N§ Servicio"           , prSer."N§ Servicio");
      lrCoste.SETFILTER(Concepto                , '%1|%2|%3', Text008, Text020, Text031);
      lrCoste.SETRANGE ("% Reparto TourOperador", 0);
      IF lrCoste.FINDSET THEN
      BEGIN
        REPEAT
          IF lrCoste."Origen Concepto" <> '' THEN
            //. Las lineas de soporte transporte tienen que repartirse sobre los pasajeros que tiene el transporte
            _RepartirCosteSoporte(lrCoste)
          ELSE
            _RepartirCosteLineaNormal(lrCoste);
        UNTIL lrCoste.NEXT = 0;
        lrCoste.DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE _RepartirCosteLineaNormal@1100217003(VAR prCoste@1100217000 : Record 7010166);
    VAR
      lrCoste2@1100217004 : Record 7010166;
      lwAcumulado@1100217003 : Decimal;
      lwAcumuladoExento@1000000000 : Decimal;
      lwAcumuladoBase@1000000002 : Decimal;
      lwPaxesTo@1100217002 : Decimal;
      lwAjuste@1100217001 : Decimal;
      lwAjusteExento@1000000001 : Decimal;
      lwAjusteBase@1000000003 : Decimal;
      lwPorc@1100217005 : Decimal;
      lwIVA@1100217006 : Decimal;
    BEGIN
      //. Las lineas de coste normal tienen que repartirse sobre el pasaje del servicio
      lwAcumulado       := 0;
      lwAcumuladoExento := 0; //+$042
      lwAcumuladoBase   := 0; //+$042
      rTOTmp.FINDFIRST;
      REPEAT
        CASE prCoste."Tipo Elemento" OF
          prCoste."Tipo Elemento"::Paxes:
          BEGIN
            CASE prCoste."Tipo Pax" OF
              rParPer."Codigo Adulto" :
              BEGIN
                lwPaxesTo := rTOTmp.Adultos;
                lwPorc    := ROUND(((rTOTmp.Adultos * 100) / prCoste."Cantidad Aplicada"), 0.01);
              END;
              rParPer."Codigo Ni¤o" :
              BEGIN
                lwPaxesTo := rTOTmp.Ni¤os;
                lwPorc    := ROUND(((rTOTmp.Ni¤os * 100) / prCoste."Cantidad Aplicada"), 0.01);
              END;
              //. Este contempla cuando el transportista tiene precio por pax pero no se ha entrado el desglose Adulto/Ni¤o
              //+$032 <
              ELSE
              BEGIN
                lwPaxesTo := rTOTmp."N§ Personas";
                lwPorc    := ROUND(((rTOTmp."N§ Personas" * 100) / prCoste."Personas servicio"), 0.01);
              END;
              //+$032 >
            END;
          END;

          prCoste."Tipo Elemento"::Servicio:
          BEGIN
            lwPaxesTo := rTOTmp."N§ Personas";
            lwPorc    := ROUND(((rTOTmp."N§ Personas" * 100) / prCoste."Personas servicio"), 0.01);
          END;

          prCoste."Tipo Elemento"::Suplemento:
          BEGIN
            CASE prCoste."Tipo Pax" OF
              rParPer."Codigo Adulto" :
              BEGIN
                lwPaxesTo := rTOTmp.Adultos;
                lwPorc    := ROUND(((rTOTmp.Adultos * 100) / prCoste."Personas servicio"), 0.01);
              END;
              rParPer."Codigo Ni¤o" :
              BEGIN
                lwPaxesTo := rTOTmp.Ni¤os;
                lwPorc    := ROUND(((rTOTmp.Ni¤os * 100) / prCoste."Personas servicio"), 0.01);
              END;
              ELSE
              BEGIN
                lwPaxesTo := rTOTmp."N§ Personas";
                lwPorc    := ROUND(((rTOTmp."N§ Personas" * 100) / prCoste."Personas servicio"), 0.01);
              END;
            END;
          END;
        END;

        IF lwPorc <> 0 THEN
        BEGIN
          lrCoste2 := prCoste;
          lrCoste2."Cantidad Real"          := lwPaxesTo;
          lrCoste2.TourOperador             := rTOTmp.TourOperador;
          lrCoste2."% Reparto TourOperador" := lwPorc;
          lrCoste2."Importe Original SIN"   := lrCoste2."Importe sin Impuesto";
          lrCoste2."Importe Original CON"   := lrCoste2."Importe con Impuesto";
          lrCoste2."Importe sin Impuesto"   := ROUND(((lrCoste2."Importe Original SIN" * lwPorc) / 100), 0.01);
          lrCoste2."Importe con Impuesto"   := ROUND(((lrCoste2."Importe Original CON" * lwPorc) / 100), 0.01);

          lwAcumulado += lrCoste2."Importe con Impuesto";

          lrCoste2."Importe sin Impuesto" := ROUND(lrCoste2."Importe sin Impuesto");
          lrCoste2."Importe con Impuesto" := ROUND(lrCoste2."Importe con Impuesto");
          //+$042 <
          lrCoste2."Importe base impuesto" := ROUND(((lrCoste2."Importe base impuesto" * lwPorc) / 100), 0.01);
          lrCoste2."Importe exento"        := ROUND(((lrCoste2."Importe exento" * lwPorc) / 100), 0.01);
          lwAcumuladoExento += lrCoste2."Importe exento";
          lwAcumuladoBase   += lrCoste2."Importe base impuesto";
          //+$042 >

          lrCoste2."Orden Linea" := busca_ultima_linea(lrCoste2);

          lrCoste2.VALIDATE("Cod. divisa");
          lrCoste2.INSERT(TRUE);
        END;
      UNTIL rTOTmp.NEXT = 0;

      lwAjuste := prCoste."Importe con Impuesto" - lwAcumulado;
      //+$042 <
      lwAjusteExento := prCoste."Importe exento" - lwAcumuladoExento;
      lwAjusteBase   := prCoste."Importe base impuesto" - lwAcumuladoBase;
      //+$042 >
      IF (lwAjuste <> 0) OR
         (lwAjusteExento <> 0) OR
         (lwAjusteBase <> 0) THEN
      BEGIN
        lwIVA := prCoste.GetIVA(rConCom); //+$036

        lrCoste2."Importe con Impuesto"  := lrCoste2."Importe con Impuesto" + lwAjuste;
        lrCoste2."Importe sin Impuesto"  := ROUND(lrCoste2."Importe con Impuesto" / lwIVA); //+$036
        //+$042 <
        lrCoste2."Importe exento"        := lrCoste2."Importe exento" + lwAjusteExento;
        lrCoste2."Importe base impuesto" := lrCoste2."Importe base impuesto" + lwAjusteBase;
        //+$042 >
        lrCoste2.VALIDATE("Cod. divisa"); //+$036
        lrCoste2.MODIFY(TRUE); //+$031
      END;
    END;

    PROCEDURE _RepartirCosteSoporte@1100217002(VAR prCoste@1100217000 : Record 7010166);
    VAR
      lrPerSop@1100217005 : Record 7010214;
      lrCoste2@1100217004 : Record 7010166;
      lrRsv@1100217006 : Record 7010162;
      lwAcumulado@1100217003 : Decimal;
      lwAcumuladoExento@1000000000 : Decimal;
      lwAcumuladoBase@1000000002 : Decimal;
      lwPaxesTo@1100217002 : Decimal;
      lwAjuste@1100217001 : Decimal;
      lwAjusteExento@1000000001 : Decimal;
      lwAjusteBase@1000000003 : Decimal;
      lwPorc@1100217007 : Decimal;
      lwIVA@1100217008 : Decimal;
    BEGIN
      // _RepartirCosteSoporte

      rTOTmpSop.RESET;
      rTOTmpSop.DELETEALL;

      lrPerSop.RESET;
      lrPerSop.SETRANGE(Delegacion   , prCoste.Delegacion);
      lrPerSop.SETRANGE("N§ Servicio", prCoste."N§ Servicio");
      lrPerSop.SETRANGE("Id Soporte" , prCoste."Id Soporte");
      IF lrPerSop.FINDSET THEN
      BEGIN
        REPEAT
          //. Vamos a crear un temporal de los touroperadores

          lrRsv.GET(lrPerSop.Delegacion, lrPerSop."N§ Reserva");

          rTOTmpSop.SETRANGE(TourOperador, lrRsv.TourOperador);
          IF NOT rTOTmpSop.FINDFIRST THEN
          BEGIN
            rTOTmpSop.INIT;
            rTOTmpSop.Delegacion   := lrPerSop.Delegacion;
            rTOTmpSop."N§ Reserva" := lrPerSop."N§ Reserva";
            rTOTmpSop.TourOperador := lrRsv.TourOperador;
            rTOTmpSop.INSERT;
          END;

          rTOTmpSop.Adultos       += lrPerSop.Adultos;
          rTOTmpSop.Ni¤os         += lrPerSop.Ni¤os;
          rTOTmpSop."N§ Personas" += (lrPerSop.Adultos + lrPerSop.Ni¤os);
          rTOTmpSop.MODIFY;
        UNTIL lrPerSop.NEXT = 0;
      END;

      lwAcumulado       := 0;
      //+$042 <
      lwAcumuladoExento := 0;
      lwAcumuladoBase   := 0;
      //+$042 >

      rTOTmpSop.RESET;
      rTOTmpSop.FINDFIRST;
      REPEAT
        CASE prCoste."Tipo Elemento" OF
          prCoste."Tipo Elemento"::Paxes:
          BEGIN
            CASE prCoste."Tipo Pax" OF
              rParPer."Codigo Adulto" :
              BEGIN
                lwPaxesTo := rTOTmpSop.Adultos;
                lwPorc      := ROUND(((rTOTmpSop.Adultos * 100) / prCoste."Personas servicio"), 0.01);
              END;
              rParPer."Codigo Ni¤o" :
              BEGIN
                lwPaxesTo := rTOTmpSop.Ni¤os;
                lwPorc := ROUND(((rTOTmpSop.Ni¤os * 100) / prCoste."Personas servicio"), 0.01);
              END;
            END;
          END;

          prCoste."Tipo Elemento"::Servicio:
          BEGIN
            lwPaxesTo := rTOTmpSop."N§ Personas";
            lwPorc      := ROUND(((rTOTmpSop."N§ Personas" * 100) / prCoste."Personas servicio"), 0.01);
          END;
        END;

        IF lwPorc <> 0 THEN
        BEGIN
          lrCoste2 := prCoste;
          lrCoste2."Cantidad Real"          := lwPaxesTo;
          lrCoste2.TourOperador             := rTOTmpSop.TourOperador;
          lrCoste2."% Reparto TourOperador" := lwPorc;
          lrCoste2."Importe Original SIN"   := lrCoste2."Importe sin Impuesto";
          lrCoste2."Importe Original CON"   := lrCoste2."Importe con Impuesto";
          lrCoste2."Importe sin Impuesto"   := ROUND(((lrCoste2."Importe Original SIN" * lwPorc) / 100), 0.01);
          lrCoste2."Importe con Impuesto"   := ROUND(((lrCoste2."Importe Original CON" * lwPorc) / 100), 0.01);

          lwAcumulado += lrCoste2."Importe con Impuesto";

          lrCoste2."Importe sin Impuesto" := ROUND(lrCoste2."Importe sin Impuesto");
          lrCoste2."Importe con Impuesto" := ROUND(lrCoste2."Importe con Impuesto");
          //+$042 <
          lrCoste2."Importe base impuesto" := ROUND(((lrCoste2."Importe base impuesto" * lwPorc) / 100), 0.01);
          lrCoste2."Importe exento"        := ROUND(((lrCoste2."Importe exento" * lwPorc) / 100), 0.01);
          lwAcumuladoExento += lrCoste2."Importe exento";
          lwAcumuladoBase   += lrCoste2."Importe base impuesto";
          //+$042 >
          lrCoste2."Orden Linea" := busca_ultima_linea(lrCoste2);

          lrCoste2.VALIDATE("Cod. divisa");
          lrCoste2.INSERT(TRUE);
        END;
      UNTIL rTOTmpSop.NEXT = 0;

      lwAjuste       := prCoste."Importe con Impuesto" - lwAcumulado;
      //+$042 <
      lwAjusteExento := prCoste."Importe exento" - lwAcumuladoExento;
      lwAjusteBase   := prCoste."Importe base impuesto" - lwAcumuladoBase;
      //+$042 >
      IF (lwAjuste <> 0) OR
         (lwAjusteExento <> 0) OR
         (lwAjusteBase <> 0) THEN
      BEGIN
        lwIVA := prCoste.GetIVA(rConCom); //+$036

        lrCoste2."Importe con Impuesto" := lrCoste2."Importe con Impuesto" + lwAjuste;
        lrCoste2."Importe sin Impuesto" := ROUND(lrCoste2."Importe con Impuesto" / lwIVA); //+$036
        //+$042 <
        lrCoste2."Importe exento"        := lrCoste2."Importe exento" + lwAjusteExento;
        lrCoste2."Importe base impuesto" := lrCoste2."Importe base impuesto" + lwAjusteBase;
        //+$042 >
        lrCoste2.VALIDATE("Cod. divisa"); //+$036
        lrCoste2.MODIFY(TRUE); //+$031
      END;
    END;

    BEGIN
    {
      $002 AJF 04072011 Elimino construcci¢n del tipo "If not insert then modify" que puede dar problemas
                        en la funci¢n "TR_Traduce_Compra".

      $003 AJF 04072011 (GOC-OC-11016) Se modifican los c lculos de costes para que cojan el precio en la divisa
                        del contrato en lugar de la divisa local.

      $004 AJF 04072011 (GOC-OC-11016) Se actualizan las l¡neas de Coste/Ingreso con el c¢digo de divisa para que
                        se c lculen los valores de importes DL con y sin impuestos. Se crea una funci¢n _UltimaFechaCambio
                        para obtener la £ltima fecha de cambio para la divisa que sea anterior o igual a la fecha del
                        servicio.

      $005 AJS 16112011 En el calculo de margenes hay que almacenar siempre el importe y precio en divisa local

      $006 AJS 21112011 En el calculo de los beneficios hay que tener en cuenta la posible divisa de costes

      $007 AJS 21112011 En el calculo de beneficios en coste/ingreso tomar la fecha del servicio

      $008 AJS 18012012 Permitimos los precios en divisa para los costes de transportista

      $012 JPT 16/05/12 CNT-CAR-12004 / EXC-08 Transport support service

      $013 JPT 22/05/12 CNT-CAR-12004 / EXC-10 Suppliers supplement per hotel zone. Nueva funcion EX_PrecioBaseExcPax

      $014 JPT 28/05/12 CNT-CAR-12004/EXC-14 Cash receipt to pay excursions services

      $015 JPT 29/05/12  CNT-CAR-12004/EXC-15 - Providers confirmations

      $016 JPT 01/06/12 Separamos las lineas de Coste de proveedor excursion en Adultos y Ni¤os

      $017 JPT 08/08/12 CNT-OC-12004 Incluir filtro por oficina en las excursiones: Rellenamos Oficina

      $018 AJS 20082012 Agrego un control de seguridad para ver si el usuario tiene permisos para calcular la excursion

      $019 AJS 21112012 Solo calculamos el ingreso de reservas no liquidadas

      $020 AJS 21052013 Almacenamos la tasa de cambio del momento de hacer la conversion a DL de los costes

      $021 AJS 16062013 Nueva opcion de calculo de coste por cupon, la funcion esta en otra codeunit

      $022 AJS 17062013 Elimino la funcion CreaLineasConfirmacionProveedo porque se sustituye por el calculo por ticket

      $023 AJS 10082013 Nueva funcion _RepartirCosteTouroperador para corregir el modo en que reparte el coste entre los
                        touroperadores, sobre todo en el caso de los soportes de transporte

      $024 AJS 27082013 Para buscar los precios de suplemento de guia oficial utilizo el contrato que se especifica en
                        el propio suplemento en lugar del contrato de la prestacion

      $025 AJS 27082013 Las lineas de coste proveedor solo tienen que insertarse si tienen importe

      $026 AJS 28082013 Corrijo error de filtros a la hora de buscar precios para los servicios de soporte

      $027 AJS 29082013 En el calculo de proveedores de servicio solo muestro error en caso de que falte precio de adulto

      $028 AJS 29082013 Se eliminan referencias de la tabla Elemento Transportar excursion porque es obsoleta

      $029 AJS 26092013 He rehecho la rutina de GO_PSupl para que sea mas optima y de mejor informacion

      $030 AJS 27092013 Almacenar el codigo de suplemento en la linea de Guia Oficial

      $031 AJS 22102013 Corrijo un error en la funcion de reparto de costes por Touroperador que creaba una linea nueva en
                        lugar de modificar la actual

      $032 AJS 28102013 Corrijo un posible error en el reparto de algunas lineas de coste de transportista, con precio por pax
                        pero sin desglose de precio adulto/ni¤o

      $033 AJS 28102013 Rellenar campos informativos en la tabla de prestaciones

      $034 AJS 04122013 Permito que los suplementos de Guia Oficial se metan sin especificar Zona fisica

      $035 AJS 11122013 Mostrar un mensaje de error si no existe tarifa de venta

      $036 AJS 29012014 Modifico el reparto de coste por touroperador para evitar un error con el desglose impuestos

      $037 AJS 24022014 Nuevo parametro para indicar si la excursion no tiene coste

      $038 AJS 26022014 Control de error en los suplementos, para que no puedan indicar adultos o ni¤os si no hay adultos o ni¤os
                        en el servicio

      $039 AJS 11052014 Eliminar la gestion de minimos porque queda obsoleta

      $040 AJS 13052014 Incluir un parametro para poder recalcular sin confirmacion por el usuario

      $041 AJS 13052014 Dejamos de rellenar el campo Zona compra de la reserva, no lo necesitamos

      $042 AJS 20082014 CNT-OC-14077, el calculo de impuestos y exenciones esta en el VALIDATE de Importe

      $043 ARM 15092014 CNT-OC-14069, Se a¤aden las promociones en el c lculo de costes

      $044 AJS 25092014 Las excursiones sin coste no tienen que calcular coste

      $045 AJS 16102014 Se elimina el campo Tipo facturacion de los contratos de compra

      $046 ARM 24112014 CNT-OC-14055 Separar invitados de venta y de compra

      $047 AJS 29012015 Modificar la llamada al calculo de coste por reserva, nuevo parametro

      $048 AJS 30032015 En esta funcion hay que utilizar los invitados de coste no los de venta

      $049 AJS 28052015 Los borrados de coste tienen que ir con TRUE
    }
    END.
  }
}
