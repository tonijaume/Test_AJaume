OBJECT Codeunit 11 Gen. Jnl.-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=07/01/14;
    Time=[ 5:58:42];
    Modified=Yes;
    Version List=AIC2009,NAVW16.00.01,CACEM6.00.01,NAVES6.00,RegF269949;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 252=rimd;
    OnRun=VAR
            TempJnlLineDim@1000 : TEMPORARY Record 356;
          BEGIN
            GLSetup.GET;
            IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
              TempJnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
              TempJnlLineDim."Journal Template Name" := "Journal Template Name";
              TempJnlLineDim."Journal Batch Name" := "Journal Batch Name";
              TempJnlLineDim."Journal Line No." := "Line No.";
              TempJnlLineDim."Dimension Code" := GLSetup."Global Dimension 1 Code";
              TempJnlLineDim."Dimension Value Code" := "Shortcut Dimension 1 Code";
              TempJnlLineDim.INSERT;
            END;
            IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
              TempJnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
              TempJnlLineDim."Journal Template Name" := "Journal Template Name";
              TempJnlLineDim."Journal Batch Name" := "Journal Batch Name";
              TempJnlLineDim."Journal Line No." := "Line No.";
              TempJnlLineDim."Dimension Code" := GLSetup."Global Dimension 2 Code";
              TempJnlLineDim."Dimension Value Code" := "Shortcut Dimension 2 Code";
              TempJnlLineDim.INSERT;
            END;
            RunCheck(Rec,TempJnlLineDim);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=can only be a closing date for G/L entries;ESP=s¢lo puede ser una fecha £ltima para movs. de cuentas';
      Text001@1001 : TextConst 'ENU=is not within your range of allowed posting dates;ESP=no est  dentro del periodo de fechas de registro permitidas';
      Text002@1002 : TextConst 'ENU=%1 or %2 must be G/L Account or Bank Account.;ESP=%1 o %2 deben ser de tipo Cuenta o Banco.';
      Text003@1003 : TextConst 'ENU=must have the same sign as %1;ESP=debe tener el mismo signo que %1.';
      Text004@1004 : TextConst 'ENU=You must not specify %1 when %2 is %3.;ESP=No se debe especificar %1 cuando %2 es %3.';
      Text005@1005 : TextConst 'ENU=%1 + %2 must be %3.;ESP=%1 + %2 debe ser %3.';
      Text006@1006 : TextConst 'ENU=%1 + %2 must be -%3.;ESP=%1 + %2 debe ser -%3.';
      Text007@1007 : TextConst 'ENU=must be positive;ESP=debe ser positivo';
      Text008@1008 : TextConst 'ENU=must be negative;ESP=debe ser negativo';
      Text009@1009 : TextConst 'ENU=must have a different sign than %1;ESP=debe ser de signo diferente a %1';
      Text010@1010 : TextConst 'ENU=%1 %2 and %3 %4 is not allowed.;ESP=%1 %2  y %3 %4 no est  permit.';
      Text011@1011 : TextConst 'ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5;ESP=La combin. de dimensiones utilizada en %1 %2, %3, %4 est  bloq. %5';
      Text012@1012 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5;ESP=La dimensi¢n util. en %1 %2, %3, %4 ha causado error. %5';
      AccountingPeriod@1013 : Record 50;
      GLSetup@1014 : Record 98;
      UserSetup@1015 : Record 91;
      GenJnlTemplate@1020 : Record 80;
      rPar@1103355000 : Record 7009700;
      FAJnlCheckLine@1016 : Codeunit 5631;
      DimMgt@1017 : Codeunit 408;
      AllowPostingFrom@1018 : Date;
      AllowPostingTo@1019 : Date;
      GenJnlTemplateFound@1021 : Boolean;
      OverrideDimErr@1022 : Boolean;
      CostAccMgt@1460000 : Codeunit 3010551;
      CostAccSetup@1460001 : Record 3010558;
      ApplicationManagement@1100002 : Codeunit 1;
      DocPost@1100001 : Codeunit 7000006;
      Text50000@1103355001 : TextConst 'ESP=El tipo de documento esta en blanco en la linea %1 del diario %2-%3, desea continuar?';

    PROCEDURE RunCheck@4(VAR GenJnlLine@1000 : Record 81;VAR JnlLineDim@1001 : Record 356);
    VAR
      PaymentTerms@1004 : Record 3;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
      Cust@1005 : Record 18;
      Vendor@1006 : Record 23;
      ICPartner@1007 : Record 413;
      ICGLAcount@1008 : Record 410;
      LicensePermission@1460000 : Record 2000000043;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN
          EXIT;
        IF NOT GenJnlTemplateFound THEN BEGIN
          IF GenJnlTemplate.GET("Journal Template Name") THEN;
          GenJnlTemplateFound := TRUE;
        END;

        TESTFIELD("Posting Date");
        IF "Posting Date" <> NORMALDATE("Posting Date") THEN BEGIN
          IF ("Account Type" <> "Account Type"::"G/L Account") OR
             ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
          THEN
            FIELDERROR("Posting Date",Text000);
          AccountingPeriod.GET(NORMALDATE("Posting Date") + 1);
          AccountingPeriod.TESTFIELD("New Fiscal Year",TRUE);
          AccountingPeriod.TESTFIELD("Date Locked",TRUE);
        END;

        IF DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text001);

        IF ("Document Date" <> 0D) THEN
          IF ("Document Date" <> NORMALDATE("Document Date")) AND
             (("Account Type" <> "Account Type"::"G/L Account") OR
              ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account"))
          THEN
            FIELDERROR("Document Date",Text000);

        TESTFIELD("Document No.");

        //$001 INCOMING
        rPar.FINDFIRST;
        //-$006IF (rPar."Departamento obligatorio") AND
        //-$006    NOT ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"]) THEN
        IF (rPar."Departamento obligatorio") AND
           NOT "System-Created Entry" THEN //+$006
          TESTFIELD("Shortcut Dimension 1 Code");

        IF "Document Type" = "Document Type"::Invoice THEN
          IF PaymentTerms.GET("Payment Terms Code") THEN
            IF "Document Date" <> 0D THEN
              PaymentTerms.VerifyMaxNoDaysTillDueDate("Due Date","Document Date",FIELDCAPTION("Due Date"));

        IF (("Document Type" IN ["Document Type"::Bill,"Document Type"::Invoice,"Document Type"::"Credit Memo"]) OR
           ("Applies-to Doc. Type" IN ["Applies-to Doc. Type"::Bill,"Applies-to Doc. Type"::Invoice])) AND
           ApplicationManagement.AccessToCartera
        THEN
          DocPost.CheckGenJnlLine(GenJnlLine);

        // $003 AJS 27.05.2009

        IF (("Account Type" IN ["Account Type"::Customer, "Account Type"::Vendor]) OR
            ("Bal. Account Type" IN ["Bal. Account Type"::Customer, "Bal. Account Type"::Vendor])) AND
           ("Document Type" = 0) THEN BEGIN
          IF NOT CONFIRM(Text50000, FALSE, "Line No.", "Journal Template Name", "Journal Batch Name") THEN
            TESTFIELD("Document Type");
        END;

        IF ("Account Type" IN
            ["Account Type"::Customer,
             "Account Type"::Vendor,
             "Account Type"::"Fixed Asset",
             "Account Type"::"IC Partner"]) AND
           ("Bal. Account Type" IN
            ["Bal. Account Type"::Customer,
             "Bal. Account Type"::Vendor,
             "Bal. Account Type"::"Fixed Asset",
             "Bal. Account Type"::"IC Partner"])
        THEN
          ERROR(
            Text002,
            FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));

        IF "Bal. Account No." = '' THEN
          TESTFIELD("Account No.");

        IF Amount * "Amount (LCY)" < 0 THEN
          FIELDERROR("Amount (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));

        IF ("Account Type" = "Account Type"::"G/L Account") AND
           ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")
        THEN
          TESTFIELD("Applies-to Doc. No.",'');

        IF ("Recurring Method" IN
            ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
           ("Currency Code" <> '')
        THEN
          ERROR(
            Text004,
            FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

        IF "Account No." <> '' THEN
          CASE "Account Type" OF
            "Account Type"::"G/L Account":
              BEGIN
                IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
                   ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
                THEN
                  TESTFIELD("Gen. Posting Type");
                IF ("Gen. Posting Type" <> "Gen. Posting Type"::" ") AND
                   ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
                THEN BEGIN
                  IF "VAT Amount" + "VAT Base Amount" <> Amount THEN
                    ERROR(
                      Text005,FIELDCAPTION("VAT Amount"),FIELDCAPTION("VAT Base Amount"),
                      FIELDCAPTION(Amount));
                  IF "Currency Code" <> '' THEN
                    IF "VAT Amount (LCY)" + "VAT Base Amount (LCY)" <> "Amount (LCY)" THEN
                      ERROR(
                        Text005,FIELDCAPTION("VAT Amount (LCY)"),
                        FIELDCAPTION("VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
                END;
              END;
            "Account Type"::Customer,"Account Type"::Vendor:
              BEGIN
                TESTFIELD("Gen. Posting Type",0);
                TESTFIELD("Gen. Bus. Posting Group",'');
                TESTFIELD("Gen. Prod. Posting Group",'');
                TESTFIELD("VAT Bus. Posting Group",'');
                TESTFIELD("VAT Prod. Posting Group",'');

                IF (("Account Type" = "Account Type"::Customer) AND
                   ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase)) OR
                   (("Account Type" = "Account Type"::Vendor) AND
                   ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Sale))
                THEN
                  ERROR(
                    STRSUBSTNO(
                      Text010,
                      FIELDCAPTION("Account Type"),"Account Type",
                      FIELDCAPTION("Bal. Gen. Posting Type"),"Bal. Gen. Posting Type"));

                IF "Document Type" <> 0 THEN
                  IF "Account Type" = "Account Type"::Customer THEN
                    CASE "Document Type" OF
                      "Document Type"::"Credit Memo":
                        ErrorIfPositiveAmt(GenJnlLine);
                      "Document Type"::Payment:

                        // $004 INCOMING
                        // La comprobacion de importe Positivo/Negativo solo la tiene que hacer si tiene el campo
                        // "Applies-to Doc. Type" rellenado

                        IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
                        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
                           ("Applies-to Doc. No." <> '')
                        THEN
                          ErrorIfNegativeAmt(GenJnlLine)
                        ELSE
                          ErrorIfPositiveAmt(GenJnlLine);
                        END;
                      ELSE
                        ErrorIfNegativeAmt(GenJnlLine);
                    END
                  ELSE
                    CASE "Document Type" OF
                      "Document Type"::"Credit Memo":
                        ErrorIfNegativeAmt(GenJnlLine);
                      "Document Type"::Payment:
                        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
                           ("Applies-to Doc. No." <> '')
                        THEN
                          ErrorIfPositiveAmt(GenJnlLine)
                        ELSE
                          ErrorIfNegativeAmt(GenJnlLine);
                      ELSE
                        ErrorIfPositiveAmt(GenJnlLine);
                    END;
                IF NOT "System-Created Entry" AND (Amount * "Sales/Purch. (LCY)" < 0) THEN
                  FIELDERROR(
                    "Sales/Purch. (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));
                TESTFIELD("Job No.",'');
                IF "Account Type" = "Account Type"::Customer THEN BEGIN
                  IF Cust.GET("Account No.") THEN BEGIN
                    Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
                    IF (Cust."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       (ICPartner.GET(Cust."IC Partner Code"))
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                  END;
                END ELSE BEGIN
                  IF Vendor.GET("Account No.") THEN BEGIN
                    Vendor.CheckBlockedVendOnJnls(Vendor,"Document Type",TRUE);
                    IF (Vendor."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       (ICPartner.GET(Vendor."IC Partner Code"))
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                  END;
                END;
              END;
            "Account Type"::"Bank Account":
              BEGIN
                TESTFIELD("Gen. Posting Type",0);
                TESTFIELD("Gen. Bus. Posting Group",'');
                TESTFIELD("Gen. Prod. Posting Group",'');
                TESTFIELD("VAT Bus. Posting Group",'');
                TESTFIELD("VAT Prod. Posting Group",'');
                TESTFIELD("Job No.",'');
                IF (Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                  TESTFIELD("Check Printed",TRUE);
              END;
            "Account Type"::"IC Partner":
              BEGIN
                ICPartner.GET("Account No.");
                ICPartner.CheckICPartner;
                IF "Journal Template Name" <> '' THEN
                  IF (GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany) THEN
                    FIELDERROR("Account Type");
              END;
          END;

        IF "Bal. Account No." <> '' THEN
          CASE "Bal. Account Type" OF
            "Bal. Account Type"::"G/L Account":
              BEGIN
                IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
                   ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
                THEN
                  TESTFIELD("Bal. Gen. Posting Type");
                IF ("Bal. Gen. Posting Type" <> "Bal. Gen. Posting Type"::" ") AND
                   ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
                THEN BEGIN
                  IF "Bal. VAT Amount" + "Bal. VAT Base Amount" <> -Amount THEN
                    ERROR(
                      Text006,FIELDCAPTION("Bal. VAT Amount"),FIELDCAPTION("Bal. VAT Base Amount"),
                      FIELDCAPTION(Amount));
                  IF "Currency Code" <> '' THEN
                    IF "Bal. VAT Amount (LCY)" + "Bal. VAT Base Amount (LCY)" <> -"Amount (LCY)" THEN
                      ERROR(
                        Text006,FIELDCAPTION("Bal. VAT Amount (LCY)"),
                        FIELDCAPTION("Bal. VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
                END;
              END;
            "Bal. Account Type"::Customer,"Bal. Account Type"::Vendor:
              BEGIN
                TESTFIELD("Bal. Gen. Posting Type",0);
                TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                TESTFIELD("Bal. VAT Bus. Posting Group",'');
                TESTFIELD("Bal. VAT Prod. Posting Group",'');

                IF (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                   ("Gen. Posting Type" = "Gen. Posting Type"::Purchase)) OR
                   (("Bal. Account Type" = "Bal. Account Type"::Vendor) AND
                   ("Gen. Posting Type" = "Gen. Posting Type"::Sale))
                THEN
                  ERROR(
                    STRSUBSTNO(
                      Text010,
                      FIELDCAPTION("Bal. Account Type"),"Bal. Account Type",
                      FIELDCAPTION("Gen. Posting Type"),"Gen. Posting Type"));

                IF "Document Type" <> 0 THEN BEGIN
                  IF ("Bal. Account Type" = "Bal. Account Type"::Customer) =
                     ("Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"])
                  THEN BEGIN
                    IF Amount < 0 THEN
                      FIELDERROR(Amount,Text007);
                  END ELSE
                    IF Amount > 0 THEN
                      FIELDERROR(Amount,Text008);
                END;
                IF Amount * "Sales/Purch. (LCY)" > 0 THEN
                  FIELDERROR(
                    "Sales/Purch. (LCY)",
                    STRSUBSTNO(Text009,FIELDCAPTION(Amount)));
                TESTFIELD("Job No.",'');
                IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN BEGIN
                  IF Cust.GET("Bal. Account No.") THEN BEGIN
                    Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
                    IF (Cust."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       (ICPartner.GET(Cust."IC Partner Code"))
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                  END
                END ELSE BEGIN
                  IF Vendor.GET("Bal. Account No.") THEN BEGIN
                    Vendor.CheckBlockedVendOnJnls(Vendor,"Document Type",TRUE);
                    IF (Vendor."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       (ICPartner.GET(Vendor."IC Partner Code"))
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                  END;
                END;
              END;
            "Bal. Account Type"::"Bank Account":
              BEGIN
                TESTFIELD("Bal. Gen. Posting Type",0);
                TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                TESTFIELD("Bal. VAT Bus. Posting Group",'');
                TESTFIELD("Bal. VAT Prod. Posting Group",'');
                TESTFIELD("Job No.",'');
                IF (Amount > 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                  TESTFIELD("Check Printed",TRUE);
                IF "Bank Payment Type" = "Bank Payment Type"::"Electronic Payment" THEN
                  TESTFIELD(GenJnlLine."Elect. Pmts Exported",TRUE);
              END;
            "Bal. Account Type"::"IC Partner":
              BEGIN
                ICPartner.GET("Bal. Account No.");
                ICPartner.CheckICPartner;
                IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                  FIELDERROR("Bal. Account Type");
              END;
          END;

        IF (GenJnlLine."IC Partner G/L Acc. No." <> '') THEN
          IF (ICGLAcount.GET(GenJnlLine."IC Partner G/L Acc. No.")) THEN
          ICGLAcount.TESTFIELD(Blocked,FALSE);

        IF NOT PaymentTerms.GET(GenJnlLine."Payment Terms Code") THEN
          CLEAR(PaymentTerms);
        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           (("Document Type" <> "Document Type"::Invoice) AND
            (NOT
             (("Document Type" = "Document Type"::"Credit Memo") AND
              (PaymentTerms."Calc. Pmt. Disc. on Cr. Memos"))))
        THEN BEGIN
          TESTFIELD("Pmt. Discount Date",0D);
          TESTFIELD("Payment Discount %",0);
        END;

        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           ("Applies-to Doc. No." <> '')
        THEN
          TESTFIELD("Applies-to ID",'');

        IF ("Account Type" <> "Account Type"::"Bank Account") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
        THEN
          TESTFIELD("Bank Payment Type","Bank Payment Type"::" ");

        IF ("Account Type" = "Account Type"::"Fixed Asset") OR
           ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
        THEN
          FAJnlCheckLine.RUN(GenJnlLine);

        IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
        THEN BEGIN
          TESTFIELD("Depreciation Book Code",'');
          TESTFIELD("FA Posting Type",0);
        END;

        IF OverrideDimErr THEN
          EXIT;

        IF NOT DimMgt.CheckJnlLineDimComb(JnlLineDim) THEN
          ERROR(
            Text011,
            TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
            DimMgt.GetDimCombErr);

        TableID[1] := DimMgt.TypeToTableID1("Account Type");
        No[1] := "Account No.";
        TableID[2] := DimMgt.TypeToTableID1("Bal. Account Type");
        No[2] := "Bal. Account No.";
        TableID[3] := DATABASE::Job;
        No[3] := "Job No.";
        TableID[4] := DATABASE::"Salesperson/Purchaser";
        No[4] := "Salespers./Purch. Code";
        TableID[5] := DATABASE::Campaign;
        No[5] := "Campaign No.";
        IF NOT DimMgt.CheckJnlLineDimValuePosting(JnlLineDim,TableID,No) THEN
          IF "Line No." <> 0 THEN
            ERROR(
              Text012,
              TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
              DimMgt.GetDimValuePostingErr)
          ELSE
            ERROR(DimMgt.GetDimValuePostingErr);
      END;

      IF LicensePermission.GET(LicensePermission."Object Type"::Table, DATABASE::"Cost Accounting Setup") THEN
        IF LicensePermission."Execute Permission" <> LicensePermission."Execute Permission"::" " THEN
          IF CostAccSetup.READPERMISSION THEN
          CostAccMgt.CheckValidCcAndCoInGlEntry(GenJnlLine);
      // CA00001.end
    END;

    PROCEDURE DateNotAllowed@1(PostingDate@1000 : Date) : Boolean;
    BEGIN
      IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
        IF USERID <> '' THEN
          IF UserSetup.GET(USERID) THEN BEGIN
            AllowPostingFrom := UserSetup."Allow Posting From";
            AllowPostingTo := UserSetup."Allow Posting To";
          END;
        IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
          GLSetup.GET;
          AllowPostingFrom := GLSetup."Allow Posting From";
          AllowPostingTo := GLSetup."Allow Posting To";
        END;
        IF AllowPostingTo = 0D THEN
          AllowPostingTo := 31129999D;
      END;
      EXIT((PostingDate < AllowPostingFrom) OR (PostingDate > AllowPostingTo));
    END;

    PROCEDURE ErrorIfPositiveAmt@2(GenJnlLine@1000 : Record 81);
    BEGIN
      IF GenJnlLine.Amount > 0 THEN
        GenJnlLine.FIELDERROR(Amount,Text008);
    END;

    PROCEDURE ErrorIfNegativeAmt@3(GenJnlLine@1000 : Record 81);
    BEGIN
      IF GenJnlLine.Amount < 0 THEN
        GenJnlLine.FIELDERROR(Amount,Text007);
    END;

    PROCEDURE SetOverDimErr@5();
    BEGIN
      OverrideDimErr := TRUE;
    END;

    BEGIN
    {
      // INCOMING

      $001 Si en la tabla de parametros agencia se ha marcado que el departamento es obligatorio, chequeamos que este rellenado

      $002 Control para que en los diarios de pagos deje introducir movimientos que no tengan tipo de documento

      $003 AJS 27.05.2009

        .- Si estamos registrando lineas contra cliente o proveedor damos un aviso si
           el campo Tipo documento esta en blanco

      $004 La comprobacion de importe Positivo/Negativo solo la tiene que hacer si tiene el campo
           "Applies-to Doc. Type" rellenado

      $005 AJS 02042013 La comprobacion de departamento no lo hacemos para facturas/abonos porque ya se habr  hecho en las
                        funciones de registro del documento

      $006 AJS 07012014 La comprobacion de departamento no la hacemos si el asiento tiene la marca de System-Created Entry para
                        evitar problemas con procesos como ajuste tipo cambio divisa y asiento regularizacion

      <changelog>
        <add id="CA0001" dev="SRYSER" feature="PSCORS417" date="2006-01-30" area="COSTACCTNG"
          releaseversion="CACEM5.00">
          RunCheck: Check valid Dim 1 and 2, 2 new Vars CostAccSetup / CostAccMgt.</add>
        <change id="CA0002" dev="AUGMENTUM" date="2007-10-18" area="COSTACCTNG"
              baseversion="CACEM5.00" releaseversion="CACEM6.00" feature="NAVCORS14124">
              Correct UIDs used in Global Features.</change>
        <change id="CA0003" dev="all-e" feature="NAVCORS34914" date="2009-03-05" area="COSTACCTNG"
              baseversion="CACEM5.00" releaseversion="CACEM6.00.01">
              Not possible post in general journal if don't have cost accounting</change>
        <add id="es0001" dev="VGARCA" date="2004-08-27" area="CARTERA" request="es-start-40"
        releaseversion="ES4.00">Cartera Add-On (Spanish)</add>
        <add id="es0002" dev="VGARCA" date="2005-10-21" area="MISCELL" feature="PS-SE-12120"
        releaseversion="ES4.00.02">Development Standards</add>
        <add id="es0003" dev="VGARCA" date="2006-03-30" area="ELECPMTS" feature="PSCORS239"
        releaseversion="ES5.00">Electronic Payments</add>
        <remove id="es0004" dev="TMARTI" date="2008-07-24" area="MISCELL"
          baseversion="ES4.00.02" releaseversion="ES6.00"  feature="NAVCORS26647">
          MISCELL - 129 out of 190+ objects should not be part of this area
        </remove>
      </changelog>
    }
    END.
  }
}
