OBJECT Codeunit 5920 ServItemManagement
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to create a %1?;ESP=¨Confirma que desea crear un %1?';
      Text001@1001 : TextConst 'ENU=Service item %1 was created. This service item does not belong to any service contract.;ESP=Se cre¢ el producto de servicio %1, que no pertenece a ning£n contrato de servicio.';
      Item@1002 : Record 27;
      ServItemGr@1003 : Record 5904;
      ServItem@1004 : Record 5940;
      ServMgtSetup@1006 : Record 5911;
      ServHeader@1009 : Record 5900;
      ServInvoiceLine@1015 : Record 5902;
      ItemUnitOfMeasure@1020 : Record 5404;
      TempReservEntry@1014 : TEMPORARY Record 337;
      GLSetup@1021 : Record 98;
      ServiceItemTEMP@1200 : TEMPORARY Record 5940;
      ServiceItemCompTEMP@1201 : TEMPORARY Record 5941;
      ResSkillMgt@1013 : Codeunit 5931;
      NoSeriesMgt@1007 : Codeunit 396;
      ServLogMgt@1008 : Codeunit 5906;
      ServOrderMgt@1018 : Codeunit 5900;
      NextLineNo@1010 : Integer;
      Index@1011 : Integer;
      Text002@1012 : TextConst 'ENU=You have inserted a %1 on the selected %2.\Would you like to copy this information into the %1 field for the newly created %3?;ESP=Ha insertado un %1 en el %2 seleccionado.\¨Desea copiar esta informaci¢n en el campo %1 del reci‚n creado %3?';
      Text003@1016 : TextConst 'ENU=Posting cannot be completed successfully. %1 %2  belongs to the %3 that requires creating service items. Check if the %4 field contains a whole number.;ESP=No es posible completar el registro correctamente. %1 %2 pertenece a %3, que requiere crear productos de servicio. Compruebe si el valor del campo %4 es un n£mero entero.';
      Text004@1017 : TextConst 'ENU=Posting cannot be completed successfully. For the items that are used to replace or create service item components, the %1 field on the %2 must contain a whole number.;ESP=El registro no se puede completar correctamente. Para los productos utilizados para reemplazar o crear componentes de productos de servicio, el campo %1 de %2 debe contener un n£mero entero.';

    PROCEDURE AddOrReplaceSIComponent@5(VAR ServLine@1000 : Record 5902;ServHeader@1010 : Record 5900;ServShptDocNo@1007 : Code[20];ServShptLineNo@1008 : Integer;VAR TempTrackingSpecification@1009 : TEMPORARY Record 336);
    VAR
      ServItemComponent@1003 : Record 5941;
      ServItemComponent2@1002 : Record 5941;
      NewServItemComponent@1001 : Record 5941;
      ComponentLine@1004 : Integer;
      x@1006 : Integer;
      TrackingLinesExist@1005 : Boolean;
    BEGIN
      IF (ServLine.Type <> ServLine.Type::Item) OR (ServLine."Qty. to Ship" = 0) THEN
        EXIT;
      WITH ServLine DO BEGIN
        CASE "Spare Part Action" OF
          "Spare Part Action"::"Component Replaced":
            BEGIN
              CheckWholeNumber(ServLine);
              NewServItemComponent.LOCKTABLE;
              NewServItemComponent.RESET;
              NewServItemComponent.SETRANGE(Active,FALSE);
              NewServItemComponent.SETRANGE("Parent Service Item No.","Service Item No.");
              IF NewServItemComponent.FIND('+') THEN
                ComponentLine := NewServItemComponent."Line No."
              ELSE
                ComponentLine := 0;

              IF ServItemComponent2.GET(TRUE,"Service Item No.","Component Line No.") THEN BEGIN
                ServItemComponent := ServItemComponent2;
                CLEAR(ServLogMgt);
                ServLogMgt.ServItemComponentRemoved(ServItemComponent);
                ServItemComponent.DELETE;
                ServItemComponent2.Active := FALSE;
                ServItemComponent2."Line No." := ComponentLine + 10000;
                ServItemComponent2."From Line No." := ServItemComponent."Line No.";
                ServItemComponent2."Service Order No." := ServHeader."No.";
                ServItemComponent2.INSERT;
                IF ServItemComponent2.Type = ServItemComponent2.Type::"Service Item" THEN BEGIN
                  ServItem.GET(ServItemComponent2."No.");
                  ServItem.Status := ServItem.Status::Defective;
                  ServItem.MODIFY;
                END;
              END;

              NewServItemComponent.INIT;
              NewServItemComponent.Active := TRUE;
              NewServItemComponent."Parent Service Item No." := "Service Item No.";
              NewServItemComponent."Line No." := ServItemComponent."Line No.";
              NewServItemComponent.Type := NewServItemComponent.Type::Item;
              NewServItemComponent."No." := "No.";
              NewServItemComponent."Date Installed" := ServHeader."Posting Date";

              TempTrackingSpecification.SETRANGE("Source Type",DATABASE::"Service Line");
              TempTrackingSpecification.SETRANGE("Source Subtype","Document Type");
              TempTrackingSpecification.SETRANGE("Source ID","Document No.");
              TempTrackingSpecification.SETRANGE("Source Ref. No.","Line No.");
              TrackingLinesExist := TempTrackingSpecification.FIND('-');
              IF TrackingLinesExist THEN BEGIN
                NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
                IF TempTrackingSpecification.NEXT = 0 THEN
                  TrackingLinesExist := FALSE;
              END;

              NewServItemComponent."Variant Code" := "Variant Code";
              NewServItemComponent.Description := Description;
              NewServItemComponent."Description 2" := "Description 2";
              NewServItemComponent."Last Date Modified" := TODAY;
              NewServItemComponent.INSERT;
              CLEAR(ServLogMgt);
              ServLogMgt.ServItemComponentAdded(NewServItemComponent);

              NewServItemComponent.SETRANGE(Active,TRUE);
              IF NewServItemComponent.FIND('+') THEN
                ComponentLine := NewServItemComponent."Line No."
              ELSE
                ComponentLine := 0;

              FOR x := 2 TO "Qty. to Ship" DO BEGIN
                NewServItemComponent.INIT;
                NewServItemComponent."Parent Service Item No." := "Service Item No.";
                ComponentLine := ComponentLine + 10000;
                NewServItemComponent."Line No." := ComponentLine;
                NewServItemComponent.Active := TRUE;
                NewServItemComponent."No." := "No.";
                NewServItemComponent.Type := NewServItemComponent.Type::Item;
                NewServItemComponent."Date Installed" := ServHeader."Posting Date";
                IF TrackingLinesExist THEN BEGIN
                  NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
                  IF TempTrackingSpecification.NEXT = 0 THEN
                    TrackingLinesExist := FALSE;
                END;
                NewServItemComponent.Description := Description;
                NewServItemComponent."Description 2" := "Description 2";
                NewServItemComponent."Last Date Modified" := TODAY;
                NewServItemComponent.INSERT;
                CLEAR(ServLogMgt);
                ServLogMgt.ServItemComponentAdded(NewServItemComponent);
              END;
            END;
          "Spare Part Action"::"Component Installed":
            BEGIN
              CheckWholeNumber(ServLine);
              NewServItemComponent.LOCKTABLE;
              NewServItemComponent.RESET;
              NewServItemComponent.SETRANGE(Active,TRUE);
              NewServItemComponent.SETRANGE("Parent Service Item No.","Service Item No.");
              IF NewServItemComponent.FIND('+') THEN
                ComponentLine := NewServItemComponent."Line No."
              ELSE
                ComponentLine := 0;

              TempTrackingSpecification.SETRANGE("Source Type",DATABASE::"Service Line");
              TempTrackingSpecification.SETRANGE("Source Subtype","Document Type");
              TempTrackingSpecification.SETRANGE("Source ID","Document No.");
              TempTrackingSpecification.SETRANGE("Source Ref. No.","Line No.");
              TrackingLinesExist := TempTrackingSpecification.FIND('-');

              FOR x := 1 TO "Qty. to Ship" DO BEGIN
                NewServItemComponent.INIT;
                NewServItemComponent."Parent Service Item No." := "Service Item No.";
                ComponentLine := ComponentLine + 10000;
                NewServItemComponent."Line No." := ComponentLine;
                NewServItemComponent.Active := TRUE;
                NewServItemComponent."No." := "No.";
                NewServItemComponent.Type := NewServItemComponent.Type::Item;
                NewServItemComponent."Date Installed" := ServHeader."Posting Date";
                IF TrackingLinesExist THEN BEGIN
                  NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
                  IF TempTrackingSpecification.NEXT = 0 THEN
                    TrackingLinesExist := FALSE;
                END;
                NewServItemComponent.Description := Description;
                NewServItemComponent."Description 2" := "Description 2";
                NewServItemComponent."Last Date Modified" := TODAY;
                NewServItemComponent.INSERT;
                CLEAR(ServLogMgt);
                ServLogMgt.ServItemComponentAdded(NewServItemComponent);
              END;
            END;
          "Spare Part Action"::Permanent,
          "Spare Part Action"::"Temporary":
            BEGIN
              ServItem.GET("Service Item No.");
              ServOrderMgt."Replacement-CreateServItem"(ServItem,ServLine,ServHeader."Posting Date",
                ServShptDocNo,ServShptLineNo,TempTrackingSpecification);
            END;
        END;
      END;
    END;

    PROCEDURE CreateServItemOnSalesLineShpt@3(SalesHeader@1000 : Record 36;SalesLine@1003 : Record 37;SalesShipmentLine@1008 : Record 111);
    VAR
      ServItemComponent@1004 : Record 5941;
      ItemTrackingCode@1005 : Record 6502;
      BOMComp@1001 : Record 90;
      BOMComp2@1002 : Record 90;
      TrackingLinesExist@1006 : Boolean;
      x@1007 : Integer;
    BEGIN
      IF NOT (SalesHeader."Document Type" IN [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice]) THEN
        EXIT;

      ServMgtSetup.GET;
      GLSetup.GET;

      IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine."Qty. to Ship (Base)" > 0) THEN BEGIN
        Item.GET(SalesLine."No.");
        IF NOT ItemTrackingCode.GET(Item."Item Tracking Code") THEN
          ItemTrackingCode.INIT;
        IF ServItemGr.GET(Item."Service Item Group") AND ServItemGr."Create Service Item" THEN BEGIN
          IF SalesLine."Qty. to Ship (Base)" <> ROUND(SalesLine."Qty. to Ship (Base)",1) THEN
            ERROR(
              Text003,
              Item.TABLECAPTION,
              Item."No.",
              ServItemGr.TABLECAPTION,
              SalesLine.FIELDCAPTION("Qty. to Ship (Base)"));

          TempReservEntry.SETRANGE("Item No.",SalesLine."No.");
          TempReservEntry.SETRANGE("Location Code",SalesLine."Location Code");
          TempReservEntry.SETRANGE("Variant Code",SalesLine."Variant Code");
          TempReservEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
          TempReservEntry.SETRANGE("Source ID",SalesLine."Document No.");
          TempReservEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
          TrackingLinesExist := TempReservEntry.FINDFIRST;

          ServiceItemTEMP.DELETEALL;
          ServiceItemCompTEMP.DELETEALL;

          FOR x := 1 TO SalesLine."Qty. to Ship (Base)" DO BEGIN
            CLEAR(ServItem);
            ServItem.INIT;
            ServMgtSetup.TESTFIELD("Service Item Nos.");
            NoSeriesMgt.InitSeries(
              ServMgtSetup."Service Item Nos.",ServItem."No. Series",0D,ServItem."No.",ServItem."No. Series");
            ServItem.INSERT;
            ServItem."Sales/Serv. Shpt. Document No." := SalesShipmentLine."Document No.";
            ServItem."Sales/Serv. Shpt. Line No." := SalesShipmentLine."Line No.";
            ServItem."Shipment Type" := ServItem."Shipment Type"::Sales;
            ServItem.VALIDATE(Description,
              COPYSTR(SalesLine.Description,1,MAXSTRLEN(ServItem.Description)));
            ServItem."Description 2" := COPYSTR(
                STRSUBSTNO('%1 %2',SalesHeader."Document Type",SalesHeader."No."),
                1,MAXSTRLEN(ServItem."Description 2"));
            ServItem.VALIDATE("Customer No.",SalesHeader."Sell-to Customer No.");
            ServItem.VALIDATE("Ship-to Code",SalesHeader."Ship-to Code");
            ServItem.OmitAssignResSkills(TRUE);
            ServItem.VALIDATE("Item No.",Item."No.");
            ServItem.OmitAssignResSkills(FALSE);
            IF TrackingLinesExist THEN
              ServItem."Serial No." := TempReservEntry."Serial No.";
            ServItem."Variant Code" := SalesLine."Variant Code";

            ItemUnitOfMeasure.GET(Item."No.",SalesLine."Unit of Measure Code");

            ServItem.VALIDATE("Sales Unit Cost",ROUND(SalesLine."Unit Cost (LCY)"/
              ItemUnitOfMeasure."Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision"));
            IF SalesHeader."Currency Code" <> '' THEN
              ServItem.VALIDATE(
                "Sales Unit Price",
                AmountToLCY(
                  ROUND(SalesLine."Unit Price"/
                    ItemUnitOfMeasure."Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision"),
                  SalesHeader."Currency Factor",
                  SalesHeader."Currency Code",
                  SalesHeader."Posting Date"))
            ELSE
              ServItem.VALIDATE("Sales Unit Price",ROUND(SalesLine."Unit Price"/
                ItemUnitOfMeasure."Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision"));
            ServItem."Vendor No." := Item."Vendor No.";
            ServItem."Vendor Item No." := Item."Vendor Item No.";
            ServItem."Unit of Measure Code" := Item."Base Unit of Measure";
            ServItem."Sales Date" := SalesHeader."Posting Date";
            ServItem."Installation Date" := SalesHeader."Posting Date";
            ServItem."Warranty % (Parts)" := ServMgtSetup."Warranty Disc. % (Parts)";
            ServItem."Warranty % (Labor)" := ServMgtSetup."Warranty Disc. % (Labor)";
            ServItem."Warranty Starting Date (Parts)" := SalesHeader."Posting Date";
            IF FORMAT(ItemTrackingCode."Warranty Date Formula") <> '' THEN
              ServItem."Warranty Ending Date (Parts)" :=
                CALCDATE(ItemTrackingCode."Warranty Date Formula",SalesHeader."Posting Date")
            ELSE
              ServItem."Warranty Ending Date (Parts)" :=
                CALCDATE(
                  ServMgtSetup."Default Warranty Duration",
                  SalesHeader."Posting Date");
            ServItem."Warranty Starting Date (Labor)" := SalesHeader."Posting Date";
            ServItem."Warranty Ending Date (Labor)" :=
              CALCDATE(
                ServMgtSetup."Default Warranty Duration",
                SalesHeader."Posting Date");
            ServItem.MODIFY;
            CLEAR(ServiceItemTEMP);
            ServiceItemTEMP := ServItem;
            IF ServiceItemTEMP.INSERT THEN;
            ResSkillMgt.AssignServItemResSkills(ServItem);
            IF SalesLine."BOM Item No." <> '' THEN BEGIN
              CLEAR(BOMComp);
              BOMComp.SETRANGE("Parent Item No.",SalesLine."BOM Item No.");
              BOMComp.SETRANGE(Type,BOMComp.Type::Item);
              BOMComp.SETRANGE("No.",SalesLine."No.");
              BOMComp.SETRANGE("Installed in Line No.",0);
              IF BOMComp.FINDSET THEN
                REPEAT
                  CLEAR(BOMComp2);
                  BOMComp2.SETRANGE("Parent Item No.",SalesLine."BOM Item No.");
                  BOMComp2.SETRANGE("Installed in Line No.",BOMComp."Line No.");
                  NextLineNo := 0;
                  IF BOMComp2.FINDSET THEN
                    REPEAT
                      FOR Index := 1 TO ROUND(BOMComp2."Quantity per",1) DO BEGIN
                        NextLineNo := NextLineNo + 10000;
                        ServItemComponent.INIT;
                        ServItemComponent.Active := TRUE;
                        ServItemComponent."Parent Service Item No." := ServItem."No.";
                        ServItemComponent."Line No." := NextLineNo;
                        ServItemComponent.Type := ServItemComponent.Type::Item;
                        ServItemComponent."No." := BOMComp2."No.";
                        ServItemComponent."Date Installed" := SalesHeader."Posting Date";
                        ServItemComponent.Description := BOMComp2.Description;
                        ServItemComponent."Serial No." := '';
                        ServItemComponent."Variant Code" := BOMComp2."Variant Code";
                        ServItemComponent.INSERT;
                        CLEAR(ServiceItemCompTEMP);
                        ServiceItemCompTEMP := ServItemComponent;
                        ServiceItemCompTEMP.INSERT;
                      END;
                    UNTIL BOMComp2.NEXT = 0;
                UNTIL BOMComp.NEXT = 0;
            END;
            CLEAR(ServLogMgt);
            ServLogMgt.ServItemAutoCreated(ServItem);
            TrackingLinesExist := TempReservEntry.NEXT = 1;
          END;
        END;
      END;
    END;

    PROCEDURE CreateServItemOnServLine@7(ServHeader@1000 : Record 5900;ServLine@1003 : Record 5902;ServShptDocNo@1004 : Code[20];ServShptLineNo@1002 : Integer);
    VAR
      ItemTrackingCode@1005 : Record 6502;
      x@1007 : Integer;
      TrackingLinesExist@1001 : Boolean;
    BEGIN
      IF NOT (ServHeader."Document Type" IN [ServHeader."Document Type"::Order,ServHeader."Document Type"::Invoice]) THEN
        EXIT;

      ServMgtSetup.GET;

      IF (ServLine.Type = ServLine.Type::Item) AND (ServLine."Qty. to Ship (Base)" > 0) THEN BEGIN
        Item.GET(ServLine."No.");
        IF NOT ItemTrackingCode.GET(Item."Item Tracking Code") THEN
          ItemTrackingCode.INIT;
        IF ServItemGr.GET(Item."Service Item Group") AND ServItemGr."Create Service Item" THEN BEGIN
          IF ServLine."Qty. to Ship (Base)" <> ROUND(ServLine."Qty. to Ship (Base)",1) THEN
            ERROR(
              Text003,
              Item.TABLECAPTION,
              Item."No.",
              ServItemGr.TABLECAPTION,
              ServLine.FIELDCAPTION("Qty. to Ship (Base)"));

          TempReservEntry.SETRANGE("Item No.",ServLine."No.");
          TempReservEntry.SETRANGE("Location Code",ServLine."Location Code");
          TempReservEntry.SETRANGE("Variant Code",ServLine."Variant Code");
          TempReservEntry.SETRANGE("Source Subtype",ServLine."Document Type");
          TempReservEntry.SETRANGE("Source ID",ServLine."Document No.");
          TempReservEntry.SETRANGE("Source Ref. No.",ServLine."Line No.");
          TrackingLinesExist := TempReservEntry.FIND('-');

          FOR x := 1 TO ServLine."Qty. to Ship (Base)" DO BEGIN
            CLEAR(ServItem);
            ServItem.INIT;
            ServMgtSetup.TESTFIELD("Service Item Nos.");
            NoSeriesMgt.InitSeries(
              ServMgtSetup."Service Item Nos.",ServItem."No. Series",0D,ServItem."No.",ServItem."No. Series");
            ServItem.INSERT;
            ServItem."Sales/Serv. Shpt. Document No." := ServShptDocNo;
            ServItem."Sales/Serv. Shpt. Line No." := ServShptLineNo;
            ServItem."Shipment Type" := ServItem."Shipment Type"::Service;
            ServItem.VALIDATE(Description,
              COPYSTR(ServLine.Description,1,MAXSTRLEN(ServItem.Description)));
            ServItem."Description 2" := COPYSTR(
                STRSUBSTNO('%1 %2',ServHeader."Document Type",ServHeader."No."),
                1,MAXSTRLEN(ServItem."Description 2"));
            ServItem.VALIDATE("Customer No.",ServHeader."Customer No.");
            ServItem.VALIDATE("Ship-to Code",ServHeader."Ship-to Code");
            ServItem.OmitAssignResSkills(TRUE);
            ServItem.VALIDATE("Item No.",Item."No.");
            ServItem.OmitAssignResSkills(FALSE);
            IF TrackingLinesExist THEN
              ServItem."Serial No." := TempReservEntry."Serial No.";
            ServItem."Variant Code" := ServLine."Variant Code";
            ServItem.VALIDATE("Sales Unit Cost",ServLine."Unit Cost (LCY)");
            IF ServHeader."Currency Code" <> '' THEN
              ServItem.VALIDATE(
                "Sales Unit Price",
                AmountToLCY(
                  ServLine."Unit Price",
                  ServHeader."Currency Factor",
                  ServHeader."Currency Code",
                  ServHeader."Posting Date"))
            ELSE
              ServItem.VALIDATE("Sales Unit Price",ServLine."Unit Price");
            ServItem."Vendor No." := Item."Vendor No.";
            ServItem."Vendor Item No." := Item."Vendor Item No.";
            ServItem."Unit of Measure Code" := ServLine."Unit of Measure Code";
            ServItem."Sales Date" := ServHeader."Posting Date";
            ServItem."Installation Date" := ServHeader."Posting Date";
            ServItem."Warranty % (Parts)" := ServMgtSetup."Warranty Disc. % (Parts)";
            ServItem."Warranty % (Labor)" := ServMgtSetup."Warranty Disc. % (Labor)";
            ServItem."Warranty Starting Date (Parts)" := ServHeader."Posting Date";
            IF FORMAT(ItemTrackingCode."Warranty Date Formula") <> '' THEN
              ServItem."Warranty Ending Date (Parts)" :=
                CALCDATE(ItemTrackingCode."Warranty Date Formula",ServHeader."Posting Date")
            ELSE
              ServItem."Warranty Ending Date (Parts)" :=
                CALCDATE(
                  ServMgtSetup."Default Warranty Duration",
                  ServHeader."Posting Date");
            ServItem."Warranty Starting Date (Labor)" := ServHeader."Posting Date";
            ServItem."Warranty Ending Date (Labor)" :=
              CALCDATE(
                ServMgtSetup."Default Warranty Duration",
                ServHeader."Posting Date");
            ServItem.MODIFY;
            ResSkillMgt.AssignServItemResSkills(ServItem);
            CLEAR(ServLogMgt);
            ServLogMgt.ServItemAutoCreated(ServItem);
            TrackingLinesExist := TempReservEntry.NEXT = 1;
          END;
        END;
      END;
    END;

    PROCEDURE CreateServItemOnServItemLine@2(VAR ServItemLine@1000 : Record 5901);
    BEGIN
      WITH ServItemLine DO BEGIN
        TESTFIELD("Service Item No.",'');
        TESTFIELD("Document No.");
        TESTFIELD(Description);
        IF NOT CONFIRM(Text000,FALSE,LOWERCASE(ServItem.TABLECAPTION)) THEN
          EXIT;

        CLEAR(ServHeader);
        CLEAR(ServMgtSetup);
        ServMgtSetup.GET;
        ServHeader.GET("Document Type","Document No.");
        CLEAR(ServItem);
        ServItem.INIT;
        ServMgtSetup.TESTFIELD("Service Item Nos.");
        NoSeriesMgt.InitSeries(
          ServMgtSetup."Service Item Nos.", ServItem."No. Series",0D, ServItem."No.",
          ServItem."No. Series");
        ServItem.INSERT;
        ServItem.VALIDATE(Description,Description);
        ServItem.VALIDATE("Customer No.",ServHeader."Customer No.");
        ServItem.VALIDATE("Ship-to Code",ServHeader."Ship-to Code");
        ServItem.OmitAssignResSkills(TRUE);
        ServItem.VALIDATE("Item No.","Item No.");
        ServItem.OmitAssignResSkills(FALSE);
        ServItem."Variant Code" := "Variant Code";
        ServItem.VALIDATE("Serial No.","Serial No.");
        ServItem."Response Time (Hours)" := "Response Time (Hours)";
        ServItem."Sales Unit Cost" := 0;
        ServItem."Sales Unit Price" := 0;
        ServItem."Vendor No." := "Vendor No.";
        ServItem."Vendor Item No." := "Vendor Item No.";
        ServItem."Unit of Measure Code" := '';
        ServItem."Sales Date" := 0D;
        ServItem."Installation Date" := ServHeader."Posting Date";
        ServItem."Warranty Starting Date (Parts)" := "Warranty Starting Date (Parts)";
        ServItem."Warranty Ending Date (Parts)" := "Warranty Ending Date (Parts)";
        ServItem."Warranty Starting Date (Labor)" := "Warranty Starting Date (Labor)";
        ServItem."Warranty Ending Date (Labor)" := "Warranty Ending Date (Labor)";
        ServItem."Warranty % (Parts)" := "Warranty % (Parts)";
        ServItem."Warranty % (Labor)" := "Warranty % (Labor)";
        ServItem."Service Item Group Code" := "Service Item Group Code";
        IF "Service Price Group Code" <> '' THEN
          IF CONFIRM(Text002,FALSE,FIELDCAPTION("Service Price Group Code"),TABLECAPTION,ServItem.TABLECAPTION) THEN
            ServItem."Service Price Group Code" := "Service Price Group Code";
        ServItem.MODIFY;
        ResSkillMgt.AssignServItemResSkills(ServItem);
        CLEAR(ServLogMgt);
        ServLogMgt.ServItemAutoCreated(ServItem);
        MESSAGE(Text001,ServItem."No.");
        "Service Item No." := ServItem."No.";
        "Contract No." := '';
        MODIFY;
        CreateDim(
          DATABASE::"Service Item","Service Item No.",
          DATABASE::"Service Item Group","Service Item Group Code",
          DATABASE::"Responsibility Center","Responsibility Center");
      END;

      ServLogMgt.ServItemToServOrder(ServItemLine);

      ServInvoiceLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
      ServInvoiceLine.SETRANGE("Document Type",ServItemLine."Document Type");
      ServInvoiceLine.SETRANGE("Document No.",ServItemLine."Document No.");
      ServInvoiceLine.SETRANGE("Service Item Line No.",ServItemLine."Line No.");
      ServInvoiceLine.MODIFYALL("Service Item No.",ServItemLine."Service Item No.");
    END;

    LOCAL PROCEDURE AmountToLCY@22(FCAmount@1000 : Decimal;CurrencyFactor@1004 : Decimal;CurrencyCode@1005 : Code[10];CurrencyDate@1006 : Date) : Decimal;
    VAR
      CurrExchRate@1002 : Record 330;
      Currency@1003 : Record 4;
    BEGIN
      Currency.GET(CurrencyCode);
      Currency.TESTFIELD("Unit-Amount Rounding Precision");
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            CurrencyDate,CurrencyCode,
            FCAmount,CurrencyFactor),
          Currency."Unit-Amount Rounding Precision"));
    END;

    PROCEDURE CopyReservationEntry@1(SalesHeader@1003 : Record 36);
    VAR
      ReservEntry@1000 : Record 337;
    BEGIN
      ReservEntry.RESET;
      CLEAR(TempReservEntry);

      ReservEntry.SETRANGE("Source Subtype",SalesHeader."Document Type");
      ReservEntry.SETRANGE("Source ID",SalesHeader."No.");
      ReservEntry.SETRANGE(Positive,FALSE);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETFILTER("Serial No.",'<>%1','');
      ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>%1',0);

      IF ReservEntry.FINDSET THEN
        REPEAT
          TempReservEntry := ReservEntry;
          TempReservEntry.INSERT;
        UNTIL ReservEntry.NEXT = 0;
    END;

    PROCEDURE CopyReservationEntryService@8(ServHeader@1003 : Record 5900);
    VAR
      ReservEntry@1000 : Record 337;
    BEGIN
      ReservEntry.RESET;
      CLEAR(TempReservEntry);

      ReservEntry.SETRANGE("Source Subtype",ServHeader."Document Type");
      ReservEntry.SETRANGE("Source ID",ServHeader."No.");
      ReservEntry.SETRANGE(Positive,FALSE);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Service Line");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETFILTER("Serial No.",'<>%1','');
      ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>%1',0);

      IF ReservEntry.FINDSET THEN
        REPEAT
          TempReservEntry := ReservEntry;
          TempReservEntry.INSERT;
        UNTIL ReservEntry.NEXT = 0;
    END;

    PROCEDURE CreateServItemOnSalesInvoice@4(VAR SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      DummySalesShptLine@1002 : Record 111;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          CreateServItemOnSalesLineShpt(SalesHeader,SalesLine,DummySalesShptLine);
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE CheckWholeNumber@6(VAR ServLine@1000 : Record 5902);
    BEGIN
      WITH ServLine DO BEGIN
        IF Quantity <> ROUND(Quantity,1) THEN
          ERROR(Text004,FIELDCAPTION(Quantity),TABLECAPTION);
        IF "Qty. to Ship" <> ROUND("Qty. to Ship",1) THEN
          ERROR(Text004,FIELDCAPTION("Qty. to Ship"),TABLECAPTION);
      END;
    END;

    PROCEDURE ReturnServItemComp@1206(VAR ServItemTmp@1200 : TEMPORARY Record 5940;VAR ServItemCmpTmp@1201 : TEMPORARY Record 5941);
    BEGIN
      ServItemTmp.DELETEALL;
      IF ServiceItemTEMP.FIND('-') THEN
        REPEAT
          ServItemTmp := ServiceItemTEMP;
          ServItemTmp.INSERT;
        UNTIL ServiceItemTEMP.NEXT = 0;
      ServItemCmpTmp.DELETEALL;
      IF ServiceItemCompTEMP.FIND('-') THEN
        REPEAT
          ServItemCmpTmp := ServiceItemCompTEMP;
          ServItemCmpTmp.INSERT;
        UNTIL ServiceItemCompTEMP.NEXT = 0;
    END;

    BEGIN
    END.
  }
}
