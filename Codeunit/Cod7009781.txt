OBJECT Codeunit 7009781 Generar Excel Reporting
{
  OBJECT-PROPERTIES
  {
    Date=01/06/15;
    Time=12:14:43;
    Modified=Yes;
    Version List=AIC2009,OC-14044,COM;
  }
  PROPERTIES
  {
    Permissions=TableData 79=r,
                TableData 2000000006=r;
    OnRun=BEGIN
            GenerarExcelExcursiones(0); //. 0 = Completo

            GenerarExcelTransfer(0);
          END;

  }
  CODE
  {
    VAR
      rCompany@1100217041 : Record 2000000006;
      rPar@1100217052 : Record 7009700;
      rParPer@1100217054 : Record 7009701;
      rExcelTMP@1100217000 : TEMPORARY Record 7009785;
      Text001@1100217001 : TextConst 'ENU=Select the period of dates;ESP=Introduzca periodo de fechas';
      Text002@1100217002 : TextConst 'ENU=Date From #1########;ESP=Fecha desde #1########';
      Text003@1100217003 : TextConst 'ENU=To date #2########;ESP=Fecha hasta #2########';
      Text004@1100217004 : TextConst 'ENU=Sale Date;ESP=Fecha venta';
      Text005@1100217005 : TextConst 'ENU=Touroperator;ESP=Touroperador';
      Text006@1100217006 : TextConst 'ENU=Touroperator Name;ESP=Nombre Touroperador';
      Text007@1100217007 : TextConst 'ENU=Ticket;ESP=Ticket';
      Text008@1100217008 : TextConst 'ENU=Sale Person;ESP=Representante';
      Text009@1100217009 : TextConst 'ENU=Sale Guide name;ESP=Nombre guia venta';
      Text010@1100217010 : TextConst 'ENU=Excursion;ESP=Excursion';
      Text011@1100217011 : TextConst 'ENU=Excursion Name;ESP=Nombre excursion';
      Text012@1100217012 : TextConst 'ENU=Service date;ESP=Fecha Excursion';
      Text013@1100217013 : TextConst 'ENU=Language;ESP=Idioma';
      Text014@1100217014 : TextConst 'ENU=Market;ESP=Mercado';
      Text015@1100217015 : TextConst 'ENU=Adults;ESP=Adultos';
      Text016@1100217016 : TextConst 'ENU=Childs;ESP=Ni¤os';
      Text017@1100217017 : TextConst 'ENU=Hotel;ESP=Hotel';
      Text018@1100217018 : TextConst 'ENU=Hotel name;ESP=Nombre hotel';
      Text019@1100217019 : TextConst 'ENU=Hotel zone;ESP=Zona hotel';
      Text020@1100217020 : TextConst 'ENU=Adult price;ESP=Precio adulto';
      Text021@1100217021 : TextConst 'ENU=Child price;ESP=Precio ni¤o';
      Text022@1100217022 : TextConst 'ENU=Reservation income;ESP=Ingreso reserva';
      Text023@1100217023 : TextConst 'ENU=Net reservation income;ESP=Ingreso reserva neto';
      Text024@1100217024 : TextConst 'ENU=Free adults;ESP=Adultos invitados';
      Text025@1100217025 : TextConst 'ENU=Free childs;ESP=Ni¤os invitados';
      Text026@1100217026 : TextConst 'ENU=Liquidated Sale guide;ESP=Liquidado Guia venta';
      Text027@1100217027 : TextConst 'ENU=Liquidation No.;ESP=Num. Liquidacion';
      Text028@1100217028 : TextConst 'ENU=Liquidation Date;ESP=Fecha liquidacion';
      Text029@1100217029 : TextConst 'ENU=Refund;ESP=Reembolsada';
      Text030@1100217030 : TextConst 'ENU=Liquidation refund;ESP=Liquidacion reembolso';
      Text031@1100217031 : TextConst 'ENU=Refund liquidation date;ESP=Fecha liquidacion reembolso';
      Text032@1100217032 : TextConst 'ENU=Net cost;ESP=Coste neto';
      Text033@1100217033 : TextConst 'ENU=Touroperator commission;ESP=Comision Touroperador';
      Text034@1100217034 : TextConst 'ENU=Commission discount over invoice;ESP=Comision descuenta en factura';
      Text035@1100217035 : TextConst 'ENU=Credit Sale;ESP=Venta a credito';
      Text036@1100217036 : TextConst 'ENU=Sale Person commission;ESP=Comision Representante';
      Text037@1100217037 : TextConst 'ENU=Vendor name;ESP=Nombre proveedor';
      Text038@1100217038 : TextConst 'ENU=Sale office;ESP=Oficina de venta';
      Text039@1100217039 : TextConst 'ENU=Invoice No.;ESP=Factura venta';
      Text040@1100217040 : TextConst 'ENU=Credit memo Refund;ESP=Abono reembolso';
      Text041@1100217042 : TextConst 'ENU=Refund date;ESP=Fecha Reembolso';
      rExchange@1100217053 : Record 330;
      wLinea@1100217043 : Integer;
      Text042@1100217044 : TextConst 'ENU=Sale country;ESP=Pais venta';
      Text043@1100217045 : TextConst 'ENU=Zone name;ESP=Nombre zona';
      wTotal@1100217046 : Integer;
      wActual@1100217047 : Integer;
      Text044@1100217048 : TextConst 'ENU=Preparing data #1############################;ESP=Preparando datos de #1############################';
      Text045@1100217049 : TextConst 'ENU=Refund amount;ESP=Importe Reembolsado';
      Text046@1100217050 : TextConst 'ENU=Company;ESP=Compa¤ia';
      Text047@1100217051 : TextConst 'ENU=Confirmed cost;ESP=Coste confirmado';
      Text048@1100217055 : TextConst 'ENU=Arrival date;ESP=Fecha entrada';
      Text049@1100217056 : TextConst 'ENU=Airline;ESP=Compa¤ia aerea';
      Text050@1100217057 : TextConst 'ENU=Flight Number;ESP=Numero Vuelo';
      Text051@1100217058 : TextConst 'ENU=Flight;ESP=Vuelo';
      Text052@1100217059 : TextConst 'ENU=Private transfer;ESP=Transfer privado';
      Text053@1100217060 : TextConst 'ENU=Arrival Adults;ESP=Adultos entrada';
      Text054@1100217061 : TextConst 'ENU=Arrival Childs;ESP=Ni¤os entrada';
      Text055@1100217062 : TextConst 'ENU=Sale Zone;ESP=Zona venta';
      Text056@1100217063 : TextConst 'ENU=Purchase zone;ESP=Zona compra';
      Text057@1100217064 : TextConst 'ENU=Arrival Incomes;ESP=Ingresos entrada';
      Text058@1100217065 : TextConst 'ENU=Arrival Costs;ESP=Costes entrada';
      Text059@1100217066 : TextConst 'ENU=Airport;ESP=Aeropuerto';
      Text060@1100217067 : TextConst 'ENU=Validated cost;ESP=Coste Validado';
      Text061@1100217068 : TextConst 'ENU=Cost manual adjustments;ESP=Ajustes manuales de coste';
      wFechaDesde@1100217069 : Date;
      wFechaHasta@1100217070 : Date;
      Text062@1100217072 : TextConst 'ENU=Departure Adults;ESP=Adultos salida';
      Text063@1100217071 : TextConst 'ENU=Departure Childs;ESP=Ni¤os salida';
      Text064@1100217074 : TextConst 'ENU=Departure Incomes;ESP=Ingresos salida';
      Text065@1100217073 : TextConst 'ENU=Departure Costs;ESP=Costes salida';
      Text066@1100217075 : TextConst 'ENU=Arrival;ESP=Llegada';
      Text067@1100217076 : TextConst 'ENU=Separated;ESP=Separado';
      Text068@1100217077 : TextConst 'ENU=Billing Method;ESP=Tipo facturacion';
      Text069@1100217078 : TextConst 'ENU=Liquidation date;ESP=Fecha liquidacion';
      Text070@1100217079 : TextConst 'ENU=Invoice Posting date;ESP=Fecha registro factura';
      Text071@1100217080 : TextConst 'ENU=Hotel arrivals;ESP=Llegadas hotel';
      Text072@1100217081 : TextConst 'ENU=Transfers in destination;ESP=Traslados en destino';

    PROCEDURE GenerarExcelExcursiones@1100217000(pwOpcion@1100217002 : 'Completo,Pais,Empresa');
    VAR
      lrRsv@1100217000 : Record 7010162;
      lrRsvTMP@1100217011 : TEMPORARY Record 7010162;
      lrCosteTMP@1100217014 : TEMPORARY Record 7010166;
      lrHotelTMP@1100217017 : TEMPORARY Record 7009724;
      lrTO@1100217005 : Record 7009717;
      lrRep@1100217006 : Record 7010241;
      lrExcur@1100217007 : Record 7009710;
      lrHotel@1100217008 : Record 7009724;
      lrContTO@1100217009 : Record 7010142;
      lrCompanyInfo@1100217004 : Record 79;
      lrCompanyActual@1100217003 : Record 79;
      lrZona@1100217010 : Record 7009713;
      lwDialog@1100217001 : Dialog;
      lwID@1100217012 : Integer;
      lwSumar@1100217013 : Boolean;
      lwValidado@1100217015 : Decimal;
      lwAjustes@1100217016 : Decimal;
    BEGIN
      rExcelTMP.RESET;
      rExcelTMP.DELETEALL;

      wFechaDesde := 0D;
      wFechaHasta := 0D;

      lwDialog.OPEN(Text001 + '\' + Text002 + '\' + Text003);
      lwDialog.INPUT(1, wFechaDesde);
      lwDialog.INPUT(2, wFechaHasta);
      lwDialog.CLOSE;

      IF (wFechaDesde = 0D) OR (wFechaHasta = 0D) THEN
        EXIT;

      IF wFechaDesde > wFechaHasta THEN
        EXIT;

      lwID := 0;

      //+$005
      //. Buscamos los datos de informacion empresa para poder hacer la seleccion por pais si es necesario
      lrCompanyActual.FINDFIRST;

      //. Para cada empresa hacemos un recorrido de reservas para acumular por los criterios establecidos
      rCompany.RESET;
      IF pwOpcion = pwOpcion::Empresa THEN //+$005
        rCompany.SETRANGE(Name, COMPANYNAME);
      rCompany.FINDSET;
      _LineaCabecera;
      REPEAT
        lrCompanyInfo.CHANGECOMPANY(rCompany.Name);
        IF NOT lrCompanyInfo.FINDFIRST THEN
          CLEAR(lrCompanyInfo);

        //+$005
        IF (pwOpcion = pwOpcion::Completo) OR
           (lrCompanyActual."Country/Region Code" = lrCompanyInfo."Country/Region Code") THEN
        BEGIN
          rPar.CHANGECOMPANY(rCompany.Name);
          rPar.FINDFIRST;

          rParPer.CHANGECOMPANY(rCompany.Name);
          rParPer.FINDFIRST;


          lwDialog.OPEN(Text044 + '\' + '@2@@@@@@@@@@@@@@@@@@');
          lwDialog.UPDATE(1, rCompany.Name);

          lrRsvTMP.RESET;
          lrRsvTMP.DELETEALL;

          lrCosteTMP.RESET;
          lrCosteTMP.DELETEALL;

          lrRsv.RESET;
          lrRsv.CHANGECOMPANY(rCompany.Name);
          lrRsv.SETRANGE ("Fecha Excursion", wFechaDesde, wFechaHasta);
          lrRsv.SETFILTER(Producto     , '<>%1', '');
          lrRsv.SETRANGE (Anulada      , FALSE);

          wTotal  := lrRsv.COUNT;
          wActual := 0;
          IF lrRsv.FINDSET THEN
          BEGIN
            REPEAT
              wActual += 1;
              lwDialog.UPDATE(2, ROUND(wActual / wTotal * 10000, 1));

              lrRsvTMP.SETRANGE(Producto              , lrRsv.Producto);
              lrRsvTMP.SETRANGE("Fecha Excursion"     , lrRsv."Fecha Excursion");
              lrRsvTMP.SETRANGE(Oficina               , lrRsv.Oficina);
              lrRsvTMP.SETRANGE("Fecha Venta"         , lrRsv."Fecha Venta");
              lrRsvTMP.SETRANGE("Hotel Cliente"       , lrRsv."Hotel Cliente");
              lrRsvTMP.SETRANGE(TourOperador          , lrRsv.TourOperador);
              lrRsvTMP.SETRANGE("Guia Venta"          , lrRsv."Guia Venta");
              lrRsvTMP.SETRANGE("Fecha Liquidacion GV", lrRsv."Fecha Liquidacion GV");
              lrRsvTMP.SETRANGE("Num. Factura"        , lrRsv."Num. Factura");
              lrRsvTMP.SETRANGE("Num. abono reembolso", lrRsv."Num. abono reembolso");
              IF NOT lrRsvTMP.FINDFIRST THEN
              BEGIN
                lwID += 1;

                lrRsvTMP.INIT;
                lrRsvTMP.Delegacion             := lrRsv.Delegacion;
                lrRsvTMP."N§ Reserva"           := lwID;
                lrRsvTMP.Producto               := lrRsv.Producto;
                lrRsvTMP."Fecha Excursion"      := lrRsv."Fecha Excursion";
                lrRsvTMP.Oficina                := lrRsv.Oficina;
                lrRsvTMP."Fecha Venta"          := lrRsv."Fecha Venta";
                lrRsvTMP."Hotel Cliente"        := lrRsv."Hotel Cliente";
                lrRsvTMP.TourOperador           := lrRsv.TourOperador;
                lrRsvTMP."Guia Venta"           := lrRsv."Guia Venta";
                lrRsvTMP."Fecha Liquidacion GV" := lrRsv."Fecha Liquidacion GV";
                lrRsvTMP.Idioma                 := lrRsv.Idioma;
                lrRsvTMP."Num. Factura"         := lrRsv."Num. Factura";
                lrRsvTMP."Num. abono reembolso" := lrRsv."Num. abono reembolso";
                lrRsvTMP.INSERT;

                lrCosteTMP.RESET;
                lrCosteTMP.SETRANGE(TourOperador, lrRsv.TourOperador);
                lrCosteTMP.SETRANGE(Fecha       , lrRsv."Fecha Excursion");
                lrCosteTMP.SETRANGE(Excursion   , lrRsv.Producto);
                IF NOT lrCosteTMP.FINDFIRST THEN
                BEGIN
                  lwID += 1;

                  lrCosteTMP.INIT;
                  lrCosteTMP."Orden Linea"                := lwID;
                  lrCosteTMP.TourOperador                 := lrRsv.TourOperador;
                  lrCosteTMP.Fecha                        := lrRsv."Fecha Excursion";
                  lrCosteTMP.Excursion                    := lrRsv.Producto;
                  lrCosteTMP.Importe                      := _CosteConfirmado(lrRsv.Producto, lrRsv.TourOperador, lrRsv."Fecha Excursion",
                                                             lwValidado, lwAjustes);
                  lrCosteTMP."Importe Validacion"         := lwValidado;
                  lrCosteTMP."Importe con impuestos (DL)" := lwAjustes;
                  lrCosteTMP.INSERT;
                END;

                //+$006 <
                lrHotelTMP.RESET;
                IF NOT lrHotelTMP.GET(lrRsv."Hotel Cliente") THEN
                BEGIN
                  lrHotelTMP.INIT;
                  lrHotelTMP.Hotel := lrRsv."Hotel Cliente";
                  lrHotelTMP."Orden Entrada" := _SumarEntradas(lrRsv."Hotel Cliente");
                  lrHotelTMP.INSERT;
                END;
                //+$006 >
              END;

              lwSumar := NOT lrRsv.Reembolsada;
              IF NOT lwSumar THEN
              BEGIN
                IF (lrRsv."Fecha anulaci¢n/Reembolso" < wFechaDesde) OR
                   (lrRsv."Fecha anulaci¢n/Reembolso" > wFechaHasta) THEN  //+$003
                  lwSumar := TRUE;
              END;

              IF lwSumar THEN
              BEGIN
                lrRsvTMP.Adultos                 += lrRsv.Adultos;
                lrRsvTMP.Ni¤os                   += lrRsv.Ni¤os;
                lrRsvTMP."Venta - Invitados Adultos"     += lrRsv."Venta - Invitados Adultos";
                lrRsvTMP."Venta - Invitados ni¤os"       += lrRsv."Venta - Invitados ni¤os";
                //+$004 <
                IF lrRsv."Coste Reserva" <> 0 THEN
                  lrRsvTMP."Coste Reserva" += lrRsv."Coste Reserva"
                ELSE
                  lrRsvTMP."Coste Reserva" += _CosteReserva(lrRsv);
                //+$004 >
                lrRsvTMP."Comision Touroperador" += lrRsv."Comision Touroperador";
                lrRsvTMP."Comision Guia Venta"   += lrRsv."Comision Guia Venta";
              END
              ELSE
                lrRsvTMP."Importe reembolso" -= lrRsv."Ingreso reserva neto";

              lrRsvTMP."Ingreso reserva"      += lrRsv."Ingreso reserva";
              lrRsvTMP."Ingreso reserva neto" += lrRsv."Ingreso reserva neto";
              lrRsvTMP.MODIFY;
            UNTIL lrRsv.NEXT = 0;
          END;

          //. Recorremos la tabla temporal para exportar a excel

          lrRsvTMP.RESET;
          IF lrRsvTMP.FINDSET THEN
          BEGIN
            REPEAT
              lrTO.CHANGECOMPANY(rCompany.Name);
              IF NOT lrTO.GET(lrRsvTMP.TourOperador) THEN
                CLEAR(lrTO);

              lrRep.CHANGECOMPANY(rCompany.Name);
              IF NOT lrRep.GET(lrRsvTMP."Guia Venta") THEN
                CLEAR(lrRep);

              lrExcur.CHANGECOMPANY(rCompany.Name);
              IF NOT lrExcur.GET(lrRsvTMP.Producto) THEN
                CLEAR(lrExcur);

              lrHotel.CHANGECOMPANY(rCompany.Name);
              IF NOT lrHotel.GET(lrRsvTMP."Hotel Cliente") THEN
                CLEAR(lrHotel);

              lrZona.CHANGECOMPANY(rCompany.Name);
              IF NOT lrZona.GET(lrHotel."Zona Fisica") THEN
                CLEAR(lrZona);

              lrContTO.CHANGECOMPANY(rCompany.Name);
              lrContTO.SETRANGE (Delegacion             , lrRsvTMP.Delegacion);
              lrContTO.SETRANGE ("Tipo Contrato"        , lrContTO."Tipo Contrato"::TourOperador);
              lrContTO.SETFILTER("Fecha inicio contrato", '<=%1', lrRsvTMP."Fecha Venta");
              lrContTO.SETFILTER("Fecha final contrato" , '>=%1', lrRsvTMP."Fecha Venta");
              lrContTO.SETRANGE (TourOperador           , lrRsvTMP.TourOperador);
              lrContTO.SETRANGE (Confirmado             , TRUE);
              IF NOT lrContTO.FINDFIRST THEN
                CLEAR(lrContTO);

              wLinea += 1;

              _InsertarCelda(1, FORMAT(lrRsvTMP."Fecha Venta"));
              _InsertarCelda(2, lrRsvTMP.TourOperador);
              _InsertarCelda(3, lrTO.Nombre);
              _InsertarCelda(4, lrTO.Mercado);
              _InsertarCelda(5, lrRsvTMP."Guia Venta");
              _InsertarCelda(6, lrRep.Nombre);
              _InsertarCelda(7, lrRsvTMP.Producto);
              _InsertarCelda(8, lrExcur.Descripcion);
              _InsertarCelda(9, FORMAT(lrRsvTMP."Fecha Excursion"));
              _InsertarCelda(10, lrRsvTMP.Idioma);
              _InsertarCelda(11, FORMAT(lrRsvTMP.Adultos));
              _InsertarCelda(12, FORMAT(lrRsvTMP.Ni¤os));
              _InsertarCelda(13, lrRsvTMP."Hotel Cliente");
              _InsertarCelda(14, lrHotel.Nombre);
              _InsertarCelda(15, lrHotel."Zona Fisica");
              _InsertarCelda(16, FORMAT(lrRsvTMP."Ingreso reserva"));
              _InsertarCelda(17, FORMAT(lrRsvTMP."Ingreso reserva neto"));
              _InsertarCelda(18, FORMAT(lrRsvTMP."Venta - Invitados Adultos"));
              _InsertarCelda(19, FORMAT(lrRsvTMP."Venta - Invitados ni¤os"));
              _InsertarCelda(20, FORMAT(lrRsvTMP."Coste Reserva"));
              _InsertarCelda(21, FORMAT(-1 * lrRsvTMP."Comision Touroperador"));
              _InsertarCelda(22, FORMAT(lrContTO."Aplica comision en factura"));
              _InsertarCelda(23, FORMAT(lrRep."Trabaja a credito"));
              _InsertarCelda(24, FORMAT(lrRsvTMP."Comision Guia Venta"));
              _InsertarCelda(25, _NombreProveedor(lrRsvTMP.Producto));
              _InsertarCelda(26, lrRsvTMP.Oficina);
              _InsertarCelda(27, lrRsvTMP."Num. Factura");
              _InsertarCelda(28, lrRsvTMP."Num. abono reembolso");
              _InsertarCelda(29, lrCompanyInfo."Country/Region Code");
              _InsertarCelda(30, lrZona.Descripcion);
              _InsertarCelda(31, FORMAT(lrRsvTMP."Importe reembolso"));
              _InsertarCelda(32, rCompany.Name);
              _InsertarCelda(33, FORMAT(_BuscarCosteExcursion(lrCosteTMP, lrRsvTMP, lwValidado, lwAjustes)));
              _InsertarCelda(34, FORMAT(lwValidado));
              _InsertarCelda(35, FORMAT(lwAjustes));
              _InsertarCelda(36, FORMAT(lrRsvTMP."Fecha Liquidacion GV"));
              _InsertarCelda(37, FORMAT(_GetFechaRegistroFra(lrRsvTMP."Num. Factura"))); //+$002
              _InsertarCelda(38, FORMAT(_BuscarEntradas(lrHotelTMP, lrRsvTMP."Hotel Cliente"))); //+$006
            UNTIL lrRsvTMP.NEXT = 0;
          END;
          lwDialog.CLOSE;
        END;
      UNTIL rCompany.NEXT = 0;

      rExcelTMP.CreateBook;
      rExcelTMP.CreateSheet('EXCURSIONES', '', COMPANYNAME, USERID, TRUE, FALSE, 'TRASPASANDO A EXCEL');
      rExcelTMP.GiveUserControl();
    END;

    LOCAL PROCEDURE _LineaCabecera@1100217017();
    BEGIN
      wLinea := 1;

      _InsertarCelda(1, Text004);
      _InsertarCelda(2, Text005);
      _InsertarCelda(3, Text006);
      _InsertarCelda(4, Text014);
      _InsertarCelda(5, Text008);
      _InsertarCelda(6, Text009);
      _InsertarCelda(7, Text010);
      _InsertarCelda(8, Text011);
      _InsertarCelda(9, Text012);
      _InsertarCelda(10, Text013);
      _InsertarCelda(11, Text015);
      _InsertarCelda(12, Text016);
      _InsertarCelda(13, Text017);
      _InsertarCelda(14, Text018);
      _InsertarCelda(15, Text019);
      _InsertarCelda(16, Text022);
      _InsertarCelda(17, Text023);
      _InsertarCelda(18, Text024);
      _InsertarCelda(19, Text025);
      _InsertarCelda(20, Text032);
      _InsertarCelda(21, Text033);
      _InsertarCelda(22, Text034);
      _InsertarCelda(23, Text035);
      _InsertarCelda(24, Text036);
      _InsertarCelda(25, Text037);
      _InsertarCelda(26, Text038);
      _InsertarCelda(27, Text039);
      _InsertarCelda(28, Text040);
      _InsertarCelda(29, Text042);
      _InsertarCelda(30, Text043);
      _InsertarCelda(31, Text045);
      _InsertarCelda(32, Text046);
      _InsertarCelda(33, Text047);
      _InsertarCelda(34, Text060);
      _InsertarCelda(35, Text061);
      _InsertarCelda(36, Text069);
      _InsertarCelda(37, Text070); //+$002
      _InsertarCelda(38, Text071); //+$006
    END;

    LOCAL PROCEDURE _InsertarCelda@1100217001(pwColumna@1100217000 : Integer;pwValue@1100217001 : Text[250]);
    BEGIN
      rExcelTMP.INIT;
      rExcelTMP.VALIDATE("Row No.", wLinea);
      rExcelTMP.VALIDATE("Column No.", pwColumna);
      rExcelTMP.VALIDATE("Cell Value as Text", pwValue);
      rExcelTMP.INSERT;
    END;

    LOCAL PROCEDURE _SumarEntradas@1100217024(pwHotel@1100217000 : Code[20]) : Integer;
    VAR
      lrPer@1100217001 : Record 7009742;
      lrAco@1100217004 : Record 7009748;
      lwFecha@1100217002 : Date;
      lwRsvAnt@1100217003 : Integer;
      lwPersonas@1100217005 : Integer;
    BEGIN
      // _SumarEntradas

      lwPersonas := 0;

      lrPer.RESET;
      lrPer.CHANGECOMPANY(rCompany.Name);
      lrPer.SETCURRENTKEY("Hotel Booking", "Fecha entrada");
      lrPer.SETRANGE("Hotel Booking", pwHotel);
      lrPer.SETRANGE(Generada       , TRUE);

      FOR lwFecha := wFechaDesde TO wFechaHasta DO
      BEGIN
        //-$008lrPer.SETRANGE("Fecha entrada", lwFecha);
        //+$008 <
        lrPer.SETFILTER("Fecha entrada", '<=%1', lwFecha);
        lrPer.SETFILTER("Fecha salida" , '>%1', lwFecha);
        //+$008 >
        IF lrPer.FINDSET THEN
        BEGIN
          //. Solo queremos coger el primer periodo de cada reserva
          REPEAT
            IF lwRsvAnt <> lrPer."N§ Interno" THEN
            BEGIN
              lwRsvAnt := lrPer."N§ Interno";

              lrAco.RESET;
              lrAco.CHANGECOMPANY(rCompany.Name);
              lrAco.SETRANGE (Delegacion    , lrPer.Delegacion);
              lrAco.SETRANGE ("N§ Interno"  , lrPer."N§ Interno");
              lrAco.SETFILTER("Tipo Persona", '%1|%2', rParPer."Codigo Adulto", rParPer."Codigo Ni¤o");
              lrAco.SETRANGE (Generado      , TRUE);
              IF lrAco.FINDSET THEN
                lwPersonas += lrAco.COUNT;
            END;
          UNTIL lrPer.NEXT = 0;
        END
      END;

      EXIT(lwPersonas);
    END;

    LOCAL PROCEDURE _BuscarEntradas@1100217029(VAR prHotelTMP@1100217000 : TEMPORARY Record 7009724;pwHotel@1100217001 : Code[20]) : Integer;
    BEGIN
      // _BuscarEntradas

      IF prHotelTMP.GET(pwHotel) THEN
      BEGIN
        prHotelTMP.DELETE;

        EXIT(prHotelTMP."Orden Entrada")
      END;
    END;

    LOCAL PROCEDURE _CosteReserva@1100217006(prRsv@1100217000 : Record 7010162) : Decimal;
    VAR
      lrExc@1100217001 : Record 7009710;
      lrPrestCont@1100217002 : Record 7010141;
      lwCoste@1100217003 : Decimal;
    BEGIN
      lrExc.CHANGECOMPANY(rCompany.Name);
      IF NOT lrExc.GET(prRsv.Producto) THEN
        EXIT(0);

      IF NOT lrExc."Coste x ticket" THEN
      BEGIN
        lwCoste := 0;
        lwCoste := ROUND(prRsv."Ingreso reserva neto" * lrExc."Margen bruto" / 100);
        lwCoste := prRsv."Ingreso reserva neto" - lwCoste;
        EXIT(lwCoste);
      END;

      lrPrestCont.RESET;
      lrPrestCont.CHANGECOMPANY(rCompany.Name);
      lrPrestCont.SETRANGE("Codigo Producto", prRsv.Producto);
      IF lrPrestCont.FINDSET THEN
      BEGIN
        lwCoste := 0;
        REPEAT
          lwCoste += _CalcularPrestacion(lrPrestCont, prRsv);
        UNTIL lrPrestCont.NEXT = 0;
      END;

      EXIT(lwCoste);
    END;

    LOCAL PROCEDURE _CosteConfirmado@1100217009(pwProducto@1100217000 : Code[10];pwTouroperador@1100217001 : Code[10];pwFecha@1100217002 : Date;VAR pwValidado@1100217008 : Decimal;VAR pwAjustes@1100217010 : Decimal) : Decimal;
    VAR
      lrCoste@1100217003 : Record 7010166;
      lrCoste2@1100217006 : Record 7010166;
      lrVendorTMP@1100217005 : TEMPORARY Record 23;
      lwCoste@1100217004 : Decimal;
      lwCosteProveedor@1100217007 : Decimal;
      lwValidadoProveedor@1100217009 : Decimal;
      lwAjustesProveedor@1100217011 : Decimal;
      lwDivisa@1100217012 : Code[10];
    BEGIN
      pwValidado := 0;
      pwAjustes  := 0;

      lrCoste.CHANGECOMPANY(rCompany.Name);
      lrCoste.SETCURRENTKEY(Excursion, TourOperador, Proveedor, "N§ Factura", "Automatico/Manual", Fecha);
      lrCoste.SETRANGE(TourOperador, pwTouroperador);
      lrCoste.SETRANGE(Fecha       , pwFecha);
      lrCoste.SETRANGE(Excursion   , pwProducto);
      IF NOT lrCoste.FINDSET THEN
        EXIT(0);

      REPEAT
        IF NOT lrVendorTMP.GET(lrCoste.Proveedor) THEN
        BEGIN
          lrVendorTMP.INIT;
          lrVendorTMP."No." := lrCoste.Proveedor;
          lrVendorTMP.INSERT;

          lrCoste2.COPY(lrCoste);
          lrCoste2.CHANGECOMPANY(rCompany.Name);
          lrCoste2.SETRANGE(Proveedor, lrCoste.Proveedor);
          lrCoste2.FINDFIRST;
          lwDivisa := lrCoste2."Cod. divisa";

          lrCoste2.CALCSUMS("Importe sin Impuesto");
          lwCosteProveedor := (-1) * lrCoste2."Importe sin Impuesto";

          //. Buscamos el importe ya validado
          lrCoste2.SETFILTER("N§ Factura", '<>%1', '');
          lrCoste2.CALCSUMS("Importe sin Impuesto");
          lwValidadoProveedor := (-1) * lrCoste2."Importe sin Impuesto";

          lrCoste2.SETRANGE("Automatico/Manual", lrCoste."Automatico/Manual"::Manual);
          lrCoste2.CALCSUMS("Importe sin Impuesto");
          lwAjustesProveedor := (-1) * lrCoste2."Importe sin Impuesto";

          //. Hago esta comparacion para evitar convertir la divisa US3 en la divisa de venta ya que ambas con dolares
          IF COPYSTR(lwDivisa, 1, 2) <> COPYSTR(rPar."Divisa venta excursiones", 1, 2) THEN
          BEGIN
            lwCosteProveedor := rExchange.ExchangeAmtFCYToFCY_IC(pwFecha, lwDivisa, rPar."Divisa venta excursiones",
                                                                 lwCosteProveedor, rCompany.Name);
            lwCosteProveedor := ROUND(lwCosteProveedor);

            lwValidadoProveedor := rExchange.ExchangeAmtFCYToFCY_IC(pwFecha, lwDivisa, rPar."Divisa venta excursiones",
                                                                    lwValidadoProveedor, rCompany.Name);
            lwValidadoProveedor := ROUND(lwValidadoProveedor);

            lwAjustesProveedor := rExchange.ExchangeAmtFCYToFCY_IC(pwFecha, lwDivisa, rPar."Divisa venta excursiones",
                                                                   lwAjustesProveedor, rCompany.Name);
            lwAjustesProveedor := ROUND(lwAjustesProveedor);
          END;

          lwCoste    += lwCosteProveedor;
          pwValidado += lwValidadoProveedor;
          pwAjustes  += lwAjustesProveedor;
        END;
      UNTIL lrCoste.NEXT = 0;

      EXIT(lwCoste);
    END;

    LOCAL PROCEDURE _BuscarCosteExcursion@1100217022(VAR prCosteTMP@1100217000 : TEMPORARY Record 7010166;VAR prRsvTMP@1100217001 : TEMPORARY Record 7010162;VAR pwValidado@1100217002 : Decimal;VAR pwAjustes@1100217003 : Decimal) : Decimal;
    BEGIN
      pwValidado := 0;
      pwAjustes  := 0;

      prCosteTMP.RESET;
      prCosteTMP.SETRANGE(TourOperador, prRsvTMP.TourOperador);
      prCosteTMP.SETRANGE(Excursion   , prRsvTMP.Producto);
      prCosteTMP.SETRANGE(Fecha       , prRsvTMP."Fecha Excursion");
      IF prCosteTMP.FINDFIRST THEN
      BEGIN
        pwValidado := prCosteTMP."Importe Validacion";
        pwAjustes  := prCosteTMP."Importe con impuestos (DL)";

        prCosteTMP.DELETE;
        EXIT(prCosteTMP.Importe);
      END;
    END;

    LOCAL PROCEDURE _CalcularPrestacion@1100217015(prPrestCont@1100217000 : Record 7010141;prRsv@1100217005 : Record 7010162) : Decimal;
    VAR
      lrCont@1100217002 : Record 7010142;
      lrPrecioGO@1100217004 : Record 7010154;
    BEGIN
      lrCont.CHANGECOMPANY(rCompany.Name);
      lrCont.SETRANGE("N§ Contrato compra", prPrestCont.Contrato);
      lrCont.SETRANGE("Tipo Contrato"     , prPrestCont."Tipo Contrato");
      IF lrCont.FINDFIRST THEN
      BEGIN
        CASE lrCont."Tipo Contrato" OF
          lrCont."Tipo Contrato"::Transportista:
            EXIT(_PrestacionTransporte(lrCont, prRsv));
          lrCont."Tipo Contrato"::Excursion:
            EXIT(_PrestacionServicio(lrCont, prRsv));
          lrCont."Tipo Contrato"::"Guia Oficial":
          BEGIN
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE _PrestacionTransporte@1100217002(prContrato@1100217001 : Record 7010142;prRsv@1100217000 : Record 7010162) : Decimal;
    VAR
      lrZonasExc@1100217003 : Record 7010149;
      lrPrecioTra@1100217002 : Record 7010150;
      lrPrecioTra2@1100217005 : Record 7010150;
      lrVendor@1100217008 : Record 23;
      lwAdultos@1100217006 : Decimal;
      lwNi¤os@1100217007 : Decimal;
      lwIVA@1100217009 : Decimal;
      lwImporte@1100217010 : Decimal;
    BEGIN
      lrZonasExc.CHANGECOMPANY(rCompany.Name);
      lrZonasExc.SETRANGE("Tipo Contrato"  , lrZonasExc."Tipo Contrato"::Compra);
      lrZonasExc.SETRANGE("Codigo Contrato", prContrato."N§ Contrato compra");
      lrZonasExc.SETRANGE("Zona Fisica"    , prRsv."Zona Hotel");
      IF NOT lrZonasExc.FINDFIRST THEN
        EXIT(0);

      lrPrecioTra.CHANGECOMPANY(rCompany.Name);
      lrPrecioTra.SETRANGE (Delegacion    , prContrato.Delegacion);
      lrPrecioTra.SETRANGE ("N§ Contrato" , prContrato."N§ Contrato compra");
      lrPrecioTra.SETRANGE ("Tipo precio" , lrPrecioTra."Tipo precio"::"Precio zona");
      lrPrecioTra.SETRANGE (Producto      , prRsv.Producto);
      lrPrecioTra.SETFILTER("Fecha desde" , '<=%1', prRsv."Fecha Excursion");
      lrPrecioTra.SETFILTER("Fecha hasta" , '>=%1', prRsv."Fecha Excursion");
      lrPrecioTra.SETRANGE (Zona          , lrZonasExc.Zona);
      lrPrecioTra.SETRANGE ("Codigo suplemento", '');
      lrPrecioTra.SETRANGE (Activo        , TRUE);
      IF NOT lrPrecioTra.FINDFIRST THEN
        EXIT(0);

      lrPrecioTra2.COPY(lrPrecioTra);
      lrPrecioTra2.SETRANGE("Orden dependiente", lrPrecioTra."Orden precio");
      lrPrecioTra2.SETRANGE("Codigo suplemento"    , rParPer."Codigo Adulto");
      IF NOT lrPrecioTra2.FINDFIRST THEN
      BEGIN
        lwAdultos := (prRsv.Adultos - prRsv."Venta - Invitados Adultos") * lrPrecioTra.Precio;
        lwNi¤os   := (prRsv.Ni¤os - prRsv."Venta - Invitados ni¤os") * lrPrecioTra.Precio;
      END
      ELSE
      BEGIN
        lwAdultos := (prRsv.Adultos - prRsv."Venta - Invitados Adultos") * lrPrecioTra2.Precio;
        lrPrecioTra2.SETRANGE("Codigo suplemento", rParPer."Codigo Ni¤o");
        IF NOT lrPrecioTra2.FINDFIRST THEN
          lwNi¤os := (prRsv.Ni¤os - prRsv."Venta - Invitados ni¤os") * lrPrecioTra2.Precio
        ELSE
          lwNi¤os := (prRsv.Ni¤os - prRsv."Venta - Invitados ni¤os") * lrPrecioTra.Precio;
      END;

      IF prContrato."Impuestos incluidos" THEN
      BEGIN
        lrVendor.CHANGECOMPANY(rCompany.Name);
        IF NOT lrVendor.GET(prContrato.Proveedor) THEN
          lwIVA := 1
        ELSE
          lwIVA := _GetIVA(lrVendor."VAT Bus. Posting Group", prContrato."Grupo registro iva prod.");
        lwImporte := lwAdultos + lwNi¤os;
        IF lwIVA <> 0 THEN
          lwImporte := ROUND(lwImporte / lwIVA);
      END
      ELSE
        lwImporte := lwAdultos + lwNi¤os;

      //. Hago esta comparacion para evitar convertir la divisa US3 en la divisa de venta ya que ambas con dolares
      IF COPYSTR(prContrato."Cod. divisa", 1, 2) <> COPYSTR(rPar."Divisa venta excursiones", 1, 2) THEN
      BEGIN
        lwImporte := rExchange.ExchangeAmtFCYToFCY_IC(prRsv."Fecha Excursion", prContrato."Cod. divisa",
                                                      rPar."Divisa venta excursiones", lwImporte, rCompany.Name);
        lwImporte := ROUND(lwImporte);
      END;

      EXIT(lwImporte);
    END;

    LOCAL PROCEDURE _PrestacionServicio@1100217010(prContrato@1100217001 : Record 7010142;prRsv@1100217000 : Record 7010162) : Decimal;
    VAR
      lrPrecioExc@1100217002 : Record 7010151;
      lrVendor@1100217005 : Record 23;
      lwAdultos@1100217004 : Decimal;
      lwNi¤os@1100217003 : Decimal;
      lwIVA@1100217006 : Decimal;
      lwImporte@1100217007 : Decimal;
    BEGIN
      lrPrecioExc.CHANGECOMPANY(rCompany.Name);
      lrPrecioExc.SETRANGE (Delegacion    , prContrato.Delegacion);
      lrPrecioExc.SETRANGE ("N§ Contrato" , prContrato."N§ Contrato compra");
      lrPrecioExc.SETRANGE ("Tipo precio" , lrPrecioExc."Tipo precio"::"Precio Excursion");
      lrPrecioExc.SETFILTER("Fecha desde" , '<=%1', prRsv."Fecha Excursion");
      lrPrecioExc.SETFILTER("Fecha hasta" , '>=%1', prRsv."Fecha Excursion");
      lrPrecioExc.SETRANGE ("Zona Hotel"  , prRsv."Zona Hotel");
      lrPrecioExc.SETRANGE (Activo        , TRUE);
      IF NOT lrPrecioExc.FINDFIRST THEN
      BEGIN
        lrPrecioExc.SETRANGE("Zona Hotel", '');
        IF NOT lrPrecioExc.FINDFIRST THEN
          EXIT(0);
      END;

      lwAdultos := (prRsv.Adultos - prRsv."Compra - Invitados Adultos") * lrPrecioExc."Precio Adulto";
      lwNi¤os   := (prRsv.Ni¤os - prRsv."Compra - Invitados ni¤os") * lrPrecioExc."Precio Ni¤o";

      IF prContrato."Impuestos incluidos" THEN
      BEGIN
        lrVendor.CHANGECOMPANY(rCompany.Name);
        IF NOT lrVendor.GET(prContrato.Proveedor) THEN
          lwIVA := 1
        ELSE
          lwIVA := _GetIVA(lrVendor."VAT Bus. Posting Group", prContrato."Grupo registro iva prod.");
        lwImporte := lwAdultos + lwNi¤os;
        IF lwIVA <> 0 THEN
          lwImporte := ROUND(lwImporte / lwIVA);
      END
      ELSE
        lwImporte := lwAdultos + lwNi¤os;

      //. Hago esta comparacion para evitar convertir la divisa US3 en la divisa de venta ya que ambas con dolares
      IF COPYSTR(prContrato."Cod. divisa", 1, 2) <> COPYSTR(rPar."Divisa venta excursiones", 1, 2) THEN
      BEGIN
        lwImporte := rExchange.ExchangeAmtFCYToFCY_IC(prRsv."Fecha Excursion", prContrato."Cod. divisa",
                                                      rPar."Divisa venta excursiones", lwImporte, rCompany.Name);
        lwImporte := ROUND(lwImporte);
      END;

      EXIT(lwImporte);
    END;

    LOCAL PROCEDURE _NombreProveedor@1100217008(pwExcursion@1100217000 : Code[10]) : Text[250];
    VAR
      lrVendor@1100217001 : Record 23;
      lrExc@1100217002 : Record 7009710;
      lrPrestCont@1100217003 : Record 7010141;
      lrCont@1100217004 : Record 7010142;
    BEGIN
      lrExc.CHANGECOMPANY(rCompany.Name);
      IF NOT lrExc.GET(pwExcursion) THEN
        EXIT('');

      IF lrExc."Transporte organizado agencia" THEN
        EXIT('IN HOUSE');

      lrPrestCont.RESET;
      lrPrestCont.CHANGECOMPANY(rCompany.Name);
      lrPrestCont.SETRANGE("Codigo Producto", pwExcursion);
      IF lrPrestCont.FINDSET THEN
      BEGIN
        lrCont.CHANGECOMPANY(rCompany.Name);
        lrCont.SETRANGE("N§ Contrato compra", lrPrestCont.Contrato);
        lrCont.SETRANGE("Tipo Contrato"     , lrPrestCont."Tipo Contrato");
        IF lrCont.FINDFIRST THEN
        BEGIN
          lrVendor.CHANGECOMPANY(rCompany.Name);
          IF lrVendor.GET(lrCont.Proveedor) THEN
            EXIT(lrVendor.Name);
        END;
      END;
    END;

    LOCAL PROCEDURE _GetIVA@1100217004(pwIVANegocio@1100217000 : Code[10];pwIVAProducto@1100217001 : Code[10]) : Decimal;
    VAR
      lrVATSetup@1100217002 : Record 325;
      lwIVA@1100217003 : Decimal;
    BEGIN

      lrVATSetup.CHANGECOMPANY(rCompany.Name);
      IF NOT lrVATSetup.GET(pwIVANegocio, pwIVAProducto) THEN
        EXIT(0);

      lwIVA := ROUND(1 + (lrVATSetup."VAT+EC %" / 100) );

      EXIT(lwIVA);
    END;

    PROCEDURE _GetFechaRegistroFra@1100217016(pwFactura@1100217000 : Code[20]) : Date;
    VAR
      lrCabVenta@1100217001 : Record 36;
      lrHistFra@1100217002 : Record 112;
    BEGIN
      // _GetFechaRegistroFra

      lrHistFra.CHANGECOMPANY(rCompany.Name);
      IF lrHistFra.GET(pwFactura) THEN
        EXIT(lrHistFra."Posting Date")
      ELSE
      BEGIN
        lrCabVenta.CHANGECOMPANY(rCompany.Name);
        IF lrCabVenta.GET(lrCabVenta."Document Type"::Invoice, pwFactura) THEN
          EXIT(lrCabVenta."Posting Date");
      END;
    END;

    PROCEDURE GenerarExcelTransfer@1100217003(pwOpcion@1000000000 : 'Completo,Pais,Empresa');
    VAR
      lrRsvTMP@1100217004 : TEMPORARY Record 88004;
      lrIngresoTMP@1100217006 : TEMPORARY Record 88004;
      lrCosteTMP@1100217007 : TEMPORARY Record 88004;
      lrRsv@1100217005 : Record 7009744;
      lrTO@1100217008 : Record 7009717;
      lrHotel@1100217009 : Record 7009724;
      lrZona@1100217010 : Record 7009713;
      lrCompanyInfo@1100217011 : Record 79;
      lrCompanyActual@1000000001 : Record 79;
      lrAgr@1100217016 : Record 7009796;
      lrTransport@1100217017 : Record 7009801;
      lwDialog@1100217000 : Dialog;
      lwID@1100217003 : Integer;
      lwIDCoste@1100217012 : Integer;
      lwIDIngreso@1100217013 : Integer;
      lwIDZona@1100217014 : Integer;
      lwFecha@1100217015 : Date;
      lwEntradas@1100217001 : Decimal;
      lwSalidas@1100217002 : Decimal;
    BEGIN
      rExcelTMP.RESET;
      rExcelTMP.DELETEALL;

      lwDialog.OPEN(Text001 + '\' + Text002 + '\' + Text003);
      lwDialog.INPUT(1, wFechaDesde);
      lwDialog.INPUT(2, wFechaHasta);
      lwDialog.CLOSE;

      IF (wFechaDesde = 0D) OR (wFechaHasta = 0D) THEN
        EXIT;

      IF wFechaDesde > wFechaHasta THEN
        EXIT;

      lwID        := 0;
      lwIDCoste   := 0;
      lwIDIngreso := 0;
      lwIDZona    := 0;

      //+$012
      //. Buscamos los datos de informacion empresa para poder hacer la seleccion por pais si es necesario
      lrCompanyActual.FINDFIRST;

      rCompany.RESET;
      IF pwOpcion = pwOpcion::Empresa THEN //+$012
        rCompany.SETRANGE(Name, COMPANYNAME);
      rCompany.FINDSET;
      _LineaCabeceraTransfer;
      REPEAT
        lrCompanyInfo.CHANGECOMPANY(rCompany.Name);
        IF NOT lrCompanyInfo.FINDFIRST THEN
          CLEAR(lrCompanyInfo);

        //+$012
        IF (pwOpcion = pwOpcion::Completo) OR
           (lrCompanyActual."Country/Region Code" = lrCompanyInfo."Country/Region Code") THEN
        BEGIN
          rPar.CHANGECOMPANY(rCompany.Name);
          rPar.FINDFIRST;

          rParPer.CHANGECOMPANY(rCompany.Name);
          rParPer.FINDFIRST;

          lwDialog.OPEN(Text044 + '\' + '@2@@@@@@@@@@@@@@@@@@');
          lwDialog.UPDATE(1, rCompany.Name);

          lrRsvTMP.RESET;
          lrRsvTMP.DELETEALL;

          lrIngresoTMP.RESET;
          lrIngresoTMP.DELETEALL;

          lrCosteTMP.RESET;
          lrCosteTMP.DELETEALL;

          //. Recorrido sobre las llegadas
          lrRsv.RESET;
          lrRsv.CHANGECOMPANY(rCompany.Name);
          lrRsv.SETRANGE ("Fecha entrada", wFechaDesde, wFechaHasta);
          lrRsv.SETRANGE ("No Show"      , FALSE);
          lrRsv.SETFILTER("Tipo Persona" , '<>%1', rParPer."Codigo Infant");
          lrRsv.SETRANGE (Entrada        , 1);
          IF lrRsv.FINDSET THEN
          BEGIN
            wTotal  := lrRsv.COUNT;
            wActual := 0;
            REPEAT
              wActual += 1;
              lwDialog.UPDATE(2, ROUND(wActual / wTotal * 10000, 1));

              lrRsvTMP.SETRANGE(Touroperador         , lrRsv.TourOperador);
              lrRsvTMP.SETRANGE(Hotel                , lrRsv."Hotel entrada");
              lrRsvTMP.SETRANGE(Dia                  , lrRsv."Fecha entrada");
              lrRsvTMP.SETRANGE(Compa¤ia             , lrRsv."Compa¤ia entrada");
              lrRsvTMP.SETRANGE(Vuelo                , lrRsv."Vuelo entrada");
              lrRsvTMP.SETRANGE(IATA                 , lrRsv."IATA destino entrada");
              lrRsvTMP.SETRANGE("Transfer privado"   , lrRsv."Transfer Privado Llegada");
              lrRsvTMP.SETRANGE("Traslado en destino", lrRsv."Traslado en destino"); //+$007
              IF NOT lrRsvTMP.FINDFIRST THEN
              BEGIN
                lwID += 1;

                lrRsvTMP.INIT;
                lrRsvTMP.ID                    := lwID;
                lrRsvTMP.Touroperador          := lrRsv.TourOperador;
                lrRsvTMP.Hotel                 := lrRsv."Hotel entrada";
                lrRsvTMP.Dia                   := lrRsv."Fecha entrada";
                lrRsvTMP.Compa¤ia              := lrRsv."Compa¤ia entrada";
                lrRsvTMP.Vuelo                 := lrRsv."Vuelo entrada";
                lrRsvTMP.IATA                  := lrRsv."IATA destino entrada";
                lrRsvTMP."Transfer privado"    := lrRsv."Transfer Privado Llegada";
                lrRsvTMP."Zona venta"          := lrRsv."Zona venta entrada";
                lrRsvTMP."Zona compra"         := lrRsv."Zona compra entrada";
                lrRsvTMP."Traslado en destino" := lrRsv."Traslado en destino"; //+$007
                lrRsvTMP.INSERT;
              END;

              lrRsvTMP."Adultos entrada" += (lrRsv."N§ Personas" - lrRsv."N§ Ni¤os"); //. Adultos
              lrRsvTMP."Ni¤os entrada"   += lrRsv."N§ Ni¤os";
              lrRsvTMP.MODIFY;

              //. Acumulamos el ingreso de llegada que sera por Touroperador, Zona, Dia y Transfer privado
              lrIngresoTMP.SETRANGE(Touroperador         , lrRsv.TourOperador);
              lrIngresoTMP.SETRANGE("Zona venta"         , lrRsv."Zona venta entrada");
              lrIngresoTMP.SETRANGE("Transfer privado"   , lrRsv."Transfer Privado Llegada");
              lrIngresoTMP.SETRANGE(Dia                  , lrRsv."Fecha entrada");
              lrIngresoTMP.SETRANGE("Tipo Transfer"      , lrIngresoTMP."Tipo Transfer"::Entrada);
              lrIngresoTMP.SETRANGE("Traslado en destino", lrRsv."Traslado en destino"); //+$007
              IF NOT lrIngresoTMP.FINDFIRST THEN
              BEGIN
                lwIDIngreso += 1;

                lrIngresoTMP.INIT;
                lrIngresoTMP.ID                    := lwIDIngreso;
                lrIngresoTMP.Touroperador          := lrRsv.TourOperador;
                lrIngresoTMP.Dia                   := lrRsv."Fecha entrada";
                lrIngresoTMP."Zona venta"          := lrRsv."Zona venta entrada";
                lrIngresoTMP."Transfer privado"    := lrRsv."Transfer Privado Llegada";
                lrIngresoTMP."Tipo Transfer"       := lrIngresoTMP."Tipo Transfer"::Entrada;
                lrIngresoTMP."Traslado en destino" := lrRsv."Traslado en destino"; //+$007
                lrIngresoTMP."Ingreso entrada"     := _SumaImporteTransferE(lrIngresoTMP, 0);
                lrIngresoTMP.INSERT;
              END;

              //+$001 <
              //. Buscamos la agrupacion, porque hay que totalizar por la divisa del contrato del proveedor
              CLEAR(lrTransport);
              lrAgr.CHANGECOMPANY(rCompany.Name);
              IF lrAgr.GET(lrRsv."Agrupacion entrada") THEN
              BEGIN
                lrTransport.CHANGECOMPANY(rCompany.Name);
                IF lrAgr.Transportista <> '' THEN
                  lrTransport.GET(lrAgr.Transportista);
              END;
              //+$001 <

              //. Acumulamos el coste de llegada que sera por Touroperador, Zona, Dia y Transfer privado
              lrCosteTMP.RESET;
              lrCosteTMP.SETRANGE(Touroperador         , lrRsv.TourOperador);
              lrCosteTMP.SETRANGE("Zona compra"        , lrRsv."Zona compra entrada");
              lrCosteTMP.SETRANGE("Transfer privado"   , lrRsv."Transfer Privado Llegada");
              lrCosteTMP.SETRANGE(Dia                  , lrRsv."Fecha entrada");
              lrCosteTMP.SETRANGE("Tipo Transfer"      , lrCosteTMP."Tipo Transfer"::Entrada);
              lrCosteTMP.SETRANGE(Proveedor            , lrTransport.Proveedor); //+$001
              lrCosteTMP.SETRANGE("Traslado en destino", lrRsv."Traslado en destino"); //+$007
              IF NOT lrCosteTMP.FINDFIRST THEN
              BEGIN
                lwIDCoste += 1;

                lrCosteTMP.INIT;
                lrCosteTMP.ID                    := lwIDCoste;
                lrCosteTMP.Touroperador          := lrRsv.TourOperador;
                lrCosteTMP.Dia                   := lrRsv."Fecha entrada";
                lrCosteTMP."Zona compra"         := lrRsv."Zona compra entrada";
                lrCosteTMP."Transfer privado"    := lrRsv."Transfer Privado Llegada";
                lrCosteTMP.Proveedor             := lrTransport.Proveedor; //+$001
                lrCosteTMP."Tipo Transfer"       := lrCosteTMP."Tipo Transfer"::Entrada;
                lrCosteTMP."Traslado en destino" := lrRsv."Traslado en destino"; //+$007
                lrCosteTMP."Coste entrada"       := _SumaImporteTransferE(lrCosteTMP, 1);
                lrCosteTMP.INSERT;
              END;
            UNTIL lrRsv.NEXT = 0;
          END;

          //. Recorrido sobre las salidas
          lrRsv.SETRANGE("Fecha entrada");
          lrRsv.SETRANGE(Entrada);
          lrRsv.SETRANGE("Fecha salida", wFechaDesde, wFechaHasta);
          lrRsv.SETRANGE(Salida        , 1);
          IF lrRsv.FINDSET THEN
          BEGIN
            wTotal  := lrRsv.COUNT;
            wActual := 0;
            REPEAT
              wActual += 1;
              lwDialog.UPDATE(2, ROUND(wActual / wTotal * 10000, 1));

              lrRsvTMP.SETRANGE(Touroperador      , lrRsv.TourOperador);
              lrRsvTMP.SETRANGE(Hotel             , lrRsv."Hotel salida");
              lrRsvTMP.SETRANGE(Dia               , lrRsv."Fecha salida");
              lrRsvTMP.SETRANGE(Compa¤ia          , lrRsv."Compa¤ia salida");
              lrRsvTMP.SETRANGE(Vuelo             , lrRsv."Vuelo salida");
              lrRsvTMP.SETRANGE(IATA              , lrRsv."IATA origen salida");
              lrRsvTMP.SETRANGE("Transfer privado", lrRsv."Transfer Privado Salida"); //+$009
              IF NOT lrRsvTMP.FINDFIRST THEN
              BEGIN
                lwID += 1;

                lrRsvTMP.INIT;
                lrRsvTMP.ID                 := lwID;
                lrRsvTMP.Touroperador       := lrRsv.TourOperador;
                lrRsvTMP.Hotel              := lrRsv."Hotel salida";
                lrRsvTMP.Dia                := lrRsv."Fecha salida";
                lrRsvTMP.Compa¤ia           := lrRsv."Compa¤ia salida";
                lrRsvTMP.Vuelo              := lrRsv."Vuelo salida";
                lrRsvTMP.IATA               := lrRsv."IATA origen salida";
                lrRsvTMP."Transfer privado" := lrRsv."Transfer Privado Salida"; //+$009
                lrRsvTMP."Zona venta"       := lrRsv."Zona venta salida";
                lrRsvTMP."Zona compra"      := lrRsv."Zona compra salida";
                lrRsvTMP.INSERT;
              END;

              lrRsvTMP."Adultos salida" += (lrRsv."N§ Personas" - lrRsv."N§ Ni¤os"); //. Adultos
              lrRsvTMP."Ni¤os salida"   += lrRsv."N§ Ni¤os";
              lrRsvTMP.MODIFY;

              //. Acumulamos el ingreso de salida que sera por Touroperador, Zona, Dia y Transfer privado
              lrIngresoTMP.SETRANGE(Touroperador      , lrRsv.TourOperador);
              lrIngresoTMP.SETRANGE("Zona venta"      , lrRsv."Zona venta salida");
              lrIngresoTMP.SETRANGE("Transfer privado", lrRsv."Transfer Privado Salida"); //+$009
              lrIngresoTMP.SETRANGE(Dia               , lrRsv."Fecha salida");
              lrIngresoTMP.SETRANGE("Tipo Transfer"   , lrIngresoTMP."Tipo Transfer"::Salida);
              IF NOT lrIngresoTMP.FINDFIRST THEN
              BEGIN
                lwIDIngreso += 1;

                lrIngresoTMP.INIT;
                lrIngresoTMP.ID                 := lwIDIngreso;
                lrIngresoTMP.Touroperador       := lrRsv.TourOperador;
                lrIngresoTMP.Dia                := lrRsv."Fecha salida";
                lrIngresoTMP."Zona venta"       := lrRsv."Zona venta salida";
                lrIngresoTMP."Transfer privado" := lrRsv."Transfer Privado Salida"; //+$009
                lrIngresoTMP."Ingreso salida"   := _SumaImporteTransferS(lrIngresoTMP, 0);
                lrIngresoTMP."Tipo Transfer"    := lrIngresoTMP."Tipo Transfer"::Salida;
                lrIngresoTMP.INSERT;
              END;

              //+$001 <
              //. Buscamos la agrupacion, porque hay que totalizar por la divisa del contrato del proveedor
              CLEAR(lrTransport);
              lrAgr.CHANGECOMPANY(rCompany.Name);
              IF lrAgr.GET(lrRsv."Agrupacion salida") THEN
              BEGIN
                lrTransport.CHANGECOMPANY(rCompany.Name);
                IF lrAgr.Transportista <> '' THEN
                  lrTransport.GET(lrAgr.Transportista);
              END;
              //+$001 <

              //. Acumulamos el coste de salida que sera por Touroperador, Zona, Dia y Transfer privado
              lrCosteTMP.RESET;
              lrCosteTMP.SETRANGE(Touroperador      , lrRsv.TourOperador);
              lrCosteTMP.SETRANGE("Zona compra"     , lrRsv."Zona compra salida");
              lrCosteTMP.SETRANGE("Transfer privado", lrRsv."Transfer Privado Salida"); //+$009
              lrCosteTMP.SETRANGE(Dia               , lrRsv."Fecha salida");
              lrCosteTMP.SETRANGE("Tipo Transfer"   , lrCosteTMP."Tipo Transfer"::Salida);
              lrCosteTMP.SETRANGE(Proveedor         , lrTransport.Proveedor); //+$001
              IF NOT lrCosteTMP.FINDFIRST THEN
              BEGIN
                lwIDCoste += 1;

                lrCosteTMP.INIT;
                lrCosteTMP.ID                 := lwIDCoste;
                lrCosteTMP.Touroperador       := lrRsv.TourOperador;
                lrCosteTMP.Dia                := lrRsv."Fecha salida";
                lrCosteTMP."Zona compra"      := lrRsv."Zona compra salida";
                lrCosteTMP."Transfer privado" := lrRsv."Transfer Privado Salida"; //+$009
                lrCosteTMP."Tipo Transfer"    := lrCosteTMP."Tipo Transfer"::Salida;
                lrCosteTMP.Proveedor          := lrTransport.Proveedor; //+$001
                lrCosteTMP."Coste salida"     := _SumaImporteTransferS(lrCosteTMP, 1);
                lrCosteTMP.INSERT;
              END;
            UNTIL lrRsv.NEXT = 0;
          END;

          //. Este es el recorrido para pasar a excel
          lrRsvTMP.RESET;
          IF lrRsvTMP.FINDSET THEN
          BEGIN
            REPEAT
              lrTO.CHANGECOMPANY(rCompany.Name);
              IF NOT lrTO.GET(lrRsvTMP.Touroperador) THEN
                CLEAR(lrTO);

              lrHotel.CHANGECOMPANY(rCompany.Name);
              IF NOT lrHotel.GET(lrRsvTMP.Hotel) THEN
                CLEAR(lrHotel);

              lrZona.CHANGECOMPANY(rCompany.Name);
              IF NOT lrZona.GET(lrHotel."Zona Fisica") THEN
                CLEAR(lrZona);

              lrCompanyInfo.CHANGECOMPANY(rCompany.Name);
              lrCompanyInfo.FINDFIRST;

              wLinea += 1;

              _InsertarCelda(1, lrRsvTMP.Touroperador);
              _InsertarCelda(2, lrTO.Nombre);
              _InsertarCelda(3, lrTO.Mercado);
              _InsertarCelda(4, lrRsvTMP.Hotel);
              _InsertarCelda(5, lrHotel.Nombre);
              _InsertarCelda(6, lrHotel."Zona Fisica");
              _InsertarCelda(7, FORMAT(lrRsvTMP.Dia));
              _InsertarCelda(8, lrRsvTMP.Compa¤ia);
              _InsertarCelda(9, lrRsvTMP.Vuelo);
              _InsertarCelda(10, lrRsvTMP.Compa¤ia + lrRsvTMP.Vuelo);
              _InsertarCelda(11, lrRsvTMP.IATA);
              _InsertarCelda(12, FORMAT(lrRsvTMP."Transfer privado"));
              _InsertarCelda(13, FORMAT(lrRsvTMP."Adultos entrada"));
              _InsertarCelda(14, FORMAT(lrRsvTMP."Ni¤os entrada"));
              _InsertarCelda(15, FORMAT(lrRsvTMP."Adultos salida"));
              _InsertarCelda(16, FORMAT(lrRsvTMP."Ni¤os salida"));
              _InsertarCelda(17, lrRsvTMP."Zona venta");
              _InsertarCelda(18, lrRsvTMP."Zona compra");

              _BuscarIngresosTransfer(lrIngresoTMP, lrRsvTMP, lwEntradas, lwSalidas);
              _InsertarCelda(19, FORMAT(lwEntradas));
              _InsertarCelda(20, FORMAT(lwSalidas));

              _BuscarCosteTransfer(lrCosteTMP, lrRsvTMP, lwEntradas, lwSalidas);
              _InsertarCelda(21, FORMAT(lwEntradas));
              _InsertarCelda(22, FORMAT(lwSalidas));

              _InsertarCelda(23, rCompany.Name);

              _InsertarCelda(24, _GetTipoFacturacionTouroperado(lrRsvTMP));
              _InsertarCelda(25, FORMAT(lrRsvTMP."Traslado en destino")); //+$007
            UNTIL lrRsvTMP.NEXT = 0;
          END;
        END;
        lwDialog.CLOSE;
      UNTIL rCompany.NEXT = 0;

      rExcelTMP.CreateBook;
      rExcelTMP.CreateSheet('TRASLADOS', '', COMPANYNAME, USERID, TRUE, FALSE, 'TRASPASANDO A EXCEL');
      rExcelTMP.GiveUserControl();
    END;

    LOCAL PROCEDURE _SumaImporteTransferE@1100217007(prRsv@1100217000 : Record 88004;pwTipoCalculo@1100217002 : 'Ingreso,Coste') : Decimal;
    VAR
      lrCalculo@1100217003 : Record 7009805;
      lwEntradas@1100217004 : Decimal;
    BEGIN
      lwEntradas := 0;

      lrCalculo.RESET;
      lrCalculo.CHANGECOMPANY(rCompany.Name);
      lrCalculo.SETCURRENTKEY(Fecha, "Transfer Privado", TourOperador, "Proveedor contable", Destino, Concepto);

      IF pwTipoCalculo = pwTipoCalculo::Ingreso THEN
        lrCalculo.SETRANGE(Concepto, 'TRNI')
      ELSE
      BEGIN
        lrCalculo.SETRANGE("Proveedor contable", prRsv.Proveedor); //+$001
        lrCalculo.SETRANGE(Concepto, 'TRNC');
      END;

      lrCalculo.SETRANGE(TourOperador         , prRsv.Touroperador);
      lrCalculo.SETRANGE("Transfer Privado"   , prRsv."Transfer privado");
      lrCalculo.SETRANGE(Fecha                , prRsv.Dia);
      lrCalculo.SETRANGE("Tipo transfer"      , lrCalculo."Tipo transfer"::Entrada);
      lrCalculo.SETRANGE("Traslado en destino", prRsv."Traslado en destino"); //+$007
      IF pwTipoCalculo = pwTipoCalculo::Ingreso THEN
        lrCalculo.SETRANGE(Destino, prRsv."Zona venta")
      ELSE
        lrCalculo.SETRANGE(Destino, prRsv."Zona compra");
      IF lrCalculo.FINDSET THEN
      BEGIN
        lrCalculo.CALCSUMS(lrCalculo."Importe sin impuesto");
        lwEntradas := lrCalculo."Importe sin impuesto";
        //. Convertimos desde la divisa del contrato a la divisa parametrizada
        IF COPYSTR(lrCalculo."Cod. divisa", 1, 2) <> COPYSTR(rPar."Divisa Reporting", 1, 2) THEN
        BEGIN
          lwEntradas := rExchange.ExchangeAmtFCYToFCY_IC(lrCalculo.Fecha, lrCalculo."Cod. divisa", rPar."Divisa Reporting",
                                                         lwEntradas, rCompany.Name);
          lwEntradas := ROUND(lwEntradas);
        END;
      END;

      EXIT(lwEntradas);
    END;

    LOCAL PROCEDURE _SumaImporteTransferS@1100217011(prRsv@1100217000 : Record 88004;pwTipoCalculo@1100217002 : 'Ingreso,Coste') : Decimal;
    VAR
      lrCalculo@1100217003 : Record 7009805;
      lwSalidas@1100217005 : Decimal;
    BEGIN
      lwSalidas  := 0;

      lrCalculo.RESET;
      lrCalculo.CHANGECOMPANY(rCompany.Name);
      lrCalculo.SETCURRENTKEY(Fecha, "Transfer Privado", TourOperador, "Proveedor contable", Destino, Concepto);

      IF pwTipoCalculo = pwTipoCalculo::Ingreso THEN
        lrCalculo.SETRANGE(Concepto, 'TRNI')
      ELSE
      BEGIN
        lrCalculo.SETRANGE("Proveedor contable", prRsv.Proveedor); //+$001
        lrCalculo.SETRANGE(Concepto            , 'TRNC');
      END;

      lrCalculo.SETRANGE(TourOperador         , prRsv.Touroperador);
      lrCalculo.SETRANGE("Transfer Privado"   , prRsv."Transfer privado");
      lrCalculo.SETRANGE(Fecha                , prRsv.Dia);
      lrCalculo.SETRANGE("Tipo transfer"      , lrCalculo."Tipo transfer"::Salida);
      lrCalculo.SETRANGE("Traslado en destino", prRsv."Traslado en destino"); //+$007
      IF pwTipoCalculo = pwTipoCalculo::Ingreso THEN
        lrCalculo.SETRANGE(Destino, prRsv."Zona venta")
      ELSE
        lrCalculo.SETRANGE(Destino, prRsv."Zona compra");
      IF lrCalculo.FINDSET THEN
      BEGIN
        lrCalculo.CALCSUMS(lrCalculo."Importe sin impuesto");
        lwSalidas := lrCalculo."Importe sin impuesto";
        //. Convertimos desde la divisa del contrato a la divisa parametrizada
        IF COPYSTR(lrCalculo."Cod. divisa", 1, 2) <> COPYSTR(rPar."Divisa Reporting", 1, 2) THEN
        BEGIN
          lwSalidas := rExchange.ExchangeAmtFCYToFCY_IC(lrCalculo.Fecha, lrCalculo."Cod. divisa", rPar."Divisa Reporting",
                                                        lwSalidas, rCompany.Name);
          lwSalidas := ROUND(lwSalidas);
        END;
      END;

      EXIT(lwSalidas);
    END;

    LOCAL PROCEDURE _BuscarCosteTransfer@1100217013(VAR prCosteTMP@1100217001 : TEMPORARY Record 88004;VAR prRsvTMP@1100217000 : TEMPORARY Record 88004;VAR pwEntradas@1100217003 : Decimal;VAR pwSalidas@1100217002 : Decimal);
    BEGIN
      pwEntradas := 0;
      pwSalidas  := 0;

      prCosteTMP.RESET;
      prCosteTMP.SETRANGE(Dia                  , prRsvTMP.Dia);
      prCosteTMP.SETRANGE(Touroperador         , prRsvTMP.Touroperador);
      prCosteTMP.SETRANGE("Zona compra"        , prRsvTMP."Zona compra");
      prCosteTMP.SETRANGE("Transfer privado"   , prRsvTMP."Transfer privado");
      prCosteTMP.SETRANGE("Tipo Transfer"      , prCosteTMP."Tipo Transfer"::Entrada);
      prCosteTMP.SETRANGE("Traslado en destino", prRsvTMP."Traslado en destino"); //+$007
      IF prCosteTMP.FINDFIRST THEN
      BEGIN
        REPEAT
          pwEntradas += prCosteTMP."Coste entrada";
        UNTIL prCosteTMP.NEXT = 0;
        prCosteTMP.DELETEALL;
      END;

      prCosteTMP.RESET;
      prCosteTMP.SETRANGE(Dia                  , prRsvTMP.Dia);
      prCosteTMP.SETRANGE(Touroperador         , prRsvTMP.Touroperador);
      prCosteTMP.SETRANGE("Zona compra"        , prRsvTMP."Zona compra");
      prCosteTMP.SETRANGE("Transfer privado"   , prRsvTMP."Transfer privado");
      prCosteTMP.SETRANGE("Tipo Transfer"      , prCosteTMP."Tipo Transfer"::Salida);
      prCosteTMP.SETRANGE("Traslado en destino", prRsvTMP."Traslado en destino"); //+$007
      IF prCosteTMP.FINDFIRST THEN
      BEGIN
        REPEAT
          pwSalidas  += prCosteTMP."Coste salida";
        UNTIL prCosteTMP.NEXT = 0;
        prCosteTMP.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE _BuscarIngresosTransfer@1100217014(VAR prIngresoTMP@1100217000 : TEMPORARY Record 88004;VAR prRsvTMP@1100217001 : TEMPORARY Record 88004;VAR pwEntradas@1100217002 : Decimal;VAR pwSalidas@1100217003 : Decimal);
    BEGIN
      pwEntradas := 0;
      pwSalidas  := 0;

      prIngresoTMP.RESET;
      prIngresoTMP.SETRANGE(Dia                  , prRsvTMP.Dia);
      prIngresoTMP.SETRANGE(Touroperador         , prRsvTMP.Touroperador);
      prIngresoTMP.SETRANGE("Zona venta"         , prRsvTMP."Zona venta");
      prIngresoTMP.SETRANGE("Transfer privado"   , prRsvTMP."Transfer privado");
      prIngresoTMP.SETRANGE("Tipo Transfer"      , prIngresoTMP."Tipo Transfer"::Entrada);
      prIngresoTMP.SETRANGE("Traslado en destino", prRsvTMP."Traslado en destino"); //+$007
      IF prIngresoTMP.FINDFIRST THEN
      BEGIN
        prIngresoTMP.DELETE;

        pwEntradas := prIngresoTMP."Ingreso entrada";
      END;

      prIngresoTMP.RESET;
      prIngresoTMP.SETRANGE(Dia                  , prRsvTMP.Dia);
      prIngresoTMP.SETRANGE(Touroperador         , prRsvTMP.Touroperador);
      prIngresoTMP.SETRANGE("Zona venta"         , prRsvTMP."Zona venta");
      prIngresoTMP.SETRANGE("Transfer privado"   , prRsvTMP."Transfer privado");
      prIngresoTMP.SETRANGE("Tipo Transfer"      , prIngresoTMP."Tipo Transfer"::Salida);
      prIngresoTMP.SETRANGE("Traslado en destino", prRsvTMP."Traslado en destino"); //+$007
      IF prIngresoTMP.FINDFIRST THEN
      BEGIN
        prIngresoTMP.DELETE;

        pwSalidas  := prIngresoTMP."Ingreso salida";
      END;
    END;

    LOCAL PROCEDURE _LineaCabeceraTransfer@1100217005();
    BEGIN
      wLinea := 1;

      _InsertarCelda(1, Text005);
      _InsertarCelda(2, Text006);
      _InsertarCelda(3, Text014);
      _InsertarCelda(4, Text017);
      _InsertarCelda(5, Text018);
      _InsertarCelda(6, Text019);
      _InsertarCelda(7, Text048);
      _InsertarCelda(8, Text049);
      _InsertarCelda(9, Text050);
      _InsertarCelda(10, Text051);
      _InsertarCelda(11, Text059);
      _InsertarCelda(12, Text052);
      _InsertarCelda(13, Text053);
      _InsertarCelda(14, Text054);
      _InsertarCelda(15, Text062);
      _InsertarCelda(16, Text063);
      _InsertarCelda(17, Text055);
      _InsertarCelda(18, Text056);
      _InsertarCelda(19, Text057);
      _InsertarCelda(20, Text064);
      _InsertarCelda(21, Text058);
      _InsertarCelda(22, Text065);
      _InsertarCelda(23, Text046);
      _InsertarCelda(24, Text068);
      _InsertarCelda(25, Text072); //+$007
    END;

    PROCEDURE _GetTipoFacturacionTouroperado@1100217012(VAR prRsvTMP@1100217000 : TEMPORARY Record 88004) : Text[30];
    VAR
      lrContrato@1100217001 : Record 7009788;
    BEGIN
      // _GetTipoFacturacionTouroperado

      lrContrato.RESET;
      lrContrato.CHANGECOMPANY(rCompany.Name);
      lrContrato.SETRANGE (TourOperador           , prRsvTMP.Touroperador);
      lrContrato.SETFILTER("Fecha inicio contrato", '<=%1', prRsvTMP.Dia);
      lrContrato.SETFILTER("Fecha final contrato" , '>=%1', prRsvTMP.Dia);
      lrContrato.SETRANGE (Comercializadora       , FALSE); //+$013
      //-$010lrContrato.SETRANGE ("OLD_Punto Origen/Destino" , prRsvTMP.IATA);
      lrContrato.SETRANGE (Confirmado             , TRUE);
      IF NOT lrContrato.FINDFIRST THEN
      BEGIN
        //-$010lrContrato.SETRANGE ("OLD_Punto Origen/Destino", '');
        //-$010IF NOT lrContrato.FINDSET THEN

        EXIT('');
      END;

      IF lrContrato."Tipo de Facturacion" = lrContrato."Tipo de Facturacion"::Llegada THEN
        EXIT(Text066)
      ELSE
        EXIT(Text067);
    END;

    PROCEDURE ReportingExcursionesEmpresa@1100217020();
    BEGIN
      // ReportingExcursionesEmpresa

      GenerarExcelExcursiones(2);
    END;

    PROCEDURE ReportingExcursionesPais@1100217021();
    BEGIN
      // ReportingExcursionesPais

      GenerarExcelExcursiones(1);
    END;

    PROCEDURE ReportingTransferEmpresa@1000000000();
    BEGIN
      // ReportingTransferEmpresa

      GenerarExcelTransfer(2);
    END;

    PROCEDURE ReportingTransferPais@1000000001();
    BEGIN
      // ReportingTransferPais

      GenerarExcelTransfer(1);
    END;

    BEGIN
    {
      $001 AJS 03032014 Separar los costes de transporte por proveedor porque es posible que haya
                        divisas distintas

      $002 AJS 12032014 Agrego la columna de fecha de registro de la factura en excursiones

      $003 AJS 20032014 Cambio en la manera de manejar si los reembolsos se suman o no, en funcion de si
                        el reembolso esta dentro del periodo que estamos sacando

      $004 AJS 24032014 CNT-OC-O14033, Cuando el campo "Coste reserva" esta rellenado hay que utilizarlo para
                        la prevision de coste, no es necesario calcular en el informe

      $005 AJS 01042014 Vamos a permitir que el reporting de excursiones se pueda sacar por empresa o por pais

      $006 AJS 03042014 Agregar los paxes de llegada en el reporting de excursiones

      $007 AJS 14042014 Mostrar la informacion de traslados en destino

      $008 AJS 14052014 Los paxes a mostrar en excursiones tienen que ser de estancia no solo de llegada

      $009 AJS 29052014 Se separa el tratamiento de la marca de transfer privado para tener llegada y salida

      $010 AJS 10062014 Los contratos de venta transfer dejan de ir por Aeropuerto

      $011 AJS 04092014 Agrego permisos explicitos de lectura en las tablas Company Information y Company para evitar
                        problemas de permisos de usuario

      $012 AJS 26012015 Agrego la posibilidad de sacar el reporting de transfer por empresa

      $013 AJS 13032015 CNT-CAR-14096 No trabajar con los contratos de comercializadora

      $014 AJS 18042015 Cambio en el sentido del campo Aplicar comision touroperador
    }
    END.
  }
}
