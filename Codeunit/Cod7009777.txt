OBJECT Codeunit 7009777 Gestion interface reservas WS
{
  OBJECT-PROPERTIES
  {
    Date=23/07/15;
    Time=[ 8:03:21];
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text009@1000000013 : TextConst 'ENU=Wrong language code;ESP=Idioma no encontrado.';
      Text013@1103355016 : TextConst 'ENU=DELETING PREVIOUS ERRORS\;ESP=ELIMINADO ERRORES ANTERIORES\';
      Text014@1103355017 : TextConst 'ENU=REVIEWING HEADERS\;ESP=REVISANDO CABECERAS\';
      Text016@1103355019 : TextConst 'ENU=Wrong Registration type;ESP=Tipo de Registro erroneo';
      Text017@1103355020 : TextConst 'ENU=Touroperator %1 does not exist;ESP=No existe el Touroperador %1.';
      Text018@1103355021 : TextConst 'ENU=Exchange for touroperator %1 was not found;ESP=No se ha encontrado conversi¢n para el touroperador %1.';
      Text019@1103355022 : TextConst 'ENU=Booking does not have voucher no.;ESP=La reserva no lleva n§ de Bono.';
      Text020@1103355023 : TextConst 'ENU=Booking does not have seasson;ESP=La reserva no lleva la temporada.';
      Text021@1103355024 : TextConst 'ENU=Booking does not have creation date.;ESP=La reserva no tiene fecha de creacion.';
      Text022@1103355025 : TextConst 'ENU=Booking does not have cancellation date;ESP=La reserva no tiene fecha de cancelacion.';
      Text023@1103355026 : TextConst 'ENU=Booking does not have modification date;ESP=La reserva no tiene fecha de modificacion.';
      Text024@1103355027 : TextConst 'ENU=Wrong type of booking;ESP=Tipo de Booking erroneo';
      Text025@1103355028 : TextConst 'ENU=Booking without package;ESP=Reserva sin paquete.';
      Text026@1103355029 : TextConst 'ENU=ONLYFLIGHT;ESP=SOLOVUELO';
      Text027@1103355030 : TextConst 'ENU=Booking only flight;ESP=Reserva de solo vuelo';
      Text028@1103355031 : TextConst 'ENU=Package %1 does not exist;ESP=No existe el paquete %1.';
      Text029@1103355032 : TextConst 'ENU=Booking is not cancelled but it has cancellation date;ESP=La reserva no es de baja pero tiene fecha de cancelacion.';
      Text030@1103355033 : TextConst 'ENU=Booking  %1 %2 %3 in system does not exist.;ESP=No existe en el sistema la reserva %1 %2 %3.';
      Text031@1103355034 : TextConst 'ENU=Booking %1 %2 is in the system with seasson %3;ESP=La reserva %1 %2 esta en el sistema con temporada %3.';
      Text032@1103355035 : TextConst 'ENU=Bookign %1 %2 %3 is grouped of check-in, cannot be modified;ESP=La reserva %1 %2 %3 ya esta agrupada de entrada, no se puede modificar.';
      Text033@1103355036 : TextConst 'ENU=Bookign %1 %2 %3 is grouped of check-out, cannot be modified;ESP=La reserva %1 %2 %3 ya esta agrupada de salida, no se puede modificar.';
      Text034@1103355037 : TextConst 'ENU=Booking %1 %2 does not exist.;ESP=No existe en el sistema la reserva %1 %2.';
      Text035@1103355038 : TextConst 'ENU=Bookign %1 %2 %3 is grouped of check-in, cannot be erased;ESP=La reserva %1 %2 %3 ya esta agrupada de entrada, no se puede borrar.';
      Text036@1103355039 : TextConst 'ENU=Wrong type of registration in pax %1;ESP=Tipo de registro erroneo en el pax %1.';
      Text037@1103355040 : TextConst 'ENU=Person type %1 is not cleared for touroperator %2 in pax %3;ESP=No esta definido el tipo de persona %1 para el touroperador %2 en el pax %3.';
      Text038@1103355041 : TextConst 'ENU=Person %1 does not have cleared name;ESP=La persona %1 no tiene nombre definido.';
      Text039@1103355042 : TextConst 'ENU=Person to modify into does not exist in system;ESP=No existe en el sistema la persona a modificar dentro';
      Text040@1103355043 : TextConst 'ENU=of booking %1 %2 %3;ESP=de la reserva %1 %2 %3.';
      Text041@1103355044 : TextConst 'ENU=Paxes registrations associated to this header do not exist;ESP=No existen registros de paxes asociados a esta cabecera.';
      Text053@1103355056 : TextConst 'ENU=No correct package type in hotel line %1;ESP=Tipo de paquete incorrecto en linea de hotel %1';
      Text054@1103355057 : TextConst 'ENU=Hotel line %1 has not check-in date;ESP=La linea del hotel %1 no tiene fecha de entrada.';
      Text055@1103355058 : TextConst 'ENU=Hotel line %1 has check-in date after check-out date;ESP=La linea del hotel %1 tiene fecha de entrada posterior a la fecha de salida.';
      Text056@1103355059 : TextConst 'ENU=Hotel %1 for touroperator %2 is not cleared;ESP=No esta definido el hotel %1 para el touroperador %2.';
      Text057@1103355060 : TextConst 'ENU=Board %1 for touroperator %2 is not cleared;ESP=No esta definido el regimen %1 para el touroperador %2.';
      Text058@1103355061 : TextConst 'ENU=Hotel line %1 does not have check-out date;ESP=La linea del hotel %1 no tiene fecha de salida.';
      Text059@1103355062 : TextConst 'ENU=Any hotel service corresponding to dates of local flight exists;ESP=No existe ningun servicio de hotel que corresponda con las fechas del vuelo local.';
      Text060@1103355063 : TextConst 'ENU=Hotel line %1 service number %2 does not have associated services;ESP=La linea del hotel %1 n§ de servicio %2 no tiene servicios asociados.';
      Text061@1103355064 : TextConst 'ENU="NO booking in the system does have the product ID %1 in Hotel= %2";ESP="La reserva en el sistema no tiene el ID producto %1 del Hotel=%2"';
      Text062@1103355065 : TextConst 'ENU=Airline %1 does not date;ESP=La linea de vuelo %1 no tiene fecha.';
      Text063@1103355066 : TextConst 'ENU=Airline %1 does not exist;ESP=No existe la compa¤ia aerea %1.';
      Text064@1103355067 : TextConst 'ENU=Airport associated to hotel %1 does not exist;ESP=No existe aeropuerto asociado en Hotel: %1';
      Text065@1103355068 : TextConst 'ENU="Flight plan does not exist Date: %1 %2-%3 Origin=%4 Destination=%5";ESP="No existe plan de vuelo Fecha: %1 %2-%3 Origen=%4 Destino=%5"';
      Text066@1103355069 : TextConst 'ENU=Airport %1 does not exist;ESP=No existe el aeropuerto %1';
      Text067@1103355070 : TextConst 'ENU=Any service associated to booking exists;ESP=No existe ningun servicio asociado a la reserva.';
      Text068@1103355071 : TextConst 'ENU=Service no. %1 is referring to pax no. %2 which does not exist;ESP=El servicio n§ %1 hace referencia al pax n§ %2 que no existe.';
      Text069@1103355072 : TextConst 'ENU=Booking is not higher than the minimum of stays of contract %1.;ESP=La reserva no supera el minimo de estancias del contrato %1.';
      Text070@1103355073 : TextConst 'ENU=Room %1 in contract %2 is not cleared;ESP=No esta definida la habitacion %1 en el contrato %2.';
      Text071@1103355074 : TextConst 'ENU="There are more than one cleared exchanges for the type %1, enter the booking manually ";ESP=Hay mas de una conversion definida para el tipo %1, introduzca manualmente la reserva.';
      Text072@1103355075 : TextConst 'ENU=There is no purchase allotment for room %1 in contract %2-%3;ESP=No existe cupo de compra para la habitacion %1 en el contrato %2-%3';
      Text073@1103355076 : TextConst 'ENU=for the date %4;ESP=para la fecha %4.';
      Text074@1103355077 : TextConst 'ENU=There is no purchase price for the room %1 in contract %2-%3;ESP=No existe precio de compra para la habitacion %1 en el contrato %2-%3';
      Text075@1103355078 : TextConst 'ENU=There is no purchase price for the board %1 in contract %2-%3;ESP=No existe precio de compra para el regimen %1 en el contrato %2-%3';
      Text076@1103355079 : TextConst 'ENU=There is no hotel purchase contract for the TourOperator %1;ESP=No existe contrato de compra hotel para el TourOperador %1';
      Text077@1103355080 : TextConst 'ENU=in hotel %2 for the date %3;ESP=en el hotel %2 para la fecha %3.';
      Text078@1103355081 : TextConst 'ENU=Sale allotment for the room %1 in contract %2-%3 does not exist;ESP=No existe cupo de venta para la habitacion %1 en el contrato %2-%3';
      Text079@1103355082 : TextConst 'ENU=Sale price for the room %1 in contract %2-%3 does not exist;ESP=No existe precio de venta para la habitacion %1 en el contrato %2-%3';
      Text080@1103355083 : TextConst 'ENU=Sale price for the board %1 in contract %2-%3 does not exist;ESP=No existe precio de venta para el regimen %1 en el contrato %2-%3';
      Text081@1103355084 : TextConst 'ENU=Hotel sale contract for the Touroperator %1 does not exist;ESP=No existe contrato de venta hotel para el TourOperador %1';
      Text082@1103355085 : TextConst 'ENU=ERASE FILE DATA\;ESP=BORRAR DATOS FICHERO\';
      Text083@1103355086 : TextConst 'ENU=NUMBER #1#####;ESP=NUMERO #1#####';
      Text084@1103355087 : TextConst 'ENU=Are you sure to delete the file %1;ESP=Esta seguro de que desea borrar el fichero %1.';
      Text085@1103355088 : TextConst 'ENU=DELETING NON-PROCESSED DATA\;ESP=BORRANDO DATOS NO PROCESADOS\';
      Text086@1103355089 : TextConst 'ENU=File #1#####\;ESP=Fichero #1#####\';
      Text087@1103355090 : TextConst 'ENU=&Current,&Filtered;ESP=&Actual,&Filtrados';
      Text088@1103355091 : TextConst 'ENU=ERASING SEPARATED DATA\;ESP=BORRANDO DATOS APARTADOS\';
      Text089@1103355092 : TextConst 'ENU=FOLDER #1####\;ESP=FICHERO #1####\';
      Text090@1103355093 : TextConst 'ENU=Voucher    #2########;ESP=Bono    #2########';
      rPar@1103355002 : Record 7010081;
      Text091@1103355094 : TextConst 'ENU=Flights information was not found;ESP=No se ha encontrado informaci¢n de Vuelos';
      Text092@1103355095 : TextConst 'ENU=Extra code %1 is not found;ESP=No se encuentra codigo extra %1';
      Text093@1103355096 : TextConst 'ENU=Any hotel for extra %1 was found;ESP=No se ha encontrado ning£n hotel para el extra %1';
      Text094@1103355097 : TextConst 'ENU=Purchase price for extra %1 in contract %2-%3 does not exist;ESP=No existe precio de compra para el extra %1 en el contrato %2-%3';
      Text095@1103355098 : TextConst 'ENU=Sale price for extra %1 in contract %2-%3 does not exist;ESP=No existe precio de venta para el extra %1 en el contrato %2-%3';
      Text096@1103355099 : TextConst 'ENU=Any real stay exists in the booking;ESP=No existe ninguna estancia real en la reserva';
      Text097@1103355100 : TextConst 'ENU=Check-in and check-out date cannot be the same in a stay;ESP=Fecha de Entrada y Salida no puede ser la misma en una estancia';
      Text098@1100253000 : TextConst 'ESP=¨Desea traspasar las reservas seleccionadas?';
      rParAg@1000000020 : Record 7009700;
      rDatosIns@1100217000 : Record 7009768;
      Text099@1100217001 : TextConst 'ENU=The stay with ID %1 overlaps with the stay with ID %2;ESP=La estancia con ID %1 se solapa con la estancia con ID %2';
      Text100@1100217002 : TextConst 'ENU=There is flight information in a Hotel Only reservation;ESP=Existe informacion de vuelos en una reserva de solo hotel';
      rPerTMP@1100217008 : TEMPORARY Record 7009742;
      rAcoTMP@1100217009 : TEMPORARY Record 7009748;
      cGestion@1100217003 : Codeunit 7009748;
      Text101@1100217004 : TextConst 'ENU=Doesn''t exist hotel stay with ID %1 in the reservation %2 - %3;ESP=No existe estancia con ID %1 en la reserva %2 - %3';
      Text102@1100217005 : TextConst 'ENU=The flight schedule of the reservation does not match the flight plan in Atennea.;ESP=La hora de vuelo de la reserva no coincide con el plan de vuelo en Atennea';
      Text103@1100217006 : TextConst 'ESP=El paquete %1 no tiene productos asociados.';
      Text104@1100217007 : TextConst 'ENU=The pax %1 with ID %2 in the hotel stay with ID %3 overlaps with the already imported period with ID %4;ESP=El pax %1 con ID %2 en la estancia con ID %3 se solapa con el periodo ya importado con ID %4';
      Text105@1100217010 : TextConst 'ENU=The destination of the arrival flight (%1) it''s not a local airport;ESP=El aeropuerto destino del vuelo de llegada (%1) no es local';
      Text106@1100217011 : TextConst 'ENU=The origin of the departure flight (%1) it''s not a local airport;ESP=El aeropuerto origen del vuelo de salida (%1) no es local';
      wTTOO@1100217012 : Code[10];
      Text150@1000000000 : TextConst 'ENU=Booking does not have booking number.;ESP=No se ha indicado el n£mero de reserva.';
      Text151@1000000001 : TextConst 'ENU=Booking does not have excursion code.;ESP=La reserva no tiene c¢digo excursi¢n.';
      Text152@1000000002 : TextConst 'ENU=Booking does not have sales date.;ESP=La reserva no tiene fecha de venta.';
      Text153@1000000003 : TextConst 'ENU=Booking does not have service date;ESP=La reserva no tiene fecha de servicio';
      Text156@1000000004 : TextConst 'ENU=Booking does not chanel id;ESP=La reserva no tiene canal';
      Text157@1000000006 : TextConst 'ENU=REVIEWING ERRORS\;ESP=REVISANDO ERRORES\';
      Text154@1000000005 : TextConst 'ENU=Booking does not have name.;ESP=La reserva no tiene nombre persona.';
      Text155@1000000007 : TextConst 'ENU=Booking does not have people.;ESP=La reserva no tiene personas.';
      Text158@1000000008 : TextConst 'ENU=Language %1 does not exist;ESP=No existe el Idioma %1.';
      Text159@1000000009 : TextConst 'ENU=Hotel %1 was not found.;ESP=No se ha encontrado el hotel %1';
      Text160@1000000010 : TextConst 'ENU=Booking %1 %2 %3 already exist.;ESP=Ya existe en el sistema la reserva %1 %2 %3.';
      Text161@1000000011 : TextConst 'ENU=Excursion %1 for touroperator %2 is not defined;ESP=No esta definida la excursion %1 para el touroperador %2.';
      Text162@1000000012 : TextConst 'ENU=Excursion %1 does not allow children.;ESP=La excursion %1 no est  permitida para ni¤os.';
      Text163@1000000014 : TextConst 'ENU=Hotel %1 has no pickup in the excursion %2 and turn %3;ESP=El hotel %1 no tiene recogida para la excursion %2 en el turno %3';
      Text164@1000000015 : TextConst 'ENU=Booking %1 %2 %3 does not exist.;ESP=No existe en el sistema la reserva %1 %2 %3.';
      Text165@1000000016 : TextConst 'ENU=You must assign turn manually before processing;ESP=Debe asignar turno manualmente antes de procesar';
      Text166@1000000017 : TextConst 'ENU=Flight no. donït exist.;ESP=No existe el n£mero de vuelo';
      Text167@1000000018 : TextConst 'ENU="Flight plan does not exist Date: %1 %2-%3 Origin=%4";ESP=No existe plan de vuelo Fecha: %1 %2-%3 Origen %4';
      Text168@1000000019 : TextConst 'ENU="Flight plan does not exist Date: %1 %2-%3 Destination=%4";ESP=No existe plan de vuelo Fecha: %1 %2-%3 Destino %4';
      Text169@1000000022 : TextConst 'ENU=There is no transfer contract for day %1 for the touroperator %2.;ESP=No existe el contrato transfer para dia %1 del touroperador %2.';
      Text170@1000000021 : TextConst 'ENU=There is no sales price in contract %1 for booking conditions.;ESP=No existe ning£n precio venta en el contrato %1 para las condiciones de la Reserva.';

    PROCEDURE comprobar_errores@3(VAR par_cab@1103355000 : Record 7010076);
    VAR
      rCab@1103355001 : Record 7010076;
      rCab2@1103355002 : Record 7010076;
      w_total@1103355004 : Integer;
      w_linea@1103355005 : Integer;
      ventana@1103355006 : Dialog;
      lrConvTO@1000000000 : Record 7010161;
    BEGIN
      // comprobar_errores

      rPar.FINDFIRST;

      rDatosIns.FINDFIRST;

      CLEAR(rCab);
      rCab.COPY(par_cab);

      //. Eliminar los mensajes de error de anteriores revisiones
      _BorrarErrores(rCab);

      //. Comprobamos que todas las reservas tengan un paquete correcto
      //. Poner como SOLO TRANSFER los que no tenga SOLO HOTEL
      _RevisaPaqueteReserva(rCab);

      //. Revisar en busca de errores

      w_total := rCab.COUNT;
      w_linea := 0;
      IF rCab.FINDSET THEN
      BEGIN
        ventana.OPEN(Text014 +
                     '\' +
                     '#2####                #3####\' +
                     '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@');

        REPEAT
          //-$007wTTOO := _GetTouroperadorAtennea(rCab.TourOperador);
          wTTOO := lrConvTO.ConversionTouroperador(rCab.TourOperador, rCab.Destino);

          w_linea := w_linea + 1;

          ventana.UPDATE(2, w_linea);
          ventana.UPDATE(3, w_total);
          ventana.UPDATE(1, ROUND((w_linea * 10000) / w_total, 1));

          _repasa_cabecera(rCab);
          _repasa_paxes(rCab);
          _repasa_hoteles(rCab);
          _repasa_servicios(rCab);
          repasa_vuelos(rCab);

          rCab.CALCFIELDS(Errores);
          IF rCab.Errores <> 0 THEN
            cGestion.pasar_a_error(rCab)
          ELSE
          BEGIN
            rCab2 := rCab;
            rCab2."Pasado errores"  := TRUE;
            rCab2.Estado            := par_cab.Estado::"No procesada";
            rCab2."Usuario proceso" := USERID;
            rCab2.MODIFY;
          END;
        UNTIL rCab.NEXT = 0;
        ventana.CLOSE;
      END;
    END;

    LOCAL PROCEDURE _BorrarErrores@1100217008(VAR prCab@1100217000 : Record 7010076);
    VAR
      lrError@1100217004 : Record 7010083;
      lwVentana@1100217001 : Dialog;
      lwLinea@1100217002 : Integer;
      lwTotal@1100217003 : Integer;
    BEGIN
      // _BorrarErrores

      lwTotal := prCab.COUNT;
      lwLinea := 0;

      IF prCab.FINDSET THEN
      BEGIN
        lwVentana.OPEN(Text013 +
                     '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@');
        REPEAT
          lwLinea := lwLinea + 1;

          lwVentana.UPDATE(1, ROUND((lwLinea * 10000) / lwTotal, 1));

          lrError.RESET;
          lrError.SETRANGE("ID Fichero", prCab.Fichero);
          lrError.SETRANGE("ID Linea"  , prCab."ID Cabecera");
          IF lrError.FINDSET(TRUE) THEN
            lrError.DELETEALL;
        UNTIL prCab.NEXT = 0;
        lwVentana.CLOSE;
      END;
    END;

    LOCAL PROCEDURE _repasa_cabecera@6(par_cab@1103355000 : Record 7010076);
    VAR
      rTO@1103355001 : Record 7009717;
      rPaq@1103355002 : Record 7009709;
      lrPaqProd@1100217000 : Record 7009752;
      rCab@1103355003 : Record 7009741;
      rPar@1103355004 : Record 7010081;
      rRsvTra@1103355005 : Record 7009744;
      aux_cab@1103355006 : Record 7010076;
      rAgr@1103355007 : Record 7009796;
      lrConvTO@1000000000 : Record 7010161;
    BEGIN
      // _repasa_cabecera

      // Comprobar Tipo Registro
      IF par_cab."Tipo Registro" = par_cab."Tipo Registro"::Error THEN
        _inserta_error(par_cab, Text016);

      // Comprobar el TourOperador
      //-$007CLEAR(rConvTO);
      //-$007IF NOT rConvTO.GET(par_cab.TourOperador) THEN
      IF lrConvTO.ConversionTouroperador(par_cab.TourOperador, par_cab.Destino) = '' THEN
        _inserta_error(par_cab, STRSUBSTNO(Text018, par_cab.TourOperador));

      // Comprobar el Bono
      IF par_cab.Bono = '' THEN
        _inserta_error(par_cab, Text019);

      // Comprobar la temporada
      IF par_cab.Temporada = '' THEN
        _inserta_error(par_cab, Text020);

      // Comprobar la fecha de creacion
      IF par_cab."Fecha creacion" = 0D THEN
        _inserta_error(par_cab, Text021);

      // Comprobar la fecha de cancelacion en caso de borrado
      IF (par_cab."Tipo Registro" = par_cab."Tipo Registro"::Borrado) AND
         (par_cab."Fecha cancelacion" = 0D) THEN
        _inserta_error(par_cab, Text022);

      // Comprobar la fecha de modificacion en caso de modificacion
      IF (par_cab."Tipo Registro" = par_cab."Tipo Registro"::Modificacion) AND
         (par_cab."Fecha modificacion" = 0D) THEN
        _inserta_error(par_cab, Text023);

      // Comprobamos si no es un borrado de reserva
      IF par_cab."Tipo Registro" <> par_cab."Tipo Registro"::Borrado THEN BEGIN
        // Comprobar el Tipo de Booking
        IF par_cab."Tipo Booking" = par_cab."Tipo Booking"::Error THEN
          _inserta_error(par_cab, Text024);

        // Comprobar el paquete salvo que se trate de un borrado
        IF par_cab.Paquete = '' THEN
          _inserta_error(par_cab, Text025);

        IF NOT rPaq.GET(par_cab.Paquete) THEN
          _inserta_error(par_cab, STRSUBSTNO(Text028, par_cab.Paquete));

        //+$002 <
        lrPaqProd.RESET;
        lrPaqProd.SETRANGE(Paquete, par_cab.Paquete);
        IF lrPaqProd.ISEMPTY THEN
          _inserta_error(par_cab, STRSUBSTNO(Text103, par_cab.Paquete));
        //+$002 >
      END;

      IF par_cab."Tipo Registro" = par_cab."Tipo Registro"::Borrado THEN BEGIN
        rCab.RESET;
        rCab.SETCURRENTKEY(TourOperador,
                           Bono,
                           Temporada);
        //. 16.07.2015 Deshabilitado temporalmente en CUBA por peticion de SUNWING
        IF COMPANYNAME <> 'CUBA' THEN
          rCab.SETRANGE(TourOperador, par_cab.TourOperador);
        rCab.SETRANGE(Bono        , par_cab.Bono);
        rCab.SETRANGE(Temporada   , par_cab.Temporada);
        IF NOT rCab.FINDFIRST THEN
          _inserta_error(par_cab, STRSUBSTNO(Text034, par_cab.TourOperador, par_cab.Bono));
      END;
    END;

    LOCAL PROCEDURE _repasa_paxes@4(par_cab@1103355000 : Record 7010076);
    VAR
      lrPax@1103355001 : Record 7010079;
      lrConvTipoPer@1103355002 : Record 7009722;
      lrCabRsv@1103355003 : Record 7009741;
      lrPerRsv@1100217001 : Record 7009742;
      lrRsvTra@1100217003 : Record 7009744;
      lrAgr@1100217004 : Record 7009796;
    BEGIN
      // _repasa_paxes

      IF par_cab."Fecha cancelacion" <> 0D THEN
        EXIT;

      lrPax.RESET;
      lrPax.SETCURRENTKEY(Fichero,
                          TourOperador,
                          Bono,
                          Temporada);
      lrPax.SETRANGE(Fichero     , par_cab.Fichero);
      lrPax.SETRANGE(TourOperador, par_cab.TourOperador);
      lrPax.SETRANGE(Bono        , par_cab.Bono);
      lrPax.SETRANGE(Temporada   , par_cab.Temporada);
      IF lrPax.FINDSET THEN BEGIN
        REPEAT
          // Comprobar el tipo de registro
          IF lrPax."Tipo Registro" = lrPax."Tipo Registro"::Error THEN
            _inserta_error(par_cab, STRSUBSTNO(Text036, lrPax.Contador));

          // Comprobar conversion de tipo de persona
          IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
          BEGIN
            CLEAR(lrConvTipoPer);
            IF NOT lrConvTipoPer.GET(rPar."Touroperador importacion", lrPax."Tipo Persona") THEN
              _inserta_error(par_cab, STRSUBSTNO(Text037,
                                                lrPax."Tipo Persona" , rPar."Touroperador importacion" , lrPax.Contador));
          END
          ELSE
          BEGIN
            CLEAR(lrConvTipoPer);
            IF NOT lrConvTipoPer.GET(wTTOO, lrPax."Tipo Persona") THEN
              _inserta_error(par_cab, STRSUBSTNO(Text037,
                                                lrPax."Tipo Persona" , wTTOO, lrPax.Contador));
          END;

          // Comprobar que tiene nombre
          IF lrPax.Nombre = '' THEN
            _inserta_error(par_cab, STRSUBSTNO(Text038, lrPax.Contador));

          //. Si es una cancelacion comprobamos que el pax existe en la reserva
          IF lrPax."Tipo Registro" = lrPax."Tipo Registro"::Cancelacion THEN
          BEGIN
            //. Primero comprobamos si tenemos la reserva en el sistema
            lrCabRsv.RESET;
            lrCabRsv.SETCURRENTKEY(TourOperador, Bono);
            //. 16.07.2015 Deshabilitado temporalmente en CUBA por peticion de SUNWING
            IF COMPANYNAME <> 'CUBA' THEN
              lrCabRsv.SETRANGE(TourOperador, wTTOO);
            lrCabRsv.SETRANGE(Bono        , lrPax.Bono);
            IF NOT lrCabRsv.FINDFIRST THEN
              _inserta_error(par_cab, STRSUBSTNO(Text030, par_cab.Destino, wTTOO, lrPax.Bono))
            ELSE
            BEGIN
              lrPerRsv.RESET;
              lrPerRsv.SETRANGE(Delegacion  , lrCabRsv.Delegacion);
              lrPerRsv.SETRANGE("N§ Interno", lrCabRsv."N§ Interno");
              IF NOT lrPerRsv.FINDFIRST THEN
                _inserta_error(par_cab, STRSUBSTNO(Text101,
                                                  lrPax."ID Servicio", wTTOO, lrPax.Bono))
              ELSE
              BEGIN
                lrRsvTra.RESET;
                lrRsvTra.SETCURRENTKEY(Delegacion,
                                       "N§ Interno");
                lrRsvTra.SETRANGE (Delegacion          , lrPerRsv.Delegacion);
                lrRsvTra.SETRANGE ("N§ Interno"        , lrPerRsv."N§ Interno");
                lrRsvTra.SETRANGE ("N§ Periodo"        , lrPerRsv."N§ Periodo");
                lrRsvTra.SETFILTER("Agrupacion entrada", '<>0');
                IF lrRsvTra.FINDSET THEN
                BEGIN
                  REPEAT
                    IF (lrAgr.GET(lrRsvTra."Agrupacion entrada")) AND (lrAgr.Estado = lrAgr.Estado::Confirmado) THEN
                      _inserta_error(par_cab, STRSUBSTNO(Text035,
                                                         par_cab.TourOperador, par_cab.Bono, par_cab.Temporada));
                  UNTIL lrRsvTra.NEXT = 0;
                END;
                lrRsvTra.SETRANGE("Agrupacion entrada");
                lrRsvTra.SETFILTER("Agrupacion salida", '<>0');
                IF lrRsvTra.FINDSET THEN
                BEGIN
                  REPEAT
                    IF (lrAgr.GET(lrRsvTra."Agrupacion salida")) AND (lrAgr.Estado = lrAgr.Estado::Confirmado) THEN
                      _inserta_error(par_cab, STRSUBSTNO(Text033,
                                                         par_cab.TourOperador, par_cab.Bono, par_cab.Temporada));
                  UNTIL lrRsvTra.NEXT = 0;
                END;
              END;
            END;
          END;
        UNTIL lrPax.NEXT = 0;
      END
      ELSE
        _inserta_error(par_cab, Text041);
    END;

    LOCAL PROCEDURE _repasa_hoteles@7(par_cab@1103355000 : Record 7010076);
    VAR
      rHot@1103355001 : Record 7010078;
      lrHot2@1103355013 : Record 7010078;
      rConv@1103355002 : Record 7009725;
      rConvReg@1103355003 : Record 7009719;
      rSer@1103355005 : Record 7010080;
      rPer@1103355006 : Record 7009742;
      rHot2@1103355007 : Record 7010078;
      lrHotel@1103355008 : Record 7009724;
      lrExtra@1103355012 : Record 7009760;
      lrExcl@1103355015 : Record 7009865;
      lwPaqueteSoloTransfer@1100217000 : Boolean;
    BEGIN
      // _repasa_hoteles

      rHot.RESET;
      rHot.SETCURRENTKEY(Fichero,
                         Touroperador,
                         Bono,
                         Temporada);
      rHot.SETRANGE(Fichero     , par_cab.Fichero);
      rHot.SETRANGE(Touroperador, par_cab.TourOperador);
      rHot.SETRANGE(Bono        , par_cab.Bono);
      rHot.SETRANGE(Temporada   , par_cab.Temporada);
      IF rHot.FINDSET THEN
      BEGIN
        REPEAT
          //. Comprobamos que no est excluido
          CLEAR(lrExcl);
          rHot.Excluido := lrExcl.GET(rHot.Hotel);

          IF NOT rHot.Excluido THEN BEGIN
            //. Comprobar el Tipo de Registro
            IF rHot."Tipo Registro" = rHot."Tipo Registro"::Error THEN
              _inserta_error(par_cab, Text016);

            //. Comprobar el Tipo de Paquete
            IF rHot."Paquete asociado" = '' THEN
              _inserta_error(par_cab, STRSUBSTNO(Text053, rHot."ID Hotel"));

            //. Comprobar que tiene fecha de entrada en hotel
            IF rHot."Fecha entrada" = 0D THEN
              _inserta_error(par_cab, STRSUBSTNO(Text054, rHot.Hotel));

            //. Comprobar que tiene fecha de salida en hotel
            IF rHot."Fecha salida" = 0D THEN
              _inserta_error(par_cab, STRSUBSTNO(Text058, rHot.Hotel));

            //. Comprobar la conversion de hotel
            _ConversionHotel(rConv, par_cab, rHot.Hotel);
            IF NOT lrHotel.GET(rConv."Hotel estancia") THEN
              CLEAR(lrHotel);

            //. Comprobar si el paquete es de solo transfer
            lwPaqueteSoloTransfer := _EsPaqueteSoloTransfer(rHot."Paquete asociado");

            //. Actualizamos los siguientes campos en hotel interfase
            rHot."Hotel Ficticio"   := lrHotel."Hotel Ficticio";
            rHot."Transfer Privado" := rConv."Transfer Privado";

            //. Comprobar si la fecha de entrada es posterior a la de salida
            IF (NOT rHot."Hotel Ficticio") AND
               (NOT rConv."Solo Transfer") AND
               (NOT lwPaqueteSoloTransfer) THEN
            BEGIN
              IF (rHot."Fecha entrada" <> 0D) AND (rHot."Fecha salida" <> 0D) THEN BEGIN
                IF rHot."Fecha entrada" >= rHot."Fecha salida" THEN
                  _inserta_error(par_cab, STRSUBSTNO(Text055,
                                rHot.Hotel));
              END;

              //. Comprobar la conversion de regimen
              CLEAR(rConvReg);
              IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
              BEGIN
                IF NOT rConvReg.GET(rPar."Touroperador importacion", rHot.Regimen) THEN
                  _inserta_error(par_cab, STRSUBSTNO(Text057,
                                                    rHot.Regimen, rPar."Touroperador importacion"));
              END
              ELSE
              BEGIN
                IF NOT rConvReg.GET(wTTOO, rHot.Regimen) THEN
                  _inserta_error(par_cab, STRSUBSTNO(Text057,
                                                    rHot.Regimen, wTTOO));
              END;

              //. No permitimos que la fecha de entrada y la de salida sean la misma
              IF rHot."Fecha entrada" = rHot."Fecha salida" THEN
                _inserta_error(par_cab, Text097);

              //. Comprobar si existe contrato de compra para el hotel, habitacion, cupo y precio
              IF (rHot."Fecha entrada" <> 0D) AND (rHot."Fecha salida" <> 0D) THEN BEGIN
                _busca_contrato(rHot, rConv."Hotel estancia", rConvReg.Regimen, par_cab,'', 0D, 0D);

                //. Si en la conversion se ha indicado un hotel precios hay que comprobar que tambien tiene contrato
                IF rConv."Hotel precios" <> '' THEN
                  _busca_contrato(rHot, rConv."Hotel precios", rConvReg.Regimen, par_cab,'', 0D, 0D);
              END;
            END;

            //. En este caso el hotel ficticio es un extra
            IF rHot."Hotel Ficticio" AND (NOT rHot."Transfer Privado") THEN BEGIN
              IF NOT lrExtra.GET(rHot.Hotel) THEN
                _inserta_error(par_cab, STRSUBSTNO(Text092, rHot.Hotel));

              //. Buscamos si existe precio para el extra. Para eso hemos de buscar el hotel al que
              //. va ligado y su contrato
              CLEAR(lrHot2);
              lrHot2.SETCURRENTKEY(Fichero,Touroperador,Bono,Temporada,"Fecha entrada","Fecha salida");
              lrHot2.SETRANGE(Fichero     , rHot.Fichero);
              lrHot2.SETRANGE(Touroperador, rHot.Touroperador);
              lrHot2.SETRANGE(Bono        , rHot.Bono);
              lrHot2.SETRANGE(Temporada   , rHot.Temporada);
              lrHot2.SETRANGE("Hotel Ficticio", FALSE);
              lrHot2.SETFILTER("Fecha entrada",'<=%1', rHot."Fecha salida");
              lrHot2.SETFILTER("Fecha salida" ,'>=%1', rHot."Fecha entrada");
              IF lrHot2.FINDFIRST THEN BEGIN
                _ConversionHotel(rConv, par_cab, lrHot2.Hotel);
                IF rConv."Hotel estancia" <> '' THEN
                  _busca_contrato(lrHot2, rConv."Hotel estancia", '', par_cab, rHot.Hotel, rHot."Fecha entrada", rHot."Fecha salida");

              END
                ELSE _inserta_error(par_cab, STRSUBSTNO(Text093, rHot.Hotel));
            END;

            //. Comprobar si existen lineas de servicio de hotel asociadas solo en los casos de no
            //. cancelacion.
            IF (rHot."Tipo Registro" <> rHot."Tipo Registro"::Cancelacion) THEN
            BEGIN
              CLEAR(rSer);
              rSer.SETCURRENTKEY(Fichero,
                                 Touroperador,
                                 Bono,
                                 Temporada);
              rSer.SETRANGE(Fichero        , rHot.Fichero);
              rSer.SETRANGE(Touroperador   , rHot.Touroperador);
              rSer.SETRANGE(Bono           , rHot.Bono);
              rSer.SETRANGE(Temporada      , rHot.Temporada);
              rSer.SETRANGE("N§ Servicio"  , rHot."N§ Servicio");
              rSer.SETRANGE("Tipo Servicio", rSer."Tipo Servicio"::Hotel);
              IF NOT rSer.FINDFIRST THEN
                _inserta_error(par_cab, STRSUBSTNO(Text060, rHot.Hotel, rHot."N§ Servicio"));
            END;

            // Comprobar que el servicio exista en caso de que se trate de una cancelacion dentro
            // de una modificacion. Si la cabecera es una cancelacion ya se comprueba esto en _repasa_cabecera
            IF par_cab."Tipo Registro" = par_cab."Tipo Registro"::Modificacion THEN BEGIN
              IF (rHot."Tipo Registro" = rHot."Tipo Registro"::Cancelacion) AND
                 (NOT rHot."Hotel Ficticio") THEN
              BEGIN
                rPer.RESET;
                rPer.SETCURRENTKEY("TourOperador Venta",
                                   Bono,
                                   Temporada);
                //. 16.07.2015 Deshabilitado temporalmente en CUBA por peticion de SUNWING
                IF COMPANYNAME <> 'CUBA' THEN
                  rPer.SETRANGE("TourOperador Venta"       , wTTOO);
                rPer.SETRANGE(Bono               , rHot.Bono);
                rPer.SETRANGE(Temporada          , rHot.Temporada);
                rPer.SETRANGE("ID Producto TO"   , rHot."Id Importacion");
                IF NOT rPer.FINDFIRST THEN
                  _inserta_error(par_cab, STRSUBSTNO(Text061, rHot."Id Importacion", rHot.Hotel));
              END;
            END;
          END;
          rHot.MODIFY;
        UNTIL rHot.NEXT = 0;
      END;
    END;

    PROCEDURE repasa_vuelos@10(par_cab@1103355000 : Record 7010076);
    VAR
      rVue@1103355001 : Record 7010077;
      rCom@1103355002 : Record 7009753;
      rAer@1103355003 : Record 7009704;
      rPlan@1103355004 : Record 7009754;
      lrPlanVue@1103355006 : Record 7009754;
      rHot@1103355007 : Record 7010078;
      rConvH@1103355008 : Record 7009725;
      lrHotel@1103355009 : Record 7009724;
      lrPar@1100217000 : Record 7010081;
    BEGIN
      // repasa_vuelos

      IF par_cab."Fecha cancelacion" <> 0D THEN
        EXIT;

      lrPar.FINDFIRST;

      rVue.RESET;
      rVue.SETCURRENTKEY(Fichero,
                         TourOperador,
                         Bono,
                         Temporada);
      rVue.SETRANGE(Fichero     , par_cab.Fichero);
      rVue.SETRANGE(TourOperador, par_cab.TourOperador);
      rVue.SETRANGE(Bono        , par_cab.Bono);
      rVue.SETRANGE(Temporada   , par_cab.Temporada);
      IF rVue.FINDSET THEN
      BEGIN
        REPEAT
          //. Comprobar si tiene fecha de vuelo
          IF rVue.Fecha = 0D THEN
            _inserta_error(par_cab, STRSUBSTNO(Text062, rVue.Contador));

          //. Comprobar si existe la compa¤ia
          IF rVue.Compa¤ia <> '' THEN BEGIN
            IF NOT rCom.GET(rVue.Compa¤ia) THEN
              _inserta_error(par_cab, STRSUBSTNO(Text063, rVue.Compa¤ia));
          END;

          lrPlanVue.RESET;
          lrPlanVue.SETRANGE(Fecha   , rVue.Fecha);
          lrPlanVue.SETRANGE(Compa¤ia, rVue.Compa¤ia);
          lrPlanVue.SETRANGE(Vuelo   , rVue.Vuelo);

          //. Buscamos el primer o ultimo hotel para poder buscar el campo "Aeropuerto asociado"
          CLEAR(rHot);
          rHot.SETCURRENTKEY(Fichero, Touroperador, Bono, Temporada, "Fecha entrada", "Fecha salida");
          rHot.SETRANGE(Fichero     , par_cab.Fichero);
          rHot.SETRANGE(Touroperador, par_cab.TourOperador);
          rHot.SETRANGE(Bono        , par_cab.Bono);
          rHot.SETRANGE(Temporada   , par_cab.Temporada);
          IF rVue."Tipo Vuelo" = rVue."Tipo Vuelo"::Entrada THEN
          BEGIN
            IF NOT rHot.FINDFIRST THEN
              CLEAR(rHot);
          END
          ELSE
          BEGIN
            IF NOT rHot.FINDLAST THEN
              CLEAR(rHot);
          END;

          _ConversionHotel(rConvH, par_cab, rHot.Hotel);
          IF rConvH."Hotel estancia" <> '' THEN
            IF lrHotel.GET(rConvH."Hotel estancia") THEN
              IF lrHotel."Aeropuerto Asociado" = '' THEN
                _inserta_error(par_cab, STRSUBSTNO(Text064, lrHotel.Hotel));

          CASE rVue."Tipo Vuelo" OF
            rVue."Tipo Vuelo"::Entrada :
            BEGIN
              IF rVue."IATA destino" = '' THEN
                rVue."IATA destino" := lrHotel."Aeropuerto Asociado";
              lrPlanVue.SETRANGE("Entrada/Salida", lrPlanVue."Entrada/Salida"::Entrada);
            END;
            rVue."Tipo Vuelo"::Salida :
            BEGIN
              IF rVue."IATA origen" = '' THEN
                rVue."IATA origen" := lrHotel."Aeropuerto Asociado";
              lrPlanVue.SETRANGE("Entrada/Salida", lrPlanVue."Entrada/Salida"::Salida);
            END;
          END;
          rVue.MODIFY;

          IF rVue."IATA destino" <> '' THEN
            lrPlanVue.SETRANGE(Destino, rVue."IATA destino");
          IF rVue."IATA origen" <> '' THEN
            lrPlanVue.SETRANGE(Origen, rVue."IATA origen");

          IF NOT lrPlanVue.FINDFIRST THEN
          BEGIN
            //. Los vuelos con numero 000 y 111 son vuelos de dummy
            IF (rVue.Vuelo <> '000') AND (rVue.Vuelo <> '111') THEN //+$008
            BEGIN
              IF NOT _CrearPlanVuelo(par_cab, rVue) THEN
                _inserta_error(par_cab, STRSUBSTNO(Text065,
                                                  rVue.Fecha, rVue.Compa¤ia, rVue.Vuelo,
                                                  rVue."IATA origen", rVue."IATA destino"))
            END;
          END
          ELSE
          BEGIN
            IF rVue."IATA origen"= '' THEN
              rVue."IATA origen"  := lrPlanVue.Origen;
            IF rVue."IATA destino"= '' THEN
              rVue."IATA destino" := lrPlanVue.Destino;

            //. Si el horario de la reserva no coincide con el horario del plan de vuelo actualizamos la reserva
            IF rVue."Tipo Vuelo" = rVue."Tipo Vuelo"::Entrada THEN
            BEGIN
              IF rVue.Hora <> lrPlanVue."Hora Entrada" THEN
                rVue.Hora := lrPlanVue."Hora Entrada";
            END
            ELSE
            BEGIN
              IF rVue.Hora <> lrPlanVue."Hora Salida" THEN
                rVue.Hora := lrPlanVue."Hora Salida";
            END;
            rVue.MODIFY;
          END;

          // Comprobar si existe el aeropuerto de origen
          IF rVue."IATA origen" <> '' THEN BEGIN
            IF NOT rAer.GET(rVue."IATA origen") THEN
              _inserta_error(par_cab, STRSUBSTNO(Text066, rVue."IATA origen"));
          END;

          // Comprobar si existe el aeropuerto de destino
          IF rVue."IATA destino" <> '' THEN BEGIN
            IF NOT rAer.GET(rVue."IATA destino") THEN
              _inserta_error(par_cab, STRSUBSTNO(Text066, rVue."IATA destino"));
          END;
        UNTIL rVue.NEXT = 0;
      END
      ELSE
      BEGIN //. Si no se encuentran vuelos se genera error si est  as¡ parametrizado
        IF lrPar."Requiere datos vuelo" THEN BEGIN
          _inserta_error(par_cab, Text091);
        END;
      END;
    END;

    LOCAL PROCEDURE _repasa_servicios@12(par_cab@1103355000 : Record 7010076);
    VAR
      rSer@1103355001 : Record 7010080;
      rPax@1103355002 : Record 7010079;
    BEGIN
      // _repasa_servicios

      IF par_cab."Tipo Registro" = par_cab."Tipo Registro"::Borrado THEN
        EXIT;

      CLEAR(rSer);
      rSer.SETCURRENTKEY(Fichero,
                         Touroperador,
                         Bono,
                         Temporada,
                         Persona);
      rSer.SETRANGE(Fichero     , par_cab.Fichero);
      rSer.SETRANGE(Touroperador, par_cab.TourOperador);
      rSer.SETRANGE(Bono        , par_cab.Bono);
      rSer.SETRANGE(Temporada   , par_cab.Temporada);
      IF NOT rSer.FINDSET THEN
        _inserta_error(par_cab, Text067)
      ELSE
      BEGIN
        rPax.RESET;
        rPax.SETCURRENTKEY(Fichero,
                           TourOperador,
                           Bono,
                           Temporada);
        REPEAT
          rPax.SETRANGE(Fichero     , rSer.Fichero);
          rPax.SETRANGE(TourOperador, rSer.Touroperador);
          rPax.SETRANGE(Bono        , rSer.Bono);
          rPax.SETRANGE(Temporada   , rSer.Temporada);
          rPax.SETRANGE("ID Pax"    , rSer.Persona);
          IF NOT rPax.FINDFIRST THEN
            _inserta_error(par_cab, STRSUBSTNO(Text068, rSer."N§ Servicio", rSer.Persona));
        UNTIL rSer.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _inserta_error@9(VAR par_cab@1103355000 : Record 7010076;par_texto@1103355001 : Text[250]);
    VAR
      rError@1103355002 : Record 7010083;
    BEGIN
      // _inserta_error

      //. Verificamos si el texto ya existe para reducir el numero de lineas que se crean en errores

      rError.RESET;
      rError.SETRANGE("ID Fichero", par_cab.Fichero);
      rError.SETRANGE("ID Linea"  , par_cab."ID Cabecera");
      rError.SETRANGE(Texto       , par_texto);
      IF NOT rError.ISEMPTY THEN
        EXIT;

      CLEAR(rError);
      rError."ID Fichero" := par_cab.Fichero;
      rError."ID Linea"   := par_cab."ID Cabecera";
      rError.Texto        := par_texto;
      rError.INSERT(TRUE);
    END;

    LOCAL PROCEDURE _busca_contrato@13(VAR par_hot@1103355000 : Record 7010078;par_hotel@1103355001 : Code[20];par_regimen@1103355002 : Code[10];par_cab@1103355003 : Record 7010076;pwExtra@1103355016 : Code[10];pwIniExtra@1103355017 : Date;pwFinExtra@1103355018 : Date);
    VAR
      rConC@1103355004 : Record 7009723;
      rHab@1103355005 : Record 7009731;
      rPreC@1103355006 : Record 7009738;
      rCupoC@1103355007 : Record 7009739;
      rConv@1103355008 : Record 7009731;
      fecha_trabajo@1103355009 : Date;
      rConVta@1103355010 : Record 7009727;
      rPreV@1103355011 : Record 7009732;
      rCupoV@1103355012 : Record 7009730;
      rPar@1103355013 : Record 7010081;
      ant_conversion@1103355014 : Code[10];
      aux_estancia@1103355015 : Integer;
      lwFechaIni@1103355019 : Date;
      lwFechaFin@1103355020 : Date;
    BEGIN
      // _busca_contrato

      rPar.FINDFIRST;

      CLEAR(ant_conversion);
      aux_estancia := par_hot."Fecha salida" - par_hot."Fecha entrada";
      rConC.RESET;
      rConC.SETCURRENTKEY(Delegacion,
                          TourOperador,
                          Hotel,
                          "Fecha inicio contrato",
                          "Fecha final contrato");
      IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
        rConC.SETRANGE (TourOperador, rPar."Touroperador importacion")
      ELSE
        rConC.SETRANGE (TourOperador, wTTOO);
      rConC.SETRANGE (Hotel                  , par_hotel);
      rConC.SETRANGE (Confirmado             , TRUE);

      // Si buscamos un contrato para una extra solo debemos usar el rango de
      // fechas del extra.

      IF pwExtra = '' THEN BEGIN
        lwFechaIni := par_hot."Fecha entrada";
        lwFechaFin := par_hot."Fecha salida" - 1;
      END
      ELSE BEGIN
        lwFechaIni := pwIniExtra;
        lwFechaFin := pwFinExtra; // no le restamos el dia...
      END;

      FOR fecha_trabajo := lwFechaIni TO lwFechaFin DO BEGIN
        rConC.SETFILTER("Fecha inicio contrato", '<=%1', fecha_trabajo);
        rConC.SETFILTER("Fecha final contrato" , '>=%1', fecha_trabajo);
        IF rConC.FINDFIRST THEN BEGIN
          IF pwExtra='' THEN BEGIN // Si buscamos extras no miramos estancias ni regimen
            IF aux_estancia < rConC."Minimo estancias" THEN
              _inserta_error(par_cab, STRSUBSTNO(Text069, rConC."N§ Contrato compra"));


            CLEAR(rConv);
            rConv.SETRANGE(Delegacion     , rConC.Delegacion);
            rConv.SETRANGE("N§ Contrato"  , rConC."N§ Contrato compra");
            rConv.SETRANGE("Tipo contrato", rConv."Tipo contrato"::Compra);
            rConv.SETRANGE("Habitacion TO", par_hot.Habitacion);
            IF NOT rConv.FIND('-') THEN
              _inserta_error(par_cab, STRSUBSTNO(Text070, par_hot.Habitacion, rConC."N§ Contrato compra"));

            IF par_hot."Hab. Contrato" = '' THEN BEGIN // Introducimos ya lo que sera el tipo de habitacion de reserva JPT-06/10/03
              par_hot."Hab. Contrato":= rConv."Habitacion cupo";
              par_hot.MODIFY;
            END;
            IF ant_conversion = '' THEN
              ant_conversion := rConv."Habitacion cupo"
            ELSE BEGIN
              IF ant_conversion <> rConv."Habitacion cupo" THEN
                _inserta_error(par_cab, STRSUBSTNO(Text071,
                                                  par_hot.Habitacion));
            END;
            // buscar el cupo para la habitacion
            //
            rCupoC.RESET;
            rCupoC.SETRANGE (Delegacion          , rConC.Delegacion);
            rCupoC.SETRANGE ("N§ Contrato compra", rConC."N§ Contrato compra");
            rCupoC.SETRANGE ("Habitacion cupo"   , rConv."Habitacion cupo");
            rCupoC.SETFILTER("Fecha desde"      , '<=%1', fecha_trabajo);
            rCupoC.SETFILTER("Fecha hasta"      , '>=%1', fecha_trabajo);
            rCupoC.SETRANGE (Activo             , TRUE);
            IF NOT rCupoC.FINDFIRST THEN BEGIN
              _inserta_error(par_cab, STRSUBSTNO(Text072+
                                                Text073, rConv."Habitacion cupo", rConC.Delegacion,
                                                rConC."N§ Contrato compra", fecha_trabajo));
            END;

            // buscar el precio de habitacion

            rPreC.RESET;
            rPreC.SETRANGE(Delegacion     , rConC.Delegacion);
            rPreC.SETRANGE("N§ Contrato"  , rConC."N§ Contrato compra");
            rPreC.SETRANGE("Codigo Precio", rPreC."Codigo Precio"::Habitacion);
            rPreC.SETRANGE(Codigo         , rConv."Habitacion cupo");
            rPreC.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
            rPreC.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
            rPreC.SETRANGE(Activo         , TRUE);
            IF NOT rPreC.FINDFIRST THEN
              _inserta_error(par_cab, STRSUBSTNO(Text074+
                                                Text073, rConv."Habitacion cupo", rConC.Delegacion,
                                                rConC."N§ Contrato compra", fecha_trabajo));
            // buscar el precio de regimen

            rPreC.RESET;
            rPreC.SETRANGE(Delegacion     , rConC.Delegacion);
            rPreC.SETRANGE("N§ Contrato"  , rConC."N§ Contrato compra");
            rPreC.SETRANGE("Codigo Precio", rPreC."Codigo Precio"::Regimen);
            rPreC.SETRANGE(Codigo         , par_regimen);
            rPreC.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
            rPreC.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
            rPreC.SETRANGE(Activo         , TRUE);
            IF NOT rPreC.FINDFIRST THEN
              _inserta_error(par_cab, STRSUBSTNO(Text075+
                                                Text073, par_regimen, rConC.Delegacion,
                                                rConC."N§ Contrato compra", fecha_trabajo));
          END
          ELSE BEGIN // Busca precio del Extra
            rPreC.RESET;
            rPreC.SETRANGE(Delegacion     , rConC.Delegacion);
            rPreC.SETRANGE("N§ Contrato"  , rConC."N§ Contrato compra");
            rPreC.SETRANGE("Codigo Precio", rPreC."Codigo Precio"::Extras);
            rPreC.SETRANGE(Codigo         , pwExtra);
            rPreC.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
            rPreC.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
            rPreC.SETRANGE(Activo         , TRUE);
            IF NOT rPreC.FINDFIRST THEN
              _inserta_error(par_cab, STRSUBSTNO(Text094 + Text073, pwExtra, rConC.Delegacion,
                                                rConC."N§ Contrato compra", fecha_trabajo));
          END;
        END
        ELSE BEGIN
          IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
            _inserta_error(par_cab, STRSUBSTNO(Text076 + ' ' +
                                              Text077, rPar."Touroperador importacion",
                                              par_hotel, fecha_trabajo))
          ELSE
            _inserta_error(par_cab, STRSUBSTNO(Text076 + ' ' +
                                              Text077, wTTOO,
                                              par_hotel, fecha_trabajo))
        END;
      END;

      IF rConC."Tipo de Contrato" = rConC."Tipo de Contrato"::"En nombre propio" THEN BEGIN
        ant_conversion := '';
        rConVta.RESET;
        rConVta.SETCURRENTKEY(Delegacion,
                              TourOperador,
                              Hotel,
                              "Fecha inicio contrato",
                              "Fecha final contrato");
        rConVta.SETRANGE (TourOperador           , wTTOO); //+$007
        rConVta.SETRANGE (Hotel                  , par_hotel);
        rConVta.SETRANGE (Confirmado             , TRUE);
        FOR fecha_trabajo := par_hot."Fecha entrada" TO par_hot."Fecha salida" - 1 DO BEGIN
          rConVta.SETFILTER("Fecha inicio contrato", '<=%1', fecha_trabajo);
          rConVta.SETFILTER("Fecha final contrato" , '>=%1', fecha_trabajo);
          IF rConVta.FINDFIRST THEN BEGIN
            IF pwExtra='' THEN BEGIN // Si buscamos extras no miramos estancias ni regimen
              CLEAR(rConv);
              rConv.SETRANGE(Delegacion     , rConVta.Delegacion);
              rConv.SETRANGE("N§ Contrato"  , rConVta."N§ Contrato venta");
              rConv.SETRANGE("Tipo contrato", rConv."Tipo contrato"::Venta);
              rConv.SETRANGE("Habitacion TO", par_hot.Habitacion);
              IF NOT rConv.FIND('-') THEN
                _inserta_error(par_cab, STRSUBSTNO(Text070,
                                                  par_hot.Habitacion, rConVta."N§ Contrato venta"));
              IF ant_conversion = '' THEN
                ant_conversion := rConv."Habitacion cupo"
              ELSE BEGIN
                IF ant_conversion <> rConv."Habitacion cupo" THEN
                 _inserta_error(par_cab, STRSUBSTNO(Text071,
                                                  par_hot.Habitacion));
              END;
              // buscar el cupo para la habitacion
              //
              rCupoV.RESET;
              rCupoV.SETRANGE (Delegacion         , rConVta.Delegacion);
              rCupoV.SETRANGE ("N§ Contrato venta", rConVta."N§ Contrato venta");
              rCupoV.SETRANGE ("Habitacion cupo"  , rConv."Habitacion cupo");
              rCupoV.SETFILTER("Fecha desde"      , '<=%1', fecha_trabajo);
              rCupoV.SETFILTER("Fecha hasta"      , '>=%1', fecha_trabajo);
              rCupoV.SETRANGE (Activo             , TRUE);
              IF NOT rCupoV.FINDFIRST THEN BEGIN
                _inserta_error(par_cab, STRSUBSTNO(Text078+
                                                  Text073, rConv."Habitacion cupo", rConVta.Delegacion,
                                                  rConVta."N§ Contrato venta", fecha_trabajo));
              END;
              // buscar el precio de habitacion
              //
              rPreV.RESET;
              rPreV.SETRANGE(Delegacion     , rConVta.Delegacion);
              rPreV.SETRANGE("N§ Contrato"  , rConVta."N§ Contrato venta");
              rPreV.SETRANGE("Codigo Precio", rPreV."Codigo Precio"::Habitacion);
              rPreV.SETRANGE(Codigo         , rConv."Habitacion cupo");
              rPreV.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
              rPreV.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
              rPreV.SETRANGE(Activo         , TRUE);
              IF NOT rPreV.FINDFIRST THEN
                _inserta_error(par_cab, STRSUBSTNO(Text079+
                                                  Text073, rConv."Habitacion cupo", rConVta.Delegacion,
                                                  rConVta."N§ Contrato venta", fecha_trabajo));
              // buscar el precio de regimen
              //
              rPreV.RESET;
              rPreV.SETRANGE(Delegacion     , rConVta.Delegacion);
              rPreV.SETRANGE("N§ Contrato"  , rConVta."N§ Contrato venta");
              rPreV.SETRANGE("Codigo Precio", rPreV."Codigo Precio"::Regimen);
              rPreV.SETRANGE(Codigo         , par_regimen);
              rPreV.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
              rPreV.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
              rPreV.SETRANGE(Activo         , TRUE);
              IF NOT rPreV.FINDFIRST THEN
                _inserta_error(par_cab, STRSUBSTNO(Text080+
                                                  Text073, par_regimen, rConVta.Delegacion,
                                                  rConVta."N§ Contrato venta", fecha_trabajo));
            END
            ELSE BEGIN // Busca el precio del extra
              rPreV.RESET;
              rPreV.SETRANGE(Delegacion     , rConVta.Delegacion);
              rPreV.SETRANGE("N§ Contrato"  , rConVta."N§ Contrato venta");
              rPreV.SETRANGE("Codigo Precio", rPreV."Codigo Precio"::Extras);
              rPreV.SETRANGE(Codigo         , pwExtra);
              rPreV.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
              rPreV.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
              rPreV.SETRANGE(Activo         , TRUE);
              IF NOT rPreV.FINDFIRST THEN
                _inserta_error(par_cab, STRSUBSTNO(Text095 + Text073, pwExtra, rConVta.Delegacion,
                                                  rConVta."N§ Contrato venta", fecha_trabajo));
            END;
          END
          ELSE BEGIN
            _inserta_error(par_cab, STRSUBSTNO(Text081+
                                              Text077, wTTOO,
                                              par_hotel, fecha_trabajo)); //+$007
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE _RevisaPaqueteReserva@1100217000(VAR prCab@1100217000 : Record 7010076);
    VAR
      lrHotIfs@1100217002 : Record 7010078;
      lrConvHotel@1100217003 : Record 7009725;
      lrConvTO@1000000000 : Record 7010161;
    BEGIN
      // _RevisaPaqueteReserva

      IF prCab.FINDSET THEN
      BEGIN
        REPEAT
          //-$007IF rConvTO.GET(prCab.TourOperador) THEN
          //-$007  wTTOO := rConvTO."Touroperador Atennea"
          //-$007ELSE

          wTTOO := lrConvTO.ConversionTouroperador(prCab.TourOperador, prCab.Destino);
          IF wTTOO = '' THEN
            _inserta_error(prCab, STRSUBSTNO(Text018, prCab.TourOperador));

          lrHotIfs.SETRANGE(Fichero     , prCab.Fichero);
          lrHotIfs.SETRANGE(Touroperador, prCab.TourOperador);
          lrHotIfs.SETRANGE(Bono        , prCab.Bono);
          lrHotIfs.SETRANGE(Temporada   , prCab.Temporada);
          IF lrHotIfs.FINDSET THEN
          BEGIN
            REPEAT
              //. CNT-OC-13024
              //. En esta version todos los cliente que no son SOLO HOTEL tienen que ser SOLO TRANSFER
              IF NOT _EsPaqueteSoloHotel(lrHotIfs."Paquete asociado") THEN
              BEGIN
                lrHotIfs."Paquete asociado" := rPar."Paquete Solo Transfer";
                lrHotIfs.MODIFY;
              END;
            UNTIL lrHotIfs.NEXT = 0;
          END;

        UNTIL prCab.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ConversionHotel@1100217004(VAR prConv@1100217001 : Record 7009725;prCab@1100217000 : Record 7010076;pwHotel@1100217002 : Code[20]) : Code[20];
    VAR
      lrExcluido@1100217003 : Record 7009865;
      lrConvTO@1000000000 : Record 7010161;
    BEGIN
      // _ConversionHotel

      IF lrExcluido.GET(pwHotel) THEN
        EXIT;

      rDatosIns.FINDFIRST;
      //$007wTTOO := _GetTouroperadorAtennea(prCab.TourOperador);
      wTTOO := lrConvTO.ConversionTouroperador(prCab.TourOperador, prCab.Destino); //+$007

      CLEAR(prConv);
      IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
        prConv.SETRANGE(TourOperador, rPar."Touroperador importacion")
      ELSE
        prConv.SETRANGE(TourOperador, wTTOO);
      prConv.SETRANGE("Touroperador venta", wTTOO);
      prConv.SETRANGE("Hotel TO"          , pwHotel);
      IF (NOT prConv.FINDFIRST) OR
         (prConv."Hotel estancia" = '') THEN
      BEGIN
        prConv.SETRANGE("Touroperador venta", '');
        IF NOT prConv.FINDFIRST THEN
        BEGIN
          IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
            _inserta_error(prCab, STRSUBSTNO(Text056, pwHotel, rPar."Touroperador importacion"))
          ELSE
            _inserta_error(prCab, STRSUBSTNO(Text056, pwHotel, wTTOO));
        END;
      END;
    END;

    LOCAL PROCEDURE _EstanciaSolapadaIFS@1100217001(prCabIfs@1100217003 : Record 7010076;prHotIfs@1100217000 : Record 7010078);
    VAR
      lrHotIfs@1100217001 : Record 7010078;
      lrHotel@1100217002 : Record 7009724;
      lrConv@1100217004 : Record 7009725;
      lrSerIfs@1100217005 : Record 7010080;
      lrSerIfs2@1100217006 : Record 7010080;
      lrPaxIfs@1100217007 : Record 7010079;
      lrPaxIfs2@1100217008 : Record 7010079;
    BEGIN
      // _EstanciaSolapada

      lrHotIfs.RESET;
      lrHotIfs.SETRANGE (Fichero         , prHotIfs.Fichero);
      lrHotIfs.SETRANGE (Touroperador    , prHotIfs.Touroperador);
      lrHotIfs.SETRANGE (Bono            , prHotIfs.Bono);
      lrHotIfs.SETRANGE (Temporada       , prHotIfs.Temporada);
      lrHotIfs.SETFILTER("Id Importacion", '<>%1', prHotIfs."Id Importacion");
      lrHotIfs.SETFILTER("Fecha entrada" , '<%1', prHotIfs."Fecha salida");
      lrHotIfs.SETFILTER("Fecha salida"  , '>%1', prHotIfs."Fecha entrada");
      lrHotIfs.SETRANGE ("Tipo Registro" , prHotIfs."Tipo Registro"::Ok);
      IF lrHotIfs.FINDSET THEN
      BEGIN
        REPEAT
          _ConversionHotel(lrConv, prCabIfs, prHotIfs.Hotel);

          IF NOT lrHotel.GET(lrConv."Hotel estancia") THEN
            CLEAR(lrHotel);

          IF NOT lrHotIfs."Hotel Ficticio" THEN
          BEGIN
            //. Comprobamos que se solapen personas
            //. Buscar los servicios del primer hotel

            lrSerIfs.RESET;
            lrSerIfs.SETRANGE(Fichero        , prHotIfs.Fichero);
            lrSerIfs.SETRANGE(Touroperador   , prHotIfs.Touroperador);
            lrSerIfs.SETRANGE(Bono           , prHotIfs.Bono);
            lrSerIfs.SETRANGE(Temporada      , prHotIfs.Temporada);
            lrSerIfs.SETRANGE("N§ Servicio"  , prHotIfs."N§ Servicio");
            lrSerIfs.SETRANGE("Tipo Servicio", lrSerIfs."Tipo Servicio"::Hotel);
            IF lrSerIfs.FINDSET THEN
            BEGIN
              REPEAT
                //. Buscamos el registro de paxes interfase para ver si esta persona tiene servicio en el hotel solapado
                lrPaxIfs.RESET;
                lrPaxIfs.SETRANGE(Fichero     , prCabIfs.Fichero);
                lrPaxIfs.SETRANGE(TourOperador, prCabIfs.TourOperador);
                lrPaxIfs.SETRANGE(Bono        , prCabIfs.Bono);
                lrPaxIfs.SETRANGE(Temporada   , prCabIfs.Temporada);
                lrPaxIfs.SETRANGE("ID Pax"    , lrSerIfs.Persona);
                lrPaxIfs.FINDFIRST;

                lrPaxIfs2.RESET;
                lrPaxIfs2.SETRANGE (Fichero        , prCabIfs.Fichero);
                lrPaxIfs2.SETRANGE (TourOperador   , prCabIfs.TourOperador);
                lrPaxIfs2.SETRANGE (Bono           , prCabIfs.Bono);
                lrPaxIfs2.SETRANGE (Temporada      , prCabIfs.Temporada);
                lrPaxIfs2.SETFILTER("ID Pax"       , '<>%1', lrPaxIfs."ID Pax");
                lrPaxIfs2.SETRANGE (Contador       , lrPaxIfs.Contador);
                lrPaxIfs2.SETFILTER("Tipo Registro", '%1|%2', lrPaxIfs2."Tipo Registro"::Ok, lrPaxIfs2."Tipo Registro"::Modificacion);
                IF lrPaxIfs2.FINDFIRST THEN
                BEGIN
                  REPEAT
                    //. Buscamos si esta persona tiene tambien servicio en el hotel solapado
                    lrSerIfs2.RESET;
                    lrSerIfs2.SETRANGE(Fichero        , lrHotIfs.Fichero);
                    lrSerIfs2.SETRANGE(Touroperador   , lrHotIfs.Touroperador);
                    lrSerIfs2.SETRANGE(Bono           , lrHotIfs.Bono);
                    lrSerIfs2.SETRANGE(Temporada      , lrHotIfs.Temporada);
                    lrSerIfs2.SETRANGE("N§ Servicio"  , lrHotIfs."N§ Servicio");
                    lrSerIfs2.SETRANGE(Persona        , lrPaxIfs2."ID Pax");
                    lrSerIfs2.SETRANGE("Tipo Servicio", lrSerIfs."Tipo Servicio"::Hotel);
                    IF lrSerIfs2.FINDFIRST THEN
                    BEGIN
                      _inserta_error(prCabIfs,
                                    STRSUBSTNO(Text099, prHotIfs."Id Importacion", lrHotIfs."Id Importacion"));
                    END;
                  UNTIL lrPaxIfs2.NEXT = 0;
                END;
              UNTIL lrSerIfs.NEXT = 0;
            END;
          END;
        UNTIL lrHotIfs.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _EstanciaSolapadaReal@1100217005(prCabIfs@1100217001 : Record 7010076;prHotIfs@1100217000 : Record 7010078);
    VAR
      lrSerIfs@1100217004 : Record 7010080;
      lrPaxIfs@1100217005 : Record 7010079;
    BEGIN
      // _EstanciaSolapadaReal

      //. Buscamos si este producto de hotel se solapa con una estancia real

      rPerTMP.RESET;
      rPerTMP.SETCURRENTKEY("TourOperador Venta", Bono, Temporada, "Fecha entrada", "Fecha salida");
      rPerTMP.SETRANGE ("TourOperador Venta"    , prHotIfs.Touroperador);
      rPerTMP.SETRANGE (Bono            , prHotIfs.Bono);
      rPerTMP.SETRANGE (Temporada       , prHotIfs.Temporada);
      rPerTMP.SETFILTER("Fecha entrada" , '<%1', prHotIfs."Fecha salida");
      rPerTMP.SETFILTER("Fecha salida"  , '>%1', prHotIfs."Fecha entrada");
      rPerTMP.SETFILTER("ID Producto TO", '<>%1', prHotIfs."Id Importacion");
      IF rPerTMP.FINDSET THEN
      BEGIN
        REPEAT
          rAcoTMP.RESET;
          rAcoTMP.SETRANGE(Delegacion  , rPerTMP.Delegacion);
          rAcoTMP.SETRANGE("N§ Interno", rPerTMP."N§ Interno");
          IF rAcoTMP.FINDSET THEN
          BEGIN
            REPEAT
              lrPaxIfs.RESET;
              lrPaxIfs.SETRANGE(Fichero     , prHotIfs.Fichero);
              lrPaxIfs.SETRANGE(TourOperador, prHotIfs.Touroperador);
              lrPaxIfs.SETRANGE(Bono        , prHotIfs.Bono);
              lrPaxIfs.SETRANGE(Temporada   , prHotIfs.Temporada);
              lrPaxIfs.SETRANGE(Contador    , rAcoTMP."Id Pax TO");
              IF lrPaxIfs.FINDSET THEN
              BEGIN
                REPEAT
                  lrSerIfs.RESET;
                  lrSerIfs.SETRANGE(Fichero        , prHotIfs.Fichero);
                  lrSerIfs.SETRANGE(Touroperador   , prHotIfs.Touroperador);
                  lrSerIfs.SETRANGE(Bono           , prHotIfs.Bono);
                  lrSerIfs.SETRANGE(Temporada      , prHotIfs.Temporada);
                  lrSerIfs.SETRANGE("N§ Servicio"  , prHotIfs."N§ Servicio");
                  lrSerIfs.SETRANGE(Persona       , lrPaxIfs."ID Pax");
                  lrSerIfs.SETRANGE("Tipo Servicio", lrSerIfs."Tipo Servicio"::Hotel);
                  IF lrSerIfs.FINDFIRST THEN
                  BEGIN
                    _inserta_error(prCabIfs,
                                  STRSUBSTNO(Text104, lrPaxIfs.Nombre, lrPaxIfs.Contador,
                                                      prHotIfs."Id Importacion", rPerTMP."ID Producto TO"));
                  END;
                UNTIL lrPaxIfs.NEXT = 0;
              END;
            UNTIL rAcoTMP.NEXT = 0;
          END;
        UNTIL rPerTMP.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _CrearPlanVuelo@1100217002(par_cab@1100217003 : Record 7010076;prVuelo@1100217000 : Record 7010077) : Boolean;
    VAR
      lrPlan@1100217001 : Record 7009754;
      lrCom@1100217002 : Record 7009753;
      lrAer@1100217005 : Record 7009704;
      lwError@1100217004 : Boolean;
    BEGIN
      // _CrearPlanVuelo

      //. Si no estan rellenados los datos necesarios para crear el plan de vuelo
      //. retornamos false para que salga un mensaje de error de interfase

      IF (prVuelo.Fecha = 0D) OR
         (prVuelo.Compa¤ia = '') OR
         (prVuelo.Vuelo = '') OR
         (prVuelo.Hora = 0T) OR
         (prVuelo."IATA origen" = '') OR
         (prVuelo."IATA destino" = '') THEN
        EXIT(FALSE);

      lwError := FALSE;
      IF NOT lrCom.GET(prVuelo.Compa¤ia) THEN
      BEGIN
        lwError := TRUE;
        _inserta_error(par_cab, STRSUBSTNO(Text063, prVuelo.Compa¤ia));
      END;

      IF NOT lrAer.GET(prVuelo."IATA origen") THEN
      BEGIN
        lwError := TRUE;
        _inserta_error(par_cab, STRSUBSTNO(Text066, prVuelo."IATA origen"));
      END
      ELSE
      BEGIN
        IF (prVuelo."Tipo Vuelo" = prVuelo."Tipo Vuelo"::Salida) AND (NOT lrAer."Aeropuerto Local") THEN
        BEGIN
          lwError := TRUE;
          _inserta_error(par_cab, STRSUBSTNO(Text106, prVuelo."IATA origen"));
        END;
      END;

      IF NOT lrAer.GET(prVuelo."IATA destino") THEN
      BEGIN
        lwError := TRUE;
        _inserta_error(par_cab, STRSUBSTNO(Text066, prVuelo."IATA destino"));
      END
      ELSE
      BEGIN
        IF (prVuelo."Tipo Vuelo" = prVuelo."Tipo Vuelo"::Entrada) AND (NOT lrAer."Aeropuerto Local") THEN
        BEGIN
          lwError := TRUE;
          _inserta_error(par_cab, STRSUBSTNO(Text105, prVuelo."IATA destino"));
        END;
      END;

      IF lwError THEN
        EXIT;

      lrPlan.INIT;
      lrPlan.VALIDATE(Fecha   , prVuelo.Fecha);
      lrPlan.VALIDATE(Compa¤ia, prVuelo.Compa¤ia);
      lrPlan.VALIDATE(Vuelo   , prVuelo.Vuelo);
      lrPlan.VALIDATE(Origen  , prVuelo."IATA origen");
      lrPlan.VALIDATE(Destino , prVuelo."IATA destino");
      lrPlan.INSERT(TRUE);

      IF lrPlan."Entrada/Salida" = lrPlan."Entrada/Salida"::Entrada THEN
        lrPlan."Hora Entrada" := prVuelo.Hora
      ELSE
        lrPlan."Hora Salida" := prVuelo.Hora;
      lrPlan.MODIFY;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE _CrearTemporalPeriodos@1100217006(prCab@1100217000 : Record 7010076);
    VAR
      lrPer@1100217001 : Record 7009742;
      lrAco@1100217002 : Record 7009748;
      lrHotIfs@1100217003 : Record 7010078;
      lrSerIfs@1100217004 : Record 7010080;
      lrPaxIfs@1100217005 : Record 7010079;
    BEGIN
      // _CrearTemporalPeriodos

      //. Vamos a recorrer todos los periodos existentes

      rPerTMP.RESET;
      rPerTMP.DELETEALL;

      rAcoTMP.RESET;
      rAcoTMP.DELETEALL;

      lrPer.RESET;
      lrPer.SETCURRENTKEY("TourOperador Venta", Bono);
      lrPer.SETRANGE("TourOperador Venta", prCab.TourOperador);
      lrPer.SETRANGE(Bono        , prCab.Bono);
      lrPer.SETRANGE(Temporada   , prCab.Temporada);
      IF lrPer.FINDSET THEN
      BEGIN
        REPEAT
          rPerTMP := lrPer;
          rPerTMP.INSERT;

          lrAco.RESET;
          lrAco.SETRANGE(Delegacion  , lrPer.Delegacion);
          lrAco.SETRANGE("N§ Interno", lrPer."N§ Interno");
          IF lrAco.FINDSET THEN
          BEGIN
            REPEAT
              IF NOT rAcoTMP.GET(lrAco.Delegacion, lrAco."N§ Interno", lrAco."N§ Acompa¤ante") THEN
              BEGIN
                rAcoTMP := lrAco;
                rAcoTMP.INSERT;
              END;
            UNTIL lrAco.NEXT = 0;
          END;
        UNTIL lrPer.NEXT = 0;
      END;

      //. Ahora vamos a ver en que manera afecta esta importacion a lo ya existente para aplicar las cancelaciones

      lrHotIfs.RESET;
      lrHotIfs.SETRANGE(Fichero     , prCab.Fichero);
      lrHotIfs.SETRANGE(Touroperador, prCab.TourOperador);
      lrHotIfs.SETRANGE(Bono        , prCab.Bono);
      lrHotIfs.SETRANGE(Temporada   , prCab.Temporada);
      IF lrHotIfs.FINDSET THEN
      BEGIN
        REPEAT
          rPerTMP.SETRANGE("ID Producto TO", lrHotIfs."Id Importacion");
          IF rPerTMP.FINDFIRST THEN
          BEGIN
            CASE lrHotIfs."Tipo Registro" OF
              lrHotIfs."Tipo Registro"::Cancelacion:
              BEGIN
                //. Las cancelaciones borran el periodo del temporal
                rPerTMP.DELETE;

                //. Borramos los acompa¤antes
                rAcoTMP.RESET;
                rAcoTMP.SETRANGE(Delegacion  , rPerTMP.Delegacion);
                rAcoTMP.SETRANGE("N§ Interno", rPerTMP."N§ Interno");
                IF rAcoTMP.FINDSET(TRUE) THEN
                  rAcoTMP.DELETEALL;
              END;
              lrHotIfs."Tipo Registro"::Ok:
              BEGIN
                //. Enlazamos con la tabla de servicios
                lrSerIfs.SETRANGE(Fichero      , lrHotIfs.Fichero);
                lrSerIfs.SETRANGE(Touroperador , lrHotIfs.Touroperador);
                lrSerIfs.SETRANGE(Bono         , lrHotIfs.Bono);
                lrSerIfs.SETRANGE(Temporada    , lrHotIfs.Temporada);
                lrSerIfs.SETRANGE("N§ Servicio", lrHotIfs."N§ Servicio");
                IF lrSerIfs.FINDSET THEN
                BEGIN
                  REPEAT
                    lrPaxIfs.SETRANGE(Fichero     , lrSerIfs.Fichero);
                    lrPaxIfs.SETRANGE(TourOperador, lrSerIfs.Touroperador);
                    lrPaxIfs.SETRANGE(Bono        , lrSerIfs.Bono);
                    lrPaxIfs.SETRANGE(Temporada   , lrSerIfs.Temporada);
                    lrPaxIfs.SETRANGE("ID Pax"    , lrSerIfs.Persona);
                    IF lrPaxIfs.FINDFIRST THEN
                    BEGIN
                      //. Cancelamos la persona en el temporal
                      IF lrPaxIfs."Tipo Registro" = lrPaxIfs."Tipo Registro"::Cancelacion THEN
                      BEGIN
                        rAcoTMP.RESET;
                        rAcoTMP.SETRANGE(Delegacion  , rPerTMP.Delegacion);
                        rAcoTMP.SETRANGE("N§ Interno", rPerTMP."N§ Interno");
                        rAcoTMP.SETRANGE("Id Pax TO" , lrPaxIfs.Contador);
                        IF rAcoTMP.FINDSET(TRUE) THEN
                          rAcoTMP.DELETE;
                      END;
                    END;
                  UNTIL lrSerIfs.NEXT = 0;
                END;
              END;
            END;
          END;
        UNTIL lrHotIfs.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _EsPaqueteSoloHotel@1100217012(pwPaquete@1100217000 : Code[10]) : Boolean;
    VAR
      lrProdPaq@1100217001 : Record 7009752;
    BEGIN
      // _EsPaqueteSoloHotel

      //. Esta funcion devuelve TRUE si el paquete no tiene ningun producto que no sea de tipo Hotel
      lrProdPaq.RESET;
      lrProdPaq.SETRANGE (Paquete        , pwPaquete);
      lrProdPaq.SETFILTER(Producto       , '<>%1', '');
      lrProdPaq.SETFILTER("Tipo Producto", '<>%1', lrProdPaq."Tipo Producto"::Hotel);
      EXIT(lrProdPaq.ISEMPTY);
    END;

    LOCAL PROCEDURE _EsPaqueteSoloTransfer@1100217009(pwPaquete@1100217000 : Code[10]) : Boolean;
    VAR
      lrProdPaq@1100217001 : Record 7009752;
    BEGIN
      // _EsPaqueteSoloTransfer

      //. Esta funcion devuelve TRUE si el paquete no tiene ningun producto que no sea de tipo Transfer
      lrProdPaq.RESET;
      lrProdPaq.SETRANGE (Paquete        , pwPaquete);
      lrProdPaq.SETFILTER(Producto       , '<>%1', '');
      lrProdPaq.SETFILTER("Tipo Producto", '<>%1', lrProdPaq."Tipo Producto"::Transfer);
      EXIT(lrProdPaq.ISEMPTY);
    END;

    PROCEDURE comprobar_errores_excursion@1000000002(VAR par_res@1103355000 : Record 7009950);
    VAR
      rResWs@1000000000 : Record 7009950;
      w_total@1000000001 : Decimal;
      w_linea@1000000002 : Decimal;
      ventana@1000000003 : Dialog;
    BEGIN
      // comprobar_errores_excursiones

      rPar.FINDFIRST;

      rDatosIns.FINDFIRST;

      CLEAR(rResWs);
      rResWs.COPY(par_res);

      //. Eliminar los mensajes de error de anteriores revisiones
      _BorrarErroresExcursion(rResWs);

      //. Revisar en busca de errores

      w_total := rResWs.COUNT;
      w_linea := 0;
      IF rResWs.FINDSET THEN
      BEGIN
        ventana.OPEN(Text157 +
                     '\' +
                     '#2####                #3####\' +
                     '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@');

        REPEAT
          w_linea := w_linea + 1;

          ventana.UPDATE(2, w_linea);
          ventana.UPDATE(3, w_total);
          ventana.UPDATE(1, ROUND((w_linea * 10000) / w_total, 1));

          _revisa_excursion(rResWs);

          rResWs.CALCFIELDS(rResWs.Errores);
          IF rResWs.Errores <> 0 THEN BEGIN
            rResWs.Status := rResWs.Status::Erronea;
          END ELSE BEGIN
            rResWs.Status := rResWs.Status::"No procesada";
          END;
          rResWs.MODIFY;
        UNTIL rResWs.NEXT = 0;
        ventana.CLOSE;
      END;
    END;

    LOCAL PROCEDURE _BorrarErroresExcursion@1000000001(VAR prRes@1100217000 : Record 7009950);
    VAR
      lrError@1100217004 : Record 7010083;
      lwVentana@1100217001 : Dialog;
      lwLinea@1100217002 : Integer;
      lwTotal@1100217003 : Integer;
    BEGIN
      // _BorrarErrores

      lwTotal := prRes.COUNT;
      lwLinea := 0;

      IF prRes.FINDSET THEN
      BEGIN
        lwVentana.OPEN(Text013 +
                     '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@');
        REPEAT
          lwLinea := lwLinea + 1;

          lwVentana.UPDATE(1, ROUND((lwLinea * 10000) / lwTotal, 1));

          lrError.RESET;
          lrError.SETRANGE("ID Fichero", prRes."File ID");
          lrError.SETRANGE("ID Linea"  , prRes.ID);
          IF lrError.FINDSET(TRUE) THEN
            lrError.DELETEALL;
        UNTIL prRes.NEXT = 0;
        lwVentana.CLOSE;
      END;
    END;

    LOCAL PROCEDURE _revisa_excursion@1000000000(par_res@1103355000 : Record 7009950);
    VAR
      rTO@1103355001 : Record 7009717;
      rResWS@1103355003 : Record 7009950;
      rLang@1000000000 : Record 8;
      rConv@1000000001 : Record 7009725;
      lrHotel@1000000002 : Record 7009724;
      rResExc@1000000003 : Record 7010162;
      lrExc@1000000005 : Record 7009710;
      lrTurno@1000000007 : Record 7010254;
      lrHotelExc@1000000006 : Record 7010184;
      lrConvTO@1000000008 : Record 7010161;
      vExc@1000000004 : Code[20];
      lwFaltaTurno@1000000009 : Boolean;
    BEGIN
      // _revisa_excursiones

      // Comprobar el TourOperador
      IF NOT (rTO.GET(par_res.Touroperador)) THEN
      BEGIN
         //: Si no encontramos el touroperador, buscamos si es un codigo externo para convertirlo
         wTTOO := lrConvTO.ConversionTouroperador(par_res.Touroperador, par_res.Destination);
         IF wTTOO = '' THEN
           _inserta_error_excursion(par_res, STRSUBSTNO(Text017, par_res.Touroperador));
      END
      ELSE
        wTTOO := rTO.TourOperador;

      // Comprobar el Booking number
      IF par_res."Booking number" = '' THEN
        _inserta_error_excursion(par_res, Text150);

      IF (par_res."Tipo Registro" <> par_res."Tipo Registro"::Borrado) THEN
      BEGIN
        // Comprobar la excursion
        IF par_res.Excursion = '' THEN
          _inserta_error_excursion(par_res, Text151);

        // Comprobar la fecha de venta
        IF par_res."Sale date" = 0D THEN
          _inserta_error_excursion(par_res, Text152);

        // Comprobar la fecha de servicio
        IF par_res."Service Date" = 0D THEN
          _inserta_error_excursion(par_res, Text153);

        // Comprobar el nombre de la persona
        IF par_res.Name = '' THEN
          _inserta_error_excursion(par_res, Text154);

        // Comprobar el n£mero de personas
        IF (par_res.Adults + par_res.Children <= 0) THEN
          _inserta_error_excursion(par_res, Text155);

        // Comprobar el chanel id
        IF par_res."Chanel Id" = '' THEN
          _inserta_error_excursion(par_res, Text156);

        // Comprobar el idioma
        IF par_res.Language <> '' THEN
          IF NOT (rLang.GET(par_res.Language)) THEN
            _inserta_error_excursion(par_res, STRSUBSTNO(Text158, par_res.Language));

        //. Comprobar la conversion de excursion
        IF par_res.Excursion <> '' THEN
          vExc := ConversionExcursion(par_res);

        // Comprobamos si hay ni¤os estos deben estar permitidos en la excursion
        IF (par_res.Children <> 0) AND (vExc <> '') THEN
        BEGIN
          IF lrExc.GET(vExc) THEN
          BEGIN
            IF (lrExc."Edad ni¤o desde" = 0) AND (lrExc."Edad ni¤o hasta" = 0) THEN
              _inserta_error_excursion(par_res, STRSUBSTNO(Text162, vExc));
          END;
        END;

        //+$015 <
        IF par_res."Service Date" <> 0D THEN
        BEGIN
          lwFaltaTurno := FALSE;
          IF (par_res.Turn = 0) AND
             (lrTurno.GetNumTurnos(vExc, par_res."Service Date") > 1) THEN
          BEGIN
            lwFaltaTurno := TRUE;
            //_inserta_error_excursion(par_res, Text165);
          END;
        END
        ELSE
          lwFaltaTurno := TRUE;
        //+$015 >

        //. Comprobar la conversion de hotel
        IF par_res.Hotel <> '' THEN
        BEGIN
          _ConversionHotel_excursion(rConv, par_res);
          IF rConv."Hotel estancia" <> '' THEN
          BEGIN
            IF NOT lrHotel.GET(rConv."Hotel estancia") THEN
              _inserta_error_excursion(par_res, STRSUBSTNO(Text159, rConv."Hotel estancia"));

            IF NOT lwFaltaTurno THEN
            BEGIN
              IF NOT lrHotelExc.GET(rConv."Hotel estancia", vExc, par_res.Turn) THEN
                _inserta_error_excursion(par_res, STRSUBSTNO(Text163, rConv."Hotel estancia", vExc, par_res.Turn))
              ELSE
                IF lrHotelExc."Hora recogida" = 0T THEN
                  _inserta_error_excursion(par_res, STRSUBSTNO(Text163, rConv."Hotel estancia", vExc, par_res.Turn));
            END;
          END
          ELSE
            _inserta_error_excursion(par_res, STRSUBSTNO(Text056, par_res.Hotel, par_res.Touroperador));
        END;
      END;

      // Si es nueva comprobamos que no se haya creado ya
      IF par_res."Tipo Registro" = par_res."Tipo Registro"::Alta THEN
      BEGIN
        rResWS.RESET;
        rResWS.SETRANGE (Touroperador    , par_res.Touroperador);
        rResWS.SETRANGE ("Booking number", par_res."Booking number");
        rResWS.SETRANGE (Excursion       , par_res.Excursion);
        rResWS.SETRANGE ("Tipo Registro" , rResWS."Tipo Registro"::Alta); //+$012
        rResWS.SETFILTER(ID              , '<>%1', par_res.ID);
        IF rResWS.FINDFIRST THEN
          _inserta_error_excursion(par_res, STRSUBSTNO(Text160, par_res.Touroperador, par_res."Booking number", par_res.Excursion));
      END;

      // Si es borrado o modificaci¢n comprobamos que exista
      IF (par_res."Tipo Registro" = par_res."Tipo Registro"::Modificacion) OR
         (par_res."Tipo Registro" = par_res."Tipo Registro"::Borrado) THEN
      BEGIN
        rResExc.RESET;
        rResExc.SETRANGE(TourOperador          , par_res.Touroperador);
        rResExc.SETRANGE("Booking Touroperador", par_res."Booking number");
        rResExc.SETRANGE(Producto              , par_res.Excursion);
        IF NOT rResExc.FINDFIRST THEN
          _inserta_error_excursion(par_res, STRSUBSTNO(Text164, par_res.Touroperador, par_res."Booking number", par_res.Excursion));
      END;
    END;

    LOCAL PROCEDURE _inserta_error_excursion@1000000003(VAR par_res@1103355000 : Record 7009950;par_texto@1103355001 : Text[250]);
    VAR
      rError@1103355002 : Record 7010083;
    BEGIN
      // _inserta_error_excursiones

      //. Verificamos si el texto ya existe para reducir el numero de lineas que se crean en errores

      rError.RESET;
      rError.SETRANGE("ID Fichero", par_res."File ID");
      rError.SETRANGE("ID Linea"  , par_res.ID);
      rError.SETRANGE(Texto       , par_texto);
      IF NOT rError.ISEMPTY THEN
        EXIT;

      CLEAR(rError);
      rError."ID Fichero" := par_res."File ID";
      rError."ID Linea"   := par_res.ID;
      rError.Texto        := par_texto;
      rError.INSERT(TRUE);
    END;

    LOCAL PROCEDURE _ConversionHotel_excursion@1000000004(VAR prConv@1100217001 : Record 7009725;prCab@1100217000 : Record 7009950) : Code[20];
    BEGIN
      // _ConversionHotel_excusion

      CLEAR(prConv);
      prConv.SETRANGE(TourOperador, prCab.Touroperador);
      prConv.SETRANGE("Touroperador venta", prCab.Touroperador);
      prConv.SETRANGE("Hotel TO"          , prCab.Hotel);
      IF (NOT prConv.FINDFIRST) OR
         (prConv."Hotel estancia" = '') THEN
      BEGIN
        prConv.SETRANGE("Touroperador venta", '');
        IF NOT prConv.FINDFIRST THEN
        BEGIN
          _inserta_error_excursion(prCab, STRSUBSTNO(Text056, prCab.Hotel, prCab.Touroperador));
        END;
      END;
    END;

    PROCEDURE ConversionExcursion@1000000005(prCab@1000000000 : Record 7009950) : Code[20];
    VAR
      lrExcursion@1000000003 : Record 7009710;
      lrConversion@1000000005 : Record 7010271;
    BEGIN
      // ConversionExcursion

      //. Filtramos sobre la tabla de conversion especial para la API
      lrConversion.RESET;
      lrConversion.SETRANGE("Tipo conversion", 0);
      lrConversion.SETRANGE(Touroperador     , prCab.Touroperador);
      lrConversion.SETRANGE("Codigo externo" , prCab.Excursion);

      //. Si no lo encontramos en la tabla de conversi¢n vamos a ver si estan utilizando nuestros propios codigos
      IF NOT lrConversion.FINDFIRST THEN
      BEGIN
        IF NOT lrExcursion.GET(prCab.Excursion) THEN BEGIN
          _inserta_error_excursion(prCab, STRSUBSTNO(Text161, prCab.Excursion, prCab.Touroperador));
          EXIT('');
        END ELSE
          EXIT(lrExcursion.Codigo);
      END
      ELSE
        EXIT(lrConversion."Codigo Atennea");
    END;

    PROCEDURE Procesar_reserva_excursion@1000000006(VAR par_res@1000000000 : Record 7009950);
    VAR
      lrRsvTO@1000000007 : Record 7009950;
      lrRsvExc@1000000001 : Record 7010162;
      rConv@1000000003 : Record 7009725;
      lrTurno@1000000004 : Record 7010254;
      lrExc@1000000005 : Record 7009710;
      lrTO@1000000006 : Record 7009717;
      lrConvTO@1000000008 : Record 7010161;
      lcFuncExc@1000000002 : Codeunit 7010141;
    BEGIN
      // Procesamos los registros de reservas excursion

      // En primer lugar hay que revisar errores
      comprobar_errores_excursion(par_res);

      IF par_res.FINDSET THEN
      BEGIN
        REPEAT
          par_res.CALCFIELDS(par_res.Errores);
          IF par_res.Errores = 0 THEN
          BEGIN
            CASE par_res."Tipo Registro" OF
              par_res."Tipo Registro"::Alta:
              BEGIN
                //. Creamos la reserva de excursiones
                CLEAR(lrRsvExc);
                lrRsvExc."Reserva a credito" := TRUE;
                //-$014lrRsvExc."Reserva online" := TRUE;
                lrRsvExc.INSERT(TRUE);

                lrRsvExc."Modificacion importacion" := TRUE;

                lrTO.RESET;
                IF lrTO.GET(par_res.Touroperador) THEN
                  wTTOO := par_res.Touroperador
                ELSE
                  wTTOO := lrConvTO.ConversionTouroperador(par_res.Touroperador, par_res.Destination);

                lrRsvExc.VALIDATE(TourOperador, wTTOO);

                lrTO.RESET;
                IF lrTO.GET(wTTOO) THEN
                  lrRsvExc."Guia Venta"     := lrTO."Representante credito";

                lrRsvExc.VALIDATE(Producto         , ConversionExcursion(par_res));
                lrRsvExc.VALIDATE("Fecha Excursion", par_res."Service Date");
                lrRsvExc.VALIDATE("Turno Excursion", par_res.Turn);
                lrRsvExc.VALIDATE("Nombre Cliente" , par_res.Name);
                lrRsvExc.VALIDATE(Adultos          , par_res.Adults);
                lrRsvExc.VALIDATE(Ni¤os            , par_res.Children);
                IF par_res.Vehicles <> 0 THEN
                  lrRsvExc.VALIDATE("Num. Vehiculos", par_res.Vehicles);

                lrTurno.RESET;
                IF (par_res.Turn = 0) AND
                   (lrTurno.GetNumTurnos(lrRsvExc.Producto, lrRsvExc."Fecha Excursion") > 1) THEN
                   BEGIN
                     lrRsvExc."Pendiente asignar turno" := TRUE;
                   END;

                _ConversionHotel_excursion(rConv, par_res);
                lrRsvExc.VALIDATE("Hotel Cliente"  , rConv."Hotel estancia");

                lrRsvExc."Voucher Discount No" := par_res."Voucher Discount No";
                lrRsvExc."Canal venta"         := par_res."Chanel Id";
                lrRsvExc.VALIDATE(Idioma       , _GetIdioma(par_res.Language));
                lrRsvExc."Booking Touroperador" := par_res."Booking number";
                lrRsvExc."Fecha Venta"          := par_res."Sale date";


                // Si no viene vehiculos y es excursi¢n por vehiculo lo calculamos
                IF lrRsvExc."Num. Vehiculos" = 0 THEN
                BEGIN
                  lrExc.RESET;
                  IF lrExc.GET(lrRsvExc.Producto) THEN
                  BEGIN
                    IF (lrExc."Venta x vehiculo") AND (lrExc."Capacidad x defecto" <> 0) THEN BEGIN
                      lrRsvExc."Num. Vehiculos" := ROUND(((lrRsvExc.Adultos + lrRsvExc.Ni¤os) / lrExc."Capacidad x defecto"), 1, '>');
                    END;
                  END;
                END;

                lrRsvExc."Modificacion importacion" := FALSE;
                lrRsvExc.MODIFY(TRUE);

                lrRsvTO := par_res;
                lrRsvTO.Status := par_res.Status::Procesada;
                lrRsvTO."Processed date" := CURRENTDATETIME;
                lrRsvTO."Processed user" := USERID;
                lrRsvTO.MODIFY;
              END;
              par_res."Tipo Registro"::Modificacion:
              BEGIN
                lrTO.RESET;
                IF lrTO.GET(par_res.Touroperador) THEN
                  wTTOO := par_res.Touroperador
                ELSE
                  wTTOO := lrConvTO.ConversionTouroperador(par_res.Touroperador, par_res.Destination);

                lrRsvExc.RESET;
                lrRsvExc.SETRANGE(TourOperador          , wTTOO);
                lrRsvExc.SETRANGE("Booking Touroperador", par_res."Booking number");
                IF lrRsvExc.FINDFIRST THEN
                BEGIN
                  IF lrRsvExc.Producto <> ConversionExcursion(par_res) THEN
                    lrRsvExc.VALIDATE(Producto, ConversionExcursion(par_res));

                  IF lrRsvExc."Fecha Excursion" <> par_res."Service Date" THEN
                    lrRsvExc.VALIDATE("Fecha Excursion", par_res."Service Date");

                  IF lrRsvExc."Turno Excursion" <> par_res.Turn THEN
                    lrRsvExc.VALIDATE("Turno Excursion", par_res.Turn);

                  IF lrRsvExc."Nombre Cliente" <> par_res.Name THEN
                    lrRsvExc.VALIDATE("Nombre Cliente", par_res.Name);

                  IF lrRsvExc.Adultos <> par_res.Adults THEN
                    lrRsvExc.VALIDATE(Adultos, par_res.Adults);

                  IF lrRsvExc.Ni¤os <> par_res.Children THEN
                    lrRsvExc.VALIDATE(Ni¤os            , par_res.Children);

                  IF (par_res.Vehicles <> 0) AND (lrRsvExc."Num. Vehiculos" <> par_res.Vehicles) THEN
                    lrRsvExc.VALIDATE("Num. Vehiculos", par_res.Vehicles);

                  _ConversionHotel_excursion(rConv, par_res);

                  IF lrRsvExc."Hotel Cliente" <> rConv."Hotel estancia" THEN
                    lrRsvExc.VALIDATE("Hotel Cliente"  , rConv."Hotel estancia");

                  IF lrRsvExc.Idioma <> _GetIdioma(par_res.Language) THEN
                    lrRsvExc.VALIDATE(Idioma       , _GetIdioma(par_res.Language));

                  lrRsvExc."Voucher Discount No" := par_res."Voucher Discount No";

                  lrTurno.RESET;
                  IF (par_res.Turn = 0) AND
                     (lrTurno.GetNumTurnos(lrRsvExc.Producto, lrRsvExc."Fecha Excursion") > 1) THEN
                  BEGIN
                    lrRsvExc."Pendiente asignar turno" := TRUE;
                  END;

                  // Si no viene vehiculos y es excursi¢n por vehiculo lo calculamos
                  IF lrRsvExc."Num. Vehiculos" = 0 THEN
                  BEGIN
                    lrExc.RESET;
                    IF lrExc.GET(lrRsvExc.Producto) THEN
                    BEGIN
                      IF (lrExc."Venta x vehiculo") AND (lrExc."Capacidad x defecto" <> 0) THEN
                      BEGIN
                        lrRsvExc."Num. Vehiculos" := ROUND(((lrRsvExc.Adultos + lrRsvExc.Ni¤os) / lrExc."Capacidad x defecto"), 1, '>');
                      END;
                    END;
                  END;

                  lrRsvExc.MODIFY(TRUE);

                  lrRsvTO := par_res;
                  lrRsvTO.Status := par_res.Status::Procesada;
                  lrRsvTO."Processed date" := CURRENTDATETIME;
                  lrRsvTO."Processed user" := USERID;
                  lrRsvTO.MODIFY;
                END;
              END;

              par_res."Tipo Registro"::Borrado:
              BEGIN
                lrTO.RESET;
                IF lrTO.GET(par_res.Touroperador) THEN
                  wTTOO := par_res.Touroperador
                ELSE
                  wTTOO := lrConvTO.ConversionTouroperador(par_res.Touroperador, par_res.Destination);

                lrRsvExc.RESET;
                lrRsvExc.SETRANGE(TourOperador          , wTTOO);
                lrRsvExc.SETRANGE("Booking Touroperador", par_res."Booking number");
                IF lrRsvExc.FINDFIRST THEN
                BEGIN
                  lcFuncExc.AnularTicket(lrRsvExc, TRUE);

                  lrRsvTO := par_res;
                  lrRsvTO.Status := par_res.Status::Procesada;
                  lrRsvTO."Processed date" := CURRENTDATETIME;
                  lrRsvTO."Processed user" := USERID;
                  lrRsvTO.MODIFY;
                END;
              END;
            END;
          END;
        UNTIL par_res.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _GetIdioma@1000000007(pIdiEnt@1000000000 : Code[10]) vIdiSal : Code[10];
    VAR
      rIdioma@1000000001 : Record 8;
    BEGIN
      // $013

      CLEAR(vIdiSal);
      IF pIdiEnt <> '' THEN BEGIN
        rIdioma.RESET;
        rIdioma.SETRANGE(rIdioma."Codigo ISO", pIdiEnt);
        IF NOT rIdioma.FINDFIRST THEN
          ERROR(Text009);
        vIdiSal := rIdioma.Code;
      END;
    END;

    PROCEDURE comprobar_errores_transfer@1000000013(VAR par_res@1103355000 : Record 7009951);
    VAR
      rResWs@1000000000 : Record 7009951;
      w_total@1000000001 : Decimal;
      w_linea@1000000002 : Decimal;
      ventana@1000000003 : Dialog;
    BEGIN
      // comprobar_errores_transfer
      // +$010

      rPar.FINDFIRST;

      rDatosIns.FINDFIRST;

      CLEAR(rResWs);
      rResWs.COPY(par_res);

      //. Eliminar los mensajes de error de anteriores revisiones
      _BorrarErroresTransfer(rResWs);

      //. Revisar en busca de errores

      w_total := rResWs.COUNT;
      w_linea := 0;
      IF rResWs.FINDSET THEN
      BEGIN
        ventana.OPEN(Text157 +
                     '\' +
                     '#2####                #3####\' +
                     '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@');

        REPEAT
          w_linea := w_linea + 1;

          ventana.UPDATE(2, w_linea);
          ventana.UPDATE(3, w_total);
          ventana.UPDATE(1, ROUND((w_linea * 10000) / w_total, 1));

          _revisa_transfer(rResWs);

          rResWs.CALCFIELDS(rResWs.Errores);
          IF rResWs.Errores <> 0 THEN BEGIN
            rResWs.Status := rResWs.Status::Erronea;
          END ELSE BEGIN
            rResWs.Status := rResWs.Status::"No procesada";
          END;
          rResWs.MODIFY;
        UNTIL rResWs.NEXT = 0;
        ventana.CLOSE;
      END;
    END;

    LOCAL PROCEDURE _BorrarErroresTransfer@1000000016(VAR prRes@1100217000 : Record 7009951);
    VAR
      lrError@1100217004 : Record 7010083;
      lwVentana@1100217001 : Dialog;
      lwLinea@1100217002 : Integer;
      lwTotal@1100217003 : Integer;
    BEGIN
      // _BorrarErrores
      // +$010

      lwTotal := prRes.COUNT;
      lwLinea := 0;

      IF prRes.FINDSET THEN
      BEGIN
        lwVentana.OPEN(Text013 +
                     '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@');
        REPEAT
          lwLinea := lwLinea + 1;

          lwVentana.UPDATE(1, ROUND((lwLinea * 10000) / lwTotal, 1));

          lrError.RESET;
          lrError.SETRANGE("ID Fichero", prRes."File ID");
          lrError.SETRANGE("ID Linea"  , prRes.ID);
          IF lrError.FINDSET(TRUE) THEN
            lrError.DELETEALL;
        UNTIL prRes.NEXT = 0;
        lwVentana.CLOSE;
      END;
    END;

    LOCAL PROCEDURE _revisa_transfer@1000000015(par_res@1103355000 : Record 7009951);
    VAR
      rTO@1103355001 : Record 7009717;
      rResWS@1103355003 : Record 7009951;
      rConv@1000000001 : Record 7009725;
      lrHotel@1000000002 : Record 7009724;
      lrCabRsv@1000000003 : Record 7009741;
      lrRsv@1000000004 : Record 7009744;
      lrContrato@1000000000 : Record 7009788;
    BEGIN
      // _revisa_transfer
      // +$010

      // Comprobar el TourOperador
      IF NOT (rTO.GET(par_res.Touroperador)) THEN
        _inserta_error_transfer(par_res, STRSUBSTNO(Text017, par_res.Touroperador));

      // Comprobar el Booking number
      IF par_res."Booking number" = '' THEN
        _inserta_error_transfer(par_res, Text150);

      IF (par_res."Tipo Registro" <> par_res."Tipo Registro"::Borrado) THEN BEGIN
        // Comprobar el n£mero de personas
        IF (par_res.Adults + par_res.Children <= 0) THEN
          _inserta_error_transfer(par_res, Text155);

        // Comprobar el chanel id
        IF par_res."Chanel Id" = '' THEN
          _inserta_error_transfer(par_res, Text156);

        // Datos de llegada
        IF par_res."Arr Service Date" <> 0D THEN BEGIN
          IF par_res."Arr Destination" = '' THEN
            _inserta_error_transfer(par_res, STRSUBSTNO(Text066));

          IF par_res."Arr Airline" = '' THEN
            _inserta_error_transfer(par_res, STRSUBSTNO(Text063));

          IF par_res."Arr Flight Number" = '' THEN
            _inserta_error_transfer(par_res, STRSUBSTNO(Text166));

          //. Comprobar la conversion de hotel llegada
          IF par_res."Arr Hotel" <> '' THEN
            _ConversionHotel_transfer(rConv, par_res, 0);
            IF NOT lrHotel.GET(rConv."Hotel estancia") THEN
              _inserta_error_transfer(par_res, STRSUBSTNO(Text159, rConv."Hotel estancia"));

          // chequeamos contrato y precios llegada
          IF lrRsv.CheckContratoVenta(lrContrato, par_res.Touroperador, par_res."Arr Service Date", '', FALSE) THEN
          BEGIN
            IF NOT lrRsv.CheckPrecioVenta(lrContrato, FALSE, par_res."Arr Destination", rConv."Hotel estancia",
                                          par_res."Arr Service Date", par_res.Adults + par_res.Children,
                                          par_res."Arr Service Type", '', 0) THEN
              _inserta_error_transfer(par_res, STRSUBSTNO(Text170, lrContrato."N§ Contrato Venta"));

          END
          ELSE
            _inserta_error_transfer(par_res, STRSUBSTNO(Text169, par_res."Arr Service Date",par_res.Touroperador));
        END;

        // Datos de salida
        IF par_res."Dep Service Date" <> 0D THEN BEGIN
          IF par_res."Dep Origin" = '' THEN
            _inserta_error_transfer(par_res, STRSUBSTNO(Text066));

          IF par_res."Dep Airline" = '' THEN
            _inserta_error_transfer(par_res, STRSUBSTNO(Text063));

          IF par_res."Dep Flight Number" = '' THEN
            _inserta_error_transfer(par_res, STRSUBSTNO(Text166));

          //. Comprobar la conversion de hotel salida
          IF par_res."Dep Hotel" <> '' THEN
            _ConversionHotel_transfer(rConv, par_res, 1);
            IF NOT lrHotel.GET(rConv."Hotel estancia") THEN
              _inserta_error_transfer(par_res, STRSUBSTNO(Text159, rConv."Hotel estancia"));

          // chequeamos contrato y precios llegada
          IF lrRsv.CheckContratoVenta(lrContrato, par_res.Touroperador, par_res."Dep Service Date", '', FALSE) THEN
          BEGIN
            IF NOT lrRsv.CheckPrecioVenta(lrContrato, FALSE, par_res."Dep Origin", rConv."Hotel estancia",
                                          par_res."Dep Service Date", par_res.Adults + par_res.Children,
                                          par_res."Dep Service Type", '', 0) THEN
              _inserta_error_transfer(par_res, STRSUBSTNO(Text170, lrContrato."N§ Contrato Venta"));

          END
          ELSE
            _inserta_error_transfer(par_res, STRSUBSTNO(Text169, par_res."Dep Service Date", par_res.Touroperador));

        END;

        // Comprobar datos de la persona
        _repasa_paxes_transfer(par_res);
        // Comprobamos los vuelos
        _repasa_vuelos_transfer(par_res);
      END;

      // Si es nueva comprobamos que no se haya creado ya
      IF par_res."Tipo Registro" = par_res."Tipo Registro"::Alta THEN
      BEGIN
        rResWS.RESET;
        rResWS.SETRANGE (Touroperador    , par_res.Touroperador);
        rResWS.SETRANGE ("Booking number", par_res."Booking number");
        rResWS.SETRANGE ("Tipo Registro" , rResWS."Tipo Registro"::Alta);
        rResWS.SETFILTER(ID              , '<>%1', par_res.ID);
        IF rResWS.FINDFIRST THEN
          _inserta_error_transfer(par_res, STRSUBSTNO(Text160, par_res.Touroperador, par_res."Booking number", ''));
      END;

      // Si es borrado o modificaci¢n comprobamos que exista
      IF (par_res."Tipo Registro" = par_res."Tipo Registro"::Modificacion) OR
         (par_res."Tipo Registro" = par_res."Tipo Registro"::Borrado) THEN
      BEGIN
        lrCabRsv.RESET;
        //. 16.07.2015 Deshabilitado temporalmente en CUBA por peticion de SUNWING
        IF COMPANYNAME <> 'CUBA' THEN
          lrCabRsv.SETRANGE(TourOperador          , par_res.Touroperador);
        lrCabRsv.SETRANGE(Bono, par_res."Booking number");
        IF NOT lrCabRsv.FINDFIRST THEN
          _inserta_error_transfer(par_res, STRSUBSTNO(Text164, par_res.Touroperador, par_res."Booking number", ''));
      END;
    END;

    LOCAL PROCEDURE _repasa_paxes_transfer@1000000018(par_cab@1103355000 : Record 7009951);
    VAR
      lrPax@1103355001 : Record 7009952;
      lrConvTipoPer@1103355002 : Record 7009722;
      lrCabRsv@1103355003 : Record 7009741;
      lrPerRsv@1100217001 : Record 7009742;
      lrRsvTra@1100217003 : Record 7009744;
      lrAgr@1100217004 : Record 7009796;
    BEGIN
      // _repasa_paxes_transfer
      // +$010

      IF (par_cab."Tipo Registro" = par_cab."Tipo Registro"::Borrado) THEN
        EXIT;

      lrPax.RESET;
      lrPax.SETRANGE(lrPax."Reservation ID", par_cab.ID);
      IF lrPax.FINDSET THEN BEGIN
        REPEAT
          // Comprobamos tipo de persona
          CLEAR(lrConvTipoPer);
          IF NOT lrConvTipoPer.GET(par_cab.Touroperador, lrPax."Person type") THEN
            _inserta_error_transfer(par_cab, STRSUBSTNO(Text037,
                                              lrPax."Person type" , par_cab.Touroperador, lrPax.ID));

          // Comprobar que tiene nombre
          IF lrPax.Name = '' THEN
            _inserta_error_transfer(par_cab, STRSUBSTNO(Text038, lrPax.ID));

          //. Si es una cancelacion comprobamos que el pax existe en la reserva
          IF lrPax."Tipo Registro" = lrPax."Tipo Registro"::Borrado THEN
          BEGIN
            //. Primero comprobamos si tenemos la reserva en el sistema
            lrCabRsv.RESET;
            lrCabRsv.SETCURRENTKEY(TourOperador, Bono);
            //. 16.07.2015 Deshabilitado temporalmente en CUBA por peticion de SUNWING
            IF COMPANYNAME <> 'CUBA' THEN
              lrCabRsv.SETRANGE(TourOperador, par_cab.Touroperador);
            lrCabRsv.SETRANGE(Bono        , par_cab."Booking number");
            IF NOT lrCabRsv.FINDFIRST THEN
              _inserta_error_transfer(par_cab, STRSUBSTNO(Text030, par_cab.Touroperador, par_cab."Booking number",''))
            ELSE
            BEGIN
              lrPerRsv.RESET;
              lrPerRsv.SETRANGE(Delegacion  , lrCabRsv.Delegacion);
              lrPerRsv.SETRANGE("N§ Interno", lrCabRsv."N§ Interno");
              lrPerRsv.SETRANGE(lrPerRsv."N§ Periodo", par_cab.ID);
              IF NOT lrPerRsv.FINDFIRST THEN
                _inserta_error_transfer(par_cab, STRSUBSTNO(Text101,
                                                  '', par_cab.Touroperador, par_cab."Booking number"))
              ELSE
              BEGIN
                lrRsvTra.RESET;
                lrRsvTra.SETCURRENTKEY(Delegacion,
                                       "N§ Interno");
                lrRsvTra.SETRANGE (Delegacion          , lrPerRsv.Delegacion);
                lrRsvTra.SETRANGE ("N§ Interno"        , lrPerRsv."N§ Interno");
                lrRsvTra.SETRANGE ("N§ Periodo"        , lrPerRsv."N§ Periodo");
                lrRsvTra.SETFILTER("Agrupacion entrada", '<>0');
                IF lrRsvTra.FINDSET THEN
                BEGIN
                  REPEAT
                    IF (lrAgr.GET(lrRsvTra."Agrupacion entrada")) AND (lrAgr.Estado = lrAgr.Estado::Confirmado) THEN
                      _inserta_error_transfer(par_cab, STRSUBSTNO(Text035,
                                                        par_cab.Touroperador, par_cab."Booking number", ''));
                  UNTIL lrRsvTra.NEXT = 0;
                END;
                lrRsvTra.SETRANGE("Agrupacion entrada");
                lrRsvTra.SETFILTER("Agrupacion salida", '<>0');
                IF lrRsvTra.FINDSET THEN
                BEGIN
                  REPEAT
                    IF (lrAgr.GET(lrRsvTra."Agrupacion salida")) AND (lrAgr.Estado = lrAgr.Estado::Confirmado) THEN
                      _inserta_error_transfer(par_cab, STRSUBSTNO(Text033,
                                                        par_cab.Touroperador, par_cab."Booking number", ''));
                  UNTIL lrRsvTra.NEXT = 0;
                END;
              END;
            END;
          END;
        UNTIL lrPax.NEXT = 0;
      END
      ELSE
        _inserta_error_transfer(par_cab, Text041);
    END;

    LOCAL PROCEDURE _repasa_vuelos_transfer@1000000017(par_cab@1103355000 : Record 7009951);
    VAR
      rCom@1103355002 : Record 7009753;
      rAer@1103355003 : Record 7009704;
      rPlan@1103355004 : Record 7009754;
      lrPlanVue@1103355006 : Record 7009754;
    BEGIN
      // repasa_vuelos_transfer
      // +$010

      //. Comprobamos vuelo de llegada
      IF par_cab."Arr Service Date" <> 0D THEN BEGIN

        //. Comprobar si existe la compa¤ia
        IF par_cab."Arr Airline" <> '' THEN BEGIN
          IF NOT rCom.GET(par_cab."Arr Airline") THEN
            _inserta_error_transfer(par_cab, STRSUBSTNO(Text063, par_cab."Arr Airline"));
        END;

        // Comprobar si existe el aeropuerto de origen
        IF par_cab."Arr Destination" <> '' THEN BEGIN
          IF NOT rAer.GET(par_cab."Arr Destination") THEN
            _inserta_error_transfer(par_cab, STRSUBSTNO(Text066, par_cab."Arr Destination"));
        END;

        lrPlanVue.RESET;
        lrPlanVue.SETRANGE(Fecha   , par_cab."Arr Service Date");
        lrPlanVue.SETRANGE(Compa¤ia, par_cab."Arr Airline");
        lrPlanVue.SETRANGE(Vuelo   , par_cab."Arr Flight Number");
        lrPlanVue.SETRANGE("Entrada/Salida", lrPlanVue."Entrada/Salida"::Entrada);
        lrPlanVue.SETRANGE(Destino, par_cab."Arr Destination");
        IF NOT lrPlanVue.FINDFIRST THEN
          _inserta_error_transfer(par_cab, STRSUBSTNO(Text168, par_cab."Arr Service Date",par_cab."Arr Airline",
                                                par_cab."Arr Flight Number", par_cab."Arr Destination"));
      END;

      //. Comprobamos vuelo de salida
      IF par_cab."Dep Service Date" <> 0D THEN BEGIN

        //. Comprobar si existe la compa¤ia
        IF par_cab."Dep Airline" <> '' THEN BEGIN
          IF NOT rCom.GET(par_cab."Dep Airline") THEN
            _inserta_error_transfer(par_cab, STRSUBSTNO(Text063, par_cab."Dep Airline"));
        END;

        // Comprobar si existe el aeropuerto de origen
        IF par_cab."Dep Origin" <> '' THEN BEGIN
          IF NOT rAer.GET(par_cab."Dep Origin") THEN
            _inserta_error_transfer(par_cab, STRSUBSTNO(Text066, par_cab."Dep Origin"));
        END;

        lrPlanVue.RESET;
        lrPlanVue.SETRANGE(Fecha   , par_cab."Dep Service Date");
        lrPlanVue.SETRANGE(Compa¤ia, par_cab."Dep Airline");
        lrPlanVue.SETRANGE(Vuelo   , par_cab."Dep Flight Number");
        lrPlanVue.SETRANGE("Entrada/Salida", lrPlanVue."Entrada/Salida"::Salida);
        lrPlanVue.SETRANGE(Origen, par_cab."Dep Origin");
        IF NOT lrPlanVue.FINDFIRST THEN
          _inserta_error_transfer(par_cab, STRSUBSTNO(Text167, par_cab."Dep Service Date",par_cab."Dep Airline",
                                                par_cab."Dep Flight Number", par_cab."Dep Origin"));
      END;
    END;

    LOCAL PROCEDURE _inserta_error_transfer@1000000014(VAR par_res@1103355000 : Record 7009951;par_texto@1103355001 : Text[250]);
    VAR
      rError@1103355002 : Record 7010083;
    BEGIN
      // _inserta_error_transfer
      // +$010

      //. Verificamos si el texto ya existe para reducir el numero de lineas que se crean en errores

      rError.RESET;
      rError.SETRANGE("ID Fichero", par_res."File ID");
      rError.SETRANGE("ID Linea"  , par_res.ID);
      rError.SETRANGE(Texto       , par_texto);
      IF NOT rError.ISEMPTY THEN
        EXIT;

      CLEAR(rError);
      rError."ID Fichero" := par_res."File ID";
      rError."ID Linea"   := par_res.ID;
      rError.Texto        := par_texto;
      rError.INSERT(TRUE);
    END;

    PROCEDURE Procesar_reserva_transfer@1000000012(VAR par_res@1000000000 : Record 7009951);
    VAR
      lrRsvTO@1000000007 : Record 7009951;
      lrCabRsv@1000000001 : Record 7009741;
      rConv@1000000003 : Record 7009725;
      lrTO@1000000006 : Record 7009717;
    BEGIN
      // Procesamos los registros de reservas transfer
      // +$010

      // En primer lugar hay que revisar errores
      comprobar_errores_transfer(par_res);

      IF par_res.FINDSET THEN
      BEGIN
        REPEAT
          par_res.CALCFIELDS(par_res.Errores);
          IF par_res.Errores = 0 THEN
          BEGIN
            CASE par_res."Tipo Registro" OF
              par_res."Tipo Registro"::Alta:
              BEGIN
                _TratarAlta_Transfer(par_res);

                lrRsvTO := par_res;
                lrRsvTO.Status := par_res.Status::Procesada;
                lrRsvTO."Processed date" := CURRENTDATETIME;
                lrRsvTO."Processed user" := USERID;
                lrRsvTO.MODIFY;
              END;
              par_res."Tipo Registro"::Modificacion:
              BEGIN
                _TratarModificacion_Transfer(par_res);

                lrRsvTO := par_res;
                lrRsvTO.Status := par_res.Status::Procesada;
                lrRsvTO."Processed date" := CURRENTDATETIME;
                lrRsvTO."Processed user" := USERID;
                lrRsvTO.MODIFY;
              END;

              par_res."Tipo Registro"::Borrado:
              BEGIN
                _TratarBorrado_Transfer(par_res);

                lrRsvTO := par_res;
                lrRsvTO.Status := par_res.Status::Procesada;
                lrRsvTO."Processed date" := CURRENTDATETIME;
                lrRsvTO."Processed user" := USERID;
                lrRsvTO.MODIFY;
              END;
            END;
          END;
        UNTIL par_res.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _TratarAlta_Transfer@1000000011(VAR prCab@1100217000 : Record 7009951);
    VAR
      lrPerRsv@1100217004 : Record 7009742;
      lwNumCab@1100217002 : Integer;
      lwNumPer@1100217003 : Integer;
    BEGIN
      // _TratarAlta_Transfer
      // +$010

      //. Vamos a crear la reserva
      IF prCab.FINDSET THEN BEGIN
        REPEAT
          _CrearCabeceraRsv_Transfer(prCab);
        UNTIL prCab.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _CrearCabeceraRsv_Transfer@1000000010(prCab@1100217000 : Record 7009951) : Integer;
    VAR
      lrCabRsv@1100217001 : Record 7009741;
      lrAcoRsv@1100217002 : Record 7009748;
      lrComRsv@1000000001 : Record 7009762;
      lrWsPer@1000000000 : Record 7009952;
      cFunRes@1000000002 : Codeunit 7009703;
    BEGIN
      // _CrearCabeceraReserva_Transfer
      // +$010

      rParAg.RESET;
      rParAg.FINDFIRST;

      CLEAR(lrCabRsv);
      lrCabRsv.Delegacion := rParAg.Delegacion;
      lrCabRsv.INSERT(TRUE);

      lrCabRsv.VALIDATE("Modificacion importacion", TRUE);
      lrCabRsv.VALIDATE(TourOperador              , prCab.Touroperador);
      lrCabRsv.VALIDATE("TourOperador Venta"      , prCab.Touroperador);
      lrCabRsv.VALIDATE(Adultos                   , prCab.Adults);
      lrCabRsv.VALIDATE(Ni¤os                     , prCab.Children);
      lrCabRsv.VALIDATE(Bono                      , prCab."Booking number");
      lrCabRsv.VALIDATE("Fecha venta"             , prCab."Sale date");
      lrCabRsv.VALIDATE(Temporada                 , FORMAT(DATE2DMY(prCab."Sale date", 3)));
      lrCabRsv.VALIDATE("Canal venta"             , prCab."Chanel Id");
      lrCabRsv.VALIDATE("N§ Fichero"              , prCab."File ID");
      lrCabRsv.VALIDATE("Tipo importacion"        , lrCabRsv."Tipo importacion"::WS);
      lrCabRsv.VALIDATE("Tipo Operacion"          , lrCabRsv."Tipo Operacion"::Regular);
      lrCabRsv.VALIDATE("Modificacion importacion", FALSE);
      lrWsPer.RESET;
      lrWsPer.SETRANGE(lrWsPer."Reservation ID", prCab.ID);
      IF lrWsPer.FINDFIRST THEN
      BEGIN
        lrCabRsv.Nombre := lrWsPer.Name;
        lrCabRsv."Tipo Persona" := _ConversionTipoPersona(lrCabRsv.TourOperador, lrWsPer."Person type");
      END;
      lrCabRsv.MODIFY(TRUE);

      //. Con la creacion de la cabecera de reserva se crea un acompa¤ante de manera automatica
      //. lo borramos para no interferir con los acompa¤antes que se creen despues

      lrAcoRsv.RESET;
      lrAcoRsv.SETRANGE(Delegacion  , lrCabRsv.Delegacion);
      lrAcoRsv.SETRANGE("N§ Interno", lrCabRsv."N§ Interno");
      IF lrAcoRsv.FINDSET(TRUE) THEN
        lrAcoRsv.DELETEALL;

      //. Comentarios
      IF prCab.Comment <> '' THEN
      BEGIN
        lrComRsv.RESET;
        lrComRsv.Delegacion     := lrCabRsv.Delegacion;
        lrComRsv."N§ Interno"   := lrCabRsv."N§ Interno";
        lrComRsv."N§ Orden"     := 10;
        lrComRsv."Tipo Reserva" := lrComRsv."Tipo Reserva"::Cabecera;
        lrComRsv.Fecha          := TODAY;
        lrComRsv.Texto          := prCab.Comment;
        lrComRsv.INSERT;
      END;

      _CrearAcompa¤antesRsv_Transfer(prCab, lrCabRsv);

      _CrearPeriodoRsv_Transfer(lrCabRsv."N§ Interno", prCab);

      cFunRes.generar_cabecera(lrCabRsv, FALSE);

      EXIT(lrCabRsv."N§ Interno");
    END;

    LOCAL PROCEDURE _CrearPeriodoRsv_Transfer@1000000009(pwNumCab@1100217000 : Integer;prCabRes@1100217001 : Record 7009951) : Integer;
    VAR
      lrPerRsv@1100217002 : Record 7009742;
      lrAcoRsv@1100217003 : Record 7009748;
      lrPax@1100217004 : Record 7009952;
    BEGIN
      // _CrearPeriodoRsv_Transfer
      // +$010

      rPar.TESTFIELD(rPar."Paquete Solo Transfer");

      CLEAR(lrPerRsv);
      lrPerRsv.Delegacion                 := rParAg.Delegacion;
      lrPerRsv."N§ Interno"               := pwNumCab;
      lrPerRsv."N§ Periodo"               := prCabRes.ID;
      lrPerRsv.Bono                       := prCabRes."Booking number";
      lrPerRsv."Modificacion importacion" := TRUE;
      lrPerRsv.INSERT(TRUE);

      lrPerRsv.VALIDATE(Paquete             , rPar."Paquete Solo Transfer");
      lrPerRsv.VALIDATE("TourOperador Venta", prCabRes.Touroperador);
      lrPerRsv.VALIDATE("Tipo Reserva"      , lrPerRsv."Tipo Reserva"::Ok);
      IF prCabRes."Arr Hotel" <> '' THEN
        lrPerRsv.VALIDATE("Hotel TO"        , prCabRes."Arr Hotel")
      ELSE
        lrPerRsv.VALIDATE("Hotel TO"        , prCabRes."Dep Hotel");

      lrPerRsv."Fecha venta" := prCabRes."Sale date";
      lrPerRsv."Tipo operacion" := lrPerRsv."Tipo operacion"::Regular;

      IF prCabRes."Arr Service Date" <> 0D THEN
      BEGIN
        lrPerRsv."Compa¤ia entrada"     := prCabRes."Arr Airline";
        lrPerRsv."Vuelo entrada"        := prCabRes."Arr Flight Number";
        lrPerRsv."Terminal entrada"     := prCabRes."Arr Terminal";
        lrPerRsv."Hora entrada"         := prCabRes."Arr Arrival Time";
        lrPerRsv."IATA origen entrada"  := prCabRes."Arr Origin";
        lrPerRsv."IATA destino entrada" := prCabRes."Arr Destination";

        lrPerRsv.VALIDATE("Fecha entrada"            , prCabRes."Arr Service Date");
        lrPerRsv.VALIDATE("Servicio transfer entrada", prCabRes."Arr Service Type");
      END;

      IF prCabRes."Dep Service Date" <> 0D THEN
      BEGIN
        lrPerRsv."Compa¤ia salida"      := prCabRes."Dep Airline";
        lrPerRsv."Vuelo salida"         := prCabRes."Dep Flight Number";
        lrPerRsv."Terminal salida"      := prCabRes."Dep Terminal";
        lrPerRsv."Hora salida"          := prCabRes."Dep Arrival Time";
        lrPerRsv."IATA origen salida"   := prCabRes."Dep Origin";
        lrPerRsv."IATA destino salida"  := prCabRes."Dep Destination";

        lrPerRsv.VALIDATE("Fecha salida"    , prCabRes."Dep Service Date");
        lrPerRsv.VALIDATE("Servicio transfer salida", prCabRes."Dep Service Type");
      END;

      lrPerRsv."Modificacion importacion" := FALSE;
      lrPerRsv."N§ Fichero"               := prCabRes."File ID";
      lrPerRsv.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE _CrearAcompa¤antesRsv_Transfer@1000000019(prCabWS@1000000004 : Record 7009951;prCab@1000000001 : Record 7009741);
    VAR
      lrPerson@1000000000 : Record 7009952;
      lrAcoRsv@1100217004 : Record 7009748;
      vNumPerCre@1000000003 : Integer;
    BEGIN
      // _CrearAcompa¤anteReserva
      // +$010

      vNumPerCre := 0;

      lrPerson.RESET;
      lrPerson.SETRANGE("Reservation ID", prCabWS.ID);
      IF lrPerson.FINDSET THEN
      BEGIN
        REPEAT
          //.Crear el registro de acompa¤ante reserva
          CLEAR(lrAcoRsv);
          lrAcoRsv.VALIDATE(Delegacion        , rParAg.Delegacion);
          lrAcoRsv.VALIDATE("N§ Interno"      , prCab."N§ Interno");
          lrAcoRsv."Modificacion importacion" := TRUE;
          lrAcoRsv.INSERT(TRUE);

          lrAcoRsv.VALIDATE(Nombre            , lrPerson.Name);
          lrAcoRsv.VALIDATE("Tipo Persona"    , _ConversionTipoPersona(prCabWS.Touroperador, lrPerson."Person type"));

          //. Datos de vuelo llegada
          IF prCabWS."Arr Service Date" <> 0D THEN
          BEGIN
            lrAcoRsv."Fecha entrada"        := prCabWS."Arr Service Date";
            lrAcoRsv."Compa¤ia entrada"     := prCabWS."Arr Airline";
            lrAcoRsv."Vuelo entrada"        := prCabWS."Arr Flight Number";
            lrAcoRsv."Hora entrada"         := prCabWS."Arr Arrival Time";
            lrAcoRsv."IATA origen entrada"  := prCabWS."Arr Origin";
            lrAcoRsv."IATA destino entrada" := prCabWS."Arr Destination";
          END;

          //. Datos de vuelo salida
          IF prCabWS."Dep Service Date" <> 0D THEN
          BEGIN
            lrAcoRsv."Fecha salida"        := prCabWS."Dep Service Date";
            lrAcoRsv."Compa¤ia salida"     := prCabWS."Dep Airline";
            lrAcoRsv."Vuelo salida"        := prCabWS."Dep Flight Number";
            lrAcoRsv."Hora salida"         := prCabWS."Dep Arrival Time";
            lrAcoRsv."IATA origen salida"  := prCabWS."Dep Origin";
            lrAcoRsv."IATA destino salida" := prCabWS."Dep Destination";
          END;

          lrAcoRsv.VALIDATE(Touroperador , prCabWS.Touroperador);
          lrAcoRsv.VALIDATE(Bono         , prCabWS."Booking number");
          lrAcoRsv."Id Pax TO"           := lrPerson.ID;
          lrAcoRsv."Modificacion importacion" := FALSE;
          lrAcoRsv.MODIFY;
          vNumPerCre += 1;

        UNTIL lrPerson.NEXT = 0;
      END;

      // Comprobamos si el n£mero de personas detalladas es inferior al de la reserva y creamos el resto
      IF vNumPerCre < prCabWS.Adults + prCabWS.Children THEN
      BEGIN
        REPEAT
          //.Crear el registro de acompa¤ante reserva
          CLEAR(lrAcoRsv);
          lrAcoRsv.VALIDATE(Delegacion        , rParAg.Delegacion);
          lrAcoRsv.VALIDATE("N§ Interno"      , prCab."N§ Interno");
          lrAcoRsv."Modificacion importacion" := TRUE;
          lrAcoRsv.INSERT(TRUE);

          lrAcoRsv.VALIDATE(Nombre            , prCab.Nombre);
          lrAcoRsv.VALIDATE("Tipo Persona"    , prCab."Tipo Persona");

          //. Datos de vuelo llegada
          IF prCabWS."Arr Service Date" <> 0D THEN
          BEGIN
            lrAcoRsv."Fecha entrada"        := prCabWS."Arr Service Date";
            lrAcoRsv."Compa¤ia entrada"     := prCabWS."Arr Airline";
            lrAcoRsv."Vuelo entrada"        := prCabWS."Arr Flight Number";
            lrAcoRsv."Hora entrada"         := prCabWS."Arr Arrival Time";
            lrAcoRsv."IATA origen entrada"  := prCabWS."Arr Origin";
            lrAcoRsv."IATA destino entrada" := prCabWS."Arr Destination";
          END;

          //. Datos de vuelo salida
          IF prCabWS."Dep Service Date" <> 0D THEN BEGIN
            lrAcoRsv."Fecha salida"        := prCabWS."Dep Service Date";
            lrAcoRsv."Compa¤ia salida"     := prCabWS."Dep Airline";
            lrAcoRsv."Vuelo salida"        := prCabWS."Dep Flight Number";
            lrAcoRsv."Hora salida"         := prCabWS."Dep Arrival Time";
            lrAcoRsv."IATA origen salida"  := prCabWS."Dep Origin";
            lrAcoRsv."IATA destino salida" := prCabWS."Dep Destination";
          END;

          lrAcoRsv.VALIDATE(Touroperador , prCabWS.Touroperador);
          lrAcoRsv.VALIDATE(Bono         , prCabWS."Booking number");
          lrAcoRsv."Modificacion importacion" := FALSE;
          lrAcoRsv.MODIFY;

          vNumPerCre += 1;
        UNTIL vNumPerCre >= prCabWS.Adults + prCabWS.Children;
      END;
    END;

    LOCAL PROCEDURE _TratarModificacion_Transfer@1000000021(VAR prCab@1000000000 : Record 7009951);
    VAR
      lrCabRsv@1000000001 : Record 7009741;
      lrPerRsv@1100217001 : Record 7009742;
      lrConv@1100217002 : Record 7009725;
    BEGIN
      // _TratarModificaci¢n_Transfer

      rParAg.RESET;
      rParAg.FINDFIRST;

      // Buscamos la cabecera reserva
      lrCabRsv.RESET;
      lrCabRsv.SETRANGE(lrCabRsv.Delegacion , rParAg.Delegacion);
      lrCabRsv.SETRANGE(TourOperador        , prCab.Touroperador);
      lrCabRsv.SETRANGE(Bono                , prCab."Booking number");
      IF lrCabRsv.FINDFIRST THEN BEGIN
        //. Buscamos el periodo
        lrPerRsv.RESET;
        lrPerRsv.SETRANGE(lrPerRsv.Delegacion, lrCabRsv.Delegacion);
        lrPerRsv.SETRANGE(lrPerRsv."N§ Interno", lrCabRsv."N§ Interno");
        IF lrPerRsv.FINDFIRST THEN
          _ModificarPeriodo_Transfer(prCab, lrCabRsv, lrPerRsv);
      END;
    END;

    LOCAL PROCEDURE _ModificarPeriodo_Transfer@1100217025(prCab@1000000001 : Record 7009951;prCabRsv@1000000003 : Record 7009741;VAR prPerRsv@1100217002 : Record 7009742);
    VAR
      lrAcoRsv@1100217005 : Record 7009748;
      lwModificaPeriodo@1100217001 : Boolean;
      lwValidaEntrada@1100217003 : Boolean;
      lwValidaSalida@1100217004 : Boolean;
      lwHotel@1000000002 : Code[20];
    BEGIN
      // _ModificarPeriodo

      //. Modificamos la estancia encontrada
      lwModificaPeriodo := FALSE;
      lwValidaEntrada   := FALSE;
      lwValidaSalida    := FALSE;

      prPerRsv."Modificacion importacion" := TRUE;

      IF prCab."Arr Hotel" <> '' THEN
        lwHotel := prCab."Arr Hotel"
      ELSE
        lwHotel := prCab."Dep Hotel";

      IF prPerRsv."Hotel TO" <> lwHotel THEN
      BEGIN
        lwModificaPeriodo := TRUE;
        prPerRsv.VALIDATE("Hotel TO", lwHotel);
        prPerRsv.VALIDATE("Hotel reservado"   , lwHotel);
      END;

      IF prPerRsv."Fecha venta" <> prCab."Sale date" THEN
      BEGIN
        prPerRsv."Fecha venta" := prCab."Sale date";
        lwModificaPeriodo := TRUE;
      END;

      IF prCab."Arr Service Date" <> 0D THEN BEGIN
        IF (prPerRsv."Fecha entrada" <> prCab."Arr Service Date") THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          lwValidaEntrada   := TRUE;
          prPerRsv."Fecha entrada" := prCab."Arr Service Date";
        END;
        IF prPerRsv."Servicio transfer entrada" <> prCab."Arr Service Type" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv.VALIDATE("Servicio transfer entrada", prCab."Arr Service Type");
        END;
        IF prPerRsv."Compa¤ia entrada" <> prCab."Arr Airline" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv."Compa¤ia entrada"     := prCab."Arr Airline";
        END;
        IF prPerRsv."Vuelo entrada" <> prCab."Arr Flight Number" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv."Vuelo entrada"        := prCab."Arr Flight Number";
        END;
        IF prPerRsv."Terminal entrada" <> prCab."Arr Terminal" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv."Terminal entrada"     := prCab."Arr Terminal";
        END;
        IF prPerRsv."Hora entrada" <> prCab."Arr Arrival Time" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv."Hora entrada"         := prCab."Arr Arrival Time";
        END;
        IF prPerRsv."IATA destino entrada"  <> prCab."Arr Destination" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv."IATA destino entrada" := prCab."Arr Destination";
        END;
      END;

      IF prCab."Dep Service Date" <> 0D THEN BEGIN
        IF (prPerRsv."Fecha salida" <> prCab."Dep Service Date") THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          lwValidaSalida    := TRUE;
          prPerRsv."Fecha salida" := prCab."Dep Service Date";
        END;
        IF prPerRsv."Servicio transfer salida" <> prCab."Dep Service Type" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv.VALIDATE("Servicio transfer salida", prCab."Dep Service Type");
        END;
        IF prPerRsv."Compa¤ia salida" <> prCab."Dep Airline" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv."Compa¤ia salida"     := prCab."Dep Airline";
        END;
        IF prPerRsv."Vuelo salida" <> prCab."Dep Flight Number" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv."Vuelo salida"        := prCab."Dep Flight Number";
        END;
        IF prPerRsv."Terminal salida" <> prCab."Dep Terminal" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv."Terminal salida"     := prCab."Dep Terminal";
        END;
        IF prPerRsv."Hora salida" <> prCab."Dep Arrival Time" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv."Hora salida"         := prCab."Dep Arrival Time";
        END;
        IF prPerRsv."IATA origen salida"  <> prCab."Dep Origin" THEN
        BEGIN
          lwModificaPeriodo := TRUE;
          prPerRsv."IATA origen salida" := prCab."Dep Origin";
        END;
      END;

      IF lwModificaPeriodo THEN
      BEGIN
        IF lwValidaEntrada THEN
          prPerRsv.VALIDATE("Fecha entrada", prCab."Arr Service Date");
        IF lwValidaSalida THEN
          prPerRsv.VALIDATE("Fecha salida", prCab."Dep Service Date");

        prPerRsv.MODIFY(TRUE);
      END;

      //. Gestionamos la modificacion de personas
      _ModificarPersonas_Transfer(prCab, prCabRsv, prPerRsv);

      prPerRsv."Modificacion importacion" := FALSE;
      prPerRsv.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE _ModificarPersonas_Transfer@1100217029(prCab@1000000000 : Record 7009951;prCabRsv@1000000001 : Record 7009741;prPerRsv@1100217001 : Record 7009742);
    VAR
      lrPaxImp@1100217003 : Record 7009952;
    BEGIN
      // _ModificarPersonas

      lrPaxImp.RESET;
      lrPaxImp.SETRANGE(lrPaxImp."Reservation ID", prCab.ID);
      IF lrPaxImp.FINDSET THEN BEGIN
        REPEAT
          CASE lrPaxImp."Tipo Registro" OF
            lrPaxImp."Tipo Registro"::Alta: _NuevaPersona_Transfer(prPerRsv,lrPaxImp);

            lrPaxImp."Tipo Registro"::Borrado: _BorrarPersona_Transfer(prPerRsv, lrPaxImp);

            lrPaxImp."Tipo Registro"::Modificacion: _ModificarPersona_Transfer(prPerRsv, lrPaxImp);
          END;
        UNTIL lrPaxImp.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _NuevaPersona_Transfer@1100217031(prPerRsv@1000000000 : Record 7009742;prPaxImp@1000000001 : Record 7009952);
    VAR
      lrAcoRsv@1100217002 : Record 7009748;
      lrCabRsv@1100217003 : Record 7009741;
    BEGIN
      // _NuevaPersona

      //. Buscamos la cabecera de reserva
      lrCabRsv.GET(prPerRsv.Delegacion, prPerRsv."N§ Interno");

      //.Crear el registro de acompa¤ante reserva
      CLEAR(lrAcoRsv);
      lrAcoRsv.VALIDATE(Delegacion        , lrCabRsv.Delegacion);
      lrAcoRsv.VALIDATE("N§ Interno"      , lrCabRsv."N§ Interno");
      lrAcoRsv."Modificacion importacion" := TRUE;
      lrAcoRsv.INSERT(TRUE);

      lrAcoRsv.VALIDATE(Nombre            , prPaxImp.Name);
      lrAcoRsv.VALIDATE("Tipo Persona"    , _ConversionTipoPersona(lrCabRsv.TourOperador, prPaxImp."Person type"));

      //. Datos de vuelo llegada
      lrAcoRsv."Fecha entrada"        := prPerRsv."Fecha entrada";
      lrAcoRsv."Compa¤ia entrada"     := prPerRsv."Compa¤ia entrada";
      lrAcoRsv."Vuelo entrada"        := prPerRsv."Vuelo entrada";
      lrAcoRsv."Hora entrada"         := prPerRsv."Hora entrada";
      lrAcoRsv."IATA destino entrada" := prPerRsv."IATA destino entrada";

      //. Datos de vuelo salida
      lrAcoRsv."Fecha salida"        := prPerRsv."Fecha salida";
      lrAcoRsv."Compa¤ia salida"     := prPerRsv."Compa¤ia salida";
      lrAcoRsv."Vuelo salida"        := prPerRsv."Vuelo salida";
      lrAcoRsv."Hora salida"         := prPerRsv."Hora salida";
      lrAcoRsv."IATA origen salida"  :=prPerRsv."IATA origen salida";

      lrAcoRsv.VALIDATE(Touroperador , lrCabRsv.TourOperador);
      lrAcoRsv.VALIDATE(Bono         , lrCabRsv.Bono);
      lrAcoRsv."Id Pax TO"           := prPaxImp.ID;
      lrAcoRsv."Modificacion importacion" := FALSE;
      lrAcoRsv.MODIFY;
    END;

    LOCAL PROCEDURE _BorrarPersona_Transfer@1100217034(prPerRsv@1100217001 : Record 7009742;prPaxImp@1000000000 : Record 7009952);
    VAR
      lrCab@1100217005 : Record 7009741;
      lrAcoRsv@1100217002 : Record 7009748;
    BEGIN
      // _BorrarPersona

      lrAcoRsv.RESET;
      lrAcoRsv.SETRANGE(Delegacion  , prPerRsv.Delegacion);
      lrAcoRsv.SETRANGE("N§ Interno", prPerRsv."N§ Interno");
      lrAcoRsv.SETRANGE("Id Pax TO" , prPaxImp.ID);
      IF lrAcoRsv.FINDFIRST THEN
      BEGIN
        lrAcoRsv."Puede Borrar" := TRUE;
        lrAcoRsv.DELETE(TRUE);
      END;
    END;

    LOCAL PROCEDURE _ModificarPersona_Transfer@1100217039(prPerRsv@1100217001 : Record 7009742;prPaxImp@1000000000 : Record 7009952);
    VAR
      lrAcoRsv@1100217002 : Record 7009748;
    BEGIN
      // _ModificarPersona

      lrAcoRsv.RESET;
      lrAcoRsv.SETRANGE(Delegacion  , prPerRsv.Delegacion);
      lrAcoRsv.SETRANGE("N§ Interno", prPerRsv."N§ Interno");
      lrAcoRsv.SETRANGE("Id Pax TO" , prPaxImp.ID);
      IF NOT lrAcoRsv.FINDFIRST THEN
        EXIT;

      lrAcoRsv."Modificacion importacion" := TRUE;
      IF (lrAcoRsv."Tipo Persona" <> _ConversionTipoPersona(prPerRsv."TourOperador Venta", prPaxImp."Person type")) THEN
        lrAcoRsv.VALIDATE("Tipo Persona", _ConversionTipoPersona(prPerRsv."TourOperador Venta", prPaxImp."Person type"));

      IF (lrAcoRsv.Nombre <> prPaxImp.Name) THEN
        lrAcoRsv.VALIDATE(Nombre, prPaxImp.Name);

      //. Datos de vuelo llegada
      lrAcoRsv."Fecha entrada"        := prPerRsv."Fecha entrada";
      lrAcoRsv."Compa¤ia entrada"     := prPerRsv."Compa¤ia entrada";
      lrAcoRsv."Vuelo entrada"        := prPerRsv."Vuelo entrada";
      lrAcoRsv."Hora entrada"         := prPerRsv."Hora entrada";
      lrAcoRsv."IATA destino entrada" := prPerRsv."IATA destino entrada";

      //. Datos de vuelo salida
      lrAcoRsv."Fecha salida"        := prPerRsv."Fecha salida";
      lrAcoRsv."Compa¤ia salida"     := prPerRsv."Compa¤ia salida";
      lrAcoRsv."Vuelo salida"        := prPerRsv."Vuelo salida";
      lrAcoRsv."Hora salida"         := prPerRsv."Hora salida";
      lrAcoRsv."IATA origen salida"  :=prPerRsv."IATA origen salida";

      lrAcoRsv."Modificacion importacion" := FALSE;
      lrAcoRsv.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE _TratarBorrado_Transfer@1000000008(prCab@1100217000 : Record 7009951);
    VAR
      lrPerRsv@1000000002 : Record 7009742;
      lrCabRsv@1000000001 : Record 7009741;
    BEGIN
      // _TratarBorrado

      rParAg.RESET;
      rParAg.FINDFIRST;

      // Buscamos la cabecera reserva
      lrCabRsv.RESET;
      lrCabRsv.SETRANGE(lrCabRsv.Delegacion , rParAg.Delegacion);
      lrCabRsv.SETRANGE(TourOperador        , prCab.Touroperador);
      lrCabRsv.SETRANGE(Bono                , prCab."Booking number");
      IF lrCabRsv.FINDFIRST THEN
        lrCabRsv.DELETE(TRUE);
    END;

    LOCAL PROCEDURE _ConversionHotel_transfer@1000000020(VAR prConv@1100217001 : Record 7009725;prCab@1100217000 : Record 7009951;pTipo@1000000000 : 'Llegada,Salida') : Code[20];
    VAR
      lvHot@1000000001 : Code[20];
    BEGIN
      // _ConversionHotel_transfer
      // +$010

      IF pTipo = pTipo::Llegada THEN
        lvHot := prCab."Arr Hotel"
      ELSE
        lvHot := prCab."Dep Hotel";

      CLEAR(prConv);
      prConv.SETRANGE(TourOperador, prCab.Touroperador);
      prConv.SETRANGE("Touroperador venta", prCab.Touroperador);
      prConv.SETRANGE("Hotel TO"          , lvHot);
      IF (NOT prConv.FINDFIRST) OR
         (prConv."Hotel estancia" = '') THEN
      BEGIN
        prConv.SETRANGE("Touroperador venta", '');
        IF NOT prConv.FINDFIRST THEN
        BEGIN
          _inserta_error_transfer(prCab, STRSUBSTNO(Text056, lvHot, prCab.Touroperador));
        END;
      END;
    END;

    LOCAL PROCEDURE _ConversionTipoPersona@8(par_touroperador@1103355000 : Code[10];par_persona@1103355001 : Code[10]) : Code[10];
    VAR
      lrConv@1103355002 : Record 7009722;
    BEGIN
      // _ConversionTipoPersona
      // +$010

      CLEAR(lrConv);
      lrConv.SETRANGE(TourOperador     , par_touroperador);
      lrConv.SETRANGE("Tipo Persona TO", par_persona);
      lrConv.FINDFIRST;

      EXIT(lrConv."Tipo Persona");
    END;

    BEGIN
    {
      $001 AJS 31012013 Nueva funcion para crear los vuelos que no existan, si el vuelo existe con hora diferente
                        mostraremos un error

      $002 AJS 31012013 Comprobamos que el paquete tenga algun producto asociado

      $003 AJS 14032013 Nueva funcion para ver si el producto que estamos importando se solapa con algun periodo
                        procesado anteriormente

      $004 AJS 20032013 Nueva funcion para crear un temporal que hace un foto de como estan los periodos actualmente
                        y aplica las cancelaciones que vienen en el fichero para de esta manera evitar errores falsos
                        de solapamiento

      $005 AJS 14062013 En algunos casos el codigo de hotel se utiliza para indicar que estamos realizando una
                        actualizacion de la informacion de vuelo sin tocar la informacion de estancias

      $006 AJS 30092013 CNT-OC-13024, Todos los clientes ser n tratados como SOLO TRANSFER, excepto los de SOLO HOTEL

      $007 AJS 15012015 Utilizar la funcion de conversion touroperador de la propia tabla

      $008 AJS 26032015 Modifico la funcion Repasa_vuelos para que no se creen los vuelos 000 y 111 porque son vuelos
                        falsos que se utilizan de relleno

      $009 AJS 29052015 Modifico la funcion _revisa_excursion para que no deje pasar excursiones con multiturno sin turno asignado

      $010 ARM 05062015 CNT-OC-14122 A¤adidas funciones Importaci¢n reservas transfer  ttoo

      $011 AJS 08072015 Se elimina definitivamente la tabla Link reserva web (7009818)

      $012 AJS 15072015 Modificar la funcion _revisa_excursiones para corregir el problema de deteccion de dos altas

      $013 AJS 21072015 Modifico la funcion _revisa_excursion para que no busque recogida si no tiene turno

      $014 AJS 21072015 Modifico la funcion Procesar_reserva_excursion para no marcar como Reserva online

      $015 AJS 23072015 Si no hay fecha de servicio en _revisa_excursion no podemos comprobar Turnos
    }
    END.
  }
}
