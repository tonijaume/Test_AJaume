OBJECT Codeunit 448 Job Queue Dispacher
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=VAR
            JobQueueSetup@1000 : Record 470;
          BEGIN
            IF ISCLEAR(NavTimer) THEN
              CREATE(NavTimer);
            NavTimer.Interval := 2000;
            NavTimer.Enabled := TRUE;
            InsertJobQueueSession;
            LastCleanupTime := CURRENTDATETIME;
          END;

  }
  CODE
  {
    VAR
      JobQueueProcess@1002 : Record 471;
      NavTimer@1000 : Automation "{3B311C81-140E-11D5-8B18-00D0590B4EC5} 1.0:{3B311C92-140E-11D5-8B18-00D0590B4EC5}:Unknown Automation Server.Unknown Class" WITHEVENTS;
      SessionID@1001 : Integer;
      LastCleanupTime@1003 : DateTime;

    LOCAL PROCEDURE HandleRequest@6();
    VAR
      JobQueueSetup@1004 : Record 470;
      JobQueueEntry@1000 : Record 472;
      JobQueueResponse@1001 : Record 473;
      JobLogEntryNo@1002 : Integer;
      WasSuccess@1003 : Boolean;
      ThisSessionIsActive@1005 : Boolean;
      MoreRequests@1006 : Boolean;
    BEGIN
      JobQueueSetup.GET;
      IF NOT JobQueueSetup."Job Queue Active" THEN
        EXIT;

      NavTimer.Enabled := FALSE;
      ThisSessionIsActive := UpdateJobQueueSession(JobQueueEntry,FALSE);
      COMMIT;
      IF ThisSessionIsActive THEN
        MoreRequests := GetNextRequest(JobQueueEntry);  // locks table

      WHILE ThisSessionIsActive AND MoreRequests DO BEGIN
        JobLogEntryNo := InsertLogEntry(JobQueueEntry);
        ThisSessionIsActive := UpdateJobQueueSession(JobQueueEntry,TRUE);
        COMMIT;
        WasSuccess := CODEUNIT.RUN(CODEUNIT::"Job Queue Start Codeunit",JobQueueEntry);
        IF WasSuccess THEN BEGIN
          IF JobQueueEntry."Recurring Job" THEN BEGIN
            JobQueueEntry."No. of Attempts to Run" := 0;
            JobQueueEntry.Status := JobQueueEntry.Status::Ready;
            IF NOT JobQueueEntry.MODIFY THEN
              JobQueueEntry.INSERT;
          END;
        END ELSE BEGIN
          IF JobQueueEntry."Maximum No. of Attempts to Run" > JobQueueEntry."No. of Attempts to Run" THEN BEGIN
            JobQueueEntry."No. of Attempts to Run" := JobQueueEntry."No. of Attempts to Run" + 1;
            JobQueueEntry.Status := JobQueueEntry.Status::Ready;
            IF NOT JobQueueEntry.INSERT THEN
              JobQueueEntry.MODIFY;
           END;
        END;
        InsertResponse(JobQueueEntry,JobQueueResponse,WasSuccess);
        UpdateLogEntry(JobLogEntryNo,WasSuccess);
        CLEARLASTERROR;
        ThisSessionIsActive := UpdateJobQueueSession(JobQueueEntry,FALSE);
        COMMIT;
        IF ThisSessionIsActive THEN
          MoreRequests := GetNextRequest(JobQueueEntry);  // locks table
      END;
      COMMIT;
      CleanUpJobQueue;
      COMMIT;

      NavTimer.Enabled := TRUE;
    END;

    LOCAL PROCEDURE GetNextRequest@5(VAR JobQueueEntry@1000 : Record 472) : Boolean;
    VAR
      Found@1001 : Boolean;
    BEGIN
      JobQueueEntry.LOCKTABLE;
      JobQueueEntry.SETFILTER("Expiration Date/Time",'>%1|%2',CURRENTDATETIME,CREATEDATETIME(0D,0T));
      JobQueueEntry.SETFILTER("Earliest Start Date/Time",'<=%1',CURRENTDATETIME);
      IF JobQueueProcess."Maximum Job Queue Priority" <> 0 THEN
        JobQueueEntry.SETRANGE(Priority,JobQueueProcess."Minimum Job Queue Priority",JobQueueProcess."Maximum Job Queue Priority")
      ELSE
        IF JobQueueProcess."Minimum Job Queue Priority" <> 0 THEN
          JobQueueEntry.SETFILTER(Priority,'>=%1',JobQueueProcess."Maximum Job Queue Priority")
        ELSE
          JobQueueEntry.SETRANGE(Priority);
      JobQueueEntry.SETRANGE(Status,JobQueueEntry.Status::Ready);
      JobQueueEntry.SETCURRENTKEY(Priority);
      Found := JobQueueEntry.FINDFIRST;
      IF Found THEN BEGIN
        JobQueueEntry.CALCFIELDS(XML);
        IF JobQueueEntry."Recurring Job" THEN BEGIN
          JobQueueEntry."Earliest Start Date/Time" := CalcNextRunTime(JobQueueEntry);
          JobQueueEntry.Status := JobQueueEntry.Status::"In Process";
          JobQueueEntry.MODIFY;
        END ELSE
          JobQueueEntry.DELETE;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE InsertLogEntry@7(VAR JobQueueEntry@1000 : Record 472) : Integer;
    VAR
      JobQueueLogEntry@1001 : Record 474;
    BEGIN
      JobQueueLogEntry.INIT;
      JobQueueLogEntry.ID := JobQueueEntry.ID;
      JobQueueLogEntry."User ID" := JobQueueEntry."User ID";
      JobQueueLogEntry."Start Date/Time" := CURRENTDATETIME;
      JobQueueLogEntry."Object Type to Run" := JobQueueEntry."Object Type to Run";
      JobQueueLogEntry."Object ID to Run" :=  JobQueueEntry."Object ID to Run";
      JobQueueLogEntry.INSERT(TRUE);
      EXIT(JobQueueLogEntry."Entry No.");
    END;

    LOCAL PROCEDURE UpdateLogEntry@8(LogEntryNo@1000 : Integer;WasSuccess@1002 : Boolean);
    VAR
      JobQueueLogEntry@1003 : Record 474;
    BEGIN
      JobQueueLogEntry.GET(LogEntryNo);
      JobQueueLogEntry."End Date/Time" := CURRENTDATETIME;
      IF WasSuccess THEN
        JobQueueLogEntry.Status := JobQueueLogEntry.Status::Success
      ELSE BEGIN
        JobQueueLogEntry.Status := JobQueueLogEntry.Status::Error;
        JobQueueLogEntry.SetErrorMessage(COPYSTR(GETLASTERRORTEXT,1,1000));
      END;
      JobQueueLogEntry.MODIFY;
    END;

    LOCAL PROCEDURE InsertResponse@9(VAR JobQueueEntry@1000 : Record 472;VAR JobQueueResponse@1001 : Record 473;WasSuccess@1002 : Boolean);
    BEGIN
      JobQueueResponse.INIT;
      JobQueueResponse.ID := JobQueueEntry.ID;
      JobQueueResponse."User ID" := JobQueueEntry."User ID";
      JobQueueResponse.XML := JobQueueEntry.XML;
      JobQueueResponse."Creation Date/Time" := CURRENTDATETIME;
      IF WasSuccess THEN
        JobQueueResponse.Status := JobQueueResponse.Status::Success
      ELSE BEGIN
        JobQueueResponse.Status := JobQueueResponse.Status::Error;
        JobQueueResponse.SetErrorMessage(COPYSTR(GETLASTERRORTEXT,1,1000));
      END;
      IF NOT JobQueueResponse.INSERT THEN
        JobQueueResponse.MODIFY;
    END;

    LOCAL PROCEDURE CalcNextRunTime@1(VAR JobQueueEntry@1000 : Record 472) : DateTime;
    VAR
      NewRunTime@1001 : Time;
      NewRunDateTime@1002 : DateTime;
      RunOnDate@1003 : ARRAY [7] OF Boolean;
      CurrWeekDay@1005 : Integer;
      NoOfDays@1007 : Integer;
      Found@1006 : Boolean;
    BEGIN
      RunOnDate[7] := JobQueueEntry."Run on Sundays";
      RunOnDate[1] := JobQueueEntry."Run on Mondays";
      RunOnDate[2] := JobQueueEntry."Run on Tuesdays";
      RunOnDate[3] := JobQueueEntry."Run on Wednesdays";
      RunOnDate[4] := JobQueueEntry."Run on Thursdays";
      RunOnDate[5] := JobQueueEntry."Run on Fridays";
      RunOnDate[6] := JobQueueEntry."Run on Saturdays";

      IF JobQueueEntry."No. of Minutes between Runs" > 0 THEN BEGIN
        NewRunTime := TIME + 60000 * JobQueueEntry."No. of Minutes between Runs";
        IF (JobQueueEntry."Ending Time" = 0T) AND (JobQueueEntry."No. of Minutes between Runs" * 60000 > 235900T - TIME) OR
          (JobQueueEntry."Ending Time" <> 0T) AND
            (JobQueueEntry."No. of Minutes between Runs" * 60000 > JobQueueEntry."Ending Time" - TIME)
        THEN BEGIN
          NewRunTime := JobQueueEntry."Starting Time";
          NoOfDays := 1;
        END;
      END ELSE BEGIN
        NewRunTime := DT2TIME(JobQueueEntry."Earliest Start Date/Time");
        NoOfDays := 1;
      END;                                                   ;

      CurrWeekDay := DATE2DWY(TODAY,1);
      Found := RunOnDate[(CurrWeekDay - 1 + NoOfDays) MOD 7 + 1];
      WHILE NOT Found AND (NoOfDays < 7) DO BEGIN
        NoOfDays := NoOfDays + 1;
        Found := RunOnDate[(CurrWeekDay - 1 + NoOfDays) MOD 7 + 1];
      END;
      IF NOT Found THEN
        NoOfDays := 10000;

      NewRunDateTime := CREATEDATETIME(TODAY + NoOfDays,NewRunTime);
      EXIT(NewRunDateTime);
    END;

    LOCAL PROCEDURE InsertJobQueueSession@2();
    VAR
      Session@1002 : Record 2000000009;
      RecRef@1000 : RecordRef;
      FieldRef@1001 : FieldRef;
      Found@1004 : Boolean;
      i@1003 : Integer;
    BEGIN
      RecRef.OPEN(DATABASE::Session);
      WHILE (i < RecRef.FIELDCOUNT) AND NOT Found DO BEGIN
        i := i + 1;
        FieldRef := RecRef.FIELDINDEX(i);
        Found := FieldRef.NAME = Session.FIELDNAME("My Session");
      END;
      IF NOT Found THEN
        EXIT;
      FieldRef.SETRANGE(TRUE);
      IF RecRef.FINDFIRST THEN BEGIN
        FieldRef := RecRef.FIELDINDEX(1); // sessionID
        SessionID := FieldRef.VALUE;
        IF JobQueueProcess.GET(SessionID) THEN
          JobQueueProcess.DELETE;
        JobQueueProcess.INIT;
        JobQueueProcess."Session ID" := SessionID;
        JobQueueProcess."User ID" := USERID;
        JobQueueProcess."Last Job Processed On" := CURRENTDATETIME;
        JobQueueProcess.Active := TRUE;
        JobQueueProcess.INSERT;
      END;
      COMMIT;
    END;

    PROCEDURE UpdateJobQueueSession@13(VAR JobQueueEntry@1000 : Record 472;IsStartOfJob@1001 : Boolean) : Boolean;
    BEGIN
      IF IsStartOfJob OR (CURRENTDATETIME > JobQueueProcess."Last Job Processed On" + 10000) THEN BEGIN
        IF NOT JobQueueProcess.GET(SessionID) THEN
          JobQueueProcess.INSERT;
        JobQueueProcess."Last Job Processed On" := CURRENTDATETIME;
        IF IsStartOfJob THEN BEGIN
          JobQueueProcess."Object Type Running" := JobQueueEntry."Object Type to Run";
          JobQueueProcess."Object ID Running" := JobQueueEntry."Object ID to Run";
        END ELSE BEGIN
          JobQueueProcess."Object Type Running" := 0;
          JobQueueProcess."Object ID Running" := 0;
        END;
        JobQueueProcess.MODIFY;
      END;
      EXIT(JobQueueProcess.Active);
    END;

    LOCAL PROCEDURE CleanUpJobQueue@3();
    VAR
      JobQueueProcess2@1000 : Record 471;
      JobQueueResponse2@1001 : Record 473;
      StartDateTime@1002 : DateTime;
    BEGIN
      IF LastCleanupTime + 60000 > CURRENTDATETIME THEN
        EXIT;
      LastCleanupTime := CURRENTDATETIME;

      JobQueueProcess2.SETFILTER("Session ID",'<>%1',SessionID);
      IF NOT JobQueueProcess2.ISEMPTY THEN BEGIN
        JobQueueProcess2.LOCKTABLE;
        IF JobQueueProcess2.FINDSET THEN
          REPEAT
            IF NOT JobQueueProcess2.ProcessIsActive THEN
              JobQueueProcess2.DELETE;
          UNTIL JobQueueProcess2.NEXT = 0;
      END;

      StartDateTime := CREATEDATETIME(TODAY - 365,0T);
      JobQueueResponse2.SETCURRENTKEY("Expiration Date/Time");
      JobQueueResponse2.SETRANGE("Expiration Date/Time",StartDateTime,CURRENTDATETIME);
      IF NOT JobQueueResponse2.ISEMPTY THEN BEGIN
        JobQueueResponse2.LOCKTABLE;
        JobQueueResponse2.DELETEALL;
      END;
    END;

    EVENT NavTimer@1000::Timer@1(Milliseconds@1000 : Integer);
    BEGIN
      HandleRequest;
    END;

    EVENT NavTimer@1000::TimerError@2(ErrorString@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    END.
  }
}
