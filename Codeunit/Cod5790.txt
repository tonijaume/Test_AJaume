OBJECT Codeunit 5790 Available to Promise
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OldRecordExists@1000 : Boolean;
      SourceType@1001 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry,Prod. Order Line,Prod. Order Component,Planning Line,Planning Component,Transfer,Service Order';
      SourceSubtype@1002 : Integer;
      SourceID@1003 : Code[20];
      SourceLineNo@1004 : Integer;
      ReqShipDate@1006 : Date;
      RecalcOrder@1005 : Boolean;

    PROCEDURE QtyAvailabletoPromise@1(VAR Item@1000 : Record 27;VAR GrossRequirement@1001 : Decimal;VAR ScheduledReceipt@1002 : Decimal;AvailabilityDate@1003 : Date;PeriodType@1004 : 'Day,Week,Month,Quarter,Year';LookaheadDateFormula@1005 : DateFormula) : Decimal;
    BEGIN
      Item.CALCFIELDS(Inventory,"Reserved Qty. on Inventory");
      ScheduledReceipt := CalcScheduledReceipt(Item);
      GrossRequirement := CalcGrossRequirement(Item);

      IF FORMAT(LookaheadDateFormula) <> '' THEN BEGIN
        GrossRequirement :=
          GrossRequirement +
          CalculateLookahead(
            Item,PeriodType,
            AvailabilityDate + 1,
            AdjustedEndingDate(CALCDATE(LookaheadDateFormula,AvailabilityDate),PeriodType));
      END;
      EXIT(Item.Inventory - Item."Reserved Qty. on Inventory" + ScheduledReceipt - GrossRequirement);
    END;

    PROCEDURE CalcGrossRequirement@4(VAR Item@1000 : Record 27) : Decimal;
    BEGIN
      Item.CALCFIELDS("Scheduled Need (Qty.)",
        "Planning Issues (Qty.)",
        "Qty. on Sales Order",
        "Qty. on Service Order",
        "Trans. Ord. Shipment (Qty.)");

      EXIT(Item."Scheduled Need (Qty.)" +
        Item."Planning Issues (Qty.)" +
        Item.PlanningTransferShptQty +
        Item."Qty. on Sales Order" +
        Item."Qty. on Service Order" +
        Item."Trans. Ord. Shipment (Qty.)" +
        Item.CalcPurchReturn -
        CalcOutboundReservations(Item));
    END;

    PROCEDURE CalcOutboundReservations@12(VAR Item@1000 : Record 27) : Decimal;
    BEGIN
      WITH Item DO BEGIN
        CALCFIELDS("Res. Qty. on Prod. Order Comp.",
          "Reserved Qty. on Sales Orders",
          "Res. Qty. on Service Orders",
          "Res. Qty. on Outbound Transfer");

        EXIT("Res. Qty. on Prod. Order Comp." +
          "Reserved Qty. on Sales Orders" +
          "Res. Qty. on Service Orders" +
          "Res. Qty. on Outbound Transfer" +
          CalcResvQtyOnPurchReturn);
      END;
    END;

    PROCEDURE CalcScheduledReceipt@8(VAR Item@1000 : Record 27) : Decimal;
    BEGIN
      Item.CALCFIELDS("Scheduled Receipt (Qty.)",
        "Purch. Req. Receipt (Qty.)",
        "Qty. on Purch. Order",
        "Trans. Ord. Receipt (Qty.)",
        "Qty. in Transit");

      EXIT(Item."Scheduled Receipt (Qty.)" +
        Item."Purch. Req. Receipt (Qty.)" +
        Item."Qty. on Purch. Order" +
        Item."Trans. Ord. Receipt (Qty.)" +
        Item."Qty. in Transit" +
        Item.CalcSalesReturn -
        CalcInboundReservations(Item));
    END;

    PROCEDURE CalcInboundReservations@13(VAR Item@1000 : Record 27) : Decimal;
    BEGIN
      WITH Item DO BEGIN
        CALCFIELDS("Reserved Qty. on Prod. Order",
          "Res. Qty. on Req. Line",
          "Reserved Qty. on Purch. Orders",
          "Res. Qty. on Inbound Transfer");

        EXIT("Reserved Qty. on Prod. Order" +
          "Res. Qty. on Req. Line" +
          "Reserved Qty. on Purch. Orders" +
          "Res. Qty. on Inbound Transfer" +
          CalcResvQtyOnSalesReturn);
      END;
    END;

    PROCEDURE EarliestAvailabilityDate@5(VAR Item@1000 : Record 27;NeededQty@1001 : Decimal;StartDate@1002 : Date;ExcludeQty@1003 : Decimal;ExcludeOnDate@1004 : Date;VAR AvailableQty@1005 : Decimal;PeriodType@1006 : 'Day,Week,Month,Quarter,Year';LookaheadDateFormula@1007 : DateFormula) : Date;
    VAR
      Date@1008 : Record 2000000007;
      Item2@1009 : Record 27;
      AvailabilityAtDate@1021 : TEMPORARY Record 390;
      QtyIsAvailable@1011 : Boolean;
      ExactDateFound@1013 : Boolean;
      ScheduledReceipt@1014 : Decimal;
      GrossRequirement@1015 : Decimal;
      AvailableQtyPeriod@1016 : Decimal;
      AvailableDate@1017 : Date;
      PeriodStart@1018 : Date;
      PeriodEnd@1019 : Date;
    BEGIN
      AvailableQty := 0;
      IF FORMAT(LookaheadDateFormula) = '' THEN
        EXIT;

      Item.COPYFILTER("Date Filter",Item2."Date Filter");
      Item.SETRANGE("Date Filter",0D,AdjustedEndingDate(CALCDATE(LookaheadDateFormula,StartDate),PeriodType));
      CalculateAvailability(Item,AvailabilityAtDate);
      UpdateScheduledReceipt(AvailabilityAtDate,ExcludeOnDate,ExcludeQty);
      CalculateAvailabilityByPeriod(AvailabilityAtDate,PeriodType);

      Date.SETRANGE("Period Type",PeriodType);
      Date.SETRANGE("Period Start",0D,StartDate);
      IF Date.FINDLAST THEN BEGIN
        AvailabilityAtDate.SETRANGE("Period Start",0D,Date."Period Start");
        IF AvailabilityAtDate.FINDSET THEN
          REPEAT
            ScheduledReceipt += AvailabilityAtDate."Scheduled Receipt";
            GrossRequirement += AvailabilityAtDate."Gross Requirement";
          UNTIL AvailabilityAtDate.NEXT = 0;
        AvailableQty := Item.Inventory - Item."Reserved Qty. on Inventory" + ScheduledReceipt - GrossRequirement;
        IF AvailableQty >= NeededQty THEN BEGIN
          QtyIsAvailable := TRUE;
          AvailableDate := Date."Period End";
          PeriodStart := StartDate;
          PeriodEnd := Date."Period End";
        END;
      END;

      AvailabilityAtDate.SETRANGE("Period Start",StartDate + 1,CALCDATE(LookaheadDateFormula,StartDate));
      AvailabilityAtDate."Period Start" := 0D;
      WHILE AvailabilityAtDate.NEXT <> 0 DO BEGIN
        AvailableQtyPeriod := AvailabilityAtDate."Scheduled Receipt" - AvailabilityAtDate."Gross Requirement";
        IF AvailabilityAtDate."Scheduled Receipt" <= AvailabilityAtDate."Gross Requirement" THEN BEGIN
          AvailableQty := AvailableQty + AvailableQtyPeriod;
          AvailableDate := AvailabilityAtDate."Period End";
          IF AvailableQty < NeededQty THEN
            QtyIsAvailable := FALSE;
        END ELSE
          IF QtyIsAvailable THEN
            AvailabilityAtDate.FINDLAST
          ELSE BEGIN
            AvailableQty := AvailableQty + AvailableQtyPeriod;
            IF AvailableQty >= NeededQty THEN BEGIN
              QtyIsAvailable := TRUE;
              AvailableDate := AvailabilityAtDate."Period End";
              PeriodStart := AvailabilityAtDate."Period Start";
              PeriodEnd := AvailabilityAtDate."Period End";
              AvailabilityAtDate.FINDLAST;
            END;
          END;
      END;

      IF QtyIsAvailable THEN BEGIN
        IF PeriodType <> PeriodType::Day THEN BEGIN
          Item.SETRANGE("Date Filter",PeriodStart,PeriodEnd);
          CalculateAvailability(Item,AvailabilityAtDate);
          IF (ExcludeOnDate >= PeriodStart) AND (ExcludeOnDate <= PeriodEnd) THEN
            UpdateScheduledReceipt(AvailabilityAtDate,ExcludeOnDate,ExcludeQty);
        END;
        AvailabilityAtDate.SETRANGE("Period Start",PeriodStart,PeriodEnd);
        IF AvailabilityAtDate.FIND('+') THEN
          REPEAT
            IF (AvailableQty - AvailabilityAtDate."Scheduled Receipt") < NeededQty THEN BEGIN
              ExactDateFound := TRUE;
              AvailableDate := AvailabilityAtDate."Period Start";
            END ELSE
              AvailableQty := AvailableQty - AvailabilityAtDate."Scheduled Receipt";
          UNTIL (AvailabilityAtDate.NEXT(-1) = 0) OR ExactDateFound;
        IF NOT ExactDateFound THEN BEGIN
          AvailableDate := PeriodStart;
          IF AvailabilityAtDate.FIND THEN
            AvailableQty := AvailableQty + AvailabilityAtDate."Scheduled Receipt";
        END;
      END ELSE
        AvailableDate := 0D;

      Item2.COPYFILTER("Date Filter",Item."Date Filter");
      EXIT(AvailableDate);
    END;

    LOCAL PROCEDURE CalculateLookahead@3(VAR Item@1000 : Record 27;PeriodType@1001 : 'Day,Week,Month,Quarter,Year';StartDate@1002 : Date;EndDate@1003 : Date) : Decimal;
    VAR
      Item2@1004 : Record 27;
      AvailabilityAtDate@1009 : TEMPORARY Record 390;
      LookaheadQty@1008 : Decimal;
      Stop@1005 : Boolean;
    BEGIN
      Item.COPYFILTER("Date Filter",Item2."Date Filter");
      Item.SETRANGE("Date Filter",StartDate,EndDate);
      CalculateAvailability(Item,AvailabilityAtDate);
      CalculateAvailabilityByPeriod(AvailabilityAtDate,PeriodType);
      AvailabilityAtDate.SETRANGE("Period Start",0D,StartDate - 1);
      IF AvailabilityAtDate.FINDSET THEN
        REPEAT
          LookaheadQty += AvailabilityAtDate."Gross Requirement" - AvailabilityAtDate."Scheduled Receipt";
        UNTIL AvailabilityAtDate.NEXT = 0;

      AvailabilityAtDate.SETRANGE("Period Start",StartDate,EndDate);
      IF AvailabilityAtDate.FINDSET THEN
        REPEAT
          IF AvailabilityAtDate."Gross Requirement" > AvailabilityAtDate."Scheduled Receipt" THEN
            LookaheadQty += AvailabilityAtDate."Gross Requirement" - AvailabilityAtDate."Scheduled Receipt"
          ELSE
            IF AvailabilityAtDate."Gross Requirement" < AvailabilityAtDate."Scheduled Receipt" THEN
              Stop := TRUE;
        UNTIL (AvailabilityAtDate.NEXT = 0) OR Stop;

      IF LookaheadQty < 0 THEN
        LookaheadQty := 0;

      Item2.COPYFILTER("Date Filter",Item."Date Filter");
      EXIT(LookaheadQty);
    END;

    PROCEDURE CalculateAvailability@6(VAR Item@1002 : Record 27;VAR AvailabilityAtDate@1000 : Record 390);
    VAR
      ProdOrderLine@1001 : Record 5406;
      ProdOrderComp@1009 : Record 5407;
      ReservationEntry@1004 : Record 337;
      ReqLine@1005 : Record 246;
      PurchLine@1007 : Record 39;
      SalesLine@1010 : Record 37;
      TransferLine@1008 : Record 5741;
      ServiceInvLine@1011 : Record 5902;
      PlanningComp@1012 : Record 99000829;
      Item2@1006 : Record 27;
      Update@1013 : 'No,Supply,Demand';
    BEGIN
      Item2.COPYFILTERS(Item);
      Item.SETRANGE("Bin Filter");
      Item.SETRANGE("Global Dimension 1 Filter");
      Item.SETRANGE("Global Dimension 2 Filter");

      Item.CALCFIELDS(Inventory,"Reserved Qty. on Inventory");

      AvailabilityAtDate.RESET;
      AvailabilityAtDate.DELETEALL;
      OldRecordExists := FALSE;

      // Scheduled Receipt (Qty.)
      WITH ProdOrderLine DO BEGIN
        SETCURRENTKEY("Item No.","Variant Code","Location Code",Status,"Due Date");
        SETFILTER(Status,'%1|%2|%3',Status::Planned,Status::"Firm Planned",Status::Released);
        SETRANGE("Item No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            UpdateScheduledReceipt(AvailabilityAtDate,"Due Date","Remaining Qty. (Base)");
          UNTIL NEXT = 0;
        RESET;
      END;

      // Purch. Req. Receipt (Qty.)
      WITH ReqLine DO BEGIN
        SETCURRENTKEY(Type,"No.");
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
        SETRANGE("Planning Line Origin","Planning Line Origin"::" ");
        IF FINDSET THEN
          REPEAT
            UpdateScheduledReceipt(AvailabilityAtDate,"Due Date","Quantity (Base)");
          UNTIL NEXT = 0;
        RESET;
      END;

      // Qty. on Purch. Order
      WITH PurchLine DO BEGIN
        SETCURRENTKEY(Type,"No.");
        SETFILTER("Document Type",'%1|%2',"Document Type"::Order,"Document Type"::"Return Order");
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
        SETFILTER("Expected Receipt Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            IF "Document Type" = "Document Type"::"Return Order" THEN
              UpdateGrossRequirement(AvailabilityAtDate,"Expected Receipt Date","Outstanding Qty. (Base)")
            ELSE
              UpdateScheduledReceipt(AvailabilityAtDate,"Expected Receipt Date","Outstanding Qty. (Base)");
          UNTIL NEXT = 0;
        RESET;
      END;

      // Trans. Ord. Receipt (Qty.)
      WITH TransferLine DO BEGIN
        SETCURRENTKEY("Item No.");
        SETRANGE("Item No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Transfer-to Code",Item.GETFILTER("Location Filter"));
        SETRANGE("Derived From Line No.",0);
        SETFILTER("Receipt Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            UpdateScheduledReceipt(AvailabilityAtDate,"Receipt Date",
              "Outstanding Qty. (Base)" + "Qty. Shipped (Base)" - "Qty. Received (Base)");
          UNTIL NEXT = 0;
        RESET;
      END;

      // Reservations (Scheduled Receipt)
      WITH ReservationEntry DO BEGIN
        SETCURRENTKEY(
          "Item No.","Variant Code","Location Code","Reservation Status","Shipment Date","Expected Receipt Date");
        SETRANGE("Item No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETRANGE("Reservation Status","Reservation Status"::Reservation);
        SETFILTER("Expected Receipt Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            Update := Update::No;
            CASE "Source Type" OF
              DATABASE::"Prod. Order Line":
                IF "Source Subtype" IN [1..3] THEN
                  Update := Update::Supply;
              DATABASE::"Requisition Line":
                IF "Source Subtype" = 0 THEN
                  Update := Update::Supply;
              DATABASE::"Purchase Line":
                IF "Source Subtype" = 1 THEN
                  Update := Update::Supply
                ELSE
                  IF "Source Subtype" = 5 THEN
                     Update := Update::Demand;
              DATABASE::"Transfer Line":
                IF "Source Subtype" = 0 THEN
                  Update := Update::Supply;
            END;
            CASE Update OF
              Update::Supply:
                UpdateScheduledReceipt(AvailabilityAtDate,"Expected Receipt Date",-"Quantity (Base)");
              Update::Demand:
                UpdateGrossRequirement(AvailabilityAtDate,"Expected Receipt Date","Quantity (Base)");
            END;
          UNTIL NEXT = 0;
        RESET;
      END;

      // Scheduled Need (Qty.)
      WITH ProdOrderComp DO BEGIN
        SETCURRENTKEY("Item No.","Variant Code","Location Code",Status);
        SETFILTER(Status,'%1|%2|%3',Status::Planned,Status::"Firm Planned",Status::Released);
        SETRANGE("Item No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            UpdateGrossRequirement(AvailabilityAtDate,"Due Date","Remaining Qty. (Base)");
          UNTIL NEXT = 0;
        RESET;
      END;

      // Planning Issues (Qty.)
      WITH PlanningComp DO BEGIN
        SETCURRENTKEY("Item No.");
        SETRANGE("Item No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETRANGE("Planning Line Origin","Planning Line Origin"::" ");
        SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            UpdateGrossRequirement(AvailabilityAtDate,"Due Date","Expected Quantity (Base)");
          UNTIL NEXT = 0;
        RESET;
      END;

      // Qty. on Sales Order
      WITH SalesLine DO BEGIN
        SETCURRENTKEY(Type,"No.");
        SETFILTER("Document Type",'%1|%2',"Document Type"::Order,"Document Type"::"Return Order");
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
        SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            IF "Document Type" = "Document Type"::"Return Order" THEN
              UpdateScheduledReceipt(AvailabilityAtDate,"Shipment Date","Outstanding Qty. (Base)")
            ELSE BEGIN
              IF RecalcOrder AND
                ("Document Type" = SourceSubtype) AND
                ("Document No." = SourceID) AND
                (CalcReqShipDate(SalesLine) > ReqShipDate) THEN
                UpdateGrossRequirement(AvailabilityAtDate,"Shipment Date",0)
              ELSE
                UpdateGrossRequirement(AvailabilityAtDate,"Shipment Date","Outstanding Qty. (Base)");
            END;
          UNTIL NEXT = 0;
        RESET;
      END;

      // Qty. on Service Order
      WITH ServiceInvLine DO BEGIN
        SETCURRENTKEY(Type,"No.");
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Posting Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            UpdateGrossRequirement(AvailabilityAtDate,"Posting Date","Quantity (Base)");
          UNTIL NEXT = 0;
        RESET;
      END;

      // Trans. Ord. Shipment (Qty.)
      WITH TransferLine DO BEGIN
        SETCURRENTKEY("Item No.");
        SETRANGE("Item No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Transfer-from Code",Item.GETFILTER("Location Filter"));
        SETRANGE("Derived From Line No.",0);
        SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            UpdateGrossRequirement(AvailabilityAtDate,"Shipment Date","Outstanding Qty. (Base)");
          UNTIL NEXT = 0;
        RESET;
      END;

      // Reservations (Gross Requirement)
      WITH ReservationEntry DO BEGIN
        SETCURRENTKEY(
          "Item No.","Variant Code","Location Code","Reservation Status","Shipment Date","Expected Receipt Date");
        SETRANGE("Item No.",Item."No.");
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETRANGE("Reservation Status","Reservation Status"::Reservation);
        SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
        IF FINDSET THEN
          REPEAT
            Update := Update::No;
            CASE "Source Type" OF
              DATABASE::"Prod. Order Component":
                IF "Source Subtype" IN [1..3] THEN
                  Update := Update::Demand;
              DATABASE::"Sales Line":
                IF "Source Subtype" = 1 THEN
                  Update := Update::Demand
                ELSE
                  IF "Source Subtype" = 5 THEN
                    Update := Update::Supply;
              DATABASE::"Service Line":
                  Update := Update::Demand;
              DATABASE::"Transfer Line":
                IF "Source Subtype" = 0 THEN
                  Update := Update::Demand;
            END;
            CASE Update OF
              Update::Supply:
                UpdateScheduledReceipt(AvailabilityAtDate,"Shipment Date",-"Quantity (Base)");
              Update::Demand:
                UpdateGrossRequirement(AvailabilityAtDate,"Shipment Date","Quantity (Base)");
            END;
          UNTIL NEXT = 0;
        RESET;
      END;

      Item.COPYFILTERS(Item2);
    END;

    LOCAL PROCEDURE UpdateScheduledReceipt@17(VAR AvailabilityAtDate@1000 : Record 390;ReceiptDate@1002 : Date;ScheduledReceipt@1003 : Decimal);
    BEGIN
      UpdateAvailability(AvailabilityAtDate,ReceiptDate,ScheduledReceipt,0);
    END;

    LOCAL PROCEDURE UpdateGrossRequirement@16(VAR AvailabilityAtDate@1000 : Record 390;ShipmentDate@1002 : Date;GrossRequirement@1004 : Decimal);
    BEGIN
      UpdateAvailability(AvailabilityAtDate,ShipmentDate,0,GrossRequirement);
    END;

    LOCAL PROCEDURE UpdateAvailability@7(VAR AvailabilityAtDate@1000 : Record 390;Date@1002 : Date;ScheduledReceipt@1003 : Decimal;GrossRequirement@1004 : Decimal);
    VAR
      RecordExists@1005 : Boolean;
    BEGIN
      IF (ScheduledReceipt = 0) AND (GrossRequirement = 0) THEN
        EXIT;

      IF OldRecordExists AND (Date = AvailabilityAtDate."Period Start") THEN
        RecordExists := TRUE
      ELSE BEGIN
        AvailabilityAtDate."Period Start" := Date;
        IF AvailabilityAtDate.FIND THEN
          RecordExists := TRUE
        ELSE BEGIN
          AvailabilityAtDate.INIT;
          AvailabilityAtDate."Period End" := Date;
        END;
      END;

      AvailabilityAtDate."Scheduled Receipt" += ScheduledReceipt;
      AvailabilityAtDate."Gross Requirement" += GrossRequirement;

      IF RecordExists THEN
        AvailabilityAtDate.MODIFY
      ELSE
        AvailabilityAtDate.INSERT;

      OldRecordExists := TRUE;
    END;

    PROCEDURE CalculateAvailabilityByPeriod@11(VAR AvailabilityAtDate@1000 : Record 390;PeriodType@1001 : 'Day,Week,Month,Quarter,Year');
    VAR
      AvailabilityInPeriod@1003 : Record 390;
      Date@1002 : Record 2000000007;
    BEGIN
      IF PeriodType = PeriodType::Day THEN
        EXIT;

      IF AvailabilityAtDate.FINDSET THEN
        REPEAT
          Date.SETRANGE("Period Type",PeriodType);
          Date."Period Type" := PeriodType;
          Date."Period Start" := AvailabilityAtDate."Period Start";
          IF Date.FIND('=<') THEN BEGIN
            AvailabilityAtDate.SETRANGE("Period Start",Date."Period Start",Date."Period End");
            AvailabilityInPeriod.INIT;
            AvailabilityInPeriod."Period Start" := Date."Period Start";
            AvailabilityInPeriod."Period End" := NORMALDATE(Date."Period End");
            REPEAT
              AvailabilityInPeriod."Scheduled Receipt" += AvailabilityAtDate."Scheduled Receipt";
              AvailabilityInPeriod."Gross Requirement" += AvailabilityAtDate."Gross Requirement";
              AvailabilityAtDate.DELETE;
            UNTIL AvailabilityAtDate.NEXT = 0;
            AvailabilityAtDate.SETRANGE("Period Start");
            AvailabilityAtDate := AvailabilityInPeriod;
            AvailabilityAtDate.INSERT;
          END;
        UNTIL AvailabilityAtDate.NEXT = 0;
    END;

    LOCAL PROCEDURE AdjustedEndingDate@2(PeriodEnd@1000 : Date;PeriodType@1001 : 'Day,Week,Month,Quarter,Year') : Date;
    VAR
      Date@1002 : Record 2000000007;
    BEGIN
      IF PeriodType = PeriodType::Day THEN
        EXIT(PeriodEnd);

      Date.SETRANGE("Period Type",PeriodType);
      Date.SETRANGE("Period Start",0D,PeriodEnd);
      Date.FINDLAST;
      EXIT(NORMALDATE(Date."Period End"));
    END;

    PROCEDURE SetSource@9(OrderPromisingLine@1000 : Record 99000880;CalcOrder@1001 : Boolean);
    BEGIN
      SourceType := OrderPromisingLine."Source Type";
      SourceSubtype := OrderPromisingLine."Source Subtype";
      SourceID := OrderPromisingLine."Source ID";
      SourceLineNo := OrderPromisingLine."Source Line No.";
      ReqShipDate := OrderPromisingLine."Requested Shipment Date";
      RecalcOrder := CalcOrder;
    END;

    PROCEDURE CalcReqShipDate@10(SalesLine@1000 : Record 37) : Date;
    BEGIN
      IF SalesLine."Requested Delivery Date" <> 0D THEN BEGIN
        SalesLine.SuspendStatusCheck(TRUE);
        SalesLine.SetHideValidationDialog(TRUE);
        SalesLine.VALIDATE("Requested Delivery Date",SalesLine."Requested Delivery Date");
      END;
      EXIT(SalesLine."Shipment Date");
    END;

    BEGIN
    END.
  }
}
