OBJECT Codeunit 6817 EP Format Functions
{
  OBJECT-PROPERTIES
  {
    Date=12/01/06;
    Time=12:00:00;
    Version List=NAVW14.00.02;
  }
  PROPERTIES
  {
    Permissions=TableData 6224=rimd,
                TableData 6206=rimd,
                TableData 6207=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE OptionToText@6(VarOption@1000 : Option) : Text[250];
    BEGIN
      EXIT(FORMAT(VarOption,0,2));
    END;

    PROCEDURE IntegerToText@9(VarInteger@1000 : Integer) : Text[250];
    BEGIN
      EXIT(FORMAT(VarInteger,0,2));
    END;

    PROCEDURE BooleanToText@14(VarBoolean@1000 : Boolean) : Text[1];
    BEGIN
      EXIT(FORMAT(VarBoolean,1,2));
    END;

    PROCEDURE TextToInteger@2(VarText@1000 : Text[250]) : Integer;
    VAR
      VarInteger@1001 : Integer;
    BEGIN
      IF VarText = '' THEN
        EXIT(0);
      EVALUATE(VarInteger,VarText);
      EXIT(VarInteger);
    END;

    PROCEDURE TextToDecimal@3(VarText@1000 : Text[250]) : Decimal;
    VAR
      VarDecimal@1001 : Decimal;
      BaseVarDecimal@1002 : Decimal;
      DecimalSymbol@1003 : Text[1];
    BEGIN
      IF VarText = '' THEN
        EXIT(0);
      BaseVarDecimal := 1.2;
      DecimalSymbol := COPYSTR(FORMAT(BaseVarDecimal),2,1);
      EVALUATE(VarDecimal,CONVERTSTR(VarText,'.',DecimalSymbol));
      EXIT(VarDecimal);
    END;

    PROCEDURE TextToBoolean@15(VarText@1000 : Text[1]) : Boolean;
    VAR
      VarBoolean@1001 : Boolean;
    BEGIN
      IF NOT EVALUATE(VarBoolean,VarText) THEN
        VarBoolean := FALSE;
      EXIT(VarBoolean);
    END;

    PROCEDURE TextToDate@16(VarText@1000 : Text[10]) : Date;
    VAR
      Day@1001 : Integer;
      Month@1002 : Integer;
      Year@1003 : Integer;
      SepPos@1000000000 : Integer;
    BEGIN
      IF VarText = '' THEN
        EXIT(0D);

      // Year
      SepPos := STRPOS(VarText,'-');
      Year := TextToInteger(COPYSTR(VarText,1,(SepPos - 1)));

      // Month
      VarText := COPYSTR(VarText,(SepPos + 1));
      SepPos := STRPOS(VarText,'-');
      Month := TextToInteger(COPYSTR(VarText,1,(SepPos - 1)));

      // Day
      VarText := COPYSTR(VarText,(SepPos + 1));
      Day := TextToInteger(COPYSTR(VarText,1));

      // Convert To Date
      EXIT(DMY2DATE(Day,Month,Year));
    END;

    PROCEDURE TextToTime@19(VarText@1000 : Text[8]) : Time;
    VAR
      VarTime@1001 : Time;
      BaseVarTime@1002 : Time;
      TimeSeparator@1003 : Text[1];
    BEGIN
      BaseVarTime := 111111T;
      TimeSeparator := COPYSTR(FORMAT(BaseVarTime),3,1);
      EVALUATE(VarTime,CONVERTSTR(VarText,':',TimeSeparator));
      EXIT(VarTime);
    END;

    PROCEDURE LeftPadCode@36(VarCode@1000 : Code[250];MaxLength@1001 : Integer;FillChar@1002 : Text[1]) : Text[250];
    VAR
      Length@1003 : Integer;
    BEGIN
      Length := MaxLength - STRLEN(VarCode);
      IF Length <= 0 THEN
        EXIT(VarCode);
      EXIT(PADSTR('',Length,FillChar) + VarCode);
    END;

    PROCEDURE GetValueFromFieldRef@1000000025(TableNo@1000000000 : Integer;FieldNo@1000000003 : Integer;VAR MyFieldRef@1000000002 : FieldRef) ReturnText : Text[1024];
    VAR
      EPSupportFunctions@1000 : Codeunit 6815;
      FieldType@1000000001 : 'TableFilter,RecordID,Text,Date,Time,DateFormula,Decimal,Binary,BLOB,Boolean,Integer,Code,Option,BigInteger,Duration,GUID,DateTime';
      DecimalSymbol@1000000004 : Text[1];
    BEGIN
      EPSupportFunctions.GetFieldType(TableNo,FieldNo,FieldType);

      CASE FieldType OF
        FieldType::TableFilter:
          BEGIN
          END;
        FieldType::RecordID:
          BEGIN
          END;
        FieldType::Text:
          BEGIN
            ReturnText := MyFieldRef.VALUE;
          END;
        FieldType::Date:
          BEGIN
            ReturnText := FORMAT(MyFieldRef.VALUE,0,'<Year4>-<Month,2>-<Day,2>');
          END;
        FieldType::Time:
          BEGIN
            ReturnText := FORMAT(MyFieldRef.VALUE,0,'<Hours24,2>:<Minutes,2>:<Seconds,2>');
            IF ReturnText = '' THEN
              ReturnText := '00:00:00';
          END;
        FieldType::DateFormula:
          BEGIN
          END;
        FieldType::Decimal:
          BEGIN
            DecimalSymbol := '.';
            ReturnText := FORMAT(MyFieldRef.VALUE,0,'<Sign><Integer><Decimals><Comma,' + DecimalSymbol + '>');
          END;
        FieldType::Binary:
          BEGIN
          END;
        FieldType::BLOB:
          BEGIN
          END;
        FieldType::Boolean:
          BEGIN
            ReturnText := FORMAT(MyFieldRef.VALUE,1,2);
          END;
        FieldType::Integer:
          BEGIN
            ReturnText := FORMAT(MyFieldRef.VALUE,0,2);
          END;
        FieldType::Code:
          BEGIN
            ReturnText := MyFieldRef.VALUE;
          END;
        FieldType::Option:
          BEGIN
            ReturnText := FORMAT(MyFieldRef.VALUE,0,2);
          END;
        FieldType::BigInteger:
          BEGIN
          END;
        FieldType::Duration:
          BEGIN
          END;
        FieldType::GUID:
          BEGIN
          END;
        FieldType::DateTime:
          BEGIN
          END;
      END;
    END;

    PROCEDURE GetValueFromBLOB@34(VAR RecordRef@1011 : RecordRef;FieldNumber@1000 : Integer;ScaleRatio@1021 : Integer;NodeName@1022 : Text[30];VAR PicNode@1020 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode") ReturnCode : Integer;
    VAR
      GLAccount@1017 : Record 15;
      Customer@1016 : Record 18;
      Vendor@1015 : Record 23;
      Item@1014 : Record 27;
      CompanyInfo@1013 : Record 79;
      Resource@1012 : Record 156;
      Job@1010 : Record 167;
      BankAccount@1009 : Record 270;
      Contact@1008 : Record 5050;
      Employee@1007 : Record 5200;
      FixedAsset@1005 : Record 5600;
      InboundProdCatHdr@1004 : Record 99008504;
      InboundProdCatLine@1002 : Record 99008505;
      OutboundProdCatLine@1001 : Record 99008510;
      OutStream@1023 : OutStream;
      InStream@1019 : InStream;
      Picture@1018 : Automation "{B808034C-CC1D-48D5-85DA-8DE3E7FFE3DF} 1.0:{2A9E1FF0-9041-4A67-85CE-777731B76D3F}:Unknown Automation Server.Unknown Class";
      File@1006 : File;
      TmpFileName@1003 : Text[1024];
    BEGIN
      ReturnCode := 0;
      TmpFileName := '';

      File.CREATETEMPFILE;
      TmpFileName := File.NAME;
      File.CLOSE;

      CASE RecordRef.NUMBER OF
        15:
          BEGIN
            IF FieldNumber <> 46 THEN
              EXIT(55);
            GLAccount.SETPOSITION(RecordRef.GETPOSITION);
            GLAccount.CALCFIELDS(Picture);
            IF NOT GLAccount.Picture.HASVALUE THEN
              EXIT(60);
            GLAccount.Picture.CREATEINSTREAM(InStream);
          END;
        18:
          BEGIN
            IF FieldNumber <> 89 THEN
              EXIT(55);
            Customer.SETPOSITION(RecordRef.GETPOSITION);
            Customer.CALCFIELDS(Picture);
            IF NOT Customer.Picture.HASVALUE THEN
              EXIT(60);
            Customer.Picture.CREATEINSTREAM(InStream);
          END;
        23:
          BEGIN
            IF FieldNumber <> 89 THEN
              EXIT(55);
            Vendor.SETPOSITION(RecordRef.GETPOSITION);
            Vendor.CALCFIELDS(Picture);
            IF NOT Vendor.Picture.HASVALUE THEN
              EXIT(60);
            Vendor.Picture.CREATEINSTREAM(InStream);
          END;
        27:
          BEGIN
            IF FieldNumber <> 92 THEN
              EXIT(55);
            Item.SETPOSITION(RecordRef.GETPOSITION);
            Item.CALCFIELDS(Picture);
            IF NOT Item.Picture.HASVALUE THEN
              EXIT(60);
            Item.Picture.CREATEINSTREAM(InStream);
          END;
        79:
          BEGIN
            IF FieldNumber <> 29 THEN
              EXIT(55);
            CompanyInfo.SETPOSITION(RecordRef.GETPOSITION);
            CompanyInfo.CALCFIELDS(Picture);
            IF NOT CompanyInfo.Picture.HASVALUE THEN
              EXIT(60);
            CompanyInfo.Picture.CREATEINSTREAM(InStream);
          END;
        156:
          BEGIN
            IF FieldNumber <> 52 THEN
              EXIT(55);
            Resource.SETPOSITION(RecordRef.GETPOSITION);
            Resource.CALCFIELDS(Picture);
            IF NOT Resource.Picture.HASVALUE THEN
              EXIT(60);
            Resource.Picture.CREATEINSTREAM(InStream);
          END;
        167:
          BEGIN
            IF FieldNumber <> 57 THEN
              EXIT(55);
            Job.SETPOSITION(RecordRef.GETPOSITION);
            Job.CALCFIELDS(Picture);
            IF NOT Job.Picture.HASVALUE THEN
              EXIT(60);
            Job.Picture.CREATEINSTREAM(InStream);
          END;
        270:
          BEGIN
            IF FieldNumber <> 89 THEN
              EXIT(55);
            BankAccount.SETPOSITION(RecordRef.GETPOSITION);
            BankAccount.CALCFIELDS(Picture);
            IF NOT BankAccount.Picture.HASVALUE THEN
              EXIT(60);
            BankAccount.Picture.CREATEINSTREAM(InStream);
          END;
        5050:
          BEGIN
            IF FieldNumber <> 89 THEN
              EXIT(55);
            Contact.SETPOSITION(RecordRef.GETPOSITION);
            Contact.CALCFIELDS(Picture);
            IF NOT Contact.Picture.HASVALUE THEN
              EXIT(60);
            Contact.Picture.CREATEINSTREAM(InStream);
          END;
        5200:
          BEGIN
            IF FieldNumber <> 19 THEN
              EXIT(55);
            Employee.SETPOSITION(RecordRef.GETPOSITION);
            Employee.CALCFIELDS(Picture);
            IF NOT Employee.Picture.HASVALUE THEN
              EXIT(60);
            Employee.Picture.CREATEINSTREAM(InStream);
          END;
        5600:
          BEGIN
            IF FieldNumber <> 22 THEN
              EXIT(55);
            FixedAsset.SETPOSITION(RecordRef.GETPOSITION);
            FixedAsset.CALCFIELDS(Picture);
            IF NOT FixedAsset.Picture.HASVALUE THEN
              EXIT(60);
            FixedAsset.Picture.CREATEINSTREAM(InStream);
          END;
        99008504:
          BEGIN
            IF FieldNumber <> 89 THEN
              EXIT(55);
            InboundProdCatHdr.SETPOSITION(RecordRef.GETPOSITION);
            InboundProdCatHdr.CALCFIELDS(Picture);
            IF NOT InboundProdCatHdr.Picture.HASVALUE THEN
              EXIT(60);
            InboundProdCatHdr.Picture.CREATEINSTREAM(InStream);
          END;
        99008505:
          BEGIN
            IF FieldNumber <> 92 THEN
              EXIT(55);
            InboundProdCatLine.SETPOSITION(RecordRef.GETPOSITION);
            InboundProdCatLine.CALCFIELDS(Picture);
            IF NOT InboundProdCatLine.Picture.HASVALUE THEN
              EXIT(60);
            InboundProdCatLine.Picture.CREATEINSTREAM(InStream);
          END;
        99008510:
          BEGIN
            IF FieldNumber <> 92 THEN
              EXIT(55);
            OutboundProdCatLine.SETPOSITION(RecordRef.GETPOSITION);
            OutboundProdCatLine.CALCFIELDS(Picture);
            IF NOT OutboundProdCatLine.Picture.HASVALUE THEN
              EXIT(60);
            OutboundProdCatLine.Picture.CREATEINSTREAM(InStream);
          END;
        ELSE
          EXIT(50);
      END;

      File.WRITEMODE(TRUE);
      File.TEXTMODE(FALSE);
      File.CREATE(TmpFileName);
      File.CREATEOUTSTREAM(OutStream);
      COPYSTREAM(OutStream,InStream);
      File.CLOSE;

      IF ScaleRatio = 0 THEN
        ScaleRatio := 100;

      CREATE(Picture);
      PicNode := Picture.GetPictureAsBase64(TmpFileName,ScaleRatio,NodeName);
      CLEAR(Picture);

      IF ISCLEAR(PicNode) THEN
        ReturnCode := 61;

      ERASE(TmpFileName);
    END;

    BEGIN
    END.
  }
}
