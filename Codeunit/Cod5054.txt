OBJECT Codeunit 5054 WordManagement
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=Merging Microsoft Word Documents...\\;ESP=Fusionando documentos Microsoft Word...\\';
      Text004@1004 : TextConst 'ENU=Preparing;ESP=Preparando';
      Text005@1005 : TextConst 'ENU=Program status;ESP=Estado programa';
      Text006@1006 : TextConst 'ENU=Preparing Merge...;ESP=Preparando fusi¢n...';
      Text007@1007 : TextConst 'ENU=Waiting for print job...;ESP=Esperando trabajo impresi¢n...';
      Text008@1008 : TextConst 'ENU=Transferring %1 data to Microsoft Word...;ESP=Transfiriendo datos %1 a Microsoft Word...';
      Text010@1010 : TextConst 'ENU=%1 %2 must have %3 DOC.;ESP=%1 %2 debe tener %3 DOC.';
      Text011@1011 : TextConst 'ENU=Attachment file error;ESP=Archivo error anexo';
      Text012@1012 : TextConst 'ENU=Creating merge source...;ESP=Creando origen fusi¢n...';
      Text013@1013 : TextConst 'ENU=Microsoft Word is opening merge source...;ESP=Microsoft Word est  abriendo origen fusi¢n...';
      Text014@1014 : TextConst 'ENU=Merging %1 in Microsoft Word...;ESP=Fusionando %1 en Microsoft Word...';
      Text015@1015 : TextConst 'ENU=FaxMailTo;ESP=AFaxMail';
      Text017@1017 : TextConst 'ENU=The merge source file is locked by another process.\;ESP=El origen de la fusi¢n est  bloqueado por otro proceso.\';
      Text018@1018 : TextConst 'ENU=Please try again later.;ESP=Por favor, int‚ntelo m s tarde.';
      Text019@1019 : TextConst 'ENU=" Mail Address";ESP=" Direcci¢n mail"';
      Text020@1020 : TextConst 'ENU="Document ";ESP="Documento "';
      Text021@1021 : TextConst 'ENU="Import attachment ";ESP="Importar anexo "';
      Text022@1022 : TextConst 'ENU=Delete %1?;ESP=¨Borrar %1?';
      Text023@1023 : TextConst 'ENU=Another user has modified the record for this %1\after you retrieved it from the database.\\;ESP=Otro usuario ha modificado el registro para este %1\despu‚s de que lo recuperara de la base datos.\\';
      Text025@1025 : TextConst 'ENU=Enter the changes again in the updated document.;ESP=Introduzca los cambios otra vez en el doc. actualizado.';
      Text027@1027 : TextConst 'ENU=\Doc;ESP=\Doc';
      Text029@1029 : TextConst 'ENU=\MergeSource;ESP=\MergeSource';
      Window@1034 : Dialog;
      AttachmentManagement@1035 : Codeunit 5052;
      Text030@1001 : TextConst 'ENU=Formal Salutation;ESP=Saludo formal';
      Text031@1000 : TextConst 'ENU=Informal Salutation;ESP=Saludo informal';
      MergeSourceBufferFileName@1002 : Text[260];
      MergeSourceBufferFile@1016 : File;
      Text032@1024 : TextConst 'ENU=*.htm|*.htm;ESP=*.htm|*.htm';
      Text033@1026 : TextConst 'ENU=*.doc|*.doc;ESP=*.doc|*.doc';
      Text034@1028 : TextConst 'ENU=Download data source file;ESP=Descargar archivo de origen de datos';
      Text035@1030 : TextConst 'ENU=Download main mail merge file;ESP=Descargar archivo de combinaci¢n de correo principal';
      Text036@1031 : TextConst 'ENU=Save main mail merge file to the database;ESP=Guardar archivo de combinaci¢n de correo principal en la base de datos';
      Text037@1032 : TextConst 'ENU=Default.doc;ESP=Predeterminado.doc';
      Text038@1033 : TextConst 'ENU=You are accessing the Mail Merge functionality that allows you to create and edit messages. To continue working, download the template and data files.;ESP=Va a utilizar la funcionalidad de Combinar correspondencia, que permite crear y editar mensajes. Para seguir trabajando, descargue la plantilla y los archivos de datos.';
      Text039@1036 : TextConst 'ENU=Do you want to upload the modified template file to the server?;ESP=¨Desea cargar el archivo de plantilla modificada en el servidor?';
      RBAutoMgt@1040 : Codeunit 419;

    PROCEDURE CreateWordAttachment@13(WordCaption@1001 : Text[260]) NewAttachNo@1000 : Integer;
    VAR
      Attachment@1002 : Record 5062;
      AttachmentManagement@1003 : Codeunit 5052;
      wrdApp@1009 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{000209FF-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      wrdDoc@1008 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020906-0000-0000-C000-000000000046}:Unknown Automation Server.Document";
      wrdMergefile@1007 : Automation "{3C2554FE-2B41-4543-B3E8-E64296773DA5} 2.0:{40D88563-F0DA-4B3D-AD1B-34EFA8C3978A}:Unknown Automation Server.Unknown Class";
      FileName@1004 : Text[260];
      MergeFileName@1005 : Text[260];
      ParamInt@1006 : Integer;
    BEGIN
      IF ISCLEAR(wrdMergefile) THEN
        CREATE(wrdMergefile,FALSE,TRUE);

      MergeFileName := RBAutoMgt.ClientTempFileName(Text029,'.HTM');
      CreateHeader(wrdMergefile,TRUE,MergeFileName); // Header without data

      IF ISCLEAR(wrdApp) THEN
        CREATE(wrdApp,FALSE,TRUE);
      Attachment."File Extension" := GetWordDocExt(wrdApp.Version);
      wrdDoc := wrdApp.Documents.Add;
      wrdDoc.MailMerge.MainDocumentType := 0; // 0 = wdFormLetters
      ParamInt := 7; // 7 = HTML
      wrdDoc.MailMerge.OpenDataSource(MergeFileName,ParamInt);

      FileName := Attachment.ConstFilename;
      wrdDoc.SaveAs(FileName);
      IF WordHandler(wrdDoc,Attachment,WordCaption,FALSE,FileName,FALSE) THEN
        NewAttachNo := Attachment."No."
      ELSE
        NewAttachNo := 0;

      CLEAR(wrdMergefile);
      CLEAR(wrdDoc);
      CLEAR(wrdApp);

      DeleteFile(MergeFileName);
    END;

    PROCEDURE OpenWordAttachment@5(VAR Attachment@1000 : Record 5062;FileName@1001 : Text[260];Caption@1002 : Text[260];IsTemporary@1003 : Boolean);
    VAR
      wrdApp@1009 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{000209FF-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      wrdDoc@1008 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020906-0000-0000-C000-000000000046}:Unknown Automation Server.Document";
      wrdMergefile@1007 : Automation "{3C2554FE-2B41-4543-B3E8-E64296773DA5} 2.0:{40D88563-F0DA-4B3D-AD1B-34EFA8C3978A}:Unknown Automation Server.Unknown Class";
      ParamFalse@1004 : Boolean;
      MergeFileName@1005 : Text[260];
      ParamInt@1006 : Integer;
    BEGIN
      IF ISCLEAR(wrdMergefile) THEN
        CREATE(wrdMergefile,FALSE,TRUE);

      MergeFileName := RBAutoMgt.ClientTempFileName(Text029,'.HTM');
      CreateHeader(wrdMergefile,TRUE,MergeFileName);

      IF ISCLEAR(wrdApp) THEN
        CREATE(wrdApp,FALSE,TRUE);
      ParamFalse := FALSE;
      wrdDoc := wrdApp.Documents.Open(FileName,ParamFalse,Attachment."Read Only");
      IF wrdDoc.MailMerge.MainDocumentType = -1 THEN BEGIN
        wrdDoc.MailMerge.MainDocumentType := 0; // 0 = wdFormLetters
        wrdDoc.MailMerge.OpenDataSource(MergeFileName,ParamInt);
      END;

      IF wrdDoc.MailMerge.Fields.Count > 0 THEN BEGIN
        ParamInt := 7; // 7 = HTML
        wrdDoc.MailMerge.OpenDataSource(MergeFileName,ParamInt);
      END;

      WordHandler(wrdDoc,Attachment,Caption,IsTemporary,FileName,FALSE);

      CLEAR(wrdMergefile);
      CLEAR(wrdDoc);
      CLEAR(wrdApp);

      DeleteFile(MergeFileName);
    END;

    PROCEDURE Merge@1(VAR TempDeliverySorter@1000 : TEMPORARY Record 5074);
    VAR
      TempDeliverySorter2@1001 : TEMPORARY Record 5074;
      wrdApp@1012 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{000209FF-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      LastAttachmentNo@1002 : Integer;
      LastCorrType@1003 : Integer;
      LastSubject@1004 : Text[50];
      LastSendWordDocsAsAttmt@1005 : Boolean;
      LineCount@1006 : Integer;
      NoOfRecords@1007 : Integer;
      WordHided@1008 : Boolean;
      Param@1009 : Boolean;
      FirstRecord@1010 : Boolean;
    BEGIN
      Window.OPEN(
        Text003 +
        '#1############ @2@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\' +
        '#3############ @4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\' +
        '#5############ #6################################');

      Window.UPDATE(1,Text004);
      Window.UPDATE(5,Text005);

      IF ISCLEAR(wrdApp) THEN
        CREATE(wrdApp,FALSE,TRUE);

      IF wrdApp.Documents.Count > 0 THEN BEGIN
        wrdApp.Visible := FALSE;
        WordHided := TRUE;
      END;

      Window.UPDATE(6,Text006);
      TempDeliverySorter.SETCURRENTKEY(
        "Attachment No.","Correspondence Type",Subject,"Send Word Docs. as Attmt.");
      TempDeliverySorter.SETFILTER(TempDeliverySorter."Correspondence Type",'<>0');
      NoOfRecords := TempDeliverySorter.COUNT;
      TempDeliverySorter.FIND('-');

      FirstRecord := TRUE;
      REPEAT
        LineCount := LineCount + 1;
        Window.UPDATE(2,ROUND(LineCount / NoOfRecords * 10000,1));
        Window.UPDATE(3,STRSUBSTNO('%1',TempDeliverySorter."Correspondence Type"));

        IF NOT FirstRecord AND
          (((TempDeliverySorter."Attachment No." <> LastAttachmentNo)) OR
          ((TempDeliverySorter."Correspondence Type" <> LastCorrType)) OR
          ((TempDeliverySorter.Subject <> LastSubject)) OR
          ((TempDeliverySorter."Send Word Docs. as Attmt." <> LastSendWordDocsAsAttmt)))
        THEN BEGIN
          ExecuteMerge(wrdApp,TempDeliverySorter2);
          TempDeliverySorter2.DELETEALL;
          IF TempDeliverySorter."Attachment No." <> LastAttachmentNo THEN
            ImportMergeSourceFile(LastAttachmentNo)
        END;

        TempDeliverySorter2 := TempDeliverySorter;
        TempDeliverySorter2.INSERT;
        LastAttachmentNo := TempDeliverySorter."Attachment No.";
        LastCorrType := TempDeliverySorter."Correspondence Type";
        LastSubject := TempDeliverySorter.Subject;
        LastSendWordDocsAsAttmt := TempDeliverySorter."Send Word Docs. as Attmt.";

        FirstRecord := FALSE;
      UNTIL TempDeliverySorter.NEXT = 0;

      IF TempDeliverySorter2.FIND('-') THEN BEGIN
        ExecuteMerge(wrdApp,TempDeliverySorter2);
        ImportMergeSourceFile(TempDeliverySorter2."Attachment No.")
      END;

      IF WordHided THEN
        wrdApp.Visible := TRUE
      ELSE BEGIN

        // Wait for print job to finish
        IF wrdApp.BackgroundPrintingStatus <> 0 THEN
          REPEAT
            Window.UPDATE(6,Text007);
            SLEEP(500);
          UNTIL wrdApp.BackgroundPrintingStatus = 0;

        Param := FALSE;
        wrdApp.Quit(Param)
      END;

      CLEAR(wrdApp);
      Window.CLOSE;
    END;

    LOCAL PROCEDURE ExecuteMerge@6(VAR wrdApp@1021 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{000209FF-0000-0000-C000-000000000046}:Unknown Automation Server.Application";VAR TempDeliverySorter@1000 : Record 5074);
    VAR
      Attachment@1001 : Record 5062;
      InteractLogEntry@1002 : Record 5065;
      Salesperson@1003 : Record 13;
      Country@1004 : Record 9;
      Country2@1005 : Record 9;
      Contact@1006 : Record 5050;
      CompanyInfo@1007 : Record 79;
      wrdDoc@1020 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020906-0000-0000-C000-000000000046}:Unknown Automation Server.Document";
      wrdMergefile@1019 : Automation "{3C2554FE-2B41-4543-B3E8-E64296773DA5} 2.0:{40D88563-F0DA-4B3D-AD1B-34EFA8C3978A}:Unknown Automation Server.Unknown Class";
      wrdOLEFormat@1027 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020933-0000-0000-C000-000000000046}:Unknown Automation Server.OLEFormat";
      FormatAddr@1008 : Codeunit 365;
      MergeFileName@1010 : Text[260];
      MainFileName@1011 : Text[260];
      NoOfRecords@1012 : Integer;
      ParamBln@1013 : Boolean;
      ParamInt@1014 : Integer;
      ContAddr@1015 : ARRAY [8] OF Text[50];
      ContAddr2@1022 : ARRAY [8] OF Text[50];
      MultiAddress@1016 : ARRAY [2] OF Text[260];
      i@1017 : Integer;
      Row@1018 : Integer;
      wrdLinkFormat@1023 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020931-0000-0000-C000-000000000046}:Unknown Automation Server.LinkFormat";
      MergeFile@1025 : File;
      ShapesIndex@1024 : Integer;
      HeaderIsReady@1026 : Boolean;
    BEGIN
      Window.UPDATE(
        6,STRSUBSTNO(Text008,
        FORMAT(TempDeliverySorter."Correspondence Type")));
      IF TempDeliverySorter.FIND('-') THEN
        NoOfRecords := TempDeliverySorter.COUNT;

      Attachment.GET(TempDeliverySorter."Attachment No.");

      WITH TempDeliverySorter DO BEGIN
        SETCURRENTKEY("Attachment No.","Correspondence Type",Subject);
        FIND('-');
      END;
      Row := 2;

      MainFileName := ConstDocFilename;
      TempDeliverySorter.FIND('-');
      Attachment.GET(TempDeliverySorter."Attachment No.");
      IF NOT AttachmentManagement.UseComServer(Attachment."File Extension",TRUE) THEN
        ERROR(STRSUBSTNO(Text010,Attachment.TABLECAPTION,Attachment."No.", Attachment.FIELDCAPTION("File Extension")));

      IF NOT Attachment.ExportAttachment(MainFileName) THEN
        ERROR(Text011);

      Window.UPDATE(6,Text012);
      Attachment.CALCFIELDS("Merge Source");
      IF Attachment."Merge Source".HASVALUE THEN BEGIN
        MergeFile.WRITEMODE := TRUE;
        MergeFile.TEXTMODE := TRUE;
        MergeFileName := RBAutoMgt.ServerTempFileName(Text029,'.HTM');
        MergeFile.CREATE(MergeFileName);
        REPEAT
          CreateILEMergeSource(MergeFile,Attachment,TempDeliverySorter."No.",
            HeaderIsReady,TempDeliverySorter."Correspondence Type");
          Row := Row + 1;
          Window.UPDATE(4,ROUND(Row / NoOfRecords * 10000,1))
        UNTIL TempDeliverySorter.NEXT = 0;
        MergeFile.WRITE('</table>');
        MergeFile.WRITE('</body>');
        MergeFile.WRITE('</html>');
        MergeFile.CLOSE;
        MergeFileName := RBAutoMgt.DownloadTempFile(MergeFileName);
      END ELSE BEGIN
        MergeFileName := RBAutoMgt.ClientTempFileName(Text029,'.HTM');
        IF ISCLEAR(wrdMergefile) THEN
          CREATE(wrdMergefile,FALSE,TRUE);
        CreateHeader(wrdMergefile,FALSE,MergeFileName);
        REPEAT
          InteractLogEntry.GET(TempDeliverySorter."No.");
          Contact.GET(InteractLogEntry."Contact No.");
          CompanyInfo.GET;
          IF NOT Country2.GET(CompanyInfo."Country/Region Code") THEN
            CLEAR(Country2);

          IF NOT Country.GET(Contact."Country/Region Code") THEN
            CLEAR(Country);
          IF NOT Salesperson.GET(InteractLogEntry."Salesperson Code") THEN
            CLEAR(Salesperson);

          //This field must come first in the merge source file
          wrdMergefile.AddField(FORMAT(InteractLogEntry."Entry No."));

          // Add mulitline fielddata
          i := 1;
          CLEAR(MultiAddress);
          FormatAddr.ContactAddrAlt(ContAddr,Contact,InteractLogEntry."Contact Alt. Address Code",InteractLogEntry.Date);

          wrdMergefile.NewMultiField;
          COPYARRAY(ContAddr2,ContAddr,1);
          COMPRESSARRAY(ContAddr2);
          WHILE ContAddr2[1] <> '' DO BEGIN
            IF ContAddr[i] <> '' THEN BEGIN
              wrdMergefile.AddMultiToField(ContAddr[i]);
              ContAddr2[1] := '';
              COMPRESSARRAY(ContAddr2);
            END ELSE
              wrdMergefile.AddMultiToField('&nbsp;');
            i := i + 1;
          END;
          wrdMergefile.EndMultiField;

          WITH wrdMergefile DO BEGIN
            AddField(Contact."No.");
            AddField(Contact."Company Name");
            AddField(Contact.Name);
            AddField(Contact."Name 2");
            AddField(Contact.Address);
            AddField(Contact."Address 2");
            AddField(Contact."Post Code");
            AddField(Contact.City);
            AddField(Contact.County);
            AddField(Country.Name);
            AddField(Contact."Job Title");
            AddField(Contact."Phone No.");
            AddField(Contact."Fax No.");
            AddField(Contact."E-Mail");
            AddField(Contact."Mobile Phone No.");
            AddField(Contact."VAT Registration No.");
            AddField(Contact."Home Page");
            AddField(Contact.GetSalutation(0,InteractLogEntry."Interaction Language Code"));
            AddField(Contact.GetSalutation(1,InteractLogEntry."Interaction Language Code"));
            AddField(Salesperson.Code);
            AddField(Salesperson.Name);
            AddField(Salesperson."Job Title");
            AddField(Salesperson."Phone No.");
            AddField(Salesperson."E-Mail");
            AddField(FORMAT(InteractLogEntry.Date));
            AddField(InteractLogEntry."Campaign No.");
            AddField(InteractLogEntry."Segment No.");
            AddField(InteractLogEntry.Description);
            AddField(InteractLogEntry.Subject);
            AddField(CompanyInfo.Name);
            AddField(CompanyInfo."Name 2");
            AddField(CompanyInfo.Address);
            AddField(CompanyInfo."Address 2");
            AddField(CompanyInfo."Post Code");
            AddField(CompanyInfo.City);
            AddField(CompanyInfo.County);
            AddField(Country2.Name);
            AddField(CompanyInfo."VAT Registration No.");
            AddField(CompanyInfo."Registration No.");
            AddField(CompanyInfo."Phone No.");
            AddField(CompanyInfo."Fax No.");
            AddField(CompanyInfo."Bank Branch No.");
            AddField(CompanyInfo."Bank Name");
            AddField(CompanyInfo."Bank Account No.");
            AddField(CompanyInfo."Giro No.");

            //This field must come last in the merge source file
            CASE TempDeliverySorter."Correspondence Type" OF
              TempDeliverySorter."Correspondence Type"::Fax:
                AddField(AttachmentManagement.InteractionFax(InteractLogEntry));
              TempDeliverySorter."Correspondence Type"::"E-Mail":
                AddField(AttachmentManagement.InteractionEMail(InteractLogEntry));
              ELSE
                AddField('');
            END;

            WriteLine
          END;
          Row := Row + 1;
          Window.UPDATE(4,ROUND(Row / NoOfRecords * 10000,1))
        UNTIL TempDeliverySorter.NEXT = 0;
        wrdMergefile.CloseFile;
      END;

      wrdDoc := wrdApp.Documents.Open(MainFileName);
      wrdDoc.MailMerge.MainDocumentType := 0;

      Window.UPDATE(6,Text013);
      ParamInt := 7; // 7 = HTML
      wrdDoc.MailMerge.OpenDataSource(MergeFileName,ParamInt);
      Window.UPDATE(6,STRSUBSTNO(Text014,TempDeliverySorter."Correspondence Type"));

      FOR ShapesIndex := 1 TO wrdDoc.InlineShapes.Count DO BEGIN
        wrdLinkFormat := wrdDoc.InlineShapes.Item(ShapesIndex).LinkFormat;
        wrdOLEFormat := wrdDoc.InlineShapes.Item(ShapesIndex).OLEFormat;
        IF NOT ISCLEAR(wrdOLEFormat) THEN
          wrdDoc.MailMerge.MailAsAttachment := wrdDoc.MailMerge.MailAsAttachment OR wrdOLEFormat.DisplayAsIcon;
        IF NOT ISCLEAR(wrdLinkFormat) THEN
          wrdLinkFormat.SavePictureWithDocument := TRUE;
      END;

      CASE TempDeliverySorter."Correspondence Type" OF
        TempDeliverySorter."Correspondence Type"::Fax:
          BEGIN
            wrdDoc.MailMerge.Destination := 3;
            wrdDoc.MailMerge.MailAddressFieldName := Text015;
            wrdDoc.MailMerge.MailAsAttachment := TRUE;
            wrdDoc.MailMerge.Execute
          END;
        TempDeliverySorter."Correspondence Type"::"E-Mail":
          BEGIN
            wrdDoc.MailMerge.Destination := 2;
            wrdDoc.MailMerge.MailAddressFieldName := Text015;
            wrdDoc.MailMerge.MailSubject := TempDeliverySorter.Subject;
            wrdDoc.MailMerge.MailAsAttachment :=
              wrdDoc.MailMerge.MailAsAttachment OR TempDeliverySorter."Send Word Docs. as Attmt.";
            wrdDoc.MailMerge.Execute
          END;
        TempDeliverySorter."Correspondence Type"::"Hard Copy":
          BEGIN
            wrdDoc.MailMerge.Destination := 0; // 0 = wdSendToNewDocument
            wrdDoc.MailMerge.Execute;
            wrdApp.ActiveDocument.PrintOut;
            ParamBln := FALSE;
            wrdApp.ActiveDocument.Close(ParamBln);
          END;
      END;

      // Update delivery status on Interaction Log Entry
      IF TempDeliverySorter.FIND('-') THEN BEGIN
        InteractLogEntry.LOCKTABLE;
        REPEAT
          WITH InteractLogEntry DO BEGIN
            GET(TempDeliverySorter."No.");
            "Delivery Status" := InteractLogEntry."Delivery Status"::" ";
            MODIFY;
          END;
        UNTIL TempDeliverySorter.NEXT = 0;
        COMMIT;
      END;

      ParamBln := FALSE;
      wrdDoc.Close(ParamBln);
      IF NOT Attachment."Merge Source".HASVALUE THEN
        AppendToMergeSource(MergeFileName);
      DeleteFile(MainFileName);
      DeleteFile(MergeFileName);

      IF NOT ISCLEAR(wrdLinkFormat)
        THEN CLEAR(wrdLinkFormat);
      IF NOT ISCLEAR(wrdOLEFormat)
        THEN CLEAR(wrdOLEFormat);
      CLEAR(wrdMergefile);
      CLEAR(wrdDoc);
    END;

    PROCEDURE ShowMergedDocument@11(VAR SegLine@1000 : Record 5077;VAR Attachment@1001 : Record 5062;WordCaption@1002 : Text[260];IsTemporary@1016 : Boolean);
    VAR
      Salesperson@1003 : Record 13;
      Country@1004 : Record 9;
      Country2@1005 : Record 9;
      Contact@1006 : Record 5050;
      CompanyInfo@1007 : Record 79;
      wrdMergefile@1017 : Automation "{3C2554FE-2B41-4543-B3E8-E64296773DA5} 2.0:{40D88563-F0DA-4B3D-AD1B-34EFA8C3978A}:Unknown Automation Server.Unknown Class";
      wrdApp@1019 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{000209FF-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      wrdDoc@1018 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020906-0000-0000-C000-000000000046}:Unknown Automation Server.Document";
      FormatAddr@1008 : Codeunit 365;
      MergeFileName@1009 : Text[260];
      MainFileName@1010 : Text[260];
      ParamInt@1011 : Integer;
      ParamFalse@1012 : Boolean;
      ContAddr@1013 : ARRAY [8] OF Text[50];
      ContAddr2@1020 : ARRAY [8] OF Text[50];
      MultiAddress@1014 : ARRAY [2] OF Text[260];
      TempFileName@1025 : Text[1024];
      I@1015 : Integer;
      IsInherited@1021 : Boolean;
      MergeFile@1022 : File;
      HeaderIsReady@1023 : Boolean;
      MergeFileNameServer@1024 : Text[260];
    BEGIN
      IF NOT AttachmentManagement.UseComServer(Attachment."File Extension",TRUE) THEN
        ERROR(STRSUBSTNO(Text010,Attachment.TABLECAPTION,Attachment."No.",
          Attachment.FIELDCAPTION("File Extension")));


      IF SegLine.AttachmentInherited THEN
        IsInherited := TRUE;

      // Handle Word documents without mergefields
      IF NOT DocContainMergefields(Attachment) THEN BEGIN
        MainFileName := ConstDocFilename;
        Attachment.ExportAttachment(MainFileName);
        ParamFalse := FALSE;

        IF ISCLEAR(wrdApp) THEN
          CREATE(wrdApp,FALSE,TRUE);
        wrdDoc := wrdApp.Documents.Open(MainFileName,ParamFalse,Attachment."Read Only");
      END ELSE BEGIN
        // Merge possible

        MainFileName := ConstDocFilename;
        IF NOT Attachment.ExportAttachment(MainFileName) THEN
          ERROR(Text011);

        Attachment.CALCFIELDS("Merge Source");
        IF Attachment."Merge Source".HASVALUE THEN BEGIN
          MergeFileNameServer := RBAutoMgt.ServerTempFileName(Text029,'.HTM');
          MergeFile.WRITEMODE := TRUE;
          MergeFile.TEXTMODE := TRUE;
          MergeFile.CREATE(MergeFileNameServer);
          CreateILEMergeSource(MergeFile,Attachment,SegLine."Line No.",HeaderIsReady,0);
          MergeFile.WRITE('</table>');
          MergeFile.WRITE('</body>');
          MergeFile.WRITE('</html>');
          MergeFile.CLOSE;
          MergeFileName := RBAutoMgt.DownloadTempFile(MergeFileNameServer);
          IF ISSERVICETIER THEN //We don't need the file any more on ServiceTier
            ERASE(MergeFileNameServer);

        END ELSE BEGIN
          MergeFileName := RBAutoMgt.ClientTempFileName(Text029,'.HTM');
          IF ISCLEAR(wrdMergefile) THEN
            CREATE(wrdMergefile,FALSE,TRUE);
          CreateHeader(wrdMergefile,FALSE,MergeFileName);
          Contact.GET(SegLine."Contact No.");
          CompanyInfo.GET;
          IF NOT Country2.GET(CompanyInfo."Country/Region Code") THEN
            CLEAR(Country2);

          IF NOT Country.GET(Contact."Country/Region Code") THEN
            CLEAR(Country);
          IF NOT Salesperson.GET(SegLine."Salesperson Code") THEN
            CLEAR(Salesperson);

          //This field must come first in the merge source file
          wrdMergefile.AddField(FORMAT(SegLine."Line No."));

          // Add mulitline fielddata
          I := 1;
          CLEAR(MultiAddress);
          FormatAddr.ContactAddrAlt(ContAddr,Contact,SegLine."Contact Alt. Address Code",SegLine.Date);
          wrdMergefile.NewMultiField;
          COPYARRAY(ContAddr2,ContAddr,1);
          COMPRESSARRAY(ContAddr2);
          WHILE ContAddr2[1] <> '' DO BEGIN
            IF ContAddr[I] <> '' THEN BEGIN
              wrdMergefile.AddMultiToField(ContAddr[I]);
              ContAddr2[1] := '';
              COMPRESSARRAY(ContAddr2);
            END ELSE
              wrdMergefile.AddMultiToField('&nbsp;');
            I := I + 1;
          END;
          wrdMergefile.EndMultiField;

          WITH wrdMergefile DO BEGIN
            AddField(Contact."No.");
            AddField(Contact."Company Name");
            AddField(Contact.Name);
            AddField(Contact."Name 2");
            AddField(Contact.Address);
            AddField(Contact."Address 2");
            AddField(Contact."Post Code");
            AddField(Contact.City);
            AddField(Contact.County);
            AddField(Country.Name);
            AddField(Contact."Job Title");
            AddField(Contact."Phone No.");
            AddField(Contact."Fax No.");
            AddField(Contact."E-Mail");
            AddField(Contact."Mobile Phone No.");
            AddField(Contact."VAT Registration No.");
            AddField(Contact."Home Page");
            AddField(Contact.GetSalutation(0,SegLine."Language Code"));
            AddField(Contact.GetSalutation(1,SegLine."Language Code"));
            AddField(Salesperson.Code);
            AddField(Salesperson.Name);
            AddField(Salesperson."Job Title");
            AddField(Salesperson."Phone No.");
            AddField(Salesperson."E-Mail");
            AddField(FORMAT(SegLine.Date));
            AddField(FORMAT(SegLine."Campaign No."));
            AddField(SegLine."Segment No.");
            AddField(SegLine.Description);
            AddField(SegLine.Subject);
            AddField(CompanyInfo.Name);
            AddField(CompanyInfo."Name 2");
            AddField(CompanyInfo.Address);
            AddField(CompanyInfo."Address 2");
            AddField(CompanyInfo."Post Code");
            AddField(CompanyInfo.City);
            AddField(CompanyInfo.County);
            AddField(Country2.Name);
            AddField(CompanyInfo."VAT Registration No.");
            AddField(CompanyInfo."Registration No.");
            AddField(CompanyInfo."Phone No.");
            AddField(CompanyInfo."Fax No.");
            AddField(CompanyInfo."Bank Branch No.");
            AddField(CompanyInfo."Bank Name");
            AddField(CompanyInfo."Bank Account No.");
            AddField(CompanyInfo."Giro No.");

            //This field must come last in the merge source file
            AddField('');
            WriteLine;
            CloseFile;
          END;
        END;

        ParamFalse := FALSE;
        IF ISCLEAR(wrdApp) THEN
          CREATE(wrdApp,FALSE,TRUE);
        wrdDoc := wrdApp.Documents.Open(MainFileName,ParamFalse,Attachment."Read Only");
        wrdDoc.MailMerge.MainDocumentType := 0;
        ParamInt := 7; // 7 = HTML
        wrdDoc.MailMerge.OpenDataSource(MergeFileName,ParamInt);
        ParamInt := 9999998; // 9999998 = wdToggle
        wrdDoc.MailMerge.ViewMailMergeFieldCodes(ParamInt);
      END;

      WordHandler(wrdDoc,Attachment,WordCaption,IsTemporary,MainFileName,IsInherited);

      CLEAR(wrdMergefile);
      CLEAR(wrdDoc);
      CLEAR(wrdApp);

      DeleteFile(MergeFileName);
    END;

    LOCAL PROCEDURE CreateHeader@4(VAR wrdMergefile@1011 : Automation "{3C2554FE-2B41-4543-B3E8-E64296773DA5} 2.0:{40D88563-F0DA-4B3D-AD1B-34EFA8C3978A}:Unknown Automation Server.Unknown Class";MergeFieldsOnly@1000 : Boolean;MergeFileName@1001 : Text[260]);
    VAR
      Salesperson@1002 : Record 13;
      Country@1003 : Record 9;
      Contact@1004 : Record 5050;
      SegLine@1005 : Record 5077;
      CompanyInfo@1006 : Record 79;
      RMSetup@1010 : Record 5079;
      InteractionLogEntry@1012 : Record 5065;
      I@1007 : Integer;
      MainLanguage@1009 : Integer;
      CreateOk@1008 : Boolean;
    BEGIN
      CreateOk := TRUE;
      IF NOT wrdMergefile.CreateFile(MergeFileName) THEN
        ERROR(Text017+Text018);

      // Create HTML Header source
      WITH wrdMergefile DO BEGIN
        MainLanguage := GLOBALLANGUAGE;
        RMSetup.GET;
        IF RMSetup."Mergefield Language ID" <> 0 THEN
          GLOBALLANGUAGE := RMSetup."Mergefield Language ID";
        AddField(InteractionLogEntry.FIELDCAPTION("Entry No."));
        AddField(Contact.TABLECAPTION + Text019);
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(Contact."No."));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Company Name"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(Name));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Name 2"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(Address));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Address 2"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Post Code"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(City));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION(County));
        AddField(Contact.TABLECAPTION + ' ' + Country.TABLECAPTION + ' ' + Country.FIELDCAPTION(Name));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Job Title"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Phone No."));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Fax No."));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("E-Mail"));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Mobile Phone No."));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("VAT Registration No."));
        AddField(Contact.TABLECAPTION + ' ' + Contact.FIELDCAPTION("Home Page"));
        AddField(Text030);
        AddField(Text031);
        AddField(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION(Code));
        AddField(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION(Name));
        AddField(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION("Job Title"));
        AddField(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION("Phone No."));
        AddField(Salesperson.TABLECAPTION + ' ' + Salesperson.FIELDCAPTION("E-Mail"));
        AddField(Text020 + SegLine.FIELDCAPTION(Date));
        AddField(Text020 + SegLine.FIELDCAPTION("Campaign No."));
        AddField(Text020 + SegLine.FIELDCAPTION("Segment No."));
        AddField(Text020 + SegLine.FIELDCAPTION(Description));
        AddField(Text020 + SegLine.FIELDCAPTION(Subject));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(Name));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Name 2"));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(Address));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Address 2"));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Post Code"));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(City));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION(County));
        AddField(CompanyInfo.TABLECAPTION + ' ' + Country.TABLECAPTION + ' ' +
          Country.FIELDCAPTION(Name));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("VAT Registration No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Registration No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Phone No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Fax No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Branch No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Name"));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Bank Account No."));
        AddField(CompanyInfo.TABLECAPTION + ' ' + CompanyInfo.FIELDCAPTION("Giro No."));
        GLOBALLANGUAGE := MainLanguage;
        AddField(Text015);
        WriteLine;

        // Mergesource must be at least two lines
        IF MergeFieldsOnly THEN BEGIN
          FOR I := 1 TO 47 DO
            AddField('');
          WriteLine;
          CloseFile;
        END;
      END;
    END;

    PROCEDURE WordHandler@7(VAR wrdDoc@1009 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020906-0000-0000-C000-000000000046}:Unknown Automation Server.Document";VAR Attachment@1001 : Record 5062;Caption@1002 : Text[260];IsTemporary@1003 : Boolean;FileName@1004 : Text[260];IsInherited@1008 : Boolean) DocImported@1000 : Boolean;
    VAR
      Attachment2@1005 : Record 5062;
      wrdHandler@1006 : Automation "{3C2554FE-2B41-4543-B3E8-E64296773DA5} 2.0:{D9487004-7ED7-4F2A-A9FC-28C1202992CD}:Unknown Automation Server.Unknown Class";
      NewFileName@1007 : Text[260];
    BEGIN
      CREATE(wrdHandler,FALSE,TRUE);

      wrdDoc.ActiveWindow.Caption := Caption;
      wrdDoc.ActiveWindow.WindowState := 1; // 1 = wdWindowStateMaximize
      wrdDoc.Saved := TRUE;
      wrdDoc.Application.Visible := TRUE;
      wrdDoc.Application.Activate;

      NewFileName := wrdHandler.WaitForDocument(wrdDoc);

      IF NOT Attachment."Read Only" THEN
        IF wrdHandler.DocIsClosed THEN
          IF wrdHandler.DocChanged THEN BEGIN
            CLEAR(wrdHandler);
            IF CONFIRM(Text021 + Caption +'?',TRUE) THEN BEGIN
              IF (NOT IsTemporary) AND Attachment2.GET(Attachment."No.") THEN
                IF Attachment2."Last Time Modified" <> Attachment."Last Time Modified" THEN BEGIN
                  DeleteFile(FileName);
                  IF NewFileName <> FileName THEN
                    IF CONFIRM(
                      STRSUBSTNO(Text022,NewFileName), FALSE)
                    THEN
                      DeleteFile(NewFileName);
                  ERROR(
                    STRSUBSTNO(Text023+Text025,Attachment.TABLECAPTION));
                END;
              Attachment.ImportAttachment(NewFileName,IsTemporary,IsInherited);
              DeleteFile(NewFileName);
              DocImported := TRUE;
            END;
          END;

      IF NOT ISCLEAR(wrdHandler) THEN
        CLEAR(wrdHandler);

      DeleteFile(FileName);
    END;

    PROCEDURE DeleteFile@8(FileName@1001 : Text[1024]) DeleteOk@1000 : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      // Wait for Word to release files
      IF FileName = '' THEN
        EXIT(FALSE);

      IF ISSERVICETIER THEN
        EXIT(TRUE);

      IF NOT EXISTS(FileName) THEN
        EXIT(TRUE);

      REPEAT
        SLEEP(250);
        I := I + 1;
      UNTIL ERASE(FileName) OR (I = 25);
      EXIT(NOT EXISTS(FileName));
    END;

    PROCEDURE ConstDocFilename@9() FileName@1000 : Text[260];
    VAR
      I@1001 : Integer;
      DocNo@1002 : Text[30];
    BEGIN
      FileName := RBAutoMgt.ServerTempFileName(Text027,'.DOC');
    END;

    PROCEDURE DocContainMergefields@2(VAR Attachment@1001 : Record 5062) MergeFields@1000 : Boolean;
    VAR
      wrdApp@1005 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{000209FF-0000-0000-C000-000000000046}:Unknown Automation Server.Application" WITHEVENTS;
      wrdDoc@1004 : Automation "{00020905-0000-0000-C000-000000000046} 8.1:{00020906-0000-0000-C000-000000000046}:Unknown Automation Server.Document";
      ParamBln@1002 : Boolean;
      FileName@1003 : Text[260];
    BEGIN
      IF ISCLEAR(wrdApp) THEN
        CREATE(wrdApp,FALSE,TRUE);

      IF (UPPERCASE(Attachment."File Extension") <> 'DOC') AND
         (UPPERCASE(Attachment."File Extension") <> 'DOCX')
      THEN
        EXIT(FALSE);
      FileName := Attachment.ConstFilename;
      Attachment.ExportAttachment(FileName);
      wrdDoc := wrdApp.Documents.Open(FileName);
      MergeFields := (wrdDoc.MailMerge.Fields.Count > 0);
      ParamBln := FALSE;
      wrdDoc.Close(ParamBln);
      DeleteFile(FileName);

      CLEAR(wrdDoc);
      CLEAR(wrdApp);
    END;

    LOCAL PROCEDURE CreateILEMergeSource@12(VAR MergeFile@1000 : File;VAR Attachment@1009 : Record 5062;EntryNo@1008 : Integer;VAR HeaderIsReady@1001 : Boolean;CorrespondenceType@1005 : ' ,Hard Copy,E-Mail,Fax') LineIsFound : Boolean;
    VAR
      InteractLogEntry@1004 : Record 5065;
      CurrentLine@1003 : Text[250];
      NewLine@1002 : Text[250];
      SearchValue@1007 : Text[30];
      InStreamBLOB@1006 : InStream;
    BEGIN
      SearchValue := '<td>' + FORMAT(EntryNo) + '</td>';
      Attachment.CALCFIELDS("Merge Source");
      Attachment."Merge Source".CREATEINSTREAM(InStreamBLOB);
      REPEAT
        InStreamBLOB.READTEXT(CurrentLine);
        IF (CurrentLine = '<tr>') AND HeaderIsReady THEN BEGIN
          InStreamBLOB.READTEXT(NewLine);
          IF NewLine = SearchValue THEN BEGIN
            MergeFile.WRITE(CurrentLine);
            MergeFile.WRITE(NewLine);
            LineIsFound := TRUE
          END
        END;

        IF NOT HeaderIsReady THEN BEGIN
          MergeFile.WRITE(CurrentLine);
          IF (CurrentLine = '</tr>') THEN
            HeaderIsReady := TRUE
        END
      UNTIL LineIsFound OR InStreamBLOB.EOS;

      IF LineIsFound THEN BEGIN
        InStreamBLOB.READTEXT(NewLine);
        WHILE (NewLine <> '</tr>') DO BEGIN
          CurrentLine := NewLine;
          InStreamBLOB.READTEXT(NewLine);
          IF NewLine <> '</tr>' THEN
            MergeFile.WRITE(CurrentLine);
        END;
        IF InteractLogEntry.GET(EntryNo) THEN BEGIN
          CASE CorrespondenceType OF
            CorrespondenceType::Fax:
              MergeFile.WRITE('<td>' + AttachmentManagement.InteractionFax(InteractLogEntry) + '</td>');
            CorrespondenceType::"E-Mail":
              MergeFile.WRITE('<td>' + AttachmentManagement.InteractionEMail(InteractLogEntry) + '</td>')
            ELSE
              MergeFile.WRITE('<td></td>')
          END
        END
      END
    END;

    LOCAL PROCEDURE ImportMergeSourceFile@10(AttachmentNo@1000 : Integer);
    VAR
      Attachment@1001 : Record 5062;
    BEGIN
      Attachment.GET(AttachmentNo);
      Attachment.CALCFIELDS("Merge Source");
      IF NOT Attachment."Merge Source".HASVALUE THEN BEGIN
        IF NOT DocContainMergefields(Attachment) THEN
          EXIT;
        MergeSourceBufferFile.WRITE('</table>');
        MergeSourceBufferFile.WRITE('</body>');
        MergeSourceBufferFile.WRITE('</html>');
        MergeSourceBufferFile.CLOSE;
        Attachment."Merge Source".IMPORT(MergeSourceBufferFileName);
        Attachment.MODIFY;
        DeleteFile(MergeSourceBufferFileName);
        MergeSourceBufferFileName := ''
      END
    END;

    LOCAL PROCEDURE AppendToMergeSource@41(MergeFileName@1000 : Text[260]);
    VAR
      SourceFile@1003 : File;
      CurrentLine@1004 : Text[250];
      SkipHeader@1005 : Boolean;
      MergeFileNameServer@1006 : Text[260];
    BEGIN
      IF MergeSourceBufferFileName = '' THEN BEGIN
        MergeSourceBufferFileName := RBAutoMgt.ServerTempFileName(Text029,'.HTM');
        MergeSourceBufferFile.WRITEMODE := TRUE;
        MergeSourceBufferFile.TEXTMODE := TRUE;
        MergeSourceBufferFile.CREATE(MergeSourceBufferFileName);
      END ELSE
        SkipHeader := TRUE;
      SourceFile.TEXTMODE := TRUE;

      IF ISSERVICETIER THEN BEGIN
        MergeFileNameServer :=  RBAutoMgt.ServerTempFileName(Text029,'.HTM');
        UPLOAD(Text021, '', Text032, MergeFileName, MergeFileNameServer)
      END ELSE
        MergeFileNameServer := MergeFileName;

      SourceFile.OPEN(MergeFileNameServer);
      IF SkipHeader THEN
        REPEAT
          SourceFile.READ(CurrentLine)
        UNTIL (CurrentLine = '</tr>');
      WHILE (CurrentLine <> '</table>') AND (SourceFile.POS <> SourceFile.LEN) DO BEGIN
        SourceFile.READ(CurrentLine);
        IF CurrentLine <> '</table>' THEN
          MergeSourceBufferFile.WRITE(CurrentLine);
      END;
      SourceFile.CLOSE;

      IF ISSERVICETIER THEN
        ERASE(MergeFileNameServer);
    END;

    PROCEDURE OpenMailMergeInRoleBasedClient@14(InvitationMessage@1000 : Text[1024];MainFileName@1001 : Text[1024];MergeFileName@1002 : Text[1024];UploadMessage@1004 : Text[1024]) ToFile : Text[1024];
    VAR
      FromFolder@1005 : Text[1024];
      FromFile@1003 : Text[255];
    BEGIN
      IF CONFIRM(InvitationMessage) THEN BEGIN
        IF STRPOS(Text029,'\') <> 0 THEN
          ToFile := COPYSTR(Text029,2,STRLEN(Text029)-1) + '.HTM';
        DOWNLOAD(MergeFileName,Text034,'',Text032,ToFile);
        ToFile := Text037;
        DOWNLOAD(MainFileName,Text035,'',Text033,ToFile);

        GetFileFolderPart(ToFile,FromFolder,FromFile);
        ToFile := '';
        IF UploadMessage <> '' THEN
          IF CONFIRM(UploadMessage) THEN
            UPLOAD(Text036,FromFolder,Text033,FromFile,ToFile);
      END
    END;

    PROCEDURE GetFileFolderPart@15(FileName@1000 : Text[1024];VAR FolderPart@1005 : Text[1024];VAR FilePart@1004 : Text[1024]);
    VAR
      i@1001 : Integer;
      returnStr@1003 : Integer;
      tempStr@1002 : Text[1024];
    BEGIN
      tempStr := COPYSTR(FileName,1,STRPOS(FileName,'\'));
      FolderPart := tempStr;

      WHILE (tempStr <> '') DO BEGIN
        FileName := COPYSTR(FileName,STRLEN(tempStr)+1,STRLEN(FileName)-STRLEN(tempStr));
        tempStr := COPYSTR(FileName,1,STRPOS(FileName,'\'));
        FolderPart := FolderPart + tempStr;
      END;
      FilePart := FileName;
    END;

    PROCEDURE GetWordDocExt@17(VersionTxt@1001 : Text[30]) : Code[4];
    VAR
      Version@1200 : Decimal;
      SeparatorPos@1201 : Integer;
      CommaStr@1202 : Code[1];
      DefaultStr@1203 : Code[10];
      EvalOK@1204 : Boolean;
    BEGIN
      DefaultStr := 'DOC';
      SeparatorPos := STRPOS(VersionTxt,'.');
      IF SeparatorPos = 0 THEN
        SeparatorPos := STRPOS(VersionTxt,',');
      IF SeparatorPos = 0 THEN
        EvalOK := EVALUATE(Version,VersionTxt)
      ELSE BEGIN
        CommaStr := COPYSTR(FORMAT(11/10),2,1);
        EvalOK :=
          EVALUATE(Version,COPYSTR(VersionTxt,1,SeparatorPos - 1) + CommaStr + COPYSTR(VersionTxt,SeparatorPos + 1));
      END;
      IF EvalOK AND (Version >= 12.0) THEN
        EXIT('DOCX');
      EXIT(DefaultStr);
    END;

    BEGIN
    END.
  }
}
