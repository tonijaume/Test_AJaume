OBJECT Codeunit 99000840 Plng. Component-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd,
                TableData 99000849=rd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1;ESP=La cantidad reservada no puede ser mayor que %1';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved;ESP=se debe rellenar cuando se ha reservado una cantidad';
      Text003@1002 : TextConst 'ENU=must not be changed when a quantity is reserved;ESP=no se debe modificar cuando se ha reservado una cantidad';
      Text004@1003 : TextConst 'ENU=Codeunit is not initialized correctly.;ESP=Codeunit no iniciada correctamente.';
      CreateReservEntry@1005 : Codeunit 99000830;
      ReservEngineMgt@1006 : Codeunit 99000831;
      ReservMgt@1007 : Codeunit 99000845;
      Blocked@1008 : Boolean;
      SetFromType@1009 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[20];
      SetFromLotNo@1019 : Code[20];
      SetFromQtyPerUOM@1020 : Decimal;

    PROCEDURE CreateReservation@1(VAR PlanningComponent@1000 : Record 99000829;Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1003 : Decimal;ForSerialNo@1004 : Code[20];ForLotNo@1005 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text004);

      PlanningComponent.TESTFIELD("Item No.");
      PlanningComponent.TESTFIELD("Due Date");

      IF ABS(PlanningComponent."Net Quantity (Base)") < ABS(PlanningComponent."Reserved Qty. (Base)") + Quantity THEN
        ERROR(
          Text000,
          ABS(PlanningComponent."Net Quantity (Base)") - ABS(PlanningComponent."Reserved Qty. (Base)"));

      PlanningComponent.TESTFIELD("Location Code",SetFromLocationCode);
      PlanningComponent.TESTFIELD("Variant Code",SetFromVariantCode);

      IF Quantity > 0 THEN
        ShipmentDate := PlanningComponent."Due Date"
      ELSE BEGIN
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := PlanningComponent."Due Date";
      END;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Planning Component",0,
        PlanningComponent."Worksheet Template Name",PlanningComponent."Worksheet Batch Name",
        PlanningComponent."Worksheet Line No.",PlanningComponent."Line No.",
        PlanningComponent."Qty. per Unit of Measure",
        Quantity,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        PlanningComponent."Item No.",PlanningComponent."Variant Code",PlanningComponent."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate,0);

      SetFromType := 0;
    END;

    PROCEDURE CreateReservationSetFrom@4(FromType@1000 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';FromSubtype@1001 : Integer;FromID@1002 : Code[20];FromBatchName@1003 : Code[10];FromProdOrderLine@1004 : Integer;FromRefNo@1005 : Integer;FromVariantCode@1006 : Code[10];FromLocationCode@1007 : Code[10];FromSerialNo@1009 : Code[20];FromLotNo@1010 : Code[20];FromQtyPerUOM@1011 : Decimal);
    BEGIN
      SetFromType := FromType;
      SetFromSubtype := FromSubtype;
      SetFromID := FromID;
      SetFromBatchName := FromBatchName;
      SetFromProdOrderLine := FromProdOrderLine;
      SetFromRefNo := FromRefNo;
      SetFromVariantCode := FromVariantCode;
      SetFromLocationCode := FromLocationCode;
      SetFromSerialNo := FromSerialNo;
      SetFromLotNo := FromLotNo;
      SetFromQtyPerUOM := FromQtyPerUOM;
    END;

    PROCEDURE SetBinding@8(Binding@1000 : ' ,Order-to-order');
    BEGIN
      CreateReservEntry.SetBinding(Binding);
    END;

    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record 337;PlanningComponent@1001 : Record 99000829);
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Planning Component");
      FilterReservEntry.SETRANGE("Source Subtype",0);
      FilterReservEntry.SETRANGE("Source ID",PlanningComponent."Worksheet Template Name");
      FilterReservEntry.SETRANGE("Source Batch Name",PlanningComponent."Worksheet Batch Name");
      FilterReservEntry.SETRANGE("Source Prod. Order Line",PlanningComponent."Worksheet Line No.");
      FilterReservEntry.SETRANGE("Source Ref. No.",PlanningComponent."Line No.");
    END;

    PROCEDURE Caption@30(PlanningComponent@1001 : Record 99000829) CaptionText@1000 : Text[80];
    VAR
      ReqLine@1002 : Record 246;
    BEGIN
      ReqLine.GET(
        PlanningComponent."Worksheet Template Name",
        PlanningComponent."Worksheet Batch Name",
        PlanningComponent."Worksheet Line No.");
      CaptionText :=
        STRSUBSTNO('%1 %2 %3 %4',
          PlanningComponent."Worksheet Template Name",
          PlanningComponent."Worksheet Batch Name",
          ReqLine.Type,
          ReqLine."No.",
          PlanningComponent."Item No.");
    END;

    PROCEDURE FindReservEntry@5(PlanningComponent@1000 : Record 99000829;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,PlanningComponent);
      EXIT(ReservEntry.FINDLAST);
    END;

    PROCEDURE VerifyChange@59(VAR NewPlanningComponent@1000 : Record 99000829;VAR OldPlanningComponent@1001 : Record 99000829);
    VAR
      PlanningComponent@1005 : Record 99000829;
      TempReservEntry@1002 : Record 337;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      IF Blocked THEN
        EXIT;
      IF NewPlanningComponent."Line No." = 0 THEN
        IF NOT PlanningComponent.GET(
                 NewPlanningComponent."Worksheet Template Name",
                 NewPlanningComponent."Worksheet Batch Name",
                 NewPlanningComponent."Worksheet Line No.",
                 NewPlanningComponent."Line No.")
        THEN
          EXIT;

      NewPlanningComponent.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewPlanningComponent."Reserved Qty. (Base)" <> 0;

      IF NewPlanningComponent."Due Date" = 0D THEN
        IF ShowError THEN
          NewPlanningComponent.FIELDERROR("Due Date",Text002)
        ELSE
          HasError := TRUE;
      IF NewPlanningComponent."Item No." <> OldPlanningComponent."Item No." THEN
        IF ShowError THEN
          NewPlanningComponent.FIELDERROR("Item No.",Text003)
        ELSE
          HasError := TRUE;
      IF (NewPlanningComponent."Location Code" <> OldPlanningComponent."Location Code") THEN
        IF ShowError THEN
          NewPlanningComponent.FIELDERROR("Location Code",Text003)
        ELSE
          HasError := TRUE;
      IF NewPlanningComponent."Variant Code" <> OldPlanningComponent."Variant Code" THEN
        IF ShowError THEN
          NewPlanningComponent.FIELDERROR("Variant Code",Text003)
        ELSE
          HasError := TRUE;
      IF NewPlanningComponent."Line No." <> OldPlanningComponent."Line No." THEN
        HasError := TRUE;

      IF HasError THEN
        IF (NewPlanningComponent."Item No." <> OldPlanningComponent."Item No.") OR
           FindReservEntry(NewPlanningComponent,TempReservEntry)
        THEN BEGIN
          IF (NewPlanningComponent."Item No." <> OldPlanningComponent."Item No.") THEN BEGIN
            ReservMgt.SetPlanningComponent(OldPlanningComponent);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetPlanningComponent(NewPlanningComponent);
          END ELSE BEGIN
            ReservMgt.SetPlanningComponent(NewPlanningComponent);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewPlanningComponent."Net Quantity (Base)");
        END;

      IF HasError OR (NewPlanningComponent."Due Date" <> OldPlanningComponent."Due Date")
      THEN BEGIN
        AssignForPlanning(NewPlanningComponent);
        IF (NewPlanningComponent."Item No." <> OldPlanningComponent."Item No.") OR
           (NewPlanningComponent."Variant Code" <> OldPlanningComponent."Variant Code") OR
           (NewPlanningComponent."Location Code" <> OldPlanningComponent."Location Code")
        THEN
          AssignForPlanning(OldPlanningComponent);
      END;
    END;

    PROCEDURE VerifyQuantity@2(VAR NewPlanningComponent@1000 : Record 99000829;VAR OldPlanningComponent@1001 : Record 99000829);
    VAR
      PlanningComponent@1002 : Record 99000829;
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH NewPlanningComponent DO BEGIN
        IF "Line No." = OldPlanningComponent."Line No." THEN
          IF ("Net Quantity (Base)" = OldPlanningComponent."Net Quantity (Base)") THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT PlanningComponent.GET(
                   "Worksheet Template Name",
                   "Worksheet Batch Name",
                   "Worksheet Line No.",
                   "Line No.")
          THEN
            EXIT;
        ReservMgt.SetPlanningComponent(NewPlanningComponent);
        IF "Qty. per Unit of Measure" <> OldPlanningComponent."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        IF "Net Quantity (Base)" * OldPlanningComponent."Net Quantity (Base)" < 0 THEN
          ReservMgt.DeleteReservEntries(TRUE,0)
        ELSE
          ReservMgt.DeleteReservEntries(FALSE,"Net Quantity (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Net Quantity (Base)");
        AssignForPlanning(NewPlanningComponent);
      END;
    END;

    PROCEDURE TransferPlanningCompToPOComp@31(VAR OldPlanningComponent@1000 : Record 99000829;VAR NewProdOrderComp@1001 : Record 5407;TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record 337;
      NewReservEntry@1006 : Record 337;
      Status@1009 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      IF NOT FindReservEntry(OldPlanningComponent,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      NewProdOrderComp.TESTFIELD("Item No.",OldPlanningComponent."Item No.");
      NewProdOrderComp.TESTFIELD("Variant Code",OldPlanningComponent."Variant Code");
      NewProdOrderComp.TESTFIELD("Location Code",OldPlanningComponent."Location Code");

      IF TransferAll THEN BEGIN
        OldReservEntry.FINDSET;
        OldReservEntry.TESTFIELD("Qty. per Unit of Measure",NewProdOrderComp."Qty. per Unit of Measure");
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",OldPlanningComponent."Item No.");
          OldReservEntry.TESTFIELD("Variant Code",OldPlanningComponent."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",OldPlanningComponent."Location Code");

          NewReservEntry := OldReservEntry;
          NewReservEntry."Source Type" := DATABASE::"Prod. Order Component";
          NewReservEntry."Source Subtype" := NewProdOrderComp.Status;
          NewReservEntry."Source ID" := NewProdOrderComp."Prod. Order No.";
          NewReservEntry."Source Batch Name" := '';
          NewReservEntry."Source Prod. Order Line" := NewProdOrderComp."Prod. Order Line No.";
          NewReservEntry."Source Ref. No." := NewProdOrderComp."Line No.";
          NewReservEntry.MODIFY;

        UNTIL (OldReservEntry.NEXT = 0);
      END ELSE
        FOR Status := Status::Reservation TO Status::Prospect DO BEGIN
          IF TransferQty = 0 THEN
            EXIT;
          OldReservEntry.SETRANGE("Reservation Status",Status);

          IF OldReservEntry.FINDSET THEN
            REPEAT
              OldReservEntry.TESTFIELD("Item No.",OldPlanningComponent."Item No.");
              OldReservEntry.TESTFIELD("Variant Code",OldPlanningComponent."Variant Code");
              OldReservEntry.TESTFIELD("Location Code",OldPlanningComponent."Location Code");

              TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Prod. Order Component",
                NewProdOrderComp.Status,NewProdOrderComp."Prod. Order No.",'',NewProdOrderComp."Prod. Order Line No.",
                NewProdOrderComp."Line No.",NewProdOrderComp."Qty. per Unit of Measure",OldReservEntry,TransferQty);

            UNTIL (OldReservEntry.NEXT = 0) OR (TransferQty = 0);
        END; // DO
    END;

    PROCEDURE RenameLine@10(VAR NewPlanningComponent@1001 : Record 99000829;VAR OldPlanningComponent@1000 : Record 99000829);
    BEGIN
      ReservEngineMgt.RenamePointer(DATABASE::"Planning Component",
        0,
        OldPlanningComponent."Worksheet Template Name",
        OldPlanningComponent."Worksheet Batch Name",
        OldPlanningComponent."Worksheet Line No.",
        OldPlanningComponent."Line No.",
        0,
        NewPlanningComponent."Worksheet Template Name",
        NewPlanningComponent."Worksheet Batch Name",
        NewPlanningComponent."Worksheet Line No.",
        NewPlanningComponent."Line No.");
    END;

    PROCEDURE DeleteLine@3(VAR PlanningComponent@1000 : Record 99000829);
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH PlanningComponent DO BEGIN
        ReservMgt.SetPlanningComponent(PlanningComponent);
        ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(TRUE,0);
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(PlanningComponent);
      END;
    END;

    PROCEDURE UpdateDerivedTracking@9(VAR PlanningComponent@1000 : Record 99000829);
    VAR
      ReservEntry@1001 : Record 337;
      ReservEntry2@1002 : Record 337;
      ActionMessageEntry@1003 : Record 99000849;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ActionMessageEntry.SETCURRENTKEY(ActionMessageEntry."Reservation Entry");

      WITH ReservEntry DO BEGIN
        SETFILTER("Shipment Date",'<>%1',PlanningComponent."Due Date");
        SETRANGE("Source Type",DATABASE::"Prod. Order Component");
        SETRANGE("Source Subtype",PlanningComponent."Ref. Order Status");
        SETRANGE("Source ID",PlanningComponent."Ref. Order No.");
        SETRANGE("Source Ref. No.",PlanningComponent."Line No.");
        SETRANGE("Source Prod. Order Line",PlanningComponent."Ref. Order Line No.");
        IF FINDSET THEN REPEAT
          ReservEntry2 := ReservEntry;
          ReservEntry2."Shipment Date" := PlanningComponent."Due Date";
          ReservEntry2.MODIFY;
          IF ReservEntry2.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive) THEN BEGIN
            ReservEntry2."Shipment Date" := PlanningComponent."Due Date";
            ReservEntry2.MODIFY;
          END;
          ActionMessageEntry.SETRANGE("Reservation Entry",ReservEntry."Entry No.");
          ActionMessageEntry.DELETEALL;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE AssignForPlanning@7(VAR PlanningComponent@1000 : Record 99000829);
    VAR
      PlanningAssignment@1001 : Record 99000850;
    BEGIN
      WITH PlanningComponent DO
        IF "Item No." <> '' THEN
          PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Location Code","Due Date");
    END;

    PROCEDURE Block@6(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    PROCEDURE CallItemTracking@14(VAR PlanningComponent@1003 : Record 99000829);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Form 6510;
    BEGIN
      InitTrackingSpecification(PlanningComponent,TrackingSpecification);
      ItemTrackingForm.SetSource(TrackingSpecification,PlanningComponent."Due Date");
      ItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE InitTrackingSpecification@13(VAR PlanningComponent@1001 : Record 99000829;VAR TrackingSpecification@1003 : Record 336);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Planning Component";
      WITH PlanningComponent DO BEGIN
        TrackingSpecification."Item No." := "Item No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := 0;
        TrackingSpecification."Source ID" := "Worksheet Template Name";
        TrackingSpecification."Source Batch Name" := "Worksheet Batch Name";
        TrackingSpecification."Source Prod. Order Line" := "Worksheet Line No.";
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Quantity (Base)" := "Net Quantity (Base)";
        TrackingSpecification."Qty. to Handle" := ROUND("Net Quantity (Base)" / "Qty. per Unit of Measure",0.00001);
        TrackingSpecification."Qty. to Handle (Base)" := "Net Quantity (Base)";
        TrackingSpecification."Qty. to Invoice" := ROUND("Net Quantity (Base)" / "Qty. per Unit of Measure",0.00001);
        TrackingSpecification."Qty. to Invoice (Base)" := "Net Quantity (Base)";
        TrackingSpecification."Quantity Handled (Base)" := 0;
        TrackingSpecification."Quantity Invoiced (Base)" := 0;
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      END;
    END;

    BEGIN
    END.
  }
}
