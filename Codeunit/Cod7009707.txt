OBJECT Codeunit 7009707 Calculo reserva hotel
{
  OBJECT-PROPERTIES
  {
    Date=13/05/15;
    Time=17:50:14;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355025 : TextConst 'ENU=" Calculating booking #1######## Touroperator #2########.";ESP=" Calculando la reserva #1######## Touroperador #2########."';
      Text001@1103355026 : TextConst 'ENU=Only responsible bookings can be calculated;ESP=Solo se pueden calcular las reservas de responsables.';
      Text002@1103355027 : TextConst 'ENU=Calculation of this booking is cancelled, it will affect to the calculation of another \;ESP=El calculo de esta reserva esta anulado, se reflejara en el calculo de otro \';
      Text003@1103355028 : TextConst 'ENU=term of this booking;ESP=periodo de esta reserva.';
      Text005@1103355030 : TextConst 'ENU=Must indicate adult code in Agency parameters file;ESP=Se debe indicar el codigo de adulto en el fichero de parametros persona.';
      Text006@1103355031 : TextConst 'ENU=Must indicate child code in Agency parameters file;ESP=Se debe indicar el codigo de ni¤o en el fichero de parametros persona.';
      Text007@1103355032 : TextConst 'ENU=Must indicate infant code in Agency parameters file;ESP=Se debe indicar el codigo de infant en el fichero de parametros persona.';
      Text008@1103355033 : TextConst 'ENU=Contract %1 in the local office %2 does not exist;ESP=No existe el contrato %1 en la delegacion %2.';
      Text009@1103355034 : TextConst 'ENU=REG HABITA;ESP=REG HABITA';
      Text010@1103355035 : TextConst 'ENU=REG REGIME;ESP=REG REGIME';
      Text011@1103355036 : TextConst 'ENU=REG SUPLEM;ESP=REG SUPLEM';
      Text012@1103355037 : TextConst 'ENU=REG EXTRA;ESP=REG EXTRA';
      Text013@1103355038 : TextConst 'ENU=OFFER;ESP=OFERTA';
      Text014@1103355039 : TextConst 'ENU=Room;ESP=Habitacion';
      Text015@1103355040 : TextConst 'ENU=Board;ESP=Regimen';
      Text016@1103355041 : TextConst 'ENU=Supplement;ESP=Suplemento';
      Text017@1103355042 : TextConst 'ENU=EXTRAFIJOS;ESP=EXTRAFIJOS';
      Text018@1103355043 : TextConst 'ENU=EXTRAVARIA;ESP=EXTRAVARIA';
      Text019@1103355044 : TextConst 'ENU=Deleted prices by surcharges or offers;ESP=Precios borrados por suplementos u ofertas.';
      Text020@1103355045 : TextConst 'ENU=HABITACIOV;ESP=HABITACIOV';
      Text021@1103355046 : TextConst 'ENU=REG HABITV;ESP=REG HABITV';
      Text022@1103355047 : TextConst 'ENU=REGIMENV;ESP=REGIMENV';
      Text023@1103355048 : TextConst 'ENU=REG REGIMV;ESP=REG REGIMV';
      Text024@1103355049 : TextConst 'ENU=SUPLEMENTV;ESP=SUPLEMENTV';
      Text025@1103355050 : TextConst 'ENU=REG SUPLEV;ESP=REG SUPLEV';
      Text026@1103355051 : TextConst 'ENU=OFERTAV;ESP=OFERTAV';
      cRes@1103355000 : Codeunit 7009703;
      cCoste@1103355001 : Codeunit 7009708;
      cIngreso@1103355002 : Codeunit 7009716;
      cConcepto@1100253000 : Codeunit 7009765;
      rParPer@1103355003 : Record 7009701;
      rPre@1103355004 : Record 7009738;
      rRsvDia@1103355005 : Record 7009755;
      rConC@1103355006 : Record 7009723;
      rConV@1103355007 : Record 7009727;
      rPer@1103355008 : Record 7009740;
      w_encontrado@1103355009 : Boolean;
      w_adulto@1103355010 : Boolean;
      w_adulto_original@1103355011 : Boolean;
      w_contrato@1103355012 : Code[10];
      w_sexo@1103355013 : Code[10];
      w_habitaciones@1103355014 : Integer;
      w_pax_legal@1103355015 : Integer;
      w_ocupacion_total@1103355016 : Integer;
      w_ocupacion@1103355017 : Integer;
      w_num_persona_adulto@1103355018 : Integer;
      w_num_persona_adulto_total@1103355019 : Integer;
      w_num_persona_ni¤o@1103355020 : Integer;
      w_edad_maxima@1103355021 : Integer;
      w_bucle_ni¤os@1103355022 : Boolean;
      ventana@1103355023 : Dialog;
      fCabecera@1103355024 : Form 7009746;

    PROCEDURE calculo_reserva@1(rRsv@1103355000 : Record 7009743;visualizar@1103355001 : Boolean);
    BEGIN
      // calculo_reserva
      // $003

      // Lanza el calculo tanto para costes como para ingresos
      CalculoReserva(rRsv,visualizar,0);
    END;

    PROCEDURE CalculoReserva@1100217000(rRsv@1103355000 : Record 7009743;visualizar@1103355001 : Boolean;pwTipoCalc@1100217000 : 'Ambos,Costes,Ingresos');
    VAR
      rCab@1103355003 : Record 7009735;
      rRsv2@1103355004 : Record 7009743;
      ok@1103355005 : Boolean;
    BEGIN
      // CalculoReserva
      // $003

      ventana.OPEN(Text000);
      ventana.UPDATE(1, rRsv.Bono);
      ventana.UPDATE(2, rRsv."TourOperador Venta");
      IF NOT rRsv.Responsable THEN
        ERROR(Text001);

      // Borrar registros temporales del calculo

      borrar_registros;
      IF rRsv."Calculo anulado" THEN BEGIN
        ventana.CLOSE;
        MESSAGE(Text002+
                Text003);
        EXIT;
      END;
      // Calcular el numero de persona para utilizarlo en el calculo

      IF rRsv."N§ Habitacion" = '' THEN
        calculo_3p(rRsv)
      ELSE
        calculo_3p_habitacion(rRsv);

      // Refrescamos la reserva con los numeros de persona calculados

      IF rRsv.GET(rRsv.Delegacion, rRsv."N§ Reserva") THEN
        COMMIT;

      // Poner el contrato actual en la reserva

      contratos_reserva(rRsv);

      // Llamar al calculo de costes
      IF pwTipoCalc <> pwTipoCalc::Ingresos THEN //$003
        cCoste.calculo_costes(rRsv);
      ok := rRsv.GET(rRsv.Delegacion, rRsv."N§ Reserva");

      // Desmarcar el campo oferta excluyente del fichero de personas calculo

      rPer.RESET;
      rPer.SETCURRENTKEY(Usuario,
                         Delegacion,
                         "N§ Responsable");
      rPer.SETRANGE(Usuario         , USERID());
      rPer.SETRANGE(Delegacion      , rRsv.Delegacion);
      rPer.SETRANGE("N§ Responsable", rRsv."N§ Reserva");
      IF rPer.FINDSET THEN
      BEGIN
        rPer.MODIFYALL("Oferta excluyente", FALSE);
        rPer.MODIFYALL("Codigo Oferta" ,'');
      END;

      // Llamar al calculo de ingresos
      IF pwTipoCalc <> pwTipoCalc::Costes THEN
      BEGIN //$003
        rRsvDia.RESET;
        rRsvDia.SETRANGE(Delegacion  , rRsv.Delegacion);
        rRsvDia.SETRANGE("N§ Reserva", rRsv."N§ Reserva");
        IF rRsvDia.FINDFIRST THEN
        BEGIN
          IF rConC.GET(rRsv.Delegacion, rRsvDia."Contrato compra") THEN
          BEGIN
            IF rConC."Tipo de Contrato" = rConC."Tipo de Contrato"::"En nombre propio" THEN
              cIngreso.calculo_ingresos(rRsv);

            //+$004 <
            IF NOT rRsv."No Aplica Handling Fee" THEN
            BEGIN
              cConcepto.CalculoReserva(rRsv, 'HANDFEEVEN'); //+$002
              cConcepto.CalculoReserva(rRsv, 'REPSERVICE'); //+$002
            END;
            //+$004 >
          END;
        END;
      END;

      ventana.CLOSE;
      COMMIT;

      // Si se ha llamado con el parametro de visualizacion se muestra el resultado en pantalla

      IF visualizar THEN BEGIN
        rCab.RESET;
        rCab.FILTERGROUP(2);
        rCab.SETRANGE(Usuario, USERID);
        rCab.FILTERGROUP(0);

        CLEAR(fCabecera);
        fCabecera.SETTABLEVIEW(rCab);
        fCabecera.RUNMODAL;
      END;
    END;

    PROCEDURE calculo_3p@2(VAR rRsv@1103355000 : Record 7009743);
    VAR
      rRsv2@1103355001 : Record 7009743;
    BEGIN
      // calculo_3p

      rParPer.FINDFIRST;

      IF (rParPer."Codigo Adulto" = '') THEN
        ERROR(Text005);
      IF (rParPer."Codigo Ni¤o" = '') THEN
        ERROR(Text006);
      IF (rParPer."Codigo Infant" = '') THEN
        ERROR(Text007);

      w_bucle_ni¤os := FALSE;
      w_num_persona_ni¤o := 0;

      rRsv2.RESET;
      rRsv2.SETCURRENTKEY(Delegacion,
                          "N§ Responsable",
                          "N§ Reserva");
      rRsv2.SETRANGE(Delegacion      , rRsv.Delegacion);
      rRsv2.SETRANGE("N§ Responsable", rRsv."N§ Reserva");
      IF rRsv2.FINDSET THEN
      BEGIN
        REPEAT
          IF rRsv2.Responsable THEN
            responsable_reserva(rRsv2)
          ELSE
          BEGIN
            comprobar_adulto(rRsv2);
            IF w_adulto THEN
              adulto(rRsv2);
          END;
          IF (rRsv2.Responsable) OR (w_adulto) THEN
          BEGIN
            rRsv2."Tipo Persona Facturacion" := w_sexo;
            rRsv2.MODIFY;
          END;
        UNTIL rRsv2.NEXT = 0;
      END;

      // Bucle para ni¤os

      w_bucle_ni¤os := TRUE;
      rRsv2.SETCURRENTKEY(Delegacion,
                          "N§ Responsable",
                          Edad);
      rRsv2.ASCENDING(FALSE);
      IF rRsv2.FINDFIRST THEN
      BEGIN
        REPEAT
          IF NOT rRsv2.Responsable THEN
          BEGIN
            comprobar_adulto(rRsv2);
            IF NOT w_adulto THEN
              ni¤o(rRsv2)
            ELSE
            BEGIN
              IF NOT w_adulto_original THEN
                adulto(rRsv2);
            END;

            IF (NOT w_adulto) OR (NOT w_adulto_original) THEN
            BEGIN
              rRsv2."Tipo Persona Facturacion" := w_sexo;
              rRsv2.MODIFY;
            END;
          END;
        UNTIL rRsv2.NEXT = 0;
      END;

      // Buscar la edad maxima de un ni¤o en este contrato a partir de los suplementos
      // por persona

      w_edad_maxima := 0;

      rPre.RESET;
      rPre.SETCURRENTKEY(Delegacion,
                         "N§ Contrato",
                         "Codigo Precio",
                         Codigo);
      rPre.SETRANGE (Delegacion     , rRsv2.Delegacion);
      rPre.SETRANGE ("N§ Contrato"  , w_contrato);
      rPre.SETRANGE ("Codigo Precio", rPre."Codigo Precio"::Suplementos);
      rPre.SETRANGE (Codigo         , rParPer."Codigo Ni¤o");
      rPre.SETFILTER("Fecha desde"  , '<=%1', rRsv2."Fecha entrada");
      rPre.SETFILTER("Fecha hasta"  , '>=%1', rRsv2."Fecha entrada");
      IF rPre.FINDFIRST THEN
      BEGIN
        REPEAT
          IF rPre."Edad hasta" > w_edad_maxima THEN
            w_edad_maxima := rPre."Edad hasta";
        UNTIL rPre.NEXT = 0;
      END;
      rPre.RESET;

      // Comprobar si algun ni¤o esta fuera del rango del contrato

      IF w_edad_maxima <> 0 THEN
      BEGIN
        IF rRsv2.FINDFIRST THEN
        BEGIN
          REPEAT
            IF rRsv2."Tipo Persona" = rParPer."Codigo Ni¤o" THEN
            BEGIN
              IF rRsv2.Edad > w_edad_maxima THEN
              BEGIN
                IF rRsv2."Tipo Persona Facturacion" <> rParPer."Codigo Adulto" THEN
                BEGIN
                  rRsv2."Tipo Persona Facturacion" := rParPer."Codigo Adulto";
                  w_num_persona_adulto := w_num_persona_adulto + 1;
                  rRsv2."N§ persona" := w_num_persona_adulto;
                  rRsv2.MODIFY;
                END;
              END;
            END;
          UNTIL rRsv2.NEXT = 0;
        END;
      END;
      rRsv2.RESET;
    END;

    PROCEDURE responsable_reserva@3(VAR Reserva@1103355000 : Record 7009743);
    VAR
      rConHab@1103355001 : Record 7009731;
    BEGIN
      // responsable_reserva
      //
      w_num_persona_adulto       := 1;
      w_num_persona_adulto_total := 1;
      Reserva."N§ persona"       := w_num_persona_adulto;
      w_sexo                     := Reserva."Tipo Persona";
      w_ocupacion                := 0;
      w_habitaciones             := 0;
      w_ocupacion_total          := 0;

      rConHab.RESET;
      rConHab.SETRANGE(Delegacion       , Reserva.Delegacion);
      rConHab.SETRANGE("N§ Contrato"    , Reserva."Contrato compra");
      rConHab.SETRANGE("Tipo contrato"  , rConHab."Tipo contrato"::Compra);
      rConHab.SETRANGE("Habitacion cupo", Reserva.Habitacion);
      IF rConHab.FINDFIRST THEN
      BEGIN
        w_pax_legal := rConHab."Minimo adultos" * Reserva."N§ Habitaciones";
        w_ocupacion := rConHab."Minimo adultos";
        w_ocupacion_total := w_ocupacion * Reserva."N§ Habitaciones";
      END;
      w_habitaciones := Reserva."N§ Habitaciones";
      w_contrato     := Reserva."Contrato compra";
    END;

    PROCEDURE comprobar_adulto@4(VAR reserva@1103355000 : Record 7009743);
    BEGIN
      // comprobar_adulto

      w_adulto := FALSE;
      w_adulto_original := FALSE;
      w_sexo := reserva."Tipo Persona";
      IF reserva."Tipo Persona" = rParPer."Codigo Adulto" THEN BEGIN
        w_adulto := TRUE;
        w_sexo := reserva."Tipo Persona";
        w_adulto_original := TRUE;
      END;
      IF (NOT w_adulto) AND (w_bucle_ni¤os) THEN BEGIN
        IF w_num_persona_adulto_total + 1 <= w_pax_legal THEN BEGIN
          w_adulto := TRUE;
          w_sexo := rParPer."Codigo Adulto";
        END;
      END;
    END;

    PROCEDURE adulto@5(VAR reserva@1103355000 : Record 7009743);
    BEGIN
      // adulto
      //
      w_num_persona_adulto := w_num_persona_adulto + 1;
      w_num_persona_adulto_total := w_num_persona_adulto_total + 1;
      IF w_num_persona_adulto_total > w_ocupacion_total THEN BEGIN
        IF (w_num_persona_adulto_total - w_ocupacion_total) <= w_habitaciones THEN BEGIN
          reserva."N§ persona" := w_ocupacion + 1;
        END
        ELSE BEGIN
          IF (w_num_persona_adulto_total - w_ocupacion_total) <= (w_habitaciones * 2) THEN BEGIN
            reserva."N§ persona" := w_ocupacion + 2;
          END
          ELSE BEGIN
            IF (w_num_persona_adulto_total - w_ocupacion_total) <= (w_habitaciones * 3) THEN BEGIN
              reserva."N§ persona" := w_ocupacion + 3;
            END;
          END;
        END;
      END
      ELSE BEGIN
        IF w_num_persona_adulto <= w_ocupacion THEN BEGIN
          reserva."N§ persona" := w_num_persona_adulto;
        END
        ELSE BEGIN
          w_num_persona_adulto := 1;
          reserva."N§ persona" := w_num_persona_adulto;
        END;
      END;
    END;

    PROCEDURE ni¤o@8(VAR reserva@1103355000 : Record 7009743);
    BEGIN
      // ni¤o
      //
      w_num_persona_ni¤o := w_num_persona_ni¤o + 1;
      IF w_habitaciones = 0 THEN
        reserva."N§ persona" := w_num_persona_ni¤o
      ELSE
        reserva."N§ persona" := ROUND((w_num_persona_ni¤o / w_habitaciones), 1, '>');
    END;

    PROCEDURE inserta_error@6(texto@1103355000 : Text[80]);
    VAR
      rErr@1103355001 : Record 7009737;
      rErr2@1103355002 : Record 7009737;
    BEGIN
      // inserta_error

      rErr.INIT;

      rErr2.RESET;
      rErr2.SETRANGE(Usuario, USERID);
      IF rErr2.FINDLAST THEN
        rErr."N§ Linea" := rErr2."N§ Linea" + 10
      ELSE
        rErr."N§ Linea" := 10;

      rErr.Usuario := USERID();
      rErr.Texto := texto;
      rErr.Contador := 1;
      rErr.INSERT;
    END;

    PROCEDURE inserta_linea_calculo@7(VAR rLin@1103355000 : Record 7009736;usuario@1103355001 : Code[10];concepto@1103355002 : Code[10];contrato@1103355003 : Code[10];importe@1103355004 : Decimal;reserva@1103355005 : Integer;fecha@1103355006 : Date;codigo@1103355007 : Code[10];cantidad@1103355008 : Integer;precio@1103355009 : Decimal;garantizable@1103355010 : Boolean;hp@1103355011 : Boolean);
    VAR
      rLin2@1103355012 : Record 7009736;
    BEGIN
      // inserta_linea_calculo

      rLin.INIT;
      rLin2.RESET;
      rLin2.SETRANGE (Usuario   , usuario);
      rLin2.SETFILTER("N§ Linea", '<%1', 2000000);
      IF rLin2.FINDLAST THEN
        rLin."N§ Linea" := rLin2."N§ Linea" + 10
      ELSE
        rLin."N§ Linea" := 10;

      rLin.Usuario                  := usuario;
      rLin."Concepto Coste"         := concepto;
      rLin."N§ Contrato"            := contrato;
      rLin.Importe                  := importe;
      rLin."N§ Reserva"             := reserva;
      rLin.Fecha                    := fecha;
      rLin.Codigo                   := codigo;
      rLin.Cantidad                 := cantidad;
      rLin.Precio                   := precio;
      rLin.Garantizable             := garantizable;
      rLin."Concepto Hotel Payment" := hp;
      rLin.INSERT;
    END;

    PROCEDURE fijos_linea_calculo@9(VAR rLin@1103355000 : Record 7009736;"coste/ingreso"@1103355001 : ',Coste,Ingreso';bono@1103355002 : Code[10];responsable@1103355003 : Integer;reservado@1103355004 : Code[20];"tipo contrato"@1103355005 : Integer;"destino factura"@1103355006 : Code[20];delegacion@1103355007 : Code[10];FacturarHpAparte@1103355009 : Boolean);
    BEGIN
      // fijos_linea_calculo

      rLin."Coste/Ingreso"          := "coste/ingreso";
      rLin."N§ Bono"                := bono;
      rLin."N§ Responsable"         := responsable;
      rLin."Hotel Reservado"        := reservado;
      rLin."Tipo contrato"          := "tipo contrato";
      rLin."Hotel Pago"             := "destino factura";
      rLin.Delegacion               := delegacion;
      rLin."Validacion HP especial"  := FacturarHpAparte;
      rLin.MODIFY;
    END;

    PROCEDURE borrar_otros_precios_coste@10(Precio@1103355000 : Record 7009738;reserva@1103355001 : Record 7009743;rsvdia@1103355002 : Record 7009755;par_dia@1103355003 : Date);
    VAR
      rLin@1103355004 : Record 7009736;
      rLin2@1103355005 : Record 7009736;
      rLin3@1103355007 : Record 7009736;
      rConC@1103355006 : Record 7009723;
    BEGIN
      // borrar_otros_precios coste

      IF NOT rConC.GET(reserva.Delegacion, rsvdia."Contrato compra") THEN
        ERROR(Text008, reserva.Delegacion, rsvdia."Contrato compra");

      rLin.RESET;
      rLin.SETCURRENTKEY(Usuario,
                         "Concepto Coste",
                         Fecha,
                         "Coste/Ingreso",
                         Delegacion,
                         "N§ Reserva");
      rLin.SETRANGE(Usuario         , USERID());
      rLin.SETRANGE(Delegacion      , reserva.Delegacion);
      rLin.SETRANGE("N§ Reserva"    , reserva."N§ Reserva");
      rLin.SETRANGE("Coste/Ingreso" , 1);
      IF par_dia = 0D THEN BEGIN
        IF Precio."Anula a Habitacion" THEN BEGIN
          rLin.SETRANGE("Concepto Coste", Text009);
          IF rLin.FINDSET(TRUE) THEN BEGIN
            rLin.DELETEALL;
          END;
        END;
        IF Precio."Anula a Regimen" THEN BEGIN
          rLin.SETRANGE("Concepto Coste", Text010);
          IF rLin.FINDSET(TRUE) THEN BEGIN
            rLin.DELETEALL;
          END;
        END;
        IF Precio."Anula a Suplementos" THEN BEGIN
          rLin.SETRANGE("Concepto Coste", Text011);
          IF rLin.FINDSET(TRUE) THEN BEGIN
            rLin.DELETEALL;
          END;
        END;
        IF Precio."Anula a Extras" THEN BEGIN
          rLin.SETRANGE("Concepto Coste", Text012);
          IF rLin.FINDSET(TRUE) THEN BEGIN
            rLin.DELETEALL;
          END;
        END;
        IF Precio."Anula a Ofertas" THEN BEGIN
          rLin.SETRANGE ("Concepto Coste", Text013);
          rLin.SETRANGE ("N§ Linea"      , 2000000, 2999999);
          rLin.SETFILTER(Codigo          , '<>%1', Precio.Codigo);
          IF rLin.FINDSET(TRUE) THEN BEGIN
            rLin.DELETEALL;
          END;
          rLin.SETRANGE("N§ Linea");
          rLin.SETRANGE(Codigo);
        END;
      END;

      IF Precio."Anula a Habitacion" THEN BEGIN
        rLin.SETRANGE ("Concepto Coste", Text014);
        IF par_dia <> 0D THEN
          rLin.SETRANGE(Fecha, par_dia)
        ELSE
          rLin.SETFILTER(Fecha           , '>=%1', rConC."Fecha inicio contrato");
        rLin.SETFILTER(Codigo          , '<>%1', Precio.Codigo);
        IF rLin.FINDSET(TRUE) THEN BEGIN
          REPEAT
            CLEAR(rLin2);
            rLin2 := rLin;
            rLin2."N§ Linea" := rLin2."N§ Linea" + 2000000;
            rLin2."Concepto Coste" := Text009;
            rLin2.Importe := ROUND(rLin2.Importe * (-1));
            rLin2.Precio := ROUND(rLin2.Precio * (-1));
            rLin3 := rLin2;
            IF rLin3.FIND THEN
              rLin2.MODIFY
            ELSE
              rLin2.INSERT;
          UNTIL rLin.NEXT = 0;
        END;
      END;
      IF Precio."Anula a Regimen" THEN BEGIN
        rLin.SETRANGE ("Concepto Coste", Text015);
        IF par_dia <> 0D THEN
          rLin.SETRANGE(Fecha, par_dia)
        ELSE
          rLin.SETFILTER(Fecha           , '>=%1', rConC."Fecha inicio contrato");
        IF rLin.FINDSET(TRUE) THEN BEGIN
          REPEAT
            CLEAR(rLin2);
            rLin2 := rLin;
            rLin2."N§ Linea" := rLin2."N§ Linea" + 2000000;
            rLin2."Concepto Coste" := Text010;
            rLin2.Importe := ROUND(rLin2.Importe * (-1));
            rLin2.Precio := ROUND(rLin2.Precio * (-1));

            rLin3 := rLin2;
            IF rLin3.FIND THEN
              rLin2.MODIFY
            ELSE
              rLin2.INSERT;
          UNTIL rLin.NEXT = 0;
        END;
      END;
      IF Precio."Anula a Suplementos" THEN BEGIN
        rLin.SETRANGE ("Concepto Coste", Text016);
        IF par_dia <> 0D THEN
          rLin.SETRANGE(Fecha, par_dia)
        ELSE
          rLin.SETFILTER(Fecha           , '>=%1', rConC."Fecha inicio contrato");
        IF rLin.FINDSET(TRUE) THEN BEGIN
          REPEAT
            CLEAR(rLin2);
            rLin2 := rLin;
            rLin2."N§ Linea" := rLin2."N§ Linea" + 2000000;
            rLin2."Concepto Coste" := Text011;
            rLin2.Importe := ROUND(rLin2.Importe * (-1));
            rLin2.Precio := ROUND(rLin2.Precio * (-1));

            rLin3 := rLin2;
            IF rLin3.FIND THEN
              rLin2.MODIFY
            ELSE
              rLin2.INSERT;
          UNTIL rLin.NEXT = 0;
        END;
      END;

      IF Precio."Anula a Extras" THEN BEGIN
        rLin.SETFILTER ("Concepto Coste",'%1|%2', Text017,Text018);
        IF par_dia <> 0D THEN
          rLin.SETRANGE(Fecha, par_dia)
        ELSE
          rLin.SETFILTER(Fecha           , '>=%1', rConC."Fecha inicio contrato");
        IF rLin.FINDSET(TRUE) THEN BEGIN
          REPEAT
            CLEAR(rLin2);
            rLin2 := rLin;
            rLin2."N§ Linea" := rLin2."N§ Linea" + 2000000;
            rLin2."Concepto Coste" := Text012;
            rLin2.Importe := ROUND(rLin2.Importe * (-1));
            rLin2.Precio := ROUND(rLin2.Precio * (-1));

            rLin3 := rLin2;
            IF rLin3.FIND THEN
              rLin2.MODIFY
            ELSE
              rLin2.INSERT;
          UNTIL rLin.NEXT = 0;
        END;
      END;

      IF Precio."Anula a Ofertas" THEN BEGIN
        rLin.SETRANGE ("Concepto Coste", Text013);
        IF par_dia <> 0D THEN
          rLin.SETRANGE(Fecha, par_dia)
        ELSE
          rLin.SETFILTER(Fecha           , '>=%1', rConC."Fecha inicio contrato");
        rLin.SETFILTER("N§ Linea"      , '<=%1', 2000000);
        rLin.SETFILTER(Codigo          , '<>%1', Precio.Codigo);
        IF rLin.FINDSET(TRUE) THEN BEGIN
          REPEAT
            CLEAR(rLin2);
            rLin2 := rLin;
            rLin2."N§ Linea"       := rLin2."N§ Linea" + 2000000;
            rLin2."Concepto Coste" := Text013;
            rLin2.Importe          := ROUND(rLin2.Importe * (-1));
            rLin2.Precio           := ROUND(rLin2.Precio * (-1));

            rLin3 := rLin2;
            IF rLin3.FIND THEN
              rLin2.MODIFY
            ELSE
              rLin2.INSERT;

          UNTIL rLin.NEXT = 0;
        END;
      END;
      rLin.RESET;
      inserta_error(Text019);
    END;

    PROCEDURE hallar_porcentaje_coste@11(precio@1103355000 : Record 7009738;reserva@1103355001 : Record 7009743;rsvdia@1103355002 : Record 7009755;dia_calcular@1103355003 : Date) : Decimal;
    VAR
      rLin@1103355004 : Record 7009736;
      w_total@1103355005 : Decimal;
    BEGIN
      // hallar_porcentaje_coste
      //
      w_total := 0;
      rLin.RESET;
      rLin.SETCURRENTKEY(Usuario,
                         "Concepto Coste",
                         Fecha,
                         "Coste/Ingreso",
                         Delegacion,
                         "N§ Reserva");
      IF precio."Aplica a Habitacion" THEN BEGIN
        rLin.SETRANGE(Usuario         , USERID());
        rLin.SETRANGE("Concepto Coste", Text014);
        rLin.SETRANGE(Fecha           , dia_calcular);
        rLin.SETRANGE("Coste/Ingreso" , 1);
        rLin.SETRANGE(Delegacion      , reserva.Delegacion);
        rLin.SETRANGE("N§ Reserva"    , reserva."N§ Reserva");
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
        rLin.SETRANGE("Concepto Coste", Text009);
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
      END;
      IF precio."Aplica a Regimen" THEN BEGIN
        rLin.SETRANGE(Usuario         , USERID());
        rLin.SETRANGE("Concepto Coste", Text015);
        rLin.SETRANGE(Fecha           , dia_calcular);
        rLin.SETRANGE("Coste/Ingreso" , 1);
        rLin.SETRANGE(Delegacion      , reserva.Delegacion);
        rLin.SETRANGE("N§ Reserva"    , reserva."N§ Reserva");
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
        rLin.SETRANGE("Concepto Coste", Text010);
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
      END;

      IF precio."Aplica a Suplementos" THEN BEGIN
        rLin.SETRANGE(Usuario         , USERID());
        rLin.SETRANGE("Concepto Coste", Text016);
        rLin.SETRANGE(Fecha           , dia_calcular);
        rLin.SETRANGE("Coste/Ingreso" , 1);
        rLin.SETRANGE(Delegacion      , reserva.Delegacion);
        rLin.SETRANGE("N§ Reserva"    , reserva."N§ Reserva");
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
        rLin.SETRANGE("Concepto Coste", Text011);
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
      END;

      IF precio."Aplica a Extras" THEN BEGIN
        rLin.SETRANGE(Usuario         , USERID());
        rLin.SETFILTER("Concepto Coste",'%1|%2',Text017,Text018);
        rLin.SETRANGE(Fecha           , dia_calcular);
        rLin.SETRANGE("Coste/Ingreso" , 1);
        rLin.SETRANGE(Delegacion      , reserva.Delegacion);
        rLin.SETRANGE("N§ Reserva"    , reserva."N§ Reserva");
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
        rLin.SETRANGE("Concepto Coste", Text012);
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
      END;

      w_total := ROUND((w_total * precio.Importe) / 100);
      EXIT(w_total);
    END;

    PROCEDURE hallar_porcentaje_ingreso@12(precio@1103355000 : Record 7009732;reserva@1103355001 : Record 7009743;rsvdia@1103355002 : Record 7009756;dia_calcular@1103355003 : Date) : Decimal;
    VAR
      rLin@1103355004 : Record 7009736;
      w_total@1103355005 : Decimal;
    BEGIN
      // hallar_porcentaje_ingreso
      //
      w_total := 0;
      rLin.RESET;
      rLin.SETCURRENTKEY(Usuario,
                         "Concepto Coste",
                         Fecha,
                         "Coste/Ingreso",
                         Delegacion,
                         "N§ Reserva");
      IF precio."Aplica a Habitacion" THEN BEGIN
        rLin.SETRANGE(Usuario         , USERID());
        rLin.SETRANGE("Concepto Coste", Text020);
        rLin.SETRANGE(Fecha           , dia_calcular);
        rLin.SETRANGE("Coste/Ingreso" , 2);
        rLin.SETRANGE(Delegacion      , reserva.Delegacion);
        rLin.SETRANGE("N§ Reserva"    , reserva."N§ Reserva");
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
        rLin.SETRANGE("Concepto Coste", Text021);
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
      END;
      IF precio."Aplica a Regimen" THEN BEGIN
        rLin.SETRANGE(Usuario         , USERID());
        rLin.SETRANGE("Concepto Coste", Text022);
        rLin.SETRANGE(Fecha           , dia_calcular);
        rLin.SETRANGE("Coste/Ingreso" , 2);
        rLin.SETRANGE(Delegacion      , reserva.Delegacion);
        rLin.SETRANGE("N§ Reserva"    , reserva."N§ Reserva");
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
        rLin.SETRANGE("Concepto Coste", Text023);
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
      END;
      IF precio."Aplica a Suplementos" THEN BEGIN
        rLin.SETRANGE(Usuario         , USERID());
        rLin.SETRANGE("Concepto Coste", Text024);
        rLin.SETRANGE(Fecha           , dia_calcular);
        rLin.SETRANGE("Coste/Ingreso" , 2);
        rLin.SETRANGE(Delegacion      , reserva.Delegacion);
        rLin.SETRANGE("N§ Reserva"    , reserva."N§ Reserva");
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
        rLin.SETRANGE("Concepto Coste", Text025);
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            w_total := w_total + rLin.Importe;
          UNTIL rLin.NEXT = 0;
        END;
      END;

      w_total := ROUND((w_total * precio.Importe) / 100);
      EXIT(w_total);
    END;

    PROCEDURE borrar_otros_precios_ingreso@13(precio@1103355000 : Record 7009732;reserva@1103355001 : Record 7009743;rsvdia@1103355002 : Record 7009756;par_dia@1103355003 : Date);
    VAR
      rLin@1103355004 : Record 7009736;
      rLin2@1103355005 : Record 7009736;
      rLin3@1100217000 : Record 7009736;
      rConV@1103355006 : Record 7009727;
    BEGIN
      // borrar_otros_precios_ingreso

      IF NOT rConV.GET(reserva.Delegacion, rsvdia."Contrato venta") THEN
        ERROR(Text008, reserva.Delegacion, rsvdia."Contrato venta");

      rLin.RESET;
      rLin.SETCURRENTKEY(Usuario,
                         "Concepto Coste",
                         Fecha,
                         "Coste/Ingreso",
                         Delegacion,
                         "N§ Reserva");
      rLin.SETRANGE(Usuario         , USERID());
      rLin.SETRANGE(Delegacion      , reserva.Delegacion);
      rLin.SETRANGE("N§ Reserva"    , reserva."N§ Reserva");
      rLin.SETRANGE("Coste/Ingreso" , 2);
      IF par_dia = 0D THEN BEGIN
        IF precio."Anula a Habitacion" THEN BEGIN
          rLin.SETRANGE("Concepto Coste", Text021);
          IF rLin.FINDSET(TRUE) THEN
            rLin.DELETEALL;
        END;
        IF precio."Anula a Regimen" THEN BEGIN
          rLin.SETRANGE("Concepto Coste", Text023);
          IF rLin.FINDSET(TRUE) THEN
            rLin.DELETEALL;
        END;
        IF precio."Anula a Suplementos" THEN BEGIN
          rLin.SETRANGE("Concepto Coste", Text025);
          IF rLin.FINDSET(TRUE) THEN
            rLin.DELETEALL;
        END;
        IF precio."Anula a Ofertas" THEN BEGIN
          rLin.SETRANGE ("Concepto Coste", Text026);
          rLin.SETRANGE ("N§ Linea"      , 2000000, 2999999);
          rLin.SETFILTER(Codigo          , '<>%1', precio.Codigo);
          IF rLin.FINDSET(TRUE) THEN
           rLin.DELETEALL;
          rLin.SETRANGE("N§ Linea");
          rLin.SETRANGE(Codigo);
        END;
      END;

      IF precio."Anula a Habitacion" THEN BEGIN
        rLin.SETRANGE ("Concepto Coste", Text020);
        IF par_dia <> 0D THEN
          rLin.SETRANGE(Fecha, par_dia)
        ELSE
          rLin.SETFILTER(Fecha           , '>=%1', rConV."Fecha inicio contrato");
        rLin.SETFILTER(Codigo          , '<>%1', precio.Codigo);
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            CLEAR(rLin2);
            rLin2 := rLin;
            rLin2."N§ Linea"       := rLin2."N§ Linea" + 2000000;
            rLin2."Concepto Coste" := Text021;
            rLin2.Importe          := ROUND(rLin2.Importe * (-1));
            rLin2.Precio           := ROUND(rLin2.Precio * (-1));

            rLin3 := rLin2;
            IF rLin3.FIND THEN
              rLin2.MODIFY
            ELSE
              rLin2.INSERT;
          UNTIL rLin.NEXT = 0;
        END;
      END;

      IF precio."Anula a Regimen" THEN
      BEGIN
        rLin.SETRANGE ("Concepto Coste", Text022);
        IF par_dia <> 0D THEN
          rLin.SETRANGE(Fecha, par_dia)
        ELSE
          rLin.SETFILTER(Fecha, '>=%1', rConV."Fecha inicio contrato");
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            CLEAR(rLin2);
            rLin2 := rLin;
            rLin2."N§ Linea"       := rLin2."N§ Linea" + 2000000;
            rLin2."Concepto Coste" := Text023;
            rLin2.Importe          := ROUND(rLin2.Importe * (-1));
            rLin2.Precio           := ROUND(rLin2.Precio * (-1));

            rLin3 := rLin2;
            IF rLin3.FIND THEN
              rLin2.MODIFY
            ELSE
              rLin2.INSERT;
          UNTIL rLin.NEXT = 0;
        END;
      END;
      IF precio."Anula a Suplementos" THEN
      BEGIN
        rLin.SETRANGE ("Concepto Coste", Text024);
        IF par_dia <> 0D THEN
          rLin.SETRANGE(Fecha, par_dia)
        ELSE
          rLin.SETFILTER(Fecha, '>=%1', rConV."Fecha inicio contrato");
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            CLEAR(rLin2);
            rLin2 := rLin;
            rLin2."N§ Linea"       := rLin2."N§ Linea" + 2000000;
            rLin2."Concepto Coste" := Text025;
            rLin2.Importe          := ROUND(rLin2.Importe * (-1));
            rLin2.Precio           := ROUND(rLin2.Precio * (-1));

            rLin3 := rLin2;
            IF rLin3.FIND THEN
              rLin2.MODIFY
            ELSE
              rLin2.INSERT;
          UNTIL rLin.NEXT = 0;
        END;
      END;

      IF precio."Anula a Ofertas" THEN
      BEGIN
        rLin.SETRANGE ("Concepto Coste", Text026);
        IF par_dia <> 0D THEN
          rLin.SETRANGE(Fecha, par_dia)
        ELSE
          rLin.SETFILTER(Fecha, '>=%1', rConV."Fecha inicio contrato");
        rLin.SETFILTER("N§ Linea"      , '<=%1', 2000000);
        rLin.SETFILTER(Codigo          , '<>%1', precio.Codigo);
        IF rLin.FINDSET THEN
        BEGIN
          REPEAT
            CLEAR(rLin2);
            rLin2 := rLin;
            rLin2."N§ Linea"       := rLin2."N§ Linea" + 2000000;
            rLin2."Concepto Coste" := Text026;
            rLin2.Importe          := ROUND(rLin2.Importe * (-1));
            rLin2.Precio           := ROUND(rLin2.Precio * (-1));

            rLin3 := rLin2;
            IF rLin3.FIND THEN
              rLin2.MODIFY
            ELSE
              rLin2.INSERT;
          UNTIL rLin.NEXT = 0;
        END;
      END;
      rLin.RESET;
      inserta_error(Text019);
    END;

    PROCEDURE contratos_reserva@14(VAR reserva@1103355000 : Record 7009743);
    BEGIN
      // contratos_reserva

      rConC.RESET;
      rConC.SETCURRENTKEY(Hotel,
                          TourOperador,
                          "Fecha inicio contrato");
      rConC.SETRANGE (Hotel                   , reserva."Hotel origen precios");
      rConC.SETRANGE (TourOperador            , reserva.TourOperador);
      rConC.SETFILTER("Fecha inicio contrato", '<=%1', reserva."Fecha entrada");
      rConC.SETFILTER("Fecha final contrato" , '>=%1', reserva."Fecha entrada");
      rConC.SETRANGE (Confirmado             , TRUE);
      IF rConC.FINDFIRST THEN
      BEGIN
        IF rConC."Tipo de Contrato" = rConC."Tipo de Contrato"::"En nombre propio" THEN BEGIN
          rConV.RESET;
          rConV.SETCURRENTKEY(Hotel,
                              TourOperador,
                              "Fecha inicio contrato");
          rConV.SETRANGE(Hotel                   , reserva."Hotel venta");
          rConV.SETRANGE(TourOperador            , reserva."TourOperador Venta");
          rConV.SETFILTER("Fecha inicio contrato", '<=%1', reserva."Fecha entrada");
          rConV.SETFILTER("Fecha final contrato" , '>=%1', reserva."Fecha entrada");
          rConV.SETRANGE (Confirmado             , TRUE);
          IF rConV.FINDFIRST THEN
            reserva."Contrato venta" := rConV."N§ Contrato venta"
          ELSE
            reserva."Contrato venta" := ''; //$001
        END;
        reserva."Contrato compra" := rConC."N§ Contrato compra";
        reserva."Tipo contrato" := rConC."Tipo de Contrato" + 1;
        reserva.MODIFY;

        cRes.borra_reserva_booking(reserva);
        cRes.genera_reserva_booking(reserva);
      END;
    END;

    PROCEDURE calculo_3p_habitacion@15(VAR reserva@1103355000 : Record 7009743);
    VAR
      rRsv2@1103355001 : Record 7009743;
      rHab@1103355002 : Record 7009731;
      adultos_habitacion@1103355003 : Integer;
      ni¤os_habitacion@1103355004 : Integer;
      infants_habitacion@1103355005 : Integer;
      habitacion_anterior@1103355006 : Code[10];
    BEGIN
      // calculo_3p_habitacion

      rParPer.FINDFIRST;

      rHab.RESET;
      rHab.SETRANGE(Delegacion       , reserva.Delegacion);
      rHab.SETRANGE("N§ Contrato"    , reserva."Contrato compra");
      rHab.SETRANGE("Tipo contrato"  , rHab."Tipo contrato"::Compra);
      rHab.SETRANGE("Habitacion cupo", reserva.Habitacion);
      IF rHab.FINDFIRST THEN
        w_pax_legal := rHab."Minimo adultos";
      habitacion_anterior := '';

      rRsv2.RESET;
      rRsv2.SETCURRENTKEY(Delegacion,
                          "N§ Responsable",
                          "N§ Habitacion");
      rRsv2.SETRANGE(Delegacion      , reserva.Delegacion);
      rRsv2.SETRANGE("N§ Responsable", reserva."N§ Responsable");
      IF rRsv2.FINDSET THEN
      BEGIN
        REPEAT
          IF habitacion_anterior <> rRsv2."N§ Habitacion" THEN
          BEGIN
            IF habitacion_anterior <> '' THEN
            BEGIN
              comprobar_ni¤o_habitacion(reserva, adultos_habitacion, ni¤os_habitacion, habitacion_anterior);
              comprobar_infant_habitacion(reserva, adultos_habitacion, ni¤os_habitacion, habitacion_anterior);
            END;
            habitacion_anterior := rRsv2."N§ Habitacion";
            adultos_habitacion := 0;
            ni¤os_habitacion := 0;
            infants_habitacion := 0;
          END;
          CASE rRsv2."Tipo Persona" OF
            rParPer."Codigo Adulto":
            BEGIN
              adultos_habitacion := adultos_habitacion + 1;
              rRsv2."N§ persona" := adultos_habitacion;
              rRsv2."Tipo Persona Facturacion" := rParPer."Codigo Adulto";
            END;
            rParPer."Codigo Ni¤o":
            BEGIN
              ni¤os_habitacion := ni¤os_habitacion +1;
              rRsv2."N§ persona" := ni¤os_habitacion;
              rRsv2."Tipo Persona Facturacion" := rParPer."Codigo Ni¤o";
            END;
            rParPer."Codigo Infant":
            BEGIN
              infants_habitacion := infants_habitacion + 1;
              rRsv2."N§ persona" := infants_habitacion;
              rRsv2."Tipo Persona Facturacion" := rParPer."Codigo Infant";
            END;
          END;
          rRsv2.MODIFY;
        UNTIL rRsv2.NEXT = 0;
      END;
      comprobar_ni¤o_habitacion(reserva, adultos_habitacion, ni¤os_habitacion, habitacion_anterior);
      comprobar_infant_habitacion(reserva, adultos_habitacion, ni¤os_habitacion, habitacion_anterior);
    END;

    PROCEDURE comprobar_ni¤o_habitacion@17(par_reserva@1103355000 : Record 7009743;VAR par_adultos@1103355001 : Integer;VAR par_ni¤os@1103355002 : Integer;par_habitacion@1103355003 : Code[10]);
    VAR
      reserva@1103355004 : Record 7009743;
    BEGIN
      // comprobar_ni¤o_habitacion

      reserva.RESET;
      reserva.SETCURRENTKEY(Delegacion,
                          "N§ Responsable",
                          "N§ Habitacion");
      reserva.SETRANGE(Delegacion      , par_reserva.Delegacion);
      reserva.SETRANGE("N§ Responsable", par_reserva."N§ Responsable");
      reserva.SETRANGE("N§ Habitacion" , par_habitacion);
      reserva.SETRANGE("Tipo Persona"  , rParPer."Codigo Ni¤o");
      IF reserva.FINDSET THEN
      BEGIN
        REPEAT
          IF w_pax_legal > par_adultos THEN
          BEGIN
            par_adultos := par_adultos + 1;
            reserva."N§ persona" := par_adultos;
            reserva."Tipo Persona Facturacion" := rParPer."Codigo Adulto";
            reserva.MODIFY;
          END;
        UNTIL reserva.NEXT = 0;
      END;
    END;

    PROCEDURE comprobar_infant_habitacion@22(par_reserva@1103355000 : Record 7009743;VAR par_adultos@1103355001 : Integer;VAR par_ni¤os@1103355002 : Integer;par_habitacion@1103355003 : Code[10]);
    VAR
      reserva@1103355004 : Record 7009743;
    BEGIN
      // comprobar_infant_habitacion

      reserva.RESET;
      reserva.SETCURRENTKEY(Delegacion,
                          "N§ Responsable",
                          "N§ Habitacion");
      reserva.SETRANGE(Delegacion      , par_reserva.Delegacion);
      reserva.SETRANGE("N§ Responsable", par_reserva."N§ Responsable");
      reserva.SETRANGE("N§ Habitacion" , par_habitacion);
      reserva.SETRANGE("Tipo Persona"  , rParPer."Codigo Infant");
      IF reserva.FINDSET THEN
      BEGIN
        REPEAT
          IF w_pax_legal > par_adultos THEN
          BEGIN
            par_adultos := par_adultos + 1;
            reserva."N§ persona" := par_adultos;
            reserva."Tipo Persona Facturacion" := rParPer."Codigo Adulto";
            reserva.MODIFY;
          END;
        UNTIL reserva.NEXT = 0;
      END;
    END;

    PROCEDURE Pasar_Auxiliar@16(rRsv@1103355000 : Record 7009743);
    VAR
      rCI@1103355001 : Record 7009772;
      rCIcnp@1103355002 : Record 7009773;
      rCab@1103355003 : Record 7009735;
      rLin@1103355004 : Record 7009736;
      cConcepto@1103355005 : Code[10];
      cCodigo@1103355006 : Code[10];
      iImporteTotal@1103355007 : Decimal;
      iPrecio@1103355008 : Decimal;
      oTipo@1103355009 : Option;
    BEGIN
      // Pasar_Auxiliar(rRsv : Record "Reserva Hotel")

      rCab.SETRANGE(Usuario, USERID());
      rLin.SETRANGE(Usuario, USERID());
      rCI.SETRANGE(Usuario, USERID());
      rCIcnp.SETRANGE(Usuario, USERID());

      rLin.SETCURRENTKEY(Usuario,
                         "Concepto Coste",
                         "Coste/Ingreso",
                         Delegacion,
                         "N§ Reserva");

      IF NOT rCab.FINDFIRST THEN
        EXIT;

      WITH rCI DO BEGIN
        rCab.CALCFIELDS("Total Coste", "Total Ingreso");
        INIT;
        Delegacion           := rRsv.Delegacion;
        Usuario              := USERID();
        TourOperador         := rRsv.TourOperador;
        Bono                 := rCab."N§ Bono";
        "N§ Reserva"         := rRsv."N§ Responsable";
        Coste                := rCab."Total Coste";
        Ingreso              := rCab."Total Ingreso";
        "Contrato compra"    := rRsv."Contrato compra";
        "Contrato venta"     := rRsv."Contrato venta";
        "Hotel pago"         := rCab.Hotel;
        "Hotel reservado"    := rRsv."Hotel reservado";
        "Tipo contrato"      := rRsv."Tipo contrato";
        "N§ Responsable"     := rRsv."N§ Responsable";
        "Fecha llegada"      := rRsv."Fecha entrada";
        "Nombre responsable" := rRsv.Nombre;
        "Hotel TO"           := rRsv."Hotel TO";
        "Regimen TO"         := rRsv."Regimen TO";
        "Habitacion TO"      := rRsv."Habitacion TO";
        "C¢d. divisa"        := rRsv."C¢d. divisa";
        "Fecha salida"       := rRsv."Fecha salida";
        Regimen              := rRsv.Regimen;
        Habitacion           := rRsv.Habitacion;
        "Fecha venta"        := rRsv."Fecha venta";
        "Touroperador Venta" := rRsv."TourOperador Venta";
        INSERT(TRUE);
      END;

      WITH rCIcnp DO BEGIN
        IF NOT rLin.FINDFIRST THEN
          EXIT;

        cConcepto := rLin."Concepto Coste";
        oTipo := rLin."Coste/Ingreso";
        REPEAT
          IF cConcepto <> rLin."Concepto Coste" THEN BEGIN
            INIT;
            Delegacion      := rRsv.Delegacion;
            Usuario         := USERID();
            TourOperador    := rRsv.TourOperador;
            Bono            := rLin."N§ Bono";
            "N§ Reserva"    := rRsv."N§ Responsable";
            "Hotel Pago"    := rLin."Hotel Pago";
            Concepto        := cConcepto;
            "Coste/Ingreso" := oTipo;
            Importe         := iImporteTotal;
            "Fecha llegada" := rRsv."Fecha entrada";
            "C¢d. divisa"   := rRsv."C¢d. divisa";
            "Orden Linea"   := rCI."Orden Linea";
            Precio          := iPrecio;
            "Codigo Precio" := cCodigo;
            INSERT;
            cConcepto := rLin."Concepto Coste";
            oTipo     := rLin."Coste/Ingreso";
            cCodigo   := rLin.Codigo;
            iImporteTotal := 0;
            iPrecio       := 0;
          END;
          iImporteTotal := iImporteTotal + rLin.Importe;
        UNTIL rLin.NEXT = 0;
        INIT;
        Delegacion      := rRsv.Delegacion;
        Usuario         := USERID();
        TourOperador    := rRsv.TourOperador;
        Bono            := rLin."N§ Bono";
        "N§ Reserva"    := rRsv."N§ Responsable";
        "Hotel Pago"    := rLin."Hotel Pago";
        Concepto        := cConcepto;
        "Coste/Ingreso" := oTipo;
        Importe         := iImporteTotal;
        "Fecha llegada" := rRsv."Fecha entrada";
        "Orden Linea"   := rCI."Orden Linea";
        "C¢d. divisa"   := rRsv."C¢d. divisa";
        Precio          := iPrecio;
        "Codigo Precio" := cCodigo;
        INSERT;
      END;
    END;

    PROCEDURE borrar_registros@18();
    VAR
      rCab@1103355000 : Record 7009735;
      rLin@1103355001 : Record 7009736;
      rErr@1103355002 : Record 7009737;
      rPerCal@1103355003 : Record 7009740;
      lrOfPer@1103355004 : Record 7009997;
    BEGIN
      // borrar_registros

      rCab.RESET;
      rCab.SETRANGE(Usuario, USERID());
      IF rCab.FINDSET(TRUE) THEN
        rCab.DELETEALL;
      rCab.RESET;

      rLin.RESET;
      rLin.SETRANGE(Usuario, USERID());
      IF rLin.FINDSET(TRUE) THEN
        rLin.DELETEALL;
      rLin.RESET;

      rErr.RESET;
      rErr.SETRANGE(Usuario, USERID());
      IF rErr.FINDSET(TRUE) THEN
        rErr.DELETEALL;
      rErr.RESET;

      rPerCal.RESET;
      rPerCal.SETRANGE(Usuario, USERID());
      IF rPerCal.FINDSET(TRUE) THEN
        rPerCal.DELETEALL;
      rPerCal.RESET;

      CLEAR(lrOfPer);
      lrOfPer.SETCURRENTKEY(Usuario);
      lrOfPer.SETRANGE(Usuario, USERID);
      IF lrOfPer.FINDSET(TRUE) THEN
        lrOfPer.DELETEALL;

      COMMIT;
    END;

    BEGIN
    {
      ## AJF 29/06/09

        .- (09/00319) cambio c¢digos de hotel de code10 a code20.

      $001 AJS 24102011 Cuando no se encuentra contrato de venta hay que dejarlo en blanco

      $002 AJS 14052012 Modifico para que no sea necesario el contrato de venta para que se calculen los conceptos
                        con tarifa propia (handling fee, Rep Service, ...)

      $003 JPT 02/08/12 GOC-LP-12019 Creo una nueva funci¢n CalculoReserva que es copia de calculo_reserva pero con un parametro para
      definir si calcular Costes/ingresos o ambos. Mantengo calculo_reserva que llamar  a su vez a la nueva, ya que esa funci¢n
      se utiliza en multiples lugares. Por defecto calculara tanto Costes como ingresos tal y como venia haciendose hasta ahora.

      $004 AJS 03042013 Hay que tener en cuenta que hay reservas que se han marcado para no calcular handling fee

      $005 AJS 26022014 Elimino las referencias a la tabla Bloqueo reserva (obsoleta)
    }
    END.
  }
}
