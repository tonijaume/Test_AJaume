OBJECT Codeunit 5702 Dist. Integration
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There are no items with cross reference: %1;ESP=No hay prods. con referencias cruzadas: %1';
      ItemCrossReference@1001 : Record 5717;
      SalesLine@1002 : Record 37;
      PurchLine@1003 : Record 39;
      ItemVariant@1007 : Record 5401;
      Item@1008 : Record 27;
      Found@1005 : Boolean;
      TempCrossRefItem@1006 : Code[20];
      Text001@1004 : TextConst 'ENU=The %1 for %2 %3 has changed from %4 to %5 since the Sales Order was created. Adjust the %6 on the Sales Order or the %1.;ESP=%1 de %2 %3 ha cambiado de %4 a %5 desde la creaci¢n del pedido de venta. Ajuste %6 o %1 en el pedido de venta.';

    PROCEDURE EnterSalesItemCrossRef@20(VAR SalesLine2@1000 : Record 37);
    BEGIN
      WITH SalesLine2 DO
        IF (Type = Type::Item) THEN BEGIN
          ItemCrossReference.RESET;
          ItemCrossReference.SETRANGE("Item No.","No.");
          ItemCrossReference.SETRANGE("Variant Code","Variant Code");
          ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
          ItemCrossReference.SETRANGE("Cross-Reference Type","Cross-Reference Type"::Customer);
          ItemCrossReference.SETRANGE("Cross-Reference Type No.","Sell-to Customer No.");
          ItemCrossReference.SETRANGE("Cross-Reference No.","Cross-Reference No.");
          IF ItemCrossReference.FINDFIRST THEN
            Found := TRUE
          ELSE BEGIN
            ItemCrossReference.SETRANGE("Cross-Reference No.");
            Found := ItemCrossReference.FINDFIRST;
          END;

          IF Found THEN BEGIN
            "Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
            "Unit of Measure (Cross Ref.)" := ItemCrossReference."Unit of Measure";
            "Cross-Reference Type" := ItemCrossReference."Cross-Reference Type";
            IF ItemCrossReference.Description <> '' THEN BEGIN
              Description := ItemCrossReference.Description;
              "Description 2" := '';
            END;
            "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
          END ELSE BEGIN
            "Cross-Reference No." := '';
            "Cross-Reference Type" := "Cross-Reference Type"::" ";
            "Cross-Reference Type No." := '';
            IF "Variant Code" <> '' THEN BEGIN
              ItemVariant.GET("No.","Variant Code");
              Description := ItemVariant.Description;
              "Description 2" := ItemVariant."Description 2";
            END ELSE BEGIN
              Item.GET("No.");
              Description := Item.Description;
              "Description 2" := Item."Description 2";
            END;
            GetItemTranslation;
          END;
        END;
    END;

    PROCEDURE ICRLookupSalesItem@2(VAR SalesLine2@1000 : Record 37;VAR ReturnedCrossRef@1001 : Record 5717);
    BEGIN
      WITH ItemCrossReference DO BEGIN
        SalesLine.COPY(SalesLine2);
        IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
          TempCrossRefItem := SalesLine2."Cross-Reference No.";

          RESET;
          SETCURRENTKEY(
            "Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.","Discontinue Bar Code");
          SETRANGE("Cross-Reference No.",SalesLine."Cross-Reference No.");
          SETFILTER("Cross-Reference Type",'<> %1',"Cross-Reference Type"::Vendor);
          SETRANGE("Discontinue Bar Code",FALSE);
          SETFILTER("Cross-Reference Type No.",'%1|%2',SalesLine."Sell-to Customer No.",'');
          SETRANGE("Item No.",SalesLine."No.");
          IF NOT FINDFIRST THEN BEGIN
            SETRANGE("Item No.");
            IF NOT FINDFIRST THEN
              ERROR(Text000,TempCrossRefItem);
            IF NEXT <> 0 THEN BEGIN
              SETRANGE("Cross-Reference Type No.",SalesLine."Sell-to Customer No.");
              IF FINDFIRST THEN
                IF NEXT <> 0 THEN BEGIN
                  SETRANGE("Cross-Reference Type No.");
                  IF FORM.RUNMODAL(FORM::"Cross Reference List",ItemCrossReference) <> ACTION::LookupOK
                  THEN
                    ERROR(Text000,TempCrossRefItem);
                END;
            END;
          END;
          ReturnedCrossRef.COPY(ItemCrossReference);
        END;
      END;
    END;

    PROCEDURE EnterPurchaseItemCrossRef@3(VAR PurchLine2@1000 : Record 39);
    BEGIN
      WITH PurchLine2 DO
        IF (Type = Type::Item) THEN BEGIN
          ItemCrossReference.RESET;
          ItemCrossReference.SETRANGE("Item No.","No.");
          ItemCrossReference.SETRANGE("Variant Code","Variant Code");
          ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
          ItemCrossReference.SETRANGE("Cross-Reference Type","Cross-Reference Type"::Vendor);
          ItemCrossReference.SETRANGE("Cross-Reference Type No.","Buy-from Vendor No.");
          ItemCrossReference.SETRANGE("Cross-Reference No.","Cross-Reference No.");
          IF ItemCrossReference.FINDFIRST THEN
            Found := TRUE
          ELSE BEGIN
            ItemCrossReference.SETRANGE("Cross-Reference No.");
            Found := ItemCrossReference.FINDFIRST;
          END;

          IF Found THEN BEGIN
            "Cross-Reference No." := ItemCrossReference."Cross-Reference No.";
            "Unit of Measure (Cross Ref.)" := ItemCrossReference."Unit of Measure";
            "Cross-Reference Type" := ItemCrossReference."Cross-Reference Type";
            "Cross-Reference Type No." := ItemCrossReference."Cross-Reference Type No.";
            IF ItemCrossReference.Description <> '' THEN BEGIN
              Description := ItemCrossReference.Description;
              "Description 2" := '';
            END;
          END ELSE BEGIN
            "Cross-Reference No." := '';
            "Cross-Reference Type" := "Cross-Reference Type"::" ";
            "Cross-Reference Type No." := '';
            IF "Variant Code" <> '' THEN BEGIN
              ItemVariant.GET("No.","Variant Code");
              Description := ItemVariant.Description;
              "Description 2" := ItemVariant."Description 2";
            END ELSE BEGIN
              Item.GET("No.");
              Description := Item.Description;
              "Description 2" := Item."Description 2";
            END;
            GetItemTranslation;
          END;
        END;
    END;

    PROCEDURE ICRLookupPurchaseItem@4(VAR PurchLine2@1000 : Record 39;VAR ReturnedCrossRef@1001 : Record 5717);
    BEGIN
      WITH ItemCrossReference DO BEGIN
        PurchLine.COPY(PurchLine2);
        IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
          TempCrossRefItem := PurchLine2."Cross-Reference No.";
          RESET;
          SETCURRENTKEY("Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.","Discontinue Bar Code");
          SETRANGE("Cross-Reference No.",PurchLine."Cross-Reference No.");
          SETFILTER("Cross-Reference Type",'<> %1',"Cross-Reference Type"::Customer);
          SETRANGE("Discontinue Bar Code",FALSE);
          SETFILTER("Cross-Reference Type No.",'%1|%2',PurchLine."Buy-from Vendor No.",'');
          SETRANGE("Item No.",PurchLine."No.");
          IF NOT FINDFIRST THEN BEGIN
            SETRANGE("Item No.");
            IF NOT FINDFIRST THEN
              ERROR(Text000,TempCrossRefItem);
            IF NEXT <> 0 THEN BEGIN
              SETRANGE("Cross-Reference Type No.",PurchLine."Buy-from Vendor No.");
              IF FINDFIRST THEN
                IF NEXT <> 0 THEN BEGIN
                  SETRANGE("Cross-Reference Type No.");
                  IF FORM.RUNMODAL(FORM::"Cross Reference List",ItemCrossReference) <> ACTION::LookupOK
                  THEN
                    ERROR(Text000,TempCrossRefItem);
                END;
            END;
          END;
          ReturnedCrossRef.COPY(ItemCrossReference);
        END;
      END;
    END;

    PROCEDURE CreateItemCrossReference@1(ItemVend@1000 : Record 99);
    VAR
      Item@1002 : Record 27;
      ItemCrossReference2@1001 : Record 5717;
    BEGIN
      ItemCrossReference2.RESET;
      ItemCrossReference2.SETRANGE("Item No.",ItemVend."Item No.");
      ItemCrossReference2.SETRANGE("Variant Code",ItemVend."Variant Code");
      ItemCrossReference2.SETRANGE("Cross-Reference Type",ItemCrossReference2."Cross-Reference Type"::Vendor);
      ItemCrossReference2.SETRANGE("Cross-Reference Type No.",ItemVend."Vendor No.");
      ItemCrossReference2.SETRANGE("Cross-Reference No.",ItemVend."Vendor Item No.");
      IF NOT ItemCrossReference2.FINDFIRST THEN BEGIN
        ItemCrossReference2.INIT;
        ItemCrossReference2.VALIDATE("Item No.",ItemVend."Item No.");
        ItemCrossReference2.VALIDATE("Variant Code",ItemVend."Variant Code");
        ItemCrossReference2.VALIDATE("Cross-Reference Type",ItemCrossReference2."Cross-Reference Type"::Vendor);
        ItemCrossReference2.VALIDATE("Cross-Reference Type No.",ItemVend."Vendor No.");
        ItemCrossReference2."Cross-Reference No." := ItemVend."Vendor Item No.";
        Item.GET(ItemVend."Item No.");
        IF ItemCrossReference2."Unit of Measure" = '' THEN
          ItemCrossReference2.VALIDATE("Unit of Measure",Item."Base Unit of Measure");
        ItemCrossReference2.INSERT;
      END;
    END;

    PROCEDURE DeleteItemCrossReference@9(ItemVend@1000 : Record 99);
    VAR
      ItemCrossReference2@1001 : Record 5717;
    BEGIN
      ItemCrossReference2.RESET;
      ItemCrossReference2.SETRANGE("Item No.",ItemVend."Item No.");
      ItemCrossReference2.SETRANGE("Variant Code",ItemVend."Variant Code");
      ItemCrossReference2.SETRANGE("Cross-Reference Type",ItemCrossReference2."Cross-Reference Type"::Vendor);
      ItemCrossReference2.SETRANGE("Cross-Reference Type No.",ItemVend."Vendor No.");
      ItemCrossReference2.SETRANGE("Cross-Reference No.",ItemVend."Vendor Item No.");
      IF ItemCrossReference2.FINDFIRST THEN
        ItemCrossReference2.DELETEALL;
    END;

    PROCEDURE UpdateItemCrossReference@6(ItemVend@1000 : Record 99;xItemVend@1001 : Record 99);
    VAR
      ItemCrossReference2@1003 : Record 5717;
      ItemCrossReference3@1004 : Record 5717;
    BEGIN
      ItemCrossReference2.RESET;
      ItemCrossReference2.SETRANGE("Item No.",xItemVend."Item No.");
      ItemCrossReference2.SETRANGE("Variant Code",xItemVend."Variant Code");
      ItemCrossReference2.SETRANGE("Cross-Reference Type",ItemCrossReference2."Cross-Reference Type"::Vendor);
      ItemCrossReference2.SETRANGE("Cross-Reference Type No.",xItemVend."Vendor No.");
      ItemCrossReference2.SETRANGE("Cross-Reference No.",xItemVend."Vendor Item No.");
      IF ItemCrossReference2.FINDSET THEN BEGIN
        REPEAT
          ItemCrossReference3 := ItemCrossReference2;
          ItemCrossReference3."Cross-Reference No." := xItemVend."Vendor Item No.";
          ItemCrossReference3.DELETE;
          CreateItemCrossReference(ItemVend);
        UNTIL ItemCrossReference2.NEXT = 0;
      END ELSE
        CreateItemCrossReference(ItemVend);
    END;

    PROCEDURE GetSpecialOrders@5(VAR PurchHeader@1000 : Record 38);
    VAR
      SalesHeader@1001 : Record 36;
      PurchLine2@1005 : Record 39;
      ItemUnitOfMeasure@1006 : Record 5404;
      TransferExtendedText@1002 : Codeunit 378;
      CopyDocMgt@1004 : Codeunit 6620;
      NextLineNo@1003 : Integer;
    BEGIN
      WITH PurchHeader DO BEGIN
        TESTFIELD("Document Type","Document Type"::Order);

        SalesHeader.SETCURRENTKEY("Document Type","Sell-to Customer No.");
        SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
        SalesHeader.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
        IF (FORM.RUNMODAL(FORM::"Sales List",SalesHeader) <> ACTION::LookupOK) OR
           (SalesHeader."No." = '')
        THEN
          EXIT;
        IF RECORDLEVELLOCKING THEN
          LOCKTABLE;
        SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::Order);
        TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
        TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
        PurchHeader.SetShipToForSpecOrder;

        PurchLine.LOCKTABLE;
        IF NOT RECORDLEVELLOCKING THEN
          LOCKTABLE(TRUE,TRUE); // Only version check
        SalesLine.LOCKTABLE;
        IF NOT RECORDLEVELLOCKING THEN
          SalesHeader.LOCKTABLE(TRUE,TRUE); // Only version check

        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
        PurchLine.SETRANGE("Document No.","No.");
        IF PurchLine.FINDLAST THEN
          NextLineNo := PurchLine."Line No." + 10000
        ELSE
          NextLineNo := 10000;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.SETRANGE("Special Order",TRUE);
        SalesLine.SETFILTER("Outstanding Quantity",'<>0');
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETFILTER("No.",'<>%1','');
        SalesLine.SETRANGE("Special Order Purch. Line No.",0);

        IF SalesLine.FINDSET THEN
          REPEAT
            IF (SalesLine.Type = SalesLine.Type::Item) AND ItemUnitOfMeasure.GET(SalesLine."No.",SalesLine."Unit of Measure") THEN
              IF SalesLine."Qty. per Unit of Measure" <> ItemUnitOfMeasure."Qty. per Unit of Measure" THEN
                ERROR(Text001,
                  SalesLine.FIELDCAPTION("Qty. per Unit of Measure"),
                  SalesLine.FIELDCAPTION("Unit of Measure"),
                  SalesLine."Unit of Measure",
                  SalesLine."Qty. per Unit of Measure",
                  ItemUnitOfMeasure."Qty. per Unit of Measure",
                  SalesLine.FIELDCAPTION(Quantity));
            PurchLine.INIT;
            PurchLine."Document Type" := PurchLine."Document Type"::Order;
            PurchLine."Document No." := "No.";
            PurchLine."Line No." := NextLineNo;
            CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
            PurchLine."Special Order" := TRUE;
            PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
            PurchLine."Special Order Sales No." := SalesLine."Document No.";
            PurchLine."Special Order Sales Line No." := SalesLine."Line No.";
            PurchLine.INSERT;
            NextLineNo := NextLineNo + 10000;

            SalesLine."Unit Cost (LCY)" := PurchLine."Unit Cost (LCY)";
            SalesLine.VALIDATE("Unit Cost (LCY)");
            SalesLine."Special Order Purchase No." := PurchLine."Document No.";
            SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
            SalesLine.MODIFY;
            IF TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE) THEN BEGIN
              TransferExtendedText.InsertPurchExtText(PurchLine);
              PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
              PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
              IF PurchLine2.FINDLAST THEN
                 NextLineNo := PurchLine2."Line No.";
              NextLineNo := NextLineNo + 10000;
            END;
          UNTIL SalesLine.NEXT = 0
        ELSE
          ERROR(
            Text000,
            SalesHeader."No.");

        MODIFY; // Only version check
        SalesHeader.MODIFY; // Only version check
      END;
    END;

    BEGIN
    END.
  }
}
