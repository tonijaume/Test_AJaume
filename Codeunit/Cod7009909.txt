OBJECT Codeunit 7009909 Funciones importacion reservas
{
  OBJECT-PROPERTIES
  {
    Date=17/02/15;
    Time=10:01:31;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            SeleccionarFicheros;
          END;

  }
  CODE
  {
    VAR
      Text000@1103355006 : TextConst 'ENU=Start importation?;ESP=¨Iniciar la importacion?';
      Text001@1103355007 : TextConst 'ENU=Unable to connect ftp;ESP=No se ha conseguido realizar conexi¢n ftp';
      Text002@1103355008 : TextConst 'ENU=@*.TXT;ESP=@*.TXT';
      Text003@1103355009 : TextConst 'ENU=Any file was found for this local office;ESP=No se ha encontrado ning£n archivo para esta delegaci¢n';
      Text004@1103355010 : TextConst 'ENU=Any file was found;ESP=No se ha encontrado ning£n archivo';
      Text005@1103355011 : TextConst 'ENU=Process finished;ESP=Proceso Terminado';
      Text006@1103355012 : TextConst 'ENU=scpt.ftp;ESP=scpt.ftp';
      Text007@1103355013 : TextConst 'ENU=*gocaribic*.txt;ESP=*gocaribic*.txt';
      Text008@1103355014 : TextConst 'ENU=o %1;ESP=o %1';
      Text009@1103355015 : TextConst 'ENU=binary;ESP=binary';
      Text010@1103355016 : TextConst 'ENU=put %1 %2;ESP=put %1 %2';
      Text011@1103355017 : TextConst 'ENU=mget %1 %2;ESP=mget %1 %2';
      Text012@1103355018 : TextConst 'ENU=lcd %1;ESP=lcd %1';
      Text013@1103355019 : TextConst 'ENU=mget %1;ESP=mget %1';
      Text014@1103355020 : TextConst 'ENU=bye;ESP=bye';
      Text015@1103355021 : TextConst 'ENU=ftp -v -i -s:;ESP=ftp -v -i -s:';
      Text016@1103355022 : TextConst 'ENU=Interface parameters does not exist;ESP=No existe el fichero de Parametros de Interfase';
      Text017@1103355023 : TextConst 'ENU=File %1 does not exist;ESP=No existe el fichero %1.';
      Text018@1103355024 : TextConst 'ENU=Error when opening file %1;ESP=Error al abrir archivo %1';
      Text019@1103355025 : TextConst 'ENU=Touroperator was not found;ESP=No se encuentra touroperador';
      Text020@1103355026 : TextConst 'ENU=Touroperator %1 was not found;ESP=No se encuentra Touroperador %1';
      Text021@1103355027 : TextConst 'ENU=H;ESP=H';
      Text022@1103355028 : TextConst 'ENU=3FLG;ESP=3FLG';
      Text023@1103355029 : TextConst 'ENU=3D1100L;ESP=3D1100L';
      Text024@1103355030 : TextConst 'ENU=3D1100L1;ESP=3D1100L1';
      Text025@1103355031 : TextConst 'ENU=3D1100L2;ESP=3D1100L2';
      Text026@1103355032 : TextConst 'ENU=3D1100L3;ESP=3D1100L3';
      Text027@1103355033 : TextConst 'ENU=3D1100L4;ESP=3D1100L4';
      Text028@1103355034 : TextConst 'ENU=3D1100L5;ESP=3D1100L5';
      Text029@1103355035 : TextConst 'ENU=3D1100L6;ESP=3D1100L6';
      Text030@1103355036 : TextConst 'ENU=L1;ESP=L1';
      Text031@1103355037 : TextConst 'ENU=L2;ESP=L2';
      Text032@1103355038 : TextConst 'ENU=File:%1\Hotel %2 belongs to local office %3;ESP=Archivo:%1\El Hotel %2 pertenece a la delegacion %3';
      Text035@1103355041 : TextConst 'ENU=Voucher No. Was not specified;ESP=No se ha especificado n§ de bono';
      Text036@1103355042 : TextConst 'ENU=Name was not specified;ESP=No se ha especificado nombre';
      Text037@1103355043 : TextConst 'ENU=Type of person %1 was not found;ESP=No se encuentra tipo de persona %1';
      Text038@1103355044 : TextConst 'ENU=F;ESP=F';
      Text039@1103355045 : TextConst 'ENU=Board was not specified;ESP=No se ha especificado R‚gimen';
      Text040@1103355046 : TextConst 'ENU=Type of room was not specified;ESP=No se ha especificado Tipo de Habitaci¢n';
      Text042@1103355048 : TextConst 'ENU=<Month Text><Year>;ESP=<Month Text><Year>';
      Text043@1103355049 : TextConst 'ENU=IMP_;ESP=IMP_';
      Text044@1103355050 : TextConst 'ENU=File %1 already exists;ESP=El archivo %1 ya existe';
      Text045@1103355051 : TextConst 'ENU=3D3002;ESP=3D3002';
      Text046@1103355052 : TextConst 'ENU=3D3002ZIEL;ESP=3D3002ZIEL';
      Text047@1103355053 : TextConst 'ENU=CRUCR;ESP=CRUCR';
      Text048@1103355054 : TextConst 'ENU=CRU;ESP=CRU';
      Text049@1103355055 : TextConst 'ENU=Cruise;ESP=Crucero';
      Text050@1103355056 : TextConst 'ENU=SG;ESP=SG';
      Text051@1103355057 : TextConst 'ENU=Fictitious Company;ESP=Compa¤ia Ficticia';
      rParPer@1103355000 : Record 7009701;
      rPar@1103355001 : Record 7010081;
      rParAg@1103355002 : Record 7009700;
      rEmp@1103355003 : Record 7009859;
      rTempPaxsdia@1103355004 : TEMPORARY Record 7010079;
      cFunImpLTU@1103355005 : Codeunit 7009748;
      Text052@1103355039 : TextConst 'ENU=Hotel Exchange %1 %2 %3 was not found;ESP=No se encuentra Conversi¢n Hotel %1 %2 %3';
      Text053@1103355040 : TextConst 'ENU=TTOO %1 was not found;ESP=No se encuentra el TTOO %1';
      wVentana@1103355047 : Dialog;
      Text054@1103355058 : TextConst 'ENU=Voucher number does not fulfill the requirements of change;ESP=El numero de bono no cumple las condiciones para el cambio';
      Text055@1103355059 : TextConst 'ENU=Would you like to change touroperator of voucher %1 to %2;ESP=Desea cambiar el touroperador del bono %1 a %2.';

    PROCEDURE IniciarImportacion@12(VAR prArchivos@1103355000 : Record 2000000022);
    VAR
      lwOk@1103355001 : Boolean;
    BEGIN
      // IniciarImportacion

      rEmp.RESET;
      rParAg.GET;

      IF prArchivos.FINDSET THEN BEGIN
        lwOk := FALSE;
        REPEAT
          lwOk := lwOk OR ImportarArchivo(prArchivos.Path + prArchivos.Name);
        UNTIL prArchivos.NEXT=0;
        IF NOT lwOk THEN
          ERROR(Text003);
      END
      ELSE
        ERROR(Text004);

      MESSAGE(Text005);
    END;

    PROCEDURE SeleccionarFicheros@6();
    VAR
      lrArchivos@1103355000 : Record 2000000022;
      lwRuta@1103355001 : Text[250];
      lwDirect@1103355002 : Form 7010229;
    BEGIN
      // SeleccionarFicheros

      rPar.GET;
      lwDirect.FiltrarDirectorio(rPar."Directorio Importacion");
      IF NOT(lwDirect.RUNMODAL IN [ACTION::LookupCancel,ACTION::Cancel]) THEN BEGIN
        IF lwDirect.OK THEN BEGIN
          lwDirect.PasarArchivos(lrArchivos);
          lrArchivos.SETRANGE("Is a file",TRUE);
          lrArchivos.SETFILTER(Name,'%1',Text002);
          IniciarImportacion(lrArchivos);
        END;
      END;
    END;

    PROCEDURE ImportarArchivo@1(pwNombreArchivo@1103355000 : Text[150]) : Boolean;
    VAR
      lrConvHotel@1103355001 : Record 7009725;
      lrHotel@1103355002 : Record 7010078;
      lrHot@1103355003 : Record 7009724;
      lrPaxs@1103355004 : Record 7010079;
      lrVue@1103355005 : Record 7010077;
      lrCab@1103355006 : Record 7010076;
      lrCab2@1103355051 : Record 7010076;
      lrServ@1103355007 : Record 7010080;
      lrTempServ@1103355008 : TEMPORARY Record 7010080;
      lrComent@1103355009 : Record 7009858;
      lrTOOs@1103355010 : Record 7009717;
      lrFich@1103355011 : Record 7010082;
      lrPlanVue@1103355012 : Record 7009754;
      lrDelegacion@1103355013 : Record 7009718;
      lrConvTO@1103355055 : Record 7010161;
      lrDigTO@1100253000 : Record 7009820;
      lwArchivo@1103355014 : File;
      lwTexto@1103355015 : Text[200];
      lwTexto2@1103355016 : Text[200];
      w_idPax@1103355017 : Integer;
      w_idPax2@1103355018 : Integer;
      wEntero@1103355019 : Integer;
      wFecha@1103355020 : Date;
      lwFechaSalida@1103355021 : Date;
      lwEstancia@1103355022 : Integer;
      lwVuelo@1103355023 : Code[10];
      lwIdVuelo@1103355024 : Integer;
      lwCiaVue@1103355025 : Code[10];
      lwIdHotel@1103355026 : Integer;
      lwContador@1103355027 : Integer;
      lwHora@1103355028 : Time;
      lwTTOO@1103355029 : Code[10];
      lwTTOOAg@1103355054 : Code[10];
      lwTTOOFichero@1100253002 : Code[10];
      lwIdCab@1103355030 : Integer;
      lwHab@1103355031 : Code[6];
      lwReg@1103355032 : Code[1];
      lwHotel@1103355033 : Code[20];
      lwPos@1103355034 : Integer;
      lwChar@1103355035 : Char;
      lwTipPer@1103355036 : ',Adulto,Ni¤o,Infant';
      lwOk@1103355037 : Boolean;
      lwNumHoteles@1103355038 : Integer;
      wlfichero@1103355039 : Integer;
      lwIDServ@1103355040 : Integer;
      lwBono@1103355041 : Code[10];
      lwDelegacion@1103355042 : Code[10];
      lwIATA@1103355048 : Code[10];
      lwExtra@1103355053 : Code[10];
      lwFechaEntrada@1103355043 : Date;
      lwExisteOcupante@1103355044 : ARRAY [2] OF Boolean;
      lwNumHabs@1103355045 : Integer;
      lwEsvuelo@1103355046 : Boolean;
      lwEstado@1103355047 : 'M,S';
      lwExiste@1103355049 : Boolean;
      lwModifica@1103355050 : Boolean;
      lwFicticioExtra@1103355052 : Boolean;
      lwDigBono@1100253001 : Code[2];
    BEGIN
      // ImportarArchivo

      IF ComprobarHoteles(pwNombreArchivo, TRUE) THEN BEGIN
        EXIT(TRUE);
      END;

      lrFich.RESET;
      IF lrFich.FINDLAST THEN
        wlfichero := lrFich."N§ Fichero" + 1
      ELSE
        wlfichero := 1;

      CLEAR(lwTexto)  ;
      CLEAR(lwArchivo);
      CLEAR(w_idPax)  ;
      CLEAR(w_idPax2);
      CLEAR(lwIdVuelo);
      CLEAR(lwIdCab)  ;
      CLEAR(lwIdHotel);
      CLEAR(lwNumHoteles);
      CLEAR(lwIDServ);
      CLEAR(lrCab);

      lrTempServ.RESET;
      IF lrTempServ.FINDSET(TRUE) THEN
        lrTempServ.DELETEALL;

      IF NOT rPar.FINDFIRST THEN
        ERROR(Text016);

      IF NOT EXISTS(pwNombreArchivo) THEN
        ERROR(Text017, pwNombreArchivo);

      lwArchivo.TEXTMODE(TRUE);

      IF NOT lwArchivo.OPEN(pwNombreArchivo) THEN
        ERROR(STRSUBSTNO(Text018, pwNombreArchivo));
      lwArchivo.SEEK(0);
      //  Lee la cabecera para determinar el touroperador
      lwArchivo.READ(lwTexto);
      CLEAR(lwTTOO);
      lwPos :=11;
      REPEAT
        lwChar := lwTexto[lwPos];
        lwTTOO := lwTTOO + FORMAT(lwChar);
        lwPos+=1;
      UNTIL (lwChar=' ') OR (lwPos>=STRLEN(lwTexto)) OR (STRLEN(lwTTOO)=10);

      lwTTOOFichero := lwTTOO;

      CLEAR(lwOk);

      //-$003CLEAR(lwTTOOAg);
      //-$003IF lrConvTO.GET(lwTTOO) THEN
      //-$003  lwTTOOAg := lrConvTO."Touroperador Atennea";
      lwTTOOAg := lrConvTO.ConversionTouroperador(lwTTOO, '');

      // Borramos todas las referencias de la tabla temporal
      CLEAR(rTempPaxsdia);
      IF rTempPaxsdia.FIND('-') THEN
        rTempPaxsdia.DELETEALL;

      REPEAT
        lwArchivo.READ(lwTexto);
        lwTexto2 := COPYSTR(lwTexto,1,1);
        CASE lwTexto2 OF
          // HOTEL
          Text021:BEGIN
                CLEAR(lrHot);
                lwHotel := COPYSTR(lwTexto,6,10);

                // AJS 17.08.2005
                // Cambio en los codigos de los hoteles de transfer aereo
                // lwEsvuelo := STRPOS(UPPERCASE(lwHotel),Text022) <> 0;

                // lwPos := STRPOS(UPPERCASE(lwHotel), Text023);

                // AJS 05.10.2005
                // Se incluyen nuevos codigos para indicar los transfer aereos


                // AJS 16.12.2005
                // Cambio en los codigos de hoteles de transfer aereo

                lwPos := 0;
                IF lwHotel IN [Text024, Text025, Text026, Text027, Text028, Text029] THEN
                  lwPos := 1;

                //lwPos := STRPOS(UPPERCASE(lwHotel), Text030);
                //IF lwPos = 0 THEN
                // lwPos := STRPOS(UPPERCASE(lwHotel), Text031);

                lwEsvuelo := lwPos <> 0;

                // AJS 02.11.2005
                // Si es un transfer aereo hay que comprobar si la delegacion esta marcada para trabajar con estos codigos
                // como si fueran hoteles normales, para poder hacer el pago en Hotel Payment

                IF lwEsvuelo THEN BEGIN
                  lrDelegacion.FIND('-');
                  IF lrDelegacion."Pago transfer aereo Hotel Paym" THEN
                    lwEsvuelo := FALSE;
                END;


                // Comprobamos que la delegaci¢n a la que importamos sea la correcta
                lwDelegacion := COPYSTR(lwTexto,2,3);
                lwOk := rEmp.GET(0,lwDelegacion,COMPANYNAME);
                IF lwOk THEN
                  lwNumHoteles +=1;

                {* Se elimina este mensaje de advertencia por peticion de Micheline
                IF NOT lwOk THEN
                  MESSAGE(Text032,pwNombreArchivo,lwHotel,COPYSTR(lwTexto,2,3));
                *}

                // AJS 14.05.2007
                // La conversion de hotel se puede hacer por touroperador venta o dejandolo en blanco para indicar
                // una conversion generica para el touroperador de compra
                // AJF 23/02/09
                // mantenemos una variable para saber si el hotel es un extra disfrazado de hotel ficticio.
                lwFicticioExtra := FALSE;
                CLEAR(lwExtra);
                IF lwOk THEN BEGIN
                  IF NOT lwEsvuelo THEN BEGIN
                    IF lwTTOOAg = '' THEN
                      ERROR(Text053, lwTTOO);
                    // JPT 24/03/09 Obligamos a que las conversiones existan antes de importar
                    // Eso es as¡ porque es necesario que los hoteles ficctios est‚n ya entrados
                    // En caso contrario los paxes se podrian duplicar
                    lrConvHotel.SETRANGE(TourOperador        , rPar."Touroperador importacion");
                    lrConvHotel.SETRANGE("Touroperador venta", lwTTOOAg);
                    lrConvHotel.SETRANGE("Hotel TO"          , lwHotel);
                    IF NOT lrConvHotel.FINDFIRST THEN BEGIN
                      lrConvHotel.SETRANGE("Touroperador venta", '');
                      IF NOT lrConvHotel.FIND('-') THEN
                        // CLEAR(lrConvHotel);
                        ERROR(Text052, rPar."Touroperador importacion", lwTTOOAg, lwHotel);
                    END;

                    lrConvHotel.TESTFIELD("Hotel estancia");
                    lrHot.GET(lrConvHotel."Hotel estancia");
                    lwFicticioExtra := lrHot."Hotel Ficticio";
                    IF lrHot."Hotel Ficticio" THEN
                      lwExtra := lwHotel;
                  END;
                END;

                CLEAR(lwHab);
                CLEAR(lwReg);
              END;
          // Inserta Pax
          'M', 'S': IF lwOk THEN BEGIN
                CLEAR(lwNumHabs);
                IF DELCHR(COPYSTR(lwTexto,83,4),'<>') <> '' THEN BEGIN
                  lwHab := DELCHR(COPYSTR(lwTexto,83,4),'<>');
                  IF NOT EVALUATE(lwNumHabs, COPYSTR(lwTexto,87,3)) THEN
                    CLEAR(lwNumHabs);
                END;
                lwBono := COPYSTR(lwTexto,2,8);

                //. Buscamos si existe conversion por los primeros digitos del bono
                //. caso especial XITS que viene en fichero de ITS
                lwDigBono := COPYSTR(lwBono, 1, 2);
                lrDigTO.SETRANGE(Cod, lwDigBono);
                IF lrDigTO.FINDFIRST THEN
                  lwTTOO := lrDigTO.Touroperador
                ELSE
                  lwTTOO := lwTTOOFichero;

                lwTexto2 := COPYSTR(lwTexto,1,10);

                IF NOT EVALUATE (wFecha,COPYSTR(lwTexto,46,8)) THEN
                  CLEAR(wFecha);

                IF NOT EVALUATE(lwFechaEntrada,COPYSTR(lwTexto,117,8)) THEN
                  lwFechaEntrada := 0D;

                //-$002CLEAR(wFecha);

                CLEAR(lwFechaSalida);
                IF NOT EVALUATE(lwEstancia,COPYSTR(lwTexto,94,2)) THEN
                  lwEstancia := 1;
                IF lwFechaEntrada <> 0D  THEN
                  lwFechaSalida := lwFechaEntrada + lwEstancia;

                TrataCrucero (lwHotel,lwFechaEntrada,lwFechaSalida,lwTexto,lwEsvuelo); // Si el hotel es un crucero le a¤ade los vuelos

                lrPaxs.INIT;
                lrPaxs.Fichero        := wlfichero;
                lrPaxs.TourOperador   := lwTTOO;
                lrPaxs.Bono           := COPYSTR(lwTexto,2,8);

                //-$001lrPaxs.Temporada      := rPar."Temporada Importacion";
                lrPaxs.Temporada := FORMAT(DATE2DMY(wFecha, 3)); //+$001

                lrPaxs.Contador       := ContPax(lrPaxs);
                lrPaxs."Tipo Persona" := COPYSTR(lwTexto,10,4);
                lrPaxs.Nombre         := COPYSTR(lwTexto,10,4) + ' ' + COPYSTR(lwTexto, 14, 25);
                IF DELCHR(COPYSTR(lwTexto,83,4),'<>',' ') <> '' THEN
                  lwHab := COPYSTR(lwTexto,83,4);

                CLEAR(lwEstado);

                CASE lwTexto[1] OF
                  'M' : lwEstado := lwEstado::M; // Inserci¢n
                  'S' : lwEstado := lwEstado::S; // Borrado
                END;

                CASE lwEstado OF
                  lwEstado::M : lrPaxs."Tipo Registro" := lrPaxs."Tipo Registro"::Ok;           // Inserci¢n
                  lwEstado::S : lrPaxs."Tipo Registro" := lrPaxs."Tipo Registro"::Cancelacion; // Borrado
                END;

                IF EVALUATE(wEntero , COPYSTR(lwTexto,44,2)) THEN
                  lrPaxs.Edad := wEntero;
                // Seg£n el tipo de conexi¢n
                lwTexto2 := COPYSTR(lwTexto,125,1);

                // Si se encuentra con otra reserva con el mismo nombre pero que se duplique en fechas,
                // incrementa el contador de nombres

                lwExiste:= BuscaNombre(lrPaxs,lwFechaEntrada,lwFechaSalida,w_idPax, lwExtra);

                IF lwExiste THEN BEGIN // Si existe el pax unicamente hace un control de fechas
                  lwModifica := lrPaxs."Tipo Registro"= lrPaxs."Tipo Registro"::Modificacion;
                  lrPaxs.FIND; // recuperamos el puntero
                  IF NOT lwFicticioExtra THEN BEGIN
                    // Controla fechas en Pax
                    IF (lrPaxs."Fecha Entrada"=0D) OR (lrPaxs."Fecha Entrada" > lwFechaEntrada) THEN
                      lrPaxs."Fecha Entrada" := lwFechaEntrada;
                    IF lrPaxs."Fecha Salida"< lwFechaSalida THEN
                      lrPaxs."Fecha Salida":= lwFechaSalida;
                  END;
                  IF lwModifica THEN
                    lrPaxs."Tipo Registro" := lrPaxs."Tipo Registro"::Modificacion;
                  lrPaxs.MODIFY;
                END
                ELSE BEGIN // Si no existe crea un nuevo ocupante
                  // Ya se le ha insertado el IdPax
                  IF NOT lwFicticioExtra THEN BEGIN
                    lrPaxs."Fecha Entrada" := lwFechaEntrada;
                    lrPaxs."Fecha Salida"  := lwFechaSalida;
                  END;
                  lrPaxs.INSERT;
                END;


                // Si no existe la cabecera la crea
                lrCab.RESET;
                lrCab.SETRANGE(Fichero      , wlfichero);
                lrCab.SETRANGE(TourOperador , lwTTOO);
                lrCab.SETRANGE(Bono         , lrPaxs.Bono);

                //-$001lrCab.SETRANGE(Temporada    , rPar."Temporada Importacion");
                lrCab.SETRANGE(Temporada    , lrPaxs.Temporada); //+$001
                IF NOT lrCab.FIND('-') THEN BEGIN

                  lrCab.INIT;
                  lrCab.Fichero           := wlfichero;
                  lwIdCab +=1;
                  lrCab."ID Cabecera"     := lwIdCab;
                  lrCab.TourOperador      := lwTTOO;
                  lrCab.Bono              := lrPaxs.Bono;

                  //-$001lrCab.Temporada := rPar."Temporada Importacion";
                  lrCab.Temporada := lrPaxs.Temporada; //+$001

                  lrCab."Fecha creacion"  := wFecha;
                  lrCab."Usuario proceso" := USERID;
                  lrCab."Fecha Entrada"   := lrPaxs."Fecha Entrada";

                  CASE  lwEstado OF
                    lwEstado::M: lrCab."Tipo Registro" :=lrCab."Tipo Registro"::Alta;
                    lwEstado::S: lrCab."Tipo Registro" :=lrCab."Tipo Registro"::Borrado;
                  END;
                  lrCab.INSERT;

                  // CLEAR(lwHab);
                  CLEAR(lwReg);
                  CLEAR(lrVue);
                  CLEAR(lrHotel);
                END;
                IF lrPaxs.Bono ='' THEN
                  cFunImpLTU.inserta_error(lrCab,Text035);
                IF lrPaxs.Nombre='' THEN
                  cFunImpLTU.inserta_error(lrCab,Text036);

                lwTipPer := TipoPax(lrPaxs.TourOperador,lrPaxs."Tipo Persona");
                CASE lwTipPer OF
                  lwTipPer::Adulto : lrCab.Adultos+=1;
                  lwTipPer::Ni¤o   : lrCab.Ni¤os  +=1;
                  lwTipPer::Infant : lrCab.Infants+=1;
                  ELSE cFunImpLTU.inserta_error(lrCab,STRSUBSTNO(Text037 ,lrPaxs."Tipo Persona"));
                END;
                IF ((wFecha<>0D) AND (wFecha<lrCab."Fecha creacion")) OR (lrCab."Fecha creacion"=0D) THEN
                  lrCab."Fecha creacion" := wFecha;

                lrCab2 := lrCab;
                CASE  lwEstado OF
                  lwEstado::M: IF lrCab."Tipo Registro" <> lrCab."Tipo Registro"::Alta THEN
                    lrCab."Tipo Registro" :=lrCab."Tipo Registro"::Modificacion;
                  lwEstado::S: IF lrCab."Tipo Registro" <> lrCab."Tipo Registro"::Borrado  THEN
                    lrCab."Tipo Registro" :=lrCab."Tipo Registro"::Modificacion;
                END;

                // JPT 04/02/09 Insertamos la fecha de entrada
                // Si la cabecera es Insercci¢n o Modificacion solo tendremos en cuenta
                // los paxes insercci¢n
                IF (lrCab."Tipo Registro" <> lrCab2."Tipo Registro") AND
                   (lrCab2."Tipo Registro" = lrCab2."Tipo Registro"::Borrado) THEN
                   lrCab."Fecha Entrada" := lrPaxs."Fecha Entrada";

                IF (lrCab."Tipo Registro" = lrCab."Tipo Registro"::Borrado) OR (lwEstado = lwEstado::M) THEN BEGIN
                  IF ((lrPaxs."Fecha Entrada" < lrCab."Fecha Entrada") OR (lrCab."Fecha Entrada" =0D)) AND
                    (lrPaxs."Fecha Entrada" <> 0D) THEN
                    lrCab."Fecha Entrada" := lrPaxs."Fecha Entrada";
                END;

                IF lrCab."Tipo Registro" =lrCab."Tipo Registro"::Modificacion THEN
                  lrCab."Fecha modificacion" := TODAY;

                IF lrCab."Tipo Registro"= lrCab."Tipo Registro"::Borrado THEN
                  lrCab."Fecha cancelacion" := TODAY
                ELSE
                  lrCab."Fecha cancelacion" := 0D;

                // Insertamos el Vuelo de llegada
                lwCiaVue:= COPYSTR(lwTexto,97,2);
                lwVuelo := COPYSTR(lwTexto,99,5);
                CLEAR(lwIATA);
                { JPT 23/08/04 Seg£n conversaci¢n con Micheline Gasser no quiren a¤adir el aeropuerto de origen
                IF lwTexto2=Text038 THEN
                  lwIATA  := COPYSTR(lwTexto,146,10);
                }
                IF NOT EVALUATE(wFecha,COPYSTR(lwTexto,104,8)) THEN
                  CLEAR(wFecha);
                IF EVALUATE(lwHora , COPYSTR(lwTexto,112,5)) THEN
                  CLEAR(lwHora);

                InsertaVuelo(      lwVuelo,
                                 lwIdVuelo,
                                  lwCiaVue,
                                    wFecha,
                                    lwHora,
                            lwFechaEntrada,
                             lwFechaSalida,
                           lrPaxs.Contador,
                                  lwIDServ,
                                     lrCab,
                                    lwIATA,
                lrHot."Aeropuerto Asociado");

                CLEAR(lrVue);
                CASE lwTexto2 OF
                  // Conexi¢n vuelo
                  Text038: BEGIN
                         lwCiaVue:= COPYSTR(lwTexto,126,2);
                         lwVuelo := COPYSTR(lwTexto,128,5);
                         // JPT 23/08/04 Seg£n conversaci¢n con Micheline Gasser no quiren a¤adir el aeropuerto de origen
                         // lwIATA  := COPYSTR(lwTexto,146,10);
                         IF NOT EVALUATE(wFecha,COPYSTR(lwTexto,133,8)) THEN
                           CLEAR(wFecha);
                         IF EVALUATE(lwHora , COPYSTR(lwTexto,141,5)) THEN
                           CLEAR(lwHora);

                         InsertaVuelo(      lwVuelo,
                                          lwIdVuelo,
                                           lwCiaVue,
                                             wFecha,
                                             lwHora,
                                     lwFechaEntrada,
                                      lwFechaSalida,
                                    lrPaxs.Contador,
                                           lwIDServ,
                                              lrCab,
                        lrHot."Aeropuerto Asociado",
                                            lwIATA);

                       END;
                  // Conexi¢n hotel -> en principio no se trata -> se refiere a conexiones posteriores a otros hoteles
                  END;

                  // Si no encuentra el registro de hotel lo crea

                  //IF DELCHR(COPYSTR(lwTexto,91,1),'<>',' ') <> '' THEN
                  lwReg := COPYSTR(lwTexto,91,1);
                  lrHotel.RESET;
                  lrHotel.SETCURRENTKEY(Fichero,Touroperador,Bono,Temporada);
                  lrHotel.SETRANGE(Fichero      , wlfichero);
                  lrHotel.SETRANGE(Touroperador , lwTTOO);
                  lrHotel.SETRANGE(Bono         , lrPaxs.Bono);
                  lrHotel.SETRANGE(Temporada    , lrPaxs.Temporada);
                  lrHotel.SETRANGE(Habitacion   , lwHab);
                  IF lwReg <> '' THEN
                    lrHotel.SETRANGE(Regimen      , lwReg);
                  lrHotel.SETRANGE(Hotel        , lwHotel);
                  IF lwFechaEntrada <> 0D THEN
                    lrHotel.SETRANGE("Fecha entrada" , lwFechaEntrada);
                  IF lwFechaSalida <> 0D THEN
                    lrHotel.SETRANGE("Fecha salida"  , lwFechaSalida);
                  CASE lwEstado OF
                    lwEstado::M : lrHotel.SETRANGE("Tipo Registro",lrHotel."Tipo Registro"::Ok);
                    lwEstado::S : lrHotel.SETRANGE("Tipo Registro",lrHotel."Tipo Registro"::Cancelacion);
                  END;
                  IF NOT lrHotel.FIND('-') THEN BEGIN
                    lrHotel.INIT;
                    lrHotel.Fichero       := wlfichero;
                    lwIdHotel +=1;
                    lrHotel."ID Hotel"    := lwIdHotel;
                    lrHotel.Touroperador  := lwTTOO;
                    lrHotel.Bono          := lrPaxs.Bono;
                    lrHotel.Temporada     := lrPaxs.Temporada;
                    //lrHotel.Contador
                    lrHotel.Hotel         := lwHotel;
                    lrHotel.Habitacion    := lwHab;
                    lrHotel.Regimen       := lwReg;
                    lrHotel."Fecha entrada" := lwFechaEntrada;
                    lrHotel."Fecha salida"  := lwFechaSalida;
                    lrHotel."Hotel Ficticio"  := lwFicticioExtra;
                    lrHotel."Transfer Privado" := lrConvHotel."Transfer Privado";

                    //****************
                    // si es un extra hay que buscar el n§ de servicio al que pertenece para
                    // poder filtrar todos los hoteles.

                    lrCab."No Servicios" +=1;
                    lrHotel."N§ Servicio"    := lrCab."No Servicios";

                    //****************
                    CASE lwEstado OF
                      lwEstado::M : lrHotel."Tipo Registro" := lrHotel."Tipo Registro"::Ok;
                      lwEstado::S : lrHotel."Tipo Registro" := lrHotel."Tipo Registro"::Cancelacion;
                    END;
                    lrHotel.Insercion := lrHotel."Tipo Registro" = lrHotel."Tipo Registro"::Ok;
                    lrHotel.INSERT;
                    {
                    IF lwReg='' THEN
                      cFunImpLTU.inserta_error(lrCab,Text039);
                    IF lwHab='' THEN
                      cFunImpLTU.inserta_error(lrCab,Text040);
                    }

                    // Le inserta el paquete desde parametros segun tenga hotel y/o vuelo
                    //  Seg£n correo de Lars Rese del 27/08/03 Si la posici¢n 9  del codigo
                    //  de hotel es Text041 es paquete de hotel solo.

                    // Si el nombre del Hotel contiene la cadena Text022 entenderemos q no es un hotel real
                    // Si no un vuelo de posicionamiento por lo que le pasaremos el paquete solo transfer

                    // AJS 17.08.2005
                    // Cambio en los codigos de los hoteles de transfer aereo
                    ///lwPos := STRPOS(UPPERCASE(lwHotel),Text022);

                    //lwPos := STRPOS(UPPERCASE(lwHotel), Text023);

                    // AJS 05.10.2005
                    // Se incluyen nuevos codigos para indicar los transfer aereos

                    //IF lwPos = 0 THEN BEGIN
                    //  lwPos := STRPOS(UPPERCASE(lwHotel), Text030);
                    //  IF lwPos = 0 THEN
                    //    lwPos := STRPOS(UPPERCASE(lwHotel), Text031);
                    //END;

                    // AJS 16.12.2005
                    // Cambio en los codigos de hoteles de transfer aereo

                    lwPos := 0;
                    IF lwHotel IN [Text024, Text025, Text026, Text027, Text028, Text029] THEN
                      lwPos := 1;

                    IF lwPos <> 0 THEN BEGIN

                      // AJS 02.11.2005
                      // Si es un transfer aereo hay que comprobar si la delegacion esta marcada para trabajar con estos codigos
                      // como si fueran hoteles normales, para poder hacer el pago en Hotel Payment

                      lrDelegacion.FIND('-');
                      IF lrDelegacion."Pago transfer aereo Hotel Paym" THEN
                        lrHotel."Paquete asociado" := rPar."Paquete Solo Hotel"
                      ELSE
                        lrHotel."Paquete asociado" := rPar."Paquete Solo Transfer";

                      // Para saber si el vuelo es de entrada o de salida segun mail 08/09/03 - M.Glasser
                      {"Despues de los 3 FLG siempre viene el codigo de la Delegacion 3FLGPOP...
                       (POP en Puerto Plata, SJO en San Jose/Costa Rica) cuando es un vuelo de
                       entrada. Cuando es un vuelo de salida, la delegacion viene al final"}
                      IF STRPOS(lwHotel,lwDelegacion) = lwPos+4 THEN
                        lrHotel."Orden Vuelo"      := lrHotel."Orden Vuelo"::Entrada
                      ELSE
                        lrHotel."Orden Vuelo"      := lrHotel."Orden Vuelo"::Salida;
                    END
                    ELSE BEGIN
                      IF lrHotel.Hotel[9] = 'P' THEN
                        lrHotel."Paquete asociado" := rPar."Paquete Solo Hotel"
                      ELSE
                        lrHotel."Paquete asociado"  := rPar."Paquete Hotel + Transfer";
                    END;

                    IF lrCab.Paquete = '' THEN
                      lrCab.Paquete := lrHotel."Paquete asociado";
                  END;
                  lrHotel."N§ Habitaciones" += lwNumHabs;
                  lrHotel.MODIFY;

                  // Crea un servicio de hotel
                  // Tambien creamos un temporal para no repetir los servicios
                  {
                  lrTempServ.RESET;
                  lrTempServ.SETRANGE("Tipo Servicio" , lrTempServ."Tipo Servicio"::Hotel);
                  lrTempServ.SETRANGE(Contador        , lrPaxs.Contador);
                  lrTempServ.SETRANGE("N§ Servicio"   , lrHotel."N§ Servicio");
                  lrTempServ.SETRANGE(Bono            , lrCab.Bono);
                  IF NOT lrTempServ.FIND('-') THEN BEGIN
                  }
                  BEGIN
                    lrServ.RESET;
                    lrServ.INIT;
                    lrServ.Fichero         := wlfichero;
                    lwIDServ +=1;
                    lrServ."ID Servicio"   := lwIDServ;
                    lrServ.Touroperador    := lrCab.TourOperador;
                    lrServ.Bono            := lrCab.Bono;
                    lrServ.Temporada       := lrCab.Temporada;
                    lrServ.Persona        := lrPaxs.Contador;
                    lrServ."N§ Servicio"   := lrHotel."N§ Servicio";
                    lrServ."Tipo Servicio" := lrServ."Tipo Servicio"::Hotel;
                    lrServ.INSERT;
                    lrTempServ := lrServ;
                    lrTempServ.INSERT;
                  END;
                lrCab.MODIFY;
                END;

             // Comentario
          ' ':BEGIN
                lwTexto2 := COPYSTR(lwTexto,1,80);
                REPEAT
                  lrComent.INIT;
                  lrComent.Fichero:= lrPaxs.Fichero;
                  lrComent.IDPax  := lrPaxs."ID Pax";
                  lrComent.Texto  := COPYSTR(lwTexto2,1,MAXSTRLEN(lrComent.Texto));
                  lwTexto2 := COPYSTR(lwTexto2,MAXSTRLEN(lrComent.Texto)+1,STRLEN(lwTexto2));
                  lrComent.INSERT(TRUE);
                UNTIL lwTexto2='';
              END;

        END;
      UNTIL lwArchivo.POS = lwArchivo.LEN;
      lwArchivo.CLOSE;
      IF lwNumHoteles >0 THEN BEGIN

        CLEAR(lrFich);
        lrFich."N§ Fichero"        := wlfichero;
        lrFich."Fecha importacion" := TODAY;
        lrFich."Hora importacion"  := TIME;
        lrFich.Usuario             := USERID;
        lrFich."Nombre Archivo"             := COPYSTR(ExtractFilename(pwNombreArchivo),1,MAXSTRLEN(lrFich."Nombre Archivo"));
        lrFich.INSERT;

        MueveArchivo(wlfichero,pwNombreArchivo);
      END;

      // JPT 08/09/09 A¤ado un commit ya que un rollback en el ultimo de varios archivos
      // puede originar que esten todos los dem s archivos traspasados y nada de informaci¢n en la BBDD
      COMMIT;

      EXIT(lwNumHoteles > 0); // Indica que no ha tenido ning£n problema
    END;

    PROCEDURE InsertaVuelo@8(pwVuelo@1103355000 : Code[10];VAR pwIdVuelo@1103355001 : Integer;pwCiaVue@1103355002 : Code[10];pwFecha@1103355003 : Date;pwHora@1103355004 : Time;pwFechaEntrada@1103355005 : Date;pwFechaSalida@1103355006 : Date;pwContadorPax@1103355007 : Integer;VAR pwIDServ@1103355008 : Integer;VAR prCab@1103355009 : Record 7010076;pwIATAOrigen@1103355010 : Code[10];pwIATADestino@1103355011 : Code[10]);
    VAR
      lrVue@1103355012 : Record 7010077;
      lrPlanVue@1103355013 : Record 7009754;
      lrServ@1103355014 : Record 7010080;
      lwContador@1103355015 : Integer;
    BEGIN
      // InsertaVuelo

      IF pwVuelo='' THEN
        EXIT;

      // Si no existe crea el vuelo
      lrVue.RESET;
      lrVue.SETCURRENTKEY(Fichero,TourOperador,Bono,Temporada,Vuelo,Fecha);
      lrVue.SETRANGE(Fichero     , prCab.Fichero);
      lrVue.SETRANGE(TourOperador, prCab.TourOperador);
      lrVue.SETRANGE(Bono        , prCab.Bono);
      lrVue.SETRANGE(Temporada   , prCab.Temporada);

      IF lrVue.FINDLAST THEN
        lwContador := lrVue.Contador +1
      ELSE
        lwContador := 1;

      lrVue.SETRANGE(Vuelo       , pwVuelo);
      lrVue.SETRANGE(Fecha       , pwFecha);

      IF NOT lrVue.FIND('-') THEN BEGIN
        lrVue.INIT;
        lrVue.Fichero        := prCab.Fichero;
        pwIdVuelo +=1;
        lrVue."ID Vuelo"     := pwIdVuelo;
        lrVue.TourOperador   := prCab.TourOperador;
        lrVue.Bono           := prCab.Bono;
        lrVue.Temporada      := prCab.Temporada;
        lrVue.Contador       := lwContador;

        lrVue.Fecha          := pwFecha;
        lrVue.Compa¤ia       := pwCiaVue;
        lrVue.Vuelo          := pwVuelo;

        prCab."No Servicios" +=1;
        lrVue."N§ Servicio"  := prCab."No Servicios";

        lrVue."Tipo Vuelo" := lrVue."Tipo Vuelo"::Intermedio; // De entrada se pone a intermedio

        lrVue."IATA origen"  := pwIATAOrigen;
        lrVue."IATA destino" := pwIATADestino;
        lrVue.INSERT;
      END;

      // JPT 25/10/04 Se mira esto cada vez por si se crea el vuelo en un periodo intermedio
      IF lrVue."Tipo Vuelo" = lrVue."Tipo Vuelo"::Intermedio THEN BEGIN
        { JPT 15/10/09 Se han dado casos de vuelos un dia despues de la salida del hotel
        CASE pwFecha OF
          pwFechaEntrada : lrVue."Tipo Vuelo":=lrVue."Tipo Vuelo"::Entrada;
          pwFechaSalida  : lrVue."Tipo Vuelo":=lrVue."Tipo Vuelo"::Salida;
          ELSE lrVue."Tipo Vuelo":=lrVue."Tipo Vuelo"::Intermedio;
        END;
        }
        IF pwFecha <= pwFechaEntrada THEN
          lrVue."Tipo Vuelo":=lrVue."Tipo Vuelo"::Entrada;
        IF pwFecha >= pwFechaSalida THEN
          lrVue."Tipo Vuelo":=lrVue."Tipo Vuelo"::Salida;

        lrPlanVue.RESET;
        lrPlanVue.SETRANGE(Fecha   , pwFecha);
        lrPlanVue.SETRANGE(Compa¤ia, pwCiaVue);
        lrPlanVue.SETRANGE(Vuelo   , pwVuelo);
        IF pwIATAOrigen <>'' THEN
          lrPlanVue.SETRANGE(Origen  , pwIATAOrigen);
        IF pwIATADestino <> '' THEN
          lrPlanVue.SETRANGE(Destino , pwIATADestino);

        IF lrPlanVue.FIND('-') THEN BEGIN
          IF lrVue."Tipo Vuelo" =lrVue."Tipo Vuelo"::Entrada THEN
            lrVue.Hora := lrPlanVue."Hora Entrada"
          ELSE
            lrVue.Hora := lrPlanVue."Hora Salida";
        END;
        lrVue.MODIFY;
      END;

      // Fichero de servicios de vuelo

      lrServ.RESET;
      lrServ.SETCURRENTKEY(Fichero,Touroperador,Bono,Temporada,Persona);
      lrServ.SETRANGE(Fichero      , prCab.Fichero);
      lrServ.SETRANGE(Touroperador , prCab.TourOperador);
      lrServ.SETRANGE(Bono         , prCab.Bono);
      lrServ.SETRANGE(Temporada    , prCab.Temporada);
      lrServ.SETRANGE("N§ Servicio", lrVue."N§ Servicio");
      lrServ.SETRANGE(Persona     , pwContadorPax);
      IF NOT lrServ.FIND('-') THEN BEGIN
        lrServ.INIT;
        lrServ.Fichero         := prCab.Fichero;
        pwIDServ +=1;
        lrServ."ID Servicio"   := pwIDServ;
        lrServ.Touroperador    := prCab.TourOperador;
        lrServ.Bono            := prCab.Bono;
        lrServ.Temporada       := prCab.Temporada;
        lrServ.Persona        := pwContadorPax;
        lrServ."N§ Servicio"   := lrVue."N§ Servicio";
        lrServ."Tipo Servicio" := lrServ."Tipo Servicio"::Transfer;
        lrServ.INSERT;
      END;
    END;

    PROCEDURE ContPax@2(prPaxs@1103355000 : Record 7010079) : Integer;
    VAR
      lrPaxs@1103355001 : Record 7010079;
    BEGIN
      // ContPax
      // Devuelve el numero de contador de pax

      lrPaxs.RESET;
      lrPaxs.SETCURRENTKEY(Fichero,TourOperador,Bono,Temporada);
      lrPaxs.SETRANGE(Fichero     , prPaxs.Fichero);
      lrPaxs.SETRANGE(TourOperador, prPaxs.TourOperador);
      lrPaxs.SETRANGE(Bono        , prPaxs.Bono);
      lrPaxs.SETRANGE(Temporada   , prPaxs.Temporada);
      IF NOT lrPaxs.FINDLAST THEN
        CLEAR(lrPaxs);

      EXIT(lrPaxs.Contador+1);
    END;

    PROCEDURE TipoPax@3(pwTTOO@1103355000 : Code[10];pwPers@1103355001 : Code[10]) : Integer;
    VAR
      lrConv@1103355002 : Record 7009722;
      lwTipPer@1103355003 : ',Adulto,Ni¤o,Infant';
    BEGIN
      // TipoPax
      // Devuelve el tipo de persona que es
      // 0:No se encuetra
      // 1:Adulto
      // 2:Ni¤o
      // 3.Infant

      CLEAR(lwTipPer);
      rParPer.GET;
      IF lrConv.GET(pwTTOO,pwPers) THEN BEGIN
        CASE lrConv."Tipo Persona" OF
          rParPer."Codigo Adulto" : lwTipPer:=1;
          rParPer."Codigo Ni¤o"   : lwTipPer:=2;
          rParPer."Codigo Infant" : lwTipPer:=3;
          ELSE lwTipPer := 0;
        END;
      END;
      EXIT(lwTipPer);
    END;

    PROCEDURE Ponceros@5(pwNumero@1103355000 : Integer;pwCuantos@1103355001 : Integer) : Code[20];
    VAR
      lwTexto@1103355002 : Code[20];
    BEGIN
      // PonCeros
      // A partir del entero pasado como parametro "pwNumero" devuelve un code, pero CON ceros delante en "pwCuantos" cifras


      lwTexto := FORMAT (pwNumero);

      IF STRLEN (lwTexto) < pwCuantos THEN
        REPEAT
          lwTexto := '0' + lwTexto;
        UNTIL STRLEN (lwTexto) >= pwCuantos;

      EXIT(lwTexto);
    END;

    PROCEDURE MueveArchivo@9(pwNoImportacion@1103355000 : Integer;pwNombreArchivo@1103355001 : Text[150]);
    VAR
      lwDirectorio@1103355002 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      lwSubdirectorio@1103355003 : Text[250];
      lwArch1@1103355004 : Text[250];
      lwArch2@1103355005 : Text[250];
    BEGIN
      // MueveArchivo
      // Esta funci¢n se encarga de abrir un Subdiectorio para esa importaci¢n y mover
      // all¡ todos los archivos importados
      // pwNoImportacion Es el N§ asignado a esa importaci¢n.

      CREATE(lwDirectorio);

      lwSubdirectorio := rPar."Directorio Importados";
      IF lwSubdirectorio[STRLEN(lwSubdirectorio)] <> '\' THEN
        lwSubdirectorio := lwSubdirectorio + '\';

      lwSubdirectorio := lwSubdirectorio + FORMAT(TODAY,0,Text042) + '\';

      IF NOT lwDirectorio.FolderExists(lwSubdirectorio) THEN
        lwDirectorio.CreateFolder(lwSubdirectorio);

      lwSubdirectorio := lwSubdirectorio + Text043 + Ponceros(pwNoImportacion , 4) + '_' + DELCHR(FORMAT(TODAY),'=','/');

      IF NOT lwDirectorio.FolderExists (lwSubdirectorio) THEN
        lwDirectorio.CreateFolder (lwSubdirectorio);

      IF EXISTS(pwNombreArchivo) THEN BEGIN
        lwArch2 := lwSubdirectorio + '\' + lwDirectorio.GetFileName(pwNombreArchivo);
        IF EXISTS(lwArch2) THEN
          ERROR(STRSUBSTNO(Text044),lwArch2);
        lwDirectorio.MoveFile(pwNombreArchivo , lwArch2);
      END;
    END;

    PROCEDURE BuscaNombre@13(VAR prPaxs@1103355000 : Record 7010079;pwFechaEntrada@1103355001 : Date;pwFechaSalida@1103355002 : Date;VAR pwIdPax@1103355003 : Integer;pwExtra@1103355019 : Code[10]) : Boolean;
    VAR
      lwNombre@1103355005 : Text[50];
      lwContOcup@1103355006 : Integer;
      lwSalida@1103355007 : Boolean;
      lwDistintos@1103355008 : Boolean;
      lwOk@1103355009 : Boolean;
      lwFecha@1103355010 : Date;
      lwFechaSalida2@1103355017 : Date;
      lwNo@1103355011 : Integer;
      lwExiste@1103355012 : Boolean;
      lwExiste1@1103355013 : Boolean;
      lwExiste2@1103355014 : Boolean;
      lwIdPax@1103355015 : Integer;
      lwModifica@1103355016 : Boolean;
      lwModifica2@1103355004 : Boolean;
    BEGIN
      // BuscaNombre
      // Esta funci¢n busca si ya existe nombre en el temporal
      // Si existe con el mismo hotel y habitaci¢n le incrementa un numero el nombre

      // ----  Comprobar si el nuevo nombre existe, en el mismo dia. Si se solapa en el tiempo quiere decir que son
      //       personas distintas

      // ----  para no duplicar
      // En todo caso devolvemos el ID pax . El existente si existe o el nuevo si corresponde

      // AJF 23/02/09
      // A¤adimos el caso en que el hotel sea ficticio, con lo que no se debe crear un nuevo pax ya que no corresponde
      // realmente a una reserva de hotel. Paso la variable pwFicticioExtra para indicarlo.

      CLEAR(lwContOcup);
      CLEAR(lwModifica);
      CLEAR(lwModifica2);

      REPEAT
        CLEAR(lwSalida);
        CLEAR(lwExiste); // Es la variable que vamos a devolver
        CLEAR(lwExiste1);// Es si existe con el nombre
        CLEAR(lwExiste2);// Es si existe con el nombre pero duplicando, por lo que se le a¤adir  un numero al nombre
        lwContOcup+=1;
        lwNombre := DELCHR(prPaxs.Nombre, '<>');
        IF lwContOcup > 1  THEN BEGIN
          // AJF 12/08/09
          // Evito que se desborde el string
          // recorto de delante los caracteres sobrantes.
          lwNombre :=  lwNombre + '/' + FORMAT(lwContOcup);
          IF STRLEN(lwNombre) > MAXSTRLEN(rTempPaxsdia.Nombre) THEN BEGIN
            lwNombre := COPYSTR(lwNombre, STRLEN(lwNombre) - MAXSTRLEN(rTempPaxsdia.Nombre) + 1);
          END;
        END;
        rTempPaxsdia.RESET;
        rTempPaxsdia.SETRANGE(Nombre    , lwNombre);
        rTempPaxsdia.SETRANGE(Bono      , prPaxs.Bono);

        lwExiste1:= rTempPaxsdia.FIND('-'); // Si existe el con el nombre
        IF lwExiste1 THEN BEGIN
          lwIdPax := rTempPaxsdia."ID Pax Real";
          // Miramos si es una modificacion
          // Para lo cual lo consideraremos si uno es Ok y otro Cancela (la suma de los dos da 1)
          REPEAT
            lwModifica := (rTempPaxsdia."Tipo Registro"=rTempPaxsdia."Tipo Registro"::Modificacion) OR
                          (rTempPaxsdia."Tipo Registro" + prPaxs."Tipo Registro"=1);
          UNTIL (rTempPaxsdia.NEXT=0) OR lwModifica;
        END;

        // Si existe el nombre miramos que no se duplique en su estancia, por los cual consideraremos otra persona
        // En los extras No incremenamos el nombre
        IF lwExiste1  AND (pwExtra='') THEN BEGIN
          // Si es Ok filtra por cancelaci¢n, si es cancelaci¢n por Ok
          // Reutilizamos Habitaci¢n para guardar el codigo de extra de los hoteles ficcticios, En los de verdad estara en blanco
          rTempPaxsdia.SETRANGE(Habitacion , pwExtra);
          CLEAR(lwOk);
          FOR lwFecha:= pwFechaEntrada TO pwFechaSalida DO BEGIN
            rTempPaxsdia.SETRANGE("Fecha Nacimiento", lwFecha);
            IF rTempPaxsdia.FIND('-') THEN BEGIN
              REPEAT
                // Considera que existe si lo encuentra para las mismas fechas pero que no sea un Borra/inserta
                // osea una modificacion
                // lwOk indica que es un Borra/inserta
                // Para lo cual lo consideraremos si uno es Ok y otro Cancela (la suma de los dos da 1)
                lwOk := rTempPaxsdia."Tipo Registro" + prPaxs."Tipo Registro" = 1;
                lwModifica2 := lwModifica2 OR lwOk;
                IF lwOk THEN BEGIN
                  rTempPaxsdia."Tipo Registro" := rTempPaxsdia."Tipo Registro"::Modificacion;
                  rTempPaxsdia.MODIFY;
                END;
              UNTIL rTempPaxsdia.NEXT=0;
              lwExiste2 := NOT lwModifica2;
            END;
          END;
        END;
        lwExiste := lwExiste1 AND (NOT lwExiste2);
      UNTIL NOT lwExiste2;

      prPaxs.Nombre := lwNombre;

      IF lwExiste THEN
        prPaxs."ID Pax" := lwIdPax
      ELSE BEGIN
        pwIdPax  +=1;
        prPaxs."ID Pax" := pwIdPax;
      END;

      IF lwExiste AND (lwModifica OR lwModifica2) THEN
        prPaxs."Tipo Registro" := prPaxs."Tipo Registro"::Modificacion;

      // Se crea un registro x dia en cualquier caso
      CLEAR(lwNo);
      rTempPaxsdia.RESET;
      rTempPaxsdia.ASCENDING(FALSE);
      IF rTempPaxsdia.FIND('-') THEN  // Buscamos el £ltimo identificador
        lwNo := rTempPaxsdia."ID Pax";

      // Utilizamos la fecha de nacimiento para tener una reserva x dia

      lwFechaSalida2 := pwFechaSalida;
      IF lwFechaSalida2 > pwFechaEntrada THEN // La fecha de salida no cuenta
        lwFechaSalida2 := lwFechaSalida2 -1;
      FOR lwFecha:= pwFechaEntrada TO lwFechaSalida2 DO BEGIN
        rTempPaxsdia:= prPaxs;
        lwNo +=1;
        rTempPaxsdia."ID Pax" := lwNo;
        rTempPaxsdia."Fecha Nacimiento" := lwFecha;
        rTempPaxsdia."ID Pax Real"      := prPaxs."ID Pax";
        rTempPaxsdia.Habitacion         := pwExtra;
        rTempPaxsdia.INSERT;
      END;

      EXIT(lwExiste);
    END;

    PROCEDURE TrataCrucero@11(pwHotel@1103355000 : Code[20];pwFechaEntrada@1103355001 : Date;pwFechaSalida@1103355002 : Date;VAR pwTexto@1103355003 : Text[200];VAR pwEsvuelo@1103355004 : Boolean);
    VAR
      lrAerop@1103355005 : Record 7009704;
      lrCompAE@1103355006 : Record 7009753;
      lrPlanVue@1103355007 : Record 7009754;
      lwVuelo@1103355008 : Code[7];
    BEGIN
      // TrataCrucero
      // Determinado codigos de hotel se utilizan para designar cruceros.
      // Ya que estas lineas vienen sin informaci¢n de vuelo en caso de localizarlos les crearemos
      // un vuelo de entrada y salida falsos.
      // 3D3002ZIEL para entrada y salida y 3D3002 para solo salida
      // Para ello rellenaremos la linea de texto para que el proceso lo trate normalemente
      // DE paso lo ponemos como si fuera un vuelo para evitar duplicidad de nombres

      // Si no es crucero sale de la funci¢n
      IF NOT (pwHotel IN [Text045,Text046]) THEN
        EXIT;

      pwEsvuelo := TRUE;

      lwVuelo := Text047;

      // Si no se encuentra el aeropuerto lo crea
      lrAerop.RESET;
      IF NOT lrAerop.GET(Text048) THEN BEGIN
        lrAerop.INIT;
        lrAerop.Aeropuerto:=Text048;
        lrAerop.Nombre    :=Text049;
        lrAerop."Aeropuerto Local":= TRUE;
        lrAerop.INSERT(TRUE);
      END;

      // Si no se encuentra la compa¤ia la crea
      lrCompAE.RESET;
      IF NOT lrCompAE.GET(Text050) THEN BEGIN
        lrCompAE.INIT;
        lrCompAE.Codigo :=Text050;
        lrCompAE.Nombre :=Text051;
        lrCompAE.INSERT(TRUE);
      END;


      // Vuelo de entrada
      IF pwHotel = Text046 THEN BEGIN  // Si tiene entrada y salida
        // Si no se encuentra el plan de vuelo lo crea;
        lrPlanVue.RESET;
         IF NOT lrPlanVue.GET(pwFechaEntrada,lrCompAE.Codigo,lwVuelo,lrAerop.Aeropuerto,'') THEN BEGIN
          lrPlanVue.INIT;
          lrPlanVue.Fecha    := pwFechaEntrada;
          lrPlanVue.Compa¤ia := lrCompAE.Codigo;
          lrPlanVue.Vuelo    := lwVuelo;
          lrPlanVue.Origen   := lrAerop.Aeropuerto;
          lrPlanVue.Destino  :='';
          lrPlanVue."Hora Entrada" := 090000T;
          lrPlanVue."Entrada/Salida" := lrPlanVue."Entrada/Salida"::Entrada;
          lrPlanVue.INSERT;
        END;

        // Hay que poner en el texto la informaci¢n de vuelo
        InsertaText(pwTexto,PADSTR(lrCompAE.Codigo,2,' '),97);
        InsertaText(pwTexto,PADSTR(lrPlanVue.Vuelo,5,' '),99);
        InsertaText(pwTexto,PADSTR(FORMAT(pwFechaEntrada),8,' '),104);
        InsertaText(pwTexto,PADSTR(FORMAT(lrPlanVue."Hora Entrada"),5,' '),112);
      END;


      // Vuelo de Salida
      // Si no se encuentra el plan de vuelo lo crea;
      lrPlanVue.RESET;
      IF NOT lrPlanVue.GET(pwFechaSalida,lrCompAE.Codigo,lwVuelo,'',lrAerop.Aeropuerto) THEN BEGIN
        lrPlanVue.INIT;
        lrPlanVue.Fecha    := pwFechaSalida;
        lrPlanVue.Compa¤ia := lrCompAE.Codigo;
        lrPlanVue.Vuelo    := lwVuelo;
        lrPlanVue.Origen   := '';
        lrPlanVue.Destino  := lrAerop.Aeropuerto;
        lrPlanVue."Hora Salida" := 210000T;
        lrPlanVue."Entrada/Salida" := lrPlanVue."Entrada/Salida"::Salida;
        lrPlanVue.INSERT;
      END;

      // Hay que poner en el texto la informaci¢n de vuelo
      InsertaText(pwTexto,PADSTR(lrCompAE.Codigo,2,' '),126);
      InsertaText(pwTexto,PADSTR(lrPlanVue.Vuelo,5,' '),128);
      InsertaText(pwTexto,PADSTR(FORMAT(pwFechaSalida),8,' '),133);
      InsertaText(pwTexto,PADSTR(FORMAT(lrPlanVue."Hora Salida"),5,' '),141);
    END;

    PROCEDURE InsertaText@18(VAR pwCadena@1103355000 : Text[200];pwSubcadena@1103355001 : Text[30];pwPos@1103355002 : Integer);
    VAR
      lwCont@1103355003 : Integer;
    BEGIN
      // InsertaText
      // Inserta en una cadena el la subcadena pasada como parametro a partir de la posicion indicada

      FOR lwCont:= 1 TO STRLEN(pwSubcadena) DO BEGIN
        pwCadena[pwPos+lwCont-1] := pwSubcadena[lwCont];
      END;
    END;

    PROCEDURE ComprobarHoteles@1103355000(pwNombreArchivo@1103355000 : Text[150];pwMostrar@1103355023 : Boolean) : Boolean;
    VAR
      lwArchivo@1103355001 : File;
      lrDelegacion@1103355006 : Record 7009718;
      lrConvTO@1103355020 : Record 7010161;
      rTemp@1103355017 : TEMPORARY Record 7009724;
      lfForm@1103355026 : Form 7010011;
      lwHotel@1103355005 : Code[20];
      lwTTOO@1103355015 : Code[10];
      lwTTOOAg@1103355010 : Code[10];
      lwDelegacion@1103355009 : Code[10];
      lwNomHotel@1103355024 : Text[30];
      lwLugar@1103355025 : Text[30];
      lwTexto@1103355002 : Text[200];
      lwTexto2@1103355003 : Text[200];
      lwPos@1103355019 : Integer;
      lwEsvuelo@1103355007 : Boolean;
      lwOk@1103355004 : Boolean;
      lwChar@1103355018 : Char;
      lwCasos@1103355021 : Boolean;
      lText0003@1103355022 : TextConst 'ENU=Checking Hotels;ESP=Comprobando Hoteles';
    BEGIN
      // ComprobarHoteles
      // Esta funci¢n realiza una comprobaci¢n previa de los hoteles del archivo
      // Si encuentra alguno sin codificar Devuelve true
      // Adem s rellena un archivo temporal con los nombre de los hoteles y su descripci¢n
      // pwMostrar indica que debe ense¤ar dicho temporal en una ventana

      rPar.FINDFIRST;
      rPar.TESTFIELD("Touroperador importacion");

      CLEAR(lwCasos);
      CLEAR(rTemp);
      rTemp.DELETEALL;

      CLEAR(lwArchivo);
      lwArchivo.TEXTMODE(TRUE);
      IF NOT lwArchivo.OPEN(pwNombreArchivo) THEN
        ERROR(STRSUBSTNO(Text018, pwNombreArchivo));
      lwArchivo.SEEK(0);
      //  Lee la cabecera para determinar el touroperador
      lwArchivo.READ(lwTexto);
      CLEAR(lwTTOO);
      lwPos :=11;
      REPEAT
        lwChar := lwTexto[lwPos];
        lwTTOO := lwTTOO + FORMAT(lwChar);
        lwPos+=1;
      UNTIL (lwChar=' ') OR (lwPos>=STRLEN(lwTexto)) OR (STRLEN(lwTTOO)=10);

      //-$003CLEAR(lwTTOOAg);
      //-$003IF lrConvTO.GET(lwTTOO) THEN
      //-$003  lwTTOOAg:= lrConvTO."Touroperador Atennea";
      lwTTOOAg := lrConvTO.ConversionTouroperador(lwTTOO, ''); //+$003

      wVentana.OPEN(lText0003 + ' @1@@@@@@@@@@@');
      REPEAT
        lwArchivo.READ(lwTexto);
        lwTexto2 := COPYSTR(lwTexto,1,1);
        CASE lwTexto2 OF
          // HOTEL
          Text021:BEGIN
            lwHotel := COPYSTR(lwTexto,6,10);
            lwNomHotel := COPYSTR(lwTexto,16,30);
            // AJF 20/05/09
            // Copio como m ximo la longitud de la variable.
            lwLugar    := COPYSTR(lwTexto,46,MAXSTRLEN(lwLugar));
            lwEsvuelo := lwHotel IN [Text024, Text025, Text026, Text027, Text028, Text029];
            IF lwEsvuelo THEN BEGIN
              lrDelegacion.FIND('-');
              IF lrDelegacion."Pago transfer aereo Hotel Paym" THEN
                lwEsvuelo := FALSE;
            END;

            // Comprobamos que la delegaci¢n a la que importamos sea la correcta
            lwDelegacion := COPYSTR(lwTexto,2,3);
            lwOk := rEmp.GET(0,lwDelegacion, COMPANYNAME);

            lwOk := lwOk AND (NOT lwEsvuelo);
            IF lwOk THEN BEGIN
              IF lwTTOOAg = '' THEN
                 ERROR(Text053, lwTTOO);

              IF NOT CompHot(rPar."Touroperador importacion", lwTTOOAg, lwHotel, lwNomHotel, lwLugar,  rTemp) THEN
                lwCasos := TRUE
            END;
          END;
        END;
        wVentana.UPDATE(1, ROUND(lwArchivo.POS/lwArchivo.LEN*10000,1));
      UNTIL lwArchivo.POS = lwArchivo.LEN;
      lwArchivo.CLOSE;
      wVentana.CLOSE;

      IF pwMostrar AND lwCasos THEN BEGIN
        CLEAR(lfForm);
        lfForm.SetTemp(rTemp);
        lfForm.RUN;
      END;

      EXIT(lwCasos);
    END;

    PROCEDURE CompHot@1103355001(pwTTOO@1103355001 : Code[10];pwTTOOV@1103355002 : Code[10];pwHotel@1103355003 : Code[20];pwNomHotel@1103355011 : Text[30];pwLugar@1103355010 : Text[30];VAR prTemp@1103355000 : TEMPORARY Record 7009724) : Boolean;
    VAR
      lrConvHotel@1103355004 : Record 7009725;
      lrHot@1103355009 : Record 7009724;
      lwTError@1103355006 : Text[150];
      lwEnc@1103355005 : Boolean;
      lText0001@1103355008 : TextConst 'ENU="Fill the field %1 in"" %2"" = %3";ESP="Rellene el campo %1 en"" %2"" = %3"';
      lText0002@1103355007 : TextConst 'ENU=Hotel %1 was not found;ESP=No se encuentra Hotel %1';
    BEGIN
      // CompHot

      // Comprobaci¢n del hotel
      // Si el hotel ESTA Codificado Devuelve true
      // Adem s rellena la tabla temporal con el nombre del hotel y su descripci¢n

      CLEAR(lwTError);
      CLEAR(lrHot);
      CLEAR(lrConvHotel);
      lrConvHotel.SETRANGE(TourOperador        , pwTTOO);
      lrConvHotel.SETRANGE("Touroperador venta", pwTTOOV);
      lrConvHotel.SETRANGE("Hotel TO"          , pwHotel);
      lwEnc := lrConvHotel.FINDFIRST;
      IF NOT lwEnc THEN BEGIN
        lrConvHotel.SETRANGE("Touroperador venta", '');
        lwEnc :=  lrConvHotel.FIND('-');
        IF NOT lwEnc THEN
          lwTError := STRSUBSTNO(Text052, pwTTOO, pwTTOOV, pwHotel);
      END;
      IF lwEnc THEN BEGIN
        lwEnc := lrConvHotel."Hotel estancia" <> '';
        IF NOT lwEnc THEN
          lwTError := STRSUBSTNO(lText0001, lrConvHotel.FIELDCAPTION("Hotel estancia"),
                                           lrConvHotel.TABLECAPTION,
                                           STRSUBSTNO('%1 %2 %3', lrConvHotel.TourOperador, lrConvHotel."Touroperador venta",
                                           lrConvHotel."Hotel TO"));
      END;
      IF lwEnc THEN BEGIN
        lwEnc := lrHot.GET(lrConvHotel."Hotel estancia");
        IF NOT lwEnc THEN
          lwTError := STRSUBSTNO(lText0002, lrConvHotel."Hotel estancia");
      END;

      IF NOT lwEnc THEN BEGIN
        IF NOT prTemp.GET(pwHotel) THEN BEGIN
          CLEAR(prTemp);
          prTemp.Hotel := pwHotel;
          prTemp.Nombre                := pwNomHotel;
          prTemp."Punto Recogida"      := pwLugar;
          prTemp."Fichero exportacion" := lwTError;
          prTemp.INSERT;
        END;
      END;

      EXIT(lwEnc);
    END;

    PROCEDURE ExtractFilename@1103355002(pwDir@1103355000 : Text[1024]) : Text[250];
    VAR
      lwArch@1103355001 : Text[1024];
      lwPos@1103355002 : Integer;
    BEGIN
      // ExtractFilename
      // Dado una direcci¢n extraemos solo el nombre del archivo

      lwArch := pwDir;
      lwPos := STRPOS(lwArch,'\');
      WHILE lwPos <> 0 DO BEGIN
        lwArch := COPYSTR(lwArch, lwPos +1, STRLEN(lwArch));
        lwPos := STRPOS(lwArch,'\');
      END;

      EXIT(lwArch);
    END;

    PROCEDURE CambiarTouroperador@1103355003(VAR prCabRsv@1103355000 : Record 7010076);
    VAR
      lrHotIfs@1103355001 : Record 7010078;
      lrSerIfs@1103355002 : Record 7010080;
      lrVueIfs@1103355003 : Record 7010077;
      lrPaxIfs@1103355004 : Record 7010079;
      lwTouroperador@1103355005 : Code[10];
    BEGIN
      // CambiarTouroperador

      //: Creada por. AJS
      //: Creada dia. 22.06.2010

      //: @prCabRsv. Reserva a la que queremos cambiar el touroperador, las condiciones y el codigo de touroperador
      //:            son indicacion de Ion Goicoechea

      IF (STRLEN(prCabRsv.Bono) <> 7) OR
         (COPYSTR(prCabRsv.Bono, 1, 2) <> '14') THEN
        ERROR(Text054);

      lwTouroperador := 'XITS';

      IF NOT CONFIRM(Text055, FALSE, prCabRsv.Bono, lwTouroperador) THEN
        EXIT;

      lrHotIfs.RESET;
      lrHotIfs.SETRANGE(Fichero     , prCabRsv.Fichero);
      lrHotIfs.SETRANGE(Touroperador, prCabRsv.TourOperador);
      lrHotIfs.SETRANGE(Bono        , prCabRsv.Bono);
      lrHotIfs.SETRANGE(Temporada   , prCabRsv.Temporada);
      IF lrHotIfs.FINDSET(TRUE, TRUE) THEN
        lrHotIfs.MODIFYALL(Touroperador, lwTouroperador);

      lrPaxIfs.RESET;
      lrPaxIfs.SETRANGE(Fichero     , prCabRsv.Fichero);
      lrPaxIfs.SETRANGE(TourOperador, prCabRsv.TourOperador);
      lrPaxIfs.SETRANGE(Bono        , prCabRsv.Bono);
      lrPaxIfs.SETRANGE(Temporada   , prCabRsv.Temporada);
      IF lrPaxIfs.FINDSET(TRUE, TRUE) THEN
        lrPaxIfs.MODIFYALL(TourOperador, lwTouroperador);

      lrSerIfs.RESET;
      lrSerIfs.SETRANGE(Fichero     , prCabRsv.Fichero);
      lrSerIfs.SETRANGE(Touroperador, prCabRsv.TourOperador);
      lrSerIfs.SETRANGE(Bono        , prCabRsv.Bono);
      lrSerIfs.SETRANGE(Temporada   , prCabRsv.Temporada);
      IF lrSerIfs.FINDSET(TRUE, TRUE) THEN
        lrSerIfs.MODIFYALL(Touroperador, lwTouroperador);

      lrVueIfs.RESET;
      lrVueIfs.SETRANGE(Fichero     , prCabRsv.Fichero);
      lrVueIfs.SETRANGE(TourOperador, prCabRsv.TourOperador);
      lrVueIfs.SETRANGE(Bono        , prCabRsv.Bono);
      lrVueIfs.SETRANGE(Temporada   , prCabRsv.Temporada);
      IF lrVueIfs.FINDSET(TRUE, TRUE) THEN
        lrVueIfs.MODIFYALL(TourOperador, lwTouroperador);

      prCabRsv.TourOperador := lwTouroperador;
      prCabRsv.MODIFY;

      MESSAGE(Text005);
    END;

    BEGIN
    {
      ## AJF 20/05/09

      .- Cojo como m ximo 30 caracteres del lugar del txt para que no de error.

      ## AJF 29/06/09

        .- Cambio par metros y variables de trabajo que hacen referencia a c¢digos de hotel de code10 a code20.

      ## AJS 22.06.2010

        .- Nueva funcion cambiar touroperador para un caso especifico del Touroperador XITS, tienen que cumplirse
           condiciones especificas de longitud de bono y digitos iniciales

      $001 AJS 21102011 Cambiamos el modo en que se rellena la temporada, a partir de la fecha de creacion de la reserva

      $002 AJS 26102011 Corrijo un error que vaciaba la variable wFecha de manera incorrecta

      $003 AJS 15012015 Utilizo la funcion de conversion touroperador de la propia tabla

      $004 AJS 17022015 Sustituir ('+') por FINDLAST
    }
    END.
  }
}
