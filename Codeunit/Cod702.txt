OBJECT Codeunit 702 BA Db. Definition Create XML
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    TableNo=700;
    OnRun=VAR
            ProcIns@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF89-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMProcessingInstruction";
            Attribute@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF85-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMAttribute";
            RootNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
            CubeDbNode@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
            Node@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
            OutStr@1000 : OutStream;
          BEGIN
            AssertBADatabaseIsWellformed(Rec);
            CREATE(XmlDoc);
            ProcIns := XmlDoc.createProcessingInstruction('xml','version="1.0"');
            Attribute := XmlDoc.createAttribute('encoding');
            Attribute.value := 'utf-16';
            ProcIns.attributes.setNamedItem(Attribute);
            XmlDoc.insertBefore(ProcIns,XmlDoc.childNodes.item(0));
            RootNode := XmlDoc.createElement('businessanalytics');
            AddAttribute(RootNode,'version','1.0');
            XmlDoc.appendChild(RootNode);

            AddCubeDatabaseNames(RootNode,Rec);
            AddCompanies(RootNode,Rec);
            AddSchedules(RootNode,Rec);

            CubeDbNode := XmlDoc.createElement('cubedatabase');
            RootNode.appendChild(CubeDbNode);

            AddAnalyticalDimensions(CubeDbNode,Rec);
            AddNumLists(CubeDbNode,Rec);
            AddDimensions(CubeDbNode,Rec);
            AddCubes(CubeDbNode,Rec);
            AddVirtCubes(CubeDbNode,Rec);

            Rec.XML.CREATEOUTSTREAM(OutStr);
            XmlDoc.save(OutStr);
            MODIFY;
            CLEAR(OutStr);
            CLEAR(XmlDoc);
          END;

  }
  CODE
  {
    VAR
      XmlDoc@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      Text001@1001 : TextConst 'ENU=Year;ESP=A¤o';
      Text002@1002 : TextConst 'ENU=Quarter;ESP=Trimestre';
      Text003@1003 : TextConst 'ENU=Month;ESP=Mes';
      Text004@1004 : TextConst 'ENU=Day;ESP=D¡a';
      Text005@1005 : TextConst 'ENU=Description;ESP=Descripci¢n';
      Text006@1006 : TextConst 'ENU=[%1].[%2];ESP=[%1].[%2]';
      Text007@1007 : TextConst 'ENU=."\/'';ESP=."\/''';
      Text008@1008 : TextConst 'ENU=_____;ESP=_____';
      Text010@1009 : TextConst 'ENU=At least one cube must be defined in the database: %1.;ESP=Defina al menos un cubo en la base de datos: %1.';
      Text012@1016 : TextConst 'ENU=Is Closing Date;ESP=Es la fecha de cierre';
      Text020@1010 : TextConst 'ENU="At least one measure must be defined in the cube.\Cube = %1";ESP="Defina al menos una medida en el cubo.\Cubo = %1"';
      Text021@1014 : TextConst 'ENU="Only fields of class %1 are allowed as cube measures.\Cube = %2\Measure = %3";ESP="S¢lo se admiten campos de clase %1 como medidas del cubo.\Cubo = %2\Medida = %3"';
      Text040@1013 : TextConst 'ENU="There is more than one %1 with name %2.\Cube = %3";ESP="Hay m s de un %1 con el nombre %2.\Cubo = %3"';
      Text041@1015 : TextConst 'ENU=There is more than one %1 with name %2.;ESP=Hay m s de un %1 con el nombre %2.';
      Text050@1017 : TextConst 'ENU="At least one dimension must be defined in the cube.\Cube = %1";ESP="Defina al menos una dimensi¢n en el cubo.\Cubo = %1"';

    LOCAL PROCEDURE AddAttribute@2(VAR DOMNode@1020001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";Name@1020002 : Text[250];Value@1020003 : Text[250]);
    VAR
      TempAttribute@1020004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      TempAttribute := DOMNode.ownerDocument.createAttribute(Name);
      IF Value <> '' THEN
        TempAttribute.nodeValue := Value;
      DOMNode.attributes.setNamedItem(TempAttribute);
      CLEAR(TempAttribute);
    END;

    LOCAL PROCEDURE AddCubeDatabaseNames@28(VAR DOMNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADatabase@1001 : Record 700);
    VAR
      Node@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      BADatabase.TESTFIELD(Name);
      Node := XmlDoc.createElement('cubedatabase');
      DOMNode.appendChild(Node);
      AddAttribute(Node,'name',BADatabase.Name);
      IF BADatabase."BA SQL Server Instance Name" <> '' THEN
        AddAttribute(Node,'sqlserver',BADatabase."BA SQL Server Instance Name");
      IF BADatabase."Analysis Server Instance Name" <> '' THEN
        AddAttribute(Node,'asserver',BADatabase."Analysis Server Instance Name");
    END;

    LOCAL PROCEDURE AddCompanies@1(VAR DOMNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADatabase@1001 : Record 700);
    VAR
      BACompany@1003 : Record 701;
      Node@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ParentNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      ParentNode := XmlDoc.createElement('companies');
      DOMNode.appendChild(ParentNode);

      BACompany.SETRANGE("BA Db. Code",BADatabase.Code);
      IF BACompany.FIND('-') THEN
        REPEAT
          Node := XmlDoc.createElement('company');
          AddAttribute(Node,'name',BACompany."Company Name");
          ParentNode.appendChild(Node);
        UNTIL BACompany.NEXT = 0;
    END;

    LOCAL PROCEDURE AddSchedules@13(VAR DOMNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADatabase@1001 : Record 700);
    VAR
      BASchedule@1003 : Record 702;
      Node@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ParentNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      ParentNode := XmlDoc.createElement('schedules');
      DOMNode.appendChild(ParentNode);

      BASchedule.SETRANGE("BA Db. Code",BADatabase.Code);
      IF BASchedule.FIND('-') THEN
        REPEAT
          Node := XmlDoc.createElement('schedule');
          AddAttribute(Node,'name',BASchedule.Description);
          AddAttribute(Node,'time',FORMAT(BASchedule."Scheduled Time"));
          ParentNode.appendChild(Node);
        UNTIL BASchedule.NEXT = 0;
    END;

    LOCAL PROCEDURE AddAnalyticalDimensions@8(VAR DOMNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADatabase@1001 : Record 700);
    VAR
      BACubeDim@1003 : Record 713;
      Dim@1005 : Record 348;
      DimVal@1007 : Record 349;
      LedgEntryDim@1008 : Record 355;
      PostedDocDim@1010 : Record 359;
      JournalLineDim@1014 : Record 356;
      ProdDocDim@1015 : Record 358;
      GLBudgetDim@1011 : Record 361;
      DocDim@1012 : Record 357;
      ServContrDim@1016 : Record 389;
      FAAllocDim@1018 : Record 5648;
      DocDimArchive@1017 : Record 5106;
      ItemBudgDim@1019 : Record 7135;
      Node@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      Node2@1009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ParentNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      PrimaryKeyFieldName@1013 : ARRAY [10] OF Text[30];
    BEGIN
      BACubeDim.SETRANGE("BA Db. Code",BADatabase.Code);
      BACubeDim.SETFILTER("Dimension Code",'<>%1','');
      IF NOT BACubeDim.FINDFIRST THEN
        EXIT
      ELSE BEGIN
        ParentNode := XmlDoc.createElement('analyticaldimensions');
        DOMNode.appendChild(ParentNode);
        ChildNode := XmlDoc.createElement('values');
        ParentNode.appendChild(ChildNode);
        AddAttribute(ChildNode,'name',ConvToSQLName(DimVal.TABLENAME));
        Node := XmlDoc.createElement('dimensioncode');
        ChildNode.appendChild(Node);
        AddAttribute(Node,'name',DimVal.FIELDNAME("Dimension Code"));
        Node := XmlDoc.createElement('code');
        ChildNode.appendChild(Node);
        AddAttribute(Node,'name',Dim.FIELDNAME(Code));
        Node := XmlDoc.createElement('name');
        ChildNode.appendChild(Node);
        AddAttribute(Node,'name',Dim.FIELDNAME(Name));
        Node := XmlDoc.createElement('type');
        AddAttribute(Node,'name',ConvToSQLName(DimVal.FIELDNAME("Dimension Value Type")));
        ChildNode.appendChild(Node);
        Node := XmlDoc.createElement('indentation');
        AddAttribute(Node,'name',ConvToSQLName(DimVal.FIELDNAME(Indentation)));
        ChildNode.appendChild(Node);

        BACubeDim.SETRANGE("Dimension Entry Table No.",DATABASE::"Ledger Entry Dimension");
        IF BACubeDim.FINDFIRST THEN
          WITH LedgEntryDim DO BEGIN
            PrimaryKeyFieldName[1] := FIELDNAME("Entry No.");
            AddAnalyticalDimEntryTable(
              ParentNode,TABLENAME,FIELDNAME("Table ID"),
              PrimaryKeyFieldName,FIELDNAME("Dimension Value Code"));
          END;

        CLEAR(PrimaryKeyFieldName);
        BACubeDim.SETRANGE("Dimension Entry Table No.",DATABASE::"Journal Line Dimension");
        IF BACubeDim.FINDFIRST THEN
          WITH JournalLineDim DO BEGIN
            PrimaryKeyFieldName[1] := FIELDNAME("Journal Template Name");
            PrimaryKeyFieldName[2] := FIELDNAME("Journal Batch Name");
            PrimaryKeyFieldName[3] := FIELDNAME("Journal Line No.");
            PrimaryKeyFieldName[4] := FIELDNAME("Allocation Line No.");
            AddAnalyticalDimEntryTable(
              ParentNode,TABLENAME,FIELDNAME("Table ID"),
              PrimaryKeyFieldName,FIELDNAME("Dimension Value Code"));
          END;

        CLEAR(PrimaryKeyFieldName);
        BACubeDim.SETRANGE("Dimension Entry Table No.",DATABASE::"Document Dimension");
        IF BACubeDim.FINDFIRST THEN
          WITH DocDim DO BEGIN
            PrimaryKeyFieldName[1] := FIELDNAME("Document Type");
            PrimaryKeyFieldName[2] := FIELDNAME("Document No.");
            PrimaryKeyFieldName[3] := FIELDNAME("Line No.");
            AddAnalyticalDimEntryTable(
              ParentNode,TABLENAME,FIELDNAME("Table ID"),
              PrimaryKeyFieldName,FIELDNAME("Dimension Value Code"));
          END;

        CLEAR(PrimaryKeyFieldName);
        BACubeDim.SETRANGE("Dimension Entry Table No.",DATABASE::"Production Document Dimension");
        IF BACubeDim.FINDFIRST THEN
          WITH ProdDocDim DO BEGIN
            PrimaryKeyFieldName[1] := FIELDNAME("Document Status");
            PrimaryKeyFieldName[2] := FIELDNAME("Document No.");
            PrimaryKeyFieldName[3] := FIELDNAME("Document Line No.");
            PrimaryKeyFieldName[4] := FIELDNAME("Line No.");
            AddAnalyticalDimEntryTable(
              ParentNode,TABLENAME,FIELDNAME("Table ID"),
              PrimaryKeyFieldName,FIELDNAME("Dimension Value Code"));
          END;

        CLEAR(PrimaryKeyFieldName);
        BACubeDim.SETRANGE("Dimension Entry Table No.",DATABASE::"Posted Document Dimension");
        IF BACubeDim.FINDFIRST THEN
          WITH PostedDocDim DO BEGIN
            PrimaryKeyFieldName[1] := FIELDNAME("Document No.");
            PrimaryKeyFieldName[2] := FIELDNAME("Line No.");
            AddAnalyticalDimEntryTable(
              ParentNode,TABLENAME,FIELDNAME("Table ID"),
              PrimaryKeyFieldName,FIELDNAME("Dimension Value Code"));
          END;

        CLEAR(PrimaryKeyFieldName);
        BACubeDim.SETRANGE("Dimension Entry Table No.",DATABASE::"G/L Budget Dimension");
        IF BACubeDim.FINDFIRST THEN
          WITH GLBudgetDim DO BEGIN
            PrimaryKeyFieldName[1] := FIELDNAME("Entry No.");
            AddAnalyticalDimEntryTable(
              ParentNode,TABLENAME,'',
              PrimaryKeyFieldName,FIELDNAME("Dimension Value Code"));
          END;

        CLEAR(PrimaryKeyFieldName);
        BACubeDim.SETRANGE("Dimension Entry Table No.",DATABASE::"Service Contract Dimension");
        IF BACubeDim.FINDFIRST THEN
          WITH ServContrDim DO BEGIN
            PrimaryKeyFieldName[1] := FIELDNAME(Type);
            PrimaryKeyFieldName[2] := FIELDNAME("No.");
            PrimaryKeyFieldName[3] := FIELDNAME("Line No.");
            AddAnalyticalDimEntryTable(
              ParentNode,TABLENAME,FIELDNAME("Table ID"),
              PrimaryKeyFieldName,FIELDNAME("Dimension Value Code"));
          END;

        CLEAR(PrimaryKeyFieldName);
        BACubeDim.SETRANGE("Dimension Entry Table No.",DATABASE::"Document Dimension Archive");
        IF BACubeDim.FINDFIRST THEN
          WITH DocDimArchive DO BEGIN
            PrimaryKeyFieldName[1] := FIELDNAME("Document Type");
            PrimaryKeyFieldName[2] := FIELDNAME("Document No.");
            PrimaryKeyFieldName[3] := FIELDNAME("Line No.");
            PrimaryKeyFieldName[4] := FIELDNAME("Doc. No. Occurrence");
            PrimaryKeyFieldName[5] := FIELDNAME("Version No.");
            AddAnalyticalDimEntryTable(
              ParentNode,TABLENAME,FIELDNAME("Table ID"),
              PrimaryKeyFieldName,FIELDNAME("Dimension Value Code"));
          END;

        CLEAR(PrimaryKeyFieldName);
        BACubeDim.SETRANGE("Dimension Entry Table No.",DATABASE::"FA Allocation Dimension");
        IF BACubeDim.FINDFIRST THEN
          WITH FAAllocDim DO BEGIN
            PrimaryKeyFieldName[1] := FIELDNAME(Code);
            PrimaryKeyFieldName[2] := FIELDNAME("Allocation Type");
            PrimaryKeyFieldName[3] := FIELDNAME("Line No.");
            AddAnalyticalDimEntryTable(
              ParentNode,TABLENAME,'',
              PrimaryKeyFieldName,FIELDNAME("Dimension Value Code"));
          END;

        CLEAR(PrimaryKeyFieldName);
        BACubeDim.SETRANGE("Dimension Entry Table No.",DATABASE::"Item Budget Dimension");
        IF BACubeDim.FINDFIRST THEN
          WITH ItemBudgDim DO BEGIN
            PrimaryKeyFieldName[1] := FIELDNAME("Entry No.");
            AddAnalyticalDimEntryTable(
              ParentNode,TABLENAME,'',
              PrimaryKeyFieldName,FIELDNAME("Dimension Value Code"));
          END;
      END;
    END;

    LOCAL PROCEDURE AddAnalyticalDimEntryTable@15(VAR ParentNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";TabName@1001 : Text[30];TableIDField@1003 : Text[30];PrimaryKeyFieldName@1004 : ARRAY [10] OF Text[30];DimValCodeFldName@1007 : Text[30]);
    VAR
      Node@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      Node2@1009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      i@1005 : Integer;
    BEGIN
      ChildNode := XmlDoc.createElement('linktable');
      ParentNode.appendChild(ChildNode);
      AddAttribute(ChildNode,'name',ConvToSQLName(TabName));
      IF TableIDField <> '' THEN BEGIN
        Node := XmlDoc.createElement('tableidfield');
        ChildNode.appendChild(Node);
        AddAttribute(Node,'name',ConvToSQLName(TableIDField));
      END;
      Node := XmlDoc.createElement('primarykey');
      ChildNode.appendChild(Node);
      FOR i := 1 TO ARRAYLEN(PrimaryKeyFieldName) DO
       IF PrimaryKeyFieldName[i] <> '' THEN BEGIN
         Node2 := XmlDoc.createElement('field');
         Node.appendChild(Node2);
         AddAttribute(Node2,'order',FORMAT(i));
         AddAttribute(Node2,'name',ConvToSQLName(PrimaryKeyFieldName[i]));
       END;
      Node := XmlDoc.createElement('foreignkey');
      ChildNode.appendChild(Node);
      Node2 := XmlDoc.createElement('field');
      Node.appendChild(Node2);
      AddAttribute(Node2,'order','1');
      AddAttribute(Node2,'name',ConvToSQLName(DimValCodeFldName));
    END;

    LOCAL PROCEDURE AddNumLists@17(VAR DOMNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADatabase@1001 : Record 700);
    VAR
      BANumList@1003 : Record 704;
      BANumListValue@1005 : Record 705;
      Node@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ParentNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      ParentNode := XmlDoc.createElement('enums');
      DOMNode.appendChild(ParentNode);

      BANumList.SETRANGE("BA Db. Code",BADatabase.Code);
      IF BANumList.FIND('-') THEN
        REPEAT
          Node := XmlDoc.createElement('enum');
          AddAttribute(Node,'name',BANumList.Name);
          ParentNode.appendChild(Node);
          BANumListValue.SETRANGE("BA Db. Code",BANumList."BA Db. Code");
          BANumListValue.SETRANGE("BA Db. Num. List Line No.",BANumList."Line No.");
          IF BANumListValue.FIND('-') THEN
            REPEAT
              ChildNode := XmlDoc.createElement('value');
              AddAttribute(ChildNode,'code',FORMAT(BANumListValue.Value));
              AddAttribute(ChildNode,'name',BANumListValue.Name);
              Node.appendChild(ChildNode);
            UNTIL BANumListValue.NEXT = 0;
        UNTIL BANumList.NEXT = 0;
    END;

    LOCAL PROCEDURE AddDimensions@6(VAR DOMNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADatabase@1001 : Record 700);
    VAR
      BADim@1003 : Record 706;
      BADimForKey@1007 : Record 707;
      BADimLevel@1005 : Record 708;
      Node@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ParentNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      ParentNode := XmlDoc.createElement('dimensions');
      DOMNode.appendChild(ParentNode);

      BADim.SETRANGE("BA Db. Code",BADatabase.Code);
      IF BADim.FIND('-') THEN
        REPEAT
          Node := XmlDoc.createElement('dimension');
          AddAttribute(Node,'name',BADim.Name);
          IF BADim.Type = BADim.Type::Time THEN
            AddDimensionTime(Node,BADim,BADatabase)
          ELSE
            AddDimensionStandard(Node,BADim,BADatabase);
          ParentNode.appendChild(Node);
        UNTIL BADim.NEXT = 0;
    END;

    LOCAL PROCEDURE AddDimensionTime@9(VAR DimNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADim@1008 : Record 706;VAR BADatabase@1001 : Record 700);
    VAR
      BACubeDim@1003 : Record 713;
      ChildNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      HasClosingDate@1004 : Boolean;
    BEGIN
      BACubeDim.SETRANGE("BA Db. Code",BADim."BA Db. Code");
      BACubeDim.SETRANGE("BA Db. Dimension Line",BADim."Line No.");
      BACubeDim.SETRANGE("Table No.",DATABASE::"G/L Entry");
      HasClosingDate := BACubeDim.COUNT > 0;

      AddAttribute(DimNode,'type','time');
      IF HasClosingDate THEN BEGIN
        AddAttribute(DimNode,'closing','true');
        AddAttribute(DimNode,'closingname',Text012);
      END;
      ChildNode := XmlDoc.createElement('level');
      AddAttribute(ChildNode,'order','1');
      AddAttribute(ChildNode,'name',Text001);
      AddAttribute(ChildNode,'type','years');
      DimNode.appendChild(ChildNode);
      ChildNode := XmlDoc.createElement('level');
      AddAttribute(ChildNode,'order','2');
      AddAttribute(ChildNode,'name',Text002);
      AddAttribute(ChildNode,'type','quarters');
      DimNode.appendChild(ChildNode);
      ChildNode := XmlDoc.createElement('level');
      AddAttribute(ChildNode,'order','3');
      AddAttribute(ChildNode,'name',Text003);
      AddAttribute(ChildNode,'type','months');
      DimNode.appendChild(ChildNode);
      ChildNode := XmlDoc.createElement('level');
      AddAttribute(ChildNode,'order','4');
      AddAttribute(ChildNode,'name',Text004);
      AddAttribute(ChildNode,'type','days');
      DimNode.appendChild(ChildNode);
    END;

    LOCAL PROCEDURE AddDimensionStandard@11(VAR DimNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADim@1008 : Record 706;VAR BADatabase@1001 : Record 700);
    VAR
      BADimForKey@1007 : Record 707;
      BADimLevel@1005 : Record 708;
      ChildNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      CASE BADim."Standard Type" OF
        BADim."Standard Type"::Table:
          AddDimensionStandardTable(DimNode,BADim,BADatabase);
        BADim."Standard Type"::"Numbered List":
          AddDimensionStandardEnum(DimNode,BADim,BADatabase);
        BADim."Standard Type"::Dimension:
          AddDimensionStandardDim(DimNode,BADim,BADatabase);
      END;
    END;

    LOCAL PROCEDURE AddDimensionStandardTable@21(VAR DimNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADim@1008 : Record 706;VAR BADatabase@1001 : Record 700);
    VAR
      BADimForKey@1007 : Record 707;
      BADimLevel@1005 : Record 708;
      BADimRel@1016 : Record 707;
      Field@1012 : Record 2000000041;
      GLAcc@1019 : Record 15;
      AllObjWithCaption@1020 : Record 2000000058;
      ChildNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      RelTableNode@1018 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      KeyNode@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      KeyFieldNode@1010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      RecRef@1004 : RecordRef;
      FieldRef@1006 : FieldRef;
      KeyRef@1009 : KeyRef;
      FieldList@1013 : Text[250];
      FieldNum@1014 : Integer;
      Expression@1015 : Text[1024];
      i@1011 : Integer;
      j@1017 : Integer;
      FieldCount@1021 : Integer;
    BEGIN
      AddAttribute(DimNode,'type','standard');
      BADim.TESTFIELD("Table No.");
      RecRef.OPEN(BADim."Table No.");
      KeyRef := RecRef.KEYINDEX(1);

      ChildNode := XmlDoc.createElement('table');
      AddAttribute(ChildNode,'name',GetSQLTableName(BADim."Table No."));
      KeyNode := XmlDoc.createElement('primarykey');

      IF BADim."Table No." = DATABASE::"Post Code" THEN
        FieldCount := 1
      ELSE
        FieldCount := KeyRef.FIELDCOUNT;

      FOR i := 1 TO FieldCount DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(i);
        KeyFieldNode := XmlDoc.createElement('field');
        AddAttribute(KeyFieldNode,'order',FORMAT(i));
        AddAttribute(KeyFieldNode,'name',ConvToSQLName(FieldRef.NAME));
        KeyNode.appendChild(KeyFieldNode);
      END;
      ChildNode.appendChild(KeyNode);
      DimNode.appendChild(ChildNode);
      RecRef.CLOSE;

      IF BADim."Table No." = DATABASE::"G/L Account" THEN BEGIN
        KeyNode := XmlDoc.createElement('parent');
        KeyFieldNode := XmlDoc.createElement('typefield');
        AddAttribute(KeyFieldNode,'name',ConvToSQLName(GLAcc.FIELDNAME("Account Type")));
        KeyNode.appendChild(KeyFieldNode);
        KeyFieldNode := XmlDoc.createElement('indentationfield');
        AddAttribute(KeyFieldNode,'name',ConvToSQLName(GLAcc.FIELDNAME(Indentation)));
        KeyNode.appendChild(KeyFieldNode);
        ChildNode.appendChild(KeyNode);
      END;

      BADimRel.SETRANGE("BA Db. Code",BADim."BA Db. Code");
      BADimRel.SETRANGE("BA Db. Dimension Line No.",BADim."Line No.");
      BADimRel.SETFILTER("Relates-from Table No.",'<>0');
      BADimRel.SETFILTER("Relates-to Table No.",'<>0');
      BADimRel.SETFILTER("Relates-from Field Numbers",'<>%1','');
      IF BADimRel.FIND('-') THEN
        REPEAT
          KeyNode := XmlDoc.createElement('foreignkey');
          FieldList := BADimRel."Relates-from Field Numbers";
          j := 0;
          WHILE FieldList <> '' DO BEGIN
            KeyFieldNode := XmlDoc.createElement('field');
            j := j + 1;
            i := STRPOS(FieldList,',');
            IF i < 1 THEN BEGIN
              EVALUATE(FieldNum,FieldList);
              FieldList := '';
            END ELSE BEGIN
              EVALUATE(FieldNum,COPYSTR(FieldList,1,FieldNum - 1));
              FieldList := COPYSTR(FieldList,FieldNum + 1);
            END;
            Field.GET(BADimRel."Relates-from Table No.",FieldNum);
            AddAttribute(KeyFieldNode,'order',FORMAT(j));
            AddAttribute(KeyFieldNode,'name',ConvToSQLName(Field.FieldName));
            KeyNode.appendChild(KeyFieldNode);
          END;
          ChildNode.appendChild(KeyNode);
          RelTableNode := XmlDoc.createElement('table');
          AddAttribute(RelTableNode,'name',ConvToSQLName(GetSQLTableName(BADimRel."Relates-to Table No.")));
          KeyNode := XmlDoc.createElement('primarykey');
          RecRef.OPEN(BADimRel."Relates-to Table No.");
          KeyRef := RecRef.KEYINDEX(1);
          FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
            FieldRef := KeyRef.FIELDINDEX(i);
            KeyFieldNode := XmlDoc.createElement('field');
            AddAttribute(KeyFieldNode,'order',FORMAT(i));
            AddAttribute(KeyFieldNode,'name',ConvToSQLName(FieldRef.NAME));
            KeyNode.appendChild(KeyFieldNode);
          END;
          RelTableNode.appendChild(KeyNode);
          ChildNode.appendChild(RelTableNode);
        UNTIL BADimRel.NEXT = 0;

      i := 0;
      BADimLevel.SETRANGE("BA Db. Code",BADim."BA Db. Code");
      BADimLevel.SETRANGE("BA Db. Dimension Line No.",BADim."Line No.");
      IF NOT BADimLevel.FIND('-') THEN BEGIN
        BADim.TESTFIELD("Field Numbers");
        ChildNode := XmlDoc.createElement('level');
        AddAttribute(ChildNode,'order','1');
        AddAttribute(ChildNode,'name',TrimObjName(ConvToDSOName(BADim.Name)));
        Expression := FieldNosToExpression(BADim."Table No.",BADim."Field Numbers");
        AddAttribute(ChildNode,'type','regular');
        AddAttribute(ChildNode,'expression',Expression);
        DimNode.appendChild(ChildNode);
      END ELSE
        REPEAT
          i := i + 1;
          ChildNode := XmlDoc.createElement('level');
          AddAttribute(ChildNode,'order',FORMAT(i));
          IF BADimLevel."Standard Type" = BADimLevel."Standard Type"::Table THEN BEGIN
            IF BADimLevel.Name <> '' THEN
              AddAttribute(ChildNode,'name',TrimObjName(CONVERTSTR(ConvToDSOName(BADimLevel.Name),'%','_')))
            ELSE BEGIN
              IF BADimLevel."Field Numbers" <> '' THEN BEGIN
                j := STRPOS(BADimLevel."Field Numbers",',');
                IF j < 1 THEN
                  EVALUATE(FieldNum,BADimLevel."Field Numbers")
                ELSE
                  EVALUATE(FieldNum,COPYSTR(BADimLevel."Field Numbers",1,j - 1));
              END ELSE
                FieldNum := BADimLevel."Field No.";
                Field.GET(BADimLevel."Table No.",FieldNum);
              AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table,BADimLevel."Table No.");
              AddAttribute(
                ChildNode,'name',
                TrimObjName(CONVERTSTR(ConvToDSOName(AllObjWithCaption."Object Caption" + ' ' + Field."Field Caption"),'%','_')));
            END;
            AddAttribute(ChildNode,'type','regular');
            IF BADimLevel."Field Numbers" = '' THEN
              AddAttribute(
                ChildNode,'expression',
                STRSUBSTNO(Text006,ConvToSQLName(Field.TableName),ConvToSQLName(Field.FieldName)))
            ELSE
              AddAttribute(
                ChildNode,'expression',FieldNosToExpression(BADimLevel."Table No.",BADimLevel."Field Numbers"));
          END ELSE BEGIN
            BADimLevel.CALCFIELDS("Numbered List Name");
            AddAttribute(ChildNode,'name',TrimObjName(CONVERTSTR(ConvToDSOName(BADimLevel."Numbered List Name"),'%','_')));
            AddAttribute(ChildNode,'type','regular');
            AddAttribute(ChildNode,'expression','enum');
          END;
          DimNode.appendChild(ChildNode);
        UNTIL BADimLevel.NEXT = 0;
    END;

    LOCAL PROCEDURE AddDimensionStandardEnum@22(VAR DimNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADim@1008 : Record 706;VAR BADatabase@1001 : Record 700);
    VAR
      ChildNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      AddAttribute(DimNode,'type','standard');
      BADim.TESTFIELD("Numbered List Line No.");
      ChildNode := XmlDoc.createElement('enum');
      BADim.CALCFIELDS("Numbered List Name");
      AddAttribute(ChildNode,'name',BADim."Numbered List Name");
      DimNode.appendChild(ChildNode);
      ChildNode := XmlDoc.createElement('level');
      AddAttribute(ChildNode,'order','1');
      AddAttribute(ChildNode,'name',Text005);
      AddAttribute(ChildNode,'type','regular');
      AddAttribute(ChildNode,'expression','enum');
      DimNode.appendChild(ChildNode);
    END;

    LOCAL PROCEDURE AddDimensionStandardDim@5(VAR DimNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADim@1008 : Record 706;VAR BADatabase@1001 : Record 700);
    VAR
      Dim@1003 : Record 348;
      ChildNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      AddAttribute(DimNode,'type','analytical');
      AddAttribute(DimNode,'code',BADim."Dimension Code");
      ChildNode := XmlDoc.createElement('level');
      AddAttribute(ChildNode,'order','1');
      AddAttribute(ChildNode,'name',ConvToDSOName(Dim.FIELDCAPTION(Name)));
      AddAttribute(ChildNode,'type','regular');
      AddAttribute(ChildNode,'expression','analytical');
      DimNode.appendChild(ChildNode);
    END;

    LOCAL PROCEDURE AddCubes@3(VAR DOMNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADatabase@1001 : Record 700);
    VAR
      BACube@1003 : Record 709;
      Node@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ParentNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      ParentNode := XmlDoc.createElement('cubes');
      DOMNode.appendChild(ParentNode);

      BACube.SETRANGE("BA Db. Code",BADatabase.Code);
      IF BACube.FIND('-') THEN
        REPEAT
          Node := XmlDoc.createElement('cube');
          AddAttribute(Node,'name',BACube.Name);
          ParentNode.appendChild(Node);
          AddCubeFilters(Node,BACube,BADatabase);
          AddCubeSchema(Node,BACube,BADatabase);
          AddCubeMeasures(Node,BACube,BADatabase);
          AddCubeFunctions(Node,BACube,BADatabase);
          AddCubeDimensions(Node,BACube,BADatabase);
        UNTIL BACube.NEXT = 0;
    END;

    LOCAL PROCEDURE AddCubeFilters@29(VAR CubeNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BACube@1008 : Record 709;VAR BADatabase@1001 : Record 700);
    VAR
      BADbCubeDimension@1004 : Record 713;
      FiltersNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      BADbCubeDimension.SETRANGE("BA Db. Code",BACube."BA Db. Code");
      BADbCubeDimension.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
      BADbCubeDimension.SETRANGE("Table No.",BACube."Fact Table No.");
      BADbCubeDimension.SETFILTER(Filter,'<>%1','');
      IF BADbCubeDimension.FINDSET THEN BEGIN
        FiltersNode := XmlDoc.createElement('filters');
        CubeNode.appendChild(FiltersNode);
        REPEAT
          ChildNode := XmlDoc.createElement('filter');
          FiltersNode.appendChild(ChildNode);
          AddAttribute(ChildNode,'field',GetSQLFieldName(BADbCubeDimension."Table No.",BADbCubeDimension."Field No."));
          AddAttribute(ChildNode,'expression',BADbCubeDimension.Filter);
        UNTIL BADbCubeDimension.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AddCubeSchema@4(VAR CubeNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BACube@1008 : Record 709;VAR BADatabase@1001 : Record 700);
    VAR
      BADbCubeTabRel@1004 : Record 710;
      TempBADbCubeTabRel2@1012 : TEMPORARY Record 710;
      SchemaNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      SchemaNode := XmlDoc.createElement('schema');
      BACube.CALCFIELDS("Fact Table Name");
      AddAttribute(SchemaNode,'fact',GetSQLTableName(BACube."Fact Table No."));
      CubeNode.appendChild(SchemaNode);

      BADbCubeTabRel.SETRANGE("BA Db. Code",BACube."BA Db. Code");
      BADbCubeTabRel.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
      IF BADbCubeTabRel.FIND('-') THEN
        REPEAT
          TempBADbCubeTabRel2 := BADbCubeTabRel;
          TempBADbCubeTabRel2.INSERT;
        UNTIL BADbCubeTabRel.NEXT = 0;
      AddCubeSchemaRelation(
        SchemaNode,TempBADbCubeTabRel2,BACube."Fact Table No.",BACube,BADatabase);
    END;

    LOCAL PROCEDURE AddCubeSchemaRelation@10(VAR ParentNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR TempBADbCubeTabRel@1012 : TEMPORARY Record 710;FromTableNo@1013 : Integer;VAR BACube@1008 : Record 709;VAR BADatabase@1001 : Record 700);
    VAR
      BADbCubeTabRel@1004 : Record 710;
      TempBADbCubeTabRel2@1014 : TEMPORARY Record 710;
      RecRef@1007 : RecordRef;
      KeyRef@1009 : KeyRef;
      FieldRef@1010 : FieldRef;
      TableNode@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      KeyNode@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      i@1011 : Integer;
    BEGIN
      TempBADbCubeTabRel.SETRANGE("Relates-from Table No.",FromTableNo);
      IF NOT TempBADbCubeTabRel.FIND('-') THEN
        EXIT
      ELSE
        REPEAT
          TempBADbCubeTabRel2 := TempBADbCubeTabRel;
          TempBADbCubeTabRel2.INSERT;
          TempBADbCubeTabRel.DELETE;
        UNTIL TempBADbCubeTabRel.NEXT = 0;

      IF TempBADbCubeTabRel2.FIND('-') THEN
        REPEAT
          TableNode := XmlDoc.createElement('relation');
          AddAttribute(TableNode,'table',GetSQLTableName(TempBADbCubeTabRel2."Relates-to Table No."));
          ParentNode.appendChild(TableNode);
          KeyNode := XmlDoc.createElement('foreignkey');
          TableNode.appendChild(KeyNode);
          ChildNode := XmlDoc.createElement('field');
          AddAttribute(ChildNode,'order','1');
          AddAttribute(
            ChildNode,'name',
            GetSQLFieldName(
              TempBADbCubeTabRel2."Relates-from Table No.",TempBADbCubeTabRel2."Relates-from Field No."));
          KeyNode.appendChild(ChildNode);
          RecRef.OPEN(TempBADbCubeTabRel2."Relates-to Table No.");
          KeyRef := RecRef.KEYINDEX(1);
          FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
            FieldRef := KeyRef.FIELDINDEX(i);
            KeyNode := XmlDoc.createElement('primarykey');
            TableNode.appendChild(KeyNode);
            ChildNode := XmlDoc.createElement('field');
            AddAttribute(ChildNode,'order',FORMAT(i));
            AddAttribute(ChildNode,'name',ConvToSQLName(FieldRef.NAME));
            KeyNode.appendChild(ChildNode);
          END;
          RecRef.CLOSE;
          AddCubeSchemaRelation(
            TableNode,TempBADbCubeTabRel,TempBADbCubeTabRel2."Relates-to Table No.",BACube,BADatabase);
        UNTIL TempBADbCubeTabRel2.NEXT = 0;
    END;

    LOCAL PROCEDURE AddCubeMeasures@33(VAR CubeNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BACube@1008 : Record 709;VAR BADatabase@1001 : Record 700);
    VAR
      BADbCubeMeasure@1004 : Record 711;
      SchemaNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      BADbCubeMeasure.SETRANGE("BA Db. Code",BACube."BA Db. Code");
      BADbCubeMeasure.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
      IF BADbCubeMeasure.FIND('-') THEN
        REPEAT
          ChildNode := XmlDoc.createElement('measure');
          CubeNode.appendChild(ChildNode);
          AddAttribute(ChildNode,'name',BADbCubeMeasure.Name);
          IF BADbCubeMeasure.Expression <> '' THEN
            AddAttribute(ChildNode,'expression',ConvExpressionToSQLName(BADbCubeMeasure.Expression))
          ELSE BEGIN
            AddAttribute(
              ChildNode,'expression',
              STRSUBSTNO(
                Text006,GetSQLTableName(BADbCubeMeasure."Table No."),
                GetSQLFieldName(BADbCubeMeasure."Table No.",BADbCubeMeasure."Field No.")));
          END;
          CASE BADbCubeMeasure.Aggregation OF
            BADbCubeMeasure.Aggregation::Sum:
              AddAttribute(ChildNode,'aggregation','sum');
            BADbCubeMeasure.Aggregation::Min:
              AddAttribute(ChildNode,'aggregation','min');
            BADbCubeMeasure.Aggregation::Max:
              AddAttribute(ChildNode,'aggregation','max');
            BADbCubeMeasure.Aggregation::Count:
              AddAttribute(ChildNode,'aggregation','count');
          END;
          IF BADbCubeMeasure."Display Format" <> '' THEN
            AddAttribute(ChildNode,'format',BADbCubeMeasure."Display Format")
          ELSE
            AddAttribute(ChildNode,'format','#,0.00');
        UNTIL BADbCubeMeasure.NEXT = 0;
    END;

    LOCAL PROCEDURE AddCubeFunctions@46(VAR CubeNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BACube@1008 : Record 709;VAR BADatabase@1001 : Record 700);
    VAR
      BADbCubeFunction@1004 : Record 712;
      SchemaNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      BADbCubeFunction.SETRANGE("BA Db. Code",BACube."BA Db. Code");
      BADbCubeFunction.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
      IF BADbCubeFunction.FIND('-') THEN
        REPEAT
          ChildNode := XmlDoc.createElement('function');
          CubeNode.appendChild(ChildNode);
          AddAttribute(ChildNode,'name',BADbCubeFunction.Name);
          CASE BADbCubeFunction.Type OF
            BADbCubeFunction.Type::"Balance at Date":
              AddAttribute(ChildNode,'type','balance');
            BADbCubeFunction.Type::"Year to Date":
              AddAttribute(ChildNode,'type','yeartodate');
          END;
          BADbCubeFunction.CALCFIELDS("Measure Name","Time Dimension Name");
          AddAttribute(ChildNode,'measure',BADbCubeFunction."Measure Name");
          AddAttribute(ChildNode,'timedimension',BADbCubeFunction."Time Dimension Name");
          IF BADbCubeFunction."Display Format" <> '' THEN
            AddAttribute(ChildNode,'format',BADbCubeFunction."Display Format")
          ELSE
            AddAttribute(ChildNode,'format','standard');
        UNTIL BADbCubeFunction.NEXT = 0;
    END;

    LOCAL PROCEDURE AddCubeDimensions@53(VAR CubeNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BACube@1008 : Record 709;VAR BADatabase@1001 : Record 700);
    VAR
      BADbCubeDim@1004 : Record 713;
      BADbDim@1006 : Record 706;
      DimNode@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      KeyNode@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      FieldNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      RecRef@1009 : RecordRef;
      KeyRef@1010 : KeyRef;
      FieldRef@1011 : FieldRef;
      i@1012 : Integer;
    BEGIN
      BADbCubeDim.SETRANGE("BA Db. Code",BACube."BA Db. Code");
      BADbCubeDim.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
      IF BADbCubeDim.FIND('-') THEN
        REPEAT
          DimNode := XmlDoc.createElement('dimension');
          BADbCubeDim.CALCFIELDS("BA Db. Dimension Name");
          AddAttribute(DimNode,'name',BADbCubeDim."BA Db. Dimension Name");
          CubeNode.appendChild(DimNode);
          KeyNode := XmlDoc.createElement('foreignkey');
          IF BADbCubeDim."Table No." <> BACube."Fact Table No." THEN
            AddAttribute(
              KeyNode,'table',
              ConvToSQLName(
                GetSQLTableName(BADbCubeDim."Table No.")));
          DimNode.appendChild(KeyNode);

          BADbDim.GET(BADbCubeDim."BA Db. Code",BADbCubeDim."BA Db. Dimension Line");
          IF (BADbCubeDim."Dimension Code" = '') AND
             (BADbCubeDim."Table No." <> BADbDim."Table No.")
          THEN BEGIN
            FieldNode := XmlDoc.createElement('field');
            KeyNode.appendChild(FieldNode);
            AddAttribute(FieldNode,'order','1');
            AddAttribute(FieldNode,'name',GetSQLFieldName(BADbCubeDim."Table No.",BADbCubeDim."Field No."));
          END ELSE BEGIN
            RecRef.OPEN(BADbCubeDim."Table No.");
            KeyRef := RecRef.KEYINDEX(1);
            FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
              FieldRef := KeyRef.FIELDINDEX(i);
              FieldNode := XmlDoc.createElement('field');
              AddAttribute(FieldNode,'order',FORMAT(i));
              AddAttribute(FieldNode,'name',ConvToSQLName(FieldRef.NAME));
              KeyNode.appendChild(FieldNode);
            END;
            RecRef.CLOSE;
          END;
          IF BADbCubeDim."Dimension Code" <> '' THEN BEGIN
            BADbCubeDim.TESTFIELD("Table No.");
            BADbCubeDim.TESTFIELD("Dimension Entry Table No.");
            AddAttribute(DimNode,'tableid',FORMAT(BADbCubeDim."Table No."));
            AddAttribute(DimNode,'type','analytical');
            AddAttribute(
              DimNode,'linktable',
              ConvToSQLName(
                GetSQLTableName(BADbCubeDim."Dimension Entry Table No.")));
          END;
        UNTIL BADbCubeDim.NEXT = 0;
    END;

    LOCAL PROCEDURE AddVirtCubes@7(VAR DOMNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR BADatabase@1001 : Record 700);
    VAR
      BAVirtCube@1003 : Record 714;
      BAVirtCubeMember@1005 : Record 715;
      BAVirtCubeCalc@1007 : Record 716;
      Node@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ParentNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      ParentNode := XmlDoc.createElement('virtualcubes');
      DOMNode.appendChild(ParentNode);

      BAVirtCube.SETRANGE("BA Db. Code",BADatabase.Code);
      IF BAVirtCube.FIND('-') THEN
        REPEAT
          Node := XmlDoc.createElement('virtualcube');
          AddAttribute(Node,'name',BAVirtCube.Name);
          ParentNode.appendChild(Node);
          BAVirtCubeMember.SETRANGE("BA Db. Code",BAVirtCube."BA Db. Code");
          BAVirtCubeMember.SETRANGE("BA Db. Virt. Cube Line No.",BAVirtCube."Line No.");
          IF BAVirtCubeMember.FIND('-') THEN
            REPEAT
              BAVirtCubeMember.CALCFIELDS("Cube Name");
              ChildNode := XmlDoc.createElement('cube');
              AddAttribute(ChildNode,'name',BAVirtCubeMember."Cube Name");
              Node.appendChild(ChildNode);
            UNTIL BAVirtCubeMember.NEXT = 0;
          BAVirtCubeCalc.SETRANGE("BA Db. Code",BAVirtCube."BA Db. Code");
          BAVirtCubeCalc.SETRANGE("BA Db. Virt. Cube Line No.",BAVirtCube."Line No.");
          IF BAVirtCubeCalc.FIND('-') THEN
            REPEAT
              ChildNode := XmlDoc.createElement('calculation');
              Node.appendChild(ChildNode);
              AddAttribute(ChildNode,'name',BAVirtCubeCalc.Name);
              AddAttribute(ChildNode,'expression',BAVirtCubeCalc.Expression);
              IF BAVirtCubeCalc."Display Format" = '' THEN
                AddAttribute(ChildNode,'format','standard')
              ELSE
                AddAttribute(ChildNode,'format',BAVirtCubeCalc."Display Format");
            UNTIL BAVirtCubeCalc.NEXT = 0;
        UNTIL BAVirtCube.NEXT = 0;
    END;

    LOCAL PROCEDURE FieldNosToExpression@24(TableID@1001 : Integer;FieldList2@1000 : Text[50]) : Text[1024];
    VAR
      Field@1002 : Record 2000000041;
      FieldList@1006 : Text[50];
      Expression@1003 : Text[1024];
      FieldNum@1005 : Integer;
      i@1004 : Integer;
    BEGIN
      FieldList := FieldList2;
      REPEAT
        i := STRPOS(FieldList,',');
        IF i < 1 THEN
          EVALUATE(FieldNum,FieldList)
        ELSE BEGIN
          EVALUATE(FieldNum,COPYSTR(FieldList,1,i - 1));
          FieldList := COPYSTR(FieldList,i + 1);
        END;
        Field.GET(TableID,FieldNum);
        IF Expression <> '' THEN
          Expression := Expression + '+' + ''' ''' + '+';
        Expression := Expression + STRSUBSTNO(Text006,ConvToSQLName(Field.TableName),ConvToSQLName(Field.FieldName));
      UNTIL (i < 1) OR (STRLEN(Expression) > MAXSTRLEN(Expression) - 64);
      EXIT(Expression);
    END;

    PROCEDURE ConvToSQLName@37(NativeName@1000 : Text[250]) : Text[250];
    VAR
      BADatabase@1001 : Record 700;
    BEGIN
      IF BADatabase.RECORDLEVELLOCKING THEN
        EXIT(ConvToDSOName(NativeName))
      ELSE
        EXIT(NativeName);
    END;

    PROCEDURE ConvToDSOName@23(NativeName@1000 : Text[250]) : Text[250];
    BEGIN
      EXIT(CONVERTSTR(NativeName,Text007,Text008));
    END;

    LOCAL PROCEDURE GetSQLTableName@26(TableID@1000 : Integer) : Text[30];
    VAR
      Object@1001 : Record 2000000001;
    BEGIN
      Object.GET(Object.Type::Table,'',TableID);
      EXIT(ConvToSQLName(Object.Name));
    END;

    LOCAL PROCEDURE GetSQLFieldName@36(TableID@1000 : Integer;FieldID@1002 : Integer) : Text[30];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(TableID,FieldID);
      EXIT(ConvToSQLName(Field.FieldName));
    END;

    PROCEDURE ConvExpressionToSQLName@16(NativeName@1000 : Text[250]) : Text[250];
    VAR
      BADatabase@1001 : Record 700;
      SQLName@1005 : Text[250];
      t@1004 : Text[250];
      i@1002 : Integer;
      j@1003 : Integer;
    BEGIN
      IF NOT BADatabase.RECORDLEVELLOCKING THEN
        EXIT(NativeName);

      SQLName := NativeName;
      t := SQLName;
      i := STRPOS(t,'[');
      j := STRPOS(t,']');
      WHILE (i > 0) AND (j > 1) AND (j > i) DO BEGIN
        SQLName := COPYSTR(SQLName,1,i) + ConvToSQLName(COPYSTR(SQLName,i + 1, j - i - 1)) + COPYSTR(SQLName,j);
        t[i] := '(';
        t[j] := ')';
        i := STRPOS(t,'[');
        j := STRPOS(t,']');
      END;
      EXIT(SQLName);
    END;

    LOCAL PROCEDURE TrimObjName@12(Name@1000 : Text[250]) : Text[24];
    BEGIN
      EXIT(COPYSTR(Name,1,24));
    END;

    LOCAL PROCEDURE AssertBADatabaseIsWellformed@14(BADatabase@1000 : Record 700);
    BEGIN
      AssertSharedDimIsWellformed(BADatabase);
      AssertNumListIsWellformed(BADatabase);
      AssertCubeIsWellFormed(BADatabase);
      AssertVirtualCubeIsWellformed(BADatabase);
    END;

    PROCEDURE AssertSharedDimIsWellformed@19(BADatabase@1000 : Record 700);
    VAR
      BADim@1001 : Record 706;
    BEGIN
      BADim.SETRANGE("BA Db. Code",BADatabase.Code);
      IF BADim.FIND('-') THEN
        REPEAT
          BADim.SETRANGE(Name,BADim.Name);
          IF BADim.COUNT > 1 THEN
            ERROR(Text040,BADim.TABLECAPTION,BADim.Name,BADim."BA Db. Code");
          BADim.SETRANGE(Name);
        UNTIL BADim.NEXT = 0;
    END;

    PROCEDURE AssertNumListIsWellformed@20(BADatabase@1000 : Record 700);
    VAR
      BANumList@1001 : Record 704;
    BEGIN
      BANumList.SETRANGE("BA Db. Code",BADatabase.Code);
      IF BANumList.FIND('-') THEN
        REPEAT
          BANumList.SETRANGE(Name,BANumList.Name);
          IF BANumList.COUNT > 1 THEN
            ERROR(Text040,BANumList.TABLECAPTION,BANumList.Name,BANumList."BA Db. Code");
          BANumList.SETRANGE(Name);
        UNTIL BANumList.NEXT = 0;
    END;

    LOCAL PROCEDURE AssertCubeIsWellFormed@18(BADatabase@1000 : Record 700);
    VAR
      BACube@1002 : Record 709;
      BACubeMeasure@1001 : Record 711;
    BEGIN
      BACube.SETRANGE("BA Db. Code",BADatabase.Code);
      IF NOT BACube.FIND('-') THEN
        ERROR(Text010,BADatabase.Code);

      REPEAT
        BACube.SETRANGE(Name,BACube.Name);
        IF BACube.COUNT > 1 THEN
          ERROR(Text040,BACube.TABLECAPTION,BACube.Name,BACube."BA Db. Code");
        BACube.SETRANGE(Name);
        AssertCubeDimIsWellformed(BACube);
        AssertCubeMeasureIsWellformed(BACube);
        AssertCubeFunctionIsWellformed(BACube);
      UNTIL BACube.NEXT = 0;
    END;

    LOCAL PROCEDURE AssertCubeMeasureIsWellformed@27(BACube@1003 : Record 709);
    VAR
      BACubeMeasure@1001 : Record 711;
      Field@1000 : Record 2000000041;
    BEGIN
      //Assert there exists alteast one measure for a cube.
      BACubeMeasure.SETRANGE("BA Db. Code",BACube."BA Db. Code");
      BACubeMeasure.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
      IF NOT BACubeMeasure.FIND('-') THEN
        ERROR(Text020,BACube.Name);

      REPEAT
        BACubeMeasure.SETRANGE(Name,BACubeMeasure.Name);
        IF BACubeMeasure.COUNT > 1 THEN
          ERROR(Text040,BACubeMeasure.TABLECAPTION,BACubeMeasure.Name,BACubeMeasure."BA Db. Code");
        BACubeMeasure.SETRANGE(Name);

        //Assert type Cube Measure is integer or decimal.
        Field.GET(BACubeMeasure."Table No.",BACubeMeasure."Field No.");
        IF Field.Class <> Field.Class::Normal THEN BEGIN
          BACubeMeasure.CALCFIELDS("Field Name");
          Field.Class := Field.Class::Normal;
          ERROR(Text021,FORMAT(Field.Class),BACube.Name,BACubeMeasure."Field Name");
        END;

      UNTIL BACubeMeasure.NEXT = 0;
    END;

    LOCAL PROCEDURE AssertCubeFunctionIsWellformed@50(BACube@1003 : Record 709);
    VAR
      BACubeFunc@1001 : Record 712;
      BACubeFunc1@1000 : Record 712;
    BEGIN
      //Assert function names are unique.
      BACubeFunc.SETRANGE("BA Db. Code",BACube."BA Db. Code");
      BACubeFunc.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
      IF BACubeFunc.FIND('-') THEN
        REPEAT
          BACubeFunc1.RESET;
          BACubeFunc1.SETRANGE("BA Db. Code",BACubeFunc."BA Db. Code");
          BACubeFunc1.SETRANGE("BA Db. Cube Line No.",BACubeFunc."BA Db. Cube Line No.");
          BACubeFunc1.SETFILTER("Line No.",'<>%1',BACubeFunc."Line No.");
          BACubeFunc1.SETRANGE(Name,BACubeFunc.Name);
          IF BACubeFunc1.COUNT > 0 THEN
            ERROR(Text040,BACubeFunc1.TABLECAPTION,BACubeFunc.Name,BACube.Name);
        UNTIL BACubeFunc.NEXT = 0;
    END;

    PROCEDURE AssertVirtualCubeIsWellformed@62(BADatabase@1000 : Record 700);
    VAR
      BAVirtualCube@1001 : Record 714;
      BAVirtualCube1@1002 : Record 714;
    BEGIN
      //Assert virtual cube names are unique.
      BAVirtualCube.SETRANGE("BA Db. Code",BADatabase.Code);
      IF BAVirtualCube.FIND('-') THEN
        REPEAT
          BAVirtualCube1.SETRANGE("BA Db. Code",BAVirtualCube."BA Db. Code");
          BAVirtualCube1.SETFILTER("Line No.",'<>%1',BAVirtualCube."Line No.");
          BAVirtualCube1.SETRANGE(Name,BAVirtualCube.Name);
          IF BAVirtualCube1.COUNT > 0 THEN
            ERROR(Text041,BAVirtualCube1.TABLECAPTION,BAVirtualCube.Name);
        UNTIL BAVirtualCube.NEXT = 0;
    END;

    PROCEDURE AssertCubeDimIsWellformed@25(BACube@1000 : Record 709);
    VAR
      BACubeDimension@1003 : Record 713;
    BEGIN
      //Assert Cube Dimensions is unique.
      BACubeDimension.SETRANGE("BA Db. Code",BACube."BA Db. Code");
      BACubeDimension.SETRANGE("BA Db. Cube Line No.",BACube."Line No.");
      IF NOT BACubeDimension.FIND('-') THEN
        ERROR(Text050,BACube.Name);
    END;

    EVENT XmlDoc@1000::ondataavailable@198();
    BEGIN
    END;

    EVENT XmlDoc@1000::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}
