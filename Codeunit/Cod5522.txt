OBJECT Codeunit 5522 Order Planning Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempUnplannedDemand@1007 : Record 5520;
      SalesHeader@1005 : Record 36;
      ProdOrder@1003 : Record 5405;
      ProdOrderComp@1002 : Record 5407;
      CompanyInfo@1008 : Record 79;
      GetUnplannedDemand@1001 : Codeunit 5520;
      DemandType@1000 : ' ,Production,Sales';
      HasGotCompanyInfo@1006 : Boolean;
      Text000@1011 : TextConst 'ENU=Generating Lines to Plan @1@@@@@@@;ESP=Generando l¡neas de plan @1@@@@@@@';
      Text001@1015 : TextConst 'ENU=Item Substitution is not possible for the active line.;ESP=No es posible sustituir el producto de la l¡nea activa.';
      Text003@1010 : TextConst 'ENU=You cannot use this function because the active line has no %1.;ESP=No puede usar esta funci¢n, la l¡nea activa no tiene %1.';
      Text004@1016 : TextConst 'ENU=All items are available and no planning lines are created.;ESP=Todos los productos est n disponibles, no se crearon l¡neas en el plan.';
      DelReqLine@1017 : Boolean;

    PROCEDURE GetOrdersToPlan@1(VAR ReqLine@1000 : Record 246);
    VAR
      Window@1002 : Dialog;
      WindowUpdateTime@1001 : Time;
      i@1003 : Integer;
      NoOfRecords@1004 : Integer;
    BEGIN
      WITH TempUnplannedDemand DO BEGIN
        ReqLine.LOCKTABLE;
        ReqLine.SETCURRENTKEY("User ID","Worksheet Template Name");
        ReqLine.SETRANGE("User ID",USERID);
        ReqLine.SETRANGE("Worksheet Template Name",'');
        ReqLine.DELETEALL(TRUE);

        ReqLine.RESET;
        ReqLine.SETRANGE("Worksheet Template Name",'');
        IF ReqLine.FIND('+') THEN;

        GetUnplannedDemand.RUN(TempUnplannedDemand);

        SETCURRENTKEY("Demand Date",Level);
        SETRANGE(Level,0);

        i := 0;
        Window.OPEN(Text000);
        WindowUpdateTime := TIME;
        NoOfRecords := COUNT;

        IF FIND('-') THEN
          REPEAT
            i := i + 1;
            IF TIME - WindowUpdateTime >= 300 THEN BEGIN
              WindowUpdateTime := TIME;
              Window.UPDATE(1,ROUND(i / NoOfRecords * 10000,1));
            END;

            InsertDemandLines(ReqLine);
            DELETE;
          UNTIL NEXT = 0;

        Window.CLOSE;

        ReqLine.RESET;
        ReqLine.SETCURRENTKEY("User ID","Worksheet Template Name");
        ReqLine.SETRANGE("User ID",USERID);
        IF NOT ReqLine.FIND('-') THEN
          ERROR(Text004);
        COMMIT;
      END;
    END;

    PROCEDURE InsertDemandLines@9(VAR ReqLine@1000 : Record 246);
    VAR
      UnplannedDemand@1002 : Record 5520;
      Item@1003 : Record 27;
      SalesLine@1005 : Record 37;
      ProdOrderComp@1006 : Record 5407;
      PlanningLineMgt@1004 : Codeunit 99000809;
      ItemTrackingMgt@1007 : Codeunit 6500;
      HeaderExists@1001 : Boolean;
    BEGIN
      WITH TempUnplannedDemand DO BEGIN
        UnplannedDemand.COPY(TempUnplannedDemand);

        RESET;
        SETRECFILTER;
        SETRANGE("Demand Line No.");
        SETRANGE("Demand Ref. No.");
        SETRANGE(Level,1);
        FIND('-');
        HeaderExists := FALSE;

        REPEAT
          IF DemandType IN ["Demand Type",DemandType::" "] THEN BEGIN
            IF NOT HeaderExists THEN
              InsertDemandHeader(UnplannedDemand,ReqLine);
            HeaderExists := TRUE;

            ReqLine.TransferFromUnplannedDemand(TempUnplannedDemand);
            ReqLine.SetSupplyQty("Quantity (Base)","Needed Qty. (Base)");
            ReqLine.SetSupplyDates("Demand Date");
            ReqLine.INSERT;

            IF Item."No." <> "Item No." THEN
              Item.GET("Item No.");
            IF Item."Item Tracking Code" <> '' THEN
              IF "Demand Type" = "Demand Type"::Sales THEN BEGIN
                SalesLine.GET("Demand SubType","Demand Order No.","Demand Line No.");
                ItemTrackingMgt.CopyItemTracking(SalesLine.RowID1,ReqLine.RowID1,TRUE);
              END ELSE BEGIN
                ProdOrderComp.GET("Demand SubType","Demand Order No.","Demand Line No.","Demand Ref. No.");
                ItemTrackingMgt.CopyItemTracking(ProdOrderComp.RowID1,ReqLine.RowID1,TRUE);
              END;

            PlanningLineMgt.Calculate(ReqLine,1,TRUE,TRUE,0);
            ReqLine.FIND('+');
          END;
          DELETE;
        UNTIL NEXT = 0;

        COPY(UnplannedDemand);
      END;
    END;

    PROCEDURE InsertDemandHeader@19(UnplannedDemand@1001 : Record 5520;VAR ReqLine@1000 : Record 246);
    BEGIN
      WITH ReqLine DO BEGIN
        INIT;
        CASE UnplannedDemand."Demand Type" OF
          UnplannedDemand."Demand Type"::Sales:
            "Demand Type" := DATABASE::"Sales Line";
          UnplannedDemand."Demand Type"::Production:
            "Demand Type" := DATABASE::"Prod. Order Component";
        END;
        "Demand Subtype" := UnplannedDemand."Demand SubType";
        "Demand Order No." := UnplannedDemand."Demand Order No.";
        Status := UnplannedDemand.Status;
        "Demand Date" := UnplannedDemand."Demand Date";
        Description := UnplannedDemand.Description;

        Level := 0;
        "Replenishment System" := "Replenishment System"::" ";
        "Line No." := "Line No." + 10000;
        "User ID" := USERID;
        INSERT;
      END;
    END;

    PROCEDURE DeleteLine@8() : Boolean;
    BEGIN
      EXIT(DelReqLine);
    END;

    PROCEDURE CalcNeededQty@15(AvailableQty@1000 : Decimal;DemandQty@1001 : Decimal) : Decimal;
    BEGIN
      CASE TRUE OF
        AvailableQty >= DemandQty:
          EXIT(0);
        AvailableQty < 0:
          EXIT(DemandQty);
        ELSE
          EXIT(DemandQty - AvailableQty);
      END;
    END;

    PROCEDURE CalcATPQty@12(ItemNo@1009 : Text[250];VariantFilter@1008 : Text[250];LocationFilter@1007 : Text[250];DemandDate@1006 : Date) : Decimal;
    VAR
      Item@1004 : Record 27;
      AvailableToPromise@1005 : Codeunit 5790;
      GrossRequirement@1000 : Decimal;
      ScheduledRcpt@1001 : Decimal;
      ODF@1003 : DateFormula;
    BEGIN
      IF ItemNo = '' THEN
        EXIT(0);

      Item.GET(ItemNo);
      Item.SETRANGE("Variant Filter",VariantFilter);
      Item.SETRANGE("Location Filter",LocationFilter);
      Item.SETRANGE("Date Filter",0D,DemandDate);
      Item.SETRANGE("Drop Shipment Filter",FALSE);
      IF DemandDate = 0D THEN
        DemandDate := WORKDATE;

      EXIT(AvailableToPromise.QtyAvailabletoPromise(Item,GrossRequirement,ScheduledRcpt,DemandDate,0,ODF))
    END;

    PROCEDURE CalcATPEarliestDate@5(ItemNo@1007 : Text[250];VariantFilter@1006 : Text[250];LocationFilter@1002 : Text[250];DemandDate@1000 : Date;Quantity@1008 : Decimal) : Date;
    VAR
      Item@1004 : Record 27;
      AvailableToPromise@1005 : Codeunit 5790;
      AvailableQty@1003 : Decimal;
    BEGIN
      IF ItemNo = '' THEN
        EXIT(0D);

      GetCompanyInfo;
      IF DemandDate = 0D THEN
        DemandDate := WORKDATE;

      Item.GET(ItemNo);
      Item.SETRANGE("Variant Filter",VariantFilter);
      Item.SETRANGE("Location Filter",LocationFilter);
      Item.SETRANGE("Drop Shipment Filter",FALSE);
      EXIT(
        AvailableToPromise.EarliestAvailabilityDate(
          Item,Quantity,DemandDate,Quantity,DemandDate,AvailableQty,
          CompanyInfo."Check-Avail. Time Bucket",CompanyInfo."Check-Avail. Period Calc."));
    END;

    PROCEDURE GetCompanyInfo@11();
    BEGIN
      IF HasGotCompanyInfo THEN
        EXIT;
      HasGotCompanyInfo := CompanyInfo.GET;
    END;

    PROCEDURE SetSalesOrder@2(SalesHeader2@1001 : Record 36);
    BEGIN
      SalesHeader := SalesHeader2;
      DemandType := DemandType::Sales;
    END;

    PROCEDURE SetProdOrder@3(ProdOrder2@1000 : Record 5405);
    BEGIN
      ProdOrder := ProdOrder2;
      DemandType := DemandType::Production;
    END;

    PROCEDURE InsertAltSupplySubstitution@16(VAR ReqLine@1000 : Record 246);
    VAR
      TempItemSub@1007 : TEMPORARY Record 5715;
      ReqLine2@1008 : TEMPORARY Record 246;
      ItemSubst@1006 : Codeunit 5701;
      PlanningLineMgt@1004 : Codeunit 99000809;
      UnAvailableQtyBase@1002 : Decimal;
    BEGIN
      IF NOT SubstitutionPossible(ReqLine) THEN
        ERROR(Text001);

      CLEAR(ItemSubst);
      IF NOT ItemSubst.PrepareSubstList(
           ReqLine."No.",
           ReqLine."Variant Code",
           ReqLine."Location Code",
           ReqLine."Due Date",
           TRUE)
      THEN
        ItemSubst.ErrorMessage(ReqLine."No.",ReqLine."Variant Code");

      ItemSubst.GetTempItemSubstList(TempItemSub);

      TempItemSub.RESET;
      TempItemSub.SETRANGE("Variant Code",ReqLine."Variant Code");
      TempItemSub.SETRANGE("Location Filter",ReqLine."Location Code");
      IF TempItemSub.FIND('-') THEN;
      IF FORM.RUNMODAL(FORM::"Item Substitution Entries",TempItemSub) = ACTION::LookupOK THEN BEGIN
        // Update sourceline
        WITH ReqLine DO
          ProdOrderComp.GET("Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
        ItemSubst.UpdateComponent(
          ProdOrderComp,TempItemSub."Substitute No.",TempItemSub."Substitute Variant Code");
        ProdOrderComp.MODIFY(TRUE);
        ProdOrderComp.AutoReserve;

        IF TempItemSub."Quantity Avail. on Shpt. Date" >= ReqLine."Needed Quantity (Base)" THEN BEGIN
          ReqLine.DELETE(TRUE);
          DelReqLine := TRUE;
        END ELSE BEGIN
          ReqLine2 := ReqLine; // Save Original Line

          UnAvailableQtyBase :=
            CalcNeededQty(
              TempItemSub."Quantity Avail. on Shpt. Date",ReqLine2."Demand Quantity (Base)");

          // Update Req.Line
          ReqLine."Worksheet Template Name" := ReqLine2."Worksheet Template Name";
          ReqLine."Journal Batch Name" := ReqLine2."Journal Batch Name";
          ReqLine."Line No." := ReqLine2."Line No.";
          ReqLine."Location Code" := ProdOrderComp."Location Code";
          ReqLine."Bin Code" := ProdOrderComp."Bin Code";
          ReqLine.VALIDATE("No.",ProdOrderComp."Item No.");
          ReqLine.VALIDATE("Variant Code",ProdOrderComp."Variant Code");
          ReqLine."Unit Of Measure Code (Demand)" := ProdOrderComp."Unit of Measure Code";
          ReqLine."Qty. per UOM (Demand)" := ProdOrderComp."Qty. per Unit of Measure";
          ReqLine.SetSupplyQty(ReqLine2."Demand Quantity (Base)",UnAvailableQtyBase);
          ReqLine.SetSupplyDates(ReqLine2."Demand Date");
          ReqLine."Original Item No." := ReqLine2."No.";
          ReqLine."Original Variant Code" := ReqLine2."Variant Code";
          ReqLine.MODIFY;
          PlanningLineMgt.Calculate(ReqLine,1,TRUE,TRUE,0);
        END;
      END;
    END;

    PROCEDURE SubstitutionPossible@10(ReqLine@1000 : Record 246) : Boolean;
    VAR
      Item@1001 : Record 27;
    BEGIN
      IF (ReqLine.Type <> ReqLine.Type::Item) OR
         (ReqLine."Demand Type" <> DATABASE::"Prod. Order Component")
      THEN
        EXIT(FALSE);

      IF NOT Item.GET(ReqLine."No.") THEN
        EXIT(FALSE);

      IF Item."Manufacturing Policy" = Item."Manufacturing Policy"::"Make-to-Order" THEN
        EXIT(FALSE);

      ReqLine.CALCFIELDS("Reserved Qty. (Base)");
      IF ReqLine."Reserved Qty. (Base)" <> 0 THEN
        EXIT(FALSE);

      IF ProdOrderComp.GET(
           ReqLine."Demand Subtype",
           ReqLine."Demand Order No.",
           ReqLine."Demand Line No.",
           ReqLine."Demand Ref. No.")
      THEN
        IF ProdOrderComp."Supplied-by Line No." <> 0 THEN
          EXIT(FALSE);

      Item.CALCFIELDS("Substitutes Exist");
      EXIT(Item."Substitutes Exist");
    END;

    PROCEDURE InsertAltSupplyLocation@6(VAR ReqLine@1000 : Record 246);
    VAR
      Location@1001 : Record 14;
      TempReqLine@1003 : TEMPORARY Record 246;
      AvailableQtyBase@1005 : Decimal;
      NextLineNo@1004 : Integer;
    BEGIN
      ReqLine.TESTFIELD(Type,ReqLine.Type::Item);
      IF ReqLine."Location Code" = '' THEN
        ERROR(Text003,ReqLine.FIELDCAPTION("Location Code"));

      NextLineNo := 0;

      Location.RESET;
      Location.SETRANGE("Use As In-Transit",FALSE);
      Location.SETFILTER(Code,'<>%1',ReqLine."Location Code");
      IF Location.FIND('-') THEN
        REPEAT
          AvailableQtyBase :=
            CalcATPQty(
              ReqLine."No.",ReqLine."Variant Code",Location.Code,ReqLine."Demand Date");

          IF AvailableQtyBase > 0 THEN
            AvailableQtyBase -= PromisedTransferQty(ReqLine,Location.Code);

          IF AvailableQtyBase > 0 THEN BEGIN
            NextLineNo += 10000;
            TempReqLine := ReqLine;
            TempReqLine."Line No." += NextLineNo;
            TempReqLine."Transfer-from Code" := Location.Code;

            IF TempReqLine."Qty. per Unit of Measure" = 0 THEN
              TempReqLine."Qty. per Unit of Measure" := 1;

            TempReqLine."Demand Qty. Available" :=
              ROUND(AvailableQtyBase / TempReqLine."Qty. per Unit of Measure",0.00001);
            TempReqLine.Quantity := ROUND(AvailableQtyBase / TempReqLine."Qty. per Unit of Measure",0.00001);
            TempReqLine."Quantity (Base)" := AvailableQtyBase;

            TempReqLine.INSERT;
          END;
        UNTIL Location.NEXT = 0;

      TempReqLine.SETRANGE("No.",TempReqLine."No.");
      IF FORM.RUNMODAL(FORM::"Get Alternative Supply",TempReqLine) = ACTION::LookupOK THEN BEGIN
        ReqLine.VALIDATE("Replenishment System",ReqLine."Replenishment System"::Transfer);
        ReqLine.VALIDATE("Supply From",TempReqLine."Transfer-from Code");
        ReqLine.CalcStartingDate('');
        IF TempReqLine."Quantity (Base)" < ReqLine."Quantity (Base)" THEN
          ReqLine.VALIDATE(
            Quantity,ROUND(TempReqLine."Quantity (Base)" / ReqLine."Qty. per Unit of Measure" ,0.00001));
      END;
    END;

    PROCEDURE PromisedTransferQty@20(ReqLine@1001 : Record 246;LocationCode@1002 : Code[10]) OrderQtyBase : Decimal;
    VAR
      ReqLine2@1000 : Record 246;
    BEGIN
      WITH ReqLine DO BEGIN
        ReqLine2.RESET;
        ReqLine2.SETCURRENTKEY("Worksheet Template Name","Journal Batch Name",Type,"No.","Due Date");
        ReqLine2.SETRANGE("Worksheet Template Name",'');
        ReqLine2.SETRANGE("Journal Batch Name",'');
        ReqLine2.SETRANGE(Type,ReqLine2.Type::Item);
        ReqLine2.SETRANGE("No.","No.");
        ReqLine2.SETRANGE("User ID",USERID);
        ReqLine2.SETRANGE("Variant Code","Variant Code");
        ReqLine2.SETRANGE("Replenishment System",ReqLine2."Replenishment System"::Transfer);
        ReqLine2.SETRANGE("Supply From",LocationCode);
        ReqLine2.SETFILTER("Line No.",'<>%1',"Line No.");
        IF ReqLine2.FIND('-') THEN
          REPEAT
            OrderQtyBase += ReqLine2."Quantity (Base)";
          UNTIL ReqLine2.NEXT = 0;
      END;
    END;

    PROCEDURE AvailQtyOnOtherLocations@4(ReqLine@1001 : Record 246) : Decimal;
    VAR
      Location@1002 : Record 14;
      AvailableQtyBase@1000 : Decimal;
      AvailableQtyBaseTotal@1003 : Decimal;
    BEGIN
      IF ReqLine."Location Code" = '' THEN
        EXIT(0);

      AvailableQtyBaseTotal := 0;
      Location.RESET;
      Location.SETRANGE("Use As In-Transit",FALSE);
      IF ReqLine."Location Code" <> '' THEN
        Location.SETFILTER(Code,'<>%1',ReqLine."Location Code")
      ELSE
        Location.SETFILTER(Code,'<>''''');
      IF Location.FIND('-') THEN
        REPEAT
          AvailableQtyBase :=
            CalcATPQty(
              ReqLine."No.",ReqLine."Variant Code",Location.Code,ReqLine."Demand Date");

          IF AvailableQtyBase > 0 THEN
            AvailableQtyBase -= PromisedTransferQty(ReqLine,Location.Code);
          IF AvailableQtyBase > 0 THEN
            AvailableQtyBaseTotal += AvailableQtyBase;
        UNTIL Location.NEXT = 0;

      EXIT(AvailableQtyBaseTotal);
    END;

    BEGIN
    END.
  }
}
