OBJECT Codeunit 7010242 Funciones cuadrante circuito
{
  OBJECT-PROPERTIES
  {
    Date=13/02/15;
    Time=[ 9:35:46];
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355000 : TextConst 'ENU=Unable to assign a booking (%1) with check-out date (%2) previous to circuit date (%3);ESP=No se puede asignar una reserva (%1) con fecha salida (%2) anterior a la fecha del circuito (%3).';
      Text001@1103355001 : TextConst 'ENU=Circuit %1 -%2-%3 of %4 does not have more assigned paxes, delete circuit?;ESP=El circuito %1-%2-%3 de %4 no tiene m s paxes asignados, ¨desea borrar el circuito?';
      Text002@1103355002 : TextConst 'ENU=Circuit parameters card does not exist.;ESP=No existe la ficha de par metros circuito.';
      Text003@1103355003 : TextConst 'ENU=Terms have already been generated;ESP=Los periodos ya han sido generados.';
      Text004@1103355004 : TextConst 'ENU=There are no associated hotels to circuit no. %1 on %2 for TourOperator %3;ESP=No existen hoteles asociados al circuito n§ %1 en la fecha %2 para el tourOperador %3';
      Text005@1103355005 : TextConst 'ENU=room %4 and category %5.;ESP=habitaci¢n %4 y categor¡a %5.';
      Text006@1103355006 : TextConst 'ENU=Booking header for this period does not exist;ESP=No existe la cabecera de reserva para este periodo.';

    PROCEDURE Marcar@1(par_TipoMarca@1103355000 : 'Celda,Cuadrante,Fila,Columna';par_TipoVis@1103355001 : 'Pendiente,Asignado';VAR par_rCuadrante@1103355002 : Record 7010205);
    VAR
      rRes@1103355003 : Record 7010186;
    BEGIN
      // Marcar

      rRes.RESET;
      rRes.SETCURRENTKEY(TourOperador);
      IF par_TipoMarca IN [par_TipoMarca::Celda, par_TipoMarca::Fila] THEN
        rRes.SETRANGE(TourOperador, par_rCuadrante.TourOperador);
      IF par_TipoMarca IN [par_TipoMarca::Celda, par_TipoMarca::Columna] THEN
        rRes.SETFILTER("C¢d. categor¡a", par_rCuadrante.GETFILTER("Filtro c¢d. categor¡a"));
      IF par_rCuadrante.GETFILTER("Filtro tipo habitaci¢n") <> '' THEN
        rRes.SETFILTER("Tipo habitaci¢n", par_rCuadrante.GETFILTER("Filtro tipo habitaci¢n"));
      IF par_rCuadrante.GETFILTER("Filtro fecha entrada") <> '' THEN
        rRes.SETFILTER("Fecha Entrada"  , par_rCuadrante.GETFILTER("Filtro fecha entrada"));
      IF par_TipoVis = par_TipoVis::Pendiente THEN
        rRes.SETRANGE(Circuito, '')
      ELSE
        rRes.SETFILTER(Circuito, '<>%1', '');
      IF rRes.FINDSET THEN
        REPEAT
          IF rRes."Marca Cuadrante" = USERID THEN
            rRes."Marca Cuadrante" := ''
          ELSE IF rRes."Marca Cuadrante" = '' THEN
            rRes."Marca Cuadrante" := USERID;
          rRes.MODIFY;
        UNTIL rRes.NEXT = 0;
    END;

    PROCEDURE Borrar_Marca@5();
    VAR
      rRes@1103355000 : Record 7010186;
    BEGIN
      // Borrar_Marca

      rRes.SETCURRENTKEY("Marca Cuadrante");
      rRes.SETFILTER("Marca Cuadrante", '<>%1', '');
      IF rRes.FINDSET(TRUE) THEN
        rRes.MODIFYALL("Marca Cuadrante", '');
    END;

    PROCEDURE Afegir_Reserva_a_Circuito@2(par_rCir@1103355000 : Record 7010187);
    VAR
      rRes@1103355001 : Record 7010186;
      rRes2@1103355002 : Record 7010186;
      rPaxTOcir@1103355003 : Record 7010188;
      rAco@1103355004 : Record 7009748;
      rAcoCir@1103355005 : Record 7010210;
    BEGIN
      // Afegir_Reserva_a_Circuito

      par_rCir.TESTFIELD(Circuito);
      par_rCir.TESTFIELD(Orden);
      par_rCir.TESTFIELD(Fecha);
      rRes.RESET;
      rRes.SETCURRENTKEY("Marca Cuadrante");
      rRes.SETRANGE("Marca Cuadrante", USERID);
      IF rRes.FIND('-') THEN
        REPEAT
          IF rRes.Circuito = '' THEN BEGIN
            IF rRes."Fecha Salida" < par_rCir.Fecha THEN
              ERROR(Text000,
                    rRes."N§ Reserva", rRes."Fecha Salida", par_rCir.Fecha);
            rPaxTOcir.Crear(par_rCir, rRes.TourOperador, rRes."Tipo habitaci¢n", rRes."C¢d. categor¡a");
            rRes2 := rRes;
            rRes2.Circuito     := par_rCir.Circuito;
            rRes2.Orden        := par_rCir.Orden;
            rRes2."N§ linea"   := rPaxTOcir."N§ Linea";
            rRes2."N§ Interno" := rPaxTOcir."N§ Interno";
            rRes2."Marca Cuadrante" := '';
            rRes2.MODIFY;

            IF NOT par_rCir."Pendiente calcular" THEN BEGIN
              par_rCir."Pendiente calcular" := TRUE;
              par_rCir.MODIFY;
            END;

            IF rRes2."N§ Interno" <> 0 THEN BEGIN
              IF rAcoCir.GET(rRes.Delegacion, rRes."N§ Reserva") THEN BEGIN
                CLEAR(rAco);
                rAco.Gestion_Cuadrante_Circuito(TRUE);
                rAco.TRANSFERFIELDS(rAcoCir);
                rAco."N§ Interno" := rRes2."N§ Interno";
                rAco.Generado := FALSE;
                rAco.INSERT(TRUE);
                rAco.Gestion_Cuadrante_Circuito(FALSE);
                rAcoCir.DELETE;
              END
              ELSE BEGIN
                CLEAR(rAco);
                rAco.Gestion_Cuadrante_Circuito(TRUE);
                rAco.Delegacion     := rRes2.Delegacion;
                rAco."N§ Interno"   := rRes2."N§ Interno";
                rAco.INSERT(TRUE);
                rAco.Nombre         := rRes2.Nombre;
                rAco.Edad           := rRes2.Edad;
                rAco."Tipo Persona" := rRes2."Tipo Persona";
                rAco."Fecha entrada":= rRes2."Fecha Entrada";
                rAco."Fecha salida" := rRes2."Fecha Salida";
                rAco.MODIFY(TRUE);
                rAco.Gestion_Cuadrante_Circuito(FALSE);
              END;
              rRes2."N§ Acompa¤ante" := rAco."N§ Acompa¤ante";
              rRes2.Bono             := rAco.Bono;
              rRes2.MODIFY;
            END;
          END;
        UNTIL rRes.NEXT = 0;
    END;

    PROCEDURE Borrar_Reserva_de_Circuito@3(par_rCir@1103355000 : Record 7010187);
    VAR
      rRes@1103355001 : Record 7010186;
      rRes2@1103355002 : Record 7010186;
      rPaxTOcir@1103355003 : Record 7010188;
      rCir@1103355004 : Record 7010187;
      rAco@1103355005 : Record 7009748;
      rAcoCir@1103355006 : Record 7010210;
    BEGIN
      // Borrar_Reserva_de_Circuito
      //
      par_rCir.TESTFIELD(Circuito);
      par_rCir.TESTFIELD(Orden);

      rRes.RESET;
      rRes.SETCURRENTKEY("Marca Cuadrante");
      rRes.SETRANGE("Marca Cuadrante", USERID);
      IF rRes.FIND('-') THEN
        REPEAT
          IF (rRes.Circuito = par_rCir.Circuito) AND
             (rRes.Orden    = par_rCir.Orden) AND (rRes."N§ Acompa¤ante" <> 1) THEN BEGIN
            rRes2 := rRes;
            rRes2.Circuito          := '';
            rRes2.Orden             := 0;
            rRes2."N§ linea"        := 0;
            rRes2."N§ Interno"      := 0;
            rRes2."N§ Acompa¤ante"  := 0;
            rRes2."Marca Cuadrante" := '';
            rRes2.MODIFY;

            IF NOT par_rCir."Pendiente calcular" THEN BEGIN
              par_rCir."Pendiente calcular" := TRUE;
              par_rCir.MODIFY;
            END;

            // Tenemos que guardar los datos del acompa¤ante para cuando se asigne a otro circuito
            // y a otra reserva
            //
            IF rAco.GET(rRes.Delegacion, rRes."N§ Interno", rRes."N§ Acompa¤ante") THEN BEGIN
              rAcoCir.TRANSFERFIELDS(rAco);
              rAcoCir."N§ Reserva" := rRes."N§ Reserva";
              IF NOT rAcoCir.INSERT THEN
                rAcoCir.MODIFY;
              rAco.Gestion_Cuadrante_Circuito(TRUE);
              rAco.DELETE(TRUE);
              rAco.Gestion_Cuadrante_Circuito(FALSE);
            END;
            // Si el "Pax TO-circuito" no tiene mas paxes asociados, lo borramos
            //
            IF rPaxTOcir.GET(rRes.Delegacion, rRes.Circuito, rRes.Orden, rRes."N§ linea") THEN BEGIN
              rPaxTOcir.CALCFIELDS(Paxes);
              IF rPaxTOcir.Paxes = 0 THEN
                rPaxTOcir.DELETE(TRUE);
            END;
            // Si el circuito no tiene m s paxes asociados, pedimos confirmaci¢n para su borrado
            //
            par_rCir.CALCFIELDS(Paxes);
            IF par_rCir.Paxes = 0 THEN
              IF CONFIRM(Text001, TRUE,
                         par_rCir.Delegacion,
                         par_rCir.Circuito,
                         par_rCir.Orden,
                         par_rCir.Fecha) THEN
                par_rCir.DELETE(TRUE);
          END;
        UNTIL rRes.NEXT = 0;

      IF rRes.FIND('-') THEN
        REPEAT
          IF (rRes.Circuito = par_rCir.Circuito) AND
             (rRes.Orden    = par_rCir.Orden) AND (rRes."N§ Acompa¤ante" = 1) THEN BEGIN
            rRes2 := rRes;
            rRes2.Circuito          := '';
            rRes2.Orden             := 0;
            rRes2."N§ linea"        := 0;
            rRes2."N§ Interno"      := 0;
            rRes2."N§ Acompa¤ante"  := 0;
            rRes2."Marca Cuadrante" := '';
            rRes2.MODIFY;
            // Si el "Pax TO-circuito" no tiene mas paxes asociados, lo borramos
            //
            IF rPaxTOcir.GET(rRes.Delegacion, rRes.Circuito, rRes.Orden, rRes."N§ linea") THEN BEGIN
              rPaxTOcir.CALCFIELDS(Paxes);
              IF rPaxTOcir.Paxes = 0 THEN
                rPaxTOcir.DELETE(TRUE);
            END;
            // Tenemos que guardar los datos del acompa¤ante para cuando se asigne a otro circuito
            // y a otra reserva
            //
            IF rAco.GET(rRes.Delegacion, rRes."N§ Interno", rRes."N§ Acompa¤ante") THEN BEGIN
              rAcoCir.TRANSFERFIELDS(rAco);
              rAcoCir."N§ Reserva" := rRes."N§ Reserva";
              IF NOT rAcoCir.INSERT THEN
                rAcoCir.MODIFY;
              rAco.Gestion_Cuadrante_Circuito(TRUE);
              rAco.DELETE(TRUE);
              rAco.Gestion_Cuadrante_Circuito(FALSE);
            END;
            // Si el circuito no tiene m s paxes asociados, pedimos confirmaci¢n para su borrado
            //
            par_rCir.CALCFIELDS(Paxes);
            IF par_rCir.Paxes = 0 THEN
              IF CONFIRM(Text001, TRUE,
                         par_rCir.Delegacion,
                         par_rCir.Circuito,
                         par_rCir.Orden,
                         par_rCir.Fecha) THEN
                par_rCir.DELETE(TRUE);
          END;
        UNTIL rRes.NEXT = 0;
    END;

    PROCEDURE Generar_Cabecera@4(VAR rCir@1103355000 : Record 7010187) : Integer;
    VAR
      rPaxTOcir@1103355001 : Record 7010188;
      rPaxTOcir2@1103355002 : Record 7010188;
      rResCir@1103355003 : Record 7010186;
      rCab@1103355004 : Record 7009741;
      rPer@1103355005 : Record 7009742;
      rAco@1103355006 : Record 7009748;
      rHotCir@1103355007 : Record 7010189;
      rParPer@1103355008 : Record 7009701;
      nCab@1103355009 : Integer;
    BEGIN
      // Generar_Cabecera

      rCir.CALCFIELDS("Pendiente generar");
      IF NOT rCir."Pendiente generar" THEN
        EXIT(0);

      nCab := 0;

      rPaxTOcir.RESET;
      rPaxTOcir.SETRANGE(Delegacion  , rCir.Delegacion);
      rPaxTOcir.SETRANGE(Circuito    , rCir.Circuito);
      rPaxTOcir.SETRANGE(Orden       , rCir.Orden);
      rPaxTOcir.SETRANGE("N§ Interno", 0);
      IF rPaxTOcir.FINDFIRST THEN
        REPEAT
          rResCir.RESET;
          rResCir.SETCURRENTKEY(Delegacion, Circuito, Orden, "N§ linea");
          rResCir.SETRANGE(Delegacion  , rCir.Delegacion);
          rResCir.SETRANGE(Circuito    , rCir.Circuito);
          rResCir.SETRANGE(Orden       , rCir.Orden);
          rResCir.SETRANGE("N§ linea"  , rPaxTOcir."N§ Linea");
          IF rResCir.FINDFIRST THEN
          BEGIN
            rResCir.TESTFIELD("C¢d. categor¡a");
            rResCir.TESTFIELD("Tipo habitaci¢n");
            rResCir.TESTFIELD(Circuito);

            nCab := nCab + 1;
            CLEAR(rCab);
            rCab.VALIDATE(TourOperador, rPaxTOcir.TourOperador); //+$001
            rCab.Gestion_Cuadrante_Circuito(TRUE);
            rCab.INSERT(TRUE);
            rCab.VALIDATE("TourOperador Venta", rPaxTOcir.TourOperador);
            rCab.VALIDATE(Nombre              , rResCir.Nombre);
            rCab.VALIDATE(Edad                , rResCir.Edad);
            rCab.VALIDATE("Tipo Persona"      , rResCir."Tipo Persona");
            rCab.Circuito                    := rResCir.Circuito;
            rCab."Categoria Circuito"        := rResCir."C¢d. categor¡a";
            rCab."Habitacion Circuito"       := rResCir."Tipo habitaci¢n";
            rCab."Contrato Venta Circuito"   := rPaxTOcir.Tarifa;
            rCab."Fecha Inicio Circuito"     := rPaxTOcir.Fecha;
            rCab.MODIFY(TRUE);
            rCab.Gestion_Cuadrante_Circuito(FALSE);

            rResCir."N§ Acompa¤ante" := 1;
            rResCir."N§ Interno"     := rCab."N§ Interno";
            rResCir.MODIFY;

            rAco.Gestion_Cuadrante_Circuito(TRUE);
            rAco.GET(rCab.Delegacion, rCab."N§ Interno", 1);
            rAco."Fecha entrada"  := rResCir."Fecha Entrada";
            rAco."Fecha salida"   := rResCir."Fecha Salida";
            rAco.MODIFY(TRUE);

            rParPer.FINDFIRST;

            IF rResCir.NEXT <> 0 THEN
            REPEAT
              rResCir.TESTFIELD("C¢d. categor¡a");
              rResCir.TESTFIELD("Tipo habitaci¢n");
              rResCir.TESTFIELD(Circuito);

              CLEAR(rAco);
              rAco.Gestion_Cuadrante_Circuito(TRUE);
              rAco.Delegacion     := rCab.Delegacion;
              rAco."N§ Interno"   := rCab."N§ Interno";
              rAco.Nombre         := rResCir.Nombre;
              rAco.Edad           := rResCir.Edad;
              rAco."Tipo Persona" := rResCir."Tipo Persona";
              rAco."Fecha entrada":= rResCir."Fecha Entrada";
              rAco."Fecha salida" := rResCir."Fecha Salida";
              rAco.INSERT(TRUE);
              rAco.Gestion_Cuadrante_Circuito(FALSE);

              CASE rAco."Tipo Persona" OF
                rParPer."Codigo Adulto": rCab.Adultos := rCab.Adultos + 1;
                rParPer."Codigo Ni¤o"  : rCab.Ni¤os   := rCab.Ni¤os + 1;
                rParPer."Codigo Infant": rCab.Infants := rCab.Infants + 1;
              END;

              rResCir."N§ Acompa¤ante" := rAco."N§ Acompa¤ante";
              rResCir."N§ Interno"     := rCab."N§ Interno";
              rResCir.MODIFY;
            UNTIL rResCir.NEXT = 0;

            rCab.MODIFY;

            CLEAR(rHotCir);
            rHotCir.SETRANGE(Delegacion, rPaxTOcir.Delegacion);
            rHotCir.SETRANGE(Circuito  , rPaxTOcir.Circuito);
            rHotCir.SETRANGE(Orden     , rPaxTOcir.Orden);
            rHotCir.SETRANGE("N§ linea", rPaxTOcir."N§ Linea");
            IF rHotCir.FIND('-') THEN
              rHotCir.MODIFYALL("N§ interno", rCab."N§ Interno");

            Generar_Periodos_Circuito(rCab);

            rPaxTOcir2 := rPaxTOcir;
            rPaxTOcir2."N§ Interno" := rCab."N§ Interno";
            rPaxTOcir2.MODIFY;
          END;
        UNTIL rPaxTOcir.NEXT = 0;

      EXIT(nCab);
    END;

    PROCEDURE Generar_Periodos_Circuito@38(VAR par_Cab@1103355000 : Record 7009741);
    VAR
      rHotCir@1103355001 : Record 7010189;
      rHotCir2@1103355002 : Record 7010189;
      rParCir@1103355003 : Record 7010185;
      nPer@1103355004 : Integer;
      primerPer@1103355005 : Boolean;
      nHab@1103355006 : Integer;
      rCab2@1103355007 : Record 7009741;
      rPer@1103355008 : Record 7009742;
    BEGIN
      // Generar_Periodos_Circuito

      rParCir.RESET;
      IF NOT rParCir.FINDFIRST THEN
        ERROR(Text002);

      rParCir.TESTFIELD("Paquete Hotel");
      rParCir.TESTFIELD("Paquete Hotel+Transfer");

      rParCir.TESTFIELD("C¢d. Media Pensi¢n");
      rParCir.TESTFIELD("C¢d. Pensi¢n Completa");

      rPer.RESET;
      rPer.SETRANGE(Delegacion  , par_Cab.Delegacion);
      rPer.SETRANGE("N§ Interno", par_Cab."N§ Interno");
      IF rPer.FINDFIRST THEN
        ERROR(Text003);

      rPer.RESET;

      nPer := 0;
      primerPer := TRUE;
      rHotCir.RESET;
      rHotCir.SETRANGE(Delegacion      , par_Cab.Delegacion);
      rHotCir.SETRANGE("N§ interno"    , par_Cab."N§ Interno");
      IF NOT rHotCir.FINDSET THEN
        ERROR(Text004 +
              Text005,
              par_Cab.Circuito, par_Cab."Fecha Inicio Circuito", par_Cab."TourOperador Venta",
              par_Cab."Habitacion Circuito", par_Cab."Categoria Circuito");

      rHotCir2.COPY(rHotCir);
      rHotCir2.FINDLAST;
      REPEAT
        CLEAR(rPer);
        rPer.Gestion_Cuadrante_Circuito(TRUE);
        rPer.Delegacion                := par_Cab.Delegacion;
        rPer."N§ Interno"              := par_Cab."N§ Interno";
        nPer := nPer + 10000;
        rPer."N§ Periodo"              := nPer;
        rPer.INSERT(TRUE);

        IF primerPer THEN
        BEGIN
          rPer.VALIDATE(Paquete        , rParCir."Paquete Hotel+Transfer");
          primerPer := FALSE;
        END
        ELSE
        BEGIN
          // si es el ultimo periodo...
          IF rHotCir2.Periodo = rHotCir.Periodo THEN
            rPer.VALIDATE(Paquete        , rParCir."Paquete Hotel+Transfer")
          ELSE
            rPer.VALIDATE(Paquete          , rParCir."Paquete Hotel");
        END;

        rPer.VALIDATE("Hotel reservado", rHotCir.Hotel);
        rPer.VALIDATE("Fecha entrada"  , rHotCir."Fecha Entrada");
        rPer.VALIDATE("Fecha salida"   , rHotCir."Fecha Salida");
        rPer.VALIDATE(Habitacion       , par_Cab."Habitacion Circuito");
        rPer.VALIDATE("N§ Habitaciones", Num_Habitaciones(rPer, par_Cab));

        rPer.VALIDATE(Regimen          , rHotCir.Regimen);

        // AJF 02/12/08
        // Marco el periodo para indicar que pertenece al circuito.
        rPer.Circuito := TRUE;

        rPer.MODIFY(TRUE);

        rPer.Gestion_Cuadrante_Circuito(FALSE);

        rHotCir."N§ interno" := par_Cab."N§ Interno";
        rHotCir.MODIFY;
      UNTIL rHotCir.NEXT = 0;
    END;

    PROCEDURE Num_Habitaciones@40(VAR par_Per@1103355000 : Record 7009742;par_Cab@1103355001 : Record 7009741) : Integer;
    VAR
      rParPer@1103355002 : Record 7009701;
      rAco@1103355003 : Record 7009748;
      rHab@1103355004 : Record 7009731;
      paxes@1103355005 : Integer;
    BEGIN
      IF par_Per.Habitacion = '' THEN
        EXIT(1);

      IF par_Per."Contrato compra" = '' THEN
        par_Per.buscar_contrato('', '');
      IF par_Cab."N§ Interno" = 0 THEN
        IF NOT par_Cab.GET(par_Per.Delegacion, par_Per."N§ Interno") THEN
          ERROR(Text006);

      rParPer.FINDFIRST;

      paxes := 0;

      rAco.RESET;
      rAco.SETRANGE (Delegacion    , par_Per.Delegacion);
      rAco.SETRANGE ("N§ Interno"  , par_Per."N§ Interno");
      rAco.SETFILTER("Tipo Persona", '<>%1', rParPer."Codigo Infant");
      IF rAco.FINDFIRST THEN
        paxes := rAco.COUNT;
      rAco.RESET;

      // Buscar n§ habitaciones de uso en funcion de paxes y tipo habitaci¢n

      rHab.RESET;
      rHab.SETRANGE (Delegacion, par_Per.Delegacion);
      IF par_Per."Contrato venta" <> '' THEN
      BEGIN
        rHab.SETRANGE("N§ Contrato"  , par_Per."Contrato venta");
        rHab.SETRANGE("Tipo contrato", rHab."Tipo contrato"::Venta);
      END
      ELSE
      BEGIN
        rHab.SETRANGE("N§ Contrato"  , par_Per."Contrato compra");
        rHab.SETRANGE("Tipo contrato", rHab."Tipo contrato"::Compra);
      END;

      rHab.SETRANGE("Habitacion cupo", par_Per.Habitacion);
      IF rHab.FINDFIRST THEN
        EXIT(ROUND(paxes / rHab."Ocupacion Maxima", 1))
      ELSE
        EXIT(1);
    END;

    BEGIN
    {
      $001 AJS 13022015 Rellenar el touroperador de compra con el touroperador de la reserva de circuitos
    }
    END.
  }
}
