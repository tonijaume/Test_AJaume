OBJECT Codeunit 5845 Get Inventory Report
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    TableNo=5846;
    OnRun=BEGIN
            WindowUpdateTime := TIME;
            WindowIsOpen := FALSE;

            RESET;
            DELETEALL;
            Calculate(Rec);

            IF WindowIsOpen THEN
              Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      InvtReportHeader@1000 : Record 5845;
      Item@1002 : Record 27;
      GLAcc@1001 : Record 15;
      ValueEntry@1003 : Record 5802;
      Text000@1009 : TextConst 'ENU=Calculating...\;ESP=Calculando...\';
      Text001@1008 : TextConst 'ENU=Type         #1######\;ESP=Tipo         #1######\';
      Text002@1007 : TextConst 'ENU=No.          #2######\;ESP=N§           #2######\';
      Text003@1006 : TextConst 'ENU=Posting Type #3######;ESP=Tipo reg.    #3######';
      Window@1004 : Dialog;
      WindowIsOpen@1005 : Boolean;
      WindowType@1010 : Text[80];
      WindowNo@1011 : Text[20];
      WindowPostingType@1012 : Text[80];
      WindowUpdateTime@1013 : Time;
      Text004@1014 : TextConst 'ENU=Show &Direct Costs,Show &Revaluations,Show R&oundings;ESP=Mostrar &costes directos,Mostrar &revalorizaciones,Mostrar r&edondeos';
      Text005@1015 : TextConst 'ENU=Show WIP &Consumption,Show WIP Ca&pacity,Show WIP &Output;ESP=Mostrar &consumo WIP,Mostrar ca&pacidad WIP,Mostrar &salida WIP';

    PROCEDURE Calculate@4(VAR InventoryReportLine@1000 : Record 5846);
    BEGIN
      CalcGLPostings(InventoryReportLine);
      CalcInvtPostings(InventoryReportLine);
      InsertDiffReportEntry(InventoryReportLine);

      IF InvtReportHeader."Show Warning" THEN
        DetermineDiffError(InventoryReportLine);
    END;

    PROCEDURE CalcGLPostings@30(VAR InventoryReportLine@1000 : Record 5846);
    BEGIN
      CalcGenPostingSetup(InventoryReportLine);
      CalcInvtPostingSetup(InventoryReportLine);
    END;

    PROCEDURE CalcInvtPostings@33(VAR InventoryReportLine@1000 : Record 5846);
    BEGIN
      WITH ValueEntry DO BEGIN
        RESET;
        CLEAR(InventoryReportLine);
        SETCURRENTKEY(
          "Item No.","Posting Date","Item Ledger Entry Type","Entry Type","Variance Type",
          "Item Charge No.","Location Code","Variant Code");
        SETFILTER("Item No.",InvtReportHeader.GETFILTER("Item Filter"));
        IF FIND('-') THEN
          REPEAT
            UpDateWindow(Item.TABLECAPTION,"Item No.",'');
            SETRANGE("Item No.","Item No.");
            IF NOT Item.GET("Item No.") THEN
              CLEAR(Item);
            InsertItemInvtReportEntry(InventoryReportLine);

            SETFILTER("Item No.",InvtReportHeader.GETFILTER("Item Filter"));
          UNTIL NEXT = 0;
      END
    END;

    PROCEDURE InsertDiffReportEntry@62(VAR InventoryReportLine@1000 : Record 5846) : Boolean;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        INIT;
        CalcDiff(InventoryReportLine);
        Type := Type::" ";
        "No." := '';
        Description := '';
        "Entry No." := "Entry No." + 1;
        INSERT;
      END;
    END;

    PROCEDURE DetermineDiffError@63(VAR InventoryReportLine@1000 : Record 5846);
    BEGIN
      InventoryReportLine.SETRANGE(Type,InventoryReportLine.Type::" ");
      IF NOT InventoryReportLine.FIND('-') THEN
        EXIT;

      CheckExpectedCostPosting(InventoryReportLine);
      CASE TRUE OF
        CheckIfNoDifference(InventoryReportLine):;
        CheckCostIsPostedToGL(InventoryReportLine):;
        CheckValueGLCompression(InventoryReportLine):;
        CheckGLClosingOverlaps(InventoryReportLine):;
        CheckDeletedGLAcc(InventoryReportLine):;
        CheckPostingDateToGLNotTheSame(InventoryReportLine):;
        CheckDirectPostings(InventoryReportLine):;
      END;
    END;

    PROCEDURE CalcInvtPostingSetup@22(VAR InventoryReportLine@1002 : Record 5846);
    VAR
      InvtPostingSetup@1001 : Record 5813;
      TempInvtPostingSetup@1000 : TEMPORARY Record 5813;
    BEGIN
      WITH InvtPostingSetup DO BEGIN
        IF FIND('-') THEN
          REPEAT
            TempInvtPostingSetup.RESET;
            TempInvtPostingSetup.SETRANGE("Inventory Account","Inventory Account");
            IF NOT TempInvtPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Inventory Account"));
              InsertGLInvtReportEntry(InventoryReportLine,"Inventory Account",InventoryReportLine.Inventory);
            END;

            TempInvtPostingSetup.RESET;
            TempInvtPostingSetup.SETRANGE("Inventory Account (Interim)","Inventory Account (Interim)");
            IF NOT TempInvtPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Inventory Account (Interim)"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Inventory Account (Interim)",InventoryReportLine."Inventory (Interim)");
            END;

            TempInvtPostingSetup.RESET;
            TempInvtPostingSetup.SETRANGE("Material Variance Account","Material Variance Account");
            IF NOT TempInvtPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Material Variance Account"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Material Variance Account",InventoryReportLine."Material Variance");
            END;

            TempInvtPostingSetup.RESET;
            TempInvtPostingSetup.SETRANGE("Capacity Variance Account","Capacity Variance Account");
            IF NOT TempInvtPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Capacity Variance Account"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Capacity Variance Account",InventoryReportLine."Capacity Variance");
            END;

            TempInvtPostingSetup.RESET;
            TempInvtPostingSetup.SETRANGE("Mfg. Overhead Variance Account","Mfg. Overhead Variance Account");
            IF NOT TempInvtPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Mfg. Overhead Variance Account"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Mfg. Overhead Variance Account",InventoryReportLine."Mfg. Overhead Variance");
            END;

            TempInvtPostingSetup.RESET;
            TempInvtPostingSetup.SETRANGE("Cap. Overhead Variance Account","Cap. Overhead Variance Account");
            IF NOT TempInvtPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Cap. Overhead Variance Account"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Cap. Overhead Variance Account",InventoryReportLine."Capacity Overhead Variance");
            END;

            TempInvtPostingSetup.RESET;
            TempInvtPostingSetup.SETRANGE("Subcontracted Variance Account","Subcontracted Variance Account");
            IF NOT TempInvtPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Subcontracted Variance Account"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Subcontracted Variance Account",InventoryReportLine."Subcontracted Variance");
            END;

            TempInvtPostingSetup.RESET;
            TempInvtPostingSetup.SETRANGE("WIP Account","WIP Account");
            IF NOT TempInvtPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("WIP Account"));
              InsertGLInvtReportEntry(InventoryReportLine,"WIP Account",InventoryReportLine."WIP Inventory");
            END;

            TempInvtPostingSetup := InvtPostingSetup;
            TempInvtPostingSetup.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcGenPostingSetup@23(VAR InventoryReportLine@1002 : Record 5846);
    VAR
      GenPostingSetup@1001 : Record 252;
      TempGenPostingSetup@1000 : TEMPORARY Record 252;
    BEGIN
      WITH GenPostingSetup DO BEGIN
        IF FIND('-') THEN
          REPEAT
            TempGenPostingSetup.RESET;
            TempGenPostingSetup.SETRANGE("COGS Account","COGS Account");
            IF NOT TempGenPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("COGS Account"));
              InsertGLInvtReportEntry(InventoryReportLine,"COGS Account",InventoryReportLine.COGS);
            END;

            TempGenPostingSetup.RESET;
            TempGenPostingSetup.SETRANGE("Inventory Adjmt. Account","Inventory Adjmt. Account");
            IF NOT TempGenPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Inventory Adjmt. Account"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Inventory Adjmt. Account",InventoryReportLine."Inventory Adjmt.");
            END;

            TempGenPostingSetup.RESET;
            TempGenPostingSetup.SETRANGE("Invt. Accrual Acc. (Interim)","Invt. Accrual Acc. (Interim)");
            IF NOT TempGenPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Invt. Accrual Acc. (Interim)"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Invt. Accrual Acc. (Interim)",InventoryReportLine."Invt. Accrual (Interim)");
            END;

            TempGenPostingSetup.RESET;
            TempGenPostingSetup.SETRANGE("COGS Account (Interim)","COGS Account (Interim)");
            IF NOT TempGenPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("COGS Account (Interim)"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"COGS Account (Interim)",InventoryReportLine."COGS (Interim)");
            END;

            TempGenPostingSetup.RESET;
            TempGenPostingSetup.SETRANGE("Direct Cost Applied Account","Direct Cost Applied Account");
            IF NOT TempGenPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Direct Cost Applied Account"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Direct Cost Applied Account",InventoryReportLine."Direct Cost Applied");
            END;

            TempGenPostingSetup.RESET;
            TempGenPostingSetup.SETRANGE("Overhead Applied Account","Overhead Applied Account");
            IF NOT TempGenPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Overhead Applied Account"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Overhead Applied Account",InventoryReportLine."Overhead Applied");
            END;

            TempGenPostingSetup.RESET;
            TempGenPostingSetup.SETRANGE("Purchase Variance Account","Purchase Variance Account");
            IF NOT TempGenPostingSetup.FIND('-') THEN BEGIN
              UpDateWindow(WindowType,WindowNo,FIELDCAPTION("Purchase Variance Account"));
              InsertGLInvtReportEntry(
                InventoryReportLine,"Purchase Variance Account",InventoryReportLine."Purchase Variance");
            END;

            TempGenPostingSetup := GenPostingSetup;
            TempGenPostingSetup.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE InsertGLInvtReportEntry@58(VAR InventoryReportLine@1000 : Record 5846;GLAccNo@1001 : Code[20];VAR CostAmount@1002 : Decimal) : Boolean;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        INIT;
        IF NOT GLAcc.GET(GLAccNo) THEN
          EXIT;
        GLAcc.SETFILTER("Date Filter",InvtReportHeader.GETFILTER("Posting Date Filter"));
        CostAmount := CalcGLAccount(GLAcc);

        IF CostAmount = 0 THEN
          EXIT;
        Type := Type::"G/L Account";
        "No." := GLAcc."No.";
        Description := GLAcc.Name;
        "Entry No." := "Entry No." + 1;
        INSERT;
      END;
    END;

    PROCEDURE InsertItemInvtReportEntry@57(VAR InventoryReportLine@1000 : Record 5846) : Boolean;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        INIT;
        CalcItem(InventoryReportLine);
        "No." := ValueEntry."Item No.";
        Description := Item.Description;
        Type := Type::Item;
        "Entry No." := "Entry No." + 1;
        INSERT;
      END;
    END;

    PROCEDURE CalcItem@2(VAR InventoryReportLine@1001 : Record 5846);
    BEGIN
      WITH ValueEntry DO
        REPEAT
          SETRANGE("Posting Date","Posting Date");
          REPEAT
            IF ValueEntryInFilteredSet(ValueEntry,InvtReportHeader,FALSE) THEN BEGIN
              IF Item."No." <> "Item No." THEN
                IF NOT Item.GET("Item No.") THEN
                  Item.INIT;
              SETRANGE("Entry Type","Entry Type");
              SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type");
              SETRANGE("Location Code","Location Code");
              SETRANGE("Variance Type","Variance Type");
              SETRANGE("Item Charge No.","Item Charge No.");

              IF ValueEntryInFilteredSet(ValueEntry,InvtReportHeader,TRUE) THEN
                CalcValueEntries(InventoryReportLine);

              FIND('+');
              SETRANGE("Entry Type");
              SETRANGE("Item Ledger Entry Type");
              SETRANGE("Location Code");
              SETRANGE("Variance Type");
              SETRANGE("Item Charge No.");
            END ELSE
              FIND('+');
          UNTIL NEXT = 0;

          FIND('+');
          SETFILTER("Posting Date",InvtReportHeader.GETFILTER("Posting Date Filter"));
        UNTIL NEXT = 0;
    END;

    PROCEDURE ValueEntryInFilteredSet@21(VAR ValueEntry@1000 : Record 5802;VAR InvtReportHeader@1001 : Record 5845;Detailed@1003 : Boolean) : Boolean;
    VAR
      TempValueEntry@1002 : TEMPORARY Record 5802;
    BEGIN
      WITH TempValueEntry DO BEGIN
        SETFILTER("Item No.",InvtReportHeader.GETFILTER("Item Filter"));
        SETFILTER("Posting Date",InvtReportHeader.GETFILTER("Posting Date Filter"));
        IF Detailed THEN
          SETFILTER("Location Code",InvtReportHeader.GETFILTER("Location Filter"));

        TempValueEntry := ValueEntry;
        INSERT;
        EXIT(FIND('-'));
      END;
    END;

    PROCEDURE CalcValueEntries@10(VAR InventoryReportLine@1002 : Record 5846);
    BEGIN
      WITH InventoryReportLine DO BEGIN
        UpDateWindow(WindowType,WindowNo,FORMAT(ValueEntry."Entry Type"));
        "Direct Cost Applied Actual" := "Direct Cost Applied Actual" + CalcDirectCostAppliedActual(ValueEntry);
        "Overhead Applied Actual" := "Overhead Applied Actual" + CalcOverheadAppliedActual(ValueEntry);
        "Purchase Variance" := "Purchase Variance" + CalcPurchaseVariance(ValueEntry);
        "Inventory Adjmt." := "Inventory Adjmt." + CalcInventoryAdjmt(ValueEntry);
        "Invt. Accrual (Interim)" := "Invt. Accrual (Interim)" + CalcInvtAccrualInterim(ValueEntry);
        COGS := COGS + CalcCOGS(ValueEntry);
        "COGS (Interim)" := "COGS (Interim)" + CalcCOGSInterim(ValueEntry);
        "WIP Inventory" := "WIP Inventory" + CalcWIPInventory(ValueEntry);
        "Material Variance" := "Material Variance" + CalcMaterialVariance(ValueEntry);
        "Capacity Variance" := "Capacity Variance" + CalcCapVariance(ValueEntry);
        "Subcontracted Variance" := "Subcontracted Variance" + CalcSubcontractedVariance(ValueEntry);
        "Capacity Overhead Variance" := "Capacity Overhead Variance" + CalcCapOverheadVariance(ValueEntry);
        "Mfg. Overhead Variance" := "Mfg. Overhead Variance" + CalcMfgOverheadVariance(ValueEntry);
        "Inventory (Interim)" := "Inventory (Interim)" + CalcInventoryInterim(ValueEntry);
        "Direct Cost Applied WIP" := "Direct Cost Applied WIP" + CalcDirectCostAppliedToWIP(ValueEntry);
        "Overhead Applied WIP" := "Overhead Applied WIP" + CalcOverheadAppliedToWIP(ValueEntry);
        "Inventory To WIP" := "Inventory To WIP" + CalcInvtToWIP(ValueEntry);
        "WIP To Interim" := "WIP To Interim" + CalcWIPToInvtInterim(ValueEntry);
        Inventory := Inventory + CalcInventory(ValueEntry);
        "Direct Cost Applied" := "Direct Cost Applied" + CalcDirectCostApplied(ValueEntry);
        "Overhead Applied" := "Overhead Applied" + CalcOverheadApplied(ValueEntry);
      END;
    END;

    PROCEDURE CalcGLAccount@28(VAR GLAcc@1000 : Record 15) : Decimal;
    BEGIN
      WITH GLAcc DO BEGIN
        UpDateWindow(TABLECAPTION,"No.",WindowPostingType);
        CALCFIELDS("Net Change");
        EXIT("Net Change");
      END;
    END;

    PROCEDURE CalcDiff@60(VAR InventoryReportLine@1000 : Record 5846);
    VAR
      CalcInventoryReportLine@1001 : Record 5846;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        CalcInventoryReportLine.COPY(InventoryReportLine);
        RESET;

        SETRANGE(Type,Type::"G/L Account");
        CALCSUMS(
          Inventory,"Inventory (Interim)","WIP Inventory",
          "Direct Cost Applied Actual","Overhead Applied Actual","Purchase Variance",
          "Inventory Adjmt.","Invt. Accrual (Interim)",COGS,
          "COGS (Interim)","Material Variance");
        CALCSUMS(
          "Capacity Variance","Subcontracted Variance","Capacity Overhead Variance",
          "Mfg. Overhead Variance","Direct Cost Applied WIP","Overhead Applied WIP",
          "Inventory To WIP","WIP To Interim","Direct Cost Applied","Overhead Applied");
        CalcInventoryReportLine := InventoryReportLine;

        SETRANGE(Type,Type::Item);
        CALCSUMS(
          Inventory,"Inventory (Interim)","WIP Inventory",
          "Direct Cost Applied Actual","Overhead Applied Actual","Purchase Variance",
          "Inventory Adjmt.","Invt. Accrual (Interim)",COGS,
          "COGS (Interim)","Material Variance");
        CALCSUMS(
          "Capacity Variance","Subcontracted Variance","Capacity Overhead Variance",
          "Mfg. Overhead Variance","Direct Cost Applied WIP","Overhead Applied WIP",
          "Inventory To WIP","WIP To Interim","Direct Cost Applied","Overhead Applied");
      END;

      WITH CalcInventoryReportLine DO BEGIN
        Inventory := Inventory - InventoryReportLine.Inventory;
        "Inventory (Interim)" := "Inventory (Interim)" - InventoryReportLine."Inventory (Interim)";
        "WIP Inventory" := "WIP Inventory" - InventoryReportLine."WIP Inventory";
        "Direct Cost Applied Actual" := "Direct Cost Applied Actual" - InventoryReportLine."Direct Cost Applied Actual";
        "Overhead Applied Actual" := "Overhead Applied Actual" - InventoryReportLine."Overhead Applied Actual";
        "Purchase Variance" := "Purchase Variance" - InventoryReportLine."Purchase Variance";
        "Inventory Adjmt." := "Inventory Adjmt." - InventoryReportLine."Inventory Adjmt.";
        "Invt. Accrual (Interim)" := "Invt. Accrual (Interim)" - InventoryReportLine."Invt. Accrual (Interim)";
        COGS := COGS - InventoryReportLine.COGS;
        "COGS (Interim)" := "COGS (Interim)" - InventoryReportLine."COGS (Interim)";
        "Material Variance" := "Material Variance" - InventoryReportLine."Material Variance";
        "Capacity Variance" := "Capacity Variance" - InventoryReportLine."Capacity Variance";
        "Subcontracted Variance" := "Subcontracted Variance" - InventoryReportLine."Subcontracted Variance";
        "Capacity Overhead Variance" := "Capacity Overhead Variance" - InventoryReportLine."Capacity Overhead Variance";
        "Mfg. Overhead Variance" := "Mfg. Overhead Variance" - InventoryReportLine."Mfg. Overhead Variance";
        "Direct Cost Applied WIP" := "Direct Cost Applied WIP" - InventoryReportLine."Direct Cost Applied WIP";
        "Overhead Applied WIP" := "Overhead Applied WIP" - InventoryReportLine."Overhead Applied WIP";
        "Inventory To WIP" := "Inventory To WIP" - InventoryReportLine."Inventory To WIP";
        "WIP To Interim" := "WIP To Interim" - InventoryReportLine."WIP To Interim";
        "Direct Cost Applied" := "Direct Cost Applied" - InventoryReportLine."Direct Cost Applied";
        "Overhead Applied" := "Overhead Applied" - InventoryReportLine."Overhead Applied";
        InventoryReportLine.COPY(CalcInventoryReportLine);
      END;
    END;

    PROCEDURE DrillDownGL@55(VAR InvtReportLine@1000 : Record 5846);
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("G/L Account No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        FORM.RUN(0,GLEntry,Amount);
      END;
    END;

    PROCEDURE CalcDirectCostAppliedActual@1(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::"Direct Cost") AND
           ("Item Ledger Entry Type" IN
            ["Item Ledger Entry Type"::Purchase])
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcOverheadAppliedActual@3(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::"Indirect Cost") AND
           ("Item Ledger Entry Type" IN
            ["Item Ledger Entry Type"::Output,
             "Item Ledger Entry Type"::Purchase])
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcPurchaseVariance@5(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::Variance) AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Purchase)
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcInventoryAdjmt@6(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO
        CASE "Entry Type" OF
          "Entry Type"::Rounding,"Entry Type"::Revaluation:
            BEGIN

              CALCSUMS("Cost Amount (Actual)");
              EXIT(-"Cost Amount (Actual)");
            END;
          "Entry Type"::"Direct Cost":
            IF "Item Ledger Entry Type" IN
               ["Item Ledger Entry Type"::"Positive Adjmt.",
                "Item Ledger Entry Type"::"Negative Adjmt.",
                "Item Ledger Entry Type"::Transfer]
            THEN BEGIN
              CALCSUMS("Cost Amount (Actual)");
              EXIT(-"Cost Amount (Actual)");
            END;
        END;
      EXIT(0);
    END;

    PROCEDURE CalcInvtAdjmtAccrualInterim@7(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::Revaluation) AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Purchase)
        THEN BEGIN
          CALCSUMS("Cost Amount (Expected)");
          EXIT(-"Cost Amount (Expected)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcInvtAccrualInterim@8(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::"Direct Cost") AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Purchase)
        THEN BEGIN
          CALCSUMS("Cost Amount (Expected)");
          EXIT(-"Cost Amount (Expected)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcCOGS@9(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::"Direct Cost") AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Sale)
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcCOGSInterim@11(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" IN ["Entry Type"::"Direct Cost","Entry Type"::Revaluation]) AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Sale)
        THEN BEGIN
          CALCSUMS("Cost Amount (Expected)");
          EXIT(-"Cost Amount (Expected)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcWIPInventory@12(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        CASE "Item Ledger Entry Type" OF
          "Item Ledger Entry Type"::Consumption:
            IF "Entry Type" = "Entry Type"::"Direct Cost" THEN BEGIN
              CALCSUMS("Cost Amount (Actual)");
              EXIT(-"Cost Amount (Actual)");
            END;
          "Item Ledger Entry Type"::Output:
            CASE "Entry Type" OF
              "Entry Type"::"Direct Cost":
                BEGIN
                  CALCSUMS("Cost Amount (Actual)","Cost Amount (Expected)");
                  EXIT(-"Cost Amount (Actual)" - "Cost Amount (Expected)");
                END;
              "Entry Type"::Revaluation:
                BEGIN
                  CALCSUMS("Cost Amount (Expected)");
                  EXIT(-"Cost Amount (Expected)");
                END;
            END;
          "Item Ledger Entry Type"::" ":
            IF "Entry Type" IN ["Entry Type"::"Direct Cost","Entry Type"::"Indirect Cost"] THEN BEGIN
              CALCSUMS("Cost Amount (Actual)");
              EXIT("Cost Amount (Actual)");
            END;
        END;
      END;
    END;

    PROCEDURE CalcMaterialVariance@14(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::Variance) AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Output) AND
           ("Variance Type" = "Variance Type"::Material)
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcCapVariance@15(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::Variance) AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Output) AND
           ("Variance Type" = "Variance Type"::Capacity)
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcSubcontractedVariance@16(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::Variance) AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Output) AND
           ("Variance Type" = "Variance Type"::Subcontracted)
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcCapOverheadVariance@17(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::Variance) AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Output) AND
           ("Variance Type" = "Variance Type"::"Capacity Overhead")
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcMfgOverheadVariance@18(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::Variance) AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Output) AND
           ("Variance Type" = "Variance Type"::"Manufacturing Overhead")
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcInventoryInterim@19(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" IN ["Entry Type"::"Direct Cost","Entry Type"::Revaluation]) AND
           ("Item Ledger Entry Type" IN
            ["Item Ledger Entry Type"::Purchase,
             "Item Ledger Entry Type"::Sale,
             "Item Ledger Entry Type"::Output])
        THEN BEGIN
          CALCSUMS("Cost Amount (Expected)");
          EXIT("Cost Amount (Expected)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcOverheadAppliedToWIP@24(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::"Indirect Cost") AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::" ")
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcDirectCostAppliedToWIP@25(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::"Direct Cost") AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::" ")
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcWIPToInvtInterim@26(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" IN ["Entry Type"::"Direct Cost","Entry Type"::Revaluation]) AND
           ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Output)
        THEN BEGIN
          CALCSUMS("Cost Amount (Expected)");
          EXIT(-"Cost Amount (Expected)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcInvtToWIP@29(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO
        IF ("Entry Type" = "Entry Type"::"Direct Cost") AND
           ("Item Ledger Entry Type" IN
            ["Item Ledger Entry Type"::Output,"Item Ledger Entry Type"::Consumption])
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT("Cost Amount (Actual)");
        END;
    END;

    PROCEDURE CalcInventory@20(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF "Item Ledger Entry Type" = "Item Ledger Entry Type"::" " THEN
          EXIT(0);
        CALCSUMS("Cost Amount (Actual)");
        EXIT("Cost Amount (Actual)");
      END;
    END;

    PROCEDURE CalcDirectCostApplied@32(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::"Direct Cost") AND
           ("Item Ledger Entry Type" IN
            ["Item Ledger Entry Type"::Purchase,
             "Item Ledger Entry Type"::" "])
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE CalcOverheadApplied@31(VAR ValueEntry@1000 : Record 5802) : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        IF ("Entry Type" = "Entry Type"::"Indirect Cost") AND
           ("Item Ledger Entry Type" IN
            ["Item Ledger Entry Type"::Output,
             "Item Ledger Entry Type"::Purchase,
             "Item Ledger Entry Type"::" "])
        THEN BEGIN
          CALCSUMS("Cost Amount (Actual)");
          EXIT(-"Cost Amount (Actual)");
        END;
        EXIT(0);
      END;
    END;

    PROCEDURE DrillDownDirectCostApplActual@54(VAR InvtReportLine@1002 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::"Direct Cost");
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Purchase);
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownOverheadAppliedActual@53(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::"Indirect Cost");
        SETFILTER("Item Ledger Entry Type",'%1|%2',"Item Ledger Entry Type"::Purchase,"Item Ledger Entry Type"::Output);
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownPurchaseVariance@52(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::Variance);
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Purchase);
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownInventoryAdjmt@51(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
      Selection@1002 : Integer;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      Selection := STRMENU(Text004,3);
      IF Selection = 0 THEN
        EXIT;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));

        CASE Selection OF
          1:
            BEGIN
              SETRANGE("Entry Type","Entry Type"::"Direct Cost");
              SETFILTER("Item Ledger Entry Type",'%1|%2|%3',
                "Item Ledger Entry Type"::"Positive Adjmt.",
                "Item Ledger Entry Type"::"Negative Adjmt.",
                "Item Ledger Entry Type"::Transfer);
              FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
            END;
          2:
            BEGIN
              SETRANGE("Entry Type","Entry Type"::Revaluation);
              FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
            END;
          3:
            BEGIN
              SETRANGE("Entry Type","Entry Type"::Rounding);
              FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
            END;
        END;
      END;
    END;

    PROCEDURE DrillDownInvtAdjmtAccrInterim@50(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::Revaluation);
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Purchase);
        SETRANGE("Variance Type","Variance Type"::Purchase);
        FORM.RUN(0,ValueEntry,"Cost Amount (Expected)");
      END;
    END;

    PROCEDURE DrillDownInvtAccrualInterim@49(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::"Direct Cost");
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Purchase);
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Expected)");
      END;
    END;

    PROCEDURE DrillDownCOGS@48(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::"Direct Cost");
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Sale);
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownCOGSInterim@47(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETFILTER("Entry Type",'%1|%2',"Entry Type"::"Direct Cost","Entry Type"::Revaluation);
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Sale);
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Expected)");
      END;
    END;

    PROCEDURE DrillDownWIPInventory@46(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
      Selection@1002 : Integer;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      Selection := STRMENU(Text005,3);
      IF Selection = 0 THEN
        EXIT;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));

        CASE Selection OF
          1:
            BEGIN
              SETRANGE("Entry Type","Entry Type"::"Direct Cost");
              SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Consumption);
              FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
            END;
          2:
            BEGIN
              SETFILTER("Entry Type",'%1|%2',"Entry Type"::"Direct Cost","Entry Type"::"Indirect Cost");
              SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::" ");
              FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
            END;
          3:
            BEGIN
              SETFILTER("Entry Type",'%1|%2',"Entry Type"::"Direct Cost","Entry Type"::Revaluation);
              SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Output);
              FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
            END;
        END;
      END;
    END;

    PROCEDURE DrillDownMaterialVariance@45(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::Variance);
        SETRANGE("Variance Type","Variance Type"::Material);
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Output);
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownCapVariance@44(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::Variance);
        SETRANGE("Variance Type","Variance Type"::Capacity);
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Output);
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownSubcontractedVariance@43(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::Variance);
        SETRANGE("Variance Type","Variance Type"::Subcontracted);
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Output);
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownCapOverheadVariance@42(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::Variance);
        SETRANGE("Variance Type","Variance Type"::"Capacity Overhead");
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Output);
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownMfgOverheadVariance@41(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::Variance);
        SETRANGE("Variance Type","Variance Type"::"Manufacturing Overhead");
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Output);
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownInventoryInterim@40(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETFILTER("Entry Type",'%1|%2',"Entry Type"::"Direct Cost","Entry Type"::Revaluation);
        SETFILTER("Item Ledger Entry Type",'%1|%2|%3',
          "Item Ledger Entry Type"::Output,
          "Item Ledger Entry Type"::Purchase,
          "Item Ledger Entry Type"::Sale);
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Expected)");
      END;
    END;

    PROCEDURE DrillDownOverheadAppliedToWIP@39(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::"Indirect Cost");
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::" ");
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownDirectCostApplToWIP@38(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::"Direct Cost");
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::" ");
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownWIPToInvtInterim@37(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETFILTER("Entry Type",'%1|%2',"Entry Type"::"Direct Cost","Entry Type"::Revaluation);
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry Type"::Output);
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Expected)");
      END;
    END;

    PROCEDURE DrillDownInvtToWIP@36(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::"Direct Cost");
        SETFILTER("Item Ledger Entry Type",'%1|%2',"Item Ledger Entry Type"::Output,"Item Ledger Entry Type"::Consumption);
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownInventory@35(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type");
        SETFILTER("Item Ledger Entry Type",'<>%1',"Item Ledger Entry Type"::" ");
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownDirectCostApplied@34(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::"Direct Cost");
        SETFILTER("Item Ledger Entry Type",'%1|%2',"Item Ledger Entry Type"::Purchase,"Item Ledger Entry Type"::" ");
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE DrillDownOverheadApplied@27(VAR InvtReportLine@1001 : Record 5846);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      IF InvtReportLine.Type = InvtReportLine.Type::"G/L Account" THEN BEGIN
        DrillDownGL(InvtReportLine);
        EXIT;
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type","Entry Type");
        SETRANGE("Item No.",InvtReportLine."No.");
        SETFILTER("Posting Date",InvtReportLine.GETFILTER("Posting Date Filter"));
        SETFILTER("Location Code",InvtReportLine.GETFILTER("Location Filter"));
        SETRANGE("Entry Type","Entry Type"::"Indirect Cost");
        SETFILTER("Item Ledger Entry Type",'%1|%2|%3',
          "Item Ledger Entry Type"::Purchase,
          "Item Ledger Entry Type"::Output,
          "Item Ledger Entry Type"::" ");
        SETRANGE("Variance Type");
        FORM.RUN(0,ValueEntry,"Cost Amount (Actual)");
      END;
    END;

    PROCEDURE SetReportHeader@13(VAR InvtReportHeader2@1000 : Record 5845);
    BEGIN
      InvtReportHeader.COPY(InvtReportHeader2);
    END;

    LOCAL PROCEDURE OpenWindow@59();
    BEGIN
      Window.OPEN(
        Text000 +
        Text001 +
        Text002 +
        Text003);
      WindowIsOpen := TRUE;
      WindowUpdateTime := TIME;
    END;

    LOCAL PROCEDURE UpDateWindow@56(NewWindowType@1002 : Text[80];NewWindowNo@1001 : Code[20];NewWindowPostingType@1000 : Text[80]);
    BEGIN
      WindowType := NewWindowType;
      WindowNo := NewWindowNo;
      WindowPostingType := NewWindowPostingType;

      IF IsTimeForUpdate THEN BEGIN
        IF NOT WindowIsOpen THEN
          OpenWindow;
        Window.UPDATE(1,WindowType);
        Window.UPDATE(2,WindowNo);
        Window.UPDATE(3,WindowPostingType);
      END;
    END;

    LOCAL PROCEDURE IsTimeForUpdate@69() : Boolean;
    BEGIN
      IF TIME - WindowUpdateTime >= 1000 THEN BEGIN
        WindowUpdateTime := TIME;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckExpectedCostPosting@61(VAR InventoryReportLine@1000 : Record 5846) : Boolean;
    VAR
      InvtSetup@1012 : Record 313;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        IF ("Inventory (Interim)" <> 0) OR
           ("WIP Inventory" <> 0) OR
           ("Invt. Accrual (Interim)" <> 0) OR
           ("COGS (Interim)" <> 0)
        THEN BEGIN
          InvtSetup.GET;
          "Expected Cost Posting Warning" := NOT InvtSetup."Expected Cost Posting to G/L";
          MODIFY;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckIfNoDifference@64(VAR InventoryReportLine@1000 : Record 5846) : Boolean;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        IF (Inventory = 0) AND
           ("WIP Inventory" = 0) AND
           ("Direct Cost Applied Actual" = 0) AND
           ("Overhead Applied Actual" = 0) AND
           ("Purchase Variance" = 0) AND
           ("Inventory Adjmt." = 0) AND
           ("Invt. Accrual (Interim)" = 0) AND
           (COGS = 0) AND
           ("COGS (Interim)" = 0) AND
           ("Material Variance" = 0) AND
           ("Capacity Variance" = 0) AND
           ("Subcontracted Variance" = 0) AND
           ("Capacity Overhead Variance" = 0) AND
           ("Mfg. Overhead Variance" = 0) AND
           ("Direct Cost Applied WIP" = 0) AND
           ("Overhead Applied WIP" = 0) AND
           ("Inventory To WIP" = 0) AND
           ("WIP To Interim" = 0) AND
           ("Direct Cost Applied" = 0) AND
           ("Overhead Applied" = 0)
        THEN
          EXIT(TRUE);
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckCostIsPostedToGL@65(VAR InventoryReportLine@1000 : Record 5846) : Boolean;
    VAR
      ValueEntry@1001 : Record 5802;
      found@1002 : Boolean;
    BEGIN
       WITH InventoryReportLine DO BEGIN
        ValueEntry.SETCURRENTKEY("Item No.","Posting Date");
        IF ValueEntry.FIND('-') THEN
          REPEAT
            ValueEntry.SETRANGE("Item No.",ValueEntry."Item No.");
            ValueEntry.SETRANGE("Posting Date",ValueEntry."Posting Date");
            IF ValueEntryInFilteredSet(ValueEntry,InvtReportHeader,FALSE) THEN BEGIN
              REPEAT
                ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type");
                ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type");
                ValueEntry.SETRANGE("Location Code",ValueEntry."Location Code");
                ValueEntry.SETRANGE("Variance Type",ValueEntry."Variance Type");

                IF ValueEntryInFilteredSet(ValueEntry,InvtReportHeader,TRUE) THEN BEGIN
                  ValueEntry.SETRANGE("Cost Posted to G/L",0);
                  ValueEntry.SETFILTER("Cost Amount (Actual)",'<>%1',0);
                  IF ValueEntry.FIND('+') THEN BEGIN
                    "Cost is Posted to G/L Warning" := TRUE;
                    MODIFY;
                    EXIT(TRUE);
                  END;
                  ValueEntry.SETRANGE("Cost Posted to G/L");
                  ValueEntry.SETRANGE("Cost Amount (Actual)");
                END;
                ValueEntry.FIND('+');
                ValueEntry.SETRANGE("Entry Type");
                ValueEntry.SETRANGE("Item Ledger Entry Type");
                ValueEntry.SETRANGE("Location Code");
                ValueEntry.SETRANGE("Variance Type");
              UNTIL ValueEntry.NEXT = 0;
            END;
            IF ValueEntry.FIND('+') THEN;
            ValueEntry.SETRANGE("Item No.");
            ValueEntry.SETRANGE("Posting Date");
          UNTIL ValueEntry.NEXT = 0;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckValueGLCompression@66(VAR InventoryReportLine@1000 : Record 5846) : Boolean;
    VAR
      DateComprRegister@1010 : Record 87;
      InStartDateCompr@1003 : Boolean;
      InEndDateCompr@1002 : Boolean;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        DateComprRegister.SETCURRENTKEY("Table ID");
        DateComprRegister.SETFILTER("Table ID",'%1|%2',DATABASE::"Value Entry",DATABASE::"G/L Entry");
        DateComprRegister.SETFILTER("Starting Date",InvtReportHeader.GETFILTER("Posting Date Filter"));
        InStartDateCompr := DateComprRegister.FIND('-');
        DateComprRegister.SETFILTER("Ending Date",InvtReportHeader.GETFILTER("Posting Date Filter"));
        InEndDateCompr := DateComprRegister.FIND('-');
        IF InEndDateCompr OR InStartDateCompr THEN BEGIN
          "Compression Warning" := TRUE;
          MODIFY;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckGLClosingOverlaps@67(VAR InventoryReportLine@1000 : Record 5846) : Boolean;
    VAR
      AccountingPeriod@1006 : Record 50;
      GLEntry@1005 : Record 17;
      MinDate@1001 : Date;
      found@1002 : Boolean;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        IF NOT (("Direct Cost Applied Actual" = 0) AND
                ("Overhead Applied Actual" = 0) AND
                ("Purchase Variance" = 0) AND
                ("Inventory Adjmt." = 0) AND
                (COGS = 0) AND
                ("Material Variance" = 0) AND
                ("Capacity Variance" = 0) AND
                ("Subcontracted Variance" = 0) AND
                ("Capacity Overhead Variance" = 0) AND
                ("Mfg. Overhead Variance" = 0) AND
                ("Direct Cost Applied WIP" = 0) AND
                ("Overhead Applied WIP" = 0) AND
                ("Inventory To WIP" = 0) AND
                ("Direct Cost Applied" = 0) AND
                ("Overhead Applied" = 0))
        THEN BEGIN
          AccountingPeriod.SETFILTER("Starting Date",InvtReportHeader.GETFILTER("Posting Date Filter"));
          IF InvtReportHeader.GETFILTER("Posting Date Filter") <> '' THEN
            MinDate := InvtReportHeader.GETRANGEMIN("Posting Date Filter")
          ELSE
            MinDate := 0D;

          found :=
            AccountingPeriod.FIND('-') AND AccountingPeriod.Closed AND
            (AccountingPeriod."Starting Date" <= MinDate);
          IF AccountingPeriod."Starting Date" > MinDate THEN BEGIN
            AccountingPeriod.SETRANGE("Starting Date");
            IF NOT found THEN
              found :=
                AccountingPeriod.NEXT(-1) <> 0;
            IF NOT found THEN
              found := AccountingPeriod.Closed;
          END;
          IF found THEN BEGIN
            REPEAT
              REPEAT
              UNTIL (AccountingPeriod.NEXT = 0) OR AccountingPeriod."New Fiscal Year";
              IF AccountingPeriod."New Fiscal Year" THEN
                AccountingPeriod."Starting Date" := CLOSINGDATE(CALCDATE('<-1D>',AccountingPeriod."Starting Date"))
              ELSE
                AccountingPeriod."Starting Date" := CLOSINGDATE(AccountingPeriod."Starting Date");
              AccountingPeriod.SETFILTER("Starting Date",InvtReportHeader.GETFILTER("Posting Date Filter"));
              GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
              IF GLEntry.FIND('-') THEN
                REPEAT
                  GLEntry.SETRANGE("G/L Account No.",GLEntry."G/L Account No.");
                  GLEntry.SETRANGE("Posting Date",AccountingPeriod."Starting Date");
                  IF GLEntry.FIND('+') THEN BEGIN
                    "Closing Period Overlap Warning" := TRUE;
                    MODIFY;
                    EXIT(TRUE);
                  END;
                  GLEntry.SETRANGE("G/L Account No.");
                  GLEntry.SETRANGE("Posting Date");
                  GLEntry.FIND('+');
                UNTIL GLEntry.NEXT = 0;
              AccountingPeriod.SETRANGE(Closed,TRUE);
            UNTIL AccountingPeriod.NEXT = 0;
          END;
        END;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckDeletedGLAcc@68(VAR InventoryReportLine@1000 : Record 5846) : Boolean;
    VAR
      GLEntry@1004 : Record 17;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        GLEntry.RESET;
        GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
        GLEntry.SETRANGE("G/L Account No.",'');
        GLEntry.SETFILTER("Posting Date",InvtReportHeader.GETFILTER("Posting Date Filter"));
        IF GLEntry.FIND('-') THEN BEGIN
          "Deleted G/L Accounts Warning" := TRUE;
          MODIFY;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckPostingDateToGLNotTheSame@70(VAR InventoryReportLine@1000 : Record 5846) : Boolean;
    VAR
      ValueEntry@1002 : Record 5802;
      InvtPostingSetup@1003 : Record 5813;
      TempInvtPostingSetup@1004 : TEMPORARY Record 5813;
      TotalInventory@1001 : Decimal;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        ValueEntry.RESET;
        ValueEntry.SETCURRENTKEY("Item No.");
        IF ValueEntry.FIND('-') THEN
          REPEAT
            ValueEntry.SETRANGE("Item No.",ValueEntry."Item No.");
            IF ValueEntry."Item No." <> '' THEN
              TotalInventory := TotalInventory + CalcInventory(ValueEntry);
            ValueEntry.FIND('+');
            ValueEntry.SETRANGE("Item No.");
          UNTIL ValueEntry.NEXT = 0;

        IF InvtPostingSetup.FIND('-') THEN
          REPEAT
            TempInvtPostingSetup.RESET;
            TempInvtPostingSetup.SETRANGE("Inventory Account",InvtPostingSetup."Inventory Account");
            IF NOT TempInvtPostingSetup.FIND('-') THEN
              IF GLAcc.GET(InvtPostingSetup."Inventory Account") THEN
                TotalInventory := TotalInventory - CalcGLAccount(GLAcc);
            TempInvtPostingSetup := InvtPostingSetup;
            TempInvtPostingSetup.INSERT;
          UNTIL InvtPostingSetup.NEXT = 0;
        IF TotalInventory = 0 THEN BEGIN
          "Posting Date Warning" := TRUE;
          MODIFY;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CheckDirectPostings@71(VAR InventoryReportLine@1000 : Record 5846) : Boolean;
    BEGIN
      WITH InventoryReportLine DO BEGIN
        IF Inventory +
           "Inventory (Interim)" +
           "WIP Inventory" +
           "Direct Cost Applied Actual" +
           "Overhead Applied Actual" +
           "Purchase Variance" +
           "Inventory Adjmt." +
           "Invt. Accrual (Interim)" +
           COGS +
           "COGS (Interim)" +
           "Material Variance" +
           "Capacity Variance" +
           "Subcontracted Variance" +
           "Capacity Overhead Variance" +
           "Mfg. Overhead Variance" +
           "Direct Cost Applied WIP" +
           "Overhead Applied WIP" +
           "Direct Cost Applied" +
           "Overhead Applied" <>
           0
        THEN BEGIN
          "Direct Postings Warning" := TRUE;
          MODIFY;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    BEGIN
    END.
  }
}
