OBJECT Codeunit 7010319 Gestion calendario
{
  OBJECT-PROPERTIES
  {
    Date=12/11/14;
    Time=11:47:20;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Customer@1003 : Record 18;
      Vendor@1004 : Record 23;
      Location@1005 : Record 14;
      CompanyInfo@1006 : Record 79;
      ServMgtSetup@1014 : Record 5911;
      Shippingagent@1007 : Record 5790;
      BaseCalChange@1011 : Record 7035376;
      CustCalChange@1001 : Record 7602;
      CustCalEntry@1000 : Record 7603;
      TempCustChange@1002 : TEMPORARY Record 7602;
      TempCounter@1013 : Integer;
      CalculatedDays@1012 : Integer;
      CalendarCode@1008 : Code[10];
      OriginalDate@1009 : Date;
      DayName@1010 : Text[30];
      Text001@1015 : TextConst 'ENU=Yes;ESP=S¡';
      Text002@1016 : TextConst 'ENU=No;ESP=No';

    PROCEDURE ShowCustomizedCalendar@1(ForSourcetype@1000 : 'Company,Customer,Vendor,Location,Shipping Agent,Service';ForSourceCode@1001 : Code[20];ForAdditionalSourceCode@1003 : Code[20];ForBaseCalendarCode@1002 : Code[10]);
    BEGIN
      CustCalEntry.DELETEALL;
      CustCalEntry.INIT;
      CustCalEntry."Source Type" := ForSourcetype;
      CustCalEntry."Source Code" := ForSourceCode;
      CustCalEntry."Additional Source Code" := ForAdditionalSourceCode;
      CustCalEntry."Base Calendar Code" := ForBaseCalendarCode;
      CustCalEntry.INSERT;
      FORM.RUN(FORM::"Customized Calendar Entries",CustCalEntry);
    END;

    PROCEDURE GetCalendarCode@7(SourceType@1001 : 'Company,Customer,Vendor,Location,Shipping Agent,Service';SourceCode@1000 : Code[20];AdditionalSourceCode@1002 : Code[20]) : Code[10];
    BEGIN
      CASE SourceType OF
        SourceType::Company:
          IF CompanyInfo.GET THEN
            EXIT(CompanyInfo."Base Calendar Code");
        SourceType::Customer:
          IF Customer.GET(SourceCode) THEN
            EXIT(Customer."Base Calendar Code");
        SourceType::Vendor:
          IF Vendor.GET(SourceCode) THEN
            EXIT(Vendor."Base Calendar Code");
        SourceType::"Shipping Agent":
          BEGIN
            IF Shippingagent.GET(SourceCode,AdditionalSourceCode) THEN
              EXIT(Shippingagent."Base Calendar Code")
            ELSE
              IF CompanyInfo.GET THEN BEGIN
                EXIT(CompanyInfo."Base Calendar Code");
              END;
          END;
        SourceType::Location:
          BEGIN
            IF Location.GET(SourceCode) THEN
              IF Location."Base Calendar Code" <> '' THEN
                EXIT(Location."Base Calendar Code");
            IF CompanyInfo.GET THEN
              EXIT(CompanyInfo."Base Calendar Code");
          END;
        SourceType::Service:
          IF ServMgtSetup.GET THEN
            EXIT(ServMgtSetup."Base Calendar Code");
      END;
    END;

    PROCEDURE CheckDateStatus@5(CalendarCode@1000 : Code[10];TargetDate@1001 : Date;VAR Description@1002 : Text[50]) : Boolean;
    BEGIN
      BaseCalChange.RESET;
      BaseCalChange.SETRANGE("Base Calendar Code",CalendarCode);
      IF BaseCalChange.FINDSET THEN
        REPEAT
          CASE BaseCalChange."Recurring System" OF
            BaseCalChange."Recurring System"::" ":
              IF TargetDate = BaseCalChange.Date THEN BEGIN
                Description := BaseCalChange.Description;
                EXIT(BaseCalChange.Nonworking);
              END;
            BaseCalChange."Recurring System"::"Weekly Recurring":
              IF DATE2DWY(TargetDate,1) = BaseCalChange.Day THEN BEGIN
                Description := BaseCalChange.Description;
                EXIT(BaseCalChange.Nonworking);
              END;
            BaseCalChange."Recurring System"::"Annual Recurring":
              IF (DATE2DMY(TargetDate,2) = DATE2DMY(BaseCalChange.Date,2)) AND
                 (DATE2DMY(TargetDate,1) = DATE2DMY(BaseCalChange.Date,1))
              THEN BEGIN
                Description := BaseCalChange.Description;
                EXIT(BaseCalChange.Nonworking);
              END;
          END;
        UNTIL BaseCalChange.NEXT = 0;
      Description := '';
    END;

    PROCEDURE CheckCustomizedDateStatus@2(SourceType@1003 : 'Company,Customer,Vendor,Location,Shipping Agent,Service';SourceCode@1004 : Code[20];AdditionalSourceCode@1005 : Code[20];CalendarCode@1002 : Code[10];TargetDate@1001 : Date;VAR Description@1000 : Text[50]) : Boolean;
    BEGIN
      CombineChanges(SourceType,SourceCode,AdditionalSourceCode,CalendarCode);
      TempCustChange.RESET;
      TempCustChange.SETCURRENTKEY("Entry No.");
      IF TempCustChange.FINDSET THEN
        REPEAT
          CASE TempCustChange."Recurring System" OF
            TempCustChange."Recurring System"::" ":
              IF TargetDate = TempCustChange.Date THEN BEGIN
                Description := TempCustChange.Description;
                EXIT(TempCustChange.Nonworking);
              END;

            TempCustChange."Recurring System"::"Weekly Recurring":
              IF DATE2DWY(TargetDate,1) = TempCustChange.Day THEN BEGIN
                Description := TempCustChange.Description;
                EXIT(TempCustChange.Nonworking);
              END;

            TempCustChange."Recurring System"::"Annual Recurring":
              IF (DATE2DMY(TargetDate,2) = DATE2DMY(TempCustChange.Date,2)) AND
                 (DATE2DMY(TargetDate,1) = DATE2DMY(TempCustChange.Date,1))
              THEN BEGIN
                Description := TempCustChange.Description;
                EXIT(TempCustChange.Nonworking);
              END;
          END;
        UNTIL TempCustChange.NEXT = 0;
      Description := '';
    END;

    PROCEDURE CombineChanges@4(SourceType@1003 : 'Company,Customer,Vendor,Location,Shipping Agent,Service';SourceCode@1002 : Code[20];AdditionalSourceCode@1001 : Code[20];CalendarCode@1000 : Code[10]);
    BEGIN
      TempCustChange.RESET;
      TempCustChange.DELETEALL;

      TempCounter := 0;
      CustCalChange.RESET;
      CustCalChange.SETRANGE("Source Type",SourceType);
      CustCalChange.SETRANGE("Source Code",SourceCode);
      CustCalChange.SETRANGE("Base Calendar Code",CalendarCode);
      CustCalChange.SETRANGE("Additional Source Code",AdditionalSourceCode);
      IF CustCalChange.FINDSET THEN
        REPEAT
          TempCounter := TempCounter + 1;
          TempCustChange.INIT;
          TempCustChange."Source Type" := CustCalChange."Source Type";
          TempCustChange."Source Code" := CustCalChange."Source Code";
          TempCustChange."Base Calendar Code" := CustCalChange."Base Calendar Code";
          TempCustChange."Additional Source Code" := CustCalChange."Additional Source Code";
          TempCustChange.Date := CustCalChange.Date;
          TempCustChange.Description := CustCalChange.Description;
          TempCustChange.Day := CustCalChange.Day;
          TempCustChange.Nonworking := CustCalChange.Nonworking;
          TempCustChange."Recurring System" := CustCalChange."Recurring System";
          TempCustChange."Entry No." := TempCounter;
          TempCustChange.INSERT;
        UNTIL CustCalChange.NEXT = 0;

      BaseCalChange.RESET;
      BaseCalChange.SETRANGE("Base Calendar Code",CalendarCode);
      IF BaseCalChange.FINDSET THEN
        REPEAT
          TempCounter := TempCounter + 1;
          TempCustChange.INIT;
          TempCustChange."Entry No." := TempCounter;
          TempCustChange."Source Type" := SourceType;
          TempCustChange."Source Code" := SourceCode;
          TempCustChange."Base Calendar Code" := BaseCalChange."Base Calendar Code";
          TempCustChange.Date := BaseCalChange.Date;
          TempCustChange.Description := BaseCalChange.Description;
          TempCustChange.Day := BaseCalChange.Day;
          TempCustChange.Nonworking := BaseCalChange.Nonworking;
          TempCustChange."Recurring System" := BaseCalChange."Recurring System";
          TempCustChange.INSERT;
        UNTIL BaseCalChange.NEXT = 0;
    END;

    PROCEDURE CreateWhereUsedEntries@3(BaseCalendarCode@1000 : Code[10]);
    VAR
      WhereUsedBaseCalendar@1001 : Record 7604;
    BEGIN
      WhereUsedBaseCalendar.DELETEALL;
      IF CompanyInfo.GET THEN
        IF CompanyInfo."Base Calendar Code" = BaseCalendarCode THEN BEGIN
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::Company;
          WhereUsedBaseCalendar."Source Name" := CompanyInfo.Name;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::Company,'','',BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        END;

      Customer.RESET;
      Customer.SETRANGE("Base Calendar Code",BaseCalendarCode);
      IF Customer.FINDSET THEN
        REPEAT
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::Customer;
          WhereUsedBaseCalendar."Source Code" := Customer."No.";
          WhereUsedBaseCalendar."Source Name" := Customer.Name;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::Customer,Customer."No.",'',BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        UNTIL Customer.NEXT = 0;

      Vendor.RESET;
      Vendor.SETRANGE("Base Calendar Code",BaseCalendarCode);
      IF Vendor.FINDSET THEN
        REPEAT
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::Vendor;
          WhereUsedBaseCalendar."Source Code" := Vendor."No.";
          WhereUsedBaseCalendar."Source Name" := Vendor.Name;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::Vendor,Vendor."No.",'',BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        UNTIL Vendor.NEXT = 0;

      Location.RESET;
      Location.SETRANGE("Base Calendar Code",BaseCalendarCode);
      IF Location.FINDSET THEN
        REPEAT
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::Location;
          WhereUsedBaseCalendar."Source Code" := Location.Code;
          WhereUsedBaseCalendar."Source Name" := Location.Name;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::Location,Location.Code,'',BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        UNTIL Location.NEXT = 0;

      Shippingagent.RESET;
      Shippingagent.SETRANGE("Base Calendar Code",BaseCalendarCode);
      IF Shippingagent.FINDSET THEN
        REPEAT
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::"Shipping Agent";
          WhereUsedBaseCalendar."Source Code" := Shippingagent."Shipping Agent Code";
          WhereUsedBaseCalendar."Additional Source Code" := Shippingagent.Code;
          WhereUsedBaseCalendar."Source Name" := Shippingagent.Description;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::"Shipping Agent",Shippingagent."Shipping Agent Code",
              Shippingagent.Code,BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        UNTIL Shippingagent.NEXT = 0;

      IF ServMgtSetup.GET THEN
        IF ServMgtSetup."Base Calendar Code" = BaseCalendarCode THEN BEGIN
          WhereUsedBaseCalendar.INIT;
          WhereUsedBaseCalendar."Base Calendar Code" := BaseCalendarCode;
          WhereUsedBaseCalendar."Source Type" := WhereUsedBaseCalendar."Source Type"::Service;
          WhereUsedBaseCalendar."Source Name" := ServMgtSetup.TABLECAPTION;
          WhereUsedBaseCalendar."Customized Changes Exist" :=
            CustomizedChangesExist(
              WhereUsedBaseCalendar."Source Type"::Service,'','',BaseCalendarCode);
          WhereUsedBaseCalendar.INSERT;
        END;


      COMMIT;
    END;

    PROCEDURE CustomizedChangesExist@8(SourceType@1003 : 'Company,Customer,Vendor,Location,Shipping Agent,Service';SourceCode@1002 : Code[20];AdditionalSourceCode@1001 : Code[20];BaseCalendarCode@1000 : Code[10]) : Boolean;
    BEGIN
      CustCalChange.RESET;
      CustCalChange.SETRANGE("Source Type",SourceType);
      CustCalChange.SETRANGE("Source Code",SourceCode);
      CustCalChange.SETRANGE("Additional Source Code",AdditionalSourceCode);
      CustCalChange.SETRANGE("Base Calendar Code",BaseCalendarCode);
      IF CustCalChange.FINDFIRST THEN
        EXIT(TRUE);
    END;

    PROCEDURE CustomizedCalendarExistText@9(SourceType@1004 : 'Company,Customer,Vendor,Location,Shipping Agent,Service';SourceCode@1003 : Code[20];AdditionalSourceCode@1002 : Code[20];BaseCalendarCode@1001 : Code[10]) : Text[10];
    BEGIN
      IF CustomizedChangesExist(SourceType,SourceCode,AdditionalSourceCode,BaseCalendarCode) THEN
        EXIT(Text001);
      EXIT(Text002);
    END;

    PROCEDURE CalcDateBOC@6(OrgDateExpression@1000 : Text[30];OrgDate@1001 : Date;FirstSourceType@1002 : 'Company,Customer,Vendor,Location,Shipping Agent';FirstSourceCode@1003 : Code[20];FirstAddCode@1006 : Code[20];SecondSourceType@1007 : 'Company,Customer,Vendor,Location,Shipping Agent';SecondSourceCode@1008 : Code[20];SecondAddCode@1009 : Code[20];CheckBothCalendars@1016 : Boolean) : Date;
    VAR
      FirstCalCode@1010 : Code[10];
      SecondCalCode@1011 : Code[10];
      LoopTerminator@1005 : Boolean;
      LoopCounter@1014 : Integer;
      NewDate@1012 : Date;
      TempDesc@1013 : Text[30];
      Nonworking@1015 : Boolean;
      Nonworking2@1017 : Boolean;
      LoopFactor@1018 : Integer;
      CalConvTimeFrame@1004 : Integer;
      DateFormula@1019 : DateFormula;
      Ok@1020 : Boolean;
      NegDateFormula@1021 : DateFormula;
    BEGIN
      IF (FirstSourceType = FirstSourceType::"Shipping Agent") AND
         ((FirstSourceCode = '') OR (FirstAddCode = ''))
      THEN BEGIN
        FirstSourceType := FirstSourceType::Company;
        FirstSourceCode := '';
        FirstAddCode := '';
      END;
      IF (SecondSourceType = SecondSourceType::"Shipping Agent") AND
         ((SecondSourceCode = '') OR (SecondAddCode = ''))
      THEN BEGIN
        SecondSourceType := SecondSourceType::Company;
        SecondSourceCode := '';
        SecondAddCode := '';
      END;
      IF (FirstSourceType = FirstSourceType::Location) AND
         (FirstSourceCode = '')
      THEN BEGIN
        FirstSourceType := FirstSourceType::Company;
        FirstSourceCode := '';
      END;
      IF (SecondSourceType = SecondSourceType::Location) AND
         (SecondSourceCode = '')
      THEN BEGIN
        SecondSourceType := SecondSourceType::Company;
        SecondSourceCode := '';
      END;
      IF CompanyInfo.GET THEN
        CalConvTimeFrame := CALCDATE(CompanyInfo."Cal. Convergence Time Frame",WORKDATE) - WORKDATE;

      FirstCalCode := GetCalendarCode(FirstSourceType,FirstSourceCode,FirstAddCode);
      SecondCalCode := GetCalendarCode(SecondSourceType,SecondSourceCode,SecondAddCode);
      EVALUATE(DateFormula,OrgDateExpression);
      EVALUATE(NegDateFormula,'<-0D>');

      IF OrgDate = 0D THEN
        OrgDate := WORKDATE;
      IF (CALCDATE(DateFormula,OrgDate) >= OrgDate) AND (DateFormula <> NegDateFormula) THEN
        LoopFactor := 1
      ELSE
        LoopFactor := -1;

      NewDate := OrgDate;
      IF CALCDATE(DateFormula,OrgDate) <> OrgDate THEN BEGIN
        REPEAT
          NewDate := NewDate + LoopFactor;
          IF CheckBothCalendars AND (FirstCalCode = '') AND (SecondCalCode <> '') THEN
            Ok := NOT(
              CheckCustomizedDateStatus(
                SecondSourceType,SecondSourceCode,SecondAddCode,SecondCalCode,NewDate,TempDesc))
          ELSE
            Ok := NOT(
              CheckCustomizedDateStatus(
                FirstSourceType,FirstSourceCode,FirstAddCode,FirstCalCode,NewDate,TempDesc));
          IF Ok THEN
            LoopCounter := LoopCounter + 1;
          IF NewDate >= OrgDate + CalConvTimeFrame THEN
            LoopCounter := ABS(CALCDATE(DateFormula,OrgDate) - OrgDate);
        UNTIL LoopCounter = ABS(CALCDATE(DateFormula,OrgDate) - OrgDate);
      END;

      LoopCounter := 0;
      REPEAT
        LoopCounter := LoopCounter + 1;
        Nonworking :=
          CheckCustomizedDateStatus(
            FirstSourceType,FirstSourceCode,FirstAddCode,FirstCalCode,NewDate,TempDesc);
        Nonworking2 :=
          CheckCustomizedDateStatus(
            SecondSourceType,SecondSourceCode,SecondAddCode,SecondCalCode,NewDate,TempDesc);
        IF Nonworking THEN BEGIN
          NewDate := NewDate + LoopFactor;
        END ELSE BEGIN
          IF NOT CheckBothCalendars THEN BEGIN
            EXIT(NewDate);
          END ELSE BEGIN
            IF (Nonworking = FALSE) AND
               (Nonworking2 = FALSE) THEN
              EXIT(NewDate)
            ELSE
              NewDate := NewDate + LoopFactor;
          END;
        END;
        IF LoopCounter >= CalConvTimeFrame THEN
          LoopTerminator := TRUE;
      UNTIL LoopTerminator = TRUE;
      EXIT(NewDate);
    END;

    PROCEDURE CalcDateBOC2@11(OrgDateExpression@1000 : Text[30];OrgDate@1001 : Date;FirstSourceType@1002 : 'Company,Customer,Vendor,Location,Shipping Agent';FirstSourceCode@1003 : Code[20];FirstAddCode@1006 : Code[20];SecondSourceType@1007 : 'Company,Customer,Vendor,Location,Shipping Agent';SecondSourceCode@1008 : Code[20];SecondAddCode@1009 : Code[20];CheckBothCalendars@1016 : Boolean) : Date;
    VAR
      NewOrgDateExpression@1021 : Text[30];
    BEGIN
      // Use this procedure to subtract time expression.
      NewOrgDateExpression := ReverseSign(OrgDateExpression);
      EXIT(CalcDateBOC(NewOrgDateExpression,OrgDate,FirstSourceType,FirstSourceCode,FirstAddCode,
        SecondSourceType,SecondSourceCode,SecondAddCode,CheckBothCalendars));
    END;

    LOCAL PROCEDURE ReverseSign@10(DateFormulaExpr@1000 : Text[30]) : Text[30];
    VAR
      NewDateFormulaExpr@1001 : Text[30];
    BEGIN
      NewDateFormulaExpr := CONVERTSTR(DateFormulaExpr,'+-','-+');
      IF NOT(DateFormulaExpr[1] IN ['+','-']) THEN
        NewDateFormulaExpr := '-' + NewDateFormulaExpr;
      EXIT(NewDateFormulaExpr);
    END;

    BEGIN
    {
      $000 AJS 12112014 Codeunit creada a partir de la codeunit estandar Calendar Management
    }
    END.
  }
}
