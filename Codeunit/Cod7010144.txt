OBJECT Codeunit 7010144 Liquidacion Guia venta
{
  OBJECT-PROPERTIES
  {
    Date=26/06/15;
    Time=12:09:34;
    Modified=Yes;
    Version List=AIC2009,CNT-OC-14047;
  }
  PROPERTIES
  {
    OnRun=VAR
            lrRepr@1100253000 : Record 7010241;
            lrResEx@1100253001 : Record 7010162;
          BEGIN
            //+$017
            lrRepr.RESET;
            lrRepr.SETRANGE(Bloqueado          , FALSE);
            lrRepr.SETRANGE("Trabaja a credito", FALSE); //$021
            //+$017
            IF FORM.RUNMODAL(7010234, lrRepr) = ACTION::LookupOK THEN BEGIN
              CLEAR(lrResEx);
              lrResEx.SETCURRENTKEY("Guia Venta", "N§ Ticket", "Liquidado GV", "N§ liquidacion GV", "N§ liquidacion GV reembolso");
              lrResEx.FILTERGROUP(2);
              lrResEx.SETRANGE("Guia Venta", lrRepr.Codigo);
              lrResEx.FILTERGROUP(0);
              FORM.RUN(7010205, lrResEx);
            END;
          END;

  }
  CODE
  {
    VAR
      Text000@1103355025 : TextConst 'ENU=Configuration folder was not found in data base;ESP=No existe el fichero de configuraci¢n de la base de datos.';
      Text001@1103355026 : TextConst 'ENU=Commission is about to be invoiced. Continue?;ESP=Se va a facturar la comisi¢n. ¨Continuar?';
      Text002@1103355027 : TextConst 'ENU=Generating purchase invoice'';ESP=Generando Factura de compra...';
      Text003@1103355028 : TextConst 'ENU=There is no purchase contract for Guides;ESP=No existe el contrato de compra para los Gu¡as';
      Text004@1103355029 : TextConst 'ENU=of sale of %1, review Touroperator field of;ESP=de venta de %1, revise el campo TourOperador de';
      Text005@1103355030 : TextConst 'ENU=contract of Sale Guides;ESP=los contratos de Gu¡as de Venta.';
      Text008@1103355033 : TextConst 'ENU=Ledger entries folder does not exist for the \;ESP=No existe el fichero de cuentas para la \';
      Text009@1103355034 : TextConst 'ENU=Local Office %1 and Touroperator %2, neither generic card;ESP=Delegacion %1 y TourOperador %2, ni la ficha generica.';
      Text010@1103355035 : TextConst 'ENU=Firstly must fill up the purchase ledger account of excursions;ESP=Debe rellenar primero la cuenta de compra de excursiones';
      Text011@1103355036 : TextConst 'ENU=Firstly must fill up the client of commissions of TourOperator;ESP=Debe rellenar primero el cliente de comisiones del TourOperador';
      Text012@1103355037 : TextConst 'ENU=Supplier %1 does not exist;ESP=No existe el proveedor %1.';
      Text013@1103355038 : TextConst 'ENU=Supplier posting group %1 does not exist;ESP=No existe el Grupo contable proveedor %1.';
      Text014@1103355039 : TextConst 'ENU=Accounting of:;ESP=Contabilizaciones de:';
      Text015@1103355040 : TextConst 'ENU=To settle the bookings together they must have same exchange rate;ESP=Solo se pueden liquidar juntas las reservas que tienen el mismo tipo de cambio.';
      Text016@1103355041 : TextConst 'ENU=Enter to continue;ESP=Intro para continuar';
      Text017@1103355042 : TextConst 'ENU=Results: \\;ESP=Resultados: \\';
      Text018@1103355043 : TextConst 'ENU=Incomes     #1######### \;ESP=Ingresos     #1######### \';
      Text019@1103355044 : TextConst 'ENU=Commssion #2######### \;ESP=Comisionable #2######### \';
      Text020@1103355045 : TextConst 'ENU=Commission     #3######### \;ESP=Comision     #3######### \';
      Text021@1103355046 : TextConst 'ENU=VAT          #4######### \;ESP=IVA          #4######### \';
      Text022@1103355047 : TextConst 'ENU=Income tax         #5######### \;ESP=IRPF         #5######### \';
      Text023@1103355048 : TextConst 'ENU=Sale guide %1 contract was not found, date %2;ESP=Contrato del Guia Venta %1 no encontrado, fecha %2';
      Text033@1103355058 : TextConst 'ENU=Com. Exc. Sale Guide:;ESP=Com. exc. Guia Venta:';
      Text034@1103355059 : TextConst 'ENU=%1, TO: %2;ESP=%1, TO: %2';
      Text036@1103355061 : TextConst 'ENU=There are too many Touroperators in this settlement;ESP=Hay demasiados touroperadores involucrados en esta liquidaci¢n.';
      Text037@1103355062 : TextConst 'ENU=Maximum number of touroperators is 150;ESP=El n£mero m ximo de touroperadores son 150.';
      Text038@1103355063 : TextConst 'ENU=Contract price No. %1 from Sale Guide %2 was not found \;ESP=Precio del contrato n§ %1 del Guia Venta %2 no encontrado \';
      Text039@1103355064 : TextConst 'ENU=" Zone: %3\";ESP="  Zona: %3\"';
      Text040@1103355065 : TextConst 'ENU=" Excursion: %4\";ESP="  Excursion: %4\"';
      Text041@1103355066 : TextConst 'ENU=Date: %5;ESP="  Fecha: %5"';
      Text042@1103355067 : TextConst 'ENU=TourOperator %1 does not exist;ESP=No existe el TourOperador %1';
      Text043@1103355068 : TextConst 'ENU=Client %1 does not exist;ESP=No existe el cliente %1';
      Text044@1103355069 : TextConst 'ENU=Sale VAT %1, %2 does not exist;ESP=No Existe el IVA de venta %1, %2';
      Text045@1103355070 : TextConst 'ENU=Com #1###### #2##################;ESP=Com #1###### #2##################';
      Text046@1103355071 : TextConst 'ENU=" #1# Ad.";ESP=" #1# Ad."';
      Text047@1103355072 : TextConst 'ENU=Commission #1# adults;ESP=Comisi¢n #1# adultos';
      Text048@1103355073 : TextConst 'ENU=" and #1# children";ESP=" y #1# ni¤os"';
      rPar@1103355000 : Record 7009700;
      rTTOO@1100253006 : Record 7009717;
      TablaImportes@1103355001 : ARRAY [9,150] OF Decimal;
      TablaTotales@1103355002 : ARRAY [9] OF Decimal;
      Ingreso@1103355003 : Integer;
      Comisionable@1103355004 : Integer;
      Comision@1103355005 : Integer;
      IVAProducto@1103355006 : Integer;
      IVAGuiaVenta@1103355007 : Integer;
      IRPF@1103355008 : Integer;
      AdultosGV@1103355009 : Integer;
      NinsGV@1103355010 : Integer;
      rReserva@1103355011 : Record 7010162;
      rReservaTransfer@1000000002 : Record 7009744;
      rCuentas@1103355012 : Record 7009705;
      rProveedor@1103355013 : Record 23;
      rGrupo@1103355014 : Record 93;
      rTipCam@1100253000 : Record 330;
      rConfCmp@1103355016 : Record 312;
      rIVACompra@1103355017 : Record 325;
      rDatIns@1100253010 : Record 7009768;
      importecon@1103355018 : Decimal;
      importesin@1103355019 : Decimal;
      tab_touroperador@1103355020 : ARRAY [150] OF Code[10];
      ind_to@1103355022 : Integer;
      cFunExc@1103355024 : Codeunit 7010141;
      Text050@1100253001 : TextConst 'ENU=SALES IN;ESP=VENTAS EN';
      Text051@1100253002 : TextConst 'ENU=Booking %1 has NOT been collected;ESP=La reserva %1 NO se ha cobrado';
      Text052@1100253003 : TextConst 'ENU=Confirm to settle sales of representative %1?;ESP=¨Confirma que desea liquidar las ventas del representante %1?';
      Text053@1100253004 : TextConst 'ENU=Ended registration.;ESP=Registro finalizado.';
      Text054@1100253005 : TextConst 'ENU=Any booking has been settled;ESP=No se ha liquidado ninguna reserva';
      Text055@1100253007 : TextConst 'ENU=Sold Excursions;ESP=Excursiones vendidas';
      Text056@1100253008 : TextConst 'ENU=ADJUSTMENTS FOR DIFFERENCES BETWEEN CURRENCIES;ESP=AJUSTES POR DIFERENCIAS ENTRE DIVISAS';
      Text057@1100253009 : TextConst 'ESP=Se han generado %1 liquidaciones';
      Text058@1100253011 : TextConst 'ENU=The liquidation has reservations with different sales months.;ESP=La liquidaci¢n tiene reservas con meses de venta distintos.';
      Text059@1100253012 : TextConst 'ENU=There are reservations with a different date currency exchange;ESP=No pueden liquidarse reservas con distintas fechas de cambio de divisa';
      Text060@1100253013 : TextConst 'ENU=The amount of detail in %1 does not correspond to the amount of charges;ESP=El importe del detalle en %1 no se corresponde a importe de cobros (%2 / %3)';
      wDiarioGeneral@1100217000 : Code[10];
      Text061@1100217001 : TextConst 'ENU=The sum of payments (%1) of ticket %2 can not be less than the amount of the reservation (%3);ESP=La suma de cobros (%1) del ticket %2 no puede ser inferior al importe de la reserva (%3)';
      Text062@1100217002 : TextConst 'ENU=Commission on sales in %1 %2;ESP="Comisi¢n Sobre Ventas en %1 %2 "';
      Text063@1100217003 : TextConst 'ENU=There are unauthorized supplements on the ticket %1.;ESP=Existen suplementos sin autorizar en el ticket %1.';
      wCodDim1@1100217004 : Code[20];
      Text064@1100217005 : TextConst 'ENU=The ticket %1 has a payment line without payment form.;ESP=El ticket %1 tiene una linea de cobro sin forma de pago.';
      Text065@1100217006 : TextConst 'ENU=The ticket %1 has a payment line without amount.;ESP=El ticket %1 tiene una linea de cobro sin importe recibido.';
      Text066@1100217007 : TextConst 'ENU=SETTLEMENT;ESP=LIQUIDACIO';
      Text067@1100217008 : TextConst 'ENU=Do you want to print the receipt of the cash given by the sales guide %1 on %2.;ESP=Desea imprimir el recibo del dinero entregado por el guia %1 el dia %2.';
      Text068@1100217009 : TextConst 'ENU=There are no pending reservations for this guide.;ESP=No hay reservas sin liquidar para este guia.';
      Text069@1100217010 : TextConst 'ENU=Confirm to settle sales of representative %1 sold in period %2?;ESP=¨Confirma que desea liquidar las ventas del representante %1 del periodo %2?';
      Text070@1100217011 : TextConst 'ENU=You must set a filter on the sale date.;ESP=Establezca un filtro sobre la fecha de venta.';
      Text071@1100217012 : TextConst 'ENU=Currency exchange differences sale / invoice;ESP=Diferencias cambiarias divisa de venta/factura';
      Text072@1100217013 : TextConst 'ENU=The ticket %1 has an error. You must indicate adults and/or childs.;ESP=El ticket %1 tiene un error. Debe indicar adultos y/o ni¤os.';
      Text073@1100217014 : TextConst 'ENU=Workdate must be in the sale dates month.;ESP=La fecha de trabajo debe estar dentro del mes de fechas de ventas';
      Text074@1000000000 : TextConst 'ENU=The ticket %1 has an error. You must indicate the hotel;ESP=El ticket %1 tiene un error. Debe indicar el hotel';
      Text075@1000000001 : TextConst 'ENU=Firstly must fill up the purchase ledger account of transfer;ESP=Debe rellenar primero la cuenta de compra de transfer';
      Text076@1000000003 : TextConst 'ENU=There is no price for excursion %1 in the contract %2 in day %3 and Touroperator %4.;ESP=La excursion %1 no tiene precio el dia %2 en el contrato %3 y Touroperador %4.';

    PROCEDURE Facturar@1(VAR rRes@1103355000 : Record 7010162;Origen@1103355001 : 'Facturar,Previo Liquidar,Consultar') : Boolean;
    VAR
      rContrato@1103355002 : Record 7010142;
      Dialogo@1103355003 : Dialog;
      FechaDesde@1103355004 : Date;
      FechaHasta@1103355005 : Date;
      rCabCompra@1103355006 : Record 38;
    BEGIN
      // Facturar

      rPar.FINDFIRST;

      rReserva.COPY(rRes);
      rReserva.SETCURRENTKEY("Guia Venta",
                             "Fecha Excursion",
                             "Liquidado GV",
                             Producto,
                             "Zona Hotel",
                             "Precio Adulto",
                             "Precio Ni¤o");

      Comprobar_Ficheros(Origen);

      Inicializar_Variables;

      _CalcularImportes(FechaDesde, FechaHasta);

      _CalcularImportesReembolsos(FechaDesde, FechaHasta); // $046

      // - $046
      //+$002
      //IF rReserva.GETFILTER("N§ liquidacion GV") <> '' THEN
      //BEGIN
      //  rReserva.COPYFILTER("N§ liquidacion GV", rReserva."N§ liquidacion GV reembolso");
      //  rReserva.SETRANGE("N§ liquidacion GV");
      //  _CalcularImportes(FechaDesde, FechaHasta);
      //END;
      //+$002

      Calcular_Totales;

      Cambiar_Signo_Totales;

      IF Origen = Origen::Facturar THEN
        Mostrar_Totales;

      IF Origen IN [Origen::"Previo Liquidar", Origen::Consultar] THEN
      BEGIN
        Insertar_Previo_Liquidacion;
        EXIT;
      END;

      IF NOT CONFIRM(Text001) THEN
        EXIT(FALSE);

      rReserva := rRes;
      IF Buscar_Contrato(rContrato, rReserva) THEN
      BEGIN
        IF TablaTotales[Comision] <> 0 THEN
        BEGIN
          Dialogo.OPEN(Text002);
          Generar_Factura(rContrato, rCabCompra);
          Dialogo.CLOSE;
          COMMIT;

          Imprimir_Factura(rCabCompra);
        END
      END
      ELSE
        ERROR(Text003 + Text004 + Text005, rReserva.TourOperador);
      EXIT(TRUE);
    END;

    PROCEDURE Comprobar_Ficheros@2(pwOrigen@1103355000 : Integer);
    VAR
      rPar@1103355001 : Record 7009700;
      lrRepr@1100253000 : Record 7010241;
    BEGIN
      // Comprobar_Ficheros

      rPar.FINDFIRST;
      wDiarioGeneral := rPar.GetLibroDiarioGeneral;
      rPar.CreaSeccionUsuario;

      IF NOT rCuentas.GET(rPar.Delegacion, rReserva.TourOperador) THEN BEGIN
        IF NOT rCuentas.GET(rPar.Delegacion, '') THEN
          ERROR(Text008 +
                Text009, rPar.Delegacion, rReserva.TourOperador);
      END;

      IF rCuentas."Cta. compra excursiones" = '' THEN
        ERROR(Text010);

      IF rCuentas."Cta. compra transfer" = '' THEN
        ERROR(Text075);

      IF pwOrigen = 0 THEN  //. Facturar la comision al proveedor
        _GetProveedor;
    END;

    PROCEDURE Inicializar_Variables@17();
    BEGIN
      // Inicializar_Variables

      Ingreso      := 1;
      Comisionable := 2;
      Comision     := 3;
      IVAProducto  := 4;
      IVAGuiaVenta := 5;
      IRPF         := 6;
      AdultosGV    := 7;
      NinsGV       := 8;

      CLEAR(TablaImportes);
      CLEAR(TablaTotales);
      CLEAR(tab_touroperador);
    END;

    PROCEDURE Calcular_Totales@5();
    VAR
      i@1103355000 : Integer;
    BEGIN
      // Calcular_Totales

      i := 1;
      WHILE (TablaImportes[Ingreso][i] <> 0) OR (tab_touroperador[i] <> '') DO BEGIN
        TablaTotales[Ingreso]      := TablaTotales[Ingreso] + TablaImportes[Ingreso][i];
        TablaTotales[Comisionable] := TablaTotales[Comisionable] + TablaImportes[Comisionable][i];
        TablaTotales[Comision]     := TablaTotales[Comision] + TablaImportes[Comision][i];
        TablaTotales[IRPF]         := TablaTotales[IRPF] + TablaImportes[IRPF][i];
        TablaTotales[IVAGuiaVenta] := TablaTotales[IVAGuiaVenta] + TablaImportes[IVAGuiaVenta][i];
        TablaTotales[AdultosGV]    := TablaTotales[AdultosGV] + TablaImportes[AdultosGV][i];
        TablaTotales[NinsGV]       := TablaTotales[NinsGV] + TablaImportes[NinsGV][i];
        i := i + 1;
      END;
    END;

    PROCEDURE Mostrar_Totales@6();
    VAR
      Dialogo@1103355000 : Dialog;
      Intro@1103355001 : Text[30];
    BEGIN
      // Mostrar_Totales

      Intro := Text016;
      TablaTotales[IRPF] := -TablaTotales[IRPF];
      Dialogo.OPEN(Text017 +
              Text018 +
              Text019 +
              Text020 +
              Text021 +
              Text022 +
              '#6######################');

      TablaTotales[Ingreso]      := ROUND(TablaTotales[Ingreso]);
      TablaTotales[Comisionable] := ROUND(TablaTotales[Comisionable]);
      TablaTotales[Comision]     := ROUND(TablaTotales[Comision]);
      TablaTotales[IVAGuiaVenta] := ROUND(TablaTotales[IVAGuiaVenta]);
      TablaTotales[IRPF]         := ROUND(TablaTotales[IRPF]);

      Dialogo.UPDATE(1, TablaTotales[Ingreso]);
      Dialogo.UPDATE(2, TablaTotales[Comisionable]);
      Dialogo.UPDATE(3, TablaTotales[Comision]);
      Dialogo.UPDATE(4, TablaTotales[IVAGuiaVenta]);
      Dialogo.UPDATE(5, TablaTotales[IRPF]);
      Dialogo.INPUT(6, Intro);
      Dialogo.CLOSE;

      TablaTotales[IRPF] := -TablaTotales[IRPF];
    END;

    PROCEDURE Cambiar_Signo_Totales@7();
    BEGIN
      // Cambiar_Signo_Totales

      TablaTotales[Ingreso]      := -TablaTotales[Ingreso];
      TablaTotales[Comisionable] := -TablaTotales[Comisionable];
      TablaTotales[Comision]     := -TablaTotales[Comision];
      TablaTotales[IVAGuiaVenta] := -TablaTotales[IVAGuiaVenta];
      TablaTotales[IRPF]         := -TablaTotales[IRPF];
    END;

    PROCEDURE Buscar_Contrato@9(VAR prConCom@1103355000 : Record 7010142;prRsv@1100217000 : Record 7010162) : Boolean;
    BEGIN
      // Buscar_Contrato

      rPar.FINDFIRST;

      prConCom.RESET;
      prConCom.SETRANGE (Delegacion     , prRsv.Delegacion);
      prConCom.SETRANGE ("Tipo Contrato", prConCom."Tipo Contrato"::"Guia Venta");
      //prConCom.SETRANGE (TourOperador   , prRsv.TourOperador);  // -$057
      prConCom.SETRANGE (Confirmado     , TRUE);

      prConCom.SETRANGE ("Guia Venta", prRsv."Guia Venta");

      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        prConCom.SETFILTER("Fecha inicio contrato", '<=%1', prRsv."Fecha Venta");
        prConCom.SETFILTER("Fecha final contrato" , '>=%1', prRsv."Fecha Venta");
      END
      ELSE
      BEGIN
        prConCom.SETFILTER("Fecha inicio contrato", '<=%1', prRsv."Fecha Excursion");
        prConCom.SETFILTER("Fecha final contrato" , '>=%1', prRsv."Fecha Excursion");
      END;
      IF NOT prConCom.FINDFIRST THEN BEGIN
        prConCom.SETRANGE("Guia Venta", '');
        IF NOT prConCom.FINDFIRST THEN BEGIN
          IF rPar."Busca tarifa por fecha venta" THEN
            ERROR(Text023, prRsv."Guia Venta", prRsv."Fecha Venta")
          ELSE
            ERROR(Text023, prRsv."Guia Venta", prRsv."Fecha Excursion");
          CLEAR(prConCom);
        END;
      END;

      IF prConCom."N§ Contrato compra" = '' THEN
      BEGIN
        IF rPar."Busca tarifa por fecha venta" THEN
          ERROR(Text023, prRsv."Guia Venta", prRsv."Fecha Venta", prRsv.TourOperador)
        ELSE
          ERROR(Text023, prRsv."Guia Venta", prRsv."Fecha Excursion", prRsv.TourOperador);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE Busca_Precio_GV@13(par_cont@1103355000 : Record 7010142;prRsv@1103355001 : Record 7010162;VAR prPrecio@1103355002 : Record 7010152) : Boolean;
    BEGIN
      // Busca_Precio_GV

      rPar.FINDFIRST;

      prPrecio.RESET;
      prPrecio.SETRANGE (Delegacion   , par_cont.Delegacion);
      prPrecio.SETRANGE ("N§ Contrato", par_cont."N§ Contrato compra");
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        prPrecio.SETFILTER("Fecha desde", '<=%1', prRsv."Fecha Venta");
        prPrecio.SETFILTER("Fecha hasta", '>=%1', prRsv."Fecha Venta");
      END
      ELSE
      BEGIN
        prPrecio.SETFILTER("Fecha desde", '<=%1', prRsv."Fecha Excursion");
        prPrecio.SETFILTER("Fecha hasta", '>=%1', prRsv."Fecha Excursion");
      END;
      prPrecio.SETRANGE (Zona         , prRsv."Zona Hotel");
      prPrecio.SETRANGE (Excursion    , prRsv.Producto);
      prPrecio.SETRANGE (Activo       , TRUE);
      prPrecio.SETRANGE (TourOperador , prRsv.TourOperador);  // +$057
      IF prRsv."Reserva a credito" THEN                                                // +$057
        prPrecio.SETRANGE(prPrecio."Tipo venta" , prPrecio."Tipo venta"::Credito)      // +$057
      ELSE                                                                             // +$057
        prPrecio.SETRANGE(prPrecio."Tipo venta" , prPrecio."Tipo venta"::Contado);     // +$057

      IF NOT prPrecio.FINDFIRST THEN
      BEGIN
        prPrecio.SETRANGE(Excursion, '');
        IF NOT prPrecio.FINDFIRST THEN
        BEGIN
          prPrecio.SETRANGE(Excursion, prRsv.Producto);
          prPrecio.SETRANGE(Zona     , '');
          IF NOT prPrecio.FINDFIRST THEN
          BEGIN
            prPrecio.SETRANGE(Excursion, '');
            IF NOT prPrecio.FINDFIRST THEN
            BEGIN
      // +$057 <
              prPrecio.SETRANGE(TourOperador, '');
              prPrecio.SETRANGE(Excursion, prRsv.Producto);
              prPrecio.SETRANGE(Zona , prRsv."Zona Hotel");
              IF NOT prPrecio.FINDFIRST THEN
              BEGIN
                prPrecio.SETRANGE(Excursion, '');
                IF NOT prPrecio.FINDFIRST THEN
                BEGIN
                  prPrecio.SETRANGE(Excursion, prRsv.Producto);
                  prPrecio.SETRANGE(Zona     , '');
                  IF NOT prPrecio.FINDFIRST THEN
                  BEGIN
                    prPrecio.SETRANGE(Excursion, '');
                    IF NOT prPrecio.FINDFIRST THEN
                    BEGIN
      // +$057 >
                      //+$052 <
                      IF rPar."Busca tarifa por fecha venta" THEN
                        ERROR(Text076, prRsv.Producto, prRsv."Fecha Venta", par_cont."N§ Contrato compra",prRsv.TourOperador)
                      ELSE
                        ERROR(Text076, prRsv.Producto, prRsv."Fecha Excursion", par_cont."N§ Contrato compra",prRsv.TourOperador)
                      //+$052 >
                    END;
                  END;
                END;
              END;
              //-$052CLEAR(prPrecio);
            END;
          END;
        END;
      END;

      //-$052IF prPrecio."Orden precio" = 0 THEN
      //-$052  EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE Insertar_Liquidacion@12() : Integer;
    VAR
      rLiquidacion@1103355000 : Record 7010178;
    BEGIN
      // Insertar_Liquidacion

      CLEAR(rLiquidacion);
      rLiquidacion.Fecha                  := TODAY;
      rLiquidacion."Guia Venta"           := rReserva."Guia Venta";
      rLiquidacion."Importe Comision"     := TablaTotales[Comision] + TablaTotales[IVAGuiaVenta];
      rLiquidacion."Importe Venta"        := TablaTotales[Ingreso];
      rLiquidacion."Importe Comisionable" := TablaTotales[Comisionable];
      rLiquidacion."Cod. divisa"          := rReserva.Divisa;
      rLiquidacion."Fecha cambio divisa"  := rReserva."Fecha cambio";
      rLiquidacion."Tipo cambio divisa"   := rReserva."Tipo cambio";
      IF rReserva.GETFILTER("Fecha Venta") <> '' THEN
        rLiquidacion."Filtro Fecha" := rReserva.GETFILTER("Fecha Venta")
      ELSE
        IF rReserva.GETFILTER("Fecha Excursion") <> '' THEN
          rLiquidacion."Filtro Fecha" := rReserva.GETFILTER("Fecha Excursion");
      rLiquidacion.INSERT(TRUE);

      EXIT(rLiquidacion."N§ Liquidacion"); //+$012
    END;

    PROCEDURE Insertar_Previo_Liquidacion@11();
    VAR
      rLiqGV@1103355000 : Record 7010179;
    BEGIN
      // Insertar_Liquidacion_GV

      IF rLiqGV.GET(rReserva."Guia Venta") THEN
        rLiqGV.DELETE;

      CLEAR(rLiqGV."Guia Venta");
      rLiqGV."Guia Venta"           := rReserva."Guia Venta";
      rLiqGV."Ingreso Excursion"    := TablaTotales[Ingreso];
      rLiqGV."Ingreso Comisionable" := TablaTotales[Comisionable];
      rLiqGV."Comision GV"          := TablaTotales[Comision];
      rLiqGV."IVA Guia Venta"       := TablaTotales[IVAGuiaVenta];
      rLiqGV."IRPF Guia Venta"      := -TablaTotales[IRPF];
      rLiqGV.Divisa                 := rReserva.Divisa;
      rLiqGV."Fecha cambio divisa"  := rReserva."Fecha cambio";
      rLiqGV."Tipo cambio divisa"   := rReserva."Tipo cambio";
      rLiqGV.INSERT;
    END;

    PROCEDURE Generar_Factura@15(rContrato@1103355000 : Record 7010142;VAR rCabCompra@1103355001 : Record 38);
    VAR
      rPar@1103355002 : Record 7009700;
      i@1103355004 : Integer;
      ok@1103355005 : Boolean;
      Num@1103355006 : Integer;
      lcRelease@1000000000 : Codeunit 415;
    BEGIN
      // Generar_Factura

      rCabCompra."Document Type" := rCabCompra."Document Type"::Invoice;
      _CheckReasonCode;
      rCabCompra."Reason Code" := 'ATENNEA';
      rCabCompra.INSERT(TRUE);

      IF rConfCmp.FINDFIRST THEN BEGIN
        rConfCmp.TESTFIELD("Posted Invoice Nos.");
        rCabCompra.VALIDATE("Posting No. Series", rConfCmp."Posted Invoice Nos.");
      END;

      rCabCompra.VALIDATE("Posting Date"       , TODAY);
      rCabCompra.VALIDATE("Buy-from Vendor No.", rProveedor."No.");
      rCabCompra."Posting Description" := STRSUBSTNO(Text033 + Text034, rReserva."Guia Venta",
                                                     rReserva.TourOperador);
      rCabCompra.VALIDATE("Vendor Invoice No."       , rCabCompra."No.");
      rCabCompra.VALIDATE("Shortcut Dimension 1 Code", rReserva.Delegacion);
      rCabCompra.VALIDATE("Shortcut Dimension 2 Code", '');
      rCabCompra.MODIFY(TRUE);

      Num := 0;
      i   := 1;
      WHILE (TablaImportes[Ingreso][i] <> 0) OR (tab_touroperador[i] <> '') DO BEGIN
        IF TablaImportes[Comision][i] <> 0 THEN
          Linea_Comision(rCabCompra, TablaImportes[AdultosGV][i], TablaImportes[NinsGV][i], rContrato, Num, i);
        i := i + 1;
      END;

      //+$053 <
      IF rCabCompra.GET(rCabCompra."Document Type", rCabCompra."No.") THEN
        lcRelease.RUN(rCabCompra);
      //+$053 >
    END;

    PROCEDURE Imprimir_Factura@16(rCabCompra@1103355000 : Record 38);
    BEGIN
      // Imprimir_Factura

      rCabCompra.SETRANGE("Document Type", rCabCompra."Document Type"::Invoice);
      rCabCompra.SETRANGE("No."          , rCabCompra."No.");

      REPORT.RUNMODAL(REPORT::"Factura Guia Venta", TRUE, FALSE, rCabCompra);

      rCabCompra.SETRANGE("No.");
      rCabCompra.SETRANGE("Document Type");
    END;

    PROCEDURE Buscar_TTOO@20(TTOO_buscar@1103355000 : Code[10]) : Integer;
    VAR
      i@1103355001 : Integer;
    BEGIN
      // Buscar_ttoo

      i := 0;
      REPEAT
        i := i + 1;
        IF tab_touroperador[i] = '' THEN
          IF TablaImportes[Ingreso][i] = 0 THEN
            tab_touroperador[i] := TTOO_buscar;
      UNTIL (tab_touroperador[i] = TTOO_buscar) OR (i > 150);

      IF i > 150 THEN
        ERROR(Text036 + Text037);

      EXIT(i);
    END;

    PROCEDURE Comision_Reserva@22(par_Reserva@1103355002 : Record 7010162;VAR wComisionGV@1100217000 : Decimal;VAR wPrecioGV@1100217001 : Decimal);
    VAR
      rContGV@1103355004 : Record 7010142;
      rPrecioGV@1103355005 : Record 7010152;
      lrDetEco@1100253002 : Record 7010245;
      lwBaseComision@1100253000 : Decimal;
    BEGIN
      // Comision_Reserva

      IF par_Reserva.Anulada THEN
        EXIT;

      // $046
      //IF par_Reserva.Reembolsada THEN
      //  EXIT;

      //. Si no encontramos el detalle economico es poque no se ha calculado la reserva, por tanto no hay
      //. comision posible
      //+$037
      IF NOT lrDetEco.GET(par_Reserva.Delegacion, par_Reserva."N§ Reserva") THEN
        EXIT;

      IF NOT Buscar_Contrato(rContGV, par_Reserva) THEN
        EXIT;

      IF NOT Busca_Precio_GV(rContGV, par_Reserva, rPrecioGV) THEN
        EXIT;

      rTTOO.GET(par_Reserva.TourOperador);

      // Tenemos en cuenta los reembolsos
      // $046
      IF rTTOO."Descuento sobre importes" = rTTOO."Descuento sobre importes"::"Sin impuestos" THEN
        lwBaseComision := par_Reserva."Ingreso comisionable neto" - par_Reserva."Importe Reembolsado Neto"
      ELSE
        lwBaseComision := par_Reserva."Ingreso comisionable" - par_Reserva."Importe Reembolsado";

      IF par_Reserva."No comisionable" THEN
      BEGIN     // $045, a¤ado condicion IF
        wComisionGV                      := 0;
        wPrecioGV                        := 0;
        lrDetEco."Comision GV asistente" := 0;
      END
      ELSE BEGIN
        wComisionGV := ROUND(lwBaseComision * rPrecioGV.Precio / 100);
        wPrecioGV   := rPrecioGV.Precio;
        //. Comision como guia asistente que posteriormente se sumara a su guia principal
        lrDetEco."Comision GV asistente" := ROUND(lwBaseComision * rPrecioGV."Comision guia asistente" / 100);
      END;

      lrDetEco.MODIFY;
    END;

    PROCEDURE Buscar_IVA_Compra@25(CIcomision@1103355000 : Decimal;EsIVA@1103355001 : Boolean) : Decimal;
    VAR
      rTO@1103355004 : Record 7009717;
      rCliente@1103355005 : Record 18;
      rConfIVA@1103355006 : Record 325;
      aux_contrato@1103355007 : Code[10];
      aux_importe@1103355008 : Decimal;
      nCon@1103355010 : Code[10];
      rContGV@1103355011 : Record 7010142;
    BEGIN
      // Buscar_IVA_Compra;

      IF NOT Buscar_Contrato(rContGV, rReserva) THEN
        EXIT(0);

      // Buscar el iva compra
      IF NOT rConfIVA.GET(rProveedor."VAT Bus. Posting Group", rContGV."Grupo registro iva prod.") THEN
        EXIT(0);

      IF EsIVA THEN
        EXIT(ROUND(CIcomision * (rConfIVA."VAT %" / 100)))
      ELSE
        EXIT(ROUND(CIcomision * (rProveedor."% IRPF" / 100)));
    END;

    PROCEDURE Linea_Comision@27(rCabCompra@1103355000 : Record 38;AdultosSer@1103355001 : Integer;NinosSer@1103355002 : Integer;rContrato@1103355003 : Record 7010142;VAR Num@1103355004 : Integer;i@1103355005 : Integer);
    VAR
      rLinCompra@1103355006 : Record 39;
      rProducto@1103355007 : Record 7009710;
      ok@1103355008 : Boolean;
    BEGIN
      // Linea_Comision

      Num := Num + 10000;
      CLEAR(rLinCompra);
      rLinCompra.VALIDATE("Document Type", rLinCompra."Document Type"::Invoice);
      rLinCompra.VALIDATE("Document No." , rCabCompra."No.");
      rLinCompra.VALIDATE("Line No."     , Num);
      rLinCompra.VALIDATE(Type           , rLinCompra.Type::"G/L Account");
      rLinCompra.INSERT(TRUE);

      rLinCompra.VALIDATE("No."                      , rCuentas."Cta. compra excursiones");
      rLinCompra.VALIDATE("Buy-from Vendor No."      , rCabCompra."Buy-from Vendor No.");
      rLinCompra.VALIDATE("Shortcut Dimension 1 Code", rCabCompra."Shortcut Dimension 1 Code");
      rLinCompra.VALIDATE("Shortcut Dimension 2 Code", tab_touroperador[i]);
      rLinCompra.VALIDATE("Allow Invoice Disc."      , FALSE);
      rLinCompra.VALIDATE(Quantity                   , 1);
      rLinCompra.Description   := STRSUBSTNO(Text047, AdultosSer);
      IF NinosSer <> 0 THEN
        rLinCompra.Description := rLinCompra.Description + STRSUBSTNO(Text048, NinosSer);

      rLinCompra.VALIDATE("Gen. Bus. Posting Group", rProveedor."Gen. Bus. Posting Group");
      rLinCompra.VALIDATE("VAT Bus. Posting Group" , rProveedor."VAT Bus. Posting Group");
      rLinCompra.VALIDATE("VAT Prod. Posting Group", rContrato."Grupo registro iva prod.");

      importecon := (-1) * (TablaImportes[Comision][i] + TablaImportes[IVAGuiaVenta][i]);
      IF rIVACompra.GET(rProveedor."VAT Bus. Posting Group", rContrato."Grupo registro iva prod.") THEN
        importesin := importecon / (1 + (rIVACompra."VAT+EC %" / 100));
      rLinCompra.VALIDATE("Direct Unit Cost", importesin);
      rLinCompra."Amount Including VAT" := importecon;
      rLinCompra."Line Discount %" := 0;
      rLinCompra.MODIFY(TRUE);
    END;

    PROCEDURE ImprimirLiquidacion@1100253000(VAR prRsv@1100217000 : Record 7010162);
    VAR
      lrResEx@1100253001 : Record 7010162;
      lrTmpFC@1100253002 : TEMPORARY Record 2000000007;
      lwCnt@1100253003 : Integer;
      lwInforme@1100217001 : Integer;
    BEGIN
      // ImprimirLiquidacion

      //. Traemos el registro con los filtros aplicados en la pantalla

      //. Buscamos el numero de informe
      rPar.FINDFIRST;
      rPar.TESTFIELD("Informe Liq Guia venta Exc");
      lwInforme := rPar."Informe Liq Guia venta Exc";

      // Se imprime uno por cada fecha de cambio

      // Temporal Fecha de Cambio
      CLEAR(lrTmpFC);
      lrTmpFC.DELETEALL;

      lrResEx.COPY(prRsv);
      lrResEx.SETRANGE("Guia Venta", prRsv."Guia Venta");
      IF lrResEx.FINDSET THEN BEGIN
        REPEAT
          // Creamos un temporal por cada fecha de cambio
          lrTmpFC.SETRANGE("Period Start", lrResEx."Fecha cambio");
          IF NOT lrTmpFC.FINDFIRST THEN BEGIN
            lrTmpFC."Period Start" := lrResEx."Fecha cambio";
            lrTmpFC.INSERT;
          END;
        UNTIL lrResEx.NEXT = 0;
      END;

      // Por cada fecha de cambio
      CLEAR(lrTmpFC);
      IF lrTmpFC.FINDSET THEN BEGIN
        lwCnt := lrTmpFC.COUNT;
        IF lwCnt > 1 THEN
          MESSAGE(Text057, lwCnt);
        REPEAT
          lrResEx.SETRANGE("Fecha cambio", lrTmpFC."Period Start");
          REPORT.RUN(lwInforme, TRUE, TRUE, lrResEx);
        UNTIL lrTmpFC.NEXT = 0;
      END;
    END;

    PROCEDURE ReImprimirLiquidacion@1100253001(pwNumLiquidacion@1100253000 : Integer);
    VAR
      lrResEx@1100253001 : Record 7010162;
      lrLiq@1100253004 : Record 7010178;
      lRpLiqGOC@1100253002 : Report 7010140;
      lRpLiqCNT@1100217000 : Report 7010188;
      lwOk@1100253003 : Boolean;
    BEGIN
      // ReImprimirLiquidacion

      rPar.FINDFIRST;
      rPar.TESTFIELD("Informe Liq Guia venta Exc");

      // Imprimimos tambien el report de detalle de liquidaci¢n
      CLEAR(lrLiq);
      lrLiq.SETRANGE("N§ Liquidacion", pwNumLiquidacion);
      IF lrLiq.FINDFIRST THEN
        REPORT.RUN(7009739, TRUE, TRUE, lrLiq);

      CLEAR(lrResEx);
      lrResEx.SETCURRENTKEY("Guia Venta", "N§ Ticket", "Liquidado GV", "N§ liquidacion GV", "N§ liquidacion GV reembolso");
      lrResEx.SETRANGE("N§ liquidacion GV", pwNumLiquidacion);
      lwOk := lrResEx.FINDFIRST;

      IF NOT lwOk THEN BEGIN
        lrResEx.SETRANGE("N§ liquidacion GV");
        lrResEx.SETRANGE("N§ liquidacion GV reembolso", pwNumLiquidacion);
        lwOk := lrResEx.FINDFIRST;
      END;

      IF lwOk THEN BEGIN
        CASE rPar."Informe Liq Guia venta Exc" OF
          7010188:
          BEGIN
            lRpLiqCNT.SETTABLEVIEW(lrResEx);
            lRpLiqCNT.RUN;
          END;
          7010140:
          BEGIN
            lRpLiqGOC.EsReimpresion(TRUE, pwNumLiquidacion);
            lRpLiqGOC.SETTABLEVIEW(lrResEx);
            lRpLiqGOC.RUN;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE _InsertaLineaDiario@1100253011(pwNumLiquidacion@1100253000 : Integer;pwTipoMov@1100253001 : 'Cuenta,Cliente,Proveedor,Banco,Activo,Empresa vinculada asociada';pwNumCuenta@1100253002 : Code[20];pwFormaPago@1100253003 : Code[10];pwDivisa@1100253004 : Code[10];pwImporte@1100253005 : Decimal;pwDebeHaber@1100253009 : 'Debe,Haber';pwDescripcion@1100253010 : Text[80];pwFactorDivisa@1100253012 : Decimal);
    VAR
      lrLin@1100253011 : Record 81;
      lwLibro@1100253006 : Code[10];
      lwSecc@1100253007 : Code[10];
    BEGIN
      // _InsertaLineaDiario

      lwLibro := _BuscaLibroDiario;

      IF rDatIns."Empresa Real" = rDatIns."Empresa Real"::GOC THEN
        lwSecc  := COPYSTR(UPPERCASE(USERID), 1, 10) //+$007
      ELSE
        lwSecc  := Text066;

      _BuscaSeccionDiario(lwLibro, lwSecc);

      // Si es negativo giramos el asiento
      IF pwImporte < 0 THEN BEGIN
        pwDebeHaber := ABS(pwDebeHaber-1);
        pwImporte   := ABS(pwImporte);
      END;

      CLEAR(lrLin);
      lrLin."Line No."              := _LastGLLine(lwLibro,lwSecc) +1;
      lrLin."Journal Template Name" := lwLibro;
      lrLin."Journal Batch Name"    := lwSecc;
      lrLin."System-Created Entry"  := TRUE; //+$038 //+$040

      //-$008lrLin.VALIDATE("Posting Date", pwFecha);
      //-$010lrLin.VALIDATE("Posting Date", TODAY); //$008
      lrLin.VALIDATE("Posting Date", WORKDATE); //$010

      lrLin."Transaction No."       := pwNumLiquidacion;
      lrLin."Document Type"         := lrLin."Document Type"::Payment;
      lrLin."Document No."          := STRSUBSTNO('LIQ%1', pwNumLiquidacion);
      lrLin.VALIDATE("Account Type", pwTipoMov);
      lrLin.VALIDATE("Account No." , pwNumCuenta);
      IF pwFormaPago <> '' THEN
        lrLin.Description := pwDescripcion
      ELSE
        lrLin.Description := pwDescripcion;
      lrLin.VALIDATE("Currency Code" , pwDivisa);

      CASE pwDebeHaber OF
        pwDebeHaber::Debe : lrLin.VALIDATE("Debit Amount" , pwImporte);
        pwDebeHaber::Haber: lrLin.VALIDATE("Credit Amount", pwImporte);
      END;
      lrLin.VALIDATE("Shortcut Dimension 1 Code", wCodDim1);
      lrLin."Posting Group"             :='';
      lrLin."Gen. Bus. Posting Group"   :='';
      lrLin."Gen. Prod. Posting Group"  :='';
      lrLin."VAT Bus. Posting Group"    :='';
      lrLin."VAT Prod. Posting Group"   :='';

      //+$008
      IF pwDivisa <> '' THEN
        lrLin.VALIDATE("Currency Factor", pwFactorDivisa);
      //+$008

      lrLin."Source Code"   := rPar.GetSourceCode(lrLin."Journal Template Name"); //+056
      lrLin.INSERT(TRUE);
    END;

    LOCAL PROCEDURE _BuscaLibroDiario@1100253012() : Code[10];
    VAR
      lrDiaG@1100253000 : Record 80;
    BEGIN
      // _BuscaLibroDiario

      CLEAR(lrDiaG);
      lrDiaG.SETRANGE(Type     , lrDiaG.Type::General);
      lrDiaG.SETRANGE(Recurring, FALSE);
      lrDiaG.FINDFIRST;

      EXIT(lrDiaG.Name);
    END;

    LOCAL PROCEDURE _BuscaSeccionDiario@1100253013(pwLibroDiario@1100253000 : Code[10];pwSeccion@1100253001 : Code[10]);
    VAR
      lrSec@1100253002 : Record 232;
    BEGIN
      // _BuscaSeccionDiario

      CLEAR(lrSec);
      IF NOT lrSec.GET(pwLibroDiario, pwSeccion) THEN BEGIN
        CLEAR(lrSec);
        lrSec."Journal Template Name" := pwLibroDiario;
        lrSec.Name                    := pwSeccion;
        lrSec.Description             := pwSeccion;
        lrSec.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE _LastGLLine@1100253021(pwLibroDiario@1100253002 : Code[10];pwSeccion@1100253001 : Code[10]) : Integer;
    VAR
      lrLin@1100253000 : Record 81;
    BEGIN
      // _LastGLLine

      CLEAR(lrLin);
      lrLin.SETRANGE("Journal Template Name", pwLibroDiario);
      lrLin.SETRANGE("Journal Batch Name"   , pwSeccion);
      IF lrLin.FINDLAST THEN
        EXIT(lrLin."Line No.")
    END;

    LOCAL PROCEDURE _CalcularImportes@1100253004(VAR FechaDesde@1100253000 : Date;VAR FechaHasta@1100253001 : Date);
    VAR
      rReserva2@1100253002 : Record 7010162;
      rReserva3@1100253004 : Record 7010162;
      lrCobro@1100217000 : Record 7010240;
      lwTipoCambio@1100253003 : Decimal;
      lwComision@1100253006 : Decimal;
      lwIVAVenta@1100253008 : Decimal;
      lwReimpresion@1100253011 : Code[10];
      i@1100253005 : Integer;
      lwNumLiquidacion@1100253012 : Integer;
    BEGIN
      // _CalcularImportes

      //. Creada por: AJS
      //. Creada dia: 18.01.2011
      //. Acumular los ingresos de las reservas

      FechaDesde := rReserva."Fecha Excursion";

      rReserva2.COPY(rReserva);

      //+$018
      lwReimpresion := rReserva.GETFILTER("N§ liquidacion GV");
      IF lwReimpresion = '' THEN
        lwReimpresion := rReserva.GETFILTER("N§ liquidacion GV reembolso");
      IF lwReimpresion <> '' THEN
        EVALUATE(lwNumLiquidacion, lwReimpresion)
      ELSE
        lwNumLiquidacion := 0;
      //+$018

      rReserva2.SETRANGE("Cobros con problemas", FALSE); //+$027
      IF lwReimpresion = '' THEN
        rReserva2.SETRANGE(Reembolsada, FALSE);
      IF rReserva2.FINDSET THEN
      BEGIN
        lwTipoCambio := rReserva2."Tipo cambio";
        REPEAT
          IF (rReserva2."N§ liquidacion GV" = 0) AND (NOT rReserva2.Anulada) THEN
          BEGIN
            rReserva2.calcular_reserva(FALSE);
            rReserva2.MODIFY;
          END;

          IF NOT rReserva2.Anulada THEN
          BEGIN
            //+$049 <
            IF rReserva2."Hotel Cliente" = '' THEN
              ERROR(Text074);
            //+$049 >

            //. Limitamos que en una misma liquidacion solo pueda haber reservas con el mismo tipo de cambio divisa
            IF rReserva2."Tipo cambio" <> lwTipoCambio THEN
              ERROR(Text015);

            //+$050 <
            IF (rReserva2.Adultos = 0) AND (rReserva2.Ni¤os = 0) THEN
              ERROR(Text072, rReserva2."N§ Ticket");
            //+$050 >
          END;

          IF rReserva2."Fecha Excursion" < FechaDesde THEN
            FechaDesde := rReserva2."Fecha Excursion";
          IF rReserva2."Fecha Excursion" > FechaHasta THEN
            FechaHasta := rReserva2."Fecha Excursion";

          rReserva3 := rReserva2;

          i := Buscar_TTOO(rReserva2.TourOperador);

          CLEAR(lwComision);

          IF NOT rReserva2.Reembolsada OR (rReserva2."N§ liquidacion GV" = lwNumLiquidacion) THEN
          BEGIN //+$018
            //-$028lwReemb := rReserva2.GetReembolso(rReserva2.Divisa,0); // Reembolso en la divisa de la reserva
            //-$028TablaImportes[Ingreso][i]      -= lwReemb;
            //-$028TablaImportes[Comisionable][i] -= lwReemb;
            //-$028lwImp := - lwReemb;

            //+$028 <
            TablaImportes[Ingreso][i]      += rReserva2."Ingreso reserva";
            TablaImportes[Comisionable][i] += rReserva2."Ingreso comisionable";
            lwComision                     += rReserva2."Comision Guia Venta";
            TablaImportes[AdultosGV][i]    += rReserva2.Adultos;
            TablaImportes[NinsGV][i]       += rReserva2.Ni¤os;
            //+$028 >
          END;

          IF lwComision <> 0 THEN
          BEGIN
            TablaImportes[Comision][i]     := TablaImportes[Comision][i]     + lwComision;
            TablaImportes[IVAGuiaVenta][i] := TablaImportes[IVAGuiaVenta][i] + Buscar_IVA_Compra(lwComision, TRUE);
            TablaImportes[IRPF][i]         := TablaImportes[IRPF][i]         + Buscar_IVA_Compra(lwComision, FALSE);
          END;
        UNTIL rReserva2.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _CalcularImportesReembolsos@1000000000(VAR FechaDesde@1100253000 : Date;VAR FechaHasta@1100253001 : Date);
    VAR
      rReserva2@1100253002 : Record 7010162;
      lrCobro@1100217000 : Record 7010240;
      rReemb@1000000000 : Record 7010266;
      lwTipoCambio@1100253003 : Decimal;
      lwCIComision@1100253006 : Decimal;
      lwIVAVenta@1100253008 : Decimal;
      lwReimpresion@1100253011 : Code[10];
      i@1100253005 : Integer;
      lwNumLiquidacion@1100253012 : Integer;
    BEGIN
      // _CalcularImportesReembolsos

      //. Creada por: ARM
      //. Creada dia: 29.07.2014
      //. Acumular los reembolsos de las reservas

      lwReimpresion := rReserva.GETFILTER("N§ liquidacion GV");
      IF lwReimpresion = '' THEN
        lwReimpresion := rReserva.GETFILTER("N§ liquidacion GV reembolso");
      IF lwReimpresion <> '' THEN
        EVALUATE(lwNumLiquidacion, lwReimpresion)
      ELSE
        lwNumLiquidacion := 0;

      rReemb.RESET;
      rReemb.SETRANGE("Guia Venta"       , rReserva."Guia Venta"); //+$054
      //-$054rReemb.SETRANGE("Fecha Reembolso"  , FechaDesde, FechaHasta);
      rReserva.COPYFILTER("Fecha Venta", rReemb."Fecha venta");
      rReemb.SETRANGE("N§ liquidacion GV", lwNumLiquidacion); //+$054
      IF rReemb.FINDSET THEN
      BEGIN
        REPEAT
          rReserva2.RESET;
          IF rReserva2.GET(rReemb.Delegacion, rReemb."Num Reserva") THEN
          BEGIN
            rReemb.CALCFIELDS("Importe Reembolsado");
            i := Buscar_TTOO(rReserva2.TourOperador);

            CLEAR(lwCIComision);

            TablaImportes[Ingreso][i]      -= rReemb."Importe Reembolsado";
            TablaImportes[Comisionable][i] -= rReemb."Importe Reembolsado";

            TablaImportes[AdultosGV][i]    := TablaImportes[AdultosGV][i] - rReemb."Adultos Reembolsados";
            TablaImportes[NinsGV][i]       := TablaImportes[NinsGV][i] - rReemb."Ni¤os Reembolsados";
          END;
        UNTIL rReemb.NEXT = 0;
      END;
    END;

    PROCEDURE VerificarSetupContable@1100253003(VAR prRsv@1100253000 : Record 7010162);
    VAR
      lrSetupContable@1100253001 : Record 7010242;
      lrCobro@1100253002 : Record 7010240;
      lrCobro2@1100217000 : Record 7010240;
    BEGIN
      // VerificarSetupContable

      //. Comprobamos que exista un registro de setup contable para todos los tipos de cobro y divisas
      //. de las reservas filtradas

      IF prRsv.FINDSET THEN BEGIN
        REPEAT
          _CheckSuplementoAutorizado(prRsv); //+$025

          lrCobro.SETRANGE(Delegacion   , prRsv.Delegacion);
          lrCobro.SETRANGE("Num Reserva", prRsv."N§ Reserva");
          IF lrCobro.FINDSET THEN BEGIN
            REPEAT
              IF NOT prRsv.Anulada THEN
              BEGIN
                //. Comprobamos si la linea de cobro esta sin importe recibido, en ese caso la borramos
                IF (lrCobro."Importe Recibido" = 0) THEN
                BEGIN
                  lrCobro2 := lrCobro;
                  lrCobro2.DELETE;
                END
                ELSE
                BEGIN
                  //. Comprobamos si la linea de cobros esta sin forma de pago
                  IF lrCobro."Forma de Pago" = '' THEN
                    ERROR(Text064, prRsv."N§ Ticket");

                  lrSetupContable.SETRANGE(Representante  , prRsv."Guia Venta");
                  lrSetupContable.SETRANGE("Forma de Pago", lrCobro."Forma de Pago");
                  lrSetupContable.SETRANGE(Divisa         , lrCobro."Cod. Divisa");
                  lrSetupContable.FINDFIRST;

                  lrSetupContable.TESTFIELD("Codigo Banco");
                END;
              END;
            UNTIL lrCobro.NEXT = 0;
          END;
        UNTIL prRsv.NEXT = 0;
      END;
    END;

    PROCEDURE RegistrarLiquidacion@1100253005(pwGuiaVenta@1100253000 : Code[20];VAR preResExc@1100253018 : Record 7010162);
    VAR
      lrConfCont@1100253001 : Record 98;
      lrResEx@1100253002 : Record 7010162;
      lrResEx2@1100253020 : Record 7010162;
      lrCobro@1100253009 : Record 7010240;
      lrRepEx@1100253003 : Record 7010241;
      lrCustomer@1100253004 : Record 18;
      lrTMPFechaCambio@1100253005 : TEMPORARY Record 2000000007;
      lrTMPFechaExc@1100253008 : TEMPORARY Record 2000000007;
      lrTMPImpCobro@1100253007 : TEMPORARY Record 7010240;
      lrExc@1100253024 : Record 7009710;
      lrReemb@1000000001 : Record 7010266;
      lrReembCobro@1000000000 : Record 7010267;
      lcFacRsv@1100217000 : Codeunit 7010140;
      lwUltTicket@1100253006 : Code[10];
      lwImporteRsv@1100253010 : Decimal;
      lwImporteCobro@1100253011 : Decimal;
      lwTotalCobroDL@1100253013 : Decimal;
      lwTotalVentaDL@1100253014 : Decimal;
      lwVentaDivCli@1100253015 : Decimal;
      lwVentaCliDL@1100217001 : Decimal;
      lwImpDivCli@1100253023 : Decimal;
      lwNumLiq@1100253012 : Integer;
      lwFecha@1100253016 : Date;
      lwMesVenta@1100253017 : Date;
      lwFiltGrp@1100253019 : Integer;
      lwCobroReserva@1100217002 : Decimal;
    BEGIN
      // RegistrarLiquidacion
      // $019

      CLEAR(rDatIns);
      rDatIns.FINDFIRST;

      rPar.RESET;
      rPar.FINDFIRST;

      IF rPar."Facturar tickets x fecha venta" THEN
      BEGIN
        IF preResExc.GETFILTER("Fecha Venta") = '' THEN
          ERROR(Text070);

        IF NOT CONFIRM(Text069, FALSE, pwGuiaVenta, preResExc.GETFILTER("Fecha Venta")) THEN
          EXIT;
      END
      ELSE
        IF NOT CONFIRM(Text052, FALSE, pwGuiaVenta) THEN
          EXIT;

      lrConfCont.RESET;
      lrConfCont.FINDFIRST;
      lrConfCont.TESTFIELD("LCY Code");

      lrRepEx.RESET;
      lrRepEx.GET(pwGuiaVenta);
      lrRepEx.TESTFIELD("Cliente Facturacion");

      lrCustomer.GET(lrRepEx."Cliente Facturacion");

      //. Limpiamos los temporales de fechas de cambio

      lrTMPFechaCambio.RESET;
      lrTMPFechaCambio.DELETEALL;
      lrTMPFechaExc.RESET;  // $019
      lrTMPFechaExc.DELETEALL;

      //. Vamos a rellenar un temporal por cada fecha de cambio de la divisa de venta de las reservas
      // $019 Otro por cada mes de la fecha de excursion

      CLEAR(lrResEx);
      //-$032lrResEx.COPY(preResExc);
      lrResEx.SETCURRENTKEY("Guia Venta", "N§ Ticket", "Liquidado GV", "N§ liquidacion GV", "N§ liquidacion GV reembolso");
      lrResEx.SETRANGE("Guia Venta"          , pwGuiaVenta);
      lrResEx.SETRANGE("Liquidado GV"        , FALSE);
      lrResEx.SETRANGE(Anulada               , FALSE);
      lrResEx.SETRANGE("Cobros con problemas", FALSE); //+$027
      lrResEx.SETFILTER("N§ Ticket"          , '<>%1', '');

      preResExc.COPYFILTER("Fecha Venta"    , lrResEx."Fecha Venta");
      preResExc.COPYFILTER("Fecha Excursion", lrResEx."Fecha Excursion"); //+$032
      preResExc.COPYFILTER("Fecha cambio"   , lrResEx."Fecha cambio");    //+$032
      lrResEx.FINDSET;

      //. Verificar que la configuracion contable sea correcta y revisar que no haya
      //. cobros con informacion incorrecta
      VerificarSetupContable(lrResEx);

      //. Seleccionamos la dimension departamento
      IF rPar."Oficina Excursion Obligatoria" THEN
        wCodDim1 := lrResEx.Oficina
      ELSE
      BEGIN
        IF preResExc.Oficina <> '' THEN
          wCodDim1 := preResExc.Oficina
        ELSE
        BEGIN
          COMMIT;
          wCodDim1 := lcFacRsv.SeleccionarDepartamento;
        END;
        IF wCodDim1 = '' THEN
          wCodDim1 := lrResEx.Delegacion;
      END;

      //. Buscamos la primera reserva no reembolsada
      lrResEx.SETRANGE(Reembolsada, FALSE);
      IF lrResEx.FINDSET THEN
      BEGIN
        lwMesVenta := PrimDiaMes(lrResEx."Fecha Venta"); //$020 No permitimos mezclar meses distintos de venta (Solo Nexus)

        //+$042 <
        //. Si estamos liquidando por fecha de venta la fecha de trabajo debe estar en el mismo mes que las ventas
        IF rPar."Facturar tickets x fecha venta" THEN
        BEGIN
          IF lwMesVenta <> PrimDiaMes(WORKDATE) THEN
            ERROR(Text073);
        END;
        //+$042 >
      END;

      lrResEx.SETRANGE(Reembolsada);
      lrResEx.FINDSET;
      IF lwMesVenta = 0D THEN
        lwMesVenta := PrimDiaMes(lrResEx."Fecha Venta"); //$020 No permitimos mezclar meses distintos de venta (Solo Nexus)
      REPEAT

        // AJSAJS
        lrTMPFechaCambio.SETRANGE("Period Type" , lrTMPFechaCambio."Period Type"::Date);
        lrTMPFechaCambio.SETRANGE("Period Start", lrResEx."Fecha cambio");
        IF NOT lrTMPFechaCambio.FINDFIRST THEN BEGIN
          lrTMPFechaCambio."Period Type"  := lrTMPFechaCambio."Period Type"::Date;
          lrTMPFechaCambio."Period Start" := lrResEx."Fecha cambio";
          lrTMPFechaCambio.INSERT;
        END;

        // $019
        CLEAR(lrTMPFechaExc);
        lrTMPFechaExc.SETRANGE("Period Type" , lrTMPFechaExc."Period Type"::Month);
        lrTMPFechaExc.SETRANGE("Period Start", PrimDiaMes(lrResEx."Fecha Excursion"));
        IF NOT lrTMPFechaExc.FINDFIRST THEN BEGIN
          lrTMPFechaExc."Period Type"  := lrTMPFechaExc."Period Type"::Month;
          lrTMPFechaExc."Period Start" := PrimDiaMes(lrResEx."Fecha Excursion");
          lrTMPFechaExc.INSERT;
        END;

        // $020
        // Generamos un error si se mezclan distintos meses de venta
        IF rPar."Facturar tickets x fecha venta" THEN
        BEGIN
          IF NOT lrResEx.Reembolsada THEN
            IF lwMesVenta <> PrimDiaMes(lrResEx."Fecha Venta") THEN
              ERROR(Text058);
        END;

        //. Almacenamos el ultimo numero de ticket para guardarlo al terminar la funcion

        lwUltTicket := lrResEx."N§ Ticket";
      UNTIL lrResEx.NEXT = 0;

      // $020
      // No permitimos liquidaciones con fecha de cambio distinta, osea que se divida la liquidaci¢n
      // ya que no cuadraria con el detalle de Liquidacion.
      CLEAR(lrTMPFechaCambio);
      IF lrTMPFechaCambio.COUNT > 1 THEN
        ERROR(Text059);

      // Controlamos que los cobros se correspondan con el detalle de liquidacion introducido a mano
      ControlCobros(pwGuiaVenta, lrResEx);

      //. Recorrer las reservas para acumular los temporales
      //. Hay que hacer un recorrido por cada fecha de cambio que hemos creado en el temporal

      lrTMPFechaCambio.RESET;
      lrTMPFechaCambio.FINDSET;
      CLEAR(lrTMPFechaExc); // $019
      REPEAT

        //+$015
        lrResEx.RESET;
        lrResEx.SETCURRENTKEY("Guia Venta", "N§ Ticket", "Liquidado GV", "N§ liquidacion GV", "N§ liquidacion GV reembolso");
        lrResEx.SETRANGE("Guia Venta"          , pwGuiaVenta);
        lrResEx.SETRANGE("Liquidado GV"        , FALSE);
        lrResEx.SETRANGE(Anulada               , FALSE);
        lrResEx.SETRANGE("Fecha cambio"        , lrTMPFechaCambio."Period Start");
        lrResEx.SETRANGE("Cobros con problemas", FALSE); //+$027
        lrResEx.SETFILTER("N§ Ticket"          , '<>%1', '');

        preResExc.COPYFILTER("Fecha Venta", lrResEx."Fecha Venta");

        //+$015
        IF lrResEx.FINDFIRST THEN
        BEGIN
          //. Revisamos y recalculamos las reservas
          Facturar(lrResEx, 2);

          //. Insertamos el registro de liquidacion
          lwNumLiq := Insertar_Liquidacion;

          //. Guardamos en otro apuntador los filtro de reservas
          lrResEx2.COPY(lrResEx);

          //. Marcamos las lineas de detalle de liquidacion
          MarcarDetalleCobro(pwGuiaVenta, lwNumLiq); //$020

          //. El temporal de fechas de excursion nos sirve para crear un asiento en funcion del mes
          //. en que se va a realizar la excursion
          IF lrTMPFechaExc.FINDSET THEN BEGIN
            REPEAT
              //. Limpiamos los temporales de importes

              lrTMPImpCobro.RESET;
              lrTMPImpCobro.DELETEALL;

              //. Limpiamos los totales de ventas y cobros en divisa local

              lwTotalCobroDL := 0;
              lwTotalVentaDL := 0;
              lwVentaDivCli  := 0;
              lwVentaCliDL   := 0;

              // $019
              lwFecha := lrTMPFechaExc."Period Start";
              // Cambiamos el grupo de filtrado para no eliminar otros posibles filtros del mismo campo mas restrictivos
              lwFiltGrp := lrResEx.FILTERGROUP;
              lrResEx.FILTERGROUP(5);
              lrResEx.SETRANGE("Fecha Excursion", lwFecha, UltDiaMes(lwFecha));
              lrResEx.FILTERGROUP(lwFiltGrp);
              IF lrResEx.FINDSET THEN
              BEGIN
                REPEAT
                  lwImporteRsv := 0;
                  lwCobroReserva := 0; //+$043

                  IF lrResEx.Reembolsada THEN
                  BEGIN
                    lrReemb.RESET;
                    lrReemb.SETRANGE(Delegacion    , lrResEx.Delegacion);
                    lrReemb.SETRANGE("Num Reserva" , lrResEx."N§ Reserva");
                    lrReemb.SETRANGE("Liquidado GV", FALSE);
                    IF lrReemb.FINDSET THEN
                    BEGIN
                      REPEAT
                        lrReembCobro.RESET;
                        lrReembCobro.SETRANGE(Delegacion    , lrReemb.Delegacion);
                        lrReembCobro.SETRANGE("Num Reserva" , lrReemb."Num Reserva");
                        lrReembCobro.SETRANGE("Id Reembolso", lrReemb."ID Reembolso");
                        IF lrReembCobro.FINDSET THEN
                        BEGIN
                          REPEAT
                            lrTMPImpCobro.RESET;
                            lrTMPImpCobro.SETRANGE("Forma de Pago"     , lrReembCobro."Forma de Pago");
                            lrTMPImpCobro.SETRANGE("Cod. Divisa"       , lrReembCobro."Cod. Divisa");
                            lrTMPImpCobro.SETRANGE("Fecha cambio cobro", lrResEx."Fecha cambio");
                            IF NOT lrTMPImpCobro.FINDFIRST THEN
                            BEGIN
                              CLEAR(lrTMPImpCobro);
                              lrTMPImpCobro."ID Cobro"           := lrReembCobro."ID Cobro";
                              lrTMPImpCobro."Num Reserva"        := lrReembCobro."Num Reserva";
                              lrTMPImpCobro."Forma de Pago"      := lrReembCobro."Forma de Pago";
                              lrTMPImpCobro."Cod. Divisa"        := lrReembCobro."Cod. Divisa";
                              lrTMPImpCobro."Fecha cambio cobro" := lrResEx."Fecha cambio";
                              lrTMPImpCobro.INSERT;
                            END;
                            lrTMPImpCobro.Importe -= lrReembCobro.Importe;
                            lrTMPImpCobro.MODIFY;

                            lwTotalCobroDL -= rTipCam.ExchangeAmtFCYToFCY(lrResEx."Fecha cambio",
                                                                          lrReembCobro."Cod. Divisa", '', lrReembCobro.Importe);
                          UNTIL lrReembCobro.NEXT = 0;
                        END;
                        lrReemb.CALCFIELDS("Importe Reembolsado");
                        lwImporteRsv := (-1) * lrReemb."Importe Reembolsado";
                      UNTIL lrReemb.NEXT = 0;
                    END;
                  END
                  ELSE
                  BEGIN
                    //. Acumulamos el importe de los cobros
                    lrCobro.SETRANGE(Delegacion   , lrResEx.Delegacion);
                    lrCobro.SETRANGE("Num Reserva", lrResEx."N§ Reserva");
                    IF lrCobro.FINDSET THEN
                    BEGIN
                      REPEAT
                        lwImporteCobro := lrCobro."Importe Recibido";

                        lrTMPImpCobro.RESET;
                        lrTMPImpCobro.SETRANGE("Forma de Pago"     , lrCobro."Forma de Pago");
                        lrTMPImpCobro.SETRANGE("Cod. Divisa"       , lrCobro."Cod. Divisa");
                        lrTMPImpCobro.SETRANGE("Fecha cambio cobro", lrCobro."Fecha cambio cobro");
                        IF lrTMPImpCobro.FINDFIRST THEN
                        BEGIN
                          lrTMPImpCobro.Importe += lwImporteCobro;
                          lrTMPImpCobro.MODIFY;
                        END
                        ELSE
                        BEGIN
                          lrTMPImpCobro."ID Cobro"           := lrCobro."ID Cobro";
                          lrTMPImpCobro."Num Reserva"        := lrCobro."Num Reserva";
                          lrTMPImpCobro."Forma de Pago"      := lrCobro."Forma de Pago";
                          lrTMPImpCobro."Cod. Divisa"        := lrCobro."Cod. Divisa";
                          lrTMPImpCobro."Fecha cambio cobro" := lrCobro."Fecha cambio cobro";
                          lrTMPImpCobro.Importe              := lwImporteCobro;
                          lrTMPImpCobro.INSERT;
                        END;

                        lwTotalCobroDL += rTipCam.ExchangeAmtFCYToFCY(lrCobro."Fecha cambio cobro",
                                                                      lrCobro."Cod. Divisa", '', lwImporteCobro);

                        lwCobroReserva += lrCobro."Importe Divisa Reserva"; //+$043
                      UNTIL lrCobro.NEXT = 0;
                    END
                    ELSE
                      CLEAR(lrCobro); //+$041

                    //. Controlamos que la reserva se haya cobrado (algo)
                    IF (lwCobroReserva = 0) AND (lrResEx."Ingreso reserva" <> 0) THEN
                      ERROR(Text051, lrResEx."N§ Reserva");

                    //+$043 <
                    // $023 Comprobamos que el importe de cobros no sea inferior a la reserva
                    //. Permitimos una diferencia de uno solo para CNT
                    CASE rDatIns."Empresa Real" OF
                      rDatIns."Empresa Real"::CNT:
                      BEGIN
                        IF lwCobroReserva < (lrResEx."Ingreso reserva" - 1) THEN
                          ERROR(Text061, lwCobroReserva, lrResEx."N§ Ticket", lrResEx."Ingreso reserva");
                      END
                      ELSE
                      BEGIN
                        IF lwCobroReserva < lrResEx."Ingreso reserva" THEN
                          ERROR(Text061, lwCobroReserva, lrResEx."N§ Ticket", lrResEx."Ingreso reserva");
                      END;
                    END;
                    //+$043 >

                    lwImporteRsv := lrResEx."Ingreso reserva"
                  END;

                  lwTotalVentaDL += rTipCam.ExchangeAmtFCYToFCY(lrResEx."Fecha cambio", lrResEx.Divisa, '', lwImporteRsv);

                  //. CNT tiene una divisa de venta y una divisa de facturacion que en realidad es la misma, por tanto no
                  //. debemos generar conversion entre tipos de cambio
                  //+$033 <
                  IF COPYSTR(lrResEx.Divisa, 1, 2) <> COPYSTR(lrCustomer."Currency Code", 1, 2) THEN
                    lwImpDivCli := rTipCam.ExchangeAmtFCYToFCY(lrResEx."Fecha cambio", lrResEx.Divisa,
                                                               lrCustomer."Currency Code", lwImporteRsv)
                  ELSE
                    lwImpDivCli := lwImporteRsv;

                  //. El asiento por diferencias entre la divisa de venta y la divisa de facturacion
                  //. no se aplicar  si el cliente del guia es en divisa local
                  IF (lrCustomer."Currency Code" <> '') AND
                     (lrCustomer."Currency Code" <> lrConfCont."LCY Code") THEN  //+$039
                    lwVentaCliDL  += rTipCam.ExchangeAmtFCYToFCY(WORKDATE, lrCustomer."Currency Code",
                                                                 '', lwImporteRsv)
                  ELSE
                    lwVentaCliDL  += rTipCam.ExchangeAmtFCYToFCY(lrResEx."Fecha cambio", lrResEx.Divisa, '', lwImporteRsv);
                  //+$033 >

                  lwVentaDivCli += lwImpDivCli;

                UNTIL lrResEx.NEXT = 0;

                AsientosLiquidacion(pwGuiaVenta, lwNumLiq, lrResEx."Fecha cambio", lrResEx."Tipo cambio",
                                    lrTMPImpCobro, lwTotalVentaDL, lwTotalCobroDL, lwVentaDivCli, lwVentaCliDL,
                                    lrResEx.Divisa, lrTMPFechaExc."Period Start");
              END;
            UNTIL lrTMPFechaExc.NEXT = 0;
          END;

          MarcarReservasLiquidadas(lrResEx2, lrResEx2."Fecha cambio", lwNumLiq);

        END;
      UNTIL lrTMPFechaCambio.NEXT = 0;

      //. Marcamos el representante con el numero de ticket
      lrRepEx."Ultimo Ticket Liquidado" := lwUltTicket;
      lrRepEx.MODIFY;

      MESSAGE(Text053);
    END;

    PROCEDURE AsientosLiquidacion@1100253016(pwGuiaVenta@1100253004 : Code[20];pwNumLiquidacion@1100253007 : Integer;pwFechaCambio@1100253011 : Date;pwTipoCambio@1100253015 : Decimal;VAR prTMPCobros@1100253001 : TEMPORARY Record 7010240;pwTotalVentaDL@1100253002 : Decimal;pwTotalCobroDL@1100253003 : Decimal;pwVenta@1100253010 : Decimal;pwVentaCliDL@1100217000 : Decimal;pwDivisaVenta@1100217001 : Code[10];pwMesExcursion@1100217002 : Date);
    VAR
      lrConf@1100253000 : Record 7010242;
      lrRepEx@1100253008 : Record 7010241;
      lrCustomer@1100253009 : Record 18;
      lrDiv@1100253013 : Record 4;
      lrConfCont@1100253014 : Record 98;
      lwTextoDiario@1100253006 : Text[80];
      lwDiferencia@1100253012 : Decimal;
      lwTipoCambio@1100253005 : Decimal;
    BEGIN
      // AsientosLiquidacion

      //. @pwGuiaVenta     , Guia que estamos liquidando
      //. @pwNumLiquidacion, Numero de liquidacion que utilizamos como numero de documento
      //. @pwFechaCambio   , Fecha de cambio de la divisa de venta
      //. @pwTipoCambio    , Tipo de cambio de las reservas
      //. @prTMPCobros     , Temporal que acumula por Divisa, Fecha cambio cobro y Forma pago
      //. @pwTotalVentaDL  , Total de la venta en divisa local
      //. @pwTotalCobroDL  , Total de los cobros en divisa local
      //. @pwVenta         , Total de la venta en la divisa del cliente
      //. @pwVentaCliDL    , Venta en DL a partir de la divisa del cliente por si se producen diferencias cambiarias
      //. @pwDivisaVenta   , Divisa de la venta, para comprobacion con la divisa del cliente

      lrRepEx.RESET;
      lrRepEx.GET(pwGuiaVenta);
      lrRepEx.TESTFIELD("Cliente Facturacion");

      lrCustomer.GET(lrRepEx."Cliente Facturacion");

      lrConfCont.RESET;
      lrConfCont.FINDFIRST;
      lrConfCont.TESTFIELD("LCY Code");

      //. Linea de diario por cada combinacion de Divisa + Fecha cambio cobro + Forma de pago

      prTMPCobros.RESET;
      IF prTMPCobros.FINDSET THEN BEGIN
        REPEAT
          //. Comprobamos la configuraci¢n
          CLEAR(lrConf);
          lrConf.GET(pwGuiaVenta, prTMPCobros."Forma de Pago", prTMPCobros."Cod. Divisa");
          lrConf.TESTFIELD("Codigo Banco");

          //. Buscamos el tipo de cambio de la divisa del cobro

          lwTipoCambio := rTipCam.ExchangeRate(prTMPCobros."Fecha cambio cobro", prTMPCobros."Cod. Divisa");

          lwTextoDiario := STRSUBSTNO('%1 %2 %3 %4 %5',
                                      pwGuiaVenta, FORMAT(pwMesExcursion, 0, '<Month Text>'), Text050,
                                      prTMPCobros."Forma de Pago", prTMPCobros."Cod. Divisa"); //+$026

          _InsertaLineaDiario(pwNumLiquidacion, 3, lrConf."Codigo Banco", prTMPCobros."Forma de Pago",
                              prTMPCobros."Cod. Divisa", prTMPCobros.Importe, 0, lwTextoDiario, lwTipoCambio);

          // $024
          _AsientoComisionTarjetas(pwNumLiquidacion, prTMPCobros.Importe,prTMPCobros."Forma de Pago",prTMPCobros."Cod. Divisa",
                                   lrConf,  lwTipoCambio);

        UNTIL prTMPCobros.NEXT = 0;
      END;

      //. Contrapartida por el total de la venta
      //. Buscamos el tipo de cambio de la divisa del cliente

      //. CNT tiene una divisa de venta y una divisa de facturacion que en realidad es la misma, por tanto no
      //. debemos generar conversion entre tipos de cambio
      //+$033 <
      IF COPYSTR(pwDivisaVenta, 1, 2) <> COPYSTR(lrCustomer."Currency Code", 1, 2) THEN
        lwTipoCambio := rTipCam.ExchangeRate(pwFechaCambio, lrCustomer."Currency Code")
      ELSE
        lwTipoCambio := rTipCam.ExchangeRate(WORKDATE, lrCustomer."Currency Code");

      lwTextoDiario := STRSUBSTNO('%1 %2', Text055, FORMAT(pwMesExcursion, 0, '<Month Text>'));
      _InsertaLineaDiario(pwNumLiquidacion, 1, lrRepEx."Cliente Facturacion", '', lrCustomer."Currency Code",
                          pwVenta, 1, lwTextoDiario, lwTipoCambio);

      //. Diferencias cobro/venta en Divisa Local

      lwDiferencia := pwTotalVentaDL - pwTotalCobroDL;

      IF lwDiferencia <> 0 THEN BEGIN
        CLEAR(lrDiv);
        lrDiv.GET(lrConfCont."LCY Code");
        lrDiv.TESTFIELD("Realized Losses Acc.");
        lrDiv.TESTFIELD("Realized Gains Acc.");

        lwTextoDiario := STRSUBSTNO('%1 - %2', FORMAT(pwMesExcursion, 0, '<Month Text>'), Text056);
        IF lwDiferencia < 0 THEN BEGIN
          lwDiferencia := ABS(lwDiferencia);
          _InsertaLineaDiario(pwNumLiquidacion, 0, lrDiv."Realized Gains Acc.", '', '', lwDiferencia, 1, lwTextoDiario, pwTipoCambio);
        END
        ELSE BEGIN
          _InsertaLineaDiario(pwNumLiquidacion, 0, lrDiv."Realized Losses Acc.", '', '', lwDiferencia, 0, lwTextoDiario, pwTipoCambio);
        END;
      END;

      //. Diferencias entre la venta en la divisa de venta y la venta en la divisa del cliente
      //$033 <
      lwDiferencia := pwVentaCliDL - pwTotalVentaDL;

      IF lwDiferencia <> 0 THEN BEGIN
        CLEAR(lrDiv);
        lrDiv.GET(lrConfCont."LCY Code");
        lrDiv.TESTFIELD("Realized Losses Acc.");
        lrDiv.TESTFIELD("Realized Gains Acc.");

        lwTextoDiario := STRSUBSTNO('%1 - %2', FORMAT(pwMesExcursion, 0, '<Month Text>'), Text071);

        IF lwDiferencia < 0 THEN BEGIN
          lwDiferencia := ABS(lwDiferencia);
          _InsertaLineaDiario(pwNumLiquidacion, 0, lrDiv."Realized Gains Acc.", '', '', lwDiferencia, 1, lwTextoDiario, pwTipoCambio);
        END
        ELSE BEGIN
          _InsertaLineaDiario(pwNumLiquidacion, 0, lrDiv."Realized Losses Acc.", '', '', lwDiferencia, 0, lwTextoDiario, pwTipoCambio);
        END;
      END;
      //$033 <
    END;

    PROCEDURE MarcarReservasLiquidadas@1100253006(VAR prResExc@1100253000 : Record 7010162;pwFechaCambio@1100253001 : Date;pwNumLiquidacion@1100253002 : Integer);
    VAR
      lrRsv@1100217000 : Record 7010162;
      lrReemb@1000000000 : Record 7010266;
      lrReemb2@1000000002 : Record 7010266;
      lwHayReservas@1000000001 : Boolean;
    BEGIN
      // MarcarReservasLiquidadas

      //. @prRsvExc, Apuntados de las reservas que queremos marcar
      //. @pwFechaCambio, Fecha de cambio que estamos liquidando
      //. @pwNumLiquidacion, Numero de liquidacion para rellenar en las reservas

      lwHayReservas := FALSE;

      //. Vamos a marcar las anuladas con la liquidacion para que no vuelvan a aparecer
      prResExc.SETRANGE(Anulada, TRUE);
      //prResExc.SETRANGE("Fecha cambio");
      IF prResExc.FINDSET THEN
      BEGIN
        lwHayReservas := TRUE;
        //+$036 <
        REPEAT
          lrRsv := prResExc;
          lrRsv.VALIDATE("N§ liquidacion GV"   , pwNumLiquidacion);
          lrRsv.VALIDATE("Fecha Liquidacion GV", TODAY);
          lrRsv.VALIDATE("Liquidado GV"        , TRUE);
          lrRsv.MODIFY;
        UNTIL prResExc.NEXT = 0;
        //+$036 >
      END;
      prResExc.SETRANGE(Anulada);
      prResExc.SETRANGE("Fecha cambio", pwFechaCambio);

      //. Marcar las reservas
      prResExc.SETRANGE("Liquidado GV", FALSE);
      IF prResExc.FINDSET THEN
      //+$036 <
      BEGIN
        lwHayReservas := TRUE;
        REPEAT
          IF prResExc.Reembolsada THEN
          BEGIN
            lrRsv := prResExc;
            lrRsv.VALIDATE("N§ liquidacion GV reembolso"   , pwNumLiquidacion);
            lrRsv.MODIFY;

            lrReemb.RESET;
            lrReemb.SETRANGE(Delegacion    , prResExc.Delegacion);
            lrReemb.SETRANGE("Num Reserva" , prResExc."N§ Reserva");
            lrReemb.SETRANGE("Liquidado GV", FALSE);
            IF lrReemb.FINDSET THEN
            BEGIN
              REPEAT
                lrReemb2 := lrReemb;
                lrReemb2.VALIDATE("N§ liquidacion GV", pwNumLiquidacion);
                lrReemb2.MODIFY;
              UNTIL lrReemb.NEXT = 0;
            END;
          END
          ELSE
          BEGIN
            lrRsv := prResExc;
            lrRsv.VALIDATE("N§ liquidacion GV", pwNumLiquidacion);
            lrRsv.MODIFY;
          END;
        UNTIL prResExc.NEXT = 0;
      END;
      //+$036 >

      IF NOT lwHayReservas THEN
      BEGIN
        MESSAGE(Text054);
        EXIT;
      END;

      // Impresion

      ReImprimirLiquidacion(pwNumLiquidacion);
    END;

    PROCEDURE PrimDiaMes@1100253002(pwFecha@1100253000 : Date) : Date;
    VAR
      lwFecha@1100253001 : Date;
    BEGIN
      // PrimDiaMes
      // $019
      // Devuelve la fecha del primer dia del ms

      lwFecha := DMY2DATE(1,DATE2DMY(pwFecha,2), DATE2DMY(pwFecha,3));
      EXIT(lwFecha);
    END;

    PROCEDURE UltDiaMes@1100253010(pwFecha@1100253001 : Date) : Date;
    VAR
      lwFecha@1100253000 : Date;
    BEGIN
      // UltDiaMes
      // $019
      // Devuelve el ultimo dia del mes
      // La fecha de entrada debe de ser el primer dia del mes

      lwFecha := CALCDATE('+<1M>-<1D>', pwFecha);
      EXIT(lwFecha);
    END;

    PROCEDURE ControlCobros@1100253014(pwGuiaVenta@1100253006 : Code[20];VAR preResExc@1100253000 : Record 7010162);
    VAR
      lrResEx@1100253001 : Record 7010162;
      lrCobro@1100253002 : Record 7010240;
      lrTMPImpCobro@1100253003 : TEMPORARY Record 7010240;
      lrReemb@1000000001 : Record 7010266;
      lrReembCobro@1000000000 : Record 7010267;
      lrDet@1100253005 : Record 7010250;
      lwId@1100253007 : Integer;
    BEGIN
      // ControlCobros
      // $020
      // Controlamos que los totales por divisa de el detalle de liquidacion se corresponda con los cobros
      // Para ello utilizamos temporales

      lrResEx.COPY(preResExc);
      lrResEx.SETRANGE("Cobros con problemas", FALSE); //+$027

      CLEAR(lwId);
      CLEAR(lrTMPImpCobro);
      lrTMPImpCobro.DELETEALL;

      IF lrResEx.FINDSET THEN
      BEGIN
        REPEAT
          //+$048 <
          //. Si la reserva esta reembolsada trabajamos con la tabla de reembolsos
          IF lrResEx.Reembolsada THEN
          BEGIN
            lrReemb.RESET;
            lrReemb.SETRANGE(Delegacion    , lrResEx.Delegacion);
            lrReemb.SETRANGE("Num Reserva" , lrResEx."N§ Reserva");
            lrReemb.SETRANGE("Liquidado GV", FALSE);
            IF lrReemb.FINDSET THEN
            BEGIN
              REPEAT
                lrReembCobro.RESET;
                lrReembCobro.SETRANGE(Delegacion    , lrReemb.Delegacion);
                lrReembCobro.SETRANGE("Num Reserva" , lrReemb."Num Reserva");
                lrReembCobro.SETRANGE("Id Reembolso", lrReemb."ID Reembolso");
                IF lrReembCobro.FINDSET THEN
                BEGIN
                  REPEAT
                    lrTMPImpCobro.SETRANGE("Forma de Pago", lrReembCobro."Forma de Pago");
                    lrTMPImpCobro.SETRANGE("Cod. Divisa"  , lrReembCobro."Cod. Divisa");
                    IF NOT lrTMPImpCobro.FINDFIRST THEN
                    BEGIN
                      lwId +=1;

                      CLEAR(lrTMPImpCobro);
                      lrTMPImpCobro."ID Cobro"      := lwId;
                      lrTMPImpCobro."Forma de Pago" := lrReembCobro."Forma de Pago";
                      lrTMPImpCobro."Cod. Divisa"   := lrReembCobro."Cod. Divisa";
                      lrTMPImpCobro.INSERT;
                    END;
                    lrTMPImpCobro.Importe -= lrReembCobro.Importe;
                    lrTMPImpCobro.MODIFY;
                  UNTIL lrReembCobro.NEXT = 0;
                END;
              UNTIL lrReemb.NEXT = 0;
            END;
          END
          //+$048 >
          ELSE
          BEGIN
            CLEAR(lrCobro);
            lrCobro.SETRANGE(Delegacion   , lrResEx.Delegacion);
            lrCobro.SETRANGE("Num Reserva", lrResEx."N§ Reserva");
            IF lrCobro.FINDSET THEN
            BEGIN
              REPEAT
                lrTMPImpCobro.SETRANGE("Cod. Divisa"  , lrCobro."Cod. Divisa");
                lrTMPImpCobro.SETRANGE("Forma de Pago", lrCobro."Forma de Pago");
                IF NOT lrTMPImpCobro.FINDFIRST THEN
                BEGIN
                  lwId +=1;

                  CLEAR(lrTMPImpCobro);
                  lrTMPImpCobro."ID Cobro"      := lwId;
                  lrTMPImpCobro."Cod. Divisa"   := lrCobro."Cod. Divisa";
                  lrTMPImpCobro."Forma de Pago" := lrCobro."Forma de Pago";
                  lrTMPImpCobro.INSERT;
                END;
                lrTMPImpCobro.Importe += lrCobro."Importe Recibido";
                lrTMPImpCobro.MODIFY;
              UNTIL lrCobro.NEXT = 0;
            END;
          END;
        UNTIL lrResEx.NEXT = 0;
      END;

      CLEAR(lrDet);
      lrDet.SETCURRENTKEY("Guia Venta","N§ Liquidacion");
      lrDet.SETRANGE("Guia Venta"     , pwGuiaVenta);
      lrDet.SETRANGE("N§ Liquidacion" , 0);
      IF lrDet.FINDSET THEN
      BEGIN
        REPEAT
          lrTMPImpCobro.SETRANGE("Forma de Pago", lrDet."Forma de Pago");
          lrTMPImpCobro.SETRANGE("Cod. Divisa"  , lrDet.Divisa);
          IF NOT lrTMPImpCobro.FINDFIRST THEN
          BEGIN
            lwId +=1;

            CLEAR(lrTMPImpCobro);
            lrTMPImpCobro."ID Cobro"      := lwId;
            lrTMPImpCobro."Cod. Divisa"   := lrDet.Divisa;
            lrTMPImpCobro."Forma de Pago" := lrDet."Forma de Pago";
            lrTMPImpCobro.INSERT;
          END;
          lrTMPImpCobro."Importe Recibido" += lrDet.Total;
          lrTMPImpCobro.MODIFY;
        UNTIL lrDet.NEXT=0
      END;

      CLEAR(lrTMPImpCobro);
      IF lrTMPImpCobro.FINDSET THEN
      BEGIN
        REPEAT
          IF lrTMPImpCobro.Importe <> lrTMPImpCobro."Importe Recibido" THEN
          BEGIN
            IF ABS(lrTMPImpCobro.Importe - lrTMPImpCobro."Importe Recibido") > 1 THEN
              ERROR(Text060, lrTMPImpCobro."Cod. Divisa", lrTMPImpCobro."Importe Recibido", lrTMPImpCobro.Importe);
          END;
        UNTIL lrTMPImpCobro.NEXT = 0;
      END;
    END;

    PROCEDURE MarcarDetalleCobro@1100253007(pwGuiaVenta@1100253000 : Code[20];pwNoLiquid@1100253001 : Integer);
    VAR
      lrDet@1100253002 : Record 7010250;
    BEGIN
      // MarcarDetalleCobro
      // $020
      // Se marcan las lineas de detalle de cobro con el numero de liquidacionn

      CLEAR(lrDet);
      lrDet.SETCURRENTKEY("Guia Venta","N§ Liquidacion");
      lrDet.SETRANGE("Guia Venta"     , pwGuiaVenta);
      lrDet.SETRANGE("N§ Liquidacion" , 0);
      lrDet.MODIFYALL("N§ Liquidacion", pwNoLiquid);
    END;

    PROCEDURE AcumulaImporteEntregar@1100217000(VAR prImportesTMP@1100217005 : TEMPORARY Record 7010242;VAR prRsv@1100217003 : Record 7010162);
    VAR
      lrRsv@1100217001 : Record 7010162;
      lrCobro@1100217002 : Record 7010240;
      lrReemb@1000000000 : Record 7010266;
      lrReembCobro@1000000001 : Record 7010267;
      lrCond@1100217000 : Record 7010085;
    BEGIN
      // AcumulaImporteEntregar

      //. Esta funci¢n rellena una tabla temporary de Setup contable Guia Venta con los
      //. importes pendientes de liquidar del guia venta

      prImportesTMP.RESET;
      prImportesTMP.DELETEALL;

      IF NOT lrCond.GET(USERID) THEN
        EXIT;

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("Guia Venta", "N§ Ticket", "Liquidado GV", "N§ liquidacion GV", "N§ liquidacion GV reembolso");
      lrRsv.COPY(prRsv);
      lrRsv.SETRANGE(Anulada               , FALSE);
      lrRsv.SETRANGE("Liquidado GV"        , FALSE);
      lrRsv.SETRANGE("Cobros con problemas", FALSE); //+$027
      IF NOT lrRsv.FINDSET THEN
        EXIT;

      REPEAT
        //+$048 <
        //. Si la reserva esta reembolsada trabajamos con la tabla de reembolsos, sino, con los cobros
        IF lrRsv.Reembolsada THEN
        BEGIN
          lrReemb.RESET;
          lrReemb.SETRANGE(Delegacion    , lrRsv.Delegacion);
          lrReemb.SETRANGE("Num Reserva" , lrRsv."N§ Reserva");
          lrReemb.SETRANGE("Liquidado GV", FALSE);
          IF lrReemb.FINDSET THEN
          BEGIN
            REPEAT
              lrReembCobro.RESET;
              lrReembCobro.SETRANGE(Delegacion    , lrReemb.Delegacion);
              lrReembCobro.SETRANGE("Num Reserva" , lrReemb."Num Reserva");
              lrReembCobro.SETRANGE("Id Reembolso", lrReemb."ID Reembolso");
              IF lrReembCobro.FINDSET THEN
              BEGIN
                REPEAT
                  prImportesTMP.INIT;
                  prImportesTMP.Representante   := lrCond."Guia Venta";
                  prImportesTMP."Forma de Pago" := lrReembCobro."Forma de Pago";
                  prImportesTMP.Divisa          := lrReembCobro."Cod. Divisa";
                  IF NOT prImportesTMP.FIND THEN
                    prImportesTMP.INSERT;
                  prImportesTMP."Importe Total" -= lrReembCobro.Importe;
                  prImportesTMP.MODIFY;
                UNTIL lrReembCobro.NEXT = 0;
              END;
            UNTIL lrReemb.NEXT = 0;
          END;
        END
        //+$048 >
        ELSE
        BEGIN
          lrCobro.SETRANGE(Delegacion   , lrRsv.Delegacion);
          lrCobro.SETRANGE("Num Reserva", lrRsv."N§ Reserva");
          IF lrCobro.FINDSET THEN
          BEGIN
            REPEAT
              prImportesTMP.INIT;
              prImportesTMP.Representante   := lrCond."Guia Venta";
              prImportesTMP."Forma de Pago" := lrCobro."Forma de Pago";
              prImportesTMP.Divisa          := lrCobro."Cod. Divisa";
              IF NOT prImportesTMP.FIND THEN
                prImportesTMP.INSERT;

              //-$048IF lrRsv.Reembolsada THEN
              //-$048  prImportesTMP."Importe Total" -= lrCobro."Importe Recibido"
              //-$048ELSE
              //-$048  prImportesTMP."Importe Total" += lrCobro."Importe Recibido";

              prImportesTMP."Importe Total" += lrCobro."Importe Recibido"; //$048
              prImportesTMP.MODIFY;
            UNTIL lrCobro.NEXT = 0;
          END;
        END;
      UNTIL lrRsv.NEXT = 0;
    END;

    PROCEDURE LlamaDetalleLiquidacion@1100217001(VAR prRsv@1100217000 : Record 7010162);
    VAR
      lrCond@1100217001 : Record 7010085;
      lrDet@1100217002 : Record 7010250;
      lfDetalle@1100217003 : Form 7009898;
    BEGIN
      // LlamaDetalleLiquidacion

      //. Llamar a la ventana de introduccion del detalle de liquidacion
      //. Recoger el filtro de fecha venta para tenerlo en cuenta a la hora de buscar el importe a entregar

      lrCond.RESET;
      IF NOT lrCond.GET(USERID) THEN
      BEGIN
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      lrCond."Guia Venta" := prRsv."Guia Venta";
      lrCond.Fecha        := 0D;
      IF prRsv.GETFILTER("Fecha Venta") <> '' THEN
        lrCond.Fecha := prRsv.GETRANGEMAX("Fecha Venta");
      lrCond.MODIFY;

      COMMIT;

      lrDet.RESET;
      lrDet.SETCURRENTKEY("Guia Venta");
      lrDet.FILTERGROUP(2);
      lrDet.SETRANGE("Guia Venta"    , prRsv."Guia Venta");
      lrDet.SETRANGE("N§ Liquidacion", 0);
      lrDet.FILTERGROUP(0);

      CLEAR(lfDetalle);
      lfDetalle.SETTABLEVIEW(lrDet);
      lfDetalle.PasarParametrosExc(prRsv);
      lfDetalle.RUNMODAL;
    END;

    LOCAL PROCEDURE _AsientoComisionTarjetas@1100217002(pwNumLiquidacion@1100217005 : Integer;pwImporte@1000000000 : Decimal;pwFormaPago@1000000001 : Code[10];pwDivisa@1000000002 : Code[10];prSetupGuia@1100217001 : Record 7010242;pwTipoCambio@1100217002 : Decimal);
    VAR
      lwImpCom@1100217003 : Decimal;
      lwText@1100217004 : Text[250];
    BEGIN
      // _AsientoComisionTarjetas
      // $024

      IF (prSetupGuia."Cta. Contable comisi¢n" = '') OR (prSetupGuia."Porcentaje comisi¢n" = 0) THEN
        EXIT;

      CLEAR(lwImpCom);
      lwImpCom := pwImporte * prSetupGuia."Porcentaje comisi¢n" / 100;
      lwText := STRSUBSTNO(Text062, pwFormaPago, pwDivisa);


      _InsertaLineaDiario(pwNumLiquidacion, 0, prSetupGuia."Cta. Contable comisi¢n", '',
                              pwDivisa, lwImpCom, 0, lwText, pwTipoCambio);

      _InsertaLineaDiario(pwNumLiquidacion, 3, prSetupGuia."Codigo Banco", '', pwDivisa,
                          lwImpCom, 1, lwText, pwTipoCambio);
    END;

    PROCEDURE _CheckSuplementoAutorizado@1100217003(lrRsv@1100217000 : Record 7010162);
    VAR
      lrSupl@1100217001 : Record 7010165;
    BEGIN
      // _CheckSuplementoAutorizado

      lrSupl.RESET;
      lrSupl.SETRANGE(Delegacion              , lrRsv.Delegacion);
      lrSupl.SETRANGE("N§ Reserva"            , lrRsv."N§ Reserva");
      lrSupl.SETRANGE("Pendiente autorizacion", TRUE);
      IF NOT lrSupl.ISEMPTY THEN
        ERROR(Text063, lrRsv."N§ Ticket");
    END;

    PROCEDURE ImprimirReciboContado@1100217004(prDetalle@1100217000 : Record 7010250);
    VAR
      lrepRecibo@1100217001 : Report 7009739;
      lrLiquidacion@1100217002 : Record 7010178;
      lrRep@1100217003 : Record 7010241;
      lrRsv@1100217004 : Record 7010162;
    BEGIN
      // ImprimirReciboContado

      IF NOT lrRep.GET(prDetalle."Guia Venta") THEN
        EXIT;

      IF prDetalle."Fecha creacion" = 0D THEN
        EXIT;

      IF NOT CONFIRM(Text067, FALSE, lrRep.Nombre, prDetalle."Fecha creacion") THEN
        EXIT;

      //. Buscamos la primera reserva no liquidada del guia

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("Guia Venta", "N§ Ticket", "Liquidado GV", "N§ liquidacion GV", "N§ liquidacion GV reembolso");
      lrRsv.SETRANGE ("Guia Venta"  , prDetalle."Guia Venta");
      lrRsv.SETRANGE ("Liquidado GV", FALSE);
      lrRsv.SETFILTER("N§ Ticket"   , '<>%1', '');
      lrRsv.SETFILTER("Fecha cambio", '<>%1', 0D);
      IF NOT lrRsv.FINDFIRST THEN
        ERROR(Text068);

      //. Necesitamos que exista un registro de liquidacion 0 para enga¤ar al informe

      IF NOT lrLiquidacion.GET('', 0) THEN
      BEGIN
        CLEAR(lrLiquidacion);
        lrLiquidacion."Guia Venta"     := '';
        lrLiquidacion."N§ Liquidacion" := 0;
        lrLiquidacion.INSERT;
      END;

      lrLiquidacion."Cod. divisa"         := lrRsv.Divisa;
      lrLiquidacion."Fecha cambio divisa" := lrRsv."Fecha cambio";
      lrLiquidacion."Tipo cambio divisa"  := lrRsv."Tipo cambio";
      lrLiquidacion.MODIFY;
      COMMIT;

      CLEAR(lrLiquidacion);
      lrLiquidacion.SETRANGE("Guia Venta"    , '');
      lrLiquidacion.SETRANGE("N§ Liquidacion", 0);

      CLEAR(lrepRecibo);
      lrepRecibo.SetParameters(TRUE, prDetalle."Guia Venta", prDetalle."Fecha creacion");
      lrepRecibo.SETTABLEVIEW(lrLiquidacion);
      lrepRecibo.RUNMODAL;
    END;

    PROCEDURE BuscaPrecioSinReserva@1100217005(pwGuiaVenta@1100217002 : Code[10];pwTouroperador@1100217001 : Code[10];pwFechaVenta@1100217003 : Date;pwFechaExcursion@1100217005 : Date;pwHotel@1100217007 : Code[20];pwExcursion@1100217008 : Code[10]) : Decimal;
    VAR
      lrConCom@1100217000 : Record 7010142;
      lrPrecio@1100217004 : Record 7010152;
      lrHotel@1100217006 : Record 7009724;
    BEGIN
      // BuscaPrecioSinReserva

      rPar.FINDFIRST;

      //. Buscamos el contrato de compra para el guia o el generico de touroperador segun sea la configuracion
      lrConCom.RESET;
      lrConCom.SETRANGE (Delegacion     , rPar.Delegacion);
      lrConCom.SETRANGE ("Tipo Contrato", lrConCom."Tipo Contrato"::"Guia Venta");
      //IF pwTouroperador <> '' THEN                              // -$057
      //  lrConCom.SETRANGE (TourOperador   , pwTouroperador);    // -$057
      lrConCom.SETRANGE (Confirmado     , TRUE);

      IF rPar."Contrato x Guia venta" THEN
        lrConCom.SETRANGE ("Guia Venta", pwGuiaVenta);

      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        lrConCom.SETFILTER("Fecha inicio contrato", '<=%1', pwFechaVenta);
        lrConCom.SETFILTER("Fecha final contrato" , '>=%1', pwFechaVenta);
      END
      ELSE
      BEGIN
        lrConCom.SETFILTER("Fecha inicio contrato", '<=%1', pwFechaExcursion);
        lrConCom.SETFILTER("Fecha final contrato" , '>=%1', pwFechaExcursion);
      END;
      IF NOT lrConCom.FINDFIRST THEN
      BEGIN
        EXIT;
      END;

      //. Buscamos el hotel para obtener la zona fisica
      IF NOT lrHotel.GET(pwHotel) THEN
        CLEAR(pwHotel);

      //. Buscamos el precio dentro del contrato
      lrPrecio.RESET;
      lrPrecio.SETRANGE (Delegacion   , lrConCom.Delegacion);
      lrPrecio.SETRANGE ("N§ Contrato", lrConCom."N§ Contrato compra");
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        lrPrecio.SETFILTER("Fecha desde", '<=%1', pwFechaVenta);
        lrPrecio.SETFILTER("Fecha hasta", '>=%1', pwFechaVenta);
      END
      ELSE
      BEGIN
        lrPrecio.SETFILTER("Fecha desde", '<=%1', pwFechaExcursion);
        lrPrecio.SETFILTER("Fecha hasta", '>=%1', pwFechaExcursion);
      END;

      lrPrecio.SETRANGE (Zona         , lrHotel."Zona Fisica");
      lrPrecio.SETRANGE (Excursion    , pwExcursion);
      lrPrecio.SETRANGE (Activo       , TRUE);
      IF pwTouroperador <> '' THEN
        lrPrecio.SETRANGE (TourOperador   , pwTouroperador);  // +$057
      IF NOT lrPrecio.FINDFIRST THEN
      BEGIN
        lrPrecio.SETRANGE(Excursion, '');
        IF NOT lrPrecio.FINDFIRST THEN
        BEGIN
          lrPrecio.SETRANGE(Excursion, pwExcursion);
          lrPrecio.SETRANGE(Zona     , '');
          IF NOT lrPrecio.FINDFIRST THEN
          BEGIN
            lrPrecio.SETRANGE(Excursion, '');
            IF NOT lrPrecio.FINDFIRST THEN BEGIN
      // +$057 <
              lrPrecio.SETRANGE(TourOperador, '');
              lrPrecio.SETRANGE(Excursion, pwExcursion);
              lrPrecio.SETRANGE(Zona , lrHotel."Zona Fisica");
              IF NOT lrPrecio.FINDFIRST THEN
              BEGIN
                lrPrecio.SETRANGE(Excursion, '');
                IF NOT lrPrecio.FINDFIRST THEN
                BEGIN
                  lrPrecio.SETRANGE(Excursion, pwExcursion);
                  lrPrecio.SETRANGE(Zona     , '');
                  IF NOT lrPrecio.FINDFIRST THEN
                  BEGIN
                    lrPrecio.SETRANGE(Excursion, '');
                    IF NOT lrPrecio.FINDFIRST THEN
                    BEGIN
      // +$057 >
                      CLEAR(lrPrecio);
                    END;
                  END;
                END;
              END;
            END;
          END;
        END;
      END;

      IF lrPrecio."Orden precio" <> 0 THEN
        EXIT(lrPrecio.Precio);
    END;

    PROCEDURE AcumulaImporteEntregarTransfer@1000000002(VAR prImportesTMP@1100217005 : TEMPORARY Record 7010242;VAR prRsv@1100217003 : Record 7009744);
    VAR
      lrRsv@1100217001 : Record 7009744;
      lrCobro@1100217002 : Record 7009927;
      lrReemb@1000000000 : Record 7009928;
      lrReembCobro@1000000001 : Record 7009929;
      lrCond@1100217000 : Record 7010085;
    BEGIN
      // AcumulaImporteEntregarTransfer
      // $051

      //. Esta funci¢n rellena una tabla temporary de Setup contable Guia Venta con los
      //. importes pendientes de liquidar del guia venta seg£n reservas transfer

      prImportesTMP.RESET;
      prImportesTMP.DELETEALL;

      IF NOT lrCond.GET(USERID) THEN
        EXIT;

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("Guia Venta", Bono, "Liquidado GV", "N§ liquidacion GV", "N§ liquidacion GV reembolso");
      lrRsv.COPY(prRsv);
      lrRsv.SETRANGE("Liquidado GV"        , FALSE);
      lrRsv.SETRANGE("Cobros con problemas", FALSE); //+$027
      IF NOT lrRsv.FINDSET THEN
        EXIT;

      REPEAT
        //+$048 <
        //. Si la reserva esta reembolsada trabajamos con la tabla de reembolsos, sino, con los cobros
        IF lrRsv.Reembolsada THEN
        BEGIN
          lrReemb.RESET;
          lrReemb.SETRANGE(Delegacion    , lrRsv.Delegacion);
          lrReemb.SETRANGE("Num Reserva" , lrRsv."N§ Reserva");
          lrReemb.SETRANGE("Liquidado GV", FALSE);
          IF lrReemb.FINDSET THEN
          BEGIN
            REPEAT
              lrReembCobro.RESET;
              lrReembCobro.SETRANGE(Delegacion    , lrReemb.Delegacion);
              lrReembCobro.SETRANGE("Num Reserva" , lrReemb."Num Reserva");
              lrReembCobro.SETRANGE("Id Reembolso", lrReemb."ID Reembolso");
              IF lrReembCobro.FINDSET THEN
              BEGIN
                REPEAT
                  prImportesTMP.INIT;
                  prImportesTMP.Representante   := lrCond."Guia Venta";
                  prImportesTMP."Forma de Pago" := lrReembCobro."Forma de Pago";
                  prImportesTMP.Divisa          := lrReembCobro."Cod. Divisa";
                  IF NOT prImportesTMP.FIND THEN
                    prImportesTMP.INSERT;
                  prImportesTMP."Importe Total" -= lrReembCobro.Importe;
                  prImportesTMP.MODIFY;
                UNTIL lrReembCobro.NEXT = 0;
              END;
            UNTIL lrReemb.NEXT = 0;
          END;
        END
        //+$048 >
        ELSE
        BEGIN
          lrCobro.SETRANGE(Delegacion   , lrRsv.Delegacion);
          lrCobro.SETRANGE("Num Reserva", lrRsv."N§ Reserva");
          IF lrCobro.FINDSET THEN
          BEGIN
            REPEAT
              prImportesTMP.INIT;
              prImportesTMP.Representante   := lrCond."Guia Venta";
              prImportesTMP."Forma de Pago" := lrCobro."Forma de Pago";
              prImportesTMP.Divisa          := lrCobro."Cod. Divisa";
              IF NOT prImportesTMP.FIND THEN
                prImportesTMP.INSERT;

              //-$048IF lrRsv.Reembolsada THEN
              //-$048  prImportesTMP."Importe Total" -= lrCobro."Importe Recibido"
              //-$048ELSE
              //-$048  prImportesTMP."Importe Total" += lrCobro."Importe Recibido";

              prImportesTMP."Importe Total" += lrCobro."Importe Recibido"; //$048
              prImportesTMP.MODIFY;
            UNTIL lrCobro.NEXT = 0;
          END;
        END;
      UNTIL lrRsv.NEXT = 0;
    END;

    PROCEDURE LlamaDetalleLiquidacionTransfe@1000000001(VAR prRsv@1100217000 : Record 7009744);
    VAR
      lrCond@1100217001 : Record 7010085;
      lrDet@1100217002 : Record 7010250;
      lfDetalle@1100217003 : Form 7009898;
    BEGIN
      // LlamaDetalleLiquidacion
      // $051

      //. Llamar a la ventana de introduccion del detalle de liquidacion
      //. Recoger el filtro de fecha venta para tenerlo en cuenta a la hora de buscar el importe a entregar

      lrCond.RESET;
      IF NOT lrCond.GET(USERID) THEN
      BEGIN
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      lrCond."Guia Venta" := prRsv."Guia Venta";
      lrCond.Fecha        := 0D;
      IF prRsv.GETFILTER("Fecha Venta") <> '' THEN
        lrCond.Fecha := prRsv.GETRANGEMAX("Fecha Venta");
      lrCond.MODIFY;

      COMMIT;

      lrDet.RESET;
      lrDet.SETCURRENTKEY("Guia Venta");
      lrDet.FILTERGROUP(2);
      lrDet.SETRANGE("Guia Venta"    , prRsv."Guia Venta");
      lrDet.SETRANGE("N§ Liquidacion", 0);
      lrDet.FILTERGROUP(0);

      CLEAR(lfDetalle);
      lfDetalle.SETTABLEVIEW(lrDet);
      lfDetalle.PasarParametrosTrf(prRsv);
      lfDetalle.RUNMODAL;
    END;

    PROCEDURE ImprimirLiquidacionTransfer@1000000003(VAR prRsv@1100217000 : Record 7009744);
    VAR
      lrResTrf@1100253001 : Record 7009744;
      lrTmpFC@1100253002 : TEMPORARY Record 2000000007;
      lwCnt@1100253003 : Integer;
      lwInforme@1100217001 : Integer;
    BEGIN
      // ImprimirLiquidacionTransfer
      // $051

      //. Traemos el registro con los filtros aplicados en la pantalla

      //. Buscamos el numero de informe
      rPar.FINDFIRST;
      rPar.TESTFIELD("Informe Liq Guia vta transfer");
      lwInforme := rPar."Informe Liq Guia vta transfer";

      // Se imprime uno por cada fecha de cambio

      // Temporal Fecha de Cambio
      CLEAR(lrTmpFC);
      lrTmpFC.DELETEALL;

      lrResTrf.COPY(prRsv);
      lrResTrf.SETRANGE("Guia Venta", prRsv."Guia Venta");
      IF lrResTrf.FINDSET THEN BEGIN
        REPEAT
          // Creamos un temporal por cada fecha de cambio
          lrTmpFC.SETRANGE("Period Start", lrResTrf."Fecha cambio");
          IF NOT lrTmpFC.FINDFIRST THEN BEGIN
            lrTmpFC."Period Start" := lrResTrf."Fecha cambio";
            lrTmpFC.INSERT;
          END;
        UNTIL lrResTrf.NEXT = 0;
      END;

      // Por cada fecha de cambio
      CLEAR(lrTmpFC);
      IF lrTmpFC.FINDSET THEN BEGIN
        lwCnt := lrTmpFC.COUNT;
        IF lwCnt > 1 THEN
          MESSAGE(Text057, lwCnt);
        REPEAT
          lrResTrf.SETRANGE("Fecha cambio", lrTmpFC."Period Start");
          REPORT.RUN(lwInforme, TRUE, TRUE, lrResTrf);
        UNTIL lrTmpFC.NEXT = 0;
      END;
    END;

    PROCEDURE ReImprimirLiquidacionTransfer@1000000018(pwNumLiquidacion@1100253000 : Integer);
    VAR
      lrResTrf@1100253001 : Record 7009744;
      lrLiq@1100253004 : Record 7010178;
      lRpLiqGOC@1100253002 : Report 7009713;
      lRpLiqCNT@1100217000 : Report 7009712;
      lwOk@1100253003 : Boolean;
    BEGIN
      // ReImprimirLiquidacion
      // $051

      rPar.FINDFIRST;
      rPar.TESTFIELD("Informe Liq Guia vta transfer");

      // Imprimimos tambien el report de detalle de liquidaci¢n
      CLEAR(lrLiq);
      lrLiq.SETRANGE("N§ Liquidacion", pwNumLiquidacion);
      IF lrLiq.FINDFIRST THEN
        REPORT.RUN(7009714, TRUE, TRUE, lrLiq);

      CLEAR(lrResTrf);
      lrResTrf.SETCURRENTKEY("Guia Venta", Bono, "Liquidado GV", "N§ liquidacion GV", "N§ liquidacion GV reembolso");
      lrResTrf.SETRANGE("N§ liquidacion GV", pwNumLiquidacion);
      lwOk := lrResTrf.FINDFIRST;

      IF NOT lwOk THEN BEGIN
        lrResTrf.SETRANGE("N§ liquidacion GV");
        lrResTrf.SETRANGE("N§ liquidacion GV reembolso", pwNumLiquidacion);
        lwOk := lrResTrf.FINDFIRST;
      END;

      IF lwOk THEN BEGIN
        CASE rPar."Informe Liq Guia vta transfer" OF
          7009712:
          BEGIN
            lRpLiqCNT.SETTABLEVIEW(lrResTrf);
            lRpLiqCNT.RUN;
          END;
          7009713:
          BEGIN
            lRpLiqGOC.EsReimpresion(TRUE, pwNumLiquidacion);
            lRpLiqGOC.SETTABLEVIEW(lrResTrf);
            lRpLiqGOC.RUN;
          END;
        END;
      END;
    END;

    PROCEDURE VerificarSetupContableTransfer@1000000004(VAR prRsv@1100253000 : Record 7009744);
    VAR
      lrSetupContable@1100253001 : Record 7010242;
      lrCobro@1100253002 : Record 7009927;
      lrCobro2@1100217000 : Record 7009927;
    BEGIN
      // VerificarSetupContable
      // $051

      //. Comprobamos que exista un registro de setup contable para todos los tipos de cobro y divisas
      //. de las reservas filtradas

      IF prRsv.FINDSET THEN BEGIN
        REPEAT
          //_CheckSuplementoAutorizado(prRsv); //+$025

          lrCobro.SETRANGE(Delegacion   , prRsv.Delegacion);
          lrCobro.SETRANGE("Num Reserva", prRsv."N§ Reserva");
          IF lrCobro.FINDSET THEN BEGIN
            REPEAT
              //. Comprobamos si la linea de cobro esta sin importe recibido, en ese caso la borramos
              IF (lrCobro."Importe Recibido" = 0) THEN
              BEGIN
                lrCobro2 := lrCobro;
                lrCobro2.DELETE;
              END
              ELSE
              BEGIN
                //. Comprobamos si la linea de cobros esta sin forma de pago
                IF lrCobro."Forma de Pago" = '' THEN
                  ERROR(Text064, prRsv.Bono);

                lrSetupContable.SETRANGE(Representante  , prRsv."Guia Venta");
                lrSetupContable.SETRANGE("Forma de Pago", lrCobro."Forma de Pago");
                lrSetupContable.SETRANGE(Divisa         , lrCobro."Cod. Divisa");
                lrSetupContable.FINDFIRST;

                lrSetupContable.TESTFIELD("Codigo Banco");
              END;
            UNTIL lrCobro.NEXT = 0;
          END;
        UNTIL prRsv.NEXT = 0;
      END;
    END;

    PROCEDURE Insertar_Liquidacion_Transfer@1000000015() : Integer;
    VAR
      rLiquidacion@1103355000 : Record 7010178;
    BEGIN
      // Insertar_Liquidacion
      // $051

      CLEAR(rLiquidacion);
      rLiquidacion.Fecha                  := TODAY;
      rLiquidacion."Guia Venta"           := rReservaTransfer."Guia Venta";
      rLiquidacion."Importe Comision"     := TablaTotales[Comision] + TablaTotales[IVAGuiaVenta];
      rLiquidacion."Importe Venta"        := TablaTotales[Ingreso];
      rLiquidacion."Importe Comisionable" := TablaTotales[Comisionable];
      rLiquidacion."Cod. divisa"          := rReservaTransfer."C¢d. divisa";
      rLiquidacion."Fecha cambio divisa"  := rReservaTransfer."Fecha cambio";
      rLiquidacion."Tipo cambio divisa"   := rReservaTransfer."Tipo cambio";
      IF rReservaTransfer.GETFILTER("Fecha Venta") <> '' THEN
        rLiquidacion."Filtro Fecha" := rReservaTransfer.GETFILTER("Fecha Venta")
      ELSE
        IF rReservaTransfer.GETFILTER("Fecha entrada") <> '' THEN
          rLiquidacion."Filtro Fecha" := rReservaTransfer.GETFILTER("Fecha entrada");
      rLiquidacion.Tipo               := rLiquidacion.Tipo::Transfer;
      rLiquidacion.INSERT(TRUE);

      EXIT(rLiquidacion."N§ Liquidacion"); //+$012
    END;

    PROCEDURE Insertar_Previo_Liq_Transfer@1000000013();
    VAR
      rLiqGV@1103355000 : Record 7010179;
    BEGIN
      // Insertar_Liquidacion_GV
      // $051

      IF rLiqGV.GET(rReservaTransfer."Guia Venta") THEN
        rLiqGV.DELETE;

      CLEAR(rLiqGV."Guia Venta");
      rLiqGV."Guia Venta"           := rReservaTransfer."Guia Venta";
      rLiqGV."Ingreso Excursion"    := TablaTotales[Ingreso];
      rLiqGV."Ingreso Comisionable" := TablaTotales[Comisionable];
      rLiqGV."Comision GV"          := TablaTotales[Comision];
      rLiqGV."IVA Guia Venta"       := TablaTotales[IVAGuiaVenta];
      rLiqGV."IRPF Guia Venta"      := -TablaTotales[IRPF];
      rLiqGV.Divisa                 := rReservaTransfer."C¢d. divisa";
      rLiqGV."Fecha cambio divisa"  := rReservaTransfer."Fecha cambio";
      rLiqGV."Tipo cambio divisa"   := rReservaTransfer."Tipo cambio";
      rLiqGV.INSERT;
    END;

    PROCEDURE FacturarTransfer@1000000005(VAR rRes@1103355000 : Record 7009744;Origen@1103355001 : 'Facturar,Previo Liquidar,Consultar') : Boolean;
    VAR
      rContrato@1103355002 : Record 7010142;
      Dialogo@1103355003 : Dialog;
      FechaDesde@1103355004 : Date;
      FechaHasta@1103355005 : Date;
      rCabCompra@1103355006 : Record 38;
    BEGIN
      // FacturarTransfer
      // $051

      rPar.FINDFIRST;

      rReservaTransfer.COPY(rRes);
      rReservaTransfer.SETCURRENTKEY("Guia Venta",
                             "Fecha entrada",
                             "Liquidado GV");

      Comprobar_Ficheros(Origen);

      Inicializar_Variables;

      _CalcularImportesTransfer(FechaDesde, FechaHasta);

      _CalcularImportesReembTransfer(FechaDesde, FechaHasta); // $046

      Calcular_Totales;

      Cambiar_Signo_Totales;

      IF Origen = Origen::Facturar THEN
        Mostrar_Totales;

      IF Origen IN [Origen::"Previo Liquidar", Origen::Consultar] THEN
      BEGIN
        Insertar_Previo_Liq_Transfer;
        EXIT;
      END;

      IF NOT CONFIRM(Text001) THEN
        EXIT(FALSE);

      rReservaTransfer := rRes;
      IF Buscar_Contrato_Transfer(rContrato, rReservaTransfer) THEN
      BEGIN
        IF TablaTotales[Comision] <> 0 THEN
        BEGIN
          Dialogo.OPEN(Text002);
          Generar_Factura_Transfer(rContrato, rCabCompra);
          Dialogo.CLOSE;
          COMMIT;

          Imprimir_Factura(rCabCompra);
        END
      END
      ELSE
        ERROR(Text003 + Text004 + Text005, rReservaTransfer.TourOperador);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE _CalcularImportesTransfer@1000000008(VAR FechaDesde@1100253000 : Date;VAR FechaHasta@1100253001 : Date);
    VAR
      rReserva2@1100253002 : Record 7009744;
      rReserva3@1100253004 : Record 7009744;
      lrCobro@1100217000 : Record 7009927;
      lwTipoCambio@1100253003 : Decimal;
      lwCIComision@1100253006 : Decimal;
      lwIVAVenta@1100253008 : Decimal;
      lwReimpresion@1100253011 : Code[10];
      i@1100253005 : Integer;
      lwNumLiquidacion@1100253012 : Integer;
    BEGIN
      // _CalcularImportesTransfer
      // $051
      //. Creada por: ARM
      //. Creada dia: 14.10.2014
      //. Acumular los ingresos de las reservas

      FechaDesde := rReservaTransfer."Fecha entrada";

      rReserva2.COPY(rReservaTransfer);

      lwReimpresion := rReservaTransfer.GETFILTER("N§ liquidacion GV");
      IF lwReimpresion = '' THEN
        lwReimpresion := rReservaTransfer.GETFILTER("N§ liquidacion GV reembolso");
      IF lwReimpresion <> '' THEN
        EVALUATE(lwNumLiquidacion, lwReimpresion)
      ELSE
        lwNumLiquidacion := 0;

      rReserva2.SETRANGE("Cobros con problemas", FALSE); //+$027
      IF lwReimpresion = ''THEN
        rReserva2.SETRANGE(Reembolsada, FALSE);
      IF rReserva2.FINDSET THEN
      BEGIN
        lwTipoCambio := rReserva2."Tipo cambio";
        REPEAT
          IF (rReserva2."N§ liquidacion GV" = 0) THEN
          BEGIN
            rReserva2.calcular_reserva;
            rReserva2.MODIFY;
          END;

          //. Limitamos que en una misma liquidacion solo pueda haber reservas con el mismo tipo de cambio divisa
          IF rReserva2."Tipo cambio" <> lwTipoCambio THEN
            ERROR(Text015);

          IF rReserva2."Fecha entrada" < FechaDesde THEN
            FechaDesde := rReserva2."Fecha entrada";
          IF rReserva2."Fecha entrada" > FechaHasta THEN
            FechaHasta := rReserva2."Fecha entrada";

          rReserva3 := rReserva2;

          i := Buscar_TTOO(rReserva2.TourOperador);

          CLEAR(lwCIComision);

          IF NOT rReserva2.Reembolsada OR (rReserva2."N§ liquidacion GV" = lwNumLiquidacion) THEN
          BEGIN
            TablaImportes[Ingreso][i]      += rReserva2."Ingreso reserva";
            TablaImportes[Comisionable][i] += rReserva2."Ingreso reserva";
            lwCIComision                   += rReserva2."Comision Guia Venta";
            TablaImportes[AdultosGV][i]    += rReserva2."Adultos Bono";
            TablaImportes[NinsGV][i]       += rReserva2."Ni¤os Bono";
          END;

          IF lwCIComision <> 0 THEN
          BEGIN
            TablaImportes[Comision][i]     := TablaImportes[Comision][i]     + lwCIComision;
            TablaImportes[IVAGuiaVenta][i] := TablaImportes[IVAGuiaVenta][i] + Buscar_IVA_Compra(lwCIComision, TRUE);
            TablaImportes[IRPF][i]         := TablaImportes[IRPF][i]         + Buscar_IVA_Compra(lwCIComision, FALSE);
          END;
        UNTIL rReserva2.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _CalcularImportesReembTransfer@1000000010(VAR FechaDesde@1100253000 : Date;VAR FechaHasta@1100253001 : Date);
    VAR
      rReserva2@1100253002 : Record 7009744;
      lrCobro@1100217000 : Record 7009927;
      rReemb@1000000000 : Record 7009928;
      lwTipoCambio@1100253003 : Decimal;
      lwCIComision@1100253006 : Decimal;
      lwIVAVenta@1100253008 : Decimal;
      lwReimpresion@1100253011 : Code[10];
      i@1100253005 : Integer;
      lwNumLiquidacion@1100253012 : Integer;
    BEGIN
      // _CalcularImportesReembolsos
      // $051
      //. Creada por: ARM
      //. Creada dia: 15.10.2014
      //. Acumular los reembolsos de las reservas

      lwReimpresion := rReserva.GETFILTER("N§ liquidacion GV");
      IF lwReimpresion = '' THEN
        lwReimpresion := rReserva.GETFILTER("N§ liquidacion GV reembolso");
      IF lwReimpresion <> '' THEN
        EVALUATE(lwNumLiquidacion, lwReimpresion)
      ELSE
        lwNumLiquidacion := 0;

      rReemb.RESET;
      rReemb.SETRANGE("Fecha Reembolso"  , FechaDesde, FechaHasta);
      rReemb.SETRANGE("N§ liquidacion GV", lwNumLiquidacion);
      IF rReemb.FINDSET THEN
      BEGIN
        REPEAT
          rReserva2.RESET;
          IF rReserva2.GET(rReemb.Delegacion, rReemb."Num Reserva") THEN
          BEGIN
            rReemb.CALCFIELDS("Importe Reembolsado");
            i := Buscar_TTOO(rReserva2.TourOperador);

            CLEAR(lwCIComision);

            TablaImportes[Ingreso][i]      -= rReemb."Importe Reembolsado";
            TablaImportes[Comisionable][i] -= rReemb."Importe Reembolsado";

            TablaImportes[AdultosGV][i]    := TablaImportes[AdultosGV][i] - rReemb."Adultos Reembolsados";
            TablaImportes[NinsGV][i]       := TablaImportes[NinsGV][i] - rReemb."Ni¤os Reembolsados";
          END;
        UNTIL rReemb.NEXT = 0;
      END;
    END;

    PROCEDURE Buscar_Contrato_Transfer@1000000011(VAR prConCom@1103355000 : Record 7010142;prRsv@1100217000 : Record 7009744) : Boolean;
    BEGIN
      // Buscar_Contrato_Transfer
      // $051

      rPar.FINDFIRST;

      prConCom.RESET;
      prConCom.SETRANGE (Delegacion     , prRsv.Delegacion);
      prConCom.SETRANGE ("Tipo Contrato", prConCom."Tipo Contrato"::"Guia Venta");
      prConCom.SETRANGE (TourOperador   , prRsv.TourOperador);
      prConCom.SETRANGE (Confirmado     , TRUE);

      IF rPar."Contrato x Guia venta" THEN
        prConCom.SETRANGE ("Guia Venta", prRsv."Guia Venta");

      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        prConCom.SETFILTER("Fecha inicio contrato", '<=%1', prRsv."Fecha Venta");
        prConCom.SETFILTER("Fecha final contrato" , '>=%1', prRsv."Fecha Venta");
      END
      ELSE
      BEGIN
        prConCom.SETFILTER("Fecha inicio contrato", '<=%1', prRsv."Fecha entrada");
        prConCom.SETFILTER("Fecha final contrato" , '>=%1', prRsv."Fecha entrada");
      END;
      IF NOT prConCom.FINDFIRST THEN BEGIN
        prConCom.SETRANGE(TourOperador  , '');
        IF NOT prConCom.FINDFIRST THEN BEGIN
          IF NOT rPar."Contrato x Guia venta" THEN
          BEGIN
            IF rPar."Busca tarifa por fecha venta" THEN
              ERROR(Text023, prRsv."Guia Venta", prRsv."Fecha Venta", prRsv.TourOperador)
            ELSE
              ERROR(Text023, prRsv."Guia Venta", prRsv."Fecha entrada", prRsv.TourOperador);
          END;
          prConCom.SETRANGE(TourOperador, prRsv.TourOperador);
          prConCom.SETRANGE(Proveedor, '');
          IF NOT prConCom.FINDFIRST THEN BEGIN
            prConCom.SETRANGE(TourOperador, '');
            IF NOT prConCom.FINDFIRST THEN
              CLEAR(prConCom);
          END;
        END;
      END;

      IF prConCom."N§ Contrato compra" = '' THEN
      BEGIN
        IF rPar."Busca tarifa por fecha venta" THEN
          ERROR(Text023, prRsv."Guia Venta", prRsv."Fecha Venta", prRsv.TourOperador)
        ELSE
          ERROR(Text023, prRsv."Guia Venta", prRsv."Fecha entrada", prRsv.TourOperador);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE Generar_Factura_Transfer@1000000014(rContrato@1103355000 : Record 7010142;VAR rCabCompra@1103355001 : Record 38);
    VAR
      rPar@1103355002 : Record 7009700;
      i@1103355004 : Integer;
      ok@1103355005 : Boolean;
      Num@1103355006 : Integer;
    BEGIN
      // Generar_Factura_Transfer
      // $051

      rCabCompra."Document Type" := rCabCompra."Document Type"::Invoice;
      _CheckReasonCode;
      rCabCompra."Reason Code" := 'ATENNEA';
      rCabCompra.INSERT(TRUE);

      IF rConfCmp.FINDFIRST THEN BEGIN
        rConfCmp.TESTFIELD("Posted Invoice Nos.");
        rCabCompra.VALIDATE("Posting No. Series", rConfCmp."Posted Invoice Nos.");
      END;

      rCabCompra.VALIDATE("Posting Date"       , TODAY);
      rCabCompra.VALIDATE("Buy-from Vendor No.", rProveedor."No.");
      rCabCompra."Posting Description" := STRSUBSTNO(Text033 + Text034, rReservaTransfer."Guia Venta",
                                                     rReservaTransfer.TourOperador);
      rCabCompra.VALIDATE("Vendor Invoice No."       , rCabCompra."No.");
      rCabCompra.VALIDATE("Shortcut Dimension 1 Code", rReservaTransfer.Delegacion);
      rCabCompra.VALIDATE("Shortcut Dimension 2 Code", '');
      rCabCompra.MODIFY(TRUE);

      Num := 0;
      i   := 1;
      WHILE (TablaImportes[Ingreso][i] <> 0) OR (tab_touroperador[i] <> '') DO BEGIN
        IF TablaImportes[Comision][i] <> 0 THEN
          Linea_Comision_Transfer(rCabCompra, TablaImportes[AdultosGV][i], TablaImportes[NinsGV][i], rContrato, Num, i);
        i := i + 1;
      END;
    END;

    PROCEDURE Linea_Comision_Transfer@1000000012(rCabCompra@1103355000 : Record 38;AdultosSer@1103355001 : Integer;NinosSer@1103355002 : Integer;rContrato@1103355003 : Record 7010142;VAR Num@1103355004 : Integer;i@1103355005 : Integer);
    VAR
      rLinCompra@1103355006 : Record 39;
      rProducto@1103355007 : Record 7009710;
      ok@1103355008 : Boolean;
    BEGIN
      // Linea_Comision_Transfer
      // $051

      Num := Num + 10000;
      CLEAR(rLinCompra);
      rLinCompra.VALIDATE("Document Type", rLinCompra."Document Type"::Invoice);
      rLinCompra.VALIDATE("Document No." , rCabCompra."No.");
      rLinCompra.VALIDATE("Line No."     , Num);
      rLinCompra.VALIDATE(Type           , rLinCompra.Type::"G/L Account");
      rLinCompra.INSERT(TRUE);

      rLinCompra.VALIDATE("No."                      , rCuentas."Cta. compra transfer");
      rLinCompra.VALIDATE("Buy-from Vendor No."      , rCabCompra."Buy-from Vendor No.");
      rLinCompra.VALIDATE("Shortcut Dimension 1 Code", rCabCompra."Shortcut Dimension 1 Code");
      rLinCompra.VALIDATE("Shortcut Dimension 2 Code", tab_touroperador[i]);
      rLinCompra.VALIDATE("Allow Invoice Disc."      , FALSE);
      rLinCompra.VALIDATE(Quantity                   , 1);
      rLinCompra.Description   := STRSUBSTNO(Text047, AdultosSer);
      IF NinosSer <> 0 THEN
        rLinCompra.Description := rLinCompra.Description + STRSUBSTNO(Text048, NinosSer);

      rLinCompra.VALIDATE("Gen. Bus. Posting Group", rProveedor."Gen. Bus. Posting Group");
      rLinCompra.VALIDATE("VAT Bus. Posting Group" , rProveedor."VAT Bus. Posting Group");
      rLinCompra.VALIDATE("VAT Prod. Posting Group", rContrato."Grupo registro iva prod.");

      importecon := (-1) * (TablaImportes[Comision][i] + TablaImportes[IVAGuiaVenta][i]);
      IF rIVACompra.GET(rProveedor."VAT Bus. Posting Group", rContrato."Grupo registro iva prod.") THEN
        importesin := importecon / (1 + (rIVACompra."VAT+EC %" / 100));
      rLinCompra.VALIDATE("Direct Unit Cost", importesin);
      rLinCompra."Amount Including VAT" := importecon;
      rLinCompra."Line Discount %" := 0;
      rLinCompra.MODIFY(TRUE);
    END;

    PROCEDURE Comision_Reserva_Transfer@1000000006(par_Reserva@1103355002 : Record 7009744;VAR wComisionGV@1100217000 : Decimal;VAR wPrecioGV@1100217001 : Decimal);
    VAR
      rContGV@1103355004 : Record 7010142;
      rPrecioGV@1103355005 : Record 7010152;
      lwBaseComision@1100253000 : Decimal;
    BEGIN
      // Comision_Reserva_Transfer
      // $051

      IF NOT Buscar_Contrato_Transfer(rContGV, par_Reserva) THEN
        EXIT;

      IF NOT Busca_Precio_GV_Transfer(rContGV, par_Reserva, rPrecioGV) THEN
        EXIT;

      rTTOO.GET(par_Reserva.TourOperador);

      // Tenemos en cuenta los reembolsos
      // $046
      IF rTTOO."Descuento sobre importes" = rTTOO."Descuento sobre importes"::"Sin impuestos" THEN
        lwBaseComision := par_Reserva."Ingreso reserva neto" - par_Reserva."Importe Reembolsado Neto"
      ELSE
        lwBaseComision := par_Reserva."Ingreso reserva" - par_Reserva."Importe Reembolsado";

      IF par_Reserva."No comisionable" THEN BEGIN     // $045, a¤ado condicion IF
        wComisionGV                      := 0;
        wPrecioGV                        := 0;
      END ELSE BEGIN
        wComisionGV := ROUND(lwBaseComision * rPrecioGV.Precio / 100);
        wPrecioGV   := rPrecioGV.Precio;
      END;
    END;

    PROCEDURE Busca_Precio_GV_Transfer@1000000007(par_cont@1103355000 : Record 7010142;prRsv@1103355001 : Record 7009744;VAR prPrecio@1103355002 : Record 7010152) : Boolean;
    BEGIN
      // Busca_Precio_GV_Transfer
      // $051

      rPar.FINDFIRST;

      prPrecio.RESET;
      prPrecio.SETRANGE (Delegacion   , par_cont.Delegacion);
      prPrecio.SETRANGE ("N§ Contrato", par_cont."N§ Contrato compra");
      IF rPar."Busca tarifa por fecha venta" THEN
      BEGIN
        prPrecio.SETFILTER("Fecha desde", '<=%1', prRsv."Fecha Venta");
        prPrecio.SETFILTER("Fecha hasta", '>=%1', prRsv."Fecha Venta");
      END
      ELSE
      BEGIN
        prPrecio.SETFILTER("Fecha desde", '<=%1', prRsv."Fecha entrada");
        prPrecio.SETFILTER("Fecha hasta", '>=%1', prRsv."Fecha entrada");
      END;
      prPrecio.SETRANGE(prPrecio."Tipo precio", prPrecio."Tipo precio"::Transfer);
      prPrecio.SETRANGE (Activo       , TRUE);
      prPrecio.SETRANGE (TourOperador , prRsv.TourOperador);  // +$057
      IF NOT prPrecio.FINDFIRST THEN
        CLEAR(prPrecio);

      IF prPrecio."Orden precio" = 0 THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE RegistrarLiquidacionTransfer@1000000017(pwGuiaVenta@1100253000 : Code[20];VAR preResTrf@1100253018 : Record 7009744);
    VAR
      lrConfCont@1100253001 : Record 98;
      lrResTrf@1100253002 : Record 7009744;
      lrResTrf2@1100253020 : Record 7009744;
      lrCobro@1100253009 : Record 7009927;
      lrRepEx@1100253003 : Record 7010241;
      lrCustomer@1100253004 : Record 18;
      lrTMPFechaCambio@1100253005 : TEMPORARY Record 2000000007;
      lrTMPFechaExc@1100253008 : TEMPORARY Record 2000000007;
      lrTMPImpCobro@1100253007 : TEMPORARY Record 7009927;
      lrExc@1100253024 : Record 7009710;
      lrReemb@1000000001 : Record 7009928;
      lrReembCobro@1000000000 : Record 7009929;
      lcFacRsv@1100217000 : Codeunit 7010140;
      lwUltTicket@1100253006 : Code[10];
      lwImporteRsv@1100253010 : Decimal;
      lwImporteCobro@1100253011 : Decimal;
      lwTotalCobroDL@1100253013 : Decimal;
      lwTotalVentaDL@1100253014 : Decimal;
      lwVentaDivCli@1100253015 : Decimal;
      lwVentaCliDL@1100217001 : Decimal;
      lwImpDivCli@1100253023 : Decimal;
      lwNumLiq@1100253012 : Integer;
      lwFecha@1100253016 : Date;
      lwMesVenta@1100253017 : Date;
      lwFiltGrp@1100253019 : Integer;
      lwCobroReserva@1100217002 : Decimal;
    BEGIN
      // RegistrarLiquidacionTransfer
      // $051

      CLEAR(rDatIns);
      rDatIns.FINDFIRST;

      rPar.RESET;
      rPar.FINDFIRST;

      IF rPar."Facturar tickets x fecha venta" THEN
      BEGIN
        IF preResTrf.GETFILTER("Fecha Venta") = '' THEN
          ERROR(Text070);

        IF NOT CONFIRM(Text069, FALSE, pwGuiaVenta, preResTrf.GETFILTER("Fecha Venta")) THEN
          EXIT;
      END
      ELSE
        IF NOT CONFIRM(Text052, FALSE, pwGuiaVenta) THEN
          EXIT;

      lrConfCont.RESET;
      lrConfCont.FINDFIRST;
      lrConfCont.TESTFIELD("LCY Code");

      lrRepEx.RESET;
      lrRepEx.GET(pwGuiaVenta);
      lrRepEx.TESTFIELD("Cliente Facturacion");

      lrCustomer.GET(lrRepEx."Cliente Facturacion");

      //. Limpiamos los temporales de fechas de cambio

      lrTMPFechaCambio.RESET;
      lrTMPFechaCambio.DELETEALL;
      lrTMPFechaExc.RESET;  // $019
      lrTMPFechaExc.DELETEALL;

      //. Vamos a rellenar un temporal por cada fecha de cambio de la divisa de venta de las reservas
      // $019 Otro por cada mes de la fecha de excursion

      CLEAR(lrResTrf);
      lrResTrf.SETCURRENTKEY("Guia Venta", Bono, "Liquidado GV", "N§ liquidacion GV", "N§ liquidacion GV reembolso");
      lrResTrf.SETRANGE("Guia Venta"          , pwGuiaVenta);
      lrResTrf.SETRANGE("Liquidado GV"        , FALSE);
      lrResTrf.SETRANGE("Cobros con problemas", FALSE); //+$027
      lrResTrf.SETFILTER(Bono          , '<>%1', '');

      preResTrf.COPYFILTER("Fecha Venta"    , lrResTrf."Fecha Venta");
      preResTrf.COPYFILTER("Fecha entrada", lrResTrf."Fecha entrada"); //+$032
      preResTrf.COPYFILTER("Fecha cambio"   , lrResTrf."Fecha cambio");    //+$032
      lrResTrf.FINDSET;

      //. Verificar que la configuracion contable sea correcta y revisar que no haya
      //. cobros con informacion incorrecta
      VerificarSetupContableTransfer(lrResTrf);

      wCodDim1 := lcFacRsv.SeleccionarDepartamento;
      IF wCodDim1 = '' THEN
        wCodDim1 := lrResTrf.Delegacion;

      //. Buscamos la primera reserva no reembolsada
      lrResTrf.SETRANGE(Reembolsada, FALSE);
      IF lrResTrf.FINDSET THEN
      BEGIN
        lwMesVenta := PrimDiaMes(lrResTrf."Fecha Venta"); //$020 No permitimos mezclar meses distintos de venta (Solo Nexus)

        //+$042 <
        //. Si estamos liquidando por fecha de venta la fecha de trabajo debe estar en el mismo mes que las ventas
        IF rPar."Facturar tickets x fecha venta" THEN
        BEGIN
          IF lwMesVenta <> PrimDiaMes(WORKDATE) THEN
            ERROR(Text073);
        END;
        //+$042 >
      END;

      lrResTrf.SETRANGE(Reembolsada);
      lrResTrf.FINDSET;
      IF lwMesVenta = 0D THEN
        lwMesVenta := PrimDiaMes(lrResTrf."Fecha Venta"); //$020 No permitimos mezclar meses distintos de venta (Solo Nexus)
      REPEAT
        lrTMPFechaCambio.SETRANGE("Period Type" , lrTMPFechaCambio."Period Type"::Date);
        lrTMPFechaCambio.SETRANGE("Period Start", lrResTrf."Fecha cambio");
        IF NOT lrTMPFechaCambio.FINDFIRST THEN BEGIN
          lrTMPFechaCambio."Period Type"  := lrTMPFechaCambio."Period Type"::Date;
          lrTMPFechaCambio."Period Start" := lrResTrf."Fecha cambio";
          lrTMPFechaCambio.INSERT;
        END;

        // $019
        CLEAR(lrTMPFechaExc);
        lrTMPFechaExc.SETRANGE("Period Type" , lrTMPFechaExc."Period Type"::Month);
        lrTMPFechaExc.SETRANGE("Period Start", PrimDiaMes(lrResTrf."Fecha entrada"));
        IF NOT lrTMPFechaExc.FINDFIRST THEN BEGIN
          lrTMPFechaExc."Period Type"  := lrTMPFechaExc."Period Type"::Month;
          lrTMPFechaExc."Period Start" := PrimDiaMes(lrResTrf."Fecha entrada");
          lrTMPFechaExc.INSERT;
        END;

        // $020
        // Generamos un error si se mezclan distintos meses de venta
        IF rPar."Facturar tickets x fecha venta" THEN
        BEGIN
          IF NOT lrResTrf.Reembolsada THEN
            IF lwMesVenta <> PrimDiaMes(lrResTrf."Fecha Venta") THEN
              ERROR(Text058);
        END;

        //. Almacenamos el ultimo numero de ticket para guardarlo al terminar la funcion

        lwUltTicket := lrResTrf.Bono;
      UNTIL lrResTrf.NEXT = 0;

      // $020
      // No permitimos liquidaciones con fecha de cambio distinta, Osea que se divida la liquidaci¢n
      // ya que no cuadraria con el detalle de Liquidacion.
      CLEAR(lrTMPFechaCambio);
      IF lrTMPFechaCambio.COUNT > 1 THEN
        ERROR(Text059);

      // Controlamos que los cobros se correspondan con el detalle de liquidacion introducido a mano
      ControlCobrosTransfer(pwGuiaVenta, lrResTrf);

      //. Recorrer las reservas para acumular los temporales
      //. Hay que hacer un recorrido por cada fecha de cambio que hemos creado en el temporal

      lrTMPFechaCambio.RESET;
      lrTMPFechaCambio.FINDSET;
      CLEAR(lrTMPFechaExc); // $019
      REPEAT

        //+$015
        lrResTrf.RESET;
        lrResTrf.SETCURRENTKEY("Guia Venta", Bono, "Liquidado GV", "N§ liquidacion GV", "N§ liquidacion GV reembolso");
        lrResTrf.SETRANGE("Guia Venta"          , pwGuiaVenta);
        lrResTrf.SETRANGE("Liquidado GV"        , FALSE);
        lrResTrf.SETRANGE("Fecha cambio"        , lrTMPFechaCambio."Period Start");
        lrResTrf.SETRANGE("Cobros con problemas", FALSE); //+$027
        lrResTrf.SETFILTER(Bono          , '<>%1', '');

        preResTrf.COPYFILTER("Fecha Venta", lrResTrf."Fecha Venta");

        //+$015
        IF lrResTrf.FINDFIRST THEN
        BEGIN
          //. Revisamos y recalculamos las reservas
          FacturarTransfer(lrResTrf, 2);

          //. Insertamos el registro de liquidacion
          lwNumLiq := Insertar_Liquidacion_Transfer;

          //. Guardamos en otro apuntador los filtro de reservas
          lrResTrf2.COPY(lrResTrf);

          //. Marcamos las lineas de detalle de liquidacion
          MarcarDetalleCobro(pwGuiaVenta, lwNumLiq); //$020

          //. El temporal de fechas de excursion nos sirve para crear un asiento en funcion del mes
          //. en que se va a realizar la excursion
          IF lrTMPFechaExc.FINDSET THEN BEGIN
            REPEAT
              //. Limpiamos los temporales de importes

              lrTMPImpCobro.RESET;
              lrTMPImpCobro.DELETEALL;

              //. Limpiamos los totales de ventas y cobros en divisa local

              lwTotalCobroDL := 0;
              lwTotalVentaDL := 0;
              lwVentaDivCli  := 0;
              lwVentaCliDL   := 0;

              // $019
              lwFecha := lrTMPFechaExc."Period Start";
              // Cambiamos el grupo de filtrado para no eliminar otros posibles filtros del mismo campo mas restrictivos
              lwFiltGrp := lrResTrf.FILTERGROUP;
              lrResTrf.FILTERGROUP(5);
              lrResTrf.SETRANGE("Fecha entrada", lwFecha, UltDiaMes(lwFecha));
              lrResTrf.FILTERGROUP(lwFiltGrp);
              IF lrResTrf.FINDSET THEN
              BEGIN
                REPEAT
                  lwImporteRsv := 0;
                  lwCobroReserva := 0; //+$043

                  IF lrResTrf.Reembolsada THEN
                  BEGIN
                    lrReemb.RESET;
                    lrReemb.SETRANGE(Delegacion    , lrResTrf.Delegacion);
                    lrReemb.SETRANGE("Num Reserva" , lrResTrf."N§ Reserva");
                    lrReemb.SETRANGE("Liquidado GV", FALSE);
                    IF lrReemb.FINDSET THEN
                    BEGIN
                      REPEAT
                        lrReembCobro.RESET;
                        lrReembCobro.SETRANGE(Delegacion    , lrReemb.Delegacion);
                        lrReembCobro.SETRANGE("Num Reserva" , lrReemb."Num Reserva");
                        lrReembCobro.SETRANGE("Id Reembolso", lrReemb."ID Reembolso");
                        IF lrReembCobro.FINDSET THEN
                        BEGIN
                          REPEAT
                            lrTMPImpCobro.RESET;
                            lrTMPImpCobro.SETRANGE("Forma de Pago"     , lrReembCobro."Forma de Pago");
                            lrTMPImpCobro.SETRANGE("Cod. Divisa"       , lrReembCobro."Cod. Divisa");
                            lrTMPImpCobro.SETRANGE("Fecha cambio cobro", lrResTrf."Fecha cambio");
                            IF NOT lrTMPImpCobro.FINDFIRST THEN
                            BEGIN
                              CLEAR(lrTMPImpCobro);
                              lrTMPImpCobro."ID Cobro"           := lrReembCobro."ID Cobro";
                              lrTMPImpCobro."Num Reserva"        := lrReembCobro."Num Reserva";
                              lrTMPImpCobro."Forma de Pago"      := lrReembCobro."Forma de Pago";
                              lrTMPImpCobro."Cod. Divisa"        := lrReembCobro."Cod. Divisa";
                              lrTMPImpCobro."Fecha cambio cobro" := lrResTrf."Fecha cambio";
                              lrTMPImpCobro.INSERT;
                            END;
                            lrTMPImpCobro.Importe -= lrReembCobro.Importe;
                            lrTMPImpCobro.MODIFY;

                            lwTotalCobroDL -= rTipCam.ExchangeAmtFCYToFCY(lrResTrf."Fecha cambio",
                                                                          lrReembCobro."Cod. Divisa", '', lrReembCobro.Importe);
                          UNTIL lrReembCobro.NEXT = 0;
                        END;
                        lrReemb.CALCFIELDS("Importe Reembolsado");
                        lwImporteRsv := (-1) * lrReemb."Importe Reembolsado";
                      UNTIL lrReemb.NEXT = 0;
                    END;
                  END
                  ELSE
                  BEGIN
                    //. Acumulamos el importe de los cobros
                    lrCobro.SETRANGE(Delegacion   , lrResTrf.Delegacion);
                    lrCobro.SETRANGE("Num Reserva", lrResTrf."N§ Reserva");
                    IF lrCobro.FINDSET THEN
                    BEGIN
                      REPEAT
                        lwImporteCobro := lrCobro."Importe Recibido";

                        lrTMPImpCobro.RESET;
                        lrTMPImpCobro.SETRANGE("Forma de Pago"     , lrCobro."Forma de Pago");
                        lrTMPImpCobro.SETRANGE("Cod. Divisa"       , lrCobro."Cod. Divisa");
                        lrTMPImpCobro.SETRANGE("Fecha cambio cobro", lrCobro."Fecha cambio cobro");
                        IF lrTMPImpCobro.FINDFIRST THEN
                        BEGIN
                          lrTMPImpCobro.Importe += lwImporteCobro;
                          lrTMPImpCobro.MODIFY;
                        END
                        ELSE
                        BEGIN
                          lrTMPImpCobro."ID Cobro"           := lrCobro."ID Cobro";
                          lrTMPImpCobro."Num Reserva"        := lrCobro."Num Reserva";
                          lrTMPImpCobro."Forma de Pago"      := lrCobro."Forma de Pago";
                          lrTMPImpCobro."Cod. Divisa"        := lrCobro."Cod. Divisa";
                          lrTMPImpCobro."Fecha cambio cobro" := lrCobro."Fecha cambio cobro";
                          lrTMPImpCobro.Importe              := lwImporteCobro;
                          lrTMPImpCobro.INSERT;
                        END;

                        lwTotalCobroDL += rTipCam.ExchangeAmtFCYToFCY(lrCobro."Fecha cambio cobro",
                                                                      lrCobro."Cod. Divisa", '', lwImporteCobro);

                        lwCobroReserva += lrCobro."Importe Divisa Reserva"; //+$043
                      UNTIL lrCobro.NEXT = 0;
                    END
                    ELSE
                      CLEAR(lrCobro); //+$041

                    //. Controlamos que la reserva se haya cobrado (algo)
                    IF (lwCobroReserva = 0) AND (lrResTrf."Ingreso reserva" <> 0) THEN
                      ERROR(Text051, lrResTrf."N§ Reserva");

                    //+$043 <
                    // $023 Comprobamos que el importe de cobros no sea inferior a la reserva
                    //. Permitimos una diferencia de uno solo para CNT
                    CASE rDatIns."Empresa Real" OF
                      rDatIns."Empresa Real"::CNT:
                      BEGIN
                        IF lwCobroReserva < (lrResTrf."Ingreso reserva" - 1) THEN
                          ERROR(Text061, lwCobroReserva, lrResTrf.Bono, lrResTrf."Ingreso reserva");
                      END
                      ELSE
                      BEGIN
                        IF lwCobroReserva < lrResTrf."Ingreso reserva" THEN
                          ERROR(Text061, lwCobroReserva, lrResTrf.Bono, lrResTrf."Ingreso reserva");
                      END;
                    END;
                    //+$043 >

                    lwImporteRsv := lrResTrf."Ingreso reserva"
                  END;

                  lwTotalVentaDL += rTipCam.ExchangeAmtFCYToFCY(lrResTrf."Fecha cambio", lrResTrf."C¢d. divisa", '', lwImporteRsv);

                  //. CNT tiene una divisa de venta y una divisa de facturacion que en realidad es la misma, por tanto no
                  //. debemos generar conversion entre tipos de cambio
                  //+$033 <
                  IF COPYSTR(lrResTrf."C¢d. divisa", 1, 2) <> COPYSTR(lrCustomer."Currency Code", 1, 2) THEN
                    lwImpDivCli := rTipCam.ExchangeAmtFCYToFCY(lrResTrf."Fecha cambio", lrResTrf."C¢d. divisa",
                                                               lrCustomer."Currency Code", lwImporteRsv)
                  ELSE
                    lwImpDivCli := lwImporteRsv;

                  //. El asiento por diferencias entre la divisa de venta y la divisa de facturacion
                  //. no se aplicar  si el cliente del guia es en divisa local
                  IF (lrCustomer."Currency Code" <> '') AND
                     (lrCustomer."Currency Code" <> lrConfCont."LCY Code") THEN  //+$039
                    lwVentaCliDL  += rTipCam.ExchangeAmtFCYToFCY(WORKDATE, lrCustomer."Currency Code",
                                                                 '', lwImporteRsv)
                  ELSE
                    lwVentaCliDL  += rTipCam.ExchangeAmtFCYToFCY(lrResTrf."Fecha cambio", lrResTrf."C¢d. divisa", '', lwImporteRsv);
                  //+$033 >

                  lwVentaDivCli += lwImpDivCli;

                UNTIL lrResTrf.NEXT = 0;

                AsientosLiquidacionTransfer(pwGuiaVenta, lwNumLiq, lrResTrf."Fecha cambio", lrResTrf."Tipo cambio",
                                    lrTMPImpCobro, lwTotalVentaDL, lwTotalCobroDL, lwVentaDivCli, lwVentaCliDL,
                                    lrResTrf."C¢d. divisa", lrTMPFechaExc."Period Start");
              END;
            UNTIL lrTMPFechaExc.NEXT = 0;
          END;

          MarcarReservasLiqTransfer(lrResTrf2, lrResTrf2."Fecha cambio", lwNumLiq);

        END;
      UNTIL lrTMPFechaCambio.NEXT = 0;

      //. Marcamos el representante con el numero de ticket
      lrRepEx."Ultimo bono transfer Liquidado" := lwUltTicket;
      lrRepEx.MODIFY;

      MESSAGE(Text053);
    END;

    PROCEDURE AsientosLiquidacionTransfer@1000000016(pwGuiaVenta@1100253004 : Code[20];pwNumLiquidacion@1100253007 : Integer;pwFechaCambio@1100253011 : Date;pwTipoCambio@1100253015 : Decimal;VAR prTMPCobros@1100253001 : TEMPORARY Record 7009927;pwTotalVentaDL@1100253002 : Decimal;pwTotalCobroDL@1100253003 : Decimal;pwVenta@1100253010 : Decimal;pwVentaCliDL@1100217000 : Decimal;pwDivisaVenta@1100217001 : Code[10];pwMesTransfer@1100217002 : Date);
    VAR
      lrConf@1100253000 : Record 7010242;
      lrRepEx@1100253008 : Record 7010241;
      lrCustomer@1100253009 : Record 18;
      lrDiv@1100253013 : Record 4;
      lrConfCont@1100253014 : Record 98;
      lwTextoDiario@1100253006 : Text[80];
      lwDiferencia@1100253012 : Decimal;
      lwTipoCambio@1100253005 : Decimal;
    BEGIN
      // AsientosLiquidacion
      // $051
      //. @pwGuiaVenta     , Guia que estamos liquidando
      //. @pwNumLiquidacion, Numero de liquidacion que utilizamos como numero de documento
      //. @pwFechaCambio   , Fecha de cambio de la divisa de venta
      //. @pwTipoCambio    , Tipo de cambio de las reservas
      //. @prTMPCobros     , Temporal que acumula por Divisa, Fecha cambio cobro y Forma pago
      //. @pwTotalVentaDL  , Total de la venta en divisa local
      //. @pwTotalCobroDL  , Total de los cobros en divisa local
      //. @pwVenta         , Total de la venta en la divisa del cliente
      //. @pwVentaCliDL    , Venta en DL a partir de la divisa del cliente por si se producen diferencias cambiarias
      //. @pwDivisaVenta   , Divisa de la venta, para comprobacion con la divisa del cliente

      lrRepEx.RESET;
      lrRepEx.GET(pwGuiaVenta);
      lrRepEx.TESTFIELD("Cliente Facturacion");

      lrCustomer.GET(lrRepEx."Cliente Facturacion");

      lrConfCont.RESET;
      lrConfCont.FINDFIRST;
      lrConfCont.TESTFIELD("LCY Code");

      //. Linea de diario por cada combinacion de Divisa + Fecha cambio cobro + Forma de pago

      prTMPCobros.RESET;
      IF prTMPCobros.FINDSET THEN BEGIN
        REPEAT
          //. Comprobamos la configuraci¢n
          CLEAR(lrConf);
          lrConf.GET(pwGuiaVenta, prTMPCobros."Forma de Pago", prTMPCobros."Cod. Divisa");
          lrConf.TESTFIELD("Codigo Banco");

          //. Buscamos el tipo de cambio de la divisa del cobro

          lwTipoCambio := rTipCam.ExchangeRate(prTMPCobros."Fecha cambio cobro", prTMPCobros."Cod. Divisa");

          lwTextoDiario := STRSUBSTNO('%1 %2 %3 %4 %5',
                                      pwGuiaVenta, FORMAT(pwMesTransfer, 0, '<Month Text>'), Text050,
                                      prTMPCobros."Forma de Pago", prTMPCobros."Cod. Divisa"); //+$026

          _InsertaLineaDiario(pwNumLiquidacion, 3, lrConf."Codigo Banco", prTMPCobros."Forma de Pago",
                              prTMPCobros."Cod. Divisa", prTMPCobros.Importe, 0, lwTextoDiario, lwTipoCambio);

          // $024
          _AsientoComisionTarjetas(pwNumLiquidacion, prTMPCobros.Importe, prTMPCobros."Forma de Pago",prTMPCobros."Cod. Divisa",
                                   lrConf,  lwTipoCambio);

        UNTIL prTMPCobros.NEXT = 0;
      END;

      //. Contrapartida por el total de la venta
      //. Buscamos el tipo de cambio de la divisa del cliente

      //. CNT tiene una divisa de venta y una divisa de facturacion que en realidad es la misma, por tanto no
      //. debemos generar conversion entre tipos de cambio
      //+$033 <
      IF COPYSTR(pwDivisaVenta, 1, 2) <> COPYSTR(lrCustomer."Currency Code", 1, 2) THEN
        lwTipoCambio := rTipCam.ExchangeRate(pwFechaCambio, lrCustomer."Currency Code")
      ELSE
        lwTipoCambio := rTipCam.ExchangeRate(WORKDATE, lrCustomer."Currency Code");

      lwTextoDiario := STRSUBSTNO('%1 %2', Text055, FORMAT(pwMesTransfer, 0, '<Month Text>'));
      _InsertaLineaDiario(pwNumLiquidacion, 1, lrRepEx."Cliente Facturacion", '', lrCustomer."Currency Code",
                          pwVenta, 1, lwTextoDiario, lwTipoCambio);

      //. Diferencias cobro/venta en Divisa Local

      lwDiferencia := pwTotalVentaDL - pwTotalCobroDL;

      IF lwDiferencia <> 0 THEN BEGIN
        CLEAR(lrDiv);
        lrDiv.GET(lrConfCont."LCY Code");
        lrDiv.TESTFIELD("Realized Losses Acc.");
        lrDiv.TESTFIELD("Realized Gains Acc.");

        lwTextoDiario := STRSUBSTNO('%1 - %2', FORMAT(pwMesTransfer, 0, '<Month Text>'), Text056);
        IF lwDiferencia < 0 THEN BEGIN
          lwDiferencia := ABS(lwDiferencia);
          _InsertaLineaDiario(pwNumLiquidacion, 0, lrDiv."Realized Gains Acc.", '', '', lwDiferencia, 1, lwTextoDiario, pwTipoCambio);
        END
        ELSE BEGIN
          _InsertaLineaDiario(pwNumLiquidacion, 0, lrDiv."Realized Losses Acc.", '', '', lwDiferencia, 0, lwTextoDiario, pwTipoCambio);
        END;
      END;

      //. Diferencias entre la venta en la divisa de venta y la venta en la divisa del cliente
      //$033 <
      lwDiferencia := pwVentaCliDL - pwTotalVentaDL;

      IF lwDiferencia <> 0 THEN BEGIN
        CLEAR(lrDiv);
        lrDiv.GET(lrConfCont."LCY Code");
        lrDiv.TESTFIELD("Realized Losses Acc.");
        lrDiv.TESTFIELD("Realized Gains Acc.");

        lwTextoDiario := STRSUBSTNO('%1 - %2', FORMAT(pwMesTransfer, 0, '<Month Text>'), Text071);

        IF lwDiferencia < 0 THEN BEGIN
          lwDiferencia := ABS(lwDiferencia);
          _InsertaLineaDiario(pwNumLiquidacion, 0, lrDiv."Realized Gains Acc.", '', '', lwDiferencia, 1, lwTextoDiario, pwTipoCambio);
        END
        ELSE BEGIN
          _InsertaLineaDiario(pwNumLiquidacion, 0, lrDiv."Realized Losses Acc.", '', '', lwDiferencia, 0, lwTextoDiario, pwTipoCambio);
        END;
      END;
      //$033 <
    END;

    PROCEDURE MarcarReservasLiqTransfer@1000000009(VAR prResTrf@1100253000 : Record 7009744;pwFechaCambio@1100253001 : Date;pwNumLiquidacion@1100253002 : Integer);
    VAR
      lrRsv@1100217000 : Record 7009744;
      lrReemb@1000000000 : Record 7009928;
      lrReemb2@1000000002 : Record 7009928;
      lwHayReservas@1000000001 : Boolean;
    BEGIN
      // MarcarReservasLiquidadas
      // $051
      //. @prRsvExc, Apuntados de las reservas que queremos marcar
      //. @pwFechaCambio, Fecha de cambio que estamos liquidando
      //. @pwNumLiquidacion, Numero de liquidacion para rellenar en las reservas

      lwHayReservas := FALSE;

      IF prResTrf.FINDSET THEN
      BEGIN
        lwHayReservas := TRUE;
        //+$036 <
        REPEAT
          lrRsv := prResTrf;
          lrRsv.VALIDATE("N§ liquidacion GV"   , pwNumLiquidacion);
          lrRsv.VALIDATE("Fecha Liquidacion GV", TODAY);
          lrRsv.VALIDATE("Liquidado GV"        , TRUE);
          lrRsv.MODIFY;
        UNTIL prResTrf.NEXT = 0;
        //+$036 >
      END;
      prResTrf.SETRANGE("Fecha cambio", pwFechaCambio);

      //. Marcar las reservas
      prResTrf.SETRANGE("Liquidado GV", FALSE);
      IF prResTrf.FINDSET THEN
      //+$036 <
      BEGIN
        lwHayReservas := TRUE;
        REPEAT
          IF prResTrf.Reembolsada THEN
          BEGIN
            lrRsv := prResTrf;
            lrRsv.VALIDATE("N§ liquidacion GV reembolso"   , pwNumLiquidacion);
            lrRsv.MODIFY;

            lrReemb.RESET;
            lrReemb.SETRANGE(Delegacion    , prResTrf.Delegacion);
            lrReemb.SETRANGE("Num Reserva" , prResTrf."N§ Reserva");
            lrReemb.SETRANGE("Liquidado GV", FALSE);
            IF lrReemb.FINDSET THEN
            BEGIN
              REPEAT
                lrReemb2 := lrReemb;
                lrReemb2.VALIDATE("N§ liquidacion GV", pwNumLiquidacion);
                lrReemb2.MODIFY;
              UNTIL lrReemb.NEXT = 0;
            END;
          END
          ELSE
          BEGIN
            lrRsv := prResTrf;
            lrRsv.VALIDATE("N§ liquidacion GV", pwNumLiquidacion);
            lrRsv.MODIFY;
          END;
        UNTIL prResTrf.NEXT = 0;
      END;
      //+$036 >

      IF NOT lwHayReservas THEN
      BEGIN
        MESSAGE(Text054);
        EXIT;
      END;

      // Impresion

      ReImprimirLiquidacion(pwNumLiquidacion);
    END;

    PROCEDURE ControlCobrosTransfer@1000000019(pwGuiaVenta@1100253006 : Code[20];VAR preResTrf@1100253000 : Record 7009744);
    VAR
      lrResTrf@1100253001 : Record 7009744;
      lrCobro@1100253002 : Record 7009927;
      lrTMPImpCobro@1100253003 : TEMPORARY Record 7009927;
      lrReemb@1000000001 : Record 7009928;
      lrReembCobro@1000000000 : Record 7009929;
      lrDet@1100253005 : Record 7010250;
      lwId@1100253007 : Integer;
    BEGIN
      // ControlCobros
      // $51
      // Controlamos que los totales por divisa de el detalle de liquidacion se corresponda con los cobros
      // Para ello utilizamos temporales

      lrResTrf.COPY(preResTrf);
      lrResTrf.SETRANGE("Cobros con problemas", FALSE); //+$027

      CLEAR(lwId);
      CLEAR(lrTMPImpCobro);
      lrTMPImpCobro.DELETEALL;

      IF lrResTrf.FINDSET THEN
      BEGIN
        REPEAT
          //+$048 <
          //. Si la reserva esta reembolsada trabajamos con la tabla de reembolsos
          IF lrResTrf.Reembolsada THEN
          BEGIN
            lrReemb.RESET;
            lrReemb.SETRANGE(Delegacion    , lrResTrf.Delegacion);
            lrReemb.SETRANGE("Num Reserva" , lrResTrf."N§ Reserva");
            lrReemb.SETRANGE("Liquidado GV", FALSE);
            IF lrReemb.FINDSET THEN
            BEGIN
              REPEAT
                lrReembCobro.RESET;
                lrReembCobro.SETRANGE(Delegacion    , lrReemb.Delegacion);
                lrReembCobro.SETRANGE("Num Reserva" , lrReemb."Num Reserva");
                lrReembCobro.SETRANGE("Id Reembolso", lrReemb."ID Reembolso");
                IF lrReembCobro.FINDSET THEN
                BEGIN
                  REPEAT
                    lrTMPImpCobro.SETRANGE("Forma de Pago", lrReembCobro."Forma de Pago");
                    lrTMPImpCobro.SETRANGE("Cod. Divisa"  , lrReembCobro."Cod. Divisa");
                    IF NOT lrTMPImpCobro.FINDFIRST THEN
                    BEGIN
                      lwId +=1;

                      CLEAR(lrTMPImpCobro);
                      lrTMPImpCobro."ID Cobro"      := lwId;
                      lrTMPImpCobro."Forma de Pago" := lrReembCobro."Forma de Pago";
                      lrTMPImpCobro."Cod. Divisa"   := lrReembCobro."Cod. Divisa";
                      lrTMPImpCobro.INSERT;
                    END;
                    lrTMPImpCobro.Importe -= lrReembCobro.Importe;
                    lrTMPImpCobro.MODIFY;
                  UNTIL lrReembCobro.NEXT = 0;
                END;
              UNTIL lrReemb.NEXT = 0;
            END;
          END
          //+$048 >
          ELSE
          BEGIN
            CLEAR(lrCobro);
            lrCobro.SETRANGE(Delegacion   , lrResTrf.Delegacion);
            lrCobro.SETRANGE("Num Reserva", lrResTrf."N§ Reserva");
            IF lrCobro.FINDSET THEN
            BEGIN
              REPEAT
                lrTMPImpCobro.SETRANGE("Cod. Divisa"  , lrCobro."Cod. Divisa");
                lrTMPImpCobro.SETRANGE("Forma de Pago", lrCobro."Forma de Pago");
                IF NOT lrTMPImpCobro.FINDFIRST THEN
                BEGIN
                  lwId +=1;

                  CLEAR(lrTMPImpCobro);
                  lrTMPImpCobro."ID Cobro"      := lwId;
                  lrTMPImpCobro."Cod. Divisa"   := lrCobro."Cod. Divisa";
                  lrTMPImpCobro."Forma de Pago" := lrCobro."Forma de Pago";
                  lrTMPImpCobro.INSERT;
                END;
                lrTMPImpCobro.Importe += lrCobro."Importe Recibido";
                lrTMPImpCobro.MODIFY;
              UNTIL lrCobro.NEXT = 0;
            END;
          END;
        UNTIL lrResTrf.NEXT = 0;
      END;

      CLEAR(lrDet);
      lrDet.SETCURRENTKEY("Guia Venta","N§ Liquidacion");
      lrDet.SETRANGE("Guia Venta"     , pwGuiaVenta);
      lrDet.SETRANGE("N§ Liquidacion" , 0);
      IF lrDet.FINDSET THEN
      BEGIN
        REPEAT
          lrTMPImpCobro.SETRANGE("Forma de Pago", lrDet."Forma de Pago");
          lrTMPImpCobro.SETRANGE("Cod. Divisa"  , lrDet.Divisa);
          IF NOT lrTMPImpCobro.FINDFIRST THEN
          BEGIN
            lwId +=1;

            CLEAR(lrTMPImpCobro);
            lrTMPImpCobro."ID Cobro"      := lwId;
            lrTMPImpCobro."Cod. Divisa"   := lrDet.Divisa;
            lrTMPImpCobro."Forma de Pago" := lrDet."Forma de Pago";
            lrTMPImpCobro.INSERT;
          END;
          lrTMPImpCobro."Importe Recibido" += lrDet.Total;
          lrTMPImpCobro.MODIFY;
        UNTIL lrDet.NEXT=0
      END;

      CLEAR(lrTMPImpCobro);
      IF lrTMPImpCobro.FINDSET THEN
      BEGIN
        REPEAT
          IF lrTMPImpCobro.Importe <> lrTMPImpCobro."Importe Recibido" THEN
          BEGIN
            IF ABS(lrTMPImpCobro.Importe - lrTMPImpCobro."Importe Recibido") > 1 THEN
              ERROR(Text060, lrTMPImpCobro."Cod. Divisa", lrTMPImpCobro."Importe Recibido", lrTMPImpCobro.Importe);
          END;
        UNTIL lrTMPImpCobro.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _CheckReasonCode@1000000020();
    VAR
      lrReason@1000000000 : Record 231;
      TextCodAu@1000000001 : TextConst 'ENU=ATENNEA;ESP=ATENNEA';
    BEGIN
      // _CheckReasonCode

      IF NOT lrReason.GET(TextCodAu) THEN
      BEGIN
        lrReason.INIT;
        lrReason.Code        := TextCodAu;
        lrReason.Description := lrReason.Code;
        lrReason.INSERT;
      END;
    END;

    PROCEDURE RecalcularTemporal@1000000022();
    VAR
      lrLiquidacion@1000000000 : Record 7010178;
      lrReemb@1000000004 : Record 7010266;
      FechaDesde@1000000001 : Date;
      FechaHasta@1000000002 : Date;
    BEGIN
      rPar.FINDFIRST;

      lrLiquidacion.RESET;
      //lrLiquidacion.SETFILTER(Fecha, '>=%1', 091214D);
      lrLiquidacion.SETRANGE("N§ Liquidacion", 6268);
      lrLiquidacion.FINDSET(TRUE);
      REPEAT
        rReserva.RESET;
        rReserva.SETRANGE("N§ liquidacion GV", lrLiquidacion."N§ Liquidacion");
        rReserva.SETRANGE("Guia Venta"       , lrLiquidacion."Guia Venta");

        rReserva.SETCURRENTKEY("Guia Venta",
                               "Fecha Excursion",
                               "Liquidado GV",
                               Producto,
                               "Zona Hotel",
                               "Precio Adulto",
                               "Precio Ni¤o");
        IF NOT rReserva.FINDFIRST THEN
        BEGIN
          lrReemb.RESET;
          lrReemb.SETRANGE("N§ liquidacion GV", lrLiquidacion."N§ Liquidacion");
          lrReemb.SETRANGE("Guia Venta"       , lrLiquidacion."Guia Venta");
          lrReemb.FINDFIRST;

          rReserva.GET(lrReemb.Delegacion, lrReemb."Num Reserva");
        END;

        Comprobar_Ficheros(1);

        Inicializar_Variables;

        _CalcularImportes(FechaDesde, FechaHasta);

        _CalcularImportesReembolsos(FechaDesde, FechaHasta); // $046

        Calcular_Totales;

        Cambiar_Signo_Totales;

        lrLiquidacion."Importe Comision"     := TablaTotales[Comision] + TablaTotales[IVAGuiaVenta];
        lrLiquidacion."Importe Venta"        := TablaTotales[Ingreso];
        lrLiquidacion."Importe Comisionable" := TablaTotales[Comisionable];
        lrLiquidacion.MODIFY;
      UNTIL lrLiquidacion.NEXT = 0;
    END;

    LOCAL PROCEDURE _GetProveedor@1000000021();
    VAR
      lrRepr@1000000000 : Record 7010241;
    BEGIN
      // JPT 30/12/10 CAR-10002
      CLEAR(lrRepr);
      lrRepr.GET(rReserva."Guia Venta");
      lrRepr.TESTFIELD("Proveedor Comisiones");
      IF NOT rProveedor.GET(lrRepr."Proveedor Comisiones") THEN
        ERROR(Text012, lrRepr."Proveedor Comisiones");
      IF NOT rGrupo.GET(rProveedor."Vendor Posting Group") THEN
        ERROR(Text013, rProveedor."Vendor Posting Group");
    END;

    BEGIN
    {
      $001 AJS 18012011 Nueva funcion _CalcularImportes

      $002 AJS 09032011 Cuando llamamos a la funcion desde la reimpresion de una liquidacion hay que llamar a la funcion
                        _CalcularImporte para las reservas reembolsadas.

      $003 AJS 09032011 Cuando marcamos las reservas reembolsadas, tenemos que marcar solamente las reservas reembolsadas que
                        no este ya liquidadas como reembolsos.

      $004 AJS 25032011 Cuando se liquidaban varias fechas de cambio se quedaban colgados algunos filtros que hacian
                        que los asientos fueran incorrectos

      $005 AJS 25032011 El asiento contra el cliente debe ir en la divisa de la ficha del cliente

      $006 AJS 25032011 Modifico la funcion _InsertaLineaDiario para incluir como primer parametro la fecha
                        de esta manera el asiento se registra con la fecha de cambio correcta

      $007 AJS 26032011 Modifico la funcion _InsertaLineaDiario para la que la seccion sea el usuario

      $008 AJS 09052011 Modifico la funcion _InsertaLineaDiario para que la fecha sea siempre TODAY, elimino la fecha como
                        parametro. Almaceno el factor de la divisa.

      $009 AJS 10052011 En los asientos contables el factor de la divisa debe ser en cada caso el de la divisa de cobro
                        y no el de la reserva

      $010 AJS 12052011 Modifico la funcion _InsertaLineaDiario para que la fecha sea WORKDATE

      $011 AJF 30062011 (GOC-OC-11019)
                        Se coge el "Importe Recibido" en lugar del importe del c lculo en el asiento de liquidaci¢n

      $012 AJS 29072011 Modifico la funcion Insertar_Liquidacion para que retorne directamente el numero de liquidacion

      $013 AJS 29072011 Modifico la funcion RegistrarLiquidacion para que las reservas anuladas se marquen como liquidadas

      $014 AJS 05092011 Modifico la funcion para registrar por fecha cambio del cobro en lugar de por fecha cambio de la reserva
      $015 AJS 03052012 Dentro del bucle de registro por fecha de cambio hay que volver a poner los filtros sobre reservas
      $016 AJS 07052012 En la funcion Comision_Reserva marco el parametro de reserva como VAR

      $017 AJS 08052012 Modifico OnRun para que no muestre inicialmente los representantes bloqueados

      $018 AJS 30052012 Cuando se reimprime una liquidacion hay que respetar el estado que tenia la reserva en ese momento

      $019 JPT 040612 En RegistrarLiquidacion provoco un asiento por cada mes de fecha excursion

      $020 JPT 06/06/12  CNT-CAR-12004/EXC-16 - Sales Guides Cash liquidation customizations

      $021 AJS 26062012 Modifico OnRun para que no muestre los representantes que trabajan a credito

      $022 AJS 07082012 Nueva funcion AcumulaImporteEntregar

      $023 JPT 06/09/12 CNT 12002 Permitir mas de un cobro por reserva de excursi¢n
      $024 JPT 10/09/12 CNT-CAR-12002  CNT003 - Contabilizaci¢n tarjetas de crdito

      $025 AJS 12092012 Comprobar si hay suplementos sin autorizar al registrar la liquidacion

      $026 AJS 18092012 Incluyo el guia de venta en la descripcion del asiento de liquidacion, en las lineas de banco

      $027 AJS 25092012 Las reservas marcadas con problemas de cobro no se liquidan

      $028 AJS 01112012 Modificar la funcion _CalcularImportes para que los reembolsos descuenten el importe de la reserva

      $029 AJS 12112012 Eliminamos el asiento de ingresos diferidos al registrar la liquidacion

      $030 AJS 30112012 Personalizamos el informe de liquidacion por parametros, en las funciones ImprimirLiquidacion y
                        ReImprimirLiquidacion

      $031 AJS 18122012 Nueva funcion ImprimirReciboContado, desde el detalle de liquidacion

      $032 AJS 27122012 Cambio para que no traiga todos los filtros de la ventana

      $033 AJS 30012013 CNT tiene dos tasas de cambio para la misma divisa no hay que convertir el importe que va al cliente

      $034 AJS 04042013 Nueva funcion BuscaPrecioSinReserva para obtener el porcentaje de comision de una excursion para un guia

      $035 AJS 26082013 Elimino las referencias a la tabla Maestro de claves porque es obsoleta

      $036 AJS 28082013 Valido los campos de numero de liquidacion para que vayan al historico de la reserva

      $037 AJS 03092013 Modifico la funcion Comision_Reserva para corregir un error

      $038 AJS 10102013 Marco los asientos de diario como Asiento automatico para que el usuario no los pueda borrar

      $039 AJS 23102013 El asiento por diferencias cambiarias venta/factura solo se hace si el cliente tiene divisa no local

      $040 AJS 20022014 La marca de asiento automatico hay que ponerla antes de rellenar la cuenta

      $041 AJS 06032014 No permitir liquidar si una reserva con importe no tiene cobro asignado

      $042 AJS 10032014 Cuando liquidamos sobre fecha de venta la fecha de trabajo debe estar dentro del mes de las fechas de venta

      $043 AJS 01052014 El control de cuadre cobro/reserva tiene que hacerse despues de recalcular la reserva

      $044 AJS 19062014 Modifico para rellenar "Fecha Liquidacion GV" y "Liquidado GV" en el validate de la tabla

      $045 MNC 01072014 Si la reserva excursion esta marcada como "no comisionable" no se calcula comision GV

      $046 ARM 28072014 Se tienen en cuenta las reservas con reembolsos parciales CNT-OC-14047

      $047 AJS 07082014 Cambio la fecha de reembolso para que sea solo un Date

      $048 AJS 12082014 Cambio la funcion AcumulaImporteEntregar para acumular solo el reembolso pendiente de liquidar

      $049 AJS 25082014 Agrego un control para que no se puedan liquidar reservas sin haber puesto el hotel

      $050 AJS 16092014 Corrijo error en la funcion _CalcularImportes

      $051 ARM 02102014 CNT-CAR-14063, Liquidaciones guia venta transfer

      $052 AJS 12112014 Modifico la funcion Busca_Precio_GV para dar error si el precio no existe

      $053 AJS 21052015 Ejecutar el proceso estandar de Lanzar factura

      $054 AJS 05022015 Modifico la funcion _CalcularImportesReembolsos para filtrar por guia y por la fecha venta

      $055 AJS 06022015 Cambio para que el proveedor no sea siempre obligatorio, solo cuando se vaya a factura la comision

      $056 AJS 09020215 Rellenar el campo Source code del diario general

      $057 ARM 27032015 CNT-OC-14053 Se traspasa el Touroperador desde el contrato al precio yse a¤ade en este el campo tipo venta
    }
    END.
  }
}
