OBJECT Codeunit 7302 WMS Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=must not be %1;ESP=No puede ser %1.';
      Text001@1010 : TextConst 'ENU=Actual %1 %2 on %3 + %4 %5 in %6 exceeds %7 %8 on %9.;ESP=Actual %1 %2 en %3 + %4 %5 en %6 excede %7 %8 en %9.';
      Text002@1011 : TextConst 'ENU=\Do you still want to use this %1 ?;ESP=\¨Todav¡a desea utilizar este %1 ?';
      Text003@1009 : TextConst 'ENU=You must set-up a default location code for user %1.;ESP=Debe configurar un c¢d. almac. gen‚r. para usuario %1.';
      Text004@1019 : TextConst 'ENU=%1 to place (%2) exceeds the available capacity (%3) on %4 %5.;ESP=%1 para situar (%2) excede la capacidad disponible de (%3) en %4 %5.';
      Text005@1027 : TextConst 'ENU="%1 = ''%2'', %3 = ''%4'':\The total base quantity to take %5 must be equal to the total base quantity to place %6.";ESP="%1 = ''%2'', %3 = ''%4'':\La cantidad base a traer %5 debe ser igual que la cdad. base a colocar %6."';
      ItemUnitOfMeasure@1021 : Record 5404;
      Location@1020 : Record 14;
      Bin@1018 : Record 7354;
      ProdOrderCompLine@1012 : Record 5407;
      TempErrorLog@1006 : TEMPORARY Record 2000000040;
      Item@1003 : Record 27;
      ItemTrackingCode@1015 : Record 6502;
      WhseMgt@1007 : Codeunit 5775;
      ShowError@1005 : Boolean;
      NextLineNo@1002 : Integer;
      LogErrors@1001 : Boolean;
      Text006@1013 : TextConst 'ENU="You must enter a %1 in %2 %3 = %4, %5 = %6.";ESP="Debe insertar un %1 en %2 %3 = %4, %5 = %6."';
      Text007@1014 : TextConst 'ENU=Cancelled.;ESP=Cancelado.';
      Text008@1004 : TextConst 'ENU=Destination Name;ESP=Nombre destino';
      Text009@1008 : TextConst 'ENU=Sales Order;ESP=Pedido venta';
      Text010@1023 : TextConst 'ENU="You cannot change the %1 because this item journal line is created from warehouse entries.\%2 %3 is set up with %4 and therefore changes must be made in a %5. ";ESP="No puede cambiar %1 porque esta l¡n. diario producto se cre¢ desde movimientos de almac‚n.\%2 %3 se ha configurado con %4 y, por lo tanto, los cambios deben realizarse en un %5. "';
      Text011@1017 : TextConst 'ENU=You cannot use %1 %2 because it is set up with %3.\Adjustments to this location must therefore be made in a %4.;ESP=No puede utilizar %1 %2 porque se ha configurado con %3.\Los ajustes en esta ubicaci¢n deben realizarse por lo tanto en un %4.';
      Text012@1022 : TextConst 'ENU=You cannot reclassify %1 %2 because it is set up with %3.\You can change this location code by creating a %4.;ESP=No puede volver a clasificar %1 %2 porque se ha configurado con %3.\Puede cambiar este c¢digo de ubicaci¢n creando un %4.';
      Text013@1025 : TextConst 'ENU=You cannot change item tracking because it is created from warehouse entries.\The %1 is set up with warehouse tracking, and %2 %3 is set up with %4.\Adjustments to item tracking must therefore be made in a warehouse journal.;ESP=No puede cambiar el seguimiento de productos porque se cre¢ desde movimientos de almac‚n.\%1 se ha configurado con seguimiento de almac‚n y %2 %3 con %4.\Los ajustes del seguimiento de productos deben por lo tanto realizarse en un diario almac‚n.';
      Text014@1026 : TextConst 'ENU=You cannot change item tracking because the %1 is set up with warehouse tracking and %2 %3 is set up with %4.\Adjustments to item tracking must therefore be made in a warehouse journal.;ESP=No puede cambiar el seguimiento de productos porque el %1 se ha configurado con seguimiento de almac‚n y la %2 %3 con %4.\Los ajustes del seguimiento de productos deben por lo tanto realizarse en un diario almac‚n.';
      Text015@1016 : TextConst 'ENU=You cannot use a %1 because %2 %3 is set up with %4.;ESP=No puede utilizar un %1 porque %2 %3 se ha configurado con %4.';
      Text016@1028 : TextConst 'ENU="%1 = ''%2'', %3 = ''%4'', %5 = ''%6'', %7 = ''%8'': The total base quantity to take %9 must be equal to the total base quantity to place %10.";ESP="%1 = ''%2'', %3 = ''%4'', %5 = ''%6'', %7 = ''%8'': La cdad. base a traer %9 debe ser igual a la cdad. base a colocar %10."';

    PROCEDURE CreateWhseJnlLine@1(ItemJnlLine@1000 : Record 83;ItemJnlTemplateType@1002 : Option;VAR WhseJnlLine@1001 : Record 7311;ToTransfer@1003 : Boolean;BOMPosting@1004 : Boolean) : Boolean;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF ((NOT "Phys. Inventory") AND (Quantity = 0) AND ("Invoiced Quantity" = 0)) OR
           ("Value Entry Type" IN ["Value Entry Type"::Rounding,"Value Entry Type"::Revaluation]) OR
           Adjustment
        THEN
          EXIT(FALSE);

        IF ToTransfer THEN
          "Location Code" := "New Location Code";
        GetLocation("Location Code");

        WhseJnlLine.INIT;
        WhseJnlLine."Journal Template Name" := "Journal Template Name";
        WhseJnlLine."Journal Batch Name" := "Journal Batch Name";
        WhseJnlLine."Location Code" := "Location Code";
        WhseJnlLine."Item No." := "Item No.";
        WhseJnlLine."Registering Date" := "Posting Date";
        WhseJnlLine."User ID" := USERID;
        WhseJnlLine."Variant Code" := "Variant Code";
        IF (("Entry Type" IN
             ["Entry Type"::Purchase,"Entry Type"::"Positive Adjmt."]) AND
            (Quantity > 0)) OR
           (("Entry Type" IN
             ["Entry Type"::Sale,"Entry Type"::"Negative Adjmt."]) AND
            (Quantity < 0)) OR
           ToTransfer
        THEN BEGIN
          IF "Entry Type" = "Entry Type"::Transfer THEN
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::Movement
          ELSE
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
          IF Location."Directed Put-away and Pick" THEN
            IF BOMPosting THEN
              WhseJnlLine."To Bin Code" := Location."Outbound BOM Bin Code"
            ELSE
              WhseJnlLine."To Bin Code" := Location."Adjustment Bin Code"
          ELSE
            IF ToTransfer THEN
              WhseJnlLine."To Bin Code" := "New Bin Code"
            ELSE
              WhseJnlLine."To Bin Code" := "Bin Code";
          GetBin("Location Code",WhseJnlLine."To Bin Code");
          WhseJnlLine."To Zone Code" := Bin."Zone Code";
        END ELSE BEGIN
          IF (("Entry Type" IN
               ["Entry Type"::Purchase,"Entry Type"::"Positive Adjmt."]) AND
              (Quantity < 0)) OR
             (("Entry Type" IN
               ["Entry Type"::Sale,"Entry Type"::"Negative Adjmt."]) AND
              (Quantity > 0)) OR
             (("Entry Type" = "Entry Type"::Transfer) AND (NOT ToTransfer))
          THEN BEGIN
            IF "Entry Type" = "Entry Type"::Transfer THEN
              WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::Movement
            ELSE
              WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Negative Adjmt.";
            IF Location."Directed Put-away and Pick" THEN
              IF BOMPosting THEN
                WhseJnlLine."From Bin Code" := Location."Inbound BOM Bin Code"
              ELSE
                WhseJnlLine."From Bin Code" := Location."Adjustment Bin Code"
            ELSE BEGIN
              IF Location."Bin Mandatory" AND BOMPosting THEN
                GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
              WhseJnlLine."From Bin Code" := "Bin Code";
            END;
            IF Location."Directed Put-away and Pick" THEN BEGIN
              GetBin("Location Code",WhseJnlLine."From Bin Code");
              WhseJnlLine."From Zone Code" := Bin."Zone Code";
              WhseJnlLine."From Bin Type Code" := Bin."Bin Type Code";
            END;
          END ELSE BEGIN
            IF "Phys. Inventory" AND (Quantity = 0) AND ("Invoiced Quantity" = 0) THEN BEGIN
              WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
              IF Location."Directed Put-away and Pick" THEN
                WhseJnlLine."To Bin Code" := Location."Adjustment Bin Code"
              ELSE
                WhseJnlLine."To Bin Code" := "Bin Code";
              GetBin("Location Code",WhseJnlLine."To Bin Code");
              WhseJnlLine."To Zone Code" := Bin."Zone Code";
            END;
          END;
        END;
        IF Location."Directed Put-away and Pick" THEN BEGIN
          WhseJnlLine.Quantity := Quantity;
          WhseJnlLine."Unit of Measure Code" := "Unit of Measure Code";
          WhseJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        END ELSE BEGIN
          WhseJnlLine.Quantity := "Quantity (Base)";
          WhseJnlLine."Unit of Measure Code" := GetBaseUOM("Item No.");
          WhseJnlLine."Qty. per Unit of Measure" := 1;
        END;
        WhseJnlLine."Qty. (Base)" := "Quantity (Base)";
        WhseJnlLine."Qty. (Absolute)" := ABS(WhseJnlLine.Quantity);
        WhseJnlLine."Qty. (Absolute, Base)" := ABS("Quantity (Base)");
        IF ("Journal Template Name" <> '') AND ("Journal Batch Name" <> '') THEN BEGIN
          WhseJnlLine."Source Type" := DATABASE::"Item Journal Line";
          WhseJnlLine."Source Subtype" := ItemJnlTemplateType;
          WhseMgt.GetSourceDocument(
            WhseJnlLine."Source Document",WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
          WhseJnlLine."Source No." := "Document No.";
          WhseJnlLine."Source Line No." := "Line No.";
        END;
        WhseJnlLine."Source Code" := "Source Code";
        WhseJnlLine."Reason Code" := "Reason Code";
        WhseJnlLine."Registering No. Series" := "Posting No. Series";
        WhseJnlLine."Whse. Document Type" := WhseJnlLine."Whse. Document Type"::" ";
        WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Item Journal";
        WhseJnlLine."Reference No." := "Document No.";
        IF Location."Directed Put-away and Pick" THEN
          CalcCubageAndWeight(
            "Item No.","Unit of Measure Code",WhseJnlLine."Qty. (Absolute)",
            WhseJnlLine.Cubage,WhseJnlLine.Weight);
        WhseJnlLine."Registering No. Series" := "Posting No. Series";
        TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CreateWhseJnlLineFromOutputJnl@5(ItemJnlLine@1000 : Record 83;VAR WhseJnlLine@1001 : Record 7311) : Boolean;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF Adjustment OR
           ("Value Entry Type" IN ["Value Entry Type"::Rounding,"Value Entry Type"::Revaluation])
        THEN
          EXIT(FALSE);

        GetLocation("Location Code");
        WhseJnlLine.INIT;
        WhseJnlLine."Journal Template Name" := "Journal Template Name";
        WhseJnlLine."Journal Batch Name" := "Journal Batch Name";
        WhseJnlLine."Location Code" := "Location Code";
        WhseJnlLine."Item No." := "Item No.";
        WhseJnlLine."Registering Date" := "Posting Date";
        WhseJnlLine."User ID" := USERID;
        WhseJnlLine."Variant Code" := "Variant Code";
        IF "Output Quantity" >= 0 THEN BEGIN
          WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
          IF Location."Directed Put-away and Pick" THEN BEGIN
            WhseJnlLine."To Bin Code" := Location."Outbound Production Bin Code";
            GetBin("Location Code",WhseJnlLine."To Bin Code");
            WhseJnlLine."To Zone Code" := Bin."Zone Code";
          END ELSE
            WhseJnlLine."To Bin Code" := "Bin Code";
        END ELSE BEGIN
          WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Negative Adjmt.";
          IF Location."Directed Put-away and Pick" THEN BEGIN
            WhseJnlLine."From Bin Code" := Location."Outbound Production Bin Code";
            GetBin("Location Code",WhseJnlLine."From Bin Code");
            WhseJnlLine."From Zone Code" := Bin."Zone Code";
          END ELSE
            WhseJnlLine."From Bin Code" := "Bin Code";
        END;
        IF "Qty. per Unit of Measure" = 0 THEN
          "Qty. per Unit of Measure" := 1;
        IF Location."Directed Put-away and Pick" THEN BEGIN
          WhseJnlLine.Quantity := "Output Quantity";
          WhseJnlLine."Unit of Measure Code" := "Unit of Measure Code";
          WhseJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        END ELSE BEGIN
          WhseJnlLine.Quantity := "Output Quantity (Base)";
          WhseJnlLine."Unit of Measure Code" := GetBaseUOM("Item No.");
          WhseJnlLine."Qty. per Unit of Measure" := 1;
        END;
        WhseJnlLine."Qty. (Base)" := "Output Quantity (Base)";
        WhseJnlLine."Qty. (Absolute)" := ABS(WhseJnlLine.Quantity);
        WhseJnlLine."Qty. (Absolute, Base)" := ABS("Output Quantity (Base)");

        WhseJnlLine."Source Type" := DATABASE::"Item Journal Line";
        WhseJnlLine."Source Subtype" := 5; // Output Journal
        WhseMgt.GetSourceDocument(
          WhseJnlLine."Source Document",WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
        WhseJnlLine."Source No." := "Prod. Order No.";
        WhseJnlLine."Source Line No." := "Prod. Order Line No.";
        WhseJnlLine."Source Code" := "Source Code";
        WhseJnlLine."Reason Code" := "Reason Code";
        WhseJnlLine."Registering No. Series" := "Posting No. Series";
        WhseJnlLine."Whse. Document Type" := WhseJnlLine."Whse. Document Type"::Production;
        WhseJnlLine."Whse. Document No." := "Prod. Order No.";
        WhseJnlLine."Whse. Document Line No." := "Prod. Order Line No.";
        WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Prod.";
        WhseJnlLine."Reference No." := "Prod. Order No.";
        IF Location."Directed Put-away and Pick" THEN
          CalcCubageAndWeight(
            "Item No.","Unit of Measure Code",WhseJnlLine."Qty. (Absolute)",
            WhseJnlLine.Cubage,WhseJnlLine.Weight);
        TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
      END;
    END;

    PROCEDURE CreateWhseJnlLineFromConsumJnl@18(ItemJnlLine@1000 : Record 83;VAR WhseJnlLine@1001 : Record 7311) : Boolean;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF Adjustment OR
           ("Value Entry Type" IN ["Value Entry Type"::Rounding,"Value Entry Type"::Revaluation])
        THEN
          EXIT(FALSE);

        GetLocation("Location Code");
        WhseJnlLine.INIT;
        WhseJnlLine."Journal Template Name" := "Journal Template Name";
        WhseJnlLine."Journal Batch Name" := "Journal Batch Name";
        WhseJnlLine."Location Code" := "Location Code";
        WhseJnlLine."Item No." := "Item No.";
        WhseJnlLine."Registering Date" := "Posting Date";
        WhseJnlLine."User ID" := USERID;
        WhseJnlLine."Variant Code" := "Variant Code";
        IF GetProdOrderCompLine(
          3,"Prod. Order No.","Prod. Order Line No.","Prod. Order Comp. Line No.")
        THEN BEGIN
          IF Quantity > 0 THEN BEGIN
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Negative Adjmt.";
            IF Location."Directed Put-away and Pick" THEN BEGIN
            IF (ProdOrderCompLine."Planning Level Code" = 0) AND
               ((ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::Manual) OR
                (ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::"Pick + Backward") OR
                ((ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::"Pick + Forward") AND
                 (ProdOrderCompLine."Routing Link Code" <> '')))
              THEN BEGIN
                IF ProdOrderCompLine."Qty. Picked (Base)" < "Quantity (Base)" THEN
                  ProdOrderCompLine.FIELDERROR("Qty. Picked (Base)");
                WhseJnlLine."From Bin Code" := Location."Inbound Production Bin Code";
              END ELSE
                WhseJnlLine."From Bin Code" := Location."Open Shop Floor Bin Code";
              GetBin("Location Code",WhseJnlLine."From Bin Code");
              WhseJnlLine."From Zone Code" := Bin."Zone Code";
              WhseJnlLine."From Bin Type Code" := Bin."Bin Type Code";
            END ELSE
              WhseJnlLine."From Bin Code" := "Bin Code";
          END ELSE BEGIN
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
            IF Location."Directed Put-away and Pick" THEN BEGIN
              IF (ProdOrderCompLine."Planning Level Code" = 0) AND
               ((ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::Manual) OR
                (ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::"Pick + Backward") OR
                ((ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::"Pick + Forward") AND
                 (ProdOrderCompLine."Routing Link Code" <> '')))
              THEN
                WhseJnlLine."To Bin Code" := Location."Inbound Production Bin Code"
              ELSE
                WhseJnlLine."To Bin Code" := Location."Open Shop Floor Bin Code";
              GetBin("Location Code",WhseJnlLine."To Bin Code");
              WhseJnlLine."To Zone Code" := Bin."Zone Code";
            END ELSE
              WhseJnlLine."To Bin Code" := "Bin Code";
          END;
        END ELSE BEGIN
          IF Quantity > 0 THEN BEGIN
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Negative Adjmt.";
            IF Location."Directed Put-away and Pick" THEN BEGIN
              WhseJnlLine."From Bin Code" := Location."Inbound Production Bin Code";
              GetBin("Location Code",WhseJnlLine."From Bin Code");
              WhseJnlLine."From Zone Code" := Bin."Zone Code";
              WhseJnlLine."From Bin Type Code" := Bin."Bin Type Code";
            END ELSE
              WhseJnlLine."From Bin Code" := "Bin Code";
          END ELSE BEGIN
            WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::"Positive Adjmt.";
            IF Location."Directed Put-away and Pick" THEN BEGIN
              WhseJnlLine."To Bin Code" := Location."Inbound Production Bin Code";
              GetBin("Location Code",WhseJnlLine."To Bin Code");
              WhseJnlLine."To Zone Code" := Bin."Zone Code";
            END ELSE
              WhseJnlLine."To Bin Code" := "Bin Code";
          END;
        END;
        IF Location."Directed Put-away and Pick" THEN BEGIN
          WhseJnlLine.Quantity := Quantity;
          WhseJnlLine."Unit of Measure Code" := "Unit of Measure Code";
          WhseJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        END ELSE BEGIN
          WhseJnlLine.Quantity := "Quantity (Base)";
          WhseJnlLine."Unit of Measure Code" := GetBaseUOM("Item No.");
          WhseJnlLine."Qty. per Unit of Measure" := 1;
        END;
        WhseJnlLine."Qty. (Base)" := "Quantity (Base)";
        WhseJnlLine."Qty. (Absolute)" := ABS(WhseJnlLine.Quantity);
        WhseJnlLine."Qty. (Absolute, Base)" := ABS("Quantity (Base)");
        WhseJnlLine."Source Type" := DATABASE::"Item Journal Line";
        WhseJnlLine."Source Subtype" := 4; // Consumption Journal
        WhseMgt.GetSourceDocument(
          WhseJnlLine."Source Document",WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
        WhseJnlLine."Source No." := "Prod. Order No.";
        WhseJnlLine."Source Line No." := "Prod. Order Line No.";
        WhseJnlLine."Source Subline No." := "Prod. Order Comp. Line No.";
        WhseJnlLine."Source Code" := "Source Code";
        WhseJnlLine."Reason Code" := "Reason Code";
        WhseJnlLine."Registering No. Series" := "Posting No. Series";
        WhseJnlLine."Whse. Document Type" := WhseJnlLine."Whse. Document Type"::Production;
        WhseJnlLine."Whse. Document No." := "Prod. Order No.";
        WhseJnlLine."Whse. Document Line No." := "Prod. Order Line No.";
        WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Prod.";
        WhseJnlLine."Reference No." := "Prod. Order No.";
        IF Location."Directed Put-away and Pick" THEN
          CalcCubageAndWeight(
            "Item No.","Unit of Measure Code",WhseJnlLine."Qty. (Absolute)",
            WhseJnlLine.Cubage,WhseJnlLine.Weight);
        TransferWhseItemTrkg(WhseJnlLine,ItemJnlLine);
      END;
    END;

    PROCEDURE CheckWhseJnlLine@2(WhseJnlLine@1000 : Record 7311;SourceJnl@1001 : ' ,ItemJnl,OutputJnl,ConsumpJnl,WhseJnl';DecreaseQtyBase@1002 : Decimal;ToTransfer@1004 : Boolean);
    VAR
      BinContent@1003 : Record 7302;
      ItemTrackingCode@1005 : Record 6502;
    BEGIN
      GetItem(WhseJnlLine."Item No.");
      WITH WhseJnlLine DO BEGIN
        TESTFIELD("Location Code");
        GetLocation("Location Code");

        IF ItemTrackingCode.GET(Item."Item Tracking Code") THEN BEGIN
          IF ("Serial No." <> '') AND
             ("From Bin Code" <> '') AND
             ItemTrackingCode."SN Specific Tracking" AND
             ("From Bin Code" <> Location."Adjustment Bin Code") AND
             (((Location."Adjustment Bin Code" <> '') AND
               ("Entry Type" = "Entry Type"::Movement)) OR
              (("Entry Type" <> "Entry Type"::Movement) OR
               ("Source Document" = "Source Document"::"Reclass. Jnl.")))
              THEN
            CheckSerialNo(
              "Item No.","Variant Code","Location Code","From Bin Code",
              "Unit of Measure Code","Serial No.",CalcReservEntryQuantity(WhseJnlLine));

          IF ("Lot No." <> '') AND
             ("From Bin Code" <> '') AND
             ItemTrackingCode."Lot Specific Tracking" AND
             ("From Bin Code" <> Location."Adjustment Bin Code") AND
             (((Location."Adjustment Bin Code" <> '') AND
               ("Entry Type" = "Entry Type"::Movement)) OR
              (("Entry Type" <> "Entry Type"::Movement) OR
               ("Source Document" = "Source Document"::"Reclass. Jnl.")))
          THEN
            CheckLotNo(
              "Item No.","Variant Code","Location Code","From Bin Code",
              "Unit of Measure Code","Lot No.",CalcReservEntryQuantity(WhseJnlLine))
        END;

        IF "Entry Type" IN ["Entry Type"::"Positive Adjmt.","Entry Type"::Movement] THEN BEGIN
          IF SourceJnl = SourceJnl::" " THEN BEGIN
            IF Location."Directed Put-away and Pick" AND ("To Zone Code" = '') THEN
              ERROR(
                Text006,
                FIELDCAPTION("Zone Code"),"Whse. Document Type",
                FIELDCAPTION("Whse. Document No."),"Whse. Document No.",
                FIELDCAPTION("Line No."),"Whse. Document Line No.");
            IF "To Bin Code" = '' THEN
              ERROR(
                Text006,
                FIELDCAPTION("Bin Code"),"Whse. Document Type",
                FIELDCAPTION("Whse. Document No."),"Whse. Document No.",
                FIELDCAPTION("Line No."),"Whse. Document Line No.");
          END ELSE BEGIN
            IF ("Entry Type" <> "Entry Type"::Movement) OR ToTransfer THEN BEGIN
              IF Location."Directed Put-away and Pick" THEN
                TESTFIELD("To Zone Code");
              TESTFIELD("To Bin Code");
            END;
          END;
        END;
        IF "Entry Type" IN ["Entry Type"::"Negative Adjmt.","Entry Type"::Movement] THEN BEGIN
          IF SourceJnl = SourceJnl::" " THEN BEGIN
            IF Location."Directed Put-away and Pick" AND ("From Zone Code" = '') THEN
              ERROR(
                Text006,
                FIELDCAPTION("Zone Code"),"Whse. Document Type",
                FIELDCAPTION("Whse. Document No."),"Whse. Document No.",
                FIELDCAPTION("Line No."),"Whse. Document Line No.");
            IF "From Bin Code" = '' THEN
              ERROR(
                Text006,
                FIELDCAPTION("Bin Code"),"Whse. Document Type",
                FIELDCAPTION("Whse. Document No."),"Whse. Document No.",
                FIELDCAPTION("Line No."),"Whse. Document Line No.");
          END ELSE BEGIN
            IF ("Entry Type" <> "Entry Type"::Movement) OR NOT ToTransfer THEN BEGIN
              IF Location."Directed Put-away and Pick" THEN
                TESTFIELD("From Zone Code");
              TESTFIELD("From Bin Code");
            END;
          END;
        END;

        CASE SourceJnl OF
          SourceJnl::" ",SourceJnl::ItemJnl:
            BEGIN
              IF ("From Bin Code" <> '') AND
                 ("From Bin Code" <> Location."Adjustment Bin Code") AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                BinContent.GET(
                  "Location Code","From Bin Code",
                  "Item No.","Variant Code","Unit of Measure Code");
                BinContent.CheckDecreaseBinContent("Qty. (Absolute, Base)",DecreaseQtyBase);
              END;

              IF ("To Bin Code" <> '') AND
                 ("To Bin Code" <> Location."Adjustment Bin Code") AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                IF BinContent.GET(
                  "Location Code","To Bin Code",
                  "Item No.","Variant Code","Unit of Measure Code")
                THEN BEGIN
                  IF ("Reference Document" = "Reference Document"::"Posted Rcpt.") OR
                     ("Reference Document" = "Reference Document"::"Posted Rtrn. Rcpt.") OR
                     ("Reference Document" = "Reference Document"::"Posted T. Receipt")
                  THEN
                    BinContent.CheckIncreaseBinContent(
                      "Qty. (Absolute, Base)",0,Cubage,Weight,Cubage,Weight,TRUE)
                  ELSE
                    BinContent.CheckIncreaseBinContent(
                      "Qty. (Absolute, Base)","Qty. (Absolute, Base)",Cubage,Weight,Cubage,Weight,TRUE)
                END ELSE BEGIN
                  GetBin("Location Code","To Bin Code");
                  Bin.CheckIncreaseBin(
                    Bin.Code,"Item No.","Qty. (Absolute)",Cubage,Weight,Cubage,Weight,TRUE);
                END;
              END;
            END;
          SourceJnl::OutputJnl:
            BEGIN
              IF ("From Bin Code" <> '') AND
                 ("From Bin Code" <> Location."Outbound Production Bin Code") AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                BinContent.GET(
                  "Location Code","From Bin Code",
                  "Item No.","Variant Code","Unit of Measure Code");
                BinContent.CheckDecreaseBinContent("Qty. (Absolute, Base)",DecreaseQtyBase);
              END;

              IF ("To Bin Code" <> '') AND
                 ("To Bin Code" <> Location."Outbound Production Bin Code") AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                IF BinContent.GET(
                  "Location Code","To Bin Code",
                  "Item No.","Variant Code","Unit of Measure Code")
                THEN
                  BinContent.CheckIncreaseBinContent(
                    "Qty. (Absolute)","Qty. (Absolute)",Cubage,Weight,Cubage,Weight,TRUE)
                ELSE BEGIN
                  GetBin("Location Code","To Bin Code");
                  Bin.CheckIncreaseBin(
                    Bin.Code,"Item No.","Qty. (Absolute)",Cubage,Weight,Cubage,Weight,TRUE);
                END;
              END;
            END;
          SourceJnl::ConsumpJnl:
            BEGIN
              IF ("From Bin Code" <> '') AND
                 (NOT ("From Bin Code" IN [
                  Location."Inbound Production Bin Code",Location."Open Shop Floor Bin Code"])) AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                BinContent.GET(
                  "Location Code","From Bin Code",
                  "Item No.","Variant Code","Unit of Measure Code");
                BinContent.CheckDecreaseBinContent("Qty. (Absolute, Base)",DecreaseQtyBase);
              END;

              IF ("To Bin Code" <> '') AND
                 (NOT ("To Bin Code" IN [
                  Location."Inbound Production Bin Code",Location."Open Shop Floor Bin Code"])) AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                IF BinContent.GET(
                  "Location Code","To Bin Code",
                  "Item No.","Variant Code","Unit of Measure Code")
                THEN
                  BinContent.CheckIncreaseBinContent(
                    "Qty. (Absolute)","Qty. (Absolute)",Cubage,Weight,Cubage,Weight,TRUE)
                ELSE BEGIN
                  GetBin("Location Code","To Bin Code");
                  Bin.CheckIncreaseBin(
                    Bin.Code,"Item No.","Qty. (Absolute)",Cubage,Weight,Cubage,Weight,TRUE);
                END;
              END;
            END;
          SourceJnl::WhseJnl:
            BEGIN
              IF ("From Bin Code" <> '') AND
                 ("From Bin Code" <> Location."Adjustment Bin Code") AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                BinContent.GET(
                  "Location Code","From Bin Code",
                  "Item No.","Variant Code","Unit of Measure Code");
                BinContent.CheckDecreaseBinContent("Qty. (Absolute, Base)",DecreaseQtyBase);
              END;

              IF ("To Bin Code" <> '') AND
                 ("To Bin Code" <> Location."Adjustment Bin Code") AND
                 Location."Directed Put-away and Pick"
              THEN BEGIN
                GetBin("Location Code","To Bin Code");
                Bin.CheckWhseClass("Item No.");
              END;
            END;
        END;
      END;
    END;

    PROCEDURE CheckItemJnlLineFieldChange@54(ItemJnlLine@1000 : Record 83;xItemJnlLine@1001 : Record 83;CurrFieldCaption@1005 : Text[30]);
    VAR
      WhseItemJnl@1002 : Form 7324;
      WhsePhysInvJnl@1003 : Form 7326;
      WhseReclassJnl@1004 : Form 7365;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF "Bin Code" <> xItemJnlLine."Bin Code" THEN BEGIN
          GetLocation("Location Code");
          ShowError := Location."Directed Put-away and Pick";
        END;

        IF "New Bin Code" <> xItemJnlLine."New Bin Code" THEN BEGIN
          GetLocation("New Location Code");
          ShowError := Location."Directed Put-away and Pick";
        END;

        IF ShowError THEN
          ERROR(Text015,
            CurrFieldCaption,
            LOWERCASE(Location.TABLECAPTION),Location.Code,Location.FIELDCAPTION("Directed Put-away and Pick"));

        IF "Entry Type" IN
           ["Entry Type"::"Negative Adjmt.","Entry Type"::"Positive Adjmt.","Entry Type"::Sale,"Entry Type"::Purchase]
        THEN BEGIN
          IF ("Location Code" <> xItemJnlLine."Location Code") AND (xItemJnlLine."Location Code" <> '') THEN BEGIN
            GetLocation(xItemJnlLine."Location Code");
            ShowError := Location."Directed Put-away and Pick";
          END;

          IF (("Item No." <> xItemJnlLine."Item No.") AND (xItemJnlLine."Item No." <> '')) OR
             ((Quantity <> xItemJnlLine.Quantity) AND (xItemJnlLine.Quantity <> 0)) OR
             ("Variant Code" <> xItemJnlLine."Variant Code") OR
             ("Unit of Measure Code" <> xItemJnlLine."Unit of Measure Code") OR
             ("Entry Type" <> xItemJnlLine."Entry Type") OR
             ("Phys. Inventory" AND
             ("Qty. (Phys. Inventory)" <> xItemJnlLine."Qty. (Phys. Inventory)") AND
             (xItemJnlLine."Qty. (Phys. Inventory)" <> 0))
          THEN BEGIN
            GetLocation("Location Code");
            ShowError := Location."Directed Put-away and Pick";
          END;

          IF ShowError THEN BEGIN
            IF "Phys. Inventory" THEN
              ERROR(Text010,
                CurrFieldCaption,
                Location.TABLECAPTION, Location.Code, Location.FIELDCAPTION("Directed Put-away and Pick"),
                WhsePhysInvJnl.CAPTION);

            ERROR(Text010,
              CurrFieldCaption,
              Location.TABLECAPTION, Location.Code, Location.FIELDCAPTION("Directed Put-away and Pick"),
              WhseItemJnl.CAPTION);
          END;
        END;
      END;
    END;

    PROCEDURE CheckItemJnlLineLocation@57(VAR ItemJnlLine@1001 : Record 83;xItemJnlLine@1000 : Record 83);
    VAR
      WhseItemJnl@1005 : Form 7324;
      WhseReclassJnl@1002 : Form 7365;
      TransferOrder@1003 : Form 5740;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF "Entry Type" IN
           ["Entry Type"::"Negative Adjmt.","Entry Type"::"Positive Adjmt.","Entry Type"::Sale,"Entry Type"::Purchase]
        THEN BEGIN
          IF "Location Code" <> xItemJnlLine."Location Code" THEN BEGIN
            GetLocation(xItemJnlLine."Location Code");
            IF NOT Location."Directed Put-away and Pick" THEN BEGIN
              GetLocation("Location Code");
              IF Location."Directed Put-away and Pick" THEN
                ERROR(Text011,
                  LOWERCASE(Location.TABLECAPTION), Location.Code, Location.FIELDCAPTION("Directed Put-away and Pick"),
                  WhseItemJnl.CAPTION);
            END;
          END;
        END;

        IF "Entry Type" = "Entry Type"::Transfer THEN BEGIN
          IF ("New Location Code" <> "Location Code") AND
             (("Location Code" <> xItemJnlLine."Location Code") OR
             ("New Location Code" <> xItemJnlLine."New Location Code"))
          THEN BEGIN
            GetLocation("Location Code");
            ShowError := Location."Directed Put-away and Pick";
            IF NOT Location."Directed Put-away and Pick" THEN BEGIN
              GetLocation("New Location Code");
              ShowError := Location."Directed Put-away and Pick";
            END;
          END;

          IF ShowError THEN
            ERROR(Text012,
              LOWERCASE(Location.TABLECAPTION), Location.Code, Location.FIELDCAPTION("Directed Put-away and Pick"),
              TransferOrder.CAPTION);
        END;
      END;
    END;

    PROCEDURE CheckItemTrackingChange@55(TrackingSpecification@1000 : Record 336;xTrackingSpecification@1001 : Record 336);
    BEGIN
      WITH TrackingSpecification DO BEGIN
        IF (TrackingSpecification."Source Type" = DATABASE::"Item Journal Line") AND
           (TrackingSpecification."Item No." <> '') AND
           (TrackingSpecification."Location Code" <> '')
        THEN BEGIN
          IF TrackingSpecification."Source Subtype" IN [0,1,2,3] THEN BEGIN
            IF ("Lot No." <> xTrackingSpecification."Lot No.") OR
               ("Serial No." <> xTrackingSpecification."Serial No.") OR
               ((xTrackingSpecification."Expiration Date" <> 0D) AND
               ("Expiration Date" <> xTrackingSpecification."Expiration Date")) OR
               ("Quantity (Base)" <> xTrackingSpecification."Quantity (Base)")
            THEN BEGIN
              GetLocation("Location Code");
              IF Location."Directed Put-away and Pick" THEN BEGIN
                GetItem("Item No.");
                IF ItemTrackingCode."SN Warehouse Tracking" OR ItemTrackingCode."Lot Warehouse Tracking" THEN
                  ERROR(Text013,
                    LOWERCASE(Item.TABLECAPTION),
                    LOWERCASE(Location.TABLECAPTION), Location.Code, Location.FIELDCAPTION("Directed Put-away and Pick"));
              END;
            END;
          END;

          IF TrackingSpecification.IsReclass THEN BEGIN
            IF ("New Lot No." <> "Lot No.") AND
               (("Lot No." <> xTrackingSpecification."Lot No.") OR
                 ("New Lot No." <> xTrackingSpecification."New Lot No.")) OR
               ("New Serial No." <> "Serial No.") AND
               (("Serial No." <> xTrackingSpecification."Serial No.") OR
                 ("New Serial No." <> xTrackingSpecification."New Serial No.")) OR
               ("New Expiration Date" <> "Expiration Date") AND
               (("Expiration Date" <> xTrackingSpecification."Expiration Date") OR
                 ("New Expiration Date" <> xTrackingSpecification."New Expiration Date"))
            THEN BEGIN
              GetLocation("Location Code");
              IF Location."Directed Put-away and Pick" THEN BEGIN
                GetItem("Item No.");
                IF ItemTrackingCode."SN Warehouse Tracking" OR ItemTrackingCode."Lot Warehouse Tracking" THEN
                  ERROR(Text014,
                    LOWERCASE(Item.TABLECAPTION),
                    LOWERCASE(Location.TABLECAPTION), Location.Code, Location.FIELDCAPTION("Directed Put-away and Pick"));
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CheckMaximum@12(ExistingValueFieldCaption@1000 : Text[100];ExistingValue@1001 : Decimal;AdditionalValueFieldCaption@1005 : Text[100];AdditionalValue@1004 : Decimal;AdditionalValueTableCaption@1003 : Text[100];MaximumValueFieldCaption@1008 : Text[100];MaximumValue@1007 : Decimal;MaximumValueTableCaption@1006 : Text[100]);
    BEGIN
      IF ExistingValue + AdditionalValue <= MaximumValue THEN
        EXIT;
      IF Location."Bin Capacity Policy" = Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap." THEN
        ShowError := TRUE
      ELSE
        ShowError := NOT CONFIRM(
          STRSUBSTNO(
            Text001,
            ExistingValueFieldCaption,ExistingValue,MaximumValueTableCaption,
            AdditionalValueFieldCaption,AdditionalValue,AdditionalValueTableCaption,
            MaximumValueFieldCaption,MaximumValue,MaximumValueTableCaption) +
            Text002,FALSE);
      IF ShowError THEN
        ERROR(
          STRSUBSTNO(
            Text001,
            ExistingValueFieldCaption,ExistingValue,MaximumValueTableCaption,
            AdditionalValueFieldCaption,AdditionalValue,AdditionalValueTableCaption,
            MaximumValueFieldCaption,MaximumValue,MaximumValueTableCaption));
    END;

    PROCEDURE CheckAdjmtBin@3(Location@1002 : Record 14;Quantity@1000 : Decimal;PosEntryType@1001 : Boolean);
    BEGIN
      IF NOT Location."Directed Put-away and Pick" THEN
        EXIT;

      Location.TESTFIELD(Code);
      Location.TESTFIELD("Adjustment Bin Code");
      GetBin(Location.Code,Location."Adjustment Bin Code");

      // Test whether bin movement is blocked for current Entry Type
      IF (PosEntryType AND (Quantity > 0)) OR
         (NOT PosEntryType AND (Quantity < 0))
      THEN
        ShowError := (Bin."Block Movement" IN
          [Bin."Block Movement"::Inbound,Bin."Block Movement"::All])
      ELSE
        IF (PosEntryType AND (Quantity < 0)) OR
           (NOT PosEntryType AND (Quantity > 0))
        THEN
          ShowError := (Bin."Block Movement" IN
            [Bin."Block Movement"::Outbound,Bin."Block Movement"::All]);

      IF ShowError THEN
        Bin.FIELDERROR(
          "Block Movement",
          STRSUBSTNO(
            Text000,
            Bin."Block Movement"));
    END;

    PROCEDURE CheckBOMBin@28(Location@1001 : Record 14);
    BEGIN
      Location.TESTFIELD(Code);
      Location.TESTFIELD("Outbound BOM Bin Code");
      GetBin(Location.Code,Location."Outbound BOM Bin Code");
      IF Bin."Block Movement" IN [Bin."Block Movement"::Inbound,Bin."Block Movement"::All] THEN
        Bin.FIELDERROR(
          "Block Movement",
          STRSUBSTNO(
            Text000,
            Bin."Block Movement"));
    END;

    PROCEDURE CheckProductionOutbBin@6(ItemJnlLine@1001 : Record 83);
    BEGIN
      WITH ItemJnlLine DO BEGIN
        GetLocation("Location Code");
        Location.TESTFIELD("Outbound Production Bin Code");
        GetBin(
          "Location Code",Location."Outbound Production Bin Code");

        // Test whether bin movement is blocked for current Entry Type
        IF "Output Quantity" > 0 THEN
          ShowError := (Bin."Block Movement" IN
            [Bin."Block Movement"::Inbound,Bin."Block Movement"::All]);
        IF "Output Quantity" < 0 THEN
          ShowError := (Bin."Block Movement" IN
            [Bin."Block Movement"::Outbound,Bin."Block Movement"::All]);
      END;

      IF ShowError THEN
        Bin.FIELDERROR(
          "Block Movement",
          STRSUBSTNO(
            Text000,
            Bin."Block Movement"));
    END;

    PROCEDURE CheckProductionInbBin@7(ItemJnlLine@1001 : Record 83);
    BEGIN
      WITH ItemJnlLine DO BEGIN
        GetLocation("Location Code");

        GetProdOrderCompLine(
          3,"Prod. Order No.","Prod. Order Line No.","Prod. Order Comp. Line No.");
        IF (ProdOrderCompLine."Planning Level Code" = 0) AND
           ((ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::Manual) OR
            (ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::"Pick + Backward") OR
            ((ProdOrderCompLine."Flushing Method" = ProdOrderCompLine."Flushing Method"::"Pick + Forward") AND
             (ProdOrderCompLine."Routing Link Code" <> '')))
        THEN BEGIN
          Location.TESTFIELD("Inbound Production Bin Code");
          GetBin(
            "Location Code",Location."Inbound Production Bin Code");
        END ELSE BEGIN
          Location.TESTFIELD("Open Shop Floor Bin Code");
          GetBin(
            "Location Code",Location."Open Shop Floor Bin Code");
        END;

        // Test whether bin movement is blocked for current Entry Type
        IF Quantity > 0 THEN
          ShowError := (Bin."Block Movement" IN
            [Bin."Block Movement"::Inbound,Bin."Block Movement"::All]);
        IF Quantity < 0 THEN
          ShowError := (Bin."Block Movement" IN
            [Bin."Block Movement"::Outbound,Bin."Block Movement"::All]);
      END;

      IF ShowError THEN
        Bin.FIELDERROR(
          "Block Movement",
          STRSUBSTNO(
            Text000,
            Bin."Block Movement"));
    END;

    PROCEDURE CalcCubageAndWeight@15(ItemNo@1002 : Code[20];UOMCode@1003 : Code[10];Qty@1004 : Decimal;VAR Cubage@1000 : Decimal;VAR Weight@1001 : Decimal);
    BEGIN
      IF ItemNo <> '' THEN BEGIN
        GetItemUnitOfMeasure(ItemNo,UOMCode);
        Cubage := Qty * ItemUnitOfMeasure.Cubage;
        Weight := Qty * ItemUnitOfMeasure.Weight;
      END ELSE BEGIN
        Cubage := 0;
        Weight := 0;
      END;
    END;

    PROCEDURE GetDefaultLocation@16() : Code[10];
    VAR
      WhseEmployee@1000 : Record 7301;
    BEGIN
      IF USERID <> '' THEN BEGIN
        WhseEmployee.SETCURRENTKEY(Default);
        WhseEmployee.SETRANGE(Default,TRUE);
        WhseEmployee.SETRANGE("User ID",USERID);
        IF NOT WhseEmployee.FIND('-') THEN
          ERROR(Text003,USERID);
        EXIT(WhseEmployee."Location Code");
      END;
    END;

    PROCEDURE GetDefaultBin@4(ItemNo@1000 : Code[20];VariantCode@1002 : Code[10];LocationCode@1001 : Code[10];VAR BinCode@1004 : Code[20]) : Boolean;
    VAR
      BinContent@1005 : Record 7302;
      Location@1003 : Record 14;
    BEGIN
      Location.GET(LocationCode);
      IF NOT Location."Directed Put-away and Pick" THEN
        IF NOT (Location."Bin Mandatory" AND (NOT Location."Require Receive") AND (NOT Location."Require Shipment")) THEN
          EXIT(FALSE);

      BinContent.SETCURRENTKEY(Default);
      BinContent.SETRANGE(Default,TRUE);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      IF BinContent.FIND('-') THEN BEGIN
        BinCode := BinContent."Bin Code";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckDefaultBin@25(ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];LocationCode@1005 : Code[10];BinCode@1003 : Code[20]) : Boolean;
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.SETCURRENTKEY(Default);
      BinContent.SETRANGE(Default,TRUE);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      BinContent.SETFILTER("Bin Code",'<>%1',BinCode);
      IF BinContent.FIND('-') THEN
        EXIT(TRUE);
    END;

    PROCEDURE CheckBalanceQtyToHandle@19(VAR WhseActivLine2@1000 : Record 5767);
    VAR
      WhseActivLine@1004 : Record 5767;
      WhseActivLine3@1007 : Record 5767;
      TempWhseActivLine@1005 : TEMPORARY Record 5767;
      QtyToPick@1002 : Decimal;
      QtyToPutAway@1003 : Decimal;
      ErrorText@1001 : Text[250];
    BEGIN
      WhseActivLine.COPY(WhseActivLine2);
      WITH WhseActivLine DO BEGIN
        SETCURRENTKEY("Activity Type","No.","Item No.","Variant Code","Action Type");
        SETRANGE("Activity Type","Activity Type");
        SETRANGE("No.","No.");
        SETRANGE("Action Type");
        IF FINDSET THEN
          REPEAT
            IF NOT TempWhseActivLine.GET("Activity Type","No.","Line No.") THEN BEGIN
              WhseActivLine3.COPY(WhseActivLine);

              WhseActivLine3.SETRANGE("Item No.","Item No.");
              WhseActivLine3.SETRANGE("Variant Code","Variant Code");
              WhseActivLine3.SETRANGE("Serial No.","Serial No.");
              WhseActivLine3.SETRANGE("Lot No.","Lot No.");

              IF (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Take) OR
                 (WhseActivLine2.GETFILTER("Action Type") = '')
              THEN BEGIN
                WhseActivLine3.SETRANGE("Action Type",WhseActivLine3."Action Type"::Take);
                IF WhseActivLine3.FINDSET THEN
                  REPEAT
                    QtyToPick := QtyToPick + WhseActivLine3."Qty. to Handle (Base)";
                    TempWhseActivLine := WhseActivLine3;
                    TempWhseActivLine.INSERT;
                  UNTIL WhseActivLine3.NEXT = 0;
                END;

              IF (WhseActivLine2."Action Type" = WhseActivLine2."Action Type"::Place) OR
                 (WhseActivLine2.GETFILTER("Action Type") = '')
              THEN BEGIN
                WhseActivLine3.SETRANGE("Action Type",WhseActivLine3."Action Type"::Place);
                IF WhseActivLine3.FINDSET THEN
                  REPEAT
                    QtyToPutAway := QtyToPutAway + WhseActivLine3."Qty. to Handle (Base)";
                    TempWhseActivLine := WhseActivLine3;
                    TempWhseActivLine.INSERT;
                  UNTIL WhseActivLine3.NEXT = 0;
              END;

              IF QtyToPick <> QtyToPutAway THEN BEGIN
                IF (WhseActivLine3.GETFILTER("Serial No.") <> '') OR
                   (WhseActivLine3.GETFILTER("Lot No.") <> '')
                THEN
                  ErrorText :=
                    STRSUBSTNO(
                      Text016,
                      FIELDCAPTION("Item No."),"Item No.",
                      FIELDCAPTION("Variant Code"),"Variant Code",
                      FIELDCAPTION("Lot No."),"Lot No.",
                      FIELDCAPTION("Serial No."),"Serial No.",
                      QtyToPick,QtyToPutAway)
                ELSE
                  ErrorText :=
                    STRSUBSTNO(
                      Text005,
                      FIELDCAPTION("Item No."),"Item No.",FIELDCAPTION("Variant Code"),
                      "Variant Code",QtyToPick,QtyToPutAway);
                HandleError(ErrorText);
              END;

              QtyToPick := 0;
              QtyToPutAway := 0;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CheckPutAwayAvailability@14(BinCode@1006 : Code[20];CheckFieldCaption@1003 : Text[100];CheckTableCaption@1002 : Text[100];ValueToPutAway@1000 : Decimal;ValueAvailable@1001 : Decimal;Prohibit@1005 : Boolean);
    BEGIN
      IF ValueToPutAway <= ValueAvailable THEN
        EXIT;
      IF Prohibit THEN
        ERROR(
          STRSUBSTNO(
            Text004,CheckFieldCaption,ValueToPutAway,ValueAvailable,
            CheckTableCaption,BinCode))
      ELSE
        IF NOT CONFIRM(
          STRSUBSTNO(
            Text004,CheckFieldCaption,ValueToPutAway,ValueAvailable,
            CheckTableCaption,BinCode) + STRSUBSTNO(Text002,CheckTableCaption),FALSE)
        THEN
          ERROR(Text007);
    END;

    PROCEDURE InitErrorLog@27();
    BEGIN
      LogErrors := TRUE;
      TempErrorLog.DELETEALL;
      NextLineNo := 1;
    END;

    LOCAL PROCEDURE HandleError@30(ErrorText@1000 : Text[250]);
    VAR
      Position@1001 : Integer;
    BEGIN
      IF LogErrors THEN BEGIN
        Position := STRPOS(ErrorText,'\');
        IF Position = 0 THEN
          InsertErrorLog(ErrorText)
        ELSE BEGIN
          REPEAT
            InsertErrorLog(COPYSTR(ErrorText,1,Position - 1));
            ErrorText := DELSTR(ErrorText,1,Position);
            Position := STRPOS(ErrorText,'\');
          UNTIL Position = 0;
          InsertErrorLog(ErrorText);
          InsertErrorLog('');
        END;
      END ELSE
        ERROR(ErrorText);
    END;

    LOCAL PROCEDURE InsertErrorLog@20(ErrorText@1000 : Text[250]);
    BEGIN
      TempErrorLog."Line No." := NextLineNo;
      TempErrorLog.Text := ErrorText;
      TempErrorLog.INSERT;
      NextLineNo := NextLineNo + 1;
    END;

    PROCEDURE GetErrorLog@37(VAR NewTempErrorLog@1000 : TEMPORARY Record 2000000040);
    BEGIN
      NewTempErrorLog.DELETEALL;
      IF TempErrorLog.FIND('-') THEN
        REPEAT
          NewTempErrorLog := TempErrorLog;
          NewTempErrorLog.INSERT;
        UNTIL TempErrorLog.NEXT = 0;
    END;

    PROCEDURE LocationIsAllowed@17(LocationCode@1001 : Code[10]) : Boolean;
    VAR
      WhseEmployee@1002 : Record 7301;
    BEGIN
      IF WhseEmployee.GET(USERID,LocationCode) OR (USERID = '') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE LocationIsAllowedToView@56(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF (LocationCode = '') OR LocationIsAllowed(LocationCode) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@8(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      IF (Bin."Location Code" <> LocationCode) OR
         (Bin.Code <> BinCode)
      THEN
        Bin.GET(LocationCode,BinCode);

      GetLocation(LocationCode);
      IF Location."Directed Put-away and Pick" THEN
        Bin.TESTFIELD("Zone Code");
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@9(ItemNo@1000 : Code[20];UOMCode@1001 : Code[10]);
    BEGIN
      IF (ItemUnitOfMeasure."Item No." <> ItemNo) OR
         (ItemUnitOfMeasure.Code <> UOMCode)
      THEN
        IF NOT ItemUnitOfMeasure.GET(ItemNo,UOMCode) THEN
          ItemUnitOfMeasure.INIT;
    END;

    PROCEDURE GetBaseUOM@31(ItemNo@1000 : Code[20]) : Code[10];
    BEGIN
      GetItem(ItemNo);
      EXIT(Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE GetItem@35(ItemNo@1000 : Code[20]);
    BEGIN
      IF ItemNo = Item."No." THEN
        EXIT;

      Item.GET(ItemNo);
      IF Item."Item Tracking Code" <> '' THEN
        ItemTrackingCode.GET(Item."Item Tracking Code")
      ELSE
        CLEAR(ItemTrackingCode);
    END;

    LOCAL PROCEDURE GetProdOrderCompLine@11(Status@1000 : Option;ProdOrderNo@1001 : Code[20];ProdOrderLineNo@1002 : Integer;ProdOrdCompLineNo@1003 : Integer) : Boolean;
    BEGIN
      IF (ProdOrderNo = '') OR
         (ProdOrderLineNo = 0) OR
         (ProdOrdCompLineNo = 0)
      THEN
        EXIT(FALSE);
      IF (ProdOrderCompLine.Status <> Status) OR
         (ProdOrderCompLine."Prod. Order No." <> ProdOrderNo) OR
         (ProdOrderCompLine."Prod. Order Line No." <> ProdOrderLineNo) OR
         (ProdOrderCompLine."Line No." <> ProdOrdCompLineNo)
      THEN BEGIN
        IF ProdOrderCompLine.GET(Status,ProdOrderNo,ProdOrderLineNo,ProdOrdCompLineNo) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END ELSE
        EXIT(TRUE);
    END;

    PROCEDURE ShowWhseDocLine@13(WhseDocType@1008 : 'Receipt,Posted Receipt,Shipment,Internal Put-away,Internal Pick,Production';WhseDocNo@1009 : Code[20];WhseDocLineNo@1010 : Integer);
    VAR
      WhseRcptLine@1011 : Record 7317;
      WhseShptLine@1007 : Record 7321;
      PostedWhseRcptLine@1006 : Record 7319;
      WhseInternalPickLine@1005 : Record 7334;
      WhseInternalPutawayLine@1004 : Record 7332;
      ProdOrderLine@1013 : Record 5406;
      WhseShptLinesLookup@1003 : Form 7341;
      WhseRcptLinesLookup@1012 : Form 7342;
      PostedWhseRcptLinesLookup@1002 : Form 7363;
      WhseInternalPickLinesLookup@1001 : Form 7360;
      WhseIntPutawayLinesLookup@1000 : Form 7361;
      ProdOrderLinesLookup@1014 : Form 5406;
    BEGIN
      CASE WhseDocType OF
        WhseDocType::Receipt:
          BEGIN
            WhseRcptLine.SETRANGE("No.",WhseDocNo);
            WhseRcptLine.SETRANGE("Line No.",WhseDocLineNo);
            WhseRcptLinesLookup.SETTABLEVIEW(WhseRcptLine);
            WhseRcptLinesLookup.RUNMODAL;
          END;
        WhseDocType::"Posted Receipt":
          BEGIN
            PostedWhseRcptLine.SETRANGE("No.",WhseDocNo);
            PostedWhseRcptLine.SETRANGE("Line No.",WhseDocLineNo);
            PostedWhseRcptLinesLookup.SETTABLEVIEW(PostedWhseRcptLine);
            PostedWhseRcptLinesLookup.RUNMODAL;
          END;
        WhseDocType::Shipment:
          BEGIN
            WhseShptLine.SETRANGE("No.",WhseDocNo);
            WhseShptLine.SETRANGE("Line No.",WhseDocLineNo);
            WhseShptLinesLookup.SETTABLEVIEW(WhseShptLine);
            WhseShptLinesLookup.RUNMODAL;
          END;
        WhseDocType::"Internal Put-away":
          BEGIN
            WhseInternalPutawayLine.SETRANGE("No.",WhseDocNo);
            WhseInternalPutawayLine.SETRANGE("Line No.",WhseDocLineNo);
            WhseIntPutawayLinesLookup.SETTABLEVIEW(WhseInternalPutawayLine);
            WhseIntPutawayLinesLookup.RUNMODAL;
          END;
        WhseDocType::"Internal Pick":
          BEGIN
            WhseInternalPickLine.SETRANGE("No.",WhseDocNo);
            WhseInternalPickLine.SETRANGE("Line No.",WhseDocLineNo);
            WhseInternalPickLinesLookup.SETTABLEVIEW(WhseInternalPickLine);
            WhseInternalPickLinesLookup.RUNMODAL;
          END;
        WhseDocType::Production:
          BEGIN
            ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
            ProdOrderLine.SETRANGE("Prod. Order No.",WhseDocNo);
            ProdOrderLine.SETRANGE("Line No.",WhseDocLineNo);
            ProdOrderLinesLookup.SETTABLEVIEW(ProdOrderLine);
            ProdOrderLinesLookup.RUNMODAL;
          END;
      END;
    END;

    PROCEDURE ShowPostedWhseShptLine@46(WhseDocNo@1009 : Code[20];WhseDocLineNo@1010 : Integer);
    VAR
      PostedWhseShptLine@1007 : Record 7323;
      PostedWhseShptLinesLookup@1003 : Form 7362;
    BEGIN
      PostedWhseShptLine.SETCURRENTKEY("Whse. Shipment No.","Whse Shipment Line No.");
      PostedWhseShptLine.SETRANGE("Whse. Shipment No.",WhseDocNo);
      PostedWhseShptLine.SETRANGE("Whse Shipment Line No.",WhseDocLineNo);
      PostedWhseShptLinesLookup.SETTABLEVIEW(PostedWhseShptLine);
      PostedWhseShptLinesLookup.RUNMODAL;
    END;

    PROCEDURE ShowSourceDocLine@21(SourceType@1004 : Integer;SourceSubType@1011 : Option;SourceNo@1012 : Code[20];SourceLineNo@1013 : Integer;SourceSubLineNo@1014 : Integer);
    VAR
      SalesLine@1001 : Record 37;
      PurchLine@1002 : Record 39;
      TransLine@1003 : Record 5741;
      ProdOrderComp@1005 : Record 5407;
      SalesLinesLookup@1007 : Form 516;
      PurchLinesLookup@1008 : Form 518;
      TransLinesLookup@1009 : Form 5749;
      ProdOrderCompLookup@1010 : Form 5407;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.SETRANGE("Document Type",SourceSubType);
            SalesLine.SETRANGE("Document No.",SourceNo);
            SalesLine.SETRANGE("Line No.",SourceLineNo);
            SalesLinesLookup.SETTABLEVIEW(SalesLine);
            SalesLinesLookup.RUNMODAL;
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.SETRANGE("Document Type",SourceSubType);
            PurchLine.SETRANGE("Document No.",SourceNo);
            PurchLine.SETRANGE("Line No.",SourceLineNo);
            PurchLinesLookup.SETTABLEVIEW(PurchLine);
            PurchLinesLookup.RUNMODAL;
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.SETRANGE("Document No.",SourceNo);
            TransLine.SETRANGE("Line No.",SourceLineNo);
            TransLinesLookup.SETTABLEVIEW(TransLine);
            TransLinesLookup.RUNMODAL;
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.SETRANGE(Status,SourceSubType);
            ProdOrderComp.SETRANGE("Prod. Order No.",SourceNo);
            ProdOrderComp.SETRANGE("Prod. Order Line No.",SourceLineNo);
            ProdOrderComp.SETRANGE("Line No.",SourceSubLineNo);
            CASE SourceSubType OF
              3: // Released
                BEGIN
                  ProdOrderCompLookup.SETTABLEVIEW(ProdOrderComp);
                  ProdOrderCompLookup.RUNMODAL;
                END;
            END;
          END;
      END;
    END;

    PROCEDURE ShowPostedSourceDoc@22(PostedSourceDoc@1004 : ' ,Posted Receipt,,Posted Return Receipt,,Posted Shipment,,Posted Return Shipment,,Posted Transfer Receipt,Posted Transfer Shipment';PostedSourceNo@1012 : Code[20]);
    VAR
      PostedSalesShptHeader@1001 : Record 110;
      PostedPurchRcptHeader@1000 : Record 120;
      PostedRtrnShptHeader@1002 : Record 6650;
      PostedRtrnRcptHeader@1005 : Record 6660;
      TransShptHeader@1003 : Record 5744;
      TransRcptHeader@1011 : Record 5746;
      PostedSalesShptLookup@1007 : Form 130;
      PostedPurchRcptLookup@1006 : Form 136;
      PostedRtrnShptLookup@1008 : Form 6650;
      PostedRtrnRcptLookup@1010 : Form 6660;
      TransShptLookup@1009 : Form 5743;
      TransRcptLookup@1013 : Form 5745;
    BEGIN
      CASE PostedSourceDoc OF
        PostedSourceDoc::"Posted Shipment":
          BEGIN
            PostedSalesShptHeader.SETRANGE("No.",PostedSourceNo);
            PostedSalesShptLookup.SETTABLEVIEW(PostedSalesShptHeader);
            PostedSalesShptLookup.RUNMODAL;
          END;
        PostedSourceDoc::"Posted Receipt":
          BEGIN
            PostedPurchRcptHeader.SETRANGE("No.",PostedSourceNo);
            PostedPurchRcptLookup.SETTABLEVIEW(PostedPurchRcptHeader);
            PostedPurchRcptLookup.RUNMODAL;
          END;
        PostedSourceDoc::"Posted Return Shipment":
          BEGIN
            PostedRtrnShptHeader.SETRANGE("No.",PostedSourceNo);
            PostedRtrnShptLookup.SETTABLEVIEW(PostedRtrnShptHeader);
            PostedRtrnShptLookup.RUNMODAL;
          END;
        PostedSourceDoc::"Posted Return Receipt":
          BEGIN
            PostedRtrnRcptHeader.SETRANGE("No.",PostedSourceNo);
            PostedRtrnRcptLookup.SETTABLEVIEW(PostedRtrnRcptHeader);
            PostedRtrnRcptLookup.RUNMODAL;
          END;
        PostedSourceDoc::"Posted Transfer Shipment":
          BEGIN
            TransShptHeader.SETRANGE("No.",PostedSourceNo);
            TransShptLookup.SETTABLEVIEW(TransShptHeader);
            TransShptLookup.RUNMODAL;
          END;
        PostedSourceDoc::"Posted Transfer Receipt":
          BEGIN
            TransRcptHeader.SETRANGE("No.",PostedSourceNo);
            TransRcptLookup.SETTABLEVIEW(TransRcptHeader);
            TransRcptLookup.RUNMODAL;
          END;
      END;
    END;

    PROCEDURE ShowSourceDoc@23(SourceType@1004 : Integer;SourceSubType@1011 : Option;SourceNo@1012 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
      PurchHeader@1002 : Record 38;
      TransHeader@1003 : Record 5740;
      SalesHeaderList@1007 : Form 45;
      PurchHeaderList@1008 : Form 53;
      TransHeaderList@1009 : Form 5742;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          BEGIN
            SalesHeader.SETRANGE("Document Type",SourceSubType);
            IF SalesHeader.GET(SourceSubType,SourceNo) THEN
              SalesHeaderList.SETRECORD(SalesHeader);
            SalesHeaderList.SETTABLEVIEW(SalesHeader);
            SalesHeaderList.RUNMODAL;
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchHeader.SETRANGE("Document Type",SourceSubType);
            IF PurchHeader.GET(SourceSubType,SourceNo) THEN
              PurchHeaderList.SETRECORD(PurchHeader);
            PurchHeaderList.SETTABLEVIEW(PurchHeader);
            PurchHeaderList.RUNMODAL;
          END;
        DATABASE::"Transfer Line":
          BEGIN
            IF TransHeader.GET(SourceNo) THEN
              TransHeaderList.SETRECORD(TransHeader);
            TransHeaderList.RUNMODAL;
          END;
      END;
    END;

    PROCEDURE ShowSourceDocCard@41(SourceType@1002 : Integer;SourceSubType@1001 : Option;SourceNo@1000 : Code[20]);
    VAR
      SalesHeader@1008 : Record 36;
      PurchHeader@1007 : Record 38;
      TransHeader@1006 : Record 5740;
      ProdOrder@1009 : Record 5405;
      SalesOrder@1005 : Form 42;
      SalesReturnOrder@1011 : Form 6630;
      PurchOrder@1004 : Form 50;
      PurchReturnOrder@1012 : Form 6640;
      TransOrder@1003 : Form 5740;
      RelProdOrder@1010 : Form 99000831;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          BEGIN
            SalesHeader.SETRANGE("Document Type",SourceSubType);
            IF SalesHeader.GET(SourceSubType,SourceNo) THEN
              IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN
                SalesOrder.SETRECORD(SalesHeader)
              ELSE
                SalesReturnOrder.SETRECORD(SalesHeader);
            IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN BEGIN
              SalesOrder.SETTABLEVIEW(SalesHeader);
              SalesOrder.RUNMODAL;
            END ELSE BEGIN
              SalesReturnOrder.SETTABLEVIEW(SalesHeader);
              SalesReturnOrder.RUNMODAL;
            END;
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchHeader.SETRANGE("Document Type",SourceSubType);
            IF PurchHeader.GET(SourceSubType,SourceNo) THEN
              IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
                PurchOrder.SETRECORD(PurchHeader)
              ELSE
                PurchReturnOrder.SETRECORD(PurchHeader);
            IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN BEGIN
              PurchOrder.SETTABLEVIEW(PurchHeader);
              PurchOrder.RUNMODAL;
            END ELSE BEGIN
              PurchReturnOrder.SETTABLEVIEW(PurchHeader);
              PurchReturnOrder.RUNMODAL;
            END;
          END;
        DATABASE::"Transfer Line":
          BEGIN
            IF TransHeader.GET(SourceNo) THEN
              TransOrder.SETRECORD(TransHeader);
            TransOrder.RUNMODAL;
          END;
        DATABASE::"Prod. Order Line", DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrder.SETRANGE(Status,SourceSubType);
            IF ProdOrder.GET(SourceSubType,SourceNo) THEN
              RelProdOrder.SETRECORD(ProdOrder);
            RelProdOrder.SETTABLEVIEW(ProdOrder);
            RelProdOrder.RUNMODAL;
          END;
      END;
    END;

    PROCEDURE TransferWhseItemTrkg@24(VAR WhseJnlLine@1000 : Record 7311;ItemJnlLine@1001 : Record 83);
    VAR
      ItemTrackingMgt@1002 : Codeunit 6500;
      WhseSNRequired@1003 : Boolean;
      WhseLNRequired@1004 : Boolean;
    BEGIN
      ItemTrackingMgt.CheckWhseItemTrkgSetup(
        ItemJnlLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
      IF NOT (WhseSNRequired OR WhseLNRequired) THEN
        EXIT;
      IF WhseSNRequired THEN BEGIN
        ItemJnlLine.TESTFIELD("Qty. per Unit of Measure",1);
        WhseJnlLine."Serial No." := ItemJnlLine."Serial No.";
      END;
      IF WhseLNRequired THEN
        WhseJnlLine."Lot No." := ItemJnlLine."Lot No.";
      WhseJnlLine."Warranty Date" := ItemJnlLine."Warranty Date";
      WhseJnlLine."Expiration Date" := ItemJnlLine."Item Expiration Date";
    END;

    PROCEDURE SetBOMLine@26(BomJnlLine@1000 : Record 89;VAR WhseJnlLine@1001 : Record 7311);
    BEGIN
      WITH BomJnlLine DO BEGIN
        WhseJnlLine."Journal Template Name" := "Journal Template Name";
        WhseJnlLine."Journal Batch Name" := "Journal Batch Name";
        IF ("Journal Template Name" <> '') AND ("Journal Batch Name" <> '') THEN BEGIN
          WhseJnlLine."Source Type" := DATABASE::"BOM Journal Line";
          WhseMgt.GetSourceDocument(
            WhseJnlLine."Source Document",WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
          WhseJnlLine."Source No." := "Document No.";
          WhseJnlLine."Source Line No." := "Line No.";
        END;
        WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"BOM Journal";
        WhseJnlLine."Reference No." := "Document No.";
      END;
    END;

    PROCEDURE SetTransferLine@29(TransferLine@1000 : Record 5741;VAR WhseJnlLine@1001 : Record 7311;PostingType@1002 : 'Shipment,Receipt';PostedDocNo@1003 : Code[20]);
    BEGIN
      WITH TransferLine DO BEGIN
        WhseJnlLine."Source Type" := DATABASE::"Transfer Line";
        WhseJnlLine."Source Subtype" := PostingType;
        WhseMgt.GetSourceDocument(
          WhseJnlLine."Source Document",WhseJnlLine."Source Type",WhseJnlLine."Source Subtype");
        WhseJnlLine."Source No." := "Document No.";
        WhseJnlLine."Source Line No." := "Line No.";
        IF PostingType = PostingType::Shipment THEN
          WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Posted T. Shipment"
        ELSE
          WhseJnlLine."Reference Document" := WhseJnlLine."Reference Document"::"Posted T. Receipt";
        WhseJnlLine."Reference No." := PostedDocNo;
        WhseJnlLine."Entry Type" := PostingType;
      END;
    END;

    PROCEDURE SerialNoOnInventory@34(LocationCode@1003 : Code[10];ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];SerialNo@1002 : Code[20]) : Boolean;
    VAR
      WhseEntry@1004 : Record 7312;
    BEGIN
      WITH WhseEntry DO BEGIN
        GetLocation(LocationCode);
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Variant Code",
          "Unit of Measure Code","Lot No.","Serial No.");
        SETRANGE("Item No.",ItemNo);
        SETFILTER("Bin Code",'<>%1',Location."Adjustment Bin Code");
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE("Serial No.",SerialNo);
        CALCSUMS("Qty. (Base)");
        EXIT("Qty. (Base)" > 0);
      END;
    END;

    LOCAL PROCEDURE CheckSerialNo@33(ItemNo@1002 : Code[20];VariantCode@1001 : Code[10];LocationCode@1005 : Code[10];BinCode@1004 : Code[20];UOMCode@1007 : Code[10];SerialNo@1000 : Code[20];QuantityBase@1003 : Decimal);
    VAR
      BinContent@1006 : Record 7302;
    BEGIN
      BinContent.GET(LocationCode,BinCode,ItemNo,VariantCode,UOMCode);
      BinContent.SETRANGE("Serial No. Filter",SerialNo);
      BinContent.CALCFIELDS("Quantity (Base)");
      IF BinContent."Quantity (Base)" < ABS(QuantityBase) THEN
        BinContent.FIELDERROR(
          "Quantity (Base)",STRSUBSTNO(Text000,ABS(QuantityBase) - 1));
    END;

    LOCAL PROCEDURE CheckLotNo@32(ItemNo@1006 : Code[20];VariantCode@1005 : Code[10];LocationCode@1004 : Code[10];BinCode@1003 : Code[20];UOMCode@1002 : Code[10];LotNo@1001 : Code[20];QuantityBase@1000 : Decimal);
    VAR
      BinContent@1007 : Record 7302;
    BEGIN
      BinContent.GET(LocationCode,BinCode,ItemNo,VariantCode,UOMCode);
      BinContent.SETRANGE("Lot No. Filter",LotNo);
      BinContent.CALCFIELDS("Quantity (Base)");
      IF BinContent."Quantity (Base)" < ABS(QuantityBase) THEN
        BinContent.FIELDERROR(
          "Quantity (Base)",STRSUBSTNO(Text000,BinContent."Quantity (Base)" - ABS(QuantityBase)));
    END;

    PROCEDURE BinLookUp@38(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10];ZoneCode@1004 : Code[10]) : Code[20];
    VAR
      Bin@1003 : Record 7354;
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Item Filter",ItemNo);
      Bin.SETRANGE("Variant Filter",VariantCode);
      IF ZoneCode <> '' THEN
        Bin.SETRANGE("Zone Code",ZoneCode);
      IF FORM.RUNMODAL(0,Bin) = ACTION::LookupOK THEN
        EXIT(Bin.Code);
    END;

    PROCEDURE BinContentLookUp@39(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10];ZoneCode@1004 : Code[10];CurrBinCode@1005 : Code[20]) : Code[20];
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      EXIT(BinContentLookUp2(LocationCode,ItemNo,VariantCode,ZoneCode,'','',CurrBinCode));
    END;

    PROCEDURE BinContentLookUp2@53(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10];ZoneCode@1004 : Code[10];LotNo@1005 : Code[20];SerialNo@1006 : Code[20];CurrBinCode@1007 : Code[20]) : Code[20];
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      GetItem(ItemNo);
      BinContent.SETCURRENTKEY("Location Code","Item No.","Variant Code");
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);

      IF ItemTrackingCode."SN Warehouse Tracking" THEN
        IF SerialNo <> '' THEN
          BinContent.SETRANGE("Serial No. Filter",SerialNo);
      IF ItemTrackingCode."Lot Warehouse Tracking" THEN
        IF LotNo <> '' THEN
          BinContent.SETRANGE("Lot No. Filter",LotNo);

      IF ZoneCode <> '' THEN
        BinContent.SETRANGE("Zone Code",ZoneCode);

      BinContent.SETRANGE("Bin Code",CurrBinCode);
      IF BinContent.FINDFIRST THEN;
      BinContent.SETRANGE("Bin Code");

      IF FORM.RUNMODAL(0,BinContent) = ACTION::LookupOK THEN
        EXIT(BinContent."Bin Code");
    END;

    PROCEDURE FindBin@36(LocationCode@1004 : Code[10];BinCode@1005 : Code[20];ZoneCode@1001 : Code[10]);
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      IF ZoneCode <> '' THEN BEGIN
        Bin.SETCURRENTKEY("Location Code","Zone Code",Code);
        Bin.SETRANGE("Location Code",LocationCode);
        Bin.SETRANGE("Zone Code",ZoneCode);
        Bin.SETRANGE(Code,BinCode);
        Bin.FIND('-');
      END ELSE
        Bin.GET(LocationCode,BinCode);
    END;

    PROCEDURE FindBinContent@40(LocationCode@1002 : Code[10];BinCode@1004 : Code[20];ItemNo@1001 : Code[20];VariantCode@1000 : Code[10];ZoneCode@1005 : Code[10]);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Bin Code",BinCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      IF ZoneCode <> '' THEN
        BinContent.SETRANGE("Zone Code",ZoneCode);
      BinContent.FIND('-');
    END;

    PROCEDURE CalcInvtAvailQty@45(Item@1000 : Record 27;Location@1001 : Record 14;VariantCode@1002 : Code[10]) : Decimal;
    VAR
      CreatePick@1008 : Codeunit 7312;
      QtyReceivedNotAvail@1004 : Decimal;
      QtyAssgndtoPick@1003 : Decimal;
      QtyShipped@1005 : Decimal;
      QtyReservedOnPickShip@1006 : Decimal;
      SubTotal@1007 : Decimal;
    BEGIN
      WITH Item DO BEGIN
        SETRANGE("Location Filter",Location.Code);
        SETRANGE("Variant Filter",VariantCode);
        IF Location."Require Shipment" THEN
          CALCFIELDS(Inventory,"Reserved Qty. on Inventory","Qty. Picked")
        ELSE
          CALCFIELDS(Inventory,"Reserved Qty. on Inventory");

        IF Location."Require Receive" AND Location."Require Put-away" THEN
          QtyReceivedNotAvail := CalcQtyRcvdNotAvailable(Location.Code,Item."No.",VariantCode);

        QtyAssgndtoPick := CalcQtyAssgndtoPick(Location,Item."No.",VariantCode,'','');
        QtyShipped := CalcQtyShipped(Location,Item."No.",VariantCode);
        QtyReservedOnPickShip := CreatePick.CalcReservQtyOnPicksShips(Location.Code,"No.",VariantCode);

        // The reserved qty might exceed the qty available in warehouse and thereby
        // having reserved from the qty not yet put-away
        IF (Inventory - QtyReceivedNotAvail - QtyAssgndtoPick - "Qty. Picked" + QtyShipped) <
           (ABS("Reserved Qty. on Inventory") - QtyReservedOnPickShip)
        THEN
          EXIT(0);

        SubTotal :=
          Inventory - QtyReceivedNotAvail - QtyAssgndtoPick -
          ABS("Reserved Qty. on Inventory") - "Qty. Picked" + QtyShipped;

        IF (SubTotal + QtyReceivedNotAvail) < ABS("Reserved Qty. on Inventory") THEN
          EXIT(SubTotal);

        EXIT(SubTotal + ABS("Reserved Qty. on Inventory"));
      END;
    END;

    PROCEDURE CalcQtyRcvdNotAvailable@47(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];VariantCode@1003 : Code[10]) : Decimal;
    VAR
      PostedWhseRcptLine@1000 : Record 7319;
    BEGIN
      WITH PostedWhseRcptLine DO BEGIN
        SETCURRENTKEY("Item No.","Location Code","Variant Code");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Variant Code",VariantCode);
        CALCSUMS("Qty. (Base)","Qty. Put Away (Base)");
        EXIT("Qty. (Base)" - "Qty. Put Away (Base)");
      END;
    END;

    PROCEDURE CalcQtyAssgndtoPick@48(Location@1002 : Record 14;ItemNo@1009 : Code[20];VariantCode@1008 : Code[10];UOMCode@1010 : Code[10];BinTypeFilter@1001 : Text[250]) : Decimal;
    VAR
      WhseActivLine@1000 : Record 5767;
    BEGIN
      WITH WhseActivLine DO BEGIN
        SETCURRENTKEY(
          "Item No.","Location Code","Activity Type","Bin Type Code",
          "Unit of Measure Code","Variant Code","Breakbulk No.");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",Location.Code);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE("Bin Type Code",BinTypeFilter);
        IF Location."Directed Put-away and Pick" THEN BEGIN
          IF (NOT Location."Allow Breakbulk") THEN
            SETRANGE("Unit of Measure Code",UOMCode)
          ELSE
            SETRANGE("Breakbulk No.",0);
        END;

        IF Location."Bin Mandatory" THEN
          SETRANGE("Action Type","Action Type"::Take)
        ELSE BEGIN
          SETRANGE("Action Type","Action Type"::" ");
          SETRANGE("Breakbulk No.",0);
        END;

        IF Location."Require Shipment" THEN
          SETRANGE("Activity Type","Activity Type"::Pick)
        ELSE
          SETRANGE("Activity Type","Activity Type"::"Invt. Pick");

        CALCSUMS("Qty. Outstanding (Base)");
        EXIT("Qty. Outstanding (Base)");
      END;
    END;

    PROCEDURE CalcQtyAssgndOnWksh@43(DefWhseWkshLine@1000 : Record 7326;RespectUOMCode@1001 : Boolean;ExcludeLine@1002 : Boolean) : Decimal;
    VAR
      WhseWkshLine@1004 : Record 7326;
    BEGIN
      WITH WhseWkshLine DO BEGIN
        SETCURRENTKEY(
          "Item No.","Location Code","Worksheet Template Name","Variant Code","Unit of Measure Code");
        SETRANGE("Item No.",DefWhseWkshLine."Item No.");
        SETRANGE("Location Code",DefWhseWkshLine."Location Code");
        SETRANGE("Worksheet Template Name",DefWhseWkshLine."Worksheet Template Name");
        SETRANGE("Variant Code",DefWhseWkshLine."Variant Code");
        IF RespectUOMCode THEN
          SETRANGE("Unit of Measure Code",DefWhseWkshLine."Unit of Measure Code");
        CALCSUMS("Qty. to Handle (Base)");

        IF ExcludeLine THEN
          "Qty. to Handle (Base)" := "Qty. to Handle (Base)" - DefWhseWkshLine."Qty. to Handle (Base)";

        EXIT("Qty. to Handle (Base)");
      END;
    END;

    PROCEDURE CalcLineReservedQtyonInvt@49(SourceType@1000 : Integer;SourceSubType@1004 : Option;SourceNo@1001 : Code[20];SourceLineNo@1002 : Integer;SourceSubLineNo@1003 : Integer;SerialNo@1008 : Code[20];LotNo@1009 : Code[20]) : Decimal;
    VAR
      ReservEntry@1005 : Record 337;
      ReservEntry2@1007 : Record 337;
      ReservQtyonInvt@1006 : Decimal;
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");
      ReservEntry.SETRANGE("Source ID",SourceNo);
      ReservEntry.SETRANGE("Source Type",SourceType);
      ReservEntry.SETRANGE("Source Subtype",SourceSubType);
      ReservEntry.SETRANGE("Source Batch Name",'');
      IF SourceType = DATABASE::"Prod. Order Component" THEN BEGIN
        ReservEntry.SETRANGE("Source Ref. No.",SourceSubLineNo);
        ReservEntry.SETRANGE("Source Prod. Order Line",SourceLineNo);
      END ELSE BEGIN
        ReservEntry.SETRANGE("Source Ref. No.",SourceLineNo);
        ReservEntry.SETRANGE("Source Prod. Order Line",0);
      END;
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      IF ReservEntry."Serial No." <> '' THEN
        ReservEntry.SETRANGE("Serial No.",SerialNo);
      IF ReservEntry."Lot No." <> '' THEN
        ReservEntry.SETRANGE("Lot No.",LotNo);
      IF ReservEntry.FIND('-') THEN
        REPEAT
          ReservEntry2.SETRANGE("Entry No.",ReservEntry."Entry No.");
          ReservEntry2.SETRANGE(Positive,TRUE);
          ReservEntry2.SETRANGE("Source Type",DATABASE::"Item Ledger Entry");
          ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
          IF SerialNo <> '' THEN
            ReservEntry2.SETRANGE("Serial No.",SerialNo);
          IF LotNo <> '' THEN
            ReservEntry2.SETRANGE("Lot No.",LotNo);
          IF ReservEntry2.FIND('-') THEN
            REPEAT
              ReservQtyonInvt :=
                ReservQtyonInvt + ReservEntry2."Quantity (Base)" - ReservEntry2."Reserved Pick & Ship Qty.";
            UNTIL ReservEntry2.NEXT = 0;
        UNTIL ReservEntry.NEXT = 0;
      EXIT(ReservQtyonInvt);
    END;

    PROCEDURE CalcLineReservedQtyNotonInvt@52(SourceType@1000 : Integer;SourceSubType@1004 : Option;SourceNo@1001 : Code[20];SourceLineNo@1002 : Integer;SourceSubLineNo@1003 : Integer;CompleteShipment@1007 : Boolean) : Decimal;
    VAR
      ReservEntry@1005 : Record 337;
      ReservQtyNotonInvt@1006 : Decimal;
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");
      ReservEntry.SETRANGE("Source ID",SourceNo);
      ReservEntry.SETRANGE("Source Type",SourceType);
      ReservEntry.SETRANGE("Source Subtype",SourceSubType);
      ReservEntry.SETRANGE("Source Batch Name",'');
      IF SourceType = DATABASE::"Prod. Order Component" THEN BEGIN
        ReservEntry.SETRANGE("Source Ref. No.",SourceSubLineNo);
        ReservEntry.SETRANGE("Source Prod. Order Line",SourceLineNo);
      END ELSE BEGIN
        ReservEntry.SETRANGE("Source Ref. No.",SourceLineNo);
        ReservEntry.SETRANGE("Source Prod. Order Line",0);
      END;
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      ReservEntry.SETFILTER("Expected Receipt Date",'<>%1',0D);
      ReservEntry.SETFILTER("Shipment Date",'<>%1',0D);
      IF ReservEntry.FIND('-') THEN
        REPEAT
          IF NOT CompleteShipment THEN
            ReservQtyNotonInvt := ReservQtyNotonInvt + ABS(ReservEntry."Quantity (Base)");
        UNTIL ReservEntry.NEXT = 0;
      EXIT(ReservQtyNotonInvt);
    END;

    PROCEDURE CalcQtyShipped@51(Location@1002 : Record 14;ItemNo@1009 : Code[20];VariantCode@1008 : Code[10]) : Decimal;
    VAR
      WhseShipLine@1000 : Record 7321;
    BEGIN
      WITH WhseShipLine DO BEGIN
        SETCURRENTKEY("Item No.","Location Code","Variant Code","Due Date");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",Location.Code);
        SETRANGE("Variant Code",VariantCode);
        CALCSUMS("Qty. Shipped (Base)");

        EXIT("Qty. Shipped (Base)");
      END;
    END;

    PROCEDURE GetCaption@44(DestType@1004 : ' ,Customer,Vendor,Location,Item,Family,Sales Order';SourceDoc@1009 : ' ,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer,Outbound Transfer,Prod. Consumption,Prod. Output';Selection@1000 : Integer) : Text[50];
    VAR
      PurchHeader@1003 : Record 38;
      Vendor@1001 : Record 23;
      Customer@1002 : Record 18;
      Location@1005 : Record 14;
      Item@1006 : Record 27;
      Family@1007 : Record 99000773;
      SalesHeader@1008 : Record 36;
      WhseActivHdr@1010 : Record 5766;
    BEGIN
      CASE Selection OF
        0:
          CASE DestType OF
            DestType::Vendor:
              EXIT(Vendor.TABLECAPTION + ' ' + Vendor.FIELDCAPTION("No."));
            DestType::Customer:
              EXIT(Customer.TABLECAPTION + ' ' + Customer.FIELDCAPTION("No."));
            DestType::Location:
              EXIT(Location.TABLECAPTION + ' ' + Location.FIELDCAPTION(Code));
            DestType::Item:
              EXIT(Item.TABLECAPTION + ' ' + Item.FIELDCAPTION("No."));
            DestType::Family:
              EXIT(Family.TABLECAPTION + ' ' + Family.FIELDCAPTION("No."));
            DestType::"Sales Order":
              EXIT(Text009 + ' ' + SalesHeader.FIELDCAPTION("No."));
            ELSE
              EXIT(WhseActivHdr.FIELDCAPTION("Destination No."));
          END;
        1:
          CASE DestType OF
            DestType::Vendor:
              EXIT(Vendor.TABLECAPTION + ' ' + Vendor.FIELDCAPTION(Name));
            DestType::Customer:
              EXIT(Customer.TABLECAPTION + ' ' + Customer.FIELDCAPTION(Name));
            DestType::Location:
              EXIT(Location.TABLECAPTION + ' ' + Location.FIELDCAPTION(Name));
            DestType::Item:
              EXIT(Item.TABLECAPTION + ' ' + Item.FIELDCAPTION(Description));
            DestType::Family:
              EXIT(Family.TABLECAPTION + ' ' + Family.FIELDCAPTION(Description));
            DestType::"Sales Order":
              EXIT(Text009 + ' ' + SalesHeader.FIELDCAPTION("Sell-to Customer Name"));
            ELSE
              EXIT(Text008);
          END;
        2:
          IF SourceDoc IN [
            SourceDoc::"Purchase Order",
            SourceDoc::"Purchase Return Order"]
          THEN
            EXIT(PurchHeader.FIELDCAPTION("Vendor Shipment No."))
          ELSE
            EXIT(WhseActivHdr.FIELDCAPTION("External Document No."));
        3:
          CASE SourceDoc OF
            SourceDoc::"Purchase Order":
              EXIT(PurchHeader.FIELDCAPTION("Vendor Invoice No."));
            SourceDoc::"Purchase Return Order":
              EXIT(PurchHeader.FIELDCAPTION("Vendor Cr. Memo No."));
            ELSE
              EXIT(WhseActivHdr.FIELDCAPTION("External Document No.2"));
          END;
      END;
    END;

    PROCEDURE GetDestinationName@42(DestType@1000 : ' ,Customer,Vendor,Location,Item,Family,Sales Order';DestNo@1007 : Code[20]) : Text[50];
    VAR
      Vendor@1006 : Record 23;
      Customer@1005 : Record 18;
      Location@1004 : Record 14;
      Item@1003 : Record 27;
      Family@1002 : Record 99000773;
      SalesHeader@1001 : Record 36;
    BEGIN
      CASE DestType OF
        DestType::Customer:
          IF Customer.GET(DestNo) THEN
            EXIT(Customer.Name);
        DestType::Vendor:
          IF Vendor.GET(DestNo) THEN
            EXIT(Vendor.Name);
        DestType::Location:
          IF Location.GET(DestNo) THEN
            EXIT(Location.Name);
        DestType::Item:
          IF Item.GET(DestNo) THEN
            EXIT(Item.Description);
        DestType::Family:
          IF Family.GET(DestNo) THEN
            EXIT(Family.Description);
        DestType::"Sales Order":
          IF SalesHeader.GET(SalesHeader."Document Type"::Order,DestNo) THEN
            EXIT(SalesHeader."Sell-to Customer Name");
      END;
    END;

    LOCAL PROCEDURE CalcReservEntryQuantity@50(WhseJnlLine@1001 : Record 7311) : Decimal;
    VAR
      ReservEntry@1000 : Record 337;
    BEGIN
      WITH WhseJnlLine DO BEGIN
        ReservEntry.SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        ReservEntry.SETRANGE("Source ID","Journal Template Name");
        ReservEntry.SETRANGE("Source Type","Source Type");
        ReservEntry.SETRANGE("Source Subtype","Source Subtype");
        ReservEntry.SETRANGE("Source Batch Name","Journal Batch Name");
        IF "Source Type" = DATABASE::"Prod. Order Component" THEN BEGIN
          ReservEntry.SETRANGE("Source Ref. No.","Source Subline No.");
          ReservEntry.SETRANGE("Source Prod. Order Line","Source Line No.");
        END ELSE BEGIN
          ReservEntry.SETRANGE("Source Ref. No.","Source Line No.");
          ReservEntry.SETRANGE("Source Prod. Order Line",0);
        END;
        ReservEntry.SETRANGE("Serial No.","Serial No.");
        ReservEntry.SETRANGE("Lot No.","Lot No.");
        IF ReservEntry.FIND ('-') THEN
          EXIT(ReservEntry."Quantity (Base)");
        EXIT("Qty. (Base)");
      END;
    END;

    BEGIN
    END.
  }
}
