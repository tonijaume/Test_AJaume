OBJECT Codeunit 5932 Service-Get Shipment
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    TableNo=5902;
    OnRun=BEGIN
            ServiceHeader.GET("Document Type","Document No.");
            ServiceHeader.TESTFIELD("Document Type",ServiceHeader."Document Type"::Invoice);

            CLEAR(ServiceShptLine);
            ServiceShptLine.SETCURRENTKEY("Bill-to Customer No.");
            ServiceShptLine.SETRANGE("Bill-to Customer No.",ServiceHeader."Bill-to Customer No.");
            ServiceShptLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
            ServiceShptLine.SETRANGE("Currency Code",ServiceHeader."Currency Code");
            ServiceShptLine.FILTERGROUP(2);


            GetServiceShipments.SETTABLEVIEW(ServiceShptLine);
            GetServiceShipments.SetServiceHeader(ServiceHeader);
            GetServiceShipments.LOOKUPMODE(TRUE);
            GetServiceShipments.RUNMODAL;
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=The %1 on the %2 %3 and the %4 %5 must be the same.;ESP=El %1 en el %2 %3 y el %4 %5 debe ser el mismo.';
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1002 : Record 5902;
      ServiceShptHeader@1003 : Record 5990;
      ServiceShptLine@1004 : Record 5991;
      GetServiceShipments@1005 : Form 5994;
      Text002@1007 : TextConst 'ENU=Creating Service Invoice Lines\;ESP=Creando l¡neas factura servicio\';
      Text003@1006 : TextConst 'ENU=Inserted lines             #1######;ESP=L¡neas insertadas          #1######';

    PROCEDURE CreateInvLines@1(VAR ServiceShptLine2@1000 : Record 5991);
    VAR
      TempFromLineDim@1002 : TEMPORARY Record 357;
      TempToLineDim@1003 : TEMPORARY Record 357;
      DimMgt@1004 : Codeunit 408;
      TransferLine@1001 : Boolean;
    BEGIN
      WITH ServiceShptLine2 DO BEGIN
        SETFILTER("Qty. Shipped Not Invoiced",'<>0');
        IF FIND('-') THEN BEGIN
          ServiceLine.LOCKTABLE;
          ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
          ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
          ServiceLine."Document Type" := ServiceHeader."Document Type";
          ServiceLine."Document No." := ServiceHeader."No.";

          REPEAT
            IF ServiceShptHeader."No." <> "Document No." THEN BEGIN
              ServiceShptHeader.GET("Document No.");
              TransferLine := TRUE;
              IF ServiceShptHeader."Currency Code" <> ServiceHeader."Currency Code" THEN BEGIN
                MESSAGE(
                  Text001,
                  ServiceHeader.FIELDCAPTION("Currency Code"),
                  ServiceHeader.TABLECAPTION, ServiceHeader."No.",
                  ServiceShptHeader.TABLECAPTION,ServiceShptHeader."No.");
                TransferLine := FALSE;
              END;
              IF ServiceShptHeader."Bill-to Customer No." <> ServiceHeader."Bill-to Customer No." THEN BEGIN
                MESSAGE(
                  Text001,
                  ServiceHeader.FIELDCAPTION("Bill-to Customer No."),
                  ServiceHeader.TABLECAPTION, ServiceHeader."No.",
                  ServiceShptHeader.TABLECAPTION,ServiceShptHeader."No.");
                TransferLine := FALSE;
              END;
            END;
            IF TransferLine THEN BEGIN
              ServiceShptLine := ServiceShptLine2;

              ServiceShptLine.InsertInvLineFromShptLine(ServiceLine,TempFromLineDim);

              DimMgt.MoveTempFromDimToTempToDim(TempFromLineDim,TempToLineDim);
            END;
          UNTIL NEXT = 0;
          DimMgt.TransferTempToDimToDocDim(TempToLineDim);
        END;
      END;
    END;

    PROCEDURE SetServiceHeader@2(VAR ServiceHeader2@1000 : Record 5900);
    BEGIN
      ServiceHeader.GET(ServiceHeader2."Document Type",ServiceHeader2."No.");
      ServiceHeader.TESTFIELD("Document Type",ServiceHeader."Document Type"::Invoice);
    END;

    BEGIN
    END.
  }
}
